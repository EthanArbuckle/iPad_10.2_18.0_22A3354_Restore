void sub_1000047A8(mach_port_context_t a1)
{
  mach_port_name_t v2;
  NSObject *v3;
  const void *v4;
  _QWORD v5[4];
  mach_port_name_t v6;

  v2 = *(_DWORD *)(a1 + 16);
  v3 = sub_100009350();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    sub_1000656C0(v2, v3);
  sub_10000492C((uint64_t *)(a1 + 56));
  mach_port_destruct(mach_task_self_, v2, 0, a1);
  v4 = *(const void **)(a1 + 104);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 104) = 0;
  }
  if (qword_10007DA80 != -1)
    dispatch_once(&qword_10007DA80, &stru_100075BB8);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  v5[2] = sub_10000A1EC;
  v5[3] = &unk_100075B58;
  v6 = v2;
  dispatch_sync((dispatch_queue_t)qword_10007DA88, v5);
}

void sub_1000048C4(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
  {
    dispatch_mach_cancel();
    dispatch_release(*(dispatch_object_t *)(a1 + 24));
    *(_QWORD *)(a1 + 24) = 0;
  }
}

uint64_t sub_10000492C(uint64_t *a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  const __CFArray *v5;
  CFIndex Count;
  CFStringRef v7;
  CFStringRef v8;
  CFIndex v9;
  int v10;
  const void *ValueAtIndex;
  const __CFDictionary *Value;
  const void *v13;

  v2 = *a1;
  v3 = sub_100009350();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    sub_1000657E8(v2, v3);
  sub_100004ACC(*a1, 0);
  sub_100004ACC(*a1, 1);
  sub_10000A3D4((_DWORD *)*a1);
  v4 = sub_10000811C(*(_DWORD *)(v2 + 40));
  v5 = *(const __CFArray **)(v4 + 48);
  if (v5)
  {
    Count = CFArrayGetCount(v5);
    v7 = CFStringCreateWithFormat(0, 0, CFSTR("%u"), *(unsigned int *)(v2 + 40));
    v8 = v7;
    if (Count < 1)
    {
      CFRelease(v7);
    }
    else
    {
      v9 = 0;
      v10 = 0;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v4 + 48), v9);
        Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_10007D9B8, ValueAtIndex);
        if (Value)
        {
          v13 = CFDictionaryGetValue(Value, CFSTR("session"));
          if (v13)
          {
            if (CFEqual(v8, v13))
            {
              v10 = 1;
              sub_1000116F0(*a1, ValueAtIndex, 1);
            }
          }
        }
        ++v9;
      }
      while (Count != v9);
      CFRelease(v8);
      if (v10)
        sub_100010234();
    }
  }
  *(_DWORD *)(v2 + 40) = 0;
  CFRelease((CFTypeRef)*a1);
  *a1 = 0;
  return 0;
}

void sub_100004ACC(uint64_t a1, int a2)
{
  uint64_t v2;
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v7;
  const __CFArray *Copy;
  CFIndex i;
  void *ValueAtIndex;

  v2 = 176;
  if (!a2)
    v2 = 168;
  v3 = *(const __CFArray **)(a1 + v2);
  if (v3)
  {
    Count = CFArrayGetCount(*(CFArrayRef *)(a1 + v2));
    if (Count >= 1)
    {
      v7 = Count;
      Copy = CFArrayCreateCopy(0, v3);
      for (i = 0; i != v7; ++i)
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(Copy, i);
        sub_100011D08(a1, ValueAtIndex, a2, 1);
      }
      CFRelease(Copy);
    }
  }
}

uint64_t sub_100004BD0(uint64_t a1, void *a2, const void *a3, int a4)
{
  NSObject *v8;
  const __CFDictionary *v9;
  const __CFDictionary *MutableCopy;
  __CFDictionary *v11;
  int v12;
  CFStringRef v13;
  CFStringRef v14;
  const __CFDictionary *v15;
  uint64_t v16;
  CFStringRef v17;
  uint64_t v18;
  uint64_t v19;
  const __CFArray *v20;
  __CFArray *Mutable;
  const char *v23;
  int v24;
  int v25;
  const char *v26;
  void *value;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  int v33;
  __int16 v34;
  void *v35;
  CFRange v36;

  value = 0;
  v8 = sub_100009350();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    v23 = "*set ";
    v24 = *(unsigned __int8 *)(a1 + 44);
    v25 = *(_DWORD *)(a1 + 40);
    if (!a4)
      v23 = "set  ";
    v29 = v23;
    v30 = 2080;
    v26 = "  ";
    *(_DWORD *)buf = 136315906;
    if (v24)
      v26 = "t ";
    v31 = v26;
    v32 = 1024;
    v33 = v25;
    v34 = 2112;
    v35 = a2;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s%s : %5u : %@", buf, 0x26u);
  }
  v9 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_10007D9B8, a2);
  if (v9)
    MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v9);
  else
    MutableCopy = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  v11 = MutableCopy;
  v12 = CFDictionaryContainsKey(MutableCopy, CFSTR("data"));
  CFDictionarySetValue(v11, CFSTR("data"), a3);
  v13 = CFStringCreateWithFormat(0, 0, CFSTR("%u"), *(unsigned int *)(a1 + 40));
  v14 = v13;
  if (*(_BYTE *)(a1 + 44))
  {
    if (v12)
    {
      v15 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_10007D9B8, a2);
      if (!CFDictionaryGetValueIfPresent(v15, CFSTR("session"), (const void **)&value) || !CFEqual(v14, value))
      {
        CFRelease(v14);
        CFRelease(v11);
        v16 = 1005;
        if (!a4)
          goto LABEL_28;
        return v16;
      }
LABEL_21:
      CFRelease(v14);
      CFDictionarySetValue((CFMutableDictionaryRef)qword_10007D9B8, a2, v11);
      CFRelease(v11);
      if (v12)
        goto LABEL_27;
      goto LABEL_24;
    }
    v18 = sub_10000811C(*(_DWORD *)(a1 + 40));
    v19 = v18;
    v20 = *(const __CFArray **)(v18 + 48);
    if (!v20)
      goto LABEL_18;
    v36.length = CFArrayGetCount(*(CFArrayRef *)(v18 + 48));
    v36.location = 0;
    if (CFArrayContainsValue(v20, v36, a2))
    {
LABEL_20:
      CFDictionarySetValue(v11, CFSTR("session"), v14);
      goto LABEL_21;
    }
    Mutable = *(__CFArray **)(v19 + 48);
    if (!Mutable)
    {
LABEL_18:
      Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
      *(_QWORD *)(v19 + 48) = Mutable;
    }
    CFArrayAppendValue(Mutable, a2);
    goto LABEL_20;
  }
  if (v12)
  {
    if (CFDictionaryGetValueIfPresent(v11, CFSTR("session"), (const void **)&value) && !CFEqual(v14, value))
    {
      CFDictionaryRemoveValue(v11, CFSTR("session"));
      v17 = CFStringCreateWithFormat(0, 0, CFSTR("%@:%@"), value, a2);
      CFSetAddValue((CFMutableSetRef)qword_10007D9D8, v17);
      CFRelease(v17);
    }
    goto LABEL_21;
  }
  CFRelease(v13);
  CFDictionarySetValue((CFMutableDictionaryRef)qword_10007D9B8, a2, v11);
  CFRelease(v11);
LABEL_24:
  if (CFSetContainsValue((CFSetRef)qword_10007D9D0, a2))
    CFSetRemoveValue((CFMutableSetRef)qword_10007D9D0, a2);
  else
    sub_10000984C(a2);
LABEL_27:
  CFSetAddValue((CFMutableSetRef)qword_10007D9C8, a2);
  v16 = 0;
  if (!a4)
LABEL_28:
    sub_100010234();
  return v16;
}

uint64_t sub_100004F5C(int a1, uint64_t a2, unsigned int a3, int a4, int *a5)
{
  CFTypeRef v8;
  CFTypeID TypeID;
  uint64_t v10;
  int v11;
  CFTypeRef cf;

  cf = 0;
  if (_SCUnserializeString(&cf, 0, a2, a3))
  {
    v8 = cf;
    TypeID = CFStringGetTypeID();
    if (v8 && CFGetTypeID(v8) == TypeID)
    {
      v10 = sub_10000811C(a1);
      if (v10)
        v11 = sub_1000091BC(*(_QWORD **)(v10 + 56), (__CFString *)cf, a4 != 0, 0);
      else
        v11 = 2001;
    }
    else
    {
      v11 = 1002;
    }
  }
  else
  {
    v11 = 1001;
  }
  *a5 = v11;
  if (cf)
    CFRelease(cf);
  return 0;
}

void sub_100005054(uint64_t a1, xpc_object_t object)
{
  xpc_type_t type;
  const char *string;
  os_log_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  os_log_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  const void *v26[2];

  type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_connection)
  {
    sub_10000723C((_xpc_connection_s *)object);
  }
  else
  {
    string = (const char *)type;
    if (type == (xpc_type_t)&_xpc_type_error)
    {
      string = xpc_dictionary_get_string(object, _xpc_error_key_description);
      if (object == &_xpc_error_connection_invalid)
      {
        v18 = sub_100007594();
        v19 = _SC_syslog_os_log_mapping(3);
        if (__SC_log_enabled(3, v18, v19))
        {
          v20 = _os_log_pack_size(12);
          v21 = (char *)v26 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
          v22 = __error();
          v23 = _os_log_pack_fill(v21, v20, *v22, &_mh_execute_header, "DNS configuration server: %s", (const char *)v26[0]);
          *(_DWORD *)v23 = 136315138;
          *(_QWORD *)(v23 + 4) = string;
          __SC_log_send(3, v18, v19, v21);
        }
        xpc_release(*(xpc_object_t *)(a1 + 32));
      }
      else
      {
        v6 = sub_100007594();
        v7 = _SC_syslog_os_log_mapping(3);
        v13 = __SC_log_enabled(3, v6, v7);
        if (object == &_xpc_error_connection_interrupted)
        {
          if (v13)
          {
            v24 = _os_log_pack_size(12);
            v9 = (char *)v26 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
            v25 = __error();
            v11 = _os_log_pack_fill(v9, v24, *v25, &_mh_execute_header, "DNS configuration server: %s", (const char *)v26[0]);
            v12 = 136315138;
            goto LABEL_5;
          }
        }
        else if (v13)
        {
          v14 = _os_log_pack_size(22);
          v15 = (char *)v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
          v16 = __error();
          v17 = _os_log_pack_fill(v15, v14, *v16, &_mh_execute_header, "DNS configuration server: Connection error: %p : %s", v26[0], (const char *)v26[1]);
          *(_DWORD *)v17 = 134218242;
          *(_QWORD *)(v17 + 4) = object;
          *(_WORD *)(v17 + 12) = 2080;
          *(_QWORD *)(v17 + 14) = string;
          __SC_log_send(3, v6, v7, v15);
        }
      }
    }
    else
    {
      v6 = sub_100007594();
      v7 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v6, v7))
      {
        v8 = _os_log_pack_size(12);
        v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
        v10 = __error();
        v11 = _os_log_pack_fill(v9, v8, *v10, &_mh_execute_header, "DNS configuration server: unknown event type : %p", v26[0]);
        v12 = 134217984;
LABEL_5:
        *(_DWORD *)v11 = v12;
        *(_QWORD *)(v11 + 4) = string;
        __SC_log_send(3, v6, v7, v9);
      }
    }
  }
}

void sub_100005398(_xpc_connection_s *a1, xpc_object_t xdict)
{
  int64_t int64;
  int64_t v5;
  os_log_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  const void *v14[2];

  int64 = xpc_dictionary_get_int64(xdict, "request_op");
  if (int64 == 65538)
  {
    sub_10002CA4C(a1, xdict);
  }
  else
  {
    v5 = int64;
    if (int64 == 65537)
    {
      sub_1000066DC(a1, xdict);
    }
    else
    {
      v6 = sub_100007594();
      v7 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v6, v7))
      {
        v8 = _os_log_pack_size(22);
        v11 = (char *)v14 - ((__chkstk_darwin(v8, v9, v10) + 15) & 0xFFFFFFFFFFFFFFF0);
        v12 = __error();
        v13 = _os_log_pack_fill(v11, v8, *v12, &_mh_execute_header, "<%p> unknown request : %lld", v14[0], v14[1]);
        *(_DWORD *)v13 = 134218240;
        *(_QWORD *)(v13 + 4) = a1;
        *(_WORD *)(v13 + 12) = 2048;
        *(_QWORD *)(v13 + 14) = v5;
        __SC_log_send(3, v6, v7, v11);
      }
    }
  }
}

void sub_10000555C(_xpc_connection_s *a1, xpc_object_t xdict)
{
  int64_t int64;
  int64_t v5;
  os_log_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  const void *v14[2];

  int64 = xpc_dictionary_get_int64(xdict, "request_op");
  if (int64 == 131075)
  {
    sub_100046E60(a1, xdict);
  }
  else
  {
    v5 = int64;
    if (int64 == 131074)
    {
      sub_100046CD8(a1, xdict);
    }
    else if (int64 == 131073)
    {
      sub_100006440(a1, xdict);
    }
    else
    {
      v6 = sub_100007594();
      v7 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v6, v7))
      {
        v8 = _os_log_pack_size(22);
        v11 = (char *)v14 - ((__chkstk_darwin(v8, v9, v10) + 15) & 0xFFFFFFFFFFFFFFF0);
        v12 = __error();
        v13 = _os_log_pack_fill(v11, v8, *v12, &_mh_execute_header, "<%p> unknown request : %lld", v14[0], v14[1]);
        *(_DWORD *)v13 = 134218240;
        *(_QWORD *)(v13 + 4) = a1;
        *(_WORD *)(v13 + 12) = 2048;
        *(_QWORD *)(v13 + 14) = v5;
        __SC_log_send(3, v6, v7, v11);
      }
    }
  }
}

__CFString *sub_10000576C(uint64_t a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;

  v2 = CFGetAllocator((CFTypeRef)a1);
  Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<serverSession %p [%p]> {"), a1, v2);
  CFStringAppendFormat(Mutable, 0, CFSTR("port = 0x%x (%u)"), *(unsigned int *)(a1 + 16), *(unsigned int *)(a1 + 16));
  if (*(_QWORD *)(a1 + 40))
    CFStringAppendFormat(Mutable, 0, CFSTR(", name = %@"), *(_QWORD *)(a1 + 40));
  CFStringAppendFormat(Mutable, 0, CFSTR("}"));
  return Mutable;
}

void sub_100005840(mach_port_context_t a1, uint64_t a2, uint64_t a3)
{
  mach_msg_header_t *msg;

  switch(a2)
  {
    case 13:
      sub_1000048C4(a1);
      break;
    case 8:
      sub_1000047A8(a1);
      break;
    case 2:
      if (dispatch_mach_mig_demux(a1, &off_100075980, 1, a3))
      {
        sub_1000094B4();
      }
      else
      {
        msg = (mach_msg_header_t *)dispatch_mach_msg_get_msg(a3, 0);
        mach_msg_destroy(msg);
      }
      break;
  }
}

const void *sub_10000596C(uint64_t a1)
{
  const void *result;

  result = CFDictionaryGetValue((CFDictionaryRef)qword_10007DA70, (const void *)*(unsigned int *)(a1 + 40));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1000059D8(uint64_t a1)
{
  unsigned int *v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  audit_token_t v7;

  if (!CFDictionaryContainsKey((CFDictionaryRef)qword_10007DA70, (const void *)*(unsigned int *)(a1 + 40)))
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = sub_100005AC4(0);
    v2 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    if (v2)
    {
      CFDictionarySetValue((CFMutableDictionaryRef)qword_10007DA70, (const void *)v2[4], v2);
      v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      v4 = *(_OWORD *)(a1 + 60);
      *(_OWORD *)(v3 + 68) = *(_OWORD *)(a1 + 44);
      *(_OWORD *)(v3 + 84) = v4;
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      v6 = *(_OWORD *)(v5 + 84);
      *(_OWORD *)v7.val = *(_OWORD *)(v5 + 68);
      *(_OWORD *)&v7.val[4] = v6;
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 64) = audit_token_to_euid(&v7);
      CFRelease(*(CFTypeRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
    }
  }
}

mach_port_context_t sub_100005AC4(mach_port_name_t a1)
{
  mach_port_context_t Instance;
  kern_return_t v3;
  __int128 v4;
  mach_error_t v5;
  os_log_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  kern_return_t inserted;
  mach_error_t v16;
  os_log_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int *v21;
  uint64_t v22;
  char *v23;
  __int128 v25;
  char *v26;
  mach_port_name_t name;
  mach_port_options_t options;

  if (qword_10007DA90 != -1)
    dispatch_once(&qword_10007DA90, &stru_100075BF8);
  Instance = _CFRuntimeCreateInstance(0, qword_10007DA98, 120, 0);
  if (Instance)
  {
    if (a1)
    {
LABEL_5:
      *(_DWORD *)(Instance + 64) = 1;
      *(_QWORD *)(Instance + 104) = 0;
      *(_DWORD *)(Instance + 16) = a1;
      return Instance;
    }
    *(_QWORD *)&options.flags = 1;
    options.8 = 0uLL;
    name = 0;
    v3 = mach_port_construct(mach_task_self_, &options, Instance, &name);
    if (v3)
    {
      v5 = v3;
      *(_QWORD *)&v4 = 136315138;
      v25 = v4;
      while (1)
      {
        v26 = 0;
        v6 = sub_100009350();
        v7 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v6, v7))
        {
          v8 = _os_log_pack_size(12);
          v9 = (char *)&v25 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
          v10 = __error();
          v11 = _os_log_pack_fill(v9, v8, *v10, &_mh_execute_header, "could not allocate mach port: %s", (const char *)v25);
          v12 = mach_error_string(v5);
          *(_DWORD *)v11 = v25;
          *(_QWORD *)(v11 + 4) = v12;
          __SC_log_send(5, v6, v7, v9);
        }
        if (v5 == 6 || v5 == 3)
        {
          sleep(1u);
        }
        else
        {
          v13 = mach_error_string(v5);
          asprintf(&v26, "Could not allocate mach port: %s", v13);
          if (v26)
            v14 = v26;
          else
            v14 = "Could not allocate new session (mach) port";
          _SC_crash(v14, 0, 0);
          if (v26)
            free(v26);
          CFRelease((CFTypeRef)Instance);
        }
        if (v5 != 6 && v5 != 3)
          break;
        *(_QWORD *)&options.flags = 1;
        options.8 = 0uLL;
        v5 = mach_port_construct(mach_task_self_, &options, Instance, &name);
        if (!v5)
          goto LABEL_22;
      }
    }
    else
    {
LABEL_22:
      inserted = mach_port_insert_right(mach_task_self_, name, name, 0x14u);
      if (!inserted)
      {
        a1 = name;
        goto LABEL_5;
      }
      v16 = inserted;
      v17 = sub_100009350();
      v18 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v17, v18))
      {
        v19 = _os_log_pack_size(12);
        v20 = (char *)&v25 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
        v21 = __error();
        v22 = _os_log_pack_fill(v20, v19, *v21, &_mh_execute_header, "mach_port_insert_right() failed: %s", (const char *)v25);
        v23 = mach_error_string(v16);
        *(_DWORD *)v22 = 136315138;
        *(_QWORD *)(v22 + 4) = v23;
        __SC_log_send(3, v17, v18, v20);
      }
      CFRelease((CFTypeRef)Instance);
    }
    return 0;
  }
  return Instance;
}

uint64_t sub_100005E1C(uint64_t result, uint64_t a2)
{
  int v3;
  int *v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  __int128 v10;
  __int128 v11[2];

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 76)
  {
    v3 = -304;
    goto LABEL_12;
  }
  if (*(_BYTE *)(result + 39) != 1
    || *(_BYTE *)(result + 55) != 1
    || *(_DWORD *)(result + 40) != *(_DWORD *)(result + 68)
    || *(_DWORD *)(result + 56) != *(_DWORD *)(result + 72))
  {
    v3 = -300;
    goto LABEL_12;
  }
  if (*(_DWORD *)(result + 76) || *(_DWORD *)(result + 80) <= 0x1Fu)
  {
    v3 = -309;
LABEL_12:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_13;
  }
  v4 = (int *)(a2 + 28);
  *(_QWORD *)(a2 + 32) = 0x11000000000000;
  v5 = *(_DWORD *)(result + 12);
  v6 = *(_QWORD *)(result + 28);
  v7 = *(_DWORD *)(result + 40);
  v8 = *(_QWORD *)(result + 44);
  v9 = *(_DWORD *)(result + 56);
  v10 = *(_OWORD *)(result + 112);
  v11[0] = *(_OWORD *)(result + 96);
  v11[1] = v10;
  result = sub_100005F7C(v5, v6, v7, v8, v9, v4, (int *)(a2 + 48), v11);
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 40) = NDR_record;
    *(_DWORD *)a2 |= 0x80000000;
    *(_DWORD *)(a2 + 4) = 52;
    *(_DWORD *)(a2 + 24) = 1;
    return result;
  }
  *(_DWORD *)(a2 + 32) = result;
LABEL_13:
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_100005F7C(int a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, int *a6, int *a7, __int128 *a8)
{
  const void *v14;
  CFTypeID TypeID;
  CFTypeRef Value;
  CFTypeID v17;
  CFTypeID v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t Private;
  int v24;
  os_log_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  int *v29;
  const __CFDictionary *v31;
  const void *v32;
  __int128 v33[2];

  v31 = 0;
  v32 = 0;
  *a6 = 0;
  *a7 = 0;
  if (_SCUnserializeString(&v32, 0, a2, a3))
  {
    if (!a4)
      goto LABEL_7;
  }
  else
  {
    *a7 = 1001;
    if (!a4)
      goto LABEL_7;
  }
  if (a5 && !_SCUnserialize(&v31, 0, a4, a5))
  {
LABEL_23:
    v24 = 1001;
    goto LABEL_24;
  }
LABEL_7:
  if (*a7)
    goto LABEL_25;
  v14 = v32;
  TypeID = CFStringGetTypeID();
  if (!v14
    || CFGetTypeID(v14) != TypeID
    || (Value = v31) != 0
    && ((v17 = CFDictionaryGetTypeID(), CFGetTypeID(Value) != v17)
     || (Value = CFDictionaryGetValue(v31, kSCDynamicStoreUseSessionKeys)) != 0
     && (v18 = CFBooleanGetTypeID(), CFGetTypeID(Value) != v18)))
  {
    v24 = 1002;
LABEL_24:
    *a7 = v24;
    goto LABEL_25;
  }
  v19 = a8[1];
  v33[0] = *a8;
  v33[1] = v19;
  v20 = sub_100006210(a1, v33);
  if (!v20)
  {
    v25 = sub_100009350();
    v26 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v25, v26))
    {
      v27 = _os_log_pack_size(2);
      v28 = (char *)&v31 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
      v29 = __error();
      *(_WORD *)_os_log_pack_fill(v28, v27, *v29, &_mh_execute_header, "session is already open") = 0;
      __SC_log_send(5, v25, v26, v28);
    }
    goto LABEL_23;
  }
  v21 = v20;
  *a6 = *(_DWORD *)(v20 + 16);
  v22 = sub_100009350();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    sub_10006575C(a6, (uint64_t *)&v32, v22);
  Private = __SCDynamicStoreCreatePrivate(0, v32, 0, 0);
  *(_QWORD *)(v21 + 56) = Private;
  *a7 = 0;
  *(_DWORD *)(Private + 40) = *a6;
  if (Value)
    *(_BYTE *)(Private + 44) = CFBooleanGetValue((CFBooleanRef)Value);
  *(_QWORD *)(v21 + 40) = v32;
LABEL_25:
  if (v31)
    CFRelease(v31);
  return 0;
}

uint64_t sub_100006210(int a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD block[5];
  int v13;
  __int128 v14;
  __int128 v15;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2000000000;
  v11 = 0;
  if (qword_10007DA80 != -1)
    dispatch_once(&qword_10007DA80, &stru_100075BB8);
  block[1] = 0x40000000;
  v4 = a2[1];
  v14 = *a2;
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_1000059D8;
  block[3] = &unk_100075B38;
  v13 = a1;
  block[4] = &v8;
  v15 = v4;
  dispatch_sync((dispatch_queue_t)qword_10007DA88, block);
  v5 = v9[3];
  if (v5)
  {
    sub_10000632C(v5, 0);
    v6 = v9[3];
  }
  else
  {
    v6 = 0;
  }
  _Block_object_dispose(&v8, 8);
  return v6;
}

uint64_t sub_10000632C(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t f;

  v4 = sub_1000063CC();
  f = dispatch_mach_create_f("configd/SCDynamicStore", v4, a1, sub_100005840);
  *(_QWORD *)(a1 + 24) = f;
  if (!a2)
  {
    dispatch_mach_notify_no_senders();
    f = *(_QWORD *)(a1 + 24);
  }
  dispatch_set_qos_class_fallback(f, 9);
  return dispatch_mach_connect(*(_QWORD *)(a1 + 24), *(unsigned int *)(a1 + 16), 0, 0);
}

uint64_t sub_1000063CC()
{
  if (qword_10007DA50 != -1)
    dispatch_once(&qword_10007DA50, &stru_1000759A8);
  return qword_10007DA58;
}

void sub_100006440(_xpc_connection_s *a1, xpc_object_t xdict)
{
  _xpc_connection_s *remote_connection;
  xpc_object_t reply;
  void *v6;
  const __CFData *v7;
  const char *string;
  os_log_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  pid_t pid;
  const void *v19;
  const UInt8 *BytePtr;
  size_t Length;
  os_log_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  int *v28;
  uint64_t v29;
  const void *v30[2];
  uint64_t v31;
  uint64_t v32;

  v30[0] = 0;
  remote_connection = xpc_dictionary_get_remote_connection(xdict);
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v6 = reply;
    v7 = (const __CFData *)sub_100006978((uint64_t)&qword_10007DE10, (uint64_t)a1, v30);
    string = xpc_dictionary_get_string(xdict, "proc_name");
    v9 = sub_100007594();
    v10 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v9, v10))
    {
      if (string)
        v11 = string;
      else
        v11 = "???";
      v12 = _os_log_pack_size(38);
      v15 = (char *)v30 - ((__chkstk_darwin(v12, v13, v14) + 15) & 0xFFFFFFFFFFFFFFF0);
      v16 = __error();
      v17 = _os_log_pack_fill(v15, v12, *v16, &_mh_execute_header, "<%p:%s[%d]> Network information copy: %llu", v30[0], (const char *)v30[1], v31, v32);
      pid = xpc_connection_get_pid(a1);
      v19 = v30[0];
      *(_DWORD *)v17 = 134218754;
      *(_QWORD *)(v17 + 4) = a1;
      *(_WORD *)(v17 + 12) = 2080;
      *(_QWORD *)(v17 + 14) = v11;
      *(_WORD *)(v17 + 22) = 1024;
      *(_DWORD *)(v17 + 24) = pid;
      *(_WORD *)(v17 + 28) = 2048;
      *(_QWORD *)(v17 + 30) = v19;
      __SC_log_send(7, v9, v10, v15);
    }
    if (v7)
    {
      BytePtr = CFDataGetBytePtr(v7);
      Length = CFDataGetLength(v7);
      xpc_dictionary_set_data(v6, "configuration", BytePtr, Length);
    }
    xpc_connection_send_message(remote_connection, v6);
    xpc_release(v6);
  }
  else
  {
    v22 = sub_100007594();
    v23 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v22, v23))
    {
      v24 = _os_log_pack_size(12);
      v27 = (char *)v30 - ((__chkstk_darwin(v24, v25, v26) + 15) & 0xFFFFFFFFFFFFFFF0);
      v28 = __error();
      v29 = _os_log_pack_fill(v27, v24, *v28, &_mh_execute_header, "<%p> _nwi_state_copy: xpc_dictionary_create_reply: failed", v30[0]);
      *(_DWORD *)v29 = 134217984;
      *(_QWORD *)(v29 + 4) = a1;
      __SC_log_send(3, v22, v23, v27);
    }
  }
}

void sub_1000066DC(_xpc_connection_s *a1, xpc_object_t xdict)
{
  _xpc_connection_s *remote_connection;
  xpc_object_t reply;
  void *v6;
  const __CFData *v7;
  const char *string;
  os_log_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  pid_t pid;
  const void *v19;
  const UInt8 *BytePtr;
  size_t Length;
  os_log_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  int *v28;
  uint64_t v29;
  const void *v30[2];
  uint64_t v31;
  uint64_t v32;

  v30[0] = 0;
  remote_connection = xpc_dictionary_get_remote_connection(xdict);
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v6 = reply;
    v7 = (const __CFData *)sub_100006978((uint64_t)&qword_10007DBF0, (uint64_t)a1, v30);
    string = xpc_dictionary_get_string(xdict, "proc_name");
    v9 = sub_100007594();
    v10 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v9, v10))
    {
      if (string)
        v11 = string;
      else
        v11 = "???";
      v12 = _os_log_pack_size(38);
      v15 = (char *)v30 - ((__chkstk_darwin(v12, v13, v14) + 15) & 0xFFFFFFFFFFFFFFF0);
      v16 = __error();
      v17 = _os_log_pack_fill(v15, v12, *v16, &_mh_execute_header, "<%p:%s[%d]> DNS configuration copy: %llu", v30[0], (const char *)v30[1], v31, v32);
      pid = xpc_connection_get_pid(a1);
      v19 = v30[0];
      *(_DWORD *)v17 = 134218754;
      *(_QWORD *)(v17 + 4) = a1;
      *(_WORD *)(v17 + 12) = 2080;
      *(_QWORD *)(v17 + 14) = v11;
      *(_WORD *)(v17 + 22) = 1024;
      *(_DWORD *)(v17 + 24) = pid;
      *(_WORD *)(v17 + 28) = 2048;
      *(_QWORD *)(v17 + 30) = v19;
      __SC_log_send(7, v9, v10, v15);
    }
    if (v7)
    {
      BytePtr = CFDataGetBytePtr(v7);
      Length = CFDataGetLength(v7);
      xpc_dictionary_set_data(v6, "configuration", BytePtr, Length);
    }
    xpc_connection_send_message(remote_connection, v6);
    xpc_release(v6);
  }
  else
  {
    v22 = sub_100007594();
    v23 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v22, v23))
    {
      v24 = _os_log_pack_size(12);
      v27 = (char *)v30 - ((__chkstk_darwin(v24, v25, v26) + 15) & 0xFFFFFFFFFFFFFFF0);
      v28 = __error();
      v29 = _os_log_pack_fill(v27, v24, *v28, &_mh_execute_header, "<%p> _dnsinfo_copy: xpc_dictionary_create_reply: failed", v30[0]);
      *(_DWORD *)v29 = 134217984;
      *(_QWORD *)(v29 + 4) = a1;
      __SC_log_send(3, v22, v23, v27);
    }
  }
}

uint64_t sub_100006978(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  CFDataRef v5;
  __CFData *Value;
  UInt8 *MutableBytePtr;
  uint64_t v8;
  uint64_t v10;

  v10 = a2;
  v5 = CFDataCreate(0, (const UInt8 *)&v10, 8);
  Value = (__CFData *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), v5);
  CFRelease(v5);
  MutableBytePtr = CFDataGetMutableBytePtr(Value);
  v8 = *(_QWORD *)(a1 + 8);
  *((_QWORD *)MutableBytePtr + 1) = v8;
  if (v8 == 1)
    v8 = 0;
  *a3 = v8;
  return *(_QWORD *)a1;
}

void sub_100006A24(uint64_t a1, xpc_object_t object)
{
  xpc_type_t type;
  void *v5;
  os_log_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  _xpc_connection_s *v12;
  pid_t pid;
  __int16 v14;
  const char *string;
  int v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  _xpc_connection_s *v21;
  pid_t v22;
  os_log_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int *v27;
  uint64_t v28;
  _xpc_connection_s *v29;
  pid_t v30;
  uint64_t v31;
  int *v32;
  _xpc_connection_s *v33;
  pid_t v34;
  const void *v35;
  uint64_t v36;
  const char *v37;
  const char *v38;

  type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_dictionary)
  {
    sub_100005398(*(_xpc_connection_s **)(a1 + 32), object);
    return;
  }
  v5 = type;
  if (type != (xpc_type_t)&_xpc_type_error)
  {
    v6 = sub_100007594();
    v7 = _SC_syslog_os_log_mapping(3);
    if (!__SC_log_enabled(3, v6, v7))
      return;
    v8 = _os_log_pack_size(28);
    v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    v10 = __error();
    v11 = _os_log_pack_fill(v9, v8, *v10, &_mh_execute_header, "<%p:%d> unknown event type : %p", v35, v36, v37);
    v12 = *(_xpc_connection_s **)(a1 + 32);
    pid = xpc_connection_get_pid(v12);
    *(_DWORD *)v11 = 134218496;
    *(_QWORD *)(v11 + 4) = v12;
    *(_WORD *)(v11 + 12) = 1024;
    *(_DWORD *)(v11 + 14) = pid;
    v14 = 2048;
    goto LABEL_5;
  }
  string = xpc_dictionary_get_string(object, _xpc_error_key_description);
  if (object == &_xpc_error_connection_invalid)
  {
    v23 = sub_100007594();
    v24 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v23, v24))
    {
      v25 = _os_log_pack_size(18);
      v26 = (char *)&v35 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
      v27 = __error();
      v28 = _os_log_pack_fill(v26, v25, *v27, &_mh_execute_header, "<%p:%d> DNS configuration session: close", v35, v36);
      v29 = *(_xpc_connection_s **)(a1 + 32);
      v30 = xpc_connection_get_pid(v29);
      *(_DWORD *)v28 = 134218240;
      *(_QWORD *)(v28 + 4) = v29;
      *(_WORD *)(v28 + 12) = 1024;
      *(_DWORD *)(v28 + 14) = v30;
      __SC_log_send(7, v23, v24, v26);
    }
    if (sub_1000076D4((uint64_t)&qword_10007DBF0, *(_QWORD *)(a1 + 32)))
    {
      sub_100056038((uint64_t)&qword_10007DBF0);
      if (qword_10007DC10)
        (*(void (**)(void))(qword_10007DC10 + 16))();
    }
  }
  else
  {
    v5 = (void *)string;
    v6 = sub_100007594();
    v7 = _SC_syslog_os_log_mapping(3);
    v16 = __SC_log_enabled(3, v6, v7);
    if (object == &_xpc_error_connection_interrupted)
    {
      if (v16)
      {
        v31 = _os_log_pack_size(28);
        v9 = (char *)&v35 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
        v32 = __error();
        v11 = _os_log_pack_fill(v9, v31, *v32, &_mh_execute_header, "<%p:%d> %s", v35, v36, v37);
        v33 = *(_xpc_connection_s **)(a1 + 32);
        v34 = xpc_connection_get_pid(v33);
        *(_DWORD *)v11 = 134218498;
        *(_QWORD *)(v11 + 4) = v33;
        *(_WORD *)(v11 + 12) = 1024;
        *(_DWORD *)(v11 + 14) = v34;
        v14 = 2080;
LABEL_5:
        *(_WORD *)(v11 + 18) = v14;
        *(_QWORD *)(v11 + 20) = v5;
        __SC_log_send(3, v6, v7, v9);
      }
    }
    else if (v16)
    {
      v17 = _os_log_pack_size(38);
      v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
      v19 = __error();
      v20 = _os_log_pack_fill(v18, v17, *v19, &_mh_execute_header, "<%p:%d> Connection error: %p : %s", v35, v36, v37, v38);
      v21 = *(_xpc_connection_s **)(a1 + 32);
      v22 = xpc_connection_get_pid(v21);
      *(_DWORD *)v20 = 134218754;
      *(_QWORD *)(v20 + 4) = v21;
      *(_WORD *)(v20 + 12) = 1024;
      *(_DWORD *)(v20 + 14) = v22;
      *(_WORD *)(v20 + 18) = 2048;
      *(_QWORD *)(v20 + 20) = object;
      *(_WORD *)(v20 + 28) = 2080;
      *(_QWORD *)(v20 + 30) = v5;
      __SC_log_send(3, v6, v7, v18);
    }
  }
}

void sub_100006E30(uint64_t a1, xpc_object_t object)
{
  xpc_type_t type;
  void *v5;
  os_log_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  _xpc_connection_s *v12;
  pid_t pid;
  __int16 v14;
  const char *string;
  int v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  _xpc_connection_s *v21;
  pid_t v22;
  os_log_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int *v27;
  uint64_t v28;
  _xpc_connection_s *v29;
  pid_t v30;
  uint64_t v31;
  int *v32;
  _xpc_connection_s *v33;
  pid_t v34;
  const void *v35;
  uint64_t v36;
  const char *v37;
  const char *v38;

  type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_dictionary)
  {
    sub_10000555C(*(_xpc_connection_s **)(a1 + 32), object);
    return;
  }
  v5 = type;
  if (type != (xpc_type_t)&_xpc_type_error)
  {
    v6 = sub_100007594();
    v7 = _SC_syslog_os_log_mapping(3);
    if (!__SC_log_enabled(3, v6, v7))
      return;
    v8 = _os_log_pack_size(28);
    v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    v10 = __error();
    v11 = _os_log_pack_fill(v9, v8, *v10, &_mh_execute_header, "<%p:%d> unknown event type : %p", v35, v36, v37);
    v12 = *(_xpc_connection_s **)(a1 + 32);
    pid = xpc_connection_get_pid(v12);
    *(_DWORD *)v11 = 134218496;
    *(_QWORD *)(v11 + 4) = v12;
    *(_WORD *)(v11 + 12) = 1024;
    *(_DWORD *)(v11 + 14) = pid;
    v14 = 2048;
    goto LABEL_5;
  }
  string = xpc_dictionary_get_string(object, _xpc_error_key_description);
  if (object == &_xpc_error_connection_invalid)
  {
    v23 = sub_100007594();
    v24 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v23, v24))
    {
      v25 = _os_log_pack_size(18);
      v26 = (char *)&v35 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
      v27 = __error();
      v28 = _os_log_pack_fill(v26, v25, *v27, &_mh_execute_header, "<%p:%d> Network information session: close", v35, v36);
      v29 = *(_xpc_connection_s **)(a1 + 32);
      v30 = xpc_connection_get_pid(v29);
      *(_DWORD *)v28 = 134218240;
      *(_QWORD *)(v28 + 4) = v29;
      *(_WORD *)(v28 + 12) = 1024;
      *(_DWORD *)(v28 + 14) = v30;
      __SC_log_send(7, v23, v24, v26);
    }
    if (sub_1000076D4((uint64_t)&qword_10007DE10, *(_QWORD *)(a1 + 32)))
    {
      sub_100056038((uint64_t)&qword_10007DE10);
      if (qword_10007DE30)
        (*(void (**)(void))(qword_10007DE30 + 16))();
    }
  }
  else
  {
    v5 = (void *)string;
    v6 = sub_100007594();
    v7 = _SC_syslog_os_log_mapping(3);
    v16 = __SC_log_enabled(3, v6, v7);
    if (object == &_xpc_error_connection_interrupted)
    {
      if (v16)
      {
        v31 = _os_log_pack_size(28);
        v9 = (char *)&v35 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
        v32 = __error();
        v11 = _os_log_pack_fill(v9, v31, *v32, &_mh_execute_header, "<%p:%d> %s", v35, v36, v37);
        v33 = *(_xpc_connection_s **)(a1 + 32);
        v34 = xpc_connection_get_pid(v33);
        *(_DWORD *)v11 = 134218498;
        *(_QWORD *)(v11 + 4) = v33;
        *(_WORD *)(v11 + 12) = 1024;
        *(_DWORD *)(v11 + 14) = v34;
        v14 = 2080;
LABEL_5:
        *(_WORD *)(v11 + 18) = v14;
        *(_QWORD *)(v11 + 20) = v5;
        __SC_log_send(3, v6, v7, v9);
      }
    }
    else if (v16)
    {
      v17 = _os_log_pack_size(38);
      v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
      v19 = __error();
      v20 = _os_log_pack_fill(v18, v17, *v19, &_mh_execute_header, "<%p:%d> Connection error: %p : %s", v35, v36, v37, v38);
      v21 = *(_xpc_connection_s **)(a1 + 32);
      v22 = xpc_connection_get_pid(v21);
      *(_DWORD *)v20 = 134218754;
      *(_QWORD *)(v20 + 4) = v21;
      *(_WORD *)(v20 + 12) = 1024;
      *(_DWORD *)(v20 + 14) = v22;
      *(_WORD *)(v20 + 18) = 2048;
      *(_QWORD *)(v20 + 20) = object;
      *(_WORD *)(v20 + 28) = 2080;
      *(_QWORD *)(v20 + 30) = v5;
      __SC_log_send(3, v6, v7, v18);
    }
  }
}

void sub_10000723C(_xpc_connection_s *a1)
{
  os_log_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  pid_t pid;
  void **handler;
  uint64_t v12;
  void (*v13)(uint64_t, xpc_object_t);
  void *v14;
  _xpc_connection_s *v15;

  v2 = sub_100007594();
  v3 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v2, v3))
  {
    v4 = _os_log_pack_size(18);
    v7 = (char *)&handler - ((__chkstk_darwin(v4, v5, v6) + 15) & 0xFFFFFFFFFFFFFFF0);
    v8 = __error();
    v9 = _os_log_pack_fill(v7, v4, *v8, &_mh_execute_header, "<%p:%d> DNS configuration session: open", handler, v12);
    pid = xpc_connection_get_pid(a1);
    *(_DWORD *)v9 = 134218240;
    *(_QWORD *)(v9 + 4) = a1;
    *(_WORD *)(v9 + 12) = 1024;
    *(_DWORD *)(v9 + 14) = pid;
    __SC_log_send(7, v2, v3, v7);
  }
  sub_100007604((uint64_t)&qword_10007DBF0, a1);
  if (qword_10007DC18 != -1)
    dispatch_once(&qword_10007DC18, &stru_100076580);
  xpc_connection_set_target_queue(a1, (dispatch_queue_t)qword_10007DC20);
  handler = _NSConcreteStackBlock;
  v12 = 0x40000000;
  v13 = sub_100006A24;
  v14 = &unk_1000765A0;
  v15 = a1;
  xpc_connection_set_event_handler(a1, &handler);
  xpc_connection_resume(a1);
}

void sub_1000073E8(_xpc_connection_s *a1)
{
  os_log_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  pid_t pid;
  void **handler;
  uint64_t v12;
  void (*v13)(uint64_t, xpc_object_t);
  void *v14;
  _xpc_connection_s *v15;

  v2 = sub_100007594();
  v3 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v2, v3))
  {
    v4 = _os_log_pack_size(18);
    v7 = (char *)&handler - ((__chkstk_darwin(v4, v5, v6) + 15) & 0xFFFFFFFFFFFFFFF0);
    v8 = __error();
    v9 = _os_log_pack_fill(v7, v4, *v8, &_mh_execute_header, "<%p:%d> Network information session: open", handler, v12);
    pid = xpc_connection_get_pid(a1);
    *(_DWORD *)v9 = 134218240;
    *(_QWORD *)(v9 + 4) = a1;
    *(_WORD *)(v9 + 12) = 1024;
    *(_DWORD *)(v9 + 14) = pid;
    __SC_log_send(7, v2, v3, v7);
  }
  sub_100007604((uint64_t)&qword_10007DE10, a1);
  if (qword_10007DE38 != -1)
    dispatch_once(&qword_10007DE38, &stru_100076D50);
  xpc_connection_set_target_queue(a1, (dispatch_queue_t)qword_10007DE40);
  handler = _NSConcreteStackBlock;
  v12 = 0x40000000;
  v13 = sub_100006E30;
  v14 = &unk_100076D70;
  v15 = a1;
  xpc_connection_set_event_handler(a1, &handler);
  xpc_connection_resume(a1);
}

os_log_t sub_100007594()
{
  os_log_t result;

  result = (os_log_t)qword_10007DC80;
  if (!qword_10007DC80)
  {
    result = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    qword_10007DC80 = (uint64_t)result;
  }
  return result;
}

void sub_100007604(uint64_t a1, _xpc_connection_s *a2)
{
  CFDataRef v4;
  __CFData *Mutable;
  UInt8 *MutableBytePtr;
  _xpc_connection_s *v7;

  v7 = a2;
  v4 = CFDataCreate(0, (const UInt8 *)&v7, 8);
  Mutable = CFDataCreateMutable(0, 24);
  CFDataSetLength(Mutable, 24);
  MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
  *(_DWORD *)MutableBytePtr = xpc_connection_get_pid(a2);
  *((_QWORD *)MutableBytePtr + 1) = 0;
  *((_QWORD *)MutableBytePtr + 2) = 0;
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), v4, Mutable);
  CFRelease(v4);
  CFRelease(Mutable);
}

uint64_t sub_1000076D4(uint64_t a1, uint64_t a2)
{
  CFDataRef v3;
  __CFData *Value;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v8 = a2;
  v3 = CFDataCreate(0, (const UInt8 *)&v8, 8);
  Value = (__CFData *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), v3);
  if (Value && (v5 = *((_QWORD *)CFDataGetMutableBytePtr(Value) + 2)) != 0)
  {
    if (v5 == *(_QWORD *)(a1 + 8))
    {
      v6 = 0;
      --*(_DWORD *)(a1 + 28);
    }
    else
    {
      --*(_DWORD *)(a1 + 24);
      v6 = 1;
    }
  }
  else
  {
    v6 = 0;
  }
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 16), v3);
  CFRelease(v3);
  return v6;
}

uint64_t sub_1000077B0(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  NDR_record_t v5;
  int v6;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 76)
  {
    v6 = -304;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v6;
    v5 = NDR_record;
    goto LABEL_12;
  }
  if (*(_BYTE *)(result + 39) != 1
    || *(_BYTE *)(result + 55) != 1
    || (v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 68))
    || (v4 = *(_DWORD *)(result + 56), v4 != *(_DWORD *)(result + 72)))
  {
    v6 = -300;
    goto LABEL_11;
  }
  result = sub_1000078B4(*(_DWORD *)(result + 12), *(_QWORD *)(result + 28), v3, *(_QWORD *)(result + 44), v4, (int *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  v5 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_12:
  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

uint64_t sub_1000078B4(int a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, int *a6)
{
  CFTypeRef v10;
  CFTypeID TypeID;
  CFTypeRef v12;
  CFTypeID v13;
  uint64_t v14;
  int v15;
  CFTypeRef v17;
  CFTypeRef cf;

  v17 = 0;
  cf = 0;
  *a6 = 0;
  if (a2 && a3 && !_SCUnserialize(&cf, 0, a2, a3))
  {
    *a6 = 1001;
    if (!a4)
      goto LABEL_7;
  }
  else if (!a4)
  {
    goto LABEL_7;
  }
  if (a5 && !_SCUnserialize(&v17, 0, a4, a5))
  {
    v15 = 1001;
    goto LABEL_19;
  }
LABEL_7:
  if (*a6)
    goto LABEL_20;
  v10 = cf;
  if (cf && (TypeID = CFArrayGetTypeID(), CFGetTypeID(v10) != TypeID)
    || (v12 = v17) != 0 && (v13 = CFArrayGetTypeID(), CFGetTypeID(v12) != v13))
  {
    v15 = 1002;
  }
  else
  {
    v14 = sub_10000811C(a1);
    if (v14)
      v15 = sub_100007A0C(*(_QWORD *)(v14 + 56), (const __CFArray *)cf, (const __CFArray *)v17);
    else
      v15 = 2001;
  }
LABEL_19:
  *a6 = v15;
LABEL_20:
  if (cf)
    CFRelease(cf);
  if (v17)
    CFRelease(v17);
  return 0;
}

uint64_t sub_100007A0C(uint64_t a1, const __CFArray *a2, const __CFArray *a3)
{
  NSObject *v6;
  const __CFArray *v7;
  const void *v8;
  const __CFAllocator *v9;
  const __CFArray *Copy;
  const __CFArray *v11;
  const void *v12;
  const __CFAllocator *v13;
  const __CFArray *v14;
  int v16;
  CFIndex Count;
  CFIndex v18;
  uint64_t v19;
  CFTypeRef cf;
  const __CFArray *v21;
  uint64_t v22;
  uint8_t buf[4];
  int v24;
  __int16 v25;
  CFIndex v26;
  __int16 v27;
  CFIndex v28;
  CFRange v29;
  CFRange v30;
  CFRange v31;
  CFRange v32;

  v22 = 0;
  v6 = sub_100009350();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v16 = *(_DWORD *)(a1 + 40);
    if (a2)
    {
      Count = CFArrayGetCount(a2);
      if (a3)
        goto LABEL_17;
    }
    else
    {
      Count = 0;
      if (a3)
      {
LABEL_17:
        v18 = CFArrayGetCount(a3);
LABEL_20:
        *(_DWORD *)buf = 67109632;
        v24 = v16;
        v25 = 2048;
        v26 = Count;
        v27 = 2048;
        v28 = v18;
        _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "watch   : %5u : %ld keys, %ld patterns", buf, 0x1Cu);
        goto LABEL_2;
      }
    }
    v18 = 0;
    goto LABEL_20;
  }
LABEL_2:
  HIDWORD(v22) = 0;
  v19 = a1;
  cf = 0;
  v21 = a2;
  LOBYTE(v22) = 0;
  v7 = *(const __CFArray **)(a1 + 168);
  if (v7)
  {
    cf = CFArrayCreateCopy(0, v7);
    v8 = *(const void **)(a1 + 168);
    v9 = CFGetAllocator(v8);
    Copy = CFArrayCreateCopy(v9, (CFArrayRef)v8);
    v29.length = CFArrayGetCount(Copy);
    v29.location = 0;
    CFArrayApplyFunction(Copy, v29, (CFArrayApplierFunction)sub_100011C64, &v19);
    CFRelease(Copy);
  }
  if (a2)
  {
    v30.length = CFArrayGetCount(a2);
    v30.location = 0;
    CFArrayApplyFunction(a2, v30, (CFArrayApplierFunction)sub_100009118, &v19);
  }
  if (cf)
    CFRelease(cf);
  cf = 0;
  v21 = a3;
  LOBYTE(v22) = 1;
  v11 = *(const __CFArray **)(a1 + 176);
  if (v11)
  {
    cf = CFArrayCreateCopy(0, v11);
    v12 = *(const void **)(a1 + 176);
    v13 = CFGetAllocator(v12);
    v14 = CFArrayCreateCopy(v13, (CFArrayRef)v12);
    v31.length = CFArrayGetCount(v14);
    v31.location = 0;
    CFArrayApplyFunction(v14, v31, (CFArrayApplierFunction)sub_100011C64, &v19);
    CFRelease(v14);
  }
  if (a3)
  {
    v32.length = CFArrayGetCount(a3);
    v32.location = 0;
    CFArrayApplyFunction(a3, v32, (CFArrayApplierFunction)sub_100009118, &v19);
  }
  if (cf)
    CFRelease(cf);
  return HIDWORD(v22);
}

uint64_t sub_100007C38(uint64_t result, uint64_t a2)
{
  int v3;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    v3 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_10;
  }
  if (*(_BYTE *)(result + 39) != 1 || *(_DWORD *)(result + 40) != *(_DWORD *)(result + 52))
  {
    v3 = -300;
    goto LABEL_9;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  result = sub_100007D54(*(_DWORD *)(result + 12), *(_QWORD *)(result + 28), *(_DWORD *)(result + 40), (_QWORD *)(a2 + 28), (_DWORD *)(a2 + 52), (_DWORD *)(a2 + 56), (int *)(a2 + 60));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_10:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 64;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_100007D54(int a1, uint64_t a2, unsigned int a3, _QWORD *a4, _DWORD *a5, _DWORD *a6, int *a7)
{
  CFTypeRef v11;
  CFTypeID TypeID;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  const void *v19;
  const void *v21;
  uint64_t v22;
  CFTypeRef cf;

  v22 = 0;
  cf = 0;
  v21 = 0;
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  if (_SCUnserializeString(&cf, 0, a2, a3))
  {
    v11 = cf;
    TypeID = CFStringGetTypeID();
    if (v11 && CFGetTypeID(v11) == TypeID)
    {
      v13 = sub_10000811C(a1);
      if (v13)
      {
        v14 = v13;
        v15 = sub_100008214(v13, (void *)cf, 0);
        v16 = v15;
        if (v15 == 10100 || !v15)
        {
          v17 = sub_100008A94(*(_QWORD *)(v14 + 56), (void *)cf, 0, &v21, 0);
          *a7 = v17;
          if (v17)
            goto LABEL_14;
          v18 = _SCSerializeData(v21, a4, &v22);
          v19 = v21;
          *a5 = v22;
          CFRelease(v19);
          if (!v18)
            v16 = 1001;
        }
      }
      else
      {
        v16 = 2001;
      }
    }
    else
    {
      v16 = 1002;
    }
  }
  else
  {
    v16 = 1001;
  }
  *a7 = v16;
LABEL_14:
  if (cf)
    CFRelease(cf);
  return 0;
}

uint64_t sub_100007EB8(uint64_t result, uint64_t a2)
{
  NDR_record_t v3;
  int v4;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 52)
  {
    v4 = -304;
LABEL_8:
    *(_DWORD *)(a2 + 32) = v4;
    v3 = NDR_record;
    goto LABEL_9;
  }
  if (*(unsigned __int16 *)(result + 38) << 16 != 1114112)
  {
    v4 = -300;
    goto LABEL_8;
  }
  result = sub_100007F94(*(_DWORD *)(result + 12), *(_DWORD *)(result + 28), *(_DWORD *)(result + 48), (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  v3 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_9:
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

uint64_t sub_100007F94(int a1, mach_port_name_t a2, int a3, _DWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;

  v7 = sub_10000811C(a1);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 56);
    v9 = sub_10000804C(v8, a3, a2);
    *a4 = v9;
    if (!v9)
    {
      *(_DWORD *)(v8 + 48) = 2;
      *(_DWORD *)(v8 + 184) = a2;
      return 0;
    }
  }
  else
  {
    *a4 = 2001;
  }
  if (a2)
    mach_port_deallocate(mach_task_self_, a2);
  return 0;
}

uint64_t sub_10000804C(uint64_t a1, int a2, int a3)
{
  uint64_t result;
  const void *v5;
  int v6;
  CFNumberRef v7;

  if (*(_DWORD *)(a1 + 48))
    return 2003;
  result = 1002;
  if (!a2 && a3)
  {
    v6 = *(_DWORD *)(a1 + 40);
    v5 = (const void *)(a1 + 40);
    if (*(_QWORD *)(sub_10000811C(v6) + 32))
    {
      if (!qword_10007D9E0)
        qword_10007D9E0 = (uint64_t)CFSetCreateMutable(0, 0, &kCFTypeSetCallBacks);
      v7 = CFNumberCreate(0, kCFNumberIntType, v5);
      CFSetAddValue((CFMutableSetRef)qword_10007D9E0, v7);
      CFRelease(v7);
    }
    return 0;
  }
  return result;
}

uint64_t sub_10000811C(int a1)
{
  uint64_t v2;
  _QWORD block[5];
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  if (!a1)
    sub_100065698();
  if (qword_10007DA80 != -1)
    dispatch_once(&qword_10007DA80, &stru_100075BB8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_10000596C;
  block[3] = &unk_100075B10;
  block[4] = &v6;
  v5 = a1;
  dispatch_sync((dispatch_queue_t)qword_10007DA88, block);
  v2 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v2;
}

uint64_t sub_100008214(uint64_t a1, void *a2, const __CFDictionary *a3)
{
  __int128 v6;
  pid_t v7;
  uint64_t result;
  const __CFArray *Value;
  os_log_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  const __CFBoolean *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int is_process_extension;
  const CFBooleanRef *v24;
  os_log_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  int *v31;
  uint64_t v32;
  int v33;
  audit_token_t atoken;

  v6 = *(_OWORD *)(a1 + 84);
  *(_OWORD *)atoken.val = *(_OWORD *)(a1 + 68);
  *(_OWORD *)&atoken.val[4] = v6;
  v7 = audit_token_to_pid(&atoken);
  if (v7 == getpid())
    return 0;
  if (a3 || (result = (uint64_t)sub_1000089C8(a2), (a3 = (const __CFDictionary *)result) != 0))
  {
    Value = (const __CFArray *)CFDictionaryGetValue(a3, CFSTR("read-deny"));
    if (Value && sub_1000085F0(a1, Value))
    {
      v10 = sub_100009350();
      v11 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v10, v11))
      {
        v12 = _os_log_pack_size(32);
        v15 = (char *)&atoken - ((__chkstk_darwin(v12, v13, v14) + 15) & 0xFFFFFFFFFFFFFFF0);
        v16 = *__error();
        v17 = _os_log_pack_fill(v15, v12, v16, &_mh_execute_header, "%s(%@): %@ has deny entitlement");
LABEL_15:
        *(_DWORD *)v17 = 136315650;
        *(_QWORD *)(v17 + 4) = "checkReadAccess";
        *(_WORD *)(v17 + 12) = 2112;
        *(_QWORD *)(v17 + 14) = a2;
        *(_WORD *)(v17 + 22) = 2112;
        *(_QWORD *)(v17 + 24) = a1;
        __SC_log_send(6, v10, v11, v15);
        return 1003;
      }
      return 1003;
    }
    if (CFDictionaryContainsKey(a3, CFSTR("read-deny-background")) && &_ba_is_process_extension)
    {
      v18 = *(const __CFBoolean **)(a1 + 112);
      if (v18)
      {
        if (CFBooleanGetValue(v18))
          goto LABEL_13;
      }
      else
      {
        is_process_extension = ba_is_process_extension(a1 + 68);
        v24 = &kCFBooleanTrue;
        if (!is_process_extension)
          v24 = &kCFBooleanFalse;
        *(CFBooleanRef *)(a1 + 112) = *v24;
        if (is_process_extension)
        {
LABEL_13:
          v10 = sub_100009350();
          v11 = _SC_syslog_os_log_mapping(6);
          if (__SC_log_enabled(6, v10, v11))
          {
            v19 = _os_log_pack_size(32);
            v15 = (char *)&atoken - ((__chkstk_darwin(v19, v20, v21) + 15) & 0xFFFFFFFFFFFFFFF0);
            v22 = *__error();
            v17 = _os_log_pack_fill(v15, v19, v22, &_mh_execute_header, "%s(%@): %@ deny background asset extension");
            goto LABEL_15;
          }
          return 1003;
        }
      }
    }
    result = (uint64_t)CFDictionaryGetValue(a3, CFSTR("read-allow"));
    if (result)
    {
      if (sub_1000085F0(a1, (CFArrayRef)result))
      {
        v25 = sub_100009350();
        v26 = _SC_syslog_os_log_mapping(6);
        result = __SC_log_enabled(6, v25, v26);
        if ((_DWORD)result)
        {
          v27 = _os_log_pack_size(32);
          v30 = (char *)&atoken - ((__chkstk_darwin(v27, v28, v29) + 15) & 0xFFFFFFFFFFFFFFF0);
          v31 = __error();
          v32 = _os_log_pack_fill(v30, v27, *v31, &_mh_execute_header, "%s(%@): %@ has allow entitlement");
          *(_DWORD *)v32 = 136315650;
          *(_QWORD *)(v32 + 4) = "checkReadAccess";
          *(_WORD *)(v32 + 12) = 2112;
          *(_QWORD *)(v32 + 14) = a2;
          *(_WORD *)(v32 + 22) = 2112;
          *(_QWORD *)(v32 + 24) = a1;
          __SC_log_send(6, v25, v26, v30);
          return 0;
        }
      }
      else
      {
        if (CFDictionaryContainsKey(a3, CFSTR("read-allow-system")) && sub_10000E5F0(a1))
          return 0;
        v33 = sub_10000E7EC(a1, CFSTR("com.apple.SystemConfiguration.SCDynamicStore-read-no-fault"));
        if (CFDictionaryContainsKey(a3, CFSTR("read-allow-platform")) && sub_10000E88C(a1))
        {
          if (v33)
            return 0;
          else
            return 10100;
        }
        else if (v33)
        {
          return 1003;
        }
        else
        {
          return 10003;
        }
      }
    }
  }
  return result;
}

BOOL sub_1000085F0(uint64_t a1, CFArrayRef theArray)
{
  CFIndex Count;
  CFIndex v5;
  const __CFString *ValueAtIndex;
  CFIndex v8;
  CFIndex v9;
  const __CFString *v10;
  const __CFNull *v11;

  Count = CFArrayGetCount(theArray);
  if (Count < 1)
    return 0;
  v5 = Count;
  ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, 0);
  if (sub_1000086C4(a1, ValueAtIndex))
    return 1;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v5 == v8)
      break;
    v10 = (const __CFString *)CFArrayGetValueAtIndex(theArray, v8);
    v11 = sub_1000086C4(a1, v10);
    v8 = v9 + 1;
  }
  while (!v11);
  return v9 < v5;
}

const __CFNull *sub_1000086C4(uint64_t a1, const __CFString *key)
{
  const __CFDictionary *v4;
  const __CFNull *Value;
  CFTypeRef v6;
  __int128 v7;
  __SecTask *v8;
  __SecTask *v9;
  CFIndex Code;
  CFErrorDomain Domain;
  os_log_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __CFDictionary *Mutable;
  os_log_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  audit_token_t token;

  v4 = *(const __CFDictionary **)(a1 + 104);
  if (v4)
  {
    Value = (const __CFNull *)CFDictionaryGetValue(v4, key);
    if (Value)
    {
      if (Value == kCFNull)
        return 0;
      else
        return Value;
    }
  }
  v7 = *(_OWORD *)(a1 + 84);
  *(_OWORD *)token.val = *(_OWORD *)(a1 + 68);
  *(_OWORD *)&token.val[4] = v7;
  v8 = SecTaskCreateWithAuditToken(0, &token);
  if (v8)
  {
    v9 = v8;
    *(_QWORD *)token.val = 0;
    v6 = SecTaskCopyValueForEntitlement(v8, key, (CFErrorRef *)&token);
    if (!v6 && *(_QWORD *)token.val)
    {
      Code = CFErrorGetCode(*(CFErrorRef *)token.val);
      Domain = CFErrorGetDomain(*(CFErrorRef *)token.val);
      if (!CFEqual(Domain, kCFErrorDomainMach) || Code != -536870911 && Code != -536870160)
      {
        v12 = sub_100009350();
        v13 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v12, v13))
        {
          v14 = _os_log_pack_size(32);
          v15 = (char *)&token - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
          v16 = __error();
          v17 = _os_log_pack_fill(v15, v14, *v16, &_mh_execute_header, "SecTaskCopyValueForEntitlement(,\"%@\",) failed, error = %@ : %@");
          v18 = *(_QWORD *)token.val;
          v19 = *(_QWORD *)(a1 + 40);
          *(_DWORD *)v17 = 138412802;
          *(_QWORD *)(v17 + 4) = key;
          *(_WORD *)(v17 + 12) = 2112;
          *(_QWORD *)(v17 + 14) = v18;
          *(_WORD *)(v17 + 22) = 2112;
          *(_QWORD *)(v17 + 24) = v19;
          __SC_log_send(5, v12, v13, v15);
        }
      }
      CFRelease(*(CFTypeRef *)token.val);
    }
    Mutable = *(__CFDictionary **)(a1 + 104);
    if (Mutable)
    {
      if (v6)
      {
LABEL_17:
        CFDictionarySetValue(Mutable, key, v6);
        CFRelease(v6);
LABEL_23:
        CFRelease(v9);
        return (const __CFNull *)v6;
      }
    }
    else
    {
      Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      *(_QWORD *)(a1 + 104) = Mutable;
      if (v6)
        goto LABEL_17;
    }
    CFDictionarySetValue(Mutable, key, kCFNull);
    goto LABEL_23;
  }
  v21 = sub_100009350();
  v22 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v21, v22))
  {
    v23 = _os_log_pack_size(12);
    v24 = (char *)&token - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    v25 = __error();
    v26 = _os_log_pack_fill(v24, v23, *v25, &_mh_execute_header, "SecTaskCreateWithAuditToken() failed: %@");
    v27 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)v26 = 138412290;
    *(_QWORD *)(v26 + 4) = v27;
    __SC_log_send(5, v21, v22, v24);
  }
  return 0;
}

void *sub_1000089C8(void *key)
{
  void *v1;
  CFTypeID TypeID;
  void *v3;
  CFTypeID v4;
  void *value;
  void *v7;

  value = 0;
  v7 = 0;
  if (CFDictionaryGetValueIfPresent((CFDictionaryRef)qword_10007D9B8, key, (const void **)&value)
    && (v1 = value, TypeID = CFDictionaryGetTypeID(), v1)
    && CFGetTypeID(v1) == TypeID
    && CFDictionaryGetValueIfPresent((CFDictionaryRef)value, CFSTR("access-controls"), (const void **)&v7)
    && (v3 = v7, v4 = CFDictionaryGetTypeID(), v3)
    && CFGetTypeID(v3) == v4)
  {
    return v7;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100008A94(uint64_t a1, void *key, _QWORD *a3, const void **a4, int a5)
{
  NSObject *v10;
  const __CFDictionary *Value;
  const __CFDictionary *v12;
  const void *v13;
  uint64_t result;
  const char *v15;
  int v16;
  int v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  void *v22;

  if (!a3)
  {
    v10 = sub_100009350();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v15 = "*copy  ";
      v16 = *(_DWORD *)(a1 + 40);
      v17 = 136315650;
      if (!a5)
        v15 = "copy   ";
      v18 = v15;
      v19 = 1024;
      v20 = v16;
      v21 = 2112;
      v22 = key;
      _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s : %5u : %@", (uint8_t *)&v17, 0x1Cu);
    }
  }
  Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_10007D9B8, key);
  if (!Value)
    return 1004;
  v12 = Value;
  if (!CFDictionaryGetValueIfPresent(Value, CFSTR("data"), a4))
    return 1004;
  CFRetain(*a4);
  if (!a3)
    return 0;
  v13 = CFDictionaryGetValue(v12, CFSTR("access-controls"));
  result = 0;
  *a3 = v13;
  return result;
}

void sub_100008BF0(const void *a1, const __CFArray *a2, CFStringRef theString)
{
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  CFIndex v8;
  char *v9;
  const __CFData *ValueAtIndex;
  const UInt8 *BytePtr;
  int v12;
  const __CFArray *v13;
  CFIndex Count;
  CFIndex v15;
  CFIndex i;
  const void *v17;
  __CFArray *MutableCopy;
  os_log_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int *v25;
  os_log_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  int *v32;
  uint64_t v33;
  const char *v34;
  char v35[256];
  _BYTE v36[256];

  Length = CFStringGetLength(theString);
  MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x600u);
  v8 = MaximumSizeForEncoding + 1;
  if (MaximumSizeForEncoding < 256)
    v9 = v36;
  else
    v9 = (char *)CFAllocatorAllocate(0, v8, 0);
  if (_SC_cfstring_to_cstring(theString, v9, v8, 1536))
  {
    ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(a2, 0);
    BytePtr = CFDataGetBytePtr(ValueAtIndex);
    v12 = regexec((const regex_t *)BytePtr, v9, 0, 0, 0);
    if (v12 != 1)
    {
      if (v12)
      {
        regerror(v12, (const regex_t *)BytePtr, v35, 0x100uLL);
        v26 = sub_100009350();
        v27 = _SC_syslog_os_log_mapping(6);
        if (__SC_log_enabled(6, v26, v27))
        {
          v28 = _os_log_pack_size(12);
          v31 = &v35[-((__chkstk_darwin(v28, v29, v30) + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
          v32 = __error();
          v33 = _os_log_pack_fill(v31, v28, *v32, &_mh_execute_header, "%s", v34);
          *(_DWORD *)v33 = 136315138;
          *(_QWORD *)(v33 + 4) = v35;
          __SC_log_send(6, v26, v27, v31);
        }
      }
      else
      {
        v13 = (const __CFArray *)CFArrayGetValueAtIndex(a2, 1);
        Count = CFArrayGetCount(v13);
        if (Count >= 1)
        {
          v15 = Count;
          for (i = 0; i != v15; ++i)
          {
            v17 = CFArrayGetValueAtIndex(v13, i);
            sub_100008EE8(v17, theString);
          }
        }
        MutableCopy = CFArrayCreateMutableCopy(0, 0, a2);
        CFArrayAppendValue(MutableCopy, theString);
        CFDictionarySetValue((CFMutableDictionaryRef)qword_10007D9C0, a1, MutableCopy);
        CFRelease(MutableCopy);
      }
    }
  }
  else
  {
    v19 = sub_100009350();
    v20 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v19, v20))
    {
      v21 = _os_log_pack_size(2);
      v24 = &v35[-((__chkstk_darwin(v21, v22, v23) + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
      v25 = __error();
      *(_WORD *)_os_log_pack_fill(v24, v21, *v25, &_mh_execute_header, "could not convert store key to C string") = 0;
      __SC_log_send(6, v19, v20, v24);
    }
  }
  if (v9 != v36)
    CFAllocatorDeallocate(0, v9);
}

void sub_100008EE8(const void *a1, const void *a2)
{
  const __CFDictionary *Value;
  const __CFDictionary *MutableCopy;
  const __CFDictionary *v6;
  const __CFArray *v7;
  const __CFArray *v8;
  const __CFArray *v9;
  const __CFArray *Mutable;
  CFMutableArrayRef v11;
  __CFArray *v12;
  CFIndex FirstIndexOfValue;
  CFIndex v14;
  const __CFNumber *ValueAtIndex;
  CFNumberRef v16;
  int valuePtr;
  CFRange v18;

  Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_10007D9B8, a2);
  if (Value)
    MutableCopy = CFDictionaryCreateMutableCopy(0, 0, Value);
  else
    MutableCopy = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  v6 = MutableCopy;
  v7 = (const __CFArray *)CFDictionaryGetValue(MutableCopy, CFSTR("watchers"));
  v8 = (const __CFArray *)CFDictionaryGetValue(v6, CFSTR("watcherRefs"));
  if (v7)
  {
    v9 = v8;
    Mutable = CFArrayCreateMutableCopy(0, 0, v7);
    v11 = CFArrayCreateMutableCopy(0, 0, v9);
  }
  else
  {
    Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    v11 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  }
  v12 = v11;
  valuePtr = 0;
  v18.length = CFArrayGetCount(Mutable);
  v18.location = 0;
  FirstIndexOfValue = CFArrayGetFirstIndexOfValue(Mutable, v18, a1);
  if (FirstIndexOfValue == -1)
  {
    CFArrayAppendValue(Mutable, a1);
    valuePtr = 1;
    v16 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    CFArrayAppendValue(v12, v16);
  }
  else
  {
    v14 = FirstIndexOfValue;
    ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v12, FirstIndexOfValue);
    CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &valuePtr);
    ++valuePtr;
    v16 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    CFArraySetValueAtIndex(v12, v14, v16);
  }
  CFRelease(v16);
  CFDictionarySetValue(v6, CFSTR("watchers"), Mutable);
  CFRelease(Mutable);
  CFDictionarySetValue(v6, CFSTR("watcherRefs"), v12);
  CFRelease(v12);
  CFDictionarySetValue((CFMutableDictionaryRef)qword_10007D9B8, a2, v6);
  CFRelease(v6);
}

uint64_t sub_100009118(uint64_t result, uint64_t a2)
{
  __CFString *v3;
  const __CFArray *v4;
  CFRange v5;

  if (!*(_DWORD *)(a2 + 28))
  {
    v3 = (__CFString *)result;
    v4 = *(const __CFArray **)(a2 + 8);
    if (!v4
      || (v5.length = CFArrayGetCount(*(CFArrayRef *)(a2 + 8)),
          v5.location = 0,
          result = CFArrayContainsValue(v4, v5, v3),
          !(_DWORD)result))
    {
      result = sub_1000091BC(*(_QWORD **)a2, v3, *(unsigned __int8 *)(a2 + 24), 1);
      *(_DWORD *)(a2 + 28) = result;
    }
  }
  return result;
}

uint64_t sub_1000091BC(_QWORD *a1, __CFString *a2, int a3, int a4)
{
  NSObject *v8;
  CFNumberRef v9;
  __CFArray **v10;
  const __CFArray *v11;
  uint64_t v12;
  const __CFArray *v13;
  const char *v15;
  int v16;
  const char *v17;
  int v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  __CFString *v25;

  v8 = sub_100009350();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    v15 = "*watch+";
    v16 = *((_DWORD *)a1 + 10);
    if (!a4)
      v15 = "watch+ ";
    v18 = 136315906;
    v19 = v15;
    v20 = 1024;
    v21 = v16;
    if (a3)
      v17 = "pattern";
    else
      v17 = "key";
    v22 = 2080;
    v23 = v17;
    v24 = 2112;
    v25 = a2;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s : %5u : %s : %@", (uint8_t *)&v18, 0x26u);
  }
  v9 = CFNumberCreate(0, kCFNumberIntType, a1 + 5);
  if (a3)
  {
    v11 = (const __CFArray *)a1[22];
    v10 = (__CFArray **)(a1 + 22);
    v12 = sub_1000093C0(v11, a2);
    if ((_DWORD)v12)
      goto LABEL_9;
    if (!sub_10000F9B8(a2, v9))
    {
      v12 = 1002;
      goto LABEL_9;
    }
  }
  else
  {
    v13 = (const __CFArray *)a1[21];
    v10 = (__CFArray **)(a1 + 21);
    v12 = sub_1000093C0(v13, a2);
    if ((_DWORD)v12)
      goto LABEL_9;
    sub_100008EE8(v9, a2);
  }
  sub_100009440(v10, a2);
  v12 = 0;
LABEL_9:
  if (v9)
    CFRelease(v9);
  return v12;
}

os_log_t sub_100009350()
{
  os_log_t result;

  result = (os_log_t)qword_10007DA20;
  if (!qword_10007DA20)
  {
    result = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
    qword_10007DA20 = (uint64_t)result;
  }
  return result;
}

uint64_t sub_1000093C0(const __CFArray *a1, const void *a2)
{
  CFRange v5;

  if (a1 && (v5.length = CFArrayGetCount(a1), v5.location = 0, CFArrayContainsValue(a1, v5, a2)))
    return 1005;
  else
    return 0;
}

void sub_100009440(__CFArray **a1, void *value)
{
  __CFArray *Mutable;

  Mutable = *a1;
  if (!Mutable)
  {
    Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    *a1 = Mutable;
  }
  CFArrayAppendValue(Mutable, value);
}

void sub_1000094B4()
{
  CFIndex Count;
  uint64_t v1;
  const void **v2;
  uint64_t v3;
  _DWORD *v4;
  int v5;
  NSObject *v6;
  uint64_t i;
  NSObject *v8;
  ssize_t v9;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int valuePtr;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  void *values[2];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;

  if (qword_10007D9E0)
  {
    valuePtr = 0;
    *(_OWORD *)values = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    v36 = 0u;
    v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v42 = 0u;
    v43 = 0u;
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    v47 = 0u;
    v48 = 0u;
    v49 = 0u;
    v50 = 0u;
    v51 = 0u;
    v52 = 0u;
    v53 = 0u;
    v54 = 0u;
    Count = CFSetGetCount((CFSetRef)qword_10007D9E0);
    v1 = Count;
    if (Count >= 65)
    {
      v2 = (const void **)CFAllocatorAllocate(0, 8 * Count, 0);
      CFSetGetValues((CFSetRef)qword_10007D9E0, v2);
      goto LABEL_5;
    }
    v2 = (const void **)values;
    CFSetGetValues((CFSetRef)qword_10007D9E0, (const void **)values);
    if (v1 >= 1)
    {
      while (1)
      {
LABEL_5:
        CFNumberGetValue((CFNumberRef)v2[v1 - 1], kCFNumberIntType, &valuePtr);
        v3 = sub_10000811C(valuePtr);
        if (!v3)
          sub_100065670();
        v4 = *(_DWORD **)(v3 + 56);
        v5 = v4[12];
        if (v5 != 2)
          goto LABEL_13;
        if (v4[46])
          break;
LABEL_21:
        if (v1-- <= 1)
        {
          if (v2 != (const void **)values)
            CFAllocatorDeallocate(0, v2);
          goto LABEL_25;
        }
      }
      v6 = sub_100009350();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        v11 = v4[10];
        v12 = v4[46];
        *(_DWORD *)buf = 67109376;
        v18 = v11;
        v19 = 1024;
        v20 = v12;
        _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "-->port : %5u : port = %u", buf, 0xEu);
      }
      for (i = v4[47]; !(_DWORD)i; v4[47] = i)
        i = random();
      _SC_sendMachMessage(v4[46], i);
      v5 = v4[12];
LABEL_13:
      if (v5 == 3 && (v4[48] & 0x80000000) == 0)
      {
        v8 = sub_100009350();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          v13 = v4[10];
          v14 = v4[48];
          v15 = v4[49];
          *(_DWORD *)buf = 67109632;
          v18 = v13;
          v19 = 1024;
          v20 = v14;
          v21 = 1024;
          v22 = v15;
          _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "-->fd   : %5u : fd = %d, msgid = %d", buf, 0x14u);
        }
        v9 = write(v4[48], v4 + 49, 4uLL);
        if (v9 != 4 && (v9 != -1 || *__error() != 35))
          v4[48] = -1;
      }
      goto LABEL_21;
    }
LABEL_25:
    CFRelease((CFTypeRef)qword_10007D9E0);
    qword_10007D9E0 = 0;
  }
}

CFTypeID sub_100009778(void *a1, const void *a2, uint64_t a3)
{
  CFTypeID result;
  CFTypeID v7;
  CFTypeID v8;

  result = CFStringGetTypeID();
  if (a1)
  {
    v7 = result;
    result = CFGetTypeID(a1);
    if (result == v7)
    {
      result = CFDataGetTypeID();
      if (a2)
      {
        v8 = result;
        result = CFGetTypeID(a2);
        if (result == v8)
          return sub_100004BD0(a3, a1, a2, 1);
      }
    }
  }
  return result;
}

void sub_10000984C(void *a1)
{
  const __CFDictionary *v2;
  const __CFAllocator *v3;
  const __CFDictionary *Copy;

  v2 = (const __CFDictionary *)qword_10007D9C0;
  v3 = CFGetAllocator((CFTypeRef)qword_10007D9C0);
  Copy = CFDictionaryCreateCopy(v3, v2);
  CFDictionaryApplyFunction(Copy, (CFDictionaryApplierFunction)sub_100008BF0, a1);
  CFRelease(Copy);
}

uint64_t sub_1000098D0(uint64_t a1, __CFString *key)
{
  const __CFDictionary *v4;
  uint64_t result;
  __int128 v6;
  pid_t v7;
  os_log_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  __int128 v17;
  pid_t v18;
  audit_token_t atoken;

  v4 = (const __CFDictionary *)sub_1000089C8(key);
  if (v4 && CFDictionaryContainsKey(v4, CFSTR("write-protect")))
  {
    if (!sub_10000EA88(a1, key))
    {
      if (sub_10000E7EC(a1, CFSTR("com.apple.SystemConfiguration.SCDynamicStore-write-no-fault")))
        return 1003;
      else
        return 10002;
    }
    return 0;
  }
  v6 = *(_OWORD *)(a1 + 84);
  *(_OWORD *)atoken.val = *(_OWORD *)(a1 + 68);
  *(_OWORD *)&atoken.val[4] = v6;
  v7 = audit_token_to_pid(&atoken);
  if (v7 == getpid())
    return 0;
  if (*(_DWORD *)(a1 + 64))
  {
    if (sub_10000E7EC(a1, CFSTR("com.apple.SystemConfiguration.SCDynamicStore-write-access")))
      return 0;
    if (sub_10000EA88(a1, key))
      return 0;
    else
      return 1003;
  }
  else
  {
    result = CFStringHasPrefix(key, kSCDynamicStoreDomainSetup);
    if ((_DWORD)result)
    {
      v8 = sub_100009350();
      v9 = _SC_syslog_os_log_mapping(5);
      result = __SC_log_enabled(5, v8, v9);
      if ((_DWORD)result)
      {
        v10 = (_OWORD *)(a1 + 68);
        v11 = _os_log_pack_size(18);
        v14 = (char *)&atoken - ((__chkstk_darwin(v11, v12, v13) + 15) & 0xFFFFFFFFFFFFFFF0);
        v15 = __error();
        v16 = _os_log_pack_fill(v14, v11, *v15, &_mh_execute_header, "*** Non-configd pid %d modifying \"%@\" ***");
        v17 = v10[1];
        *(_OWORD *)atoken.val = *v10;
        *(_OWORD *)&atoken.val[4] = v17;
        v18 = audit_token_to_pid(&atoken);
        *(_DWORD *)v16 = 67109378;
        *(_DWORD *)(v16 + 4) = v18;
        *(_WORD *)(v16 + 8) = 2112;
        *(_QWORD *)(v16 + 10) = key;
        __SC_log_send(5, v8, v9, v14);
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_100009AD0(int a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, uint64_t a6, unsigned int a7, int *a8)
{
  CFDictionaryRef v14;
  CFTypeID TypeID;
  CFTypeRef v16;
  CFTypeID v17;
  CFTypeRef v18;
  CFTypeID v19;
  uint64_t v20;
  uint64_t v21;
  CFIndex Count;
  uint64_t v23;
  const void **v24;
  int v25;
  uint64_t v27;
  int v28;
  BOOL v29;
  int v30;
  CFIndex v31;
  CFIndex v32;
  CFIndex v33;
  __CFString *ValueAtIndex;
  int v35;
  CFIndex v36;
  CFIndex v37;
  CFIndex v38;
  __CFString *v39;
  CFTypeRef cf;
  CFTypeRef v41;
  CFDictionaryRef theDict;
  void *keys[2];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;

  v41 = 0;
  theDict = 0;
  cf = 0;
  *a8 = 0;
  if (a2 && a3 && !_SCUnserialize(&theDict, 0, a2, a3))
  {
    *a8 = 1001;
    if (!a4)
      goto LABEL_7;
  }
  else if (!a4)
  {
    goto LABEL_7;
  }
  if (a5 && !_SCUnserialize(&cf, 0, a4, a5))
  {
    *a8 = 1001;
    if (!a6)
      goto LABEL_10;
    goto LABEL_8;
  }
LABEL_7:
  if (!a6)
    goto LABEL_10;
LABEL_8:
  if (a7 && !_SCUnserialize(&v41, 0, a6, a7))
  {
    v25 = 1001;
    goto LABEL_27;
  }
LABEL_10:
  if (*a8)
    goto LABEL_28;
  v14 = theDict;
  if (theDict && (TypeID = CFDictionaryGetTypeID(), CFGetTypeID(v14) != TypeID)
    || (v16 = cf) != 0 && (v17 = CFArrayGetTypeID(), CFGetTypeID(v16) != v17)
    || (v18 = v41) != 0 && (v19 = CFArrayGetTypeID(), CFGetTypeID(v18) != v19))
  {
    v25 = 1002;
LABEL_27:
    *a8 = v25;
    goto LABEL_28;
  }
  v20 = sub_10000811C(a1);
  if (!v20)
  {
    v25 = 2001;
    goto LABEL_27;
  }
  v21 = v20;
  if (theDict)
  {
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v50 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    *(_OWORD *)keys = 0u;
    Count = CFDictionaryGetCount(theDict);
    v23 = Count;
    if (Count < 33)
    {
      v24 = (const void **)keys;
      CFDictionaryGetKeysAndValues(theDict, (const void **)keys, 0);
      if (v23 < 1)
        goto LABEL_47;
    }
    else
    {
      v24 = (const void **)CFAllocatorAllocate(0, 8 * Count, 0);
      CFDictionaryGetKeysAndValues(theDict, v24, 0);
    }
    v27 = 0;
    do
    {
      v28 = sub_1000098D0(v21, (__CFString *)v24[v27]);
      if (v28)
        v29 = 1;
      else
        v29 = v23 - 1 == v27;
      ++v27;
    }
    while (!v29);
    v30 = v28;
    if (v24 != (const void **)keys)
      CFAllocatorDeallocate(0, v24);
    if (v30)
    {
      *a8 = v30;
      goto LABEL_28;
    }
  }
LABEL_47:
  if (cf && (v31 = CFArrayGetCount((CFArrayRef)cf), v31 >= 1))
  {
    v32 = v31;
    v33 = 0;
    while (1)
    {
      ValueAtIndex = (__CFString *)CFArrayGetValueAtIndex((CFArrayRef)cf, v33);
      v35 = sub_1000098D0(v21, ValueAtIndex);
      if (v35)
        break;
      if (v32 == ++v33)
        goto LABEL_52;
    }
  }
  else
  {
LABEL_52:
    if (!v41 || (v36 = CFArrayGetCount((CFArrayRef)v41), v36 < 1))
    {
LABEL_57:
      sub_10000A240(*(_DWORD **)(v21 + 56), theDict, (const __CFArray *)cf, (const __CFArray *)v41);
      *a8 = 0;
      goto LABEL_28;
    }
    v37 = v36;
    v38 = 0;
    while (1)
    {
      v39 = (__CFString *)CFArrayGetValueAtIndex((CFArrayRef)v41, v38);
      v35 = sub_1000098D0(v21, v39);
      if (v35)
        break;
      if (v37 == ++v38)
        goto LABEL_57;
    }
  }
  *a8 = v35;
LABEL_28:
  if (theDict)
    CFRelease(theDict);
  if (cf)
    CFRelease(cf);
  if (v41)
    CFRelease(v41);
  return 0;
}

void sub_100009E10(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = (const void *)a1[4];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[5];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[6];
  if (v4)
    CFRelease(v4);
}

void sub_100009EA8(uint64_t a1, xpc_object_t object)
{
  xpc_type_t type;
  const char *string;
  os_log_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  os_log_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  const void *v26[2];

  type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_connection)
  {
    sub_1000073E8((_xpc_connection_s *)object);
  }
  else
  {
    string = (const char *)type;
    if (type == (xpc_type_t)&_xpc_type_error)
    {
      string = xpc_dictionary_get_string(object, _xpc_error_key_description);
      if (object == &_xpc_error_connection_invalid)
      {
        v18 = sub_100007594();
        v19 = _SC_syslog_os_log_mapping(3);
        if (__SC_log_enabled(3, v18, v19))
        {
          v20 = _os_log_pack_size(12);
          v21 = (char *)v26 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
          v22 = __error();
          v23 = _os_log_pack_fill(v21, v20, *v22, &_mh_execute_header, "Network information server: %s", (const char *)v26[0]);
          *(_DWORD *)v23 = 136315138;
          *(_QWORD *)(v23 + 4) = string;
          __SC_log_send(3, v18, v19, v21);
        }
        xpc_release(*(xpc_object_t *)(a1 + 32));
      }
      else
      {
        v6 = sub_100007594();
        v7 = _SC_syslog_os_log_mapping(3);
        v13 = __SC_log_enabled(3, v6, v7);
        if (object == &_xpc_error_connection_interrupted)
        {
          if (v13)
          {
            v24 = _os_log_pack_size(12);
            v9 = (char *)v26 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
            v25 = __error();
            v11 = _os_log_pack_fill(v9, v24, *v25, &_mh_execute_header, "Network information server: %s", (const char *)v26[0]);
            v12 = 136315138;
            goto LABEL_5;
          }
        }
        else if (v13)
        {
          v14 = _os_log_pack_size(22);
          v15 = (char *)v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
          v16 = __error();
          v17 = _os_log_pack_fill(v15, v14, *v16, &_mh_execute_header, "Network information server: Connection error: %p : %s", v26[0], (const char *)v26[1]);
          *(_DWORD *)v17 = 134218242;
          *(_QWORD *)(v17 + 4) = object;
          *(_WORD *)(v17 + 12) = 2080;
          *(_QWORD *)(v17 + 14) = string;
          __SC_log_send(3, v6, v7, v15);
        }
      }
    }
    else
    {
      v6 = sub_100007594();
      v7 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v6, v7))
      {
        v8 = _os_log_pack_size(12);
        v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
        v10 = __error();
        v11 = _os_log_pack_fill(v9, v8, *v10, &_mh_execute_header, "Network information server: unknown event type : %p", v26[0]);
        v12 = 134217984;
LABEL_5:
        *(_DWORD *)v11 = v12;
        *(_QWORD *)(v11 + 4) = string;
        __SC_log_send(3, v6, v7, v9);
      }
    }
  }
}

void sub_10000A1EC(uint64_t a1)
{
  CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_10007DA70, (const void *)*(unsigned int *)(a1 + 32));
}

uint64_t sub_10000A240(_DWORD *a1, const __CFDictionary *a2, const __CFArray *a3, const __CFArray *a4)
{
  NSObject *v8;
  int v10;
  CFIndex Count;
  CFIndex v12;
  CFIndex v13;
  _DWORD v14[2];
  __int16 v15;
  CFIndex v16;
  __int16 v17;
  CFIndex v18;
  __int16 v19;
  CFIndex v20;
  CFRange v21;
  CFRange v22;

  v8 = sub_100009350();
  if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    if (!a2)
      goto LABEL_4;
    goto LABEL_3;
  }
  v10 = a1[10];
  if (!a2)
  {
    Count = 0;
    if (a3)
      goto LABEL_11;
LABEL_14:
    v12 = 0;
    if (a4)
      goto LABEL_12;
    goto LABEL_15;
  }
  Count = CFDictionaryGetCount(a2);
  if (!a3)
    goto LABEL_14;
LABEL_11:
  v12 = CFArrayGetCount(a3);
  if (a4)
  {
LABEL_12:
    v13 = CFArrayGetCount(a4);
    goto LABEL_16;
  }
LABEL_15:
  v13 = 0;
LABEL_16:
  v14[0] = 67109888;
  v14[1] = v10;
  v15 = 2048;
  v16 = Count;
  v17 = 2048;
  v18 = v12;
  v19 = 2048;
  v20 = v13;
  _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "set m   : %5u : %ld set, %ld remove, %ld notify", (uint8_t *)v14, 0x26u);
  if (a2)
LABEL_3:
    CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)sub_100009778, a1);
LABEL_4:
  if (a3)
  {
    v21.length = CFArrayGetCount(a3);
    v21.location = 0;
    CFArrayApplyFunction(a3, v21, (CFArrayApplierFunction)sub_100011590, a1);
  }
  if (a4)
  {
    v22.length = CFArrayGetCount(a4);
    v22.location = 0;
    CFArrayApplyFunction(a4, v22, (CFArrayApplierFunction)sub_100011640, a1);
  }
  sub_100010234();
  return 0;
}

uint64_t sub_10000A3D4(_DWORD *a1)
{
  mach_port_name_t v2;
  int v3;
  CFNumberRef v4;

  v2 = a1[46];
  if (v2)
  {
    mach_port_deallocate(mach_task_self_, v2);
    a1[46] = 0;
  }
  v3 = a1[48];
  if (v3 != -1)
  {
    close(v3);
    a1[48] = -1;
  }
  if (qword_10007D9E0)
  {
    v4 = CFNumberCreate(0, kCFNumberIntType, a1 + 10);
    CFSetRemoveValue((CFMutableSetRef)qword_10007D9E0, v4);
    CFRelease(v4);
    if (!CFSetGetCount((CFSetRef)qword_10007D9E0))
    {
      CFRelease((CFTypeRef)qword_10007D9E0);
      qword_10007D9E0 = 0;
    }
  }
  a1[12] = 0;
  return 0;
}

uint64_t sub_10000A4B8(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  NDR_record_t v4;
  int v5;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 60)
  {
    v5 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v5;
    v4 = NDR_record;
    goto LABEL_10;
  }
  if (*(_BYTE *)(result + 39) != 1 || (v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 52)))
  {
    v5 = -300;
    goto LABEL_9;
  }
  result = sub_100004F5C(*(_DWORD *)(result + 12), *(_QWORD *)(result + 28), v3, *(_DWORD *)(result + 56), (int *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  v4 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_10:
  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

uint64_t sub_10000A5A0(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  NDR_record_t v6;
  int v7;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 3 || *(_DWORD *)(result + 4) != 96)
  {
    v7 = -304;
LABEL_13:
    *(_DWORD *)(a2 + 32) = v7;
    v6 = NDR_record;
    goto LABEL_14;
  }
  if (*(_BYTE *)(result + 39) != 1
    || *(_BYTE *)(result + 55) != 1
    || *(_BYTE *)(result + 71) != 1
    || (v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 84))
    || (v4 = *(_DWORD *)(result + 56), v4 != *(_DWORD *)(result + 88))
    || (v5 = *(_DWORD *)(result + 72), v5 != *(_DWORD *)(result + 92)))
  {
    v7 = -300;
    goto LABEL_13;
  }
  result = sub_100009AD0(*(_DWORD *)(result + 12), *(_QWORD *)(result + 28), v3, *(_QWORD *)(result + 44), v4, *(_QWORD *)(result + 60), v5, (int *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  v6 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_14:
  *(NDR_record_t *)(a2 + 24) = v6;
  return result;
}

void sub_10000A6C4(CFTypeRef cf)
{
  CFRelease(cf);
}

BOOL sub_10000A708()
{
  return &_PAEntitlementDictionaryBelongsToSystemProcess != 0;
}

uint64_t sub_10000A75C(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  if (!&_PAEntitlementDictionaryBelongsToSystemProcess)
    return 0;
  v2 = objc_autoreleasePoolPush();
  v3 = PAEntitlementDictionaryBelongsToSystemProcess(a1);
  objc_autoreleasePoolPop(v2);
  return v3;
}

void start(int a1, char *const *a2)
{
  int v4;
  char *v5;
  CFStringRef v6;
  __CFSet *v7;
  uint64_t v8;
  pid_t v9;
  const char *v10;
  FILE *v11;
  int *v12;
  char *v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  NSObject *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int *v24;
  char *v25;
  int *v26;
  NSObject *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int *v31;
  char *v32;
  int *v33;
  NSObject *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  int *v38;
  char *v39;
  int *v40;
  NSObject *v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  int *v45;
  char *v46;
  int *v47;
  NSObject *v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  int *v52;
  char *v53;
  int *v54;
  mach_port_t v55;
  mach_port_t Port;
  __CFRunLoopSource *RunLoopSource;
  __CFRunLoop *Current;
  const __SCPreferences *v59;
  const __SCPreferences *v60;
  const __CFBoolean *Value;
  CFTypeID TypeID;
  uint64_t v63;
  uint64_t v64;
  pid_t v65;
  NSObject *v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  int *v70;
  const char *v71;
  int v72;
  int v73;
  char *v74;
  sigaction v75;
  integer_t port_info;
  uint64_t v77;
  CFMachPortContext context;
  int v79;
  char *v80;
  int v81[4];
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;

  *(_OWORD *)&context.version = xmmword_100075898;
  *(_OWORD *)&context.retain = unk_1000758A8;
  context.copyDescription = (CFStringRef (__cdecl *)(const void *))sub_10000B480;
  v77 = 0;
  v71 = *a2;
  qword_10007D9A8 = (uint64_t)CFSetCreateMutable(0, 0, &kCFTypeSetCallBacks);
  v74 = 0;
  v73 = 0;
  qword_10007D9B0 = (uint64_t)CFSetCreateMutable(0, 0, &kCFTypeSetCallBacks);
  v72 = 1;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v4 = getopt_long(a1, a2, "bB:dt:vV:", (const option *)&off_1000758C0, 0);
        if (v4 <= 97)
          break;
        if (v4 <= 117)
        {
          switch(v4)
          {
            case 'b':
              v72 = 0;
              break;
            case 'd':
              v73 = 1;
              break;
            case 't':
              v74 = optarg;
              break;
            default:
              goto LABEL_27;
          }
        }
        else
        {
          if (v4 != 118)
            goto LABEL_27;
          byte_10007D9A0 = 1;
        }
      }
      if (v4 != 66)
        break;
      v6 = CFStringCreateWithCString(0, optarg, 0);
      v7 = (__CFSet *)qword_10007D9A8;
LABEL_11:
      CFSetSetValue(v7, v6);
      CFRelease(v6);
    }
    if (v4 != 86)
    {
      if (v4 != -1)
LABEL_27:
        sub_10000B4D4();
      if (getuid())
      {
        fprintf(__stderrp, "%s: permission denied.\n", v71);
        exit(77);
      }
      port_info = 0;
      v75.__sigaction_u.__sa_handler = 0;
      *(_QWORD *)&v75.sa_mask = 0;
      vproc_swap_integer(0, 5, 0, &v77);
      v8 = v77;
      if (v73 || v77)
      {
        v10 = v74;
        if (v74 || !v73)
          goto LABEL_37;
        _sc_log = 0;
      }
      else
      {
        signal(15, (void (__cdecl *)(int))sub_10000B6C4);
        v9 = fork();
        v10 = v74;
        if (v9 == -1)
          goto LABEL_26;
        if (v9)
        {
          v81[0] = 0;
          wait4(v9, v81, 0, 0);
          if ((v81[0] & 0x7F) != 0)
            fprintf(__stderrp, "*** configd (daemon) failed to start, received signal=%d\n");
          else
            fprintf(__stderrp, "*** configd (daemon) failed to start, exit status=%d\n");
          fflush(__stderrp);
          exit(70);
        }
        signal(15, 0);
        if (setsid() == -1)
        {
LABEL_26:
          v11 = __stderrp;
          v12 = __error();
          v13 = strerror(*v12);
          fprintf(v11, "configd: fork() failed: %s\n", v13);
          exit(1);
        }
        chdir("/");
        v8 = v77;
LABEL_37:
        if (!v10 && !v8)
        {
          v14 = getdtablesize();
          if (v14 >= 1)
          {
            v15 = v14 + 1;
            do
            {
              close(v15 - 2);
              --v15;
            }
            while (v15 > 1);
          }
          v16 = open("/dev/null", 2, 0);
          if (v16 != -1)
          {
            v17 = v16;
            dup2(v16, 0);
            v18 = open("/var/log/configd.log", 9, 0);
            if (v18 == -1)
            {
              v19 = v17;
            }
            else
            {
              v19 = v18;
              if (v17 >= 1)
                close(v17);
            }
            dup2(v19, 1);
            dup2(v19, 2);
            if (v19 >= 3)
              close(v19);
          }
        }
      }
      if (setiopolicy_np(9, 0, 1) == -1)
      {
        v20 = qword_10007DA20;
        if (!qword_10007DA20)
        {
          v20 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
          qword_10007DA20 = (uint64_t)v20;
        }
        v21 = _SC_syslog_os_log_mapping(3);
        if (__SC_log_enabled(3, v20, v21))
        {
          v95 = 0u;
          v96 = 0u;
          v93 = 0u;
          v94 = 0u;
          v91 = 0u;
          v92 = 0u;
          v89 = 0u;
          v90 = 0u;
          v87 = 0u;
          v88 = 0u;
          v85 = 0u;
          v86 = 0u;
          v83 = 0u;
          v84 = 0u;
          *(_OWORD *)v81 = 0u;
          v82 = 0u;
          v22 = (_sc_log > 0) | 2;
          v23 = os_log_type_enabled(v20, (os_log_type_t)v21) ? v22 : 2;
          v24 = __error();
          v25 = strerror(*v24);
          v79 = 136315138;
          v80 = v25;
          v26 = (int *)_os_log_send_and_compose_impl(v23, 0, v81, 256, &_mh_execute_header, v20, v21, "setiopolicy_np() failed: %s", (const char *)&v79);
          __SC_log_send2(3, v20, v21, 0, v26);
          if (v26 != v81)
            free(v26);
        }
      }
      v75.__sigaction_u.__sa_handler = (void (__cdecl *)(int))sub_10000B5BC;
      *(_QWORD *)&v75.sa_mask = 0x200000000;
      if (sigaction(1, &v75, 0) == -1)
      {
        v27 = qword_10007DA20;
        if (!qword_10007DA20)
        {
          v27 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
          qword_10007DA20 = (uint64_t)v27;
        }
        v28 = _SC_syslog_os_log_mapping(3);
        if (__SC_log_enabled(3, v27, v28))
        {
          v95 = 0u;
          v96 = 0u;
          v93 = 0u;
          v94 = 0u;
          v91 = 0u;
          v92 = 0u;
          v89 = 0u;
          v90 = 0u;
          v87 = 0u;
          v88 = 0u;
          v85 = 0u;
          v86 = 0u;
          v83 = 0u;
          v84 = 0u;
          *(_OWORD *)v81 = 0u;
          v82 = 0u;
          v29 = (_sc_log > 0) | 2;
          v30 = os_log_type_enabled(v27, (os_log_type_t)v28) ? v29 : 2;
          v31 = __error();
          v32 = strerror(*v31);
          v79 = 136315138;
          v80 = v32;
          v33 = (int *)_os_log_send_and_compose_impl(v30, 0, v81, 256, &_mh_execute_header, v27, v28, "sigaction(SIGHUP, ...) failed: %s", (const char *)&v79);
          __SC_log_send2(3, v27, v28, 0, v33);
          if (v33 != v81)
            free(v33);
        }
      }
      if (sigaction(13, &v75, 0) == -1)
      {
        v34 = qword_10007DA20;
        if (!qword_10007DA20)
        {
          v34 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
          qword_10007DA20 = (uint64_t)v34;
        }
        v35 = _SC_syslog_os_log_mapping(3);
        if (__SC_log_enabled(3, v34, v35))
        {
          v95 = 0u;
          v96 = 0u;
          v93 = 0u;
          v94 = 0u;
          v91 = 0u;
          v92 = 0u;
          v89 = 0u;
          v90 = 0u;
          v87 = 0u;
          v88 = 0u;
          v85 = 0u;
          v86 = 0u;
          v83 = 0u;
          v84 = 0u;
          *(_OWORD *)v81 = 0u;
          v82 = 0u;
          v36 = (_sc_log > 0) | 2;
          v37 = os_log_type_enabled(v34, (os_log_type_t)v35) ? v36 : 2;
          v38 = __error();
          v39 = strerror(*v38);
          v79 = 136315138;
          v80 = v39;
          v40 = (int *)_os_log_send_and_compose_impl(v37, 0, v81, 256, &_mh_execute_header, v34, v35, "sigaction(SIGPIPE, ...) failed: %s", (const char *)&v79);
          __SC_log_send2(3, v34, v35, 0, v40);
          if (v40 != v81)
            free(v40);
        }
      }
      if (sigaction(15, &v75, 0) == -1)
      {
        v41 = qword_10007DA20;
        if (!qword_10007DA20)
        {
          v41 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
          qword_10007DA20 = (uint64_t)v41;
        }
        v42 = _SC_syslog_os_log_mapping(3);
        if (__SC_log_enabled(3, v41, v42))
        {
          v95 = 0u;
          v96 = 0u;
          v93 = 0u;
          v94 = 0u;
          v91 = 0u;
          v92 = 0u;
          v89 = 0u;
          v90 = 0u;
          v87 = 0u;
          v88 = 0u;
          v85 = 0u;
          v86 = 0u;
          v83 = 0u;
          v84 = 0u;
          *(_OWORD *)v81 = 0u;
          v82 = 0u;
          v43 = (_sc_log > 0) | 2;
          v44 = os_log_type_enabled(v41, (os_log_type_t)v42) ? v43 : 2;
          v45 = __error();
          v46 = strerror(*v45);
          v79 = 136315138;
          v80 = v46;
          v47 = (int *)_os_log_send_and_compose_impl(v44, 0, v81, 256, &_mh_execute_header, v41, v42, "sigaction(SIGTERM, ...) failed: %s", (const char *)&v79);
          __SC_log_send2(3, v41, v42, 0, v47);
          if (v47 != v81)
            free(v47);
        }
      }
      if (sigaction(2, &v75, 0) == -1)
      {
        v48 = qword_10007DA20;
        if (!qword_10007DA20)
        {
          v48 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
          qword_10007DA20 = (uint64_t)v48;
        }
        v49 = _SC_syslog_os_log_mapping(3);
        if (__SC_log_enabled(3, v48, v49))
        {
          v95 = 0u;
          v96 = 0u;
          v93 = 0u;
          v94 = 0u;
          v91 = 0u;
          v92 = 0u;
          v89 = 0u;
          v90 = 0u;
          v87 = 0u;
          v88 = 0u;
          v85 = 0u;
          v86 = 0u;
          v83 = 0u;
          v84 = 0u;
          *(_OWORD *)v81 = 0u;
          v82 = 0u;
          v50 = (_sc_log > 0) | 2;
          v51 = os_log_type_enabled(v48, (os_log_type_t)v49) ? v50 : 2;
          v52 = __error();
          v53 = strerror(*v52);
          v79 = 136315138;
          v80 = v53;
          v54 = (int *)_os_log_send_and_compose_impl(v51, 0, v81, 256, &_mh_execute_header, v48, v49, "sigaction(SIGINT, ...) failed: %s", (const char *)&v79);
          __SC_log_send2(3, v48, v49, 0, v54);
          if (v54 != v81)
            free(v54);
        }
      }
      qword_10007DA28 = (uint64_t)CFMachPortCreate(0, (CFMachPortCallBack)sub_10000B668, &context, 0);
      port_info = 1;
      v55 = mach_task_self_;
      Port = CFMachPortGetPort((CFMachPortRef)qword_10007DA28);
      if (mach_port_set_attributes(v55, Port, 1, &port_info, 1u))
        perror("mach_port_set_attributes");
      RunLoopSource = CFMachPortCreateRunLoopSource(0, (CFMachPortRef)qword_10007DA28, 0);
      Current = CFRunLoopGetCurrent();
      CFRunLoopAddSource(Current, RunLoopSource, kCFRunLoopDefaultMode);
      CFRelease(RunLoopSource);
      if (v10)
        goto LABEL_111;
      _SCDynamicStoreSetSessionWatchLimit(0);
      if (qword_10007DA38 != -1)
        dispatch_once(&qword_10007DA38, &stru_100075920);
      if (byte_10007DA30)
      {
        v59 = SCPreferencesCreate(0, CFSTR("configd"), CFSTR("com.apple.configd.SCDynamicStoreServerDebug.plist"));
        if (v59)
        {
          v60 = v59;
          Value = (const __CFBoolean *)SCPreferencesGetValue(v59, CFSTR("ShouldLogPath"));
          TypeID = CFBooleanGetTypeID();
          if (Value && CFGetTypeID(Value) == TypeID)
            byte_10007D9E8 = CFBooleanGetValue(Value);
          CFRelease(v60);
        }
      }
      sub_10000BF20();
      if (&_wd_endpoint_register)
      {
        wd_endpoint_register("com.apple.SystemConfiguration.configd.watchdog");
        v63 = sub_1000063CC();
        v64 = wd_endpoint_add_queue(v63);
        wd_endpoint_activate(v64);
      }
      if (!v73 && !v77)
      {
        v65 = getppid();
        kill(v65, 15);
      }
      if (v72)
LABEL_111:
        sub_10000CC04(v10);
      v66 = qword_10007DA20;
      if (!qword_10007DA20)
      {
        v66 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
        qword_10007DA20 = (uint64_t)v66;
      }
      v67 = _SC_syslog_os_log_mapping(7);
      if (__SC_log_enabled(7, v66, v67))
      {
        v95 = 0u;
        v96 = 0u;
        v93 = 0u;
        v94 = 0u;
        v91 = 0u;
        v92 = 0u;
        v89 = 0u;
        v90 = 0u;
        v87 = 0u;
        v88 = 0u;
        v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        v84 = 0u;
        *(_OWORD *)v81 = 0u;
        v82 = 0u;
        v68 = (_sc_log > 0) | 2;
        if (os_log_type_enabled(v66, (os_log_type_t)v67))
          v69 = v68;
        else
          v69 = 2;
        LOWORD(v79) = 0;
        v70 = (int *)_os_log_send_and_compose_impl(v69, 0, v81, 256, &_mh_execute_header, v66, v67, "starting main/plugin CFRunLoop", &v79, 2);
        __SC_log_send2(7, v66, v67, 0, v70);
        if (v70 != v81)
          free(v70);
      }
      CFRunLoopRun();
      exit(0);
    }
    v5 = optarg;
    if (strcmp(optarg, "com.apple.SystemConfiguration"))
    {
      v6 = CFStringCreateWithCString(0, v5, 0);
      v7 = (__CFSet *)qword_10007D9B0;
      goto LABEL_11;
    }
    _sc_verbose = 1;
  }
}

CFStringRef sub_10000B480()
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<SIGTERM MP>"));
}

void sub_10000B4D4()
{
  SCPrint(1, __stderrp, CFSTR("%s: [-d] [-v] [-V bundleID] [-b] [-B bundleID] [-t bundle-path]\n"));
  SCPrint(1, __stderrp, CFSTR("options:\n"));
  SCPrint(1, __stderrp, CFSTR("\t-d\tdisable daemon/run in foreground\n"));
  SCPrint(1, __stderrp, CFSTR("\t-v\tenable verbose logging\n"));
  SCPrint(1, __stderrp, CFSTR("\t-V\tenable verbose logging for the specified plug-in\n"));
  SCPrint(1, __stderrp, CFSTR("\t-b\tdisable loading of ALL plug-ins\n"));
  SCPrint(1, __stderrp, CFSTR("\t-B\tdisable loading of the specified plug-in\n"));
  SCPrint(1, __stderrp, CFSTR("\t-t\tload/test the specified plug-in\n"));
  SCPrint(1, __stderrp, CFSTR("\t\t  (Note: only the plug-in will be started)\n"));
  exit(64);
}

uint64_t sub_10000B5BC(uint64_t result)
{
  uint64_t Port;

  if ((_DWORD)result == 15 || (_DWORD)result == 2)
  {
    if (!qword_10007DA28)
      _exit(0);
    if (_sc_log >= 1)
      _sc_log = 2;
    Port = CFMachPortGetPort((CFMachPortRef)qword_10007DA28);
    return _SC_sendMachMessage(Port, 0);
  }
  return result;
}

CFIndex sub_10000B668()
{
  CFIndex result;
  int v1;

  v1 = 0;
  result = sub_10000C60C(&v1);
  if (!(_DWORD)result)
    exit(v1);
  return result;
}

void sub_10000B6C4()
{
  _exit(0);
}

void sub_10000B6E8(id a1)
{
  byte_10007DA30 = os_variant_has_internal_content("com.apple.SystemConfiguration");
}

void sub_10000B740()
{
  CFArrayRef v0;
  CFArrayRef v1;
  CFDictionaryRef v2;
  __CFString *ComputerName;
  __CFString *HostNames;
  CFDictionaryRef v5;
  CFDictionaryRef v6;
  CFDictionaryRef v7;
  CFDictionaryRef v8;
  CFDictionaryRef v9;
  const __CFString *v10;
  void *values[5];
  void *keys[5];

  qword_10007D9B8 = (uint64_t)CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  qword_10007D9C0 = (uint64_t)CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  qword_10007D9C8 = (uint64_t)CFSetCreateMutable(0, 0, &kCFTypeSetCallBacks);
  qword_10007D9D0 = (uint64_t)CFSetCreateMutable(0, 0, &kCFTypeSetCallBacks);
  qword_10007D9D8 = (uint64_t)CFSetCreateMutable(0, 0, &kCFTypeSetCallBacks);
  keys[4] = 0;
  values[4] = 0;
  v10 = CFSTR("com.apple.security.on-demand-install-capable");
  v0 = CFArrayCreate(0, (const void **)&v10, 1, &kCFTypeArrayCallBacks);
  keys[0] = CFSTR("read-deny");
  keys[1] = CFSTR("read-deny-background");
  values[0] = v0;
  values[1] = kCFBooleanTrue;
  v10 = CFSTR("com.apple.developer.device-information.user-assigned-device-name");
  v1 = CFArrayCreate(0, (const void **)&v10, 1, &kCFTypeArrayCallBacks);
  keys[2] = CFSTR("read-allow");
  keys[3] = CFSTR("read-allow-system");
  values[2] = v1;
  values[3] = kCFBooleanTrue;
  v2 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 4, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (v1)
    CFRelease(v1);
  CFRelease(v0);
  ComputerName = (__CFString *)SCDynamicStoreKeyCreateComputerName(0);
  sub_10000BCF8(ComputerName, v2);
  CFRelease(ComputerName);
  HostNames = (__CFString *)SCDynamicStoreKeyCreateHostNames(0);
  sub_10000BCF8(HostNames, v2);
  CFRelease(HostNames);
  CFRelease(v2);
  if (qword_10007DA48 != -1)
    dispatch_once(&qword_10007DA48, &stru_100075960);
  if (byte_10007DA40)
  {
    v5 = sub_10000BE14(CFSTR("com.apple.SCDynamicStore.test.read-deny1.entitlement"), CFSTR("read-deny"));
    sub_10000BCF8(CFSTR("com.apple.SCDynamicStore.test.read-deny1.key"), v5);
    CFRelease(v5);
    v6 = sub_10000BE14(CFSTR("com.apple.SCDynamicStore.test.read-deny2.entitlement"), CFSTR("read-deny"));
    sub_10000BCF8(CFSTR("com.apple.SCDynamicStore.test.read-deny2.key"), v6);
    CFRelease(v6);
    v7 = sub_10000BE14(CFSTR("com.apple.SCDynamicStore.test.read-allow1.entitlement"), CFSTR("read-allow"));
    sub_10000BCF8(CFSTR("com.apple.SCDynamicStore.test.read-allow1.key"), v7);
    CFRelease(v7);
    v8 = sub_10000BE14(CFSTR("com.apple.SCDynamicStore.test.read-allow2.entitlement"), CFSTR("read-allow"));
    sub_10000BCF8(CFSTR("com.apple.SCDynamicStore.test.read-allow2.key"), v8);
    CFRelease(v8);
    keys[0] = CFSTR("write-protect");
    v9 = CFDictionaryCreate(0, (const void **)keys, (const void **)&kCFBooleanTrue, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    sub_10000BCF8(CFSTR("com.apple.SCDynamicStore.test.write-protect1.key"), v9);
    sub_10000BCF8(CFSTR("com.apple.SCDynamicStore.test.write-protect2.key"), v9);
    CFRelease(v9);
  }
}

void sub_10000BA90(const void *a1, const void *a2)
{
  const __CFDictionary *Value;
  const __CFDictionary *v5;
  const __CFDictionary *MutableCopy;
  const __CFArray *v7;
  const __CFArray *v8;
  const __CFArray *v9;
  CFMutableArrayRef v10;
  CFIndex FirstIndexOfValue;
  CFIndex v12;
  const __CFNumber *ValueAtIndex;
  int v14;
  CFNumberRef v15;
  int valuePtr;
  CFRange v17;

  Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_10007D9B8, a2);
  if (Value)
  {
    v5 = Value;
    if (CFDictionaryContainsKey(Value, CFSTR("watchers")))
    {
      MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v5);
      v7 = (const __CFArray *)CFDictionaryGetValue(MutableCopy, CFSTR("watchers"));
      v8 = CFArrayCreateMutableCopy(0, 0, v7);
      v9 = (const __CFArray *)CFDictionaryGetValue(MutableCopy, CFSTR("watcherRefs"));
      v10 = CFArrayCreateMutableCopy(0, 0, v9);
      v17.length = CFArrayGetCount(v8);
      v17.location = 0;
      FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v8, v17, a1);
      if (FirstIndexOfValue == -1)
      {
        CFRelease(MutableCopy);
        CFRelease(v8);
        CFRelease(v10);
      }
      else
      {
        v12 = FirstIndexOfValue;
        valuePtr = 0;
        ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v10, FirstIndexOfValue);
        CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &valuePtr);
        v14 = valuePtr--;
        if (v14 < 2)
        {
          CFArrayRemoveValueAtIndex(v8, v12);
          CFArrayRemoveValueAtIndex(v10, v12);
        }
        else
        {
          v15 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
          CFArraySetValueAtIndex(v10, v12, v15);
          CFRelease(v15);
        }
        if (CFArrayGetCount(v8) < 1)
        {
          CFDictionaryRemoveValue(MutableCopy, CFSTR("watchers"));
          CFDictionaryRemoveValue(MutableCopy, CFSTR("watcherRefs"));
        }
        else
        {
          CFDictionarySetValue(MutableCopy, CFSTR("watchers"), v8);
          CFDictionarySetValue(MutableCopy, CFSTR("watcherRefs"), v10);
        }
        CFRelease(v8);
        CFRelease(v10);
        if (CFDictionaryGetCount(MutableCopy) < 1)
          CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_10007D9B8, a2);
        else
          CFDictionarySetValue((CFMutableDictionaryRef)qword_10007D9B8, a2, MutableCopy);
        CFRelease(MutableCopy);
      }
    }
  }
}

void sub_10000BCF8(void *key, const void *a2)
{
  const __CFDictionary *Value;
  __CFDictionary *MutableCopy;
  __CFDictionary *v6;

  Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_10007D9B8, key);
  if (Value)
    MutableCopy = CFDictionaryCreateMutableCopy(0, 0, Value);
  else
    MutableCopy = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  v6 = MutableCopy;
  CFDictionarySetValue(MutableCopy, CFSTR("access-controls"), a2);
  CFDictionarySetValue((CFMutableDictionaryRef)qword_10007D9B8, key, v6);
  CFRelease(v6);
}

void sub_10000BDBC(id a1)
{
  byte_10007DA40 = os_variant_has_internal_content("com.apple.SystemConfiguration");
}

CFDictionaryRef sub_10000BE14(void *a1, void *a2)
{
  CFDictionaryRef v2;
  CFTypeRef cf;
  void *keys;
  void *values;

  keys = a2;
  values = a1;
  cf = CFArrayCreate(0, (const void **)&values, 1, &kCFTypeArrayCallBacks);
  v2 = CFDictionaryCreate(0, (const void **)&keys, &cf, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFRelease(cf);
  return v2;
}

void sub_10000BEB4(id a1)
{
  qword_10007DA58 = (uint64_t)dispatch_workloop_create_inactive("configd/SCDynamicStore");
  dispatch_set_qos_class_fallback();
  dispatch_activate((dispatch_object_t)qword_10007DA58);
}

uint64_t sub_10000BF20()
{
  char *v0;
  const char *v1;
  kern_return_t v2;
  kern_return_t v4;
  os_log_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_log_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int *v23;
  uint64_t v24;
  const char *v25;
  const char *v26[2];

  HIDWORD(v26[0]) = 0;
  v0 = getenv("SCD_SERVER");
  if (v0)
    v1 = v0;
  else
    v1 = "com.apple.SystemConfiguration.configd";
  v2 = bootstrap_check_in(bootstrap_port, v1, (mach_port_t *)v26 + 1);
  if (v2)
  {
    if (v2 == 1103)
    {
      v5 = sub_100009350();
      v6 = _SC_syslog_os_log_mapping(3);
      if (!__SC_log_enabled(3, v5, v6))
        goto LABEL_15;
      v13 = _os_log_pack_size(12);
      v10 = (char *)v26 - ((__chkstk_darwin(v13, v14, v15) + 15) & 0xFFFFFFFFFFFFFFF0);
      v16 = *__error();
      v12 = _os_log_pack_fill(v10, v13, v16, &_mh_execute_header, "'%s' server already active");
    }
    else
    {
      v4 = v2;
      if (v2 != 1100)
      {
        v17 = sub_100009350();
        v18 = _SC_syslog_os_log_mapping(3);
        if (__SC_log_enabled(3, v17, v18))
        {
          v19 = _os_log_pack_size(22);
          v22 = (char *)v26 - ((__chkstk_darwin(v19, v20, v21) + 15) & 0xFFFFFFFFFFFFFFF0);
          v23 = __error();
          v24 = _os_log_pack_fill(v22, v19, *v23, &_mh_execute_header, "server_init bootstrap_check_in(..., '%s', ...) failed: %s", v26[0], v26[1]);
          v25 = bootstrap_strerror(v4);
          *(_DWORD *)v24 = 136315394;
          *(_QWORD *)(v24 + 4) = v1;
          *(_WORD *)(v24 + 12) = 2080;
          *(_QWORD *)(v24 + 14) = v25;
          __SC_log_send(3, v17, v18, v22);
        }
LABEL_15:
        exit(69);
      }
      v5 = sub_100009350();
      v6 = _SC_syslog_os_log_mapping(3);
      if (!__SC_log_enabled(3, v5, v6))
        goto LABEL_15;
      v7 = _os_log_pack_size(12);
      v10 = (char *)v26 - ((__chkstk_darwin(v7, v8, v9) + 15) & 0xFFFFFFFFFFFFFFF0);
      v11 = *__error();
      v12 = _os_log_pack_fill(v10, v7, v11, &_mh_execute_header, "'%s' server already starting");
    }
    *(_DWORD *)v12 = 136315138;
    *(_QWORD *)(v12 + 4) = v1;
    __SC_log_send(3, v5, v6, v10);
    goto LABEL_15;
  }
  sub_10000B740();
  return sub_10000E2CC(HIDWORD(v26[0]));
}

uint64_t sub_10000C1CC(uint64_t result)
{
  _QWORD *v1;
  os_log_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  CFStringRef Identifier;
  uint64_t v11;

  if (*(_BYTE *)(result + 8))
  {
    v1 = (_QWORD *)result;
    if (*(_QWORD *)(result + 16))
    {
      v2 = sub_100009350();
      v3 = _SC_syslog_os_log_mapping(7);
      if (__SC_log_enabled(7, v2, v3))
      {
        v4 = _os_log_pack_size(12);
        v7 = (char *)&v11 - ((__chkstk_darwin(v4, v5, v6) + 15) & 0xFFFFFFFFFFFFFFF0);
        v8 = __error();
        v9 = _os_log_pack_fill(v7, v4, *v8, &_mh_execute_header, "calling load() for %@");
        Identifier = CFBundleGetIdentifier((CFBundleRef)*v1);
        *(_DWORD *)v9 = 138412290;
        *(_QWORD *)(v9 + 4) = Identifier;
        __SC_log_send(7, v2, v3, v7);
      }
      return ((uint64_t (*)(_QWORD, _QWORD))v1[2])(*v1, *((unsigned __int8 *)v1 + 12));
    }
  }
  return result;
}

void sub_10000C300(uint64_t a1)
{
  const __CFURL *v2;
  const __CFURL *v3;
  int v4;
  char *v5;
  const char *v6;
  size_t v7;
  os_log_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  CFStringRef Identifier;
  char v18[1024];
  char v19[256];

  if (*(_BYTE *)(a1 + 8))
  {
    if (*(_QWORD *)(a1 + 24))
    {
      v2 = CFBundleCopyBundleURL(*(CFBundleRef *)a1);
      if (v2)
      {
        v3 = v2;
        v4 = CFURLGetFileSystemRepresentation(v2, 1u, (UInt8 *)v18, 1024);
        CFRelease(v3);
        if (v4)
        {
          v5 = strrchr(v18, 47);
          v6 = v5 ? v5 + 1 : v18;
          v7 = strlen(v6);
          if (v7 >= 9
            && !strcmp(&v6[v7 - 7], ".bundle")
            && (unint64_t)__strlcpy_chk(v19, v6, 256, 256) <= 0x100)
          {
            v19[strlen(v19) - 7] = 0;
            v8 = sub_100009350();
            v9 = _SC_syslog_os_log_mapping(7);
            if (__SC_log_enabled(7, v8, v9))
            {
              v10 = _os_log_pack_size(12);
              v13 = &v18[-((__chkstk_darwin(v10, v11, v12) + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
              v14 = __error();
              v15 = _os_log_pack_fill(v13, v10, *v14, &_mh_execute_header, "calling start() for %@");
              Identifier = CFBundleGetIdentifier(*(CFBundleRef *)a1);
              *(_DWORD *)v15 = 138412290;
              *(_QWORD *)(v15 + 4) = Identifier;
              __SC_log_send(7, v8, v9, v13);
            }
            (*(void (**)(char *, char *))(a1 + 24))(v19, v18);
          }
        }
      }
    }
  }
}

uint64_t sub_10000C4E0(uint64_t result)
{
  uint64_t v1;
  os_log_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  CFStringRef Identifier;
  uint64_t v11;

  if (*(_BYTE *)(result + 8))
  {
    v1 = result;
    if (*(_QWORD *)(result + 32))
    {
      v2 = sub_100009350();
      v3 = _SC_syslog_os_log_mapping(7);
      if (__SC_log_enabled(7, v2, v3))
      {
        v4 = _os_log_pack_size(12);
        v7 = (char *)&v11 - ((__chkstk_darwin(v4, v5, v6) + 15) & 0xFFFFFFFFFFFFFFF0);
        v8 = __error();
        v9 = _os_log_pack_fill(v7, v4, *v8, &_mh_execute_header, "calling prime() for %@");
        Identifier = CFBundleGetIdentifier(*(CFBundleRef *)v1);
        *(_DWORD *)v9 = 138412290;
        *(_QWORD *)(v9 + 4) = Identifier;
        __SC_log_send(7, v2, v3, v7);
      }
      return (*(uint64_t (**)(void))(v1 + 32))();
    }
  }
  return result;
}

CFIndex sub_10000C60C(_DWORD *a1)
{
  CFIndex result;
  os_log_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  CFAbsoluteTime Current;
  double v12;

  result = CFArrayGetCount((CFArrayRef)qword_10007DA60);
  if (result)
  {
    if (!qword_10007DA68)
    {
      v3 = sub_100009350();
      v4 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v3, v4))
      {
        v5 = _os_log_pack_size(12);
        v8 = (char *)&v12 - ((__chkstk_darwin(v5, v6, v7) + 15) & 0xFFFFFFFFFFFFFFF0);
        v9 = __error();
        v10 = _os_log_pack_fill(v8, v5, *v9, &_mh_execute_header, "starting server shutdown (%f)", v12);
        Current = CFAbsoluteTimeGetCurrent();
        *(_DWORD *)v10 = 134217984;
        *(CFAbsoluteTime *)(v10 + 4) = Current;
        __SC_log_send(6, v3, v4, v8);
      }
      qword_10007DA68 = (uint64_t)CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      sub_10000C768();
    }
    return 1;
  }
  else
  {
    *a1 = 0;
  }
  return result;
}

void sub_10000C768()
{
  os_log_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int *v6;
  const __CFArray *v7;
  CFAbsoluteTime v8;
  __CFRunLoopTimer *v9;
  __CFRunLoop *v10;
  os_log_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int *v17;
  uint64_t v18;
  CFAbsoluteTime Current;
  double v20;
  CFRange v21;

  v0 = sub_100009350();
  v1 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v0, v1))
  {
    v2 = _os_log_pack_size(2);
    v5 = (char *)&v20 - ((__chkstk_darwin(v2, v3, v4) + 15) & 0xFFFFFFFFFFFFFFF0);
    v6 = __error();
    *(_WORD *)_os_log_pack_fill(v5, v2, *v6, &_mh_execute_header, "calling bundle stop() functions") = 0;
    __SC_log_send(7, v0, v1, v5);
  }
  v7 = (const __CFArray *)qword_10007DA60;
  v21.length = CFArrayGetCount((CFArrayRef)qword_10007DA60);
  v21.location = 0;
  CFArrayApplyFunction(v7, v21, (CFArrayApplierFunction)sub_10000D824, 0);
  if (!CFDictionaryGetCount((CFDictionaryRef)qword_10007DA68))
  {
    v11 = sub_100009350();
    v12 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v11, v12))
    {
      v13 = _os_log_pack_size(12);
      v16 = (char *)&v20 - ((__chkstk_darwin(v13, v14, v15) + 15) & 0xFFFFFFFFFFFFFFF0);
      v17 = __error();
      v18 = _os_log_pack_fill(v16, v13, *v17, &_mh_execute_header, "server shutdown complete (%f)", v20);
      Current = CFAbsoluteTimeGetCurrent();
      *(_DWORD *)v18 = 134217984;
      *(CFAbsoluteTime *)(v18 + 4) = Current;
      __SC_log_send(6, v11, v12, v16);
    }
    exit(0);
  }
  v8 = CFAbsoluteTimeGetCurrent();
  v9 = CFRunLoopTimerCreate(0, v8 + 15.0, 0.0, 0, 0, (CFRunLoopTimerCallBack)sub_10000D920, 0);
  v10 = CFRunLoopGetCurrent();
  CFRunLoopAddTimer(v10, v9, kCFRunLoopDefaultMode);
  CFRelease(v9);
}

CFMutableArrayRef sub_10000C9A4(const __CFDictionary *a1)
{
  uint64_t v2;
  __int128 v3;
  const __CFString *v4;
  const void *Value;
  const void *v6;
  os_log_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  CFStringRef v15;
  CFStringRef v16;
  int v17;
  uint64_t v19;
  CFMutableArrayRef Mutable;
  __int128 v21;

  Mutable = CFArrayCreateMutable(0, 0, 0);
  v2 = 0;
  *(_QWORD *)&v3 = 138412290;
  v21 = v3;
  do
  {
    v4 = *(const __CFString **)((char *)&off_1000759C8 + v2);
    Value = CFDictionaryGetValue(a1, v4);
    if (Value)
    {
      v6 = Value;
      if (CFSetContainsValue((CFSetRef)qword_10007D9A8, v4)
        || (v15 = sub_10000CB60(v4)) != 0
        && (v16 = v15, v17 = CFSetContainsValue((CFSetRef)qword_10007D9A8, v15), CFRelease(v16), v17))
      {
        v7 = sub_100009350();
        v8 = _SC_syslog_os_log_mapping(6);
        if (__SC_log_enabled(6, v7, v8))
        {
          v9 = _os_log_pack_size(12);
          v12 = (char *)&v19 - ((__chkstk_darwin(v9, v10, v11) + 15) & 0xFFFFFFFFFFFFFFF0);
          v13 = __error();
          v14 = _os_log_pack_fill(v12, v9, *v13, &_mh_execute_header, "skipped %@ (excluded)");
          *(_DWORD *)v14 = v21;
          *(_QWORD *)(v14 + 4) = v4;
          __SC_log_send(6, v7, v8, v12);
        }
      }
      else
      {
        CFArrayAppendValue(Mutable, v6);
      }
    }
    v2 += 8;
  }
  while (v2 != 80);
  return Mutable;
}

CFStringRef sub_10000CB60(const __CFString *a1)
{
  CFIndex Length;
  CFRange result;
  CFRange v5;
  CFRange v6;

  Length = CFStringGetLength(a1);
  result.location = 0;
  result.length = 0;
  v5.location = 0;
  v5.length = Length;
  if (!CFStringFindWithOptions(a1, CFSTR("."), v5, 4uLL, &result))
    return 0;
  v6.length = Length - (result.length + result.location);
  result.location += result.length;
  v6.location = result.location;
  result.length = v6.length;
  return CFStringCreateWithSubstring(0, a1, v6);
}

void sub_10000CC04(const char *a1)
{
  __CFDictionary *v2;
  os_log_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  const __CFArray *v10;
  os_log_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int *v17;
  const __CFArray *v18;
  os_log_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int *v25;
  const __CFArray *v26;
  os_log_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int *v33;
  const __CFArray *v34;
  uint64_t context;
  CFRange v36;
  CFRange v37;
  CFRange v38;
  CFRange v39;

  context = 0;
  _SCDPluginExecInit();
  v2 = sub_10000CFA4(a1);
  qword_10007DA60 = (uint64_t)sub_10000C9A4(v2);
  CFRelease(v2);
  v3 = sub_100009350();
  v4 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v3, v4))
  {
    v5 = _os_log_pack_size(2);
    v8 = (char *)&context - ((__chkstk_darwin(v5, v6, v7) + 15) & 0xFFFFFFFFFFFFFFF0);
    v9 = __error();
    *(_WORD *)_os_log_pack_fill(v8, v5, *v9, &_mh_execute_header, "loading bundles") = 0;
    __SC_log_send(7, v3, v4, v8);
  }
  v10 = (const __CFArray *)qword_10007DA60;
  v36.length = CFArrayGetCount((CFArrayRef)qword_10007DA60);
  v36.location = 0;
  CFArrayApplyFunction(v10, v36, (CFArrayApplierFunction)sub_10000D230, &context);
  v11 = sub_100009350();
  v12 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v11, v12))
  {
    v13 = _os_log_pack_size(2);
    v16 = (char *)&context - ((__chkstk_darwin(v13, v14, v15) + 15) & 0xFFFFFFFFFFFFFFF0);
    v17 = __error();
    *(_WORD *)_os_log_pack_fill(v16, v13, *v17, &_mh_execute_header, "calling bundle load() functions") = 0;
    __SC_log_send(7, v11, v12, v16);
  }
  v18 = (const __CFArray *)qword_10007DA60;
  v37.length = CFArrayGetCount((CFArrayRef)qword_10007DA60);
  v37.location = 0;
  CFArrayApplyFunction(v18, v37, (CFArrayApplierFunction)sub_10000C1CC, 0);
  if (context)
  {
    v19 = sub_100009350();
    v20 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v19, v20))
    {
      v21 = _os_log_pack_size(2);
      v24 = (char *)&context - ((__chkstk_darwin(v21, v22, v23) + 15) & 0xFFFFFFFFFFFFFFF0);
      v25 = __error();
      *(_WORD *)_os_log_pack_fill(v24, v21, *v25, &_mh_execute_header, "calling bundle start() functions") = 0;
      __SC_log_send(7, v19, v20, v24);
    }
    v26 = (const __CFArray *)qword_10007DA60;
    v38.length = CFArrayGetCount((CFArrayRef)qword_10007DA60);
    v38.location = 0;
    CFArrayApplyFunction(v26, v38, (CFArrayApplierFunction)sub_10000C300, 0);
    v27 = sub_100009350();
    v28 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v27, v28))
    {
      v29 = _os_log_pack_size(2);
      v32 = (char *)&context - ((__chkstk_darwin(v29, v30, v31) + 15) & 0xFFFFFFFFFFFFFFF0);
      v33 = __error();
      *(_WORD *)_os_log_pack_fill(v32, v29, *v33, &_mh_execute_header, "calling bundle prime() functions") = 0;
      __SC_log_send(7, v27, v28, v32);
    }
    v34 = (const __CFArray *)qword_10007DA60;
    v39.length = CFArrayGetCount((CFArrayRef)qword_10007DA60);
    v39.location = 0;
    CFArrayApplyFunction(v34, v39, (CFArrayApplierFunction)sub_10000C4E0, 0);
  }
}

__CFDictionary *sub_10000CFA4(const char *a1)
{
  __CFDictionary *Mutable;
  size_t v3;
  const __CFURL *v4;
  __CFBundle *v5;
  __CFBundle *v6;
  sysdir_search_path_enumeration_state started;
  sysdir_search_path_enumeration_state next_search_path_enumeration;
  __int128 v9;
  sysdir_search_path_enumeration_state v10;
  os_log_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int *v17;
  uint64_t v18;
  size_t v19;
  const __CFURL *v20;
  const __CFArray *BundlesFromDirectory;
  CFIndex Count;
  CFIndex v23;
  CFIndex i;
  __CFBundle *ValueAtIndex;
  __int128 v27;
  char v28[1024];

  Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, 0);
  if (a1)
  {
    v3 = strlen(a1);
    v4 = CFURLCreateFromFileSystemRepresentation(0, (const UInt8 *)a1, v3, 1u);
    v5 = CFBundleCreate(0, v4);
    if (v5)
    {
      v6 = v5;
      sub_10000DD80(Mutable, v5, 1);
      CFRelease(v6);
    }
    CFRelease(v4);
  }
  else
  {
    started = sysdir_start_search_path_enumeration(SYSDIR_DIRECTORY_LIBRARY, SYSDIR_DOMAIN_MASK_SYSTEM);
    next_search_path_enumeration = sysdir_get_next_search_path_enumeration(started, v28);
    if (next_search_path_enumeration)
    {
      v10 = next_search_path_enumeration;
      *(_QWORD *)&v9 = 136315138;
      v27 = v9;
      do
      {
        __strlcat_chk(v28, "/SystemConfiguration", 1024, 1024);
        v11 = sub_100009350();
        v12 = _SC_syslog_os_log_mapping(7);
        if (__SC_log_enabled(7, v11, v12))
        {
          v13 = _os_log_pack_size(12);
          v16 = &v28[-((__chkstk_darwin(v13, v14, v15) + 15) & 0xFFFFFFFFFFFFFFF0) - 16];
          v17 = __error();
          v18 = _os_log_pack_fill(v16, v13, *v17, &_mh_execute_header, "searching for plugins in \"%s\"", (const char *)v27);
          *(_DWORD *)v18 = v27;
          *(_QWORD *)(v18 + 4) = v28;
          __SC_log_send(7, v11, v12, v16);
        }
        v19 = strlen(v28);
        v20 = CFURLCreateFromFileSystemRepresentation(0, (const UInt8 *)v28, v19, 1u);
        BundlesFromDirectory = CFBundleCreateBundlesFromDirectory(0, v20, CFSTR(".bundle"));
        CFRelease(v20);
        if (BundlesFromDirectory)
        {
          Count = CFArrayGetCount(BundlesFromDirectory);
          if (Count >= 1)
          {
            v23 = Count;
            for (i = 0; i != v23; ++i)
            {
              ValueAtIndex = (__CFBundle *)CFArrayGetValueAtIndex(BundlesFromDirectory, i);
              sub_10000DD80(Mutable, ValueAtIndex, 0);
              sub_10000A6C4(ValueAtIndex);
            }
          }
          CFRelease(BundlesFromDirectory);
        }
        v10 = sysdir_get_next_search_path_enumeration(v10, v28);
      }
      while (v10);
    }
  }
  return Mutable;
}

void sub_10000D230(uint64_t a1, _QWORD *a2)
{
  const __CFString *Identifier;
  CFStringRef v5;
  int v6;
  os_log_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  os_log_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  os_log_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  os_log_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  int *v41;
  uint64_t v42;
  const __CFDictionary *v43;
  const __CFDictionary *v44;
  const void *Value;
  const void *v46;
  os_log_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  uint64_t v59;
  CFErrorRef error;

  Identifier = CFBundleGetIdentifier(*(CFBundleRef *)a1);
  v5 = sub_10000CB60(Identifier);
  if (!*(_BYTE *)(a1 + 10) && !*(_BYTE *)(a1 + 11))
  {
    v26 = sub_100009350();
    v27 = _SC_syslog_os_log_mapping(6);
    if (!__SC_log_enabled(6, v26, v27))
      goto LABEL_26;
    v28 = _os_log_pack_size(12);
    v31 = (char *)&error - ((__chkstk_darwin(v28, v29, v30) + 15) & 0xFFFFFFFFFFFFFFF0);
    v32 = __error();
    v33 = _os_log_pack_fill(v31, v28, *v32, &_mh_execute_header, "skipped %@ (disabled)");
    *(_DWORD *)v33 = 138412290;
    *(_QWORD *)(v33 + 4) = Identifier;
    v34 = 6;
    goto LABEL_31;
  }
  if (!*(_BYTE *)(a1 + 12))
  {
    v6 = CFSetContainsValue((CFSetRef)qword_10007D9B0, Identifier);
    *(_BYTE *)(a1 + 12) = v6;
    if (!v6 && v5 != 0)
      *(_BYTE *)(a1 + 12) = CFSetContainsValue((CFSetRef)qword_10007D9B0, v5);
  }
  if (*(_BYTE *)(a1 + 9))
  {
    v8 = sub_100009350();
    v9 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v8, v9))
    {
      v10 = _os_log_pack_size(12);
      v13 = (char *)&error - ((__chkstk_darwin(v10, v11, v12) + 15) & 0xFFFFFFFFFFFFFFF0);
      v14 = __error();
      v15 = _os_log_pack_fill(v13, v10, *v14, &_mh_execute_header, "adding  %@");
      *(_DWORD *)v15 = 138412290;
      *(_QWORD *)(v15 + 4) = Identifier;
      __SC_log_send(6, v8, v9, v13);
    }
    v16 = 0;
    while (!CFEqual(Identifier, *(CFTypeRef *)((char *)&off_100075A18 + v16)))
    {
      v16 += 40;
      if (v16 == 240)
      {
        if (*(_QWORD *)(a1 + 16))
          goto LABEL_25;
        goto LABEL_22;
      }
    }
    v25 = *(_QWORD *)((char *)&off_100075A18 + v16 + 8);
    *(_QWORD *)(a1 + 16) = v25;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)((char *)&off_100075A18 + v16 + 24);
    *(_QWORD *)(a1 + 40) = 0;
    if (v25)
      goto LABEL_25;
LABEL_22:
    if (*(_QWORD *)(a1 + 24) || *(_QWORD *)(a1 + 32) || *(_QWORD *)(a1 + 40))
      goto LABEL_25;
    v26 = sub_100009350();
    v27 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v26, v27))
    {
      v55 = _os_log_pack_size(12);
      v31 = (char *)&error - ((__chkstk_darwin(v55, v56, v57) + 15) & 0xFFFFFFFFFFFFFFF0);
      v58 = __error();
      v59 = _os_log_pack_fill(v31, v55, *v58, &_mh_execute_header, "%@ add failed");
      *(_DWORD *)v59 = 138412290;
      *(_QWORD *)(v59 + 4) = Identifier;
      v34 = 5;
LABEL_31:
      __SC_log_send(v34, v26, v27, v31);
    }
  }
  else
  {
    error = 0;
    v17 = sub_100009350();
    v18 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v17, v18))
    {
      v19 = _os_log_pack_size(12);
      v22 = (char *)&error - ((__chkstk_darwin(v19, v20, v21) + 15) & 0xFFFFFFFFFFFFFFF0);
      v23 = __error();
      v24 = _os_log_pack_fill(v22, v19, *v23, &_mh_execute_header, "loading %@", error);
      *(_DWORD *)v24 = 138412290;
      *(_QWORD *)(v24 + 4) = Identifier;
      __SC_log_send(6, v17, v18, v22);
    }
    if (CFBundleLoadExecutableAndReturnError(*(CFBundleRef *)a1, &error))
    {
      *(_QWORD *)(a1 + 16) = sub_10000E14C(*(__CFBundle **)a1, CFSTR("load"), (uint64_t)v5);
      *(_QWORD *)(a1 + 24) = sub_10000E14C(*(__CFBundle **)a1, CFSTR("start"), (uint64_t)v5);
      *(_QWORD *)(a1 + 32) = sub_10000E14C(*(__CFBundle **)a1, CFSTR("prime"), (uint64_t)v5);
      *(_QWORD *)(a1 + 40) = sub_10000E14C(*(__CFBundle **)a1, CFSTR("stop"), (uint64_t)v5);
LABEL_25:
      *(_BYTE *)(a1 + 8) = 1;
      ++*a2;
      goto LABEL_26;
    }
    v35 = sub_100009350();
    v36 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v35, v36))
    {
      v37 = _os_log_pack_size(12);
      v40 = (char *)&error - ((__chkstk_darwin(v37, v38, v39) + 15) & 0xFFFFFFFFFFFFFFF0);
      v41 = __error();
      v42 = _os_log_pack_fill(v40, v37, *v41, &_mh_execute_header, "%@ load failed");
      *(_DWORD *)v42 = 138412290;
      *(_QWORD *)(v42 + 4) = Identifier;
      __SC_log_send(5, v35, v36, v40);
    }
    v43 = CFErrorCopyUserInfo(error);
    if (v43)
    {
      v44 = v43;
      Value = CFDictionaryGetValue(v43, CFSTR("NSDebugDescription"));
      if (Value)
      {
        v46 = Value;
        v47 = sub_100009350();
        v48 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v47, v48))
        {
          v49 = _os_log_pack_size(12);
          v52 = (char *)&error - ((__chkstk_darwin(v49, v50, v51) + 15) & 0xFFFFFFFFFFFFFFF0);
          v53 = __error();
          v54 = _os_log_pack_fill(v52, v49, *v53, &_mh_execute_header, "%@");
          *(_DWORD *)v54 = 138412290;
          *(_QWORD *)(v54 + 4) = v46;
          __SC_log_send(5, v47, v48, v52);
        }
      }
      CFRelease(v44);
    }
    CFRelease(error);
  }
LABEL_26:
  if (v5)
    CFRelease(v5);
}

void sub_10000D824(uint64_t a1)
{
  void *v1;
  __CFRunLoopSource *v3;
  __CFRunLoop *Current;
  CFRunLoopSourceContext context;

  v1 = *(void **)a1;
  context.version = 0;
  context.info = v1;
  context.retain = (const void *(__cdecl *)(const void *))&_CFRetain;
  context.release = (void (__cdecl *)(const void *))&_CFRelease;
  context.copyDescription = (CFStringRef (__cdecl *)(const void *))sub_10000DB00;
  context.equal = (Boolean (__cdecl *)(const void *, const void *))&_CFEqual;
  context.hash = (CFHashCode (__cdecl *)(const void *))&CFHash;
  context.schedule = 0;
  context.cancel = 0;
  context.perform = (void (__cdecl *)(void *))sub_10000DB6C;
  if (*(_BYTE *)(a1 + 8))
  {
    if (*(_QWORD *)(a1 + 40))
    {
      v3 = CFRunLoopSourceCreate(0, 0, &context);
      Current = CFRunLoopGetCurrent();
      CFRunLoopAddSource(Current, v3, kCFRunLoopDefaultMode);
      CFDictionaryAddValue((CFMutableDictionaryRef)qword_10007DA68, *(const void **)a1, v3);
      (*(void (**)(__CFRunLoopSource *))(a1 + 40))(v3);
      CFRelease(v3);
    }
  }
}

void sub_10000D920()
{
  os_log_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int *v6;
  CFIndex Count;
  __int128 v8;
  CFBundleRef *v9;
  CFStringRef Identifier;
  os_log_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  const void **v20;
  __int128 v21;

  v0 = sub_100009350();
  v1 = _SC_syslog_os_log_mapping(6);
  if (__SC_log_enabled(6, v0, v1))
  {
    v2 = _os_log_pack_size(2);
    v5 = (char *)&v19 - ((__chkstk_darwin(v2, v3, v4) + 15) & 0xFFFFFFFFFFFFFFF0);
    v6 = __error();
    *(_WORD *)_os_log_pack_fill(v5, v2, *v6, &_mh_execute_header, "server shutdown was delayed, unresponsive plugins:") = 0;
    __SC_log_send(6, v0, v1, v5);
  }
  Count = CFDictionaryGetCount((CFDictionaryRef)qword_10007DA68);
  v20 = (const void **)CFAllocatorAllocate(0, 8 * Count, 0);
  CFDictionaryGetKeysAndValues((CFDictionaryRef)qword_10007DA68, v20, 0);
  if (Count >= 1)
  {
    *(_QWORD *)&v8 = 138412290;
    v21 = v8;
    v9 = (CFBundleRef *)v20;
    do
    {
      Identifier = CFBundleGetIdentifier(*v9);
      v11 = sub_100009350();
      v12 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v11, v12))
      {
        v13 = _os_log_pack_size(12);
        v16 = (char *)&v19 - ((__chkstk_darwin(v13, v14, v15) + 15) & 0xFFFFFFFFFFFFFFF0);
        v17 = __error();
        v18 = _os_log_pack_fill(v16, v13, *v17, &_mh_execute_header, "** %@");
        *(_DWORD *)v18 = v21;
        *(_QWORD *)(v18 + 4) = Identifier;
        __SC_log_send(5, v11, v12, v16);
      }
      ++v9;
      --Count;
    }
    while (Count);
  }
  CFAllocatorDeallocate(0, v20);
  exit(0);
}

CFStringRef sub_10000DB00(__CFBundle *a1)
{
  CFStringRef Identifier;

  Identifier = CFBundleGetIdentifier(a1);
  return CFStringCreateWithFormat(0, 0, CFSTR("<stopRLS %p> {bundleID = %@}"), a1, Identifier);
}

__CFRunLoopSource *sub_10000DB6C(__CFBundle *a1)
{
  CFStringRef Identifier;
  os_log_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  CFAbsoluteTime Current;
  __CFRunLoopSource *result;
  os_log_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  CFAbsoluteTime v21;
  double v22;

  Identifier = CFBundleGetIdentifier(a1);
  v3 = sub_100009350();
  v4 = _SC_syslog_os_log_mapping(6);
  if (__SC_log_enabled(6, v3, v4))
  {
    v5 = _os_log_pack_size(22);
    v8 = (char *)&v22 - ((__chkstk_darwin(v5, v6, v7) + 15) & 0xFFFFFFFFFFFFFFF0);
    v9 = __error();
    v10 = _os_log_pack_fill(v8, v5, *v9, &_mh_execute_header, "** %@ complete (%f)");
    Current = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)v10 = 138412546;
    *(_QWORD *)(v10 + 4) = Identifier;
    *(_WORD *)(v10 + 12) = 2048;
    *(CFAbsoluteTime *)(v10 + 14) = Current;
    __SC_log_send(6, v3, v4, v8);
  }
  result = (__CFRunLoopSource *)CFDictionaryGetValue((CFDictionaryRef)qword_10007DA68, a1);
  if (result)
  {
    CFRunLoopSourceInvalidate(result);
    CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_10007DA68, a1);
    result = (__CFRunLoopSource *)CFDictionaryGetCount((CFDictionaryRef)qword_10007DA68);
    if (!result)
    {
      v13 = sub_100009350();
      v14 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v13, v14))
      {
        v15 = _os_log_pack_size(12);
        v18 = (char *)&v22 - ((__chkstk_darwin(v15, v16, v17) + 15) & 0xFFFFFFFFFFFFFFF0);
        v19 = __error();
        v20 = _os_log_pack_fill(v18, v15, *v19, &_mh_execute_header, "server shutdown complete (%f)", v22);
        v21 = CFAbsoluteTimeGetCurrent();
        *(_DWORD *)v20 = 134217984;
        *(CFAbsoluteTime *)(v20 + 4) = v21;
        __SC_log_send(6, v13, v14, v18);
      }
      exit(0);
    }
  }
  return result;
}

uint64_t sub_10000DD80(__CFDictionary *a1, CFBundleRef bundle, char a3)
{
  CFStringRef Identifier;
  CFStringRef v7;
  _WORD *v8;
  const __CFDictionary *InfoDictionary;
  CFTypeID TypeID;
  const __CFBoolean *Value;
  CFTypeID v12;
  const __CFBoolean *v13;
  CFTypeID v14;
  const __CFBoolean *v15;
  CFTypeID v16;
  os_log_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  os_log_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  os_log_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  Identifier = CFBundleGetIdentifier(bundle);
  if (!Identifier)
  {
    v26 = sub_100009350();
    v27 = _SC_syslog_os_log_mapping(5);
    result = __SC_log_enabled(5, v26, v27);
    if (!(_DWORD)result)
      return result;
    v28 = _os_log_pack_size(22);
    v23 = (char *)&v41 - ((__chkstk_darwin(v28, v29, v30) + 15) & 0xFFFFFFFFFFFFFFF0);
    v31 = __error();
    v32 = _os_log_pack_fill(v23, v28, *v31, &_mh_execute_header, "%s: ignoring %@ (no bundle ID)");
    *(_DWORD *)v32 = 136315394;
    *(_QWORD *)(v32 + 4) = "addPlugin";
    *(_WORD *)(v32 + 12) = 2112;
    *(_QWORD *)(v32 + 14) = bundle;
    v33 = v26;
    v34 = v27;
    return __SC_log_send(5, v33, v34, v23);
  }
  v7 = Identifier;
  if (CFEqual(Identifier, CFSTR("com.apple.SystemConfiguration.InterfaceNamer")))
  {
LABEL_3:
    v8 = CFAllocatorAllocate(0, 48, 0);
    *(_QWORD *)v8 = CFRetain(bundle);
    v8[4] = 0;
    *((_BYTE *)v8 + 10) = 1;
    *((_BYTE *)v8 + 11) = a3;
    *((_BYTE *)v8 + 12) = 0;
    *((_OWORD *)v8 + 1) = 0u;
    *((_OWORD *)v8 + 2) = 0u;
    InfoDictionary = CFBundleGetInfoDictionary(bundle);
    TypeID = CFDictionaryGetTypeID();
    if (InfoDictionary && CFGetTypeID(InfoDictionary) == TypeID)
    {
      Value = (const __CFBoolean *)CFDictionaryGetValue(InfoDictionary, CFSTR("Builtin"));
      v12 = CFBooleanGetTypeID();
      if (Value && CFGetTypeID(Value) == v12)
        *((_BYTE *)v8 + 9) = CFBooleanGetValue(Value);
      v13 = (const __CFBoolean *)CFDictionaryGetValue(InfoDictionary, CFSTR("Enabled"));
      v14 = CFBooleanGetTypeID();
      if (v13 && CFGetTypeID(v13) == v14)
        *((_BYTE *)v8 + 10) = CFBooleanGetValue(v13);
      v15 = (const __CFBoolean *)CFDictionaryGetValue(InfoDictionary, CFSTR("Verbose"));
      v16 = CFBooleanGetTypeID();
      if (v15)
      {
        if (CFGetTypeID(v15) == v16)
          *((_BYTE *)v8 + 12) = CFBooleanGetValue(v15);
      }
    }
    CFDictionaryAddValue(a1, v7, v8);
    v17 = sub_100009350();
    v18 = _SC_syslog_os_log_mapping(5);
    result = __SC_log_enabled(5, v17, v18);
    if ((_DWORD)result)
    {
      v20 = _os_log_pack_size(22);
      v23 = (char *)&v41 - ((__chkstk_darwin(v20, v21, v22) + 15) & 0xFFFFFFFFFFFFFFF0);
      v24 = *__error();
      v25 = _os_log_pack_fill(v23, v20, v24, &_mh_execute_header, "%s: %@");
LABEL_24:
      *(_DWORD *)v25 = 136315394;
      *(_QWORD *)(v25 + 4) = "addPlugin";
      *(_WORD *)(v25 + 12) = 2112;
      *(_QWORD *)(v25 + 14) = v7;
      v33 = v17;
      v34 = v18;
      return __SC_log_send(5, v33, v34, v23);
    }
  }
  else
  {
    v35 = 1;
    while (v35 != 10)
    {
      if (CFEqual(v7, *((CFTypeRef *)&off_1000759C8 + v35++)))
      {
        if ((unint64_t)(v35 - 2) < 9)
          goto LABEL_3;
        break;
      }
    }
    v17 = sub_100009350();
    v18 = _SC_syslog_os_log_mapping(5);
    result = __SC_log_enabled(5, v17, v18);
    if ((_DWORD)result)
    {
      v37 = _os_log_pack_size(22);
      v23 = (char *)&v41 - ((__chkstk_darwin(v37, v38, v39) + 15) & 0xFFFFFFFFFFFFFFF0);
      v40 = *__error();
      v25 = _os_log_pack_fill(v23, v37, v40, &_mh_execute_header, "%s: %@ not in allow list, ignoring");
      goto LABEL_24;
    }
  }
  return result;
}

void *sub_10000E14C(__CFBundle *a1, const __CFString *a2, uint64_t a3)
{
  void *result;
  const __CFString *v7;
  void *FunctionPointerForName;

  result = CFBundleGetFunctionPointerForName(a1, a2);
  if (!result)
  {
    if (a3)
    {
      v7 = CFStringCreateWithFormat(0, 0, CFSTR("%@_%@"), a2, a3);
      FunctionPointerForName = CFBundleGetFunctionPointerForName(a1, v7);
      CFRelease(v7);
      return FunctionPointerForName;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10000E210(const __CFNumber *a1)
{
  uint64_t v2;

  v2 = 0;
  CFNumberGetValue(a1, kCFNumberSInt64Type, &v2);
  return sub_10000811C(v2);
}

uint64_t sub_10000E26C(uint64_t a1)
{
  int v1;
  char v3[16];

  _SC_cfstring_to_cstring(a1, v3, 16, 1536);
  v1 = atoi(v3);
  return sub_10000811C(v1);
}

uint64_t sub_10000E2CC(mach_port_name_t a1)
{
  qword_10007DA78 = sub_100005AC4(a1);
  sub_10000632C(qword_10007DA78, 1);
  if (qword_10007DA80 != -1)
    dispatch_once(&qword_10007DA80, &stru_100075BB8);
  os_state_add_handler(qword_10007DA88, &stru_100075C98);
  return qword_10007DA78;
}

void sub_10000E36C(uint64_t a1)
{
  _QWORD v2[5];

  if (qword_10007DA80 != -1)
    dispatch_once(&qword_10007DA80, &stru_100075BB8);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 0x40000000;
  v2[2] = sub_10000E424;
  v2[3] = &unk_100075B78;
  v2[4] = a1;
  dispatch_sync((dispatch_queue_t)qword_10007DA88, v2);
}

uint64_t sub_10000E424(uint64_t a1)
{
  _QWORD context[2];

  context[0] = *(_QWORD *)(a1 + 32);
  context[1] = 0;
  SCPrint(1, context[0], CFSTR("Current sessions :\n"));
  CFDictionaryApplyFunction((CFDictionaryRef)qword_10007DA70, (CFDictionaryApplierFunction)sub_10000E4B8, context);
  return SCPrint(1, *(_QWORD *)(a1 + 32), CFSTR("\n"));
}

uint64_t sub_10000E4B8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;

  v5 = *a3;
  ++*((_DWORD *)a3 + 2);
  SCPrint(1, v5, CFSTR("  %d : port = 0x%x"));
  SCPrint(1, *a3, CFSTR(", name = %@"));
  if (*(_QWORD *)(a2 + 32))
    SCPrint(1, *a3, CFSTR("\n    changedKeys = %@"));
  if (*(_QWORD *)(a2 + 48))
    SCPrint(1, *a3, CFSTR("\n    sessionKeys = %@"));
  return SCPrint(1, *a3, CFSTR("\n"));
}

BOOL sub_10000E5A0(uint64_t a1)
{
  return *(_DWORD *)(a1 + 64) == 0;
}

uint64_t sub_10000E5F0(uint64_t a1)
{
  const __CFBoolean *v2;
  uint64_t v3;
  const __CFArray *v4;
  CFDictionaryRef v5;
  CFDictionaryRef v6;
  const CFBooleanRef *v7;
  os_log_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  const char *v16;
  void *values[2];
  const __CFString *v19;

  if (!sub_10000A708())
    return 0;
  v2 = *(const __CFBoolean **)(a1 + 128);
  if (v2)
    return CFBooleanGetValue(v2);
  *(_OWORD *)values = off_100075CB8;
  v19 = CFSTR("com.apple.private.attribution.explicitly-assumed-identities");
  v4 = (const __CFArray *)qword_10007DAA0;
  if (!qword_10007DAA0)
  {
    v4 = CFArrayCreate(0, (const void **)values, 3, &kCFTypeArrayCallBacks);
    qword_10007DAA0 = (uint64_t)v4;
  }
  v5 = sub_10000F1D0(a1, v4);
  if (v5)
  {
    v6 = v5;
    v3 = sub_10000A75C((uint64_t)v5);
    CFRelease(v6);
  }
  else
  {
    v3 = 0;
  }
  v7 = &kCFBooleanTrue;
  if (!(_DWORD)v3)
    v7 = &kCFBooleanFalse;
  *(CFBooleanRef *)(a1 + 128) = *v7;
  v8 = sub_100009350();
  v9 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v8, v9))
  {
    v10 = _os_log_pack_size(22);
    v13 = (char *)values - ((__chkstk_darwin(v10, v11, v12) + 15) & 0xFFFFFFFFFFFFFFF0);
    v14 = __error();
    v15 = _os_log_pack_fill(v13, v10, *v14, &_mh_execute_header, "%@ is%s a system process", values[0], values[1], v19);
    v16 = "";
    if (!(_DWORD)v3)
      v16 = " NOT";
    *(_DWORD *)v15 = 138412546;
    *(_QWORD *)(v15 + 4) = a1;
    *(_WORD *)(v15 + 12) = 2080;
    *(_QWORD *)(v15 + 14) = v16;
    __SC_log_send(7, v8, v9, v13);
  }
  if ((_DWORD)v3)
    sub_10000F064(a1 + 68, (uint64_t)"SC_SYSTEM_PROCESS_PATH");
  return v3;
}

uint64_t sub_10000E7EC(uint64_t a1, const __CFString *a2)
{
  const __CFBoolean *v2;
  CFTypeID TypeID;

  v2 = sub_1000086C4(a1, a2);
  TypeID = CFBooleanGetTypeID();
  if (v2 && CFGetTypeID(v2) == TypeID)
    return CFBooleanGetValue(v2);
  else
    return 0;
}

uint64_t sub_10000E88C(uint64_t a1)
{
  const __CFBoolean *v2;
  __int128 v4;
  __SecTask *v5;
  __SecTask *v6;
  uint32_t CodeSignStatus;
  _BOOL4 v8;
  const CFBooleanRef *v9;
  os_log_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  const char *v18;
  audit_token_t token;

  v2 = *(const __CFBoolean **)(a1 + 120);
  if (v2)
    return CFBooleanGetValue(v2);
  v4 = *(_OWORD *)(a1 + 84);
  *(_OWORD *)token.val = *(_OWORD *)(a1 + 68);
  *(_OWORD *)&token.val[4] = v4;
  v5 = SecTaskCreateWithAuditToken(0, &token);
  if (!v5)
  {
    v8 = 1;
    goto LABEL_7;
  }
  v6 = v5;
  CodeSignStatus = SecTaskGetCodeSignStatus(v5);
  CFRelease(v6);
  v8 = (CodeSignStatus & 0x4000000) == 0;
  if ((CodeSignStatus & 0x4000000) == 0)
  {
LABEL_7:
    v9 = &kCFBooleanFalse;
    goto LABEL_8;
  }
  v9 = &kCFBooleanTrue;
LABEL_8:
  *(CFBooleanRef *)(a1 + 120) = *v9;
  v10 = sub_100009350();
  v11 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v10, v11))
  {
    v12 = _os_log_pack_size(32);
    v15 = (char *)&token - ((__chkstk_darwin(v12, v13, v14) + 15) & 0xFFFFFFFFFFFFFFF0);
    v16 = __error();
    v17 = _os_log_pack_fill(v15, v12, *v16, &_mh_execute_header, "%s: %@ is%s a platform binary");
    v18 = "";
    *(_QWORD *)(v17 + 4) = "sessionIsPlatformBinary";
    *(_DWORD *)v17 = 136315650;
    if (v8)
      v18 = " NOT";
    *(_WORD *)(v17 + 12) = 2112;
    *(_QWORD *)(v17 + 14) = a1;
    *(_WORD *)(v17 + 22) = 2080;
    *(_QWORD *)(v17 + 24) = v18;
    __SC_log_send(7, v10, v11, v15);
  }
  if (v8)
    return 0;
  sub_10000F064(a1 + 68, (uint64_t)"SC_PLATFORM_BINARY_PATH");
  return 1;
}

uint64_t sub_10000EA88(uint64_t a1, const __CFString *a2)
{
  const __CFDictionary *v3;
  CFTypeID TypeID;
  const __CFArray *Value;
  CFTypeID v6;
  const __CFArray *v8;
  CFTypeID v9;
  CFIndex Count;
  CFIndex v11;
  CFIndex v12;
  __CFString *ValueAtIndex;
  CFTypeID v14;
  CFRange v15;

  v3 = sub_1000086C4(a1, CFSTR("com.apple.SystemConfiguration.SCDynamicStore-write-access"));
  TypeID = CFDictionaryGetTypeID();
  if (v3 && CFGetTypeID(v3) == TypeID)
  {
    Value = (const __CFArray *)CFDictionaryGetValue(v3, CFSTR("keys"));
    v6 = CFArrayGetTypeID();
    if (Value)
    {
      if (CFGetTypeID(Value) == v6)
      {
        v15.length = CFArrayGetCount(Value);
        v15.location = 0;
        if (CFArrayContainsValue(Value, v15, a2))
          return 1;
      }
    }
    v8 = (const __CFArray *)CFDictionaryGetValue(v3, CFSTR("patterns"));
    v9 = CFArrayGetTypeID();
    if (v8)
    {
      if (CFGetTypeID(v8) == v9)
      {
        Count = CFArrayGetCount(v8);
        if (Count >= 1)
        {
          v11 = Count;
          v12 = 0;
          while (1)
          {
            ValueAtIndex = (__CFString *)CFArrayGetValueAtIndex(v8, v12);
            v14 = CFStringGetTypeID();
            if (ValueAtIndex)
            {
              if (CFGetTypeID(ValueAtIndex) == v14 && sub_10000F648(ValueAtIndex, a2))
                break;
            }
            if (v11 == ++v12)
              return 0;
          }
          return 1;
        }
      }
    }
  }
  return 0;
}

void sub_10000EC00(id a1)
{
  qword_10007DA70 = (uint64_t)CFDictionaryCreateMutable(0, 0, 0, &kCFTypeDictionaryValueCallBacks);
  qword_10007DA88 = (uint64_t)dispatch_queue_create("SCDynamicStore/sessions", 0);
}

void sub_10000EC7C(id a1)
{
  qword_10007DA98 = _CFRuntimeRegisterClass(&unk_100075C18);
}

os_state_data_s *__cdecl sub_10000ECD4(id a1, os_state_hints_s *a2)
{
  CFIndex Count;
  void *Mutable;
  int v4;
  BOOL v5;
  int64_t v6;
  size_t v7;
  CFIndex Length;
  os_log_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  os_state_data_s *v15;
  os_state_data_s *v16;
  const UInt8 *BytePtr;
  os_log_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int *v22;
  CFDataRef v24[2];

  v24[0] = 0;
  Count = CFDictionaryGetCount((CFDictionaryRef)qword_10007DA70);
  if (Count > 249)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    CFDictionaryApplyFunction((CFDictionaryRef)qword_10007DA70, (CFDictionaryApplierFunction)sub_10000EF9C, Mutable);
  }
  else
  {
    Mutable = (void *)CFStringCreateWithFormat(0, 0, CFSTR("n = %ld"), Count);
  }
  v4 = _SCSerialize(Mutable, v24, 0, 0);
  CFRelease(Mutable);
  if (v4)
    v5 = v24[0] == 0;
  else
    v5 = 1;
  if (v5)
  {
    v6 = 0;
    v7 = 200;
  }
  else
  {
    Length = CFDataGetLength(v24[0]);
    v7 = Length + 200;
    if ((unint64_t)(Length + 200) > 0x8000)
    {
      v9 = sub_100009350();
      v10 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v9, v10))
      {
        v11 = _os_log_pack_size(22);
        v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
        v13 = __error();
        v14 = _os_log_pack_fill(v12, v11, *v13, &_mh_execute_header, "SCDynamicStore/sessions : state data too large (%zu > %zu)", (size_t)v24[0], (size_t)v24[1]);
        *(_DWORD *)v14 = 134218240;
        *(_QWORD *)(v14 + 4) = v7;
        *(_WORD *)(v14 + 12) = 2048;
        *(_QWORD *)(v14 + 14) = 0x8000;
        __SC_log_send(3, v9, v10, v12);
      }
LABEL_19:
      v16 = 0;
      goto LABEL_20;
    }
    v6 = Length;
  }
  v15 = (os_state_data_s *)malloc_type_calloc(1uLL, v7, 0xE247DA85uLL);
  if (!v15)
  {
    v18 = sub_100009350();
    v19 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v18, v19))
    {
      v20 = _os_log_pack_size(2);
      v21 = (char *)v24 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
      v22 = __error();
      *(_WORD *)_os_log_pack_fill(v21, v20, *v22, &_mh_execute_header, "SCDynamicStore/sessions: could not allocate state data") = 0;
      __SC_log_send(3, v18, v19, v21);
    }
    goto LABEL_19;
  }
  v16 = v15;
  v15->var0 = 1;
  v15->var1.var1 = v6;
  __strlcpy_chk(v15->var3, "SCDynamicStore/sessions", 64, 64);
  if (v6 >= 1)
  {
    BytePtr = CFDataGetBytePtr(v24[0]);
    memcpy(v16->var4, BytePtr, v6);
  }
LABEL_20:
  if (v24[0])
    CFRelease(v24[0]);
  return v16;
}

void sub_10000EF9C(int a1, uint64_t a2, CFDictionaryRef theDict)
{
  const void *v4;
  int v6;
  void *value;
  int valuePtr;

  v4 = *(const void **)(a2 + 40);
  if (v4)
  {
    valuePtr = 0;
    value = 0;
    if (CFDictionaryGetValueIfPresent(theDict, v4, (const void **)&value)
      && CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &valuePtr))
    {
      v6 = valuePtr + 1;
    }
    else
    {
      v6 = 1;
    }
    valuePtr = v6;
    value = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    CFDictionarySetValue(theDict, *(const void **)(a2 + 40), value);
    CFRelease(value);
  }
}

uint64_t sub_10000F064(uint64_t result, uint64_t a2)
{
  audit_token_t *v3;
  os_log_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  const char *v10;
  const char *v11[512];

  if (byte_10007D9E8)
  {
    v3 = (audit_token_t *)result;
    bzero(v11, 0x1000uLL);
    result = proc_pidpath_audittoken(v3, v11, 0x1000u);
    if ((int)result >= 1)
    {
      v4 = sub_100009350();
      v5 = _SC_syslog_os_log_mapping(5);
      result = __SC_log_enabled(5, v4, v5);
      if ((_DWORD)result)
      {
        v6 = _os_log_pack_size(22);
        v7 = (char *)&v11[-1] - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
        v8 = __error();
        v9 = _os_log_pack_fill(v7, v6, *v8, &_mh_execute_header, "%s:%s", v10, v11[0]);
        *(_DWORD *)v9 = 136315394;
        *(_QWORD *)(v9 + 4) = a2;
        *(_WORD *)(v9 + 12) = 2080;
        *(_QWORD *)(v9 + 14) = v11;
        return __SC_log_send(5, v4, v5, v7);
      }
    }
  }
  return result;
}

CFDictionaryRef sub_10000F1D0(uint64_t a1, const __CFArray *a2)
{
  __int128 v4;
  __SecTask *v5;
  __SecTask *v6;
  CFDictionaryRef v7;
  CFIndex Code;
  CFErrorDomain Domain;
  os_log_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  audit_token_t token;

  v4 = *(_OWORD *)(a1 + 84);
  *(_OWORD *)token.val = *(_OWORD *)(a1 + 68);
  *(_OWORD *)&token.val[4] = v4;
  v5 = SecTaskCreateWithAuditToken(0, &token);
  if (!v5)
    return 0;
  v6 = v5;
  *(_QWORD *)token.val = 0;
  v7 = SecTaskCopyValuesForEntitlements(v5, a2, (CFErrorRef *)&token);
  if (!v7 && *(_QWORD *)token.val)
  {
    Code = CFErrorGetCode(*(CFErrorRef *)token.val);
    Domain = CFErrorGetDomain(*(CFErrorRef *)token.val);
    if (!CFEqual(Domain, kCFErrorDomainMach) || Code != -536870911 && Code != -536870160)
    {
      v10 = sub_100009350();
      v11 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v10, v11))
      {
        v12 = _os_log_pack_size(32);
        v13 = (char *)&token - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
        v14 = __error();
        v15 = _os_log_pack_fill(v13, v12, *v14, &_mh_execute_header, "SecTaskCopyValuesForEntitlements(%@) failed, error = %@ : %@");
        v16 = *(_QWORD *)token.val;
        v17 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)v15 = 138412802;
        *(_QWORD *)(v15 + 4) = a2;
        *(_WORD *)(v15 + 12) = 2112;
        *(_QWORD *)(v15 + 14) = v16;
        *(_WORD *)(v15 + 22) = 2112;
        *(_QWORD *)(v15 + 24) = v17;
        __SC_log_send(5, v10, v11, v13);
      }
    }
    CFRelease(*(CFTypeRef *)token.val);
  }
  CFRelease(v6);
  return v7;
}

CFArrayRef sub_10000F3A4(__CFString *a1)
{
  __CFArray *v2;
  __CFArray *v3;
  const __CFData *ValueAtIndex;
  regex_t *BytePtr;
  CFArrayRef Copy;
  CFRange v8;

  v2 = sub_10000F474(a1);
  if (v2)
    goto LABEL_4;
  v3 = sub_10000F504(a1);
  if (v3)
  {
    v2 = v3;
    ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(v3, 0);
    BytePtr = (regex_t *)CFDataGetBytePtr(ValueAtIndex);
    regfree(BytePtr);
LABEL_4:
    v8.location = 0;
    v8.length = 2;
    CFArrayReplaceValues(v2, v8, 0, 0);
    Copy = CFArrayCreateCopy(0, v2);
    CFRelease(v2);
    return Copy;
  }
  return 0;
}

CFMutableArrayRef sub_10000F474(void *key)
{
  const __CFArray *Value;

  Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)qword_10007D9C0, key);
  if (Value)
    return CFArrayCreateMutableCopy(0, 0, Value);
  else
    return 0;
}

__CFArray *sub_10000F504(const __CFString *a1)
{
  __CFArray *Mutable;
  __CFData *v3;
  CFArrayRef v4;
  const __CFDictionary *v5;
  const __CFAllocator *v6;
  const __CFDictionary *Copy;
  CFTypeRef cf;
  _QWORD context[2];

  cf = 0;
  Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  v3 = CFDataCreateMutable(0, 32);
  CFDataSetLength(v3, 32);
  if (sub_10000FDF4(a1, v3, &cf))
  {
    CFArrayAppendValue(Mutable, v3);
    v4 = CFArrayCreate(0, 0, 0, &kCFTypeArrayCallBacks);
    CFArrayAppendValue(Mutable, v4);
    CFRelease(v4);
    context[0] = Mutable;
    context[1] = v3;
    v5 = (const __CFDictionary *)qword_10007D9B8;
    v6 = CFGetAllocator((CFTypeRef)qword_10007D9B8);
    Copy = CFDictionaryCreateCopy(v6, v5);
    CFDictionaryApplyFunction(Copy, (CFDictionaryApplierFunction)sub_10001017C, context);
    CFRelease(Copy);
    CFRelease(v3);
  }
  else
  {
    CFRelease(cf);
    CFRelease(v3);
    CFRelease(Mutable);
    return 0;
  }
  return Mutable;
}

uint64_t sub_10000F648(__CFString *a1, const __CFString *a2)
{
  const __CFArray *v4;
  const __CFArray *v5;
  CFIndex Count;
  __CFArray *v7;
  uint64_t v8;
  const __CFData *ValueAtIndex;
  regex_t *BytePtr;
  CFRange v12;

  v4 = sub_10000F474(a1);
  v5 = v4;
  if (!v4)
  {
    v7 = sub_10000F504(a1);
    if (!v7)
      return 0;
    goto LABEL_6;
  }
  Count = CFArrayGetCount(v4);
  v7 = v5;
  if (Count < 3 || (v12.length = Count - 2, v12.location = 2, v7 = v5, !CFArrayContainsValue(v5, v12, a2)))
  {
LABEL_6:
    ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(v7, 0);
    v8 = sub_10000F740(a2, ValueAtIndex);
    if (!v5)
    {
      BytePtr = (regex_t *)CFDataGetBytePtr(ValueAtIndex);
      regfree(BytePtr);
    }
    v5 = v7;
    goto LABEL_9;
  }
  v8 = 1;
LABEL_9:
  CFRelease(v5);
  return v8;
}

uint64_t sub_10000F740(const __CFString *a1, const __CFData *a2)
{
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  CFIndex v6;
  char *v7;
  const UInt8 *BytePtr;
  int v9;
  uint64_t v10;
  os_log_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  os_log_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int *v21;
  uint64_t v22;
  const char *v23;
  char v24[256];
  _BYTE v25[256];

  Length = CFStringGetLength(a1);
  MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x600u);
  v6 = MaximumSizeForEncoding + 1;
  if (MaximumSizeForEncoding < 256)
    v7 = v25;
  else
    v7 = (char *)CFAllocatorAllocate(0, v6, 0);
  if (_SC_cfstring_to_cstring(a1, v7, v6, 1536))
  {
    BytePtr = CFDataGetBytePtr(a2);
    v9 = regexec((const regex_t *)BytePtr, v7, 0, 0, 0);
    v10 = 0;
    if (v9 == 1)
      goto LABEL_11;
    if (!v9)
    {
      v10 = 1;
      goto LABEL_11;
    }
    regerror(v9, (const regex_t *)BytePtr, v24, 0x100uLL);
    v17 = sub_100009350();
    v18 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v17, v18))
    {
      v19 = _os_log_pack_size(12);
      v20 = &v24[-((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
      v21 = __error();
      v22 = _os_log_pack_fill(v20, v19, *v21, &_mh_execute_header, "regexec() failed: %s", v23);
      *(_DWORD *)v22 = 136315138;
      *(_QWORD *)(v22 + 4) = v24;
      __SC_log_send(6, v17, v18, v20);
    }
  }
  else
  {
    v11 = sub_100009350();
    v12 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v11, v12))
    {
      v13 = _os_log_pack_size(2);
      v14 = &v24[-((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
      v15 = __error();
      *(_WORD *)_os_log_pack_fill(v14, v13, *v15, &_mh_execute_header, "could not convert store key to C string") = 0;
      __SC_log_send(6, v11, v12, v14);
    }
  }
  v10 = 0;
LABEL_11:
  if (v7 != v25)
    CFAllocatorDeallocate(0, v7);
  return v10;
}

__CFArray *sub_10000F9B8(__CFString *a1, const void *a2)
{
  const __CFArray *v4;
  __CFArray *result;
  const __CFArray *ValueAtIndex;
  __CFArray *MutableCopy;
  CFIndex Count;
  CFIndex v9;
  CFIndex i;
  const void *v11;

  v4 = sub_10000F474(a1);
  if (v4 || (result = sub_10000F504(a1), (v4 = result) != 0))
  {
    ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(v4, 1);
    MutableCopy = CFArrayCreateMutableCopy(0, 0, ValueAtIndex);
    CFArrayAppendValue(MutableCopy, a2);
    CFArraySetValueAtIndex(v4, 1, MutableCopy);
    CFRelease(MutableCopy);
    CFDictionarySetValue((CFMutableDictionaryRef)qword_10007D9C0, a1, v4);
    Count = CFArrayGetCount(v4);
    if (Count >= 3)
    {
      v9 = Count;
      for (i = 2; i != v9; ++i)
      {
        v11 = CFArrayGetValueAtIndex(v4, i);
        sub_100008EE8(a2, v11);
      }
    }
    CFRelease(v4);
    return (__CFArray *)1;
  }
  return result;
}

void sub_10000FAD0(void *a1, const void *a2)
{
  const __CFArray *v4;
  const __CFArray *v5;
  CFIndex Count;
  CFIndex v7;
  CFIndex i;
  const void *ValueAtIndex;
  const __CFArray *v10;
  CFIndex v11;
  CFIndex v12;
  const __CFArray *MutableCopy;
  CFIndex FirstIndexOfValue;
  const __CFData *v15;
  regex_t *BytePtr;
  CFRange v17;

  v4 = sub_10000F474(a1);
  if (!v4)
    sub_100065734();
  v5 = v4;
  Count = CFArrayGetCount(v4);
  if (Count > 2)
  {
    v7 = Count;
    for (i = 2; i != v7; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v5, i);
      sub_10000BA90(a2, ValueAtIndex);
    }
  }
  v10 = (const __CFArray *)CFArrayGetValueAtIndex(v5, 1);
  v11 = CFArrayGetCount(v10);
  if (v11 < 2)
  {
    v15 = (const __CFData *)CFArrayGetValueAtIndex(v5, 0);
    BytePtr = (regex_t *)CFDataGetBytePtr(v15);
    regfree(BytePtr);
    CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_10007D9C0, a1);
  }
  else
  {
    v12 = v11;
    MutableCopy = CFArrayCreateMutableCopy(0, 0, v10);
    v17.location = 0;
    v17.length = v12;
    FirstIndexOfValue = CFArrayGetFirstIndexOfValue(MutableCopy, v17, a2);
    CFArrayRemoveValueAtIndex(MutableCopy, FirstIndexOfValue);
    CFArraySetValueAtIndex(v5, 1, MutableCopy);
    CFRelease(MutableCopy);
    CFDictionarySetValue((CFMutableDictionaryRef)qword_10007D9C0, a1, v5);
  }
  CFRelease(v5);
}

void sub_10000FC2C(void *a1)
{
  const __CFDictionary *v2;
  const __CFAllocator *v3;
  const __CFDictionary *Copy;

  v2 = (const __CFDictionary *)qword_10007D9C0;
  v3 = CFGetAllocator((CFTypeRef)qword_10007D9C0);
  Copy = CFDictionaryCreateCopy(v3, v2);
  CFDictionaryApplyFunction(Copy, (CFDictionaryApplierFunction)sub_10000FCB0, a1);
  CFRelease(Copy);
}

void sub_10000FCB0(const void *a1, CFArrayRef theArray, const void *a3)
{
  CFIndex Count;
  CFIndex FirstIndexOfValue;
  CFIndex v8;
  __CFArray *MutableCopy;
  const __CFArray *ValueAtIndex;
  CFIndex v11;
  CFIndex v12;
  CFIndex i;
  const void *v14;
  CFRange v15;

  Count = CFArrayGetCount(theArray);
  if (Count >= 3)
  {
    v15.length = Count - 2;
    v15.location = 2;
    FirstIndexOfValue = CFArrayGetFirstIndexOfValue(theArray, v15, a3);
    if (FirstIndexOfValue != -1)
    {
      v8 = FirstIndexOfValue;
      MutableCopy = CFArrayCreateMutableCopy(0, 0, theArray);
      CFArrayRemoveValueAtIndex(MutableCopy, v8);
      ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(MutableCopy, 1);
      v11 = CFArrayGetCount(ValueAtIndex);
      if (v11 >= 1)
      {
        v12 = v11;
        for (i = 0; i != v12; ++i)
        {
          v14 = CFArrayGetValueAtIndex(ValueAtIndex, i);
          sub_10000BA90(v14, a3);
        }
      }
      CFDictionarySetValue((CFMutableDictionaryRef)qword_10007D9C0, a1, MutableCopy);
      CFRelease(MutableCopy);
    }
  }
}

uint64_t sub_10000FDF4(const __CFString *a1, const __CFData *a2, _QWORD *a3)
{
  const __CFString *v5;
  os_log_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  int HasPrefix;
  const char *v12;
  const char *v13;
  int v14;
  uint64_t v15;
  CFIndex v16;
  char *v17;
  os_log_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  regex_t *BytePtr;
  uint64_t v26;
  int v27;
  void *v28;
  uint64_t v30;
  CFIndex v31;
  char v32[256];
  _BYTE v33[256];
  CFRange v34;

  v5 = a1;
  v31 = 0;
  if (!CFStringGetLength(a1))
  {
    v6 = sub_100009350();
    v7 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v6, v7))
    {
      v8 = _os_log_pack_size(2);
      v9 = (char *)&v30 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
      v10 = __error();
      *(_WORD *)_os_log_pack_fill(v9, v8, *v10, &_mh_execute_header, "empty regex pattern") = 0;
      __SC_log_send(5, v6, v7, v9);
    }
  }
  HasPrefix = CFStringHasPrefix(v5, CFSTR("^"));
  if (!CFStringHasSuffix(v5, CFSTR("$")) || CFStringHasSuffix(v5, CFSTR("\\$")))
  {
    v12 = "";
    if (!HasPrefix)
      v12 = "^";
    v13 = "$";
    goto LABEL_9;
  }
  if (!HasPrefix)
  {
    v13 = "";
    v12 = "^";
LABEL_9:
    v5 = CFStringCreateWithFormat(0, 0, CFSTR("%s%@%s"), v12, v5, v13);
    v14 = 1;
    goto LABEL_10;
  }
  v14 = 0;
LABEL_10:
  v34.length = CFStringGetLength(v5);
  v34.location = 0;
  if (CFStringGetBytes(v5, v34, 0x600u, 0, 0, 0, 0, &v31) <= 0)
  {
    v18 = sub_100009350();
    v19 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v18, v19))
    {
      v20 = _os_log_pack_size(12);
      v21 = (char *)&v30 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
      v22 = __error();
      v23 = _os_log_pack_fill(v21, v20, *v22, &_mh_execute_header, "could not get buffer length for \"%@\"");
      *(_DWORD *)v23 = 138412290;
      *(_QWORD *)(v23 + 4) = v5;
      __SC_log_send(5, v18, v19, v21);
    }
    v16 = 256;
    v31 = 256;
  }
  else
  {
    v15 = v31;
    v16 = ++v31;
    if (v15 >= 256)
    {
      v17 = (char *)CFAllocatorAllocate(0, v15 + 1, 0);
      v16 = v31;
      goto LABEL_17;
    }
  }
  v17 = v33;
LABEL_17:
  v24 = _SC_cfstring_to_cstring(v5, v17, v16, 1536);
  if (v14)
    CFRelease(v5);
  if (v24)
  {
    BytePtr = (regex_t *)CFDataGetBytePtr(a2);
    v26 = 1;
    v27 = regcomp(BytePtr, v17, 1);
    if (!v27)
      goto LABEL_24;
    regerror(v27, BytePtr, v32, 0x100uLL);
    v28 = (void *)CFStringCreateWithCString(0, v32, 0x600u);
  }
  else
  {
    v28 = (void *)CFRetain(CFSTR("could not convert pattern to regex string"));
  }
  v26 = 0;
  *a3 = v28;
LABEL_24:
  if (v17 != v33)
    CFAllocatorDeallocate(0, v17);
  return v26;
}

void sub_10001017C(const __CFString *a1, CFDictionaryRef theDict, __CFArray **a3)
{
  __CFArray *v4;
  const __CFData *v5;

  v4 = *a3;
  v5 = a3[1];
  if (CFDictionaryContainsKey(theDict, CFSTR("data")))
  {
    if (sub_10000F740(a1, v5))
      CFArrayAppendValue(v4, a1);
  }
}

uint64_t sub_100010234()
{
  CFIndex Count;
  uint64_t v1;
  const void **v2;
  const void *v3;
  const __CFDictionary *Value;
  const __CFDictionary *v5;
  const __CFArray *v6;
  uint64_t v7;
  CFIndex v8;
  const void **v9;
  CFIndex v10;
  const __CFNumber *v11;
  uint64_t v12;
  const __CFArray *Mutable;
  __CFSet *v14;
  unint64_t v15;
  CFIndex v17;
  uint64_t v18;
  const void **v19;
  uint64_t v20;
  unint64_t v21;
  const void **v23;
  void *v24[2];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  void *values[2];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  CFRange v56;
  CFRange v57;
  CFRange v58;

  Count = CFSetGetCount((CFSetRef)qword_10007D9C8);
  if (!Count)
    goto LABEL_27;
  v1 = Count;
  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  *(_OWORD *)values = 0u;
  v41 = 0u;
  if (Count < 33)
  {
    v2 = (const void **)values;
    CFSetGetValues((CFSetRef)qword_10007D9C8, (const void **)values);
    if (v1 < 1)
      goto LABEL_26;
  }
  else
  {
    v2 = (const void **)CFAllocatorAllocate(0, 8 * Count, 0);
    CFSetGetValues((CFSetRef)qword_10007D9C8, v2);
  }
  v23 = v2;
  do
  {
    v3 = v2[v1 - 1];
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    *(_OWORD *)v24 = 0u;
    v25 = 0u;
    Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_10007D9B8, v3);
    if (Value)
    {
      v5 = Value;
      if (CFDictionaryContainsKey(Value, CFSTR("watchers")))
      {
        v6 = (const __CFArray *)CFDictionaryGetValue(v5, CFSTR("watchers"));
        v7 = CFArrayGetCount(v6);
        if (v7)
        {
          v8 = v7;
          if (v7 < 33)
          {
            v9 = (const void **)v24;
            v57.location = 0;
            v57.length = v7;
            CFArrayGetValues(v6, v57, (const void **)v24);
            if (v8 < 1)
              continue;
          }
          else
          {
            v9 = (const void **)CFAllocatorAllocate(0, 8 * v7, 0);
            v56.location = 0;
            v56.length = v8;
            CFArrayGetValues(v6, v56, v9);
          }
          v10 = v8 - 1;
          do
          {
            v11 = (const __CFNumber *)v9[v10];
            v12 = sub_10000E210(v11);
            Mutable = *(const __CFArray **)(v12 + 32);
            if (!Mutable)
            {
              Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
              *(_QWORD *)(v12 + 32) = Mutable;
            }
            v58.length = CFArrayGetCount(Mutable);
            v58.location = 0;
            if (!CFArrayContainsValue(Mutable, v58, v3))
              CFArrayAppendValue(*(CFMutableArrayRef *)(v12 + 32), v3);
            v14 = (__CFSet *)qword_10007D9E0;
            if (!qword_10007D9E0)
            {
              v14 = CFSetCreateMutable(0, 0, &kCFTypeSetCallBacks);
              qword_10007D9E0 = (uint64_t)v14;
            }
            CFSetAddValue(v14, v11);
            v15 = v10-- + 1;
          }
          while (v15 > 1);
          v2 = v23;
          if (v9 != (const void **)v24)
            CFAllocatorDeallocate(0, v9);
        }
      }
    }
  }
  while (v1-- > 1);
  if (v2 != (const void **)values)
    CFAllocatorDeallocate(0, v2);
LABEL_26:
  CFSetRemoveAllValues((CFMutableSetRef)qword_10007D9C8);
LABEL_27:
  v17 = CFSetGetCount((CFSetRef)qword_10007D9D0);
  if (v17)
  {
    v18 = v17;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    *(_OWORD *)values = 0u;
    v41 = 0u;
    if (v17 >= 33)
    {
      v19 = (const void **)CFAllocatorAllocate(0, 8 * v17, 0);
      CFSetGetValues((CFSetRef)qword_10007D9D0, v19);
      goto LABEL_31;
    }
    v19 = (const void **)values;
    CFSetGetValues((CFSetRef)qword_10007D9D0, (const void **)values);
    if (v18 >= 1)
    {
LABEL_31:
      v20 = v18 - 1;
      do
      {
        sub_10000FC2C((void *)v19[v20]);
        v21 = v20-- + 1;
      }
      while (v21 > 1);
      if (v19 != (const void **)values)
        CFAllocatorDeallocate(0, v19);
    }
    CFSetRemoveAllValues((CFMutableSetRef)qword_10007D9D0);
  }
  CFSetApplyFunction((CFSetRef)qword_10007D9D8, (CFSetApplierFunction)sub_1000105C8, 0);
  CFSetRemoveAllValues((CFMutableSetRef)qword_10007D9D8);
  return 0;
}

void sub_1000105C8(const __CFString *a1)
{
  CFRange v2;
  CFStringRef v3;
  CFStringRef v4;
  uint64_t v5;
  uint64_t v6;
  const __CFArray *v7;
  CFIndex FirstIndexOfValue;
  CFRange v9;
  CFRange v10;
  CFRange v11;

  v2 = CFStringFind(a1, CFSTR(":"), 0);
  v10.location = 0;
  v10.length = v2.location;
  v3 = CFStringCreateWithSubstring(0, a1, v10);
  v11.length = CFStringGetLength(a1) - (v2.location + v2.length);
  v11.location = v2.location + v2.length;
  v4 = CFStringCreateWithSubstring(0, a1, v11);
  v5 = sub_10000E26C((uint64_t)v3);
  if (v5)
  {
    v6 = v5;
    v7 = *(const __CFArray **)(v5 + 48);
    v9.length = CFArrayGetCount(v7);
    v9.location = 0;
    FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v7, v9, v4);
    if (FirstIndexOfValue != -1)
    {
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v6 + 48), FirstIndexOfValue);
      if (!CFArrayGetCount(*(CFArrayRef *)(v6 + 48)))
      {
        CFRelease(*(CFTypeRef *)(v6 + 48));
        *(_QWORD *)(v6 + 48) = 0;
      }
    }
  }
  CFRelease(v3);
  CFRelease(v4);
}

uint64_t sub_1000106DC(uint64_t a1, __CFString *a2, int a3, CFArrayRef *a4)
{
  NSObject *v8;
  CFArrayRef v9;
  int v11;
  const char *v12;
  uint64_t Count;
  __CFArray *Mutable;
  const void **v15;
  const void **v16;
  uint64_t i;
  const __CFString *v18;
  const __CFDictionary *v19;
  _OWORD v20[32];
  uint8_t buf[32];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;

  v8 = sub_100009350();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    v11 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = v11;
    if (a3)
      v12 = "pattern";
    else
      v12 = "key";
    *(_WORD *)&buf[8] = 2080;
    *(_QWORD *)&buf[10] = v12;
    *(_WORD *)&buf[18] = 2112;
    *(_QWORD *)&buf[20] = a2;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "list    : %5u : %s : %@", buf, 0x1Cu);
    if (a3)
      goto LABEL_3;
  }
  else if (a3)
  {
LABEL_3:
    v9 = sub_10000F3A4(a2);
    *a4 = v9;
    if (v9)
      return 0;
    else
      return 1001;
  }
  Count = CFDictionaryGetCount((CFDictionaryRef)qword_10007D9B8);
  Mutable = CFArrayCreateMutable(0, Count, &kCFTypeArrayCallBacks);
  if (Count >= 1)
  {
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    memset(buf, 0, sizeof(buf));
    memset(v20, 0, sizeof(v20));
    if ((unint64_t)Count < 0x41)
    {
      v16 = (const void **)v20;
      v15 = (const void **)buf;
    }
    else
    {
      v15 = (const void **)CFAllocatorAllocate(0, 8 * Count, 0);
      v16 = (const void **)CFAllocatorAllocate(0, 8 * Count, 0);
    }
    CFDictionaryGetKeysAndValues((CFDictionaryRef)qword_10007D9B8, v15, v16);
    for (i = 0; i != Count; ++i)
    {
      v18 = (const __CFString *)v15[i];
      v19 = (const __CFDictionary *)v16[i];
      if ((!CFStringGetLength(a2) || CFStringHasPrefix(v18, a2)) && CFDictionaryContainsKey(v19, CFSTR("data")))
        CFArrayAppendValue(Mutable, v18);
    }
    if (v15 != (const void **)buf)
    {
      CFAllocatorDeallocate(0, v15);
      CFAllocatorDeallocate(0, v16);
    }
  }
  *a4 = CFArrayCreateCopy(0, Mutable);
  CFRelease(Mutable);
  return 0;
}

uint64_t sub_10001099C(int a1, uint64_t a2, unsigned int a3, int a4, _QWORD *a5, _DWORD *a6, int *a7)
{
  CFTypeRef v12;
  CFTypeID TypeID;
  uint64_t v14;
  int v15;
  CFArrayRef v16;
  int v17;
  int v18;
  CFArrayRef v20;
  uint64_t v21;
  CFTypeRef cf;

  v21 = 0;
  cf = 0;
  *a5 = 0;
  *a6 = 0;
  if (!_SCUnserializeString(&cf, 0, a2, a3))
    goto LABEL_7;
  v12 = cf;
  TypeID = CFStringGetTypeID();
  if (!v12 || CFGetTypeID(v12) != TypeID)
  {
    v18 = 1002;
    goto LABEL_9;
  }
  v14 = sub_10000811C(a1);
  if (!v14)
  {
    v18 = 2001;
    goto LABEL_9;
  }
  v20 = 0;
  v15 = sub_1000106DC(*(_QWORD *)(v14 + 56), (__CFString *)cf, a4 != 0, &v20);
  *a7 = v15;
  if (!v15)
  {
    v16 = v20;
    v17 = _SCSerialize(v20, 0, a5, &v21);
    *a6 = v21;
    CFRelease(v16);
    if (!v17)
    {
LABEL_7:
      v18 = 1001;
LABEL_9:
      *a7 = v18;
    }
  }
  if (cf)
    CFRelease(cf);
  return 0;
}

uint64_t sub_100010AE4(uint64_t a1, void *a2, const void *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  CFTypeRef cf;

  cf = 0;
  v6 = sub_100009350();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    sub_100065860(a1, (uint64_t)a2, v6);
  v7 = sub_100008A94(a1, a2, 0, &cf, 1);
  if ((_DWORD)v7 == 1004)
  {
    v8 = sub_100004BD0(a1, a2, a3, 1);
    sub_100010234();
  }
  else
  {
    v8 = v7;
    if (!(_DWORD)v7)
    {
      CFRelease(cf);
      return 1005;
    }
  }
  return v8;
}

uint64_t sub_100010BC8(int a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, _DWORD *a6, int *a7)
{
  CFTypeRef v11;
  CFTypeID TypeID;
  uint64_t v13;
  uint64_t v14;
  int v15;
  CFTypeRef v17;
  CFTypeRef cf;

  v17 = 0;
  cf = 0;
  *a6 = 0;
  *a7 = 0;
  if (!_SCUnserializeString(&cf, 0, a2, a3))
    *a7 = 1001;
  if (_SCUnserializeData(&v17, a4, a5))
  {
    if (*a7)
      goto LABEL_13;
    v11 = cf;
    TypeID = CFStringGetTypeID();
    if (v11 && CFGetTypeID(v11) == TypeID)
    {
      v13 = sub_10000811C(a1);
      if (v13)
      {
        v14 = v13;
        v15 = sub_1000098D0(v13, (__CFString *)cf);
        if (!v15)
          v15 = sub_100010AE4(*(_QWORD *)(v14 + 56), (void *)cf, v17);
      }
      else
      {
        v15 = 2001;
      }
    }
    else
    {
      v15 = 1002;
    }
  }
  else
  {
    v15 = 1001;
  }
  *a7 = v15;
LABEL_13:
  if (cf)
    CFRelease(cf);
  if (v17)
    CFRelease(v17);
  return 0;
}

uint64_t sub_100010CF8(int a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, _DWORD *a6, int *a7)
{
  CFTypeRef v11;
  CFTypeID TypeID;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v18;
  char v19;
  CFTypeRef cf;
  CFTypeRef v21;

  cf = 0;
  v21 = 0;
  *a6 = 0;
  *a7 = 0;
  if (!_SCUnserializeString(&cf, 0, a2, a3))
    *a7 = 1001;
  if (!_SCUnserializeData(&v21, a4, a5))
  {
    v16 = 1001;
LABEL_12:
    *a7 = v16;
    goto LABEL_13;
  }
  if (*a7)
    goto LABEL_13;
  v11 = cf;
  TypeID = CFStringGetTypeID();
  if (!v11 || CFGetTypeID(v11) != TypeID)
  {
    v16 = 1002;
    goto LABEL_12;
  }
  v13 = sub_10000811C(a1);
  if (!v13)
  {
    v16 = 2001;
    goto LABEL_12;
  }
  v14 = v13;
  v15 = sub_1000098D0(v13, (__CFString *)cf);
  if (v15)
  {
    *a7 = v15;
  }
  else
  {
    v18 = *(_QWORD *)(v14 + 56);
    v19 = *(_BYTE *)(v18 + 44);
    *(_BYTE *)(v18 + 44) = 1;
    *a7 = sub_100010AE4(v18, (void *)cf, v21);
    *(_BYTE *)(v18 + 44) = v19;
  }
LABEL_13:
  if (cf)
    CFRelease(cf);
  if (v21)
    CFRelease(v21);
  return 0;
}

uint64_t sub_100010E48(int a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, _QWORD *a6, _DWORD *a7, int *a8)
{
  const __CFDictionary *v14;
  CFTypeRef v15;
  CFTypeID TypeID;
  CFTypeRef v17;
  CFTypeID v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const __CFArray *v22;
  const __CFArray *v23;
  NSObject *v24;
  const __CFDictionary *v25;
  int v26;
  int v27;
  int v29;
  CFIndex Count;
  CFIndex v31;
  CFTypeRef v32;
  uint64_t v33;
  CFTypeRef cf;
  const __CFDictionary *context;
  _BYTE v36[20];
  CFRange v37;
  CFRange v38;

  v33 = 0;
  cf = 0;
  v32 = 0;
  *a6 = 0;
  *a7 = 0;
  *a8 = 0;
  if (a2 && a3 && !_SCUnserialize(&cf, 0, a2, a3))
  {
    *a8 = 1001;
    if (!a4)
      goto LABEL_7;
  }
  else if (!a4)
  {
    goto LABEL_7;
  }
  if (a5 && !_SCUnserialize(&v32, 0, a4, a5))
  {
    v14 = 0;
    goto LABEL_28;
  }
LABEL_7:
  if (*a8)
  {
    v14 = 0;
    goto LABEL_32;
  }
  v15 = cf;
  if (cf && (TypeID = CFArrayGetTypeID(), CFGetTypeID(v15) != TypeID)
    || (v17 = v32) != 0 && (v18 = CFArrayGetTypeID(), CFGetTypeID(v17) != v18))
  {
    v14 = 0;
    v27 = 1002;
    goto LABEL_31;
  }
  v19 = sub_10000811C(a1);
  if (!v19)
  {
    v14 = 0;
    v27 = 2001;
    goto LABEL_31;
  }
  v20 = v19;
  v21 = *(_QWORD *)(v19 + 56);
  v22 = (const __CFArray *)cf;
  v23 = (const __CFArray *)v32;
  v24 = sub_100009350();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
  {
    v29 = *(_DWORD *)(v21 + 40);
    if (v22)
      Count = CFArrayGetCount(v22);
    else
      Count = 0;
    if (v23)
      v31 = CFArrayGetCount(v23);
    else
      v31 = 0;
    LODWORD(context) = 67109632;
    HIDWORD(context) = v29;
    *(_WORD *)v36 = 2048;
    *(_QWORD *)&v36[2] = Count;
    *(_WORD *)&v36[10] = 2048;
    *(_QWORD *)&v36[12] = v31;
    _os_log_debug_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "copy m  : %5u : %ld keys, %ld patterns", (uint8_t *)&context, 0x1Cu);
  }
  context = 0;
  *(_QWORD *)v36 = v21;
  *(_QWORD *)&v36[8] = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (v22)
  {
    v37.length = CFArrayGetCount(v22);
    v37.location = 0;
    CFArrayApplyFunction(v22, v37, (CFArrayApplierFunction)sub_100011250, &context);
  }
  if (v23)
  {
    v38.length = CFArrayGetCount(v23);
    v38.location = 0;
    CFArrayApplyFunction(v23, v38, (CFArrayApplierFunction)sub_10001136C, &context);
  }
  v14 = context;
  v25 = *(const __CFDictionary **)&v36[8];
  if (*(_QWORD *)&v36[8])
  {
    if (context && CFDictionaryGetCount(*(CFDictionaryRef *)&v36[8]) >= 1)
    {
      context = (const __CFDictionary *)v20;
      *(_QWORD *)v36 = CFDictionaryCreateMutableCopy(0, 0, v25);
      CFDictionaryApplyFunction(v14, (CFDictionaryApplierFunction)sub_100011178, &context);
      CFRelease(v25);
      v25 = *(const __CFDictionary **)v36;
    }
    v26 = _SCSerialize(v25, 0, a6, &v33);
    *a7 = v33;
    CFRelease(v25);
    if (!v26)
    {
LABEL_28:
      v27 = 1001;
LABEL_31:
      *a8 = v27;
    }
  }
LABEL_32:
  if (cf)
    CFRelease(cf);
  if (v32)
    CFRelease(v32);
  if (v14)
    CFRelease(v14);
  return 0;
}

void sub_100011178(void *a1, const __CFDictionary *a2, uint64_t a3)
{
  int v5;
  NSObject *v7;

  v5 = sub_100008214(*(_QWORD *)a3, a1, a2);
  if (v5 == 10100 || v5 == 0)
  {
    v7 = sub_100009350();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      sub_100065910();
  }
  else
  {
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a3 + 8), a1);
  }
}

void sub_100011250(void *a1, uint64_t a2)
{
  CFTypeID TypeID;
  void *v5;
  __CFDictionary *Mutable;
  NSObject *v7;
  void *v8;
  void *value;

  v8 = 0;
  TypeID = CFStringGetTypeID();
  if (a1)
  {
    if (CFGetTypeID(a1) == TypeID)
    {
      value = 0;
      if (!sub_100008A94(*(_QWORD *)(a2 + 8), a1, &v8, (const void **)&value, 1))
      {
        CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a2 + 16), a1, value);
        CFRelease(value);
        v5 = v8;
        if (v8)
        {
          Mutable = *(__CFDictionary **)a2;
          if (!*(_QWORD *)a2)
          {
            Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
            *(_QWORD *)a2 = Mutable;
            v5 = v8;
          }
          CFDictionarySetValue(Mutable, a1, v5);
        }
        else
        {
          v7 = sub_100009350();
          if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
            sub_100065980();
        }
      }
    }
  }
}

void sub_10001136C(__CFString *a1, uint64_t *a2)
{
  CFTypeID TypeID;
  const __CFArray *v5;
  CFArrayRef theArray;
  CFRange v7;

  TypeID = CFStringGetTypeID();
  if (a1 && CFGetTypeID(a1) == TypeID)
  {
    theArray = 0;
    if (!sub_1000106DC(a2[1], a1, 1, &theArray))
    {
      v5 = theArray;
      v7.length = CFArrayGetCount(theArray);
      v7.location = 0;
      CFArrayApplyFunction(v5, v7, (CFArrayApplierFunction)sub_100011250, a2);
      CFRelease(theArray);
    }
  }
}

void sub_100011430(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x12u);
}

uint64_t sub_10001145C(int a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, uint64_t a6, _DWORD *a7, int *a8)
{
  CFTypeRef v12;
  CFTypeID TypeID;
  uint64_t v14;
  uint64_t v15;
  int v16;
  CFTypeRef cf;
  CFTypeRef v19;

  cf = 0;
  v19 = 0;
  *a7 = 0;
  *a8 = 0;
  if (!_SCUnserializeString(&cf, 0, a2, a3))
    *a8 = 1001;
  if (_SCUnserializeData(&v19, a4, a5))
  {
    if (*a8)
      goto LABEL_13;
    v12 = cf;
    TypeID = CFStringGetTypeID();
    if (v12 && CFGetTypeID(v12) == TypeID)
    {
      v14 = sub_10000811C(a1);
      if (v14)
      {
        v15 = v14;
        v16 = sub_1000098D0(v14, (__CFString *)cf);
        if (!v16)
          v16 = sub_100004BD0(*(_QWORD *)(v15 + 56), (void *)cf, v19, 0);
      }
      else
      {
        v16 = 2001;
      }
    }
    else
    {
      v16 = 1002;
    }
  }
  else
  {
    v16 = 1001;
  }
  *a8 = v16;
LABEL_13:
  if (cf)
    CFRelease(cf);
  if (v19)
    CFRelease(v19);
  return 0;
}

CFTypeID sub_100011590(const void *a1, uint64_t a2)
{
  CFTypeID result;
  CFTypeID v5;

  result = CFStringGetTypeID();
  if (a1)
  {
    v5 = result;
    result = CFGetTypeID(a1);
    if (result == v5)
      return sub_1000116F0(a2, a1, 1);
  }
  return result;
}

CFTypeID sub_100011640(void *a1, uint64_t a2)
{
  CFTypeID result;
  CFTypeID v5;

  result = CFStringGetTypeID();
  if (a1)
  {
    v5 = result;
    result = CFGetTypeID(a1);
    if (result == v5)
      return sub_1000119EC(a2, a1, 1);
  }
  return result;
}

uint64_t sub_1000116F0(uint64_t a1, const void *a2, int a3)
{
  NSObject *v6;
  const __CFDictionary *Value;
  const __CFDictionary *v8;
  const __CFDictionary *MutableCopy;
  const void *v10;
  const void *v11;
  CFStringRef v12;
  const char *v14;
  int v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  const void *v21;

  v6 = sub_100009350();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v14 = "*remove";
    v15 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)buf = 136315650;
    if (!a3)
      v14 = "remove ";
    v17 = v14;
    v18 = 1024;
    v19 = v15;
    v20 = 2112;
    v21 = a2;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%s : %5u : %@", buf, 0x1Cu);
  }
  Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_10007D9B8, a2);
  if (!Value)
    return 1004;
  v8 = Value;
  if (!CFDictionaryContainsKey(Value, CFSTR("data")))
    return 1004;
  MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v8);
  CFSetAddValue((CFMutableSetRef)qword_10007D9C8, a2);
  CFSetAddValue((CFMutableSetRef)qword_10007D9D0, a2);
  v10 = CFDictionaryGetValue(MutableCopy, CFSTR("session"));
  if (v10)
  {
    v11 = v10;
    CFDictionaryRemoveValue(MutableCopy, CFSTR("session"));
    v12 = CFStringCreateWithFormat(0, 0, CFSTR("%@:%@"), v11, a2);
    CFSetAddValue((CFMutableSetRef)qword_10007D9D8, v12);
    CFRelease(v12);
  }
  CFDictionaryRemoveValue(MutableCopy, CFSTR("data"));
  if (CFDictionaryGetCount(MutableCopy) < 1)
    CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_10007D9B8, a2);
  else
    CFDictionarySetValue((CFMutableDictionaryRef)qword_10007D9B8, a2, MutableCopy);
  CFRelease(MutableCopy);
  if (!a3)
    sub_100010234();
  return 0;
}

uint64_t sub_1000118F8(int a1, uint64_t a2, unsigned int a3, int *a4)
{
  CFTypeRef v6;
  CFTypeID TypeID;
  uint64_t v8;
  uint64_t v9;
  int v10;
  CFTypeRef cf;

  cf = 0;
  if (_SCUnserializeString(&cf, 0, a2, a3))
  {
    v6 = cf;
    TypeID = CFStringGetTypeID();
    if (v6 && CFGetTypeID(v6) == TypeID)
    {
      v8 = sub_10000811C(a1);
      if (v8)
      {
        v9 = v8;
        v10 = sub_1000098D0(v8, (__CFString *)cf);
        if (!v10)
          v10 = sub_1000116F0(*(_QWORD *)(v9 + 56), cf, 0);
      }
      else
      {
        v10 = 2001;
      }
    }
    else
    {
      v10 = 1002;
    }
  }
  else
  {
    v10 = 1001;
  }
  *a4 = v10;
  if (cf)
    CFRelease(cf);
  return 0;
}

uint64_t sub_1000119EC(uint64_t a1, void *a2, int a3)
{
  NSObject *v6;
  const __CFDictionary *v7;
  const char *v9;
  int v10;
  void *value;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  void *v17;

  value = 0;
  v6 = sub_100009350();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v9 = "*notify";
    v10 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)buf = 136315650;
    if (!a3)
      v9 = "notify ";
    v13 = v9;
    v14 = 1024;
    v15 = v10;
    v16 = 2112;
    v17 = a2;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%s : %5u : %@", buf, 0x1Cu);
  }
  v7 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_10007D9B8, a2);
  if (v7 && CFDictionaryGetValueIfPresent(v7, CFSTR("data"), (const void **)&value))
  {
    sub_100004BD0(a1, a2, value, 1);
    if (!a3)
      goto LABEL_7;
  }
  else
  {
    _SCSerialize(kCFBooleanTrue, &value, 0, 0);
    sub_100004BD0(a1, a2, value, 1);
    sub_1000116F0(a1, a2, 1);
    CFRelease(value);
    if (!a3)
LABEL_7:
      sub_100010234();
  }
  return 0;
}

uint64_t sub_100011B6C(int a1, uint64_t a2, unsigned int a3, int *a4)
{
  CFTypeRef v6;
  CFTypeID TypeID;
  uint64_t v8;
  uint64_t v9;
  int v10;
  CFTypeRef cf;

  cf = 0;
  if (_SCUnserializeString(&cf, 0, a2, a3))
  {
    v6 = cf;
    TypeID = CFStringGetTypeID();
    if (v6 && CFGetTypeID(v6) == TypeID)
    {
      v8 = sub_10000811C(a1);
      if (v8)
      {
        v9 = v8;
        v10 = sub_1000098D0(v8, (__CFString *)cf);
        if (!v10)
        {
          sub_1000119EC(*(_QWORD *)(v9 + 56), (void *)cf, 0);
          v10 = 0;
        }
      }
      else
      {
        v10 = 2001;
      }
    }
    else
    {
      v10 = 1002;
    }
  }
  else
  {
    v10 = 1001;
  }
  *a4 = v10;
  if (cf)
    CFRelease(cf);
  return 0;
}

uint64_t sub_100011C64(uint64_t result, uint64_t a2)
{
  void *v3;
  const __CFArray *v4;
  CFRange v5;

  if (!*(_DWORD *)(a2 + 28))
  {
    v3 = (void *)result;
    v4 = *(const __CFArray **)(a2 + 16);
    if (!v4
      || (v5.length = CFArrayGetCount(*(CFArrayRef *)(a2 + 16)),
          v5.location = 0,
          result = CFArrayContainsValue(v4, v5, v3),
          !(_DWORD)result))
    {
      result = sub_100011D08(*(_QWORD *)a2, v3, *(unsigned __int8 *)(a2 + 24), 1);
      *(_DWORD *)(a2 + 28) = result;
    }
  }
  return result;
}

uint64_t sub_100011D08(uint64_t a1, void *a2, int a3, int a4)
{
  NSObject *v8;
  uint64_t result;
  CFNumberRef v10;
  const char *v11;
  int v12;
  const char *v13;
  int v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  void *v21;

  v8 = sub_100009350();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    v11 = "*watch-";
    v12 = *(_DWORD *)(a1 + 40);
    if (!a4)
      v11 = "watch- ";
    v14 = 136315906;
    v15 = v11;
    v16 = 1024;
    v17 = v12;
    if (a3)
      v13 = "pattern";
    else
      v13 = "key";
    v18 = 2080;
    v19 = v13;
    v20 = 2112;
    v21 = a2;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s : %5u : %s : %@", (uint8_t *)&v14, 0x26u);
    if (a3)
      goto LABEL_3;
  }
  else if (a3)
  {
LABEL_3:
    result = sub_100011E88(*(const __CFArray **)(a1 + 176), a2);
    if ((_DWORD)result)
      return result;
    v10 = CFNumberCreate(0, kCFNumberIntType, (const void *)(a1 + 40));
    sub_10000FAD0(a2, v10);
    goto LABEL_13;
  }
  result = sub_100011E88(*(const __CFArray **)(a1 + 168), a2);
  if ((_DWORD)result)
    return result;
  v10 = CFNumberCreate(0, kCFNumberIntType, (const void *)(a1 + 40));
  sub_10000BA90(v10, a2);
LABEL_13:
  CFRelease(v10);
  return 0;
}

uint64_t sub_100011E88(const __CFArray *a1, const void *a2)
{
  CFIndex FirstIndexOfValue;
  CFRange v6;

  if (!a1)
    return 1004;
  v6.length = CFArrayGetCount(a1);
  v6.location = 0;
  FirstIndexOfValue = CFArrayGetFirstIndexOfValue(a1, v6, a2);
  if (FirstIndexOfValue == -1)
    return 1004;
  CFArrayRemoveValueAtIndex(a1, FirstIndexOfValue);
  return 0;
}

uint64_t sub_100011F18(int a1, uint64_t a2, unsigned int a3, int a4, int *a5)
{
  CFTypeRef v8;
  CFTypeID TypeID;
  uint64_t v10;
  int v11;
  CFTypeRef cf;

  cf = 0;
  if (_SCUnserializeString(&cf, 0, a2, a3))
  {
    v8 = cf;
    TypeID = CFStringGetTypeID();
    if (v8 && CFGetTypeID(v8) == TypeID)
    {
      v10 = sub_10000811C(a1);
      if (v10)
        v11 = sub_100011D08(*(_QWORD *)(v10 + 56), (void *)cf, a4 != 0, 0);
      else
        v11 = 2001;
    }
    else
    {
      v11 = 1002;
    }
  }
  else
  {
    v11 = 1001;
  }
  *a5 = v11;
  if (cf)
    CFRelease(cf);
  return 0;
}

uint64_t sub_100012010(uint64_t a1, CFArrayRef *a2)
{
  uint64_t v3;
  const __CFArray *v4;

  v3 = sub_10000811C(*(_DWORD *)(a1 + 40));
  v4 = *(const __CFArray **)(v3 + 32);
  if (v4)
  {
    *a2 = v4;
    *(_QWORD *)(v3 + 32) = 0;
  }
  else
  {
    *a2 = CFArrayCreate(0, 0, 0, &kCFTypeArrayCallBacks);
  }
  return 0;
}

uint64_t sub_10001209C(int a1, _QWORD *a2, _DWORD *a3, int *a4)
{
  uint64_t v7;
  CFArrayRef v8;
  int v9;
  int v10;
  CFArrayRef v12;
  uint64_t v13;

  v7 = sub_10000811C(a1);
  *a2 = 0;
  *a3 = 0;
  if (!v7)
  {
    v10 = 2001;
    goto LABEL_5;
  }
  v12 = 0;
  v13 = 0;
  sub_100012010(*(_QWORD *)(v7 + 56), &v12);
  *a4 = 0;
  v8 = v12;
  v9 = _SCSerialize(v12, 0, a2, &v13);
  *a3 = v13;
  CFRelease(v8);
  if (!v9)
  {
    v10 = 1001;
LABEL_5:
    *a4 = v10;
  }
  return 0;
}

uint64_t sub_100012164(uint64_t a1)
{
  const void *v2;
  CFNumberRef v3;

  if (*(_DWORD *)(a1 + 48))
    return 2003;
  v2 = (const void *)(a1 + 40);
  if (*(_QWORD *)(sub_10000811C(*(_DWORD *)(a1 + 40)) + 32))
  {
    if (!qword_10007D9E0)
      qword_10007D9E0 = (uint64_t)CFSetCreateMutable(0, 0, &kCFTypeSetCallBacks);
    v3 = CFNumberCreate(0, kCFNumberIntType, v2);
    CFSetAddValue((CFMutableSetRef)qword_10007D9E0, v3);
    CFRelease(v3);
  }
  return 0;
}

uint64_t sub_100012228(int a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v7;
  int v8;
  int v9;
  _DWORD *v10;
  int v11;
  int v12;

  v7 = sub_10000811C(a1);
  v8 = fileport_makefd(a2);
  mach_port_deallocate(mach_task_self_, a2);
  if (v8 < 0)
  {
    *a4 = *__error();
    return 0;
  }
  v9 = fcntl(v8, 3, 0);
  if (v9 == -1 || fcntl(v8, 4, v9 | 4u) == -1)
  {
    v12 = *__error();
LABEL_8:
    *a4 = v12;
    goto LABEL_9;
  }
  if (!v7)
  {
    v12 = 2001;
    goto LABEL_8;
  }
  v10 = *(_DWORD **)(v7 + 56);
  v11 = sub_100012164((uint64_t)v10);
  *a4 = v11;
  if (v11)
  {
LABEL_9:
    close(v8);
    return 0;
  }
  v10[12] = 3;
  v10[48] = v8;
  v10[49] = a3;
  return 0;
}

uint64_t sub_100012348(int a1, int *a2)
{
  uint64_t v3;
  int v4;

  v3 = sub_10000811C(a1);
  if (v3)
  {
    sub_10000A3D4(*(_DWORD **)(v3 + 56));
    v4 = 0;
  }
  else
  {
    v4 = 2001;
  }
  *a2 = v4;
  return 0;
}

uint64_t sub_1000123BC()
{
  int v0;
  FILE *v1;
  FILE *v2;
  int v3;
  int v4;
  CFDictionaryRef v5;
  const __CFData *Data;
  const UInt8 *BytePtr;
  size_t Length;
  int v9;
  const __CFData *v10;
  const __CFData *v11;
  const UInt8 *v12;
  size_t v13;
  os_log_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;

  unlink("/var/tmp/configd-state");
  v0 = open("/var/tmp/configd-state", 3585, 420);
  if (v0 == -1)
    return 1001;
  v1 = fdopen(v0, "w");
  if (!v1)
    return 1001;
  v2 = v1;
  SCPrint(1, v1, CFSTR("Main [plug-in] thread :\n\n"));
  CFRunLoopGetCurrent();
  SCPrint(1, v2, CFSTR("%@\n"));
  sub_10000E36C((uint64_t)v2);
  fclose(v2);
  unlink("/var/tmp/configd-store.plist");
  v3 = open("/var/tmp/configd-store.plist", 3585, 420);
  if (v3 == -1)
    return 1001;
  v4 = v3;
  v5 = sub_1000126F8((const __CFDictionary *)qword_10007D9B8);
  Data = CFPropertyListCreateData(0, v5, kCFPropertyListXMLFormat_v1_0, 0, 0);
  CFRelease(v5);
  if (!Data)
  {
    v15 = sub_100009350();
    v16 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v15, v16))
    {
LABEL_12:
      close(v4);
      return 1001;
    }
LABEL_11:
    v17 = _os_log_pack_size(2);
    v20 = (char *)&v22 - ((__chkstk_darwin(v17, v18, v19) + 15) & 0xFFFFFFFFFFFFFFF0);
    v21 = *__error();
    *(_WORD *)_os_log_pack_fill(v20, v17, v21, &_mh_execute_header, "CFPropertyListCreateData() failed") = 0;
    __SC_log_send(5, v15, v16, v20);
    goto LABEL_12;
  }
  BytePtr = CFDataGetBytePtr(Data);
  Length = CFDataGetLength(Data);
  write(v4, BytePtr, Length);
  close(v4);
  CFRelease(Data);
  unlink("/var/tmp/configd-pattern.plist");
  v9 = open("/var/tmp/configd-pattern.plist", 3585, 420);
  if (v9 != -1)
  {
    v4 = v9;
    v10 = CFPropertyListCreateData(0, (CFPropertyListRef)qword_10007D9C0, kCFPropertyListXMLFormat_v1_0, 0, 0);
    if (v10)
    {
      v11 = v10;
      v12 = CFDataGetBytePtr(v10);
      v13 = CFDataGetLength(v11);
      write(v4, v12, v13);
      close(v4);
      CFRelease(v11);
      return 0;
    }
    v15 = sub_100009350();
    v16 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v15, v16))
      goto LABEL_12;
    goto LABEL_11;
  }
  return 1001;
}

CFDictionaryRef sub_1000126F8(const __CFDictionary *a1)
{
  uint64_t Count;
  CFIndex v3;
  const void **v4;
  const void **v5;
  const void **v6;
  CFDictionaryRef v7;
  uint64_t v8;
  __int128 v9;
  const void **v10;
  const void *Value;
  const void *v12;
  os_log_t v13;
  uint64_t v14;
  const void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  uint64_t v24;
  __int128 v26;
  __int128 *v27;
  const void *v28;
  _OWORD v29[50];
  const void *v30[100];
  const void *v31[101];

  memset(v31, 0, 512);
  memset(v30, 0, 512);
  memset(v29, 0, 512);
  Count = CFDictionaryGetCount(a1);
  v3 = Count;
  if (Count <= 0)
    return CFDictionaryCreate(0, v31, v30, Count, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if ((unint64_t)Count < 0x65)
  {
    v4 = v31;
    v6 = v30;
    v5 = (const void **)v29;
  }
  else
  {
    v4 = (const void **)CFAllocatorAllocate(0, 8 * Count, 0);
    v5 = (const void **)CFAllocatorAllocate(0, 8 * v3, 0);
    v6 = (const void **)CFAllocatorAllocate(0, 8 * v3, 0);
  }
  bzero(v6, 8 * v3);
  CFDictionaryGetKeysAndValues(a1, v4, v5);
  v8 = 0;
  *(_QWORD *)&v9 = 138412290;
  v26 = v9;
  v10 = v4;
  do
  {
    Value = CFDictionaryGetValue((CFDictionaryRef)v5[v8], CFSTR("data"));
    if (Value)
    {
      v12 = Value;
      v28 = 0;
      v6[v8] = CFDictionaryCreateMutableCopy(0, 0, (CFDictionaryRef)v5[v8]);
      if (_SCUnserialize(&v28, v12, 0, 0))
      {
        CFDictionarySetValue((CFMutableDictionaryRef)v6[v8], CFSTR("data"), v28);
        CFRelease(v28);
      }
      else
      {
        v13 = sub_100009350();
        v14 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v13, v14))
        {
          v15 = v10;
          v16 = _os_log_pack_size(12);
          v27 = &v26;
          v19 = (char *)&v26 - ((__chkstk_darwin(v16, v17, v18) + 15) & 0xFFFFFFFFFFFFFFF0);
          v20 = __error();
          v21 = v16;
          v10 = v15;
          v22 = _os_log_pack_fill(v19, v21, *v20, &_mh_execute_header, "_SCUnserialize() failed, key=%@");
          v23 = v15[v8];
          *(_DWORD *)v22 = v26;
          *(_QWORD *)(v22 + 4) = v23;
          __SC_log_send(5, v13, v14, v19);
        }
      }
    }
    else
    {
      v6[v8] = CFRetain(v5[v8]);
    }
    ++v8;
  }
  while (v3 != v8);
  v7 = CFDictionaryCreate(0, v10, v6, v3, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  v24 = 0;
  do
    CFRelease(v6[v24++]);
  while (v3 != v24);
  if (v10 != v31)
  {
    CFAllocatorDeallocate(0, v10);
    CFAllocatorDeallocate(0, v5);
    CFAllocatorDeallocate(0, v6);
  }
  return v7;
}

uint64_t sub_100012B14(int a1, _DWORD *a2)
{
  uint64_t v3;
  int v4;
  uint64_t result;

  v3 = sub_10000811C(a1);
  if (!v3)
    return 2001;
  if (!sub_10000E5A0(v3))
    return 1003;
  v4 = sub_1000123BC();
  result = 0;
  *a2 = v4;
  return result;
}

uint64_t sub_100012B94(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 20);
  if ((v1 - 20030) >= 0xFFFFFFE2)
    return (uint64_t)*(&off_100075CD0 + 5 * (v1 - 20000) + 5);
  else
    return 0;
}

uint64_t sub_100012C10(uint64_t result, uint64_t a2)
{
  int v3;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 60)
  {
    v3 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_10;
  }
  if (*(_BYTE *)(result + 39) != 1 || *(_DWORD *)(result + 40) != *(_DWORD *)(result + 52))
  {
    v3 = -300;
    goto LABEL_9;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  result = sub_10001099C(*(_DWORD *)(result + 12), *(_QWORD *)(result + 28), *(_DWORD *)(result + 40), *(_DWORD *)(result + 56), (_QWORD *)(a2 + 28), (_DWORD *)(a2 + 52), (int *)(a2 + 56));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_10:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 60;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_100012D2C(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  NDR_record_t v5;
  int v6;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 76)
  {
    v6 = -304;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v6;
    v5 = NDR_record;
    goto LABEL_12;
  }
  if (*(_BYTE *)(result + 39) != 1
    || *(_BYTE *)(result + 55) != 1
    || (v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 68))
    || (v4 = *(_DWORD *)(result + 56), v4 != *(_DWORD *)(result + 72)))
  {
    v6 = -300;
    goto LABEL_11;
  }
  result = sub_100010BC8(*(_DWORD *)(result + 12), *(_QWORD *)(result + 28), v3, *(_QWORD *)(result + 44), v4, (_DWORD *)(a2 + 36), (int *)(a2 + 40));
  *(_DWORD *)(a2 + 32) = result;
  v5 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 44;
    return result;
  }
LABEL_12:
  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

uint64_t sub_100012E34(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  NDR_record_t v5;
  int v6;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 80)
  {
    v6 = -304;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v6;
    v5 = NDR_record;
    goto LABEL_12;
  }
  if (*(_BYTE *)(result + 39) != 1
    || *(_BYTE *)(result + 55) != 1
    || (v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 68))
    || (v4 = *(_DWORD *)(result + 56), v4 != *(_DWORD *)(result + 72)))
  {
    v6 = -300;
    goto LABEL_11;
  }
  result = sub_10001145C(*(_DWORD *)(result + 12), *(_QWORD *)(result + 28), v3, *(_QWORD *)(result + 44), v4, *(unsigned int *)(result + 76), (_DWORD *)(a2 + 36), (int *)(a2 + 40));
  *(_DWORD *)(a2 + 32) = result;
  v5 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 44;
    return result;
  }
LABEL_12:
  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

uint64_t sub_100012F40(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  NDR_record_t v4;
  int v5;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    v5 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v5;
    v4 = NDR_record;
    goto LABEL_10;
  }
  if (*(_BYTE *)(result + 39) != 1 || (v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 52)))
  {
    v5 = -300;
    goto LABEL_9;
  }
  result = sub_1000118F8(*(_DWORD *)(result + 12), *(_QWORD *)(result + 28), v3, (int *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  v4 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_10:
  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

uint64_t sub_100013024(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  NDR_record_t v5;
  int v6;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 76)
  {
    v6 = -304;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v6;
    v5 = NDR_record;
    goto LABEL_12;
  }
  if (*(_BYTE *)(result + 39) != 1
    || *(_BYTE *)(result + 55) != 1
    || (v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 68))
    || (v4 = *(_DWORD *)(result + 56), v4 != *(_DWORD *)(result + 72)))
  {
    v6 = -300;
    goto LABEL_11;
  }
  result = sub_100010CF8(*(_DWORD *)(result + 12), *(_QWORD *)(result + 28), v3, *(_QWORD *)(result + 44), v4, (_DWORD *)(a2 + 36), (int *)(a2 + 40));
  *(_DWORD *)(a2 + 32) = result;
  v5 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 44;
    return result;
  }
LABEL_12:
  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

uint64_t sub_10001312C(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  NDR_record_t v4;
  int v5;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    v5 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v5;
    v4 = NDR_record;
    goto LABEL_10;
  }
  if (*(_BYTE *)(result + 39) != 1 || (v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 52)))
  {
    v5 = -300;
    goto LABEL_9;
  }
  result = sub_100011B6C(*(_DWORD *)(result + 12), *(_QWORD *)(result + 28), v3, (int *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  v4 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_10:
  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

uint64_t sub_100013210(uint64_t result, uint64_t a2)
{
  int v3;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 76)
  {
    v3 = -304;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_12;
  }
  if (*(_BYTE *)(result + 39) != 1
    || *(_BYTE *)(result + 55) != 1
    || *(_DWORD *)(result + 40) != *(_DWORD *)(result + 68)
    || *(_DWORD *)(result + 56) != *(_DWORD *)(result + 72))
  {
    v3 = -300;
    goto LABEL_11;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  result = sub_100010E48(*(_DWORD *)(result + 12), *(_QWORD *)(result + 28), *(_DWORD *)(result + 40), *(_QWORD *)(result + 44), *(_DWORD *)(result + 56), (_QWORD *)(a2 + 28), (_DWORD *)(a2 + 52), (int *)(a2 + 56));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_12:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 60;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_10001334C(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  NDR_record_t v4;
  int v5;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 60)
  {
    v5 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v5;
    v4 = NDR_record;
    goto LABEL_10;
  }
  if (*(_BYTE *)(result + 39) != 1 || (v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 52)))
  {
    v5 = -300;
    goto LABEL_9;
  }
  result = sub_100011F18(*(_DWORD *)(result + 12), *(_QWORD *)(result + 28), v3, *(_DWORD *)(result + 56), (int *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  v4 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_10:
  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

_DWORD *sub_100013434(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  result = (_DWORD *)sub_10001209C(result[3], (_QWORD *)(a2 + 28), (_DWORD *)(a2 + 52), (int *)(a2 + 56));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
LABEL_6:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 60;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

_DWORD *sub_100013510(_DWORD *result, uint64_t a2)
{
  NDR_record_t v3;

  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    v3 = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_100012348(result[3], (int *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
    v3 = NDR_record;
    if (!(_DWORD)result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

uint64_t sub_1000135BC(uint64_t result, uint64_t a2)
{
  NDR_record_t v3;
  int v4;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 52)
  {
    v4 = -304;
LABEL_8:
    *(_DWORD *)(a2 + 32) = v4;
    v3 = NDR_record;
    goto LABEL_9;
  }
  if (*(unsigned __int16 *)(result + 38) << 16 != 1114112)
  {
    v4 = -300;
    goto LABEL_8;
  }
  result = sub_100012228(*(_DWORD *)(result + 12), *(unsigned int *)(result + 28), *(_DWORD *)(result + 48), (int *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  v3 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_9:
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_100013698(_DWORD *result, uint64_t a2)
{
  NDR_record_t v3;

  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    v3 = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_100012B14(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
    v3 = NDR_record;
    if (!(_DWORD)result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

os_log_t sub_100013744()
{
  os_log_t result;

  result = (os_log_t)qword_10007DAA8;
  if (!qword_10007DAA8)
  {
    result = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
    qword_10007DAA8 = (uint64_t)result;
  }
  return result;
}

void sub_1000137B4(uint64_t a1, uint64_t a2)
{
  CFAbsoluteTime Current;
  CFStringRef v5;

  if (qword_10007DAC0 && CFArrayGetCount((CFArrayRef)qword_10007DAC0) <= 99)
  {
    Current = CFAbsoluteTimeGetCurrent();
    v5 = CFStringCreateWithFormat(0, 0, CFSTR("%12.8f: %s %s"), *(_QWORD *)&Current, a1, a2);
    if (qword_10007DAC0)
    {
      if (CFArrayGetCount((CFArrayRef)qword_10007DAC0) <= 99)
      {
        CFArrayAppendValue((CFMutableArrayRef)qword_10007DAC0, v5);
        byte_10007DAC8 = 1;
      }
    }
    CFRelease(v5);
  }
}

uint64_t sub_1000138A8(int a1)
{
  uint64_t v1;
  os_log_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int *v6;
  uint64_t v7;
  int *v8;
  char *v9;
  const char *v11;

  v1 = socket(a1, 2, 0);
  if ((_DWORD)v1 == -1)
  {
    v2 = (os_log_t)qword_10007DAA8;
    if (!qword_10007DAA8)
    {
      v2 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
      qword_10007DAA8 = (uint64_t)v2;
    }
    v3 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v2, v3))
    {
      v4 = _os_log_pack_size(12);
      v5 = (char *)&v11 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
      v6 = __error();
      v7 = _os_log_pack_fill(v5, v4, *v6, &_mh_execute_header, "socket() failed: %s", v11);
      v8 = __error();
      v9 = strerror(*v8);
      *(_DWORD *)v7 = 136315138;
      *(_QWORD *)(v7 + 4) = v9;
      __SC_log_send(3, v2, v3, v5);
    }
  }
  return v1;
}

void sub_1000139F8(const char *a1)
{
  xpc_object_t v2;

  if (a1)
  {
    v2 = xpc_array_create(0, 0);
    xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, a1);
    network_config_check_interface_settings(v2);
    xpc_release(v2);
  }
  else
  {
    network_config_check_interface_settings(0);
  }
}

void sub_100013AA0()
{
  dispatch_async((dispatch_queue_t)qword_10007DAB0, &stru_1000761C0);
}

void sub_100013AF4(id a1)
{
  sub_100013B38();
}

void sub_100013B38()
{
  os_log_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int *v6;
  dispatch_time_t v7;
  uint64_t v8;

  v0 = (os_log_t)qword_10007DAA8;
  if (!qword_10007DAA8)
  {
    v0 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
    qword_10007DAA8 = (uint64_t)v0;
  }
  v1 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v0, v1))
  {
    v2 = _os_log_pack_size(2);
    v5 = (char *)&v8 - ((__chkstk_darwin(v2, v3, v4) + 15) & 0xFFFFFFFFFFFFFFF0);
    v6 = __error();
    *(_WORD *)_os_log_pack_fill(v5, v2, *v6, &_mh_execute_header, "prime() called") = 0;
    __SC_log_send(7, v0, v1, v5);
  }
  _SCDynamicStoreCacheOpen(qword_10007D9F8);
  qword_10007DAC0 = (uint64_t)CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  sub_100014AA0((uint64_t)"prime", 1);
  _SCDynamicStoreCacheCommitChanges(qword_10007D9F8);
  _SCDynamicStoreCacheClose(qword_10007D9F8);
  byte_10007D9F0 = 1;
  sub_100014CD8();
  if (qword_10007DAC0 && byte_10007DAC8)
  {
    SCDynamicStoreSetValue(0, CFSTR("Plugin:KernelEventMonitor"), (CFPropertyListRef)qword_10007DAC0);
    byte_10007DAC8 = 0;
  }
  dispatch_resume((dispatch_object_t)qword_10007DAB8);
  v7 = dispatch_time(0, 6000000000);
  dispatch_after_f(v7, (dispatch_queue_t)qword_10007DAB0, 0, (dispatch_function_t)sub_100014E28);
}

void sub_100013D08(__CFBundle *a1, int a2)
{
  os_log_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  os_log_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  CFStringRef Identifier;
  int v19;
  int v20;
  os_log_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  os_log_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int *v35;
  os_log_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  int *v42;
  uint64_t v43;
  int *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  char *v56;
  os_log_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  int *v63;
  const char *v64[4];
  int v65;
  _QWORD handler[4];
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  int v71;

  if (a2)
    byte_10007DA00 = 1;
  v3 = (os_log_t)qword_10007DAA8;
  if (!qword_10007DAA8)
  {
    v3 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
    qword_10007DAA8 = (uint64_t)v3;
  }
  v71 = 0;
  v70 = 0;
  v69 = 0;
  v4 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v3, v4))
  {
    v5 = _os_log_pack_size(2);
    v8 = (char *)v64 - ((__chkstk_darwin(v5, v6, v7) + 15) & 0xFFFFFFFFFFFFFFF0);
    v9 = __error();
    *(_WORD *)_os_log_pack_fill(v8, v5, *v9, &_mh_execute_header, "load() called") = 0;
    __SC_log_send(7, v3, v4, v8);
  }
  v10 = (os_log_t)qword_10007DAA8;
  if (!qword_10007DAA8)
  {
    v10 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
    qword_10007DAA8 = (uint64_t)v10;
  }
  v11 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v10, v11))
  {
    v12 = _os_log_pack_size(12);
    v15 = (char *)v64 - ((__chkstk_darwin(v12, v13, v14) + 15) & 0xFFFFFFFFFFFFFFF0);
    v16 = __error();
    v17 = _os_log_pack_fill(v15, v12, *v16, &_mh_execute_header, "  bundle ID = %@");
    Identifier = CFBundleGetIdentifier(a1);
    *(_DWORD *)v17 = 138412290;
    *(_QWORD *)(v17 + 4) = Identifier;
    __SC_log_send(7, v10, v11, v15);
  }
  if (sub_1000144B4())
  {
    v19 = socket(32, 3, 1);
    if (v19 == -1)
    {
      v36 = (os_log_t)qword_10007DAA8;
      if (!qword_10007DAA8)
      {
        v36 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
        qword_10007DAA8 = (uint64_t)v36;
      }
      v37 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v36, v37))
      {
        v38 = _os_log_pack_size(12);
        v41 = (char *)v64 - ((__chkstk_darwin(v38, v39, v40) + 15) & 0xFFFFFFFFFFFFFFF0);
        v42 = __error();
        v43 = _os_log_pack_fill(v41, v38, *v42, &_mh_execute_header, "could not open event socket, socket() failed: %s", v64[0]);
        v44 = __error();
        v45 = strerror(*v44);
        *(_DWORD *)v43 = 136315138;
        *(_QWORD *)(v43 + 4) = v45;
        __SC_log_send(3, v36, v37, v41);
      }
      goto LABEL_38;
    }
    v20 = v19;
    v70 = 0x100000001;
    v71 = 0;
    if (ioctl(v19, 0x800C6502uLL, &v70))
    {
      v21 = (os_log_t)qword_10007DAA8;
      if (!qword_10007DAA8)
      {
        v21 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
        qword_10007DAA8 = (uint64_t)v21;
      }
      v22 = _SC_syslog_os_log_mapping(3);
      if (!__SC_log_enabled(3, v21, v22))
        goto LABEL_37;
      v23 = _os_log_pack_size(12);
      v26 = (char *)v64 - ((__chkstk_darwin(v23, v24, v25) + 15) & 0xFFFFFFFFFFFFFFF0);
      v27 = *__error();
      v28 = _os_log_pack_fill(v26, v23, v27, &_mh_execute_header, "could not establish event filter, ioctl() failed: %s");
    }
    else
    {
      v68 = 1;
      if (ioctl(v20, 0x8004667EuLL, &v68))
      {
        v21 = (os_log_t)qword_10007DAA8;
        if (!qword_10007DAA8)
        {
          v21 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
          qword_10007DAA8 = (uint64_t)v21;
        }
        v22 = _SC_syslog_os_log_mapping(3);
        if (!__SC_log_enabled(3, v21, v22))
          goto LABEL_37;
        v46 = _os_log_pack_size(12);
        v26 = (char *)v64 - ((__chkstk_darwin(v46, v47, v48) + 15) & 0xFFFFFFFFFFFFFFF0);
        v49 = *__error();
        v28 = _os_log_pack_fill(v26, v46, v49, &_mh_execute_header, "could not set non-blocking io, ioctl() failed: %s");
      }
      else
      {
        v69 = 0x40000;
        if (!setsockopt(v20, 0xFFFF, 4098, &v69, 4u))
        {
          qword_10007DAB0 = (uint64_t)dispatch_queue_create("com.apple.SystemConfiguration.KernelEventMonitor", 0);
          qword_10007DAB8 = (uint64_t)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_read, v20, 0, (dispatch_queue_t)qword_10007DAB0);
          handler[0] = _NSConcreteStackBlock;
          handler[1] = 0x40000000;
          handler[2] = sub_100014614;
          handler[3] = &unk_1000761E0;
          v67 = v20;
          dispatch_source_set_cancel_handler((dispatch_source_t)qword_10007DAB8, handler);
          v64[0] = (const char *)_NSConcreteStackBlock;
          v64[1] = (const char *)0x40000000;
          v64[2] = (const char *)sub_10001465C;
          v64[3] = (const char *)&unk_100076200;
          v65 = v20;
          dispatch_source_set_event_handler((dispatch_source_t)qword_10007DAB8, v64);
          return;
        }
        v21 = (os_log_t)qword_10007DAA8;
        if (!qword_10007DAA8)
        {
          v21 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
          qword_10007DAA8 = (uint64_t)v21;
        }
        v22 = _SC_syslog_os_log_mapping(3);
        if (!__SC_log_enabled(3, v21, v22))
          goto LABEL_37;
        v50 = _os_log_pack_size(12);
        v26 = (char *)v64 - ((__chkstk_darwin(v50, v51, v52) + 15) & 0xFFFFFFFFFFFFFFF0);
        v53 = *__error();
        v28 = _os_log_pack_fill(v26, v50, v53, &_mh_execute_header, "could not set socket receive buffer, setsockopt() failed: %s");
      }
    }
    v54 = v28;
    v55 = __error();
    v56 = strerror(*v55);
    *(_DWORD *)v54 = 136315138;
    *(_QWORD *)(v54 + 4) = v56;
    __SC_log_send(3, v21, v22, v26);
LABEL_37:
    close(v20);
LABEL_38:
    v57 = (os_log_t)qword_10007DAA8;
    if (!qword_10007DAA8)
    {
      v57 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
      qword_10007DAA8 = (uint64_t)v57;
    }
    v58 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v57, v58))
    {
      v59 = _os_log_pack_size(2);
      v62 = (char *)v64 - ((__chkstk_darwin(v59, v60, v61) + 15) & 0xFFFFFFFFFFFFFFF0);
      v63 = __error();
      *(_WORD *)_os_log_pack_fill(v62, v59, *v63, &_mh_execute_header, "kernel event monitor disabled") = 0;
      __SC_log_send(3, v57, v58, v62);
    }
    CFRelease((CFTypeRef)qword_10007D9F8);
    return;
  }
  v29 = (os_log_t)qword_10007DAA8;
  if (!qword_10007DAA8)
  {
    v29 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
    qword_10007DAA8 = (uint64_t)v29;
  }
  v30 = _SC_syslog_os_log_mapping(3);
  if (__SC_log_enabled(3, v29, v30))
  {
    v31 = _os_log_pack_size(2);
    v34 = (char *)v64 - ((__chkstk_darwin(v31, v32, v33) + 15) & 0xFFFFFFFFFFFFFFF0);
    v35 = __error();
    *(_WORD *)_os_log_pack_fill(v34, v31, *v35, &_mh_execute_header, "kernel event monitor disabled") = 0;
    __SC_log_send(3, v29, v30, v34);
  }
}

uint64_t sub_1000144B4()
{
  uint64_t result;
  os_log_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int *v5;
  uint64_t v6;
  int v7;
  const char *v8;
  const char *v9;

  qword_10007D9F8 = (uint64_t)SCDynamicStoreCreate(0, CFSTR("Kernel Event Monitor plug-in"), 0, 0);
  if (qword_10007D9F8)
    return 1;
  v1 = (os_log_t)qword_10007DAA8;
  if (!qword_10007DAA8)
  {
    v1 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
    qword_10007DAA8 = (uint64_t)v1;
  }
  v2 = _SC_syslog_os_log_mapping(3);
  result = __SC_log_enabled(3, v1, v2);
  if ((_DWORD)result)
  {
    v3 = _os_log_pack_size(12);
    v4 = (char *)&v9 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    v5 = __error();
    v6 = _os_log_pack_fill(v4, v3, *v5, &_mh_execute_header, "SCDynamicStoreCreate() failed: %s", v9);
    v7 = SCError();
    v8 = SCErrorString(v7);
    *(_DWORD *)v6 = 136315138;
    *(_QWORD *)(v6 + 4) = v8;
    __SC_log_send(3, v1, v2, v4);
    return 0;
  }
  return result;
}

uint64_t sub_100014614(uint64_t a1)
{
  return close(*(_DWORD *)(a1 + 32));
}

void sub_10001465C(uint64_t a1)
{
  os_log_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;

  if (!sub_10001478C(*(_DWORD *)(a1 + 32)))
  {
    v1 = (os_log_t)qword_10007DAA8;
    if (!qword_10007DAA8)
    {
      v1 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
      qword_10007DAA8 = (uint64_t)v1;
    }
    v2 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v1, v2))
    {
      v3 = _os_log_pack_size(2);
      v6 = (char *)&v8 - ((__chkstk_darwin(v3, v4, v5) + 15) & 0xFFFFFFFFFFFFFFF0);
      v7 = __error();
      *(_WORD *)_os_log_pack_fill(v6, v3, *v7, &_mh_execute_header, "kernel event monitor disabled") = 0;
      __SC_log_send(3, v1, v2, v6);
    }
    dispatch_source_cancel((dispatch_source_t)qword_10007DAB8);
  }
}

uint64_t sub_10001478C(int a1)
{
  ssize_t v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  os_log_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  int *v15;
  char *v16;
  os_log_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int *v23;
  _OWORD v24[64];

  memset(v24, 0, 512);
  v1 = recv(a1, v24, 0x400uLL, 0);
  if (v1 == -1)
  {
    v6 = (os_log_t)qword_10007DAA8;
    if (!qword_10007DAA8)
    {
      v6 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
      qword_10007DAA8 = (uint64_t)v6;
    }
    v7 = _SC_syslog_os_log_mapping(5);
    result = __SC_log_enabled(5, v6, v7);
    if ((_DWORD)result)
    {
      v9 = _os_log_pack_size(12);
      v12 = (char *)v24 - ((__chkstk_darwin(v9, v10, v11) + 15) & 0xFFFFFFFFFFFFFFF0);
      v13 = __error();
      v14 = _os_log_pack_fill(v12, v9, *v13, &_mh_execute_header, "recv() failed: %s", *(const char **)&v24[0]);
      v15 = __error();
      v16 = strerror(*v15);
      *(_DWORD *)v14 = 136315138;
      *(_QWORD *)(v14 + 4) = v16;
      __SC_log_send(5, v6, v7, v12);
      return 0;
    }
  }
  else
  {
    v2 = v1;
    _SCDynamicStoreCacheOpen(qword_10007D9F8);
    if (v2 >= 1)
    {
      v3 = 0;
      v4 = (const char *)v24;
      while (1)
      {
        v5 = v3 + *(unsigned int *)((char *)v24 + v3);
        if (v5 > v2)
          break;
        if (*((_DWORD *)v4 + 1) == 1 && *((_DWORD *)v4 + 2) == 1)
        {
          sub_100014F48(v4);
          v5 = v3 + *(unsigned int *)((char *)v24 + v3);
        }
        v4 = (char *)v24 + v5;
        v3 = v5;
        if (v5 >= v2)
          goto LABEL_18;
      }
      v17 = (os_log_t)qword_10007DAA8;
      if (!qword_10007DAA8)
      {
        v17 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
        qword_10007DAA8 = (uint64_t)v17;
      }
      v18 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v17, v18))
      {
        v19 = _os_log_pack_size(2);
        v22 = (char *)v24 - ((__chkstk_darwin(v19, v20, v21) + 15) & 0xFFFFFFFFFFFFFFF0);
        v23 = __error();
        *(_WORD *)_os_log_pack_fill(v22, v19, *v23, &_mh_execute_header, "missed SYSPROTO_EVENT event, buffer not big enough") = 0;
        __SC_log_send(5, v17, v18, v22);
      }
    }
LABEL_18:
    _SCDynamicStoreCacheCommitChanges(qword_10007D9F8);
    _SCDynamicStoreCacheClose(qword_10007D9F8);
    sub_100014CD8();
    result = 1;
    if (qword_10007DAC0)
    {
      if (byte_10007DAC8)
      {
        SCDynamicStoreSetValue(0, CFSTR("Plugin:KernelEventMonitor"), (CFPropertyListRef)qword_10007DAC0);
        byte_10007DAC8 = 0;
        return 1;
      }
    }
  }
  return result;
}

void sub_100014AA0(uint64_t a1, int a2)
{
  const __CFArray *v4;
  ifaddrs *v5;
  int v6;
  sockaddr *ifa_addr;
  unsigned __int8 *ifa_data;
  BOOL v9;
  char v10;
  int *v11;
  char *v12;
  os_log_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  int *v21;
  char *v22;
  ifaddrs *v23;

  v23 = 0;
  if (getifaddrs(&v23) == -1)
  {
    v11 = __error();
    v12 = strerror(*v11);
    sub_1000137B4((uint64_t)"getifaddrs", (uint64_t)v12);
    v13 = (os_log_t)qword_10007DAA8;
    if (!qword_10007DAA8)
    {
      v13 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
      qword_10007DAA8 = (uint64_t)v13;
    }
    v14 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v13, v14))
    {
      v15 = _os_log_pack_size(12);
      v18 = (char *)&v23 - ((__chkstk_darwin(v15, v16, v17) + 15) & 0xFFFFFFFFFFFFFFF0);
      v19 = __error();
      v20 = _os_log_pack_fill(v18, v15, *v19, &_mh_execute_header, "getifaddrs() failed: %s", (const char *)v23);
      v21 = __error();
      v22 = strerror(*v21);
      *(_DWORD *)v20 = 136315138;
      *(_QWORD *)(v20 + 4) = v22;
      __SC_log_send(5, v13, v14, v18);
    }
  }
  else
  {
    v4 = sub_100017088();
    v5 = v23;
    if (v23)
    {
      v6 = 0;
      do
      {
        ifa_addr = v5->ifa_addr;
        if (ifa_addr && ifa_addr->sa_family == 18)
        {
          ifa_data = (unsigned __int8 *)v5->ifa_data;
          v9 = !ifa_data || *ifa_data != 254;
          if (sub_10001731C(v4, v5->ifa_name))
          {
            sub_1000137B4(a1, (uint64_t)v5->ifa_name);
            v10 = !v9;
            if (a2)
              v10 = 1;
            if ((v10 & 1) == 0)
              sub_1000139F8(v5->ifa_name);
            v6 = 1;
          }
        }
        v5 = v5->ifa_next;
      }
      while (v5);
      if (v6)
        sub_1000171CC(v4);
    }
    CFRelease(v4);
    if (a2)
    {
      sub_100017F24(v23, 0);
      sub_100018BBC(v23, 0);
    }
    freeifaddrs(v23);
  }
  if (a2)
    network_config_check_interface_settings(0);
}

void sub_100014CD8()
{
  uint32_t v0;
  uint32_t v1;
  os_log_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int *v6;
  _DWORD *v7;
  int v8;

  if (byte_10007D9F0)
  {
    v0 = notify_post("com.apple.system.config.network_change");
    if (v0)
    {
      v1 = v0;
      v2 = (os_log_t)qword_10007DAA8;
      if (!qword_10007DAA8)
      {
        v2 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
        qword_10007DAA8 = (uint64_t)v2;
      }
      v3 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v2, v3))
      {
        v4 = _os_log_pack_size(8);
        v5 = (char *)&v8 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
        v6 = __error();
        v7 = (_DWORD *)_os_log_pack_fill(v5, v4, *v6, &_mh_execute_header, "notify_post() failed: error=%u", v8);
        *v7 = 67109120;
        v7[1] = v1;
        __SC_log_send(5, v2, v3, v5);
      }
    }
    byte_10007D9F0 = 0;
  }
}

void sub_100014E28()
{
  dispatch_time_t v0;
  char __str[32];

  snprintf(__str, 0x20uLL, "update %d (of %d)", ++dword_10007DACC, 20);
  _SCDynamicStoreCacheOpen(qword_10007D9F8);
  sub_100014AA0((uint64_t)__str, 0);
  _SCDynamicStoreCacheCommitChanges(qword_10007D9F8);
  _SCDynamicStoreCacheClose(qword_10007D9F8);
  if (qword_10007DAC0 && byte_10007DAC8)
  {
    SCDynamicStoreSetValue(0, CFSTR("Plugin:KernelEventMonitor"), (CFPropertyListRef)qword_10007DAC0);
    byte_10007DAC8 = 0;
  }
  if (dword_10007DACC > 19)
  {
    if (qword_10007DAC0)
    {
      CFRelease((CFTypeRef)qword_10007DAC0);
      qword_10007DAC0 = 0;
    }
  }
  else
  {
    v0 = dispatch_time(0, 6000000000);
    dispatch_after_f(v0, (dispatch_queue_t)qword_10007DAB0, 0, (dispatch_function_t)sub_100014E28);
  }
}

void sub_100014F48(const char *a1)
{
  unint64_t v2;
  os_log_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  unsigned int v11;
  os_log_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int *v18;
  uint64_t v19;
  const char *v20;
  unsigned int v21;
  os_log_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  int *v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  os_log_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  int *v39;
  uint64_t v40;
  unsigned int v41;
  os_log_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  int *v48;
  uint64_t v49;
  unsigned int v50;
  os_log_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  int *v57;
  uint64_t v58;
  os_log_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  int *v65;
  uint64_t v66;
  const char *v67;
  unsigned int v68;
  unsigned int v69;
  os_log_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int *v76;
  uint64_t v77;
  os_log_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  int *v84;
  uint64_t v85;
  os_log_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  int *v92;
  uint64_t v93;
  os_log_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  int *v100;
  uint64_t v101;
  os_log_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  int *v108;
  uint64_t v109;
  os_log_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  int *v116;
  uint64_t v117;
  os_log_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  int *v124;
  uint64_t v125;
  os_log_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  int *v132;
  uint64_t v133;
  unsigned int v134;
  os_log_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  int *v141;
  uint64_t v142;
  unsigned int *v143;
  uint64_t v144;
  CFIndex v145;
  os_log_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  int *v152;
  uint64_t v153;
  const char *v154;
  const char *__str;
  int v156;
  uint64_t v157;

  v2 = *(unsigned int *)a1 - 24;
  switch(*((_DWORD *)a1 + 3))
  {
    case 1:
      switch(*((_DWORD *)a1 + 5))
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
          if (v2 < 0x34)
            goto LABEL_121;
          snprintf((char *)&__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
          v3 = (os_log_t)qword_10007DAA8;
          if (!qword_10007DAA8)
          {
            v3 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
            qword_10007DAA8 = (uint64_t)v3;
          }
          v4 = _SC_syslog_os_log_mapping(6);
          if (__SC_log_enabled(6, v3, v4))
          {
            v5 = _os_log_pack_size(18);
            v8 = (char *)&v154 - ((__chkstk_darwin(v5, v6, v7) + 15) & 0xFFFFFFFFFFFFFFF0);
            v9 = __error();
            v10 = _os_log_pack_fill(v8, v5, *v9, &_mh_execute_header, "Process IPv4 address change: %s: %u", v154, (_DWORD)__str);
            v11 = *((_DWORD *)a1 + 5);
            *(_DWORD *)v10 = 136315394;
            *(_QWORD *)(v10 + 4) = &__str;
            *(_WORD *)(v10 + 12) = 1024;
            *(_DWORD *)(v10 + 14) = v11;
            __SC_log_send(6, v3, v4, v8);
          }
          sub_100017F24(0, (const char *)&__str);
          goto LABEL_76;
        case 7:
          if (v2 < 0x20 || v2 < (unint64_t)*((unsigned __int8 *)a1 + 52) + 32)
            goto LABEL_121;
          snprintf((char *)&__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
          v70 = (os_log_t)qword_10007DAA8;
          if (!qword_10007DAA8)
          {
            v70 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
            qword_10007DAA8 = (uint64_t)v70;
          }
          v71 = _SC_syslog_os_log_mapping(6);
          if (__SC_log_enabled(6, v70, v71))
          {
            v72 = _os_log_pack_size(12);
            v75 = (char *)&v154 - ((__chkstk_darwin(v72, v73, v74) + 15) & 0xFFFFFFFFFFFFFFF0);
            v76 = __error();
            v77 = _os_log_pack_fill(v75, v72, *v76, &_mh_execute_header, "Process ARP collision: %s", v154);
            *(_DWORD *)v77 = 136315138;
            *(_QWORD *)(v77 + 4) = &__str;
            __SC_log_send(6, v70, v71, v75);
          }
          sub_100018770((char *)&__str, *((_DWORD *)a1 + 12), *((unsigned __int8 *)a1 + 52), (uint64_t)(a1 + 53));
          break;
        case 9:
          if (v2 < 0x18)
            goto LABEL_121;
          snprintf((char *)&__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
          v78 = (os_log_t)qword_10007DAA8;
          if (!qword_10007DAA8)
          {
            v78 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
            qword_10007DAA8 = (uint64_t)v78;
          }
          v79 = _SC_syslog_os_log_mapping(6);
          if (__SC_log_enabled(6, v78, v79))
          {
            v80 = _os_log_pack_size(12);
            v83 = (char *)&v154 - ((__chkstk_darwin(v80, v81, v82) + 15) & 0xFFFFFFFFFFFFFFF0);
            v84 = __error();
            v85 = _os_log_pack_fill(v83, v80, *v84, &_mh_execute_header, "Process router ARP failure: %s", v154);
            *(_DWORD *)v85 = 136315138;
            *(_QWORD *)(v85 + 4) = &__str;
            __SC_log_send(6, v78, v79, v83);
          }
          sub_100018994((char *)&__str);
          break;
        case 0xA:
          if (v2 < 0x18)
            goto LABEL_121;
          snprintf((char *)&__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
          v86 = (os_log_t)qword_10007DAA8;
          if (!qword_10007DAA8)
          {
            v86 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
            qword_10007DAA8 = (uint64_t)v86;
          }
          v87 = _SC_syslog_os_log_mapping(6);
          if (__SC_log_enabled(6, v86, v87))
          {
            v88 = _os_log_pack_size(12);
            v91 = (char *)&v154 - ((__chkstk_darwin(v88, v89, v90) + 15) & 0xFFFFFFFFFFFFFFF0);
            v92 = __error();
            v93 = _os_log_pack_fill(v91, v88, *v92, &_mh_execute_header, "Process router ARP alive: %s", v154);
            *(_DWORD *)v93 = 136315138;
            *(_QWORD *)(v93 + 4) = &__str;
            __SC_log_send(6, v86, v87, v91);
          }
          sub_100018B64((char *)&__str);
          break;
        default:
          return;
      }
      return;
    case 2:
      switch(*((_DWORD *)a1 + 5))
      {
        case 9:
          if (v2 < 0x18)
            goto LABEL_121;
          snprintf((char *)&__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
          v94 = (os_log_t)qword_10007DAA8;
          if (!qword_10007DAA8)
          {
            v94 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
            qword_10007DAA8 = (uint64_t)v94;
          }
          v95 = _SC_syslog_os_log_mapping(6);
          if (__SC_log_enabled(6, v94, v95))
          {
            v96 = _os_log_pack_size(12);
            v99 = (char *)&v154 - ((__chkstk_darwin(v96, v97, v98) + 15) & 0xFFFFFFFFFFFFFFF0);
            v100 = __error();
            v101 = _os_log_pack_fill(v99, v96, *v100, &_mh_execute_header, "Process interface attach: %s", v154);
            *(_DWORD *)v101 = 136315138;
            *(_QWORD *)(v101 + 4) = &__str;
            __SC_log_send(6, v94, v95, v99);
          }
          sub_100017468((char *)&__str);
          break;
        case 0xA:
          if (v2 < 0x18)
            goto LABEL_121;
          snprintf((char *)&__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
          v102 = (os_log_t)qword_10007DAA8;
          if (!qword_10007DAA8)
          {
            v102 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
            qword_10007DAA8 = (uint64_t)v102;
          }
          v103 = _SC_syslog_os_log_mapping(6);
          if (__SC_log_enabled(6, v102, v103))
          {
            v104 = _os_log_pack_size(12);
            v107 = (char *)&v154 - ((__chkstk_darwin(v104, v105, v106) + 15) & 0xFFFFFFFFFFFFFFF0);
            v108 = __error();
            v109 = _os_log_pack_fill(v107, v104, *v108, &_mh_execute_header, "Process interface detaching: %s", v154);
            *(_DWORD *)v109 = 136315138;
            *(_QWORD *)(v109 + 4) = &__str;
            __SC_log_send(6, v102, v103, v107);
          }
          sub_100016C18((const char *)&__str);
          break;
        case 0xB:
          if (v2 < 0x18)
            goto LABEL_121;
          snprintf((char *)&__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
          v110 = (os_log_t)qword_10007DAA8;
          if (!qword_10007DAA8)
          {
            v110 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
            qword_10007DAA8 = (uint64_t)v110;
          }
          v111 = _SC_syslog_os_log_mapping(6);
          if (__SC_log_enabled(6, v110, v111))
          {
            v112 = _os_log_pack_size(12);
            v115 = (char *)&v154 - ((__chkstk_darwin(v112, v113, v114) + 15) & 0xFFFFFFFFFFFFFFF0);
            v116 = __error();
            v117 = _os_log_pack_fill(v115, v112, *v116, &_mh_execute_header, "Process interface detach: %s", v154);
            *(_DWORD *)v117 = 136315138;
            *(_QWORD *)(v117 + 4) = &__str;
            __SC_log_send(6, v110, v111, v115);
          }
          sub_100017508((const char *)&__str);
          break;
        case 0xC:
        case 0xD:
          if (v2 < 0x18)
            goto LABEL_121;
          snprintf((char *)&__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
          v12 = (os_log_t)qword_10007DAA8;
          if (!qword_10007DAA8)
          {
            v12 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
            qword_10007DAA8 = (uint64_t)v12;
          }
          v13 = _SC_syslog_os_log_mapping(6);
          if (__SC_log_enabled(6, v12, v13))
          {
            v14 = _os_log_pack_size(22);
            v17 = (char *)&v154 - ((__chkstk_darwin(v14, v15, v16) + 15) & 0xFFFFFFFFFFFFFFF0);
            v18 = __error();
            v19 = _os_log_pack_fill(v17, v14, *v18, &_mh_execute_header, "Process interface link %s: %s", v154, __str);
            if (*((_DWORD *)a1 + 5) == 13)
              v20 = "up";
            else
              v20 = "down";
            *(_DWORD *)v19 = 136315394;
            *(_QWORD *)(v19 + 4) = v20;
            *(_WORD *)(v19 + 12) = 2080;
            *(_QWORD *)(v19 + 14) = &__str;
            __SC_log_send(6, v12, v13, v17);
          }
          sub_100016DB4((char *)&__str, 0, 0);
          break;
        case 0xE:
        case 0xF:
          if (v2 < 0x20)
            goto LABEL_121;
          snprintf((char *)&__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
          v59 = (os_log_t)qword_10007DAA8;
          if (!qword_10007DAA8)
          {
            v59 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
            qword_10007DAA8 = (uint64_t)v59;
          }
          v60 = _SC_syslog_os_log_mapping(6);
          if (__SC_log_enabled(6, v59, v60))
          {
            v61 = _os_log_pack_size(34);
            v64 = (char *)&v154 - ((__chkstk_darwin(v61, v62, v63) + 15) & 0xFFFFFFFFFFFFFFF0);
            v65 = __error();
            v66 = _os_log_pack_fill(v64, v61, *v65, &_mh_execute_header, "Process protocol %s: %s (pf=%u, n=%u)", v154, __str, v156, v157);
            v67 = "detach";
            v68 = *((_DWORD *)a1 + 12);
            v69 = *((_DWORD *)a1 + 13);
            if (*((_DWORD *)a1 + 5) == 14)
              v67 = "attach";
            *(_DWORD *)v66 = 136315906;
            *(_QWORD *)(v66 + 4) = v67;
            *(_WORD *)(v66 + 12) = 2080;
            *(_QWORD *)(v66 + 14) = &__str;
            *(_WORD *)(v66 + 22) = 1024;
            *(_DWORD *)(v66 + 24) = v68;
            *(_WORD *)(v66 + 28) = 1024;
            *(_DWORD *)(v66 + 30) = v69;
            __SC_log_send(6, v59, v60, v64);
          }
          break;
        case 0x12:
          if (v2 < 0x18)
            goto LABEL_121;
          snprintf((char *)&__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
          v118 = (os_log_t)qword_10007DAA8;
          if (!qword_10007DAA8)
          {
            v118 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
            qword_10007DAA8 = (uint64_t)v118;
          }
          v119 = _SC_syslog_os_log_mapping(6);
          if (__SC_log_enabled(6, v118, v119))
          {
            v120 = _os_log_pack_size(12);
            v123 = (char *)&v154 - ((__chkstk_darwin(v120, v121, v122) + 15) & 0xFFFFFFFFFFFFFFF0);
            v124 = __error();
            v125 = _os_log_pack_fill(v123, v120, *v124, &_mh_execute_header, "Process interface idle: %s", v154);
            *(_DWORD *)v125 = 136315138;
            *(_QWORD *)(v125 + 4) = &__str;
            __SC_log_send(6, v118, v119, v123);
          }
          sub_100017744((const char *)&__str);
          break;
        case 0x14:
          if (v2 < 0x18)
            goto LABEL_121;
          snprintf((char *)&__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
          v126 = (os_log_t)qword_10007DAA8;
          if (!qword_10007DAA8)
          {
            v126 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
            qword_10007DAA8 = (uint64_t)v126;
          }
          v127 = _SC_syslog_os_log_mapping(6);
          if (__SC_log_enabled(6, v126, v127))
          {
            v128 = _os_log_pack_size(18);
            v131 = (char *)&v154 - ((__chkstk_darwin(v128, v129, v130) + 15) & 0xFFFFFFFFFFFFFFF0);
            v132 = __error();
            v133 = _os_log_pack_fill(v131, v128, *v132, &_mh_execute_header, "Process interface quality: %s (q=%d)", v154, (_DWORD)__str);
            v134 = *((_DWORD *)a1 + 12);
            *(_DWORD *)v133 = 136315394;
            *(_QWORD *)(v133 + 4) = &__str;
            *(_WORD *)(v133 + 12) = 1024;
            *(_DWORD *)(v133 + 14) = v134;
            __SC_log_send(6, v126, v127, v131);
          }
          sub_100016690((char *)&__str, *((_DWORD *)a1 + 12));
          break;
        case 0x18:
          if (v2 < 0x18)
            goto LABEL_121;
          snprintf((char *)&__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
          v135 = (os_log_t)qword_10007DAA8;
          if (!qword_10007DAA8)
          {
            v135 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
            qword_10007DAA8 = (uint64_t)v135;
          }
          v136 = _SC_syslog_os_log_mapping(6);
          if (__SC_log_enabled(6, v135, v136))
          {
            v137 = _os_log_pack_size(12);
            v140 = (char *)&v154 - ((__chkstk_darwin(v137, v138, v139) + 15) & 0xFFFFFFFFFFFFFFF0);
            v141 = __error();
            v142 = _os_log_pack_fill(v140, v137, *v141, &_mh_execute_header, "Process interface link issues: %s", v154);
            *(_DWORD *)v142 = 136315138;
            *(_QWORD *)(v142 + 4) = &__str;
            __SC_log_send(6, v135, v136, v140);
          }
          v144 = *((_QWORD *)a1 + 10);
          v143 = (unsigned int *)(a1 + 80);
          if (v144 ^ qword_10007DAD0 | v143[2] ^ dword_10007DAD8)
            v145 = 12;
          else
            v145 = 0;
          sub_1000169B4((char *)&__str, *((_QWORD *)v143 - 1), (const UInt8 *)v143 - 32, 20, (const UInt8 *)v143, v145);
          break;
        case 0x19:
          if (v2 < 0x18)
            goto LABEL_121;
          snprintf((char *)&__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
          v146 = (os_log_t)qword_10007DAA8;
          if (!qword_10007DAA8)
          {
            v146 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
            qword_10007DAA8 = (uint64_t)v146;
          }
          v147 = _SC_syslog_os_log_mapping(6);
          if (__SC_log_enabled(6, v146, v147))
          {
            v148 = _os_log_pack_size(12);
            v151 = (char *)&v154 - ((__chkstk_darwin(v148, v149, v150) + 15) & 0xFFFFFFFFFFFFFFF0);
            v152 = __error();
            v153 = _os_log_pack_fill(v151, v148, *v152, &_mh_execute_header, "Process interface delegation change: %s", v154);
            *(_DWORD *)v153 = 136315138;
            *(_QWORD *)(v153 + 4) = &__str;
            __SC_log_send(6, v146, v147, v151);
          }
          sub_1000175D0((char *)&__str);
          break;
        default:
          return;
      }
      return;
    case 6:
      v21 = *((_DWORD *)a1 + 5);
      if (v21 - 1 >= 5)
      {
        if (v21 == 7)
        {
          if (v2 < 0xA8)
            goto LABEL_121;
          snprintf((char *)&__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
          v51 = (os_log_t)qword_10007DAA8;
          if (!qword_10007DAA8)
          {
            v51 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
            qword_10007DAA8 = (uint64_t)v51;
          }
          v52 = _SC_syslog_os_log_mapping(6);
          if (__SC_log_enabled(6, v51, v52))
          {
            v53 = _os_log_pack_size(12);
            v56 = (char *)&v154 - ((__chkstk_darwin(v53, v54, v55) + 15) & 0xFFFFFFFFFFFFFFF0);
            v57 = __error();
            v58 = _os_log_pack_fill(v56, v53, *v57, &_mh_execute_header, "Process NAT64 prefix request: %s", v154);
            *(_DWORD *)v58 = 136315138;
            *(_QWORD *)(v58 + 4) = &__str;
            __SC_log_send(6, v51, v52, v56);
          }
          sub_100019AB0((char *)&__str);
        }
      }
      else
      {
        if (v2 < 0xA8)
          goto LABEL_121;
        snprintf((char *)&__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
        v22 = (os_log_t)qword_10007DAA8;
        if (!qword_10007DAA8)
        {
          v22 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
          qword_10007DAA8 = (uint64_t)v22;
        }
        v23 = _SC_syslog_os_log_mapping(6);
        if (__SC_log_enabled(6, v22, v23))
        {
          v24 = _os_log_pack_size(18);
          v27 = (char *)&v154 - ((__chkstk_darwin(v24, v25, v26) + 15) & 0xFFFFFFFFFFFFFFF0);
          v28 = __error();
          v29 = _os_log_pack_fill(v27, v24, *v28, &_mh_execute_header, "Process IPv6 address change: %s: %u", v154, (_DWORD)__str);
          v30 = *((_DWORD *)a1 + 5);
          *(_DWORD *)v29 = 136315394;
          *(_QWORD *)(v29 + 4) = &__str;
          *(_WORD *)(v29 + 12) = 1024;
          *(_DWORD *)(v29 + 14) = v30;
          __SC_log_send(6, v22, v23, v27);
        }
        sub_100018BBC(0, (const char *)&__str);
        v31 = *((_DWORD *)a1 + 5);
        if (v31 == 1)
        {
          if ((a1[164] & 4) != 0)
          {
            sub_10001993C((char *)&__str, a1 + 56, 6, (uint64_t)(a1 + 184));
LABEL_76:
            v31 = *((_DWORD *)a1 + 5);
          }
          else
          {
            v31 = 1;
          }
        }
        if (v31 != 3)
        {
          if (qword_10007DAC0)
            sub_100016F80((char *)&__str);
        }
      }
      return;
    case 7:
      v32 = *((_DWORD *)a1 + 5);
      if (v32 - 6 < 3)
      {
        if (v2 >= 0x2C)
        {
          snprintf((char *)&__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
          v33 = (os_log_t)qword_10007DAA8;
          if (!qword_10007DAA8)
          {
            v33 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
            qword_10007DAA8 = (uint64_t)v33;
          }
          v34 = _SC_syslog_os_log_mapping(6);
          if (__SC_log_enabled(6, v33, v34))
          {
            v35 = _os_log_pack_size(18);
            v38 = (char *)&v154 - ((__chkstk_darwin(v35, v36, v37) + 15) & 0xFFFFFFFFFFFFFFF0);
            v39 = __error();
            v40 = _os_log_pack_fill(v38, v35, *v39, &_mh_execute_header, "Process ND6 address change: %s: %u", v154, (_DWORD)__str);
            v41 = *((_DWORD *)a1 + 5);
            *(_DWORD *)v40 = 136315394;
            *(_QWORD *)(v40 + 4) = &__str;
            *(_WORD *)(v40 + 12) = 1024;
            *(_DWORD *)(v40 + 14) = v41;
            __SC_log_send(6, v33, v34, v38);
          }
          sub_100018BBC(0, (const char *)&__str);
          return;
        }
LABEL_121:
        sub_100016340((uint64_t)a1);
        return;
      }
      if (v32 != 9)
        return;
      if (v2 < 0x2C)
        goto LABEL_121;
      snprintf((char *)&__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
      v42 = (os_log_t)qword_10007DAA8;
      if (!qword_10007DAA8)
      {
        v42 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
        qword_10007DAA8 = (uint64_t)v42;
      }
      v43 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v42, v43))
      {
        v44 = _os_log_pack_size(18);
        v47 = (char *)&v154 - ((__chkstk_darwin(v44, v45, v46) + 15) & 0xFFFFFFFFFFFFFFF0);
        v48 = __error();
        v49 = _os_log_pack_fill(v47, v44, *v48, &_mh_execute_header, "Process IPv6 router expired: %s: %u", v154, (_DWORD)__str);
        v50 = *((_DWORD *)a1 + 5);
        *(_DWORD *)v49 = 136315394;
        *(_QWORD *)(v49 + 4) = &__str;
        *(_WORD *)(v49 + 12) = 1024;
        *(_DWORD *)(v49 + 14) = v50;
        __SC_log_send(6, v42, v43, v47);
      }
      sub_100019C14((char *)&__str);
      return;
    default:
      return;
  }
}

uint64_t sub_100016340(uint64_t result)
{
  int *v1;
  os_log_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int *v6;
  uint64_t v7;
  os_log_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  os_log_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int *v27;
  uint64_t v28;
  int v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  if (byte_10007DA00)
  {
    v1 = (int *)result;
    v2 = (os_log_t)qword_10007DAA8;
    if (!qword_10007DAA8)
    {
      v2 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
      qword_10007DAA8 = (uint64_t)v2;
    }
    v3 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v2, v3))
    {
      v4 = _os_log_pack_size(12);
      v5 = (char *)&v30 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
      v6 = __error();
      v7 = _os_log_pack_fill(v5, v4, *v6, &_mh_execute_header, "%@ event:");
      *(_DWORD *)v7 = 138412290;
      *(_QWORD *)(v7 + 4) = CFSTR("Error processing (Apple network subclass)");
      __SC_log_send(7, v2, v3, v5);
    }
    v8 = (os_log_t)qword_10007DAA8;
    if (!qword_10007DAA8)
    {
      v8 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
      qword_10007DAA8 = (uint64_t)v8;
    }
    v9 = _SC_syslog_os_log_mapping(7);
    result = __SC_log_enabled(7, v8, v9);
    if ((_DWORD)result)
    {
      v11 = _os_log_pack_size(38);
      v12 = (char *)&v30 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
      v13 = __error();
      v14 = _os_log_pack_fill(v12, v11, *v13, &_mh_execute_header, "  Event size=%u, id=%u, vendor=%u, class=%u, subclass=%u, code=%u", (_DWORD)v30, DWORD2(v30), v31, v32, v33, v34);
      v15 = *v1;
      v16 = v1[1];
      v17 = v1[2];
      v18 = v1[3];
      v19 = v1[4];
      v20 = v1[5];
      *(_DWORD *)v14 = 67110400;
      *(_DWORD *)(v14 + 4) = v15;
      *(_WORD *)(v14 + 8) = 1024;
      *(_DWORD *)(v14 + 10) = v19;
      *(_WORD *)(v14 + 14) = 1024;
      *(_DWORD *)(v14 + 16) = v16;
      *(_WORD *)(v14 + 20) = 1024;
      *(_DWORD *)(v14 + 22) = v17;
      *(_WORD *)(v14 + 26) = 1024;
      *(_DWORD *)(v14 + 28) = v18;
      *(_WORD *)(v14 + 32) = 1024;
      *(_DWORD *)(v14 + 34) = v20;
      result = __SC_log_send(7, v8, v9, v12);
    }
    if (*v1 >= 0x19)
    {
      v21 = 0;
      v22 = 6;
      *(_QWORD *)&v10 = 67109376;
      v30 = v10;
      do
      {
        v23 = (os_log_t)qword_10007DAA8;
        if (!qword_10007DAA8)
        {
          v23 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
          qword_10007DAA8 = (uint64_t)v23;
        }
        v24 = _SC_syslog_os_log_mapping(7);
        result = __SC_log_enabled(7, v23, v24);
        if ((_DWORD)result)
        {
          v25 = _os_log_pack_size(14);
          v26 = (char *)&v30 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
          v27 = __error();
          v28 = _os_log_pack_fill(v26, v25, *v27, &_mh_execute_header, "  Event data[%2d] = %08x", (_DWORD)v30, DWORD2(v30));
          v29 = v1[v22];
          *(_DWORD *)v28 = v30;
          *(_DWORD *)(v28 + 4) = v21;
          *(_WORD *)(v28 + 8) = 1024;
          *(_DWORD *)(v28 + 10) = v29;
          result = __SC_log_send(7, v23, v24, v26);
        }
        ++v22;
        ++v21;
      }
      while ((v22 * 4) < *v1);
    }
  }
  return result;
}

void sub_100016690(char *cStr, int a2)
{
  const __CFString *v4;
  const __CFString *NetworkInterfaceEntity;
  __CFDictionary *v6;
  __CFDictionary *v7;
  CFNumberRef v8;
  CFIndex Count;
  os_log_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int *v23;
  uint64_t v24;
  const char *v25;

  HIDWORD(v25) = a2;
  v4 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, v4, kSCEntNetLinkQuality);
  v6 = sub_100016938(NetworkInterfaceEntity);
  v7 = v6;
  if (a2 == -1)
  {
    CFDictionaryRemoveValue(v6, kSCPropNetLinkQuality);
  }
  else
  {
    v8 = CFNumberCreate(0, kCFNumberIntType, (char *)&v25 + 4);
    CFDictionarySetValue(v7, kSCPropNetLinkQuality, v8);
    CFRelease(v8);
  }
  Count = CFDictionaryGetCount(v7);
  v10 = sub_100013744();
  v11 = _SC_syslog_os_log_mapping(7);
  v12 = __SC_log_enabled(7, v10, v11);
  if (Count < 1)
  {
    if (v12)
    {
      v19 = _os_log_pack_size(12);
      v22 = (char *)&v25 - ((__chkstk_darwin(v19, v20, v21) + 15) & 0xFFFFFFFFFFFFFFF0);
      v23 = __error();
      v24 = _os_log_pack_fill(v22, v19, *v23, &_mh_execute_header, "Update interface link quality: %s: <unknown>", v25);
      *(_DWORD *)v24 = 136315138;
      *(_QWORD *)(v24 + 4) = cStr;
      __SC_log_send(7, v10, v11, v22);
    }
    SCDynamicStoreRemoveValue((SCDynamicStoreRef)qword_10007D9F8, NetworkInterfaceEntity);
  }
  else
  {
    if (v12)
    {
      v13 = _os_log_pack_size(22);
      v16 = (char *)&v25 - ((__chkstk_darwin(v13, v14, v15) + 15) & 0xFFFFFFFFFFFFFFF0);
      v17 = __error();
      v18 = _os_log_pack_fill(v16, v13, *v17, &_mh_execute_header, "Update interface link quality: %s: %@");
      *(_DWORD *)v18 = 136315394;
      *(_QWORD *)(v18 + 4) = cStr;
      *(_WORD *)(v18 + 12) = 2112;
      *(_QWORD *)(v18 + 14) = v7;
      __SC_log_send(7, v10, v11, v16);
    }
    SCDynamicStoreSetValue((SCDynamicStoreRef)qword_10007D9F8, NetworkInterfaceEntity, v7);
  }
  CFRelease(v4);
  CFRelease(NetworkInterfaceEntity);
  CFRelease(v7);
}

CFMutableDictionaryRef sub_100016938(CFStringRef key)
{
  const __CFDictionary *v1;
  CFMutableDictionaryRef v2;

  v1 = (const __CFDictionary *)SCDynamicStoreCopyValue((SCDynamicStoreRef)qword_10007D9F8, key);
  v2 = sub_100017928(v1);
  if (v1)
    CFRelease(v1);
  return v2;
}

void sub_1000169B4(char *cStr, unint64_t a2, const UInt8 *a3, CFIndex a4, const UInt8 *a5, CFIndex a6)
{
  const __CFString *v12;
  const __CFString *NetworkInterfaceEntity;
  __CFDictionary *v14;
  CFDataRef v15;
  CFDataRef v16;
  CFDateRef v17;
  os_log_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;

  v12 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, v12, kSCEntNetLinkIssues);
  v14 = sub_100016938(NetworkInterfaceEntity);
  v15 = CFDataCreate(0, a3, a4);
  CFDictionarySetValue(v14, kSCPropNetLinkIssuesModuleID, v15);
  CFRelease(v15);
  if (a6)
  {
    v16 = CFDataCreate(0, a5, a6);
    CFDictionarySetValue(v14, kSCPropNetLinkIssuesInfo, v16);
    CFRelease(v16);
  }
  else
  {
    CFDictionaryRemoveValue(v14, kSCPropNetLinkIssuesInfo);
  }
  v17 = CFDateCreate(0, (double)a2);
  CFDictionarySetValue(v14, kSCPropNetLinkIssuesTimeStamp, v17);
  CFRelease(v17);
  v18 = sub_100013744();
  v19 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v18, v19))
  {
    v20 = _os_log_pack_size(22);
    v23 = (char *)&v26 - ((__chkstk_darwin(v20, v21, v22) + 15) & 0xFFFFFFFFFFFFFFF0);
    v24 = __error();
    v25 = _os_log_pack_fill(v23, v20, *v24, &_mh_execute_header, "Update interface link issues: %s: %@");
    *(_DWORD *)v25 = 136315394;
    *(_QWORD *)(v25 + 4) = cStr;
    *(_WORD *)(v25 + 12) = 2112;
    *(_QWORD *)(v25 + 14) = v14;
    __SC_log_send(7, v18, v19, v23);
  }
  SCDynamicStoreSetValue((SCDynamicStoreRef)qword_10007D9F8, NetworkInterfaceEntity, v14);
  CFRelease(v12);
  CFRelease(v14);
  CFRelease(NetworkInterfaceEntity);
}

void sub_100016C18(const char *a1)
{
  os_log_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  const __CFString *v10;
  const __CFString *NetworkInterfaceEntity;
  __CFDictionary *v12;
  const char *v13;

  v2 = sub_100013744();
  v3 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v2, v3))
  {
    v4 = _os_log_pack_size(12);
    v7 = (char *)&v13 - ((__chkstk_darwin(v4, v5, v6) + 15) & 0xFFFFFFFFFFFFFFF0);
    v8 = __error();
    v9 = _os_log_pack_fill(v7, v4, *v8, &_mh_execute_header, "Detach interface: %s", v13);
    *(_DWORD *)v9 = 136315138;
    *(_QWORD *)(v9 + 4) = a1;
    __SC_log_send(7, v2, v3, v7);
  }
  v10 = CFStringCreateWithCString(0, a1, 0x8000100u);
  NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, v10, kSCEntNetLink);
  v12 = sub_100016938(NetworkInterfaceEntity);
  CFDictionarySetValue(v12, kSCPropNetLinkDetaching, kCFBooleanTrue);
  SCDynamicStoreSetValue((SCDynamicStoreRef)qword_10007D9F8, NetworkInterfaceEntity, v12);
  CFRelease(v10);
  CFRelease(v12);
  CFRelease(NetworkInterfaceEntity);
}

void sub_100016DB4(char *cStr, int a2, int a3)
{
  const __CFString *v6;

  v6 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  sub_100016E44(cStr, v6, a2, a3);
  CFRelease(v6);
}

uint64_t sub_100016E44(char *a1, const __CFString *a2, int a3, int a4)
{
  uint64_t result;
  int v9;
  CFBooleanRef v10;
  const CFBooleanRef *v11;
  const __CFBoolean *v12;
  _OWORD v13[3];

  result = sub_1000138A8(2);
  if ((_DWORD)result != -1)
  {
    v9 = result;
    memset(v13, 0, 44);
    __strlcpy_chk(v13, a1, 16, 16);
    v10 = 0;
    if (ioctl(v9, 0xC02C6948uLL, v13) != -1 && LODWORD(v13[2]))
    {
      if ((BYTE8(v13[1]) & 1) != 0)
      {
        if ((BYTE8(v13[1]) & 2) != 0)
          v11 = &kCFBooleanTrue;
        else
          v11 = &kCFBooleanFalse;
        v10 = *v11;
        if (*v11 && !CFBooleanGetValue(*v11))
        {
          v12 = 0;
          goto LABEL_12;
        }
      }
      else
      {
        v10 = 0;
      }
    }
    v12 = sub_100019D78(a1);
LABEL_12:
    sub_1000179E0((uint64_t)a1, a2, v10, a3, v12, a4);
    return close(v9);
  }
  return result;
}

void sub_100016F80(char *cStr)
{
  const __CFString *v2;
  const __CFString *NetworkInterfaceEntity;
  CFPropertyListRef v4;
  CFPropertyListRef v5;

  v2 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, v2, kSCEntNetLink);
  v4 = SCDynamicStoreCopyValue((SCDynamicStoreRef)qword_10007D9F8, NetworkInterfaceEntity);
  if (v4)
    goto LABEL_4;
  sub_100016E44(cStr, v2, 0, 0);
  v5 = SCDynamicStoreCopyValue((SCDynamicStoreRef)qword_10007D9F8, NetworkInterfaceEntity);
  if (v5)
  {
    v4 = v5;
    sub_1000137B4((uint64_t)"added missing link status", (uint64_t)cStr);
LABEL_4:
    CFRelease(v4);
  }
  CFRelease(v2);
  CFRelease(NetworkInterfaceEntity);
}

CFMutableArrayRef sub_100017088()
{
  const __CFString *NetworkInterface;
  CFPropertyListRef v1;
  CFTypeID TypeID;
  const __CFArray *Value;
  CFTypeID v4;
  CFMutableArrayRef MutableCopy;

  NetworkInterface = SCDynamicStoreKeyCreateNetworkInterface(0, kSCDynamicStoreDomainState);
  v1 = SCDynamicStoreCopyValue((SCDynamicStoreRef)qword_10007D9F8, NetworkInterface);
  CFRelease(NetworkInterface);
  if (v1)
  {
    TypeID = CFDictionaryGetTypeID();
    if (CFGetTypeID(v1) == TypeID
      && (Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v1, kSCPropNetInterfaces),
          v4 = CFArrayGetTypeID(),
          Value)
      && CFGetTypeID(Value) == v4)
    {
      MutableCopy = CFArrayCreateMutableCopy(0, 0, Value);
      CFRelease(v1);
      if (MutableCopy)
        return MutableCopy;
    }
    else
    {
      CFRelease(v1);
    }
  }
  return CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
}

void sub_1000171CC(const void *a1)
{
  const __CFString *NetworkInterface;
  CFPropertyListRef v3;
  const void *v4;
  CFTypeID TypeID;
  __CFDictionary *MutableCopy;
  CFDictionaryRef v7;
  CFDictionaryRef v8;
  const void *v9;

  v9 = a1;
  NetworkInterface = SCDynamicStoreKeyCreateNetworkInterface(0, kSCDynamicStoreDomainState);
  v3 = SCDynamicStoreCopyValue((SCDynamicStoreRef)qword_10007D9F8, NetworkInterface);
  if (!v3)
    goto LABEL_5;
  v4 = v3;
  TypeID = CFDictionaryGetTypeID();
  if (CFGetTypeID(v4) != TypeID)
  {
    CFRelease(v4);
LABEL_5:
    v8 = CFDictionaryCreate(0, (const void **)&kSCPropNetInterfaces, &v9, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    SCDynamicStoreSetValue((SCDynamicStoreRef)qword_10007D9F8, NetworkInterface, v8);
    v7 = v8;
    goto LABEL_6;
  }
  MutableCopy = CFDictionaryCreateMutableCopy(0, 0, (CFDictionaryRef)v4);
  CFRelease(v4);
  CFDictionarySetValue(MutableCopy, kSCPropNetInterfaces, a1);
  SCDynamicStoreSetValue((SCDynamicStoreRef)qword_10007D9F8, NetworkInterface, MutableCopy);
  v7 = MutableCopy;
LABEL_6:
  CFRelease(v7);
  CFRelease(NetworkInterface);
}

uint64_t sub_10001731C(const __CFArray *a1, char *a2)
{
  CFStringRef v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  char __str[16];
  __int128 v11;
  CFRange v12;

  v4 = CFStringCreateWithCString(0, a2, 0x8000100u);
  v12.length = CFArrayGetCount(a1);
  v12.location = 0;
  if (CFArrayContainsValue(a1, v12, v4))
  {
    sub_100016DB4(a2, 0, 1);
    v5 = 0;
  }
  else
  {
    CFArrayAppendValue(a1, v4);
    sub_100016DB4(a2, 1, 0);
    v6 = sub_1000138A8(2);
    if (v6 == -1)
    {
      sub_100016690(a2, -1);
    }
    else
    {
      v7 = v6;
      *(_OWORD *)__str = 0u;
      v11 = 0u;
      snprintf(__str, 0x10uLL, "%s", a2);
      if (ioctl(v7, 0xC020698AuLL, __str) == -1)
        v8 = -1;
      else
        v8 = v11;
      sub_100016690(a2, v8);
      close(v7);
    }
    v5 = 1;
  }
  CFRelease(v4);
  return v5;
}

void sub_100017468(char *a1)
{
  CFMutableArrayRef v2;

  v2 = sub_100017088();
  if (sub_10001731C(v2, a1))
  {
    sub_1000137B4((uint64_t)"link_add", (uint64_t)a1);
    sub_1000171CC(v2);
    if (strncmp(a1, "pktap", 5uLL))
      sub_1000139F8(a1);
  }
  CFRelease(v2);
}

void sub_100017508(const char *a1)
{
  const __CFArray *v2;
  CFStringRef v3;
  CFIndex FirstIndexOfValue;
  CFRange v5;

  v2 = sub_100017088();
  v3 = CFStringCreateWithCString(0, a1, 0x8000100u);
  v5.length = CFArrayGetCount(v2);
  v5.location = 0;
  FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v2, v5, v3);
  CFRelease(v3);
  if (FirstIndexOfValue != -1)
  {
    CFArrayRemoveValueAtIndex(v2, FirstIndexOfValue);
    sub_100017D18(a1);
    sub_1000171CC(v2);
  }
  CFRelease(v2);
}

void sub_1000175D0(char *cStr)
{
  const __CFString *v2;
  const __CFString *NetworkInterfaceEntity;
  os_log_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  const char *v12;

  v2 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, v2, kSCEntNetInterfaceDelegation);
  v4 = sub_100013744();
  v5 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v4, v5))
  {
    v6 = _os_log_pack_size(12);
    v9 = (char *)&v12 - ((__chkstk_darwin(v6, v7, v8) + 15) & 0xFFFFFFFFFFFFFFF0);
    v10 = __error();
    v11 = _os_log_pack_fill(v9, v6, *v10, &_mh_execute_header, "Post interface delegation change: %s", v12);
    *(_DWORD *)v11 = 136315138;
    *(_QWORD *)(v11 + 4) = cStr;
    __SC_log_send(7, v4, v5, v9);
  }
  SCDynamicStoreNotifyValue((SCDynamicStoreRef)qword_10007D9F8, NetworkInterfaceEntity);
  CFRelease(NetworkInterfaceEntity);
  CFRelease(v2);
}

void sub_100017744(const char *a1)
{
  int v2;
  int v3;
  int v4;
  int v5;
  const __CFString *v6;
  const __CFString *NetworkInterfaceEntity;
  os_log_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  char __str[16];
  __int128 v17;

  v2 = sub_1000138A8(2);
  if (v2 != -1)
  {
    v3 = v2;
    *(_OWORD *)__str = 0u;
    v17 = 0u;
    snprintf(__str, 0x10uLL, "%s", a1);
    v4 = ioctl(v3, 0xC0206989uLL, __str);
    v5 = v17;
    close(v3);
    if (v4 != -1 && !v5)
    {
      v6 = CFStringCreateWithCString(0, a1, 0x8000100u);
      NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, v6, kSCEntNetIdleRoute);
      v8 = sub_100013744();
      v9 = _SC_syslog_os_log_mapping(7);
      if (__SC_log_enabled(7, v8, v9))
      {
        v10 = _os_log_pack_size(12);
        v13 = &__str[-((__chkstk_darwin(v10, v11, v12) + 15) & 0xFFFFFFFFFFFFFFF0)];
        v14 = __error();
        v15 = _os_log_pack_fill(v13, v10, *v14, &_mh_execute_header, "Post interface idle: %s", *(const char **)__str);
        *(_DWORD *)v15 = 136315138;
        *(_QWORD *)(v15 + 4) = a1;
        __SC_log_send(7, v8, v9, v13);
      }
      SCDynamicStoreNotifyValue((SCDynamicStoreRef)qword_10007D9F8, NetworkInterfaceEntity);
      CFRelease(NetworkInterfaceEntity);
      CFRelease(v6);
    }
  }
}

CFMutableDictionaryRef sub_100017928(const __CFDictionary *a1)
{
  CFTypeID TypeID;

  TypeID = CFDictionaryGetTypeID();
  if (a1 && CFGetTypeID(a1) == TypeID)
    return CFDictionaryCreateMutableCopy(0, 0, a1);
  else
    return CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
}

void sub_1000179E0(uint64_t a1, CFStringRef ifname, const void *a3, int a4, const void *a5, int a6)
{
  const __CFString *NetworkInterfaceEntity;
  CFPropertyListRef v12;
  CFTypeID TypeID;
  __CFDictionary *v14;
  __CFDictionary *v15;
  os_log_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int *v22;
  uint64_t v23;
  os_log_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  int *v30;
  uint64_t v31;
  const char *v32;

  NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, ifname, kSCEntNetLink);
  v12 = SCDynamicStoreCopyValue((SCDynamicStoreRef)qword_10007D9F8, NetworkInterfaceEntity);
  if (v12)
  {
    TypeID = CFDictionaryGetTypeID();
    if (CFGetTypeID(v12) != TypeID)
    {
      CFRelease(v12);
      v12 = 0;
    }
  }
  v14 = sub_100017928((const __CFDictionary *)v12);
  v15 = v14;
  if (!a3)
  {
    CFDictionaryRemoveValue(v14, kSCPropNetLinkActive);
    if (!a4)
      goto LABEL_7;
    goto LABEL_6;
  }
  CFDictionarySetValue(v14, kSCPropNetLinkActive, a3);
  if (a4)
LABEL_6:
    CFDictionaryRemoveValue(v15, kSCPropNetLinkDetaching);
LABEL_7:
  if (a5 && CFBooleanGetValue((CFBooleanRef)a5))
    CFDictionarySetValue(v15, kSCPropNetLinkExpensive, a5);
  else
    CFDictionaryRemoveValue(v15, kSCPropNetLinkExpensive);
  if (CFDictionaryGetCount(v15) < 1)
  {
    if (!a6 || v12)
    {
      v24 = sub_100013744();
      v25 = _SC_syslog_os_log_mapping(7);
      if (__SC_log_enabled(7, v24, v25))
      {
        v26 = _os_log_pack_size(12);
        v29 = (char *)&v32 - ((__chkstk_darwin(v26, v27, v28) + 15) & 0xFFFFFFFFFFFFFFF0);
        v30 = __error();
        v31 = _os_log_pack_fill(v29, v26, *v30, &_mh_execute_header, "Update interface link status: %s: <removed>", v32);
        *(_DWORD *)v31 = 136315138;
        *(_QWORD *)(v31 + 4) = a1;
        __SC_log_send(7, v24, v25, v29);
      }
      SCDynamicStoreRemoveValue((SCDynamicStoreRef)qword_10007D9F8, NetworkInterfaceEntity);
    }
  }
  else if (!a6 || !v12 || !CFEqual(v12, v15))
  {
    v16 = sub_100013744();
    v17 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v16, v17))
    {
      v18 = _os_log_pack_size(22);
      v21 = (char *)&v32 - ((__chkstk_darwin(v18, v19, v20) + 15) & 0xFFFFFFFFFFFFFFF0);
      v22 = __error();
      v23 = _os_log_pack_fill(v21, v18, *v22, &_mh_execute_header, "Update interface link status: %s: %@");
      *(_DWORD *)v23 = 136315394;
      *(_QWORD *)(v23 + 4) = a1;
      *(_WORD *)(v23 + 12) = 2112;
      *(_QWORD *)(v23 + 14) = v15;
      __SC_log_send(7, v16, v17, v21);
    }
    SCDynamicStoreSetValue((SCDynamicStoreRef)qword_10007D9F8, NetworkInterfaceEntity, v15);
  }
  CFRelease(NetworkInterfaceEntity);
  CFRelease(v15);
  if (v12)
    CFRelease(v12);
}

void sub_100017D18(const char *a1)
{
  os_log_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  const __CFString *v10;
  const __CFString *NetworkInterfaceEntity;
  const __CFString *v12;
  const __CFString *v13;
  const __CFString *v14;
  const char *v15;

  v2 = sub_100013744();
  v3 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v2, v3))
  {
    v4 = _os_log_pack_size(12);
    v7 = (char *)&v15 - ((__chkstk_darwin(v4, v5, v6) + 15) & 0xFFFFFFFFFFFFFFF0);
    v8 = __error();
    v9 = _os_log_pack_fill(v7, v4, *v8, &_mh_execute_header, "Remove interface: %s", v15);
    *(_DWORD *)v9 = 136315138;
    *(_QWORD *)(v9 + 4) = a1;
    __SC_log_send(7, v2, v3, v7);
  }
  v10 = CFStringCreateWithCString(0, a1, 0x8000100u);
  NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, v10, kSCEntNetLink);
  SCDynamicStoreRemoveValue((SCDynamicStoreRef)qword_10007D9F8, NetworkInterfaceEntity);
  CFRelease(NetworkInterfaceEntity);
  v12 = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, v10, kSCEntNetNAT64);
  SCDynamicStoreRemoveValue((SCDynamicStoreRef)qword_10007D9F8, v12);
  CFRelease(v12);
  v13 = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, v10, kSCEntNetLinkQuality);
  SCDynamicStoreRemoveValue((SCDynamicStoreRef)qword_10007D9F8, v13);
  CFRelease(v13);
  v14 = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, v10, kSCEntNetLinkIssues);
  SCDynamicStoreRemoveValue((SCDynamicStoreRef)qword_10007D9F8, v14);
  CFRelease(v14);
  CFRelease(v10);
}

void sub_100017F24(ifaddrs *a1, const char *a2)
{
  __CFDictionary *Mutable;
  const __CFDictionary *v5;
  const char *ifa_name;
  const __CFString *v7;
  const __CFString *NetworkInterfaceEntity;
  const __CFDictionary *v9;
  unsigned __int8 *v10;
  const __CFDictionary *v11;
  CFStringRef v12;
  const __CFString *v13;
  const __CFString *v14;
  CFMutableDictionaryRef v15;
  os_log_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int *v22;
  uint64_t v23;
  int *v24;
  char *v25;
  const char *v26;
  int v27;
  CFStringRef v28;
  CFStringRef v29;
  ifaddrs *v30;

  v30 = 0;
  Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  v5 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!a1)
  {
    if (getifaddrs(&v30) == -1)
    {
      v16 = sub_100013744();
      v17 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v16, v17))
      {
        v18 = _os_log_pack_size(12);
        v21 = (char *)&v26 - ((__chkstk_darwin(v18, v19, v20) + 15) & 0xFFFFFFFFFFFFFFF0);
        v22 = __error();
        v23 = _os_log_pack_fill(v21, v18, *v22, &_mh_execute_header, "getifaddrs() failed: %s", v26);
        v24 = __error();
        v25 = strerror(*v24);
        *(_DWORD *)v23 = 136315138;
        *(_QWORD *)(v23 + 4) = v25;
        __SC_log_send(5, v16, v17, v21);
      }
      goto LABEL_16;
    }
    a1 = v30;
    if (!v30)
    {
      v27 = 0;
      if (a2)
        goto LABEL_13;
      goto LABEL_15;
    }
  }
  v27 = 0;
  v29 = kSCPropNetIPv4DestAddresses;
  v28 = kSCPropNetIPv4BroadcastAddresses;
  do
  {
    if (a1->ifa_addr->sa_family != 2)
      goto LABEL_11;
    ifa_name = a1->ifa_name;
    if (a2)
    {
      if (strncmp(a2, a1->ifa_name, 0x10uLL))
        goto LABEL_11;
      v27 = 1;
    }
    v7 = CFStringCreateWithCString(0, ifa_name, 0);
    NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, v7, kSCEntNetIPv4);
    CFRelease(v7);
    v9 = sub_1000182B8(NetworkInterfaceEntity, Mutable, v5);
    sub_100018428(v9, kSCPropNetIPv4Addresses, (unsigned __int8 *)&a1->ifa_addr->sa_data[2]);
    v10 = (unsigned __int8 *)&a1->ifa_dstaddr->sa_data[2];
    if ((a1->ifa_flags & 0x10) != 0)
    {
      v11 = v9;
      v12 = v29;
    }
    else
    {
      sub_100018428(v9, v28, v10);
      v10 = (unsigned __int8 *)&a1->ifa_netmask->sa_data[2];
      v11 = v9;
      v12 = kSCPropNetIPv4SubnetMasks;
    }
    sub_100018428(v11, v12, v10);
    CFDictionarySetValue(v5, NetworkInterfaceEntity, v9);
    CFRelease(v9);
    CFRelease(NetworkInterfaceEntity);
LABEL_11:
    a1 = a1->ifa_next;
  }
  while (a1);
  if (a2)
  {
LABEL_13:
    if (!v27)
    {
      v13 = CFStringCreateWithCString(0, a2, 0);
      v14 = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, v13, kSCEntNetIPv4);
      CFRelease(v13);
      v15 = sub_1000182B8(v14, Mutable, v5);
      CFDictionarySetValue(v5, v14, v15);
      CFRelease(v15);
      CFRelease(v14);
    }
  }
LABEL_15:
  CFDictionaryApplyFunction(v5, (CFDictionaryApplierFunction)sub_100018510, Mutable);
LABEL_16:
  if (v30)
    freeifaddrs(v30);
  CFRelease(Mutable);
  CFRelease(v5);
}

CFMutableDictionaryRef sub_1000182B8(const __CFString *key, __CFDictionary *a2, CFDictionaryRef theDict)
{
  __CFDictionary *MutableCopy;
  const __CFDictionary *v6;
  CFTypeID TypeID;
  CFDictionaryRef theDicta;

  theDicta = 0;
  if (CFDictionaryGetValueIfPresent(theDict, key, (const void **)&theDicta))
  {
    MutableCopy = CFDictionaryCreateMutableCopy(0, 0, theDicta);
    if (!MutableCopy)
      return CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  }
  else
  {
    v6 = (const __CFDictionary *)SCDynamicStoreCopyValue((SCDynamicStoreRef)qword_10007D9F8, key);
    theDicta = v6;
    if (!v6)
      return CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    CFDictionarySetValue(a2, key, v6);
    MutableCopy = theDicta;
    TypeID = CFDictionaryGetTypeID();
    if (MutableCopy)
    {
      if (CFGetTypeID(MutableCopy) == TypeID)
      {
        MutableCopy = CFDictionaryCreateMutableCopy(0, 0, theDicta);
        CFDictionaryRemoveValue(MutableCopy, kSCPropNetIPv4Addresses);
        CFDictionaryRemoveValue(MutableCopy, kSCPropNetIPv4SubnetMasks);
        CFDictionaryRemoveValue(MutableCopy, kSCPropNetIPv4DestAddresses);
        CFDictionaryRemoveValue(MutableCopy, kSCPropNetIPv4BroadcastAddresses);
      }
      else
      {
        MutableCopy = 0;
      }
    }
    CFRelease(theDicta);
    if (!MutableCopy)
      return CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  }
  return MutableCopy;
}

void sub_100018428(const __CFDictionary *a1, const void *a2, unsigned __int8 *a3)
{
  const __CFArray *Value;
  CFMutableArrayRef MutableCopy;
  __CFArray *v8;
  CFStringRef v9;

  Value = (const __CFArray *)CFDictionaryGetValue(a1, a2);
  if (Value)
    MutableCopy = CFArrayCreateMutableCopy(0, 0, Value);
  else
    MutableCopy = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  v8 = MutableCopy;
  v9 = CFStringCreateWithFormat(0, 0, CFSTR("%d.%d.%d.%d"), *a3, a3[1], a3[2], a3[3]);
  CFArrayAppendValue(v8, v9);
  CFRelease(v9);
  CFDictionarySetValue(a1, a2, v8);
  CFRelease(v8);
}

uint64_t sub_100018510(const __CFString *key, const void *a2, CFDictionaryRef theDict)
{
  const void *Value;
  uint64_t result;
  CFPropertyListRef v7;
  const void *v8;
  os_log_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  os_log_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;

  Value = CFDictionaryGetValue(theDict, key);
  if (Value)
  {
    result = CFEqual(Value, a2);
    if ((_DWORD)result)
      return result;
    if (CFDictionaryGetCount((CFDictionaryRef)a2) < 1)
    {
      v7 = SCDynamicStoreCopyValue((SCDynamicStoreRef)qword_10007D9F8, key);
      if (v7)
      {
        v8 = v7;
        v9 = sub_100013744();
        v10 = _SC_syslog_os_log_mapping(7);
        if (__SC_log_enabled(7, v9, v10))
        {
          v11 = _os_log_pack_size(12);
          v14 = (char *)&v25 - ((__chkstk_darwin(v11, v12, v13) + 15) & 0xFFFFFFFFFFFFFFF0);
          v15 = __error();
          v16 = _os_log_pack_fill(v14, v11, *v15, &_mh_execute_header, "Update interface configuration: %@: <removed>");
          *(_DWORD *)v16 = 138412290;
          *(_QWORD *)(v16 + 4) = key;
          __SC_log_send(7, v9, v10, v14);
        }
        CFRelease(v8);
      }
      result = SCDynamicStoreRemoveValue((SCDynamicStoreRef)qword_10007D9F8, key);
      goto LABEL_13;
    }
LABEL_10:
    v17 = sub_100013744();
    v18 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v17, v18))
    {
      v19 = _os_log_pack_size(22);
      v22 = (char *)&v25 - ((__chkstk_darwin(v19, v20, v21) + 15) & 0xFFFFFFFFFFFFFFF0);
      v23 = __error();
      v24 = _os_log_pack_fill(v22, v19, *v23, &_mh_execute_header, "Update interface configuration: %@: %@");
      *(_DWORD *)v24 = 138412546;
      *(_QWORD *)(v24 + 4) = key;
      *(_WORD *)(v24 + 12) = 2112;
      *(_QWORD *)(v24 + 14) = a2;
      __SC_log_send(7, v17, v18, v22);
    }
    result = SCDynamicStoreSetValue((SCDynamicStoreRef)qword_10007D9F8, key, a2);
    goto LABEL_13;
  }
  result = CFDictionaryGetCount((CFDictionaryRef)a2);
  if (result > 0)
    goto LABEL_10;
LABEL_13:
  byte_10007D9F0 = 1;
  return result;
}

void sub_100018770(char *cStr, int a2, int a3, uint64_t a4)
{
  const __CFString *v7;
  const __CFString *NetworkInterfaceEntity;
  CFMutableStringRef MutableCopy;
  uint64_t v10;
  const char *v11;
  os_log_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;

  v7 = CFStringCreateWithCString(0, cStr, 0x600u);
  NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, v7, kSCEntNetIPv4ARPCollision);
  MutableCopy = CFStringCreateMutableCopy(0, 0, NetworkInterfaceEntity);
  CFStringAppendFormat(MutableCopy, 0, CFSTR("/%d.%d.%d.%d"), a2, BYTE1(a2), BYTE2(a2), HIBYTE(a2));
  if (a3 >= 1)
  {
    v10 = 0;
    do
    {
      if (v10)
        v11 = ":";
      else
        v11 = "/";
      CFStringAppendFormat(MutableCopy, 0, CFSTR("%s%02x"), v11, *(unsigned __int8 *)(a4 + v10++));
    }
    while (a3 != v10);
  }
  v12 = sub_100013744();
  v13 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v12, v13))
  {
    v14 = _os_log_pack_size(12);
    v17 = (char *)&v20 - ((__chkstk_darwin(v14, v15, v16) + 15) & 0xFFFFFFFFFFFFFFF0);
    v18 = __error();
    v19 = _os_log_pack_fill(v17, v14, *v18, &_mh_execute_header, "Post ARP collision: %@");
    *(_DWORD *)v19 = 138412290;
    *(_QWORD *)(v19 + 4) = MutableCopy;
    __SC_log_send(7, v12, v13, v17);
  }
  SCDynamicStoreNotifyValue((SCDynamicStoreRef)qword_10007D9F8, MutableCopy);
  CFRelease(MutableCopy);
  CFRelease(NetworkInterfaceEntity);
  CFRelease(v7);
}

void sub_100018994(char *a1)
{
  sub_1000189EC(a1, (uint64_t)"Router ARP failure", kSCEntNetIPv4RouterARPFailure);
}

void sub_1000189EC(char *cStr, uint64_t a2, const __CFString *a3)
{
  const __CFString *v5;
  const __CFString *NetworkInterfaceEntity;
  os_log_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;

  v5 = CFStringCreateWithCString(0, cStr, 0x600u);
  NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, v5, a3);
  CFRelease(v5);
  v7 = sub_100013744();
  v8 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v7, v8))
  {
    v9 = _os_log_pack_size(22);
    v12 = (char *)&v15 - ((__chkstk_darwin(v9, v10, v11) + 15) & 0xFFFFFFFFFFFFFFF0);
    v13 = __error();
    v14 = _os_log_pack_fill(v12, v9, *v13, &_mh_execute_header, "Post %s: %@");
    *(_DWORD *)v14 = 136315394;
    *(_QWORD *)(v14 + 4) = a2;
    *(_WORD *)(v14 + 12) = 2112;
    *(_QWORD *)(v14 + 14) = NetworkInterfaceEntity;
    __SC_log_send(7, v7, v8, v12);
  }
  SCDynamicStoreNotifyValue((SCDynamicStoreRef)qword_10007D9F8, NetworkInterfaceEntity);
  CFRelease(NetworkInterfaceEntity);
}

void sub_100018B64(char *a1)
{
  sub_1000189EC(a1, (uint64_t)"Router ARP alive", kSCEntNetIPv4RouterARPAlive);
}

void sub_100018BBC(ifaddrs *a1, const char *a2)
{
  __int128 v4;
  CFStringRef v5;
  int v6;
  const __CFString *v7;
  const __CFString *v8;
  const __CFString *NetworkInterfaceEntity;
  const __CFDictionary *v10;
  uint64_t ifa_addr;
  int v12;
  char v13;
  unsigned int v14;
  __int128 v15;
  __int128 *v16;
  os_log_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int *v25;
  uint64_t v26;
  int *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  sockaddr *ifa_netmask;
  char *v33;
  int v34;
  unsigned int v35;
  int v36;
  char *v37;
  const __CFArray *Value;
  CFMutableArrayRef MutableCopy;
  __CFArray *v41;
  CFNumberRef v42;
  const __CFArray *v43;
  CFMutableArrayRef v44;
  __CFArray *v45;
  CFNumberRef v46;
  uint64_t ifa_dstaddr;
  int v48;
  char v49;
  unsigned int v50;
  const __CFString *v51;
  const __CFString *v52;
  __CFDictionary *v53;
  CFMutableDictionaryRef v54;
  os_log_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  int *v61;
  uint64_t v62;
  int *v63;
  char *v64;
  __int128 v65;
  CFStringRef v66;
  __int128 *v67;
  int v68;
  CFStringRef v69;
  __int128 *v70;
  CFStringRef v71;
  CFStringRef v72;
  const char *v73;
  __CFDictionary *Mutable;
  int v75;
  CFStringRef v76;
  const __CFDictionary *v77;
  ifaddrs *v78;
  int v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;

  v78 = 0;
  Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  v77 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!a1)
  {
    if (getifaddrs(&v78) == -1)
    {
      v55 = sub_100013744();
      v56 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v55, v56))
      {
        v57 = _os_log_pack_size(12);
        v60 = (char *)&v65 - ((__chkstk_darwin(v57, v58, v59) + 15) & 0xFFFFFFFFFFFFFFF0);
        v61 = __error();
        v62 = _os_log_pack_fill(v60, v57, *v61, &_mh_execute_header, "getifaddrs() failed: %s", (const char *)v65);
        v63 = __error();
        v64 = strerror(*v63);
        *(_DWORD *)v62 = 136315138;
        *(_QWORD *)(v62 + 4) = v64;
        __SC_log_send(5, v55, v56, v60);
      }
      v6 = -1;
      goto LABEL_69;
    }
    a1 = v78;
    if (!v78)
    {
      v68 = 0;
      v6 = -1;
      if (a2)
        goto LABEL_66;
      goto LABEL_68;
    }
  }
  v68 = 0;
  v71 = kSCEntNetIPv6;
  v72 = kSCDynamicStoreDomainState;
  v69 = kSCPropNetIPv6Addresses;
  v70 = &v81;
  v5 = kSCPropNetIPv6PrefixLength;
  v76 = kSCPropNetIPv6Flags;
  v66 = kSCPropNetIPv6DestAddresses;
  v6 = -1;
  *(_QWORD *)&v4 = 136315138;
  v65 = v4;
  v73 = a2;
  do
  {
    v96 = 0u;
    v97 = 0u;
    v94 = 0u;
    v95 = 0u;
    v92 = 0u;
    v93 = 0u;
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    if (a1->ifa_addr->sa_family != 30)
      goto LABEL_64;
    if (a2)
    {
      if (strncmp(a2, a1->ifa_name, 0x10uLL))
        goto LABEL_64;
      v68 = 1;
    }
    if (v6 == -1)
    {
      v6 = sub_1000138A8(30);
      if (v6 == -1)
        goto LABEL_69;
    }
    v7 = v5;
    v8 = CFStringCreateWithCString(0, a1->ifa_name, 0);
    NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, v72, v8, v71);
    CFRelease(v8);
    v10 = sub_100019398(NetworkInterfaceEntity, Mutable, v77);
    ifa_addr = (uint64_t)a1->ifa_addr;
    v12 = *(unsigned __int8 *)(ifa_addr + 8);
    if (v12 == 255)
    {
      v13 = *(_BYTE *)(ifa_addr + 9);
      if ((v13 & 0xF0) != 0x30 && (v13 & 0xF) == 2)
      {
LABEL_15:
        v14 = *(unsigned __int16 *)(ifa_addr + 10);
        if (*(_WORD *)(ifa_addr + 10))
        {
          *(_WORD *)(ifa_addr + 10) = 0;
          if (!*(_DWORD *)(ifa_addr + 24))
            *(_DWORD *)(ifa_addr + 24) = __rev16(v14);
        }
      }
    }
    else if (v12 == 254 && (*(_BYTE *)(ifa_addr + 9) & 0xC0) == 0x80)
    {
      goto LABEL_15;
    }
    v96 = 0u;
    v97 = 0u;
    v94 = 0u;
    v95 = 0u;
    v92 = 0u;
    v93 = 0u;
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    __strlcpy_chk(&v80, a1->ifa_name, 16, 16);
    v15 = *(_OWORD *)(ifa_addr + 12);
    v16 = v70;
    *v70 = *(_OWORD *)ifa_addr;
    *(__int128 *)((char *)v16 + 12) = v15;
    v75 = v6;
    if (ioctl(v6, 0xC1206949uLL, &v80) == -1)
    {
      v17 = sub_100013744();
      v18 = *__error() == 49 ? 7 : 5;
      v19 = _SC_syslog_os_log_mapping(v18);
      v20 = *__error() == 49 ? 7 : 5;
      if (__SC_log_enabled(v20, v17, v19))
      {
        v21 = _os_log_pack_size(12);
        v67 = &v65;
        v24 = (char *)&v65 - ((__chkstk_darwin(v21, v22, v23) + 15) & 0xFFFFFFFFFFFFFFF0);
        v25 = __error();
        v26 = _os_log_pack_fill(v24, v21, *v25, &_mh_execute_header, "ioctl() failed: %s", (const char *)v65);
        v27 = __error();
        v28 = strerror(*v27);
        *(_DWORD *)v26 = v65;
        *(_QWORD *)(v26 + 4) = v28;
        if (*__error() == 49)
          v29 = 7;
        else
          v29 = 5;
        __SC_log_send(v29, v17, v19, v24);
      }
    }
    sub_100019508(v10, v69, ifa_addr);
    v30 = 0;
    v31 = 0;
    ifa_netmask = a1->ifa_netmask;
    v33 = &ifa_netmask->sa_data[6];
    v5 = v7;
    while (v33[v30] == 255)
    {
      ++v30;
      v31 += 8;
      if (v30 == 16)
      {
        v79 = 128;
        goto LABEL_45;
      }
    }
    v79 = v31;
    v34 = 0;
    v35 = v33[v30];
    while (1)
    {
      v36 = v34 + 7;
      if (((v35 >> (v34 + 7)) & 1) == 0)
        break;
      if (--v34 == -7)
      {
        v79 = v31 + 7;
LABEL_41:
        v37 = &ifa_netmask->sa_data[7];
        while (v30 != 15)
        {
          if (v37[v30++])
            goto LABEL_44;
        }
        goto LABEL_45;
      }
    }
    v79 = v31 - v34;
    while (((v35 >> v36) & 1) == 0)
    {
      if (!--v36)
        goto LABEL_41;
    }
LABEL_44:
    v79 = 0;
LABEL_45:
    Value = (const __CFArray *)CFDictionaryGetValue(v10, v7);
    if (Value)
      MutableCopy = CFArrayCreateMutableCopy(0, 0, Value);
    else
      MutableCopy = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    v41 = MutableCopy;
    v6 = v75;
    v42 = CFNumberCreate(0, kCFNumberIntType, &v79);
    CFArrayAppendValue(v41, v42);
    CFRelease(v42);
    CFDictionarySetValue(v10, v7, v41);
    CFRelease(v41);
    v79 = v81;
    v43 = (const __CFArray *)CFDictionaryGetValue(v10, v76);
    a2 = v73;
    if (v43)
      v44 = CFArrayCreateMutableCopy(0, 0, v43);
    else
      v44 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    v45 = v44;
    v46 = CFNumberCreate(0, kCFNumberIntType, &v79);
    CFArrayAppendValue(v45, v46);
    CFRelease(v46);
    CFDictionarySetValue(v10, v76, v45);
    CFRelease(v45);
    if ((a1->ifa_flags & 0x10) == 0)
      goto LABEL_63;
    ifa_dstaddr = (uint64_t)a1->ifa_dstaddr;
    if (!ifa_dstaddr)
      goto LABEL_63;
    v48 = *(unsigned __int8 *)(ifa_dstaddr + 8);
    if (v48 == 255)
    {
      v49 = *(_BYTE *)(ifa_dstaddr + 9);
      if ((v49 & 0xF0) != 0x30 && (v49 & 0xF) == 2)
      {
LABEL_59:
        v50 = *(unsigned __int16 *)(ifa_dstaddr + 10);
        if (*(_WORD *)(ifa_dstaddr + 10))
        {
          *(_WORD *)(ifa_dstaddr + 10) = 0;
          if (!*(_DWORD *)(ifa_dstaddr + 24))
            *(_DWORD *)(ifa_dstaddr + 24) = __rev16(v50);
        }
      }
    }
    else if (v48 == 254 && (*(_BYTE *)(ifa_dstaddr + 9) & 0xC0) == 0x80)
    {
      goto LABEL_59;
    }
    sub_100019508(v10, v66, ifa_dstaddr);
LABEL_63:
    CFDictionarySetValue(v77, NetworkInterfaceEntity, v10);
    CFRelease(v10);
    CFRelease(NetworkInterfaceEntity);
LABEL_64:
    a1 = a1->ifa_next;
  }
  while (a1);
  if (a2)
  {
LABEL_66:
    if (!v68)
    {
      v51 = CFStringCreateWithCString(0, a2, 0);
      v52 = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, v51, kSCEntNetIPv6);
      CFRelease(v51);
      v53 = v77;
      v54 = sub_100019398(v52, Mutable, v77);
      CFDictionarySetValue(v53, v52, v54);
      CFRelease(v54);
      CFRelease(v52);
    }
  }
LABEL_68:
  CFDictionaryApplyFunction(v77, (CFDictionaryApplierFunction)sub_1000196D4, Mutable);
LABEL_69:
  if (v78)
    freeifaddrs(v78);
  if (v6 != -1)
    close(v6);
  CFRelease(Mutable);
  CFRelease(v77);
}

CFMutableDictionaryRef sub_100019398(const __CFString *key, __CFDictionary *a2, CFDictionaryRef theDict)
{
  __CFDictionary *MutableCopy;
  const __CFDictionary *v6;
  CFTypeID TypeID;
  CFDictionaryRef theDicta;

  theDicta = 0;
  if (CFDictionaryGetValueIfPresent(theDict, key, (const void **)&theDicta))
  {
    MutableCopy = CFDictionaryCreateMutableCopy(0, 0, theDicta);
    if (!MutableCopy)
      return CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  }
  else
  {
    v6 = (const __CFDictionary *)SCDynamicStoreCopyValue((SCDynamicStoreRef)qword_10007D9F8, key);
    theDicta = v6;
    if (!v6)
      return CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    CFDictionarySetValue(a2, key, v6);
    MutableCopy = theDicta;
    TypeID = CFDictionaryGetTypeID();
    if (MutableCopy)
    {
      if (CFGetTypeID(MutableCopy) == TypeID)
      {
        MutableCopy = CFDictionaryCreateMutableCopy(0, 0, theDicta);
        CFDictionaryRemoveValue(MutableCopy, kSCPropNetIPv6Addresses);
        CFDictionaryRemoveValue(MutableCopy, kSCPropNetIPv6DestAddresses);
        CFDictionaryRemoveValue(MutableCopy, kSCPropNetIPv6Flags);
        CFDictionaryRemoveValue(MutableCopy, kSCPropNetIPv6PrefixLength);
      }
      else
      {
        MutableCopy = 0;
      }
    }
    CFRelease(theDicta);
    if (!MutableCopy)
      return CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  }
  return MutableCopy;
}

void sub_100019508(const __CFDictionary *a1, const void *a2, uint64_t a3)
{
  const __CFArray *Value;
  CFMutableArrayRef MutableCopy;
  __CFArray *v8;
  os_log_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  int *v17;
  char *v18;
  CFStringRef v19;
  const char *v20;
  char v21[46];

  Value = (const __CFArray *)CFDictionaryGetValue(a1, a2);
  if (Value)
    MutableCopy = CFArrayCreateMutableCopy(0, 0, Value);
  else
    MutableCopy = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  v8 = MutableCopy;
  if (!inet_ntop(30, (const void *)(a3 + 8), v21, 0x2Eu))
  {
    v9 = sub_100013744();
    v10 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v9, v10))
    {
      v11 = _os_log_pack_size(12);
      v14 = &v21[-((__chkstk_darwin(v11, v12, v13) + 15) & 0xFFFFFFFFFFFFFFF0) - 6];
      v15 = __error();
      v16 = _os_log_pack_fill(v14, v11, *v15, &_mh_execute_header, "inet_ntop() failed: %s", v20);
      v17 = __error();
      v18 = strerror(*v17);
      *(_DWORD *)v16 = 136315138;
      *(_QWORD *)(v16 + 4) = v18;
      __SC_log_send(6, v9, v10, v14);
    }
    v21[0] = 0;
  }
  v19 = CFStringCreateWithFormat(0, 0, CFSTR("%s"), v21);
  CFArrayAppendValue(v8, v19);
  CFRelease(v19);
  CFDictionarySetValue(a1, a2, v8);
  CFRelease(v8);
}

uint64_t sub_1000196D4(const __CFString *key, const void *a2, CFDictionaryRef theDict)
{
  uint64_t result;
  uint64_t v6;
  os_log_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  CFPropertyListRef v15;
  const void *v16;
  os_log_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;

  result = (uint64_t)CFDictionaryGetValue(theDict, key);
  v6 = result;
  if (result && (result = CFEqual((CFTypeRef)result, a2), (_DWORD)result))
  {
    if (!a2)
    {
LABEL_10:
      if (v6)
      {
        v15 = SCDynamicStoreCopyValue((SCDynamicStoreRef)qword_10007D9F8, key);
        if (v15)
        {
          v16 = v15;
          v17 = sub_100013744();
          v18 = _SC_syslog_os_log_mapping(7);
          if (__SC_log_enabled(7, v17, v18))
          {
            v19 = _os_log_pack_size(12);
            v22 = (char *)&v25 - ((__chkstk_darwin(v19, v20, v21) + 15) & 0xFFFFFFFFFFFFFFF0);
            v23 = __error();
            v24 = _os_log_pack_fill(v22, v19, *v23, &_mh_execute_header, "Update interface configuration: %@: <removed>");
            *(_DWORD *)v24 = 138412290;
            *(_QWORD *)(v24 + 4) = key;
            __SC_log_send(7, v17, v18, v22);
          }
          CFRelease(v16);
        }
        return SCDynamicStoreRemoveValue((SCDynamicStoreRef)qword_10007D9F8, key);
      }
      return result;
    }
  }
  else
  {
    byte_10007D9F0 = 1;
    if (!a2)
      goto LABEL_10;
  }
  result = CFDictionaryGetCount((CFDictionaryRef)a2);
  if (result < 1)
    goto LABEL_10;
  v7 = sub_100013744();
  v8 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v7, v8))
  {
    v9 = _os_log_pack_size(22);
    v12 = (char *)&v25 - ((__chkstk_darwin(v9, v10, v11) + 15) & 0xFFFFFFFFFFFFFFF0);
    v13 = __error();
    v14 = _os_log_pack_fill(v12, v9, *v13, &_mh_execute_header, "Update interface configuration: %@: %@");
    *(_DWORD *)v14 = 138412546;
    *(_QWORD *)(v14 + 4) = key;
    *(_WORD *)(v14 + 12) = 2112;
    *(_QWORD *)(v14 + 14) = a2;
    __SC_log_send(7, v7, v8, v12);
  }
  return SCDynamicStoreSetValue((SCDynamicStoreRef)qword_10007D9F8, key, a2);
}

void sub_10001993C(char *cStr, const void *a2, int a3, uint64_t a4)
{
  const __CFString *v7;
  const __CFString *NetworkInterfaceEntity;
  CFMutableStringRef MutableCopy;
  uint64_t v10;
  const char *v11;
  char v12[46];

  v7 = CFStringCreateWithCString(0, cStr, 0x600u);
  NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, v7, CFSTR("IPv6DuplicatedAddress"));
  v12[0] = 0;
  inet_ntop(30, a2, v12, 0x2Eu);
  MutableCopy = CFStringCreateMutableCopy(0, 0, NetworkInterfaceEntity);
  CFStringAppendFormat(MutableCopy, 0, CFSTR("/%s"), v12);
  if (a3 >= 1)
  {
    v10 = 0;
    do
    {
      if (v10)
        v11 = ":";
      else
        v11 = "/";
      CFStringAppendFormat(MutableCopy, 0, CFSTR("%s%02x"), v11, *(unsigned __int8 *)(a4 + v10++));
    }
    while (a3 != v10);
  }
  SCDynamicStoreNotifyValue((SCDynamicStoreRef)qword_10007D9F8, MutableCopy);
  CFRelease(MutableCopy);
  CFRelease(NetworkInterfaceEntity);
  CFRelease(v7);
}

void sub_100019AB0(char *cStr)
{
  const __CFString *v1;
  const __CFString *NetworkInterfaceEntity;
  os_log_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;

  v1 = CFStringCreateWithCString(0, cStr, 0x600u);
  NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, v1, kSCEntNetNAT64PrefixRequest);
  CFRelease(v1);
  v3 = sub_100013744();
  v4 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v3, v4))
  {
    v5 = _os_log_pack_size(12);
    v8 = (char *)&v11 - ((__chkstk_darwin(v5, v6, v7) + 15) & 0xFFFFFFFFFFFFFFF0);
    v9 = __error();
    v10 = _os_log_pack_fill(v8, v5, *v9, &_mh_execute_header, "Post NAT64 prefix request: %@");
    *(_DWORD *)v10 = 138412290;
    *(_QWORD *)(v10 + 4) = NetworkInterfaceEntity;
    __SC_log_send(7, v3, v4, v8);
  }
  SCDynamicStoreNotifyValue((SCDynamicStoreRef)qword_10007D9F8, NetworkInterfaceEntity);
  CFRelease(NetworkInterfaceEntity);
}

void sub_100019C14(char *cStr)
{
  const __CFString *v1;
  const __CFString *NetworkInterfaceEntity;
  os_log_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;

  v1 = CFStringCreateWithCString(0, cStr, 0x600u);
  NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, v1, kSCEntNetIPv6RouterExpired);
  CFRelease(v1);
  v3 = sub_100013744();
  v4 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v3, v4))
  {
    v5 = _os_log_pack_size(12);
    v8 = (char *)&v11 - ((__chkstk_darwin(v5, v6, v7) + 15) & 0xFFFFFFFFFFFFFFF0);
    v9 = __error();
    v10 = _os_log_pack_fill(v8, v5, *v9, &_mh_execute_header, "Post IPv6 Router Expired: %@");
    *(_DWORD *)v10 = 138412290;
    *(_QWORD *)(v10 + 4) = NetworkInterfaceEntity;
    __SC_log_send(7, v3, v4, v8);
  }
  SCDynamicStoreNotifyValue((SCDynamicStoreRef)qword_10007D9F8, NetworkInterfaceEntity);
  CFRelease(NetworkInterfaceEntity);
}

const __CFBoolean *sub_100019D78(char *cStr)
{
  CFStringRef v2;
  const __SCNetworkInterface *v3;
  const __SCNetworkInterface *v4;
  const __CFBoolean *v5;
  int v6;
  int v7;
  int v8;
  int Value;
  int v10;

  v2 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  v3 = (const __SCNetworkInterface *)_SCNetworkInterfaceCreateWithBSDName(0, v2, 0);
  if (v3)
  {
    v4 = v3;
    v5 = sub_100019EB0(v3);
    if (_os_feature_enabled_impl("Network", "low_data_mode"))
      v6 = SCNetworkInterfaceSupportsLowDataMode(v4);
    else
      v6 = 0;
    CFRelease(v4);
    if (v5)
    {
      v7 = sub_1000138A8(2);
      if (v7 != -1)
      {
        v8 = v7;
        Value = CFBooleanGetValue(v5);
        v10 = sub_10001A2E8(v8, (uint64_t)cStr, Value != 0);
        close(v8);
        if (v6)
        {
          if (Value && !v10)
            sub_10001A530(v2);
        }
      }
    }
  }
  else
  {
    v5 = 0;
  }
  CFRelease(v2);
  return v5;
}

CFBooleanRef sub_100019EB0(const __SCNetworkInterface *Interface)
{
  const __SCNetworkInterface *v1;
  CFBooleanRef v2;
  const __CFString *BSDName;
  CFStringRef InterfaceType;
  BOOL v6;
  const __CFString *v7;
  CFPropertyListRef v8;
  CFTypeID TypeID;
  const void *Value;
  CFTypeID v11;
  CFAbsoluteTime Current;
  const __CFDate *v13;
  CFComparisonResult v14;
  os_log_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int *v21;
  uint64_t v22;
  CFStringRef v23;
  CFStringRef v24;
  const void *v25;
  CFTypeID v26;
  int v27;
  int v28;
  os_log_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int *v35;
  uint64_t v36;
  CFStringRef v37;
  const char *v38;
  uint64_t v39;

  do
  {
    v1 = Interface;
    Interface = SCNetworkInterfaceGetInterface(Interface);
  }
  while (Interface);
  if (_SCNetworkInterfaceIsTetheredHotspot(v1) || _SCNetworkInterfaceIsBluetoothPAN(v1))
    return kCFBooleanTrue;
  BSDName = SCNetworkInterfaceGetBSDName(v1);
  InterfaceType = SCNetworkInterfaceGetInterfaceType(v1);
  if (CFEqual(InterfaceType, kSCNetworkInterfaceTypeIEEE80211))
    v6 = BSDName == 0;
  else
    v6 = 1;
  if (v6 || !CFStringHasPrefix(BSDName, CFSTR("en")))
  {
    v24 = SCNetworkInterfaceGetInterfaceType(v1);
    if (CFEqual(v24, kSCNetworkInterfaceTypeWWAN))
      return kCFBooleanTrue;
    else
      return 0;
  }
  v2 = kCFBooleanFalse;
  v7 = CFStringCreateWithFormat(0, 0, CFSTR("%@%@/%@/%@/%@/%@"), &stru_100077E20, kSCDynamicStoreDomainSetup, kSCCompNetwork, CFSTR("Override"), CFSTR("InterfaceType"), kSCNetworkInterfaceTypeIEEE80211);
  v8 = SCDynamicStoreCopyValue(0, v7);
  CFRelease(v7);
  TypeID = CFDictionaryGetTypeID();
  if (!v8)
    goto LABEL_17;
  if (CFGetTypeID(v8) != TypeID)
    goto LABEL_16;
  Value = CFDictionaryGetValue((CFDictionaryRef)v8, CFSTR("Expiration"));
  v11 = CFDateGetTypeID();
  if (!Value
    || CFGetTypeID(Value) != v11
    || (Current = CFAbsoluteTimeGetCurrent(),
        v13 = CFDateCreate(0, Current),
        v14 = CFDateCompare(v13, (CFDateRef)Value, 0),
        CFRelease(v13),
        v14 != kCFCompareLessThan)
    || (v25 = CFDictionaryGetValue((CFDictionaryRef)v8, CFSTR("Cost")), v26 = CFStringGetTypeID(), !v25)
    || CFGetTypeID(v25) != v26)
  {
LABEL_16:
    CFRelease(v8);
    goto LABEL_17;
  }
  v27 = CFEqual(v25, CFSTR("Expensive"));
  if (!v27)
  {
    v28 = CFEqual(v25, CFSTR("Inexpensive"));
    CFRelease(v8);
    if (v28)
      goto LABEL_28;
LABEL_17:
    if (!sub_10005A240())
      return v2;
    v15 = sub_100013744();
    v16 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v15, v16))
    {
      v17 = _os_log_pack_size(12);
      v20 = (char *)&v39 - ((__chkstk_darwin(v17, v18, v19) + 15) & 0xFFFFFFFFFFFFFFF0);
      v21 = __error();
      v22 = _os_log_pack_fill(v20, v17, *v21, &_mh_execute_header, "%@: Wi-Fi is expensive");
      v23 = SCNetworkInterfaceGetBSDName(v1);
      *(_DWORD *)v22 = 138412290;
      *(_QWORD *)(v22 + 4) = v23;
      __SC_log_send(5, v15, v16, v20);
    }
    return kCFBooleanTrue;
  }
  CFRelease(v8);
LABEL_28:
  v29 = sub_100013744();
  v30 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v29, v30))
  {
    v31 = _os_log_pack_size(22);
    v34 = (char *)&v39 - ((__chkstk_darwin(v31, v32, v33) + 15) & 0xFFFFFFFFFFFFFFF0);
    v35 = __error();
    v36 = _os_log_pack_fill(v34, v31, *v35, &_mh_execute_header, "%@: Wi-Fi using %sexpensive override");
    v37 = SCNetworkInterfaceGetBSDName(v1);
    v38 = "";
    if (!v27)
      v38 = "in";
    *(_DWORD *)v36 = 138412546;
    *(_QWORD *)(v36 + 4) = v37;
    *(_WORD *)(v36 + 12) = 2080;
    *(_QWORD *)(v36 + 14) = v38;
    __SC_log_send(5, v29, v30, v34);
  }
  if (v27)
    return kCFBooleanTrue;
  return v2;
}

uint64_t sub_10001A2E8(int a1, uint64_t a2, int a3)
{
  uint64_t v6;
  os_log_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  char *v21;
  __int128 v23;
  __int128 v24;

  v23 = 0u;
  v24 = 0u;
  __strlcpy_chk(&v23, a2, 16, 16);
  v6 = ioctl(a1, 0xC02069A0uLL, &v23);
  if ((_DWORD)v6 == -1 && *__error() != 1)
  {
    v7 = sub_100013744();
    v8 = _SC_syslog_os_log_mapping(3);
    if (!__SC_log_enabled(3, v7, v8))
      return 0xFFFFFFFFLL;
    v15 = _os_log_pack_size(22);
    v12 = (char *)&v23 - ((__chkstk_darwin(v15, v16, v17) + 15) & 0xFFFFFFFFFFFFFFF0);
    v18 = *__error();
    v14 = _os_log_pack_fill(v12, v15, v18, &_mh_execute_header, "%s: ioctl(SIOCGIFEXPENSIVE) failed: %s");
LABEL_10:
    v19 = v14;
    v20 = __error();
    v21 = strerror(*v20);
    *(_DWORD *)v19 = 136315394;
    *(_QWORD *)(v19 + 4) = a2;
    *(_WORD *)(v19 + 12) = 2080;
    *(_QWORD *)(v19 + 14) = v21;
    __SC_log_send(3, v7, v8, v12);
    return 0xFFFFFFFFLL;
  }
  if ((_DWORD)v24 != a3)
  {
    LODWORD(v24) = a3;
    v6 = ioctl(a1, 0xC02069A1uLL, &v23);
    if ((_DWORD)v6 == -1)
    {
      if (*__error() == 1)
        return 0xFFFFFFFFLL;
      v7 = sub_100013744();
      v8 = _SC_syslog_os_log_mapping(3);
      if (!__SC_log_enabled(3, v7, v8))
        return 0xFFFFFFFFLL;
      v9 = _os_log_pack_size(22);
      v12 = (char *)&v23 - ((__chkstk_darwin(v9, v10, v11) + 15) & 0xFFFFFFFFFFFFFFF0);
      v13 = *__error();
      v14 = _os_log_pack_fill(v12, v9, v13, &_mh_execute_header, "%s: ioctl(SIOCSIFEXPENSIVE) failed: %s");
      goto LABEL_10;
    }
  }
  return v6;
}

void sub_10001A530(const void *a1)
{
  const __SCPreferences *v2;
  const __SCPreferences *v3;
  const __SCNetworkSet *v4;
  const __SCNetworkSet *v5;
  const __CFArray *v6;
  const __CFArray *v7;
  CFIndex Count;
  CFIndex v9;
  CFIndex v10;
  const __SCNetworkService *ValueAtIndex;
  const __SCNetworkInterface *Interface;
  const __SCNetworkInterface *v13;
  CFStringRef BSDName;
  const __CFNumber *EnableLowDataModeValue;
  os_log_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int *v22;
  uint64_t v23;
  const char *v24;
  const __SCNetworkInterface *v25;
  os_log_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  int *v32;
  uint64_t v33;
  int v34;
  const char *v35;
  os_log_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  int *v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  uint64_t v55;
  int v56;
  const char *v57;
  os_log_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  int *v64;
  uint64_t v65;
  int v66;
  const char *v67;
  os_log_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int *v73;
  uint64_t v74;
  int v75;
  const char *v76;
  const char *v77;

  v2 = SCPreferencesCreate(0, CFSTR("KernelEventMonitor"), 0);
  if (v2)
  {
    v3 = v2;
    v4 = SCNetworkSetCopyCurrent(v2);
    if (!v4)
      goto LABEL_25;
    v5 = v4;
    v6 = SCNetworkSetCopyServices(v4);
    if (v6)
    {
      v7 = v6;
      Count = CFArrayGetCount(v6);
      if (Count >= 1)
      {
        v9 = Count;
        v10 = 0;
        while (1)
        {
          ValueAtIndex = (const __SCNetworkService *)CFArrayGetValueAtIndex(v7, v10);
          if (SCNetworkServiceGetEnabled(ValueAtIndex))
          {
            Interface = SCNetworkServiceGetInterface(ValueAtIndex);
            if (Interface)
            {
              v13 = Interface;
              BSDName = SCNetworkInterfaceGetBSDName(Interface);
              if (BSDName)
              {
                if (CFEqual(BSDName, a1))
                  break;
              }
            }
          }
          if (v9 == ++v10)
          {
            v13 = 0;
            goto LABEL_12;
          }
        }
        CFRetain(v13);
LABEL_12:
        CFRelease(v5);
        CFRelease(v7);
        if (v13)
        {
          EnableLowDataModeValue = (const __CFNumber *)__SCNetworkInterfaceGetEnableLowDataModeValue(v13);
          if (EnableLowDataModeValue)
          {
            HIDWORD(v77) = 0;
            CFNumberGetValue(EnableLowDataModeValue, kCFNumberIntType, (char *)&v77 + 4);
            v16 = sub_100013744();
            v17 = _SC_syslog_os_log_mapping(5);
            if (!__SC_log_enabled(5, v16, v17))
            {
LABEL_19:
              CFRelease(v3);
              v25 = v13;
LABEL_28:
              CFRelease(v25);
              return;
            }
            v18 = _os_log_pack_size(22);
            v21 = (char *)&v77 - ((__chkstk_darwin(v18, v19, v20) + 15) & 0xFFFFFFFFFFFFFFF0);
            v22 = __error();
            v23 = _os_log_pack_fill(v21, v18, *v22, &_mh_execute_header, "EnableLowDataModeValue(%@) is %s, skipping");
            v24 = "true";
            if (!HIDWORD(v77))
              v24 = "false";
            *(_DWORD *)v23 = 138412546;
            *(_QWORD *)(v23 + 4) = a1;
            *(_WORD *)(v23 + 12) = 2080;
            *(_QWORD *)(v23 + 14) = v24;
          }
          else
          {
            if (SCNetworkInterfaceSetEnableLowDataMode(v13, 1))
            {
              if (SCPreferencesCommitChanges(v3))
              {
                v44 = SCPreferencesApplyChanges(v3);
                v16 = sub_100013744();
                v17 = _SC_syslog_os_log_mapping(5);
                v45 = __SC_log_enabled(5, v16, v17);
                if (v44)
                {
                  if (!v45)
                    goto LABEL_19;
                  v46 = _os_log_pack_size(12);
                  v21 = (char *)&v77 - ((__chkstk_darwin(v46, v47, v48) + 15) & 0xFFFFFFFFFFFFFFF0);
                  v49 = __error();
                  v50 = _os_log_pack_fill(v21, v46, *v49, &_mh_execute_header, "SCNetworkInterfaceSetEnableLowDataModeValue(%@) success");
                  *(_DWORD *)v50 = 138412290;
                  *(_QWORD *)(v50 + 4) = a1;
                  goto LABEL_18;
                }
                if (!v45)
                  goto LABEL_19;
                v70 = _os_log_pack_size(12);
                v63 = (char *)&v77 - ((__chkstk_darwin(v70, v71, v72) + 15) & 0xFFFFFFFFFFFFFFF0);
                v73 = __error();
                v74 = _os_log_pack_fill(v63, v70, *v73, &_mh_execute_header, "SCPreferencesApplyChanges failed, %s", v77);
                v75 = SCError();
                v76 = SCErrorString(v75);
                *(_DWORD *)v74 = 136315138;
                *(_QWORD *)(v74 + 4) = v76;
                v68 = v16;
                v69 = v17;
              }
              else
              {
                v58 = sub_100013744();
                v59 = _SC_syslog_os_log_mapping(5);
                if (!__SC_log_enabled(5, v58, v59))
                  goto LABEL_19;
                v60 = _os_log_pack_size(12);
                v63 = (char *)&v77 - ((__chkstk_darwin(v60, v61, v62) + 15) & 0xFFFFFFFFFFFFFFF0);
                v64 = __error();
                v65 = _os_log_pack_fill(v63, v60, *v64, &_mh_execute_header, "SCPreferencesCommitChanges failed, %s", v77);
                v66 = SCError();
                v67 = SCErrorString(v66);
                *(_DWORD *)v65 = 136315138;
                *(_QWORD *)(v65 + 4) = v67;
                v68 = v58;
                v69 = v59;
              }
              __SC_log_send(5, v68, v69, v63);
              goto LABEL_19;
            }
            v16 = sub_100013744();
            v17 = _SC_syslog_os_log_mapping(5);
            if (!__SC_log_enabled(5, v16, v17))
              goto LABEL_19;
            v51 = _os_log_pack_size(22);
            v21 = (char *)&v77 - ((__chkstk_darwin(v51, v52, v53) + 15) & 0xFFFFFFFFFFFFFFF0);
            v54 = __error();
            v55 = _os_log_pack_fill(v21, v51, *v54, &_mh_execute_header, "SCNetworkInterfaceSetEnableLowDataModeValue(%@) failed, %s");
            v56 = SCError();
            v57 = SCErrorString(v56);
            *(_DWORD *)v55 = 138412546;
            *(_QWORD *)(v55 + 4) = a1;
            *(_WORD *)(v55 + 12) = 2080;
            *(_QWORD *)(v55 + 14) = v57;
          }
LABEL_18:
          __SC_log_send(5, v16, v17, v21);
          goto LABEL_19;
        }
LABEL_25:
        v36 = sub_100013744();
        v37 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v36, v37))
        {
          v38 = _os_log_pack_size(12);
          v41 = (char *)&v77 - ((__chkstk_darwin(v38, v39, v40) + 15) & 0xFFFFFFFFFFFFFFF0);
          v42 = __error();
          v43 = _os_log_pack_fill(v41, v38, *v42, &_mh_execute_header, "Can't find interface for %@");
          *(_DWORD *)v43 = 138412290;
          *(_QWORD *)(v43 + 4) = a1;
          __SC_log_send(5, v36, v37, v41);
        }
        v25 = v3;
        goto LABEL_28;
      }
      CFRelease(v5);
    }
    else
    {
      v7 = v5;
    }
    CFRelease(v7);
    goto LABEL_25;
  }
  v26 = sub_100013744();
  v27 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v26, v27))
  {
    v28 = _os_log_pack_size(12);
    v31 = (char *)&v77 - ((__chkstk_darwin(v28, v29, v30) + 15) & 0xFFFFFFFFFFFFFFF0);
    v32 = __error();
    v33 = _os_log_pack_fill(v31, v28, *v32, &_mh_execute_header, "SCPreferencesCreate() failed, %s", v77);
    v34 = SCError();
    v35 = SCErrorString(v34);
    *(_DWORD *)v33 = 136315138;
    *(_QWORD *)(v33 + 4) = v35;
    __SC_log_send(5, v26, v27, v31);
  }
}

uint64_t sub_10001AB74(uint64_t a1, uint64_t a2)
{
  return _SCControlPrefsCreate("com.apple.InterfaceNamer.control.plist", a1, a2);
}

uint64_t sub_10001ABC8(uint64_t a1)
{
  if (a1)
    return _SCControlPrefsGetBoolean();
  else
    return 0;
}

uint64_t sub_10001AC40(uint64_t a1)
{
  if (a1)
    return _SCControlPrefsGetBoolean();
  else
    return 0;
}

uint64_t NetworkInterfaceGetReservedRange(uint64_t a1, _DWORD *a2)
{
  uint64_t IOInterfaceNamePrefix;
  uint64_t v5;
  uint64_t IORegistryEntryID;
  io_registry_entry_t v7;
  const __CFString *v8;
  const __CFData *v9;
  CFTypeID TypeID;
  uint64_t v11;
  os_log_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int *v18;
  uint64_t v19;
  uint64_t v21;

  IOInterfaceNamePrefix = _SCNetworkInterfaceGetIOInterfaceNamePrefix(a1);
  if (IOInterfaceNamePrefix)
  {
    v5 = IOInterfaceNamePrefix;
    IORegistryEntryID = _SCNetworkInterfaceGetIORegistryEntryID(a1);
    v7 = sub_10001AE9C(IORegistryEntryID);
    v8 = CFStringCreateWithFormat(0, 0, CFSTR("network-interface-unit-%@"), v5);
    v9 = (const __CFData *)IORegistryEntrySearchCFProperty(v7, "IOService", v8, 0, 3u);
    TypeID = CFDataGetTypeID();
    if (v9 && CFGetTypeID(v9) == TypeID)
    {
      v11 = sub_10001B0DC(v9, a2);
      if (!v7)
        goto LABEL_8;
    }
    else
    {
      v11 = 0;
      if (!v7)
      {
LABEL_8:
        if (v9)
          CFRelease(v9);
        if (v8)
          CFRelease(v8);
        return v11;
      }
    }
    IOObjectRelease(v7);
    goto LABEL_8;
  }
  v12 = sub_10001B660();
  v13 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v12, v13))
  {
    v14 = _os_log_pack_size(22);
    v17 = (char *)&v21 - ((__chkstk_darwin(v14, v15, v16) + 15) & 0xFFFFFFFFFFFFFFF0);
    v18 = __error();
    v19 = _os_log_pack_fill(v17, v14, *v18, &_mh_execute_header, "%s: %@ has no prefix");
    *(_DWORD *)v19 = 136315394;
    *(_QWORD *)(v19 + 4) = "NetworkInterfaceGetReservedRange";
    *(_WORD *)(v19 + 12) = 2112;
    *(_QWORD *)(v19 + 14) = a1;
    __SC_log_send(5, v12, v13, v17);
  }
  return 0;
}

uint64_t sub_10001AE9C(uint64_t a1)
{
  const __CFDictionary *v2;
  kern_return_t MatchingServices;
  BOOL v4;
  os_log_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  os_log_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  os_log_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int *v24;
  uint64_t v25;
  const char *v27;
  uint64_t v28;
  uint64_t v29;

  HIDWORD(v27) = 0;
  v2 = IORegistryEntryIDMatching(a1);
  MatchingServices = IOServiceGetMatchingServices(kIOMainPortDefault, v2, (io_iterator_t *)&v27 + 1);
  if (MatchingServices)
    v4 = 1;
  else
    v4 = HIDWORD(v27) == 0;
  if (v4)
  {
    v5 = sub_10001B660();
    v6 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v5, v6))
    {
      v7 = _os_log_pack_size(28);
      v10 = (char *)&v27 - ((__chkstk_darwin(v7, v8, v9) + 15) & 0xFFFFFFFFFFFFFFF0);
      v11 = __error();
      v12 = _os_log_pack_fill(v10, v7, *v11, &_mh_execute_header, "%s: can't find entry 0x%llx, %d", v27, v28, v29);
      *(_DWORD *)v12 = 136315650;
      *(_QWORD *)(v12 + 4) = "getRegistryEntryWithID";
      *(_WORD *)(v12 + 12) = 2048;
      *(_QWORD *)(v12 + 14) = a1;
      *(_WORD *)(v12 + 22) = 1024;
      *(_DWORD *)(v12 + 24) = MatchingServices;
      v13 = v5;
      v14 = v6;
      v15 = v10;
LABEL_11:
      __SC_log_send(5, v13, v14, v15);
    }
LABEL_12:
    v17 = 0;
    goto LABEL_13;
  }
  v16 = IOIteratorNext(HIDWORD(v27));
  v17 = v16;
  if (!(_DWORD)v16)
  {
    v18 = sub_10001B660();
    v19 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v18, v19))
    {
      v20 = _os_log_pack_size(22);
      v23 = (char *)&v27 - ((__chkstk_darwin(v20, v21, v22) + 15) & 0xFFFFFFFFFFFFFFF0);
      v24 = __error();
      v25 = _os_log_pack_fill(v23, v20, *v24, &_mh_execute_header, "%s: no such matching entryID 0x%llx", v27, v28);
      *(_DWORD *)v25 = 136315394;
      *(_QWORD *)(v25 + 4) = "getRegistryEntryWithID";
      *(_WORD *)(v25 + 12) = 2048;
      *(_QWORD *)(v25 + 14) = a1;
      v13 = v18;
      v14 = v19;
      v15 = v23;
      goto LABEL_11;
    }
    goto LABEL_12;
  }
LABEL_13:
  if (HIDWORD(v27))
    IOObjectRelease(HIDWORD(v27));
  return v17;
}

uint64_t sub_10001B0DC(const __CFData *a1, _DWORD *a2)
{
  unsigned int Length;
  unsigned int v5;
  unsigned int v6;
  const UInt8 *BytePtr;
  int v8;
  os_log_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  int v18;
  int v19;
  os_log_t v20;
  os_log_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;

  Length = CFDataGetLength(a1);
  v5 = Length;
  if (Length < 4 || (Length & 3) != 0)
  {
    v21 = sub_10001B660();
    v10 = _SC_syslog_os_log_mapping(3);
    result = __SC_log_enabled(3, v21, v10);
    if (!(_DWORD)result)
      return result;
    v22 = _os_log_pack_size(18);
    v15 = (char *)&v27 - ((__chkstk_darwin(v22, v23, v24) + 15) & 0xFFFFFFFFFFFFFFF0);
    v25 = __error();
    v26 = _os_log_pack_fill(v15, v22, *v25, &_mh_execute_header, "%s: bad length %u", v27, v28);
    *(_DWORD *)v26 = 136315394;
    *(_QWORD *)(v26 + 4) = "IFUnitRangeInitWithData";
    *(_WORD *)(v26 + 12) = 1024;
    *(_DWORD *)(v26 + 14) = v5;
    v20 = v21;
    goto LABEL_12;
  }
  v6 = Length >> 2;
  *(_QWORD *)a2 = 0;
  BytePtr = CFDataGetBytePtr(a1);
  if (v6 >= 2)
    v8 = 2;
  else
    v8 = v6;
  memmove(a2, BytePtr, (4 * v8));
  if (v5 < 8)
  {
    a2[1] = *a2;
  }
  else if (a2[1] < *a2)
  {
    v9 = sub_10001B660();
    v10 = _SC_syslog_os_log_mapping(3);
    result = __SC_log_enabled(3, v9, v10);
    if (!(_DWORD)result)
      return result;
    v12 = _os_log_pack_size(24);
    v15 = (char *)&v27 - ((__chkstk_darwin(v12, v13, v14) + 15) & 0xFFFFFFFFFFFFFFF0);
    v16 = __error();
    v17 = _os_log_pack_fill(v15, v12, *v16, &_mh_execute_header, "%s: unit end %u < start %u", v27, v28, v29);
    v19 = *a2;
    v18 = a2[1];
    *(_DWORD *)v17 = 136315650;
    *(_QWORD *)(v17 + 4) = "IFUnitRangeInitWithData";
    *(_WORD *)(v17 + 12) = 1024;
    *(_DWORD *)(v17 + 14) = v18;
    *(_WORD *)(v17 + 18) = 1024;
    *(_DWORD *)(v17 + 20) = v19;
    v20 = v9;
LABEL_12:
    __SC_log_send(3, v20, v10, v15);
    return 0;
  }
  return 1;
}

uint64_t NetworkInterfacePrefixGetReservedUnits(void *key)
{
  const __CFString *v2;
  int v3;
  uint64_t v4;
  kern_return_t v5;
  kern_return_t v6;
  os_log_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  _DWORD *v14;
  io_registry_entry_t v15;
  unsigned int v16;
  char v17;
  CFTypeRef CFProperty;
  const void *v19;
  CFTypeID TypeID;
  __CFDictionary *Mutable;
  int v25;
  io_iterator_t iterator;
  void *value;

  iterator = 0;
  if (qword_10007DAE0)
  {
    value = 0;
    if (CFDictionaryGetValueIfPresent((CFDictionaryRef)qword_10007DAE0, key, (const void **)&value))
    {
      v2 = 0;
      v3 = 0;
      v4 = value;
      goto LABEL_26;
    }
  }
  v2 = CFStringCreateWithFormat(0, 0, CFSTR("network-interface-unit-%@"), key);
  v5 = IORegistryCreateIterator(kIOMainPortDefault, "IODeviceTree", 1u, &iterator);
  if (v5)
  {
    v6 = v5;
    v7 = sub_10001B660();
    v8 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v7, v8))
    {
      v9 = _os_log_pack_size(8);
      v12 = (char *)&v25 - ((__chkstk_darwin(v9, v10, v11) + 15) & 0xFFFFFFFFFFFFFFF0);
      v13 = __error();
      v14 = (_DWORD *)_os_log_pack_fill(v12, v9, *v13, &_mh_execute_header, "IORegistryCreateIterator failed %d", v25);
      *v14 = 67109120;
      v14[1] = v6;
      __SC_log_send(5, v7, v8, v12);
      v3 = 1;
      v4 = 0;
      goto LABEL_26;
    }
    goto LABEL_24;
  }
  value = 0;
  v15 = IOIteratorNext(iterator);
  if (!v15)
    goto LABEL_24;
  v16 = 0;
  v17 = 0;
  do
  {
    CFProperty = IORegistryEntryCreateCFProperty(v15, v2, 0, 0);
    if (CFProperty)
    {
      v19 = CFProperty;
      TypeID = CFDataGetTypeID();
      if (CFGetTypeID(v19) == TypeID
        && sub_10001B0DC((const __CFData *)v19, &value)
        && (!v17 || HIDWORD(value) > v16))
      {
        v17 = 1;
        v16 = HIDWORD(value);
      }
      CFRelease(v19);
    }
    value = 0;
    v15 = IOIteratorNext(iterator);
  }
  while (v15);
  if (!v17)
  {
LABEL_24:
    v4 = 0;
    goto LABEL_25;
  }
  v4 = v16 + 1;
LABEL_25:
  v3 = 1;
LABEL_26:
  if (iterator)
    IOObjectRelease(iterator);
  if (v2)
    CFRelease(v2);
  if (v3)
  {
    Mutable = (__CFDictionary *)qword_10007DAE0;
    if (!qword_10007DAE0)
    {
      Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, (const CFDictionaryValueCallBacks *)&unk_10007D8A0);
      qword_10007DAE0 = (uint64_t)Mutable;
    }
    CFDictionarySetValue(Mutable, key, (const void *)v4);
  }
  return v4;
}

CFStringRef sub_10001B5B8(uint64_t a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("%u"), a1);
}

BOOL sub_10001B614(int a1, int a2)
{
  return a1 == a2;
}

os_log_t sub_10001B660()
{
  os_log_t result;

  result = (os_log_t)qword_10007DAE8;
  if (!qword_10007DAE8)
  {
    result = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    qword_10007DAE8 = (uint64_t)result;
  }
  return result;
}

uint64_t sub_10001B6D0(void *a1)
{
  pthread_t v3;
  pthread_attr_t v4;

  memset(&v4, 0, sizeof(v4));
  v3 = 0;
  CFRetain(a1);
  pthread_attr_init(&v4);
  pthread_attr_setscope(&v4, 1);
  pthread_attr_setdetachstate(&v4, 2);
  pthread_create(&v3, &v4, (void *(__cdecl *)(void *))sub_10001B774, a1);
  return pthread_attr_destroy(&v4);
}

uint64_t sub_10001B774(__CFBundle *a1)
{
  CFRunLoopRef Current;
  uint64_t v3;
  const __CFDictionary *InfoDictionary;
  CFTypeID TypeID;
  const void *Value;
  const void *v7;
  CFTypeID v8;
  os_log_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  const void *v16;
  const void *v17;
  CFTypeID v18;
  os_log_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int *v25;
  uint64_t v27;

  pthread_setname_np("InterfaceNamer thread");
  Current = CFRunLoopGetCurrent();
  v3 = sub_10001AB74((uint64_t)Current, (uint64_t)sub_10001BB2C);
  sub_10001BB2C(v3);
  InfoDictionary = CFBundleGetInfoDictionary(a1);
  TypeID = CFDictionaryGetTypeID();
  if (InfoDictionary && CFGetTypeID(InfoDictionary) == TypeID)
  {
    Value = CFDictionaryGetValue(InfoDictionary, CFSTR("WaitStackTimeout"));
    if (Value)
    {
      v7 = Value;
      v8 = CFNumberGetTypeID();
      if (CFGetTypeID(v7) != v8
        || !CFNumberGetValue((CFNumberRef)v7, kCFNumberDoubleType, &qword_10007D8C8)
        || *(double *)&qword_10007D8C8 <= 0.0)
      {
        v9 = (os_log_t)qword_10007DAE8;
        if (!qword_10007DAE8)
        {
          v9 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
          qword_10007DAE8 = (uint64_t)v9;
        }
        v10 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v9, v10))
        {
          v11 = _os_log_pack_size(2);
          v14 = (char *)&v27 - ((__chkstk_darwin(v11, v12, v13) + 15) & 0xFFFFFFFFFFFFFFF0);
          v15 = __error();
          *(_WORD *)_os_log_pack_fill(v14, v11, *v15, &_mh_execute_header, "WaitStackTimeout value error") = 0;
          __SC_log_send(5, v9, v10, v14);
        }
        qword_10007D8C8 = 0x4072C00000000000;
      }
    }
    v16 = CFDictionaryGetValue(InfoDictionary, CFSTR("WaitQuietTimeout"));
    if (v16)
    {
      v17 = v16;
      v18 = CFNumberGetTypeID();
      if (CFGetTypeID(v17) != v18
        || !CFNumberGetValue((CFNumberRef)v17, kCFNumberDoubleType, &qword_10007D8D0)
        || *(double *)&qword_10007D8D0 <= 0.0)
      {
        v19 = (os_log_t)qword_10007DAE8;
        if (!qword_10007DAE8)
        {
          v19 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
          qword_10007DAE8 = (uint64_t)v19;
        }
        v20 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v19, v20))
        {
          v21 = _os_log_pack_size(2);
          v24 = (char *)&v27 - ((__chkstk_darwin(v21, v22, v23) + 15) & 0xFFFFFFFFFFFFFFF0);
          v25 = __error();
          *(_WORD *)_os_log_pack_fill(v24, v21, *v25, &_mh_execute_header, "WaitQuietTimeout value error") = 0;
          __SC_log_send(5, v19, v20, v24);
        }
        qword_10007D8D0 = 0x406E000000000000;
      }
    }
  }
  if (!sub_10001BD8C() || !sub_10001C0A4())
  {
    if (dword_10007DAF0)
    {
      IOServiceClose(dword_10007DAF0);
      dword_10007DAF0 = 0;
    }
    if (qword_10007DAF8)
    {
      CFRelease((CFTypeRef)qword_10007DAF8);
      qword_10007DAF8 = 0;
    }
    if (dword_10007DB00)
    {
      IOObjectRelease(dword_10007DB00);
      dword_10007DB00 = 0;
    }
    if (qword_10007DB08)
      IONotificationPortDestroy((IONotificationPortRef)qword_10007DB08);
    if (dword_10007DB10)
    {
      IOObjectRelease(dword_10007DB10);
      dword_10007DB10 = 0;
    }
    if (dword_10007DB14)
    {
      IOObjectRelease(dword_10007DB14);
      dword_10007DB14 = 0;
    }
    if (qword_10007DB18)
    {
      CFRelease((CFTypeRef)qword_10007DB18);
      qword_10007DB18 = 0;
    }
    if (qword_10007DB20)
    {
      CFRunLoopTimerInvalidate((CFRunLoopTimerRef)qword_10007DB20);
      CFRelease((CFTypeRef)qword_10007DB20);
      qword_10007DB20 = 0;
    }
  }
  CFRelease(a1);
  CFRunLoopRun();
  return 0;
}

uint64_t sub_10001BB2C(uint64_t a1)
{
  int v2;
  int v3;
  os_log_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  const char *v12;
  uint64_t result;
  int v14;
  os_log_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int *v21;
  uint64_t v22;
  const char *v23;
  const char *v24;

  v2 = sub_10001ABC8(a1);
  if (v2 != byte_10007DB28)
  {
    v3 = v2;
    byte_10007DB28 = v2;
    v4 = (os_log_t)qword_10007DAE8;
    if (!qword_10007DAE8)
    {
      v4 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_10007DAE8 = (uint64_t)v4;
    }
    v5 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v4, v5))
    {
      v6 = _os_log_pack_size(12);
      v9 = (char *)&v24 - ((__chkstk_darwin(v6, v7, v8) + 15) & 0xFFFFFFFFFFFFFFF0);
      v10 = __error();
      v11 = _os_log_pack_fill(v9, v6, *v10, &_mh_execute_header, "Allow New Interfaces is %s", v24);
      v12 = "enabled";
      if (!v3)
        v12 = "disabled";
      *(_DWORD *)v11 = 136315138;
      *(_QWORD *)(v11 + 4) = v12;
      __SC_log_send(5, v4, v5, v9);
    }
  }
  result = sub_10001AC40(a1);
  if ((_DWORD)result != byte_10007DB29)
  {
    v14 = result;
    byte_10007DB29 = result;
    v15 = (os_log_t)qword_10007DAE8;
    if (!qword_10007DAE8)
    {
      v15 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_10007DAE8 = (uint64_t)v15;
    }
    v16 = _SC_syslog_os_log_mapping(5);
    result = __SC_log_enabled(5, v15, v16);
    if ((_DWORD)result)
    {
      v17 = _os_log_pack_size(12);
      v20 = (char *)&v24 - ((__chkstk_darwin(v17, v18, v19) + 15) & 0xFFFFFFFFFFFFFFF0);
      v21 = __error();
      v22 = _os_log_pack_fill(v20, v17, *v21, &_mh_execute_header, "Configure New Interfaces is %s", v24);
      v23 = "enabled";
      if (!v14)
        v23 = "disabled";
      *(_DWORD *)v22 = 136315138;
      *(_QWORD *)(v22 + 4) = v23;
      return __SC_log_send(5, v15, v16, v20);
    }
  }
  return result;
}

uint64_t sub_10001BD8C()
{
  const __SCPreferences *v0;
  const __SCPreferences *v1;
  __CFRunLoop *Current;
  uint64_t result;
  os_log_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  int v12;
  const char *v13;
  os_log_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  const char *v28;
  const char *v29;

  v0 = SCPreferencesCreate(0, CFSTR("InterfaceNamer:setup_Virtual"), 0);
  qword_10007DB30 = (uint64_t)v0;
  if (v0)
  {
    if (SCPreferencesSetCallback(v0, (SCPreferencesCallBack)sub_10001C880, 0))
    {
      v1 = (const __SCPreferences *)qword_10007DB30;
      Current = CFRunLoopGetCurrent();
      if (SCPreferencesScheduleWithRunLoop(v1, Current, kCFRunLoopDefaultMode) || SCError() == 2002)
        return 1;
      v14 = (os_log_t)qword_10007DAE8;
      if (!qword_10007DAE8)
      {
        v14 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        qword_10007DAE8 = (uint64_t)v14;
      }
      v15 = _SC_syslog_os_log_mapping(3);
      if (!__SC_log_enabled(3, v14, v15))
        goto LABEL_19;
      v22 = _os_log_pack_size(12);
      v19 = (char *)&v29 - ((__chkstk_darwin(v22, v23, v24) + 15) & 0xFFFFFFFFFFFFFFF0);
      v25 = *__error();
      v21 = _os_log_pack_fill(v19, v22, v25, &_mh_execute_header, "SCPreferencesScheduleWithRunLoop() failed: %s");
    }
    else
    {
      v14 = (os_log_t)qword_10007DAE8;
      if (!qword_10007DAE8)
      {
        v14 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        qword_10007DAE8 = (uint64_t)v14;
      }
      v15 = _SC_syslog_os_log_mapping(3);
      if (!__SC_log_enabled(3, v14, v15))
        goto LABEL_19;
      v16 = _os_log_pack_size(12);
      v19 = (char *)&v29 - ((__chkstk_darwin(v16, v17, v18) + 15) & 0xFFFFFFFFFFFFFFF0);
      v20 = *__error();
      v21 = _os_log_pack_fill(v19, v16, v20, &_mh_execute_header, "SCPreferencesSetCallBack() failed: %s");
    }
    v26 = v21;
    v27 = SCError();
    v28 = SCErrorString(v27);
    *(_DWORD *)v26 = 136315138;
    *(_QWORD *)(v26 + 4) = v28;
    __SC_log_send(3, v14, v15, v19);
LABEL_19:
    CFRelease((CFTypeRef)qword_10007DB30);
    return 0;
  }
  v4 = (os_log_t)qword_10007DAE8;
  if (!qword_10007DAE8)
  {
    v4 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    qword_10007DAE8 = (uint64_t)v4;
  }
  v5 = _SC_syslog_os_log_mapping(3);
  result = __SC_log_enabled(3, v4, v5);
  if ((_DWORD)result)
  {
    v6 = _os_log_pack_size(12);
    v9 = (char *)&v29 - ((__chkstk_darwin(v6, v7, v8) + 15) & 0xFFFFFFFFFFFFFFF0);
    v10 = __error();
    v11 = _os_log_pack_fill(v9, v6, *v10, &_mh_execute_header, "SCPreferencesCreate() failed: %s", v29);
    v12 = SCError();
    v13 = SCErrorString(v12);
    *(_DWORD *)v11 = 136315138;
    *(_QWORD *)(v11 + 4) = v13;
    __SC_log_send(3, v4, v5, v9);
    return 0;
  }
  return result;
}

uint64_t sub_10001C0A4()
{
  __CFArray *Mutable;
  CFIndex Count;
  CFIndex v2;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  __CFDictionary *MutableCopy;
  io_service_t v6;
  io_service_t v7;
  kern_return_t v8;
  kern_return_t v9;
  os_log_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _DWORD *v17;
  os_log_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  _WORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  kern_return_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  os_log_t v36;
  CFAbsoluteTime Current;
  __CFRunLoop *v39;
  IONotificationPort *v40;
  const __CFDictionary *v41;
  kern_return_t v42;
  kern_return_t v43;
  os_log_t v44;
  os_log_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  int *v51;
  IONotificationPort *v52;
  const __CFDictionary *v53;
  kern_return_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  uint64_t v60;
  uint64_t v61;
  __CFRunLoop *v62;
  __CFRunLoopSource *RunLoopSource;
  _BYTE v64[4];
  uint32_t busyState;

  qword_10007DAF8 = (uint64_t)sub_10001CCEC();
  if (qword_10007DAF8)
  {
    Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    Count = CFArrayGetCount((CFArrayRef)qword_10007DAF8);
    if (Count >= 1)
    {
      v2 = Count;
      for (i = 0; i != v2; ++i)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)qword_10007DAF8, i);
        if (CFDictionaryContainsKey(ValueAtIndex, CFSTR("Active")))
        {
          MutableCopy = CFDictionaryCreateMutableCopy(0, 0, ValueAtIndex);
          CFDictionaryRemoveValue(MutableCopy, CFSTR("Active"));
          CFArraySetValueAtIndex((CFMutableArrayRef)qword_10007DAF8, i, MutableCopy);
          CFArrayAppendValue(Mutable, MutableCopy);
          CFRelease(MutableCopy);
        }
      }
    }
  }
  else
  {
    Mutable = 0;
  }
  busyState = 0;
  qword_10007DB48 = (uint64_t)Mutable;
  qword_10007DB18 = (uint64_t)CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  sub_10001CFCC((__CFDictionary *)qword_10007DB18, CFSTR("*START*"));
  qword_10007DB08 = (uint64_t)IONotificationPortCreate(kIOMainPortDefault);
  if (!qword_10007DB08)
  {
    v18 = (os_log_t)qword_10007DAE8;
    if (!qword_10007DAE8)
    {
      v18 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_10007DAE8 = (uint64_t)v18;
    }
    v19 = _SC_syslog_os_log_mapping(3);
    if (!__SC_log_enabled(3, v18, v19))
      return 0;
    v20 = _os_log_pack_size(2);
    v23 = &v64[-((__chkstk_darwin(v20, v21, v22) + 15) & 0xFFFFFFFFFFFFFFF0)];
    v24 = *__error();
    v25 = (_WORD *)_os_log_pack_fill(v23, v20, v24, &_mh_execute_header, "IONotificationPortCreate failed");
    goto LABEL_24;
  }
  v6 = IORegistryEntryFromPath(kIOMainPortDefault, "IOService:/");
  if (v6)
  {
    v7 = v6;
    v8 = IOServiceAddInterestNotification((IONotificationPortRef)qword_10007DB08, v6, "IOBusyInterest", (IOServiceInterestCallback)sub_10001D150, (void *)qword_10007DB08, (io_object_t *)&dword_10007DB10);
    if (v8)
    {
      v9 = v8;
      v10 = (os_log_t)qword_10007DAE8;
      if (!qword_10007DAE8)
      {
        v10 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        qword_10007DAE8 = (uint64_t)v10;
      }
      v11 = _SC_syslog_os_log_mapping(3);
      if (!__SC_log_enabled(3, v10, v11))
        goto LABEL_33;
      v12 = _os_log_pack_size(8);
      v15 = &v64[-((__chkstk_darwin(v12, v13, v14) + 15) & 0xFFFFFFFFFFFFFFF0)];
      v16 = *__error();
      v17 = (_DWORD *)_os_log_pack_fill(v15, v12, v16, &_mh_execute_header, "IOServiceAddInterestNotification returned %d");
    }
    else
    {
      v31 = IOServiceGetBusyState(v7, &busyState);
      if (!v31)
      {
        Current = CFAbsoluteTimeGetCurrent();
        qword_10007DB20 = (uint64_t)CFRunLoopTimerCreate(0, Current + *(double *)&qword_10007D8C8, 0.0, 0, 0, (CFRunLoopTimerCallBack)sub_10001D3F0, 0);
        if (!qword_10007DB20)
        {
          v45 = (os_log_t)qword_10007DAE8;
          if (!qword_10007DAE8)
          {
            v45 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
            qword_10007DAE8 = (uint64_t)v45;
          }
          v46 = _SC_syslog_os_log_mapping(3);
          if (__SC_log_enabled(3, v45, v46))
          {
            v47 = _os_log_pack_size(2);
            v50 = &v64[-((__chkstk_darwin(v47, v48, v49) + 15) & 0xFFFFFFFFFFFFFFF0)];
            v51 = __error();
            *(_WORD *)_os_log_pack_fill(v50, v47, *v51, &_mh_execute_header, "CFRunLoopTimerCreate failed") = 0;
            __SC_log_send(3, v45, v46, v50);
          }
          goto LABEL_33;
        }
        v39 = CFRunLoopGetCurrent();
        CFRunLoopAddTimer(v39, (CFRunLoopTimerRef)qword_10007DB20, kCFRunLoopDefaultMode);
        v40 = (IONotificationPort *)qword_10007DB08;
        v41 = IOServiceMatching("IONetworkStack");
        v42 = IOServiceAddMatchingNotification(v40, "IOServiceFirstMatch", v41, (IOServiceMatchingCallback)sub_10001D568, (void *)qword_10007DB08, (io_iterator_t *)&dword_10007DB14);
        if (v42)
        {
          v43 = v42;
          v44 = (os_log_t)qword_10007DAE8;
          if (!qword_10007DAE8)
          {
            v44 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
            qword_10007DAE8 = (uint64_t)v44;
          }
          v11 = _SC_syslog_os_log_mapping(3);
          if (!__SC_log_enabled(3, v44, v11))
            goto LABEL_33;
        }
        else
        {
          sub_10001D568(0, dword_10007DB14);
          v52 = (IONotificationPort *)qword_10007DB08;
          v53 = IOServiceMatching("IONetworkInterface");
          v54 = IOServiceAddMatchingNotification(v52, "IOServiceFirstMatch", v53, (IOServiceMatchingCallback)sub_10001D7EC, (void *)qword_10007DB08, (io_iterator_t *)&dword_10007DB00);
          if (!v54)
          {
            sub_10001D7EC(0, dword_10007DB00);
            sub_10001D150(v60, v61, -536870624, busyState);
            v62 = CFRunLoopGetCurrent();
            RunLoopSource = IONotificationPortGetRunLoopSource((IONotificationPortRef)qword_10007DB08);
            CFRunLoopAddSource(v62, RunLoopSource, kCFRunLoopDefaultMode);
            v30 = 1;
            goto LABEL_34;
          }
          v43 = v54;
          v44 = (os_log_t)qword_10007DAE8;
          if (!qword_10007DAE8)
          {
            v44 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
            qword_10007DAE8 = (uint64_t)v44;
          }
          v11 = _SC_syslog_os_log_mapping(3);
          if (!__SC_log_enabled(3, v44, v11))
          {
LABEL_33:
            v30 = 0;
LABEL_34:
            IOObjectRelease(v7);
            return v30;
          }
        }
        v55 = _os_log_pack_size(8);
        v15 = &v64[-((__chkstk_darwin(v55, v56, v57) + 15) & 0xFFFFFFFFFFFFFFF0)];
        v58 = *__error();
        v59 = (_DWORD *)_os_log_pack_fill(v15, v55, v58, &_mh_execute_header, "IOServiceAddMatchingNotification returned %d");
        *v59 = 67109120;
        v59[1] = v43;
        v36 = v44;
LABEL_32:
        __SC_log_send(3, v36, v11, v15);
        goto LABEL_33;
      }
      v9 = v31;
      v10 = (os_log_t)qword_10007DAE8;
      if (!qword_10007DAE8)
      {
        v10 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        qword_10007DAE8 = (uint64_t)v10;
      }
      v11 = _SC_syslog_os_log_mapping(3);
      if (!__SC_log_enabled(3, v10, v11))
        goto LABEL_33;
      v32 = _os_log_pack_size(8);
      v15 = &v64[-((__chkstk_darwin(v32, v33, v34) + 15) & 0xFFFFFFFFFFFFFFF0)];
      v35 = *__error();
      v17 = (_DWORD *)_os_log_pack_fill(v15, v32, v35, &_mh_execute_header, "IOServiceGetBusyState returned %d");
    }
    *v17 = 67109120;
    v17[1] = v9;
    v36 = v10;
    goto LABEL_32;
  }
  v18 = (os_log_t)qword_10007DAE8;
  if (!qword_10007DAE8)
  {
    v18 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    qword_10007DAE8 = (uint64_t)v18;
  }
  v19 = _SC_syslog_os_log_mapping(3);
  if (__SC_log_enabled(3, v18, v19))
  {
    v26 = _os_log_pack_size(2);
    v23 = &v64[-((__chkstk_darwin(v26, v27, v28) + 15) & 0xFFFFFFFFFFFFFFF0)];
    v29 = *__error();
    v25 = (_WORD *)_os_log_pack_fill(v23, v26, v29, &_mh_execute_header, "IORegistryEntryFromPath failed");
LABEL_24:
    *v25 = 0;
    __SC_log_send(3, v18, v19, v23);
  }
  return 0;
}

void sub_10001C880(const __SCPreferences *a1, char a2)
{
  const __SCPreferences *v2;

  if ((a2 & 2) != 0)
  {
    v2 = a1;
    if (!a1)
    {
      v2 = (const __SCPreferences *)qword_10007DB30;
      if (qword_10007DB38)
      {
        CFRelease((CFTypeRef)qword_10007DB38);
        qword_10007DB38 = 0;
      }
      if (qword_10007DB40)
      {
        CFRelease((CFTypeRef)qword_10007DB40);
        qword_10007DB40 = 0;
      }
    }
    sub_10001C944((uint64_t)v2);
    sub_10001CB18(v2);
    SCPreferencesSynchronize(v2);
  }
}

void sub_10001C944(uint64_t a1)
{
  const __CFArray *v2;
  const __CFArray *v3;
  const void *v4;
  os_log_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  int v11;
  const char *v12;
  const char *v13;

  v2 = (const __CFArray *)SCBridgeInterfaceCopyAll();
  v3 = v2;
  if (v2 && !CFArrayGetCount(v2))
  {
    CFRelease(v3);
    v3 = 0;
  }
  v4 = (const void *)qword_10007DB38;
  if ((const __CFArray *)qword_10007DB38 == v3)
  {
    if (!v3)
      return;
    goto LABEL_17;
  }
  if (!v3 || !qword_10007DB38)
    goto LABEL_9;
  if (CFEqual((CFTypeRef)qword_10007DB38, v3))
  {
LABEL_17:
    CFRelease(v3);
    return;
  }
  v4 = (const void *)qword_10007DB38;
LABEL_9:
  if (v4)
    CFRelease(v4);
  qword_10007DB38 = (uint64_t)v3;
  if (!_SCBridgeInterfaceUpdateConfiguration(a1))
  {
    v5 = (os_log_t)qword_10007DAE8;
    if (!qword_10007DAE8)
    {
      v5 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_10007DAE8 = (uint64_t)v5;
    }
    v6 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v5, v6))
    {
      v7 = _os_log_pack_size(12);
      v8 = (char *)&v13 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
      v9 = __error();
      v10 = _os_log_pack_fill(v8, v7, *v9, &_mh_execute_header, "_SCBridgeInterfaceUpdateConfiguration() failed: %s", v13);
      v11 = SCError();
      v12 = SCErrorString(v11);
      *(_DWORD *)v10 = 136315138;
      *(_QWORD *)(v10 + 4) = v12;
      __SC_log_send(5, v5, v6, v8);
    }
  }
}

void sub_10001CB18(const __SCPreferences *a1)
{
  const __CFArray *v2;
  const __CFArray *v3;
  const void *v4;
  os_log_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  int v11;
  const char *v12;
  const char *v13;

  v2 = SCVLANInterfaceCopyAll(a1);
  v3 = v2;
  if (v2 && !CFArrayGetCount(v2))
  {
    CFRelease(v3);
    v3 = 0;
  }
  v4 = (const void *)qword_10007DB40;
  if ((const __CFArray *)qword_10007DB40 == v3)
  {
    if (!v3)
      return;
    goto LABEL_17;
  }
  if (!v3 || !qword_10007DB40)
    goto LABEL_9;
  if (CFEqual((CFTypeRef)qword_10007DB40, v3))
  {
LABEL_17:
    CFRelease(v3);
    return;
  }
  v4 = (const void *)qword_10007DB40;
LABEL_9:
  if (v4)
    CFRelease(v4);
  qword_10007DB40 = (uint64_t)v3;
  if (!_SCVLANInterfaceUpdateConfiguration(a1))
  {
    v5 = (os_log_t)qword_10007DAE8;
    if (!qword_10007DAE8)
    {
      v5 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_10007DAE8 = (uint64_t)v5;
    }
    v6 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v5, v6))
    {
      v7 = _os_log_pack_size(12);
      v8 = (char *)&v13 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
      v9 = __error();
      v10 = _os_log_pack_fill(v8, v7, *v9, &_mh_execute_header, "_SCVLANInterfaceUpdateConfiguration() failed: %s", v13);
      v11 = SCError();
      v12 = SCErrorString(v11);
      *(_DWORD *)v10 = 136315138;
      *(_QWORD *)(v10 + 4) = v12;
      __SC_log_send(5, v5, v6, v8);
    }
  }
}

__CFArray *sub_10001CCEC()
{
  const __SCPreferences *v0;
  const __SCPreferences *v1;
  CFPropertyListRef Value;
  CFTypeID TypeID;
  CFPropertyListRef v4;
  const void *v5;
  const void *v6;
  int v7;
  __CFArray *Mutable;
  CFIndex Count;
  CFIndex i;
  const void *ValueAtIndex;
  CFTypeID v12;
  uint64_t v13;
  os_log_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int *v20;
  uint64_t v21;
  int v22;
  const char *v23;
  const char *v25;
  CFRange v26;

  v0 = SCPreferencesCreate(0, CFSTR("InterfaceNamer:readInterfaceList"), CFSTR("NetworkInterfaces.plist"));
  if (v0)
  {
    v1 = v0;
    Value = SCPreferencesGetValue(v0, CFSTR("Interfaces"));
    TypeID = CFArrayGetTypeID();
    if (Value && CFGetTypeID(Value) != TypeID)
      Value = 0;
    v4 = SCPreferencesGetValue(v1, CFSTR("Model"));
    if (!v4 || (v5 = v4, v6 = (const void *)_SC_hw_model(0), v5 == v6))
    {
      if (Value)
        goto LABEL_12;
    }
    else if (v6)
    {
      v7 = CFEqual(v5, v6);
      Mutable = 0;
      if (!v7 || !Value)
        goto LABEL_30;
LABEL_12:
      Count = CFArrayGetCount((CFArrayRef)Value);
      Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
      if (Count >= 1)
      {
        for (i = 0; i != Count; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)Value, i);
          v12 = CFDictionaryGetTypeID();
          if (ValueAtIndex
            && CFGetTypeID(ValueAtIndex) == v12
            && CFDictionaryContainsKey((CFDictionaryRef)ValueAtIndex, CFSTR("IOInterfaceNamePrefix"))
            && CFDictionaryContainsKey((CFDictionaryRef)ValueAtIndex, CFSTR("IOInterfaceUnit"))
            && CFDictionaryContainsKey((CFDictionaryRef)ValueAtIndex, CFSTR("IOMACAddress")))
          {
            CFArrayAppendValue(Mutable, ValueAtIndex);
          }
        }
      }
      if (Mutable)
      {
        v13 = CFArrayGetCount(Mutable);
        if (v13 >= 2)
        {
          v26.length = v13;
          v26.location = 0;
          CFArraySortValues(Mutable, v26, (CFComparatorFunction)sub_10001D8B8, 0);
        }
      }
      goto LABEL_30;
    }
    Mutable = 0;
LABEL_30:
    CFRelease(v1);
    return Mutable;
  }
  v14 = (os_log_t)qword_10007DAE8;
  if (!qword_10007DAE8)
  {
    v14 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    qword_10007DAE8 = (uint64_t)v14;
  }
  v15 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v14, v15))
  {
    v16 = _os_log_pack_size(12);
    v19 = (char *)&v25 - ((__chkstk_darwin(v16, v17, v18) + 15) & 0xFFFFFFFFFFFFFFF0);
    v20 = __error();
    v21 = _os_log_pack_fill(v19, v16, *v20, &_mh_execute_header, "SCPreferencesCreate() failed: %s", v25);
    v22 = SCError();
    v23 = SCErrorString(v22);
    *(_DWORD *)v21 = 136315138;
    *(_QWORD *)(v21 + 4) = v23;
    __SC_log_send(5, v14, v15, v19);
  }
  return 0;
}

void sub_10001CFCC(__CFDictionary *a1, const void *a2)
{
  CFNumberRef v4;
  os_log_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  CFAbsoluteTime valuePtr;

  valuePtr = CFAbsoluteTimeGetCurrent();
  v4 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  CFDictionaryAddValue(a1, a2, v4);
  v5 = (os_log_t)qword_10007DAE8;
  if (!qword_10007DAE8)
  {
    v5 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    qword_10007DAE8 = (uint64_t)v5;
  }
  v6 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v5, v6))
  {
    v7 = _os_log_pack_size(32);
    v8 = (char *)&valuePtr - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    v9 = __error();
    v10 = _os_log_pack_fill(v8, v7, *v9, &_mh_execute_header, "%s: %@: %@");
    *(_DWORD *)v10 = 136315650;
    *(_QWORD *)(v10 + 4) = "addTimestamp";
    *(_WORD *)(v10 + 12) = 2112;
    *(_QWORD *)(v10 + 14) = a2;
    *(_WORD *)(v10 + 22) = 2112;
    *(_QWORD *)(v10 + 24) = v4;
    __SC_log_send(5, v5, v6, v8);
  }
  CFRelease(v4);
}

void sub_10001D150(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  os_log_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  int v12;
  os_log_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;

  if (!a4)
  {
    if (a3 == -536870624)
    {
      sub_10001CFCC((__CFDictionary *)qword_10007DB18, CFSTR("*QUIET*"));
      v5 = (os_log_t)qword_10007DAE8;
      if (!qword_10007DAE8)
      {
        v5 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        qword_10007DAE8 = (uint64_t)v5;
      }
      v6 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v5, v6))
      {
        v7 = _os_log_pack_size(2);
        v10 = (char *)&v20 - ((__chkstk_darwin(v7, v8, v9) + 15) & 0xFFFFFFFFFFFFFFF0);
        v11 = __error();
        *(_WORD *)_os_log_pack_fill(v10, v7, *v11, &_mh_execute_header, "IOKit quiet") = 0;
        __SC_log_send(6, v5, v6, v10);
      }
    }
    if (dword_10007DAF0)
    {
      if (dword_10007DB10)
      {
        IOObjectRelease(dword_10007DB10);
        dword_10007DB10 = 0;
      }
      v12 = qword_10007DB20;
      if (qword_10007DB20)
      {
        CFRunLoopTimerInvalidate((CFRunLoopTimerRef)qword_10007DB20);
        CFRelease((CFTypeRef)qword_10007DB20);
        qword_10007DB20 = 0;
      }
      sub_10001D7EC(v12, dword_10007DB00);
      if (a3 == -536870624)
      {
        sub_10001CFCC((__CFDictionary *)qword_10007DB18, CFSTR("*QUIET&NAMED*"));
        sub_10001D9A4();
        if (qword_10007DB50 != -1)
          dispatch_once(&qword_10007DB50, &stru_100076240);
      }
    }
    else
    {
      v13 = (os_log_t)qword_10007DAE8;
      if (!qword_10007DAE8)
      {
        v13 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        qword_10007DAE8 = (uint64_t)v13;
      }
      v14 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v13, v14))
      {
        v15 = _os_log_pack_size(2);
        v18 = (char *)&v20 - ((__chkstk_darwin(v15, v16, v17) + 15) & 0xFFFFFFFFFFFFFFF0);
        v19 = __error();
        *(_WORD *)_os_log_pack_fill(v18, v15, *v19, &_mh_execute_header, "No network stack object") = 0;
        __SC_log_send(3, v13, v14, v18);
      }
    }
  }
}

void sub_10001D3F0()
{
  os_log_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_10001CFCC((__CFDictionary *)qword_10007DB18, CFSTR("*TIMEOUT*"));
  v0 = (os_log_t)qword_10007DAE8;
  if (!qword_10007DAE8)
  {
    v0 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    qword_10007DAE8 = (uint64_t)v0;
  }
  v1 = _SC_syslog_os_log_mapping(3);
  if (__SC_log_enabled(3, v0, v1))
  {
    v2 = _os_log_pack_size(2);
    v5 = (char *)&v9 - ((__chkstk_darwin(v2, v3, v4) + 15) & 0xFFFFFFFFFFFFFFF0);
    v6 = __error();
    *(_WORD *)_os_log_pack_fill(v5, v2, *v6, &_mh_execute_header, "timed out waiting for IOKit to quiesce") = 0;
    __SC_log_send(3, v0, v1, v5);
  }
  v7 = sub_10001E45C();
  sub_10001D150(v7, v8, 0, 0);
  sub_10001CFCC((__CFDictionary *)qword_10007DB18, CFSTR("*TIMEOUT&NAMED*"));
  sub_10001D9A4();
  if (qword_10007DB50 != -1)
    dispatch_once(&qword_10007DB50, &stru_100076240);
}

uint64_t sub_10001D568(int a1, io_iterator_t iterator)
{
  uint64_t result;
  io_object_t v3;
  kern_return_t v4;
  kern_return_t v5;
  os_log_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  _DWORD *v13;
  os_log_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int *v20;
  __CFRunLoopTimer *v21;
  CFAbsoluteTime Current;
  int v23;

  result = IOIteratorNext(iterator);
  if ((_DWORD)result)
  {
    v3 = result;
    v4 = IOServiceOpen(result, mach_task_self_, 0, (io_connect_t *)&dword_10007DAF0);
    if (v4)
    {
      v5 = v4;
      v6 = (os_log_t)qword_10007DAE8;
      if (!qword_10007DAE8)
      {
        v6 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        qword_10007DAE8 = (uint64_t)v6;
      }
      v7 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v6, v7))
      {
        v8 = _os_log_pack_size(8);
        v11 = (char *)&v23 - ((__chkstk_darwin(v8, v9, v10) + 15) & 0xFFFFFFFFFFFFFFF0);
        v12 = __error();
        v13 = (_DWORD *)_os_log_pack_fill(v11, v8, *v12, &_mh_execute_header, "IOServiceOpen returned %d", v23);
        *v13 = 67109120;
        v13[1] = v5;
        __SC_log_send(3, v6, v7, v11);
      }
    }
    else
    {
      sub_10001CFCC((__CFDictionary *)qword_10007DB18, CFSTR("*STACK*"));
      v14 = (os_log_t)qword_10007DAE8;
      if (!qword_10007DAE8)
      {
        v14 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        qword_10007DAE8 = (uint64_t)v14;
      }
      v15 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v14, v15))
      {
        v16 = _os_log_pack_size(2);
        v19 = (char *)&v23 - ((__chkstk_darwin(v16, v17, v18) + 15) & 0xFFFFFFFFFFFFFFF0);
        v20 = __error();
        *(_WORD *)_os_log_pack_fill(v19, v16, *v20, &_mh_execute_header, "IONetworkStack found") = 0;
        __SC_log_send(6, v14, v15, v19);
      }
      if (dword_10007DB14)
      {
        IOObjectRelease(dword_10007DB14);
        dword_10007DB14 = 0;
      }
      if (qword_10007DB20 && CFRunLoopTimerIsValid((CFRunLoopTimerRef)qword_10007DB20))
      {
        v21 = (__CFRunLoopTimer *)qword_10007DB20;
        Current = CFAbsoluteTimeGetCurrent();
        CFRunLoopTimerSetNextFireDate(v21, Current + *(double *)&qword_10007D8D0);
      }
      sub_10001EEC4();
    }
    return IOObjectRelease(v3);
  }
  return result;
}

void sub_10001D7EC(int a1, io_iterator_t iterator)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  __CFArray *Mutable;

  v3 = IOIteratorNext(iterator);
  if ((_DWORD)v3)
  {
    v4 = v3;
    do
    {
      v5 = _SCNetworkInterfaceCreateWithIONetworkInterfaceObject(v4);
      if (v5)
      {
        v6 = (const void *)v5;
        Mutable = (__CFArray *)qword_10007DB58;
        if (!qword_10007DB58)
        {
          Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
          qword_10007DB58 = (uint64_t)Mutable;
        }
        CFArrayAppendValue(Mutable, v6);
        CFRelease(v6);
      }
      IOObjectRelease(v4);
      v4 = IOIteratorNext(iterator);
    }
    while ((_DWORD)v4);
  }
  sub_10001EEC4();
}

CFComparisonResult sub_10001D8B8(const __CFDictionary *a1, const __CFDictionary *a2)
{
  const __CFString *Value;
  const __CFString *v5;
  CFComparisonResult result;
  const __CFNumber *v7;
  const __CFNumber *v8;

  Value = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("IOInterfaceNamePrefix"));
  v5 = (const __CFString *)CFDictionaryGetValue(a2, CFSTR("IOInterfaceNamePrefix"));
  result = CFStringCompare(Value, v5, 0);
  if (result == kCFCompareEqualTo)
  {
    v7 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("IOInterfaceUnit"));
    v8 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("IOInterfaceUnit"));
    return CFNumberCompare(v7, v8, 0);
  }
  return result;
}

void sub_10001D9A4()
{
  const __CFString *v0;

  v0 = SCDynamicStoreKeyCreate(0, CFSTR("%@InterfaceNamer"), kSCDynamicStoreDomainPlugin);
  SCDynamicStoreSetValue(0, v0, (CFPropertyListRef)qword_10007DB18);
  CFRelease(v0);
}

void sub_10001DA2C(id a1)
{
  CFDictionaryRef v1;
  int v2;
  os_log_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  os_log_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  int v18;
  const char *v19;
  const char *v20;
  void *values;
  void *keys;

  keys = CFSTR("avoid-deadlock");
  values = kCFBooleanFalse;
  sub_10001DCEC((CFPropertyListRef)qword_10007DAF8);
  v1 = CFDictionaryCreate(0, (const void **)&keys, (const void **)&values, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  v20 = (const char *)SCPreferencesCreateWithOptions(0, CFSTR("InterfaceNamer:upgradeNetworkConfiguration"), CFSTR("NetworkInterfaces.plist"), 0, v1);
  CFRelease(v1);
  if (v20)
  {
    v2 = __SCNetworkConfigurationUpgrade(0, &v20, 1);
    CFRelease(v20);
    if (v2)
    {
      if (qword_10007DAF8)
        CFRelease((CFTypeRef)qword_10007DAF8);
      qword_10007DAF8 = (uint64_t)sub_10001CCEC();
      sub_10001CFCC((__CFDictionary *)qword_10007DB18, CFSTR("*UPGRADED*"));
      v3 = (os_log_t)qword_10007DAE8;
      if (!qword_10007DAE8)
      {
        v3 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        qword_10007DAE8 = (uint64_t)v3;
      }
      v4 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v3, v4))
      {
        v5 = _os_log_pack_size(2);
        v8 = (char *)&v20 - ((__chkstk_darwin(v5, v6, v7) + 15) & 0xFFFFFFFFFFFFFFF0);
        v9 = __error();
        *(_WORD *)_os_log_pack_fill(v8, v5, *v9, &_mh_execute_header, "network configuration upgraded") = 0;
        __SC_log_send(6, v3, v4, v8);
      }
      sub_10001D9A4();
    }
  }
  else
  {
    v10 = (os_log_t)qword_10007DAE8;
    if (!qword_10007DAE8)
    {
      v10 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_10007DAE8 = (uint64_t)v10;
    }
    v11 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v10, v11))
    {
      v12 = _os_log_pack_size(12);
      v15 = (char *)&v20 - ((__chkstk_darwin(v12, v13, v14) + 15) & 0xFFFFFFFFFFFFFFF0);
      v16 = __error();
      v17 = _os_log_pack_fill(v15, v12, *v16, &_mh_execute_header, "SCPreferencesCreate() failed: %s", v20);
      v18 = SCError();
      v19 = SCErrorString(v18);
      *(_DWORD *)v17 = 136315138;
      *(_QWORD *)(v17 + 4) = v19;
      __SC_log_send(5, v10, v11, v15);
    }
  }
}

void sub_10001DCEC(CFPropertyListRef a1)
{
  CFTypeID TypeID;
  const __SCPreferences *v3;
  const __SCPreferences *v4;
  CFPropertyListRef Value;
  CFPropertyListRef v6;
  CFPropertyListRef v7;
  CFPropertyListRef v8;
  const void *v9;
  BOOL v10;
  os_log_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int *v17;
  uint64_t v18;
  int v19;
  const char *v20;
  os_log_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int *v27;
  uint64_t v28;
  CFNumberRef v29;
  os_log_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int *v36;
  uint64_t v37;
  int v38;
  const char *v39;
  const char *v40;

  TypeID = CFArrayGetTypeID();
  if (a1 && CFGetTypeID(a1) == TypeID)
  {
    v3 = SCPreferencesCreate(0, CFSTR("InterfaceNamer:writeInterfaceList"), CFSTR("NetworkInterfaces.plist"));
    if (v3)
    {
      v4 = v3;
      Value = SCPreferencesGetValue(v3, CFSTR("Interfaces"));
      if (Value != a1)
      {
        v6 = Value;
        if (!Value || !CFEqual(Value, a1))
        {
          v7 = SCPreferencesGetValue(v4, CFSTR("Model"));
          v8 = (CFPropertyListRef)_SC_hw_model(0);
          v9 = v8;
          if (v7 && v7 != v8)
          {
            v10 = v8 && CFEqual(v7, v8) != 0;
            if (v6 && !v10)
            {
              v21 = (os_log_t)qword_10007DAE8;
              if (!qword_10007DAE8)
              {
                v21 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
                qword_10007DAE8 = (uint64_t)v21;
              }
              v22 = _SC_syslog_os_log_mapping(5);
              if (__SC_log_enabled(5, v21, v22))
              {
                v23 = _os_log_pack_size(22);
                v26 = (char *)&v40 - ((__chkstk_darwin(v23, v24, v25) + 15) & 0xFFFFFFFFFFFFFFF0);
                v27 = __error();
                v28 = _os_log_pack_fill(v26, v23, *v27, &_mh_execute_header, "Hardware model changed\n  created on \"%@\"\n  now on     \"%@\"");
                *(_DWORD *)v28 = 138412546;
                *(_QWORD *)(v28 + 4) = v7;
                *(_WORD *)(v28 + 12) = 2112;
                *(_QWORD *)(v28 + 14) = v9;
                __SC_log_send(5, v21, v22, v26);
              }
              sub_10001E130(v4, (uint64_t)v7);
            }
          }
          SCPreferencesSetValue(v4, CFSTR("Model"), v9);
          SCPreferencesSetValue(v4, CFSTR("Interfaces"), a1);
          if (!v6)
          {
            HIDWORD(v40) = 20191120;
            v29 = CFNumberCreate(0, kCFNumberIntType, (char *)&v40 + 4);
            SCPreferencesSetValue(v4, kSCPrefVersion, v29);
            CFRelease(v29);
          }
          if (!SCPreferencesCommitChanges(v4) && SCError() != 30)
          {
            v30 = (os_log_t)qword_10007DAE8;
            if (!qword_10007DAE8)
            {
              v30 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
              qword_10007DAE8 = (uint64_t)v30;
            }
            v31 = _SC_syslog_os_log_mapping(5);
            if (__SC_log_enabled(5, v30, v31))
            {
              v32 = _os_log_pack_size(12);
              v35 = (char *)&v40 - ((__chkstk_darwin(v32, v33, v34) + 15) & 0xFFFFFFFFFFFFFFF0);
              v36 = __error();
              v37 = _os_log_pack_fill(v35, v32, *v36, &_mh_execute_header, "SCPreferencesCommitChanges() failed: %s", v40);
              v38 = SCError();
              v39 = SCErrorString(v38);
              *(_DWORD *)v37 = 136315138;
              *(_QWORD *)(v37 + 4) = v39;
              __SC_log_send(5, v30, v31, v35);
            }
          }
        }
      }
      CFRelease(v4);
    }
    else
    {
      v11 = (os_log_t)qword_10007DAE8;
      if (!qword_10007DAE8)
      {
        v11 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        qword_10007DAE8 = (uint64_t)v11;
      }
      v12 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v11, v12))
      {
        v13 = _os_log_pack_size(12);
        v16 = (char *)&v40 - ((__chkstk_darwin(v13, v14, v15) + 15) & 0xFFFFFFFFFFFFFFF0);
        v17 = __error();
        v18 = _os_log_pack_fill(v16, v13, *v17, &_mh_execute_header, "SCPreferencesCreate(\"NetworkInterfaces.plist\") failed: %s", v40);
        v19 = SCError();
        v20 = SCErrorString(v19);
        *(_DWORD *)v18 = 136315138;
        *(_QWORD *)(v18 + 4) = v20;
        __SC_log_send(5, v11, v12, v16);
      }
    }
  }
}

void sub_10001E130(const __SCPreferences *a1, uint64_t a2)
{
  const __CFString *v3;
  const __SCPreferences *v4;
  const __CFDictionary *Value;
  os_log_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  int v12;
  const char *v13;
  int v14;
  os_log_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  const char *v25;
  const char *v26;

  v3 = CFStringCreateWithFormat(0, 0, CFSTR("%@-%@"), CFSTR("NetworkInterfaces.plist"), a2);
  v4 = SCPreferencesCreate(0, CFSTR("InterfaceNamer:writeInterfaceListForModel"), v3);
  CFRelease(v3);
  if (v4)
  {
    Value = SCPreferencesPathGetValue(a1, CFSTR("/"));
    if (!SCPreferencesPathSetValue(v4, CFSTR("/"), Value))
    {
      v6 = (os_log_t)qword_10007DAE8;
      if (!qword_10007DAE8)
      {
        v6 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        qword_10007DAE8 = (uint64_t)v6;
      }
      v7 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v6, v7))
      {
        v8 = _os_log_pack_size(12);
        v9 = (char *)&v26 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
        v10 = __error();
        v11 = _os_log_pack_fill(v9, v8, *v10, &_mh_execute_header, "SCPreferencesPathSetValue() failed: %s", v26);
        v12 = SCError();
        v13 = SCErrorString(v12);
        *(_DWORD *)v11 = 136315138;
        *(_QWORD *)(v11 + 4) = v13;
        __SC_log_send(5, v6, v7, v9);
      }
    }
    v14 = SCPreferencesCommitChanges(v4);
    CFRelease(v4);
    if (!v14)
    {
      v15 = (os_log_t)qword_10007DAE8;
      if (!qword_10007DAE8)
      {
        v15 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        qword_10007DAE8 = (uint64_t)v15;
      }
      v16 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v15, v16))
      {
        v17 = _os_log_pack_size(12);
        v18 = (char *)&v26 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
        v19 = *__error();
        v20 = _os_log_pack_fill(v18, v17, v19, &_mh_execute_header, "SCPreferencesCommitChanges(\"NetworkInterfaces-<model>.plist\") failed: %s");
LABEL_16:
        v23 = v20;
        v24 = SCError();
        v25 = SCErrorString(v24);
        *(_DWORD *)v23 = 136315138;
        *(_QWORD *)(v23 + 4) = v25;
        __SC_log_send(5, v15, v16, v18);
      }
    }
  }
  else
  {
    v15 = (os_log_t)qword_10007DAE8;
    if (!qword_10007DAE8)
    {
      v15 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_10007DAE8 = (uint64_t)v15;
    }
    v16 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v15, v16))
    {
      v21 = _os_log_pack_size(12);
      v18 = (char *)&v26 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
      v22 = *__error();
      v20 = _os_log_pack_fill(v18, v21, v22, &_mh_execute_header, "SCPreferencesCreate(\"NetworkInterfaces-<model>.plist\") failed: %s");
      goto LABEL_16;
    }
  }
}

uint64_t sub_10001E45C()
{
  kern_return_t v0;
  __n128 v1;
  kern_return_t v2;
  os_log_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  _DWORD *v11;
  os_log_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int *v18;
  io_iterator_t iterator[2];

  *(_QWORD *)iterator = 0;
  v0 = IORegistryCreateIterator(kIOMainPortDefault, "IOService", 0, iterator);
  if (v0)
  {
    v2 = v0;
    v3 = (os_log_t)qword_10007DAE8;
    if (!qword_10007DAE8)
    {
      v3 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_10007DAE8 = (uint64_t)v3;
    }
    v4 = _SC_syslog_os_log_mapping(5);
    result = __SC_log_enabled(5, v3, v4);
    if ((_DWORD)result)
    {
      v6 = _os_log_pack_size(8);
      v9 = (char *)iterator - ((__chkstk_darwin(v6, v7, v8) + 15) & 0xFFFFFFFFFFFFFFF0);
      v10 = __error();
      v11 = (_DWORD *)_os_log_pack_fill(v9, v6, *v10, &_mh_execute_header, "IORegistryCreateIterator() returned %d", iterator[0]);
      *v11 = 67109120;
      v11[1] = v2;
      return __SC_log_send(5, v3, v4, v9);
    }
  }
  else
  {
    sub_10001E68C(iterator[0], 0, &iterator[1], v1);
    if (!iterator[1])
    {
      v12 = (os_log_t)qword_10007DAE8;
      if (!qword_10007DAE8)
      {
        v12 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        qword_10007DAE8 = (uint64_t)v12;
      }
      v13 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v12, v13))
      {
        v14 = _os_log_pack_size(2);
        v17 = (char *)iterator - ((__chkstk_darwin(v14, v15, v16) + 15) & 0xFFFFFFFFFFFFFFF0);
        v18 = __error();
        *(_WORD *)_os_log_pack_fill(v17, v14, *v18, &_mh_execute_header, "w/no busy services") = 0;
        __SC_log_send(3, v12, v13, v17);
      }
    }
    return IOObjectRelease(iterator[0]);
  }
  return result;
}

uint64_t sub_10001E68C(uint64_t a1, const __CFArray *a2, _DWORD *a3, __n128 a4)
{
  const __CFArray *v4;
  uint64_t v5;
  __objc2_prop_list **p_base_props;
  uint64_t result;
  uint64_t v8;
  CFMutableArrayRef MutableCopy;
  __CFArray *v10;
  kern_return_t Name;
  kern_return_t v12;
  os_log_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  _DWORD *v21;
  char *v22;
  kern_return_t v23;
  __CFString *Mutable;
  kern_return_t LocationInPlane;
  kern_return_t BusyStateAndTime;
  os_log_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  os_log_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  int *v42;
  uint64_t v43;
  _DWORD *v44;
  char *v45;
  os_log_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  int *v53;
  uint64_t v54;
  CFStringRef v55;
  os_log_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  int *v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  const char *v66;
  const char *v67;
  int v68;
  unint64_t v69;
  char *v70;
  kern_return_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  __n128 v83;
  __n128 *v84;
  _DWORD *v85;
  __n128 v86;
  const __CFArray *v87;
  unsigned int v88;
  uint64_t v89;
  int v90;
  unint64_t v91;
  char v92[128];
  char v93[136];

  v85 = a3;
  v4 = a2;
  v5 = a1;
  p_base_props = &QoSMarkingController__classData.base_props;
  a4.n128_u64[0] = 67109120;
  v86 = a4;
  a4.n128_u64[0] = 138413570;
  v83 = a4;
  v87 = a2;
  v88 = a1;
  do
  {
    result = IOIteratorNext(v5);
    if (!(_DWORD)result)
      break;
    v8 = result;
    v91 = 0;
    v90 = 0;
    memset(v93, 0, 128);
    memset(v92, 0, sizeof(v92));
    v89 = 0;
    if (v4)
      MutableCopy = CFArrayCreateMutableCopy(0, 0, v4);
    else
      MutableCopy = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    v10 = MutableCopy;
    if (!MutableCopy)
      sub_1000659E8();
    Name = IORegistryEntryGetName(v8, v92);
    if (Name)
    {
      v12 = Name;
      v13 = (os_log_t)p_base_props[349];
      if (!v13)
      {
        v13 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        p_base_props[349] = (__objc2_prop_list *)v13;
      }
      v14 = _SC_syslog_os_log_mapping(5);
      if (!__SC_log_enabled(5, v13, v14))
        goto LABEL_54;
      v15 = _os_log_pack_size(8);
      v18 = (char *)&v83 - ((__chkstk_darwin(v15, v16, v17) + 15) & 0xFFFFFFFFFFFFFFF0);
      v19 = __error();
      v20 = v15;
      v5 = v88;
      v21 = (_DWORD *)_os_log_pack_fill(v18, v20, *v19, &_mh_execute_header, "IORegistryEntryGetName() returned %d", v83.n128_u32[0]);
      *v21 = v86.n128_u32[0];
      v21[1] = v12;
      v22 = v18;
      p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
      __SC_log_send(5, v13, v14, v22);
      v23 = 1;
      v4 = v87;
    }
    else
    {
      Mutable = CFStringCreateMutable(0, 0);
      CFStringAppendCString(Mutable, v92, 0x8000100u);
      LocationInPlane = IORegistryEntryGetLocationInPlane(v8, "IOService", v93);
      if (LocationInPlane != -536870160)
      {
        v23 = LocationInPlane;
        if (LocationInPlane)
        {
          v36 = (os_log_t)p_base_props[349];
          if (!v36)
          {
            v36 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
            p_base_props[349] = (__objc2_prop_list *)v36;
          }
          v37 = _SC_syslog_os_log_mapping(5);
          if (__SC_log_enabled(5, v36, v37))
          {
            v38 = _os_log_pack_size(8);
            v84 = &v83;
            v41 = (char *)&v83 - ((__chkstk_darwin(v38, v39, v40) + 15) & 0xFFFFFFFFFFFFFFF0);
            v42 = __error();
            v43 = v38;
            p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
            v44 = (_DWORD *)_os_log_pack_fill(v41, v43, *v42, &_mh_execute_header, "IORegistryEntryGetLocationInPlane() returned %d", v83.n128_u32[0]);
            *v44 = v86.n128_u32[0];
            v44[1] = v23;
            v45 = v41;
            v4 = v87;
            __SC_log_send(5, v36, v37, v45);
          }
          CFRelease(Mutable);
          goto LABEL_53;
        }
        CFStringAppendCString(Mutable, "@", 0x8000100u);
        CFStringAppendCString(Mutable, v93, 0x8000100u);
      }
      CFArrayAppendValue(v10, Mutable);
      CFRelease(Mutable);
      BusyStateAndTime = IOServiceGetBusyStateAndTime(v8, &v89, &v90, &v91);
      if (BusyStateAndTime)
      {
        v23 = BusyStateAndTime;
        v27 = (os_log_t)p_base_props[349];
        if (!v27)
        {
          v27 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
          p_base_props[349] = (__objc2_prop_list *)v27;
        }
        v28 = _SC_syslog_os_log_mapping(5);
        if (!__SC_log_enabled(5, v27, v28))
          goto LABEL_54;
        v29 = _os_log_pack_size(8);
        v32 = (char *)&v83 - ((__chkstk_darwin(v29, v30, v31) + 15) & 0xFFFFFFFFFFFFFFF0);
        v33 = *__error();
        v34 = v29;
        v4 = v87;
        v35 = (_DWORD *)_os_log_pack_fill(v32, v34, v33, &_mh_execute_header, "IOServiceGetBusyStateAndTime() returned %d");
        goto LABEL_52;
      }
      if (v90)
      {
        if (!(*v85)++)
        {
          v47 = (os_log_t)p_base_props[349];
          if (!v47)
          {
            v47 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
            p_base_props[349] = (__objc2_prop_list *)v47;
          }
          v48 = _SC_syslog_os_log_mapping(3);
          if (__SC_log_enabled(3, v47, v48))
          {
            v49 = _os_log_pack_size(2);
            v52 = (char *)&v83 - ((__chkstk_darwin(v49, v50, v51) + 15) & 0xFFFFFFFFFFFFFFF0);
            v53 = __error();
            v54 = v49;
            v4 = v87;
            *(_WORD *)_os_log_pack_fill(v52, v54, *v53, &_mh_execute_header, "Busy services :") = 0;
            __SC_log_send(3, v47, v48, v52);
            p_base_props = &QoSMarkingController__classData.base_props;
          }
        }
        v55 = CFStringCreateByCombiningStrings(0, v10, CFSTR("/"));
        v56 = (os_log_t)p_base_props[349];
        if (!v56)
        {
          v56 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
          p_base_props[349] = (__objc2_prop_list *)v56;
        }
        v57 = _SC_syslog_os_log_mapping(3);
        if (__SC_log_enabled(3, v56, v57))
        {
          v58 = _os_log_pack_size(58);
          v61 = (char *)&v83 - ((__chkstk_darwin(v58, v59, v60) + 15) & 0xFFFFFFFFFFFFFFF0);
          v62 = __error();
          v63 = v58;
          v4 = v87;
          v64 = _os_log_pack_fill(v61, v63, *v62, &_mh_execute_header, "  %@ [%s%s%s%u, %llu ms]");
          v65 = "!registered, ";
          if ((v89 & 2) != 0)
            v65 = "";
          v66 = "!matched, ";
          if ((v89 & 4) != 0)
            v66 = "";
          v67 = "inactive, ";
          if ((v89 & 1) == 0)
            v67 = "";
          v68 = v90;
          v69 = v91;
          *(_DWORD *)v64 = v83.n128_u32[0];
          *(_QWORD *)(v64 + 4) = v55;
          *(_WORD *)(v64 + 12) = 2080;
          *(_QWORD *)(v64 + 14) = v65;
          *(_WORD *)(v64 + 22) = 2080;
          *(_QWORD *)(v64 + 24) = v66;
          *(_WORD *)(v64 + 32) = 2080;
          *(_QWORD *)(v64 + 34) = v67;
          *(_WORD *)(v64 + 42) = 1024;
          *(_DWORD *)(v64 + 44) = v68;
          *(_WORD *)(v64 + 48) = 2048;
          *(_QWORD *)(v64 + 50) = v69 / 0xF4240;
          v70 = v61;
          p_base_props = &QoSMarkingController__classData.base_props;
          __SC_log_send(3, v56, v57, v70);
        }
        CFRelease(v55);
        v5 = v88;
      }
      v71 = IORegistryIteratorEnterEntry(v5);
      if (v71)
      {
        v23 = v71;
        v27 = (os_log_t)p_base_props[349];
        if (!v27)
        {
          v27 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
          p_base_props[349] = (__objc2_prop_list *)v27;
        }
        v28 = _SC_syslog_os_log_mapping(5);
        if (!__SC_log_enabled(5, v27, v28))
          goto LABEL_54;
        v72 = _os_log_pack_size(8);
        v32 = (char *)&v83 - ((__chkstk_darwin(v72, v73, v74) + 15) & 0xFFFFFFFFFFFFFFF0);
        v75 = *__error();
        v76 = v72;
        v4 = v87;
        v35 = (_DWORD *)_os_log_pack_fill(v32, v76, v75, &_mh_execute_header, "IORegistryIteratorEnterEntry() returned %d");
        goto LABEL_52;
      }
      sub_10001E68C(v5, v10, v85);
      v23 = IORegistryIteratorExitEntry(v5);
      if (v23)
      {
        v27 = (os_log_t)p_base_props[349];
        if (!v27)
        {
          v27 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
          p_base_props[349] = (__objc2_prop_list *)v27;
        }
        v28 = _SC_syslog_os_log_mapping(5);
        if (!__SC_log_enabled(5, v27, v28))
        {
LABEL_54:
          v23 = 1;
          goto LABEL_55;
        }
        v77 = _os_log_pack_size(8);
        v32 = (char *)&v83 - ((__chkstk_darwin(v77, v78, v79) + 15) & 0xFFFFFFFFFFFFFFF0);
        v80 = *__error();
        v81 = v77;
        v4 = v87;
        v35 = (_DWORD *)_os_log_pack_fill(v32, v81, v80, &_mh_execute_header, "IORegistryIteratorExitEntry() returned %d");
LABEL_52:
        *v35 = v86.n128_u32[0];
        v35[1] = v23;
        v82 = v32;
        p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
        __SC_log_send(5, v27, v28, v82);
        v23 = 1;
LABEL_53:
        v5 = v88;
      }
    }
LABEL_55:
    CFRelease(v10);
    result = IOObjectRelease(v8);
  }
  while (!v23);
  return result;
}

void sub_10001EEC4()
{
  const __CFArray *v0;
  uint64_t Count;
  BOOL v2;
  os_log_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t *v13;
  const void *v14;
  NSObject *v15;
  _QWORD block[5];
  CFRange v17;

  if (!dword_10007DAF0)
    return;
  v0 = (const __CFArray *)qword_10007DB58;
  if (qword_10007DB58)
  {
    Count = CFArrayGetCount((CFArrayRef)qword_10007DB58);
    if (Count >= 2)
    {
      v17.length = Count;
      v17.location = 0;
      CFArraySortValues((CFMutableArrayRef)qword_10007DB58, v17, (CFComparatorFunction)&_SCNetworkInterfaceCompare, 0);
    }
    sub_10001F1AC((const __CFArray *)qword_10007DB58);
    v0 = (const __CFArray *)qword_10007DB58;
  }
  sub_10001F654(v0);
  if (&kLockdownNotificationTrustedPTPAttached)
    v2 = &kLockdownNotificationTrustedHostAttached == 0;
  else
    v2 = 1;
  if (!v2
    && &kLockdownNotificationHostDetached != 0
    && &kLockdownNotificationHostAttached != 0
    && &_lockdown_is_host_trusted != 0)
  {
    sub_10001F9D8((const __CFArray *)qword_10007DB58);
  }
  if (dword_10007DB10)
  {
    if (qword_10007DB48 && !CFArrayGetCount((CFArrayRef)qword_10007DB48))
    {
      sub_10001CFCC((__CFDictionary *)qword_10007DB18, CFSTR("*COMPLETE*"));
      v6 = (os_log_t)qword_10007DAE8;
      if (!qword_10007DAE8)
      {
        v6 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        qword_10007DAE8 = (uint64_t)v6;
      }
      v7 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v6, v7))
      {
        v8 = _os_log_pack_size(2);
        v11 = (char *)block - ((__chkstk_darwin(v8, v9, v10) + 15) & 0xFFFFFFFFFFFFFFF0);
        v12 = __error();
        *(_WORD *)_os_log_pack_fill(v11, v8, *v12, &_mh_execute_header, "last boot interfaces have been named") = 0;
        __SC_log_send(6, v6, v7, v11);
      }
      sub_10001D9A4();
      v13 = &qword_10007DB48;
      CFRelease((CFTypeRef)qword_10007DB48);
      goto LABEL_37;
    }
    return;
  }
  sub_10001FDF8();
  sub_10001DCEC((CFPropertyListRef)qword_10007DAF8);
  sub_10001C880(0, 2);
  sub_10001D9A4();
  if ((os_variant_is_darwinos("com.apple.SystemConfiguration.InterfaceNamer") & 1) != 0 || byte_10007DB29)
  {
    v14 = (const void *)qword_10007DB58;
    if (qword_10007DBA8 == -1)
    {
      if (!qword_10007DB58)
        goto LABEL_33;
      goto LABEL_32;
    }
    dispatch_once(&qword_10007DBA8, &stru_100076400);
    if (v14)
    {
LABEL_32:
      v15 = qword_10007DBB0;
      CFRetain(v14);
      block[0] = _NSConcreteStackBlock;
      block[1] = 0x40000000;
      block[2] = sub_100024C8C;
      block[3] = &unk_1000763C0;
      block[4] = v14;
      dispatch_async(v15, block);
    }
  }
LABEL_33:
  sub_100020150();
  if (qword_10007DB48)
  {
    CFRelease((CFTypeRef)qword_10007DB48);
    qword_10007DB48 = 0;
  }
  if (qword_10007DB58)
  {
    CFRelease((CFTypeRef)qword_10007DB58);
    v13 = &qword_10007DB58;
LABEL_37:
    *v13 = 0;
  }
}

void sub_10001F1AC(const __CFArray *a1)
{
  CFIndex Count;
  __int128 v3;
  CFIndex v4;
  CFIndex v5;
  const __SCNetworkInterface *ValueAtIndex;
  os_log_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  os_log_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int *v21;
  CFStringRef BSDName;
  os_log_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  int *v29;
  const __SCNetworkInterface *v30;
  os_log_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  int *v37;
  __int128 v38;
  CFIndex v39;

  Count = CFArrayGetCount(a1);
  if (Count >= 1)
  {
    v4 = Count;
    v5 = 0;
    *(_QWORD *)&v3 = 136315650;
    v38 = v3;
    do
    {
      ValueAtIndex = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(a1, v5);
      v7 = (os_log_t)qword_10007DAE8;
      if (!qword_10007DAE8)
      {
        v7 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        qword_10007DAE8 = (uint64_t)v7;
      }
      v8 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v7, v8))
      {
        v9 = _os_log_pack_size(28);
        v12 = (char *)&v38 - ((__chkstk_darwin(v9, v10, v11) + 15) & 0xFFFFFFFFFFFFFFF0);
        v13 = __error();
        v14 = _os_log_pack_fill(v12, v9, *v13, &_mh_execute_header, "%s: %d. %@");
        *(_DWORD *)v14 = v38;
        *(_QWORD *)(v14 + 4) = "nameInterfaces";
        *(_WORD *)(v14 + 12) = 1024;
        *(_DWORD *)(v14 + 14) = v5;
        *(_WORD *)(v14 + 18) = 2112;
        *(_QWORD *)(v14 + 20) = ValueAtIndex;
        __SC_log_send(6, v7, v8, v12);
      }
      if (_SCNetworkInterfaceIsSelfNamed(ValueAtIndex))
      {
        v15 = (os_log_t)qword_10007DAE8;
        if (!qword_10007DAE8)
        {
          v15 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
          qword_10007DAE8 = (uint64_t)v15;
        }
        v16 = _SC_syslog_os_log_mapping(6);
        if (__SC_log_enabled(6, v15, v16))
        {
          v17 = _os_log_pack_size(2);
          v20 = (char *)&v38 - ((__chkstk_darwin(v17, v18, v19) + 15) & 0xFFFFFFFFFFFFFFF0);
          v21 = __error();
          *(_WORD *)_os_log_pack_fill(v20, v17, *v21, &_mh_execute_header, "Ignoring self-named interface") = 0;
          __SC_log_send(6, v15, v16, v20);
        }
      }
      else
      {
        if (_SCNetworkInterfaceGetIOInterfaceUnit(ValueAtIndex))
        {
          v39 = 0;
          BSDName = SCNetworkInterfaceGetBSDName(ValueAtIndex);
          if (!BSDName || !CFDictionaryContainsKey((CFDictionaryRef)qword_10007DB18, BSDName))
          {
            v23 = (os_log_t)qword_10007DAE8;
            if (!qword_10007DAE8)
            {
              v23 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
              qword_10007DAE8 = (uint64_t)v23;
            }
            v24 = _SC_syslog_os_log_mapping(6);
            if (__SC_log_enabled(6, v23, v24))
            {
              v25 = _os_log_pack_size(2);
              v28 = (char *)&v38 - ((__chkstk_darwin(v25, v26, v27) + 15) & 0xFFFFFFFFFFFFFFF0);
              v29 = __error();
              *(_WORD *)_os_log_pack_fill(v28, v25, *v29, &_mh_execute_header, "Interface already has a unit number") = 0;
              __SC_log_send(6, v23, v24, v28);
            }
            sub_100020448(ValueAtIndex);
          }
          if (qword_10007DB48 && sub_100020644((const __CFArray *)qword_10007DB48, (uint64_t)ValueAtIndex, &v39))
            goto LABEL_22;
          goto LABEL_23;
        }
        v30 = (const __SCNetworkInterface *)sub_100020C5C(ValueAtIndex, a1, v5);
        if (v30)
        {
          ValueAtIndex = v30;
          sub_100020448(v30);
          CFArraySetValueAtIndex(a1, v5, ValueAtIndex);
          CFRelease(ValueAtIndex);
          if (_SCNetworkInterfaceIsBuiltin(ValueAtIndex))
          {
            if (qword_10007DB48)
            {
              v39 = 0;
              if (sub_100021A24((const __CFArray *)qword_10007DB48, (uint64_t)ValueAtIndex, &v39))
              {
                v31 = (os_log_t)qword_10007DAE8;
                if (!qword_10007DAE8)
                {
                  v31 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
                  qword_10007DAE8 = (uint64_t)v31;
                }
                v32 = _SC_syslog_os_log_mapping(7);
                if (__SC_log_enabled(7, v31, v32))
                {
                  v33 = _os_log_pack_size(2);
                  v36 = (char *)&v38 - ((__chkstk_darwin(v33, v34, v35) + 15) & 0xFFFFFFFFFFFFFFF0);
                  v37 = __error();
                  *(_WORD *)_os_log_pack_fill(v36, v33, *v37, &_mh_execute_header, "  and updated database (new address)") = 0;
                  __SC_log_send(7, v31, v32, v36);
                }
LABEL_22:
                CFArrayRemoveValueAtIndex((CFMutableArrayRef)qword_10007DB48, v39);
              }
            }
          }
LABEL_23:
          if (!_SCNetworkInterfaceIsEphemeral(ValueAtIndex))
            sub_100020788(ValueAtIndex);
        }
      }
      ++v5;
    }
    while (v4 != v5);
  }
}

void sub_10001F654(const __CFArray *a1)
{
  CFIndex Count;
  __int128 v3;
  CFIndex v4;
  int v5;
  CFIndex v6;
  __objc2_prop_list **p_base_props;
  __objc2_prop_list **v8;
  const void *ValueAtIndex;
  __CFData *v10;
  __CFData *v11;
  CFStringRef BSDName;
  os_log_t v13;
  CFStringRef v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int *v20;
  uint64_t v21;
  os_log_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  int *v29;
  uint64_t v30;
  char *v31;
  os_log_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  __CFArray *Mutable;
  __int128 v40;

  if (a1)
  {
    Count = CFArrayGetCount(a1);
    if (Count >= 1)
    {
      v4 = Count;
      v5 = 0;
      v6 = 0;
      p_base_props = &QoSMarkingController__classData.base_props;
      v8 = &QoSMarkingController__classData.base_props;
      *(_QWORD *)&v3 = 138412290;
      v40 = v3;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a1, v6);
        if (_SCNetworkInterfaceIsApplePreconfigured(ValueAtIndex))
        {
          if (!sub_100023548((_BOOL8)p_base_props[366], ValueAtIndex))
          {
            v10 = sub_100023624(ValueAtIndex, (uint64_t)sub_100023804);
            if (v10)
              break;
          }
        }
LABEL_24:
        if (v4 == ++v6)
        {
          if (v5)
            sub_100023B28();
          return;
        }
      }
      v11 = v10;
      BSDName = SCNetworkInterfaceGetBSDName((SCNetworkInterfaceRef)ValueAtIndex);
      v13 = (os_log_t)v8[349];
      if (BSDName)
      {
        v14 = BSDName;
        if (!v13)
        {
          v13 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
          v8[349] = (__objc2_prop_list *)v13;
        }
        v15 = _SC_syslog_os_log_mapping(6);
        if (!__SC_log_enabled(6, v13, v15))
          goto LABEL_21;
        v16 = _os_log_pack_size(12);
        v19 = (char *)&v40 - ((__chkstk_darwin(v16, v17, v18) + 15) & 0xFFFFFFFFFFFFFFF0);
        v20 = __error();
        v21 = _os_log_pack_fill(v19, v16, *v20, &_mh_execute_header, "watching [pre-configured] interface: %@");
        *(_DWORD *)v21 = v40;
        *(_QWORD *)(v21 + 4) = v14;
        v22 = v13;
        v23 = v15;
      }
      else
      {
        if (!v13)
        {
          v13 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
          v8[349] = (__objc2_prop_list *)v13;
        }
        v24 = _SC_syslog_os_log_mapping(6);
        if (__SC_log_enabled(6, v13, v24))
        {
          v25 = _os_log_pack_size(2);
          v28 = (char *)&v40 - ((__chkstk_darwin(v25, v26, v27) + 15) & 0xFFFFFFFFFFFFFFF0);
          v29 = __error();
          v30 = v25;
          p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
          *(_WORD *)_os_log_pack_fill(v28, v30, *v29, &_mh_execute_header, "watching [pre-configured] interface w/no BSD name") = 0;
          v31 = v28;
          v8 = &QoSMarkingController__classData.base_props;
          __SC_log_send(6, v13, v24, v31);
        }
        v32 = (os_log_t)v8[349];
        if (!v32)
        {
          v32 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
          v8[349] = (__objc2_prop_list *)v32;
        }
        v33 = _SC_syslog_os_log_mapping(6);
        if (!__SC_log_enabled(6, v32, v33))
          goto LABEL_21;
        v34 = _os_log_pack_size(12);
        v19 = (char *)&v40 - ((__chkstk_darwin(v34, v35, v36) + 15) & 0xFFFFFFFFFFFFFFF0);
        v37 = __error();
        v38 = _os_log_pack_fill(v19, v34, *v37, &_mh_execute_header, "  interface = %@");
        *(_DWORD *)v38 = v40;
        *(_QWORD *)(v38 + 4) = ValueAtIndex;
        v22 = v32;
        v23 = v33;
      }
      __SC_log_send(6, v22, v23, v19);
      p_base_props = &QoSMarkingController__classData.base_props;
      v8 = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
LABEL_21:
      Mutable = (__CFArray *)p_base_props[366];
      if (!Mutable)
      {
        Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
        p_base_props[366] = (__objc2_prop_list *)Mutable;
      }
      CFArrayAppendValue(Mutable, v11);
      CFRelease(v11);
      v5 = 1;
      goto LABEL_24;
    }
  }
}

void sub_10001F9D8(const __CFArray *a1)
{
  CFIndex Count;
  __int128 v3;
  CFIndex v4;
  int v5;
  CFIndex v6;
  __objc2_prop_list **p_base_props;
  __objc2_prop_list **v8;
  const void *ValueAtIndex;
  __CFData *v10;
  __CFData *v11;
  CFStringRef BSDName;
  os_log_t v13;
  CFStringRef v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int *v20;
  uint64_t v21;
  os_log_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  int *v29;
  uint64_t v30;
  char *v31;
  os_log_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  __CFArray *Mutable;
  CFRunLoopRef Current;
  __int128 v41;
  _QWORD block[5];

  if (!a1)
    return;
  Count = CFArrayGetCount(a1);
  if (Count < 1)
    return;
  v4 = Count;
  v5 = 0;
  v6 = 0;
  p_base_props = &QoSMarkingController__classData.base_props;
  v8 = &QoSMarkingController__classData.base_props;
  *(_QWORD *)&v3 = 138412290;
  v41 = v3;
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex(a1, v6);
    if (!_SCNetworkInterfaceIsTrustRequired())
      goto LABEL_24;
    if (sub_100023548((_BOOL8)p_base_props[367], ValueAtIndex))
      goto LABEL_24;
    v10 = sub_100023624(ValueAtIndex, (uint64_t)sub_100024030);
    if (!v10)
      goto LABEL_24;
    v11 = v10;
    BSDName = SCNetworkInterfaceGetBSDName((SCNetworkInterfaceRef)ValueAtIndex);
    v13 = (os_log_t)v8[349];
    if (BSDName)
    {
      v14 = BSDName;
      if (!v13)
      {
        v13 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        v8[349] = (__objc2_prop_list *)v13;
      }
      v15 = _SC_syslog_os_log_mapping(6);
      if (!__SC_log_enabled(6, v13, v15))
        goto LABEL_21;
      v16 = _os_log_pack_size(12);
      v19 = (char *)&block[-2] - ((__chkstk_darwin(v16, v17, v18) + 15) & 0xFFFFFFFFFFFFFFF0);
      v20 = __error();
      v21 = _os_log_pack_fill(v19, v16, *v20, &_mh_execute_header, "watching [trust required] interface: %@");
      *(_DWORD *)v21 = v41;
      *(_QWORD *)(v21 + 4) = v14;
      v22 = v13;
      v23 = v15;
    }
    else
    {
      if (!v13)
      {
        v13 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        v8[349] = (__objc2_prop_list *)v13;
      }
      v24 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v13, v24))
      {
        v25 = _os_log_pack_size(2);
        v28 = (char *)&block[-2] - ((__chkstk_darwin(v25, v26, v27) + 15) & 0xFFFFFFFFFFFFFFF0);
        v29 = __error();
        v30 = v25;
        p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
        *(_WORD *)_os_log_pack_fill(v28, v30, *v29, &_mh_execute_header, "watching [trust required] interface w/no BSD name") = 0;
        v31 = v28;
        v8 = &QoSMarkingController__classData.base_props;
        __SC_log_send(6, v13, v24, v31);
      }
      v32 = (os_log_t)v8[349];
      if (!v32)
      {
        v32 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        v8[349] = (__objc2_prop_list *)v32;
      }
      v33 = _SC_syslog_os_log_mapping(6);
      if (!__SC_log_enabled(6, v32, v33))
        goto LABEL_21;
      v34 = _os_log_pack_size(12);
      v19 = (char *)&block[-2] - ((__chkstk_darwin(v34, v35, v36) + 15) & 0xFFFFFFFFFFFFFFF0);
      v37 = __error();
      v38 = _os_log_pack_fill(v19, v34, *v37, &_mh_execute_header, "  interface = %@");
      *(_DWORD *)v38 = v41;
      *(_QWORD *)(v38 + 4) = ValueAtIndex;
      v22 = v32;
      v23 = v33;
    }
    __SC_log_send(6, v22, v23, v19);
    p_base_props = &QoSMarkingController__classData.base_props;
    v8 = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
LABEL_21:
    Mutable = (__CFArray *)p_base_props[367];
    if (!Mutable)
    {
      Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
      p_base_props[367] = (__objc2_prop_list *)Mutable;
    }
    CFArrayAppendValue(Mutable, v11);
    CFRelease(v11);
    v5 = 1;
LABEL_24:
    ++v6;
  }
  while (v4 != v6);
  if (v5)
  {
    Current = CFRunLoopGetCurrent();
    if (qword_10007DB80 != -1)
      dispatch_once(&qword_10007DB80, &stru_1000762C0);
    CFRetain(Current);
    if (qword_10007DB88 != -1)
      dispatch_once(&qword_10007DB88, &stru_100076360);
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = sub_1000245B0;
    block[3] = &unk_1000762E0;
    block[4] = Current;
    dispatch_async((dispatch_queue_t)qword_10007DB90, block);
  }
}

void sub_10001FDF8()
{
  BOOL v0;
  CFIndex Count;
  __int128 v2;
  CFIndex v3;
  uint64_t v4;
  const __CFDictionary *ValueAtIndex;
  const void *v6;
  CFTypeID TypeID;
  const void *v8;
  CFTypeID v9;
  const void *v10;
  CFTypeID v11;
  os_log_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  const __CFArray *v18;
  CFIndex v19;
  CFIndex v20;
  CFIndex v21;
  const __CFDictionary *v22;
  const void *v23;
  const __CFDictionary *v24;
  CFTypeID v25;
  void *v26;
  CFTypeID v27;
  _QWORD v28[2];
  __int128 v29;
  void *value;
  int valuePtr;

  if (qword_10007DAF8)
    v0 = qword_10007DB48 == 0;
  else
    v0 = 1;
  if (!v0)
  {
    Count = CFArrayGetCount((CFArrayRef)qword_10007DB48);
    if (Count >= 1)
    {
      v3 = Count;
      *(_QWORD *)&v2 = 138412290;
      v29 = v2;
      do
      {
        v4 = v3--;
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)qword_10007DB48, v3);
        v6 = CFDictionaryGetValue(ValueAtIndex, CFSTR("BSD Name"));
        TypeID = CFStringGetTypeID();
        if (v6)
        {
          if (CFGetTypeID(v6) == TypeID)
          {
            v8 = CFDictionaryGetValue(ValueAtIndex, CFSTR("HiddenConfiguration"));
            v9 = CFBooleanGetTypeID();
            if (v8)
            {
              if (CFGetTypeID(v8) == v9 && CFBooleanGetValue((CFBooleanRef)v8))
              {
                v10 = CFDictionaryGetValue(ValueAtIndex, CFSTR("IOBuiltin"));
                v11 = CFBooleanGetTypeID();
                if (v10)
                {
                  if (CFGetTypeID(v10) == v11 && CFBooleanGetValue((CFBooleanRef)v10))
                    goto LABEL_15;
                }
                v24 = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, CFSTR("SCNetworkInterfaceInfo"));
                v25 = CFDictionaryGetTypeID();
                if (v24)
                {
                  if (CFGetTypeID(v24) == v25)
                  {
                    valuePtr = 0;
                    value = 0;
                    if (CFDictionaryGetValueIfPresent(v24, CFSTR("idVendor"), (const void **)&value))
                    {
                      v26 = value;
                      v27 = CFNumberGetTypeID();
                      if (v26)
                      {
                        if (CFGetTypeID(v26) == v27
                          && CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &valuePtr)
                          && valuePtr == 1452)
                        {
LABEL_15:
                          v12 = (os_log_t)qword_10007DAE8;
                          if (!qword_10007DAE8)
                          {
                            v12 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
                            qword_10007DAE8 = (uint64_t)v12;
                          }
                          v13 = _SC_syslog_os_log_mapping(6);
                          if (__SC_log_enabled(6, v12, v13))
                          {
                            v14 = _os_log_pack_size(12);
                            v28[1] = v28;
                            v15 = (char *)v28 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
                            v16 = __error();
                            v17 = _os_log_pack_fill(v15, v14, *v16, &_mh_execute_header, "Removing no-longer-active \"hidden\" interface: %@");
                            *(_DWORD *)v17 = v29;
                            *(_QWORD *)(v17 + 4) = v6;
                            __SC_log_send(6, v12, v13, v15);
                          }
                          v18 = (const __CFArray *)qword_10007DAF8;
                          if (qword_10007DAF8)
                          {
                            v19 = CFArrayGetCount((CFArrayRef)qword_10007DAF8);
                            if (v19 >= 1)
                            {
                              v20 = v19;
                              v21 = 0;
                              while (1)
                              {
                                v22 = (const __CFDictionary *)CFArrayGetValueAtIndex(v18, v21);
                                v23 = CFDictionaryGetValue(v22, CFSTR("BSD Name"));
                                if (v23 == v6 || v23 && CFEqual(v23, v6))
                                  break;
                                if (v20 == ++v21)
                                  goto LABEL_37;
                              }
                              if (v22)
                              {
                                CFArrayRemoveValueAtIndex((CFMutableArrayRef)qword_10007DAF8, v21);
                                CFArrayRemoveValueAtIndex((CFMutableArrayRef)qword_10007DB48, v3);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_37:
        ;
      }
      while (v4 > 1);
    }
  }
}

CFIndex sub_100020150()
{
  CFIndex result;
  os_log_t v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  char *v5;
  int *v6;
  uint64_t v7;
  const char *v8;
  CFIndex v9;
  const __CFDictionary *ValueAtIndex;
  const __CFString *Value;
  const void *v12;
  const void *v13;
  os_log_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int *v18;
  uint64_t v19;
  const char *v20;
  const char *v21;
  const __CFString *v22;
  __int128 v23;
  unint64_t v24;

  result = qword_10007DB48;
  if (qword_10007DB48)
  {
    result = CFArrayGetCount((CFArrayRef)qword_10007DB48);
    v24 = result;
    if (result >= 1)
    {
      v1 = (os_log_t)qword_10007DAE8;
      if (!qword_10007DAE8)
      {
        v1 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        qword_10007DAE8 = (uint64_t)v1;
      }
      v2 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v1, v2))
      {
        v4 = _os_log_pack_size(12);
        v5 = (char *)&v23 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
        v6 = __error();
        v7 = _os_log_pack_fill(v5, v4, *v6, &_mh_execute_header, "Interface%s not [yet] active", (const char *)v23);
        v8 = "s";
        if (v24 <= 1)
          v8 = "";
        *(_DWORD *)v7 = 136315138;
        *(_QWORD *)(v7 + 4) = v8;
        __SC_log_send(6, v1, v2, v5);
      }
      v9 = 0;
      *(_QWORD *)&v3 = 136316162;
      v23 = v3;
      do
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)qword_10007DB48, v9);
        Value = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, CFSTR("BSD Name"));
        v12 = CFDictionaryGetValue(ValueAtIndex, CFSTR("IOInterfaceNamePrefix"));
        v13 = CFDictionaryGetValue(ValueAtIndex, CFSTR("IOInterfaceUnit"));
        v14 = (os_log_t)qword_10007DAE8;
        if (!qword_10007DAE8)
        {
          v14 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
          qword_10007DAE8 = (uint64_t)v14;
        }
        v15 = _SC_syslog_os_log_mapping(6);
        result = __SC_log_enabled(6, v14, v15);
        if ((_DWORD)result)
        {
          v16 = _os_log_pack_size(52);
          v17 = (char *)&v23 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
          v18 = __error();
          v19 = _os_log_pack_fill(v17, v16, *v18, &_mh_execute_header, "  %s%@%sPrefix: %@, Unit: %@");
          *(_DWORD *)v19 = v23;
          v20 = "";
          v21 = "BSD Name: ";
          if (!Value)
            v21 = "";
          *(_QWORD *)(v19 + 4) = v21;
          v22 = &stru_100077E20;
          if (Value)
          {
            v22 = Value;
            v20 = ", ";
          }
          *(_WORD *)(v19 + 12) = 2112;
          *(_QWORD *)(v19 + 14) = v22;
          *(_WORD *)(v19 + 22) = 2080;
          *(_QWORD *)(v19 + 24) = v20;
          *(_WORD *)(v19 + 32) = 2112;
          *(_QWORD *)(v19 + 34) = v12;
          *(_WORD *)(v19 + 42) = 2112;
          *(_QWORD *)(v19 + 44) = v13;
          result = __SC_log_send(6, v14, v15, v17);
        }
        ++v9;
      }
      while (v24 != v9);
    }
  }
  return result;
}

uint64_t sub_100020448(const __SCNetworkInterface *a1)
{
  CFStringRef BSDName;
  uint64_t IOInterfaceUnit;
  uint64_t IOInterfaceNamePrefix;
  CFStringRef HardwareAddressString;
  os_log_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  const __CFString *v15;
  const __CFString *v16;
  const char *v17;
  const char *v18;
  const __CFString *v19;
  uint64_t v20;

  BSDName = SCNetworkInterfaceGetBSDName(a1);
  IOInterfaceUnit = _SCNetworkInterfaceGetIOInterfaceUnit(a1);
  IOInterfaceNamePrefix = _SCNetworkInterfaceGetIOInterfaceNamePrefix(a1);
  HardwareAddressString = SCNetworkInterfaceGetHardwareAddressString(a1);
  v6 = (os_log_t)qword_10007DAE8;
  if (!qword_10007DAE8)
  {
    v6 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    qword_10007DAE8 = (uint64_t)v6;
  }
  v7 = _SC_syslog_os_log_mapping(6);
  result = __SC_log_enabled(6, v6, v7);
  if ((_DWORD)result)
  {
    v9 = _os_log_pack_size(82);
    v10 = (char *)&v20 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    v11 = __error();
    v12 = _os_log_pack_fill(v10, v9, *v11, &_mh_execute_header, "  %s%@%sPrefix: %@, %s%@%sMAC address: %@");
    v13 = "BSD Name: ";
    v14 = "";
    *(_DWORD *)v12 = 136316930;
    if (!BSDName)
      v13 = "";
    *(_QWORD *)(v12 + 4) = v13;
    *(_WORD *)(v12 + 12) = 2112;
    v15 = &stru_100077E20;
    if (BSDName)
      v16 = BSDName;
    else
      v16 = &stru_100077E20;
    *(_QWORD *)(v12 + 14) = v16;
    *(_WORD *)(v12 + 22) = 2080;
    if (BSDName)
      v17 = ", ";
    else
      v17 = "";
    *(_QWORD *)(v12 + 24) = v17;
    *(_WORD *)(v12 + 32) = 2112;
    *(_QWORD *)(v12 + 34) = IOInterfaceNamePrefix;
    v18 = "Unit: ";
    if (IOInterfaceUnit)
      v15 = (const __CFString *)IOInterfaceUnit;
    else
      v18 = "";
    if (IOInterfaceUnit)
      v14 = ", ";
    *(_WORD *)(v12 + 42) = 2080;
    *(_QWORD *)(v12 + 44) = v18;
    *(_WORD *)(v12 + 52) = 2112;
    *(_QWORD *)(v12 + 54) = v15;
    if (HardwareAddressString)
      v19 = HardwareAddressString;
    else
      v19 = CFSTR("?");
    *(_WORD *)(v12 + 62) = 2080;
    *(_QWORD *)(v12 + 64) = v14;
    *(_WORD *)(v12 + 72) = 2112;
    *(_QWORD *)(v12 + 74) = v19;
    return __SC_log_send(6, v6, v7, v10);
  }
  return result;
}

const __CFDictionary *sub_100020644(const __CFArray *a1, uint64_t a2, CFIndex *a3)
{
  const void *IOInterfaceNamePrefix;
  uint64_t HardwareAddress;
  const __CFDictionary *ValueAtIndex;
  const void *v9;
  CFIndex Count;
  CFIndex v11;
  CFIndex v12;
  const void *Value;
  const void *v14;
  const void *v15;
  CFIndex *v17;

  if (!a1)
    return 0;
  IOInterfaceNamePrefix = (const void *)_SCNetworkInterfaceGetIOInterfaceNamePrefix(a2);
  HardwareAddress = _SCNetworkInterfaceGetHardwareAddress(a2);
  ValueAtIndex = 0;
  if (!IOInterfaceNamePrefix)
    return ValueAtIndex;
  v9 = (const void *)HardwareAddress;
  if (!HardwareAddress)
    return ValueAtIndex;
  Count = CFArrayGetCount(a1);
  if (Count < 1)
    return 0;
  v11 = Count;
  v17 = a3;
  v12 = 0;
  while (1)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v12);
    Value = CFDictionaryGetValue(ValueAtIndex, CFSTR("IOInterfaceNamePrefix"));
    v14 = CFDictionaryGetValue(ValueAtIndex, CFSTR("IOMACAddress"));
    if (Value)
    {
      v15 = v14;
      if (v14)
      {
        if (CFEqual(IOInterfaceNamePrefix, Value) && CFEqual(v9, v15))
          break;
      }
    }
    if (v11 == ++v12)
      return 0;
  }
  if (v17)
    *v17 = v12;
  return ValueAtIndex;
}

void sub_100020788(const __SCNetworkInterface *a1)
{
  const __CFArray *Mutable;
  const __CFDictionary *v3;
  CFIndex Count;
  CFStringRef BSDName;
  int IsBuiltin;
  const __CFArray *v7;
  const __CFArray *Value;
  const void *v9;
  const void *HardwareAddress;
  const void *v11;
  const __CFArray *MutableCopy;
  CFIndex FirstIndexOfValue;
  CFIndex v14;
  CFIndex v15;
  unint64_t v16;
  __CFDictionary *v17;
  const void *v18;
  const void *v19;
  const void *IOPath;
  const void *IOInterfaceNamePrefix;
  const void *IOInterfaceType;
  const void *IOInterfaceUnit;
  const void *v24;
  CFStringRef v25;
  CFStringRef InterfaceType;
  CFBooleanRef v27;
  const __CFString *v28;
  uint64_t v29;
  const __CFNumber *v30;
  CFIndex v31;
  const __CFDictionary *ValueAtIndex;
  const __CFString *v33;
  const __CFNumber *v34;
  CFComparisonResult v35;
  CFTypeRef cf;
  CFRange v37;
  CFRange v38;

  cf = 0;
  if (qword_10007DAF8)
  {
    sub_100021B68((const __CFArray *)qword_10007DAF8, (uint64_t)a1, &cf);
    Mutable = (const __CFArray *)qword_10007DAF8;
    v3 = (const __CFDictionary *)cf;
  }
  else
  {
    Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    v3 = 0;
    qword_10007DAF8 = (uint64_t)Mutable;
  }
  Count = CFArrayGetCount(Mutable);
  BSDName = SCNetworkInterfaceGetBSDName(a1);
  if (BSDName)
    sub_10001CFCC((__CFDictionary *)qword_10007DB18, BSDName);
  IsBuiltin = _SCNetworkInterfaceIsBuiltin(a1);
  v7 = 0;
  if (v3 && !IsBuiltin)
  {
    Value = (const __CFArray *)CFDictionaryGetValue(v3, CFSTR("MatchingMACs"));
    v7 = Value;
    if (Value)
      CFRetain(Value);
    v9 = CFDictionaryGetValue(v3, CFSTR("IOMACAddress"));
    HardwareAddress = (const void *)_SCNetworkInterfaceGetHardwareAddress(a1);
    if (v9)
    {
      v11 = HardwareAddress;
      if (HardwareAddress)
      {
        if (!CFEqual(v9, HardwareAddress))
        {
          if (v7)
          {
            MutableCopy = CFArrayCreateMutableCopy(0, 0, v7);
            CFRelease(v7);
            v37.length = CFArrayGetCount(MutableCopy);
            v37.location = 0;
            FirstIndexOfValue = CFArrayGetFirstIndexOfValue(MutableCopy, v37, v11);
            if (FirstIndexOfValue != -1)
              CFArrayRemoveValueAtIndex(MutableCopy, FirstIndexOfValue);
            v38.length = CFArrayGetCount(MutableCopy);
            v38.location = 0;
            v14 = CFArrayGetFirstIndexOfValue(MutableCopy, v38, v9);
            if (v14 != -1)
              CFArrayRemoveValueAtIndex(MutableCopy, v14);
          }
          else
          {
            MutableCopy = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
          }
          CFArrayInsertValueAtIndex(MutableCopy, 0, v9);
          v15 = CFArrayGetCount(MutableCopy);
          if (v15 >= 33)
          {
            v16 = v15 + 1;
            do
            {
              CFArrayRemoveValueAtIndex(MutableCopy, v16 - 2);
              --v16;
            }
            while (v16 > 0x21);
          }
          v7 = MutableCopy;
        }
      }
    }
  }
  v17 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  v18 = (const void *)_SCNetworkInterfaceCopyInterfaceInfo(a1);
  if (v18)
  {
    v19 = v18;
    CFDictionarySetValue(v17, CFSTR("SCNetworkInterfaceInfo"), v18);
    CFRelease(v19);
  }
  IOPath = (const void *)_SCNetworkInterfaceGetIOPath(a1);
  if (IOPath)
    CFDictionarySetValue(v17, CFSTR("IOPathMatch"), IOPath);
  IOInterfaceNamePrefix = (const void *)_SCNetworkInterfaceGetIOInterfaceNamePrefix(a1);
  if (IOInterfaceNamePrefix)
    CFDictionarySetValue(v17, CFSTR("IOInterfaceNamePrefix"), IOInterfaceNamePrefix);
  IOInterfaceType = (const void *)_SCNetworkInterfaceGetIOInterfaceType(a1);
  if (IOInterfaceType)
    CFDictionarySetValue(v17, CFSTR("IOInterfaceType"), IOInterfaceType);
  IOInterfaceUnit = (const void *)_SCNetworkInterfaceGetIOInterfaceUnit(a1);
  if (IOInterfaceUnit)
    CFDictionarySetValue(v17, CFSTR("IOInterfaceUnit"), IOInterfaceUnit);
  v24 = (const void *)_SCNetworkInterfaceGetHardwareAddress(a1);
  if (v24)
    CFDictionarySetValue(v17, CFSTR("IOMACAddress"), v24);
  v25 = SCNetworkInterfaceGetBSDName(a1);
  if (v25)
    CFDictionarySetValue(v17, CFSTR("BSD Name"), v25);
  InterfaceType = SCNetworkInterfaceGetInterfaceType(a1);
  if (InterfaceType)
    CFDictionarySetValue(v17, CFSTR("SCNetworkInterfaceType"), InterfaceType);
  if (_SCNetworkInterfaceIsBuiltin(a1))
    v27 = kCFBooleanTrue;
  else
    v27 = kCFBooleanFalse;
  CFDictionarySetValue(v17, CFSTR("IOBuiltin"), v27);
  if (_SCNetworkInterfaceIsHiddenConfiguration(a1))
    CFDictionarySetValue(v17, CFSTR("HiddenConfiguration"), kCFBooleanTrue);
  if (_SCNetworkInterfaceIsHiddenInterface(a1))
    CFDictionarySetValue(v17, CFSTR("HiddenInterface"), kCFBooleanTrue);
  CFDictionarySetValue(v17, CFSTR("Active"), kCFBooleanTrue);
  if (v7)
  {
    CFDictionarySetValue(v17, CFSTR("MatchingMACs"), v7);
    CFRelease(v7);
  }
  v28 = (const __CFString *)_SCNetworkInterfaceGetIOInterfaceNamePrefix(a1);
  v29 = _SCNetworkInterfaceGetIOInterfaceUnit(a1);
  if (v28)
  {
    v30 = (const __CFNumber *)v29;
    if (v29)
    {
      if (Count < 1)
      {
LABEL_56:
        CFArrayAppendValue((CFMutableArrayRef)qword_10007DAF8, v17);
      }
      else
      {
        v31 = 0;
        while (1)
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Mutable, v31);
          v33 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, CFSTR("IOInterfaceNamePrefix"));
          v34 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("IOInterfaceUnit"));
          v35 = CFStringCompare(v28, v33, 0);
          if (v35 == kCFCompareEqualTo)
            v35 = CFNumberCompare(v30, v34, 0);
          if (v35 == kCFCompareLessThan)
            break;
          if (Count == ++v31)
            goto LABEL_56;
        }
        CFArrayInsertValueAtIndex(Mutable, v31, v17);
      }
    }
  }
  CFRelease(v17);
  if (cf)
    CFRelease(cf);
}

const void *sub_100020C5C(const __SCNetworkInterface *a1, const __CFArray *a2, uint64_t a3)
{
  const void *IOPath;
  void *IOInterfaceNamePrefix;
  int IsBuiltin;
  const void *v9;
  int v10;
  __objc2_prop_list **p_base_props;
  const __CFDictionary *v12;
  const __CFDictionary *ValueAtIndex;
  os_log_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  os_log_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  int *v28;
  uint64_t v29;
  const __CFArray *v30;
  CFIndex FirstIndexOfValue;
  int v32;
  const void *v33;
  const void *v34;
  BOOL v36;
  const void *IOInterfaceUnit;
  os_log_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  int *v44;
  uint64_t v45;
  int ReservedRange;
  os_log_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  int *v54;
  uint64_t v55;
  int v56;
  os_log_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  int *v63;
  uint64_t v64;
  int v65;
  const __CFArray *v66;
  const void **v67;
  CFStringRef InterfaceType;
  CFStringRef v69;
  const void *v70;
  const void *v71;
  CFIndex Count;
  const void *Value;
  CFTypeID TypeID;
  void *v75;
  const __CFDictionary *v76;
  CFTypeID v77;
  CFTypeID v78;
  CFDictionaryRef v79;
  const __CFDictionary *v80;
  kern_return_t MatchingServices;
  _BOOL4 v82;
  io_object_t v83;
  io_object_t v84;
  const void *v85;
  const __CFArray *v86;
  CFIndex v87;
  CFIndex v88;
  CFIndex v89;
  const __CFDictionary *v90;
  const void *v91;
  const void *v92;
  const void *v93;
  const void *v94;
  CFIndex v95;
  int v96;
  const __CFArray *v97;
  CFIndex v98;
  CFIndex v99;
  CFIndex i;
  const __CFDictionary *v101;
  const void *v102;
  const __CFNumber *v103;
  CFTypeID v104;
  int v105;
  int v106;
  os_log_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  int *v113;
  uint64_t v114;
  const char *v115;
  const __CFArray *v116;
  const __CFArray *v117;
  uint64_t HardwareAddress;
  const void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  os_log_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  int *v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  uint64_t v135;
  CFTypeRef valuePtr[4];
  const __CFArray *v137;
  io_iterator_t existing;
  void *values;
  CFDictionaryRef v140;
  void *keys;
  const __CFString *v142;
  CFRange v143;
  CFRange v144;
  CFRange v145;
  CFRange v146;

  v135 = 0;
  IOPath = (const void *)_SCNetworkInterfaceGetIOPath(a1);
  IOInterfaceNamePrefix = (void *)_SCNetworkInterfaceGetIOInterfaceNamePrefix(a1);
  IsBuiltin = _SCNetworkInterfaceIsBuiltin(a1);
  if (_SCNetworkInterfaceIsEphemeral(a1))
  {
    LODWORD(valuePtr[0]) = 0;
    v9 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
LABEL_3:
    v10 = 0;
    goto LABEL_19;
  }
  p_base_props = &QoSMarkingController__classData.base_props;
  v12 = sub_100020644((const __CFArray *)qword_10007DAF8, (uint64_t)a1, 0);
  if (!v12)
  {
    ReservedRange = NetworkInterfaceGetReservedRange((uint64_t)a1, &v135);
    if (ReservedRange)
    {
      v48 = (os_log_t)qword_10007DAE8;
      if (!qword_10007DAE8)
      {
        v48 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        qword_10007DAE8 = (uint64_t)v48;
      }
      v49 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v48, v49))
      {
        v50 = _os_log_pack_size(28);
        v53 = (char *)&v133 - ((__chkstk_darwin(v50, v51, v52) + 15) & 0xFFFFFFFFFFFFFFF0);
        v54 = __error();
        v55 = _os_log_pack_fill(v53, v50, *v54, &_mh_execute_header, "%s: %@ has reserved unit %u");
        v56 = v135;
        *(_DWORD *)v55 = 136315650;
        *(_QWORD *)(v55 + 4) = "assignNameAndCopyInterface";
        *(_WORD *)(v55 + 12) = 2112;
        *(_QWORD *)(v55 + 14) = a1;
        *(_WORD *)(v55 + 22) = 1024;
        *(_DWORD *)(v55 + 24) = v56;
        __SC_log_send(5, v48, v49, v53);
        IsBuiltin = 1;
        p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
      }
      else
      {
        IsBuiltin = 1;
      }
    }
    else if (dword_10007DB10)
    {
      v57 = (os_log_t)qword_10007DAE8;
      if (!qword_10007DAE8)
      {
        v57 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        qword_10007DAE8 = (uint64_t)v57;
      }
      v58 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v57, v58))
      {
        v59 = _os_log_pack_size(22);
        v62 = (char *)&v133 - ((__chkstk_darwin(v59, v60, v61) + 15) & 0xFFFFFFFFFFFFFFF0);
        v63 = __error();
        v64 = _os_log_pack_fill(v62, v59, *v63, &_mh_execute_header, "%s: waiting for quiet %@");
        *(_DWORD *)v64 = 136315394;
        *(_QWORD *)(v64 + 4) = "assignNameAndCopyInterface";
        *(_WORD *)(v64 + 12) = 2112;
        *(_QWORD *)(v64 + 14) = a1;
        __SC_log_send(5, v57, v58, v62);
      }
      sub_10001CFCC((__CFDictionary *)qword_10007DB18, IOPath);
      return 0;
    }
    if (_SCNetworkInterfaceIsApplePreconfigured(a1))
      goto LABEL_52;
    v66 = (const __CFArray *)p_base_props[351];
    v67 = (const void **)(IsBuiltin ? &kCFBooleanTrue : &kCFBooleanFalse);
    InterfaceType = SCNetworkInterfaceGetInterfaceType(a1);
    if (!InterfaceType)
      goto LABEL_52;
    v69 = InterfaceType;
    v70 = (const void *)_SCNetworkInterfaceGetIOInterfaceNamePrefix(a1);
    if (!v70)
      goto LABEL_52;
    v71 = *v67;
    valuePtr[1] = v69;
    valuePtr[2] = v70;
    valuePtr[0] = (CFTypeRef)_SCNetworkInterfaceCopyInterfaceInfo(a1);
    valuePtr[3] = v71;
    v137 = 0;
    if (v66)
    {
      v144.length = CFArrayGetCount(v66);
      v144.location = 0;
      CFArrayApplyFunction(v66, v144, (CFArrayApplierFunction)sub_1000222A4, valuePtr);
    }
    if (a2)
    {
      Count = CFArrayGetCount(a2);
      if (Count > a3 + 1)
      {
        v145.location = a3 + 1;
        v145.length = Count - (a3 + 1);
        CFArrayApplyFunction(a2, v145, (CFArrayApplierFunction)sub_100022430, valuePtr);
      }
    }
    if (v137)
    {
      if (CFArrayGetCount(v137) == 1)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v137, 0);
        CFRelease(v137);
        if (!ValueAtIndex)
          goto LABEL_124;
        Value = CFDictionaryGetValue(ValueAtIndex, CFSTR("BSD Name"));
        TypeID = CFStringGetTypeID();
        if (Value)
        {
          if (CFGetTypeID(Value) == TypeID)
          {
            v75 = (void *)CFDictionaryGetValue(ValueAtIndex, CFSTR("IOInterfaceNamePrefix"));
            v76 = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, CFSTR("IOInterfaceUnit"));
            v77 = CFStringGetTypeID();
            if (v75)
            {
              if (CFGetTypeID(v75) == v77)
              {
                v78 = CFNumberGetTypeID();
                if (v76)
                {
                  if (CFGetTypeID(v76) == v78)
                  {
                    existing = 0;
                    keys = CFSTR("IOInterfaceNamePrefix");
                    v142 = CFSTR("IOInterfaceUnit");
                    values = v75;
                    v140 = v76;
                    v79 = CFDictionaryCreate(0, (const void **)&keys, (const void **)&values, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                    keys = CFSTR("IOProviderClass");
                    v142 = CFSTR("IOPropertyMatch");
                    values = CFSTR("IONetworkInterface");
                    v140 = v79;
                    v80 = CFDictionaryCreate(0, (const void **)&keys, (const void **)&values, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                    CFRelease(v79);
                    MatchingServices = IOServiceGetMatchingServices(kIOMainPortDefault, v80, &existing);
                    v82 = 0;
                    v83 = existing;
                    if (!MatchingServices && existing)
                    {
                      v84 = IOIteratorNext(existing);
                      v82 = v84 != 0;
                      if (v84)
                        IOObjectRelease(v84);
                      v83 = existing;
                    }
                    if (v83)
                      IOObjectRelease(v83);
                    if (!v82)
                    {
LABEL_124:
                      if (valuePtr[0])
                        CFRelease(valuePtr[0]);
                      p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
                      if (ValueAtIndex)
                      {
                        v116 = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, CFSTR("MatchingMACs"));
                        if (!v116)
                          goto LABEL_11;
                        v117 = v116;
                        HardwareAddress = _SCNetworkInterfaceGetHardwareAddress(a1);
                        if (!HardwareAddress)
                          goto LABEL_11;
                        v119 = (const void *)HardwareAddress;
                        v146.length = CFArrayGetCount(v117);
                        v146.location = 0;
                        if (!CFArrayContainsValue(v117, v146, v119))
                          goto LABEL_11;
                        v9 = CFDictionaryGetValue(ValueAtIndex, CFSTR("IOInterfaceUnit"));
                        CFRetain(v9);
                        v14 = (os_log_t)qword_10007DAE8;
                        if (!qword_10007DAE8)
                        {
                          v14 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
                          qword_10007DAE8 = (uint64_t)v14;
                        }
                        v15 = _SC_syslog_os_log_mapping(6);
                        if (!__SC_log_enabled(6, v14, v15))
                          goto LABEL_10;
                        v120 = _os_log_pack_size(12);
                        v19 = (char *)&v133 - ((__chkstk_darwin(v120, v121, v122) + 15) & 0xFFFFFFFFFFFFFFF0);
                        v123 = *__error();
                        v21 = _os_log_pack_fill(v19, v120, v123, &_mh_execute_header, "Interface assigned unit %@ (updating database w/previously used interface)");
                        goto LABEL_9;
                      }
LABEL_52:
                      LODWORD(keys) = 0;
                      if (IsBuiltin)
                      {
                        v134 = IOInterfaceNamePrefix;
                        if (ReservedRange)
                          v65 = v135;
                        else
                          v65 = sub_100021D3C(a2, a3, IOInterfaceNamePrefix);
                        LODWORD(keys) = v65;
                        v9 = CFNumberCreate(0, kCFNumberIntType, &keys);
                        v85 = (const void *)_SCNetworkInterfaceGetIOInterfaceNamePrefix(a1);
                        v86 = (const __CFArray *)p_base_props[351];
                        if (!v86)
                          goto LABEL_101;
                        v87 = CFArrayGetCount(v86);
                        if (v87 < 1)
                          goto LABEL_101;
                        v88 = v87;
                        v89 = 0;
                        while (1)
                        {
                          v90 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)qword_10007DAF8, v89);
                          v91 = CFDictionaryGetValue(v90, CFSTR("IOInterfaceNamePrefix"));
                          if (v85 == v91 || v85 && v91 && CFEqual(v85, v91))
                          {
                            v92 = CFDictionaryGetValue(v90, CFSTR("IOInterfaceUnit"));
                            if (v92 == v9 || v9 && v92 && CFEqual(v9, v92))
                              break;
                          }
                          if (v88 == ++v89)
                            goto LABEL_101;
                        }
                        v93 = (const void *)_SCNetworkInterfaceGetIOPath(a1);
                        v94 = CFDictionaryGetValue(v90, CFSTR("IOPathMatch"));
                        if (v93 == v94 || v93 && v94 && CFEqual(v93, v94))
                        {
LABEL_101:
                          IOInterfaceNamePrefix = v134;
                          p_base_props = &QoSMarkingController__classData.base_props;
                          if (v9)
                          {
LABEL_116:
                            v107 = (os_log_t)qword_10007DAE8;
                            if (!qword_10007DAE8)
                            {
                              v107 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
                              qword_10007DAE8 = (uint64_t)v107;
                            }
                            v108 = _SC_syslog_os_log_mapping(6);
                            if (__SC_log_enabled(6, v107, v108))
                            {
                              v109 = _os_log_pack_size(22);
                              v112 = (char *)&v133 - ((__chkstk_darwin(v109, v110, v111) + 15) & 0xFFFFFFFFFFFFFFF0);
                              v113 = __error();
                              v114 = _os_log_pack_fill(v112, v109, *v113, &_mh_execute_header, "Interface assigned unit %@ (%s)");
                              v115 = "built-in";
                              if (!IsBuiltin)
                                v115 = "next available";
                              *(_DWORD *)v114 = 138412546;
                              *(_QWORD *)(v114 + 4) = v9;
                              *(_WORD *)(v114 + 12) = 2080;
                              *(_QWORD *)(v114 + 14) = v115;
                              __SC_log_send(6, v107, v108, v112);
                            }
                            goto LABEL_3;
                          }
                        }
                        else
                        {
                          v124 = (os_log_t)qword_10007DAE8;
                          if (!qword_10007DAE8)
                          {
                            v124 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
                            qword_10007DAE8 = (uint64_t)v124;
                          }
                          v125 = _SC_syslog_os_log_mapping(6);
                          v126 = __SC_log_enabled(6, v124, v125);
                          IOInterfaceNamePrefix = v134;
                          if (v126)
                          {
                            v127 = _os_log_pack_size(12);
                            v130 = (char *)&v133 - ((__chkstk_darwin(v127, v128, v129) + 15) & 0xFFFFFFFFFFFFFFF0);
                            v131 = __error();
                            v132 = _os_log_pack_fill(v130, v127, *v131, &_mh_execute_header, "Interface not assigned [built-in] unit %@");
                            *(_DWORD *)v132 = 138412290;
                            *(_QWORD *)(v132 + 4) = v9;
                            __SC_log_send(6, v124, v125, v130);
                          }
                          p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
                          if (v9)
                            CFRelease(v9);
                        }
                      }
                      v95 = CFArrayGetCount(a2);
                      v96 = sub_100021D3C(a2, v95, IOInterfaceNamePrefix);
                      LODWORD(keys) = v96;
                      v97 = (const __CFArray *)p_base_props[351];
                      if (v97)
                      {
                        v98 = CFArrayGetCount(v97);
                        if (v98 >= 1)
                        {
                          v99 = v98;
                          for (i = 0; i != v99; ++i)
                          {
                            v101 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)p_base_props[351], i);
                            v102 = CFDictionaryGetValue(v101, CFSTR("IOInterfaceNamePrefix"));
                            if (CFEqual(v102, IOInterfaceNamePrefix))
                            {
                              LODWORD(valuePtr[0]) = 0;
                              v103 = (const __CFNumber *)CFDictionaryGetValue(v101, CFSTR("IOInterfaceUnit"));
                              v104 = CFNumberGetTypeID();
                              if (v103 && CFGetTypeID(v103) == v104)
                              {
                                v105 = CFNumberGetValue(v103, kCFNumberIntType, valuePtr);
                                v106 = (int)valuePtr[0];
                                if (!v105)
                                  v106 = 0;
                              }
                              else
                              {
                                v106 = 0;
                              }
                              p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
                              if (v106 == v96)
                                ++v96;
                            }
                          }
                        }
                      }
                      LODWORD(keys) = v96;
                      v9 = CFNumberCreate(0, kCFNumberIntType, &keys);
                      goto LABEL_116;
                    }
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        CFRelease(v137);
      }
    }
    ValueAtIndex = 0;
    goto LABEL_124;
  }
  ValueAtIndex = v12;
  v9 = CFDictionaryGetValue(v12, CFSTR("IOInterfaceUnit"));
  CFRetain(v9);
  v14 = (os_log_t)qword_10007DAE8;
  if (!qword_10007DAE8)
  {
    v14 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    qword_10007DAE8 = (uint64_t)v14;
  }
  v15 = _SC_syslog_os_log_mapping(6);
  if (__SC_log_enabled(6, v14, v15))
  {
    v16 = _os_log_pack_size(12);
    v19 = (char *)&v133 - ((__chkstk_darwin(v16, v17, v18) + 15) & 0xFFFFFFFFFFFFFFF0);
    v20 = *__error();
    v21 = _os_log_pack_fill(v19, v16, v20, &_mh_execute_header, "Interface assigned unit %@ (from database)");
LABEL_9:
    *(_DWORD *)v21 = 138412290;
    *(_QWORD *)(v21 + 4) = v9;
    __SC_log_send(6, v14, v15, v19);
  }
LABEL_10:
  if (!v9)
  {
LABEL_11:
    v9 = CFDictionaryGetValue(ValueAtIndex, CFSTR("IOInterfaceUnit"));
    CFRetain(v9);
    v22 = (os_log_t)qword_10007DAE8;
    if (!qword_10007DAE8)
    {
      v22 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_10007DAE8 = (uint64_t)v22;
    }
    v23 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v22, v23))
    {
      v24 = _os_log_pack_size(12);
      v27 = (char *)&v133 - ((__chkstk_darwin(v24, v25, v26) + 15) & 0xFFFFFFFFFFFFFFF0);
      v28 = __error();
      v29 = _os_log_pack_fill(v27, v24, *v28, &_mh_execute_header, "Interface assigned unit %@ (updating database w/new interface)");
      *(_DWORD *)v29 = 138412290;
      *(_QWORD *)(v29 + 4) = v9;
      __SC_log_send(6, v22, v23, v27);
    }
  }
  v30 = (const __CFArray *)qword_10007DB48;
  if (qword_10007DB48)
  {
    v143.length = CFArrayGetCount((CFArrayRef)qword_10007DB48);
    v143.location = 0;
    FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v30, v143, ValueAtIndex);
    if (FirstIndexOfValue != -1)
      CFArrayRemoveValueAtIndex((CFMutableArrayRef)qword_10007DB48, FirstIndexOfValue);
  }
  v10 = 1;
LABEL_19:
  v32 = 2;
  while (1)
  {
    if (v32 != 2)
      usleep(0xC350u);
    v33 = sub_100022550(a1, v10, v9);
    v34 = v33;
    if (v33)
      break;
    v36 = v32-- != 0;
    if (!v10 || !v36)
    {
      if (v10)
        sub_100021EEC(a1, v9);
      goto LABEL_36;
    }
  }
  IOInterfaceUnit = (const void *)_SCNetworkInterfaceGetIOInterfaceUnit(v33);
  if (!_SCNetworkInterfaceIsEphemeral(v34) && !CFEqual(v9, IOInterfaceUnit))
  {
    v38 = (os_log_t)qword_10007DAE8;
    if (!qword_10007DAE8)
    {
      v38 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_10007DAE8 = (uint64_t)v38;
    }
    v39 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v38, v39))
    {
      v40 = _os_log_pack_size(32);
      v43 = (char *)&v133 - ((__chkstk_darwin(v40, v41, v42) + 15) & 0xFFFFFFFFFFFFFFF0);
      v44 = __error();
      v45 = _os_log_pack_fill(v43, v40, *v44, &_mh_execute_header, "interface prefix %@ assigned unit %@ instead of %@");
      *(_DWORD *)v45 = 138412802;
      *(_QWORD *)(v45 + 4) = IOInterfaceNamePrefix;
      *(_WORD *)(v45 + 12) = 2112;
      *(_QWORD *)(v45 + 14) = IOInterfaceUnit;
      *(_WORD *)(v45 + 22) = 2112;
      *(_QWORD *)(v45 + 24) = v9;
      __SC_log_send(6, v38, v39, v43);
    }
  }
LABEL_36:
  if (v9)
    CFRelease(v9);
  return v34;
}

const __CFDictionary *sub_100021A24(const __CFArray *a1, uint64_t a2, CFIndex *a3)
{
  const void *IOInterfaceNamePrefix;
  uint64_t IOInterfaceUnit;
  const __CFDictionary *ValueAtIndex;
  const void *v9;
  CFIndex Count;
  CFIndex v11;
  CFIndex v12;
  const void *Value;
  const void *v14;
  const void *v15;
  CFIndex *v17;

  if (!a1)
    return 0;
  IOInterfaceNamePrefix = (const void *)_SCNetworkInterfaceGetIOInterfaceNamePrefix(a2);
  IOInterfaceUnit = _SCNetworkInterfaceGetIOInterfaceUnit(a2);
  ValueAtIndex = 0;
  if (!IOInterfaceNamePrefix)
    return ValueAtIndex;
  v9 = (const void *)IOInterfaceUnit;
  if (!IOInterfaceUnit)
    return ValueAtIndex;
  Count = CFArrayGetCount(a1);
  if (Count < 1)
    return 0;
  v11 = Count;
  v17 = a3;
  v12 = 0;
  while (1)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v12);
    Value = CFDictionaryGetValue(ValueAtIndex, CFSTR("IOInterfaceNamePrefix"));
    v14 = CFDictionaryGetValue(ValueAtIndex, CFSTR("IOInterfaceUnit"));
    if (Value)
    {
      v15 = v14;
      if (v14)
      {
        if (CFEqual(IOInterfaceNamePrefix, Value) && CFEqual(v9, v15))
          break;
      }
    }
    if (v11 == ++v12)
      return 0;
  }
  if (v17)
    *v17 = v12;
  return ValueAtIndex;
}

const __CFDictionary *sub_100021B68(const __CFArray *a1, uint64_t a2, CFTypeRef *a3)
{
  const __CFDictionary *v6;
  unsigned int i;
  const __CFDictionary *result;
  os_log_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  CFIndex v17;

  v17 = 0;
  v6 = sub_100020644(a1, a2, &v17);
  for (i = 0; v6; v6 = sub_100020644(a1, a2, &v17))
  {
    if (a3 && !*a3)
      *a3 = CFRetain(v6);
    CFArrayRemoveValueAtIndex(a1, v17);
    ++i;
  }
  while (1)
  {
    result = sub_100021A24(a1, a2, &v17);
    if (!result)
      break;
    if (a3 && !*a3)
      *a3 = CFRetain(result);
    CFArrayRemoveValueAtIndex(a1, v17);
    ++i;
  }
  if (i >= 2)
  {
    v9 = (os_log_t)qword_10007DAE8;
    if (!qword_10007DAE8)
    {
      v9 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_10007DAE8 = (uint64_t)v9;
    }
    v10 = _SC_syslog_os_log_mapping(3);
    result = (const __CFDictionary *)__SC_log_enabled(3, v9, v10);
    if ((_DWORD)result)
    {
      v11 = _os_log_pack_size(18);
      v14 = (char *)&v17 - ((__chkstk_darwin(v11, v12, v13) + 15) & 0xFFFFFFFFFFFFFFF0);
      v15 = __error();
      v16 = _os_log_pack_fill(v14, v11, *v15, &_mh_execute_header, "Multiple interfaces removed from database (n = %d, %@)");
      *(_DWORD *)v16 = 67109378;
      *(_DWORD *)(v16 + 4) = i;
      *(_WORD *)(v16 + 8) = 2112;
      *(_QWORD *)(v16 + 10) = a2;
      return (const __CFDictionary *)__SC_log_send(3, v9, v10, v14);
    }
  }
  return result;
}

uint64_t sub_100021D3C(CFArrayRef theArray, uint64_t a2, void *a3)
{
  CFIndex v6;
  unsigned int v7;
  const void *ValueAtIndex;
  const void *IOInterfaceNamePrefix;
  unsigned int ReservedUnits;
  os_log_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t v20;

  if (a2 < 1)
  {
    v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v6);
      IOInterfaceNamePrefix = (const void *)_SCNetworkInterfaceGetIOInterfaceNamePrefix(ValueAtIndex);
      if (CFEqual(a3, IOInterfaceNamePrefix) && _SCNetworkInterfaceIsBuiltin(ValueAtIndex))
        ++v7;
      ++v6;
    }
    while (a2 != v6);
  }
  ReservedUnits = NetworkInterfacePrefixGetReservedUnits(a3);
  v11 = (os_log_t)qword_10007DAE8;
  if (!qword_10007DAE8)
  {
    v11 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    qword_10007DAE8 = (uint64_t)v11;
  }
  v12 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v11, v12))
  {
    v13 = _os_log_pack_size(18);
    v16 = (char *)&v20 - ((__chkstk_darwin(v13, v14, v15) + 15) & 0xFFFFFFFFFFFFFFF0);
    v17 = __error();
    v18 = _os_log_pack_fill(v16, v13, *v17, &_mh_execute_header, "%@: has %u reserved units");
    *(_DWORD *)v18 = 138412546;
    *(_QWORD *)(v18 + 4) = a3;
    *(_WORD *)(v18 + 12) = 1024;
    *(_DWORD *)(v18 + 14) = ReservedUnits;
    __SC_log_send(5, v11, v12, v16);
  }
  if (v7 <= ReservedUnits)
    return ReservedUnits;
  else
    return v7;
}

uint64_t sub_100021EEC(const void *a1, const void *a2)
{
  uint64_t IORegistryEntryID;
  const __CFDictionary *v5;
  io_service_t MatchingService;
  io_service_t v7;
  CFMutableDataRef Mutable;
  kern_return_t v9;
  kern_return_t v10;
  os_log_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t result;
  os_log_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  UInt8 *BytePtr;
  int v29;
  __CFArray *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;

  HIDWORD(v35) = 0;
  IORegistryEntryID = _SCNetworkInterfaceGetIORegistryEntryID(a1);
  v5 = IORegistryEntryIDMatching(IORegistryEntryID);
  MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v5);
  if (MatchingService)
  {
    v7 = MatchingService;
    Mutable = CFDataCreateMutable(0, 32);
    v9 = IOServiceAddInterestNotification((IONotificationPortRef)qword_10007DB08, v7, "IOGeneralInterest", (IOServiceInterestCallback)sub_100022B5C, Mutable, (io_object_t *)&v35 + 1);
    if (v9)
    {
      v10 = v9;
      v11 = (os_log_t)qword_10007DAE8;
      if (!qword_10007DAE8)
      {
        v11 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        qword_10007DAE8 = (uint64_t)v11;
      }
      v12 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v11, v12))
      {
        v13 = _os_log_pack_size(18);
        v16 = (char *)&v35 - ((__chkstk_darwin(v13, v14, v15) + 15) & 0xFFFFFFFFFFFFFFF0);
        v17 = __error();
        v18 = _os_log_pack_fill(v16, v13, *v17, &_mh_execute_header, "%s: IOServiceAddInterestNotification() failed, kr =  %d", v35, v36);
        *(_DWORD *)v18 = 136315394;
        *(_QWORD *)(v18 + 4) = "addNamingRequest";
        *(_WORD *)(v18 + 12) = 1024;
        *(_DWORD *)(v18 + 14) = v10;
        __SC_log_send(3, v11, v12, v16);
      }
      CFRelease(Mutable);
      return IOObjectRelease(v7);
    }
    CFDataSetLength(Mutable, 32);
    BytePtr = (UInt8 *)CFDataGetBytePtr(Mutable);
    *(_OWORD *)BytePtr = 0u;
    *((_OWORD *)BytePtr + 1) = 0u;
    *(_QWORD *)BytePtr = CFRetain(a1);
    *((_QWORD *)BytePtr + 2) = CFRetain(a2);
    v29 = HIDWORD(v35);
    *((_DWORD *)BytePtr + 2) = v7;
    *((_DWORD *)BytePtr + 3) = v29;
    v30 = (__CFArray *)qword_10007DB60;
    if (!qword_10007DB60)
    {
      qword_10007DB60 = (uint64_t)CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
      sub_100022F9C();
      v30 = (__CFArray *)qword_10007DB60;
    }
    CFArrayAppendValue(v30, Mutable);
    CFRelease(Mutable);
    v20 = (os_log_t)qword_10007DAE8;
    if (!qword_10007DAE8)
    {
      v20 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_10007DAE8 = (uint64_t)v20;
    }
    v21 = _SC_syslog_os_log_mapping(5);
    result = __SC_log_enabled(5, v20, v21);
    if ((_DWORD)result)
    {
      v31 = _os_log_pack_size(32);
      v25 = (char *)&v35 - ((__chkstk_darwin(v31, v32, v33) + 15) & 0xFFFFFFFFFFFFFFF0);
      v34 = *__error();
      v27 = _os_log_pack_fill(v25, v31, v34, &_mh_execute_header, "%s: interface %@ unit %@");
      goto LABEL_18;
    }
  }
  else
  {
    v20 = (os_log_t)qword_10007DAE8;
    if (!qword_10007DAE8)
    {
      v20 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_10007DAE8 = (uint64_t)v20;
    }
    v21 = _SC_syslog_os_log_mapping(5);
    result = __SC_log_enabled(5, v20, v21);
    if ((_DWORD)result)
    {
      v22 = _os_log_pack_size(32);
      v25 = (char *)&v35 - ((__chkstk_darwin(v22, v23, v24) + 15) & 0xFFFFFFFFFFFFFFF0);
      v26 = *__error();
      v27 = _os_log_pack_fill(v25, v22, v26, &_mh_execute_header, "%s: interface %@ unit %@ no longer exists");
LABEL_18:
      *(_DWORD *)v27 = 136315650;
      *(_QWORD *)(v27 + 4) = "addNamingRequest";
      *(_WORD *)(v27 + 12) = 2112;
      *(_QWORD *)(v27 + 14) = a1;
      *(_WORD *)(v27 + 22) = 2112;
      *(_QWORD *)(v27 + 24) = a2;
      return __SC_log_send(5, v20, v21, v25);
    }
  }
  return result;
}

void sub_1000222A4(const __CFDictionary *a1, uint64_t a2)
{
  const void *Value;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  CFTypeID TypeID;
  const void *v12;
  __CFArray *Mutable;

  Value = CFDictionaryGetValue(a1, CFSTR("IOInterfaceNamePrefix"));
  v5 = *(const void **)(a2 + 16);
  if (Value == v5 || Value && v5 && CFEqual(Value, v5))
  {
    v6 = CFDictionaryGetValue(a1, CFSTR("SCNetworkInterfaceType"));
    v7 = *(const void **)(a2 + 8);
    if (v6 == v7 || v6 && v7 && CFEqual(v6, v7))
    {
      v8 = CFDictionaryGetValue(a1, CFSTR("SCNetworkInterfaceInfo"));
      v9 = *(const void **)a2;
      if (v8 == *(const void **)a2 || v8 && v9 && CFEqual(v8, v9))
      {
        if (!*(_QWORD *)(a2 + 24))
          goto LABEL_21;
        v10 = CFDictionaryGetValue(a1, CFSTR("IOBuiltin"));
        TypeID = CFBooleanGetTypeID();
        if (!v10 || CFGetTypeID(v10) != TypeID)
          v10 = kCFBooleanFalse;
        v12 = *(const void **)(a2 + 24);
        if (v10 == v12 || v10 && v12 && CFEqual(v10, v12))
        {
LABEL_21:
          Mutable = *(__CFArray **)(a2 + 32);
          if (!Mutable)
          {
            Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
            *(_QWORD *)(a2 + 32) = Mutable;
          }
          CFArrayAppendValue(Mutable, a1);
        }
      }
    }
  }
}

void sub_100022430(const __SCNetworkInterface *a1, uint64_t a2)
{
  CFStringRef InterfaceType;
  CFStringRef v5;
  const void *v6;
  const void *v7;
  const void *v8;
  int v9;
  int IsBuiltin;
  const CFBooleanRef *v11;
  CFBooleanRef v12;
  const void *v13;

  if (!*(_QWORD *)(a2 + 32))
    return;
  InterfaceType = SCNetworkInterfaceGetInterfaceType(a1);
  v5 = *(CFStringRef *)(a2 + 8);
  if (InterfaceType != v5 && (!InterfaceType || !v5 || !CFEqual(InterfaceType, v5)))
    return;
  v6 = (const void *)_SCNetworkInterfaceCopyInterfaceInfo(a1);
  v7 = v6;
  v8 = *(const void **)a2;
  if (v6 == *(const void **)a2)
  {
    v9 = 1;
  }
  else
  {
    v9 = 0;
    if (v6 && v8)
    {
      v9 = CFEqual(v6, v8);
LABEL_12:
      CFRelease(v7);
      goto LABEL_13;
    }
  }
  if (v6)
    goto LABEL_12;
LABEL_13:
  if (v9)
  {
    if (!*(_QWORD *)(a2 + 24))
      goto LABEL_21;
    IsBuiltin = _SCNetworkInterfaceIsBuiltin(a1);
    v11 = &kCFBooleanTrue;
    if (!IsBuiltin)
      v11 = &kCFBooleanFalse;
    v12 = *v11;
    v13 = *(const void **)(a2 + 24);
    if (*(const void **)v11 == v13 || v12 && v13 && CFEqual(v12, v13))
    {
LABEL_21:
      CFRelease(*(CFTypeRef *)(a2 + 32));
      *(_QWORD *)(a2 + 32) = 0;
    }
  }
}

const void *sub_100022550(const __SCNetworkInterface *a1, int a2, const void *a3)
{
  uint64_t IOPath;
  uint64_t IORegistryEntryID;
  io_connect_t v8;
  __CFDictionary *Mutable;
  CFNumberRef v10;
  CFDataRef v11;
  kern_return_t v12;
  uint64_t v13;
  const void *v14;
  os_log_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int *v21;
  uint64_t v22;
  const char *v23;
  os_log_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  int *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v34;
  _BOOL4 valuePtr;
  UInt8 bytes[8];

  IOPath = _SCNetworkInterfaceGetIOPath(a1);
  IORegistryEntryID = _SCNetworkInterfaceGetIORegistryEntryID(a1);
  v8 = dword_10007DAF0;
  *(_QWORD *)bytes = IORegistryEntryID;
  valuePtr = a2 == 0;
  Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  v10 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(Mutable, CFSTR("IONetworkStackUserCommand"), v10);
  CFRelease(v10);
  v11 = CFDataCreate(0, bytes, 8);
  CFDictionarySetValue(Mutable, CFSTR("IORegistryEntryID"), v11);
  CFRelease(v11);
  CFDictionarySetValue(Mutable, CFSTR("IOInterfaceUnit"), a3);
  v12 = IOConnectSetCFProperties(v8, Mutable);
  CFRelease(Mutable);
  v13 = sub_1000228DC(IORegistryEntryID);
  if (v13)
  {
    v14 = (const void *)v13;
    if (_SCNetworkInterfaceGetIOInterfaceUnit(v13))
    {
      v15 = (os_log_t)qword_10007DAE8;
      if (!qword_10007DAE8)
      {
        v15 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        qword_10007DAE8 = (uint64_t)v15;
      }
      v16 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v15, v16))
      {
        v17 = _os_log_pack_size(32);
        v20 = (char *)&v34 - ((__chkstk_darwin(v17, v18, v19) + 15) & 0xFFFFFFFFFFFFFFF0);
        v21 = __error();
        v22 = _os_log_pack_fill(v20, v17, *v21, &_mh_execute_header, "%s interface named\n  path = %@\n  unit = %@");
        v23 = "Known";
        *(_DWORD *)v22 = 136315650;
        if (!a2)
          v23 = "New";
        *(_QWORD *)(v22 + 4) = v23;
        *(_WORD *)(v22 + 12) = 2112;
        *(_QWORD *)(v22 + 14) = IOPath;
        *(_WORD *)(v22 + 22) = 2112;
        *(_QWORD *)(v22 + 24) = a3;
        __SC_log_send(5, v15, v16, v20);
      }
      return v14;
    }
    CFRelease(v14);
  }
  v24 = (os_log_t)qword_10007DAE8;
  if (!qword_10007DAE8)
  {
    v24 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    qword_10007DAE8 = (uint64_t)v24;
  }
  v25 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v24, v25))
  {
    v26 = _os_log_pack_size(48);
    v34 = (uint64_t)&v34;
    v29 = (char *)&v34 - ((__chkstk_darwin(v26, v27, v28) + 15) & 0xFFFFFFFFFFFFFFF0);
    v30 = __error();
    v31 = _os_log_pack_fill(v29, v26, *v30, &_mh_execute_header, "failed to name %s interface, kr=%d\n  path = %@\n  id   = 0x%llx\n  unit = %@");
    *(_DWORD *)v31 = 136316162;
    v32 = "Known";
    if (!a2)
      v32 = "New";
    *(_QWORD *)(v31 + 4) = v32;
    *(_WORD *)(v31 + 12) = 1024;
    *(_DWORD *)(v31 + 14) = v12;
    *(_WORD *)(v31 + 18) = 2112;
    *(_QWORD *)(v31 + 20) = IOPath;
    *(_WORD *)(v31 + 28) = 2048;
    *(_QWORD *)(v31 + 30) = IORegistryEntryID;
    *(_WORD *)(v31 + 38) = 2112;
    *(_QWORD *)(v31 + 40) = a3;
    __SC_log_send(5, v24, v25, v29);
  }
  sub_100020448(a1);
  return 0;
}

uint64_t sub_1000228DC(uint64_t a1)
{
  const __CFDictionary *v2;
  kern_return_t MatchingServices;
  BOOL v4;
  os_log_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  int v11;
  io_object_t v12;
  io_object_t v13;
  uint64_t v14;
  os_log_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  HIDWORD(v22) = 0;
  v2 = IORegistryEntryIDMatching(a1);
  MatchingServices = IOServiceGetMatchingServices(kIOMainPortDefault, v2, (io_iterator_t *)&v22 + 1);
  if (MatchingServices)
    v4 = 1;
  else
    v4 = HIDWORD(v22) == 0;
  if (v4)
  {
    v5 = (os_log_t)qword_10007DAE8;
    if (!qword_10007DAE8)
    {
      v5 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_10007DAE8 = (uint64_t)v5;
    }
    v6 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v5, v6))
    {
      v7 = _os_log_pack_size(24);
      v8 = (char *)&v22 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
      v9 = __error();
      v10 = _os_log_pack_fill(v8, v7, *v9, &_mh_execute_header, "IOServiceGetMatchingServices(0x%llx) returned %d/%u", v22, v23, v24);
      v11 = HIDWORD(v22);
      *(_DWORD *)v10 = 134218496;
      *(_QWORD *)(v10 + 4) = a1;
      *(_WORD *)(v10 + 12) = 1024;
      *(_DWORD *)(v10 + 14) = MatchingServices;
      *(_WORD *)(v10 + 18) = 1024;
      *(_DWORD *)(v10 + 20) = v11;
      __SC_log_send(5, v5, v6, v8);
    }
  }
  else
  {
    v12 = IOIteratorNext(HIDWORD(v22));
    if (v12)
    {
      v13 = v12;
      v14 = _SCNetworkInterfaceCreateWithIONetworkInterfaceObject();
      IOObjectRelease(v13);
      goto LABEL_17;
    }
    v15 = (os_log_t)qword_10007DAE8;
    if (!qword_10007DAE8)
    {
      v15 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_10007DAE8 = (uint64_t)v15;
    }
    v16 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v15, v16))
    {
      v17 = _os_log_pack_size(12);
      v18 = (char *)&v22 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
      v19 = __error();
      v20 = _os_log_pack_fill(v18, v17, *v19, &_mh_execute_header, "IORegistryEntryIDMatching(0x%llx) failed", v22);
      *(_DWORD *)v20 = 134217984;
      *(_QWORD *)(v20 + 4) = a1;
      __SC_log_send(5, v15, v16, v18);
    }
  }
  v14 = 0;
LABEL_17:
  if (HIDWORD(v22))
    IOObjectRelease(HIDWORD(v22));
  return v14;
}

const __CFData *sub_100022B5C(const __CFData *result, uint64_t a2, int a3)
{
  const __CFData *v3;
  const UInt8 *BytePtr;
  os_log_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFIndex FirstIndexOfValue;
  uint64_t v16;
  CFRange v17;

  if (a3 == -536870896)
  {
    v3 = result;
    BytePtr = CFDataGetBytePtr(result);
    v5 = (os_log_t)qword_10007DAE8;
    if (!qword_10007DAE8)
    {
      v5 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_10007DAE8 = (uint64_t)v5;
    }
    v6 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v5, v6))
    {
      v7 = _os_log_pack_size(32);
      v10 = (char *)&v16 - ((__chkstk_darwin(v7, v8, v9) + 15) & 0xFFFFFFFFFFFFFFF0);
      v11 = __error();
      v12 = _os_log_pack_fill(v10, v7, *v11, &_mh_execute_header, "%s: interface %@ unit %@ interface removed");
      v13 = *(_QWORD *)BytePtr;
      v14 = *((_QWORD *)BytePtr + 2);
      *(_DWORD *)v12 = 136315650;
      *(_QWORD *)(v12 + 4) = "entryForNamingRequestChanged";
      *(_WORD *)(v12 + 12) = 2112;
      *(_QWORD *)(v12 + 14) = v13;
      *(_WORD *)(v12 + 22) = 2112;
      *(_QWORD *)(v12 + 24) = v14;
      __SC_log_send(5, v5, v6, v10);
    }
    sub_100022D00((uint64_t)BytePtr);
    if (qword_10007DB60)
    {
      v17.length = CFArrayGetCount((CFArrayRef)qword_10007DB60);
      v17.location = 0;
      FirstIndexOfValue = CFArrayGetFirstIndexOfValue((CFArrayRef)qword_10007DB60, v17, v3);
    }
    else
    {
      FirstIndexOfValue = -1;
    }
    return (const __CFData *)sub_100022D90(FirstIndexOfValue);
  }
  return result;
}

uint64_t sub_100022D00(uint64_t a1)
{
  const void *v2;
  const void *v3;
  io_object_t v4;
  uint64_t result;

  v2 = *(const void **)a1;
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)a1 = 0;
  }
  v3 = *(const void **)(a1 + 16);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v4 = *(_DWORD *)(a1 + 12);
  if (v4)
  {
    IOObjectRelease(v4);
    *(_DWORD *)(a1 + 12) = 0;
  }
  result = *(unsigned int *)(a1 + 8);
  if ((_DWORD)result)
  {
    result = IOObjectRelease(result);
    *(_DWORD *)(a1 + 8) = 0;
  }
  return result;
}

CFIndex sub_100022D90(CFIndex a1)
{
  CFIndex result;

  if (!qword_10007DB60)
    sub_100065A10();
  if (CFArrayGetCount((CFArrayRef)qword_10007DB60) <= a1)
    sub_100065A38();
  CFArrayRemoveValueAtIndex((CFMutableArrayRef)qword_10007DB60, a1);
  result = CFArrayGetCount((CFArrayRef)qword_10007DB60);
  if (!result)
  {
    if (qword_10007DB60)
    {
      CFRelease((CFTypeRef)qword_10007DB60);
      qword_10007DB60 = 0;
    }
    return sub_100022E50();
  }
  return result;
}

uint64_t sub_100022E50()
{
  uint64_t result;
  os_log_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int *v5;
  uint64_t v6;
  const char *v7;

  result = qword_10007DB68;
  if (qword_10007DB68)
  {
    CFRunLoopTimerInvalidate((CFRunLoopTimerRef)qword_10007DB68);
    if (qword_10007DB68)
    {
      CFRelease((CFTypeRef)qword_10007DB68);
      qword_10007DB68 = 0;
    }
    v1 = (os_log_t)qword_10007DAE8;
    if (!qword_10007DAE8)
    {
      v1 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_10007DAE8 = (uint64_t)v1;
    }
    v2 = _SC_syslog_os_log_mapping(5);
    result = __SC_log_enabled(5, v1, v2);
    if ((_DWORD)result)
    {
      v3 = _os_log_pack_size(12);
      v4 = (char *)&v7 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
      v5 = __error();
      v6 = _os_log_pack_fill(v4, v3, *v5, &_mh_execute_header, "%s: timer cancelled", v7);
      *(_DWORD *)v6 = 136315138;
      *(_QWORD *)(v6 + 4) = "disableNamingRequestCallBacks";
      return __SC_log_send(5, v1, v2, v4);
    }
  }
  return result;
}

void sub_100022F9C()
{
  __CFRunLoop *Current;
  os_log_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int *v5;
  uint64_t v6;
  const char *v7;

  if (!qword_10007DB68)
  {
    qword_10007DB68 = (uint64_t)CFRunLoopTimerCreateWithHandler(0, 0.0, 1.0, 0, 0, &stru_100076280);
    Current = CFRunLoopGetCurrent();
    CFRunLoopAddTimer(Current, (CFRunLoopTimerRef)qword_10007DB68, kCFRunLoopDefaultMode);
    v1 = (os_log_t)qword_10007DAE8;
    if (!qword_10007DAE8)
    {
      v1 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_10007DAE8 = (uint64_t)v1;
    }
    v2 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v1, v2))
    {
      v3 = _os_log_pack_size(12);
      v4 = (char *)&v7 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
      v5 = __error();
      v6 = _os_log_pack_fill(v4, v3, *v5, &_mh_execute_header, "%s: timer scheduled", v7);
      *(_DWORD *)v6 = 136315138;
      *(_QWORD *)(v6 + 4) = "enableNamingRequestCallBacks";
      __SC_log_send(5, v1, v2, v4);
    }
  }
}

void sub_100023110(id a1, __CFRunLoopTimer *a2)
{
  sub_100023154();
}

void sub_100023154()
{
  __objc2_prop_list **p_base_props;
  __objc2_prop_list **v1;
  os_log_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  CFIndex Count;
  __int128 v12;
  CFIndex v13;
  int v14;
  CFIndex v15;
  const __CFData *ValueAtIndex;
  const UInt8 *BytePtr;
  const void *v18;
  const void *v19;
  os_log_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  const __SCNetworkInterface *v29;
  uint64_t v30;
  os_log_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  const __SCNetworkInterface *v40;
  uint64_t v41;
  int v42;
  __int128 v43;
  __int128 v44;

  p_base_props = &QoSMarkingController__classData.base_props;
  if (qword_10007DB60)
  {
    v1 = &QoSMarkingController__classData.base_props;
    v2 = (os_log_t)qword_10007DAE8;
    if (!qword_10007DAE8)
    {
      v2 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_10007DAE8 = (uint64_t)v2;
    }
    v3 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v2, v3))
    {
      v4 = _os_log_pack_size(12);
      v7 = (char *)&v43 - ((__chkstk_darwin(v4, v5, v6) + 15) & 0xFFFFFFFFFFFFFFF0);
      v8 = __error();
      v9 = v4;
      v1 = &QoSMarkingController__classData.base_props;
      v10 = _os_log_pack_fill(v7, v9, *v8, &_mh_execute_header, "%s", (const char *)v43);
      *(_DWORD *)v10 = 136315138;
      *(_QWORD *)(v10 + 4) = "handleDeferredNamingRequests";
      __SC_log_send(5, v2, v3, v7);
    }
    Count = CFArrayGetCount((CFArrayRef)qword_10007DB60);
    if (Count >= 1)
    {
      v13 = Count;
      v14 = 0;
      v15 = 0;
      *(_QWORD *)&v12 = 136315906;
      v43 = v12;
      *(_QWORD *)&v12 = 136315650;
      v44 = v12;
      do
      {
        ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex((CFArrayRef)p_base_props[364], v15);
        BytePtr = CFDataGetBytePtr(ValueAtIndex);
        ++*((_DWORD *)BytePtr + 6);
        v18 = sub_100022550(*(const __SCNetworkInterface **)BytePtr, 1, *((const void **)BytePtr + 2));
        if (v18)
        {
          v19 = v18;
          v20 = (os_log_t)v1[349];
          if (!v20)
          {
            v20 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
            v1[349] = (__objc2_prop_list *)v20;
          }
          v21 = _SC_syslog_os_log_mapping(5);
          if (__SC_log_enabled(5, v20, v21))
          {
            v22 = _os_log_pack_size(32);
            v25 = (char *)&v43 - ((__chkstk_darwin(v22, v23, v24) + 15) & 0xFFFFFFFFFFFFFFF0);
            v26 = __error();
            v27 = v22;
            v1 = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
            v28 = _os_log_pack_fill(v25, v27, *v26, &_mh_execute_header, "%s: %@ unit %@ SUCCESS");
            v29 = *(const __SCNetworkInterface **)BytePtr;
            v30 = *((_QWORD *)BytePtr + 2);
            *(_DWORD *)v28 = v44;
            *(_QWORD *)(v28 + 4) = "handleDeferredNamingRequests";
            *(_WORD *)(v28 + 12) = 2112;
            *(_QWORD *)(v28 + 14) = v29;
            *(_WORD *)(v28 + 22) = 2112;
            *(_QWORD *)(v28 + 24) = v30;
            __SC_log_send(5, v20, v21, v25);
            p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
          }
          sub_100022D00((uint64_t)BytePtr);
          sub_100022D90(v15);
          --v13;
          CFRelease(v19);
          v14 = 1;
        }
        else if (*((_DWORD *)BytePtr + 6) >= 0x1Eu)
        {
          v31 = (os_log_t)v1[349];
          if (!v31)
          {
            v31 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
            v1[349] = (__objc2_prop_list *)v31;
          }
          v32 = _SC_syslog_os_log_mapping(5);
          if (__SC_log_enabled(5, v31, v32))
          {
            v33 = _os_log_pack_size(38);
            v36 = (char *)&v43 - ((__chkstk_darwin(v33, v34, v35) + 15) & 0xFFFFFFFFFFFFFFF0);
            v37 = __error();
            v38 = v33;
            v1 = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
            v39 = _os_log_pack_fill(v36, v38, *v37, &_mh_execute_header, "%s: failed to name %@ unit %@ after %u tries");
            v40 = *(const __SCNetworkInterface **)BytePtr;
            v41 = *((_QWORD *)BytePtr + 2);
            v42 = *((_DWORD *)BytePtr + 6);
            *(_DWORD *)v39 = v43;
            *(_QWORD *)(v39 + 4) = "handleDeferredNamingRequests";
            *(_WORD *)(v39 + 12) = 2112;
            *(_QWORD *)(v39 + 14) = v40;
            *(_WORD *)(v39 + 22) = 2112;
            *(_QWORD *)(v39 + 24) = v41;
            *(_WORD *)(v39 + 32) = 1024;
            *(_DWORD *)(v39 + 34) = v42;
            __SC_log_send(5, v31, v32, v36);
            p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
          }
          sub_100022D00((uint64_t)BytePtr);
          sub_100022D90(v15);
          --v13;
        }
        ++v15;
      }
      while (v15 < v13);
      if (v14)
        sub_10001EEC4();
    }
  }
}

BOOL sub_100023548(_BOOL8 result, const void *a2)
{
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v5;
  const __CFData *ValueAtIndex;
  CFTypeRef *BytePtr;
  CFIndex v8;
  CFIndex v9;
  const __CFData *v10;
  CFTypeRef *v11;
  int v12;

  if (result)
  {
    v3 = (const __CFArray *)result;
    Count = CFArrayGetCount((CFArrayRef)result);
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      v5 = Count;
      ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(v3, 0);
      BytePtr = (CFTypeRef *)CFDataGetBytePtr(ValueAtIndex);
      if (CFEqual(*BytePtr, a2))
      {
        return 1;
      }
      else
      {
        v8 = 1;
        do
        {
          v9 = v8;
          if (v5 == v8)
            break;
          v10 = (const __CFData *)CFArrayGetValueAtIndex(v3, v8);
          v11 = (CFTypeRef *)CFDataGetBytePtr(v10);
          v12 = CFEqual(*v11, a2);
          v8 = v9 + 1;
        }
        while (!v12);
        return v9 < v5;
      }
    }
  }
  return result;
}

__CFData *sub_100023624(const void *a1, uint64_t a2)
{
  uint64_t IORegistryEntryID;
  const __CFDictionary *v5;
  io_service_t MatchingService;
  io_service_t v7;
  __CFData *Mutable;
  UInt8 *BytePtr;
  kern_return_t v10;
  kern_return_t v11;
  os_log_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int *v18;
  _DWORD *v19;
  int v21;

  IORegistryEntryID = _SCNetworkInterfaceGetIORegistryEntryID(a1);
  v5 = IORegistryEntryIDMatching(IORegistryEntryID);
  MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v5);
  if (!MatchingService)
    return 0;
  v7 = MatchingService;
  Mutable = CFDataCreateMutable(0, 24);
  CFDataSetLength(Mutable, 24);
  BytePtr = (UInt8 *)CFDataGetBytePtr(Mutable);
  *((_QWORD *)BytePtr + 1) = 0;
  *((_QWORD *)BytePtr + 2) = 0;
  *(_QWORD *)BytePtr = 0;
  *(_QWORD *)BytePtr = CFRetain(a1);
  *((_DWORD *)BytePtr + 2) = v7;
  *((_QWORD *)BytePtr + 2) = a2;
  v10 = IOServiceAddInterestNotification((IONotificationPortRef)qword_10007DB08, v7, "IOGeneralInterest", (IOServiceInterestCallback)sub_100023DD8, Mutable, (io_object_t *)BytePtr + 3);
  if (v10)
  {
    v11 = v10;
    v12 = (os_log_t)qword_10007DAE8;
    if (!qword_10007DAE8)
    {
      v12 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_10007DAE8 = (uint64_t)v12;
    }
    v13 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v12, v13))
    {
      v14 = _os_log_pack_size(8);
      v17 = (char *)&v21 - ((__chkstk_darwin(v14, v15, v16) + 15) & 0xFFFFFFFFFFFFFFF0);
      v18 = __error();
      v19 = (_DWORD *)_os_log_pack_fill(v17, v14, *v18, &_mh_execute_header, "IOServiceAddInterestNotification() failed, kr =  %d", v21);
      *v19 = 67109120;
      v19[1] = v11;
      __SC_log_send(3, v12, v13, v17);
    }
    sub_100023FAC(Mutable);
    CFRelease(Mutable);
    return 0;
  }
  return Mutable;
}

void sub_100023804(const __CFData *a1, int a2)
{
  SCNetworkInterfaceRef *BytePtr;
  SCNetworkInterfaceRef *v5;
  CFStringRef BSDName;
  os_log_t v7;
  CFStringRef v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  os_log_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int *v23;
  os_log_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  SCNetworkInterfaceRef v31;
  CFIndex FirstIndexOfValue;
  uint64_t v33;
  CFRange v34;

  BytePtr = (SCNetworkInterfaceRef *)CFDataGetBytePtr(a1);
  if (a2 != -536870896)
    return;
  v5 = BytePtr;
  BSDName = SCNetworkInterfaceGetBSDName(*BytePtr);
  v7 = (os_log_t)qword_10007DAE8;
  if (BSDName)
  {
    v8 = BSDName;
    if (!qword_10007DAE8)
    {
      v7 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_10007DAE8 = (uint64_t)v7;
    }
    v9 = _SC_syslog_os_log_mapping(6);
    if (!__SC_log_enabled(6, v7, v9))
      goto LABEL_16;
    v10 = _os_log_pack_size(12);
    v13 = (char *)&v33 - ((__chkstk_darwin(v10, v11, v12) + 15) & 0xFFFFFFFFFFFFFFF0);
    v14 = __error();
    v15 = _os_log_pack_fill(v13, v10, *v14, &_mh_execute_header, "[pre-configured] interface removed: %@");
    *(_DWORD *)v15 = 138412290;
    *(_QWORD *)(v15 + 4) = v8;
    v16 = v7;
    v17 = v9;
  }
  else
  {
    if (!qword_10007DAE8)
    {
      v7 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_10007DAE8 = (uint64_t)v7;
    }
    v18 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v7, v18))
    {
      v19 = _os_log_pack_size(2);
      v22 = (char *)&v33 - ((__chkstk_darwin(v19, v20, v21) + 15) & 0xFFFFFFFFFFFFFFF0);
      v23 = __error();
      *(_WORD *)_os_log_pack_fill(v22, v19, *v23, &_mh_execute_header, "[pre-configured] interface w/no BSD name removed") = 0;
      __SC_log_send(6, v7, v18, v22);
    }
    v24 = (os_log_t)qword_10007DAE8;
    if (!qword_10007DAE8)
    {
      v24 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_10007DAE8 = (uint64_t)v24;
    }
    v25 = _SC_syslog_os_log_mapping(6);
    if (!__SC_log_enabled(6, v24, v25))
      goto LABEL_16;
    v26 = _os_log_pack_size(12);
    v13 = (char *)&v33 - ((__chkstk_darwin(v26, v27, v28) + 15) & 0xFFFFFFFFFFFFFFF0);
    v29 = __error();
    v30 = _os_log_pack_fill(v13, v26, *v29, &_mh_execute_header, "  interface = %@");
    v31 = *v5;
    *(_DWORD *)v30 = 138412290;
    *(_QWORD *)(v30 + 4) = v31;
    v16 = v24;
    v17 = v25;
  }
  __SC_log_send(6, v16, v17, v13);
LABEL_16:
  if (qword_10007DB70)
  {
    v34.length = CFArrayGetCount((CFArrayRef)qword_10007DB70);
    v34.location = 0;
    FirstIndexOfValue = CFArrayGetFirstIndexOfValue((CFArrayRef)qword_10007DB70, v34, a1);
    if (FirstIndexOfValue != -1)
    {
      CFArrayRemoveValueAtIndex((CFMutableArrayRef)qword_10007DB70, FirstIndexOfValue);
      if (!CFArrayGetCount((CFArrayRef)qword_10007DB70))
      {
        CFRelease((CFTypeRef)qword_10007DB70);
        qword_10007DB70 = 0;
      }
      sub_100023B28();
    }
  }
}

void sub_100023B28()
{
  __objc2_prop_list **p_base_props;
  CFIndex Count;
  CFIndex v2;
  __CFArray *Mutable;
  CFIndex v4;
  __int128 v5;
  const __CFData *ValueAtIndex;
  SCNetworkInterfaceRef *BytePtr;
  CFStringRef BSDName;
  os_log_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  char *v16;
  os_log_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  SCNetworkInterfaceRef v26;
  __int128 v27;

  p_base_props = &QoSMarkingController__classData.base_props;
  if (qword_10007DB70 && (Count = CFArrayGetCount((CFArrayRef)qword_10007DB70), Count >= 1))
  {
    v2 = Count;
    Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    v4 = 0;
    *(_QWORD *)&v5 = 138412290;
    v27 = v5;
    do
    {
      ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex((CFArrayRef)p_base_props[366], v4);
      BytePtr = (SCNetworkInterfaceRef *)CFDataGetBytePtr(ValueAtIndex);
      BSDName = SCNetworkInterfaceGetBSDName(*BytePtr);
      if (BSDName)
      {
        CFArrayAppendValue(Mutable, BSDName);
      }
      else
      {
        v9 = (os_log_t)qword_10007DAE8;
        if (!qword_10007DAE8)
        {
          v9 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
          qword_10007DAE8 = (uint64_t)v9;
        }
        v10 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v9, v10))
        {
          v11 = _os_log_pack_size(2);
          v14 = (char *)&v27 - ((__chkstk_darwin(v11, v12, v13) + 15) & 0xFFFFFFFFFFFFFFF0);
          v15 = __error();
          *(_WORD *)_os_log_pack_fill(v14, v11, *v15, &_mh_execute_header, "pre-configured interface w/no BSD name") = 0;
          v16 = v14;
          p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
          __SC_log_send(5, v9, v10, v16);
        }
        v17 = (os_log_t)qword_10007DAE8;
        if (!qword_10007DAE8)
        {
          v17 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
          qword_10007DAE8 = (uint64_t)v17;
        }
        v18 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v17, v18))
        {
          v19 = _os_log_pack_size(12);
          v22 = (char *)&v27 - ((__chkstk_darwin(v19, v20, v21) + 15) & 0xFFFFFFFFFFFFFFF0);
          v23 = __error();
          v24 = v19;
          p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
          v25 = _os_log_pack_fill(v22, v24, *v23, &_mh_execute_header, "  interface = %@");
          v26 = *BytePtr;
          *(_DWORD *)v25 = v27;
          *(_QWORD *)(v25 + 4) = v26;
          __SC_log_send(5, v17, v18, v22);
        }
      }
      ++v4;
    }
    while (v2 != v4);
    CFDictionarySetValue((CFMutableDictionaryRef)qword_10007DB18, CFSTR("_PreConfigured_"), Mutable);
    CFRelease(Mutable);
  }
  else
  {
    CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_10007DB18, CFSTR("_PreConfigured_"));
  }
  sub_10001D9A4();
}

void sub_100023DD8(const __CFData *a1, uint64_t a2, int a3, uint64_t a4)
{
  const UInt8 *BytePtr;
  const void *v7;
  os_log_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t IOInterfaceUnit;
  uint64_t v17;

  if (a3 == -536870896)
  {
    BytePtr = CFDataGetBytePtr(a1);
    v7 = *(const void **)BytePtr;
    if (_SCNetworkInterfaceIsBuiltin(*(_QWORD *)BytePtr)
      || !_SCNetworkInterfaceIsApplePreconfigured(v7))
    {
      v7 = 0;
    }
    else
    {
      CFRetain(v7);
    }
    CFRetain(a1);
    (*((void (**)(const __CFData *, uint64_t, uint64_t))BytePtr + 2))(a1, 3758096400, a4);
    sub_100023FAC(a1);
    CFRelease(a1);
    if (v7)
    {
      v8 = (os_log_t)qword_10007DAE8;
      if (!qword_10007DAE8)
      {
        v8 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        qword_10007DAE8 = (uint64_t)v8;
      }
      v9 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v8, v9))
      {
        v10 = _os_log_pack_size(12);
        v13 = (char *)&v17 - ((__chkstk_darwin(v10, v11, v12) + 15) & 0xFFFFFFFFFFFFFFF0);
        v14 = __error();
        v15 = _os_log_pack_fill(v13, v10, *v14, &_mh_execute_header, "Interface released unit %@ (from database)");
        IOInterfaceUnit = _SCNetworkInterfaceGetIOInterfaceUnit(v7);
        *(_DWORD *)v15 = 138412290;
        *(_QWORD *)(v15 + 4) = IOInterfaceUnit;
        __SC_log_send(6, v8, v9, v13);
      }
      sub_100021B68((const __CFArray *)qword_10007DAF8, (uint64_t)v7, 0);
      CFRelease(v7);
      sub_10001DCEC((CFPropertyListRef)qword_10007DAF8);
    }
  }
}

void sub_100023FAC(const __CFData *a1)
{
  const UInt8 *BytePtr;
  io_object_t v2;
  io_object_t v3;

  BytePtr = CFDataGetBytePtr(a1);
  v2 = *((_DWORD *)BytePtr + 3);
  if (v2)
  {
    IOObjectRelease(v2);
    *((_DWORD *)BytePtr + 3) = 0;
  }
  v3 = *((_DWORD *)BytePtr + 2);
  if (v3)
  {
    IOObjectRelease(v3);
    *((_DWORD *)BytePtr + 2) = 0;
  }
  if (*(_QWORD *)BytePtr)
  {
    CFRelease(*(CFTypeRef *)BytePtr);
    *(_QWORD *)BytePtr = 0;
  }
}

void sub_100024030(const __CFData *a1, int a2)
{
  const UInt8 *BytePtr;
  const UInt8 *v5;
  os_log_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  os_log_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  uint64_t IOPath;
  CFIndex FirstIndexOfValue;
  CFRunLoopRef Current;
  _QWORD block[5];
  CFRange v25;

  BytePtr = CFDataGetBytePtr(a1);
  if (a2 == -536870896)
  {
    v5 = BytePtr;
    v6 = (os_log_t)qword_10007DAE8;
    if (!qword_10007DAE8)
    {
      v6 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_10007DAE8 = (uint64_t)v6;
    }
    v7 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v6, v7))
    {
      v8 = _os_log_pack_size(2);
      v11 = (char *)block - ((__chkstk_darwin(v8, v9, v10) + 15) & 0xFFFFFFFFFFFFFFF0);
      v12 = __error();
      *(_WORD *)_os_log_pack_fill(v11, v8, *v12, &_mh_execute_header, "[trust required] interface removed") = 0;
      __SC_log_send(6, v6, v7, v11);
    }
    v13 = (os_log_t)qword_10007DAE8;
    if (!qword_10007DAE8)
    {
      v13 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_10007DAE8 = (uint64_t)v13;
    }
    v14 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v13, v14))
    {
      v15 = _os_log_pack_size(12);
      v18 = (char *)block - ((__chkstk_darwin(v15, v16, v17) + 15) & 0xFFFFFFFFFFFFFFF0);
      v19 = __error();
      v20 = _os_log_pack_fill(v18, v15, *v19, &_mh_execute_header, "  path = %@");
      IOPath = _SCNetworkInterfaceGetIOPath(*(_QWORD *)v5);
      *(_DWORD *)v20 = 138412290;
      *(_QWORD *)(v20 + 4) = IOPath;
      __SC_log_send(6, v13, v14, v18);
    }
    if (qword_10007DB78)
    {
      v25.length = CFArrayGetCount((CFArrayRef)qword_10007DB78);
      v25.location = 0;
      FirstIndexOfValue = CFArrayGetFirstIndexOfValue((CFArrayRef)qword_10007DB78, v25, a1);
      if (FirstIndexOfValue != -1)
      {
        CFArrayRemoveValueAtIndex((CFMutableArrayRef)qword_10007DB78, FirstIndexOfValue);
        if (!CFArrayGetCount((CFArrayRef)qword_10007DB78))
        {
          CFRelease((CFTypeRef)qword_10007DB78);
          qword_10007DB78 = 0;
        }
        Current = CFRunLoopGetCurrent();
        CFRetain(Current);
        if (qword_10007DB88 != -1)
          dispatch_once(&qword_10007DB88, &stru_100076360);
        block[0] = _NSConcreteStackBlock;
        block[1] = 0x40000000;
        block[2] = sub_100024888;
        block[3] = &unk_100076300;
        block[4] = Current;
        dispatch_async((dispatch_queue_t)qword_10007DB90, block);
      }
    }
  }
}

void sub_100024304(id a1)
{
  sub_1000243A4(kLockdownNotificationHostAttached, CFSTR("Host attached"));
  sub_1000243A4(kLockdownNotificationHostDetached, CFSTR("Host detached"));
  sub_1000243A4(kLockdownNotificationTrustedHostAttached, CFSTR("Trusted Host attached"));
  sub_1000243A4(kLockdownNotificationTrustedPTPAttached, CFSTR("Trusted PTP attached"));
}

void sub_1000243A4(const __CFString *a1, const void *a2)
{
  CFRunLoopRef Current;
  const char *CStringPtr;
  const char *v6;
  uint32_t v7;
  uint32_t v8;
  os_log_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  _QWORD handler[6];
  int out_token;

  out_token = -1;
  Current = CFRunLoopGetCurrent();
  CStringPtr = CFStringGetCStringPtr(a1, 0x8000100u);
  if (!CStringPtr)
    sub_100065A60();
  v6 = CStringPtr;
  CFRetain(Current);
  CFRetain(a2);
  if (qword_10007DB88 != -1)
    dispatch_once(&qword_10007DB88, &stru_100076360);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 0x40000000;
  handler[2] = sub_1000248EC;
  handler[3] = &unk_100076320;
  handler[4] = Current;
  handler[5] = a2;
  v7 = notify_register_dispatch(v6, &out_token, (dispatch_queue_t)qword_10007DB90, handler);
  if (v7)
  {
    v8 = v7;
    v9 = (os_log_t)qword_10007DAE8;
    if (!qword_10007DAE8)
    {
      v9 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_10007DAE8 = (uint64_t)v9;
    }
    v10 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v9, v10))
    {
      v11 = _os_log_pack_size(18);
      v14 = (char *)handler - ((__chkstk_darwin(v11, v12, v13) + 15) & 0xFFFFFFFFFFFFFFF0);
      v15 = __error();
      v16 = _os_log_pack_fill(v14, v11, *v15, &_mh_execute_header, "notify_register_dispatch(%@) failed: %u");
      *(_DWORD *)v16 = 138412546;
      *(_QWORD *)(v16 + 4) = a1;
      *(_WORD *)(v16 + 12) = 1024;
      *(_DWORD *)(v16 + 14) = v8;
      __SC_log_send(3, v9, v10, v14);
    }
    CFRelease(Current);
    CFRelease(a2);
  }
}

void sub_1000245B0(uint64_t a1)
{
  sub_100024614(*(__CFRunLoop **)(a1 + 32), (uint64_t)CFSTR("TrustRequired interface added"));
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

void sub_100024614(__CFRunLoop *a1, uint64_t a2)
{
  int is_host_trusted;
  CFIndex Count;
  _BOOL4 v7;
  os_log_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  const __CFString *v14;
  const char *v15;
  const char *v16;
  const char *v17;
  const char *v18;
  _QWORD v19[2];
  const __CFString *v20;

  v20 = 0;
  is_host_trusted = lockdown_is_host_trusted(CFSTR("com.apple.SystemConfiguration.InterfaceNamer"), 0, &v20);
  if (qword_10007DB78)
    Count = CFArrayGetCount((CFArrayRef)qword_10007DB78);
  else
    Count = 0;
  v7 = qword_10007DB98 == Count && byte_10007DBA0 == is_host_trusted;
  v8 = (os_log_t)qword_10007DAE8;
  if (!qword_10007DAE8)
  {
    v8 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    qword_10007DAE8 = (uint64_t)v8;
  }
  v9 = _SC_syslog_os_log_mapping(6);
  if (__SC_log_enabled(6, v8, v9))
  {
    v10 = _os_log_pack_size(72);
    v19[1] = v19;
    v11 = (char *)v19 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    v12 = __error();
    v13 = _os_log_pack_fill(v11, v10, *v12, &_mh_execute_header, "%@, trusted = %s%s%@, %ld interface%s)%s");
    v14 = v20;
    v15 = "No";
    *(_DWORD *)v13 = 138413826;
    *(_QWORD *)(v13 + 4) = a2;
    if (is_host_trusted)
      v15 = "Yes";
    v16 = ", error = ";
    if (!v14)
      v16 = "";
    *(_WORD *)(v13 + 12) = 2080;
    *(_QWORD *)(v13 + 14) = v15;
    if (!v14)
      v14 = &stru_100077E20;
    *(_WORD *)(v13 + 22) = 2080;
    *(_QWORD *)(v13 + 24) = v16;
    v17 = "s";
    if (Count == 1)
      v17 = "";
    *(_WORD *)(v13 + 32) = 2112;
    *(_QWORD *)(v13 + 34) = v14;
    v18 = " *";
    *(_WORD *)(v13 + 42) = 2048;
    *(_QWORD *)(v13 + 44) = Count;
    *(_WORD *)(v13 + 52) = 2080;
    *(_QWORD *)(v13 + 54) = v17;
    if (v7)
      v18 = "";
    *(_WORD *)(v13 + 62) = 2080;
    *(_QWORD *)(v13 + 64) = v18;
    __SC_log_send(6, v8, v9, v11);
  }
  if (!v7)
  {
    byte_10007DBA0 = is_host_trusted;
    qword_10007DB98 = Count;
    CFRunLoopPerformBlock(a1, kCFRunLoopDefaultMode, &stru_1000763A0);
    CFRunLoopWakeUp(a1);
  }
  if (v20)
    CFRelease(v20);
}

void sub_100024888(uint64_t a1)
{
  sub_100024614(*(__CFRunLoop **)(a1 + 32), (uint64_t)CFSTR("TrustRequired interface removed"));
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

void sub_1000248EC(uint64_t a1)
{
  sub_100024614(*(__CFRunLoop **)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void sub_100024930(id a1)
{
  qword_10007DB90 = (uint64_t)dispatch_queue_create("Trust Required queue", 0);
}

void sub_10002498C(id a1)
{
  sub_1000249D0();
}

void sub_1000249D0()
{
  CFIndex Count;
  BOOL v1;
  CFIndex v2;
  __CFArray *Mutable;
  CFIndex v4;
  __objc2_prop_list **p_base_props;
  __int128 v6;
  const __CFData *ValueAtIndex;
  SCNetworkInterfaceRef *BytePtr;
  CFStringRef BSDName;
  os_log_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  char *v17;
  os_log_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  SCNetworkInterfaceRef v27;
  __int128 v28;

  if (qword_10007DB78
    && ((Count = CFArrayGetCount((CFArrayRef)qword_10007DB78), Count >= 1) ? (v1 = byte_10007DBA0 == 0) : (v1 = 0), v1))
  {
    v2 = Count;
    Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    v4 = 0;
    p_base_props = &QoSMarkingController__classData.base_props;
    *(_QWORD *)&v6 = 138412290;
    v28 = v6;
    do
    {
      ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex((CFArrayRef)qword_10007DB78, v4);
      BytePtr = (SCNetworkInterfaceRef *)CFDataGetBytePtr(ValueAtIndex);
      BSDName = SCNetworkInterfaceGetBSDName(*BytePtr);
      if (BSDName)
      {
        CFArrayAppendValue(Mutable, BSDName);
      }
      else
      {
        v10 = (os_log_t)p_base_props[349];
        if (!v10)
        {
          v10 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
          p_base_props[349] = (__objc2_prop_list *)v10;
        }
        v11 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v10, v11))
        {
          v12 = _os_log_pack_size(2);
          v15 = (char *)&v28 - ((__chkstk_darwin(v12, v13, v14) + 15) & 0xFFFFFFFFFFFFFFF0);
          v16 = __error();
          *(_WORD *)_os_log_pack_fill(v15, v12, *v16, &_mh_execute_header, "[trust required] interface w/no BSD name not excluded") = 0;
          v17 = v15;
          p_base_props = &QoSMarkingController__classData.base_props;
          __SC_log_send(5, v10, v11, v17);
        }
        v18 = (os_log_t)p_base_props[349];
        if (!v18)
        {
          v18 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
          p_base_props[349] = (__objc2_prop_list *)v18;
        }
        v19 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v18, v19))
        {
          v20 = _os_log_pack_size(12);
          v23 = (char *)&v28 - ((__chkstk_darwin(v20, v21, v22) + 15) & 0xFFFFFFFFFFFFFFF0);
          v24 = __error();
          v25 = v20;
          p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
          v26 = _os_log_pack_fill(v23, v25, *v24, &_mh_execute_header, "  interface = %@");
          v27 = *BytePtr;
          *(_DWORD *)v26 = v28;
          *(_QWORD *)(v26 + 4) = v27;
          __SC_log_send(5, v18, v19, v23);
        }
      }
      ++v4;
    }
    while (v2 != v4);
    CFDictionarySetValue((CFMutableDictionaryRef)qword_10007DB18, CFSTR("_Excluded_"), Mutable);
    CFRelease(Mutable);
  }
  else
  {
    CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_10007DB18, CFSTR("_Excluded_"));
  }
  sub_10001D9A4();
}

void sub_100024C8C(uint64_t a1)
{
  sub_100024CE8(*(const __CFArray **)(a1 + 32));
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

void sub_100024CE8(const __CFArray *a1)
{
  SCPreferencesRef v2;
  __objc2_prop_list **p_base_props;
  os_log_t v4;
  const __SCPreferences *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  int v12;
  int v13;
  os_log_t v14;
  uint64_t v15;
  uint64_t v16;
  const __SCPreferences *v17;
  char *v18;
  int *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int *v25;
  uint64_t v26;
  int v27;
  const char *v28;
  SCNetworkSetRef Default;
  const __CFArray *v30;
  os_log_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int *v35;
  CFIndex Count;
  __int128 v37;
  CFIndex v38;
  const __SCPreferences *v39;
  CFIndex v40;
  const __SCNetworkInterface *ValueAtIndex;
  os_log_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int *v46;
  uint64_t v47;
  CFStringRef BSDName;
  os_log_t v49;
  uint64_t v50;
  char *v51;
  int v52;
  os_log_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  int *v57;
  uint64_t v58;
  CFStringRef v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  CFStringRef v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int *v72;
  uint64_t v73;
  int v74;
  const char *v75;
  os_log_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  int *v80;
  uint64_t v81;
  int v82;
  os_log_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  int *v87;
  uint64_t v88;
  os_log_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  int *v93;
  uint64_t v94;
  int v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  const char *v104;
  const char *v105;
  const char *v106;
  const __SCNetworkSet *v107;
  const __CFArray *v108;
  __int128 v109;

  v2 = SCPreferencesCreate(0, CFSTR("InterfaceNamer:updateNetworkConfiguration"), 0);
  p_base_props = &QoSMarkingController__classData.base_props;
  v4 = (os_log_t)qword_10007DAE8;
  if (!v2)
  {
    if (!qword_10007DAE8)
    {
      v4 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_10007DAE8 = (uint64_t)v4;
    }
    v22 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v4, v22))
    {
      v23 = _os_log_pack_size(12);
      v24 = (char *)&v105 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
      v25 = __error();
      v26 = _os_log_pack_fill(v24, v23, *v25, &_mh_execute_header, "SCPreferencesCreate() failed: %s", v105);
      v27 = SCError();
      v28 = SCErrorString(v27);
      *(_DWORD *)v26 = 136315138;
      *(_QWORD *)(v26 + 4) = v28;
      __SC_log_send(5, v4, v22, v24);
    }
    return;
  }
  v5 = v2;
  v108 = a1;
  if (!qword_10007DAE8)
  {
    v4 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    qword_10007DAE8 = (uint64_t)v4;
  }
  v6 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v4, v6))
  {
    v8 = _os_log_pack_size(22);
    v9 = (char *)&v105 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    v10 = __error();
    v11 = _os_log_pack_fill(v9, v8, *v10, &_mh_execute_header, "%s: evaluating %@");
    *(_DWORD *)v11 = 136315394;
    *(_QWORD *)(v11 + 4) = "updateNetworkConfigurationAsync";
    *(_WORD *)(v11 + 12) = 2112;
    *(_QWORD *)(v11 + 14) = v108;
    __SC_log_send(5, v4, v6, v9);
  }
  v12 = 0;
  *(_QWORD *)&v7 = 136315650;
  v109 = v7;
  while (!SCPreferencesLock(v5, 1u))
  {
    v13 = SCError();
    v14 = (os_log_t)p_base_props[349];
    if (v13 != 3005)
    {
      if (!v14)
      {
        v14 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        p_base_props[349] = (__objc2_prop_list *)v14;
      }
      v69 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v14, v69))
      {
        v70 = _os_log_pack_size(22);
        v71 = (char *)&v105 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
        v72 = __error();
        v73 = _os_log_pack_fill(v71, v70, *v72, &_mh_execute_header, "%s: failed to get lock, %s", v105, v106);
        v74 = SCError();
        v75 = SCErrorString(v74);
        *(_DWORD *)v73 = 136315394;
        *(_QWORD *)(v73 + 4) = "updateNetworkConfigurationAsync";
        *(_WORD *)(v73 + 12) = 2080;
        *(_QWORD *)(v73 + 14) = v75;
        __SC_log_send(5, v14, v69, v71);
        p_base_props = &QoSMarkingController__classData.base_props;
      }
LABEL_58:
      v76 = (os_log_t)p_base_props[349];
      if (!v76)
      {
        v76 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        p_base_props[349] = (__objc2_prop_list *)v76;
      }
      v77 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v76, v77))
      {
        v78 = _os_log_pack_size(12);
        v79 = (char *)&v105 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
        v80 = __error();
        v81 = _os_log_pack_fill(v79, v78, *v80, &_mh_execute_header, "%s: can't acquire lock, giving up", v105);
        *(_DWORD *)v81 = 136315138;
        *(_QWORD *)(v81 + 4) = "updateNetworkConfigurationAsync";
        __SC_log_send(5, v76, v77, v79);
      }
      goto LABEL_87;
    }
    if (!v14)
    {
      v14 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      p_base_props[349] = (__objc2_prop_list *)v14;
    }
    v15 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v14, v15))
    {
      v16 = _os_log_pack_size(24);
      v17 = v5;
      v18 = (char *)&v105 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
      v19 = __error();
      v20 = _os_log_pack_fill(v18, v16, *v19, &_mh_execute_header, "%s: kSCStatusStale, calling Synchronize (try %d of %d)", v105, (_DWORD)v106, (_DWORD)v107);
      *(_DWORD *)v20 = v109;
      ++v12;
      *(_QWORD *)(v20 + 4) = "updateNetworkConfigurationAsync";
      *(_WORD *)(v20 + 12) = 1024;
      *(_DWORD *)(v20 + 14) = v12;
      *(_WORD *)(v20 + 18) = 1024;
      *(_DWORD *)(v20 + 20) = 10;
      v21 = v18;
      v5 = v17;
      __SC_log_send(5, v14, v15, v21);
      p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
    }
    else
    {
      ++v12;
    }
    SCPreferencesSynchronize(v5);
    if (v12 == 10)
      goto LABEL_58;
  }
  Default = SCNetworkSetCopyCurrent(v5);
  v30 = v108;
  if (!Default)
  {
    v31 = (os_log_t)p_base_props[349];
    if (!v31)
    {
      v31 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      p_base_props[349] = (__objc2_prop_list *)v31;
    }
    v32 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v31, v32))
    {
      v33 = _os_log_pack_size(2);
      v34 = (char *)&v105 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
      v35 = __error();
      *(_WORD *)_os_log_pack_fill(v34, v33, *v35, &_mh_execute_header, "No current set, adding default") = 0;
      __SC_log_send(5, v31, v32, v34);
      p_base_props = &QoSMarkingController__classData.base_props;
    }
    Default = (SCNetworkSetRef)_SCNetworkSetCreateDefault(v5);
    if (!Default)
    {
      v89 = (os_log_t)p_base_props[349];
      if (!v89)
      {
        v89 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        p_base_props[349] = (__objc2_prop_list *)v89;
      }
      v90 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v89, v90))
      {
        v91 = _os_log_pack_size(12);
        v92 = (char *)&v105 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
        v93 = __error();
        v94 = _os_log_pack_fill(v92, v91, *v93, &_mh_execute_header, "_SCNetworkSetCreateDefault() failed: %s", v105);
        v95 = SCError();
        v96 = SCErrorString(v95);
        *(_DWORD *)v94 = 136315138;
        *(_QWORD *)(v94 + 4) = v96;
        __SC_log_send(5, v89, v90, v92);
      }
      SCPreferencesUnlock(v5);
      goto LABEL_87;
    }
  }
  if (!v30 || (Count = CFArrayGetCount(v30), Count < 1))
  {
    SCPreferencesUnlock(v5);
    goto LABEL_86;
  }
  v38 = Count;
  v107 = Default;
  v39 = v5;
  HIDWORD(v106) = 0;
  v40 = 0;
  *(_QWORD *)&v37 = 138412290;
  v109 = v37;
  do
  {
    ValueAtIndex = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v30, v40);
    if (_SCNetworkInterfaceIsHiddenInterface())
    {
      v42 = (os_log_t)qword_10007DAE8;
      if (!qword_10007DAE8)
      {
        v42 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        qword_10007DAE8 = (uint64_t)v42;
      }
      v43 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v42, v43))
      {
        v44 = _os_log_pack_size(12);
        v45 = (char *)&v105 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
        v46 = __error();
        v47 = _os_log_pack_fill(v45, v44, *v46, &_mh_execute_header, "%@: not configuring hidden interface");
        BSDName = SCNetworkInterfaceGetBSDName(ValueAtIndex);
        *(_DWORD *)v47 = v109;
        *(_QWORD *)(v47 + 4) = BSDName;
        v49 = v42;
        v50 = v43;
        v51 = v45;
        goto LABEL_50;
      }
    }
    else if (SCNetworkInterfaceGetAutoConfigure(ValueAtIndex))
    {
      v52 = SCNetworkSetEstablishDefaultInterfaceConfiguration(v107, ValueAtIndex);
      v53 = (os_log_t)qword_10007DAE8;
      if (v52)
      {
        if (!qword_10007DAE8)
        {
          v53 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
          qword_10007DAE8 = (uint64_t)v53;
        }
        v54 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v53, v54))
        {
          v55 = _os_log_pack_size(12);
          v56 = (char *)&v105 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
          v57 = __error();
          v58 = _os_log_pack_fill(v56, v55, *v57, &_mh_execute_header, "added default configuration for %@");
          v59 = SCNetworkInterfaceGetBSDName(ValueAtIndex);
          *(_DWORD *)v58 = v109;
          *(_QWORD *)(v58 + 4) = v59;
          __SC_log_send(5, v53, v54, v56);
        }
        HIDWORD(v106) = 1;
      }
      else
      {
        if (!qword_10007DAE8)
        {
          v53 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
          qword_10007DAE8 = (uint64_t)v53;
        }
        v60 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v53, v60))
        {
          v65 = _os_log_pack_size(12);
          v62 = (char *)&v105 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
          v66 = *__error();
          v64 = _os_log_pack_fill(v62, v65, v66, &_mh_execute_header, "did not configure %@ (it's likely already configured)");
LABEL_49:
          v67 = v64;
          v68 = SCNetworkInterfaceGetBSDName(ValueAtIndex);
          *(_DWORD *)v67 = v109;
          *(_QWORD *)(v67 + 4) = v68;
          v49 = v53;
          v50 = v60;
          v51 = v62;
LABEL_50:
          __SC_log_send(5, v49, v50, v51);
        }
      }
    }
    else
    {
      v53 = (os_log_t)qword_10007DAE8;
      if (!qword_10007DAE8)
      {
        v53 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        qword_10007DAE8 = (uint64_t)v53;
      }
      v60 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v53, v60))
      {
        v61 = _os_log_pack_size(12);
        v62 = (char *)&v105 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
        v63 = *__error();
        v64 = _os_log_pack_fill(v62, v61, v63, &_mh_execute_header, "%@: auto-configure disabled on interface");
        goto LABEL_49;
      }
    }
    ++v40;
  }
  while (v38 != v40);
  v5 = v39;
  Default = v107;
  if (!HIDWORD(v106))
    goto LABEL_85;
  if (SCPreferencesCommitChanges(v39))
  {
    v82 = SCPreferencesApplyChanges(v39);
    v83 = (os_log_t)qword_10007DAE8;
    if (v82)
    {
      if (!qword_10007DAE8)
      {
        v83 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        qword_10007DAE8 = (uint64_t)v83;
      }
      v84 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v83, v84))
      {
        v85 = _os_log_pack_size(12);
        v86 = (char *)&v105 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
        v87 = __error();
        v88 = _os_log_pack_fill(v86, v85, *v87, &_mh_execute_header, "%s: configuration saved", v105);
        *(_DWORD *)v88 = 136315138;
        *(_QWORD *)(v88 + 4) = "updateNetworkConfigurationAsync";
        goto LABEL_84;
      }
      goto LABEL_85;
    }
    if (!qword_10007DAE8)
    {
      v83 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_10007DAE8 = (uint64_t)v83;
    }
    v84 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v83, v84))
      goto LABEL_85;
    v100 = _os_log_pack_size(12);
    v86 = (char *)&v105 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    v101 = *__error();
    v99 = _os_log_pack_fill(v86, v100, v101, &_mh_execute_header, "SCPreferencesApplyChanges() failed: %s");
  }
  else
  {
    v83 = (os_log_t)qword_10007DAE8;
    if (!qword_10007DAE8)
    {
      v83 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_10007DAE8 = (uint64_t)v83;
    }
    v84 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v83, v84))
      goto LABEL_85;
    v97 = _os_log_pack_size(12);
    v86 = (char *)&v105 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    v98 = *__error();
    v99 = _os_log_pack_fill(v86, v97, v98, &_mh_execute_header, "SCPreferencesCommitChanges() failed: %s");
  }
  v102 = v99;
  v103 = SCError();
  v104 = SCErrorString(v103);
  *(_DWORD *)v102 = 136315138;
  *(_QWORD *)(v102 + 4) = v104;
LABEL_84:
  __SC_log_send(5, v83, v84, v86);
  Default = v107;
LABEL_85:
  SCPreferencesUnlock(v39);
  if (Default)
LABEL_86:
    CFRelease(Default);
LABEL_87:
  CFRelease(v5);
}

void sub_1000259D8(id a1)
{
  qword_10007DBB0 = (uint64_t)dispatch_queue_create("InterfaceNamerConfigure New Interfaces queue", 0);
}

uint64_t sub_100025A34(const __CFDictionary *a1, const __CFDictionary *a2, const __CFArray *a3, const __CFString *a4, const __CFArray *a5, CFTypeRef *a6)
{
  const __CFArray *Mutable;
  CFTypeID TypeID;
  CFIndex Count;
  CFIndex v13;
  CFIndex v14;
  int v15;
  const void *ValueAtIndex;
  uint64_t v17;
  const void *v18;
  __CFDictionary *v19;
  CFNumberRef v20;
  const void *Value;
  CFTypeID v22;
  const __CFDictionary *MutableCopy;
  int v24;
  const void *v25;
  CFTypeID v26;
  CFNumberRef v27;
  CFTypeID v28;
  CFIndex v29;
  CFIndex v30;
  CFIndex v31;
  int v32;
  const void *v33;
  uint64_t v34;
  const void *v35;
  __CFDictionary *v36;
  CFNumberRef v37;
  CFTypeID v38;
  const __CFDictionary *v39;
  CFIndex v40;
  uint64_t v41;
  CFTypeID v42;
  uint64_t v43;
  CFMutableArrayRef v44;
  const __CFArray *v45;
  const void **v46;
  uint64_t i;
  const void *v48;
  CFIndex v49;
  const __CFString *v50;
  const __CFDictionary *v51;
  CFTypeID v52;
  const __CFDictionary *v53;
  CFTypeID v54;
  const __CFArray *v55;
  CFTypeID v56;
  const void *v57;
  const void *v58;
  const __CFDictionary *v59;
  __CFArray *v60;
  __CFArray *v61;
  int v62;
  const __CFArray *v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  const __CFDictionary *v67;
  const __CFDictionary *v68;
  __CFDictionary *v69;
  __CFDictionary *v70;
  int v71;
  const __CFDictionary *v72;
  int v73;
  CFIndex v74;
  const __CFDictionary *v75;
  const __CFDictionary *v76;
  char v77;
  const __CFString *v78;
  CFTypeID v79;
  const __CFArray *v80;
  CFTypeID v81;
  CFIndex v82;
  CFIndex v83;
  CFIndex j;
  const __CFString *v85;
  CFTypeID v86;
  const void *v87;
  CFTypeID v88;
  char *v89;
  unsigned int v90;
  int v91;
  const __CFNumber *v92;
  CFTypeID v93;
  const __CFArray *v94;
  CFTypeID v95;
  CFIndex v96;
  CFIndex v97;
  CFIndex k;
  const void *v99;
  CFTypeID v100;
  const __CFNumber *v101;
  CFTypeID v102;
  const __CFArray *v103;
  CFTypeID v104;
  CFIndex v105;
  CFIndex v106;
  CFIndex v107;
  const void *v108;
  CFTypeID v109;
  char *v110;
  char *v111;
  unsigned int v112;
  unsigned int v113;
  const __CFNumber *v114;
  CFTypeID v115;
  const __CFNumber *v116;
  CFTypeID v117;
  const void *v118;
  CFTypeID v119;
  char *v120;
  char *v121;
  const __CFNumber *v122;
  CFTypeID v123;
  const __CFString *v124;
  CFTypeID v125;
  char *v126;
  char *v127;
  os_log_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  int *v137;
  char *v138;
  char *v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  uint64_t v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  int v157;
  int v158;
  char *v159;
  unsigned int v160;
  uint64_t v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  uint64_t v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  uint64_t v170;
  uint64_t v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t v176;
  unsigned int v177;
  _QWORD *v178;
  int v179;
  int v180;
  int v181;
  unsigned int *v182;
  unsigned int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unsigned int v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  os_log_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  int *v197;
  os_log_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  int *v204;
  in_addr *v206;
  const __CFDictionary *v207;
  CFStringRef v208;
  CFStringRef v209;
  CFStringRef v210;
  CFStringRef v211;
  CFStringRef v212;
  __CFSet *v213;
  const __CFArray *v214;
  const void *v215;
  CFDictionaryRef v216;
  CFTypeRef *v217;
  CFStringRef v218;
  CFStringRef v219;
  CFStringRef v220;
  const __CFArray *v221;
  void *v222;
  unsigned int v223;
  unsigned int *v224;
  _DWORD *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  CFRange v246;
  CFRange v247;

  v217 = a6;
  v220 = a4;
  Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  if (!Mutable)
    sub_100065A88();
  v216 = a1;
  v224 = 0;
  v221 = Mutable;
  v207 = a2;
  v214 = a3;
  sub_1000272C8(Mutable, a2, a3, 0, 0);
  TypeID = CFArrayGetTypeID();
  if (a5)
  {
    if (CFGetTypeID(a5) == TypeID)
    {
      Count = CFArrayGetCount(a5);
      if (Count >= 1)
      {
        v13 = Count;
        v14 = 0;
        v219 = kSCPropNetDNSDomainName;
        v218 = kSCPropNetDNSServerTimeout;
        v15 = 150000;
        do
        {
          LODWORD(v230) = 0;
          ValueAtIndex = CFArrayGetValueAtIndex(a5, v14);
          v17 = _SC_trimDomain(ValueAtIndex);
          if (v17)
          {
            v18 = (const void *)v17;
            LODWORD(v230) = v15;
            v19 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
            CFDictionarySetValue(v19, v219, v18);
            CFDictionarySetValue(v19, kSCPropNetDNSOptions, CFSTR("pdns"));
            v20 = CFNumberCreate(0, kCFNumberIntType, &v230);
            CFDictionarySetValue(v19, kSCPropNetDNSSearchOrder, v20);
            CFRelease(v20);
            if (qword_10007DBE0)
              CFDictionarySetValue(v19, v218, (const void *)qword_10007DBE0);
            sub_100028EDC(v19, (uint64_t)"Private DNS", 0, v14);
            sub_100028F88(v221, v19);
            CFRelease(v19);
            CFRelease(v18);
          }
          ++v14;
          v15 += 200;
        }
        while (v13 != v14);
      }
    }
  }
  if (v216
    && (Value = CFDictionaryGetValue(v216, kSCPropNetDNSServerAddresses), v22 = CFArrayGetTypeID(), Value)
    && CFGetTypeID(Value) == v22
    && CFArrayGetCount((CFArrayRef)Value))
  {
    LODWORD(v230) = 200000;
    MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v216);
    v24 = 0;
  }
  else
  {
    LODWORD(v230) = 200000;
    MutableCopy = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    v24 = 1;
  }
  if (!MutableCopy)
    sub_100065AB0();
  v218 = kSCPropNetDNSSearchOrder;
  v25 = CFDictionaryGetValue(MutableCopy, kSCPropNetDNSSearchOrder);
  v26 = CFNumberGetTypeID();
  LODWORD(v219) = v24;
  if (v25 && CFGetTypeID(v25) == v26 && CFNumberGetValue((CFNumberRef)v25, kCFNumberSInt32Type, &v230))
  {
    LODWORD(v216) = 0;
  }
  else
  {
    LODWORD(v230) = 200000;
    v27 = CFNumberCreate(0, kCFNumberIntType, &v230);
    CFDictionarySetValue(MutableCopy, v218, v27);
    CFRelease(v27);
    LODWORD(v216) = 1;
  }
  v215 = sub_1000292A8(MutableCopy, v221);
  sub_100028EDC(MutableCopy, (uint64_t)"Default", 0, 0);
  sub_100028F88(v221, MutableCopy);
  CFRelease(MutableCopy);
  v28 = CFArrayGetTypeID();
  if (v220)
  {
    if (CFGetTypeID(v220) == v28)
    {
      v29 = CFArrayGetCount((CFArrayRef)v220);
      if (v29 >= 1)
      {
        v30 = v29;
        v31 = 0;
        v32 = 300000;
        do
        {
          LODWORD(v230) = 0;
          v33 = CFArrayGetValueAtIndex((CFArrayRef)v220, v31);
          v34 = _SC_trimDomain(v33);
          if (v34)
          {
            v35 = (const void *)v34;
            LODWORD(v230) = v32;
            v36 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
            CFDictionarySetValue(v36, kSCPropNetDNSDomainName, v35);
            CFDictionarySetValue(v36, kSCPropNetDNSOptions, CFSTR("mdns"));
            v37 = CFNumberCreate(0, kCFNumberIntType, &v230);
            CFDictionarySetValue(v36, v218, v37);
            CFRelease(v37);
            if (qword_10007DBD8)
              CFDictionarySetValue(v36, kSCPropNetDNSServerTimeout, (const void *)qword_10007DBD8);
            sub_100028EDC(v36, (uint64_t)"Multicast DNS", 0, v31);
            sub_100028F88(v221, v36);
            CFRelease(v36);
            CFRelease(v35);
          }
          ++v31;
          v32 += 200;
        }
        while (v30 != v31);
      }
    }
  }
  v38 = CFDictionaryGetTypeID();
  v39 = v207;
  if (v207)
  {
    if (CFGetTypeID(v207) == v38)
    {
      v40 = CFDictionaryGetCount(v207);
      if (v40)
      {
        v41 = v40;
        v42 = CFArrayGetTypeID();
        if (v214 && CFGetTypeID(v214) == v42)
        {
          v43 = CFArrayGetCount(v214);
          if (v43 >= 1)
          {
            v44 = CFArrayCreateMutableCopy(0, 0, v214);
            goto LABEL_41;
          }
        }
        else
        {
          v43 = 0;
        }
        v44 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
LABEL_41:
        v45 = v44;
        v244 = 0u;
        v245 = 0u;
        v242 = 0u;
        v243 = 0u;
        v240 = 0u;
        v241 = 0u;
        v238 = 0u;
        v239 = 0u;
        v236 = 0u;
        v237 = 0u;
        v234 = 0u;
        v235 = 0u;
        v232 = 0u;
        v233 = 0u;
        v230 = 0u;
        v231 = 0u;
        if (v41 < 33)
        {
          v46 = (const void **)&v230;
          CFDictionaryGetKeysAndValues(v207, (const void **)&v230, 0);
          if (v41 < 1)
          {
LABEL_50:
            v213 = CFSetCreateMutable(0, 0, &kCFTypeSetCallBacks);
            if (v43 >= 1)
            {
              v49 = 0;
              v220 = kSCPropNetDNSServerAddresses;
              v212 = kSCPropInterfaceName;
              v210 = kSCPropNetDNSSearchDomains;
              v211 = (CFStringRef)kSCPropNetDNSServiceIdentifier;
              v208 = kSCPropNetDNSSupplementalMatchOrders;
              v209 = kSCPropNetDNSSupplementalMatchDomains;
              do
              {
                v50 = (const __CFString *)CFArrayGetValueAtIndex(v45, v49);
                v51 = (const __CFDictionary *)CFDictionaryGetValue(v207, v50);
                v52 = CFDictionaryGetTypeID();
                if (v51)
                {
                  if (CFGetTypeID(v51) == v52)
                  {
                    v53 = (const __CFDictionary *)CFDictionaryGetValue(v51, kSCEntNetDNS);
                    v54 = CFDictionaryGetTypeID();
                    if (v53)
                    {
                      if (CFGetTypeID(v53) == v54)
                      {
                        v55 = (const __CFArray *)CFDictionaryGetValue(v53, v220);
                        v56 = CFArrayGetTypeID();
                        if (v55)
                        {
                          if (CFGetTypeID(v55) == v56)
                          {
                            if (CFArrayGetCount(v55))
                            {
                              v57 = CFDictionaryGetValue(v53, v212);
                              if (v57)
                              {
                                v58 = v57;
                                if (!CFEqual(v57, CFSTR("*"))
                                  && !CFDictionaryContainsKey(v53, v211)
                                  && !CFSetContainsValue(v213, v58))
                                {
                                  CFSetSetValue(v213, v58);
                                  if (_SC_cfstring_to_cstring(v58, &v226, 16, 1536))
                                  {
                                    if (sub_10002D8E0((uint64_t)&v226))
                                    {
                                      v59 = CFDictionaryCreateMutableCopy(0, 0, v53);
                                      v60 = sub_1000292A8(v59, 0);
                                      if (v60)
                                      {
                                        v61 = v60;
                                        CFDictionarySetValue(v59, v210, v60);
                                        CFRelease(v61);
                                      }
                                      v62 = sub_100028D74(v51, 0);
                                      if (v62)
                                      {
                                        sub_1000280C8(v59, v62 | 0x1000);
                                        CFDictionaryRemoveValue(v59, v209);
                                        CFDictionaryRemoveValue(v59, v208);
                                        sub_100028EDC(v59, (uint64_t)"Scoped", v50, 0);
                                        sub_100028F88(v221, v59);
                                        sub_1000272C8(v221, v207, v214, v58, v51);
                                      }
                                      CFRelease(v59);
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                ++v49;
              }
              while (v43 != v49);
            }
            CFRelease(v213);
            CFRelease(v45);
            v39 = v207;
            goto LABEL_73;
          }
        }
        else
        {
          v46 = (const void **)CFAllocatorAllocate(0, 8 * v41, 0);
          CFDictionaryGetKeysAndValues(v207, v46, 0);
        }
        for (i = 0; i != v41; ++i)
        {
          v48 = v46[i];
          v246.location = 0;
          v246.length = v43;
          if (!CFArrayContainsValue(v45, v246, v48))
          {
            CFArrayAppendValue(v45, v48);
            ++v43;
          }
        }
        if (v46 != (const void **)&v230)
          CFAllocatorDeallocate(0, v46);
        goto LABEL_50;
      }
    }
  }
LABEL_73:
  v63 = v221;
  sub_1000279A8(v221, v39);
  v64 = CFArrayGetCount(v221);
  if (v64 < 2)
  {
    v66 = (int)v216;
  }
  else
  {
    v247.location = 0;
    v247.length = v64;
    CFArraySortValues(v221, v247, (CFComparatorFunction)sub_100027DEC, 0);
    v65 = v64 + 1;
    v66 = (int)v216;
    do
    {
      v67 = (const __CFDictionary *)CFArrayGetValueAtIndex(v221, v65 - 2);
      if (!CFDictionaryContainsKey(v67, kSCPropNetDNSDomainName)
        && !CFDictionaryContainsKey(v67, kSCPropNetDNSSearchDomains)
        && !CFDictionaryContainsKey(v67, kSCPropNetDNSServerAddresses))
      {
        CFArrayRemoveValueAtIndex(v221, v65 - 2);
        --v64;
      }
      --v65;
    }
    while (v65 > 2);
  }
  v68 = (const __CFDictionary *)CFArrayGetValueAtIndex(v221, 0);
  v69 = CFDictionaryCreateMutableCopy(0, 0, v68);
  v70 = v69;
  if (v215)
  {
    CFDictionarySetValue(v69, kSCPropNetDNSSearchDomains, v215);
    CFRelease(v215);
  }
  if (v64 > 1)
    v71 = v66;
  else
    v71 = 0;
  if (v71 == 1)
  {
    v72 = (const __CFDictionary *)CFArrayGetValueAtIndex(v221, 1);
    if (CFDictionaryContainsKey(v72, kSCPropNetDNSDomainName)
      || v72
      && (LODWORD(v226) = 0,
          *(_QWORD *)&v230 = 0,
          CFDictionaryGetValueIfPresent(v72, CFSTR("__FLAGS__"), (const void **)&v230))
      && (_QWORD)v230
      && CFNumberGetValue((CFNumberRef)v230, kCFNumberSInt32Type, &v226)
      && (v226 & 0x1000) != 0)
    {
      CFDictionaryRemoveValue(v70, v218);
    }
  }
  CFArraySetValueAtIndex(v221, 0, v70);
  CFRelease(v70);
  if (v64 < 2)
    v73 = (int)v219;
  else
    v73 = 0;
  if (v73 == 1)
  {
    v224 = 0;
    goto LABEL_208;
  }
  v223 = 0;
  v224 = sub_10002AA94();
  if (v64 >= 1)
  {
    v74 = 0;
    LODWORD(v219) = 0;
    v215 = kSCPropNetDNSDomainName;
    v214 = (const __CFArray *)kSCPropNetDNSSearchDomains;
    v213 = (__CFSet *)kSCPropNetDNSServerAddresses;
    v212 = kSCPropNetDNSSortList;
    v206 = (in_addr *)&v226 + 1;
    v211 = kSCPropNetDNSServerPort;
    v209 = kSCPropNetDNSOptions;
    v210 = kSCPropNetDNSServerTimeout;
    v208 = (CFStringRef)kSCPropNetDNSServiceIdentifier;
    v216 = (CFDictionaryRef)v64;
    while (1)
    {
      v222 = 0;
      v75 = (const __CFDictionary *)CFArrayGetValueAtIndex(v63, v74);
      v76 = v75;
      if (v75
        && (LODWORD(v226) = 0,
            *(_QWORD *)&v230 = 0,
            CFDictionaryGetValueIfPresent(v75, CFSTR("__FLAGS__"), (const void **)&v230))
        && (_QWORD)v230
        && CFNumberGetValue((CFNumberRef)v230, kCFNumberSInt32Type, &v226)
        && ((~(_DWORD)v226 & 6) == 0 || (v226 & 0x3000) != 0))
      {
        v77 = 1;
      }
      else
      {
        if (!(_DWORD)v219)
          CFDictionaryApplyFunction(v207, (CFDictionaryApplierFunction)sub_100028058, &v223);
        v76 = CFDictionaryCreateMutableCopy(0, 0, v76);
        sub_1000280C8(v76, v223);
        v77 = 0;
        LODWORD(v219) = 1;
      }
      if (v217 && !v74)
        *v217 = CFRetain(v76);
      v225 = sub_10002B130();
      v78 = (const __CFString *)CFDictionaryGetValue(v76, v215);
      v79 = CFStringGetTypeID();
      if (v78
        && CFGetTypeID(v78) == v79
        && CFStringGetLength(v78) >= 1
        && _SC_cfstring_to_cstring(v78, &v230, 1025, 134217984))
      {
        sub_10002B548((void **)&v225, (char *)&v230);
      }
      v80 = (const __CFArray *)CFDictionaryGetValue(v76, v214);
      v81 = CFArrayGetTypeID();
      if (v80)
      {
        if (CFGetTypeID(v80) == v81)
        {
          v82 = CFArrayGetCount(v80);
          if (v82 >= 1)
          {
            v83 = v82;
            for (j = 0; j != v83; ++j)
            {
              v85 = (const __CFString *)CFArrayGetValueAtIndex(v80, j);
              v86 = CFStringGetTypeID();
              if (v85
                && CFGetTypeID(v85) == v86
                && CFStringGetLength(v85) >= 1
                && _SC_cfstring_to_cstring(v85, &v230, 1025, 134217984))
              {
                sub_10002B3F0((void **)&v225, (char *)&v230);
              }
            }
          }
        }
      }
      v87 = CFDictionaryGetValue(v76, CFSTR("__IF_INDEX__"));
      v88 = CFNumberGetTypeID();
      if (v87
        && CFGetTypeID(v87) == v88
        && (LODWORD(v226) = 0, CFNumberGetValue((CFNumberRef)v87, kCFNumberIntType, &v226)))
      {
        if ((_DWORD)v226)
        {
          v89 = (char *)sub_10002D76C(v226, (uint64_t)&v230);
          if (v89)
          {
            v220 = CFStringCreateWithCString(0, v89, 0x600u);
            v90 = v226;
            v91 = v226;
          }
          else
          {
            v220 = 0;
            v91 = 0;
            v90 = v226;
          }
        }
        else
        {
          v90 = 0;
          v220 = 0;
          v91 = 0;
          v89 = 0;
        }
        sub_10002B5B4((void **)&v225, v90, v89);
      }
      else
      {
        v220 = 0;
        v91 = 0;
      }
      v92 = (const __CFNumber *)CFDictionaryGetValue(v76, CFSTR("__FLAGS__"));
      v93 = CFNumberGetTypeID();
      if (v92)
      {
        if (CFGetTypeID(v92) == v93)
        {
          LODWORD(v230) = 0;
          if (CFNumberGetValue(v92, kCFNumberSInt32Type, &v230))
            sub_10002B3A0((uint64_t)&v225, v230);
        }
      }
      v94 = (const __CFArray *)CFDictionaryGetValue(v76, v213);
      v95 = CFArrayGetTypeID();
      if (v94)
      {
        if (CFGetTypeID(v94) == v95)
        {
          v96 = CFArrayGetCount(v94);
          if (v96 >= 1)
          {
            v97 = v96;
            for (k = 0; k != v97; ++k)
            {
              v226 = 0;
              v227 = 0;
              v229 = 0;
              v228 = 0;
              v99 = CFArrayGetValueAtIndex(v94, k);
              v100 = CFStringGetTypeID();
              if (v99
                && CFGetTypeID(v99) == v100
                && _SC_cfstring_to_cstring(v99, &v230, 64, 1536)
                && _SC_string_to_sockaddr(&v230, 0, &v226, 28))
              {
                if (BYTE1(v226) == 30 && v227 == 254 && (BYTE1(v227) & 0xC0) == 0x80 && !v229 && v91)
                  v229 = v91;
                sub_10002B184((void **)&v225, (unsigned __int8 *)&v226);
              }
            }
          }
        }
      }
      v101 = (const __CFNumber *)CFDictionaryGetValue(v76, v218);
      v102 = CFNumberGetTypeID();
      if (v101)
      {
        if (CFGetTypeID(v101) == v102)
        {
          LODWORD(v230) = 0;
          if (CFNumberGetValue(v101, kCFNumberSInt32Type, &v230))
            sub_10002B6C4((uint64_t)&v225, v230);
        }
      }
      v103 = (const __CFArray *)CFDictionaryGetValue(v76, v212);
      v104 = CFArrayGetTypeID();
      if (v103)
      {
        if (CFGetTypeID(v103) == v104)
        {
          v105 = CFArrayGetCount(v103);
          if (v105 >= 1)
            break;
        }
      }
LABEL_176:
      v114 = (const __CFNumber *)CFDictionaryGetValue(v76, v211);
      v115 = CFNumberGetTypeID();
      v63 = v221;
      if (v114)
      {
        if (CFGetTypeID(v114) == v115)
        {
          LODWORD(v230) = 0;
          if (CFNumberGetValue(v114, kCFNumberIntType, &v230))
            sub_10002B714((uint64_t)&v225, (unsigned __int16)v230);
        }
      }
      v116 = (const __CFNumber *)CFDictionaryGetValue(v76, v210);
      v117 = CFNumberGetTypeID();
      if (v116)
      {
        if (CFGetTypeID(v116) == v117)
        {
          LODWORD(v230) = 0;
          if (CFNumberGetValue(v116, kCFNumberIntType, &v230))
            sub_10002B764((uint64_t)&v225, v230);
        }
      }
      v118 = CFDictionaryGetValue(v76, v209);
      v119 = CFStringGetTypeID();
      if (v118)
      {
        if (CFGetTypeID(v118) == v119)
        {
          v120 = (char *)_SC_cfstring_to_cstring(v118, 0, 0, 134217984);
          if (v120)
          {
            v121 = v120;
            sub_10002B658((void **)&v225, v120);
            CFAllocatorDeallocate(0, v121);
          }
        }
      }
      v122 = (const __CFNumber *)CFDictionaryGetValue(v76, v208);
      v123 = CFNumberGetTypeID();
      if (v122)
      {
        if (CFGetTypeID(v122) == v123)
        {
          LODWORD(v230) = 0;
          if (CFNumberGetValue(v122, kCFNumberIntType, &v230))
            sub_10002B7B4((uint64_t)&v225, v230);
        }
      }
      v124 = (const __CFString *)CFDictionaryGetValue(v76, CFSTR("__CONFIGURATION_ID__"));
      v125 = CFStringGetTypeID();
      if (v124)
      {
        if (CFGetTypeID(v124) == v125 && CFStringGetLength(v124) >= 1)
        {
          v126 = (char *)_SC_cfstring_to_cstring(v124, 0, 0, 134217984);
          if (v126)
          {
            v127 = v126;
            sub_10002B4DC((void **)&v225, v126);
            CFAllocatorDeallocate(0, v127);
          }
        }
      }
      if (v220)
        CFRelease(v220);
      v222 = v225;
      sub_10002AB10((void **)&v224, v225);
      sub_10002B0D4(&v222);
      if ((v77 & 1) == 0)
        CFRelease(v76);
      if ((CFDictionaryRef)++v74 == v216)
        goto LABEL_207;
    }
    v106 = v105;
    v107 = 0;
    while (1)
    {
      v226 = 0;
      v108 = CFArrayGetValueAtIndex(v103, v107);
      v109 = CFStringGetTypeID();
      if (!v108 || CFGetTypeID(v108) != v109 || !_SC_cfstring_to_cstring(v108, &v230, 128, 1536))
        goto LABEL_175;
      v110 = strchr((char *)&v230, 47);
      if (v110)
        break;
      v226 = 0;
      if (inet_aton((const char *)&v230, (in_addr *)&v226) == 1)
      {
        v112 = bswap32(v226);
        if ((v112 & 0x80000000) == 0)
        {
          v113 = -16777216;
          goto LABEL_173;
        }
        if (v112 >> 30 == 2)
        {
          v113 = -65536;
          goto LABEL_173;
        }
        if (v112 >> 29 == 6)
        {
          v113 = -256;
LABEL_173:
          HIDWORD(v226) = bswap32(v113);
LABEL_174:
          sub_10002B474((void **)&v225, &v226);
        }
      }
LABEL_175:
      if (v106 == ++v107)
        goto LABEL_176;
    }
    v111 = v110;
    *v110 = 0;
    v226 = 0;
    if (inet_aton((const char *)&v230, (in_addr *)&v226) != 1 || inet_aton(v111 + 1, v206) != 1)
      goto LABEL_175;
    goto LABEL_174;
  }
LABEL_207:
  sub_10002B804(v223);
  sub_10002B850((void **)&v224);
LABEL_208:
  sub_10002AFE4((uint64_t *)&v224, (unsigned __int8 *)&v230, 0x20uLL);
  if ((_QWORD)v230 == (_QWORD)xmmword_10007DBB8
    && *((_QWORD *)&v230 + 1) == *((_QWORD *)&xmmword_10007DBB8 + 1)
    && (_QWORD)v231 == qword_10007DBC8
    && *((_QWORD *)&v231 + 1) == unk_10007DBD0)
  {
    v190 = 0;
  }
  else
  {
    xmmword_10007DBB8 = v230;
    *(_OWORD *)&qword_10007DBC8 = v231;
    v131 = sub_100007594();
    v132 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v131, v132))
    {
      v133 = _os_log_pack_size(2);
      v136 = (char *)&v206 - ((__chkstk_darwin(v133, v134, v135) + 15) & 0xFFFFFFFFFFFFFFF0);
      v137 = __error();
      *(_WORD *)_os_log_pack_fill(v136, v133, *v137, &_mh_execute_header, "Updating DNS configuration") = 0;
      __SC_log_send(6, v131, v132, v136);
    }
    if (v224)
    {
      v138 = sub_1000281BC(v224, bswap32(v224[12]) + 56);
      if (v138)
      {
        v139 = v138;
        v140 = *((_DWORD *)v138 + 12);
        v141 = bswap32(*((_DWORD *)v138 + 13));
        v142 = bswap32(*(_DWORD *)v138);
        *(_DWORD *)v138 = v142;
        if (v141 >= 8 * v142)
        {
          v143 = bswap32(v140);
          v144 = 8 * v142;
          v145 = 8 * v142 ? (uint64_t)&v138[v143 + 56] : 0;
          v146 = v141 - v144;
          *(_QWORD *)(v138 + 4) = v145;
          v147 = bswap32(*((_DWORD *)v138 + 3));
          *((_DWORD *)v138 + 3) = v147;
          if (v146 >= 8 * v147)
          {
            v148 = 8 * v147;
            v149 = (uint64_t)&v138[v143 + 56 + v144];
            v150 = v148 ? v149 : 0;
            v151 = v146 - v148;
            *((_QWORD *)v138 + 2) = v150;
            v152 = bswap32(*((_DWORD *)v138 + 8));
            *((_DWORD *)v138 + 8) = v152;
            if (v151 >= 8 * v152)
            {
              v153 = 8 * v152;
              v154 = v149 + v148;
              if (8 * v152)
                v155 = v149 + v148;
              else
                v155 = 0;
              *(_QWORD *)(v138 + 36) = v155;
              if (v143 >= 8)
              {
                v156 = 0;
                v157 = 0;
                v158 = 0;
                v159 = v138 + 56;
                v160 = v151 - v153;
                v161 = v154 + v153;
                while (1)
                {
                  v162 = bswap32(*((_DWORD *)v159 + 1));
                  v163 = bswap32(*(_DWORD *)v159);
                  if (v163 - 1 <= 2)
                  {
                    if (v162 - 8 < 0x64)
                      goto LABEL_296;
                    *((_QWORD *)v159 + 1) = 0;
                    v164 = bswap32(*((_DWORD *)v159 + 4));
                    *((_DWORD *)v159 + 4) = v164;
                    if (v160 < 8 * v164)
                      goto LABEL_296;
                    v165 = 8 * v164;
                    v166 = 8 * v164 ? v161 : 0;
                    v167 = v160 - v165;
                    *(_QWORD *)(v159 + 20) = v166;
                    *((_WORD *)v159 + 14) = bswap32(*((unsigned __int16 *)v159 + 14)) >> 16;
                    v168 = bswap32(*((_DWORD *)v159 + 8));
                    *((_DWORD *)v159 + 8) = v168;
                    if (v167 < 8 * v168)
                      goto LABEL_296;
                    v169 = 8 * v168;
                    v170 = v161 + v165;
                    v171 = 8 * v168 ? v170 : 0;
                    v172 = v167 - v169;
                    *(_QWORD *)(v159 + 36) = v171;
                    v173 = bswap32(*((_DWORD *)v159 + 11));
                    *((_DWORD *)v159 + 11) = v173;
                    if (v172 < 8 * v173)
                      goto LABEL_296;
                    v174 = 8 * v173;
                    v175 = v170 + v169;
                    v176 = 8 * v173 ? v175 : 0;
                    *((_QWORD *)v159 + 6) = v176;
                    *((_QWORD *)v159 + 7) = 0;
                    *((int8x16_t *)v159 + 4) = vrev32q_s8(*((int8x16_t *)v159 + 4));
                    *((int8x8_t *)v159 + 10) = vrev32_s8(*(int8x8_t *)(v159 + 80));
                    v177 = v162 - 108;
                    if (v162 - 108 != bswap32(*((_DWORD *)v159 + 26)))
                      goto LABEL_296;
                    v178 = v159 + 8;
                    if (v177 < 8)
                    {
                      v181 = 0;
                      v180 = 0;
                      v179 = 0;
                    }
                    else
                    {
                      v179 = 0;
                      v180 = 0;
                      v181 = 0;
                      v182 = (unsigned int *)(v159 + 108);
                      do
                      {
                        v183 = v182[1];
                        switch(bswap32(*v182))
                        {
                          case 0xAu:
                            *v178 = v182 + 2;
                            break;
                          case 0xBu:
                            v184 = *(_QWORD *)(v159 + 20);
                            if (!v184)
                              goto LABEL_296;
                            *(_QWORD *)(v184 + 8 * v181++) = v182 + 2;
                            break;
                          case 0xCu:
                            v185 = *(_QWORD *)(v159 + 36);
                            if (!v185)
                              goto LABEL_296;
                            *(_QWORD *)(v185 + 8 * v180++) = v182 + 2;
                            break;
                          case 0xDu:
                            v186 = *((_QWORD *)v159 + 6);
                            if (!v186)
                              goto LABEL_296;
                            *(_QWORD *)(v186 + 8 * v179++) = v182 + 2;
                            break;
                          case 0xEu:
                            *((_QWORD *)v159 + 7) = v182 + 2;
                            break;
                          case 0xFu:
                            *((_QWORD *)v159 + 11) = v182 + 2;
                            break;
                          case 0x10u:
                            *((_QWORD *)v159 + 12) = v182 + 2;
                            break;
                          default:
                            break;
                        }
                        v187 = bswap32(v183);
                        v182 = (unsigned int *)((char *)v182 + v187);
                        v177 -= v187;
                      }
                      while (v177 > 7);
                    }
                    if (v181 != v164 || v180 != v168 || v179 != v173)
                      goto LABEL_296;
                    v161 = v175 + v174;
                    v160 = v172 - v174;
                    switch(v163)
                    {
                      case 3u:
                        v188 = *(_QWORD *)(v139 + 36);
                        if (!v188)
                          goto LABEL_296;
                        v189 = v156++;
                        goto LABEL_279;
                      case 2u:
                        v188 = *((_QWORD *)v139 + 2);
                        if (!v188)
                          goto LABEL_296;
                        v189 = v157++;
                        goto LABEL_279;
                      case 1u:
                        v188 = *(_QWORD *)(v139 + 4);
                        if (!v188)
                          goto LABEL_296;
                        v189 = v158++;
LABEL_279:
                        *(_QWORD *)(v188 + 8 * v189) = v178;
                        break;
                    }
                  }
                  v159 += v162;
                  v143 -= v162;
                  if (v143 <= 7)
                  {
                    v142 = *(_DWORD *)v139;
                    goto LABEL_292;
                  }
                }
              }
              v158 = 0;
              v157 = 0;
              v156 = 0;
LABEL_292:
              if (v158 == v142 && v157 == *((_DWORD *)v139 + 3) && v156 == *((_DWORD *)v139 + 8))
                sub_1000284B0((int *)v139);
            }
          }
        }
LABEL_296:
        free(v139);
      }
    }
    else
    {
      v191 = sub_100007594();
      v192 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v191, v192))
      {
        v193 = _os_log_pack_size(2);
        v196 = (char *)&v206 - ((__chkstk_darwin(v193, v194, v195) + 15) & 0xFFFFFFFFFFFFFFF0);
        v197 = __error();
        *(_WORD *)_os_log_pack_fill(v196, v193, *v197, &_mh_execute_header, "*** No DNS configuration") = 0;
        __SC_log_send(6, v191, v192, v196);
      }
    }
    if ((sub_10002C4B4((CFDataRef *)&v224) & 1) != 0
      || (v198 = sub_100007594(), v199 = _SC_syslog_os_log_mapping(3),
                                  !__SC_log_enabled(3, v198, v199)))
    {
      v190 = 1;
    }
    else
    {
      v200 = _os_log_pack_size(2);
      v203 = (char *)&v206 - ((__chkstk_darwin(v200, v201, v202) + 15) & 0xFFFFFFFFFFFFFFF0);
      v204 = __error();
      *(_WORD *)_os_log_pack_fill(v203, v200, *v204, &_mh_execute_header, "could not store configuration") = 0;
      __SC_log_send(3, v198, v199, v203);
      v190 = 1;
    }
  }
  if (v224)
    sub_10002B0D4((void **)&v224);
  CFRelease(v63);
  return v190;
}

void sub_1000272C8(const __CFArray *a1, const __CFDictionary *a2, const __CFArray *a3, const void *a4, const __CFDictionary *a5)
{
  CFTypeID TypeID;
  CFIndex Count;
  uint64_t v12;
  const void **v13;
  const void **v14;
  CFTypeID v15;
  uint64_t v16;
  const char *v17;
  const void *v18;
  const __CFString *v19;
  CFTypeID v20;
  const void *v21;
  CFTypeID v22;
  unint64_t v23;
  int v24;
  int v25;
  CFRange v26;
  int v27;
  int v28;
  const __CFDictionary *v29;
  int v30;
  __CFDictionary *v31;
  __CFDictionary *v32;
  void *v33;
  CFTypeID v34;
  const __CFArray *v35;
  CFTypeID v36;
  CFTypeID v37;
  const __CFArray *v38;
  CFTypeID v39;
  CFIndex v40;
  CFIndex v41;
  const __CFString *ValueAtIndex;
  CFTypeID v43;
  __CFDictionary *MutableCopy;
  const void *v45;
  CFTypeID v46;
  CFNumberRef v47;
  const __CFArray *cf;
  uint64_t v49;
  int theDict;
  const __CFDictionary *theDicta;
  int v52;
  CFIndex v53;
  const __CFDictionary *v54;
  const __CFArray *v55;
  const __CFArray *v56;
  uint64_t range;
  unint64_t v58;
  void *value;
  _OWORD v60[16];
  _BYTE v61[264];

  TypeID = CFDictionaryGetTypeID();
  if (a2)
  {
    if (CFGetTypeID(a2) == TypeID)
    {
      Count = CFDictionaryGetCount(a2);
      if (Count)
      {
        v12 = Count;
        v55 = a1;
        v58 = (unint64_t)a4;
        if (Count < 33)
        {
          v13 = (const void **)v61;
          v14 = (const void **)v60;
        }
        else
        {
          v13 = (const void **)CFAllocatorAllocate(0, 8 * Count, 0);
          v14 = (const void **)CFAllocatorAllocate(0, 8 * v12, 0);
        }
        v15 = CFArrayGetTypeID();
        v54 = a5;
        if (a3 && CFGetTypeID(a3) == v15)
          range = CFArrayGetCount(a3);
        else
          range = 0;
        memset(v61, 0, 256);
        memset(v60, 0, sizeof(v60));
        CFDictionaryGetKeysAndValues(a2, v13, v14);
        if (v12 >= 1)
        {
          v16 = 0;
          if (a4)
            v17 = "Supplemental/Scoped";
          else
            v17 = "Supplemental";
          v49 = (uint64_t)v17;
          v56 = a3;
          while (1)
          {
            v18 = v14[v16];
            v19 = (const __CFString *)v13[v16];
            v20 = CFDictionaryGetTypeID();
            if (!v18)
              goto LABEL_74;
            if (CFGetTypeID(v18) != v20)
              goto LABEL_74;
            v21 = CFDictionaryGetValue((CFDictionaryRef)v18, kSCEntNetDNS);
            v22 = CFDictionaryGetTypeID();
            if (!v21 || CFGetTypeID(v21) != v22)
              goto LABEL_74;
            v23 = (unint64_t)CFDictionaryGetValue((CFDictionaryRef)v21, kSCPropInterfaceName);
            if (a4)
            {
              if (CFDictionaryContainsKey((CFDictionaryRef)v18, kSCEntNetIPv4)
                || CFDictionaryContainsKey((CFDictionaryRef)v18, kSCEntNetIPv6)
                || (__CFString *)v23 != CFSTR("*")
                && (!v23
                 || !CFEqual((CFTypeRef)v23, CFSTR("*")) && (const void *)v23 != a4 && !CFEqual((CFTypeRef)v23, a4)))
              {
                goto LABEL_74;
              }
              v24 = sub_100028D74(v54, 0);
              if (!v24)
                goto LABEL_74;
            }
            else
            {
              v24 = 0;
            }
            v52 = v24;
            v25 = 200 * v16 + 100000;
            v26.length = range;
            if (range >= 1)
            {
              v26.location = 0;
              v27 = CFArrayContainsValue(a3, v26, v13[v16]);
              v28 = 200 * v12;
              if (v27)
                v28 = 0;
              v25 += v28;
            }
            if (v58 | v23)
              break;
            v29 = (const __CFDictionary *)CFRetain(v21);
            v30 = 0x4000;
LABEL_48:
            sub_1000280C8(v29, v30);
            LODWORD(value) = v25;
            v35 = (const __CFArray *)CFDictionaryGetValue(v29, kSCPropNetDNSSupplementalMatchDomains);
            v36 = CFArrayGetTypeID();
            a4 = (const void *)v58;
            if (v35)
            {
              if (CFGetTypeID(v35) == v36)
              {
                v53 = CFArrayGetCount(v35);
                if (v53)
                {
                  cf = (const __CFArray *)CFDictionaryGetValue(v29, kSCPropNetDNSSupplementalMatchOrders);
                  if (!cf || (v37 = CFArrayGetTypeID(), CFGetTypeID(cf) == v37) && v53 == CFArrayGetCount(cf))
                  {
                    v38 = (const __CFArray *)CFDictionaryGetValue(v29, kSCPropNetDNSServerAddresses);
                    v39 = CFArrayGetTypeID();
                    if (v38)
                    {
                      if (CFGetTypeID(v38) == v39)
                      {
                        v40 = CFArrayGetCount(v38);
                        if (v53 >= 1)
                        {
                          if (v40)
                          {
                            v41 = 0;
                            theDicta = v29;
                            while (2)
                            {
                              ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v35, v41);
                              v43 = CFStringGetTypeID();
                              if (!ValueAtIndex || CFGetTypeID(ValueAtIndex) != v43)
                                goto LABEL_72;
                              MutableCopy = CFDictionaryCreateMutableCopy(0, 0, theDicta);
                              if (CFStringGetLength(ValueAtIndex) < 1)
                                CFDictionaryRemoveValue(MutableCopy, kSCPropNetDNSDomainName);
                              else
                                CFDictionarySetValue(MutableCopy, kSCPropNetDNSDomainName, ValueAtIndex);
                              if (cf)
                              {
                                v45 = CFArrayGetValueAtIndex(cf, v41);
                                v46 = CFNumberGetTypeID();
                                if (v45 && CFGetTypeID(v45) == v46)
                                {
                                  CFDictionarySetValue(MutableCopy, kSCPropNetDNSSearchOrder, v45);
                                  goto LABEL_71;
                                }
                              }
                              else
                              {
                                CFNumberGetTypeID();
                              }
                              if (!CFDictionaryContainsKey(MutableCopy, kSCPropNetDNSSearchOrder))
                              {
                                v47 = CFNumberCreate(0, kCFNumberIntType, &value);
                                CFDictionarySetValue(MutableCopy, kSCPropNetDNSSearchOrder, v47);
                                CFRelease(v47);
                                LODWORD(value) = (_DWORD)value + 1;
                              }
LABEL_71:
                              CFDictionaryRemoveValue(MutableCopy, kSCPropNetDNSSupplementalMatchDomains);
                              CFDictionaryRemoveValue(MutableCopy, kSCPropNetDNSSupplementalMatchOrders);
                              CFDictionaryRemoveValue(MutableCopy, kSCPropNetDNSSearchDomains);
                              CFDictionaryRemoveValue(MutableCopy, kSCPropNetDNSSortList);
                              sub_100028EDC(MutableCopy, v49, v19, v41);
                              sub_100028F88(v55, MutableCopy);
                              CFRelease(MutableCopy);
LABEL_72:
                              ++v41;
                              v29 = theDicta;
                              if (v53 == v41)
                                break;
                              continue;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            CFRelease(v29);
            a3 = v56;
LABEL_74:
            if (++v16 == v12)
              goto LABEL_75;
          }
          theDict = v25;
          value = 0;
          v31 = CFDictionaryCreateMutableCopy(0, 0, (CFDictionaryRef)v21);
          v32 = v31;
          if (v58)
          {
            CFDictionarySetValue(v31, kSCPropInterfaceName, (const void *)v58);
            v30 = v52 | 0x5000;
          }
          else
          {
            if (!v23
              || !CFDictionaryGetValueIfPresent((CFDictionaryRef)v21, CFSTR("__SCOPED_QUERY__"), (const void **)&value)
              || (v33 = value, v34 = CFBooleanGetTypeID(), !v33)
              || CFGetTypeID(v33) != v34
              || !CFBooleanGetValue((CFBooleanRef)value))
            {
              v29 = v32;
              CFDictionaryRemoveValue(v32, kSCPropInterfaceName);
              v30 = 0x4000;
              goto LABEL_47;
            }
            v30 = sub_100028D74((CFDictionaryRef)v18, 0) | 0x4000;
          }
          v29 = v32;
LABEL_47:
          v25 = theDict;
          goto LABEL_48;
        }
LABEL_75:
        if (v13 != (const void **)v61)
        {
          CFAllocatorDeallocate(0, v13);
          CFAllocatorDeallocate(0, v14);
        }
      }
    }
  }
}

void sub_1000279A8(const __CFArray *a1, const __CFDictionary *a2)
{
  CFTypeID TypeID;
  CFIndex Count;
  uint64_t v6;
  const __CFString **v7;
  CFDictionaryRef *v8;
  const __CFString **v9;
  CFDictionaryRef *v10;
  const __CFString *v11;
  const __CFDictionary *Value;
  CFTypeID v13;
  const void *v14;
  CFTypeID v15;
  __CFSet *v16;
  os_log_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int *v23;
  const __CFDictionary *MutableCopy;
  __CFArray *v25;
  __CFArray *v26;
  const __CFDictionary *v27;
  CFBooleanRef v28;
  CFStringRef v29;
  CFStringRef v30;
  CFStringRef v31;
  CFStringRef v32;
  const __CFArray *v33;
  CFDictionaryRef *v34;
  const __CFString **v35;
  CFSetRef Mutable;
  const void *v37;
  _BYTE v38[256];
  _BYTE v39[256];

  TypeID = CFDictionaryGetTypeID();
  if (a2)
  {
    if (CFGetTypeID(a2) == TypeID)
    {
      Count = CFDictionaryGetCount(a2);
      if (Count)
      {
        v6 = Count;
        if (Count < 33)
        {
          v7 = (const __CFString **)v39;
          v8 = (CFDictionaryRef *)v38;
        }
        else
        {
          v7 = (const __CFString **)CFAllocatorAllocate(kCFAllocatorDefault, 8 * Count, 0);
          v8 = (CFDictionaryRef *)CFAllocatorAllocate(kCFAllocatorDefault, 8 * v6, 0);
        }
        memset(v39, 0, sizeof(v39));
        memset(v38, 0, sizeof(v38));
        v34 = v8;
        v35 = v7;
        CFDictionaryGetKeysAndValues(a2, (const void **)v7, (const void **)v8);
        Mutable = CFSetCreateMutable(0, 0, &kCFTypeSetCallBacks);
        if (v6 >= 1)
        {
          v37 = (const void *)kSCPropNetDNSServiceIdentifier;
          v29 = kSCPropNetDNSSearchDomains;
          v31 = kSCPropNetDNSSupplementalMatchOrders;
          v32 = kSCPropNetDNSSupplementalMatchDomains;
          v30 = kSCPropInterfaceName;
          v28 = kCFBooleanTrue;
          v10 = v34;
          v9 = v35;
          v33 = a1;
          do
          {
            v11 = *v9;
            Value = (const __CFDictionary *)CFDictionaryGetValue(*v10, kSCEntNetDNS);
            v13 = CFDictionaryGetTypeID();
            if (Value)
            {
              if (CFGetTypeID(Value) == v13)
              {
                v14 = CFDictionaryGetValue(Value, v37);
                v15 = CFNumberGetTypeID();
                if (v14)
                {
                  if (CFGetTypeID(v14) == v15)
                  {
                    v16 = Mutable;
                    if (CFSetContainsValue(Mutable, v14))
                    {
                      v17 = sub_100007594();
                      v18 = _SC_syslog_os_log_mapping(3);
                      if (__SC_log_enabled(3, v17, v18))
                      {
                        v19 = _os_log_pack_size(2);
                        v22 = (char *)&v28 - ((__chkstk_darwin(v19, v20, v21) + 15) & 0xFFFFFFFFFFFFFFF0);
                        v23 = __error();
                        *(_WORD *)_os_log_pack_fill(v22, v19, *v23, &_mh_execute_header, "add_service_specific_resolvers: got a resolver with a duplicate service identifier, skipping") = 0;
                        __SC_log_send(3, v17, v18, v22);
                        a1 = v33;
                      }
                    }
                    else
                    {
                      CFSetSetValue(v16, v14);
                      MutableCopy = CFDictionaryCreateMutableCopy(0, 0, Value);
                      v25 = sub_1000292A8(MutableCopy, 0);
                      if (v25)
                      {
                        v26 = v25;
                        CFDictionarySetValue(MutableCopy, v29, v25);
                        CFRelease(v26);
                      }
                      CFDictionaryRemoveValue(MutableCopy, v32);
                      CFDictionaryRemoveValue(MutableCopy, v31);
                      if (CFDictionaryContainsKey(MutableCopy, v30))
                      {
                        CFDictionarySetValue(MutableCopy, CFSTR("__SCOPED_QUERY__"), v28);
                        v27 = CFDictionaryCreateMutableCopy(0, 0, MutableCopy);
                        sub_1000280C8(v27, 4102);
                        CFDictionaryRemoveValue(v27, v37);
                        sub_100028EDC(v27, (uint64_t)"Service", v11, 0);
                        sub_100028F88(a1, v27);
                        CFRelease(v27);
                      }
                      sub_1000280C8(MutableCopy, 8198);
                      sub_100028EDC(MutableCopy, (uint64_t)"Service", v11, 0);
                      sub_100028F88(a1, MutableCopy);
                      CFRelease(MutableCopy);
                    }
                  }
                }
              }
            }
            ++v9;
            ++v10;
            --v6;
          }
          while (v6);
        }
        CFRelease(Mutable);
        if (v35 != (const __CFString **)v39)
        {
          CFAllocatorDeallocate(kCFAllocatorDefault, v35);
          CFAllocatorDeallocate(kCFAllocatorDefault, v34);
        }
      }
    }
  }
}

uint64_t sub_100027DEC(const __CFDictionary *a1, const __CFDictionary *a2)
{
  const __CFString *v4;
  const __CFString *v5;
  const __CFString *v6;
  int v7;
  uint64_t v8;
  int v9;
  int HasSuffix;
  const __CFArray *ArrayBySeparatingStrings;
  CFIndex Count;
  const __CFArray *v13;
  CFIndex v14;
  CFIndex v15;
  const __CFString *ValueAtIndex;
  const __CFString *v17;
  void *value;
  int valuePtr;

  v4 = (const __CFString *)CFDictionaryGetValue(a1, kSCPropNetDNSDomainName);
  v5 = (const __CFString *)CFDictionaryGetValue(a2, kSCPropNetDNSDomainName);
  if (!v4)
    return -1;
  v6 = v5;
  if (!v5)
    return 1;
  if (a1
    && (valuePtr = 0, value = 0, CFDictionaryGetValueIfPresent(a1, CFSTR("__FLAGS__"), (const void **)&value))
    && value
    && CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr)
    && (valuePtr & 0x1000) != 0)
  {
    v8 = 1;
    v7 = 1;
    if (!a2)
      goto LABEL_17;
  }
  else
  {
    v7 = 0;
    v8 = -1;
    if (!a2)
      goto LABEL_17;
  }
  valuePtr = 0;
  value = 0;
  if (CFDictionaryGetValueIfPresent(a2, CFSTR("__FLAGS__"), (const void **)&value)
    && value
    && CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr)
    && (valuePtr & 0x1000) != 0)
  {
    v9 = 1;
    goto LABEL_18;
  }
LABEL_17:
  v9 = 0;
LABEL_18:
  if (v7 == v9)
  {
    HasSuffix = CFStringHasSuffix(v4, CFSTR(".arpa"));
    if (HasSuffix == CFStringHasSuffix(v6, CFSTR(".arpa")))
    {
      ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, v4, CFSTR("."));
      Count = CFArrayGetCount(ArrayBySeparatingStrings);
      v13 = CFStringCreateArrayBySeparatingStrings(0, v6, CFSTR("."));
      v14 = CFArrayGetCount(v13);
      while (Count >= 1)
      {
        v15 = v14 - 1;
        if (v14 < 1)
          break;
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, Count - 1);
        v17 = (const __CFString *)CFArrayGetValueAtIndex(v13, v15);
        v8 = CFStringCompare(ValueAtIndex, v17, 1uLL);
        --Count;
        v14 = v15;
        if (v8)
          goto LABEL_33;
      }
      if (Count <= v14)
      {
        if (Count < v14)
          v8 = 1;
        else
          v8 = sub_100029740(a1, a2);
      }
      else
      {
        v8 = -1;
      }
LABEL_33:
      if (ArrayBySeparatingStrings)
        CFRelease(ArrayBySeparatingStrings);
      if (v13)
        CFRelease(v13);
    }
    else if (HasSuffix)
    {
      return 1;
    }
    else
    {
      return -1;
    }
  }
  return v8;
}

uint64_t sub_100028058(uint64_t a1, const __CFDictionary *a2, _DWORD *a3)
{
  uint64_t result;

  result = sub_1000330E8(a2);
  if (!(_DWORD)result)
  {
    result = sub_100028D74(a2, *a3);
    *a3 = result;
  }
  return result;
}

void sub_1000280C8(const __CFDictionary *a1, int a2)
{
  void *v4;
  CFTypeID TypeID;
  int v6;
  int v7;
  void *value;
  int valuePtr;

  valuePtr = 0;
  value = 0;
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("__FLAGS__"), (const void **)&value)
    && (v4 = value, TypeID = CFNumberGetTypeID(), v4)
    && CFGetTypeID(v4) == TypeID)
  {
    v6 = CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr);
    v7 = valuePtr;
    if (!v6)
      v7 = 0;
  }
  else
  {
    v7 = 0;
  }
  valuePtr = v7 | a2;
  value = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFDictionarySetValue(a1, CFSTR("__FLAGS__"), value);
  CFRelease(value);
}

char *sub_1000281BC(unsigned int *a1, size_t a2)
{
  uint64_t v3;
  size_t v5;
  size_t v6;
  os_log_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  os_log_t v15;
  os_log_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  char *v22;
  size_t v24;
  os_log_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  int *v31;
  uint64_t v32;
  size_t v33;
  size_t v34;

  v3 = bswap32(a1[12]) + 56;
  if (v3 == a2)
  {
    v5 = bswap32(a1[13]);
    v6 = 0x100000 - a2;
    if (0x100000 - a2 >= v5)
    {
      v24 = v5 + a2;
      if (v5 + a2 <= 0x100000)
      {
        v22 = (char *)malloc_type_malloc(v5 + a2, 0x158E9C56uLL);
        memcpy(v22, a1, a2);
        bzero(&v22[a2], v5);
        return v22;
      }
      v25 = sub_100007594();
      v26 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v25, v26))
      {
        v27 = _os_log_pack_size(18);
        v30 = (char *)&v33 - ((__chkstk_darwin(v27, v28, v29) + 15) & 0xFFFFFFFFFFFFFFF0);
        v31 = __error();
        v32 = _os_log_pack_fill(v30, v27, *v31, &_mh_execute_header, "DNS configuration: length error (%zu > %d)", v33, v34);
        *(_DWORD *)v32 = 134218240;
        *(_QWORD *)(v32 + 4) = v24;
        *(_WORD *)(v32 + 12) = 1024;
        *(_DWORD *)(v32 + 14) = 0x100000;
        __SC_log_send(3, v25, v26, v30);
      }
    }
    else
    {
      v7 = sub_100007594();
      v8 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v7, v8))
      {
        v9 = _os_log_pack_size(18);
        v12 = (char *)&v33 - ((__chkstk_darwin(v9, v10, v11) + 15) & 0xFFFFFFFFFFFFFFF0);
        v13 = __error();
        v14 = _os_log_pack_fill(v12, v9, *v13, &_mh_execute_header, "DNS configuration: padding error (%u > %zu)", v33, v34);
        *(_DWORD *)v14 = 67109376;
        *(_DWORD *)(v14 + 4) = v5;
        *(_WORD *)(v14 + 8) = 2048;
        *(_QWORD *)(v14 + 10) = v6;
        v15 = v7;
LABEL_7:
        __SC_log_send(3, v15, v8, v12);
      }
    }
  }
  else
  {
    v16 = sub_100007594();
    v8 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v16, v8))
    {
      v17 = _os_log_pack_size(22);
      v12 = (char *)&v33 - ((__chkstk_darwin(v17, v18, v19) + 15) & 0xFFFFFFFFFFFFFFF0);
      v20 = __error();
      v21 = _os_log_pack_fill(v12, v17, *v20, &_mh_execute_header, "DNS configuration: size error (%zu != %zu)", v33, v34);
      *(_DWORD *)v21 = 134218240;
      *(_QWORD *)(v21 + 4) = v3;
      *(_WORD *)(v21 + 12) = 2048;
      *(_QWORD *)(v21 + 14) = a2;
      v15 = v16;
      goto LABEL_7;
    }
  }
  return 0;
}

uint64_t sub_1000284B0(int *a1)
{
  os_log_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  os_log_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  os_log_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  os_log_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  int *v37;
  uint64_t v38;
  os_log_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  const char *v49;

  v2 = sub_100007594();
  v3 = _SC_syslog_os_log_mapping(6);
  result = __SC_log_enabled(6, v2, v3);
  if ((_DWORD)result)
  {
    v5 = _os_log_pack_size(12);
    v8 = (char *)&v49 - ((__chkstk_darwin(v5, v6, v7) + 15) & 0xFFFFFFFFFFFFFFF0);
    v9 = __error();
    v10 = _os_log_pack_fill(v8, v5, *v9, &_mh_execute_header, "%s", v49);
    *(_DWORD *)v10 = 136315138;
    *(_QWORD *)(v10 + 4) = "DNS configuration";
    result = __SC_log_send(6, v2, v3, v8);
  }
  if (*a1 >= 1)
  {
    v11 = 0;
    do
    {
      v12 = *(uint64_t **)(*(_QWORD *)(a1 + 1) + 8 * v11++);
      result = sub_100029910(a1[11], v12, v11);
    }
    while (v11 < *a1);
  }
  if (a1[3] >= 1 && *((_QWORD *)a1 + 2))
  {
    v13 = sub_100007594();
    v14 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v13, v14))
    {
      v15 = _os_log_pack_size(12);
      v18 = (char *)&v49 - ((__chkstk_darwin(v15, v16, v17) + 15) & 0xFFFFFFFFFFFFFFF0);
      v19 = __error();
      v20 = _os_log_pack_fill(v18, v15, *v19, &_mh_execute_header, "%s", v49);
      *(_DWORD *)v20 = 136315138;
      *(_QWORD *)(v20 + 4) = "";
      __SC_log_send(6, v13, v14, v18);
    }
    v21 = sub_100007594();
    v22 = _SC_syslog_os_log_mapping(6);
    result = __SC_log_enabled(6, v21, v22);
    if ((_DWORD)result)
    {
      v23 = _os_log_pack_size(12);
      v26 = (char *)&v49 - ((__chkstk_darwin(v23, v24, v25) + 15) & 0xFFFFFFFFFFFFFFF0);
      v27 = __error();
      v28 = _os_log_pack_fill(v26, v23, *v27, &_mh_execute_header, "%s", v49);
      *(_DWORD *)v28 = 136315138;
      *(_QWORD *)(v28 + 4) = "DNS configuration (for scoped queries)";
      result = __SC_log_send(6, v21, v22, v26);
    }
    if (a1[3] >= 1)
    {
      v29 = 0;
      do
      {
        v30 = *(uint64_t **)(*((_QWORD *)a1 + 2) + 8 * v29++);
        result = sub_100029910(a1[11], v30, v29);
      }
      while (v29 < a1[3]);
    }
  }
  if (a1[8] >= 1 && *(_QWORD *)(a1 + 9))
  {
    v31 = sub_100007594();
    v32 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v31, v32))
    {
      v33 = _os_log_pack_size(12);
      v36 = (char *)&v49 - ((__chkstk_darwin(v33, v34, v35) + 15) & 0xFFFFFFFFFFFFFFF0);
      v37 = __error();
      v38 = _os_log_pack_fill(v36, v33, *v37, &_mh_execute_header, "%s", v49);
      *(_DWORD *)v38 = 136315138;
      *(_QWORD *)(v38 + 4) = "";
      __SC_log_send(6, v31, v32, v36);
    }
    v39 = sub_100007594();
    v40 = _SC_syslog_os_log_mapping(6);
    result = __SC_log_enabled(6, v39, v40);
    if ((_DWORD)result)
    {
      v41 = _os_log_pack_size(12);
      v44 = (char *)&v49 - ((__chkstk_darwin(v41, v42, v43) + 15) & 0xFFFFFFFFFFFFFFF0);
      v45 = __error();
      v46 = _os_log_pack_fill(v44, v41, *v45, &_mh_execute_header, "%s", v49);
      *(_DWORD *)v46 = 136315138;
      *(_QWORD *)(v46 + 4) = "DNS configuration (for service-specific queries)";
      result = __SC_log_send(6, v39, v40, v44);
    }
    if (a1[8] >= 1)
    {
      v47 = 0;
      do
      {
        v48 = *(uint64_t **)(*(_QWORD *)(a1 + 9) + 8 * v47++);
        result = sub_100029910(a1[11], v48, v47);
      }
      while (v47 < a1[8]);
    }
  }
  return result;
}

void sub_100028944(uint64_t a1, uint64_t a2)
{
  _QWORD v2[6];
  dispatch_queue_t v3;

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 0x40000000;
  v2[2] = sub_1000289E4;
  v2[3] = &unk_100076420;
  v2[4] = a1;
  v2[5] = a2;
  v3 = dispatch_queue_create("dns_configuration_monitor", 0);
  dispatch_async(v3, v2);
}

void sub_1000289E4(uint64_t a1)
{
  sub_100028A44(*(NSObject **)(a1 + 32), *(void **)(a1 + 40));
  dispatch_release(*(dispatch_object_t *)(a1 + 48));
}

uint64_t sub_100028A44(NSObject *a1, void *a2)
{
  const __CFArray *v4;
  __FSEventStream *v5;
  uint64_t result;
  char *v7;
  char *v8;
  os_log_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  FSEventStreamContext v17;
  char v18[1024];
  const void *v19[128];

  memset(&v17, 0, sizeof(v17));
  __strlcpy_chk(v19, "/Library/Preferences/SystemConfiguration/resolver", 1024, 1024);
  if (realpath_DARWIN_EXTSN((const char *)v19, v18))
    goto LABEL_2;
  v7 = strrchr((char *)v19, 47);
  if (v7)
  {
    v8 = v7;
    *v7 = 0;
    if (realpath_DARWIN_EXTSN((const char *)v19, v18))
    {
      __strlcat_chk(v18, "/", 1024, 1024);
      __strlcat_chk(v18, v8 + 1, 1024, 1024);
LABEL_2:
      v17.info = a2;
      v19[0] = CFStringCreateWithCString(0, v18, 0x8000100u);
      v4 = CFArrayCreate(0, v19, 1, &kCFTypeArrayCallBacks);
      CFRelease(v19[0]);
      v5 = FSEventStreamCreate(0, (FSEventStreamCallback)sub_10002A950, &v17, v4, 0xFFFFFFFFFFFFFFFFLL, 0.0, 0x15u);
      CFRelease(v4);
      FSEventStreamSetDispatchQueue(v5, a1);
      return FSEventStreamStart(v5);
    }
  }
  v9 = sub_100007594();
  v10 = _SC_syslog_os_log_mapping(3);
  result = __SC_log_enabled(3, v9, v10);
  if ((_DWORD)result)
  {
    v11 = _os_log_pack_size(12);
    v14 = (char *)&v17 - ((__chkstk_darwin(v11, v12, v13) + 15) & 0xFFFFFFFFFFFFFFF0);
    v15 = __error();
    v16 = _os_log_pack_fill(v14, v11, *v15, &_mh_execute_header, "Not monitoring \"%s\", could not resolve directory path", (const char *)v17.version);
    *(_DWORD *)v16 = 136315138;
    *(_QWORD *)(v16 + 4) = "/Library/Preferences/SystemConfiguration/resolver";
    return __SC_log_send(3, v9, v10, v14);
  }
  return result;
}

CFTypeID sub_100028C74(__CFBundle *a1)
{
  CFDictionaryRef InfoDictionary;
  CFTypeID result;
  CFTypeID v3;
  const void *Value;
  CFTypeID TypeID;
  uint64_t v6;
  const void *v7;
  CFTypeID v8;
  uint64_t v9;

  InfoDictionary = CFBundleGetInfoDictionary(a1);
  result = CFDictionaryGetTypeID();
  if (InfoDictionary)
  {
    v3 = result;
    result = CFGetTypeID(InfoDictionary);
    if (result == v3)
    {
      Value = CFDictionaryGetValue(InfoDictionary, CFSTR("mdns_timeout"));
      qword_10007DBD8 = (uint64_t)Value;
      TypeID = CFNumberGetTypeID();
      if (Value)
      {
        if (CFGetTypeID(Value) == TypeID)
          v6 = (uint64_t)Value;
        else
          v6 = 0;
      }
      else
      {
        v6 = 0;
      }
      qword_10007DBD8 = v6;
      v7 = CFDictionaryGetValue(InfoDictionary, CFSTR("pdns_timeout"));
      qword_10007DBE0 = (uint64_t)v7;
      result = CFNumberGetTypeID();
      if (v7)
      {
        v8 = result;
        result = CFGetTypeID(v7);
        if (result == v8)
          v9 = (uint64_t)v7;
        else
          v9 = 0;
      }
      else
      {
        v9 = 0;
      }
      qword_10007DBE0 = v9;
    }
  }
  return result;
}

uint64_t sub_100028D74(CFDictionaryRef theDict, uint64_t a2)
{
  uint64_t v2;
  const __CFDictionary *Value;
  CFTypeID TypeID;
  const __CFBoolean *v6;
  CFTypeID v7;
  const __CFNumber *v8;
  CFTypeID v9;
  int valuePtr;

  v2 = a2;
  if ((a2 & 2) == 0)
  {
    if (sub_100033060(theDict, 2))
      v2 = v2 | 2;
    else
      v2 = v2;
  }
  if ((v2 & 4) == 0)
  {
    if (sub_100033060(theDict, 30))
      v2 = v2 | 4;
    else
      v2 = v2;
  }
  if ((~(_DWORD)v2 & 6) != 0)
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, kSCEntNetCommCenter);
    TypeID = CFDictionaryGetTypeID();
    if (Value)
    {
      if (CFGetTypeID(Value) == TypeID)
      {
        v6 = (const __CFBoolean *)CFDictionaryGetValue(Value, kSCPropNetCommCenterAvailable);
        v7 = CFBooleanGetTypeID();
        if (v6)
        {
          if (CFGetTypeID(v6) == v7)
          {
            if (CFBooleanGetValue(v6))
            {
              v8 = (const __CFNumber *)CFDictionaryGetValue(Value, CFSTR("AvailableProtocols"));
              v9 = CFNumberGetTypeID();
              if (v8)
              {
                if (CFGetTypeID(v8) == v9)
                {
                  valuePtr = 0;
                  CFNumberGetValue(v8, kCFNumberIntType, &valuePtr);
                  return (2 * (valuePtr & 3)) | v2;
                }
              }
            }
          }
        }
      }
    }
  }
  return v2;
}

void sub_100028EDC(__CFDictionary *a1, uint64_t a2, const __CFString *a3, uint64_t a4)
{
  const char *v5;
  const __CFString *v6;
  CFStringRef v7;

  if (a3)
    v5 = " ";
  else
    v5 = "";
  v6 = &stru_100077E20;
  if (a3)
    v6 = a3;
  v7 = CFStringCreateWithFormat(0, 0, CFSTR("%s:%s%@ %ld"), a2, v5, v6, a4);
  CFDictionarySetValue(a1, CFSTR("__CONFIGURATION_ID__"), v7);
  CFRelease(v7);
}

void sub_100028F88(const __CFArray *a1, CFDictionaryRef theDict)
{
  const void *v4;
  CFTypeID TypeID;
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  const void *ValueAtIndex;
  __CFDictionary *MutableCopy;
  int v11;
  CFNumberRef v12;
  const void *v13;
  const void *v14;
  const void *v15;
  CFTypeID v16;
  void *v17;
  CFTypeID v18;
  CFBooleanRef v19;
  CFTypeID v20;
  CFBooleanRef BOOLean;
  void *value;
  int v23;
  int v24;
  unsigned int valuePtr;
  CFIndex v26;
  _DWORD v27[4];

  valuePtr = 0;
  v4 = CFDictionaryGetValue(theDict, kSCPropNetDNSSearchOrder);
  TypeID = CFNumberGetTypeID();
  if (!v4 || CFGetTypeID(v4) != TypeID || !CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
  {
    v4 = 0;
    valuePtr = 0;
  }
  Count = CFArrayGetCount(a1);
  v26 = Count;
  if (Count < 1)
  {
LABEL_11:
    v12 = CFNumberCreate(0, kCFNumberCFIndexType, &v26);
    CFDictionarySetValue(theDict, CFSTR("__ORDER__"), v12);
    CFRelease(v12);
    v13 = CFDictionaryGetValue(theDict, kSCPropInterfaceName);
    if (v13)
    {
      v14 = v13;
      if (!CFEqual(v13, CFSTR("*")))
      {
        v24 = 0;
        BOOLean = 0;
        value = 0;
        if (_SC_cfstring_to_cstring(v14, v27, 16, 1536))
        {
          v23 = sub_10002D8E0((uint64_t)v27);
          if (v23)
          {
            if (CFDictionaryGetValueIfPresent(theDict, CFSTR("__FLAGS__"), (const void **)&value)
              && (v17 = value, v18 = CFNumberGetTypeID(), v17)
              && CFGetTypeID(v17) == v18
              && CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &v24)
              && (v24 & 0x1000) != 0
              || CFDictionaryGetValueIfPresent(theDict, CFSTR("__SCOPED_QUERY__"), (const void **)&BOOLean)
              && (v19 = BOOLean, v20 = CFBooleanGetTypeID(), v19)
              && CFGetTypeID(v19) == v20
              && CFBooleanGetValue(BOOLean))
            {
              value = CFNumberCreate(0, kCFNumberIntType, &v23);
              CFDictionarySetValue(theDict, CFSTR("__IF_INDEX__"), value);
              CFRelease(value);
            }
          }
        }
      }
    }
    CFArrayAppendValue(a1, theDict);
  }
  else
  {
    v7 = Count;
    v8 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, v8);
      if (CFEqual(theDict, ValueAtIndex))
        break;
      if (v4)
      {
        MutableCopy = CFDictionaryCreateMutableCopy(0, 0, (CFDictionaryRef)ValueAtIndex);
        CFDictionarySetValue(MutableCopy, kSCPropNetDNSSearchOrder, v4);
        v11 = CFEqual(theDict, MutableCopy);
        CFRelease(MutableCopy);
        if (v11)
        {
          v27[0] = 0;
          v15 = CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, kSCPropNetDNSSearchOrder);
          v16 = CFNumberGetTypeID();
          if (v15
            && CFGetTypeID(v15) == v16
            && CFNumberGetValue((CFNumberRef)v15, kCFNumberSInt32Type, v27)
            && valuePtr < v27[0])
          {
            CFArraySetValueAtIndex(a1, v8, theDict);
          }
          return;
        }
      }
      if (++v8 >= v7)
        goto LABEL_11;
    }
  }
}

__CFArray *sub_1000292A8(const __CFDictionary *a1, const __CFArray *MutableCopy)
{
  __CFArray *Mutable;
  const void *Value;
  CFTypeID TypeID;
  const void *v7;
  const __CFArray *v8;
  CFTypeID v9;
  CFIndex Count;
  CFIndex v11;
  CFIndex i;
  const void *ValueAtIndex;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  CFIndex v18;
  CFIndex v19;
  CFIndex v20;
  const void *v21;
  const __CFDictionary *v22;
  const __CFString *v23;
  CFTypeID v24;
  const void *v25;
  uint64_t v26;
  const __CFString *v27;
  const void *v28;
  CFTypeID v29;
  CFIndex FirstIndexOfValue;
  const void *v31;
  CFTypeID v32;
  unsigned int v33;
  CFIndex v34;
  CFIndex v35;
  const __CFArray *v37;
  const __CFDictionary *v38;
  CFIndex v39;
  int v40;
  int v41;
  unsigned int valuePtr;
  CFRange v43;
  CFRange v44;

  valuePtr = 200000;
  Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  if (a1)
  {
    Value = CFDictionaryGetValue(a1, kSCPropNetDNSSearchOrder);
    TypeID = CFNumberGetTypeID();
    if (!Value || CFGetTypeID(Value) != TypeID || !CFNumberGetValue((CFNumberRef)Value, kCFNumberSInt32Type, &valuePtr))
      valuePtr = 200000;
    v7 = CFDictionaryGetValue(a1, kSCPropNetDNSDomainName);
    v8 = (const __CFArray *)CFDictionaryGetValue(a1, kSCPropNetDNSSearchDomains);
    v9 = CFArrayGetTypeID();
    if (v8 && CFGetTypeID(v8) == v9)
    {
      Count = CFArrayGetCount(v8);
      if (Count >= 1)
      {
        v11 = Count;
        for (i = 0; i != v11; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v8, i);
          v14 = (const void *)_SC_trimDomain(ValueAtIndex);
          if (v14)
          {
            v15 = v14;
            CFArrayAppendValue(Mutable, v14);
            CFRelease(v15);
          }
        }
      }
      goto LABEL_17;
    }
  }
  else
  {
    CFArrayGetTypeID();
    v7 = 0;
  }
  v16 = (const void *)_SC_trimDomain(v7);
  if (v16)
  {
    v17 = v16;
    CFArrayAppendValue(Mutable, v16);
    CFRelease(v17);
  }
LABEL_17:
  if (!MutableCopy)
    goto LABEL_50;
  v18 = CFArrayGetCount(MutableCopy);
  v19 = v18;
  if (v18 < 2)
  {
    if (v18 != 1)
      goto LABEL_50;
    v37 = 0;
    v38 = a1;
  }
  else
  {
    v38 = a1;
    MutableCopy = CFArrayCreateMutableCopy(0, 0, MutableCopy);
    v43.location = 0;
    v43.length = v19;
    CFArraySortValues(MutableCopy, v43, (CFComparatorFunction)sub_100029740, 0);
    v37 = MutableCopy;
  }
  v20 = 0;
  v39 = 0;
  v21 = (const void *)kSCPropNetDNSSupplementalMatchDomainsNoSearch;
  do
  {
    v40 = 0;
    v41 = 0;
    v22 = (const __CFDictionary *)CFArrayGetValueAtIndex(MutableCopy, v20);
    v23 = (const __CFString *)CFDictionaryGetValue(v22, kSCPropNetDNSOptions);
    v24 = CFStringGetTypeID();
    if (!v23
      || CFGetTypeID(v23) != v24
      || !CFEqual(v23, CFSTR("pdns")) && CFStringFind(v23, CFSTR("interface="), 0).location == -1)
    {
      v25 = CFDictionaryGetValue(v22, kSCPropNetDNSDomainName);
      v26 = _SC_trimDomain(v25);
      if (v26)
      {
        v27 = (const __CFString *)v26;
        v28 = CFDictionaryGetValue(v22, v21);
        v29 = CFNumberGetTypeID();
        if ((!v28 || CFGetTypeID(v28) != v29 || !CFNumberGetValue((CFNumberRef)v28, kCFNumberIntType, &v41) || !v41)
          && !CFStringHasSuffix(v27, CFSTR(".in-addr.arpa"))
          && !CFStringHasSuffix(v27, CFSTR(".ip6.arpa")))
        {
          v44.length = CFArrayGetCount(Mutable);
          v44.location = 0;
          FirstIndexOfValue = CFArrayGetFirstIndexOfValue(Mutable, v44, v27);
          v31 = CFDictionaryGetValue(v22, kSCPropNetDNSSearchOrder);
          v32 = CFNumberGetTypeID();
          if (v31 && CFGetTypeID(v31) == v32 && CFNumberGetValue((CFNumberRef)v31, kCFNumberSInt32Type, &v40))
          {
            v33 = v40;
          }
          else
          {
            v33 = 200000;
            v40 = 200000;
          }
          if (v33 >= valuePtr)
          {
            if (FirstIndexOfValue == -1)
              CFArrayAppendValue(Mutable, v27);
          }
          else
          {
            if (FirstIndexOfValue == -1)
            {
              v34 = v39;
            }
            else
            {
              CFArrayRemoveValueAtIndex(Mutable, FirstIndexOfValue);
              v34 = v39 - (FirstIndexOfValue < v39);
            }
            v35 = v34;
            CFArrayInsertValueAtIndex(Mutable, v34, v27);
            v39 = v35 + 1;
          }
        }
        CFRelease(v27);
      }
    }
    ++v20;
  }
  while (v19 != v20);
  a1 = v38;
  if (v37)
    CFRelease(v37);
LABEL_50:
  if (!CFArrayGetCount(Mutable))
  {
    CFRelease(Mutable);
    Mutable = 0;
  }
  CFDictionaryRemoveValue(a1, kSCPropNetDNSDomainName);
  CFDictionaryRemoveValue(a1, kSCPropNetDNSSearchDomains);
  return Mutable;
}

uint64_t sub_100029740(const __CFDictionary *a1, const __CFDictionary *a2)
{
  unsigned int v4;
  void *v5;
  CFTypeID TypeID;
  const __CFNumber *v7;
  CFTypeID v8;
  BOOL v9;
  void *v10;
  CFTypeID v11;
  CFNumberRef v12;
  CFTypeID v13;
  unsigned int v15;
  unsigned int valuePtr;
  CFNumberRef number;
  void *value;

  v4 = 200000;
  v15 = 200000;
  valuePtr = 200000;
  v5 = (void *)CFDictionaryGetValue(a1, kSCPropNetDNSSearchOrder);
  value = v5;
  TypeID = CFNumberGetTypeID();
  if (!v5 || CFGetTypeID(v5) != TypeID || !CFNumberGetValue((CFNumberRef)v5, kCFNumberSInt32Type, &valuePtr))
    valuePtr = 200000;
  v7 = (const __CFNumber *)CFDictionaryGetValue(a2, kSCPropNetDNSSearchOrder);
  number = v7;
  v8 = CFNumberGetTypeID();
  if (v7 && CFGetTypeID(v7) == v8 && CFNumberGetValue(v7, kCFNumberSInt32Type, &v15))
    v4 = v15;
  else
    v15 = 200000;
  v9 = valuePtr >= v4;
  if (valuePtr == v4)
  {
    if (!CFDictionaryGetValueIfPresent(a1, CFSTR("__ORDER__"), (const void **)&value))
      return 0;
    if (!CFDictionaryGetValueIfPresent(a2, CFSTR("__ORDER__"), (const void **)&number))
      return 0;
    v10 = value;
    v11 = CFNumberGetTypeID();
    if (!v10)
      return 0;
    if (CFGetTypeID(v10) != v11)
      return 0;
    v12 = number;
    v13 = CFNumberGetTypeID();
    if (!v12)
      return 0;
    if (CFGetTypeID(v12) != v13)
      return 0;
    if (!CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr))
      return 0;
    if (!CFNumberGetValue(number, kCFNumberSInt32Type, &v15))
      return 0;
    v9 = valuePtr >= v15;
    if (valuePtr == v15)
      return 0;
  }
  if (v9)
    return 1;
  return -1;
}

uint64_t sub_100029910(int a1, uint64_t *a2, int a3)
{
  os_log_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  os_log_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int *v20;
  _DWORD *v21;
  os_log_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  os_log_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  os_log_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  os_log_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  int *v57;
  uint64_t v58;
  os_log_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  int *v65;
  uint64_t v66;
  uint64_t v67;
  os_log_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  int *v74;
  _DWORD *v75;
  int v76;
  os_log_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  int *v83;
  _DWORD *v84;
  int v85;
  unsigned int v86;
  char *v87;
  os_log_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  int *v94;
  uint64_t v95;
  int v96;
  const char *v97;
  os_log_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  int *v104;
  _DWORD *v105;
  int v106;
  uint64_t v107;
  __CFString *Mutable;
  os_log_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  int *v115;
  uint64_t v116;
  unsigned int v117;
  int v118;
  unint64_t v119;
  unint64_t v120;
  unsigned int v121;
  os_log_t v122;
  uint64_t v123;
  uint64_t result;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  int *v129;
  uint64_t v130;
  os_log_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  int *v137;
  _DWORD *v138;
  int v139;
  os_log_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  int *v146;
  uint64_t v147;
  uint64_t v148;
  const char *v149;
  const char *v150;
  const char *v151;
  const char *v152;
  const char *v153;
  const char *v154;
  const char *v155;
  __int128 v156;
  char v157[32];
  char __str[128];

  HIDWORD(v155) = a1;
  v5 = sub_100007594();
  v6 = _SC_syslog_os_log_mapping(6);
  if (__SC_log_enabled(6, v5, v6))
  {
    v7 = _os_log_pack_size(12);
    v10 = (char *)&v154 - ((__chkstk_darwin(v7, v8, v9) + 15) & 0xFFFFFFFFFFFFFFF0);
    v11 = __error();
    v12 = _os_log_pack_fill(v10, v7, *v11, &_mh_execute_header, "%s", v154);
    *(_DWORD *)v12 = 136315138;
    *(_QWORD *)(v12 + 4) = "";
    __SC_log_send(6, v5, v6, v10);
  }
  v13 = sub_100007594();
  v14 = _SC_syslog_os_log_mapping(6);
  if (__SC_log_enabled(6, v13, v14))
  {
    v16 = _os_log_pack_size(8);
    v19 = (char *)&v154 - ((__chkstk_darwin(v16, v17, v18) + 15) & 0xFFFFFFFFFFFFFFF0);
    v20 = __error();
    v21 = (_DWORD *)_os_log_pack_fill(v19, v16, *v20, &_mh_execute_header, "resolver #%d", (_DWORD)v154);
    *v21 = 67109120;
    v21[1] = a3;
    __SC_log_send(6, v13, v14, v19);
  }
  if (*a2)
  {
    v22 = sub_100007594();
    v23 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v22, v23))
    {
      v24 = _os_log_pack_size(12);
      v27 = (char *)&v154 - ((__chkstk_darwin(v24, v25, v26) + 15) & 0xFFFFFFFFFFFFFFF0);
      v28 = __error();
      v29 = _os_log_pack_fill(v27, v24, *v28, &_mh_execute_header, "  domain   : %s", v154);
      v30 = *a2;
      *(_DWORD *)v29 = 136315138;
      *(_QWORD *)(v29 + 4) = v30;
      __SC_log_send(6, v22, v23, v27);
    }
  }
  if (*((int *)a2 + 6) >= 1)
  {
    v31 = 0;
    *(_QWORD *)&v15 = 67109378;
    v156 = v15;
    do
    {
      v32 = sub_100007594();
      v33 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v32, v33))
      {
        v34 = _os_log_pack_size(18);
        v37 = (char *)&v154 - ((__chkstk_darwin(v34, v35, v36) + 15) & 0xFFFFFFFFFFFFFFF0);
        v38 = __error();
        v39 = _os_log_pack_fill(v37, v34, *v38, &_mh_execute_header, "  search domain[%d] : %s", (_DWORD)v154, v155);
        v40 = *(_QWORD *)(*(uint64_t *)((char *)a2 + 28) + 8 * v31);
        *(_DWORD *)v39 = v156;
        *(_DWORD *)(v39 + 4) = v31;
        *(_WORD *)(v39 + 8) = 2080;
        *(_QWORD *)(v39 + 10) = v40;
        __SC_log_send(6, v32, v33, v37);
      }
      ++v31;
    }
    while (v31 < *((int *)a2 + 6));
  }
  if (*((int *)a2 + 2) >= 1)
  {
    v41 = 0;
    *(_QWORD *)&v15 = 67109378;
    v156 = v15;
    do
    {
      _SC_sockaddr_to_string(*(_QWORD *)(*(uint64_t *)((char *)a2 + 12) + 8 * v41), __str, 128);
      v42 = sub_100007594();
      v43 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v42, v43))
      {
        v44 = _os_log_pack_size(18);
        v47 = (char *)&v154 - ((__chkstk_darwin(v44, v45, v46) + 15) & 0xFFFFFFFFFFFFFFF0);
        v48 = __error();
        v49 = _os_log_pack_fill(v47, v44, *v48, &_mh_execute_header, "  nameserver[%d] : %s", (_DWORD)v154, v155);
        *(_DWORD *)v49 = v156;
        *(_DWORD *)(v49 + 4) = v41;
        *(_WORD *)(v49 + 8) = 2080;
        *(_QWORD *)(v49 + 10) = __str;
        __SC_log_send(6, v42, v43, v47);
      }
      ++v41;
    }
    while (v41 < *((int *)a2 + 2));
  }
  if (*((int *)a2 + 9) >= 1)
  {
    v50 = 0;
    *(_QWORD *)&v15 = 67109634;
    v156 = v15;
    do
    {
      inet_ntop(2, *(const void **)(a2[5] + 8 * v50), __str, 0x20u);
      inet_ntop(2, (const void *)(*(_QWORD *)(a2[5] + 8 * v50) + 4), v157, 0x20u);
      v51 = sub_100007594();
      v52 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v51, v52))
      {
        v53 = _os_log_pack_size(28);
        v56 = (char *)&v154 - ((__chkstk_darwin(v53, v54, v55) + 15) & 0xFFFFFFFFFFFFFFF0);
        v57 = __error();
        v58 = _os_log_pack_fill(v56, v53, *v57, &_mh_execute_header, "  sortaddr[%d] : %s/%s", (_DWORD)v154, v155, (const char *)v156);
        *(_DWORD *)v58 = v156;
        *(_DWORD *)(v58 + 4) = v50;
        *(_WORD *)(v58 + 8) = 2080;
        *(_QWORD *)(v58 + 10) = __str;
        *(_WORD *)(v58 + 18) = 2080;
        *(_QWORD *)(v58 + 20) = v157;
        __SC_log_send(6, v51, v52, v56);
      }
      ++v50;
    }
    while (v50 < *((int *)a2 + 9));
  }
  if (a2[6])
  {
    v59 = sub_100007594();
    v60 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v59, v60))
    {
      v61 = _os_log_pack_size(12);
      v64 = (char *)&v154 - ((__chkstk_darwin(v61, v62, v63) + 15) & 0xFFFFFFFFFFFFFFF0);
      v65 = __error();
      v66 = _os_log_pack_fill(v64, v61, *v65, &_mh_execute_header, "  options  : %s", v154);
      v67 = a2[6];
      *(_DWORD *)v66 = 136315138;
      *(_QWORD *)(v66 + 4) = v67;
      __SC_log_send(6, v59, v60, v64);
    }
  }
  if (*((_WORD *)a2 + 10))
  {
    v68 = sub_100007594();
    v69 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v68, v69))
    {
      v70 = _os_log_pack_size(8);
      v73 = (char *)&v154 - ((__chkstk_darwin(v70, v71, v72) + 15) & 0xFFFFFFFFFFFFFFF0);
      v74 = __error();
      v75 = (_DWORD *)_os_log_pack_fill(v73, v70, *v74, &_mh_execute_header, "  port     : %hu", (_DWORD)v154);
      v76 = *((unsigned __int16 *)a2 + 10);
      *v75 = 67109120;
      v75[1] = v76;
      __SC_log_send(6, v68, v69, v73);
    }
  }
  if (*((_DWORD *)a2 + 14))
  {
    v77 = sub_100007594();
    v78 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v77, v78))
    {
      v79 = _os_log_pack_size(8);
      v82 = (char *)&v154 - ((__chkstk_darwin(v79, v80, v81) + 15) & 0xFFFFFFFFFFFFFFF0);
      v83 = __error();
      v84 = (_DWORD *)_os_log_pack_fill(v82, v79, *v83, &_mh_execute_header, "  timeout  : %u", (_DWORD)v154);
      v85 = *((_DWORD *)a2 + 14);
      *v84 = 67109120;
      v84[1] = v85;
      __SC_log_send(6, v77, v78, v82);
    }
  }
  v86 = *((_DWORD *)a2 + 16);
  if (v86)
  {
    if (HIDWORD(v155) < 0x133C785 || (v87 = (char *)a2[11]) == 0)
      v87 = if_indextoname(v86, __str);
    v88 = sub_100007594();
    v89 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v88, v89))
    {
      v90 = _os_log_pack_size(18);
      v93 = (char *)&v154 - ((__chkstk_darwin(v90, v91, v92) + 15) & 0xFFFFFFFFFFFFFFF0);
      v94 = __error();
      v95 = _os_log_pack_fill(v93, v90, *v94, &_mh_execute_header, "  if_index : %u (%s)", (_DWORD)v154, v155);
      v96 = *((_DWORD *)a2 + 16);
      v97 = "?";
      if (v87)
        v97 = v87;
      *(_DWORD *)v95 = 67109378;
      *(_DWORD *)(v95 + 4) = v96;
      *(_WORD *)(v95 + 8) = 2080;
      *(_QWORD *)(v95 + 10) = v97;
      __SC_log_send(6, v88, v89, v93);
    }
  }
  if (*((_DWORD *)a2 + 19))
  {
    v98 = sub_100007594();
    v99 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v98, v99))
    {
      v100 = _os_log_pack_size(8);
      v103 = (char *)&v154 - ((__chkstk_darwin(v100, v101, v102) + 15) & 0xFFFFFFFFFFFFFFF0);
      v104 = __error();
      v105 = (_DWORD *)_os_log_pack_fill(v103, v100, *v104, &_mh_execute_header, "  service_identifier : %u", (_DWORD)v154);
      v106 = *((_DWORD *)a2 + 19);
      *v105 = 67109120;
      v105[1] = v106;
      __SC_log_send(6, v98, v99, v103);
    }
  }
  v107 = *((unsigned int *)a2 + 17);
  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppend(Mutable, CFSTR("  flags    : "));
  CFStringAppendFormat(Mutable, 0, CFSTR("0x%08x"), v107);
  if ((_DWORD)v107)
  {
    CFStringAppendFormat(Mutable, 0, CFSTR(" ("));
    if ((v107 & 0x1000) != 0)
    {
      v107 = v107 & 0xFFFFEFFF;
      v149 = "";
      if ((_DWORD)v107)
        v149 = ", ";
      CFStringAppendFormat(Mutable, 0, CFSTR("Scoped%s"), v149);
      if ((v107 & 0x2000) == 0)
      {
LABEL_46:
        if ((v107 & 0x4000) == 0)
          goto LABEL_47;
        goto LABEL_105;
      }
    }
    else if ((v107 & 0x2000) == 0)
    {
      goto LABEL_46;
    }
    v107 = v107 & 0xFFFFDFFF;
    v150 = "";
    if ((_DWORD)v107)
      v150 = ", ";
    CFStringAppendFormat(Mutable, 0, CFSTR("Service-specific%s"), v150);
    if ((v107 & 0x4000) == 0)
    {
LABEL_47:
      if ((v107 & 2) == 0)
        goto LABEL_48;
      goto LABEL_108;
    }
LABEL_105:
    v107 = v107 & 0xFFFFBFFF;
    v151 = "";
    if ((_DWORD)v107)
      v151 = ", ";
    CFStringAppendFormat(Mutable, 0, CFSTR("Supplemental%s"), v151);
    if ((v107 & 2) == 0)
    {
LABEL_48:
      if ((v107 & 4) == 0)
        goto LABEL_49;
      goto LABEL_111;
    }
LABEL_108:
    v107 = v107 & 0xFFFFFFFD;
    v152 = "";
    if ((_DWORD)v107)
      v152 = ", ";
    CFStringAppendFormat(Mutable, 0, CFSTR("Request A records%s"), v152);
    if ((v107 & 4) == 0)
    {
LABEL_49:
      if (!(_DWORD)v107)
      {
LABEL_51:
        CFStringAppend(Mutable, CFSTR(")"));
        goto LABEL_52;
      }
LABEL_50:
      CFStringAppendFormat(Mutable, 0, CFSTR("0x%08x"), v107);
      goto LABEL_51;
    }
LABEL_111:
    v107 = v107 & 0xFFFFFFFB;
    v153 = "";
    if ((_DWORD)v107)
      v153 = ", ";
    CFStringAppendFormat(Mutable, 0, CFSTR("Request AAAA records%s"), v153);
    if (!(_DWORD)v107)
      goto LABEL_51;
    goto LABEL_50;
  }
LABEL_52:
  v109 = sub_100007594();
  v110 = _SC_syslog_os_log_mapping(6);
  if (__SC_log_enabled(6, v109, v110))
  {
    v111 = _os_log_pack_size(12);
    v114 = (char *)&v154 - ((__chkstk_darwin(v111, v112, v113) + 15) & 0xFFFFFFFFFFFFFFF0);
    v115 = __error();
    v116 = _os_log_pack_fill(v114, v111, *v115, &_mh_execute_header, "%@");
    *(_DWORD *)v116 = 138412290;
    *(_QWORD *)(v116 + 4) = Mutable;
    __SC_log_send(6, v109, v110, v114);
  }
  CFRelease(Mutable);
  v117 = *((_DWORD *)a2 + 18);
  v118 = snprintf(__str, 0x64uLL, "0x%08x (", v117);
  if (v117 || v118 > 0x53)
  {
    v120 = v118;
    v119 = v118;
    v121 = v117;
    if ((v117 & 2) != 0)
    {
      v119 = v118;
      v121 = v117;
      if (v118 <= 0x57)
      {
        v119 = __strlcat_chk(__str, "Reachable,", 99, 100);
        v121 = v117 & 0xFFFFFFFD;
      }
    }
    if ((v121 & 1) != 0 && v119 <= 0x4C)
    {
      v119 = __strlcat_chk(__str, "Transient Connection,", 99, 100);
      v121 &= ~1u;
    }
    if ((v121 & 4) != 0 && v119 <= 0x4D)
    {
      v119 = __strlcat_chk(__str, "Connection Required,", 99, 100);
      v121 &= ~4u;
    }
    if ((v121 & 8) != 0 && v119 <= 0x41)
    {
      v119 = __strlcat_chk(__str, "Automatic Connection On Traffic,", 99, 100);
      v121 &= ~8u;
    }
    if ((v121 & 0x20) != 0 && v119 <= 0x42)
    {
      v119 = __strlcat_chk(__str, "Automatic Connection On Demand,", 99, 100);
      v121 &= ~0x20u;
    }
    if ((v121 & 0x10) != 0 && v119 < 0x4C)
    {
      v119 = __strlcat_chk(__str, "Intervention Required,", 99, 100);
      v121 &= ~0x10u;
    }
    if ((v121 & 0x10000) != 0 && v119 < 0x54)
    {
      v119 = __strlcat_chk(__str, "Local Address,", 99, 100);
      v121 &= ~0x10000u;
    }
    if ((v121 & 0x20000) != 0 && v119 <= 0x46)
    {
      v119 = __strlcat_chk(__str, "Directly Reachable Address,", 99, 100);
      v121 &= ~0x20000u;
    }
    if ((v121 & 0x40000) != 0 && v119 <= 0x5C)
    {
      v119 = __strlcat_chk(__str, "WWAN,", 99, 100);
      v121 &= ~0x40000u;
    }
    if (v121)
    {
      if (v119 >= 0x57)
      {
        __str[v120] = 0;
        v119 = v120;
        v121 = v117;
      }
      v119 += snprintf(&__str[v119], 99 - v119, "0x%08x,", v121);
    }
  }
  else
  {
    v119 = __strlcat_chk(__str, "Not Reachable,", 99, 100);
  }
  if (v119)
    __str[v119 - 1] = 41;
  v122 = sub_100007594();
  v123 = _SC_syslog_os_log_mapping(6);
  result = __SC_log_enabled(6, v122, v123);
  if ((_DWORD)result)
  {
    v125 = _os_log_pack_size(12);
    v128 = (char *)&v154 - ((__chkstk_darwin(v125, v126, v127) + 15) & 0xFFFFFFFFFFFFFFF0);
    v129 = __error();
    v130 = _os_log_pack_fill(v128, v125, *v129, &_mh_execute_header, "  reach    : %s", v154);
    *(_DWORD *)v130 = 136315138;
    *(_QWORD *)(v130 + 4) = __str;
    result = __SC_log_send(6, v122, v123, v128);
  }
  if (*((_DWORD *)a2 + 15))
  {
    v131 = sub_100007594();
    v132 = _SC_syslog_os_log_mapping(6);
    result = __SC_log_enabled(6, v131, v132);
    if ((_DWORD)result)
    {
      v133 = _os_log_pack_size(8);
      v136 = (char *)&v154 - ((__chkstk_darwin(v133, v134, v135) + 15) & 0xFFFFFFFFFFFFFFF0);
      v137 = __error();
      v138 = (_DWORD *)_os_log_pack_fill(v136, v133, *v137, &_mh_execute_header, "  order    : %u", (_DWORD)v154);
      v139 = *((_DWORD *)a2 + 15);
      *v138 = 67109120;
      v138[1] = v139;
      result = __SC_log_send(6, v131, v132, v136);
    }
  }
  if (a2[10])
  {
    v140 = sub_100007594();
    v141 = _SC_syslog_os_log_mapping(6);
    result = __SC_log_enabled(6, v140, v141);
    if ((_DWORD)result)
    {
      v142 = _os_log_pack_size(12);
      v145 = (char *)&v154 - ((__chkstk_darwin(v142, v143, v144) + 15) & 0xFFFFFFFFFFFFFFF0);
      v146 = __error();
      v147 = _os_log_pack_fill(v145, v142, *v146, &_mh_execute_header, "  config id: %s", v154);
      v148 = a2[10];
      *(_DWORD *)v147 = 136315138;
      *(_QWORD *)(v147 + 4) = v148;
      return __SC_log_send(6, v140, v141, v145);
    }
  }
  return result;
}

uint64_t sub_10002A950(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t result;
  os_log_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  stat v11;

  memset(&v11, 0, sizeof(v11));
  result = stat("/Library/Preferences/SystemConfiguration/resolver", &v11);
  if (byte_10007DBE8 || !(_DWORD)result)
  {
    byte_10007DBE8 = (_DWORD)result == 0;
    v4 = sub_100007594();
    v5 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v4, v5))
    {
      v6 = _os_log_pack_size(2);
      v9 = (char *)&v11 - ((__chkstk_darwin(v6, v7, v8) + 15) & 0xFFFFFFFFFFFFFFF0);
      v10 = __error();
      *(_WORD *)_os_log_pack_fill(v9, v6, *v10, &_mh_execute_header, "/Library/Preferences/SystemConfiguration/resolver changed") = 0;
      __SC_log_send(5, v4, v5, v9);
    }
    return a2();
  }
  return result;
}

_DWORD *sub_10002AA94()
{
  _DWORD *v0;

  v0 = malloc_type_calloc(1uLL, 0x2000uLL, 0x8E22472BuLL);
  v0[11] = 20170629;
  *((_QWORD *)v0 + 3) = mach_absolute_time();
  return v0;
}

void sub_10002AB10(void **a1, _DWORD *a2)
{
  char *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  unsigned int v13;

  v4 = (char *)*a1;
  sub_10002ABF4(a2);
  v5 = a2[2];
  v6 = a2[6];
  v7 = a2[9];
  v8 = a2[17];
  v9 = 32 * ((v8 & 0x200000u) >> 21);
  if ((v8 & 0x200000) != 0)
    v10 = 3;
  else
    v10 = 1;
  v11 = (v8 & 0x100000) == 0;
  v12 = 12;
  if (v11)
  {
    v12 = v9;
    v13 = v10;
  }
  else
  {
    v13 = 2;
  }
  *(_DWORD *)&v4[v12] = bswap32(bswap32(*(_DWORD *)&v4[v12]) + 1);
  sub_10002AEAC(a1, v13, bswap32(a2[24]) + 100, a2, 8 * (bswap32(v5) + bswap32(v6) + bswap32(v7)) + 8);
}

void sub_10002ABF4(_DWORD *a1)
{
  __CFDictionary *Mutable;
  unsigned int v3;
  CFStringRef v4;
  unsigned int v5;
  int v6;
  const UInt8 *v7;
  unsigned int v8;
  unsigned int v9;
  CFDataRef v10;
  const __SCNetworkReachability *v11;
  const __SCNetworkReachability *v12;
  int Flags;
  unsigned int v14;
  _BOOL4 v15;
  unsigned int v16;
  const void *v17;
  os_log_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int *v24;
  uint64_t v25;
  char cStr[4];

  if (!a1[2])
    return;
  Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  v3 = a1[16];
  if (v3 && if_indextoname(bswap32(v3), cStr))
  {
    v4 = CFStringCreateWithCString(0, cStr, 0x600u);
    CFDictionarySetValue(Mutable, CFSTR("interface"), v4);
    CFRelease(v4);
  }
  v5 = bswap32(a1[24]);
  if (v5 < 8)
  {
    v8 = 2;
    goto LABEL_26;
  }
  v6 = 0;
  v7 = (const UInt8 *)(a1 + 25);
  v8 = 2;
  while (1)
  {
    v9 = *((_DWORD *)v7 + 1);
    if (*(_DWORD *)v7 != 184549376)
      goto LABEL_17;
    *(_DWORD *)cStr = 0;
    v10 = CFDataCreate(0, v7 + 8, v7[8]);
    CFDictionarySetValue(Mutable, CFSTR("remote-address"), v10);
    CFRelease(v10);
    v11 = (const __SCNetworkReachability *)SCNetworkReachabilityCreateWithOptions(0, Mutable);
    if (!v11)
      break;
    v12 = v11;
    Flags = SCNetworkReachabilityGetFlags(v11, (SCNetworkReachabilityFlags *)cStr);
    CFRelease(v12);
    if (!Flags)
      goto LABEL_24;
    v14 = *(_DWORD *)cStr;
    if (!v6)
      goto LABEL_29;
    v15 = (v8 & 2) == 0;
    if ((cStr[0] & 4) == 0)
      v15 = (v8 & 6) != 2;
    if ((cStr[0] & 2) != 0 && v15)
    {
LABEL_29:
      v8 = *(_DWORD *)cStr;
      if ((cStr[0] & 6) == 2)
        goto LABEL_25;
    }
    ++v6;
LABEL_17:
    v16 = bswap32(v9);
    v7 += v16;
    v5 -= v16;
    if (v5 <= 7)
      goto LABEL_26;
  }
  CFDictionaryRemoveValue(Mutable, CFSTR("interface"));
  v17 = (const void *)SCNetworkReachabilityCreateWithOptions(0, Mutable);
  if (v17)
  {
    CFRelease(v17);
    v14 = 0;
    goto LABEL_25;
  }
  v18 = sub_100007594();
  v19 = _SC_syslog_os_log_mapping(3);
  if (__SC_log_enabled(3, v18, v19))
  {
    v20 = _os_log_pack_size(12);
    v23 = &cStr[-((__chkstk_darwin(v20, v21, v22) + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
    v24 = __error();
    v25 = _os_log_pack_fill(v23, v20, *v24, &_mh_execute_header, "_dns_resolver_set_reach_flags SCNetworkReachabilityCreateWithOptions() failed:\n  options = %@");
    *(_DWORD *)v25 = 138412290;
    *(_QWORD *)(v25 + 4) = Mutable;
    __SC_log_send(3, v18, v19, v23);
  }
LABEL_24:
  v14 = v8;
LABEL_25:
  v8 = v14;
LABEL_26:
  CFRelease(Mutable);
  a1[18] = bswap32(v8);
}

void sub_10002AEAC(void **a1, unsigned int a2, unsigned int a3, const void *a4, int a5)
{
  _DWORD *v10;
  uint64_t v11;
  size_t v12;
  unsigned int v13;
  unsigned int v14;
  size_t v15;
  unsigned int v16;
  unsigned int v17;
  char *v18;

  v10 = *a1;
  v11 = bswap32(*((_DWORD *)*a1 + 12));
  v12 = a3;
  if ((a3 & 3) != 0)
    v13 = (a3 | 3) + 1;
  else
    v13 = a3;
  v14 = v13 + 8;
  v15 = v13 + v11 + 64;
  if (v15 <= 0x2000)
  {
    v16 = v11;
  }
  else
  {
    v10 = malloc_type_realloc(*a1, v15, 0x46D30967uLL);
    v16 = bswap32(v10[12]);
  }
  v17 = bswap32(bswap32(v10[13]) + a5);
  v10[12] = bswap32(v16 + v14);
  v10[13] = v17;
  v18 = (char *)v10 + v11;
  *((_DWORD *)v18 + 14) = bswap32(a2);
  *((_DWORD *)v18 + 15) = bswap32(v14);
  memcpy((char *)v10 + v11 + 64, a4, v12);
  if (v13 > a3)
    bzero((char *)v10 + v11 + v12 + 64, v13 + ~a3 + 1);
  *a1 = v10;
}

void sub_10002AFE4(uint64_t *a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  CC_SHA256_CTX c;

  bzero(a2, a3);
  if (a1)
  {
    v6 = *a1;
    if (v6)
    {
      memset(&c, 0, sizeof(c));
      v7 = *(_QWORD *)(v6 + 24);
      if (a3 <= 0x1F)
        v8 = (unsigned __int8 *)&v9;
      else
        v8 = a2;
      *(_QWORD *)(v6 + 24) = 0;
      CC_SHA256_Init(&c);
      CC_SHA256_Update(&c, (const void *)v6, bswap32(*(_DWORD *)(v6 + 48)) + 56);
      CC_SHA256_Final(v8, &c);
      if (v8 != a2)
        memcpy(a2, v8, a3);
      *(_QWORD *)(v6 + 24) = v7;
    }
  }
}

void sub_10002B0D4(void **a1)
{
  free(*a1);
  *a1 = 0;
}

void *sub_10002B130()
{
  return malloc_type_calloc(1uLL, 0x400uLL, 0xE4771CD2uLL);
}

void sub_10002B184(void **a1, unsigned __int8 *a2)
{
  _DWORD *v3;
  int v4;
  int v5;
  int v6;
  BOOL v7;
  int v8;
  int v9;

  v3 = *a1;
  v4 = a2[1];
  if (v4 == 30)
  {
    if (!*((_DWORD *)a2 + 2) && !*((_DWORD *)a2 + 3) && !*((_DWORD *)a2 + 4))
    {
      v5 = *((_DWORD *)a2 + 5);
      v6 = 0x1000000;
LABEL_4:
      v7 = v5 != v6;
      if (v5 == v6)
        v8 = 100663296;
      else
        v8 = 0;
      goto LABEL_11;
    }
  }
  else if (v4 == 2)
  {
    v5 = *((_DWORD *)a2 + 1);
    v6 = 16777343;
    goto LABEL_4;
  }
  v8 = 0;
  v7 = 1;
LABEL_11:
  v9 = v3[17];
  v3[2] = bswap32(bswap32(v3[2]) + 1);
  sub_10002B27C(a1, 0xBu, *a2, a2);
  if (!v7)
    *((_DWORD *)*a1 + 17) = v8 | v9;
}

void sub_10002B27C(void **a1, unsigned int a2, unsigned int a3, const void *a4)
{
  _DWORD *v8;
  uint64_t v9;
  size_t v10;
  unsigned int v11;
  unsigned int v12;
  size_t v13;
  unsigned int v14;
  char *v15;

  v8 = *a1;
  v9 = bswap32(*((_DWORD *)*a1 + 24));
  v10 = a3;
  if ((a3 & 3) != 0)
    v11 = (a3 | 3) + 1;
  else
    v11 = a3;
  v12 = v11 + 8;
  v13 = v11 + v9 + 108;
  if (v13 < 0x401)
  {
    v14 = v9;
  }
  else
  {
    v8 = malloc_type_realloc(*a1, v13, 0x840B5627uLL);
    v14 = bswap32(v8[24]);
  }
  v8[24] = bswap32(v14 + v12);
  v15 = (char *)v8 + v9;
  *((_DWORD *)v15 + 25) = bswap32(a2);
  *((_DWORD *)v15 + 26) = bswap32(v12);
  memcpy((char *)v8 + v9 + 108, a4, v10);
  if (v11 > a3)
    bzero((char *)v8 + v9 + v10 + 108, v11 + ~a3 + 1);
  *a1 = v8;
}

uint64_t sub_10002B3A0(uint64_t result, unsigned int a2)
{
  *(_DWORD *)(*(_QWORD *)result + 68) = bswap32(a2);
  return result;
}

void sub_10002B3F0(void **a1, char *__s)
{
  unsigned int v4;

  *((_DWORD *)*a1 + 6) = bswap32(bswap32(*((_DWORD *)*a1 + 6)) + 1);
  v4 = strlen(__s) + 1;
  sub_10002B27C(a1, 0xCu, v4, __s);
}

void sub_10002B474(void **a1, const void *a2)
{
  *((_DWORD *)*a1 + 9) = bswap32(bswap32(*((_DWORD *)*a1 + 9)) + 1);
  sub_10002B27C(a1, 0xDu, 8u, a2);
}

void sub_10002B4DC(void **a1, char *__s)
{
  unsigned int v4;

  v4 = strlen(__s) + 1;
  sub_10002B27C(a1, 0xFu, v4, __s);
}

void sub_10002B548(void **a1, char *__s)
{
  unsigned int v4;

  v4 = strlen(__s) + 1;
  sub_10002B27C(a1, 0xAu, v4, __s);
}

void sub_10002B5B4(void **a1, unsigned int a2, char *__s)
{
  unsigned int v5;

  *((_DWORD *)*a1 + 16) = bswap32(a2);
  if (__s)
  {
    v5 = strlen(__s);
    sub_10002B27C(a1, 0x10u, v5, __s);
  }
}

void sub_10002B658(void **a1, char *__s)
{
  unsigned int v4;

  v4 = strlen(__s) + 1;
  sub_10002B27C(a1, 0xEu, v4, __s);
}

uint64_t sub_10002B6C4(uint64_t result, unsigned int a2)
{
  *(_DWORD *)(*(_QWORD *)result + 60) = bswap32(a2);
  return result;
}

uint64_t sub_10002B714(uint64_t result, unsigned int a2)
{
  *(_WORD *)(*(_QWORD *)result + 20) = __rev16(a2);
  return result;
}

uint64_t sub_10002B764(uint64_t result, unsigned int a2)
{
  *(_DWORD *)(*(_QWORD *)result + 56) = bswap32(a2);
  return result;
}

uint64_t sub_10002B7B4(uint64_t result, unsigned int a2)
{
  *(_DWORD *)(*(_QWORD *)result + 76) = bswap32(a2);
  return result;
}

uint64_t sub_10002B804(uint64_t result)
{
  dword_10007DBEC = result;
  return result;
}

DIR *sub_10002B850(void **a1)
{
  DIR *result;
  DIR *v3;
  dirent *i;
  char *d_name;
  FILE *v6;
  FILE *v7;

  result = opendir("/Library/Preferences/SystemConfiguration/resolver");
  if (result)
  {
    v3 = result;
    v7 = 0;
    for (i = readdir(result); i; i = readdir(v3))
    {
      d_name = i->d_name;
      if (strcmp(i->d_name, ".") && strcmp(d_name, ".."))
      {
        v6 = sub_10002B93C(d_name);
        v7 = v6;
        if (v6)
        {
          sub_10002AB10(a1, v6);
          sub_10002B0D4((void **)&v7);
        }
      }
    }
    return (DIR *)closedir(v3);
  }
  return result;
}

FILE *sub_10002B93C(char *a1)
{
  FILE *result;
  FILE *v3;
  char *v4;
  __int128 v5;
  char *v6;
  uint64_t v7;
  char *v8;
  const char *v9;
  size_t v10;
  char *v11;
  char *v12;
  const char *v13;
  int v14;
  uint64_t v15;
  os_log_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  char *v29;
  int v30;
  char *v31;
  size_t v32;
  unsigned int v33;
  unsigned __int8 *v34;
  char *v35;
  char *v36;
  void *v37;
  unint64_t v38;
  int v39;
  size_t v40;
  unint64_t v41;
  int v42;
  char *v43;
  char *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  _DWORD *v49;
  unint64_t v50;
  _BOOL4 v51;
  _DWORD *v52;
  char *v53;
  char *v54;
  char *v55;
  unsigned int v56;
  const char *v57;
  const char **v58;
  __int128 v59;
  char *v60;
  char *v61;
  _DWORD *v62;
  size_t v63;
  _OWORD v64[2];
  uint64_t v65;
  char v66[1024];

  v62 = 0;
  v63 = 0;
  v65 = 0;
  memset(v64, 0, sizeof(v64));
  v66[0] = 0;
  __strlcpy_chk(v66, "/Library/Preferences/SystemConfiguration/resolver", 1024, 1024);
  __strlcat_chk(v66, "/", 1024, 1024);
  v60 = a1;
  __strlcat_chk(v66, a1, 1024, 1024);
  result = fopen(v66, "r");
  if (result)
  {
    v3 = result;
    v4 = fgetln(result, &v63);
    if (v4)
    {
      v6 = v4;
      v7 = 0;
      v8 = 0;
      v9 = " \t";
      *(_QWORD *)&v5 = 136315394;
      v59 = v5;
      do
      {
        v61 = 0;
        v10 = v63;
        if (v63)
        {
          if (v6[v63 - 1] == 10)
          {
            v6[v63 - 1] = 0;
            v10 = v63;
          }
          v11 = (char *)reallocf(v8, v10 + 1);
          v8 = v11;
          if (v11)
          {
            strlcpy(v11, v6, v63 + 1);
            v61 = v8;
            v12 = strsep(&v61, v9);
            if (v12)
            {
              v13 = v12;
              v14 = *v12;
              if (v14 != 35 && v14 != 59)
              {
                v15 = 0;
                while (strcasecmp(v13, (&off_100076440)[v15]))
                {
                  v15 += 2;
                  if (v15 == 20)
                  {
                    v16 = sub_100007594();
                    v17 = _SC_syslog_os_log_mapping(5);
                    if (__SC_log_enabled(5, v16, v17))
                    {
                      v18 = v9;
                      v19 = v7;
                      v20 = _os_log_pack_size(22);
                      v58 = &v57;
                      v23 = (char *)&v57 - ((__chkstk_darwin(v20, v21, v22) + 15) & 0xFFFFFFFFFFFFFFF0);
                      v24 = __error();
                      v25 = v20;
                      v7 = v19;
                      v9 = v18;
                      v26 = _os_log_pack_fill(v23, v25, *v24, &_mh_execute_header, "Unrecognized token (%s) found in: %s", v57, (const char *)v58);
                      *(_DWORD *)v26 = v59;
                      *(_QWORD *)(v26 + 4) = v13;
                      *(_WORD *)(v26 + 12) = 2080;
                      *(_QWORD *)(v26 + 14) = v66;
                      __SC_log_send(5, v16, v17, v23);
                    }
                    goto LABEL_85;
                  }
                }
                v27 = *((_DWORD *)&off_100076440 + 2 * v15 + 3);
                v28 = SLODWORD((&off_100076440)[v15 + 1]);
                v29 = strsep(&v61, v9);
                if (v29)
                {
                  v30 = *((_DWORD *)v64 + v28);
                  *((_DWORD *)v64 + v28) = v30 + 1;
                  if (v30 < v27)
                  {
                    v31 = v29;
                    if (!v62)
                    {
                      v62 = sub_10002B130();
                      if (!v62)
                        goto LABEL_99;
                    }
                    switch((int)v28)
                    {
                      case 0:
                        v32 = strlen(v31);
                        if (v32)
                        {
                          while (v31[v32 - 1] == 46)
                          {
                            v31[--v32] = 0;
                            if (!v32)
                              goto LABEL_85;
                          }
                          sub_10002B548((void **)&v62, v31);
                        }
                        goto LABEL_85;
                      case 1:
                        do
                        {
                          if (*v31)
                          {
                            if (!strcasecmp(v31, "scoped"))
                            {
                              v7 = v7 | 0x1000;
                            }
                            else if (!strcasecmp(v31, "a"))
                            {
                              v7 = v7 | 2;
                            }
                            else if (!strcasecmp(v31, "aaaa"))
                            {
                              v7 = v7 | 4;
                            }
                            else
                            {
                              v7 = v7;
                            }
                          }
                          v31 = strsep(&v61, v9);
                        }
                        while (v31);
                        goto LABEL_85;
                      case 2:
                        v33 = if_nametoindex(v31);
                        if (v33)
                          sub_10002B5B4((void **)&v62, v33, v31);
                        goto LABEL_85;
                      case 3:
                        v34 = sub_10002C02C(v31);
                        if (v34)
                        {
                          v35 = (char *)v34;
                          sub_10002B184((void **)&v62, v34);
                          goto LABEL_48;
                        }
                        goto LABEL_85;
                      case 4:
                        v35 = 0;
                        do
                        {
                          if (*v31)
                          {
                            if (v35)
                            {
                              strlcat(v35, " ", v63 + 1);
                              strlcat(v35, v31, v63 + 1);
                            }
                            else
                            {
                              v36 = (char *)malloc_type_malloc(v63 + 1, 0x745950E5uLL);
                              if (!v36)
                                goto LABEL_85;
                              v35 = v36;
                              strlcpy(v36, v31, v63 + 1);
                            }
                          }
                          v31 = strsep(&v61, v9);
                        }
                        while (v31);
                        if (v35)
                        {
                          sub_10002B658((void **)&v62, v35);
LABEL_48:
                          v37 = v35;
                          goto LABEL_49;
                        }
                        goto LABEL_85;
                      case 5:
                        v38 = strtol(v31, 0, 0);
                        if (!(v38 >> 16))
                          sub_10002B714((uint64_t)&v62, (unsigned __int16)v38);
                        goto LABEL_85;
                      case 6:
                        v39 = 0;
                        do
                        {
                          if (v39 == 6)
                            break;
                          v40 = strlen(v31);
                          if (v40)
                          {
                            while (v31[v40 - 1] == 46)
                            {
                              v31[--v40] = 0;
                              if (!v40)
                                goto LABEL_59;
                            }
                            sub_10002B3F0((void **)&v62, v31);
                          }
LABEL_59:
                          ++v39;
                          v31 = strsep(&v61, v9);
                        }
                        while (v31);
                        goto LABEL_85;
                      case 7:
                        v41 = strtol(v31, 0, 0);
                        if (!HIDWORD(v41))
                          sub_10002B6C4((uint64_t)&v62, v41);
                        goto LABEL_85;
                      case 8:
                        v42 = 11;
                        break;
                      case 9:
                        v50 = strtol(v31, 0, 0);
                        if (!HIDWORD(v50))
                          sub_10002B764((uint64_t)&v62, v50);
                        goto LABEL_85;
                      default:
                        goto LABEL_85;
                    }
                    do
                    {
                      if (!--v42)
                        break;
                      v43 = strchr(v31, 47);
                      v44 = v43;
                      if (v43)
                        *v43 = 0;
                      v37 = sub_10002C0F4(v31);
                      if (!v37)
                        break;
                      if (*((_BYTE *)v37 + 1) != 2)
                        goto LABEL_49;
                      v45 = *((_DWORD *)v37 + 1);
                      free(v37);
                      if (v44)
                      {
                        v37 = sub_10002C0F4(v44 + 1);
                        if (!v37)
                          break;
                        if (*((_BYTE *)v37 + 1) != 2)
                        {
LABEL_49:
                          free(v37);
                          break;
                        }
                        v46 = *((_DWORD *)v37 + 1);
                        free(v37);
                      }
                      else
                      {
                        v47 = bswap32(v45);
                        if ((v47 & 0x80000000) != 0)
                        {
                          if (v47 >> 30 == 2)
                          {
                            v48 = -65536;
                          }
                          else
                          {
                            if (v47 >> 29 != 6)
                              break;
                            v48 = -256;
                          }
                        }
                        else
                        {
                          v48 = -16777216;
                        }
                        v46 = bswap32(v48);
                      }
                      v49 = malloc_type_malloc(8uLL, 0x100004000313F17uLL);
                      *v49 = v45;
                      v49[1] = v46;
                      sub_10002B474((void **)&v62, v49);
                      free(v49);
                      v31 = strsep(&v61, v9);
                    }
                    while (v31);
                  }
                }
              }
            }
          }
        }
LABEL_85:
        v6 = fgetln(v3, &v63);
      }
      while (v6);
      v51 = LODWORD(v64[0]) == 0;
    }
    else
    {
      v8 = 0;
      LODWORD(v7) = 0;
      v51 = 1;
    }
    v52 = v62;
    if (v62 && v51)
    {
      v53 = v60;
      v54 = strrchr(v60, 47);
      if (v54)
        v55 = v54 + 1;
      else
        v55 = v53;
      sub_10002B548((void **)&v62, v55);
      v52 = v62;
    }
    if (v52)
    {
      if ((_DWORD)v7)
        v56 = v7;
      else
        v56 = bswap32(v52[17]) | dword_10007DBEC;
      sub_10002B3A0((uint64_t)&v62, v56);
    }
LABEL_99:
    if (v8)
      free(v8);
    fclose(v3);
    return (FILE *)v62;
  }
  return result;
}

unsigned __int8 *sub_10002C02C(char *a1)
{
  unsigned __int8 *result;
  _BYTE *v3;
  unint64_t v4;
  int v5;

  result = (unsigned __int8 *)sub_10002C0F4(a1);
  if (!result)
  {
    result = (unsigned __int8 *)strrchr(a1, 46);
    if (result)
    {
      v3 = result;
      v4 = strtol((const char *)result + 1, 0, 10);
      result = 0;
      if (!(v4 >> 16))
      {
        *v3 = 0;
        result = (unsigned __int8 *)sub_10002C0F4(a1);
        if (result)
        {
          v5 = result[1];
          if (v5 == 30 || v5 == 2)
            *((_WORD *)result + 1) = bswap32(v4) >> 16;
        }
      }
    }
  }
  return result;
}

void *sub_10002C0F4(const char *a1)
{
  void *v1;
  addrinfo *v2;
  int ai_family;
  addrinfo v6;
  addrinfo *v7;

  v7 = 0;
  memset(&v6, 0, sizeof(v6));
  v6.ai_flags = 4;
  v1 = 0;
  if (!getaddrinfo(a1, 0, &v6, &v7))
  {
    v2 = v7;
    ai_family = v7->ai_family;
    if (ai_family == 30 || ai_family == 2)
    {
      v1 = malloc_type_malloc(v7->ai_addrlen, 0xB75E7870uLL);
      memcpy(v1, v7->ai_addr, v7->ai_addrlen);
      v2 = v7;
    }
    else
    {
      v1 = 0;
    }
    freeaddrinfo(v2);
  }
  return v1;
}

uint64_t sub_10002C1BC(uint64_t a1, const void *a2)
{
  const char *v3;
  char *v4;
  char *mach_service;
  os_log_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  const char *handler[5];

  sub_100055F28(qword_10007DBF0);
  sub_10002C37C();
  qword_10007DC10 = (uint64_t)_Block_copy(a2);
  v3 = "com.apple.SystemConfiguration.DNSConfiguration";
  v4 = getenv("com.apple.SystemConfiguration.DNSConfiguration");
  if (v4)
    v3 = v4;
  if (qword_10007DC18 != -1)
    dispatch_once(&qword_10007DC18, &stru_100076580);
  mach_service = (char *)xpc_connection_create_mach_service(v3, (dispatch_queue_t)qword_10007DC20, 1uLL);
  handler[0] = (const char *)_NSConcreteStackBlock;
  handler[1] = (const char *)0x40000000;
  handler[2] = (const char *)sub_100005054;
  handler[3] = (const char *)&unk_1000764E0;
  handler[4] = mach_service;
  xpc_connection_set_event_handler((xpc_connection_t)mach_service, handler);
  xpc_connection_resume((xpc_connection_t)mach_service);
  v6 = sub_100007594();
  v7 = _SC_syslog_os_log_mapping(7);
  result = __SC_log_enabled(7, v6, v7);
  if ((_DWORD)result)
  {
    v9 = _os_log_pack_size(12);
    v12 = (char *)handler - ((__chkstk_darwin(v9, v10, v11) + 15) & 0xFFFFFFFFFFFFFFF0);
    v13 = __error();
    v14 = _os_log_pack_fill(v12, v9, *v13, &_mh_execute_header, "XPC server \"%s\" started", handler[0]);
    *(_DWORD *)v14 = 136315138;
    *(_QWORD *)(v14 + 4) = v3;
    return __SC_log_send(7, v6, v7, v12);
  }
  return result;
}

uint64_t sub_10002C37C()
{
  uint64_t result;
  os_log_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;

  if (qword_10007DC18 != -1)
    dispatch_once(&qword_10007DC18, &stru_100076580);
  result = os_state_add_handler(qword_10007DC20, &stru_100076540);
  if (!result)
  {
    v1 = sub_100007594();
    v2 = _SC_syslog_os_log_mapping(3);
    result = __SC_log_enabled(3, v1, v2);
    if ((_DWORD)result)
    {
      v3 = _os_log_pack_size(2);
      v6 = (char *)&v8 - ((__chkstk_darwin(v3, v4, v5) + 15) & 0xFFFFFFFFFFFFFFF0);
      v7 = __error();
      *(_WORD *)_os_log_pack_fill(v6, v3, *v7, &_mh_execute_header, "DNS configuration: os_state_add_handler() failed") = 0;
      return __SC_log_send(3, v1, v2, v6);
    }
  }
  return result;
}

uint64_t sub_10002C4B4(CFDataRef *a1)
{
  CFDataRef v1;
  uint64_t v2;
  os_log_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  const char *v11;
  uint32_t v12;
  uint32_t v13;
  os_log_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int *v20;
  _DWORD *v21;
  uint64_t v23;
  _QWORD block[6];

  v1 = *a1;
  if (*a1)
  {
    v2 = *((_QWORD *)v1 + 3);
    v3 = sub_100007594();
    v4 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v3, v4))
    {
      v5 = _os_log_pack_size(12);
      v8 = (char *)&block[-1] - ((__chkstk_darwin(v5, v6, v7) + 15) & 0xFFFFFFFFFFFFFFF0);
      v9 = __error();
      v10 = _os_log_pack_fill(v8, v5, *v9, &_mh_execute_header, "DNS configuration updated: %llu", v23);
      *(_DWORD *)v10 = 134217984;
      *(_QWORD *)(v10 + 4) = v2;
      __SC_log_send(6, v3, v4, v8);
    }
    v1 = CFDataCreate(0, (const UInt8 *)v1, bswap32(*((_DWORD *)v1 + 12)) + 56);
  }
  else
  {
    v2 = 0;
  }
  if (qword_10007DC18 != -1)
    dispatch_once(&qword_10007DC18, &stru_100076580);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_10002C748;
  block[3] = &unk_100076500;
  block[4] = v1;
  block[5] = v2;
  dispatch_sync((dispatch_queue_t)qword_10007DC20, block);
  if (v1)
    CFRelease(v1);
  sub_100056038((uint64_t)&qword_10007DBF0);
  if (qword_10007DC10)
    (*(void (**)(void))(qword_10007DC10 + 16))();
  v11 = (const char *)dns_configuration_notify_key();
  if (v11)
  {
    v12 = notify_post(v11);
    if (v12)
    {
      v13 = v12;
      v14 = sub_100007594();
      v15 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v14, v15))
      {
        v16 = _os_log_pack_size(8);
        v19 = (char *)&block[-1] - ((__chkstk_darwin(v16, v17, v18) + 15) & 0xFFFFFFFFFFFFFFF0);
        v20 = __error();
        v21 = (_DWORD *)_os_log_pack_fill(v19, v16, *v20, &_mh_execute_header, "notify_post() failed: %u", v23);
        *v21 = 67109120;
        v21[1] = v13;
        __SC_log_send(3, v14, v15, v19);
      }
    }
  }
  return 1;
}

void sub_10002C748(uint64_t a1)
{
  sub_100055FA0((uint64_t)&qword_10007DBF0, *(CFTypeRef *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

os_state_data_s *__cdecl sub_10002C798(id a1, os_state_hints_s *a2)
{
  CFIndex Length;
  size_t v3;
  os_log_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  int64_t v10;
  os_state_data_s *v11;
  os_state_data_s *v12;
  const UInt8 *BytePtr;
  os_log_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int *v18;
  size_t v20[2];

  if (qword_10007DBF0)
  {
    Length = CFDataGetLength((CFDataRef)qword_10007DBF0);
    v3 = Length + 200;
    if ((unint64_t)(Length + 200) > 0x8000)
    {
      v4 = sub_100007594();
      v5 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v4, v5))
      {
        v6 = _os_log_pack_size(22);
        v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
        v8 = __error();
        v9 = _os_log_pack_fill(v7, v6, *v8, &_mh_execute_header, "DNS configuration: state data too large (%zu > %zu)", v20[0], v20[1]);
        *(_DWORD *)v9 = 134218240;
        *(_QWORD *)(v9 + 4) = v3;
        *(_WORD *)(v9 + 12) = 2048;
        *(_QWORD *)(v9 + 14) = 0x8000;
        __SC_log_send(3, v4, v5, v7);
      }
      return 0;
    }
    v10 = Length;
  }
  else
  {
    v10 = 0;
    v3 = 200;
  }
  v11 = (os_state_data_s *)malloc_type_calloc(1uLL, v3, 0x1DA5D1DBuLL);
  if (!v11)
  {
    v14 = sub_100007594();
    v15 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v14, v15))
    {
      v16 = _os_log_pack_size(2);
      v17 = (char *)v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
      v18 = __error();
      *(_WORD *)_os_log_pack_fill(v17, v16, *v18, &_mh_execute_header, "DNS configuration: could not allocate state data") = 0;
      __SC_log_send(3, v14, v15, v17);
    }
    return 0;
  }
  v12 = v11;
  v11->var0 = 3;
  v11->var1.var1 = v10;
  __strlcpy_chk(&v11->var2, "SystemConfiguration", 64, 64);
  __strlcpy_chk(v12->var2.var1, "dnsinfo", 64, 64);
  __strlcpy_chk(v12->var3, "DNS Configuration", 64, 64);
  if (v10 >= 1)
  {
    BytePtr = CFDataGetBytePtr((CFDataRef)qword_10007DBF0);
    memcpy(v12->var4, BytePtr, v10);
  }
  return v12;
}

void sub_10002C9F0(id a1)
{
  qword_10007DC20 = (uint64_t)dispatch_queue_create("com.apple.SystemConfiguration.DNSConfiguration.server", 0);
}

uint64_t sub_10002CA4C(_xpc_connection_s *a1, xpc_object_t xdict)
{
  uint64_t uint64;
  os_log_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  pid_t pid;
  uint64_t result;
  const void *v14;
  uint64_t v15;
  uint64_t v16;

  uint64 = xpc_dictionary_get_uint64(xdict, "generation");
  v4 = sub_100007594();
  v5 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v4, v5))
  {
    v6 = _os_log_pack_size(28);
    v9 = (char *)&v14 - ((__chkstk_darwin(v6, v7, v8) + 15) & 0xFFFFFFFFFFFFFFF0);
    v10 = __error();
    v11 = _os_log_pack_fill(v9, v6, *v10, &_mh_execute_header, "<%p:%d> DNS configuration ack: %llu", v14, v15, v16);
    pid = xpc_connection_get_pid(a1);
    *(_DWORD *)v11 = 134218496;
    *(_QWORD *)(v11 + 4) = a1;
    *(_WORD *)(v11 + 12) = 1024;
    *(_DWORD *)(v11 + 14) = pid;
    *(_WORD *)(v11 + 18) = 2048;
    *(_QWORD *)(v11 + 20) = uint64;
    __SC_log_send(7, v4, v5, v9);
  }
  sub_100056088((uint64_t)&qword_10007DBF0, a1, uint64);
  sub_100056038((uint64_t)&qword_10007DBF0);
  result = qword_10007DC10;
  if (qword_10007DC10)
    return (*(uint64_t (**)(void))(qword_10007DC10 + 16))();
  return result;
}

void sub_10002D2F0()
{
  os_log_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int *v6;
  uint64_t v7;
  CFIndex Count;
  const char *v9[2];

  if (qword_10007DC28)
  {
    v0 = sub_100007594();
    v1 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v0, v1))
    {
      v2 = _os_log_pack_size(22);
      v5 = (char *)v9 - ((__chkstk_darwin(v2, v3, v4) + 15) & 0xFFFFFFFFFFFFFFF0);
      v6 = __error();
      v7 = _os_log_pack_fill(v5, v2, *v6, &_mh_execute_header, "%s: count %ld", v9[0], v9[1]);
      Count = CFDictionaryGetCount((CFDictionaryRef)qword_10007DC28);
      *(_DWORD *)v7 = 136315394;
      *(_QWORD *)(v7 + 4) = "effective_ifindex_free";
      *(_WORD *)(v7 + 12) = 2048;
      *(_QWORD *)(v7 + 14) = Count;
      __SC_log_send(7, v0, v1, v5);
    }
    if (qword_10007DC28)
    {
      CFRelease((CFTypeRef)qword_10007DC28);
      qword_10007DC28 = 0;
    }
  }
}

uint64_t sub_10002D430(uint64_t a1, void *key)
{
  unsigned int Value;
  uint64_t v5;
  int v6;
  uint64_t v7;
  os_log_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  const char *v17[2];
  __int128 v18;
  __int128 v19;

  if ((_DWORD)key
    && qword_10007DC28
    && (Value = CFDictionaryGetValue((CFDictionaryRef)qword_10007DC28, (const void *)key)) != 0)
  {
    if (Value == -1)
      return 0;
    else
      return Value;
  }
  else
  {
    v18 = 0u;
    v19 = 0u;
    __strlcpy_chk(&v18, a1, 16, 16);
    v6 = sub_10002D628();
    if (v6 == -1 || ioctl(v6, 0xC020699DuLL, &v18) == -1)
    {
      return 0;
    }
    else
    {
      v7 = v19;
      if ((_DWORD)v19 && sub_10002D76C(v19, (uint64_t)v17))
      {
        v8 = sub_100007594();
        v9 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v8, v9))
        {
          v10 = _os_log_pack_size(44);
          v13 = (char *)v17 - ((__chkstk_darwin(v10, v11, v12) + 15) & 0xFFFFFFFFFFFFFFF0);
          v14 = __error();
          v15 = _os_log_pack_fill(v13, v10, *v14, &_mh_execute_header, "%s: %s (%u): effective %s (%u)", v17[0], v17[1], (_DWORD)v18, *((const char **)&v18 + 1), (_DWORD)v19);
          *(_DWORD *)v15 = 136316162;
          *(_QWORD *)(v15 + 4) = "effective_ifindex_get";
          *(_WORD *)(v15 + 12) = 2080;
          *(_QWORD *)(v15 + 14) = a1;
          *(_WORD *)(v15 + 22) = 1024;
          *(_DWORD *)(v15 + 24) = (_DWORD)key;
          *(_WORD *)(v15 + 28) = 2080;
          *(_QWORD *)(v15 + 30) = v17;
          *(_WORD *)(v15 + 38) = 1024;
          *(_DWORD *)(v15 + 40) = v7;
          __SC_log_send(5, v8, v9, v13);
        }
        v5 = v7;
      }
      else
      {
        v5 = 0;
        v7 = 0xFFFFFFFFLL;
      }
      sub_10002D854(key, (void *)v7);
    }
  }
  return v5;
}

uint64_t sub_10002D628()
{
  os_log_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int *v6;
  uint64_t v7;
  int *v8;
  char *v9;
  const char *v11;

  if (dword_10007D8D8 == -1)
  {
    dword_10007D8D8 = socket(2, 2, 0);
    if (dword_10007D8D8 == -1)
    {
      v0 = sub_100007594();
      v1 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v0, v1))
      {
        v2 = _os_log_pack_size(12);
        v5 = (char *)&v11 - ((__chkstk_darwin(v2, v3, v4) + 15) & 0xFFFFFFFFFFFFFFF0);
        v6 = __error();
        v7 = _os_log_pack_fill(v5, v2, *v6, &_mh_execute_header, "socket() failed: %s", v11);
        v8 = __error();
        v9 = strerror(*v8);
        *(_DWORD *)v7 = 136315138;
        *(_QWORD *)(v7 + 4) = v9;
        __SC_log_send(3, v0, v1, v5);
      }
    }
  }
  return dword_10007D8D8;
}

uint64_t sub_10002D76C(int a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[6];
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000;
  v4[2] = sub_10002DA74;
  v4[3] = &unk_1000765F0;
  v5 = a1;
  v4[4] = &v6;
  v4[5] = a2;
  if (qword_10007DC40 != -1)
    dispatch_once(&qword_10007DC40, &stru_1000766B0);
  dispatch_sync((dispatch_queue_t)qword_10007DC48, v4);
  v2 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v2;
}

void sub_10002D854(void *key, void *value)
{
  unsigned int v2;
  unsigned int v3;
  __CFDictionary *Mutable;

  v2 = value;
  v3 = key;
  Mutable = (__CFDictionary *)qword_10007DC28;
  if (!qword_10007DC28)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, (const CFDictionaryKeyCallBacks *)&unk_10007D8E0, (const CFDictionaryValueCallBacks *)&unk_10007D910);
    qword_10007DC28 = (uint64_t)Mutable;
  }
  CFDictionarySetValue(Mutable, (const void *)v3, (const void *)v2);
}

uint64_t sub_10002D8E0(uint64_t a1)
{
  uint64_t v2;
  _QWORD block[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  if (qword_10007DC40 != -1)
    dispatch_once(&qword_10007DC40, &stru_1000766B0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_10002D9CC;
  block[3] = &unk_1000765C8;
  block[4] = &v5;
  block[5] = a1;
  dispatch_sync((dispatch_queue_t)qword_10007DC48, block);
  v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t sub_10002D9CC(uint64_t result)
{
  uint64_t v1;
  int v2;
  _DWORD *v3;
  int v4;

  v1 = result;
  if (qword_10007DC30)
  {
    v2 = *(_DWORD *)qword_10007DC30;
    if (*(_DWORD *)qword_10007DC30)
    {
      v3 = (_DWORD *)(qword_10007DC30 + 16);
      do
      {
        result = *((_QWORD *)v3 - 1);
        if (!result)
          break;
        result = strcmp((const char *)result, *(const char **)(v1 + 40));
        if (!(_DWORD)result)
          goto LABEL_9;
        v4 = *v3;
        v3 += 4;
        v2 = v4;
      }
      while (v4);
    }
  }
  else
  {
    result = if_nametoindex(*(const char **)(result + 40));
    v2 = result;
LABEL_9:
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 24) = v2;
  }
  return result;
}

char *sub_10002DA74(char *result)
{
  char *v1;
  int v2;
  uint64_t i;

  v1 = result;
  if (qword_10007DC30)
  {
    v2 = *(_DWORD *)qword_10007DC30;
    if (*(_DWORD *)qword_10007DC30)
    {
      for (i = qword_10007DC30 + 8; *(_QWORD *)i; i += 16)
      {
        if (v2 == *((_DWORD *)result + 12))
        {
          *(_QWORD *)(*(_QWORD *)(*((_QWORD *)result + 4) + 8) + 24) = *((_QWORD *)result + 5);
          return (char *)strlcpy(*((char **)result + 5), *(const char **)i, 0x10uLL);
        }
        v2 = *(_DWORD *)(i + 8);
        if (!v2)
          return result;
      }
    }
  }
  else
  {
    result = if_indextoname(*((_DWORD *)result + 12), *((char **)result + 5));
    *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 4) + 8) + 24) = result;
  }
  return result;
}

void sub_10002DB58()
{
  if (qword_10007DC40 != -1)
    dispatch_once(&qword_10007DC40, &stru_1000766B0);
  dispatch_sync((dispatch_queue_t)qword_10007DC48, &stru_100076630);
}

void sub_10002DBD4(id a1)
{
  if (qword_10007DC30)
  {
    if_freenameindex((if_nameindex *)qword_10007DC30);
    qword_10007DC30 = 0;
  }
}

void sub_10002DC34()
{
  if (qword_10007DC40 != -1)
    dispatch_once(&qword_10007DC40, &stru_1000766B0);
  dispatch_sync((dispatch_queue_t)qword_10007DC48, &stru_100076670);
}

void sub_10002DCB0(id a1)
{
  if (qword_10007DC30)
  {
    if_freenameindex((if_nameindex *)qword_10007DC30);
    qword_10007DC30 = 0;
  }
  qword_10007DC30 = (uint64_t)if_nameindex();
}

char *sub_10002DD18(int a1, uint64_t a2)
{
  char *v2;

  if (!a1)
    return 0;
  v2 = (char *)a2;
  if (!sub_10002D76C(a1, a2))
    snprintf(v2, 0x10uLL, "[%u]", a1);
  return v2;
}

uint64_t sub_10002DD9C()
{
  uint64_t result;

  result = dword_10007DC38;
  if (!dword_10007DC38)
  {
    result = sub_10002D8E0((uint64_t)"lo0");
    dword_10007DC38 = result;
  }
  return result;
}

uint64_t sub_10002DE04()
{
  uint64_t result;

  result = dword_10007D8D8;
  if (dword_10007D8D8 != -1)
  {
    result = close(dword_10007D8D8);
    dword_10007D8D8 = -1;
  }
  return result;
}

uint64_t sub_10002DE6C()
{
  os_log_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int *v6;
  uint64_t v7;
  int *v8;
  char *v9;
  const char *v11;

  if (dword_10007D8DC == -1)
  {
    dword_10007D8DC = socket(30, 2, 0);
    if (dword_10007D8DC == -1)
    {
      v0 = sub_100007594();
      v1 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v0, v1))
      {
        v2 = _os_log_pack_size(12);
        v5 = (char *)&v11 - ((__chkstk_darwin(v2, v3, v4) + 15) & 0xFFFFFFFFFFFFFFF0);
        v6 = __error();
        v7 = _os_log_pack_fill(v5, v2, *v6, &_mh_execute_header, "socket() failed: %s", v11);
        v8 = __error();
        v9 = strerror(*v8);
        *(_DWORD *)v7 = 136315138;
        *(_QWORD *)(v7 + 4) = v9;
        __SC_log_send(3, v0, v1, v5);
      }
    }
  }
  return dword_10007D8DC;
}

uint64_t sub_10002DFB0()
{
  uint64_t result;

  result = dword_10007D8DC;
  if (dword_10007D8DC != -1)
  {
    result = close(dword_10007D8DC);
    dword_10007D8DC = -1;
  }
  return result;
}

uint64_t sub_10002E018(int a1, __int16 a2, _OWORD *a3, char a4)
{
  _OWORD v5[2];
  __int128 v6;

  memset(v5, 0, sizeof(v5));
  v6 = 0u;
  LOWORD(v5[0]) = 7708;
  *(_OWORD *)((char *)v5 + 8) = *a3;
  BYTE12(v5[1]) = a4;
  WORD4(v6) = a2;
  return ioctl(a1, 0xC0307586uLL, v5);
}

uint64_t sub_10002E094(int a1, __int16 a2, _OWORD *a3)
{
  _OWORD v4[2];
  __int128 v5;

  memset(v4, 0, sizeof(v4));
  v5 = 0u;
  LOWORD(v4[0]) = 7708;
  *(_OWORD *)((char *)v4 + 8) = *a3;
  WORD4(v5) = a2;
  return ioctl(a1, 0xC0307587uLL, v4);
}

uint64_t sub_10002E10C(int a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5)
{
  char v9;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v13 = 0;
  v11 = 0u;
  v12 = 0u;
  __strlcpy_chk(&v11, a2, 16, 16);
  LOBYTE(v12) = a3;
  if (a5)
  {
    if (a5 >= 0x14)
      v9 = 20;
    else
      v9 = a5;
    BYTE1(v12) = v9;
    __memcpy_chk((char *)&v12 + 4, a4);
  }
  return ioctl(a1, 0xC02869AEuLL, &v11);
}

uint64_t sub_10002E1D4(unsigned int a1)
{
  int v2;
  uint64_t result;
  os_log_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  int *v12;
  char *v13;
  const char *v14[2];
  uint64_t v15;

  v14[0] = 0;
  v14[1] = 0;
  v15 = 0;
  __strlcpy_chk(v14, "lo0", 16, 16);
  if (!a1)
  {
    a1 = dword_10007DC38;
    if (!dword_10007DC38)
    {
      a1 = sub_10002D8E0((uint64_t)"lo0");
      dword_10007DC38 = a1;
    }
  }
  v15 = a1;
  v2 = sub_10002DE6C();
  if (v2 < 0)
    return 0;
  if (ioctl(v2, 0xC0186955uLL, v14) != -1)
    return 1;
  v4 = sub_100007594();
  v5 = _SC_syslog_os_log_mapping(3);
  result = __SC_log_enabled(3, v4, v5);
  if ((_DWORD)result)
  {
    v6 = _os_log_pack_size(12);
    v9 = (char *)v14 - ((__chkstk_darwin(v6, v7, v8) + 15) & 0xFFFFFFFFFFFFFFF0);
    v10 = __error();
    v11 = _os_log_pack_fill(v9, v6, *v10, &_mh_execute_header, "ioctl(SIOCSDEFIFACE_IN6) failed: %s", v14[0]);
    v12 = __error();
    v13 = strerror(*v12);
    *(_DWORD *)v11 = 136315138;
    *(_QWORD *)(v11 + 4) = v13;
    __SC_log_send(3, v4, v5, v9);
    return 0;
  }
  return result;
}

CFStringRef sub_10002E36C(uint64_t a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("%u"), a1);
}

BOOL sub_10002E3C8(int a1, int a2)
{
  return a1 == a2;
}

uint64_t sub_10002E414(uint64_t result)
{
  return result;
}

void sub_10002E45C(id a1)
{
  qword_10007DC48 = (uint64_t)dispatch_queue_create("my_if_nametoindex queue", 0);
}

uint64_t sub_10002E4B8(uint64_t a1, void *a2)
{
  uint64_t result;
  NSObject *v3;
  _xpc_connection_s *mach_service;
  _xpc_connection_s *v5;
  os_log_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  _QWORD handler[5];

  result = sub_10002E654(a1, a2);
  if ((_DWORD)result)
  {
    v3 = dispatch_queue_create("IPMonitorControlServer", 0);
    mach_service = xpc_connection_create_mach_service("com.apple.SystemConfiguration.IPMonitorControl", v3, 1uLL);
    if (mach_service)
    {
      v5 = mach_service;
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 0x40000000;
      handler[2] = sub_10002E9CC;
      handler[3] = &unk_1000766F8;
      handler[4] = mach_service;
      qword_10007DC70 = (uint64_t)v3;
      xpc_connection_set_event_handler(mach_service, handler);
      xpc_connection_resume(v5);
      os_state_add_handler(qword_10007DC70, &stru_100076780);
      return 1;
    }
    else
    {
      v6 = sub_100007594();
      v7 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v6, v7))
      {
        v8 = _os_log_pack_size(2);
        v11 = (char *)handler - ((__chkstk_darwin(v8, v9, v10) + 15) & 0xFFFFFFFFFFFFFFF0);
        v12 = __error();
        *(_WORD *)_os_log_pack_fill(v11, v8, *v12, &_mh_execute_header, "IPMonitorControlServer: failed to create server") = 0;
        __SC_log_send(3, v6, v7, v11);
      }
      dispatch_release(v3);
      return 0;
    }
  }
  return result;
}

uint64_t sub_10002E654(uint64_t a1, void *aBlock)
{
  os_log_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (qword_10007DC50)
  {
    v2 = sub_100007594();
    v3 = _SC_syslog_os_log_mapping(5);
    result = __SC_log_enabled(5, v2, v3);
    if (!(_DWORD)result)
      return result;
    v5 = _os_log_pack_size(12);
    v8 = (char *)&v15 - ((__chkstk_darwin(v5, v6, v7) + 15) & 0xFFFFFFFFFFFFFFF0);
    v9 = *__error();
    v10 = _os_log_pack_fill(v8, v5, v9, &_mh_execute_header, "%s: already called");
    goto LABEL_9;
  }
  if (a1 && aBlock)
  {
    qword_10007DC50 = a1;
    qword_10007DC58 = (uint64_t)_Block_copy(aBlock);
    return 1;
  }
  v2 = sub_100007594();
  v3 = _SC_syslog_os_log_mapping(5);
  result = __SC_log_enabled(5, v2, v3);
  if ((_DWORD)result)
  {
    v11 = _os_log_pack_size(12);
    v8 = (char *)&v15 - ((__chkstk_darwin(v11, v12, v13) + 15) & 0xFFFFFFFFFFFFFFF0);
    v14 = *__error();
    v10 = _os_log_pack_fill(v8, v11, v14, &_mh_execute_header, "%s: queue or handler are NULL");
LABEL_9:
    *(_DWORD *)v10 = 136315138;
    *(_QWORD *)(v10 + 4) = "SetNotificationInfo";
    __SC_log_send(5, v2, v3, v8);
    return 0;
  }
  return result;
}

uint64_t sub_10002E80C(_QWORD *a1)
{
  uint64_t v2;
  _QWORD block[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v9 = 0;
  v10 = &v9;
  v11 = 0x2000000000;
  v12 = 0;
  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_10002E8F4;
  block[3] = &unk_1000766D8;
  block[4] = &v5;
  block[5] = &v9;
  dispatch_sync((dispatch_queue_t)qword_10007DC70, block);
  *a1 = v6[3];
  v2 = v10[3];
  _Block_object_dispose(&v5, 8);
  _Block_object_dispose(&v9, 8);
  return v2;
}

void sub_10002E8F4(uint64_t a1)
{
  _QWORD *v2;
  const __CFDictionary *v3;
  const __CFDictionary *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = 0;
  v2 = (_QWORD *)S_ControlSessions;
  if (S_ControlSessions)
  {
    do
    {
      v3 = (const __CFDictionary *)v2[6];
      if (v3)
        CFDictionaryApplyFunction(v3, (CFDictionaryApplierFunction)sub_1000309F8, &v7);
      v4 = (const __CFDictionary *)v2[5];
      if (v4)
        CFDictionaryApplyFunction(v4, (CFDictionaryApplierFunction)sub_100030ADC, &v7);
      v2 = (_QWORD *)*v2;
    }
    while (v2);
    v5 = v7;
  }
  else
  {
    v5 = 0;
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v5;
  v6 = qword_10007DC60;
  qword_10007DC60 = 0;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v6;
}

void sub_10002E9CC(uint64_t a1, xpc_object_t object)
{
  xpc_type_t type;
  xpc_type_t v5;
  os_log_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  os_log_t v14;
  const char *string;
  os_log_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int *v27;
  uint64_t v28;
  const void *handler[5];

  type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_connection)
  {
    handler[0] = _NSConcreteStackBlock;
    handler[1] = (const void *)0x40000000;
    handler[2] = sub_10002ECB8;
    handler[3] = &unk_100076718;
    handler[4] = object;
    xpc_connection_set_event_handler((xpc_connection_t)object, handler);
    xpc_connection_set_target_queue((xpc_connection_t)object, (dispatch_queue_t)qword_10007DC70);
    xpc_connection_resume((xpc_connection_t)object);
    return;
  }
  v5 = type;
  if (type != (xpc_type_t)&_xpc_type_error)
  {
    v6 = sub_100007594();
    v7 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v6, v7))
      return;
    v8 = _os_log_pack_size(12);
    v11 = (char *)handler - ((__chkstk_darwin(v8, v9, v10) + 15) & 0xFFFFFFFFFFFFFFF0);
    v12 = __error();
    v13 = _os_log_pack_fill(v11, v8, *v12, &_mh_execute_header, "unknown event %p", handler[0]);
    *(_DWORD *)v13 = 134217984;
    *(_QWORD *)(v13 + 4) = v5;
    v14 = v6;
LABEL_9:
    __SC_log_send(5, v14, v7, v11);
    return;
  }
  string = xpc_dictionary_get_string(object, _xpc_error_key_description);
  v16 = sub_100007594();
  v7 = _SC_syslog_os_log_mapping(5);
  v17 = __SC_log_enabled(5, v16, v7);
  if (object != &_xpc_error_connection_invalid)
  {
    if (!v17)
      return;
    v18 = _os_log_pack_size(12);
    v11 = (char *)handler - ((__chkstk_darwin(v18, v19, v20) + 15) & 0xFFFFFFFFFFFFFFF0);
    v21 = __error();
    v22 = _os_log_pack_fill(v11, v18, *v21, &_mh_execute_header, "%s", (const char *)handler[0]);
    *(_DWORD *)v22 = 136315138;
    *(_QWORD *)(v22 + 4) = string;
    v14 = v16;
    goto LABEL_9;
  }
  if (v17)
  {
    v23 = _os_log_pack_size(12);
    v26 = (char *)handler - ((__chkstk_darwin(v23, v24, v25) + 15) & 0xFFFFFFFFFFFFFFF0);
    v27 = __error();
    v28 = _os_log_pack_fill(v26, v23, *v27, &_mh_execute_header, "%s", (const char *)handler[0]);
    *(_DWORD *)v28 = 136315138;
    *(_QWORD *)(v28 + 4) = string;
    __SC_log_send(5, v16, v7, v26);
  }
  xpc_release(*(xpc_object_t *)(a1 + 32));
}

void sub_10002ECB8(uint64_t a1, void *a2)
{
  sub_10002ED00(*(_xpc_connection_s **)(a1 + 32), a2);
}

void sub_10002ED00(_xpc_connection_s *a1, xpc_object_t object)
{
  xpc_type_t type;
  os_log_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  int int64;
  xpc_object_t reply;
  void *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  void *context;
  void *v22;
  const char *string;
  CFStringRef v24;
  const __CFNumber *Value;
  int64_t v26;
  const char *v27;
  CFStringRef v28;
  int v29;
  _QWORD *v30;
  int v31;
  const __CFDictionary *v32;
  const __CFNumber *v33;
  BOOL v34;
  uint64_t *v35;
  const char *v36;
  CFStringRef v37;
  uint64_t v38;
  xpc_object_t empty;
  const __CFDictionary *v40;
  const __CFNumber *v41;
  const char *v42;
  int64_t v43;
  int64_t v44;
  xpc_object_t v45;
  const char *v46;
  const char *v47;
  uint64_t v48;
  const __CFDictionary *v49;
  const __CFNumber *v50;
  const char *v51;
  int64_t v52;
  int64_t v53;
  xpc_object_t v54;
  _QWORD *v55;
  const __CFDictionary *v56;
  _QWORD *v57;
  const __CFDictionary *v58;
  _xpc_connection_s *remote_connection;
  void *valuePtr;

  type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_dictionary)
  {
    int64 = xpc_dictionary_get_int64(object, "Type");
    reply = xpc_dictionary_create_reply(object);
    v15 = reply;
    switch(int64)
    {
      case 1:
        v16 = sub_10002F3EC(a1, object);
        goto LABEL_83;
      case 2:
        if (!reply)
          return;
        context = xpc_connection_get_context(a1);
        if (!context)
          goto LABEL_77;
        v22 = context;
        string = xpc_dictionary_get_string(object, "InterfaceName");
        if (string)
        {
          LODWORD(valuePtr) = 0;
          if (*((_QWORD *)v22 + 5)
            && (v24 = CFStringCreateWithCString(0, string, 0x8000100u),
                Value = (const __CFNumber *)CFDictionaryGetValue(*((CFDictionaryRef *)v22 + 5), v24),
                CFRelease(v24),
                Value))
          {
            CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
            v26 = valuePtr;
          }
          else
          {
            v26 = 0;
          }
          xpc_dictionary_set_int64(v15, "PrimaryRank", v26);
          v16 = 0;
        }
        else
        {
LABEL_74:
          v16 = 22;
        }
        goto LABEL_84;
      case 3:
        v16 = sub_10002F768(a1, object);
        goto LABEL_83;
      case 4:
        if (!reply)
          return;
        v27 = xpc_dictionary_get_string(object, "InterfaceName");
        if (!v27)
          goto LABEL_74;
        v28 = CFStringCreateWithCString(0, v27, 0x8000100u);
        v29 = xpc_dictionary_get_int64(object, "Advisory");
        v30 = (_QWORD *)S_ControlSessions;
        if (!S_ControlSessions)
          goto LABEL_30;
        v31 = v29;
        break;
      case 5:
        if (!reply)
          return;
        v35 = &S_ControlSessions;
        do
          v35 = (uint64_t *)*v35;
        while (v35 && !v35[6]);
        xpc_dictionary_set_BOOL(reply, "AdvisoryIsSet", v35 != 0);
        goto LABEL_82;
      case 6:
        if (!reply)
          return;
        v36 = xpc_dictionary_get_string(object, "InterfaceName");
        if (!v36)
          goto LABEL_74;
        v37 = CFStringCreateWithCString(0, v36, 0x8000100u);
        v38 = S_ControlSessions;
        if (!S_ControlSessions)
          goto LABEL_76;
        empty = 0;
        do
        {
          LODWORD(valuePtr) = 0;
          v40 = *(const __CFDictionary **)(v38 + 40);
          if (v40)
          {
            v41 = (const __CFNumber *)CFDictionaryGetValue(v40, v37);
            if (v41)
            {
              CFNumberGetValue(v41, kCFNumberSInt32Type, &valuePtr);
              if (!empty)
                empty = xpc_array_create_empty();
              v42 = *(const char **)(v38 + 32);
              v43 = *(int *)(v38 + 24);
              v44 = valuePtr;
              v45 = xpc_dictionary_create_empty();
              xpc_dictionary_set_string(v45, "ProcessName", v42);
              xpc_dictionary_set_int64(v45, "ProcessID", v43);
              xpc_dictionary_set_int64(v45, "PrimaryRank", v44);
              xpc_array_append_value(empty, v45);
              xpc_release(v45);
            }
          }
          v38 = *(_QWORD *)v38;
        }
        while (v38);
        CFRelease(v37);
        if (!empty)
          goto LABEL_75;
        v46 = "RankAssertionInfo";
        goto LABEL_73;
      case 7:
        if (!reply)
          return;
        v47 = xpc_dictionary_get_string(object, "InterfaceName");
        if (!v47)
          goto LABEL_74;
        v37 = CFStringCreateWithCString(0, v47, 0x8000100u);
        v48 = S_ControlSessions;
        if (!S_ControlSessions)
        {
LABEL_76:
          CFRelease(v37);
LABEL_77:
          v16 = 2;
          goto LABEL_84;
        }
        empty = 0;
        do
        {
          LODWORD(valuePtr) = 0;
          v49 = *(const __CFDictionary **)(v48 + 48);
          if (v49)
          {
            v50 = (const __CFNumber *)CFDictionaryGetValue(v49, v37);
            if (v50)
            {
              CFNumberGetValue(v50, kCFNumberSInt32Type, &valuePtr);
              if (!empty)
                empty = xpc_array_create_empty();
              v51 = *(const char **)(v48 + 32);
              v52 = *(int *)(v48 + 24);
              v53 = valuePtr;
              v54 = xpc_dictionary_create_empty();
              xpc_dictionary_set_string(v54, "ProcessName", v51);
              xpc_dictionary_set_int64(v54, "ProcessID", v52);
              xpc_dictionary_set_int64(v54, "Advisory", v53);
              xpc_array_append_value(empty, v54);
              xpc_release(v54);
            }
          }
          v48 = *(_QWORD *)v48;
        }
        while (v48);
        CFRelease(v37);
        if (!empty)
        {
LABEL_75:
          v16 = 2;
          goto LABEL_83;
        }
        v46 = "AdvisoryInfo";
LABEL_73:
        xpc_dictionary_set_value(v15, v46, empty);
        xpc_release(empty);
        goto LABEL_82;
      case 8:
        if (!reply)
          return;
        valuePtr = 0;
        v55 = (_QWORD *)S_ControlSessions;
        if (!S_ControlSessions)
          goto LABEL_77;
        do
        {
          v56 = (const __CFDictionary *)v55[5];
          if (v56)
            CFDictionaryApplyFunction(v56, (CFDictionaryApplierFunction)sub_10003014C, &valuePtr);
          v55 = (_QWORD *)*v55;
        }
        while (v55);
        goto LABEL_71;
      case 9:
        if (!reply)
          return;
        valuePtr = 0;
        v57 = (_QWORD *)S_ControlSessions;
        if (!S_ControlSessions)
          goto LABEL_77;
        do
        {
          v58 = (const __CFDictionary *)v57[6];
          if (v58)
            CFDictionaryApplyFunction(v58, (CFDictionaryApplierFunction)sub_10003014C, &valuePtr);
          v57 = (_QWORD *)*v57;
        }
        while (v57);
LABEL_71:
        empty = valuePtr;
        if (!valuePtr)
          goto LABEL_75;
        v46 = "InterfaceNames";
        goto LABEL_73;
      default:
        v16 = 22;
        goto LABEL_83;
    }
    while (1)
    {
      v32 = (const __CFDictionary *)v30[6];
      if (v32)
      {
        v33 = (const __CFNumber *)CFDictionaryGetValue(v32, v28);
        if (v33)
        {
          LODWORD(valuePtr) = 0;
          if (!v31)
            break;
          CFNumberGetValue(v33, kCFNumberSInt32Type, &valuePtr);
          if ((_DWORD)valuePtr == v31)
            break;
        }
      }
      v30 = (_QWORD *)*v30;
      if (!v30)
      {
LABEL_30:
        v34 = 0;
        goto LABEL_81;
      }
    }
    v34 = 1;
LABEL_81:
    xpc_dictionary_set_BOOL(v15, "AdvisoryIsSet", v34);
    CFRelease(v28);
LABEL_82:
    v16 = 0;
LABEL_83:
    if (v15)
    {
LABEL_84:
      xpc_dictionary_set_int64(v15, "Error", v16);
      remote_connection = xpc_dictionary_get_remote_connection(object);
      xpc_connection_send_message(remote_connection, v15);
      xpc_release(v15);
    }
  }
  else
  {
    if (type != (xpc_type_t)&_xpc_type_error)
    {
      v5 = sub_100007594();
      v6 = _SC_syslog_os_log_mapping(5);
      if (!__SC_log_enabled(5, v5, v6))
        return;
      v7 = _os_log_pack_size(2);
      v10 = (char *)&valuePtr - ((__chkstk_darwin(v7, v8, v9) + 15) & 0xFFFFFFFFFFFFFFF0);
      v11 = __error();
      *(_WORD *)_os_log_pack_fill(v10, v7, *v11, &_mh_execute_header, "unexpected event") = 0;
      v12 = 5;
      goto LABEL_5;
    }
    if (object == &_xpc_error_connection_invalid)
    {
      sub_10002FB60(a1);
    }
    else if (object == &_xpc_error_connection_interrupted)
    {
      v5 = sub_100007594();
      v6 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v5, v6))
      {
        v17 = _os_log_pack_size(2);
        v10 = (char *)&valuePtr - ((__chkstk_darwin(v17, v18, v19) + 15) & 0xFFFFFFFFFFFFFFF0);
        v20 = __error();
        *(_WORD *)_os_log_pack_fill(v10, v17, *v20, &_mh_execute_header, "connection interrupted") = 0;
        v12 = 6;
LABEL_5:
        __SC_log_send(v12, v5, v6, v10);
      }
    }
  }
}

uint64_t sub_10002F3EC(_xpc_connection_s *a1, void *a2)
{
  os_log_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  pid_t pid;
  uint64_t result;
  const char *string;
  const char *v15;
  unsigned int int64;
  unsigned int v17;
  char *v18;
  CFMutableDictionaryRef *context;
  __CFString *v20;
  CFNumberRef v21;
  os_log_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  int *v28;
  uint64_t v29;
  CFMutableDictionaryRef v30;
  int v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  const char *v35;
  uint64_t v36;

  if (xpc_connection_get_euid(a1))
  {
    v4 = sub_100007594();
    v5 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v4, v5))
    {
      v6 = _os_log_pack_size(18);
      v9 = (char *)&v32 - ((__chkstk_darwin(v6, v7, v8) + 15) & 0xFFFFFFFFFFFFFFF0);
      v10 = __error();
      v11 = _os_log_pack_fill(v9, v6, *v10, &_mh_execute_header, "connection %p pid %d permission denied", v32, v33);
      pid = xpc_connection_get_pid(a1);
      *(_DWORD *)v11 = 134218240;
      *(_QWORD *)(v11 + 4) = a1;
      *(_WORD *)(v11 + 12) = 1024;
      *(_DWORD *)(v11 + 14) = pid;
      __SC_log_send(6, v4, v5, v9);
    }
    return 1;
  }
  string = xpc_dictionary_get_string(a2, "InterfaceName");
  if (!string)
    return 22;
  v15 = string;
  int64 = xpc_dictionary_get_int64(a2, "PrimaryRank");
  v17 = int64;
  if (int64 > 4)
    return 22;
  v18 = off_1000767A0[int64];
  context = (CFMutableDictionaryRef *)xpc_connection_get_context(a1);
  if (!context)
    context = (CFMutableDictionaryRef *)sub_10002FC78(a1, a2);
  HIDWORD(v32) = v17;
  if (context[5])
  {
    v20 = (__CFString *)CFStringCreateWithCString(0, v15, 0x8000100u);
    if (!v17)
    {
      CFDictionaryRemoveValue(context[5], v20);
      if (!CFDictionaryGetCount(context[5]))
      {
        CFRelease(context[5]);
        context[5] = 0;
      }
      goto LABEL_19;
    }
LABEL_18:
    v21 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&v32 + 4);
    CFDictionarySetValue(context[5], v20, v21);
    CFRelease(v21);
LABEL_19:
    sub_10002FF94(v20);
    if (qword_10007DC50 && qword_10007DC58)
      dispatch_async((dispatch_queue_t)qword_10007DC50, (dispatch_block_t)qword_10007DC58);
    sub_10003004C(v20);
    CFRelease(v20);
    goto LABEL_23;
  }
  if (v17)
  {
    context[5] = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    v20 = (__CFString *)CFStringCreateWithCString(0, v15, 0x8000100u);
    goto LABEL_18;
  }
LABEL_23:
  v22 = sub_100007594();
  v23 = _SC_syslog_os_log_mapping(5);
  result = __SC_log_enabled(5, v22, v23);
  if ((_DWORD)result)
  {
    v24 = _os_log_pack_size(44);
    v27 = (char *)&v32 - ((__chkstk_darwin(v24, v25, v26) + 15) & 0xFFFFFFFFFFFFFFF0);
    v28 = __error();
    v29 = _os_log_pack_fill(v27, v24, *v28, &_mh_execute_header, "%s[%d] SetInterfaceRank(%s) = %s (%u)", v32, v33, v34, v35, v36);
    v30 = context[4];
    v31 = *((_DWORD *)context + 6);
    *(_DWORD *)v29 = 136316162;
    *(_QWORD *)(v29 + 4) = v30;
    *(_WORD *)(v29 + 12) = 1024;
    *(_DWORD *)(v29 + 14) = v31;
    *(_WORD *)(v29 + 18) = 2080;
    *(_QWORD *)(v29 + 20) = v15;
    *(_WORD *)(v29 + 28) = 2080;
    *(_QWORD *)(v29 + 30) = v18;
    *(_WORD *)(v29 + 38) = 1024;
    *(_DWORD *)(v29 + 40) = v17;
    __SC_log_send(5, v22, v23, v27);
    return 0;
  }
  return result;
}

uint64_t sub_10002F768(_xpc_connection_s *a1, void *a2)
{
  void *v4;
  void *v5;
  BOOL value;
  const char *string;
  const char *v8;
  const char *v9;
  unsigned int int64;
  unsigned int v11;
  char *v12;
  CFMutableDictionaryRef *context;
  __CFString *v14;
  os_log_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int *v21;
  uint64_t v22;
  pid_t pid;
  uint64_t result;
  CFNumberRef v25;
  os_log_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  int *v32;
  uint64_t v33;
  CFMutableDictionaryRef v34;
  int v35;
  const char *v36;
  const char *v37;
  uint64_t v38;
  const char *v39;
  const char *v40;
  uint64_t v41;
  const char *v42;

  if (xpc_connection_get_euid(a1))
  {
    v4 = (void *)xpc_connection_copy_entitlement_value(a1, "com.apple.SystemConfiguration.SCNetworkInterfaceSetAdvisory");
    if (!v4)
    {
LABEL_14:
      v15 = sub_100007594();
      v16 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v15, v16))
      {
        v17 = _os_log_pack_size(18);
        v20 = (char *)&v37 - ((__chkstk_darwin(v17, v18, v19) + 15) & 0xFFFFFFFFFFFFFFF0);
        v21 = __error();
        v22 = _os_log_pack_fill(v20, v17, *v21, &_mh_execute_header, "connection %p pid %d permission denied", v37, v38);
        pid = xpc_connection_get_pid(a1);
        *(_DWORD *)v22 = 134218240;
        *(_QWORD *)(v22 + 4) = a1;
        *(_WORD *)(v22 + 12) = 1024;
        *(_DWORD *)(v22 + 14) = pid;
        __SC_log_send(6, v15, v16, v20);
      }
      return 1;
    }
    v5 = v4;
    if (xpc_get_type(v4) != (xpc_type_t)&_xpc_type_BOOL)
    {
      xpc_release(v5);
      goto LABEL_14;
    }
    value = xpc_BOOL_get_value(v5);
    xpc_release(v5);
    if (!value)
      goto LABEL_14;
  }
  string = xpc_dictionary_get_string(a2, "InterfaceName");
  if (!string)
    return 22;
  v8 = string;
  v9 = xpc_dictionary_get_string(a2, "Reason");
  int64 = xpc_dictionary_get_int64(a2, "Advisory");
  v11 = int64;
  if (int64 > 3)
    return 22;
  v12 = off_1000767C8[int64];
  context = (CFMutableDictionaryRef *)xpc_connection_get_context(a1);
  if (!context)
    context = (CFMutableDictionaryRef *)sub_10002FC78(a1, a2);
  HIDWORD(v37) = v11;
  if (context[6])
  {
    v14 = (__CFString *)CFStringCreateWithCString(0, v8, 0x8000100u);
    if (!v11)
    {
      CFDictionaryRemoveValue(context[6], v14);
      if (!CFDictionaryGetCount(context[6]))
      {
        CFRelease(context[6]);
        context[6] = 0;
      }
      goto LABEL_22;
    }
LABEL_21:
    v25 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&v37 + 4);
    CFDictionarySetValue(context[6], v14, v25);
    CFRelease(v25);
LABEL_22:
    sub_10002FF94(v14);
    sub_1000300CC(v14);
    if (qword_10007DC50 && qword_10007DC58)
      dispatch_async((dispatch_queue_t)qword_10007DC50, (dispatch_block_t)qword_10007DC58);
    CFRelease(v14);
    goto LABEL_26;
  }
  if (v11)
  {
    context[6] = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    v14 = (__CFString *)CFStringCreateWithCString(0, v8, 0x8000100u);
    goto LABEL_21;
  }
LABEL_26:
  v26 = sub_100007594();
  v27 = _SC_syslog_os_log_mapping(5);
  result = __SC_log_enabled(5, v26, v27);
  if ((_DWORD)result)
  {
    v28 = _os_log_pack_size(54);
    v31 = (char *)&v37 - ((__chkstk_darwin(v28, v29, v30) + 15) & 0xFFFFFFFFFFFFFFF0);
    v32 = __error();
    v33 = _os_log_pack_fill(v31, v28, *v32, &_mh_execute_header, "%s[%d] SetInterfaceAdvisory(%s) = %s (%u) reason='%s'", v37, v38, v39, v40, v41, v42);
    v34 = context[4];
    v35 = *((_DWORD *)context + 6);
    v36 = "";
    if (v9)
      v36 = v9;
    *(_DWORD *)v33 = 136316418;
    *(_QWORD *)(v33 + 4) = v34;
    *(_WORD *)(v33 + 12) = 1024;
    *(_DWORD *)(v33 + 14) = v35;
    *(_WORD *)(v33 + 18) = 2080;
    *(_QWORD *)(v33 + 20) = v8;
    *(_WORD *)(v33 + 28) = 2080;
    *(_QWORD *)(v33 + 30) = v12;
    *(_WORD *)(v33 + 38) = 1024;
    *(_DWORD *)(v33 + 40) = v11;
    *(_WORD *)(v33 + 44) = 2080;
    *(_QWORD *)(v33 + 46) = v36;
    __SC_log_send(5, v26, v27, v31);
    return 0;
  }
  return result;
}

void sub_10002FB60(_xpc_connection_s *a1)
{
  os_log_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  uint64_t *context;
  const void *v11;

  v2 = sub_100007594();
  v3 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v2, v3))
  {
    v4 = _os_log_pack_size(12);
    v7 = (char *)&v11 - ((__chkstk_darwin(v4, v5, v6) + 15) & 0xFFFFFFFFFFFFFFF0);
    v8 = __error();
    v9 = _os_log_pack_fill(v7, v4, *v8, &_mh_execute_header, "IPMonitorControlServer: client %p went away", v11);
    *(_DWORD *)v9 = 134217984;
    *(_QWORD *)(v9 + 4) = a1;
    __SC_log_send(7, v2, v3, v7);
  }
  context = (uint64_t *)xpc_connection_get_context(a1);
  if (context)
    sub_1000302D0(context);
}

_OWORD *sub_10002FC78(_xpc_connection_s *a1, void *a2)
{
  _OWORD *v4;
  const char *string;
  uint64_t v6;
  os_log_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  const char *v18;
  uint64_t v19;
  const void *v20;
  const void *v21;

  v4 = malloc_type_malloc(0x38uLL, 0x10B004087C588CDuLL);
  *v4 = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  *((_QWORD *)v4 + 6) = 0;
  *((_QWORD *)v4 + 2) = a1;
  *((_DWORD *)v4 + 6) = xpc_connection_get_pid(a1);
  string = xpc_dictionary_get_string(a2, "ProcessName");
  if (!string)
    string = "<unknown>";
  *((_QWORD *)v4 + 4) = strdup(string);
  xpc_connection_set_finalizer_f(a1, (xpc_finalizer_t)sub_10002FE5C);
  xpc_connection_set_context(a1, v4);
  v6 = S_ControlSessions;
  *(_QWORD *)v4 = S_ControlSessions;
  if (v6)
    *(_QWORD *)(v6 + 8) = v4;
  S_ControlSessions = (uint64_t)v4;
  *((_QWORD *)v4 + 1) = &S_ControlSessions;
  v7 = sub_100007594();
  v8 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v7, v8))
  {
    v9 = _os_log_pack_size(38);
    v12 = (char *)&v18 - ((__chkstk_darwin(v9, v10, v11) + 15) & 0xFFFFFFFFFFFFFFF0);
    v13 = __error();
    v14 = _os_log_pack_fill(v12, v9, *v13, &_mh_execute_header, "Created %s [%d] session %p (connection %p)", v18, v19, v20, v21);
    v15 = *((_QWORD *)v4 + 4);
    v16 = *((_DWORD *)v4 + 6);
    *(_DWORD *)v14 = 136315906;
    *(_QWORD *)(v14 + 4) = v15;
    *(_WORD *)(v14 + 12) = 1024;
    *(_DWORD *)(v14 + 14) = v16;
    *(_WORD *)(v14 + 18) = 2048;
    *(_QWORD *)(v14 + 20) = v4;
    *(_WORD *)(v14 + 28) = 2048;
    *(_QWORD *)(v14 + 30) = a1;
    __SC_log_send(7, v7, v8, v12);
  }
  return v4;
}

void sub_10002FE5C(uint64_t a1)
{
  os_log_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  const char *v12;
  uint64_t v13;
  const void *v14;

  v2 = sub_100007594();
  v3 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v2, v3))
  {
    v4 = _os_log_pack_size(28);
    v7 = (char *)&v12 - ((__chkstk_darwin(v4, v5, v6) + 15) & 0xFFFFFFFFFFFFFFF0);
    v8 = __error();
    v9 = _os_log_pack_fill(v7, v4, *v8, &_mh_execute_header, "Releasing %s [%d] session %p", v12, v13, v14);
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)v9 = 136315650;
    *(_QWORD *)(v9 + 4) = v10;
    *(_WORD *)(v9 + 12) = 1024;
    *(_DWORD *)(v9 + 14) = v11;
    *(_WORD *)(v9 + 18) = 2048;
    *(_QWORD *)(v9 + 20) = a1;
    __SC_log_send(7, v2, v3, v7);
  }
  free(*(void **)(a1 + 32));
  free((void *)a1);
}

void sub_10002FF94(void *value)
{
  uint64_t v2;
  CFRange v3;

  if (qword_10007DC60)
  {
    v3.length = qword_10007DC68;
    v3.location = 0;
    if (CFArrayContainsValue((CFArrayRef)qword_10007DC60, v3, value))
      return;
    CFArrayAppendValue((CFMutableArrayRef)qword_10007DC60, value);
    v2 = qword_10007DC68 + 1;
  }
  else
  {
    qword_10007DC60 = (uint64_t)CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    CFArrayAppendValue((CFMutableArrayRef)qword_10007DC60, value);
    v2 = 1;
  }
  qword_10007DC68 = v2;
}

void sub_10003004C(CFStringRef ifname)
{
  const __CFString *NetworkInterfaceEntity;

  NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, ifname, CFSTR("RankAssertion"));
  SCDynamicStoreNotifyValue(0, NetworkInterfaceEntity);
  CFRelease(NetworkInterfaceEntity);
}

void sub_1000300CC(CFStringRef ifname)
{
  const __CFString *NetworkInterfaceEntity;

  NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, ifname, CFSTR("Advisory"));
  SCDynamicStoreNotifyValue(0, NetworkInterfaceEntity);
  CFRelease(NetworkInterfaceEntity);
}

void sub_10003014C(uint64_t a1, uint64_t a2, void **a3)
{
  char *v4;
  void *v5;
  int v6;
  xpc_object_t empty;
  _QWORD applier[6];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;

  v4 = (char *)_SC_cfstring_to_cstring(a1, 0, 0, 134217984);
  v5 = *a3;
  if (!*a3)
  {
    empty = xpc_array_create_empty();
    *a3 = empty;
    goto LABEL_5;
  }
  v9 = 0;
  v10 = &v9;
  v11 = 0x2000000000;
  v12 = 0;
  applier[0] = _NSConcreteStackBlock;
  applier[1] = 0x40000000;
  applier[2] = sub_100030254;
  applier[3] = &unk_100076740;
  applier[4] = &v9;
  applier[5] = v4;
  xpc_array_apply(v5, applier);
  v6 = *((unsigned __int8 *)v10 + 24);
  _Block_object_dispose(&v9, 8);
  if (!v6)
  {
    empty = *a3;
LABEL_5:
    xpc_array_set_string(empty, 0xFFFFFFFFFFFFFFFFLL, v4);
  }
  CFAllocatorDeallocate(0, v4);
}

BOOL sub_100030254(uint64_t a1, int a2, xpc_object_t xstring)
{
  const char *string_ptr;
  int v5;

  string_ptr = xpc_string_get_string_ptr(xstring);
  v5 = strcmp(string_ptr, *(const char **)(a1 + 40));
  if (!v5)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  return v5 != 0;
}

void sub_1000302D0(uint64_t *a1)
{
  os_log_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  os_log_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int *v18;
  uint64_t v19;
  pid_t pid;
  uint64_t v21;
  const void *v22;
  os_log_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  int *v29;
  uint64_t v30;
  pid_t v31;
  uint64_t v32;
  const void *v33;
  const void *v34;

  v2 = sub_100007594();
  v3 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v2, v3))
  {
    v4 = _os_log_pack_size(12);
    v7 = (char *)&v34 - ((__chkstk_darwin(v4, v5, v6) + 15) & 0xFFFFFFFFFFFFFFF0);
    v8 = __error();
    v9 = _os_log_pack_fill(v7, v4, *v8, &_mh_execute_header, "Invalidating %p", v34);
    *(_DWORD *)v9 = 134217984;
    *(_QWORD *)(v9 + 4) = a1;
    __SC_log_send(7, v2, v3, v7);
  }
  v10 = *a1;
  if (*a1)
    *(_QWORD *)(v10 + 8) = a1[1];
  *(_QWORD *)a1[1] = v10;
  v11 = a1[6];
  if (!a1[5])
  {
    if (!v11)
      return;
    goto LABEL_9;
  }
  if (v11)
  {
LABEL_9:
    v12 = sub_100007594();
    v13 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v12, v13))
    {
      v14 = _os_log_pack_size(18);
      v17 = (char *)&v34 - ((__chkstk_darwin(v14, v15, v16) + 15) & 0xFFFFFFFFFFFFFFF0);
      v18 = __error();
      v19 = _os_log_pack_fill(v17, v14, *v18, &_mh_execute_header, "pid %d removing advisories %@");
      pid = xpc_connection_get_pid((xpc_connection_t)a1[2]);
      v21 = a1[6];
      *(_DWORD *)v19 = 67109378;
      *(_DWORD *)(v19 + 4) = pid;
      *(_WORD *)(v19 + 8) = 2112;
      *(_QWORD *)(v19 + 10) = v21;
      __SC_log_send(5, v12, v13, v17);
    }
    CFDictionaryApplyFunction((CFDictionaryRef)a1[6], (CFDictionaryApplierFunction)sub_1000305F8, 0);
    v22 = (const void *)a1[6];
    if (v22)
    {
      CFRelease(v22);
      a1[6] = 0;
    }
  }
  if (a1[5])
  {
    v23 = sub_100007594();
    v24 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v23, v24))
    {
      v25 = _os_log_pack_size(18);
      v28 = (char *)&v34 - ((__chkstk_darwin(v25, v26, v27) + 15) & 0xFFFFFFFFFFFFFFF0);
      v29 = __error();
      v30 = _os_log_pack_fill(v28, v25, *v29, &_mh_execute_header, "pid %d removing assertions %@");
      v31 = xpc_connection_get_pid((xpc_connection_t)a1[2]);
      v32 = a1[5];
      *(_DWORD *)v30 = 67109378;
      *(_DWORD *)(v30 + 4) = v31;
      *(_WORD *)(v30 + 8) = 2112;
      *(_QWORD *)(v30 + 10) = v32;
      __SC_log_send(5, v23, v24, v28);
    }
    CFDictionaryApplyFunction((CFDictionaryRef)a1[5], (CFDictionaryApplierFunction)sub_100030650, 0);
    v33 = (const void *)a1[5];
    if (v33)
    {
      CFRelease(v33);
      a1[5] = 0;
    }
  }
  if (qword_10007DC50)
  {
    if (qword_10007DC58)
      dispatch_async((dispatch_queue_t)qword_10007DC50, (dispatch_block_t)qword_10007DC58);
  }
}

void sub_1000305F8(__CFString *a1)
{
  sub_10002FF94(a1);
  sub_1000300CC(a1);
}

void sub_100030650(__CFString *a1)
{
  sub_10002FF94(a1);
  sub_10003004C(a1);
}

os_state_data_s *__cdecl sub_1000306A8(id a1, os_state_hints_s *a2)
{
  return (os_state_data_s *)sub_1000306EC();
}

_DWORD *sub_1000306EC()
{
  __CFArray *Mutable;
  uint64_t i;
  CFNumberRef v2;
  CFStringRef v3;
  uint64_t v4;
  CFIndex v5;
  void *v6;
  CFDictionaryRef v7;
  const __CFData *Data;
  CFIndex Length;
  size_t v10;
  os_log_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int *v17;
  uint64_t v18;
  _DWORD *v19;
  size_t v20;
  const UInt8 *BytePtr;
  const char *v23;
  void *values;
  CFStringRef v25;
  uint64_t v26;
  uint64_t v27;
  void *keys[2];
  const __CFString *v29;
  uint64_t v30;

  Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  for (i = S_ControlSessions; i; i = *(_QWORD *)i)
  {
    if (*(_QWORD *)(i + 40) || *(_QWORD *)(i + 48))
    {
      v29 = 0;
      v30 = 0;
      v26 = 0;
      v27 = 0;
      v2 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(i + 24));
      v3 = CFStringCreateWithCString(0, *(const char **)(i + 32), 0x8000100u);
      keys[0] = CFSTR("ProcessID");
      keys[1] = CFSTR("ProcessName");
      values = v2;
      v25 = v3;
      v4 = *(_QWORD *)(i + 40);
      if (v4)
      {
        v29 = CFSTR("Assertions");
        v26 = v4;
        v5 = 3;
      }
      else
      {
        v5 = 2;
      }
      v6 = *(void **)(i + 48);
      if (v6)
      {
        keys[v5] = CFSTR("Advisories");
        *(&values + v5++) = v6;
      }
      v7 = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, v5, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      CFRelease(v2);
      CFRelease(v3);
      if (v7)
      {
        CFArrayAppendValue(Mutable, v7);
        CFRelease(v7);
      }
    }
  }
  Data = CFPropertyListCreateData(0, Mutable, kCFPropertyListBinaryFormat_v1_0, 0, 0);
  CFRelease(Mutable);
  Length = CFDataGetLength(Data);
  v10 = Length + 200;
  if ((unint64_t)(Length + 200) <= 0x8000)
  {
    v20 = Length;
    v19 = malloc_type_calloc(1uLL, v10, 0x648346uLL);
    *v19 = 1;
    v19[1] = v20;
    __strlcpy_chk(v19 + 34, "IPMonitorControl Sessions", 64, 64);
    BytePtr = CFDataGetBytePtr(Data);
    memcpy(v19 + 50, BytePtr, v20);
  }
  else
  {
    v11 = sub_100007594();
    v12 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v11, v12))
    {
      v13 = _os_log_pack_size(28);
      v16 = (char *)&v23 - ((__chkstk_darwin(v13, v14, v15) + 15) & 0xFFFFFFFFFFFFFFF0);
      v17 = __error();
      v18 = _os_log_pack_fill(v16, v13, *v17, &_mh_execute_header, "%s: state data too large (%zu > %d)", v23, (size_t)values, (_DWORD)v25);
      *(_DWORD *)v18 = 136315650;
      *(_QWORD *)(v18 + 4) = "IPMonitorControlCopyOSStateData";
      *(_WORD *)(v18 + 12) = 2048;
      *(_QWORD *)(v18 + 14) = v10;
      *(_WORD *)(v18 + 22) = 1024;
      *(_DWORD *)(v18 + 24) = 0x8000;
      __SC_log_send(5, v11, v12, v16);
    }
    v19 = 0;
  }
  CFRelease(Data);
  return v19;
}

void sub_1000309F8(void *key, uint64_t a2, CFDictionaryRef *a3)
{
  CFNumberRef v5;
  const __CFNumber *Value;
  __CFDictionary *Mutable;
  int valuePtr;

  v5 = (CFNumberRef)qword_10007DC78;
  if (!qword_10007DC78)
  {
    valuePtr = 2;
    v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    qword_10007DC78 = (uint64_t)v5;
  }
  if (!*a3)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    *a3 = Mutable;
    goto LABEL_8;
  }
  Value = (const __CFNumber *)CFDictionaryGetValue(*a3, key);
  if (!Value || CFNumberCompare(v5, Value, 0) == kCFCompareGreaterThan)
  {
    Mutable = *a3;
LABEL_8:
    CFDictionarySetValue(Mutable, key, v5);
  }
}

void sub_100030ADC(void *key, const void *a2, CFDictionaryRef *a3)
{
  const __CFNumber *Value;
  __CFDictionary *Mutable;

  if (!*a3)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    *a3 = Mutable;
    goto LABEL_6;
  }
  Value = (const __CFNumber *)CFDictionaryGetValue(*a3, key);
  if (!Value || CFNumberCompare((CFNumberRef)a2, Value, 0) == kCFCompareGreaterThan)
  {
    Mutable = *a3;
LABEL_6:
    CFDictionarySetValue(Mutable, key, a2);
  }
}

void *sub_1000322A4(unsigned int *a1)
{
  size_t v2;
  void *v3;
  void *v4;

  if (!a1)
    return 0;
  v2 = 4 * a1[1] + 224 * a1[1] + 40;
  v3 = malloc_type_malloc(v2, 0xA2812E09uLL);
  v4 = v3;
  if (v3)
    memcpy(v3, a1, v2);
  return v4;
}

_DWORD *sub_10003234C(_DWORD *a1, unsigned int a2)
{
  _DWORD *v4;
  size_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  _DWORD *v10;
  int v11;
  _DWORD *v12;

  if (!a1 && !a2)
    return 0;
  if (a1 && a1[1] >= (signed int)a2)
    return a1;
  v5 = 4 * a2 + 224 * a2 + 40;
  v4 = malloc_type_malloc(v5, 0x9669113DuLL);
  bzero(v4, v5);
  *v4 = 538379777;
  v4[1] = a2;
  if (a1)
  {
    v6 = a1[3];
    v4[3] = v6;
    if (v6 >= 1)
      memcpy(&v4[28 * a2 + 10], &a1[28 * a1[1] + 10], 112 * (int)a1[3]);
    v7 = a1[2];
    v4[2] = v7;
    if (v7 <= 0)
    {
      v8 = v4[1];
      v9 = v8 - a1[1];
    }
    else
    {
      memcpy(v4 + 10, a1 + 10, 112 * (int)a1[2]);
      v8 = v4[1];
      v9 = v8 - a1[1];
      v10 = v4 + 16;
      do
      {
        if (*v10)
          *v10 += v9;
        v10 += 28;
        --v7;
      }
      while (v7);
    }
    v11 = v4[3];
    if (v11 >= 1)
    {
      v12 = &v4[28 * v8 + 16];
      do
      {
        if (*v12)
          *v12 -= v9;
        v12 += 28;
        --v11;
      }
      while (v11);
    }
    sub_1000324FC(v4);
    free(a1);
  }
  else
  {
    *((_QWORD *)v4 + 1) = 0;
  }
  return v4;
}

_DWORD *sub_1000324FC(_DWORD *result)
{
  _DWORD *v1;
  int v2;
  int v3;
  BOOL v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  int v11;

  v1 = result;
  result[4] = 0;
  v2 = result[1];
  if (v2 < 1)
  {
    v6 = 0;
  }
  else
  {
    v3 = result[2];
    v4 = v3 <= 0;
    v5 = v3 > 0;
    if (v4)
      v6 = 0;
    else
      v6 = (uint64_t)(result + 10);
    if ((int)result[3] >= 1)
    {
      v7 = (uint64_t)&result[28 * v2 + 10];
      v8 = 1;
LABEL_10:
      v9 = 0;
      LODWORD(v10) = 0;
      while (1)
      {
        if (v5 && v8)
        {
          if (*(_DWORD *)(v6 + 28) > *(_DWORD *)(v7 + 28))
            goto LABEL_18;
        }
        else if (!v5)
        {
LABEL_18:
          result = (_DWORD *)sub_1000351A0((uint64_t)v1, (char *)v7);
          ++v9;
          v11 = v1[1];
          if (v11 <= v9 || v1[3] <= v9)
            v7 = 0;
          else
            v7 = (uint64_t)&v1[28 * v11 + 10 + 28 * v9];
          goto LABEL_23;
        }
        result = (_DWORD *)sub_1000351A0((uint64_t)v1, (char *)v6);
        v10 = (int)v10 + 1;
        if (v1[1] <= (int)v10 || v1[2] <= (int)v10)
          v6 = 0;
        else
          v6 = (uint64_t)&v1[28 * v10 + 10];
LABEL_23:
        v5 = v6 != 0;
        v8 = v7 != 0;
        if (!(v6 | v7))
          return result;
      }
    }
  }
  v5 = v6 != 0;
  if (v6)
  {
    v8 = 0;
    v7 = 0;
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_100032670(_DWORD *a1, const char *a2, uint64_t a3, char a4, unsigned int a5, _OWORD *a6, unsigned __int8 *a7, int a8)
{
  int v8;
  _DWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  int v16;
  int v17;
  _DWORD *v18;
  int v19;
  uint64_t v20;
  int v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t j;
  int v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t i;
  int v31;
  uint64_t v32;
  const char *ifname;
  unsigned int v34;
  size_t v35;
  _DWORD *v42;

  if (!a1)
    sub_100065AD8(0, (uint64_t)a2, a3);
  v8 = a3;
  v11 = a1 + 3;
  v12 = 3;
  if ((_DWORD)a3 == 2)
    v12 = 2;
  v42 = a1 + 2;
  if ((_DWORD)a3 == 2)
    v13 = a1 + 2;
  else
    v13 = a1 + 3;
  v14 = a1[v12];
  if (v14 <= a1[1] && v14 >= 1)
  {
    for (i = 0; v14 != (_DWORD)i; ++i)
    {
      v31 = a1[1];
      if (v31 <= (int)i || *v13 <= (int)i)
        break;
      if (v8 != 30)
        v31 = 0;
      v32 = i + v31;
      v20 = (uint64_t)&a1[28 * v32 + 10];
      ifname = (const char *)nwi_ifstate_get_ifname(v20);
      if (!strcmp(a2, ifname))
      {
        v34 = a5;
        if (a1[28 * v32 + 17] < a5)
          return 0;
        goto LABEL_44;
      }
    }
  }
  if (v8 == 2)
  {
    v17 = a1[1];
    v16 = a1[2];
    v18 = v42;
    v19 = v16;
  }
  else
  {
    v17 = a1[1];
    v16 = a1[3];
    v19 = v16 + v17;
    v18 = v11;
  }
  if (v16 != v17)
  {
    v21 = v19;
    v20 = (uint64_t)&a1[28 * v19 + 10];
    if (v16 >= 1)
      *(_QWORD *)&a1[28 * v19 - 14] &= ~0x1000uLL;
    *(_OWORD *)&a1[28 * v19 + 30] = 0u;
    *(_OWORD *)&a1[28 * v19 + 34] = 0u;
    *(_OWORD *)&a1[28 * v19 + 22] = 0u;
    *(_OWORD *)&a1[28 * v19 + 26] = 0u;
    *(_OWORD *)&a1[28 * v19 + 14] = 0u;
    *(_OWORD *)&a1[28 * v19 + 18] = 0u;
    *(_OWORD *)v20 = 0u;
    __strlcpy_chk(&a1[28 * v19 + 10], a2, 16, 16);
    v22 = &a1[28 * v21];
    *((_BYTE *)v22 + 72) = v8;
    *((_QWORD *)v22 + 7) |= 0x1000uLL;
    ++*v18;
    v23 = 2;
    if (v8 == 2)
      v23 = 3;
    else
      v11 = v42;
    v24 = a1[v23];
    if (v24 >= 1 && v24 <= a1[1])
    {
      for (j = 0; v24 != (_DWORD)j; ++j)
      {
        v26 = a1[1];
        if (v26 <= (int)j || *v11 <= (int)j)
          break;
        if (v8 != 2)
          v26 = 0;
        v27 = j + v26;
        v28 = (uint64_t)&a1[28 * v27 + 10];
        v29 = (const char *)nwi_ifstate_get_ifname(v28);
        if (!strcmp((const char *)v20, v29))
        {
          a1[28 * v21 + 16] = -1227133513 * ((unint64_t)(v28 - v20) >> 4);
          a1[28 * v27 + 16] = -1227133513 * ((unint64_t)(v20 - v28) >> 4);
          break;
        }
      }
    }
    v34 = a5;
LABEL_44:
    if (a6)
    {
      if (v8 == 30)
      {
        *(_OWORD *)(v20 + 36) = *a6;
        if (!a7)
          goto LABEL_53;
LABEL_49:
        if (a7[1])
        {
          v35 = *a7;
          if ((v35 - 29) >= 0xFFFFFFE4)
            memcpy((void *)(v20 + 64), a7, v35);
          goto LABEL_54;
        }
LABEL_53:
        *(_QWORD *)(v20 + 64) = 0;
        *(_QWORD *)(v20 + 72) = 0;
        *(_DWORD *)(v20 + 88) = 0;
        *(_QWORD *)(v20 + 80) = 0;
LABEL_54:
        *(_DWORD *)(v20 + 60) = a8;
        *(_DWORD *)(v20 + 28) = v34;
        *(_BYTE *)(v20 + 16) = a4;
        return v20;
      }
      if (v8 == 2)
        *(_DWORD *)(v20 + 36) = *(_DWORD *)a6;
    }
    if (!a7)
      goto LABEL_53;
    goto LABEL_49;
  }
  syslog(3, "nwi_state_add_ifstate: full at count %d\n", v17);
  return 0;
}

int *sub_1000329AC(int *a1, int *a2)
{
  unsigned int v4;
  int *v5;
  int v6;
  unsigned int v7;
  int v8;
  __int128 *v9;
  int v10;
  __int128 *v11;
  int v12;
  __int128 *v13;
  int v14;
  __int128 *v15;

  if (a1)
  {
    if (a1[2] <= a1[3])
      v4 = a1[3];
    else
      v4 = a1[2];
    if (!a2)
    {
      if (v4)
      {
        v5 = sub_10003234C(0, v4);
LABEL_20:
        if (a1[2] >= 1)
        {
          v12 = 0;
          v13 = (__int128 *)(a1 + 10);
          do
          {
            sub_1000354C4(v5, v13);
            ++v12;
            v13 += 7;
          }
          while (v12 < a1[2]);
        }
        if (a1[3] >= 1)
        {
          v14 = 0;
          v15 = (__int128 *)&a1[28 * a1[1] + 10];
          do
          {
            sub_1000354C4(v5, v15);
            ++v14;
            v15 += 7;
          }
          while (v14 < a1[3]);
        }
        return v5;
      }
      return 0;
    }
  }
  else
  {
    if (!a2)
      return 0;
    v4 = 0;
  }
  v6 = a2[2];
  if (v6 <= a2[3])
    v6 = a2[3];
  v7 = v6 + v4;
  if (!v7)
    return 0;
  v5 = sub_10003234C(0, v7);
  if (a2[2] >= 1)
  {
    v8 = 0;
    v9 = (__int128 *)(a2 + 10);
    do
    {
      sub_100035280(v5, (uint64_t)a1, v9);
      ++v8;
      v9 += 7;
    }
    while (v8 < a2[2]);
  }
  if (a2[3] >= 1)
  {
    v10 = 0;
    v11 = (__int128 *)&a2[28 * a2[1] + 10];
    do
    {
      sub_100035280(v5, (uint64_t)a1, v11);
      ++v10;
      v11 += 7;
    }
    while (v10 < a2[3]);
  }
  if (a1)
    goto LABEL_20;
  return v5;
}

uint64_t sub_100032B60(uint64_t result, uint64_t a2, _DWORD *a3)
{
  _DWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t *v13;
  const char *ifname;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  const char *v22;
  uint64_t v23;

  if (a2 && a3)
  {
    v5 = (_DWORD *)result;
    v6 = *(_QWORD *)(a2 + 32);
    v23 = a2 + 40;
    if (*(int *)(a2 + 8) >= 1)
    {
      v7 = 0;
      v8 = a2 + 40;
      do
      {
        result = sub_100032D6C(a3, (const char *)v8);
        v9 = v6;
        if (!(_DWORD)result)
        {
          if (!v5 || ((v10 = v5[2], (int)v10 >= 1) ? (v11 = (int)v10 <= v5[1]) : (v11 = 0), !v11))
LABEL_37:
            sub_100065AFC();
          v12 = 0;
          v13 = (uint64_t *)(v5 + 23);
          while (1)
          {
            if (v12 >= (int)v5[1] || v12 >= (int)v5[2])
              goto LABEL_37;
            ifname = (const char *)nwi_ifstate_get_ifname((char *)v13 - 52);
            result = strcmp((const char *)v8, ifname);
            if (!(_DWORD)result)
              break;
            ++v12;
            v13 += 14;
            if (v10 == v12)
              goto LABEL_37;
          }
          v9 = *v13;
        }
        *(_QWORD *)(v8 + 52) = v9;
        ++v7;
        v8 += 112;
      }
      while (v7 < *(_DWORD *)(a2 + 8));
    }
    if (*(int *)(a2 + 12) >= 1)
    {
      v15 = 0;
      v16 = v23 + 112 * *(int *)(a2 + 4);
      do
      {
        result = nwi_ifstate_get_generation(v16);
        if (result != v6)
        {
          result = sub_100032D6C(a3, (const char *)v16);
          v17 = v6;
          if (!(_DWORD)result)
          {
            if (!v5 || (v18 = v5[3], v18 < 1) || v18 > v5[1])
LABEL_38:
              sub_100065B24();
            v19 = 0;
            while (1)
            {
              v20 = v5[1];
              if (v20 <= v19 || v5[3] <= v19)
                goto LABEL_38;
              v21 = v19 + v20;
              v22 = (const char *)nwi_ifstate_get_ifname(&v5[28 * v19 + 10 + 28 * v20]);
              result = strcmp((const char *)v16, v22);
              if (!(_DWORD)result)
                break;
              if (v18 == ++v19)
                goto LABEL_38;
            }
            v17 = *(_QWORD *)&v5[28 * v21 + 23];
          }
          *(_QWORD *)(v16 + 52) = v17;
        }
        ++v15;
        v16 += 112;
      }
      while (v15 < *(_DWORD *)(a2 + 12));
    }
  }
  return result;
}

BOOL sub_100032D6C(_DWORD *a1, const char *a2)
{
  uint64_t v4;
  int v6;
  uint64_t v9;
  _DWORD *v10;
  const char *ifname;
  int i;
  int v13;
  int v14;
  const char *v15;

  if (a1)
  {
    v4 = a1[2];
    if ((int)v4 >= 1 && (int)v4 <= a1[1])
    {
      v9 = 0;
      v10 = a1 + 10;
      while (v9 < (int)a1[1] && v9 < (int)a1[2])
      {
        ifname = (const char *)nwi_ifstate_get_ifname(v10);
        if (!strcmp(a2, ifname))
        {
          if ((*((_BYTE *)v10 + 17) & 0xF) == 0)
            break;
          return 1;
        }
        ++v9;
        v10 += 28;
        if (v4 == v9)
          break;
      }
    }
    v6 = a1[3];
    if (v6 >= 1 && v6 <= a1[1])
    {
      for (i = 0; v6 != i; ++i)
      {
        v13 = a1[1];
        if (v13 <= i || a1[3] <= i)
          break;
        v14 = i + v13;
        v15 = (const char *)nwi_ifstate_get_ifname(&a1[28 * i + 10 + 28 * v13]);
        if (!strcmp(a2, v15))
          return (a1[28 * v14 + 14] & 0xF00) != 0;
      }
    }
  }
  return 0;
}

double sub_100032EC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  CC_SHA256_CTX v6;

  if (a1)
  {
    memset(&v6, 0, sizeof(v6));
    v4 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    CC_SHA256_Init(&v6);
    CC_SHA256_Update(&v6, (const void *)a1, 228 * *(_DWORD *)(a1 + 4) + 40);
    CC_SHA256_Final((unsigned __int8 *)a2, &v6);
    *(_QWORD *)(a1 + 32) = v4;
  }
  else
  {
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_100032F84(int a1, const void *a2, void *a3, size_t a4)
{
  CFTypeID TypeID;
  uint64_t result;
  char v10[128];

  TypeID = CFStringGetTypeID();
  if (!a2
    || CFGetTypeID(a2) != TypeID
    || a1 != 2 && (a1 != 30 || a4 < 0x10)
    || (_SC_cfstring_to_cstring(a2, v10, 128, 1536), result = inet_pton(a1, v10, a3), (_DWORD)result != 1))
  {
    bzero(a3, a4);
    return 0;
  }
  return result;
}

const __CFDictionary *sub_100033060(const __CFDictionary *a1, int a2)
{
  const void **v2;
  const __CFDictionary *result;
  __int16 v4;

  v2 = (const void **)&kSCEntNetIPv6;
  if (a2 == 2)
    v2 = (const void **)&kSCEntNetIPv4;
  result = (const __CFDictionary *)CFDictionaryGetValue(a1, *v2);
  if (result)
  {
    result = (const __CFDictionary *)sub_10003564C(result);
    if (result)
    {
      v4 = *((_WORD *)result + 4);
      if ((v4 & 2) != 0)
        return (const __CFDictionary *)((v4 & 1) == 0);
      else
        return 0;
    }
  }
  return result;
}

uint64_t sub_1000330E8(const __CFDictionary *a1)
{
  uint64_t result;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  char buffer[16];

  result = (uint64_t)CFDictionaryGetValue(a1, kSCEntNetIPv4);
  if (result || (result = (uint64_t)CFDictionaryGetValue(a1, kSCEntNetIPv6)) != 0)
  {
    result = (uint64_t)sub_1000331E4((const __CFDictionary *)result);
    if (result)
    {
      result = CFStringGetCString((CFStringRef)result, buffer, 16, 0x8000100u);
      if ((_DWORD)result)
      {
        result = nwi_state_get_ifstate(qword_10007DC88, buffer);
        if (result)
        {
          v3 = *(_QWORD *)(result + 16);
          if ((v3 & 8) != 0)
          {
            return 1;
          }
          else
          {
            v4 = *(unsigned __int8 *)(result + 32);
            if (v4 == 2)
              v5 = 30;
            else
              v5 = 2;
            if (v5 == v4)
              return (v3 >> 3) & 1;
            v6 = *(_DWORD *)(result + 24);
            if (v6)
            {
              v3 = *(_QWORD *)(result + 112 * v6 + 16);
              return (v3 >> 3) & 1;
            }
            return 0;
          }
        }
      }
    }
  }
  return result;
}

const void *sub_1000331E4(const __CFDictionary *a1)
{
  const __CFDictionary *Value;

  if (a1 && (Value = (const __CFDictionary *)CFDictionaryGetValue(a1, CFSTR("Service"))) != 0)
    return CFDictionaryGetValue(Value, kSCPropInterfaceName);
  else
    return 0;
}

const void *sub_100033270(void *a1)
{
  const __CFDictionary *v1;
  const __CFDictionary *Value;
  const void *v3;
  const void *v4;

  v1 = (const __CFDictionary *)sub_100033308(a1, kSCEntNetIPv4);
  if (!v1)
    return 0;
  Value = (const __CFDictionary *)CFDictionaryGetValue(v1, CFSTR("Service"));
  if (!Value)
    return 0;
  v3 = CFDictionaryGetValue(Value, CFSTR("Hostname"));
  v4 = v3;
  if (v3)
    CFRetain(v3);
  return v4;
}

const void *sub_100033308(void *key, const void *a2)
{
  const __CFDictionary *Value;

  if (qword_10007DCA8
    && (Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_10007DCA8, key)) != 0)
  {
    return CFDictionaryGetValue(Value, a2);
  }
  else
  {
    return 0;
  }
}

BOOL sub_1000333A0(void *a1)
{
  const __CFDictionary *v2;
  const __CFString *v3;
  const __CFString *NetworkInterfaceEntity;
  CFPropertyListRef v5;
  _BOOL8 v6;

  v2 = (const __CFDictionary *)sub_100033308(a1, kSCEntNetIPv4);
  if (!v2)
  {
    v2 = (const __CFDictionary *)sub_100033308(a1, kSCEntNetIPv6);
    if (!v2)
      return 0;
  }
  v3 = (const __CFString *)sub_1000331E4(v2);
  if (!v3)
    return 0;
  NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, v3, kSCEntNetLink);
  v5 = SCDynamicStoreCopyValue((SCDynamicStoreRef)qword_10007DC90, NetworkInterfaceEntity);
  CFRelease(NetworkInterfaceEntity);
  if (!v5)
    return 0;
  v6 = sub_1000356CC(v5);
  CFRelease(v5);
  return v6;
}

void sub_1000334A4()
{
  sub_100033564(0, 0, 0);
  if (qword_10007DC90)
  {
    if (qword_10007DDC0 != -1)
      dispatch_once(&qword_10007DDC0, &stru_100076B20);
    dispatch_async((dispatch_queue_t)qword_10007DDC8, &stru_100076838);
    process_AgentMonitor();
  }
}

void sub_100033564(const void *a1, char *a2, uint64_t a3)
{
  char *v3;
  __CFDictionary *Mutable;
  CFStringRef v7;
  const char *v8;
  CFStringRef v9;
  CFStringRef v10;
  const void *v11;
  unsigned int v12;
  unsigned int v13;
  os_log_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int *v26;
  os_log_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int *v33;
  char v35[16];

  v3 = a2;
  if (a3)
  {
    if (a1 && a2)
    {
      Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      if (*((_DWORD *)v3 + 10))
      {
        v7 = CFStringCreateWithFormat(0, 0, CFSTR("%d.%d.%d.%d"), *((_DWORD *)v3 + 10), BYTE1(*((_DWORD *)v3 + 10)), BYTE2(*((_DWORD *)v3 + 10)), HIBYTE(*((_DWORD *)v3 + 10)));
        CFDictionarySetValue(Mutable, kSCPropNetIPv4Router, v7);
        CFRelease(v7);
      }
      v8 = (const char *)sub_10002D76C(*((_DWORD *)v3 + 4), (uint64_t)v35);
      if (v8)
      {
        v9 = CFStringCreateWithCString(0, v8, 0x600u);
        if (v9)
        {
          v10 = v9;
          CFDictionarySetValue(Mutable, kSCDynamicStorePropNetPrimaryInterface, v9);
          CFRelease(v10);
        }
      }
      CFDictionarySetValue(Mutable, kSCDynamicStorePropNetPrimaryService, a1);
      sub_100035784(a3, (const void *)qword_10007DCB0, Mutable);
      CFRelease(Mutable);
    }
    else
    {
      v11 = (const void *)qword_10007DCB0;
      sub_100035AAC(*(const __CFArray **)(a3 + 8), (const void *)qword_10007DCB0);
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a3 + 16), v11);
    }
  }
  v12 = sub_100035824();
  if (v12 != -1)
  {
    v13 = v12;
    if (v3)
    {
      sub_100035B4C((uint64_t)off_100076918, (int *)v3);
    }
    else
    {
      v3 = (char *)malloc_type_malloc(0x30uLL, 0x9129817AuLL);
      *(_OWORD *)(v3 + 24) = 0u;
      *(_OWORD *)(v3 + 8) = 0u;
      *((_QWORD *)v3 + 5) = 0;
      *(_QWORD *)v3 = 0x100000001;
      *((_QWORD *)v3 + 4) = 0xFFFFFF000000E0;
      *((_DWORD *)v3 + 3) = 24;
      *((_DWORD *)v3 + 4) = sub_10002DD9C();
    }
    if (byte_10007DC9C == 1)
    {
      v14 = (os_log_t)qword_10007DC80;
      if (qword_10007DCB8)
      {
        if (!qword_10007DC80)
        {
          v14 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
          qword_10007DC80 = (uint64_t)v14;
        }
        v15 = _SC_syslog_os_log_mapping(7);
        if (__SC_log_enabled(7, v14, v15))
        {
          v16 = _os_log_pack_size(2);
          v19 = &v35[-((__chkstk_darwin(v16, v17, v18) + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
          v20 = __error();
          *(_WORD *)_os_log_pack_fill(v19, v16, *v20, &_mh_execute_header, "Old Routes = ") = 0;
          __SC_log_send(7, v14, v15, v19);
        }
        sub_100035978((unsigned int *)qword_10007DCB8);
      }
      else
      {
        if (!qword_10007DC80)
        {
          v14 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
          qword_10007DC80 = (uint64_t)v14;
        }
        v21 = _SC_syslog_os_log_mapping(7);
        if (__SC_log_enabled(7, v14, v21))
        {
          v22 = _os_log_pack_size(2);
          v25 = &v35[-((__chkstk_darwin(v22, v23, v24) + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
          v26 = __error();
          *(_WORD *)_os_log_pack_fill(v25, v22, *v26, &_mh_execute_header, "Old Routes = <none>") = 0;
          __SC_log_send(7, v14, v21, v25);
        }
      }
      v27 = (os_log_t)qword_10007DC80;
      if (!qword_10007DC80)
      {
        v27 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
        qword_10007DC80 = (uint64_t)v27;
      }
      v28 = _SC_syslog_os_log_mapping(7);
      if (__SC_log_enabled(7, v27, v28))
      {
        v29 = _os_log_pack_size(2);
        v32 = &v35[-((__chkstk_darwin(v29, v30, v31) + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
        v33 = __error();
        *(_WORD *)_os_log_pack_fill(v32, v29, *v33, &_mh_execute_header, "New Routes = ") = 0;
        __SC_log_send(7, v27, v28, v32);
      }
      sub_100035978((unsigned int *)v3);
    }
    sub_100036B60((uint64_t (**)(_QWORD))off_100076918, qword_10007DCB8, (int *)v3, v13);
    close(v13);
  }
  if (qword_10007DCB8)
    free((void *)qword_10007DCB8);
  qword_10007DCB8 = (uint64_t)v3;
}

void sub_100033A00(id a1)
{
  sub_100033A44();
}

void sub_100033A44()
{
  const __CFArray *v0;
  const __CFArray *Mutable;
  CFStringRef NetworkServiceEntity;
  CFStringRef v3;
  CFStringRef v4;
  CFStringRef NetworkInterfaceEntity;
  const __SCDynamicStore *v6;
  os_log_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  const char *v21;
  void *values[3];

  values[0] = (void *)qword_10007DCC8;
  values[1] = (void *)qword_10007DCD0;
  values[2] = (void *)qword_10007DCD8;
  v0 = CFArrayCreate(0, (const void **)values, 3, &kCFTypeArrayCallBacks);
  Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  sub_1000374E8(kSCCompAnyRegex, Mutable);
  NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainSetup, kSCCompAnyRegex, kSCEntNetPPP);
  CFArrayAppendValue(Mutable, NetworkServiceEntity);
  CFRelease(NetworkServiceEntity);
  v3 = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainSetup, kSCCompAnyRegex, kSCEntNetVPN);
  CFArrayAppendValue(Mutable, v3);
  CFRelease(v3);
  v4 = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainSetup, kSCCompAnyRegex, kSCEntNetInterface);
  CFArrayAppendValue(Mutable, v4);
  CFRelease(v4);
  sub_10003766C(kSCCompAnyRegex, Mutable);
  sub_10004A0BC(Mutable);
  NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, kSCCompAnyRegex, kSCEntNetInterfaceDelegation);
  CFArrayAppendValue(Mutable, NetworkInterfaceEntity);
  CFRelease(NetworkInterfaceEntity);
  if (SCDynamicStoreSetNotificationKeys((SCDynamicStoreRef)qword_10007DC90, v0, Mutable))
  {
    v6 = (const __SCDynamicStore *)qword_10007DC90;
    if (qword_10007DDC0 != -1)
      dispatch_once(&qword_10007DDC0, &stru_100076B20);
    if (SCDynamicStoreSetDispatchQueue(v6, (dispatch_queue_t)qword_10007DDC8))
    {
      sub_1000371F8(v0, Mutable);
      goto LABEL_15;
    }
    v7 = (os_log_t)qword_10007DC80;
    if (!qword_10007DC80)
    {
      v7 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_10007DC80 = (uint64_t)v7;
    }
    v8 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v7, v8))
    {
      v15 = _os_log_pack_size(12);
      v12 = (char *)values - ((__chkstk_darwin(v15, v16, v17) + 15) & 0xFFFFFFFFFFFFFFF0);
      v18 = *__error();
      v14 = _os_log_pack_fill(v12, v15, v18, &_mh_execute_header, "SCDynamicStoreSetDispatchQueue() failed: %s");
      goto LABEL_14;
    }
  }
  else
  {
    v7 = (os_log_t)qword_10007DC80;
    if (!qword_10007DC80)
    {
      v7 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_10007DC80 = (uint64_t)v7;
    }
    v8 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v7, v8))
    {
      v9 = _os_log_pack_size(12);
      v12 = (char *)values - ((__chkstk_darwin(v9, v10, v11) + 15) & 0xFFFFFFFFFFFFFFF0);
      v13 = *__error();
      v14 = _os_log_pack_fill(v12, v9, v13, &_mh_execute_header, "SCDynamicStoreSetNotificationKeys() failed: %s");
LABEL_14:
      v19 = v14;
      v20 = SCError();
      v21 = SCErrorString(v20);
      *(_DWORD *)v19 = 136315138;
      *(_QWORD *)(v19 + 4) = v21;
      __SC_log_send(3, v7, v8, v12);
    }
  }
LABEL_15:
  CFRelease(v0);
  CFRelease(Mutable);
}

void sub_100033DF0(CFBundleRef bundle, int a2)
{
  NSObject *v4;
  const __CFDictionary *InfoDictionary;
  const __CFBoolean *Value;
  CFTypeID TypeID;
  int v8;

  if (qword_10007DDC0 != -1)
    dispatch_once(&qword_10007DDC0, &stru_100076B20);
  v4 = qword_10007DDC8;
  InfoDictionary = CFBundleGetInfoDictionary(bundle);
  if (InfoDictionary)
  {
    Value = (const __CFBoolean *)CFDictionaryGetValue(InfoDictionary, CFSTR("AppendStateArrayToSetupArray"));
    TypeID = CFBooleanGetTypeID();
    if (Value && CFGetTypeID(Value) == TypeID)
      v8 = CFBooleanGetValue(Value);
    else
      v8 = 0;
    dword_10007DC98 = v8;
  }
  if (a2)
  {
    byte_10007DC9C = 1;
    byte_10007DC9D = 1;
  }
  if (qword_10007DDC0 != -1)
    dispatch_once(&qword_10007DDC0, &stru_100076B20);
  sub_100056CA0(qword_10007DDC8, (uint64_t)sub_10004541C);
  sub_10004541C();
  sub_10002C1BC((uint64_t)bundle, &stru_100076878);
  sub_100046430((uint64_t)bundle, &stru_1000768D8);
  sub_100034AA0();
  sub_100028C74(bundle);
  sub_100048314(bundle);
  sub_100034BF8();
  if (qword_10007DC90)
    sub_100028944((uint64_t)v4, (uint64_t)sub_10003511C);
  sub_1000484A8(v4);
  if (&_wd_endpoint_add_queue)
    wd_endpoint_add_queue(v4);
}

void sub_100033F9C(id a1, unsigned __int8 a2)
{
  _QWORD v3[4];
  unsigned __int8 v4;

  if (qword_10007DDD0 != -1)
    dispatch_once(&qword_10007DDD0, &stru_100076B60);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 0x40000000;
  v3[2] = sub_100034054;
  v3[3] = &unk_100076898;
  v4 = a2;
  dispatch_async((dispatch_queue_t)qword_10007DDD8, v3);
}

void sub_100034054(uint64_t a1)
{
  byte_10007D998 = *(_BYTE *)(a1 + 32);
  if (!byte_10007D998 || (dword_10007DCA0 & 2) != 0)
    sub_100034250();
  else
    sub_1000340DC(2);
}

void sub_1000340DC(int a1)
{
  int v2;
  NSObject *v3;
  dispatch_time_t v4;

  if (qword_10007DDD0 != -1)
    dispatch_once(&qword_10007DDD0, &stru_100076B60);
  dispatch_assert_queue_V2((dispatch_queue_t)qword_10007DDD8);
  v2 = dword_10007DCA0;
  if (!dword_10007DCA0)
  {
    gettimeofday((timeval *)&qword_10007DDE0, 0);
    v2 = dword_10007DCA0;
  }
  dword_10007DCA0 = v2 | a1;
  if (qword_10007DDF0)
  {
    dispatch_source_cancel((dispatch_source_t)qword_10007DDF0);
    dispatch_release((dispatch_object_t)qword_10007DDF0);
    qword_10007DDF0 = 0;
    byte_10007DDF8 = 0;
  }
  if (!byte_10007D998 || !byte_10007D999)
  {
    if (qword_10007DDD0 != -1)
      dispatch_once(&qword_10007DDD0, &stru_100076B60);
    qword_10007DDF0 = (uint64_t)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)qword_10007DDD8);
    dispatch_source_set_event_handler((dispatch_source_t)qword_10007DDF0, &stru_100076BA0);
    v3 = qword_10007DDF0;
    v4 = dispatch_time(0, 5000000000);
    dispatch_source_set_timer(v3, v4, 0xFFFFFFFFFFFFFFFFLL, 0x989680uLL);
    dispatch_resume((dispatch_object_t)qword_10007DDF0);
  }
  sub_100034250();
}

void sub_100034250()
{
  __darwin_time_t tv_sec;
  uint64_t v1;
  int v2;
  int v3;
  os_log_t v4;
  uint64_t v5;
  __darwin_time_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  const char *v13;
  BOOL v14;
  int v15;
  char v16;
  uint32_t v17;
  uint32_t v18;
  os_log_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int *v25;
  _DWORD *v26;
  uint32_t v27;
  uint32_t v28;
  os_log_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int *v35;
  _DWORD *v36;
  uint32_t v37;
  uint32_t v38;
  os_log_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  int *v45;
  _DWORD *v46;
  unsigned int v47;
  uint32_t v48;
  uint32_t v49;
  os_log_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  int *v56;
  _DWORD *v57;
  os_log_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  int *v64;
  uint64_t v65;
  const char *v66;
  const char *v67;
  const char *v68;
  timeval v69;
  uint64_t v70;

  if (qword_10007DDD0 != -1)
    dispatch_once(&qword_10007DDD0, &stru_100076B60);
  dispatch_assert_queue_V2((dispatch_queue_t)qword_10007DDD8);
  if (dword_10007DCA0)
  {
    if ((byte_10007DDF8 & 1) != 0 || byte_10007D998 && byte_10007D999)
    {
      if (qword_10007DDF0)
      {
        dispatch_source_cancel((dispatch_source_t)qword_10007DDF0);
        dispatch_release((dispatch_object_t)qword_10007DDF0);
        qword_10007DDF0 = 0;
        byte_10007DDF8 = 0;
      }
      v69.tv_sec = 0;
      *(_QWORD *)&v69.tv_usec = 0;
      gettimeofday(&v69, 0);
      tv_sec = v69.tv_sec;
      v1 = qword_10007DDE0;
      v2 = v69.tv_usec - dword_10007DDE8;
      if (v69.tv_usec >= dword_10007DDE8)
        v3 = v69.tv_usec - dword_10007DDE8;
      else
        v3 = v69.tv_usec - dword_10007DDE8 + 1000000;
      v4 = (os_log_t)qword_10007DC80;
      if (!qword_10007DC80)
      {
        v4 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
        qword_10007DC80 = (uint64_t)v4;
      }
      v5 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v4, v5))
      {
        v6 = tv_sec - v1 + (v2 >> 31);
        v7 = _os_log_pack_size(34);
        v10 = (char *)&v68 - ((__chkstk_darwin(v7, v8, v9) + 15) & 0xFFFFFFFFFFFFFFF0);
        v11 = __error();
        v12 = _os_log_pack_fill(v10, v7, *v11, &_mh_execute_header, "Post \"com.apple.system.config.network_change\" (%s: %ld.%6.6d: 0x%x)", v68, v69.tv_sec, v69.tv_usec, v70);
        v13 = "delayed";
        v14 = byte_10007DDF8 == 0;
        v15 = dword_10007DCA0;
        *(_DWORD *)v12 = 136315906;
        if (!v14)
          v13 = "timeout";
        *(_QWORD *)(v12 + 4) = v13;
        *(_WORD *)(v12 + 12) = 2048;
        *(_QWORD *)(v12 + 14) = v6;
        *(_WORD *)(v12 + 22) = 1024;
        *(_DWORD *)(v12 + 24) = v3;
        *(_WORD *)(v12 + 28) = 1024;
        *(_DWORD *)(v12 + 30) = v15;
        __SC_log_send(6, v4, v5, v10);
      }
      v16 = dword_10007DCA0;
      if ((dword_10007DCA0 & 2) != 0)
      {
        process_AgentMonitor_DNS();
        v16 = dword_10007DCA0;
      }
      if ((v16 & 1) != 0)
      {
        v17 = notify_post("com.apple.system.config.network_change.nwi");
        if (v17)
        {
          v18 = v17;
          v19 = (os_log_t)qword_10007DC80;
          if (!qword_10007DC80)
          {
            v19 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
            qword_10007DC80 = (uint64_t)v19;
          }
          v20 = _SC_syslog_os_log_mapping(3);
          if (__SC_log_enabled(3, v19, v20))
          {
            v21 = _os_log_pack_size(8);
            v24 = (char *)&v68 - ((__chkstk_darwin(v21, v22, v23) + 15) & 0xFFFFFFFFFFFFFFF0);
            v25 = __error();
            v26 = (_DWORD *)_os_log_pack_fill(v24, v21, *v25, &_mh_execute_header, "notify_post(com.apple.system.config.network_change.nwi) failed: error=%d", (_DWORD)v68);
            *v26 = 67109120;
            v26[1] = v18;
            __SC_log_send(3, v19, v20, v24);
          }
        }
      }
      if ((dword_10007DCA0 & 2) != 0)
      {
        v27 = notify_post("com.apple.system.config.network_change.dns");
        if (v27)
        {
          v28 = v27;
          v29 = (os_log_t)qword_10007DC80;
          if (!qword_10007DC80)
          {
            v29 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
            qword_10007DC80 = (uint64_t)v29;
          }
          v30 = _SC_syslog_os_log_mapping(3);
          if (__SC_log_enabled(3, v29, v30))
          {
            v31 = _os_log_pack_size(8);
            v34 = (char *)&v68 - ((__chkstk_darwin(v31, v32, v33) + 15) & 0xFFFFFFFFFFFFFFF0);
            v35 = __error();
            v36 = (_DWORD *)_os_log_pack_fill(v34, v31, *v35, &_mh_execute_header, "notify_post(com.apple.system.config.network_change.dns) failed: error=%d", (_DWORD)v68);
            *v36 = 67109120;
            v36[1] = v28;
            __SC_log_send(3, v29, v30, v34);
          }
        }
      }
      if ((dword_10007DCA0 & 4) != 0)
      {
        process_AgentMonitor_Proxy();
        v37 = notify_post("com.apple.system.config.proxy_change");
        if (v37)
        {
          v38 = v37;
          v39 = (os_log_t)qword_10007DC80;
          if (!qword_10007DC80)
          {
            v39 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
            qword_10007DC80 = (uint64_t)v39;
          }
          v40 = _SC_syslog_os_log_mapping(3);
          if (__SC_log_enabled(3, v39, v40))
          {
            v41 = _os_log_pack_size(8);
            v44 = (char *)&v68 - ((__chkstk_darwin(v41, v42, v43) + 15) & 0xFFFFFFFFFFFFFFF0);
            v45 = __error();
            v46 = (_DWORD *)_os_log_pack_fill(v44, v41, *v45, &_mh_execute_header, "notify_post(com.apple.system.config.proxy_change) failed: error=%d", (_DWORD)v68);
            *v46 = 67109120;
            v46[1] = v38;
            __SC_log_send(3, v39, v40, v44);
          }
        }
      }
      v47 = dword_10007DCA0;
      if ((dword_10007DCA0 & 0x10) != 0)
      {
        if (qword_10007DD38 || qword_10007DD40 || qword_10007DD48)
        {
          sub_10004A14C((CFTypeRef)qword_10007DD38, (CFTypeRef)qword_10007DD40, (CFTypeRef)qword_10007DD48);
          if (qword_10007DD38)
          {
            CFRelease((CFTypeRef)qword_10007DD38);
            qword_10007DD38 = 0;
          }
          if (qword_10007DD40)
          {
            CFRelease((CFTypeRef)qword_10007DD40);
            qword_10007DD40 = 0;
          }
          if (qword_10007DD48)
          {
            CFRelease((CFTypeRef)qword_10007DD48);
            qword_10007DD48 = 0;
          }
        }
        v47 = dword_10007DCA0 & 0xFFFFFFEF;
        dword_10007DCA0 &= ~0x10u;
      }
      if (v47)
      {
        v48 = notify_post("com.apple.system.config.network_change");
        if (v48)
        {
          v49 = v48;
          v50 = (os_log_t)qword_10007DC80;
          if (!qword_10007DC80)
          {
            v50 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
            qword_10007DC80 = (uint64_t)v50;
          }
          v51 = _SC_syslog_os_log_mapping(3);
          if (__SC_log_enabled(3, v50, v51))
          {
            v52 = _os_log_pack_size(8);
            v55 = (char *)&v68 - ((__chkstk_darwin(v52, v53, v54) + 15) & 0xFFFFFFFFFFFFFFF0);
            v56 = __error();
            v57 = (_DWORD *)_os_log_pack_fill(v55, v52, *v56, &_mh_execute_header, "notify_post(com.apple.system.config.network_change) failed: error=%d", (_DWORD)v68);
            *v57 = 67109120;
            v57[1] = v49;
            __SC_log_send(3, v50, v51, v55);
          }
        }
      }
      dword_10007DCA0 = 0;
    }
    else
    {
      v58 = (os_log_t)qword_10007DC80;
      if (!qword_10007DC80)
      {
        v58 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
        qword_10007DC80 = (uint64_t)v58;
      }
      v59 = _SC_syslog_os_log_mapping(7);
      if (__SC_log_enabled(7, v58, v59))
      {
        v60 = _os_log_pack_size(22);
        v63 = (char *)&v68 - ((__chkstk_darwin(v60, v61, v62) + 15) & 0xFFFFFFFFFFFFFFF0);
        v64 = __error();
        v65 = _os_log_pack_fill(v63, v60, *v64, &_mh_execute_header, "Defer \"com.apple.system.config.network_change\" (%s, %s)", v68, (const char *)v69.tv_sec);
        if (byte_10007D998)
          v66 = "DNS";
        else
          v66 = "!DNS";
        v67 = "nwi";
        if (!byte_10007D999)
          v67 = "!nwi";
        *(_DWORD *)v65 = 136315394;
        *(_QWORD *)(v65 + 4) = v66;
        *(_WORD *)(v65 + 12) = 2080;
        *(_QWORD *)(v65 + 14) = v67;
        __SC_log_send(7, v58, v59, v63);
      }
    }
  }
}

void sub_100034998(id a1, unsigned __int8 a2)
{
  _QWORD v3[4];
  unsigned __int8 v4;

  if (qword_10007DDD0 != -1)
    dispatch_once(&qword_10007DDD0, &stru_100076B60);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 0x40000000;
  v3[2] = sub_100034A50;
  v3[3] = &unk_1000768F8;
  v4 = a2;
  dispatch_async((dispatch_queue_t)qword_10007DDD8, v3);
}

void sub_100034A50(uint64_t a1)
{
  byte_10007D999 = *(_BYTE *)(a1 + 32);
  sub_100034250();
}

uint64_t sub_100034AA0()
{
  uint64_t result;
  os_log_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;

  if (qword_10007DDC0 != -1)
    dispatch_once(&qword_10007DDC0, &stru_100076B20);
  result = sub_10002E4B8(qword_10007DDC8, &stru_100076BE0);
  if (!(_DWORD)result)
  {
    v1 = (os_log_t)qword_10007DC80;
    if (!qword_10007DC80)
    {
      v1 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_10007DC80 = (uint64_t)v1;
    }
    v2 = _SC_syslog_os_log_mapping(3);
    result = __SC_log_enabled(3, v1, v2);
    if ((_DWORD)result)
    {
      v3 = _os_log_pack_size(2);
      v6 = (char *)&v8 - ((__chkstk_darwin(v3, v4, v5) + 15) & 0xFFFFFFFFFFFFFFF0);
      v7 = __error();
      *(_WORD *)_os_log_pack_fill(v6, v3, *v7, &_mh_execute_header, "IPMonitorControlServerStart failed") = 0;
      return __SC_log_send(3, v1, v2, v6);
    }
  }
  return result;
}

char *sub_100034BF8()
{
  char *result;
  _BOOL4 v1;
  os_log_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  int v10;
  const char *v11;
  os_log_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  int v22;
  const char *v23;
  size_t v24;
  int v25[2];

  HIDWORD(v23) = 0;
  *(_QWORD *)v25 = 0x2800000001;
  v24 = 4;
  sysctl(v25, 2u, (char *)&v23 + 4, &v24, 0, 0);
  if (HIDWORD(v23))
  {
    byte_10007DCC0 = 1;
  }
  else
  {
    if (sub_10004588C())
    {
      if (qword_10007DE00 != -1)
        dispatch_once(&qword_10007DE00, &stru_100076C20);
      v1 = (byte_10007DDFC & 1) == 0;
    }
    else
    {
      v1 = 1;
    }
    v12 = (os_log_t)qword_10007DC80;
    if (!qword_10007DC80)
    {
      v12 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_10007DC80 = (uint64_t)v12;
    }
    v13 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v12, v13))
    {
      v14 = _os_log_pack_size(12);
      v17 = (char *)&v23 - ((__chkstk_darwin(v14, v15, v16) + 15) & 0xFFFFFFFFFFFFFFF0);
      v18 = __error();
      v19 = _os_log_pack_fill(v17, v14, *v18, &_mh_execute_header, "%sflushing IPv4 routes", v23);
      v20 = "";
      if (!v1)
        v20 = "not ";
      *(_DWORD *)v19 = 136315138;
      *(_QWORD *)(v19 + 4) = v20;
      __SC_log_send(5, v12, v13, v17);
    }
    if (v1)
    {
      v21 = sub_100035824();
      if ((_DWORD)v21 != -1)
      {
        v22 = v21;
        sub_100045DF8(v21);
        close(v22);
      }
    }
  }
  qword_10007DC90 = (uint64_t)SCDynamicStoreCreate(0, CFSTR("IPMonitor"), (SCDynamicStoreCallBack)sub_100045844, 0);
  if (qword_10007DC90)
  {
    qword_10007DCB0 = (uint64_t)SCDynamicStoreKeyCreateNetworkGlobalEntity(0, kSCDynamicStoreDomainState, kSCEntNetIPv4);
    qword_10007DD68 = (uint64_t)SCDynamicStoreKeyCreateNetworkGlobalEntity(0, kSCDynamicStoreDomainState, kSCEntNetIPv6);
    qword_10007DDA0 = (uint64_t)SCDynamicStoreKeyCreateNetworkGlobalEntity(0, kSCDynamicStoreDomainState, kSCEntNetDNS);
    qword_10007DDB8 = (uint64_t)SCDynamicStoreKeyCreateNetworkGlobalEntity(0, kSCDynamicStoreDomainState, kSCEntNetProxies);
    qword_10007DCC8 = (uint64_t)SCDynamicStoreKeyCreateNetworkGlobalEntity(0, kSCDynamicStoreDomainSetup, kSCEntNetIPv4);
    qword_10007DCF8 = (uint64_t)SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainState, &stru_100077E20, 0);
    qword_10007DD00 = (uint64_t)SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainSetup, &stru_100077E20, 0);
    qword_10007DCF0 = (uint64_t)SCDynamicStoreKeyCreateNetworkInterface(0, kSCDynamicStoreDomainState);
    qword_10007DCA8 = (uint64_t)CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    qword_10007DD28 = (uint64_t)CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    qword_10007DD30 = (uint64_t)CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    qword_10007DCD8 = (uint64_t)SCDynamicStoreKeyCreate(0, CFSTR("%@/%@/%@"), kSCDynamicStoreDomainState, kSCCompNetwork, CFSTR("MulticastDNS"));
    qword_10007DCD0 = (uint64_t)SCDynamicStoreKeyCreate(0, CFSTR("%@/%@/%@"), kSCDynamicStoreDomainState, kSCCompNetwork, CFSTR("PrivateDNS"));
    sub_100025A34(0, 0, 0, 0, 0, 0);
    SCDynamicStoreRemoveValue((SCDynamicStoreRef)qword_10007DC90, (CFStringRef)qword_10007DDA0);
    qword_10007DE08 = (uint64_t)dispatch_queue_create("com.apple.SystemConfiguration.IPMonitor.proxy", 0);
    return _scprefs_observer_watch(2, "com.apple.SystemConfiguration.plist", qword_10007DE08, &stru_100076C60);
  }
  else
  {
    v2 = (os_log_t)qword_10007DC80;
    if (!qword_10007DC80)
    {
      v2 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_10007DC80 = (uint64_t)v2;
    }
    v3 = _SC_syslog_os_log_mapping(3);
    result = (char *)__SC_log_enabled(3, v2, v3);
    if ((_DWORD)result)
    {
      v4 = _os_log_pack_size(12);
      v7 = (char *)&v23 - ((__chkstk_darwin(v4, v5, v6) + 15) & 0xFFFFFFFFFFFFFFF0);
      v8 = __error();
      v9 = _os_log_pack_fill(v7, v4, *v8, &_mh_execute_header, "IPMonitor ip_plugin_init SCDynamicStoreCreate failed: %s", v23);
      v10 = SCError();
      v11 = SCErrorString(v10);
      *(_DWORD *)v9 = 136315138;
      *(_QWORD *)(v9 + 4) = v11;
      return (char *)__SC_log_send(3, v2, v3, v7);
    }
  }
  return result;
}

void sub_10003511C()
{
  const __CFArray *v0;

  v0 = CFArrayCreate(0, (const void **)&off_100076C80, 1, &kCFTypeArrayCallBacks);
  sub_100037800((const __SCDynamicStore *)qword_10007DC90, v0, 0);
  CFRelease(v0);
}

uint64_t sub_1000351A0(uint64_t result, char *__s2)
{
  uint64_t v2;
  int v3;
  int v4;
  int *v6;

  if ((__s2[16] & 0x20) == 0)
  {
    v2 = result;
    v3 = *(_DWORD *)(result + 16);
    v4 = *(_DWORD *)(result + 4);
    if (v3 < v4)
    {
      v6 = (int *)(result + 224 * v4 + 40);
      if (v3 < 1)
      {
LABEL_6:
        *v6 = -1227133513 * ((unint64_t)&__s2[-v2 - 40] >> 4);
        ++*(_DWORD *)(v2 + 16);
      }
      else
      {
        while (1)
        {
          result = strcmp((const char *)(v2 + 40 + 112 * *v6), __s2);
          if (!(_DWORD)result)
            break;
          ++v6;
          if (!--v3)
            goto LABEL_6;
        }
      }
    }
  }
  return result;
}

uint64_t sub_100035280(_DWORD *a1, uint64_t a2, __int128 *a3)
{
  int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  const char *v12;
  uint64_t i;
  int v14;
  uint64_t v15;
  const char *ifname;
  _DWORD *v17;
  int v18;
  int v19;
  _DWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _DWORD *v26;
  unint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _DWORD *v31;
  unsigned int v33;
  unsigned int v34;
  BOOL v35;

  v6 = *((unsigned __int8 *)a3 + 32);
  result = nwi_ifstate_get_ifname(a3);
  if (a2)
  {
    v10 = v6 == 2 ? 8 : 12;
    v11 = *(_DWORD *)(a2 + v10);
    if (v11 <= *(_DWORD *)(a2 + 4) && v11 >= 1)
    {
      v12 = (const char *)result;
      for (i = 0; v11 != (_DWORD)i; ++i)
      {
        v14 = *(_DWORD *)(a2 + 4);
        if (v14 <= (int)i || *(_DWORD *)(a2 + v10) <= (int)i)
          break;
        if (v6 != 30)
          v14 = 0;
        v15 = a2 + 112 * (i + v14) + 40;
        ifname = (const char *)nwi_ifstate_get_ifname(v15);
        result = strcmp(v12, ifname);
        if (!(_DWORD)result)
          goto LABEL_15;
      }
    }
  }
  v15 = 0;
LABEL_15:
  if (!a1)
    sub_100065AD8(result, v8, v9);
  if (*((_BYTE *)a3 + 32) == 2)
  {
    v17 = a1 + 2;
    v18 = a1[2];
  }
  else
  {
    v17 = a1 + 3;
    v18 = a1[3] + a1[1];
  }
  v19 = v18;
  v20 = &a1[28 * v18];
  v21 = a3[3];
  v22 = a3[4];
  v23 = a3[5];
  *(_OWORD *)(v20 + 34) = a3[6];
  *(_OWORD *)(v20 + 30) = v23;
  v24 = *a3;
  v25 = a3[1];
  *(_OWORD *)(v20 + 18) = a3[2];
  *(_OWORD *)(v20 + 14) = v25;
  *(_OWORD *)(v20 + 10) = v24;
  *(_OWORD *)(v20 + 26) = v22;
  *(_OWORD *)(v20 + 22) = v21;
  ++*v17;
  if (v15)
  {
    v26 = &a1[28 * v19];
    v29 = *((_QWORD *)v26 + 7);
    v27 = (unint64_t *)(v26 + 14);
    v28 = v29;
    if (v29 != *(_BYTE *)(v15 + 16))
    {
LABEL_21:
      v30 = v28 & 0xFFFFFFFFFFFFF0FFLL | 0x300;
LABEL_22:
      *v27 = v30;
      return result;
    }
    v31 = &a1[28 * v19 + 19];
    if (*(_BYTE *)(v15 + 32) == 2)
    {
      if (*(_DWORD *)(v15 + 36) != *v31)
        goto LABEL_21;
    }
    else if (*(_QWORD *)(v15 + 36) != *(_QWORD *)v31 || *(_QWORD *)(v15 + 44) != *(_QWORD *)&a1[28 * v19 + 21])
    {
      goto LABEL_21;
    }
    v33 = *(_DWORD *)(v15 + 28);
    v34 = a1[28 * v19 + 17];
    v35 = v33 > v34;
    if (v33 >= v34)
    {
      v30 = v28 & 0xFFFFFFFFFFFFF0FFLL;
      if (v35)
        v30 |= 0x400uLL;
      goto LABEL_22;
    }
    *v27 = v28 & 0xFFFFFFFFFFFFF0FFLL | 0x500;
  }
  else
  {
    *(_QWORD *)&a1[28 * v19 + 14] = *(_QWORD *)&a1[28 * v19 + 14] & 0xFFFFFFFFFFFFF0FFLL | 0x100;
  }
  return result;
}

uint64_t sub_1000354C4(int *a1, __int128 *a2)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  int v13;
  int *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  const char *v20;
  uint64_t i;
  int v22;
  const char *ifname;

  v4 = *((unsigned __int8 *)a2 + 32);
  result = nwi_ifstate_get_ifname(a2);
  if (!a1)
    sub_100065AD8(result, v6, v7);
  v8 = a1 + 2;
  v9 = 3;
  if (v4 == 2)
  {
    v9 = 2;
    v10 = a1 + 2;
  }
  else
  {
    v10 = a1 + 3;
  }
  v11 = a1[v9];
  if (v11 <= a1[1] && v11 >= 1)
  {
    v20 = (const char *)result;
    for (i = 0; v11 != (_DWORD)i; ++i)
    {
      v22 = a1[1];
      if (v22 <= (int)i || *v10 <= (int)i)
        break;
      if (v4 != 30)
        v22 = 0;
      ifname = (const char *)nwi_ifstate_get_ifname(&a1[28 * i + 10 + 28 * v22]);
      result = strcmp(v20, ifname);
      if (!(_DWORD)result)
        return result;
    }
  }
  if (*((_BYTE *)a2 + 32) == 2)
  {
    v13 = *v8;
  }
  else
  {
    v13 = a1[3] + a1[1];
    v8 = a1 + 3;
  }
  v14 = &a1[28 * v13];
  v15 = a2[3];
  v16 = a2[4];
  v17 = a2[5];
  *(_OWORD *)(v14 + 34) = a2[6];
  *(_OWORD *)(v14 + 30) = v17;
  v18 = a2[2];
  v19 = *a2;
  *(_OWORD *)(v14 + 14) = a2[1];
  *(_OWORD *)(v14 + 18) = v18;
  *(_OWORD *)(v14 + 10) = v19;
  *(_OWORD *)(v14 + 26) = v16;
  *(_OWORD *)(v14 + 22) = v15;
  ++*v8;
  *((_QWORD *)v14 + 7) = *((_QWORD *)v14 + 7) & 0xFFFFFFFFFFFFF0FFLL | 0x200;
  return result;
}

const UInt8 *sub_10003564C(const __CFDictionary *a1)
{
  const __CFData *Value;

  if (a1 && (Value = (const __CFData *)CFDictionaryGetValue(a1, CFSTR("Routes"))) != 0)
    return CFDataGetBytePtr(Value);
  else
    return 0;
}

BOOL sub_1000356CC(const void *a1)
{
  CFTypeID TypeID;
  const __CFBoolean *Value;
  CFTypeID v4;

  TypeID = CFDictionaryGetTypeID();
  if (a1
    && CFGetTypeID(a1) == TypeID
    && (Value = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)a1, kSCPropNetLinkExpensive),
        v4 = CFBooleanGetTypeID(),
        Value)
    && CFGetTypeID(Value) == v4)
  {
    return CFBooleanGetValue(Value) != 0;
  }
  else
  {
    return 0;
  }
}

void sub_100035784(uint64_t a1, const void *a2, const void *a3)
{
  const __CFArray *v6;
  CFIndex FirstIndexOfValue;
  CFRange v8;

  v6 = *(const __CFArray **)(a1 + 8);
  v8.length = CFArrayGetCount(v6);
  v8.location = 0;
  FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v6, v8, a2);
  if (FirstIndexOfValue != -1)
    CFArrayRemoveValueAtIndex(v6, FirstIndexOfValue);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), a2, a3);
}

uint64_t sub_100035824()
{
  uint64_t v0;
  os_log_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int *v5;
  uint64_t v6;
  int *v7;
  char *v8;
  const char *v10;

  v0 = socket(17, 3, 17);
  if ((_DWORD)v0 == -1)
  {
    v1 = (os_log_t)qword_10007DC80;
    if (!qword_10007DC80)
    {
      v1 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_10007DC80 = (uint64_t)v1;
    }
    v2 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v1, v2))
    {
      v3 = _os_log_pack_size(12);
      v4 = (char *)&v10 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
      v5 = __error();
      v6 = _os_log_pack_fill(v4, v3, *v5, &_mh_execute_header, "socket() failed: %s", v10);
      v7 = __error();
      v8 = strerror(*v7);
      *(_DWORD *)v6 = 136315138;
      *(_QWORD *)(v6 + 4) = v8;
      __SC_log_send(3, v1, v2, v4);
    }
  }
  return v0;
}

void sub_100035978(unsigned int *a1)
{
  __CFString *v1;
  os_log_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;

  v1 = sub_100036A74(a1);
  v2 = (os_log_t)qword_10007DC80;
  if (!qword_10007DC80)
  {
    v2 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    qword_10007DC80 = (uint64_t)v2;
  }
  v3 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v2, v3))
  {
    v4 = _os_log_pack_size(12);
    v7 = (char *)&v10 - ((__chkstk_darwin(v4, v5, v6) + 15) & 0xFFFFFFFFFFFFFFF0);
    v8 = __error();
    v9 = _os_log_pack_fill(v7, v4, *v8, &_mh_execute_header, "%@");
    *(_DWORD *)v9 = 138412290;
    *(_QWORD *)(v9 + 4) = v1;
    __SC_log_send(7, v2, v3, v7);
  }
  CFRelease(v1);
}

void sub_100035AAC(const __CFArray *a1, const void *a2)
{
  CFRange v4;

  v4.length = CFArrayGetCount(a1);
  v4.location = 0;
  if (!CFArrayContainsValue(a1, v4, a2))
    CFArrayAppendValue(a1, a2);
}

uint64_t sub_100035B4C(uint64_t result, int *a2)
{
  uint64_t v3;
  __int128 v4;
  int v5;
  char *v6;
  int v7;
  int v8;
  int v9;
  const void *v10;
  int v11;
  os_log_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int *v18;
  uint64_t v19;
  const void *v20;
  __int16 v21;
  uint64_t (*v22)(char *, uint64_t);
  uint64_t v23;
  __int16 v24;
  __int128 v25;
  __int128 *v26;
  _BYTE v27[16];

  if (a2)
  {
    v3 = result;
    result = (*(uint64_t (**)(_QWORD))result)(0);
    if (*a2 >= 1)
    {
      v5 = 0;
      v6 = (char *)a2 + result;
      *(_QWORD *)&v4 = 136315394;
      v25 = v4;
      do
      {
        result = *((unsigned int *)v6 + 2);
        if (!(_DWORD)result)
          goto LABEL_25;
        v7 = *((_DWORD *)v6 + 1);
        if (!v7)
        {
          if (!sub_10002D76C(result, (uint64_t)v27)
            || (v9 = sub_10002D430((uint64_t)v27, (void *)*((unsigned int *)v6 + 2))) == 0)
          {
            v7 = *((_DWORD *)v6 + 2);
            v8 = 1;
            goto LABEL_11;
          }
          v7 = v9;
        }
        v8 = 0;
LABEL_11:
        v10 = (const void *)(*(uint64_t (**)(char *))(v3 + 40))(v6);
        result = (uint64_t)sub_100035DFC(v3, a2, v10, *(_DWORD *)v6, v7, v8);
        if (!v8 && !result)
        {
          v11 = *((_DWORD *)v6 + 2);
          v12 = (os_log_t)qword_10007DC80;
          if (!qword_10007DC80)
          {
            v12 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
            qword_10007DC80 = (uint64_t)v12;
          }
          v13 = _SC_syslog_os_log_mapping(7);
          if (__SC_log_enabled(7, v12, v13))
          {
            v14 = _os_log_pack_size(18);
            v26 = &v25;
            v17 = (char *)&v25 - ((__chkstk_darwin(v14, v15, v16) + 15) & 0xFFFFFFFFFFFFFFF0);
            v18 = __error();
            v19 = _os_log_pack_fill(v17, v14, *v18, &_mh_execute_header, "%s: trying again excluding %u", (const char *)v25, DWORD2(v25));
            *(_DWORD *)v19 = v25;
            *(_QWORD *)(v19 + 4) = "RouteListFinalize";
            *(_WORD *)(v19 + 12) = 1024;
            *(_DWORD *)(v19 + 14) = v11;
            __SC_log_send(7, v12, v13, v17);
          }
          v20 = (const void *)(*(uint64_t (**)(char *))(v3 + 40))(v6);
          result = (uint64_t)sub_100035DFC(v3, a2, v20, *(_DWORD *)v6, v11, 1);
        }
        if (result)
        {
          *((_DWORD *)v6 + 1) = *(_DWORD *)(result + 4);
          if ((*(_WORD *)(result + 16) & 2) == 0)
          {
            v21 = *((_WORD *)v6 + 8) & 0xFFF9;
LABEL_24:
            *((_WORD *)v6 + 8) = v21;
            goto LABEL_25;
          }
          v22 = *(uint64_t (**)(char *, uint64_t))(v3 + 32);
          v23 = (*(uint64_t (**)(void))(v3 + 24))();
          result = v22(v6, v23);
          v24 = *((_WORD *)v6 + 8);
          *((_WORD *)v6 + 8) = v24 | 2;
          if (*(_DWORD *)v6 == *(_DWORD *)(v3 + 80))
          {
            v21 = v24 | 6;
            goto LABEL_24;
          }
        }
        else
        {
          result = (*(uint64_t (**)(uint64_t, char *, const char *))(v3 + 56))(5, v6, "can't resolve excluded route");
        }
LABEL_25:
        ++v5;
        v6 += *(int *)(v3 + 72);
      }
      while (v5 < *a2);
    }
  }
  return result;
}

char *sub_100035DFC(uint64_t a1, int *a2, const void *a3, int a4, int a5, char a6)
{
  uint64_t v12;
  int v13;
  char *v14;
  char *v15;
  int v16;
  __int16 v17;
  const void *v18;
  int v19;
  const void *v20;

  v12 = (*(uint64_t (**)(_QWORD))a1)(0);
  if (*a2 < 1)
    return 0;
  v13 = 0;
  v14 = 0;
  v15 = (char *)a2 + v12;
  while (1)
  {
    v16 = *((_DWORD *)v15 + 1);
    if (!v16 || *((_DWORD *)v15 + 2))
      goto LABEL_5;
    if ((a6 & 1) != 0)
    {
      if (v16 == a5)
        goto LABEL_5;
    }
    else if (v16 != a5)
    {
      goto LABEL_5;
    }
    v17 = *((_WORD *)v15 + 8);
    if ((v17 & 2) != 0)
    {
      v18 = (const void *)(*(uint64_t (**)(char *))(a1 + 24))(v15);
      if (!memcmp(v18, a3, *(int *)(a1 + 76)))
        goto LABEL_5;
      v17 = *((_WORD *)v15 + 8);
    }
    if ((v17 & 4) != 0)
      break;
    if ((*(unsigned int (**)(char *, const void *))(a1 + 48))(v15, a3))
    {
      v19 = *(_DWORD *)v15;
      if (*(_DWORD *)v15 == a4)
        return v15;
      if (v19 <= a4 && (!v14 || v19 > *(_DWORD *)v14))
        v14 = v15;
    }
LABEL_5:
    ++v13;
    v15 += *(int *)(a1 + 72);
    if (v13 >= *a2)
      return v14;
  }
  if (*(_DWORD *)(a1 + 80) != a4)
    goto LABEL_5;
  v20 = (const void *)(*(uint64_t (**)(char *))(a1 + 40))(v15);
  if (memcmp(v20, a3, *(int *)(a1 + 76)))
    goto LABEL_5;
  return v15;
}

uint64_t sub_100035F84(uint64_t a1)
{
  return 36 * a1 + 12;
}

BOOL sub_100035FD4(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
      && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
      && *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
      && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32)
      && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28)
      && *(unsigned __int16 *)(a1 + 16) == *(unsigned __int16 *)(a2 + 16);
}

uint64_t sub_100036080(uint64_t a1, char a2, int __fd)
{
  __int16 v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  os_log_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  char *v21;
  char v22;
  char v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[176];
  int v33;

  if (byte_10007DCC0 == 1 && !*(_DWORD *)(a1 + 20))
    return 1001;
  v4 = *(_WORD *)(a1 + 16);
  if ((v4 & 8) != 0)
    return 1001;
  v5 = *(_DWORD *)(a1 + 4);
  if (v5)
  {
    if (__fd == -1)
      return 9;
    v24 = 0u;
    v25 = 0u;
    BYTE3(v24) = a2;
    BYTE2(v24) = 5;
    v6 = ++dword_10007DCC4;
    v7 = *(_DWORD *)(a1 + 32);
    if (v7)
      v8 = 51;
    else
      v8 = 19;
    v33 = 0;
    v31 = 0uLL;
    memset(v32, 0, sizeof(v32));
    v29 = 0uLL;
    v30 = 0uLL;
    v27 = 0uLL;
    v28 = 0uLL;
    v26 = 0uLL;
    DWORD1(v25) = v6;
    HIDWORD(v24) = v8;
    if ((v4 & 4) != 0)
    {
      v9 = 2053;
      DWORD2(v24) = 2053;
      if ((v4 & 2) == 0)
      {
LABEL_24:
        if ((v4 & 1) != 0)
        {
          WORD2(v24) = v5;
          v9 |= 0x1000000u;
          DWORD2(v24) = v9;
        }
        WORD6(v29) = 528;
        LODWORD(v30) = *(_DWORD *)(a1 + 20);
        if ((v9 & 2) != 0)
        {
          LODWORD(v31) = *(_DWORD *)(a1 + 28);
          v21 = (char *)&v31 + 12;
          v22 = 2;
          v23 = 16;
        }
        else
        {
          HIWORD(v30) = v5;
          v21 = v32;
          v22 = 18;
          v23 = 20;
        }
        BYTE12(v30) = v23;
        BYTE13(v30) = v22;
        if ((v8 & 4) != 0)
        {
          *(_WORD *)v21 = 528;
          *((_DWORD *)v21 + 1) = *(_DWORD *)(a1 + 24);
          v21 += 16;
          LOBYTE(v8) = BYTE12(v24);
        }
        if ((v8 & 0x10) != 0)
        {
          *(_WORD *)v21 = 4628;
          *((_WORD *)v21 + 1) = v5;
          v21 += 20;
        }
        if ((v8 & 0x20) != 0)
        {
          *(_WORD *)v21 = 528;
          *((_DWORD *)v21 + 1) = v7;
          LODWORD(v21) = (_DWORD)v21 + 16;
        }
        LOWORD(v24) = (_WORD)v21 - (unsigned __int16)&v24;
        if (write(__fd, &v24, (int)((_DWORD)v21 - &v24)) == -1)
          return *__error();
        else
          return 0;
      }
      v9 = 2055;
    }
    else
    {
      v8 |= 4u;
      HIDWORD(v24) = v8;
      if ((v4 & 2) != 0)
        v9 = 2051;
      else
        v9 = 2305;
    }
    DWORD2(v24) = v9;
    goto LABEL_24;
  }
  v11 = (os_log_t)qword_10007DC80;
  if (!qword_10007DC80)
  {
    v11 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    qword_10007DC80 = (uint64_t)v11;
  }
  v12 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v11, v12))
  {
    v13 = _os_log_pack_size(26);
    v14 = (char *)&v24 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    v15 = __error();
    v16 = _os_log_pack_fill(v14, v13, *v15, &_mh_execute_header, "%d.%d.%d.%d no interface specified, ignoring", (_DWORD)v24, DWORD2(v24), (_DWORD)v25, DWORD2(v25));
    v17 = *(unsigned __int8 *)(a1 + 20);
    v18 = *(unsigned __int8 *)(a1 + 21);
    v19 = *(unsigned __int8 *)(a1 + 22);
    v20 = *(unsigned __int8 *)(a1 + 23);
    *(_DWORD *)v16 = 67109888;
    *(_DWORD *)(v16 + 4) = v17;
    *(_WORD *)(v16 + 8) = 1024;
    *(_DWORD *)(v16 + 10) = v18;
    *(_WORD *)(v16 + 14) = 1024;
    *(_DWORD *)(v16 + 16) = v19;
    *(_WORD *)(v16 + 20) = 1024;
    *(_DWORD *)(v16 + 22) = v20;
    __SC_log_send(5, v11, v12, v14);
  }
  return 6;
}

uint64_t sub_1000363A0(uint64_t a1)
{
  return a1 + 28;
}

uint64_t sub_1000363E8(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 28) = *a2;
  return result;
}

uint64_t sub_100036434(uint64_t a1)
{
  return a1 + 20;
}

BOOL sub_10003647C(uint64_t a1, _DWORD *a2)
{
  return (*(_DWORD *)(a1 + 24) & *a2) == *(_DWORD *)(a1 + 20);
}

void sub_1000364D4(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  __CFString *Mutable;
  os_log_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  os_log_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;

  Mutable = CFStringCreateMutable(0, 0);
  sub_10003676C(a2, Mutable);
  v7 = (os_log_t)qword_10007DC80;
  if (a3)
  {
    if (!qword_10007DC80)
    {
      v7 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_10007DC80 = (uint64_t)v7;
    }
    v8 = _SC_syslog_os_log_mapping(a1);
    if (__SC_log_enabled(a1, v7, v8))
    {
      v9 = _os_log_pack_size(22);
      v12 = (char *)&v26 - ((__chkstk_darwin(v9, v10, v11) + 15) & 0xFFFFFFFFFFFFFFF0);
      v13 = __error();
      v14 = _os_log_pack_fill(v12, v9, *v13, &_mh_execute_header, "%s: %@");
      *(_DWORD *)v14 = 136315394;
      *(_QWORD *)(v14 + 4) = a3;
      *(_WORD *)(v14 + 12) = 2112;
      *(_QWORD *)(v14 + 14) = Mutable;
      v15 = a1;
      v16 = v7;
      v17 = v8;
      v18 = v12;
LABEL_10:
      __SC_log_send(v15, v16, v17, v18);
    }
  }
  else
  {
    if (!qword_10007DC80)
    {
      v7 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_10007DC80 = (uint64_t)v7;
    }
    v19 = _SC_syslog_os_log_mapping(a1);
    if (__SC_log_enabled(a1, v7, v19))
    {
      v20 = _os_log_pack_size(12);
      v23 = (char *)&v26 - ((__chkstk_darwin(v20, v21, v22) + 15) & 0xFFFFFFFFFFFFFFF0);
      v24 = __error();
      v25 = _os_log_pack_fill(v23, v20, *v24, &_mh_execute_header, "%@");
      *(_DWORD *)v25 = 138412290;
      *(_QWORD *)(v25 + 4) = Mutable;
      v15 = a1;
      v16 = v7;
      v17 = v19;
      v18 = v23;
      goto LABEL_10;
    }
  }
  CFRelease(Mutable);
}

__CFString *sub_1000366FC(unsigned int *a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable(0, 0);
  sub_10003676C(a1, Mutable);
  return Mutable;
}

void sub_10003676C(unsigned int *a1, CFMutableStringRef theString)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *((unsigned __int8 *)a1 + 20);
  v5 = *((unsigned __int8 *)a1 + 21);
  v6 = *((unsigned __int8 *)a1 + 23);
  if ((a1[4] & 4) != 0)
  {
    CFStringAppendFormat(theString, 0, CFSTR("Host %d.%d.%d.%d"), v4, v5, *((unsigned __int8 *)a1 + 22), v6);
  }
  else
  {
    CFStringAppendFormat(theString, 0, CFSTR("Net %d.%d.%d.%d"), v4, v5, *((unsigned __int8 *)a1 + 22), v6);
    CFStringAppendFormat(theString, 0, CFSTR("/%d"), *a1, v7, v8, v9);
  }
  if ((a1[4] & 2) != 0)
    CFStringAppendFormat(theString, 0, CFSTR(" Gate %d.%d.%d.%d"), *((unsigned __int8 *)a1 + 28), *((unsigned __int8 *)a1 + 29), *((unsigned __int8 *)a1 + 30), *((unsigned __int8 *)a1 + 31));
  sub_1000368A0((uint64_t)a1, theString);
  if (a1[8])
    CFStringAppendFormat(theString, 0, CFSTR(" Ifa %d.%d.%d.%d"), a1[8], BYTE1(a1[8]), BYTE2(a1[8]), HIBYTE(a1[8]));
  sub_100036954((uint64_t)a1, theString);
}

void sub_1000368A0(uint64_t a1, __CFString *a2)
{
  _BYTE v4[16];

  if (sub_10002DD18(*(_DWORD *)(a1 + 4), (uint64_t)v4))
    CFStringAppendFormat(a2, 0, CFSTR(" Ifp %s"), v4);
  if (sub_10002DD18(*(_DWORD *)(a1 + 8), (uint64_t)v4))
    CFStringAppendFormat(a2, 0, CFSTR(" !Ifp %s"), v4);
}

void sub_100036954(uint64_t a1, CFMutableStringRef theString)
{
  int v4;
  const __CFString *v5;
  const __CFString *v6;
  __int16 v7;

  if ((*(_WORD *)(a1 + 16) & 8) != 0)
  {
    v6 = CFSTR(" [null]");
LABEL_16:
    CFStringAppend(theString, v6);
    return;
  }
  v4 = *(unsigned __int8 *)(a1 + 15) << 24;
  if (v4)
  {
    if (v4 == 50331648)
    {
      v5 = CFSTR(" [never]");
    }
    else
    {
      if (v4 != 0x2000000)
        goto LABEL_10;
      v5 = CFSTR(" [last]");
    }
  }
  else
  {
    v5 = CFSTR(" [first]");
  }
  CFStringAppend(theString, v5);
LABEL_10:
  v7 = *(_WORD *)(a1 + 16);
  if ((v7 & 0x10) != 0)
  {
    CFStringAppend(theString, CFSTR(" [kern]"));
    v7 = *(_WORD *)(a1 + 16);
  }
  if ((v7 & 1) != 0)
    CFStringAppend(theString, CFSTR(" [SCOPED]"));
  if ((*(_WORD *)(a1 + 18) & 4) != 0)
  {
    v6 = CFSTR(" [force]");
    goto LABEL_16;
  }
}

__CFString *sub_100036A74(unsigned int *a1)
{
  __CFString *Mutable;
  uint64_t v3;
  unsigned int *v4;

  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<IPv4RouteList[%d]> = {"), *a1);
  if ((int)*a1 >= 1)
  {
    v3 = 0;
    v4 = a1 + 3;
    do
    {
      CFStringAppendFormat(Mutable, 0, CFSTR("\n%2d. "), v3);
      sub_10003676C(v4, Mutable);
      v3 = (v3 + 1);
      v4 += 9;
    }
    while ((int)v3 < (int)*a1);
  }
  CFStringAppend(Mutable, CFSTR("\n}"));
  return Mutable;
}

uint64_t (**sub_100036B60(uint64_t (**result)(_QWORD), unint64_t a2, int *a3, unsigned int a4))(_QWORD)
{
  uint64_t (**v6)(_QWORD);
  int v7;
  uint64_t v8;
  int v9;
  char *v10;
  uint64_t v11;
  int v12;
  char *v13;
  uint64_t v14;
  int v15;
  char *v16;
  int v17;
  int v18;
  uint64_t v19;
  _QWORD v20[4];

  if (!(a2 | (unint64_t)a3))
    return result;
  v6 = result;
  v20[2] = a3;
  v20[3] = a4;
  v20[0] = result;
  v20[1] = a2;
  if (!a2)
  {
    if (!a3)
      return result;
    goto LABEL_30;
  }
  result = (uint64_t (**)(_QWORD))(*result)(0);
  if (*(int *)a2 >= 1)
  {
    v7 = 0;
    v8 = (uint64_t)result + a2;
    do
    {
      if (!a3)
        goto LABEL_12;
      result = (uint64_t (**)(_QWORD))(*v6)(0);
      if (*a3 < 1)
        goto LABEL_12;
      v9 = 0;
      v10 = (char *)result + (_QWORD)a3;
      while (1)
      {
        result = (uint64_t (**)(_QWORD))((uint64_t (*)(char *, uint64_t))v6[1])(v10, v8);
        if ((_DWORD)result)
          break;
        ++v9;
        v10 += *((int *)v6 + 18);
        if (v9 >= *a3)
          goto LABEL_12;
      }
      if (!v10)
      {
LABEL_12:
        if ((*(_WORD *)(v8 + 18) & 2) != 0)
          result = (uint64_t (**)(_QWORD))sub_100036DAC(v8, 1, (uint64_t)v20);
      }
      ++v7;
      v8 += *((int *)v6 + 18);
    }
    while (v7 < *(_DWORD *)a2);
  }
  if (a3)
  {
    v11 = (*v6)(0);
    if (*a3 >= 1)
    {
      v12 = 0;
      v13 = (char *)a3 + v11;
      do
      {
        v14 = (*v6)(0);
        if (*(int *)a2 >= 1)
        {
          v15 = 0;
          v16 = (char *)(a2 + v14);
          while (!((unsigned int (*)(char *, char *))v6[1])(v16, v13))
          {
            ++v15;
            v16 += *((int *)v6 + 18);
            if (v15 >= *(_DWORD *)a2)
              goto LABEL_27;
          }
          if (v16)
          {
            if ((*((_WORD *)v13 + 9) & 4) != 0)
              ((void (*)(uint64_t, char *, const char *))v6[7])(5, v13, "Re-applying route");
            else
              *((_WORD *)v13 + 9) = *((_WORD *)v16 + 9) & 3;
          }
        }
LABEL_27:
        ++v12;
        v13 += *((int *)v6 + 18);
      }
      while (v12 < *a3);
    }
LABEL_30:
    result = (uint64_t (**)(_QWORD))(*v6)(0);
    v17 = *a3;
    if (*a3 >= 1)
    {
      v18 = 0;
      v19 = (uint64_t)result + (_QWORD)a3;
      do
      {
        if ((*(_WORD *)(v19 + 18) & 1) == 0)
        {
          result = (uint64_t (**)(_QWORD))sub_100036DAC(v19, 0, (uint64_t)v20);
          v17 = *a3;
        }
        ++v18;
        v19 += *((int *)v6 + 18);
      }
      while (v18 < v17);
    }
  }
  return result;
}

uint64_t sub_100036DAC(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, char *);
  uint64_t (*v7)(uint64_t, uint64_t, _QWORD);
  unsigned int v8;
  uint64_t (*v9)(uint64_t);
  int *v10;
  const void *v11;
  int v12;
  const char *v13;
  int v14;
  int v15;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  os_log_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char __str[64];

  v5 = *(_QWORD *)a3;
  v6 = *(void (**)(uint64_t, uint64_t, char *))(*(_QWORD *)a3 + 56);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 16);
  if (a2 == 1)
  {
    v14 = v7(a1, 2, *(unsigned int *)(a3 + 24));
    v15 = v14;
    if (v14)
    {
      if (v14 != 1001 && v14 != 3)
      {
        v26 = (os_log_t)qword_10007DC80;
        if (!qword_10007DC80)
        {
          v26 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
          qword_10007DC80 = (uint64_t)v26;
        }
        v27 = _SC_syslog_os_log_mapping(5);
        if (!__SC_log_enabled(5, v26, v27))
          goto LABEL_43;
        v28 = _os_log_pack_size(12);
        v31 = &__str[-((__chkstk_darwin(v28, v29, v30) + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
        v32 = *__error();
        v33 = _os_log_pack_fill(v31, v28, v32, &_mh_execute_header, "failed to remove route, %s");
LABEL_42:
        v43 = v33;
        v44 = strerror(v15);
        *(_DWORD *)v43 = 136315138;
        *(_QWORD *)(v43 + 4) = v44;
        __SC_log_send(5, v26, v27, v31);
LABEL_43:
        v23 = 5;
        v24 = a1;
        v22 = 0;
LABEL_44:
        v6(v23, v24, v22);
        return 1;
      }
    }
    if (byte_10007DC9C == 1)
    {
      if (v14 == 1001)
        v17 = "!";
      else
        v17 = "";
      v19 = *(_QWORD *)a3;
      v18 = *(_QWORD *)(a3 + 8);
      v20 = (*(uint64_t (**)(_QWORD))v19)(0);
      v21 = "(ESRCH)";
      if (v15 != 3)
        v21 = "";
      snprintf(__str, 0x40uLL, "%sRemove old[%ld]%s", v17, (a1 - v18 - v20) / *(int *)(v19 + 72), v21);
      v22 = __str;
      v23 = 7;
      v24 = a1;
      goto LABEL_44;
    }
    return 1;
  }
  if (a2)
    return 1;
  v8 = *(unsigned __int16 *)(a1 + 18);
  if ((v8 & 1) != 0)
    return (v8 >> 1) & 1;
  v9 = *(uint64_t (**)(uint64_t))(v5 + 24);
  *(_WORD *)(a1 + 18) = v8 | 1;
  if ((*(_WORD *)(a1 + 16) & 2) == 0)
    goto LABEL_28;
  v10 = *(int **)(a3 + 16);
  v11 = (const void *)v9(a1);
  if (!sub_100035DFC(v5, v10, v11, *(_DWORD *)(*(_QWORD *)a3 + 80), *(_DWORD *)(a1 + 4), 0))
  {
    v6(5, a1, "no gateway route");
LABEL_28:
    v15 = v7(a1, 1, *(unsigned int *)(a3 + 24));
    if (v15 == 17)
    {
      v7(a1, 2, *(unsigned int *)(a3 + 24));
      v15 = v7(a1, 1, *(unsigned int *)(a3 + 24));
    }
    if (!v15 || v15 == 1001)
    {
      if (byte_10007DC9C == 1)
      {
        if (v15 == 1001)
          v35 = "!";
        else
          v35 = "";
        v36 = *(_QWORD *)a3;
        v37 = *(_QWORD *)(a3 + 16);
        v38 = (*(uint64_t (**)(_QWORD))v36)(0);
        snprintf(__str, 0x40uLL, "%sAdd new[%ld]", v35, (a1 - v37 - v38) / *(int *)(v36 + 72));
        v6(7, a1, __str);
      }
      *(_WORD *)(a1 + 18) |= 2u;
      return 1;
    }
    v26 = (os_log_t)qword_10007DC80;
    if (!qword_10007DC80)
    {
      v26 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_10007DC80 = (uint64_t)v26;
    }
    v27 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v26, v27))
      goto LABEL_43;
    v39 = _os_log_pack_size(12);
    v31 = &__str[-((__chkstk_darwin(v39, v40, v41) + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
    v42 = *__error();
    v33 = _os_log_pack_fill(v31, v39, v42, &_mh_execute_header, "failed to add route, %s:");
    goto LABEL_42;
  }
  v12 = *(_DWORD *)(a3 + 28);
  if (v12 != 10)
  {
    *(_DWORD *)(a3 + 28) = v12 + 1;
    v34 = sub_100036DAC();
    --*(_DWORD *)(a3 + 28);
    if (!v34)
    {
      v13 = "failed to add";
      goto LABEL_47;
    }
    goto LABEL_28;
  }
  v13 = "routing loop detected, not adding";
LABEL_47:
  v6(5, a1, (char *)v13);
  return 0;
}

void sub_1000371F8(CFArrayRef keys, CFArrayRef patterns)
{
  const __CFDictionary *v2;
  const __CFDictionary *v3;
  const __CFArray *v4;
  os_log_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  CFIndex Count;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = SCDynamicStoreCopyMultiple((SCDynamicStoreRef)qword_10007DC90, keys, patterns);
  if (v2)
  {
    v3 = v2;
    v4 = sub_100037724(v2);
    CFRelease(v3);
    v5 = (os_log_t)qword_10007DC80;
    if (v4)
    {
      if (!qword_10007DC80)
      {
        v5 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
        qword_10007DC80 = (uint64_t)v5;
      }
      v6 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v5, v6))
      {
        v7 = _os_log_pack_size(22);
        v10 = (char *)&v25 - ((__chkstk_darwin(v7, v8, v9) + 15) & 0xFFFFFFFFFFFFFFF0);
        v11 = __error();
        v12 = _os_log_pack_fill(v10, v7, *v11, &_mh_execute_header, "IPMonitor prime %ld keys %@");
        Count = CFArrayGetCount(v4);
        *(_DWORD *)v12 = 134218242;
        *(_QWORD *)(v12 + 4) = Count;
        *(_WORD *)(v12 + 12) = 2112;
        *(_QWORD *)(v12 + 14) = v4;
        __SC_log_send(5, v5, v6, v10);
      }
      sub_100037800((const __SCDynamicStore *)qword_10007DC90, v4, 0);
      CFRelease(v4);
      return;
    }
    if (!qword_10007DC80)
    {
      v5 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_10007DC80 = (uint64_t)v5;
    }
    v14 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v5, v14))
    {
      v21 = _os_log_pack_size(12);
      v18 = (char *)&v25 - ((__chkstk_darwin(v21, v22, v23) + 15) & 0xFFFFFFFFFFFFFFF0);
      v24 = *__error();
      v20 = _os_log_pack_fill(v18, v21, v24, &_mh_execute_header, "%s: no keys");
      goto LABEL_16;
    }
  }
  else
  {
    v5 = (os_log_t)qword_10007DC80;
    if (!qword_10007DC80)
    {
      v5 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_10007DC80 = (uint64_t)v5;
    }
    v14 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v5, v14))
    {
      v15 = _os_log_pack_size(12);
      v18 = (char *)&v25 - ((__chkstk_darwin(v15, v16, v17) + 15) & 0xFFFFFFFFFFFFFFF0);
      v19 = *__error();
      v20 = _os_log_pack_fill(v18, v15, v19, &_mh_execute_header, "%s: no content");
LABEL_16:
      *(_DWORD *)v20 = 136315138;
      *(_QWORD *)(v20 + 4) = "prime_notifications";
      __SC_log_send(5, v5, v14, v18);
    }
  }
}

void sub_1000374E8(CFStringRef serviceID, const __CFArray *a2)
{
  uint64_t i;
  const __CFString *v5;
  CFStringRef NetworkServiceEntity;
  CFStringRef v7;
  CFStringRef v8;
  CFStringRef v9;
  CFStringRef v10;

  for (i = 0; i != 40; i += 8)
  {
    v5 = **(const __CFString ***)((char *)&off_100076970 + i);
    NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainSetup, serviceID, v5);
    sub_100035AAC(a2, NetworkServiceEntity);
    CFRelease(NetworkServiceEntity);
    v7 = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainState, serviceID, v5);
    sub_100035AAC(a2, v7);
    CFRelease(v7);
  }
  v8 = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainState, serviceID, kSCEntNetDHCP);
  sub_100035AAC(a2, v8);
  CFRelease(v8);
  v9 = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainSetup, serviceID, 0);
  sub_100035AAC(a2, v9);
  CFRelease(v9);
  v10 = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainState, serviceID, 0);
  sub_100035AAC(a2, v10);
  CFRelease(v10);
}

void sub_10003766C(CFStringRef serviceID, const __CFArray *a2)
{
  uint64_t i;
  CFStringRef NetworkServiceEntity;

  for (i = 0; i != 48; i += 16)
  {
    NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainState, serviceID, **(CFStringRef **)((char *)&off_100076998 + i));
    sub_100035AAC(a2, NetworkServiceEntity);
    CFRelease(NetworkServiceEntity);
  }
}

CFArrayRef sub_100037724(const __CFDictionary *a1)
{
  CFIndex Count;
  CFIndex v3;
  unint64_t v4;
  const void **v5;
  size_t v6;
  uint64_t v8;

  Count = CFDictionaryGetCount(a1);
  if (Count < 1)
    return 0;
  v3 = Count;
  __chkstk_darwin();
  v5 = (const void **)((char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v4 >= 0x200)
    v6 = 512;
  else
    v6 = v4;
  bzero((char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  CFDictionaryGetKeysAndValues(a1, v5, 0);
  return CFArrayCreate(0, v5, v3, &kCFTypeArrayCallBacks);
}

void sub_100037800(const __SCDynamicStore *a1, const __CFArray *a2, const __CFArray *a3)
{
  CFIndex Count;
  os_log_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  const __CFDictionary *v14;
  CFDictionaryRef Copy;
  const __CFDictionary *v16;
  CFDictionaryRef v17;
  __objc2_prop_list **p_base_props;
  int v19;
  CFIndex v20;
  const __CFString *v21;
  const __CFString *ValueAtIndex;
  void *v23;
  void *v24;
  __CFSet **v25;
  const void *v26;
  const void *v27;
  char v28;
  uint64_t v29;
  char v30;
  int HasSuffix;
  int v32;
  int v33;
  const __CFArray *v34;
  const __CFArray *v35;
  CFIndex v36;
  __int128 v37;
  CFIndex v38;
  CFIndex v39;
  const void *v40;
  os_log_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  int *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  __CFArray *v51;
  const __CFArray *v52;
  CFIndex v53;
  CFIndex v54;
  CFIndex i;
  const __CFString *v56;
  uint64_t j;
  CFStringRef NetworkServiceEntity;
  CFStringRef v59;
  CFStringRef NetworkInterfaceEntity;
  CFDictionaryRef v61;
  const __CFDictionary *v62;
  const __CFDictionary *v63;
  const __CFArray *Value;
  CFTypeID TypeID;
  const __CFArray *v66;
  const __CFNumber *v67;
  CFTypeID v68;
  _BOOL4 v69;
  os_log_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int *v76;
  uint64_t v77;
  CFIndex v78;
  _UNKNOWN **v79;
  __CFString *v80;
  const __CFDictionary *v81;
  const __CFDictionary *v82;
  uint64_t v83;
  int v84;
  uint64_t (*v85)(void *);
  const __CFString *v86;
  const void *v87;
  const void *v88;
  int v89;
  int v90;
  uint64_t v91;
  char v92;
  CFStringRef *v93;
  const __CFDictionary *v94;
  _UNKNOWN **v95;
  const void **v96;
  const void *v97;
  CFTypeID v98;
  __CFDictionary *v99;
  int v100;
  int v101;
  const void *v102;
  int v103;
  int v104;
  int v105;
  int v106;
  unsigned int v107;
  const __CFSet *v108;
  _DWORD *v109;
  os_log_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  int *v116;
  uint64_t v117;
  const void **v118;
  uint64_t v119;
  const void *v120;
  os_log_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  int *v127;
  const void **v128;
  const void *v129;
  unsigned int v130;
  const void *v131;
  unsigned int v132;
  const void *v133;
  int v134;
  int v135;
  int v136;
  int v137;
  BOOL v138;
  int *v139;
  int v140;
  int v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  unsigned int *v146;
  const __CFDictionary *v147;
  const void *v148;
  const void *v149;
  _BOOL4 v150;
  _BOOL4 v151;
  const void *v152;
  const __CFString *v153;
  const __CFArray *v154;
  const __CFDictionary *v155;
  int v156;
  const __CFDictionary *v157;
  const void *v158;
  int v159;
  const void *v160;
  __CFDictionary *MutableCopy;
  const __CFDictionary *v162;
  int v163;
  __CFDictionary *v164;
  __CFDictionary *v165;
  const void *v166;
  int v167;
  uint64_t v168;
  int v169;
  CFSetRef v170;
  _BOOL4 v171;
  CFMutableStringRef v172;
  char v173;
  CFSetRef v174;
  int v175;
  int *v176;
  int *v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  const __CFArray *v185;
  int v186;
  uint64_t first_ifstate;
  uint64_t next;
  __CFString *v189;
  CFMutableStringRef v190;
  const char *v191;
  const char *v192;
  uint64_t ifname;
  uint64_t v194;
  __CFString *v195;
  int v196;
  CFDictionaryRef v197;
  const void *v198;
  CFDictionaryRef v199;
  const char *v200;
  BOOL v201;
  const void *v202;
  const char *v203;
  int v204;
  os_log_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  int *v211;
  uint64_t v212;
  CFIndex v213;
  os_log_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  _WORD *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  int *v230;
  CFDictionaryRef v231;
  CFDictionaryRef v232;
  int v233;
  const __SCDynamicStore *v234;
  CFStringRef v235;
  const __CFArray *v236;
  CFStringRef v237;
  CFStringRef v238;
  _BYTE v239[12];
  CFSetRef v240;
  uint64_t v241;
  const __CFArray *v242;
  int v243;
  __int128 v244;
  CFArrayRef v245;
  CFStringRef v246;
  int v247;
  _QWORD block[4];
  int v249;
  CFTypeRef v250;
  const __CFArray *Mutable;
  const __CFArray *v252;
  const __CFDictionary *v253;
  const __CFSet *v254;
  const __CFSet *v255;
  CFTypeRef valuePtr[2];

  v234 = a1;
  v254 = 0;
  v255 = 0;
  Mutable = 0;
  v252 = 0;
  v253 = 0;
  sub_10002DC34();
  if (a2)
  {
    Count = CFArrayGetCount(a2);
    if (byte_10007DC9C == 1)
    {
      v6 = (os_log_t)qword_10007DC80;
      if (!qword_10007DC80)
      {
        v6 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
        qword_10007DC80 = (uint64_t)v6;
      }
      v7 = _SC_syslog_os_log_mapping(7);
      if (__SC_log_enabled(7, v6, v7))
      {
        v8 = _os_log_pack_size(22);
        v11 = (char *)&v231 - ((__chkstk_darwin(v8, v9, v10) + 15) & 0xFFFFFFFFFFFFFFF0);
        v12 = __error();
        v13 = _os_log_pack_fill(v11, v8, *v12, &_mh_execute_header, "changed keys %@ (%ld)");
        *(_DWORD *)v13 = 138412546;
        *(_QWORD *)(v13 + 4) = a2;
        *(_WORD *)(v13 + 12) = 2048;
        *(_QWORD *)(v13 + 14) = Count;
        __SC_log_send(7, v6, v7, v11);
      }
    }
  }
  else
  {
    Count = 0;
  }
  if (a3 || Count)
  {
    if (qword_10007DCE0 && (v14 = (const __CFDictionary *)sub_100033308((void *)qword_10007DCE0, kSCEntNetDNS)) != 0)
      Copy = CFDictionaryCreateCopy(0, v14);
    else
      Copy = 0;
    if (qword_10007DCE8
      && (v16 = (const __CFDictionary *)sub_100033308((void *)qword_10007DCE8, kSCEntNetProxies)) != 0)
    {
      v17 = CFDictionaryCreateCopy(0, v16);
    }
    else
    {
      v17 = 0;
    }
    v245 = a3;
    Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    v252 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    v253 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    v242 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    p_base_props = &QoSMarkingController__classData.base_props;
    v231 = Copy;
    v232 = v17;
    if (Count >= 1)
    {
      v19 = 0;
      v247 = 0;
      v243 = 0;
      v233 = 0;
      v20 = 0;
      v246 = kSCEntNetIPv4;
      v21 = (const __CFString *)kSCEntNetInterfaceDelegation;
      *(_QWORD *)&v244 = kSCEntNetIPv6;
      while (1)
      {
        valuePtr[0] = 0;
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a2, v20);
        if (CFEqual(ValueAtIndex, (CFTypeRef)qword_10007DCC8))
        {
          v247 = 1;
        }
        else
        {
          if (!CFEqual(ValueAtIndex, p_base_props[411])
            && !CFEqual(ValueAtIndex, (CFTypeRef)qword_10007DCD0)
            && !CFEqual(ValueAtIndex, CFSTR("/Library/Preferences/SystemConfiguration/resolver")))
          {
            if (!CFStringHasPrefix(ValueAtIndex, (CFStringRef)qword_10007DCF0) || !CFStringHasSuffix(ValueAtIndex, v21))
            {
              if (!CFStringHasPrefix(ValueAtIndex, (CFStringRef)qword_10007DCF8))
              {
                if (CFStringHasPrefix(ValueAtIndex, (CFStringRef)qword_10007DD00))
                {
                  v26 = sub_1000397B4(ValueAtIndex, 0);
                  if (v26)
                  {
                    v27 = v26;
                    sub_100035AAC(v242, v26);
                    CFRelease(v27);
                  }
                  v28 = 0;
                  v29 = 0;
                  do
                  {
                    v30 = v28;
                    HasSuffix = CFStringHasSuffix(ValueAtIndex, *(CFStringRef *)*(&off_1000769C8 + v29));
                    if (HasSuffix)
                      break;
                    v28 = 1;
                    v29 = 1;
                  }
                  while ((v30 & 1) == 0);
                  if (HasSuffix)
                    v32 = 1;
                  else
                    v32 = v233;
                  if (CFStringHasSuffix(ValueAtIndex, kSCEntNetInterface))
                    v33 = 1;
                  else
                    v33 = v32;
                  v233 = v33;
                  p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
                }
                else if (sub_100049F58(ValueAtIndex, valuePtr))
                {
                  sub_100039900(0, valuePtr[0]);
                  v243 = 1;
                }
                goto LABEL_26;
              }
              v250 = 0;
              v23 = (void *)sub_1000397B4(ValueAtIndex, &v250);
              if (v23)
              {
                v24 = v23;
                sub_100035AAC(v242, v23);
                if (v250)
                {
                  if (CFEqual(v250, v246))
                  {
                    v25 = &v255;
                    goto LABEL_53;
                  }
                  if (CFEqual(v250, (CFTypeRef)v244))
                  {
                    v25 = &v254;
LABEL_53:
                    sub_10003988C(v25, v24);
                  }
                }
                CFRelease(v24);
              }
              if (v250)
                CFRelease(v250);
              goto LABEL_26;
            }
            v233 = 1;
            v247 = 1;
          }
          v19 = 1;
        }
LABEL_26:
        if (++v20 == Count)
          goto LABEL_58;
      }
    }
    v233 = 0;
    v243 = 0;
    v247 = 0;
    v19 = 0;
LABEL_58:
    LODWORD(v246) = v19;
    v34 = v242;
    v35 = v245;
    if (v245)
    {
      v36 = CFArrayGetCount(v245);
      if (v36 >= 1)
      {
        v38 = v36;
        v39 = 0;
        *(_QWORD *)&v37 = 138412290;
        v244 = v37;
        do
        {
          v40 = CFArrayGetValueAtIndex(v35, v39);
          if (byte_10007DC9C == 1)
          {
            v41 = (os_log_t)qword_10007DC80;
            if (!qword_10007DC80)
            {
              v41 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
              qword_10007DC80 = (uint64_t)v41;
            }
            v42 = _SC_syslog_os_log_mapping(7);
            if (__SC_log_enabled(7, v41, v42))
            {
              v43 = _os_log_pack_size(12);
              v46 = (char *)&v231 - ((__chkstk_darwin(v43, v44, v45) + 15) & 0xFFFFFFFFFFFFFFF0);
              v47 = __error();
              v48 = v43;
              p_base_props = &QoSMarkingController__classData.base_props;
              v49 = _os_log_pack_fill(v46, v48, *v47, &_mh_execute_header, "Interface rank changed %@");
              *(_DWORD *)v49 = v244;
              *(_QWORD *)(v49 + 4) = v40;
              v50 = v46;
              v34 = v242;
              __SC_log_send(7, v41, v42, v50);
              v35 = v245;
            }
          }
          sub_1000399C8(v34, v40);
          ++v39;
        }
        while (v38 != v39);
      }
    }
    v51 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    v52 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    CFArrayAppendValue(v51, (const void *)qword_10007DCC8);
    CFArrayAppendValue(v51, p_base_props[411]);
    CFArrayAppendValue(v51, (const void *)qword_10007DCD0);
    v53 = CFArrayGetCount(v34);
    if (v53 >= 1)
    {
      v54 = v53;
      for (i = 0; i != v54; ++i)
      {
        v56 = (const __CFString *)CFArrayGetValueAtIndex(v34, i);
        sub_1000374E8(v56, v51);
        sub_10003766C(v56, v51);
      }
    }
    for (j = 0; j != 40; j += 8)
    {
      NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainSetup, kSCCompAnyRegex, **(CFStringRef **)((char *)&off_100076A18 + j));
      sub_100035AAC(v52, NetworkServiceEntity);
      CFRelease(NetworkServiceEntity);
    }
    v59 = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainSetup, kSCCompAnyRegex, kSCEntNetVPN);
    sub_100035AAC(v52, v59);
    CFRelease(v59);
    NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, kSCCompAnyRegex, kSCEntNetLink);
    sub_100035AAC(v52, NetworkInterfaceEntity);
    CFRelease(NetworkInterfaceEntity);
    v61 = SCDynamicStoreCopyMultiple(v234, v51, v52);
    if (v51)
      CFRelease(v51);
    if (v52)
      CFRelease(v52);
    if (!v61)
      sub_100065B4C();
    v62 = (const __CFDictionary *)sub_10003C80C(v61, (const void *)qword_10007DCC8);
    if (v62)
    {
      v63 = v62;
      LODWORD(valuePtr[0]) = 0;
      Value = (const __CFArray *)CFDictionaryGetValue(v62, kSCPropNetServiceOrder);
      TypeID = CFArrayGetTypeID();
      if (Value)
      {
        if (CFGetTypeID(Value) == TypeID)
          v66 = Value;
        else
          v66 = 0;
        v236 = v66;
      }
      else
      {
        v236 = 0;
      }
      v67 = (const __CFNumber *)CFDictionaryGetValue(v63, kSCPropNetPPPOverridePrimary);
      v68 = CFNumberGetTypeID();
      if (v67 && CFGetTypeID(v67) == v68)
      {
        CFNumberGetValue(v67, kCFNumberIntType, valuePtr);
        v69 = LODWORD(valuePtr[0]) != 0;
      }
      else
      {
        v69 = 0;
      }
      dword_10007DD50 = v69;
      if (v236)
      {
        if (byte_10007DC9C == 1)
        {
          v70 = (os_log_t)qword_10007DC80;
          if (!qword_10007DC80)
          {
            v70 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
            qword_10007DC80 = (uint64_t)v70;
          }
          v71 = _SC_syslog_os_log_mapping(7);
          if (__SC_log_enabled(7, v70, v71))
          {
            v72 = _os_log_pack_size(12);
            v75 = (char *)&v231 - ((__chkstk_darwin(v72, v73, v74) + 15) & 0xFFFFFFFFFFFFFFF0);
            v76 = __error();
            v77 = _os_log_pack_fill(v75, v72, *v76, &_mh_execute_header, "service_order %@ ");
            *(_DWORD *)v77 = 138412290;
            *(_QWORD *)(v77 + 4) = v236;
            __SC_log_send(7, v70, v71, v75);
          }
        }
      }
      else
      {
        v236 = 0;
      }
    }
    else
    {
      v236 = 0;
      dword_10007DD50 = 0;
    }
    v241 = CFArrayGetCount(v242);
    if (v241 < 1)
    {
      LODWORD(v245) = 0;
      *(_DWORD *)v239 = 0;
    }
    else
    {
      *(_DWORD *)v239 = 0;
      LODWORD(v245) = 0;
      v78 = 0;
      v237 = kSCEntNetDNS;
      v238 = kSCEntNetIPv4;
      v79 = &off_100076970;
      v235 = kSCEntNetIPv6;
      v240 = v255;
      *(_QWORD *)&v239[4] = v254;
      do
      {
        *(_QWORD *)&v244 = v78;
        v80 = (__CFString *)CFArrayGetValueAtIndex(v242, v78);
        v81 = (const __CFDictionary *)sub_100039C7C(v61, v80, 0);
        v82 = (const __CFDictionary *)sub_10003CFB4(v61, v80, 0);
        v83 = 0;
        v84 = (sub_10003C8B8(v80, v81, v82, v61) != 0) << 30;
        do
        {
          v85 = off_100076A40[v83];
          v86 = *(const __CFString **)v79[v83];
          v87 = sub_100039C7C(v61, v80, v86);
          v88 = sub_10003CFB4(v61, v80, v86);
          v89 = ((uint64_t (*)(__CFString *, const void *, const void *, CFDictionaryRef))v85)(v80, v87, v88, v61);
          v90 = 1 << v83;
          if (!v89)
            v90 = 0;
          v84 |= v90;
          ++v83;
        }
        while (v83 != 5);
        v91 = 0;
        v92 = 0;
        do
        {
          v93 = *(CFStringRef **)((char *)&off_100076998 + v91);
          v94 = (const __CFDictionary *)sub_100039C7C(v61, v80, *v93);
          if (v94)
          {
            v95 = v79;
            v96 = *(const void ***)((char *)&off_100076998 + v91 + 8);
            v97 = CFDictionaryGetValue(v94, *v96);
            v98 = CFNumberGetTypeID();
            if (v97 && CFGetTypeID(v97) == v98)
            {
              v99 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
              CFDictionaryAddValue(v99, *v96, v97);
            }
            else
            {
              v99 = 0;
            }
            v79 = v95;
          }
          else
          {
            CFNumberGetTypeID();
            v99 = 0;
          }
          if (sub_10003D368(v80, *v93, v99))
            v92 = 1;
          if (v99)
            CFRelease(v99);
          v91 += 16;
        }
        while (v91 != 48);
        if (v92)
          v84 |= 0x40u;
        if (v240 && CFSetContainsValue(v240, v80))
          v84 |= 1u;
        v100 = (int)v246;
        v101 = (int)v245;
        if (*(_QWORD *)&v239[4] && CFSetContainsValue(*(CFSetRef *)&v239[4], v80))
        {
          v84 |= 2u;
          v102 = sub_100039C7C(v61, v80, v237);
          v103 = v243;
          if (v102)
            v103 = 1;
          v243 = v103;
        }
        if ((v84 & 0x40000000) != 0)
        {
          v247 = 1;
        }
        else
        {
          if ((v84 & 1) != 0)
            v101 = 1;
          v104 = v247;
          if ((v84 & 1) != 0)
            v104 = 1;
          v247 = v104;
          if ((v84 & 1) != 0)
            v100 = 1;
          if ((v84 & 2) != 0)
          {
            v101 = 1;
            v243 = 1;
            v247 = 1;
            v100 = 1;
          }
        }
        if ((v84 & 4) != 0)
        {
          if (qword_10007DCE0)
          {
            v105 = CFEqual((CFTypeRef)qword_10007DCE0, v80);
            v106 = *(_DWORD *)v239;
            if (v105)
              v106 = 1;
            *(_DWORD *)v239 = v106;
          }
          v243 = 1;
          v100 = 1;
        }
        if ((v84 & 8) != 0)
          v101 = 1;
        if ((v84 & 0x10) != 0)
          v100 = 1;
        if ((v84 & 0x40) != 0 && (sub_100033308(v80, v238) || sub_100033308(v80, v235)))
          v100 = 1;
        LODWORD(v245) = v101;
        LODWORD(v246) = v100;
        v78 = v244 + 1;
      }
      while ((_QWORD)v244 + 1 != v241);
    }
    v107 = CFDictionaryGetCount((CFDictionaryRef)qword_10007DCA8);
    v108 = (const __CFSet *)sub_1000322A4((unsigned int *)qword_10007DC88);
    v109 = sub_10003234C((_DWORD *)qword_10007DC88, v107);
    qword_10007DC88 = (uint64_t)v109;
    v240 = v108;
    if (v247)
    {
      if (qword_10007DD08)
        sub_100039D0C((CFTypeRef *)qword_10007DD08);
      qword_10007DD08 = (uint64_t)sub_100039DC0(2, v236);
      sub_100039EC8((int *)qword_10007DD08, (uint64_t)"IPv4");
      if (qword_10007DD10)
        sub_100039D0C((CFTypeRef *)qword_10007DD10);
      qword_10007DD10 = (uint64_t)sub_100039DC0(30, v236);
      sub_100039EC8((int *)qword_10007DD10, (uint64_t)"IPv6");
      v109 = (_DWORD *)qword_10007DC88;
    }
    else if (!(_DWORD)v246)
    {
      v138 = 0;
      v136 = 0;
      v134 = (int)v245;
      v137 = *(_DWORD *)v239;
      goto LABEL_204;
    }
    valuePtr[0] = 0;
    if (v109)
      *((_QWORD *)v109 + 1) = 0;
    v110 = (os_log_t)qword_10007DC80;
    if (!qword_10007DC80)
    {
      v110 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_10007DC80 = (uint64_t)v110;
    }
    v111 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v110, v111))
    {
      v112 = _os_log_pack_size(2);
      v115 = (char *)&v231 - ((__chkstk_darwin(v112, v113, v114) + 15) & 0xFFFFFFFFFFFFFFF0);
      v116 = __error();
      *(_WORD *)_os_log_pack_fill(v115, v112, *v116, &_mh_execute_header, "electing IPv4 primary") = 0;
      __SC_log_send(7, v110, v111, v115);
      v108 = v240;
    }
    valuePtr[0] = 0;
    if (qword_10007DD10)
      v117 = qword_10007DD10 + 16;
    else
      v117 = 0;
    v118 = (const void **)sub_10003A24C(qword_10007DD08, v117, (_DWORD *)qword_10007DC88, 2u, valuePtr, v61, v255);
    v119 = (uint64_t)v118;
    if (v118)
      v120 = *v118;
    else
      v120 = 0;
    sub_10003AC7C((CFTypeRef *)&qword_10007DD18, v120, (uint64_t)"IPv4");
    sub_100033564((const void *)qword_10007DD18, (char *)valuePtr[0], (uint64_t)&Mutable);
    v121 = (os_log_t)qword_10007DC80;
    if (!qword_10007DC80)
    {
      v121 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_10007DC80 = (uint64_t)v121;
    }
    v122 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v121, v122))
    {
      v123 = _os_log_pack_size(2);
      v126 = (char *)&v231 - ((__chkstk_darwin(v123, v124, v125) + 15) & 0xFFFFFFFFFFFFFFF0);
      v127 = __error();
      *(_WORD *)_os_log_pack_fill(v126, v123, *v127, &_mh_execute_header, "electing IPv6 primary") = 0;
      __SC_log_send(7, v121, v122, v126);
    }
    valuePtr[0] = 0;
    v128 = (const void **)sub_10003A24C(qword_10007DD10, v119, (_DWORD *)qword_10007DC88, 0x1Eu, valuePtr, v61, v254);
    if (v128)
      v129 = *v128;
    else
      v129 = 0;
    sub_10003AC7C((CFTypeRef *)&qword_10007DD20, v129, (uint64_t)"IPv6");
    sub_10003AFD0((const void *)qword_10007DD20, (uint64_t)valuePtr[0], (uint64_t)&Mutable);
    if (qword_10007DC88)
      sub_1000324FC((_DWORD *)qword_10007DC88);
    if (qword_10007DD18 && qword_10007DD20)
    {
      v130 = sub_10003B4E8((const __CFDictionary *)qword_10007DD28, (void *)qword_10007DD18, kSCEntNetDNS);
      if (v130 <= sub_10003B4E8((const __CFDictionary *)qword_10007DD30, (void *)qword_10007DD20, kSCEntNetDNS))v131 = (const void *)qword_10007DD18;
      else
        v131 = (const void *)qword_10007DD20;
      v132 = sub_10003B4E8((const __CFDictionary *)qword_10007DD28, (void *)qword_10007DD18, kSCEntNetProxies);
      if (v132 <= sub_10003B4E8((const __CFDictionary *)qword_10007DD30, (void *)qword_10007DD20, kSCEntNetProxies))v133 = (const void *)qword_10007DD18;
      else
        v133 = (const void *)qword_10007DD20;
    }
    else
    {
      if (qword_10007DD20)
        v131 = (const void *)qword_10007DD20;
      else
        v131 = (const void *)qword_10007DD18;
      v133 = v131;
    }
    v134 = (int)v245;
    v135 = sub_10003AC7C((CFTypeRef *)&qword_10007DCE0, v131, (uint64_t)"DNS");
    if (v135)
      v136 = 1;
    else
      v136 = (int)v246;
    v137 = *(_DWORD *)v239;
    if (v135)
      v137 = 1;
    if (sub_10003AC7C((CFTypeRef *)&qword_10007DCE8, v133, (uint64_t)"Proxies"))
      v134 = 1;
    v138 = v136 != 0;
    if (!v134 && v136 && G_supplemental_proxies_follow_dns)
    {
      v134 = CFBooleanGetValue((CFBooleanRef)G_supplemental_proxies_follow_dns) != 0;
      v138 = 1;
    }
LABEL_204:
    v139 = sub_1000329AC((int *)v108, (int *)qword_10007DC88);
    if (v247 || v138 || v233)
    {
      if (qword_10007DC88)
      {
        v142 = v247 | v233;
        v143 = mach_absolute_time();
        v144 = qword_10007DC88;
        *(_QWORD *)(qword_10007DC88 + 32) = v143;
        if (v142)
        {
          LODWORD(valuePtr[0]) = 0;
          LODWORD(v250) = 0;
          sub_10003B58C(v61, (int *)valuePtr, (int *)&v250);
          v144 = qword_10007DC88;
          v145 = (int)v250;
          *(_DWORD *)(qword_10007DC88 + 24) = valuePtr[0];
          *(_DWORD *)(v144 + 28) = v145;
        }
        sub_100032B60((uint64_t)v108, v144, v139);
        v146 = (unsigned int *)qword_10007DC88;
      }
      else
      {
        v146 = 0;
      }
      v141 = sub_10003BD5C(v146);
      if (v141)
        v140 = 1;
      else
        v140 = v136;
    }
    else
    {
      v140 = 0;
      v141 = 0;
    }
    if (!v137)
      goto LABEL_232;
    if (qword_10007DCE0
      && (v147 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_10007DCA8, (const void *)qword_10007DCE0)) != 0)
    {
      v148 = CFDictionaryGetValue(v147, kSCEntNetDNS);
    }
    else
    {
      v148 = 0;
    }
    v149 = (const void *)qword_10007DD98;
    if ((const void *)qword_10007DD98 == v148)
    {
      v150 = 0;
    }
    else
    {
      v150 = 1;
      if (v148 && qword_10007DD98)
      {
        v150 = CFEqual((CFTypeRef)qword_10007DD98, v148) == 0;
LABEL_227:
        CFRetain(v148);
        v149 = (const void *)qword_10007DD98;
LABEL_228:
        if (v149)
          CFRelease(v149);
        qword_10007DD98 = (uint64_t)v148;
        if (v150)
        {
          v141 |= 2u;
          *(_DWORD *)&v239[4] = 1;
          goto LABEL_233;
        }
LABEL_232:
        *(_DWORD *)&v239[4] = 0;
        v151 = 0;
        if (!v140)
          goto LABEL_253;
LABEL_233:
        v152 = (const void *)qword_10007DCE0;
        valuePtr[0] = 0;
        v153 = (const __CFString *)CFDictionaryGetValue(v61, (const void *)qword_10007DCD8);
        v154 = (const __CFArray *)CFDictionaryGetValue(v61, (const void *)qword_10007DCD0);
        if (v152)
        {
          v155 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_10007DCA8, v152);
          if (v155)
            v155 = (const __CFDictionary *)CFDictionaryGetValue(v155, kSCEntNetDNS);
        }
        else
        {
          v155 = 0;
        }
        v156 = sub_100025A34(v155, (const __CFDictionary *)qword_10007DCA8, v236, v153, v154, valuePtr);
        if (!v156)
          goto LABEL_249;
        v157 = (const __CFDictionary *)valuePtr[0];
        v158 = (const void *)qword_10007DDA8;
        if ((CFTypeRef)qword_10007DDA8 == valuePtr[0])
          goto LABEL_242;
        if (valuePtr[0] && qword_10007DDA8)
        {
          if (CFEqual((CFTypeRef)qword_10007DDA8, valuePtr[0]))
          {
LABEL_242:
            sub_100035AAC(Mutable, (const void *)qword_10007DDA0);
LABEL_249:
            if (valuePtr[0])
              CFRelease(valuePtr[0]);
            v151 = v156 != 0;
            if (v156)
              v141 |= 2u;
LABEL_253:
            if (!v134)
            {
              v163 = 0;
              goto LABEL_274;
            }
            if (qword_10007DCE8)
            {
              v162 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_10007DCA8, (const void *)qword_10007DCE8);
              if (v162)
                v162 = (const __CFDictionary *)CFDictionaryGetValue(v162, kSCEntNetProxies);
            }
            else
            {
              v162 = 0;
            }
            v164 = sub_1000470BC(v162, (const __CFDictionary *)qword_10007DCA8, v236, v61);
            if ((__CFDictionary *)qword_10007DDB0 == v164)
            {
              v163 = 0;
              v165 = v164;
              if (!v164)
              {
LABEL_272:
                qword_10007DDB0 = (uint64_t)v164;
                if (v163)
                  v141 |= 4u;
LABEL_274:
                if (v243)
                  v167 = v141 | 0x10;
                else
                  v167 = v141;
                if (v242)
                  CFRelease(v242);
                CFRelease(v61);
                if (v255)
                {
                  CFRelease(v255);
                  v255 = 0;
                }
                *(_DWORD *)v239 = v151;
                if (v254)
                {
                  CFRelease(v254);
                  v254 = 0;
                }
                *(_QWORD *)&v244 = v139;
                if (!v167)
                {
                  sub_10003C058(&Mutable, v234);
                  if (v231)
                    CFRelease(v231);
                  if (v232)
                    CFRelease(v232);
                  v172 = 0;
                  v173 = 1;
                  v174 = v240;
                  goto LABEL_377;
                }
                LODWORD(v237) = v163;
                LODWORD(v238) = v167;
                v241 = (uint64_t)CFStringCreateMutable(0, 0);
                if (!v139)
                {
LABEL_330:
                  v196 = *(_DWORD *)v239;
                  if (!*(_QWORD *)v239)
                  {
                    v199 = v231;
                    v197 = v232;
                    v172 = (CFMutableStringRef)v241;
                    if (qword_10007DCE0)
                      CFStringAppend((CFMutableStringRef)v241, CFSTR(" DNS"));
LABEL_349:
                    if (!(_DWORD)v237)
                    {
                      v174 = v240;
                      if (qword_10007DCE8)
                        CFStringAppend(v172, CFSTR(" Proxy"));
LABEL_363:
                      sub_10003C058(&Mutable, v234);
                      if (v199)
                        CFRelease(v199);
                      if (v197)
                        CFRelease(v197);
                      v204 = (int)v238;
                      if (qword_10007DDD0 != -1)
                        dispatch_once(&qword_10007DDD0, &stru_100076B60);
                      block[0] = _NSConcreteStackBlock;
                      block[1] = 0x40000000;
                      block[2] = sub_10003C390;
                      block[3] = &unk_1000769D8;
                      v249 = v204;
                      dispatch_async((dispatch_queue_t)qword_10007DDD8, block);
                      if (v172)
                      {
                        if (CFStringGetLength(v172))
                        {
                          v205 = (os_log_t)qword_10007DC80;
                          if (!qword_10007DC80)
                          {
                            v205 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
                            qword_10007DC80 = (uint64_t)v205;
                          }
                          v206 = _SC_syslog_os_log_mapping(5);
                          if (__SC_log_enabled(5, v205, v206))
                          {
                            v207 = _os_log_pack_size(12);
                            v210 = (char *)&v231 - ((__chkstk_darwin(v207, v208, v209) + 15) & 0xFFFFFFFFFFFFFFF0);
                            v211 = __error();
                            v212 = _os_log_pack_fill(v210, v207, *v211, &_mh_execute_header, "network changed:%@");
                            *(_DWORD *)v212 = 138412290;
                            *(_QWORD *)(v212 + 4) = v241;
                            __SC_log_send(5, v205, v206, v210);
                          }
                          goto LABEL_387;
                        }
                        v173 = 0;
                      }
                      else
                      {
                        v173 = 1;
                      }
LABEL_377:
                      v213 = CFDictionaryGetCount(v253);
                      v241 = (uint64_t)v172;
                      if (v213 <= 0 && CFArrayGetCount(v252) <= 0 && CFArrayGetCount(Mutable) < 1)
                      {
                        v214 = (os_log_t)qword_10007DC80;
                        if (v243)
                        {
                          if (!qword_10007DC80)
                          {
                            v214 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
                            qword_10007DC80 = (uint64_t)v214;
                          }
                          v215 = _SC_syslog_os_log_mapping(5);
                          if (__SC_log_enabled(5, v214, v215))
                          {
                            v223 = _os_log_pack_size(2);
                            v219 = (char *)&v231 - ((__chkstk_darwin(v223, v224, v225) + 15) & 0xFFFFFFFFFFFFFFF0);
                            v226 = *__error();
                            v221 = (_WORD *)_os_log_pack_fill(v219, v223, v226, &_mh_execute_header, "nat64 update", v231);
                            goto LABEL_384;
                          }
                        }
                        else
                        {
                          if (!qword_10007DC80)
                          {
                            v214 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
                            qword_10007DC80 = (uint64_t)v214;
                          }
                          v215 = _SC_syslog_os_log_mapping(6);
                          if (__SC_log_enabled(6, v214, v215))
                          {
                            v227 = _os_log_pack_size(2);
                            v219 = (char *)&v231 - ((__chkstk_darwin(v227, v228, v229) + 15) & 0xFFFFFFFFFFFFFFF0);
                            v230 = __error();
                            *(_WORD *)_os_log_pack_fill(v219, v227, *v230, &_mh_execute_header, "network event w/no changes") = 0;
                            v222 = 6;
                            goto LABEL_385;
                          }
                        }
                      }
                      else
                      {
                        v214 = (os_log_t)qword_10007DC80;
                        if (!qword_10007DC80)
                        {
                          v214 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
                          qword_10007DC80 = (uint64_t)v214;
                        }
                        v215 = _SC_syslog_os_log_mapping(5);
                        if (__SC_log_enabled(5, v214, v215))
                        {
                          v216 = _os_log_pack_size(2);
                          v219 = (char *)&v231 - ((__chkstk_darwin(v216, v217, v218) + 15) & 0xFFFFFFFFFFFFFFF0);
                          v220 = *__error();
                          v221 = (_WORD *)_os_log_pack_fill(v219, v216, v220, &_mh_execute_header, "network changed", v231);
LABEL_384:
                          *v221 = 0;
                          v222 = 5;
LABEL_385:
                          __SC_log_send(v222, v214, v215, v219);
                        }
                      }
                      if ((v173 & 1) != 0)
                      {
LABEL_388:
                        if ((_QWORD)v244)
                          free((void *)v244);
                        if (v174)
                          free(v174);
                        if (Mutable)
                        {
                          CFRelease(Mutable);
                          Mutable = 0;
                        }
                        if (v252)
                        {
                          CFRelease(v252);
                          v252 = 0;
                        }
                        if (v253)
                        {
                          CFRelease(v253);
                          v253 = 0;
                        }
                        sub_10002DB58();
                        sub_10002D2F0();
                        sub_10002DE04();
                        sub_10002DFB0();
                        return;
                      }
LABEL_387:
                      CFRelease((CFTypeRef)v241);
                      goto LABEL_388;
                    }
                    v174 = v240;
                    if (qword_10007DCE8)
                    {
                      v202 = sub_100033308((void *)qword_10007DCE8, kSCEntNetProxies);
                      if (!v197)
                      {
                        if (v202)
                        {
                          v203 = "+";
                          goto LABEL_362;
                        }
                        goto LABEL_361;
                      }
                      if (v202)
                      {
                        if (!CFEqual(v197, v202))
                        {
                          v203 = "!";
LABEL_362:
                          CFStringAppendFormat(v172, 0, CFSTR(" Proxy%s"), v203);
                          goto LABEL_363;
                        }
LABEL_361:
                        v203 = "";
                        goto LABEL_362;
                      }
                    }
                    else if (!v197)
                    {
                      goto LABEL_361;
                    }
                    v203 = "-";
                    goto LABEL_362;
                  }
                  v197 = v232;
                  if (qword_10007DCE0)
                  {
                    v198 = sub_100033308((void *)qword_10007DCE0, kSCEntNetDNS);
                    v199 = v231;
                    if (!v231)
                    {
                      v172 = (CFMutableStringRef)v241;
                      if (v198)
                      {
                        v200 = "+";
                        goto LABEL_343;
                      }
                      goto LABEL_342;
                    }
                    v172 = (CFMutableStringRef)v241;
                    if (v198)
                    {
                      if (!CFEqual(v231, v198))
                      {
                        v200 = "!";
LABEL_343:
                        if (*v200)
                          v201 = 1;
                        else
                          v201 = v196 == 0;
                        if (!v201)
                          v200 = "*";
                        CFStringAppendFormat(v172, 0, CFSTR(" DNS%s"), v200);
                        goto LABEL_349;
                      }
LABEL_342:
                      v200 = "";
                      goto LABEL_343;
                    }
                  }
                  else
                  {
                    v199 = v231;
                    v172 = (CFMutableStringRef)v241;
                    if (!v231)
                      goto LABEL_342;
                  }
                  v200 = "-";
                  goto LABEL_343;
                }
                v168 = qword_10007DC88;
                v169 = sub_10002D628();
                v170 = v240;
                if (!((unint64_t)v240 | v168))
                  goto LABEL_286;
                if (v240)
                {
                  if (v168)
                  {
                    v175 = *(_DWORD *)(v168 + 16);
                    if (v175 == *((_DWORD *)v240 + 4))
                    {
                      if (v175 < 1)
                      {
LABEL_286:
                        v171 = v169 != -1;
                        goto LABEL_302;
                      }
                      v176 = (int *)((char *)v240 + 224 * *((int *)v240 + 1) + 40);
                      v177 = (int *)(v168 + 224 * *(int *)(v168 + 4) + 40);
                      while (!strcmp((const char *)(v168 + 112 * *v177 + 40), (const char *)v170 + 112 * *v176 + 40))
                      {
                        ++v177;
                        ++v176;
                        if (!--v175)
                          goto LABEL_286;
                      }
                    }
                  }
                }
                if (v169 == -1)
                {
                  LODWORD(v245) = 0;
LABEL_303:
                  v178 = v244;
                  v179 = 0;
                  v242 = (const __CFArray *)(v244 + 40);
                  v180 = 1;
                  v181 = 52;
                  do
                  {
                    v246 = (CFStringRef)v181;
                    v182 = v180;
                    v183 = byte_10006968C[v179];
                    if ((_DWORD)v245)
                    {
                      v184 = 12;
                      if ((v182 & 1) != 0)
                        v184 = 8;
                      v185 = v242;
                      if (!v182)
                        v185 = (const __CFArray *)((char *)v242 + 112 * *(int *)(v178 + 4));
                      v186 = *(_DWORD *)(v178 + v184);
                      if (v186 >= 1)
                      {
                        do
                        {
                          sub_100044F94((uint64_t)v185, v183, v169);
                          v185 = (const __CFArray *)((char *)v185 + 112);
                          --v186;
                        }
                        while (v186);
                      }
                    }
                    v247 = v182;
                    first_ifstate = nwi_state_get_first_ifstate(v178, v183);
                    if (first_ifstate)
                    {
                      next = first_ifstate;
                      v189 = 0;
                      v190 = 0;
                      do
                      {
                        v191 = "?";
                        if ((*(_QWORD *)(next + 16) & 0xE00uLL) <= 0x5FF)
                          v191 = (const char *)*((_QWORD *)&off_1000767E8 + ((*(_QWORD *)(next + 16) >> 8) & 0xFLL));
                        v192 = inet_ntop(*(unsigned __int8 *)(next + 32), (const void *)(next + 36), (char *)valuePtr, 0x2Eu);
                        if (v189)
                        {
                          if (!v190)
                            v190 = CFStringCreateMutable(0, 0);
                          ifname = nwi_ifstate_get_ifname(next);
                          CFStringAppendFormat(v190, 0, CFSTR(", %s"), ifname);
                          if (*v191)
                            CFStringAppendFormat(v190, 0, CFSTR("%s:%s"), v191, v192);
                        }
                        else
                        {
                          v189 = CFStringCreateMutable(0, 0);
                          v194 = nwi_ifstate_get_ifname(next);
                          CFStringAppendFormat(v189, 0, CFSTR("%s%s:%s"), v194, v191, v192);
                        }
                        next = nwi_ifstate_get_next(next, *(unsigned __int8 *)(next + 32));
                      }
                      while (next);
                      v178 = v244;
                      if (v189)
                      {
                        v195 = (__CFString *)v241;
                        CFStringAppendFormat((CFMutableStringRef)v241, 0, CFSTR(" v%c(%@"), v246, v189);
                        if (v190)
                        {
                          if (CFStringGetLength(v190))
                            CFStringAppendFormat(v195, 0, CFSTR("%@"), v190);
                          CFStringAppend(v195, CFSTR(")"));
                          CFRelease(v189);
                        }
                        else
                        {
                          CFStringAppend(v195, CFSTR(")"));
                          v190 = v189;
                        }
                        CFRelease(v190);
                      }
                    }
                    v180 = 0;
                    v181 = 54;
                    v179 = &_mh_execute_header.magic + 1;
                  }
                  while ((v247 & 1) != 0);
                  goto LABEL_330;
                }
                sub_100044CC0(v168, v169);
                v171 = 1;
LABEL_302:
                LODWORD(v245) = v171;
                goto LABEL_303;
              }
LABEL_271:
              CFRelease(v165);
              goto LABEL_272;
            }
            if (v164 && qword_10007DDB0)
            {
              if (CFEqual((CFTypeRef)qword_10007DDB0, v164))
              {
                v163 = 0;
                goto LABEL_270;
              }
            }
            else if (!v164)
            {
              v166 = (const void *)qword_10007DDB8;
              sub_100035AAC(v252, (const void *)qword_10007DDB8);
              CFDictionaryRemoveValue(v253, v166);
              goto LABEL_269;
            }
            sub_100035784((uint64_t)&Mutable, (const void *)qword_10007DDB8, v164);
LABEL_269:
            v163 = 1;
LABEL_270:
            v165 = (__CFDictionary *)qword_10007DDB0;
            if (!qword_10007DDB0)
              goto LABEL_272;
            goto LABEL_271;
          }
        }
        else if (!valuePtr[0])
        {
          v159 = 1;
          if (!qword_10007DDA8)
          {
LABEL_246:
            qword_10007DDA8 = (uint64_t)v157;
            if (v159)
            {
              v160 = (const void *)qword_10007DDA0;
              sub_100035AAC(v252, (const void *)qword_10007DDA0);
              CFDictionaryRemoveValue(v253, v160);
            }
            else
            {
              MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v157);
              CFDictionaryRemoveValue(MutableCopy, kSCPropInterfaceName);
              CFDictionaryRemoveValue(MutableCopy, kSCPropNetDNSSupplementalMatchDomains);
              CFDictionaryRemoveValue(MutableCopy, kSCPropNetDNSSupplementalMatchOrders);
              CFDictionaryRemoveValue(MutableCopy, CFSTR("__SCOPED_QUERY__"));
              sub_100035784((uint64_t)&Mutable, (const void *)qword_10007DDA0, MutableCopy);
              CFRelease(MutableCopy);
            }
            goto LABEL_249;
          }
LABEL_245:
          CFRelease(v158);
          goto LABEL_246;
        }
        CFRetain(v157);
        v159 = 0;
        v158 = (const void *)qword_10007DDA8;
        if (!qword_10007DDA8)
          goto LABEL_246;
        goto LABEL_245;
      }
    }
    if (!v148)
      goto LABEL_228;
    goto LABEL_227;
  }
}

const void *sub_1000397B4(CFStringRef theString, _QWORD *a2)
{
  const __CFArray *ArrayBySeparatingStrings;
  CFIndex Count;
  const void *v5;
  CFIndex v6;
  const void *ValueAtIndex;

  ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, theString, CFSTR("/"));
  Count = CFArrayGetCount(ArrayBySeparatingStrings);
  v5 = 0;
  if (Count < 4
    || (v6 = Count, v5 = CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 3), CFRetain(v5), !a2)
    || v6 == 4)
  {
    if (!a2)
      goto LABEL_8;
    ValueAtIndex = 0;
  }
  else
  {
    ValueAtIndex = CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 4);
    CFRetain(ValueAtIndex);
  }
  *a2 = ValueAtIndex;
LABEL_8:
  if (ArrayBySeparatingStrings)
    CFRelease(ArrayBySeparatingStrings);
  return v5;
}

void sub_10003988C(__CFSet **a1, void *value)
{
  __CFSet *Mutable;

  Mutable = *a1;
  if (!Mutable)
  {
    Mutable = CFSetCreateMutable(0, 0, &kCFTypeSetCallBacks);
    *a1 = Mutable;
  }
  CFSetAddValue(Mutable, value);
}

void sub_100039900(__int16 a1, CFTypeRef cf)
{
  _QWORD block[5];
  __int16 v5;

  CFRetain(cf);
  if (qword_10007DDD0 != -1)
    dispatch_once(&qword_10007DDD0, &stru_100076B60);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_10003C3D8;
  block[3] = &unk_1000769F8;
  v5 = a1;
  block[4] = cf;
  dispatch_async((dispatch_queue_t)qword_10007DDD8, block);
}

void sub_1000399C8(const __CFArray *a1, const void *a2)
{
  const void **v3;
  __int128 v4;
  uint64_t v5;
  CFStringRef v6;
  const void **v7;
  const void *v8;
  const __CFDictionary *v9;
  const __CFDictionary *Value;
  const void *v11;
  os_log_t v12;
  uint64_t v13;
  const void **v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  const void **v24;
  CFStringRef v25;
  const __CFArray *v26;
  CFStringRef v27;
  CFIndex Count;
  void *keys[2];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  v26 = a1;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  *(_OWORD *)keys = 0u;
  v30 = 0u;
  Count = CFDictionaryGetCount((CFDictionaryRef)qword_10007DCA8);
  if (Count >= 11)
  {
    v3 = (const void **)malloc_type_malloc(16 * Count, 0xD8C49524uLL);
    CFDictionaryGetKeysAndValues((CFDictionaryRef)qword_10007DCA8, v3, &v3[Count]);
  }
  else
  {
    v3 = (const void **)keys;
    CFDictionaryGetKeysAndValues((CFDictionaryRef)qword_10007DCA8, (const void **)keys, (const void **)&keys[Count]);
    if (Count < 1)
      return;
  }
  v5 = 0;
  v6 = kSCEntNetIPv4;
  v27 = kSCEntNetIPv6;
  v7 = &v3[Count];
  *(_QWORD *)&v4 = 138412546;
  v23 = v4;
  v25 = kSCEntNetIPv4;
  v24 = v3;
  do
  {
    v8 = v3[v5];
    v9 = (const __CFDictionary *)v7[v5];
    Value = (const __CFDictionary *)CFDictionaryGetValue(v9, v6);
    if (Value || (Value = (const __CFDictionary *)CFDictionaryGetValue(v9, v27)) != 0)
    {
      v11 = sub_1000331E4(Value);
      if (v11)
      {
        if (CFEqual(v11, a2))
        {
          v12 = (os_log_t)qword_10007DC80;
          if (!qword_10007DC80)
          {
            v12 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
            qword_10007DC80 = (uint64_t)v12;
          }
          v13 = _SC_syslog_os_log_mapping(7);
          if (__SC_log_enabled(7, v12, v13))
          {
            v14 = v7;
            v15 = a2;
            v16 = _os_log_pack_size(22);
            v19 = (char *)&v23 - ((__chkstk_darwin(v16, v17, v18) + 15) & 0xFFFFFFFFFFFFFFF0);
            v20 = __error();
            v21 = v16;
            a2 = v15;
            v7 = v14;
            v22 = _os_log_pack_fill(v19, v21, *v20, &_mh_execute_header, "Found IP service %@ on interface %@");
            *(_DWORD *)v22 = v23;
            *(_QWORD *)(v22 + 4) = v8;
            *(_WORD *)(v22 + 12) = 2112;
            *(_QWORD *)(v22 + 14) = a2;
            __SC_log_send(7, v12, v13, v19);
            v3 = v24;
            v6 = v25;
          }
          sub_100035AAC(v26, v8);
        }
      }
    }
    ++v5;
  }
  while (Count != v5);
  if (v3 != (const void **)keys)
    free(v3);
}

const void *sub_100039C7C(const void *a1, CFStringRef serviceID, CFStringRef entity)
{
  CFStringRef NetworkServiceEntity;
  const void *v5;

  NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainState, serviceID, entity);
  v5 = sub_10003C80C(a1, NetworkServiceEntity);
  if (NetworkServiceEntity)
    CFRelease(NetworkServiceEntity);
  return v5;
}

void sub_100039D0C(CFTypeRef *a1)
{
  int v2;
  CFTypeRef *v3;
  const void *v4;
  const void *v5;

  if (*((int *)a1 + 1) >= 1)
  {
    v2 = 0;
    v3 = a1 + 15;
    do
    {
      v4 = *(v3 - 13);
      if (v4)
      {
        CFRelease(v4);
        *(v3 - 13) = 0;
      }
      v5 = *(v3 - 12);
      if (v5)
      {
        CFRelease(v5);
        *(v3 - 12) = 0;
      }
      if (*v3)
      {
        CFRelease(*v3);
        *v3 = 0;
      }
      ++v2;
      v3 += 14;
    }
    while (v2 < *((_DWORD *)a1 + 1));
  }
  free(a1);
}

void *sub_100039DC0(int a1, const __CFArray *a2)
{
  unsigned int Count;
  unsigned int v5;
  uint64_t *v6;
  _DWORD *v7;
  void *result;
  _DWORD v9[2];
  const __CFArray *v10;
  CFIndex v11;
  void *v12;
  uint64_t v13;

  Count = CFDictionaryGetCount((CFDictionaryRef)qword_10007DCA8);
  v5 = Count;
  if (!Count)
    return 0;
  v9[0] = a1;
  v11 = 0;
  v6 = &qword_10007DD28;
  if (a1 != 2)
    v6 = &qword_10007DD30;
  v13 = *v6;
  v7 = malloc_type_malloc(112 * Count + 16, 0x25491112uLL);
  *v7 = a1;
  v7[1] = 0;
  v7[2] = v5;
  v9[1] = v5;
  v12 = v7;
  v10 = a2;
  if (a2)
    v11 = CFArrayGetCount(a2);
  else
    v10 = 0;
  CFDictionaryApplyFunction((CFDictionaryRef)qword_10007DCA8, (CFDictionaryApplierFunction)sub_100041EB4, v9);
  result = v12;
  if (!*((_DWORD *)v12 + 1))
  {
    sub_100039D0C((CFTypeRef *)v12);
    return 0;
  }
  return result;
}

uint64_t sub_100039EC8(int *a1, uint64_t a2)
{
  os_log_t v3;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  int v12;
  int v13;
  char *v14;
  os_log_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  int *v28;
  uint64_t v29;
  __int128 v30;
  char v31[46];

  v3 = (os_log_t)qword_10007DC80;
  if (a1)
  {
    if (!qword_10007DC80)
    {
      v3 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_10007DC80 = (uint64_t)v3;
    }
    v5 = _SC_syslog_os_log_mapping(6);
    result = __SC_log_enabled(6, v3, v5);
    if ((_DWORD)result)
    {
      v8 = _os_log_pack_size(18);
      v9 = &v31[-((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0) - 6];
      v10 = __error();
      v11 = _os_log_pack_fill(v9, v8, *v10, &_mh_execute_header, "%s: %d candidates", (const char *)v30, DWORD2(v30));
      v12 = a1[1];
      *(_DWORD *)v11 = 136315394;
      *(_QWORD *)(v11 + 4) = a2;
      *(_WORD *)(v11 + 12) = 1024;
      *(_DWORD *)(v11 + 14) = v12;
      result = __SC_log_send(6, v3, v5, v9);
    }
    if (a1[1] >= 1)
    {
      v13 = 0;
      v14 = (char *)(a1 + 19);
      *(_QWORD *)&v7 = 67110402;
      v30 = v7;
      do
      {
        inet_ntop(*a1, v14, v31, 0x2Eu);
        v15 = (os_log_t)qword_10007DC80;
        if (!qword_10007DC80)
        {
          v15 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
          qword_10007DC80 = (uint64_t)v15;
        }
        v16 = _SC_syslog_os_log_mapping(6);
        result = __SC_log_enabled(6, v15, v16);
        if ((_DWORD)result)
        {
          v17 = _os_log_pack_size(54);
          v18 = &v31[-((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0) - 6];
          v19 = __error();
          v20 = _os_log_pack_fill(v18, v17, *v19, &_mh_execute_header, "%d. %@ serviceID=%@ addr=%s rank=0x%x%s");
          v21 = *(_QWORD *)(v14 - 52);
          v22 = *(_QWORD *)(v14 - 60);
          v23 = *((_DWORD *)v14 - 5);
          v24 = " [ineligible]";
          if (!*((_DWORD *)v14 - 2))
            v24 = "";
          *(_DWORD *)v20 = v30;
          *(_DWORD *)(v20 + 4) = v13;
          *(_WORD *)(v20 + 8) = 2112;
          *(_QWORD *)(v20 + 10) = v21;
          *(_WORD *)(v20 + 18) = 2112;
          *(_QWORD *)(v20 + 20) = v22;
          *(_WORD *)(v20 + 28) = 2080;
          *(_QWORD *)(v20 + 30) = v31;
          *(_WORD *)(v20 + 38) = 1024;
          *(_DWORD *)(v20 + 40) = v23;
          *(_WORD *)(v20 + 44) = 2080;
          *(_QWORD *)(v20 + 46) = v24;
          result = __SC_log_send(6, v15, v16, v18);
        }
        ++v13;
        v14 += 112;
      }
      while (v13 < a1[1]);
    }
  }
  else
  {
    if (!qword_10007DC80)
    {
      v3 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_10007DC80 = (uint64_t)v3;
    }
    v25 = _SC_syslog_os_log_mapping(6);
    result = __SC_log_enabled(6, v3, v25);
    if ((_DWORD)result)
    {
      v26 = _os_log_pack_size(12);
      v27 = &v31[-((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0) - 6];
      v28 = __error();
      v29 = _os_log_pack_fill(v27, v26, *v28, &_mh_execute_header, "%s: no candidates", (const char *)v30);
      *(_DWORD *)v29 = 136315138;
      *(_QWORD *)(v29 + 4) = a2;
      return __SC_log_send(6, v3, v25, v27);
    }
  }
  return result;
}

_DWORD *sub_10003A24C(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned int a4, _QWORD *a5, const __CFDictionary *a6, const __CFSet *a7)
{
  uint64_t v8;
  unint64_t v12;
  uint64_t *v13;
  size_t v14;
  __int128 v15;
  int v16;
  int v17;
  const CFStringRef *v18;
  int v19;
  int *v20;
  uint64_t v21;
  _DWORD *v22;
  BOOL v23;
  int v24;
  int v25;
  int v26;
  uint64_t (**v27)();
  uint64_t (*v28)(uint64_t);
  uint64_t (*v29)(uint64_t);
  size_t v30;
  size_t v31;
  BOOL v32;
  unsigned int v33;
  unsigned int v34;
  const void **v35;
  const __CFDictionary *v36;
  const UInt8 *v37;
  const UInt8 *v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  const UInt8 *v43;
  size_t v44;
  __int16 v45;
  size_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  unsigned int v54;
  const void *v55;
  const void *v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  size_t v67;
  int *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  _BOOL4 v72;
  int v73;
  int v74;
  __int16 v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  _DWORD *v80;
  uint64_t v81;
  _DWORD *v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  os_log_t v88;
  uint64_t v89;
  int v90;
  _DWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  int *v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  int v101;
  int v102;
  char v103;
  const __CFDictionary *v104;
  uint64_t v105;
  _DWORD *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  _DWORD *result;
  __int128 v111;
  int v112;
  int v113;
  __int128 *v114;
  _QWORD *v115;
  uint64_t *v116;
  int v117;
  _DWORD *v118;
  unsigned int v119;
  const __CFDictionary *v120;
  uint64_t v121;
  uint64_t v122;
  CFSetRef v123;
  CFStringRef v124;
  int v125;
  int v126;
  _DWORD *v127;
  int v128;
  int v129;
  _DWORD *v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t (*v134)(uint64_t);
  const UInt8 *v135;
  int v136;
  int v137;
  int v138;
  unsigned int v139;
  size_t v140;
  size_t v141;

  if (!a6)
    sub_100065B74();
  v8 = a1;
  if (a1)
  {
    v121 = a2;
    v123 = a7;
    __chkstk_darwin(a1, a2, a3);
    v13 = (uint64_t *)((char *)&v111 - ((v12 + 15) & 0xFFFFFFFF0));
    if (v12 >= 0x200)
      v14 = 512;
    else
      v14 = v12;
    bzero((char *)&v111 - ((v12 + 15) & 0xFFFFFFFF0), v14);
    v16 = *(_DWORD *)(v8 + 4);
    if (a4 == 2)
      v17 = 5;
    else
      v17 = 3;
    v18 = &kSCEntNetIPv4;
    if (a4 != 2)
      v18 = &kSCEntNetIPv6;
    if (v16 >= 1)
    {
      v116 = v13;
      v114 = &v111;
      v118 = a3;
      v120 = a6;
      v115 = a5;
      v127 = 0;
      v19 = 0;
      v20 = 0;
      v117 = 0;
      v21 = (v16 * v17);
      v124 = *v18;
      v22 = (_DWORD *)(v8 + 16);
      v119 = a4;
      v23 = a4 == 2;
      v24 = 0;
      if (v23)
        v25 = 52;
      else
        v25 = 54;
      v113 = v25;
      if (v23)
        v26 = 54;
      else
        v26 = 52;
      v112 = v26;
      v131 = (int)v21;
      v132 = v21;
      v27 = off_100076AA8;
      if (v23)
      {
        v27 = off_100076918;
        v28 = sub_100035F84;
      }
      else
      {
        v28 = sub_1000404A8;
      }
      if (v23)
        v29 = sub_100036434;
      else
        v29 = sub_100043224;
      v30 = 16;
      if (v23)
        v30 = 4;
      v31 = *((int *)v27 + 18);
      v140 = v30;
      v141 = v31;
      *(_QWORD *)&v15 = 67110402;
      v111 = v15;
      v122 = v8;
      v134 = v28;
      while (1)
      {
        if (v22[13])
          v32 = 0;
        else
          v32 = v127 == 0;
        v130 = v22;
        if (v32)
        {
          v33 = v22[10];
          if (HIBYTE(v33) != 3)
          {
            if (!v121)
              goto LABEL_37;
            if (*(_DWORD *)(v121 + 52))
              goto LABEL_37;
            v34 = *(_DWORD *)(v121 + 40);
            if (HIBYTE(v34) == 3)
              goto LABEL_37;
            v22 = v130;
            if (v130[11])
            {
              v128 = 0;
              v129 = 1;
              goto LABEL_39;
            }
            if (*(_DWORD *)(v121 + 44))
              goto LABEL_37;
            v83 = v130[12];
            if (!v83 && !*(_DWORD *)(v121 + 48) || (v84 = *(_DWORD *)(v121 + 32), v85 = v130[8], v84 == v85))
            {
              v128 = 0;
              v129 = 1;
              v127 = v130;
              v22 = v130;
              goto LABEL_40;
            }
            if (*(_DWORD *)(v121 + 36) == v85)
            {
LABEL_37:
              v128 = 0;
              v129 = 1;
            }
            else
            {
              v128 = 0;
              v129 = 1;
              if (v33 >= v34 && v130[9] != v84)
              {
                v86 = *(_DWORD *)(v121 + 48);
                if (v83)
                {
                  if (v33 != v34 || !v86)
                    goto LABEL_162;
                  goto LABEL_37;
                }
                v128 = 0;
                v129 = 1;
                if (v33 != v34 && v86)
                {
LABEL_162:
                  v87 = v24;
                  v88 = (os_log_t)qword_10007DC80;
                  if (!qword_10007DC80)
                  {
                    v88 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
                    qword_10007DC80 = (uint64_t)v88;
                  }
                  v89 = _SC_syslog_os_log_mapping(5);
                  v90 = __SC_log_enabled(5, v88, v89);
                  v91 = v130;
                  if (v90)
                  {
                    v92 = _os_log_pack_size(46);
                    v95 = (char *)&v111 - ((__chkstk_darwin(v92, v93, v94) + 15) & 0xFFFFFFFFFFFFFFF0);
                    v96 = __error();
                    v97 = _os_log_pack_fill(v95, v92, *v96, &_mh_execute_header, "IPv%c over %@ (rank 0x%x) demoted: primary IPv%c %@ (rank 0x%x)");
                    v98 = *((_QWORD *)v91 + 1);
                    v99 = v91[10];
                    v100 = *(_QWORD *)(v121 + 8);
                    v101 = *(_DWORD *)(v121 + 40);
                    *(_DWORD *)v97 = v111;
                    *(_DWORD *)(v97 + 4) = v113;
                    *(_WORD *)(v97 + 8) = 2112;
                    *(_QWORD *)(v97 + 10) = v98;
                    *(_WORD *)(v97 + 18) = 1024;
                    *(_DWORD *)(v97 + 20) = v99;
                    *(_WORD *)(v97 + 24) = 1024;
                    *(_DWORD *)(v97 + 26) = v112;
                    *(_WORD *)(v97 + 30) = 2112;
                    *(_QWORD *)(v97 + 32) = v100;
                    *(_WORD *)(v97 + 40) = 1024;
                    *(_DWORD *)(v97 + 42) = v101;
                    __SC_log_send(5, v88, v89, v95);
                  }
                  v129 = 0;
                  v127 = 0;
                  v102 = v117;
                  v116[v117] = (uint64_t)v91;
                  v128 = 1;
                  v117 = v102 + 1;
                  v8 = v122;
                  v24 = v87;
                  v22 = v91;
                  v28 = v134;
                  goto LABEL_40;
                }
              }
            }
            v22 = v130;
LABEL_39:
            v127 = v22;
            goto LABEL_40;
          }
          v127 = 0;
          v128 = 1;
          v129 = 1;
          v22 = v130;
        }
        else
        {
          v128 = 1;
          v129 = 1;
        }
LABEL_40:
        v35 = (const void **)v22;
        v36 = (const __CFDictionary *)sub_100033308(*(void **)v22, v124);
        v37 = sub_10003564C(v36);
        if (!v37)
          goto LABEL_141;
        v38 = v37;
        v39 = *((_DWORD *)v35 + 10);
        v40 = v39 & 0xFFFFFF | 0x3000000;
        if (v129)
          v40 = *((_DWORD *)v35 + 10);
        v133 = v40;
        if (v123)
          v136 = CFSetContainsValue(v123, *v35);
        else
          v136 = 0;
        v125 = v24;
        v126 = v19;
        v41 = v28(0);
        if (*(int *)v38 < 1)
          goto LABEL_134;
        v42 = 0;
        v137 = v39 & 0xFFFFFF;
        v43 = &v38[v41];
        v44 = v141;
        v135 = v38;
        do
        {
          if (v42 || (v45 = *((_WORD *)v38 + 4), v139 = v133, (v45 & 2) == 0))
            v139 = v137 | (v43[15] << 24);
          if (!v20)
          {
            v46 = v28(v131);
            v20 = (int *)malloc_type_malloc(v46, 0xE392A645uLL);
            bzero(v20, v46);
            v20[1] = v132;
          }
          v138 = v42;
          v47 = v28(0);
          LODWORD(v48) = *v20;
          if (*v20 < 1)
          {
            v49 = 0;
            v53 = -1;
LABEL_93:
            if (v20[1] == (_DWORD)v48)
            {
              v66 = 2 * v48;
              v67 = v28(2 * (int)v48);
              v68 = (int *)reallocf(v20, v67);
              v20 = v68;
              if (!v68)
                goto LABEL_117;
              v68[1] = v66;
            }
            if (v53 == -1)
            {
              v70 = (char *)v20 + v28(*v20);
            }
            else
            {
              v69 = v28(v53);
              v70 = (char *)v20 + v69;
              memmove((char *)v20 + v69 + v44, (char *)v20 + v69, (*v20 - v53) * v44);
            }
            memcpy(v70, v43, v44);
            v71 = *v20 + 1;
            *v20 = v71;
            *((_DWORD *)v70 + 3) = v139;
            if (v136)
              *((_WORD *)v70 + 9) |= 4u;
            v72 = HIBYTE(v139) == 3;
            if (v49 == 2)
            {
              if (!(_DWORD)v71 || v53 + 1 >= v71)
              {
LABEL_117:
                v73 = v138;
                goto LABEL_118;
              }
              v70 = (char *)v20 + ((uint64_t (*)(void))v28)();
            }
            else if (v49 != 1)
            {
              goto LABEL_114;
            }
            v72 = 1;
LABEL_114:
            v73 = v138;
            if (v70 && v72)
              *((_WORD *)v70 + 8) |= 1u;
            goto LABEL_118;
          }
          v49 = 0;
          v50 = 0;
          v51 = 0;
          v52 = (char *)v20 + v47;
          v53 = -1;
          while (1)
          {
            v54 = *((_DWORD *)v52 + 3);
            v55 = (const void *)v29((uint64_t)v43);
            v56 = (const void *)v29((uint64_t)v52);
            v57 = memcmp(v55, v56, v140);
            if (!v57)
            {
              v57 = *(_DWORD *)v43 - *(_DWORD *)v52;
              if (*(_DWORD *)v43 == *(_DWORD *)v52)
                break;
            }
            v58 = 0;
            v59 = 1;
LABEL_58:
            if ((v58 & (v50 == 0)) != 0)
              v50 = v52;
            if ((v57 & 0x80000000) == 0)
            {
              if (!v57)
                goto LABEL_98;
              if (v49 <= 1)
                v60 = 1;
              else
                v60 = v49;
              if (!v59)
                v49 = v60;
              goto LABEL_77;
            }
            if (v53 == -1)
            {
              if (v50)
                v61 = v58;
              else
                v61 = 0;
              if (v61 != 1)
                goto LABEL_76;
              v53 = v51;
              if ((*((_WORD *)v50 + 8) & 1) == 0)
              {
                if ((*((_WORD *)v52 + 8) & 1) != 0)
                  v49 = 1;
                else
                  v49 = 2;
LABEL_76:
                v53 = v51;
              }
            }
LABEL_77:
            ++v51;
            v52 += v141;
            v48 = *v20;
            if (v51 >= v48)
            {
              v28 = v134;
              v44 = v141;
LABEL_92:
              v38 = v135;
              goto LABEL_93;
            }
          }
          v62 = *((_DWORD *)v43 + 1);
          v63 = *((_DWORD *)v52 + 1);
          v64 = v62 - v63;
          if (v62 != v63 && (v62 && v63 || (*((_WORD *)v43 + 8) & 1) != 0 || (*((_WORD *)v52 + 8) & 1) != 0))
          {
            v59 = 0;
            if (v54 > v139)
              v65 = -1;
            else
              v65 = 1;
            if (v54 == v139)
              v57 = v64;
            else
              v57 = v65;
            v58 = 1;
            goto LABEL_58;
          }
LABEL_98:
          if (v53 != -1
            && *((_DWORD *)v52 + 1) == *((_DWORD *)v43 + 1)
            && !*((_DWORD *)v52 + 2)
            && !*((_DWORD *)v43 + 2))
          {
            LODWORD(v48) = *v20;
            v28 = v134;
            v44 = v141;
            if (*v20 && v51 < (int)v48)
            {
              v77 = (int)v48 - 1;
              *v20 = v77;
              if (v77 == v51)
              {
                LODWORD(v48) = v48 - 1;
              }
              else
              {
                v78 = v28(v51);
                memmove((char *)v20 + v78, (char *)v20 + v78 + v44, (*v20 - v51) * v44);
                LODWORD(v48) = *v20;
              }
            }
            goto LABEL_92;
          }
          v28 = v134;
          v44 = v141;
          if (*((_DWORD *)v43 + 2))
          {
            v38 = v135;
            goto LABEL_117;
          }
          v38 = v135;
          v73 = v138;
          if (*((_DWORD *)v52 + 2) || *((_DWORD *)v52 + 3) > v139)
          {
            v74 = *((_DWORD *)v52 + 1);
            if (!v74)
              v74 = *((_DWORD *)v43 + 1);
            v75 = *((_WORD *)v52 + 8);
            memcpy(v52, v43, v141);
            v76 = v139;
            *((_DWORD *)v52 + 2) = 0;
            *((_DWORD *)v52 + 3) = v76;
            *((_DWORD *)v52 + 1) = v74;
            if ((v75 & 1) != 0)
              *((_WORD *)v52 + 8) |= 1u;
            if (v136)
              *((_WORD *)v52 + 9) |= 4u;
            v44 = v141;
          }
LABEL_118:
          v42 = v73 + 1;
          v43 += v44;
        }
        while (v42 < *(_DWORD *)v38);
LABEL_134:
        v79 = v129;
        if ((*((_WORD *)v38 + 4) & 1) != 0)
          v79 = 0;
        if ((v79 & 1) != 0)
        {
          v80 = v130;
          v24 = v125;
          v19 = v126;
          v8 = v122;
          if (!v130[13])
          {
            v81 = v119;
            sub_100042830((uint64_t)v130, v120, v119);
            sub_100042C10(v118, v81, (uint64_t)v80, v19, (v38[8] >> 2) & 1);
          }
          v82 = v80;
          goto LABEL_144;
        }
        v24 = v125;
        v19 = v126;
        v8 = v122;
LABEL_141:
        if (!v128)
          v19 = 1;
        v82 = v130;
LABEL_144:
        ++v24;
        v22 = v82 + 28;
        if (v24 >= *(_DWORD *)(v8 + 4))
        {
          v103 = v19;
          v104 = v120;
          v105 = v119;
          v106 = v118;
          v107 = v116;
          if (v117 >= 1)
          {
            v108 = v117;
            do
            {
              v109 = *v107++;
              sub_100042830(v109, v104, v105);
              sub_100042C10(v106, v105, v109, 1, 0);
              --v108;
            }
            while (v108);
          }
          a5 = v115;
          if (v115)
          {
            result = v127;
            goto LABEL_174;
          }
          if (v20)
            free(v20);
          result = v127;
LABEL_175:
          if (v103)
            return 0;
          return result;
        }
      }
    }
  }
  result = 0;
  if (a5)
  {
    v103 = 0;
    v20 = 0;
LABEL_174:
    *a5 = v20;
    goto LABEL_175;
  }
  return result;
}

uint64_t sub_10003AC7C(CFTypeRef *a1, CFTypeRef cf, uint64_t a3)
{
  CFTypeRef v5;
  os_log_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  os_log_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int *v18;
  uint64_t v19;
  os_log_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;

  v5 = *a1;
  if (!cf)
  {
    if (!v5)
      return 0;
    v14 = (os_log_t)qword_10007DC80;
    if (!qword_10007DC80)
    {
      v14 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_10007DC80 = (uint64_t)v14;
    }
    v15 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v14, v15))
    {
      v16 = _os_log_pack_size(22);
      v17 = (char *)&v26 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
      v18 = __error();
      v19 = _os_log_pack_fill(v17, v16, *v18, &_mh_execute_header, "%@ is no longer primary %s");
      *(_DWORD *)v19 = 138412546;
      *(_QWORD *)(v19 + 4) = v5;
      *(_WORD *)(v19 + 12) = 2080;
      *(_QWORD *)(v19 + 14) = a3;
      __SC_log_send(6, v14, v15, v17);
    }
    if (*a1)
    {
      CFRelease(*a1);
      *a1 = 0;
    }
    return 1;
  }
  if (!v5)
  {
LABEL_18:
    *a1 = CFRetain(cf);
    v20 = (os_log_t)qword_10007DC80;
    if (!qword_10007DC80)
    {
      v20 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_10007DC80 = (uint64_t)v20;
    }
    v21 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v20, v21))
    {
      v22 = _os_log_pack_size(22);
      v23 = (char *)&v26 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
      v24 = __error();
      v25 = _os_log_pack_fill(v23, v22, *v24, &_mh_execute_header, "%@ is the new primary %s");
      *(_DWORD *)v25 = 138412546;
      *(_QWORD *)(v25 + 4) = cf;
      *(_WORD *)(v25 + 12) = 2080;
      *(_QWORD *)(v25 + 14) = a3;
      __SC_log_send(6, v20, v21, v23);
      return 1;
    }
    return 1;
  }
  if (!CFEqual(cf, v5))
  {
    if (*a1)
    {
      CFRelease(*a1);
      *a1 = 0;
    }
    goto LABEL_18;
  }
  v7 = (os_log_t)qword_10007DC80;
  if (!qword_10007DC80)
  {
    v7 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    qword_10007DC80 = (uint64_t)v7;
  }
  v8 = _SC_syslog_os_log_mapping(6);
  result = __SC_log_enabled(6, v7, v8);
  if ((_DWORD)result)
  {
    v10 = _os_log_pack_size(22);
    v11 = (char *)&v26 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    v12 = __error();
    v13 = _os_log_pack_fill(v11, v10, *v12, &_mh_execute_header, "%@ is still primary %s");
    *(_DWORD *)v13 = 138412546;
    *(_QWORD *)(v13 + 4) = cf;
    *(_WORD *)(v13 + 12) = 2080;
    *(_QWORD *)(v13 + 14) = a3;
    __SC_log_send(6, v7, v8, v11);
    return 0;
  }
  return result;
}

void sub_10003AFD0(const void *a1, uint64_t a2, uint64_t a3)
{
  __CFDictionary *Mutable;
  CFStringRef v7;
  const char *v8;
  CFStringRef v9;
  CFStringRef v10;
  const void *v11;
  unsigned int v12;
  unsigned int v13;
  os_log_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  int *v26;
  os_log_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  int *v39;
  _BYTE v40[10];
  char v41[46];

  if (a3)
  {
    if (a1 && a2)
    {
      Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      if ((*(_WORD *)(a2 + 28) & 2) != 0)
      {
        inet_ntop(30, (const void *)(a2 + 48), v41, 0x2Eu);
        v7 = CFStringCreateWithFormat(0, 0, CFSTR("%s"), v41);
        CFDictionarySetValue(Mutable, kSCPropNetIPv6Router, v7);
        CFRelease(v7);
      }
      v8 = (const char *)sub_10002D76C(*(_DWORD *)(a2 + 16), (uint64_t)v41);
      if (v8)
      {
        v9 = CFStringCreateWithCString(0, v8, 0x600u);
        if (v9)
        {
          v10 = v9;
          CFDictionarySetValue(Mutable, kSCDynamicStorePropNetPrimaryInterface, v9);
          CFRelease(v10);
        }
      }
      CFDictionarySetValue(Mutable, kSCDynamicStorePropNetPrimaryService, a1);
      sub_100035784(a3, (const void *)qword_10007DD68, Mutable);
      CFRelease(Mutable);
      sub_10002E1D4(*(_DWORD *)(a2 + 16));
    }
    else
    {
      sub_10002E1D4(0);
      v11 = (const void *)qword_10007DD68;
      sub_100035AAC(*(const __CFArray **)(a3 + 8), (const void *)qword_10007DD68);
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a3 + 16), v11);
    }
  }
  v12 = sub_100035824();
  if (v12 != -1)
  {
    v13 = v12;
    sub_100035B4C((uint64_t)off_100076AA8, (int *)a2);
    if (byte_10007DC9C == 1)
    {
      v14 = (os_log_t)qword_10007DC80;
      if (qword_10007DD70)
      {
        if (!qword_10007DC80)
        {
          v14 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
          qword_10007DC80 = (uint64_t)v14;
        }
        v15 = _SC_syslog_os_log_mapping(7);
        if (__SC_log_enabled(7, v14, v15))
        {
          v16 = _os_log_pack_size(2);
          v19 = &v40[-((__chkstk_darwin(v16, v17, v18) + 15) & 0xFFFFFFFFFFFFFFF0)];
          v20 = __error();
          *(_WORD *)_os_log_pack_fill(v19, v16, *v20, &_mh_execute_header, "Old Routes = ") = 0;
          __SC_log_send(7, v14, v15, v19);
        }
        sub_100043590((unsigned int *)qword_10007DD70);
      }
      else
      {
        if (!qword_10007DC80)
        {
          v14 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
          qword_10007DC80 = (uint64_t)v14;
        }
        v21 = _SC_syslog_os_log_mapping(7);
        if (__SC_log_enabled(7, v14, v21))
        {
          v22 = _os_log_pack_size(2);
          v25 = &v40[-((__chkstk_darwin(v22, v23, v24) + 15) & 0xFFFFFFFFFFFFFFF0)];
          v26 = __error();
          *(_WORD *)_os_log_pack_fill(v25, v22, *v26, &_mh_execute_header, "Old Routes = <none>") = 0;
          __SC_log_send(7, v14, v21, v25);
        }
      }
      v27 = (os_log_t)qword_10007DC80;
      if (a2)
      {
        if (!qword_10007DC80)
        {
          v27 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
          qword_10007DC80 = (uint64_t)v27;
        }
        v28 = _SC_syslog_os_log_mapping(7);
        if (__SC_log_enabled(7, v27, v28))
        {
          v29 = _os_log_pack_size(2);
          v32 = &v40[-((__chkstk_darwin(v29, v30, v31) + 15) & 0xFFFFFFFFFFFFFFF0)];
          v33 = __error();
          *(_WORD *)_os_log_pack_fill(v32, v29, *v33, &_mh_execute_header, "New Routes = ") = 0;
          __SC_log_send(7, v27, v28, v32);
        }
        sub_100043590((unsigned int *)a2);
      }
      else
      {
        if (!qword_10007DC80)
        {
          v27 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
          qword_10007DC80 = (uint64_t)v27;
        }
        v34 = _SC_syslog_os_log_mapping(7);
        if (__SC_log_enabled(7, v27, v34))
        {
          v35 = _os_log_pack_size(2);
          v38 = &v40[-((__chkstk_darwin(v35, v36, v37) + 15) & 0xFFFFFFFFFFFFFFF0)];
          v39 = __error();
          *(_WORD *)_os_log_pack_fill(v38, v35, *v39, &_mh_execute_header, "New Routes = <none>") = 0;
          __SC_log_send(7, v27, v34, v38);
        }
      }
    }
    sub_100036B60((uint64_t (**)(_QWORD))off_100076AA8, qword_10007DD70, (int *)a2, v13);
    close(v13);
  }
  if (qword_10007DD70)
    free((void *)qword_10007DD70);
  qword_10007DD70 = a2;
}

uint64_t sub_10003B4E8(const __CFDictionary *a1, void *key, const void *a3)
{
  uint64_t v5;
  const __CFNumber *Value;
  unsigned int valuePtr;

  v5 = 0x1FFFFFFLL;
  if (sub_100033308(key, a3))
  {
    valuePtr = 0x1FFFFFF;
    Value = (const __CFNumber *)CFDictionaryGetValue(a1, key);
    if (Value)
    {
      if (CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr))
        return valuePtr;
      else
        return 0x1000000;
    }
  }
  return v5;
}

void sub_10003B58C(const __CFDictionary *a1, int *a2, int *a3)
{
  CFMutableArrayRef Mutable;
  __int128 v5;
  CFIndex v6;
  __objc2_prop_list **p_base_props;
  const __CFString *ValueAtIndex;
  const __CFArray *ArrayBySeparatingStrings;
  const __CFString *v10;
  const void *v11;
  CFStringRef NetworkServiceEntity;
  const void *Value;
  CFTypeID TypeID;
  const __CFDictionary *v15;
  CFStringRef v16;
  const void *v17;
  CFTypeID v18;
  const void *v19;
  CFTypeID v20;
  const __CFNumber *v21;
  CFTypeID v22;
  int v23;
  BOOL v24;
  int v25;
  CFStringRef v26;
  os_log_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int *v33;
  uint64_t v34;
  int v35;
  char *v36;
  CFStringRef v37;
  os_log_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  os_log_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  int *v57;
  uint64_t v58;
  int v59;
  char *v60;
  os_log_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  int *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  CFStringRef v71;
  CFStringRef v72;
  __CFArray *v73;
  __int128 v74;
  const void *v75;
  CFStringRef v76;
  CFStringRef v77;
  CFStringRef v78;
  int *v79;
  int *v80;
  CFStringRef v81;
  CFStringRef v82;
  CFStringRef v83;
  CFStringRef v84;
  CFDictionaryRef v85;
  CFIndex Count;
  int valuePtr;

  v79 = a2;
  v80 = a3;
  Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  v85 = a1;
  CFDictionaryApplyFunction(a1, (CFDictionaryApplierFunction)sub_1000436C4, Mutable);
  Count = CFArrayGetCount(Mutable);
  if (Count < 1)
    goto LABEL_55;
  v6 = 0;
  v84 = (CFStringRef)kSCEntNetCommCenter;
  v81 = kSCDynamicStoreDomainState;
  v75 = (const void *)kSCPropNetCommCenterAvailable;
  v82 = kSCEntNetPPP;
  v83 = kSCDynamicStoreDomainSetup;
  v78 = kSCEntNetInterface;
  p_base_props = &QoSMarkingController__classData.base_props;
  v72 = kSCPropNetInterfaceDeviceName;
  v71 = kSCPropNetPPPDialOnDemand;
  v76 = kSCEntNetIPv6;
  v77 = kSCEntNetIPv4;
  *(_QWORD *)&v5 = 138412546;
  v74 = v5;
  v73 = Mutable;
  while (1)
  {
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(Mutable, v6);
    ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, ValueAtIndex, CFSTR("/"));
    if (CFArrayGetCount(ArrayBySeparatingStrings) != 5)
      goto LABEL_36;
    v10 = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 3);
    v11 = CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 4);
    if (CFEqual(v11, v84))
    {
      NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(0, v81, v10, v84);
      Value = CFDictionaryGetValue(v85, NetworkServiceEntity);
      CFRelease(NetworkServiceEntity);
      TypeID = CFDictionaryGetTypeID();
      if (!Value || CFGetTypeID(Value) != TypeID)
        goto LABEL_36;
      v15 = (const __CFDictionary *)CFDictionaryGetValue(v85, ValueAtIndex);
      if ((int)sub_10004379C(v15, v75, 0xFFFFFFFFLL) >= 1)
      {
        if (sub_10003FE7C((const __CFDictionary *)Value, v75))
          break;
      }
    }
    if (CFEqual(v11, v82))
    {
      v16 = SCDynamicStoreKeyCreateNetworkServiceEntity(0, v83, v10, v78);
      v17 = CFDictionaryGetValue(v85, v16);
      CFRelease(v16);
      v18 = CFDictionaryGetTypeID();
      if (v17 && CFGetTypeID(v17) == v18 && CFDictionaryContainsKey((CFDictionaryRef)v17, v72))
      {
        if (CFEqual(v11, v82)
          && (v19 = CFDictionaryGetValue(v85, ValueAtIndex), v20 = CFDictionaryGetTypeID(), v19)
          && CFGetTypeID(v19) == v20
          && (v21 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v19, v71), v22 = CFNumberGetTypeID(), v21)
          && CFGetTypeID(v21) == v22)
        {
          valuePtr = 0;
          v23 = CFNumberGetValue(v21, kCFNumberSInt32Type, &valuePtr);
          if (valuePtr)
            v24 = v23 == 0;
          else
            v24 = 1;
          if (v24)
            v25 = 7;
          else
            v25 = 15;
        }
        else
        {
          v25 = 7;
        }
      }
      else
      {
        v25 = 0;
      }
      v26 = SCDynamicStoreKeyCreateNetworkServiceEntity(0, v83, v10, v77);
      if (CFDictionaryContainsKey(v85, v26))
      {
        *v79 |= v25;
        v27 = (os_log_t)p_base_props[400];
        if (!v27)
        {
          v27 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
          p_base_props[400] = (__objc2_prop_list *)v27;
        }
        v28 = _SC_syslog_os_log_mapping(7);
        if (__SC_log_enabled(7, v27, v28))
        {
          v29 = _os_log_pack_size(18);
          v32 = (char *)&v70 - ((__chkstk_darwin(v29, v30, v31) + 15) & 0xFFFFFFFFFFFFFFF0);
          v33 = __error();
          v34 = _os_log_pack_fill(v32, v29, *v33, &_mh_execute_header, "Service %@ setting ipv4 reach flags: %u");
          v35 = *v79;
          *(_DWORD *)v34 = v74;
          *(_QWORD *)(v34 + 4) = v10;
          *(_WORD *)(v34 + 12) = 1024;
          *(_DWORD *)(v34 + 14) = v35;
          v36 = v32;
          Mutable = v73;
          __SC_log_send(7, v27, v28, v36);
          p_base_props = &QoSMarkingController__classData.base_props;
        }
      }
      CFRelease(v26);
      v37 = SCDynamicStoreKeyCreateNetworkServiceEntity(0, v83, v10, v76);
      if (CFDictionaryContainsKey(v85, v37))
      {
        *v80 |= v25;
        v38 = (os_log_t)p_base_props[400];
        if (!v38)
        {
          v38 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
          p_base_props[400] = (__objc2_prop_list *)v38;
        }
        v39 = _SC_syslog_os_log_mapping(7);
        if (__SC_log_enabled(7, v38, v39))
        {
          v40 = _os_log_pack_size(18);
          v43 = (char *)&v70 - ((__chkstk_darwin(v40, v41, v42) + 15) & 0xFFFFFFFFFFFFFFF0);
          v44 = __error();
          v45 = v40;
          Mutable = v73;
          v46 = _os_log_pack_fill(v43, v45, *v44, &_mh_execute_header, "Service %@ setting ipv6 reach flags: %u");
          v47 = *v80;
          *(_DWORD *)v46 = v74;
          *(_QWORD *)(v46 + 4) = v10;
          *(_WORD *)(v46 + 12) = 1024;
          *(_DWORD *)(v46 + 14) = v47;
          __SC_log_send(7, v38, v39, v43);
          p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
        }
      }
      CFRelease(v37);
      if (v25)
        goto LABEL_53;
    }
LABEL_36:
    if (ArrayBySeparatingStrings)
      CFRelease(ArrayBySeparatingStrings);
    if (Count == ++v6)
      goto LABEL_55;
  }
  v48 = 262151;
  v49 = sub_10004379C((const __CFDictionary *)Value, CFSTR("AvailableProtocols"), 0);
  v50 = 262151;
  if (v49)
  {
    v50 = (v49 << 30 >> 31) & 0x40007;
    if ((v49 & 1) == 0)
      v48 = 0;
  }
  *v79 |= v48;
  v51 = (os_log_t)p_base_props[400];
  if (!v51)
  {
    v51 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    p_base_props[400] = (__objc2_prop_list *)v51;
  }
  v52 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v51, v52))
  {
    v53 = _os_log_pack_size(18);
    v56 = (char *)&v70 - ((__chkstk_darwin(v53, v54, v55) + 15) & 0xFFFFFFFFFFFFFFF0);
    v57 = __error();
    v58 = _os_log_pack_fill(v56, v53, *v57, &_mh_execute_header, "Service %@ setting ipv4 reach flags: %u");
    v59 = *v79;
    *(_DWORD *)v58 = v74;
    *(_QWORD *)(v58 + 4) = v10;
    *(_WORD *)(v58 + 12) = 1024;
    *(_DWORD *)(v58 + 14) = v59;
    v60 = v56;
    p_base_props = &QoSMarkingController__classData.base_props;
    __SC_log_send(7, v51, v52, v60);
  }
  *v80 |= v50;
  v61 = (os_log_t)p_base_props[400];
  if (!v61)
  {
    v61 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    p_base_props[400] = (__objc2_prop_list *)v61;
  }
  v62 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v61, v62))
  {
    v63 = _os_log_pack_size(18);
    v66 = (char *)&v70 - ((__chkstk_darwin(v63, v64, v65) + 15) & 0xFFFFFFFFFFFFFFF0);
    v67 = __error();
    v68 = _os_log_pack_fill(v66, v63, *v67, &_mh_execute_header, "Service %@ setting ipv6 reach flags: %u");
    v69 = *v80;
    *(_DWORD *)v68 = v74;
    *(_QWORD *)(v68 + 4) = v10;
    *(_WORD *)(v68 + 12) = 1024;
    *(_DWORD *)(v68 + 14) = v69;
    __SC_log_send(7, v61, v62, v66);
  }
  Mutable = v73;
LABEL_53:
  if (ArrayBySeparatingStrings)
    CFRelease(ArrayBySeparatingStrings);
LABEL_55:
  CFRelease(Mutable);
}

uint64_t sub_10003BD5C(unsigned int *a1)
{
  os_log_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  os_log_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int *v18;
  uint64_t result;
  os_log_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;

  sub_100032EC8((uint64_t)a1, (uint64_t)&v28);
  if ((_QWORD)v28 == (_QWORD)xmmword_10007DD78
    && *((_QWORD *)&v28 + 1) == *((_QWORD *)&xmmword_10007DD78 + 1)
    && (_QWORD)v29 == qword_10007DD88
    && *((_QWORD *)&v29 + 1) == unk_10007DD90)
  {
    v20 = (os_log_t)qword_10007DC80;
    if (!qword_10007DC80)
    {
      v20 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_10007DC80 = (uint64_t)v20;
    }
    v21 = _SC_syslog_os_log_mapping(7);
    result = __SC_log_enabled(7, v20, v21);
    if ((_DWORD)result)
    {
      v22 = _os_log_pack_size(2);
      v25 = (char *)&v27 - ((__chkstk_darwin(v22, v23, v24) + 15) & 0xFFFFFFFFFFFFFFF0);
      v26 = __error();
      *(_WORD *)_os_log_pack_fill(v25, v22, *v26, &_mh_execute_header, "Not updating network information") = 0;
      __SC_log_send(7, v20, v21, v25);
      return 0;
    }
  }
  else
  {
    xmmword_10007DD78 = v28;
    *(_OWORD *)&qword_10007DD88 = v29;
    v5 = (os_log_t)qword_10007DC80;
    if (!qword_10007DC80)
    {
      v5 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_10007DC80 = (uint64_t)v5;
    }
    v6 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v5, v6))
    {
      v7 = _os_log_pack_size(2);
      v10 = (char *)&v27 - ((__chkstk_darwin(v7, v8, v9) + 15) & 0xFFFFFFFFFFFFFFF0);
      v11 = __error();
      *(_WORD *)_os_log_pack_fill(v10, v7, *v11, &_mh_execute_header, "Updating network information") = 0;
      __SC_log_send(6, v5, v6, v10);
    }
    sub_100043834(a1);
    if ((sub_100046728((const __CFData *)a1) & 1) != 0)
      return 1;
    v12 = (os_log_t)qword_10007DC80;
    if (!qword_10007DC80)
    {
      v12 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_10007DC80 = (uint64_t)v12;
    }
    v13 = _SC_syslog_os_log_mapping(3);
    if (!__SC_log_enabled(3, v12, v13))
    {
      return 1;
    }
    else
    {
      v14 = _os_log_pack_size(2);
      v17 = (char *)&v27 - ((__chkstk_darwin(v14, v15, v16) + 15) & 0xFFFFFFFFFFFFFFF0);
      v18 = __error();
      *(_WORD *)_os_log_pack_fill(v17, v14, *v18, &_mh_execute_header, "Notifying nwi_state_store failed") = 0;
      __SC_log_send(3, v12, v13, v17);
      return 1;
    }
  }
  return result;
}

CFIndex sub_10003C058(const __CFArray **a1, const __SCDynamicStore *a2)
{
  const __CFArray *v3;
  const __CFArray *v4;
  const __CFDictionary *v5;
  CFIndex result;
  BOOL v7;
  os_log_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  os_log_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  os_log_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  if (!CFArrayGetCount(*a1))
    v3 = 0;
  if (!CFArrayGetCount(v4))
    v4 = 0;
  result = CFDictionaryGetCount(v5);
  if (!result)
    v5 = 0;
  if (v3)
    v7 = 0;
  else
    v7 = v5 == 0;
  if (!v7 || v4 != 0)
  {
    if (byte_10007DC9C == 1)
    {
      if (v5)
      {
        v9 = (os_log_t)qword_10007DC80;
        if (!qword_10007DC80)
        {
          v9 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
          qword_10007DC80 = (uint64_t)v9;
        }
        v10 = _SC_syslog_os_log_mapping(7);
        if (__SC_log_enabled(7, v9, v10))
        {
          v11 = _os_log_pack_size(12);
          v12 = (char *)&v27 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
          v13 = __error();
          v14 = _os_log_pack_fill(v12, v11, *v13, &_mh_execute_header, "Setting:\n%@");
          *(_DWORD *)v14 = 138412290;
          *(_QWORD *)(v14 + 4) = v5;
          __SC_log_send(7, v9, v10, v12);
        }
      }
      if (v4)
      {
        v15 = (os_log_t)qword_10007DC80;
        if (!qword_10007DC80)
        {
          v15 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
          qword_10007DC80 = (uint64_t)v15;
        }
        v16 = _SC_syslog_os_log_mapping(7);
        if (__SC_log_enabled(7, v15, v16))
        {
          v17 = _os_log_pack_size(12);
          v18 = (char *)&v27 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
          v19 = __error();
          v20 = _os_log_pack_fill(v18, v17, *v19, &_mh_execute_header, "Removing:\n%@");
          *(_DWORD *)v20 = 138412290;
          *(_QWORD *)(v20 + 4) = v4;
          __SC_log_send(7, v15, v16, v18);
        }
      }
      if (v3)
      {
        v21 = (os_log_t)qword_10007DC80;
        if (!qword_10007DC80)
        {
          v21 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
          qword_10007DC80 = (uint64_t)v21;
        }
        v22 = _SC_syslog_os_log_mapping(7);
        if (__SC_log_enabled(7, v21, v22))
        {
          v23 = _os_log_pack_size(12);
          v24 = (char *)&v27 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
          v25 = __error();
          v26 = _os_log_pack_fill(v24, v23, *v25, &_mh_execute_header, "Notifying:\n%@");
          *(_DWORD *)v26 = 138412290;
          *(_QWORD *)(v26 + 4) = v3;
          __SC_log_send(7, v21, v22, v24);
        }
      }
    }
    return SCDynamicStoreSetMultiple(a2, v5, v4, v3);
  }
  return result;
}

void sub_10003C390(uint64_t a1)
{
  sub_1000340DC(*(_DWORD *)(a1 + 32));
}

void sub_10003C3D8(uint64_t a1)
{
  sub_10003C438(*(unsigned __int16 *)(a1 + 40), *(void **)(a1 + 32));
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

void sub_10003C438(int a1, void *a2)
{
  os_log_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  os_log_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int *v17;
  uint64_t v18;
  os_log_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;

  if (a1 == 2)
  {
    v11 = (os_log_t)qword_10007DC80;
    if (!qword_10007DC80)
    {
      v11 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_10007DC80 = (uint64_t)v11;
    }
    v12 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v11, v12))
    {
      v13 = _os_log_pack_size(12);
      v16 = (char *)&v27 - ((__chkstk_darwin(v13, v14, v15) + 15) & 0xFFFFFFFFFFFFFFF0);
      v17 = __error();
      v18 = _os_log_pack_fill(v16, v13, *v17, &_mh_execute_header, "NAT64 Cancel %@");
      *(_DWORD *)v18 = 138412290;
      *(_QWORD *)(v18 + 4) = a2;
      __SC_log_send(6, v11, v12, v16);
    }
    sub_10003C794((CFTypeRef *)&qword_10007DD38, a2);
    sub_10003C794((CFTypeRef *)&qword_10007DD40, a2);
    sub_10003988C((__CFSet **)&qword_10007DD48, a2);
  }
  else
  {
    if (a1 == 1)
    {
      v19 = (os_log_t)qword_10007DC80;
      if (!qword_10007DC80)
      {
        v19 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
        qword_10007DC80 = (uint64_t)v19;
      }
      v20 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v19, v20))
      {
        v21 = _os_log_pack_size(12);
        v24 = (char *)&v27 - ((__chkstk_darwin(v21, v22, v23) + 15) & 0xFFFFFFFFFFFFFFF0);
        v25 = __error();
        v26 = _os_log_pack_fill(v24, v21, *v25, &_mh_execute_header, "NAT64 Update %@");
        *(_DWORD *)v26 = 138412290;
        *(_QWORD *)(v26 + 4) = a2;
        __SC_log_send(6, v19, v20, v24);
      }
      if (!qword_10007DD38 || !CFSetContainsValue((CFSetRef)qword_10007DD38, a2))
        sub_10003988C((__CFSet **)&qword_10007DD40, a2);
    }
    else
    {
      if (a1)
        return;
      v3 = (os_log_t)qword_10007DC80;
      if (!qword_10007DC80)
      {
        v3 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
        qword_10007DC80 = (uint64_t)v3;
      }
      v4 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v3, v4))
      {
        v5 = _os_log_pack_size(12);
        v8 = (char *)&v27 - ((__chkstk_darwin(v5, v6, v7) + 15) & 0xFFFFFFFFFFFFFFF0);
        v9 = __error();
        v10 = _os_log_pack_fill(v8, v5, *v9, &_mh_execute_header, "NAT64 Start %@");
        *(_DWORD *)v10 = 138412290;
        *(_QWORD *)(v10 + 4) = a2;
        __SC_log_send(6, v3, v4, v8);
      }
      sub_10003988C((__CFSet **)&qword_10007DD38, a2);
      sub_10003C794((CFTypeRef *)&qword_10007DD40, a2);
    }
    sub_10003C794((CFTypeRef *)&qword_10007DD48, a2);
  }
}

void sub_10003C794(CFTypeRef *a1, const void *a2)
{
  __CFSet *v3;

  v3 = (__CFSet *)*a1;
  if (v3)
  {
    CFSetRemoveValue(v3, a2);
    if (!CFSetGetCount((CFSetRef)*a1))
    {
      if (*a1)
      {
        CFRelease(*a1);
        *a1 = 0;
      }
    }
  }
}

const void *sub_10003C80C(const void *a1, const void *a2)
{
  CFTypeID TypeID;
  const void *Value;
  CFTypeID v6;

  TypeID = CFDictionaryGetTypeID();
  if (!a1)
    return 0;
  if (CFGetTypeID(a1) != TypeID)
    return 0;
  Value = CFDictionaryGetValue((CFDictionaryRef)a1, a2);
  v6 = CFDictionaryGetTypeID();
  if (!Value)
    return 0;
  if (CFGetTypeID(Value) == v6)
    return Value;
  return 0;
}

uint64_t sub_10003C8B8(__CFString *serviceID, const __CFDictionary *a2, const __CFDictionary *a3, const void *a4)
{
  const __CFDictionary *v8;
  const __CFDictionary *v9;
  void *v10;
  CFTypeID TypeID;
  _BOOL4 v12;
  int v13;
  unint64_t v14;
  CFTypeID v15;
  BOOL v16;
  os_log_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int *v23;
  uint64_t v24;
  const void *v25;
  CFTypeID v26;
  unint64_t v27;
  CFTypeID v28;
  const void *v29;
  CFTypeID v30;
  const __CFString *v31;
  CFStringRef NetworkInterfaceEntity;
  const void *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  const void *v38;
  const void *v39;
  const __CFNumber *v40;
  unsigned int v41;
  const char *v42;
  os_log_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  int *v49;
  uint64_t v50;
  unsigned int v51;
  const char *v52;
  _BOOL4 v53;
  BOOL v54;
  __CFDictionary *Mutable;
  uint64_t v56;
  CFNumberRef v57;
  _QWORD v59[2];
  int valuePtr;
  void *value;
  unsigned int v62;

  v62 = 0x1000000;
  v8 = (const __CFDictionary *)sub_10003CFB4(a4, serviceID, kSCEntNetCommCenter);
  v9 = v8;
  if (v8)
  {
    value = 0;
    valuePtr = 0;
    if (CFDictionaryGetValueIfPresent(v8, kSCPropNetCommCenterAvailable, (const void **)&value))
    {
      v10 = value;
      TypeID = CFNumberGetTypeID();
      if (v10)
      {
        if (CFGetTypeID(v10) == TypeID
          && CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &valuePtr)
          && valuePtr < 1)
        {
          a3 = 0;
          v12 = 0;
          v62 = 0x4000000;
LABEL_76:
          v53 = a3 != 0;
          v54 = v12;
          Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          goto LABEL_82;
        }
      }
    }
    v13 = 1;
  }
  else
  {
    v13 = 0;
  }
  if (a3)
  {
    v14 = (unint64_t)CFDictionaryGetValue(a3, kSCPropNetServicePrimaryRank);
    v15 = CFStringGetTypeID();
    if (v14)
    {
      if (CFGetTypeID((CFTypeRef)v14) != v15)
        v14 = 0;
      if (v9)
        v16 = v14 == 0;
      else
        v16 = 1;
      if (!v16)
      {
        v17 = (os_log_t)qword_10007DC80;
        if (!qword_10007DC80)
        {
          v17 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
          qword_10007DC80 = (uint64_t)v17;
        }
        v18 = _SC_syslog_os_log_mapping(7);
        if (__SC_log_enabled(7, v17, v18))
        {
          v19 = _os_log_pack_size(22);
          v59[1] = v59;
          v22 = (char *)v59 - ((__chkstk_darwin(v19, v20, v21) + 15) & 0xFFFFFFFFFFFFFFF0);
          v23 = __error();
          v24 = _os_log_pack_fill(v22, v19, *v23, &_mh_execute_header, "%@ ignoring Setup PrimaryRank = %@");
          *(_DWORD *)v24 = 138412546;
          *(_QWORD *)(v24 + 4) = serviceID;
          *(_WORD *)(v24 + 12) = 2112;
          *(_QWORD *)(v24 + 14) = v14;
          __SC_log_send(7, v17, v18, v22);
        }
        v14 = 0;
      }
    }
    v25 = CFDictionaryGetValue(a3, CFSTR("IPIsCoupled"));
    v26 = CFBooleanGetTypeID();
    if (v25 && CFGetTypeID(v25) == v26 && CFBooleanGetValue((CFBooleanRef)v25))
      v13 = 1;
    a3 = (const __CFDictionary *)sub_10003D044(a3, (uint64_t)serviceID, (uint64_t)kSCDynamicStoreDomainSetup, 0);
    if (a2)
    {
LABEL_28:
      v27 = (unint64_t)CFDictionaryGetValue(a2, kSCPropNetServicePrimaryRank);
      v28 = CFStringGetTypeID();
      if (v27 && CFGetTypeID((CFTypeRef)v27) != v28)
        v27 = 0;
      v29 = CFDictionaryGetValue(a2, CFSTR("IPIsCoupled"));
      v30 = CFBooleanGetTypeID();
      if (v29 && CFGetTypeID(v29) == v30 && CFBooleanGetValue((CFBooleanRef)v29))
        v13 = 1;
      if (!a3)
        a3 = (const __CFDictionary *)sub_10003D044(a2, (uint64_t)serviceID, (uint64_t)kSCDynamicStoreDomainState, 0);
      if (v13)
        goto LABEL_38;
      goto LABEL_41;
    }
  }
  else
  {
    v14 = 0;
    if (a2)
      goto LABEL_28;
  }
  v27 = 0;
  if (v13)
  {
LABEL_38:
    v12 = 1;
    goto LABEL_44;
  }
LABEL_41:
  v31 = (const __CFString *)sub_10003D2AC(a4, serviceID);
  if (v31)
  {
    NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, v31, kSCEntNetLink);
    v33 = CFDictionaryGetValue((CFDictionaryRef)a4, NetworkInterfaceEntity);
    CFRelease(NetworkInterfaceEntity);
    v12 = sub_1000356CC(v33);
  }
  else
  {
    v12 = 0;
  }
LABEL_44:
  if (v14 | v27)
  {
    LOBYTE(value) = 0;
    LOBYTE(valuePtr) = 0;
    v34 = sub_10003D1FC((CFTypeRef)v14, &value);
    v35 = sub_10003D1FC((CFTypeRef)v27, &valuePtr);
    if ((_BYTE)value && (_BYTE)valuePtr)
    {
      if (v34 <= v35)
        v36 = v35;
      else
        v36 = v34;
      v62 = v36;
      goto LABEL_55;
    }
    if ((_BYTE)value)
    {
      v62 = v34;
LABEL_55:
      v37 = 1;
      goto LABEL_57;
    }
    if ((_BYTE)valuePtr)
    {
      v62 = v35;
      goto LABEL_55;
    }
  }
  v37 = 0;
LABEL_57:
  v38 = sub_10003D2AC(a4, serviceID);
  if (v38)
  {
    v39 = v38;
    if (qword_10007DD58)
    {
      v40 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)qword_10007DD58, v38);
      if (v40)
      {
        LODWORD(value) = 0;
        if (CFNumberGetValue(v40, kCFNumberSInt32Type, &value))
        {
          if ((_DWORD)value)
          {
            if ((_DWORD)value == 1)
              v41 = 0;
            else
              v41 = (_DWORD)value << 24;
            if (!v37 || v41 > v62)
            {
              v62 = v41;
              v42 = "Interface";
LABEL_70:
              v43 = (os_log_t)qword_10007DC80;
              if (!qword_10007DC80)
              {
                v43 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
                qword_10007DC80 = (uint64_t)v43;
              }
              v44 = _SC_syslog_os_log_mapping(6);
              if (__SC_log_enabled(6, v43, v44))
              {
                v45 = _os_log_pack_size(48);
                v48 = (char *)v59 - ((__chkstk_darwin(v45, v46, v47) + 15) & 0xFFFFFFFFFFFFFFF0);
                v49 = __error();
                v50 = _os_log_pack_fill(v48, v45, *v49, &_mh_execute_header, "serviceID %@ interface %@ rank = 0x%x (source=%s)%s");
                v51 = v62;
                v52 = " [coupled]";
                *(_DWORD *)v50 = 138413314;
                *(_QWORD *)(v50 + 4) = serviceID;
                if (!v12)
                  v52 = "";
                *(_WORD *)(v50 + 12) = 2112;
                *(_QWORD *)(v50 + 14) = v39;
                *(_WORD *)(v50 + 22) = 1024;
                *(_DWORD *)(v50 + 24) = v51;
                *(_WORD *)(v50 + 28) = 2080;
                *(_QWORD *)(v50 + 30) = v42;
                *(_WORD *)(v50 + 38) = 2080;
                *(_QWORD *)(v50 + 40) = v52;
                __SC_log_send(6, v43, v44, v48);
              }
              goto LABEL_76;
            }
LABEL_69:
            v42 = "Service";
            goto LABEL_70;
          }
        }
      }
    }
    if (v37)
      goto LABEL_69;
  }
  v53 = a3 != 0;
  v54 = v12;
  if (!a3 && !v37 && !v12)
    return sub_10003D368(serviceID, kSCEntNetService, 0);
  Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (v37)
  {
LABEL_82:
    v57 = CFNumberCreate(0, kCFNumberSInt32Type, &v62);
    CFDictionarySetValue(Mutable, CFSTR("RankAssertion"), v57);
    CFRelease(v57);
    if (!v54)
      goto LABEL_83;
LABEL_86:
    CFDictionarySetValue(Mutable, CFSTR("IPIsCoupled"), kCFBooleanTrue);
    if (!v53)
      goto LABEL_88;
    goto LABEL_87;
  }
  if (v12)
    goto LABEL_86;
LABEL_83:
  if (v53)
LABEL_87:
    CFDictionarySetValue(Mutable, kSCPropNetServiceServiceIndex, a3);
LABEL_88:
  v56 = sub_10003D368(serviceID, kSCEntNetService, Mutable);
  if (Mutable)
    CFRelease(Mutable);
  return v56;
}

const void *sub_10003CFB4(const void *a1, CFStringRef serviceID, CFStringRef entity)
{
  CFStringRef NetworkServiceEntity;
  const void *v5;

  NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainSetup, serviceID, entity);
  v5 = sub_10003C80C(a1, NetworkServiceEntity);
  if (NetworkServiceEntity)
    CFRelease(NetworkServiceEntity);
  return v5;
}

const void *sub_10003D044(const __CFDictionary *a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  const void *Value;
  CFTypeID TypeID;
  BOOL v9;
  os_log_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v17;

  if (!a1)
    return 0;
  Value = CFDictionaryGetValue(a1, kSCPropNetServiceServiceIndex);
  TypeID = CFNumberGetTypeID();
  if (!Value)
    return Value;
  if (CFGetTypeID(Value) != TypeID)
    return 0;
  HIDWORD(v17) = 0;
  if (CFNumberGetValue((CFNumberRef)Value, kCFNumberSInt32Type, (char *)&v17 + 4))
    v9 = SHIDWORD(v17) <= 0;
  else
    v9 = 1;
  if (v9)
  {
    v10 = (os_log_t)qword_10007DC80;
    if (!qword_10007DC80)
    {
      v10 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_10007DC80 = (uint64_t)v10;
    }
    v11 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v10, v11))
    {
      v12 = _os_log_pack_size(32);
      v13 = (char *)&v17 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
      v14 = __error();
      v15 = _os_log_pack_fill(v13, v12, *v14, &_mh_execute_header, "%@%@ ServiceIndex %@ is invalid, ignoring");
      *(_DWORD *)v15 = 138412802;
      *(_QWORD *)(v15 + 4) = a3;
      *(_WORD *)(v15 + 12) = 2112;
      *(_QWORD *)(v15 + 14) = a2;
      *(_WORD *)(v15 + 22) = 2112;
      *(_QWORD *)(v15 + 24) = Value;
      __SC_log_send(5, v10, v11, v13);
    }
    return 0;
  }
  if (a4)
    *a4 = HIDWORD(v17);
  return Value;
}

uint64_t sub_10003D1FC(CFTypeRef cf1, _BYTE *a2)
{
  uint64_t v4;

  if (cf1)
  {
    v4 = 0;
    while (!CFEqual(cf1, **(CFTypeRef **)((char *)&off_100076A68 + v4)))
    {
      v4 += 16;
      if (v4 == 64)
        goto LABEL_5;
    }
    if (a2)
      *a2 = 1;
    return *(unsigned int *)((char *)&off_100076A68 + v4 + 8);
  }
  else
  {
LABEL_5:
    if (a2)
      *a2 = 0;
    return 0x1000000;
  }
}

const void *sub_10003D2AC(const void *a1, const __CFString *a2)
{
  const __CFDictionary *v4;

  v4 = (const __CFDictionary *)sub_100039C7C(a1, a2, kSCEntNetIPv4);
  if (v4)
    return CFDictionaryGetValue(v4, kSCPropInterfaceName);
  v4 = (const __CFDictionary *)sub_100039C7C(a1, a2, kSCEntNetIPv6);
  if (v4)
    return CFDictionaryGetValue(v4, kSCPropInterfaceName);
  else
    return 0;
}

uint64_t sub_10003D368(void *key, const void *a2, const __CFDictionary *a3)
{
  const __CFDictionary *Value;
  const __CFDictionary *MutableCopy;
  __CFDictionary *v8;
  const __CFDictionary *v9;
  const __CFDictionary *v10;
  uint64_t v11;

  Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_10007DCA8, key);
  if (Value)
    MutableCopy = CFDictionaryCreateMutableCopy(0, 0, Value);
  else
    MutableCopy = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  v8 = MutableCopy;
  v9 = (const __CFDictionary *)CFDictionaryGetValue(MutableCopy, a2);
  v10 = v9;
  if (a3)
  {
    if (!v9 || !CFEqual(a3, v9))
    {
      if (byte_10007DC9C == 1)
      {
        sub_10003D50C((uint64_t)key, a2, (uint64_t)CFSTR("Changed: old"), v10);
        sub_10003D50C((uint64_t)key, a2, (uint64_t)CFSTR("Changed: new"), a3);
      }
      CFDictionarySetValue(v8, a2, a3);
LABEL_14:
      v11 = 1;
      goto LABEL_16;
    }
  }
  else if (v9)
  {
    if (byte_10007DC9C == 1)
      sub_10003D50C((uint64_t)key, a2, (uint64_t)CFSTR("Removed:"), v9);
    CFDictionaryRemoveValue(v8, a2);
    goto LABEL_14;
  }
  v11 = 0;
LABEL_16:
  if (!CFDictionaryGetCount(v8))
  {
    CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_10007DCA8, key);
    if (!v8)
      return v11;
    goto LABEL_18;
  }
  CFDictionarySetValue((CFMutableDictionaryRef)qword_10007DCA8, key, v8);
  if (v8)
LABEL_18:
    CFRelease(v8);
  return v11;
}

void sub_10003D50C(uint64_t a1, CFTypeRef cf1, uint64_t a3, const __CFDictionary *a4)
{
  const __CFDictionary *v4;
  unsigned int *v8;
  __CFString *v9;
  unsigned int *v10;
  __CFString *v11;
  const void *Value;
  os_log_t v13;
  uint64_t v14;
  const __CFString *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;

  v4 = a4;
  if (!a4)
    goto LABEL_11;
  if (!CFEqual(cf1, kSCEntNetIPv4))
  {
    if (CFEqual(cf1, kSCEntNetIPv6))
    {
      v10 = (unsigned int *)sub_10003564C(v4);
      if (v10)
      {
        v9 = sub_10003D720(v10);
        goto LABEL_8;
      }
    }
LABEL_11:
    v11 = 0;
    goto LABEL_12;
  }
  v8 = (unsigned int *)sub_10003564C(v4);
  if (!v8)
    goto LABEL_11;
  v9 = sub_100036A74(v8);
LABEL_8:
  v11 = v9;
  Value = CFDictionaryGetValue(v4, CFSTR("Service"));
  if (Value)
    CFStringAppendFormat(v11, 0, CFSTR("\n<Service> = %@"), Value);
  v4 = (const __CFDictionary *)v11;
LABEL_12:
  v13 = (os_log_t)qword_10007DC80;
  if (!qword_10007DC80)
  {
    v13 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    qword_10007DC80 = (uint64_t)v13;
  }
  v14 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v13, v14))
  {
    if (v4)
      v15 = (const __CFString *)v4;
    else
      v15 = CFSTR("<none>");
    v16 = _os_log_pack_size(42);
    v19 = (char *)&v22 - ((__chkstk_darwin(v16, v17, v18) + 15) & 0xFFFFFFFFFFFFFFF0);
    v20 = __error();
    v21 = _os_log_pack_fill(v19, v16, *v20, &_mh_execute_header, "serviceID %@ %@ %@ value = %@");
    *(_DWORD *)v21 = 138413058;
    *(_QWORD *)(v21 + 4) = a1;
    *(_WORD *)(v21 + 12) = 2112;
    *(_QWORD *)(v21 + 14) = a3;
    *(_WORD *)(v21 + 22) = 2112;
    *(_QWORD *)(v21 + 24) = cf1;
    *(_WORD *)(v21 + 32) = 2112;
    *(_QWORD *)(v21 + 34) = v15;
    __SC_log_send(7, v13, v14, v19);
  }
  if (v11)
    CFRelease(v11);
}

__CFString *sub_10003D720(unsigned int *a1)
{
  __CFString *Mutable;
  uint64_t v3;
  unsigned int *v4;

  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<IPv6RouteList[%d]> = {"), *a1);
  if ((int)*a1 >= 1)
  {
    v3 = 0;
    v4 = a1 + 3;
    do
    {
      CFStringAppendFormat(Mutable, 0, CFSTR("\n%2d. "), v3);
      sub_10003D80C(v4, Mutable);
      v3 = (v3 + 1);
      v4 += 17;
    }
    while ((int)v3 < (int)*a1);
  }
  CFStringAppend(Mutable, CFSTR("\n}"));
  return Mutable;
}

void sub_10003D80C(unsigned int *a1, CFMutableStringRef theString)
{
  const void *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v9;
  char v10[46];

  v4 = a1 + 5;
  if ((a1[4] & 4) != 0)
  {
    CFStringAppend(theString, CFSTR("Host "));
    v6 = inet_ntop(30, v4, v10, 0x2Eu);
    CFStringAppendCString(theString, v6, 0x600u);
  }
  else
  {
    CFStringAppend(theString, CFSTR("Net "));
    v5 = inet_ntop(30, v4, v10, 0x2Eu);
    CFStringAppendCString(theString, v5, 0x600u);
    CFStringAppendFormat(theString, 0, CFSTR("/%d"), *a1);
  }
  if ((a1[4] & 2) != 0)
  {
    CFStringAppend(theString, CFSTR(" Gate "));
    v7 = inet_ntop(30, a1 + 9, v10, 0x2Eu);
    CFStringAppendCString(theString, v7, 0x600u);
  }
  sub_1000368A0((uint64_t)a1, theString);
  if (*(_QWORD *)(a1 + 13) != *(_QWORD *)in6addr_any.__u6_addr8
    || *(_QWORD *)(a1 + 15) != *(_QWORD *)&in6addr_any.__u6_addr32[2])
  {
    CFStringAppend(theString, CFSTR(" Ifa "));
    v9 = inet_ntop(30, a1 + 13, v10, 0x2Eu);
    CFStringAppendCString(theString, v9, 0x600u);
  }
  sub_100036954((uint64_t)a1, theString);
}

uint64_t sub_10003D9A8(void *key, const __CFDictionary *a2, const __CFDictionary *a3)
{
  const __CFDictionary *v6;
  const __CFNumber *Value;
  uint64_t v8;
  const __CFDictionary *v9;

  if (!a2)
  {
    v8 = sub_10003D368(key, kSCEntNetIPv4, 0);
LABEL_8:
    CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_10007DD28, key);
    return v8;
  }
  v6 = (const __CFDictionary *)sub_100033308(key, kSCEntNetService);
  if (v6)
    Value = (const __CFNumber *)CFDictionaryGetValue(v6, CFSTR("RankAssertion"));
  else
    Value = 0;
  v9 = sub_10003EB58(2, a2, a3, Value);
  v8 = sub_10003D368(key, kSCEntNetIPv4, v9);
  if (!v9)
    goto LABEL_8;
  CFRelease(v9);
  return v8;
}

uint64_t sub_10003DAB0(void *key, const __CFDictionary *a2, const __CFDictionary *a3)
{
  const __CFDictionary *v6;
  const __CFNumber *Value;
  const __CFDictionary *v8;
  const __CFDictionary *v9;
  const void *v10;
  int v11;
  const __CFDictionary *v12;
  const void *v13;
  CFStringRef v14;
  const __CFDictionary *v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  CFBooleanRef v19;
  CFTypeID TypeID;
  CFBooleanRef BOOLean;

  if (!a2)
  {
    v8 = 0;
LABEL_9:
    v11 = 1;
    goto LABEL_10;
  }
  v6 = (const __CFDictionary *)sub_100033308(key, kSCEntNetService);
  if (v6)
    Value = (const __CFNumber *)CFDictionaryGetValue(v6, CFSTR("RankAssertion"));
  else
    Value = 0;
  v9 = sub_10003EB58(30, a2, a3, Value);
  v8 = v9;
  if (!v9)
    goto LABEL_9;
  v10 = sub_1000331E4(v9);
  v11 = 0;
  if (v10)
  {
LABEL_15:
    CFRetain(v10);
    v14 = kSCEntNetIPv6;
    goto LABEL_16;
  }
LABEL_10:
  v12 = (const __CFDictionary *)sub_100033308(key, kSCEntNetIPv4);
  if (v12)
  {
    v13 = sub_1000331E4(v12);
    if (v13)
    {
      v10 = v13;
      goto LABEL_15;
    }
  }
  v14 = kSCEntNetIPv6;
  v15 = (const __CFDictionary *)sub_100033308(key, kSCEntNetIPv6);
  if (v15)
  {
    v10 = sub_1000331E4(v15);
    if (!v10)
      goto LABEL_16;
    goto LABEL_15;
  }
  v10 = 0;
LABEL_16:
  sub_100040BCC(key, v8);
  v16 = sub_10003D368(key, v14, v8);
  v17 = v16;
  if (v10)
  {
    if ((_DWORD)v16)
    {
      BOOLean = 0;
      if (v11)
      {
        v18 = 2;
      }
      else
      {
        v18 = 1;
        if (a2)
        {
          if (CFDictionaryGetValueIfPresent(a2, kSCPropNetIPv6PerformPLATDiscovery, (const void **)&BOOLean))
          {
            v19 = BOOLean;
            TypeID = CFBooleanGetTypeID();
            if (v19)
            {
              if (CFGetTypeID(v19) == TypeID && CFBooleanGetValue(BOOLean))
                v18 = 0;
            }
          }
        }
      }
      sub_100039900(v18, v10);
    }
    CFRelease(v10);
  }
  if (v11)
    CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_10007DD30, key);
  else
    CFRelease(v8);
  return v17;
}

uint64_t sub_10003DCB8(__CFString *key, const __CFDictionary *a2, const __CFDictionary *a3, const void *a4)
{
  __CFDictionary *Mutable;
  const __CFDictionary *v9;
  const UInt8 *v10;
  _BOOL4 v11;
  const void *v12;
  int v13;
  const __CFDictionary *v14;
  const UInt8 *v15;
  _BOOL4 v16;
  const __CFDictionary *v17;
  void *v18;
  CFTypeID TypeID;
  uint64_t v20;
  const void *v21;
  const __CFArray *v22;
  uint64_t i;
  uint64_t v24;
  const void *v25;
  __CFString *v26;
  CFMutableStringRef v27;
  __CFString *v28;
  int v29;
  const void *v30;
  CFTypeID v31;
  const void *v32;
  CFTypeID v33;
  __CFArray *MutableCopy;
  __CFDictionary *v35;
  uint64_t v36;
  uint64_t v37;
  int v39;
  void *v40;
  int v41;
  void *value;
  _QWORD v43[7];
  CFStringRef v44;
  int v45;
  _BYTE v46[4];
  CFStringRef v47;
  int v48;
  char v49;
  CFStringRef v50;
  int v51;
  char v52;
  CFStringRef v53;
  int v54;
  char v55;
  CFRange v56;

  v44 = kSCPropNetDNSSearchDomains;
  v45 = 0;
  v46[0] = 0;
  v47 = kSCPropNetDNSSortList;
  v48 = 0;
  v49 = 0;
  v50 = kSCPropNetDNSSupplementalMatchDomains;
  v51 = 1;
  v52 = 1;
  v53 = kSCPropNetDNSSupplementalMatchOrders;
  v54 = 0;
  v55 = 1;
  v43[0] = kSCPropNetDNSDomainName;
  v43[1] = kSCPropNetDNSOptions;
  v43[2] = kSCPropNetDNSSearchOrder;
  v43[3] = kSCPropNetDNSServerPort;
  v43[4] = kSCPropNetDNSServerTimeout;
  v43[5] = kSCPropNetDNSServiceIdentifier;
  v43[6] = kSCPropNetDNSSupplementalMatchDomainsNoSearch;
  if (!((unint64_t)a2 | (unint64_t)a3))
  {
    Mutable = 0;
    goto LABEL_76;
  }
  v40 = (void *)kSCPropNetDNSServiceIdentifier;
  v9 = (const __CFDictionary *)sub_100033308(key, kSCEntNetIPv4);
  v10 = sub_10003564C(v9);
  if (v10 && (*((_WORD *)v10 + 4) & 3) == 2)
  {
    v11 = sub_10003CFB4(a4, key, kSCEntNetIPv4) != 0;
    v12 = sub_1000331E4(v9);
    v13 = 1;
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
  }
  v14 = (const __CFDictionary *)sub_100033308(key, kSCEntNetIPv6);
  v15 = sub_10003564C(v14);
  if (v15
    && (*((_WORD *)v15 + 4) & 3) == 2
    && (!v11 ? (v11 = sub_10003CFB4(a4, key, kSCEntNetIPv6) != 0) : (v11 = 1), v13 |= 2u, !v12))
  {
    v12 = sub_1000331E4(v14);
    if (v11)
      goto LABEL_14;
  }
  else if (v11)
  {
LABEL_14:
    v16 = 1;
    goto LABEL_17;
  }
  v16 = sub_10003CFB4(a4, key, kSCEntNetCommCenter) != 0;
LABEL_17:
  if (v13)
    v17 = a3;
  else
    v17 = 0;
  if (!a2 && !v13)
  {
    Mutable = 0;
    goto LABEL_70;
  }
  v41 = v13;
  v39 = v16;
  if (a2)
  {
    value = 0;
    if (CFDictionaryGetValueIfPresent(a2, kSCPropNetDNSConfirmedServiceID, (const void **)&value))
    {
      v18 = value;
      TypeID = CFStringGetTypeID();
      if (!v18)
      {
LABEL_30:
        v20 = (uint64_t)v12;
        goto LABEL_31;
      }
      if (CFGetTypeID(v18) == TypeID)
      {
        LODWORD(v18) = CFEqual(key, value) != 0;
        goto LABEL_30;
      }
    }
    LODWORD(v18) = 0;
    goto LABEL_30;
  }
  v20 = (uint64_t)v12;
  LODWORD(v18) = 0;
LABEL_31:
  Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  v21 = sub_100041564(a2, kSCPropNetDNSServerAddresses);
  if (v41)
  {
    v22 = (const __CFArray *)sub_100041564(a3, kSCPropNetDNSServerAddresses);
    v12 = (const void *)v20;
    sub_1000411DC(Mutable, (unint64_t)v21, v22, v39, (int)v18, v41, v20);
  }
  else
  {
    sub_1000411DC(Mutable, (unint64_t)v21, 0, 0, (int)v18, 3, 0);
    v12 = (const void *)v20;
  }
  for (i = 0; i != 64; i += 16)
    sub_100041610(Mutable, *(void **)((char *)&v44 + i), a2, v17, *(_DWORD *)((char *)&v44 + i + 8), v46[i]);
  v24 = 0;
  LOBYTE(v13) = v41;
  do
  {
    v25 = (const void *)v43[v24];
    if (v17)
    {
      v26 = (__CFString *)CFDictionaryGetValue(v17, (const void *)v43[v24]);
      v27 = sub_100041D14(v26, 0);
      if (!a2)
        goto LABEL_43;
    }
    else
    {
      v27 = 0;
      if (!a2)
        goto LABEL_43;
    }
    if (!v27)
    {
      v28 = (__CFString *)CFDictionaryGetValue(a2, v25);
      v27 = sub_100041D14(v28, 0);
    }
LABEL_43:
    if (v27)
    {
      CFDictionarySetValue(Mutable, v25, v27);
      CFRelease(v27);
    }
    ++v24;
  }
  while (v24 != 7);
  if (v41)
    goto LABEL_55;
  if (CFDictionaryContainsKey(Mutable, kSCPropNetDNSSupplementalMatchDomains))
  {
    CFDictionaryRemoveValue(Mutable, kSCPropNetDNSDomainName);
    CFDictionaryRemoveValue(Mutable, kSCPropNetDNSSearchDomains);
    CFDictionaryRemoveValue(Mutable, kSCPropNetDNSSearchOrder);
    CFDictionaryRemoveValue(Mutable, kSCPropNetDNSSortList);
    if (!a2 || v12)
    {
LABEL_55:
      if (CFDictionaryGetCount(Mutable))
      {
        if (v12)
          CFDictionarySetValue(Mutable, kSCPropInterfaceName, v12);
        if (!dword_10007DC98)
          goto LABEL_69;
        v30 = CFDictionaryGetValue(Mutable, kSCPropNetDNSDomainName);
        v31 = CFStringGetTypeID();
        if (!v30)
          goto LABEL_69;
        if (CFGetTypeID(v30) != v31)
          goto LABEL_69;
        v32 = CFDictionaryGetValue(Mutable, kSCPropNetDNSSearchDomains);
        v33 = CFArrayGetTypeID();
        if (!v32
          || CFGetTypeID(v32) != v33
          || (v56.length = CFArrayGetCount((CFArrayRef)v32),
              v56.location = 0,
              CFArrayContainsValue((CFArrayRef)v32, v56, v30))
          || (MutableCopy = CFArrayCreateMutableCopy(0, 0, (CFArrayRef)v32),
              CFArrayAppendValue(MutableCopy, v30),
              CFDictionarySetValue(Mutable, kSCPropNetDNSSearchDomains, MutableCopy),
              v35 = Mutable,
              !MutableCopy))
        {
LABEL_69:
          LOBYTE(v13) = v41;
          goto LABEL_70;
        }
LABEL_67:
        CFRelease(MutableCopy);
      }
      else
      {
        v35 = 0;
        MutableCopy = Mutable;
        if (Mutable)
          goto LABEL_67;
      }
      Mutable = v35;
      goto LABEL_69;
    }
LABEL_54:
    v12 = CFDictionaryGetValue(a2, kSCPropInterfaceName);
    goto LABEL_55;
  }
  v29 = CFDictionaryContainsKey(Mutable, v40);
  if (a2 && v29 && !v12)
    goto LABEL_54;
LABEL_70:
  if (!v12)
  {
LABEL_76:
    v37 = sub_10003D368(key, kSCEntNetDNS, Mutable);
    if (!Mutable)
      return v37;
LABEL_77:
    CFRelease(Mutable);
    return v37;
  }
  CFRetain(v12);
  v36 = sub_10003D368(key, kSCEntNetDNS, Mutable);
  v37 = v36;
  if ((v13 & 2) != 0 && (_DWORD)v36)
    sub_100039900(1, v12);
  CFRelease(v12);
  if (Mutable)
    goto LABEL_77;
  return v37;
}

uint64_t sub_10003E2FC(__CFString *key, const __CFDictionary *a2, const __CFDictionary *a3, const void *a4)
{
  CFStringRef v5;
  CFStringRef v6;
  const __CFDictionary *v7;
  const __CFDictionary *v9;
  const UInt8 *v10;
  int v11;
  const __CFDictionary *v12;
  const UInt8 *v13;
  int v14;
  void *v15;
  void *v16;
  __CFDictionary *MutableCopy;
  __CFDictionary *v18;
  uint64_t i;
  const void *v20;
  const void *v21;
  const void *v22;
  __CFDictionary *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const __CFDictionary *v27;
  CFNumberRef v28;
  CFTypeID TypeID;
  CFNumberRef v30;
  const __CFNumber *v31;
  CFTypeID v32;
  const __CFString *v33;
  const __CFString *v34;
  CFTypeID v35;
  const __CFDictionary *v37;
  const __CFData *OptionData;
  const __CFData *v39;
  const UInt8 *BytePtr;
  CFIndex Length;
  CFIndex v42;
  const __CFURL *v44;
  const __CFURL *v45;
  CFStringRef v46;
  CFStringRef v47;
  uint64_t v48;
  void *value;
  int v51;
  int valuePtr;
  CFNumberRef number;
  _QWORD v54[27];

  v54[0] = kSCPropNetProxiesFTPEnable;
  v54[1] = kSCPropNetProxiesFTPProxy;
  v54[2] = kSCPropNetProxiesFTPPort;
  v54[3] = kSCPropNetProxiesGopherEnable;
  v54[4] = kSCPropNetProxiesGopherProxy;
  v54[5] = kSCPropNetProxiesGopherPort;
  v54[6] = kSCPropNetProxiesHTTPEnable;
  v54[7] = kSCPropNetProxiesHTTPProxy;
  v54[8] = kSCPropNetProxiesHTTPPort;
  v54[9] = kSCPropNetProxiesHTTPSEnable;
  v54[10] = kSCPropNetProxiesHTTPSProxy;
  v54[11] = kSCPropNetProxiesHTTPSPort;
  v54[12] = kSCPropNetProxiesRTSPEnable;
  v54[13] = kSCPropNetProxiesRTSPProxy;
  v54[14] = kSCPropNetProxiesRTSPPort;
  v54[15] = kSCPropNetProxiesSOCKSEnable;
  v54[16] = kSCPropNetProxiesSOCKSProxy;
  v54[17] = kSCPropNetProxiesSOCKSPort;
  v54[18] = kSCPropNetProxiesTransportConverterEnable;
  v54[19] = kSCPropNetProxiesTransportConverterProxy;
  v54[20] = kSCPropNetProxiesTransportConverterPort;
  v54[21] = kSCPropNetProxiesProxyAutoConfigEnable;
  v5 = kSCPropNetProxiesProxyAutoConfigURLString;
  v54[22] = kSCPropNetProxiesProxyAutoConfigURLString;
  v54[23] = kSCPropNetProxiesProxyAutoConfigJavaScript;
  v6 = kSCPropNetProxiesProxyAutoDiscoveryEnable;
  v54[25] = 0;
  v54[26] = 0;
  v54[24] = kSCPropNetProxiesProxyAutoDiscoveryEnable;
  if (!((unint64_t)a2 | (unint64_t)a3))
    return sub_10003D368(key, kSCEntNetProxies, 0);
  v7 = a3;
  v9 = (const __CFDictionary *)sub_100033308(key, kSCEntNetIPv4);
  v10 = sub_10003564C(v9);
  if (v10 && (*((_WORD *)v10 + 4) & 3) == 2)
  {
    value = (void *)sub_1000331E4(v9);
    v11 = 1;
  }
  else
  {
    v11 = 0;
    value = 0;
  }
  v12 = (const __CFDictionary *)sub_100033308(key, kSCEntNetIPv6);
  v13 = sub_10003564C(v12);
  if (v13 && (*((_WORD *)v13 + 4) & 3) == 2)
  {
    if (!value)
      value = (void *)sub_1000331E4(v12);
    goto LABEL_16;
  }
  if (a2)
    v14 = 1;
  else
    v14 = v11;
  if (!v11)
    v7 = 0;
  if (v14 != 1)
    return sub_10003D368(key, kSCEntNetProxies, 0);
LABEL_16:
  if (!a2 || !v7)
  {
    if (v7)
    {
      v27 = v7;
    }
    else
    {
      if (!a2)
        return sub_10003D368(key, kSCEntNetProxies, 0);
      v27 = a2;
    }
    MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v27);
    if (MutableCopy)
      goto LABEL_44;
    return sub_10003D368(key, kSCEntNetProxies, 0);
  }
  v15 = (void *)kSCPropNetProxiesSupplementalMatchDomains;
  v16 = (void *)kSCPropNetProxiesSupplementalMatchOrders;
  MutableCopy = CFDictionaryCreateMutableCopy(0, 0, a2);
  sub_100041610(MutableCopy, v15, a2, v7, 1, 1);
  sub_100041610(MutableCopy, v16, a2, v7, 0, 1);
  v18 = CFDictionaryCreateMutableCopy(0, 0, v7);
  for (i = 0; i != 27; i += 3)
  {
    v20 = (const void *)v54[i];
    if (CFDictionaryContainsKey(v18, v20))
    {
      CFDictionaryRemoveValue(MutableCopy, v20);
      v21 = (const void *)v54[i + 1];
      if (v21)
        CFDictionaryRemoveValue(MutableCopy, v21);
      v22 = (const void *)v54[i + 2];
      if (v22)
      {
        v23 = MutableCopy;
LABEL_29:
        CFDictionaryRemoveValue(v23, v22);
        continue;
      }
    }
    else if (CFDictionaryContainsKey(a2, v20)
           || (v25 = (const void *)v54[i + 1]) != 0 && CFDictionaryContainsKey(a2, v25)
           || (v26 = (const void *)v54[i + 2]) != 0 && CFDictionaryContainsKey(a2, v26))
    {
      CFDictionaryRemoveValue(v18, v20);
      v24 = (const void *)v54[i + 1];
      if (v24)
        CFDictionaryRemoveValue(v18, v24);
      v22 = (const void *)v54[i + 2];
      if (v22)
      {
        v23 = v18;
        goto LABEL_29;
      }
    }
  }
  CFDictionaryApplyFunction(v18, (CFDictionaryApplierFunction)sub_100041DD0, MutableCopy);
  CFRelease(v18);
  v5 = kSCPropNetProxiesProxyAutoConfigURLString;
  v6 = kSCPropNetProxiesProxyAutoDiscoveryEnable;
  if (!MutableCopy)
    return sub_10003D368(key, kSCEntNetProxies, 0);
LABEL_44:
  if (!CFDictionaryGetCount(MutableCopy))
  {
    CFRelease(MutableCopy);
    return sub_10003D368(key, kSCEntNetProxies, 0);
  }
  if (value)
    CFDictionarySetValue(MutableCopy, kSCPropInterfaceName, value);
  number = 0;
  valuePtr = 0;
  if (CFDictionaryGetValueIfPresent(MutableCopy, v6, (const void **)&number)
    && (v28 = number, TypeID = CFNumberGetTypeID(), v28)
    && CFGetTypeID(v28) == TypeID)
  {
    v30 = number;
    if (!CFNumberGetValue(number, kCFNumberIntType, &valuePtr))
      goto LABEL_82;
  }
  else
  {
    v30 = 0;
  }
  if (!valuePtr)
  {
LABEL_79:
    if (!v30)
      goto LABEL_81;
    goto LABEL_80;
  }
  v51 = 0;
  v31 = (const __CFNumber *)CFDictionaryGetValue(MutableCopy, kSCPropNetProxiesProxyAutoConfigEnable);
  number = v31;
  v32 = CFNumberGetTypeID();
  if (!v31 || CFGetTypeID(v31) != v32 || !CFNumberGetValue(number, kCFNumberIntType, &v51))
  {
LABEL_67:
    v51 = 0;
    goto LABEL_68;
  }
  if (!v51)
    goto LABEL_68;
  v33 = (const __CFString *)CFDictionaryGetValue(MutableCopy, v5);
  if (!v33)
  {
    v34 = (const __CFString *)CFDictionaryGetValue(MutableCopy, kSCPropNetProxiesProxyAutoConfigJavaScript);
    v35 = CFStringGetTypeID();
    if (v34)
      goto LABEL_63;
    goto LABEL_67;
  }
  v34 = v33;
  v35 = CFStringGetTypeID();
LABEL_63:
  if (CFGetTypeID(v34) != v35 || !CFStringGetLength(v34))
    goto LABEL_67;
  if (v51)
    goto LABEL_82;
LABEL_68:
  v37 = (const __CFDictionary *)sub_100039C7C(a4, key, kSCEntNetDHCP);
  if (v37)
  {
    OptionData = DHCPInfoGetOptionData(v37, 0xFCu);
    if (OptionData)
    {
      v39 = OptionData;
      BytePtr = CFDataGetBytePtr(OptionData);
      Length = CFDataGetLength(v39);
      while (1)
      {
        v42 = Length - 1;
        if (Length < 1)
          break;
        if (BytePtr[--Length])
        {
          v44 = CFURLCreateWithBytes(0, BytePtr, v42 + 1, 0x8000100u, 0);
          if (!v44)
            break;
          v45 = v44;
          v46 = CFURLGetString(v44);
          if (v46)
          {
            v47 = v46;
            CFRetain(v46);
            CFRelease(v45);
            goto LABEL_78;
          }
          CFRelease(v45);
          break;
        }
      }
    }
  }
  v47 = sub_100041E24();
  if (v47)
  {
LABEL_78:
    v51 = 1;
    number = CFNumberCreate(0, kCFNumberIntType, &v51);
    CFDictionarySetValue(MutableCopy, kSCPropNetProxiesProxyAutoConfigEnable, number);
    CFRelease(number);
    CFDictionarySetValue(MutableCopy, v5, v47);
    CFRelease(v47);
    goto LABEL_79;
  }
LABEL_82:
  valuePtr = 0;
  if (v30)
  {
LABEL_80:
    number = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    CFDictionarySetValue(MutableCopy, v6, number);
    CFRelease(number);
  }
LABEL_81:
  v48 = sub_10003D368(key, kSCEntNetProxies, MutableCopy);
  CFRelease(MutableCopy);
  return v48;
}

uint64_t sub_10003EA24(__CFString *serviceID, int a2, int a3, const void *a4)
{
  const void *v5;
  const __CFDictionary *v6;
  const void *Value;
  CFTypeID TypeID;
  __CFDictionary *Mutable;
  uint64_t v10;

  v5 = (const void *)kSCEntNetCommCenter;
  v6 = (const __CFDictionary *)sub_100039C7C(a4, serviceID, kSCEntNetCommCenter);
  if (!v6)
  {
    CFNumberGetTypeID();
    return sub_10003D368(serviceID, v5, 0);
  }
  Value = CFDictionaryGetValue(v6, CFSTR("AvailableProtocols"));
  TypeID = CFNumberGetTypeID();
  if (!Value || CFGetTypeID(Value) != TypeID)
    return sub_10003D368(serviceID, v5, 0);
  Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionaryAddValue(Mutable, CFSTR("AvailableProtocols"), Value);
  v10 = sub_10003D368(serviceID, v5, Mutable);
  if (Mutable)
    CFRelease(Mutable);
  return v10;
}

CFDictionaryRef sub_10003EB58(int a1, const __CFDictionary *a2, CFDictionaryRef theDict, const __CFNumber *a4)
{
  const CFStringRef *v8;
  CFStringRef v9;
  const void **v10;
  const void *v11;
  const void *Value;
  unint64_t v13;
  unint64_t v14;
  __CFDictionary *v15;
  const __CFArray *v16;
  CFTypeID TypeID;
  const __CFArray *v18;
  __CFDictionary *MutableCopy;
  __CFDictionary *v20;
  const __CFArray *v21;
  CFTypeID v22;
  __CFArray *v23;
  const UInt8 *v24;
  void **v25;
  CFDataRef v26;
  void **v27;
  const __CFString *v28;
  const __CFString *v29;
  int v30;
  int v31;
  int v32;
  const void *v33;
  const __CFArray *v34;
  CFTypeID v35;
  const __CFNumber *ValueAtIndex;
  int v37;
  int v38;
  __int16 v41;
  __int16 v42;
  int v43;
  unint64_t v44;
  CFTypeID v45;
  __int16 v46;
  CFIndex Count;
  CFTypeID v48;
  unsigned int v49;
  int32x4_t *p_keys;
  CFDictionaryRef v51;
  char v53;
  __int16 v54;
  int32x4_t v55;
  int32x4_t *v56;
  int *i32;
  int32x4_t v58;
  int *v59;
  uint64_t i;
  unsigned int *v61;
  CFIndex range;
  char v63;
  char v64;
  int v65;
  CFIndex theArray;
  _BOOL4 v67;
  unsigned int *v68;
  int valuePtr;
  unsigned int v70;
  void *keys;
  const __CFString *v72;
  void *values;
  CFDataRef v74;
  uint64_t v75;
  unsigned int **v76;
  __int128 v77;
  int32x4_t v78;
  char v79[16];
  int32x4_t v80;
  CFRange v81;
  CFRange v82;
  CFRange v83;

  if (theDict)
  {
    v8 = &kSCPropNetIPv4Router;
    keys = 0;
    v72 = 0;
    if (a1 != 2)
      v8 = &kSCPropNetIPv6Router;
    v9 = *v8;
    v10 = (const void **)&kSCPropNetIPv4AdditionalRoutes;
    if (a1 != 2)
      v10 = (const void **)&kSCPropNetIPv6AdditionalRoutes;
    v11 = *v10;
    Value = CFDictionaryGetValue(theDict, v9);
    if (Value)
    {
      v13 = (unint64_t)Value;
      if (sub_100032F84(a1, Value, &keys, 0x10uLL))
        v14 = v13;
      else
        v14 = 0;
    }
    else
    {
      v14 = 0;
    }
    v16 = (const __CFArray *)CFDictionaryGetValue(theDict, v11);
    TypeID = CFArrayGetTypeID();
    if (v16)
    {
      if (CFGetTypeID(v16) == TypeID)
        v18 = v16;
      else
        v18 = 0;
    }
    else
    {
      v18 = 0;
    }
    if (v14 | (unint64_t)v18)
    {
      MutableCopy = CFDictionaryCreateMutableCopy(0, 0, a2);
      v20 = MutableCopy;
      if (v14)
        CFDictionarySetValue(MutableCopy, v9, (const void *)v14);
      if (v18)
      {
        v21 = (const __CFArray *)CFDictionaryGetValue(a2, v11);
        v22 = CFArrayGetTypeID();
        if (v21 && CFGetTypeID(v21) == v22)
        {
          v23 = CFArrayCreateMutableCopy(0, 0, v18);
          v83.length = CFArrayGetCount(v21);
          v83.location = 0;
          CFArrayAppendArray(v23, v21, v83);
          CFDictionarySetValue(v20, v11, v23);
          if (v23)
            CFRelease(v23);
        }
        else
        {
          CFDictionarySetValue(v20, v11, v18);
        }
      }
      v15 = v20;
    }
    else
    {
      v15 = 0;
      v20 = a2;
    }
    a2 = v20;
  }
  else
  {
    v15 = 0;
  }
  if (a1 == 2)
  {
    keys = (void *)0x500000000;
    LOWORD(v72) = 0;
    v24 = (const UInt8 *)sub_10003F408(&keys, a2, a4);
    if (v24)
    {
      v25 = (void **)v24;
      v26 = CFDataCreate(0, v24, 36 * *(int *)v24 + 12);
      if (v25 == &keys)
        goto LABEL_95;
      v27 = v25;
      goto LABEL_33;
    }
    goto LABEL_94;
  }
  keys = (void *)0x300000000;
  LOWORD(v72) = 0;
  valuePtr = 0x1000000;
  v70 = 0;
  v78 = (int32x4_t)in6addr_any;
  if (!a2)
    goto LABEL_94;
  v80 = 0uLL;
  v28 = sub_10003FAF4(a2, kSCPropInterfaceName, v79);
  if (!v28)
    goto LABEL_94;
  v29 = v28;
  v30 = sub_10002D8E0((uint64_t)v79);
  if (!v30)
    goto LABEL_94;
  v31 = v30;
  v32 = sub_10003FB98(a2, v29);
  v33 = CFDictionaryGetValue(a2, kSCPropNetIPv6Router);
  if (!sub_100032F84(30, v33, &v78, 0x10uLL))
    sub_1000404F8(a2, kSCPropNetIPv6DestAddresses, &v78);
  if (!sub_1000404F8(a2, kSCPropNetIPv6Addresses, &v80)
    || (vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(v80, v80))) & 1) == 0)
  {
LABEL_94:
    v26 = 0;
    goto LABEL_95;
  }
  v34 = (const __CFArray *)CFDictionaryGetValue(a2, kSCPropNetIPv6PrefixLength);
  v35 = CFArrayGetTypeID();
  if (v34)
  {
    if (CFGetTypeID(v34) == v35 && CFArrayGetCount(v34) >= 1)
    {
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v34, 0);
      if (sub_100040A94(ValueAtIndex, &v70))
      {
        if (v80.u8[0] == 254)
        {
          if ((v80.i8[1] & 0xC0) != 0x80 && v70 <= 0x80)
            goto LABEL_48;
        }
        else if (v70 < 0x81)
        {
LABEL_48:
          v64 = 0;
          v37 = 1;
          goto LABEL_51;
        }
      }
    }
  }
  v37 = 0;
  v70 = 0;
  v64 = 1;
LABEL_51:
  if (a4)
    CFNumberGetValue(a4, kCFNumberSInt32Type, &valuePtr);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(v78, v78))) & 1) != 0)
  {
    v38 = sub_10002DD9C();
    if (v31 != v38)
      ++v37;
    if (v70 != 128 && v78.i64[1] == v80.i64[1] && v78.i64[0] == v80.i64[0])
      v41 = 0;
    else
      v41 = 2;
    v67 = v31 != v38;
    if (!a4 && sub_10003FDA8(a2))
      valuePtr = 0;
  }
  else
  {
    v41 = 0;
    v67 = 0;
  }
  v65 = sub_10003FE7C(a2, CFSTR("IsNULL"));
  if (v65)
    v42 = v41 | 8;
  else
    v42 = v41;
  v43 = valuePtr;
  if (valuePtr == 50331648)
  {
    v63 = 0;
    v42 |= 1u;
    v43 = 0x2000000;
  }
  else if (valuePtr == 0x4000000)
  {
    v43 = 50331648;
    valuePtr = 50331648;
    v42 |= 1u;
    v63 = 1;
  }
  else
  {
    v63 = 0;
  }
  if (!v32)
  {
    v44 = 0;
    range = 0;
    theArray = 0;
    Count = 0;
    goto LABEL_91;
  }
  v44 = (unint64_t)CFDictionaryGetValue(a2, kSCPropNetIPv6AdditionalRoutes);
  v45 = CFArrayGetTypeID();
  if (!v44)
  {
    v46 = v42;
LABEL_84:
    range = 0;
    goto LABEL_85;
  }
  if (CFGetTypeID((CFTypeRef)v44) != v45)
  {
    v46 = v42;
    v44 = 0;
    goto LABEL_84;
  }
  v46 = v42;
  range = CFArrayGetCount((CFArrayRef)v44);
  v37 += range;
LABEL_85:
  Count = (CFIndex)CFDictionaryGetValue(a2, kSCPropNetIPv6ExcludedRoutes);
  v48 = CFArrayGetTypeID();
  if (Count)
  {
    if (CFGetTypeID((CFTypeRef)Count) == v48)
    {
      theArray = Count;
      Count = CFArrayGetCount((CFArrayRef)Count);
      v37 += Count;
    }
    else
    {
      theArray = 0;
      Count = 0;
    }
  }
  else
  {
    theArray = 0;
  }
  v42 = v46;
LABEL_91:
  if (!v37)
    goto LABEL_94;
  v49 = v37 + 1;
  if (v37 >= 3)
  {
    p_keys = (int32x4_t *)malloc_type_malloc(68 * v49 + 12, 0x18EB784EuLL);
    bzero(p_keys, 68 * v49 + 12);
    p_keys->i32[1] = v49;
  }
  else
  {
    p_keys = (int32x4_t *)&keys;
    __memset_chk((char *)&v72 + 4, 0, 68 * (int)v49, 204);
  }
  p_keys->i32[0] = v49;
  v53 = v63 ^ 1;
  if (v65)
    v53 = 0;
  if ((v53 & 1) == 0)
  {
    if (v65)
      v54 = 1;
    else
      v54 = 4;
    p_keys->i16[4] |= v54;
  }
  if (v67)
  {
    p_keys->i16[4] |= 2u;
    p_keys[1].i32[0] = v31;
    v55 = v80;
    v56 = &v78;
    if ((v42 & 2) == 0)
      v56 = &v80;
    p_keys[3] = *v56;
    p_keys[4] = v55;
    p_keys[1].i32[2] = valuePtr;
    p_keys[1].i16[6] = v42 | 0x10;
    i32 = p_keys[5].i32;
  }
  else
  {
    i32 = &p_keys->i32[3];
  }
  *((_WORD *)i32 + 10) = -32514;
  *i32 = 64;
  i32[1] = v31;
  i32[3] = v43;
  *((_WORD *)i32 + 8) |= 0x10u;
  v68 = (unsigned int *)(i32 + 17);
  if ((v64 & 1) == 0)
  {
    *((_WORD *)i32 + 42) |= v42 & 8 | 0x10;
    i32[18] = v31;
    v58 = v80;
    *(int32x4_t *)(i32 + 26) = v80;
    v59 = i32 + 22;
    *(int32x4_t *)(i32 + 22) = v58;
    values = 0;
    v74 = 0;
    sub_100040B24(&values, v70);
    for (i = 0; i != 16; ++i)
      *((_BYTE *)v59 + i) &= *((_BYTE *)&values + i);
    v61 = v68;
    *v68 = v70;
    *(int32x4_t *)(v61 + 13) = v80;
    v61[3] = v43;
    v68 = v61 + 17;
  }
  if (v44 | theArray)
  {
    values = 0;
    v75 = 0;
    v77 = 0u;
    v74 = (CFDataRef)p_keys;
    v76 = &v68;
    LODWORD(v77) = v43;
    if (v44)
    {
      LODWORD(v75) = v31;
      values = &v80;
      *((_QWORD *)&v77 + 1) = "AdditionalRoutes";
      v81.location = 0;
      v81.length = range;
      CFArrayApplyFunction((CFArrayRef)v44, v81, (CFArrayApplierFunction)sub_1000405B4, &values);
    }
    if (theArray)
    {
      *((_QWORD *)&v77 + 1) = "ExcludedRoutes";
      LODWORD(v75) = 0;
      HIDWORD(v75) = v31;
      values = 0;
      v82.location = 0;
      v82.length = Count;
      CFArrayApplyFunction((CFArrayRef)theArray, v82, (CFArrayApplierFunction)sub_1000405B4, &values);
    }
  }
  v26 = CFDataCreate(0, (const UInt8 *)p_keys, 68 * p_keys->i32[0] + 12);
  if (p_keys != (int32x4_t *)&keys)
  {
    v27 = (void **)p_keys;
LABEL_33:
    free(v27);
  }
LABEL_95:
  if (!v26)
  {
    v51 = 0;
    if (!v15)
      return v51;
    goto LABEL_97;
  }
  keys = CFSTR("Service");
  v72 = CFSTR("Routes");
  values = a2;
  v74 = v26;
  v51 = CFDictionaryCreate(0, (const void **)&keys, (const void **)&values, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFRelease(v26);
  if (v15)
LABEL_97:
    CFRelease(v15);
  return v51;
}

_DWORD *sub_10003F408(_DWORD *a1, const __CFDictionary *a2, const __CFNumber *a3)
{
  const __CFString *v6;
  const __CFString *v7;
  int v8;
  int v9;
  int v10;
  const void *Value;
  int v12;
  int v13;
  int v14;
  int v15;
  __int16 v17;
  int v19;
  __int16 v20;
  int v21;
  signed int v22;
  const __CFArray *v23;
  CFTypeID TypeID;
  int v25;
  const __CFArray *v26;
  CFIndex v27;
  os_log_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  char *v43;
  CFTypeID v44;
  int v45;
  int v46;
  char v47;
  __int16 v48;
  _DWORD *v49;
  char v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  CFIndex Count;
  int v60;
  int v61;
  int v62;
  _BOOL4 v63;
  int v64;
  int v65;
  CFIndex *v66;
  int v67;
  _QWORD context[2];
  uint64_t v69;
  _QWORD *v70;
  __int128 v71;
  int v72;
  _DWORD *v73;
  int valuePtr;
  uint64_t v75;
  char v76[16];
  CFRange v77;
  CFRange v78;

  v75 = 0;
  valuePtr = 0x1000000;
  v72 = 0;
  if (!a2)
    return 0;
  v6 = sub_10003FAF4(a2, kSCPropInterfaceName, v76);
  if (!v6)
    return 0;
  v7 = v6;
  v8 = sub_10002D8E0((uint64_t)v76);
  if (!v8)
    return 0;
  v9 = v8;
  v10 = sub_10003FB98(a2, v7);
  Value = CFDictionaryGetValue(a2, kSCPropNetIPv4Router);
  if (!sub_100032F84(2, Value, &v72, 4uLL))
    sub_10003FC34(a2, kSCPropNetIPv4DestAddresses, &v72);
  if (!sub_10003FC34(a2, kSCPropNetIPv4Addresses, (char *)&v75 + 4)
    || !sub_10003FC34(a2, kSCPropNetIPv4SubnetMasks, &v75))
  {
    v13 = 0;
    v12 = 0;
LABEL_11:
    v15 = 0;
    v14 = 1;
    goto LABEL_12;
  }
  v12 = v75 & HIDWORD(v75);
  v13 = sub_10003FCF0(v75);
  if ((v13 & 0x80000000) == 0)
  {
    v14 = 0;
    v15 = 1;
    goto LABEL_12;
  }
  v28 = (os_log_t)qword_10007DC80;
  if (!qword_10007DC80)
  {
    v28 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    qword_10007DC80 = (uint64_t)v28;
  }
  v29 = _SC_syslog_os_log_mapping(5);
  if (!__SC_log_enabled(5, v28, v29))
    goto LABEL_11;
  v30 = v13;
  v31 = _os_log_pack_size(36);
  v66 = &Count;
  v34 = __chkstk_darwin(v31, v32, v33);
  v67 = v12;
  v35 = (char *)&Count - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __error();
  v37 = v31;
  v13 = v30;
  v38 = _os_log_pack_fill(v35, v37, *v36, &_mh_execute_header, "ignoring bad subnet mask %d.%d.%d.%d on %s", Count, v60, v62, v64, (const char *)v66);
  v39 = v75;
  v40 = BYTE1(v75);
  v41 = BYTE2(v75);
  v42 = BYTE3(v75);
  *(_DWORD *)v38 = 67110146;
  *(_DWORD *)(v38 + 4) = v39;
  *(_WORD *)(v38 + 8) = 1024;
  *(_DWORD *)(v38 + 10) = v40;
  *(_WORD *)(v38 + 14) = 1024;
  *(_DWORD *)(v38 + 16) = v41;
  *(_WORD *)(v38 + 20) = 1024;
  *(_DWORD *)(v38 + 22) = v42;
  *(_WORD *)(v38 + 26) = 2080;
  *(_QWORD *)(v38 + 28) = v76;
  v43 = v35;
  v12 = v67;
  __SC_log_send(5, v28, v29, v43);
  v14 = 1;
  v15 = 0;
LABEL_12:
  if (!HIDWORD(v75))
    return 0;
  if (a3)
    CFNumberGetValue(a3, kCFNumberSInt32Type, &valuePtr);
  v61 = v13;
  if (v72)
  {
    if ((_DWORD)v75 != -1 && HIDWORD(v75) == v72)
      v17 = 0;
    else
      v17 = 2;
    if (!a3 && sub_10003FDA8(a2))
      valuePtr = 0;
  }
  else
  {
    v17 = 0;
    if (valuePtr != 0x2000000 && valuePtr != 50331648 && valuePtr != 0x4000000)
    {
      v17 = 0;
      valuePtr = 0x2000000;
    }
  }
  v19 = sub_10003FE7C(a2, CFSTR("IsNULL"));
  if (v19)
    v20 = v17 | 8;
  else
    v20 = v17;
  v21 = valuePtr;
  v67 = v14;
  v65 = v19;
  if (valuePtr == 50331648)
  {
    v62 = 0;
    v20 |= 1u;
    v21 = 0x2000000;
  }
  else if (valuePtr == 0x4000000)
  {
    v21 = 50331648;
    valuePtr = 50331648;
    v20 |= 1u;
    v62 = 1;
  }
  else
  {
    v62 = 0;
  }
  LODWORD(v66) = v20 & 2;
  v22 = v15 + (v66 >> 1);
  v64 = sub_10002DD9C();
  if (v9 == v64)
  {
    v63 = 0;
    if (v10)
      goto LABEL_41;
  }
  else
  {
    v63 = v72 != 0;
    if (v72)
      v25 = v22 + 1;
    else
      v25 = v15 + ((v20 & 2) >> 1);
    v22 = v25 + 2;
    if (v10)
    {
LABEL_41:
      v23 = (const __CFArray *)CFDictionaryGetValue(a2, kSCPropNetIPv4AdditionalRoutes);
      TypeID = CFArrayGetTypeID();
      if (v23)
      {
        if (CFGetTypeID(v23) == TypeID)
        {
          Count = CFArrayGetCount(v23);
          v22 += Count;
          goto LABEL_55;
        }
        v23 = 0;
      }
      Count = 0;
LABEL_55:
      v26 = (const __CFArray *)CFDictionaryGetValue(a2, kSCPropNetIPv4ExcludedRoutes);
      v44 = CFArrayGetTypeID();
      if (v26)
      {
        if (CFGetTypeID(v26) == v44)
        {
          v27 = CFArrayGetCount(v26);
          v22 += v27;
          goto LABEL_60;
        }
        v26 = 0;
      }
      v27 = 0;
      goto LABEL_60;
    }
  }
  v26 = 0;
  v27 = 0;
  Count = 0;
  v23 = 0;
LABEL_60:
  if (a1 && a1[1] >= v22)
  {
    bzero(a1 + 3, 36 * v22);
  }
  else
  {
    a1 = malloc_type_malloc(36 * v22 + 12, 0xABECC3C1uLL);
    bzero(a1, 36 * v22 + 12);
    a1[1] = v22;
  }
  v45 = v65;
  v46 = (int)v66;
  *a1 = v22;
  v47 = v62 ^ 1;
  if (v45)
    v47 = 0;
  if ((v47 & 1) == 0)
  {
    if (v45)
      v48 = 1;
    else
      v48 = 4;
    *((_WORD *)a1 + 4) |= v48;
  }
  v49 = a1 + 3;
  v73 = a1 + 3;
  v50 = v67;
  if (v63)
  {
    *((_WORD *)a1 + 4) |= 2u;
    a1[4] = v9;
    v51 = HIDWORD(v75);
    *((_WORD *)a1 + 14) = v20;
    v52 = v72;
    if (!v46)
      v52 = v51;
    a1[10] = v52;
    a1[11] = v51;
    a1[6] = valuePtr;
    v49 = a1 + 12;
    v73 = a1 + 12;
  }
  if (v9 == v64)
  {
    if ((v50 & 1) != 0)
      goto LABEL_77;
LABEL_84:
    if ((v20 & 8) != 0)
      *((_WORD *)v49 + 8) |= 8u;
    v55 = v75;
    v54 = HIDWORD(v75);
    v49[5] = v12;
    v49[6] = v55;
    *v49 = v61;
    v49[1] = v9;
    v56 = HIDWORD(v75);
    v49[7] = v54;
    v49[8] = v56;
    v49[3] = v21;
    v49 += 9;
    v73 = v49;
    if (!v46)
      goto LABEL_90;
    goto LABEL_87;
  }
  if ((v20 & 8) != 0)
    *((_WORD *)v49 + 8) |= 8u;
  *(_QWORD *)(v49 + 5) = -1;
  *v49 = 32;
  v49[1] = v9;
  v53 = HIDWORD(v75);
  v49[8] = HIDWORD(v75);
  v49[3] = v21;
  if ((v20 & 8) != 0)
    *((_WORD *)v49 + 26) |= 8u;
  *((_QWORD *)v49 + 7) = 0xF0000000E0;
  v49[9] = 4;
  v49[10] = v9;
  v49[17] = v53;
  v49[12] = v21;
  v49 += 18;
  v73 = v49;
  if ((v50 & 1) == 0)
    goto LABEL_84;
LABEL_77:
  if (v46)
  {
LABEL_87:
    if ((v20 & 8) != 0)
      *((_WORD *)v49 + 8) |= 8u;
    v57 = HIDWORD(v75);
    v49[5] = v72;
    v49[6] = -1;
    *v49 = 32;
    v49[1] = v9;
    v58 = HIDWORD(v75);
    v49[7] = v57;
    v49[8] = v58;
    v49[3] = v21;
    v73 = v49 + 9;
  }
LABEL_90:
  if ((unint64_t)v26 | (unint64_t)v23)
  {
    context[0] = 0;
    v69 = 0;
    v71 = 0u;
    context[1] = a1;
    v70 = &v73;
    LODWORD(v71) = v21;
    if (v23)
    {
      LODWORD(v69) = v9;
      LODWORD(context[0]) = HIDWORD(v75);
      *((_QWORD *)&v71 + 1) = "AdditionalRoutes";
      v77.location = 0;
      v77.length = Count;
      CFArrayApplyFunction(v23, v77, (CFArrayApplierFunction)sub_10003FF20, context);
    }
    if (v26)
    {
      *((_QWORD *)&v71 + 1) = "ExcludedRoutes";
      LODWORD(v69) = 0;
      HIDWORD(v69) = v9;
      v78.location = 0;
      v78.length = v27;
      CFArrayApplyFunction(v26, v78, (CFArrayApplierFunction)sub_10003FF20, context);
    }
  }
  return a1;
}

const __CFString *sub_10003FAF4(const __CFDictionary *a1, const void *a2, char *a3)
{
  const __CFString *Value;
  CFTypeID TypeID;

  Value = (const __CFString *)CFDictionaryGetValue(a1, a2);
  TypeID = CFStringGetTypeID();
  if (!Value || CFGetTypeID(Value) != TypeID)
    return 0;
  if (CFStringGetCString(Value, a3, 16, 0x8000100u))
    return Value;
  return 0;
}

uint64_t sub_10003FB98(const __CFDictionary *a1, const void *a2)
{
  const void *Value;
  CFTypeID TypeID;

  Value = CFDictionaryGetValue(a1, kSCPropConfirmedInterfaceName);
  TypeID = CFStringGetTypeID();
  if (Value && CFGetTypeID(Value) == TypeID)
    return CFEqual(Value, a2);
  else
    return 1;
}

BOOL sub_10003FC34(const __CFDictionary *a1, const void *a2, void *a3)
{
  const __CFArray *Value;
  CFTypeID TypeID;
  const void *ValueAtIndex;
  _BOOL8 result;

  Value = (const __CFArray *)CFDictionaryGetValue(a1, a2);
  TypeID = CFArrayGetTypeID();
  result = 0;
  if (Value)
  {
    if (CFGetTypeID(Value) == TypeID && CFArrayGetCount(Value) >= 1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(Value, 0);
      if (sub_100032F84(2, ValueAtIndex, a3, 4uLL))
        return 1;
    }
  }
  return result;
}

uint64_t sub_10003FCF0(unsigned int a1)
{
  uint64_t v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;
  int v5;

  v1 = 0;
  if (a1)
  {
    v2 = a1;
    do
    {
      if (((0x2EFEuLL >> (v2 & 0xF)) & 1) != 0)
        return 0xFFFFFFFFLL;
      v1 = (v1 + byte_100069660[v2 & 0xF]);
      v3 = v2 > 0xF;
      v2 >>= 4;
    }
    while (v3);
    if ((v1 & 0x80000000) != 0)
      return v1;
  }
  v4 = 0xFFFFFFFFLL;
  if ((v1 - 33) >= 0xFFFFFFE0)
    v5 = -1 << -(char)v1;
  else
    v5 = 0;
  if (bswap32(a1) == v5)
    return v1;
  return v4;
}

uint64_t sub_10003FDA8(const __CFDictionary *a1)
{
  const __CFNumber *Value;
  CFTypeID TypeID;
  CFTypeID v3;
  int valuePtr;

  Value = (const __CFNumber *)CFDictionaryGetValue(a1, kSCPropNetOverridePrimary);
  TypeID = CFNumberGetTypeID();
  if (Value)
  {
    if (CFGetTypeID(Value) == TypeID)
    {
      valuePtr = 0;
      CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
      if (!valuePtr)
        return 0;
    }
    else
    {
      v3 = CFBooleanGetTypeID();
      if (CFGetTypeID(Value) != v3 || !CFBooleanGetValue(Value))
        return 0;
    }
    return 1;
  }
  CFBooleanGetTypeID();
  return 0;
}

uint64_t sub_10003FE7C(const __CFDictionary *a1, const void *a2)
{
  const __CFBoolean *Value;
  CFTypeID TypeID;

  if (a1
    && (Value = (const __CFBoolean *)CFDictionaryGetValue(a1, a2), TypeID = CFBooleanGetTypeID(), Value)
    && CFGetTypeID(Value) == TypeID)
  {
    return CFBooleanGetValue(Value);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_10003FF20(const void *a1, uint64_t a2)
{
  uint64_t v4;
  CFTypeID TypeID;
  const void *Value;
  const void *v7;
  uint64_t result;
  int v9;
  const void *v10;
  __int16 v11;
  os_log_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  os_log_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  char v45[16];

  v4 = **(_QWORD **)(a2 + 24);
  TypeID = CFDictionaryGetTypeID();
  if (!a1 || CFGetTypeID(a1) != TypeID)
  {
    v12 = (os_log_t)qword_10007DC80;
    if (!qword_10007DC80)
    {
      v12 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_10007DC80 = (uint64_t)v12;
    }
    v13 = _SC_syslog_os_log_mapping(5);
    result = __SC_log_enabled(5, v12, v13);
    if ((_DWORD)result)
    {
      v14 = _os_log_pack_size(12);
      v17 = &v45[-((__chkstk_darwin(v14, v15, v16) + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
      v18 = __error();
      v19 = _os_log_pack_fill(v17, v14, *v18, &_mh_execute_header, "%s route is not a dictionary", v44);
      v20 = *(_QWORD *)(a2 + 40);
      *(_DWORD *)v19 = 136315138;
      *(_QWORD *)(v19 + 4) = v20;
      result = __SC_log_send(5, v12, v13, v17);
    }
    goto LABEL_21;
  }
  Value = CFDictionaryGetValue((CFDictionaryRef)a1, kSCPropNetIPv4RouteDestinationAddress);
  if (sub_100032F84(2, Value, (void *)(v4 + 20), 4uLL)
    && (v7 = CFDictionaryGetValue((CFDictionaryRef)a1, kSCPropNetIPv4RouteSubnetMask),
        sub_100032F84(2, v7, (void *)(v4 + 24), 4uLL)))
  {
    result = sub_10003FCF0(*(_DWORD *)(v4 + 24));
    if ((result & 0x80000000) == 0)
    {
      *(_DWORD *)v4 = result;
      *(_DWORD *)(v4 + 12) = *(_DWORD *)(a2 + 32);
      *(_DWORD *)(v4 + 8) = *(_DWORD *)(a2 + 20);
      v9 = *(_DWORD *)(a2 + 16);
      if (v9)
      {
        *(_DWORD *)(v4 + 4) = v9;
        *(_DWORD *)(v4 + 32) = *(_DWORD *)a2;
        if (!*(_DWORD *)(a2 + 20))
        {
          v10 = CFDictionaryGetValue((CFDictionaryRef)a1, kSCPropNetIPv4RouteGatewayAddress);
          result = sub_100032F84(2, v10, (void *)(v4 + 28), 4uLL);
          if ((_DWORD)result)
          {
            v11 = *(_WORD *)(v4 + 16);
            *(_WORD *)(v4 + 16) = v11 | 2;
            if (*(_DWORD *)v4 == 32)
              *(_WORD *)(v4 + 16) = v11 | 6;
          }
        }
        goto LABEL_40;
      }
      result = (uint64_t)sub_10003FAF4((const __CFDictionary *)a1, kSCPropNetIPv4RouteInterfaceName, v45);
      if (result)
      {
        result = sub_10002D8E0((uint64_t)v45);
        if (!(_DWORD)result)
        {
          v21 = (os_log_t)qword_10007DC80;
          if (!qword_10007DC80)
          {
            v21 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
            qword_10007DC80 = (uint64_t)v21;
          }
          v22 = _SC_syslog_os_log_mapping(5);
          result = __SC_log_enabled(5, v21, v22);
          if (!(_DWORD)result)
            goto LABEL_21;
          v39 = _os_log_pack_size(32);
          v26 = &v45[-((__chkstk_darwin(v39, v40, v41) + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
          v42 = *__error();
          v38 = _os_log_pack_fill(v26, v39, v42, &_mh_execute_header, "%s: interface %s does not exist, %@");
LABEL_38:
          v43 = *(_QWORD *)(a2 + 40);
          *(_DWORD *)v38 = 136315650;
          *(_QWORD *)(v38 + 4) = v43;
          *(_WORD *)(v38 + 12) = 2080;
          *(_QWORD *)(v38 + 14) = v45;
          *(_WORD *)(v38 + 22) = 2112;
          *(_QWORD *)(v38 + 24) = a1;
          goto LABEL_20;
        }
        if ((_DWORD)result == *(_DWORD *)(a2 + 16))
        {
          v21 = (os_log_t)qword_10007DC80;
          if (!qword_10007DC80)
          {
            v21 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
            qword_10007DC80 = (uint64_t)v21;
          }
          v22 = _SC_syslog_os_log_mapping(5);
          result = __SC_log_enabled(5, v21, v22);
          if (!(_DWORD)result)
            goto LABEL_21;
          v34 = _os_log_pack_size(32);
          v26 = &v45[-((__chkstk_darwin(v34, v35, v36) + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
          v37 = *__error();
          v38 = _os_log_pack_fill(v26, v34, v37, &_mh_execute_header, "%s: interface %s unexpected, %@");
          goto LABEL_38;
        }
        *(_DWORD *)(v4 + 4) = result;
      }
LABEL_40:
      **(_QWORD **)(a2 + 24) += 36;
      return result;
    }
    v21 = (os_log_t)qword_10007DC80;
    if (!qword_10007DC80)
    {
      v21 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_10007DC80 = (uint64_t)v21;
    }
    v22 = _SC_syslog_os_log_mapping(5);
    result = __SC_log_enabled(5, v21, v22);
    if (!(_DWORD)result)
      goto LABEL_21;
    v30 = _os_log_pack_size(22);
    v26 = &v45[-((__chkstk_darwin(v30, v31, v32) + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
    v33 = *__error();
    v28 = _os_log_pack_fill(v26, v30, v33, &_mh_execute_header, "%s route has invalid subnet mask, %@");
  }
  else
  {
    v21 = (os_log_t)qword_10007DC80;
    if (!qword_10007DC80)
    {
      v21 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_10007DC80 = (uint64_t)v21;
    }
    v22 = _SC_syslog_os_log_mapping(5);
    result = __SC_log_enabled(5, v21, v22);
    if (!(_DWORD)result)
      goto LABEL_21;
    v23 = _os_log_pack_size(22);
    v26 = &v45[-((__chkstk_darwin(v23, v24, v25) + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
    v27 = *__error();
    v28 = _os_log_pack_fill(v26, v23, v27, &_mh_execute_header, "%s route is invalid, %@");
  }
  v29 = *(_QWORD *)(a2 + 40);
  *(_DWORD *)v28 = 136315394;
  *(_QWORD *)(v28 + 4) = v29;
  *(_WORD *)(v28 + 12) = 2112;
  *(_QWORD *)(v28 + 14) = a1;
LABEL_20:
  result = __SC_log_send(5, v21, v22, v26);
LABEL_21:
  --**(_DWORD **)(a2 + 8);
  return result;
}

uint64_t sub_1000404A8(uint64_t a1)
{
  return 68 * a1 + 12;
}

BOOL sub_1000404F8(const __CFDictionary *a1, const void *a2, void *a3)
{
  const __CFArray *Value;
  CFTypeID TypeID;
  const void *ValueAtIndex;
  _BOOL8 result;

  Value = (const __CFArray *)CFDictionaryGetValue(a1, a2);
  TypeID = CFArrayGetTypeID();
  result = 0;
  if (Value)
  {
    if (CFGetTypeID(Value) == TypeID && CFArrayGetCount(Value) >= 1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(Value, 0);
      if (sub_100032F84(30, ValueAtIndex, a3, 0x10uLL))
        return 1;
    }
  }
  return result;
}

uint64_t sub_1000405B4(const void *a1, uint64_t a2)
{
  _DWORD *v4;
  CFTypeID TypeID;
  const void *Value;
  const __CFNumber *v7;
  uint64_t result;
  os_log_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  os_log_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  const void *v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  char v41[16];

  v4 = **(_DWORD ***)(a2 + 24);
  TypeID = CFDictionaryGetTypeID();
  if (!a1 || CFGetTypeID(a1) != TypeID)
  {
    v18 = (os_log_t)qword_10007DC80;
    if (!qword_10007DC80)
    {
      v18 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_10007DC80 = (uint64_t)v18;
    }
    v19 = _SC_syslog_os_log_mapping(5);
    result = __SC_log_enabled(5, v18, v19);
    if ((_DWORD)result)
    {
      v20 = _os_log_pack_size(12);
      v23 = &v41[-((__chkstk_darwin(v20, v21, v22) + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
      v24 = __error();
      v25 = _os_log_pack_fill(v23, v20, *v24, &_mh_execute_header, "%s route is not a dictionary", v40);
      v26 = *(_QWORD *)(a2 + 40);
      *(_DWORD *)v25 = 136315138;
      *(_QWORD *)(v25 + 4) = v26;
      result = __SC_log_send(5, v18, v19, v23);
    }
    goto LABEL_15;
  }
  Value = CFDictionaryGetValue((CFDictionaryRef)a1, kSCPropNetIPv6RouteDestinationAddress);
  if (sub_100032F84(30, Value, v4 + 5, 0x10uLL))
  {
    v7 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, kSCPropNetIPv6RoutePrefixLength);
    result = sub_100040A94(v7, v4);
    if ((_DWORD)result)
    {
      if (*v4 <= 0x80u)
      {
        v4[3] = *(_DWORD *)(a2 + 32);
        v4[2] = *(_DWORD *)(a2 + 20);
        v27 = *(_DWORD *)(a2 + 16);
        if (v27)
        {
          v4[1] = v27;
          *(_OWORD *)(v4 + 13) = *(_OWORD *)*(_QWORD *)a2;
          if (!*(_DWORD *)(a2 + 20))
          {
            v28 = CFDictionaryGetValue((CFDictionaryRef)a1, kSCPropNetIPv6RouteGatewayAddress);
            result = sub_100032F84(30, v28, v4 + 9, 0x10uLL);
            if ((_DWORD)result)
            {
              v29 = *((_WORD *)v4 + 8);
              *((_WORD *)v4 + 8) = v29 | 2;
              if (*v4 == 128)
                *((_WORD *)v4 + 8) = v29 | 6;
            }
          }
          goto LABEL_35;
        }
        result = (uint64_t)sub_10003FAF4((const __CFDictionary *)a1, kSCPropNetIPv6RouteInterfaceName, v41);
        if (result)
        {
          result = sub_10002D8E0((uint64_t)v41);
          if (!(_DWORD)result)
          {
            v9 = (os_log_t)qword_10007DC80;
            if (!qword_10007DC80)
            {
              v9 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
              qword_10007DC80 = (uint64_t)v9;
            }
            v10 = _SC_syslog_os_log_mapping(5);
            result = __SC_log_enabled(5, v9, v10);
            if (!(_DWORD)result)
              goto LABEL_15;
            v35 = _os_log_pack_size(32);
            v14 = &v41[-((__chkstk_darwin(v35, v36, v37) + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
            v38 = *__error();
            v34 = _os_log_pack_fill(v14, v35, v38, &_mh_execute_header, "%s: interface %s does not exist, %@");
LABEL_33:
            v39 = *(_QWORD *)(a2 + 40);
            *(_DWORD *)v34 = 136315650;
            *(_QWORD *)(v34 + 4) = v39;
            *(_WORD *)(v34 + 12) = 2080;
            *(_QWORD *)(v34 + 14) = v41;
            *(_WORD *)(v34 + 22) = 2112;
            *(_QWORD *)(v34 + 24) = a1;
            goto LABEL_10;
          }
          if ((_DWORD)result == *(_DWORD *)(a2 + 16))
          {
            v9 = (os_log_t)qword_10007DC80;
            if (!qword_10007DC80)
            {
              v9 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
              qword_10007DC80 = (uint64_t)v9;
            }
            v10 = _SC_syslog_os_log_mapping(5);
            result = __SC_log_enabled(5, v9, v10);
            if (!(_DWORD)result)
              goto LABEL_15;
            v30 = _os_log_pack_size(32);
            v14 = &v41[-((__chkstk_darwin(v30, v31, v32) + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
            v33 = *__error();
            v34 = _os_log_pack_fill(v14, v30, v33, &_mh_execute_header, "%s: interface %s unexpected, %@");
            goto LABEL_33;
          }
          v4[1] = result;
        }
LABEL_35:
        **(_QWORD **)(a2 + 24) += 68;
        return result;
      }
    }
  }
  v9 = (os_log_t)qword_10007DC80;
  if (!qword_10007DC80)
  {
    v9 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    qword_10007DC80 = (uint64_t)v9;
  }
  v10 = _SC_syslog_os_log_mapping(5);
  result = __SC_log_enabled(5, v9, v10);
  if (!(_DWORD)result)
    goto LABEL_15;
  v11 = _os_log_pack_size(22);
  v14 = &v41[-((__chkstk_darwin(v11, v12, v13) + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v15 = __error();
  v16 = _os_log_pack_fill(v14, v11, *v15, &_mh_execute_header, "%s route is invalid, %@");
  v17 = *(_QWORD *)(a2 + 40);
  *(_DWORD *)v16 = 136315394;
  *(_QWORD *)(v16 + 4) = v17;
  *(_WORD *)(v16 + 12) = 2112;
  *(_QWORD *)(v16 + 14) = a1;
LABEL_10:
  result = __SC_log_send(5, v9, v10, v14);
LABEL_15:
  --**(_DWORD **)(a2 + 8);
  return result;
}

uint64_t sub_100040A94(const __CFNumber *a1, void *a2)
{
  CFTypeID TypeID;

  TypeID = CFNumberGetTypeID();
  if (a1 && CFGetTypeID(a1) == TypeID)
    return CFNumberGetValue(a1, kCFNumberIntType, a2);
  else
    return 0;
}

_QWORD *sub_100040B24(_QWORD *__b, int a2)
{
  _QWORD *v3;
  size_t v4;
  int v5;

  v3 = __b;
  v4 = 0;
  *__b = 0;
  __b[1] = 0;
  if (a2 >= 8)
  {
    v4 = (a2 >> 3) - 1 + 1;
    __b = memset(__b, 255, v4);
  }
  if (a2 <= 0)
    v5 = -(-a2 & 7);
  else
    v5 = a2 & 7;
  if (v5)
    *((_BYTE *)v3 + v4) = 0xFF00u >> v5;
  return __b;
}

uint64_t sub_100040BCC(void *a1, const __CFDictionary *a2)
{
  const __CFDictionary *v3;
  UInt8 *v4;
  uint64_t result;
  const void *v6;
  __int16 v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  int v12;
  os_log_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  os_log_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int *v33;
  uint64_t v34;
  const char *v35;
  int *v36;
  char *v37;
  int v39;
  os_log_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int *v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  os_log_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  int *v60;
  uint64_t v61;
  const char *v62;
  int *v63;
  char *v64;
  uint64_t v65;
  const void *v66;
  int v67;
  char v68[46];

  v67 = 0;
  v66 = 0;
  v3 = (const __CFDictionary *)sub_100033308(a1, kSCEntNetIPv6);
  v4 = (UInt8 *)sub_100041130(v3, &v67, &v66);
  result = (uint64_t)sub_100041130(a2, &v67, &v66);
  v6 = v66;
  v7 = v67;
  if (v66)
    v8 = v67 == 0;
  else
    v8 = 1;
  if (v8)
    return result;
  v9 = result;
  result = sub_10002DE6C();
  if ((result & 0x80000000) != 0)
    return result;
  v10 = result;
  if (v4)
  {
    if (v9)
    {
      if (*(_QWORD *)v4 == *(_QWORD *)v9 && *((_QWORD *)v4 + 1) == *(_QWORD *)(v9 + 8))
        goto LABEL_34;
    }
    v12 = sub_10002E094(result, v7, v4);
    v13 = (os_log_t)qword_10007DC80;
    if (v12 < 0)
    {
      if (!qword_10007DC80)
      {
        v13 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
        qword_10007DC80 = (uint64_t)v13;
      }
      if (*__error() == 22)
        v26 = 7;
      else
        v26 = 3;
      v27 = _SC_syslog_os_log_mapping(v26);
      if (*__error() == 22)
        v28 = 7;
      else
        v28 = 3;
      result = __SC_log_enabled(v28, v13, v27);
      if ((_DWORD)result)
      {
        v29 = _os_log_pack_size(32);
        v65 = (uint64_t)&v65;
        v32 = (char *)&v65 - ((__chkstk_darwin(v29, v30, v31) + 15) & 0xFFFFFFFFFFFFFFF0);
        v33 = __error();
        v34 = _os_log_pack_fill(v32, v29, *v33, &_mh_execute_header, "siocdrdel_in6(%@, %s) failed: %s");
        v35 = inet_ntop(30, v4, v68, 0x2Eu);
        v36 = __error();
        v37 = strerror(*v36);
        *(_DWORD *)v34 = 138412802;
        *(_QWORD *)(v34 + 4) = v6;
        *(_WORD *)(v34 + 12) = 2080;
        *(_QWORD *)(v34 + 14) = v35;
        *(_WORD *)(v34 + 22) = 2080;
        *(_QWORD *)(v34 + 24) = v37;
        if (*__error() == 22)
          v22 = 7;
        else
          v22 = 3;
        v23 = v13;
        v24 = v27;
        v25 = v32;
        goto LABEL_32;
      }
    }
    else
    {
      if (!qword_10007DC80)
      {
        v13 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
        qword_10007DC80 = (uint64_t)v13;
      }
      v14 = _SC_syslog_os_log_mapping(6);
      result = __SC_log_enabled(6, v13, v14);
      if ((_DWORD)result)
      {
        v15 = _os_log_pack_size(22);
        v18 = (char *)&v65 - ((__chkstk_darwin(v15, v16, v17) + 15) & 0xFFFFFFFFFFFFFFF0);
        v19 = __error();
        v20 = _os_log_pack_fill(v18, v15, *v19, &_mh_execute_header, "%@ removed default route %s");
        v21 = inet_ntop(30, v4, v68, 0x2Eu);
        *(_DWORD *)v20 = 138412546;
        *(_QWORD *)(v20 + 4) = v6;
        *(_WORD *)(v20 + 12) = 2080;
        *(_QWORD *)(v20 + 14) = v21;
        v22 = 6;
        v23 = v13;
        v24 = v14;
        v25 = v18;
LABEL_32:
        result = __SC_log_send(v22, v23, v24, v25);
      }
    }
    if (!v9)
      return result;
LABEL_34:
    if (*(_QWORD *)v4 == *(_QWORD *)v9 && *((_QWORD *)v4 + 1) == *(_QWORD *)(v9 + 8))
      return result;
    goto LABEL_38;
  }
  if (!v9)
    return result;
LABEL_38:
  v39 = sub_10002E018(v10, v7, (_OWORD *)v9, 0);
  v40 = (os_log_t)qword_10007DC80;
  if (v39 < 0)
  {
    if (!qword_10007DC80)
    {
      v40 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_10007DC80 = (uint64_t)v40;
    }
    if (*__error() == 22)
      v53 = 7;
    else
      v53 = 3;
    v54 = _SC_syslog_os_log_mapping(v53);
    if (*__error() == 22)
      v55 = 7;
    else
      v55 = 3;
    result = __SC_log_enabled(v55, v40, v54);
    if ((_DWORD)result)
    {
      v56 = _os_log_pack_size(32);
      v59 = (char *)&v65 - ((__chkstk_darwin(v56, v57, v58) + 15) & 0xFFFFFFFFFFFFFFF0);
      v60 = __error();
      v61 = _os_log_pack_fill(v59, v56, *v60, &_mh_execute_header, "siocdradd_in6(%@, %s) failed: %s");
      v62 = inet_ntop(30, (const void *)v9, v68, 0x2Eu);
      v63 = __error();
      v64 = strerror(*v63);
      *(_DWORD *)v61 = 138412802;
      *(_QWORD *)(v61 + 4) = v6;
      *(_WORD *)(v61 + 12) = 2080;
      *(_QWORD *)(v61 + 14) = v62;
      *(_WORD *)(v61 + 22) = 2080;
      *(_QWORD *)(v61 + 24) = v64;
      if (*__error() == 22)
        v49 = 7;
      else
        v49 = 3;
      v50 = v40;
      v51 = v54;
      v52 = v59;
      return __SC_log_send(v49, v50, v51, v52);
    }
  }
  else
  {
    if (!qword_10007DC80)
    {
      v40 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_10007DC80 = (uint64_t)v40;
    }
    v41 = _SC_syslog_os_log_mapping(6);
    result = __SC_log_enabled(6, v40, v41);
    if ((_DWORD)result)
    {
      v42 = _os_log_pack_size(22);
      v45 = (char *)&v65 - ((__chkstk_darwin(v42, v43, v44) + 15) & 0xFFFFFFFFFFFFFFF0);
      v46 = __error();
      v47 = _os_log_pack_fill(v45, v42, *v46, &_mh_execute_header, "%@ added default route %s");
      v48 = inet_ntop(30, (const void *)v9, v68, 0x2Eu);
      *(_DWORD *)v47 = 138412546;
      *(_QWORD *)(v47 + 4) = v6;
      *(_WORD *)(v47 + 12) = 2080;
      *(_QWORD *)(v47 + 14) = v48;
      v49 = 6;
      v50 = v40;
      v51 = v41;
      v52 = v45;
      return __SC_log_send(v49, v50, v51, v52);
    }
  }
  return result;
}

const UInt8 *sub_100041130(const __CFDictionary *a1, _DWORD *a2, const void **a3)
{
  const UInt8 *v6;
  const UInt8 *v7;

  v6 = sub_10003564C(a1);
  if (!v6 || (*((_WORD *)v6 + 4) & 3) != 2)
    return 0;
  v7 = v6 + 48;
  if (!*a2)
    *a2 = *((_DWORD *)v6 + 4);
  if (!*a3)
    *a3 = sub_1000331E4(a1);
  return v7;
}

void sub_1000411DC(__CFDictionary *a1, unint64_t a2, const __CFArray *a3, int a4, int a5, int a6, uint64_t a7)
{
  __CFArray *Mutable;
  _BOOL4 v15;
  BOOL v16;
  int v17;
  const __CFArray *v18;
  CFIndex v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  int v24;
  const void *ValueAtIndex;
  int v26;
  uint64_t v27;
  CFIndex v28;
  _BOOL4 v29;
  _BOOL4 v30;
  char v31;
  uint64_t v32;
  int v33;
  int v34;
  __CFDictionary *v35;
  CFIndex Count;
  __CFArray *theArray;
  int v38;
  __int128 v39;
  _OWORD v40[2];
  __int128 v41;

  if (!(a2 | (unint64_t)a3))
    return;
  Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  if (a3)
  {
    sub_10004186C(a3, a6, Mutable, a7);
    v15 = CFArrayGetCount(Mutable) < 1;
  }
  else
  {
    v15 = 1;
  }
  if (CFArrayGetCount(Mutable))
    v16 = dword_10007DC98 == 0;
  else
    v16 = 0;
  v17 = !v16;
  if (!a2 || !v17)
    goto LABEL_43;
  v41 = xmmword_100069650;
  v40[0] = xmmword_100069670;
  *(_OWORD *)((char *)v40 + 12) = *(__int128 *)((char *)&xmmword_100069670 + 12);
  if ((~a6 & 3) != 0)
  {
    v18 = (const __CFArray *)CFRetain((CFTypeRef)a2);
    goto LABEL_42;
  }
  v18 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  Count = CFArrayGetCount((CFArrayRef)a2);
  if (Count < 1)
    goto LABEL_42;
  theArray = v18;
  v30 = v15;
  v31 = a6;
  v32 = a7;
  v33 = a5;
  v34 = a4;
  v35 = a1;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 1;
  while (1)
  {
    v24 = v23;
    v38 = 0;
    v39 = 0uLL;
    ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, v19);
    v26 = sub_100032F84(2, ValueAtIndex, &v38, 4uLL);
    if (v26)
      break;
    if (!sub_100032F84(30, ValueAtIndex, &v39, 0x10uLL))
      goto LABEL_41;
    if (v20)
    {
      v27 = v20 + 1;
      v23 = 2;
      ++v20;
      if (!v19)
        goto LABEL_30;
      goto LABEL_27;
    }
    *(_OWORD *)((char *)v40 + 8) = v39;
    v23 = 2;
    v27 = 1;
    v20 = 1;
    if (v19)
      goto LABEL_27;
LABEL_30:
    if (v26 && v22)
    {
      v28 = v21 - 1;
    }
    else
    {
      if (v26 || v22)
      {
        CFArrayAppendValue(theArray, ValueAtIndex);
        goto LABEL_38;
      }
      v28 = v20 - 1;
    }
    CFArrayInsertValueAtIndex(theArray, v28, ValueAtIndex);
LABEL_38:
    if (Count == ++v19)
    {
      a1 = v35;
      a5 = v33;
      a4 = v34;
      a7 = v32;
      v15 = v30;
      LOBYTE(a6) = v31;
      v18 = theArray;
      goto LABEL_42;
    }
  }
  if (v21)
  {
    v27 = v21 + 1;
    v23 = 1;
    ++v21;
    if (!v19)
      goto LABEL_30;
  }
  else
  {
    DWORD1(v41) = v38;
    v27 = 1;
    v21 = 1;
    v23 = 1;
    if (!v19)
      goto LABEL_30;
  }
LABEL_27:
  if (v23 == v24)
    goto LABEL_30;
  if (v27 == 1)
  {
    v22 = (int)sa_dst_compare_no_dependencies(&v41, v40) >= 0;
    goto LABEL_30;
  }
LABEL_41:
  CFRelease(theArray);
  v18 = (const __CFArray *)CFRetain((CFTypeRef)a2);
  a1 = v35;
  a5 = v33;
  a4 = v34;
  a7 = v32;
  v15 = v30;
  LOBYTE(a6) = v31;
LABEL_42:
  sub_10004186C(v18, a6, Mutable, a7);
  CFRelease(v18);
LABEL_43:
  if (CFArrayGetCount(Mutable))
  {
    CFDictionarySetValue(a1, kSCPropNetDNSServerAddresses, Mutable);
    v29 = a5 != 0;
    if (a4)
      v29 = v15;
    if (v29)
      CFDictionarySetValue(a1, CFSTR("__SCOPED_QUERY__"), kCFBooleanTrue);
  }
  if (Mutable)
    CFRelease(Mutable);
}

const void *sub_100041564(const void *a1, const void *a2)
{
  CFTypeID TypeID;
  const void *Value;
  CFTypeID v6;

  TypeID = CFDictionaryGetTypeID();
  if (!a1)
    return 0;
  if (CFGetTypeID(a1) != TypeID)
    return 0;
  Value = CFDictionaryGetValue((CFDictionaryRef)a1, a2);
  v6 = CFArrayGetTypeID();
  if (!Value)
    return 0;
  if (CFGetTypeID(Value) == v6)
    return Value;
  return 0;
}

void sub_100041610(__CFDictionary *a1, void *key, const __CFDictionary *a3, CFDictionaryRef theDict, char a5, int a6)
{
  const __CFArray *Value;
  CFTypeID TypeID;
  const __CFArray *v13;
  const __CFArray *v14;
  CFTypeID v15;
  const __CFArray *v16;
  __CFArray *Mutable;
  CFIndex Count;
  CFIndex v19;
  CFIndex i;
  __CFString *ValueAtIndex;
  CFMutableStringRef v22;
  CFMutableStringRef v23;
  CFIndex v24;
  CFIndex v25;
  CFIndex v26;
  CFIndex j;
  __CFString *v28;
  CFMutableStringRef v29;
  CFMutableStringRef v30;
  CFRange v31;

  if (theDict && (Value = (const __CFArray *)CFDictionaryGetValue(theDict, key), TypeID = CFArrayGetTypeID(), Value))
  {
    if (CFGetTypeID(Value) == TypeID)
      v13 = Value;
    else
      v13 = 0;
    if (!a3)
      goto LABEL_13;
  }
  else
  {
    v13 = 0;
    if (!a3)
    {
LABEL_13:
      v16 = 0;
      goto LABEL_14;
    }
  }
  v14 = (const __CFArray *)CFDictionaryGetValue(a3, key);
  v15 = CFArrayGetTypeID();
  if (!v14)
    goto LABEL_13;
  if (CFGetTypeID(v14) == v15)
    v16 = v14;
  else
    v16 = 0;
LABEL_14:
  if ((unint64_t)v13 | (unint64_t)v16)
  {
    Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    if (v13)
    {
      Count = CFArrayGetCount(v13);
      if (Count >= 1)
      {
        v19 = Count;
        for (i = 0; i != v19; ++i)
        {
          ValueAtIndex = (__CFString *)CFArrayGetValueAtIndex(v13, i);
          v22 = sub_100041D14(ValueAtIndex, a5);
          if (v22)
          {
            v23 = v22;
            CFArrayAppendValue(Mutable, v22);
            CFRelease(v23);
          }
        }
      }
    }
    if (v16 && (!v13 || dword_10007DC98))
    {
      v24 = CFArrayGetCount(Mutable);
      v25 = CFArrayGetCount(v16);
      if (v25 >= 1)
      {
        v26 = v25;
        for (j = 0; j != v26; ++j)
        {
          v28 = (__CFString *)CFArrayGetValueAtIndex(v16, j);
          v29 = sub_100041D14(v28, a5);
          if (v29)
          {
            v30 = v29;
            if (a6 || (v31.location = 0, v31.length = v24, !CFArrayContainsValue(Mutable, v31, v29)))
              CFArrayAppendValue(Mutable, v30);
            CFRelease(v30);
          }
        }
      }
    }
    if (CFArrayGetCount(Mutable) >= 1)
      CFDictionarySetValue(a1, key, Mutable);
    CFRelease(Mutable);
  }
}

void sub_10004186C(const __CFArray *a1, char a2, __CFArray *a3, uint64_t a4)
{
  CFIndex Count;
  __int128 v8;
  CFIndex v9;
  CFIndex v10;
  __objc2_prop_list **p_base_props;
  __int128 v12;
  const __CFString *ValueAtIndex;
  CFStringRef v14;
  os_log_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int *v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  const char *v32;
  os_log_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  int *v39;
  uint64_t v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  CFIndex v44;
  uint64_t v45;
  int32x4_t v46;
  int v47;
  char v48[46];
  int32x4_t v49;

  v45 = a4;
  Count = CFArrayGetCount(a1);
  if (Count >= 1)
  {
    v9 = Count;
    v10 = 0;
    p_base_props = &QoSMarkingController__classData.base_props;
    *(_QWORD *)&v8 = 138412290;
    v43 = v8;
    *((_QWORD *)&v12 + 1) = 0x100000000000000;
    v46 = (int32x4_t)xmmword_100069630;
    *(_QWORD *)&v12 = 136315138;
    v42 = v12;
    v44 = Count;
    do
    {
      v49 = 0uLL;
      v47 = 0;
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a1, v10);
      if (!ValueAtIndex)
        sub_100065B9C();
      v14 = ValueAtIndex;
      if (sub_100032F84(2, ValueAtIndex, &v47, 4uLL))
      {
        if ((a2 & 1) != 0 || v47 == 16777343)
          goto LABEL_32;
        v15 = (os_log_t)p_base_props[400];
        if (!v15)
        {
          v15 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
          p_base_props[400] = (__objc2_prop_list *)v15;
        }
        v16 = _SC_syslog_os_log_mapping(6);
        if (!__SC_log_enabled(6, v15, v16))
          goto LABEL_34;
        v17 = _os_log_pack_size(26);
        v20 = (char *)&v42 - ((__chkstk_darwin(v17, v18, v19) + 15) & 0xFFFFFFFFFFFFFFF0);
        v21 = __error();
        v22 = _os_log_pack_fill(v20, v17, *v21, &_mh_execute_header, "no IPv4 connectivity, ignoring DNS server address %d.%d.%d.%d", (_DWORD)v42, DWORD2(v42), (_DWORD)v43, DWORD2(v43));
        v23 = v47;
        v24 = BYTE1(v47);
        v25 = BYTE2(v47);
        v26 = HIBYTE(v47);
        *(_DWORD *)v22 = 67109888;
        *(_DWORD *)(v22 + 4) = v23;
        *(_WORD *)(v22 + 8) = 1024;
        *(_DWORD *)(v22 + 10) = v24;
        *(_WORD *)(v22 + 14) = 1024;
        *(_DWORD *)(v22 + 16) = v25;
        *(_WORD *)(v22 + 20) = 1024;
        *(_DWORD *)(v22 + 22) = v26;
      }
      else
      {
        if (!sub_100032F84(30, v14, &v49, 0x10uLL))
        {
          v33 = (os_log_t)p_base_props[400];
          if (!v33)
          {
            v33 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
            p_base_props[400] = (__objc2_prop_list *)v33;
          }
          v34 = _SC_syslog_os_log_mapping(5);
          if (__SC_log_enabled(5, v33, v34))
          {
            v35 = _os_log_pack_size(12);
            v38 = (char *)&v42 - ((__chkstk_darwin(v35, v36, v37) + 15) & 0xFFFFFFFFFFFFFFF0);
            v39 = __error();
            v40 = _os_log_pack_fill(v38, v35, *v39, &_mh_execute_header, "ignoring bad DNS server address '%@'");
            *(_DWORD *)v40 = v43;
            *(_QWORD *)(v40 + 4) = v14;
            v41 = v38;
            p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
            __SC_log_send(5, v33, v34, v41);
            v9 = v44;
          }
          goto LABEL_34;
        }
        if ((a2 & 2) != 0)
        {
          if (v49.u8[0] == 255)
          {
            if ((v49.i8[1] & 0xF0) != 0x30 && v45 && (v49.i8[1] & 0xF) == 2)
              goto LABEL_31;
LABEL_32:
            CFRetain(v14);
          }
          else
          {
            if (v49.u8[0] != 254 || !v45 || (v49.i8[1] & 0xC0) != 0x80)
              goto LABEL_32;
LABEL_31:
            if (CFStringFind(v14, CFSTR("%"), 0).location != -1)
              goto LABEL_32;
            v14 = CFStringCreateWithFormat(0, 0, CFSTR("%@%%%@"), v14, v45);
          }
          CFArrayAppendValue(a3, v14);
          CFRelease(v14);
          goto LABEL_34;
        }
        if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v49, v46)))) & 1) == 0)
          goto LABEL_32;
        v15 = (os_log_t)p_base_props[400];
        if (!v15)
        {
          v15 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
          p_base_props[400] = (__objc2_prop_list *)v15;
        }
        v16 = _SC_syslog_os_log_mapping(6);
        if (!__SC_log_enabled(6, v15, v16))
          goto LABEL_34;
        v27 = _os_log_pack_size(12);
        v20 = (char *)&v42 - ((__chkstk_darwin(v27, v28, v29) + 15) & 0xFFFFFFFFFFFFFFF0);
        v30 = __error();
        v31 = _os_log_pack_fill(v20, v27, *v30, &_mh_execute_header, "no IPv6 connectivity, ignoring DNS server address %s", (const char *)v42);
        v32 = inet_ntop(30, &v49, v48, 0x2Eu);
        *(_DWORD *)v31 = v42;
        *(_QWORD *)(v31 + 4) = v32;
      }
      __SC_log_send(6, v15, v16, v20);
      p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
LABEL_34:
      ++v10;
    }
    while (v9 != v10);
  }
}

CFMutableStringRef sub_100041D14(__CFString *a1, char a2)
{
  CFMutableStringRef MutableCopy;
  CFTypeID TypeID;

  MutableCopy = a1;
  if (a1)
  {
    TypeID = CFStringGetTypeID();
    if (CFGetTypeID(MutableCopy) == TypeID)
    {
      MutableCopy = CFStringCreateMutableCopy(0, 0, MutableCopy);
      CFStringTrimWhitespace(MutableCopy);
      if ((a2 & 1) == 0 && !CFStringGetLength(MutableCopy))
      {
        CFRelease(MutableCopy);
        return 0;
      }
    }
    else
    {
      CFRetain(MutableCopy);
    }
  }
  return MutableCopy;
}

void sub_100041DD0(void *key, void *value, CFMutableDictionaryRef theDict)
{
  CFDictionarySetValue(theDict, key, value);
}

CFStringRef sub_100041E24()
{
  const __CFURL *v0;
  const __CFURL *v1;
  CFStringRef v2;
  CFStringRef v3;

  v0 = CFURLCreateWithString(0, CFSTR("http://wpad/wpad.dat"), 0);
  if (!v0)
    return 0;
  v1 = v0;
  v2 = CFURLGetString(v0);
  v3 = v2;
  if (v2)
    CFRetain(v2);
  CFRelease(v1);
  return v3;
}

uint64_t sub_100041EB4(uint64_t a1, CFDictionaryRef theDict, uint64_t a3)
{
  const void **v6;
  uint64_t result;
  const __CFDictionary *v8;
  const UInt8 *v9;
  const __CFDictionary *v11;
  const __CFString *v12;
  const __CFDictionary *Value;
  uint64_t v14;
  int v15;
  os_log_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int *v22;
  uint64_t v23;
  unsigned int v24;
  _BOOL4 v25;
  int v26;
  void *v27;
  __CFDictionary *v28;
  const void *v29;
  CFNumberRef v30;
  CFNumberRef v31;
  const void *v32;
  CFTypeID TypeID;
  const void *v34;
  int v35;
  uint64_t v36;
  int v37;
  int valuePtr;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _OWORD v42[3];
  __int128 v43;

  v6 = (const void **)&kSCEntNetIPv4;
  if (*(_DWORD *)a3 != 2)
    v6 = (const void **)&kSCEntNetIPv6;
  result = (uint64_t)CFDictionaryGetValue(theDict, *v6);
  if (result)
  {
    v8 = (const __CFDictionary *)result;
    v9 = sub_10003564C((const __CFDictionary *)result);
    result = (uint64_t)CFDictionaryGetValue(v8, CFSTR("Service"));
    if (v9 && result != 0)
    {
      v11 = (const __CFDictionary *)result;
      result = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)result, kSCPropInterfaceName);
      if (result)
      {
        v12 = (const __CFString *)result;
        result = CFEqual((CFTypeRef)result, CFSTR("lo0"));
        if (!(_DWORD)result)
        {
          v43 = 0u;
          memset(v42, 0, sizeof(v42));
          v40 = 0u;
          v41 = 0u;
          v39 = 0u;
          if (CFStringGetCString(v12, (char *)&v40, 16, 0x8000100u))
          {
            *(_QWORD *)&v39 = a1;
            if ((*((_WORD *)v9 + 4) & 2) == 0)
              DWORD1(v42[0]) = 1;
            Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, kSCEntNetService);
            v14 = sub_1000422B8(Value, *(const __CFArray **)(a3 + 8), *(_QWORD *)(a3 + 16), (const void *)v39);
            v15 = *((_DWORD *)v9 + 6);
            if (*(_DWORD *)a3 == 2)
              HIDWORD(v42[0]) = *((_DWORD *)v9 + 11);
            else
              *(_OWORD *)((char *)v42 + 12) = *((_OWORD *)v9 + 4);
            v24 = v15 & 0xFF000000;
            if (dword_10007DD50 && !((unsigned __int16)v40 ^ 0x7070 | BYTE2(v40) ^ 0x70))
              v24 = 0;
            DWORD2(v41) = v24 | v14 & 0xFFFFFF;
            if (!CFStringHasPrefix(v12, CFSTR("stf")) && !CFStringHasPrefix(v12, CFSTR("gif")))
            {
              if (sub_1000424AC((void *)v39))
              {
                v26 = 0;
                v25 = 1;
                goto LABEL_26;
              }
              v37 = 0;
              if (*(_DWORD *)a3 == 2)
                v35 = 30;
              else
                v35 = 2;
              if (!sub_100042518(theDict, v35, &v37) || v37 == v15)
              {
                v26 = 0;
                v25 = byte_10007DD60 == 0;
                goto LABEL_26;
              }
            }
            v25 = 0;
            v26 = 1;
LABEL_26:
            *((_QWORD *)&v39 + 1) = v12;
            v27 = (void *)sub_10002D8E0((uint64_t)&v40);
            HIDWORD(v41) = v26;
            LODWORD(v42[0]) = v25;
            LODWORD(v41) = (_DWORD)v27;
            DWORD1(v41) = sub_10002D430((uint64_t)&v40, v27);
            v28 = *(__CFDictionary **)(a3 + 32);
            v29 = (const void *)v39;
            valuePtr = DWORD2(v41);
            v30 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
            if (v30)
            {
              v31 = v30;
              CFDictionarySetValue(v28, v29, v30);
              CFRelease(v31);
            }
            v32 = CFDictionaryGetValue(v11, kSCPropInterfaceName);
            TypeID = CFStringGetTypeID();
            if (v32 && CFGetTypeID(v32) == TypeID && sub_10003FB98(v11, v32))
              v34 = CFDictionaryGetValue(v11, CFSTR("NetworkSignature"));
            else
              v34 = 0;
            *((_QWORD *)&v43 + 1) = v34;
            return (uint64_t)sub_1000425B0(*(int **)(a3 + 24), (uint64_t)&v39);
          }
          v16 = (os_log_t)qword_10007DC80;
          if (!qword_10007DC80)
          {
            v16 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
            qword_10007DC80 = (uint64_t)v16;
          }
          v17 = _SC_syslog_os_log_mapping(5);
          result = __SC_log_enabled(5, v16, v17);
          if ((_DWORD)result)
          {
            v18 = _os_log_pack_size(22);
            v21 = (char *)&v36 - ((__chkstk_darwin(v18, v19, v20) + 15) & 0xFFFFFFFFFFFFFFF0);
            v22 = __error();
            v23 = _os_log_pack_fill(v21, v18, *v22, &_mh_execute_header, "%s: failed to convert %@ to string\n");
            *(_DWORD *)v23 = 136315394;
            *(_QWORD *)(v23 + 4) = "elect_ip";
            *(_WORD *)(v23 + 12) = 2112;
            *(_QWORD *)(v23 + 14) = v12;
            return __SC_log_send(5, v16, v17, v21);
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1000422B8(const __CFDictionary *a1, const __CFArray *a2, uint64_t a3, const void *a4)
{
  const void *v7;
  const void *v8;
  os_log_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  int v17;
  CFIndex v18;
  const void *ValueAtIndex;
  CFTypeID TypeID;
  uint64_t v22;

  HIDWORD(v22) = 0xFFFFFF;
  v7 = sub_10003D044(a1, (uint64_t)a4, (uint64_t)&stru_100077E20, (_DWORD *)&v22 + 1);
  if (v7)
  {
    v8 = v7;
    HIDWORD(v22) += a3;
    v9 = (os_log_t)qword_10007DC80;
    if (!qword_10007DC80)
    {
      v9 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_10007DC80 = (uint64_t)v9;
    }
    v10 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v9, v10))
    {
      v11 = _os_log_pack_size(28);
      v14 = (char *)&v22 - ((__chkstk_darwin(v11, v12, v13) + 15) & 0xFFFFFFFFFFFFFFF0);
      v15 = __error();
      v16 = _os_log_pack_fill(v14, v11, *v15, &_mh_execute_header, "%@ specifies ServiceIndex %@, effective index is %u");
      v17 = HIDWORD(v22);
      *(_DWORD *)v16 = 138412802;
      *(_QWORD *)(v16 + 4) = a4;
      *(_WORD *)(v16 + 12) = 2112;
      *(_QWORD *)(v16 + 14) = v8;
      *(_WORD *)(v16 + 22) = 1024;
      *(_DWORD *)(v16 + 24) = v17;
      __SC_log_send(6, v9, v10, v14);
    }
  }
  else if (a3 >= 1 && a2 && a4)
  {
    v18 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a2, v18);
      TypeID = CFStringGetTypeID();
      if (ValueAtIndex)
      {
        if (CFGetTypeID(ValueAtIndex) == TypeID && CFEqual(a4, ValueAtIndex))
          break;
      }
      if (a3 == ++v18)
        return HIDWORD(v22);
    }
    HIDWORD(v22) = v18 + 1;
  }
  return HIDWORD(v22);
}

const __CFDictionary *sub_1000424AC(void *a1)
{
  const __CFDictionary *result;

  result = (const __CFDictionary *)sub_100033308(a1, kSCEntNetService);
  if (result)
    return (const __CFDictionary *)(CFDictionaryContainsKey(result, CFSTR("IPIsCoupled")) != 0);
  return result;
}

uint64_t sub_100042518(const __CFDictionary *a1, int a2, _DWORD *a3)
{
  const void **v4;
  uint64_t result;

  v4 = (const void **)&kSCEntNetIPv6;
  if (a2 == 2)
    v4 = (const void **)&kSCEntNetIPv4;
  result = (uint64_t)CFDictionaryGetValue(a1, *v4);
  if (result)
  {
    result = (uint64_t)sub_10003564C((const __CFDictionary *)result);
    if (result)
    {
      if ((*(_WORD *)(result + 8) & 2) != 0)
      {
        *a3 = *(_DWORD *)(result + 24);
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

CFTypeRef sub_1000425B0(int *a1, uint64_t a2)
{
  uint64_t v2;
  os_log_t v3;
  uint64_t v4;
  CFTypeRef result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  int *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v2 = a1[1];
  if ((_DWORD)v2 == a1[2])
  {
    v3 = (os_log_t)qword_10007DC80;
    if (!qword_10007DC80)
    {
      v3 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_10007DC80 = (uint64_t)v3;
    }
    v4 = _SC_syslog_os_log_mapping(5);
    result = (CFTypeRef)__SC_log_enabled(5, v3, v4);
    if ((_DWORD)result)
    {
      v6 = _os_log_pack_size(2);
      v9 = (char *)&v19 - ((__chkstk_darwin(v6, v7, v8) + 15) & 0xFFFFFFFFFFFFFFF0);
      v10 = __error();
      *(_WORD *)_os_log_pack_fill(v9, v6, *v10, &_mh_execute_header, "can't fit another candidate") = 0;
      return (CFTypeRef)__SC_log_send(5, v3, v4, v9);
    }
  }
  else
  {
    if ((int)v2 < 1)
    {
LABEL_10:
      v14 = (uint64_t)&a1[28 * (int)v2 + 4];
    }
    else
    {
      v12 = 0;
      v13 = a1 + 14;
      while (*(_DWORD *)(a2 + 40) >= *v13)
      {
        ++v12;
        v13 += 28;
        if (v2 == v12)
          goto LABEL_10;
      }
      if (v12 < v2)
      {
        v15 = &a1[28 * (int)v2 + 4];
        do
        {
          --v2;
          v16 = *((_OWORD *)v15 - 2);
          *((_OWORD *)v15 + 4) = *((_OWORD *)v15 - 3);
          *((_OWORD *)v15 + 5) = v16;
          *((_OWORD *)v15 + 6) = *((_OWORD *)v15 - 1);
          v17 = *((_OWORD *)v15 - 6);
          *(_OWORD *)v15 = *((_OWORD *)v15 - 7);
          *((_OWORD *)v15 + 1) = v17;
          v18 = *((_OWORD *)v15 - 4);
          *((_OWORD *)v15 + 2) = *((_OWORD *)v15 - 5);
          *((_OWORD *)v15 + 3) = v18;
          v15 -= 28;
        }
        while (v2 > v12);
      }
      v14 = (uint64_t)(v13 - 10);
    }
    result = sub_100042778(v14, (__int128 *)a2);
    ++a1[1];
  }
  return result;
}

CFTypeRef sub_100042778(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  const void *v8;
  const void *v9;
  CFTypeRef result;

  v3 = a2[2];
  v4 = *a2;
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v4;
  v5 = a2[3];
  v6 = a2[4];
  v7 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v7;
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 64) = v6;
  v8 = *(const void **)a1;
  if (v8)
    CFRetain(v8);
  v9 = *(const void **)(a1 + 8);
  if (v9)
    CFRetain(v9);
  result = *(CFTypeRef *)(a1 + 104);
  if (result)
    return CFRetain(result);
  return result;
}

void sub_100042830(uint64_t a1, const __CFDictionary *a2, int a3)
{
  __CFString *v5;
  const void **v6;
  const __CFDictionary *v7;
  const __CFDictionary *Value;
  uint64_t v9;
  const void *v10;
  const void *v11;
  CFTypeID TypeID;
  int v13;
  CFStringRef v14;
  int v15;
  CFTypeID v16;
  CFNumberRef v17;
  CFTypeID v18;
  uint64_t v19;
  CFStringRef NetworkServiceEntity;
  const __CFDictionary *v21;
  CFTypeID v22;
  CFNumberRef v23;
  CFTypeID v24;
  int v25;
  int v26;
  int valuePtr;
  char buffer[8];

  if (!a1)
    sub_100065BC4();
  if (!a2)
    sub_100065BEC();
  v5 = *(__CFString **)a1;
  v6 = (const void **)&kSCEntNetIPv4;
  valuePtr = 0;
  if (a3 != 2)
    v6 = (const void **)&kSCEntNetIPv6;
  v7 = (const __CFDictionary *)sub_100033308(v5, *v6);
  if (!v7)
    goto LABEL_11;
  Value = (const __CFDictionary *)CFDictionaryGetValue(v7, CFSTR("Service"));
  if (!Value)
  {
LABEL_12:
    v13 = 2;
    goto LABEL_13;
  }
  v9 = 0;
  *(_QWORD *)buffer = 0;
  while (1)
  {
    v10 = **(const void ***)((char *)&off_100076998 + v9);
    v11 = sub_100033308(v5, v10);
    TypeID = CFDictionaryGetTypeID();
    if (v11)
    {
      if (CFGetTypeID(v11) == TypeID)
        break;
    }
    v9 += 16;
    if (v9 == 48)
      goto LABEL_11;
  }
  if (!v10)
  {
LABEL_11:
    Value = 0;
    goto LABEL_12;
  }
  Value = (const __CFDictionary *)CFDictionaryGetValue(Value, CFSTR("ServerAddress"));
  v16 = CFStringGetTypeID();
  if (Value)
  {
    if (CFGetTypeID(Value) == v16)
      CFRetain(Value);
    else
      Value = 0;
  }
  if (!CFDictionaryGetValueIfPresent((CFDictionaryRef)v11, kSCPropNetVPNStatus, (const void **)buffer)
    || (v17 = *(CFNumberRef *)buffer, v18 = CFNumberGetTypeID(), !v17)
    || CFGetTypeID(v17) != v18
    || !CFNumberGetValue(*(CFNumberRef *)buffer, kCFNumberIntType, &valuePtr))
  {
    v13 = 3;
    goto LABEL_13;
  }
  v19 = valuePtr;
  if (CFEqual(v10, kSCEntNetPPP))
  {
    if ((int)v19 <= 7 || (v13 = 3, (_DWORD)v19 != 8) && (_DWORD)v19 != 12)
LABEL_42:
      v13 = 7;
  }
  else if (CFEqual(v10, kSCEntNetIPSec))
  {
    if ((_DWORD)v19 == 6)
      v13 = 3;
    else
      v13 = 7;
  }
  else
  {
    if (!CFEqual(v10, kSCEntNetVPN))
    {
      v13 = 3;
      goto LABEL_43;
    }
    if (v19 > 7)
      goto LABEL_42;
    v13 = dword_100069690[v19];
  }
LABEL_43:
  if (CFEqual(v10, kSCEntNetPPP))
  {
    v26 = 0;
    NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainSetup, v5, kSCEntNetPPP);
    v21 = (const __CFDictionary *)CFDictionaryGetValue(a2, NetworkServiceEntity);
    CFRelease(NetworkServiceEntity);
    v22 = CFDictionaryGetTypeID();
    if (v21)
    {
      if (CFGetTypeID(v21) == v22)
      {
        if (CFDictionaryGetValueIfPresent(v21, kSCPropNetPPPDialOnDemand, (const void **)buffer))
        {
          v23 = *(CFNumberRef *)buffer;
          v24 = CFNumberGetTypeID();
          if (v23)
          {
            if (CFGetTypeID(v23) == v24 && CFNumberGetValue(*(CFNumberRef *)buffer, kCFNumberIntType, &v26) && v26)
            {
              if (valuePtr)
                v25 = 8;
              else
                v25 = 24;
              v13 |= v25;
            }
          }
        }
      }
    }
  }
LABEL_13:
  v14 = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainSetup, *(CFStringRef *)a1, kSCEntNetCommCenter);
  if (CFDictionaryContainsKey(a2, v14))
    v15 = 262145;
  else
    v15 = 0;
  CFRelease(v14);
  *(_DWORD *)(a1 + 56) = v15 | v13;
  if (Value)
  {
    CFStringGetCString((CFStringRef)Value, buffer, 128, 0x600u);
    _SC_string_to_sockaddr(buffer, 0, a1 + 76, 28);
    CFRelease(Value);
  }
  else
  {
    *(_QWORD *)(a1 + 84) = 0;
    *(_QWORD *)(a1 + 76) = 0;
    *(_DWORD *)(a1 + 100) = 0;
    *(_QWORD *)(a1 + 92) = 0;
  }
}

double sub_100042C10(_DWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  char v8;
  char v9;
  const __CFDictionary *v10;
  const __CFDictionary *v11;
  CFTypeID TypeID;
  const void *v13;
  CFTypeID v14;
  uint64_t v15;
  double result;
  const __CFString *v17;
  uint64_t v18;
  const __CFData *ExternalRepresentation;
  const UInt8 *BytePtr;
  CC_LONG Length;
  __int128 v22;
  int v23;
  char buffer[16];
  CC_SHA256_CTX value;

  if (a1)
  {
    if (a4 || *(_BYTE *)(a3 + 43) == 3)
      v8 = 8;
    else
      v8 = 0;
    if (a5)
      v9 = v8 | 0x20;
    else
      v9 = v8;
    if (sub_100033308(*(void **)a3, kSCEntNetDNS))
      v9 |= 4u;
    if ((_DWORD)a2 == 2)
    {
      v10 = (const __CFDictionary *)sub_100033308(*(void **)a3, kSCEntNetIPv4);
      if (v10)
      {
        *(_QWORD *)value.count = 0;
        v11 = (const __CFDictionary *)CFDictionaryGetValue(v10, CFSTR("Service"));
        TypeID = CFDictionaryGetTypeID();
        if (v11)
        {
          if (CFGetTypeID(v11) == TypeID)
          {
            if (CFDictionaryGetValueIfPresent(v11, kSCPropNetIPv4CLAT46, (const void **)&value))
            {
              v13 = *(const void **)value.count;
              v14 = CFBooleanGetTypeID();
              if (v13)
              {
                if (CFGetTypeID(v13) == v14 && CFBooleanGetValue(*(CFBooleanRef *)value.count))
                  v9 |= 0x40u;
              }
            }
          }
        }
      }
    }
    CFStringGetCString(*(CFStringRef *)(a3 + 8), buffer, 16, 0x600u);
    v15 = sub_100032670(a1, buffer, a2, v9, *(_DWORD *)(a3 + 40), (_OWORD *)(a3 + 60), (unsigned __int8 *)(a3 + 76), *(_DWORD *)(a3 + 56));
    if (v15)
    {
      v17 = *(const __CFString **)(a3 + 104);
      if (v17)
      {
        v18 = v15;
        memset(&value, 0, sizeof(value));
        ExternalRepresentation = CFStringCreateExternalRepresentation(0, v17, 0x8000100u, 0);
        CC_SHA256_Init(&value);
        BytePtr = CFDataGetBytePtr(ExternalRepresentation);
        Length = CFDataGetLength(ExternalRepresentation);
        CC_SHA256_Update(&value, BytePtr, Length);
        CC_SHA256_Final((unsigned __int8 *)&v22, &value);
        CFRelease(ExternalRepresentation);
        result = *(double *)&v22;
        *(_OWORD *)(v18 + 92) = v22;
        *(_DWORD *)(v18 + 108) = v23;
        *(_QWORD *)(v18 + 16) |= 0x10uLL;
      }
    }
  }
  return result;
}

BOOL sub_100042E30(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2
    || *(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)
    || *(unsigned __int16 *)(a1 + 16) != *(unsigned __int16 *)(a2 + 16))
  {
    return 0;
  }
  if (*(_QWORD *)(a1 + 20) != *(_QWORD *)(a2 + 20) || *(_QWORD *)(a1 + 28) != *(_QWORD *)(a2 + 28))
    return 0;
  if (*(_QWORD *)(a1 + 52) != *(_QWORD *)(a2 + 52) || *(_QWORD *)(a1 + 60) != *(_QWORD *)(a2 + 60))
    return 0;
  return *(_QWORD *)(a1 + 36) == *(_QWORD *)(a2 + 36) && *(_QWORD *)(a1 + 44) == *(_QWORD *)(a2 + 44);
}

uint64_t sub_100042F00(uint64_t a1, char a2, int __fd)
{
  __int16 v3;
  unsigned int v6;
  _OWORD *v8;
  int v9;
  int v10;
  char *v11;
  _QWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD v18[15];

  v3 = *(_WORD *)(a1 + 16);
  if ((v3 & 0x18) != 0)
    return 1001;
  v6 = *(_DWORD *)(a1 + 4);
  if (!v6)
  {
    sub_1000432F8(5, (unsigned int *)a1, (uint64_t)"no interface specified");
    return 6;
  }
  if (__fd == -1)
    return 9;
  v17 = 0u;
  memset(v18, 0, sizeof(v18));
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  BYTE3(v13) = a2;
  BYTE2(v13) = 5;
  DWORD1(v14) = ++dword_10007DCC4;
  HIDWORD(v13) = 19;
  v8 = (_OWORD *)(a1 + 52);
  if (*(_DWORD *)(a1 + 52) || *(_DWORD *)(a1 + 56) || *(_DWORD *)(a1 + 60) || *(_DWORD *)(a1 + 64))
  {
    v9 = 51;
    HIDWORD(v13) = 51;
    if ((v3 & 4) == 0)
      goto LABEL_11;
  }
  else
  {
    v9 = 19;
    if ((v3 & 4) == 0)
    {
LABEL_11:
      v9 |= 4u;
      HIDWORD(v13) = v9;
      if ((v3 & 2) != 0)
        v10 = 2051;
      else
        v10 = 2305;
      goto LABEL_19;
    }
  }
  v10 = 2053;
  DWORD2(v13) = 2053;
  if ((v3 & 2) != 0)
  {
    v10 = 2055;
LABEL_19:
    DWORD2(v13) = v10;
  }
  if ((v3 & 1) != 0)
  {
    WORD2(v13) = v6;
    v10 |= 0x1000000u;
    DWORD2(v13) = v10;
  }
  WORD6(v18[0]) = 7708;
  *(_OWORD *)((char *)&v18[1] + 4) = *(_OWORD *)(a1 + 20);
  if (BYTE4(v18[1]) == 254 && (BYTE5(v18[1]) & 0xC0) == 0x80)
    WORD3(v18[1]) = bswap32(v6) >> 16;
  if ((v10 & 2) != 0)
  {
    WORD4(v18[2]) = 7708;
    v18[3] = *(_OWORD *)(a1 + 36);
    if (LOBYTE(v18[3]) == 254 && (BYTE1(v18[3]) & 0xC0) == 0x80)
      WORD1(v18[3]) = bswap32(v6) >> 16;
    v11 = (char *)&v18[4] + 4;
  }
  else
  {
    WORD4(v18[2]) = 4628;
    WORD5(v18[2]) = v6;
    v11 = (char *)&v18[3] + 12;
  }
  if ((v9 & 4) != 0)
  {
    v12 = v11 + 8;
    *(_WORD *)v11 = 7708;
    v11 += 28;
    sub_100040B24(v12, *(_DWORD *)a1);
    LOBYTE(v9) = BYTE12(v13);
  }
  if ((v9 & 0x10) != 0)
  {
    *(_WORD *)v11 = 4628;
    *((_WORD *)v11 + 1) = v6;
    v11 += 20;
  }
  if ((v9 & 0x20) != 0)
  {
    *(_WORD *)v11 = 7708;
    *(_OWORD *)(v11 + 8) = *v8;
    LODWORD(v11) = (_DWORD)v11 + 28;
  }
  LOWORD(v13) = (_WORD)v11 - ((unsigned __int16)v18 + 12) + 92;
  if (write(__fd, &v13, (int)((_DWORD)v11 - (v18 + 12) + 92)) == -1)
    return *__error();
  else
    return 0;
}

uint64_t sub_100043190(uint64_t a1)
{
  return a1 + 36;
}

__n128 sub_1000431D8(uint64_t a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *(__n128 *)(a1 + 36) = *a2;
  return result;
}

uint64_t sub_100043224(uint64_t a1)
{
  return a1 + 20;
}

BOOL sub_10004326C(uint64_t a1, int8x16_t *a2)
{
  int v3;
  int8x16_t v4;
  int8x16_t v7;
  int8x16_t __b;

  v7 = *a2;
  v3 = *(_DWORD *)a1;
  __b = 0uLL;
  sub_100040B24(&__b, v3);
  v4 = vandq_s8(v7, __b);
  return v4.i64[0] == *(_QWORD *)(a1 + 20) && v4.i64[1] == *(_QWORD *)(a1 + 28);
}

void sub_1000432F8(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  __CFString *Mutable;
  os_log_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  os_log_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;

  Mutable = CFStringCreateMutable(0, 0);
  sub_10003D80C(a2, Mutable);
  v7 = (os_log_t)qword_10007DC80;
  if (a3)
  {
    if (!qword_10007DC80)
    {
      v7 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_10007DC80 = (uint64_t)v7;
    }
    v8 = _SC_syslog_os_log_mapping(a1);
    if (__SC_log_enabled(a1, v7, v8))
    {
      v9 = _os_log_pack_size(22);
      v12 = (char *)&v26 - ((__chkstk_darwin(v9, v10, v11) + 15) & 0xFFFFFFFFFFFFFFF0);
      v13 = __error();
      v14 = _os_log_pack_fill(v12, v9, *v13, &_mh_execute_header, "%s: %@");
      *(_DWORD *)v14 = 136315394;
      *(_QWORD *)(v14 + 4) = a3;
      *(_WORD *)(v14 + 12) = 2112;
      *(_QWORD *)(v14 + 14) = Mutable;
      v15 = a1;
      v16 = v7;
      v17 = v8;
      v18 = v12;
LABEL_10:
      __SC_log_send(v15, v16, v17, v18);
    }
  }
  else
  {
    if (!qword_10007DC80)
    {
      v7 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_10007DC80 = (uint64_t)v7;
    }
    v19 = _SC_syslog_os_log_mapping(a1);
    if (__SC_log_enabled(a1, v7, v19))
    {
      v20 = _os_log_pack_size(12);
      v23 = (char *)&v26 - ((__chkstk_darwin(v20, v21, v22) + 15) & 0xFFFFFFFFFFFFFFF0);
      v24 = __error();
      v25 = _os_log_pack_fill(v23, v20, *v24, &_mh_execute_header, "%@");
      *(_DWORD *)v25 = 138412290;
      *(_QWORD *)(v25 + 4) = Mutable;
      v15 = a1;
      v16 = v7;
      v17 = v19;
      v18 = v23;
      goto LABEL_10;
    }
  }
  CFRelease(Mutable);
}

__CFString *sub_100043520(unsigned int *a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable(0, 0);
  sub_10003D80C(a1, Mutable);
  return Mutable;
}

void sub_100043590(unsigned int *a1)
{
  __CFString *v1;
  os_log_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;

  v1 = sub_10003D720(a1);
  v2 = (os_log_t)qword_10007DC80;
  if (!qword_10007DC80)
  {
    v2 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    qword_10007DC80 = (uint64_t)v2;
  }
  v3 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v2, v3))
  {
    v4 = _os_log_pack_size(12);
    v7 = (char *)&v10 - ((__chkstk_darwin(v4, v5, v6) + 15) & 0xFFFFFFFFFFFFFFF0);
    v8 = __error();
    v9 = _os_log_pack_fill(v7, v4, *v8, &_mh_execute_header, "%@");
    *(_DWORD *)v9 = 138412290;
    *(_QWORD *)(v9 + 4) = v1;
    __SC_log_send(7, v2, v3, v7);
  }
  CFRelease(v1);
}

void sub_1000436C4(const __CFString *a1, uint64_t a2, const __CFArray *a3)
{
  uint64_t v5;
  char i;
  char v7;

  if (CFStringHasPrefix(a1, kSCDynamicStoreDomainSetup))
  {
    v5 = 0;
    for (i = 1; ; i = 0)
    {
      v7 = i;
      if (CFStringHasSuffix(a1, *(CFStringRef *)*(&off_1000769C8 + v5)))
        break;
      v5 = 1;
      if ((v7 & 1) == 0)
        return;
    }
    sub_100035AAC(a3, a1);
  }
}

uint64_t sub_10004379C(const __CFDictionary *a1, const void *a2, uint64_t a3)
{
  uint64_t v3;
  const __CFNumber *Value;
  CFTypeID TypeID;
  unsigned int valuePtr;

  v3 = a3;
  valuePtr = a3;
  Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  TypeID = CFNumberGetTypeID();
  if (Value && CFGetTypeID(Value) == TypeID)
  {
    CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
    return valuePtr;
  }
  return v3;
}

uint64_t sub_100043834(unsigned int *a1)
{
  os_log_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  uint64_t generation;
  uint64_t v11;
  os_log_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int *v18;
  uint64_t v19;
  signed int v20;
  uint64_t v21;
  os_log_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  int *v28;
  uint64_t v29;
  os_log_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int *v36;
  uint64_t v37;
  signed int v38;
  uint64_t v39;
  os_log_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int *v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  size_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  size_t v59;
  char *v60;
  uint64_t v61;
  os_log_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  int *v68;
  uint64_t v69;
  const char *v70[2];

  v2 = (os_log_t)qword_10007DC80;
  if (!qword_10007DC80)
  {
    v2 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    qword_10007DC80 = (uint64_t)v2;
  }
  v3 = _SC_syslog_os_log_mapping(6);
  if (__SC_log_enabled(6, v2, v3))
  {
    v4 = _os_log_pack_size(22);
    v7 = (char *)v70 - ((__chkstk_darwin(v4, v5, v6) + 15) & 0xFFFFFFFFFFFFFFF0);
    v8 = __error();
    v9 = _os_log_pack_fill(v7, v4, *v8, &_mh_execute_header, "Network information (generation %llu size=%lu)", v70[0], v70[1]);
    generation = nwi_state_get_generation(a1);
    v11 = 4 * a1[1] + 224 * a1[1] + 40;
    *(_DWORD *)v9 = 134218240;
    *(_QWORD *)(v9 + 4) = generation;
    *(_WORD *)(v9 + 12) = 2048;
    *(_QWORD *)(v9 + 14) = v11;
    __SC_log_send(6, v2, v3, v7);
  }
  v12 = (os_log_t)qword_10007DC80;
  if (!qword_10007DC80)
  {
    v12 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    qword_10007DC80 = (uint64_t)v12;
  }
  v13 = _SC_syslog_os_log_mapping(6);
  if (__SC_log_enabled(6, v12, v13))
  {
    v14 = _os_log_pack_size(12);
    v17 = (char *)v70 - ((__chkstk_darwin(v14, v15, v16) + 15) & 0xFFFFFFFFFFFFFFF0);
    v18 = __error();
    v19 = _os_log_pack_fill(v17, v14, *v18, &_mh_execute_header, "%s", v70[0]);
    *(_DWORD *)v19 = 136315138;
    *(_QWORD *)(v19 + 4) = "IPv4 network interface information";
    __SC_log_send(6, v12, v13, v17);
  }
  if ((int)a1[2] < 1)
  {
    v22 = (os_log_t)qword_10007DC80;
    if (!qword_10007DC80)
    {
      v22 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_10007DC80 = (uint64_t)v22;
    }
    v23 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v22, v23))
    {
      v24 = _os_log_pack_size(12);
      v27 = (char *)v70 - ((__chkstk_darwin(v24, v25, v26) + 15) & 0xFFFFFFFFFFFFFFF0);
      v28 = __error();
      v29 = _os_log_pack_fill(v27, v24, *v28, &_mh_execute_header, "%s", v70[0]);
      *(_DWORD *)v29 = 136315138;
      *(_QWORD *)(v29 + 4) = "   No IPv4 states found";
      __SC_log_send(6, v22, v23, v27);
    }
  }
  else
  {
    v20 = 0;
    v21 = (uint64_t)(a1 + 10);
    do
    {
      sub_100043EFC(v21);
      ++v20;
      v21 += 112;
    }
    while (v20 < (int)a1[2]);
  }
  sub_1000448E4();
  v30 = (os_log_t)qword_10007DC80;
  if (!qword_10007DC80)
  {
    v30 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    qword_10007DC80 = (uint64_t)v30;
  }
  v31 = _SC_syslog_os_log_mapping(6);
  if (__SC_log_enabled(6, v30, v31))
  {
    v32 = _os_log_pack_size(12);
    v35 = (char *)v70 - ((__chkstk_darwin(v32, v33, v34) + 15) & 0xFFFFFFFFFFFFFFF0);
    v36 = __error();
    v37 = _os_log_pack_fill(v35, v32, *v36, &_mh_execute_header, "%s", v70[0]);
    *(_DWORD *)v37 = 136315138;
    *(_QWORD *)(v37 + 4) = "IPv6 network interface information";
    __SC_log_send(6, v30, v31, v35);
  }
  if ((int)a1[3] < 1)
  {
    v40 = (os_log_t)qword_10007DC80;
    if (!qword_10007DC80)
    {
      v40 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_10007DC80 = (uint64_t)v40;
    }
    v41 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v40, v41))
    {
      v42 = _os_log_pack_size(12);
      v45 = (char *)v70 - ((__chkstk_darwin(v42, v43, v44) + 15) & 0xFFFFFFFFFFFFFFF0);
      v46 = __error();
      v47 = _os_log_pack_fill(v45, v42, *v46, &_mh_execute_header, "%s", v70[0]);
      *(_DWORD *)v47 = 136315138;
      *(_QWORD *)(v47 + 4) = "   No IPv6 states found\n";
      __SC_log_send(6, v40, v41, v45);
    }
  }
  else
  {
    v38 = 0;
    v39 = (uint64_t)&a1[28 * a1[1] + 10];
    do
    {
      sub_100043EFC(v39);
      ++v38;
      v39 += 112;
    }
    while (v38 < (int)a1[3]);
  }
  sub_1000448E4();
  result = nwi_state_get_interface_names(a1, 0, 0);
  if ((_DWORD)result)
  {
    v51 = result;
    __chkstk_darwin(result, v49, v50);
    v54 = (char *)v70 - v53;
    v55 = v52 >= 0x200 ? 512 : v52;
    bzero((char *)v70 - v53, v55);
    result = nwi_state_get_interface_names(a1, v54, v51);
    if ((_DWORD)result)
    {
      v58 = result;
      v59 = (17 * result);
      __chkstk_darwin(result, v56, v57);
      v60 = (char *)v70 - ((v59 + 15) & 0x1FFFFFFF0);
      bzero(v60, v59);
      v61 = 0;
      do
      {
        if (v61)
          strlcat((char *)v70 - ((v59 + 15) & 0x1FFFFFFF0), " ", v59);
        strlcat((char *)v70 - ((v59 + 15) & 0x1FFFFFFF0), *(const char **)&v54[v61], v59);
        v61 += 8;
      }
      while (8 * v58 != v61);
      v62 = (os_log_t)qword_10007DC80;
      if (!qword_10007DC80)
      {
        v62 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
        qword_10007DC80 = (uint64_t)v62;
      }
      v63 = _SC_syslog_os_log_mapping(6);
      result = __SC_log_enabled(6, v62, v63);
      if ((_DWORD)result)
      {
        v64 = _os_log_pack_size(12);
        v67 = (char *)v70 - ((__chkstk_darwin(v64, v65, v66) + 15) & 0xFFFFFFFFFFFFFFF0);
        v68 = __error();
        v69 = _os_log_pack_fill(v67, v64, *v68, &_mh_execute_header, "Network interfaces: %s", v70[0]);
        *(_DWORD *)v69 = 136315138;
        *(_QWORD *)(v69 + 4) = v60;
        return __SC_log_send(6, v62, v63, v67);
      }
    }
  }
  return result;
}

uint64_t sub_100043EFC(uint64_t a1)
{
  uint64_t flags;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t ifname;
  unsigned int reachability_flags;
  os_log_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int *v17;
  uint64_t v18;
  os_log_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int *v25;
  uint64_t v26;
  uint64_t vpn_server;
  os_log_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  int *v34;
  uint64_t v35;
  os_log_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  int *v42;
  uint64_t v43;
  unsigned int v44;
  const char *v45;
  os_log_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  uint64_t v58;
  const UInt8 *signature;
  CFDataRef v60;
  os_log_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  int *v67;
  uint64_t v68;
  uint64_t generation;
  os_log_t v70;
  uint64_t v71;
  uint64_t result;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  int *v77;
  uint64_t v78;
  const char *v79;
  const char *v80;
  const char *v81;
  _BYTE v82[100];
  char v83[46];

  flags = nwi_ifstate_get_flags();
  v3 = *(_QWORD *)(a1 + 16) & 0xEFLL;
  v4 = v3 | flags & 0xFFFFFFFFFFFFFFEFLL;
  v5 = (v3 | flags & 0xEF);
  if (!(v3 | flags & 0xEF))
  {
    v82[0] = 0;
    goto LABEL_31;
  }
  v6 = __strlcpy_chk(v82, "(", 99, 100);
  v7 = v6;
  if ((v4 & 1) != 0 && v6 <= 0x62)
  {
    v8 = v5;
    if (v6 <= 0x5C)
    {
      v7 = __strlcat_chk(v82, "IPv4,", 99, 100);
      v8 = v4 & 0xEE;
    }
    if ((v8 & 2) == 0)
      goto LABEL_9;
    goto LABEL_7;
  }
  v8 = v5;
  if ((v5 & 2) != 0)
  {
LABEL_7:
    if (v7 <= 0x5C)
    {
      v7 = __strlcat_chk(v82, "IPv6,", 99, 100);
      v8 = v8 & 0xED;
    }
  }
LABEL_9:
  if ((v8 & 4) != 0 && v7 <= 0x5D)
  {
    v7 = __strlcat_chk(v82, "DNS,", 99, 100);
    v8 &= ~4uLL;
  }
  if ((v8 & 0x40) != 0 && v7 <= 0x5A)
  {
    v7 = __strlcat_chk(v82, "CLAT46,", 99, 100);
    v8 &= ~0x40uLL;
  }
  if ((v8 & 8) != 0 && v7 <= 0x55)
  {
    v7 = __strlcat_chk(v82, "NOT-IN-LIST,", 99, 100);
    v8 &= ~8uLL;
  }
  if ((v8 & 0x10) != 0 && v7 < 0x58)
  {
    v7 = __strlcat_chk(v82, "SIGNATURE,", 99, 100);
    v8 &= ~0x10uLL;
  }
  if ((v8 & 0x20) != 0 && v7 < 0x54)
  {
    v7 = __strlcat_chk(v82, "NOT-IN-IFLIST,", 99, 100);
    v8 &= ~0x20uLL;
  }
  if (v8)
  {
    if (v7 >= 0x57)
    {
      v7 = __strlcpy_chk(v82, "(", 99, 100);
      v8 = v5;
    }
    v7 += snprintf(&v82[v7], 99 - v7, ",%p", (const void *)v8);
  }
  if (v7)
    v82[v7 - 1] = 41;
LABEL_31:
  ifname = nwi_ifstate_get_ifname(a1);
  reachability_flags = nwi_ifstate_get_reachability_flags(a1);
  if (!inet_ntop(*(unsigned __int8 *)(a1 + 32), (const void *)(a1 + 36), v83, 0x2Eu))
    __strlcpy_chk(v83, "???", 46, 46);
  v11 = (os_log_t)qword_10007DC80;
  if (!qword_10007DC80)
  {
    v11 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    qword_10007DC80 = (uint64_t)v11;
  }
  v12 = _SC_syslog_os_log_mapping(6);
  if (__SC_log_enabled(6, v11, v12))
  {
    v13 = _os_log_pack_size(32);
    v16 = (char *)&v79 - ((__chkstk_darwin(v13, v14, v15) + 15) & 0xFFFFFFFFFFFFFFF0);
    v17 = __error();
    v18 = _os_log_pack_fill(v16, v13, *v17, &_mh_execute_header, " %7s : flags      : %p %s", v79, v80, v81);
    *(_DWORD *)v18 = 136315650;
    *(_QWORD *)(v18 + 4) = ifname;
    *(_WORD *)(v18 + 12) = 2048;
    *(_QWORD *)(v18 + 14) = v4;
    *(_WORD *)(v18 + 22) = 2080;
    *(_QWORD *)(v18 + 24) = v82;
    __SC_log_send(6, v11, v12, v16);
  }
  v19 = (os_log_t)qword_10007DC80;
  if (!qword_10007DC80)
  {
    v19 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    qword_10007DC80 = (uint64_t)v19;
  }
  v20 = _SC_syslog_os_log_mapping(6);
  if (__SC_log_enabled(6, v19, v20))
  {
    v21 = _os_log_pack_size(12);
    v24 = (char *)&v79 - ((__chkstk_darwin(v21, v22, v23) + 15) & 0xFFFFFFFFFFFFFFF0);
    v25 = __error();
    v26 = _os_log_pack_fill(v24, v21, *v25, &_mh_execute_header, "           address    : %s", v79);
    *(_DWORD *)v26 = 136315138;
    *(_QWORD *)(v26 + 4) = v83;
    __SC_log_send(6, v19, v20, v24);
  }
  vpn_server = nwi_ifstate_get_vpn_server(a1);
  if (vpn_server)
  {
    _SC_sockaddr_to_string(vpn_server, (char *)&v80 + 2, 46);
    v28 = (os_log_t)qword_10007DC80;
    if (!qword_10007DC80)
    {
      v28 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_10007DC80 = (uint64_t)v28;
    }
    v29 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v28, v29))
    {
      v30 = _os_log_pack_size(12);
      v33 = (char *)&v79 - ((__chkstk_darwin(v30, v31, v32) + 15) & 0xFFFFFFFFFFFFFFF0);
      v34 = __error();
      v35 = _os_log_pack_fill(v33, v30, *v34, &_mh_execute_header, "           VPN server : %s", v79);
      *(_DWORD *)v35 = 136315138;
      *(_QWORD *)(v35 + 4) = (char *)&v80 + 2;
      __SC_log_send(6, v28, v29, v33);
    }
  }
  sub_100044A18(reachability_flags, (char *)&v80 + 2);
  v36 = (os_log_t)qword_10007DC80;
  if (!qword_10007DC80)
  {
    v36 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    qword_10007DC80 = (uint64_t)v36;
  }
  v37 = _SC_syslog_os_log_mapping(6);
  if (__SC_log_enabled(6, v36, v37))
  {
    v38 = _os_log_pack_size(12);
    v41 = (char *)&v79 - ((__chkstk_darwin(v38, v39, v40) + 15) & 0xFFFFFFFFFFFFFFF0);
    v42 = __error();
    v43 = _os_log_pack_fill(v41, v38, *v42, &_mh_execute_header, "           reach      : %s", v79);
    *(_DWORD *)v43 = 136315138;
    *(_QWORD *)(v43 + 4) = (char *)&v80 + 2;
    __SC_log_send(6, v36, v37, v41);
  }
  HIDWORD(v79) = 0;
  v44 = *(_DWORD *)(a1 + 28);
  if (HIBYTE(v44) > 4u)
    v45 = "???";
  else
    v45 = off_100076C88[SHIBYTE(v44)];
  v46 = (os_log_t)qword_10007DC80;
  if ((v44 & 0xFFFFFF) == 0xFFFFFF)
  {
    if (!qword_10007DC80)
    {
      v46 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_10007DC80 = (uint64_t)v46;
    }
    v47 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v46, v47))
    {
      v48 = _os_log_pack_size(18);
      v51 = (char *)&v79 - ((__chkstk_darwin(v48, v49, v50) + 15) & 0xFFFFFFFFFFFFFFF0);
      v52 = __error();
      v53 = _os_log_pack_fill(v51, v48, *v52, &_mh_execute_header, "           rank       : 0x%08x (%s, Last)", (_DWORD)v79, v80);
      *(_DWORD *)v53 = 67109378;
      *(_DWORD *)(v53 + 4) = v44;
      *(_WORD *)(v53 + 8) = 2080;
      *(_QWORD *)(v53 + 10) = v45;
LABEL_62:
      __SC_log_send(6, v46, v47, v51);
    }
  }
  else
  {
    if (!qword_10007DC80)
    {
      v46 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_10007DC80 = (uint64_t)v46;
    }
    v47 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v46, v47))
    {
      v54 = _os_log_pack_size(24);
      v51 = (char *)&v79 - ((__chkstk_darwin(v54, v55, v56) + 15) & 0xFFFFFFFFFFFFFFF0);
      v57 = __error();
      v58 = _os_log_pack_fill(v51, v54, *v57, &_mh_execute_header, "           rank       : 0x%08x (%s, %u)", (_DWORD)v79, v80, (_DWORD)v81);
      *(_DWORD *)v58 = 67109634;
      *(_DWORD *)(v58 + 4) = v44;
      *(_WORD *)(v58 + 8) = 2080;
      *(_QWORD *)(v58 + 10) = v45;
      *(_WORD *)(v58 + 18) = 1024;
      *(_DWORD *)(v58 + 20) = v44 & 0xFFFFFF;
      goto LABEL_62;
    }
  }
  signature = (const UInt8 *)nwi_ifstate_get_signature(a1, 0, (char *)&v79 + 4);
  if (signature)
  {
    v60 = CFDataCreate(0, signature, SHIDWORD(v79));
    v61 = (os_log_t)qword_10007DC80;
    if (!qword_10007DC80)
    {
      v61 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_10007DC80 = (uint64_t)v61;
    }
    v62 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v61, v62))
    {
      v63 = _os_log_pack_size(12);
      v66 = (char *)&v79 - ((__chkstk_darwin(v63, v64, v65) + 15) & 0xFFFFFFFFFFFFFFF0);
      v67 = __error();
      v68 = _os_log_pack_fill(v66, v63, *v67, &_mh_execute_header, "           signature  : %@");
      *(_DWORD *)v68 = 138412290;
      *(_QWORD *)(v68 + 4) = v60;
      __SC_log_send(6, v61, v62, v66);
    }
    CFRelease(v60);
  }
  generation = nwi_ifstate_get_generation(a1);
  v70 = (os_log_t)qword_10007DC80;
  if (!qword_10007DC80)
  {
    v70 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    qword_10007DC80 = (uint64_t)v70;
  }
  v71 = _SC_syslog_os_log_mapping(6);
  result = __SC_log_enabled(6, v70, v71);
  if ((_DWORD)result)
  {
    v73 = _os_log_pack_size(12);
    v76 = (char *)&v79 - ((__chkstk_darwin(v73, v74, v75) + 15) & 0xFFFFFFFFFFFFFFF0);
    v77 = __error();
    v78 = _os_log_pack_fill(v76, v73, *v77, &_mh_execute_header, "           generation : %llu", v79);
    *(_DWORD *)v78 = 134217984;
    *(_QWORD *)(v78 + 4) = generation;
    return __SC_log_send(6, v70, v71, v76);
  }
  return result;
}

uint64_t sub_1000448E4()
{
  unsigned int reachability_flags;
  os_log_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  const char *v10[13];

  reachability_flags = nwi_state_get_reachability_flags();
  sub_100044A18(reachability_flags, (char *)v10 + 4);
  v1 = (os_log_t)qword_10007DC80;
  if (!qword_10007DC80)
  {
    v1 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    qword_10007DC80 = (uint64_t)v1;
  }
  v2 = _SC_syslog_os_log_mapping(6);
  result = __SC_log_enabled(6, v1, v2);
  if ((_DWORD)result)
  {
    v4 = _os_log_pack_size(12);
    v7 = (char *)v10 - ((__chkstk_darwin(v4, v5, v6) + 15) & 0xFFFFFFFFFFFFFFF0);
    v8 = __error();
    v9 = _os_log_pack_fill(v7, v4, *v8, &_mh_execute_header, "   REACH : flags %s", v10[0]);
    *(_DWORD *)v9 = 136315138;
    *(_QWORD *)(v9 + 4) = (char *)v10 + 4;
    return __SC_log_send(6, v1, v2, v7);
  }
  return result;
}

unint64_t sub_100044A18(unsigned int a1, char *__str)
{
  unint64_t result;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;

  result = snprintf(__str, 0x64uLL, "0x%08x (", a1);
  if (a1 || result > 0x53)
  {
    v6 = (int)result;
    v5 = (int)result;
    v7 = a1;
    if ((a1 & 2) != 0)
    {
      v5 = (int)result;
      v7 = a1;
      if (result <= 0x57)
      {
        result = strlcat(__str, "Reachable,", 0x63uLL);
        v5 = result;
        v7 = a1 & 0xFFFFFFFD;
      }
    }
    if ((v7 & 1) != 0 && v5 <= 0x4C)
    {
      result = strlcat(__str, "Transient Connection,", 0x63uLL);
      v5 = result;
      v7 &= ~1u;
    }
    if ((v7 & 4) != 0 && v5 <= 0x4D)
    {
      result = strlcat(__str, "Connection Required,", 0x63uLL);
      v5 = result;
      v7 &= ~4u;
    }
    if ((v7 & 8) != 0 && v5 <= 0x41)
    {
      result = strlcat(__str, "Automatic Connection On Traffic,", 0x63uLL);
      v5 = result;
      v7 &= ~8u;
    }
    if ((v7 & 0x20) != 0 && v5 <= 0x42)
    {
      result = strlcat(__str, "Automatic Connection On Demand,", 0x63uLL);
      v5 = result;
      v7 &= ~0x20u;
    }
    if ((v7 & 0x10) != 0 && v5 < 0x4C)
    {
      result = strlcat(__str, "Intervention Required,", 0x63uLL);
      v5 = result;
      v7 &= ~0x10u;
    }
    if ((v7 & 0x10000) != 0 && v5 < 0x54)
    {
      result = strlcat(__str, "Local Address,", 0x63uLL);
      v5 = result;
      v7 &= ~0x10000u;
    }
    if ((v7 & 0x20000) != 0 && v5 <= 0x46)
    {
      result = strlcat(__str, "Directly Reachable Address,", 0x63uLL);
      v5 = result;
      v7 &= ~0x20000u;
    }
    if ((v7 & 0x40000) != 0 && v5 <= 0x5C)
    {
      result = strlcat(__str, "WWAN,", 0x63uLL);
      v5 = result;
      v7 &= ~0x40000u;
    }
    if (v7)
    {
      if (v5 >= 0x57)
      {
        __str[v6] = 0;
        v5 = v6;
        v7 = a1;
      }
      result = snprintf(&__str[v5], 99 - v5, "0x%08x,", v7);
      v5 += (int)result;
    }
  }
  else
  {
    result = strlcat(__str, "Not Reachable,", 0x63uLL);
    v5 = result;
  }
  if (v5)
    __str[v5 - 1] = 41;
  return result;
}

void sub_100044CC0(uint64_t a1, int a2)
{
  size_t v4;
  void *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  os_log_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  int v18;
  void *v19;
  int *v20;
  char *v21;
  uint64_t v22;
  os_log_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  int *v31;
  _DWORD *v32;
  int v33;
  int v34;
  const void *v35;
  void *v36;
  const char *v37;

  v35 = 0;
  v4 = *(unsigned int *)(a1 + 16);
  LODWORD(v35) = v4;
  v5 = malloc_type_calloc(v4, 4uLL, 0x100004052888210uLL);
  v36 = v5;
  if (v5 && *(int *)(a1 + 16) >= 1)
  {
    v6 = v5;
    v7 = 0;
    v8 = a1 + 224 * *(int *)(a1 + 4) + 40;
    do
    {
      v6[v7] = sub_10002D8E0(a1 + 112 * *(int *)(v8 + 4 * v7) + 40);
      ++v7;
    }
    while (v7 < *(int *)(a1 + 16));
  }
  v9 = ioctl(a2, 0xC01069B2uLL, &v35);
  v10 = (os_log_t)qword_10007DC80;
  if (v9)
  {
    if (!qword_10007DC80)
    {
      v10 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_10007DC80 = (uint64_t)v10;
    }
    v11 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v10, v11))
    {
      v12 = _os_log_pack_size(34);
      v15 = (char *)&v34 - ((__chkstk_darwin(v12, v13, v14) + 15) & 0xFFFFFFFFFFFFFFF0);
      v16 = __error();
      v17 = _os_log_pack_fill(v15, v12, *v16, &_mh_execute_header, "SIOCSIFORDER for %u(%p) failed on %d: %s", v34, v35, (_DWORD)v36, v37);
      v18 = (int)v35;
      v19 = v36;
      v20 = __error();
      v21 = strerror(*v20);
      *(_DWORD *)v17 = 67109890;
      *(_DWORD *)(v17 + 4) = v18;
      *(_WORD *)(v17 + 8) = 2048;
      *(_QWORD *)(v17 + 10) = v19;
      *(_WORD *)(v17 + 18) = 1024;
      *(_DWORD *)(v17 + 20) = a2;
      *(_WORD *)(v17 + 24) = 2080;
      *(_QWORD *)(v17 + 26) = v21;
      v22 = 3;
      v23 = v10;
      v24 = v11;
      v25 = v15;
LABEL_14:
      __SC_log_send(v22, v23, v24, v25);
    }
  }
  else
  {
    if (!qword_10007DC80)
    {
      v10 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_10007DC80 = (uint64_t)v10;
    }
    v26 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v10, v26))
    {
      v27 = _os_log_pack_size(8);
      v30 = (char *)&v34 - ((__chkstk_darwin(v27, v28, v29) + 15) & 0xFFFFFFFFFFFFFFF0);
      v31 = __error();
      v32 = (_DWORD *)_os_log_pack_fill(v30, v27, *v31, &_mh_execute_header, "Set kernel interface order for %u interfaces", v34);
      v33 = (int)v35;
      *v32 = 67109120;
      v32[1] = v33;
      v22 = 6;
      v23 = v10;
      v24 = v26;
      v25 = v30;
      goto LABEL_14;
    }
  }
  if (v36)
    free(v36);
}

uint64_t sub_100044F94(uint64_t result, int a2, int a3)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  os_log_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  char *v24;
  unsigned __int8 *v25;
  int v26;
  os_log_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  int *v40;
  uint64_t v41;
  int v42;
  int *v43;
  char *v44;
  const char *v45;
  const char *v46;
  const char *v47;
  const char *v48;

  v4 = result;
  v5 = (*(_QWORD *)(result + 16) >> 8) & 0xF;
  if (v5 != 3)
  {
    if (v5 == 2)
    {
      LOBYTE(v7) = 0;
      v8 = 0;
      goto LABEL_8;
    }
    if (v5 != 1)
      return result;
  }
  v6 = *(_QWORD *)(result + 16) & 0x10;
  v7 = v6 >> 4;
  if (v6)
    v8 = 20;
  else
    v8 = 0;
LABEL_8:
  v9 = v8;
  v10 = sub_10002E10C(a3, result, a2, result + 92, v8);
  v11 = (os_log_t)qword_10007DC80;
  if (v10 < 0)
  {
    if (!qword_10007DC80)
    {
      v11 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_10007DC80 = (uint64_t)v11;
    }
    v35 = _SC_syslog_os_log_mapping(3);
    result = __SC_log_enabled(3, v11, v35);
    if ((_DWORD)result)
    {
      v36 = _os_log_pack_size(34);
      v39 = (char *)&v45 - ((__chkstk_darwin(v36, v37, v38) + 15) & 0xFFFFFFFFFFFFFFF0);
      v40 = __error();
      v41 = _os_log_pack_fill(v39, v36, *v40, &_mh_execute_header, "siocsifnetsignature(%s, IPv%c, %d) failed: %s", v45, v46, (_DWORD)v47, v48);
      if (a2 == 2)
        v42 = 52;
      else
        v42 = 54;
      v43 = __error();
      v44 = strerror(*v43);
      *(_DWORD *)v41 = 136315906;
      *(_QWORD *)(v41 + 4) = v4;
      *(_WORD *)(v41 + 12) = 1024;
      *(_DWORD *)(v41 + 14) = v42;
      *(_WORD *)(v41 + 18) = 1024;
      *(_DWORD *)(v41 + 20) = v8;
      *(_WORD *)(v41 + 24) = 2080;
      *(_QWORD *)(v41 + 26) = v44;
      return __SC_log_send(3, v11, v35, v39);
    }
  }
  else
  {
    if (!qword_10007DC80)
    {
      v11 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_10007DC80 = (uint64_t)v11;
    }
    v12 = _SC_syslog_os_log_mapping(7);
    result = __SC_log_enabled(7, v11, v12);
    if ((_DWORD)result)
    {
      v15 = _os_log_pack_size(28);
      v18 = (char *)&v45 - ((__chkstk_darwin(v15, v16, v17) + 15) & 0xFFFFFFFFFFFFFFF0);
      v19 = __error();
      v20 = _os_log_pack_fill(v18, v15, *v19, &_mh_execute_header, "IPv%c Network Signature %s %s", v45, v46, v47);
      if (a2 == 2)
        v21 = 52;
      else
        v21 = 54;
      v22 = "Cleared";
      *(_DWORD *)v20 = 67109634;
      *(_DWORD *)(v20 + 4) = v21;
      *(_WORD *)(v20 + 8) = 2080;
      if ((v7 & 1) != 0)
        v22 = "Set";
      *(_QWORD *)(v20 + 10) = v22;
      *(_WORD *)(v20 + 18) = 2080;
      *(_QWORD *)(v20 + 20) = v4;
      result = __SC_log_send(7, v11, v12, v18);
    }
    if ((v7 & 1) != 0 && byte_10007DC9C == 1)
    {
      __chkstk_darwin(result, v13, v14);
      v24 = (char *)&v45 - v23;
      *((_BYTE *)&v45 - v23) = 0;
      if (v8)
      {
        v25 = (unsigned __int8 *)(v4 + 92);
        do
        {
          v26 = *v25++;
          snprintf((char *)&v45 + 4, 4uLL, "%02x ", v26);
          strlcat(v24, (const char *)&v45 + 4, (3 * v8) | 1);
          --v9;
        }
        while (v9);
      }
      v27 = (os_log_t)qword_10007DC80;
      if (!qword_10007DC80)
      {
        v27 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
        qword_10007DC80 = (uint64_t)v27;
      }
      v28 = _SC_syslog_os_log_mapping(7);
      result = __SC_log_enabled(7, v27, v28);
      if ((_DWORD)result)
      {
        v29 = _os_log_pack_size(12);
        v32 = (char *)&v45 - ((__chkstk_darwin(v29, v30, v31) + 15) & 0xFFFFFFFFFFFFFFF0);
        v33 = __error();
        v34 = _os_log_pack_fill(v32, v29, *v33, &_mh_execute_header, "Signature Bytes: %s", v45);
        *(_DWORD *)v34 = 136315138;
        *(_QWORD *)(v34 + 4) = v24;
        return __SC_log_send(7, v27, v28, v32);
      }
    }
  }
  return result;
}

void sub_1000453C0(id a1)
{
  qword_10007DDC8 = (uint64_t)dispatch_queue_create("IPMonitorQueue", 0);
}

uint64_t sub_10004541C()
{
  os_log_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int *v6;
  os_log_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  os_log_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int *v21;
  uint64_t v22;
  const char *v23;
  const char *v24;

  if ((byte_10007DC9D & 1) != 0 || sub_100056CF4())
  {
    byte_10007DC9C = 1;
    v0 = (os_log_t)qword_10007DC80;
    if (!qword_10007DC80)
    {
      v0 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_10007DC80 = (uint64_t)v0;
    }
    v1 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v0, v1))
    {
      v2 = _os_log_pack_size(2);
      v5 = (char *)&v24 - ((__chkstk_darwin(v2, v3, v4) + 15) & 0xFFFFFFFFFFFFFFF0);
      v6 = __error();
      *(_WORD *)_os_log_pack_fill(v5, v2, *v6, &_mh_execute_header, "Setting logging verbose mode on") = 0;
      __SC_log_send(7, v0, v1, v5);
    }
  }
  else
  {
    v7 = (os_log_t)qword_10007DC80;
    if (!qword_10007DC80)
    {
      v7 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_10007DC80 = (uint64_t)v7;
    }
    v8 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v7, v8))
    {
      v9 = _os_log_pack_size(2);
      v12 = (char *)&v24 - ((__chkstk_darwin(v9, v10, v11) + 15) & 0xFFFFFFFFFFFFFFF0);
      v13 = __error();
      *(_WORD *)_os_log_pack_fill(v12, v9, *v13, &_mh_execute_header, "Setting logging verbose mode off") = 0;
      __SC_log_send(7, v7, v8, v12);
    }
    byte_10007DC9C = 0;
  }
  byte_10007DD60 = sub_100056D9C();
  v14 = (os_log_t)qword_10007DC80;
  if (!qword_10007DC80)
  {
    v14 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    qword_10007DC80 = (uint64_t)v14;
  }
  v15 = _SC_syslog_os_log_mapping(7);
  result = __SC_log_enabled(7, v14, v15);
  if ((_DWORD)result)
  {
    v17 = _os_log_pack_size(12);
    v20 = (char *)&v24 - ((__chkstk_darwin(v17, v18, v19) + 15) & 0xFFFFFFFFFFFFFFF0);
    v21 = __error();
    v22 = _os_log_pack_fill(v20, v17, *v21, &_mh_execute_header, "Service coupling is %s", v24);
    if (byte_10007DD60)
      v23 = "disabled";
    else
      v23 = "enabled";
    *(_DWORD *)v22 = 136315138;
    *(_QWORD *)(v22 + 4) = v23;
    return __SC_log_send(7, v14, v15, v20);
  }
  return result;
}

void sub_100045704(id a1)
{
  qword_10007DDD8 = (uint64_t)dispatch_queue_create("network change queue", 0);
}

void sub_100045760(id a1)
{
  byte_10007DDF8 = 1;
  sub_100034250();
}

void sub_1000457B0(id a1)
{
  const __CFArray *v1;
  uint64_t v2;

  v2 = 0;
  v1 = (const __CFArray *)sub_10002E80C(&v2);
  if (qword_10007DD58)
    CFRelease((CFTypeRef)qword_10007DD58);
  qword_10007DD58 = v2;
  if (v1)
  {
    sub_100037800((const __SCDynamicStore *)qword_10007DC90, 0, v1);
    CFRelease(v1);
  }
}

void sub_100045844(const __SCDynamicStore *a1, const __CFArray *a2)
{
  sub_100037800(a1, a2, 0);
}

uint64_t sub_10004588C()
{
  mach_port_t v0;
  kern_return_t multiuser_config_flags;
  mach_error_t v2;
  os_log_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  char *v9;
  const char *v10;
  uint64_t v11;
  os_log_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  const char *v19;
  const char *v20;

  HIDWORD(v19) = 0;
  v0 = mach_host_self();
  multiuser_config_flags = host_get_multiuser_config_flags(v0, (uint32_t *)&v19 + 1);
  if (multiuser_config_flags)
  {
    v2 = multiuser_config_flags;
    v3 = (os_log_t)qword_10007DC80;
    if (!qword_10007DC80)
    {
      v3 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_10007DC80 = (uint64_t)v3;
    }
    v4 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v3, v4))
    {
      v5 = _os_log_pack_size(18);
      v6 = (char *)&v19 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
      v7 = __error();
      v8 = _os_log_pack_fill(v6, v5, *v7, &_mh_execute_header, "host_get_multiuser_config_flags() failed, %s (%d)", v19, (_DWORD)v20);
      v9 = mach_error_string(v2);
      *(_DWORD *)v8 = 136315394;
      *(_QWORD *)(v8 + 4) = v9;
      *(_WORD *)(v8 + 12) = 1024;
      *(_DWORD *)(v8 + 14) = v2;
      __SC_log_send(3, v3, v4, v6);
      v10 = "false";
      v11 = 0;
    }
    else
    {
      v11 = 0;
      v10 = "false";
    }
  }
  else
  {
    if (SHIDWORD(v19) >= 0)
      v10 = "false";
    else
      v10 = "true";
    v11 = HIDWORD(v19) >> 31;
  }
  v12 = (os_log_t)qword_10007DC80;
  if (!qword_10007DC80)
  {
    v12 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    qword_10007DC80 = (uint64_t)v12;
  }
  v13 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v12, v13))
  {
    v14 = _os_log_pack_size(22);
    v15 = (char *)&v19 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    v16 = __error();
    v17 = _os_log_pack_fill(v15, v14, *v16, &_mh_execute_header, "%s: %s", v19, v20);
    *(_DWORD *)v17 = 136315394;
    *(_QWORD *)(v17 + 4) = "host_is_multiuser";
    *(_WORD *)(v17 + 12) = 2080;
    *(_QWORD *)(v17 + 14) = v10;
    __SC_log_send(5, v12, v13, v15);
  }
  return v11;
}

void sub_100045B08(id a1)
{
  sem_t *v1;

  v1 = sem_open("com.apple.configd.first-boot", 0);
  if (v1 == (sem_t *)-1)
  {
    byte_10007DDFC = 1;
    sub_100045B94();
  }
  else
  {
    sem_close(v1);
  }
}

uint64_t sub_100045B94()
{
  sem_t *v0;
  os_log_t v1;
  sem_t *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  int *v14;
  char *v15;
  const char *v16;
  const char *v17;
  const char *v18;

  v0 = sem_open("com.apple.configd.first-boot", 512, 256);
  v1 = (os_log_t)qword_10007DC80;
  if (v0 == (sem_t *)-1)
  {
    if (!qword_10007DC80)
    {
      v1 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_10007DC80 = (uint64_t)v1;
    }
    v9 = _SC_syslog_os_log_mapping(3);
    result = __SC_log_enabled(3, v1, v9);
    if ((_DWORD)result)
    {
      v10 = _os_log_pack_size(32);
      v11 = (char *)&v16 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
      v12 = __error();
      v13 = _os_log_pack_fill(v11, v10, *v12, &_mh_execute_header, "%s: failed to create %s, %s", v16, v17, v18);
      v14 = __error();
      v15 = strerror(*v14);
      *(_DWORD *)v13 = 136315650;
      *(_QWORD *)(v13 + 4) = "my_sem_establish";
      *(_WORD *)(v13 + 12) = 2080;
      *(_QWORD *)(v13 + 14) = "com.apple.configd.first-boot";
      *(_WORD *)(v13 + 22) = 2080;
      *(_QWORD *)(v13 + 24) = v15;
      return __SC_log_send(3, v1, v9, v11);
    }
  }
  else
  {
    v2 = v0;
    if (!qword_10007DC80)
    {
      v1 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_10007DC80 = (uint64_t)v1;
    }
    v3 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v1, v3))
    {
      v4 = _os_log_pack_size(22);
      v5 = (char *)&v16 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
      v6 = __error();
      v7 = _os_log_pack_fill(v5, v4, *v6, &_mh_execute_header, "%s: created %s", v16, v17);
      *(_DWORD *)v7 = 136315394;
      *(_QWORD *)(v7 + 4) = "my_sem_establish";
      *(_WORD *)(v7 + 12) = 2080;
      *(_QWORD *)(v7 + 14) = "com.apple.configd.first-boot";
      __SC_log_send(5, v1, v3, v5);
    }
    return sem_close(v2);
  }
  return result;
}

void sub_100045DF8(uint64_t a1)
{
  int v2;
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  __int128 v5;
  unint64_t v6;
  __objc2_prop_list **p_base_props;
  unsigned __int16 *v8;
  unsigned int v9;
  os_log_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  os_log_t v16;
  uint64_t v17;
  char *v18;
  os_log_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int *v23;
  ssize_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int *v41;
  char *v42;
  __int128 v43;
  int v44;
  size_t v45;
  const char *v46;
  size_t v47;
  int v48[4];
  uint64_t v49;

  v47 = 0;
  *(_OWORD *)v48 = xmmword_100069640;
  v49 = 0x81000000002;
  v2 = 3;
  while (1)
  {
    if (sysctl(v48, 6u, 0, &v47, 0, 0) < 0)
      return;
    v3 = (unsigned __int16 *)malloc_type_malloc(v47, 0x7AB53683uLL);
    if (!v3)
      return;
    v4 = v3;
    if ((sysctl(v48, 6u, v3, &v47, 0, 0) & 0x80000000) == 0)
      break;
    free(v4);
    if (!--v2)
      return;
  }
  if ((uint64_t)v47 >= 1)
  {
    v6 = (unint64_t)v4 + v47;
    p_base_props = &QoSMarkingController__classData.base_props;
    *(_QWORD *)&v5 = 67110146;
    v43 = v5;
    v8 = v4;
    v45 = (size_t)v4 + v47;
    while (1)
    {
      v9 = bswap32(*((_DWORD *)v8 + 24));
      if (HIBYTE(v9) != 127)
        break;
      v10 = (os_log_t)p_base_props[400];
      if (!v10)
      {
        v10 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
        p_base_props[400] = (__objc2_prop_list *)v10;
      }
      v11 = _SC_syslog_os_log_mapping(7);
      if (!__SC_log_enabled(7, v10, v11))
        goto LABEL_27;
      v12 = _os_log_pack_size(2);
      v13 = (char *)&v43 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
      v14 = __error();
      *(_WORD *)_os_log_pack_fill(v13, v12, *v14, &_mh_execute_header, "flush_routes: ignoring loopback route") = 0;
      v15 = 7;
      v16 = v10;
      v17 = v11;
      v18 = v13;
LABEL_26:
      __SC_log_send(v15, v16, v17, v18);
LABEL_27:
      v8 = (unsigned __int16 *)((char *)v8 + *v8);
      if ((unint64_t)v8 >= v6)
        goto LABEL_33;
    }
    if (v9 >> 8 == 14680064)
    {
      v19 = (os_log_t)p_base_props[400];
      if (!v19)
      {
        v19 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
        p_base_props[400] = (__objc2_prop_list *)v19;
      }
      v20 = _SC_syslog_os_log_mapping(7);
      if (!__SC_log_enabled(7, v19, v20))
        goto LABEL_27;
      v21 = _os_log_pack_size(2);
      v22 = (char *)&v43 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
      v23 = __error();
      *(_WORD *)_os_log_pack_fill(v22, v21, *v23, &_mh_execute_header, "flush_routes: ignoring multicast route") = 0;
    }
    else
    {
      *((_BYTE *)v8 + 3) = 2;
      *((_DWORD *)v8 + 5) = ++dword_10007DCC4;
      v24 = write(a1, v8, *v8);
      v19 = (os_log_t)p_base_props[400];
      if (v24 < 0)
      {
        if (!v19)
        {
          v19 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
          p_base_props[400] = (__objc2_prop_list *)v19;
        }
        v32 = _SC_syslog_os_log_mapping(5);
        v33 = v32;
        if (!__SC_log_enabled(5, v19, v32))
          goto LABEL_27;
        v34 = _os_log_pack_size(36);
        HIDWORD(v46) = v33;
        v22 = (char *)&v43 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
        v35 = __error();
        v36 = _os_log_pack_fill(v22, v34, *v35, &_mh_execute_header, "flush_routes: removing route for %d.%d.%d.%d failed: %s", (_DWORD)v43, DWORD2(v43), v44, v45, v46);
        v37 = a1;
        v38 = *((unsigned __int8 *)v8 + 96);
        v39 = *((unsigned __int8 *)v8 + 97);
        v40 = *((unsigned __int8 *)v8 + 98);
        LODWORD(v46) = *((unsigned __int8 *)v8 + 99);
        v41 = __error();
        v42 = strerror(*v41);
        *(_DWORD *)v36 = v43;
        *(_DWORD *)(v36 + 4) = v38;
        a1 = v37;
        *(_WORD *)(v36 + 8) = 1024;
        *(_DWORD *)(v36 + 10) = v39;
        p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
        *(_WORD *)(v36 + 14) = 1024;
        *(_DWORD *)(v36 + 16) = v40;
        v6 = v45;
        *(_WORD *)(v36 + 20) = 1024;
        v17 = HIDWORD(v46);
        *(_DWORD *)(v36 + 22) = (_DWORD)v46;
        *(_WORD *)(v36 + 26) = 2080;
        *(_QWORD *)(v36 + 28) = v42;
        v15 = 5;
        v16 = v19;
        goto LABEL_25;
      }
      if (!v19)
      {
        v19 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
        p_base_props[400] = (__objc2_prop_list *)v19;
      }
      v20 = _SC_syslog_os_log_mapping(7);
      if (!__SC_log_enabled(7, v19, v20))
        goto LABEL_27;
      v25 = _os_log_pack_size(26);
      v22 = (char *)&v43 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
      v26 = __error();
      v27 = _os_log_pack_fill(v22, v25, *v26, &_mh_execute_header, "flush_routes: removed route for %d.%d.%d.%d", (_DWORD)v43, DWORD2(v43), v44, v45);
      v28 = *((unsigned __int8 *)v8 + 96);
      v29 = *((unsigned __int8 *)v8 + 97);
      v30 = *((unsigned __int8 *)v8 + 98);
      v31 = *((unsigned __int8 *)v8 + 99);
      *(_DWORD *)v27 = 67109888;
      *(_DWORD *)(v27 + 4) = v28;
      *(_WORD *)(v27 + 8) = 1024;
      *(_DWORD *)(v27 + 10) = v29;
      *(_WORD *)(v27 + 14) = 1024;
      *(_DWORD *)(v27 + 16) = v30;
      *(_WORD *)(v27 + 20) = 1024;
      *(_DWORD *)(v27 + 22) = v31;
    }
    v15 = 7;
    v16 = v19;
    v17 = v20;
LABEL_25:
    v18 = v22;
    goto LABEL_26;
  }
LABEL_33:
  free(v4);
}

void sub_1000462E0(id a1)
{
  os_log_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  SCDynamicStoreNotifyValue(0, (CFStringRef)qword_10007DDB8);
  process_AgentMonitor_Proxy();
  notify_post("com.apple.system.config.proxy_change");
  v1 = (os_log_t)qword_10007DC80;
  if (!qword_10007DC80)
  {
    v1 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    qword_10007DC80 = (uint64_t)v1;
  }
  v2 = _SC_syslog_os_log_mapping(6);
  if (__SC_log_enabled(6, v1, v2))
  {
    v3 = _os_log_pack_size(12);
    v6 = (char *)&v10 - ((__chkstk_darwin(v3, v4, v5) + 15) & 0xFFFFFFFFFFFFFFF0);
    v7 = __error();
    v8 = _os_log_pack_fill(v6, v3, *v7, &_mh_execute_header, "Notifying:\n%@");
    v9 = qword_10007DDB8;
    *(_DWORD *)v8 = 138412290;
    *(_QWORD *)(v8 + 4) = v9;
    __SC_log_send(6, v1, v2, v6);
  }
}

void sub_100046428(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 250, a4);
}

uint64_t sub_100046430(uint64_t a1, const void *a2)
{
  const char *v3;
  char *v4;
  char *mach_service;
  os_log_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  const char *handler[5];

  sub_100055F28(qword_10007DE10);
  sub_1000465F0();
  qword_10007DE30 = (uint64_t)_Block_copy(a2);
  v3 = "com.apple.SystemConfiguration.NetworkInformation";
  v4 = getenv("com.apple.SystemConfiguration.NetworkInformation");
  if (v4)
    v3 = v4;
  if (qword_10007DE38 != -1)
    dispatch_once(&qword_10007DE38, &stru_100076D50);
  mach_service = (char *)xpc_connection_create_mach_service(v3, (dispatch_queue_t)qword_10007DE40, 1uLL);
  handler[0] = (const char *)_NSConcreteStackBlock;
  handler[1] = (const char *)0x40000000;
  handler[2] = (const char *)sub_100009EA8;
  handler[3] = (const char *)&unk_100076CB0;
  handler[4] = mach_service;
  xpc_connection_set_event_handler((xpc_connection_t)mach_service, handler);
  xpc_connection_resume((xpc_connection_t)mach_service);
  v6 = sub_100007594();
  v7 = _SC_syslog_os_log_mapping(7);
  result = __SC_log_enabled(7, v6, v7);
  if ((_DWORD)result)
  {
    v9 = _os_log_pack_size(12);
    v12 = (char *)handler - ((__chkstk_darwin(v9, v10, v11) + 15) & 0xFFFFFFFFFFFFFFF0);
    v13 = __error();
    v14 = _os_log_pack_fill(v12, v9, *v13, &_mh_execute_header, "XPC server \"%s\" started", handler[0]);
    *(_DWORD *)v14 = 136315138;
    *(_QWORD *)(v14 + 4) = v3;
    return __SC_log_send(7, v6, v7, v12);
  }
  return result;
}

uint64_t sub_1000465F0()
{
  uint64_t result;
  os_log_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;

  if (qword_10007DE38 != -1)
    dispatch_once(&qword_10007DE38, &stru_100076D50);
  result = os_state_add_handler(qword_10007DE40, &stru_100076D10);
  if (!result)
  {
    v1 = sub_100007594();
    v2 = _SC_syslog_os_log_mapping(3);
    result = __SC_log_enabled(3, v1, v2);
    if ((_DWORD)result)
    {
      v3 = _os_log_pack_size(2);
      v6 = (char *)&v8 - ((__chkstk_darwin(v3, v4, v5) + 15) & 0xFFFFFFFFFFFFFFF0);
      v7 = __error();
      *(_WORD *)_os_log_pack_fill(v6, v3, *v7, &_mh_execute_header, "Network information: os_state_add_handler() failed") = 0;
      return __SC_log_send(3, v1, v2, v6);
    }
  }
  return result;
}

uint64_t sub_100046728(const __CFData *a1)
{
  CFDataRef v1;
  uint64_t v2;
  os_log_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t notify_key;
  const char *v12;
  uint32_t v13;
  uint32_t v14;
  os_log_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int *v21;
  _DWORD *v22;
  uint64_t v24;
  _QWORD block[6];

  v1 = a1;
  if (a1)
  {
    v2 = *((_QWORD *)a1 + 4);
    v3 = sub_100007594();
    v4 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v3, v4))
    {
      v5 = _os_log_pack_size(12);
      v8 = (char *)&block[-1] - ((__chkstk_darwin(v5, v6, v7) + 15) & 0xFFFFFFFFFFFFFFF0);
      v9 = __error();
      v10 = _os_log_pack_fill(v8, v5, *v9, &_mh_execute_header, "Network information updated: %llu", v24);
      *(_DWORD *)v10 = 134217984;
      *(_QWORD *)(v10 + 4) = v2;
      __SC_log_send(7, v3, v4, v8);
    }
    v1 = CFDataCreate(0, (const UInt8 *)v1, 4 * *((unsigned int *)v1 + 1) + 112 * (2 * *((_DWORD *)v1 + 1)) + 40);
  }
  else
  {
    v2 = 0;
  }
  if (qword_10007DE38 != -1)
    dispatch_once(&qword_10007DE38, &stru_100076D50);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1000469D4;
  block[3] = &unk_100076CD0;
  block[4] = v1;
  block[5] = v2;
  dispatch_sync((dispatch_queue_t)qword_10007DE40, block);
  if (v1)
    CFRelease(v1);
  sub_100056038((uint64_t)&qword_10007DE10);
  if (qword_10007DE30)
    (*(void (**)(void))(qword_10007DE30 + 16))();
  notify_key = nwi_state_get_notify_key();
  if (notify_key)
  {
    v12 = (const char *)notify_key;
    _nwi_state_force_refresh();
    v13 = notify_post(v12);
    if (v13)
    {
      v14 = v13;
      v15 = sub_100007594();
      v16 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v15, v16))
      {
        v17 = _os_log_pack_size(8);
        v20 = (char *)&block[-1] - ((__chkstk_darwin(v17, v18, v19) + 15) & 0xFFFFFFFFFFFFFFF0);
        v21 = __error();
        v22 = (_DWORD *)_os_log_pack_fill(v20, v17, *v21, &_mh_execute_header, "notify_post() failed: %u", v24);
        *v22 = 67109120;
        v22[1] = v14;
        __SC_log_send(3, v15, v16, v20);
      }
    }
  }
  return 1;
}

void sub_1000469D4(uint64_t a1)
{
  sub_100055FA0((uint64_t)&qword_10007DE10, *(CFTypeRef *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

os_state_data_s *__cdecl sub_100046A24(id a1, os_state_hints_s *a2)
{
  CFIndex Length;
  size_t v3;
  os_log_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  int64_t v10;
  os_state_data_s *v11;
  os_state_data_s *v12;
  const UInt8 *BytePtr;
  os_log_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int *v18;
  size_t v20[2];

  if (qword_10007DE10[0])
  {
    Length = CFDataGetLength((CFDataRef)qword_10007DE10[0]);
    v3 = Length + 200;
    if ((unint64_t)(Length + 200) > 0x8000)
    {
      v4 = sub_100007594();
      v5 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v4, v5))
      {
        v6 = _os_log_pack_size(22);
        v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
        v8 = __error();
        v9 = _os_log_pack_fill(v7, v6, *v8, &_mh_execute_header, "Network information : state data too large (%zu > %zu)", v20[0], v20[1]);
        *(_DWORD *)v9 = 134218240;
        *(_QWORD *)(v9 + 4) = v3;
        *(_WORD *)(v9 + 12) = 2048;
        *(_QWORD *)(v9 + 14) = 0x8000;
        __SC_log_send(3, v4, v5, v7);
      }
      return 0;
    }
    v10 = Length;
  }
  else
  {
    v10 = 0;
    v3 = 200;
  }
  v11 = (os_state_data_s *)malloc_type_calloc(1uLL, v3, 0x716232B5uLL);
  if (!v11)
  {
    v14 = sub_100007594();
    v15 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v14, v15))
    {
      v16 = _os_log_pack_size(2);
      v17 = (char *)v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
      v18 = __error();
      *(_WORD *)_os_log_pack_fill(v17, v16, *v18, &_mh_execute_header, "Network information: could not allocate state data") = 0;
      __SC_log_send(3, v14, v15, v17);
    }
    return 0;
  }
  v12 = v11;
  v11->var0 = 3;
  v11->var1.var1 = v10;
  __strlcpy_chk(&v11->var2, "SystemConfiguration", 64, 64);
  __strlcpy_chk(v12->var2.var1, "nwi", 64, 64);
  __strlcpy_chk(v12->var3, "Network information", 64, 64);
  if (v10 >= 1)
  {
    BytePtr = CFDataGetBytePtr((CFDataRef)qword_10007DE10[0]);
    memcpy(v12->var4, BytePtr, v10);
  }
  return v12;
}

void sub_100046C7C(id a1)
{
  qword_10007DE40 = (uint64_t)dispatch_queue_create("com.apple.SystemConfiguration.NetworkInformation.server", 0);
}

uint64_t sub_100046CD8(_xpc_connection_s *a1, xpc_object_t xdict)
{
  uint64_t uint64;
  os_log_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  pid_t pid;
  uint64_t result;
  const void *v14;
  uint64_t v15;
  uint64_t v16;

  uint64 = xpc_dictionary_get_uint64(xdict, "generation");
  v4 = sub_100007594();
  v5 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v4, v5))
  {
    v6 = _os_log_pack_size(28);
    v9 = (char *)&v14 - ((__chkstk_darwin(v6, v7, v8) + 15) & 0xFFFFFFFFFFFFFFF0);
    v10 = __error();
    v11 = _os_log_pack_fill(v9, v6, *v10, &_mh_execute_header, "<%p:%d> Network information ack: %llu", v14, v15, v16);
    pid = xpc_connection_get_pid(a1);
    *(_DWORD *)v11 = 134218496;
    *(_QWORD *)(v11 + 4) = a1;
    *(_WORD *)(v11 + 12) = 1024;
    *(_DWORD *)(v11 + 14) = pid;
    *(_WORD *)(v11 + 18) = 2048;
    *(_QWORD *)(v11 + 20) = uint64;
    __SC_log_send(7, v4, v5, v9);
  }
  result = sub_100056088((uint64_t)&qword_10007DE10, a1, uint64);
  if ((_DWORD)result)
  {
    sub_100056038((uint64_t)&qword_10007DE10);
    result = qword_10007DE30;
    if (qword_10007DE30)
      return (*(uint64_t (**)(void))(qword_10007DE30 + 16))();
  }
  return result;
}

void sub_100046E60(_xpc_connection_s *a1, xpc_object_t xdict)
{
  _xpc_connection_s *remote_connection;
  xpc_object_t reply;
  const unsigned __int8 *uuid;
  const char *string;
  const char *v8;
  const char *v9;
  os_log_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int *v17;
  uint64_t v18;
  pid_t pid;
  void *v20;
  void *v21;
  const void *v22;
  uuid_t dst;

  v22 = 0;
  memset(dst, 0, sizeof(dst));
  remote_connection = xpc_dictionary_get_remote_connection(xdict);
  reply = xpc_dictionary_create_reply(xdict);
  uuid = xpc_dictionary_get_uuid(xdict, "AgentUUID");
  if (!uuid || (uuid_copy(dst, uuid), (string = xpc_dictionary_get_string(xdict, "AgentType")) == 0))
  {
    v20 = 0;
    if (!reply)
      goto LABEL_13;
    goto LABEL_12;
  }
  v8 = string;
  v9 = xpc_dictionary_get_string(xdict, "proc_name");
  v10 = sub_100007594();
  v11 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v10, v11))
  {
    if (v9)
      v12 = v9;
    else
      v12 = "???";
    v13 = _os_log_pack_size(28);
    v16 = &dst[-((__chkstk_darwin(v13, v14, v15) + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
    v17 = __error();
    v18 = _os_log_pack_fill(v16, v13, *v17, &_mh_execute_header, "<%p:%s[%d]> Config agent information copy", v22, *(const char **)dst, *(_DWORD *)&dst[8]);
    pid = xpc_connection_get_pid(a1);
    *(_DWORD *)v18 = 134218498;
    *(_QWORD *)(v18 + 4) = a1;
    *(_WORD *)(v18 + 12) = 2080;
    *(_QWORD *)(v18 + 14) = v12;
    *(_WORD *)(v18 + 22) = 1024;
    *(_DWORD *)(v18 + 24) = pid;
    __SC_log_send(7, v10, v11, v16);
  }
  if (!strcmp(v8, "DNSAgent"))
  {
    v21 = (void *)copy_dns_information_for_agent_uuid((uint64_t)dst, (uint64_t)&v22);
  }
  else
  {
    if (strcmp(v8, "ProxyAgent"))
    {
      v20 = 0;
      goto LABEL_21;
    }
    v21 = (void *)copy_proxy_information_for_agent_uuid((uint64_t)dst, (uint64_t)&v22);
  }
  v20 = v21;
  if (v21 && v22)
    xpc_dictionary_set_data(reply, "AgentData", v21, (size_t)v22);
LABEL_21:
  xpc_connection_send_message(remote_connection, reply);
  if (reply)
LABEL_12:
    xpc_release(reply);
LABEL_13:
  if (v20)
    free(v20);
}

__CFDictionary *sub_1000470BC(const __CFDictionary *a1, const __CFDictionary *a2, const __CFArray *a3, const void *a4)
{
  const __CFArray *Mutable;
  CFTypeID TypeID;
  CFIndex Count;
  uint64_t v10;
  const void **p_valuePtr;
  CFTypeID v12;
  void **v13;
  uint64_t v14;
  const __CFDictionary *v15;
  CFTypeID v16;
  void *MutableCopy;
  CFTypeID v18;
  CFRange v19;
  int v20;
  int v21;
  int v22;
  const void *v23;
  CFTypeID v24;
  CFIndex v25;
  uint64_t v26;
  const __CFArray *v27;
  const __CFArray *v28;
  CFTypeID v29;
  BOOL v30;
  CFIndex v31;
  void *v32;
  CFTypeID v33;
  void *v34;
  CFTypeID v35;
  void *v36;
  CFTypeID v37;
  CFIndex v38;
  const void *ValueAtIndex;
  CFTypeID v40;
  __CFDictionary *v41;
  const void *v42;
  const void *v43;
  const void *v44;
  CFTypeID v45;
  CFNumberRef v46;
  __CFDictionary *v47;
  const void *v48;
  CFTypeID v49;
  int v50;
  CFNumberRef v51;
  uint64_t v52;
  uint64_t v53;
  const void *v54;
  CFIndex v55;
  const __CFDictionary *v56;
  const __CFDictionary *v57;
  __CFDictionary *v58;
  unint64_t v59;
  const __CFDictionary *v60;
  __CFDictionary *v61;
  int v62;
  const __CFDictionary *v63;
  const __CFDictionary *v64;
  const void *v65;
  __CFDictionary *v66;
  CFTypeID v67;
  CFIndex v68;
  uint64_t v69;
  CFTypeID v70;
  uint64_t v71;
  CFMutableArrayRef v72;
  __CFArray *v73;
  CFTypeID v74;
  CFIndex v75;
  CFIndex v76;
  const __CFDictionary *v77;
  __CFArray *v78;
  CFIndex j;
  const __CFDictionary *v80;
  const __CFDictionary *v81;
  CFTypeID v82;
  CFIndex v83;
  CFIndex v84;
  CFIndex v85;
  __CFDictionary *v86;
  const void *v87;
  const __CFDictionary *v88;
  CFTypeID v89;
  const __CFDictionary *v90;
  CFTypeID v91;
  const __CFDictionary *v92;
  const void *v93;
  const void *v94;
  __CFDictionary *v95;
  CFTypeID v96;
  CFTypeID v97;
  CFIndex v98;
  CFIndex v99;
  CFIndex v100;
  const void *v101;
  const __CFDictionary *v102;
  CFTypeID v103;
  const __CFDictionary *v104;
  const __CFDictionary *v105;
  CFTypeID v106;
  const __CFNumber *v107;
  CFTypeID v108;
  CFStringRef v109;
  CFStringRef v110;
  __CFDictionary *v111;
  __CFDictionary *v112;
  __CFDictionary *v113;
  const void **v115;
  uint64_t i;
  const void *v117;
  const __CFArray *theArray;
  const __CFDictionary *v119;
  void *v120;
  void *v121;
  const void **v122;
  const __CFDictionary *v123;
  uint64_t range;
  CFTypeRef cf;
  void *v126;
  void *v127;
  void **values;
  void **valuesa;
  void **valuesb;
  void *key;
  const __CFArray *v132;
  const __CFDictionary *v133;
  CFTypeRef v135;
  void *v136;
  void *v137;
  void *value;
  _OWORD v139[16];
  __int128 valuePtr;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  CFRange v156;
  CFRange v157;

  Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  TypeID = CFDictionaryGetTypeID();
  v132 = a3;
  if (a2)
  {
    if (CFGetTypeID(a2) == TypeID)
    {
      Count = CFDictionaryGetCount(a2);
      if (Count)
      {
        v10 = Count;
        if (Count < 33)
        {
          p_valuePtr = (const void **)&valuePtr;
          values = (void **)v139;
        }
        else
        {
          p_valuePtr = (const void **)CFAllocatorAllocate(0, 8 * Count, 0);
          values = (void **)CFAllocatorAllocate(0, 8 * v10, 0);
        }
        v12 = CFArrayGetTypeID();
        v119 = a1;
        if (a3 && CFGetTypeID(a3) == v12)
          range = CFArrayGetCount(a3);
        else
          range = 0;
        v13 = values;
        v154 = 0u;
        v155 = 0u;
        v152 = 0u;
        v153 = 0u;
        v150 = 0u;
        v151 = 0u;
        v148 = 0u;
        v149 = 0u;
        v146 = 0u;
        v147 = 0u;
        v144 = 0u;
        v145 = 0u;
        v142 = 0u;
        v143 = 0u;
        valuePtr = 0u;
        v141 = 0u;
        memset(v139, 0, sizeof(v139));
        CFDictionaryGetKeysAndValues(a2, p_valuePtr, (const void **)values);
        if (v10 >= 1)
        {
          v14 = 0;
          v126 = (void *)kSCPropNetProxiesSupplementalMatchDomains;
          v121 = (void *)kSCPropNetProxiesSupplementalMatchOrders;
          v120 = (void *)kSCPropNetProxiesSupplementalMatchDomain;
          v122 = p_valuePtr;
          v123 = a2;
          while (1)
          {
            v15 = (const __CFDictionary *)v13[v14];
            v16 = CFDictionaryGetTypeID();
            if (v15)
            {
              if (CFGetTypeID(v15) == v16)
              {
                MutableCopy = (void *)CFDictionaryGetValue(v15, kSCEntNetProxies);
                v18 = CFDictionaryGetTypeID();
                if (MutableCopy)
                {
                  if (CFGetTypeID(MutableCopy) == v18)
                    break;
                }
              }
            }
LABEL_61:
            if (++v14 == v10)
              goto LABEL_65;
          }
          if (G_supplemental_proxies_follow_dns
            && CFBooleanGetValue((CFBooleanRef)G_supplemental_proxies_follow_dns)
            && (v137 = 0, value = 0, v136 = 0, !CFDictionaryContainsKey((CFDictionaryRef)MutableCopy, v126))
            && CFDictionaryGetValueIfPresent(v15, kSCEntNetDNS, (const void **)&value)
            && (v32 = value, v33 = CFDictionaryGetTypeID(), v32)
            && CFGetTypeID(v32) == v33
            && CFDictionaryGetValueIfPresent((CFDictionaryRef)value, kSCPropNetDNSSupplementalMatchDomains, (const void **)&v137)&& (v34 = v137, v35 = CFArrayGetTypeID(), v34)&& CFGetTypeID(v34) == v35)
          {
            MutableCopy = CFDictionaryCreateMutableCopy(0, 0, (CFDictionaryRef)MutableCopy);
            CFDictionarySetValue((CFMutableDictionaryRef)MutableCopy, v126, v137);
            if (CFDictionaryGetValueIfPresent((CFDictionaryRef)value, kSCPropNetDNSSupplementalMatchOrders, (const void **)&v136)&& (v36 = v136, v37 = CFArrayGetTypeID(), v36)&& CFGetTypeID(v36) == v37)
            {
              CFDictionarySetValue((CFMutableDictionaryRef)MutableCopy, v121, v136);
            }
            else
            {
              CFDictionaryRemoveValue((CFMutableDictionaryRef)MutableCopy, v121);
            }
            cf = MutableCopy;
          }
          else
          {
            cf = 0;
          }
          v19.length = range;
          v20 = 200 * v14 + 100000;
          if (range >= 1)
          {
            v19.location = 0;
            v21 = CFArrayContainsValue(a3, v19, p_valuePtr[v14]);
            v22 = 200 * v10;
            if (v21)
              v22 = 0;
            v20 += v22;
          }
          LODWORD(value) = v20;
          v23 = CFDictionaryGetValue((CFDictionaryRef)MutableCopy, v126);
          v24 = CFArrayGetTypeID();
          v13 = values;
          if (!v23)
            goto LABEL_59;
          if (CFGetTypeID(v23) != v24)
            goto LABEL_59;
          v25 = CFArrayGetCount((CFArrayRef)v23);
          if (!v25)
            goto LABEL_59;
          v26 = v25;
          v27 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)MutableCopy, v121);
          theArray = v27;
          if (!v27)
          {
            if (v26 >= 1)
              goto LABEL_45;
            goto LABEL_59;
          }
          v28 = v27;
          v29 = CFArrayGetTypeID();
          v30 = CFGetTypeID(v28) == v29;
          v13 = values;
          if (!v30 || (v31 = CFArrayGetCount(theArray), v26 < 1) || v26 != v31)
          {
LABEL_59:
            p_valuePtr = v122;
            a2 = v123;
            a3 = v132;
            if (cf)
              CFRelease(cf);
            goto LABEL_61;
          }
LABEL_45:
          v38 = 0;
          while (1)
          {
            ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v23, v38);
            v40 = CFStringGetTypeID();
            if (!ValueAtIndex || CFGetTypeID(ValueAtIndex) != v40)
              goto LABEL_58;
            v41 = CFDictionaryCreateMutableCopy(0, 0, (CFDictionaryRef)MutableCopy);
            v42 = (const void *)_SC_trimDomain(ValueAtIndex);
            if (v42)
            {
              v43 = v42;
              CFDictionarySetValue(v41, v120, v42);
              CFRelease(v43);
            }
            else
            {
              CFDictionaryRemoveValue(v41, v120);
            }
            if (!theArray)
              break;
            v44 = CFArrayGetValueAtIndex(theArray, v38);
            v45 = CFNumberGetTypeID();
            if (!v44 || CFGetTypeID(v44) != v45)
              goto LABEL_56;
            CFDictionarySetValue(v41, CFSTR("__MATCH_ORDER__"), v44);
LABEL_57:
            v13 = values;
            CFDictionaryRemoveValue(v41, v126);
            CFDictionaryRemoveValue(v41, v121);
            CFDictionaryRemoveValue(v41, kSCPropInterfaceName);
            sub_1000483D0(Mutable, v41);
            CFRelease(v41);
LABEL_58:
            if (v26 == ++v38)
              goto LABEL_59;
          }
          CFNumberGetTypeID();
LABEL_56:
          v46 = CFNumberCreate(0, kCFNumberIntType, &value);
          CFDictionarySetValue(v41, CFSTR("__MATCH_ORDER__"), v46);
          CFRelease(v46);
          LODWORD(value) = (_DWORD)value + 1;
          goto LABEL_57;
        }
LABEL_65:
        a1 = v119;
        if (p_valuePtr != (const void **)&valuePtr)
        {
          CFAllocatorDeallocate(0, p_valuePtr);
          CFAllocatorDeallocate(0, v13);
        }
      }
    }
  }
  LODWORD(valuePtr) = 200000;
  if (a1)
  {
    v47 = CFDictionaryCreateMutableCopy(0, 0, a1);
    CFDictionaryRemoveValue(v47, kSCPropInterfaceName);
    v48 = CFDictionaryGetValue(v47, CFSTR("__MATCH_ORDER__"));
    v49 = CFNumberGetTypeID();
    if (v48 && CFGetTypeID(v48) == v49 && CFNumberGetValue((CFNumberRef)v48, kCFNumberSInt32Type, &valuePtr))
    {
      v50 = 0;
      goto LABEL_74;
    }
  }
  else
  {
    v47 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    CFNumberGetTypeID();
  }
  LODWORD(valuePtr) = 200000;
  v51 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(v47, CFSTR("__MATCH_ORDER__"), v51);
  CFRelease(v51);
  v50 = 1;
LABEL_74:
  sub_1000483D0(Mutable, v47);
  CFRelease(v47);
  v52 = CFArrayGetCount(Mutable);
  v53 = v52;
  if (v52 < 2)
  {
    if (v52 != 1)
      goto LABEL_83;
  }
  else
  {
    v156.location = 0;
    v156.length = v52;
    CFArraySortValues(Mutable, v156, (CFComparatorFunction)sub_100047FF8, 0);
  }
  v54 = (const void *)kSCPropNetProxiesSupplementalMatchDomain;
  v55 = v53 - 1;
  do
  {
    v56 = (const __CFDictionary *)CFArrayGetValueAtIndex(Mutable, v55);
    v57 = v56;
    if (v55 && !CFDictionaryContainsKey(v56, v54))
    {
      CFArrayRemoveValueAtIndex(Mutable, v55);
      --v53;
    }
    else
    {
      v58 = CFDictionaryCreateMutableCopy(0, 0, v57);
      CFDictionaryRemoveValue(v58, CFSTR("__MATCH_ORDER__"));
      CFDictionaryRemoveValue(v58, CFSTR("__ORDER__"));
      CFArraySetValueAtIndex(Mutable, v55, v58);
      CFRelease(v58);
    }
    v59 = v55-- + 1;
  }
  while (v59 > 1);
LABEL_83:
  v60 = (const __CFDictionary *)CFArrayGetValueAtIndex(Mutable, 0);
  v61 = CFDictionaryCreateMutableCopy(0, 0, v60);
  if (v53 > 1)
    v62 = v50;
  else
    v62 = 0;
  if (v62 == 1)
  {
    v63 = (const __CFDictionary *)CFArrayGetValueAtIndex(Mutable, 1);
    if (CFDictionaryContainsKey(v63, kSCPropNetProxiesSupplementalMatchDomain))
      CFDictionaryRemoveValue(v61, CFSTR("__MATCH_ORDER__"));
  }
  CFArraySetValueAtIndex(Mutable, 0, v61);
  CFRelease(v61);
  if (v53 < 1)
  {
    v66 = 0;
    goto LABEL_162;
  }
  v64 = (const __CFDictionary *)CFArrayGetValueAtIndex(Mutable, 0);
  v65 = (const void *)kSCPropNetProxiesSupplementalMatchDomain;
  if (CFDictionaryContainsKey(v64, kSCPropNetProxiesSupplementalMatchDomain))
  {
    v66 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  }
  else
  {
    v66 = CFDictionaryCreateMutableCopy(0, 0, v64);
    CFDictionaryRemoveValue(v66, kSCPropNetProxiesSupplementalMatchDomains);
    CFDictionaryRemoveValue(v66, kSCPropNetProxiesSupplementalMatchOrders);
  }
  v67 = CFDictionaryGetTypeID();
  if (!a2 || CFGetTypeID(a2) != v67 || (v68 = CFDictionaryGetCount(a2)) == 0)
  {
    v73 = 0;
    goto LABEL_102;
  }
  v69 = v68;
  v70 = CFArrayGetTypeID();
  if (!v132 || CFGetTypeID(v132) != v70)
  {
    v71 = 0;
    goto LABEL_164;
  }
  v71 = CFArrayGetCount(v132);
  if (v71 < 1)
  {
LABEL_164:
    v72 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    goto LABEL_165;
  }
  v72 = CFArrayCreateMutableCopy(0, 0, v132);
LABEL_165:
  v73 = v72;
  v154 = 0u;
  v155 = 0u;
  v152 = 0u;
  v153 = 0u;
  v150 = 0u;
  v151 = 0u;
  v148 = 0u;
  v149 = 0u;
  v146 = 0u;
  v147 = 0u;
  v144 = 0u;
  v145 = 0u;
  v142 = 0u;
  v143 = 0u;
  valuePtr = 0u;
  v141 = 0u;
  if (v69 >= 33)
  {
    v115 = (const void **)CFAllocatorAllocate(0, 8 * v69, 0);
    CFDictionaryGetKeysAndValues(a2, v115, 0);
    goto LABEL_168;
  }
  v115 = (const void **)&valuePtr;
  CFDictionaryGetKeysAndValues(a2, (const void **)&valuePtr, 0);
  if (v69 >= 1)
  {
LABEL_168:
    for (i = 0; i != v69; ++i)
    {
      v117 = v115[i];
      v157.location = 0;
      v157.length = v71;
      if (!CFArrayContainsValue(v73, v157, v117))
      {
        CFArrayAppendValue(v73, v117);
        ++v71;
      }
    }
    if (v115 != (const void **)&valuePtr)
      CFAllocatorDeallocate(0, v115);
  }
LABEL_102:
  v74 = CFArrayGetTypeID();
  if (Mutable)
  {
    if (CFGetTypeID(Mutable) == v74)
    {
      v75 = CFArrayGetCount(Mutable);
      if (v75 >= 1)
      {
        v76 = v75;
        v77 = a2;
        v78 = 0;
        for (j = 0; j != v76; ++j)
        {
          v80 = (const __CFDictionary *)CFArrayGetValueAtIndex(Mutable, j);
          if (v80)
          {
            v81 = v80;
            if (CFDictionaryContainsKey(v80, v65))
            {
              if (!v78)
                v78 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
              CFArrayAppendValue(v78, v81);
            }
          }
        }
        a2 = v77;
        if (v78)
        {
          CFDictionarySetValue(v66, kSCPropNetProxiesSupplemental, v78);
          CFRelease(v78);
        }
      }
    }
  }
  v82 = CFArrayGetTypeID();
  if (v73)
  {
    if (CFGetTypeID(v73) == v82)
    {
      v83 = CFArrayGetCount(v73);
      if (v83 >= 1)
      {
        v84 = v83;
        v85 = 0;
        v86 = 0;
        valuesa = (void **)kSCPropNetProxiesSupplementalMatchOrders;
        key = (void *)kSCPropNetProxiesSupplementalMatchDomains;
        do
        {
          v87 = CFArrayGetValueAtIndex(v73, v85);
          v88 = (const __CFDictionary *)CFDictionaryGetValue(a2, v87);
          v89 = CFDictionaryGetTypeID();
          if (v88)
          {
            if (CFGetTypeID(v88) == v89)
            {
              v90 = (const __CFDictionary *)CFDictionaryGetValue(v88, kSCEntNetProxies);
              v91 = CFDictionaryGetTypeID();
              if (v90)
              {
                if (CFGetTypeID(v90) == v91)
                {
                  v92 = a2;
                  v93 = CFDictionaryGetValue(v90, kSCPropInterfaceName);
                  if (v93)
                  {
                    v94 = v93;
                    if ((!v86 || !CFDictionaryContainsKey(v86, v93))
                      && _SC_cfstring_to_cstring(v94, &valuePtr, 16, 1536)
                      && sub_10002D8E0((uint64_t)&valuePtr))
                    {
                      CFRetain(v94);
                      v95 = CFDictionaryCreateMutableCopy(0, 0, v90);
                      CFDictionaryRemoveValue(v95, key);
                      CFDictionaryRemoveValue(v95, valuesa);
                      CFDictionaryRemoveValue(v95, kSCPropInterfaceName);
                      if (!v86)
                        v86 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                      CFDictionarySetValue(v86, v94, v95);
                      CFRelease(v95);
                      CFRelease(v94);
                    }
                  }
                  a2 = v92;
                }
              }
            }
          }
          ++v85;
        }
        while (v84 != v85);
        if (v86)
        {
          CFDictionarySetValue(v66, kSCPropNetProxiesScoped, v86);
          CFRelease(v86);
        }
      }
    }
  }
  v96 = CFDictionaryGetTypeID();
  if (a4 && CFGetTypeID(a4) == v96)
  {
    v97 = CFArrayGetTypeID();
    if (!v73)
      goto LABEL_162;
    if (CFGetTypeID(v73) != v97)
      goto LABEL_161;
    v98 = CFArrayGetCount(v73);
    if (v98 < 1)
      goto LABEL_161;
    v99 = v98;
    v100 = 0;
    v133 = 0;
    v135 = (CFTypeRef)kSCPropNetProxiesServiceSpecific;
    valuesb = (void **)kSCPropNetProxiesSupplementalMatchDomains;
    v127 = (void *)kSCPropNetProxiesSupplementalMatchOrders;
    do
    {
      LODWORD(valuePtr) = 0;
      v101 = CFArrayGetValueAtIndex(v73, v100);
      v102 = (const __CFDictionary *)CFDictionaryGetValue(a2, v101);
      v103 = CFDictionaryGetTypeID();
      if (v102 && CFGetTypeID(v102) == v103)
      {
        v104 = a2;
        v105 = (const __CFDictionary *)CFDictionaryGetValue(v102, kSCEntNetProxies);
        v106 = CFDictionaryGetTypeID();
        if (v105)
        {
          if (CFGetTypeID(v105) == v106)
          {
            v107 = (const __CFNumber *)CFDictionaryGetValue(v105, v135);
            v108 = CFNumberGetTypeID();
            if (v107)
            {
              if (CFGetTypeID(v107) == v108)
              {
                if (CFNumberGetValue(v107, kCFNumberIntType, &valuePtr))
                {
                  if ((_DWORD)valuePtr)
                  {
                    v109 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, CFSTR("%d"), valuePtr);
                    if (v109)
                    {
                      v110 = v109;
                      v111 = v133;
                      if (v133 && CFDictionaryContainsKey(v133, v109))
                      {
                        v112 = (__CFDictionary *)v110;
                      }
                      else
                      {
                        v113 = CFDictionaryCreateMutableCopy(0, 0, v105);
                        CFDictionaryRemoveValue(v113, valuesb);
                        CFDictionaryRemoveValue(v113, v127);
                        CFDictionaryRemoveValue(v113, v135);
                        if (!v133)
                          v111 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                        v133 = v111;
                        CFDictionarySetValue(v111, v110, v113);
                        CFRelease(v110);
                        v112 = v113;
                      }
                      CFRelease(v112);
                    }
                  }
                }
              }
            }
          }
        }
        a2 = v104;
      }
      ++v100;
    }
    while (v99 != v100);
    if (v133)
    {
      CFDictionarySetValue(v66, kSCPropNetProxiesServices, v133);
      CFRelease(v133);
    }
  }
  if (v73)
LABEL_161:
    CFRelease(v73);
LABEL_162:
  CFRelease(Mutable);
  return v66;
}

uint64_t sub_100047FF8(const __CFDictionary *a1, const __CFDictionary *a2)
{
  const void *v4;
  const __CFString *v5;
  const __CFString *v6;
  const __CFString *v7;
  int HasSuffix;
  const __CFArray *ArrayBySeparatingStrings;
  CFIndex Count;
  const __CFArray *v11;
  CFIndex v12;
  CFIndex v13;
  const __CFString *ValueAtIndex;
  const __CFString *v15;
  CFComparisonResult v16;
  unsigned int v17;
  void *v18;
  CFTypeID TypeID;
  const __CFNumber *v20;
  CFTypeID v21;
  BOOL v22;
  void *v23;
  CFTypeID v24;
  CFNumberRef v25;
  CFTypeID v26;
  unsigned int v28;
  unsigned int valuePtr;
  CFNumberRef number;
  void *value;

  v4 = (const void *)kSCPropNetProxiesSupplementalMatchDomain;
  v5 = (const __CFString *)CFDictionaryGetValue(a1, kSCPropNetProxiesSupplementalMatchDomain);
  v6 = (const __CFString *)CFDictionaryGetValue(a2, v4);
  v7 = v6;
  if (v5)
  {
    if (v6)
    {
      HasSuffix = CFStringHasSuffix(v5, CFSTR(".arpa"));
      if (HasSuffix == CFStringHasSuffix(v7, CFSTR(".arpa")))
      {
        ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, v5, CFSTR("."));
        Count = CFArrayGetCount(ArrayBySeparatingStrings);
        v11 = CFStringCreateArrayBySeparatingStrings(0, v7, CFSTR("."));
        v12 = CFArrayGetCount(v11);
        while (Count >= 1)
        {
          v13 = v12 - 1;
          if (v12 < 1)
            break;
          ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, Count - 1);
          v15 = (const __CFString *)CFArrayGetValueAtIndex(v11, v13);
          v16 = CFStringCompare(ValueAtIndex, v15, 1uLL);
          --Count;
          v12 = v13;
          if (v16)
            goto LABEL_44;
        }
        if (Count <= v12)
        {
          if (Count < v12)
          {
            v16 = kCFCompareGreaterThan;
          }
          else
          {
            v17 = 200000;
            v28 = 200000;
            valuePtr = 200000;
            v18 = (void *)CFDictionaryGetValue(a1, CFSTR("__MATCH_ORDER__"));
            value = v18;
            TypeID = CFNumberGetTypeID();
            if (!v18
              || CFGetTypeID(v18) != TypeID
              || !CFNumberGetValue((CFNumberRef)v18, kCFNumberSInt32Type, &valuePtr))
            {
              valuePtr = 200000;
            }
            v20 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("__MATCH_ORDER__"));
            number = v20;
            v21 = CFNumberGetTypeID();
            if (v20 && CFGetTypeID(v20) == v21 && CFNumberGetValue(v20, kCFNumberSInt32Type, &v28))
              v17 = v28;
            else
              v28 = 200000;
            v22 = valuePtr >= v17;
            if (valuePtr != v17
              || CFDictionaryGetValueIfPresent(a1, CFSTR("__ORDER__"), (const void **)&value)
              && CFDictionaryGetValueIfPresent(a2, CFSTR("__ORDER__"), (const void **)&number)
              && (v23 = value, v24 = CFNumberGetTypeID(), v23)
              && CFGetTypeID(v23) == v24
              && (v25 = number, v26 = CFNumberGetTypeID(), v25)
              && CFGetTypeID(v25) == v26
              && CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr)
              && CFNumberGetValue(number, kCFNumberSInt32Type, &v28)
              && (v22 = valuePtr >= v28, valuePtr != v28))
            {
              if (v22)
                v16 = kCFCompareGreaterThan;
              else
                v16 = kCFCompareLessThan;
            }
            else
            {
              v16 = kCFCompareEqualTo;
            }
          }
        }
        else
        {
          v16 = kCFCompareLessThan;
        }
LABEL_44:
        if (ArrayBySeparatingStrings)
          CFRelease(ArrayBySeparatingStrings);
        if (v11)
          CFRelease(v11);
      }
      else if (HasSuffix)
      {
        return 1;
      }
      else
      {
        return -1;
      }
    }
    else
    {
      return 1;
    }
  }
  else if (v6)
  {
    return -1;
  }
  else
  {
    return 0;
  }
  return v16;
}

CFTypeID sub_100048314(__CFBundle *a1)
{
  CFDictionaryRef InfoDictionary;
  CFTypeID result;
  CFTypeID v3;
  const void *Value;
  CFTypeID v5;
  uint64_t v6;

  InfoDictionary = CFBundleGetInfoDictionary(a1);
  result = CFDictionaryGetTypeID();
  if (InfoDictionary)
  {
    v3 = result;
    result = CFGetTypeID(InfoDictionary);
    if (result == v3)
    {
      Value = CFDictionaryGetValue(InfoDictionary, CFSTR("SupplementalProxiesFollowSupplementalDNS"));
      G_supplemental_proxies_follow_dns = (uint64_t)Value;
      result = CFBooleanGetTypeID();
      if (Value)
      {
        v5 = result;
        result = CFGetTypeID(Value);
        if (result == v5)
          v6 = (uint64_t)Value;
        else
          v6 = 0;
      }
      else
      {
        v6 = 0;
      }
      G_supplemental_proxies_follow_dns = v6;
    }
  }
  return result;
}

void sub_1000483D0(const __CFArray *a1, __CFDictionary *a2)
{
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  const void *ValueAtIndex;
  CFNumberRef v8;
  CFIndex v9;

  Count = CFArrayGetCount(a1);
  v9 = Count;
  if (Count < 1)
  {
LABEL_5:
    v8 = CFNumberCreate(0, kCFNumberCFIndexType, &v9);
    CFDictionarySetValue(a2, CFSTR("__ORDER__"), v8);
    CFRelease(v8);
    CFArrayAppendValue(a1, a2);
  }
  else
  {
    v5 = Count;
    v6 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, v6);
      if (CFEqual(a2, ValueAtIndex))
        break;
      if (v5 == ++v6)
        goto LABEL_5;
    }
  }
}

void sub_1000484A8(NSObject *a1)
{
  __CFArray *Mutable;
  __CFArray *v3;
  CFStringRef NetworkServiceEntity;
  CFStringRef ComputerName;
  CFStringRef HostNames;
  uint32_t v7;
  uint32_t v8;
  os_log_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  _DWORD *v16;
  os_log_t v17;
  uint64_t v18;
  char *v19;
  os_log_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  const char *v38;
  int v39;
  int out_token;

  out_token = 0;
  qword_10007DE48 = (uint64_t)a1;
  qword_10007DE50 = (uint64_t)SCDynamicStoreCreate(0, CFSTR("set-hostname"), (SCDynamicStoreCallBack)sub_1000488B8, 0);
  if (!qword_10007DE50)
  {
    v20 = sub_100007594();
    v21 = _SC_syslog_os_log_mapping(3);
    if (!__SC_log_enabled(3, v20, v21))
      goto LABEL_15;
    v22 = _os_log_pack_size(12);
    v25 = (char *)&v39 - ((__chkstk_darwin(v22, v23, v24) + 15) & 0xFFFFFFFFFFFFFFF0);
    v26 = *__error();
    v27 = _os_log_pack_fill(v25, v22, v26, &_mh_execute_header, "SCDynamicStoreCreate() failed: %s");
LABEL_13:
    v36 = v27;
    v37 = SCError();
    v38 = SCErrorString(v37);
    *(_DWORD *)v36 = 136315138;
    *(_QWORD *)(v36 + 4) = v38;
    v17 = v20;
    v18 = v21;
    v19 = v25;
    goto LABEL_14;
  }
  Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  v3 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainState, kSCCompAnyRegex, kSCEntNetDHCP);
  CFArrayAppendValue(v3, NetworkServiceEntity);
  CFRelease(NetworkServiceEntity);
  ComputerName = SCDynamicStoreKeyCreateComputerName(0);
  CFArrayAppendValue(Mutable, ComputerName);
  CFRelease(ComputerName);
  HostNames = SCDynamicStoreKeyCreateHostNames(0);
  CFArrayAppendValue(Mutable, HostNames);
  CFRelease(HostNames);
  LODWORD(HostNames) = SCDynamicStoreSetNotificationKeys((SCDynamicStoreRef)qword_10007DE50, Mutable, v3);
  CFRelease(Mutable);
  CFRelease(v3);
  if (!(_DWORD)HostNames)
  {
    v20 = sub_100007594();
    v21 = _SC_syslog_os_log_mapping(3);
    if (!__SC_log_enabled(3, v20, v21))
      goto LABEL_15;
    v28 = _os_log_pack_size(12);
    v25 = (char *)&v39 - ((__chkstk_darwin(v28, v29, v30) + 15) & 0xFFFFFFFFFFFFFFF0);
    v31 = *__error();
    v27 = _os_log_pack_fill(v25, v28, v31, &_mh_execute_header, "SCDynamicStoreSetNotificationKeys() failed: %s");
    goto LABEL_13;
  }
  if (!SCDynamicStoreSetDispatchQueue((SCDynamicStoreRef)qword_10007DE50, a1))
  {
    v20 = sub_100007594();
    v21 = _SC_syslog_os_log_mapping(3);
    if (!__SC_log_enabled(3, v20, v21))
      goto LABEL_15;
    v32 = _os_log_pack_size(12);
    v25 = (char *)&v39 - ((__chkstk_darwin(v32, v33, v34) + 15) & 0xFFFFFFFFFFFFFFF0);
    v35 = *__error();
    v27 = _os_log_pack_fill(v25, v32, v35, &_mh_execute_header, "SCDynamicStoreSetDispatchQueue() failed: %s");
    goto LABEL_13;
  }
  v7 = notify_register_dispatch("com.apple.system.config.network_change", &out_token, a1, &stru_100076DB0);
  if (!v7)
    return;
  v8 = v7;
  v9 = sub_100007594();
  v10 = _SC_syslog_os_log_mapping(3);
  if (__SC_log_enabled(3, v9, v10))
  {
    v11 = _os_log_pack_size(8);
    v14 = (char *)&v39 - ((__chkstk_darwin(v11, v12, v13) + 15) & 0xFFFFFFFFFFFFFFF0);
    v15 = __error();
    v16 = (_DWORD *)_os_log_pack_fill(v14, v11, *v15, &_mh_execute_header, "notify_register_dispatch() failed: %u", v39);
    *v16 = 67109120;
    v16[1] = v8;
    v17 = v9;
    v18 = v10;
    v19 = v14;
LABEL_14:
    __SC_log_send(3, v17, v18, v19);
  }
LABEL_15:
  if (qword_10007DE50)
  {
    SCDynamicStoreSetDispatchQueue((SCDynamicStoreRef)qword_10007DE50, 0);
    CFRelease((CFTypeRef)qword_10007DE50);
    qword_10007DE50 = 0;
  }
}

void sub_1000488B8(const __SCDynamicStore *a1)
{
  const __CFString *ComputerName;
  const __CFDictionary *v3;
  CFTypeID TypeID;
  const __CFString *Value;
  CFTypeID v6;
  os_log_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  __CFString *v15;
  const __CFString *NetworkGlobalEntity;
  CFPropertyListRef v17;
  CFTypeID v18;
  CFTypeID v19;
  const __CFString *v20;
  os_log_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int *v27;
  uint64_t v28;
  const void *ValueAtIndex;
  os_log_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int *v36;
  uint64_t v37;
  __CFString *MutableCopy;
  __CFString *v39;
  const __CFString *NetworkServiceEntity;
  CFTypeID v41;
  const void *v42;
  CFTypeID v43;
  CFTypeID v44;
  uint64_t v45;

  if (qword_10007DE58)
    sub_100048E50();
  ComputerName = SCDynamicStoreKeyCreateComputerName(0);
  v3 = (const __CFDictionary *)SCDynamicStoreCopyValue(a1, ComputerName);
  CFRelease(ComputerName);
  if (v3)
  {
    TypeID = CFDictionaryGetTypeID();
    if (CFGetTypeID(v3) == TypeID)
    {
      Value = (const __CFString *)CFDictionaryGetValue(v3, kSCPropSystemHostName);
      v6 = CFStringGetTypeID();
      if (Value)
      {
        if (CFGetTypeID(Value) == v6)
        {
          CFRetain(Value);
          CFRelease(v3);
          v7 = sub_100007594();
          v8 = _SC_syslog_os_log_mapping(6);
          if (__SC_log_enabled(6, v7, v8))
          {
            v9 = _os_log_pack_size(12);
            v12 = (char *)&v45 - ((__chkstk_darwin(v9, v10, v11) + 15) & 0xFFFFFFFFFFFFFFF0);
            v13 = __error();
            v14 = _os_log_pack_fill(v12, v9, *v13, &_mh_execute_header, "hostname (prefs) = %@");
            *(_DWORD *)v14 = 138412290;
            *(_QWORD *)(v14 + 4) = Value;
            __SC_log_send(6, v7, v8, v12);
          }
          v15 = 0;
LABEL_35:
          sub_100048F7C((uint64_t)Value);
          goto LABEL_36;
        }
      }
    }
    CFRelease(v3);
  }
  NetworkGlobalEntity = SCDynamicStoreKeyCreateNetworkGlobalEntity(0, kSCDynamicStoreDomainState, kSCEntNetIPv4);
  v17 = SCDynamicStoreCopyValue(a1, NetworkGlobalEntity);
  CFRelease(NetworkGlobalEntity);
  if (!v17)
  {
    v15 = 0;
    goto LABEL_21;
  }
  v18 = CFDictionaryGetTypeID();
  if (CFGetTypeID(v17) != v18)
    goto LABEL_18;
  v15 = (__CFString *)CFDictionaryGetValue((CFDictionaryRef)v17, kSCDynamicStorePropNetPrimaryService);
  v19 = CFStringGetTypeID();
  if (!v15)
  {
LABEL_19:
    CFRelease(v17);
LABEL_21:
    ValueAtIndex = 0;
    goto LABEL_22;
  }
  if (CFGetTypeID(v15) != v19)
  {
LABEL_18:
    v15 = 0;
    goto LABEL_19;
  }
  CFRetain(v15);
  CFRelease(v17);
  v20 = (const __CFString *)sub_100033270(v15);
  if (v20)
  {
    Value = v20;
    v21 = sub_100007594();
    v22 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v21, v22))
    {
      v23 = _os_log_pack_size(12);
      v26 = (char *)&v45 - ((__chkstk_darwin(v23, v24, v25) + 15) & 0xFFFFFFFFFFFFFFF0);
      v27 = __error();
      v28 = _os_log_pack_fill(v26, v23, *v27, &_mh_execute_header, "hostname (DHCP) = %@");
      *(_DWORD *)v28 = 138412290;
      *(_QWORD *)(v28 + 4) = Value;
      __SC_log_send(6, v21, v22, v26);
    }
    goto LABEL_35;
  }
  NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainState, v15, kSCEntNetIPv4);
  v17 = SCDynamicStoreCopyValue(a1, NetworkServiceEntity);
  CFRelease(NetworkServiceEntity);
  if (!v17)
    goto LABEL_21;
  v41 = CFDictionaryGetTypeID();
  if (CFGetTypeID(v17) != v41)
    goto LABEL_19;
  v42 = CFDictionaryGetValue((CFDictionaryRef)v17, kSCPropNetIPv4Addresses);
  v43 = CFArrayGetTypeID();
  if (!v42)
    goto LABEL_19;
  if (CFGetTypeID(v42) != v43)
    goto LABEL_19;
  if (CFArrayGetCount((CFArrayRef)v42) < 1)
    goto LABEL_19;
  ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v42, 0);
  v44 = CFStringGetTypeID();
  if (!ValueAtIndex || CFGetTypeID(ValueAtIndex) != v44)
    goto LABEL_19;
  CFRetain(ValueAtIndex);
  CFRelease(v17);
  if (!sub_1000333A0(v15) && sub_1000493F0((uint64_t)ValueAtIndex))
  {
    Value = 0;
    goto LABEL_29;
  }
LABEL_22:
  Value = SCDynamicStoreCopyLocalHostName(a1);
  if (!Value)
  {
    sub_100048F7C((uint64_t)CFSTR("localhost"));
    if (!ValueAtIndex)
      goto LABEL_30;
    goto LABEL_29;
  }
  v30 = sub_100007594();
  v31 = _SC_syslog_os_log_mapping(6);
  if (__SC_log_enabled(6, v30, v31))
  {
    v32 = _os_log_pack_size(12);
    v35 = (char *)&v45 - ((__chkstk_darwin(v32, v33, v34) + 15) & 0xFFFFFFFFFFFFFFF0);
    v36 = __error();
    v37 = _os_log_pack_fill(v35, v32, *v36, &_mh_execute_header, "hostname (multicast DNS) = %@");
    *(_DWORD *)v37 = 138412290;
    *(_QWORD *)(v37 + 4) = Value;
    __SC_log_send(6, v30, v31, v35);
  }
  MutableCopy = CFStringCreateMutableCopy(0, 0, Value);
  if (!MutableCopy)
    sub_100065C14();
  v39 = MutableCopy;
  CFStringAppend(MutableCopy, CFSTR(".local"));
  sub_100048F7C((uint64_t)v39);
  CFRelease(v39);
  if (ValueAtIndex)
LABEL_29:
    CFRelease(ValueAtIndex);
LABEL_30:
  if (!Value)
  {
    if (!v15)
      return;
    goto LABEL_32;
  }
LABEL_36:
  CFRelease(Value);
  if (v15)
LABEL_32:
    CFRelease(v15);
}

void sub_100048E04(id a1, int a2)
{
  sub_1000488B8((const __SCDynamicStore *)qword_10007DE50);
}

void sub_100048E50()
{
  os_log_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int *v6;
  uint64_t v7;

  if (qword_10007DE58)
  {
    v0 = sub_100007594();
    v1 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v0, v1))
    {
      v2 = _os_log_pack_size(2);
      v5 = (char *)&v7 - ((__chkstk_darwin(v2, v3, v4) + 15) & 0xFFFFFFFFFFFFFFF0);
      v6 = __error();
      *(_WORD *)_os_log_pack_fill(v5, v2, *v6, &_mh_execute_header, "hostname: ptr query stop") = 0;
      __SC_log_send(6, v0, v1, v5);
    }
    SCNetworkReachabilitySetCallback((SCNetworkReachabilityRef)qword_10007DE58, 0, 0);
    SCNetworkReachabilitySetDispatchQueue((SCNetworkReachabilityRef)qword_10007DE58, 0);
    CFRelease((CFTypeRef)qword_10007DE58);
    qword_10007DE58 = 0;
  }
}

uint64_t sub_100048F7C(uint64_t result)
{
  uint64_t v1;
  os_log_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  int *v10;
  char *v11;
  os_log_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int *v18;
  int v19;
  int v20;
  os_log_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int *v27;
  uint64_t v28;
  size_t v29;
  int *v30;
  char *v31;
  os_log_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  int *v40;
  uint64_t v41;
  int v42;
  os_log_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  int *v49;
  _DWORD *v50;
  const char *v51;
  _QWORD v52[31];
  char v53;
  char v54[256];

  if (result)
  {
    v1 = result;
    if (gethostname(v54, 0x100uLL) == -1)
    {
      v2 = sub_100007594();
      v3 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v2, v3))
      {
        v4 = _os_log_pack_size(12);
        v7 = (char *)&v52[-1] - ((__chkstk_darwin(v4, v5, v6) + 15) & 0xFFFFFFFFFFFFFFF0);
        v8 = __error();
        v9 = _os_log_pack_fill(v7, v4, *v8, &_mh_execute_header, "gethostname() failed: %s", v51);
        v10 = __error();
        v11 = strerror(*v10);
        *(_DWORD *)v9 = 136315138;
        *(_QWORD *)(v9 + 4) = v11;
        __SC_log_send(3, v2, v3, v7);
      }
      v54[0] = 0;
    }
    if (!_SC_cfstring_to_cstring(v1, v52, 256, 134217984))
    {
      v12 = sub_100007594();
      v13 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v12, v13))
      {
        v14 = _os_log_pack_size(2);
        v17 = (char *)&v52[-1] - ((__chkstk_darwin(v14, v15, v16) + 15) & 0xFFFFFFFFFFFFFFF0);
        v18 = __error();
        *(_WORD *)_os_log_pack_fill(v17, v14, *v18, &_mh_execute_header, "could not convert [new] hostname") = 0;
        __SC_log_send(5, v12, v13, v17);
      }
      LOBYTE(v52[0]) = 0;
    }
    v54[255] = 0;
    v53 = 0;
    result = strcmp(v54, (const char *)v52);
    if ((_DWORD)result)
    {
      v19 = strlen((const char *)v52);
      v20 = sethostname((const char *)v52, v19);
      v21 = sub_100007594();
      if (v20)
      {
        v22 = _SC_syslog_os_log_mapping(3);
        result = __SC_log_enabled(3, v21, v22);
        if (!(_DWORD)result)
          return result;
        v23 = _os_log_pack_size(32);
        v26 = (char *)&v52[-1] - ((__chkstk_darwin(v23, v24, v25) + 15) & 0xFFFFFFFFFFFFFFF0);
        v27 = __error();
        v28 = _os_log_pack_fill(v26, v23, *v27, &_mh_execute_header, "sethostname(%s, %lu) failed: %s", v51, v52[0], (const char *)v52[1]);
        v29 = strlen((const char *)v52);
        v30 = __error();
        v31 = strerror(*v30);
        *(_DWORD *)v28 = 136315650;
        *(_QWORD *)(v28 + 4) = v52;
        *(_WORD *)(v28 + 12) = 2048;
        *(_QWORD *)(v28 + 14) = v29;
        *(_WORD *)(v28 + 22) = 2080;
        *(_QWORD *)(v28 + 24) = v31;
        v32 = v21;
        v33 = v22;
        v34 = v26;
        return __SC_log_send(3, v32, v33, v34);
      }
      v35 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v21, v35))
      {
        v36 = _os_log_pack_size(12);
        v39 = (char *)&v52[-1] - ((__chkstk_darwin(v36, v37, v38) + 15) & 0xFFFFFFFFFFFFFFF0);
        v40 = __error();
        v41 = _os_log_pack_fill(v39, v36, *v40, &_mh_execute_header, "setting hostname to \"%s\"", v51);
        *(_DWORD *)v41 = 136315138;
        *(_QWORD *)(v41 + 4) = v52;
        __SC_log_send(5, v21, v35, v39);
      }
      result = notify_post("com.apple.system.hostname");
      if ((_DWORD)result)
      {
        v42 = result;
        v43 = sub_100007594();
        v44 = _SC_syslog_os_log_mapping(3);
        result = __SC_log_enabled(3, v43, v44);
        if ((_DWORD)result)
        {
          v45 = _os_log_pack_size(8);
          v48 = (char *)&v52[-1] - ((__chkstk_darwin(v45, v46, v47) + 15) & 0xFFFFFFFFFFFFFFF0);
          v49 = __error();
          v50 = (_DWORD *)_os_log_pack_fill(v48, v45, *v49, &_mh_execute_header, "notify_post(com.apple.system.hostname) failed: error=%u", (_DWORD)v51);
          *v50 = 67109120;
          v50[1] = v42;
          v32 = v43;
          v33 = v44;
          v34 = v48;
          return __SC_log_send(3, v32, v33, v34);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1000493F0(uint64_t a1)
{
  __CFDictionary *Mutable;
  CFDataRef v2;
  uint64_t v3;
  os_log_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  UInt8 *v9;
  int *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  UInt8 *v16;
  uint64_t v17;
  _WORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  UInt8 v28[64];
  UInt8 bytes[8];
  uint64_t v30;
  uint64_t v31;
  int v32;

  *(_QWORD *)bytes = 0;
  v30 = 0;
  v32 = 0;
  v31 = 0;
  if (!_SC_cfstring_to_cstring(a1, v28, 64, 1536))
  {
    v4 = sub_100007594();
    v12 = _SC_syslog_os_log_mapping(3);
    result = __SC_log_enabled(3, v4, v12);
    if (!(_DWORD)result)
      return result;
    v13 = _os_log_pack_size(2);
    v16 = &v28[-((__chkstk_darwin(v13, v14, v15) + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
    v17 = *__error();
    v18 = (_WORD *)_os_log_pack_fill(v16, v13, v17, &_mh_execute_header, "could not convert [primary] address string");
LABEL_13:
    *v18 = 0;
    __SC_log_send(3, v4, v12, v16);
    return 0;
  }
  if (!_SC_string_to_sockaddr(v28, 0, bytes, 28))
  {
    v4 = sub_100007594();
    v12 = _SC_syslog_os_log_mapping(3);
    result = __SC_log_enabled(3, v4, v12);
    if (!(_DWORD)result)
      return result;
    v19 = _os_log_pack_size(2);
    v16 = &v28[-((__chkstk_darwin(v19, v20, v21) + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
    v22 = *__error();
    v18 = (_WORD *)_os_log_pack_fill(v16, v19, v22, &_mh_execute_header, "could not convert [primary] address");
    goto LABEL_13;
  }
  Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  v2 = CFDataCreate(0, bytes, bytes[0]);
  CFDictionarySetValue(Mutable, CFSTR("ptr-address"), v2);
  CFRelease(v2);
  qword_10007DE58 = SCNetworkReachabilityCreateWithOptions(0, Mutable);
  CFRelease(Mutable);
  v3 = qword_10007DE58;
  v4 = sub_100007594();
  if (!v3)
  {
    v12 = _SC_syslog_os_log_mapping(3);
    result = __SC_log_enabled(3, v4, v12);
    if (!(_DWORD)result)
      return result;
    v23 = _os_log_pack_size(2);
    v16 = &v28[-((__chkstk_darwin(v23, v24, v25) + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
    v26 = *__error();
    v18 = (_WORD *)_os_log_pack_fill(v16, v23, v26, &_mh_execute_header, "could not resolve [primary] address");
    goto LABEL_13;
  }
  v5 = _SC_syslog_os_log_mapping(6);
  if (__SC_log_enabled(6, v4, v5))
  {
    v6 = _os_log_pack_size(2);
    v9 = &v28[-((__chkstk_darwin(v6, v7, v8) + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
    v10 = __error();
    *(_WORD *)_os_log_pack_fill(v9, v6, *v10, &_mh_execute_header, "hostname: ptr query start") = 0;
    __SC_log_send(6, v4, v5, v9);
  }
  gettimeofday((timeval *)&qword_10007DE60, 0);
  SCNetworkReachabilitySetCallback((SCNetworkReachabilityRef)qword_10007DE58, (SCNetworkReachabilityCallBack)sub_100049758, 0);
  SCNetworkReachabilitySetDispatchQueue((SCNetworkReachabilityRef)qword_10007DE58, (dispatch_queue_t)qword_10007DE48);
  return 1;
}

void sub_100049758(uint64_t a1, char a2)
{
  int v4;
  __darwin_time_t v5;
  os_log_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  const __CFArray *v14;
  const __CFArray *v15;
  CFIndex Count;
  os_log_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  const __CFString *v27;
  CFIndex v28;
  const __CFString *ValueAtIndex;
  os_log_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  int *v42;
  uint64_t v43;
  const __CFString *v44;
  const __CFString *v45;
  os_log_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  int *v52;
  uint64_t v53;
  const __CFString *v54;
  os_log_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  int *v62;
  uint64_t v63;
  __CFString *MutableCopy;
  __CFString *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  int *v70;
  uint64_t v71;
  timeval v72;

  v72.tv_sec = 0;
  *(_QWORD *)&v72.tv_usec = 0;
  gettimeofday(&v72, 0);
  if (v72.tv_usec >= dword_10007DE68)
    v4 = v72.tv_usec - dword_10007DE68;
  else
    v4 = v72.tv_usec - dword_10007DE68 + 1000000;
  v5 = v72.tv_sec - qword_10007DE60 + ((v72.tv_usec - dword_10007DE68) >> 31);
  if ((a2 & 2) == 0)
  {
    v6 = sub_100007594();
    v7 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v6, v7))
    {
      v8 = _os_log_pack_size(18);
      v11 = (char *)&v71 - ((__chkstk_darwin(v8, v9, v10) + 15) & 0xFFFFFFFFFFFFFFF0);
      v12 = __error();
      v13 = _os_log_pack_fill(v11, v8, *v12, &_mh_execute_header, "hostname: ptr query complete, host not found (query time = %ld.%3.3d)", v71, LODWORD(v72.tv_sec));
      *(_DWORD *)v13 = 134218240;
      *(_QWORD *)(v13 + 4) = v5;
      *(_WORD *)(v13 + 12) = 1024;
      *(_DWORD *)(v13 + 14) = v4 / 1000;
      __SC_log_send(6, v6, v7, v11);
    }
LABEL_31:
    v54 = SCDynamicStoreCopyLocalHostName((SCDynamicStoreRef)qword_10007DE50);
    v55 = sub_100007594();
    v56 = _SC_syslog_os_log_mapping(6);
    v57 = __SC_log_enabled(6, v55, v56);
    if (v54)
    {
      if (v57)
      {
        v58 = _os_log_pack_size(12);
        v61 = (char *)&v71 - ((__chkstk_darwin(v58, v59, v60) + 15) & 0xFFFFFFFFFFFFFFF0);
        v62 = __error();
        v63 = _os_log_pack_fill(v61, v58, *v62, &_mh_execute_header, "hostname (multicast DNS) = %@");
        *(_DWORD *)v63 = 138412290;
        *(_QWORD *)(v63 + 4) = v54;
        __SC_log_send(6, v55, v56, v61);
      }
      MutableCopy = CFStringCreateMutableCopy(0, 0, v54);
      if (!MutableCopy)
        sub_100065C3C();
      v65 = MutableCopy;
      CFStringAppend(MutableCopy, CFSTR(".local"));
      sub_100048F7C((uint64_t)v65);
      CFRelease(v65);
      CFRelease(v54);
    }
    else
    {
      if (v57)
      {
        v66 = _os_log_pack_size(2);
        v69 = (char *)&v71 - ((__chkstk_darwin(v66, v67, v68) + 15) & 0xFFFFFFFFFFFFFFF0);
        v70 = __error();
        *(_WORD *)_os_log_pack_fill(v69, v66, *v70, &_mh_execute_header, "hostname (localhost)") = 0;
        __SC_log_send(6, v55, v56, v69);
      }
      sub_100048F7C((uint64_t)CFSTR("localhost"));
    }
LABEL_39:
    sub_100048E50();
    return;
  }
  HIDWORD(v71) = 0;
  v14 = (const __CFArray *)SCNetworkReachabilityCopyResolvedAddress(a1, (char *)&v71 + 4);
  if (v14)
  {
    v15 = v14;
    Count = CFArrayGetCount(v14);
    v17 = sub_100007594();
    v18 = _SC_syslog_os_log_mapping(6);
    v19 = __SC_log_enabled(6, v17, v18);
    if (Count < 1)
    {
      if (v19)
      {
        v38 = _os_log_pack_size(18);
        v41 = (char *)&v71 - ((__chkstk_darwin(v38, v39, v40) + 15) & 0xFFFFFFFFFFFFFFF0);
        v42 = __error();
        v43 = _os_log_pack_fill(v41, v38, *v42, &_mh_execute_header, "hostname: ptr query complete w/no hosts (query time = %ld.%3.3d)", v71, LODWORD(v72.tv_sec));
        *(_DWORD *)v43 = 134218240;
        *(_QWORD *)(v43 + 4) = v5;
        *(_WORD *)(v43 + 12) = 1024;
        *(_DWORD *)(v43 + 14) = v4 / 1000;
        __SC_log_send(6, v17, v18, v41);
      }
      CFRelease(v15);
      goto LABEL_31;
    }
    if (v19)
    {
      v20 = _os_log_pack_size(18);
      v23 = (char *)&v71 - ((__chkstk_darwin(v20, v21, v22) + 15) & 0xFFFFFFFFFFFFFFF0);
      v24 = __error();
      v25 = _os_log_pack_fill(v23, v20, *v24, &_mh_execute_header, "hostname: ptr query complete (query time = %ld.%3.3d)", v71, LODWORD(v72.tv_sec));
      *(_DWORD *)v25 = 134218240;
      *(_QWORD *)(v25 + 4) = v5;
      *(_WORD *)(v25 + 12) = 1024;
      *(_DWORD *)(v25 + 14) = v4 / 1000;
      __SC_log_send(6, v17, v18, v23);
    }
    v26 = _SCPreferencesCopyComputerName(0, 0);
    if (v26)
    {
      v27 = (const __CFString *)v26;
      if (_SC_CFStringIsValidDNSName())
      {
        if ((unint64_t)CFStringFind(v27, CFSTR("."), 0).length)
        {
          v28 = 0;
          while (1)
          {
            ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v15, v28);
            if (CFStringCompare(ValueAtIndex, v27, 1uLL) == kCFCompareEqualTo)
              break;
            if (Count == ++v28)
              goto LABEL_17;
          }
        }
        else
        {
          ValueAtIndex = sub_100049E74(v15, Count, v27);
        }
        CFRelease(v27);
        if (ValueAtIndex)
        {
LABEL_28:
          v46 = sub_100007594();
          v47 = _SC_syslog_os_log_mapping(6);
          if (__SC_log_enabled(6, v46, v47))
          {
            v48 = _os_log_pack_size(12);
            v51 = (char *)&v71 - ((__chkstk_darwin(v48, v49, v50) + 15) & 0xFFFFFFFFFFFFFFF0);
            v52 = __error();
            v53 = _os_log_pack_fill(v51, v48, *v52, &_mh_execute_header, "hostname (reverse DNS query) = %@");
            *(_DWORD *)v53 = 138412290;
            *(_QWORD *)(v53 + 4) = ValueAtIndex;
            __SC_log_send(6, v46, v47, v51);
          }
          sub_100048F7C((uint64_t)ValueAtIndex);
          CFRelease(v15);
          if (ValueAtIndex)
            goto LABEL_39;
          goto LABEL_31;
        }
      }
      else
      {
LABEL_17:
        CFRelease(v27);
      }
    }
    v44 = SCDynamicStoreCopyLocalHostName((SCDynamicStoreRef)qword_10007DE50);
    if (!v44 || (v45 = v44, ValueAtIndex = sub_100049E74(v15, Count, v44), CFRelease(v45), !ValueAtIndex))
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v15, 0);
    goto LABEL_28;
  }
  v30 = sub_100007594();
  v31 = _SC_syslog_os_log_mapping(6);
  if (__SC_log_enabled(6, v30, v31))
  {
    v32 = _os_log_pack_size(18);
    v35 = (char *)&v71 - ((__chkstk_darwin(v32, v33, v34) + 15) & 0xFFFFFFFFFFFFFFF0);
    v36 = __error();
    v37 = _os_log_pack_fill(v35, v32, *v36, &_mh_execute_header, "hostname: ptr query reply w/no hosts (query time = %ld.%3.3d)", v71, LODWORD(v72.tv_sec));
    *(_DWORD *)v37 = 134218240;
    *(_QWORD *)(v37 + 4) = v5;
    *(_WORD *)(v37 + 12) = 1024;
    *(_DWORD *)(v37 + 14) = v4 / 1000;
    __SC_log_send(6, v30, v31, v35);
  }
}

const __CFString *sub_100049E74(CFArrayRef theArray, uint64_t a2, const __CFString *a3)
{
  CFIndex v6;
  const __CFString *ValueAtIndex;
  const __CFArray *ArrayBySeparatingStrings;
  const __CFArray *v9;
  const __CFString *v10;
  CFComparisonResult v11;

  if (a2 < 1)
    return 0;
  v6 = 0;
  while (1)
  {
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, v6);
    ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, ValueAtIndex, CFSTR("."));
    if (ArrayBySeparatingStrings)
    {
      v9 = ArrayBySeparatingStrings;
      v10 = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 0);
      v11 = CFStringCompare(v10, a3, 1uLL);
      CFRelease(v9);
      if (v11 == kCFCompareEqualTo)
        break;
    }
    if (a2 == ++v6)
      return 0;
  }
  return ValueAtIndex;
}

uint64_t sub_100049F58(CFStringRef theString, _QWORD *a2)
{
  const __CFArray *ArrayBySeparatingStrings;
  const void *ValueAtIndex;
  uint64_t v6;

  if (qword_10007DE78 != -1)
    dispatch_once(&qword_10007DE78, &stru_100076DF0);
  *a2 = 0;
  if (!CFStringHasPrefix(theString, (CFStringRef)qword_10007DE70)
    || !CFStringHasSuffix(theString, kSCEntNetNAT64PrefixRequest))
  {
    return 0;
  }
  ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, theString, CFSTR("/"));
  if (CFArrayGetCount(ArrayBySeparatingStrings) == 5)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 3);
    *a2 = ValueAtIndex;
    CFRetain(ValueAtIndex);
    v6 = 1;
  }
  else
  {
    v6 = 0;
  }
  CFRelease(ArrayBySeparatingStrings);
  return v6;
}

void sub_10004A05C(id a1)
{
  qword_10007DE70 = (uint64_t)SCDynamicStoreKeyCreateNetworkInterface(0, kSCDynamicStoreDomainState);
}

void sub_10004A0BC(__CFArray *a1)
{
  CFStringRef NetworkInterfaceEntity;

  NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, kSCCompAnyRegex, kSCEntNetNAT64PrefixRequest);
  CFArrayAppendValue(a1, NetworkInterfaceEntity);
  CFRelease(NetworkInterfaceEntity);
}

void sub_10004A14C(CFTypeRef cf, CFTypeRef a2, CFTypeRef a3)
{
  _QWORD v6[7];

  if (cf)
    CFRetain(cf);
  if (a2)
    CFRetain(a2);
  if (a3)
    CFRetain(a3);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000;
  v6[2] = sub_10004A23C;
  v6[3] = &unk_100076E10;
  v6[4] = cf;
  v6[5] = a2;
  v6[6] = a3;
  if (qword_10007DE88 != -1)
    dispatch_once(&qword_10007DE88, &stru_100076E90);
  dispatch_async((dispatch_queue_t)qword_10007DE90, v6);
}

void sub_10004A23C(_QWORD *a1)
{
  os_log_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const __CFSet *v13;
  const __CFSet *v14;
  const __CFSet *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  uint64_t v19;

  v2 = sub_100007594();
  v3 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v2, v3))
  {
    v4 = _os_log_pack_size(32);
    v7 = (char *)&v19 - ((__chkstk_darwin(v4, v5, v6) + 15) & 0xFFFFFFFFFFFFFFF0);
    v8 = __error();
    v9 = _os_log_pack_fill(v7, v4, *v8, &_mh_execute_header, "NAT64 requests %@ updates %@ cancellations %@");
    v10 = a1[4];
    v11 = a1[5];
    v12 = a1[6];
    *(_DWORD *)v9 = 138412802;
    *(_QWORD *)(v9 + 4) = v10;
    *(_WORD *)(v9 + 12) = 2112;
    *(_QWORD *)(v9 + 14) = v11;
    *(_WORD *)(v9 + 22) = 2112;
    *(_QWORD *)(v9 + 24) = v12;
    __SC_log_send(7, v2, v3, v7);
  }
  v13 = (const __CFSet *)a1[4];
  v14 = (const __CFSet *)a1[5];
  v15 = (const __CFSet *)a1[6];
  if (v15)
    CFSetApplyFunction(v15, (CFSetApplierFunction)sub_10004A3D0, 0);
  if (v14)
    CFSetApplyFunction(v14, (CFSetApplierFunction)sub_10004A5F0, 0);
  if (v13)
    CFSetApplyFunction(v13, (CFSetApplierFunction)sub_10004A814, 0);
  v16 = (const void *)a1[4];
  if (v16)
    CFRelease(v16);
  v17 = (const void *)a1[5];
  if (v17)
    CFRelease(v17);
  v18 = (const void *)a1[6];
  if (v18)
    CFRelease(v18);
}

void sub_10004A3D0(CFTypeRef cf1)
{
  uint64_t *v2;
  os_log_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  os_log_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int *v18;
  uint64_t v19;
  const char *v20[2];

  v2 = &qword_10007DE80;
  while (1)
  {
    v2 = (uint64_t *)*v2;
    if (!v2)
      break;
    if (CFEqual(cf1, (CFTypeRef)v2[4]))
    {
      v3 = sub_100007594();
      v4 = _SC_syslog_os_log_mapping(7);
      if (__SC_log_enabled(7, v3, v4))
      {
        v5 = _os_log_pack_size(22);
        v8 = (char *)v20 - ((__chkstk_darwin(v5, v6, v7) + 15) & 0xFFFFFFFFFFFFFFF0);
        v9 = __error();
        v10 = _os_log_pack_fill(v8, v5, *v9, &_mh_execute_header, "%s %s: removing NAT64 request", v20[0], v20[1]);
        v11 = v2[3];
        *(_DWORD *)v10 = 136315394;
        *(_QWORD *)(v10 + 4) = v11;
        *(_WORD *)(v10 + 12) = 2080;
        *(_QWORD *)(v10 + 14) = "_nat64_process_cancel_request";
        __SC_log_send(7, v3, v4, v8);
      }
      sub_10004A8BC(v2[3], 0, 0);
      sub_10004AE28((uint64_t)v2);
      sub_10004AF78((uint64_t)v2);
      return;
    }
  }
  v12 = sub_100007594();
  v13 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v12, v13))
  {
    v14 = _os_log_pack_size(22);
    v17 = (char *)v20 - ((__chkstk_darwin(v14, v15, v16) + 15) & 0xFFFFFFFFFFFFFFF0);
    v18 = __error();
    v19 = _os_log_pack_fill(v17, v14, *v18, &_mh_execute_header, "%@ %s: no active NAT64 request");
    *(_DWORD *)v19 = 138412546;
    *(_QWORD *)(v19 + 4) = cf1;
    *(_WORD *)(v19 + 12) = 2080;
    *(_QWORD *)(v19 + 14) = "_nat64_process_cancel_request";
    __SC_log_send(7, v12, v13, v17);
  }
}

_QWORD *sub_10004A5F0(CFTypeRef cf1)
{
  uint64_t *v2;
  os_log_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  _QWORD *result;
  os_log_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;

  v2 = &qword_10007DE80;
  while (1)
  {
    v2 = (uint64_t *)*v2;
    if (!v2)
      break;
    if (CFEqual(cf1, (CFTypeRef)v2[4]))
    {
      v3 = sub_100007594();
      v4 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v3, v4))
      {
        v5 = _os_log_pack_size(22);
        v8 = (char *)&v20 - ((__chkstk_darwin(v5, v6, v7) + 15) & 0xFFFFFFFFFFFFFFF0);
        v9 = __error();
        v10 = _os_log_pack_fill(v8, v5, *v9, &_mh_execute_header, "%@: %s");
        *(_DWORD *)v10 = 138412546;
        *(_QWORD *)(v10 + 4) = cf1;
        *(_WORD *)(v10 + 12) = 2080;
        *(_QWORD *)(v10 + 14) = "_nat64_process_prefix_update";
        __SC_log_send(6, v3, v4, v8);
      }
      sub_10004AE28((uint64_t)v2);
      sub_10004AF78((uint64_t)v2);
      result = sub_10004B3C4(cf1);
      if (result)
        return (_QWORD *)sub_10004B700((uint64_t)result);
      return result;
    }
  }
  v12 = sub_100007594();
  v13 = _SC_syslog_os_log_mapping(7);
  result = (_QWORD *)__SC_log_enabled(7, v12, v13);
  if ((_DWORD)result)
  {
    v14 = _os_log_pack_size(22);
    v17 = (char *)&v20 - ((__chkstk_darwin(v14, v15, v16) + 15) & 0xFFFFFFFFFFFFFFF0);
    v18 = __error();
    v19 = _os_log_pack_fill(v17, v14, *v18, &_mh_execute_header, "%@ %s: no existing request");
    *(_DWORD *)v19 = 138412546;
    *(_QWORD *)(v19 + 4) = cf1;
    *(_WORD *)(v19 + 12) = 2080;
    *(_QWORD *)(v19 + 14) = "_nat64_process_prefix_update";
    return (_QWORD *)__SC_log_send(7, v12, v13, v17);
  }
  return result;
}

uint64_t sub_10004A814(CFTypeRef cf1)
{
  uint64_t *v2;
  uint64_t result;

  v2 = &qword_10007DE80;
  while (1)
  {
    v2 = (uint64_t *)*v2;
    if (!v2)
      break;
    result = CFEqual(cf1, (CFTypeRef)v2[4]);
    if ((_DWORD)result)
      return result;
  }
  result = (uint64_t)sub_10004B3C4(cf1);
  if (result)
    return sub_10004B700(result);
  return result;
}

int *sub_10004A8BC(uint64_t a1, int a2, uint64_t a3)
{
  __int128 v5;
  unint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  os_log_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  os_log_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int *v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  os_log_t v28;
  uint64_t v29;
  int *result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  os_log_t v39;
  uint64_t v40;
  char *v41;
  os_log_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  int *v48;
  uint64_t v49;
  int *v50;
  char *v51;
  os_log_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  int *v58;
  uint64_t v59;
  int *v60;
  char *v61;
  const char *v62;
  const char *v63;
  __int128 v64;
  uint64_t v65;
  _OWORD v66[3];
  __int16 v67;
  _OWORD v68[2];
  _OWORD v69[4];

  memset(v69, 0, sizeof(v69));
  memset(v68, 0, sizeof(v68));
  v65 = a1;
  __strlcpy_chk(v68, a1, 16, 16);
  HIDWORD(v63) = a2;
  if (a2)
  {
    if (a2 >= 1)
    {
      v6 = 0;
      v7 = HIDWORD(v63);
      v8 = v69;
      *(_QWORD *)&v5 = 136315650;
      v64 = v5;
      do
      {
        v67 = 0;
        memset(v66, 0, sizeof(v66));
        nw_nat64_write_prefix_to_string(a3, v66, 50);
        v9 = sub_100007594();
        v10 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v9, v10))
        {
          v11 = _os_log_pack_size(28);
          v14 = (char *)&v62 - ((__chkstk_darwin(v11, v12, v13) + 15) & 0xFFFFFFFFFFFFFFF0);
          v15 = __error();
          v16 = _os_log_pack_fill(v14, v11, *v15, &_mh_execute_header, "%s: nat64 prefix[%d] = %s", v62, (_DWORD)v63, (const char *)v64);
          *(_DWORD *)v16 = v64;
          *(_QWORD *)(v16 + 4) = v65;
          *(_WORD *)(v16 + 12) = 1024;
          *(_DWORD *)(v16 + 14) = v6;
          *(_WORD *)(v16 + 18) = 2080;
          *(_QWORD *)(v16 + 20) = v66;
          __SC_log_send(5, v9, v10, v14);
        }
        if (v6 <= 3)
        {
          *v8 = *(_DWORD *)a3;
          *((_QWORD *)v8 - 2) = *(_QWORD *)(a3 + 4);
          *(v8 - 2) = *(_DWORD *)(a3 + 12);
        }
        ++v6;
        a3 += 16;
        v8 += 5;
      }
      while (v7 != v6);
    }
  }
  else
  {
    v17 = sub_100007594();
    v18 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v17, v18))
    {
      v19 = _os_log_pack_size(12);
      v22 = (char *)&v62 - ((__chkstk_darwin(v19, v20, v21) + 15) & 0xFFFFFFFFFFFFFFF0);
      v23 = __error();
      v24 = _os_log_pack_fill(v22, v19, *v23, &_mh_execute_header, "%s: nat64 prefix unavailable", v62);
      *(_DWORD *)v24 = 136315138;
      *(_QWORD *)(v24 + 4) = v65;
      __SC_log_send(5, v17, v18, v22);
    }
  }
  v25 = socket(2, 2, 0);
  if (v25 == -1)
  {
    v42 = sub_100007594();
    v43 = _SC_syslog_os_log_mapping(3);
    result = (int *)__SC_log_enabled(3, v42, v43);
    if (!(_DWORD)result)
      return result;
    v44 = _os_log_pack_size(12);
    v47 = (char *)&v62 - ((__chkstk_darwin(v44, v45, v46) + 15) & 0xFFFFFFFFFFFFFFF0);
    v48 = __error();
    v49 = _os_log_pack_fill(v47, v44, *v48, &_mh_execute_header, "socket() failed: %s", v62);
    v50 = __error();
    v51 = strerror(*v50);
    *(_DWORD *)v49 = 136315138;
    *(_QWORD *)(v49 + 4) = v51;
    v38 = 3;
    v39 = v42;
    v40 = v43;
    v41 = v47;
    return (int *)__SC_log_send(v38, v39, v40, v41);
  }
  v26 = v25;
  v27 = ioctl(v25, 0xC06069C2uLL, v68);
  close(v26);
  if (v27 != -1)
  {
    v28 = sub_100007594();
    v29 = _SC_syslog_os_log_mapping(5);
    result = (int *)__SC_log_enabled(5, v28, v29);
    if (!(_DWORD)result)
      return result;
    v31 = _os_log_pack_size(22);
    v34 = (char *)&v62 - ((__chkstk_darwin(v31, v32, v33) + 15) & 0xFFFFFFFFFFFFFFF0);
    v35 = __error();
    v36 = _os_log_pack_fill(v34, v31, *v35, &_mh_execute_header, "%s: nat64 prefix%s updated", v62, v63);
    v37 = "es";
    if (HIDWORD(v63) == 1)
      v37 = "";
    *(_DWORD *)v36 = 136315394;
    *(_QWORD *)(v36 + 4) = v65;
    *(_WORD *)(v36 + 12) = 2080;
    *(_QWORD *)(v36 + 14) = v37;
    v38 = 5;
    v39 = v28;
    v40 = v29;
    v41 = v34;
    return (int *)__SC_log_send(v38, v39, v40, v41);
  }
  result = __error();
  if (HIDWORD(v63) || *result != 2)
  {
    v52 = sub_100007594();
    v53 = _SC_syslog_os_log_mapping(3);
    result = (int *)__SC_log_enabled(3, v52, v53);
    if ((_DWORD)result)
    {
      v54 = _os_log_pack_size(22);
      v57 = (char *)&v62 - ((__chkstk_darwin(v54, v55, v56) + 15) & 0xFFFFFFFFFFFFFFF0);
      v58 = __error();
      v59 = _os_log_pack_fill(v57, v54, *v58, &_mh_execute_header, "%s: ioctl(SIOCSIFNAT64PREFIX) failed: %s", v62, v63);
      v60 = __error();
      v61 = strerror(*v60);
      *(_DWORD *)v59 = 136315394;
      *(_QWORD *)(v59 + 4) = v65;
      *(_WORD *)(v59 + 12) = 2080;
      *(_QWORD *)(v59 + 14) = v61;
      v38 = 3;
      v39 = v52;
      v40 = v53;
      v41 = v57;
      return (int *)__SC_log_send(v38, v39, v40, v41);
    }
  }
  return result;
}

void sub_10004AE28(uint64_t a1)
{
  os_log_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  const char *v13[2];

  v2 = sub_100007594();
  v3 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v2, v3))
  {
    v4 = _os_log_pack_size(22);
    v7 = (char *)v13 - ((__chkstk_darwin(v4, v5, v6) + 15) & 0xFFFFFFFFFFFFFFF0);
    v8 = __error();
    v9 = _os_log_pack_fill(v7, v4, *v8, &_mh_execute_header, "%s: %s", v13[0], v13[1]);
    v10 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)v9 = 136315394;
    *(_QWORD *)(v9 + 4) = v10;
    *(_WORD *)(v9 + 12) = 2080;
    *(_QWORD *)(v9 + 14) = "NAT64PrefixRequestInvalidate";
    __SC_log_send(7, v2, v3, v7);
  }
  sub_10004B288(a1);
  v11 = *(_WORD *)(a1 + 48);
  if ((v11 & 1) != 0)
  {
    *(_WORD *)(a1 + 48) = v11 & 0xFFFE;
    v12 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      *(_QWORD *)(v12 + 8) = *(_QWORD *)(a1 + 8);
    **(_QWORD **)(a1 + 8) = v12;
  }
}

void sub_10004AF78(uint64_t a1)
{
  int v2;
  os_log_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  os_log_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  void *v23;
  os_log_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  int *v30;
  uint64_t v31;
  const char *v32;
  const char *v33;
  const void *v34;
  uint64_t v35;

  v2 = *(_DWORD *)(a1 + 44);
  if (v2)
  {
    *(_DWORD *)(a1 + 44) = v2 - 1;
    v3 = sub_100007594();
    v4 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v3, v4))
    {
      v5 = _os_log_pack_size(38);
      v8 = (char *)&v32 - ((__chkstk_darwin(v5, v6, v7) + 15) & 0xFFFFFFFFFFFFFFF0);
      v9 = __error();
      v10 = _os_log_pack_fill(v8, v5, *v9, &_mh_execute_header, "%s: %s %p %u", v32, v33, v34, v35);
      v11 = *(_QWORD *)(a1 + 24);
      v12 = *(_DWORD *)(a1 + 44);
      *(_DWORD *)v10 = 136315906;
      *(_QWORD *)(v10 + 4) = v11;
      *(_WORD *)(v10 + 12) = 2080;
      *(_QWORD *)(v10 + 14) = "NAT64PrefixRequestRelease";
      *(_WORD *)(v10 + 22) = 2048;
      *(_QWORD *)(v10 + 24) = a1;
      *(_WORD *)(v10 + 32) = 1024;
      *(_DWORD *)(v10 + 34) = v12;
      __SC_log_send(7, v3, v4, v8);
    }
    if (!*(_DWORD *)(a1 + 44))
    {
      sub_10004AE28(a1);
      v13 = sub_100007594();
      v14 = _SC_syslog_os_log_mapping(7);
      if (__SC_log_enabled(7, v13, v14))
      {
        v15 = _os_log_pack_size(32);
        v18 = (char *)&v32 - ((__chkstk_darwin(v15, v16, v17) + 15) & 0xFFFFFFFFFFFFFFF0);
        v19 = __error();
        v20 = _os_log_pack_fill(v18, v15, *v19, &_mh_execute_header, "%s %s: deallocate %p", v32, v33, v34);
        v21 = *(_QWORD *)(a1 + 24);
        *(_DWORD *)v20 = 136315650;
        *(_QWORD *)(v20 + 4) = v21;
        *(_WORD *)(v20 + 12) = 2080;
        *(_QWORD *)(v20 + 14) = "NAT64PrefixRequestRelease";
        *(_WORD *)(v20 + 22) = 2048;
        *(_QWORD *)(v20 + 24) = a1;
        __SC_log_send(7, v13, v14, v18);
      }
      v22 = *(const void **)(a1 + 32);
      if (v22)
      {
        CFRelease(v22);
        *(_QWORD *)(a1 + 32) = 0;
      }
      v23 = *(void **)(a1 + 24);
      if (v23)
        CFAllocatorDeallocate(0, v23);
      free((void *)a1);
    }
  }
  else
  {
    v24 = sub_100007594();
    v25 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v24, v25))
    {
      v26 = _os_log_pack_size(22);
      v29 = (char *)&v32 - ((__chkstk_darwin(v26, v27, v28) + 15) & 0xFFFFFFFFFFFFFFF0);
      v30 = __error();
      v31 = _os_log_pack_fill(v29, v26, *v30, &_mh_execute_header, "%s: retain count is zero %p", v32, v33);
      *(_DWORD *)v31 = 136315394;
      *(_QWORD *)(v31 + 4) = "NAT64PrefixRequestRelease";
      *(_WORD *)(v31 + 12) = 2048;
      *(_QWORD *)(v31 + 14) = a1;
      __SC_log_send(3, v24, v25, v29);
    }
  }
}

void sub_10004B288(uint64_t a1)
{
  os_log_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11[2];

  if (*(_QWORD *)(a1 + 16))
  {
    v2 = sub_100007594();
    v3 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v2, v3))
    {
      v4 = _os_log_pack_size(22);
      v7 = (char *)v11 - ((__chkstk_darwin(v4, v5, v6) + 15) & 0xFFFFFFFFFFFFFFF0);
      v8 = __error();
      v9 = _os_log_pack_fill(v7, v4, *v8, &_mh_execute_header, "%s: %s", v11[0], v11[1]);
      v10 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)v9 = 136315394;
      *(_QWORD *)(v9 + 4) = v10;
      *(_WORD *)(v9 + 12) = 2080;
      *(_QWORD *)(v9 + 14) = "NAT64PrefixRequestStopResolver";
      __SC_log_send(7, v2, v3, v7);
    }
    nw_nat64_prefixes_resolver_cancel(*(_QWORD *)(a1 + 16));
    nw_release(*(void **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
  }
}

_QWORD *sub_10004B3C4(const void *a1)
{
  uint64_t v2;
  void *v3;
  int v4;
  int v5;
  _QWORD *v6;
  os_log_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  CFTypeRef v15;
  uint64_t v16;
  os_log_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int *v23;
  uint64_t v24;
  os_log_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  int *v31;
  uint64_t v32;
  const char *v34;

  v2 = _SC_cfstring_to_cstring(a1, 0, 0, 1536);
  if (!v2)
  {
    v17 = sub_100007594();
    v18 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v17, v18))
    {
      v19 = _os_log_pack_size(12);
      v22 = (char *)&v34 - ((__chkstk_darwin(v19, v20, v21) + 15) & 0xFFFFFFFFFFFFFFF0);
      v23 = __error();
      v24 = _os_log_pack_fill(v22, v19, *v23, &_mh_execute_header, "%@: could not convert interface name");
      *(_DWORD *)v24 = 138412290;
      *(_QWORD *)(v24 + 4) = a1;
      __SC_log_send(3, v17, v18, v22);
    }
    return 0;
  }
  v3 = (void *)v2;
  v4 = sub_10002D8E0(v2);
  if (!v4)
  {
    v25 = sub_100007594();
    v26 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v25, v26))
    {
      v27 = _os_log_pack_size(12);
      v30 = (char *)&v34 - ((__chkstk_darwin(v27, v28, v29) + 15) & 0xFFFFFFFFFFFFFFF0);
      v31 = __error();
      v32 = _os_log_pack_fill(v30, v27, *v31, &_mh_execute_header, "%s: interface does not exist", v34);
      *(_DWORD *)v32 = 136315138;
      *(_QWORD *)(v32 + 4) = v3;
      __SC_log_send(5, v25, v26, v30);
    }
    CFAllocatorDeallocate(0, v3);
    return 0;
  }
  v5 = v4;
  v6 = malloc_type_malloc(0x38uLL, 0x10F0040C1D5253AuLL);
  v7 = sub_100007594();
  v8 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v7, v8))
  {
    v9 = _os_log_pack_size(32);
    v12 = (char *)&v34 - ((__chkstk_darwin(v9, v10, v11) + 15) & 0xFFFFFFFFFFFFFFF0);
    v13 = __error();
    v14 = _os_log_pack_fill(v12, v9, *v13, &_mh_execute_header, "%@: %s %p");
    *(_DWORD *)v14 = 138412802;
    *(_QWORD *)(v14 + 4) = a1;
    *(_WORD *)(v14 + 12) = 2080;
    *(_QWORD *)(v14 + 14) = "NAT64PrefixRequestCreate";
    *(_WORD *)(v14 + 22) = 2048;
    *(_QWORD *)(v14 + 24) = v6;
    __SC_log_send(7, v7, v8, v12);
  }
  v6[6] = 0;
  *((_OWORD *)v6 + 1) = 0u;
  *((_OWORD *)v6 + 2) = 0u;
  *(_OWORD *)v6 = 0u;
  v15 = CFRetain(a1);
  v6[3] = v3;
  v6[4] = v15;
  *((_DWORD *)v6 + 10) = v5;
  v16 = qword_10007DE80;
  *v6 = qword_10007DE80;
  if (v16)
    *(_QWORD *)(v16 + 8) = v6;
  qword_10007DE80 = (uint64_t)v6;
  v6[1] = &qword_10007DE80;
  *((_WORD *)v6 + 24) |= 1u;
  sub_10004B9B4((uint64_t)v6);
  return v6;
}

uint64_t sub_10004B700(uint64_t a1)
{
  os_log_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  os_log_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CFAbsoluteTime Current;
  const char *v23;
  const char *v24;
  void (*v25)(uint64_t, unsigned int, uint64_t);
  void *v26;
  uint64_t v27;
  CFAbsoluteTime v28;
  _QWORD v29[5];

  v2 = sub_100007594();
  v3 = _SC_syslog_os_log_mapping(6);
  if (__SC_log_enabled(6, v2, v3))
  {
    v4 = _os_log_pack_size(22);
    v7 = (char *)&v23 - ((__chkstk_darwin(v4, v5, v6) + 15) & 0xFFFFFFFFFFFFFFF0);
    v8 = __error();
    v9 = _os_log_pack_fill(v7, v4, *v8, &_mh_execute_header, "%s: %s", v23, v24);
    v10 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)v9 = 136315394;
    *(_QWORD *)(v9 + 4) = v10;
    *(_WORD *)(v9 + 12) = 2080;
    *(_QWORD *)(v9 + 14) = "NAT64PrefixRequestStart";
    __SC_log_send(6, v2, v3, v7);
  }
  if (*(_QWORD *)(a1 + 16))
  {
    v11 = sub_100007594();
    v12 = _SC_syslog_os_log_mapping(7);
    result = __SC_log_enabled(7, v11, v12);
    if ((_DWORD)result)
    {
      v14 = _os_log_pack_size(22);
      v17 = (char *)&v23 - ((__chkstk_darwin(v14, v15, v16) + 15) & 0xFFFFFFFFFFFFFFF0);
      v18 = __error();
      v19 = _os_log_pack_fill(v17, v14, *v18, &_mh_execute_header, "%s %s: resolver is already active", v23, v24);
      v20 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)v19 = 136315394;
      *(_QWORD *)(v19 + 4) = v20;
      *(_WORD *)(v19 + 12) = 2080;
      *(_QWORD *)(v19 + 14) = "NAT64PrefixRequestStart";
      return __SC_log_send(7, v11, v12, v17);
    }
  }
  else
  {
    result = sub_10004BAFC(*(unsigned int *)(a1 + 40));
    if (result)
    {
      v21 = result;
      sub_10004B9B4(a1);
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 0x40000000;
      v29[2] = sub_10004BC74;
      v29[3] = &unk_100076E30;
      v29[4] = a1;
      Current = CFAbsoluteTimeGetCurrent();
      v23 = (const char *)_NSConcreteStackBlock;
      v24 = (const char *)0x40000000;
      v25 = sub_10004BD7C;
      v26 = &unk_100076E50;
      v27 = a1;
      v28 = Current;
      nw_nat64_prefixes_resolver_set_cancel_handler(v21, v29);
      if (qword_10007DE88 != -1)
        dispatch_once(&qword_10007DE88, &stru_100076E90);
      nw_nat64_prefixes_resolver_set_update_handler(v21, qword_10007DE90, &v23);
      result = nw_nat64_prefixes_resolver_start(v21);
      *(_QWORD *)(a1 + 16) = v21;
    }
  }
  return result;
}

uint64_t sub_10004B9B4(uint64_t a1)
{
  os_log_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const char *v13[3];
  uint64_t v14;

  ++*(_DWORD *)(a1 + 44);
  v2 = sub_100007594();
  v3 = _SC_syslog_os_log_mapping(7);
  result = __SC_log_enabled(7, v2, v3);
  if ((_DWORD)result)
  {
    v5 = _os_log_pack_size(38);
    v8 = (char *)v13 - ((__chkstk_darwin(v5, v6, v7) + 15) & 0xFFFFFFFFFFFFFFF0);
    v9 = __error();
    v10 = _os_log_pack_fill(v8, v5, *v9, &_mh_execute_header, "%s: %s %p %u", v13[0], v13[1], v13[2], v14);
    v11 = *(_QWORD *)(a1 + 24);
    v12 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)v10 = 136315906;
    *(_QWORD *)(v10 + 4) = v11;
    *(_WORD *)(v10 + 12) = 2080;
    *(_QWORD *)(v10 + 14) = "NAT64PrefixRequestRetain";
    *(_WORD *)(v10 + 22) = 2048;
    *(_QWORD *)(v10 + 24) = a1;
    *(_WORD *)(v10 + 32) = 1024;
    *(_DWORD *)(v10 + 34) = v12;
    return __SC_log_send(7, v2, v3, v8);
  }
  return result;
}

uint64_t sub_10004BAFC(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  os_log_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  _DWORD *v14;
  int v15;

  v2 = nw_parameters_create();
  v3 = nw_interface_create_with_index(a1);
  if (v3)
  {
    v4 = v3;
    nw_parameters_require_interface(v2, v3);
    nw_parameters_set_required_address_family(v2, 30);
    nw_release(v4);
    v5 = nw_nat64_prefixes_resolver_create(v2);
    nw_release(v2);
    return v5;
  }
  else
  {
    v7 = sub_100007594();
    v8 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v7, v8))
    {
      v9 = _os_log_pack_size(8);
      v12 = (char *)&v15 - ((__chkstk_darwin(v9, v10, v11) + 15) & 0xFFFFFFFFFFFFFFF0);
      v13 = __error();
      v14 = (_DWORD *)_os_log_pack_fill(v12, v9, *v13, &_mh_execute_header, "nw_interface_create_with_index(%u) failed", v15);
      *v14 = 67109120;
      v14[1] = a1;
      __SC_log_send(5, v7, v8, v12);
    }
    return 0;
  }
}

void sub_10004BC74(uint64_t a1)
{
  os_log_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;

  v2 = sub_100007594();
  v3 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v2, v3))
  {
    v4 = _os_log_pack_size(12);
    v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
    v6 = __error();
    v7 = _os_log_pack_fill(v5, v4, *v6, &_mh_execute_header, "%s: NAT64 resolver cancelled", v9);
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
    *(_DWORD *)v7 = 136315138;
    *(_QWORD *)(v7 + 4) = v8;
    __SC_log_send(7, v2, v3, v5);
  }
  sub_10004AF78(*(_QWORD *)(a1 + 32));
}

void sub_10004BD7C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  os_log_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  os_log_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26[2];

  v4 = *(_QWORD *)(a1 + 32);
  if ((*(_WORD *)(v4 + 48) & 1) != 0)
  {
    if (a3)
    {
      sub_10004A8BC(*(_QWORD *)(v4 + 24), a2, a3);
    }
    else
    {
      v17 = sub_100007594();
      v18 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v17, v18))
      {
        v19 = _os_log_pack_size(12);
        v22 = (char *)v26 - ((__chkstk_darwin(v19, v20, v21) + 15) & 0xFFFFFFFFFFFFFFF0);
        v23 = __error();
        v24 = _os_log_pack_fill(v22, v19, *v23, &_mh_execute_header, "%s: NAT64 no prefixes", v26[0]);
        v25 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
        *(_DWORD *)v24 = 136315138;
        *(_QWORD *)(v24 + 4) = v25;
        __SC_log_send(3, v17, v18, v22);
      }
    }
    sub_10004BFAC(*(CFStringRef *)(*(_QWORD *)(a1 + 32) + 32), a2, a3, *(CFAbsoluteTime *)(a1 + 40));
    if (a3)
    {
      sub_10004AE28(*(_QWORD *)(a1 + 32));
      sub_10004AF78(*(_QWORD *)(a1 + 32));
    }
  }
  else
  {
    v5 = sub_100007594();
    v6 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v5, v6))
    {
      v7 = _os_log_pack_size(22);
      v10 = (char *)v26 - ((__chkstk_darwin(v7, v8, v9) + 15) & 0xFFFFFFFFFFFFFFF0);
      v11 = __error();
      v12 = _os_log_pack_fill(v10, v7, *v11, &_mh_execute_header, "%s: NAT64 request is stale %p", v26[0], v26[1]);
      v13 = *(_QWORD *)(a1 + 32);
      v14 = *(_QWORD *)(v13 + 24);
      *(_DWORD *)v12 = 136315394;
      *(_QWORD *)(v12 + 4) = v14;
      *(_WORD *)(v12 + 12) = 2048;
      *(_QWORD *)(v12 + 14) = v13;
      __SC_log_send(6, v5, v6, v10);
    }
  }
}

void sub_10004BFAC(CFStringRef ifname, unsigned int a2, uint64_t a3, CFAbsoluteTime a4)
{
  const __CFString *NetworkInterfaceEntity;
  __CFDictionary *Mutable;
  __CFArray *v10;
  uint64_t v11;
  CFStringRef v12;
  CFDateRef v13;
  CFAbsoluteTime Current;
  CFDateRef v15;
  os_log_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int *v22;
  uint64_t v23;
  char cStr[16];
  __int128 v25;
  __int128 v26;
  __int16 v27;

  NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, ifname, kSCEntNetNAT64);
  if ((a2 & 0x80000000) != 0)
  {
    SCDynamicStoreRemoveValue(0, NetworkInterfaceEntity);
  }
  else
  {
    Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (a2)
    {
      v10 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
      v11 = a2;
      do
      {
        v27 = 0;
        v25 = 0u;
        v26 = 0u;
        *(_OWORD *)cStr = 0u;
        nw_nat64_write_prefix_to_string(a3, cStr, 50);
        v12 = CFStringCreateWithCString(0, cStr, 0x600u);
        CFArrayAppendValue(v10, v12);
        CFRelease(v12);
        a3 += 16;
        --v11;
      }
      while (v11);
      CFDictionarySetValue(Mutable, kSCPropNetNAT64PrefixList, v10);
      CFRelease(v10);
    }
    v13 = CFDateCreate(0, a4);
    CFDictionarySetValue(Mutable, kSCPropNetNAT64PLATDiscoveryStartTime, v13);
    CFRelease(v13);
    Current = CFAbsoluteTimeGetCurrent();
    v15 = CFDateCreate(0, Current);
    CFDictionarySetValue(Mutable, kSCPropNetNAT64PLATDiscoveryCompletionTime, v15);
    CFRelease(v15);
    SCDynamicStoreSetValue(0, NetworkInterfaceEntity, Mutable);
    v16 = sub_100007594();
    v17 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v16, v17))
    {
      v18 = _os_log_pack_size(22);
      v21 = &cStr[-((__chkstk_darwin(v18, v19, v20) + 15) & 0xFFFFFFFFFFFFFFF0)];
      v22 = __error();
      v23 = _os_log_pack_fill(v21, v18, *v22, &_mh_execute_header, "%@: PLAT discovery complete %@");
      *(_DWORD *)v23 = 138412546;
      *(_QWORD *)(v23 + 4) = ifname;
      *(_WORD *)(v23 + 12) = 2112;
      *(_QWORD *)(v23 + 14) = Mutable;
      __SC_log_send(5, v16, v17, v21);
    }
    CFRelease(Mutable);
  }
  CFRelease(NetworkInterfaceEntity);
}

void sub_10004C24C(id a1)
{
  qword_10007DE90 = (uint64_t)dispatch_queue_create("nat64 prefix request queue", 0);
}

void sub_10004C370(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004C384(id a1)
{
  AgentController *v1;
  void *v2;

  v1 = objc_alloc_init(AgentController);
  v2 = (void *)qword_10007DE98;
  qword_10007DE98 = (uint64_t)v1;

}

void sub_10004E900(int a1)
{
  os_log_t v1;
  NSObject *v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  os_log_t v8;
  uint64_t v9;
  int *v10;
  char *v11;
  int v12;
  int v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v12 = a1;
  if (sysctlbyname("net.inet.mptcp.allow_aggregate", 0, 0, &v12, 4uLL) == -1)
  {
    if (*__error() == 2)
      return;
    v8 = sub_100007594();
    v2 = objc_claimAutoreleasedReturnValue(v8);
    v3 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v2, v3))
    {
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v22 = 0u;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      v15 = 0u;
      LODWORD(v9) = (_sc_log > 0) | 2;
      if (os_log_type_enabled(v2, (os_log_type_t)v3))
        v9 = v9;
      else
        v9 = 2;
      v2 = v2;
      v10 = __error();
      v11 = strerror(*v10);
      v13 = 136315138;
      v14 = v11;
      v6 = (__int128 *)_os_log_send_and_compose_impl(v9, 0, &v15, 256, &_mh_execute_header, v2, v3, "sysctlbyname(net.inet.mptcp.allow_aggregate) failed: %s", (const char *)&v13);

      v7 = 3;
      goto LABEL_13;
    }
  }
  else
  {
    v1 = sub_100007594();
    v2 = objc_claimAutoreleasedReturnValue(v1);
    v3 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v2, v3))
    {
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v22 = 0u;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      v15 = 0u;
      v4 = (_sc_log > 0) | 2;
      if (os_log_type_enabled(v2, (os_log_type_t)v3))
        v5 = v4;
      else
        v5 = 2;
      v13 = 67109120;
      LODWORD(v14) = v12;
      v6 = (__int128 *)_os_log_send_and_compose_impl(v5, 0, &v15, 256, &_mh_execute_header, v2, v3, "Transport Converter Proxy: sysctl net.inet.mptcp.allow_aggregate=%d", &v13);
      v7 = 5;
LABEL_13:
      __SC_log_send2(v7, v2, v3, 0, v6);
      if (v6 != &v15)
        free(v6);
    }
  }

}

void process_AgentMonitor()
{
  os_log_t v0;
  NSObject *v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  __int128 *v5;
  void *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  os_log_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  _WORD v16[8];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  if (objc_opt_class(NEPolicy))
  {
    v0 = sub_100007594();
    v1 = objc_claimAutoreleasedReturnValue(v0);
    v2 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v1, v2))
    {
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      v3 = (_sc_log > 0) | 2;
      v4 = os_log_type_enabled(v1, (os_log_type_t)v2) ? v3 : 2;
      v16[0] = 0;
      v5 = (__int128 *)_os_log_send_and_compose_impl(v4, 0, &v17, 256, &_mh_execute_header, v1, v2, "Triggering AgentMonitor", v16, 2);
      __SC_log_send2(7, v1, v2, 0, v5);
      if (v5 != &v17)
        free(v5);
    }

    v6 = objc_autoreleasePoolPush();
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[AgentController sharedController](AgentController, "sharedController"));
    v8 = v7;
    if (v7)
    {
      v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "controllerQueue"));
      dispatch_sync(v9, &stru_100076ED0);
    }
    else
    {
      v10 = sub_100007594();
      v9 = objc_claimAutoreleasedReturnValue(v10);
      v11 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v9, v11))
      {
        v31 = 0u;
        v32 = 0u;
        v29 = 0u;
        v30 = 0u;
        v27 = 0u;
        v28 = 0u;
        v25 = 0u;
        v26 = 0u;
        v23 = 0u;
        v24 = 0u;
        v21 = 0u;
        v22 = 0u;
        v19 = 0u;
        v20 = 0u;
        v17 = 0u;
        v18 = 0u;
        v12 = (_sc_log > 0) | 2;
        if (os_log_type_enabled(v9, (os_log_type_t)v11))
          v13 = v12;
        else
          v13 = 2;
        v16[0] = 0;
        LODWORD(v15) = 2;
        v14 = (__int128 *)_os_log_send_and_compose_impl(v13, 0, &v17, 256, &_mh_execute_header, v9, v11, "AgentController could not be initialized", v16, v15);
        __SC_log_send2(3, v9, v11, 0, v14);
        if (v14 != &v17)
          free(v14);
      }
    }

    objc_autoreleasePoolPop(v6);
  }
}

void sub_100055310(id a1)
{
  void *v1;
  id v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[AgentController sharedController](AgentController, "sharedController"));
  objc_msgSend(v1, "processDNSChanges");

  v2 = (id)objc_claimAutoreleasedReturnValue(+[AgentController sharedController](AgentController, "sharedController"));
  objc_msgSend(v2, "processProxyChanges");

}

void process_AgentMonitor_DNS()
{
  os_log_t v0;
  NSObject *v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  __int128 *v5;
  void *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  os_log_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  _WORD v16[8];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  if (objc_opt_class(NEPolicy))
  {
    v0 = sub_100007594();
    v1 = objc_claimAutoreleasedReturnValue(v0);
    v2 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v1, v2))
    {
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      v3 = (_sc_log > 0) | 2;
      v4 = os_log_type_enabled(v1, (os_log_type_t)v2) ? v3 : 2;
      v16[0] = 0;
      v5 = (__int128 *)_os_log_send_and_compose_impl(v4, 0, &v17, 256, &_mh_execute_header, v1, v2, "Triggering AgentMonitor for DNS", v16, 2);
      __SC_log_send2(7, v1, v2, 0, v5);
      if (v5 != &v17)
        free(v5);
    }

    v6 = objc_autoreleasePoolPush();
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[AgentController sharedController](AgentController, "sharedController"));
    v8 = v7;
    if (v7)
    {
      v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "controllerQueue"));
      dispatch_sync(v9, &stru_100076EF0);
    }
    else
    {
      v10 = sub_100007594();
      v9 = objc_claimAutoreleasedReturnValue(v10);
      v11 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v9, v11))
      {
        v31 = 0u;
        v32 = 0u;
        v29 = 0u;
        v30 = 0u;
        v27 = 0u;
        v28 = 0u;
        v25 = 0u;
        v26 = 0u;
        v23 = 0u;
        v24 = 0u;
        v21 = 0u;
        v22 = 0u;
        v19 = 0u;
        v20 = 0u;
        v17 = 0u;
        v18 = 0u;
        v12 = (_sc_log > 0) | 2;
        if (os_log_type_enabled(v9, (os_log_type_t)v11))
          v13 = v12;
        else
          v13 = 2;
        v16[0] = 0;
        LODWORD(v15) = 2;
        v14 = (__int128 *)_os_log_send_and_compose_impl(v13, 0, &v17, 256, &_mh_execute_header, v9, v11, "AgentController could not be initialized", v16, v15);
        __SC_log_send2(3, v9, v11, 0, v14);
        if (v14 != &v17)
          free(v14);
      }
    }

    objc_autoreleasePoolPop(v6);
  }
}

void sub_100055628(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[AgentController sharedController](AgentController, "sharedController"));
  objc_msgSend(v1, "processDNSChanges");

}

void process_AgentMonitor_Proxy()
{
  os_log_t v0;
  NSObject *v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  __int128 *v5;
  void *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  os_log_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  _WORD v16[8];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  if (objc_opt_class(NEPolicy))
  {
    v0 = sub_100007594();
    v1 = objc_claimAutoreleasedReturnValue(v0);
    v2 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v1, v2))
    {
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      v3 = (_sc_log > 0) | 2;
      v4 = os_log_type_enabled(v1, (os_log_type_t)v2) ? v3 : 2;
      v16[0] = 0;
      v5 = (__int128 *)_os_log_send_and_compose_impl(v4, 0, &v17, 256, &_mh_execute_header, v1, v2, "Triggering AgentMonitor for Proxy", v16, 2);
      __SC_log_send2(7, v1, v2, 0, v5);
      if (v5 != &v17)
        free(v5);
    }

    v6 = objc_autoreleasePoolPush();
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[AgentController sharedController](AgentController, "sharedController"));
    v8 = v7;
    if (v7)
    {
      v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "controllerQueue"));
      dispatch_sync(v9, &stru_100076F10);
    }
    else
    {
      v10 = sub_100007594();
      v9 = objc_claimAutoreleasedReturnValue(v10);
      v11 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v9, v11))
      {
        v31 = 0u;
        v32 = 0u;
        v29 = 0u;
        v30 = 0u;
        v27 = 0u;
        v28 = 0u;
        v25 = 0u;
        v26 = 0u;
        v23 = 0u;
        v24 = 0u;
        v21 = 0u;
        v22 = 0u;
        v19 = 0u;
        v20 = 0u;
        v17 = 0u;
        v18 = 0u;
        v12 = (_sc_log > 0) | 2;
        if (os_log_type_enabled(v9, (os_log_type_t)v11))
          v13 = v12;
        else
          v13 = 2;
        v16[0] = 0;
        LODWORD(v15) = 2;
        v14 = (__int128 *)_os_log_send_and_compose_impl(v13, 0, &v17, 256, &_mh_execute_header, v9, v11, "AgentController could not be initialized", v16, v15);
        __SC_log_send2(3, v9, v11, 0, v14);
        if (v14 != &v17)
          free(v14);
      }
    }

    objc_autoreleasePoolPop(v6);
  }
}

void sub_100055920(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[AgentController sharedController](AgentController, "sharedController"));
  objc_msgSend(v1, "processProxyChanges");

}

uint64_t copy_proxy_information_for_agent_uuid(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  uint64_t v8;
  os_log_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  _OWORD *v14;
  _QWORD block[7];
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _WORD v20[8];
  _OWORD v21[16];

  v16 = 0;
  v17 = &v16;
  v18 = 0x2020000000;
  v19 = 0;
  if (!objc_opt_class(NEPolicy))
    goto LABEL_6;
  v4 = objc_autoreleasePoolPush();
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[AgentController sharedController](AgentController, "sharedController"));
  v6 = v5;
  if (v5)
  {
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "controllerQueue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100055BD8;
    block[3] = &unk_100076F38;
    block[4] = &v16;
    block[5] = a1;
    block[6] = a2;
    dispatch_sync(v7, block);
  }
  else
  {
    v10 = sub_100007594();
    v7 = objc_claimAutoreleasedReturnValue(v10);
    v11 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v7, v11))
    {
      memset(v21, 0, sizeof(v21));
      v12 = (_sc_log > 0) | 2;
      if (os_log_type_enabled(v7, (os_log_type_t)v11))
        v13 = v12;
      else
        v13 = 2;
      v20[0] = 0;
      v14 = (_OWORD *)_os_log_send_and_compose_impl(v13, 0, v21, 256, &_mh_execute_header, v7, v11, "AgentController could not be initialized", v20, 2);
      __SC_log_send2(3, v7, v11, 0, v14);
      if (v14 != v21)
        free(v14);
    }
  }

  objc_autoreleasePoolPop(v4);
  if (v6)
    v8 = v17[3];
  else
LABEL_6:
    v8 = 0;
  _Block_object_dispose(&v16, 8);
  return v8;
}

void sub_100055BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100055BD8(_QWORD *a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[AgentController sharedController](AgentController, "sharedController"));
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = objc_msgSend(v2, "copyProxyAgentData:length:", a1[5], a1[6]);

}

uint64_t copy_dns_information_for_agent_uuid(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  uint64_t v8;
  os_log_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  _OWORD *v14;
  _QWORD block[7];
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _WORD v20[8];
  _OWORD v21[16];

  v16 = 0;
  v17 = &v16;
  v18 = 0x2020000000;
  v19 = 0;
  if (!objc_opt_class(NEPolicy))
    goto LABEL_6;
  v4 = objc_autoreleasePoolPush();
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[AgentController sharedController](AgentController, "sharedController"));
  v6 = v5;
  if (v5)
  {
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "controllerQueue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100055EAC;
    block[3] = &unk_100076F38;
    block[4] = &v16;
    block[5] = a1;
    block[6] = a2;
    dispatch_sync(v7, block);
  }
  else
  {
    v10 = sub_100007594();
    v7 = objc_claimAutoreleasedReturnValue(v10);
    v11 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v7, v11))
    {
      memset(v21, 0, sizeof(v21));
      v12 = (_sc_log > 0) | 2;
      if (os_log_type_enabled(v7, (os_log_type_t)v11))
        v13 = v12;
      else
        v13 = 2;
      v20[0] = 0;
      v14 = (_OWORD *)_os_log_send_and_compose_impl(v13, 0, v21, 256, &_mh_execute_header, v7, v11, "AgentController could not be initialized", v20, 2);
      __SC_log_send2(3, v7, v11, 0, v14);
      if (v14 != v21)
        free(v14);
    }
  }

  objc_autoreleasePoolPop(v4);
  if (v6)
    v8 = v17[3];
  else
LABEL_6:
    v8 = 0;
  _Block_object_dispose(&v16, 8);
  return v8;
}

void sub_100055E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100055EAC(_QWORD *a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[AgentController sharedController](AgentController, "sharedController"));
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = objc_msgSend(v2, "copyDNSAgentData:length:", a1[5], a1[6]);

}

CFMutableDictionaryRef sub_100055F28(_OWORD *a1)
{
  CFMutableDictionaryRef result;

  *a1 = 0u;
  a1[1] = 0u;
  result = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *((_QWORD *)a1 + 2) = result;
  return result;
}

void sub_100055FA0(uint64_t a1, CFTypeRef cf, unint64_t a3)
{
  const void *v6;
  uint64_t v7;

  v6 = *(const void **)a1;
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)a1 = 0;
  }
  if (cf)
  {
    CFRetain(cf);
    *(_QWORD *)a1 = cf;
  }
  if (a3 <= 1)
    v7 = 1;
  else
    v7 = a3;
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 24) += *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 28) = 0;
}

BOOL sub_100056038(uint64_t a1)
{
  return *(_DWORD *)(a1 + 24) == 0;
}

uint64_t sub_100056088(uint64_t a1, _xpc_connection_s *a2, uint64_t a3)
{
  void *v6;
  void *v7;
  BOOL value;
  CFDataRef v9;
  __CFData *v10;
  UInt8 *MutableBytePtr;
  uint64_t v12;
  pid_t pid;
  uint64_t v14;
  _QWORD v16[4];
  pid_t v17;

  v6 = (void *)xpc_connection_copy_entitlement_value(a2, "com.apple.SystemConfiguration.trailing-edge-agent");
  if (!v6)
    goto LABEL_9;
  v7 = v6;
  if (xpc_get_type(v6) == (xpc_type_t)&_xpc_type_BOOL)
  {
    value = xpc_BOOL_get_value(v7);
    xpc_release(v7);
    if (!value)
      goto LABEL_9;
    v16[0] = a2;
    v9 = CFDataCreate(0, (const UInt8 *)v16, 8);
    v10 = (__CFData *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), v9);
    CFRelease(v9);
    MutableBytePtr = CFDataGetMutableBytePtr(v10);
    v12 = *((_QWORD *)MutableBytePtr + 2);
    if (v12)
    {
      if (v12 != a3 && *(_QWORD *)(a1 + 8) == a3)
      {
        *(int32x2_t *)(a1 + 24) = vadd_s32(*(int32x2_t *)(a1 + 24), (int32x2_t)0x1FFFFFFFFLL);
LABEL_17:
        v14 = 1;
        goto LABEL_18;
      }
      v14 = 0;
    }
    else
    {
      if (*(_QWORD *)(a1 + 8) != a3)
      {
        ++*(_DWORD *)(a1 + 24);
        goto LABEL_17;
      }
      v14 = 0;
      ++*(_DWORD *)(a1 + 28);
    }
LABEL_18:
    *((_QWORD *)MutableBytePtr + 2) = a3;
    return v14;
  }
  xpc_release(v7);
LABEL_9:
  pid = xpc_connection_get_pid(a2);
  if (qword_10007DEB8 != -1)
    dispatch_once(&qword_10007DEB8, &stru_100076F78);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 0x40000000;
  v16[2] = sub_1000562E8;
  v16[3] = &unk_100076FD8;
  v17 = pid;
  dispatch_sync((dispatch_queue_t)qword_10007DEC8, v16);
  return 0;
}

void sub_100056268(id a1)
{
  qword_10007DEC0 = (uint64_t)CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  qword_10007DEC8 = (uint64_t)dispatch_queue_create("handle unentitled ack", 0);
}

void sub_1000562E8(uint64_t a1)
{
  int *v1;
  CFNumberRef v2;
  const __CFArray *v3;
  os_log_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  _DWORD *v11;
  int v12;
  dispatch_time_t v13;
  int v14;
  CFRange v15;

  v1 = (int *)(a1 + 32);
  v2 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, (const void *)(a1 + 32));
  v3 = (const __CFArray *)qword_10007DEC0;
  v15.length = CFArrayGetCount((CFArrayRef)qword_10007DEC0);
  v15.location = 0;
  if (!CFArrayContainsValue(v3, v15, v2))
  {
    CFArrayAppendValue((CFMutableArrayRef)qword_10007DEC0, v2);
    v4 = sub_100007594();
    v5 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v4, v5))
    {
      v6 = _os_log_pack_size(8);
      v9 = (char *)&v14 - ((__chkstk_darwin(v6, v7, v8) + 15) & 0xFFFFFFFFFFFFFFF0);
      v10 = __error();
      v11 = (_DWORD *)_os_log_pack_fill(v9, v6, *v10, &_mh_execute_header, "DNS/nwi dropping ack w/no entitlement, pid = %d", v14);
      v12 = *v1;
      *v11 = 67109120;
      v11[1] = v12;
      __SC_log_send(6, v4, v5, v9);
    }
    if ((byte_10007DEB0 & 1) == 0)
    {
      byte_10007DEB0 = 1;
      v13 = dispatch_time(0, 180000000000);
      dispatch_after(v13, (dispatch_queue_t)qword_10007DEC8, &stru_100076FB8);
    }
  }
  CFRelease(v2);
}

void sub_100056494(id a1)
{
  CFArrayRemoveAllValues((CFMutableArrayRef)qword_10007DEC0);
  byte_10007DEB0 = 0;
}

char *_scprefs_observer_watch(int a1, char *__s, uint64_t a3, const void *a4)
{
  size_t v8;
  size_t v9;
  char *v10;
  os_log_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int *v17;
  uint64_t v18;
  const char *block[5];

  if (qword_10007DED0 != -1)
    dispatch_once(&qword_10007DED0, &stru_100077018);
  v8 = strlen(__s);
  v9 = v8 + 1;
  v10 = (char *)malloc_type_malloc(v8 + 41, 0x5A000366uLL);
  *(_OWORD *)v10 = 0u;
  *((_OWORD *)v10 + 1) = 0u;
  *((_QWORD *)v10 + 4) = 0;
  *(_DWORD *)v10 = a1;
  strlcpy(v10 + 40, __s, v9);
  *((_QWORD *)v10 + 4) = a3;
  *((_QWORD *)v10 + 1) = _Block_copy(a4);
  v11 = sub_100007594();
  v12 = _SC_syslog_os_log_mapping(6);
  if (__SC_log_enabled(6, v11, v12))
  {
    v13 = _os_log_pack_size(12);
    v16 = (char *)block - ((__chkstk_darwin(v13, v14, v15) + 15) & 0xFFFFFFFFFFFFFFF0);
    v17 = __error();
    v18 = _os_log_pack_fill(v16, v13, *v17, &_mh_execute_header, "Created a new element to watch for %s", block[0]);
    *(_DWORD *)v18 = 136315138;
    *(_QWORD *)(v18 + 4) = v10 + 40;
    __SC_log_send(6, v11, v12, v16);
  }
  block[0] = (const char *)_NSConcreteStackBlock;
  block[1] = (const char *)0x40000000;
  block[2] = (const char *)sub_100056858;
  block[3] = (const char *)&unk_100077038;
  block[4] = v10;
  dispatch_sync((dispatch_queue_t)qword_10007DED8, block);
  return v10;
}

void sub_1000566C8(id a1)
{
  sub_10005670C();
}

uint64_t sub_10005670C()
{
  uint64_t result;
  int v1;
  os_log_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  _DWORD *v9;
  int v10;

  qword_10007DED8 = (uint64_t)dispatch_queue_create("com.apple.SystemConfiguration.SCPreferencesObserver", 0);
  qword_10007DEE0 = 0;
  result = notify_register_dispatch("com.apple.ManagedConfiguration.profileListChanged", (int *)&unk_10007DEE8, (dispatch_queue_t)qword_10007DED8, &stru_100077078);
  if ((_DWORD)result)
  {
    v1 = result;
    v2 = sub_100007594();
    v3 = _SC_syslog_os_log_mapping(6);
    result = __SC_log_enabled(6, v2, v3);
    if ((_DWORD)result)
    {
      v4 = _os_log_pack_size(8);
      v7 = (char *)&v10 - ((__chkstk_darwin(v4, v5, v6) + 15) & 0xFFFFFFFFFFFFFFF0);
      v8 = __error();
      v9 = (_DWORD *)_os_log_pack_fill(v7, v4, *v8, &_mh_execute_header, "notify_register_dispatch() failed: %u", v10);
      *v9 = 67109120;
      v9[1] = v1;
      return __SC_log_send(6, v2, v3, v7);
    }
  }
  return result;
}

uint64_t sub_100056858(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(result + 32) + 24) = qword_10007DEE0;
  qword_10007DEE0 = *(_QWORD *)(result + 32);
  return result;
}

void sub_1000568B4(id a1, int a2)
{
  sub_1000568F8();
}

void sub_1000568F8()
{
  os_log_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int *v6;
  uint64_t i;
  uint64_t v8;

  v0 = sub_100007594();
  v1 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v0, v1))
  {
    v2 = _os_log_pack_size(2);
    v5 = (char *)&v8 - ((__chkstk_darwin(v2, v3, v4) + 15) & 0xFFFFFFFFFFFFFFF0);
    v6 = __error();
    *(_WORD *)_os_log_pack_fill(v5, v2, *v6, &_mh_execute_header, "PrefsObserver notification received") = 0;
    __SC_log_send(7, v0, v1, v5);
  }
  for (i = qword_10007DEE0; i; i = *(_QWORD *)(i + 24))
  {
    if (sub_100056A1C((int *)i))
      dispatch_async(*(dispatch_queue_t *)(i + 32), *(dispatch_block_t *)(i + 8));
  }
}

BOOL sub_100056A1C(int *a1)
{
  int v2;
  const char *v3;
  const char *v4;
  CC_LONG v5;
  CFDataRef v6;
  CFDataRef v7;
  _BOOL8 v8;
  int v9;
  os_log_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int *v17;
  uint64_t v18;
  const char *v19;
  CC_SHA256_CTX v21;
  stat v22;
  unsigned __int8 v23[1024];

  v3 = (const char *)(a1 + 10);
  v2 = *a1;
  *(_QWORD *)&v21.wbuf[14] = 0;
  if (v2 == 2)
    v4 = "/Library/Managed Preferences/mobile";
  else
    v4 = 0;
  memset(&v21, 0, 96);
  CC_SHA256_Init(&v21);
  memset(&v22, 0, sizeof(v22));
  snprintf((char *)v23, 0x400uLL, "%s/%s", v4, v3);
  if (stat((const char *)v23, &v22) || (v22.st_mode & 0xF000) != 0x8000)
  {
    CC_SHA256_Final(v23, &v21);
    v6 = 0;
  }
  else
  {
    v5 = strlen((const char *)v23);
    CC_SHA256_Update(&v21, v23, v5);
    CC_SHA256_Update(&v21, &v22.st_mtimespec, 0x10u);
    CC_SHA256_Final(v23, &v21);
    v6 = CFDataCreate(0, v23, 32);
  }
  v7 = (CFDataRef)*((_QWORD *)a1 + 2);
  if (v6 == v7)
  {
    v8 = 0;
    v7 = v6;
    if (v6)
LABEL_13:
      CFRelease(v7);
  }
  else
  {
    v8 = 1;
    if (v6 && v7)
    {
      v9 = CFEqual(v6, v7);
      v7 = (CFDataRef)*((_QWORD *)a1 + 2);
      v8 = v9 == 0;
    }
    if (v7)
      goto LABEL_13;
  }
  *((_QWORD *)a1 + 2) = v6;
  v10 = sub_100007594();
  if (v8)
    v11 = 6;
  else
    v11 = 7;
  v12 = _SC_syslog_os_log_mapping(v11);
  if (__SC_log_enabled(v11, v10, v12))
  {
    v13 = _os_log_pack_size(22);
    v16 = (char *)&v21 - ((__chkstk_darwin(v13, v14, v15) + 15) & 0xFFFFFFFFFFFFFFF0);
    v17 = __error();
    v18 = _os_log_pack_fill(v16, v13, *v17, &_mh_execute_header, "preferences file: \"%s\" %s", *(const char **)v21.count, *(const char **)v21.hash);
    v19 = "did not change";
    if (v8)
      v19 = "changed";
    *(_DWORD *)v18 = 136315394;
    *(_QWORD *)(v18 + 4) = v3;
    *(_WORD *)(v18 + 12) = 2080;
    *(_QWORD *)(v18 + 14) = v19;
    __SC_log_send(v11, v10, v12, v16);
  }
  return v8;
}

uint64_t sub_100056CA0(uint64_t a1, uint64_t a2)
{
  return _SCControlPrefsCreateWithQueue("com.apple.IPMonitor.control.plist", a1, a2);
}

uint64_t sub_100056CF4()
{
  if (qword_10007DEF0)
    return _SCControlPrefsGetBoolean();
  qword_10007DEF0 = _SCControlPrefsCreateWithQueue("com.apple.IPMonitor.control.plist", 0, 0);
  if (qword_10007DEF0)
    return _SCControlPrefsGetBoolean();
  else
    return 0;
}

uint64_t sub_100056D9C()
{
  if (qword_10007DEF0)
    return _SCControlPrefsGetBoolean();
  qword_10007DEF0 = _SCControlPrefsCreateWithQueue("com.apple.IPMonitor.control.plist", 0, 0);
  if (qword_10007DEF0)
    return _SCControlPrefsGetBoolean();
  else
    return 0;
}

void sub_100056E44(__CFBundle *a1)
{
  os_log_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  os_log_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  CFStringRef Identifier;
  __CFArray *Mutable;
  __CFArray *v19;
  CFStringRef v20;
  CFStringRef NetworkInterfaceEntity;
  CFStringRef v22;
  CFStringRef v23;
  int v24;
  const __SCDynamicStore *v25;
  NSObject *v26;
  os_log_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  int v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  const char *v49;
  const char *v50;

  v2 = (os_log_t)qword_10007DF18;
  if (!qword_10007DF18)
  {
    v2 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
    qword_10007DF18 = (uint64_t)v2;
  }
  v3 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v2, v3))
  {
    v4 = _os_log_pack_size(2);
    v7 = (char *)&v50 - ((__chkstk_darwin(v4, v5, v6) + 15) & 0xFFFFFFFFFFFFFFF0);
    v8 = __error();
    *(_WORD *)_os_log_pack_fill(v7, v4, *v8, &_mh_execute_header, "load() called") = 0;
    __SC_log_send(7, v2, v3, v7);
  }
  v9 = (os_log_t)qword_10007DF18;
  if (!qword_10007DF18)
  {
    v9 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
    qword_10007DF18 = (uint64_t)v9;
  }
  v10 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v9, v10))
  {
    v11 = _os_log_pack_size(12);
    v14 = (char *)&v50 - ((__chkstk_darwin(v11, v12, v13) + 15) & 0xFFFFFFFFFFFFFFF0);
    v15 = __error();
    v16 = _os_log_pack_fill(v14, v11, *v15, &_mh_execute_header, "  bundle ID = %@");
    Identifier = CFBundleGetIdentifier(a1);
    *(_DWORD *)v16 = 138412290;
    *(_QWORD *)(v16 + 4) = Identifier;
    __SC_log_send(7, v9, v10, v14);
  }
  qword_10007DEF8 = (uint64_t)CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  qword_10007DF00 = (uint64_t)CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  qword_10007DF08 = (uint64_t)SCDynamicStoreCreate(0, CFSTR("Link Configuraton plug-in"), (SCDynamicStoreCallBack)sub_1000574DC, 0);
  if (!qword_10007DF08)
  {
    v27 = (os_log_t)qword_10007DF18;
    if (!qword_10007DF18)
    {
      v27 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
      qword_10007DF18 = (uint64_t)v27;
    }
    v28 = _SC_syslog_os_log_mapping(3);
    if (!__SC_log_enabled(3, v27, v28))
      goto LABEL_30;
    v35 = _os_log_pack_size(12);
    v32 = (char *)&v50 - ((__chkstk_darwin(v35, v36, v37) + 15) & 0xFFFFFFFFFFFFFFF0);
    v38 = __error();
    v39 = _os_log_pack_fill(v32, v35, *v38, &_mh_execute_header, "SCDynamicStoreCreate() failed: %s", v50);
    v40 = SCError();
    v41 = SCErrorString(v40);
    *(_DWORD *)v39 = 136315138;
    *(_QWORD *)(v39 + 4) = v41;
    v42 = 3;
    goto LABEL_29;
  }
  Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  v19 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  qword_10007DF10 = (uint64_t)SCDynamicStoreKeyCreateNetworkInterface(0, kSCDynamicStoreDomainState);
  CFArrayAppendValue(Mutable, (const void *)qword_10007DF10);
  v20 = CFStringCreateWithFormat(0, 0, CFSTR("%@%@/%@/%@/%@/%@"), &stru_100077E20, kSCDynamicStoreDomainSetup, kSCCompNetwork, CFSTR("Override"), CFSTR("InterfaceType"), kSCNetworkInterfaceTypeIEEE80211);
  CFArrayAppendValue(Mutable, v20);
  CFRelease(v20);
  NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainSetup, kSCCompAnyRegex, kSCEntNetAirPort);
  CFArrayAppendValue(v19, NetworkInterfaceEntity);
  CFRelease(NetworkInterfaceEntity);
  v22 = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainSetup, kSCCompAnyRegex, kSCEntNetEthernet);
  CFArrayAppendValue(v19, v22);
  CFRelease(v22);
  if (_os_feature_enabled_impl("Network", "low_data_mode"))
  {
    v23 = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainSetup, kSCCompAnyRegex, 0);
    CFArrayAppendValue(v19, v23);
    CFRelease(v23);
  }
  v24 = SCDynamicStoreSetNotificationKeys((SCDynamicStoreRef)qword_10007DF08, Mutable, v19);
  CFRelease(Mutable);
  CFRelease(v19);
  if (!v24)
  {
    v27 = (os_log_t)qword_10007DF18;
    if (!qword_10007DF18)
    {
      v27 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
      qword_10007DF18 = (uint64_t)v27;
    }
    v28 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v27, v28))
      goto LABEL_30;
    v43 = _os_log_pack_size(12);
    v32 = (char *)&v50 - ((__chkstk_darwin(v43, v44, v45) + 15) & 0xFFFFFFFFFFFFFFF0);
    v46 = *__error();
    v34 = _os_log_pack_fill(v32, v43, v46, &_mh_execute_header, "SCDynamicStoreSetNotificationKeys() failed: %s");
LABEL_28:
    v47 = v34;
    v48 = SCError();
    v49 = SCErrorString(v48);
    *(_DWORD *)v47 = 136315138;
    *(_QWORD *)(v47 + 4) = v49;
    v42 = 5;
LABEL_29:
    __SC_log_send(v42, v27, v28, v32);
LABEL_30:
    if (qword_10007DEF8)
      CFRelease((CFTypeRef)qword_10007DEF8);
    if (qword_10007DF00)
      CFRelease((CFTypeRef)qword_10007DF00);
    if (qword_10007DF08)
      CFRelease((CFTypeRef)qword_10007DF08);
    return;
  }
  v25 = (const __SCDynamicStore *)qword_10007DF08;
  v26 = qword_10007DF38;
  if (!qword_10007DF38)
  {
    v26 = dispatch_queue_create("com.apple.SystemConfiguration.LinkConfiguration", 0);
    qword_10007DF38 = (uint64_t)v26;
  }
  if (!SCDynamicStoreSetDispatchQueue(v25, v26))
  {
    v27 = (os_log_t)qword_10007DF18;
    if (!qword_10007DF18)
    {
      v27 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
      qword_10007DF18 = (uint64_t)v27;
    }
    v28 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v27, v28))
      goto LABEL_30;
    v29 = _os_log_pack_size(12);
    v32 = (char *)&v50 - ((__chkstk_darwin(v29, v30, v31) + 15) & 0xFFFFFFFFFFFFFFF0);
    v33 = *__error();
    v34 = _os_log_pack_fill(v32, v29, v33, &_mh_execute_header, "SCDynamicStoreSetDispatchQueue() failed: %s");
    goto LABEL_28;
  }
}

uint64_t sub_1000574DC(const __SCDynamicStore *a1, const __CFArray *a2)
{
  const __CFArray *v2;
  const __SCDynamicStore *v3;
  CFDictionaryRef v4;
  const __CFDictionary *v5;
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  const __CFString *v9;
  const __CFString *ValueAtIndex;
  void *Value;
  CFTypeID TypeID;
  const void *v13;
  CFTypeID v14;
  CFIndex v15;
  const __CFString *v16;
  CFPropertyListRef v17;
  CFTypeID v18;
  const void *v19;
  CFTypeID v20;
  CFAbsoluteTime Current;
  const __CFDate *v22;
  CFComparisonResult v23;
  const void *v24;
  const __CFArray *ArrayBySeparatingStrings;
  CFIndex v26;
  CFIndex v27;
  __CFString *v28;
  const void *v29;
  CFIndex v30;
  int v31;
  CFDictionaryRef v32;
  __CFArray *Mutable;
  uint64_t v34;
  CFIndex i;
  const __CFString *v36;
  CFStringRef NetworkInterfaceEntity;
  const void *v38;
  CFIndex v39;
  BOOL v40;
  int v41;
  __CFString *v42;
  void *v43;
  const void *v44;
  const void *v45;
  CFTypeID v46;
  const void *v47;
  CFTypeID v48;
  uint64_t result;
  CFIndex v50;
  const __CFDictionary *v51;
  const __CFArray *v52;
  const __SCDynamicStore *store;
  const __CFDictionary *theDict;
  CFRange v55;

  v2 = a2;
  v3 = a1;
  v4 = SCDynamicStoreCopyMultiple(a1, a2, 0);
  if (v4)
  {
    v5 = v4;
    Count = CFArrayGetCount(v2);
    if (Count >= 1)
    {
      v7 = Count;
      v8 = 0;
      v9 = kSCNetworkInterfaceTypeIEEE80211;
      v52 = v2;
      store = v3;
      v50 = Count;
      v51 = v5;
      while (1)
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v2, v8);
        Value = (void *)CFDictionaryGetValue(v5, ValueAtIndex);
        TypeID = CFDictionaryGetTypeID();
        if (Value && CFGetTypeID(Value) != TypeID)
          Value = 0;
        if (CFEqual(ValueAtIndex, (CFTypeRef)qword_10007DF10))
        {
          if (!Value)
            goto LABEL_70;
          v13 = CFDictionaryGetValue((CFDictionaryRef)Value, kSCPropNetInterfaces);
          v14 = CFArrayGetTypeID();
          if (!v13 || CFGetTypeID(v13) != v14)
            goto LABEL_70;
          if (qword_10007DF20)
            v15 = CFArrayGetCount((CFArrayRef)qword_10007DF20);
          else
            v15 = 0;
          v30 = CFArrayGetCount((CFArrayRef)v13);
          v31 = _os_feature_enabled_impl("Network", "low_data_mode");
          v32 = 0;
          Mutable = 0;
          if (v31 && v30 >= 1)
          {
            v34 = CFArrayGetCount((CFArrayRef)v13);
            Mutable = CFArrayCreateMutable(0, v34, &kCFTypeArrayCallBacks);
            if (v34 >= 1)
            {
              for (i = 0; i != v34; ++i)
              {
                v36 = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v13, i);
                NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainSetup, v36, 0);
                CFArrayAppendValue(Mutable, NetworkInterfaceEntity);
                CFRelease(NetworkInterfaceEntity);
              }
            }
            v32 = SCDynamicStoreCopyMultiple(store, Mutable, 0);
          }
          theDict = v32;
          if (v30 >= 1)
          {
            v39 = 0;
            if (Mutable)
              v40 = v32 == 0;
            else
              v40 = 1;
            v41 = !v40;
            do
            {
              v42 = (__CFString *)CFArrayGetValueAtIndex((CFArrayRef)v13, v39);
              if (!CFStringHasPrefix(v42, CFSTR("pktap")))
              {
                if (!v15
                  || (v55.location = 0, v55.length = v15, !CFArrayContainsValue((CFArrayRef)qword_10007DF20, v55, v42)))
                {
                  v43 = (void *)CFDictionaryGetValue((CFDictionaryRef)qword_10007DF00, v42);
                  sub_100057AE0(v42, v43);
                  if (v41)
                  {
                    v44 = CFArrayGetValueAtIndex(Mutable, v39);
                    v45 = CFDictionaryGetValue(theDict, v44);
                    v46 = CFDictionaryGetTypeID();
                    if (v45)
                    {
                      if (CFGetTypeID(v45) == v46)
                        v47 = v45;
                      else
                        v47 = 0;
                    }
                    else
                    {
                      v47 = 0;
                    }
                    sub_100057D78(v42, v47);
                  }
                }
              }
              ++v39;
            }
            while (v30 != v39);
          }
          if (qword_10007DF20)
            CFRelease((CFTypeRef)qword_10007DF20);
          qword_10007DF20 = (uint64_t)CFRetain(v13);
          v2 = v52;
          v3 = store;
          if (Mutable)
            CFRelease(Mutable);
          v7 = v50;
          v5 = v51;
          v29 = theDict;
          if (!theDict)
            goto LABEL_70;
          goto LABEL_69;
        }
        if (CFStringHasSuffix(ValueAtIndex, v9))
          break;
        ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, ValueAtIndex, CFSTR("/"));
        v26 = CFArrayGetCount(ArrayBySeparatingStrings);
        if (v26 <= 3)
        {
          v29 = ArrayBySeparatingStrings;
          goto LABEL_69;
        }
        v27 = v26;
        v28 = (__CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 3);
        CFRetain(v28);
        if (v27 == 4)
        {
          CFRelease(ArrayBySeparatingStrings);
          if (!v28)
            goto LABEL_70;
          goto LABEL_67;
        }
        v38 = CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 4);
        CFRetain(v38);
        CFRelease(ArrayBySeparatingStrings);
        if (v28)
        {
          if (v38)
          {
            sub_100057AE0(v28, Value);
            CFRelease(v38);
            goto LABEL_68;
          }
LABEL_67:
          sub_100057D78(v28, Value);
LABEL_68:
          v29 = v28;
LABEL_69:
          CFRelease(v29);
        }
LABEL_70:
        ++v8;
        v9 = kSCNetworkInterfaceTypeIEEE80211;
        if (v8 == v7)
          goto LABEL_80;
      }
      v16 = CFStringCreateWithFormat(0, 0, CFSTR("%@%@/%@/%@/%@/%@"), &stru_100077E20, kSCDynamicStoreDomainSetup, kSCCompNetwork, CFSTR("Override"), CFSTR("InterfaceType"), v9);
      v17 = SCDynamicStoreCopyValue(v3, v16);
      CFRelease(v16);
      v18 = CFDictionaryGetTypeID();
      if (!v17)
      {
        sub_100058010(0);
        sub_100058278();
        goto LABEL_70;
      }
      if (CFGetTypeID(v17) != v18)
        goto LABEL_19;
      v19 = CFDictionaryGetValue((CFDictionaryRef)v17, CFSTR("Expiration"));
      v20 = CFDateGetTypeID();
      if (!v19)
      {
LABEL_20:
        LODWORD(v24) = 0;
        goto LABEL_21;
      }
      if (CFGetTypeID(v19) != v20
        || (Current = CFAbsoluteTimeGetCurrent(),
            v22 = CFDateCreate(0, Current),
            v23 = CFDateCompare(v22, (CFDateRef)v19, 0),
            CFRelease(v22),
            v23 != kCFCompareLessThan))
      {
LABEL_19:
        v19 = 0;
        goto LABEL_20;
      }
      v24 = CFDictionaryGetValue((CFDictionaryRef)v17, CFSTR("Cost"));
      v48 = CFStringGetTypeID();
      if (v24)
      {
        if (CFGetTypeID(v24) != v48)
          goto LABEL_19;
        if (CFEqual(v24, CFSTR("Expensive")))
        {
          LODWORD(v24) = 2;
        }
        else
        {
          if (!CFEqual(v24, CFSTR("Inexpensive")))
            goto LABEL_19;
          LODWORD(v24) = 1;
        }
        v19 = CFRetain(v19);
      }
      else
      {
        v19 = 0;
      }
LABEL_21:
      CFRelease(v17);
      sub_100058010((int)v24);
      if ((_DWORD)v24)
      {
        if (v19)
        {
          sub_1000583B0((const __CFDate *)v19);
LABEL_31:
          v29 = v19;
          goto LABEL_69;
        }
      }
      else
      {
        sub_100058278();
        if (v19)
          goto LABEL_31;
      }
      goto LABEL_70;
    }
LABEL_80:
    CFRelease(v5);
  }
  result = dword_10007D99C;
  if ((dword_10007D99C & 0x80000000) == 0)
  {
    result = close(dword_10007D99C);
    dword_10007D99C = -1;
  }
  return result;
}

void sub_100057AE0(void *key, void *value)
{
  uint64_t v4;
  const __SCNetworkInterface *v5;
  __CFDictionary *MutableCopy;
  CFNumberRef v7;
  CFNumberRef v8;
  uint64_t v9;
  const void *v10;
  const void *v11;
  int mtu_cur;
  CFDictionaryRef current;
  int valuePtr;

  if (value)
  {
    CFDictionarySetValue((CFMutableDictionaryRef)qword_10007DF00, key, value);
    v4 = _SCNetworkInterfaceCreateWithBSDName(0, key, 0xFFFFFFFFLL);
    if (!v4)
      return;
    v5 = (const __SCNetworkInterface *)v4;
    if (!CFDictionaryContainsKey((CFDictionaryRef)qword_10007DEF8, key))
    {
      valuePtr = -1;
      current = 0;
      mtu_cur = -1;
      MutableCopy = 0;
      if (SCNetworkInterfaceCopyMediaOptions(v5, &current, 0, 0, 0) && current)
      {
        MutableCopy = CFDictionaryCreateMutableCopy(0, 0, current);
        CFRelease(current);
      }
      if (SCNetworkInterfaceCopyMTU(v5, &mtu_cur, 0, 0) && mtu_cur != -1)
      {
        if (!MutableCopy)
          MutableCopy = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        v7 = CFNumberCreate(0, kCFNumberIntType, &mtu_cur);
        CFDictionaryAddValue(MutableCopy, kSCPropNetEthernetMTU, v7);
        CFRelease(v7);
      }
      valuePtr = __SCNetworkInterfaceCreateCapabilities(v5, 0xFFFFFFFFLL, 0);
      if (valuePtr != -1)
      {
        if (!MutableCopy)
          MutableCopy = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        v8 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        CFDictionaryAddValue(MutableCopy, CFSTR("_CAPABILITIES_"), v8);
        CFRelease(v8);
      }
      if (MutableCopy)
      {
        CFDictionarySetValue((CFMutableDictionaryRef)qword_10007DEF8, key, MutableCopy);
        CFRelease(MutableCopy);
      }
    }
    sub_100058E60(v5, (uint64_t)value);
    sub_10005907C(v5, value);
    sub_100059850(v5, value);
  }
  else
  {
    CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_10007DF00, key);
    v9 = _SCNetworkInterfaceCreateWithBSDName(0, key, 0xFFFFFFFFLL);
    if (!v9)
      return;
    v5 = (const __SCNetworkInterface *)v9;
    v10 = CFDictionaryGetValue((CFDictionaryRef)qword_10007DEF8, key);
    if (v10)
    {
      v11 = v10;
      sub_100058E60(v5, (uint64_t)v10);
      sub_10005907C(v5, v11);
      sub_100059850(v5, v11);
      CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_10007DEF8, key);
    }
  }
  CFRelease(v5);
}

uint64_t sub_100057D78(const __CFString *a1, const void *a2)
{
  uint64_t v4;
  const void *v5;
  int v6;
  CFTypeID TypeID;
  const void *Value;
  CFTypeID v9;
  int v10;
  os_log_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  _BYTE v26[4];
  int valuePtr;

  v4 = _SCNetworkInterfaceCreateWithBSDName(0, a1, 0);
  if (v4)
  {
    v5 = (const void *)v4;
    v6 = SCNetworkInterfaceSupportsLowDataMode(v4);
    CFRelease(v5);
    if (v6)
    {
      TypeID = CFDictionaryGetTypeID();
      v10 = a2
         && CFGetTypeID(a2) == TypeID
         && (valuePtr = 0,
             Value = CFDictionaryGetValue((CFDictionaryRef)a2, kSCPropEnableLowDataMode),
             v9 = CFNumberGetTypeID(),
             Value)
         && CFGetTypeID(Value) == v9
         && CFNumberGetValue((CFNumberRef)Value, kCFNumberIntType, &valuePtr)
         && valuePtr != 0;
      return sub_100059E1C(a1, v10);
    }
    v11 = (os_log_t)qword_10007DF18;
    if (!qword_10007DF18)
    {
      v11 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
      qword_10007DF18 = (uint64_t)v11;
    }
    v12 = _SC_syslog_os_log_mapping(6);
    result = __SC_log_enabled(6, v11, v12);
    if ((_DWORD)result)
    {
      v21 = _os_log_pack_size(12);
      v17 = &v26[-((__chkstk_darwin(v21, v22, v23) + 15) & 0xFFFFFFFFFFFFFFF0)];
      v24 = __error();
      v25 = _os_log_pack_fill(v17, v21, *v24, &_mh_execute_header, "LowDataMode not supported with %@");
      *(_DWORD *)v25 = 138412290;
      *(_QWORD *)(v25 + 4) = a1;
      v20 = 6;
      return __SC_log_send(v20, v11, v12, v17);
    }
  }
  else
  {
    v11 = (os_log_t)qword_10007DF18;
    if (!qword_10007DF18)
    {
      v11 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
      qword_10007DF18 = (uint64_t)v11;
    }
    v12 = _SC_syslog_os_log_mapping(5);
    result = __SC_log_enabled(5, v11, v12);
    if ((_DWORD)result)
    {
      v14 = _os_log_pack_size(12);
      v17 = &v26[-((__chkstk_darwin(v14, v15, v16) + 15) & 0xFFFFFFFFFFFFFFF0)];
      v18 = __error();
      v19 = _os_log_pack_fill(v17, v14, *v18, &_mh_execute_header, "Failed to create SCNetworkInterface for %@");
      *(_DWORD *)v19 = 138412290;
      *(_QWORD *)(v19 + 4) = a1;
      v20 = 5;
      return __SC_log_send(v20, v11, v12, v17);
    }
  }
  return result;
}

uint64_t sub_100058010(int a1)
{
  uint64_t result;
  const __CFString *v3;
  int v4;
  os_log_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  const char *v13;
  os_log_t v14;
  uint64_t v15;
  char *v16;
  os_log_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;

  result = sub_100058668();
  if (result)
  {
    v3 = (const __CFString *)result;
    if (a1)
    {
      v4 = a1 == 2;
      v5 = (os_log_t)qword_10007DF18;
      if (!qword_10007DF18)
      {
        v5 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
        qword_10007DF18 = (uint64_t)v5;
      }
      v6 = _SC_syslog_os_log_mapping(5);
      if (!__SC_log_enabled(5, v5, v6))
        return sub_100058858(v3, v4);
      v7 = _os_log_pack_size(22);
      v10 = (char *)&v26 - ((__chkstk_darwin(v7, v8, v9) + 15) & 0xFFFFFFFFFFFFFFF0);
      v11 = __error();
      v12 = _os_log_pack_fill(v10, v7, *v11, &_mh_execute_header, "%@: Wi-Fi using %sexpensive override");
      v13 = "in";
      if (a1 == 2)
        v13 = "";
      *(_DWORD *)v12 = 138412546;
      *(_QWORD *)(v12 + 4) = v3;
      *(_WORD *)(v12 + 12) = 2080;
      *(_QWORD *)(v12 + 14) = v13;
      v14 = v5;
      v15 = v6;
      v16 = v10;
    }
    else
    {
      v4 = sub_10005A240();
      v17 = (os_log_t)qword_10007DF18;
      if (!qword_10007DF18)
      {
        v17 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
        qword_10007DF18 = (uint64_t)v17;
      }
      v18 = _SC_syslog_os_log_mapping(5);
      if (!__SC_log_enabled(5, v17, v18))
        return sub_100058858(v3, v4);
      v19 = _os_log_pack_size(22);
      v22 = (char *)&v26 - ((__chkstk_darwin(v19, v20, v21) + 15) & 0xFFFFFFFFFFFFFFF0);
      v23 = __error();
      v24 = _os_log_pack_fill(v22, v19, *v23, &_mh_execute_header, "%@: Wi-Fi is %sexpensive");
      v25 = "";
      if (!v4)
        v25 = "in";
      *(_DWORD *)v24 = 138412546;
      *(_QWORD *)(v24 + 4) = v3;
      *(_WORD *)(v24 + 12) = 2080;
      *(_QWORD *)(v24 + 14) = v25;
      v14 = v17;
      v15 = v18;
      v16 = v22;
    }
    __SC_log_send(5, v14, v15, v16);
    return sub_100058858(v3, v4);
  }
  return result;
}

void sub_100058278()
{
  os_log_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  int *v4;
  uint64_t v5;

  if (qword_10007DF30)
  {
    v0 = (os_log_t)qword_10007DF18;
    if (!qword_10007DF18)
    {
      v0 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
      qword_10007DF18 = (uint64_t)v0;
    }
    v1 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v0, v1))
    {
      v2 = _os_log_pack_size(2);
      v3 = (char *)&v5 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
      v4 = __error();
      *(_WORD *)_os_log_pack_fill(v3, v2, *v4, &_mh_execute_header, "Wi-Fi expensive timer cancelled") = 0;
      __SC_log_send(5, v0, v1, v3);
    }
    dispatch_source_cancel((dispatch_source_t)qword_10007DF30);
    dispatch_release((dispatch_object_t)qword_10007DF30);
    qword_10007DF30 = 0;
  }
}

void sub_1000583B0(const __CFDate *a1)
{
  os_log_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  double Current;
  double AbsoluteTime;
  os_log_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  dispatch_time_t v21;
  NSObject *v22;
  double v23[3];

  sub_100058278();
  v2 = (os_log_t)qword_10007DF18;
  if (!qword_10007DF18)
  {
    v2 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
    qword_10007DF18 = (uint64_t)v2;
  }
  v3 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v2, v3))
  {
    v4 = _os_log_pack_size(12);
    v7 = (char *)v23 - ((__chkstk_darwin(v4, v5, v6) + 15) & 0xFFFFFFFFFFFFFFF0);
    v8 = __error();
    v9 = _os_log_pack_fill(v7, v4, *v8, &_mh_execute_header, "Wi-Fi expensive expiration time %@");
    *(_DWORD *)v9 = 138412290;
    *(_QWORD *)(v9 + 4) = a1;
    __SC_log_send(5, v2, v3, v7);
  }
  Current = CFAbsoluteTimeGetCurrent();
  AbsoluteTime = CFDateGetAbsoluteTime(a1);
  v12 = (os_log_t)qword_10007DF18;
  if (!qword_10007DF18)
  {
    v12 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
    qword_10007DF18 = (uint64_t)v12;
  }
  v13 = AbsoluteTime - Current;
  v14 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v12, v14))
  {
    v15 = _os_log_pack_size(32);
    v18 = (char *)v23 - ((__chkstk_darwin(v15, v16, v17) + 15) & 0xFFFFFFFFFFFFFFF0);
    v19 = __error();
    v20 = _os_log_pack_fill(v18, v15, *v19, &_mh_execute_header, "expiration %g - now %g = %g", v23[0], v23[1], v23[2]);
    *(_DWORD *)v20 = 134218496;
    *(double *)(v20 + 4) = AbsoluteTime;
    *(_WORD *)(v20 + 12) = 2048;
    *(double *)(v20 + 14) = Current;
    *(_WORD *)(v20 + 22) = 2048;
    *(double *)(v20 + 24) = v13;
    __SC_log_send(7, v12, v14, v18);
  }
  v21 = dispatch_time(0xFFFFFFFFFFFFFFFELL, (uint64_t)(v13 * 1000000000.0));
  v22 = qword_10007DF38;
  if (!qword_10007DF38)
  {
    v22 = dispatch_queue_create("com.apple.SystemConfiguration.LinkConfiguration", 0);
    qword_10007DF38 = (uint64_t)v22;
  }
  qword_10007DF30 = (uint64_t)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v22);
  dispatch_source_set_event_handler((dispatch_source_t)qword_10007DF30, &stru_1000770B8);
  dispatch_source_set_timer((dispatch_source_t)qword_10007DF30, v21, 0xFFFFFFFFFFFFFFFFLL, 0);
  dispatch_resume((dispatch_object_t)qword_10007DF30);
}

uint64_t sub_100058668()
{
  const __CFArray *v0;
  const __CFArray *v1;
  CFIndex Count;
  CFIndex v3;
  CFIndex v4;
  const __SCNetworkInterface *ValueAtIndex;
  const __CFString *BSDName;
  CFStringRef InterfaceType;
  CFStringRef v9;
  os_log_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (qword_10007DF28)
    return qword_10007DF28;
  v0 = SCNetworkInterfaceCopyAll();
  if (!v0)
  {
LABEL_10:
    qword_10007DF28 = 0;
    return qword_10007DF28;
  }
  v1 = v0;
  Count = CFArrayGetCount(v0);
  if (Count < 1)
  {
LABEL_9:
    CFRelease(v1);
    goto LABEL_10;
  }
  v3 = Count;
  v4 = 0;
  while (1)
  {
    ValueAtIndex = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v1, v4);
    BSDName = SCNetworkInterfaceGetBSDName(ValueAtIndex);
    InterfaceType = SCNetworkInterfaceGetInterfaceType(ValueAtIndex);
    if (CFEqual(InterfaceType, kSCNetworkInterfaceTypeIEEE80211))
    {
      if (BSDName && CFStringHasPrefix(BSDName, CFSTR("en")))
        break;
    }
    if (v3 == ++v4)
      goto LABEL_9;
  }
  v9 = SCNetworkInterfaceGetBSDName(ValueAtIndex);
  CFRetain(v9);
  CFRelease(v1);
  qword_10007DF28 = (uint64_t)v9;
  if (v9)
  {
    v10 = (os_log_t)qword_10007DF18;
    if (!qword_10007DF18)
    {
      v10 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
      qword_10007DF18 = (uint64_t)v10;
    }
    v11 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v10, v11))
    {
      v12 = _os_log_pack_size(12);
      v13 = (char *)&v17 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
      v14 = __error();
      v15 = _os_log_pack_fill(v13, v12, *v14, &_mh_execute_header, "Wi-Fi is %@");
      v16 = qword_10007DF28;
      *(_DWORD *)v15 = 138412290;
      *(_QWORD *)(v15 + 4) = v16;
      __SC_log_send(5, v10, v11, v13);
    }
  }
  return qword_10007DF28;
}

uint64_t sub_100058858(const __CFString *a1, int a2)
{
  uint64_t result;
  int v5;
  os_log_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  const char *v14;
  os_log_t v15;
  uint64_t v16;
  char *v17;
  os_log_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int *v24;
  uint64_t v25;
  const char *v26;
  char buffer[16];

  result = sub_100058ACC((uint64_t)"set_expensive");
  if ((result & 0x80000000) == 0)
  {
    v5 = result;
    if (CFStringGetCString(a1, buffer, 16, 0x8000100u))
    {
      result = sub_100058C40(v5, (uint64_t)buffer, a2);
      if ((result & 0x80000000) == 0)
      {
        v6 = (os_log_t)qword_10007DF18;
        if (!qword_10007DF18)
        {
          v6 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
          qword_10007DF18 = (uint64_t)v6;
        }
        v7 = _SC_syslog_os_log_mapping(5);
        result = __SC_log_enabled(5, v6, v7);
        if ((_DWORD)result)
        {
          v8 = _os_log_pack_size(22);
          v11 = &buffer[-((__chkstk_darwin(v8, v9, v10) + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
          v12 = __error();
          v13 = _os_log_pack_fill(v11, v8, *v12, &_mh_execute_header, "%s expensive on %s success", v26, *(const char **)buffer);
          v14 = "enable";
          if (!a2)
            v14 = "disable";
          *(_DWORD *)v13 = 136315394;
          *(_QWORD *)(v13 + 4) = v14;
          *(_WORD *)(v13 + 12) = 2080;
          *(_QWORD *)(v13 + 14) = buffer;
          v15 = v6;
          v16 = v7;
          v17 = v11;
          return __SC_log_send(5, v15, v16, v17);
        }
      }
    }
    else
    {
      v18 = (os_log_t)qword_10007DF18;
      if (!qword_10007DF18)
      {
        v18 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
        qword_10007DF18 = (uint64_t)v18;
      }
      v19 = _SC_syslog_os_log_mapping(5);
      result = __SC_log_enabled(5, v18, v19);
      if ((_DWORD)result)
      {
        v20 = _os_log_pack_size(22);
        v23 = &buffer[-((__chkstk_darwin(v20, v21, v22) + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
        v24 = __error();
        v25 = _os_log_pack_fill(v23, v20, *v24, &_mh_execute_header, "%s: can't convert %@ to string");
        *(_DWORD *)v25 = 136315394;
        *(_QWORD *)(v25 + 4) = "set_expensive";
        *(_WORD *)(v25 + 12) = 2112;
        *(_QWORD *)(v25 + 14) = a1;
        v15 = v18;
        v16 = v19;
        v17 = v23;
        return __SC_log_send(5, v15, v16, v17);
      }
    }
  }
  return result;
}

uint64_t sub_100058ACC(uint64_t a1)
{
  os_log_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int *v6;
  uint64_t v7;
  int *v8;
  char *v9;
  const char *v11[2];

  if (dword_10007D99C < 0)
  {
    dword_10007D99C = socket(2, 2, 0);
    if (dword_10007D99C < 0)
    {
      v2 = (os_log_t)qword_10007DF18;
      if (!qword_10007DF18)
      {
        v2 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
        qword_10007DF18 = (uint64_t)v2;
      }
      v3 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v2, v3))
      {
        v4 = _os_log_pack_size(22);
        v5 = (char *)v11 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
        v6 = __error();
        v7 = _os_log_pack_fill(v5, v4, *v6, &_mh_execute_header, "%s: socket() failed: %s", v11[0], v11[1]);
        v8 = __error();
        v9 = strerror(*v8);
        *(_DWORD *)v7 = 136315394;
        *(_QWORD *)(v7 + 4) = a1;
        *(_WORD *)(v7 + 12) = 2080;
        *(_QWORD *)(v7 + 14) = v9;
        __SC_log_send(3, v2, v3, v5);
      }
    }
  }
  return dword_10007D99C;
}

uint64_t sub_100058C40(int a1, uint64_t a2, int a3)
{
  uint64_t v6;
  os_log_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  int v13;
  int *v14;
  char *v15;
  __int128 v17;
  __int128 v18;

  v17 = 0u;
  v18 = 0u;
  __strlcpy_chk(&v17, a2, 16, 16);
  LODWORD(v18) = a3 != 0;
  v6 = ioctl(a1, 0xC02069A1uLL, &v17);
  if ((v6 & 0x80000000) != 0)
  {
    v7 = (os_log_t)qword_10007DF18;
    if (!qword_10007DF18)
    {
      v7 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
      qword_10007DF18 = (uint64_t)v7;
    }
    v8 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v7, v8))
    {
      v9 = _os_log_pack_size(28);
      v10 = (char *)&v17 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
      v11 = __error();
      v12 = _os_log_pack_fill(v10, v9, *v11, &_mh_execute_header, "ioctl(%s, SIOCSIFEXPENSIVE %u failed, %s", (const char *)v17, DWORD2(v17), (const char *)v18);
      v13 = v18;
      v14 = __error();
      v15 = strerror(*v14);
      *(_DWORD *)v12 = 136315650;
      *(_QWORD *)(v12 + 4) = a2;
      *(_WORD *)(v12 + 12) = 1024;
      *(_DWORD *)(v12 + 14) = v13;
      *(_WORD *)(v12 + 18) = 2080;
      *(_QWORD *)(v12 + 20) = v15;
      __SC_log_send(3, v7, v8, v10);
    }
  }
  return v6;
}

void sub_100058DF0(id a1)
{
  sub_100058010(0);
  sub_100058278();
  if ((dword_10007D99C & 0x80000000) == 0)
  {
    close(dword_10007D99C);
    dword_10007D99C = -1;
  }
}

uint64_t sub_100058E60(const __SCNetworkInterface *a1, uint64_t a2)
{
  uint64_t result;
  const void *v5;
  uint64_t v6;
  const __CFDictionary *Value;
  uint64_t v8;
  const __CFNumber *v9;
  unsigned int v10;
  os_log_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int *v17;
  uint64_t v18;
  int *v19;
  char *v20;
  uint64_t v21;
  unsigned int valuePtr;
  __int128 v23;
  __int128 v24;

  result = (uint64_t)SCNetworkInterfaceGetBSDName(a1);
  if (result)
  {
    v5 = (const void *)result;
    result = __SCNetworkInterfaceCreateCapabilities(a1, 0xFFFFFFFFLL, 0);
    if ((_DWORD)result != -1)
    {
      v6 = result;
      valuePtr = result;
      Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_10007DEF8, v5);
      v8 = v6;
      if (Value)
      {
        v9 = (const __CFNumber *)CFDictionaryGetValue(Value, CFSTR("_CAPABILITIES_"));
        v8 = v6;
        if (v9)
        {
          CFNumberGetValue(v9, kCFNumberIntType, &valuePtr);
          v8 = valuePtr;
        }
      }
      result = __SCNetworkInterfaceCreateCapabilities(a1, v8, a2);
      if ((_DWORD)result != (_DWORD)v6)
      {
        v10 = result;
        v23 = 0u;
        v24 = 0u;
        _SC_cfstring_to_cstring(v5, &v23, 16, 1536);
        *(_QWORD *)&v24 = __PAIR64__(v6, v10);
        result = sub_100058ACC((uint64_t)"_SCNetworkInterfaceSetCapabilities");
        if ((_DWORD)result != -1)
        {
          result = ioctl(result, 0x8020695AuLL, &v23);
          if ((_DWORD)result == -1)
          {
            v11 = (os_log_t)qword_10007DF18;
            if (!qword_10007DF18)
            {
              v11 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
              qword_10007DF18 = (uint64_t)v11;
            }
            v12 = _SC_syslog_os_log_mapping(3);
            result = __SC_log_enabled(3, v11, v12);
            if ((_DWORD)result)
            {
              v13 = _os_log_pack_size(22);
              v16 = (char *)&v21 - ((__chkstk_darwin(v13, v14, v15) + 15) & 0xFFFFFFFFFFFFFFF0);
              v17 = __error();
              v18 = _os_log_pack_fill(v16, v13, *v17, &_mh_execute_header, "%@: ioctl(SIOCSIFCAP) failed: %s");
              v19 = __error();
              v20 = strerror(*v19);
              *(_DWORD *)v18 = 138412546;
              *(_QWORD *)(v18 + 4) = v5;
              *(_WORD *)(v18 + 12) = 2080;
              *(_QWORD *)(v18 + 14) = v20;
              return __SC_log_send(3, v11, v12, v16);
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_10005907C(const void *a1, const void *a2)
{
  CFTypeID TypeID;
  CFStringRef BSDName;
  CFStringRef v6;
  __CFDictionary *v7;
  const void *Value;
  const __CFArray *v9;
  unsigned int MediaOptions;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;
  os_log_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int *v21;
  uint64_t v22;
  int v23;
  int v24;
  os_log_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  int *v31;
  _DWORD *v32;
  os_log_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  os_log_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  int *v47;
  uint64_t v48;
  os_log_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int *v68;
  char *v69;
  char v70;
  CFDictionaryRef current;
  CFArrayRef available;
  __int128 v73;
  unsigned __int128 v74;
  __int128 v75;
  _DWORD v76[7];
  CFRange v77;

  current = 0;
  available = 0;
  TypeID = SCNetworkInterfaceGetTypeID();
  if (!a1 || CFGetTypeID(a1) != TypeID)
  {
    _SCErrorSet(1002);
    return;
  }
  v75 = 0u;
  memset(v76, 0, sizeof(v76));
  v73 = 0u;
  v74 = 0u;
  BSDName = SCNetworkInterfaceGetBSDName((SCNetworkInterfaceRef)a1);
  if (BSDName)
  {
    v6 = BSDName;
    if (SCNetworkInterfaceCopyMediaOptions((SCNetworkInterfaceRef)a1, &current, 0, &available, 0))
    {
      v7 = sub_100059A80(a2);
      if (!v7)
      {
        Value = CFDictionaryGetValue((CFDictionaryRef)qword_10007DEF8, v6);
        v7 = sub_100059A80(Value);
        if (!v7)
        {
          v7 = sub_100059A80(current);
          if (!v7)
          {
            v70 = 1;
            goto LABEL_48;
          }
        }
      }
      if (!current || !CFEqual(current, v7))
      {
        v9 = available;
        v77.length = CFArrayGetCount(available);
        v77.location = 0;
        if (CFArrayContainsValue(v9, v77, v7))
        {
          MediaOptions = __SCNetworkInterfaceCreateMediaOptions(a1, v7);
          if (MediaOptions == -1)
            goto LABEL_47;
          v11 = MediaOptions;
          v12 = sub_100058ACC((uint64_t)"_SCNetworkInterfaceSetMediaOptions");
          if (v12 == -1)
            goto LABEL_47;
          v13 = v12;
          v75 = 0u;
          memset(v76, 0, sizeof(v76));
          _SC_cfstring_to_cstring(v6, &v75, 16, 1536);
          if (ioctl(v13, 0xC02C6948uLL, &v75) == -1)
          {
            v33 = (os_log_t)qword_10007DF18;
            if (!qword_10007DF18)
            {
              v33 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
              qword_10007DF18 = (uint64_t)v33;
            }
            v34 = _SC_syslog_os_log_mapping(3);
            if (!__SC_log_enabled(3, v33, v34))
              goto LABEL_47;
            v63 = _os_log_pack_size(22);
            v38 = (char *)&current - ((__chkstk_darwin(v63, v64, v65) + 15) & 0xFFFFFFFFFFFFFFF0);
            v66 = *__error();
            v40 = _os_log_pack_fill(v38, v63, v66, &_mh_execute_header, "%@: ioctl(SIOCGIFXMEDIA) failed: %s", current);
          }
          else
          {
            v73 = v75;
            v14 = v76[0] & 0xF0000000 | v11;
            v74 = v76[0] & 0xF0000000 | (unsigned __int128)v11;
            v15 = (os_log_t)qword_10007DF18;
            if (!qword_10007DF18)
            {
              v15 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
              qword_10007DF18 = (uint64_t)v15;
            }
            v16 = _SC_syslog_os_log_mapping(6);
            if (__SC_log_enabled(6, v15, v16))
            {
              v17 = _os_log_pack_size(14);
              v20 = (char *)&current - ((__chkstk_darwin(v17, v18, v19) + 15) & 0xFFFFFFFFFFFFFFF0);
              v21 = __error();
              v22 = _os_log_pack_fill(v20, v17, *v21, &_mh_execute_header, "old media settings: 0x%8.8x (0x%8.8x)", (_DWORD)current, (_DWORD)available);
              v23 = v76[0];
              v24 = v76[3];
              *(_DWORD *)v22 = 67109376;
              *(_DWORD *)(v22 + 4) = v23;
              *(_WORD *)(v22 + 8) = 1024;
              *(_DWORD *)(v22 + 10) = v24;
              __SC_log_send(6, v15, v16, v20);
            }
            v25 = (os_log_t)qword_10007DF18;
            if (!qword_10007DF18)
            {
              v25 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
              qword_10007DF18 = (uint64_t)v25;
            }
            v26 = _SC_syslog_os_log_mapping(6);
            if (__SC_log_enabled(6, v25, v26))
            {
              v27 = _os_log_pack_size(8);
              v30 = (char *)&current - ((__chkstk_darwin(v27, v28, v29) + 15) & 0xFFFFFFFFFFFFFFF0);
              v31 = __error();
              v32 = (_DWORD *)_os_log_pack_fill(v30, v27, *v31, &_mh_execute_header, "new media settings: 0x%8.8x", (_DWORD)current);
              *v32 = 67109120;
              v32[1] = v14;
              __SC_log_send(6, v25, v26, v30);
            }
            if (ioctl(v13, 0xC0206937uLL, &v73) != -1)
              goto LABEL_47;
            v33 = (os_log_t)qword_10007DF18;
            if (!qword_10007DF18)
            {
              v33 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
              qword_10007DF18 = (uint64_t)v33;
            }
            v34 = _SC_syslog_os_log_mapping(3);
            if (!__SC_log_enabled(3, v33, v34))
              goto LABEL_47;
            v35 = _os_log_pack_size(22);
            v38 = (char *)&current - ((__chkstk_darwin(v35, v36, v37) + 15) & 0xFFFFFFFFFFFFFFF0);
            v39 = *__error();
            v40 = _os_log_pack_fill(v38, v35, v39, &_mh_execute_header, "%@: ioctl(SIOCSIFMEDIA) failed: %s", current);
          }
          v67 = v40;
          v68 = __error();
          v69 = strerror(*v68);
          *(_DWORD *)v67 = 138412546;
          *(_QWORD *)(v67 + 4) = v6;
          *(_WORD *)(v67 + 12) = 2080;
          *(_QWORD *)(v67 + 14) = v69;
          v62 = 3;
        }
        else
        {
          v33 = (os_log_t)qword_10007DF18;
          if (!qword_10007DF18)
          {
            v33 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
            qword_10007DF18 = (uint64_t)v33;
          }
          v34 = _SC_syslog_os_log_mapping(6);
          if (!__SC_log_enabled(6, v33, v34))
            goto LABEL_47;
          v57 = _os_log_pack_size(12);
          v38 = (char *)&current - ((__chkstk_darwin(v57, v58, v59) + 15) & 0xFFFFFFFFFFFFFFF0);
          v60 = __error();
          v61 = _os_log_pack_fill(v38, v57, *v60, &_mh_execute_header, "requested media settings unavailable for %@");
          *(_DWORD *)v61 = 138412290;
          *(_QWORD *)(v61 + 4) = v6;
          v62 = 6;
        }
        __SC_log_send(v62, v33, v34, v38);
      }
LABEL_47:
      v70 = 0;
LABEL_48:
      if (available)
        CFRelease(available);
      if (current)
        CFRelease(current);
      if ((v70 & 1) == 0)
        CFRelease(v7);
      return;
    }
    v49 = (os_log_t)qword_10007DF18;
    if (!qword_10007DF18)
    {
      v49 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
      qword_10007DF18 = (uint64_t)v49;
    }
    v50 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v49, v50))
    {
      v51 = _os_log_pack_size(12);
      v54 = (char *)&current - ((__chkstk_darwin(v51, v52, v53) + 15) & 0xFFFFFFFFFFFFFFF0);
      v55 = __error();
      v56 = _os_log_pack_fill(v54, v51, *v55, &_mh_execute_header, "no media options for %@");
      *(_DWORD *)v56 = 138412290;
      *(_QWORD *)(v56 + 4) = v6;
      __SC_log_send(6, v49, v50, v54);
    }
  }
  else
  {
    v41 = (os_log_t)qword_10007DF18;
    if (!qword_10007DF18)
    {
      v41 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
      qword_10007DF18 = (uint64_t)v41;
    }
    v42 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v41, v42))
    {
      v43 = _os_log_pack_size(12);
      v46 = (char *)&current - ((__chkstk_darwin(v43, v44, v45) + 15) & 0xFFFFFFFFFFFFFFF0);
      v47 = __error();
      v48 = _os_log_pack_fill(v46, v43, *v47, &_mh_execute_header, "no BSD interface name for %@");
      *(_DWORD *)v48 = 138412290;
      *(_QWORD *)(v48 + 4) = a1;
      __SC_log_send(6, v41, v42, v46);
    }
    _SCErrorSet(1002);
  }
}

void sub_100059850(const __SCNetworkInterface *a1, const void *a2)
{
  CFStringRef BSDName;
  CFStringRef v5;
  CFTypeID TypeID;
  const __CFNumber *Value;
  CFTypeID v8;
  const __CFDictionary *v9;
  CFStringRef InterfaceType;
  const __CFArray *MemberInterfaces;
  const __CFArray *v12;
  char v13;
  CFIndex Count;
  CFIndex v15;
  CFIndex i;
  const __SCNetworkInterface *ValueAtIndex;
  CFStringRef v18;
  int valuePtr;
  int mtu_min;
  int mtu_max;
  int mtu_cur;

  mtu_max = -1;
  mtu_cur = -1;
  mtu_min = -1;
  BSDName = SCNetworkInterfaceGetBSDName(a1);
  if (BSDName)
  {
    v5 = BSDName;
    valuePtr = 0;
    if (SCNetworkInterfaceCopyMTU(a1, &mtu_cur, &mtu_min, &mtu_max))
    {
      if ((TypeID = CFDictionaryGetTypeID(), a2)
        && CFGetTypeID(a2) == TypeID
        && (Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a2, kSCPropNetEthernetMTU),
            v8 = CFNumberGetTypeID(),
            Value)
        && CFGetTypeID(Value) == v8
        || (v9 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_10007DEF8, v5)) != 0
        && (Value = (const __CFNumber *)CFDictionaryGetValue(v9, kSCPropNetEthernetMTU)) != 0)
      {
        CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
        if (valuePtr != mtu_cur && (mtu_min < 0 || valuePtr >= mtu_min) && (mtu_max < 0 || valuePtr <= mtu_max))
        {
          InterfaceType = SCNetworkInterfaceGetInterfaceType(a1);
          if (CFEqual(InterfaceType, kSCNetworkInterfaceTypeBridge)
            && (MemberInterfaces = (const __CFArray *)SCBridgeInterfaceGetMemberInterfaces(a1)) != 0
            && (v12 = MemberInterfaces, CFArrayGetCount(MemberInterfaces)))
          {
            CFRetain(v12);
            if (SCBridgeInterfaceSetMemberInterfaces(a1, 0)
              && _SCBridgeInterfaceUpdateConfiguration(*((_QWORD *)a1 + 10)))
            {
              sub_100059BB4((uint64_t)v5, valuePtr);
              v13 = 0;
            }
            else
            {
              v13 = 1;
            }
            Count = CFArrayGetCount(v12);
            if (Count >= 1)
            {
              v15 = Count;
              for (i = 0; i != v15; ++i)
              {
                ValueAtIndex = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v12, i);
                v18 = SCNetworkInterfaceGetBSDName(ValueAtIndex);
                sub_100059BB4((uint64_t)v18, valuePtr);
              }
            }
            SCBridgeInterfaceSetMemberInterfaces(a1, v12);
            CFRelease(v12);
            if ((v13 & 1) == 0)
              _SCBridgeInterfaceUpdateConfiguration(*((_QWORD *)a1 + 10));
          }
          else
          {
            sub_100059BB4((uint64_t)v5, valuePtr);
          }
        }
      }
    }
  }
}

__CFDictionary *sub_100059A80(const void *a1)
{
  CFTypeID TypeID;
  const void *Value;
  CFTypeID v4;
  __CFDictionary *Mutable;
  const void *v6;
  CFTypeID v7;

  TypeID = CFDictionaryGetTypeID();
  if (!a1)
    return 0;
  if (CFGetTypeID(a1) != TypeID)
    return 0;
  Value = CFDictionaryGetValue((CFDictionaryRef)a1, kSCPropNetEthernetMediaSubType);
  v4 = CFStringGetTypeID();
  if (!Value || CFGetTypeID(Value) != v4)
    return 0;
  Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionaryAddValue(Mutable, kSCPropNetEthernetMediaSubType, Value);
  v6 = CFDictionaryGetValue((CFDictionaryRef)a1, kSCPropNetEthernetMediaOptions);
  v7 = CFArrayGetTypeID();
  if (!v6 || CFGetTypeID(v6) != v7)
  {
    CFRelease(Mutable);
    return 0;
  }
  CFDictionaryAddValue(Mutable, kSCPropNetEthernetMediaOptions, v6);
  return Mutable;
}

uint64_t sub_100059BB4(uint64_t a1, int a2)
{
  uint64_t result;
  int v5;
  os_log_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  os_log_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int *v23;
  uint64_t v24;
  int *v25;
  char *v26;
  __int128 v27;
  __int128 v28;

  v27 = 0u;
  v28 = 0u;
  _SC_cfstring_to_cstring(a1, &v27, 16, 1536);
  LODWORD(v28) = a2;
  result = sub_100058ACC((uint64_t)"interfaceSetMTU");
  if ((_DWORD)result != -1)
  {
    v5 = ioctl(result, 0x80206934uLL, &v27);
    v6 = (os_log_t)qword_10007DF18;
    if (v5 == -1)
    {
      if (!qword_10007DF18)
      {
        v6 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
        qword_10007DF18 = (uint64_t)v6;
      }
      v18 = _SC_syslog_os_log_mapping(3);
      result = __SC_log_enabled(3, v6, v18);
      if ((_DWORD)result)
      {
        v19 = _os_log_pack_size(22);
        v22 = (char *)&v27 - ((__chkstk_darwin(v19, v20, v21) + 15) & 0xFFFFFFFFFFFFFFF0);
        v23 = __error();
        v24 = _os_log_pack_fill(v22, v19, *v23, &_mh_execute_header, "%@: ioctl(SIOCSIFMTU) failed: %s");
        v25 = __error();
        v26 = strerror(*v25);
        *(_DWORD *)v24 = 138412546;
        *(_QWORD *)(v24 + 4) = a1;
        *(_WORD *)(v24 + 12) = 2080;
        *(_QWORD *)(v24 + 14) = v26;
        v14 = 3;
        v15 = v6;
        v16 = v18;
        v17 = v22;
        return __SC_log_send(v14, v15, v16, v17);
      }
    }
    else
    {
      if (!qword_10007DF18)
      {
        v6 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
        qword_10007DF18 = (uint64_t)v6;
      }
      v7 = _SC_syslog_os_log_mapping(5);
      result = __SC_log_enabled(5, v6, v7);
      if ((_DWORD)result)
      {
        v8 = _os_log_pack_size(18);
        v11 = (char *)&v27 - ((__chkstk_darwin(v8, v9, v10) + 15) & 0xFFFFFFFFFFFFFFF0);
        v12 = __error();
        v13 = _os_log_pack_fill(v11, v8, *v12, &_mh_execute_header, "%@: set MTU to %d");
        *(_DWORD *)v13 = 138412546;
        *(_QWORD *)(v13 + 4) = a1;
        *(_WORD *)(v13 + 12) = 1024;
        *(_DWORD *)(v13 + 14) = a2;
        v14 = 5;
        v15 = v6;
        v16 = v7;
        v17 = v11;
        return __SC_log_send(v14, v15, v16, v17);
      }
    }
  }
  return result;
}

uint64_t sub_100059E1C(const __CFString *a1, int a2)
{
  uint64_t result;
  int v5;
  os_log_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  const char *v14;
  os_log_t v15;
  uint64_t v16;
  char *v17;
  os_log_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int *v24;
  uint64_t v25;
  const char *v26;
  char buffer[16];

  result = sub_100058ACC((uint64_t)"set_low_data_mode");
  if ((result & 0x80000000) == 0)
  {
    v5 = result;
    if (CFStringGetCString(a1, buffer, 16, 0x8000100u))
    {
      result = sub_10005A090(v5, (uint64_t)buffer, a2);
      if ((result & 0x80000000) == 0)
      {
        v6 = (os_log_t)qword_10007DF18;
        if (!qword_10007DF18)
        {
          v6 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
          qword_10007DF18 = (uint64_t)v6;
        }
        v7 = _SC_syslog_os_log_mapping(5);
        result = __SC_log_enabled(5, v6, v7);
        if ((_DWORD)result)
        {
          v8 = _os_log_pack_size(22);
          v11 = &buffer[-((__chkstk_darwin(v8, v9, v10) + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
          v12 = __error();
          v13 = _os_log_pack_fill(v11, v8, *v12, &_mh_execute_header, "%s LowDataMode on %s", v26, *(const char **)buffer);
          v14 = "enable";
          if (!a2)
            v14 = "disable";
          *(_DWORD *)v13 = 136315394;
          *(_QWORD *)(v13 + 4) = v14;
          *(_WORD *)(v13 + 12) = 2080;
          *(_QWORD *)(v13 + 14) = buffer;
          v15 = v6;
          v16 = v7;
          v17 = v11;
          return __SC_log_send(5, v15, v16, v17);
        }
      }
    }
    else
    {
      v18 = (os_log_t)qword_10007DF18;
      if (!qword_10007DF18)
      {
        v18 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
        qword_10007DF18 = (uint64_t)v18;
      }
      v19 = _SC_syslog_os_log_mapping(5);
      result = __SC_log_enabled(5, v18, v19);
      if ((_DWORD)result)
      {
        v20 = _os_log_pack_size(22);
        v23 = &buffer[-((__chkstk_darwin(v20, v21, v22) + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
        v24 = __error();
        v25 = _os_log_pack_fill(v23, v20, *v24, &_mh_execute_header, "%s: can't convert %@ to string");
        *(_DWORD *)v25 = 136315394;
        *(_QWORD *)(v25 + 4) = "set_low_data_mode";
        *(_WORD *)(v25 + 12) = 2112;
        *(_QWORD *)(v25 + 14) = a1;
        v15 = v18;
        v16 = v19;
        v17 = v23;
        return __SC_log_send(5, v15, v16, v17);
      }
    }
  }
  return result;
}

uint64_t sub_10005A090(int a1, uint64_t a2, int a3)
{
  uint64_t v6;
  os_log_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  int v13;
  int *v14;
  char *v15;
  __int128 v17;
  __int128 v18;

  v17 = 0u;
  v18 = 0u;
  __strlcpy_chk(&v17, a2, 16, 16);
  LODWORD(v18) = a3 != 0;
  v6 = ioctl(a1, 0xC02069CDuLL, &v17);
  if ((v6 & 0x80000000) != 0)
  {
    v7 = (os_log_t)qword_10007DF18;
    if (!qword_10007DF18)
    {
      v7 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
      qword_10007DF18 = (uint64_t)v7;
    }
    v8 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v7, v8))
    {
      v9 = _os_log_pack_size(28);
      v10 = (char *)&v17 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
      v11 = __error();
      v12 = _os_log_pack_fill(v10, v9, *v11, &_mh_execute_header, "ioctl(%s, SIOCSIFCONSTRAINED %u failed, %s", (const char *)v17, DWORD2(v17), (const char *)v18);
      v13 = v18;
      v14 = __error();
      v15 = strerror(*v14);
      *(_DWORD *)v12 = 136315650;
      *(_QWORD *)(v12 + 4) = a2;
      *(_WORD *)(v12 + 12) = 1024;
      *(_DWORD *)(v12 + 14) = v13;
      *(_WORD *)(v12 + 18) = 2080;
      *(_QWORD *)(v12 + 20) = v15;
      __SC_log_send(3, v7, v8, v10);
    }
  }
  return v6;
}

id sub_10005A240()
{
  void *v0;
  id v1;
  id v2;

  if (!objc_opt_class(CWFInterface))
    return 0;
  v0 = objc_autoreleasePoolPush();
  v1 = objc_alloc_init((Class)CWFInterface);
  objc_msgSend(v1, "activate");
  v2 = objc_msgSend(objc_msgSend(v1, "currentScanResult"), "isMetered");
  objc_msgSend(v1, "invalidate");

  objc_autoreleasePoolPop(v0);
  return v2;
}

uint64_t sub_10005A2EC(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _xpc_connection_s *mach_service;
  _xpc_connection_s *v4;
  dispatch_queue_t v5;
  uint64_t result;
  os_log_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  _QWORD handler[5];

  qword_10007DF40 = a1;
  qword_10007DF48 = a2;
  v2 = qword_10007DF50;
  if (!qword_10007DF50)
  {
    v2 = dispatch_queue_create("CategoryManagerServer", 0);
    qword_10007DF50 = (uint64_t)v2;
  }
  mach_service = xpc_connection_create_mach_service("com.apple.SystemConfiguration.NetworkCategoryManager", v2, 1uLL);
  if (mach_service)
  {
    v4 = mach_service;
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 0x40000000;
    handler[2] = sub_10005A7B8;
    handler[3] = &unk_100077120;
    handler[4] = mach_service;
    xpc_connection_set_event_handler(mach_service, handler);
    xpc_connection_activate(v4);
    v5 = (dispatch_queue_t)qword_10007DF50;
    if (!qword_10007DF50)
    {
      v5 = dispatch_queue_create("CategoryManagerServer", 0);
      qword_10007DF50 = (uint64_t)v5;
    }
    os_state_add_handler(v5, &stru_100077180);
    return 1;
  }
  else
  {
    qword_10007DF40 = 0;
    qword_10007DF48 = 0;
    v7 = sub_10005CC9C();
    v8 = _SC_syslog_os_log_mapping(3);
    result = __SC_log_enabled(3, v7, v8);
    if ((_DWORD)result)
    {
      v9 = _os_log_pack_size(2);
      v12 = (char *)handler - ((__chkstk_darwin(v9, v10, v11) + 15) & 0xFFFFFFFFFFFFFFF0);
      v13 = __error();
      *(_WORD *)_os_log_pack_fill(v12, v9, *v13, &_mh_execute_header, "CategoryManagerServer: failed to create server") = 0;
      __SC_log_send(3, v7, v8, v12);
      return 0;
    }
  }
  return result;
}

uint64_t sub_10005A4A8()
{
  NSObject *v0;
  uint64_t v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2000000000;
  v7 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 0x40000000;
  v3[2] = sub_10005A57C;
  v3[3] = &unk_1000770E0;
  v3[4] = &v4;
  v0 = qword_10007DF50;
  if (!qword_10007DF50)
  {
    v0 = dispatch_queue_create("CategoryManagerServer", 0);
    qword_10007DF50 = (uint64_t)v0;
  }
  dispatch_sync(v0, v3);
  v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10005A57C(uint64_t a1)
{
  _QWORD *v2;
  __CFArray *Mutable;
  CFDictionaryRef v4;

  v2 = (_QWORD *)S_CategorySessions;
  if (S_CategorySessions)
  {
    Mutable = 0;
    do
    {
      v4 = sub_10005C57C(v2);
      if (!Mutable)
        Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
      CFArrayAppendValue(Mutable, v4);
      CFRelease(v4);
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
  else
  {
    Mutable = 0;
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = Mutable;
}

void sub_10005A648(uint64_t a1)
{
  NSObject *v1;
  _QWORD v2[5];

  if (a1)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 0x40000000;
    v2[2] = sub_10005A6F0;
    v2[3] = &unk_100077100;
    v2[4] = a1;
    v1 = qword_10007DF50;
    if (!qword_10007DF50)
    {
      v1 = dispatch_queue_create("CategoryManagerServer", 0);
      qword_10007DF50 = (uint64_t)v1;
    }
    dispatch_sync(v1, v2);
  }
}

CFIndex sub_10005A6F0(uint64_t a1)
{
  const __CFArray *v1;
  CFIndex result;
  CFIndex v3;
  int v4;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;

  v1 = *(const __CFArray **)(a1 + 32);
  result = CFArrayGetCount(v1);
  if (result >= 1)
  {
    v3 = result;
    v4 = 0;
    for (i = 0; i != v3; ++i)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v1, i);
      result = sub_10005C808(ValueAtIndex);
      if ((_DWORD)result)
        v4 = 1;
    }
    if (v4)
      return sub_10005CB6C();
  }
  return result;
}

void sub_10005A7B8(uint64_t a1, xpc_object_t object)
{
  xpc_type_t type;
  xpc_type_t v5;
  os_log_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  os_log_t v14;
  NSObject *v15;
  const char *string;
  os_log_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  int *v28;
  uint64_t v29;
  const void *handler[5];

  type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_connection)
  {
    handler[0] = _NSConcreteStackBlock;
    handler[1] = (const void *)0x40000000;
    handler[2] = sub_10005AABC;
    handler[3] = &unk_100077140;
    handler[4] = object;
    xpc_connection_set_event_handler((xpc_connection_t)object, handler);
    v15 = qword_10007DF50;
    if (!qword_10007DF50)
    {
      v15 = dispatch_queue_create("CategoryManagerServer", 0);
      qword_10007DF50 = (uint64_t)v15;
    }
    xpc_connection_set_target_queue((xpc_connection_t)object, v15);
    xpc_connection_activate((xpc_connection_t)object);
  }
  else
  {
    v5 = type;
    if (type != (xpc_type_t)&_xpc_type_error)
    {
      v6 = sub_10005CC9C();
      v7 = _SC_syslog_os_log_mapping(5);
      if (!__SC_log_enabled(5, v6, v7))
        return;
      v8 = _os_log_pack_size(12);
      v11 = (char *)handler - ((__chkstk_darwin(v8, v9, v10) + 15) & 0xFFFFFFFFFFFFFFF0);
      v12 = __error();
      v13 = _os_log_pack_fill(v11, v8, *v12, &_mh_execute_header, "unknown event %p", handler[0]);
      *(_DWORD *)v13 = 134217984;
      *(_QWORD *)(v13 + 4) = v5;
      v14 = v6;
LABEL_11:
      __SC_log_send(5, v14, v7, v11);
      return;
    }
    string = xpc_dictionary_get_string(object, _xpc_error_key_description);
    v17 = sub_10005CC9C();
    v7 = _SC_syslog_os_log_mapping(5);
    v18 = __SC_log_enabled(5, v17, v7);
    if (object != &_xpc_error_connection_invalid)
    {
      if (!v18)
        return;
      v19 = _os_log_pack_size(12);
      v11 = (char *)handler - ((__chkstk_darwin(v19, v20, v21) + 15) & 0xFFFFFFFFFFFFFFF0);
      v22 = __error();
      v23 = _os_log_pack_fill(v11, v19, *v22, &_mh_execute_header, "%s", (const char *)handler[0]);
      *(_DWORD *)v23 = 136315138;
      *(_QWORD *)(v23 + 4) = string;
      v14 = v17;
      goto LABEL_11;
    }
    if (v18)
    {
      v24 = _os_log_pack_size(12);
      v27 = (char *)handler - ((__chkstk_darwin(v24, v25, v26) + 15) & 0xFFFFFFFFFFFFFFF0);
      v28 = __error();
      v29 = _os_log_pack_fill(v27, v24, *v28, &_mh_execute_header, "%s", (const char *)handler[0]);
      *(_DWORD *)v29 = 136315138;
      *(_QWORD *)(v29 + 4) = string;
      __SC_log_send(5, v17, v7, v27);
    }
    xpc_release(*(xpc_object_t *)(a1 + 32));
  }
}

void sub_10005AABC(uint64_t a1, void *a2)
{
  sub_10005AB04(*(_xpc_connection_s **)(a1 + 32), a2);
}

void sub_10005AB04(_xpc_connection_s *a1, xpc_object_t object)
{
  xpc_type_t type;
  os_log_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _WORD *v12;
  int int64;
  xpc_object_t reply;
  void *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  CFBooleanRef context;
  const char *v23;
  _xpc_connection_s *remote_connection;
  const char *string;
  char *v26;
  const char *v27;
  uint64_t v28;

  type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_dictionary)
  {
    int64 = xpc_dictionary_get_int64(object, "Type");
    reply = xpc_dictionary_create_reply(object);
    v15 = reply;
    switch(int64)
    {
      case 3:
        if (!reply)
          return;
        context = (CFBooleanRef)xpc_connection_get_context(a1);
        if (context)
        {
          if (context != kCFBooleanTrue && context != kCFBooleanFalse)
            goto LABEL_21;
        }
        if (!sub_10005BDA4(a1))
        {
          v16 = 1;
          break;
        }
        string = xpc_dictionary_get_string(object, "Category");
        if (!string)
        {
          v16 = 22;
          break;
        }
        v26 = (char *)string;
        v27 = xpc_dictionary_get_string(object, "InterfaceName");
        context = (CFBooleanRef)sub_10005B754(v26, v27);
        if (context)
        {
LABEL_21:
          v23 = (const char *)*((_QWORD *)context + 9);
          if (v23)
            xpc_dictionary_set_string(v15, "ActiveValue", v23);
          v16 = 0;
          break;
        }
        v16 = 2;
        break;
      case 2:
        v16 = sub_10005B33C(a1, object);
        if (!v15)
          return;
        break;
      case 1:
        v16 = sub_10005AE6C(a1, object);
        if (!v15)
          return;
        break;
      default:
        v16 = 22;
        if (!v15)
          return;
        break;
    }
    xpc_dictionary_set_int64(v15, "Error", v16);
    remote_connection = xpc_dictionary_get_remote_connection(object);
    xpc_connection_send_message(remote_connection, v15);
    xpc_release(v15);
    return;
  }
  if (type == (xpc_type_t)&_xpc_type_error)
  {
    if (object == &_xpc_error_connection_invalid)
    {
      sub_10005B618(a1);
    }
    else if (object == &_xpc_error_connection_interrupted)
    {
      v5 = sub_10005CC9C();
      v6 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v5, v6))
      {
        v17 = _os_log_pack_size(2);
        v10 = (char *)&v28 - ((__chkstk_darwin(v17, v18, v19) + 15) & 0xFFFFFFFFFFFFFFF0);
        v20 = *__error();
        v12 = (_WORD *)_os_log_pack_fill(v10, v17, v20, &_mh_execute_header, "connection interrupted");
        goto LABEL_5;
      }
    }
  }
  else
  {
    v5 = sub_10005CC9C();
    v6 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v5, v6))
    {
      v7 = _os_log_pack_size(2);
      v10 = (char *)&v28 - ((__chkstk_darwin(v7, v8, v9) + 15) & 0xFFFFFFFFFFFFFFF0);
      v11 = *__error();
      v12 = (_WORD *)_os_log_pack_fill(v10, v7, v11, &_mh_execute_header, "unexpected event");
LABEL_5:
      *v12 = 0;
      __SC_log_send(5, v5, v6, v10);
    }
  }
}

uint64_t sub_10005AE6C(_xpc_connection_s *a1, void *a2)
{
  os_log_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  pid_t pid;
  uint64_t result;
  const char *string;
  char *v15;
  const char *v16;
  int int64;
  os_log_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int *v24;
  uint64_t v25;
  pid_t v26;
  os_log_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int *v33;
  uint64_t v34;
  pid_t v35;
  const char *v36;
  _OWORD *v37;
  os_log_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  int *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  const char *v50;
  const char *v51;
  const void *v52;
  const char *v53;
  const char *v54;
  const char *v55;

  if (xpc_connection_get_context(a1))
  {
    v4 = sub_10005CC9C();
    v5 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v4, v5))
    {
      v6 = _os_log_pack_size(28);
      v9 = (char *)&v51 - ((__chkstk_darwin(v6, v7, v8) + 15) & 0xFFFFFFFFFFFFFFF0);
      v10 = __error();
      v11 = _os_log_pack_fill(v9, v6, *v10, &_mh_execute_header, "%s: connection %p pid %d trying to register again", v51, v52, (_DWORD)v53);
      pid = xpc_connection_get_pid(a1);
      *(_DWORD *)v11 = 136315650;
      *(_QWORD *)(v11 + 4) = "HandleRegister";
      *(_WORD *)(v11 + 12) = 2048;
      *(_QWORD *)(v11 + 14) = a1;
      *(_WORD *)(v11 + 22) = 1024;
      *(_DWORD *)(v11 + 24) = pid;
      __SC_log_send(5, v4, v5, v9);
      return 22;
    }
    return 22;
  }
  if (sub_10005BB58(a1, (uint64_t)"com.apple.private.SCNetworkCategoryManager.manager"))
  {
    string = xpc_dictionary_get_string(a2, "Category");
    if (!string)
      return 22;
    v15 = (char *)string;
    v16 = xpc_dictionary_get_string(a2, "InterfaceName");
    int64 = xpc_dictionary_get_int64(a2, "Flags");
    if (!int64 || (result = 22, int64 == 1) && v16)
    {
      if (sub_10005B754(v15, v16))
      {
        v18 = sub_10005CC9C();
        v19 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v18, v19))
        {
          v20 = _os_log_pack_size(28);
          v23 = (char *)&v51 - ((__chkstk_darwin(v20, v21, v22) + 15) & 0xFFFFFFFFFFFFFFF0);
          v24 = __error();
          v25 = _os_log_pack_fill(v23, v20, *v24, &_mh_execute_header, "connection %p pid %d category %s already exists", v51, (_DWORD)v52, v53);
          v26 = xpc_connection_get_pid(a1);
          *(_DWORD *)v25 = 134218498;
          *(_QWORD *)(v25 + 4) = a1;
          *(_WORD *)(v25 + 12) = 1024;
          *(_DWORD *)(v25 + 14) = v26;
          *(_WORD *)(v25 + 18) = 2080;
          *(_QWORD *)(v25 + 20) = v15;
          __SC_log_send(5, v18, v19, v23);
        }
        return 17;
      }
      else
      {
        v36 = xpc_dictionary_get_string(a2, "ProcessName");
        v37 = sub_10005B7F0(a1, v36, v15, v16, int64);
        v38 = sub_10005CC9C();
        v39 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v38, v39))
        {
          v40 = _os_log_pack_size(48);
          v43 = (char *)&v51 - ((__chkstk_darwin(v40, v41, v42) + 15) & 0xFFFFFFFFFFFFFFF0);
          v44 = __error();
          v45 = _os_log_pack_fill(v43, v40, *v44, &_mh_execute_header, "CategoryManager[Register]: %s[%d] category %s interface %s%s", v51, (_DWORD)v52, v53, v54, v55);
          v46 = *((_DWORD *)v37 + 7);
          v47 = *((_QWORD *)v37 + 4);
          v48 = *((_QWORD *)v37 + 5);
          v49 = "<any>";
          if (v16)
            v49 = v16;
          *(_DWORD *)v45 = 136316162;
          *(_QWORD *)(v45 + 4) = v47;
          if (int64)
            v50 = " [no_default]";
          else
            v50 = "";
          *(_WORD *)(v45 + 12) = 1024;
          *(_DWORD *)(v45 + 14) = v46;
          *(_WORD *)(v45 + 18) = 2080;
          *(_QWORD *)(v45 + 20) = v48;
          *(_WORD *)(v45 + 28) = 2080;
          *(_QWORD *)(v45 + 30) = v49;
          *(_WORD *)(v45 + 38) = 2080;
          *(_QWORD *)(v45 + 40) = v50;
          __SC_log_send(5, v38, v39, v43);
        }
        sub_10005BA2C();
        return 0;
      }
    }
  }
  else
  {
    v27 = sub_10005CC9C();
    v28 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v27, v28))
    {
      v29 = _os_log_pack_size(28);
      v32 = (char *)&v51 - ((__chkstk_darwin(v29, v30, v31) + 15) & 0xFFFFFFFFFFFFFFF0);
      v33 = __error();
      v34 = _os_log_pack_fill(v32, v29, *v33, &_mh_execute_header, "%s: connection %p pid %d permission denied", v51, v52, (_DWORD)v53);
      v35 = xpc_connection_get_pid(a1);
      *(_DWORD *)v34 = 136315650;
      *(_QWORD *)(v34 + 4) = "HandleRegister";
      *(_WORD *)(v34 + 12) = 2048;
      *(_QWORD *)(v34 + 14) = a1;
      *(_WORD *)(v34 + 22) = 1024;
      *(_DWORD *)(v34 + 24) = v35;
      __SC_log_send(5, v27, v28, v32);
    }
    xpc_connection_set_context(a1, kCFBooleanFalse);
    return 1;
  }
  return result;
}

uint64_t sub_10005B33C(_xpc_connection_s *a1, void *a2)
{
  const __CFBoolean *context;
  const __CFBoolean *v5;
  const char *string;
  const char *v8;
  unint64_t v9;
  _BOOL4 v10;
  os_log_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int *v17;
  uint64_t v18;
  char *v20;
  int v21;
  const char *v22;
  os_log_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  int *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  const char *v35;
  const char *v36;
  uint64_t v37;
  const char *v38;
  const char *v39;
  const char *v40;

  context = (const __CFBoolean *)xpc_connection_get_context(a1);
  if (context)
  {
    v5 = context;
    if (context != kCFBooleanTrue && context != kCFBooleanFalse)
    {
      string = xpc_dictionary_get_string(a2, "Value");
      v8 = string;
      v9 = *((_QWORD *)v5 + 8);
      if (string && v9)
      {
        v10 = strcmp(*((const char **)v5 + 8), string) != 0;
      }
      else
      {
        v10 = ((unint64_t)string | v9) != 0;
        if (!string)
        {
          v20 = 0;
          v21 = 1;
          if (!v9)
            goto LABEL_15;
          goto LABEL_14;
        }
      }
      v20 = strdup(v8);
      v21 = 0;
      if (!v9)
      {
LABEL_15:
        *((_QWORD *)v5 + 8) = v20;
        if (v10)
        {
          v22 = (const char *)*((_QWORD *)v5 + 6);
          v23 = sub_10005CC9C();
          v24 = _SC_syslog_os_log_mapping(5);
          if (__SC_log_enabled(5, v23, v24))
          {
            v25 = _os_log_pack_size(48);
            v28 = (char *)&v36 - ((__chkstk_darwin(v25, v26, v27) + 15) & 0xFFFFFFFFFFFFFFF0);
            v29 = __error();
            v30 = _os_log_pack_fill(v28, v25, *v29, &_mh_execute_header, "CategoryManager[ActivateValue]: %s[%d] category %s interface %s value %s", v36, v37, v38, v39, v40);
            v31 = *((_DWORD *)v5 + 7);
            v32 = *((_QWORD *)v5 + 4);
            v33 = *((_QWORD *)v5 + 5);
            v34 = "<any>";
            if (v22)
              v34 = v22;
            v35 = "<none>";
            *(_DWORD *)v30 = 136316162;
            if (!v21)
              v35 = v8;
            *(_QWORD *)(v30 + 4) = v32;
            *(_WORD *)(v30 + 12) = 1024;
            *(_DWORD *)(v30 + 14) = v31;
            *(_WORD *)(v30 + 18) = 2080;
            *(_QWORD *)(v30 + 20) = v33;
            *(_WORD *)(v30 + 28) = 2080;
            *(_QWORD *)(v30 + 30) = v34;
            *(_WORD *)(v30 + 38) = 2080;
            *(_QWORD *)(v30 + 40) = v35;
            __SC_log_send(5, v23, v24, v28);
          }
          sub_10005BA2C();
        }
        return 0;
      }
LABEL_14:
      free((void *)v9);
      goto LABEL_15;
    }
  }
  v11 = sub_10005CC9C();
  v12 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v11, v12))
  {
    v13 = _os_log_pack_size(12);
    v16 = (char *)&v36 - ((__chkstk_darwin(v13, v14, v15) + 15) & 0xFFFFFFFFFFFFFFF0);
    v17 = __error();
    v18 = _os_log_pack_fill(v16, v13, *v17, &_mh_execute_header, "CategoryManager[ActivateValue]: no session %p", v36);
    *(_DWORD *)v18 = 134217984;
    *(_QWORD *)(v18 + 4) = a1;
    __SC_log_send(5, v11, v12, v16);
  }
  return 22;
}

void sub_10005B618(_xpc_connection_s *a1)
{
  os_log_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  uint64_t *context;
  const void *v12;

  v2 = sub_10005CC9C();
  v3 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v2, v3))
  {
    v4 = _os_log_pack_size(12);
    v7 = (char *)&v12 - ((__chkstk_darwin(v4, v5, v6) + 15) & 0xFFFFFFFFFFFFFFF0);
    v8 = __error();
    v9 = _os_log_pack_fill(v7, v4, *v8, &_mh_execute_header, "CategoryManagerServer: client %p went away", v12);
    *(_DWORD *)v9 = 134217984;
    *(_QWORD *)(v9 + 4) = a1;
    __SC_log_send(7, v2, v3, v7);
  }
  context = (uint64_t *)xpc_connection_get_context(a1);
  if (context)
  {
    if (context != (uint64_t *)kCFBooleanTrue && context != (uint64_t *)kCFBooleanFalse)
      sub_10005C1D4(context);
  }
}

uint64_t sub_10005B754(char *__s2, const char *a2)
{
  uint64_t i;
  const char *v5;

  for (i = S_CategorySessions; i; i = *(_QWORD *)i)
  {
    if (!strcmp(*(const char **)(i + 40), __s2))
    {
      if (!a2)
        break;
      v5 = *(const char **)(i + 48);
      if (!v5 || !strcmp(a2, v5))
        break;
    }
  }
  return i;
}

_OWORD *sub_10005B7F0(_xpc_connection_s *a1, const char *a2, const char *a3, const char *a4, int a5)
{
  _OWORD *v10;
  const char *v11;
  uint64_t v12;
  os_log_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v26[2];
  uint64_t v27;
  const char *v28;
  const char *v29;
  const void *v30;
  const void *v31;

  v10 = malloc_type_malloc(0x50uLL, 0x10B0040F25E0655uLL);
  *v10 = 0u;
  v10[1] = 0u;
  v10[2] = 0u;
  v10[3] = 0u;
  v10[4] = 0u;
  *((_QWORD *)v10 + 2) = a1;
  *((_DWORD *)v10 + 7) = xpc_connection_get_pid(a1);
  if (a2)
    v11 = a2;
  else
    v11 = "<unknown>";
  *((_QWORD *)v10 + 4) = strdup(v11);
  *((_QWORD *)v10 + 5) = strdup(a3);
  *((_DWORD *)v10 + 14) = a5;
  if (a4)
    *((_QWORD *)v10 + 6) = strdup(a4);
  xpc_connection_set_finalizer_f(a1, (xpc_finalizer_t)sub_10005BC10);
  xpc_connection_set_context(a1, v10);
  v12 = S_CategorySessions;
  *(_QWORD *)v10 = S_CategorySessions;
  if (v12)
    *(_QWORD *)(v12 + 8) = v10;
  S_CategorySessions = (uint64_t)v10;
  *((_QWORD *)v10 + 1) = &S_CategorySessions;
  *((_BYTE *)v10 + 24) = 1;
  v13 = sub_10005CC9C();
  v14 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v13, v14))
  {
    v15 = _os_log_pack_size(68);
    v18 = (char *)v26 - ((__chkstk_darwin(v15, v16, v17) + 15) & 0xFFFFFFFFFFFFFFF0);
    v19 = __error();
    v20 = _os_log_pack_fill(v18, v15, *v19, &_mh_execute_header, "%s: created %s [%d] category %s ifname %s session %p (connection %p)", v26[0], v26[1], v27, v28, v29, v30, v31);
    v21 = *((_DWORD *)v10 + 7);
    v22 = "<any>";
    v23 = *((_QWORD *)v10 + 4);
    v24 = *((_QWORD *)v10 + 5);
    if (a4)
      v22 = a4;
    *(_DWORD *)v20 = 136316674;
    *(_QWORD *)(v20 + 4) = "CategorySessionCreate";
    *(_WORD *)(v20 + 12) = 2080;
    *(_QWORD *)(v20 + 14) = v23;
    *(_WORD *)(v20 + 22) = 1024;
    *(_DWORD *)(v20 + 24) = v21;
    *(_WORD *)(v20 + 28) = 2080;
    *(_QWORD *)(v20 + 30) = v24;
    *(_WORD *)(v20 + 38) = 2080;
    *(_QWORD *)(v20 + 40) = v22;
    *(_WORD *)(v20 + 48) = 2048;
    *(_QWORD *)(v20 + 50) = v10;
    *(_WORD *)(v20 + 58) = 2048;
    *(_QWORD *)(v20 + 60) = a1;
    __SC_log_send(7, v13, v14, v18);
  }
  return v10;
}

void sub_10005BA2C()
{
  os_log_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int *v6;
  uint64_t v7;
  const char *v8;

  v0 = sub_10005CC9C();
  v1 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v0, v1))
  {
    v2 = _os_log_pack_size(12);
    v5 = (char *)&v8 - ((__chkstk_darwin(v2, v3, v4) + 15) & 0xFFFFFFFFFFFFFFF0);
    v6 = __error();
    v7 = _os_log_pack_fill(v5, v2, *v6, &_mh_execute_header, "%s\n", v8);
    *(_DWORD *)v7 = 136315138;
    *(_QWORD *)(v7 + 4) = "SendNotification";
    __SC_log_send(5, v0, v1, v5);
  }
  if (qword_10007DF48)
  {
    CFRunLoopSourceSignal((CFRunLoopSourceRef)qword_10007DF48);
    if (qword_10007DF40)
      CFRunLoopWakeUp((CFRunLoopRef)qword_10007DF40);
  }
}

BOOL sub_10005BB58(_xpc_connection_s *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  _BOOL4 v6;

  if (!xpc_connection_get_euid(a1))
    return 1;
  v4 = (void *)xpc_connection_copy_entitlement_value(a1, a2);
  if (v4)
  {
    v5 = v4;
    v6 = xpc_get_type(v4) == (xpc_type_t)&_xpc_type_BOOL && xpc_BOOL_get_value(v5);
    xpc_release(v5);
  }
  else
  {
    return 0;
  }
  return v6;
}

void sub_10005BC10(uint64_t a1)
{
  os_log_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  const char *v16[2];
  uint64_t v17;
  const char *v18;
  const void *v19;

  v2 = sub_10005CC9C();
  v3 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v2, v3))
  {
    v4 = _os_log_pack_size(48);
    v7 = (char *)v16 - ((__chkstk_darwin(v4, v5, v6) + 15) & 0xFFFFFFFFFFFFFFF0);
    v8 = __error();
    v9 = _os_log_pack_fill(v7, v4, *v8, &_mh_execute_header, "%s: releasing %s [%d] %s session %p", v16[0], v16[1], v17, v18, v19);
    v10 = *(_DWORD *)(a1 + 28);
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)v9 = 136316162;
    *(_QWORD *)(v9 + 4) = "CategorySessionRelease";
    *(_WORD *)(v9 + 12) = 2080;
    *(_QWORD *)(v9 + 14) = v11;
    *(_WORD *)(v9 + 22) = 1024;
    *(_DWORD *)(v9 + 24) = v10;
    *(_WORD *)(v9 + 28) = 2080;
    *(_QWORD *)(v9 + 30) = v12;
    *(_WORD *)(v9 + 38) = 2048;
    *(_QWORD *)(v9 + 40) = a1;
    __SC_log_send(7, v2, v3, v7);
  }
  free(*(void **)(a1 + 32));
  free(*(void **)(a1 + 40));
  v13 = *(void **)(a1 + 48);
  if (v13)
    free(v13);
  v14 = *(void **)(a1 + 64);
  if (v14)
    free(v14);
  *(_QWORD *)(a1 + 64) = 0;
  v15 = *(void **)(a1 + 72);
  if (v15)
    free(v15);
  *(_QWORD *)(a1 + 72) = 0;
  if (*(_BYTE *)(a1 + 24))
    sub_100065C64();
  free((void *)a1);
}

uint64_t sub_10005BDA4(_xpc_connection_s *a1)
{
  const __CFBoolean *context;
  os_log_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  pid_t v11;
  uint64_t result;
  _BOOL4 v13;
  os_log_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int *v20;
  uint64_t v21;
  pid_t v22;
  os_log_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  int *v29;
  uint64_t v30;
  pid_t pid;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  int *v37;
  uint64_t v38;
  pid_t v39;
  const char *v40;
  const void *v41;
  uint64_t v42;

  context = (const __CFBoolean *)xpc_connection_get_context(a1);
  if (context)
  {
    if (context == kCFBooleanFalse)
    {
      v23 = sub_10005CC9C();
      v24 = _SC_syslog_os_log_mapping(5);
      result = __SC_log_enabled(5, v23, v24);
      if (!(_DWORD)result)
        return result;
      v25 = _os_log_pack_size(28);
      v28 = (char *)&v40 - ((__chkstk_darwin(v25, v26, v27) + 15) & 0xFFFFFFFFFFFFFFF0);
      v29 = __error();
      v30 = _os_log_pack_fill(v28, v25, *v29, &_mh_execute_header, "%s: connection %p pid %d permission denied", v40, v41, v42);
      pid = xpc_connection_get_pid(a1);
      *(_DWORD *)v30 = 136315650;
      *(_QWORD *)(v30 + 4) = "connectionAllowManagerObserverAccess";
      *(_WORD *)(v30 + 12) = 2048;
      *(_QWORD *)(v30 + 14) = a1;
      *(_WORD *)(v30 + 22) = 1024;
      *(_DWORD *)(v30 + 24) = pid;
      __SC_log_send(5, v23, v24, v28);
    }
    else if (context == kCFBooleanTrue)
    {
      v3 = sub_10005CC9C();
      v4 = _SC_syslog_os_log_mapping(7);
      if (__SC_log_enabled(7, v3, v4))
      {
        v5 = _os_log_pack_size(28);
        v8 = (char *)&v40 - ((__chkstk_darwin(v5, v6, v7) + 15) & 0xFFFFFFFFFFFFFFF0);
        v9 = __error();
        v10 = _os_log_pack_fill(v8, v5, *v9, &_mh_execute_header, "%s: connection %p pid %d access is allowed", v40, v41, v42);
        v11 = xpc_connection_get_pid(a1);
        *(_DWORD *)v10 = 136315650;
        *(_QWORD *)(v10 + 4) = "connectionAllowManagerObserverAccess";
        *(_WORD *)(v10 + 12) = 2048;
        *(_QWORD *)(v10 + 14) = a1;
        *(_WORD *)(v10 + 22) = 1024;
        *(_DWORD *)(v10 + 24) = v11;
        __SC_log_send(7, v3, v4, v8);
        return 1;
      }
      return 1;
    }
  }
  else
  {
    v13 = sub_10005BB58(a1, (uint64_t)"com.apple.private.SCNetworkCategoryManager.observer");
    v14 = sub_10005CC9C();
    if (v13)
    {
      v15 = _SC_syslog_os_log_mapping(7);
      if (__SC_log_enabled(7, v14, v15))
      {
        v16 = _os_log_pack_size(28);
        v19 = (char *)&v40 - ((__chkstk_darwin(v16, v17, v18) + 15) & 0xFFFFFFFFFFFFFFF0);
        v20 = __error();
        v21 = _os_log_pack_fill(v19, v16, *v20, &_mh_execute_header, "%s: connection %p pid %d connection allowed access", v40, v41, v42);
        v22 = xpc_connection_get_pid(a1);
        *(_DWORD *)v21 = 136315650;
        *(_QWORD *)(v21 + 4) = "connectionAllowManagerObserverAccess";
        *(_WORD *)(v21 + 12) = 2048;
        *(_QWORD *)(v21 + 14) = a1;
        *(_WORD *)(v21 + 22) = 1024;
        *(_DWORD *)(v21 + 24) = v22;
        __SC_log_send(7, v14, v15, v19);
      }
      xpc_connection_set_context(a1, kCFBooleanTrue);
      return 1;
    }
    v32 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v14, v32))
    {
      v33 = _os_log_pack_size(28);
      v36 = (char *)&v40 - ((__chkstk_darwin(v33, v34, v35) + 15) & 0xFFFFFFFFFFFFFFF0);
      v37 = __error();
      v38 = _os_log_pack_fill(v36, v33, *v37, &_mh_execute_header, "%s: connection %p pid %d missing entitlement, permission denied", v40, v41, v42);
      v39 = xpc_connection_get_pid(a1);
      *(_DWORD *)v38 = 136315650;
      *(_QWORD *)(v38 + 4) = "connectionAllowManagerObserverAccess";
      *(_WORD *)(v38 + 12) = 2048;
      *(_QWORD *)(v38 + 14) = a1;
      *(_WORD *)(v38 + 22) = 1024;
      *(_DWORD *)(v38 + 24) = v39;
      __SC_log_send(5, v14, v32, v36);
    }
    xpc_connection_set_context(a1, kCFBooleanFalse);
  }
  return 0;
}

void sub_10005C1D4(uint64_t *a1)
{
  os_log_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11[2];

  v2 = sub_10005CC9C();
  v3 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v2, v3))
  {
    v4 = _os_log_pack_size(22);
    v7 = (char *)v11 - ((__chkstk_darwin(v4, v5, v6) + 15) & 0xFFFFFFFFFFFFFFF0);
    v8 = __error();
    v9 = _os_log_pack_fill(v7, v4, *v8, &_mh_execute_header, "%s: invalidating %p", v11[0], v11[1]);
    *(_DWORD *)v9 = 136315394;
    *(_QWORD *)(v9 + 4) = "CategorySessionInvalidate";
    *(_WORD *)(v9 + 12) = 2048;
    *(_QWORD *)(v9 + 14) = a1;
    __SC_log_send(7, v2, v3, v7);
  }
  if (*((_BYTE *)a1 + 24))
  {
    v10 = *a1;
    if (*a1)
      *(_QWORD *)(v10 + 8) = a1[1];
    *(_QWORD *)a1[1] = v10;
    *((_BYTE *)a1 + 24) = 0;
  }
  sub_10005BA2C();
}

os_state_data_s *__cdecl sub_10005C318(id a1, os_state_hints_s *a2)
{
  return (os_state_data_s *)sub_10005C35C();
}

_DWORD *sub_10005C35C()
{
  __CFArray *Mutable;
  _QWORD *v1;
  CFDictionaryRef v2;
  CFDictionaryRef v3;
  const __CFData *Data;
  CFIndex Length;
  size_t v6;
  os_log_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  _DWORD *v15;
  size_t v16;
  const UInt8 *BytePtr;
  const char *v19[2];
  uint64_t v20;

  Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  v1 = (_QWORD *)S_CategorySessions;
  if (S_CategorySessions)
  {
    do
    {
      v2 = sub_10005C57C(v1);
      if (v2)
      {
        v3 = v2;
        CFArrayAppendValue(Mutable, v2);
        CFRelease(v3);
      }
      v1 = (_QWORD *)*v1;
    }
    while (v1);
  }
  Data = CFPropertyListCreateData(0, Mutable, kCFPropertyListBinaryFormat_v1_0, 0, 0);
  CFRelease(Mutable);
  Length = CFDataGetLength(Data);
  v6 = Length + 200;
  if ((unint64_t)(Length + 200) <= 0x8000)
  {
    v16 = Length;
    v15 = malloc_type_calloc(1uLL, v6, 0xAA4C9B4BuLL);
    *v15 = 1;
    v15[1] = v16;
    __strlcpy_chk(v15 + 34, "CategoryManager Sessions", 64, 64);
    BytePtr = CFDataGetBytePtr(Data);
    memcpy(v15 + 50, BytePtr, v16);
  }
  else
  {
    v7 = sub_10005CC9C();
    v8 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v7, v8))
    {
      v9 = _os_log_pack_size(28);
      v12 = (char *)v19 - ((__chkstk_darwin(v9, v10, v11) + 15) & 0xFFFFFFFFFFFFFFF0);
      v13 = __error();
      v14 = _os_log_pack_fill(v12, v9, *v13, &_mh_execute_header, "%s: state data too large (%zu > %d)", v19[0], (size_t)v19[1], v20);
      *(_DWORD *)v14 = 136315650;
      *(_QWORD *)(v14 + 4) = "CategoryManagerCopyOSStateData";
      *(_WORD *)(v14 + 12) = 2048;
      *(_QWORD *)(v14 + 14) = v6;
      *(_WORD *)(v14 + 22) = 1024;
      *(_DWORD *)(v14 + 24) = 0x8000;
      __SC_log_send(5, v7, v8, v12);
    }
    v15 = 0;
  }
  CFRelease(Data);
  return v15;
}

CFDictionaryRef sub_10005C57C(_QWORD *a1)
{
  CFNumberRef v2;
  const char *v3;
  CFStringRef v4;
  const char *v5;
  CFStringRef v6;
  const char *v7;
  CFStringRef v8;
  const char *v9;
  CFStringRef v10;
  const char *v11;
  CFStringRef v12;
  CFIndex v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFDictionaryRef v16;
  void *values[3];
  __int128 v19;
  __int128 v20;
  void *keys[3];
  __int128 v22;
  __int128 v23;

  v2 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)a1 + 28);
  v3 = (const char *)a1[4];
  if (v3)
    v4 = CFStringCreateWithCString(0, v3, 0x8000100u);
  else
    v4 = 0;
  v5 = (const char *)a1[5];
  if (v5)
    v6 = CFStringCreateWithCString(0, v5, 0x8000100u);
  else
    v6 = 0;
  v7 = (const char *)a1[8];
  if (v7)
    v8 = CFStringCreateWithCString(0, v7, 0x8000100u);
  else
    v8 = 0;
  v9 = (const char *)a1[9];
  if (v9)
    v10 = CFStringCreateWithCString(0, v9, 0x8000100u);
  else
    v10 = 0;
  v11 = (const char *)a1[6];
  if (v11)
    v12 = CFStringCreateWithCString(0, v11, 0x8000100u);
  else
    v12 = 0;
  v22 = 0u;
  v23 = 0u;
  v19 = 0u;
  v20 = 0u;
  v13 = 3;
  v14 = CFNumberCreate(0, kCFNumberSInt32Type, a1 + 7);
  v15 = v14;
  keys[0] = CFSTR("ProcessID");
  keys[1] = CFSTR("ProcessName");
  values[0] = v2;
  values[1] = (void *)v4;
  keys[2] = CFSTR("Category");
  values[2] = (void *)v6;
  if (v12)
  {
    *(_QWORD *)&v22 = CFSTR("InterfaceName");
    *(_QWORD *)&v19 = v12;
    v13 = 4;
  }
  if (v8)
  {
    keys[v13] = CFSTR("Value");
    values[v13++] = (void *)v8;
  }
  if (v10)
  {
    keys[v13] = CFSTR("ActiveValue");
    values[v13++] = (void *)v10;
  }
  if (v14)
  {
    keys[v13] = CFSTR("Flags");
    values[v13++] = v14;
  }
  v16 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, v13, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (v2)
    CFRelease(v2);
  if (v4)
    CFRelease(v4);
  if (v6)
    CFRelease(v6);
  if (v12)
    CFRelease(v12);
  if (v8)
    CFRelease(v8);
  if (v10)
    CFRelease(v10);
  if (v15)
    CFRelease(v15);
  return v16;
}

uint64_t sub_10005C808(const __CFDictionary *a1)
{
  const void *Value;
  char *v3;
  const void *v4;
  char *v5;
  os_log_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  os_log_t v14;
  const void *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  os_log_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  char *v28;
  xpc_object_t v29;
  const char *v31[3];

  Value = CFDictionaryGetValue(a1, CFSTR("Category"));
  if (!Value)
  {
    v6 = sub_10005CC9C();
    v7 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v6, v7))
    {
      v8 = _os_log_pack_size(32);
      v11 = (char *)v31 - ((__chkstk_darwin(v8, v9, v10) + 15) & 0xFFFFFFFFFFFFFFF0);
      v12 = __error();
      v13 = _os_log_pack_fill(v11, v8, *v12, &_mh_execute_header, "%s: %@ missing %@");
      *(_DWORD *)v13 = 136315650;
      *(_QWORD *)(v13 + 4) = "CategoryManagerServerAckOne";
      *(_WORD *)(v13 + 12) = 2112;
      *(_QWORD *)(v13 + 14) = a1;
      *(_WORD *)(v13 + 22) = 2112;
      *(_QWORD *)(v13 + 24) = CFSTR("Category");
      v14 = v6;
LABEL_19:
      __SC_log_send(5, v14, v7, v11);
    }
    return 0;
  }
  v3 = (char *)_SC_cfstring_to_cstring(Value, 0, 0, 134217984);
  v4 = CFDictionaryGetValue(a1, CFSTR("InterfaceName"));
  if (v4)
    v5 = (char *)_SC_cfstring_to_cstring(v4, 0, 0, 134217984);
  else
    v5 = 0;
  v15 = CFDictionaryGetValue(a1, CFSTR("Value"));
  if (v15)
    v16 = _SC_cfstring_to_cstring(v15, 0, 0, 134217984);
  else
    v16 = 0;
  v17 = sub_10005B754(v3, v5);
  if (!v17)
  {
    v20 = sub_10005CC9C();
    v7 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v20, v7))
    {
      v21 = _os_log_pack_size(32);
      v11 = (char *)v31 - ((__chkstk_darwin(v21, v22, v23) + 15) & 0xFFFFFFFFFFFFFFF0);
      v24 = __error();
      v25 = _os_log_pack_fill(v11, v21, *v24, &_mh_execute_header, "%s: no session for %s/%s", v31[0], v31[1], v31[2]);
      v26 = "<any>";
      *(_DWORD *)v25 = 136315650;
      *(_QWORD *)(v25 + 4) = "CategoryManagerServerAckOne";
      *(_WORD *)(v25 + 12) = 2080;
      if (v5)
        v26 = v5;
      *(_QWORD *)(v25 + 14) = v3;
      *(_WORD *)(v25 + 22) = 2080;
      *(_QWORD *)(v25 + 24) = v26;
      v14 = v20;
      goto LABEL_19;
    }
    return 0;
  }
  v18 = v17;
  v19 = *(_QWORD *)(v17 + 72);
  if (v16 && v19)
  {
    if (!strcmp(*(const char **)(v17 + 72), (const char *)v16))
    {
LABEL_32:
      v27 = 0;
      if (!v3)
        goto LABEL_27;
      goto LABEL_26;
    }
    goto LABEL_23;
  }
  if (!(v16 | v19))
    goto LABEL_32;
  if (v16)
  {
LABEL_23:
    v28 = strdup((const char *)v16);
    if (!v19)
      goto LABEL_25;
    goto LABEL_24;
  }
  v28 = 0;
  if (v19)
LABEL_24:
    free((void *)v19);
LABEL_25:
  *(_QWORD *)(v18 + 72) = v28;
  v29 = xpc_dictionary_create(0, 0, 0);
  xpc_connection_send_message(*(xpc_connection_t *)(v18 + 16), v29);
  xpc_release(v29);
  v27 = 1;
  if (v3)
LABEL_26:
    CFAllocatorDeallocate(0, v3);
LABEL_27:
  if (v5)
    CFAllocatorDeallocate(0, v5);
  if (v16)
    CFAllocatorDeallocate(0, (void *)v16);
  return v27;
}

uint64_t sub_10005CB6C()
{
  os_log_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int *v6;
  uint64_t v7;
  uint64_t v9;

  v0 = sub_10005CC9C();
  v1 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v0, v1))
  {
    v2 = _os_log_pack_size(22);
    v5 = (char *)&v9 - ((__chkstk_darwin(v2, v3, v4) + 15) & 0xFFFFFFFFFFFFFFF0);
    v6 = __error();
    v7 = _os_log_pack_fill(v5, v2, *v6, &_mh_execute_header, "%s: %@");
    *(_DWORD *)v7 = 136315394;
    *(_QWORD *)(v7 + 4) = "CategoryManagerServerNotifyStore";
    *(_WORD *)(v7 + 12) = 2112;
    *(_QWORD *)(v7 + 14) = CFSTR("com.apple.scnetworkcategory");
    __SC_log_send(5, v0, v1, v5);
  }
  return SCDynamicStoreNotifyValue(0, CFSTR("com.apple.scnetworkcategory"));
}

os_log_t sub_10005CC9C()
{
  os_log_t result;

  result = (os_log_t)qword_10007DF58;
  if (!qword_10007DF58)
  {
    result = os_log_create("com.apple.SystemConfiguration", "PreferencesMonitor");
    qword_10007DF58 = (uint64_t)result;
  }
  return result;
}

const void *sub_10005CD0C(const __CFDictionary *a1)
{
  const void *Value;
  CFTypeID TypeID;

  Value = CFDictionaryGetValue(a1, CFSTR("Category"));
  TypeID = CFStringGetTypeID();
  if (!Value)
    return 0;
  if (CFGetTypeID(Value) == TypeID)
    return Value;
  return 0;
}

const void *sub_10005CD8C(const __CFDictionary *a1)
{
  const void *Value;
  CFTypeID TypeID;

  Value = CFDictionaryGetValue(a1, CFSTR("InterfaceName"));
  TypeID = CFStringGetTypeID();
  if (!Value)
    return 0;
  if (CFGetTypeID(Value) == TypeID)
    return Value;
  return 0;
}

const void *sub_10005CE0C(const __CFDictionary *a1)
{
  const void *Value;
  CFTypeID TypeID;

  Value = CFDictionaryGetValue(a1, CFSTR("Value"));
  TypeID = CFStringGetTypeID();
  if (!Value)
    return 0;
  if (CFGetTypeID(Value) == TypeID)
    return Value;
  return 0;
}

uint64_t sub_10005CE8C(const __CFDictionary *a1)
{
  const void *Value;
  CFTypeID TypeID;
  unsigned int valuePtr;

  valuePtr = 0;
  Value = CFDictionaryGetValue(a1, CFSTR("Flags"));
  TypeID = CFNumberGetTypeID();
  if (!Value || CFGetTypeID(Value) != TypeID)
    return 0;
  CFNumberGetValue((CFNumberRef)Value, kCFNumberSInt32Type, &valuePtr);
  return valuePtr;
}

void sub_10005CF24()
{
  os_log_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int *v6;
  os_log_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;

  v0 = sub_10005CC9C();
  v1 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v0, v1))
  {
    v2 = _os_log_pack_size(2);
    v5 = (char *)&v14 - ((__chkstk_darwin(v2, v3, v4) + 15) & 0xFFFFFFFFFFFFFFF0);
    v6 = __error();
    *(_WORD *)_os_log_pack_fill(v5, v2, *v6, &_mh_execute_header, "prime() called") = 0;
    __SC_log_send(7, v0, v1, v5);
  }
  if (sub_10005D0D0())
  {
    v7 = sub_10005CC9C();
    v8 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v7, v8))
    {
      v9 = _os_log_pack_size(2);
      v12 = (char *)&v14 - ((__chkstk_darwin(v9, v10, v11) + 15) & 0xFFFFFFFFFFFFFFF0);
      v13 = __error();
      *(_WORD *)_os_log_pack_fill(v12, v9, *v13, &_mh_execute_header, "CategoryManagerServer started") = 0;
      __SC_log_send(5, v7, v8, v12);
    }
  }
  sub_10005D238((SCPreferencesRef)qword_10007DF60, 2);
}

uint64_t sub_10005D0D0()
{
  __CFRunLoopSource *v0;
  CFRunLoopRef Current;
  uint64_t v2;
  __CFRunLoop *v3;
  os_log_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  CFRunLoopSourceContext context;

  memset(&context, 0, 72);
  context.perform = (void (__cdecl *)(void *))sub_10005E23C;
  v0 = CFRunLoopSourceCreate(0, 0, &context);
  Current = CFRunLoopGetCurrent();
  v2 = sub_10005A2EC((uint64_t)Current, (uint64_t)v0);
  if ((_DWORD)v2)
  {
    v3 = CFRunLoopGetCurrent();
    CFRunLoopAddSource(v3, v0, kCFRunLoopDefaultMode);
  }
  else
  {
    v4 = sub_10005CC9C();
    v5 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v4, v5))
    {
      v6 = _os_log_pack_size(2);
      v9 = (char *)&context - ((__chkstk_darwin(v6, v7, v8) + 15) & 0xFFFFFFFFFFFFFFF0);
      v10 = __error();
      *(_WORD *)_os_log_pack_fill(v9, v6, *v10, &_mh_execute_header, "CategoryManagerServerStart failed") = 0;
      __SC_log_send(3, v4, v5, v9);
    }
  }
  CFRelease(v0);
  return v2;
}

void sub_10005D238(SCPreferencesRef prefs, char a2)
{
  os_log_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  CFIndex Count;
  CFIndex v12;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  SCPreferencesRef v15;
  CFTypeRef v16;
  CFTypeRef v17;

  if ((a2 & 1) != 0 && (byte_10007DF80 & 1) == 0)
    SCPreferencesSynchronize(prefs);
  if ((a2 & 2) != 0)
  {
    v4 = sub_10005CC9C();
    v5 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v4, v5))
    {
      v6 = _os_log_pack_size(2);
      v9 = (char *)&v15 - ((__chkstk_darwin(v6, v7, v8) + 15) & 0xFFFFFFFFFFFFFFF0);
      v10 = __error();
      *(_WORD *)_os_log_pack_fill(v9, v6, *v10, &_mh_execute_header, "updating configuration") = 0;
      __SC_log_send(6, v4, v5, v9);
    }
    if (qword_10007DF78)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      if (sub_10005F7B8(&v15, prefs))
      {
        Count = CFArrayGetCount((CFArrayRef)qword_10007DF78);
        if (Count >= 1)
        {
          v12 = Count;
          for (i = 0; i != v12; ++i)
          {
            ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)qword_10007DF78, i);
            sub_10005F8E8(&v15, ValueAtIndex);
          }
        }
        if (v15)
          CFRelease(v15);
        if (v17)
          CFRelease(v17);
        if (v16)
          CFRelease(v16);
      }
    }
    sub_10005E3C8(prefs);
    sub_10005E754(prefs);
    sub_10005E9F8((const __SCDynamicStore *)qword_10007DF68, prefs);
    if ((byte_10007DF80 & 1) == 0)
      SCPreferencesSynchronize(prefs);
  }
}

void sub_10005D410(__CFBundle *a1)
{
  os_log_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  os_log_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  CFStringRef Identifier;
  CFDictionaryRef v18;
  CFPropertyListRef Value;
  CFPropertyListRef v20;
  CFPropertyListRef v21;
  SCNetworkSetRef v22;
  os_log_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  os_log_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  int *v41;
  uint64_t v42;
  const __SCPreferences *v43;
  __CFRunLoop *Current;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  const char *v55;
  void *values;
  CFBooleanRef v57;
  void *keys[2];

  *(_OWORD *)keys = *(_OWORD *)&off_1000771A0;
  values = kCFBooleanTrue;
  v57 = kCFBooleanFalse;
  v2 = sub_10005CC9C();
  v3 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v2, v3))
  {
    v4 = _os_log_pack_size(2);
    v7 = (char *)&values - ((__chkstk_darwin(v4, v5, v6) + 15) & 0xFFFFFFFFFFFFFFF0);
    v8 = __error();
    *(_WORD *)_os_log_pack_fill(v7, v4, *v8, &_mh_execute_header, "load() called", values, v57, keys[0], keys[1]) = 0;
    __SC_log_send(7, v2, v3, v7);
  }
  v9 = sub_10005CC9C();
  v10 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v9, v10))
  {
    v11 = _os_log_pack_size(12);
    v14 = (char *)&values - ((__chkstk_darwin(v11, v12, v13) + 15) & 0xFFFFFFFFFFFFFFF0);
    v15 = __error();
    v16 = _os_log_pack_fill(v14, v11, *v15, &_mh_execute_header, "  bundle ID = %@");
    Identifier = CFBundleGetIdentifier(a1);
    *(_DWORD *)v16 = 138412290;
    *(_QWORD *)(v16 + 4) = Identifier;
    __SC_log_send(7, v9, v10, v14);
  }
  qword_10007DF68 = (uint64_t)SCDynamicStoreCreate(0, CFSTR("PreferencesMonitor.bundle"), (SCDynamicStoreCallBack)sub_10005DA48, 0);
  if (!qword_10007DF68)
  {
    v23 = sub_10005CC9C();
    v24 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v23, v24))
      goto LABEL_28;
    v25 = _os_log_pack_size(12);
    v28 = (char *)&values - ((__chkstk_darwin(v25, v26, v27) + 15) & 0xFFFFFFFFFFFFFFF0);
    v29 = *__error();
    v30 = _os_log_pack_fill(v28, v25, v29, &_mh_execute_header, "SCDynamicStoreCreate() failed: %s");
LABEL_27:
    v53 = v30;
    v54 = SCError();
    v55 = SCErrorString(v54);
    *(_DWORD *)v53 = 136315138;
    *(_QWORD *)(v53 + 4) = v55;
    __SC_log_send(5, v23, v24, v28);
    goto LABEL_28;
  }
  v18 = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  qword_10007DF60 = SCPreferencesCreateWithOptions(0, CFSTR("com.apple.SystemConfiguration.PreferencesMonitor"), 0, 0, v18);
  CFRelease(v18);
  if (!qword_10007DF60)
  {
    v23 = sub_10005CC9C();
    v24 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v23, v24))
      goto LABEL_28;
    v31 = _os_log_pack_size(12);
    v28 = (char *)&values - ((__chkstk_darwin(v31, v32, v33) + 15) & 0xFFFFFFFFFFFFFFF0);
    v34 = *__error();
    v30 = _os_log_pack_fill(v28, v31, v34, &_mh_execute_header, "SCPreferencesCreate() failed: %s");
    goto LABEL_27;
  }
  __SCNetworkConfigurationUpgrade(&qword_10007DF60, 0, 1);
  Value = SCPreferencesGetValue((SCPreferencesRef)qword_10007DF60, CFSTR("Model"));
  v20 = (CFPropertyListRef)_SC_hw_model(0);
  if (!Value || (v21 = v20, Value == v20) || v20 && CFEqual(Value, v20))
  {
    v22 = SCNetworkSetCopyCurrent((SCPreferencesRef)qword_10007DF60);
    if (v22)
    {
      byte_10007DF70 = 1;
      CFRelease(v22);
    }
  }
  else
  {
    v35 = sub_10005CC9C();
    v36 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v35, v36))
    {
      v37 = _os_log_pack_size(22);
      v40 = (char *)&values - ((__chkstk_darwin(v37, v38, v39) + 15) & 0xFFFFFFFFFFFFFFF0);
      v41 = __error();
      v42 = _os_log_pack_fill(v40, v37, *v41, &_mh_execute_header, "Hardware model changed\n  created on \"%@\"\n  now on     \"%@\"");
      *(_DWORD *)v42 = 138412546;
      *(_QWORD *)(v42 + 4) = Value;
      *(_WORD *)(v42 + 12) = 2112;
      *(_QWORD *)(v42 + 14) = v21;
      __SC_log_send(5, v35, v36, v40);
    }
    sub_10005DF08((const __SCPreferences *)qword_10007DF60, (uint64_t)Value);
  }
  if (!SCPreferencesSetCallback((SCPreferencesRef)qword_10007DF60, (SCPreferencesCallBack)sub_10005D238, 0))
  {
    v23 = sub_10005CC9C();
    v24 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v23, v24))
      goto LABEL_28;
    v45 = _os_log_pack_size(12);
    v28 = (char *)&values - ((__chkstk_darwin(v45, v46, v47) + 15) & 0xFFFFFFFFFFFFFFF0);
    v48 = *__error();
    v30 = _os_log_pack_fill(v28, v45, v48, &_mh_execute_header, "SCPreferencesSetCallBack() failed: %s");
    goto LABEL_27;
  }
  v43 = (const __SCPreferences *)qword_10007DF60;
  Current = CFRunLoopGetCurrent();
  if (SCPreferencesScheduleWithRunLoop(v43, Current, kCFRunLoopDefaultMode))
  {
    sub_10005DFD8((const __SCDynamicStore *)qword_10007DF68);
    sub_10005DA48((const __SCDynamicStore *)qword_10007DF68, 0);
    return;
  }
  v23 = sub_10005CC9C();
  v24 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v23, v24))
  {
    v49 = _os_log_pack_size(12);
    v28 = (char *)&values - ((__chkstk_darwin(v49, v50, v51) + 15) & 0xFFFFFFFFFFFFFFF0);
    v52 = *__error();
    v30 = _os_log_pack_fill(v28, v49, v52, &_mh_execute_header, "SCPreferencesScheduleWithRunLoop() failed: %s");
    goto LABEL_27;
  }
LABEL_28:
  if (qword_10007DF68)
    CFRelease((CFTypeRef)qword_10007DF68);
  if (qword_10007DF60)
    CFRelease((CFTypeRef)qword_10007DF60);
  byte_10007DF70 = 1;
}

void sub_10005DA48(const __SCDynamicStore *a1, uint64_t a2)
{
  const __CFDictionary *v3;
  const __CFDictionary *v4;
  CFTypeID TypeID;
  _BOOL4 v6;
  _BOOL4 v7;
  const void *Value;
  CFTypeID v9;
  CFStringRef v10;
  int v11;
  int v12;
  os_log_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  const void *v21;
  CFTypeID v22;
  CFStringRef v23;
  os_log_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  int *v30;
  uint64_t v31;
  os_log_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  int *v39;
  uint64_t v40;

  v3 = (const __CFDictionary *)SCDynamicStoreCopyValue(a1, (CFStringRef)qword_10007DFD8);
  if (v3)
  {
    v4 = v3;
    TypeID = CFDictionaryGetTypeID();
    if (CFGetTypeID(v4) == TypeID)
    {
      v6 = CFDictionaryContainsKey(v4, CFSTR("*QUIET*")) != 0;
      v7 = CFDictionaryContainsKey(v4, CFSTR("*TIMEOUT*")) != 0;
      Value = CFDictionaryGetValue(v4, CFSTR("_Excluded_"));
      v9 = CFArrayGetTypeID();
      if (Value && CFGetTypeID(Value) != v9)
        Value = 0;
      if (Value == (const void *)qword_10007DF90
        || Value && qword_10007DF90 && CFEqual(Value, (CFTypeRef)qword_10007DF90)
        || !sub_100061268((const __CFArray *)Value, &qword_10007DFE0, (CFArrayRef *)&qword_10007DF90))
      {
        v12 = 0;
      }
      else
      {
        if (qword_10007DF90)
        {
          v10 = CFStringCreateByCombiningStrings(0, (CFArrayRef)qword_10007DF90, CFSTR(","));
        }
        else
        {
          v10 = CFSTR("<empty>");
          CFRetain(CFSTR("<empty>"));
        }
        v13 = sub_10005CC9C();
        v14 = _SC_syslog_os_log_mapping(6);
        if (__SC_log_enabled(6, v13, v14))
        {
          v15 = _os_log_pack_size(12);
          v18 = (char *)&v40 - ((__chkstk_darwin(v15, v16, v17) + 15) & 0xFFFFFFFFFFFFFFF0);
          v19 = __error();
          v20 = _os_log_pack_fill(v18, v15, *v19, &_mh_execute_header, "excluded interface list changed: %@");
          *(_DWORD *)v20 = 138412290;
          *(_QWORD *)(v20 + 4) = v10;
          __SC_log_send(6, v13, v14, v18);
        }
        CFRelease(v10);
        v12 = 1;
      }
      v21 = CFDictionaryGetValue(v4, CFSTR("_PreConfigured_"));
      v22 = CFArrayGetTypeID();
      if (v21 && CFGetTypeID(v21) != v22)
        v21 = 0;
      if (v21 == (const void *)qword_10007DF88
        || v21 && qword_10007DF88 && CFEqual(v21, (CFTypeRef)qword_10007DF88)
        || !sub_100061268((const __CFArray *)v21, (CFTypeRef *)&qword_10007DFB8, (CFArrayRef *)&qword_10007DF88))
      {
        v11 = 0;
      }
      else
      {
        if (qword_10007DF88)
        {
          v23 = CFStringCreateByCombiningStrings(0, (CFArrayRef)qword_10007DF88, CFSTR(","));
        }
        else
        {
          v23 = CFSTR("<empty>");
          CFRetain(CFSTR("<empty>"));
        }
        v24 = sub_10005CC9C();
        v25 = _SC_syslog_os_log_mapping(6);
        if (__SC_log_enabled(6, v24, v25))
        {
          v26 = _os_log_pack_size(12);
          v40 = (uint64_t)&v40;
          v29 = (char *)&v40 - ((__chkstk_darwin(v26, v27, v28) + 15) & 0xFFFFFFFFFFFFFFF0);
          v30 = __error();
          v31 = _os_log_pack_fill(v29, v26, *v30, &_mh_execute_header, "pre-configured interface list changed: %@");
          *(_DWORD *)v31 = 138412290;
          *(_QWORD *)(v31 + 4) = v23;
          __SC_log_send(6, v24, v25, v29);
        }
        CFRelease(v23);
        v11 = 1;
      }
    }
    else
    {
      v11 = 0;
      v12 = 0;
      v7 = 0;
      v6 = 0;
    }
    CFRelease(v4);
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v7 = 0;
    v6 = 0;
  }
  if ((byte_10007DF70 & 1) == 0 && (v7 || v6))
  {
    if (v6)
      byte_10007DF70 = 1;
    sub_1000615B4((const __SCPreferences *)qword_10007DF60);
    if (v7 && !dword_10007DFE8++)
    {
      v33 = sub_10005CC9C();
      v34 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v33, v34))
      {
        v35 = _os_log_pack_size(2);
        v38 = (char *)&v40 - ((__chkstk_darwin(v35, v36, v37) + 15) & 0xFFFFFFFFFFFFFFF0);
        v39 = __error();
        *(_WORD *)_os_log_pack_fill(v38, v35, *v39, &_mh_execute_header, "Network configuration creation timed out waiting for IORegistry") = 0;
        __SC_log_send(3, v33, v34, v38);
      }
    }
  }
  if (a2)
  {
    if (v11 | v12)
      sub_10005D238((SCPreferencesRef)qword_10007DF60, 2);
  }
}

void sub_10005DF08(const __SCPreferences *a1, uint64_t a2)
{
  CFPropertyListRef Value;
  const void *v5;

  Value = SCPreferencesGetValue(a1, kSCPrefSystem);
  if (Value)
  {
    v5 = Value;
    CFRetain(Value);
    __SCNetworkConfigurationSaveModel(a1, a2);
    SCPreferencesSetValue(a1, kSCPrefSystem, v5);
    CFRelease(v5);
  }
  else
  {
    __SCNetworkConfigurationSaveModel(a1, a2);
  }
}

void sub_10005DFD8(const __SCDynamicStore *a1)
{
  CFRunLoopSourceRef RunLoopSource;
  __CFRunLoopSource *v3;
  __CFRunLoop *Current;
  __CFArray *Mutable;
  int v6;
  os_log_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  const char *v21;
  uint64_t v22;

  qword_10007DFF0 = (uint64_t)SCDynamicStoreKeyCreateNetworkInterface(0, kSCDynamicStoreDomainState);
  qword_10007DFD8 = (uint64_t)SCDynamicStoreKeyCreate(0, CFSTR("%@InterfaceNamer"), kSCDynamicStoreDomainPlugin);
  RunLoopSource = SCDynamicStoreCreateRunLoopSource(0, a1, 0);
  if (RunLoopSource)
  {
    v3 = RunLoopSource;
    Current = CFRunLoopGetCurrent();
    CFRunLoopAddSource(Current, v3, kCFRunLoopDefaultMode);
    CFRelease(v3);
    Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    CFArrayAppendValue(Mutable, (const void *)qword_10007DFF0);
    CFArrayAppendValue(Mutable, (const void *)qword_10007DFD8);
    v6 = SCDynamicStoreSetNotificationKeys(a1, Mutable, 0);
    CFRelease(Mutable);
    if (v6)
      return;
    v7 = sub_10005CC9C();
    v8 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v7, v8))
    {
      v9 = _os_log_pack_size(12);
      v12 = (char *)&v22 - ((__chkstk_darwin(v9, v10, v11) + 15) & 0xFFFFFFFFFFFFFFF0);
      v13 = *__error();
      v14 = _os_log_pack_fill(v12, v9, v13, &_mh_execute_header, "SCDynamicStoreSetNotificationKeys() failed: %s");
LABEL_7:
      v19 = v14;
      v20 = SCError();
      v21 = SCErrorString(v20);
      *(_DWORD *)v19 = 136315138;
      *(_QWORD *)(v19 + 4) = v21;
      __SC_log_send(5, v7, v8, v12);
    }
  }
  else
  {
    v7 = sub_10005CC9C();
    v8 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v7, v8))
    {
      v15 = _os_log_pack_size(12);
      v12 = (char *)&v22 - ((__chkstk_darwin(v15, v16, v17) + 15) & 0xFFFFFFFFFFFFFFF0);
      v18 = *__error();
      v14 = _os_log_pack_fill(v12, v15, v18, &_mh_execute_header, "SCDynamicStoreCreateRunLoopSource() failed: %s");
      goto LABEL_7;
    }
  }
  byte_10007DF70 = 1;
}

void sub_10005E23C()
{
  const void *v0;
  os_log_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  const void *v9;
  _BOOL4 v10;
  int v11;
  uint64_t v12;

  v0 = (const void *)sub_10005A4A8();
  v1 = sub_10005CC9C();
  v2 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v1, v2))
  {
    v3 = _os_log_pack_size(22);
    v6 = (char *)&v12 - ((__chkstk_darwin(v3, v4, v5) + 15) & 0xFFFFFFFFFFFFFFF0);
    v7 = __error();
    v8 = _os_log_pack_fill(v6, v3, *v7, &_mh_execute_header, "%s: info %@");
    *(_DWORD *)v8 = 136315394;
    *(_QWORD *)(v8 + 4) = "categoryInformationChanged";
    *(_WORD *)(v8 + 12) = 2112;
    *(_QWORD *)(v8 + 14) = v0;
    __SC_log_send(5, v1, v2, v6);
  }
  v9 = (const void *)qword_10007DF78;
  if ((const void *)qword_10007DF78 == v0)
  {
    v10 = 0;
    v9 = v0;
    if (v0)
LABEL_8:
      CFRelease(v9);
  }
  else
  {
    v10 = 1;
    if (v0 && qword_10007DF78)
    {
      v11 = CFEqual((CFTypeRef)qword_10007DF78, v0);
      v9 = (const void *)qword_10007DF78;
      v10 = v11 == 0;
    }
    if (v9)
      goto LABEL_8;
  }
  qword_10007DF78 = (uint64_t)v0;
  if (v10)
  {
    sub_10005D238((SCPreferencesRef)qword_10007DF60, 2);
    sub_10005A648((uint64_t)v0);
  }
}

void sub_10005E3C8(const __SCPreferences *a1)
{
  __objc2_prop_list **p_base_props;
  CFIndex Count;
  CFIndex v4;
  SCNetworkSetRef v5;
  SCNetworkSetRef v6;
  const __CFArray *v7;
  const __CFArray *v8;
  CFIndex v9;
  __int128 v10;
  CFIndex v11;
  int v12;
  CFIndex v13;
  const __SCNetworkService *ValueAtIndex;
  const __SCNetworkInterface *Interface;
  CFStringRef BSDName;
  CFStringRef v17;
  os_log_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int *v24;
  uint64_t v25;
  char *v26;
  os_log_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int *v33;
  uint64_t v34;
  int v35;
  const char *v36;
  char *v37;
  os_log_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  int *v44;
  uint64_t v45;
  int v46;
  const char *v47;
  const char *v48;
  const __SCNetworkSet *v49;
  __int128 v50;
  __int128 v51;
  CFIndex v52;
  CFRange v53;

  p_base_props = &QoSMarkingController__classData.base_props;
  if (qword_10007DF88)
  {
    Count = CFArrayGetCount((CFArrayRef)qword_10007DF88);
    if (Count)
    {
      v4 = Count;
      v5 = SCNetworkSetCopyCurrent(a1);
      if (v5)
      {
        v6 = v5;
        v7 = SCNetworkServiceCopyAll(a1);
        if (v7)
        {
          v8 = v7;
          v9 = CFArrayGetCount(v7);
          if (v9 < 1)
          {
            CFRelease(v8);
          }
          else
          {
            v11 = v9;
            v48 = (const char *)a1;
            v49 = v6;
            v12 = 0;
            v13 = 0;
            *(_QWORD *)&v10 = 136315138;
            v50 = v10;
            *(_QWORD *)&v10 = 138412290;
            v51 = v10;
            v52 = v4;
            do
            {
              ValueAtIndex = (const __SCNetworkService *)CFArrayGetValueAtIndex(v8, v13);
              Interface = SCNetworkServiceGetInterface(ValueAtIndex);
              if (Interface)
              {
                BSDName = SCNetworkInterfaceGetBSDName(Interface);
                if (BSDName)
                {
                  v17 = BSDName;
                  v53.location = 0;
                  v53.length = v4;
                  if (CFArrayContainsValue((CFArrayRef)p_base_props[497], v53, BSDName))
                  {
                    v18 = sub_10005CC9C();
                    v19 = _SC_syslog_os_log_mapping(5);
                    if (__SC_log_enabled(5, v18, v19))
                    {
                      v20 = _os_log_pack_size(12);
                      v23 = (char *)&v48 - ((__chkstk_darwin(v20, v21, v22) + 15) & 0xFFFFFFFFFFFFFFF0);
                      v24 = __error();
                      v25 = _os_log_pack_fill(v23, v20, *v24, &_mh_execute_header, "removing network service for %@");
                      *(_DWORD *)v25 = v51;
                      *(_QWORD *)(v25 + 4) = v17;
                      v26 = v23;
                      p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
                      __SC_log_send(5, v18, v19, v26);
                      v4 = v52;
                    }
                    if (SCNetworkServiceRemove(ValueAtIndex)
                      || (v27 = sub_10005CC9C(),
                          v28 = _SC_syslog_os_log_mapping(3),
                          !__SC_log_enabled(3, v27, v28)))
                    {
                      v12 = 1;
                    }
                    else
                    {
                      v29 = _os_log_pack_size(12);
                      v32 = (char *)&v48 - ((__chkstk_darwin(v29, v30, v31) + 15) & 0xFFFFFFFFFFFFFFF0);
                      v33 = __error();
                      v34 = _os_log_pack_fill(v32, v29, *v33, &_mh_execute_header, "SCNetworkServiceRemove() failed: %s", v48);
                      v35 = SCError();
                      v36 = SCErrorString(v35);
                      *(_DWORD *)v34 = v50;
                      *(_QWORD *)(v34 + 4) = v36;
                      v37 = v32;
                      p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
                      __SC_log_send(3, v27, v28, v37);
                      v12 = 1;
                      v4 = v52;
                    }
                  }
                }
              }
              ++v13;
            }
            while (v11 != v13);
            CFRelease(v8);
            v6 = v49;
            if (v12 && !SCPreferencesCommitChanges((SCPreferencesRef)v48) && SCError() != 30)
            {
              v38 = sub_10005CC9C();
              v39 = _SC_syslog_os_log_mapping(3);
              if (__SC_log_enabled(3, v38, v39))
              {
                v40 = _os_log_pack_size(12);
                v43 = (char *)&v48 - ((__chkstk_darwin(v40, v41, v42) + 15) & 0xFFFFFFFFFFFFFFF0);
                v44 = __error();
                v45 = _os_log_pack_fill(v43, v40, *v44, &_mh_execute_header, "SCPreferencesCommitChanges() failed: %s", v48);
                v46 = SCError();
                v47 = SCErrorString(v46);
                *(_DWORD *)v45 = v50;
                *(_QWORD *)(v45 + 4) = v47;
                __SC_log_send(3, v38, v39, v43);
              }
            }
          }
        }
        CFRelease(v6);
      }
    }
  }
}

void sub_10005E754(const __SCPreferences *a1)
{
  __objc2_prop_list **p_base_props;
  CFIndex Count;
  CFIndex v4;
  const __SCNetworkSet *v5;
  const __SCNetworkSet *v6;
  const __CFArray *v7;
  const __CFArray *v8;
  CFIndex v9;
  __int128 v10;
  CFIndex v11;
  CFIndex v12;
  const __SCNetworkService *ValueAtIndex;
  const __SCNetworkInterface *Interface;
  CFStringRef BSDName;
  CFStringRef v16;
  os_log_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  os_log_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int *v33;
  uint64_t v34;
  int v35;
  const char *v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  CFIndex v40;
  const __SCNetworkSet *v41;
  CFRange v42;

  p_base_props = &QoSMarkingController__classData.base_props;
  if (qword_10007DF90)
  {
    Count = CFArrayGetCount((CFArrayRef)qword_10007DF90);
    if (Count)
    {
      v4 = Count;
      v5 = SCNetworkSetCopyCurrent(a1);
      if (v5)
      {
        v6 = v5;
        v7 = SCNetworkSetCopyServices(v5);
        if (v7)
        {
          v8 = v7;
          v9 = CFArrayGetCount(v7);
          if (v9 >= 1)
          {
            v11 = v9;
            v12 = 0;
            *(_QWORD *)&v10 = 136315138;
            v38 = v10;
            *(_QWORD *)&v10 = 138412290;
            v39 = v10;
            v40 = v4;
            v41 = v6;
            do
            {
              ValueAtIndex = (const __SCNetworkService *)CFArrayGetValueAtIndex(v8, v12);
              Interface = SCNetworkServiceGetInterface(ValueAtIndex);
              if (Interface)
              {
                BSDName = SCNetworkInterfaceGetBSDName(Interface);
                if (BSDName)
                {
                  v16 = BSDName;
                  v42.location = 0;
                  v42.length = v4;
                  if (CFArrayContainsValue((CFArrayRef)p_base_props[498], v42, BSDName))
                  {
                    v17 = sub_10005CC9C();
                    v18 = _SC_syslog_os_log_mapping(5);
                    if (__SC_log_enabled(5, v17, v18))
                    {
                      v19 = _os_log_pack_size(12);
                      v22 = (char *)&v38 - ((__chkstk_darwin(v19, v20, v21) + 15) & 0xFFFFFFFFFFFFFFF0);
                      v23 = __error();
                      v24 = v19;
                      v4 = v40;
                      v25 = _os_log_pack_fill(v22, v24, *v23, &_mh_execute_header, "excluding network service for %@");
                      *(_DWORD *)v25 = v39;
                      *(_QWORD *)(v25 + 4) = v16;
                      v26 = v22;
                      v6 = v41;
                      __SC_log_send(5, v17, v18, v26);
                      p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
                    }
                    if (!SCNetworkSetRemoveService(v6, ValueAtIndex))
                    {
                      v27 = sub_10005CC9C();
                      v28 = _SC_syslog_os_log_mapping(3);
                      if (__SC_log_enabled(3, v27, v28))
                      {
                        v29 = _os_log_pack_size(12);
                        v32 = (char *)&v38 - ((__chkstk_darwin(v29, v30, v31) + 15) & 0xFFFFFFFFFFFFFFF0);
                        v33 = __error();
                        v34 = _os_log_pack_fill(v32, v29, *v33, &_mh_execute_header, "SCNetworkSetRemoveService() failed: %s", (const char *)v38);
                        v35 = SCError();
                        v36 = SCErrorString(v35);
                        *(_DWORD *)v34 = v38;
                        *(_QWORD *)(v34 + 4) = v36;
                        v37 = v32;
                        v4 = v40;
                        v6 = v41;
                        __SC_log_send(3, v27, v28, v37);
                        p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
                      }
                    }
                  }
                }
              }
              ++v12;
            }
            while (v11 != v12);
          }
          CFRelease(v8);
        }
        CFRelease(v6);
      }
    }
  }
}

void sub_10005E9F8(const __SCDynamicStore *a1, const __SCPreferences *a2)
{
  __CFArray *Mutable;
  CFStringRef v5;
  const __CFDictionary *v6;
  CFIndex Count;
  CFIndex v8;
  const void **v9;
  const __CFArray *v10;
  __CFDictionary *v11;
  CFAbsoluteTime Current;
  const char *v13;
  const __CFArray *v14;
  CFStringRef v15;
  CFPropertyListRef Value;
  const void *v17;
  CFTypeID TypeID;
  const __CFString *v19;
  CFTypeID v20;
  CFDictionaryRef v21;
  const __CFDictionary *v22;
  CFTypeID v23;
  os_log_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  int *v30;
  os_log_t v31;
  uint64_t v32;
  char *v33;
  os_log_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  os_log_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  __CFDictionary *v49;
  CFIndex v50;
  const __SCNetworkInterface *ValueAtIndex;
  CFStringRef LocalizedDisplayName;
  const __CFString *v53;
  __CFString *BSDName;
  CFStringRef InterfaceType;
  CFStringRef v56;
  const __CFString *v57;
  CFStringRef v58;
  CFStringRef NetworkServiceEntity;
  CFDictionaryRef TemplateOverrides;
  CFTypeID v61;
  CFStringRef v62;
  CFStringRef v63;
  CFDictionaryRef v64;
  CFTypeID v65;
  CFStringRef v66;
  __CFString *v67;
  __CFString *v68;
  CFDictionaryRef v69;
  CFStringRef v70;
  const void *v71;
  CFArrayRef v72;
  CFNumberRef v73;
  const __CFNumber *v74;
  CFTypeID v75;
  const __CFNumber *v76;
  CFStringRef v77;
  CFIndex v78;
  CFDictionaryRef v79;
  CFIndex v80;
  CFIndex v81;
  CFIndex i;
  const void *v83;
  os_log_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  int *v90;
  uint64_t v91;
  int v92;
  const char *v93;
  const __CFArray *v94;
  os_log_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  const char *v100;
  char *v101;
  int *v102;
  uint64_t v103;
  const char *v104;
  const __CFArray *v105;
  __CFDictionary *v106;
  SCDynamicStoreRef v107;
  __CFString *v108;
  __CFString *v109;
  __CFString *v110;
  __CFString *v111;
  CFStringRef v112;
  __CFString *v113;
  CFStringRef v114;
  CFBooleanRef v115;
  CFStringRef v116;
  CFStringRef v117;
  CFStringRef v118;
  __CFString *v119;
  CFStringRef v120;
  CFStringRef v121;
  CFStringRef v122;
  CFStringRef v123;
  CFIndex v124;
  const __CFString *v125;
  const __CFString *v126;
  int valuePtr;
  void *values;
  CFNumberRef v129;
  CFBooleanRef v130;
  CFStringRef v131;
  const __CFString *v132;
  void *keys;
  CFStringRef v134;
  const __CFString *v135;
  CFStringRef v136;
  CFStringRef v137;
  void *v138[2];

  Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  v5 = CFStringCreateWithFormat(0, 0, CFSTR("^%@.*"), kSCDynamicStoreDomainSetup);
  CFArrayAppendValue(Mutable, v5);
  v107 = a1;
  v6 = SCDynamicStoreCopyMultiple(a1, 0, Mutable);
  CFRelease(Mutable);
  CFRelease(v5);
  if (v6)
  {
    qword_10007DF98 = (uint64_t)CFDictionaryCreateMutableCopy(0, 0, v6);
    CFRelease(v6);
  }
  else
  {
    qword_10007DF98 = (uint64_t)CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  }
  qword_10007DFA0 = (uint64_t)CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  Count = CFDictionaryGetCount((CFDictionaryRef)qword_10007DF98);
  if (Count < 1)
  {
    qword_10007DFA8 = (uint64_t)CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  }
  else
  {
    v8 = Count;
    v9 = (const void **)CFAllocatorAllocate(0, 8 * Count, 0);
    CFDictionaryGetKeysAndValues((CFDictionaryRef)qword_10007DF98, v9, 0);
    v10 = CFArrayCreate(0, v9, v8, &kCFTypeArrayCallBacks);
    qword_10007DFA8 = (uint64_t)CFArrayCreateMutableCopy(0, 0, v10);
    CFRelease(v10);
    CFAllocatorDeallocate(0, v9);
  }
  qword_10007DFB0 = (uint64_t)CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  v11 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  Current = CFAbsoluteTimeGetCurrent();
  v13 = (const char *)CFDateCreate(0, Current);
  v14 = SCPreferencesCopyKeyList(a2);
  v105 = v14;
  if (!v14 || !CFArrayGetCount(v14))
  {
    v24 = sub_10005CC9C();
    v25 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v24, v25))
      goto LABEL_25;
    v26 = _os_log_pack_size(2);
    v29 = (char *)&v104 - ((__chkstk_darwin(v26, v27, v28) + 15) & 0xFFFFFFFFFFFFFFF0);
    v30 = __error();
    *(_WORD *)_os_log_pack_fill(v29, v26, *v30, &_mh_execute_header, "updateConfiguration(): no preferences") = 0;
    v31 = v24;
    v32 = v25;
    v33 = v29;
LABEL_24:
    __SC_log_send(5, v31, v32, v33);
    goto LABEL_25;
  }
  v15 = kSCPrefSystem;
  Value = SCPreferencesGetValue(a2, kSCPrefSystem);
  if (Value)
  {
    v17 = Value;
    TypeID = CFDictionaryGetTypeID();
    if (CFGetTypeID(v17) != TypeID)
    {
      v34 = sub_10005CC9C();
      v35 = _SC_syslog_os_log_mapping(5);
      if (!__SC_log_enabled(5, v34, v35))
        goto LABEL_25;
      goto LABEL_20;
    }
    sub_100060E28(a2, CFSTR("/"), (const __CFDictionary *)v17);
  }
  v19 = (const __CFString *)SCPreferencesGetValue(a2, kSCPrefCurrentSet);
  if (v19)
  {
    v15 = v19;
    v20 = CFStringGetTypeID();
    if (CFGetTypeID(v15) != v20)
    {
      v42 = sub_10005CC9C();
      v43 = _SC_syslog_os_log_mapping(5);
      if (!__SC_log_enabled(5, v42, v43))
        goto LABEL_25;
      v44 = _os_log_pack_size(12);
      v39 = (char *)&v104 - ((__chkstk_darwin(v44, v45, v46) + 15) & 0xFFFFFFFFFFFFFFF0);
      v47 = __error();
      v48 = _os_log_pack_fill(v39, v44, *v47, &_mh_execute_header, "updateConfiguration(): %@ is not a string");
      *(_DWORD *)v48 = 138412290;
      *(_QWORD *)(v48 + 4) = kSCPrefCurrentSet;
      v31 = v42;
      v32 = v43;
      goto LABEL_23;
    }
    v21 = SCPreferencesPathGetValue(a2, v15);
    if (!v21)
    {
      v95 = sub_10005CC9C();
      v96 = _SC_syslog_os_log_mapping(5);
      if (!__SC_log_enabled(5, v95, v96))
        goto LABEL_25;
      v97 = _os_log_pack_size(22);
      v100 = v13;
      v101 = (char *)&v104 - ((__chkstk_darwin(v97, v98, v99) + 15) & 0xFFFFFFFFFFFFFFF0);
      v102 = __error();
      v103 = _os_log_pack_fill(v101, v97, *v102, &_mh_execute_header, "%@ value (%@) not valid");
      *(_DWORD *)v103 = 138412546;
      *(_QWORD *)(v103 + 4) = kSCPrefCurrentSet;
      *(_WORD *)(v103 + 12) = 2112;
      *(_QWORD *)(v103 + 14) = v15;
      v31 = v95;
      v32 = v96;
      v33 = v101;
      v13 = v100;
      goto LABEL_24;
    }
    v22 = v21;
    v23 = CFDictionaryGetTypeID();
    if (CFGetTypeID(v22) == v23)
    {
      sub_100060E28(a2, CFSTR("/"), v22);
      CFDictionarySetValue(v11, kSCDynamicStorePropSetupCurrentSet, v15);
      goto LABEL_25;
    }
    v34 = sub_10005CC9C();
    v35 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v34, v35))
      goto LABEL_25;
LABEL_20:
    v36 = _os_log_pack_size(12);
    v39 = (char *)&v104 - ((__chkstk_darwin(v36, v37, v38) + 15) & 0xFFFFFFFFFFFFFFF0);
    v40 = *__error();
    v41 = _os_log_pack_fill(v39, v36, v40, &_mh_execute_header, "updateConfiguration(): %@ is not a dictionary");
    *(_DWORD *)v41 = 138412290;
    *(_QWORD *)(v41 + 4) = v15;
    v31 = v34;
    v32 = v35;
LABEL_23:
    v33 = v39;
    goto LABEL_24;
  }
LABEL_25:
  v104 = v13;
  CFDictionarySetValue(v11, kSCDynamicStorePropSetupLastUpdated, v13);
  v106 = v11;
  CFDictionarySetValue((CFMutableDictionaryRef)qword_10007DFB0, kSCDynamicStoreDomainSetup, v11);
  if (qword_10007DFB8)
  {
    v49 = (__CFDictionary *)qword_10007DFB0;
    v124 = CFArrayGetCount((CFArrayRef)qword_10007DFB8);
    if (v124 >= 1)
    {
      v50 = 0;
      v123 = kSCValNetInterfaceTypeEthernet;
      v122 = kSCEntNetIPv4;
      v111 = (__CFString *)kSCPropNetIPv4ConfigMethod;
      v110 = (__CFString *)kSCValNetIPv4ConfigMethodDHCP;
      v121 = kSCEntNetIPv6;
      v109 = (__CFString *)kSCPropNetIPv6ConfigMethod;
      v108 = (__CFString *)kSCValNetIPv6ConfigMethodAutomatic;
      v120 = kSCEntNetInterface;
      v119 = (__CFString *)kSCPropNetInterfaceDeviceName;
      v118 = kSCPropNetInterfaceHardware;
      v117 = kSCPropNetInterfaceType;
      v115 = kCFBooleanTrue;
      v114 = kSCEntNetProxies;
      v113 = (__CFString *)kSCPropNetProxiesExceptionsList;
      v112 = kSCPropNetProxiesFTPPassive;
      v125 = (const __CFString *)kSCPropNetServicePrimaryRank;
      v116 = kSCPropUserDefinedName;
      do
      {
        ValueAtIndex = (const __SCNetworkInterface *)CFArrayGetValueAtIndex((CFArrayRef)qword_10007DFB8, v50);
        LocalizedDisplayName = SCNetworkInterfaceGetLocalizedDisplayName(ValueAtIndex);
        v53 = CFSTR("Preconfigured");
        if (LocalizedDisplayName)
          v53 = LocalizedDisplayName;
        v126 = v53;
        BSDName = (__CFString *)SCNetworkInterfaceGetBSDName(ValueAtIndex);
        InterfaceType = SCNetworkInterfaceGetInterfaceType(ValueAtIndex);
        if (InterfaceType)
          v56 = InterfaceType;
        else
          v56 = v123;
        v57 = (const __CFString *)_SC_copyInterfaceUUID(BSDName);
        v58 = v122;
        NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainSetup, v57, v122);
        TemplateOverrides = (CFDictionaryRef)__SCNetworkInterfaceGetTemplateOverrides(ValueAtIndex, v58);
        v61 = CFDictionaryGetTypeID();
        if (!TemplateOverrides || CFGetTypeID(TemplateOverrides) != v61)
        {
          TemplateOverrides = (CFDictionaryRef)qword_10007DFC0;
          if (!qword_10007DFC0)
          {
            keys = v111;
            values = v110;
            TemplateOverrides = CFDictionaryCreate(0, (const void **)&keys, (const void **)&values, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
            qword_10007DFC0 = (uint64_t)TemplateOverrides;
          }
        }
        CFDictionarySetValue(v49, NetworkServiceEntity, TemplateOverrides);
        if (NetworkServiceEntity)
          CFRelease(NetworkServiceEntity);
        v62 = v121;
        v63 = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainSetup, v57, v121);
        v64 = (CFDictionaryRef)__SCNetworkInterfaceGetTemplateOverrides(ValueAtIndex, v62);
        v65 = CFDictionaryGetTypeID();
        if (!v64 || CFGetTypeID(v64) != v65)
        {
          v64 = (CFDictionaryRef)qword_10007DFC8;
          if (!qword_10007DFC8)
          {
            keys = v109;
            values = v108;
            v64 = CFDictionaryCreate(0, (const void **)&keys, (const void **)&values, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
            qword_10007DFC8 = (uint64_t)v64;
          }
        }
        CFDictionarySetValue(v49, v63, v64);
        if (v63)
          CFRelease(v63);
        v66 = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainSetup, v57, v120);
        keys = v119;
        v134 = v118;
        v135 = CFSTR("HiddenConfiguration");
        v136 = v117;
        v67 = (__CFString *)v116;
        v137 = v116;
        values = BSDName;
        v129 = (CFNumberRef)v56;
        v130 = v115;
        v131 = v56;
        v68 = (__CFString *)v126;
        v132 = v126;
        v69 = CFDictionaryCreate(0, (const void **)&keys, (const void **)&values, 5, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        CFDictionarySetValue(v49, v66, v69);
        if (v66)
          CFRelease(v66);
        if (v69)
          CFRelease(v69);
        v70 = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainSetup, v57, v114);
        keys = v113;
        v134 = v112;
        v71 = (const void *)qword_10007DFD0;
        if (!qword_10007DFD0)
        {
          *(_OWORD *)v138 = *(_OWORD *)&off_1000771B0;
          valuePtr = 1;
          v72 = CFArrayCreate(0, (const void **)v138, 2, &kCFTypeArrayCallBacks);
          values = v72;
          v73 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
          v129 = v73;
          qword_10007DFD0 = (uint64_t)CFDictionaryCreate(0, (const void **)&keys, (const void **)&values, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          CFRelease(v72);
          CFRelease(v73);
          v71 = (const void *)qword_10007DFD0;
          v68 = (__CFString *)v126;
        }
        CFDictionarySetValue(v49, v70, v71);
        if (v70)
          CFRelease(v70);
        v74 = (const __CFNumber *)__SCNetworkInterfaceGetTemplateOverrides(ValueAtIndex, v125);
        v75 = CFStringGetTypeID();
        if (v74)
        {
          if (CFGetTypeID(v74) == v75)
            v76 = v74;
          else
            v76 = 0;
        }
        else
        {
          v76 = 0;
        }
        v77 = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainSetup, v57, 0);
        keys = v67;
        v134 = 0;
        values = v68;
        v129 = 0;
        if (v76)
        {
          v134 = v125;
          v129 = v76;
          v78 = 2;
        }
        else
        {
          v78 = 1;
        }
        v79 = CFDictionaryCreate(0, (const void **)&keys, (const void **)&values, v78, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        CFDictionarySetValue(v49, v77, v79);
        if (v77)
          CFRelease(v77);
        if (v79)
          CFRelease(v79);
        if (v57)
          CFRelease(v57);
        ++v50;
      }
      while (v124 != v50);
    }
  }
  CFDictionaryApplyFunction((CFDictionaryRef)qword_10007DFB0, (CFDictionaryApplierFunction)sub_10006117C, 0);
  v80 = CFArrayGetCount((CFArrayRef)qword_10007DFA0);
  if (v80 >= 1)
  {
    v81 = v80;
    for (i = 0; i != v81; ++i)
    {
      v83 = CFArrayGetValueAtIndex((CFArrayRef)qword_10007DFA0, i);
      CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_10007DFB0, v83);
    }
  }
  if (!SCDynamicStoreSetMultiple(v107, (CFDictionaryRef)qword_10007DFB0, (CFArrayRef)qword_10007DFA8, 0))
  {
    v84 = sub_10005CC9C();
    v85 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v84, v85))
    {
      v86 = _os_log_pack_size(12);
      v89 = (char *)&v104 - ((__chkstk_darwin(v86, v87, v88) + 15) & 0xFFFFFFFFFFFFFFF0);
      v90 = __error();
      v91 = _os_log_pack_fill(v89, v86, *v90, &_mh_execute_header, "SCDynamicStoreSetMultiple() failed: %s", v104);
      v92 = SCError();
      v93 = SCErrorString(v92);
      *(_DWORD *)v91 = 136315138;
      *(_QWORD *)(v91 + 4) = v93;
      __SC_log_send(5, v84, v85, v89);
    }
  }
  CFRelease((CFTypeRef)qword_10007DF98);
  CFRelease((CFTypeRef)qword_10007DFB0);
  CFRelease((CFTypeRef)qword_10007DFA0);
  CFRelease((CFTypeRef)qword_10007DFA8);
  if (v106)
    CFRelease(v106);
  v94 = v105;
  if (v104)
    CFRelease(v104);
  if (v94)
    CFRelease(v94);
}

uint64_t sub_10005F7B8(_QWORD *a1, SCPreferencesRef prefs)
{
  const __SCNetworkSet *v4;
  uint64_t result;
  os_log_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;

  v4 = SCNetworkSetCopyCurrent(prefs);
  a1[1] = v4;
  if (v4)
  {
    a1[2] = SCNetworkSetCopyServices(v4);
    *a1 = prefs;
    CFRetain(prefs);
    return 1;
  }
  else
  {
    v6 = sub_10005CC9C();
    v7 = _SC_syslog_os_log_mapping(5);
    result = __SC_log_enabled(5, v6, v7);
    if ((_DWORD)result)
    {
      v8 = _os_log_pack_size(2);
      v11 = (char *)&v13 - ((__chkstk_darwin(v8, v9, v10) + 15) & 0xFFFFFFFFFFFFFFF0);
      v12 = __error();
      *(_WORD *)_os_log_pack_fill(v11, v8, *v12, &_mh_execute_header, "No default set") = 0;
      __SC_log_send(5, v6, v7, v11);
      return 0;
    }
  }
  return result;
}

void sub_10005F8E8(SCPreferencesRef *a1, const __CFDictionary *a2)
{
  const void *v4;
  uint64_t v5;
  const void *v6;
  const void *v7;
  const __CFArray *v8;
  os_log_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  const void *v22;
  uint64_t v23;

  v4 = sub_10005CD0C(a2);
  if (!v4)
  {
    v9 = sub_10005CC9C();
    v10 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v9, v10))
      return;
    v11 = _os_log_pack_size(12);
    v14 = (char *)&v23 - ((__chkstk_darwin(v11, v12, v13) + 15) & 0xFFFFFFFFFFFFFFF0);
    v15 = *__error();
    v16 = _os_log_pack_fill(v14, v11, v15, &_mh_execute_header, "%s: no category");
LABEL_9:
    *(_DWORD *)v16 = 136315138;
    *(_QWORD *)(v16 + 4) = "handleCategoryInfo";
    __SC_log_send(5, v9, v10, v14);
    return;
  }
  v5 = SCNetworkCategoryCreate(*a1, v4);
  if (!v5)
  {
    v9 = sub_10005CC9C();
    v10 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v9, v10))
      return;
    v17 = _os_log_pack_size(12);
    v14 = (char *)&v23 - ((__chkstk_darwin(v17, v18, v19) + 15) & 0xFFFFFFFFFFFFFFF0);
    v20 = *__error();
    v16 = _os_log_pack_fill(v14, v17, v20, &_mh_execute_header, "%s: failed to allocate category");
    goto LABEL_9;
  }
  v6 = (const void *)v5;
  v7 = sub_10005CE0C(a2);
  if (v7)
    v8 = (const __CFArray *)SCNetworkCategoryCopyServices(v6, v7);
  else
    v8 = 0;
  v21 = sub_10005CE8C(a2);
  v22 = sub_10005CD8C(a2);
  if (v7 && v8)
  {
    sub_10005FFA4((uint64_t)a1, (uint64_t)v6, (uint64_t)v7, v8, v22);
    CFRelease(v6);
LABEL_19:
    CFRelease(v8);
    return;
  }
  if (v22)
  {
    if ((v21 & 1) != 0)
      sub_10005FB50(a1, v22);
  }
  CFRelease(v6);
  if (v8)
    goto LABEL_19;
}

void sub_10005FB50(SCPreferencesRef *a1, const void *a2)
{
  const __CFArray *v3;
  CFIndex Count;
  __int128 v6;
  CFIndex v7;
  const __SCNetworkService *v8;
  CFIndex v9;
  const __SCNetworkService *ValueAtIndex;
  const __SCNetworkInterface *Interface;
  CFStringRef BSDName;
  CFStringRef v13;
  int v14;
  os_log_t v15;
  uint64_t v16;
  uint64_t v17;
  const __SCNetworkService *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  char *v27;
  os_log_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  int *v34;
  uint64_t v35;
  os_log_t v36;
  uint64_t v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  int *v43;
  uint64_t v44;
  os_log_t v45;
  uint64_t v46;
  os_log_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  __int128 v54;
  const void *v55;
  __int128 v56;
  int v57;
  __int128 *v58;

  v3 = a1[2];
  if (v3)
  {
    Count = CFArrayGetCount(v3);
    if (Count < 1)
      goto LABEL_21;
    v7 = Count;
    v8 = 0;
    v9 = 0;
    *(_QWORD *)&v6 = 136315650;
    v54 = v6;
    *(_QWORD *)&v6 = 136315906;
    v56 = v6;
    v55 = a2;
    do
    {
      ValueAtIndex = (const __SCNetworkService *)CFArrayGetValueAtIndex(a1[2], v9);
      Interface = SCNetworkServiceGetInterface(ValueAtIndex);
      if (Interface)
      {
        BSDName = SCNetworkInterfaceGetBSDName(Interface);
        if (BSDName)
        {
          v13 = BSDName;
          if (CFEqual(a2, BSDName))
          {
            if (v8)
            {
              v14 = SCNetworkSetRemoveService(a1[1], ValueAtIndex);
              v15 = sub_10005CC9C();
              v16 = _SC_syslog_os_log_mapping(5);
              if (__SC_log_enabled(5, v15, v16))
              {
                v17 = _os_log_pack_size(42);
                v57 = v14;
                v18 = v8;
                v19 = v17;
                v58 = &v54;
                v22 = (char *)&v54 - ((__chkstk_darwin(v17, v20, v21) + 15) & 0xFFFFFFFFFFFFFFF0);
                v23 = __error();
                v24 = v19;
                v8 = v18;
                v25 = _os_log_pack_fill(v22, v24, *v23, &_mh_execute_header, "%s: remove service %@ (%@): %s");
                *(_DWORD *)v25 = v56;
                v26 = "SUCCESS";
                if (!v57)
                  v26 = "FAILED";
                *(_QWORD *)(v25 + 4) = "ensureDefaultServiceExistsForInterface";
                *(_WORD *)(v25 + 12) = 2112;
                *(_QWORD *)(v25 + 14) = ValueAtIndex;
                *(_WORD *)(v25 + 22) = 2112;
                *(_QWORD *)(v25 + 24) = v13;
                *(_WORD *)(v25 + 32) = 2080;
                *(_QWORD *)(v25 + 34) = v26;
                v27 = v22;
                a2 = v55;
                __SC_log_send(5, v15, v16, v27);
              }
            }
            else
            {
              v28 = sub_10005CC9C();
              v29 = _SC_syslog_os_log_mapping(5);
              if (__SC_log_enabled(5, v28, v29))
              {
                v30 = _os_log_pack_size(32);
                v58 = &v54;
                v33 = (char *)&v54 - ((__chkstk_darwin(v30, v31, v32) + 15) & 0xFFFFFFFFFFFFFFF0);
                v34 = __error();
                v35 = _os_log_pack_fill(v33, v30, *v34, &_mh_execute_header, "%s: found service %@ (%@)");
                *(_DWORD *)v35 = v54;
                *(_QWORD *)(v35 + 4) = "ensureDefaultServiceExistsForInterface";
                *(_WORD *)(v35 + 12) = 2112;
                *(_QWORD *)(v35 + 14) = ValueAtIndex;
                *(_WORD *)(v35 + 22) = 2112;
                *(_QWORD *)(v35 + 24) = v13;
                __SC_log_send(5, v28, v29, v33);
              }
              v8 = ValueAtIndex;
            }
          }
        }
      }
      ++v9;
    }
    while (v7 != v9);
    if (!v8)
    {
LABEL_21:
      sub_1000606D8(a1, (uint64_t)a2);
      return;
    }
    v36 = sub_10005CC9C();
    v37 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v36, v37))
      return;
    v38 = a2;
    v39 = _os_log_pack_size(22);
    v42 = (char *)&v54 - ((__chkstk_darwin(v39, v40, v41) + 15) & 0xFFFFFFFFFFFFFFF0);
    v43 = __error();
    v44 = _os_log_pack_fill(v42, v39, *v43, &_mh_execute_header, "%s: TBD: ensure defaults for %@");
    *(_DWORD *)v44 = 136315394;
    *(_QWORD *)(v44 + 4) = "ensureDefaultServiceExistsForInterface";
    *(_WORD *)(v44 + 12) = 2112;
    *(_QWORD *)(v44 + 14) = v38;
    v45 = v36;
    v46 = v37;
  }
  else
  {
    v47 = sub_10005CC9C();
    v48 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v47, v48))
      return;
    v49 = _os_log_pack_size(12);
    v42 = (char *)&v54 - ((__chkstk_darwin(v49, v50, v51) + 15) & 0xFFFFFFFFFFFFFFF0);
    v52 = __error();
    v53 = _os_log_pack_fill(v42, v49, *v52, &_mh_execute_header, "%s: no services", (const char *)v54);
    *(_DWORD *)v53 = 136315138;
    *(_QWORD *)(v53 + 4) = "ensureDefaultServiceExistsForInterface";
    v45 = v47;
    v46 = v48;
  }
  __SC_log_send(5, v45, v46, v42);
}

uint64_t sub_10005FFA4(uint64_t a1, uint64_t a2, uint64_t a3, CFArrayRef theArray, const void *a5)
{
  CFIndex Count;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  CFTypeRef *v11;
  size_t v12;
  CFIndex v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  __int128 v18;
  CFIndex v19;
  const __SCNetworkService *v20;
  uint64_t ServiceQoSMarkingPolicy;
  int v22;
  os_log_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  os_log_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  int *v39;
  uint64_t v40;
  const char *v41;
  os_log_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  int *v49;
  uint64_t v50;
  int v51;
  const char *v52;
  CFIndex v53;
  const __SCNetworkService *ValueAtIndex;
  os_log_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  int *v61;
  uint64_t v62;
  const __SCNetworkInterface *Interface;
  const __SCNetworkInterface *v64;
  CFStringRef BSDName;
  CFStringRef v66;
  uint64_t v67;
  uint64_t v68;
  os_log_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  int *v75;
  uint64_t v76;
  os_log_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  int *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int *v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  CFArrayRef v96;

  v93 = a2;
  v94 = a3;
  v95 = a1;
  Count = CFArrayGetCount(theArray);
  __chkstk_darwin(Count, v8, v9);
  v11 = (CFTypeRef *)((char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v10 >= 0x200)
    v12 = 512;
  else
    v12 = v10;
  bzero((char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  v96 = theArray;
  v13 = CFArrayGetCount(theArray);
  v15 = v13;
  if (!a5)
  {
    if (v13 < 1)
      return sub_100060B4C(v95, v11, 0);
    v16 = 0;
    v53 = 0;
    *(_QWORD *)&v14 = 136315138;
    v91 = v14;
    *(_QWORD *)&v14 = 136315394;
    v92 = v14;
    *(_QWORD *)&v14 = 136315650;
    v90 = v14;
    while (1)
    {
      ValueAtIndex = (const __SCNetworkService *)CFArrayGetValueAtIndex(v96, v53);
      v55 = sub_10005CC9C();
      v56 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v55, v56))
      {
        v57 = _os_log_pack_size(22);
        v60 = (char *)&v90 - ((__chkstk_darwin(v57, v58, v59) + 15) & 0xFFFFFFFFFFFFFFF0);
        v61 = __error();
        v62 = _os_log_pack_fill(v60, v57, *v61, &_mh_execute_header, "%s: service %@");
        *(_DWORD *)v62 = v92;
        *(_QWORD *)(v62 + 4) = "insertCategoryServices";
        *(_WORD *)(v62 + 12) = 2112;
        *(_QWORD *)(v62 + 14) = ValueAtIndex;
        __SC_log_send(5, v55, v56, v60);
      }
      Interface = SCNetworkServiceGetInterface(ValueAtIndex);
      if (Interface)
      {
        v64 = Interface;
        BSDName = SCNetworkInterfaceGetBSDName(Interface);
        if (BSDName)
        {
          v66 = BSDName;
          if (v16 < 1)
          {
LABEL_32:
            v68 = v16 + 1;
            v11[v16] = v66;
            v69 = sub_10005CC9C();
            v70 = _SC_syslog_os_log_mapping(5);
            if (__SC_log_enabled(5, v69, v70))
            {
              v71 = _os_log_pack_size(28);
              v74 = (char *)&v90 - ((__chkstk_darwin(v71, v72, v73) + 15) & 0xFFFFFFFFFFFFFFF0);
              v75 = __error();
              v76 = _os_log_pack_fill(v74, v71, *v75, &_mh_execute_header, "%s: added %@, count %d");
              *(_DWORD *)v76 = v90;
              *(_QWORD *)(v76 + 4) = "insertCategoryServices";
              *(_WORD *)(v76 + 12) = 2112;
              *(_QWORD *)(v76 + 14) = v66;
              *(_WORD *)(v76 + 22) = 1024;
              *(_DWORD *)(v76 + 24) = v68;
              __SC_log_send(5, v69, v70, v74);
            }
            v16 = v68;
          }
          else
          {
            v67 = 0;
            while (!CFEqual(v11[v67], v66))
            {
              if (v16 == ++v67)
                goto LABEL_32;
            }
          }
          goto LABEL_40;
        }
        v77 = sub_10005CC9C();
        v78 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v77, v78))
        {
          v85 = _os_log_pack_size(22);
          v82 = (char *)&v90 - ((__chkstk_darwin(v85, v86, v87) + 15) & 0xFFFFFFFFFFFFFFF0);
          v88 = __error();
          v89 = _os_log_pack_fill(v82, v85, *v88, &_mh_execute_header, "%s: no name %@");
          *(_DWORD *)v89 = v92;
          *(_QWORD *)(v89 + 4) = "insertCategoryServices";
          *(_WORD *)(v89 + 12) = 2112;
          *(_QWORD *)(v89 + 14) = v64;
          goto LABEL_39;
        }
      }
      else
      {
        v77 = sub_10005CC9C();
        v78 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v77, v78))
        {
          v79 = _os_log_pack_size(12);
          v82 = (char *)&v90 - ((__chkstk_darwin(v79, v80, v81) + 15) & 0xFFFFFFFFFFFFFFF0);
          v83 = __error();
          v84 = _os_log_pack_fill(v82, v79, *v83, &_mh_execute_header, "%s: no netif", (const char *)v90);
          *(_DWORD *)v84 = v91;
          *(_QWORD *)(v84 + 4) = "insertCategoryServices";
LABEL_39:
          __SC_log_send(5, v77, v78, v82);
        }
      }
LABEL_40:
      if (++v53 == v15)
        goto LABEL_6;
    }
  }
  *v11 = a5;
  v16 = 1;
LABEL_6:
  result = sub_100060B4C(v95, v11, v16);
  if (v15 >= 1)
  {
    v19 = 0;
    *(_QWORD *)&v18 = 136315650;
    v92 = v18;
    *(_QWORD *)&v18 = 136315394;
    v91 = v18;
    while (1)
    {
      v20 = (const __SCNetworkService *)CFArrayGetValueAtIndex(v96, v19);
      ServiceQoSMarkingPolicy = SCNetworkCategoryGetServiceQoSMarkingPolicy(v93, v94, v20);
      v22 = SCNetworkSetAddService(*(SCNetworkSetRef *)(v95 + 8), v20);
      v23 = sub_10005CC9C();
      v24 = _SC_syslog_os_log_mapping(5);
      result = __SC_log_enabled(5, v23, v24);
      if (v22)
        break;
      if ((_DWORD)result)
      {
        v45 = _os_log_pack_size(32);
        v48 = (char *)&v90 - ((__chkstk_darwin(v45, v46, v47) + 15) & 0xFFFFFFFFFFFFFFF0);
        v49 = __error();
        v50 = _os_log_pack_fill(v48, v45, *v49, &_mh_execute_header, "%s: can't add service %@ to set, %s");
        v51 = SCError();
        v52 = SCErrorString(v51);
        *(_DWORD *)v50 = v92;
        *(_QWORD *)(v50 + 4) = "insertCategoryServices";
        *(_WORD *)(v50 + 12) = 2112;
        *(_QWORD *)(v50 + 14) = v20;
        *(_WORD *)(v50 + 22) = 2080;
        *(_QWORD *)(v50 + 24) = v52;
        v42 = v23;
        v43 = v24;
        v44 = v48;
LABEL_19:
        result = __SC_log_send(5, v42, v43, v44);
      }
LABEL_20:
      if (v15 == ++v19)
        return result;
    }
    if ((_DWORD)result)
    {
      v25 = _os_log_pack_size(22);
      v28 = (char *)&v90 - ((__chkstk_darwin(v25, v26, v27) + 15) & 0xFFFFFFFFFFFFFFF0);
      v29 = __error();
      v30 = _os_log_pack_fill(v28, v25, *v29, &_mh_execute_header, "%s: added service %@ to set");
      *(_DWORD *)v30 = v91;
      *(_QWORD *)(v30 + 4) = "insertCategoryServices";
      *(_WORD *)(v30 + 12) = 2112;
      *(_QWORD *)(v30 + 14) = v20;
      __SC_log_send(5, v23, v24, v28);
    }
    result = (uint64_t)SCNetworkServiceGetInterface(v20);
    if (!result)
      goto LABEL_20;
    if (!ServiceQoSMarkingPolicy)
      goto LABEL_20;
    v31 = result;
    v32 = SCNetworkInterfaceSetQoSMarkingPolicy();
    v33 = sub_10005CC9C();
    v34 = _SC_syslog_os_log_mapping(5);
    result = __SC_log_enabled(5, v33, v34);
    if (!(_DWORD)result)
      goto LABEL_20;
    v35 = _os_log_pack_size(32);
    v38 = (char *)&v90 - ((__chkstk_darwin(v35, v36, v37) + 15) & 0xFFFFFFFFFFFFFFF0);
    v39 = __error();
    v40 = _os_log_pack_fill(v38, v35, *v39, &_mh_execute_header, "%s: %sset QoSMarkingPolicy on %@");
    *(_DWORD *)v40 = v92;
    v41 = "";
    if (!v32)
      v41 = "FAILED to ";
    *(_QWORD *)(v40 + 4) = "insertCategoryServices";
    *(_WORD *)(v40 + 12) = 2080;
    *(_QWORD *)(v40 + 14) = v41;
    *(_WORD *)(v40 + 22) = 2112;
    *(_QWORD *)(v40 + 24) = v31;
    v42 = v33;
    v43 = v34;
    v44 = v38;
    goto LABEL_19;
  }
  return result;
}

void sub_1000606D8(SCPreferencesRef *a1, uint64_t a2)
{
  os_log_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  const __SCNetworkInterface *v12;
  const __SCNetworkInterface *v13;
  const __SCNetworkService *v14;
  uint64_t v15;
  const void *v16;
  os_log_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int *v23;
  uint64_t v24;
  os_log_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  os_log_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  const char *v47;
  uint64_t v48;

  v4 = sub_10005CC9C();
  v5 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v4, v5))
  {
    v6 = _os_log_pack_size(22);
    v9 = (char *)&v48 - ((__chkstk_darwin(v6, v7, v8) + 15) & 0xFFFFFFFFFFFFFFF0);
    v10 = __error();
    v11 = _os_log_pack_fill(v9, v6, *v10, &_mh_execute_header, "%s: %@");
    *(_DWORD *)v11 = 136315394;
    *(_QWORD *)(v11 + 4) = "establishServiceForInterface";
    *(_WORD *)(v11 + 12) = 2112;
    *(_QWORD *)(v11 + 14) = a2;
    __SC_log_send(5, v4, v5, v9);
  }
  v12 = (const __SCNetworkInterface *)_SCNetworkInterfaceCreateWithBSDName(0, a2, 0xFFFFFFFFLL);
  if (v12)
  {
    v13 = v12;
    v14 = SCNetworkServiceCreate(*a1, v12);
    v15 = _SC_copyInterfaceUUID(a2);
    if (v15)
    {
      v16 = (const void *)v15;
      if (!_SCNetworkServiceSetServiceID(v14, v15))
      {
        v17 = sub_10005CC9C();
        v18 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v17, v18))
        {
          v19 = _os_log_pack_size(22);
          v22 = (char *)&v48 - ((__chkstk_darwin(v19, v20, v21) + 15) & 0xFFFFFFFFFFFFFFF0);
          v23 = __error();
          v24 = _os_log_pack_fill(v22, v19, *v23, &_mh_execute_header, "%s: failed to set serviceID for %@");
          *(_DWORD *)v24 = 136315394;
          *(_QWORD *)(v24 + 4) = "establishServiceForInterface";
          *(_WORD *)(v24 + 12) = 2112;
          *(_QWORD *)(v24 + 14) = a2;
          __SC_log_send(5, v17, v18, v22);
        }
      }
      CFRelease(v16);
    }
    if (SCNetworkServiceEstablishDefaultConfiguration(v14))
    {
      if (SCNetworkSetAddService(a1[1], v14))
        goto LABEL_18;
      v25 = sub_10005CC9C();
      v26 = _SC_syslog_os_log_mapping(5);
      if (!__SC_log_enabled(5, v25, v26))
        goto LABEL_18;
      v27 = _os_log_pack_size(32);
      v30 = (char *)&v48 - ((__chkstk_darwin(v27, v28, v29) + 15) & 0xFFFFFFFFFFFFFFF0);
      v31 = *__error();
      v32 = _os_log_pack_fill(v30, v27, v31, &_mh_execute_header, "%s: can't add service for %@ to set, %s");
    }
    else
    {
      v25 = sub_10005CC9C();
      v26 = _SC_syslog_os_log_mapping(5);
      if (!__SC_log_enabled(5, v25, v26))
      {
LABEL_18:
        CFRelease(v14);
        CFRelease(v13);
        return;
      }
      v41 = _os_log_pack_size(32);
      v30 = (char *)&v48 - ((__chkstk_darwin(v41, v42, v43) + 15) & 0xFFFFFFFFFFFFFFF0);
      v44 = *__error();
      v32 = _os_log_pack_fill(v30, v41, v44, &_mh_execute_header, "%s: %@ failed to establish default, %s");
    }
    v45 = v32;
    v46 = SCError();
    v47 = SCErrorString(v46);
    *(_DWORD *)v45 = 136315650;
    *(_QWORD *)(v45 + 4) = "establishServiceForInterface";
    *(_WORD *)(v45 + 12) = 2112;
    *(_QWORD *)(v45 + 14) = a2;
    *(_WORD *)(v45 + 22) = 2080;
    *(_QWORD *)(v45 + 24) = v47;
    __SC_log_send(5, v25, v26, v30);
    goto LABEL_18;
  }
  v33 = sub_10005CC9C();
  v34 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v33, v34))
  {
    v35 = _os_log_pack_size(22);
    v38 = (char *)&v48 - ((__chkstk_darwin(v35, v36, v37) + 15) & 0xFFFFFFFFFFFFFFF0);
    v39 = __error();
    v40 = _os_log_pack_fill(v38, v35, *v39, &_mh_execute_header, "%s: can't create netif for %@");
    *(_DWORD *)v40 = 136315394;
    *(_QWORD *)(v40 + 4) = "establishServiceForInterface";
    *(_WORD *)(v40 + 12) = 2112;
    *(_QWORD *)(v40 + 14) = a2;
    __SC_log_send(5, v33, v34, v38);
  }
}

uint64_t sub_100060B4C(uint64_t a1, CFTypeRef *a2, uint64_t a3)
{
  uint64_t v3;
  const __CFArray *v4;
  uint64_t result;
  __int128 v8;
  uint64_t v9;
  CFIndex v10;
  const __SCNetworkService *ValueAtIndex;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  os_log_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  os_log_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  int *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  int v38;
  __int128 *v39;

  v3 = a1;
  v4 = *(const __CFArray **)(a1 + 16);
  if (v4)
  {
    result = CFArrayGetCount(v4);
    if (result >= 1)
    {
      v9 = result;
      v10 = 0;
      *(_QWORD *)&v8 = 136315906;
      v36 = v8;
      v37 = v3;
      do
      {
        ValueAtIndex = (const __SCNetworkService *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v3 + 16), v10);
        result = (uint64_t)SCNetworkServiceGetInterface(ValueAtIndex);
        if (result)
        {
          result = (uint64_t)SCNetworkInterfaceGetBSDName((SCNetworkInterfaceRef)result);
          if (a3 >= 1)
          {
            v12 = (const void *)result;
            if (result)
            {
              result = CFEqual(*a2, (CFTypeRef)result);
              if ((_DWORD)result)
                goto LABEL_12;
              v13 = 1;
              do
              {
                v14 = v13;
                if (a3 == v13)
                  break;
                result = CFEqual(a2[v13], v12);
                v13 = v14 + 1;
              }
              while (!(_DWORD)result);
              if (v14 < a3)
              {
LABEL_12:
                v15 = SCNetworkSetRemoveService(*(SCNetworkSetRef *)(v3 + 8), ValueAtIndex);
                v16 = sub_10005CC9C();
                v17 = _SC_syslog_os_log_mapping(5);
                result = __SC_log_enabled(5, v16, v17);
                if ((_DWORD)result)
                {
                  v18 = v9;
                  v19 = _os_log_pack_size(42);
                  v39 = &v36;
                  v22 = __chkstk_darwin(v19, v20, v21);
                  v38 = v15;
                  v23 = (char *)&v36 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
                  v24 = __error();
                  v25 = v19;
                  v9 = v18;
                  v3 = v37;
                  v26 = _os_log_pack_fill(v23, v25, *v24, &_mh_execute_header, "%s: remove service %@ (%@): %s");
                  *(_DWORD *)v26 = v36;
                  v27 = "SUCCESS";
                  if (!v38)
                    v27 = "FAILED";
                  *(_QWORD *)(v26 + 4) = "removeServicesForInterfaces";
                  *(_WORD *)(v26 + 12) = 2112;
                  *(_QWORD *)(v26 + 14) = ValueAtIndex;
                  *(_WORD *)(v26 + 22) = 2112;
                  *(_QWORD *)(v26 + 24) = v12;
                  *(_WORD *)(v26 + 32) = 2080;
                  *(_QWORD *)(v26 + 34) = v27;
                  result = __SC_log_send(5, v16, v17, v23);
                }
              }
            }
          }
        }
        ++v10;
      }
      while (v10 != v9);
    }
  }
  else
  {
    v28 = sub_10005CC9C();
    v29 = _SC_syslog_os_log_mapping(5);
    result = __SC_log_enabled(5, v28, v29);
    if ((_DWORD)result)
    {
      v30 = _os_log_pack_size(12);
      v33 = (char *)&v36 - ((__chkstk_darwin(v30, v31, v32) + 15) & 0xFFFFFFFFFFFFFFF0);
      v34 = __error();
      v35 = _os_log_pack_fill(v33, v30, *v34, &_mh_execute_header, "%s: no services", (const char *)v36);
      *(_DWORD *)v35 = 136315138;
      *(_QWORD *)(v35 + 4) = "removeServicesForInterfaces";
      return __SC_log_send(5, v28, v29, v33);
    }
  }
  return result;
}

void sub_100060E28(const __SCPreferences *a1, const void *a2, const __CFDictionary *a3)
{
  const __CFDictionary *v3;
  CFStringRef v6;
  const __CFDictionary *v7;
  CFMutableDictionaryRef MutableCopy;
  os_log_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  void *v17;
  int v18;
  const char *v19;
  __CFDictionary *v20;
  CFIndex Count;
  CFIndex v22;
  CFIndex v23;
  const void **v24;
  const void **v25;
  uint64_t i;
  const void *v27;
  CFTypeID TypeID;
  int v29;
  const char *v30;
  CFStringRef v31;
  uint64_t v32;
  const __CFString *v33;
  void *value;

  v3 = a3;
  value = 0;
  if (CFDictionaryGetValueIfPresent(a3, kSCResvLink, (const void **)&value)
    && (v3 = SCPreferencesPathGetValue(a1, (CFStringRef)value)) == 0)
  {
    v9 = sub_10005CC9C();
    v10 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v9, v10))
    {
      v11 = _os_log_pack_size(22);
      v14 = (char *)&v32 - ((__chkstk_darwin(v11, v12, v13) + 15) & 0xFFFFFFFFFFFFFFF0);
      v15 = __error();
      v16 = _os_log_pack_fill(v14, v11, *v15, &_mh_execute_header, "SCPreferencesPathGetValue(,%@,) failed: %s");
      v17 = value;
      v18 = SCError();
      v19 = SCErrorString(v18);
      *(_DWORD *)v16 = 138412546;
      *(_QWORD *)(v16 + 4) = v17;
      *(_WORD *)(v16 + 12) = 2080;
      *(_QWORD *)(v16 + 14) = v19;
      __SC_log_send(5, v9, v10, v14);
    }
  }
  else if (!CFDictionaryContainsKey(v3, kSCResvInactive))
  {
    v6 = CFStringCreateWithFormat(0, 0, CFSTR("%@%@"), kSCDynamicStoreDomainSetup, a2);
    v7 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_10007DFB0, v6);
    if (v7)
      MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v7);
    else
      MutableCopy = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    v20 = MutableCopy;
    Count = CFDictionaryGetCount(v3);
    if (Count >= 1)
    {
      v22 = Count;
      v33 = v6;
      v23 = 8 * Count;
      v24 = (const void **)CFAllocatorAllocate(0, 8 * Count, 0);
      v25 = (const void **)CFAllocatorAllocate(0, v23, 0);
      CFDictionaryGetKeysAndValues(v3, v24, v25);
      for (i = 0; i != v22; ++i)
      {
        v27 = v25[i];
        TypeID = CFDictionaryGetTypeID();
        if (v27 && CFGetTypeID(v27) == TypeID)
        {
          v29 = CFEqual(a2, CFSTR("/"));
          v30 = "";
          if (!v29)
            v30 = "/";
          v31 = CFStringCreateWithFormat(0, 0, CFSTR("%@%s%@"), a2, v30, v24[i]);
          sub_100060E28(a1, v31, v25[i]);
          CFRelease(v31);
        }
        else
        {
          CFDictionarySetValue(v20, v24[i], v25[i]);
        }
      }
      CFAllocatorDeallocate(0, v24);
      CFAllocatorDeallocate(0, v25);
      v6 = v33;
    }
    if (CFDictionaryGetCount(v20) >= 1)
      CFDictionarySetValue((CFMutableDictionaryRef)qword_10007DFB0, v6, v20);
    CFRelease(v20);
    CFRelease(v6);
  }
}

void sub_10006117C(void *key, const void *a2)
{
  const void *Value;
  const __CFArray *v5;
  CFIndex FirstIndexOfValue;
  CFRange v7;

  Value = CFDictionaryGetValue((CFDictionaryRef)qword_10007DF98, key);
  if (Value && CFEqual(Value, a2))
    CFArrayAppendValue((CFMutableArrayRef)qword_10007DFA0, key);
  v5 = (const __CFArray *)qword_10007DFA8;
  v7.length = CFArrayGetCount((CFArrayRef)qword_10007DFA8);
  v7.location = 0;
  FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v5, v7, key);
  if (FirstIndexOfValue != -1)
    CFArrayRemoveValueAtIndex((CFMutableArrayRef)qword_10007DFA8, FirstIndexOfValue);
}

uint64_t sub_100061268(const __CFArray *a1, CFTypeRef *a2, CFArrayRef *a3)
{
  __int128 v6;
  CFIndex v7;
  const void *ValueAtIndex;
  int v9;
  uint64_t v10;
  const void *v11;
  os_log_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int *v18;
  uint64_t v19;
  os_log_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int *v26;
  uint64_t v27;
  __CFArray *Mutable;
  __CFArray *v29;
  BOOL v30;
  BOOL v31;
  unsigned __int8 v32;
  CFIndex Count;
  int v35;
  __CFArray **v36;
  CFArrayRef *v37;
  const __CFArray *v38;
  CFIndex v39;
  __int128 v40;

  if (*a2)
  {
    CFRelease(*a2);
    *a2 = 0;
  }
  if (*a3)
  {
    Count = CFArrayGetCount(*a3);
    CFRelease(*a3);
    *a3 = 0;
  }
  else
  {
    Count = 0;
  }
  v37 = a3;
  if (!a1 || (v39 = CFArrayGetCount(a1), v39 < 1))
  {
    v35 = 0;
    goto LABEL_29;
  }
  v36 = (__CFArray **)a2;
  v35 = 0;
  v7 = 0;
  *(_QWORD *)&v6 = 138412290;
  v40 = v6;
  v38 = a1;
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex(a1, v7);
    v9 = 10;
    while (1)
    {
      if (v9 != 10)
        usleep(0x4E20u);
      v10 = _SCNetworkInterfaceCreateWithBSDName(0, ValueAtIndex, 0);
      if (!v10)
      {
        v20 = sub_10005CC9C();
        v21 = _SC_syslog_os_log_mapping(3);
        if (__SC_log_enabled(3, v20, v21))
        {
          v22 = _os_log_pack_size(12);
          v25 = (char *)&Count - ((__chkstk_darwin(v22, v23, v24) + 15) & 0xFFFFFFFFFFFFFFF0);
          v26 = __error();
          v27 = _os_log_pack_fill(v25, v22, *v26, &_mh_execute_header, "could not create network interface for %@");
          *(_DWORD *)v27 = v40;
          *(_QWORD *)(v27 + 4) = ValueAtIndex;
          __SC_log_send(3, v20, v21, v25);
        }
        goto LABEL_19;
      }
      v11 = (const void *)v10;
      if (_SCNetworkInterfaceGetIOPath(v10))
        break;
      v12 = sub_10005CC9C();
      v13 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v12, v13))
      {
        v14 = _os_log_pack_size(12);
        v17 = (char *)&Count - ((__chkstk_darwin(v14, v15, v16) + 15) & 0xFFFFFFFFFFFFFFF0);
        v18 = __error();
        v19 = _os_log_pack_fill(v17, v14, *v18, &_mh_execute_header, "could not get IOPath for %@");
        *(_DWORD *)v19 = v40;
        *(_QWORD *)(v19 + 4) = ValueAtIndex;
        __SC_log_send(3, v12, v13, v17);
      }
      CFRelease(v11);
LABEL_19:
      if (!--v9)
      {
        a1 = v38;
        goto LABEL_26;
      }
    }
    Mutable = *v37;
    if (!*v37)
    {
      Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
      *v37 = Mutable;
    }
    CFArrayAppendValue(Mutable, ValueAtIndex);
    v29 = *v36;
    a1 = v38;
    if (!*v36)
    {
      v29 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
      *v36 = v29;
    }
    CFArrayAppendValue(v29, v11);
    CFRelease(v11);
    v35 = 1;
LABEL_26:
    ++v7;
  }
  while (v7 != v39);
LABEL_29:
  if (*v37)
    v30 = CFArrayGetCount(*v37) == 0;
  else
    v30 = 1;
  v31 = Count <= 0 || !v30;
  v32 = v35;
  if (!v31)
    return 1;
  return v32;
}

void sub_1000615B4(const __SCPreferences *a1)
{
  const __SCPreferences *i;
  int v2;
  CFPropertyListRef Value;
  CFPropertyListRef v4;
  CFPropertyListRef v5;
  os_log_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  SCNetworkSetRef v14;
  SCNetworkSetRef Default;
  os_log_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int *v22;
  int v23;
  int v24;
  os_log_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  int *v31;
  uint64_t v32;
  const char *v33;
  int v34;
  os_log_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  int *v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  const char *v49;

  for (i = a1; ; a1 = i)
  {
    if (SCPreferencesLock(a1, 1u))
    {
      Value = SCPreferencesGetValue(i, CFSTR("Model"));
      v4 = (CFPropertyListRef)_SC_hw_model(0);
      if (Value)
      {
        v5 = v4;
        if (Value != v4 && (!v4 || !CFEqual(Value, v4)))
        {
          v6 = sub_10005CC9C();
          v7 = _SC_syslog_os_log_mapping(5);
          if (__SC_log_enabled(5, v6, v7))
          {
            v8 = _os_log_pack_size(22);
            v11 = (char *)&v49 - ((__chkstk_darwin(v8, v9, v10) + 15) & 0xFFFFFFFFFFFFFFF0);
            v12 = __error();
            v13 = _os_log_pack_fill(v11, v8, *v12, &_mh_execute_header, "Hardware model changed\n  created on \"%@\"\n  now on     \"%@\"");
            *(_DWORD *)v13 = 138412546;
            *(_QWORD *)(v13 + 4) = Value;
            *(_WORD *)(v13 + 12) = 2112;
            *(_QWORD *)(v13 + 14) = v5;
            __SC_log_send(5, v6, v7, v11);
          }
          sub_10005DF08(i, (uint64_t)Value);
        }
      }
      v14 = SCNetworkSetCopyCurrent(i);
      Default = v14;
      if (v14 || (Default = (SCNetworkSetRef)_SCNetworkSetCreateDefault(i)) != 0)
      {
        if (SCNetworkSetEstablishDefaultConfiguration(Default))
        {
          if (SCPreferencesCommitChanges(i))
          {
            v16 = sub_10005CC9C();
            v17 = _SC_syslog_os_log_mapping(5);
            if (__SC_log_enabled(5, v16, v17))
            {
              v18 = _os_log_pack_size(2);
              v21 = (char *)&v49 - ((__chkstk_darwin(v18, v19, v20) + 15) & 0xFFFFFFFFFFFFFFF0);
              v22 = __error();
              *(_WORD *)_os_log_pack_fill(v21, v18, *v22, &_mh_execute_header, "New network configuration saved") = 0;
              __SC_log_send(5, v16, v17, v21);
            }
            goto LABEL_24;
          }
          v34 = SCError();
          if (v34 == 30)
          {
            byte_10007DF80 = 1;
LABEL_24:
            SCPreferencesApplyChanges(i);
            SCPreferencesUnlock(i);
LABEL_34:
            CFRelease(Default);
            return;
          }
          v23 = v34;
          SCPreferencesApplyChanges(i);
        }
        else
        {
          v23 = SCError();
          if (!v14)
            SCNetworkSetRemove(Default);
        }
      }
      else
      {
        v23 = SCError();
      }
      v35 = sub_10005CC9C();
      v36 = _SC_syslog_os_log_mapping(5);
      v37 = __SC_log_enabled(5, v35, v36);
      if (v23)
      {
        if (!v37)
          goto LABEL_33;
        v38 = _os_log_pack_size(12);
        v41 = (char *)&v49 - ((__chkstk_darwin(v38, v39, v40) + 15) & 0xFFFFFFFFFFFFFFF0);
        v42 = __error();
        v43 = _os_log_pack_fill(v41, v38, *v42, &_mh_execute_header, "Could not establish network configuration: %s", v49);
        v44 = SCErrorString(v23);
        *(_DWORD *)v43 = 136315138;
        *(_QWORD *)(v43 + 4) = v44;
      }
      else
      {
        if (!v37)
          goto LABEL_33;
        v45 = _os_log_pack_size(2);
        v41 = (char *)&v49 - ((__chkstk_darwin(v45, v46, v47) + 15) & 0xFFFFFFFFFFFFFFF0);
        v48 = __error();
        *(_WORD *)_os_log_pack_fill(v41, v45, *v48, &_mh_execute_header, "Network configuration not updated") = 0;
      }
      __SC_log_send(5, v35, v36, v41);
LABEL_33:
      SCPreferencesUnlock(i);
      if (!Default)
        return;
      goto LABEL_34;
    }
    v2 = SCError();
    if (v2 != 3005)
      break;
    SCPreferencesSynchronize(i);
  }
  v24 = v2;
  v25 = sub_10005CC9C();
  v26 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v25, v26))
  {
    v27 = _os_log_pack_size(12);
    v30 = (char *)&v49 - ((__chkstk_darwin(v27, v28, v29) + 15) & 0xFFFFFFFFFFFFFFF0);
    v31 = __error();
    v32 = _os_log_pack_fill(v30, v27, *v31, &_mh_execute_header, "Could not acquire network configuration lock: %s", v49);
    v33 = SCErrorString(v24);
    *(_DWORD *)v32 = 136315138;
    *(_QWORD *)(v32 + 4) = v33;
    __SC_log_send(5, v25, v26, v30);
  }
}

id sub_100061A68()
{
  void *v0;
  os_log_t v1;
  void *v2;

  v0 = (void *)qword_10007E008;
  if (!qword_10007E008)
  {
    v1 = os_log_create("com.apple.SystemConfiguration", "QoSMarking");
    v2 = (void *)qword_10007E008;
    qword_10007E008 = (uint64_t)v1;

    v0 = (void *)qword_10007E008;
  }
  return v0;
}

void sub_100064040(id a1)
{
  QoSMarkingController *v1;
  void *v2;

  v1 = objc_alloc_init(QoSMarkingController);
  v2 = (void *)qword_10007E010;
  qword_10007E010 = (uint64_t)v1;

}

void sub_1000648D8(__CFBundle *a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  __int128 *v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  CFStringRef Identifier;
  __int128 *v14;
  const __CFDictionary *InfoDictionary;
  CFTypeID TypeID;
  void *Value;
  CFTypeID v18;
  void *v19;
  void *v20;
  CFTypeID v21;
  void *v22;
  SCDynamicStoreRef v23;
  const __SCDynamicStore *v24;
  __CFArray *Mutable;
  __CFArray *v26;
  CFStringRef NetworkInterfaceEntity;
  NSObject *v28;
  dispatch_queue_t v29;
  void *v30;
  id v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  id v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  int v42;
  const char *v43;
  __int128 *v44;
  id v45;
  uint64_t v46;
  int v47;
  __int128 *v48;
  uint64_t v49;
  int v50;
  void *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;

  v2 = sub_100061A68();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v3, v4))
  {
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v5 = (_sc_log > 0) | 2;
    v52 = 0u;
    v53 = 0u;
    v6 = os_log_type_enabled(v3, (os_log_type_t)v4) ? v5 : 2;
    LOWORD(v50) = 0;
    v7 = (__int128 *)_os_log_send_and_compose_impl(v6, 0, &v52, 256, &_mh_execute_header, v3, v4, "load() called", &v50, 2);
    __SC_log_send2(7, v3, v4, 0, v7);
    if (v7 != &v52)
      free(v7);
  }

  v8 = sub_100061A68();
  v9 = objc_claimAutoreleasedReturnValue(v8);
  v10 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v9, v10))
  {
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    LODWORD(v11) = (_sc_log > 0) | 2;
    v52 = 0u;
    v53 = 0u;
    v11 = os_log_type_enabled(v9, (os_log_type_t)v10) ? v11 : 2;
    v12 = v9;
    Identifier = CFBundleGetIdentifier(a1);
    v50 = 138412290;
    v51 = (void *)Identifier;
    LODWORD(v49) = 12;
    v14 = (__int128 *)_os_log_send_and_compose_impl(v11, 0, &v52, 256, &_mh_execute_header, v12, v10, "  bundle ID = %@", &v50, v49);

    __SC_log_send2(7, v12, v10, 0, v14);
    if (v14 != &v52)
      free(v14);
  }

  if (objc_opt_class(NEPolicy))
  {
    qword_10007E020 = (uint64_t)SCDynamicStoreKeyCreateNetworkInterface(0, kSCDynamicStoreDomainState);
    InfoDictionary = CFBundleGetInfoDictionary(a1);
    TypeID = CFDictionaryGetTypeID();
    if (InfoDictionary && CFGetTypeID(InfoDictionary) == TypeID)
    {
      Value = (void *)CFDictionaryGetValue(InfoDictionary, CFSTR("QoSMarking_AppleAudioVideoCalls_BundleIDs"));
      v18 = CFArrayGetTypeID();
      if (Value)
      {
        if (CFGetTypeID(Value) == v18)
          v19 = Value;
        else
          v19 = 0;
      }
      else
      {
        v19 = 0;
      }
      objc_storeStrong((id *)&qword_10007DFF8, v19);
      v20 = (void *)CFDictionaryGetValue(InfoDictionary, CFSTR("QoSMarking_AppleAudioVideoCalls_ExecutablePaths"));
      v21 = CFArrayGetTypeID();
      if (v20)
      {
        if (CFGetTypeID(v20) == v21)
          v22 = v20;
        else
          v22 = 0;
      }
      else
      {
        v22 = 0;
      }
      objc_storeStrong((id *)&qword_10007E000, v22);
    }
    v23 = SCDynamicStoreCreate(0, CFSTR("QoS Marking Configuraton plug-in"), (SCDynamicStoreCallBack)sub_100064FF4, 0);
    if (v23)
    {
      v24 = v23;
      Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
      v26 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
      CFArrayAppendValue(Mutable, (const void *)qword_10007E020);
      NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainSetup, kSCCompAnyRegex, kSCEntNetQoSMarkingPolicy);
      CFArrayAppendValue(v26, NetworkInterfaceEntity);
      CFRelease(NetworkInterfaceEntity);
      LODWORD(NetworkInterfaceEntity) = SCDynamicStoreSetNotificationKeys(v24, Mutable, v26);
      CFRelease(Mutable);
      CFRelease(v26);
      if (!(_DWORD)NetworkInterfaceEntity)
      {
        v45 = sub_100061A68();
        v32 = objc_claimAutoreleasedReturnValue(v45);
        v33 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v32, v33))
        {
          v66 = 0u;
          v67 = 0u;
          v64 = 0u;
          v65 = 0u;
          v62 = 0u;
          v63 = 0u;
          v60 = 0u;
          v61 = 0u;
          v58 = 0u;
          v59 = 0u;
          v56 = 0u;
          v57 = 0u;
          v54 = 0u;
          v55 = 0u;
          LODWORD(v46) = (_sc_log > 0) | 2;
          v52 = 0u;
          v53 = 0u;
          if (os_log_type_enabled(v32, (os_log_type_t)v33))
            v46 = v46;
          else
            v46 = 2;
          v32 = v32;
          v47 = SCError();
          SCErrorString(v47);
          v36 = _os_log_send_and_compose_impl(v46, 0, &v52, 256, &_mh_execute_header, v32, v33, "SCDynamicStoreSetNotificationKeys() failed: %s", &v50);
          goto LABEL_49;
        }
LABEL_51:

        CFRelease(v24);
        return;
      }
      v28 = qword_10007E040;
      if (!qword_10007E040)
      {
        v29 = dispatch_queue_create("com.apple.SystemConfiguration.QoSMarking", 0);
        v30 = (void *)qword_10007E040;
        qword_10007E040 = (uint64_t)v29;

        v28 = qword_10007E040;
      }
      if (!SCDynamicStoreSetDispatchQueue(v24, v28))
      {
        v31 = sub_100061A68();
        v32 = objc_claimAutoreleasedReturnValue(v31);
        v33 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v32, v33))
        {
          v66 = 0u;
          v67 = 0u;
          v64 = 0u;
          v65 = 0u;
          v62 = 0u;
          v63 = 0u;
          v60 = 0u;
          v61 = 0u;
          v58 = 0u;
          v59 = 0u;
          v56 = 0u;
          v57 = 0u;
          v54 = 0u;
          v55 = 0u;
          LODWORD(v34) = (_sc_log > 0) | 2;
          v52 = 0u;
          v53 = 0u;
          if (os_log_type_enabled(v32, (os_log_type_t)v33))
            v34 = v34;
          else
            v34 = 2;
          v32 = v32;
          v35 = SCError();
          SCErrorString(v35);
          v36 = _os_log_send_and_compose_impl(v34, 0, &v52, 256, &_mh_execute_header, v32, v33, "SCDynamicStoreSetDispatchQueue() failed: %s", &v50);
LABEL_49:
          v48 = (__int128 *)v36;

          __SC_log_send2(5, v32, v33, 0, v48);
          if (v48 != &v52)
            free(v48);
          goto LABEL_51;
        }
        goto LABEL_51;
      }
    }
    else
    {
      v37 = sub_100061A68();
      v38 = objc_claimAutoreleasedReturnValue(v37);
      v39 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v38, v39))
      {
        v66 = 0u;
        v67 = 0u;
        v64 = 0u;
        v65 = 0u;
        v62 = 0u;
        v63 = 0u;
        v60 = 0u;
        v61 = 0u;
        v58 = 0u;
        v59 = 0u;
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        LODWORD(v40) = (_sc_log > 0) | 2;
        v52 = 0u;
        v53 = 0u;
        v40 = os_log_type_enabled(v38, (os_log_type_t)v39) ? v40 : 2;
        v41 = v38;
        v42 = SCError();
        v43 = SCErrorString(v42);
        v50 = 136315138;
        v51 = (void *)v43;
        v44 = (__int128 *)_os_log_send_and_compose_impl(v40, 0, &v52, 256, &_mh_execute_header, v41, v39, "SCDynamicStoreCreate() failed: %s", (const char *)&v50);

        __SC_log_send2(3, v41, v39, 0, v44);
        if (v44 != &v52)
          free(v44);
      }

    }
  }
}

void sub_100064FF4(SCDynamicStoreRef store, CFArrayRef keys)
{
  const __CFDictionary *v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  const __CFString *ValueAtIndex;
  const __CFDictionary *Value;
  CFTypeID TypeID;
  const void *v11;
  CFTypeID v12;
  void *v13;
  void *v14;
  const __CFString *v15;
  CFMutableStringRef MutableCopy;
  CFIndex location;
  CFIndex v18;
  const __CFDictionary *v19;
  const __CFDictionary *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  __CFDictionary *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  CFRange v29;
  CFRange v30;

  if (!qword_10007E038)
    qword_10007E038 = (uint64_t)SCDynamicStoreKeyCreate(0, CFSTR("%@/%@/%@/"), kSCDynamicStoreDomainSetup, kSCCompNetwork, kSCCompInterface);
  v4 = SCDynamicStoreCopyMultiple(store, keys, 0);
  Count = CFArrayGetCount(keys);
  if (Count >= 1)
  {
    v6 = Count;
    v7 = 0;
    v28 = (void *)kSCPropNetQoSMarkingWhitelistedAppIdentifiers;
    v27 = (void *)kSCPropNetQoSMarkingAllowListAppIdentifiers;
    do
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(keys, v7);
      if (CFEqual(ValueAtIndex, (CFTypeRef)qword_10007E020))
      {
        if (v4)
        {
          Value = (const __CFDictionary *)CFDictionaryGetValue(v4, ValueAtIndex);
          TypeID = CFDictionaryGetTypeID();
          if (Value)
          {
            if (CFGetTypeID(Value) == TypeID)
            {
              v11 = CFDictionaryGetValue(Value, kSCPropNetInterfaces);
              v12 = CFArrayGetTypeID();
              if (v11)
              {
                if (CFGetTypeID(v11) == v12)
                {
                  v13 = objc_autoreleasePoolPush();
                  v14 = (void *)objc_claimAutoreleasedReturnValue(+[QoSMarkingController sharedController](QoSMarkingController, "sharedController"));
                  objc_msgSend(v14, "setInterfaces:", v11);

                  objc_autoreleasePoolPop(v13);
                }
              }
            }
          }
        }
        else
        {
          CFDictionaryGetTypeID();
        }
      }
      else
      {
        v15 = (const __CFString *)qword_10007E038;
        if (CFStringHasPrefix(ValueAtIndex, (CFStringRef)qword_10007E038))
        {
          MutableCopy = CFStringCreateMutableCopy(0, 0, ValueAtIndex);
          v29.length = CFStringGetLength(v15);
          v29.location = 0;
          CFStringDelete(MutableCopy, v29);
          location = CFStringFind(MutableCopy, CFSTR("/"), 0).location;
          if (location != -1)
          {
            v18 = location;
            v30.length = CFStringGetLength(MutableCopy) - location;
            v30.location = v18;
            CFStringDelete(MutableCopy, v30);
          }
          if (MutableCopy)
          {
            if (v4)
            {
              v19 = (const __CFDictionary *)CFDictionaryGetValue(v4, ValueAtIndex);
              v20 = v19;
              if (v19)
              {
                v21 = CFDictionaryGetValue(v19, v28);
                if (v21)
                {
                  v22 = v21;
                  v23 = CFDictionaryGetValue(v20, v27);
                  v24 = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v20);
                  v20 = v24;
                  if (!v23)
                    CFDictionarySetValue(v24, v27, v22);
                  CFDictionaryRemoveValue(v20, v28);
                }
                else
                {
                  CFRetain(v20);
                }
              }
            }
            else
            {
              v20 = 0;
            }
            v25 = objc_autoreleasePoolPush();
            v26 = (void *)objc_claimAutoreleasedReturnValue(+[QoSMarkingController sharedController](QoSMarkingController, "sharedController"));
            objc_msgSend(v26, "setPolicy:forInterface:", v20, MutableCopy);

            objc_autoreleasePoolPop(v25);
            if (v20)
              CFRelease(v20);
            CFRelease(MutableCopy);
          }
        }
      }
      ++v7;
    }
    while (v6 != v7);
  }
  if (v4)
    CFRelease(v4);
}

void sub_100065364(id a1)
{
  byte_10007E028 = os_variant_has_internal_content("com.apple.SystemConfiguration");
}

void sub_1000653BC(const char *a1, int a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  __int128 *v8;
  __int128 *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  char *v14;
  __int128 *v15;
  int v16;
  int v17;
  void *v18;
  __int16 v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  v16 = a2;
  if (sysctlbyname(a1, 0, 0, &v16, 4uLL) != -1)
  {
    v3 = sub_100061A68();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    v5 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v4, v5))
      goto LABEL_16;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v6 = (_sc_log > 0) | 2;
    v7 = os_log_type_enabled(v4, (os_log_type_t)v5) ? v6 : 2;
    v17 = 136315394;
    v18 = (void *)a1;
    v19 = 1024;
    v20 = v16;
    v8 = (__int128 *)_os_log_send_and_compose_impl(v7, 0, &v21, 256, &_mh_execute_header, v4, v5, "QoS marking policy: sysctl %s=%d", (const char *)&v17, 18);
    __SC_log_send2(5, v4, v5, 0, v8);
    if (v8 == &v21)
      goto LABEL_16;
    v9 = v8;
    goto LABEL_15;
  }
  if (*__error() == 2)
    return;
  v10 = sub_100061A68();
  v4 = objc_claimAutoreleasedReturnValue(v10);
  v11 = _SC_syslog_os_log_mapping(3);
  if (__SC_log_enabled(3, v4, v11))
  {
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    LODWORD(v12) = (_sc_log > 0) | 2;
    v12 = os_log_type_enabled(v4, (os_log_type_t)v11) ? v12 : 2;
    v4 = v4;
    v13 = __error();
    v14 = strerror(*v13);
    v17 = 136315138;
    v18 = v14;
    v15 = (__int128 *)_os_log_send_and_compose_impl(v12, 0, &v21, 256, &_mh_execute_header, v4, v11, "sysctlbyname() failed: %s", (const char *)&v17);

    __SC_log_send2(3, v4, v11, 0, v15);
    if (v15 != &v21)
    {
      v9 = v15;
LABEL_15:
      free(v9);
    }
  }
LABEL_16:

}

void sub_100065670()
{
  __assert_rtn("pushNotifications", "_SCD.c", 525, "theSession != NULL");
}

void sub_100065698()
{
  __assert_rtn("getSession", "session.c", 334, "server != MACH_PORT_NULL");
}

void sub_1000656C0(int a1, NSObject *a2)
{
  _DWORD v2[2];

  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "cleanup : %5u", (uint8_t *)v2, 8u);
}

void sub_100065734()
{
  __assert_rtn("patternRemoveSession", "pattern.c", 423, "pInfo != NULL");
}

void sub_10006575C(int *a1, uint64_t *a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  _DWORD v5[2];
  __int16 v6;
  uint64_t v7;

  v3 = *a1;
  v4 = *a2;
  v5[0] = 67109378;
  v5[1] = v3;
  v6 = 2112;
  v7 = v4;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "open    : %5u : %@", (uint8_t *)v5, 0x12u);
}

void sub_1000657E8(uint64_t a1, NSObject *a2)
{
  int v2;
  _DWORD v3[2];

  v2 = *(_DWORD *)(a1 + 40);
  v3[0] = 67109120;
  v3[1] = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "close   : %5u", (uint8_t *)v3, 8u);
}

void sub_100065860(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  int v4;
  const char *v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;

  v3 = *(unsigned __int8 *)(a1 + 44);
  v4 = *(_DWORD *)(a1 + 40);
  v6 = 136315650;
  if (v3)
    v5 = "t ";
  else
    v5 = "  ";
  v7 = v5;
  v8 = 1024;
  v9 = v4;
  v10 = 2112;
  v11 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "add  %s : %5u : %@", (uint8_t *)&v6, 0x1Cu);
}

void sub_100065910()
{
  uint64_t v0;
  os_log_t v1;

  sub_100011444();
  sub_100011430((void *)&_mh_execute_header, v0, v1, "*copy   : %5u : %@");
}

void sub_100065980()
{
  uint64_t v0;
  os_log_t v1;

  sub_100011444();
  sub_100011430((void *)&_mh_execute_header, v0, v1, "*copy   : %5u : %@");
}

void sub_1000659E8()
{
  __assert_rtn("iterateRegistryBusy", "ifnamer.c", 3943, "newNodes != NULL");
}

void sub_100065A10()
{
  __assert_rtn("removeNamingRequestAtIndex", "ifnamer.c", 2935, "S_deferred_list != NULL");
}

void sub_100065A38()
{
  __assert_rtn("removeNamingRequestAtIndex", "ifnamer.c", 2936, "where < CFArrayGetCount(S_deferred_list)");
}

void sub_100065A60()
{
  __assert_rtn("watchTrustedStatus", "ifnamer.c", 2472, "key != NULL");
}

void sub_100065A88()
{
  __assert_rtn("dns_configuration_set", "dns-configuration.c", 1631, "resolvers != NULL");
}

void sub_100065AB0()
{
  __assert_rtn("add_default_resolver", "dns-configuration.c", 1202, "myDefault != NULL");
}

void sub_100065AD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100046428("nwi_state_get_last_ifstate", "network_state_information_priv.c", a3, "state != NULL");
}

void sub_100065AFC()
{
  __assert_rtn("_nwi_state_update_interface_generations", "network_state_information_priv.c", 669, "old_ifstate != NULL");
}

void sub_100065B24()
{
  __assert_rtn("_nwi_state_update_interface_generations", "network_state_information_priv.c", 693, "old_ifstate != NULL");
}

void sub_100065B4C()
{
  __assert_rtn("IPMonitorProcessChanges", "ip_plugin.c", 8605, "services_info != NULL");
}

void sub_100065B74()
{
  __assert_rtn("ElectionResultsGetPrimary", "ip_plugin.c", 7467, "services_info != NULL");
}

void sub_100065B9C()
{
  __assert_rtn("accumulate_dns_servers", "ip_plugin.c", 4630, "addr != NULL");
}

void sub_100065BC4()
{
  __assert_rtn("add_reachability_flags_to_candidate", "ip_plugin.c", 7414, "candidate != NULL");
}

void sub_100065BEC()
{
  __assert_rtn("add_reachability_flags_to_candidate", "ip_plugin.c", 7415, "services_info != NULL");
}

void sub_100065C14()
{
  __assert_rtn("update_hostname", "set-hostname.c", 522, "localHostName != NULL");
}

void sub_100065C3C()
{
  __assert_rtn("ptr_query_callback", "set-hostname.c", 381, "localHostName != NULL");
}

void sub_100065C64()
{
  __assert_rtn("CategorySessionRelease", "CategoryManagerServer.c", 287, "session->in_list == false");
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "UTF8String");
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "UUID");
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "UUIDString");
}

id objc_msgSend_activate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activate");
}

id objc_msgSend_addAgentRegistrationObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addAgentRegistrationObject:");
}

id objc_msgSend_addAllowListAppIdentifierPolicy_forApp_order_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addAllowListAppIdentifierPolicy:forApp:order:");
}

id objc_msgSend_addAllowListPathPolicy_forPath_order_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addAllowListPathPolicy:forPath:order:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addPolicy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addPolicy:");
}

id objc_msgSend_addPolicyToFloatingAgent_domain_agentUUIDToUse_policyType_useControlPolicySession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addPolicyToFloatingAgent:domain:agentUUIDToUse:policyType:useControlPolicySession:");
}

id objc_msgSend_agentType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "agentType");
}

id objc_msgSend_agentUUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "agentUUID");
}

id objc_msgSend_allInterfaces(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allInterfaces");
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allValues");
}

id objc_msgSend_apply(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "apply");
}

id objc_msgSend_applyPolicies(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "applyPolicies");
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "array");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "BOOLValue");
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bytes");
}

id objc_msgSend_cleanConflictingAgentsFromList_new_list_agentDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cleanConflictingAgentsFromList:new_list:agentDictionary:");
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_controlPolicySession(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "controlPolicySession");
}

id objc_msgSend_controllerQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "controllerQueue");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copy");
}

id objc_msgSend_copyConfigAgentData_uuid_length_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyConfigAgentData:uuid:length:");
}

id objc_msgSend_copyDNSAgentData_length_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyDNSAgentData:length:");
}

id objc_msgSend_copyProxyAgentData_length_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyProxyAgentData:length:");
}

id objc_msgSend_copyResolverList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyResolverList:");
}

id objc_msgSend_copyUUIDsForBundleID_uid_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyUUIDsForBundleID:uid:");
}

id objc_msgSend_copyUUIDsForExecutable_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyUUIDsForExecutable:");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "count");
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_countForObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "countForObject:");
}

id objc_msgSend_countProxyEntriesEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "countProxyEntriesEnabled:");
}

id objc_msgSend_createPolicySession(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createPolicySession");
}

id objc_msgSend_currentScanResult(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentScanResult");
}

id objc_msgSend_dataForProxyArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataForProxyArray:");
}

id objc_msgSend_dataForProxyDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataForProxyDictionary:");
}

id objc_msgSend_dataForResolver_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataForResolver:");
}

id objc_msgSend_dataLengthSanityCheck_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataLengthSanityCheck:");
}

id objc_msgSend_dataWithPropertyList_format_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithPropertyList:format:options:error:");
}

id objc_msgSend_deleteAgentList_list_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deleteAgentList:list:");
}

id objc_msgSend_destroyFloatingAgent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "destroyFloatingAgent:");
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionary");
}

id objc_msgSend_domain_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "domain:");
}

id objc_msgSend_drop(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "drop");
}

id objc_msgSend_effectiveApplication_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "effectiveApplication:");
}

id objc_msgSend_entityInstanceNumber_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "entityInstanceNumber:");
}

id objc_msgSend_floatingDNSAgentList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "floatingDNSAgentList");
}

id objc_msgSend_floatingProxyAgentList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "floatingProxyAgentList");
}

id objc_msgSend_floatingProxyAgentList_TCPConverter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "floatingProxyAgentList_TCPConverter");
}

id objc_msgSend_getAgentData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAgentData");
}

id objc_msgSend_getAgentList_agentType_agentSubType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAgentList:agentType:agentSubType:");
}

id objc_msgSend_getAgentMapping(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAgentMapping");
}

id objc_msgSend_getAgentName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAgentName");
}

id objc_msgSend_getAgentSubType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAgentSubType");
}

id objc_msgSend_getAgentType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAgentType");
}

id objc_msgSend_getAgentUUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAgentUUID");
}

id objc_msgSend_getAgentWithSameDataAndSubType_data_subType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAgentWithSameDataAndSubType:data:subType:");
}

id objc_msgSend_getAssociatedEntity(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAssociatedEntity");
}

id objc_msgSend_getDNSDataFromCurrentConfig_domain_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getDNSDataFromCurrentConfig:domain:");
}

id objc_msgSend_getIntValue_valuePtr_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getIntValue:valuePtr:");
}

id objc_msgSend_getProxyDataFromCurrentConfig_domain_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getProxyDataFromCurrentConfig:domain:");
}

id objc_msgSend_getRegistrationObject(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getRegistrationObject");
}

id objc_msgSend_getUUIDBytes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getUUIDBytes:");
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasPrefix:");
}

id objc_msgSend_indexOfObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "indexOfObject:");
}

id objc_msgSend_initWithArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithArray:");
}

id objc_msgSend_initWithBytes_length_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithBytes:length:");
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCapacity:");
}

id objc_msgSend_initWithNetworkAgentClass_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithNetworkAgentClass:");
}

id objc_msgSend_initWithOrder_result_conditions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithOrder:result:conditions:");
}

id objc_msgSend_initWithParameters_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithParameters:");
}

id objc_msgSend_initWithUUIDBytes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithUUIDBytes:");
}

id objc_msgSend_initializeController(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initializeController");
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "intValue");
}

id objc_msgSend_internalRegistrationObject(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "internalRegistrationObject");
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invalidate");
}

id objc_msgSend_isActive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isActive");
}

id objc_msgSend_isControllerReady(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isControllerReady");
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isGlobalProxy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isGlobalProxy:");
}

id objc_msgSend_isMetered(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isMetered");
}

id objc_msgSend_isResolverMulticast_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isResolverMulticast:");
}

id objc_msgSend_isResolverOnion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isResolverOnion:");
}

id objc_msgSend_isResolverPrivate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isResolverPrivate:");
}

id objc_msgSend_isTCPConverterProxyEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isTCPConverterProxyEnabled:");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "length");
}

id objc_msgSend_netAgentUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "netAgentUUID:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_policyDB(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "policyDB");
}

id objc_msgSend_policySession(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "policySession");
}

id objc_msgSend_policyWithID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "policyWithID:");
}

id objc_msgSend_preferredPolicySession(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preferredPolicySession");
}

id objc_msgSend_processDNSChanges(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processDNSChanges");
}

id objc_msgSend_processDNSResolvers_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processDNSResolvers:");
}

id objc_msgSend_processDefaultProxyChanges_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processDefaultProxyChanges:");
}

id objc_msgSend_processOnionResolver_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processOnionResolver:");
}

id objc_msgSend_processProxyChanges(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processProxyChanges");
}

id objc_msgSend_processScopedDNSResolvers_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processScopedDNSResolvers:");
}

id objc_msgSend_processScopedProxyChanges_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processScopedProxyChanges:");
}

id objc_msgSend_processServiceSpecificDNSResolvers_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processServiceSpecificDNSResolvers:");
}

id objc_msgSend_processServiceSpecificProxyChanges_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processServiceSpecificProxyChanges:");
}

id objc_msgSend_processSupplementalDNSResolvers_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processSupplementalDNSResolvers:");
}

id objc_msgSend_processSupplementalProxyChanges_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processSupplementalProxyChanges:");
}

id objc_msgSend_publishToAgent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "publishToAgent:");
}

id objc_msgSend_qosMarkingAllowListAppIdentifiers_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "qosMarkingAllowListAppIdentifiers:");
}

id objc_msgSend_qosMarkingIsAppleAudioVideoCallsEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "qosMarkingIsAppleAudioVideoCallsEnabled:");
}

id objc_msgSend_qosMarkingIsEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "qosMarkingIsEnabled:");
}

id objc_msgSend_rangeOfString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rangeOfString:");
}

id objc_msgSend_registerAgent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerAgent:");
}

id objc_msgSend_registerNetworkAgent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerNetworkAgent:");
}

id objc_msgSend_removeAllPolicies(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeAllPolicies");
}

id objc_msgSend_removeNetworkAgentUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeNetworkAgentUUID:");
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObject:");
}

id objc_msgSend_removeObjectAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObjectAtIndex:");
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_removePolicyWithID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removePolicyWithID:");
}

id objc_msgSend_routeRuleWithAction_forInterfaceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "routeRuleWithAction:forInterfaceName:");
}

id objc_msgSend_routeRules_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "routeRules:");
}

id objc_msgSend_sanitizeEntity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sanitizeEntity:");
}

id objc_msgSend_sanitizeInterfaceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sanitizeInterfaceName:");
}

id objc_msgSend_scopedInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scopedInterface:");
}

id objc_msgSend_setActive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setActive:");
}

id objc_msgSend_setAgentMapping_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAgentMapping:");
}

id objc_msgSend_setControlPolicySession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setControlPolicySession:");
}

id objc_msgSend_setControllerQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setControllerQueue:");
}

id objc_msgSend_setFloatingDNSAgentList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFloatingDNSAgentList:");
}

id objc_msgSend_setFloatingProxyAgentList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFloatingProxyAgentList:");
}

id objc_msgSend_setFloatingProxyAgentList_TCPConverter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFloatingProxyAgentList_TCPConverter:");
}

id objc_msgSend_setInterfaces_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInterfaces:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setPolicy_forInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPolicy:forInterface:");
}

id objc_msgSend_setPolicyDB_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPolicyDB:");
}

id objc_msgSend_setPolicySession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPolicySession:");
}

id objc_msgSend_setPreferredPolicySession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPreferredPolicySession:");
}

id objc_msgSend_setPriority_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPriority:");
}

id objc_msgSend_setValue_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setValue:forKey:");
}

id objc_msgSend_sharedController(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedController");
}

id objc_msgSend_shouldUpdateAgent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldUpdateAgent");
}

id objc_msgSend_skipWithOrder_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "skipWithOrder:");
}

id objc_msgSend_spawnFloatingAgent_entity_agentSubType_addPolicyOfType_publishData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "spawnFloatingAgent:entity:agentSubType:addPolicyOfType:publishData:");
}

id objc_msgSend_spawnMappedFloatingAgent_entity_agentSubType_addPolicyOfType_updateData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "spawnMappedFloatingAgent:entity:agentSubType:addPolicyOfType:updateData:");
}

id objc_msgSend_stringWithCString_encoding_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringWithCString:encoding:");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringWithUTF8String:");
}

id objc_msgSend_substringFromIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "substringFromIndex:");
}

id objc_msgSend_substringToIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "substringToIndex:");
}

id objc_msgSend_unregisterAgent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unregisterAgent:");
}

id objc_msgSend_unregisterNetworkAgent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unregisterNetworkAgent");
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedIntegerValue");
}

id objc_msgSend_updateAgentData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateAgentData:");
}

id objc_msgSend_updateNetworkAgent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateNetworkAgent:");
}

id objc_msgSend_updatePolicy_forInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updatePolicy:forInterface:");
}

id objc_msgSend_valueForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "valueForKey:");
}
