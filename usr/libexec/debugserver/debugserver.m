uint64_t std::shared_ptr<RNBRemote>::~shared_ptr[abi:nn180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

uint64_t RNBRunLoopGetStartModeFromRemote(RNBRemote *a1)
{
  pthread_mutex_t *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  char *v12;
  BOOL v13;
  FILE *v15;
  const char *v16;
  size_t v17;
  const char *v18;
  uint64_t v19;
  int v20;

  if (!a1)
    return 6;
  v2 = (pthread_mutex_t *)((char *)a1 + 120);
  while (1)
  {
    if (DNBLogEnabledForAny(0x40000))
      _DNBLogThreaded("%s ctx.Events().WaitForSetEvents( 0x%08x) ...", "RNBRunLoopGetStartModeFromRemote", 160);
    v3 = PThreadEvent::WaitForSetEvents(v2, 0xA0u, 0);
    if (DNBLogEnabledForAny(0x40000))
      _DNBLogThreaded("%s ctx.Events().WaitForSetEvents( 0x%08x) => 0x%08x", "RNBRunLoopGetStartModeFromRemote", 160, v3);
    if ((v3 & 0x80) != 0)
    {
      if (g_isatty)
      {
        v15 = __stderrp;
        v16 = "error: packet read thread exited.\n";
        v17 = 34;
        goto LABEL_28;
      }
      v18 = "error: packet read thread exited.\n";
      goto LABEL_36;
    }
    if ((v3 & 0x20) == 0)
    {
      if (DNBLogEnabledForAny(0x10000))
        _DNBLogThreaded("%s Connection closed before getting \"A\" packet.", "RNBRunLoopGetStartModeFromRemote");
      return 6;
    }
    v20 = 0;
    v10 = RNBRemote::HandleReceivedPacket((uint64_t)a1, &v20);
    if ((v20 - 26) <= 2)
      break;
    if (v10)
    {
      if (v10 == 2)
      {
        if (!g_isatty)
        {
          v18 = "error: connection lost.\n";
          goto LABEL_36;
        }
        v15 = __stderrp;
        v16 = "error: connection lost.\n";
        v17 = 24;
LABEL_28:
        fwrite(v16, v17, 1uLL, v15);
        return 6;
      }
      v11 = DNBLogEnabledForAny(0x10000);
      v12 = "%s Error getting packet.";
      if (v11)
LABEL_3:
        _DNBLogThreaded(v12, "RNBRunLoopGetStartModeFromRemote");
    }
    else
    {
      if (v20 == 6)
        return 3;
      v13 = DNBLogEnabledForAny(0x10000);
      v12 = "#### %s";
      if (v13)
        goto LABEL_3;
    }
  }
  if (v10)
  {
    if (g_isatty)
    {
      v15 = __stderrp;
      v16 = "error: attach failed.\n";
      v17 = 22;
      goto LABEL_28;
    }
    v18 = "error: attach failed.\n";
LABEL_36:
    _DNBLog(0, (uint64_t)v18, v4, v5, v6, v7, v8, v9, v19);
    return 6;
  }
  if (g_isatty)
    fwrite("Attach succeeded, ready to debug.\n", 0x22uLL, 1uLL, __stdoutp);
  else
    _DNBLog(0, (uint64_t)"Attach succeeded, ready to debug.\n", v4, v5, v6, v7, v8, v9, v19);
  return 4;
}

uint64_t RNBRunLoopLaunchInferior(RNBRemote *a1, const char *a2, const char *a3, const char *a4, BOOL a5)
{
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  const char **v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  unint64_t v22;
  int v23;
  const char *v24;
  size_t v25;
  const char *v26;
  const char *v27;
  int v28;
  int v29;
  std::string *v30;
  const std::string::value_type *v31;
  int v32;
  unsigned int State;
  const char *v34;
  uint64_t v35;
  int v37;
  char v38[1024];
  char __dst[1024];

  if (DNBLogEnabledForAny(0x10000))
  {
    v10 = RNBContext::ArgumentAtIndex(a1, 0);
    _DNBLogThreaded("%s Launching '%s'...", "RNBRunLoopLaunchInferior", v10);
  }
  v12 = *((_QWORD *)a1 + 43);
  v11 = *((_QWORD *)a1 + 44);
  v13 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v12) >> 3);
  v14 = v13 + 1;
  if (v13 == -1)
  {
    v15 = 0;
    if (v11 == v12)
      goto LABEL_11;
  }
  else
  {
    if (v14 >> 61)
      goto LABEL_91;
    v15 = (const char **)operator new(8 * v14);
    bzero(v15, 0x5555555555555558 * ((v11 - v12) >> 3) + 8);
    if (v11 == v12)
      goto LABEL_11;
  }
  v16 = 0;
  if (v13 <= 1)
    v13 = 1;
  do
  {
    v15[v16] = RNBContext::ArgumentAtIndex(a1, v16);
    ++v16;
  }
  while (v13 != v16);
LABEL_11:
  v18 = *((_QWORD *)a1 + 46);
  v17 = *((_QWORD *)a1 + 47);
  v19 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v18) >> 3);
  v20 = v19 + 1;
  if (v19 == -1)
  {
    v21 = 0;
    if (v17 == v18)
      goto LABEL_19;
    goto LABEL_16;
  }
  if (v20 >> 61)
LABEL_91:
    abort();
  v21 = operator new(8 * v20);
  bzero(v21, 0x5555555555555558 * ((v17 - v18) >> 3) + 8);
  if (v17 == v18)
    goto LABEL_19;
LABEL_16:
  v22 = 0;
  if (v19 <= 1)
    v19 = 1;
  do
  {
    *((_QWORD *)v21 + v22) = RNBContext::EnvironmentAtIndex(a1, v22);
    ++v22;
  }
  while (v19 != v22);
LABEL_19:
  v23 = g_launch_flavor;
  v24 = *v15;
  if (!g_launch_flavor)
  {
    v25 = strlen(v24);
    if (v25 >= 4 && v24[v25 - 4] == 46 && v24[v25 - 3] == 97 && v24[v25 - 2] == 112 && v24[v25 - 1] == 112)
      v23 = 5;
    else
      v23 = 1;
  }
  *((_DWORD *)a1 + 76) = v23;
  if (!DNBResolveExecutablePath(v24, __dst, 0x400uLL))
    strlcpy(__dst, *v15, 0x400uLL);
  v38[0] = 0;
  v26 = (char *)a1 + 88;
  if ((*((char *)a1 + 111) & 0x80000000) == 0)
  {
    if (*((_BYTE *)a1 + 111))
      goto LABEL_41;
    goto LABEL_34;
  }
  if (!*((_QWORD *)a1 + 12) || (v26 = *(const char **)v26) == 0)
  {
LABEL_34:
    if (*((char *)a1 + 415) < 0)
    {
      if (*((_QWORD *)a1 + 50))
        v26 = (const char *)*((_QWORD *)a1 + 49);
      else
        v26 = 0;
    }
    else if (*((_BYTE *)a1 + 415))
    {
      v26 = (char *)a1 + 392;
    }
    else
    {
      v26 = 0;
    }
  }
LABEL_41:
  v27 = (char *)a1 + 416;
  if (*((char *)a1 + 439) < 0)
    v27 = *(const char **)v27;
  v28 = DNBProcessLaunch(a1, __dst, v15, (const char **)v21, v26, a2, a3, a4, a5, g_disable_aslr, v27, v38, 0x400uLL);
  v29 = v28;
  g_pid = v28;
  if (v28 || !v38[0])
  {
    if (!v28)
    {
      if (DNBLogEnabled())
        _DNBLogThreaded("%s DNBProcessLaunch() failed to launch process, unknown failure", "RNBRunLoopLaunchInferior");
      *((_QWORD *)a1 + 39) = 0xFFFFFFFFLL;
      v30 = (std::string *)((char *)a1 + 320);
      if (*((char *)a1 + 343) < 0)
      {
        **((_BYTE **)a1 + 40) = 0;
        *((_QWORD *)a1 + 41) = 0;
      }
      else
      {
        *((_BYTE *)a1 + 320) = 0;
        *((_BYTE *)a1 + 343) = 0;
      }
      v31 = "<unknown failure>";
      goto LABEL_62;
    }
    *((_QWORD *)a1 + 39) = 0;
    if ((*((char *)a1 + 343) & 0x80000000) == 0)
    {
LABEL_59:
      *((_BYTE *)a1 + 320) = 0;
      *((_BYTE *)a1 + 343) = 0;
      goto LABEL_63;
    }
  }
  else
  {
    if (DNBLogEnabled())
      _DNBLogThreaded("%s DNBProcessLaunch() returned error: '%s'", "RNBRunLoopLaunchInferior", v38);
    *((_QWORD *)a1 + 39) = 0xFFFFFFFFLL;
    if (*((char *)a1 + 343) < 0)
    {
      **((_BYTE **)a1 + 40) = 0;
      *((_QWORD *)a1 + 41) = 0;
      if (v38[0])
        goto LABEL_49;
    }
    else
    {
      *((_BYTE *)a1 + 320) = 0;
      *((_BYTE *)a1 + 343) = 0;
      if (v38[0])
      {
LABEL_49:
        v30 = (std::string *)((char *)a1 + 320);
        v31 = v38;
LABEL_62:
        std::string::assign(v30, v31);
        goto LABEL_63;
      }
    }
    if ((*((char *)a1 + 343) & 0x80000000) == 0)
      goto LABEL_59;
  }
  **((_BYTE **)a1 + 40) = 0;
  *((_QWORD *)a1 + 41) = 0;
LABEL_63:
  if (*((_DWORD *)a1 + 118) != -1
    && (PThreadEvent::WaitForSetEvents((pthread_mutex_t *)((char *)a1 + 120), 0x20u, 0) & 0x20) != 0)
  {
    v37 = 0;
    if (RNBRemote::HandleReceivedPacket((uint64_t)a1, &v37))
    {
      if (DNBLogEnabledForAny(0x10000))
        _DNBLogThreaded("%s Error getting packet.", "RNBRunLoopLaunchInferior");
LABEL_85:
      v35 = 6;
      if (v21)
LABEL_86:
        operator delete(v21);
      goto LABEL_87;
    }
    if (v37 != 54 && DNBLogEnabledForAny(0x10000))
      _DNBLogThreaded("%s Didn't get the expected qLaunchSuccess packet.", "RNBRunLoopLaunchInferior");
  }
  if (!v29)
    goto LABEL_85;
  while (1)
  {
    if (DNBLogEnabledForAny(0x200000))
      _DNBLogThreaded("%s DNBProcessWaitForEvent (%4.4x, eEventProcessRunningStateChanged | eEventProcessStoppedStateChanged, true, INFINITE)...", "RNBRunLoopLaunchInferior", v29);
    v32 = DNBProcessWaitForEvents(v29, 3u, 1, 0);
    if (DNBLogEnabledForAny(0x200000))
      _DNBLogThreaded("%s DNBProcessWaitForEvent (%4.4x, eEventProcessRunningStateChanged | eEventProcessStoppedStateChanged, true, INFINITE) => 0x%8.8x", "RNBRunLoopLaunchInferior", v29, v32);
    if (!v32)
    {
LABEL_81:
      g_pid = 0;
      goto LABEL_85;
    }
    if ((v32 & 3) != 0)
    {
      State = DNBProcessGetState(v29);
      if (DNBLogEnabledForAny(0x200000))
      {
        v34 = DNBStateAsString(State);
        _DNBLogThreaded("%s process %4.4x state changed (eEventProcessStateChanged): %s", "RNBRunLoopLaunchInferior", v29, v34);
      }
      if (State - 8 < 2)
        goto LABEL_81;
      if (State == 7 || State == 4)
        break;
    }
    DNBProcessResetEvents(v29, v32);
  }
  RNBContext::SetProcessID(a1, v29);
  v35 = 4;
  if (v21)
    goto LABEL_86;
LABEL_87:
  operator delete(v15);
  return v35;
}

uint64_t RNBRunLoopLaunchAttaching(RNBRemote *a1, int a2, int *a3)
{
  int v6;
  std::string::value_type __s[1024];

  if (DNBLogEnabledForAny(0x10000))
    _DNBLogThreaded("%s Attaching to pid %i...", "RNBRunLoopLaunchAttaching", a2);
  v6 = DNBProcessAttach(a2, 0, (uint64_t)a1 + 448, __s, 1024);
  *a3 = v6;
  g_pid = v6;
  if (*a3)
  {
    RNBContext::SetProcessID(a1, *a3);
    return 4;
  }
  *((_QWORD *)a1 + 39) = 0xFFFFFFFFLL;
  if (*((char *)a1 + 343) < 0)
  {
    **((_BYTE **)a1 + 40) = 0;
    *((_QWORD *)a1 + 41) = 0;
    if (!__s[0])
      return 6;
    goto LABEL_7;
  }
  *((_BYTE *)a1 + 320) = 0;
  *((_BYTE *)a1 + 343) = 0;
  if (__s[0])
LABEL_7:
    std::string::assign((std::string *)((char *)a1 + 320), __s);
  return 6;
}

void signal_handler(SysSignal *a1)
{
  char *v2;
  int v3;

  if (DNBLogEnabledForAny(0x10000))
  {
    v2 = SysSignal::Name(a1);
    _DNBLogThreaded("%s (%s)", "signal_handler", v2);
  }
  if ((_DWORD)a1 == 13)
  {
    g_sigpipe_received = 1;
  }
  else if ((_DWORD)a1 == 2)
  {
    v3 = g_sigint_received++;
    if (!g_pid || v3 || DNBProcessGetState(g_pid) - 5 > 1)
      exit(2);
    DNBProcessSignal(g_pid, 17);
  }
}

uint64_t HandleProcessStateChange(RNBRemote *a1, int a2)
{
  int v2;
  unsigned int State;
  const char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t StopCount;
  uint64_t v10;
  _BOOL4 v11;
  const char *v12;

  v2 = *((_DWORD *)a1 + 3);
  if (v2)
  {
    State = DNBProcessGetState(*((_DWORD *)a1 + 3));
    if (DNBLogEnabledForAny(0x10000))
    {
      v6 = DNBStateAsString(State);
      _DNBLogThreaded("%s (&remote, initialize=%i)  pid_state = %s", "HandleProcessStateChange", a2, v6);
    }
    result = 6;
    switch(State)
    {
      case 2u:
      case 3u:
      case 5u:
      case 6u:
        return 4;
      case 4u:
      case 7u:
      case 0xAu:
        g_sigint_received = 0;
        if ((a2 & 1) != 0)
          return 4;
        v8 = *((_QWORD *)a1 + 14);
        StopCount = DNBProcessGetStopCount(v2);
        if (*((_QWORD *)a1 + 14) == StopCount)
        {
          if (DNBLogEnabledForAny(0x10000))
          {
            DNBStateAsString(State);
            _DNBLogThreaded("%s (&remote, initialize=%i)  pid_state = %s pid_stop_count %llu (old %llu)) Notify??? skipping...");
            return 4;
          }
        }
        else
        {
          *((_QWORD *)a1 + 14) = StopCount;
          RNBRemote::FlushSTDIO((int *)a1);
          v10 = *((_QWORD *)a1 + 14);
          v11 = DNBLogEnabledForAny(0x10000);
          if (v10 == 1)
          {
            if (v11)
            {
              DNBStateAsString(State);
              _DNBLogThreaded("%s (&remote, initialize=%i)  pid_state = %s pid_stop_count %llu (old %llu)) Notify??? no, first stop...");
              return 4;
            }
          }
          else
          {
            if (v11)
            {
              v12 = DNBStateAsString(State);
              _DNBLogThreaded("%s (&remote, initialize=%i)  pid_state = %s pid_stop_count %llu (old %llu)) Notify??? YES!!!", "HandleProcessStateChange", 0, v12, *((_QWORD *)a1 + 14), v8);
            }
            RNBRemote::NotifyThatProcessStopped(a1);
          }
        }
        return 4;
      case 9u:
        RNBRemote::HandlePacket_last_signal(a1, 0);
        return 6;
      default:
        return result;
    }
  }
  if (DNBLogEnabledForAny(0x10000))
    _DNBLogThreaded("#### %s error: pid invalid, exiting...", "HandleProcessStateChange");
  return 6;
}

uint64_t RNBRunLoopInferiorExecuting(RNBRemote *a1)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  std::string *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  int v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  std::string __p;

  if (DNBLogEnabledForAny(0x10000))
    _DNBLogThreaded("#### %s", "RNBRunLoopInferiorExecuting");
  v2 = HandleProcessStateChange(a1, 1);
  while (*((_DWORD *)a1 + 3))
  {
    memset(&__p, 0, sizeof(__p));
    if (RNBContext::ProcessStateRunning(a1))
      v3 = 189;
    else
      v3 = 165;
    if (DNBLogEnabledForAny(0x200000))
      _DNBLogThreaded("%s ctx.Events().WaitForSetEvents(0x%08x) ...", "RNBRunLoopInferiorExecuting", v3);
    v4 = PThreadEvent::WaitForSetEvents((pthread_mutex_t *)((char *)a1 + 120), v3, 0);
    if (DNBLogEnabledForAny(0x200000))
    {
      v5 = RNBContext::EventsAsString((int)a1, v4, &__p);
      _DNBLogThreaded("%s ctx.Events().WaitForSetEvents(0x%08x) => 0x%08x (%s)", "RNBRunLoopInferiorExecuting", v3, v4, (const char *)v5);
    }
    if (!v4)
    {
      v6 = v2;
LABEL_24:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_51;
      goto LABEL_4;
    }
    if ((v4 & 0xC) != 0)
      RNBRemote::FlushSTDIO((int *)a1);
    if ((v4 & 0x10) != 0)
    {
      RNBRemote::SendAsyncProfileData((size_t)a1);
      if ((v4 & 0x20) == 0)
      {
LABEL_18:
        if ((v4 & 1) == 0)
          goto LABEL_19;
        goto LABEL_31;
      }
    }
    else if ((v4 & 0x20) == 0)
    {
      goto LABEL_18;
    }
    v4 ^= 0x20u;
    if (RNBContext::ProcessStateRunning(a1))
    {
      RNBRemote::HandleAsyncPacket((uint64_t)a1, 0);
      if ((v4 & 1) == 0)
        goto LABEL_19;
    }
    else
    {
      RNBRemote::HandleReceivedPacket((uint64_t)a1, 0);
      if ((v4 & 1) == 0)
      {
LABEL_19:
        v6 = v2;
        if ((v4 & 4) == 0)
          goto LABEL_20;
        goto LABEL_32;
      }
    }
LABEL_31:
    v7 = HandleProcessStateChange(a1, 0);
    PThreadEvent::ResetEvents((pthread_mutex_t *)((char *)a1 + 120), 1);
    v4 ^= 1u;
    v6 = v7;
    if ((v4 & 4) == 0)
    {
LABEL_20:
      if ((v4 & 0x80) != 0)
        goto LABEL_35;
      goto LABEL_21;
    }
LABEL_32:
    if (DNBLogEnabled())
      _DNBLog(0, (uint64_t)"debugserver's process monitoring thread has exited.", v8, v9, v10, v11, v12, v13, v37);
    v6 = 6;
    if ((v4 & 0x80) != 0)
    {
LABEL_35:
      if (DNBLogEnabled())
        _DNBLog(0, (uint64_t)"debugserver's packet communication to lldb has been shut down.", v14, v15, v16, v17, v18, v19, v37);
      v20 = *((unsigned int *)a1 + 3);
      if ((_DWORD)v20)
      {
        v21 = RNBContext::ProcessStateRunning(a1);
        v22 = *((unsigned __int8 *)a1 + 440);
        if (v21)
        {
          v23 = DNBLogEnabled();
          if (v22)
          {
            if (v23)
              _DNBLog(0, (uint64_t)"debugserver has a valid PID %d, it is still running. detaching from the inferior process.", v24, v25, v26, v27, v28, v29, v20);
            goto LABEL_45;
          }
          if (v23)
            _DNBLog(0, (uint64_t)"debugserver killing the inferior process, pid %d.", v24, v25, v26, v27, v28, v29, v20);
          DNBProcessKill(v20);
        }
        else if (*((_BYTE *)a1 + 440))
        {
          if (DNBLogEnabled())
            _DNBLog(0, (uint64_t)"debugserver has a valid PID %d but it may no longer be running, detaching from the inferior process.", v30, v31, v32, v33, v34, v35, v20);
LABEL_45:
          DNBProcessDetach(v20);
        }
      }
      v6 = 6;
      goto LABEL_50;
    }
LABEL_21:
    if (!v4)
      goto LABEL_24;
LABEL_50:
    PThreadEvent::ResetEvents((pthread_mutex_t *)((char *)a1 + 120), v4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_51:
      operator delete(__p.__r_.__value_.__l.__data_);
LABEL_4:
    v2 = 4;
    if ((_DWORD)v6 != 4)
      return v6;
  }
  return v2;
}

uint64_t RNBRunLoopPlatform(RNBRemote *a1)
{
  pthread_mutex_t *v2;
  int v3;
  std::string *v4;
  int v5;
  int v6;
  std::string __p;

  v2 = (pthread_mutex_t *)((char *)a1 + 120);
  do
  {
    memset(&__p, 0, sizeof(__p));
    if (DNBLogEnabledForAny(0x200000))
      _DNBLogThreaded("%s ctx.Events().WaitForSetEvents(0x%08x) ...", "RNBRunLoopPlatform", 160);
    v3 = PThreadEvent::WaitForSetEvents(v2, 0xA0u, 0);
    if (DNBLogEnabledForAny(0x200000))
    {
      v4 = RNBContext::EventsAsString((int)a1, v3, &__p);
      _DNBLogThreaded("%s ctx.Events().WaitForSetEvents(0x%08x) => 0x%08x (%s)", "RNBRunLoopPlatform", 160, v3, (const char *)v4);
    }
    if (!v3)
    {
      v6 = 5;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        continue;
LABEL_19:
      operator delete(__p.__r_.__value_.__l.__data_);
      continue;
    }
    if ((v3 & 0x20) != 0)
    {
      if (RNBRemote::HandleReceivedPacket((uint64_t)a1, 0) == 2)
        v5 = 6;
      else
        v5 = 5;
    }
    else
    {
      v5 = 5;
    }
    if ((v3 & 0x80) != 0)
      v6 = 6;
    else
      v6 = v5;
    PThreadEvent::ResetEvents(v2, v3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_19;
  }
  while (v6 == 5);
  return 6;
}

void ASLLogCallback(void *a1, char a2, const char *format, va_list ap)
{
  __asl_object_s *v7;
  int v8;
  int v9;
  char __str[1024];

  if (format)
  {
    v7 = (__asl_object_s *)ASLLogCallback(void *,unsigned int,char const*,char *)::g_aslmsg;
    if (!ASLLogCallback(void *,unsigned int,char const*,char *)::g_aslmsg)
    {
      ASLLogCallback(void *,unsigned int,char const*,char *)::g_aslmsg = (uint64_t)asl_new(0);
      snprintf(__str, 0x400uLL, "com.apple.%s-%s", "debugserver", "@(#)PROGRAM:LLDB  PROJECT:lldb-1600.2.8.8\n");
      asl_set((asl_object_t)ASLLogCallback(void *,unsigned int,char const*,char *)::g_aslmsg, "Sender", __str);
      v7 = (__asl_object_s *)ASLLogCallback(void *,unsigned int,char const*,char *)::g_aslmsg;
    }
    if ((a2 & 2) != 0)
      v8 = 3;
    else
      v8 = 4;
    if ((a2 & 1) != 0)
      v9 = 2;
    else
      v9 = v8;
    asl_vlog(0, v7, v9, format, ap);
  }
}

FILE *FileLogCallback(FILE *result, unsigned int a2, const char *a3, va_list a4)
{
  FILE *v4;

  if (result)
  {
    if (a3)
    {
      v4 = result;
      vfprintf(result, a3, a4);
      fputc(10, v4);
      return (FILE *)fflush(v4);
    }
  }
  return result;
}

void show_usage_and_exit(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  if (g_isatty)
  {
    fprintf(__stderrp, "Usage:\n  %s host:port [program-name program-arg1 program-arg2 ...]\n", "debugserver");
    if (g_isatty)
    {
LABEL_3:
      fprintf(__stderrp, "  %s /path/file [program-name program-arg1 program-arg2 ...]\n", "debugserver");
      if (g_isatty)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    _DNBLog(0, (uint64_t)"Usage:\n  %s host:port [program-name program-arg1 program-arg2 ...]\n", a3, a4, a5, a6, a7, a8, (uint64_t)"debugserver");
    if (g_isatty)
      goto LABEL_3;
  }
  _DNBLog(0, (uint64_t)"  %s /path/file [program-name program-arg1 program-arg2 ...]\n", v9, v10, v11, v12, v13, v14, (uint64_t)"debugserver");
  if (g_isatty)
  {
LABEL_4:
    fprintf(__stderrp, "  %s host:port --attach=<pid>\n", "debugserver");
    if (g_isatty)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  _DNBLog(0, (uint64_t)"  %s host:port --attach=<pid>\n", v15, v16, v17, v18, v19, v20, (uint64_t)"debugserver");
  if (g_isatty)
  {
LABEL_5:
    fprintf(__stderrp, "  %s /path/file --attach=<pid>\n", "debugserver");
    if (g_isatty)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  _DNBLog(0, (uint64_t)"  %s /path/file --attach=<pid>\n", v21, v22, v23, v24, v25, v26, (uint64_t)"debugserver");
  if (g_isatty)
  {
LABEL_6:
    fprintf(__stderrp, "  %s host:port --attach=<process_name>\n", "debugserver");
    if (g_isatty)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  _DNBLog(0, (uint64_t)"  %s host:port --attach=<process_name>\n", v27, v28, v29, v30, v31, v32, (uint64_t)"debugserver");
  if (g_isatty)
  {
LABEL_7:
    fprintf(__stderrp, "  %s /path/file --attach=<process_name>\n", "debugserver");
    exit(a1);
  }
LABEL_13:
  _DNBLog(0, (uint64_t)"  %s /path/file --attach=<process_name>\n", v33, v34, v35, v36, v37, v38, (uint64_t)"debugserver");
  exit(a1);
}

int main(int argc, const char **argv, const char **envp)
{
  _opaque_pthread_t *v5;
  _opaque_pthread_t *v6;
  uint64_t v7;
  OsLogger *v8;
  void *LogFunction;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  int v29;
  int *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  FILE *v36;
  const char *v37;
  size_t v38;
  int v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int StartModeFromRemote;
  char *v45;
  std::string *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  std::string *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  FILE *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  FILE *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int *v91;
  char *v92;
  char *v93;
  int *v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  const char *v116;
  uint64_t v117;
  const char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  const char **v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t i;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _BOOL4 v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  const char *v149;
  void **v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  const char *v158;
  size_t v159;
  std::string::size_type v160;
  std::string *v161;
  uint64_t v162;
  uint64_t v163;
  std::string::size_type v164;
  std::string::size_type v165;
  std::string::size_type v166;
  std::string *v167;
  std::string::size_type v168;
  std::string *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  std::string *v183;
  uint64_t v184;
  uint64_t v185;
  std::string::size_type v186;
  std::string *v187;
  std::string::size_type v188;
  std::string::size_type v189;
  std::string *v190;
  uint64_t v191;
  uint64_t v192;
  std::string *v193;
  const char *v194;
  std::string::size_type v195;
  std::string *v196;
  std::string::size_type v197;
  std::string::value_type *v198;
  std::string::size_type v199;
  std::string::size_type v200;
  std::string::size_type v201;
  std::string *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  std::string *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char ***v229;
  const char *v230;
  const char **v231;
  const char *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  int v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  FILE *v246;
  const char *v247;
  size_t v248;
  const char *v249;
  int v250;
  const char *v251;
  int v252;
  const char *v253;
  uint64_t v254;
  timespec *v255;
  std::string *v256;
  void **v257;
  void **v258;
  int v259;
  const char *v260;
  size_t v261;
  const char *v262;
  void *v263;
  char *v264;
  int v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  std::string *v272;
  void **v273;
  void **v274;
  int v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  const char *v285;
  std::string *v286;
  void **v287;
  void **v288;
  std::string::size_type v289;
  std::string *v290;
  char *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  void *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  std::string *p_p;
  std::string *v313;
  size_t size;
  int v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  std::string *v322;
  void **v323;
  void **v324;
  std::string *v325;
  std::string *v326;
  std::string *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  std::string *v348;
  _BOOL4 IsTranslated;
  const char *v350;
  void *v351;
  const char *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  void *v389;
  void *v390;
  void *v391;
  int v392;
  char v393;
  char v394;
  int v395;
  const char *v396;
  std::string *v397;
  useconds_t v398;
  unint64_t v399;
  unsigned int v400;
  int v401;
  FILE *v402;
  FILE *v403;
  int v404;
  std::string v405;
  char *__endptr;
  std::string __p;
  int v408;
  std::string v409;
  void *v410[2];
  uint64_t v411;
  void *v412[2];
  uint64_t v413;
  char *v414;
  uint64_t v415;
  uint64_t v416;
  char *v417;
  uint64_t v418;
  uint64_t v419;
  std::string v420;
  void *v421;
  uint64_t v422;
  uint64_t v423;
  void *v424[2];
  uint64_t v425;
  int v426;
  sigset_t v427;
  int v428;
  sched_param v429;
  std::string __dst[42];
  size_t v431[128];
  char v432[512];

  unsetenv("DYLD_INSERT_LIBRARIES");
  v396 = *argv;
  pthread_setname_np("main thread");
  v428 = 0;
  v5 = pthread_self();
  if (!pthread_getschedparam(v5, &v428, &v429))
  {
    v429.sched_priority = 47;
    v6 = pthread_self();
    pthread_setschedparam(v6, v428, &v429);
  }
  v7 = getpid();
  proc_set_wakemon_params(v7, 500, 0);
  g_isatty = isatty(0);
  signal(13, (void (__cdecl *)(int))signal_handler);
  signal(1, (void (__cdecl *)(int))signal_handler);
  v427 = 0x80000;
  v8 = (OsLogger *)sigprocmask(1, &v427, 0);
  LogFunction = (void *)OsLogger::GetLogFunction(v8);
  if (LogFunction)
  {
    DNBLogSetLogCallback(LogFunction, 0);
    if (!DNBLogEnabled())
      goto LABEL_9;
    v16 = "debugserver will use os_log for internal logging.";
  }
  else
  {
    DNBLogSetLogCallback(ASLLogCallback, 0);
    if (!DNBLogEnabled())
      goto LABEL_9;
    v16 = "debugserver will use ASL for internal logging.";
  }
  _DNBLog(0, (uint64_t)v16, v10, v11, v12, v13, v14, v15, (uint64_t)v389);
LABEL_9:
  DNBLogSetLogMask(0);
  LODWORD(__dst[0].__r_.__value_.__l.__data_) = 0;
  v431[0] = 4;
  v17 = sysctlbyname("security.mac.amfi.developer_mode_status", __dst, v431, 0, 0);
  if (v17 | LODWORD(__dst[0].__r_.__value_.__l.__data_))
  {
    v24 = operator new(0x338uLL);
    v24[2] = 0;
    *v24 = off_100060C20;
    v24[1] = 0;
    v25 = (uint64_t)(v24 + 3);
    RNBRemote::RNBRemote((RNBRemote *)(v24 + 3));
    v26 = (std::__shared_weak_count *)qword_1000716A0;
    g_remoteSP = (uint64_t)(v24 + 3);
    qword_1000716A0 = (uint64_t)v24;
    if (!v26)
      goto LABEL_16;
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
    v25 = g_remoteSP;
    if (g_remoteSP)
    {
LABEL_16:
      v426 = 0;
      v424[0] = 0;
      v424[1] = 0;
      v425 = 0;
      v421 = 0;
      v422 = 0;
      v423 = 0;
      memset(&v420, 0, sizeof(v420));
      v417 = 0;
      v418 = 0;
      v419 = 0;
      v414 = 0;
      v415 = 0;
      v416 = 0;
      v412[0] = 0;
      v412[1] = 0;
      v413 = 0;
      v410[0] = 0;
      v410[1] = 0;
      v411 = 0;
      *(_WORD *)v432 = 29803;
      if (g_long_options)
      {
        v29 = 2;
        v30 = &dword_100068118;
        while (1)
        {
          v33 = *v30;
          if (v33 <= 0x7F)
          {
            if ((_DefaultRuneLocale.__runetype[v33] & 0x100) == 0)
              goto LABEL_20;
          }
          else if (!__maskrune(v33, 0x100uLL))
          {
            goto LABEL_20;
          }
          v34 = v29 + 1;
          v432[v29] = *v30;
          v35 = *(v30 - 4);
          if (v35 == 1)
          {
            v31 = 2;
          }
          else
          {
            if (v35 != 2)
            {
              ++v29;
              goto LABEL_20;
            }
            v432[v34] = 58;
            v34 = v29 + 2;
            v31 = 3;
          }
          v29 += v31;
          v432[v34] = 58;
LABEL_20:
          v32 = *((_QWORD *)v30 + 1);
          v30 += 8;
          if (!v32)
            goto LABEL_35;
        }
      }
      v29 = 2;
LABEL_35:
      v432[v29] = 0;
      optreset = 1;
      optind = 1;
      v41 = getopt_long_only(argc, (char *const *)argv, v432, (const option *)&g_long_options, &v426);
      if ((_DWORD)v41 != -1)
      {
        v42 = v41;
        v43 = 0;
        v394 = 0;
        v404 = 0;
        v393 = 0;
        v400 = 0;
        v401 = 0;
        v402 = 0;
        v398 = 1000;
        v399 = 0;
        StartModeFromRemote = 6;
        while (2)
        {
          if (DNBLogEnabled())
            _DNBLogDebug((uint64_t)"option: ch == %c (0x%2.2x) --%s%c%s\n", v47, v48, v49, v50, v51, v52, v53, v42);
          switch((int)v42)
          {
            case '2':
              communication_fd = atoi(optarg);
              goto LABEL_40;
            case 'A':
              v45 = optarg;
              if (!optarg || !*optarg)
                goto LABEL_40;
              v46 = (std::string *)&v417;
              goto LABEL_39;
            case 'D':
              g_disable_aslr = 1;
              goto LABEL_40;
            case 'E':
              goto LABEL_38;
            case 'F':
              v43 = 1;
              goto LABEL_40;
            case 'I':
              v45 = optarg;
              v46 = (std::string *)(v25 + 16);
              goto LABEL_39;
            case 'K':
              g_detach_on_error = 0;
              goto LABEL_40;
            case 'O':
              v45 = optarg;
              v46 = (std::string *)(v25 + 40);
              goto LABEL_39;
            case 'P':
              v45 = optarg;
              v46 = (std::string *)v410;
              goto LABEL_39;
            case 'R':
              v404 = 1;
              goto LABEL_40;
            case 'S':
              setsid();
              goto LABEL_40;
            case 'U':
              RNBContext::AddDefaultIgnoredExceptions((RNBContext *)v25);
              goto LABEL_40;
            case 'V':
              IsTranslated = DNBDebugserverIsTranslated();
              v350 = " (running under translation)";
              if (!IsTranslated)
                v350 = (const char *)&unk_1000528BD;
              printf("%s-%s for %s%s.\n", "debugserver", "@(#)PROGRAM:LLDB  PROJECT:lldb-1600.2.8.8\n", "arm64", v350);
              exit(0);
            case 'W':
              v45 = optarg;
              if (!optarg || !*optarg)
                goto LABEL_40;
              v46 = (std::string *)&v414;
              goto LABEL_39;
            case 'X':
              v394 = 1;
              goto LABEL_40;
            case 'a':
              if (!optarg)
                goto LABEL_40;
              v56 = *optarg;
              if (!*optarg)
                goto LABEL_40;
              if ((v56 & 0x80) == 0 && (_DefaultRuneLocale.__runetype[v56] & 0x400) != 0)
              {
                v431[0] = 0;
                v399 = strtoul(optarg, (char **)v431, 0);
                if (!v431[0] || *(_BYTE *)v431[0])
                {
                  if (!g_isatty)
                  {
                    _DNBLog(0, (uint64_t)"error: invalid pid option '%s'\n", v85, v86, v87, v88, v89, v90, (uint64_t)optarg);
                    exit(4);
                  }
                  fprintf(__stderrp, "error: invalid pid option '%s'\n", optarg);
                  exit(4);
                }
                StartModeFromRemote = 2;
              }
              else
              {
                v55 = &v420;
                v54 = optarg;
LABEL_57:
                std::string::assign(v55, v54);
                StartModeFromRemote = 2;
              }
              goto LABEL_40;
            case 'd':
              if (optarg)
              {
                if (*optarg)
                {
                  v431[0] = 0;
                  v400 = strtoul(optarg, (char **)v431, 0);
                  if (!v431[0] || *(_BYTE *)v431[0])
                  {
                    if (!g_isatty)
                    {
                      _DNBLog(0, (uint64_t)"error: invalid waitfor-duration option value '%s'.\n", v57, v58, v59, v60, v61, v62, (uint64_t)optarg);
                      exit(7);
                    }
                    fprintf(__stderrp, "error: invalid waitfor-duration option value '%s'.\n", optarg);
                    exit(7);
                  }
                }
              }
              goto LABEL_40;
            case 'e':
              RNBContext::PushEnvironment((RNBContext *)v25, optarg);
              goto LABEL_40;
            case 'f':
              if (optarg && *optarg)
                v401 = strtoul(optarg, 0, 0);
              goto LABEL_40;
            case 'g':
              DNBLogSetDebug(1);
              goto LABEL_40;
            case 'i':
              if (optarg)
              {
                if (*optarg)
                {
                  v431[0] = 0;
                  v398 = strtoul(optarg, (char **)v431, 0);
                  if (!v431[0] || *(_BYTE *)v431[0])
                  {
                    if (!g_isatty)
                    {
                      _DNBLog(0, (uint64_t)"error: invalid waitfor-interval option value '%s'.\n", v78, v79, v80, v81, v82, v83, (uint64_t)optarg);
                      exit(6);
                    }
                    fprintf(__stderrp, "error: invalid waitfor-interval option value '%s'.\n", optarg);
                    exit(6);
                  }
                }
              }
              goto LABEL_40;
            case 'k':
              g_lockdown_opt = 1;
              goto LABEL_40;
            case 'l':
              v63 = optarg;
              if (!optarg || !*optarg)
                goto LABEL_40;
              if (!strcasecmp(optarg, "stdout"))
              {
                v84 = __stdoutp;
                if (__stdoutp)
                  goto LABEL_108;
              }
              else if (!strcasecmp(v63, "stderr"))
              {
                v84 = __stderrp;
                if (__stderrp)
                {
LABEL_108:
                  v402 = v84;
                  goto LABEL_40;
                }
              }
              else
              {
                v64 = fopen(v63, "w");
                if (v64)
                {
                  v402 = v64;
                  setlinebuf(v64);
                  goto LABEL_40;
                }
              }
              v392 = v43;
              v91 = __error();
              v92 = strerror(*v91);
              if (g_isatty)
              {
                v403 = __stderrp;
                v93 = optarg;
                v94 = __error();
                v95 = "unknown error";
                if (v92)
                  v95 = v92;
                fprintf(v403, "Failed to open log file '%s' for writing: errno = %i (%s)", v93, *v94, v95);
              }
              else
              {
                v102 = optarg;
                __error();
                _DNBLog(0, (uint64_t)"Failed to open log file '%s' for writing: errno = %i (%s)", v103, v104, v105, v106, v107, v108, (uint64_t)v102);
              }
              v402 = 0;
              v43 = v392;
LABEL_40:
              v42 = getopt_long_only(argc, (char *const *)argv, v432, (const option *)&g_long_options, &v426);
              if ((_DWORD)v42 != -1)
                continue;
              goto LABEL_128;
            case 'n':
              v393 = 1;
              goto LABEL_40;
            case 'p':
              StartModeFromRemote = 5;
              goto LABEL_40;
            case 's':
              std::string::assign((std::string *)(v25 + 16), optarg);
              std::string::assign((std::string *)(v25 + 40), optarg);
LABEL_38:
              v45 = optarg;
              v46 = (std::string *)(v25 + 64);
              goto LABEL_39;
            case 't':
              g_applist_opt = 1;
              goto LABEL_40;
            case 'u':
              v45 = optarg;
              v46 = (std::string *)v412;
LABEL_39:
              std::string::assign(v46, v45);
              goto LABEL_40;
            case 'v':
              DNBLogSetVerbose(1);
              goto LABEL_40;
            case 'w':
              v54 = optarg;
              if (!optarg || !*optarg)
                goto LABEL_40;
              v55 = (std::string *)&v421;
              goto LABEL_57;
            case 'x':
              v65 = optarg;
              if (optarg && *optarg)
              {
                if (!strcasecmp(optarg, "auto"))
                {
                  g_launch_flavor = 0;
                }
                else if (strcasestr(v65, "posix") == optarg)
                {
                  if (DNBLogEnabled())
                    _DNBLog(0, (uint64_t)"[LaunchAttach] launch flavor is posix_spawn via cmdline option", v96, v97, v98, v99, v100, v101, (uint64_t)v389);
                  g_launch_flavor = 1;
                }
                else if (strcasestr(optarg, "fork") == optarg)
                {
                  g_launch_flavor = 2;
                }
                else if (strcasestr(optarg, "backboard") == optarg)
                {
                  if (DNBLogEnabled())
                    _DNBLog(0, (uint64_t)"[LaunchAttach] launch flavor is BKS via cmdline option", v109, v110, v111, v112, v113, v114, (uint64_t)v389);
                  g_launch_flavor = 4;
                }
                else
                {
                  if (strcasestr(optarg, "frontboard") != optarg)
                  {
                    if (g_isatty)
                      fprintf(__stderrp, "error: invalid TYPE for the --launch=TYPE (-x TYPE) option: '%s'\n", optarg);
                    else
                      _DNBLog(0, (uint64_t)"error: invalid TYPE for the --launch=TYPE (-x TYPE) option: '%s'\n", v66, v67, v68, v69, v70, v71, (uint64_t)optarg);
                    if (g_isatty)
                      fwrite("Valid values TYPE are:\n", 0x17uLL, 1uLL, __stderrp);
                    else
                      _DNBLog(0, (uint64_t)"Valid values TYPE are:\n", v353, v354, v355, v356, v357, v358, (uint64_t)v391);
                    if (g_isatty)
                      fwrite("  auto       Auto-detect the best launch method to use.\n", 0x38uLL, 1uLL, __stderrp);
                    else
                      _DNBLog(0, (uint64_t)"  auto       Auto-detect the best launch method to use.\n", v359, v360, v361, v362, v363, v364, (uint64_t)v391);
                    if (g_isatty)
                      fwrite("  posix      Launch the executable using posix_spawn.\n", 0x36uLL, 1uLL, __stderrp);
                    else
                      _DNBLog(0, (uint64_t)"  posix      Launch the executable using posix_spawn.\n", v365, v366, v367, v368, v369, v370, (uint64_t)v391);
                    if (g_isatty)
                      fwrite("  fork       Launch the executable using fork and exec.\n", 0x38uLL, 1uLL, __stderrp);
                    else
                      _DNBLog(0, (uint64_t)"  fork       Launch the executable using fork and exec.\n", v371, v372, v373, v374, v375, v376, (uint64_t)v391);
                    if (g_isatty)
                      fwrite("  backboard  Launch the executable through BackBoard Services.\n", 0x3FuLL, 1uLL, __stderrp);
                    else
                      _DNBLog(0, (uint64_t)"  backboard  Launch the executable through BackBoard Services.\n", v377, v378, v379, v380, v381, v382, (uint64_t)v391);
                    if (!g_isatty)
                    {
                      _DNBLog(0, (uint64_t)"  frontboard  Launch the executable through FrontBoard Services.\n", v383, v384, v385, v386, v387, v388, (uint64_t)v391);
                      exit(5);
                    }
                    fwrite("  frontboard  Launch the executable through FrontBoard Services.\n", 0x41uLL, 1uLL, __stderrp);
                    exit(5);
                  }
                  if (DNBLogEnabled())
                    _DNBLog(0, (uint64_t)"[LaunchAttach] launch flavor is FBS via cmdline option", v72, v73, v74, v75, v76, v77, (uint64_t)v389);
                  g_launch_flavor = 5;
                }
              }
              goto LABEL_40;
            default:
              goto LABEL_40;
          }
        }
      }
      v399 = 0;
      v400 = 0;
      v401 = 0;
      v402 = 0;
      v393 = 0;
      v404 = 0;
      v394 = 0;
      v43 = 0;
      StartModeFromRemote = 6;
      v398 = 1000;
LABEL_128:
      if (SHIBYTE(v419) < 0)
      {
        v115 = (uint64_t)v402;
        if (!v418)
          goto LABEL_134;
        v116 = v417;
      }
      else
      {
        v115 = (uint64_t)v402;
        if (!HIBYTE(v419))
          goto LABEL_134;
        v116 = (const char *)&v417;
      }
      DNBSetArchitecture(v116);
LABEL_134:
      v117 = optind;
      if (SHIBYTE(v416) < 0)
      {
        if (!v415)
          goto LABEL_140;
        v118 = v414;
      }
      else
      {
        if (!HIBYTE(v416))
          goto LABEL_140;
        v118 = (const char *)&v414;
      }
      if (!RNBContext::SetWorkingDirectory((RNBContext *)v25, v118))
      {
        if (!g_isatty)
        {
          v351 = &v414;
          if (v416 < 0)
            v351 = v414;
          _DNBLog(0, (uint64_t)"error: working directory doesn't exist '%s'.\n", v119, v120, v121, v122, v123, v124, (uint64_t)v351);
          exit(8);
        }
        v352 = (const char *)&v414;
        if (v416 < 0)
          v352 = v414;
        fprintf(__stderrp, "error: working directory doesn't exist '%s'.\n", v352);
        exit(8);
      }
LABEL_140:
      v125 = &argv[v117];
      *(_BYTE *)(v25 + 440) = g_detach_on_error;
      RNBRemote::Initialize((RNBRemote *)v25);
      if (v115)
      {
        if (DNBLogEnabled())
          _DNBLog(0, (uint64_t)"debugserver is switching to logging to a file.", v126, v127, v128, v129, v130, v131, (uint64_t)v389);
        DNBLogSetLogCallback(FileLogCallback, v115);
        if (v401)
          v132 = v401;
        else
          v132 = -1;
      }
      else
      {
        v132 = v401;
      }
      v133 = (argc - v117);
      DNBLogSetLogMask(v132);
      if (DNBLogEnabled() && (int)v133 >= 1)
      {
        for (i = 0; i != v133; ++i)
        {
          if (DNBLogEnabled())
            _DNBLogDebug((uint64_t)"argv[%i] = %s", v135, v136, v137, v138, v139, v140, v141, i);
        }
      }
      v142 = DNBDebugserverIsTranslated();
      v149 = " (running under translation)";
      if (!v142)
        v149 = (const char *)&unk_1000528BD;
      if (g_isatty)
      {
        v150 = v424;
        if (v425 < 0)
          v150 = (void **)v424[0];
        fprintf(__stdoutp, "%s-%s %sfor %s%s.\n", "debugserver", "@(#)PROGRAM:LLDB  PROJECT:lldb-1600.2.8.8\n", (const char *)v150, "arm64", v149);
      }
      else
      {
        _DNBLog(0, (uint64_t)"%s-%s %sfor %s%s.\n", v143, v144, v145, v146, v147, v148, (uint64_t)"debugserver");
      }
      memset(&v409, 0, sizeof(v409));
      v408 = 0x7FFFFFFF;
      LOBYTE(v431[0]) = 0;
      if (g_lockdown_opt || g_applist_opt || communication_fd != -1)
        goto LABEL_252;
      if ((int)v133 <= 0)
        show_usage_and_exit(1, v151, v152, v153, v154, v155, v156, v157);
      v158 = *v125;
      v159 = strlen(*v125);
      if (v159 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_533;
      v160 = v159;
      if (v159 >= 0x17)
      {
        v162 = (v159 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v159 | 7) != 0x17)
          v162 = v159 | 7;
        v163 = v162 + 1;
        v161 = (std::string *)operator new(v162 + 1);
        __dst[0].__r_.__value_.__l.__size_ = v160;
        __dst[0].__r_.__value_.__r.__words[2] = v163 | 0x8000000000000000;
        __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v161;
      }
      else
      {
        *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) = v159;
        v161 = __dst;
        if (!v159)
        {
LABEL_174:
          v161->__r_.__value_.__s.__data_[v160] = 0;
          v164 = std::string::rfind(__dst, 58, 0xFFFFFFFFFFFFFFFFLL);
          if (v164 == -1)
          {
            if (sscanf(*v125, "%i", &v408) == 1)
            {
              std::string::assign(&v409, "127.0.0.1");
              if (DNBLogEnabled())
              {
                if ((v409.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v183 = &v409;
                else
                  v183 = (std::string *)v409.__r_.__value_.__r.__words[0];
                _DNBLogDebug((uint64_t)"host = '%s'  port = %i", v176, v177, v178, v179, v180, v181, v182, (uint64_t)v183);
              }
LABEL_251:
              LODWORD(v133) = v133 - 1;
              ++v125;
              if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(__dst[0].__r_.__value_.__l.__data_);
                if (StartModeFromRemote == 2)
                  goto LABEL_268;
LABEL_253:
                if (StartModeFromRemote == 5)
                  goto LABEL_268;
                if ((_DWORD)v133 && !g_lockdown_opt)
                {
                  if ((int)v133 >= 1)
                  {
                    v213 = 0;
                    do
                    {
                      if (DNBLogEnabled())
                        _DNBLogDebug((uint64_t)"inferior_argv[%i] = '%s'", v214, v215, v216, v217, v218, v219, v220, v213);
                      RNBContext::PushArgument((RNBContext *)v25, v125[v213++]);
                    }
                    while (v133 != v213);
                  }
                  StartModeFromRemote = 3;
                  goto LABEL_271;
                }
                if (g_lockdown_opt)
                {
                  v221 = open("/dev/null", 2);
                  dup2(v221, 1);
                  dup2(v221, 2);
LABEL_265:
                  if (DNBLogEnabled())
                    _DNBLogDebug((uint64_t)"Get args from remote protocol...", v222, v223, v224, v225, v226, v227, v228, (uint64_t)v390);
                  StartModeFromRemote = 1;
LABEL_268:
                  if (((StartModeFromRemote != 3) & ~v43) != 0)
                  {
LABEL_274:
                    bzero(__dst, 0x400uLL);
                    v397 = (std::string *)(v25 + 312);
                    v395 = v394 & 1;
                    while (1)
                    {
                      v239 = StartModeFromRemote - 1;
                      StartModeFromRemote = 6;
                      switch(v239)
                      {
                        case 0:
                          if (g_lockdown_opt)
                          {
                            if (*(_DWORD *)(v25 + 472) != -1)
                              goto LABEL_476;
                            if (RNBSocket::ConnectToService((RNBSocket *)(v25 + 472), v395))
                            {
                              if (g_isatty)
                              {
                                v246 = __stderrp;
                                v247 = "Failed to get connection from a remote gdb process.\n";
                                v248 = 52;
                                goto LABEL_482;
                              }
                              _DNBLog(0, (uint64_t)"Failed to get connection from a remote gdb process.\n", v240, v241, v242, v243, v244, v245, (uint64_t)v390);
                            }
                            else
                            {
                              if (!g_applist_opt)
                                goto LABEL_475;
                              if (DNBLogEnabled())
                                _DNBLog(0, (uint64_t)"debugserver running in applist mode under lockdown", v299, v300, v301, v302, v303, v304, (uint64_t)v390);
                              memset(&__p, 0, sizeof(__p));
                              if (!ListApplications(&__p, 0, 0))
                              {
                                if (DNBLogEnabled())
                                {
                                  p_p = &__p;
                                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                                  _DNBLogDebug((uint64_t)"Task list: %s", v305, v306, v307, v308, v309, v310, v311, (uint64_t)p_p);
                                }
                                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                  v313 = &__p;
                                else
                                  v313 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                else
                                  size = __p.__r_.__value_.__l.__size_;
                                RNBSocket::Write((RNBSocket *)(v25 + 472), v313, size);
                                memset(&v405, 0, sizeof(v405));
                                RNBSocket::Read((int *)(v25 + 472), (uint64_t)&v405);
                                if (SHIBYTE(v405.__r_.__value_.__r.__words[2]) < 0)
                                  operator delete(v405.__r_.__value_.__l.__data_);
                              }
                              RNBSocket::Disconnect((RNBSocket *)(v25 + 472));
                              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(__p.__r_.__value_.__l.__data_);
                            }
                          }
                          else
                          {
                            v233 = v408;
                            if (v408 == 0x7FFFFFFF)
                            {
                              if (LOBYTE(v431[0]) == 47)
                              {
                                if (!RNBSocket::OpenFile((RNBSocket *)(v25 + 472), (const char *)v431))
                                  goto LABEL_476;
                              }
                              else
                              {
                                if (communication_fd < 0)
                                  goto LABEL_476;
                                if (!RNBSocket::useFD((RNBSocket *)(v25 + 472), communication_fd))
                                {
LABEL_475:
                                  RNBRemote::StartReadRemoteDataThread((RNBRemote *)v25);
                                  goto LABEL_476;
                                }
                              }
                            }
                            else
                            {
                              if ((v409.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                v272 = &v409;
                              else
                                v272 = (std::string *)v409.__r_.__value_.__r.__words[0];
                              if (v411 >= 0)
                                v273 = v410;
                              else
                                v273 = (void **)v410[0];
                              if (v413 >= 0)
                                v274 = v412;
                              else
                                v274 = (void **)v412[0];
                              if (ConnectRemote((RNBRemote *)v25, (char *)v272, v408, v404 & 1, (const char *)v273, (const char *)v274, v237, v238))
                              {
LABEL_476:
                                if (g_isatty)
                                  fwrite("Got a connection, waiting for process information for launching or attaching.\n", 0x4EuLL, 1uLL, __stdoutp);
                                else
                                  _DNBLog(0, (uint64_t)"Got a connection, waiting for process information for launching or attaching.\n", v233, v234, v235, v236, v237, v238, (uint64_t)v390);
                                StartModeFromRemote = RNBRunLoopGetStartModeFromRemote((RNBRemote *)v25);
                              }
                            }
                          }
                          continue;
                        case 1:
                          v254 = HIBYTE(v423);
                          if (v423 < 0)
                            v254 = v422;
                          if (v254)
                          {
                            if (v400)
                            {
                              gettimeofday((timeval *)&__p, 0);
                              v405.__r_.__value_.__r.__words[0] = __p.__r_.__value_.__r.__words[0]
                                                                + v400
                                                                + SLODWORD(__p.__r_.__value_.__r.__words[1]) / 1000000;
                              v405.__r_.__value_.__l.__size_ = 1000 * LODWORD(__p.__r_.__value_.__r.__words[1])
                                                             % 1000000000;
                              v255 = (timespec *)&v405;
                            }
                            else
                            {
                              v255 = 0;
                            }
                            v259 = g_launch_flavor;
                            if (!g_launch_flavor)
                            {
                              if (v423 >= 0)
                                v260 = (const char *)&v421;
                              else
                                v260 = (const char *)v421;
                              v261 = strlen(v260);
                              if (v261 >= 4
                                && v260[v261 - 4] == 46
                                && v260[v261 - 3] == 97
                                && v260[v261 - 2] == 112
                                && v260[v261 - 1] == 112)
                              {
                                v259 = 5;
                              }
                              else
                              {
                                v259 = 1;
                              }
                            }
                            *(_DWORD *)(v25 + 304) = v259;
                            if (g_isatty)
                            {
                              if (v423 >= 0)
                                v262 = (const char *)&v421;
                              else
                                v262 = (const char *)v421;
                              fprintf(__stdoutp, "Waiting to attach to process %s...\n", v262);
                            }
                            else
                            {
                              if (v423 >= 0)
                                v263 = &v421;
                              else
                                v263 = v421;
                              _DNBLog(0, (uint64_t)"Waiting to attach to process %s...\n", v233, v234, v235, v236, v237, v238, (uint64_t)v263);
                            }
                            if (v423 >= 0)
                              v264 = (char *)&v421;
                            else
                              v264 = (char *)v421;
                            v265 = DNBProcessAttachWait((RNBContext *)v25, v264, 0, v255, v398, (char *)__dst, 0x400uLL, 0, 0);
                            goto LABEL_356;
                          }
                          if ((_DWORD)v399)
                          {
                            if (g_isatty)
                              fprintf(__stdoutp, "Attaching to process %i...\n", v399);
                            else
                              _DNBLog(0, (uint64_t)"Attaching to process %i...\n", v233, v234, v235, v236, v237, v238, v399);
                            LODWORD(__p.__r_.__value_.__l.__data_) = 0;
                            if (RNBRunLoopLaunchAttaching((RNBRemote *)v25, v399, (int *)&__p) != 4)
                            {
                              DNBError::AsString((DNBError *)v397);
                              if (g_isatty)
                                fprintf(__stderrp, "error: failed to attach process %i: %s\n");
                              else
                                _DNBLog(0, (uint64_t)"error: failed to attach process %i: %s\n", v316, v317, v318, v319, v320, v321, v399);
LABEL_450:
                              v315 = 6;
                              goto LABEL_451;
                            }
                            goto LABEL_447;
                          }
                          v289 = HIBYTE(v420.__r_.__value_.__r.__words[2]);
                          if ((v420.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                            v289 = v420.__r_.__value_.__l.__size_;
                          if (v289)
                          {
                            if (v400)
                            {
                              gettimeofday((timeval *)&__p, 0);
                              v405.__r_.__value_.__r.__words[0] = __p.__r_.__value_.__r.__words[0]
                                                                + v400
                                                                + SLODWORD(__p.__r_.__value_.__r.__words[1]) / 1000000;
                              v405.__r_.__value_.__l.__size_ = 1000 * LODWORD(__p.__r_.__value_.__r.__words[1])
                                                             % 1000000000;
                              v290 = &v405;
                            }
                            else
                            {
                              v290 = 0;
                            }
                            if (g_isatty)
                            {
                              if ((v420.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                v325 = &v420;
                              else
                                v325 = (std::string *)v420.__r_.__value_.__r.__words[0];
                              fprintf(__stdoutp, "Attaching to process %s...\n", (const char *)v325);
                            }
                            else
                            {
                              if ((v420.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                v326 = &v420;
                              else
                                v326 = (std::string *)v420.__r_.__value_.__r.__words[0];
                              _DNBLog(0, (uint64_t)"Attaching to process %s...\n", v233, v234, v235, v236, v237, v238, (uint64_t)v326);
                            }
                            if ((v420.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                              v327 = &v420;
                            else
                              v327 = (std::string *)v420.__r_.__value_.__r.__words[0];
                            v265 = DNBProcessAttachByName((char *)v327, (uint64_t)v290, v25 + 448, __dst, 1024);
LABEL_356:
                            g_pid = v265;
                            if (!v265)
                            {
                              *(_QWORD *)(v25 + 312) = 0xFFFFFFFFLL;
                              if (*(char *)(v25 + 343) < 0)
                              {
                                **(_BYTE **)(v25 + 320) = 0;
                                *(_QWORD *)(v25 + 328) = 0;
                                if (__dst[0].__r_.__value_.__s.__data_[0])
LABEL_360:
                                  std::string::assign((std::string *)(v25 + 320), (const std::string::value_type *)__dst);
                              }
                              else
                              {
                                *(_BYTE *)(v25 + 320) = 0;
                                *(_BYTE *)(v25 + 343) = 0;
                                if (__dst[0].__r_.__value_.__s.__data_[0])
                                  goto LABEL_360;
                              }
                              if (g_isatty)
                              {
                                fprintf(__stderrp, "error: failed to attach to process named: \"%s\" %s\n");
                              }
                              else
                              {
                                if (v423 >= 0)
                                  v298 = &v421;
                                else
                                  v298 = v421;
                                _DNBLog(0, (uint64_t)"error: failed to attach to process named: \"%s\" %s\n", v266, v267, v268, v269, v270, v271, (uint64_t)v298);
                              }
                              goto LABEL_450;
                            }
                            RNBContext::SetProcessID((RNBContext *)v25, v265);
LABEL_447:
                            v315 = 4;
LABEL_451:
                            StartModeFromRemote = 6;
                            if (v315 != 6)
                            {
                              v233 = v408;
                              if (v408 == 0x7FFFFFFF)
                              {
                                if (LOBYTE(v431[0]) == 47)
                                {
                                  if (!RNBSocket::OpenFile((RNBSocket *)(v25 + 472), (const char *)v431))
                                    goto LABEL_470;
                                }
                                else
                                {
                                  if (communication_fd < 0)
                                    goto LABEL_470;
                                  if (!RNBSocket::useFD((RNBSocket *)(v25 + 472), communication_fd))
                                  {
                                    RNBRemote::StartReadRemoteDataThread((RNBRemote *)v25);
                                    goto LABEL_470;
                                  }
                                }
                              }
                              else
                              {
                                if ((v409.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                  v322 = &v409;
                                else
                                  v322 = (std::string *)v409.__r_.__value_.__r.__words[0];
                                if (v411 >= 0)
                                  v323 = v410;
                                else
                                  v323 = (void **)v410[0];
                                if (v413 >= 0)
                                  v324 = v412;
                                else
                                  v324 = (void **)v412[0];
                                if (ConnectRemote((RNBRemote *)v25, (char *)v322, v408, v404 & 1, (const char *)v323, (const char *)v324, v237, v238))
                                {
LABEL_470:
                                  if (g_isatty)
                                    fprintf(__stdoutp, "Waiting for debugger instructions for process %d.\n", v399);
                                  else
                                    _DNBLog(0, (uint64_t)"Waiting for debugger instructions for process %d.\n", v233, v234, v235, v236, v237, v238, v399);
                                  StartModeFromRemote = v315;
                                }
                              }
                            }
                          }
                          else if (g_isatty)
                          {
                            v246 = __stderrp;
                            v247 = "error: asked to attach with empty name and invalid PID.\n";
                            v248 = 56;
LABEL_482:
                            fwrite(v247, v248, 1uLL, v246);
                          }
                          else
                          {
                            _DNBLog(0, (uint64_t)"error: asked to attach with empty name and invalid PID.\n", v233, v234, v235, v236, v237, v238, (uint64_t)v390);
                          }
                          continue;
                        case 2:
                          if (*(char *)(v25 + 39) < 0)
                          {
                            if (*(_QWORD *)(v25 + 24))
                            {
                              v249 = *(const char **)(v25 + 16);
                              v250 = *(char *)(v25 + 63);
                              if ((v250 & 0x80000000) == 0)
                                goto LABEL_291;
                            }
                            else
                            {
                              v249 = 0;
                              v250 = *(char *)(v25 + 63);
                              if ((v250 & 0x80000000) == 0)
                                goto LABEL_291;
                            }
                          }
                          else
                          {
                            if (*(_BYTE *)(v25 + 39))
                              v249 = (const char *)(v25 + 16);
                            else
                              v249 = 0;
                            v250 = *(char *)(v25 + 63);
                            if ((v250 & 0x80000000) == 0)
                            {
LABEL_291:
                              if (v250)
                                v251 = (const char *)(v25 + 40);
                              else
                                v251 = 0;
                              v252 = *(char *)(v25 + 87);
                              if (v252 < 0)
                              {
LABEL_318:
                                if (*(_QWORD *)(v25 + 72))
                                  v253 = *(const char **)(v25 + 64);
                                else
                                  v253 = 0;
                                goto LABEL_379;
                              }
                              goto LABEL_295;
                            }
                          }
                          if (*(_QWORD *)(v25 + 48))
                          {
                            v251 = *(const char **)(v25 + 40);
                            v252 = *(char *)(v25 + 87);
                            if (v252 < 0)
                              goto LABEL_318;
                          }
                          else
                          {
                            v251 = 0;
                            v252 = *(char *)(v25 + 87);
                            if (v252 < 0)
                              goto LABEL_318;
                          }
LABEL_295:
                          if (v252)
                            v253 = (const char *)(v25 + 64);
                          else
                            v253 = 0;
LABEL_379:
                          v275 = RNBRunLoopLaunchInferior((RNBRemote *)v25, v249, v251, v253, v393 & 1);
                          if (v275 == 4)
                          {
                            if (v408 == 0x7FFFFFFF)
                            {
                              if (LOBYTE(v431[0]) == 47)
                              {
                                if (!RNBSocket::OpenFile((RNBSocket *)(v25 + 472), (const char *)v431))
                                  goto LABEL_409;
                              }
                              else
                              {
                                if (communication_fd < 0)
                                  goto LABEL_409;
                                if (!RNBSocket::useFD((RNBSocket *)(v25 + 472), communication_fd))
                                {
                                  RNBRemote::StartReadRemoteDataThread((RNBRemote *)v25);
                                  goto LABEL_409;
                                }
                              }
                            }
                            else
                            {
                              if ((v409.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                v286 = &v409;
                              else
                                v286 = (std::string *)v409.__r_.__value_.__r.__words[0];
                              if (v411 >= 0)
                                v287 = v410;
                              else
                                v287 = (void **)v410[0];
                              if (v413 >= 0)
                                v288 = v412;
                              else
                                v288 = (void **)v412[0];
                              if (ConnectRemote((RNBRemote *)v25, (char *)v286, v408, v404 & 1, (const char *)v287, (const char *)v288, v276, v277))
                              {
LABEL_409:
                                if (*(_QWORD *)(v25 + 352) != *(_QWORD *)(v25 + 344))
                                {
                                  v291 = RNBContext::ArgumentAtIndex((RNBContext *)v25, 0);
                                  if (!DNBLogEnabled())
                                    goto LABEL_412;
LABEL_411:
                                  _DNBLog(0, (uint64_t)"[LaunchAttach] Successfully launched %s (pid = %d).\n", v292, v293, v294, v295, v296, v297, (uint64_t)v291);
                                  goto LABEL_412;
                                }
                                v291 = "<unknown>";
                                if (DNBLogEnabled())
                                  goto LABEL_411;
LABEL_412:
                                if (g_isatty)
                                  fprintf(__stdoutp, "Got a connection, launched process %s (pid = %d).\n", v291, *(_DWORD *)(v25 + 12));
                                else
                                  _DNBLog(0, (uint64_t)"Got a connection, launched process %s (pid = %d).\n", v292, v293, v294, v295, v296, v297, (uint64_t)v291);
                                StartModeFromRemote = 4;
                              }
                            }
                          }
                          else
                          {
                            StartModeFromRemote = v275;
                            v278 = DNBError::AsString((DNBError *)v397);
                            if (g_isatty)
                            {
                              if (v278)
                                v285 = (const char *)v278;
                              else
                                v285 = "unknown error.";
                              fprintf(__stderrp, "error: failed to launch process %s: %s\n", v396, v285);
                            }
                            else
                            {
                              _DNBLog(0, (uint64_t)"error: failed to launch process %s: %s\n", v279, v280, v281, v282, v283, v284, (uint64_t)v396);
                            }
                          }
                          continue;
                        case 3:
                          StartModeFromRemote = RNBRunLoopInferiorExecuting((RNBRemote *)v25);
                          continue;
                        case 4:
                          if (v408 == 0x7FFFFFFF)
                          {
                            if (LOBYTE(v431[0]) == 47)
                            {
                              if (!RNBSocket::OpenFile((RNBSocket *)(v25 + 472), (const char *)v431))
                                goto LABEL_330;
                            }
                            else
                            {
                              if (communication_fd < 0)
                                goto LABEL_330;
                              if (!RNBSocket::useFD((RNBSocket *)(v25 + 472), communication_fd))
                              {
                                RNBRemote::StartReadRemoteDataThread((RNBRemote *)v25);
                                goto LABEL_330;
                              }
                            }
                          }
                          else
                          {
                            if ((v409.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                              v256 = &v409;
                            else
                              v256 = (std::string *)v409.__r_.__value_.__r.__words[0];
                            if (v411 >= 0)
                              v257 = v410;
                            else
                              v257 = (void **)v410[0];
                            if (v413 >= 0)
                              v258 = v412;
                            else
                              v258 = (void **)v412[0];
                            if (ConnectRemote((RNBRemote *)v25, (char *)v256, v408, v404 & 1, (const char *)v257, (const char *)v258, v237, v238))
                            {
LABEL_330:
                              RNBRunLoopPlatform((RNBRemote *)v25);
                            }
                          }
                          break;
                        case 5:
                          RNBRemote::StopReadRemoteDataThread((RNBRemote *)v25);
                          RNBContext::SetProcessID((RNBContext *)v25, 0);
                          if (g_isatty)
                            fwrite("Exiting.\n", 9uLL, 1uLL, __stdoutp);
                          else
                            _DNBLog(0, (uint64_t)"Exiting.\n", v328, v329, v330, v331, v332, v333, (uint64_t)v390);
                          v39 = 0;
                          goto LABEL_503;
                        default:
                          continue;
                      }
                    }
                  }
LABEL_271:
                  v229 = _NSGetEnviron();
                  v230 = **v229;
                  if (v230)
                  {
                    v231 = (const char **)(*v229 + 1);
                    do
                    {
                      RNBContext::PushEnvironmentIfNeeded((RNBContext *)v25, v230);
                      v232 = *v231++;
                      v230 = v232;
                    }
                    while (v232);
                  }
                  goto LABEL_274;
                }
                if (!g_applist_opt)
                  goto LABEL_265;
                if (DNBLogEnabled())
                  _DNBLog(0, (uint64_t)"debugserver running in --applist mode", v335, v336, v337, v338, v339, v340, (uint64_t)v390);
                memset(__dst, 0, 24);
                v341 = ListApplications(__dst, 0, 0);
                v39 = v341;
                if ((_DWORD)v341)
                {
                  if (g_isatty)
                    fprintf(__stderrp, "error: ListApplications returned error %i\n", v341);
                  else
                    _DNBLog(0, (uint64_t)"error: ListApplications returned error %i\n", v342, v343, v344, v345, v346, v347, v341);
                }
                else
                {
                  if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v348 = __dst;
                  else
                    v348 = (std::string *)__dst[0].__r_.__value_.__r.__words[0];
                  fputs((const char *)v348, __stdoutp);
                }
                if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__dst[0].__r_.__value_.__l.__data_);
LABEL_503:
                if (SHIBYTE(v409.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(v409.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(v411) & 0x80000000) == 0)
                  {
LABEL_505:
                    if ((SHIBYTE(v413) & 0x80000000) == 0)
                      goto LABEL_506;
                    goto LABEL_514;
                  }
                }
                else if ((SHIBYTE(v411) & 0x80000000) == 0)
                {
                  goto LABEL_505;
                }
                operator delete(v410[0]);
                if ((SHIBYTE(v413) & 0x80000000) == 0)
                {
LABEL_506:
                  if ((SHIBYTE(v416) & 0x80000000) == 0)
                    goto LABEL_507;
                  goto LABEL_515;
                }
LABEL_514:
                operator delete(v412[0]);
                if ((SHIBYTE(v416) & 0x80000000) == 0)
                {
LABEL_507:
                  if ((SHIBYTE(v419) & 0x80000000) == 0)
                    goto LABEL_508;
                  goto LABEL_516;
                }
LABEL_515:
                operator delete(v414);
                if ((SHIBYTE(v419) & 0x80000000) == 0)
                {
LABEL_508:
                  if ((SHIBYTE(v420.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_509;
                  goto LABEL_517;
                }
LABEL_516:
                operator delete(v417);
                if ((SHIBYTE(v420.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_509:
                  if ((SHIBYTE(v423) & 0x80000000) == 0)
                    goto LABEL_510;
                  goto LABEL_518;
                }
LABEL_517:
                operator delete(v420.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v423) & 0x80000000) == 0)
                {
LABEL_510:
                  if ((SHIBYTE(v425) & 0x80000000) == 0)
                    return v39;
LABEL_519:
                  operator delete(v424[0]);
                  return v39;
                }
LABEL_518:
                operator delete(v421);
                if ((SHIBYTE(v425) & 0x80000000) == 0)
                  return v39;
                goto LABEL_519;
              }
LABEL_252:
              if (StartModeFromRemote == 2)
                goto LABEL_268;
              goto LABEL_253;
            }
            v194 = *v125;
            if (**v125 == 47)
            {
              v408 = 0x7FFFFFFF;
              strlcpy((char *)v431, v194, 0x400uLL);
              goto LABEL_251;
            }
            goto LABEL_546;
          }
          v165 = v164;
          v166 = HIBYTE(__dst[0].__r_.__value_.__r.__words[2]);
          if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          {
            v167 = __dst;
          }
          else
          {
            v166 = __dst[0].__r_.__value_.__l.__size_;
            v167 = (std::string *)__dst[0].__r_.__value_.__r.__words[0];
          }
          if (v166 >= v164)
            v168 = v164;
          else
            v168 = v166;
          if (v168 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_533;
          if (v168 >= 0x17)
          {
            v184 = (v168 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v168 | 7) != 0x17)
              v184 = v168 | 7;
            v185 = v184 + 1;
            v169 = (std::string *)operator new(v184 + 1);
            __p.__r_.__value_.__l.__size_ = v168;
            __p.__r_.__value_.__r.__words[2] = v185 | 0x8000000000000000;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v169;
          }
          else
          {
            *((_BYTE *)&__p.__r_.__value_.__s + 23) = v168;
            v169 = &__p;
            if (!v168)
            {
LABEL_195:
              v169->__r_.__value_.__s.__data_[v168] = 0;
              if (SHIBYTE(v409.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v409.__r_.__value_.__l.__data_);
              v409 = __p;
              if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
              {
                v186 = __dst[0].__r_.__value_.__l.__size_;
                if (__dst[0].__r_.__value_.__l.__size_ <= v165)
                  goto LABEL_533;
                v187 = (std::string *)__dst[0].__r_.__value_.__r.__words[0];
              }
              else
              {
                v186 = HIBYTE(__dst[0].__r_.__value_.__r.__words[2]);
                if (v165 >= HIBYTE(__dst[0].__r_.__value_.__r.__words[2]))
                  goto LABEL_533;
                v187 = __dst;
              }
              v188 = v165 + 1;
              v189 = v186 - (v165 + 1);
              if (v189 > 0x7FFFFFFFFFFFFFF7)
LABEL_533:
                abort();
              if (v189 >= 0x17)
              {
                v191 = (v189 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v189 | 7) != 0x17)
                  v191 = v189 | 7;
                v192 = v191 + 1;
                v190 = (std::string *)operator new(v191 + 1);
                __p.__r_.__value_.__l.__size_ = v189;
                __p.__r_.__value_.__r.__words[2] = v192 | 0x8000000000000000;
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v190;
              }
              else
              {
                *((_BYTE *)&__p.__r_.__value_.__s + 23) = v189;
                v190 = &__p;
                if (v186 == v188)
                {
LABEL_210:
                  v190->__r_.__value_.__s.__data_[v189] = 0;
                  __endptr = 0;
                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v193 = &__p;
                  else
                    v193 = (std::string *)__p.__r_.__value_.__r.__words[0];
                  v408 = strtoul((const char *)v193, &__endptr, 0);
                  v195 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v196 = &__p;
                  else
                    v196 = (std::string *)__p.__r_.__value_.__r.__words[0];
                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v195 = __p.__r_.__value_.__l.__size_;
                  if (__endptr >= (char *)v196 + v195)
                  {
                    if (SHIBYTE(v409.__r_.__value_.__r.__words[2]) < 0)
                    {
                      if (*v409.__r_.__value_.__l.__data_ == 91)
                      {
                        v197 = v409.__r_.__value_.__l.__size_;
                        if (*(_BYTE *)(v409.__r_.__value_.__r.__words[0] + v409.__r_.__value_.__l.__size_ - 1) == 93)
                        {
                          if (!v409.__r_.__value_.__l.__size_)
                            goto LABEL_533;
                          v198 = (std::string::value_type *)(v409.__r_.__value_.__r.__words[0] + 1);
                          goto LABEL_228;
                        }
                      }
                    }
                    else if (v409.__r_.__value_.__s.__data_[0] == 91)
                    {
                      v197 = HIBYTE(v409.__r_.__value_.__r.__words[2]);
                      if (v409.__r_.__value_.__s.__data_[HIBYTE(v409.__r_.__value_.__r.__words[2]) - 1] == 93)
                      {
                        if (!*((_BYTE *)&v409.__r_.__value_.__s + 23))
                          goto LABEL_533;
                        v198 = &v409.__r_.__value_.__s.__data_[1];
LABEL_228:
                        v199 = v197 - 2;
                        v200 = v197 - 1;
                        if (v200 >= v199)
                          v201 = v199;
                        else
                          v201 = v200;
                        if (v201 <= 0x7FFFFFFFFFFFFFF7)
                        {
                          if (v201 >= 0x17)
                          {
                            v203 = (v201 & 0xFFFFFFFFFFFFFFF8) + 8;
                            if ((v201 | 7) != 0x17)
                              v203 = v201 | 7;
                            v204 = v203 + 1;
                            v202 = (std::string *)operator new(v203 + 1);
                            v405.__r_.__value_.__l.__size_ = v201;
                            v405.__r_.__value_.__r.__words[2] = v204 | 0x8000000000000000;
                            v405.__r_.__value_.__r.__words[0] = (std::string::size_type)v202;
                          }
                          else
                          {
                            *((_BYTE *)&v405.__r_.__value_.__s + 23) = v201;
                            v202 = &v405;
                            if (!v201)
                              goto LABEL_242;
                          }
                          memmove(v202, v198, v201);
LABEL_242:
                          v202->__r_.__value_.__s.__data_[v201] = 0;
                          if (SHIBYTE(v409.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(v409.__r_.__value_.__l.__data_);
                          v409 = v405;
                          goto LABEL_245;
                        }
                        goto LABEL_533;
                      }
                    }
LABEL_245:
                    if (DNBLogEnabled())
                    {
                      v212 = &v409;
                      if ((v409.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                        v212 = (std::string *)v409.__r_.__value_.__r.__words[0];
                      _DNBLogDebug((uint64_t)"host = '%s'  port = %i", v205, v206, v207, v208, v209, v210, v211, (uint64_t)v212);
                    }
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__p.__r_.__value_.__l.__data_);
                    goto LABEL_251;
                  }
LABEL_546:
                  show_usage_and_exit(2, (uint64_t)v194, v170, v171, v172, v173, v174, v175);
                }
              }
              memmove(v190, (char *)v187 + v188, v189);
              goto LABEL_210;
            }
          }
          memmove(v169, v167, v168);
          goto LABEL_195;
        }
      }
      memmove(v161, v158, v160);
      goto LABEL_174;
    }
    if (g_isatty)
    {
      v36 = __stderrp;
      v37 = "error: failed to create a remote connection class\n";
      v38 = 50;
      goto LABEL_31;
    }
    v40 = "error: failed to create a remote connection class\n";
LABEL_33:
    _DNBLog(0, (uint64_t)v40, v18, v19, v20, v21, v22, v23, (uint64_t)v389);
    return -1;
  }
  if (!g_isatty)
  {
    v40 = "error: Developer mode must be enabled to use debugserver.\n";
    goto LABEL_33;
  }
  v36 = __stderrp;
  v37 = "error: Developer mode must be enabled to use debugserver.\n";
  v38 = 58;
LABEL_31:
  fwrite(v37, v38, 1uLL, v36);
  return -1;
}

void RNBContext::PushEnvironment(RNBContext *this, const char *__s)
{
  size_t v4;
  size_t v5;
  __int128 *p_dst;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  char *v11;
  int v12;
  __int128 __dst;
  unint64_t v14;

  if (__s)
  {
    v4 = strlen(__s);
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v5 = v4;
    if (v4 >= 0x17)
    {
      v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17)
        v7 = v4 | 7;
      v8 = v7 + 1;
      p_dst = (__int128 *)operator new(v7 + 1);
      *((_QWORD *)&__dst + 1) = v5;
      v14 = v8 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v14) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_10:
        *((_BYTE *)p_dst + v5) = 0;
        v9 = *((_QWORD *)this + 47);
        if (v9 >= *((_QWORD *)this + 48))
        {
          v11 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)this + 46, (uint64_t)&__dst);
          v12 = SHIBYTE(v14);
          *((_QWORD *)this + 47) = v11;
          if (v12 < 0)
            operator delete((void *)__dst);
        }
        else
        {
          v10 = __dst;
          *(_QWORD *)(v9 + 16) = v14;
          *(_OWORD *)v9 = v10;
          *((_QWORD *)this + 47) = v9 + 24;
        }
        return;
      }
    }
    memcpy(p_dst, __s, v5);
    goto LABEL_10;
  }
}

void RNBContext::PushArgument(RNBContext *this, const char *__s)
{
  size_t v4;
  size_t v5;
  __int128 *p_dst;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  char *v11;
  int v12;
  __int128 __dst;
  unint64_t v14;

  if (__s)
  {
    v4 = strlen(__s);
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v5 = v4;
    if (v4 >= 0x17)
    {
      v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17)
        v7 = v4 | 7;
      v8 = v7 + 1;
      p_dst = (__int128 *)operator new(v7 + 1);
      *((_QWORD *)&__dst + 1) = v5;
      v14 = v8 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v14) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_10:
        *((_BYTE *)p_dst + v5) = 0;
        v9 = *((_QWORD *)this + 44);
        if (v9 >= *((_QWORD *)this + 45))
        {
          v11 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)this + 43, (uint64_t)&__dst);
          v12 = SHIBYTE(v14);
          *((_QWORD *)this + 44) = v11;
          if (v12 < 0)
            operator delete((void *)__dst);
        }
        else
        {
          v10 = __dst;
          *(_QWORD *)(v9 + 16) = v14;
          *(_OWORD *)v9 = v10;
          *((_QWORD *)this + 44) = v9 + 24;
        }
        return;
      }
    }
    memcpy(p_dst, __s, v5);
    goto LABEL_10;
  }
}

BOOL ConnectRemote(RNBRemote *a1, char *a2, uint64_t a3, uint64_t a4, const char *a5, const char *a6, uint64_t a7, uint64_t a8)
{
  _BOOL8 result;
  unsigned __int16 v9;
  RNBSocket *v12;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (*((_DWORD *)a1 + 118) != -1)
    return 1;
  v9 = a3;
  v12 = (RNBRemote *)((char *)a1 + 472);
  if (!(_DWORD)a4)
  {
    if ((_DWORD)a3)
    {
      if (!g_isatty)
      {
        _DNBLog(0, (uint64_t)"Listening to port %i for a connection from %s...\n", a3, a4, (uint64_t)a5, (uint64_t)a6, a7, a8, a3);
        if (!a6)
          goto LABEL_22;
        goto LABEL_15;
      }
      v15 = "127.0.0.1";
      if (a2)
        v15 = a2;
      fprintf(__stdoutp, "Listening to port %i for a connection from %s...\n", a3, v15);
    }
    if (!a6)
      goto LABEL_22;
LABEL_15:
    if (*a6)
    {
      if (!RNBSocket::Listen(v12, a2, v9, (void (*)(const void *, unsigned __int16))PortWasBoundCallbackUnixSocket, a6))goto LABEL_17;
LABEL_23:
      if (g_isatty)
        fwrite("Failed to get connection from a remote gdb process.\n", 0x34uLL, 1uLL, __stderrp);
      else
        _DNBLog(0, (uint64_t)"Failed to get connection from a remote gdb process.\n", v16, v17, v18, v19, v20, v21, v22);
      return 0;
    }
LABEL_22:
    if (!RNBSocket::Listen(v12, a2, v9, (void (*)(const void *, unsigned __int16))PortWasBoundCallbackNamedPipe, a5))goto LABEL_17;
    goto LABEL_23;
  }
  if ((_DWORD)a3)
  {
    if (RNBSocket::Connect((RNBRemote *)((char *)a1 + 472), (lldb_private::SocketAddress *)a2, (unsigned __int16)a3))
    {
      result = DNBLogEnabled();
      if (result)
      {
        _DNBLogThreaded("Failed to reverse connect to %s:%i.\n");
        return 0;
      }
      return result;
    }
LABEL_17:
    RNBRemote::StartReadRemoteDataThread(a1);
    return 1;
  }
  result = DNBLogEnabled();
  if (result)
  {
    _DNBLogThreaded("error: invalid port supplied for reverse connection: %i.\n");
    return 0;
  }
  return result;
}

char *std::vector<std::string>::__push_back_slow_path<std::string>(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  void **v11;
  void **v12;
  __int128 v13;
  void **v14;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v3)
    v3 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v2];
  v9 = &v7[24 * v6];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v10 = v8 + 24;
  v11 = (void **)*a1;
  v12 = (void **)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      v13 = *(_OWORD *)(v12 - 3);
      *((_QWORD *)v8 - 1) = *(v12 - 1);
      *(_OWORD *)(v8 - 24) = v13;
      v8 -= 24;
      *(v12 - 2) = 0;
      *(v12 - 1) = 0;
      *(v12 - 3) = 0;
      v12 -= 3;
    }
    while (v12 != v11);
    v12 = (void **)*a1;
    v14 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    while (v14 != v12)
    {
      if (*((char *)v14 - 1) < 0)
        operator delete(*(v14 - 3));
      v14 -= 3;
    }
  }
  if (v12)
    operator delete(v12);
  return v10;
}

void std::__throw_bad_array_new_length[abi:nn180100]()
{
  abort();
}

const char *PortWasBoundCallbackUnixSocket(const char *result, unsigned int a2)
{
  const char *v2;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  char __str[64];
  sockaddr v15;
  char v16;

  if (result)
  {
    v2 = result;
    if (*result)
    {
      v4 = socket(1, 1, 0);
      if (v4 < 0)
        PortWasBoundCallbackUnixSocket();
      v5 = v4;
      v15.sa_family = 1;
      strlcpy(v15.sa_data, v2, 0x67uLL);
      v16 = 0;
      v15.sa_len = strlen(v15.sa_data) + 2;
      v6 = strlen(v15.sa_data);
      if (connect(v5, &v15, v6 + 2) < 0)
        PortWasBoundCallbackUnixSocket();
      if (g_isatty)
        fprintf(__stdoutp, "Listening to port %i...\n", a2);
      else
        _DNBLog(0, (uint64_t)"Listening to port %i...\n", v7, v8, v9, v10, v11, v12, a2);
      v13 = snprintf(__str, 0x40uLL, "%u", a2);
      if (send(v5, __str, v13, 0) != v13)
        PortWasBoundCallbackUnixSocket();
      return (const char *)close(v5);
    }
  }
  return result;
}

const char *PortWasBoundCallbackNamedPipe(const char *result, int a2)
{
  int v3;
  int v4;
  char __str[64];

  if (result && *result)
  {
    result = (const char *)open(result, 1);
    if ((result & 0x80000000) == 0)
    {
      v3 = (int)result;
      v4 = snprintf(__str, 0x40uLL, "%u", a2);
      write(v3, __str, v4 + 1);
      return (const char *)close(v3);
    }
  }
  return result;
}

void std::__shared_ptr_emplace<RNBRemote>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100060C20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RNBRemote>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100060C20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void std::__shared_ptr_emplace<RNBRemote>::__on_zero_shared(uint64_t a1)
{
  RNBRemote::~RNBRemote((RNBRemote *)(a1 + 24));
}

void OUTLINED_FUNCTION_0()
{
  exit(1);
}

uint64_t _GLOBAL__sub_I_debugserver_cpp()
{
  return __cxa_atexit((void (*)(void *))std::shared_ptr<RNBRemote>::~shared_ptr[abi:nn180100], &g_remoteSP, (void *)&_mh_execute_header);
}

uint64_t std::map<unsigned int,DNBArchPluginInfoTag>::~map[abi:nn180100](uint64_t a1)
{
  std::__tree<std::__value_type<unsigned int,DNBArchPluginInfoTag>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,DNBArchPluginInfoTag>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,DNBArchPluginInfoTag>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t DNBArchProtocol::GetCPUType(DNBArchProtocol *this)
{
  return g_current_cpu_type;
}

uint64_t DNBArchProtocol::GetCPUSubType(DNBArchProtocol *this)
{
  return g_current_cpu_subtype;
}

uint64_t DNBArchProtocol::SetArchitecture(DNBArchProtocol *this, int a2)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t v9;

  v3 = (int)this;
  g_current_cpu_type = (int)this;
  g_current_cpu_subtype = a2;
  v4 = qword_1000716C0;
  if (!qword_1000716C0)
    goto LABEL_12;
  v5 = &qword_1000716C0;
  do
  {
    v6 = *(_DWORD *)(v4 + 32);
    v7 = v6 >= this;
    if (v6 >= this)
      v8 = (uint64_t *)v4;
    else
      v8 = (uint64_t *)(v4 + 8);
    if (v7)
      v5 = (uint64_t *)v4;
    v4 = *v8;
  }
  while (*v8);
  if (v5 != &qword_1000716C0 && *((_DWORD *)v5 + 8) <= this)
    v9 = 1;
  else
LABEL_12:
    v9 = 0;
  if (DNBLogEnabledForAny(2))
    _DNBLogThreaded("DNBArchProtocol::SetDefaultArchitecture (cpu_type=0x%8.8x, cpu_subtype=0x%8.8x) => %i", v3, a2, v9);
  return v9;
}

void DNBArchProtocol::EnableAMXRegisters(DNBArchProtocol *this)
{
  enable_amx = 1;
}

__n128 DNBArchProtocol::RegisterArchPlugin(unsigned int *a1)
{
  unsigned int v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t *v8;
  __n128 result;

  v1 = *a1;
  if (*a1)
  {
    v3 = qword_1000716C0;
    if (qword_1000716C0)
    {
      while (1)
      {
        while (1)
        {
          v5 = (uint64_t *)v3;
          v6 = *(_DWORD *)(v3 + 32);
          if (v1 >= v6)
            break;
          v3 = *v5;
          v4 = v5;
          if (!*v5)
            goto LABEL_9;
        }
        if (v6 >= v1)
          break;
        v3 = v5[1];
        if (!v3)
        {
          v4 = v5 + 1;
          goto LABEL_9;
        }
      }
    }
    else
    {
      v4 = &qword_1000716C0;
      v5 = &qword_1000716C0;
LABEL_9:
      v7 = v5;
      v5 = (uint64_t *)operator new(0x48uLL);
      *((_DWORD *)v5 + 8) = v1;
      *(_OWORD *)(v5 + 5) = 0u;
      *(_OWORD *)(v5 + 7) = 0u;
      *v5 = 0;
      v5[1] = 0;
      v5[2] = (uint64_t)v7;
      *v4 = (uint64_t)v5;
      v8 = v5;
      if (*(_QWORD *)g_arch_plugins)
      {
        g_arch_plugins = *(_QWORD *)g_arch_plugins;
        v8 = (uint64_t *)*v4;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1000716C0, v8);
      ++qword_1000716C8;
    }
    result = *(__n128 *)a1;
    *(_OWORD *)(v5 + 7) = *((_OWORD *)a1 + 1);
    *(__n128 *)(v5 + 5) = result;
  }
  return result;
}

uint64_t DNBArchProtocol::GetRegisterCPUType(DNBArchProtocol *this)
{
  uint64_t v1;
  uint64_t *v2;
  unsigned int v3;
  BOOL v4;
  uint64_t *v5;

  v1 = qword_1000716C0;
  if (!qword_1000716C0)
    return 0;
  v2 = &qword_1000716C0;
  do
  {
    v3 = *(_DWORD *)(v1 + 32);
    v4 = v3 >= g_current_cpu_type;
    if (v3 >= g_current_cpu_type)
      v5 = (uint64_t *)v1;
    else
      v5 = (uint64_t *)(v1 + 8);
    if (v4)
      v2 = (uint64_t *)v1;
    v1 = *v5;
  }
  while (*v5);
  if (v2 != &qword_1000716C0 && g_current_cpu_type >= *((_DWORD *)v2 + 8))
    return *((unsigned int *)v2 + 10);
  else
    return 0;
}

uint64_t DNBArchProtocol::GetRegisterSetInfo(DNBArchProtocol *this, unint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  unsigned int v4;
  BOOL v5;
  uint64_t *v6;

  v2 = qword_1000716C0;
  if (qword_1000716C0)
  {
    v3 = &qword_1000716C0;
    do
    {
      v4 = *(_DWORD *)(v2 + 32);
      v5 = v4 >= g_current_cpu_type;
      if (v4 >= g_current_cpu_type)
        v6 = (uint64_t *)v2;
      else
        v6 = (uint64_t *)(v2 + 8);
      if (v5)
        v3 = (uint64_t *)v2;
      v2 = *v6;
    }
    while (*v6);
    if (v3 != &qword_1000716C0 && g_current_cpu_type >= *((_DWORD *)v3 + 8))
      return ((uint64_t (*)(DNBArchProtocol *, _QWORD))v3[7])(this, enable_amx);
  }
  *(_QWORD *)this = 0;
  return 0;
}

uint64_t DNBArchProtocol::Create()
{
  uint64_t v0;
  uint64_t *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t *v4;

  v0 = qword_1000716C0;
  if (!qword_1000716C0)
    return 0;
  v1 = &qword_1000716C0;
  do
  {
    v2 = *(_DWORD *)(v0 + 32);
    v3 = v2 >= g_current_cpu_type;
    if (v2 >= g_current_cpu_type)
      v4 = (uint64_t *)v0;
    else
      v4 = (uint64_t *)(v0 + 8);
    if (v3)
      v1 = (uint64_t *)v0;
    v0 = *v4;
  }
  while (*v4);
  if (v1 != &qword_1000716C0 && g_current_cpu_type >= *((_DWORD *)v1 + 8))
    return ((uint64_t (*)(void))v1[6])();
  else
    return 0;
}

uint64_t DNBArchProtocol::GetBreakpointOpcode(DNBArchProtocol *this)
{
  uint64_t v1;
  uint64_t *v2;
  unsigned int v3;
  BOOL v4;
  uint64_t *v5;

  v1 = qword_1000716C0;
  if (!qword_1000716C0)
    return 0;
  v2 = &qword_1000716C0;
  do
  {
    v3 = *(_DWORD *)(v1 + 32);
    v4 = v3 >= g_current_cpu_type;
    if (v3 >= g_current_cpu_type)
      v5 = (uint64_t *)v1;
    else
      v5 = (uint64_t *)(v1 + 8);
    if (v4)
      v2 = (uint64_t *)v1;
    v1 = *v5;
  }
  while (*v5);
  if (v2 != &qword_1000716C0 && g_current_cpu_type >= *((_DWORD *)v2 + 8))
    return ((uint64_t (*)(DNBArchProtocol *))v2[8])(this);
  else
    return 0;
}

void std::__tree<std::__value_type<unsigned int,DNBArchPluginInfoTag>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,DNBArchPluginInfoTag>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,DNBArchPluginInfoTag>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,DNBArchPluginInfoTag>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,DNBArchPluginInfoTag>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,DNBArchPluginInfoTag>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned int,DNBArchPluginInfoTag>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,DNBArchPluginInfoTag>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,DNBArchPluginInfoTag>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t *std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = a2[2];
      if (*(_BYTE *)(v2 + 24))
        break;
      v3 = *(uint64_t **)(v2 + 16);
      v4 = *v3;
      if (*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if (*(uint64_t **)v2 == a2)
          {
            v9 = (uint64_t *)a2[2];
          }
          else
          {
            v9 = *(uint64_t **)(v2 + 8);
            v10 = *v9;
            *(_QWORD *)(v2 + 8) = *v9;
            if (v10)
            {
              *(_QWORD *)(v10 + 16) = v2;
              v3 = *(uint64_t **)(v2 + 16);
            }
            v9[2] = (uint64_t)v3;
            *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = v9;
            *v9 = v2;
            *(_QWORD *)(v2 + 16) = v9;
            v3 = (uint64_t *)v9[2];
            v2 = *v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v14 = *(_QWORD *)(v2 + 8);
          *v3 = v14;
          if (v14)
            *(_QWORD *)(v14 + 16) = v3;
          *(_QWORD *)(v2 + 16) = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          *(_QWORD *)(v2 + 8) = v3;
          v3[2] = v2;
          return result;
        }
      }
      else if (!v4 || (v6 = *(unsigned __int8 *)(v4 + 24), v5 = (_BYTE *)(v4 + 24), v6))
      {
        if (*(uint64_t **)v2 == a2)
        {
          v11 = a2[1];
          *(_QWORD *)v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = *(uint64_t **)(v2 + 16);
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = a2;
          a2[1] = v2;
          *(_QWORD *)(v2 + 16) = a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v12 = (uint64_t *)v3[1];
        v13 = *v12;
        v3[1] = *v12;
        if (v13)
          *(_QWORD *)(v13 + 16) = v3;
        v12[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v12;
        *v12 = (uint64_t)v3;
        v3[2] = (uint64_t)v12;
        return result;
      }
      *(_BYTE *)(v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t _GLOBAL__sub_I_DNBArch_cpp()
{
  qword_1000716C8 = 0;
  qword_1000716C0 = 0;
  g_arch_plugins = (uint64_t)&qword_1000716C0;
  return __cxa_atexit((void (*)(void *))std::map<unsigned int,DNBArchPluginInfoTag>::~map[abi:nn180100], &g_arch_plugins, (void *)&_mh_execute_header);
}

void DNBBreakpointList::DNBBreakpointList(DNBBreakpointList *this)
{
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
}

void DNBBreakpointList::~DNBBreakpointList(DNBBreakpointList *this)
{
  std::__tree<std::__value_type<unsigned int,DNBArchPluginInfoTag>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,DNBArchPluginInfoTag>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,DNBArchPluginInfoTag>>>::destroy((uint64_t)this, *((_QWORD **)this + 1));
}

char *DNBBreakpointList::Add(uint64_t **this, unint64_t a2, int a3, int a4)
{
  char v7;
  uint64_t *v8;
  char *v9;
  uint64_t **v10;
  uint64_t **v11;
  uint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t *v16;
  char *v17;
  unint64_t v18;
  BOOL v19;
  uint64_t **v20;

  if (a4)
    v7 = 2;
  else
    v7 = 0;
  v9 = (char *)(this + 1);
  v8 = this[1];
  v10 = this + 1;
  v11 = this + 1;
  if (v8)
  {
    v12 = this[1];
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v12;
        v13 = v12[4];
        if (v13 <= a2)
          break;
        v12 = *v11;
        v10 = v11;
        if (!*v11)
          goto LABEL_11;
      }
      if (v13 >= a2)
        break;
      v12 = v11[1];
      if (!v12)
      {
        v10 = v11 + 1;
        goto LABEL_11;
      }
    }
  }
  else
  {
LABEL_11:
    v14 = operator new(0x48uLL);
    v14[4] = a2;
    *((_DWORD *)v14 + 10) = 1;
    *((_DWORD *)v14 + 11) = a3;
    v14[6] = 0;
    v14[7] = a2;
    *((_BYTE *)v14 + 64) = v7;
    *((_DWORD *)v14 + 17) = -1;
    *v14 = 0;
    v14[1] = 0;
    v14[2] = v11;
    *v10 = v14;
    v15 = (uint64_t *)**this;
    if (v15)
    {
      *this = v15;
      v16 = *v10;
    }
    else
    {
      v16 = v14;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(this[1], v16);
    v8 = this[1];
    this[2] = (uint64_t *)((char *)this[2] + 1);
  }
  if (!v8)
    goto LABEL_26;
  v17 = v9;
  do
  {
    v18 = v8[4];
    v19 = v18 >= a2;
    if (v18 >= a2)
      v20 = (uint64_t **)v8;
    else
      v20 = (uint64_t **)(v8 + 1);
    if (v19)
      v17 = (char *)v8;
    v8 = *v20;
  }
  while (*v20);
  if (v17 == v9 || *((_QWORD *)v17 + 4) > a2)
LABEL_26:
    v17 = v9;
  return v17 + 40;
}

uint64_t DNBBreakpointList::Remove(DNBBreakpointList *this, unint64_t a2)
{
  uint64_t result;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;

  v4 = (uint64_t *)((char *)this + 8);
  result = *((_QWORD *)this + 1);
  if (result)
  {
    v5 = v4;
    v6 = result;
    do
    {
      v7 = *(_QWORD *)(v6 + 32);
      v8 = v7 >= a2;
      if (v7 >= a2)
        v9 = (uint64_t *)v6;
      else
        v9 = (uint64_t *)(v6 + 8);
      if (v8)
        v5 = (uint64_t *)v6;
      v6 = *v9;
    }
    while (*v9);
    if (v5 == v4 || v5[4] > a2)
    {
      return 0;
    }
    else
    {
      v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        v12 = v5;
        do
        {
          v11 = (uint64_t *)v12[2];
          v13 = *v11 == (_QWORD)v12;
          v12 = v11;
        }
        while (!v13);
      }
      if (*(uint64_t **)this == v5)
        *(_QWORD *)this = v11;
      --*((_QWORD *)this + 2);
      std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)result, v5);
      operator delete(v5);
      return 1;
    }
  }
  return result;
}

char *DNBBreakpointList::FindByAddress(DNBBreakpointList *this, unint64_t a2)
{
  char *v2;
  _QWORD *v3;
  _QWORD *v4;
  char *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  unint64_t v9;
  char *v10;

  v4 = (_QWORD *)*((_QWORD *)this + 1);
  v2 = (char *)this + 8;
  v3 = v4;
  if (!v4)
    return 0;
  v5 = v2;
  do
  {
    v6 = v3[4];
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7)
      v5 = (char *)v3;
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 == v2)
    return 0;
  v9 = *((_QWORD *)v5 + 4);
  v10 = v5 + 40;
  if (v9 <= a2)
    return v10;
  else
    return 0;
}

char *DNBBreakpointList::FindByHardwareIndex(DNBBreakpointList *this, int a2)
{
  char *v2;
  char *v3;
  char *v4;
  char *v6;
  char *v7;
  BOOL v8;

  v4 = *(char **)this;
  v2 = (char *)this + 8;
  v3 = v4;
  if (v4 == v2)
    return 0;
  while (*((_DWORD *)v3 + 17) != a2)
  {
    v6 = (char *)*((_QWORD *)v3 + 1);
    if (v6)
    {
      do
      {
        v7 = v6;
        v6 = *(char **)v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        v7 = (char *)*((_QWORD *)v3 + 2);
        v8 = *(_QWORD *)v7 == (_QWORD)v3;
        v3 = v7;
      }
      while (!v8);
    }
    v3 = v7;
    if (v7 == v2)
      return 0;
  }
  return v3 + 40;
}

char *DNBBreakpointList::FindNearestWatchpoint(DNBBreakpointList *this, unint64_t a2)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  char *v8;
  char *v9;
  BOOL v10;
  _QWORD *v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  char *v15;
  char *v16;

  v4 = *(char **)this;
  v2 = (char *)this + 8;
  v3 = v4;
  if (v4 == v2)
    return 0;
  v5 = v3;
  do
  {
    if ((v5[64] & 1) != 0)
    {
      v6 = *((_QWORD *)v5 + 7);
      if (v6 <= a2 && v6 + *((unsigned int *)v5 + 11) >= a2)
        return v5 + 40;
    }
    v8 = (char *)*((_QWORD *)v5 + 1);
    if (v8)
    {
      do
      {
        v9 = v8;
        v8 = *(char **)v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        v9 = (char *)*((_QWORD *)v5 + 2);
        v10 = *(_QWORD *)v9 == (_QWORD)v5;
        v5 = v9;
      }
      while (!v10);
    }
    v5 = v9;
  }
  while (v9 != v2);
  if (v3 == v2)
    return 0;
  v11 = 0;
  v12 = -1;
  do
  {
    if ((v3[64] & 1) != 0)
    {
      v13 = *((_QWORD *)v3 + 7);
      if (v13 <= a2)
        v14 = a2 - (v13 + *((_DWORD *)v3 + 11));
      else
        v14 = v13 - a2;
      if (v12 > v14)
        v11 = v3 + 40;
      if (v12 >= v14)
        v12 = v14;
    }
    v15 = (char *)*((_QWORD *)v3 + 1);
    if (v15)
    {
      do
      {
        v16 = v15;
        v15 = *(char **)v15;
      }
      while (v15);
    }
    else
    {
      do
      {
        v16 = (char *)*((_QWORD *)v3 + 2);
        v10 = *(_QWORD *)v16 == (_QWORD)v3;
        v3 = v16;
      }
      while (!v10);
    }
    v3 = v16;
  }
  while (v16 != v2);
  return (char *)v11;
}

uint64_t DNBBreakpointList::FindBreakpointsThatOverlapRange(_QWORD *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v10;
  unint64_t v11;
  BOOL v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  void *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  __int128 *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  unint64_t v58;
  unint64_t v59;

  v5 = *(_QWORD **)a4;
  *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
  v7 = a1 + 1;
  v6 = (_QWORD *)a1[1];
  if (v6)
  {
    v10 = a1 + 1;
    do
    {
      v11 = v6[4];
      v12 = v11 >= a2;
      if (v11 >= a2)
        v13 = v6;
      else
        v13 = v6 + 1;
      if (v12)
        v10 = v6;
      v6 = (_QWORD *)*v13;
    }
    while (*v13);
    if (v10 != v7)
    {
      if (v10 != (_QWORD *)*a1)
      {
        v14 = *v10;
        if (*v10)
        {
          do
          {
            v15 = v14;
            v14 = *(_QWORD *)(v14 + 8);
          }
          while (v14);
        }
        else
        {
          v16 = v10;
          do
          {
            v15 = v16[2];
            v17 = *(_QWORD *)v15 == (_QWORD)v16;
            v16 = (_QWORD *)v15;
          }
          while (v17);
        }
        if ((*(_BYTE *)(v15 + 64) & 5) == 1 && *(_DWORD *)(v15 + 68) == -1)
        {
          v47 = *(unsigned int *)(v15 + 44);
          if ((_DWORD)v47)
          {
            v48 = *(_QWORD *)(v15 + 56);
            if (a3 + a2 > v48 && v48 + v47 > a2)
            {
              v49 = v10 + 5;
              v50 = *(_QWORD *)(a4 + 16);
              if ((unint64_t)v5 >= v50)
              {
                v52 = v50 - (_QWORD)v5;
                v53 = v52 >> 2;
                if ((unint64_t)(v52 >> 2) <= 1)
                  v53 = 1;
                v12 = (unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8;
                v54 = 0x1FFFFFFFFFFFFFFFLL;
                if (!v12)
                  v54 = v53;
                if (v54 >> 61)
LABEL_78:
                  std::__throw_bad_array_new_length[abi:nn180100]();
                v55 = v54;
                v56 = operator new(8 * v54);
                v57 = &v56[v55];
                *v56 = v49;
                v51 = v56 + 1;
                *(_QWORD *)a4 = v56;
                *(_QWORD *)(a4 + 8) = v56 + 1;
                *(_QWORD *)(a4 + 16) = v57;
                if (v5)
                  operator delete(v5);
              }
              else
              {
                *v5 = v49;
                v51 = v5 + 1;
              }
              *(_QWORD *)(a4 + 8) = v51;
              v5 = v51;
            }
          }
        }
      }
      v18 = a3 + a2;
      while (1)
      {
        v19 = v10[7];
        if (v19 - a2 >= a3)
          return ((uint64_t)v5 - *(_QWORD *)a4) >> 3;
        if ((v10[8] & 5) == 1 && *((_DWORD *)v10 + 17) == -1)
        {
          v20 = *((unsigned int *)v10 + 11);
          if ((_DWORD)v20)
          {
            if (v18 > v19 && v19 + v20 > a2)
              break;
          }
        }
LABEL_21:
        if (v10 == v7)
          return ((uint64_t)v5 - *(_QWORD *)a4) >> 3;
      }
      v21 = v10 + 5;
      v22 = *(_QWORD *)(a4 + 16);
      if ((unint64_t)v5 < v22)
      {
        *v5 = v21;
        v23 = v5 + 1;
LABEL_48:
        *(_QWORD *)(a4 + 8) = v23;
        v37 = (_QWORD *)v10[1];
        if (v37)
        {
          do
          {
            v10 = v37;
            v37 = (_QWORD *)*v37;
          }
          while (v37);
        }
        else
        {
          do
          {
            v38 = v10;
            v10 = (_QWORD *)v10[2];
          }
          while ((_QWORD *)*v10 != v38);
        }
        v5 = v23;
        goto LABEL_21;
      }
      v24 = *(char **)a4;
      v25 = (uint64_t)v5 - *(_QWORD *)a4;
      v26 = v25 >> 3;
      v27 = (v25 >> 3) + 1;
      if (v27 >> 61)
        abort();
      v28 = v22 - (_QWORD)v24;
      if (v28 >> 2 > v27)
        v27 = v28 >> 2;
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
        v27 = 0x1FFFFFFFFFFFFFFFLL;
      v58 = v27;
      v59 = v18;
      if (v27)
      {
        if (v27 >> 61)
          goto LABEL_78;
        v29 = operator new(8 * v27);
        v21 = v10 + 5;
      }
      else
      {
        v29 = 0;
      }
      v30 = &v29[8 * v26];
      *v30 = v21;
      v23 = v30 + 1;
      if (v5 == (_QWORD *)v24)
      {
        v32 = v58;
        goto LABEL_45;
      }
      v31 = (char *)v5 - v24 - 8;
      v32 = v58;
      if (v31 >= 0x168)
      {
        v39 = ((char *)(v5 - 1) - v24) & 0xFFFFFFFFFFFFFFF8;
        if (&v29[v25 - 8 - v39] > &v29[v25 - 8])
        {
          v33 = (char *)v5;
        }
        else if ((_QWORD *)((char *)v5 - v39 - 8) > v5 - 1)
        {
          v33 = (char *)v5;
        }
        else if ((unint64_t)((char *)v5 - &v29[v25]) >= 0x20)
        {
          v40 = (v31 >> 3) + 1;
          v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
          v33 = (char *)&v5[v41 / 0xFFFFFFFFFFFFFFF8];
          v30 = (_QWORD *)((char *)v30 - v41);
          v42 = &v29[8 * v26 - 16];
          v43 = (__int128 *)(v5 - 2);
          v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v45 = *v43;
            *(v42 - 1) = *(v43 - 1);
            *v42 = v45;
            v42 -= 2;
            v43 -= 2;
            v44 -= 4;
          }
          while (v44);
          if (v40 == (v40 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_43;
        }
        else
        {
          v33 = (char *)v5;
        }
      }
      else
      {
        v33 = (char *)v5;
      }
      do
      {
        v34 = *((_QWORD *)v33 - 1);
        v33 -= 8;
        *--v30 = v34;
      }
      while (v33 != v24);
LABEL_43:
      v5 = *(_QWORD **)a4;
LABEL_45:
      *(_QWORD *)a4 = v30;
      *(_QWORD *)(a4 + 8) = v23;
      *(_QWORD *)(a4 + 16) = &v29[8 * v32];
      if (v5)
      {
        v35 = v5;
        v36 = v23;
        operator delete(v35);
        v23 = v36;
      }
      v18 = v59;
      goto LABEL_48;
    }
  }
  return ((uint64_t)v5 - *(_QWORD *)a4) >> 3;
}

_QWORD *DNBBreakpointList::DisableAll(DNBBreakpointList *this)
{
  _QWORD *result;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;

  v3 = *(_QWORD **)this;
  result = (_QWORD *)((char *)this + 8);
  v2 = v3;
  if (v3 != result)
  {
    do
    {
      *((_DWORD *)v2 + 17) = -1;
      *((_BYTE *)v2 + 64) &= ~1u;
      v4 = (_QWORD *)v2[1];
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (_QWORD *)v2[2];
          v6 = *v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
      }
      v2 = v5;
    }
    while (v5 != result);
  }
  return result;
}

_QWORD *DNBBreakpointList::RemoveTrapsFromBuffer(_QWORD *this, unint64_t a2, uint64_t a3, char *a4)
{
  _QWORD *v4;
  char *v5;
  char *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  unint64_t v12;
  char *v13;
  char *v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v5 = (char *)(this + 1);
  v4 = (_QWORD *)this[1];
  if (v4)
  {
    v8 = (char *)(this + 1);
    do
    {
      v9 = v4[4];
      v10 = v9 >= a2;
      if (v9 >= a2)
        v11 = v4;
      else
        v11 = v4 + 1;
      if (v10)
        v8 = (char *)v4;
      v4 = (_QWORD *)*v11;
    }
    while (*v11);
    if (v8 != v5)
    {
      v12 = a3 + a2;
      do
      {
        if (*((_QWORD *)v8 + 4) >= v12)
          break;
        if ((v8[64] & 5) == 1 && *((_DWORD *)v8 + 17) == -1)
        {
          v16 = *((unsigned int *)v8 + 11);
          if ((_DWORD)v16)
          {
            v17 = *((_QWORD *)v8 + 7);
            if (v12 > v17 && v17 + v16 > a2)
            {
              if (v12 >= v17 + v16)
                v18 = v17 + v16;
              else
                v18 = v12;
              if (v17 <= a2)
                v19 = a2;
              else
                v19 = *((_QWORD *)v8 + 7);
              v10 = a2 >= v17;
              v20 = a2 - v17;
              if (!v10)
                v20 = 0;
              if (v19 >= v12)
                DNBBreakpointList::RemoveTrapsFromBuffer();
              if (v18 <= a2)
                DNBBreakpointList::RemoveTrapsFromBuffer();
              if (v20 + v18 - v19 > v16)
                DNBBreakpointList::RemoveTrapsFromBuffer();
              this = memcpy(&a4[v19 - a2], &v8[v20 + 48], v18 - v19);
            }
          }
        }
        v13 = (char *)*((_QWORD *)v8 + 1);
        if (v13)
        {
          do
          {
            v14 = v13;
            v13 = *(char **)v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v14 = (char *)*((_QWORD *)v8 + 2);
            v15 = *(_QWORD *)v14 == (_QWORD)v8;
            v8 = v14;
          }
          while (!v15);
        }
        v8 = v14;
      }
      while (v14 != v5);
    }
  }
  return this;
}

uint64_t DNBBreakpointList::DisableAllBreakpoints(uint64_t this, MachProcess *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  v2 = (_QWORD *)(this + 8);
  v3 = *(_QWORD **)this;
  if (*(_QWORD *)this != this + 8)
  {
    do
    {
      this = MachProcess::DisableBreakpoint(a2, v3[7], 0);
      v5 = (_QWORD *)v3[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v3[2];
          v7 = *v6 == (_QWORD)v3;
          v3 = v6;
        }
        while (!v7);
      }
      v3 = v6;
    }
    while (v6 != v2);
  }
  return this;
}

uint64_t DNBBreakpointList::DisableAllWatchpoints(uint64_t this, MachProcess *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  v2 = (_QWORD *)(this + 8);
  v3 = *(_QWORD **)this;
  if (*(_QWORD *)this != this + 8)
  {
    do
    {
      this = MachProcess::DisableWatchpoint(a2, v3[7], 0);
      v5 = (_QWORD *)v3[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v3[2];
          v7 = *v6 == (_QWORD)v3;
          v3 = v6;
        }
        while (!v7);
      }
      v3 = v6;
    }
    while (v6 != v2);
  }
  return this;
}

void DNBBreakpointList::RemoveDisabled(DNBBreakpointList *this)
{
  char *v1;
  char *v2;
  uint64_t *v4;
  char *v5;
  char *v6;
  char *v7;
  BOOL v8;

  v2 = (char *)this + 8;
  v1 = *(char **)this;
  if (*(DNBBreakpointList **)this != (DNBBreakpointList *)((char *)this + 8))
  {
    do
    {
      v5 = (char *)*((_QWORD *)v1 + 1);
      if ((v1[64] & 1) != 0)
      {
        if (v5)
        {
          do
          {
            v7 = v5;
            v5 = *(char **)v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            v7 = (char *)*((_QWORD *)v1 + 2);
            v8 = *(_QWORD *)v7 == (_QWORD)v1;
            v1 = v7;
          }
          while (!v8);
        }
      }
      else
      {
        v6 = v1;
        if (v5)
        {
          do
          {
            v7 = v5;
            v5 = *(char **)v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            v7 = (char *)*((_QWORD *)v6 + 2);
            v8 = *(_QWORD *)v7 == (_QWORD)v6;
            v6 = v7;
          }
          while (!v8);
        }
        if (*(char **)this == v1)
          *(_QWORD *)this = v7;
        v4 = (uint64_t *)*((_QWORD *)this + 1);
        --*((_QWORD *)this + 2);
        std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v4, (uint64_t *)v1);
        operator delete(v1);
      }
      v1 = v7;
    }
    while (v7 != v2);
  }
}

uint64_t *std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t **v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v14 = (uint64_t **)v7[2];
    if (*v14 == v7)
      break;
    if (*((_BYTE *)v7 + 24))
    {
      v15 = (_QWORD *)*v7;
      if (!*v7)
        goto LABEL_40;
    }
    else
    {
      *((_BYTE *)v7 + 24) = 1;
      *((_BYTE *)v14 + 24) = 0;
      v17 = v14[1];
      v18 = (uint64_t *)*v17;
      v14[1] = (uint64_t *)*v17;
      if (v18)
        v18[2] = (uint64_t)v14;
      v17[2] = (uint64_t)v14[2];
      v14[2][*v14[2] != (_QWORD)v14] = (uint64_t)v17;
      *v17 = (uint64_t)v14;
      v14[2] = v17;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
      v15 = (_QWORD *)*v7;
      if (!*v7)
        goto LABEL_40;
    }
    if (!*((_BYTE *)v15 + 24))
    {
      v19 = (uint64_t *)v7[1];
      if (!v19)
        goto LABEL_64;
LABEL_63:
      if (*((_BYTE *)v19 + 24))
      {
LABEL_64:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v23 = v15[1];
        *v7 = v23;
        if (v23)
          *(_QWORD *)(v23 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v19 = v7;
      }
      else
      {
        v15 = v7;
      }
      v27 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v27 + 24);
      *(_BYTE *)(v27 + 24) = 1;
      *((_BYTE *)v19 + 24) = 1;
      v28 = *(uint64_t **)(v27 + 8);
      v29 = *v28;
      *(_QWORD *)(v27 + 8) = *v28;
      if (v29)
        *(_QWORD *)(v29 + 16) = v27;
      v28[2] = *(_QWORD *)(v27 + 16);
      *(_QWORD *)(*(_QWORD *)(v27 + 16) + 8 * (**(_QWORD **)(v27 + 16) != v27)) = v28;
      *v28 = v27;
      *(_QWORD *)(v27 + 16) = v28;
      return result;
    }
LABEL_40:
    v19 = (uint64_t *)v7[1];
    if (v19 && !*((_BYTE *)v19 + 24))
      goto LABEL_63;
    *((_BYTE *)v7 + 24) = 0;
    v12 = (uint64_t *)v7[2];
    if (v12 == result)
    {
      v12 = result;
LABEL_61:
      *((_BYTE *)v12 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v12 + 24))
      goto LABEL_61;
LABEL_26:
    v7 = *(uint64_t **)(v12[2] + 8 * (*(_QWORD *)v12[2] == (_QWORD)v12));
  }
  if (*((_BYTE *)v7 + 24))
  {
    v16 = (_QWORD *)*v7;
    if (!*v7)
      goto LABEL_51;
LABEL_50:
    if (!*((_BYTE *)v16 + 24))
      goto LABEL_67;
  }
  else
  {
    *((_BYTE *)v7 + 24) = 1;
    *((_BYTE *)v14 + 24) = 0;
    v20 = (uint64_t *)v7[1];
    *v14 = v20;
    if (v20)
      v20[2] = (uint64_t)v14;
    v7[2] = (uint64_t)v14[2];
    v14[2][*v14[2] != (_QWORD)v14] = (uint64_t)v7;
    v7[1] = (uint64_t)v14;
    v14[2] = v7;
    if (result == (uint64_t *)v14)
      result = v7;
    v7 = *v14;
    v16 = (_QWORD *)**v14;
    if (v16)
      goto LABEL_50;
  }
LABEL_51:
  v21 = (uint64_t *)v7[1];
  if (!v21 || *((_BYTE *)v21 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v12 = (uint64_t *)v7[2];
    if (*((_BYTE *)v12 + 24))
      v13 = v12 == result;
    else
      v13 = 1;
    if (v13)
      goto LABEL_61;
    goto LABEL_26;
  }
  if (v16 && !*((_BYTE *)v16 + 24))
  {
LABEL_67:
    v21 = v7;
  }
  else
  {
    *((_BYTE *)v21 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v22 = *v21;
    v7[1] = *v21;
    if (v22)
      *(_QWORD *)(v22 + 16) = v7;
    v21[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v21;
    *v21 = (uint64_t)v7;
    v7[2] = (uint64_t)v21;
    v16 = v7;
  }
  v24 = (uint64_t *)v21[2];
  *((_BYTE *)v21 + 24) = *((_BYTE *)v24 + 24);
  *((_BYTE *)v24 + 24) = 1;
  *((_BYTE *)v16 + 24) = 1;
  v25 = *v24;
  v26 = *(_QWORD *)(*v24 + 8);
  *v24 = v26;
  if (v26)
    *(_QWORD *)(v26 + 16) = v24;
  *(_QWORD *)(v25 + 16) = v24[2];
  *(_QWORD *)(v24[2] + 8 * (*(_QWORD *)v24[2] != (_QWORD)v24)) = v25;
  *(_QWORD *)(v25 + 8) = v24;
  v24[2] = v25;
  return result;
}

uint64_t kqueue_thread(void *a1)
{
  int v1;
  _opaque_pthread_t *v2;
  _opaque_pthread_t *v3;
  int ident;
  pid_t v5;
  int v6;
  _BOOL4 v7;
  int v8;
  int data;
  char *v10;
  const char *v11;
  int v12;
  int *v13;
  char *v14;
  int v15;
  int v16;
  const char *v17;
  int v19;
  kevent eventlist;
  int v21;
  sched_param v22;
  char __str[64];

  v1 = (int)a1;
  pthread_setname_np("kqueue thread");
  v21 = 0;
  v2 = pthread_self();
  if (!pthread_getschedparam(v2, &v21, &v22))
  {
    v22.sched_priority = 47;
    v3 = pthread_self();
    pthread_setschedparam(v3, v21, &v22);
  }
  do
  {
    while (kevent(v1, 0, 0, &eventlist, 1, 0) != -1)
    {
      if ((eventlist.flags & 0x4000) != 0)
      {
        data = eventlist.data;
        v10 = strerror(eventlist.data);
        if (DNBLogEnabled())
        {
          v11 = "Unknown error";
          if (v10)
            v11 = v10;
          _DNBLogError("Failed to initialize kqueue event: (%d): %s", data, v11);
        }
        return 0;
      }
      v19 = 0;
      ident = eventlist.ident;
      v5 = waitpid(eventlist.ident, &v19, 0);
      v6 = v19 & 0x7F;
      if (v6 == 127)
      {
        v8 = v19 >> 8;
        if (v19 >> 8 != 19 && DNBLogEnabledForAny(2))
          _DNBLogThreaded("waitpid (%i) -> STOPPED (signal = %i)", v5, v8);
      }
      else
      {
        if ((v19 & 0x7F) == 0)
        {
          v15 = BYTE1(v19);
          if (DNBLogEnabledForAny(2))
            _DNBLogThreaded("waitpid (%i) -> EXITED (status = %i)", v5, v15);
          v16 = eventlist.data;
          if ((eventlist.data & 0x20000) == 0)
            goto LABEL_26;
LABEL_32:
          v17 = "Terminated due to memory issue";
          goto LABEL_34;
        }
        if (ident < 0)
          ident = -ident;
        v7 = DNBLogEnabledForAny(2);
        if (v5 == ident)
        {
          if (v7)
            _DNBLogThreaded("waitpid (%i) -> SIGNALED and EXITED (signal = %i)", v5, v6);
          snprintf(__str, 0x40uLL, "Terminated due to signal %i", v6);
          DNBProcessSetExitInfo(v5, __str);
          v15 = 127;
          v16 = eventlist.data;
          if ((eventlist.data & 0x20000) != 0)
            goto LABEL_32;
LABEL_26:
          if ((v16 & 0x10000) == 0)
          {
            if ((v16 & 0x40000) != 0)
            {
              v17 = "Terminated due to code signing error";
              goto LABEL_34;
            }
LABEL_35:
            if (DNBLogEnabledForAny(2))
              _DNBLogThreaded("waitpid_process_thread (): setting exit status for pid = %i to %i", v5, v15);
            DNBProcessSetExitStatus(v5, v19);
            return 0;
          }
          v17 = "Terminated due to decrypt failure";
LABEL_34:
          DNBProcessSetExitInfo(v5, v17);
          goto LABEL_35;
        }
        if (v7)
          _DNBLogThreaded("waitpid (%i) -> SIGNALED (signal = %i)", v5, v6);
      }
    }
  }
  while (*__error() == 4);
  if (DNBLogEnabled())
  {
    v12 = *__error();
    v13 = __error();
    v14 = strerror(*v13);
    _DNBLogError("kqueue failed with error: (%d): %s", v12, v14);
  }
  return 0;
}

uint64_t DNBProcessSetExitInfo(int a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t *v6;
  MachProcess *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;

  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    return 0;
  v2 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v2)
    return 0;
  v3 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v4 = *(_DWORD *)(v2 + 32);
    v5 = v4 < a1;
    if (v4 >= a1)
      v6 = (uint64_t *)v2;
    else
      v6 = (uint64_t *)(v2 + 8);
    if (!v5)
      v3 = v2;
    v2 = *v6;
  }
  while (*v6);
  if (v3 == GetProcessMap(BOOL)::g_process_map_ptr + 8 || *(_DWORD *)(v3 + 32) > a1)
    return 0;
  v8 = *(MachProcess **)(v3 + 40);
  v9 = *(std::__shared_weak_count **)(v3 + 48);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    MachProcess::SetExitInfo(v8, a2);
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  else
  {
    MachProcess::SetExitInfo(v8, a2);
  }
  return 1;
}

uint64_t DNBProcessSetExitStatus(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t *v6;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;

  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    return 0;
  v2 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v2)
    return 0;
  v3 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v4 = *(_DWORD *)(v2 + 32);
    v5 = v4 < a1;
    if (v4 >= a1)
      v6 = (uint64_t *)v2;
    else
      v6 = (uint64_t *)(v2 + 8);
    if (!v5)
      v3 = v2;
    v2 = *v6;
  }
  while (*v6);
  if (v3 == GetProcessMap(BOOL)::g_process_map_ptr + 8 || *(_DWORD *)(v3 + 32) > a1)
    return 0;
  v8 = *(_QWORD *)(v3 + 40);
  v9 = *(std::__shared_weak_count **)(v3 + 48);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    *(_DWORD *)(v8 + 72) = a2;
    MachProcess::SetState(v8, 9u);
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  else
  {
    *(_DWORD *)(v8 + 72) = a2;
    MachProcess::SetState(v8, 9u);
  }
  return 1;
}

uint64_t DNBProcessLaunch(RNBContext *a1, const char *a2, const char **a3, const char **a4, const char *a5, const char *a6, const char *a7, const char *a8, BOOL a9, int a10, const char *a11, char *a12, size_t a13)
{
  BOOL v21;
  int *v22;
  stat v24;
  void *__p[2];

  if (DNBLogEnabledForAny(2))
    _DNBLogThreaded("%s(path='%s', argv = %p, envp = %p, working_dir=%s, stdin=%s, stdout=%s, stderr=%s, no-stdio=%i, launch_flavor = %u, disable_aslr = %d, err = %p, err_len = %llu) called...", "DNBProcessLaunch", a2, a3, a4, a5, a6, a7, a8, a9, *((_DWORD *)a1 + 76), a10, a12, a13);
  if (a12)
    v21 = a13 == 0;
  else
    v21 = 1;
  if (!v21)
    *a12 = 0;
  if (stat(a2, &v24) != -1)
    operator new();
  v22 = __error();
  strerror_r(*v22, (char *)__p, 0x100uLL);
  snprintf(a12, a13, "%s (%s)", (const char *)__p, a2);
  return 0;
}

uint64_t spawn_waitpid_thread(int a1)
{
  int v2;
  int v3;
  void *v4;
  int v5;
  int v6;
  uint64_t result;
  _opaque_pthread_t *ident;
  kevent changelist;
  pthread_t v10;

  v2 = kqueue();
  if (v2 == -1)
  {
    if (DNBLogEnabled())
      _DNBLogError("Could not get kqueue for pid = %i.", a1);
    v4 = (void *)a1;
  }
  else
  {
    v3 = v2;
    v10 = 0;
    v4 = (void *)a1;
    changelist.ident = a1;
    *(_QWORD *)&changelist.filter = 0x860000000001FFFBLL;
    changelist.data = 0;
    changelist.udata = 0;
    v5 = kevent(v2, &changelist, 1, 0, 0, 0);
    if (v5)
    {
      v6 = v5;
      if (DNBLogEnabled())
        _DNBLogError("Failed to register kqueue NOTE_EXIT event for pid %i, error: %d.", a1, v6);
    }
    else if (!pthread_create(&v10, 0, (void *(__cdecl *)(void *))kqueue_thread, (void *)v3))
    {
      ident = v10;
      return pthread_detach(ident);
    }
  }
  changelist.ident = 0;
  result = pthread_create((pthread_t *)&changelist, 0, (void *(__cdecl *)(void *))waitpid_thread, v4);
  if ((_DWORD)result)
    return result;
  ident = (_opaque_pthread_t *)changelist.ident;
  return pthread_detach(ident);
}

uint64_t AddProcessToMap(int a1, uint64_t *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t **v11;
  int v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t *v17;
  unint64_t v18;

  v4 = GetProcessMap(BOOL)::g_process_map_ptr;
  if (!GetProcessMap(BOOL)::g_process_map_ptr)
  {
    pthread_mutex_lock(&GetProcessMap(BOOL)::g_process_map_mutex);
    if (!GetProcessMap(BOOL)::g_process_map_ptr)
      operator new();
    pthread_mutex_unlock(&GetProcessMap(BOOL)::g_process_map_mutex);
    v4 = GetProcessMap(BOOL)::g_process_map_ptr;
    if (!GetProcessMap(BOOL)::g_process_map_ptr)
      return 0;
  }
  v6 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v10 = (uint64_t **)(v4 + 8);
  v9 = *(uint64_t **)(v4 + 8);
  if (v9)
  {
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v9;
        v12 = *((_DWORD *)v9 + 8);
        if (v12 <= a1)
          break;
        v9 = *v11;
        v10 = v11;
        if (!*v11)
          goto LABEL_15;
      }
      if (v12 >= a1)
        break;
      v9 = v11[1];
      if (!v9)
      {
        v10 = v11 + 1;
        goto LABEL_15;
      }
    }
    if (v5)
    {
      v17 = (unint64_t *)&v5->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  else
  {
    v11 = (uint64_t **)(v4 + 8);
LABEL_15:
    v13 = operator new(0x38uLL);
    v13[8] = a1;
    *((_QWORD *)v13 + 5) = v6;
    *((_QWORD *)v13 + 6) = v5;
    *(_QWORD *)v13 = 0;
    *((_QWORD *)v13 + 1) = 0;
    *((_QWORD *)v13 + 2) = v11;
    *v10 = (uint64_t *)v13;
    v14 = **(_QWORD **)v4;
    if (v14)
    {
      *(_QWORD *)v4 = v14;
      v15 = *v10;
    }
    else
    {
      v15 = (uint64_t *)v13;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v4 + 8), v15);
    ++*(_QWORD *)(v4 + 16);
  }
  return 1;
}

uint64_t DNBProcessGetPIDByName(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *__p[3];

  memset(__p, 0, sizeof(__p));
  if (GetAllInfosMatchingName(a1, __p) == 1)
  {
    v1 = *((unsigned int *)__p[0] + 10);
LABEL_4:
    operator delete(__p[0]);
    return v1;
  }
  v1 = 0;
  v2 = 0;
  if (__p[0])
    goto LABEL_4;
  return v2;
}

uint64_t GetAllInfosMatchingName(char *__s, _QWORD *a2)
{
  char *v2;
  const char *v3;
  char *v4;
  char *v6;
  size_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  char *v12;
  char *v13;
  BOOL v14;
  char *v15;
  const char *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v34;
  size_t v35;
  void *__p;
  void *v37;
  uint64_t v38;
  char buffer[1024];

  v2 = (char *)*a2;
  a2[1] = *a2;
  if (__s)
  {
    v3 = __s;
    v4 = v2;
    if (*__s)
    {
      v6 = strrchr(__s, 47);
      if (v6)
        v3 = v6 + 1;
      v7 = strlen(v3);
      __p = 0;
      v37 = 0;
      v38 = 0;
      v8 = DNBGetAllInfos((char **)&__p);
      if (v8)
      {
        v9 = v8;
        v10 = 0;
        v11 = 0;
        v35 = v7;
        do
        {
          v13 = (char *)__p + 648 * v10;
          if (v13[36])
            v14 = v13[36] == 5;
          else
            v14 = 1;
          if (v14 || strncasecmp(v3, v13 + 243, 0x10uLL))
            goto LABEL_10;
          if (v7 < 0x11)
          {
            v18 = (char *)a2[1];
            v25 = a2[2];
            if ((unint64_t)v18 >= v25)
            {
              v26 = (char *)*a2;
              v27 = 0x2C3F35BA781948B1 * ((uint64_t)&v18[-*a2] >> 3);
              v28 = v27 + 1;
              if ((unint64_t)(v27 + 1) > 0x6522C3F35BA781)
LABEL_57:
                abort();
              v29 = 0x2C3F35BA781948B1 * ((uint64_t)(v25 - (_QWORD)v26) >> 3);
              if (2 * v29 > v28)
                v28 = 2 * v29;
              if (v29 >= 0x329161F9ADD3C0)
                v23 = 0x6522C3F35BA781;
              else
                v23 = v28;
              if (v23)
              {
                if (v23 > 0x6522C3F35BA781)
LABEL_58:
                  std::__throw_bad_array_new_length[abi:nn180100]();
                v30 = (char *)operator new(648 * v23);
              }
              else
              {
                v30 = 0;
              }
              v34 = v30;
              v31 = &v30[648 * v27];
              memcpy(v31, v13, 0x288uLL);
              v32 = v31;
              if (v18 != v26)
              {
                do
                {
                  v18 -= 648;
                  v32 -= 648;
                  memcpy(v32, v18, 0x288uLL);
                }
                while (v18 != v26);
LABEL_45:
                v18 = (char *)*a2;
              }
LABEL_46:
              v12 = v31 + 648;
              *a2 = v32;
              a2[1] = v31 + 648;
              a2[2] = &v34[648 * v23];
              if (v18)
                operator delete(v18);
              v7 = v35;
              goto LABEL_9;
            }
          }
          else
          {
            if (proc_pidpath(*((_DWORD *)v13 + 10), buffer, 0x400u) < 1)
              goto LABEL_10;
            v15 = strrchr(buffer, 47);
            v16 = v15 ? v15 + 1 : buffer;
            if (strncasecmp(v3, v16, 0x400uLL))
              goto LABEL_10;
            v13 = (char *)__p + 648 * v10;
            v18 = (char *)a2[1];
            v17 = a2[2];
            if ((unint64_t)v18 >= v17)
            {
              v19 = (char *)*a2;
              v20 = 0x2C3F35BA781948B1 * ((uint64_t)&v18[-*a2] >> 3);
              v21 = v20 + 1;
              if ((unint64_t)(v20 + 1) > 0x6522C3F35BA781)
                goto LABEL_57;
              v22 = 0x2C3F35BA781948B1 * ((uint64_t)(v17 - (_QWORD)v19) >> 3);
              if (2 * v22 > v21)
                v21 = 2 * v22;
              if (v22 >= 0x329161F9ADD3C0)
                v23 = 0x6522C3F35BA781;
              else
                v23 = v21;
              if (v23)
              {
                if (v23 > 0x6522C3F35BA781)
                  goto LABEL_58;
                v24 = (char *)operator new(648 * v23);
              }
              else
              {
                v24 = 0;
              }
              v34 = v24;
              v31 = &v24[648 * v20];
              memcpy(v31, v13, 0x288uLL);
              v32 = v31;
              if (v18 != v19)
              {
                do
                {
                  v18 -= 648;
                  v32 -= 648;
                  memcpy(v32, v18, 0x288uLL);
                }
                while (v18 != v19);
                goto LABEL_45;
              }
              goto LABEL_46;
            }
          }
          memcpy(v18, v13, 0x288uLL);
          v12 = v18 + 648;
LABEL_9:
          a2[1] = v12;
LABEL_10:
          v10 = ++v11;
        }
        while (v9 > v11);
      }
      if (__p)
      {
        v37 = __p;
        operator delete(__p);
      }
      v2 = (char *)*a2;
      v4 = (char *)a2[1];
    }
  }
  else
  {
    v4 = v2;
  }
  return 0x2C3F35BA781948B1 * ((v4 - v2) >> 3);
}

uint64_t DNBProcessAttachByName(char *__s, uint64_t a2, uint64_t a3, _BYTE *a4, uint64_t a5)
{
  uint64_t AllInfosMatchingName;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  void *v14;
  const char *v15;
  void *__p[3];

  if (a4 && a5)
    *a4 = 0;
  memset(__p, 0, sizeof(__p));
  AllInfosMatchingName = GetAllInfosMatchingName(__s, __p);
  if (AllInfosMatchingName == 1)
  {
    v14 = __p[0];
    v12 = DNBProcessAttach(*((_DWORD *)__p[0] + 10), a2, a3, a4, a5);
LABEL_11:
    operator delete(v14);
    return v12;
  }
  v11 = AllInfosMatchingName;
  if (AllInfosMatchingName)
  {
    if (DNBLogEnabled())
      _DNBLogError("error: %llu processes match '%s':\n", v11, __s);
    v15 = (char *)__p[0] + 243;
    do
    {
      if (DNBLogEnabled())
        _DNBLogError("%6u - %s\n", *(_DWORD *)(v15 - 203), v15);
      v15 += 648;
      --v11;
    }
    while (v11);
  }
  else if (DNBLogEnabled())
  {
    _DNBLogError("error: no processes match '%s'\n", __s);
  }
  v12 = 0;
  result = 0;
  v14 = __p[0];
  if (__p[0])
    goto LABEL_11;
  return result;
}

uint64_t DNBProcessAttach(int a1, uint64_t a2, uint64_t a3, _BYTE *a4, uint64_t a5)
{
  BOOL v6;
  size_t v8;
  char v9[16];
  char v10[16];
  size_t v11;
  char v12;
  int v13[2];
  int v14;
  int v15;

  if (a4)
    v6 = a5 == 0;
  else
    v6 = 1;
  if (!v6)
    *a4 = 0;
  if (!getenv("LLDB_DEBUGSERVER_PATH"))
  {
    *(_QWORD *)v13 = 0xE00000001;
    v14 = 1;
    v15 = a1;
    v8 = 648;
    if (!sysctl(v13, 4u, &v11, &v8, 0, 0) && v8 && (v12 & 2) != 0)
    {
      if (communication_fd == -1)
      {
        fwrite("Trying to attach to a translated process with the native debugserver, exiting...\n", 0x51uLL, 1uLL, __stderrp);
        exit(1);
      }
      DNBProcessAttach(v10, communication_fd, v9, a1);
    }
  }
  v13[0] = 0;
  v11 = 4;
  if (sysctlbyname("sysctl.proc_translated", v13, &v11, 0, 0) == -1 || v13[0] != 1)
    operator new();
  return 0xFFFFFFFFLL;
}

BOOL DNBDebugserverIsTranslated(void)
{
  size_t v2;
  int v3;

  v3 = 0;
  v2 = 4;
  return sysctlbyname("sysctl.proc_translated", &v3, &v2, 0, 0) != -1 && v3 == 1;
}

uint64_t DNBProcessWaitForEvents(int a1, unsigned int a2, int a3, timespec *a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  pthread_mutex_t *v15;
  unint64_t *v16;
  unint64_t v17;

  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    return 0;
  v4 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v4)
    return 0;
  v5 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v6 = *(_DWORD *)(v4 + 32);
    v7 = v6 < a1;
    if (v6 >= a1)
      v8 = (uint64_t *)v4;
    else
      v8 = (uint64_t *)(v4 + 8);
    if (!v7)
      v5 = v4;
    v4 = *v8;
  }
  while (*v8);
  if (v5 == GetProcessMap(BOOL)::g_process_map_ptr + 8 || *(_DWORD *)(v5 + 32) > a1)
    return 0;
  v11 = *(_QWORD *)(v5 + 40);
  v12 = *(std::__shared_weak_count **)(v5 + 48);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = (pthread_mutex_t *)(v11 + 1288);
  if (a3)
  {
    v9 = PThreadEvent::WaitForSetEvents(v15, a2, a4);
    if (!v12)
      return v9;
  }
  else
  {
    v9 = PThreadEvent::WaitForEventsToReset(v15, a2, a4);
    if (!v12)
      return v9;
  }
  v16 = (unint64_t *)&v12->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return v9;
}

uint64_t DNBProcessGetState(int a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  BOOL v4;
  uint64_t *v5;
  uint64_t State;
  MachProcess *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;

  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    return 0;
  v1 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v1)
    return 0;
  v2 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v3 = *(_DWORD *)(v1 + 32);
    v4 = v3 < a1;
    if (v3 >= a1)
      v5 = (uint64_t *)v1;
    else
      v5 = (uint64_t *)(v1 + 8);
    if (!v4)
      v2 = v1;
    v1 = *v5;
  }
  while (*v5);
  if (v2 == GetProcessMap(BOOL)::g_process_map_ptr + 8 || *(_DWORD *)(v2 + 32) > a1)
    return 0;
  v8 = *(MachProcess **)(v2 + 40);
  v9 = *(std::__shared_weak_count **)(v2 + 48);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    State = MachProcess::GetState(v8);
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    return State;
  }
  return MachProcess::GetState(v8);
}

const char *DNBStateAsString(unsigned int a1)
{
  if (a1 > 0xA)
    return "nub_state_t ???";
  else
    return off_100060C80[a1];
}

void DNBProcessResetEvents(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;

  if (GetProcessMap(BOOL)::g_process_map_ptr)
  {
    v2 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
    if (v2)
    {
      v3 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
      do
      {
        v4 = *(_DWORD *)(v2 + 32);
        v5 = v4 < a1;
        if (v4 >= a1)
          v6 = (uint64_t *)v2;
        else
          v6 = (uint64_t *)(v2 + 8);
        if (!v5)
          v3 = v2;
        v2 = *v6;
      }
      while (*v6);
      if (v3 != GetProcessMap(BOOL)::g_process_map_ptr + 8 && *(_DWORD *)(v3 + 32) <= a1)
      {
        v7 = *(_QWORD *)(v3 + 40);
        v8 = *(std::__shared_weak_count **)(v3 + 48);
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
          PThreadEvent::ResetEvents((pthread_mutex_t *)(v7 + 1288), a2);
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        else
        {
          PThreadEvent::ResetEvents((pthread_mutex_t *)(v7 + 1288), a2);
        }
      }
    }
  }
}

uint64_t DNBGetAllInfos(char **a1)
{
  char *v2;
  char *v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  uint64_t result;
  size_t v9;
  int v10[2];
  int v11;

  v11 = 0;
  v9 = 0;
  *(_QWORD *)v10 = 0xE00000001;
  if (sysctl(v10, 3u, 0, &v9, 0, 0) < 0)
  {
    a1[1] = *a1;
    perror("sysctl (mib, miblen, NULL, &num_processes, NULL, 0)");
    return 0;
  }
  else
  {
    v2 = *a1;
    v3 = a1[1];
    v4 = 0x2C3F35BA781948B1 * ((v3 - *a1) >> 3);
    if (v9 / 0x288 <= v4)
    {
      if (v9 / 0x288 < v4)
      {
        v3 = &v2[648 * (v9 / 0x288)];
        a1[1] = v3;
      }
    }
    else
    {
      std::vector<kinfo_proc>::__append(a1, v9 / 0x288 - v4);
      v2 = *a1;
      v3 = a1[1];
    }
    v9 = v3 - v2;
    if (sysctl(v10, 3u, v2, &v9, 0, 0) < 0)
    {
      result = 0;
      a1[1] = *a1;
    }
    else
    {
      v5 = *a1;
      v6 = a1[1];
      v7 = 0x2C3F35BA781948B1 * ((v6 - *a1) >> 3);
      if (v9 / 0x288 <= v7)
      {
        if (v9 / 0x288 < v7)
        {
          v6 = &v5[648 * (v9 / 0x288)];
          a1[1] = v6;
        }
      }
      else
      {
        std::vector<kinfo_proc>::__append(a1, v9 / 0x288 - v7);
        v5 = *a1;
        v6 = a1[1];
      }
      return 0x2C3F35BA781948B1 * ((v6 - v5) >> 3);
    }
  }
  return result;
}

uint64_t DNBGetDyldProcessState@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t *v6;
  MachProcess *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (GetProcessMap(BOOL)::g_process_map_ptr)
  {
    v2 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
    if (v2)
    {
      v3 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
      do
      {
        v4 = *(_DWORD *)(v2 + 32);
        v5 = v4 < (int)result;
        if (v4 >= (int)result)
          v6 = (uint64_t *)v2;
        else
          v6 = (uint64_t *)(v2 + 8);
        if (!v5)
          v3 = v2;
        v2 = *v6;
      }
      while (*v6);
      if (v3 != GetProcessMap(BOOL)::g_process_map_ptr + 8 && *(_DWORD *)(v3 + 32) <= (int)result)
      {
        v7 = *(MachProcess **)(v3 + 40);
        v8 = *(_QWORD *)(v3 + 48);
        if (v8)
        {
          v9 = (unint64_t *)(v8 + 8);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
          MachProcess::GetDyldProcessState(v7);
        }
        MachProcess::GetDyldProcessState(v7);
      }
    }
  }
  *a2 = 0;
  a2[1] = 0;
  return result;
}

uint64_t DNBProcessAttachWait(RNBContext *a1, char *a2, int a3, timespec *a4, useconds_t a5, char *a6, size_t a7, unsigned int (*a8)(void *), void *a9)
{
  int v17;
  const __CFString *v18;
  const char *v19;
  uint64_t v20;
  MachProcess *v21;
  BOOL v22;
  uint64_t AllInfosMatchingName;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t i;
  _DWORD *v28;
  uint64_t v29;
  void *v30;
  int v31;
  RNBContext *v33;
  char *v34;
  size_t v35;
  void *v36;
  timeval __p;
  uint64_t v38;
  _QWORD v39[3];
  void *v40[2];
  __int128 v41;

  *(_OWORD *)v40 = 0u;
  v41 = 0u;
  memset(v39, 0, sizeof(v39));
  v17 = *((_DWORD *)a1 + 76);
  v18 = MachProcess::PrepareForAttach(a2, v17, 1, (uint64_t)v40);
  if (LODWORD(v40[0]))
  {
    if (DNBLogEnabled())
    {
      v19 = (const char *)DNBError::AsString((DNBError *)v40);
      _DNBLogError("Error in PrepareForAttach: %s", v19);
    }
    v20 = 0;
    goto LABEL_51;
  }
  v21 = (MachProcess *)v18;
  if (v18)
    v22 = 1;
  else
    v22 = a3 == 0;
  v35 = a7;
  if (v22)
    AllInfosMatchingName = 0;
  else
    AllInfosMatchingName = GetAllInfosMatchingName(a2, v39);
  v33 = a1;
  v34 = a6;
  if (DNBLogEnabledForAny(2))
    _DNBLogThreaded("Waiting for '%s' to appear...\n", a2);
  v36 = (void *)v39[0];
  v24 = v39[0] + 40;
  while (1)
  {
    if (v21)
    {
      v25 = MachProcess::CheckForProcess((uint64_t)v21, v17);
      if (v25)
      {
        v31 = v25;
LABEL_46:
        if (DNBLogEnabledForAny(2))
          _DNBLogThreaded("Attaching to %s with pid %i...\n", a2, v31);
        usleep(a5);
        v20 = DNBProcessAttach(v31, (uint64_t)a4, (uint64_t)v33 + 448, v34, v35);
        v30 = v36;
        goto LABEL_49;
      }
    }
    else
    {
      __p.tv_sec = 0;
      *(_QWORD *)&__p.tv_usec = 0;
      v38 = 0;
      v26 = GetAllInfosMatchingName(a2, &__p);
      if (v26)
      {
        for (i = 0; i != v26; ++i)
        {
          v31 = *(_DWORD *)(__p.tv_sec + 648 * i + 40);
          v28 = (_DWORD *)v24;
          v29 = AllInfosMatchingName;
          if (AllInfosMatchingName)
          {
            while (v31 != *v28)
            {
              v28 += 162;
              if (!--v29)
                goto LABEL_20;
            }
          }
          else
          {
LABEL_20:
            if (v31)
              goto LABEL_27;
          }
        }
      }
      v31 = 0;
LABEL_27:
      if (__p.tv_sec)
        operator delete((void *)__p.tv_sec);
      if (v31)
        goto LABEL_46;
    }
    if (a4)
    {
      gettimeofday(&__p, 0);
      if (__p.tv_sec > a4->tv_sec || __p.tv_sec >= a4->tv_sec && a4->tv_nsec < 1000 * __p.tv_usec)
        break;
    }
    if (a8 && a8(a9))
    {
      v30 = v36;
      if (DNBLogEnabledForAny(2))
        _DNBLogThreaded("DNBProcessAttachWait cancelled by should_cancel callback.");
      v20 = 0;
LABEL_49:
      MachProcess::CleanupAfterAttach(v21, v17, (DNBError *)((_DWORD)v20 != 0), (DNBError *)v40);
      if (!v30)
        goto LABEL_51;
      goto LABEL_50;
    }
    usleep(a5);
  }
  if (v34 && v35)
    snprintf(v34, v35, "operation timed out");
  v30 = v36;
  if (DNBLogEnabled())
    _DNBLogError("error: waiting for process '%s' timed out.\n", a2);
  v20 = 0;
  if (v36)
LABEL_50:
    operator delete(v30);
LABEL_51:
  if (SHIBYTE(v41) < 0)
    operator delete(v40[1]);
  return v20;
}

uint64_t DNBProcessDetach(int a1)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t *v6;
  uint64_t v7;
  std::__shared_weak_count *v9;
  MachProcess *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    return 0;
  v1 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v1)
    return 0;
  v3 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v4 = *(_DWORD *)(v1 + 32);
    v5 = v4 < a1;
    if (v4 >= a1)
      v6 = (uint64_t *)v1;
    else
      v6 = (uint64_t *)(v1 + 8);
    if (!v5)
      v3 = v1;
    v1 = *v6;
  }
  while (*v6);
  if (v3 == GetProcessMap(BOOL)::g_process_map_ptr + 8 || *(_DWORD *)(v3 + 32) > a1)
    return 0;
  v10 = *(MachProcess **)(v3 + 40);
  v9 = *(std::__shared_weak_count **)(v3 + 48);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (DNBLogEnabled())
    _DNBLogThreaded("Disabling breakpoints and watchpoints, and detaching from %d.", a1);
  MachProcess::DisableAllBreakpoints(v10, 1);
  MachProcess::DisableAllWatchpoints(v10, 1);
  v7 = MachProcess::Detach(v10);
  if (v9)
  {
    v13 = (unint64_t *)&v9->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v7;
}

uint64_t DNBProcessKill(int a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  BOOL v4;
  uint64_t *v5;
  uint64_t v6;
  MachProcess *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;

  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    return 0;
  v1 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v1)
    return 0;
  v2 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v3 = *(_DWORD *)(v1 + 32);
    v4 = v3 < a1;
    if (v3 >= a1)
      v5 = (uint64_t *)v1;
    else
      v5 = (uint64_t *)(v1 + 8);
    if (!v4)
      v2 = v1;
    v1 = *v5;
  }
  while (*v5);
  if (v2 == GetProcessMap(BOOL)::g_process_map_ptr + 8 || *(_DWORD *)(v2 + 32) > a1)
    return 0;
  v8 = *(MachProcess **)(v2 + 40);
  v9 = *(std::__shared_weak_count **)(v2 + 48);
  if (!v9)
    return MachProcess::Kill(v8, 0);
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v6 = MachProcess::Kill(v8, 0);
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  return v6;
}

BOOL DNBProcessSignal(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t *v6;
  _BOOL8 v7;
  MachProcess *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;

  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    return 0;
  v2 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v2)
    return 0;
  v3 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v4 = *(_DWORD *)(v2 + 32);
    v5 = v4 < a1;
    if (v4 >= a1)
      v6 = (uint64_t *)v2;
    else
      v6 = (uint64_t *)(v2 + 8);
    if (!v5)
      v3 = v2;
    v2 = *v6;
  }
  while (*v6);
  if (v3 == GetProcessMap(BOOL)::g_process_map_ptr + 8 || *(_DWORD *)(v3 + 32) > a1)
    return 0;
  v9 = *(MachProcess **)(v3 + 40);
  v10 = *(std::__shared_weak_count **)(v3 + 48);
  if (!v10)
    return MachProcess::Signal(v9, a2, 0);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  v7 = MachProcess::Signal(v9, a2, 0);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v7;
}

BOOL DNBProcessInterrupt(int a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  BOOL v4;
  uint64_t *v5;
  _BOOL8 v6;
  MachProcess *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;

  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    return 0;
  v1 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v1)
    return 0;
  v2 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v3 = *(_DWORD *)(v1 + 32);
    v4 = v3 < a1;
    if (v3 >= a1)
      v5 = (uint64_t *)v1;
    else
      v5 = (uint64_t *)(v1 + 8);
    if (!v4)
      v2 = v1;
    v1 = *v5;
  }
  while (*v5);
  if (v2 == GetProcessMap(BOOL)::g_process_map_ptr + 8 || *(_DWORD *)(v2 + 32) > a1)
    return 0;
  v8 = *(MachProcess **)(v2 + 40);
  v9 = *(std::__shared_weak_count **)(v2 + 48);
  if (!v9)
    return MachProcess::Interrupt(v8);
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v6 = MachProcess::Interrupt(v8);
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  return v6;
}

BOOL DNBProcessSendEvent(int a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t *v6;
  _BOOL8 v7;
  MachProcess *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  void *__p[2];
  __int128 v16;

  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    return 0;
  v2 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v2)
    return 0;
  v3 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v4 = *(_DWORD *)(v2 + 32);
    v5 = v4 < a1;
    if (v4 >= a1)
      v6 = (uint64_t *)v2;
    else
      v6 = (uint64_t *)(v2 + 8);
    if (!v5)
      v3 = v2;
    v2 = *v6;
  }
  while (*v6);
  if (v3 == GetProcessMap(BOOL)::g_process_map_ptr + 8 || *(_DWORD *)(v3 + 32) > a1)
    return 0;
  v9 = *(MachProcess **)(v3 + 40);
  v10 = *(std::__shared_weak_count **)(v3 + 48);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  *(_OWORD *)__p = 0u;
  v16 = 0u;
  v7 = MachProcess::SendEvent(v9, a2, (DNBError *)__p);
  if (SHIBYTE(v16) < 0)
    operator delete(__p[1]);
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v7;
}

BOOL DNBProcessGetExitStatus(int a1, int *a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t *v7;
  _BOOL8 v8;
  std::__shared_weak_count *v10;
  MachProcess *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int State;
  unint64_t *v15;
  unint64_t v16;

  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    return 0;
  v2 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v2)
    return 0;
  v4 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v5 = *(_DWORD *)(v2 + 32);
    v6 = v5 < a1;
    if (v5 >= a1)
      v7 = (uint64_t *)v2;
    else
      v7 = (uint64_t *)(v2 + 8);
    if (!v6)
      v4 = v2;
    v2 = *v7;
  }
  while (*v7);
  if (v4 == GetProcessMap(BOOL)::g_process_map_ptr + 8 || *(_DWORD *)(v4 + 32) > a1)
    return 0;
  v11 = *(MachProcess **)(v4 + 40);
  v10 = *(std::__shared_weak_count **)(v4 + 48);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  State = MachProcess::GetState(v11);
  v8 = State == 9;
  if (a2 && State == 9)
    *a2 = *((_DWORD *)v11 + 18);
  if (v10)
  {
    v15 = (unint64_t *)&v10->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v8;
}

_QWORD *DNBProcessGetExitInfo(int a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  BOOL v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    return 0;
  v1 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v1)
    return 0;
  v2 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v3 = *(_DWORD *)(v1 + 32);
    v4 = v3 < a1;
    if (v3 >= a1)
      v5 = (uint64_t *)v1;
    else
      v5 = (uint64_t *)(v1 + 8);
    if (!v4)
      v2 = v1;
    v1 = *v5;
  }
  while (*v5);
  if (v2 == GetProcessMap(BOOL)::g_process_map_ptr + 8 || *(_DWORD *)(v2 + 32) > a1)
    return 0;
  v8 = *(_QWORD *)(v2 + 40);
  v9 = *(std::__shared_weak_count **)(v2 + 48);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v6 = (_QWORD *)(v8 + 80);
  if (*(char *)(v8 + 103) < 0)
    v6 = (_QWORD *)*v6;
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v6;
}

uint64_t DNBThreadGetName(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t *v6;
  uint64_t Name;
  MachProcess *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;

  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    return 0;
  v2 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v2)
    return 0;
  v3 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v4 = *(_DWORD *)(v2 + 32);
    v5 = v4 < a1;
    if (v4 >= a1)
      v6 = (uint64_t *)v2;
    else
      v6 = (uint64_t *)(v2 + 8);
    if (!v5)
      v3 = v2;
    v2 = *v6;
  }
  while (*v6);
  if (v3 == GetProcessMap(BOOL)::g_process_map_ptr + 8 || *(_DWORD *)(v3 + 32) > a1)
    return 0;
  v9 = *(MachProcess **)(v3 + 40);
  v10 = *(std::__shared_weak_count **)(v3 + 48);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    Name = MachProcess::ThreadGetName(v9, a2);
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return Name;
  }
  return MachProcess::ThreadGetName(v9, a2);
}

BOOL DNBThreadGetIdentifierInfo(int a1, uint64_t a2, thread_identifier_info *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t *v7;
  _BOOL8 IdentifierInfo;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;

  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    return 0;
  v3 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v3)
    return 0;
  v4 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v5 = *(_DWORD *)(v3 + 32);
    v6 = v5 < a1;
    if (v5 >= a1)
      v7 = (uint64_t *)v3;
    else
      v7 = (uint64_t *)(v3 + 8);
    if (!v6)
      v4 = v3;
    v3 = *v7;
  }
  while (*v7);
  if (v4 == GetProcessMap(BOOL)::g_process_map_ptr + 8 || *(_DWORD *)(v4 + 32) > a1)
    return 0;
  v10 = *(_QWORD *)(v4 + 40);
  v11 = *(std::__shared_weak_count **)(v4 + 48);
  if (!v11)
    return MachThreadList::GetIdentifierInfo((MachThreadList *)(v10 + 968), a2, a3);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  IdentifierInfo = MachThreadList::GetIdentifierInfo((MachThreadList *)(v10 + 968), a2, a3);
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  return IdentifierInfo;
}

uint64_t DNBThreadGetState(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t *v6;
  uint64_t State;
  MachProcess *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;

  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    return 0;
  v2 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v2)
    return 0;
  v3 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v4 = *(_DWORD *)(v2 + 32);
    v5 = v4 < a1;
    if (v4 >= a1)
      v6 = (uint64_t *)v2;
    else
      v6 = (uint64_t *)(v2 + 8);
    if (!v5)
      v3 = v2;
    v2 = *v6;
  }
  while (*v6);
  if (v3 == GetProcessMap(BOOL)::g_process_map_ptr + 8 || *(_DWORD *)(v3 + 32) > a1)
    return 0;
  v9 = *(MachProcess **)(v3 + 40);
  v10 = *(std::__shared_weak_count **)(v3 + 48);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    State = MachProcess::ThreadGetState(v9, a2);
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return State;
  }
  return MachProcess::ThreadGetState(v9, a2);
}

double DNBGetGenealogyInfoForThread@<D0>(BOOL *a1@<X2>, int a2@<W0>, unint64_t a3@<X1>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  MachProcess *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  double result;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;

  *a4 = 0;
  a4[1] = 0;
  if (GetProcessMap(BOOL)::g_process_map_ptr)
  {
    v5 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
    if (v5)
    {
      v6 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
      do
      {
        v7 = *(_DWORD *)(v5 + 32);
        v8 = v7 < a2;
        if (v7 >= a2)
          v9 = (uint64_t *)v5;
        else
          v9 = (uint64_t *)(v5 + 8);
        if (!v8)
          v6 = v5;
        v5 = *v9;
      }
      while (*v9);
      if (v6 != GetProcessMap(BOOL)::g_process_map_ptr + 8 && *(_DWORD *)(v6 + 32) <= a2)
      {
        v10 = *(MachProcess **)(v6 + 40);
        v11 = *(std::__shared_weak_count **)(v6 + 48);
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldxr(p_shared_owners);
          while (__stxr(v13 + 1, p_shared_owners));
          MachProcess::GetGenealogyInfoForThread(v10, a1, a3, &v17);
          result = *(double *)&v17;
          *(_OWORD *)a4 = v17;
          v15 = (unint64_t *)&v11->__shared_owners_;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        else
        {
          MachProcess::GetGenealogyInfoForThread(v10, a1, a3, &v17);
          result = *(double *)&v17;
          *(_OWORD *)a4 = v17;
        }
      }
    }
  }
  return result;
}

double DNBGetGenealogyImageInfo@<D0>(int a1@<W0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t *v8;
  MachProcess *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  double result;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;

  *a3 = 0;
  a3[1] = 0;
  if (GetProcessMap(BOOL)::g_process_map_ptr)
  {
    v4 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
    if (v4)
    {
      v5 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
      do
      {
        v6 = *(_DWORD *)(v4 + 32);
        v7 = v6 < a1;
        if (v6 >= a1)
          v8 = (uint64_t *)v4;
        else
          v8 = (uint64_t *)(v4 + 8);
        if (!v7)
          v5 = v4;
        v4 = *v8;
      }
      while (*v8);
      if (v5 != GetProcessMap(BOOL)::g_process_map_ptr + 8 && *(_DWORD *)(v5 + 32) <= a1)
      {
        v9 = *(MachProcess **)(v5 + 40);
        v10 = *(std::__shared_weak_count **)(v5 + 48);
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldxr(p_shared_owners);
          while (__stxr(v12 + 1, p_shared_owners));
          MachProcess::GetGenealogyImageInfo(v9, a2, &v16);
          result = *(double *)&v16;
          *(_OWORD *)a3 = v16;
          v14 = (unint64_t *)&v10->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        else
        {
          MachProcess::GetGenealogyImageInfo(v9, a2, &v16);
          result = *(double *)&v16;
          *(_OWORD *)a3 = v16;
        }
      }
    }
  }
  return result;
}

void DNBGetRequestedQoSForThread(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  MachProcess *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;

  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    goto LABEL_12;
  v5 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v5)
    goto LABEL_12;
  v6 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a1;
    if (v7 >= a1)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != GetProcessMap(BOOL)::g_process_map_ptr + 8 && *(_DWORD *)(v6 + 32) <= a1)
  {
    v10 = *(MachProcess **)(v6 + 40);
    v11 = *(std::__shared_weak_count **)(v6 + 48);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      MachProcess::GetRequestedQoS(v10, a2, a3, a4, a5);
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      MachProcess::GetRequestedQoS(v10, a2, a3, a4, a5);
    }
  }
  else
  {
LABEL_12:
    *(_OWORD *)(a5 + 16) = 0u;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)a5 = 0u;
    *(_DWORD *)(a5 + 48) = -1;
  }
}

uint64_t DNBGetPThreadT(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t *v6;
  uint64_t PThreadT;
  MachProcess *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;

  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    return -1;
  v2 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v2)
    return -1;
  v3 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v4 = *(_DWORD *)(v2 + 32);
    v5 = v4 < a1;
    if (v4 >= a1)
      v6 = (uint64_t *)v2;
    else
      v6 = (uint64_t *)(v2 + 8);
    if (!v5)
      v3 = v2;
    v2 = *v6;
  }
  while (*v6);
  if (v3 == GetProcessMap(BOOL)::g_process_map_ptr + 8 || *(_DWORD *)(v3 + 32) > a1)
    return -1;
  v9 = *(MachProcess **)(v3 + 40);
  v10 = *(std::__shared_weak_count **)(v3 + 48);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    PThreadT = MachProcess::GetPThreadT(v9, a2);
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return PThreadT;
  }
  return MachProcess::GetPThreadT(v9, a2);
}

uint64_t DNBGetDispatchQueueT(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t *v6;
  uint64_t DispatchQueueT;
  MachProcess *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;

  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    return -1;
  v2 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v2)
    return -1;
  v3 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v4 = *(_DWORD *)(v2 + 32);
    v5 = v4 < a1;
    if (v4 >= a1)
      v6 = (uint64_t *)v2;
    else
      v6 = (uint64_t *)(v2 + 8);
    if (!v5)
      v3 = v2;
    v2 = *v6;
  }
  while (*v6);
  if (v3 == GetProcessMap(BOOL)::g_process_map_ptr + 8 || *(_DWORD *)(v3 + 32) > a1)
    return -1;
  v9 = *(MachProcess **)(v3 + 40);
  v10 = *(std::__shared_weak_count **)(v3 + 48);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    DispatchQueueT = MachProcess::GetDispatchQueueT(v9, a2);
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return DispatchQueueT;
  }
  return MachProcess::GetDispatchQueueT(v9, a2);
}

uint64_t DNBGetTSDAddressForThread(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t TSDAddressForThread;
  MachProcess *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;

  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    return -1;
  v5 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v5)
    return -1;
  v6 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a1;
    if (v7 >= a1)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 == GetProcessMap(BOOL)::g_process_map_ptr + 8 || *(_DWORD *)(v6 + 32) > a1)
    return -1;
  v12 = *(MachProcess **)(v6 + 40);
  v13 = *(std::__shared_weak_count **)(v6 + 48);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    TSDAddressForThread = MachProcess::GetTSDAddressForThread(v12, a2, a3, a4, a5);
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    return TSDAddressForThread;
  }
  return MachProcess::GetTSDAddressForThread(v12, a2, a3, a4, a5);
}

uint64_t DNBGetAllLoadedLibrariesInfos@<X0>(uint64_t result@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  int v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  MachProcess *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  if (GetProcessMap(BOOL)::g_process_map_ptr)
  {
    v3 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
    if (v3)
    {
      v5 = result;
      v6 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
      do
      {
        v7 = *(_DWORD *)(v3 + 32);
        v8 = v7 < (int)result;
        if (v7 >= (int)result)
          v9 = (uint64_t *)v3;
        else
          v9 = (uint64_t *)(v3 + 8);
        if (!v8)
          v6 = v3;
        v3 = *v9;
      }
      while (*v9);
      if (v6 != GetProcessMap(BOOL)::g_process_map_ptr + 8 && *(_DWORD *)(v6 + 32) <= (int)result)
      {
        v10 = *(MachProcess **)(v6 + 40);
        v11 = *(_QWORD *)(v6 + 48);
        if (v11)
        {
          v12 = (unint64_t *)(v11 + 8);
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
          MachProcess::GetAllLoadedLibrariesInfos(v10, v5, a2);
        }
        MachProcess::GetAllLoadedLibrariesInfos(v10, v5, a2);
      }
    }
  }
  *a3 = 0;
  a3[1] = 0;
  return result;
}

uint64_t DNBGetLibrariesInfoForAddresses@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  int v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  if (GetProcessMap(BOOL)::g_process_map_ptr)
  {
    v3 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
    if (v3)
    {
      v5 = result;
      v6 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
      do
      {
        v7 = *(_DWORD *)(v3 + 32);
        v8 = v7 < (int)result;
        if (v7 >= (int)result)
          v9 = (uint64_t *)v3;
        else
          v9 = (uint64_t *)(v3 + 8);
        if (!v8)
          v6 = v3;
        v3 = *v9;
      }
      while (*v9);
      if (v6 != GetProcessMap(BOOL)::g_process_map_ptr + 8 && *(_DWORD *)(v6 + 32) <= (int)result)
      {
        v10 = *(_QWORD *)(v6 + 40);
        v11 = *(_QWORD *)(v6 + 48);
        if (v11)
        {
          v12 = (unint64_t *)(v11 + 8);
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
          MachProcess::GetLibrariesInfoForAddresses(v10, v5, a2);
        }
        MachProcess::GetLibrariesInfoForAddresses(v10, v5, a2);
      }
    }
  }
  *a3 = 0;
  a3[1] = 0;
  return result;
}

uint64_t DNBGetSharedCacheInfo@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t *v6;
  MachProcess *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (GetProcessMap(BOOL)::g_process_map_ptr)
  {
    v2 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
    if (v2)
    {
      v3 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
      do
      {
        v4 = *(_DWORD *)(v2 + 32);
        v5 = v4 < (int)result;
        if (v4 >= (int)result)
          v6 = (uint64_t *)v2;
        else
          v6 = (uint64_t *)(v2 + 8);
        if (!v5)
          v3 = v2;
        v2 = *v6;
      }
      while (*v6);
      if (v3 != GetProcessMap(BOOL)::g_process_map_ptr + 8 && *(_DWORD *)(v3 + 32) <= (int)result)
      {
        v7 = *(MachProcess **)(v3 + 40);
        v8 = *(_QWORD *)(v3 + 48);
        if (v8)
        {
          v9 = (unint64_t *)(v8 + 8);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
          MachProcess::GetSharedCacheInfo(v7);
        }
        MachProcess::GetSharedCacheInfo(v7);
      }
    }
  }
  *a2 = 0;
  a2[1] = 0;
  return result;
}

BOOL DNBProcessResume(int a1, char *a2, size_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t *v10;
  _BOOL8 v11;
  std::__shared_weak_count *v13;
  MachProcess *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  int v17;
  unint64_t *v18;
  unint64_t v19;
  void *v20;
  void *v21;
  void *__p;

  if (DNBLogEnabledForAny(2))
    _DNBLogThreaded("%s(pid = %4.4x)", "DNBProcessResume", a1);
  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    return 0;
  v6 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v6)
    return 0;
  v7 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v8 = *(_DWORD *)(v6 + 32);
    v9 = v8 < a1;
    if (v8 >= a1)
      v10 = (uint64_t *)v6;
    else
      v10 = (uint64_t *)(v6 + 8);
    if (!v9)
      v7 = v6;
    v6 = *v10;
  }
  while (*v10);
  if (v7 == GetProcessMap(BOOL)::g_process_map_ptr + 8 || *(_DWORD *)(v7 + 32) > a1)
    return 0;
  v14 = *(MachProcess **)(v7 + 40);
  v13 = *(std::__shared_weak_count **)(v7 + 48);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  DNBThreadResumeActions::DNBThreadResumeActions((uint64_t)&v20, a2, a3);
  if (v20 == v21)
    v17 = 5;
  else
    v17 = 4;
  DNBThreadResumeActions::SetDefaultThreadActionIfNeeded((char **)&v20, v17, 0);
  v11 = MachProcess::Resume(v14, (char **)&v20);
  if (__p)
    operator delete(__p);
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  if (v13)
  {
    v18 = (unint64_t *)&v13->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return v11;
}

BOOL DNBBreakpointSet(int a1, unint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t *v8;
  _BOOL8 v9;
  uint64_t **v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    return 0;
  v4 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v4)
    return 0;
  v5 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v6 = *(_DWORD *)(v4 + 32);
    v7 = v6 < a1;
    if (v6 >= a1)
      v8 = (uint64_t *)v4;
    else
      v8 = (uint64_t *)(v4 + 8);
    if (!v7)
      v5 = v4;
    v4 = *v8;
  }
  while (*v8);
  if (v5 == GetProcessMap(BOOL)::g_process_map_ptr + 8 || *(_DWORD *)(v5 + 32) > a1)
    return 0;
  v11 = *(uint64_t ***)(v5 + 40);
  v12 = *(std::__shared_weak_count **)(v5 + 48);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v9 = MachProcess::CreateBreakpoint(v11, a2, a3, a4 != 0) != 0;
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return v9;
}

BOOL DNBBreakpointClear(int a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t *v6;
  _BOOL8 v7;
  MachProcess *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;

  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    return 0;
  v2 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v2)
    return 0;
  v3 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v4 = *(_DWORD *)(v2 + 32);
    v5 = v4 < a1;
    if (v4 >= a1)
      v6 = (uint64_t *)v2;
    else
      v6 = (uint64_t *)(v2 + 8);
    if (!v5)
      v3 = v2;
    v2 = *v6;
  }
  while (*v6);
  if (v3 == GetProcessMap(BOOL)::g_process_map_ptr + 8 || *(_DWORD *)(v3 + 32) > a1)
    return 0;
  v9 = *(MachProcess **)(v3 + 40);
  v10 = *(std::__shared_weak_count **)(v3 + 48);
  if (!v10)
    return MachProcess::DisableBreakpoint(v9, a2, 1);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  v7 = MachProcess::DisableBreakpoint(v9, a2, 1);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v7;
}

BOOL DNBWatchpointSet(int a1, unint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  _BOOL8 v10;
  uint64_t **v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    return 0;
  v5 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v5)
    return 0;
  v6 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a1;
    if (v7 >= a1)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 == GetProcessMap(BOOL)::g_process_map_ptr + 8 || *(_DWORD *)(v6 + 32) > a1)
    return 0;
  v12 = *(uint64_t ***)(v6 + 40);
  v13 = *(std::__shared_weak_count **)(v6 + 48);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v10 = MachProcess::CreateWatchpoint(v12, a2, a3, a4, a5 != 0) != 0;
  if (v13)
  {
    v16 = (unint64_t *)&v13->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return v10;
}

BOOL DNBWatchpointClear(int a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t *v6;
  _BOOL8 v7;
  MachProcess *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;

  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    return 0;
  v2 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v2)
    return 0;
  v3 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v4 = *(_DWORD *)(v2 + 32);
    v5 = v4 < a1;
    if (v4 >= a1)
      v6 = (uint64_t *)v2;
    else
      v6 = (uint64_t *)(v2 + 8);
    if (!v5)
      v3 = v2;
    v2 = *v6;
  }
  while (*v6);
  if (v3 == GetProcessMap(BOOL)::g_process_map_ptr + 8 || *(_DWORD *)(v3 + 32) > a1)
    return 0;
  v9 = *(MachProcess **)(v3 + 40);
  v10 = *(std::__shared_weak_count **)(v3 + 48);
  if (!v10)
    return MachProcess::DisableWatchpoint(v9, a2, 1);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  v7 = MachProcess::DisableWatchpoint(v9, a2, 1);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v7;
}

uint64_t DNBWatchpointGetNumSupportedHWP(int a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  BOOL v4;
  uint64_t *v5;
  uint64_t NumSupportedHardwareWatchpoints;
  MachThread ***v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;

  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    return 0;
  v1 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v1)
    return 0;
  v2 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v3 = *(_DWORD *)(v1 + 32);
    v4 = v3 < a1;
    if (v3 >= a1)
      v5 = (uint64_t *)v1;
    else
      v5 = (uint64_t *)(v1 + 8);
    if (!v4)
      v2 = v1;
    v1 = *v5;
  }
  while (*v5);
  if (v2 == GetProcessMap(BOOL)::g_process_map_ptr + 8 || *(_DWORD *)(v2 + 32) > a1)
    return 0;
  v8 = *(MachThread ****)(v2 + 40);
  v9 = *(std::__shared_weak_count **)(v2 + 48);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    NumSupportedHardwareWatchpoints = MachProcess::GetNumSupportedHardwareWatchpoints(v8);
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    return NumSupportedHardwareWatchpoints;
  }
  return MachProcess::GetNumSupportedHardwareWatchpoints(v8);
}

unint64_t DNBProcessMemoryRead(int a1, mach_vm_address_t a2, unint64_t a3, char *a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t *v8;
  unint64_t Memory;
  MachProcess *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;

  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    return 0;
  v4 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v4)
    return 0;
  v5 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v6 = *(_DWORD *)(v4 + 32);
    v7 = v6 < a1;
    if (v6 >= a1)
      v8 = (uint64_t *)v4;
    else
      v8 = (uint64_t *)(v4 + 8);
    if (!v7)
      v5 = v4;
    v4 = *v8;
  }
  while (*v8);
  if (v5 == GetProcessMap(BOOL)::g_process_map_ptr + 8 || *(_DWORD *)(v5 + 32) > a1)
    return 0;
  v11 = *(MachProcess **)(v5 + 40);
  v12 = *(std::__shared_weak_count **)(v5 + 48);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    Memory = MachProcess::ReadMemory(v11, a2, a3, a4);
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    return Memory;
  }
  return MachProcess::ReadMemory(v11, a2, a3, a4);
}

uint64_t DNBProcessMemoryReadInteger(int a1, mach_vm_address_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a3 <= 8 && DNBProcessMemoryRead(a1, a2, a3, (char *)&v7) == a3)
  {
    switch(a3)
    {
      case 1uLL:
        a4 = v7;
        break;
      case 2uLL:
        a4 = (unsigned __int16)v7;
        break;
      case 3uLL:
        a4 = v7 & 0xFFFFFF;
        break;
      case 4uLL:
      case 5uLL:
      case 6uLL:
      case 7uLL:
        a4 = v7;
        break;
      case 8uLL:
        a4 = v7;
        break;
      default:
        return a4;
    }
  }
  return a4;
}

uint64_t DNBProcessMemoryReadPointer(int a1, mach_vm_address_t a2)
{
  uint64_t v2;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t *v8;
  MachProcess *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  int CPUType;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;

  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    return 0;
  v2 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v2)
    return 0;
  v5 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v6 = *(_DWORD *)(v2 + 32);
    v7 = v6 < a1;
    if (v6 >= a1)
      v8 = (uint64_t *)v2;
    else
      v8 = (uint64_t *)(v2 + 8);
    if (!v7)
      v5 = v2;
    v2 = *v8;
  }
  while (*v8);
  if (v5 == GetProcessMap(BOOL)::g_process_map_ptr + 8 || *(_DWORD *)(v5 + 32) > a1)
    return 0;
  v9 = *(MachProcess **)(v5 + 40);
  v10 = *(std::__shared_weak_count **)(v5 + 48);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    CPUType = MachProcess::GetCPUType(v9);
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  else
  {
    CPUType = MachProcess::GetCPUType(v9);
  }
  if (!CPUType)
    return 0;
  v15 = (CPUType & 0x1000000) != 0 ? 8 : 4;
  if (DNBProcessMemoryRead(a1, a2, v15, (char *)&v17) != v15)
    return 0;
  if ((CPUType & 0x1000000) != 0)
    return v17;
  return v17;
}

uint64_t DNBProcessGetCPUType(int a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  BOOL v4;
  uint64_t *v5;
  uint64_t CPUType;
  MachProcess *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;

  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    return 0;
  v1 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v1)
    return 0;
  v2 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v3 = *(_DWORD *)(v1 + 32);
    v4 = v3 < a1;
    if (v3 >= a1)
      v5 = (uint64_t *)v1;
    else
      v5 = (uint64_t *)(v1 + 8);
    if (!v4)
      v2 = v1;
    v1 = *v5;
  }
  while (*v5);
  if (v2 == GetProcessMap(BOOL)::g_process_map_ptr + 8 || *(_DWORD *)(v2 + 32) > a1)
    return 0;
  v8 = *(MachProcess **)(v2 + 40);
  v9 = *(std::__shared_weak_count **)(v2 + 48);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    CPUType = MachProcess::GetCPUType(v8);
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    return CPUType;
  }
  return MachProcess::GetCPUType(v8);
}

uint64_t DNBProcessMemoryReadCString@<X0>(int a1@<W0>, mach_vm_address_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t result;
  size_t v7;
  char __s[256];

  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  __s[255] = 0;
  do
  {
    result = DNBProcessMemoryRead(a1, a2, 0xFFuLL, __s);
    if (!result)
      break;
    v7 = strlen(__s);
    result = (uint64_t)std::string::append(a3, __s, v7);
    a2 += v7;
  }
  while (v7 == 255);
  return result;
}

std::string *DNBProcessMemoryReadCStringFixed@<X0>(std::string *a1@<X8>)
{
  int v2;
  unint64_t v3;
  char *v4;
  mach_vm_address_t v5;
  std::string *result;
  uint64_t v7;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  v2 = __chkstk_darwin();
  v4 = (char *)&v7 - ((v3 + 16) & 0xFFFFFFFFFFFFFFF0);
  v4[v3] = 0;
  result = (std::string *)DNBProcessMemoryRead(v2, v5, v3, v4);
  if (result)
    return std::string::assign(a1, v4);
  return result;
}

unint64_t DNBProcessMemoryWrite(int a1, unint64_t a2, unint64_t a3, char *a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t *v8;
  unint64_t v9;
  MachProcess *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;

  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    return 0;
  v4 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v4)
    return 0;
  v5 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v6 = *(_DWORD *)(v4 + 32);
    v7 = v6 < a1;
    if (v6 >= a1)
      v8 = (uint64_t *)v4;
    else
      v8 = (uint64_t *)(v4 + 8);
    if (!v7)
      v5 = v4;
    v4 = *v8;
  }
  while (*v8);
  if (v5 == GetProcessMap(BOOL)::g_process_map_ptr + 8 || *(_DWORD *)(v5 + 32) > a1)
    return 0;
  v11 = *(MachProcess **)(v5 + 40);
  v12 = *(std::__shared_weak_count **)(v5 + 48);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v9 = MachProcess::WriteMemory(v11, a2, a3, a4);
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    return v9;
  }
  return MachProcess::WriteMemory(v11, a2, a3, a4);
}

mach_vm_address_t DNBProcessMemoryAllocate(int a1, mach_vm_size_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t *v7;
  mach_vm_address_t Memory;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;

  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    return 0;
  v3 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v3)
    return 0;
  v4 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v5 = *(_DWORD *)(v3 + 32);
    v6 = v5 < a1;
    if (v5 >= a1)
      v7 = (uint64_t *)v3;
    else
      v7 = (uint64_t *)(v3 + 8);
    if (!v6)
      v4 = v3;
    v3 = *v7;
  }
  while (*v7);
  if (v4 == GetProcessMap(BOOL)::g_process_map_ptr + 8 || *(_DWORD *)(v4 + 32) > a1)
    return 0;
  v10 = *(_QWORD *)(v4 + 40);
  v11 = *(std::__shared_weak_count **)(v4 + 48);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    Memory = MachTask::AllocateMemory((MachTask *)(v10 + 104), a2, a3);
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    return Memory;
  }
  return MachTask::AllocateMemory((MachTask *)(v10 + 104), a2, a3);
}

BOOL DNBProcessMemoryDeallocate(int a1, mach_vm_address_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t *v6;
  _BOOL8 v7;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;

  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    return 0;
  v2 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v2)
    return 0;
  v3 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v4 = *(_DWORD *)(v2 + 32);
    v5 = v4 < a1;
    if (v4 >= a1)
      v6 = (uint64_t *)v2;
    else
      v6 = (uint64_t *)(v2 + 8);
    if (!v5)
      v3 = v2;
    v2 = *v6;
  }
  while (*v6);
  if (v3 == GetProcessMap(BOOL)::g_process_map_ptr + 8 || *(_DWORD *)(v3 + 32) > a1)
    return 0;
  v9 = *(_QWORD *)(v3 + 40);
  v10 = *(std::__shared_weak_count **)(v3 + 48);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v7 = MachTask::DeallocateMemory((MachTask *)(v9 + 104), a2);
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return v7;
  }
  return MachTask::DeallocateMemory((MachTask *)(v9 + 104), a2);
}

uint64_t DNBProcessMemoryRegionInfo(int a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t *v7;
  uint64_t MemoryRegionInfo;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;

  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    return 0xFFFFFFFFLL;
  v3 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v3)
    return 0xFFFFFFFFLL;
  v4 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v5 = *(_DWORD *)(v3 + 32);
    v6 = v5 < a1;
    if (v5 >= a1)
      v7 = (uint64_t *)v3;
    else
      v7 = (uint64_t *)(v3 + 8);
    if (!v6)
      v4 = v3;
    v3 = *v7;
  }
  while (*v7);
  if (v4 == GetProcessMap(BOOL)::g_process_map_ptr + 8 || *(_DWORD *)(v4 + 32) > a1)
    return 0xFFFFFFFFLL;
  v10 = *(_QWORD *)(v4 + 40);
  v11 = *(std::__shared_weak_count **)(v4 + 48);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    MemoryRegionInfo = MachTask::GetMemoryRegionInfo(v10 + 104, a2, a3);
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    return MemoryRegionInfo;
  }
  return MachTask::GetMemoryRegionInfo(v10 + 104, a2, a3);
}

void DNBProcessGetProfileData(int a1@<W0>, __int16 a2@<W1>, task_basic_info *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;

  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    goto LABEL_12;
  v4 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v4)
    goto LABEL_12;
  v5 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v6 = *(_DWORD *)(v4 + 32);
    v7 = v6 < a1;
    if (v6 >= a1)
      v8 = (uint64_t *)v4;
    else
      v8 = (uint64_t *)(v4 + 8);
    if (!v7)
      v5 = v4;
    v4 = *v8;
  }
  while (*v8);
  if (v5 != GetProcessMap(BOOL)::g_process_map_ptr + 8 && *(_DWORD *)(v5 + 32) <= a1)
  {
    v9 = *(_QWORD *)(v5 + 40);
    v10 = *(std::__shared_weak_count **)(v5 + 48);
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
      MachTask::GetProfileData(v9 + 104, a2, a3, (_QWORD *)a4);
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    else
    {
      MachTask::GetProfileData(v9 + 104, a2, a3, (_QWORD *)a4);
    }
  }
  else
  {
LABEL_12:
    *(_BYTE *)(a4 + 23) = 0;
    *(_BYTE *)a4 = 0;
  }
}

uint64_t DNBProcessSetEnableAsyncProfiling(int a1, int a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t *v8;
  pthread_mutex_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;

  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    return 0;
  v4 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v4)
    return 0;
  v5 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v6 = *(_DWORD *)(v4 + 32);
    v7 = v6 < a1;
    if (v6 >= a1)
      v8 = (uint64_t *)v4;
    else
      v8 = (uint64_t *)(v4 + 8);
    if (!v7)
      v5 = v4;
    v4 = *v8;
  }
  while (*v8);
  if (v5 == GetProcessMap(BOOL)::g_process_map_ptr + 8 || *(_DWORD *)(v5 + 32) > a1)
    return 0;
  v10 = *(pthread_mutex_t **)(v5 + 40);
  v11 = *(std::__shared_weak_count **)(v5 + 48);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    MachProcess::SetEnableAsyncProfiling(v10, a2 != 0, a3, a4);
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    MachProcess::SetEnableAsyncProfiling(v10, a2 != 0, a3, a4);
  }
  return 1;
}

uint64_t DNBProcessGetNumThreads(int a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  BOOL v4;
  uint64_t *v5;
  uint64_t NumThreads;
  MachProcess *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;

  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    return 0;
  v1 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v1)
    return 0;
  v2 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v3 = *(_DWORD *)(v1 + 32);
    v4 = v3 < a1;
    if (v3 >= a1)
      v5 = (uint64_t *)v1;
    else
      v5 = (uint64_t *)(v1 + 8);
    if (!v4)
      v2 = v1;
    v1 = *v5;
  }
  while (*v5);
  if (v2 == GetProcessMap(BOOL)::g_process_map_ptr + 8 || *(_DWORD *)(v2 + 32) > a1)
    return 0;
  v8 = *(MachProcess **)(v2 + 40);
  v9 = *(std::__shared_weak_count **)(v2 + 48);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    NumThreads = MachProcess::GetNumThreads(v8);
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    return NumThreads;
  }
  return MachProcess::GetNumThreads(v8);
}

uint64_t DNBProcessGetCurrentThread(int a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  BOOL v4;
  uint64_t *v5;
  uint64_t CurrentThread;
  MachProcess *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;

  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    return 0;
  v1 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v1)
    return 0;
  v2 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v3 = *(_DWORD *)(v1 + 32);
    v4 = v3 < a1;
    if (v3 >= a1)
      v5 = (uint64_t *)v1;
    else
      v5 = (uint64_t *)(v1 + 8);
    if (!v4)
      v2 = v1;
    v1 = *v5;
  }
  while (*v5);
  if (v2 == GetProcessMap(BOOL)::g_process_map_ptr + 8 || *(_DWORD *)(v2 + 32) > a1)
    return 0;
  v8 = *(MachProcess **)(v2 + 40);
  v9 = *(std::__shared_weak_count **)(v2 + 48);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    CurrentThread = MachProcess::GetCurrentThread(v8);
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    return CurrentThread;
  }
  return MachProcess::GetCurrentThread(v8);
}

uint64_t DNBProcessSetCurrentThread(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t *v6;
  uint64_t v7;
  MachProcess *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;

  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    return 0;
  v2 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v2)
    return 0;
  v3 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v4 = *(_DWORD *)(v2 + 32);
    v5 = v4 < a1;
    if (v4 >= a1)
      v6 = (uint64_t *)v2;
    else
      v6 = (uint64_t *)(v2 + 8);
    if (!v5)
      v3 = v2;
    v2 = *v6;
  }
  while (*v6);
  if (v3 == GetProcessMap(BOOL)::g_process_map_ptr + 8 || *(_DWORD *)(v3 + 32) > a1)
    return 0;
  v9 = *(MachProcess **)(v3 + 40);
  v10 = *(std::__shared_weak_count **)(v3 + 48);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v7 = MachProcess::SetCurrentThread(v9, a2);
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return v7;
  }
  return MachProcess::SetCurrentThread(v9, a2);
}

uint64_t DNBThreadGetStopReason(int a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t *v7;
  uint64_t ThreadStoppedReason;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;

  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    return 0;
  v3 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v3)
    return 0;
  v4 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v5 = *(_DWORD *)(v3 + 32);
    v6 = v5 < a1;
    if (v5 >= a1)
      v7 = (uint64_t *)v3;
    else
      v7 = (uint64_t *)(v3 + 8);
    if (!v6)
      v4 = v3;
    v3 = *v7;
  }
  while (*v7);
  if (v4 == GetProcessMap(BOOL)::g_process_map_ptr + 8 || *(_DWORD *)(v4 + 32) > a1)
    return 0;
  v10 = *(_QWORD *)(v4 + 40);
  v11 = *(std::__shared_weak_count **)(v4 + 48);
  if (!v11)
    return MachProcess::GetThreadStoppedReason(v10, a2, a3);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  ThreadStoppedReason = MachProcess::GetThreadStoppedReason(v10, a2, a3);
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  return ThreadStoppedReason;
}

char *DNBThreadGetInfo(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t *v6;
  char *ThreadInfo;
  MachProcess *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;

  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    return 0;
  v2 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v2)
    return 0;
  v3 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v4 = *(_DWORD *)(v2 + 32);
    v5 = v4 < a1;
    if (v4 >= a1)
      v6 = (uint64_t *)v2;
    else
      v6 = (uint64_t *)(v2 + 8);
    if (!v5)
      v3 = v2;
    v2 = *v6;
  }
  while (*v6);
  if (v3 == GetProcessMap(BOOL)::g_process_map_ptr + 8 || *(_DWORD *)(v3 + 32) > a1)
    return 0;
  v9 = *(MachProcess **)(v3 + 40);
  v10 = *(std::__shared_weak_count **)(v3 + 48);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    ThreadInfo = MachProcess::GetThreadInfo(v9, a2);
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return ThreadInfo;
  }
  return MachProcess::GetThreadInfo(v9, a2);
}

uint64_t DNBProcessGetThreadAtIndex(int a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t *v6;
  uint64_t ThreadAtIndex;
  MachProcess *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;

  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    return 0;
  v2 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v2)
    return 0;
  v3 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v4 = *(_DWORD *)(v2 + 32);
    v5 = v4 < a1;
    if (v4 >= a1)
      v6 = (uint64_t *)v2;
    else
      v6 = (uint64_t *)(v2 + 8);
    if (!v5)
      v3 = v2;
    v2 = *v6;
  }
  while (*v6);
  if (v3 == GetProcessMap(BOOL)::g_process_map_ptr + 8 || *(_DWORD *)(v3 + 32) > a1)
    return 0;
  v9 = *(MachProcess **)(v3 + 40);
  v10 = *(std::__shared_weak_count **)(v3 + 48);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    ThreadAtIndex = MachProcess::GetThreadAtIndex(v9, a2);
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return ThreadAtIndex;
  }
  return MachProcess::GetThreadAtIndex(v9, a2);
}

BOOL DNBProcessSyncThreadState(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t *v6;
  _BOOL8 v7;
  MachProcess *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;

  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    return 0;
  v2 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v2)
    return 0;
  v3 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v4 = *(_DWORD *)(v2 + 32);
    v5 = v4 < a1;
    if (v4 >= a1)
      v6 = (uint64_t *)v2;
    else
      v6 = (uint64_t *)(v2 + 8);
    if (!v5)
      v3 = v2;
    v2 = *v6;
  }
  while (*v6);
  if (v3 == GetProcessMap(BOOL)::g_process_map_ptr + 8 || *(_DWORD *)(v3 + 32) > a1)
    return 0;
  v9 = *(MachProcess **)(v3 + 40);
  v10 = *(std::__shared_weak_count **)(v3 + 48);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v7 = MachProcess::SyncThreadState(v9, a2);
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return v7;
  }
  return MachProcess::SyncThreadState(v9, a2);
}

uint64_t DNBProcessGetSharedLibraryInfoAddress(int a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  BOOL v4;
  uint64_t *v5;
  uint64_t DYLDAllImageInfosAddress;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *__p[2];
  __int128 v15;

  *(_OWORD *)__p = 0u;
  v15 = 0u;
  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    return -1;
  v1 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v1)
    return -1;
  v2 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v3 = *(_DWORD *)(v1 + 32);
    v4 = v3 < a1;
    if (v3 >= a1)
      v5 = (uint64_t *)v1;
    else
      v5 = (uint64_t *)(v1 + 8);
    if (!v4)
      v2 = v1;
    v1 = *v5;
  }
  while (*v5);
  if (v2 == GetProcessMap(BOOL)::g_process_map_ptr + 8 || *(_DWORD *)(v2 + 32) > a1)
    return -1;
  v8 = *(_QWORD *)(v2 + 40);
  v9 = *(std::__shared_weak_count **)(v2 + 48);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  DYLDAllImageInfosAddress = MachTask::GetDYLDAllImageInfosAddress((MachTask *)(v8 + 104), (DNBError *)__p);
  if (SHIBYTE(v15) < 0)
    operator delete(__p[1]);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return DYLDAllImageInfosAddress;
}

uint64_t DNBThreadGetRegisterValueByID(int a1, uint64_t a2, int a3, int a4, void *a5)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t RegisterValue;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  bzero(a5, 0x88uLL);
  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    return 0;
  v7 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v7)
    return 0;
  v8 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v9 = *(_DWORD *)(v7 + 32);
    v10 = v9 < a1;
    if (v9 >= a1)
      v11 = (uint64_t *)v7;
    else
      v11 = (uint64_t *)(v7 + 8);
    if (!v10)
      v8 = v7;
    v7 = *v11;
  }
  while (*v11);
  if (v8 == GetProcessMap(BOOL)::g_process_map_ptr + 8 || *(_DWORD *)(v8 + 32) > a1)
    return 0;
  v14 = *(_QWORD *)(v8 + 40);
  v15 = *(std::__shared_weak_count **)(v8 + 48);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  if (a2)
  {
    RegisterValue = MachProcess::GetRegisterValue(v14, a2);
    if (!v15)
      return RegisterValue;
  }
  else
  {
    RegisterValue = 0;
    if (!v15)
      return RegisterValue;
  }
  v18 = (unint64_t *)&v15->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  return RegisterValue;
}

uint64_t DNBThreadSetRegisterValueByID(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;

  if (!a2)
    return 0;
  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    return 0;
  v2 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v2)
    return 0;
  v3 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v4 = *(_DWORD *)(v2 + 32);
    v5 = v4 < a1;
    if (v4 >= a1)
      v6 = (uint64_t *)v2;
    else
      v6 = (uint64_t *)(v2 + 8);
    if (!v5)
      v3 = v2;
    v2 = *v6;
  }
  while (*v6);
  if (v3 == GetProcessMap(BOOL)::g_process_map_ptr + 8 || *(_DWORD *)(v3 + 32) > a1)
    return 0;
  v9 = *(_QWORD *)(v3 + 40);
  v10 = *(std::__shared_weak_count **)(v3 + 48);
  if (!v10)
    return MachProcess::SetRegisterValue(v9, a2);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  v7 = MachProcess::SetRegisterValue(v9, a2);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v7;
}

uint64_t DNBThreadGetRegisterContext(int a1, uint64_t a2, void *a3, size_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  uint64_t RegisterContext;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    goto LABEL_12;
  v4 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v4)
    goto LABEL_12;
  v5 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v6 = *(_DWORD *)(v4 + 32);
    v7 = v6 < a1;
    if (v6 >= a1)
      v8 = (uint64_t *)v4;
    else
      v8 = (uint64_t *)(v4 + 8);
    if (!v7)
      v5 = v4;
    v4 = *v8;
  }
  while (*v8);
  if (v5 == GetProcessMap(BOOL)::g_process_map_ptr + 8 || *(_DWORD *)(v5 + 32) > a1)
  {
LABEL_12:
    v9 = 0;
    goto LABEL_13;
  }
  v14 = *(_QWORD *)(v5 + 40);
  v9 = *(std::__shared_weak_count **)(v5 + 48);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  if (!a2)
  {
LABEL_13:
    bzero(a3, a4);
    RegisterContext = 0;
    if (!v9)
      return RegisterContext;
    goto LABEL_14;
  }
  RegisterContext = MachThreadList::GetRegisterContext((MachThreadList *)(v14 + 968), a2, a3);
  if (!v9)
    return RegisterContext;
LABEL_14:
  v11 = (unint64_t *)&v9->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  return RegisterContext;
}

uint64_t DNBThreadSetRegisterContext(int a1, uint64_t a2, const void *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    return 0;
  v3 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v3)
    return 0;
  v4 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v5 = *(_DWORD *)(v3 + 32);
    v6 = v5 < a1;
    if (v5 >= a1)
      v7 = (uint64_t *)v3;
    else
      v7 = (uint64_t *)(v3 + 8);
    if (!v6)
      v4 = v3;
    v3 = *v7;
  }
  while (*v7);
  if (v4 == GetProcessMap(BOOL)::g_process_map_ptr + 8 || *(_DWORD *)(v4 + 32) > a1)
    return 0;
  v10 = *(_QWORD *)(v4 + 40);
  v11 = *(std::__shared_weak_count **)(v4 + 48);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  if (a2)
  {
    v8 = MachThreadList::SetRegisterContext((MachThreadList *)(v10 + 968), a2, a3);
    if (!v11)
      return v8;
  }
  else
  {
    v8 = 0;
    if (!v11)
      return v8;
  }
  v14 = (unint64_t *)&v11->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  return v8;
}

uint64_t DNBThreadSaveRegisterState(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;

  if (!a2)
    return 0;
  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    return 0;
  v2 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v2)
    return 0;
  v3 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v4 = *(_DWORD *)(v2 + 32);
    v5 = v4 < a1;
    if (v4 >= a1)
      v6 = (uint64_t *)v2;
    else
      v6 = (uint64_t *)(v2 + 8);
    if (!v5)
      v3 = v2;
    v2 = *v6;
  }
  while (*v6);
  if (v3 == GetProcessMap(BOOL)::g_process_map_ptr + 8 || *(_DWORD *)(v3 + 32) > a1)
    return 0;
  v9 = *(_QWORD *)(v3 + 40);
  v10 = *(std::__shared_weak_count **)(v3 + 48);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v7 = MachThreadList::SaveRegisterState((MachThreadList *)(v9 + 968), a2);
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return v7;
  }
  return MachThreadList::SaveRegisterState((MachThreadList *)(v9 + 968), a2);
}

uint64_t DNBThreadRestoreRegisterState(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;

  if (!a2)
    return 0;
  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    return 0;
  v2 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v2)
    return 0;
  v3 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v4 = *(_DWORD *)(v2 + 32);
    v5 = v4 < a1;
    if (v4 >= a1)
      v6 = (uint64_t *)v2;
    else
      v6 = (uint64_t *)(v2 + 8);
    if (!v5)
      v3 = v2;
    v2 = *v6;
  }
  while (*v6);
  if (v3 == GetProcessMap(BOOL)::g_process_map_ptr + 8 || *(_DWORD *)(v3 + 32) > a1)
    return 0;
  v9 = *(_QWORD *)(v3 + 40);
  v10 = *(std::__shared_weak_count **)(v3 + 48);
  if (!v10)
    return MachThreadList::RestoreRegisterState((MachThreadList *)(v9 + 968), a2);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  v7 = MachThreadList::RestoreRegisterState((MachThreadList *)(v9 + 968), a2);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v7;
}

size_t DNBProcessGetAvailableSTDOUT(int a1, char *a2, size_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t *v7;
  size_t AvailableSTDOUT;
  MachProcess *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;

  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    return 0;
  v3 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v3)
    return 0;
  v4 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v5 = *(_DWORD *)(v3 + 32);
    v6 = v5 < a1;
    if (v5 >= a1)
      v7 = (uint64_t *)v3;
    else
      v7 = (uint64_t *)(v3 + 8);
    if (!v6)
      v4 = v3;
    v3 = *v7;
  }
  while (*v7);
  if (v4 == GetProcessMap(BOOL)::g_process_map_ptr + 8 || *(_DWORD *)(v4 + 32) > a1)
    return 0;
  v10 = *(MachProcess **)(v4 + 40);
  v11 = *(std::__shared_weak_count **)(v4 + 48);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    AvailableSTDOUT = MachProcess::GetAvailableSTDOUT(v10, a2, a3);
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    return AvailableSTDOUT;
  }
  return MachProcess::GetAvailableSTDOUT(v10, a2, a3);
}

uint64_t DNBProcessGetAvailableSTDERR(int a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t *v6;
  uint64_t AvailableSTDERR;
  MachProcess *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;

  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    return 0;
  v2 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v2)
    return 0;
  v3 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v4 = *(_DWORD *)(v2 + 32);
    v5 = v4 < a1;
    if (v4 >= a1)
      v6 = (uint64_t *)v2;
    else
      v6 = (uint64_t *)(v2 + 8);
    if (!v5)
      v3 = v2;
    v2 = *v6;
  }
  while (*v6);
  if (v3 == GetProcessMap(BOOL)::g_process_map_ptr + 8 || *(_DWORD *)(v3 + 32) > a1)
    return 0;
  v9 = *(MachProcess **)(v3 + 40);
  v10 = *(std::__shared_weak_count **)(v3 + 48);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    AvailableSTDERR = MachProcess::GetAvailableSTDERR(v9, a2);
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return AvailableSTDERR;
  }
  return MachProcess::GetAvailableSTDERR(v9, a2);
}

size_t DNBProcessGetAvailableProfileData(int a1, char *a2, size_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t *v7;
  size_t AsyncProfileData;
  MachProcess *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;

  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    return 0;
  v3 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v3)
    return 0;
  v4 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v5 = *(_DWORD *)(v3 + 32);
    v6 = v5 < a1;
    if (v5 >= a1)
      v7 = (uint64_t *)v3;
    else
      v7 = (uint64_t *)(v3 + 8);
    if (!v6)
      v4 = v3;
    v3 = *v7;
  }
  while (*v7);
  if (v4 == GetProcessMap(BOOL)::g_process_map_ptr + 8 || *(_DWORD *)(v4 + 32) > a1)
    return 0;
  v10 = *(MachProcess **)(v4 + 40);
  v11 = *(std::__shared_weak_count **)(v4 + 48);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    AsyncProfileData = MachProcess::GetAsyncProfileData(v10, a2, a3);
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    return AsyncProfileData;
  }
  return MachProcess::GetAsyncProfileData(v10, a2, a3);
}

uint64_t DNBProcessGetStopCount(int a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  BOOL v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;

  if (!GetProcessMap(BOOL)::g_process_map_ptr)
    return 0;
  v1 = *(_QWORD *)(GetProcessMap(BOOL)::g_process_map_ptr + 8);
  if (!v1)
    return 0;
  v2 = GetProcessMap(BOOL)::g_process_map_ptr + 8;
  do
  {
    v3 = *(_DWORD *)(v1 + 32);
    v4 = v3 < a1;
    if (v3 >= a1)
      v5 = (uint64_t *)v1;
    else
      v5 = (uint64_t *)(v1 + 8);
    if (!v4)
      v2 = v1;
    v1 = *v5;
  }
  while (*v5);
  if (v2 != GetProcessMap(BOOL)::g_process_map_ptr + 8 && *(_DWORD *)(v2 + 32) <= a1)
  {
    v8 = *(_QWORD *)(v2 + 40);
    v9 = *(std::__shared_weak_count **)(v2 + 48);
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      v6 = *(_DWORD *)(v8 + 444);
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    else
    {
      return *(unsigned int *)(v8 + 444);
    }
  }
  else
  {
    return 0;
  }
  return v6;
}

BOOL DNBResolveExecutablePath(const char *a1, char *a2, size_t a3)
{
  std::string::size_type size;
  __CFBundle *v7;
  __CFBundle *v8;
  int v9;
  _BOOL8 v10;
  size_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  std::string *v17;
  std::string *v18;
  std::string::size_type v19;
  stat v20;
  stat v21;
  std::string v22;
  char __source[1024];

  if (!a1 || !*a1)
    return 0;
  memset(&v22, 0, sizeof(v22));
  CFString::GlobPath(a1, (uint64_t)&v22);
  size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v22.__r_.__value_.__l.__size_;
  if (!size)
    std::string::assign(&v22, a1);
  if (stat(a1, &v21) || (v21.st_mode & 0xF000) != 0x4000)
    goto LABEL_15;
  CFBundle::CFBundle((CFBundle *)__source, a1);
  v7 = CFBundle::CopyExecutableURL((CFBundle *)__source);
  if (!v7 || (v8 = v7, v9 = CFURLGetFileSystemRepresentation(v7, 1u, (UInt8 *)a2, a3), CFRelease(v8), !v9))
  {
    CFBundle::~CFBundle((CFBundle *)__source);
LABEL_15:
    if (realpath_DARWIN_EXTSN(a1, __source))
    {
      strlcpy(a2, __source, a3);
      v11 = strlen(a2) + 1;
LABEL_17:
      v10 = v11 < a3;
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_18;
    }
    else
    {
      v13 = getenv("PATH");
      if (v13)
      {
        v14 = v13;
        while (*v14)
        {
          v15 = strchr(v14, 58);
          if (v15)
          {
            v16 = v15;
            if (v15 <= v14)
              break;
            std::string::assign(&v22, v14, v15 - v14);
            v14 = v16 + 1;
          }
          else
          {
            std::string::assign(&v22, v14);
            v14 = 0;
          }
          std::string::push_back(&v22, 47);
          std::string::append(&v22, a1);
          if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v17 = &v22;
          else
            v17 = (std::string *)v22.__r_.__value_.__r.__words[0];
          if (!stat((const char *)v17, &v20))
          {
            if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v18 = &v22;
            else
              v18 = (std::string *)v22.__r_.__value_.__r.__words[0];
            strlcpy(a2, (const char *)v18, a3);
            v19 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
            if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v19 = v22.__r_.__value_.__l.__size_;
            v11 = v19 + 1;
            goto LABEL_17;
          }
          if (!v14)
            break;
        }
      }
      v10 = 0;
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_18;
    }
    return v10;
  }
  CFBundle::~CFBundle((CFBundle *)__source);
  v10 = 1;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
LABEL_18:
    operator delete(v22.__r_.__value_.__l.__data_);
  return v10;
}

double DNBInitialize(void)
{
  _BOOL8 v0;

  v0 = DNBLogEnabledForAny(2);
  if (v0)
    _DNBLogThreaded("DNBInitialize ()");
  return DNBArchMachARM64::Initialize((DNBArchMachARM64 *)v0);
}

const char *DNBSetArchitecture(const char *result)
{
  const char *v1;
  uint64_t v2;
  int v3;

  if (result)
  {
    v1 = result;
    if (!*result)
      return 0;
    if (!strcasecmp(result, "i386"))
    {
      v2 = 7;
      v3 = 0;
    }
    else if (!strcasecmp(v1, "x86_64"))
    {
      v2 = 16777223;
      v3 = 3;
    }
    else if (!strcasecmp(v1, "x86_64h"))
    {
      v2 = 16777223;
      v3 = 8;
    }
    else if (!strncmp(v1, "arm64_32", 8uLL) || !strncmp(v1, "aarch64_32", 0xAuLL))
    {
      v2 = 33554444;
      v3 = 0;
    }
    else if (!strncmp(v1, "arm64e", 6uLL))
    {
      v2 = 16777228;
      v3 = 2;
    }
    else if (!strncmp(v1, "arm64", 5uLL) || !strncmp(v1, "aarch64", 7uLL))
    {
      v2 = 16777228;
      v3 = 0;
    }
    else if (!strncmp(v1, "armv8", 5uLL))
    {
      v2 = 16777228;
      v3 = 1;
    }
    else if (!strncmp(v1, "armv7em", 7uLL))
    {
      v2 = 12;
      v3 = 16;
    }
    else if (!strncmp(v1, "armv7m", 6uLL))
    {
      v2 = 12;
      v3 = 15;
    }
    else if (!strncmp(v1, "armv7k", 6uLL))
    {
      v2 = 12;
      v3 = 12;
    }
    else if (!strncmp(v1, "armv7s", 6uLL))
    {
      v2 = 12;
      v3 = 11;
    }
    else if (!strncmp(v1, "armv7", 5uLL))
    {
      v2 = 12;
      v3 = 9;
    }
    else if (!strncmp(v1, "armv6m", 6uLL))
    {
      v2 = 12;
      v3 = 14;
    }
    else if (!strncmp(v1, "armv6", 5uLL))
    {
      v2 = 12;
      v3 = 6;
    }
    else if (!strncmp(v1, "armv5", 5uLL))
    {
      v2 = 12;
      v3 = 7;
    }
    else if (!strncmp(v1, "armv4t", 6uLL))
    {
      v2 = 12;
      v3 = 5;
    }
    else
    {
      if (strncmp(v1, "arm", 3uLL))
        return 0;
      v2 = 12;
      v3 = 0;
    }
    return (const char *)DNBArchProtocol::SetArchitecture((DNBArchProtocol *)v2, v3);
  }
  return result;
}

BOOL DNBGetAddressingBits(unsigned int *a1)
{
  unint64_t v2;
  int v3;
  char v5;
  char **v6;
  char *v7;

  v2 = atomic_load(&DNBGetAddressingBits(unsigned int &)::g_once_flag);
  if (v2 != -1)
  {
    v7 = &v5;
    v6 = &v7;
    std::__call_once(&DNBGetAddressingBits(unsigned int &)::g_once_flag, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<DNBGetAddressingBits(unsigned int &)::$_0 &&>>);
  }
  v3 = DNBGetAddressingBits(unsigned int &)::g_addressing_bits;
  *a1 = DNBGetAddressingBits(unsigned int &)::g_addressing_bits;
  return v3 != 0;
}

uint64_t waitpid_thread(void *a1)
{
  pid_t v1;
  _opaque_pthread_t *v2;
  _opaque_pthread_t *v3;
  pid_t v4;
  int v5;
  int *v6;
  int v8;
  int v9;
  int v11;
  sched_param v12;
  int v13;

  v1 = (int)a1;
  v13 = 0;
  pthread_setname_np("waitpid thread");
  v11 = 0;
  v2 = pthread_self();
  if (!pthread_getschedparam(v2, &v11, &v12))
  {
    v12.sched_priority = 47;
    v3 = pthread_self();
    pthread_setschedparam(v3, v11, &v12);
  }
  do
  {
    while (1)
    {
      v4 = waitpid(v1, &v13, 0);
      if (DNBLogEnabledForAny(2))
      {
        v5 = v13;
        v6 = __error();
        _DNBLogThreaded("waitpid_thread (): waitpid (pid = %i, &status, 0) => %i, status = %i, errno = %i", v1, v4, v5, *v6);
      }
      if (v4 < 0)
        break;
      if ((~v13 & 0x7F) != 0 || (v13 & 0xFFFFFF00) == 4864)
      {
        if (DNBLogEnabledForAny(2))
          _DNBLogThreaded("waitpid_thread (): setting exit status for pid = %i to %i", v4, v13);
        v8 = v13;
        v9 = v4;
        goto LABEL_19;
      }
    }
  }
  while (*__error() == 4);
  if (DNBLogEnabledForAny(2))
    _DNBLogThreaded("waitpid_thread (): main loop exited, setting exit status to an invalid value (-1) for pid %i", v1);
  v9 = v1;
  v8 = -1;
LABEL_19:
  DNBProcessSetExitStatus(v9, v8);
  return 0;
}

void std::__shared_ptr_pointer<MachProcess *,std::shared_ptr<MachProcess>::__shared_ptr_default_delete<MachProcess,MachProcess>,std::allocator<MachProcess>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

MachProcess *std::__shared_ptr_pointer<MachProcess *,std::shared_ptr<MachProcess>::__shared_ptr_default_delete<MachProcess,MachProcess>,std::allocator<MachProcess>>::__on_zero_shared(uint64_t a1)
{
  MachProcess *result;

  result = *(MachProcess **)(a1 + 24);
  if (result)
  {
    MachProcess::~MachProcess(result);
    operator delete();
  }
  return result;
}

void std::vector<kinfo_proc>::__append(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;

  v5 = a1[1];
  v4 = a1[2];
  if (0x2C3F35BA781948B1 * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 648 * ((648 * a2 - 648) / 0x288) + 648;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0x2C3F35BA781948B1 * ((v5 - *a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0x6522C3F35BA781)
      abort();
    v9 = 0x2C3F35BA781948B1 * ((v4 - v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x329161F9ADD3C0)
      v10 = 0x6522C3F35BA781;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x6522C3F35BA781)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v11 = (char *)operator new(648 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[648 * v7];
    v14 = &v11[648 * v10];
    v15 = 648 * ((648 * a2 - 648) / 0x288) + 648;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        v5 -= 648;
        v13 -= 648;
        memcpy(v13, v5, 0x288uLL);
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
      operator delete(v5);
  }
}

uint64_t std::__call_once_proxy[abi:nn180100]<std::tuple<DNBGetAddressingBits(unsigned int &)::$_0 &&>>()
{
  uint64_t result;
  size_t v1;

  v1 = 4;
  result = sysctlbyname("machdep.virtual_address_size", &DNBGetAddressingBits(unsigned int &)::g_addressing_bits, &v1, 0, 0);
  if ((_DWORD)result)
    DNBGetAddressingBits(unsigned int &)::g_addressing_bits = 0;
  return result;
}

void DNBDataRef::DNBDataRef(DNBDataRef *this, const unsigned __int8 *a2, uint64_t a3, char a4)
{
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = &a2[a3];
  *((_BYTE *)this + 16) = a4;
  *((_BYTE *)this + 17) = 0;
  *((_QWORD *)this + 3) = -1;
  *((_QWORD *)this + 4) = -1;
  *((_QWORD *)this + 5) = -1;
}

uint64_t DNBDataRef::Get32(DNBDataRef *this, unsigned int *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t result;

  v2 = *a2;
  v3 = *((_QWORD *)this + 1) - *(_QWORD *)this;
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 < 4)
    return 0;
  v6 = *(_DWORD *)(*(_QWORD *)this + v2);
  v7 = bswap32(v6);
  if (*((_BYTE *)this + 16))
    result = v7;
  else
    result = v6;
  *a2 = v2 + 4;
  return result;
}

unint64_t DNBDataRef::GetMax64(DNBDataRef *this, unsigned int *a2, int a3)
{
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;

  switch(a3)
  {
    case 1:
      v3 = *a2;
      if (*((_QWORD *)this + 1) - *(_QWORD *)this <= v3)
        return 0;
      v4 = *(unsigned __int8 *)(*(_QWORD *)this + v3);
      v5 = v3 + 1;
LABEL_17:
      *a2 = v5;
      return v4;
    case 2:
      v4 = 0;
      v15 = *a2;
      v16 = *((_QWORD *)this + 1) - *(_QWORD *)this;
      v8 = v16 >= v15;
      v17 = v16 - v15;
      if (!v8)
        v17 = 0;
      if (v17 >= 2)
      {
        LODWORD(v4) = *(unsigned __int16 *)(*(_QWORD *)this + v15);
        v18 = bswap32(v4) >> 16;
        if (*((_BYTE *)this + 16))
          LOWORD(v4) = v18;
        *a2 = v15 + 2;
        return (unsigned __int16)v4;
      }
      return v4;
    case 4:
      v4 = 0;
      v6 = *a2;
      v7 = *((_QWORD *)this + 1) - *(_QWORD *)this;
      v8 = v7 >= v6;
      v9 = v7 - v6;
      if (!v8)
        v9 = 0;
      if (v9 < 4)
        return v4;
      LODWORD(v4) = *(_DWORD *)(*(_QWORD *)this + v6);
      v10 = bswap32(v4);
      if (*((_BYTE *)this + 16))
        v4 = v10;
      else
        v4 = v4;
      v5 = v6 + 4;
      goto LABEL_17;
    case 8:
      v4 = 0;
      v11 = *a2;
      v12 = *((_QWORD *)this + 1) - *(_QWORD *)this;
      v8 = v12 >= v11;
      v13 = v12 - v11;
      if (!v8)
        v13 = 0;
      if (v13 < 8)
        return v4;
      v4 = *(_QWORD *)(*(_QWORD *)this + v11);
      v14 = bswap64(v4);
      if (*((_BYTE *)this + 16))
        v4 = v14;
      v5 = v11 + 8;
      goto LABEL_17;
    default:
      DNBDataRef::GetMax64();
  }
}

uint64_t DNBDataRef::GetCStr(DNBDataRef *this, unsigned int *a2, int a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;

  v3 = *(_QWORD *)this;
  if (*(_QWORD *)this >= *((_QWORD *)this + 1))
    return 0;
  v5 = *a2;
  v6 = v3 + v5;
  if (a3)
    v7 = v5 + a3;
  else
    v7 = v5 + strlen((const char *)(v3 + v5)) + 1;
  *a2 = v7;
  return v6;
}

uint64_t DNBDataRef::Dump(uint64_t *a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, unsigned int a6, const char *a7)
{
  int v7;
  unint64_t v9;
  unsigned int v13;
  unint64_t v14;
  const char *v15;
  const char *v16;
  const char *v17;
  const char *v18;
  const char *v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  int v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  char *v39;
  size_t v40;
  __uint32_t v41;
  unint64_t v42;
  BOOL v43;
  unint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  int v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  _BOOL4 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t Max64;
  const char *v82;
  char *v83;
  const char *v84;
  const char *v85;
  char *__format;
  const char *v87;
  int v88;
  const char *v89;
  unsigned int v91;
  char __str[1024];

  v7 = a2;
  __str[0] = 0;
  v91 = a2;
  if (a2 >= a3)
    return a2;
  v9 = a2;
  if (a1[1] - *a1 <= (unint64_t)a2)
    return a2;
  v13 = 0;
  v14 = 0;
  if (a7)
    v15 = a7;
  else
    v15 = " %lld";
  v16 = " 0x%llx";
  if (a7)
    v16 = a7;
  v89 = v16;
  v17 = " %16.16llx";
  if (a7)
    v17 = a7;
  __format = (char *)v17;
  v87 = v15;
  if (a7)
    v18 = a7;
  else
    v18 = " %8.8x";
  v19 = " %4.4x";
  if (a7)
    v19 = a7;
  v84 = v19;
  v85 = v18;
  if (a7)
    v20 = a7;
  else
    v20 = " %c";
  v21 = " %2.2x";
  if (a7)
    v21 = a7;
  v82 = v21;
  v83 = (char *)v20;
  LODWORD(v22) = a2;
  v88 = a2;
  do
  {
    if (v13 % a6)
    {
      if (v14 >= 0x400)
        goto LABEL_30;
    }
    else
    {
      if (__str[0] && DNBLogEnabled())
        _DNBLog(0, (uint64_t)"%s", v31, v32, v33, v34, v35, v36, (uint64_t)__str);
      v14 = snprintf(__str, 0x400uLL, "0x%8.8llx:", (v22 - v7) + a4);
      if (v14 >= 0x400)
      {
LABEL_30:
        if (DNBLogEnabled())
          _DNBLog(0, (uint64_t)"%s", v25, v26, v27, v28, v29, v30, (uint64_t)__str);
        v14 = 0;
        __str[0] = 0;
        if (a5 > 7)
          goto LABEL_23;
      }
    }
    switch(a5)
    {
      case 0u:
        if (a1[1] - *a1 <= v9)
        {
          v37 = 0;
        }
        else
        {
          v37 = *(unsigned __int8 *)(*a1 + v9);
          v91 = v22 + 1;
        }
        v23 = snprintf(&__str[v14], 1024 - v14, v82, v37);
        goto LABEL_22;
      case 1u:
        if (a1[1] - *a1 <= v9)
        {
          v38 = 0;
          v39 = &__str[v14];
          v40 = 1024 - v14;
        }
        else
        {
          v38 = *(char *)(*a1 + v9);
          v91 = v22 + 1;
          v39 = &__str[v14];
          v40 = 1024 - v14;
          if ((v38 & 0x80000000) != 0)
          {
            v41 = __maskrune(v38, 0x40000uLL);
            goto LABEL_80;
          }
        }
        v41 = _DefaultRuneLocale.__runetype[v38] & 0x40000;
LABEL_80:
        if (v41)
          v70 = v38;
        else
          v70 = 32;
        v14 += snprintf(v39, v40, v83, v70);
        v7 = v88;
        goto LABEL_23;
      case 2u:
        v42 = a1[1] - *a1;
        v43 = v42 >= v9;
        v44 = v42 - v9;
        if (!v43)
          v44 = 0;
        if (v44 < 2)
        {
          LOWORD(v45) = 0;
        }
        else
        {
          v45 = *(unsigned __int16 *)(*a1 + v9);
          v46 = bswap32(v45) >> 16;
          if (*((_BYTE *)a1 + 16))
            LOWORD(v45) = v46;
          v91 = v22 + 2;
        }
        v23 = snprintf(&__str[v14], 1024 - v14, v84, (unsigned __int16)v45);
        goto LABEL_22;
      case 3u:
        v47 = a1[1] - *a1;
        v43 = v47 >= v9;
        v48 = v47 - v9;
        if (!v43)
          v48 = 0;
        if (v48 < 4)
        {
          v49 = 0;
        }
        else
        {
          LODWORD(v49) = *(_DWORD *)(*a1 + v9);
          v50 = bswap32(v49);
          if (*((_BYTE *)a1 + 16))
            v49 = v50;
          else
            v49 = v49;
          v91 = v22 + 4;
        }
        v23 = snprintf(&__str[v14], 1024 - v14, v85, v49);
        goto LABEL_22;
      case 4u:
        v51 = 0;
        v52 = a1[1] - *a1;
        v43 = v52 >= v9;
        v53 = v52 - v9;
        if (!v43)
          v53 = 0;
        if (v53 >= 8)
        {
          v51 = *(_QWORD *)(*a1 + v9);
          v54 = bswap64(v51);
          if (*((_BYTE *)a1 + 16))
            v51 = v54;
          v91 = v22 + 8;
        }
        v23 = snprintf(&__str[v14], 1024 - v14, __format, v51);
        goto LABEL_22;
      case 5u:
        if (!*((_BYTE *)a1 + 17))
          DNBDataRef::Dump();
        Max64 = DNBDataRef::GetMax64((DNBDataRef *)a1, &v91, *((unsigned __int8 *)a1 + 17));
        v7 = v88;
        v23 = snprintf(&__str[v14], 1024 - v14, v89, Max64);
        goto LABEL_22;
      case 6u:
        v55 = a1[1];
        if (*a1 >= v55)
        {
          v58 = 0;
        }
        else
        {
          v56 = 0;
          v57 = 0;
          v58 = 0;
          v59 = *a1 + v9;
          do
          {
            if (v59 + v56 >= v55)
              break;
            v60 = *(_BYTE *)(v59 + v56);
            v58 |= (unint64_t)(v60 & 0x7F) << v57;
            v57 += 7;
            ++v56;
          }
          while (v60 < 0);
          v91 = v56 + v22;
        }
        v23 = snprintf(&__str[v14], 1024 - v14, v89, v58);
        goto LABEL_22;
      case 7u:
        v61 = *a1;
        v62 = a1[1];
        if (*a1 >= v62)
        {
          v71 = 0;
          goto LABEL_99;
        }
        v63 = v61 + v9;
        if (v61 + v9 >= v62)
        {
          v66 = 0;
          v68 = 0;
          v67 = 0;
          v72 = 1;
          goto LABEL_94;
        }
        v64 = 0;
        v65 = 0;
        v66 = 0;
        v67 = v62 - (v22 + v61);
        v68 = 7 * v67;
        break;
      default:
        goto LABEL_23;
    }
    while (1)
    {
      v69 = *(_BYTE *)(v63 + v64);
      v66 |= (unint64_t)(v69 & 0x7F) << v65;
      if ((v69 & 0x80) == 0)
        break;
      ++v64;
      v65 += 7;
      if (v63 + v64 >= v62)
        goto LABEL_93;
    }
    v68 = v65 + 7;
    v67 = v64 + 1;
LABEL_93:
    v72 = (v69 & 0x40) == 0;
LABEL_94:
    if (v68 > 31)
      v72 = 1;
    v73 = -1 << v68;
    if (v72)
      v73 = 0;
    v71 = v73 | v66;
    v91 = v67 + v22;
LABEL_99:
    v23 = snprintf(&__str[v14], 1024 - v14, v87, v71);
LABEL_22:
    v14 += v23;
LABEL_23:
    ++v13;
    v22 = v91;
    v24 = v91 < a3 && a1[1] - *a1 > (unint64_t)v91;
    v9 = v91;
  }
  while (v24);
  if (__str[0] && DNBLogEnabled())
    _DNBLog(0, (uint64_t)"%s", v74, v75, v76, v77, v78, v79, (uint64_t)__str);
  return v22;
}

uint64_t DNBError::AsString(DNBError *this)
{
  mach_error_t v2;
  const std::string::value_type *v3;
  char *v4;

  v2 = *(_DWORD *)this;
  if (!v2)
    return 0;
  if (*((char *)this + 31) < 0)
  {
    if (*((_QWORD *)this + 2))
      goto LABEL_13;
  }
  else if (*((_BYTE *)this + 31))
  {
    goto LABEL_13;
  }
  v3 = "Should have set BackBoard error when making the error string.";
  switch(*((_DWORD *)this + 1))
  {
    case 1:
      v4 = mach_error_string(v2);
      goto LABEL_9;
    case 2:
      v4 = strerror(v2);
LABEL_9:
      v3 = v4;
      if (!v4)
        break;
      goto LABEL_12;
    case 4:
      goto LABEL_12;
    case 5:
      v3 = "Should have set FrontBoard error when making the error string.";
LABEL_12:
      std::string::assign((std::string *)((char *)this + 8), v3);
      break;
    default:
      break;
  }
LABEL_13:
  if (*((char *)this + 31) < 0)
  {
    if (*((_QWORD *)this + 2))
      return *((_QWORD *)this + 1);
    return 0;
  }
  if (*((_BYTE *)this + 31))
    return (uint64_t)this + 8;
  else
    return 0;
}

void DNBError::LogThreadedIfError(DNBError *this, const char *a2, ...)
{
  uint64_t v3;
  const char *v4;
  char *v5;
  va_list va;

  va_start(va, a2);
  if (*(_DWORD *)this)
  {
    v5 = 0;
    vasprintf(&v5, a2, va);
    if (v5)
    {
      v3 = DNBError::AsString(this);
      if (DNBLogEnabled())
      {
        v4 = "???";
        if (v3)
          v4 = (const char *)v3;
        _DNBLogThreaded("error: %s err = %s (0x%8.8x)", v5, v4, *(_DWORD *)this);
      }
      free(v5);
    }
  }
}

void DNBError::LogThreaded(DNBError *this, const char *a2, ...)
{
  char *v3;
  va_list va;

  va_start(va, a2);
  v3 = 0;
  vasprintf(&v3, a2, va);
  if (v3)
  {
    if (*(_DWORD *)this)
    {
      DNBError::AsString(this);
      if (DNBLogEnabled())
        _DNBLogThreaded("error: %s err = %s (0x%8.8x)");
    }
    else if (DNBLogEnabled())
    {
      _DNBLogThreaded("%s err = 0x%8.8x");
    }
    free(v3);
  }
}

uint64_t DNBLogSetDebug(uint64_t result)
{
  g_debug = result;
  return result;
}

uint64_t DNBLogSetVerbose(uint64_t result)
{
  g_verbose = result;
  return result;
}

BOOL DNBLogCheckLogBit(int a1)
{
  return (g_log_bits & a1) != 0;
}

uint64_t DNBLogSetLogMask(int a1)
{
  uint64_t v1;

  v1 = g_log_bits;
  g_log_bits = a1;
  return v1;
}

void *DNBLogSetLogCallback(void *result, uint64_t a2)
{
  g_log_callback = result;
  g_log_baton = a2;
  return result;
}

void *DNBLogGetLogCallback()
{
  return g_log_callback;
}

BOOL DNBLogEnabled()
{
  return g_log_callback != 0;
}

BOOL DNBLogEnabledForAny(int a1)
{
  return (g_log_bits & a1) != 0 && g_log_callback != 0;
}

uint64_t _DNBLog(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned __int8 v11;

  if ((v11 & 1) == 0
  {
    PThreadMutex::PThreadMutex((PThreadMutex *)&_DNBLogVAPrintf(unsigned int,char const*,char *)::g_LogThreadedMutex, 2);
    __cxa_atexit((void (*)(void *))PThreadMutex::~PThreadMutex, &_DNBLogVAPrintf(unsigned int,char const*,char *)::g_LogThreadedMutex, (void *)&_mh_execute_header);
  }
  pthread_mutex_lock(&_DNBLogVAPrintf(unsigned int,char const*,char *)::g_LogThreadedMutex);
  if (g_log_callback)
    g_log_callback(g_log_baton, a1, a2, &a9);
  return pthread_mutex_unlock(&_DNBLogVAPrintf(unsigned int,char const*,char *)::g_LogThreadedMutex);
}

uint64_t _DNBLogDebug(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char **v9;
  BOOL v10;
  uint64_t v11;
  unsigned __int8 v12;
  char *v13;

  v9 = off_100071000;
  if (g_log_callback)
    v10 = g_debug == 0;
  else
    v10 = 1;
  if (!v10)
  {
    v11 = result;
    if ((v12 & 1) == 0
    {
      PThreadMutex::PThreadMutex((PThreadMutex *)&_DNBLogVAPrintf(unsigned int,char const*,char *)::g_LogThreadedMutex, 2);
      v9 = off_100071000;
      __cxa_atexit((void (*)(void *))PThreadMutex::~PThreadMutex, &_DNBLogVAPrintf(unsigned int,char const*,char *)::g_LogThreadedMutex, (void *)&_mh_execute_header);
    }
    pthread_mutex_lock(&_DNBLogVAPrintf(unsigned int,char const*,char *)::g_LogThreadedMutex);
    v13 = v9[228];
    if (v13)
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))v13)(g_log_baton, 8, v11, &a9);
    return pthread_mutex_unlock(&_DNBLogVAPrintf(unsigned int,char const*,char *)::g_LogThreadedMutex);
  }
  return result;
}

void _DNBLogThreaded(char *a1, ...)
{
  int v1;
  mach_port_name_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  va_list va;

  va_start(va, a1);
  if (g_log_callback)
  {
    v10 = 0;
    vasprintf(&v10, a1, va);
    if (v10)
    {
      gettimeofday((timeval *)&_DNBLogThreaded::tv, 0);
      v1 = _DNBLogThreaded::g_timeval;
      if ((_QWORD)_DNBLogThreaded::g_timeval)
      {
        _DNBLogThreaded::delta = _DNBLogThreaded::tv - _DNBLogThreaded::g_timeval;
        _DNBLogThreaded::delta = DWORD2(_DNBLogThreaded::tv) - DWORD2(_DNBLogThreaded::g_timeval);
        if (DWORD2(_DNBLogThreaded::tv) - DWORD2(_DNBLogThreaded::g_timeval) >= 0)
        {
LABEL_8:
          _DNBLogThreaded::g_timeval = _DNBLogThreaded::tv;
          v2 = mach_thread_self();
          v3 = ++g_message_id;
          getpid();
          _DNBLog(32, (uint64_t)"%u +%lu.%06u sec [%4.4x/%4.4x]: %s", v4, v5, v6, v7, v8, v9, v3);
          mach_port_deallocate(mach_task_self_, v2);
          free(v10);
          return;
        }
        _DNBLogThreaded::delta = _DNBLogThreaded::tv - _DNBLogThreaded::g_timeval - 1;
        v1 = DWORD2(_DNBLogThreaded::tv) - DWORD2(_DNBLogThreaded::g_timeval) + 1000000;
      }
      else
      {
        _DNBLogThreaded::delta = 0;
      }
      _DNBLogThreaded::delta = v1;
      goto LABEL_8;
    }
  }
}

void _DNBLogError(char *a1, ...)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  va_list va;

  va_start(va, a1);
  if (g_log_callback)
  {
    v7 = 0;
    vasprintf(&v7, a1, va);
    if (v7)
    {
      _DNBLog(2, (uint64_t)"error: %s", v1, v2, v3, v4, v5, v6, (uint64_t)v7);
      free(v7);
    }
  }
}

void _DNBLogWarning(char *a1, ...)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  va_list va;

  va_start(va, a1);
  if (g_log_callback)
  {
    v7 = 0;
    vasprintf(&v7, a1, va);
    if (v7)
    {
      _DNBLog(4, (uint64_t)"warning: %s", v1, v2, v3, v4, v5, v6, (uint64_t)v7);
      free(v7);
    }
  }
}

void PThreadMutex::~PThreadMutex(pthread_mutex_t *this)
{
  if (pthread_mutex_destroy(this))
  {
    if (!pthread_mutex_unlock(this))
      pthread_mutex_destroy(this);
  }
}

void PThreadMutex::PThreadMutex(PThreadMutex *this, int a2)
{
  pthread_mutexattr_t v4;

  if (pthread_mutexattr_init(&v4))
    PThreadMutex::PThreadMutex();
  if (pthread_mutexattr_settype(&v4, a2))
    PThreadMutex::PThreadMutex();
  if (pthread_mutex_init((pthread_mutex_t *)this, &v4))
    PThreadMutex::PThreadMutex();
  if (pthread_mutexattr_destroy(&v4))
    PThreadMutex::PThreadMutex();
}

void DNBThreadResumeActions::DNBThreadResumeActions(DNBThreadResumeActions *this)
{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
}

void std::vector<BOOL>::assign(char **a1, unint64_t a2, unsigned __int8 *a3)
{
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  char *v14;
  int v15;
  unint64_t v16;
  size_t v17;
  char *v18;
  __int128 v19;

  a1[1] = 0;
  if (a2)
  {
    v6 = a1[2];
    v7 = (_QWORD)v6 << 6;
    if ((_QWORD)v6 << 6 >= a2)
    {
      a1[1] = (char *)a2;
    }
    else
    {
      v18 = 0;
      v19 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0)
        abort();
      v8 = (_QWORD)v6 << 7;
      if (v8 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0))
        v8 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      if (v7 <= 0x3FFFFFFFFFFFFFFELL)
        v9 = v8;
      else
        v9 = 0x7FFFFFFFFFFFFFFFLL;
      std::vector<BOOL>::reserve((uint64_t)&v18, v9);
      v11 = v18;
      v12 = (char *)*((_QWORD *)&v19 + 1);
      v18 = *a1;
      v10 = v18;
      v13 = *(_OWORD *)(a1 + 1);
      *a1 = v11;
      a1[1] = (char *)a2;
      a1[2] = v12;
      v19 = v13;
      if (v10)
        operator delete(v10);
    }
    v14 = *a1;
    v15 = *a3;
    v16 = a2 >> 6;
    if (v15)
    {
      v17 = 8 * v16;
      if (a2 >= 0x40)
        memset(v14, 255, v17);
      if ((a2 & 0x3F) != 0)
        *(_QWORD *)&v14[v17] |= 0xFFFFFFFFFFFFFFFFLL >> -(a2 & 0x3F);
    }
    else
    {
      if (a2 >= 0x40)
        bzero(v14, 8 * v16);
      if ((a2 & 0x3F) != 0)
        *(_QWORD *)&v14[8 * v16] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(a2 & 0x3F));
    }
  }
}

uint64_t DNBThreadResumeActions::DNBThreadResumeActions(uint64_t a1, char *a2, size_t __sz)
{
  unsigned __int8 v6;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  if (a2 && __sz)
  {
    std::vector<DNBThreadResumeAction>::__assign_with_size[abi:nn180100]<DNBThreadResumeAction const*,DNBThreadResumeAction const*>((_QWORD *)a1, a2, &a2[24 * __sz], __sz);
    v6 = 0;
    std::vector<BOOL>::assign((char **)(a1 + 24), __sz, &v6);
  }
  return a1;
}

uint64_t DNBThreadResumeActions::SetDefaultThreadActionIfNeeded(char **a1, int a2, int a3)
{
  char *v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t result;
  char *v19;
  __int128 v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;

  v7 = *a1;
  v6 = a1[1];
  v8 = (v6 - *a1) / 24;
  if (v6 == *a1)
  {
LABEL_8:
    v12 = (unint64_t)a1[2];
    if ((unint64_t)v6 >= v12)
    {
      v14 = v8 + 1;
      if (v8 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_35;
      v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)v7) >> 3);
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x555555555555555)
        v16 = 0xAAAAAAAAAAAAAAALL;
      else
        v16 = v14;
      if (v16)
      {
        if (v16 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v17 = (char *)operator new(24 * v16);
      }
      else
      {
        v17 = 0;
      }
      v19 = &v17[24 * v8];
      *(_QWORD *)v19 = 0;
      *((_DWORD *)v19 + 2) = a2;
      *((_DWORD *)v19 + 3) = a3;
      *((_QWORD *)v19 + 2) = -1;
      v13 = v19 + 24;
      if (v6 != v7)
      {
        do
        {
          v20 = *(_OWORD *)(v6 - 24);
          *((_QWORD *)v19 - 1) = *((_QWORD *)v6 - 1);
          *(_OWORD *)(v19 - 24) = v20;
          v19 -= 24;
          v6 -= 24;
        }
        while (v6 != v7);
        v6 = *a1;
      }
      *a1 = v19;
      a1[1] = v13;
      a1[2] = &v17[24 * v16];
      if (v6)
        operator delete(v6);
    }
    else
    {
      *(_QWORD *)v6 = 0;
      *((_DWORD *)v6 + 2) = a2;
      *((_DWORD *)v6 + 3) = a3;
      *((_QWORD *)v6 + 2) = -1;
      v13 = v6 + 24;
    }
    a1[1] = v13;
    v21 = (unint64_t)a1[4];
    v22 = a1[5];
    if (v21 != (_QWORD)v22 << 6)
    {
LABEL_34:
      a1[4] = (char *)(v21 + 1);
      result = 1;
      *(_QWORD *)&a1[3][(v21 >> 3) & 0x1FFFFFFFFFFFFFF8] &= ~(1 << v21);
      return result;
    }
    if ((uint64_t)(v21 + 1) >= 0)
    {
      v23 = (_QWORD)v22 << 7;
      if (v23 <= (v21 & 0xFFFFFFFFFFFFFFC0) + 64)
        v23 = (v21 & 0xFFFFFFFFFFFFFFC0) + 64;
      if (v21 <= 0x3FFFFFFFFFFFFFFELL)
        v24 = v23;
      else
        v24 = 0x7FFFFFFFFFFFFFFFLL;
      std::vector<BOOL>::reserve((uint64_t)(a1 + 3), v24);
      v21 = (unint64_t)a1[4];
      goto LABEL_34;
    }
LABEL_35:
    abort();
  }
  if (v8 <= 1)
    v9 = 1;
  else
    v9 = (v6 - *a1) / 24;
  v10 = *a1;
  while (1)
  {
    v11 = *(_QWORD *)v10;
    v10 += 24;
    if (!v11)
      return 0;
    if (!--v9)
      goto LABEL_8;
  }
}

uint64_t DNBThreadResumeActions::DNBThreadResumeActions(uint64_t a1, int a2, int a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  DNBThreadResumeActions::SetDefaultThreadActionIfNeeded((char **)a1, a2, a3);
  return a1;
}

void DNBThreadResumeActions::Append(char **a1, __int128 *a2)
{
  unint64_t v4;
  char *v5;
  __int128 v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v8 = *a1;
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_27;
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (_QWORD)v8) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v13 = (char *)operator new(24 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[24 * v9];
    *(_OWORD *)v14 = *a2;
    *((_QWORD *)v14 + 2) = *((_QWORD *)a2 + 2);
    v7 = v14 + 24;
    if (v5 != v8)
    {
      do
      {
        v15 = *(_OWORD *)(v5 - 24);
        *((_QWORD *)v14 - 1) = *((_QWORD *)v5 - 1);
        *(_OWORD *)(v14 - 24) = v15;
        v14 -= 24;
        v5 -= 24;
      }
      while (v5 != v8);
      v5 = *a1;
    }
    *a1 = v14;
    a1[1] = v7;
    a1[2] = &v13[24 * v12];
    if (v5)
      operator delete(v5);
  }
  else
  {
    v6 = *a2;
    *((_QWORD *)v5 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v5 = v6;
    v7 = v5 + 24;
  }
  a1[1] = v7;
  v16 = (unint64_t)a1[4];
  v17 = a1[5];
  if (v16 != (_QWORD)v17 << 6)
    goto LABEL_26;
  if ((uint64_t)(v16 + 1) < 0)
LABEL_27:
    abort();
  v18 = (_QWORD)v17 << 7;
  if (v18 <= (v16 & 0xFFFFFFFFFFFFFFC0) + 64)
    v18 = (v16 & 0xFFFFFFFFFFFFFFC0) + 64;
  if (v16 <= 0x3FFFFFFFFFFFFFFELL)
    v19 = v18;
  else
    v19 = 0x7FFFFFFFFFFFFFFFLL;
  std::vector<BOOL>::reserve((uint64_t)(a1 + 3), v19);
  v16 = (unint64_t)a1[4];
LABEL_26:
  a1[4] = (char *)(v16 + 1);
  *(_QWORD *)&a1[3][(v16 >> 3) & 0x1FFFFFFFFFFFFFF8] &= ~(1 << v16);
}

void DNBThreadResumeActions::AppendAction(char **a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5)
{
  __int128 v5;
  uint64_t v6;

  *(_QWORD *)&v5 = a2;
  *((_QWORD *)&v5 + 1) = __PAIR64__(a4, a3);
  v6 = a5;
  DNBThreadResumeActions::Append(a1, &v5);
}

_QWORD *DNBThreadResumeActions::GetActionForThread(DNBThreadResumeActions *this, uint64_t a2, int a3)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;

  v3 = *(_QWORD **)this;
  v4 = (_QWORD *)*((_QWORD *)this + 1);
  v5 = ((uint64_t)v4 - *(_QWORD *)this) / 24;
  if (v4 == *(_QWORD **)this)
  {
LABEL_8:
    result = 0;
    if (a2 && a3 && v4 != v3)
    {
      if (v5 <= 1)
        v8 = 1;
      else
        v8 = v5;
      while (*v3)
      {
        v3 += 3;
        if (!--v8)
          return 0;
      }
      return v3;
    }
  }
  else
  {
    if (v5 <= 1)
      v6 = 1;
    else
      v6 = ((uint64_t)v4 - *(_QWORD *)this) / 24;
    result = *(_QWORD **)this;
    while (*result != a2)
    {
      result += 3;
      if (!--v6)
        goto LABEL_8;
    }
  }
  return result;
}

uint64_t DNBThreadResumeActions::NumActionsWithState(uint64_t *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  unint64_t v14;
  int *v15;
  int v16;

  v2 = *a1;
  v3 = a1[1] - *a1;
  if (!v3)
    return 0;
  v4 = v3 / 24;
  if (v4 <= 1)
    v4 = 1;
  if (v4 < 2)
  {
    v5 = 0;
    result = 0;
LABEL_14:
    v14 = v4 - v5;
    v15 = (int *)(v2 + 24 * v5 + 8);
    do
    {
      v16 = *v15;
      v15 += 6;
      if (v16 == a2)
        ++result;
      --v14;
    }
    while (v14);
    return result;
  }
  v7 = 0;
  v8 = 0;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  v9 = (int *)(v2 + 32);
  v10 = v4 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    v11 = *(v9 - 6);
    v13 = *v9;
    v9 += 12;
    v12 = v13;
    if (v11 == a2)
      ++v7;
    if (v12 == a2)
      ++v8;
    v10 -= 2;
  }
  while (v10);
  result = v8 + v7;
  if (v4 != v5)
    goto LABEL_14;
  return result;
}

uint64_t DNBThreadResumeActions::SetSignalHandledForThread(uint64_t this, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (a2)
  {
    v2 = *(uint64_t **)this;
    v3 = *(_QWORD *)(this + 8);
    v4 = v3 - *(_QWORD *)this;
    if (v3 != *(_QWORD *)this)
    {
      v5 = 0;
      v6 = v4 / 24;
      if (v6 <= 1)
        v6 = 1;
      do
      {
        v7 = *v2;
        v2 += 3;
        if (v7 == a2)
          *(_QWORD *)(*(_QWORD *)(this + 24) + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v5;
        ++v5;
      }
      while (v6 != v5);
    }
  }
  return this;
}

_QWORD *std::vector<DNBThreadResumeAction>::__assign_with_size[abi:nn180100]<DNBThreadResumeAction const*,DNBThreadResumeAction const*>(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  char *v17;
  void *v18;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *result) >> 3) < __sz)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_23;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL)
LABEL_23:
      abort();
    v13 = 3 * v12;
    result = operator new(24 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v16 - v9) >> 3) >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v18 = (void *)*result;
LABEL_21:
    result = memmove(v18, __src, v14);
    goto LABEL_22;
  }
  v17 = &__src[8 * ((v16 - v9) >> 3)];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v17;
  if (v14)
  {
    v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *v15 = &v9[v14];
  return result;
}

void std::vector<BOOL>::reserve(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  int v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  if (a2 > *(_QWORD *)(a1 + 16) << 6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      abort();
    v3 = ((a2 - 1) >> 6) + 1;
    v4 = (uint64_t *)operator new(8 * v3);
    v5 = *(_QWORD **)a1;
    v6 = *(_QWORD *)(a1 + 8);
    v7 = v6 & 0x3F;
    v8 = (v6 - 1) >> 6;
    if (v6 < 0x41)
      v8 = 0;
    v4[v8] = 0;
    if (v6 > 0x3F || (v6 & 0x3F) != 0)
    {
      v9 = 0;
      v10 = 0;
      v11 = &v5[v6 >> 6];
      v12 = v4;
      v13 = v5;
      do
      {
        v14 = 1 << v9;
        if (((*v13 >> v10) & 1) != 0)
          v15 = *v12 | v14;
        else
          v15 = *v12 & ~v14;
        *v12 = v15;
        v13 += v10 == 63;
        if (v10 == 63)
          v10 = 0;
        else
          ++v10;
        v12 += v9 == 63;
        if (v9 == 63)
          v9 = 0;
        else
          ++v9;
      }
      while (v10 != v7 || v13 != v11);
    }
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 16) = v3;
    if (v5)
      operator delete(v5);
  }
}

void StdStringExtractor::StdStringExtractor(StdStringExtractor *this, const char *a2)
{
  std::string *v3;

  *(_QWORD *)this = off_100060CE8;
  *(_OWORD *)((char *)this + 8) = 0u;
  v3 = (std::string *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  if (a2)
    std::string::assign(v3, a2);
}

void StdStringExtractor::~StdStringExtractor(void **this)
{
  *this = off_100060CE8;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_100060CE8;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  operator delete();
}

uint64_t StdStringExtractor::GetChar(StdStringExtractor *this, char a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 4);
  v3 = *((unsigned __int8 *)this + 31);
  if (*((char *)this + 31) < 0)
  {
    if (v2 < *((_QWORD *)this + 2))
      goto LABEL_3;
LABEL_7:
    v5 = -1;
    goto LABEL_8;
  }
  if (v2 >= v3)
    goto LABEL_7;
LABEL_3:
  v4 = (_QWORD *)((char *)this + 8);
  if ((v3 & 0x80) != 0)
    v4 = (_QWORD *)*v4;
  a2 = *((_BYTE *)v4 + v2);
  v5 = v2 + 1;
LABEL_8:
  *((_QWORD *)this + 4) = v5;
  return a2;
}

uint64_t StdStringExtractor::DecodeHexU8(StdStringExtractor *this)
{
  int v2;
  unint64_t v3;
  char *v4;
  unint64_t v5;
  int v6;
  __darwin_ct_rune_t v7;
  unint64_t v8;
  uint64_t result;
  char *v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;

  v2 = *((char *)this + 31);
  if (v2 < 0)
    v3 = *((_QWORD *)this + 2);
  else
    v3 = *((unsigned __int8 *)this + 31);
  v4 = (char *)this + 8;
  v5 = *((_QWORD *)this + 4);
  if (v5 < v3)
  {
    while (1)
    {
      if (*((char *)this + 31) < 0)
      {
        v7 = *(char *)(*(_QWORD *)v4 + v5);
        if (v7 < 0)
        {
LABEL_6:
          v6 = __maskrune(v7, 0x4000uLL);
          v5 = *((_QWORD *)this + 4);
          if (!v6)
            goto LABEL_13;
          goto LABEL_7;
        }
      }
      else
      {
        v7 = v4[v5];
        if (v7 < 0)
          goto LABEL_6;
      }
      if ((_DefaultRuneLocale.__runetype[v7] & 0x4000) == 0)
      {
LABEL_13:
        LOBYTE(v2) = *((_BYTE *)this + 31);
        break;
      }
LABEL_7:
      *((_QWORD *)this + 4) = ++v5;
      if (v5 >= v3)
        goto LABEL_13;
    }
  }
  if ((v2 & 0x80) != 0)
  {
    v8 = *((_QWORD *)this + 2);
    if (v5 >= v8)
      return 0xFFFFFFFFLL;
  }
  else
  {
    v8 = v2;
    if (v5 >= v2)
      return 0xFFFFFFFFLL;
  }
  if (v8 - v5 < 2)
    return 0xFFFFFFFFLL;
  v10 = (char *)this + 8;
  if ((v2 & 0x80) != 0)
    v10 = *(char **)v4;
  v11 = v10[v5];
  v12 = v11 - 97;
  v13 = v11 - 48;
  if ((v11 - 48) >= 0xA)
    v13 = -1;
  if ((v11 - 65) <= 5)
    v14 = v11 - 55;
  else
    v14 = v13;
  v15 = v11 - 87;
  if (v12 > 5)
    v15 = v14;
  if ((v2 & 0x80) != 0)
    v4 = *(char **)v4;
  v16 = v4[v5 + 1];
  v17 = v16 - 97;
  v18 = v16 - 48;
  if ((v16 - 48) >= 0xA)
    v18 = -1;
  if ((v16 - 65) <= 5)
    v19 = v16 - 55;
  else
    v19 = v18;
  v20 = v16 - 87;
  if (v17 > 5)
    v20 = v19;
  result = 0xFFFFFFFFLL;
  if (v15 != -1 && v20 != -1)
  {
    *((_QWORD *)this + 4) = v5 + 2;
    return (v20 + 16 * v15);
  }
  return result;
}

unint64_t StdStringExtractor::GetU32(StdStringExtractor *this, uint64_t a2, int a3)
{
  unint64_t v5;
  const char *v6;
  char *v7;
  unint64_t v8;
  char *__endptr;

  v5 = *((_QWORD *)this + 4);
  v6 = (char *)this + 8;
  if (*((char *)this + 31) < 0)
  {
    if (v5 >= *((_QWORD *)this + 2))
      return a2;
    __endptr = 0;
    v6 = *(const char **)v6;
  }
  else
  {
    if (v5 >= *((unsigned __int8 *)this + 31))
      return a2;
    __endptr = 0;
  }
  v7 = (char *)&v6[v5];
  v8 = strtoul(&v6[v5], &__endptr, a3);
  if (__endptr && __endptr != v7)
  {
    *((_QWORD *)this + 4) = __endptr - v6;
    return v8;
  }
  return a2;
}

uint64_t StdStringExtractor::GetHexMaxU32(StdStringExtractor *this, char a2, uint64_t a3)
{
  unint64_t v6;
  char **v7;
  unint64_t i;
  __darwin_ct_rune_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  char v14;
  int v15;
  char v16;
  int v17;
  unint64_t v18;
  char *v19;
  int v20;
  char *v21;
  int v22;
  unsigned int v23;
  char v24;
  char v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unint64_t v28;
  int v29;
  char *v30;
  int v31;
  unsigned __int8 v32;
  unsigned int v33;
  char v34;
  unsigned __int8 v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  char v39;
  char v40;
  unsigned __int8 v41;
  unint64_t v42;
  char *v43;
  int v44;
  char *v45;

  if (*((char *)this + 31) < 0)
    v6 = *((_QWORD *)this + 2);
  else
    v6 = *((unsigned __int8 *)this + 31);
  v7 = (char **)((char *)this + 8);
  for (i = *((_QWORD *)this + 4); i < v6; *((_QWORD *)this + 4) = i)
  {
    if (*((char *)this + 31) < 0)
    {
      v9 = (*v7)[i];
      if (v9 < 0)
      {
LABEL_6:
        if (!__maskrune(v9, 0x4000uLL))
          break;
        goto LABEL_7;
      }
    }
    else
    {
      v9 = *((char *)v7 + i);
      if (v9 < 0)
        goto LABEL_6;
    }
    if ((_DefaultRuneLocale.__runetype[v9] & 0x4000) == 0)
      break;
LABEL_7:
    i = *((_QWORD *)this + 4) + 1;
  }
  v10 = *((unsigned __int8 *)this + 31);
  v11 = *((_QWORD *)this + 4);
  if ((a2 & 1) != 0)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    while (1)
    {
      v18 = v10;
      if ((v10 & 0x80) != 0)
        v18 = *((_QWORD *)this + 2);
      if (v11 >= v18)
        return v12;
      v19 = (char *)this + 8;
      if ((v10 & 0x80) != 0)
        v19 = *v7;
      v20 = v19[v11];
      if (v20 < 0 || (_DefaultRuneLocale.__runetype[v20] & 0x10000) == 0)
        return v12;
      if (v13 > 7)
        goto LABEL_74;
      v21 = (char *)this + 8;
      if ((v10 & 0x80) != 0)
        v21 = *v7;
      v22 = v21[v11];
      v23 = v22 - 97;
      v24 = v22 - 48;
      if ((v22 - 48) >= 0xA)
        v24 = -1;
      if ((v22 - 65) <= 5)
        v25 = v22 - 55;
      else
        v25 = v24;
      v26 = v22 - 87;
      if (v23 <= 5)
        v27 = v26;
      else
        v27 = v25;
      v28 = v11 + 1;
      *((_QWORD *)this + 4) = v11 + 1;
      if ((v10 & 0x80) != 0)
      {
        if (v28 >= *((_QWORD *)this + 2))
          goto LABEL_15;
      }
      else if (v28 >= v10)
      {
        goto LABEL_15;
      }
      if ((v10 & 0x80) != 0)
      {
        v29 = (*v7)[v28];
        if (v29 < 0)
          goto LABEL_15;
      }
      else
      {
        v29 = *((char *)v7 + v28);
        if (v29 < 0)
          goto LABEL_15;
      }
      if ((_DefaultRuneLocale.__runetype[v29] & 0x10000) == 0)
      {
LABEL_15:
        v15 = v27 << v14;
        v16 = 4;
        v17 = 1;
        goto LABEL_16;
      }
      v30 = (char *)this + 8;
      if ((v10 & 0x80) != 0)
        v30 = *v7;
      v31 = v30[v28];
      if ((v31 - 97) > 5)
      {
        v33 = v31 - 65;
        v34 = v31 - 48;
        if ((v31 - 48) >= 0xA)
          v34 = -1;
        v35 = v31 - 55;
        if (v33 <= 5)
          v32 = v35;
        else
          v32 = v34;
      }
      else
      {
        v32 = v31 - 87;
      }
      v28 = v11 + 2;
      *((_QWORD *)this + 4) = v11 + 2;
      v15 = (v27 << (v14 + 4)) | (v32 << v14);
      v16 = 8;
      v17 = 2;
LABEL_16:
      v13 += v17;
      v14 += v16;
      v12 = v15 | v12;
      v11 = v28;
    }
  }
  v36 = 0;
  v12 = 0;
  while (1)
  {
    v42 = v10;
    if ((v10 & 0x80) != 0)
      v42 = *((_QWORD *)this + 2);
    if (v11 + v36 >= v42)
      return v12;
    v43 = (char *)this + 8;
    if ((v10 & 0x80) != 0)
      v43 = *v7;
    v44 = v43[v11 + v36];
    if (v44 < 0 || (_DefaultRuneLocale.__runetype[v44] & 0x10000) == 0)
      return v12;
    if ((_DWORD)v36 == 8)
      break;
    v45 = (char *)this + 8;
    if ((v10 & 0x80) != 0)
      v45 = *v7;
    v37 = v45[v11 + v36];
    v38 = v37 - 97;
    v39 = v37 - 48;
    if ((v37 - 48) >= 0xA)
      v39 = -1;
    if ((v37 - 65) <= 5)
      v40 = v37 - 55;
    else
      v40 = v39;
    v41 = v37 - 87;
    if (v38 > 5)
      v41 = v40;
    v12 = v41 | (16 * v12);
    *((_QWORD *)this + 4) = v11 + v36++ + 1;
  }
LABEL_74:
  *((_QWORD *)this + 4) = -1;
  return a3;
}

unint64_t StdStringExtractor::GetHexMaxU64(StdStringExtractor *this, char a2, uint64_t a3)
{
  unint64_t v6;
  char **v7;
  unint64_t i;
  __darwin_ct_rune_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  char v14;
  unint64_t v15;
  char v16;
  int v17;
  unint64_t v18;
  char *v19;
  int v20;
  char *v21;
  int v22;
  unsigned int v23;
  char v24;
  char v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unint64_t v28;
  int v29;
  char *v30;
  int v31;
  unsigned int v32;
  char v33;
  char v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  char v40;
  char v41;
  unsigned __int8 v42;
  unint64_t v43;
  char *v44;
  int v45;
  char *v46;

  if (*((char *)this + 31) < 0)
    v6 = *((_QWORD *)this + 2);
  else
    v6 = *((unsigned __int8 *)this + 31);
  v7 = (char **)((char *)this + 8);
  for (i = *((_QWORD *)this + 4); i < v6; *((_QWORD *)this + 4) = i)
  {
    if (*((char *)this + 31) < 0)
    {
      v9 = (*v7)[i];
      if (v9 < 0)
      {
LABEL_6:
        if (!__maskrune(v9, 0x4000uLL))
          break;
        goto LABEL_7;
      }
    }
    else
    {
      v9 = *((char *)v7 + i);
      if (v9 < 0)
        goto LABEL_6;
    }
    if ((_DefaultRuneLocale.__runetype[v9] & 0x4000) == 0)
      break;
LABEL_7:
    i = *((_QWORD *)this + 4) + 1;
  }
  v10 = *((unsigned __int8 *)this + 31);
  v11 = *((_QWORD *)this + 4);
  if ((a2 & 1) != 0)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    while (1)
    {
      v18 = v10;
      if ((v10 & 0x80) != 0)
        v18 = *((_QWORD *)this + 2);
      if (v11 >= v18)
        return v12;
      v19 = (char *)this + 8;
      if ((v10 & 0x80) != 0)
        v19 = *v7;
      v20 = v19[v11];
      if (v20 < 0 || (_DefaultRuneLocale.__runetype[v20] & 0x10000) == 0)
        return v12;
      if (v13 > 0xF)
        goto LABEL_75;
      v21 = (char *)this + 8;
      if ((v10 & 0x80) != 0)
        v21 = *v7;
      v22 = v21[v11];
      v23 = v22 - 97;
      v24 = v22 - 48;
      if ((v22 - 48) >= 0xA)
        v24 = -1;
      if ((v22 - 65) <= 5)
        v25 = v22 - 55;
      else
        v25 = v24;
      v26 = v22 - 87;
      if (v23 <= 5)
        v27 = v26;
      else
        v27 = v25;
      v28 = v11 + 1;
      *((_QWORD *)this + 4) = v11 + 1;
      if ((v10 & 0x80) != 0)
      {
        if (v28 >= *((_QWORD *)this + 2))
          goto LABEL_15;
      }
      else if (v28 >= v10)
      {
        goto LABEL_15;
      }
      if ((v10 & 0x80) != 0)
      {
        v29 = (*v7)[v28];
        if (v29 < 0)
          goto LABEL_15;
      }
      else
      {
        v29 = *((char *)v7 + v28);
        if (v29 < 0)
          goto LABEL_15;
      }
      if ((_DefaultRuneLocale.__runetype[v29] & 0x10000) == 0)
      {
LABEL_15:
        v15 = (unint64_t)v27 << v14;
        v16 = 4;
        v17 = 1;
        goto LABEL_16;
      }
      v30 = (char *)this + 8;
      if ((v10 & 0x80) != 0)
        v30 = *v7;
      v31 = v30[v28];
      v32 = v31 - 97;
      v33 = v31 - 48;
      if ((v31 - 48) >= 0xA)
        v33 = -1;
      if ((v31 - 65) <= 5)
        v34 = v31 - 55;
      else
        v34 = v33;
      v35 = v31 - 87;
      if (v32 <= 5)
        v36 = v35;
      else
        v36 = v34;
      v28 = v11 + 2;
      *((_QWORD *)this + 4) = v11 + 2;
      v15 = ((unint64_t)v27 << (v14 + 4)) | ((unint64_t)v36 << v14);
      v16 = 8;
      v17 = 2;
LABEL_16:
      v13 += v17;
      v14 += v16;
      v12 |= v15;
      v11 = v28;
    }
  }
  v37 = 0;
  v12 = 0;
  while (1)
  {
    v43 = v10;
    if ((v10 & 0x80) != 0)
      v43 = *((_QWORD *)this + 2);
    if (v11 + v37 >= v43)
      return v12;
    v44 = (char *)this + 8;
    if ((v10 & 0x80) != 0)
      v44 = *v7;
    v45 = v44[v11 + v37];
    if (v45 < 0 || (_DefaultRuneLocale.__runetype[v45] & 0x10000) == 0)
      return v12;
    if ((_DWORD)v37 == 16)
      break;
    v46 = (char *)this + 8;
    if ((v10 & 0x80) != 0)
      v46 = *v7;
    v38 = v46[v11 + v37];
    v39 = v38 - 97;
    v40 = v38 - 48;
    if ((v38 - 48) >= 0xA)
      v40 = -1;
    if ((v38 - 65) <= 5)
      v41 = v38 - 55;
    else
      v41 = v40;
    v42 = v38 - 87;
    if (v39 > 5)
      v42 = v41;
    v12 = v42 | (16 * v12);
    *((_QWORD *)this + 4) = v11 + v37++ + 1;
  }
LABEL_75:
  *((_QWORD *)this + 4) = -1;
  return a3;
}

unint64_t StdStringExtractor::GetHexBytes(StdStringExtractor *this, _BYTE *a2, unint64_t a3, int __c)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;

  if (a3)
  {
    v8 = 0;
    v9 = *((_QWORD *)this + 4);
    while (1)
    {
      if (*((char *)this + 31) < 0)
      {
        v10 = *((_QWORD *)this + 2);
        if (v9 >= v10)
          break;
      }
      else
      {
        v10 = *((unsigned __int8 *)this + 31);
        if (v9 >= v10)
          break;
      }
      if (v10 == v9)
        break;
      v11 = StdStringExtractor::DecodeHexU8(this);
      if (v11 == -1)
      {
        *((_QWORD *)this + 4) = -1;
        LOBYTE(v11) = __c;
      }
      a2[v8] = v11;
      v9 = *((_QWORD *)this + 4);
      if (v9 == -1)
        break;
      if (a3 == ++v8)
        return a3;
    }
  }
  else
  {
    v8 = 0;
  }
  if (a3 > v8)
    memset(&a2[v8], __c, a3 - v8);
  return v8;
}

std::string::size_type StdStringExtractor::GetHexByteString(uint64_t a1, std::string *this)
{
  unint64_t v4;
  unint64_t v5;
  std::string::size_type v6;
  int v7;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    *this->__r_.__value_.__l.__data_ = 0;
    this->__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    this->__r_.__value_.__s.__data_[0] = 0;
    *((_BYTE *)&this->__r_.__value_.__s + 23) = 0;
  }
  v4 = *(_QWORD *)(a1 + 32);
  if (*(char *)(a1 + 31) < 0)
  {
    v5 = *(_QWORD *)(a1 + 16);
    if (v4 < v5)
      goto LABEL_6;
LABEL_8:
    v6 = 0;
    goto LABEL_9;
  }
  v5 = *(unsigned __int8 *)(a1 + 31);
  if (v4 >= v5)
    goto LABEL_8;
LABEL_6:
  v6 = (v5 - v4) >> 1;
LABEL_9:
  std::string::reserve(this, v6);
  while (1)
  {
    v7 = StdStringExtractor::DecodeHexU8((StdStringExtractor *)a1);
    if (v7 == -1)
      break;
    if (!(_BYTE)v7)
      goto LABEL_14;
    std::string::append(this, 1uLL, v7);
  }
  *(_QWORD *)(a1 + 32) = -1;
LABEL_14:
  if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    return HIBYTE(this->__r_.__value_.__r.__words[2]);
  else
    return this->__r_.__value_.__l.__size_;
}

uint64_t StdStringExtractor::GetNameColonValue(uint64_t a1, std::string *a2, std::string *a3)
{
  std::string::size_type v6;
  std::string::size_type v7;
  std::string::size_type v8;
  std::string::size_type v9;
  std::string::size_type v10;
  uint64_t v11;
  uint64_t result;

  v6 = *(_QWORD *)(a1 + 32);
  if (*(char *)(a1 + 31) < 0)
  {
    if (v6 >= *(_QWORD *)(a1 + 16))
    {
LABEL_8:
      result = 0;
      v11 = -1;
      goto LABEL_9;
    }
  }
  else if (v6 >= *(unsigned __int8 *)(a1 + 31))
  {
    goto LABEL_8;
  }
  v7 = std::string::find((const std::string *)(a1 + 8), 58, v6);
  if (v7 == -1)
    goto LABEL_8;
  v8 = v7;
  v9 = std::string::find((const std::string *)(a1 + 8), 59, v7);
  if (v9 == -1)
    goto LABEL_8;
  v10 = v9;
  std::string::assign(a2, (const std::string *)(a1 + 8), *(_QWORD *)(a1 + 32), v8 - *(_QWORD *)(a1 + 32));
  std::string::assign(a3, (const std::string *)(a1 + 8), v8 + 1, v10 - (v8 + 1));
  v11 = v10 + 1;
  result = 1;
LABEL_9:
  *(_QWORD *)(a1 + 32) = v11;
  return result;
}

double lldb_private::SocketAddress::SocketAddress(lldb_private::SocketAddress *this)
{
  double result;

  result = 0.0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

uint64_t lldb_private::SocketAddress::GetLength(lldb_private::SocketAddress *this)
{
  return *(unsigned __int8 *)this;
}

uint64_t lldb_private::SocketAddress::GetMaxLength(lldb_private::SocketAddress *this)
{
  return 128;
}

uint64_t lldb_private::SocketAddress::GetFamily(lldb_private::SocketAddress *this)
{
  return *((unsigned __int8 *)this + 1);
}

unint64_t lldb_private::SocketAddress::GetIPAddress@<X0>(unint64_t this@<X0>, _BYTE *a2@<X8>)
{
  int v3;
  const void *v4;
  int v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _OWORD v10[3];

  memset(v10, 0, 46);
  v3 = *(unsigned __int8 *)(this + 1);
  if (v3 == 30)
  {
    v4 = (const void *)(this + 8);
    v5 = 30;
  }
  else
  {
    if (v3 != 2)
    {
LABEL_10:
      a2[23] = 0;
      *a2 = 0;
      return this;
    }
    v4 = (const void *)(this + 4);
    v5 = 2;
  }
  this = (unint64_t)inet_ntop(v5, v4, (char *)v10, 0x2Eu);
  if (!this)
    goto LABEL_10;
  this = strlen((const char *)v10);
  if (this > 0x7FFFFFFFFFFFFFF7)
    abort();
  v6 = this;
  if (this >= 0x17)
  {
    v7 = (this & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((this | 7) != 0x17)
      v7 = this | 7;
    v8 = v7 + 1;
    v9 = operator new(v7 + 1);
    *((_QWORD *)a2 + 1) = v6;
    *((_QWORD *)a2 + 2) = v8 | 0x8000000000000000;
    *(_QWORD *)a2 = v9;
    a2 = v9;
  }
  else
  {
    a2[23] = this;
    if (!this)
      goto LABEL_15;
  }
  this = (unint64_t)memcpy(a2, v10, v6);
LABEL_15:
  a2[v6] = 0;
  return this;
}

uint64_t lldb_private::SocketAddress::GetPort(lldb_private::SocketAddress *this)
{
  int v1;

  v1 = *((unsigned __int8 *)this + 1);
  if (v1 == 30 || v1 == 2)
    return bswap32(*((unsigned __int16 *)this + 1)) >> 16;
  else
    return 0;
}

uint64_t lldb_private::SocketAddress::SetPort(lldb_private::SocketAddress *this, unsigned int a2)
{
  int v2;

  v2 = *((unsigned __int8 *)this + 1);
  if (v2 != 30 && v2 != 2)
    return 0;
  *((_WORD *)this + 1) = __rev16(a2);
  return 1;
}

void lldb_private::SocketAddress::GetAddressInfo(lldb_private::SocketAddress *this@<X0>, const char *a2@<X1>, const char *a3@<X2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, char **a7@<X8>)
{
  int v8;
  addrinfo *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  sockaddr *ai_addr;
  size_t ai_addrlen;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  addrinfo *v39;
  addrinfo v40;
  __int128 __dst;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  *a7 = 0;
  a7[1] = 0;
  a7[2] = 0;
  memset(&v40.ai_addrlen, 0, 32);
  v40.ai_socktype = a4;
  v40.ai_protocol = a5;
  v40.ai_flags = a6;
  v40.ai_family = (int)a3;
  v39 = 0;
  v8 = getaddrinfo((const char *)this, a2, &v40, &v39);
  v9 = v39;
  if (!v8 && v39)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    do
    {
      v47 = 0u;
      v48 = 0u;
      v46 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      __dst = 0u;
      ai_addr = v9->ai_addr;
      if (ai_addr)
      {
        ai_addrlen = v9->ai_addrlen;
        if ((ai_addrlen - 1) <= 0x7F)
          memcpy(&__dst, ai_addr, ai_addrlen);
      }
      if (v10 < v11)
      {
        v13 = __dst;
        v14 = v42;
        v15 = v44;
        *((_OWORD *)v10 + 2) = v43;
        *((_OWORD *)v10 + 3) = v15;
        *(_OWORD *)v10 = v13;
        *((_OWORD *)v10 + 1) = v14;
        v16 = v45;
        v17 = v46;
        v18 = v48;
        *((_OWORD *)v10 + 6) = v47;
        *((_OWORD *)v10 + 7) = v18;
        *((_OWORD *)v10 + 4) = v16;
        *((_OWORD *)v10 + 5) = v17;
        v19 = v10 + 128;
      }
      else
      {
        v22 = (v10 - v12) >> 7;
        v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 57)
          abort();
        if ((v11 - v12) >> 6 > v23)
          v23 = (v11 - v12) >> 6;
        if ((unint64_t)(v11 - v12) >= 0x7FFFFFFFFFFFFF80)
          v24 = 0x1FFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24)
        {
          if (v24 >> 57)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v25 = (char *)operator new(v24 << 7);
        }
        else
        {
          v25 = 0;
        }
        v26 = &v25[128 * v22];
        v27 = v46;
        v28 = v47;
        *((_OWORD *)v26 + 4) = v45;
        *((_OWORD *)v26 + 5) = v27;
        v29 = v48;
        *((_OWORD *)v26 + 6) = v28;
        *((_OWORD *)v26 + 7) = v29;
        v30 = v42;
        *(_OWORD *)v26 = __dst;
        *((_OWORD *)v26 + 1) = v30;
        v31 = v44;
        *((_OWORD *)v26 + 2) = v43;
        *((_OWORD *)v26 + 3) = v31;
        if (v10 == v12)
        {
          v12 = &v25[128 * v22];
        }
        else
        {
          v32 = &v25[128 * v22];
          do
          {
            v33 = *((_OWORD *)v10 - 8);
            v34 = *((_OWORD *)v10 - 7);
            v35 = *((_OWORD *)v10 - 5);
            *((_OWORD *)v32 - 6) = *((_OWORD *)v10 - 6);
            *((_OWORD *)v32 - 5) = v35;
            *((_OWORD *)v32 - 8) = v33;
            *((_OWORD *)v32 - 7) = v34;
            v36 = *((_OWORD *)v10 - 4);
            v37 = *((_OWORD *)v10 - 3);
            v38 = *((_OWORD *)v10 - 1);
            *((_OWORD *)v32 - 2) = *((_OWORD *)v10 - 2);
            *((_OWORD *)v32 - 1) = v38;
            *((_OWORD *)v32 - 4) = v36;
            *((_OWORD *)v32 - 3) = v37;
            v32 -= 128;
            v10 -= 128;
          }
          while (v10 != v12);
          v10 = v12;
          v12 = v32;
        }
        v11 = &v25[128 * v24];
        v19 = v26 + 128;
        *a7 = v12;
        a7[1] = v26 + 128;
        a7[2] = v11;
        if (v10)
          operator delete(v10);
      }
      a7[1] = v19;
      v9 = v9->ai_next;
      v10 = v19;
    }
    while (v9);
    v9 = v39;
  }
  if (v9)
    freeaddrinfo(v9);
}

uint64_t lldb_private::SocketAddress::SetToAnyAddress(lldb_private::SocketAddress *this, int a2, unsigned int a3)
{
  if (a2 == 30)
  {
    *(_WORD *)this = 7708;
    *((_WORD *)this + 1) = __rev16(a3);
    *(in6_addr *)((char *)this + 8) = in6addr_any;
    return 1;
  }
  else if (a2 == 2)
  {
    *(_WORD *)this = 528;
    *((_WORD *)this + 1) = __rev16(a3);
    *((_DWORD *)this + 1) = 0;
    return 1;
  }
  else
  {
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
    return 0;
  }
}

BOOL lldb_private::SocketAddress::IsAnyAddr(lldb_private::SocketAddress *this)
{
  int v1;
  unint64_t v2;
  unint64_t v3;

  if (*((_BYTE *)this + 1) == 2)
  {
    v1 = *((_DWORD *)this + 1);
  }
  else
  {
    v2 = bswap64(*((_QWORD *)this + 1));
    v3 = bswap64(*(unint64_t *)in6addr_any.__u6_addr8);
    if (v2 == v3
      && (v2 = bswap64(*((_QWORD *)this + 2)), v3 = bswap64(*(_QWORD *)&in6addr_any.__u6_addr32[2]), v2 == v3))
    {
      v1 = 0;
    }
    else if (v2 < v3)
    {
      v1 = -1;
    }
    else
    {
      v1 = 1;
    }
  }
  return v1 == 0;
}

BOOL lldb_private::SocketAddress::IsLocalhost(lldb_private::SocketAddress *this)
{
  if (*((_BYTE *)this + 1) == 2)
    return *((_DWORD *)this + 1) == 16777343;
  return *((_QWORD *)this + 1) == *(_QWORD *)in6addr_loopback.__u6_addr8
      && *((_QWORD *)this + 2) == *(_QWORD *)&in6addr_loopback.__u6_addr32[2];
}

BOOL lldb_private::SocketAddress::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;

  v2 = a1[1];
  if (v2 != a2[1] || *a1 != *a2)
    return 0;
  if (v2 != 30)
  {
    if (v2 == 2)
      return *((_DWORD *)a1 + 1) == *((_DWORD *)a2 + 1);
    return 0;
  }
  return *((_QWORD *)a1 + 1) == *((_QWORD *)a2 + 1) && *((_QWORD *)a1 + 2) == *((_QWORD *)a2 + 2);
}

void PseudoTerminal::PseudoTerminal(PseudoTerminal *this)
{
  *(_QWORD *)this = -1;
}

void PseudoTerminal::~PseudoTerminal(PseudoTerminal *this)
{
  int v2;
  int v3;

  v2 = *(_DWORD *)this;
  if (v2 >= 1)
  {
    close(v2);
    *(_DWORD *)this = -1;
  }
  v3 = *((_DWORD *)this + 1);
  if (v3 >= 1)
  {
    close(v3);
    *((_DWORD *)this + 1) = -1;
  }
}

uint64_t PseudoTerminal::OpenFirstAvailablePrimary(PseudoTerminal *this, int a2)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v3 = posix_openpt(a2);
  *(_DWORD *)this = v3;
  if (v3 < 0)
    return 4294967294;
  v4 = grantpt(v3);
  v5 = *(_DWORD *)this;
  if (v4 < 0)
  {
    v6 = 4294967293;
    if (v5 <= 0)
      return v6;
LABEL_7:
    close(v5);
    *(_DWORD *)this = -1;
    return v6;
  }
  if (unlockpt(v5) < 0)
  {
    v5 = *(_DWORD *)this;
    v6 = 4294967292;
    if (*(int *)this < 1)
      return v6;
    goto LABEL_7;
  }
  return 0;
}

char *PseudoTerminal::SecondaryName(PseudoTerminal *this)
{
  int v1;

  v1 = *(_DWORD *)this;
  if (v1 < 0)
    return 0;
  else
    return ptsname(v1);
}

uint64_t PseudoTerminal::Fork(int *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  uint64_t result;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;

  v4 = posix_openpt(131074);
  *a1 = v4;
  if (v4 < 0)
  {
    result = 0xFFFFFFFFLL;
    v12 = -2;
    goto LABEL_33;
  }
  v5 = grantpt(v4);
  v6 = *a1;
  if (v5 < 0)
  {
    v12 = -3;
    if (v6 <= 0)
    {
LABEL_29:
      result = 0xFFFFFFFFLL;
      goto LABEL_33;
    }
LABEL_27:
    close(v6);
    result = 0xFFFFFFFFLL;
    *a1 = -1;
    goto LABEL_33;
  }
  if (unlockpt(v6) < 0)
  {
    v6 = *a1;
    v12 = -4;
    if (*a1 < 1)
      goto LABEL_29;
    goto LABEL_27;
  }
  *a2 = 0;
  result = fork();
  if ((result & 0x80000000) != 0)
  {
    v12 = -7;
  }
  else
  {
    if ((_DWORD)result)
      return result;
    setsid();
    v8 = a1[1];
    if (v8 >= 1)
    {
      close(v8);
      a1[1] = -1;
    }
    if (*a1 < 0)
    {
      result = 0;
    }
    else
    {
      result = (uint64_t)ptsname(*a1);
      if (result)
      {
        v9 = open((const char *)result, 2);
        a1[1] = v9;
        if (v9 < 0)
        {
          result = 0;
          v12 = -6;
        }
        else
        {
          *a2 = 0;
          if (*a1 >= 1)
          {
            close(*a1);
            *a1 = -1;
            v9 = a1[1];
          }
          if (ioctl(v9, 0x20007461uLL, 0) < 0)
            *a2 = -9;
          if (dup2(a1[1], 0))
          {
            v10 = *a2;
            if (!*a2)
              v10 = -10;
            *a2 = v10;
          }
          if (dup2(a1[1], 1) != 1)
          {
            v11 = *a2;
            if (!*a2)
              v11 = -11;
            *a2 = v11;
          }
          if (dup2(a1[1], 2) == 2)
            return 0;
          result = 0;
          if (*a2)
            v12 = *a2;
          else
            v12 = -12;
        }
        goto LABEL_33;
      }
    }
    v12 = -5;
  }
LABEL_33:
  *a2 = v12;
  return result;
}

void PThreadEvent::PThreadEvent(PThreadEvent *this, int a2, int a3)
{
  if (pthread_mutex_init((pthread_mutex_t *)this, 0))
    PThreadEvent::PThreadEvent();
  pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0);
  pthread_cond_init((pthread_cond_t *)((char *)this + 112), 0);
  *((_DWORD *)this + 40) = a2;
  *((_DWORD *)this + 41) = a3;
  *((_DWORD *)this + 42) = 0;
}

void PThreadEvent::~PThreadEvent(PThreadEvent *this)
{
  pthread_cond_destroy((pthread_cond_t *)((char *)this + 112));
  pthread_cond_destroy((pthread_cond_t *)((char *)this + 64));
  if (pthread_mutex_destroy((pthread_mutex_t *)this))
  {
    if (!pthread_mutex_unlock((pthread_mutex_t *)this))
      pthread_mutex_destroy((pthread_mutex_t *)this);
  }
}

uint64_t PThreadEvent::GetEventBits(pthread_mutex_t *this)
{
  uint64_t v2;

  pthread_mutex_lock(this);
  v2 = *(unsigned int *)&this[2].__opaque[24];
  pthread_mutex_unlock(this);
  return v2;
}

pthread_mutex_t *PThreadEvent::SetEvents(pthread_mutex_t *this, int a2)
{
  pthread_mutex_t *v3;
  int v4;

  if (a2)
  {
    v3 = this;
    pthread_mutex_lock(this);
    v4 = *(_DWORD *)&v3[2].__opaque[24];
    *(_DWORD *)&v3[2].__opaque[24] = v4 | a2;
    if (v4 != (v4 | a2))
      pthread_cond_broadcast((pthread_cond_t *)&v3[1]);
    return (pthread_mutex_t *)pthread_mutex_unlock(v3);
  }
  return this;
}

pthread_mutex_t *PThreadEvent::ResetEvents(pthread_mutex_t *this, int a2)
{
  pthread_mutex_t *v3;
  int v4;
  int v5;

  if (a2)
  {
    v3 = this;
    pthread_mutex_lock(this);
    v4 = *(_DWORD *)&v3[2].__opaque[24];
    v5 = v4 & ~a2;
    *(_DWORD *)&v3[2].__opaque[24] = v5;
    if (v4 != v5)
      pthread_cond_broadcast((pthread_cond_t *)&v3[1].__opaque[40]);
    return (pthread_mutex_t *)pthread_mutex_unlock(v3);
  }
  return this;
}

uint64_t PThreadEvent::WaitForSetEvents(pthread_mutex_t *this, unsigned int a2, const timespec *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  pthread_cond_t *v9;

  pthread_mutex_lock(this);
  while (1)
  {
    v7 = *(_DWORD *)&this[2].__opaque[24];
    v8 = v7 & a2;
    if ((v7 & a2) != 0)
      break;
    v9 = (pthread_cond_t *)&this[1];
    if (a3)
    {
      v6 = pthread_cond_timedwait(v9, this, a3);
      if (v6 == 60)
      {
        v8 = *(_DWORD *)&this[2].__opaque[24] & a2;
        break;
      }
    }
    else
    {
      v6 = pthread_cond_wait(v9, this);
    }
    if (v6)
    {
      v8 = 0;
      break;
    }
  }
  pthread_mutex_unlock(this);
  return v8;
}

uint64_t PThreadEvent::WaitForEventsToReset(pthread_mutex_t *this, unsigned int a2, const timespec *a3)
{
  pthread_cond_t *v6;
  uint64_t v7;

  pthread_mutex_lock(this);
  while ((*(_DWORD *)&this[2].__opaque[24] & a2) != 0)
  {
    v6 = (pthread_cond_t *)&this[1].__opaque[40];
    if (a3)
    {
      if (pthread_cond_timedwait(v6, this, a3))
      {
LABEL_6:
        v7 = *(_DWORD *)&this[2].__opaque[24] & a2;
        goto LABEL_8;
      }
    }
    else if (pthread_cond_wait(v6, this))
    {
      goto LABEL_6;
    }
  }
  v7 = 0;
LABEL_8:
  pthread_mutex_unlock(this);
  return v7;
}

uint64_t PThreadEvent::WaitForResetAck(PThreadEvent *this, int a2, const timespec *a3)
{
  int v3;
  pthread_cond_t *v6;
  uint64_t v7;

  v3 = *((_DWORD *)this + 42) & a2;
  if (!v3)
    return 0;
  pthread_mutex_lock((pthread_mutex_t *)this);
  while ((*((_DWORD *)this + 40) & v3) != 0)
  {
    v6 = (pthread_cond_t *)((char *)this + 112);
    if (a3)
    {
      if (pthread_cond_timedwait(v6, (pthread_mutex_t *)this, a3))
      {
LABEL_7:
        v7 = *((_DWORD *)this + 40) & v3;
        goto LABEL_10;
      }
    }
    else if (pthread_cond_wait(v6, (pthread_mutex_t *)this))
    {
      goto LABEL_7;
    }
  }
  v7 = 0;
LABEL_10:
  pthread_mutex_unlock((pthread_mutex_t *)this);
  return v7;
}

void RNBContext::~RNBContext(void **this)
{
  void *v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;

  *this = off_100060D08;
  if (*((_DWORD *)this + 3))
    RNBContext::StopProcessStatusThread((RNBContext *)this);
  *((_DWORD *)this + 3) = 0;
  v2 = this[56];
  if (v2)
  {
    this[57] = v2;
    operator delete(v2);
  }
  if (*((char *)this + 439) < 0)
  {
    operator delete(this[52]);
    if ((*((char *)this + 415) & 0x80000000) == 0)
    {
LABEL_7:
      v3 = (void **)this[46];
      if (!v3)
        goto LABEL_8;
      goto LABEL_17;
    }
  }
  else if ((*((char *)this + 415) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(this[49]);
  v3 = (void **)this[46];
  if (!v3)
  {
LABEL_8:
    v4 = (void **)this[43];
    if (!v4)
      goto LABEL_9;
    goto LABEL_28;
  }
LABEL_17:
  v5 = (void **)this[47];
  v6 = v3;
  if (v5 != v3)
  {
    do
    {
      if (*((char *)v5 - 1) < 0)
        operator delete(*(v5 - 3));
      v5 -= 3;
    }
    while (v5 != v3);
    v6 = (void **)this[46];
  }
  this[47] = v3;
  operator delete(v6);
  v4 = (void **)this[43];
  if (!v4)
  {
LABEL_9:
    if ((*((char *)this + 343) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_35;
  }
LABEL_28:
  v7 = (void **)this[44];
  v8 = v4;
  if (v7 != v4)
  {
    do
    {
      if (*((char *)v7 - 1) < 0)
        operator delete(*(v7 - 3));
      v7 -= 3;
    }
    while (v7 != v4);
    v8 = (void **)this[43];
  }
  this[44] = v4;
  operator delete(v8);
  if (*((char *)this + 343) < 0)
LABEL_35:
    operator delete(this[40]);
LABEL_10:
  PThreadEvent::~PThreadEvent((PThreadEvent *)(this + 15));
  if (*((char *)this + 111) < 0)
  {
    operator delete(this[11]);
    if ((*((char *)this + 87) & 0x80000000) == 0)
    {
LABEL_12:
      if ((*((char *)this + 63) & 0x80000000) == 0)
        goto LABEL_13;
      goto LABEL_24;
    }
  }
  else if ((*((char *)this + 87) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(this[8]);
  if ((*((char *)this + 63) & 0x80000000) == 0)
  {
LABEL_13:
    if ((*((char *)this + 39) & 0x80000000) == 0)
      return;
LABEL_25:
    operator delete(this[2]);
    return;
  }
LABEL_24:
  operator delete(this[5]);
  if (*((char *)this + 39) < 0)
    goto LABEL_25;
}

{
  RNBContext::~RNBContext(this);
  operator delete();
}

void RNBContext::SetProcessID(RNBContext *this, int a2)
{
  if (*((_DWORD *)this + 3))
    RNBContext::StopProcessStatusThread(this);
  *((_DWORD *)this + 3) = a2;
  if (a2)
    RNBContext::StartProcessStatusThread((pthread_t *)this);
}

char *RNBContext::EnvironmentAtIndex(RNBContext *this, unint64_t a2)
{
  uint64_t v2;
  char *result;

  v2 = *((_QWORD *)this + 46);
  if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 47) - v2) >> 3) <= a2)
    return 0;
  result = (char *)(v2 + 24 * a2);
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

void RNBContext::PushEnvironmentIfNeeded(RNBContext *this, const char *__s)
{
  size_t v4;
  size_t v5;
  __int128 *p_dst;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  size_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned __int8 *v17;
  void **p_p;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  BOOL v25;
  BOOL v26;
  size_t v27;
  size_t v28;
  __int128 *v29;
  RNBContext *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  __int128 v34;
  char *v35;
  int v36;
  RNBContext *v37;
  const void *__s1;
  __int128 __dst;
  int64_t v40;
  void *__p;
  size_t v42;
  unsigned __int8 v43;

  if (!__s)
    return;
  v4 = strlen(__s);
  if (v4 > 0x7FFFFFFFFFFFFFF7)
LABEL_58:
    abort();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = v5;
    v40 = v8 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_9;
  }
  HIBYTE(v40) = v4;
  p_dst = &__dst;
  if (v4)
LABEL_9:
    memcpy(p_dst, __s, v5);
  *((_BYTE *)p_dst + v5) = 0;
  GetEnvironmentKey((uint64_t)&__dst, (uint64_t *)&__p);
  if (SHIBYTE(v40) < 0)
    operator delete((void *)__dst);
  v9 = *((_QWORD *)this + 46);
  v10 = *((_QWORD *)this + 47);
  v37 = this;
  if (v9 != v10)
  {
    v11 = (char)v43;
    v12 = v42;
    __s1 = __p;
    if ((v43 & 0x80u) == 0)
      v13 = v43;
    else
      v13 = v42;
    v14 = v43 - 1;
    do
    {
      GetEnvironmentKey(v9, (uint64_t *)&__dst);
      v15 = HIBYTE(v40);
      v16 = SHIBYTE(v40);
      if (v40 < 0)
        v15 = *((_QWORD *)&__dst + 1);
      if (v13 == v15)
      {
        if (v40 >= 0)
          v17 = (unsigned __int8 *)&__dst;
        else
          v17 = (unsigned __int8 *)__dst;
        if (v11 < 0)
        {
          v26 = memcmp(__s1, v17, v12) == 0;
        }
        else
        {
          if (!v11)
          {
            v26 = 1;
            if ((SHIBYTE(v40) & 0x80000000) == 0)
              goto LABEL_37;
LABEL_36:
            operator delete((void *)__dst);
            goto LABEL_37;
          }
          p_p = &__p;
          v19 = v14;
          do
          {
            v21 = *(unsigned __int8 *)p_p;
            p_p = (void **)((char *)p_p + 1);
            v20 = v21;
            v23 = *v17++;
            v22 = v23;
            v25 = v19-- != 0;
            v26 = v20 == v22;
          }
          while (v20 == v22 && v25);
        }
        if (v16 < 0)
          goto LABEL_36;
      }
      else
      {
        v26 = 0;
        if (SHIBYTE(v40) < 0)
          goto LABEL_36;
      }
LABEL_37:
      if (v26)
        goto LABEL_55;
      v9 += 24;
    }
    while (v9 != v10);
  }
  v27 = strlen(__s);
  if (v27 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_58;
  v28 = v27;
  if (v27 >= 0x17)
  {
    v31 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v31 = v27 | 7;
    v32 = v31 + 1;
    v29 = (__int128 *)operator new(v31 + 1);
    *((_QWORD *)&__dst + 1) = v28;
    v40 = v32 | 0x8000000000000000;
    *(_QWORD *)&__dst = v29;
    v30 = v37;
    goto LABEL_49;
  }
  HIBYTE(v40) = v27;
  v29 = &__dst;
  v30 = v37;
  if (v27)
LABEL_49:
    memcpy(v29, __s, v28);
  *((_BYTE *)v29 + v28) = 0;
  v33 = *((_QWORD *)v30 + 47);
  if (v33 >= *((_QWORD *)v30 + 48))
  {
    v35 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)v30 + 46, (uint64_t)&__dst);
    v36 = SHIBYTE(v40);
    *((_QWORD *)v30 + 47) = v35;
    if (v36 < 0)
      operator delete((void *)__dst);
  }
  else
  {
    v34 = __dst;
    *(_QWORD *)(v33 + 16) = v40;
    *(_OWORD *)v33 = v34;
    *((_QWORD *)v30 + 47) = v33 + 24;
  }
  LOBYTE(v11) = v43;
LABEL_55:
  if ((v11 & 0x80) != 0)
    operator delete(__p);
}

std::string::size_type GetEnvironmentKey@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type result;
  size_t v5;
  int v6;
  const void *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;

  result = std::string::find((const std::string *)a1, 61, 0);
  v5 = *(unsigned __int8 *)(a1 + 23);
  v6 = (char)v5;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a1 + 8);
  if (v6 >= 0)
    v7 = (const void *)a1;
  else
    v7 = *(const void **)a1;
  if (v5 >= result)
    v8 = result;
  else
    v8 = v5;
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v8 >= 0x17)
  {
    v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v10 = v8 | 7;
    v11 = v10 + 1;
    v9 = operator new(v10 + 1);
    a2[1] = v8;
    a2[2] = v11 | 0x8000000000000000;
    *a2 = (uint64_t)v9;
    goto LABEL_16;
  }
  *((_BYTE *)a2 + 23) = v8;
  v9 = a2;
  if (v8)
LABEL_16:
    result = (std::string::size_type)memmove(v9, v7, v8);
  *((_BYTE *)v9 + v8) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    v14 = a2[1];
    if (v14)
    {
      v15 = (uint64_t *)*a2;
      if (*(_BYTE *)(*a2 + v14 - 1) == 61)
      {
        v13 = v14 - 1;
        a2[1] = v13;
        a2 = v15;
        goto LABEL_24;
      }
    }
  }
  else
  {
    v12 = *((unsigned __int8 *)a2 + 23);
    if (*((_BYTE *)a2 + 23) && *((_BYTE *)a2 + v12 - 1) == 61)
    {
      v13 = v12 - 1;
      *((_BYTE *)a2 + 23) = v13;
LABEL_24:
      *((_BYTE *)a2 + v13) = 0;
    }
  }
  return result;
}

char *RNBContext::ArgumentAtIndex(RNBContext *this, unint64_t a2)
{
  uint64_t v2;
  char *result;

  v2 = *((_QWORD *)this + 43);
  if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 44) - v2) >> 3) <= a2)
    return 0;
  result = (char *)(v2 + 24 * a2);
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

BOOL RNBContext::SetWorkingDirectory(RNBContext *this, const char *a2)
{
  int v4;
  stat v6;

  v4 = stat(a2, &v6);
  if (v4)
  {
    if (*((char *)this + 415) < 0)
    {
      **((_BYTE **)this + 49) = 0;
      *((_QWORD *)this + 50) = 0;
    }
    else
    {
      *((_BYTE *)this + 392) = 0;
      *((_BYTE *)this + 415) = 0;
    }
  }
  else
  {
    std::string::assign((std::string *)((char *)this + 392), a2);
  }
  return v4 == 0;
}

void RNBContext::StopProcessStatusThread(RNBContext *this)
{
  pthread_mutex_t *v2;
  int v3;
  timespec v4;
  timeval v5;

  if (DNBLogEnabledForAny(0x400000))
    _DNBLogThreaded("RNBContext::%s called", "StopProcessStatusThread");
  v2 = (pthread_mutex_t *)((char *)this + 120);
  if ((PThreadEvent::GetEventBits(v2) & 2) != 0)
  {
    gettimeofday(&v5, 0);
    v4.tv_sec = v5.tv_sec + v5.tv_usec / 1000000 + 2;
    v4.tv_nsec = 1000 * v5.tv_usec % 1000000000;
    v3 = PThreadEvent::WaitForSetEvents(v2, 4u, &v4);
    if (DNBLogEnabledForAny(0x400000))
    {
      if (v3 == 4)
        _DNBLogThreaded("RNBContext::%s thread stopped as requeseted");
      else
        _DNBLogThreaded("RNBContext::%s thread did not stop in 2 seconds...");
    }
  }
}

void RNBContext::StartProcessStatusThread(pthread_t *this)
{
  pthread_mutex_t *v2;
  int v3;
  int v4;

  if (DNBLogEnabledForAny(0x400000))
    _DNBLogThreaded("RNBContext::%s called", "StartProcessStatusThread");
  v2 = (pthread_mutex_t *)(this + 15);
  if ((PThreadEvent::GetEventBits((pthread_mutex_t *)(this + 15)) & 2) == 0)
  {
    v3 = pthread_create(this + 37, 0, (void *(__cdecl *)(void *))RNBContext::ThreadFunctionProcessStatus, this);
    if (v3)
    {
      v4 = v3;
      if (DNBLogEnabledForAny(0x400000))
        _DNBLogThreaded("RNBContext::%s thread failed to start: err = %i", "StartProcessStatusThread", v4);
      PThreadEvent::ResetEvents(v2, 2);
      PThreadEvent::SetEvents(v2, 4);
    }
    else
    {
      PThreadEvent::WaitForSetEvents((pthread_mutex_t *)(this + 15), 2u, 0);
      if (DNBLogEnabledForAny(0x400000))
        _DNBLogThreaded("RNBContext::%s thread got started!", "StartProcessStatusThread");
    }
  }
}

uint64_t RNBContext::ThreadFunctionProcessStatus(RNBContext *this, void *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  int v7;
  pthread_mutex_t *v8;
  _opaque_pthread_t *v9;
  _opaque_pthread_t *v10;
  int v11;
  unsigned int State;
  const char *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  int v17;
  sched_param v18;

  v4 = g_remoteSP;
  v3 = (std::__shared_weak_count *)qword_1000716A0;
  if (qword_1000716A0)
  {
    v5 = (unint64_t *)(qword_1000716A0 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  if (v4)
  {
    v7 = *(_DWORD *)(v4 + 12);
    if (DNBLogEnabledForAny(0x400000))
      _DNBLogThreaded("RNBContext::%s (arg=%p, pid=%4.4x): thread starting...", "ThreadFunctionProcessStatus", this, v7);
    v8 = (pthread_mutex_t *)(v4 + 120);
    PThreadEvent::SetEvents(v8, 2);
    pthread_setname_np("child process status watcher thread");
    v17 = 0;
    v9 = pthread_self();
    if (!pthread_getschedparam(v9, &v17, &v18))
    {
      v18.sched_priority = 47;
      v10 = pthread_self();
      pthread_setschedparam(v10, v17, &v18);
    }
    while (1)
    {
      if (DNBLogEnabledForAny(0x400000))
        _DNBLogThreaded("RNBContext::%s calling DNBProcessWaitForEvent(pid, eEventProcessRunningStateChanged | eEventProcessStoppedStateChanged | eEventStdioAvailable | eEventProfileDataAvailable, true)...", "ThreadFunctionProcessStatus");
      v11 = DNBProcessWaitForEvents(v7, 0x1Bu, 1, 0);
      if (DNBLogEnabledForAny(0x400000))
      {
        _DNBLogThreaded("RNBContext::%s calling DNBProcessWaitForEvent(pid, eEventProcessRunningStateChanged | eEventProcessStoppedStateChanged | eEventStdioAvailable | eEventProfileDataAvailable, true) => 0x%8.8x", "ThreadFunctionProcessStatus", v11);
        if (!v11)
          goto LABEL_19;
LABEL_14:
        if ((v11 & 8) != 0)
        {
          if (DNBLogEnabledForAny(0x400000))
            _DNBLogThreaded("RNBContext::%s (pid=%4.4x) got stdio available event....", "ThreadFunctionProcessStatus", v7);
          PThreadEvent::SetEvents(v8, 8);
          PThreadEvent::WaitForResetAck((PThreadEvent *)v8, 8, 0);
          if ((v11 & 0x10) != 0)
          {
LABEL_24:
            if (DNBLogEnabledForAny(0x400000))
              _DNBLogThreaded("RNBContext::%s (pid=%4.4x) got profile data event....", "ThreadFunctionProcessStatus", v7);
            PThreadEvent::SetEvents(v8, 16);
            PThreadEvent::WaitForResetAck((PThreadEvent *)v8, 16, 0);
            if ((v11 & 3) == 0)
              goto LABEL_9;
            goto LABEL_27;
          }
        }
        else if ((v11 & 0x10) != 0)
        {
          goto LABEL_24;
        }
        if ((v11 & 3) == 0)
          goto LABEL_9;
LABEL_27:
        State = DNBProcessGetState(v7);
        if (DNBLogEnabledForAny(0x400000))
        {
          v13 = DNBStateAsString(State);
          _DNBLogThreaded("RNBContext::%s (pid=%4.4x) got process state change: %s", "ThreadFunctionProcessStatus", v7, v13);
        }
        PThreadEvent::SetEvents(v8, 1);
        PThreadEvent::WaitForResetAck((PThreadEvent *)v8, 1, 0);
        if (State <= 9 && ((1 << State) & 0x301) != 0)
        {
          DNBProcessResetEvents(v7, v11);
          if (DNBLogEnabledForAny(0x400000))
            _DNBLogThreaded("RNBContext::%s (arg=%p, pid=%4.4x): thread exiting...", "ThreadFunctionProcessStatus", this, v7);
          PThreadEvent::ResetEvents(v8, 2);
          PThreadEvent::SetEvents(v8, 4);
          break;
        }
LABEL_9:
        DNBProcessResetEvents(v7, v11);
      }
      else
      {
        if (v11)
          goto LABEL_14;
LABEL_19:
        if (DNBLogEnabledForAny(0x400000))
          _DNBLogThreaded("RNBContext::%s (pid=%4.4x) got ZERO back from DNBProcessWaitForEvent....", "ThreadFunctionProcessStatus", v7);
      }
    }
  }
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *, void *))v3->__on_zero_shared)(v3, a2);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return 0;
}

std::string *RNBContext::EventsAsString(int a1, char a2, std::string *this)
{
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    this->__r_.__value_.__s.__data_[0] = 0;
    *((_BYTE *)&this->__r_.__value_.__s + 23) = 0;
    if ((a2 & 1) == 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  *this->__r_.__value_.__l.__data_ = 0;
  this->__r_.__value_.__l.__size_ = 0;
  if ((a2 & 1) != 0)
LABEL_3:
    std::string::append(this, "proc_state_changed ");
LABEL_4:
  if ((a2 & 2) != 0)
  {
    std::string::append(this, "proc_thread_running ");
    if ((a2 & 4) == 0)
    {
LABEL_6:
      if ((a2 & 8) == 0)
        goto LABEL_7;
      goto LABEL_16;
    }
  }
  else if ((a2 & 4) == 0)
  {
    goto LABEL_6;
  }
  std::string::append(this, "proc_thread_exiting ");
  if ((a2 & 8) == 0)
  {
LABEL_7:
    if ((a2 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  std::string::append(this, "proc_stdio_available ");
  if ((a2 & 0x10) == 0)
  {
LABEL_8:
    if ((a2 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  std::string::append(this, "proc_profile_data ");
  if ((a2 & 0x20) == 0)
  {
LABEL_9:
    if ((a2 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
LABEL_18:
  std::string::append(this, "read_packet_available ");
  if ((a2 & 0x40) != 0)
  {
LABEL_10:
    std::string::append(this, "read_thread_running ");
    std::string::append(this, "read_thread_running ");
  }
LABEL_11:
  if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    return this;
  else
    return (std::string *)this->__r_.__value_.__r.__words[0];
}

uint64_t RNBContext::LaunchStatusAsString(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  char *v5;
  char __str[64];

  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v3 = (_DWORD *)(a1 + 312);
  v4 = DNBError::AsString((DNBError *)(a1 + 312));
  if (v4)
  {
    v5 = (char *)v4;
  }
  else
  {
    snprintf(__str, 0x40uLL, "%u", *v3);
    v5 = __str;
  }
  std::string::assign((std::string *)a2, v5);
  if (*(char *)(a2 + 23) >= 0)
    return a2;
  else
    return *(_QWORD *)a2;
}

BOOL RNBContext::ProcessStateRunning(RNBContext *this)
{
  return DNBProcessGetState(*((_DWORD *)this + 3)) - 5 < 2;
}

BOOL RNBContext::AddIgnoredException(RNBContext *this, MachException *a2)
{
  int v3;
  int v4;
  unint64_t v5;
  char *v6;
  _DWORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  _DWORD *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  int v24;

  v3 = MachException::ExceptionMask(a2, (const char *)a2);
  v4 = v3;
  if (v3)
  {
    v6 = (char *)*((_QWORD *)this + 57);
    v5 = *((_QWORD *)this + 58);
    if ((unint64_t)v6 >= v5)
    {
      v8 = (char *)*((_QWORD *)this + 56);
      v9 = (v6 - v8) >> 2;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 62)
        abort();
      v11 = v5 - (_QWORD)v8;
      if (v11 >> 1 > v10)
        v10 = v11 >> 1;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
        v12 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
      {
        if (v12 >> 62)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v13 = operator new(4 * v12);
      }
      else
      {
        v13 = 0;
      }
      v14 = &v13[4 * v9];
      v15 = &v13[4 * v12];
      *v14 = v4;
      v7 = v14 + 1;
      if (v6 != v8)
      {
        v16 = v6 - v8 - 4;
        if (v16 < 0x2C)
          goto LABEL_29;
        if ((unint64_t)(v8 - v13) < 0x20)
          goto LABEL_29;
        v17 = (v16 >> 2) + 1;
        v18 = 4 * (v17 & 0x7FFFFFFFFFFFFFF8);
        v19 = &v6[-v18];
        v14 = (_DWORD *)((char *)v14 - v18);
        v20 = &v13[4 * v9 - 16];
        v21 = v6 - 16;
        v22 = v17 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v23 = *(_OWORD *)v21;
          *(v20 - 1) = *((_OWORD *)v21 - 1);
          *v20 = v23;
          v20 -= 2;
          v21 -= 32;
          v22 -= 8;
        }
        while (v22);
        v6 = v19;
        if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_29:
          do
          {
            v24 = *((_DWORD *)v6 - 1);
            v6 -= 4;
            *--v14 = v24;
          }
          while (v6 != v8);
        }
      }
      *((_QWORD *)this + 56) = v14;
      *((_QWORD *)this + 57) = v7;
      *((_QWORD *)this + 58) = v15;
      if (v8)
        operator delete(v8);
    }
    else
    {
      *(_DWORD *)v6 = v3;
      v7 = v6 + 4;
    }
    *((_QWORD *)this + 57) = v7;
  }
  return v4 != 0;
}

void RNBContext::AddDefaultIgnoredExceptions(RNBContext *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  _DWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  __int128 *v17;
  uint64_t v18;
  __int128 v19;
  int v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  _DWORD *v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  int v37;
  _DWORD *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _BYTE *v44;
  _DWORD *v45;
  char *v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD *v51;
  char *v52;
  uint64_t v53;
  __int128 v54;
  int v55;

  v3 = (char *)*((_QWORD *)this + 57);
  v2 = (char *)*((_QWORD *)this + 58);
  v4 = v3;
  if (v3 >= v2)
  {
    v6 = (char *)*((_QWORD *)this + 56);
    v7 = (v3 - v6) >> 2;
    v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) >> 62)
      goto LABEL_69;
    v9 = v2 - v6;
    if (v9 >> 1 > v8)
      v8 = v9 >> 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
      v10 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 62)
        goto LABEL_70;
      v11 = operator new(4 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[4 * v7];
    v2 = &v11[4 * v10];
    *v12 = 2;
    v5 = (char *)(v12 + 1);
    if (v3 != v6)
    {
      v13 = v3 - v6 - 4;
      if (v13 < 0x2C)
        goto LABEL_73;
      if ((unint64_t)(v6 - v11) < 0x20)
        goto LABEL_73;
      v14 = (v13 >> 2) + 1;
      v15 = 4 * (v14 & 0x7FFFFFFFFFFFFFF8);
      v4 = &v3[-v15];
      v12 = (_DWORD *)((char *)v12 - v15);
      v16 = &v11[4 * v7 - 16];
      v17 = (__int128 *)(v3 - 16);
      v18 = v14 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v19 = *v17;
        *(v16 - 1) = *(v17 - 1);
        *v16 = v19;
        v16 -= 2;
        v17 -= 2;
        v18 -= 8;
      }
      while (v18);
      if (v14 != (v14 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_73:
        do
        {
          v20 = *((_DWORD *)v4 - 1);
          v4 -= 4;
          *--v12 = v20;
        }
        while (v4 != v6);
      }
    }
    *((_QWORD *)this + 56) = v12;
    *((_QWORD *)this + 57) = v5;
    *((_QWORD *)this + 58) = v2;
    if (v6)
    {
      operator delete(v6);
      v2 = (char *)*((_QWORD *)this + 58);
    }
  }
  else
  {
    *(_DWORD *)v3 = 2;
    v5 = v3 + 4;
  }
  *((_QWORD *)this + 57) = v5;
  if (v5 < v2)
  {
    *(_DWORD *)v5 = 4;
    v21 = v5 + 4;
    goto LABEL_45;
  }
  v22 = (char *)*((_QWORD *)this + 56);
  v23 = (v5 - v22) >> 2;
  v24 = v23 + 1;
  if ((unint64_t)(v23 + 1) >> 62)
    goto LABEL_69;
  v25 = v2 - v22;
  if (v25 >> 1 > v24)
    v24 = v25 >> 1;
  if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
    v26 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v26 = v24;
  if (v26)
  {
    if (v26 >> 62)
      goto LABEL_70;
    v27 = operator new(4 * v26);
  }
  else
  {
    v27 = 0;
  }
  v28 = &v27[4 * v23];
  v2 = &v27[4 * v26];
  *v28 = 4;
  v21 = (char *)(v28 + 1);
  if (v5 != v22)
  {
    v29 = v5 - v22 - 4;
    if (v29 < 0x2C)
    {
      v30 = v5;
      goto LABEL_42;
    }
    if ((unint64_t)(v22 - v27) < 0x20)
    {
      v30 = v5;
      do
      {
LABEL_42:
        v37 = *((_DWORD *)v30 - 1);
        v30 -= 4;
        *--v28 = v37;
      }
      while (v30 != v22);
      goto LABEL_43;
    }
    v31 = (v29 >> 2) + 1;
    v32 = 4 * (v31 & 0x7FFFFFFFFFFFFFF8);
    v30 = &v5[-v32];
    v28 = (_DWORD *)((char *)v28 - v32);
    v33 = &v27[4 * v23 - 16];
    v34 = v5 - 16;
    v35 = v31 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v36 = *(_OWORD *)v34;
      *(v33 - 1) = *((_OWORD *)v34 - 1);
      *v33 = v36;
      v33 -= 2;
      v34 -= 32;
      v35 -= 8;
    }
    while (v35);
    if (v31 != (v31 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_42;
  }
LABEL_43:
  *((_QWORD *)this + 56) = v28;
  *((_QWORD *)this + 57) = v21;
  *((_QWORD *)this + 58) = v2;
  if (v22)
  {
    operator delete(v22);
    v2 = (char *)*((_QWORD *)this + 58);
  }
LABEL_45:
  *((_QWORD *)this + 57) = v21;
  if (v21 < v2)
  {
    *(_DWORD *)v21 = 8;
    v38 = v21 + 4;
    goto LABEL_68;
  }
  v39 = (char *)*((_QWORD *)this + 56);
  v40 = (v21 - v39) >> 2;
  v41 = v40 + 1;
  if ((unint64_t)(v40 + 1) >> 62)
LABEL_69:
    abort();
  v42 = v2 - v39;
  if (v42 >> 1 > v41)
    v41 = v42 >> 1;
  if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
    v43 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v43 = v41;
  if (v43)
  {
    if (!(v43 >> 62))
    {
      v44 = operator new(4 * v43);
      goto LABEL_57;
    }
LABEL_70:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v44 = 0;
LABEL_57:
  v45 = &v44[4 * v40];
  v46 = &v44[4 * v43];
  *v45 = 8;
  v38 = v45 + 1;
  if (v21 == v39)
    goto LABEL_66;
  v47 = v21 - v39 - 4;
  if (v47 < 0x2C)
  {
    v48 = v21;
    goto LABEL_65;
  }
  if ((unint64_t)(v39 - v44) < 0x20)
  {
    v48 = v21;
    do
    {
LABEL_65:
      v55 = *((_DWORD *)v48 - 1);
      v48 -= 4;
      *--v45 = v55;
    }
    while (v48 != v39);
    goto LABEL_66;
  }
  v49 = (v47 >> 2) + 1;
  v50 = 4 * (v49 & 0x7FFFFFFFFFFFFFF8);
  v48 = &v21[-v50];
  v45 = (_DWORD *)((char *)v45 - v50);
  v51 = &v44[4 * v40 - 16];
  v52 = v21 - 16;
  v53 = v49 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v54 = *(_OWORD *)v52;
    *(v51 - 1) = *((_OWORD *)v52 - 1);
    *v51 = v54;
    v51 -= 2;
    v52 -= 32;
    v53 -= 8;
  }
  while (v53);
  if (v49 != (v49 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_65;
LABEL_66:
  *((_QWORD *)this + 56) = v45;
  *((_QWORD *)this + 57) = v38;
  *((_QWORD *)this + 58) = v46;
  if (v39)
    operator delete(v39);
LABEL_68:
  *((_QWORD *)this + 57) = v38;
}

_QWORD *std::string::basic_string[abi:nn180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void RNBRemote::RNBRemote(RNBRemote *this)
{
  __int128 v2;

  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_QWORD *)this = off_100060D08;
  *(_OWORD *)((char *)this + 12) = 0u;
  *(_OWORD *)((char *)this + 28) = 0u;
  *(_OWORD *)((char *)this + 44) = 0u;
  *(_OWORD *)((char *)this + 60) = 0u;
  *(_OWORD *)((char *)this + 76) = 0u;
  *(_OWORD *)((char *)this + 92) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  PThreadEvent::PThreadEvent((RNBRemote *)((char *)this + 120), 0, 255);
  *((_DWORD *)this + 76) = 0;
  *((_QWORD *)this + 56) = 0;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *((_BYTE *)this + 440) = 0;
  *((_DWORD *)this + 118) = -1;
  *((_WORD *)this + 238) = 0;
  *((_QWORD *)this + 60) = 0;
  DNBTimer::DNBTimer((RNBRemote *)((char *)this + 488), 1);
  *((_QWORD *)this + 66) = 0;
  *((_OWORD *)this + 32) = 0u;
  *((_QWORD *)this + 67) = -1;
  *((_QWORD *)this + 68) = -1;
  if (pthread_mutex_init((pthread_mutex_t *)((char *)this + 552), 0))
    PThreadEvent::PThreadEvent();
  *((_WORD *)this + 324) = -1;
  *(_QWORD *)&v2 = -1;
  *((_QWORD *)&v2 + 1) = -1;
  *(_OWORD *)((char *)this + 616) = v2;
  *(_OWORD *)((char *)this + 632) = v2;
  *((_QWORD *)this + 82) = -1;
  *((_DWORD *)this + 166) = -1;
  *(_OWORD *)((char *)this + 668) = 0u;
  *(_OWORD *)((char *)this + 684) = 0u;
  *(_OWORD *)((char *)this + 700) = 0u;
  *(_OWORD *)((char *)this + 716) = 0u;
  *(_OWORD *)((char *)this + 732) = 0u;
  *(_OWORD *)((char *)this + 748) = 0u;
  *(_OWORD *)((char *)this + 760) = 0u;
  *((_QWORD *)this + 97) = 395;
  *((_QWORD *)this + 98) = 384;
  *((_BYTE *)this + 792) = 0;
  *((_DWORD *)this + 199) = 4;
  if (DNBLogEnabledForAny(0x100000))
    _DNBLogThreaded("%s", "RNBRemote::RNBRemote()");
  RNBRemote::CreatePacketTable(this);
}

void RNBRemote::CreatePacketTable(RNBRemote *this)
{
  void **v2;
  char **v3;
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  char *v9;
  int v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  char *v16;
  int v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  int v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  int v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char *v37;
  int v38;
  unint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  char *v44;
  int v45;
  unint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  char *v51;
  int v52;
  unint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  char *v58;
  int v59;
  unint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  char *v65;
  int v66;
  unint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  char *v72;
  int v73;
  unint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  char *v79;
  int v80;
  unint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  char *v86;
  int v87;
  unint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  char *v93;
  int v94;
  unint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  char *v100;
  int v101;
  unint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  char *v107;
  int v108;
  unint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  char *v114;
  int v115;
  unint64_t v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  char *v121;
  int v122;
  unint64_t v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  char *v128;
  int v129;
  unint64_t v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  char *v135;
  int v136;
  unint64_t v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  char *v142;
  int v143;
  unint64_t v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  char *v149;
  int v150;
  unint64_t v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  uint64_t v155;
  char *v156;
  int v157;
  unint64_t v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  uint64_t v162;
  char *v163;
  int v164;
  unint64_t v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  uint64_t v169;
  char *v170;
  int v171;
  unint64_t v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  char *v177;
  int v178;
  unint64_t v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  uint64_t v183;
  char *v184;
  int v185;
  unint64_t v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  uint64_t v190;
  char *v191;
  int v192;
  unint64_t v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  uint64_t v197;
  char *v198;
  int v199;
  unint64_t v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  char *v205;
  int v206;
  unint64_t v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  uint64_t v211;
  char *v212;
  int v213;
  unint64_t v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  uint64_t v218;
  char *v219;
  int v220;
  unint64_t v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  uint64_t v225;
  char *v226;
  int v227;
  unint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  uint64_t v232;
  char *v233;
  int v234;
  unint64_t v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  uint64_t v239;
  char *v240;
  int v241;
  unint64_t v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  uint64_t v246;
  char *v247;
  int v248;
  unint64_t v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  uint64_t v253;
  char *v254;
  int v255;
  unint64_t v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  uint64_t v260;
  char *v261;
  int v262;
  unint64_t v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  uint64_t v267;
  char *v268;
  int v269;
  unint64_t v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  uint64_t v274;
  char *v275;
  int v276;
  unint64_t v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  uint64_t v281;
  char *v282;
  int v283;
  unint64_t v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  uint64_t v288;
  char *v289;
  int v290;
  unint64_t v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  uint64_t v295;
  char *v296;
  int v297;
  unint64_t v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  uint64_t v302;
  char *v303;
  int v304;
  unint64_t v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  uint64_t v309;
  char *v310;
  int v311;
  unint64_t v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  uint64_t v316;
  char *v317;
  int v318;
  unint64_t v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  uint64_t v323;
  char *v324;
  int v325;
  unint64_t v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  uint64_t v330;
  char *v331;
  int v332;
  unint64_t v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  uint64_t v337;
  char *v338;
  int v339;
  unint64_t v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  uint64_t v344;
  char *v345;
  int v346;
  unint64_t v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  uint64_t v351;
  char *v352;
  int v353;
  unint64_t v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  uint64_t v358;
  char *v359;
  int v360;
  unint64_t v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  uint64_t v365;
  char *v366;
  int v367;
  unint64_t v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  uint64_t v372;
  char *v373;
  int v374;
  unint64_t v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  uint64_t v379;
  char *v380;
  int v381;
  unint64_t v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  uint64_t v386;
  char *v387;
  int v388;
  unint64_t v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  uint64_t v393;
  char *v394;
  int v395;
  unint64_t v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  uint64_t v400;
  char *v401;
  int v402;
  unint64_t v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  uint64_t v407;
  char *v408;
  int v409;
  unint64_t v410;
  __int128 v411;
  __int128 v412;
  __int128 v413;
  uint64_t v414;
  char *v415;
  int v416;
  unint64_t v417;
  __int128 v418;
  __int128 v419;
  __int128 v420;
  uint64_t v421;
  char *v422;
  int v423;
  unint64_t v424;
  __int128 v425;
  __int128 v426;
  __int128 v427;
  uint64_t v428;
  char *v429;
  int v430;
  unint64_t v431;
  __int128 v432;
  __int128 v433;
  __int128 v434;
  uint64_t v435;
  char *v436;
  int v437;
  unint64_t v438;
  __int128 v439;
  __int128 v440;
  __int128 v441;
  uint64_t v442;
  char *v443;
  int v444;
  unint64_t v445;
  __int128 v446;
  __int128 v447;
  __int128 v448;
  uint64_t v449;
  char *v450;
  int v451;
  unint64_t v452;
  __int128 v453;
  __int128 v454;
  __int128 v455;
  uint64_t v456;
  char *v457;
  int v458;
  unint64_t v459;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  uint64_t v463;
  char *v464;
  int v465;
  unint64_t v466;
  __int128 v467;
  __int128 v468;
  __int128 v469;
  uint64_t v470;
  char *v471;
  int v472;
  unint64_t v473;
  __int128 v474;
  __int128 v475;
  __int128 v476;
  uint64_t v477;
  char *v478;
  int v479;
  unint64_t v480;
  __int128 v481;
  __int128 v482;
  __int128 v483;
  uint64_t v484;
  char *v485;
  int v486;
  unint64_t v487;
  __int128 v488;
  __int128 v489;
  __int128 v490;
  uint64_t v491;
  char *v492;
  int v493;
  unint64_t v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  uint64_t v498;
  char *v499;
  int v500;
  unint64_t v501;
  __int128 v502;
  __int128 v503;
  __int128 v504;
  uint64_t v505;
  char *v506;
  int v507;
  unint64_t v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  uint64_t v512;
  char *v513;
  int v514;
  unint64_t v515;
  __int128 v516;
  __int128 v517;
  __int128 v518;
  uint64_t v519;
  char *v520;
  int v521;
  unint64_t v522;
  __int128 v523;
  __int128 v524;
  __int128 v525;
  uint64_t v526;
  char *v527;
  int v528;
  unint64_t v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  uint64_t v533;
  char *v534;
  int v535;
  unint64_t v536;
  __int128 v537;
  __int128 v538;
  __int128 v539;
  uint64_t v540;
  char *v541;
  int v542;
  unint64_t v543;
  __int128 v544;
  __int128 v545;
  __int128 v546;
  uint64_t v547;
  char *v548;
  int v549;
  unint64_t v550;
  __int128 v551;
  __int128 v552;
  __int128 v553;
  uint64_t v554;
  char *v555;
  int v556;
  unint64_t v557;
  __int128 v558;
  __int128 v559;
  __int128 v560;
  uint64_t v561;
  char *v562;
  int v563;
  unint64_t v564;
  __int128 v565;
  __int128 v566;
  __int128 v567;
  uint64_t v568;
  char *v569;
  int v570;
  unint64_t v571;
  __int128 v572;
  __int128 v573;
  __int128 v574;
  uint64_t v575;
  char *v576;
  int v577;
  unint64_t v578;
  __int128 v579;
  __int128 v580;
  __int128 v581;
  uint64_t v582;
  char *v583;
  int v584;
  unint64_t v585;
  __int128 v586;
  __int128 v587;
  __int128 v588;
  uint64_t v589;
  char *v590;
  int v591;
  unint64_t v592;
  __int128 v593;
  __int128 v594;
  __int128 v595;
  uint64_t v596;
  char *v597;
  int v598;
  unint64_t v599;
  __int128 v600;
  __int128 v601;
  __int128 v602;
  uint64_t v603;
  char *v604;
  int v605;
  unint64_t v606;
  __int128 v607;
  __int128 v608;
  __int128 v609;
  uint64_t v610;
  char *v611;
  int v612;
  unint64_t v613;
  __int128 v614;
  __int128 v615;
  __int128 v616;
  uint64_t v617;
  char *v618;
  int v619;
  unint64_t v620;
  __int128 v621;
  __int128 v622;
  __int128 v623;
  uint64_t v624;
  char *v625;
  int v626;
  unint64_t v627;
  __int128 v628;
  __int128 v629;
  __int128 v630;
  uint64_t v631;
  char *v632;
  int v633;
  __int128 v634;
  __int128 v635;
  uint64_t v636;
  void *__p[2];
  uint64_t v638;
  void *v639[2];
  uint64_t v640;

  v2 = (void **)((char *)this + 672);
  RNBRemote::Packet::Packet((uint64_t)&v634, 1, 0, 0, 0, 0, "+", "ACK");
  v3 = (char **)((char *)this + 680);
  v4 = *((_QWORD *)this + 85);
  if (v4 < *((_QWORD *)this + 86))
  {
    v5 = v634;
    v6 = v635;
    *(_QWORD *)(v4 + 32) = v636;
    *(_OWORD *)v4 = v5;
    *(_OWORD *)(v4 + 16) = v6;
    v7 = *(_OWORD *)__p;
    *(_QWORD *)(v4 + 56) = v638;
    *(_OWORD *)(v4 + 40) = v7;
    __p[0] = 0;
    __p[1] = 0;
    v8 = v640;
    *(_OWORD *)(v4 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v4 + 80) = v8;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v4 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
  v9 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v10 = SHIBYTE(v640);
  *v3 = v9;
  if ((v10 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_6:
    operator delete(__p[0]);
LABEL_7:
  RNBRemote::Packet::Packet((uint64_t)&v634, 2, 0, 0, 0, 0, "-", "!ACK");
  v11 = *((_QWORD *)this + 85);
  if (v11 < *((_QWORD *)this + 86))
  {
    v12 = v634;
    v13 = v635;
    *(_QWORD *)(v11 + 32) = v636;
    *(_OWORD *)v11 = v12;
    *(_OWORD *)(v11 + 16) = v13;
    v14 = *(_OWORD *)__p;
    *(_QWORD *)(v11 + 56) = v638;
    *(_OWORD *)(v11 + 40) = v14;
    __p[0] = 0;
    __p[1] = 0;
    v15 = v640;
    *(_OWORD *)(v11 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v11 + 80) = v15;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v11 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_12;
  }
  v16 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v17 = SHIBYTE(v640);
  *v3 = v16;
  if ((v17 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_12;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_12:
    operator delete(__p[0]);
LABEL_13:
  RNBRemote::Packet::Packet((uint64_t)&v634, 17, (uint64_t)RNBRemote::HandlePacket_m, 0, 0, 0, "m", "Read memory");
  v18 = *((_QWORD *)this + 85);
  if (v18 < *((_QWORD *)this + 86))
  {
    v19 = v634;
    v20 = v635;
    *(_QWORD *)(v18 + 32) = v636;
    *(_OWORD *)v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    v21 = *(_OWORD *)__p;
    *(_QWORD *)(v18 + 56) = v638;
    *(_OWORD *)(v18 + 40) = v21;
    __p[0] = 0;
    __p[1] = 0;
    v22 = v640;
    *(_OWORD *)(v18 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v18 + 80) = v22;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v18 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
  v23 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v24 = SHIBYTE(v640);
  *v3 = v23;
  if ((v24 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_18:
    operator delete(__p[0]);
LABEL_19:
  RNBRemote::Packet::Packet((uint64_t)&v634, 19, (uint64_t)RNBRemote::HandlePacket_p, 0, 0, 0, "p", "Read one register");
  v25 = *((_QWORD *)this + 85);
  if (v25 < *((_QWORD *)this + 86))
  {
    v26 = v634;
    v27 = v635;
    *(_QWORD *)(v25 + 32) = v636;
    *(_OWORD *)v25 = v26;
    *(_OWORD *)(v25 + 16) = v27;
    v28 = *(_OWORD *)__p;
    *(_QWORD *)(v25 + 56) = v638;
    *(_OWORD *)(v25 + 40) = v28;
    __p[0] = 0;
    __p[1] = 0;
    v29 = v640;
    *(_OWORD *)(v25 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v25 + 80) = v29;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v25 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_24;
  }
  v30 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v31 = SHIBYTE(v640);
  *v3 = v30;
  if ((v31 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_24;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_24:
    operator delete(__p[0]);
LABEL_25:
  RNBRemote::Packet::Packet((uint64_t)&v634, 11, (uint64_t)RNBRemote::HandlePacket_g, 0, 0, 0, "g", "Read registers");
  v32 = *((_QWORD *)this + 85);
  if (v32 < *((_QWORD *)this + 86))
  {
    v33 = v634;
    v34 = v635;
    *(_QWORD *)(v32 + 32) = v636;
    *(_OWORD *)v32 = v33;
    *(_OWORD *)(v32 + 16) = v34;
    v35 = *(_OWORD *)__p;
    *(_QWORD *)(v32 + 56) = v638;
    *(_OWORD *)(v32 + 40) = v35;
    __p[0] = 0;
    __p[1] = 0;
    v36 = v640;
    *(_OWORD *)(v32 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v32 + 80) = v36;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v32 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_31;
    goto LABEL_30;
  }
  v37 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v38 = SHIBYTE(v640);
  *v3 = v37;
  if ((v38 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_31;
    goto LABEL_30;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_30:
    operator delete(__p[0]);
LABEL_31:
  RNBRemote::Packet::Packet((uint64_t)&v634, 18, (uint64_t)RNBRemote::HandlePacket_M, 0, 0, 0, "M", "Write memory");
  v39 = *((_QWORD *)this + 85);
  if (v39 < *((_QWORD *)this + 86))
  {
    v40 = v634;
    v41 = v635;
    *(_QWORD *)(v39 + 32) = v636;
    *(_OWORD *)v39 = v40;
    *(_OWORD *)(v39 + 16) = v41;
    v42 = *(_OWORD *)__p;
    *(_QWORD *)(v39 + 56) = v638;
    *(_OWORD *)(v39 + 40) = v42;
    __p[0] = 0;
    __p[1] = 0;
    v43 = v640;
    *(_OWORD *)(v39 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v39 + 80) = v43;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v39 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_37;
    goto LABEL_36;
  }
  v44 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v45 = SHIBYTE(v640);
  *v3 = v44;
  if ((v45 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_37;
    goto LABEL_36;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_36:
    operator delete(__p[0]);
LABEL_37:
  RNBRemote::Packet::Packet((uint64_t)&v634, 20, (uint64_t)RNBRemote::HandlePacket_P, 0, 0, 0, "P", "Write one register");
  v46 = *((_QWORD *)this + 85);
  if (v46 < *((_QWORD *)this + 86))
  {
    v47 = v634;
    v48 = v635;
    *(_QWORD *)(v46 + 32) = v636;
    *(_OWORD *)v46 = v47;
    *(_OWORD *)(v46 + 16) = v48;
    v49 = *(_OWORD *)__p;
    *(_QWORD *)(v46 + 56) = v638;
    *(_OWORD *)(v46 + 40) = v49;
    __p[0] = 0;
    __p[1] = 0;
    v50 = v640;
    *(_OWORD *)(v46 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v46 + 80) = v50;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v46 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_43;
    goto LABEL_42;
  }
  v51 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v52 = SHIBYTE(v640);
  *v3 = v51;
  if ((v52 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_43;
    goto LABEL_42;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_42:
    operator delete(__p[0]);
LABEL_43:
  RNBRemote::Packet::Packet((uint64_t)&v634, 12, (uint64_t)RNBRemote::HandlePacket_G, 0, 0, 0, "G", "Write registers");
  v53 = *((_QWORD *)this + 85);
  if (v53 < *((_QWORD *)this + 86))
  {
    v54 = v634;
    v55 = v635;
    *(_QWORD *)(v53 + 32) = v636;
    *(_OWORD *)v53 = v54;
    *(_OWORD *)(v53 + 16) = v55;
    v56 = *(_OWORD *)__p;
    *(_QWORD *)(v53 + 56) = v638;
    *(_OWORD *)(v53 + 40) = v56;
    __p[0] = 0;
    __p[1] = 0;
    v57 = v640;
    *(_OWORD *)(v53 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v53 + 80) = v57;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v53 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_49;
    goto LABEL_48;
  }
  v58 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v59 = SHIBYTE(v640);
  *v3 = v58;
  if ((v59 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_49;
    goto LABEL_48;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_48:
    operator delete(__p[0]);
LABEL_49:
  RNBRemote::Packet::Packet((uint64_t)&v634, 34, (uint64_t)RNBRemote::HandlePacket_z, 0, 0, 0, "Z0", "Insert memory breakpoint");
  v60 = *((_QWORD *)this + 85);
  if (v60 < *((_QWORD *)this + 86))
  {
    v61 = v634;
    v62 = v635;
    *(_QWORD *)(v60 + 32) = v636;
    *(_OWORD *)v60 = v61;
    *(_OWORD *)(v60 + 16) = v62;
    v63 = *(_OWORD *)__p;
    *(_QWORD *)(v60 + 56) = v638;
    *(_OWORD *)(v60 + 40) = v63;
    __p[0] = 0;
    __p[1] = 0;
    v64 = v640;
    *(_OWORD *)(v60 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v60 + 80) = v64;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v60 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_55;
    goto LABEL_54;
  }
  v65 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v66 = SHIBYTE(v640);
  *v3 = v65;
  if ((v66 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_55;
    goto LABEL_54;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_54:
    operator delete(__p[0]);
LABEL_55:
  RNBRemote::Packet::Packet((uint64_t)&v634, 35, (uint64_t)RNBRemote::HandlePacket_z, 0, 0, 0, "z0", "Remove memory breakpoint");
  v67 = *((_QWORD *)this + 85);
  if (v67 < *((_QWORD *)this + 86))
  {
    v68 = v634;
    v69 = v635;
    *(_QWORD *)(v67 + 32) = v636;
    *(_OWORD *)v67 = v68;
    *(_OWORD *)(v67 + 16) = v69;
    v70 = *(_OWORD *)__p;
    *(_QWORD *)(v67 + 56) = v638;
    *(_OWORD *)(v67 + 40) = v70;
    __p[0] = 0;
    __p[1] = 0;
    v71 = v640;
    *(_OWORD *)(v67 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v67 + 80) = v71;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v67 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_61;
    goto LABEL_60;
  }
  v72 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v73 = SHIBYTE(v640);
  *v3 = v72;
  if ((v73 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_61;
    goto LABEL_60;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_60:
    operator delete(__p[0]);
LABEL_61:
  RNBRemote::Packet::Packet((uint64_t)&v634, 22, (uint64_t)RNBRemote::HandlePacket_s, 0, 0, 0, "s", "Single step");
  v74 = *((_QWORD *)this + 85);
  if (v74 < *((_QWORD *)this + 86))
  {
    v75 = v634;
    v76 = v635;
    *(_QWORD *)(v74 + 32) = v636;
    *(_OWORD *)v74 = v75;
    *(_OWORD *)(v74 + 16) = v76;
    v77 = *(_OWORD *)__p;
    *(_QWORD *)(v74 + 56) = v638;
    *(_OWORD *)(v74 + 40) = v77;
    __p[0] = 0;
    __p[1] = 0;
    v78 = v640;
    *(_OWORD *)(v74 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v74 + 80) = v78;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v74 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_67;
    goto LABEL_66;
  }
  v79 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v80 = SHIBYTE(v640);
  *v3 = v79;
  if ((v80 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_67;
    goto LABEL_66;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_66:
    operator delete(__p[0]);
LABEL_67:
  RNBRemote::Packet::Packet((uint64_t)&v634, 8, (uint64_t)RNBRemote::HandlePacket_c, 0, 0, 0, "c", "continue");
  v81 = *((_QWORD *)this + 85);
  if (v81 < *((_QWORD *)this + 86))
  {
    v82 = v634;
    v83 = v635;
    *(_QWORD *)(v81 + 32) = v636;
    *(_OWORD *)v81 = v82;
    *(_OWORD *)(v81 + 16) = v83;
    v84 = *(_OWORD *)__p;
    *(_QWORD *)(v81 + 56) = v638;
    *(_OWORD *)(v81 + 40) = v84;
    __p[0] = 0;
    __p[1] = 0;
    v85 = v640;
    *(_OWORD *)(v81 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v81 + 80) = v85;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v81 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_73;
    goto LABEL_72;
  }
  v86 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v87 = SHIBYTE(v640);
  *v3 = v86;
  if ((v87 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_73;
    goto LABEL_72;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_72:
    operator delete(__p[0]);
LABEL_73:
  RNBRemote::Packet::Packet((uint64_t)&v634, 23, (uint64_t)RNBRemote::HandlePacket_S, 0, 0, 0, "S", "Single step with signal");
  v88 = *((_QWORD *)this + 85);
  if (v88 < *((_QWORD *)this + 86))
  {
    v89 = v634;
    v90 = v635;
    *(_QWORD *)(v88 + 32) = v636;
    *(_OWORD *)v88 = v89;
    *(_OWORD *)(v88 + 16) = v90;
    v91 = *(_OWORD *)__p;
    *(_QWORD *)(v88 + 56) = v638;
    *(_OWORD *)(v88 + 40) = v91;
    __p[0] = 0;
    __p[1] = 0;
    v92 = v640;
    *(_OWORD *)(v88 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v88 + 80) = v92;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v88 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_79;
    goto LABEL_78;
  }
  v93 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v94 = SHIBYTE(v640);
  *v3 = v93;
  if ((v94 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_79;
    goto LABEL_78;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_78:
    operator delete(__p[0]);
LABEL_79:
  RNBRemote::Packet::Packet((uint64_t)&v634, 13, (uint64_t)RNBRemote::HandlePacket_H, 0, 0, 0, "H", "Set thread");
  v95 = *((_QWORD *)this + 85);
  if (v95 < *((_QWORD *)this + 86))
  {
    v96 = v634;
    v97 = v635;
    *(_QWORD *)(v95 + 32) = v636;
    *(_OWORD *)v95 = v96;
    *(_OWORD *)(v95 + 16) = v97;
    v98 = *(_OWORD *)__p;
    *(_QWORD *)(v95 + 56) = v638;
    *(_OWORD *)(v95 + 40) = v98;
    __p[0] = 0;
    __p[1] = 0;
    v99 = v640;
    *(_OWORD *)(v95 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v95 + 80) = v99;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v95 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_85;
    goto LABEL_84;
  }
  v100 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v101 = SHIBYTE(v640);
  *v3 = v100;
  if ((v101 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_85;
    goto LABEL_84;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_84:
    operator delete(__p[0]);
LABEL_85:
  RNBRemote::Packet::Packet((uint64_t)&v634, 3, (uint64_t)RNBRemote::HandlePacket_last_signal, 0, (uint64_t)RNBRemote::HandlePacket_stop_process, 0, "\x03", "^C");
  v102 = *((_QWORD *)this + 85);
  if (v102 < *((_QWORD *)this + 86))
  {
    v103 = v634;
    v104 = v635;
    *(_QWORD *)(v102 + 32) = v636;
    *(_OWORD *)v102 = v103;
    *(_OWORD *)(v102 + 16) = v104;
    v105 = *(_OWORD *)__p;
    *(_QWORD *)(v102 + 56) = v638;
    *(_OWORD *)(v102 + 40) = v105;
    __p[0] = 0;
    __p[1] = 0;
    v106 = v640;
    *(_OWORD *)(v102 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v102 + 80) = v106;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v102 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_91;
    goto LABEL_90;
  }
  v107 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v108 = SHIBYTE(v640);
  *v3 = v107;
  if ((v108 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_91;
    goto LABEL_90;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_90:
    operator delete(__p[0]);
LABEL_91:
  RNBRemote::Packet::Packet((uint64_t)&v634, 5, (uint64_t)RNBRemote::HandlePacket_last_signal, 0, 0, 0, "?", "Why did target halt");
  v109 = *((_QWORD *)this + 85);
  if (v109 < *((_QWORD *)this + 86))
  {
    v110 = v634;
    v111 = v635;
    *(_QWORD *)(v109 + 32) = v636;
    *(_OWORD *)v109 = v110;
    *(_OWORD *)(v109 + 16) = v111;
    v112 = *(_OWORD *)__p;
    *(_QWORD *)(v109 + 56) = v638;
    *(_OWORD *)(v109 + 40) = v112;
    __p[0] = 0;
    __p[1] = 0;
    v113 = v640;
    *(_OWORD *)(v109 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v109 + 80) = v113;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v109 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_97;
    goto LABEL_96;
  }
  v114 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v115 = SHIBYTE(v640);
  *v3 = v114;
  if ((v115 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_97;
    goto LABEL_96;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_96:
    operator delete(__p[0]);
LABEL_97:
  RNBRemote::Packet::Packet((uint64_t)&v634, 6, (uint64_t)RNBRemote::HandlePacket_A, 0, 0, 0, "A", "Set argv");
  v116 = *((_QWORD *)this + 85);
  if (v116 < *((_QWORD *)this + 86))
  {
    v117 = v634;
    v118 = v635;
    *(_QWORD *)(v116 + 32) = v636;
    *(_OWORD *)v116 = v117;
    *(_OWORD *)(v116 + 16) = v118;
    v119 = *(_OWORD *)__p;
    *(_QWORD *)(v116 + 56) = v638;
    *(_OWORD *)(v116 + 40) = v119;
    __p[0] = 0;
    __p[1] = 0;
    v120 = v640;
    *(_OWORD *)(v116 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v116 + 80) = v120;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v116 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_103;
    goto LABEL_102;
  }
  v121 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v122 = SHIBYTE(v640);
  *v3 = v121;
  if ((v122 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_103;
    goto LABEL_102;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_102:
    operator delete(__p[0]);
LABEL_103:
  RNBRemote::Packet::Packet((uint64_t)&v634, 9, (uint64_t)RNBRemote::HandlePacket_C, 0, 0, 0, "C", "Continue with signal");
  v123 = *((_QWORD *)this + 85);
  if (v123 < *((_QWORD *)this + 86))
  {
    v124 = v634;
    v125 = v635;
    *(_QWORD *)(v123 + 32) = v636;
    *(_OWORD *)v123 = v124;
    *(_OWORD *)(v123 + 16) = v125;
    v126 = *(_OWORD *)__p;
    *(_QWORD *)(v123 + 56) = v638;
    *(_OWORD *)(v123 + 40) = v126;
    __p[0] = 0;
    __p[1] = 0;
    v127 = v640;
    *(_OWORD *)(v123 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v123 + 80) = v127;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v123 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_109;
    goto LABEL_108;
  }
  v128 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v129 = SHIBYTE(v640);
  *v3 = v128;
  if ((v129 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_109;
    goto LABEL_108;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_108:
    operator delete(__p[0]);
LABEL_109:
  RNBRemote::Packet::Packet((uint64_t)&v634, 10, (uint64_t)RNBRemote::HandlePacket_D, 0, 0, 0, "D", "Detach gdb from remote system");
  v130 = *((_QWORD *)this + 85);
  if (v130 < *((_QWORD *)this + 86))
  {
    v131 = v634;
    v132 = v635;
    *(_QWORD *)(v130 + 32) = v636;
    *(_OWORD *)v130 = v131;
    *(_OWORD *)(v130 + 16) = v132;
    v133 = *(_OWORD *)__p;
    *(_QWORD *)(v130 + 56) = v638;
    *(_OWORD *)(v130 + 40) = v133;
    __p[0] = 0;
    __p[1] = 0;
    v134 = v640;
    *(_OWORD *)(v130 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v130 + 80) = v134;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v130 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_115;
    goto LABEL_114;
  }
  v135 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v136 = SHIBYTE(v640);
  *v3 = v135;
  if ((v136 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_115;
    goto LABEL_114;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_114:
    operator delete(__p[0]);
LABEL_115:
  RNBRemote::Packet::Packet((uint64_t)&v634, 16, (uint64_t)RNBRemote::HandlePacket_k, 0, 0, 0, "k", "Kill");
  v137 = *((_QWORD *)this + 85);
  if (v137 < *((_QWORD *)this + 86))
  {
    v138 = v634;
    v139 = v635;
    *(_QWORD *)(v137 + 32) = v636;
    *(_OWORD *)v137 = v138;
    *(_OWORD *)(v137 + 16) = v139;
    v140 = *(_OWORD *)__p;
    *(_QWORD *)(v137 + 56) = v638;
    *(_OWORD *)(v137 + 40) = v140;
    __p[0] = 0;
    __p[1] = 0;
    v141 = v640;
    *(_OWORD *)(v137 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v137 + 80) = v141;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v137 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_121;
    goto LABEL_120;
  }
  v142 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v143 = SHIBYTE(v640);
  *v3 = v142;
  if ((v143 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_121;
    goto LABEL_120;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_120:
    operator delete(__p[0]);
LABEL_121:
  RNBRemote::Packet::Packet((uint64_t)&v634, 25, (uint64_t)RNBRemote::HandlePacket_T, 0, 0, 0, "T", "Is thread alive");
  v144 = *((_QWORD *)this + 85);
  if (v144 < *((_QWORD *)this + 86))
  {
    v145 = v634;
    v146 = v635;
    *(_QWORD *)(v144 + 32) = v636;
    *(_OWORD *)v144 = v145;
    *(_OWORD *)(v144 + 16) = v146;
    v147 = *(_OWORD *)__p;
    *(_QWORD *)(v144 + 56) = v638;
    *(_OWORD *)(v144 + 40) = v147;
    __p[0] = 0;
    __p[1] = 0;
    v148 = v640;
    *(_OWORD *)(v144 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v144 + 80) = v148;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v144 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_127;
    goto LABEL_126;
  }
  v149 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v150 = SHIBYTE(v640);
  *v3 = v149;
  if ((v150 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_127;
    goto LABEL_126;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_126:
    operator delete(__p[0]);
LABEL_127:
  RNBRemote::Packet::Packet((uint64_t)&v634, 58, (uint64_t)RNBRemote::HandlePacket_qSupported, 0, 0, 0, "qSupported", "Query about supported features");
  v151 = *((_QWORD *)this + 85);
  if (v151 < *((_QWORD *)this + 86))
  {
    v152 = v634;
    v153 = v635;
    *(_QWORD *)(v151 + 32) = v636;
    *(_OWORD *)v151 = v152;
    *(_OWORD *)(v151 + 16) = v153;
    v154 = *(_OWORD *)__p;
    *(_QWORD *)(v151 + 56) = v638;
    *(_OWORD *)(v151 + 40) = v154;
    __p[0] = 0;
    __p[1] = 0;
    v155 = v640;
    *(_OWORD *)(v151 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v151 + 80) = v155;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v151 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_133;
    goto LABEL_132;
  }
  v156 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v157 = SHIBYTE(v640);
  *v3 = v156;
  if ((v157 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_133;
    goto LABEL_132;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_132:
    operator delete(__p[0]);
LABEL_133:
  RNBRemote::Packet::Packet((uint64_t)&v634, 26, (uint64_t)RNBRemote::HandlePacket_v, 0, 0, 0, "vAttach", "Attach to a new process");
  v158 = *((_QWORD *)this + 85);
  if (v158 < *((_QWORD *)this + 86))
  {
    v159 = v634;
    v160 = v635;
    *(_QWORD *)(v158 + 32) = v636;
    *(_OWORD *)v158 = v159;
    *(_OWORD *)(v158 + 16) = v160;
    v161 = *(_OWORD *)__p;
    *(_QWORD *)(v158 + 56) = v638;
    *(_OWORD *)(v158 + 40) = v161;
    __p[0] = 0;
    __p[1] = 0;
    v162 = v640;
    *(_OWORD *)(v158 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v158 + 80) = v162;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v158 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_139;
    goto LABEL_138;
  }
  v163 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v164 = SHIBYTE(v640);
  *v3 = v163;
  if ((v164 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_139;
    goto LABEL_138;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_138:
    operator delete(__p[0]);
LABEL_139:
  RNBRemote::Packet::Packet((uint64_t)&v634, 27, (uint64_t)RNBRemote::HandlePacket_v, 0, 0, 0, "vAttachWait", "Wait for a process to start up then attach to it");
  v165 = *((_QWORD *)this + 85);
  if (v165 < *((_QWORD *)this + 86))
  {
    v166 = v634;
    v167 = v635;
    *(_QWORD *)(v165 + 32) = v636;
    *(_OWORD *)v165 = v166;
    *(_OWORD *)(v165 + 16) = v167;
    v168 = *(_OWORD *)__p;
    *(_QWORD *)(v165 + 56) = v638;
    *(_OWORD *)(v165 + 40) = v168;
    __p[0] = 0;
    __p[1] = 0;
    v169 = v640;
    *(_OWORD *)(v165 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v165 + 80) = v169;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v165 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_145;
    goto LABEL_144;
  }
  v170 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v171 = SHIBYTE(v640);
  *v3 = v170;
  if ((v171 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_145;
    goto LABEL_144;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_144:
    operator delete(__p[0]);
LABEL_145:
  RNBRemote::Packet::Packet((uint64_t)&v634, 28, (uint64_t)RNBRemote::HandlePacket_v, 0, 0, 0, "vAttachOrWait", "Attach to the process or if it doesn't exist, wait for the process to start up then attach to it");
  v172 = *((_QWORD *)this + 85);
  if (v172 < *((_QWORD *)this + 86))
  {
    v173 = v634;
    v174 = v635;
    *(_QWORD *)(v172 + 32) = v636;
    *(_OWORD *)v172 = v173;
    *(_OWORD *)(v172 + 16) = v174;
    v175 = *(_OWORD *)__p;
    *(_QWORD *)(v172 + 56) = v638;
    *(_OWORD *)(v172 + 40) = v175;
    __p[0] = 0;
    __p[1] = 0;
    v176 = v640;
    *(_OWORD *)(v172 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v172 + 80) = v176;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v172 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_151;
    goto LABEL_150;
  }
  v177 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v178 = SHIBYTE(v640);
  *v3 = v177;
  if ((v178 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_151;
    goto LABEL_150;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_150:
    operator delete(__p[0]);
LABEL_151:
  RNBRemote::Packet::Packet((uint64_t)&v634, 29, (uint64_t)RNBRemote::HandlePacket_v, 0, 0, 0, "vAttachName", "Attach to an existing process by name");
  v179 = *((_QWORD *)this + 85);
  if (v179 < *((_QWORD *)this + 86))
  {
    v180 = v634;
    v181 = v635;
    *(_QWORD *)(v179 + 32) = v636;
    *(_OWORD *)v179 = v180;
    *(_OWORD *)(v179 + 16) = v181;
    v182 = *(_OWORD *)__p;
    *(_QWORD *)(v179 + 56) = v638;
    *(_OWORD *)(v179 + 40) = v182;
    __p[0] = 0;
    __p[1] = 0;
    v183 = v640;
    *(_OWORD *)(v179 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v179 + 80) = v183;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v179 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_157;
    goto LABEL_156;
  }
  v184 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v185 = SHIBYTE(v640);
  *v3 = v184;
  if ((v185 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_157;
    goto LABEL_156;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_156:
    operator delete(__p[0]);
LABEL_157:
  RNBRemote::Packet::Packet((uint64_t)&v634, 31, (uint64_t)RNBRemote::HandlePacket_v, 0, 0, 0, "vCont;",
    "Verbose resume with thread actions");
  v186 = *((_QWORD *)this + 85);
  if (v186 < *((_QWORD *)this + 86))
  {
    v187 = v634;
    v188 = v635;
    *(_QWORD *)(v186 + 32) = v636;
    *(_OWORD *)v186 = v187;
    *(_OWORD *)(v186 + 16) = v188;
    v189 = *(_OWORD *)__p;
    *(_QWORD *)(v186 + 56) = v638;
    *(_OWORD *)(v186 + 40) = v189;
    __p[0] = 0;
    __p[1] = 0;
    v190 = v640;
    *(_OWORD *)(v186 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v186 + 80) = v190;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v186 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_163;
    goto LABEL_162;
  }
  v191 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v192 = SHIBYTE(v640);
  *v3 = v191;
  if ((v192 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_163;
    goto LABEL_162;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_162:
    operator delete(__p[0]);
LABEL_163:
  RNBRemote::Packet::Packet((uint64_t)&v634, 31, (uint64_t)RNBRemote::HandlePacket_v, 0, 0, 0, "vCont?", "List valid continue-with-thread-actions actions");
  v193 = *((_QWORD *)this + 85);
  if (v193 < *((_QWORD *)this + 86))
  {
    v194 = v634;
    v195 = v635;
    *(_QWORD *)(v193 + 32) = v636;
    *(_OWORD *)v193 = v194;
    *(_OWORD *)(v193 + 16) = v195;
    v196 = *(_OWORD *)__p;
    *(_QWORD *)(v193 + 56) = v638;
    *(_OWORD *)(v193 + 40) = v196;
    __p[0] = 0;
    __p[1] = 0;
    v197 = v640;
    *(_OWORD *)(v193 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v193 + 80) = v197;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v193 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_169;
    goto LABEL_168;
  }
  v198 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v199 = SHIBYTE(v640);
  *v3 = v198;
  if ((v199 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_169;
    goto LABEL_168;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_168:
    operator delete(__p[0]);
LABEL_169:
  RNBRemote::Packet::Packet((uint64_t)&v634, 32, (uint64_t)RNBRemote::HandlePacket_x, 0, 0, 0, "x", "Read data from memory");
  v200 = *((_QWORD *)this + 85);
  if (v200 < *((_QWORD *)this + 86))
  {
    v201 = v634;
    v202 = v635;
    *(_QWORD *)(v200 + 32) = v636;
    *(_OWORD *)v200 = v201;
    *(_OWORD *)(v200 + 16) = v202;
    v203 = *(_OWORD *)__p;
    *(_QWORD *)(v200 + 56) = v638;
    *(_OWORD *)(v200 + 40) = v203;
    __p[0] = 0;
    __p[1] = 0;
    v204 = v640;
    *(_OWORD *)(v200 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v200 + 80) = v204;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v200 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_175;
    goto LABEL_174;
  }
  v205 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v206 = SHIBYTE(v640);
  *v3 = v205;
  if ((v206 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_175;
    goto LABEL_174;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_174:
    operator delete(__p[0]);
LABEL_175:
  RNBRemote::Packet::Packet((uint64_t)&v634, 33, (uint64_t)RNBRemote::HandlePacket_X, 0, 0, 0, "X", "Write data to memory");
  v207 = *((_QWORD *)this + 85);
  if (v207 < *((_QWORD *)this + 86))
  {
    v208 = v634;
    v209 = v635;
    *(_QWORD *)(v207 + 32) = v636;
    *(_OWORD *)v207 = v208;
    *(_OWORD *)(v207 + 16) = v209;
    v210 = *(_OWORD *)__p;
    *(_QWORD *)(v207 + 56) = v638;
    *(_OWORD *)(v207 + 40) = v210;
    __p[0] = 0;
    __p[1] = 0;
    v211 = v640;
    *(_OWORD *)(v207 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v207 + 80) = v211;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v207 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_181;
    goto LABEL_180;
  }
  v212 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v213 = SHIBYTE(v640);
  *v3 = v212;
  if ((v213 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_181;
    goto LABEL_180;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_180:
    operator delete(__p[0]);
LABEL_181:
  RNBRemote::Packet::Packet((uint64_t)&v634, 36, (uint64_t)RNBRemote::HandlePacket_z, 0, 0, 0, "Z1", "Insert hardware breakpoint");
  v214 = *((_QWORD *)this + 85);
  if (v214 < *((_QWORD *)this + 86))
  {
    v215 = v634;
    v216 = v635;
    *(_QWORD *)(v214 + 32) = v636;
    *(_OWORD *)v214 = v215;
    *(_OWORD *)(v214 + 16) = v216;
    v217 = *(_OWORD *)__p;
    *(_QWORD *)(v214 + 56) = v638;
    *(_OWORD *)(v214 + 40) = v217;
    __p[0] = 0;
    __p[1] = 0;
    v218 = v640;
    *(_OWORD *)(v214 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v214 + 80) = v218;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v214 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_187;
    goto LABEL_186;
  }
  v219 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v220 = SHIBYTE(v640);
  *v3 = v219;
  if ((v220 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_187;
    goto LABEL_186;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_186:
    operator delete(__p[0]);
LABEL_187:
  RNBRemote::Packet::Packet((uint64_t)&v634, 37, (uint64_t)RNBRemote::HandlePacket_z, 0, 0, 0, "z1", "Remove hardware breakpoint");
  v221 = *((_QWORD *)this + 85);
  if (v221 < *((_QWORD *)this + 86))
  {
    v222 = v634;
    v223 = v635;
    *(_QWORD *)(v221 + 32) = v636;
    *(_OWORD *)v221 = v222;
    *(_OWORD *)(v221 + 16) = v223;
    v224 = *(_OWORD *)__p;
    *(_QWORD *)(v221 + 56) = v638;
    *(_OWORD *)(v221 + 40) = v224;
    __p[0] = 0;
    __p[1] = 0;
    v225 = v640;
    *(_OWORD *)(v221 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v221 + 80) = v225;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v221 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_193;
    goto LABEL_192;
  }
  v226 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v227 = SHIBYTE(v640);
  *v3 = v226;
  if ((v227 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_193;
    goto LABEL_192;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_192:
    operator delete(__p[0]);
LABEL_193:
  RNBRemote::Packet::Packet((uint64_t)&v634, 38, (uint64_t)RNBRemote::HandlePacket_z, 0, 0, 0, "Z2", "Insert write watchpoint");
  v228 = *((_QWORD *)this + 85);
  if (v228 < *((_QWORD *)this + 86))
  {
    v229 = v634;
    v230 = v635;
    *(_QWORD *)(v228 + 32) = v636;
    *(_OWORD *)v228 = v229;
    *(_OWORD *)(v228 + 16) = v230;
    v231 = *(_OWORD *)__p;
    *(_QWORD *)(v228 + 56) = v638;
    *(_OWORD *)(v228 + 40) = v231;
    __p[0] = 0;
    __p[1] = 0;
    v232 = v640;
    *(_OWORD *)(v228 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v228 + 80) = v232;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v228 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_199;
    goto LABEL_198;
  }
  v233 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v234 = SHIBYTE(v640);
  *v3 = v233;
  if ((v234 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_199;
    goto LABEL_198;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_198:
    operator delete(__p[0]);
LABEL_199:
  RNBRemote::Packet::Packet((uint64_t)&v634, 39, (uint64_t)RNBRemote::HandlePacket_z, 0, 0, 0, "z2", "Remove write watchpoint");
  v235 = *((_QWORD *)this + 85);
  if (v235 < *((_QWORD *)this + 86))
  {
    v236 = v634;
    v237 = v635;
    *(_QWORD *)(v235 + 32) = v636;
    *(_OWORD *)v235 = v236;
    *(_OWORD *)(v235 + 16) = v237;
    v238 = *(_OWORD *)__p;
    *(_QWORD *)(v235 + 56) = v638;
    *(_OWORD *)(v235 + 40) = v238;
    __p[0] = 0;
    __p[1] = 0;
    v239 = v640;
    *(_OWORD *)(v235 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v235 + 80) = v239;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v235 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_205;
    goto LABEL_204;
  }
  v240 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v241 = SHIBYTE(v640);
  *v3 = v240;
  if ((v241 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_205;
    goto LABEL_204;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_204:
    operator delete(__p[0]);
LABEL_205:
  RNBRemote::Packet::Packet((uint64_t)&v634, 40, (uint64_t)RNBRemote::HandlePacket_z, 0, 0, 0, "Z3", "Insert read watchpoint");
  v242 = *((_QWORD *)this + 85);
  if (v242 < *((_QWORD *)this + 86))
  {
    v243 = v634;
    v244 = v635;
    *(_QWORD *)(v242 + 32) = v636;
    *(_OWORD *)v242 = v243;
    *(_OWORD *)(v242 + 16) = v244;
    v245 = *(_OWORD *)__p;
    *(_QWORD *)(v242 + 56) = v638;
    *(_OWORD *)(v242 + 40) = v245;
    __p[0] = 0;
    __p[1] = 0;
    v246 = v640;
    *(_OWORD *)(v242 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v242 + 80) = v246;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v242 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_211;
    goto LABEL_210;
  }
  v247 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v248 = SHIBYTE(v640);
  *v3 = v247;
  if ((v248 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_211;
    goto LABEL_210;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_210:
    operator delete(__p[0]);
LABEL_211:
  RNBRemote::Packet::Packet((uint64_t)&v634, 41, (uint64_t)RNBRemote::HandlePacket_z, 0, 0, 0, "z3", "Remove read watchpoint");
  v249 = *((_QWORD *)this + 85);
  if (v249 < *((_QWORD *)this + 86))
  {
    v250 = v634;
    v251 = v635;
    *(_QWORD *)(v249 + 32) = v636;
    *(_OWORD *)v249 = v250;
    *(_OWORD *)(v249 + 16) = v251;
    v252 = *(_OWORD *)__p;
    *(_QWORD *)(v249 + 56) = v638;
    *(_OWORD *)(v249 + 40) = v252;
    __p[0] = 0;
    __p[1] = 0;
    v253 = v640;
    *(_OWORD *)(v249 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v249 + 80) = v253;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v249 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_217;
    goto LABEL_216;
  }
  v254 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v255 = SHIBYTE(v640);
  *v3 = v254;
  if ((v255 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_217;
    goto LABEL_216;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_216:
    operator delete(__p[0]);
LABEL_217:
  RNBRemote::Packet::Packet((uint64_t)&v634, 42, (uint64_t)RNBRemote::HandlePacket_z, 0, 0, 0, "Z4", "Insert access watchpoint");
  v256 = *((_QWORD *)this + 85);
  if (v256 < *((_QWORD *)this + 86))
  {
    v257 = v634;
    v258 = v635;
    *(_QWORD *)(v256 + 32) = v636;
    *(_OWORD *)v256 = v257;
    *(_OWORD *)(v256 + 16) = v258;
    v259 = *(_OWORD *)__p;
    *(_QWORD *)(v256 + 56) = v638;
    *(_OWORD *)(v256 + 40) = v259;
    __p[0] = 0;
    __p[1] = 0;
    v260 = v640;
    *(_OWORD *)(v256 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v256 + 80) = v260;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v256 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_223;
    goto LABEL_222;
  }
  v261 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v262 = SHIBYTE(v640);
  *v3 = v261;
  if ((v262 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_223;
    goto LABEL_222;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_222:
    operator delete(__p[0]);
LABEL_223:
  RNBRemote::Packet::Packet((uint64_t)&v634, 43, (uint64_t)RNBRemote::HandlePacket_z, 0, 0, 0, "z4", "Remove access watchpoint");
  v263 = *((_QWORD *)this + 85);
  if (v263 < *((_QWORD *)this + 86))
  {
    v264 = v634;
    v265 = v635;
    *(_QWORD *)(v263 + 32) = v636;
    *(_OWORD *)v263 = v264;
    *(_OWORD *)(v263 + 16) = v265;
    v266 = *(_OWORD *)__p;
    *(_QWORD *)(v263 + 56) = v638;
    *(_OWORD *)(v263 + 40) = v266;
    __p[0] = 0;
    __p[1] = 0;
    v267 = v640;
    *(_OWORD *)(v263 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v263 + 80) = v267;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v263 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_229;
    goto LABEL_228;
  }
  v268 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v269 = SHIBYTE(v640);
  *v3 = v268;
  if ((v269 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_229;
    goto LABEL_228;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_228:
    operator delete(__p[0]);
LABEL_229:
  RNBRemote::Packet::Packet((uint64_t)&v634, 44, (uint64_t)RNBRemote::HandlePacket_qRcmd, 0, 0, 0, "qRcmd", "Monitor command");
  v270 = *((_QWORD *)this + 85);
  if (v270 < *((_QWORD *)this + 86))
  {
    v271 = v634;
    v272 = v635;
    *(_QWORD *)(v270 + 32) = v636;
    *(_OWORD *)v270 = v271;
    *(_OWORD *)(v270 + 16) = v272;
    v273 = *(_OWORD *)__p;
    *(_QWORD *)(v270 + 56) = v638;
    *(_OWORD *)(v270 + 40) = v273;
    __p[0] = 0;
    __p[1] = 0;
    v274 = v640;
    *(_OWORD *)(v270 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v270 + 80) = v274;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v270 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_235;
    goto LABEL_234;
  }
  v275 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v276 = SHIBYTE(v640);
  *v3 = v275;
  if ((v276 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_235;
    goto LABEL_234;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_234:
    operator delete(__p[0]);
LABEL_235:
  RNBRemote::Packet::Packet((uint64_t)&v634, 45, (uint64_t)RNBRemote::HandlePacket_qC, 0, 0, 0, "qC", "Query current thread ID");
  v277 = *((_QWORD *)this + 85);
  if (v277 < *((_QWORD *)this + 86))
  {
    v278 = v634;
    v279 = v635;
    *(_QWORD *)(v277 + 32) = v636;
    *(_OWORD *)v277 = v278;
    *(_OWORD *)(v277 + 16) = v279;
    v280 = *(_OWORD *)__p;
    *(_QWORD *)(v277 + 56) = v638;
    *(_OWORD *)(v277 + 40) = v280;
    __p[0] = 0;
    __p[1] = 0;
    v281 = v640;
    *(_OWORD *)(v277 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v277 + 80) = v281;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v277 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_241;
    goto LABEL_240;
  }
  v282 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v283 = SHIBYTE(v640);
  *v3 = v282;
  if ((v283 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_241;
    goto LABEL_240;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_240:
    operator delete(__p[0]);
LABEL_241:
  RNBRemote::Packet::Packet((uint64_t)&v634, 47, (uint64_t)RNBRemote::HandlePacket_qEcho, 0, 0, 0, "qEcho:", "Echo the packet back to allow the debugger to sync up with this server");
  v284 = *((_QWORD *)this + 85);
  if (v284 < *((_QWORD *)this + 86))
  {
    v285 = v634;
    v286 = v635;
    *(_QWORD *)(v284 + 32) = v636;
    *(_OWORD *)v284 = v285;
    *(_OWORD *)(v284 + 16) = v286;
    v287 = *(_OWORD *)__p;
    *(_QWORD *)(v284 + 56) = v638;
    *(_OWORD *)(v284 + 40) = v287;
    __p[0] = 0;
    __p[1] = 0;
    v288 = v640;
    *(_OWORD *)(v284 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v284 + 80) = v288;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v284 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_247;
    goto LABEL_246;
  }
  v289 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v290 = SHIBYTE(v640);
  *v3 = v289;
  if ((v290 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_247;
    goto LABEL_246;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_246:
    operator delete(__p[0]);
LABEL_247:
  RNBRemote::Packet::Packet((uint64_t)&v634, 46, (uint64_t)RNBRemote::HandlePacket_qGetPid, 0, 0, 0, "qGetPid", "Query process id");
  v291 = *((_QWORD *)this + 85);
  if (v291 < *((_QWORD *)this + 86))
  {
    v292 = v634;
    v293 = v635;
    *(_QWORD *)(v291 + 32) = v636;
    *(_OWORD *)v291 = v292;
    *(_OWORD *)(v291 + 16) = v293;
    v294 = *(_OWORD *)__p;
    *(_QWORD *)(v291 + 56) = v638;
    *(_OWORD *)(v291 + 40) = v294;
    __p[0] = 0;
    __p[1] = 0;
    v295 = v640;
    *(_OWORD *)(v291 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v291 + 80) = v295;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v291 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_253;
    goto LABEL_252;
  }
  v296 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v297 = SHIBYTE(v640);
  *v3 = v296;
  if ((v297 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_253;
    goto LABEL_252;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_252:
    operator delete(__p[0]);
LABEL_253:
  RNBRemote::Packet::Packet((uint64_t)&v634, 48, (uint64_t)RNBRemote::HandlePacket_qThreadInfo, 0, 0, 0, "qfThreadInfo", "Get list of active threads (first req)");
  v298 = *((_QWORD *)this + 85);
  if (v298 < *((_QWORD *)this + 86))
  {
    v299 = v634;
    v300 = v635;
    *(_QWORD *)(v298 + 32) = v636;
    *(_OWORD *)v298 = v299;
    *(_OWORD *)(v298 + 16) = v300;
    v301 = *(_OWORD *)__p;
    *(_QWORD *)(v298 + 56) = v638;
    *(_OWORD *)(v298 + 40) = v301;
    __p[0] = 0;
    __p[1] = 0;
    v302 = v640;
    *(_OWORD *)(v298 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v298 + 80) = v302;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v298 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_259;
    goto LABEL_258;
  }
  v303 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v304 = SHIBYTE(v640);
  *v3 = v303;
  if ((v304 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_259;
    goto LABEL_258;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_258:
    operator delete(__p[0]);
LABEL_259:
  RNBRemote::Packet::Packet((uint64_t)&v634, 49, (uint64_t)RNBRemote::HandlePacket_qThreadInfo, 0, 0, 0, "qsThreadInfo", "Get list of active threads (subsequent req)");
  v305 = *((_QWORD *)this + 85);
  if (v305 < *((_QWORD *)this + 86))
  {
    v306 = v634;
    v307 = v635;
    *(_QWORD *)(v305 + 32) = v636;
    *(_OWORD *)v305 = v306;
    *(_OWORD *)(v305 + 16) = v307;
    v308 = *(_OWORD *)__p;
    *(_QWORD *)(v305 + 56) = v638;
    *(_OWORD *)(v305 + 40) = v308;
    __p[0] = 0;
    __p[1] = 0;
    v309 = v640;
    *(_OWORD *)(v305 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v305 + 80) = v309;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v305 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_265;
    goto LABEL_264;
  }
  v310 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v311 = SHIBYTE(v640);
  *v3 = v310;
  if ((v311 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_265;
    goto LABEL_264;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_264:
    operator delete(__p[0]);
LABEL_265:
  RNBRemote::Packet::Packet((uint64_t)&v634, 51, (uint64_t)RNBRemote::HandlePacket_qThreadStopInfo, 0, 0, 0, "qThreadStopInfo", "Get detailed info on why the specified thread stopped");
  v312 = *((_QWORD *)this + 85);
  if (v312 < *((_QWORD *)this + 86))
  {
    v313 = v634;
    v314 = v635;
    *(_QWORD *)(v312 + 32) = v636;
    *(_OWORD *)v312 = v313;
    *(_OWORD *)(v312 + 16) = v314;
    v315 = *(_OWORD *)__p;
    *(_QWORD *)(v312 + 56) = v638;
    *(_OWORD *)(v312 + 40) = v315;
    __p[0] = 0;
    __p[1] = 0;
    v316 = v640;
    *(_OWORD *)(v312 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v312 + 80) = v316;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v312 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_271;
    goto LABEL_270;
  }
  v317 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v318 = SHIBYTE(v640);
  *v3 = v317;
  if ((v318 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_271;
    goto LABEL_270;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_270:
    operator delete(__p[0]);
LABEL_271:
  RNBRemote::Packet::Packet((uint64_t)&v634, 50, (uint64_t)RNBRemote::HandlePacket_qThreadExtraInfo, 0, 0, 0, "qThreadExtraInfo", "Get printable status of a thread");
  v319 = *((_QWORD *)this + 85);
  if (v319 < *((_QWORD *)this + 86))
  {
    v320 = v634;
    v321 = v635;
    *(_QWORD *)(v319 + 32) = v636;
    *(_OWORD *)v319 = v320;
    *(_OWORD *)(v319 + 16) = v321;
    v322 = *(_OWORD *)__p;
    *(_QWORD *)(v319 + 56) = v638;
    *(_OWORD *)(v319 + 40) = v322;
    __p[0] = 0;
    __p[1] = 0;
    v323 = v640;
    *(_OWORD *)(v319 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v319 + 80) = v323;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v319 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_277;
    goto LABEL_276;
  }
  v324 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v325 = SHIBYTE(v640);
  *v3 = v324;
  if ((v325 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_277;
    goto LABEL_276;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_276:
    operator delete(__p[0]);
LABEL_277:
  RNBRemote::Packet::Packet((uint64_t)&v634, 54, (uint64_t)RNBRemote::HandlePacket_qLaunchSuccess, 0, 0, 0, "qLaunchSuccess", "Report the success or failure of the launch attempt");
  v326 = *((_QWORD *)this + 85);
  if (v326 < *((_QWORD *)this + 86))
  {
    v327 = v634;
    v328 = v635;
    *(_QWORD *)(v326 + 32) = v636;
    *(_OWORD *)v326 = v327;
    *(_OWORD *)(v326 + 16) = v328;
    v329 = *(_OWORD *)__p;
    *(_QWORD *)(v326 + 56) = v638;
    *(_OWORD *)(v326 + 40) = v329;
    __p[0] = 0;
    __p[1] = 0;
    v330 = v640;
    *(_OWORD *)(v326 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v326 + 80) = v330;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v326 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_283;
    goto LABEL_282;
  }
  v331 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v332 = SHIBYTE(v640);
  *v3 = v331;
  if ((v332 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_283;
    goto LABEL_282;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_282:
    operator delete(__p[0]);
LABEL_283:
  RNBRemote::Packet::Packet((uint64_t)&v634, 55, (uint64_t)RNBRemote::HandlePacket_qRegisterInfo, 0, 0, 0, "qRegisterInfo", "Dynamically discover remote register context information.");
  v333 = *((_QWORD *)this + 85);
  if (v333 < *((_QWORD *)this + 86))
  {
    v334 = v634;
    v335 = v635;
    *(_QWORD *)(v333 + 32) = v636;
    *(_OWORD *)v333 = v334;
    *(_OWORD *)(v333 + 16) = v335;
    v336 = *(_OWORD *)__p;
    *(_QWORD *)(v333 + 56) = v638;
    *(_OWORD *)(v333 + 40) = v336;
    __p[0] = 0;
    __p[1] = 0;
    v337 = v640;
    *(_OWORD *)(v333 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v333 + 80) = v337;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v333 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_289;
    goto LABEL_288;
  }
  v338 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v339 = SHIBYTE(v640);
  *v3 = v338;
  if ((v339 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_289;
    goto LABEL_288;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_288:
    operator delete(__p[0]);
LABEL_289:
  RNBRemote::Packet::Packet((uint64_t)&v634, 56, (uint64_t)RNBRemote::HandlePacket_qShlibInfoAddr, 0, 0, 0, "qShlibInfoAddr", "Returns the address that contains info needed for getting shared library notifications");
  v340 = *((_QWORD *)this + 85);
  if (v340 < *((_QWORD *)this + 86))
  {
    v341 = v634;
    v342 = v635;
    *(_QWORD *)(v340 + 32) = v636;
    *(_OWORD *)v340 = v341;
    *(_OWORD *)(v340 + 16) = v342;
    v343 = *(_OWORD *)__p;
    *(_QWORD *)(v340 + 56) = v638;
    *(_OWORD *)(v340 + 40) = v343;
    __p[0] = 0;
    __p[1] = 0;
    v344 = v640;
    *(_OWORD *)(v340 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v340 + 80) = v344;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v340 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_295;
    goto LABEL_294;
  }
  v345 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v346 = SHIBYTE(v640);
  *v3 = v345;
  if ((v346 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_295;
    goto LABEL_294;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_294:
    operator delete(__p[0]);
LABEL_295:
  RNBRemote::Packet::Packet((uint64_t)&v634, 57, (uint64_t)RNBRemote::HandlePacket_qStepPacketSupported, 0, 0, 0, "qStepPacketSupported", "Replys with OK if the 's' packet is supported.");
  v347 = *((_QWORD *)this + 85);
  if (v347 < *((_QWORD *)this + 86))
  {
    v348 = v634;
    v349 = v635;
    *(_QWORD *)(v347 + 32) = v636;
    *(_OWORD *)v347 = v348;
    *(_OWORD *)(v347 + 16) = v349;
    v350 = *(_OWORD *)__p;
    *(_QWORD *)(v347 + 56) = v638;
    *(_OWORD *)(v347 + 40) = v350;
    __p[0] = 0;
    __p[1] = 0;
    v351 = v640;
    *(_OWORD *)(v347 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v347 + 80) = v351;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v347 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_301;
    goto LABEL_300;
  }
  v352 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v353 = SHIBYTE(v640);
  *v3 = v352;
  if ((v353 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_301;
    goto LABEL_300;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_300:
    operator delete(__p[0]);
LABEL_301:
  RNBRemote::Packet::Packet((uint64_t)&v634, 59, (uint64_t)RNBRemote::HandlePacket_qVAttachOrWaitSupported, 0, 0, 0, "qVAttachOrWaitSupported", "Replys with OK if the 'vAttachOrWait' packet is supported.");
  v354 = *((_QWORD *)this + 85);
  if (v354 < *((_QWORD *)this + 86))
  {
    v355 = v634;
    v356 = v635;
    *(_QWORD *)(v354 + 32) = v636;
    *(_OWORD *)v354 = v355;
    *(_OWORD *)(v354 + 16) = v356;
    v357 = *(_OWORD *)__p;
    *(_QWORD *)(v354 + 56) = v638;
    *(_OWORD *)(v354 + 40) = v357;
    __p[0] = 0;
    __p[1] = 0;
    v358 = v640;
    *(_OWORD *)(v354 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v354 + 80) = v358;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v354 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_307;
    goto LABEL_306;
  }
  v359 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v360 = SHIBYTE(v640);
  *v3 = v359;
  if ((v360 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_307;
    goto LABEL_306;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_306:
    operator delete(__p[0]);
LABEL_307:
  RNBRemote::Packet::Packet((uint64_t)&v634, 60, (uint64_t)RNBRemote::HandlePacket_qSyncThreadStateSupported, 0, 0, 0, "qSyncThreadStateSupported", "Replys with OK if the 'QSyncThreadState:' packet is supported.");
  v361 = *((_QWORD *)this + 85);
  if (v361 < *((_QWORD *)this + 86))
  {
    v362 = v634;
    v363 = v635;
    *(_QWORD *)(v361 + 32) = v636;
    *(_OWORD *)v361 = v362;
    *(_OWORD *)(v361 + 16) = v363;
    v364 = *(_OWORD *)__p;
    *(_QWORD *)(v361 + 56) = v638;
    *(_OWORD *)(v361 + 40) = v364;
    __p[0] = 0;
    __p[1] = 0;
    v365 = v640;
    *(_OWORD *)(v361 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v361 + 80) = v365;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v361 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_313;
    goto LABEL_312;
  }
  v366 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v367 = SHIBYTE(v640);
  *v3 = v366;
  if ((v367 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_313;
    goto LABEL_312;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_312:
    operator delete(__p[0]);
LABEL_313:
  RNBRemote::Packet::Packet((uint64_t)&v634, 61, (uint64_t)RNBRemote::HandlePacket_qHostInfo, 0, 0, 0, "qHostInfo", "Replies with multiple 'key:value;' tuples appended to each other.");
  v368 = *((_QWORD *)this + 85);
  if (v368 < *((_QWORD *)this + 86))
  {
    v369 = v634;
    v370 = v635;
    *(_QWORD *)(v368 + 32) = v636;
    *(_OWORD *)v368 = v369;
    *(_OWORD *)(v368 + 16) = v370;
    v371 = *(_OWORD *)__p;
    *(_QWORD *)(v368 + 56) = v638;
    *(_OWORD *)(v368 + 40) = v371;
    __p[0] = 0;
    __p[1] = 0;
    v372 = v640;
    *(_OWORD *)(v368 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v368 + 80) = v372;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v368 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_319;
    goto LABEL_318;
  }
  v373 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v374 = SHIBYTE(v640);
  *v3 = v373;
  if ((v374 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_319;
    goto LABEL_318;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_318:
    operator delete(__p[0]);
LABEL_319:
  RNBRemote::Packet::Packet((uint64_t)&v634, 62, (uint64_t)RNBRemote::HandlePacket_qGDBServerVersion, 0, 0, 0, "qGDBServerVersion", "Replies with multiple 'key:value;' tuples appended to each other.");
  v375 = *((_QWORD *)this + 85);
  if (v375 < *((_QWORD *)this + 86))
  {
    v376 = v634;
    v377 = v635;
    *(_QWORD *)(v375 + 32) = v636;
    *(_OWORD *)v375 = v376;
    *(_OWORD *)(v375 + 16) = v377;
    v378 = *(_OWORD *)__p;
    *(_QWORD *)(v375 + 56) = v638;
    *(_OWORD *)(v375 + 40) = v378;
    __p[0] = 0;
    __p[1] = 0;
    v379 = v640;
    *(_OWORD *)(v375 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v375 + 80) = v379;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v375 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_325;
    goto LABEL_324;
  }
  v380 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v381 = SHIBYTE(v640);
  *v3 = v380;
  if ((v381 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_325;
    goto LABEL_324;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_324:
    operator delete(__p[0]);
LABEL_325:
  RNBRemote::Packet::Packet((uint64_t)&v634, 63, (uint64_t)RNBRemote::HandlePacket_qProcessInfo, 0, 0, 0, "qProcessInfo", "Replies with multiple 'key:value;' tuples appended to each other.");
  v382 = *((_QWORD *)this + 85);
  if (v382 < *((_QWORD *)this + 86))
  {
    v383 = v634;
    v384 = v635;
    *(_QWORD *)(v382 + 32) = v636;
    *(_OWORD *)v382 = v383;
    *(_OWORD *)(v382 + 16) = v384;
    v385 = *(_OWORD *)__p;
    *(_QWORD *)(v382 + 56) = v638;
    *(_OWORD *)(v382 + 40) = v385;
    __p[0] = 0;
    __p[1] = 0;
    v386 = v640;
    *(_OWORD *)(v382 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v382 + 80) = v386;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v382 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_331;
    goto LABEL_330;
  }
  v387 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v388 = SHIBYTE(v640);
  *v3 = v387;
  if ((v388 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_331;
    goto LABEL_330;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_330:
    operator delete(__p[0]);
LABEL_331:
  RNBRemote::Packet::Packet((uint64_t)&v634, 53, (uint64_t)RNBRemote::HandlePacket_qSymbol, 0, 0, 0, "qSymbol:", "Notify that host debugger is ready to do symbol lookups");
  v389 = *((_QWORD *)this + 85);
  if (v389 < *((_QWORD *)this + 86))
  {
    v390 = v634;
    v391 = v635;
    *(_QWORD *)(v389 + 32) = v636;
    *(_OWORD *)v389 = v390;
    *(_OWORD *)(v389 + 16) = v391;
    v392 = *(_OWORD *)__p;
    *(_QWORD *)(v389 + 56) = v638;
    *(_OWORD *)(v389 + 40) = v392;
    __p[0] = 0;
    __p[1] = 0;
    v393 = v640;
    *(_OWORD *)(v389 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v389 + 80) = v393;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v389 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_337;
    goto LABEL_336;
  }
  v394 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v395 = SHIBYTE(v640);
  *v3 = v394;
  if ((v395 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_337;
    goto LABEL_336;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_336:
    operator delete(__p[0]);
LABEL_337:
  RNBRemote::Packet::Packet((uint64_t)&v634, 64, (uint64_t)RNBRemote::HandlePacket_jThreadExtendedInfo, 0, 0, 0, "jThreadExtendedInfo", "Replies with JSON data of thread extended information.");
  v396 = *((_QWORD *)this + 85);
  if (v396 < *((_QWORD *)this + 86))
  {
    v397 = v634;
    v398 = v635;
    *(_QWORD *)(v396 + 32) = v636;
    *(_OWORD *)v396 = v397;
    *(_OWORD *)(v396 + 16) = v398;
    v399 = *(_OWORD *)__p;
    *(_QWORD *)(v396 + 56) = v638;
    *(_OWORD *)(v396 + 40) = v399;
    __p[0] = 0;
    __p[1] = 0;
    v400 = v640;
    *(_OWORD *)(v396 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v396 + 80) = v400;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v396 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_343;
    goto LABEL_342;
  }
  v401 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v402 = SHIBYTE(v640);
  *v3 = v401;
  if ((v402 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_343;
    goto LABEL_342;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_342:
    operator delete(__p[0]);
LABEL_343:
  RNBRemote::Packet::Packet((uint64_t)&v634, 65, (uint64_t)RNBRemote::HandlePacket_jGetLoadedDynamicLibrariesInfos, 0, 0, 0, "jGetLoadedDynamicLibrariesInfos", "Replies with JSON data of all the shared libraries loaded in this process.");
  v403 = *((_QWORD *)this + 85);
  if (v403 < *((_QWORD *)this + 86))
  {
    v404 = v634;
    v405 = v635;
    *(_QWORD *)(v403 + 32) = v636;
    *(_OWORD *)v403 = v404;
    *(_OWORD *)(v403 + 16) = v405;
    v406 = *(_OWORD *)__p;
    *(_QWORD *)(v403 + 56) = v638;
    *(_OWORD *)(v403 + 40) = v406;
    __p[0] = 0;
    __p[1] = 0;
    v407 = v640;
    *(_OWORD *)(v403 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v403 + 80) = v407;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v403 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_349;
    goto LABEL_348;
  }
  v408 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v409 = SHIBYTE(v640);
  *v3 = v408;
  if ((v409 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_349;
    goto LABEL_348;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_348:
    operator delete(__p[0]);
LABEL_349:
  RNBRemote::Packet::Packet((uint64_t)&v634, 66, (uint64_t)RNBRemote::HandlePacket_jThreadsInfo, 0, 0, 0, "jThreadsInfo", "Replies with JSON data with information about all threads.");
  v410 = *((_QWORD *)this + 85);
  if (v410 < *((_QWORD *)this + 86))
  {
    v411 = v634;
    v412 = v635;
    *(_QWORD *)(v410 + 32) = v636;
    *(_OWORD *)v410 = v411;
    *(_OWORD *)(v410 + 16) = v412;
    v413 = *(_OWORD *)__p;
    *(_QWORD *)(v410 + 56) = v638;
    *(_OWORD *)(v410 + 40) = v413;
    __p[0] = 0;
    __p[1] = 0;
    v414 = v640;
    *(_OWORD *)(v410 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v410 + 80) = v414;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v410 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_355;
    goto LABEL_354;
  }
  v415 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v416 = SHIBYTE(v640);
  *v3 = v415;
  if ((v416 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_355;
    goto LABEL_354;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_354:
    operator delete(__p[0]);
LABEL_355:
  RNBRemote::Packet::Packet((uint64_t)&v634, 67, (uint64_t)RNBRemote::HandlePacket_jGetSharedCacheInfo, 0, 0, 0, "jGetSharedCacheInfo", "Replies with JSON data about the location and uuid of the shared cache in the inferior process.");
  v417 = *((_QWORD *)this + 85);
  if (v417 < *((_QWORD *)this + 86))
  {
    v418 = v634;
    v419 = v635;
    *(_QWORD *)(v417 + 32) = v636;
    *(_OWORD *)v417 = v418;
    *(_OWORD *)(v417 + 16) = v419;
    v420 = *(_OWORD *)__p;
    *(_QWORD *)(v417 + 56) = v638;
    *(_OWORD *)(v417 + 40) = v420;
    __p[0] = 0;
    __p[1] = 0;
    v421 = v640;
    *(_OWORD *)(v417 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v417 + 80) = v421;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v417 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_361;
    goto LABEL_360;
  }
  v422 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v423 = SHIBYTE(v640);
  *v3 = v422;
  if ((v423 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_361;
    goto LABEL_360;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_360:
    operator delete(__p[0]);
LABEL_361:
  RNBRemote::Packet::Packet((uint64_t)&v634, 69, (uint64_t)RNBRemote::HandlePacket_QStartNoAckMode, 0, 0, 0, "QStartNoAckMode", "Request that debugserver stop acking remote protocol packets");
  v424 = *((_QWORD *)this + 85);
  if (v424 < *((_QWORD *)this + 86))
  {
    v425 = v634;
    v426 = v635;
    *(_QWORD *)(v424 + 32) = v636;
    *(_OWORD *)v424 = v425;
    *(_OWORD *)(v424 + 16) = v426;
    v427 = *(_OWORD *)__p;
    *(_QWORD *)(v424 + 56) = v638;
    *(_OWORD *)(v424 + 40) = v427;
    __p[0] = 0;
    __p[1] = 0;
    v428 = v640;
    *(_OWORD *)(v424 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v424 + 80) = v428;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v424 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_367;
    goto LABEL_366;
  }
  v429 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v430 = SHIBYTE(v640);
  *v3 = v429;
  if ((v430 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_367;
    goto LABEL_366;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_366:
    operator delete(__p[0]);
LABEL_367:
  RNBRemote::Packet::Packet((uint64_t)&v634, 70, (uint64_t)RNBRemote::HandlePacket_QThreadSuffixSupported, 0, 0, 0, "QThreadSuffixSupported", "Check if thread specific packets (register packets 'g', 'G', 'p', and 'P') support having the thread ID appended to the end of the command");
  v431 = *((_QWORD *)this + 85);
  if (v431 < *((_QWORD *)this + 86))
  {
    v432 = v634;
    v433 = v635;
    *(_QWORD *)(v431 + 32) = v636;
    *(_OWORD *)v431 = v432;
    *(_OWORD *)(v431 + 16) = v433;
    v434 = *(_OWORD *)__p;
    *(_QWORD *)(v431 + 56) = v638;
    *(_OWORD *)(v431 + 40) = v434;
    __p[0] = 0;
    __p[1] = 0;
    v435 = v640;
    *(_OWORD *)(v431 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v431 + 80) = v435;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v431 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_373;
    goto LABEL_372;
  }
  v436 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v437 = SHIBYTE(v640);
  *v3 = v436;
  if ((v437 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_373;
    goto LABEL_372;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_372:
    operator delete(__p[0]);
LABEL_373:
  RNBRemote::Packet::Packet((uint64_t)&v634, 71, (uint64_t)RNBRemote::HandlePacket_QSetLogging, 0, 0, 0, "QSetLogging:", "Turn on log channels in debugserver");
  v438 = *((_QWORD *)this + 85);
  if (v438 < *((_QWORD *)this + 86))
  {
    v439 = v634;
    v440 = v635;
    *(_QWORD *)(v438 + 32) = v636;
    *(_OWORD *)v438 = v439;
    *(_OWORD *)(v438 + 16) = v440;
    v441 = *(_OWORD *)__p;
    *(_QWORD *)(v438 + 56) = v638;
    *(_OWORD *)(v438 + 40) = v441;
    __p[0] = 0;
    __p[1] = 0;
    v442 = v640;
    *(_OWORD *)(v438 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v438 + 80) = v442;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v438 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_379;
    goto LABEL_378;
  }
  v443 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v444 = SHIBYTE(v640);
  *v3 = v443;
  if ((v444 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_379;
    goto LABEL_378;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_378:
    operator delete(__p[0]);
LABEL_379:
  RNBRemote::Packet::Packet((uint64_t)&v634, 72, (uint64_t)RNBRemote::HandlePacket_QSetIgnoredExceptions, 0, 0, 0, "QSetIgnoredExceptions:", "Set the exception types debugserver won't wait for, allowing them to be turned into the equivalent BSD signals by the normal means.");
  v445 = *((_QWORD *)this + 85);
  if (v445 < *((_QWORD *)this + 86))
  {
    v446 = v634;
    v447 = v635;
    *(_QWORD *)(v445 + 32) = v636;
    *(_OWORD *)v445 = v446;
    *(_OWORD *)(v445 + 16) = v447;
    v448 = *(_OWORD *)__p;
    *(_QWORD *)(v445 + 56) = v638;
    *(_OWORD *)(v445 + 40) = v448;
    __p[0] = 0;
    __p[1] = 0;
    v449 = v640;
    *(_OWORD *)(v445 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v445 + 80) = v449;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v445 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_385;
    goto LABEL_384;
  }
  v450 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v451 = SHIBYTE(v640);
  *v3 = v450;
  if ((v451 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_385;
    goto LABEL_384;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_384:
    operator delete(__p[0]);
LABEL_385:
  RNBRemote::Packet::Packet((uint64_t)&v634, 73, (uint64_t)RNBRemote::HandlePacket_QSetMaxPacketSize, 0, 0, 0, "QSetMaxPacketSize:", "Tell debugserver the max sized packet gdb can handle");
  v452 = *((_QWORD *)this + 85);
  if (v452 < *((_QWORD *)this + 86))
  {
    v453 = v634;
    v454 = v635;
    *(_QWORD *)(v452 + 32) = v636;
    *(_OWORD *)v452 = v453;
    *(_OWORD *)(v452 + 16) = v454;
    v455 = *(_OWORD *)__p;
    *(_QWORD *)(v452 + 56) = v638;
    *(_OWORD *)(v452 + 40) = v455;
    __p[0] = 0;
    __p[1] = 0;
    v456 = v640;
    *(_OWORD *)(v452 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v452 + 80) = v456;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v452 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_391;
    goto LABEL_390;
  }
  v457 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v458 = SHIBYTE(v640);
  *v3 = v457;
  if ((v458 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_391;
    goto LABEL_390;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_390:
    operator delete(__p[0]);
LABEL_391:
  RNBRemote::Packet::Packet((uint64_t)&v634, 74, (uint64_t)RNBRemote::HandlePacket_QSetMaxPayloadSize, 0, 0, 0, "QSetMaxPayloadSize:", "Tell debugserver the max sized payload gdb can handle");
  v459 = *((_QWORD *)this + 85);
  if (v459 < *((_QWORD *)this + 86))
  {
    v460 = v634;
    v461 = v635;
    *(_QWORD *)(v459 + 32) = v636;
    *(_OWORD *)v459 = v460;
    *(_OWORD *)(v459 + 16) = v461;
    v462 = *(_OWORD *)__p;
    *(_QWORD *)(v459 + 56) = v638;
    *(_OWORD *)(v459 + 40) = v462;
    __p[0] = 0;
    __p[1] = 0;
    v463 = v640;
    *(_OWORD *)(v459 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v459 + 80) = v463;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v459 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_397;
    goto LABEL_396;
  }
  v464 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v465 = SHIBYTE(v640);
  *v3 = v464;
  if ((v465 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_397;
    goto LABEL_396;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_396:
    operator delete(__p[0]);
LABEL_397:
  RNBRemote::Packet::Packet((uint64_t)&v634, 75, (uint64_t)RNBRemote::HandlePacket_QEnvironment, 0, 0, 0, "QEnvironment:", "Add an environment variable to the inferior's environment");
  v466 = *((_QWORD *)this + 85);
  if (v466 < *((_QWORD *)this + 86))
  {
    v467 = v634;
    v468 = v635;
    *(_QWORD *)(v466 + 32) = v636;
    *(_OWORD *)v466 = v467;
    *(_OWORD *)(v466 + 16) = v468;
    v469 = *(_OWORD *)__p;
    *(_QWORD *)(v466 + 56) = v638;
    *(_OWORD *)(v466 + 40) = v469;
    __p[0] = 0;
    __p[1] = 0;
    v470 = v640;
    *(_OWORD *)(v466 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v466 + 80) = v470;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v466 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_403;
    goto LABEL_402;
  }
  v471 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v472 = SHIBYTE(v640);
  *v3 = v471;
  if ((v472 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_403;
    goto LABEL_402;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_402:
    operator delete(__p[0]);
LABEL_403:
  RNBRemote::Packet::Packet((uint64_t)&v634, 76, (uint64_t)RNBRemote::HandlePacket_QEnvironmentHexEncoded, 0, 0, 0, "QEnvironmentHexEncoded:", "Add an environment variable to the inferior's environment");
  v473 = *((_QWORD *)this + 85);
  if (v473 < *((_QWORD *)this + 86))
  {
    v474 = v634;
    v475 = v635;
    *(_QWORD *)(v473 + 32) = v636;
    *(_OWORD *)v473 = v474;
    *(_OWORD *)(v473 + 16) = v475;
    v476 = *(_OWORD *)__p;
    *(_QWORD *)(v473 + 56) = v638;
    *(_OWORD *)(v473 + 40) = v476;
    __p[0] = 0;
    __p[1] = 0;
    v477 = v640;
    *(_OWORD *)(v473 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v473 + 80) = v477;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v473 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_409;
    goto LABEL_408;
  }
  v478 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v479 = SHIBYTE(v640);
  *v3 = v478;
  if ((v479 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_409;
    goto LABEL_408;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_408:
    operator delete(__p[0]);
LABEL_409:
  RNBRemote::Packet::Packet((uint64_t)&v634, 77, (uint64_t)RNBRemote::HandlePacket_QLaunchArch, 0, 0, 0, "QLaunchArch:", "Set the architecture to use when launching a process for hosts that can run multiple architecture slices from universal files.");
  v480 = *((_QWORD *)this + 85);
  if (v480 < *((_QWORD *)this + 86))
  {
    v481 = v634;
    v482 = v635;
    *(_QWORD *)(v480 + 32) = v636;
    *(_OWORD *)v480 = v481;
    *(_OWORD *)(v480 + 16) = v482;
    v483 = *(_OWORD *)__p;
    *(_QWORD *)(v480 + 56) = v638;
    *(_OWORD *)(v480 + 40) = v483;
    __p[0] = 0;
    __p[1] = 0;
    v484 = v640;
    *(_OWORD *)(v480 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v480 + 80) = v484;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v480 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_415;
    goto LABEL_414;
  }
  v485 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v486 = SHIBYTE(v640);
  *v3 = v485;
  if ((v486 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_415;
    goto LABEL_414;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_414:
    operator delete(__p[0]);
LABEL_415:
  RNBRemote::Packet::Packet((uint64_t)&v634, 78, (uint64_t)RNBRemote::HandlePacket_QSetDisableASLR, 0, 0, 0, "QSetDisableASLR:", "Set whether to disable ASLR when launching the process with the set argv ('A') packet");
  v487 = *((_QWORD *)this + 85);
  if (v487 < *((_QWORD *)this + 86))
  {
    v488 = v634;
    v489 = v635;
    *(_QWORD *)(v487 + 32) = v636;
    *(_OWORD *)v487 = v488;
    *(_OWORD *)(v487 + 16) = v489;
    v490 = *(_OWORD *)__p;
    *(_QWORD *)(v487 + 56) = v638;
    *(_OWORD *)(v487 + 40) = v490;
    __p[0] = 0;
    __p[1] = 0;
    v491 = v640;
    *(_OWORD *)(v487 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v487 + 80) = v491;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v487 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_421;
    goto LABEL_420;
  }
  v492 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v493 = SHIBYTE(v640);
  *v3 = v492;
  if ((v493 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_421;
    goto LABEL_420;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_420:
    operator delete(__p[0]);
LABEL_421:
  RNBRemote::Packet::Packet((uint64_t)&v634, 79, (uint64_t)RNBRemote::HandlePacket_QSetSTDIO, 0, 0, 0, "QSetSTDIN:", "Set the standard input for a process to be launched with the 'A' packet");
  v494 = *((_QWORD *)this + 85);
  if (v494 < *((_QWORD *)this + 86))
  {
    v495 = v634;
    v496 = v635;
    *(_QWORD *)(v494 + 32) = v636;
    *(_OWORD *)v494 = v495;
    *(_OWORD *)(v494 + 16) = v496;
    v497 = *(_OWORD *)__p;
    *(_QWORD *)(v494 + 56) = v638;
    *(_OWORD *)(v494 + 40) = v497;
    __p[0] = 0;
    __p[1] = 0;
    v498 = v640;
    *(_OWORD *)(v494 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v494 + 80) = v498;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v494 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_427;
    goto LABEL_426;
  }
  v499 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v500 = SHIBYTE(v640);
  *v3 = v499;
  if ((v500 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_427;
    goto LABEL_426;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_426:
    operator delete(__p[0]);
LABEL_427:
  RNBRemote::Packet::Packet((uint64_t)&v634, 80, (uint64_t)RNBRemote::HandlePacket_QSetSTDIO, 0, 0, 0, "QSetSTDOUT:", "Set the standard output for a process to be launched with the 'A' packet");
  v501 = *((_QWORD *)this + 85);
  if (v501 < *((_QWORD *)this + 86))
  {
    v502 = v634;
    v503 = v635;
    *(_QWORD *)(v501 + 32) = v636;
    *(_OWORD *)v501 = v502;
    *(_OWORD *)(v501 + 16) = v503;
    v504 = *(_OWORD *)__p;
    *(_QWORD *)(v501 + 56) = v638;
    *(_OWORD *)(v501 + 40) = v504;
    __p[0] = 0;
    __p[1] = 0;
    v505 = v640;
    *(_OWORD *)(v501 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v501 + 80) = v505;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v501 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_433;
    goto LABEL_432;
  }
  v506 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v507 = SHIBYTE(v640);
  *v3 = v506;
  if ((v507 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_433;
    goto LABEL_432;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_432:
    operator delete(__p[0]);
LABEL_433:
  RNBRemote::Packet::Packet((uint64_t)&v634, 81, (uint64_t)RNBRemote::HandlePacket_QSetSTDIO, 0, 0, 0, "QSetSTDERR:", "Set the standard error for a process to be launched with the 'A' packet");
  v508 = *((_QWORD *)this + 85);
  if (v508 < *((_QWORD *)this + 86))
  {
    v509 = v634;
    v510 = v635;
    *(_QWORD *)(v508 + 32) = v636;
    *(_OWORD *)v508 = v509;
    *(_OWORD *)(v508 + 16) = v510;
    v511 = *(_OWORD *)__p;
    *(_QWORD *)(v508 + 56) = v638;
    *(_OWORD *)(v508 + 40) = v511;
    __p[0] = 0;
    __p[1] = 0;
    v512 = v640;
    *(_OWORD *)(v508 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v508 + 80) = v512;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v508 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_439;
    goto LABEL_438;
  }
  v513 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v514 = SHIBYTE(v640);
  *v3 = v513;
  if ((v514 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_439;
    goto LABEL_438;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_438:
    operator delete(__p[0]);
LABEL_439:
  RNBRemote::Packet::Packet((uint64_t)&v634, 82, (uint64_t)RNBRemote::HandlePacket_QSetWorkingDir, 0, 0, 0, "QSetWorkingDir:", "Set the working directory for a process to be launched with the 'A' packet");
  v515 = *((_QWORD *)this + 85);
  if (v515 < *((_QWORD *)this + 86))
  {
    v516 = v634;
    v517 = v635;
    *(_QWORD *)(v515 + 32) = v636;
    *(_OWORD *)v515 = v516;
    *(_OWORD *)(v515 + 16) = v517;
    v518 = *(_OWORD *)__p;
    *(_QWORD *)(v515 + 56) = v638;
    *(_OWORD *)(v515 + 40) = v518;
    __p[0] = 0;
    __p[1] = 0;
    v519 = v640;
    *(_OWORD *)(v515 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v515 + 80) = v519;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v515 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_445;
    goto LABEL_444;
  }
  v520 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v521 = SHIBYTE(v640);
  *v3 = v520;
  if ((v521 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_445;
    goto LABEL_444;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_444:
    operator delete(__p[0]);
LABEL_445:
  RNBRemote::Packet::Packet((uint64_t)&v634, 83, (uint64_t)RNBRemote::HandlePacket_QListThreadsInStopReply, 0, 0, 0, "QListThreadsInStopReply", "Set if the 'threads' key should be added to the stop reply packets with a list of all thread IDs.");
  v522 = *((_QWORD *)this + 85);
  if (v522 < *((_QWORD *)this + 86))
  {
    v523 = v634;
    v524 = v635;
    *(_QWORD *)(v522 + 32) = v636;
    *(_OWORD *)v522 = v523;
    *(_OWORD *)(v522 + 16) = v524;
    v525 = *(_OWORD *)__p;
    *(_QWORD *)(v522 + 56) = v638;
    *(_OWORD *)(v522 + 40) = v525;
    __p[0] = 0;
    __p[1] = 0;
    v526 = v640;
    *(_OWORD *)(v522 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v522 + 80) = v526;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v522 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_451;
    goto LABEL_450;
  }
  v527 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v528 = SHIBYTE(v640);
  *v3 = v527;
  if ((v528 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_451;
    goto LABEL_450;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_450:
    operator delete(__p[0]);
LABEL_451:
  RNBRemote::Packet::Packet((uint64_t)&v634, 84, (uint64_t)RNBRemote::HandlePacket_QSyncThreadState, 0, 0, 0, "QSyncThreadState:", "Do whatever is necessary to make sure 'thread' is in a safe state to call functions on.");
  v529 = *((_QWORD *)this + 85);
  if (v529 < *((_QWORD *)this + 86))
  {
    v530 = v634;
    v531 = v635;
    *(_QWORD *)(v529 + 32) = v636;
    *(_OWORD *)v529 = v530;
    *(_OWORD *)(v529 + 16) = v531;
    v532 = *(_OWORD *)__p;
    *(_QWORD *)(v529 + 56) = v638;
    *(_OWORD *)(v529 + 40) = v532;
    __p[0] = 0;
    __p[1] = 0;
    v533 = v640;
    *(_OWORD *)(v529 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v529 + 80) = v533;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v529 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_457;
    goto LABEL_456;
  }
  v534 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v535 = SHIBYTE(v640);
  *v3 = v534;
  if ((v535 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_457;
    goto LABEL_456;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_456:
    operator delete(__p[0]);
LABEL_457:
  RNBRemote::Packet::Packet((uint64_t)&v634, 90, (uint64_t)RNBRemote::HandlePacket_AllocateMemory, 0, 0, 0, "_M", "Allocate memory in the inferior process.");
  v536 = *((_QWORD *)this + 85);
  if (v536 < *((_QWORD *)this + 86))
  {
    v537 = v634;
    v538 = v635;
    *(_QWORD *)(v536 + 32) = v636;
    *(_OWORD *)v536 = v537;
    *(_OWORD *)(v536 + 16) = v538;
    v539 = *(_OWORD *)__p;
    *(_QWORD *)(v536 + 56) = v638;
    *(_OWORD *)(v536 + 40) = v539;
    __p[0] = 0;
    __p[1] = 0;
    v540 = v640;
    *(_OWORD *)(v536 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v536 + 80) = v540;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v536 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_463;
    goto LABEL_462;
  }
  v541 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v542 = SHIBYTE(v640);
  *v3 = v541;
  if ((v542 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_463;
    goto LABEL_462;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_462:
    operator delete(__p[0]);
LABEL_463:
  RNBRemote::Packet::Packet((uint64_t)&v634, 91, (uint64_t)RNBRemote::HandlePacket_DeallocateMemory, 0, 0, 0, "_m", "Deallocate memory in the inferior process.");
  v543 = *((_QWORD *)this + 85);
  if (v543 < *((_QWORD *)this + 86))
  {
    v544 = v634;
    v545 = v635;
    *(_QWORD *)(v543 + 32) = v636;
    *(_OWORD *)v543 = v544;
    *(_OWORD *)(v543 + 16) = v545;
    v546 = *(_OWORD *)__p;
    *(_QWORD *)(v543 + 56) = v638;
    *(_OWORD *)(v543 + 40) = v546;
    __p[0] = 0;
    __p[1] = 0;
    v547 = v640;
    *(_OWORD *)(v543 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v543 + 80) = v547;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v543 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_469;
    goto LABEL_468;
  }
  v548 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v549 = SHIBYTE(v640);
  *v3 = v548;
  if ((v549 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_469;
    goto LABEL_468;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_468:
    operator delete(__p[0]);
LABEL_469:
  RNBRemote::Packet::Packet((uint64_t)&v634, 93, (uint64_t)RNBRemote::HandlePacket_SaveRegisterState, 0, 0, 0, "QSaveRegisterState", "Save the register state for the current thread and return a decimal save ID.");
  v550 = *((_QWORD *)this + 85);
  if (v550 < *((_QWORD *)this + 86))
  {
    v551 = v634;
    v552 = v635;
    *(_QWORD *)(v550 + 32) = v636;
    *(_OWORD *)v550 = v551;
    *(_OWORD *)(v550 + 16) = v552;
    v553 = *(_OWORD *)__p;
    *(_QWORD *)(v550 + 56) = v638;
    *(_OWORD *)(v550 + 40) = v553;
    __p[0] = 0;
    __p[1] = 0;
    v554 = v640;
    *(_OWORD *)(v550 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v550 + 80) = v554;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v550 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_475;
    goto LABEL_474;
  }
  v555 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v556 = SHIBYTE(v640);
  *v3 = v555;
  if ((v556 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_475;
    goto LABEL_474;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_474:
    operator delete(__p[0]);
LABEL_475:
  RNBRemote::Packet::Packet((uint64_t)&v634, 94, (uint64_t)RNBRemote::HandlePacket_RestoreRegisterState, 0, 0, 0, "QRestoreRegisterState:", "Restore the register state given a save ID previously returned from a call to QSaveRegisterState.");
  v557 = *((_QWORD *)this + 85);
  if (v557 < *((_QWORD *)this + 86))
  {
    v558 = v634;
    v559 = v635;
    *(_QWORD *)(v557 + 32) = v636;
    *(_OWORD *)v557 = v558;
    *(_OWORD *)(v557 + 16) = v559;
    v560 = *(_OWORD *)__p;
    *(_QWORD *)(v557 + 56) = v638;
    *(_OWORD *)(v557 + 40) = v560;
    __p[0] = 0;
    __p[1] = 0;
    v561 = v640;
    *(_OWORD *)(v557 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v557 + 80) = v561;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v557 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_481;
    goto LABEL_480;
  }
  v562 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v563 = SHIBYTE(v640);
  *v3 = v562;
  if ((v563 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_481;
    goto LABEL_480;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_480:
    operator delete(__p[0]);
LABEL_481:
  RNBRemote::Packet::Packet((uint64_t)&v634, 85, (uint64_t)RNBRemote::HandlePacket_MemoryRegionInfo, 0, 0, 0, "qMemoryRegionInfo", "Return size and attributes of a memory region that contains the given address");
  v564 = *((_QWORD *)this + 85);
  if (v564 < *((_QWORD *)this + 86))
  {
    v565 = v634;
    v566 = v635;
    *(_QWORD *)(v564 + 32) = v636;
    *(_OWORD *)v564 = v565;
    *(_OWORD *)(v564 + 16) = v566;
    v567 = *(_OWORD *)__p;
    *(_QWORD *)(v564 + 56) = v638;
    *(_OWORD *)(v564 + 40) = v567;
    __p[0] = 0;
    __p[1] = 0;
    v568 = v640;
    *(_OWORD *)(v564 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v564 + 80) = v568;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v564 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_487;
    goto LABEL_486;
  }
  v569 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v570 = SHIBYTE(v640);
  *v3 = v569;
  if ((v570 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_487;
    goto LABEL_486;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_486:
    operator delete(__p[0]);
LABEL_487:
  RNBRemote::Packet::Packet((uint64_t)&v634, 86, (uint64_t)RNBRemote::HandlePacket_GetProfileData, 0, 0, 0, "qGetProfileData", "Return profiling data of the current target.");
  v571 = *((_QWORD *)this + 85);
  if (v571 < *((_QWORD *)this + 86))
  {
    v572 = v634;
    v573 = v635;
    *(_QWORD *)(v571 + 32) = v636;
    *(_OWORD *)v571 = v572;
    *(_OWORD *)(v571 + 16) = v573;
    v574 = *(_OWORD *)__p;
    *(_QWORD *)(v571 + 56) = v638;
    *(_OWORD *)(v571 + 40) = v574;
    __p[0] = 0;
    __p[1] = 0;
    v575 = v640;
    *(_OWORD *)(v571 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v571 + 80) = v575;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v571 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_493;
    goto LABEL_492;
  }
  v576 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v577 = SHIBYTE(v640);
  *v3 = v576;
  if ((v577 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_493;
    goto LABEL_492;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_492:
    operator delete(__p[0]);
LABEL_493:
  RNBRemote::Packet::Packet((uint64_t)&v634, 87, (uint64_t)RNBRemote::HandlePacket_SetEnableAsyncProfiling, 0, 0, 0, "QSetEnableAsyncProfiling", "Enable or disable the profiling of current target.");
  v578 = *((_QWORD *)this + 85);
  if (v578 < *((_QWORD *)this + 86))
  {
    v579 = v634;
    v580 = v635;
    *(_QWORD *)(v578 + 32) = v636;
    *(_OWORD *)v578 = v579;
    *(_OWORD *)(v578 + 16) = v580;
    v581 = *(_OWORD *)__p;
    *(_QWORD *)(v578 + 56) = v638;
    *(_OWORD *)(v578 + 40) = v581;
    __p[0] = 0;
    __p[1] = 0;
    v582 = v640;
    *(_OWORD *)(v578 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v578 + 80) = v582;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v578 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_499;
    goto LABEL_498;
  }
  v583 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v584 = SHIBYTE(v640);
  *v3 = v583;
  if ((v584 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_499;
    goto LABEL_498;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_498:
    operator delete(__p[0]);
LABEL_499:
  RNBRemote::Packet::Packet((uint64_t)&v634, 88, (uint64_t)RNBRemote::HandlePacket_QEnableCompression, 0, 0, 0, "QEnableCompression:", "Enable compression for the remainder of the connection");
  v585 = *((_QWORD *)this + 85);
  if (v585 < *((_QWORD *)this + 86))
  {
    v586 = v634;
    v587 = v635;
    *(_QWORD *)(v585 + 32) = v636;
    *(_OWORD *)v585 = v586;
    *(_OWORD *)(v585 + 16) = v587;
    v588 = *(_OWORD *)__p;
    *(_QWORD *)(v585 + 56) = v638;
    *(_OWORD *)(v585 + 40) = v588;
    __p[0] = 0;
    __p[1] = 0;
    v589 = v640;
    *(_OWORD *)(v585 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v585 + 80) = v589;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v585 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_505;
    goto LABEL_504;
  }
  v590 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v591 = SHIBYTE(v640);
  *v3 = v590;
  if ((v591 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_505;
    goto LABEL_504;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_504:
    operator delete(__p[0]);
LABEL_505:
  RNBRemote::Packet::Packet((uint64_t)&v634, 89, (uint64_t)RNBRemote::HandlePacket_WatchpointSupportInfo, 0, 0, 0, "qWatchpointSupportInfo", "Return the number of supported hardware watchpoints");
  v592 = *((_QWORD *)this + 85);
  if (v592 < *((_QWORD *)this + 86))
  {
    v593 = v634;
    v594 = v635;
    *(_QWORD *)(v592 + 32) = v636;
    *(_OWORD *)v592 = v593;
    *(_OWORD *)(v592 + 16) = v594;
    v595 = *(_OWORD *)__p;
    *(_QWORD *)(v592 + 56) = v638;
    *(_OWORD *)(v592 + 40) = v595;
    __p[0] = 0;
    __p[1] = 0;
    v596 = v640;
    *(_OWORD *)(v592 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v592 + 80) = v596;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v592 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_511;
    goto LABEL_510;
  }
  v597 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v598 = SHIBYTE(v640);
  *v3 = v597;
  if ((v598 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_511;
    goto LABEL_510;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_510:
    operator delete(__p[0]);
LABEL_511:
  RNBRemote::Packet::Packet((uint64_t)&v634, 92, (uint64_t)RNBRemote::HandlePacket_QSetProcessEvent, 0, 0, 0, "QSetProcessEvent:", "Set a process event, to be passed to the process, can be set before the process is started, or after.");
  v599 = *((_QWORD *)this + 85);
  if (v599 < *((_QWORD *)this + 86))
  {
    v600 = v634;
    v601 = v635;
    *(_QWORD *)(v599 + 32) = v636;
    *(_OWORD *)v599 = v600;
    *(_OWORD *)(v599 + 16) = v601;
    v602 = *(_OWORD *)__p;
    *(_QWORD *)(v599 + 56) = v638;
    *(_OWORD *)(v599 + 40) = v602;
    __p[0] = 0;
    __p[1] = 0;
    v603 = v640;
    *(_OWORD *)(v599 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v599 + 80) = v603;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v599 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_517;
    goto LABEL_516;
  }
  v604 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v605 = SHIBYTE(v640);
  *v3 = v604;
  if ((v605 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_517;
    goto LABEL_516;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_516:
    operator delete(__p[0]);
LABEL_517:
  RNBRemote::Packet::Packet((uint64_t)&v634, 96, (uint64_t)RNBRemote::HandlePacket_QSetDetachOnError, 0, 0, 0, "QSetDetachOnError:", "Set whether debugserver will detach (1) or kill (0) from the process it is controlling if it loses connection to lldb.");
  v606 = *((_QWORD *)this + 85);
  if (v606 < *((_QWORD *)this + 86))
  {
    v607 = v634;
    v608 = v635;
    *(_QWORD *)(v606 + 32) = v636;
    *(_OWORD *)v606 = v607;
    *(_OWORD *)(v606 + 16) = v608;
    v609 = *(_OWORD *)__p;
    *(_QWORD *)(v606 + 56) = v638;
    *(_OWORD *)(v606 + 40) = v609;
    __p[0] = 0;
    __p[1] = 0;
    v610 = v640;
    *(_OWORD *)(v606 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v606 + 80) = v610;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v606 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_523;
    goto LABEL_522;
  }
  v611 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v612 = SHIBYTE(v640);
  *v3 = v611;
  if ((v612 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_523;
    goto LABEL_522;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_522:
    operator delete(__p[0]);
LABEL_523:
  RNBRemote::Packet::Packet((uint64_t)&v634, 95, (uint64_t)RNBRemote::HandlePacket_qSpeedTest, 0, 0, 0, "qSpeedTest:", "Test the maximum speed at which packet can be sent/received.");
  v613 = *((_QWORD *)this + 85);
  if (v613 < *((_QWORD *)this + 86))
  {
    v614 = v634;
    v615 = v635;
    *(_QWORD *)(v613 + 32) = v636;
    *(_OWORD *)v613 = v614;
    *(_OWORD *)(v613 + 16) = v615;
    v616 = *(_OWORD *)__p;
    *(_QWORD *)(v613 + 56) = v638;
    *(_OWORD *)(v613 + 40) = v616;
    __p[0] = 0;
    __p[1] = 0;
    v617 = v640;
    *(_OWORD *)(v613 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v613 + 80) = v617;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v613 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_529;
    goto LABEL_528;
  }
  v618 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v619 = SHIBYTE(v640);
  *v3 = v618;
  if ((v619 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_529;
    goto LABEL_528;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_528:
    operator delete(__p[0]);
LABEL_529:
  RNBRemote::Packet::Packet((uint64_t)&v634, 97, (uint64_t)RNBRemote::HandlePacket_qXfer, 0, 0, 0, "qXfer:", "Support the qXfer packet.");
  v620 = *((_QWORD *)this + 85);
  if (v620 < *((_QWORD *)this + 86))
  {
    v621 = v634;
    v622 = v635;
    *(_QWORD *)(v620 + 32) = v636;
    *(_OWORD *)v620 = v621;
    *(_OWORD *)(v620 + 16) = v622;
    v623 = *(_OWORD *)__p;
    *(_QWORD *)(v620 + 56) = v638;
    *(_OWORD *)(v620 + 40) = v623;
    __p[0] = 0;
    __p[1] = 0;
    v624 = v640;
    *(_OWORD *)(v620 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v620 + 80) = v624;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v620 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_535;
    goto LABEL_534;
  }
  v625 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v626 = SHIBYTE(v640);
  *v3 = v625;
  if ((v626 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      goto LABEL_535;
    goto LABEL_534;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_534:
    operator delete(__p[0]);
LABEL_535:
  RNBRemote::Packet::Packet((uint64_t)&v634, 98, (uint64_t)RNBRemote::HandlePacket_jGetDyldProcessState, 0, 0, 0, "jGetDyldProcessState", "Query the process state from dyld.");
  v627 = *((_QWORD *)this + 85);
  if (v627 < *((_QWORD *)this + 86))
  {
    v628 = v634;
    v629 = v635;
    *(_QWORD *)(v627 + 32) = v636;
    *(_OWORD *)v627 = v628;
    *(_OWORD *)(v627 + 16) = v629;
    v630 = *(_OWORD *)__p;
    *(_QWORD *)(v627 + 56) = v638;
    *(_OWORD *)(v627 + 40) = v630;
    __p[0] = 0;
    __p[1] = 0;
    v631 = v640;
    *(_OWORD *)(v627 + 64) = *(_OWORD *)v639;
    *(_QWORD *)(v627 + 80) = v631;
    v638 = 0;
    v639[0] = 0;
    v639[1] = 0;
    v640 = 0;
    *v3 = (char *)(v627 + 88);
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      return;
    goto LABEL_540;
  }
  v632 = std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(v2, (uint64_t)&v634);
  v633 = SHIBYTE(v640);
  *v3 = v632;
  if ((v633 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v638) & 0x80000000) == 0)
      return;
    goto LABEL_540;
  }
  operator delete(v639[0]);
  if (SHIBYTE(v638) < 0)
LABEL_540:
    operator delete(__p[0]);
}

void RNBRemote::~RNBRemote(RNBRemote *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  pthread_mutex_t *v5;

  if (DNBLogEnabledForAny(0x100000))
    _DNBLogThreaded("%s", "RNBRemote::~RNBRemote()");
  RNBRemote::StopReadRemoteDataThread(this);
  if (*((char *)this + 767) < 0)
    operator delete(*((void **)this + 93));
  std::deque<std::string>::~deque[abi:nn180100]((uint64_t)this + 696);
  v2 = *((_QWORD *)this + 84);
  if (v2)
  {
    v3 = *((_QWORD *)this + 85);
    v4 = (void *)*((_QWORD *)this + 84);
    if (v3 == v2)
    {
LABEL_15:
      *((_QWORD *)this + 85) = v2;
      operator delete(v4);
      goto LABEL_16;
    }
    while (1)
    {
      if (*(char *)(v3 - 1) < 0)
      {
        operator delete(*(void **)(v3 - 24));
        if (*(char *)(v3 - 25) < 0)
LABEL_13:
          operator delete(*(void **)(v3 - 48));
      }
      else if (*(char *)(v3 - 25) < 0)
      {
        goto LABEL_13;
      }
      v3 -= 88;
      if (v3 == v2)
      {
        v4 = (void *)*((_QWORD *)this + 84);
        goto LABEL_15;
      }
    }
  }
LABEL_16:
  if (!pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 552))
    || pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 552)))
  {
    if ((*((char *)this + 535) & 0x80000000) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 552));
  if (*((char *)this + 535) < 0)
LABEL_19:
    operator delete(*((void **)this + 64));
LABEL_20:
  RNBSocket::Disconnect((RNBRemote *)((char *)this + 472));
  v5 = (pthread_mutex_t *)*((_QWORD *)this + 61);
  *((_QWORD *)this + 61) = 0;
  if (v5)
  {
    if (pthread_mutex_destroy(v5))
    {
      if (!pthread_mutex_unlock(v5))
        pthread_mutex_destroy(v5);
    }
    operator delete();
  }
  RNBContext::~RNBContext(this);
}

uint64_t RNBRemote::StopReadRemoteDataThread(RNBRemote *this)
{
  pthread_mutex_t *v2;
  int tv_sec;
  __darwin_suseconds_t tv_usec;
  uint64_t v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  timespec v15;
  timeval v16;

  if (DNBLogEnabledForAny(0x100000))
  {
    v2 = (pthread_mutex_t *)*((_QWORD *)this + 61);
    if (v2)
      pthread_mutex_lock(*((pthread_mutex_t **)this + 61));
    gettimeofday(&v16, 0);
    tv_sec = v16.tv_sec;
    tv_usec = v16.tv_usec;
    v5 = *((_QWORD *)this + 62);
    v6 = *((_DWORD *)this + 126);
    *((timeval *)this + 31) = v16;
    if (v2)
      pthread_mutex_unlock(v2);
    _DNBLogThreaded("%8u RNBRemote::%s called", tv_usec - v6 + 1000000 * (tv_sec - v5), "StopReadRemoteDataThread");
  }
  result = PThreadEvent::GetEventBits((pthread_mutex_t *)((char *)this + 120));
  if ((result & 0x40) != 0)
  {
    if (DNBLogEnabled())
      _DNBLog(0, (uint64_t)"debugserver about to shut down packet communications to lldb.", v8, v9, v10, v11, v12, v13, v14);
    RNBSocket::Disconnect((RNBRemote *)((char *)this + 472));
    gettimeofday(&v16, 0);
    v15.tv_sec = v16.tv_sec + v16.tv_usec / 1000000 + 2;
    v15.tv_nsec = 1000 * v16.tv_usec % 1000000000;
    return PThreadEvent::WaitForSetEvents((pthread_mutex_t *)((char *)this + 120), 0x80u, &v15);
  }
  return result;
}

uint64_t RNBRemote::HandlePacket_m(RNBRemote *this, const char *__s, uint64_t a3, uint64_t a4, const char *a5)
{
  RNBRemote *v7;
  int v8;
  const char *v9;
  const char *v11;
  mach_vm_address_t v12;
  size_t v13;
  unint64_t v14;
  char *p_b;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t i;
  _QWORD *v21;
  _QWORD *v22;
  _BYTE *v23;
  const std::locale::facet *v24;
  char *v25;
  std::locale v26;
  char v27;
  void *__p;
  _BYTE v29[15];
  char v30;
  _BYTE v31[240];
  char *__b;
  unint64_t v33;
  unsigned __int8 v34;
  char *__endptr;

  if (!__s || !*__s || strlen(__s) <= 2)
  {
    v7 = this;
    v8 = 3100;
    v9 = __s;
    return RNBRemote::HandlePacket_ILLFORMED(v7, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", v8, v9, a5);
  }
  __endptr = 0;
  v11 = __s + 1;
  *__error() = 0;
  v12 = strtoull(__s + 1, &__endptr, 16);
  if (*__error() && !v12)
  {
    v7 = this;
    v8 = 3108;
LABEL_14:
    v9 = v11;
    return RNBRemote::HandlePacket_ILLFORMED(v7, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", v8, v9, a5);
  }
  if (*__endptr != 44)
  {
    v7 = this;
    v8 = 3112;
    goto LABEL_14;
  }
  v11 = __endptr + 1;
  *__error() = 0;
  v13 = strtoul(v11, 0, 16);
  if (*__error() && !v13)
  {
    v7 = this;
    v8 = 3122;
    goto LABEL_14;
  }
  if (v13)
  {
    std::basic_string<unsigned char>::basic_string[abi:nn180100](&__b, v13, 0);
    if ((char)v34 < 0)
    {
      v14 = v33;
      if (v33)
      {
        p_b = __b;
        goto LABEL_23;
      }
    }
    else
    {
      v14 = v34;
      if (v34)
      {
        p_b = (char *)&__b;
LABEL_23:
        v18 = DNBProcessMemoryRead(*((_DWORD *)this + 3), v12, v14, p_b);
        if (v18)
        {
          v19 = v18;
          std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)&__p);
          for (i = 0; i != v19; ++i)
          {
            v22 = __p;
            v23 = &v29[*((_QWORD *)__p - 3) - 8];
            if (*((_DWORD *)v23 + 36) == -1)
            {
              std::ios_base::getloc((const std::ios_base *)&v29[*((_QWORD *)__p - 3) - 8]);
              v24 = std::locale::use_facet(&v26, &std::ctype<char>::id);
              ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 32);
              std::locale::~locale(&v26);
              v22 = __p;
            }
            *((_DWORD *)v23 + 36) = 48;
            *(_DWORD *)&v29[*(v22 - 3)] = *(_DWORD *)&v29[*(v22 - 3)] & 0xFFFFFFB5 | 8;
            *(_DWORD *)&v29[*(v22 - 3)] = *(_DWORD *)&v29[*(v22 - 3)] & 0xFFFFFF4F | 0x80;
            *(_QWORD *)&v31[*(v22 - 3)] = 2;
            if ((v34 & 0x80u) == 0)
              v21 = &__b;
            else
              v21 = __b;
            std::ostream::operator<<(&__p, *((unsigned __int8 *)v21 + i));
          }
          std::stringbuf::str(&v26, v29);
          v16 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)&v26);
          if (v27 < 0)
            operator delete(v26.__locale_);
          std::ostringstream::~ostringstream((uint64_t)&__p);
          goto LABEL_38;
        }
        v25 = "E08";
LABEL_36:
        std::string::basic_string[abi:nn180100]<0>(&__p, v25);
        v16 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)&__p);
        if (v30 < 0)
          operator delete(__p);
LABEL_38:
        if ((char)v34 < 0)
        {
          v17 = __b;
          goto LABEL_40;
        }
        return v16;
      }
    }
    v25 = "E78";
    goto LABEL_36;
  }
  std::string::basic_string[abi:nn180100]<0>(&__p, (char *)&unk_1000528BD);
  v16 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)&__p);
  if (v30 < 0)
  {
    v17 = __p;
LABEL_40:
    operator delete(v17);
  }
  return v16;
}

uint64_t RNBRemote::HandlePacket_p(RNBRemote *this, const char *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v7;
  unsigned int v8;
  const char *v9;
  RNBRemote *v10;
  int v11;
  uint64_t v13;
  char *v14;
  unint64_t CurrentThread;
  uint64_t v16;
  void *v17;
  void *v18;
  std::ios_base *v19;
  unint64_t v20;
  size_t v21;
  unsigned __int8 *v22;
  void *v23;
  unint64_t v24;
  void *__b[2];
  unsigned __int8 v26;
  void *__p;
  void (__cdecl **v28)(std::stringbuf *__hidden);
  char v29;
  void *v30[2];
  __int128 v31;
  int v32;
  void (__cdecl **v33)(std::ostringstream *__hidden);
  char *__endptr;

  if (g_num_reg_entries)
  {
    if (!a2)
      return RNBRemote::HandlePacket_ILLFORMED(this, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", 4100, a2, a5);
  }
  else
  {
    RNBRemote::InitializeRegisters(this, 0);
    if (!a2)
      return RNBRemote::HandlePacket_ILLFORMED(this, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", 4100, a2, a5);
  }
  if (!*a2)
    return RNBRemote::HandlePacket_ILLFORMED(this, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", 4100, a2, a5);
  v7 = *((_DWORD *)this + 3);
  if (!v7)
  {
    v29 = 3;
    LODWORD(__p) = 3486021;
    v13 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)&__p);
    if (v29 < 0)
      operator delete(__p);
    return v13;
  }
  *__error() = 0;
  __endptr = 0;
  v8 = strtoul(a2 + 1, &__endptr, 16);
  if (!*__error() || v8)
  {
    if (*((_BYTE *)this + 782))
    {
      if (!__endptr || (v14 = strstr(__endptr, "thread:")) == 0 || (CurrentThread = strtoul(v14 + 7, 0, 16)) == 0)
      {
LABEL_24:
        v10 = this;
        v11 = 4117;
        return RNBRemote::HandlePacket_ILLFORMED(v10, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", v11, a2, v9);
      }
    }
    else
    {
      CurrentThread = *((_QWORD *)this + 68);
      if (CurrentThread + 1 <= 1)
      {
        CurrentThread = DNBProcessGetCurrentThread(*((_DWORD *)this + 3));
        if (!CurrentThread)
          goto LABEL_24;
      }
    }
    v24 = g_num_reg_entries;
    v16 = g_reg_entries;
    __p = v17;
    *(void **)((char *)&__p + *((_QWORD *)v17 - 3)) = v18;
    v19 = (std::ios_base *)((char *)&__p + *((_QWORD *)__p - 3));
    std::ios_base::init(v19, &v28);
    v19[1].__vftable = 0;
    v19[1].__fmtflags_ = -1;
    std::streambuf::basic_streambuf(&v28);
    *(_OWORD *)v30 = 0u;
    v31 = 0u;
    v32 = 16;
    if (v8 < v24 && v16)
    {
      v20 = v16 + ((unint64_t)v8 << 7);
      if (*(_DWORD *)(v20 + 12) == -1)
      {
        v21 = *(unsigned int *)(v20 + 36);
        if ((_DWORD)v21)
        {
          std::basic_string<unsigned char>::basic_string[abi:nn180100](__b, v21, 0);
          v22 = (v26 & 0x80u) == 0 ? (unsigned __int8 *)__b : (unsigned __int8 *)__b[0];
          v23 = (v26 & 0x80u) == 0 ? (void *)v26 : __b[1];
          append_hex_value((uint64_t)&__p, v22, (uint64_t)v23, 0);
          if ((char)v26 < 0)
            operator delete(__b[0]);
        }
      }
      else
      {
        register_value_in_hex_fixed_width((uint64_t)&__p, v7, CurrentThread, v16 + ((unint64_t)v8 << 7), 0);
      }
    }
    else
    {
      if (DNBLogEnabled())
        _DNBLogError("RNBRemote::HandlePacket_p(%s): unknown register number %u requested\n", a2, v8);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)"00000000", 8);
    }
    std::stringbuf::str(__b, &v28);
    v13 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)__b);
    if ((char)v26 < 0)
      operator delete(__b[0]);
    if (SBYTE7(v31) < 0)
      operator delete(v30[0]);
    std::streambuf::~streambuf(&v28);
    std::ios::~ios(&v33);
    return v13;
  }
  v10 = this;
  v11 = 4112;
  return RNBRemote::HandlePacket_ILLFORMED(v10, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", v11, a2, v9);
}

uint64_t RNBRemote::HandlePacket_g(RNBRemote *this, char *a2)
{
  void (__cdecl **v4)(std::ostringstream *__hidden);
  uint64_t v5;
  std::ios_base *v6;
  int v7;
  char *v8;
  const char *v9;
  unint64_t CurrentThread;
  int v11;
  size_t RegisterContext;
  size_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *__p[2];
  char v19;
  void (__cdecl **v20)(std::ostringstream *__hidden);
  _QWORD v21[8];
  void *v22[2];
  __int128 v23;
  int v24;
  void (__cdecl **v25)(std::ostringstream *__hidden);

  v20 = v4;
  *(_QWORD *)((char *)&v21[-1] + (_QWORD)*(v4 - 3)) = v5;
  v6 = (std::ios_base *)((char *)&v21[-1] + (_QWORD)*(v20 - 3));
  std::ios_base::init(v6, v21);
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf(v21);
  *(_OWORD *)v22 = 0u;
  v23 = 0u;
  v24 = 16;
  v7 = *((_DWORD *)this + 3);
  if (!v7)
  {
    v19 = 3;
    v11 = 3223877;
    goto LABEL_20;
  }
  if (g_num_reg_entries)
  {
    if (*((_BYTE *)this + 782))
    {
LABEL_4:
      v8 = strstr(a2 + 1, "thread:");
      if (!v8 || (CurrentThread = strtoul(v8 + 7, 0, 16)) == 0)
      {
LABEL_17:
        v15 = RNBRemote::HandlePacket_ILLFORMED(this, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", 3295, a2, v9);
        goto LABEL_23;
      }
      goto LABEL_11;
    }
  }
  else
  {
    RNBRemote::InitializeRegisters(this, 0);
    v7 = *((_DWORD *)this + 3);
    if (*((_BYTE *)this + 782))
      goto LABEL_4;
  }
  CurrentThread = *((_QWORD *)this + 68);
  if (CurrentThread + 1 <= 1)
  {
    CurrentThread = DNBProcessGetCurrentThread(v7);
    if (!CurrentThread)
      goto LABEL_17;
  }
LABEL_11:
  RegisterContext = DNBThreadGetRegisterContext(v7, CurrentThread, 0, 0);
  if (RegisterContext)
  {
    v13 = RegisterContext;
    if ((RegisterContext & 0x8000000000000000) != 0)
      abort();
    v14 = operator new(RegisterContext);
    bzero(v14, v13);
    if (DNBThreadGetRegisterContext(v7, CurrentThread, v14, v13))
    {
      append_hex_value((uint64_t)&v20, (unsigned __int8 *)v14, v13, 0);
      std::stringbuf::str(__p, v21);
      v15 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)__p);
      if (v19 < 0)
        operator delete(__p[0]);
      v16 = v14;
      goto LABEL_22;
    }
    operator delete(v14);
  }
  v19 = 3;
  v11 = 3422021;
LABEL_20:
  LODWORD(__p[0]) = v11;
  v15 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)__p);
  if ((v19 & 0x80000000) == 0)
    goto LABEL_23;
  v16 = __p[0];
LABEL_22:
  operator delete(v16);
LABEL_23:
  if (SBYTE7(v23) < 0)
    operator delete(v22[0]);
  std::streambuf::~streambuf(v21);
  std::ios::~ios(&v25);
  return v15;
}

uint64_t RNBRemote::HandlePacket_M(RNBRemote *this, const char *__s, uint64_t a3, uint64_t a4, const char *a5)
{
  RNBRemote *v7;
  int v8;
  const char *v9;
  const char *v11;
  unint64_t v12;
  const char *v13;
  unint64_t v14;
  char *v15;
  size_t v16;
  size_t v17;
  char *v18;
  char v19;
  char *v20;
  char v21;
  char v22;
  BOOL v23;
  int v24;
  char *v25;
  uint64_t v26;
  char __str[8];
  char v29;
  char *__endptr;

  if (!__s || !*__s || strlen(__s) <= 2)
  {
    v7 = this;
    v8 = 3027;
    v9 = __s;
    return RNBRemote::HandlePacket_ILLFORMED(v7, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", v8, v9, a5);
  }
  __endptr = 0;
  v11 = __s + 1;
  *__error() = 0;
  v12 = strtoull(__s + 1, &__endptr, 16);
  if (*__error() && !v12)
  {
    v7 = this;
    v8 = 3035;
LABEL_14:
    v9 = v11;
    return RNBRemote::HandlePacket_ILLFORMED(v7, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", v8, v9, a5);
  }
  if (*__endptr != 44)
  {
    v7 = this;
    v8 = 3039;
    goto LABEL_14;
  }
  v13 = __endptr + 1;
  *__error() = 0;
  v14 = strtoul(v13, &__endptr, 16);
  if (*__error() && !v14)
  {
    v7 = this;
    v8 = 3049;
    v9 = v13;
    return RNBRemote::HandlePacket_ILLFORMED(v7, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", v8, v9, a5);
  }
  if (!v14)
    goto LABEL_28;
  if (*__endptr != 58)
  {
    v7 = this;
    v8 = 3057;
    v9 = v13;
    return RNBRemote::HandlePacket_ILLFORMED(v7, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", v8, v9, a5);
  }
  v15 = __endptr + 1;
  v16 = strlen(__endptr + 1);
  if ((v16 & 1) != 0)
  {
    v7 = this;
    v8 = 3065;
    v9 = __endptr + 1;
    return RNBRemote::HandlePacket_ILLFORMED(v7, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", v8, v9, a5);
  }
  if (!v16)
    goto LABEL_28;
  __chkstk_darwin(v16);
  v18 = &__str[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  bzero(v18, v17);
  v19 = *v15;
  if (*v15)
  {
    v20 = v18;
    do
    {
      v21 = v15[1];
      if (!v21)
        break;
      __str[0] = v19;
      __str[1] = v21;
      __str[2] = 0;
      *__error() = 0;
      v22 = strtoul(__str, 0, 16);
      if (*__error())
        v23 = v22 == 0;
      else
        v23 = 0;
      if (v23)
      {
        v7 = this;
        v8 = 3083;
        v9 = v15;
        return RNBRemote::HandlePacket_ILLFORMED(v7, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", v8, v9, a5);
      }
      *v20++ = v22;
      v24 = v15[2];
      v15 += 2;
      v19 = v24;
    }
    while (v24);
  }
  if (DNBProcessMemoryWrite(*((_DWORD *)this + 3), v12, v14, v18) != v14)
    v25 = "E09";
  else
LABEL_28:
    v25 = "OK";
  std::string::basic_string[abi:nn180100]<0>(__str, v25);
  v26 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)__str);
  if (v29 < 0)
    operator delete(*(void **)__str);
  return v26;
}

uint64_t RNBRemote::HandlePacket_P(RNBRemote *this, char *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v7;
  StdStringExtractor *v8;
  int Char;
  unsigned int HexMaxU32;
  int v11;
  const char *v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char *ThreadIDFromThreadSuffix;
  char *v18;
  uint64_t v20;
  RNBRemote *v21;
  int v22;
  int v23;
  char *v24;
  void *v25;
  _QWORD v26[2];
  char v27;
  void *__p[2];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _BYTE v33[64];
  void *v34[5];

  if (g_num_reg_entries)
  {
    if (!a2)
      return RNBRemote::HandlePacket_ILLFORMED(this, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", 4153, a2, a5);
  }
  else
  {
    RNBRemote::InitializeRegisters(this, 0);
    if (!a2)
      return RNBRemote::HandlePacket_ILLFORMED(this, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", 4153, a2, a5);
  }
  if (!*a2)
    return RNBRemote::HandlePacket_ILLFORMED(this, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", 4153, a2, a5);
  v7 = *((_DWORD *)this + 3);
  if (!v7)
  {
    BYTE7(v29) = 3;
    LODWORD(__p[0]) = 3682885;
    v20 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)__p);
    if (SBYTE7(v29) < 0)
      operator delete(__p[0]);
    return v20;
  }
  StdStringExtractor::StdStringExtractor((StdStringExtractor *)v34, a2);
  Char = StdStringExtractor::GetChar(v8, 0);
  HexMaxU32 = StdStringExtractor::GetHexMaxU32((StdStringExtractor *)v34, 0, 0xFFFFFFFFLL);
  v11 = StdStringExtractor::GetChar((StdStringExtractor *)v34, 0);
  if (Char != 80)
  {
    v21 = this;
    v22 = 4169;
LABEL_20:
    v20 = RNBRemote::HandlePacket_ILLFORMED(v21, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", v22, a2, v12);
    goto LABEL_29;
  }
  if (HexMaxU32 == -1)
  {
    BYTE7(v29) = 3;
    v23 = 3748421;
LABEL_23:
    LODWORD(__p[0]) = v23;
    goto LABEL_26;
  }
  if (v11 != 61)
  {
    BYTE7(v29) = 3;
    v23 = 3158853;
    goto LABEL_23;
  }
  if (g_num_reg_entries <= (unint64_t)HexMaxU32)
  {
    v24 = "E47";
  }
  else
  {
    v13 = g_reg_entries + ((unint64_t)HexMaxU32 << 7);
    if (*(_DWORD *)(v13 + 8) != -1 || *(_DWORD *)(v13 + 12) != -1)
    {
      *(_OWORD *)__p = *(_OWORD *)(v13 + 8);
      v14 = *(_OWORD *)(v13 + 24);
      v15 = *(_OWORD *)(v13 + 40);
      v16 = *(_OWORD *)(v13 + 56);
      v32 = *(_QWORD *)(v13 + 72);
      v30 = v15;
      v31 = v16;
      v29 = v14;
      StdStringExtractor::GetHexBytes((StdStringExtractor *)v34, v33, *(unsigned int *)(v13 + 36), 204);
      ThreadIDFromThreadSuffix = RNBRemote::ExtractThreadIDFromThreadSuffix(this, a2);
      if (ThreadIDFromThreadSuffix)
      {
        if (DNBThreadSetRegisterValueByID(v7, (uint64_t)ThreadIDFromThreadSuffix))
          v18 = "OK";
        else
          v18 = "E32";
        std::string::basic_string[abi:nn180100]<0>(v26, v18);
        v20 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)v26);
        if ((v27 & 0x80000000) == 0)
          goto LABEL_29;
        v25 = (void *)v26[0];
        goto LABEL_28;
      }
      v21 = this;
      v22 = 4199;
      goto LABEL_20;
    }
    if (DNBLogEnabled())
      _DNBLogError("RNBRemote::HandlePacket_P(%s): unknown register number %u requested\n", a2, HexMaxU32);
    v24 = "E48";
  }
  std::string::basic_string[abi:nn180100]<0>(__p, v24);
LABEL_26:
  v20 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)__p);
  if (SBYTE7(v29) < 0)
  {
    v25 = __p[0];
LABEL_28:
    operator delete(v25);
  }
LABEL_29:
  StdStringExtractor::~StdStringExtractor(v34);
  return v20;
}

uint64_t RNBRemote::HandlePacket_G(RNBRemote *this, char *a2)
{
  const char *v4;
  int v5;
  char *v6;
  unint64_t CurrentThread;
  uint64_t v8;
  size_t RegisterContext;
  size_t v10;
  _BYTE *v11;
  unint64_t HexBytes;
  void *v13;
  unint64_t v14;
  int v15;
  void *v17[2];
  char v18;
  void *__p[2];
  char v20;
  uint64_t v21;

  if (*((_DWORD *)this + 3))
  {
    if (!g_num_reg_entries)
      RNBRemote::InitializeRegisters(this, 0);
    StdStringExtractor::StdStringExtractor((StdStringExtractor *)__p, a2);
    v21 = 1;
    v5 = *((_DWORD *)this + 3);
    if (*((_BYTE *)this + 782))
    {
      if (!a2 || (v6 = strstr(a2, "thread:")) == 0 || (CurrentThread = strtoul(v6 + 7, 0, 16)) == 0)
      {
LABEL_18:
        v8 = RNBRemote::HandlePacket_ILLFORMED(this, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", 3333, a2, v4);
LABEL_30:
        StdStringExtractor::~StdStringExtractor(__p);
        return v8;
      }
    }
    else
    {
      CurrentThread = *((_QWORD *)this + 68);
      if (CurrentThread + 1 <= 1)
      {
        CurrentThread = DNBProcessGetCurrentThread(*((_DWORD *)this + 3));
        if (!CurrentThread)
          goto LABEL_18;
      }
    }
    RegisterContext = DNBThreadGetRegisterContext(v5, CurrentThread, 0, 0);
    if (!RegisterContext)
    {
      v18 = 3;
      LODWORD(v17[0]) = 3487301;
      v8 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)v17);
      if ((v18 & 0x80000000) == 0)
        goto LABEL_30;
      v13 = v17[0];
LABEL_29:
      operator delete(v13);
      goto LABEL_30;
    }
    v10 = RegisterContext;
    if ((RegisterContext & 0x8000000000000000) != 0)
      abort();
    v11 = operator new(RegisterContext);
    bzero(v11, v10);
    HexBytes = StdStringExtractor::GetHexBytes((StdStringExtractor *)__p, v11, v10, 204);
    if (HexBytes == v10)
    {
      if (DNBThreadSetRegisterContext(v5, CurrentThread, v11) == v10)
      {
        v18 = 2;
        strcpy((char *)v17, "OK");
LABEL_26:
        v8 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)v17);
        if (v18 < 0)
          operator delete(v17[0]);
        v13 = v11;
        goto LABEL_29;
      }
      v18 = 3;
      v15 = 3487045;
    }
    else
    {
      v14 = HexBytes;
      if (DNBLogEnabled())
        _DNBLogError("RNBRemote::HandlePacket_G(%s): extracted %llu of %llu bytes, size mismatch\n", a2, v14, v10);
      v18 = 3;
      v15 = 3421765;
    }
    LODWORD(v17[0]) = v15;
    goto LABEL_26;
  }
  v20 = 3;
  LODWORD(__p[0]) = 3223877;
  v8 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)__p);
  if (v20 < 0)
    operator delete(__p[0]);
  return v8;
}

uint64_t RNBRemote::HandlePacket_z(RNBRemote *this, const char *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  const char *v5;
  int v7;
  int v8;
  const char *v9;
  int v10;
  unint64_t v11;
  const char *v12;
  RNBRemote *v13;
  int v14;
  int v15;
  uint64_t v17;
  unint64_t v18;
  int v20;
  int v21;
  char *v22;
  char *v23;
  void *__p[2];
  char v25;

  v5 = a2;
  if (!a2 || (v7 = *(unsigned __int8 *)a2, !*a2))
  {
    v15 = 3968;
    return RNBRemote::HandlePacket_ILLFORMED(this, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", v15, v5, a5);
  }
  v8 = *((_DWORD *)this + 3);
  if (!v8)
  {
    v25 = 3;
    LODWORD(__p[0]) = 3486021;
    goto LABEL_11;
  }
  v9 = a2 + 3;
  if (a2[2] != 44)
  {
    v15 = 3978;
    v5 = a2 + 3;
    return RNBRemote::HandlePacket_ILLFORMED(this, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", v15, v5, a5);
  }
  v10 = a2[1];
  v23 = 0;
  *__error() = 0;
  v11 = strtoull(v9, &v23, 16);
  if (!*__error() || v11)
  {
    v9 = v23 + 1;
    if (*v23 != 44)
    {
      v13 = this;
      v14 = 3990;
      return RNBRemote::HandlePacket_ILLFORMED(v13, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", v14, v9, v12);
    }
    *__error() = 0;
    v18 = strtoul(v9, &v23, 16);
    if (*__error() && !v18)
    {
      v13 = this;
      v14 = 3996;
      return RNBRemote::HandlePacket_ILLFORMED(v13, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", v14, v9, v12);
    }
    if (v7 != 122)
    {
      if (v7 == 90)
      {
        if ((v10 - 50) < 3)
        {
          if (v10 == 51)
            v20 = 1;
          else
            v20 = 3;
          if (v10 == 50)
            v21 = 2;
          else
            v21 = v20;
          if (!DNBWatchpointSet(v8, v11, v18, v21, 1))
            goto LABEL_38;
          goto LABEL_41;
        }
        if ((v10 - 48) <= 1)
        {
          if (!DNBBreakpointSet(v8, v11, v18, v10 == 49))
          {
LABEL_38:
            v22 = "E09";
LABEL_44:
            std::string::basic_string[abi:nn180100]<0>(__p, v22);
LABEL_11:
            v17 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)__p);
            if (v25 < 0)
              operator delete(__p[0]);
            return v17;
          }
LABEL_41:
          v22 = "OK";
          goto LABEL_44;
        }
      }
      return RNBRemote::HandlePacket_UNIMPLEMENTED(this, v9);
    }
    if ((v10 - 50) >= 3)
    {
      if ((v10 - 48) > 1)
        return RNBRemote::HandlePacket_UNIMPLEMENTED(this, v9);
      if (DNBBreakpointClear(v8, v11))
        goto LABEL_41;
    }
    else if (DNBWatchpointClear(v8, v11))
    {
      goto LABEL_41;
    }
    v22 = "E08";
    goto LABEL_44;
  }
  v13 = this;
  v14 = 3986;
  return RNBRemote::HandlePacket_ILLFORMED(v13, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", v14, v9, v12);
}

uint64_t RNBRemote::HandlePacket_s(RNBRemote *this, const char *a2)
{
  int v3;
  uint64_t CurrentThread;
  _BOOL4 v5;
  uint64_t v6;
  void *v7;
  int v8;
  void *__p;
  char v11;
  void *v12;
  _BYTE *v13;
  char v14;
  void *v15;

  v3 = *((_DWORD *)this + 3);
  if (v3)
  {
    CurrentThread = *((_QWORD *)this + 67);
    if ((unint64_t)(CurrentThread + 1) > 1
      || (CurrentThread = *((_QWORD *)this + 68), (unint64_t)(CurrentThread + 1) > 1)
      || (CurrentThread = DNBProcessGetCurrentThread(*((_DWORD *)this + 3))) != 0)
    {
      DNBThreadResumeActions::DNBThreadResumeActions((DNBThreadResumeActions *)&v12);
      DNBThreadResumeActions::AppendAction((char **)&v12, CurrentThread, 6u, 0, -1);
      DNBThreadResumeActions::SetDefaultThreadActionIfNeeded((char **)&v12, 4, 0);
      v5 = DNBProcessResume(v3, (char *)v12, 0xAAAAAAAAAAAAAAABLL * ((v13 - (_BYTE *)v12) >> 3));
      v6 = 0;
      if (!v5)
      {
        v11 = 3;
        LODWORD(__p) = 3748933;
        v6 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)&__p);
        if (v11 < 0)
          operator delete(__p);
      }
      if (v15)
        operator delete(v15);
      v7 = v12;
      if (v12)
      {
        v13 = v12;
LABEL_15:
        operator delete(v7);
        return v6;
      }
      return v6;
    }
    v14 = 3;
    v8 = 3355461;
  }
  else
  {
    v14 = 3;
    v8 = 3289925;
  }
  LODWORD(v12) = v8;
  v6 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)&v12);
  if (v14 < 0)
  {
    v7 = v12;
    goto LABEL_15;
  }
  return v6;
}

uint64_t RNBRemote::HandlePacket_c(RNBRemote *this, const char *a2)
{
  int v3;
  const char *v5;
  unint64_t v6;
  const char *v7;
  uint64_t v8;
  _BOOL4 v9;
  void *v10;
  void *__p;
  char v13;
  void *v14;
  _BYTE *v15;
  char v16;
  void *v17;
  __int128 v18;
  uint64_t v19;

  v3 = *((_DWORD *)this + 3);
  if (!v3)
  {
    v16 = 3;
    LODWORD(v14) = 3355205;
    v8 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)&v14);
    if ((v16 & 0x80000000) == 0)
      return v8;
    v10 = v14;
LABEL_15:
    operator delete(v10);
    return v8;
  }
  v18 = xmmword_100051E80;
  v19 = -1;
  v5 = a2 + 1;
  if (a2[1])
  {
    *(_QWORD *)&v18 = *((_QWORD *)this + 67);
    *__error() = 0;
    v6 = strtoull(v5, 0, 16);
    v19 = v6;
    if (*__error())
    {
      if (!v6)
        return RNBRemote::HandlePacket_ILLFORMED(this, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", 4226, a2, v7);
    }
  }
  DNBThreadResumeActions::DNBThreadResumeActions((DNBThreadResumeActions *)&v14);
  DNBThreadResumeActions::Append((char **)&v14, &v18);
  DNBThreadResumeActions::SetDefaultThreadActionIfNeeded((char **)&v14, 5, 0);
  v9 = DNBProcessResume(v3, (char *)v14, 0xAAAAAAAAAAAAAAABLL * ((v15 - (_BYTE *)v14) >> 3));
  v8 = 0;
  if (!v9)
  {
    v13 = 3;
    LODWORD(__p) = 3486277;
    v8 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)&__p);
    if (v13 < 0)
      operator delete(__p);
  }
  if (v17)
    operator delete(v17);
  v10 = v14;
  if (v14)
  {
    v15 = v14;
    goto LABEL_15;
  }
  return v8;
}

uint64_t RNBRemote::HandlePacket_S(RNBRemote *this, const char *a2)
{
  int v3;
  const char *v5;
  const char *v6;
  int v7;
  uint64_t v8;
  int v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  int State;
  char *v15;
  _BOOL4 v17;
  void *__p;
  char v19;
  char *__endptr;
  char *v21;
  char v22;
  void *v23;
  __int128 v24;
  uint64_t v25;

  v3 = *((_DWORD *)this + 3);
  if (!v3)
  {
    v22 = 3;
    v9 = 3552069;
LABEL_19:
    LODWORD(__endptr) = v9;
    v8 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)&__endptr);
    if ((v22 & 0x80000000) == 0)
      return v8;
    v15 = __endptr;
LABEL_21:
    operator delete(v15);
    return v8;
  }
  v24 = xmmword_100051E98;
  v25 = -1;
  v5 = a2 + 1;
  if (a2[1])
  {
    __endptr = 0;
    *__error() = 0;
    HIDWORD(v24) = strtoul(v5, &__endptr, 16);
    if (*__error())
    {
      v7 = 4617;
      return RNBRemote::HandlePacket_ILLFORMED(this, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", v7, a2, v6);
    }
    v10 = __endptr;
    if (*__endptr == 59)
    {
      *__error() = 0;
      v11 = strtoull(v10 + 1, 0, 16);
      v25 = v11;
      if (*__error())
      {
        if (!v11)
        {
          v7 = 4623;
          return RNBRemote::HandlePacket_ILLFORMED(this, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", v7, a2, v6);
        }
      }
    }
  }
  v12 = *((_QWORD *)this + 67);
  *(_QWORD *)&v24 = v12;
  if ((unint64_t)(v12 + 1) <= 1)
  {
    v22 = 3;
    v9 = 3159109;
    goto LABEL_19;
  }
  State = DNBThreadGetState(v3, v12);
  if (State == 9 || State == 0)
  {
    v22 = 3;
    v9 = 3617605;
    goto LABEL_19;
  }
  DNBThreadResumeActions::DNBThreadResumeActions((DNBThreadResumeActions *)&__endptr);
  DNBThreadResumeActions::Append(&__endptr, &v24);
  DNBThreadResumeActions::SetDefaultThreadActionIfNeeded(&__endptr, 4, 0);
  v17 = DNBProcessResume(v3, __endptr, 0xAAAAAAAAAAAAAAABLL * ((v21 - __endptr) >> 3));
  v8 = 0;
  if (!v17)
  {
    v19 = 3;
    LODWORD(__p) = 3748677;
    v8 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)&__p);
    if (v19 < 0)
      operator delete(__p);
  }
  if (v23)
    operator delete(v23);
  v15 = __endptr;
  if (__endptr)
  {
    v21 = __endptr;
    goto LABEL_21;
  }
  return v8;
}

uint64_t RNBRemote::HandlePacket_H(RNBRemote *this, const char *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  RNBRemote *v5;
  const char *v6;
  unint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  int v13;
  void *__p[2];
  char v15;

  v5 = this;
  v6 = a2 + 1;
  if ((*((unsigned __int8 *)a2 + 1) | 4) != 0x67)
  {
    v13 = 1539;
    return RNBRemote::HandlePacket_ILLFORMED(this, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", v13, v6, a5);
  }
  *__error() = 0;
  v8 = strtoul(a2 + 2, 0, 16);
  if (*__error())
    v9 = v8 == 0;
  else
    v9 = 0;
  if (v9)
  {
    this = v5;
    v13 = 1552;
    return RNBRemote::HandlePacket_ILLFORMED(this, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", v13, v6, a5);
  }
  v10 = *(unsigned __int8 *)v6;
  if (v10 == 99)
  {
    *((_QWORD *)v5 + 67) = v8;
    v10 = *(unsigned __int8 *)v6;
  }
  if (v10 == 103)
  {
    DNBProcessSetCurrentThread(*((_DWORD *)v5 + 3), v8);
    *((_QWORD *)v5 + 68) = v8;
  }
  v15 = 2;
  strcpy((char *)__p, "OK");
  v11 = RNBRemote::SendPacket((uint64_t)v5, (uint64_t)__p);
  if (v15 < 0)
    operator delete(__p[0]);
  return v11;
}

uint64_t RNBRemote::HandlePacket_last_signal(RNBRemote *this, const char *a2)
{
  int v3;
  unsigned int State;
  uint64_t v5;
  uint64_t CurrentThread;
  _QWORD *ExitInfo;
  _BYTE *v8;
  void (__cdecl **v9)(std::ostringstream *__hidden);
  void (__cdecl **v10)(std::ostringstream *__hidden);
  std::ios_base *v11;
  size_t v12;
  void (__cdecl **v13)(std::ostringstream *__hidden);
  char *v14;
  const std::locale::facet *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned int v18;
  void (__cdecl **v19)(std::ostringstream *__hidden);
  char *v20;
  const std::locale::facet *v21;
  size_t v22;
  size_t v23;
  void (__cdecl ***p_dst)(std::ostringstream *__hidden);
  uint64_t v25;
  uint64_t v26;
  std::locale v28;
  char v29;
  void (__cdecl **__dst)(std::ostringstream *__hidden);
  void (__cdecl **v31)(std::stringbuf *__hidden);
  unint64_t v32;
  _BYTE v33[48];
  void *__p[2];
  __int128 v35;
  int v36;
  void (__cdecl **v37)(std::ostringstream *__hidden);
  int v38;
  char __str[8];
  uint64_t v40;

  v3 = *((_DWORD *)this + 3);
  if (!v3)
  {
    HIBYTE(v32) = 3;
    LODWORD(__dst) = 3289157;
    goto LABEL_41;
  }
  State = DNBProcessGetState(*((_DWORD *)this + 3));
  v5 = 0;
  if (State > 0xA)
    return v5;
  if (((1 << State) & 0x203) == 0)
  {
    if (((1 << State) & 0x490) != 0)
    {
      CurrentThread = DNBProcessGetCurrentThread(v3);
      DNBProcessSetCurrentThread(*((_DWORD *)this + 3), CurrentThread);
      *((_QWORD *)this + 68) = CurrentThread;
      RNBRemote::SendStopReplyPacketForThread(this, CurrentThread);
      return 0;
    }
    return v5;
  }
  *(_QWORD *)__str = 0;
  v40 = 0;
  v38 = 0;
  if (DNBProcessGetExitStatus(v3, &v38))
  {
    if (v38)
    {
      if ((v38 & 0x7F) == 0x7F)
      {
        if (v38 >> 8 != 19)
          snprintf(__str, 0x10uLL, "S%02x");
      }
      else if ((v38 & 0x7F) != 0)
      {
        snprintf(__str, 0x10uLL, "X%02x");
      }
      else
      {
        snprintf(__str, 0x10uLL, "W%02x");
      }
    }
  }
  else
  {
    v38 = 0;
  }
  if (!__str[0])
  {
    strcpy(__str, "W00");
    HIBYTE(v40) = 0;
  }
  ExitInfo = DNBProcessGetExitInfo(v3);
  if (ExitInfo)
  {
    v8 = ExitInfo;
    if (*(_BYTE *)ExitInfo)
    {
      __dst = v9;
      *(void (__cdecl ***)(std::ostringstream *__hidden))((char *)&__dst + (_QWORD)*(v9 - 3)) = v10;
      v11 = (std::ios_base *)((char *)&__dst + (_QWORD)*(__dst - 3));
      std::ios_base::init(v11, &v31);
      v11[1].__vftable = 0;
      v11[1].__fmtflags_ = -1;
      std::streambuf::basic_streambuf(&v31);
      *(_OWORD *)__p = 0u;
      v35 = 0u;
      v36 = 16;
      v12 = strlen(__str);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__dst, (uint64_t)__str, v12);
      LOBYTE(v28.__locale_) = 59;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__dst, (uint64_t)&v28, 1);
      v13 = __dst;
      v14 = (char *)&__dst + (_QWORD)*(__dst - 3);
      if (*((_DWORD *)v14 + 36) == -1)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)&__dst + (_QWORD)*(__dst - 3)));
        v15 = std::locale::use_facet(&v28, &std::ctype<char>::id);
        ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 32);
        std::locale::~locale(&v28);
        v13 = __dst;
      }
      *((_DWORD *)v14 + 36) = 48;
      *(_DWORD *)((char *)&__dst + (_QWORD)*(v13 - 3) + 8) = *(_DWORD *)((_BYTE *)&__dst + (_QWORD)*(v13 - 3) + 8) & 0xFFFFFFB5 | 8;
      *(_DWORD *)((char *)&__dst + (_QWORD)*(v13 - 3) + 8) = *(_DWORD *)((_BYTE *)&__dst + (_QWORD)*(v13 - 3) + 8) & 0xFFFFFF4F | 0x80;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__dst, (uint64_t)"description", 11);
      LOBYTE(v28.__locale_) = 58;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__dst, (uint64_t)&v28, 1);
      v16 = *v8;
      if (*v8)
      {
        v17 = v8 + 1;
        do
        {
          v19 = __dst;
          v20 = (char *)&__dst + (_QWORD)*(__dst - 3);
          if (*((_DWORD *)v20 + 36) == -1)
          {
            std::ios_base::getloc((const std::ios_base *)((char *)&__dst + (_QWORD)*(__dst - 3)));
            v21 = std::locale::use_facet(&v28, &std::ctype<char>::id);
            ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 32);
            std::locale::~locale(&v28);
            v19 = __dst;
            v16 = *(v17 - 1);
          }
          *((_DWORD *)v20 + 36) = 48;
          *(_DWORD *)((char *)&v31 + (_QWORD)*(v19 - 3)) = *(_DWORD *)((_BYTE *)&v31 + (_QWORD)*(v19 - 3)) & 0xFFFFFFB5 | 8;
          *(_DWORD *)((char *)&v31 + (_QWORD)*(v19 - 3)) = *(_DWORD *)((_BYTE *)&v31 + (_QWORD)*(v19 - 3)) & 0xFFFFFF4F | 0x80;
          *(_QWORD *)&v33[(_QWORD)*(v19 - 3)] = 2;
          std::ostream::operator<<(&__dst, v16);
          v18 = *v17++;
          v16 = v18;
        }
        while (v18);
      }
      LOBYTE(v28.__locale_) = 59;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__dst, (uint64_t)&v28, 1);
      std::stringbuf::str(&v28, &v31);
      v5 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)&v28);
      if (v29 < 0)
        operator delete(v28.__locale_);
      *(void (__cdecl ***)(std::ostringstream *__hidden))((char *)&__dst
      if (SBYTE7(v35) < 0)
        operator delete(__p[0]);
      std::streambuf::~streambuf(&v31);
      std::ios::~ios(&v37);
      return v5;
    }
  }
  v22 = strlen(__str);
  if (v22 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v23 = v22;
  if (v22 >= 0x17)
  {
    v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17)
      v25 = v22 | 7;
    v26 = v25 + 1;
    p_dst = (void (__cdecl ***)(std::ostringstream *__hidden))operator new(v25 + 1);
    v31 = (void (__cdecl **)(std::stringbuf *__hidden))v23;
    v32 = v26 | 0x8000000000000000;
    __dst = (void (__cdecl **)(std::ostringstream *__hidden))p_dst;
  }
  else
  {
    HIBYTE(v32) = v22;
    p_dst = &__dst;
    if (!v22)
      goto LABEL_40;
  }
  memcpy(p_dst, __str, v23);
LABEL_40:
  *((_BYTE *)p_dst + v23) = 0;
LABEL_41:
  v5 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)&__dst);
  if (SHIBYTE(v32) < 0)
    operator delete(__dst);
  return v5;
}

uint64_t RNBRemote::HandlePacket_stop_process(RNBRemote *this, const char *a2)
{
  const char *v3;

  if (!DNBProcessInterrupt(*((_DWORD *)this + 3)))
  {
    if (DNBLogEnabled())
      _DNBLogThreaded("RNBRemote::HandlePacket_stop_process() sending extra stop reply because DNBProcessInterrupt returned false");
    RNBRemote::HandlePacket_last_signal(this, v3);
  }
  return 0;
}

uint64_t RNBRemote::HandlePacket_A(RNBRemote *this, const char *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5;
  const char *v6;
  int v8;
  const char *v10;
  int64_t v11;
  const char *v12;
  BOOL v13;
  unint64_t v14;
  RNBRemote *v15;
  int v16;
  char *v17;
  std::string *v18;
  char v19;
  char v20;
  const char *v21;
  char v23;
  int v24;
  char __str[3];
  char *__endptr;
  std::string v27;

  v6 = a2;
  if (!a2 || !*a2)
  {
    v8 = 1459;
    return RNBRemote::HandlePacket_ILLFORMED(this, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", v8, v6, a5);
  }
  v6 = a2 + 1;
  if (a2[1] < 1 || (_DefaultRuneLocale.__runetype[*((unsigned __int8 *)a2 + 1)] & 0x400) == 0)
  {
    v8 = 1464;
    return RNBRemote::HandlePacket_ILLFORMED(this, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", v8, v6, a5);
  }
  v10 = a2 + 1;
  while (*v10)
  {
    memset(&v27, 0, sizeof(v27));
    __endptr = 0;
    *__error() = 0;
    v11 = strtoul(v10, &__endptr, 10);
    if (*__error())
      v13 = v11 == 0;
    else
      v13 = 0;
    if (v13)
    {
      v15 = this;
      v16 = 1483;
    }
    else if (*__endptr == 44)
    {
      v10 = __endptr + 1;
      *__error() = 0;
      v14 = strtoul(v10, &__endptr, 10);
      if (!*__error() || v14)
      {
        if (*__endptr == 44)
        {
          v17 = __endptr + 1;
          __endptr = v17;
          v10 = &v17[v11];
          if (v11 >= 1)
          {
            do
            {
              v20 = *v17;
              v21 = v17 + 1;
              if (!*v17 || v21 >= v10)
                break;
              v23 = *v21;
              if (!*v21)
                break;
              __str[0] = v20;
              __str[1] = v23;
              __str[2] = 0;
              *__error() = 0;
              v24 = strtoul(__str, 0, 16);
              if (*__error() && !v24)
              {
                v15 = this;
                v16 = 1515;
                goto LABEL_40;
              }
              std::string::push_back(&v27, v24);
              v17 = (char *)(v21 + 1);
            }
            while (v21 + 1 < v10);
          }
          if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v18 = &v27;
          else
            v18 = (std::string *)v27.__r_.__value_.__r.__words[0];
          RNBContext::PushArgument(this, (const char *)v18);
          if (*v10 == 44)
            ++v10;
          v19 = 1;
          if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_9;
LABEL_41:
          operator delete(v27.__r_.__value_.__l.__data_);
          goto LABEL_9;
        }
        v15 = this;
        v16 = 1499;
      }
      else
      {
        v15 = this;
        v16 = 1495;
      }
    }
    else
    {
      v15 = this;
      v16 = 1487;
    }
LABEL_40:
    v5 = RNBRemote::HandlePacket_ILLFORMED(v15, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", v16, v6, v12);
    v19 = 0;
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_41;
LABEL_9:
    if ((v19 & 1) == 0)
      return v5;
  }
  *((_BYTE *)&v27.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v27, "OK");
  RNBRemote::SendPacket((uint64_t)this, (uint64_t)&v27);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  return 0;
}

uint64_t RNBRemote::HandlePacket_C(RNBRemote *this, const char *a2)
{
  int v3;
  const char *v5;
  int v6;
  const char *v7;
  int v8;
  uint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  int v13;
  void *__p;
  char v16;
  char *__endptr;
  char *v18;
  char v19;
  void *v20;
  __int128 v21;
  uint64_t v22;

  v3 = *((_DWORD *)this + 3);
  if (!v3)
  {
    v19 = 3;
    LODWORD(__endptr) = 3552069;
    v9 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)&__endptr);
    if ((v19 & 0x80000000) == 0)
      return v9;
    v10 = __endptr;
LABEL_24:
    operator delete(v10);
    return v9;
  }
  v21 = xmmword_100051E80;
  v22 = -1;
  v5 = a2 + 1;
  if (a2[1])
  {
    *(_QWORD *)&v21 = *((_QWORD *)this + 67);
    __endptr = 0;
    *__error() = 0;
    v6 = strtoul(v5, &__endptr, 16);
    if (*__error())
    {
      v8 = 4501;
      return RNBRemote::HandlePacket_ILLFORMED(this, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", v8, a2, v7);
    }
    v11 = __endptr;
    if (*__endptr == 59)
    {
      *__error() = 0;
      v12 = strtoull(v11 + 1, 0, 16);
      v22 = v12;
      if (*__error())
      {
        if (!v12)
        {
          v8 = 4507;
          return RNBRemote::HandlePacket_ILLFORMED(this, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", v8, a2, v7);
        }
      }
    }
  }
  else
  {
    v6 = -1;
  }
  DNBThreadResumeActions::DNBThreadResumeActions((DNBThreadResumeActions *)&__endptr);
  DNBThreadResumeActions::Append(&__endptr, &v21);
  DNBThreadResumeActions::SetDefaultThreadActionIfNeeded(&__endptr, 5, SHIDWORD(v21));
  if (DNBProcessSignal(v3, v6))
  {
    if (DNBProcessResume(v3, __endptr, 0xAAAAAAAAAAAAAAABLL * ((v18 - __endptr) >> 3)))
    {
      v9 = 0;
      goto LABEL_20;
    }
    v16 = 3;
    v13 = 3683141;
  }
  else
  {
    v16 = 3;
    v13 = 3290437;
  }
  LODWORD(__p) = v13;
  v9 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)&__p);
  if (v16 < 0)
    operator delete(__p);
LABEL_20:
  if (v20)
    operator delete(v20);
  v10 = __endptr;
  if (__endptr)
  {
    v18 = __endptr;
    goto LABEL_24;
  }
  return v9;
}

uint64_t RNBRemote::HandlePacket_D(RNBRemote *this, const char *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *__p[2];
  char v17;

  if (*((_DWORD *)this + 3))
  {
    if (DNBLogEnabled())
      _DNBLog(0, (uint64_t)"detaching from pid %u due to D packet", v3, v4, v5, v6, v7, v8, *((unsigned int *)this + 3));
    if (DNBProcessDetach(*((_DWORD *)this + 3)))
    {
      v17 = 2;
      strcpy((char *)__p, "OK");
      goto LABEL_9;
    }
    if (DNBLogEnabled())
      _DNBLog(0, (uint64_t)"error while detaching from pid %u due to D packet", v9, v10, v11, v12, v13, v14, *((unsigned int *)this + 3));
  }
  v17 = 1;
  LOWORD(__p[0]) = 69;
LABEL_9:
  RNBRemote::SendPacket((uint64_t)this, (uint64_t)__p);
  if (v17 < 0)
    operator delete(__p[0]);
  return 0;
}

uint64_t RNBRemote::HandlePacket_k(RNBRemote *this, const char *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  void *__p;
  char v13;

  if (DNBLogEnabled())
    _DNBLog(0, (uint64_t)"Got a 'k' packet, killing the inferior process.", v3, v4, v5, v6, v7, v8, v11);
  v9 = *((_DWORD *)this + 3);
  if (v9)
    DNBProcessKill(v9);
  v13 = 3;
  LODWORD(__p) = 3747928;
  RNBRemote::SendPacket((uint64_t)this, (uint64_t)&__p);
  if (v13 < 0)
    operator delete(__p);
  return 0;
}

uint64_t RNBRemote::HandlePacket_T(RNBRemote *this, const char *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int *v5;
  const char *v6;
  unint64_t v7;
  int v8;
  unsigned int State;
  uint64_t v11;
  void *__p[2];
  char v13;

  v5 = (int *)this;
  v6 = a2 + 1;
  if (!a2[1])
  {
    v8 = 3944;
    return RNBRemote::HandlePacket_ILLFORMED(this, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", v8, v6, a5);
  }
  if (*((_DWORD *)this + 3))
  {
    *__error() = 0;
    v7 = strtoul(v6, 0, 16);
    if (*__error() && !v7)
    {
      this = (RNBRemote *)v5;
      v8 = 3953;
      return RNBRemote::HandlePacket_ILLFORMED(this, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", v8, v6, a5);
    }
    State = DNBThreadGetState(v5[3], v7);
    if (State <= 9 && ((1 << State) & 0x281) != 0)
    {
      v13 = 3;
      LODWORD(__p[0]) = 3551557;
    }
    else
    {
      v13 = 2;
      strcpy((char *)__p, "OK");
    }
  }
  else
  {
    v13 = 3;
    LODWORD(__p[0]) = 3486021;
  }
  v11 = RNBRemote::SendPacket((uint64_t)v5, (uint64_t)__p);
  if (v13 < 0)
    operator delete(__p[0]);
  return v11;
}

uint64_t RNBRemote::HandlePacket_qSupported(RNBRemote *this, char *__s1)
{
  char *v3;
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char __s2[8];
  size_t v12;
  unint64_t v13;
  char __str[256];

  v3 = strstr(__s1, "amx+");
  if (v3)
    DNBArchProtocol::EnableAMXRegisters((DNBArchProtocol *)v3);
  snprintf(__str, 0x100uLL, "qXfer:features:read+;PacketSize=%x;qEcho+;native-signals+", 0x20000);
  strcat(__str, ";SupportedCompressions=lzfse,zlib-deflate,lz4,lzma;DefaultCompressionMinSize=");
  snprintf(__s2, 0x10uLL, "%zu", *((_QWORD *)this + 98));
  HIBYTE(v12) = 0;
  strcat(__str, __s2);
  v4 = strlen(__str);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    v12 = v5;
    v13 = v8 | 0x8000000000000000;
    *(_QWORD *)__s2 = v6;
    goto LABEL_10;
  }
  HIBYTE(v13) = v4;
  v6 = __s2;
  if (v4)
LABEL_10:
    memcpy(v6, __str, v5);
  *((_BYTE *)v6 + v5) = 0;
  v9 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)__s2);
  if (SHIBYTE(v13) < 0)
    operator delete(*(void **)__s2);
  return v9;
}

uint64_t RNBRemote::HandlePacket_v(RNBRemote *this, const char *__s1)
{
  const char *v4;
  const char *v6;
  int64_t v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  const char *v12;
  unint64_t v13;
  const char *v14;
  void *v15;
  std::string::value_type v16;
  char *v17;
  int v18;
  int v19;
  const char *v20;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::string *p_p;
  uint64_t v31;
  std::string::value_type v32;
  int v33;
  int v34;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::string *v44;
  uint64_t v45;
  int PIDByName;
  std::string *v47;
  std::string::size_type size;
  std::string *p_endptr;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  std::string *v64;
  RNBRemote *v65;
  int v66;
  const char *v67;
  int v68;
  char *v69;
  std::string::value_type *v70;
  const char *v71;
  std::string *v72;
  std::string::size_type v73;
  std::string *v74;
  uid_t v75;
  std::string *v76;
  std::string::size_type v77;
  uid_t v78;
  std::string *v79;
  std::string::size_type v80;
  passwd *v81;
  passwd *v82;
  std::string *v83;
  std::string::size_type v84;
  std::string *v85;
  std::string::size_type v86;
  std::string *v87;
  std::string::size_type v88;
  std::string *v89;
  std::string::size_type v90;
  void **v91;
  std::string *v92;
  std::string::size_type v93;
  std::string *v98;
  std::string *v99;
  std::string::size_type v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  std::string v108;
  std::string v109;
  std::string v110;
  void *v111[2];
  uint64_t v112;
  std::string v113;
  unsigned int __val[2];
  std::string v115;
  std::string __endptr;
  std::string __p;
  char *v118;
  std::string::value_type __s[1032];

  if (!strcmp(__s1, "vCont;c"))
    return RNBRemote::HandlePacket_c(this, "c");
  if (!strcmp(__s1, "vCont;s"))
    return RNBRemote::HandlePacket_s(this, v4);
  if (strncmp(__s1, "vCont", 5uLL))
  {
    if (strncmp(__s1, "vAttach", 7uLL))
      return RNBRemote::HandlePacket_UNIMPLEMENTED(this, __s1);
    bzero(__s, 0x400uLL);
    memset(&__p, 0, sizeof(__p));
    if (!strncmp(__s1, "vAttachWait;", 0xCuLL))
    {
      v18 = *((unsigned __int8 *)__s1 + 12);
      v17 = (char *)(__s1 + 12);
      v16 = v18;
      v118 = v17;
      if (!v18)
      {
LABEL_42:
        if (DNBLogEnabled())
        {
          v23 = getpid();
          _DNBLog(0, (uint64_t)"[LaunchAttach] START %d vAttachWait for process name '%s'", v24, v25, v26, v27, v28, v29, v23);
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        v31 = DNBProcessAttachWait(this, (char *)p_p, 1, 0, 0x3E8u, __s, 0x400uLL, (unsigned int (*)(void *))RNBRemoteShouldCancelCallback, 0);
        goto LABEL_61;
      }
      while (1)
      {
        __endptr.__r_.__value_.__s.__data_[0] = v16;
        *(_WORD *)((char *)&__endptr.__r_.__value_.__l.__data_ + 1) = v17[1];
        *__error() = 0;
        v19 = strtoul((const char *)&__endptr, 0, 16);
        if (*__error() && v19 == 0)
          break;
        std::string::push_back(&__p, v19);
        v22 = v17[2];
        v17 += 2;
        v16 = v22;
        if (!v22)
        {
          v118 = v17;
          goto LABEL_42;
        }
      }
      v65 = this;
      v66 = 3770;
    }
    else
    {
      if (strncmp(__s1, "vAttachOrWait;", 0xEuLL))
      {
        if (strncmp(__s1, "vAttachName;", 0xCuLL))
        {
          if (strncmp(__s1, "vAttach;", 8uLL))
          {
            v9 = RNBRemote::HandlePacket_UNIMPLEMENTED(this, __s1);
            goto LABEL_132;
          }
          v67 = __s1 + 8;
          v118 = (char *)(__s1 + 8);
          v113.__r_.__value_.__r.__words[0] = 0;
          PIDByName = strtoul(__s1 + 8, &v113.__r_.__value_.__l.__data_, 16);
          if (v67 == v113.__r_.__value_.__l.__data_ || *v113.__r_.__value_.__l.__data_)
          {
            v45 = 0;
          }
          else
          {
            gettimeofday((timeval *)&__endptr, 0);
            v115.__r_.__value_.__r.__words[0] = __endptr.__r_.__value_.__r.__words[0]
                                              + SLODWORD(__endptr.__r_.__value_.__r.__words[1]) / 1000000
                                              + 30;
            v115.__r_.__value_.__l.__size_ = 1000 * LODWORD(__endptr.__r_.__value_.__r.__words[1]) % 1000000000;
            if (DNBLogEnabled())
            {
              v101 = getpid();
              _DNBLog(0, (uint64_t)"[LaunchAttach] START %d vAttach to pid %d", v102, v103, v104, v105, v106, v107, v101);
            }
            v45 = DNBProcessAttach(PIDByName, (uint64_t)&v115, (uint64_t)this + 448, __s, 1024);
          }
LABEL_62:
          if ((_DWORD)v45)
          {
            if ((_DWORD)v45 == -1)
            {
              if (DNBLogEnabled())
                _DNBLogError("debugserver is x86_64 binary running in translation, attach failed.");
              std::string::basic_string[abi:nn180100]<0>(&__endptr, "E96;");
              cstring_to_asciihex_string("debugserver is x86_64 binary running in translation, attach failed.", &v115);
              if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v47 = &v115;
              else
                v47 = (std::string *)v115.__r_.__value_.__r.__words[0];
              if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = HIBYTE(v115.__r_.__value_.__r.__words[2]);
              else
                size = v115.__r_.__value_.__l.__size_;
              std::string::append(&__endptr, (const std::string::value_type *)v47, size);
              if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v115.__r_.__value_.__l.__data_);
              if ((__endptr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                p_endptr = &__endptr;
              else
                p_endptr = (std::string *)__endptr.__r_.__value_.__r.__words[0];
              std::string::basic_string[abi:nn180100]<0>(&v115, (char *)p_endptr);
              RNBRemote::SendPacket((uint64_t)this, (uint64_t)&v115);
              goto LABEL_78;
            }
            if (*((_DWORD *)this + 3) != (_DWORD)v45)
              RNBContext::SetProcessID(this, v45);
            if (DNBLogEnabled())
              _DNBLog(0, (uint64_t)"Successfully attached to pid %d", v51, v52, v53, v54, v55, v56, v45);
            RNBRemote::HandlePacket_last_signal(this, v50);
            v9 = 0;
LABEL_132:
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              v15 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_134:
              operator delete(v15);
            }
            return v9;
          }
          if (DNBLogEnabled())
            _DNBLogError("Attach failed");
          *((_QWORD *)this + 39) = 0xFFFFFFFFLL;
          if (*((char *)this + 343) < 0)
          {
            **((_BYTE **)this + 40) = 0;
            *((_QWORD *)this + 41) = 0;
          }
          else
          {
            *((_BYTE *)this + 320) = 0;
            *((_BYTE *)this + 343) = 0;
          }
          if (__s[0])
            v70 = __s;
          else
            v70 = "attach failed";
          DNBError::SetErrorString((std::string *)this + 13, v70);
          if (!PIDByName)
          {
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              if (!__p.__r_.__value_.__l.__size_)
                goto LABEL_183;
              v74 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            else
            {
              if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
                goto LABEL_183;
              v74 = &__p;
            }
            PIDByName = DNBProcessGetPIDByName((char *)v74);
            if (!PIDByName)
              goto LABEL_183;
          }
          if (process_does_not_exist(PIDByName))
          {
            if (DNBLogEnabled())
              _DNBLogError("Tried to attach to pid that doesn't exist");
            std::string::basic_string[abi:nn180100]<0>(&__endptr, "E96;");
            v71 = "no such process.";
LABEL_121:
            cstring_to_asciihex_string(v71, &v115);
            if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v72 = &v115;
            else
              v72 = (std::string *)v115.__r_.__value_.__r.__words[0];
            if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v73 = HIBYTE(v115.__r_.__value_.__r.__words[2]);
            else
              v73 = v115.__r_.__value_.__l.__size_;
            std::string::append(&__endptr, (const std::string::value_type *)v72, v73);
            if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v115.__r_.__value_.__l.__data_);
            v9 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)&__endptr);
            goto LABEL_130;
          }
          if (process_is_already_being_debugged(PIDByName))
          {
            if (DNBLogEnabled())
              _DNBLogError("Tried to attach to process already being debugged");
            std::string::basic_string[abi:nn180100]<0>(&__endptr, "E96;");
            v71 = "tried to attach to process already being debugged";
            goto LABEL_121;
          }
          *(_QWORD *)__val = 0;
          if (attach_failed_due_to_uid_mismatch(PIDByName, &__val[1], __val))
          {
            v75 = __val[1];
            std::to_string(&v115, __val[1]);
            v76 = std::string::insert(&v115, 0, "uid ");
            v77 = v76->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__endptr.__r_.__value_.__l.__data_ = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
            __endptr.__r_.__value_.__r.__words[2] = v77;
            v76->__r_.__value_.__l.__size_ = 0;
            v76->__r_.__value_.__r.__words[2] = 0;
            v76->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v115.__r_.__value_.__l.__data_);
            v78 = __val[0];
            std::to_string(&v113, __val[0]);
            v79 = std::string::insert(&v113, 0, "uid ");
            v80 = v79->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v115.__r_.__value_.__l.__data_ = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
            v115.__r_.__value_.__r.__words[2] = v80;
            v79->__r_.__value_.__l.__size_ = 0;
            v79->__r_.__value_.__r.__words[2] = 0;
            v79->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v113.__r_.__value_.__l.__data_);
            v81 = getpwuid(v75);
            if (v81 && v81->pw_name)
              std::string::assign(&__endptr, v81->pw_name);
            v82 = getpwuid(v78);
            if (v82 && v82->pw_name)
              std::string::assign(&v115, v82->pw_name);
            if (DNBLogEnabled())
              _DNBLogError("Tried to attach to process with uid mismatch");
            std::string::basic_string[abi:nn180100]<0>(&v113, "E96;");
            std::operator+<char>(&v108, "tried to attach to process as user '", &__endptr);
            v83 = std::string::append(&v108, "' and process is running as user '");
            v84 = v83->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v109.__r_.__value_.__l.__data_ = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
            v109.__r_.__value_.__r.__words[2] = v84;
            v83->__r_.__value_.__l.__size_ = 0;
            v83->__r_.__value_.__r.__words[2] = 0;
            v83->__r_.__value_.__r.__words[0] = 0;
            if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v85 = &v115;
            else
              v85 = (std::string *)v115.__r_.__value_.__r.__words[0];
            if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v86 = HIBYTE(v115.__r_.__value_.__r.__words[2]);
            else
              v86 = v115.__r_.__value_.__l.__size_;
            v87 = std::string::append(&v109, (const std::string::value_type *)v85, v86);
            v88 = v87->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v110.__r_.__value_.__l.__data_ = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
            v110.__r_.__value_.__r.__words[2] = v88;
            v87->__r_.__value_.__l.__size_ = 0;
            v87->__r_.__value_.__r.__words[2] = 0;
            v87->__r_.__value_.__r.__words[0] = 0;
            v89 = std::string::append(&v110, "'");
            v90 = v89->__r_.__value_.__r.__words[2];
            *(_OWORD *)v111 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
            v112 = v90;
            v89->__r_.__value_.__l.__size_ = 0;
            v89->__r_.__value_.__r.__words[2] = 0;
            v89->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v110.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v109.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_160:
                if ((SHIBYTE(v108.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_161;
LABEL_218:
                operator delete(v108.__r_.__value_.__l.__data_);
LABEL_161:
                if (v112 >= 0)
                  v91 = v111;
                else
                  v91 = (void **)v111[0];
                cstring_to_asciihex_string((const char *)v91, &v110);
                if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v92 = &v110;
                else
                  v92 = (std::string *)v110.__r_.__value_.__r.__words[0];
                if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v93 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
                else
                  v93 = v110.__r_.__value_.__l.__size_;
                std::string::append(&v113, (const std::string::value_type *)v92, v93);
                if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v110.__r_.__value_.__l.__data_);
                v9 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)&v113);
                if (SHIBYTE(v112) < 0)
                {
                  operator delete(v111[0]);
                  if ((SHIBYTE(v113.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_174:
                    if ((SHIBYTE(v115.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      goto LABEL_130;
LABEL_221:
                    operator delete(v115.__r_.__value_.__l.__data_);
LABEL_130:
                    if (SHIBYTE(__endptr.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__endptr.__r_.__value_.__l.__data_);
                    goto LABEL_132;
                  }
                }
                else if ((SHIBYTE(v113.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
                  goto LABEL_174;
                }
                operator delete(v113.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v115.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_130;
                goto LABEL_221;
              }
            }
            else if ((SHIBYTE(v109.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_160;
            }
            operator delete(v109.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v108.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_161;
            goto LABEL_218;
          }
LABEL_183:
          std::string::basic_string[abi:nn180100]<0>(&__endptr, "attach failed");
          if (__s[0])
          {
            if (*(_QWORD *)__s == 0x7420656C62616E75
              && *(_QWORD *)&__s[8] == 0x207472617473206FLL
              && *(_QWORD *)&__s[16] == 0x6563786520656874
              && *(_QWORD *)&__s[24] == 0x6874206E6F697470
              && *(_QWORD *)&__s[29] == 0x64616572687420)
            {
              strcpy(__s, "Not allowed to attach to process.  Look in the console messages (Console.app), near the debugserver entries, when the attach failed.  The subsystem that denied the attach permission will likely have logged an informative message about why it was denied.");
              __s[1023] = 0;
            }
            std::string::append(&__endptr, " (");
            std::string::append(&__endptr, __s);
            std::string::append(&__endptr, ")");
          }
          std::string::basic_string[abi:nn180100]<0>(&v115, "E96;");
          if ((__endptr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v98 = &__endptr;
          else
            v98 = (std::string *)__endptr.__r_.__value_.__r.__words[0];
          cstring_to_asciihex_string((const char *)v98, &v113);
          if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v99 = &v113;
          else
            v99 = (std::string *)v113.__r_.__value_.__r.__words[0];
          if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v100 = HIBYTE(v113.__r_.__value_.__r.__words[2]);
          else
            v100 = v113.__r_.__value_.__l.__size_;
          std::string::append(&v115, (const std::string::value_type *)v99, v100);
          if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v113.__r_.__value_.__l.__data_);
          RNBRemote::SendPacket((uint64_t)this, (uint64_t)&v115);
          if (DNBLogEnabled())
            _DNBLogError("Attach failed: \"%s\".", __s);
LABEL_78:
          if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v115.__r_.__value_.__l.__data_);
            if ((SHIBYTE(__endptr.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_80;
          }
          else if ((SHIBYTE(__endptr.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_80:
            v9 = 1;
            goto LABEL_132;
          }
          operator delete(__endptr.__r_.__value_.__l.__data_);
          goto LABEL_80;
        }
        v118 = (char *)(__s1 + 12);
        if ((GetProcessNameFrom_vAttach(&v118, &__p) & 1) != 0)
        {
          if (DNBLogEnabled())
          {
            v57 = getpid();
            _DNBLog(0, (uint64_t)"[LaunchAttach] START %d vAttachName attach to process name '%s'", v58, v59, v60, v61, v62, v63, v57);
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v64 = &__p;
          else
            v64 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v31 = DNBProcessAttachByName((char *)v64, 0, (uint64_t)this + 448, __s, 1024);
LABEL_61:
          v45 = v31;
          PIDByName = 0;
          goto LABEL_62;
        }
        v69 = v118;
        v65 = this;
        v66 = 3797;
LABEL_107:
        v9 = RNBRemote::HandlePacket_ILLFORMED(v65, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", v66, v69, v20);
        goto LABEL_132;
      }
      v33 = *((unsigned __int8 *)__s1 + 14);
      v17 = (char *)(__s1 + 14);
      v32 = v33;
      v118 = v17;
      if (!v33)
      {
LABEL_55:
        if (DNBLogEnabled())
        {
          v37 = getpid();
          _DNBLog(0, (uint64_t)"[LaunchAttach] START %d vAttachWaitOrWait for process name '%s'", v38, v39, v40, v41, v42, v43, v37);
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v44 = &__p;
        else
          v44 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v31 = DNBProcessAttachWait(this, (char *)v44, 0, 0, 0x3E8u, __s, 0x400uLL, (unsigned int (*)(void *))RNBRemoteShouldCancelCallback, 0);
        goto LABEL_61;
      }
      while (1)
      {
        __endptr.__r_.__value_.__s.__data_[0] = v32;
        *(_WORD *)((char *)&__endptr.__r_.__value_.__l.__data_ + 1) = v17[1];
        *__error() = 0;
        v34 = strtoul((const char *)&__endptr, 0, 16);
        if (*__error() && v34 == 0)
          break;
        std::string::push_back(&__p, v34);
        v36 = v17[2];
        v17 += 2;
        v32 = v36;
        if (!v36)
        {
          v118 = v17;
          goto LABEL_55;
        }
      }
      v65 = this;
      v66 = 3783;
    }
    v69 = v17;
    goto LABEL_107;
  }
  DNBThreadResumeActions::DNBThreadResumeActions((DNBThreadResumeActions *)__s);
  v6 = __s1 + 5;
  v118 = (char *)(__s1 + 5);
  __endptr.__r_.__value_.__r.__words[0] = (std::string::size_type)(__s1 + 5);
  v7 = strlen(__s1 + 5);
  if (__s1[5] == 63)
  {
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 13;
    strcpy((char *)&__p, "vCont;c;C;s;S");
    v9 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      v10 = *(void **)&__s[24];
      if (!*(_QWORD *)&__s[24])
        goto LABEL_33;
LABEL_32:
      operator delete(v10);
      goto LABEL_33;
    }
LABEL_31:
    v10 = *(void **)&__s[24];
    if (!*(_QWORD *)&__s[24])
      goto LABEL_33;
    goto LABEL_32;
  }
  if (v7 < 1)
  {
LABEL_30:
    DNBThreadResumeActions::SetDefaultThreadActionIfNeeded((char **)__s, 4, 0);
    DNBProcessResume(*((_DWORD *)this + 3), *(char **)__s, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&__s[8] - *(_QWORD *)__s) >> 3));
    v9 = 0;
    goto LABEL_31;
  }
  v11 = &v6[v7];
  v12 = __s1 + 5;
  while (2)
  {
    if (*v12 != 59)
      goto LABEL_30;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    __p.__r_.__value_.__r.__words[2] = -1;
    __endptr.__r_.__value_.__r.__words[0] = (std::string::size_type)(v12 + 2);
    HIDWORD(v13) = v12[1] - 67;
    LODWORD(v13) = HIDWORD(v13);
    switch((v13 >> 4))
    {
      case 0u:
        *__error() = 0;
        HIDWORD(__p.__r_.__value_.__r.__words[1]) = strtoul(v12 + 2, &__endptr.__r_.__value_.__l.__data_, 16);
        if (!*__error())
          goto LABEL_23;
        v68 = 3714;
        goto LABEL_178;
      case 1u:
        *__error() = 0;
        HIDWORD(__p.__r_.__value_.__r.__words[1]) = strtoul(v12 + 2, &__endptr.__r_.__value_.__l.__data_, 16);
        if (!*__error())
          goto LABEL_26;
        v68 = 3727;
        goto LABEL_178;
      case 2u:
LABEL_23:
        LODWORD(__p.__r_.__value_.__r.__words[1]) = 5;
        goto LABEL_27;
      case 3u:
LABEL_26:
        LODWORD(__p.__r_.__value_.__r.__words[1]) = 6;
        goto LABEL_27;
      default:
        RNBRemote::HandlePacket_ILLFORMED(this, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", 3736, v6, v8);
LABEL_27:
        v12 = (const char *)__endptr.__r_.__value_.__r.__words[0];
        if (*__endptr.__r_.__value_.__l.__data_ != 58)
          goto LABEL_19;
        *__error() = 0;
        __endptr.__r_.__value_.__r.__words[0] = (std::string::size_type)(v12 + 1);
        __p.__r_.__value_.__r.__words[0] = strtoul(v12 + 1, &__endptr.__r_.__value_.__l.__data_, 16);
        if (!*__error())
        {
          v12 = (const char *)__endptr.__r_.__value_.__r.__words[0];
LABEL_19:
          DNBThreadResumeActions::Append((char **)__s, (__int128 *)&__p);
          if (v12 >= v11)
            goto LABEL_30;
          continue;
        }
        v68 = 3745;
LABEL_178:
        v9 = RNBRemote::HandlePacket_ILLFORMED(this, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", v68, v6, v14);
        v10 = *(void **)&__s[24];
        if (*(_QWORD *)&__s[24])
          goto LABEL_32;
LABEL_33:
        v15 = *(void **)__s;
        if (*(_QWORD *)__s)
        {
          *(_QWORD *)&__s[8] = *(_QWORD *)__s;
          goto LABEL_134;
        }
        return v9;
    }
  }
}

uint64_t RNBRemote::HandlePacket_x(RNBRemote *this, const char *__s, uint64_t a3, uint64_t a4, const char *a5)
{
  RNBRemote *v7;
  int v8;
  const char *v9;
  const char *v11;
  mach_vm_address_t v12;
  size_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  size_t v25;
  char *v26;
  char *v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  __int128 v32;
  char *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char v38;
  char v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  size_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char v51;
  unint64_t v52;
  char *v53;
  __int128 *v54;
  unint64_t v55;
  __int128 v56;
  char *v57;
  uint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *__p[2];
  char v71;
  void *v72;
  uint64_t v73;
  char v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *__endptr;

  if (!__s || !*__s || strlen(__s) <= 2)
  {
    v7 = this;
    v8 = 3162;
    v9 = __s;
    return RNBRemote::HandlePacket_ILLFORMED(v7, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", v8, v9, a5);
  }
  __endptr = 0;
  v11 = __s + 1;
  *__error() = 0;
  v12 = strtoull(__s + 1, &__endptr, 16);
  if (*__error())
  {
    v7 = this;
    v8 = 3170;
LABEL_12:
    v9 = v11;
    return RNBRemote::HandlePacket_ILLFORMED(v7, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", v8, v9, a5);
  }
  if (*__endptr != 44)
  {
    v7 = this;
    v8 = 3174;
    goto LABEL_12;
  }
  v11 = __endptr + 1;
  *__error() = 0;
  v13 = strtoul(v11, 0, 16);
  if (*__error())
  {
    v7 = this;
    v8 = 3184;
    goto LABEL_12;
  }
  if (v13)
  {
    std::vector<unsigned char>::vector(&v78, v13);
    if (v80 - (_QWORD)v78 == v13)
    {
      v14 = DNBProcessMemoryRead(*((_DWORD *)this + 3), v12, v79 - v78, v78);
      if (v14)
      {
        v15 = v14;
        v75 = 0;
        v76 = 0;
        v77 = 0;
        std::vector<unsigned char>::reserve((uint64_t)&v75, v14 + 30);
        v16 = 0;
        while (1)
        {
          v17 = v78[v16];
          v18 = v17 > 0x2A || ((1 << v17) & 0x41800000000) == 0;
          if (v18 && v17 != 125)
          {
            std::vector<unsigned char>::push_back[abi:nn180100](&v75, &v78[v16]);
            goto LABEL_18;
          }
          v19 = v76;
          if (v76 >= v77)
            break;
          *v76 = 125;
          v20 = v19 + 1;
LABEL_56:
          v76 = v20;
          v39 = v78[v16] ^ 0x20;
          if (v20 >= v77)
          {
            v40 = v75;
            v41 = v20 - v75;
            v42 = v20 - v75 + 1;
            if (v42 < 0)
LABEL_108:
              abort();
            v43 = v77 - v75;
            if (2 * (v77 - v75) > (unint64_t)v42)
              v42 = 2 * v43;
            if (v43 >= 0x3FFFFFFFFFFFFFFFLL)
              v44 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v44 = v42;
            if (v44)
              v45 = (char *)operator new(v44);
            else
              v45 = 0;
            v46 = &v45[v41];
            v47 = &v45[v44];
            v45[v41] = v39;
            v48 = (uint64_t)&v45[v41 + 1];
            if (v20 == v40)
            {
              v75 = &v45[v41];
              v76 = &v45[v41 + 1];
              v77 = v47;
            }
            else
            {
              if (v41 < 8 || (unint64_t)(v40 - v45) < 0x20)
              {
                v49 = v20;
                goto LABEL_70;
              }
              if (v41 >= 0x20)
              {
                v52 = v41 & 0xFFFFFFFFFFFFFFE0;
                v53 = &v45[v41 - 16];
                v54 = (__int128 *)(v20 - 16);
                v55 = v41 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v56 = *v54;
                  *((_OWORD *)v53 - 1) = *(v54 - 1);
                  *(_OWORD *)v53 = v56;
                  v53 -= 32;
                  v54 -= 2;
                  v55 -= 32;
                }
                while (v55);
                if (v41 != v52)
                {
                  if ((v41 & 0x18) == 0)
                  {
                    v46 -= v52;
                    v49 = &v20[-v52];
                    goto LABEL_70;
                  }
                  goto LABEL_83;
                }
              }
              else
              {
                v52 = 0;
LABEL_83:
                v49 = &v20[-(v41 & 0xFFFFFFFFFFFFFFF8)];
                v46 -= v41 & 0xFFFFFFFFFFFFFFF8;
                v57 = &v45[&v20[-v52] - v40 - 8];
                v58 = (uint64_t *)&v20[-v52 - 8];
                v59 = v52 - (v41 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v60 = *v58--;
                  *(_QWORD *)v57 = v60;
                  v57 -= 8;
                  v59 += 8;
                }
                while (v59);
                if (v41 != (v41 & 0xFFFFFFFFFFFFFFF8))
                {
LABEL_70:
                  v50 = v46 - 1;
                  do
                  {
                    v51 = *--v49;
                    *v50-- = v51;
                  }
                  while (v49 != v40);
                }
              }
              v20 = v75;
              v75 = v45;
              v76 = &v45[v41 + 1];
              v77 = v47;
              if (!v20)
              {
LABEL_76:
                v76 = (char *)v48;
                goto LABEL_18;
              }
            }
            operator delete(v20);
            goto LABEL_76;
          }
          *v20 = v39;
          v76 = v20 + 1;
LABEL_18:
          if (++v16 == v15)
          {
            v65 = v75;
            v64 = v76;
            std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)&v72);
            v66 = v64 - v65;
            if (v64 != v65)
            {
              v67 = 0;
              if (v66 <= 1)
                v68 = 1;
              else
                v68 = v66;
              do
              {
                LOBYTE(__p[0]) = v75[v67];
                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v72, (uint64_t)__p, 1);
                ++v67;
              }
              while (v68 != v67);
            }
            std::stringbuf::str(__p, &v73);
            v61 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)__p);
            if (v71 < 0)
              operator delete(__p[0]);
            std::ostringstream::~ostringstream((uint64_t)&v72);
            v69 = v75;
            if (v75)
            {
              v76 = v75;
              goto LABEL_103;
            }
            goto LABEL_104;
          }
        }
        v21 = v75;
        v22 = v76 - v75;
        v23 = v76 - v75 + 1;
        if (v23 < 0)
          goto LABEL_108;
        v24 = v77 - v75;
        if (2 * (v77 - v75) > (unint64_t)v23)
          v23 = 2 * v24;
        if (v24 >= 0x3FFFFFFFFFFFFFFFLL)
          v25 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v25 = v23;
        if (v25)
          v26 = (char *)operator new(v25);
        else
          v26 = 0;
        v27 = &v26[v22];
        v26[v22] = 125;
        v20 = &v26[v22 + 1];
        if (v19 == v21)
        {
LABEL_54:
          v75 = v27;
          v76 = &v26[v22 + 1];
          v77 = &v26[v25];
          if (v19)
            operator delete(v19);
          goto LABEL_56;
        }
        if (v22 >= 8 && (unint64_t)(v21 - v26) >= 0x20)
        {
          if (v22 < 0x20)
          {
            v28 = 0;
            goto LABEL_46;
          }
          v28 = v22 & 0xFFFFFFFFFFFFFFE0;
          v29 = &v26[v22 - 16];
          v30 = v19 - 16;
          v31 = v22 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v32 = *(_OWORD *)v30;
            *((_OWORD *)v29 - 1) = *((_OWORD *)v30 - 1);
            *(_OWORD *)v29 = v32;
            v29 -= 32;
            v30 -= 32;
            v31 -= 32;
          }
          while (v31);
          if (v22 == v28)
            goto LABEL_53;
          if ((v22 & 0x18) != 0)
          {
LABEL_46:
            v27 -= v22 & 0xFFFFFFFFFFFFFFF8;
            v33 = &v26[&v19[-v28] - v21 - 8];
            v34 = &v19[-v28 - 8];
            v35 = v28 - (v22 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v36 = *(_QWORD *)v34;
              v34 -= 8;
              *(_QWORD *)v33 = v36;
              v33 -= 8;
              v35 += 8;
            }
            while (v35);
            v19 -= v22 & 0xFFFFFFFFFFFFFFF8;
            if (v22 == (v22 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_53;
            goto LABEL_51;
          }
          v27 -= v28;
          v19 -= v28;
        }
LABEL_51:
        v37 = v27 - 1;
        do
        {
          v38 = *--v19;
          *v37-- = v38;
        }
        while (v19 != v21);
LABEL_53:
        v19 = v75;
        v27 = v26;
        goto LABEL_54;
      }
      v63 = "E80";
    }
    else
    {
      v63 = "E79";
    }
    std::string::basic_string[abi:nn180100]<0>(&v72, v63);
    v61 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)&v72);
    if (v74 < 0)
    {
      v69 = v72;
LABEL_103:
      operator delete(v69);
    }
LABEL_104:
    v62 = v78;
    if (v78)
    {
      v79 = v78;
      goto LABEL_106;
    }
  }
  else
  {
    std::string::basic_string[abi:nn180100]<0>(&v72, "OK");
    v61 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)&v72);
    if (v74 < 0)
    {
      v62 = (char *)v72;
LABEL_106:
      operator delete(v62);
    }
  }
  return v61;
}

uint64_t RNBRemote::HandlePacket_X(RNBRemote *this, const char *__s, uint64_t a3, uint64_t a4, const char *a5)
{
  const char *v5;
  RNBRemote *v7;
  int v8;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  size_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  __int128 *v25;
  _OWORD *v26;
  unint64_t v27;
  __int128 v28;
  uint64_t *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  char *v34;
  void *v35[2];
  char v36;
  unint64_t v37[2];
  char v38;
  char *__endptr;

  v5 = __s;
  if (!__s || !*__s || strlen(__s) <= 2)
  {
    v7 = this;
    v8 = 3226;
    return RNBRemote::HandlePacket_ILLFORMED(v7, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", v8, v5, a5);
  }
  __endptr = 0;
  ++v5;
  *__error() = 0;
  v10 = strtoull(v5, &__endptr, 16);
  if (*__error() && !v10)
  {
    v7 = this;
    v8 = 3234;
    return RNBRemote::HandlePacket_ILLFORMED(v7, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", v8, v5, a5);
  }
  v11 = __endptr;
  if (*__endptr != 44)
  {
    v7 = this;
    v8 = 3238;
    return RNBRemote::HandlePacket_ILLFORMED(v7, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", v8, v5, a5);
  }
  v5 = __endptr + 1;
  *__error() = 0;
  v12 = strtoul(v11 + 1, 0, 16);
  if (*__error() && !v12)
  {
    v7 = this;
    v8 = 3252;
    return RNBRemote::HandlePacket_ILLFORMED(v7, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", v8, v5, a5);
  }
  if (v12)
  {
    decode_binary_data(v11, 0xFFFFFFFFFFFFFFFFLL, v37);
    v13 = v37[0];
    v14 = v37[1];
    __chkstk_darwin(v15);
    v17 = (char *)v35 - v16;
    bzero((char *)v35 - v16, v18);
    v19 = v14 - v13;
    if (v14 == v13)
      goto LABEL_32;
    v20 = v17;
    v21 = (char *)v13;
    if (v19 < 8)
      goto LABEL_31;
    v20 = v17;
    v21 = (char *)v13;
    if ((unint64_t)&v17[-v13] < 0x20)
      goto LABEL_31;
    if (v19 >= 0x20)
    {
      v22 = v19 & 0xFFFFFFFFFFFFFFE0;
      v25 = (__int128 *)(v13 + 16);
      v26 = v17 + 16;
      v27 = v19 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v28 = *v25;
        *(v26 - 1) = *(v25 - 1);
        *v26 = v28;
        v25 += 2;
        v26 += 2;
        v27 -= 32;
      }
      while (v27);
      if (v19 == v22)
      {
LABEL_32:
        if (DNBProcessMemoryWrite(*((_DWORD *)this + 3), v10, v14 - v13, v17) == v19)
          v34 = "OK";
        else
          v34 = "E08";
        std::string::basic_string[abi:nn180100]<0>(v35, v34);
        v23 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)v35);
        if (v36 < 0)
          operator delete(v35[0]);
        if (!v13)
          return v23;
        v24 = (void *)v13;
        goto LABEL_39;
      }
      if ((v19 & 0x18) == 0)
      {
        v21 = (char *)(v13 + v22);
        v20 = &v17[v22];
        goto LABEL_31;
      }
    }
    else
    {
      v22 = 0;
    }
    v20 = &v17[v19 & 0xFFFFFFFFFFFFFFF8];
    v21 = (char *)(v13 + (v19 & 0xFFFFFFFFFFFFFFF8));
    v29 = (uint64_t *)(v13 + v22);
    v30 = &v17[v22];
    v31 = v22 - (v19 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v32 = *v29++;
      *(_QWORD *)v30 = v32;
      v30 += 8;
      v31 += 8;
    }
    while (v31);
    if (v19 == (v19 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_32;
    do
    {
LABEL_31:
      v33 = *v21++;
      *v20++ = v33;
    }
    while (v21 != (char *)v14);
    goto LABEL_32;
  }
  std::string::basic_string[abi:nn180100]<0>(v37, "OK");
  v23 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)v37);
  if (v38 < 0)
  {
    v24 = (void *)v37[0];
LABEL_39:
    operator delete(v24);
  }
  return v23;
}

uint64_t RNBRemote::HandlePacket_qRcmd(RNBRemote *this, const char *a2)
{
  int v3;
  const char *v5;
  unsigned __int8 v6;
  int v7;
  const char *v8;
  BOOL v9;
  std::string *p_str;
  int data_low;
  int v12;
  uint64_t v14;
  unsigned int v16;
  std::string *v17;
  std::string::size_type size;
  char *v19;
  size_t v20;
  std::string *v21;
  size_t v22;
  std::string::size_type v23;
  int v24;
  std::string *v25;
  std::string::size_type v26;
  std::string *v27;
  char *v28;
  size_t v29;
  std::string *v30;
  size_t v31;
  std::string::size_type v32;
  std::string *p_p;
  int data;
  int v37;
  int v39;
  std::string *v40;
  FILE *v41;
  std::string *v42;
  int v43;
  std::string *v44;
  int v45;
  char *v46;
  void *v47[2];
  char v48;
  std::string v49;
  std::string v50;
  std::string __p;
  std::string __str;
  std::string v53;

  memset(&v53, 0, sizeof(v53));
  LOBYTE(v3) = a2[6];
  if ((_BYTE)v3)
  {
    v5 = a2 + 8;
    while (1)
    {
      v6 = *(v5 - 1);
      if (!v6)
      {
        *((_BYTE *)&__str.__r_.__value_.__s + 23) = 3;
        strcpy((char *)&__str, "E73");
        v14 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)&__str);
        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_21;
        goto LABEL_27;
      }
      __str.__r_.__value_.__s.__data_[0] = v3;
      *(_WORD *)((char *)&__str.__r_.__value_.__l.__data_ + 1) = v6;
      *__error() = 0;
      v7 = strtoul((const char *)&__str, 0, 16);
      v9 = *__error() && v7 == 0;
      if (v9)
        break;
      std::string::push_back(&v53, v7);
      v3 = *(unsigned __int8 *)v5;
      v5 += 2;
      if (!v3)
        goto LABEL_9;
    }
    v14 = RNBRemote::HandlePacket_ILLFORMED(this, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", 1742, a2, v8);
    if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v14;
    goto LABEL_22;
  }
LABEL_9:
  get_identifier(&v53, &__str);
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) == 3)
    {
      p_str = &__str;
      goto LABEL_14;
    }
LABEL_18:
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 3;
    LODWORD(__p.__r_.__value_.__l.__data_) = 3749445;
    v14 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)&__p);
    goto LABEL_19;
  }
  if (__str.__r_.__value_.__l.__size_ != 3)
    goto LABEL_18;
  p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
LABEL_14:
  data_low = LOWORD(p_str->__r_.__value_.__l.__data_);
  v12 = p_str->__r_.__value_.__s.__data_[2];
  if (data_low != 25971 || v12 != 116)
    goto LABEL_18;
  get_identifier(&v53, &__p);
  memset(&v50, 0, sizeof(v50));
  v16 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
  if ((*((_BYTE *)&v53.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    size = v53.__r_.__value_.__l.__size_;
    if (!v53.__r_.__value_.__l.__size_)
    {
      memset(&v49, 0, sizeof(v49));
      goto LABEL_55;
    }
    v17 = (std::string *)v53.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&v53.__r_.__value_.__s + 23))
      goto LABEL_44;
    v17 = &v53;
    size = HIBYTE(v53.__r_.__value_.__r.__words[2]);
  }
  v19 = k_space_delimiters;
  v20 = strlen(k_space_delimiters);
  v21 = v17;
  if (v20)
  {
    v22 = v20;
    v21 = v17;
    while (memchr(v19, v21->__r_.__value_.__s.__data_[0], v22))
    {
      v21 = (std::string *)((char *)v21 + 1);
      if (!--size)
      {
        v23 = -1;
        goto LABEL_42;
      }
    }
  }
  v23 = (char *)v21 - (char *)v17;
  if (v21 != v17)
  {
LABEL_42:
    std::string::erase(&v53, 0, v23);
    v16 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
  }
  if ((v16 & 0x80) == 0)
  {
LABEL_44:
    v24 = 0;
    if (!v16)
      goto LABEL_51;
    goto LABEL_47;
  }
  v24 = 1;
  if (!v53.__r_.__value_.__l.__size_)
    goto LABEL_51;
LABEL_47:
  v9 = v24 == 0;
  v25 = &v53;
  if (!v9)
    v25 = (std::string *)v53.__r_.__value_.__r.__words[0];
  if (v25->__r_.__value_.__s.__data_[0] == 61)
  {
    std::string::operator=(&v50, 61);
    std::string::erase(&v53, 0, 1uLL);
    v16 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
  }
LABEL_51:
  memset(&v49, 0, sizeof(v49));
  if ((v16 & 0x80) != 0)
  {
LABEL_55:
    v26 = v53.__r_.__value_.__l.__size_;
    if (!v53.__r_.__value_.__l.__size_)
      goto LABEL_67;
    v27 = (std::string *)v53.__r_.__value_.__r.__words[0];
    goto LABEL_57;
  }
  if (!v16)
    goto LABEL_65;
  v26 = v16;
  v27 = &v53;
LABEL_57:
  v28 = k_space_delimiters;
  v29 = strlen(k_space_delimiters);
  v30 = v27;
  if (v29)
  {
    v31 = v29;
    v30 = v27;
    while (memchr(v28, v30->__r_.__value_.__s.__data_[0], v31))
    {
      v30 = (std::string *)((char *)v30 + 1);
      if (!--v26)
      {
        v32 = -1;
        goto LABEL_63;
      }
    }
  }
  v32 = (char *)v30 - (char *)v27;
  if (v30 != v27)
  {
LABEL_63:
    std::string::erase(&v53, 0, v32);
    v16 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
  }
  if ((v16 & 0x80) == 0)
  {
LABEL_65:
    if (!v16)
      goto LABEL_67;
    goto LABEL_66;
  }
  if (v53.__r_.__value_.__l.__size_)
  {
LABEL_66:
    v49 = v53;
    memset(&v53, 0, sizeof(v53));
  }
LABEL_67:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__p.__r_.__value_.__l.__size_ == 7)
    {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (*(_DWORD *)__p.__r_.__value_.__l.__data_ != 1718054764
        || *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 3) != 1701603686)
      {
        goto LABEL_79;
      }
LABEL_94:
      if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v40 = &v49;
      else
        v40 = (std::string *)v49.__r_.__value_.__r.__words[0];
      v41 = fopen((const char *)v40, "w");
      if (!v41)
      {
        v48 = 3;
        v39 = 3225413;
        goto LABEL_84;
      }
      DNBLogSetLogCallback(FileLogCallback, (uint64_t)v41);
      v48 = 2;
      strcpy((char *)v47, "OK");
      goto LABEL_85;
    }
LABEL_83:
    v48 = 3;
    v39 = 3159877;
LABEL_84:
    LODWORD(v47[0]) = v39;
    goto LABEL_85;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 7)
    goto LABEL_83;
  if (LODWORD(__p.__r_.__value_.__l.__data_) == 1718054764
    && *(_DWORD *)((char *)__p.__r_.__value_.__r.__words + 3) == 1701603686)
  {
    goto LABEL_94;
  }
  p_p = &__p;
LABEL_79:
  data = (int)p_p->__r_.__value_.__l.__data_;
  v37 = *(_DWORD *)((char *)p_p->__r_.__value_.__r.__words + 3);
  if (data != 1835495276 || v37 != 1802723693)
    goto LABEL_83;
  v46 = 0;
  *__error() = 0;
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v42 = &v49;
  else
    v42 = (std::string *)v49.__r_.__value_.__r.__words[0];
  v43 = strtoul((const char *)v42, &v46, 0);
  if (*__error() || !v46 || *v46)
  {
    *__error() = 0;
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v44 = &v49;
    else
      v44 = (std::string *)v49.__r_.__value_.__r.__words[0];
    v45 = strtoul((const char *)v44, &v46, 16);
    if (*__error() || !v46 || *v46)
    {
      v48 = 3;
      v39 = 3290949;
      goto LABEL_84;
    }
    DNBLogSetLogMask(v45);
  }
  else
  {
    DNBLogSetLogMask(v43);
    if (!DNBLogGetLogCallback())
      DNBLogSetLogCallback(ASLLogCallback, 0);
  }
  std::string::basic_string[abi:nn180100]<0>(v47, "OK");
LABEL_85:
  v14 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)v47);
  if ((v48 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_87;
LABEL_90:
    operator delete(v49.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_91;
  }
  operator delete(v47[0]);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_90;
LABEL_87:
  if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_19;
LABEL_91:
  operator delete(v50.__r_.__value_.__l.__data_);
LABEL_19:
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_21;
LABEL_27:
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v14;
    goto LABEL_22;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_27;
LABEL_21:
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
LABEL_22:
    operator delete(v53.__r_.__value_.__l.__data_);
  return v14;
}

uint64_t RNBRemote::HandlePacket_qC(RNBRemote *this, const char *a2)
{
  void (__cdecl **v3)(std::ostringstream *__hidden);
  uint64_t v4;
  std::ios_base *v5;
  int v6;
  uint64_t CurrentThread;
  _QWORD *v8;
  uint64_t v9;
  void *__p[2];
  char v12;
  void (__cdecl **v13)(std::ostringstream *__hidden);
  _QWORD v14[8];
  void *v15[2];
  __int128 v16;
  int v17;
  void (__cdecl **v18)(std::ostringstream *__hidden);

  v13 = v3;
  *(_QWORD *)((char *)&v14[-1] + (_QWORD)*(v3 - 3)) = v4;
  v5 = (std::ios_base *)((char *)&v14[-1] + (_QWORD)*(v13 - 3));
  std::ios_base::init(v5, v14);
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf(v14);
  *(_OWORD *)v15 = 0u;
  v16 = 0u;
  v17 = 16;
  v6 = *((_DWORD *)this + 3);
  if (v6)
  {
    CurrentThread = DNBProcessGetCurrentThread(v6);
    DNBProcessSetCurrentThread(*((_DWORD *)this + 3), CurrentThread);
    *((_QWORD *)this + 68) = CurrentThread;
  }
  else
  {
    CurrentThread = 0;
  }
  v8 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v13, (uint64_t)"QC", 2);
  *(_DWORD *)((char *)v8 + *(_QWORD *)(*v8 - 24) + 8) = *(_DWORD *)((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 8) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<(v8, CurrentThread);
  std::stringbuf::str(__p, v14);
  v9 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)__p);
  if (v12 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v16) < 0)
    operator delete(v15[0]);
  std::streambuf::~streambuf(v14);
  std::ios::~ios(&v18);
  return v9;
}

uint64_t RNBRemote::HandlePacket_qEcho(RNBRemote *this, const char *__s)
{
  size_t v4;
  void *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *__dst[2];
  unint64_t v12;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v5 = (void *)v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = (void **)operator new(v7 + 1);
    __dst[1] = v5;
    v12 = v8 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_8;
  }
  HIBYTE(v12) = v4;
  v6 = __dst;
  if (v4)
LABEL_8:
    memcpy(v6, __s, (size_t)v5);
  *((_BYTE *)v5 + (_QWORD)v6) = 0;
  v9 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)__dst);
  if (SHIBYTE(v12) < 0)
    operator delete(__dst[0]);
  return v9;
}

uint64_t RNBRemote::HandlePacket_qGetPid(RNBRemote *this, const char *a2)
{
  void (__cdecl **v3)(std::ostringstream *__hidden);
  uint64_t v4;
  std::ios_base *v5;
  uint64_t v6;
  uint64_t v7;
  void *__p[2];
  char v10;
  void (__cdecl **v11)(std::ostringstream *__hidden);
  _QWORD v12[8];
  void *v13[2];
  __int128 v14;
  int v15;
  void (__cdecl **v16)(std::ostringstream *__hidden);

  v11 = v3;
  *(_QWORD *)((char *)&v12[-1] + (_QWORD)*(v3 - 3)) = v4;
  v5 = (std::ios_base *)((char *)&v12[-1] + (_QWORD)*(v11 - 3));
  std::ios_base::init(v5, v12);
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf(v12);
  *(_OWORD *)v13 = 0u;
  v14 = 0u;
  v15 = 16;
  v6 = *((unsigned int *)this + 3);
  *(_DWORD *)((char *)v12 + (_QWORD)*(v11 - 3)) = *(_DWORD *)((_BYTE *)v12 + (_QWORD)*(v11 - 3)) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<(&v11, v6);
  std::stringbuf::str(__p, v12);
  v7 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)__p);
  if (v10 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v14) < 0)
    operator delete(v13[0]);
  std::streambuf::~streambuf(v12);
  std::ios::~ios(&v16);
  return v7;
}

uint64_t RNBRemote::HandlePacket_qThreadInfo(RNBRemote *this, const char *a2)
{
  int v3;
  uint64_t NumThreads;
  void *v5;
  void *v6;
  std::ios_base *v7;
  uint64_t ThreadAtIndex;
  unint64_t i;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  char v14;
  void *v15;
  void (__cdecl **v16)(std::stringbuf *__hidden);
  char v17;
  void *v18[2];
  __int128 v19;
  int v20;
  void (__cdecl **v21)(std::ostringstream *__hidden);

  v3 = *((_DWORD *)this + 3);
  if (v3)
  {
    if (a2[1] == 102)
    {
      NumThreads = DNBProcessGetNumThreads(*((_DWORD *)this + 3));
      v15 = v5;
      *(void **)((char *)&v15 + *((_QWORD *)v5 - 3)) = v6;
      v7 = (std::ios_base *)((char *)&v15 + *((_QWORD *)v15 - 3));
      std::ios_base::init(v7, &v16);
      v7[1].__vftable = 0;
      v7[1].__fmtflags_ = -1;
      std::streambuf::basic_streambuf(&v16);
      *(_OWORD *)v18 = 0u;
      v19 = 0u;
      v20 = 16;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v15, (uint64_t)"m", 1);
      if (NumThreads)
      {
        ThreadAtIndex = DNBProcessGetThreadAtIndex(v3, 0);
        *(_DWORD *)((char *)&v16 + *((_QWORD *)v15 - 3)) = *(_DWORD *)((_BYTE *)&v16 + *((_QWORD *)v15 - 3)) & 0xFFFFFFB5 | 8;
        std::ostream::operator<<(&v15, ThreadAtIndex);
        if (NumThreads != 1)
        {
          for (i = 1; i != NumThreads; ++i)
          {
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v15, (uint64_t)",", 1);
            v10 = DNBProcessGetThreadAtIndex(v3, i);
            *(_DWORD *)((char *)&v16 + *((_QWORD *)v15 - 3)) = *(_DWORD *)((_BYTE *)&v16 + *((_QWORD *)v15 - 3)) & 0xFFFFFFB5 | 8;
            std::ostream::operator<<(&v15, v10);
          }
        }
      }
      std::stringbuf::str(__p, &v16);
      v11 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)__p);
      if (v14 < 0)
        operator delete(__p[0]);
      if (SBYTE7(v19) < 0)
        operator delete(v18[0]);
      std::streambuf::~streambuf(&v16);
      std::ios::~ios(&v21);
      return v11;
    }
    v17 = 1;
    LOWORD(v15) = 108;
  }
  else
  {
    v17 = 2;
    strcpy((char *)&v15, "OK");
  }
  v11 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)&v15);
  if (v17 < 0)
    operator delete(v15);
  return v11;
}

uint64_t RNBRemote::HandlePacket_qThreadStopInfo(RNBRemote *this, const char *a2)
{
  unint64_t v3;

  v3 = strtoul(a2 + 15, 0, 16);
  return RNBRemote::SendStopReplyPacketForThread(this, v3);
}

uint64_t RNBRemote::HandlePacket_qThreadExtraInfo(RNBRemote *this, const char *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  RNBRemote *v5;
  int v6;
  const char *v7;
  unint64_t v8;
  int v9;
  char *Info;
  unsigned __int8 *v12;
  size_t v13;
  uint64_t v14;
  void *__p[2];
  char v16;

  v5 = this;
  v6 = *((_DWORD *)this + 3);
  if (v6)
  {
    v7 = a2 + 17;
    if (a2[16] != 44)
    {
      v9 = 1659;
      return RNBRemote::HandlePacket_ILLFORMED(this, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", v9, v7, a5);
    }
    *__error() = 0;
    v8 = strtoul(v7, 0, 16);
    if (*__error() && !v8)
    {
      this = v5;
      v9 = 1665;
      return RNBRemote::HandlePacket_ILLFORMED(this, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", v9, v7, a5);
    }
    Info = DNBThreadGetInfo(v6, v8);
    if (Info)
    {
      v12 = (unsigned __int8 *)Info;
      if (*Info)
      {
        v13 = strlen(Info);
        return RNBRemote::SendHexEncodedBytePacket(v5, 0, v12, v13, 0);
      }
    }
    v16 = 4;
    strcpy((char *)__p, "4f6b");
  }
  else
  {
    v16 = 2;
    strcpy((char *)__p, "OK");
  }
  v14 = RNBRemote::SendPacket((uint64_t)v5, (uint64_t)__p);
  if (v16 < 0)
    operator delete(__p[0]);
  return v14;
}

uint64_t RNBRemote::HandlePacket_qLaunchSuccess(RNBRemote *this, const char *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  std::ios_base *v6;
  const char *v7;
  size_t v8;
  size_t v9;
  void **p_dst;
  uint64_t v11;
  uint64_t v12;
  int v13;
  void **v14;
  size_t v15;
  void **v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  BOOL v20;
  _QWORD *v21;
  std::string *v22;
  std::string::size_type size;
  void **__dst;
  size_t v26;
  int64_t v27;
  std::string v28;
  void *v29[2];
  uint64_t v30;
  void *__p;
  void (__cdecl **v32)(std::stringbuf *__hidden);
  char v33;
  __int128 v34;
  __int128 v35;
  int v36;
  void (__cdecl **v37)(std::ostringstream *__hidden);

  if (!*((_DWORD *)this + 3) && *((_DWORD *)this + 78))
  {
    __p = v4;
    *(void **)((char *)&__p + *((_QWORD *)v4 - 3)) = v5;
    v6 = (std::ios_base *)((char *)&__p + *((_QWORD *)__p - 3));
    std::ios_base::init(v6, &v32);
    v6[1].__vftable = 0;
    v6[1].__fmtflags_ = -1;
    std::streambuf::basic_streambuf(&v32);
    v34 = 0u;
    v35 = 0u;
    v36 = 16;
    v29[0] = 0;
    v29[1] = 0;
    v30 = 0;
    v7 = (const char *)RNBContext::LaunchStatusAsString((uint64_t)this, (uint64_t)v29);
    v8 = strlen(v7);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v9 = v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      p_dst = (void **)operator new(v11 + 1);
      v26 = v9;
      v27 = v12 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v27) = v8;
      p_dst = (void **)&__dst;
      if (!v8)
      {
LABEL_13:
        *((_BYTE *)p_dst + v9) = 0;
        memset(&v28, 0, sizeof(v28));
        v13 = SHIBYTE(v27);
        v14 = __dst;
        if (v27 >= 0)
          v15 = HIBYTE(v27);
        else
          v15 = v26;
        if (v27 >= 0)
          v16 = (void **)&__dst;
        else
          v16 = __dst;
        for (; v15; --v15)
        {
          v18 = *(unsigned __int8 *)v16;
          v16 = (void **)((char *)v16 + 1);
          v17 = v18;
          v19 = (1 << v18) & 0x41800000000;
          v20 = v18 > 0x2A || v19 == 0;
          if (!v20 || v17 == 125)
          {
            std::string::push_back(&v28, 125);
            LOBYTE(v17) = v17 ^ 0x20;
          }
          std::string::push_back(&v28, v17);
        }
        if (v13 < 0)
          operator delete(v14);
        v21 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)"E", 1);
        if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v22 = &v28;
        else
          v22 = (std::string *)v28.__r_.__value_.__r.__words[0];
        if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
        else
          size = v28.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, size);
        std::stringbuf::str(&__dst, &v32);
        v3 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)&__dst);
        if (SHIBYTE(v27) < 0)
        {
          operator delete(__dst);
          if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_40;
        }
        else if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_40:
          if (SHIBYTE(v30) < 0)
            operator delete(v29[0]);
          if (SBYTE7(v35) < 0)
            operator delete((void *)v34);
          std::streambuf::~streambuf(&v32);
          std::ios::~ios(&v37);
          return v3;
        }
        operator delete(v28.__r_.__value_.__l.__data_);
        goto LABEL_40;
      }
    }
    memmove(p_dst, v7, v9);
    goto LABEL_13;
  }
  v33 = 2;
  strcpy((char *)&__p, "OK");
  v3 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)&__p);
  if (v33 < 0)
    operator delete(__p);
  return v3;
}

uint64_t RNBRemote::HandlePacket_qRegisterInfo(RNBRemote *this, const char *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  std::ios_base *v9;
  unint64_t v10;
  const char **v11;
  _QWORD *v12;
  size_t v13;
  _QWORD *v14;
  const char **v15;
  uint64_t v16;
  _QWORD *v17;
  size_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  _QWORD *v30;
  const char *v31;
  size_t v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unsigned int *v37;
  int v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  const char *v42;
  uint64_t v43;
  unsigned int **v44;
  unsigned int *v45;
  unsigned int **v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  char *v51;
  const std::locale::facet *v52;
  unint64_t v53;
  unsigned int **v54;
  unsigned int *v55;
  unsigned int **v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  char *v61;
  const std::locale::facet *v62;
  uint64_t v64;
  _QWORD *v65;
  char *v66;
  const std::locale::facet *v67;
  uint64_t v68;
  _QWORD *v69;
  char *v70;
  const std::locale::facet *v71;
  RNBRemote *v72;
  std::locale v73;
  char v74;
  void *__p;
  void (__cdecl **v76)(std::stringbuf *__hidden);
  char v77;
  void *v78[2];
  __int128 v79;
  int v80;
  void (__cdecl **v81)(std::ostringstream *__hidden);
  unint64_t v82;

  if (!g_num_reg_entries)
    RNBRemote::InitializeRegisters(this, 0);
  v82 = 0;
  v4 = DNBGetRegisterSetInfo(&v82);
  v5 = strtoul(a2 + 13, 0, 16);
  if (v5 >= g_num_reg_entries)
  {
    v77 = 3;
    LODWORD(__p) = 3486789;
    v26 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)&__p);
    if (v77 < 0)
      operator delete(__p);
  }
  else
  {
    v72 = this;
    v6 = g_reg_entries;
    __p = v7;
    *(void **)((char *)&__p + *((_QWORD *)v7 - 3)) = v8;
    v9 = (std::ios_base *)((char *)&__p + *((_QWORD *)__p - 3));
    std::ios_base::init(v9, &v76);
    v9[1].__vftable = 0;
    v9[1].__fmtflags_ = -1;
    std::streambuf::basic_streambuf(&v76);
    *(_OWORD *)v78 = 0u;
    v79 = 0u;
    v80 = 16;
    v10 = v6 + (v5 << 7);
    v11 = (const char **)(v10 + 16);
    if (*(_QWORD *)(v10 + 16))
    {
      v12 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)"name:", 5);
      v13 = strlen(*v11);
      v14 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)*v11, v13);
      LOBYTE(v73.__locale_) = 59;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)&v73, 1);
    }
    v16 = *(_QWORD *)(v10 + 24);
    v15 = (const char **)(v10 + 24);
    if (v16)
    {
      v17 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)"alt-name:", 9);
      v18 = strlen(*v15);
      v19 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)*v15, v18);
      LOBYTE(v73.__locale_) = 59;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)&v73, 1);
    }
    v20 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)"bitsize:", 8);
    *(_DWORD *)((char *)v20 + *(_QWORD *)(*v20 - 24) + 8) = *(_DWORD *)((_BYTE *)v20 + *(_QWORD *)(*v20 - 24) + 8) & 0xFFFFFFB5 | 2;
    v21 = v6 + (v5 << 7);
    v22 = (_QWORD *)std::ostream::operator<<(v20, (8 * *(_DWORD *)(v21 + 36)));
    LOBYTE(v73.__locale_) = 59;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)&v73, 1);
    v23 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)"offset:", 7);
    *(_DWORD *)((char *)v23 + *(_QWORD *)(*v23 - 24) + 8) = *(_DWORD *)((_BYTE *)v23 + *(_QWORD *)(*v23 - 24) + 8) & 0xFFFFFFB5 | 2;
    v24 = (_QWORD *)std::ostream::operator<<(v23, *(unsigned int *)(v21 + 4));
    LOBYTE(v73.__locale_) = 59;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)&v73, 1);
    switch(*(_WORD *)(v21 + 32))
    {
      case 1:
        v25 = "encoding:uint;";
        goto LABEL_13;
      case 2:
        v25 = "encoding:sint;";
LABEL_13:
        v27 = 14;
        goto LABEL_16;
      case 3:
        v25 = "encoding:ieee754;";
        v27 = 17;
        goto LABEL_16;
      case 4:
        v25 = "encoding:vector;";
        v27 = 16;
LABEL_16:
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)v25, v27);
        break;
      default:
        break;
    }
    switch(*(_WORD *)(v21 + 34))
    {
      case 1:
        v28 = "format:binary;";
        v29 = 14;
        goto LABEL_33;
      case 2:
        v28 = "format:decimal;";
        v29 = 15;
        goto LABEL_33;
      case 3:
        v28 = "format:hex;";
        v29 = 11;
        goto LABEL_33;
      case 4:
        v28 = "format:float;";
        v29 = 13;
        goto LABEL_33;
      case 5:
        v28 = "format:vector-sint8;";
        goto LABEL_24;
      case 6:
        v28 = "format:vector-uint8;";
LABEL_24:
        v29 = 20;
        goto LABEL_33;
      case 7:
        v28 = "format:vector-sint16;";
        goto LABEL_29;
      case 8:
        v28 = "format:vector-uint16;";
        goto LABEL_29;
      case 9:
        v28 = "format:vector-sint32;";
        goto LABEL_29;
      case 0xA:
        v28 = "format:vector-uint32;";
LABEL_29:
        v29 = 21;
        goto LABEL_33;
      case 0xB:
        v28 = "format:vector-float32;";
        goto LABEL_32;
      case 0xC:
        v28 = "format:vector-uint128;";
LABEL_32:
        v29 = 22;
LABEL_33:
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)v28, v29);
        break;
      default:
        break;
    }
    if (v4 && v82 > *((unsigned int *)v11 - 2))
    {
      v30 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)"set:", 4);
      v31 = *(const char **)(v4 + 24 * *((unsigned int *)v11 - 2));
      v32 = strlen(v31);
      v33 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v30, (uint64_t)v31, v32);
      LOBYTE(v73.__locale_) = 59;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v33, (uint64_t)&v73, 1);
    }
    v34 = v6 + (v5 << 7);
    if (*(_DWORD *)(v34 + 44) != -1)
    {
      v35 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)"ehframe:", 8);
      *(_DWORD *)((char *)v35 + *(_QWORD *)(*v35 - 24) + 8) = *(_DWORD *)((_BYTE *)v35 + *(_QWORD *)(*v35 - 24) + 8) & 0xFFFFFFB5 | 2;
      v36 = (_QWORD *)std::ostream::operator<<(v35, *(unsigned int *)(v34 + 44));
      LOBYTE(v73.__locale_) = 59;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v36, (uint64_t)&v73, 1);
    }
    v38 = *(_DWORD *)(v34 + 48);
    v37 = (unsigned int *)(v34 + 48);
    if (v38 != -1)
    {
      v39 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)"dwarf:", 6);
      *(_DWORD *)((char *)v39 + *(_QWORD *)(*v39 - 24) + 8) = *(_DWORD *)((_BYTE *)v39 + *(_QWORD *)(*v39 - 24) + 8) & 0xFFFFFFB5 | 2;
      v40 = (_QWORD *)std::ostream::operator<<(v39, *v37);
      LOBYTE(v73.__locale_) = 59;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v40, (uint64_t)&v73, 1);
    }
    v41 = v6 + (v5 << 7);
    switch(*(_DWORD *)(v41 + 52))
    {
      case 0:
        v42 = "generic:pc;";
        goto LABEL_46;
      case 1:
        v42 = "generic:sp;";
        goto LABEL_46;
      case 2:
        v42 = "generic:fp;";
        goto LABEL_46;
      case 3:
        v42 = "generic:ra;";
LABEL_46:
        v43 = 11;
        goto LABEL_57;
      case 4:
        v42 = "generic:flags;";
        v43 = 14;
        goto LABEL_57;
      case 5:
        v42 = "generic:arg1;";
        goto LABEL_56;
      case 6:
        v42 = "generic:arg2;";
        goto LABEL_56;
      case 7:
        v42 = "generic:arg3;";
        goto LABEL_56;
      case 8:
        v42 = "generic:arg4;";
        goto LABEL_56;
      case 9:
        v42 = "generic:arg5;";
        goto LABEL_56;
      case 0xA:
        v42 = "generic:arg6;";
        goto LABEL_56;
      case 0xB:
        v42 = "generic:arg7;";
        goto LABEL_56;
      case 0xC:
        v42 = "generic:arg8;";
LABEL_56:
        v43 = 13;
LABEL_57:
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)v42, v43);
        break;
      default:
        break;
    }
    v45 = *(unsigned int **)(v41 + 80);
    v44 = (unsigned int **)(v41 + 80);
    v46 = v44 + 1;
    if (v45 != v44[1])
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)"container-regs:", 15);
      v47 = (char *)*v44;
      v48 = (char *)*v46 - (char *)*v44;
      if (*v46 != *v44)
      {
        if ((unint64_t)(v48 >> 2) <= 1)
          v49 = 1;
        else
          v49 = v48 >> 2;
        v50 = __p;
        v51 = (char *)&__p + *((_QWORD *)__p - 3);
        if (*((_DWORD *)v51 + 36) == -1)
        {
          std::ios_base::getloc((const std::ios_base *)((char *)&__p + *((_QWORD *)__p - 3)));
          v52 = std::locale::use_facet(&v73, &std::ctype<char>::id);
          ((void (*)(const std::locale::facet *, uint64_t))v52->__vftable[2].~facet_0)(v52, 32);
          std::locale::~locale(&v73);
          v50 = __p;
          v47 = (char *)*v44;
        }
        *((_DWORD *)v51 + 36) = 48;
        *(_DWORD *)((char *)&v76 + *(v50 - 3)) = *(_DWORD *)((_BYTE *)&v76 + *(v50 - 3)) & 0xFFFFFFB5 | 8;
        *(_DWORD *)((char *)&v76 + *(v50 - 3)) = *(_DWORD *)((_BYTE *)&v76 + *(v50 - 3)) & 0xFFFFFF4F | 0x80;
        std::ostream::operator<<(&__p, *(unsigned int *)v47);
        if ((unint64_t)v48 >= 8)
        {
          v64 = 1;
          do
          {
            LOBYTE(v73.__locale_) = 44;
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)&v73, 1);
            v65 = __p;
            v66 = (char *)&__p + *((_QWORD *)__p - 3);
            if (*((_DWORD *)v66 + 36) == -1)
            {
              std::ios_base::getloc((const std::ios_base *)((char *)&__p + *((_QWORD *)__p - 3)));
              v67 = std::locale::use_facet(&v73, &std::ctype<char>::id);
              ((void (*)(const std::locale::facet *, uint64_t))v67->__vftable[2].~facet_0)(v67, 32);
              std::locale::~locale(&v73);
              v65 = __p;
            }
            *((_DWORD *)v66 + 36) = 48;
            *(_DWORD *)((char *)&v76 + *(v65 - 3)) = *(_DWORD *)((_BYTE *)&v76 + *(v65 - 3)) & 0xFFFFFFB5 | 8;
            *(_DWORD *)((char *)&v76 + *(v65 - 3)) = *(_DWORD *)((_BYTE *)&v76 + *(v65 - 3)) & 0xFFFFFF4F | 0x80;
            std::ostream::operator<<(&__p, (*v44)[v64++]);
          }
          while (v49 != v64);
        }
      }
      LOBYTE(v73.__locale_) = 59;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)&v73, 1);
    }
    v53 = v6 + (v5 << 7);
    v55 = *(unsigned int **)(v53 + 104);
    v54 = (unsigned int **)(v53 + 104);
    v56 = v54 + 1;
    if (v55 != v54[1])
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)"invalidate-regs:", 16);
      v57 = (char *)*v54;
      v58 = (char *)*v56 - (char *)*v54;
      if (*v56 != *v54)
      {
        if ((unint64_t)(v58 >> 2) <= 1)
          v59 = 1;
        else
          v59 = v58 >> 2;
        v60 = __p;
        v61 = (char *)&__p + *((_QWORD *)__p - 3);
        if (*((_DWORD *)v61 + 36) == -1)
        {
          std::ios_base::getloc((const std::ios_base *)((char *)&__p + *((_QWORD *)__p - 3)));
          v62 = std::locale::use_facet(&v73, &std::ctype<char>::id);
          ((void (*)(const std::locale::facet *, uint64_t))v62->__vftable[2].~facet_0)(v62, 32);
          std::locale::~locale(&v73);
          v60 = __p;
          v57 = (char *)*v54;
        }
        *((_DWORD *)v61 + 36) = 48;
        *(_DWORD *)((char *)&v76 + *(v60 - 3)) = *(_DWORD *)((_BYTE *)&v76 + *(v60 - 3)) & 0xFFFFFFB5 | 8;
        *(_DWORD *)((char *)&v76 + *(v60 - 3)) = *(_DWORD *)((_BYTE *)&v76 + *(v60 - 3)) & 0xFFFFFF4F | 0x80;
        std::ostream::operator<<(&__p, *(unsigned int *)v57);
        if ((unint64_t)v58 >= 8)
        {
          v68 = 1;
          do
          {
            LOBYTE(v73.__locale_) = 44;
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)&v73, 1);
            v69 = __p;
            v70 = (char *)&__p + *((_QWORD *)__p - 3);
            if (*((_DWORD *)v70 + 36) == -1)
            {
              std::ios_base::getloc((const std::ios_base *)((char *)&__p + *((_QWORD *)__p - 3)));
              v71 = std::locale::use_facet(&v73, &std::ctype<char>::id);
              ((void (*)(const std::locale::facet *, uint64_t))v71->__vftable[2].~facet_0)(v71, 32);
              std::locale::~locale(&v73);
              v69 = __p;
            }
            *((_DWORD *)v70 + 36) = 48;
            *(_DWORD *)((char *)&v76 + *(v69 - 3)) = *(_DWORD *)((_BYTE *)&v76 + *(v69 - 3)) & 0xFFFFFFB5 | 8;
            *(_DWORD *)((char *)&v76 + *(v69 - 3)) = *(_DWORD *)((_BYTE *)&v76 + *(v69 - 3)) & 0xFFFFFF4F | 0x80;
            std::ostream::operator<<(&__p, (*v54)[v68++]);
          }
          while (v59 != v68);
        }
      }
      LOBYTE(v73.__locale_) = 59;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)&v73, 1);
    }
    std::stringbuf::str(&v73, &v76);
    v26 = RNBRemote::SendPacket((uint64_t)v72, (uint64_t)&v73);
    if (v74 < 0)
      operator delete(v73.__locale_);
    if (SBYTE7(v79) < 0)
      operator delete(v78[0]);
    std::streambuf::~streambuf(&v76);
    std::ios::~ios(&v81);
  }
  return v26;
}

uint64_t RNBRemote::HandlePacket_qShlibInfoAddr(RNBRemote *this, const char *a2)
{
  int v3;
  uint64_t SharedLibraryInfoAddress;
  uint64_t v5;
  void *v6;
  void *v7;
  std::ios_base *v8;
  _QWORD *v9;
  char *v10;
  const std::locale::facet *v11;
  uint64_t v12;
  void *__p[2];
  char v15;
  void *v16;
  void (__cdecl **v17)(std::stringbuf *__hidden);
  char v18;
  void *v19[2];
  __int128 v20;
  int v21;
  void (__cdecl **v22)(std::ostringstream *__hidden);

  v3 = *((_DWORD *)this + 3);
  if (!v3 || (SharedLibraryInfoAddress = DNBProcessGetSharedLibraryInfoAddress(v3), SharedLibraryInfoAddress == -1))
  {
    v18 = 3;
    LODWORD(v16) = 3421253;
    v12 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)&v16);
    if (v18 < 0)
      operator delete(v16);
  }
  else
  {
    v5 = SharedLibraryInfoAddress;
    v16 = v6;
    *(void **)((char *)&v16 + *((_QWORD *)v6 - 3)) = v7;
    v8 = (std::ios_base *)((char *)&v16 + *((_QWORD *)v16 - 3));
    std::ios_base::init(v8, &v17);
    v8[1].__vftable = 0;
    v8[1].__fmtflags_ = -1;
    std::streambuf::basic_streambuf(&v17);
    *(_OWORD *)v19 = 0u;
    v20 = 0u;
    v21 = 16;
    v9 = v16;
    v10 = (char *)&v16 + *((_QWORD *)v16 - 3);
    if (*((_DWORD *)v10 + 36) == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)&v16 + *((_QWORD *)v16 - 3)));
      v11 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
      std::locale::~locale((std::locale *)__p);
      v9 = v16;
    }
    *((_DWORD *)v10 + 36) = 48;
    *(_DWORD *)((char *)&v16 + *(v9 - 3) + 8) = *(_DWORD *)((_BYTE *)&v16 + *(v9 - 3) + 8) & 0xFFFFFFB5 | 8;
    *(_DWORD *)((char *)&v16 + *(v9 - 3) + 8) = *(_DWORD *)((_BYTE *)&v16 + *(v9 - 3) + 8) & 0xFFFFFF4F | 0x80;
    std::ostream::operator<<(&v16, v5);
    std::stringbuf::str(__p, &v17);
    v12 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)__p);
    if (v15 < 0)
      operator delete(__p[0]);
    if (SBYTE7(v20) < 0)
      operator delete(v19[0]);
    std::streambuf::~streambuf(&v17);
    std::ios::~ios(&v22);
  }
  return v12;
}

uint64_t RNBRemote::HandlePacket_qStepPacketSupported(RNBRemote *this, const char *a2)
{
  uint64_t v2;
  void *__p[2];
  char v5;

  v5 = 2;
  strcpy((char *)__p, "OK");
  v2 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

uint64_t RNBRemote::HandlePacket_qVAttachOrWaitSupported(RNBRemote *this, const char *a2)
{
  uint64_t v2;
  void *__p[2];
  char v5;

  v5 = 2;
  strcpy((char *)__p, "OK");
  v2 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

uint64_t RNBRemote::HandlePacket_qSyncThreadStateSupported(RNBRemote *this, const char *a2)
{
  uint64_t v2;
  void *__p[2];
  char v5;

  v5 = 2;
  strcpy((char *)__p, "OK");
  v2 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

uint64_t RNBRemote::HandlePacket_qHostInfo(RNBRemote *this, const char *a2)
{
  void (__cdecl **v3)(std::ostringstream *__hidden);
  uint64_t v4;
  std::ios_base *v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  const char *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  void **v30;
  void (__cdecl ***v31)(std::ostringstream *__hidden);
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  void *__p[2];
  char v39;
  size_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int v46;
  void (__cdecl **v47)(std::ostringstream *__hidden);
  _QWORD v48[8];
  __int128 v49;
  __int128 v50;
  int v51;
  void (__cdecl **v52)(std::ostringstream *__hidden);

  v47 = v3;
  *(_QWORD *)((char *)&v48[-1] + (_QWORD)*(v3 - 3)) = v4;
  v5 = (std::ios_base *)((char *)&v48[-1] + (_QWORD)*(v47 - 3));
  std::ios_base::init(v5, v48);
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf(v48);
  v49 = 0u;
  v50 = 0u;
  v51 = 16;
  v6 = GetHostCPUType(unsigned int &,unsigned int &,unsigned int &,BOOL &)::g_host_cputype;
  if (GetHostCPUType(unsigned int &,unsigned int &,unsigned int &,BOOL &)::g_host_cputype)
  {
    v7 = GetHostCPUType(unsigned int &,unsigned int &,unsigned int &,BOOL &)::g_promoted_to_64;
    goto LABEL_15;
  }
  GetHostCPUType(unsigned int &,unsigned int &,unsigned int &,BOOL &)::g_promoted_to_64 = 0;
  v40 = 4;
  if (!sysctlbyname("hw.cputype", &GetHostCPUType(unsigned int &,unsigned int &,unsigned int &,BOOL &)::g_host_cputype, &v40, 0, 0))
  {
    v40 = 4;
    if (!sysctlbyname("hw.cpu64bit_capable", &GetHostCPUType(unsigned int &,unsigned int &,unsigned int &,BOOL &)::g_is_64_bit_capable, &v40, 0, 0)&& GetHostCPUType(unsigned int &,unsigned int &,unsigned int &,BOOL &)::g_is_64_bit_capable&& (GetHostCPUType(unsigned int &,unsigned int &,unsigned int &,BOOL &)::g_host_cputype & 0x1000000) == 0)
    {
      GetHostCPUType(unsigned int &,unsigned int &,unsigned int &,BOOL &)::g_promoted_to_64 = 1;
      GetHostCPUType(unsigned int &,unsigned int &,unsigned int &,BOOL &)::g_host_cputype |= 0x1000000u;
    }
  }
  v40 = 4;
  v8 = sysctlbyname("hw.cpusubtype", &GetHostCPUType(unsigned int &,unsigned int &,unsigned int &,BOOL &)::g_host_cpusubtype, &v40, 0, 0);
  v6 = GetHostCPUType(unsigned int &,unsigned int &,unsigned int &,BOOL &)::g_host_cputype;
  v7 = GetHostCPUType(unsigned int &,unsigned int &,unsigned int &,BOOL &)::g_promoted_to_64;
  if (!v8
    && GetHostCPUType(unsigned int &,unsigned int &,unsigned int &,BOOL &)::g_promoted_to_64
    && GetHostCPUType(unsigned int &,unsigned int &,unsigned int &,BOOL &)::g_host_cputype == 16777223
    && GetHostCPUType(unsigned int &,unsigned int &,unsigned int &,BOOL &)::g_host_cpusubtype == 4)
  {
    GetHostCPUType(unsigned int &,unsigned int &,unsigned int &,BOOL &)::g_host_cpusubtype = 3;
    v6 = 16777223;
    goto LABEL_15;
  }
  if (GetHostCPUType(unsigned int &,unsigned int &,unsigned int &,BOOL &)::g_host_cputype)
  {
LABEL_15:
    v9 = GetHostCPUType(unsigned int &,unsigned int &,unsigned int &,BOOL &)::g_host_cpusubtype;
    v10 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v47, (uint64_t)"cputype:", 8);
    *(_DWORD *)((char *)v10 + *(_QWORD *)(*v10 - 24) + 8) = *(_DWORD *)((_BYTE *)v10 + *(_QWORD *)(*v10 - 24) + 8) & 0xFFFFFFB5 | 2;
    v11 = (_QWORD *)std::ostream::operator<<(v10, v6);
    LOBYTE(v40) = 59;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)&v40, 1);
    v12 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v47, (uint64_t)"cpusubtype:", 11);
    *(_DWORD *)((char *)v12 + *(_QWORD *)(*v12 - 24) + 8) = *(_DWORD *)((_BYTE *)v12 + *(_QWORD *)(*v12 - 24) + 8) & 0xFFFFFFB5 | 2;
    v13 = (_QWORD *)std::ostream::operator<<(v12, v9);
    LOBYTE(v40) = 59;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)&v40, 1);
  }
  v46 = 0;
  if (DNBGetAddressingBits(&v46))
  {
    v14 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v47, (uint64_t)"addressing_bits:", 16);
    *(_DWORD *)((char *)v14 + *(_QWORD *)(*v14 - 24) + 8) = *(_DWORD *)((_BYTE *)v14 + *(_QWORD *)(*v14 - 24) + 8) & 0xFFFFFFB5 | 2;
    v15 = (_QWORD *)std::ostream::operator<<(v14, v46);
    LOBYTE(v40) = 59;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)&v40, 1);
  }
  if ((_DWORD)v6 == 12 || (_DWORD)v6 == 33554444 || (_DWORD)v6 == 16777228)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v47, (uint64_t)"ostype:ios;", 11);
    v16 = "watchpoint_exceptions_received:before;";
    v17 = 38;
  }
  else
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v47, (uint64_t)"ostype:macosx;", 14);
    v16 = "watchpoint_exceptions_received:after;";
    v17 = 37;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v47, (uint64_t)v16, v17);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v47, (uint64_t)"vendor:apple;", 13);
  v44 = 0;
  v45 = 0;
  v43 = 0;
  if (DNBGetOSVersionNumbers(&v45, &v44, &v43))
  {
    v18 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v47, (uint64_t)"os_version:", 11);
    v19 = (_QWORD *)std::ostream::operator<<(v18, v45);
    v20 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)".", 1);
    std::ostream::operator<<(v20, v44);
    if (v43 != -1)
    {
      v21 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v47, (uint64_t)".", 1);
      std::ostream::operator<<(v21, v43);
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v47, (uint64_t)";", 1);
  }
  DNBGetMacCatalystVersionString();
  if ((char)v42 < 0)
  {
    v22 = v41;
    if (v41)
    {
      v23 = (unsigned __int8 *)v40;
LABEL_32:
      while (1)
      {
        v24 = *v23;
        if (v24 != 46 && (v24 - 48) >= 0xA)
          break;
        ++v23;
        if (!--v22)
        {
          v26 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v47, (uint64_t)"maccatalyst_version:", 20);
          if ((v42 & 0x80u) == 0)
            v27 = (uint64_t)&v40;
          else
            v27 = v40;
          if ((v42 & 0x80u) == 0)
            v28 = v42;
          else
            v28 = v41;
          v29 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v26, v27, v28);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v29, (uint64_t)";", 1);
          break;
        }
      }
    }
  }
  else
  {
    v22 = v42;
    if (v42)
    {
      v23 = (unsigned __int8 *)&v40;
      goto LABEL_32;
    }
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v47, (uint64_t)"endian:little;", 14);
  if (v7)
  {
    v30 = (void **)"ptrsize:8;";
    v31 = &v47;
    v32 = 10;
  }
  else
  {
    v33 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v47, (uint64_t)"ptrsize:", 8);
    *(_DWORD *)((char *)v33 + *(_QWORD *)(*v33 - 24) + 8) = *(_DWORD *)((_BYTE *)v33 + *(_QWORD *)(*v33 - 24) + 8) & 0xFFFFFFB5 | 2;
    v31 = (void (__cdecl ***)(std::ostringstream *__hidden))std::ostream::operator<<();
    LOBYTE(__p[0]) = 59;
    v30 = __p;
    v32 = 1;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v31, (uint64_t)v30, v32);
  v34 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v47, (uint64_t)"vm-page-size:", 13);
  *(_DWORD *)((char *)v34 + *(_QWORD *)(*v34 - 24) + 8) = *(_DWORD *)((_BYTE *)v34 + *(_QWORD *)(*v34 - 24) + 8) & 0xFFFFFFB5 | 2;
  v35 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v35, (uint64_t)";", 1);
  std::stringbuf::str(__p, v48);
  v36 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)__p);
  if (v39 < 0)
    operator delete(__p[0]);
  if ((char)v42 < 0)
    operator delete((void *)v40);
  if (SBYTE7(v50) < 0)
    operator delete((void *)v49);
  std::streambuf::~streambuf(v48);
  std::ios::~ios(&v52);
  return v36;
}

uint64_t RNBRemote::HandlePacket_qGDBServerVersion(RNBRemote *this, const char *a2)
{
  void (__cdecl **v3)(std::ostringstream *__hidden);
  uint64_t v4;
  std::ios_base *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  void *__p[2];
  char v11;
  void (__cdecl **v12)(std::ostringstream *__hidden);
  _QWORD v13[8];
  void *v14[2];
  __int128 v15;
  int v16;
  void (__cdecl **v17)(std::ostringstream *__hidden);

  v12 = v3;
  *(_QWORD *)((char *)&v13[-1] + (_QWORD)*(v3 - 3)) = v4;
  v5 = (std::ios_base *)((char *)&v13[-1] + (_QWORD)*(v12 - 3));
  std::ios_base::init(v5, v13);
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf(v13);
  *(_OWORD *)v14 = 0u;
  v15 = 0u;
  v16 = 16;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v12, (uint64_t)"name:debugserver;", 17);
  v6 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v12, (uint64_t)"version:", 8);
  v7 = (_QWORD *)std::ostream::operator<<(v6, 1600.2);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, (uint64_t)";", 1);
  std::stringbuf::str(__p, v13);
  v8 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)__p);
  if (v11 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v15) < 0)
    operator delete(v14[0]);
  std::streambuf::~streambuf(v13);
  std::ios::~ios(&v17);
  return v8;
}

uint64_t RNBRemote::HandlePacket_qProcessInfo(RNBRemote *this, const char *a2)
{
  _QWORD *v3;
  uint64_t v4;
  std::ios_base *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t CPUType;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  int v36;
  unint64_t v37;
  unsigned int v38;
  const char *CStr;
  const char *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  size_t v49;
  size_t v50;
  unsigned int v51;
  size_t v52;
  int v53;
  size_t v54;
  void (__cdecl **v55)(std::ostringstream *__hidden);
  _QWORD v56[8];
  __int128 v57;
  __int128 v58;
  int v59;
  _QWORD v60[19];
  void *v61[2];
  char v62;
  uint64_t v63;
  int v64;
  _DWORD v65[106];
  __int16 v66;
  unsigned int v67;
  unsigned int v68;
  int v69[4];

  v3 = v60;
  *(_QWORD *)((char *)&v56[-1] + (_QWORD)*(v55 - 3)) = v4;
  v5 = (std::ios_base *)((char *)&v56[-1] + (_QWORD)*(v55 - 3));
  std::ios_base::init(v5, v56);
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf(v56);
  v57 = 0u;
  v58 = 0u;
  v59 = 16;
  v6 = *((unsigned int *)this + 3);
  if (!(_DWORD)v6)
  {
    v62 = 3;
    strcpy((char *)v61, "E68");
    goto LABEL_43;
  }
  v45 = v60;
  v7 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v55, (uint64_t)"pid:", 4);
  *(_DWORD *)((char *)v7 + *(_QWORD *)(*v7 - 24) + 8) = *(_DWORD *)((_BYTE *)v7 + *(_QWORD *)(*v7 - 24) + 8) & 0xFFFFFFB5 | 8;
  v8 = (_QWORD *)std::ostream::operator<<(v7, v6);
  LOBYTE(v61[0]) = 59;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, (uint64_t)v61, 1);
  *(_QWORD *)v69 = 0xE00000001;
  v69[2] = 1;
  v69[3] = v6;
  v54 = 648;
  if (!sysctl(v69, 4u, v65, &v54, 0, 0))
  {
    if (v54)
    {
      v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v55, (uint64_t)"parent-pid:", 11);
      *(_DWORD *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 8) = *(_DWORD *)((_BYTE *)v9 + *(_QWORD *)(*v9 - 24) + 8) & 0xFFFFFFB5 | 8;
      v10 = (_QWORD *)std::ostream::operator<<(v9, v68);
      LOBYTE(v61[0]) = 59;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, (uint64_t)v61, 1);
      v11 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v55, (uint64_t)"real-uid:", 9);
      *(_DWORD *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 8) = *(_DWORD *)((_BYTE *)v11 + *(_QWORD *)(*v11 - 24) + 8) & 0xFFFFFFB5 | 8;
      v12 = (_QWORD *)std::ostream::operator<<(v11, v65[98]);
      LOBYTE(v61[0]) = 59;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)v61, 1);
      v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v55, (uint64_t)"real-gid:", 9);
      *(_DWORD *)((char *)v13 + *(_QWORD *)(*v13 - 24) + 8) = *(_DWORD *)((_BYTE *)v13 + *(_QWORD *)(*v13 - 24) + 8) & 0xFFFFFFB5 | 8;
      v14 = (_QWORD *)std::ostream::operator<<(v13, v65[100]);
      LOBYTE(v61[0]) = 59;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)v61, 1);
      v15 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v55, (uint64_t)"effective-uid:", 14);
      *(_DWORD *)((char *)v15 + *(_QWORD *)(*v15 - 24) + 8) = *(_DWORD *)((_BYTE *)v15 + *(_QWORD *)(*v15 - 24) + 8) & 0xFFFFFFB5 | 8;
      v16 = (_QWORD *)std::ostream::operator<<(v15, v65[105]);
      LOBYTE(v61[0]) = 59;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)v61, 1);
      if (v66 >= 1)
      {
        v17 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v55, (uint64_t)"effective-gid:", 14);
        *(_DWORD *)((char *)v17 + *(_QWORD *)(*v17 - 24) + 8) = *(_DWORD *)((_BYTE *)v17 + *(_QWORD *)(*v17 - 24)
                                                                                           + 8) & 0xFFFFFFB5 | 8;
        v18 = (_QWORD *)std::ostream::operator<<(v17, v67);
        LOBYTE(v61[0]) = 59;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)v61, 1);
      }
    }
  }
  CPUType = DNBProcessGetCPUType(v6);
  if (!(_DWORD)CPUType)
  {
    CPUType = 16777228;
    if (DNBLogEnabled())
      _DNBLog(0, (uint64_t)"Unable to get the process cpu_type, making a best guess.", v20, v21, v22, v23, v24, v25, (uint64_t)v60);
  }
  v26 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v55, (uint64_t)"cputype:", 8);
  *(_DWORD *)((char *)v26 + *(_QWORD *)(*v26 - 24) + 8) = *(_DWORD *)((_BYTE *)v26 + *(_QWORD *)(*v26 - 24) + 8) & 0xFFFFFFB5 | 8;
  v27 = (_QWORD *)std::ostream::operator<<(v26, CPUType);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)";", 1);
  if ((CPUType & 0x1000000) != 0)
    v28 = 8;
  else
    v28 = 4;
  v53 = 0;
  v52 = 4;
  v29 = sysctlbyname("hw.cpu64bit_capable", &v53, &v52, 0, 0);
  v30 = v53;
  v51 = 0;
  v50 = 4;
  if (!sysctlbyname("hw.cpusubtype", &v51, &v50, 0, 0))
  {
    if (v29 || !v30)
      goto LABEL_21;
    if ((_DWORD)CPUType == 12)
    {
      v31 = 12;
    }
    else
    {
      if ((_DWORD)CPUType != 7)
      {
LABEL_21:
        v32 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v55, (uint64_t)"cpusubtype:", 11);
        *(_DWORD *)((char *)v32 + *(_QWORD *)(*v32 - 24) + 8) = *(_DWORD *)((_BYTE *)v32 + *(_QWORD *)(*v32 - 24)
                                                                                           + 8) & 0xFFFFFFB5 | 8;
        v33 = (_QWORD *)std::ostream::operator<<(v32, v51);
        LOBYTE(v61[0]) = 59;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v33, (uint64_t)v61, 1);
        goto LABEL_22;
      }
      v31 = 3;
    }
    v51 = v31;
    goto LABEL_21;
  }
LABEL_22:
  v34 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v55, (uint64_t)"ptrsize:", 8);
  *(_DWORD *)((char *)v34 + *(_QWORD *)(*v34 - 24) + 8) = *(_DWORD *)((_BYTE *)v34 + *(_QWORD *)(*v34 - 24) + 8) & 0xFFFFFFB5 | 2;
  v35 = (_QWORD *)std::ostream::operator<<(v34, v28);
  LOBYTE(v61[0]) = 59;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v35, (uint64_t)v61, 1);
  if ((_DWORD)CPUType == 12 || (_DWORD)CPUType == 33554444 || (_DWORD)CPUType == 16777228)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v55, (uint64_t)"ostype:ios;", 11);
    v3 = v45;
  }
  else
  {
    v3 = v45;
    if ((CPUType & 0xFEFFFFFF) == 7)
    {
      v63 = 0x3100000001;
      v64 = v6;
      v49 = 0x2000;
      if (!sysctl((int *)&v63, 3u, v61, &v49, 0, 0))
      {
        DNBDataRef::DNBDataRef((DNBDataRef *)&v47, (const unsigned __int8 *)v61, v49, 0);
        v46 = 0;
        v36 = DNBDataRef::Get32((DNBDataRef *)&v47, &v46);
        if (DNBDataRef::GetCStr((DNBDataRef *)&v47, &v46, 0))
        {
          if (v47)
          {
            v37 = v46;
            if (v48 - v47 > (unint64_t)v46)
            {
              v38 = v46 + 1;
              do
              {
                if (*(_BYTE *)(v47 + v37))
                  break;
                v46 = v38;
                v37 = v38++;
              }
              while (v48 - v47 > v37);
            }
          }
          for (; v36; --v36)
            DNBDataRef::GetCStr((DNBDataRef *)&v47, &v46, 0);
          do
          {
            CStr = (const char *)DNBDataRef::GetCStr((DNBDataRef *)&v47, &v46, 0);
            if (!CStr)
              break;
            v40 = CStr;
            if (!strncmp(CStr, "SIMULATOR_UDID=", 0xFuLL))
            {
              DNBDataRef::~DNBDataRef((DNBDataRef *)&v47);
              v41 = "ostype:ios;";
              v42 = 11;
              goto LABEL_41;
            }
          }
          while (*v40);
        }
        DNBDataRef::~DNBDataRef((DNBDataRef *)&v47);
      }
    }
    v41 = "ostype:macosx;";
    v42 = 14;
LABEL_41:
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v55, (uint64_t)v41, v42);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v55, (uint64_t)"vendor:apple;", 13);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v55, (uint64_t)"endian:little;", 14);
  std::stringbuf::str(v61, v56);
LABEL_43:
  v43 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)v61);
  if (v62 < 0)
    operator delete(v61[0]);
  if (SBYTE7(v58) < 0)
    operator delete((void *)v57);
  std::streambuf::~streambuf(v56);
  std::ios::~ios(v3);
  return v43;
}

uint64_t RNBRemote::HandlePacket_qSymbol(RNBRemote *this, char *a2)
{
  const std::string::value_type *v3;
  char *v4;
  char *v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  std::string *v12;
  int v13;
  unint64_t v14;
  int v15;
  std::string *v16;
  std::string::size_type v17;
  std::string::size_type size;
  uint64_t v19;
  std::string::size_type v22;
  std::string::size_type v23;
  std::string::size_type v24;
  std::ios_base *v25;
  std::string::size_type v26;
  char v27;
  std::string::size_type v28;
  std::string *v29;
  std::string::size_type v30;
  std::string::size_type v31;
  char *v32;
  const std::locale::facet *v33;
  uint64_t v34;
  RNBRemote *v36;
  std::locale v37;
  char v38;
  std::string v39;
  _BYTE v40[48];
  void *__p[2];
  __int128 v42;
  int v43;
  void (__cdecl **v44)(std::ostringstream *__hidden);
  std::string v45;
  std::string v46;

  v3 = a2 + 8;
  v4 = strchr(a2 + 8, 58);
  memset(&v46, 0, sizeof(v46));
  memset(&v45, 0, sizeof(v45));
  if (v4 > v3)
    std::string::assign(&v45, v3, v4 - v3);
  v6 = v4[1];
  v5 = v4 + 1;
  if (!v6)
  {
    v13 = 0;
    *((_DWORD *)this + 166) = 0;
    goto LABEL_44;
  }
  v7 = 0;
  memset(&v39, 0, sizeof(v39));
  do
  {
    v8 = v5[v7];
    if ((v8 - 97) > 5)
    {
      if ((v8 - 65) > 5)
      {
        v9 = v8 - 48;
        if (v9 > 9)
          break;
      }
      else
      {
        v9 = v8 - 55;
      }
    }
    else
    {
      v9 = v8 - 87;
    }
    if (v9 == -1)
      break;
    v10 = v5[v7 + 1];
    if ((v10 - 97) > 5)
    {
      if ((v10 - 65) > 5)
      {
        v11 = v10 - 48;
        if (v11 > 9)
          break;
      }
      else
      {
        v11 = v10 - 55;
      }
    }
    else
    {
      v11 = v10 - 87;
    }
    if (v11 == -1)
      break;
    std::string::push_back(&v39, v11 + 16 * v9);
    v7 += 2;
  }
  while (v7 < 0x1FFFFFFFELL);
  v46 = v39;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v45.__r_.__value_.__l.__size_)
      goto LABEL_40;
    v12 = (std::string *)v45.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&v45.__r_.__value_.__s + 23))
      goto LABEL_40;
    v12 = &v45;
  }
  v14 = strtoull((const char *)v12, 0, 16);
  if (v14)
  {
    v15 = SHIBYTE(v46.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_26:
      if (v15 != 22)
      {
        v13 = *((_DWORD *)this + 166) + 1;
        *((_DWORD *)this + 166) = v13;
LABEL_44:
        LOBYTE(v22) = 0;
        v46.__r_.__value_.__s.__data_[0] = 0;
        *((_BYTE *)&v46.__r_.__value_.__s + 23) = 0;
        if (v13)
          goto LABEL_48;
        goto LABEL_45;
      }
      v16 = &v46;
      goto LABEL_31;
    }
  }
  else
  {
    __error();
    v15 = SHIBYTE(v46.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_26;
  }
  if (v46.__r_.__value_.__l.__size_ != 22)
    goto LABEL_40;
  v16 = (std::string *)v46.__r_.__value_.__r.__words[0];
LABEL_31:
  v17 = v16->__r_.__value_.__r.__words[0];
  size = v16->__r_.__value_.__l.__size_;
  v19 = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 6);
  if (v17 == 0x6863746170736964 && size == 0x6F5F65756575715FLL && v19 == 0x7374657366666F5FLL)
    *((_QWORD *)this + 82) = v14;
LABEL_40:
  LODWORD(v22) = SHIBYTE(v46.__r_.__value_.__r.__words[2]);
  v13 = *((_DWORD *)this + 166) + 1;
  *((_DWORD *)this + 166) = v13;
  if ((v22 & 0x80000000) == 0)
    goto LABEL_44;
  *v46.__r_.__value_.__l.__data_ = 0;
  v46.__r_.__value_.__l.__size_ = 0;
  if (*((_DWORD *)this + 166))
    goto LABEL_48;
LABEL_45:
  if (*((_QWORD *)this + 82) == -1)
  {
    std::string::assign(&v46, "dispatch_queue_offsets");
    LOBYTE(v22) = *((_BYTE *)&v46.__r_.__value_.__s + 23);
  }
  else
  {
    *((_DWORD *)this + 166) = 1;
  }
LABEL_48:
  v22 = v22;
  if ((v22 & 0x80u) != 0)
    v22 = v46.__r_.__value_.__l.__size_;
  if (v22)
  {
    v36 = this;
    v39.__r_.__value_.__r.__words[0] = v23;
    *(std::string::size_type *)((char *)v39.__r_.__value_.__r.__words + *(_QWORD *)(v23 - 24)) = v24;
    v25 = (std::ios_base *)((char *)&v39 + *(_QWORD *)(v39.__r_.__value_.__r.__words[0] - 24));
    std::ios_base::init(v25, &v39.__r_.__value_.__r.__words[1]);
    v25[1].__vftable = 0;
    v25[1].__fmtflags_ = -1;
    std::streambuf::basic_streambuf(&v39.__r_.__value_.__r.__words[1]);
    *(_OWORD *)__p = 0u;
    v42 = 0u;
    v43 = 16;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v39, (uint64_t)"qSymbol:", 8);
    v26 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
    v27 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v26 = v46.__r_.__value_.__l.__size_;
    if (v26)
    {
      v28 = 0;
      do
      {
        v31 = v39.__r_.__value_.__r.__words[0];
        v32 = (char *)&v39 + *(_QWORD *)(v39.__r_.__value_.__r.__words[0] - 24);
        if (*((_DWORD *)v32 + 36) == -1)
        {
          std::ios_base::getloc((const std::ios_base *)((char *)&v39 + *(_QWORD *)(v39.__r_.__value_.__r.__words[0] - 24)));
          v33 = std::locale::use_facet(&v37, &std::ctype<char>::id);
          ((void (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 32);
          std::locale::~locale(&v37);
          v31 = v39.__r_.__value_.__r.__words[0];
          v27 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
        }
        *((_DWORD *)v32 + 36) = 48;
        *(_DWORD *)((char *)&v39.__r_.__value_.__r.__words[1] + *(_QWORD *)(v31 - 24)) = *(_DWORD *)((_BYTE *)&v39.__r_.__value_.__r.__words[1] + *(_QWORD *)(v31 - 24)) & 0xFFFFFFB5 | 8;
        *(_DWORD *)((char *)&v39.__r_.__value_.__r.__words[1] + *(_QWORD *)(v31 - 24)) = *(_DWORD *)((_BYTE *)&v39.__r_.__value_.__r.__words[1] + *(_QWORD *)(v31 - 24)) & 0xFFFFFF4F | 0x80;
        *(_QWORD *)&v40[*(_QWORD *)(v31 - 24)] = 2;
        if (v27 >= 0)
          v29 = &v46;
        else
          v29 = (std::string *)v46.__r_.__value_.__r.__words[0];
        std::ostream::operator<<(&v39, v29->__r_.__value_.__s.__data_[v28++]);
        v30 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
        v27 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
        if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v30 = v46.__r_.__value_.__l.__size_;
      }
      while (v28 < v30);
    }
    std::stringbuf::str(&v37, &v39.__r_.__value_.__r.__words[1]);
    v34 = RNBRemote::SendPacket((uint64_t)v36, (uint64_t)&v37);
    if (v38 < 0)
      operator delete(v37.__locale_);
    *(std::string::size_type *)((char *)v39.__r_.__value_.__r.__words
    if (SBYTE7(v42) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf(&v39.__r_.__value_.__r.__words[1]);
    std::ios::~ios(&v44);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_74:
      operator delete(v45.__r_.__value_.__l.__data_);
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_75;
      return v34;
    }
  }
  else
  {
    *((_BYTE *)&v39.__r_.__value_.__s + 23) = 2;
    strcpy((char *)&v39, "OK");
    v34 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)&v39);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v39.__r_.__value_.__l.__data_);
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_74;
    }
    else if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    {
      goto LABEL_74;
    }
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
LABEL_75:
    operator delete(v46.__r_.__value_.__l.__data_);
  return v34;
}

uint64_t RNBRemote::HandlePacket_jThreadExtendedInfo(RNBRemote *this, char *a2)
{
  void (__cdecl **v4)(std::ostringstream *__hidden);
  uint64_t v5;
  std::ios_base *v6;
  RNBRemote *v7;
  int v8;
  uint64_t v9;
  char *v10;
  uint64_t integer_value_for_key_name_from_json;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  double v20;
  int v21;
  __darwin_time_t tv_sec;
  pthread_mutex_t *v23;
  __darwin_time_t v24;
  uint64_t tv_usec;
  std::string::size_type size;
  uint64_t v27;
  double v28;
  const std::string *v29;
  int v30;
  _QWORD *v31;
  size_t v32;
  int v33;
  uint64_t v34;
  _QWORD *v35;
  size_t v36;
  _BOOL4 v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  std::string *p_str;
  std::string::size_type v48;
  _QWORD *v49;
  _QWORD *v50;
  std::string *v51;
  std::string::size_type v52;
  _QWORD *v53;
  int v54;
  std::string::__raw *v55;
  std::string::pointer data;
  const std::string **v57;
  std::string::pointer v58;
  const std::string *v59;
  char v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  unsigned int *v72;
  unsigned int v73;
  _QWORD *v74;
  _QWORD *v75;
  const std::string *v76;
  std::string *v77;
  std::string::size_type v78;
  _QWORD *v79;
  unsigned int **v80;
  unsigned int **p_size;
  const std::string *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  const std::string *v90;
  std::string *v91;
  std::string::size_type v92;
  _QWORD *v93;
  void **v94;
  char v95;
  uint64_t v96;
  __n128 v97;
  __int128 v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  std::string *v102;
  std::string::size_type v103;
  _QWORD *v104;
  _QWORD *v105;
  size_t v106;
  _QWORD *v107;
  unint64_t *v108;
  unint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  std::string *p_p;
  std::string::size_type v115;
  _QWORD *v116;
  _QWORD *v117;
  std::string *v118;
  std::string::size_type v119;
  _QWORD *v120;
  uint64_t v121;
  _QWORD *v122;
  std::string *v123;
  char v124;
  std::string::size_type v125;
  unsigned int v126;
  unsigned int v127;
  uint64_t v128;
  BOOL v129;
  _QWORD *v130;
  _QWORD *v131;
  void *v132;
  unint64_t *v133;
  unint64_t v134;
  const std::string *v136;
  int v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _BYTE v142[12];
  BOOL v143;
  uint64_t v144;
  unint64_t v145;
  std::string __p;
  timeval v147;
  void *v148[2];
  int v149;
  BOOL v150;
  void (__cdecl **v151)(std::ostringstream *__hidden);
  _QWORD v152[8];
  __int128 v153;
  __int128 v154;
  int v155;
  void (__cdecl **v156)(std::ostringstream *__hidden);
  std::string __str;
  std::string v158;
  unsigned int v159;

  v151 = v4;
  *(_QWORD *)((char *)&v152[-1] + (_QWORD)*(v4 - 3)) = v5;
  v6 = (std::ios_base *)((char *)&v152[-1] + (_QWORD)*(v151 - 3));
  std::ios_base::init(v6, v152);
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf(v152);
  v153 = 0u;
  v154 = 0u;
  v7 = this;
  v155 = 16;
  v8 = *((_DWORD *)this + 3);
  if (v8)
  {
    if (!strncmp(a2, "jThreadExtendedInfo:{", 0x15uLL))
    {
      v10 = a2 + 21;
      integer_value_for_key_name_from_json = get_integer_value_for_key_name_from_json("thread", a2 + 21);
      v12 = get_integer_value_for_key_name_from_json("plo_pthread_tsd_base_address_offset", a2 + 21);
      v13 = get_integer_value_for_key_name_from_json("plo_pthread_tsd_base_offset", v10);
      v14 = get_integer_value_for_key_name_from_json("plo_pthread_tsd_entry_size", v10);
      v15 = get_integer_value_for_key_name_from_json("dti_qos_class_index", v10);
      if (integer_value_for_key_name_from_json != -1)
      {
        v139 = v15;
        v145 = integer_value_for_key_name_from_json;
        v16 = DNBGetPThreadT(v8, integer_value_for_key_name_from_json);
        v17 = v16;
        v144 = (uint64_t)v7;
        if (v14 == -1 || v13 == -1)
        {
          v19 = 0;
          *(_DWORD *)&v142[8] = 0;
          v29 = 0;
          v150 = 0;
          *(_QWORD *)v142 = v16 != -1;
          v20 = 0.0;
          v138 = -1;
        }
        else
        {
          v18 = DNBGetTSDAddressForThread(v8, integer_value_for_key_name_from_json, v12, v13, v14);
          v150 = 0;
          v19 = v18 != -1;
          v20 = 0.0;
          v138 = v18;
          if (v17 == -1 || v18 == -1)
          {
            v142[0] = v17 != -1;
            *(_QWORD *)&v142[4] = 0;
            v29 = 0;
          }
          else
          {
            v140 = v17;
            __str.__r_.__value_.__r.__words[0] = 0;
            gettimeofday((timeval *)&__str.__r_.__value_.__r.__words[1], 0);
            v21 = v8;
            DNBGetGenealogyInfoForThread(&v150, v8, integer_value_for_key_name_from_json, &v147);
            tv_sec = v147.tv_sec;
            *(_QWORD *)&v142[4] = *(_QWORD *)&v147.tv_usec;
            v23 = (pthread_mutex_t *)__str.__r_.__value_.__r.__words[0];
            if (__str.__r_.__value_.__r.__words[0])
              pthread_mutex_lock((pthread_mutex_t *)__str.__r_.__value_.__l.__data_);
            gettimeofday(&v147, 0);
            v24 = v147.tv_sec;
            tv_usec = v147.tv_usec;
            size = __str.__r_.__value_.__l.__size_;
            v27 = SLODWORD(__str.__r_.__value_.__r.__words[2]);
            if (v23)
              pthread_mutex_unlock(v23);
            v28 = (double)(tv_usec - v27 + 1000000 * (v24 - size));
            v8 = v21;
            v29 = (const std::string *)tv_sec;
            v17 = v140;
            if (v23)
            {
              if (pthread_mutex_destroy(v23) && !pthread_mutex_unlock(v23))
                pthread_mutex_destroy(v23);
              operator delete();
            }
            v19 = 1;
            v142[0] = 1;
            v20 = v28 / 1000000.0;
          }
        }
        v147 = (timeval)0;
        *(_OWORD *)v148 = 0u;
        v149 = 1065353216;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)"{", 1);
        v143 = v19;
        if (!v29 || v150)
        {
          v34 = v145;
          if (!v150)
          {
            if (!v19)
            {
              if ((v142[0] & 1) == 0)
              {
                v39 = DNBGetDispatchQueueT(v8, v145);
                if (v39 == -1)
                  goto LABEL_162;
                goto LABEL_161;
              }
              goto LABEL_39;
            }
            goto LABEL_134;
          }
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)"\"activity_query_timed_out\":true", 31);
          if (v20 != 0.0)
          {
            __str.__r_.__value_.__s.__data_[0] = 0;
            snprintf((char *)&__str, 0x40uLL, "%f", v20);
            if (__str.__r_.__value_.__s.__data_[0])
            {
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)",", 1);
              v35 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)"\"activity_query_duration\":", 26);
              v36 = strlen((const char *)&__str);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v35, (uint64_t)&__str, v36);
            }
          }
          v37 = 1;
          if (v143)
          {
LABEL_132:
            if (v37)
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)",", 1);
LABEL_134:
            v110 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)"\"tsd_address\":", 14);
            std::ostream::operator<<(v110, v138);
            if (v139 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              DNBGetRequestedQoSForThread(v8, v34, v138, v139, (uint64_t)&__str);
              if (v159 != -1)
              {
                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)",", 1);
                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)"\"requested_qos\":{", 17);
                v111 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)"\"enum_value\":", 13);
                v112 = (_QWORD *)std::ostream::operator<<(v111, v159);
                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)",", 1);
                v113 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)"\"constant_name\":\"", 17);
                json_string_quote_metachars(&__str, &__p);
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  p_p = &__p;
                else
                  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v115 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                else
                  v115 = __p.__r_.__value_.__l.__size_;
                v116 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)p_p, v115);
                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v116, (uint64_t)"\",", 2);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                v117 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)"\"printable_name\":\"", 18);
                json_string_quote_metachars(&v158, &__p);
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v118 = &__p;
                else
                  v118 = (std::string *)__p.__r_.__value_.__r.__words[0];
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v119 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                else
                  v119 = __p.__r_.__value_.__l.__size_;
                v120 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v117, (uint64_t)v118, v119);
                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v120, (uint64_t)"\"", 1);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)"}", 1);
                v34 = v145;
              }
              if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v158.__r_.__value_.__l.__data_);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
            }
            v37 = 1;
            if ((v142[0] & 1) == 0)
            {
LABEL_158:
              v121 = DNBGetDispatchQueueT(v8, v34);
              if (v121 == -1)
              {
LABEL_162:
                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)"}", 1);
                v123 = &__p;
                std::stringbuf::str(&__p, v152);
                memset(&__str, 0, sizeof(__str));
                v124 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v125 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                else
                  v125 = __p.__r_.__value_.__l.__size_;
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v123 = (std::string *)__p.__r_.__value_.__r.__words[0];
                if (v125)
                {
                  do
                  {
                    v127 = v123->__r_.__value_.__s.__data_[0];
                    v123 = (std::string *)((char *)v123 + 1);
                    v126 = v127;
                    v128 = (1 << v127) & 0x41800000000;
                    v129 = v127 > 0x2A || v128 == 0;
                    if (!v129 || v126 == 125)
                    {
                      std::string::push_back(&__str, 125);
                      LOBYTE(v126) = v126 ^ 0x20;
                    }
                    std::string::push_back(&__str, v126);
                    --v125;
                  }
                  while (v125);
                  v124 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                }
                if (v124 < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                v9 = RNBRemote::SendPacket(v144, (uint64_t)&__str);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__str.__r_.__value_.__l.__data_);
                v130 = v148[0];
                if (v148[0])
                {
                  do
                  {
                    v131 = (_QWORD *)*v130;
                    operator delete(v130);
                    v130 = v131;
                  }
                  while (v131);
                }
                v132 = (void *)v147.tv_sec;
                v147.tv_sec = 0;
                if (v132)
                  operator delete(v132);
                if (*(_QWORD *)&v142[4])
                {
                  v133 = (unint64_t *)(*(_QWORD *)&v142[4] + 8);
                  do
                    v134 = __ldaxr(v133);
                  while (__stlxr(v134 - 1, v133));
                  if (!v134)
                  {
                    (*(void (**)(_QWORD))(**(_QWORD **)&v142[4] + 16))(*(_QWORD *)&v142[4]);
                    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v142[4]);
                  }
                }
                goto LABEL_192;
              }
              v39 = v121;
              if (!v37)
              {
LABEL_161:
                v122 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)"\"dispatch_queue_t\":", 19);
                std::ostream::operator<<(v122, v39);
                goto LABEL_162;
              }
LABEL_160:
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)",", 1);
              goto LABEL_161;
            }
            goto LABEL_37;
          }
LABEL_36:
          if ((v142[0] & 1) == 0)
            goto LABEL_158;
LABEL_37:
          if (v37)
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)",", 1);
LABEL_39:
          v38 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)"\"pthread_t\":", 12);
          std::ostream::operator<<(v38, v17);
          v39 = DNBGetDispatchQueueT(v8, v34);
          if (v39 == -1)
            goto LABEL_162;
          goto LABEL_160;
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)"\"activity_query_timed_out\":false,", 33);
        v137 = v8;
        v141 = v17;
        v136 = v29;
        if (v20 == 0.0)
        {
          if (v29->__r_.__value_.__l.__size_)
          {
LABEL_50:
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)"\"activity\":{", 12);
            v40 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)"\"start\":", 8);
            v41 = (_QWORD *)std::ostream::operator<<(v40, v29->__r_.__value_.__r.__words[0]);
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v41, (uint64_t)",", 1);
            v42 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)"\"id\":", 5);
            v43 = (_QWORD *)std::ostream::operator<<(v42, v29->__r_.__value_.__l.__size_);
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v43, (uint64_t)",", 1);
            v44 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)"\"parent_id\":", 12);
            v45 = (_QWORD *)std::ostream::operator<<(v44, v29->__r_.__value_.__r.__words[2]);
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v45, (uint64_t)",", 1);
            v46 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)"\"name\":\"", 8);
            json_string_quote_metachars(v29 + 1, &__str);
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_str = &__str;
            else
              p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v48 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            else
              v48 = __str.__r_.__value_.__l.__size_;
            v49 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v46, (uint64_t)p_str, v48);
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)"\",", 2);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            v50 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)"\"reason\":\"", 10);
            json_string_quote_metachars(v29 + 2, &__str);
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v51 = &__str;
            else
              v51 = (std::string *)__str.__r_.__value_.__r.__words[0];
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v52 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            else
              v52 = __str.__r_.__value_.__l.__size_;
            v53 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v50, (uint64_t)v51, v52);
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v53, (uint64_t)"\"", 1);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            v54 = 1;
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)"}", 1);
            data = v29[3].__r_.__value_.__l.__data_;
            v55 = (std::string::__raw *)&v29[3];
            v57 = (const std::string **)&v55->__words[1];
            if ((std::string::pointer)v55->__words[1] != data)
            {
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)",", 1);
              goto LABEL_69;
            }
            v33 = 1;
LABEL_86:
            v80 = (unsigned int **)&v136[4];
            p_size = (unsigned int **)&v136[4].__r_.__value_.__l.__size_;
            if (v136[4].__r_.__value_.__l.__size_ - v136[4].__r_.__value_.__r.__words[0] != 48)
              goto LABEL_102;
            if (!v54)
              goto LABEL_89;
            goto LABEL_88;
          }
          v33 = 0;
        }
        else
        {
          __str.__r_.__value_.__s.__data_[0] = 0;
          snprintf((char *)&__str, 0x40uLL, "%f", v20);
          v30 = __str.__r_.__value_.__s.__data_[0];
          if (__str.__r_.__value_.__s.__data_[0])
          {
            v31 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)"\"activity_query_duration\":", 26);
            v32 = strlen((const char *)&__str);
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v31, (uint64_t)&__str, v32);
            v33 = 1;
            if (!v29->__r_.__value_.__l.__size_)
              goto LABEL_68;
            goto LABEL_48;
          }
          v33 = 0;
          if (v29->__r_.__value_.__l.__size_)
          {
LABEL_48:
            if (v30)
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)",", 1);
            goto LABEL_50;
          }
        }
LABEL_68:
        v58 = v29[3].__r_.__value_.__l.__data_;
        v55 = (std::string::__raw *)&v29[3];
        v57 = (const std::string **)&v55->__words[1];
        if ((std::string::pointer)v55->__words[1] != v58)
        {
LABEL_69:
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)"\"trace_messages\":[", 18);
          v59 = (const std::string *)v55->__words[0];
          if (v59 != *v57)
          {
            v60 = 0;
            do
            {
              if ((v60 & 1) != 0)
                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)",", 1);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)"{", 1);
              v61 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)"\"timestamp\":", 12);
              v62 = (_QWORD *)std::ostream::operator<<(v61, v59->__r_.__value_.__r.__words[0]);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v62, (uint64_t)",", 1);
              v63 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)"\"activity_id\":", 14);
              v64 = (_QWORD *)std::ostream::operator<<(v63, v59->__r_.__value_.__l.__size_);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v64, (uint64_t)",", 1);
              v65 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)"\"trace_id\":", 11);
              v66 = (_QWORD *)std::ostream::operator<<(v65, v59->__r_.__value_.__r.__words[2]);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v66, (uint64_t)",", 1);
              v67 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)"\"thread\":", 9);
              v68 = (_QWORD *)std::ostream::operator<<(v67, v59[1].__r_.__value_.__r.__words[0]);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v68, (uint64_t)",", 1);
              v69 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)"\"type\":", 7);
              v70 = (_QWORD *)std::ostream::operator<<(v69, v59[1].__r_.__value_.__s.__data_[8]);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v70, (uint64_t)",", 1);
              v71 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)"\"process_info_index\":", 21);
              v73 = HIDWORD(v59[1].__r_.__value_.__r.__words[1]);
              v72 = (unsigned int *)&v59[1].__r_.__value_.__r.__words[1] + 1;
              v74 = (_QWORD *)std::ostream::operator<<(v71, v73);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v74, (uint64_t)",", 1);
              std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)&v147, v72, v72);
              v75 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)"\"message\":\"", 11);
              v76 = (const std::string *)(v72 + 1);
              json_string_quote_metachars(v76, &__str);
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v77 = &__str;
              else
                v77 = (std::string *)__str.__r_.__value_.__r.__words[0];
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v78 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
              else
                v78 = __str.__r_.__value_.__l.__size_;
              v79 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v75, (uint64_t)v77, v78);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v79, (uint64_t)"\"", 1);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              v60 = 1;
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)"}", 1);
              v59 = v76 + 1;
            }
            while (v59 != *v57);
          }
          v54 = 1;
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)"]", 1);
          v80 = (unsigned int **)&v136[4];
          p_size = (unsigned int **)&v136[4].__r_.__value_.__l.__size_;
          if (v136[4].__r_.__value_.__l.__size_ - v136[4].__r_.__value_.__r.__words[0] != 48)
          {
            v33 = 1;
LABEL_101:
            v17 = v141;
LABEL_102:
            v8 = v137;
            if (v148[1])
            {
              if (v54)
                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)",", 1);
              v94 = (void **)v148[0];
              if (v148[0])
              {
                v95 = 0;
                do
                {
                  if ((v95 & 1) != 0)
                    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)",", 1);
                  v96 = *((unsigned int *)v94 + 4);
                  v97.n128_f64[0] = DNBGetGenealogyImageInfo(v137, v96, &__str);
                  v98 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
                  if (__str.__r_.__value_.__r.__words[0])
                  {
                    if ((v95 & 1) == 0)
                      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)"\"process_infos\":[", 17);
                    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)"{", 1);
                    uuid_unparse_upper((const unsigned __int8 *)(v98 + 24), (char *)&__str);
                    v99 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)"\"process_info_index\":", 21);
                    v100 = (_QWORD *)std::ostream::operator<<(v99, v96);
                    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v100, (uint64_t)",", 1);
                    v101 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)"\"image_path\":\"", 14);
                    json_string_quote_metachars((const std::string *)v98, &__p);
                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v102 = &__p;
                    else
                      v102 = (std::string *)__p.__r_.__value_.__r.__words[0];
                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v103 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                    else
                      v103 = __p.__r_.__value_.__l.__size_;
                    v104 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v101, (uint64_t)v102, v103);
                    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v104, (uint64_t)"\",", 2);
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__p.__r_.__value_.__l.__data_);
                    v105 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)"\"image_uuid\":\"", 14);
                    v106 = strlen((const char *)&__str);
                    v107 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v105, (uint64_t)&__str, v106);
                    v95 = 1;
                    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v107, (uint64_t)"\"", 1);
                    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)"}", 1);
                  }
                  if (*((_QWORD *)&v98 + 1))
                  {
                    v108 = (unint64_t *)(*((_QWORD *)&v98 + 1) + 8);
                    do
                      v109 = __ldaxr(v108);
                    while (__stlxr(v109 - 1, v108));
                    if (!v109)
                    {
                      (*(void (**)(_QWORD, __n128))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1), v97);
                      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v98 + 1));
                    }
                  }
                  v94 = (void **)*v94;
                }
                while (v94);
                v17 = v141;
                if ((v95 & 1) != 0)
                {
                  v33 = 1;
                  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)"]", 1);
                }
                else
                {
                  v33 = 1;
                }
              }
              else
              {
                v33 = 1;
              }
            }
            v37 = v33 != 0;
            v34 = v145;
            if (v143)
              goto LABEL_132;
            goto LABEL_36;
          }
LABEL_88:
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)",", 1);
LABEL_89:
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)"\"breadcrumb\":{", 14);
          v82 = (const std::string *)*v80;
          if (*v80 != *p_size)
          {
            do
            {
              v83 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)"\"breadcrumb_id\":", 16);
              v84 = (_QWORD *)std::ostream::operator<<(v83, LODWORD(v82->__r_.__value_.__l.__data_));
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v84, (uint64_t)",", 1);
              v85 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)"\"activity_id\":", 14);
              v86 = (_QWORD *)std::ostream::operator<<(v85, v82->__r_.__value_.__l.__size_);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v86, (uint64_t)",", 1);
              v87 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)"\"timestamp\":", 12);
              v88 = (_QWORD *)std::ostream::operator<<(v87, v82->__r_.__value_.__r.__words[2]);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v88, (uint64_t)",", 1);
              v89 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)"\"name\":\"", 8);
              v90 = v82 + 1;
              json_string_quote_metachars(v90, &__str);
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v91 = &__str;
              else
                v91 = (std::string *)__str.__r_.__value_.__r.__words[0];
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v92 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
              else
                v92 = __str.__r_.__value_.__l.__size_;
              v93 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v89, (uint64_t)v91, v92);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v93, (uint64_t)"\"", 1);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              v82 = v90 + 1;
            }
            while (v82 != (const std::string *)*p_size);
          }
          v33 = 1;
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v151, (uint64_t)"}", 1);
          v54 = 1;
          goto LABEL_101;
        }
        v54 = 0;
        goto LABEL_86;
      }
    }
    *((_BYTE *)&__str.__r_.__value_.__s + 23) = 2;
    strcpy((char *)&__str, "OK");
    v9 = RNBRemote::SendPacket((uint64_t)v7, (uint64_t)&__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  else
  {
    *((_BYTE *)&__str.__r_.__value_.__s + 23) = 3;
    strcpy((char *)&__str, "E81");
    v9 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)&__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
LABEL_192:
  if (SBYTE7(v154) < 0)
    operator delete((void *)v153);
  std::streambuf::~streambuf(v152);
  std::ios::~ios(&v156);
  return v9;
}

void *RNBRemote::HandlePacket_jGetLoadedDynamicLibrariesInfos(RNBRemote *this, const char *__s1)
{
  void *v2;
  uint64_t v4;
  char *v6;
  std::__shared_weak_count *v7;
  void *v8;
  void *v9;
  std::ios_base *v10;
  int v11;
  int v12;
  void *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *__p[2];
  char v18;
  void *v19;
  void (__cdecl **v20)(std::stringbuf *__hidden);
  char v21;
  void *v22[2];
  __int128 v23;
  int v24;
  void (__cdecl **v25)(std::ostringstream *__hidden);
  BOOL v26;
  BOOL v27;
  void *v28;
  void *v29;
  uint64_t v30;

  v4 = *((unsigned int *)this + 3);
  if (!(_DWORD)v4)
  {
    v21 = 3;
    LODWORD(v19) = 3356741;
    goto LABEL_33;
  }
  if (strncmp(__s1, "jGetLoadedDynamicLibrariesInfos:{", 0x21uLL))
  {
LABEL_32:
    v21 = 2;
    strcpy((char *)&v19, "OK");
LABEL_33:
    v2 = (void *)RNBRemote::SendPacket((uint64_t)this, (uint64_t)&v19);
    if (v21 < 0)
      operator delete(v19);
    return v2;
  }
  v6 = (char *)(__s1 + 33);
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v27 = 0;
  v26 = 1;
  get_BOOLean_value_for_key_name_from_json("report_load_commands", v6, &v26);
  if (get_BOOLean_value_for_key_name_from_json("fetch_all_solibs", v6, &v27) && v27)
  {
    DNBGetAllLoadedLibrariesInfos(v4, v26, &v19);
    v2 = v19;
    v7 = (std::__shared_weak_count *)v20;
    if (!v19)
      goto LABEL_24;
  }
  else
  {
    if (!get_array_of_ints_value_for_key_name_from_json("solib_addresses", v6, (uint64_t)&v28))
    {
      v7 = 0;
      goto LABEL_24;
    }
    DNBGetLibrariesInfoForAddresses(v4, &v28, &v19);
    v2 = v19;
    v7 = (std::__shared_weak_count *)v20;
    if (!v19)
      goto LABEL_24;
  }
  v19 = v8;
  *(void **)((char *)&v19 + *((_QWORD *)v8 - 3)) = v9;
  v10 = (std::ios_base *)((char *)&v19 + *((_QWORD *)v19 - 3));
  std::ios_base::init(v10, &v20);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf(&v20);
  *(_OWORD *)v22 = 0u;
  v23 = 0u;
  v24 = 16;
  (*(void (**)(void *, void **))(*(_QWORD *)v2 + 40))(v2, &v19);
  (*(void (**)(void *))(*(_QWORD *)v2 + 24))(v2);
  std::stringbuf::str(__p, &v20);
  if (v18 < 0)
  {
    v2 = __p[1];
    operator delete(__p[0]);
    if (v2)
      goto LABEL_12;
  }
  else if (v18)
  {
LABEL_12:
    std::stringbuf::str(__p, &v20);
    v2 = (void *)RNBRemote::SendPacket((uint64_t)this, (uint64_t)__p);
    if (v18 < 0)
      operator delete(__p[0]);
    v11 = 0;
    goto LABEL_21;
  }
  v18 = 3;
  LODWORD(__p[0]) = 3422277;
  RNBRemote::SendPacket((uint64_t)this, (uint64_t)__p);
  if (v18 < 0)
    operator delete(__p[0]);
  v11 = 1;
LABEL_21:
  if (SBYTE7(v23) < 0)
    operator delete(v22[0]);
  std::streambuf::~streambuf(&v20);
  std::ios::~ios(&v25);
  if (!v11)
  {
    v12 = 0;
    v13 = v28;
    if (!v28)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_24:
  v12 = 1;
  v13 = v28;
  if (v28)
  {
LABEL_25:
    v29 = v13;
    operator delete(v13);
  }
LABEL_26:
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v12)
    goto LABEL_32;
  return v2;
}

std::__shared_weak_count *RNBRemote::HandlePacket_jThreadsInfo(RNBRemote *this, const char *a2)
{
  void (__cdecl **v2)(std::ostringstream *__hidden);
  void *v3;
  std::ios_base *v4;
  std::ios_base *v5;
  std::__shared_weak_count *v6;
  std::ios_base *v7;
  int v8;
  void *v9;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void (__cdecl **v14)(std::ostringstream *__hidden);
  uint64_t v15;
  void *__p[2];
  char v19;
  void *v20;
  void (__cdecl **v21)(std::stringbuf *__hidden);
  char v22;
  void *v23[2];
  __int128 v24;
  int v25;
  void (__cdecl **v26)(std::ostringstream *__hidden);
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  void (__cdecl **v29)(std::ostringstream *__hidden);
  _QWORD v30[8];
  __int128 v31;
  __int128 v32;
  int v33;
  void (__cdecl **v34)(std::ostringstream *__hidden);
  void (__cdecl **v35)(std::ostringstream *__hidden);
  _QWORD v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  void (__cdecl **v40)(std::ostringstream *__hidden);

  v35 = v2;
  *(_QWORD *)((char *)&v36[-1] + (_QWORD)*(v2 - 3)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + (_QWORD)*(v35 - 3));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf(v36);
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v29 = v2;
  *(_QWORD *)((char *)&v30[-1] + (_QWORD)*(v2 - 3)) = v3;
  v5 = (std::ios_base *)((char *)&v30[-1] + (_QWORD)*(v29 - 3));
  std::ios_base::init(v5, v30);
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf(v30);
  v31 = 0u;
  v32 = 0u;
  v33 = 16;
  if (*((_DWORD *)this + 3))
  {
    RNBRemote::GetJSONThreadsInfo((uint64_t)this, 0, &v27);
    v6 = v27;
    if (!v27)
      goto LABEL_14;
    v20 = v2;
    *(void **)((char *)&v20 + (_QWORD)*(v2 - 3)) = v3;
    v7 = (std::ios_base *)((char *)&v20 + *((_QWORD *)v20 - 3));
    std::ios_base::init(v7, &v21);
    v7[1].__vftable = 0;
    v7[1].__fmtflags_ = -1;
    std::streambuf::basic_streambuf(&v21);
    *(_OWORD *)v23 = 0u;
    v24 = 0u;
    v25 = 16;
    ((void (*)(std::__shared_weak_count *, void **))v6->__vftable[1].~__shared_weak_count)(v6, &v20);
    ((void (*)(std::__shared_weak_count *))v6->__get_deleter)(v6);
    std::stringbuf::str(__p, &v21);
    if (v19 < 0)
    {
      v9 = __p[1];
      operator delete(__p[0]);
      if (v9)
        goto LABEL_5;
    }
    else if (v19)
    {
LABEL_5:
      std::stringbuf::str(__p, &v21);
      v6 = (std::__shared_weak_count *)RNBRemote::SendPacket((uint64_t)this, (uint64_t)__p);
      if (v19 < 0)
        operator delete(__p[0]);
      v8 = 0;
LABEL_11:
      if (SBYTE7(v24) < 0)
        operator delete(v23[0]);
      std::streambuf::~streambuf(&v21);
      std::ios::~ios(&v26);
      if (!v8)
      {
        v10 = 0;
        v11 = v28;
        if (!v28)
          goto LABEL_20;
        goto LABEL_17;
      }
LABEL_14:
      v10 = 1;
      v11 = v28;
      if (!v28)
      {
LABEL_20:
        if (!v10)
          goto LABEL_24;
        goto LABEL_21;
      }
LABEL_17:
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
        if (!v10)
          goto LABEL_24;
        goto LABEL_21;
      }
      goto LABEL_20;
    }
    v8 = 1;
    goto LABEL_11;
  }
LABEL_21:
  v22 = 3;
  LODWORD(v20) = 3487813;
  v6 = (std::__shared_weak_count *)RNBRemote::SendPacket((uint64_t)this, (uint64_t)&v20);
  if (v22 < 0)
    operator delete(v20);
LABEL_24:
  if (SBYTE7(v32) < 0)
    operator delete((void *)v31);
  std::streambuf::~streambuf(v30);
  std::ios::~ios(&v34);
  v35 = v14;
  *(_QWORD *)((char *)&v36[-1] + (_QWORD)*(v14 - 3)) = v15;
  if (SBYTE7(v38) < 0)
    operator delete((void *)v37);
  std::streambuf::~streambuf(v36);
  std::ios::~ios(&v40);
  return v6;
}

std::ios_base *RNBRemote::HandlePacket_jGetSharedCacheInfo(RNBRemote *this, const char *__s1)
{
  std::ios_base *v2;
  uint64_t v4;
  void *v5;
  void *v6;
  int v7;
  int v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p[2];
  char v14;
  void *v15;
  void (__cdecl **v16)(std::stringbuf *__hidden);
  char v17;
  void *v18[2];
  __int128 v19;
  int v20;
  void (__cdecl **v21)(std::ostringstream *__hidden);
  uint64_t v22;
  std::__shared_weak_count *v23;

  v4 = *((unsigned int *)this + 3);
  if (!(_DWORD)v4)
  {
    v17 = 3;
    LODWORD(v15) = 3487813;
    goto LABEL_27;
  }
  if (!strncmp(__s1, "jGetSharedCacheInfo:{", 0x15uLL))
  {
    DNBGetSharedCacheInfo(v4, &v22);
    if (!v22)
      goto LABEL_18;
    v15 = v5;
    *(void **)((char *)&v15 + *((_QWORD *)v5 - 3)) = v6;
    v2 = (std::ios_base *)((char *)&v15 + *((_QWORD *)v15 - 3));
    std::ios_base::init(v2, &v16);
    v2[1].__vftable = 0;
    v2[1].__fmtflags_ = -1;
    std::streambuf::basic_streambuf(&v16);
    *(_OWORD *)v18 = 0u;
    v19 = 0u;
    v20 = 16;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v22 + 40))(v22, &v15);
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
    std::stringbuf::str(__p, &v16);
    if (v14 < 0)
    {
      v2 = (std::ios_base *)__p[1];
      operator delete(__p[0]);
      if (v2)
        goto LABEL_6;
    }
    else if (v14)
    {
LABEL_6:
      std::stringbuf::str(__p, &v16);
      v2 = (std::ios_base *)RNBRemote::SendPacket((uint64_t)this, (uint64_t)__p);
      if (v14 < 0)
        operator delete(__p[0]);
      v7 = 0;
      goto LABEL_15;
    }
    v14 = 3;
    LODWORD(__p[0]) = 3553349;
    RNBRemote::SendPacket((uint64_t)this, (uint64_t)__p);
    if (v14 < 0)
      operator delete(__p[0]);
    v7 = 1;
LABEL_15:
    if (SBYTE7(v19) < 0)
      operator delete(v18[0]);
    std::streambuf::~streambuf(&v16);
    std::ios::~ios(&v21);
    if (!v7)
    {
      v8 = 0;
      v9 = v23;
      if (!v23)
        goto LABEL_25;
LABEL_21:
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
LABEL_25:
      if (!v8)
        return v2;
      goto LABEL_26;
    }
LABEL_18:
    v8 = 1;
    v9 = v23;
    if (!v23)
      goto LABEL_25;
    goto LABEL_21;
  }
LABEL_26:
  v17 = 2;
  strcpy((char *)&v15, "OK");
LABEL_27:
  v2 = (std::ios_base *)RNBRemote::SendPacket((uint64_t)this, (uint64_t)&v15);
  if (v17 < 0)
    operator delete(v15);
  return v2;
}

uint64_t RNBRemote::HandlePacket_QStartNoAckMode(RNBRemote *this, const char *a2)
{
  uint64_t v3;
  void *__p[2];
  char v6;

  v6 = 2;
  strcpy((char *)__p, "OK");
  v3 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)__p);
  if (v6 < 0)
    operator delete(__p[0]);
  *((_BYTE *)this + 781) = 1;
  return v3;
}

uint64_t RNBRemote::HandlePacket_QThreadSuffixSupported(RNBRemote *this, const char *a2)
{
  uint64_t v2;
  void *__p[2];
  char v5;

  *((_BYTE *)this + 782) = 1;
  v5 = 2;
  strcpy((char *)__p, "OK");
  v2 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

uint64_t RNBRemote::HandlePacket_QSetLogging(RNBRemote *this, char *a2)
{
  uint64_t v3;
  void *__p[2];
  char v6;

  set_logging(a2 + 12);
  v6 = 2;
  strcpy((char *)__p, "OK");
  v3 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)__p);
  if (v6 < 0)
    operator delete(__p[0]);
  return v3;
}

uint64_t RNBRemote::HandlePacket_QSetIgnoredExceptions(RNBRemote *this, const char *a2)
{
  int v3;
  char *v4;
  _BOOL4 v5;
  int v6;
  char *v7;
  char *v8;
  size_t v9;
  _BYTE *p_p;
  uint64_t v11;
  uint64_t v12;
  MachException *v13;
  uint64_t v14;
  void *__p;
  size_t v17;
  unint64_t v18;

  if (!*((_DWORD *)this + 3))
  {
    v4 = (char *)(a2 + 22);
    while (1)
    {
      v7 = strchr(v4, 124);
      if (!v7)
      {
        if (!RNBContext::AddIgnoredException(this, (MachException *)v4))
          goto LABEL_29;
        goto LABEL_27;
      }
      v8 = v7;
      v9 = v7 - v4;
      if ((unint64_t)(v7 - v4) >= 0x7FFFFFFFFFFFFFF8)
        abort();
      if (v9 >= 0x17)
        break;
      HIBYTE(v18) = (_BYTE)v7 - (_BYTE)v4;
      p_p = &__p;
      if (v7 != v4)
        goto LABEL_15;
LABEL_16:
      p_p[v9] = 0;
      if ((SHIBYTE(v18) & 0x80000000) == 0)
      {
        if (!HIBYTE(v18))
          goto LABEL_29;
        v13 = (MachException *)&__p;
LABEL_21:
        v5 = RNBContext::AddIgnoredException(this, v13);
        if (v5)
        {
          v4 = v8 + 1;
          v6 = 0;
        }
        else
        {
          v6 = 3;
        }
        if ((SHIBYTE(v18) & 0x80000000) == 0)
          goto LABEL_6;
        goto LABEL_5;
      }
      if (v17)
      {
        v13 = (MachException *)__p;
        goto LABEL_21;
      }
      v5 = 0;
      v6 = 3;
LABEL_5:
      operator delete(__p);
LABEL_6:
      if (v6)
      {
        if (!v5)
        {
LABEL_29:
          HIBYTE(v18) = 3;
          v3 = 3552069;
          goto LABEL_30;
        }
LABEL_27:
        HIBYTE(v18) = 2;
        strcpy((char *)&__p, "OK");
        goto LABEL_31;
      }
    }
    v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v11 = v9 | 7;
    v12 = v11 + 1;
    p_p = operator new(v11 + 1);
    v17 = v9;
    v18 = v12 | 0x8000000000000000;
    __p = p_p;
LABEL_15:
    memmove(p_p, v4, v9);
    goto LABEL_16;
  }
  HIBYTE(v18) = 3;
  v3 = 3486533;
LABEL_30:
  LODWORD(__p) = v3;
LABEL_31:
  v14 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)&__p);
  if (SHIBYTE(v18) < 0)
    operator delete(__p);
  return v14;
}

uint64_t RNBRemote::HandlePacket_QSetMaxPacketSize(RNBRemote *this, const char *a2)
{
  const char *v3;
  int v4;
  const char *v5;
  BOOL v6;
  uint64_t v7;
  void *__p[2];
  char v10;

  v3 = a2 + 18;
  *__error() = 0;
  v4 = strtoul(v3, 0, 16);
  if (*__error())
    v6 = v4 == 0;
  else
    v6 = 0;
  if (v6)
    return RNBRemote::HandlePacket_ILLFORMED(this, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", 2438, v3, v5);
  *((_DWORD *)this + 194) = v4 - 5;
  v10 = 2;
  strcpy((char *)__p, "OK");
  v7 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)__p);
  if (v10 < 0)
    operator delete(__p[0]);
  return v7;
}

uint64_t RNBRemote::HandlePacket_QSetMaxPayloadSize(RNBRemote *this, const char *a2)
{
  const char *v3;
  int v4;
  const char *v5;
  BOOL v6;
  uint64_t v7;
  void *__p[2];
  char v10;

  v3 = a2 + 19;
  *__error() = 0;
  v4 = strtoul(v3, 0, 16);
  if (*__error())
    v6 = v4 == 0;
  else
    v6 = 0;
  if (v6)
    return RNBRemote::HandlePacket_ILLFORMED(this, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", 2424, v3, v5);
  *((_DWORD *)this + 194) = v4;
  v10 = 2;
  strcpy((char *)__p, "OK");
  v7 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)__p);
  if (v10 < 0)
    operator delete(__p[0]);
  return v7;
}

uint64_t RNBRemote::HandlePacket_QEnvironment(RNBRemote *this, const char *a2)
{
  pthread_mutex_t *v4;
  int tv_sec;
  __darwin_suseconds_t tv_usec;
  uint64_t v7;
  int v8;
  uint64_t v9;
  timeval v11;
  char v12;

  if (DNBLogEnabledForAny(0x100000))
  {
    v4 = (pthread_mutex_t *)*((_QWORD *)this + 61);
    if (v4)
      pthread_mutex_lock(*((pthread_mutex_t **)this + 61));
    gettimeofday(&v11, 0);
    tv_sec = v11.tv_sec;
    tv_usec = v11.tv_usec;
    v7 = *((_QWORD *)this + 62);
    v8 = *((_DWORD *)this + 126);
    *((timeval *)this + 31) = v11;
    if (v4)
      pthread_mutex_unlock(v4);
    _DNBLogThreaded("%8u RNBRemote::%s Handling QEnvironment: \"%s\"", tv_usec - v8 + 1000000 * (tv_sec - v7), "HandlePacket_QEnvironment", a2);
  }
  RNBContext::PushEnvironment(this, a2 + 13);
  v12 = 2;
  strcpy((char *)&v11, "OK");
  v9 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)&v11);
  if (v12 < 0)
    operator delete((void *)v11.tv_sec);
  return v9;
}

uint64_t RNBRemote::HandlePacket_QEnvironmentHexEncoded(RNBRemote *this, const char *a2)
{
  const char *v4;
  pthread_mutex_t *v5;
  int data;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  const char *v11;
  const char *v12;
  char v13;
  int v14;
  BOOL v15;
  std::string *v16;
  RNBRemote *v17;
  int v18;
  uint64_t v19;
  char __str[8];
  char v22;
  std::string v23;

  if (DNBLogEnabledForAny(0x100000))
  {
    v5 = (pthread_mutex_t *)*((_QWORD *)this + 61);
    if (v5)
      pthread_mutex_lock(*((pthread_mutex_t **)this + 61));
    gettimeofday((timeval *)&v23, 0);
    data = (int)v23.__r_.__value_.__l.__data_;
    v7 = v23.__r_.__value_.__r.__words[1];
    v8 = *((_QWORD *)this + 62);
    v9 = *((_DWORD *)this + 126);
    *((_OWORD *)this + 31) = *(_OWORD *)&v23.__r_.__value_.__l.__data_;
    if (v5)
      pthread_mutex_unlock(v5);
    _DNBLogThreaded("%8u RNBRemote::%s Handling QEnvironmentHexEncoded: \"%s\"", v7 - v9 + 1000000 * (data - v8), "HandlePacket_QEnvironmentHexEncoded", a2);
  }
  v11 = a2 + 23;
  v10 = *((unsigned __int8 *)a2 + 23);
  memset(&v23, 0, sizeof(v23));
  if (v10)
  {
    v12 = a2 + 25;
    do
    {
      v13 = *(v12 - 1);
      if (!v13)
      {
        v17 = this;
        v18 = 2488;
        goto LABEL_20;
      }
      __str[0] = v10;
      __str[1] = v13;
      __str[2] = 0;
      *__error() = 0;
      v14 = strtoul(__str, 0, 16);
      if (*__error())
        v15 = v14 == 0;
      else
        v15 = 0;
      if (v15)
      {
        v17 = this;
        v18 = 2499;
LABEL_20:
        v19 = RNBRemote::HandlePacket_ILLFORMED(v17, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", v18, v11, v4);
        if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return v19;
        goto LABEL_27;
      }
      std::string::push_back(&v23, v14);
      v10 = *(unsigned __int8 *)v12;
      v12 += 2;
    }
    while (v10);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!v23.__r_.__value_.__l.__size_)
        goto LABEL_25;
      v16 = (std::string *)v23.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (!*((_BYTE *)&v23.__r_.__value_.__s + 23))
        goto LABEL_25;
      v16 = &v23;
    }
    RNBContext::PushEnvironment(this, (const char *)v16);
  }
LABEL_25:
  v22 = 2;
  strcpy(__str, "OK");
  v19 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)__str);
  if (v22 < 0)
  {
    operator delete(*(void **)__str);
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v19;
    goto LABEL_27;
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
LABEL_27:
    operator delete(v23.__r_.__value_.__l.__data_);
  return v19;
}

uint64_t RNBRemote::HandlePacket_QLaunchArch(RNBRemote *this, const char *a2)
{
  uint64_t v3;
  void *__p[2];
  char v6;

  if (DNBSetArchitecture(a2 + 12))
  {
    v6 = 2;
    strcpy((char *)__p, "OK");
  }
  else
  {
    v6 = 3;
    LODWORD(__p[0]) = 3356229;
  }
  v3 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)__p);
  if (v6 < 0)
    operator delete(__p[0]);
  return v3;
}

uint64_t RNBRemote::HandlePacket_QSetDisableASLR(RNBRemote *this, const char *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  void *__p[2];
  char v7;

  v2 = a2[16];
  if (v2 == 48)
  {
    v3 = 0;
    goto LABEL_5;
  }
  if (v2 == 49)
  {
    v3 = 1;
LABEL_5:
    g_disable_aslr = v3;
    v7 = 2;
    strcpy((char *)__p, "OK");
    goto LABEL_7;
  }
  v7 = 3;
  LODWORD(__p[0]) = 3552581;
LABEL_7:
  v4 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  return v4;
}

uint64_t RNBRemote::HandlePacket_QSetSTDIO(RNBRemote *this, const char *a2)
{
  uint64_t v3;
  int Char;
  int v5;
  void *v7[2];
  char v8;
  void *__p[2];
  char v10;
  uint64_t v11;

  if (*((_DWORD *)this + 3))
  {
    v10 = 3;
    LODWORD(__p[0]) = 3683653;
    v3 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)__p);
    if (v10 < 0)
      operator delete(__p[0]);
    return v3;
  }
  StdStringExtractor::StdStringExtractor((StdStringExtractor *)__p, a2);
  v11 = 7;
  Char = StdStringExtractor::GetChar((StdStringExtractor *)__p, 0);
  while (StdStringExtractor::GetChar((StdStringExtractor *)__p, 0) != 58)
    ;
  switch(Char)
  {
    case 'E':
      StdStringExtractor::GetHexByteString((uint64_t)__p, (std::string *)((char *)this + 64));
      v5 = *((char *)this + 87);
      if (v5 < 0)
      {
        if (!*((_QWORD *)this + 9))
          break;
        goto LABEL_17;
      }
      goto LABEL_16;
    case 'O':
      StdStringExtractor::GetHexByteString((uint64_t)__p, (std::string *)((char *)this + 40));
      v5 = *((char *)this + 63);
      if (v5 < 0)
      {
        if (!*((_QWORD *)this + 6))
          break;
        goto LABEL_17;
      }
LABEL_16:
      if (!(_BYTE)v5)
        break;
      goto LABEL_17;
    case 'I':
      StdStringExtractor::GetHexByteString((uint64_t)__p, (std::string *)((char *)this + 16));
      if (*((char *)this + 39) < 0)
      {
        if (!*((_QWORD *)this + 3))
          break;
      }
      else if (!*((_BYTE *)this + 39))
      {
        break;
      }
LABEL_17:
      v8 = 2;
      strcpy((char *)v7, "OK");
      goto LABEL_18;
  }
  v8 = 3;
  LODWORD(v7[0]) = 3618117;
LABEL_18:
  v3 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)v7);
  if (v8 < 0)
    operator delete(v7[0]);
  StdStringExtractor::~StdStringExtractor(__p);
  return v3;
}

uint64_t RNBRemote::HandlePacket_QSetWorkingDir(RNBRemote *this, const char *a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  int v7;
  void *v9[2];
  char v10;
  stat __p;
  void *v12[5];

  if (!*((_DWORD *)this + 3))
  {
    StdStringExtractor::StdStringExtractor((StdStringExtractor *)v12, a2 + 15);
    if (!StdStringExtractor::GetHexByteString(v4, (std::string *)((char *)this + 88)))
    {
      HIBYTE(__p.st_gid) = 3;
      __p.st_dev = 3749189;
      v3 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)&__p);
      if (SHIBYTE(__p.st_gid) < 0)
      {
        v6 = *(void **)&__p.st_dev;
LABEL_28:
        operator delete(v6);
      }
LABEL_29:
      StdStringExtractor::~StdStringExtractor(v12);
      return v3;
    }
    if (*((char *)this + 111) < 0)
    {
      if (*((_QWORD *)this + 12))
        v5 = (const char *)*((_QWORD *)this + 11);
      else
        v5 = 0;
    }
    else if (*((_BYTE *)this + 111))
    {
      v5 = (char *)this + 88;
    }
    else
    {
      v5 = 0;
    }
    if (stat(v5, &__p) == -1)
    {
      if (*((char *)this + 111) < 0)
      {
        **((_BYTE **)this + 11) = 0;
        *((_QWORD *)this + 12) = 0;
      }
      else
      {
        *((_BYTE *)this + 88) = 0;
        *((_BYTE *)this + 111) = 0;
      }
      v10 = 3;
      v7 = 3225157;
    }
    else
    {
      if ((__p.st_mode & 0xF000) == 0x4000)
      {
        v10 = 2;
        strcpy((char *)v9, "OK");
        goto LABEL_26;
      }
      if (*((char *)this + 111) < 0)
      {
        **((_BYTE **)this + 11) = 0;
        *((_QWORD *)this + 12) = 0;
      }
      else
      {
        *((_BYTE *)this + 88) = 0;
        *((_BYTE *)this + 111) = 0;
      }
      v10 = 3;
      v7 = 3290693;
    }
    LODWORD(v9[0]) = v7;
LABEL_26:
    v3 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)v9);
    if (v10 < 0)
    {
      v6 = v9[0];
      goto LABEL_28;
    }
    goto LABEL_29;
  }
  HIBYTE(__p.st_gid) = 3;
  __p.st_dev = 3159621;
  v3 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)&__p);
  if (SHIBYTE(__p.st_gid) < 0)
    operator delete(*(void **)&__p.st_dev);
  return v3;
}

uint64_t RNBRemote::HandlePacket_QListThreadsInStopReply(RNBRemote *this, const char *a2)
{
  uint64_t v3;
  void *__p[2];
  char v6;

  v6 = 2;
  strcpy((char *)__p, "OK");
  v3 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)__p);
  if (v6 < 0)
    operator delete(__p[0]);
  *((_BYTE *)this + 783) = 1;
  return v3;
}

uint64_t RNBRemote::HandlePacket_QSyncThreadState(RNBRemote *this, const char *a2)
{
  const char *v4;
  unint64_t v5;
  const char *v6;
  BOOL v7;
  uint64_t v8;
  void *__p[2];
  char v11;

  if (!*((_DWORD *)this + 3))
    goto LABEL_7;
  *__error() = 0;
  v4 = a2 + 17;
  v5 = strtoul(v4, 0, 16);
  if (*__error())
    v7 = v5 == 0;
  else
    v7 = 0;
  if (v7)
    return RNBRemote::HandlePacket_ILLFORMED(this, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", 2363, v4, v6);
  if (!DNBProcessSyncThreadState(*((_DWORD *)this + 3), v5))
  {
    v11 = 3;
    LODWORD(__p[0]) = 3225157;
  }
  else
  {
LABEL_7:
    v11 = 2;
    strcpy((char *)__p, "OK");
  }
  v8 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)__p);
  if (v11 < 0)
    operator delete(__p[0]);
  return v8;
}

uint64_t RNBRemote::HandlePacket_AllocateMemory(RNBRemote *this, const char *a2)
{
  StdStringExtractor *v3;
  unint64_t HexMaxU64;
  mach_vm_size_t v5;
  int Char;
  unsigned int i;
  mach_vm_address_t v8;
  mach_vm_address_t v9;
  void *v10;
  void *v11;
  std::ios_base *v12;
  _QWORD *v13;
  char *v14;
  const std::locale::facet *v15;
  uint64_t v16;
  int v17;
  std::locale v19;
  char v20;
  void *v21;
  void (__cdecl **v22)(std::stringbuf *__hidden);
  char v23;
  void *__p[2];
  __int128 v25;
  int v26;
  void (__cdecl **v27)(std::ostringstream *__hidden);
  void *v28[5];

  StdStringExtractor::StdStringExtractor((StdStringExtractor *)v28, a2);
  v28[4] = (void *)2;
  HexMaxU64 = StdStringExtractor::GetHexMaxU64(v3, 0, 0);
  if (!HexMaxU64)
    goto LABEL_19;
  v5 = HexMaxU64;
  if (StdStringExtractor::GetChar((StdStringExtractor *)v28, 0) != 44)
    goto LABEL_19;
  Char = StdStringExtractor::GetChar((StdStringExtractor *)v28, 0);
  for (i = 0; Char; Char = StdStringExtractor::GetChar((StdStringExtractor *)v28, 0))
  {
    if (Char == 114)
    {
      v17 = 2;
    }
    else if ((char)Char == 120)
    {
      v17 = 4;
    }
    else
    {
      if ((char)Char != 119)
        goto LABEL_19;
      v17 = 1;
    }
    i |= v17;
  }
  v8 = DNBProcessMemoryAllocate(*((_DWORD *)this + 3), v5, i);
  if (v8 != -1)
  {
    v9 = v8;
    v21 = v10;
    *(void **)((char *)&v21 + *((_QWORD *)v10 - 3)) = v11;
    v12 = (std::ios_base *)((char *)&v21 + *((_QWORD *)v21 - 3));
    std::ios_base::init(v12, &v22);
    v12[1].__vftable = 0;
    v12[1].__fmtflags_ = -1;
    std::streambuf::basic_streambuf(&v22);
    *(_OWORD *)__p = 0u;
    v25 = 0u;
    v26 = 16;
    v13 = v21;
    v14 = (char *)&v21 + *((_QWORD *)v21 - 3);
    if (*((_DWORD *)v14 + 36) == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)&v21 + *((_QWORD *)v21 - 3)));
      v15 = std::locale::use_facet(&v19, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 32);
      std::locale::~locale(&v19);
      v13 = v21;
    }
    *((_DWORD *)v14 + 36) = 48;
    *(_DWORD *)((char *)&v21 + *(v13 - 3) + 8) = *(_DWORD *)((_BYTE *)&v21 + *(v13 - 3) + 8) & 0xFFFFFFB5 | 8;
    *(_DWORD *)((char *)&v21 + *(v13 - 3) + 8) = *(_DWORD *)((_BYTE *)&v21 + *(v13 - 3) + 8) & 0xFFFFFF4F | 0x80;
    std::ostream::operator<<(&v21, v9);
    std::stringbuf::str(&v19, &v22);
    v16 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)&v19);
    if (v20 < 0)
      operator delete(v19.__locale_);
    if (SBYTE7(v25) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf(&v22);
    std::ios::~ios(&v27);
  }
  else
  {
LABEL_19:
    v23 = 3;
    LODWORD(v21) = 3355973;
    v16 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)&v21);
    if (v23 < 0)
      operator delete(v21);
  }
  StdStringExtractor::~StdStringExtractor(v28);
  return v16;
}

uint64_t RNBRemote::HandlePacket_DeallocateMemory(RNBRemote *this, const char *a2)
{
  mach_vm_address_t HexMaxU64;
  uint64_t v4;
  void *__p[2];
  char v7;
  void *v8[5];

  StdStringExtractor::StdStringExtractor((StdStringExtractor *)v8, a2);
  v8[4] = (void *)2;
  HexMaxU64 = StdStringExtractor::GetHexMaxU64((StdStringExtractor *)v8, 0, -1);
  if (HexMaxU64 == -1 || !DNBProcessMemoryDeallocate(*((_DWORD *)this + 3), HexMaxU64))
  {
    v7 = 3;
    LODWORD(__p[0]) = 3421509;
  }
  else
  {
    v7 = 2;
    strcpy((char *)__p, "OK");
  }
  v4 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  StdStringExtractor::~StdStringExtractor(v8);
  return v4;
}

uint64_t RNBRemote::HandlePacket_SaveRegisterState(RNBRemote *this, char *__s1, uint64_t a3, uint64_t a4, const char *a5)
{
  int v7;
  char *v8;
  unint64_t CurrentThread;
  int v10;
  size_t v11;
  size_t v12;
  _QWORD *v13;
  RNBRemote *v14;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD __dst[2];
  unint64_t v22;
  char __str[23];
  char v24;

  v7 = *((_DWORD *)this + 3);
  if (*((_BYTE *)this + 782))
  {
    if (!__s1)
      goto LABEL_14;
    v8 = strstr(__s1, "thread:");
    if (!v8)
      goto LABEL_14;
    CurrentThread = strtoul(v8 + 7, 0, 16);
    if (!CurrentThread)
    {
LABEL_13:
      if (!*((_BYTE *)this + 782))
      {
        v14 = this;
        v15 = 3473;
        return RNBRemote::HandlePacket_ILLFORMED(v14, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", v15, __s1, a5);
      }
LABEL_14:
      v14 = this;
      v15 = 3470;
      return RNBRemote::HandlePacket_ILLFORMED(v14, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", v15, __s1, a5);
    }
  }
  else
  {
    CurrentThread = *((_QWORD *)this + 68);
    if (CurrentThread + 1 <= 1)
    {
      CurrentThread = DNBProcessGetCurrentThread(*((_DWORD *)this + 3));
      if (!CurrentThread)
        goto LABEL_13;
    }
  }
  v10 = DNBThreadSaveRegisterState(v7, CurrentThread);
  if (v10)
  {
    snprintf(__str, 0x40uLL, "%u", v10);
    v11 = strlen(__str);
    if (v11 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v12 = v11;
    if (v11 >= 0x17)
    {
      v19 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17)
        v19 = v11 | 7;
      v20 = v19 + 1;
      v13 = operator new(v19 + 1);
      __dst[1] = v12;
      v22 = v20 | 0x8000000000000000;
      __dst[0] = v13;
    }
    else
    {
      HIBYTE(v22) = v11;
      v13 = __dst;
      if (!v11)
      {
LABEL_22:
        *((_BYTE *)v13 + v12) = 0;
        v17 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)__dst);
        if (SHIBYTE(v22) < 0)
        {
          v18 = (void *)__dst[0];
          goto LABEL_24;
        }
        return v17;
      }
    }
    memcpy(v13, __str, v12);
    goto LABEL_22;
  }
  v24 = 3;
  strcpy(__str, "E75");
  v17 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)__str);
  if (v24 < 0)
  {
    v18 = *(void **)__str;
LABEL_24:
    operator delete(v18);
  }
  return v17;
}

uint64_t RNBRemote::HandlePacket_RestoreRegisterState(RNBRemote *this, char *__s1, uint64_t a3, uint64_t a4, const char *a5)
{
  int v7;
  char *v8;
  unint64_t CurrentThread;
  RNBRemote *v10;
  int v11;
  int v13;
  uint64_t v14;
  void *__p[2];
  char v16;
  void *v17[5];

  v7 = *((_DWORD *)this + 3);
  if (*((_BYTE *)this + 782))
  {
    if (!__s1)
      goto LABEL_12;
    v8 = strstr(__s1, "thread:");
    if (!v8)
      goto LABEL_12;
    CurrentThread = strtoul(v8 + 7, 0, 16);
    if (!CurrentThread)
    {
LABEL_11:
      if (!*((_BYTE *)this + 782))
      {
        v10 = this;
        v11 = 3514;
        return RNBRemote::HandlePacket_ILLFORMED(v10, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", v11, __s1, a5);
      }
LABEL_12:
      v10 = this;
      v11 = 3511;
      return RNBRemote::HandlePacket_ILLFORMED(v10, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", v11, __s1, a5);
    }
  }
  else
  {
    CurrentThread = *((_QWORD *)this + 68);
    if (CurrentThread + 1 <= 1)
    {
      CurrentThread = DNBProcessGetCurrentThread(*((_DWORD *)this + 3));
      if (!CurrentThread)
        goto LABEL_11;
    }
  }
  StdStringExtractor::StdStringExtractor((StdStringExtractor *)v17, __s1);
  v17[4] = (void *)22;
  if (!StdStringExtractor::GetU32((StdStringExtractor *)v17, 0, 0))
  {
    v16 = 3;
    v13 = 3553093;
LABEL_16:
    LODWORD(__p[0]) = v13;
    goto LABEL_17;
  }
  if (!DNBThreadRestoreRegisterState(v7, CurrentThread))
  {
    v16 = 3;
    v13 = 3618629;
    goto LABEL_16;
  }
  v16 = 2;
  strcpy((char *)__p, "OK");
LABEL_17:
  v14 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)__p);
  if (v16 < 0)
    operator delete(__p[0]);
  StdStringExtractor::~StdStringExtractor(v17);
  return v14;
}

uint64_t RNBRemote::HandlePacket_MemoryRegionInfo(RNBRemote *this, const char *a2)
{
  const char *v3;
  unint64_t v4;
  const char *v5;
  uint64_t v7;
  void (__cdecl **v8)(std::ostringstream *__hidden);
  void (__cdecl **v9)(std::ostringstream *__hidden);
  void (__cdecl **v10)(std::ostringstream *__hidden);
  std::ios_base *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *__p[2];
  char v33;
  void (__cdecl **v34)(std::ostringstream *__hidden);
  void (__cdecl **v35)(std::stringbuf *__hidden);
  char v36;
  void *v37[2];
  __int128 v38;
  int v39;
  void (__cdecl **v40)(std::ostringstream *__hidden);
  uint64_t v41;
  uint64_t v42;
  int v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;

  if (a2[17])
  {
    if (a2[17] == 58)
    {
      v3 = a2 + 18;
      if (a2[18] == 48 && (*((unsigned __int8 *)a2 + 19) | 0x20) == 0x78)
        v3 = a2 + 20;
      *__error() = 0;
      v4 = strtoul(v3, 0, 16);
      if (*__error() && !v4)
        return RNBRemote::HandlePacket_ILLFORMED(this, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", 4281, v3, v5);
      v41 = 0;
      v42 = 0;
      v43 = 0;
      v44 = 0u;
      v45 = 0u;
      v46 = 0u;
      DNBProcessMemoryRegionInfo(*((_DWORD *)this + 3), v4, (uint64_t)&v41);
      v34 = v9;
      *(void (__cdecl ***)(std::ostringstream *__hidden))((char *)&v34 + (_QWORD)*(v9 - 3)) = v10;
      v11 = (std::ios_base *)((char *)&v34 + (_QWORD)*(v34 - 3));
      std::ios_base::init(v11, &v35);
      v11[1].__vftable = 0;
      v11[1].__fmtflags_ = -1;
      std::streambuf::basic_streambuf(&v35);
      *(_OWORD *)v37 = 0u;
      v38 = 0u;
      v39 = 16;
      v12 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v34, (uint64_t)"start:", 6);
      *(_DWORD *)((char *)v12 + *(_QWORD *)(*v12 - 24) + 8) = *(_DWORD *)((_BYTE *)v12 + *(_QWORD *)(*v12 - 24) + 8) & 0xFFFFFFB5 | 8;
      v13 = (_QWORD *)std::ostream::operator<<(v12, v41);
      LOBYTE(__p[0]) = 59;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)__p, 1);
      if (v42)
      {
        v14 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v34, (uint64_t)"size:", 5);
        *(_DWORD *)((char *)v14 + *(_QWORD *)(*v14 - 24) + 8) = *(_DWORD *)((_BYTE *)v14 + *(_QWORD *)(*v14 - 24)
                                                                                           + 8) & 0xFFFFFFB5 | 8;
        v15 = (_QWORD *)std::ostream::operator<<(v14, v42);
        LOBYTE(__p[0]) = 59;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)__p, 1);
      }
      if (!v43)
        goto LABEL_41;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v34, (uint64_t)"permissions:", 12);
      v16 = v43;
      if ((v43 & 2) != 0)
      {
        LOBYTE(__p[0]) = 114;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v34, (uint64_t)__p, 1);
        v16 = v43;
        if ((v43 & 1) == 0)
        {
LABEL_18:
          if ((v16 & 4) == 0)
            goto LABEL_20;
          goto LABEL_19;
        }
      }
      else if ((v43 & 1) == 0)
      {
        goto LABEL_18;
      }
      LOBYTE(__p[0]) = 119;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v34, (uint64_t)__p, 1);
      if ((v43 & 4) == 0)
      {
LABEL_20:
        LOBYTE(__p[0]) = 59;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v34, (uint64_t)__p, 1);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v34, (uint64_t)"dirty-pages:", 12);
        v17 = (uint64_t *)*((_QWORD *)&v44 + 1);
        if (*((_QWORD *)&v44 + 1) != (_QWORD)v44)
        {
          v19 = (uint64_t *)(v44 + 8);
          v18 = *(_QWORD *)v44;
          *(_DWORD *)((char *)&v35 + (_QWORD)*(v34 - 3)) = *(_DWORD *)((_BYTE *)&v35 + (_QWORD)*(v34 - 3)) & 0xFFFFFFB5 | 8;
          std::ostream::operator<<(&v34, v18);
          while (v19 != v17)
          {
            v20 = *v19++;
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v34, (uint64_t)",", 1);
            *(_DWORD *)((char *)&v35 + (_QWORD)*(v34 - 3)) = *(_DWORD *)((_BYTE *)&v35 + (_QWORD)*(v34 - 3)) & 0xFFFFFFB5 | 8;
            std::ostream::operator<<(&v34, v20);
          }
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v34, (uint64_t)";", 1);
        if (*((_QWORD *)&v45 + 1) != (_QWORD)v46)
        {
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v34, (uint64_t)"type:", 5);
          if ((_QWORD)v46 != *((_QWORD *)&v45 + 1))
          {
            v21 = *(char *)(*((_QWORD *)&v45 + 1) + 23);
            v22 = v21 >= 0 ? *((_QWORD *)&v45 + 1) : **((_QWORD **)&v45 + 1);
            v23 = v21 >= 0
                ? *(unsigned __int8 *)(*((_QWORD *)&v45 + 1) + 23)
                : *(_QWORD *)(*((_QWORD *)&v45 + 1) + 8);
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v34, v22, v23);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46 - *((_QWORD *)&v45 + 1)) >> 3) >= 2)
            {
              v24 = 0;
              v25 = 1;
              do
              {
                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v34, (uint64_t)",", 1);
                v26 = *(char *)(*((_QWORD *)&v45 + 1) + v24 + 47);
                if (v26 >= 0)
                  v27 = *((_QWORD *)&v45 + 1) + v24 + 24;
                else
                  v27 = *(_QWORD *)(*((_QWORD *)&v45 + 1) + v24 + 24);
                if (v26 >= 0)
                  v28 = *(unsigned __int8 *)(*((_QWORD *)&v45 + 1) + v24 + 47);
                else
                  v28 = *(_QWORD *)(*((_QWORD *)&v45 + 1) + v24 + 32);
                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v34, v27, v28);
                ++v25;
                v24 += 24;
              }
              while (v25 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46 - *((_QWORD *)&v45 + 1)) >> 3));
            }
          }
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v34, (uint64_t)";", 1);
        }
LABEL_41:
        std::stringbuf::str(__p, &v35);
        v7 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)__p);
        if (v33 < 0)
          operator delete(__p[0]);
        *(void (__cdecl ***)(std::ostringstream *__hidden))((char *)&v34
        if (SBYTE7(v38) < 0)
          operator delete(v37[0]);
        std::streambuf::~streambuf(&v35);
        std::ios::~ios(&v40);
        v29 = *((_QWORD *)&v45 + 1);
        if (*((_QWORD *)&v45 + 1))
        {
          v30 = v46;
          v31 = (void *)*((_QWORD *)&v45 + 1);
          if ((_QWORD)v46 != *((_QWORD *)&v45 + 1))
          {
            do
            {
              if (*(char *)(v30 - 1) < 0)
                operator delete(*(void **)(v30 - 24));
              v30 -= 24;
            }
            while (v30 != v29);
            v31 = (void *)*((_QWORD *)&v45 + 1);
          }
          *(_QWORD *)&v46 = v29;
          operator delete(v31);
        }
        v8 = (void (__cdecl **)(std::ostringstream *__hidden))v44;
        if (!(_QWORD)v44)
          return v7;
        *((_QWORD *)&v44 + 1) = v44;
        goto LABEL_55;
      }
LABEL_19:
      LOBYTE(__p[0]) = 120;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v34, (uint64_t)__p, 1);
      goto LABEL_20;
    }
    v36 = 3;
    LODWORD(v34) = 3618373;
  }
  else
  {
    v36 = 2;
    strcpy((char *)&v34, "OK");
  }
  v7 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)&v34);
  if (v36 < 0)
  {
    v8 = v34;
LABEL_55:
    operator delete(v8);
  }
  return v7;
}

uint64_t RNBRemote::HandlePacket_GetProfileData(RNBRemote *this, const char *a2)
{
  uint64_t v2;
  task_basic_info *v3;
  __int16 v4;
  void *v5;
  void *v6;
  std::string *v7;
  std::string::size_type v8;
  int v9;
  std::ios_base *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v16;
  void *v18;
  void *v19;
  void *v20[2];
  char v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[8];
  __int128 __p;
  __int128 v26;
  int v27;
  void (__cdecl **v28)(std::istringstream *__hidden);
  std::string __str;
  std::string v30;
  void *v31[6];

  if (*((_DWORD *)this + 3))
  {
    v16 = *((_DWORD *)this + 3);
    StdStringExtractor::StdStringExtractor((StdStringExtractor *)v31, a2 + 16);
    memset(&v30, 0, sizeof(v30));
    memset(&__str, 0, sizeof(__str));
    v4 = -1;
    if (StdStringExtractor::GetNameColonValue(v2, &v30, &__str))
    {
      do
      {
        if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v30.__r_.__value_.__l.__size_ == 9)
          {
            v7 = (std::string *)v30.__r_.__value_.__r.__words[0];
LABEL_11:
            v8 = v7->__r_.__value_.__r.__words[0];
            v9 = v7->__r_.__value_.__s.__data_[8];
            if (v8 == 0x7079745F6E616373 && v9 == 101)
            {
              v22 = v6;
              *(void **)((char *)&v22 + *((_QWORD *)v6 - 3)) = v19;
              v23 = 0;
              v11 = (std::ios_base *)((char *)&v22 + *((_QWORD *)v22 - 3));
              std::ios_base::init(v11, v24);
              v11[1].__vftable = 0;
              v11[1].__fmtflags_ = -1;
              std::streambuf::basic_streambuf(v24);
              __p = 0u;
              v26 = 0u;
              v27 = 8;
              std::string::operator=((std::string *)&__p, &__str);
              std::stringbuf::__init_buf_ptrs[abi:nn180100]((uint64_t)v24);
              LODWORD(v20[0]) = 0;
              *(_DWORD *)((char *)&v24[-1] + *((_QWORD *)v22 - 3)) = *(_DWORD *)((_BYTE *)&v24[-1] + *((_QWORD *)v22 - 3)) & 0xFFFFFFB5 | 8;
              v12 = (_QWORD *)std::istream::operator>>(&v22, v20);
              if ((*(_DWORD *)((_BYTE *)v12 + *(_QWORD *)(*v12 - 24) + 32) & 5) == 0)
                v4 = (__int16)v20[0];
              v22 = v5;
              *(void **)((char *)&v22 + *((_QWORD *)v5 - 3)) = v18;
              if (SBYTE7(v26) < 0)
                operator delete((void *)__p);
              std::streambuf::~streambuf(v24);
              std::ios::~ios(&v28);
            }
          }
        }
        else if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) == 9)
        {
          v7 = &v30;
          goto LABEL_11;
        }
      }
      while ((StdStringExtractor::GetNameColonValue((uint64_t)v31, &v30, &__str) & 1) != 0);
    }
    DNBProcessGetProfileData(v16, v4, v3, (uint64_t)&v22);
    v13 = HIBYTE(v24[0]);
    if (v24[0] < 0)
      v13 = v23;
    if (v13)
    {
      v14 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)&v22);
      if (SHIBYTE(v24[0]) < 0)
      {
LABEL_35:
        operator delete(v22);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_36:
          operator delete(__str.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_32;
          goto LABEL_31;
        }
LABEL_30:
        if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_32:
          StdStringExtractor::~StdStringExtractor(v31);
          return v14;
        }
LABEL_31:
        operator delete(v30.__r_.__value_.__l.__data_);
        goto LABEL_32;
      }
    }
    else
    {
      v21 = 2;
      strcpy((char *)v20, "OK");
      v14 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)v20);
      if (v21 < 0)
      {
        operator delete(v20[0]);
        if (SHIBYTE(v24[0]) < 0)
          goto LABEL_35;
      }
      else if (SHIBYTE(v24[0]) < 0)
      {
        goto LABEL_35;
      }
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_36;
    goto LABEL_30;
  }
  HIBYTE(v24[0]) = 2;
  strcpy((char *)&v22, "OK");
  v14 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)&v22);
  if (SHIBYTE(v24[0]) < 0)
    operator delete(v22);
  return v14;
}

uint64_t RNBRemote::HandlePacket_SetEnableAsyncProfiling(RNBRemote *this, const char *a2)
{
  int v3;
  uint64_t v4;
  int v5;
  std::string *v6;
  std::string *v8;
  std::string::size_type size;
  std::string::size_type v12;
  int v13;
  std::ios_base *v15;
  _QWORD *v16;
  std::string *p_str;
  uint64_t v19;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  BOOL v25;
  unint64_t v26;
  int v27;
  void *v28;
  uint64_t v29;
  _QWORD v30[8];
  __int128 __p;
  __int128 v32;
  int v33;
  void (__cdecl **v34)(std::istringstream *__hidden);
  std::string __str;
  std::string v36;
  void *v37[6];

  v3 = *((_DWORD *)this + 3);
  if (v3)
  {
    StdStringExtractor::StdStringExtractor((StdStringExtractor *)v37, a2 + 25);
    memset(&__str, 0, sizeof(__str));
    memset(&v36, 0, sizeof(v36));
    if (StdStringExtractor::GetNameColonValue(v4, &v36, &__str))
    {
      v26 = 0;
      v25 = 0;
      v5 = -1;
      while (1)
      {
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        {
          size = v36.__r_.__value_.__l.__size_;
          if (v36.__r_.__value_.__l.__size_ == 6
            && *(_DWORD *)v36.__r_.__value_.__l.__data_ == 1650552421
            && *(_WORD *)(v36.__r_.__value_.__r.__words[0] + 4) == 25964)
          {
            goto LABEL_47;
          }
          if (v36.__r_.__value_.__l.__size_ == 13)
          {
            if (*(_QWORD *)v36.__r_.__value_.__l.__data_ == 0x6C61767265746E69
              && *(_QWORD *)(v36.__r_.__value_.__r.__words[0] + 5) == 0x636573755F6C6176)
            {
              goto LABEL_4;
            }
            size = v36.__r_.__value_.__l.__size_;
          }
          if (size == 9)
          {
            v8 = (std::string *)v36.__r_.__value_.__r.__words[0];
LABEL_32:
            v12 = v8->__r_.__value_.__r.__words[0];
            v13 = v8->__r_.__value_.__s.__data_[8];
            if (v12 == 0x7079745F6E616373 && v13 == 101)
            {
              v28 = v24;
              *(void **)((char *)&v28 + *((_QWORD *)v24 - 3)) = v22;
              v29 = 0;
              v15 = (std::ios_base *)((char *)&v28 + *((_QWORD *)v28 - 3));
              std::ios_base::init(v15, v30);
              v15[1].__vftable = 0;
              v15[1].__fmtflags_ = -1;
              std::streambuf::basic_streambuf(v30);
              __p = 0u;
              v32 = 0u;
              v33 = 8;
              std::string::operator=((std::string *)&__p, &__str);
              std::stringbuf::__init_buf_ptrs[abi:nn180100]((uint64_t)v30);
              v27 = 0;
              *(_DWORD *)((char *)&v30[-1] + *((_QWORD *)v28 - 3)) = *(_DWORD *)((_BYTE *)&v30[-1] + *((_QWORD *)v28 - 3)) & 0xFFFFFFB5 | 8;
              v16 = (_QWORD *)std::istream::operator>>(&v28, &v27);
              if ((*(_DWORD *)((_BYTE *)v16 + *(_QWORD *)(*v16 - 24) + 32) & 5) == 0)
                v5 = v27;
              v28 = v23;
              *(void **)((char *)&v28 + *((_QWORD *)v23 - 3)) = v21;
              if (SBYTE7(v32) < 0)
                operator delete((void *)__p);
              std::streambuf::~streambuf(v30);
              std::ios::~ios(&v34);
            }
          }
        }
        else
        {
          if (HIBYTE(v36.__r_.__value_.__r.__words[2]) == 6)
          {
            if (LODWORD(v36.__r_.__value_.__l.__data_) != 1650552421
              || WORD2(v36.__r_.__value_.__r.__words[0]) != 25964)
            {
              goto LABEL_8;
            }
LABEL_47:
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_str = &__str;
            else
              p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
            v25 = strtoul((const char *)p_str, 0, 10) != 0;
            goto LABEL_8;
          }
          if (HIBYTE(v36.__r_.__value_.__r.__words[2]) == 9)
          {
            v8 = &v36;
            goto LABEL_32;
          }
          if (HIBYTE(v36.__r_.__value_.__r.__words[2]) == 13
            && v36.__r_.__value_.__r.__words[0] == 0x6C61767265746E69
            && *(std::string::size_type *)((char *)v36.__r_.__value_.__r.__words + 5) == 0x636573755F6C6176)
          {
LABEL_4:
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v6 = &__str;
            else
              v6 = (std::string *)__str.__r_.__value_.__r.__words[0];
            v26 = strtoul((const char *)v6, 0, 10);
          }
        }
LABEL_8:
        if ((StdStringExtractor::GetNameColonValue((uint64_t)v37, &v36, &__str) & 1) == 0)
          goto LABEL_54;
      }
    }
    v25 = 0;
    v26 = 0;
    v5 = -1;
LABEL_54:
    DNBProcessSetEnableAsyncProfiling(v3, v26 != 0 && v25, v26, v5);
    HIBYTE(v30[0]) = 2;
    strcpy((char *)&v28, "OK");
    v19 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)&v28);
    if (SHIBYTE(v30[0]) < 0)
    {
      operator delete(v28);
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_56:
        if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_58:
          StdStringExtractor::~StdStringExtractor(v37);
          return v19;
        }
LABEL_57:
        operator delete(v36.__r_.__value_.__l.__data_);
        goto LABEL_58;
      }
    }
    else if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_56;
    }
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_58;
    goto LABEL_57;
  }
  HIBYTE(v30[0]) = 2;
  strcpy((char *)&v28, "OK");
  v19 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)&v28);
  if (SHIBYTE(v30[0]) < 0)
    operator delete(v28);
  return v19;
}

uint64_t RNBRemote::HandlePacket_QEnableCompression(RNBRemote *this, char *a2)
{
  char *v3;
  unint64_t v4;
  char *v5;
  const char *v6;
  uint64_t v8;
  void *__p[2];
  char v11;

  v3 = a2 + 19;
  v4 = *((_QWORD *)this + 98);
  v5 = strstr(a2 + 19, "minsize:");
  if (v5)
  {
    v6 = v5 + 8;
    *__error() = 0;
    v4 = strtoul(v6, 0, 10);
    if (*__error() || v4 == -1)
      v4 = *((_QWORD *)this + 98);
  }
  if (strstr(v3, "type:zlib-deflate;"))
  {
    *((_DWORD *)this + 199) = 0;
    goto LABEL_13;
  }
  if (strstr(v3, "type:lz4;"))
  {
    *((_DWORD *)this + 199) = 1;
LABEL_13:
    *((_BYTE *)this + 792) = 1;
    *((_QWORD *)this + 98) = v4;
LABEL_14:
    v11 = 2;
    strcpy((char *)__p, "OK");
    goto LABEL_15;
  }
  if (strstr(v3, "type:lzma;"))
  {
    *((_DWORD *)this + 199) = 2;
    *((_BYTE *)this + 792) = 1;
    *((_QWORD *)this + 98) = v4;
    goto LABEL_14;
  }
  if (strstr(v3, "type:lzfse;"))
  {
    *((_DWORD *)this + 199) = 3;
    goto LABEL_13;
  }
  v11 = 3;
  LODWORD(__p[0]) = 3684421;
LABEL_15:
  v8 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)__p);
  if (v11 < 0)
    operator delete(__p[0]);
  return v8;
}

uint64_t RNBRemote::HandlePacket_WatchpointSupportInfo(RNBRemote *this, const char *a2)
{
  uint64_t NumSupportedHWP;
  void *v4;
  void *v5;
  std::ios_base *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  void *__p[2];
  char v12;
  void *v13;
  void (__cdecl **v14)(std::stringbuf *__hidden);
  char v15;
  void *v16[2];
  __int128 v17;
  int v18;
  void (__cdecl **v19)(std::ostringstream *__hidden);

  if (a2[22] == 58)
  {
    *__error() = 0;
    NumSupportedHWP = DNBWatchpointGetNumSupportedHWP(*((_DWORD *)this + 3));
    v13 = v4;
    *(void **)((char *)&v13 + *((_QWORD *)v4 - 3)) = v5;
    v6 = (std::ios_base *)((char *)&v13 + *((_QWORD *)v13 - 3));
    std::ios_base::init(v6, &v14);
    v6[1].__vftable = 0;
    v6[1].__fmtflags_ = -1;
    std::streambuf::basic_streambuf(&v14);
    *(_OWORD *)v16 = 0u;
    v17 = 0u;
    v18 = 16;
    v7 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v13, (uint64_t)"num:", 4);
    *(_DWORD *)((char *)v7 + *(_QWORD *)(*v7 - 24) + 8) = *(_DWORD *)((_BYTE *)v7 + *(_QWORD *)(*v7 - 24) + 8) & 0xFFFFFFB5 | 2;
    v8 = (_QWORD *)std::ostream::operator<<(v7, NumSupportedHWP);
    LOBYTE(__p[0]) = 59;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, (uint64_t)__p, 1);
    std::stringbuf::str(__p, &v14);
    v9 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)__p);
    if (v12 < 0)
      operator delete(__p[0]);
    if (SBYTE7(v17) < 0)
      operator delete(v16[0]);
    std::streambuf::~streambuf(&v14);
    std::ios::~ios(&v19);
  }
  else
  {
    if (a2[22])
    {
      v15 = 3;
      LODWORD(v13) = 3618373;
    }
    else
    {
      v15 = 2;
      strcpy((char *)&v13, "OK");
    }
    v9 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)&v13);
    if (v15 < 0)
      operator delete(v13);
  }
  return v9;
}

uint64_t RNBRemote::HandlePacket_QSetProcessEvent(RNBRemote *this, const char *a2)
{
  char *v3;
  int v4;
  uint64_t v5;
  void *__p[2];
  char v8;

  v3 = (char *)(a2 + 17);
  v4 = *((_DWORD *)this + 3);
  if (v4)
  {
    if (!DNBProcessSendEvent(v4, v3))
    {
      v8 = 3;
      LODWORD(__p[0]) = 3160133;
      goto LABEL_6;
    }
  }
  else
  {
    std::string::assign((std::string *)((char *)this + 416), v3);
  }
  v8 = 2;
  strcpy((char *)__p, "OK");
LABEL_6:
  v5 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  return v5;
}

uint64_t RNBRemote::HandlePacket_QSetDetachOnError(RNBRemote *this, const char *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;
  char v6;
  uint64_t v7;
  void *__p[2];
  char v10;

  v5 = a2[18];
  if (v5 == 48)
  {
    v6 = 0;
  }
  else
  {
    if (v5 != 49)
      return RNBRemote::HandlePacket_ILLFORMED(this, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", 2384, a2 + 18, a5);
    v6 = 1;
  }
  *((_BYTE *)this + 440) = v6;
  v10 = 2;
  strcpy((char *)__p, "OK");
  v7 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)__p);
  if (v10 < 0)
    operator delete(__p[0]);
  return v7;
}

uint64_t RNBRemote::HandlePacket_qSpeedTest(RNBRemote *this, const char *a2)
{
  const char *v3;
  size_t v4;
  const char *v5;
  size_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *__p[2];
  unint64_t v14;
  char *__endptr;

  v3 = a2 + 25;
  __endptr = 0;
  *__error() = 0;
  v4 = strtoul(v3, &__endptr, 16);
  if (*__error())
    return RNBRemote::HandlePacket_ILLFORMED(this, "/Library/Caches/com.apple.xbs/Sources/lldb/llvm-project/lldb/tools/debugserver/source/RNBRemote.cpp", 4444, v3, v5);
  if (*__endptr == 59)
  {
    strcpy((char *)&RNBRemote::HandlePacket_qSpeedTest(char const*)::g_data, "data:");
    memset((char *)&word_10007184C + 1, 97, v4);
    *((_BYTE *)&RNBRemote::HandlePacket_qSpeedTest(char const*)::g_data + v4 + 5) = 0;
    v7 = strlen((const char *)&RNBRemote::HandlePacket_qSpeedTest(char const*)::g_data);
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v8 = (void *)v7;
    if (v7 >= 0x17)
    {
      v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v10 = v7 | 7;
      v11 = v10 + 1;
      v9 = operator new(v10 + 1);
      __p[1] = v8;
      v14 = v11 | 0x8000000000000000;
      __p[0] = v9;
    }
    else
    {
      HIBYTE(v14) = v7;
      v9 = __p;
      if (!v7)
        goto LABEL_13;
    }
    memcpy(v9, &RNBRemote::HandlePacket_qSpeedTest(char const*)::g_data, (size_t)v8);
LABEL_13:
    *((_BYTE *)v8 + (_QWORD)v9) = 0;
    goto LABEL_14;
  }
  HIBYTE(v14) = 3;
  LODWORD(__p[0]) = 3749701;
LABEL_14:
  v12 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)__p);
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);
  return v12;
}

const char *RNBRemote::HandlePacket_qXfer(RNBRemote *this, char *a2)
{
  const char *v2;
  const char *v4;
  char *v5;
  char *v6;
  size_t v7;
  void **p_dst;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  size_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  size_t v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  size_t v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  const void *v32;
  size_t v33;
  void *v34;
  void **v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  unint64_t v39;
  std::string::size_type v40;
  const char *v41;
  unint64_t v42;
  int v43;
  char v44;
  int v45;
  std::string::size_type v47;
  void **v48;
  std::string::size_type v49;
  std::string::size_type size;
  std::string::value_type v51;
  std::string::size_type v52;
  std::string *v53;
  std::string::size_type v54;
  std::string *v55;
  std::string *v56;
  std::string::size_type v57;
  std::string *v58;
  std::string::size_type v59;
  void *v60;
  void *v61[2];
  char v62;
  std::string v63;
  std::string v64;
  void *__p;
  uint64_t v66;
  char v67;
  char *__endptr;
  void *v69[2];
  int64_t v70;
  void *v71[2];
  int64_t v72;
  void *v73[2];
  unint64_t v74;
  void *v75[2];
  unint64_t v76;
  void **__dst;
  size_t v78;
  unint64_t v79;

  v2 = a2;
  v4 = a2 + 6;
  v5 = strchr(a2 + 6, 58);
  if (v5)
  {
    v6 = v5;
    v7 = v5 - v4;
    if ((unint64_t)(v5 - v4) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_145;
    if (v7 >= 0x17)
    {
      v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v9 = v7 | 7;
      v10 = v9 + 1;
      p_dst = (void **)operator new(v9 + 1);
      v78 = v7;
      v79 = v10 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v79) = (_BYTE)v5 - (_BYTE)v4;
      p_dst = (void **)&__dst;
      if (v5 == v4)
      {
LABEL_10:
        *((_BYTE *)p_dst + v7) = 0;
        v11 = v6 + 1;
        v12 = strchr(v6 + 1, 58);
        if (!v12)
        {
          v67 = 3;
          LODWORD(__p) = 3553349;
          RNBRemote::SendPacket((uint64_t)this, (uint64_t)&__p);
          if (v67 < 0)
            operator delete(__p);
          goto LABEL_68;
        }
        v13 = v12;
        v14 = v12 - v11;
        if ((unint64_t)(v12 - v11) > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_145;
        if (v14 >= 0x17)
        {
          v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v14 | 7) != 0x17)
            v16 = v14 | 7;
          v17 = v16 + 1;
          v15 = (void **)operator new(v16 + 1);
          v75[1] = (void *)v14;
          v76 = v17 | 0x8000000000000000;
          v75[0] = v15;
        }
        else
        {
          HIBYTE(v76) = (_BYTE)v12 - (_BYTE)v11;
          v15 = v75;
          if (v12 == v11)
          {
LABEL_22:
            *((_BYTE *)v15 + v14) = 0;
            v18 = v13 + 1;
            v19 = strchr(v13 + 1, 58);
            if (!v19)
            {
              v67 = 3;
              LODWORD(__p) = 3487813;
              RNBRemote::SendPacket((uint64_t)this, (uint64_t)&__p);
              if (v67 < 0)
                operator delete(__p);
              goto LABEL_66;
            }
            v20 = v19;
            v21 = v19 - v18;
            if ((unint64_t)(v19 - v18) > 0x7FFFFFFFFFFFFFF7)
              goto LABEL_145;
            if (v21 >= 0x17)
            {
              v23 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v21 | 7) != 0x17)
                v23 = v21 | 7;
              v24 = v23 + 1;
              v22 = (void **)operator new(v23 + 1);
              v73[1] = (void *)v21;
              v74 = v24 | 0x8000000000000000;
              v73[0] = v22;
            }
            else
            {
              HIBYTE(v74) = (_BYTE)v19 - (_BYTE)v18;
              v22 = v73;
              if (v19 == v18)
              {
LABEL_34:
                *((_BYTE *)v22 + v21) = 0;
                v25 = v20 + 1;
                v26 = strchr(v20 + 1, 44);
                if (!v26)
                  goto LABEL_75;
                v27 = v26;
                v28 = v26 - v25;
                if ((unint64_t)(v26 - v25) > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_145;
                if (v28 >= 0x17)
                {
                  v30 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v28 | 7) != 0x17)
                    v30 = v28 | 7;
                  v31 = v30 + 1;
                  v29 = (void **)operator new(v30 + 1);
                  v71[1] = (void *)v28;
                  v72 = v31 | 0x8000000000000000;
                  v71[0] = v29;
                }
                else
                {
                  HIBYTE(v72) = (_BYTE)v26 - (_BYTE)v25;
                  v29 = v71;
                  if (v26 == v25)
                  {
LABEL_44:
                    *((_BYTE *)v29 + v28) = 0;
                    v32 = v27 + 1;
                    v33 = strlen(v27 + 1);
                    if (v33 <= 0x7FFFFFFFFFFFFFF7)
                    {
                      v34 = (void *)v33;
                      if (v33 >= 0x17)
                      {
                        v36 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v33 | 7) != 0x17)
                          v36 = v33 | 7;
                        v37 = v36 + 1;
                        v35 = (void **)operator new(v36 + 1);
                        v69[1] = v34;
                        v70 = v37 | 0x8000000000000000;
                        v69[0] = v35;
                      }
                      else
                      {
                        HIBYTE(v70) = v33;
                        v35 = v69;
                        if (!v33)
                        {
LABEL_52:
                          *((_BYTE *)v34 + (_QWORD)v35) = 0;
                          __endptr = 0;
                          if (v72 >= 0)
                            v38 = (const char *)v71;
                          else
                            v38 = (const char *)v71[0];
                          v39 = strtoul(v38, &__endptr, 16);
                          if (*__endptr
                            || ((v40 = v39, v70 >= 0) ? (v41 = (const char *)v69) : (v41 = (const char *)v69[0]),
                                v42 = strtoul(v41, &__endptr, 16),
                                *__endptr))
                          {
                            v43 = 1;
                            if ((SHIBYTE(v70) & 0x80000000) == 0)
                              goto LABEL_62;
                            goto LABEL_61;
                          }
                          v47 = v42;
                          if (SHIBYTE(v79) < 0)
                          {
                            if (v78 != 8)
                              goto LABEL_97;
                            v48 = __dst;
                          }
                          else
                          {
                            if (SHIBYTE(v79) != 8)
                              goto LABEL_97;
                            v48 = (void **)&__dst;
                          }
                          if (*v48 == (void *)0x7365727574616566
                            && std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(v75, "read")&& std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(v73, "target.xml"))
                          {
                            std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)&__p);
                            if (v40)
                            {
                              v49 = *((_QWORD *)&g_target_xml + 1);
                              if (byte_10047186F >= 0)
                                v49 = byte_10047186F;
                              if (v40 >= v49)
                                goto LABEL_141;
                              std::string::basic_string(&v64, (const std::string *)&g_target_xml, v40, v47, (std::allocator<char> *)&v63);
                              size = HIBYTE(v64.__r_.__value_.__r.__words[2]);
                              if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                size = v64.__r_.__value_.__l.__size_;
                              if (size >= v47)
                                v51 = 109;
                              else
                                v51 = 108;
                              v63.__r_.__value_.__s.__data_[0] = v51;
                              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)&v63, 1);
                              if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                v55 = &v64;
                              else
                                v55 = (std::string *)v64.__r_.__value_.__r.__words[0];
                              std::string::basic_string[abi:nn180100]<0>(v61, (char *)v55);
                              binary_encode_string((unsigned __int8 *)v61, &v63);
                              if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                v56 = &v63;
                              else
                                v56 = (std::string *)v63.__r_.__value_.__r.__words[0];
                              if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                v57 = HIBYTE(v63.__r_.__value_.__r.__words[2]);
                              else
                                v57 = v63.__r_.__value_.__l.__size_;
                              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)v56, v57);
                              if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
                              {
                                operator delete(v63.__r_.__value_.__l.__data_);
                                if ((v62 & 0x80000000) == 0)
                                {
LABEL_123:
                                  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
                                    goto LABEL_139;
LABEL_141:
                                  std::stringbuf::str(&v64, &v66);
                                  goto LABEL_142;
                                }
                              }
                              else if ((v62 & 0x80000000) == 0)
                              {
                                goto LABEL_123;
                              }
                              operator delete(v61[0]);
                              if ((SHIBYTE(v64.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                goto LABEL_141;
LABEL_139:
                              v60 = (void *)v64.__r_.__value_.__r.__words[0];
LABEL_140:
                              operator delete(v60);
                              goto LABEL_141;
                            }
                            RNBRemote::InitializeRegisters(this, 1);
                            UpdateTargetXML();
                            if (byte_10047186F < 0)
                            {
                              v52 = *((_QWORD *)&g_target_xml + 1);
                              if (*((_QWORD *)&g_target_xml + 1))
                                goto LABEL_102;
                            }
                            else
                            {
                              v52 = byte_10047186F;
                              if (byte_10047186F)
                              {
LABEL_102:
                                if (v47 <= v52)
                                {
                                  v64.__r_.__value_.__s.__data_[0] = 109;
                                  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)&v64, 1);
                                  std::string::basic_string(&v63, (const std::string *)&g_target_xml, 0, v47, (std::allocator<char> *)v61);
                                  binary_encode_string((unsigned __int8 *)&v63, &v64);
                                  if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                    v58 = &v64;
                                  else
                                    v58 = (std::string *)v64.__r_.__value_.__r.__words[0];
                                  if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                    v59 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
                                  else
                                    v59 = v64.__r_.__value_.__l.__size_;
                                  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)v58, v59);
                                  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
                                    operator delete(v64.__r_.__value_.__l.__data_);
                                  if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                    goto LABEL_141;
                                  v60 = (void *)v63.__r_.__value_.__r.__words[0];
                                  goto LABEL_140;
                                }
                                v64.__r_.__value_.__s.__data_[0] = 108;
                                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)&v64, 1);
                                binary_encode_string((unsigned __int8 *)&g_target_xml, &v64);
                                if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                  v53 = &v64;
                                else
                                  v53 = (std::string *)v64.__r_.__value_.__r.__words[0];
                                if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                  v54 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
                                else
                                  v54 = v64.__r_.__value_.__l.__size_;
                                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)v53, v54);
                                if ((SHIBYTE(v64.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                  goto LABEL_141;
                                goto LABEL_139;
                              }
                            }
                            std::string::basic_string[abi:nn180100]<0>(&v64, "E83");
LABEL_142:
                            v2 = (const char *)RNBRemote::SendPacket((uint64_t)this, (uint64_t)&v64);
                            if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(v64.__r_.__value_.__l.__data_);
                            std::ostringstream::~ostringstream((uint64_t)&__p);
LABEL_98:
                            v43 = 0;
                            if ((SHIBYTE(v70) & 0x80000000) == 0)
                            {
LABEL_62:
                              if (SHIBYTE(v72) < 0)
                              {
                                operator delete(v71[0]);
                                if (!v43)
                                {
LABEL_64:
                                  if ((SHIBYTE(v74) & 0x80000000) == 0)
                                    goto LABEL_65;
LABEL_76:
                                  operator delete(v73[0]);
                                  if ((v43 & 1) == 0)
                                    goto LABEL_77;
LABEL_66:
                                  v44 = 1;
                                  if ((SHIBYTE(v76) & 0x80000000) == 0)
                                    goto LABEL_67;
LABEL_78:
                                  operator delete(v75[0]);
                                  if ((v44 & 1) == 0)
                                    goto LABEL_79;
LABEL_68:
                                  v45 = 1;
                                  if ((SHIBYTE(v79) & 0x80000000) == 0)
                                    goto LABEL_70;
                                  goto LABEL_69;
                                }
                              }
                              else if (!v43)
                              {
                                goto LABEL_64;
                              }
LABEL_75:
                              LOBYTE(v43) = 1;
                              if ((SHIBYTE(v74) & 0x80000000) == 0)
                              {
LABEL_65:
                                if ((v43 & 1) != 0)
                                  goto LABEL_66;
LABEL_77:
                                v44 = 0;
                                if ((SHIBYTE(v76) & 0x80000000) == 0)
                                {
LABEL_67:
                                  if ((v44 & 1) != 0)
                                    goto LABEL_68;
LABEL_79:
                                  v45 = 0;
                                  if ((SHIBYTE(v79) & 0x80000000) == 0)
                                  {
LABEL_70:
                                    if (!v45)
                                      return v2;
                                    goto LABEL_71;
                                  }
LABEL_69:
                                  operator delete(__dst);
                                  goto LABEL_70;
                                }
                                goto LABEL_78;
                              }
                              goto LABEL_76;
                            }
LABEL_61:
                            operator delete(v69[0]);
                            goto LABEL_62;
                          }
LABEL_97:
                          v2 = (const char *)RNBRemote::HandlePacket_UNIMPLEMENTED(this, v2);
                          goto LABEL_98;
                        }
                      }
                      memmove(v35, v32, (size_t)v34);
                      goto LABEL_52;
                    }
LABEL_145:
                    abort();
                  }
                }
                memmove(v29, v25, v28);
                goto LABEL_44;
              }
            }
            memmove(v22, v18, v21);
            goto LABEL_34;
          }
        }
        memmove(v15, v11, v14);
        goto LABEL_22;
      }
    }
    memcpy(p_dst, v4, v7);
    goto LABEL_10;
  }
LABEL_71:
  v67 = 3;
  LODWORD(__p) = 3291205;
  v2 = (const char *)RNBRemote::SendPacket((uint64_t)this, (uint64_t)&__p);
  if (v67 < 0)
    operator delete(__p);
  return v2;
}

std::ios_base *RNBRemote::HandlePacket_jGetDyldProcessState(RNBRemote *this, const char *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  std::ios_base *v6;
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p[2];
  char v13;
  void *v14;
  void (__cdecl **v15)(std::stringbuf *__hidden);
  char v16;
  void *v17[2];
  __int128 v18;
  int v19;
  void (__cdecl **v20)(std::ostringstream *__hidden);
  uint64_t v21;
  std::__shared_weak_count *v22;

  v3 = *((unsigned int *)this + 3);
  if ((_DWORD)v3)
  {
    DNBGetDyldProcessState(v3, &v21);
    if (!v21)
    {
LABEL_15:
      v16 = 3;
      LODWORD(v14) = 3684421;
      v6 = (std::ios_base *)RNBRemote::SendPacket((uint64_t)this, (uint64_t)&v14);
      if (v16 < 0)
        operator delete(v14);
LABEL_17:
      v8 = v22;
      if (v22)
      {
        p_shared_owners = (unint64_t *)&v22->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      return v6;
    }
    v14 = v4;
    *(void **)((char *)&v14 + *((_QWORD *)v4 - 3)) = v5;
    v6 = (std::ios_base *)((char *)&v14 + *((_QWORD *)v14 - 3));
    std::ios_base::init(v6, &v15);
    v6[1].__vftable = 0;
    v6[1].__fmtflags_ = -1;
    std::streambuf::basic_streambuf(&v15);
    *(_OWORD *)v17 = 0u;
    v18 = 0u;
    v19 = 16;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v21 + 40))(v21, &v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
    std::stringbuf::str(__p, &v15);
    if (v13 < 0)
    {
      v6 = (std::ios_base *)__p[1];
      operator delete(__p[0]);
      if (v6)
        goto LABEL_5;
    }
    else if (v13)
    {
LABEL_5:
      std::stringbuf::str(__p, &v15);
      v6 = (std::ios_base *)RNBRemote::SendPacket((uint64_t)this, (uint64_t)__p);
      if (v13 < 0)
        operator delete(__p[0]);
      v7 = 0;
LABEL_12:
      if (SBYTE7(v18) < 0)
        operator delete(v17[0]);
      std::streambuf::~streambuf(&v15);
      std::ios::~ios(&v20);
      if (!v7)
        goto LABEL_17;
      goto LABEL_15;
    }
    v7 = 1;
    goto LABEL_12;
  }
  v16 = 3;
  LODWORD(v14) = 3618885;
  v6 = (std::ios_base *)RNBRemote::SendPacket((uint64_t)this, (uint64_t)&v14);
  if (v16 < 0)
    operator delete(v14);
  return v6;
}

int *RNBRemote::FlushSTDIO(int *this)
{
  int v1;
  RNBRemote *v2;
  size_t AvailableSTDOUT;
  size_t v4;
  uint64_t v5;
  char v6[256];

  v1 = this[3];
  if (v1)
  {
    v2 = (RNBRemote *)this;
    AvailableSTDOUT = DNBProcessGetAvailableSTDOUT(this[3], v6, 0x100uLL);
    if (AvailableSTDOUT)
    {
      v4 = AvailableSTDOUT;
      do
      {
        RNBRemote::SendHexEncodedBytePacket(v2, "O", (unsigned __int8 *)v6, v4, 0);
        v4 = DNBProcessGetAvailableSTDOUT(v1, v6, 0x100uLL);
      }
      while (v4);
    }
    this = (int *)DNBProcessGetAvailableSTDERR(v1, v6);
    if (this)
    {
      v5 = (uint64_t)this;
      do
      {
        RNBRemote::SendHexEncodedBytePacket(v2, "O", (unsigned __int8 *)v6, v5, 0);
        this = (int *)DNBProcessGetAvailableSTDERR(v1, v6);
        v5 = (uint64_t)this;
      }
      while (this);
    }
  }
  return this;
}

size_t RNBRemote::SendAsyncProfileData(size_t this)
{
  int v1;
  uint64_t v2;
  std::string::size_type v3;
  std::string __p;
  std::string::value_type __s[1024];

  v1 = *(_DWORD *)(this + 12);
  if (v1)
  {
    v2 = this;
    this = DNBProcessGetAvailableProfileData(*(_DWORD *)(this + 12), __s, 0x400uLL);
    if (this)
    {
      v3 = this;
      do
      {
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 1;
        LOWORD(__p.__r_.__value_.__l.__data_) = 65;
        std::string::append(&__p, __s, v3);
        RNBRemote::SendPacket(v2, (uint64_t)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        this = DNBProcessGetAvailableProfileData(v1, __s, 0x400uLL);
        v3 = this;
      }
      while (this);
    }
  }
  return this;
}

uint64_t RNBRemote::SendHexEncodedBytePacket(RNBRemote *this, const char *a2, unsigned __int8 *a3, uint64_t a4, const char *a5)
{
  void (__cdecl **v8)(std::ostringstream *__hidden);
  uint64_t v9;
  std::ios_base *v10;
  size_t v11;
  unsigned int v12;
  void (__cdecl **v13)(std::ostringstream *__hidden);
  char *v14;
  const std::locale::facet *v15;
  size_t v16;
  uint64_t v17;
  std::locale v21;
  char v22;
  void (__cdecl **v23)(std::ostringstream *__hidden);
  _QWORD v24[8];
  void *__p[2];
  __int128 v26;
  int v27;
  void (__cdecl **v28)(std::ostringstream *__hidden);

  v23 = v8;
  *(_QWORD *)((char *)&v24[-1] + (_QWORD)*(v8 - 3)) = v9;
  v10 = (std::ios_base *)((char *)&v24[-1] + (_QWORD)*(v23 - 3));
  std::ios_base::init(v10, v24);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf(v24);
  *(_OWORD *)__p = 0u;
  v26 = 0u;
  v27 = 16;
  if (a2 && *a2)
  {
    v11 = strlen(a2);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v23, (uint64_t)a2, v11);
  }
  for (; a4; --a4)
  {
    v13 = v23;
    v14 = (char *)&v24[-1] + (_QWORD)*(v23 - 3);
    if (*((_DWORD *)v14 + 36) == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)&v24[-1] + (_QWORD)*(v23 - 3)));
      v15 = std::locale::use_facet(&v21, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 32);
      std::locale::~locale(&v21);
      v13 = v23;
    }
    *((_DWORD *)v14 + 36) = 48;
    *(_DWORD *)((char *)v24 + (_QWORD)*(v13 - 3)) = *(_DWORD *)((_BYTE *)v24 + (_QWORD)*(v13 - 3)) & 0xFFFFFFB5 | 8;
    *(_DWORD *)((char *)v24 + (_QWORD)*(v13 - 3)) = *(_DWORD *)((_BYTE *)v24 + (_QWORD)*(v13 - 3)) & 0xFFFFFF4F | 0x80;
    *(_QWORD *)((char *)&v24[2] + (_QWORD)*(v13 - 3)) = 2;
    v12 = *a3++;
    std::ostream::operator<<(&v23, v12);
  }
  if (a5 && *a5)
  {
    v16 = strlen(a5);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v23, (uint64_t)a5, v16);
  }
  std::stringbuf::str(&v21, v24);
  v17 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)&v21);
  if (v22 < 0)
    operator delete(v21.__locale_);
  if (SBYTE7(v26) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf(v24);
  std::ios::~ios(&v28);
  return v17;
}

uint64_t std::ostringstream::basic_ostringstream[abi:nn180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::ios_base *v5;

  v2 = a1 + 8;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v3;
  v5 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf(v2);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

uint64_t RNBRemote::SendPacket(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t *v4;
  int data;
  int v6;
  uint64_t v7;
  int v8;
  const char *v9;
  std::string *v10;
  std::string::size_type v11;
  char *v12;
  unint64_t v13;
  void **v14;
  unint64_t v15;
  unsigned __int8 v16;
  int v17;
  char v18;
  char v19;
  void **v20;
  char *v21;
  unint64_t v22;
  char v23;
  char v24;
  char v25;
  char *v26;
  char *v27;
  char v28;
  std::string *v29;
  size_t size;
  uint64_t v31;
  uint64_t Packet;
  pthread_mutex_t *v34;
  int v35;
  __darwin_suseconds_t v36;
  uint64_t v37;
  int v38;
  std::string *v39;
  void **v40;
  pthread_mutex_t *v41;
  int tv_sec;
  __darwin_suseconds_t tv_usec;
  uint64_t v44;
  int v45;
  std::string *v46;
  std::string v47;
  __int128 v48;
  void *v49[2];
  void *__p[2];
  __int128 v51;
  void *v52[2];
  uint64_t v53;
  char __str[5];
  std::string v55;
  void *v56[2];
  unsigned __int8 v57;
  timeval v58;

  if (DNBLogEnabledForAny(0x40000))
  {
    v4 = *(pthread_mutex_t **)(a1 + 488);
    if (v4)
      pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 488));
    gettimeofday((timeval *)&v47, 0);
    data = (int)v47.__r_.__value_.__l.__data_;
    v6 = v47.__r_.__value_.__r.__words[1];
    v7 = *(_QWORD *)(a1 + 496);
    v8 = *(_DWORD *)(a1 + 504);
    *(_OWORD *)(a1 + 496) = *(_OWORD *)&v47.__r_.__value_.__l.__data_;
    if (v4)
      pthread_mutex_unlock(v4);
    if (*(char *)(a2 + 23) >= 0)
      v9 = (const char *)a2;
    else
      v9 = *(const char **)a2;
    _DNBLogThreaded("%8d RNBRemote::%s (%s) called", v6 - v8 + 1000000 * (data - v7), "SendPacket", v9);
  }
  RNBRemote::CompressString((std::string *)a2, a1, (uint64_t)v56);
  std::operator+<char>(&v47, "$", v56);
  v10 = std::string::append(&v47, "#");
  v11 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v55.__r_.__value_.__r.__words[2] = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v47.__r_.__value_.__l.__data_);
    if (*(_BYTE *)(a1 + 781))
      goto LABEL_12;
  }
  else if (*(_BYTE *)(a1 + 781))
  {
LABEL_12:
    v12 = "00";
    goto LABEL_31;
  }
  v13 = v57;
  if ((v57 & 0x80u) != 0)
    v13 = (unint64_t)v56[1];
  if (v13)
  {
    v14 = (void **)v56[0];
    if (v13 == 1)
    {
      v15 = 0;
      v16 = 0;
    }
    else
    {
      v18 = 0;
      v19 = 0;
      v15 = v13 & 0xFFFFFFFFFFFFFFFELL;
      v20 = v56;
      if ((v57 & 0x80u) != 0)
        v20 = (void **)v56[0];
      v21 = (char *)v20 + 1;
      v22 = v13 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        v24 = *(_BYTE *)v20;
        v20 = (void **)((char *)v20 + 2);
        v23 = v24;
        v25 = *v21;
        v21 += 2;
        v18 += v23;
        v19 += v25;
        v22 -= 2;
      }
      while (v22);
      v16 = v19 + v18;
      if (v13 == v15)
        goto LABEL_29;
    }
    if ((v57 & 0x80u) == 0)
      v14 = v56;
    v26 = (char *)(v13 - v15);
    v27 = (char *)v14 + v15;
    do
    {
      v28 = *v27++;
      v16 += v28;
      --v26;
    }
    while (v26);
LABEL_29:
    v17 = v16;
    goto LABEL_30;
  }
  v17 = 0;
LABEL_30:
  v12 = __str;
  snprintf(__str, 5uLL, "%02x", v17);
LABEL_31:
  std::string::append(&v55, v12);
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = &v55;
  else
    v29 = (std::string *)v55.__r_.__value_.__r.__words[0];
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v55.__r_.__value_.__r.__words[2]);
  else
    size = v55.__r_.__value_.__l.__size_;
  v31 = RNBSocket::Write((RNBSocket *)(a1 + 472), v29, size);
  if ((_DWORD)v31)
    goto LABEL_46;
  if (!*(_BYTE *)(a1 + 781))
  {
    v52[0] = 0;
    v52[1] = 0;
    v53 = 0;
    LODWORD(v47.__r_.__value_.__l.__data_) = 0;
    *(_OWORD *)&v47.__r_.__value_.__r.__words[1] = 0u;
    v48 = 0u;
    *(_OWORD *)v49 = 0u;
    *(_OWORD *)__p = 0u;
    v51 = 0u;
    Packet = RNBRemote::GetPacket(a1, v52, &v47, 1);
    if ((_DWORD)Packet)
    {
      v31 = Packet;
      if (!DNBLogEnabledForAny(0x100000))
      {
        if ((SHIBYTE(v51) & 0x80000000) == 0)
          goto LABEL_44;
LABEL_68:
        operator delete(__p[1]);
        if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
        {
LABEL_45:
          if ((SHIBYTE(v53) & 0x80000000) == 0)
            goto LABEL_46;
LABEL_70:
          operator delete(v52[0]);
          if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_71;
          goto LABEL_47;
        }
        goto LABEL_69;
      }
      v41 = *(pthread_mutex_t **)(a1 + 488);
      if (v41)
        pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 488));
      gettimeofday(&v58, 0);
      tv_sec = v58.tv_sec;
      tv_usec = v58.tv_usec;
      v44 = *(_QWORD *)(a1 + 496);
      v45 = *(_DWORD *)(a1 + 504);
      *(timeval *)(a1 + 496) = v58;
      if (v41)
        pthread_mutex_unlock(v41);
      v46 = &v55;
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v46 = (std::string *)v55.__r_.__value_.__r.__words[0];
      _DNBLogThreaded("%8d RNBRemote::%s (%s) got error trying to get reply...", tv_usec - v45 + 1000000 * (tv_sec - v44), "SendPacket", (const char *)v46);
      if (SHIBYTE(v51) < 0)
        goto LABEL_68;
    }
    else
    {
      if (DNBLogEnabledForAny(0x40000))
      {
        v34 = *(pthread_mutex_t **)(a1 + 488);
        if (v34)
          pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 488));
        gettimeofday(&v58, 0);
        v35 = v58.tv_sec;
        v36 = v58.tv_usec;
        v37 = *(_QWORD *)(a1 + 496);
        v38 = *(_DWORD *)(a1 + 504);
        *(timeval *)(a1 + 496) = v58;
        if (v34)
          pthread_mutex_unlock(v34);
        v39 = &v55;
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v39 = (std::string *)v55.__r_.__value_.__r.__words[0];
        v40 = v52;
        if (v53 < 0)
          v40 = (void **)v52[0];
        _DNBLogThreaded("%8d RNBRemote::%s (%s) got reply: '%s'", v36 - v38 + 1000000 * (v35 - v37), "SendPacket", (const char *)v39, (const char *)v40);
      }
      v31 = LODWORD(v47.__r_.__value_.__l.__data_) != 1;
      if (SHIBYTE(v51) < 0)
        goto LABEL_68;
    }
LABEL_44:
    if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
      goto LABEL_45;
LABEL_69:
    operator delete(v49[0]);
    if (SHIBYTE(v53) < 0)
      goto LABEL_70;
LABEL_46:
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_71;
    goto LABEL_47;
  }
  v31 = 0;
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_71:
    operator delete(v55.__r_.__value_.__l.__data_);
    if ((char)v57 < 0)
      goto LABEL_72;
    return v31;
  }
LABEL_47:
  if ((char)v57 < 0)
LABEL_72:
    operator delete(v56[0]);
  return v31;
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v3 = a1 + 8;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf(v3);
  std::ios::~ios(a1 + 112);
  return a1;
}

void RNBRemote::CompressString(std::string *__str@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  unsigned int v5;
  std::string::size_type size;
  size_t v7;
  unsigned __int8 *v8;
  size_t v9;
  int v10;
  std::string *v11;
  size_t v12;
  size_t v13;
  size_t v14;
  std::string::size_type v15;
  unsigned __int8 *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  BOOL v20;
  char __stra[16];
  uint64_t v22;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  if (*(_BYTE *)(a2 + 792))
  {
    *(_BYTE *)(a2 + 792) = 0;
LABEL_4:
    std::string::operator=((std::string *)a3, __str);
    return;
  }
  v5 = *(_DWORD *)(a2 + 796);
  if (v5 == 4)
    goto LABEL_4;
  if ((SHIBYTE(__str->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (*(_QWORD *)(a2 + 784) < size)
      goto LABEL_7;
LABEL_11:
    std::operator+<char>(__stra, "N", __str);
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    *(_OWORD *)a3 = *(_OWORD *)__stra;
    *(_QWORD *)(a3 + 16) = v22;
    return;
  }
  size = __str->__r_.__value_.__l.__size_;
  if (size <= *(_QWORD *)(a2 + 784))
    goto LABEL_11;
LABEL_7:
  v7 = size + 128;
  if (size == -128)
  {
    v8 = 0;
  }
  else
  {
    if ((v7 & 0x8000000000000000) != 0)
      abort();
    v8 = (unsigned __int8 *)operator new(size + 128);
    bzero(v8, v7);
  }
  if (RNBRemote::CompressString(std::string const&)::g_libcompress_scratchbuf_type == v5)
  {
LABEL_21:
    if (v5 <= 3)
    {
      v10 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
      v11 = v10 >= 0 ? __str : (std::string *)__str->__r_.__value_.__r.__words[0];
      v12 = v10 >= 0 ? HIBYTE(__str->__r_.__value_.__r.__words[2]) : __str->__r_.__value_.__l.__size_;
      v13 = compression_encode_buffer(v8, v7, (const uint8_t *)v11, v12, (void *)RNBRemote::CompressString(std::string const&)::g_libcompress_scratchbuf, (compression_algorithm)dword_100051ED0[v5]);
      if (v13)
      {
        v14 = v13;
        if (*(char *)(a3 + 23) < 0)
        {
          **(_BYTE **)a3 = 0;
          *(_QWORD *)(a3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)a3 = 0;
          *(_BYTE *)(a3 + 23) = 0;
        }
        std::string::reserve((std::string *)a3, v13);
        std::string::assign((std::string *)a3, "C");
        v15 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
        if ((v15 & 0x80u) != 0)
          v15 = __str->__r_.__value_.__l.__size_;
        snprintf(__stra, 0x10uLL, "%zu:", v15);
        __stra[15] = 0;
        std::string::append((std::string *)a3, __stra);
        v16 = v8;
        do
        {
          v18 = *v16++;
          v17 = v18;
          v19 = (1 << v18) & 0x41800000001;
          v20 = v18 > 0x2A || v19 == 0;
          if (!v20 || v17 == 125)
          {
            std::string::push_back((std::string *)a3, 125);
            LOBYTE(v17) = v17 ^ 0x20;
          }
          std::string::push_back((std::string *)a3, v17);
          --v14;
        }
        while (v14);
LABEL_34:
        operator delete(v8);
        return;
      }
    }
    goto LABEL_31;
  }
  if (RNBRemote::CompressString(std::string const&)::g_libcompress_scratchbuf)
  {
    free((void *)RNBRemote::CompressString(std::string const&)::g_libcompress_scratchbuf);
    RNBRemote::CompressString(std::string const&)::g_libcompress_scratchbuf = 0;
  }
  if (v5 <= 3)
  {
    v9 = compression_encode_scratch_buffer_size((compression_algorithm)dword_100051ED0[v5]);
    if (v9)
    {
      RNBRemote::CompressString(std::string const&)::g_libcompress_scratchbuf = (uint64_t)malloc_type_malloc(v9, 0x26F84502uLL);
      RNBRemote::CompressString(std::string const&)::g_libcompress_scratchbuf_type = v5;
    }
    goto LABEL_21;
  }
LABEL_31:
  std::operator+<char>(__stra, "N", __str);
  if (*(char *)(a3 + 23) < 0)
    operator delete(*(void **)a3);
  *(_OWORD *)a3 = *(_OWORD *)__stra;
  *(_QWORD *)(a3 + 16) = v22;
  if (v8)
    goto LABEL_34;
}

_QWORD *std::vector<unsigned char>::vector(_QWORD *a1, size_t __sz)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (__sz)
  {
    if ((__sz & 0x8000000000000000) != 0)
      abort();
    v4 = (char *)operator new(__sz);
    *a1 = v4;
    v5 = &v4[__sz];
    a1[2] = &v4[__sz];
    bzero(v4, __sz);
    a1[1] = v5;
  }
  return a1;
}

__darwin_time_t DNBTimer::ElapsedMicroSeconds(pthread_mutex_t **this, int a2)
{
  pthread_mutex_t *v4;
  timeval *v5;
  pthread_mutex_t *v6;
  pthread_mutex_t *v7;
  uint64_t tv_usec;
  __darwin_time_t tv_sec;
  uint64_t v10;
  timeval v12;

  v4 = *this;
  if (*this)
    pthread_mutex_lock(*this);
  gettimeofday(&v12, 0);
  v7 = this[1];
  v5 = (timeval *)(this + 1);
  v6 = v7;
  tv_usec = v5->tv_usec;
  if (a2)
    *v5 = v12;
  tv_sec = v12.tv_sec;
  v10 = v12.tv_usec;
  if (v4)
    pthread_mutex_unlock(v4);
  return v10 - tv_usec + 1000000 * (tv_sec - (_QWORD)v6);
}

uint64_t RNBRemote::GetPacket(uint64_t a1, std::string *a2, uint64_t a3, int a4)
{
  char EventBits;
  uint64_t v9;
  int v10;
  char v11;
  __int128 *v12;
  __int128 *v13;
  std::string *p_str;
  std::string::size_type size;
  uint64_t v16;
  std::string::size_type v17;
  size_t v18;
  const void *v19;
  __int128 *v21;
  __int128 v22;
  __int128 v23;
  std::string *v24;
  std::string *v25;
  std::string __str;

  memset(&__str, 0, sizeof(__str));
  if (RNBRemote::GetPacketPayload(a1, &__str))
  {
    EventBits = PThreadEvent::GetEventBits((pthread_mutex_t *)(a1 + 120));
    v9 = 1;
    if (!a4 || (EventBits & 0x40) == 0)
      goto LABEL_45;
    while (1)
    {
      v10 = PThreadEvent::WaitForSetEvents((pthread_mutex_t *)(a1 + 120), 0xA0u, 0);
      if (!v10)
      {
        while (1)
          ;
      }
      v11 = v10;
      if ((v10 & 0x20) != 0 && !RNBRemote::GetPacketPayload(a1, &__str))
        break;
      if (v11 < 0)
      {
        v9 = 2;
        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return v9;
        goto LABEL_46;
      }
    }
  }
  v12 = *(__int128 **)(a1 + 672);
  v13 = *(__int128 **)(a1 + 680);
  if (v12 != v13)
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_str = &__str;
    else
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      size = __str.__r_.__value_.__l.__size_;
    v16 = (uint64_t)v12 + 40;
    while (1)
    {
      if (*(char *)(v16 + 23) < 0)
      {
        v17 = *(_QWORD *)(v16 + 8);
        if (v17 == -1)
          abort();
      }
      else
      {
        v17 = *(unsigned __int8 *)(v16 + 23);
      }
      v18 = size >= v17 ? v17 : size;
      v19 = *(char *)(v16 + 23) >= 0 ? (const void *)v16 : *(const void **)v16;
      if (!memcmp(p_str, v19, v18) && v17 <= size)
        break;
      v21 = (__int128 *)(v16 + 48);
      v16 += 88;
      if (v21 == v13)
        goto LABEL_37;
    }
    v12 = (__int128 *)(v16 - 40);
  }
  if (v12 != v13)
  {
    v22 = *v12;
    v23 = v12[1];
    *(_QWORD *)(a3 + 32) = *((_QWORD *)v12 + 4);
    *(_OWORD *)a3 = v22;
    *(_OWORD *)(a3 + 16) = v23;
    std::string::operator=((std::string *)(a3 + 40), (const std::string *)((char *)v12 + 40));
    std::string::operator=((std::string *)(a3 + 64), (const std::string *)(v12 + 4));
    std::string::operator=(a2, &__str);
    v9 = 0;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_46;
    return v9;
  }
LABEL_37:
  if (DNBLogEnabledForAny(0x800000))
  {
    v24 = &__str;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v24 = (std::string *)__str.__r_.__value_.__r.__words[0];
    _DNBLogThreaded("unimplemented packet: '%s'", (const char *)v24);
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = &__str;
  else
    v25 = (std::string *)__str.__r_.__value_.__r.__words[0];
  RNBRemote::HandlePacket_UNIMPLEMENTED((RNBRemote *)a1, (const char *)v25);
  v9 = 1;
LABEL_45:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
LABEL_46:
    operator delete(__str.__r_.__value_.__l.__data_);
  return v9;
}

uint64_t RNBRemote::GetPacketPayload(uint64_t a1, std::string *a2)
{
  pthread_mutex_t *v4;
  unint64_t v5;
  std::string::size_type v6;
  __int128 v7;
  std::string::size_type v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  std::string *v14;
  std::string *v15;
  int v16;
  uint64_t v17;
  pthread_mutex_t *v18;
  int tv_sec;
  __darwin_suseconds_t tv_usec;
  uint64_t v21;
  int v22;
  const char *v23;
  unint64_t size;
  unint64_t v25;
  unsigned int v26;
  char *v27;
  unsigned __int8 v28;
  unint64_t v29;
  std::string::size_type v30;
  int v31;
  BOOL v32;
  int8x8_t *v33;
  unint64_t v34;
  unsigned int v35;
  char *v36;
  pthread_mutex_t *v37;
  int v38;
  __darwin_suseconds_t v39;
  uint64_t v40;
  int v41;
  const char *v42;
  unint64_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int8x8_t *v46;
  unint64_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int8x16_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int8x8_t *v61;
  unint64_t v62;
  int8x8_t v63;
  int16x8_t v64;
  char *v65;
  int v66;
  int v68;
  const char *v69;
  timeval v70;

  v4 = (pthread_mutex_t *)(a1 + 552);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 552));
  if (!*(_QWORD *)(a1 + 736))
  {
    PThreadEvent::ResetEvents((pthread_mutex_t *)(a1 + 120), 32);
    pthread_mutex_unlock(v4);
    return 1;
  }
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 704) + 8 * (*(_QWORD *)(a1 + 728) / 0xAAuLL))
     + 24 * (*(_QWORD *)(a1 + 728) % 0xAAuLL);
  v6 = a2->__r_.__value_.__r.__words[2];
  v7 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
  v8 = *(_QWORD *)(v5 + 16);
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v5;
  a2->__r_.__value_.__r.__words[2] = v8;
  *(_OWORD *)v5 = v7;
  *(_QWORD *)(v5 + 16) = v6;
  v9 = *(_QWORD *)(a1 + 728);
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 704) + 8 * (v9 / 0xAA)) + 24 * (v9 % 0xAA);
  if (*(char *)(v10 + 23) < 0)
  {
    operator delete(*(void **)v10);
    v9 = *(_QWORD *)(a1 + 728);
  }
  --*(_QWORD *)(a1 + 736);
  v11 = v9 + 1;
  *(_QWORD *)(a1 + 728) = v11;
  if (v11 >= 0x154)
  {
    operator delete(**(void ***)(a1 + 704));
    *(_QWORD *)(a1 + 704) += 8;
    *(_QWORD *)(a1 + 728) -= 170;
  }
  pthread_mutex_unlock(v4);
  if (!*(_QWORD *)(a1 + 736))
    PThreadEvent::ResetEvents((pthread_mutex_t *)(a1 + 120), 32);
  v12 = 0;
  v13 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  v14 = (std::string *)a2->__r_.__value_.__r.__words[0];
  if (v13 >= 0)
    v15 = a2;
  else
    v15 = (std::string *)a2->__r_.__value_.__r.__words[0];
  v16 = v15->__r_.__value_.__s.__data_[0];
  if (v16 > 42)
  {
    if (v16 == 43 || v16 == 45)
      return v12;
LABEL_20:
    if (DNBLogEnabledForAny(0x100000))
    {
      v18 = *(pthread_mutex_t **)(a1 + 488);
      if (v18)
        pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 488));
      gettimeofday(&v70, 0);
      tv_sec = v70.tv_sec;
      tv_usec = v70.tv_usec;
      v21 = *(_QWORD *)(a1 + 496);
      v22 = *(_DWORD *)(a1 + 504);
      *(timeval *)(a1 + 496) = v70;
      if (v18)
        pthread_mutex_unlock(v18);
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = (const char *)a2;
      else
        v23 = (const char *)a2->__r_.__value_.__r.__words[0];
      _DNBLogThreaded("%8u RNBRemote::%s tossing unexpected packet???? %s", tv_usec - v22 + 1000000 * (tv_sec - v21), "GetPacketPayload", v23);
    }
    if (!*(_BYTE *)(a1 + 781))
    {
LABEL_30:
      v12 = 1;
      RNBSocket::Write((RNBSocket *)(a1 + 472), "-", 1uLL);
      return v12;
    }
    return 1;
  }
  if (v16 == 3)
    return v12;
  if (v16 != 36)
    goto LABEL_20;
  if (*(_BYTE *)(a1 + 781))
  {
    v17 = 0;
    goto LABEL_47;
  }
  size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v13 < 0)
    size = a2->__r_.__value_.__l.__size_;
  v25 = size - 2;
  if (size < 2)
  {
LABEL_44:
    if (v13 >= 0)
      v14 = a2;
    v17 = strtol((const char *)v14 + v25, 0, 16);
LABEL_47:
    std::string::erase(a2, 0, 1uLL);
    v30 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    if ((v30 & 0x80u) != 0)
      v30 = a2->__r_.__value_.__l.__size_;
    std::string::erase(a2, v30 - 3, 0xFFFFFFFFFFFFFFFFLL);
    if (*(_BYTE *)(a1 + 781))
      return 0;
    v31 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
    v32 = v31 < 0;
    v33 = (int8x8_t *)a2->__r_.__value_.__r.__words[0];
    if (v31 >= 0)
      v33 = (int8x8_t *)a2;
    v34 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    if (v32)
      v34 = a2->__r_.__value_.__l.__size_;
    if (!v34)
    {
      v35 = 0;
LABEL_80:
      if (v17 == v35)
      {
        RNBSocket::Write((RNBSocket *)(a1 + 472), "+", 1uLL);
        return 0;
      }
      if (DNBLogEnabledForAny(0x20000))
      {
        v68 = DNBTimer::ElapsedMicroSeconds((pthread_mutex_t **)(a1 + 488), 1);
        if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v69 = (const char *)a2;
        else
          v69 = (const char *)a2->__r_.__value_.__r.__words[0];
        _DNBLogThreaded("%8u RNBRemote::%s sending ACK for '%s' (error: packet checksum mismatch  (0x%2.2lx != 0x%2.2x))", v68, "GetPacketPayload", v69, v17, v35);
      }
      goto LABEL_30;
    }
    if (v34 < 8)
    {
      v35 = 0;
      v36 = (char *)v33;
      goto LABEL_78;
    }
    if (v34 >= 0x20)
    {
      v44 = 0uLL;
      v43 = v34 & 0xFFFFFFFFFFFFFFE0;
      v45 = 0uLL;
      v46 = v33 + 2;
      v47 = v34 & 0xFFFFFFFFFFFFFFE0;
      v48 = 0uLL;
      v49 = 0uLL;
      v50 = 0uLL;
      v51 = 0uLL;
      v52 = 0uLL;
      v53 = 0uLL;
      do
      {
        v54 = *(int8x16_t *)v46[-2].i8;
        v55 = vmovl_s8(*(int8x8_t *)v54.i8);
        v56 = vmovl_high_s8(v54);
        v57 = vmovl_s8(*v46);
        v58 = vmovl_high_s8(*(int8x16_t *)v46->i8);
        v49 = vaddw_high_s16(v49, v56);
        v48 = vaddw_s16(v48, *(int16x4_t *)v56.i8);
        v45 = vaddw_high_s16(v45, v55);
        v44 = vaddw_s16(v44, *(int16x4_t *)v55.i8);
        v53 = vaddw_high_s16(v53, v58);
        v52 = vaddw_s16(v52, *(int16x4_t *)v58.i8);
        v51 = vaddw_high_s16(v51, v57);
        v50 = vaddw_s16(v50, *(int16x4_t *)v57.i8);
        v46 += 4;
        v47 -= 32;
      }
      while (v47);
      v35 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v50, v44), vaddq_s32(v52, v48)), vaddq_s32(vaddq_s32(v51, v45), vaddq_s32(v53, v49))));
      if (v34 == v43)
        goto LABEL_80;
      if ((v34 & 0x18) == 0)
      {
        v36 = (char *)v33 + v43;
LABEL_78:
        v65 = (char *)v33 + v34;
        do
        {
          v66 = *v36++;
          v35 += v66;
        }
        while (v36 != v65);
        goto LABEL_80;
      }
    }
    else
    {
      v35 = 0;
      v43 = 0;
    }
    v36 = (char *)v33 + (v34 & 0xFFFFFFFFFFFFFFF8);
    v59 = 0uLL;
    v60 = (int32x4_t)v35;
    v61 = (int8x8_t *)((char *)v33 + v43);
    v62 = v43 - (v34 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v63 = *v61++;
      v64 = vmovl_s8(v63);
      v59 = vaddw_high_s16(v59, v64);
      v60 = vaddw_s16(v60, *(int16x4_t *)v64.i8);
      v62 += 8;
    }
    while (v62);
    v35 = vaddvq_s32(vaddq_s32(v60, v59));
    if (v34 == (v34 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_80;
    goto LABEL_78;
  }
  v26 = v13 >> 31;
  while (1)
  {
    v27 = (v26 & 1) != 0 ? (char *)a2->__r_.__value_.__r.__words[0] : (char *)a2;
    v28 = __tolower(v27[v25]);
    if ((v28 & 0x80) != 0 || (_DefaultRuneLocale.__runetype[v28] & 0x10000) == 0)
      break;
    ++v25;
    v13 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
    v26 = v13 >> 31;
    v29 = a2->__r_.__value_.__l.__size_;
    if (v13 >= 0)
      v29 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    if (v25 >= v29)
    {
      v14 = (std::string *)a2->__r_.__value_.__r.__words[0];
      v25 = v29 - 2;
      goto LABEL_44;
    }
  }
  v12 = 1;
  RNBSocket::Write((RNBSocket *)(a1 + 472), "-", 1uLL);
  if (DNBLogEnabledForAny(0x100000))
  {
    v37 = *(pthread_mutex_t **)(a1 + 488);
    if (v37)
      pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 488));
    gettimeofday(&v70, 0);
    v38 = v70.tv_sec;
    v39 = v70.tv_usec;
    v40 = *(_QWORD *)(a1 + 496);
    v41 = *(_DWORD *)(a1 + 504);
    *(timeval *)(a1 + 496) = v70;
    if (v37)
      pthread_mutex_unlock(v37);
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v42 = (const char *)a2;
    else
      v42 = (const char *)a2->__r_.__value_.__r.__words[0];
    _DNBLogThreaded("%8u RNBRemote::%s error: packet with invalid checksum characters: %s", v39 - v41 + 1000000 * (v38 - v40), "GetPacketPayload", v42);
    return 1;
  }
  return v12;
}

uint64_t RNBRemote::HandlePacket_UNIMPLEMENTED(RNBRemote *this, const char *a2)
{
  pthread_mutex_t *v4;
  int tv_sec;
  __darwin_suseconds_t tv_usec;
  uint64_t v7;
  int v8;
  const char *v9;
  uint64_t v10;
  timeval v12;
  char v13;

  if (DNBLogEnabledForAny(0x40000))
  {
    v4 = (pthread_mutex_t *)*((_QWORD *)this + 61);
    if (v4)
      pthread_mutex_lock(*((pthread_mutex_t **)this + 61));
    gettimeofday(&v12, 0);
    tv_sec = v12.tv_sec;
    tv_usec = v12.tv_usec;
    v7 = *((_QWORD *)this + 62);
    v8 = *((_DWORD *)this + 126);
    *((timeval *)this + 31) = v12;
    if (v4)
      pthread_mutex_unlock(v4);
    v9 = "NULL";
    if (a2)
      v9 = a2;
    _DNBLogThreaded("%8u RNBRemote::%s(\"%s\")", tv_usec - v8 + 1000000 * (tv_sec - v7), "HandlePacket_UNIMPLEMENTED", v9);
  }
  v13 = 0;
  LOBYTE(v12.tv_sec) = 0;
  v10 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)&v12);
  if (v13 < 0)
    operator delete((void *)v12.tv_sec);
  return v10;
}

uint64_t RNBRemote::HandlePacket_ILLFORMED(RNBRemote *this, const char *a2, int a3, const char *a4, const char *a5)
{
  pthread_mutex_t *v9;
  int tv_sec;
  __darwin_suseconds_t tv_usec;
  uint64_t v12;
  int v13;
  uint64_t v14;
  timeval v16;
  char v17;

  if (DNBLogEnabledForAny(0x800000))
  {
    v9 = (pthread_mutex_t *)*((_QWORD *)this + 61);
    if (v9)
      pthread_mutex_lock(*((pthread_mutex_t **)this + 61));
    gettimeofday(&v16, 0);
    tv_sec = v16.tv_sec;
    tv_usec = v16.tv_usec;
    v12 = *((_QWORD *)this + 62);
    v13 = *((_DWORD *)this + 126);
    *((timeval *)this + 31) = v16;
    if (v9)
      pthread_mutex_unlock(v9);
    _DNBLogThreaded("%8u %s:%i ILLFORMED: '%s' (%s)", tv_usec - v13 + 1000000 * (tv_sec - v12), a2, a3, "HandlePacket_ILLFORMED", a4);
  }
  v17 = 3;
  LODWORD(v16.tv_sec) = 3354693;
  v14 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)&v16);
  if (v17 < 0)
    operator delete((void *)v16.tv_sec);
  return v14;
}

uint64_t RNBRemote::HandleAsyncPacket(uint64_t a1, _DWORD *a2)
{
  pthread_mutex_t *v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned __int8 v9;
  uint64_t Packet;
  __darwin_ct_rune_t v12;
  uint64_t (*v13)(_QWORD *, std::string *);
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  _QWORD *v18;
  std::string *v19;
  _BYTE v20[24];
  __int128 v21;
  void *v22[2];
  void *__p[2];
  __int128 v24;
  std::string v25;

  if (DNBLogEnabledForAny(0x100000))
  {
    v4 = *(pthread_mutex_t **)(a1 + 488);
    if (v4)
      pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 488));
    gettimeofday((timeval *)v20, 0);
    v5 = *(_DWORD *)v20;
    v6 = *(_DWORD *)&v20[8];
    v7 = *(_QWORD *)(a1 + 496);
    v8 = *(_DWORD *)(a1 + 504);
    *(_OWORD *)(a1 + 496) = *(_OWORD *)v20;
    if (v4)
      pthread_mutex_unlock(v4);
    _DNBLogThreaded("%8u RNBRemote::%s", v6 - v8 + 1000000 * (v5 - v7), "HandleAsyncPacket");
  }
  if ((v9 & 1) == 0
  {
    DNBTimer::DNBTimer((DNBTimer *)&RNBRemote::HandleAsyncPacket(RNBRemote::PacketEnum *)::g_packetTimer, 1);
    __cxa_atexit((void (*)(void *))DNBTimer::~DNBTimer, &RNBRemote::HandleAsyncPacket(RNBRemote::PacketEnum *)::g_packetTimer, (void *)&_mh_execute_header);
  }
  memset(&v25, 0, sizeof(v25));
  *(_DWORD *)v20 = 0;
  *(_OWORD *)&v20[8] = 0u;
  v21 = 0u;
  *(_OWORD *)v22 = 0u;
  *(_OWORD *)__p = 0u;
  v24 = 0u;
  Packet = RNBRemote::GetPacket(a1, &v25, (uint64_t)v20, 0);
  if (!(_DWORD)Packet)
  {
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!v25.__r_.__value_.__l.__size_)
        goto LABEL_23;
      v12 = *v25.__r_.__value_.__l.__data_;
      if ((v12 & 0x80000000) == 0)
      {
LABEL_16:
        if ((_DefaultRuneLocale.__runetype[v12] & 0x40000) == 0)
        {
LABEL_23:
          if (DNBLogEnabledForAny(9437184))
            _DNBLogThreaded("HandleAsyncPacket (%s);");
          goto LABEL_25;
        }
LABEL_21:
        if (DNBLogEnabledForAny(9437184))
          _DNBLogThreaded("HandleAsyncPacket (\"%s\");");
LABEL_25:
        v14 = *((_QWORD *)&v21 + 1);
        v13 = (uint64_t (*)(_QWORD *, std::string *))v21;
        v15 = BYTE8(v21) & 1;
        if (*((_QWORD *)&v21 + 1))
          v16 = (BYTE8(v21) & 1 | (unint64_t)v21) == 0;
        else
          v16 = 1;
        v17 = !v16;
        if ((_QWORD)v21 || v17)
        {
          if (a2)
            *a2 = *(_DWORD *)v20;
          v18 = (_QWORD *)(a1 + (v14 >> 1));
          if (v15)
            v13 = *(uint64_t (**)(_QWORD *, std::string *))(*v18 + v13);
          if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v19 = &v25;
          else
            v19 = (std::string *)v25.__r_.__value_.__r.__words[0];
          Packet = v13(v18, v19);
          if (SHIBYTE(v24) < 0)
            goto LABEL_43;
        }
        else
        {
          Packet = 0;
          if (SHIBYTE(v24) < 0)
            goto LABEL_43;
        }
LABEL_10:
        if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
          goto LABEL_11;
LABEL_44:
        operator delete(v22[0]);
        if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return Packet;
LABEL_45:
        operator delete(v25.__r_.__value_.__l.__data_);
        return Packet;
      }
    }
    else
    {
      if (!*((_BYTE *)&v25.__r_.__value_.__s + 23))
        goto LABEL_23;
      v12 = v25.__r_.__value_.__s.__data_[0];
      if ((v25.__r_.__value_.__s.__data_[0] & 0x80000000) == 0)
        goto LABEL_16;
    }
    if (!__maskrune(v12, 0x40000uLL))
      goto LABEL_23;
    goto LABEL_21;
  }
  if ((SHIBYTE(v24) & 0x80000000) == 0)
    goto LABEL_10;
LABEL_43:
  operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    goto LABEL_44;
LABEL_11:
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_45;
  return Packet;
}

void DNBTimer::~DNBTimer(pthread_mutex_t **this)
{
  pthread_mutex_t *v1;

  v1 = *this;
  *this = 0;
  if (v1)
  {
    if (pthread_mutex_destroy(v1))
    {
      if (!pthread_mutex_unlock(v1))
        pthread_mutex_destroy(v1);
    }
    operator delete();
  }
}

uint64_t RNBRemote::HandleReceivedPacket(uint64_t a1, _DWORD *a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  std::string *v6;
  uint64_t (*v7)(_QWORD *, std::string *);
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  _QWORD *v12;
  std::string *v13;
  int v15;
  __int128 v16;
  __int128 v17;
  void *v18[2];
  void *__p[2];
  __int128 v20;
  std::string v21;

  if ((v4 & 1) == 0
  {
    DNBTimer::DNBTimer((DNBTimer *)&RNBRemote::HandleReceivedPacket(RNBRemote::PacketEnum *)::g_packetTimer, 1);
    __cxa_atexit((void (*)(void *))DNBTimer::~DNBTimer, &RNBRemote::HandleReceivedPacket(RNBRemote::PacketEnum *)::g_packetTimer, (void *)&_mh_execute_header);
  }
  memset(&v21, 0, sizeof(v21));
  v15 = 0;
  v16 = 0u;
  v17 = 0u;
  *(_OWORD *)v18 = 0u;
  *(_OWORD *)__p = 0u;
  v20 = 0u;
  if (RNBRemote::GetPacket(a1, &v21, (uint64_t)&v15, 0))
  {
    v5 = 1;
    if ((SHIBYTE(v20) & 0x80000000) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
  if (DNBLogEnabledForAny(0x100000))
  {
    v6 = &v21;
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v6 = (std::string *)v21.__r_.__value_.__r.__words[0];
    _DNBLogThreaded("HandleReceivedPacket (\"%s\");", (const char *)v6);
  }
  v8 = *((_QWORD *)&v16 + 1);
  v7 = (uint64_t (*)(_QWORD *, std::string *))v16;
  v9 = BYTE8(v16) & 1;
  if (*((_QWORD *)&v16 + 1))
    v10 = (BYTE8(v16) & 1 | (unint64_t)v16) == 0;
  else
    v10 = 1;
  v11 = !v10;
  if (!(_QWORD)v16 && !v11)
  {
    v5 = 0;
    if ((SHIBYTE(v20) & 0x80000000) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
  if (a2)
    *a2 = v15;
  v12 = (_QWORD *)(a1 + (v8 >> 1));
  if (v9)
    v7 = *(uint64_t (**)(_QWORD *, std::string *))(*v12 + v7);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v21;
  else
    v13 = (std::string *)v21.__r_.__value_.__r.__words[0];
  v5 = v7(v12, v13);
  if (SHIBYTE(v20) < 0)
LABEL_27:
    operator delete(__p[1]);
LABEL_28:
  if (SHIBYTE(__p[0]) < 0)
  {
    operator delete(v18[0]);
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v5;
LABEL_32:
    operator delete(v21.__r_.__value_.__l.__data_);
    return v5;
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_32;
  return v5;
}

pthread_mutex_t *RNBRemote::CommDataReceived(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t *v4;
  std::string *v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  char v9;
  std::string::size_type size;
  std::string::size_type v11;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  int v15;
  std::string::size_type v16;
  std::string::size_type v17;
  int v18;
  std::string::size_type v19;
  std::string *v20;
  std::string *v21;
  pthread_mutex_t *v22;
  int tv_sec;
  __darwin_suseconds_t tv_usec;
  uint64_t v25;
  int v26;
  size_t v27;
  size_t v28;
  void *p_dst;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  timeval *v35;
  unint64_t v36;
  unint64_t v37;
  std::string::size_type v38;
  std::string *v39;
  std::string *v40;
  size_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  const std::string::value_type *v45;
  std::string::size_type v46;
  pthread_mutex_t *result;
  std::string *v48;
  pthread_mutex_t *v49;
  timeval *v50;
  timeval __dst;
  int64_t v52;
  std::string v53;

  v4 = (pthread_mutex_t *)(a1 + 552);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 552));
  memset(&v53, 0, sizeof(v53));
  if (*(char *)(a1 + 767) < 0)
  {
    v5 = (std::string *)(a1 + 744);
    if (!*(_QWORD *)(a1 + 752))
      goto LABEL_4;
    goto LABEL_3;
  }
  v5 = (std::string *)(a1 + 744);
  if (*(_BYTE *)(a1 + 767))
  {
LABEL_3:
    v53 = *v5;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
  }
LABEL_4:
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)a2;
  else
    v7 = *(const std::string::value_type **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  std::string::append(&v53, v7, v8);
  v9 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
  if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v53.__r_.__value_.__r.__words[2]);
  else
    size = v53.__r_.__value_.__l.__size_;
  if (!size)
    goto LABEL_96;
  v48 = v5;
  v49 = v4;
  v11 = 0;
  v50 = (timeval *)(a1 + 496);
  while (1)
  {
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &v53;
    else
      v14 = (std::string *)v53.__r_.__value_.__r.__words[0];
    v15 = v14->__r_.__value_.__s.__data_[v11];
    if (v15 > 42)
    {
      if (v15 != 45)
      {
        v16 = v11;
        if (v15 != 43)
          goto LABEL_34;
      }
      goto LABEL_33;
    }
    if (v15 != 3)
      break;
LABEL_33:
    v16 = v11 + 1;
    if (v11 == -2)
      goto LABEL_74;
LABEL_34:
    if (v16 <= v11)
    {
      if (DNBLogEnabledForAny(0x40000))
      {
        v22 = *(pthread_mutex_t **)(a1 + 488);
        if (v22)
          pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 488));
        gettimeofday(&__dst, 0);
        tv_sec = __dst.tv_sec;
        tv_usec = __dst.tv_usec;
        v25 = *(_QWORD *)(a1 + 496);
        v26 = *(_DWORD *)(a1 + 504);
        *v50 = __dst;
        if (v22)
          pthread_mutex_unlock(v22);
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v12 = &v53;
        else
          v12 = (std::string *)v53.__r_.__value_.__r.__words[0];
        _DNBLogThreaded("%8d RNBRemote::%s tossing junk byte at %c", tv_usec - v26 + 1000000 * (tv_sec - v25), "CommDataReceived", v12->__r_.__value_.__s.__data_[v11]);
      }
      v13 = v11 + 1;
      goto LABEL_20;
    }
    v18 = *(_DWORD *)(a1 + 668);
    *(_DWORD *)(a1 + 668) = v18 + 1;
    v13 = v11 + 1;
    v19 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
    if (v16 != v11 + 1
      || v18
      || ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? (v20 = &v53)
        : (v20 = (std::string *)v53.__r_.__value_.__r.__words[0]),
          v20->__r_.__value_.__s.__data_[v11] != 43))
    {
      if ((*((_BYTE *)&v53.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        v19 = v53.__r_.__value_.__l.__size_;
        if (v53.__r_.__value_.__l.__size_ < v11)
          goto LABEL_101;
        v21 = (std::string *)v53.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (v11 > HIBYTE(v53.__r_.__value_.__r.__words[2]))
          goto LABEL_101;
        v21 = &v53;
      }
      v27 = v19 - v11;
      if (v27 >= v16 - v11)
        v28 = v16 - v11;
      else
        v28 = v27;
      if (v28 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_101;
      if (v28 >= 0x17)
      {
        v30 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v28 | 7) != 0x17)
          v30 = v28 | 7;
        v31 = v30 + 1;
        p_dst = operator new(v30 + 1);
        *(_QWORD *)&__dst.tv_usec = v28;
        v52 = v31 | 0x8000000000000000;
        __dst.tv_sec = (__darwin_time_t)p_dst;
      }
      else
      {
        HIBYTE(v52) = v28;
        p_dst = &__dst;
        if (!v28)
          goto LABEL_62;
      }
      memmove(p_dst, (char *)v21 + v11, v28);
LABEL_62:
      *((_BYTE *)p_dst + v28) = 0;
      v32 = *(_QWORD *)(a1 + 704);
      if (*(_QWORD *)(a1 + 712) == v32)
        v33 = 0;
      else
        v33 = 170 * ((*(_QWORD *)(a1 + 712) - v32) >> 3) - 1;
      v34 = *(_QWORD *)(a1 + 736) + *(_QWORD *)(a1 + 728);
      if (v33 == v34)
      {
        std::deque<std::string>::__add_back_capacity(a1 + 696);
        v32 = *(_QWORD *)(a1 + 704);
        v34 = *(_QWORD *)(a1 + 736) + *(_QWORD *)(a1 + 728);
      }
      v35 = (timeval *)(*(_QWORD *)(v32 + 8 * (v34 / 0xAA)) + 24 * (v34 % 0xAA));
      *v35 = __dst;
      v35[1].tv_sec = v52;
      ++*(_QWORD *)(a1 + 736);
      if (DNBLogEnabledForAny(0x800000))
      {
        v36 = *(_QWORD *)(a1 + 736) + *(_QWORD *)(a1 + 728) - 1;
        v37 = *(_QWORD *)(*(_QWORD *)(a1 + 704) + 8 * (v36 / 0xAA)) + 24 * (v36 % 0xAA);
        if (*(char *)(v37 + 23) < 0)
          v37 = *(_QWORD *)v37;
        _DNBLogThreaded("getpkt: %s", (const char *)v37);
      }
      v13 = v16;
    }
LABEL_20:
    v11 = v13;
    if (v13 >= size)
      goto LABEL_95;
  }
  v16 = v11;
  if (v15 != 36)
    goto LABEL_34;
  v17 = std::string::find(&v53, 35, v11 + 1);
  if (v17 != -1)
  {
    v16 = v17 + 3;
    if (v17 + 3 <= size && v17 != -4)
      goto LABEL_34;
  }
LABEL_74:
  if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v38 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
    v39 = v48;
    if (v11 <= HIBYTE(v53.__r_.__value_.__r.__words[2]))
    {
      v40 = &v53;
      goto LABEL_79;
    }
    goto LABEL_101;
  }
  v38 = v53.__r_.__value_.__l.__size_;
  v39 = v48;
  if (v53.__r_.__value_.__l.__size_ < v11)
    goto LABEL_101;
  v40 = (std::string *)v53.__r_.__value_.__r.__words[0];
LABEL_79:
  v41 = v38 - v11;
  if (v38 - v11 > 0x7FFFFFFFFFFFFFF7)
LABEL_101:
    abort();
  if (v41 >= 0x17)
  {
    v43 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v41 | 7) != 0x17)
      v43 = v41 | 7;
    v44 = v43 + 1;
    v42 = operator new(v43 + 1);
    *(_QWORD *)&__dst.tv_usec = v41;
    v52 = v44 | 0x8000000000000000;
    __dst.tv_sec = (__darwin_time_t)v42;
    goto LABEL_86;
  }
  HIBYTE(v52) = v38 - v11;
  v42 = &__dst;
  if (v38 != v11)
LABEL_86:
    memmove(v42, (char *)v40 + v11, v41);
  *((_BYTE *)v42 + v41) = 0;
  if (v52 >= 0)
    v45 = (const std::string::value_type *)&__dst;
  else
    v45 = (const std::string::value_type *)__dst.tv_sec;
  if (v52 >= 0)
    v46 = HIBYTE(v52);
  else
    v46 = *(_QWORD *)&__dst.tv_usec;
  std::string::append(v39, v45, v46);
  if (SHIBYTE(v52) < 0)
    operator delete((void *)__dst.tv_sec);
LABEL_95:
  v9 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
  v4 = v49;
LABEL_96:
  if (v9 < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  result = (pthread_mutex_t *)pthread_mutex_unlock(v4);
  if (*(_QWORD *)(a1 + 736))
    return PThreadEvent::SetEvents((pthread_mutex_t *)(a1 + 120), 32);
  return result;
}

uint64_t RNBRemote::StartReadRemoteDataThread(RNBRemote *this)
{
  pthread_mutex_t *v2;
  int tv_sec;
  __darwin_suseconds_t tv_usec;
  uint64_t v5;
  int v6;
  uint64_t result;
  timeval v8;

  if (DNBLogEnabledForAny(0x100000))
  {
    v2 = (pthread_mutex_t *)*((_QWORD *)this + 61);
    if (v2)
      pthread_mutex_lock(*((pthread_mutex_t **)this + 61));
    gettimeofday(&v8, 0);
    tv_sec = v8.tv_sec;
    tv_usec = v8.tv_usec;
    v5 = *((_QWORD *)this + 62);
    v6 = *((_DWORD *)this + 126);
    *((timeval *)this + 31) = v8;
    if (v2)
      pthread_mutex_unlock(v2);
    _DNBLogThreaded("%8u RNBRemote::%s called", tv_usec - v6 + 1000000 * (tv_sec - v5), "StartReadRemoteDataThread");
  }
  result = PThreadEvent::GetEventBits((pthread_mutex_t *)((char *)this + 120));
  if ((result & 0x40) == 0)
  {
    PThreadEvent::ResetEvents((pthread_mutex_t *)((char *)this + 120), 128);
    if (pthread_create((pthread_t *)this + 96, 0, (void *(__cdecl *)(void *))RNBRemote::ThreadFunctionReadRemoteData, this))
    {
      PThreadEvent::ResetEvents((pthread_mutex_t *)((char *)this + 120), 64);
      return (uint64_t)PThreadEvent::SetEvents((pthread_mutex_t *)((char *)this + 120), 128);
    }
    else
    {
      return PThreadEvent::WaitForSetEvents((pthread_mutex_t *)((char *)this + 120), 0x40u, 0);
    }
  }
  return result;
}

uint64_t RNBRemote::ThreadFunctionReadRemoteData(RNBRemote *this, void *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _opaque_pthread_t *v7;
  _opaque_pthread_t *v8;
  int v9;
  uint64_t v10;
  char v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v15;
  sched_param v16;
  void *__p;
  uint64_t v18;
  uint64_t v19;

  if (DNBLogEnabledForAny(0x100000))
    _DNBLogThreaded("RNBRemote::%s (%p): thread starting...", "ThreadFunctionReadRemoteData", this);
  v4 = g_remoteSP;
  v3 = (std::__shared_weak_count *)qword_1000716A0;
  if (qword_1000716A0)
  {
    v5 = (unint64_t *)(qword_1000716A0 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  if (v4)
  {
    pthread_setname_np("read gdb-remote packets thread");
    v15 = 0;
    v7 = pthread_self();
    if (!pthread_getschedparam(v7, &v15, &v16))
    {
      v16.sched_priority = 47;
      v8 = pthread_self();
      pthread_setschedparam(v8, v15, &v16);
    }
    PThreadEvent::SetEvents((pthread_mutex_t *)(v4 + 120), 64);
    while (1)
    {
      __p = 0;
      v18 = 0;
      v19 = 0;
      v9 = RNBSocket::Read((int *)(v4 + 472), (uint64_t)&__p);
      v10 = HIBYTE(v19);
      v11 = HIBYTE(v19);
      if (!v9)
      {
        if (v19 < 0)
          v10 = v18;
        if (v10)
        {
          RNBRemote::CommDataReceived(v4, (uint64_t)&__p);
          v11 = HIBYTE(v19);
        }
      }
      if (v11 < 0)
        operator delete(__p);
      if (v9 == 2)
        break;
      if (v9 == 1)
      {
        if (DNBLogEnabledForAny(0x100000))
          _DNBLogThreaded("RNBSocket::GetCommData returned error %u");
        goto LABEL_23;
      }
    }
    if (DNBLogEnabledForAny(0x100000))
      _DNBLogThreaded("RNBSocket::GetCommData returned not connected...");
LABEL_23:
    PThreadEvent::ResetEvents((pthread_mutex_t *)(v4 + 120), 64);
    PThreadEvent::SetEvents((pthread_mutex_t *)(v4 + 120), 128);
  }
  if (DNBLogEnabledForAny(0x100000))
    _DNBLogThreaded("RNBRemote::%s (%p): thread exiting...", "ThreadFunctionReadRemoteData", this);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return 0;
}

void decode_binary_data(const char *__s@<X0>, size_t a2@<X1>, unint64_t *a3@<X8>)
{
  size_t v3;
  const char *v4;
  _BYTE *v6;
  uint64_t v7;
  const char *v8;
  size_t v9;
  int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  char *v19;
  _BYTE *v20;
  char *v21;
  char v22;
  unint64_t v23;
  _OWORD *v24;
  __int128 *v25;
  unint64_t v26;
  __int128 v27;
  _QWORD *v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (a2)
  {
    v3 = a2;
    v4 = __s;
    if (a2 != -1 || (v3 = strlen(__s)) != 0)
    {
      v6 = 0;
      while (1)
      {
        v8 = v4;
        v9 = v3;
        v11 = *(unsigned __int8 *)v4++;
        v10 = v11;
        if (--v3 && v10 == 125)
        {
          v3 = v9 - 2;
          v4 = v8 + 2;
          LOBYTE(v10) = v8[1] ^ 0x20;
        }
        v12 = a3[2];
        if ((unint64_t)v6 >= v12)
          break;
        *v6 = v10;
        v7 = (uint64_t)(v6 + 1);
LABEL_6:
        a3[1] = v7;
        v6 = (_BYTE *)v7;
        if (!v3)
          return;
      }
      v13 = *a3;
      v14 = (unint64_t)&v6[-*a3];
      v15 = v14 + 1;
      if ((uint64_t)(v14 + 1) < 0)
        abort();
      v16 = v12 - v13;
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x3FFFFFFFFFFFFFFFLL)
        v17 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v17 = v15;
      if (v17)
        v18 = operator new(v17);
      else
        v18 = 0;
      v19 = (char *)v18 + v14;
      *((_BYTE *)v18 + v14) = v10;
      v7 = (uint64_t)v18 + v14 + 1;
      if (v6 == (_BYTE *)v13)
      {
LABEL_29:
        *a3 = (unint64_t)v19;
        a3[1] = v7;
        a3[2] = (unint64_t)v18 + v17;
        if (v6)
          operator delete(v6);
        goto LABEL_6;
      }
      if (v14 < 8
        || (char *)v18 + v14 - 1 - &v6[~v13] > (unint64_t)v18 + v14 - 1
        || v13 > (unint64_t)(v6 - 1)
        || v13 - (unint64_t)v18 < 0x20)
      {
        v20 = v6;
        goto LABEL_26;
      }
      if (v14 >= 0x20)
      {
        v23 = v14 & 0xFFFFFFFFFFFFFFE0;
        v24 = (char *)v18 + v14 - 16;
        v25 = (__int128 *)(v6 - 16);
        v26 = v14 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v27 = *v25;
          *(v24 - 1) = *(v25 - 1);
          *v24 = v27;
          v24 -= 2;
          v25 -= 2;
          v26 -= 32;
        }
        while (v26);
        if (v14 == v23)
          goto LABEL_28;
        if ((v14 & 0x18) == 0)
        {
          v19 -= v23;
          v20 = &v6[-v23];
LABEL_26:
          v21 = v19 - 1;
          do
          {
            v22 = *--v20;
            *v21-- = v22;
          }
          while (v20 != (_BYTE *)v13);
LABEL_28:
          v6 = (_BYTE *)*a3;
          v19 = (char *)v18;
          goto LABEL_29;
        }
      }
      else
      {
        v23 = 0;
      }
      v20 = &v6[-(v14 & 0xFFFFFFFFFFFFFFF8)];
      v19 -= v14 & 0xFFFFFFFFFFFFFFF8;
      v28 = &v6[-v23 - v13 - 8 + (_QWORD)v18];
      v29 = (uint64_t *)&v6[-v23 - 8];
      v30 = v23 - (v14 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v31 = *v29--;
        *v28-- = v31;
        v30 += 8;
      }
      while (v30);
      if (v14 == (v14 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_28;
      goto LABEL_26;
    }
  }
}

void std::vector<unsigned char>::push_back[abi:nn180100](_QWORD *a1, char *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  __int128 *v17;
  _OWORD *v18;
  unint64_t v19;
  __int128 v20;
  char *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char v26;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *v5 = *a2;
    v7 = (uint64_t)(v5 + 1);
    goto LABEL_32;
  }
  v8 = (char *)*a1;
  v9 = (unint64_t)&v5[-*a1];
  v10 = v9 + 1;
  if ((uint64_t)(v9 + 1) < 0)
    abort();
  v11 = v4 - (_QWORD)v8;
  if (2 * v11 > v10)
    v10 = 2 * v11;
  if (v11 >= 0x3FFFFFFFFFFFFFFFLL)
    v12 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
    v13 = operator new(v12);
  else
    v13 = 0;
  v14 = &v13[v9];
  v15 = &v13[v12];
  v13[v9] = *a2;
  v7 = (uint64_t)&v13[v9 + 1];
  if (v5 == v8)
  {
    v13 += v9;
    goto LABEL_30;
  }
  if (v9 >= 8 && (unint64_t)(v8 - v13) >= 0x20)
  {
    if (v9 < 0x20)
    {
      v16 = 0;
      goto LABEL_22;
    }
    v16 = v9 & 0xFFFFFFFFFFFFFFE0;
    v17 = (__int128 *)(v5 - 16);
    v18 = &v13[v5 - 16 - v8];
    v19 = v9 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v20 = *v17;
      *(v18 - 1) = *(v17 - 1);
      *v18 = v20;
      v18 -= 2;
      v17 -= 2;
      v19 -= 32;
    }
    while (v19);
    if (v9 == v16)
      goto LABEL_29;
    if ((v9 & 0x18) != 0)
    {
LABEL_22:
      v6 = &v5[-(v9 & 0xFFFFFFFFFFFFFFF8)];
      v14 -= v9 & 0xFFFFFFFFFFFFFFF8;
      v21 = &v5[-v16 - 8];
      v22 = &v13[v21 - v8];
      v23 = v16 - (v9 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v24 = *(_QWORD *)v21;
        v21 -= 8;
        *v22-- = v24;
        v23 += 8;
      }
      while (v23);
      if (v9 == (v9 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_29;
      goto LABEL_27;
    }
    v14 -= v16;
    v6 = &v5[-v16];
  }
LABEL_27:
  v25 = v14 - 1;
  do
  {
    v26 = *--v6;
    *v25-- = v26;
  }
  while (v6 != v8);
LABEL_29:
  v6 = (char *)*a1;
LABEL_30:
  *a1 = v13;
  a1[1] = v7;
  a1[2] = v15;
  if (v6)
    operator delete(v6);
LABEL_32:
  a1[1] = v7;
}

void json_string_quote_metachars(const std::string *a1@<X0>, std::string *a2@<X8>)
{
  const std::string::value_type *v2;
  int v4;
  uint64_t v5;
  std::string::value_type v6;
  int v7;

  v2 = (const std::string::value_type *)a1;
  if (std::string::find(a1, 34, 0) == -1)
  {
    if (v2[23] < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v2;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v2 + 2);
    }
  }
  else
  {
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    v4 = v2[23];
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = *((_QWORD *)v2 + 1);
    if (v4 < 0)
      v2 = *(const std::string::value_type **)v2;
    for (; v5; --v5)
    {
      v7 = *(unsigned __int8 *)v2++;
      v6 = v7;
      if (v7 == 34)
        std::string::push_back(a2, 92);
      std::string::push_back(a2, v6);
    }
  }
}

void **std::vector<register_map_entry>::~vector[abi:nn180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 3);
        if (v5)
        {
          *((_QWORD *)v3 - 2) = v5;
          operator delete(v5);
        }
        v6 = (void *)*((_QWORD *)v3 - 6);
        if (v6)
        {
          *((_QWORD *)v3 - 5) = v6;
          operator delete(v6);
        }
        v3 -= 128;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

BOOL RNBRemote::InitializeRegisters(RNBRemote *this, int a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  const void *v22;
  size_t v23;
  const void *v24;
  const void **v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  const void *v33;
  int64_t v34;
  char *v35;
  char *v36;
  const void *v37;
  int64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  const char **v43;
  const char *v44;
  uint64_t v45;
  unsigned int v46;
  size_t v47;
  size_t v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  char **v52;
  char **v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  _DWORD *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _BYTE *v63;
  _DWORD *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  _OWORD *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  int v73;
  const char **v74;
  const char *v75;
  uint64_t v76;
  _DWORD *v77;
  size_t v78;
  size_t v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  char **v83;
  char **v84;
  int v85;
  unint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  _BYTE *v93;
  _DWORD *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  _OWORD *v99;
  char *v100;
  uint64_t v101;
  __int128 v102;
  int v103;
  uint64_t v104;
  int v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t *v109;
  int v110;
  uint64_t v111;
  const void *__dst[2];
  unint64_t v113;
  _BYTE v114[80];
  __int128 v115;
  __int128 v116;
  __int128 v117;
  char **v118;
  char *v119[2];
  unint64_t v120;
  const void **v121;

  v2 = *((_DWORD *)this + 3);
  if (v2)
  {
    v106 = *((_DWORD *)this + 3);
    if (DNBLogEnabledForAny(0x400000))
      _DNBLogThreaded("RNBRemote::%s() getting native registers from DNB interface", "InitializeRegisters");
    v4 = g_dynamic_register_map;
    v5 = qword_100071828;
    if (a2)
    {
      v6 = g_dynamic_register_map;
      if (qword_100071828 != g_dynamic_register_map)
      {
        do
        {
          v7 = *(void **)(v5 - 24);
          if (v7)
          {
            *(_QWORD *)(v5 - 16) = v7;
            operator delete(v7);
          }
          v8 = *(void **)(v5 - 48);
          if (v8)
          {
            *(_QWORD *)(v5 - 40) = v8;
            operator delete(v8);
          }
          v5 -= 128;
        }
        while (v5 != v4);
        v6 = g_dynamic_register_map;
      }
      qword_100071828 = v4;
      g_reg_entries = 0;
      g_num_reg_entries = 0;
      v5 = v4;
      v4 = v6;
    }
    v2 = v106;
    if (v4 == v5)
    {
      v120 = 0;
      v9 = DNBGetRegisterSetInfo(&v120);
      v10 = v120;
      if (!v120 || !v9)
        RNBRemote::InitializeRegisters();
      v11 = 0;
      v12 = 0;
      v110 = 0;
      v119[0] = 0;
      v119[1] = 0;
      v118 = v119;
      v107 = v9;
      do
      {
        v13 = v9 + 24 * v12;
        v15 = *(_QWORD *)(v13 + 8);
        v14 = (_QWORD *)(v13 + 8);
        if (v15)
        {
          v109 = (unint64_t *)(v9 + 24 * v12 + 16);
          if (*v109)
          {
            v108 = v12;
            v16 = 0;
            v17 = 1;
            while (1)
            {
              *(_DWORD *)v114 = v110 + v17 - 1;
              *(_DWORD *)&v114[4] = v11;
              v18 = *v14 + 72 * v16;
              *(_OWORD *)&v114[8] = *(_OWORD *)v18;
              v19 = *(_OWORD *)(v18 + 16);
              v20 = *(_OWORD *)(v18 + 32);
              v21 = *(_OWORD *)(v18 + 48);
              *(_QWORD *)&v114[72] = *(_QWORD *)(v18 + 64);
              *(_OWORD *)&v114[40] = v20;
              *(_OWORD *)&v114[56] = v21;
              *(_OWORD *)&v114[24] = v19;
              v115 = 0u;
              v116 = 0u;
              v117 = 0u;
              v22 = *(const void **)&v114[16];
              v23 = strlen(*(const char **)&v114[16]);
              if (v23 > 0x7FFFFFFFFFFFFFF7)
LABEL_144:
                abort();
              v24 = (const void *)v23;
              if (v23 >= 0x17)
              {
                v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v23 | 7) != 0x17)
                  v26 = v23 | 7;
                v27 = v26 + 1;
                v25 = (const void **)operator new(v26 + 1);
                __dst[1] = v24;
                v113 = v27 | 0x8000000000000000;
                __dst[0] = v25;
              }
              else
              {
                HIBYTE(v113) = v23;
                v25 = __dst;
                if (!v23)
                  goto LABEL_32;
              }
              memmove(v25, v22, (size_t)v24);
LABEL_32:
              *((_BYTE *)v24 + (_QWORD)v25) = 0;
              v121 = __dst;
              *((_DWORD *)std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v118, __dst, (uint64_t)&std::piecewise_construct, (_OWORD **)&v121)+ 14) = v110 + v17 - 1;
              if (SHIBYTE(v113) < 0)
                operator delete((void *)__dst[0]);
              if (*(_QWORD *)&v114[64])
                v28 = 0;
              else
                v28 = *(_DWORD *)&v114[36];
              v29 = qword_100071828;
              if ((unint64_t)qword_100071828 >= unk_100071830)
              {
                v41 = std::vector<register_map_entry>::__push_back_slow_path<register_map_entry const&>(&g_dynamic_register_map, (uint64_t)v114);
              }
              else
              {
                *(_OWORD *)qword_100071828 = *(_OWORD *)v114;
                v30 = *(_OWORD *)&v114[16];
                v31 = *(_OWORD *)&v114[32];
                v32 = *(_OWORD *)&v114[64];
                *(_OWORD *)(v29 + 48) = *(_OWORD *)&v114[48];
                *(_OWORD *)(v29 + 64) = v32;
                *(_OWORD *)(v29 + 16) = v30;
                *(_OWORD *)(v29 + 32) = v31;
                *(_QWORD *)(v29 + 88) = 0;
                *(_QWORD *)(v29 + 96) = 0;
                *(_QWORD *)(v29 + 80) = 0;
                v33 = (const void *)v115;
                v34 = *((_QWORD *)&v115 + 1) - v115;
                if (*((_QWORD *)&v115 + 1) != (_QWORD)v115)
                {
                  if (v34 < 0)
                    goto LABEL_144;
                  v35 = (char *)operator new(*((_QWORD *)&v115 + 1) - v115);
                  *(_QWORD *)(v29 + 80) = v35;
                  *(_QWORD *)(v29 + 88) = v35;
                  v36 = &v35[4 * (v34 >> 2)];
                  *(_QWORD *)(v29 + 96) = v36;
                  memcpy(v35, v33, v34);
                  *(_QWORD *)(v29 + 88) = v36;
                }
                *(_QWORD *)(v29 + 104) = 0;
                *(_QWORD *)(v29 + 112) = 0;
                *(_QWORD *)(v29 + 120) = 0;
                v37 = (const void *)*((_QWORD *)&v116 + 1);
                v38 = v117 - *((_QWORD *)&v116 + 1);
                if ((_QWORD)v117 != *((_QWORD *)&v116 + 1))
                {
                  if (v38 < 0)
                    goto LABEL_144;
                  v39 = (char *)operator new(v117 - *((_QWORD *)&v116 + 1));
                  *(_QWORD *)(v29 + 104) = v39;
                  *(_QWORD *)(v29 + 112) = v39;
                  v40 = &v39[4 * (v38 >> 2)];
                  *(_QWORD *)(v29 + 120) = v40;
                  memcpy(v39, v37, v38);
                  *(_QWORD *)(v29 + 112) = v40;
                }
                v41 = v29 + 128;
              }
              qword_100071828 = v41;
              if (*((_QWORD *)&v116 + 1))
              {
                *(_QWORD *)&v117 = *((_QWORD *)&v116 + 1);
                operator delete(*((void **)&v116 + 1));
              }
              if ((_QWORD)v115)
              {
                *((_QWORD *)&v115 + 1) = v115;
                operator delete((void *)v115);
              }
              v11 += v28;
              v16 = v17++;
              if (*v109 <= v16)
              {
                v10 = v120;
                v110 = v110 + v17 - 1;
                v9 = v107;
                v12 = v108;
                break;
              }
            }
          }
        }
        ++v12;
      }
      while (v12 < v10);
      v42 = g_dynamic_register_map;
      v111 = qword_100071828;
      if (g_dynamic_register_map != qword_100071828)
      {
LABEL_53:
        v43 = *(const char ***)(v42 + 64);
        if (!v43)
          goto LABEL_100;
        v44 = *v43;
        if (!*v43)
          goto LABEL_96;
        v45 = 0;
        v46 = -1;
        while (2)
        {
          v47 = strlen(v44);
          if (v47 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_144;
          v48 = v47;
          if (v47 >= 0x17)
          {
            v50 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v47 | 7) != 0x17)
              v50 = v47 | 7;
            v51 = v50 + 1;
            v49 = operator new(v50 + 1);
            *(_QWORD *)&v114[8] = v48;
            *(_QWORD *)&v114[16] = v51 | 0x8000000000000000;
            *(_QWORD *)v114 = v49;
          }
          else
          {
            v114[23] = v47;
            v49 = v114;
            if (!v47)
            {
LABEL_65:
              v49[v48] = 0;
              v52 = (char **)std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::find<std::string>((uint64_t)&v118, (uint64_t)v114);
              v53 = v52;
              if ((v114[23] & 0x80000000) != 0)
              {
                operator delete(*(void **)v114);
                if (v119 == v53)
                  goto LABEL_56;
              }
              else if (v119 == v52)
              {
                goto LABEL_56;
              }
              v54 = *((unsigned int *)v53 + 14);
              v56 = *(char **)(v42 + 88);
              v55 = *(_QWORD *)(v42 + 96);
              if ((unint64_t)v56 >= v55)
              {
                v58 = *(char **)(v42 + 80);
                v59 = (v56 - v58) >> 2;
                v60 = v59 + 1;
                if ((unint64_t)(v59 + 1) >> 62)
                  goto LABEL_144;
                v61 = v55 - (_QWORD)v58;
                if (v61 >> 1 > v60)
                  v60 = v61 >> 1;
                if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
                  v62 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v62 = v60;
                if (v62)
                {
                  if (v62 >> 62)
LABEL_146:
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  v63 = operator new(4 * v62);
                }
                else
                {
                  v63 = 0;
                }
                v64 = &v63[4 * v59];
                *v64 = v54;
                v57 = v64 + 1;
                if (v56 != v58)
                {
                  v65 = v56 - v58 - 4;
                  if (v65 < 0x2C)
                    goto LABEL_149;
                  if ((unint64_t)(v58 - v63) < 0x20)
                    goto LABEL_149;
                  v66 = (v65 >> 2) + 1;
                  v67 = 4 * (v66 & 0x7FFFFFFFFFFFFFF8);
                  v68 = &v56[-v67];
                  v64 = (_DWORD *)((char *)v64 - v67);
                  v69 = &v63[4 * v59 - 16];
                  v70 = v56 - 16;
                  v71 = v66 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v72 = *(_OWORD *)v70;
                    *(v69 - 1) = *((_OWORD *)v70 - 1);
                    *v69 = v72;
                    v69 -= 2;
                    v70 -= 32;
                    v71 -= 8;
                  }
                  while (v71);
                  v56 = v68;
                  if (v66 != (v66 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_149:
                    do
                    {
                      v73 = *((_DWORD *)v56 - 1);
                      v56 -= 4;
                      *--v64 = v73;
                    }
                    while (v56 != v58);
                  }
                }
                *(_QWORD *)(v42 + 80) = v64;
                *(_QWORD *)(v42 + 88) = v57;
                *(_QWORD *)(v42 + 96) = &v63[4 * v62];
                if (v58)
                  operator delete(v58);
              }
              else
              {
                *(_DWORD *)v56 = v54;
                v57 = v56 + 4;
              }
              *(_QWORD *)(v42 + 88) = v57;
              if (v54 < (qword_100071828 - g_dynamic_register_map) >> 7
                && v46 >= *(_DWORD *)(v42 + 40) + *(_DWORD *)(g_dynamic_register_map + (v54 << 7) + 4))
              {
                v46 = *(_DWORD *)(v42 + 40) + *(_DWORD *)(g_dynamic_register_map + (v54 << 7) + 4);
              }
LABEL_56:
              ++v45;
              v44 = *(const char **)(*(_QWORD *)(v42 + 64) + 8 * v45);
              if (v44)
                continue;
              if (v46 == -1)
              {
LABEL_96:
                if (DNBLogEnabled())
                  _DNBLogThreaded("no offset was calculated entry for register %s", *(const char **)(v42 + 16));
                v46 = -1;
              }
              *(_DWORD *)(v42 + 4) = v46;
LABEL_100:
              v74 = *(const char ***)(v42 + 72);
              if (v74)
              {
                v75 = *v74;
                if (*v74)
                {
                  v76 = 0;
                  while (1)
                  {
                    v78 = strlen(v75);
                    if (v78 > 0x7FFFFFFFFFFFFFF7)
                      goto LABEL_144;
                    v79 = v78;
                    if (v78 >= 0x17)
                      break;
                    v114[23] = v78;
                    v80 = v114;
                    if (v78)
                      goto LABEL_113;
LABEL_114:
                    v80[v79] = 0;
                    v83 = (char **)std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::find<std::string>((uint64_t)&v118, (uint64_t)v114);
                    v84 = v83;
                    if ((v114[23] & 0x80000000) != 0)
                    {
                      operator delete(*(void **)v114);
                      if (v119 == v84)
                        goto LABEL_105;
                    }
                    else if (v119 == v83)
                    {
                      goto LABEL_105;
                    }
                    v85 = *((_DWORD *)v84 + 14);
                    v87 = *(char **)(v42 + 112);
                    v86 = *(_QWORD *)(v42 + 120);
                    if ((unint64_t)v87 < v86)
                    {
                      *(_DWORD *)v87 = v85;
                      v77 = v87 + 4;
                    }
                    else
                    {
                      v88 = *(char **)(v42 + 104);
                      v89 = (v87 - v88) >> 2;
                      v90 = v89 + 1;
                      if ((unint64_t)(v89 + 1) >> 62)
                        goto LABEL_144;
                      v91 = v86 - (_QWORD)v88;
                      if (v91 >> 1 > v90)
                        v90 = v91 >> 1;
                      if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFFCLL)
                        v92 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v92 = v90;
                      if (v92)
                      {
                        if (v92 >> 62)
                          goto LABEL_146;
                        v93 = operator new(4 * v92);
                      }
                      else
                      {
                        v93 = 0;
                      }
                      v94 = &v93[4 * v89];
                      *v94 = v85;
                      v77 = v94 + 1;
                      if (v87 != v88)
                      {
                        v95 = v87 - v88 - 4;
                        if (v95 < 0x2C)
                          goto LABEL_150;
                        if ((unint64_t)(v88 - v93) < 0x20)
                          goto LABEL_150;
                        v96 = (v95 >> 2) + 1;
                        v97 = 4 * (v96 & 0x7FFFFFFFFFFFFFF8);
                        v98 = &v87[-v97];
                        v94 = (_DWORD *)((char *)v94 - v97);
                        v99 = &v93[4 * v89 - 16];
                        v100 = v87 - 16;
                        v101 = v96 & 0x7FFFFFFFFFFFFFF8;
                        do
                        {
                          v102 = *(_OWORD *)v100;
                          *(v99 - 1) = *((_OWORD *)v100 - 1);
                          *v99 = v102;
                          v99 -= 2;
                          v100 -= 32;
                          v101 -= 8;
                        }
                        while (v101);
                        v87 = v98;
                        if (v96 != (v96 & 0x7FFFFFFFFFFFFFF8))
                        {
LABEL_150:
                          do
                          {
                            v103 = *((_DWORD *)v87 - 1);
                            v87 -= 4;
                            *--v94 = v103;
                          }
                          while (v87 != v88);
                        }
                      }
                      *(_QWORD *)(v42 + 104) = v94;
                      *(_QWORD *)(v42 + 112) = v77;
                      *(_QWORD *)(v42 + 120) = &v93[4 * v92];
                      if (v88)
                        operator delete(v88);
                    }
                    *(_QWORD *)(v42 + 112) = v77;
LABEL_105:
                    ++v76;
                    v75 = *(const char **)(*(_QWORD *)(v42 + 72) + 8 * v76);
                    if (!v75)
                      goto LABEL_52;
                  }
                  v81 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v78 | 7) != 0x17)
                    v81 = v78 | 7;
                  v82 = v81 + 1;
                  v80 = operator new(v81 + 1);
                  *(_QWORD *)&v114[8] = v79;
                  *(_QWORD *)&v114[16] = v82 | 0x8000000000000000;
                  *(_QWORD *)v114 = v80;
LABEL_113:
                  memmove(v80, v75, v79);
                  goto LABEL_114;
                }
              }
LABEL_52:
              v42 += 128;
              if (v42 != v111)
                goto LABEL_53;
              v104 = g_dynamic_register_map;
              v42 = qword_100071828;
              goto LABEL_142;
            }
          }
          break;
        }
        memmove(v49, v44, v48);
        goto LABEL_65;
      }
      v104 = g_dynamic_register_map;
LABEL_142:
      g_reg_entries = v104;
      g_num_reg_entries = (v42 - v104) >> 7;
      std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy((uint64_t)&v118, v119[0]);
      v2 = v106;
    }
  }
  return v2 != 0;
}

void binary_encode_string(unsigned __int8 *a1@<X0>, std::string *a2@<X8>)
{
  int v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  BOOL v9;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v3 = (char)a1[23];
  if (v3 >= 0)
    v4 = a1[23];
  else
    v4 = *((_QWORD *)a1 + 1);
  if (v3 >= 0)
    v5 = a1;
  else
    v5 = *(unsigned __int8 **)a1;
  for (; v4; --v4)
  {
    v7 = *v5++;
    v6 = v7;
    v8 = (1 << v7) & 0x41800000000;
    v9 = v7 > 0x2A || v8 == 0;
    if (!v9 || v6 == 125)
    {
      std::string::push_back(a2, 125);
      LOBYTE(v6) = v6 ^ 0x20;
    }
    std::string::push_back(a2, v6);
  }
}

uint64_t RNBRemote::SendStopReplyPacketForThread(RNBRemote *this, uint64_t a2)
{
  RNBRemote *v2;
  int v3;
  uint64_t v4;
  __int128 v5;
  void *v6;
  void *v7;
  std::ios_base *v8;
  int v9;
  pthread_mutex_t *v10;
  int tv_sec;
  __darwin_suseconds_t tv_usec;
  uint64_t v13;
  int v14;
  unsigned __int8 v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  char *v19;
  const std::locale::facet *v20;
  _QWORD *v21;
  _QWORD *v22;
  const char *Name;
  const char *v24;
  size_t v25;
  size_t v26;
  _QWORD *v27;
  size_t v28;
  _QWORD *v29;
  unsigned int v30;
  _QWORD *v31;
  char *v32;
  const std::locale::facet *v33;
  uint64_t NumThreads;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t ThreadAtIndex;
  void *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  char *v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD *v54;
  char *v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  std::ios_base *v63;
  std::__shared_weak_count *v64;
  unint64_t *p_shared_owners;
  unint64_t v66;
  unint64_t v67;
  unsigned int v68;
  uint64_t v69;
  int v70;
  std::ios_base *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  unint64_t i;
  _QWORD *v105;
  _QWORD *v106;
  __darwin_time_t v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t v112;
  char *v113;
  const std::locale::facet *v114;
  _QWORD *v115;
  timeval *v116;
  timeval *v117;
  BOOL v118;
  __darwin_time_t v120;
  __darwin_time_t v121;
  int v122;
  uint64_t v123;
  RNBRemote *v124;
  int v125;
  std::locale v126;
  char v127;
  timeval v128;
  uint64_t v129;
  int v130;
  void *v131[2];
  __int128 v132;
  int v133;
  _QWORD v134[19];
  std::__shared_weak_count *v135;
  std::__shared_weak_count *v136;
  void *__p;
  void (__cdecl **v138)(std::stringbuf *__hidden);
  char v139;
  _BYTE v140[48];
  __int128 v141;
  __int128 v142;
  int v143;
  void (__cdecl **v144)(std::ostringstream *__hidden);
  _QWORD v145[2];
  char v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unsigned int v150;
  unsigned int v151;
  unsigned __int8 v152;
  unsigned __int8 v153;
  unsigned __int8 v154;
  unsigned __int8 v155;
  unsigned __int8 v156;
  unsigned __int8 v157;
  unsigned __int8 v158;
  unsigned int v159;

  v2 = this;
  v3 = *((_DWORD *)this + 3);
  if (!v3)
  {
    v146 = 3;
    LODWORD(v145[0]) = 3159365;
    v16 = RNBRemote::SendPacket((uint64_t)this, (uint64_t)v145);
    if ((v146 & 0x80000000) == 0)
      return v16;
    v17 = (void *)v145[0];
LABEL_17:
    operator delete(v17);
    return v16;
  }
  v4 = a2;
  if (!DNBThreadGetStopReason(*((_DWORD *)this + 3), a2, v145))
  {
    v139 = 3;
    LODWORD(__p) = 3224901;
    v16 = RNBRemote::SendPacket((uint64_t)v2, (uint64_t)&__p);
    if ((v139 & 0x80000000) == 0)
      return v16;
    v17 = __p;
    goto LABEL_17;
  }
  v122 = v145[0];
  if (LODWORD(v145[0]) == 3)
  {
    RNBRemote::InitializeRegisters(v2, 1);
    *((_QWORD *)v2 + 82) = -1;
    *(_QWORD *)&v5 = -1;
    *((_QWORD *)&v5 + 1) = -1;
    *(_OWORD *)((char *)v2 + 616) = v5;
    *(_OWORD *)((char *)v2 + 632) = v5;
    *((_WORD *)v2 + 324) = -1;
  }
  __p = v6;
  v120 = (__darwin_time_t)v7;
  v121 = (__darwin_time_t)v6;
  *(void **)((char *)&__p + *((_QWORD *)v6 - 3)) = v7;
  v8 = (std::ios_base *)((char *)&__p + *((_QWORD *)__p - 3));
  std::ios_base::init(v8, &v138);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf(&v138);
  v141 = 0u;
  v142 = 0u;
  v143 = 16;
  LOBYTE(v128.tv_sec) = 84;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)&v128, 1);
  v9 = v147;
  v123 = v4;
  v125 = v3;
  if (DNBLogEnabledForAny(0x400000))
  {
    v10 = (pthread_mutex_t *)*((_QWORD *)v2 + 61);
    if (v10)
      pthread_mutex_lock(*((pthread_mutex_t **)v2 + 61));
    gettimeofday(&v128, 0);
    tv_sec = v128.tv_sec;
    tv_usec = v128.tv_usec;
    v13 = *((_QWORD *)v2 + 62);
    v14 = *((_DWORD *)v2 + 126);
    *((timeval *)v2 + 31) = v128;
    if (v10)
      pthread_mutex_unlock(v10);
    _DNBLogThreaded("%8d %s got signal signo = %u, exc_type = %u", tv_usec - v14 + 1000000 * (tv_sec - v13), "SendStopReplyPacketForThread", v9, v147);
    v4 = v123;
    v3 = v125;
  }
  switch((int)v147)
  {
    case 1:
      v15 = -111;
      break;
    case 2:
      v15 = -110;
      break;
    case 3:
      v15 = -109;
      break;
    case 4:
      v15 = -108;
      break;
    case 5:
      v15 = -107;
      if (v148 == 2 && v149 == 65539)
        v15 = v150;
      break;
    case 6:
      v15 = 5;
      break;
    default:
      v15 = 0;
      break;
  }
  v18 = __p;
  v19 = (char *)&__p + *((_QWORD *)__p - 3);
  if (*((_DWORD *)v19 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)&__p + *((_QWORD *)__p - 3)));
    v20 = std::locale::use_facet((const std::locale *)&v128, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 32);
    std::locale::~locale((std::locale *)&v128);
    v18 = __p;
  }
  *((_DWORD *)v19 + 36) = 48;
  *(_DWORD *)((char *)&__p + *(v18 - 3) + 8) = *(_DWORD *)((_BYTE *)&__p + *(v18 - 3) + 8) & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)&__p + *(v18 - 3) + 8) = *(_DWORD *)((_BYTE *)&__p + *(v18 - 3) + 8) & 0xFFFFFF4F | 0x80;
  *(_QWORD *)&v140[*(v18 - 3)] = 2;
  std::ostream::operator<<(&__p, v15);
  *(_DWORD *)((char *)&__p + *((_QWORD *)__p - 3) + 8) = *(_DWORD *)((_BYTE *)&__p + *((_QWORD *)__p - 3) + 8) & 0xFFFFFFB5 | 8;
  v21 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)"thread:", 7);
  v22 = (_QWORD *)std::ostream::operator<<(v21, v4);
  LOBYTE(v128.tv_sec) = 59;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)&v128, 1);
  Name = (const char *)DNBThreadGetName(v3, v4);
  v124 = v2;
  if (Name)
  {
    v24 = Name;
    if (*Name)
    {
      v25 = strlen(Name);
      v26 = strcspn(v24, "$#+-;:");
      *(_DWORD *)((char *)&__p + *((_QWORD *)__p - 3) + 8) = *(_DWORD *)((_BYTE *)&__p + *((_QWORD *)__p - 3) + 8) & 0xFFFFFFB5 | 8;
      if (v26 == v25)
      {
        v27 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)"name:", 5);
        v28 = strlen(v24);
        v29 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)v24, v28);
        LOBYTE(v128.tv_sec) = 59;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v29, (uint64_t)&v128, 1);
      }
      else
      {
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)"hexname:", 8);
        for (; v25; --v25)
        {
          v31 = __p;
          v32 = (char *)&__p + *((_QWORD *)__p - 3);
          if (*((_DWORD *)v32 + 36) == -1)
          {
            std::ios_base::getloc((const std::ios_base *)((char *)&__p + *((_QWORD *)__p - 3)));
            v33 = std::locale::use_facet((const std::locale *)&v128, &std::ctype<char>::id);
            ((void (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 32);
            std::locale::~locale((std::locale *)&v128);
            v31 = __p;
          }
          *((_DWORD *)v32 + 36) = 48;
          *(_DWORD *)((char *)&v138 + *(v31 - 3)) = *(_DWORD *)((_BYTE *)&v138 + *(v31 - 3)) & 0xFFFFFFB5 | 8;
          *(_DWORD *)((char *)&v138 + *(v31 - 3)) = *(_DWORD *)((_BYTE *)&v138 + *(v31 - 3)) & 0xFFFFFF4F | 0x80;
          *(_QWORD *)&v140[*(v31 - 3)] = 2;
          v30 = *(unsigned __int8 *)v24++;
          std::ostream::operator<<(&__p, v30);
        }
        LOBYTE(v128.tv_sec) = 59;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)&v128, 1);
      }
      v4 = v123;
    }
  }
  if (!*((_BYTE *)v2 + 783))
    goto LABEL_97;
  NumThreads = DNBProcessGetNumThreads(v3);
  if (!NumThreads)
    goto LABEL_97;
  v35 = NumThreads;
  *(_DWORD *)((char *)&__p + *((_QWORD *)__p - 3) + 8) = *(_DWORD *)((_BYTE *)&__p + *((_QWORD *)__p - 3) + 8) & 0xFFFFFFB5 | 8;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)"threads:", 8);
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  do
  {
    ThreadAtIndex = DNBProcessGetThreadAtIndex(v3, v36);
    if (v36)
    {
      LOBYTE(v128.tv_sec) = 44;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)&v128, 1);
    }
    *(_DWORD *)((char *)&v138 + *((_QWORD *)__p - 3)) = *(_DWORD *)((_BYTE *)&v138 + *((_QWORD *)__p - 3)) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<(&__p, ThreadAtIndex);
    if (DNBThreadGetRegisterValueByID(v3, ThreadAtIndex, -1, 0, &v128))
    {
      v41 = v131[0];
      if (v131[0] != (void *)-1)
      {
        if (v130 != 8)
        {
          if (v130 != 4)
            goto LABEL_43;
          v41 = (void *)LODWORD(v131[0]);
        }
        if (v38 < v39)
        {
          *(_QWORD *)v38 = v41;
          v38 += 8;
          goto LABEL_43;
        }
        v42 = (v38 - v37) >> 3;
        v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 61)
          abort();
        if ((v39 - v37) >> 2 > v43)
          v43 = (v39 - v37) >> 2;
        if ((unint64_t)(v39 - v37) >= 0x7FFFFFFFFFFFFFF8)
          v44 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v44 = v43;
        if (v44)
        {
          if (v44 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v45 = operator new(8 * v44);
        }
        else
        {
          v45 = 0;
        }
        v46 = &v45[8 * v42];
        *(_QWORD *)v46 = v41;
        v47 = v46 + 8;
        if (v38 == v37)
        {
          v3 = v125;
          v39 = &v45[8 * v44];
          if (!v37)
            goto LABEL_68;
          goto LABEL_67;
        }
        v48 = v38 - v37 - 8;
        if (v48 < 0x168
          || (v51 = (v38 - 8 - v37) & 0xFFFFFFFFFFFFFFF8, &v45[v38 - v37 - 8 - v51] > &v45[v38 - v37 - 8])
          || &v38[-v51 - 8] > v38 - 8
          || (unint64_t)(v37 - v45) < 0x20)
        {
          v49 = v38;
          v3 = v125;
        }
        else
        {
          v52 = (v48 >> 3) + 1;
          v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
          v49 = &v38[-v53];
          v46 -= v53;
          v54 = &v45[8 * v42 - 16];
          v55 = v38 - 16;
          v56 = v52 & 0x3FFFFFFFFFFFFFFCLL;
          v3 = v125;
          do
          {
            v57 = *(_OWORD *)v55;
            *(v54 - 1) = *((_OWORD *)v55 - 1);
            *v54 = v57;
            v54 -= 2;
            v55 -= 32;
            v56 -= 4;
          }
          while (v56);
          if (v52 == (v52 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_66:
            v39 = &v45[8 * v44];
            if (!v37)
            {
LABEL_68:
              v38 = v47;
              v37 = v46;
              goto LABEL_43;
            }
LABEL_67:
            operator delete(v37);
            goto LABEL_68;
          }
        }
        do
        {
          v50 = *((_QWORD *)v49 - 1);
          v49 -= 8;
          *((_QWORD *)v46 - 1) = v50;
          v46 -= 8;
        }
        while (v49 != v37);
        goto LABEL_66;
      }
    }
LABEL_43:
    ++v36;
  }
  while (v36 != v35);
  LOBYTE(v128.tv_sec) = 59;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)&v128, 1);
  if (v35 == (v38 - v37) >> 3)
  {
    *(_DWORD *)((char *)&__p + *((_QWORD *)__p - 3) + 8) = *(_DWORD *)((_BYTE *)&__p + *((_QWORD *)__p - 3) + 8) & 0xFFFFFFB5 | 8;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)"thread-pcs:", 11);
    v58 = *(_QWORD *)v37;
    *(_DWORD *)((char *)&v138 + *((_QWORD *)__p - 3)) = *(_DWORD *)((_BYTE *)&v138 + *((_QWORD *)__p - 3)) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<(&__p, v58);
    v59 = v35 - 1;
    v2 = v124;
    if (v35 != 1)
    {
      v60 = (uint64_t *)(v37 + 8);
      do
      {
        LOBYTE(v128.tv_sec) = 44;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)&v128, 1);
        *(_DWORD *)((char *)&v138 + *((_QWORD *)__p - 3)) = *(_DWORD *)((_BYTE *)&v138 + *((_QWORD *)__p - 3)) & 0xFFFFFFB5 | 8;
        v61 = *v60++;
        std::ostream::operator<<(&__p, v61);
        --v59;
      }
      while (v59);
    }
    LOBYTE(v128.tv_sec) = 59;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)&v128, 1);
LABEL_84:
    operator delete(v37);
  }
  else
  {
    v2 = v124;
    if (v37)
      goto LABEL_84;
  }
  v4 = v123;
  if (v35 >= 2)
  {
    RNBRemote::GetJSONThreadsInfo((uint64_t)v2, 1, &v135);
    v62 = v135;
    if (v135)
    {
      *(_DWORD *)((char *)&__p + *((_QWORD *)__p - 3) + 8) = *(_DWORD *)((_BYTE *)&__p + *((_QWORD *)__p - 3) + 8) & 0xFFFFFFB5 | 8;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)"jstopinfo:", 10);
      v128.tv_sec = v121;
      *(__darwin_time_t *)((char *)&v128.tv_sec + *(_QWORD *)(v121 - 24)) = v120;
      v63 = (std::ios_base *)((char *)&v128 + *(_QWORD *)(v128.tv_sec - 24));
      std::ios_base::init(v63, &v128.tv_usec);
      v63[1].__vftable = 0;
      v63[1].__fmtflags_ = -1;
      std::streambuf::basic_streambuf(&v128.tv_usec);
      *(_OWORD *)v131 = 0u;
      v132 = 0u;
      v133 = 16;
      ((void (*)(std::__shared_weak_count *, timeval *))v62->__on_zero_shared_weak)(v62, &v128);
      ((void (*)(std::__shared_weak_count *))v62->__get_deleter)(v62);
      std::stringbuf::str(&v126, &v128.tv_usec);
      append_hexified_string((uint64_t)&__p, (unsigned __int8 *)&v126);
      if (v127 < 0)
        operator delete(v126.__locale_);
      LOBYTE(v126.__locale_) = 59;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)&v126, 1);
      if (SBYTE7(v132) < 0)
        operator delete(v131[0]);
      std::streambuf::~streambuf(&v128.tv_usec);
      std::ios::~ios(v134);
      v4 = v123;
    }
    v64 = v136;
    v2 = v124;
    if (v136)
    {
      p_shared_owners = (unint64_t *)&v136->__shared_owners_;
      do
        v66 = __ldaxr(p_shared_owners);
      while (__stlxr(v66 - 1, p_shared_owners));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
  }
LABEL_97:
  if (!g_num_reg_entries)
    RNBRemote::InitializeRegisters(v2, 0);
  if (g_reg_entries && g_num_reg_entries)
  {
    v67 = 0;
    v68 = 1;
    do
    {
      v69 = g_reg_entries + (v67 << 7);
      v70 = *(_DWORD *)(v69 + 8);
      if ((v70 & 0xFFFFFFFD) == 1
        && !*(_QWORD *)(v69 + 64)
        && DNBThreadGetRegisterValueByID(v125, v4, v70, *(_DWORD *)(g_reg_entries + (v67 << 7) + 12), &v128))
      {
        debugserver_regnum_with_fixed_width_hex_register_value((uint64_t *)&__p, v125, v4, (unsigned __int8 *)(g_reg_entries + (v67 << 7)), &v128);
      }
      v67 = v68++;
    }
    while (g_num_reg_entries > v67);
  }
  if (v122 == 3)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)"reason:exec;", 12);
  }
  else if (LODWORD(v145[0]) == 4)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)"reason:watchpoint;", 18);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)"description:", 12);
    v128.tv_sec = v121;
    *(__darwin_time_t *)((char *)&v128.tv_sec + *(_QWORD *)(v121 - 24)) = v120;
    v71 = (std::ios_base *)((char *)&v128 + *(_QWORD *)(v128.tv_sec - 24));
    std::ios_base::init(v71, &v128.tv_usec);
    v71[1].__vftable = 0;
    v71[1].__fmtflags_ = -1;
    std::streambuf::basic_streambuf(&v128.tv_usec);
    *(_OWORD *)v131 = 0u;
    v132 = 0u;
    v133 = 16;
    v72 = (_QWORD *)std::ostream::operator<<(&v128, v148);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v72, (uint64_t)" ", 1);
    v73 = (_QWORD *)std::ostream::operator<<(&v128, v149);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v73, (uint64_t)" ", 1);
    std::ostream::operator<<(&v128, v147);
    std::stringbuf::str(&v126, &v128.tv_usec);
    append_hexified_string((uint64_t)&__p, (unsigned __int8 *)&v126);
    if (v127 < 0)
      operator delete(v126.__locale_);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)";", 1);
    v74 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)"watch_addr:", 11);
    *(_DWORD *)((char *)v74 + *(_QWORD *)(*v74 - 24) + 8) = *(_DWORD *)((_BYTE *)v74 + *(_QWORD *)(*v74 - 24) + 8) & 0xFFFFFFB5 | 8;
    v75 = (_QWORD *)std::ostream::operator<<(v74, v148);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v75, (uint64_t)";", 1);
    v76 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)"me_watch_addr:", 14);
    *(_DWORD *)((char *)v76 + *(_QWORD *)(*v76 - 24) + 8) = *(_DWORD *)((_BYTE *)v76 + *(_QWORD *)(*v76 - 24) + 8) & 0xFFFFFFB5 | 8;
    v77 = (_QWORD *)std::ostream::operator<<(v76, v147);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v77, (uint64_t)";", 1);
    v78 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)"wp_hw_idx:", 10);
    *(_DWORD *)((char *)v78 + *(_QWORD *)(*v78 - 24) + 8) = *(_DWORD *)((_BYTE *)v78 + *(_QWORD *)(*v78 - 24) + 8) & 0xFFFFFFB5 | 8;
    v79 = (_QWORD *)std::ostream::operator<<(v78, v149);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v79, (uint64_t)";", 1);
    if (BYTE4(v149))
    {
      v80 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)"wp_esr_iss:", 11);
      *(_DWORD *)((char *)v80 + *(_QWORD *)(*v80 - 24) + 8) = *(_DWORD *)((_BYTE *)v80 + *(_QWORD *)(*v80 - 24) + 8) & 0xFFFFFFB5 | 8;
      v81 = (_QWORD *)std::ostream::operator<<(v80, v150);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v81, (uint64_t)";", 1);
      v82 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)"wp_esr_wpt:", 11);
      *(_DWORD *)((char *)v82 + *(_QWORD *)(*v82 - 24) + 8) = *(_DWORD *)((_BYTE *)v82 + *(_QWORD *)(*v82 - 24) + 8) & 0xFFFFFFB5 | 8;
      v83 = (_QWORD *)std::ostream::operator<<(v82, v151);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v83, (uint64_t)";", 1);
      v84 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)"wp_esr_wptv:", 12);
      v85 = (_QWORD *)std::ostream::operator<<(v84, v152);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v85, (uint64_t)";", 1);
      v86 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)"wp_esr_wpf:", 11);
      v87 = (_QWORD *)std::ostream::operator<<(v86, v153);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v87, (uint64_t)";", 1);
      v88 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)"wp_esr_fnp:", 11);
      v89 = (_QWORD *)std::ostream::operator<<(v88, v154);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v89, (uint64_t)";", 1);
      v90 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)"wp_esr_vncr:", 12);
      v91 = (_QWORD *)std::ostream::operator<<(v90, v155);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v91, (uint64_t)";", 1);
      v92 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)"wp_esr_fnv:", 11);
      v93 = (_QWORD *)std::ostream::operator<<(v92, v156);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v93, (uint64_t)";", 1);
      v94 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)"wp_esr_cm:", 10);
      v95 = (_QWORD *)std::ostream::operator<<(v94, v157);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v95, (uint64_t)";", 1);
      v96 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)"wp_esr_wnr:", 11);
      v97 = (_QWORD *)std::ostream::operator<<(v96, v158);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v97, (uint64_t)";", 1);
      v98 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)"wp_esr_dfsc:", 12);
      *(_DWORD *)((char *)v98 + *(_QWORD *)(*v98 - 24) + 8) = *(_DWORD *)((_BYTE *)v98 + *(_QWORD *)(*v98 - 24) + 8) & 0xFFFFFFB5 | 8;
      v99 = (_QWORD *)std::ostream::operator<<(v98, v159);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v99, (uint64_t)";", 1);
    }
    if (SBYTE7(v132) < 0)
      operator delete(v131[0]);
    std::streambuf::~streambuf(&v128.tv_usec);
    std::ios::~ios(v134);
    v4 = v123;
  }
  else if ((_DWORD)v147)
  {
    v100 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)"metype:", 7);
    *(_DWORD *)((char *)v100 + *(_QWORD *)(*v100 - 24) + 8) = *(_DWORD *)((_BYTE *)v100 + *(_QWORD *)(*v100 - 24)
                                                                                          + 8) & 0xFFFFFFB5 | 8;
    v101 = (_QWORD *)std::ostream::operator<<(v100, v147);
    LOBYTE(v128.tv_sec) = 59;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v101, (uint64_t)&v128, 1);
    v102 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)"mecount:", 8);
    *(_DWORD *)((char *)v102 + *(_QWORD *)(*v102 - 24) + 8) = *(_DWORD *)((_BYTE *)v102 + *(_QWORD *)(*v102 - 24)
                                                                                          + 8) & 0xFFFFFFB5 | 8;
    v103 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v128.tv_sec) = 59;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v103, (uint64_t)&v128, 1);
    if (v148)
    {
      for (i = 0; i < v148; ++i)
      {
        v105 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)"medata:", 7);
        *(_DWORD *)((char *)v105 + *(_QWORD *)(*v105 - 24) + 8) = *(_DWORD *)((_BYTE *)v105
                                                                              + *(_QWORD *)(*v105 - 24)
                                                                              + 8) & 0xFFFFFFB5 | 8;
        v106 = (_QWORD *)std::ostream::operator<<(v105, *(&v149 + i));
        LOBYTE(v128.tv_sec) = 59;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v106, (uint64_t)&v128, 1);
      }
    }
  }
  *(_QWORD *)&v128.tv_usec = 0;
  v129 = 0;
  v128.tv_sec = (__darwin_time_t)&v128.tv_usec;
  ReadStackMemory(v125, v4, (uint64_t **)&v128, 2u);
  if (v129)
  {
    v107 = v128.tv_sec;
    if ((__darwin_suseconds_t *)v128.tv_sec != &v128.tv_usec)
    {
      do
      {
        v108 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)"memory:", 7);
        LOBYTE(v126.__locale_) = 48;
        v109 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v108, (uint64_t)&v126, 1);
        LOBYTE(v126.__locale_) = 120;
        v110 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v109, (uint64_t)&v126, 1);
        v111 = v110;
        v112 = *v110;
        v113 = (char *)v110 + *(_QWORD *)(*v110 - 24);
        if (*((_DWORD *)v113 + 36) == -1)
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v110 + *(_QWORD *)(*v110 - 24)));
          v114 = std::locale::use_facet(&v126, &std::ctype<char>::id);
          ((void (*)(const std::locale::facet *, uint64_t))v114->__vftable[2].~facet_0)(v114, 32);
          std::locale::~locale(&v126);
          v112 = *v111;
        }
        *((_DWORD *)v113 + 36) = 48;
        *(_DWORD *)((char *)v111 + *(_QWORD *)(v112 - 24) + 8) = *(_DWORD *)((_BYTE *)v111 + *(_QWORD *)(v112 - 24) + 8) & 0xFFFFFFB5 | 8;
        *(_DWORD *)((char *)v111 + *(_QWORD *)(v112 - 24) + 8) = *(_DWORD *)((_BYTE *)v111 + *(_QWORD *)(v112 - 24) + 8) & 0xFFFFFF4F | 0x80;
        v115 = (_QWORD *)std::ostream::operator<<(v111, *(_QWORD *)(v107 + 32));
        LOBYTE(v126.__locale_) = 61;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v115, (uint64_t)&v126, 1);
        append_hex_value((uint64_t)&__p, (unsigned __int8 *)(v107 + 40), *(_QWORD *)(v107 + 56), 0);
        LOBYTE(v126.__locale_) = 59;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)&v126, 1);
        v116 = *(timeval **)(v107 + 8);
        if (v116)
        {
          do
          {
            v117 = v116;
            v116 = (timeval *)v116->tv_sec;
          }
          while (v116);
        }
        else
        {
          do
          {
            v117 = *(timeval **)(v107 + 16);
            v118 = v117->tv_sec == v107;
            v107 = (__darwin_time_t)v117;
          }
          while (!v118);
        }
        v107 = (__darwin_time_t)v117;
      }
      while (v117 != (timeval *)&v128.tv_usec);
    }
  }
  std::stringbuf::str(&v126, &v138);
  v16 = RNBRemote::SendPacket((uint64_t)v124, (uint64_t)&v126);
  if (v127 < 0)
    operator delete(v126.__locale_);
  std::__tree<std::__value_type<unsigned int,DNBArchPluginInfoTag>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,DNBArchPluginInfoTag>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,DNBArchPluginInfoTag>>>::destroy((uint64_t)&v128, *(_QWORD **)&v128.tv_usec);
  if (SBYTE7(v142) < 0)
    operator delete((void *)v141);
  std::streambuf::~streambuf(&v138);
  std::ios::~ios(&v144);
  return v16;
}

std::string *get_identifier@<X0>(std::string *__str@<X0>, std::string *a2@<X8>)
{
  int v4;
  std::string::size_type size;
  std::string *v6;
  char *v7;
  size_t v8;
  std::string *v9;
  size_t v10;
  std::string::size_type v11;
  std::string::size_type v12;
  std::string *v13;
  __darwin_ct_rune_t v14;
  std::string *v15;
  std::string::size_type v16;
  std::string *v17;
  std::string *v18;
  __darwin_ct_rune_t v19;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v4 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
  if (v4 < 0)
  {
    size = __str->__r_.__value_.__l.__size_;
    if (!size)
      goto LABEL_16;
    v6 = (std::string *)__str->__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__str->__r_.__value_.__s + 23))
      goto LABEL_14;
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    v6 = __str;
  }
  v7 = k_space_delimiters;
  v8 = strlen(k_space_delimiters);
  v9 = v6;
  if (v8)
  {
    v10 = v8;
    v9 = v6;
    while (memchr(v7, v9->__r_.__value_.__s.__data_[0], v10))
    {
      v9 = (std::string *)((char *)v9 + 1);
      if (!--size)
      {
        v11 = -1;
        goto LABEL_12;
      }
    }
  }
  v11 = (char *)v9 - (char *)v6;
  if (v9 != v6)
  {
LABEL_12:
    std::string::erase(__str, 0, v11);
    LOBYTE(v4) = *((_BYTE *)&__str->__r_.__value_.__s + 23);
  }
  if ((v4 & 0x80) == 0)
  {
LABEL_14:
    v12 = v4;
    if (!(_BYTE)v4)
      goto LABEL_43;
    goto LABEL_17;
  }
LABEL_16:
  v12 = __str->__r_.__value_.__l.__size_;
  if (!v12)
  {
LABEL_43:
    v16 = 0;
    goto LABEL_45;
  }
LABEL_17:
  if ((v4 & 0x80u) == 0)
    v13 = __str;
  else
    v13 = (std::string *)__str->__r_.__value_.__r.__words[0];
  v14 = v13->__r_.__value_.__s.__data_[0];
  if (v14 < 0)
  {
    if (__maskrune(v14, 0x100uLL))
      goto LABEL_28;
  }
  else if ((_DefaultRuneLocale.__runetype[v14] & 0x100) != 0)
  {
    goto LABEL_28;
  }
  if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = __str;
  else
    v15 = (std::string *)__str->__r_.__value_.__r.__words[0];
  if (v15->__r_.__value_.__s.__data_[0] != 95)
    goto LABEL_43;
LABEL_28:
  v16 = 1;
  if (v12 != 1)
  {
    while (1)
    {
      if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = __str;
      else
        v18 = (std::string *)__str->__r_.__value_.__r.__words[0];
      v19 = v18->__r_.__value_.__s.__data_[v16];
      if (v19 < 0)
      {
        if (!__maskrune(v19, 0x500uLL))
        {
LABEL_30:
          if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v17 = __str;
          else
            v17 = (std::string *)__str->__r_.__value_.__r.__words[0];
          if (v17->__r_.__value_.__s.__data_[v16] != 95)
            break;
        }
      }
      else if ((_DefaultRuneLocale.__runetype[v19] & 0x500) == 0)
      {
        goto LABEL_30;
      }
      if (v12 == ++v16)
      {
        v16 = v12;
        break;
      }
    }
  }
LABEL_45:
  std::string::assign(a2, __str, 0, v16);
  return std::string::erase(__str, 0, v16);
}

BOOL std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1)
        goto LABEL_10;
      a1 = (_QWORD *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1)
LABEL_10:
      abort();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

uint64_t set_logging(char *__s1)
{
  char *v1;
  int v2;
  char *v3;
  char *v4;
  int v5;
  void (*LogFunction)(void *, char, const char *, va_list);

  if (__s1)
  {
    v1 = __s1;
    if (*__s1)
    {
      v2 = 0;
      do
      {
        if (strncmp(v1, "bitmask=", 8uLL))
        {
          v3 = strchr(v1, 59);
          if (v3)
            v1 = v3 + 1;
          else
            v1 += strlen(v1);
          continue;
        }
        v1 += 8;
        while (1)
        {
          v5 = *v1;
          if (v5 != 124)
            break;
          ++v1;
LABEL_17:
          if (!strncmp(v1, "LOG_VERBOSE", 0xBuLL))
          {
            v4 = v1 + 11;
            v2 |= 1u;
          }
          else if (!strncmp(v1, "LOG_PROCESS", 0xBuLL))
          {
            v4 = v1 + 11;
            v2 |= 2u;
          }
          else if (!strncmp(v1, "LOG_THREAD", 0xAuLL))
          {
            v4 = v1 + 10;
            v2 |= 4u;
          }
          else if (!strncmp(v1, "LOG_EXCEPTIONS", 0xEuLL))
          {
            v4 = v1 + 14;
            v2 |= 8u;
          }
          else if (!strncmp(v1, "LOG_SHLIB", 9uLL))
          {
            v4 = v1 + 9;
            v2 |= 0x10u;
          }
          else if (!strncmp(v1, "LOG_MEMORY_DATA_SHORT", 0x15uLL))
          {
            v4 = v1 + 21;
            v2 |= 0x40u;
          }
          else if (!strncmp(v1, "LOG_MEMORY_DATA_LONG", 0x14uLL))
          {
            v4 = v1 + 20;
            v2 |= 0x80u;
          }
          else if (!strncmp(v1, "LOG_MEMORY_PROTECTIONS", 0x16uLL))
          {
            v4 = v1 + 22;
            v2 |= 0x100u;
          }
          else if (!strncmp(v1, "LOG_MEMORY", 0xAuLL))
          {
            v4 = v1 + 10;
            v2 |= 0x20u;
          }
          else if (!strncmp(v1, "LOG_BREAKPOINTS", 0xFuLL))
          {
            v4 = v1 + 15;
            v2 |= 0x200u;
          }
          else if (!strncmp(v1, "LOG_EVENTS", 0xAuLL))
          {
            v4 = v1 + 10;
            v2 |= 0x400u;
          }
          else if (!strncmp(v1, "LOG_WATCHPOINTS", 0xFuLL))
          {
            v4 = v1 + 15;
            v2 |= 0x800u;
          }
          else if (!strncmp(v1, "LOG_STEP", 8uLL))
          {
            v4 = v1 + 8;
            v2 |= 0x1000u;
          }
          else if (!strncmp(v1, "LOG_TASK", 8uLL))
          {
            v4 = v1 + 8;
            v2 |= 0x2000u;
          }
          else if (!strncmp(v1, "LOG_ALL", 7uLL))
          {
            v4 = v1 + 7;
            v2 = -1;
          }
          else if (!strncmp(v1, "LOG_DEFAULT", 0xBuLL))
          {
            v4 = v1 + 11;
            v2 |= 0x3A3Eu;
          }
          else if (!strncmp(v1, "LOG_NONE", 8uLL))
          {
            v2 = 0;
            v4 = v1 + 8;
          }
          else if (!strncmp(v1, "LOG_RNB_MINIMAL", 0xFuLL))
          {
            v4 = v1 + 15;
            v2 |= 0x10000u;
          }
          else if (!strncmp(v1, "LOG_RNB_MEDIUM", 0xEuLL))
          {
            v4 = v1 + 14;
            v2 |= 0x20000u;
          }
          else if (!strncmp(v1, "LOG_RNB_MAX", 0xBuLL))
          {
            v4 = v1 + 11;
            v2 |= 0x40000u;
          }
          else if (!strncmp(v1, "LOG_RNB_COMM", 0xCuLL))
          {
            v4 = v1 + 12;
            v2 |= 0x80000u;
          }
          else if (!strncmp(v1, "LOG_RNB_REMOTE", 0xEuLL))
          {
            v4 = v1 + 14;
            v2 |= 0x100000u;
          }
          else if (!strncmp(v1, "LOG_RNB_EVENTS", 0xEuLL))
          {
            v4 = v1 + 14;
            v2 |= 0x200000u;
          }
          else if (!strncmp(v1, "LOG_RNB_PROC", 0xCuLL))
          {
            v4 = v1 + 12;
            v2 |= 0x400000u;
          }
          else if (!strncmp(v1, "LOG_RNB_PACKETS", 0xFuLL))
          {
            v4 = v1 + 15;
            v2 |= 0x800000u;
          }
          else if (!strncmp(v1, "LOG_RNB_ALL", 0xBuLL))
          {
            v4 = v1 + 11;
            v2 |= 0xFFFF0000;
          }
          else if (!strncmp(v1, "LOG_RNB_DEFAULT", 0xFuLL))
          {
            v4 = v1 + 15;
            v2 |= 0xFFFF0000;
          }
          else if (!strncmp(v1, "LOG_DARWIN_LOG", 0xEuLL))
          {
            v4 = v1 + 14;
            v2 |= 0x4000u;
          }
          else if (!strncmp(v1, "LOG_RNB_NONE", 0xCuLL))
          {
            v2 = 0;
            v4 = v1 + 12;
          }
          else
          {
            v4 = strchr(v1, 124);
            if (!v4)
            {
              v4 = strchr(v1, 59);
              if (!v4)
                v4 = &v1[strlen(v1)];
            }
          }
          v1 = v4;
          if (!v4)
            return 0;
        }
        if (!*v1)
          continue;
        if (v5 != 59)
          goto LABEL_17;
        if (!DNBLogGetLogCallback())
        {
          LogFunction = (void (*)(void *, char, const char *, va_list))OsLogger::GetLogFunction(0);
          if (!LogFunction)
            LogFunction = ASLLogCallback;
          DNBLogSetLogCallback(LogFunction, 0);
        }
        DNBLogSetLogMask(v2);
        ++v1;
      }
      while (*v1);
    }
  }
  return 0;
}

uint64_t append_hex_value(uint64_t result, unsigned __int8 *a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  const std::locale::facet *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  const std::locale::facet *v16;
  std::locale v17;

  v4 = a3;
  v6 = (uint64_t *)result;
  if ((a4 & 1) != 0)
  {
    if ((int)a3 >= 1)
    {
      v7 = result + 8;
      v8 = a3 + 1;
      do
      {
        v9 = *v6;
        v10 = (char *)v6 + *(_QWORD *)(*v6 - 24);
        if (*((_DWORD *)v10 + 36) == -1)
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(*v6 - 24)));
          v11 = std::locale::use_facet(&v17, &std::ctype<char>::id);
          ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
          std::locale::~locale(&v17);
          v9 = *v6;
        }
        *((_DWORD *)v10 + 36) = 48;
        *(_DWORD *)(v7 + *(_QWORD *)(v9 - 24)) = *(_DWORD *)(v7 + *(_QWORD *)(v9 - 24)) & 0xFFFFFFB5 | 8;
        *(_DWORD *)(v7 + *(_QWORD *)(v9 - 24)) = *(_DWORD *)(v7 + *(_QWORD *)(v9 - 24)) & 0xFFFFFF4F | 0x80;
        *(uint64_t *)((char *)v6 + *(_QWORD *)(v9 - 24) + 24) = 2;
        result = std::ostream::operator<<(v6, a2[(v8-- - 2)]);
      }
      while (v8 > 1);
    }
  }
  else if (a3)
  {
    v12 = result + 8;
    do
    {
      v14 = *v6;
      v15 = (char *)v6 + *(_QWORD *)(*v6 - 24);
      if (*((_DWORD *)v15 + 36) == -1)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(*v6 - 24)));
        v16 = std::locale::use_facet(&v17, &std::ctype<char>::id);
        ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 32);
        std::locale::~locale(&v17);
        v14 = *v6;
      }
      *((_DWORD *)v15 + 36) = 48;
      *(_DWORD *)(v12 + *(_QWORD *)(v14 - 24)) = *(_DWORD *)(v12 + *(_QWORD *)(v14 - 24)) & 0xFFFFFFB5 | 8;
      *(_DWORD *)(v12 + *(_QWORD *)(v14 - 24)) = *(_DWORD *)(v12 + *(_QWORD *)(v14 - 24)) & 0xFFFFFF4F | 0x80;
      *(uint64_t *)((char *)v6 + *(_QWORD *)(v14 - 24) + 24) = 2;
      v13 = *a2++;
      result = std::ostream::operator<<(v6, v13);
      --v4;
    }
    while (v4);
  }
  return result;
}

void cstring_to_asciihex_string(const char *a1@<X0>, std::string *a2@<X8>)
{
  size_t v4;
  int v5;
  const char *v6;
  int v7;
  char __str[5];

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v4 = strlen(a1);
  std::string::reserve(a2, 2 * v4);
  if (a1)
  {
    v5 = *(unsigned __int8 *)a1;
    if (*a1)
    {
      v6 = a1 + 1;
      do
      {
        snprintf(__str, 5uLL, "%02x", v5);
        std::string::append(a2, __str);
        v7 = *(unsigned __int8 *)v6++;
        v5 = v7;
      }
      while (v7);
    }
  }
}

uint64_t append_hexified_string(uint64_t result, unsigned __int8 *a2)
{
  int v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  char *v10;
  const std::locale::facet *v11;
  std::locale v12;

  v2 = (char)a2[23];
  if (v2 >= 0)
    v3 = a2[23];
  else
    v3 = *((_QWORD *)a2 + 1);
  if (v2 >= 0)
    v4 = a2;
  else
    v4 = *(unsigned __int8 **)a2;
  if (v3)
  {
    v5 = (uint64_t *)result;
    v6 = result + 8;
    v7 = result + 24;
    do
    {
      v9 = *v5;
      v10 = (char *)v5 + *(_QWORD *)(*v5 - 24);
      if (*((_DWORD *)v10 + 36) == -1)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(_QWORD *)(*v5 - 24)));
        v11 = std::locale::use_facet(&v12, &std::ctype<char>::id);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
        std::locale::~locale(&v12);
        v9 = *v5;
      }
      *((_DWORD *)v10 + 36) = 48;
      *(_DWORD *)(v6 + *(_QWORD *)(v9 - 24)) = *(_DWORD *)(v6 + *(_QWORD *)(v9 - 24)) & 0xFFFFFFB5 | 8;
      *(_DWORD *)(v6 + *(_QWORD *)(v9 - 24)) = *(_DWORD *)(v6 + *(_QWORD *)(v9 - 24)) & 0xFFFFFF4F | 0x80;
      *(_QWORD *)(v7 + *(_QWORD *)(v9 - 24)) = 2;
      v8 = *v4++;
      result = std::ostream::operator<<(v5, v8);
      --v3;
    }
    while (v3);
  }
  return result;
}

void register_value_in_hex_fixed_width(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  _BYTE *v5;
  unsigned __int8 *v8;
  uint64_t v9;
  size_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  size_t v15;
  uint64_t v16;
  _BYTE v17[136];

  if (a4)
  {
    v5 = a5;
    if (a5
      || (v5 = v17, DNBThreadGetRegisterValueByID(a2, a3, *(_DWORD *)(a4 + 8), *(_DWORD *)(a4 + 12), v17)))
    {
      v8 = v5 + 72;
      v9 = *(unsigned int *)(a4 + 36);
LABEL_5:
      append_hex_value(a1, v8, v9, 0);
      return;
    }
    v10 = *(unsigned int *)(a4 + 36);
    if ((_DWORD)v10)
    {
      if (v10 >= 0x17)
      {
        if ((v10 | 7) == 0x17)
          v12 = (v10 & 0xFFFFFFF8) + 8;
        else
          v12 = v10 | 7;
        v11 = (unsigned __int8 *)operator new(v12 + 1);
        v15 = v10;
        v16 = v12 - 0x7FFFFFFFFFFFFFFFLL;
        v14 = v11;
      }
      else
      {
        HIBYTE(v16) = v10;
        v11 = (unsigned __int8 *)&v14;
      }
      bzero(v11, v10);
      v11[v10] = 0;
      if (SHIBYTE(v16) < 0)
      {
        v13 = v14;
        append_hex_value(a1, v14, v15, 0);
        operator delete(v13);
        return;
      }
      v9 = HIBYTE(v16);
      v8 = (unsigned __int8 *)&v14;
      goto LABEL_5;
    }
  }
}

_QWORD *std::basic_string<unsigned char>::basic_string[abi:nn180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

uint64_t *debugserver_regnum_with_fixed_width_hex_register_value(uint64_t *result, int a2, uint64_t a3, unsigned __int8 *a4, _BYTE *a5)
{
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  const std::locale::facet *v12;
  _QWORD *v13;
  std::locale v14;
  char v15;
  char v16;

  if (a4)
  {
    v9 = result;
    v10 = *result;
    v11 = (char *)result + *(_QWORD *)(*result - 24);
    if (*((_DWORD *)v11 + 36) == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)result + *(_QWORD *)(*result - 24)));
      v12 = std::locale::use_facet(&v14, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 32);
      std::locale::~locale(&v14);
      v10 = *v9;
    }
    *((_DWORD *)v11 + 36) = 48;
    *(_DWORD *)((char *)v9 + *(_QWORD *)(v10 - 24) + 8) = *(_DWORD *)((_BYTE *)v9 + *(_QWORD *)(v10 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(_DWORD *)((char *)v9 + *(_QWORD *)(v10 - 24) + 8) = *(_DWORD *)((_BYTE *)v9 + *(_QWORD *)(v10 - 24) + 8) & 0xFFFFFF4F | 0x80;
    *(uint64_t *)((char *)v9 + *(_QWORD *)(v10 - 24) + 24) = 2;
    v13 = (_QWORD *)std::ostream::operator<<(v9, *a4);
    v15 = 58;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)&v15, 1);
    register_value_in_hex_fixed_width((uint64_t)v9, a2, a3, (uint64_t)a4, a5);
    v16 = 59;
    return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, (uint64_t)&v16, 1);
  }
  return result;
}

double RNBRemote::DispatchQueueOffsets::GetThreadQueueInfo(unsigned __int16 *a1, int a2, mach_vm_address_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t Pointer;
  double result;
  mach_vm_address_t v15;
  std::string v16;

  if (*(char *)(a5 + 23) < 0)
  {
    **(_BYTE **)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a5 = 0;
    *(_BYTE *)(a5 + 23) = 0;
  }
  *a6 = 0;
  *a7 = 0;
  if (a3 - 1 <= 0xFFFFFFFFFFFFFFFDLL && *a1 != 0xFFFF)
  {
    Pointer = DNBProcessMemoryReadPointer(a2, a3);
    *a4 = Pointer;
    if (Pointer)
    {
      *a6 = DNBProcessMemoryReadInteger(a2, Pointer + a1[7], a1[8], 0);
      *a7 = DNBProcessMemoryReadInteger(a2, *a4 + a1[5], a1[6], 0);
      if (*a1 < 4u)
      {
        DNBProcessMemoryReadCStringFixed(&v16);
        if ((*(char *)(a5 + 23) & 0x80000000) == 0)
        {
LABEL_13:
          result = *(double *)&v16.__r_.__value_.__l.__data_;
          *(std::string *)a5 = v16;
          return result;
        }
      }
      else
      {
        v15 = DNBProcessMemoryReadPointer(a2, *a4 + a1[1]);
        if (!v15)
          return result;
        DNBProcessMemoryReadCString(a2, v15, &v16);
        if ((*(char *)(a5 + 23) & 0x80000000) == 0)
          goto LABEL_13;
      }
      operator delete(*(void **)a5);
      goto LABEL_13;
    }
  }
  return result;
}

uint64_t RNBRemote::GetJSONThreadsInfo@<X0>(uint64_t this@<X0>, int a2@<W1>, std::__shared_weak_count **a3@<X8>)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v9;
  unint64_t v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t ThreadAtIndex;
  std::__shared_weak_count **v17;
  uint64_t v18;
  int v19[66];

  if (*(_DWORD *)(this + 12))
  {
    v5 = this;
    v6 = (std::__shared_weak_count *)operator new(0x50uLL);
    v7 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)off_100060F10;
    v6[1].__vftable = (std::__shared_weak_count_vtbl *)off_100060DA0;
    v9 = v6 + 1;
    LODWORD(v6[2].__vftable) = 2;
    v6[2].__shared_owners_ = 0;
    v6[2].__shared_weak_owners_ = 0;
    v6[3].__vftable = 0;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v12 = __ldxr(p_shared_weak_owners);
    while (__stxr(v12 + 1, p_shared_weak_owners));
    v6[1].__shared_owners_ = (uint64_t)v9;
    v6[1].__shared_weak_owners_ = (uint64_t)v6;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v7);
    }
    v14 = *(_DWORD *)(v5 + 12);
    this = DNBProcessGetNumThreads(v14);
    v18 = this;
    if (this)
    {
      v17 = a3;
      v15 = 0;
      do
      {
        ThreadAtIndex = DNBProcessGetThreadAtIndex(v14, v15);
        this = DNBThreadGetStopReason(v14, ThreadAtIndex, v19);
        if (!a2 || (_DWORD)this && v19[0])
          operator new();
        ++v15;
      }
      while (v15 != v18);
      a3 = v17;
    }
  }
  else
  {
    v7 = 0;
    v9 = 0;
  }
  *a3 = v9;
  a3[1] = v7;
  return this;
}

unint64_t ReadStackMemory(int a1, uint64_t a2, uint64_t **a3, unsigned int a4)
{
  unint64_t result;
  int v8;
  mach_vm_address_t v9;
  int v10;
  uint64_t **v11;
  mach_vm_address_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t **v15;
  _QWORD *v16;
  uint64_t **v17;
  uint64_t *v18;
  mach_vm_address_t v19;
  BOOL v20;
  uint64_t **v21;
  mach_vm_address_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t *v25;
  char v26[28];
  int v27;
  uint64_t v28;
  __int128 v29;
  unint64_t v30;

  result = DNBThreadGetRegisterValueByID(a1, a2, -1, 2, v26);
  if ((_DWORD)result)
  {
    v8 = v27;
    v9 = v27 == 4 ? v28 : v28;
    if (v9)
    {
      v10 = 0;
      v11 = a3 + 1;
      do
      {
        if (++v10 > a4)
          break;
        v13 = (2 * v8);
        v30 = v13;
        result = DNBProcessMemoryRead(a1, v9, v13, (char *)&v29);
        if (result != v13)
          break;
        v14 = *v11;
        v15 = a3 + 1;
        v16 = a3 + 1;
        if (*v11)
        {
          v17 = a3 + 1;
          v18 = *v11;
          do
          {
            v19 = v18[4];
            v20 = v19 >= v9;
            if (v19 >= v9)
              v21 = (uint64_t **)v18;
            else
              v21 = (uint64_t **)(v18 + 1);
            if (v20)
              v17 = (uint64_t **)v18;
            v18 = *v21;
          }
          while (*v21);
          if (v17 != v11 && v9 >= (unint64_t)v17[4])
            return result;
          while (1)
          {
            while (1)
            {
              v16 = v14;
              v22 = v14[4];
              if (v9 >= v22)
                break;
              v14 = (uint64_t *)*v16;
              v15 = (uint64_t **)v16;
              if (!*v16)
                goto LABEL_31;
            }
            if (v22 >= v9)
              break;
            v14 = (uint64_t *)v16[1];
            if (!v14)
            {
              v15 = (uint64_t **)(v16 + 1);
              goto LABEL_31;
            }
          }
        }
        else
        {
LABEL_31:
          v23 = v16;
          v16 = operator new(0x40uLL);
          v16[4] = v9;
          v16[5] = 0;
          v16[6] = 0;
          v16[7] = 0;
          *v16 = 0;
          v16[1] = 0;
          v16[2] = v23;
          *v15 = v16;
          v24 = (uint64_t *)**a3;
          v25 = v16;
          if (v24)
          {
            *a3 = v24;
            v25 = *v15;
          }
          result = (unint64_t)std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a3[1], v25);
          a3[2] = (uint64_t *)((char *)a3[2] + 1);
        }
        *(_OWORD *)(v16 + 5) = v29;
        v12 = v29;
        v16[7] = v30;
        v8 = v27;
        if (v27 == 4)
          v9 = v12;
        else
          v9 = v12;
      }
      while (v9);
    }
  }
  return result;
}

void std::vector<unsigned char>::reserve(uint64_t a1, size_t __sz)
{
  _BYTE *v2;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  char *v8;
  _BYTE *v9;
  char *v10;
  unint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  char *v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;

  v2 = *(_BYTE **)a1;
  if (*(_QWORD *)(a1 + 16) - *(_QWORD *)a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0)
      abort();
    v5 = *(_BYTE **)(a1 + 8);
    v6 = operator new(__sz);
    v7 = v5 - v2;
    v8 = &v6[v5 - v2];
    v9 = v8;
    if (v5 == v2)
      goto LABEL_21;
    if (v7 < 8)
    {
      v10 = &v6[v5 - v2];
      goto LABEL_18;
    }
    v10 = &v6[v5 - v2];
    if ((unint64_t)(v2 - v6) >= 0x20)
    {
      if (v7 < 0x20)
      {
        v11 = 0;
        goto LABEL_13;
      }
      v11 = v7 & 0xFFFFFFFFFFFFFFE0;
      v12 = (__int128 *)(v5 - 16);
      v13 = &v6[v5 - 16 - v2];
      v14 = v7 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        *v13 = v15;
        v13 -= 2;
        v12 -= 2;
        v14 -= 32;
      }
      while (v14);
      if (v7 == v11)
        goto LABEL_20;
      if ((v7 & 0x18) != 0)
      {
LABEL_13:
        v10 = &v8[-(v7 & 0xFFFFFFFFFFFFFFF8)];
        v16 = &v5[-v11 - 8];
        v17 = v16 - v2;
        v18 = v11 - (v7 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v19 = *(_QWORD *)v16;
          v16 -= 8;
          *(_QWORD *)&v6[v17] = v19;
          v17 -= 8;
          v18 += 8;
        }
        while (v18);
        v5 -= v7 & 0xFFFFFFFFFFFFFFF8;
        if (v7 == (v7 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_20;
        goto LABEL_18;
      }
      v10 = &v8[-v11];
      v5 -= v11;
    }
LABEL_18:
    v20 = v10 - 1;
    do
    {
      v21 = *--v5;
      *v20-- = v21;
    }
    while (v5 != v2);
LABEL_20:
    v9 = v6;
LABEL_21:
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = &v6[__sz];
    if (v2)
      operator delete(v2);
  }
}

char *RNBRemote::ExtractThreadIDFromThreadSuffix(RNBRemote *this, char *__s1)
{
  char *result;

  if (*((_BYTE *)this + 782))
  {
    if (__s1)
    {
      result = strstr(__s1, "thread:");
      if (result)
        return (char *)strtoul(result + 7, 0, 16);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    result = (char *)*((_QWORD *)this + 68);
    if ((unint64_t)(result + 1) <= 1)
      return (char *)DNBProcessGetCurrentThread(*((_DWORD *)this + 3));
  }
  return result;
}

uint64_t GetProcessNameFrom_vAttach(char **a1, std::string *a2)
{
  char *v2;
  char v3;
  int v6;
  char __str[3];

  v2 = *a1;
  v3 = **a1;
  if (!v3)
    return 1;
  while (1)
  {
    __str[0] = v3;
    __str[1] = v2[1];
    __str[2] = 0;
    *__error() = 0;
    v6 = strtoul(__str, 0, 16);
    if (*__error() && v6 == 0)
      break;
    std::string::push_back(a2, v6);
    v2 = *a1 + 2;
    *a1 = v2;
    v3 = *v2;
    if (!*v2)
      return 1;
  }
  return 0;
}

BOOL RNBRemoteShouldCancelCallback(void *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  _BOOL8 v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v1 = g_remoteSP;
  v2 = (std::__shared_weak_count *)qword_1000716A0;
  if (qword_1000716A0)
  {
    v3 = (unint64_t *)(qword_1000716A0 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  if (v1)
  {
    v5 = *(_DWORD *)(v1 + 472) == -1;
    if (!v2)
      return v5;
  }
  else
  {
    v5 = 1;
    if (!v2)
      return v5;
  }
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return v5;
}

std::string *DNBError::SetErrorString(std::string *this, const char *a2)
{
  if (a2 && *a2)
    return std::string::assign((std::string *)&this->__r_.__value_.__r.__words[1], a2);
  if (this[1].__r_.__value_.__s.__data_[7] < 0)
  {
    *(_BYTE *)this->__r_.__value_.__l.__size_ = 0;
    this->__r_.__value_.__r.__words[2] = 0;
  }
  else
  {
    this->__r_.__value_.__s.__data_[8] = 0;
    this[1].__r_.__value_.__s.__data_[7] = 0;
  }
  return this;
}

BOOL process_does_not_exist(int a1)
{
  unint64_t v2;
  uint64_t v3;
  _BOOL8 v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  int v8;
  char *v10;
  char *v11;
  uint64_t v12;

  v10 = 0;
  v11 = 0;
  v12 = 0;
  DNBGetAllInfos(&v10);
  if (v11 == v10)
  {
    v4 = 1;
    if (!v10)
      return v4;
  }
  else
  {
    v2 = (v11 - v10) / 648;
    if (v2 <= 1)
      v3 = 1;
    else
      v3 = (v11 - v10) / 648;
    if (*((_DWORD *)v10 + 10) == a1)
    {
      v4 = 0;
    }
    else
    {
      v5 = 0;
      v6 = v10 + 688;
      v7 = v3 - 1;
      while (v7 != v5)
      {
        v8 = *(_DWORD *)v6;
        v6 += 648;
        ++v5;
        if (v8 == a1)
        {
          v4 = v5 >= v2;
          goto LABEL_14;
        }
      }
      v4 = 1;
    }
  }
LABEL_14:
  v11 = v10;
  operator delete(v10);
  return v4;
}

BOOL process_is_already_being_debugged(int a1)
{
  int v2;
  _BOOL8 result;

  result = 0;
  if (DNBProcessIsBeingDebugged(a1))
  {
    v2 = DNBGetParentProcessID(a1);
    if (v2 != getpid())
      return 1;
  }
  return result;
}

uint64_t attach_failed_due_to_uid_mismatch(int a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t result;
  unsigned int v6;
  size_t v7;
  int v8[2];
  int v9;
  int v10;
  _BYTE v11[420];
  unsigned int v12;

  *(_QWORD *)v8 = 0xE00000001;
  v9 = 1;
  v10 = a1;
  v7 = 648;
  if (sysctl(v8, 4u, v11, &v7, 0, 0))
    return 0;
  result = geteuid();
  *a2 = result;
  if ((_DWORD)result)
  {
    v6 = v12;
    *a3 = v12;
    return *a2 != v6;
  }
  return result;
}

_QWORD *XMLElementStart(uint64_t *a1, int a2, const char *a3, char a4)
{
  uint64_t v8;
  char *v9;
  const std::locale::facet *v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *result;
  _QWORD *v14;
  const std::locale::facet *v15;
  uint64_t v16;
  std::locale v17;

  if (a2)
  {
    v8 = *a1;
    v9 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    if (*((_DWORD *)v9 + 36) == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v17, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v17);
      v8 = *a1;
    }
    *((_DWORD *)v9 + 36) = 32;
    *(uint64_t *)((char *)a1 + *(_QWORD *)(v8 - 24) + 24) = a2;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a1, (uint64_t)&unk_1000528BD, 0);
  }
  LOBYTE(v17.__locale_) = 60;
  v11 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a1, (uint64_t)&v17, 1);
  v12 = strlen(a3);
  result = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)a3, v12);
  if ((a4 & 1) == 0)
  {
    LOBYTE(v17.__locale_) = 62;
    v14 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a1, (uint64_t)&v17, 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(*v14 - 24)));
    v15 = std::locale::use_facet(&v17, &std::ctype<char>::id);
    v16 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
    std::locale::~locale(&v17);
    std::ostream::put(v14, v16);
    return (_QWORD *)std::ostream::flush(v14);
  }
  return result;
}

uint64_t XMLElementEnd(uint64_t *a1, int a2, const char *a3)
{
  uint64_t v6;
  char *v7;
  const std::locale::facet *v8;
  _QWORD *v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  uint64_t v15;
  std::locale v17;

  if (a2)
  {
    v6 = *a1;
    v7 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    if (*((_DWORD *)v7 + 36) == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v8 = std::locale::use_facet(&v17, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 32);
      std::locale::~locale(&v17);
      v6 = *a1;
    }
    *((_DWORD *)v7 + 36) = 32;
    *(uint64_t *)((char *)a1 + *(_QWORD *)(v6 - 24) + 24) = a2;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a1, (uint64_t)&unk_1000528BD, 0);
  }
  LOBYTE(v17.__locale_) = 60;
  v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a1, (uint64_t)&v17, 1);
  LOBYTE(v17.__locale_) = 47;
  v10 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, (uint64_t)&v17, 1);
  v11 = strlen(a3);
  v12 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, (uint64_t)a3, v11);
  LOBYTE(v17.__locale_) = 62;
  v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)&v17, 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(_QWORD *)(*v13 - 24)));
  v14 = std::locale::use_facet(&v17, &std::ctype<char>::id);
  v15 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale(&v17);
  std::ostream::put(v13, v15);
  return std::ostream::flush(v13);
}

uint64_t XMLAttributeString(uint64_t result, const char *a2, char *__s1, char *__s2)
{
  _QWORD *v6;
  _QWORD *v7;
  size_t v8;
  _QWORD *v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;
  char v13;

  if (__s1)
  {
    v6 = (_QWORD *)result;
    if (!__s2 || (result = strcmp(__s1, __s2), (_DWORD)result))
    {
      v13 = 32;
      v7 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, (uint64_t)&v13, 1);
      v8 = strlen(a2);
      v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, (uint64_t)a2, v8);
      v10 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, (uint64_t)"=\"", 2);
      v11 = strlen(__s1);
      v12 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, (uint64_t)__s1, v11);
      return (uint64_t)std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)"\"", 1);
    }
  }
  return result;
}

_QWORD *XMLAttributeUnsignedDecimal(_QWORD *a1, const char *a2, uint64_t a3)
{
  _QWORD *v5;
  size_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  const std::ios_base *v10;
  const std::locale::facet *v11;
  _QWORD *v12;
  char v14;
  std::locale v15;

  v14 = 32;
  v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a1, (uint64_t)&v14, 1);
  v6 = strlen(a2);
  v7 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)a2, v6);
  v8 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, (uint64_t)"=\"", 2);
  v9 = *v8;
  *(_DWORD *)((char *)v8 + *(_QWORD *)(*v8 - 24) + 8) = *(_DWORD *)((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 8) & 0xFFFFFFB5 | 2;
  v10 = (const std::ios_base *)((char *)v8 + *(_QWORD *)(v9 - 24));
  if (v10[1].__fmtflags_ == -1)
  {
    std::ios_base::getloc(v10);
    v11 = std::locale::use_facet(&v15, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
    std::locale::~locale(&v15);
  }
  v10[1].__fmtflags_ = 32;
  v12 = (_QWORD *)std::ostream::operator<<(v8, a3);
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)"\"", 1);
}

uint64_t GenerateTargetXMLRegister(uint64_t *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  const char *v9;
  char *v10;
  unsigned int v11;
  uint64_t v12;
  char *v13;
  char *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  size_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  std::locale::__imp *v24;
  std::locale::__imp *v25;
  std::ios_base *v26;
  std::locale::__imp *locale;
  const std::ios_base *v28;
  const std::locale::facet *v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  std::locale::__imp *v38;
  std::locale::__imp *v39;
  std::ios_base *v40;
  std::locale::__imp *v41;
  const std::ios_base *v42;
  const std::locale::facet *v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  char *v49;
  _QWORD *v50;
  const std::locale::facet *v51;
  uint64_t v52;
  std::locale v54;
  char v55;
  std::locale v56;
  _QWORD v57[8];
  void *__p[2];
  __int128 v59;
  int v60;
  _QWORD v61[20];

  v8 = *(unsigned __int16 *)(a5 + 32);
  if (v8 == 4)
  {
    v10 = "vector";
    if (*(_DWORD *)(a5 + 8))
      v9 = "vector";
    else
      v9 = "general";
  }
  else if (v8 == 3)
  {
    if (*(_DWORD *)(a5 + 8))
      v9 = "float";
    else
      v9 = "general";
    v10 = "ieee754";
  }
  else
  {
    v9 = "general";
    if (v8 == 2)
      v10 = "sint";
    else
      v10 = "uint";
  }
  v11 = *(unsigned __int16 *)(a5 + 34) - 1;
  if (v11 > 0xB)
  {
    v14 = "hex";
    v13 = "int";
  }
  else
  {
    v12 = (__int16)v11;
    v13 = off_100060FE0[v12];
    v14 = off_100061040[v12];
  }
  XMLElementStart(a1, 2, "reg", 1);
  XMLAttributeString((uint64_t)a1, "name", *(char **)(a5 + 16), 0);
  XMLAttributeUnsignedDecimal(a1, "regnum", a2);
  XMLAttributeUnsignedDecimal(a1, "offset", *(unsigned int *)(a5 + 4));
  XMLAttributeUnsignedDecimal(a1, "bitsize", (8 * *(_DWORD *)(a5 + 36)));
  LOBYTE(v56.__locale_) = 32;
  v15 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a1, (uint64_t)&v56, 1);
  v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)"group", 5);
  v17 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)"=\"", 2);
  v18 = strlen(v9);
  v19 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)v9, v18);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)"\"", 1);
  XMLAttributeString((uint64_t)a1, "type", v13, "int");
  XMLAttributeString((uint64_t)a1, "altname", *(char **)(a5 + 24), 0);
  XMLAttributeString((uint64_t)a1, "encoding", v10, "uint");
  XMLAttributeString((uint64_t)a1, "format", v14, "hex");
  XMLAttributeUnsignedDecimal(a1, "group_id", *(unsigned int *)(a5 + 8));
  v20 = *(unsigned int *)(a5 + 44);
  if ((_DWORD)v20 != -1)
    XMLAttributeUnsignedDecimal(a1, "ehframe_regnum", v20);
  v21 = *(unsigned int *)(a5 + 48);
  if ((_DWORD)v21 != -1)
    XMLAttributeUnsignedDecimal(a1, "dwarf_regnum", v21);
  v22 = *(int *)(a5 + 52);
  if (v22 > 0xC)
    v23 = 0;
  else
    v23 = off_1000610A0[v22];
  XMLAttributeString((uint64_t)a1, "generic", v23, 0);
  if (*(_QWORD *)(a5 + 80) == *(_QWORD *)(a5 + 88))
  {
    v36 = *(_QWORD *)(a5 + 104);
    v37 = *(_QWORD *)(a5 + 112);
    if (v36 == v37)
      goto LABEL_52;
  }
  else
  {
    v56.__locale_ = v24;
    *(std::locale::__imp **)((char *)&v56.__locale_ + *((_QWORD *)v24 - 3)) = v25;
    v26 = (std::ios_base *)((char *)&v56 + *((_QWORD *)v56.__locale_ - 3));
    std::ios_base::init(v26, v57);
    v26[1].__vftable = 0;
    v26[1].__fmtflags_ = -1;
    std::streambuf::basic_streambuf(v57);
    *(_OWORD *)__p = 0u;
    v59 = 0u;
    v60 = 16;
    locale = v56.__locale_;
    *(_DWORD *)((char *)&v56 + *((_QWORD *)v56.__locale_ - 3) + 8) = *(_DWORD *)((char *)&v56
                                                                               + *((_QWORD *)v56.__locale_ - 3)
                                                                               + 8) & 0xFFFFFFB5 | 2;
    v28 = (const std::ios_base *)((char *)&v56 + *((_QWORD *)locale - 3));
    if (v28[1].__fmtflags_ == -1)
    {
      std::ios_base::getloc(v28);
      v29 = std::locale::use_facet(&v54, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 32);
      std::locale::~locale(&v54);
    }
    v28[1].__fmtflags_ = 32;
    v30 = *(unsigned int **)(a5 + 80);
    v31 = *(unsigned int **)(a5 + 88);
    if (v30 != v31)
    {
      v33 = *v30;
      v32 = v30 + 1;
      std::ostream::operator<<(&v56, v33);
      while (v32 != v31)
      {
        v34 = *v32++;
        LOBYTE(v54.__locale_) = 44;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v56, (uint64_t)&v54, 1);
        std::ostream::operator<<(&v56, v34);
      }
    }
    std::stringbuf::str(&v54, v57);
    if (v55 >= 0)
      v35 = (char *)&v54;
    else
      v35 = (char *)v54.__locale_;
    XMLAttributeString((uint64_t)a1, "value_regnums", v35, 0);
    if (v55 < 0)
      operator delete(v54.__locale_);
    if (SBYTE7(v59) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf(v57);
    std::ios::~ios(v61);
    v36 = *(_QWORD *)(a5 + 104);
    v37 = *(_QWORD *)(a5 + 112);
  }
  if (v36 != v37)
  {
    v56.__locale_ = v38;
    *(std::locale::__imp **)((char *)&v56.__locale_ + *((_QWORD *)v38 - 3)) = v39;
    v40 = (std::ios_base *)((char *)&v56 + *((_QWORD *)v56.__locale_ - 3));
    std::ios_base::init(v40, v57);
    v40[1].__vftable = 0;
    v40[1].__fmtflags_ = -1;
    std::streambuf::basic_streambuf(v57);
    *(_OWORD *)__p = 0u;
    v59 = 0u;
    v60 = 16;
    v41 = v56.__locale_;
    *(_DWORD *)((char *)&v56 + *((_QWORD *)v56.__locale_ - 3) + 8) = *(_DWORD *)((char *)&v56
                                                                               + *((_QWORD *)v56.__locale_ - 3)
                                                                               + 8) & 0xFFFFFFB5 | 2;
    v42 = (const std::ios_base *)((char *)&v56 + *((_QWORD *)v41 - 3));
    if (v42[1].__fmtflags_ == -1)
    {
      std::ios_base::getloc(v42);
      v43 = std::locale::use_facet(&v54, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v43->__vftable[2].~facet_0)(v43, 32);
      std::locale::~locale(&v54);
    }
    v42[1].__fmtflags_ = 32;
    v44 = *(unsigned int **)(a5 + 104);
    v45 = *(unsigned int **)(a5 + 112);
    if (v44 != v45)
    {
      v47 = *v44;
      v46 = v44 + 1;
      std::ostream::operator<<(&v56, v47);
      while (v46 != v45)
      {
        v48 = *v46++;
        LOBYTE(v54.__locale_) = 44;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v56, (uint64_t)&v54, 1);
        std::ostream::operator<<(&v56, v48);
      }
    }
    std::stringbuf::str(&v54, v57);
    if (v55 >= 0)
      v49 = (char *)&v54;
    else
      v49 = (char *)v54.__locale_;
    XMLAttributeString((uint64_t)a1, "invalidate_regnums", v49, 0);
    if (v55 < 0)
      operator delete(v54.__locale_);
    if (SBYTE7(v59) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf(v57);
    std::ios::~ios(v61);
  }
LABEL_52:
  LOBYTE(v56.__locale_) = 47;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a1, (uint64_t)&v56, 1);
  LOBYTE(v56.__locale_) = 62;
  v50 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a1, (uint64_t)&v56, 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v50 + *(_QWORD *)(*v50 - 24)));
  v51 = std::locale::use_facet(&v56, &std::ctype<char>::id);
  v52 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v51->__vftable[2].~facet_0)(v51, 10);
  std::locale::~locale(&v56);
  std::ostream::put(v50, v52);
  return std::ostream::flush(v50);
}

uint64_t GenerateTargetXMLRegisters(uint64_t *a1)
{
  uint64_t v2;
  uint64_t result;
  int v4;
  _QWORD *v5;
  void (__cdecl **v6)(std::ostringstream *__hidden);
  uint64_t v7;
  std::ios_base *v8;
  _QWORD *v9;
  const char *v10;
  size_t v11;
  char *v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t i;
  _QWORD *v22;
  const std::locale::facet *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *__p[2];
  char v28;
  void (__cdecl **v29)(std::ostringstream *__hidden);
  _QWORD v30[8];
  void *v31[2];
  __int128 v32;
  int v33;
  void (__cdecl **v34)(std::ostringstream *__hidden);
  unint64_t v35;

  v35 = 0;
  v2 = DNBGetRegisterSetInfo(&v35);
  result = DNBGetRegisterCPUType();
  if (!(_DWORD)result)
    return result;
  v4 = result;
  LOBYTE(v29) = 60;
  v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a1, (uint64_t)&v29, 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)"feature", 7);
  v29 = v6;
  *(_QWORD *)((char *)&v30[-1] + (_QWORD)*(v6 - 3)) = v7;
  v8 = (std::ios_base *)((char *)&v30[-1] + (_QWORD)*(v29 - 3));
  std::ios_base::init(v8, v30);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf(v30);
  *(_OWORD *)v31 = 0u;
  v32 = 0u;
  v33 = 16;
  v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v29, (uint64_t)"com.apple.debugserver.", 22);
  if (v4 <= 16777222)
  {
    if (v4 == 7)
    {
      v10 = "i386";
      goto LABEL_14;
    }
    if (v4 == 12)
    {
      v10 = "arm";
      goto LABEL_14;
    }
LABEL_13:
    v10 = 0;
    goto LABEL_14;
  }
  if (v4 == 16777223)
  {
    v10 = "x86_64";
    goto LABEL_14;
  }
  if (v4 == 33554444)
  {
    v10 = "arm64_32";
    goto LABEL_14;
  }
  if (v4 != 16777228)
    goto LABEL_13;
  v10 = "arm64";
LABEL_14:
  v11 = strlen(v10);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
  std::stringbuf::str(__p, v30);
  if (v28 >= 0)
    v12 = (char *)__p;
  else
    v12 = (char *)__p[0];
  XMLAttributeString((uint64_t)a1, "name", v12, 0);
  if (v28 < 0)
    operator delete(__p[0]);
  LOBYTE(__p[0]) = 62;
  v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a1, (uint64_t)__p, 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(_QWORD *)(*v13 - 24)));
  v14 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
  v15 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put(v13, v15);
  std::ostream::flush(v13);
  if (g_num_reg_entries)
  {
    v18 = 0;
    v19 = 0;
    do
    {
      GenerateTargetXMLRegister(a1, v19++, v16, v17, g_reg_entries + (v18 << 7));
      v18 = v19;
    }
    while (g_num_reg_entries > (unint64_t)v19);
  }
  XMLElementEnd(a1, 0, "feature");
  if (v35)
  {
    XMLElementStart(a1, 0, "groups", 0);
    if (v35 >= 2)
    {
      v20 = 2;
      for (i = 1; i < v35; i = v20++)
      {
        XMLElementStart(a1, 2, "group", 1);
        XMLAttributeUnsignedDecimal(a1, "id", i);
        XMLAttributeString((uint64_t)a1, "name", *(char **)(v2 + 24 * i), 0);
        LOBYTE(__p[0]) = 47;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a1, (uint64_t)__p, 1);
        LOBYTE(__p[0]) = 62;
        v22 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a1, (uint64_t)__p, 1);
        std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(_QWORD *)(*v22 - 24)));
        v23 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
        v24 = v2;
        v25 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
        std::locale::~locale((std::locale *)__p);
        v26 = v25;
        v2 = v24;
        std::ostream::put(v22, v26);
        std::ostream::flush(v22);
      }
    }
    XMLElementEnd(a1, 0, "groups");
  }
  if (SBYTE7(v32) < 0)
    operator delete(v31[0]);
  std::streambuf::~streambuf(v30);
  return std::ios::~ios(&v34);
}

uint64_t UpdateTargetXML(void)
{
  void (__cdecl **v0)(std::ostringstream *__hidden);
  uint64_t v1;
  std::ios_base *v2;
  _QWORD *v3;
  const std::locale::facet *v4;
  uint64_t v5;
  _QWORD *v6;
  const std::locale::facet *v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  void (__cdecl **v12)(std::ostringstream *__hidden);
  _QWORD v13[8];
  void *__p[2];
  __int128 v15;
  int v16;
  void (__cdecl **v17)(std::ostringstream *__hidden);

  v12 = v0;
  *(_QWORD *)((char *)&v13[-1] + (_QWORD)*(v0 - 3)) = v1;
  v2 = (std::ios_base *)((char *)&v13[-1] + (_QWORD)*(v12 - 3));
  std::ios_base::init(v2, v13);
  v2[1].__vftable = 0;
  v2[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf(v13);
  *(_OWORD *)__p = 0u;
  v15 = 0u;
  v16 = 16;
  v3 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v12, (uint64_t)"<?xml version=\"1.0\"?>\n<target version=\"1.0\">", 44);
  std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)));
  v4 = std::locale::use_facet((const std::locale *)&v10, &std::ctype<char>::id);
  v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale((std::locale *)&v10);
  std::ostream::put(v3, v5);
  std::ostream::flush(v3);
  GenerateTargetXMLRegisters((uint64_t *)&v12);
  v6 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v12, (uint64_t)"</target>", 9);
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(*v6 - 24)));
  v7 = std::locale::use_facet((const std::locale *)&v10, &std::ctype<char>::id);
  v8 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
  std::locale::~locale((std::locale *)&v10);
  std::ostream::put(v6, v8);
  std::ostream::flush(v6);
  std::stringbuf::str(&v10, v13);
  if (byte_10047186F < 0)
    operator delete((void *)g_target_xml);
  g_target_xml = v10;
  unk_100471868 = v11;
  if (SBYTE7(v15) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf(v13);
  return std::ios::~ios(&v17);
}

uint64_t get_integer_value_for_key_name_from_json(std::string::value_type *__s, char *a2)
{
  unsigned __int8 v3;
  char *v4;
  std::string::size_type size;
  const char *i;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v12;
  std::string v14;

  *((_BYTE *)&v14.__r_.__value_.__s + 23) = 1;
  LOWORD(v14.__r_.__value_.__l.__data_) = 34;
  std::string::append(&v14, __s);
  std::string::append(&v14, "\"");
  v3 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    v4 = strstr(a2, v14.__r_.__value_.__l.__data_);
    if (!v4)
    {
      v12 = -1;
LABEL_24:
      operator delete(v14.__r_.__value_.__l.__data_);
      return v12;
    }
    size = v14.__r_.__value_.__l.__size_;
LABEL_6:
    for (i = &v4[size + 1]; ; ++i)
    {
      v7 = *((unsigned __int8 *)i - 1);
      if (v7 > 0x3A)
        goto LABEL_16;
      if (((1 << v7) & 0x100002600) == 0)
        break;
    }
    if (v7 != 58)
    {
LABEL_16:
      v12 = -1;
      if ((v3 & 0x80) == 0)
        return v12;
      goto LABEL_24;
    }
    while (1)
    {
      v8 = *(unsigned __int8 *)i;
      v9 = v8 > 0x20;
      v10 = (1 << v8) & 0x100002600;
      if (v9 || v10 == 0)
        break;
      ++i;
    }
    *__error() = 0;
    v12 = strtoul(i, 0, 10);
    if (*__error())
      v12 = -1;
    if ((*((_BYTE *)&v14.__r_.__value_.__s + 23) & 0x80) == 0)
      return v12;
    goto LABEL_24;
  }
  v4 = strstr(a2, (const char *)&v14);
  if (v4)
  {
    size = v3;
    goto LABEL_6;
  }
  return -1;
}

uint64_t get_BOOLean_value_for_key_name_from_json(std::string::value_type *__s, char *a2, BOOL *a3)
{
  std::string::size_type v5;
  char *v6;
  std::string::size_type size;
  const char *i;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  BOOL v16;
  std::string v18;

  *((_BYTE *)&v18.__r_.__value_.__s + 23) = 1;
  LOWORD(v18.__r_.__value_.__l.__data_) = 34;
  std::string::append(&v18, __s);
  std::string::append(&v18, "\"");
  v5 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
  {
    v6 = strstr(a2, v18.__r_.__value_.__l.__data_);
    if (!v6)
    {
      v14 = 0;
LABEL_25:
      operator delete(v18.__r_.__value_.__l.__data_);
      return v14;
    }
    size = v18.__r_.__value_.__l.__size_;
  }
  else
  {
    v6 = strstr(a2, (const char *)&v18);
    if (!v6)
      return 0;
    size = v5;
  }
  for (i = &v6[size + 1]; ; ++i)
  {
    v9 = *((unsigned __int8 *)i - 1);
    if (v9 > 0x3A)
      goto LABEL_16;
    if (((1 << v9) & 0x100002600) == 0)
      break;
  }
  if (v9 != 58)
  {
LABEL_16:
    v14 = 0;
    goto LABEL_24;
  }
  while (1)
  {
    v10 = *(unsigned __int8 *)i;
    v11 = v10 > 0x20;
    v12 = (1 << v10) & 0x100002600;
    if (v11 || v12 == 0)
      break;
    ++i;
  }
  if (!strncmp(i, "true", 4uLL))
  {
    v16 = 1;
  }
  else
  {
    v15 = strncmp(i, "false", 5uLL);
    v14 = 0;
    if (v15)
      goto LABEL_24;
    v16 = 0;
  }
  *a3 = v16;
  v14 = 1;
LABEL_24:
  if ((v5 & 0x80) != 0)
    goto LABEL_25;
  return v14;
}

uint64_t get_array_of_ints_value_for_key_name_from_json(std::string::value_type *__s, char *a2, uint64_t a3)
{
  unsigned __int8 v5;
  char *v6;
  std::string::size_type size;
  const char *i;
  uint64_t v9;
  unsigned int v10;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  _OWORD *v30;
  unint64_t *v31;
  uint64_t v32;
  __int128 v33;
  unint64_t v34;
  char *v35;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unint64_t v42;
  char *__endptr;
  std::string v44;

  *((_BYTE *)&v44.__r_.__value_.__s + 23) = 1;
  LOWORD(v44.__r_.__value_.__l.__data_) = 34;
  std::string::append(&v44, __s);
  std::string::append(&v44, "\"");
  v5 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
  {
    v6 = strstr(a2, v44.__r_.__value_.__l.__data_);
    if (!v6)
      goto LABEL_65;
    size = v44.__r_.__value_.__l.__size_;
  }
  else
  {
    v6 = strstr(a2, (const char *)&v44);
    if (!v6)
      return 0;
    size = v5;
  }
  for (i = &v6[size + 2]; ; ++i)
  {
    v9 = *((unsigned __int8 *)i - 2);
    if (v9 > 0x3A)
      break;
    if (((1 << v9) & 0x100002600) == 0)
    {
      if (v9 != 58)
        break;
      while (1)
      {
        v10 = *((unsigned __int8 *)i - 1);
        if (v10 > 0x20 || ((1 << v10) & 0x100002600) == 0)
          break;
        ++i;
      }
      if (v10 != 91)
        break;
      while (1)
      {
        v12 = *(unsigned __int8 *)i;
        if (v12 > 0x20 || ((1 << v12) & 0x100002600) == 0)
          break;
        ++i;
      }
      if ((v12 & 0x80) == 0)
      {
        while ((_DefaultRuneLocale.__runetype[v12] & 0x400) != 0)
        {
          *__error() = 0;
          __endptr = 0;
          v15 = strtoul(i, &__endptr, 10);
          if (*__error())
            goto LABEL_65;
          v17 = *(unint64_t **)(a3 + 8);
          v16 = *(_QWORD *)(a3 + 16);
          if ((unint64_t)v17 >= v16)
          {
            v19 = *(unint64_t **)a3;
            v20 = (uint64_t)v17 - *(_QWORD *)a3;
            v21 = v20 >> 3;
            v22 = (v20 >> 3) + 1;
            if (v22 >> 61)
              abort();
            v23 = v16 - (_QWORD)v19;
            if (v23 >> 2 > v22)
              v22 = v23 >> 2;
            if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
              v22 = 0x1FFFFFFFFFFFFFFFLL;
            v42 = v22;
            if (v22)
            {
              if (v22 >> 61)
                std::__throw_bad_array_new_length[abi:nn180100]();
              v24 = operator new(8 * v22);
            }
            else
            {
              v24 = 0;
            }
            v25 = (unint64_t *)&v24[8 * v21];
            *v25 = v15;
            v18 = v25 + 1;
            if (v17 != v19)
            {
              v26 = (char *)v17 - (char *)v19 - 8;
              if (v26 < 0x58)
                goto LABEL_75;
              if ((unint64_t)((char *)v17 - v24 - v20) < 0x20)
                goto LABEL_75;
              v27 = (v26 >> 3) + 1;
              v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
              v29 = &v17[v28 / 0xFFFFFFFFFFFFFFF8];
              v25 = (unint64_t *)((char *)v25 - v28);
              v30 = &v24[8 * v21 - 16];
              v31 = v17 - 2;
              v32 = v27 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v33 = *(_OWORD *)v31;
                *(v30 - 1) = *((_OWORD *)v31 - 1);
                *v30 = v33;
                v30 -= 2;
                v31 -= 4;
                v32 -= 4;
              }
              while (v32);
              v17 = v29;
              if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_75:
                do
                {
                  v34 = *--v17;
                  *--v25 = v34;
                }
                while (v17 != v19);
              }
            }
            *(_QWORD *)a3 = v25;
            *(_QWORD *)(a3 + 8) = v18;
            *(_QWORD *)(a3 + 16) = &v24[8 * v42];
            if (v19)
              operator delete(v19);
          }
          else
          {
            *v17 = v15;
            v18 = v17 + 1;
          }
          *(_QWORD *)(a3 + 8) = v18;
          v35 = __endptr;
          if (__endptr == i || __endptr == 0)
            goto LABEL_65;
          v37 = *__endptr;
          if (!*__endptr)
            goto LABEL_65;
          if (v37 <= 0x20)
          {
            do
            {
              if (((1 << v37) & 0x100002600) == 0)
                break;
              v38 = *++v35;
              v37 = v38;
            }
            while (v38 <= 0x20);
          }
          if (v37 == 44)
            i = v35 + 1;
          else
            i = v35;
          while (1)
          {
            v39 = *(unsigned __int8 *)i;
            if (v39 > 0x20 || ((1 << v39) & 0x100002600) == 0)
              break;
            ++i;
          }
          if (v39 == 93)
            break;
          v12 = *(unsigned __int8 *)i;
          v14 = 1;
          if (*i < 0)
            goto LABEL_66;
        }
      }
      v14 = 1;
      if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return v14;
      goto LABEL_67;
    }
  }
LABEL_65:
  v14 = 0;
LABEL_66:
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
LABEL_67:
    operator delete(v44.__r_.__value_.__l.__data_);
  return v14;
}

void JSONGenerator::Dictionary::AddIntegerItem(uint64_t a1, uint64_t a2)
{
  std::string v2;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v2, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v2 = *(std::string *)a2;
  operator new();
}

void JSONGenerator::Dictionary::AddItem(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  void **v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::string __p;
  __int128 v15;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v5 = a3[1];
  *(_QWORD *)&v15 = *a3;
  *((_QWORD *)&v15 + 1) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(_QWORD *)(a1 + 40);
  if (v8 < *(_QWORD *)(a1 + 48))
  {
    v9 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(v8 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v8 = v9;
    memset(&__p, 0, sizeof(__p));
    *(_OWORD *)(v8 + 24) = v15;
    v15 = 0uLL;
    *(_QWORD *)(a1 + 40) = v8 + 40;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_15;
  }
  v10 = std::vector<std::pair<std::string,std::shared_ptr<JSONGenerator::Object>>>::__push_back_slow_path<std::pair<std::string,std::shared_ptr<JSONGenerator::Object>>>((void ***)(a1 + 32), (uint64_t)&__p);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  *(_QWORD *)(a1 + 40) = v10;
  if (!v11)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (v13)
  {
LABEL_14:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_15:
    operator delete(__p.__r_.__value_.__l.__data_);
}

void JSONGenerator::Dictionary::AddStringItem(uint64_t a1, uint64_t a2)
{
  std::string v2;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v2, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v2 = *(std::string *)a2;
  operator new();
}

void JSONGenerator::Dictionary::AddBooleanItem(uint64_t a1, uint64_t a2)
{
  std::string v2;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v2, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v2 = *(std::string *)a2;
  operator new();
}

void JSONGenerator::Dictionary::AddBytesAsHexASCIIString(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v4;
  unsigned __int8 *v5;
  void (__cdecl **v6)(std::ostringstream *__hidden);
  uint64_t v7;
  std::ios_base *v8;
  unsigned int v9;
  void (__cdecl **v10)(std::ostringstream *__hidden);
  char *v11;
  const std::locale::facet *v12;
  std::string v14;
  std::locale v15[2];
  std::string v16;
  void (__cdecl **v17)(std::ostringstream *__hidden);
  _QWORD v18[8];
  __int128 __p;
  __int128 v20;
  int v21;
  void (__cdecl **v22)(std::ostringstream *__hidden);

  if (a3)
  {
    v4 = a4;
    if (a4)
    {
      v5 = a3;
      v17 = v6;
      *(_QWORD *)((char *)&v18[-1] + (_QWORD)*(v6 - 3)) = v7;
      v8 = (std::ios_base *)((char *)&v18[-1] + (_QWORD)*(v17 - 3));
      std::ios_base::init(v8, v18);
      v8[1].__vftable = 0;
      v8[1].__fmtflags_ = -1;
      std::streambuf::basic_streambuf(v18);
      __p = 0u;
      v20 = 0u;
      v21 = 16;
      while (1)
      {
        v10 = v17;
        v11 = (char *)&v18[-1] + (_QWORD)*(v17 - 3);
        if (*((_DWORD *)v11 + 36) == -1)
        {
          std::ios_base::getloc((const std::ios_base *)((char *)&v18[-1] + (_QWORD)*(v17 - 3)));
          v12 = std::locale::use_facet(v15, &std::ctype<char>::id);
          ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 32);
          std::locale::~locale(v15);
          v10 = v17;
        }
        *((_DWORD *)v11 + 36) = 48;
        *(_DWORD *)((char *)v18 + (_QWORD)*(v10 - 3)) = *(_DWORD *)((_BYTE *)v18 + (_QWORD)*(v10 - 3)) & 0xFFFFFFB5 | 8;
        *(_DWORD *)((char *)v18 + (_QWORD)*(v10 - 3)) = *(_DWORD *)((_BYTE *)v18 + (_QWORD)*(v10 - 3)) & 0xFFFFFF4F | 0x80;
        *(_QWORD *)((char *)&v18[2] + (_QWORD)*(v10 - 3)) = 2;
        v9 = *v5++;
        std::ostream::operator<<(&v17, v9);
        if (!--v4)
        {
          if (*(char *)(a2 + 23) < 0)
            std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
          else
            v16 = *(std::string *)a2;
          operator new();
        }
      }
    }
  }
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v14 = *(std::string *)a2;
  operator new();
}

uint64_t RNBRemote::Packet::Packet(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char *__s, const char *a8)
{
  size_t v11;
  size_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  size_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;

  *(_DWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  v11 = strlen(__s);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
LABEL_18:
    abort();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    v13 = operator new(v14 + 1);
    *(_QWORD *)(a1 + 48) = v12;
    *(_QWORD *)(a1 + 56) = v15 | 0x8000000000000000;
    *(_QWORD *)(a1 + 40) = v13;
    goto LABEL_8;
  }
  v13 = (void *)(a1 + 40);
  *(_BYTE *)(a1 + 63) = v11;
  if (v11)
LABEL_8:
    memmove(v13, __s, v12);
  *((_BYTE *)v13 + v12) = 0;
  v16 = strlen(a8);
  if (v16 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_18;
  v17 = v16;
  if (v16 >= 0x17)
  {
    v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v19 = v16 | 7;
    v20 = v19 + 1;
    v18 = operator new(v19 + 1);
    *(_QWORD *)(a1 + 72) = v17;
    *(_QWORD *)(a1 + 80) = v20 | 0x8000000000000000;
    *(_QWORD *)(a1 + 64) = v18;
  }
  else
  {
    v18 = (void *)(a1 + 64);
    *(_BYTE *)(a1 + 87) = v16;
    if (!v16)
      goto LABEL_17;
  }
  memmove(v18, a8, v17);
LABEL_17:
  *((_BYTE *)v18 + v17) = 0;
  return a1;
}

void DNBTimer::DNBTimer(DNBTimer *this, int a2)
{
  *(_QWORD *)this = 0;
  if (a2)
    operator new();
  gettimeofday((timeval *)((char *)this + 8), 0);
}

void JSONGenerator::Dictionary::~Dictionary(JSONGenerator::Dictionary *this)
{
  JSONGenerator::Dictionary::~Dictionary(this);
  operator delete();
}

{
  void **v2;
  void **v3;
  void *v4;
  void **v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;

  *(_QWORD *)this = off_100060D28;
  v2 = (void **)*((_QWORD *)this + 4);
  if (v2)
  {
    v3 = (void **)*((_QWORD *)this + 5);
    v4 = (void *)*((_QWORD *)this + 4);
    if (v3 != v2)
    {
      do
      {
        v6 = (std::__shared_weak_count *)*(v3 - 1);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v5 = v3 - 5;
        if (*((char *)v3 - 17) < 0)
          operator delete(*v5);
        v3 -= 5;
      }
      while (v5 != v2);
      v4 = (void *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 5) = v2;
    operator delete(v4);
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
}

uint64_t JSONGenerator::Object::IsValid(JSONGenerator::Object *this)
{
  return 1;
}

uint64_t JSONGenerator::Object::Clear(uint64_t this)
{
  *(_DWORD *)(this + 24) = -1;
  return this;
}

_QWORD *JSONGenerator::Dictionary::Dump(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  const char *v6;
  size_t v7;
  _QWORD *v8;
  uint64_t i;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;

  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"{", 1);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 != *(_QWORD *)(a1 + 40))
  {
    v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"\"", 1);
    v6 = (const char *)v4;
    if (*(char *)(v4 + 23) < 0)
      v6 = *(const char **)v4;
    v7 = strlen(v6);
    v8 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, (uint64_t)"\":", 2);
    (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v4 + 24) + 32))(*(_QWORD *)(v4 + 24), a2);
    for (i = v4 + 40; i != *(_QWORD *)(a1 + 40); i += 40)
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)",", 1);
      v12 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"\"", 1);
      v13 = (const char *)i;
      if (*(char *)(i + 23) < 0)
        v13 = *(const char **)i;
      v10 = strlen(v13);
      v11 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v10);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)"\":", 2);
      (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(i + 24) + 32))(*(_QWORD *)(i + 24), a2);
    }
  }
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"}", 1);
}

_QWORD *JSONGenerator::Dictionary::DumpBinaryEscaped(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 *v4;
  char v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  std::string::size_type size;
  std::string::size_type v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  std::string *v17;
  uint64_t v18;
  _QWORD *v19;
  std::string v21;

  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"{", 1);
  v4 = *(unsigned __int8 **)(a1 + 32);
  if (v4 != *(unsigned __int8 **)(a1 + 40))
  {
    v5 = 0;
    do
    {
      if ((v5 & 1) != 0)
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)",", 1);
      v6 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"\"", 1);
      memset(&v21, 0, sizeof(v21));
      v7 = (char)v4[23];
      if (v7 >= 0)
        v8 = v4[23];
      else
        v8 = *((_QWORD *)v4 + 1);
      if (v7 >= 0)
        v9 = v4;
      else
        v9 = *(unsigned __int8 **)v4;
      if (v8)
      {
        do
        {
          v14 = *v9++;
          v13 = v14;
          v15 = (1 << v14) & 0x41800000000;
          v16 = v14 > 0x2A || v15 == 0;
          if (!v16 || v13 == 125)
          {
            std::string::push_back(&v21, 125);
            LOBYTE(v13) = v13 ^ 0x20;
          }
          std::string::push_back(&v21, v13);
          --v8;
        }
        while (v8);
        v12 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
        size = v21.__r_.__value_.__l.__size_;
        v11 = v21.__r_.__value_.__r.__words[0];
      }
      else
      {
        size = 0;
        v11 = 0;
        v12 = 0;
      }
      if ((v12 & 0x80u) == 0)
        v17 = &v21;
      else
        v17 = (std::string *)v11;
      if ((v12 & 0x80u) == 0)
        v18 = v12;
      else
        v18 = size;
      v19 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, (uint64_t)v17, v18);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)"\":", 2);
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v21.__r_.__value_.__l.__data_);
      (*(void (**)(_QWORD, _QWORD *))(**((_QWORD **)v4 + 3) + 40))(*((_QWORD *)v4 + 3), a2);
      v4 += 40;
      v5 = 1;
    }
    while (v4 != *(unsigned __int8 **)(a1 + 40));
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"}", 1);
  v21.__r_.__value_.__s.__data_[0] = 93;
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)&v21, 1);
}

void std::__shared_ptr_pointer<JSONGenerator::Integer *,std::shared_ptr<JSONGenerator::Object>::__shared_ptr_default_delete<JSONGenerator::Object,JSONGenerator::Integer>,std::allocator<JSONGenerator::Integer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t std::__shared_ptr_pointer<JSONGenerator::Integer *,std::shared_ptr<JSONGenerator::Object>::__shared_ptr_default_delete<JSONGenerator::Object,JSONGenerator::Integer>,std::allocator<JSONGenerator::Integer>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void JSONGenerator::Array::~Array(JSONGenerator::Array *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *(_QWORD *)this = off_100060DA0;
  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    v3 = *((_QWORD *)this + 5);
    v4 = (void *)*((_QWORD *)this + 4);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 5) = v2;
    operator delete(v4);
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *(_QWORD *)this = off_100060DA0;
  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    v3 = *((_QWORD *)this + 5);
    v4 = (void *)*((_QWORD *)this + 4);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 5) = v2;
    operator delete(v4);
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  operator delete();
}

_QWORD *JSONGenerator::Array::Dump(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"[", 1);
  v4 = *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32);
  if (v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = v4 >> 4;
    if ((unint64_t)(v4 >> 4) <= 1)
      v8 = 1;
    else
      v8 = v4 >> 4;
    do
    {
      (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + v5) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + v5), a2);
      if (++v6 < v7)
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)",", 1);
      v5 += 16;
    }
    while (v8 != v6);
  }
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"]", 1);
}

_QWORD *JSONGenerator::Array::DumpBinaryEscaped(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"[", 1);
  v4 = *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32);
  if (v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = v4 >> 4;
    if ((unint64_t)(v4 >> 4) <= 1)
      v8 = 1;
    else
      v8 = v4 >> 4;
    do
    {
      (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + v5) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + v5), a2);
      if (++v6 < v7)
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)",", 1);
      v5 += 16;
    }
    while (v8 != v6);
  }
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"]", 1);
}

_OWORD *std::vector<std::shared_ptr<JSONGenerator::Object>>::__push_back_slow_path<std::shared_ptr<JSONGenerator::Object> const&>(uint64_t a1, __int128 *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  _OWORD *v16;
  __int128 v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD **)(a1 + 8);
  v4 = ((uint64_t)v3 - *(_QWORD *)a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    abort();
  v7 = *(_QWORD *)(a1 + 16) - (_QWORD)v2;
  if (v7 >> 3 > v5)
    v5 = v7 >> 3;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0)
    v5 = 0xFFFFFFFFFFFFFFFLL;
  if (v5 >> 60)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v9 = 16 * v5;
  v10 = (char *)operator new(16 * v5);
  v11 = &v10[16 * v4];
  v12 = *a2;
  *(_OWORD *)v11 = *a2;
  if (*((_QWORD *)&v12 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v2 = *(_QWORD **)a1;
    v3 = *(_QWORD **)(a1 + 8);
  }
  v15 = &v10[v9];
  v16 = v11 + 16;
  if (v3 == v2)
  {
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a1 + 16) = v15;
  }
  else
  {
    do
    {
      v17 = *((_OWORD *)v3 - 1);
      v3 -= 2;
      *((_OWORD *)v11 - 1) = v17;
      v11 -= 16;
      *v3 = 0;
      v3[1] = 0;
    }
    while (v3 != v2);
    v2 = *(_QWORD **)a1;
    v18 = *(_QWORD **)(a1 + 8);
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a1 + 16) = v15;
    while (v18 != v2)
    {
      v19 = (std::__shared_weak_count *)*(v18 - 1);
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v18 -= 2;
    }
  }
  if (v2)
    operator delete(v2);
  return v16;
}

void JSONGenerator::Integer::~Integer(JSONGenerator::Integer *this)
{
  std::__shared_weak_count *v1;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

{
  std::__shared_weak_count *v1;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  operator delete();
}

uint64_t JSONGenerator::Integer::Dump(uint64_t a1, uint64_t a2)
{
  return std::ostream::operator<<(a2, *(_QWORD *)(a1 + 32));
}

uint64_t JSONGenerator::Integer::DumpBinaryEscaped(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
}

void **std::vector<std::pair<std::string,std::shared_ptr<JSONGenerator::Object>>>::__push_back_slow_path<std::pair<std::string,std::shared_ptr<JSONGenerator::Object>>>(void ***a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  void **v10;
  void **v11;
  void **v12;
  void **v13;
  __int128 v14;
  void **v15;
  void **v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;

  v2 = 0xCCCCCCCCCCCCCCCDLL * (a1[1] - *a1);
  v3 = v2 + 1;
  if (v2 + 1 > 0x666666666666666)
    abort();
  if (0x999999999999999ALL * (a1[2] - *a1) > v3)
    v3 = 0x999999999999999ALL * (a1[2] - *a1);
  if (0xCCCCCCCCCCCCCCCDLL * (a1[2] - *a1) >= 0x333333333333333)
    v5 = 0x666666666666666;
  else
    v5 = v3;
  if (v5 > 0x666666666666666)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v7 = 40 * v5;
  v8 = (char *)operator new(40 * v5);
  v9 = &v8[40 * v2];
  v10 = (void **)&v8[v7];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_QWORD *)v9 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(v9 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v11 = (void **)(v9 + 40);
  v12 = *a1;
  v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = (void **)v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    do
    {
      v14 = *(_OWORD *)(v13 - 5);
      *((_QWORD *)v9 - 3) = *(v13 - 3);
      *(_OWORD *)(v9 - 40) = v14;
      *(v13 - 4) = 0;
      *(v13 - 3) = 0;
      *(v13 - 5) = 0;
      *((_OWORD *)v9 - 1) = *((_OWORD *)v13 - 1);
      v9 -= 40;
      *(v13 - 2) = 0;
      *(v13 - 1) = 0;
      v13 -= 5;
    }
    while (v13 != v12);
    v13 = *a1;
    v15 = a1[1];
    *a1 = (void **)v9;
    a1[1] = v11;
    a1[2] = v10;
    if (v15 != v13)
    {
      do
      {
        v17 = (std::__shared_weak_count *)*(v15 - 1);
        if (v17)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        v16 = v15 - 5;
        if (*((char *)v15 - 17) < 0)
          operator delete(*v16);
        v15 -= 5;
      }
      while (v16 != v13);
    }
  }
  if (v13)
    operator delete(v13);
  return v11;
}

void JSONGenerator::String::~String(void **this)
{
  std::__shared_weak_count *v2;

  *this = off_100060E20;
  if (*((char *)this + 55) < 0)
  {
    operator delete(this[4]);
    v2 = (std::__shared_weak_count *)this[2];
    if (!v2)
      return;
  }
  else
  {
    v2 = (std::__shared_weak_count *)this[2];
    if (!v2)
      return;
  }
  std::__shared_weak_count::__release_weak(v2);
}

{
  std::__shared_weak_count *v2;

  *this = off_100060E20;
  if (*((char *)this + 55) < 0)
  {
    operator delete(this[4]);
    v2 = (std::__shared_weak_count *)this[2];
    if (!v2)
LABEL_4:
      operator delete();
  }
  else
  {
    v2 = (std::__shared_weak_count *)this[2];
    if (!v2)
      goto LABEL_4;
  }
  std::__shared_weak_count::__release_weak(v2);
  goto LABEL_4;
}

_QWORD *JSONGenerator::String::Dump(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v9;
  char v10;
  char v11;
  char v12;

  v9 = 34;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)&v9, 1);
  if (*(char *)(a1 + 55) < 0)
  {
    v4 = *(_QWORD *)(a1 + 40);
    if (!v4)
      goto LABEL_11;
  }
  else
  {
    v4 = *(unsigned __int8 *)(a1 + 55);
    if (!*(_BYTE *)(a1 + 55))
      goto LABEL_11;
  }
  v5 = 0;
  do
  {
    v6 = a1 + 32;
    if (*(char *)(a1 + 55) < 0)
      v6 = *(_QWORD *)(a1 + 32);
    v7 = *(unsigned __int8 *)(v6 + v5);
    if (v7 == 34)
    {
      v11 = 92;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)&v11, 1);
    }
    v12 = v7;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)&v12, 1);
    ++v5;
  }
  while (v4 != v5);
LABEL_11:
  v10 = 34;
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)&v10, 1);
}

_QWORD *JSONGenerator::String::DumpBinaryEscaped(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t i;
  char *v6;
  uint64_t v7;
  unsigned int v8;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;

  v10 = 34;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)&v10, 1);
  if ((*(char *)(a1 + 55) & 0x80000000) == 0)
  {
    v4 = *(unsigned __int8 *)(a1 + 55);
    if (!*(_BYTE *)(a1 + 55))
      goto LABEL_17;
    goto LABEL_5;
  }
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
LABEL_5:
    for (i = 0; v4 != i; ++i)
    {
      v7 = a1 + 32;
      if (*(char *)(a1 + 55) < 0)
        v7 = *(_QWORD *)(a1 + 32);
      v8 = *(unsigned __int8 *)(v7 + i);
      if (v8 > 0x29)
      {
        if (v8 != 42 && v8 != 125)
          goto LABEL_16;
      }
      else if (v8 - 35 >= 2)
      {
        if (v8 == 34)
        {
          v12 = 92;
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)&v12, 1);
        }
LABEL_16:
        v15 = v8;
        v6 = &v15;
        goto LABEL_7;
      }
      v13 = 125;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)&v13, 1);
      v14 = v8 ^ 0x20;
      v6 = &v14;
LABEL_7:
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)v6, 1);
    }
  }
LABEL_17:
  v11 = 34;
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)&v11, 1);
}

void std::__shared_ptr_pointer<JSONGenerator::String *,std::shared_ptr<JSONGenerator::Object>::__shared_ptr_default_delete<JSONGenerator::Object,JSONGenerator::String>,std::allocator<JSONGenerator::String>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t std::__shared_ptr_pointer<JSONGenerator::String *,std::shared_ptr<JSONGenerator::Object>::__shared_ptr_default_delete<JSONGenerator::Object,JSONGenerator::String>,std::allocator<JSONGenerator::String>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void JSONGenerator::Boolean::~Boolean(JSONGenerator::Boolean *this)
{
  std::__shared_weak_count *v1;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

{
  std::__shared_weak_count *v1;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  operator delete();
}

_QWORD *JSONGenerator::Boolean::Dump(uint64_t a1, _QWORD *a2)
{
  if (*(_BYTE *)(a1 + 28))
    return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"true", 4);
  else
    return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"false", 5);
}

uint64_t JSONGenerator::Boolean::DumpBinaryEscaped(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
}

void std::__shared_ptr_pointer<JSONGenerator::Boolean *,std::shared_ptr<JSONGenerator::Object>::__shared_ptr_default_delete<JSONGenerator::Object,JSONGenerator::Boolean>,std::allocator<JSONGenerator::Boolean>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t std::__shared_ptr_pointer<JSONGenerator::Boolean *,std::shared_ptr<JSONGenerator::Object>::__shared_ptr_default_delete<JSONGenerator::Object,JSONGenerator::Boolean>,std::allocator<JSONGenerator::Boolean>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const std::locale::facet *v11;
  _BYTE v13[16];
  std::locale v14;

  std::ostream::sentry::sentry(v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = a2 + a3;
    if ((*(_DWORD *)(v6 + 8) & 0xB0) == 0x20)
      v9 = v8;
    else
      v9 = a2;
    v10 = *(_DWORD *)(v6 + 144);
    if (v10 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v11 = std::locale::use_facet(&v14, &std::ctype<char>::id);
      v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v10;
    }
    if (!std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(v7, a2, v9, v8, v6, (char)v10))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  std::ostream::sentry::~sentry(v13);
  return a1;
}

uint64_t std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  size_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__b[2];
  int64_t v22;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if ((uint64_t)v12 >= 1)
    {
      if (v12 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      if (v12 >= 0x17)
      {
        v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v14 = v12 | 7;
        v15 = v14 + 1;
        v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        v22 = v15 | 0x8000000000000000;
        __b[0] = v13;
      }
      else
      {
        HIBYTE(v22) = v12;
        v13 = __b;
      }
      memset(v13, __c, v12);
      *((_BYTE *)v13 + v12) = 0;
      if (v22 >= 0)
        v16 = __b;
      else
        v16 = (void **)__b[0];
      v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(_QWORD *)v6 + 96))(v6, v16, v12);
      v18 = v17;
      if (SHIBYTE(v22) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12)
          return 0;
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(_QWORD *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

uint64_t std::deque<std::string>::~deque[abi:nn180100](uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 / 0xAA];
    v7 = (unint64_t)*v6;
    v8 = (unint64_t)*v6 + 24 * (v5 % 0xAA);
    v9 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v5) / 0xAA] + 24 * ((*(_QWORD *)(a1 + 40) + v5) % 0xAA);
    if (v8 != v9)
    {
      do
      {
        if (*(char *)(v8 + 23) < 0)
        {
          operator delete(*(void **)v8);
          v7 = (unint64_t)*v6;
        }
        v8 += 24;
        if (v8 - v7 == 4080)
        {
          v10 = (unint64_t)v6[1];
          ++v6;
          v7 = v10;
          v8 = v10;
        }
      }
      while (v8 != v9);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 85;
    goto LABEL_17;
  }
  if (v12 == 2)
  {
    v13 = 170;
LABEL_17:
    *(_QWORD *)(a1 + 32) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    v16 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(a1 + 16);
    if (v15 != v16)
      *(_QWORD *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *std::vector<RNBRemote::Packet>::__push_back_slow_path<RNBRemote::Packet>(void **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  __int128 v8;
  char *v9;
  char *v10;
  char *v11;
  void **v12;
  void **v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  void **v18;

  v2 = 0x2E8BA2E8BA2E8BA3 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x2E8BA2E8BA2E8BALL)
    abort();
  if (0x5D1745D1745D1746 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v3)
    v3 = 0x5D1745D1745D1746 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)) >= 0x1745D1745D1745DLL)
    v6 = 0x2E8BA2E8BA2E8BALL;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x2E8BA2E8BA2E8BALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v7 = (char *)operator new(88 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_OWORD *)(a2 + 16);
  v9 = &v7[88 * v2];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  v10 = &v7[88 * v6];
  *((_QWORD *)v9 + 4) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(v9 + 40) = *(_OWORD *)(a2 + 40);
  *((_QWORD *)v9 + 7) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *((_OWORD *)v9 + 4) = *(_OWORD *)(a2 + 64);
  *((_QWORD *)v9 + 10) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  v11 = v9 + 88;
  v12 = (void **)*a1;
  v13 = (void **)a1[1];
  if (v13 != *a1)
  {
    do
    {
      v14 = *(_OWORD *)(v13 - 11);
      v15 = *(_OWORD *)(v13 - 9);
      *((_QWORD *)v9 - 7) = *(v13 - 7);
      *(_OWORD *)(v9 - 72) = v15;
      *(_OWORD *)(v9 - 88) = v14;
      v16 = *((_OWORD *)v13 - 3);
      *((_QWORD *)v9 - 4) = *(v13 - 4);
      *((_OWORD *)v9 - 3) = v16;
      *(v13 - 5) = 0;
      *(v13 - 4) = 0;
      *(v13 - 6) = 0;
      v17 = *(_OWORD *)(v13 - 3);
      *((_QWORD *)v9 - 1) = *(v13 - 1);
      *(_OWORD *)(v9 - 24) = v17;
      v9 -= 88;
      *(v13 - 2) = 0;
      *(v13 - 1) = 0;
      *(v13 - 3) = 0;
      v13 -= 11;
    }
    while (v13 != v12);
    v13 = (void **)*a1;
    v18 = (void **)a1[1];
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    while (1)
    {
      if (v18 == v13)
        goto LABEL_22;
      if (*((char *)v18 - 1) < 0)
      {
        operator delete(*(v18 - 3));
        if ((*((char *)v18 - 25) & 0x80000000) == 0)
          goto LABEL_14;
      }
      else if ((*((char *)v18 - 25) & 0x80000000) == 0)
      {
        goto LABEL_14;
      }
      operator delete(*(v18 - 6));
LABEL_14:
      v18 -= 11;
    }
  }
  *a1 = v9;
  a1[1] = v11;
  a1[2] = v10;
LABEL_22:
  if (v13)
    operator delete(v13);
  return v11;
}

void std::deque<std::string>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  void *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  BOOL v36;
  int64_t v37;
  unint64_t v38;
  char *v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int64_t v44;
  unint64_t v45;
  char *v46;
  unint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  __int128 *v55;
  _OWORD *v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  __int128 *v63;
  _OWORD *v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_57:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v30 = (v5 - v9) >> 2;
      if (v5 == v9)
        v30 = 1;
      if (!(v30 >> 61))
      {
        v31 = v30 >> 2;
        v32 = 8 * v30;
        v33 = (char *)operator new(8 * v30);
        v34 = &v33[8 * v31];
        v35 = &v33[v32];
        v37 = v5 - v7;
        v36 = v5 == v7;
        v5 = v34;
        if (!v36)
        {
          v5 = &v34[v37 & 0xFFFFFFFFFFFFFFF8];
          v38 = v37 - 8;
          if ((unint64_t)(v37 - 8) >= 0x38)
          {
            v52 = &v33[8 * v31];
            v39 = v52;
            if ((unint64_t)(v52 - v7) >= 0x20)
            {
              v53 = (v38 >> 3) + 1;
              v54 = 8 * (v53 & 0x3FFFFFFFFFFFFFFCLL);
              v39 = &v34[v54];
              v7 += v54;
              v55 = (__int128 *)(v6 + 3);
              v56 = v52 + 16;
              v57 = v53 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v58 = *v55;
                *(v56 - 1) = *(v55 - 1);
                *v56 = v58;
                v55 += 2;
                v56 += 2;
                v57 -= 4;
              }
              while (v57);
              if (v53 == (v53 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_55;
            }
          }
          else
          {
            v39 = &v33[8 * v31];
          }
          do
          {
            v59 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v39 = v59;
            v39 += 8;
          }
          while (v39 != v5);
        }
        goto LABEL_55;
      }
LABEL_65:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_57;
  }
  v18 = *(char **)(a1 + 8);
  v17 = *(char **)(a1 + 16);
  v19 = v17 - v18;
  v20 = (v17 - v18) >> 3;
  v21 = *(char **)(a1 + 24);
  v22 = (uint64_t)&v21[-*(_QWORD *)a1];
  if (v20 < (unint64_t)(v22 >> 3))
  {
    if (v21 != v17)
    {
      v68 = (char *)operator new(0xFF0uLL);
      std::__split_buffer<std::string *>::push_back((char **)a1, &v68);
      return;
    }
    v68 = (char *)operator new(0xFF0uLL);
    std::__split_buffer<std::string *>::push_front((void **)a1, &v68);
    v40 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v40 + 1);
    v8 = *v40;
    *(_QWORD *)(a1 + 8) = v40 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_57;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v41 = (v5 - v9) >> 2;
      if (v5 == v9)
        v41 = 1;
      if (!(v41 >> 61))
      {
        v42 = v41 >> 2;
        v43 = 8 * v41;
        v33 = (char *)operator new(8 * v41);
        v34 = &v33[8 * v42];
        v35 = &v33[v43];
        v44 = v5 - v7;
        v36 = v5 == v7;
        v5 = v34;
        if (!v36)
        {
          v5 = &v34[v44 & 0xFFFFFFFFFFFFFFF8];
          v45 = v44 - 8;
          if ((unint64_t)(v44 - 8) >= 0x38)
          {
            v60 = &v33[8 * v42];
            v46 = v60;
            if ((unint64_t)(v60 - v7) >= 0x20)
            {
              v61 = (v45 >> 3) + 1;
              v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
              v46 = &v34[v62];
              v7 += v62;
              v63 = (__int128 *)(v40 + 3);
              v64 = v60 + 16;
              v65 = v61 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v66 = *v63;
                *(v64 - 1) = *(v63 - 1);
                *v64 = v66;
                v63 += 2;
                v64 += 2;
                v65 -= 4;
              }
              while (v65);
              if (v61 == (v61 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_55;
            }
          }
          else
          {
            v46 = &v33[8 * v42];
          }
          do
          {
            v67 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v46 = v67;
            v46 += 8;
          }
          while (v46 != v5);
        }
LABEL_55:
        *(_QWORD *)a1 = v33;
        *(_QWORD *)(a1 + 8) = v34;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v35;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_57;
      }
      goto LABEL_65;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v21 == *(char **)a1)
    v24 = 1;
  else
    v24 = v23;
  v72 = a1 + 24;
  if (v24 >> 61)
    goto LABEL_65;
  v25 = (char *)operator new(8 * v24);
  v26 = &v25[8 * v20];
  v68 = v25;
  v69 = v26;
  v27 = &v25[8 * v24];
  v71 = v27;
  v28 = operator new(0xFF0uLL);
  if (v20 == v24)
  {
    if (v19 < 1)
    {
      if (v17 == v18)
        v47 = 1;
      else
        v47 = v19 >> 2;
      if (v47 >> 61)
        goto LABEL_65;
      v48 = (char *)operator new(8 * v47);
      v26 = &v48[8 * (v47 >> 2)];
      v27 = &v48[8 * v47];
      v68 = v48;
      v69 = v26;
      v71 = v27;
      operator delete(v25);
      v18 = *(char **)(a1 + 8);
      v17 = *(char **)(a1 + 16);
      v25 = v48;
    }
    else
    {
      v29 = v20 + 2;
      if (v20 >= -1)
        v29 = v20 + 1;
      v26 -= 8 * (v29 >> 1);
      v69 = v26;
    }
  }
  *(_QWORD *)v26 = v28;
  v49 = v26 + 8;
  v70 = v26 + 8;
  if (v17 == v18)
  {
    v17 = v18;
  }
  else
  {
    do
    {
      v17 -= 8;
      std::__split_buffer<std::string *>::push_front((void **)&v68, v17);
    }
    while (v17 != *(char **)(a1 + 8));
    v25 = v68;
    v26 = v69;
    v18 = *(char **)(a1 + 16);
    v49 = v70;
    v27 = v71;
  }
  v50 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v26;
  v68 = v50;
  v69 = v17;
  v51 = *(char **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v49;
  *(_QWORD *)(a1 + 24) = v27;
  v70 = v18;
  v71 = v51;
  if (v18 != v17)
    v70 = &v18[(v17 - v18 + 7) & 0xFFFFFFFFFFFFFFF8];
  if (v50)
    operator delete(v50);
}

void std::__split_buffer<std::string *>::push_back(char **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  BOOL v19;
  int64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 *v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v4 = a1[2];
  if (v4 != a1[3])
    goto LABEL_22;
  v5 = *a1;
  v6 = a1[1];
  if (v6 > *a1)
  {
    v7 = (v6 - *a1) >> 3;
    if (v7 >= -1)
      v8 = v7 + 1;
    else
      v8 = v7 + 2;
    v9 = v8 >> 1;
    v10 = -v9;
    v11 = &v6[-8 * v9];
    v12 = v4 - v6;
    if (v4 != v6)
    {
      memmove(&v6[-8 * v9], a1[1], v4 - v6);
      v4 = a1[1];
    }
    v13 = &v4[8 * v10];
    v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_22;
  }
  v14 = (v4 - v5) >> 2;
  if (v4 == v5)
    v14 = 1;
  if (v14 >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v15 = v14 >> 2;
  v16 = 8 * v14;
  v17 = (char *)operator new(8 * v14);
  v18 = &v17[8 * v15];
  v20 = v4 - v6;
  v19 = v4 == v6;
  v4 = v18;
  if (!v19)
  {
    v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      v22 = &v17[8 * v15];
      do
      {
LABEL_19:
        v31 = *(_QWORD *)v6;
        v6 += 8;
        *(_QWORD *)v22 = v31;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_20;
    }
    v23 = &v17[8 * v15];
    v22 = v23;
    if ((unint64_t)(v23 - v6) < 0x20)
      goto LABEL_19;
    v24 = (v21 >> 3) + 1;
    v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v18[v25];
    v26 = &v6[v25];
    v27 = (__int128 *)(v6 + 16);
    v28 = v23 + 16;
    v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v30 = *v27;
      *(v28 - 1) = *(v27 - 1);
      *v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    v6 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_19;
  }
LABEL_20:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v5)
  {
    operator delete(v5);
    v4 = a1[2];
  }
LABEL_22:
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::string *>::push_front(void **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  _OWORD *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v4 = (char *)a1[1];
  if (v4 == *a1)
  {
    v7 = a1[2];
    v6 = a1[3];
    if (v7 >= v6)
    {
      v13 = v6 - v4;
      v12 = v13 == 0;
      v14 = v13 >> 2;
      if (v12)
        v14 = 1;
      if (v14 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v15 = (v14 + 3) >> 2;
      v16 = 8 * v14;
      v17 = (char *)operator new(8 * v14);
      v5 = &v17[8 * v15];
      v18 = v5;
      v19 = v7 - v4;
      if (v7 != v4)
      {
        v18 = &v5[v19 & 0xFFFFFFFFFFFFFFF8];
        v20 = v19 - 8;
        v21 = &v17[8 * v15];
        v22 = v4;
        if (v20 < 0x38)
          goto LABEL_27;
        v23 = &v17[8 * v15];
        v21 = v23;
        v22 = v4;
        if ((unint64_t)(v23 - v4) < 0x20)
          goto LABEL_27;
        v24 = (v20 >> 3) + 1;
        v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        v21 = &v5[v25];
        v22 = &v4[v25];
        v26 = (__int128 *)(v4 + 16);
        v27 = v23 + 16;
        v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v29 = *v26;
          *(v27 - 1) = *(v26 - 1);
          *v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_27:
          do
          {
            v30 = *(_QWORD *)v22;
            v22 += 8;
            *(_QWORD *)v21 = v30;
            v21 += 8;
          }
          while (v21 != v18);
        }
      }
      *a1 = v17;
      a1[1] = v5;
      a1[2] = v18;
      a1[3] = &v17[v16];
      if (v4)
      {
        operator delete(v4);
        v5 = (char *)a1[1];
      }
    }
    else
    {
      v8 = (v6 - v7) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v11 = &v7[8 * (v9 >> 1)];
      v5 = &v11[-(v7 - v4)];
      if (v7 != v4)
      {
        memmove(&v11[-(v7 - v4)], v4, v7 - v4);
        v4 = (char *)a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[8 * v10];
    }
  }
  else
  {
    v5 = (char *)a1[1];
  }
  *((_QWORD *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

void std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

uint64_t **std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  size_t v9;
  const void *v10;
  uint64_t **v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  int v21;
  _BOOL4 v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    if (v8 >= 0)
      v10 = a2;
    else
      v10 = *a2;
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v6;
        v14 = (const void *)v6[4];
        v12 = v6 + 4;
        v13 = v14;
        v15 = *((char *)v12 + 23);
        if (v15 >= 0)
          v16 = *((unsigned __int8 *)v12 + 23);
        else
          v16 = v12[1];
        if (v15 >= 0)
          v17 = v12;
        else
          v17 = v13;
        if (v16 >= v9)
          v18 = v9;
        else
          v18 = v16;
        v19 = memcmp(v10, v17, v18);
        v20 = v9 < v16;
        if (v19)
          v20 = v19 < 0;
        if (!v20)
          break;
        v6 = *v11;
        v7 = v11;
        if (!*v11)
          goto LABEL_27;
      }
      v21 = memcmp(v17, v10, v18);
      v22 = v16 < v9;
      if (v21)
        v22 = v21 < 0;
      if (!v22)
        break;
      v6 = v11[1];
      if (!v6)
      {
        v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    v11 = a1 + 1;
LABEL_27:
    v23 = (uint64_t *)v11;
    v11 = (uint64_t **)operator new(0x40uLL);
    v24 = *a4;
    v25 = (uint64_t *)*((_QWORD *)*a4 + 2);
    *((_OWORD *)v11 + 2) = **a4;
    v11[6] = v25;
    *v24 = 0;
    v24[1] = 0;
    v24[2] = 0;
    *((_DWORD *)v11 + 14) = 0;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = v23;
    *v7 = (uint64_t *)v11;
    v26 = (uint64_t *)**a1;
    v27 = (uint64_t *)v11;
    if (v26)
    {
      *a1 = v26;
      v27 = *v7;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v27);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v11;
}

uint64_t std::vector<register_map_entry>::__push_back_slow_path<register_map_entry const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char *v18;
  void *v19;
  void *v20;

  v2 = (a1[1] - *a1) >> 7;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 57)
    abort();
  v6 = (uint64_t)(a1 + 2);
  v7 = a1[2] - *a1;
  if (v7 >> 6 > v3)
    v3 = v7 >> 6;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFF80)
    v8 = 0x1FFFFFFFFFFFFFFLL;
  else
    v8 = v3;
  if (v8)
  {
    if (v8 >> 57)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v9 = (char *)operator new(v8 << 7);
  }
  else
  {
    v9 = 0;
  }
  v10 = (uint64_t)&v9[128 * v2];
  v11 = &v9[128 * v8];
  std::allocator<register_map_entry>::construct[abi:nn180100]<register_map_entry,register_map_entry const&>(v6, v10, a2);
  v12 = v10 + 128;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v12;
    a1[2] = (uint64_t)v11;
  }
  else
  {
    do
    {
      *(_OWORD *)(v10 - 128) = *((_OWORD *)v14 - 8);
      v15 = *((_OWORD *)v14 - 7);
      v16 = *((_OWORD *)v14 - 6);
      v17 = *((_OWORD *)v14 - 4);
      *(_OWORD *)(v10 - 80) = *((_OWORD *)v14 - 5);
      *(_OWORD *)(v10 - 64) = v17;
      *(_OWORD *)(v10 - 112) = v15;
      *(_OWORD *)(v10 - 96) = v16;
      *(_QWORD *)(v10 - 40) = 0;
      *(_QWORD *)(v10 - 32) = 0;
      *(_QWORD *)(v10 - 48) = 0;
      *(_OWORD *)(v10 - 48) = *((_OWORD *)v14 - 3);
      *(_QWORD *)(v10 - 32) = *((_QWORD *)v14 - 4);
      *((_QWORD *)v14 - 6) = 0;
      *((_QWORD *)v14 - 5) = 0;
      *((_QWORD *)v14 - 4) = 0;
      *(_QWORD *)(v10 - 24) = 0;
      *(_QWORD *)(v10 - 16) = 0;
      *(_QWORD *)(v10 - 8) = 0;
      *(_OWORD *)(v10 - 24) = *(_OWORD *)(v14 - 24);
      *(_QWORD *)(v10 - 8) = *((_QWORD *)v14 - 1);
      v10 -= 128;
      *((_QWORD *)v14 - 3) = 0;
      *((_QWORD *)v14 - 2) = 0;
      *((_QWORD *)v14 - 1) = 0;
      v14 -= 128;
    }
    while (v14 != v13);
    v14 = (char *)*a1;
    v18 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v12;
    a1[2] = (uint64_t)v11;
    while (v18 != v14)
    {
      v19 = (void *)*((_QWORD *)v18 - 3);
      if (v19)
      {
        *((_QWORD *)v18 - 2) = v19;
        operator delete(v19);
      }
      v20 = (void *)*((_QWORD *)v18 - 6);
      if (v20)
      {
        *((_QWORD *)v18 - 5) = v20;
        operator delete(v20);
      }
      v18 -= 128;
    }
  }
  if (v14)
    operator delete(v14);
  return v12;
}

void std::allocator<register_map_entry>::construct[abi:nn180100]<register_map_entry,register_map_entry const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _BYTE *v8;
  _BYTE *v9;
  int64_t v10;
  char *v11;
  char *v12;
  _BYTE *v13;
  _BYTE *v14;
  int64_t v15;
  char *v16;
  char *v17;

  *(_OWORD *)a2 = *(_OWORD *)a3;
  v5 = *(_OWORD *)(a3 + 16);
  v6 = *(_OWORD *)(a3 + 32);
  v7 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 64) = v7;
  *(_OWORD *)(a2 + 16) = v5;
  *(_OWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  v9 = *(_BYTE **)(a3 + 80);
  v8 = *(_BYTE **)(a3 + 88);
  v10 = v8 - v9;
  if (v8 != v9)
  {
    if (v10 < 0)
      goto LABEL_8;
    v11 = (char *)operator new(v8 - v9);
    *(_QWORD *)(a2 + 80) = v11;
    *(_QWORD *)(a2 + 88) = v11;
    v12 = &v11[4 * (v10 >> 2)];
    *(_QWORD *)(a2 + 96) = v12;
    memcpy(v11, v9, v10);
    *(_QWORD *)(a2 + 88) = v12;
  }
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  v14 = *(_BYTE **)(a3 + 104);
  v13 = *(_BYTE **)(a3 + 112);
  v15 = v13 - v14;
  if (v13 == v14)
    return;
  if (v15 < 0)
LABEL_8:
    abort();
  v16 = (char *)operator new(v13 - v14);
  *(_QWORD *)(a2 + 104) = v16;
  *(_QWORD *)(a2 + 112) = v16;
  v17 = &v16[4 * (v15 >> 2)];
  *(_QWORD *)(a2 + 120) = v17;
  memcpy(v16, v14, v15);
  *(_QWORD *)(a2 + 112) = v17;
}

uint64_t std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::find<std::string>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  size_t v5;
  const void *v6;
  uint64_t v7;
  int v8;
  size_t v9;
  const void *v10;
  size_t v11;
  int v12;
  _BOOL4 v13;
  BOOL v14;
  uint64_t *v15;
  int v16;
  size_t v17;
  const void *v18;
  size_t v19;
  int v20;
  _BOOL4 v21;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v4 = *(char *)(a2 + 23);
  v5 = v4 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(_QWORD *)(a2 + 8);
  v6 = v4 >= 0 ? (const void *)a2 : *(const void **)a2;
  v7 = a1 + 8;
  do
  {
    v8 = *(char *)(v3 + 55);
    if (v8 >= 0)
      v9 = *(unsigned __int8 *)(v3 + 55);
    else
      v9 = *(_QWORD *)(v3 + 40);
    if (v8 >= 0)
      v10 = (const void *)(v3 + 32);
    else
      v10 = *(const void **)(v3 + 32);
    if (v5 >= v9)
      v11 = v9;
    else
      v11 = v5;
    v12 = memcmp(v10, v6, v11);
    v13 = v9 < v5;
    if (v12)
      v13 = v12 < 0;
    v14 = !v13;
    if (v13)
      v15 = (uint64_t *)(v3 + 8);
    else
      v15 = (uint64_t *)v3;
    if (v14)
      v7 = v3;
    v3 = *v15;
  }
  while (*v15);
  if (v7 == v2)
    return v2;
  v16 = *(char *)(v7 + 55);
  v17 = v16 >= 0 ? *(unsigned __int8 *)(v7 + 55) : *(_QWORD *)(v7 + 40);
  v18 = v16 >= 0 ? (const void *)(v7 + 32) : *(const void **)(v7 + 32);
  v19 = v17 >= v5 ? v5 : v17;
  v20 = memcmp(v6, v18, v19);
  v21 = v5 < v17;
  if (v20)
    v21 = v20 < 0;
  if (v21)
    return v2;
  return v7;
}

void std::stringbuf::__init_buf_ptrs[abi:nn180100](uint64_t a1)
{
  std::string *v2;
  char v3;
  std::string *v4;
  unint64_t v5;
  int v6;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(a1 + 88) = 0;
  v2 = (std::string *)(a1 + 64);
  v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    v4 = *(std::string **)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 72);
    v6 = *(_DWORD *)(a1 + 96);
    if ((v6 & 8) == 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v4 = v2;
  v5 = *(unsigned __int8 *)(a1 + 87);
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
LABEL_3:
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = (char *)v4 + v5;
  }
LABEL_4:
  if ((v6 & 0x10) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    v7 = v3 < 0 ? (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    v8 = *(char *)(a1 + 87) < 0 ? *(_QWORD *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = (char *)v4 + v8;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        v5 = v5 - v10 - 0x7FFFFFFF;
        *(_QWORD *)(a1 + 48) = v4;
      }
      if (v5)
        *(_QWORD *)(a1 + 48) = (char *)v4 + v5;
    }
  }
}

void std::__shared_ptr_emplace<JSONGenerator::Array>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100060F10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<JSONGenerator::Array>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100060F10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t std::__shared_ptr_emplace<JSONGenerator::Array>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_pointer<JSONGenerator::Dictionary *,std::shared_ptr<JSONGenerator::Dictionary>::__shared_ptr_default_delete<JSONGenerator::Dictionary,JSONGenerator::Dictionary>,std::allocator<JSONGenerator::Dictionary>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t std::__shared_ptr_pointer<JSONGenerator::Dictionary *,std::shared_ptr<JSONGenerator::Dictionary>::__shared_ptr_default_delete<JSONGenerator::Dictionary,JSONGenerator::Dictionary>,std::allocator<JSONGenerator::Dictionary>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_pointer<JSONGenerator::Array *,std::shared_ptr<JSONGenerator::Array>::__shared_ptr_default_delete<JSONGenerator::Array,JSONGenerator::Array>,std::allocator<JSONGenerator::Array>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t std::__shared_ptr_pointer<JSONGenerator::Array *,std::shared_ptr<JSONGenerator::Array>::__shared_ptr_default_delete<JSONGenerator::Array,JSONGenerator::Array>,std::allocator<JSONGenerator::Array>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_pointer<JSONGenerator::Integer *,std::shared_ptr<JSONGenerator::Integer>::__shared_ptr_default_delete<JSONGenerator::Integer,JSONGenerator::Integer>,std::allocator<JSONGenerator::Integer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t std::__shared_ptr_pointer<JSONGenerator::Integer *,std::shared_ptr<JSONGenerator::Integer>::__shared_ptr_default_delete<JSONGenerator::Integer,JSONGenerator::Integer>,std::allocator<JSONGenerator::Integer>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t prime;
  unint64_t v18;
  uint8x8_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      prime = v16;
    else
      prime = v15;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_41;
    if (prime < v7)
    {
      v18 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v19 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v19.i16[0] = vaddlv_u8(v19), v19.u32[0] > 1uLL))
      {
        v18 = std::__next_prime(v18);
      }
      else
      {
        v20 = 1 << -(char)__clz(v18 - 1);
        if (v18 >= 2)
          v18 = v20;
      }
      if (prime <= v18)
        prime = v18;
      if (prime < v7)
LABEL_41:
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *v10 = *v22;
LABEL_55:
    *v22 = v10;
    goto LABEL_56;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v21 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v23 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v23 >= v7)
        v23 %= v7;
    }
    else
    {
      v23 &= v7 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_55;
  }
LABEL_56:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v13 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v13 >= a2)
              v13 %= a2;
          }
          else
          {
            v13 &= a2 - 1;
          }
          if (v13 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
              goto LABEL_19;
            }
            *v7 = *v11;
            v12 = 8 * v13;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + v12);
            **(_QWORD **)(*(_QWORD *)a1 + v12) = v11;
            v11 = v7;
          }
          v13 = v8;
LABEL_19:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v13;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

uint64_t _GLOBAL__sub_I_RNBRemote_cpp()
{
  byte_1000717BF = 6;
  strcpy((char *)&OS_LOG_EVENTS_KEY_NAME, "events");
  __cxa_atexit((void (*)(void *))&std::string::~string, &OS_LOG_EVENTS_KEY_NAME, (void *)&_mh_execute_header);
  byte_1000717D7 = 4;
  strcpy((char *)&JSON_ASYNC_TYPE_KEY_NAME, "type");
  __cxa_atexit((void (*)(void *))&std::string::~string, &JSON_ASYNC_TYPE_KEY_NAME, (void *)&_mh_execute_header);
  qword_100071828 = 0;
  unk_100071830 = 0;
  g_dynamic_register_map = 0;
  __cxa_atexit((void (*)(void *))std::vector<register_map_entry>::~vector[abi:nn180100], &g_dynamic_register_map, (void *)&_mh_execute_header);
  unk_100471868 = 0;
  g_target_xml = 0uLL;
  return __cxa_atexit((void (*)(void *))&std::string::~string, &g_target_xml, (void *)&_mh_execute_header);
}

uint64_t GetProcesses(__CFArray *a1, char a2)
{
  uint64_t v3;
  unint64_t v4;
  pid_t v5;
  uid_t v6;
  unint64_t v7;
  unsigned int v8;
  char *v9;
  int v10;
  BOOL v11;
  BOOL v12;
  __CFDictionary *Mutable;
  CFNumberRef v14;
  char *v15;
  char *v16;
  char v19[8];
  void *v20;
  int valuePtr;
  void *__p;
  void *v23;
  uint64_t v24;
  char buffer[1024];

  if (!a1)
    return 0xFFFFFFFFLL;
  __p = 0;
  v23 = 0;
  v24 = 0;
  v3 = DNBGetAllInfos((char **)&__p);
  if (v3)
  {
    v4 = v3;
    v5 = getpid();
    v6 = getuid();
    v7 = 0;
    v8 = 1;
    while (1)
    {
      v9 = (char *)__p + 648 * v7;
      v10 = *((_DWORD *)v9 + 10);
      if ((a2 & 1) != 0 || *((_DWORD *)v9 + 98) == v6)
      {
        v11 = v10 == v5 || v10 == 0;
        v12 = v11 || v9[36] == 5;
        if (!v12 && (v9[33] & 0x28) == 0)
          break;
      }
LABEL_4:
      v7 = v8++;
      if (v4 <= v7)
        goto LABEL_29;
    }
    Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    valuePtr = v10;
    v14 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
    CFDictionarySetValue(Mutable, CFSTR("pid"), v14);
    CFDictionarySetValue(Mutable, CFSTR("isFrontApp"), kCFBooleanFalse);
    if (proc_pidpath(v10, buffer, 0x400u) < 1)
    {
      v16 = v9 + 243;
      if (!v9[243])
        goto LABEL_23;
    }
    else
    {
      v15 = strrchr(buffer, 47);
      if (v15)
        v16 = v15 + 1;
      else
        v16 = buffer;
      CFString::CFString((CFString *)v19, buffer, 0x8000100u);
      if (v20)
        CFDictionarySetValue(Mutable, CFSTR("executablePath"), v20);
      CFString::~CFString((CFString *)v19);
      if (!*v16)
        goto LABEL_23;
    }
    CFString::CFString((CFString *)v19, v16, 0x8000100u);
    CFDictionarySetValue(Mutable, CFSTR("displayName"), v20);
    CFString::~CFString((CFString *)v19);
LABEL_23:
    CFArrayAppendValue(a1, Mutable);
    if (v14)
      CFRelease(v14);
    if (Mutable)
      CFRelease(Mutable);
    goto LABEL_4;
  }
LABEL_29:
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  return 0;
}

uint64_t ListApplications(std::string *a1, uint64_t a2, uint64_t a3)
{
  __CFArray *Mutable;
  const __CFString *v7;
  const __CFArray *v8;
  const __CFArray *v9;
  CFIndex Count;
  CFIndex v11;
  CFIndex v12;
  const __CFString *ValueAtIndex;
  __CFDictionary *v14;
  CFNumberRef v15;
  CFComparisonResult v16;
  CFBooleanRef v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const __CFData *XMLData;
  const __CFData *v23;
  int64_t Length;
  const UInt8 *BytePtr;
  BOOL v26;
  uint64_t v27;
  std::string *v29;
  int valuePtr;

  Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (getuid())
  {
    v7 = (const __CFString *)SBSCopyFrontmostApplicationDisplayIdentifier();
    v8 = (const __CFArray *)SBSCopyApplicationDisplayIdentifiers(a2, a3);
    if (v8)
    {
      v9 = v8;
      v29 = a1;
      Count = CFArrayGetCount(v8);
      if (Count >= 1)
      {
        v11 = Count;
        v12 = 0;
        while (1)
        {
          ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v9, v12);
          v14 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          valuePtr = 0;
          if (SBSProcessIDForDisplayIdentifier(ValueAtIndex, &valuePtr) == 1)
          {
            v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
            CFDictionarySetValue(v14, CFSTR("pid"), v15);
            if (v15)
              CFRelease(v15);
          }
          if (!v7 || !ValueAtIndex || (v16 = CFStringCompare(v7, ValueAtIndex, 0), v17 = kCFBooleanTrue, v16))
            v17 = kCFBooleanFalse;
          CFDictionarySetValue(v14, CFSTR("isFrontApp"), v17);
          v18 = (const void *)SBSCopyExecutablePathForDisplayIdentifier(ValueAtIndex);
          if (v18)
            CFDictionarySetValue(v14, CFSTR("executablePath"), v18);
          v19 = (const void *)SBSCopyIconImagePathForDisplayIdentifier(ValueAtIndex);
          if (v19)
            CFDictionarySetValue(v14, CFSTR("iconPath"), v19);
          v20 = (const void *)SBSCopyLocalizedApplicationNameForDisplayIdentifier(ValueAtIndex);
          if (!v20)
            break;
          v21 = v20;
          CFDictionarySetValue(v14, CFSTR("displayName"), v20);
          CFArrayAppendValue(Mutable, v14);
          CFRelease(v21);
          if (v19)
            goto LABEL_19;
LABEL_20:
          if (v18)
            CFRelease(v18);
          if (v14)
            CFRelease(v14);
          if (v11 == ++v12)
            goto LABEL_27;
        }
        CFArrayAppendValue(Mutable, v14);
        if (!v19)
          goto LABEL_20;
LABEL_19:
        CFRelease(v19);
        goto LABEL_20;
      }
LABEL_27:
      CFRelease(v9);
      a1 = v29;
    }
    if (v7)
      CFRelease(v7);
  }
  else
  {
    GetProcesses(Mutable, 1);
  }
  XMLData = CFPropertyListCreateXMLData(kCFAllocatorDefault, Mutable);
  if (XMLData)
  {
    v23 = XMLData;
    Length = CFDataGetLength(XMLData);
    BytePtr = CFDataGetBytePtr(v23);
    if (BytePtr)
      v26 = Length <= 0;
    else
      v26 = 1;
    if (v26)
    {
      if (DNBLogEnabled())
        _DNBLogError("empty application property list.");
      v27 = 4294967294;
    }
    else
    {
      std::string::assign(a1, (const std::string::value_type *)BytePtr, Length);
      v27 = 0;
    }
    CFRelease(v23);
    if (Mutable)
LABEL_44:
      CFRelease(Mutable);
  }
  else
  {
    if (DNBLogEnabled())
      _DNBLogError("serializing task list.");
    v27 = 4294967293;
    if (Mutable)
      goto LABEL_44;
  }
  return v27;
}

uint64_t RNBSocket::Listen(RNBSocket *this, char *a2, unsigned __int16 Port, void (*a4)(const void *, unsigned __int16), const void *a5)
{
  int *v9;
  int v10;
  int v11;
  char *v12;
  __int128 *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int Family;
  int v22;
  int v23;
  int v24;
  socklen_t Length;
  uint64_t **v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  size_t v33;
  uint64_t *v34;
  uint64_t v35;
  int16_t *p_filter;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  BOOL v44;
  unsigned int v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  _QWORD *v49;
  int v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  int v54;
  unsigned __int8 *v55;
  lldb_private::SocketAddress *v56;
  int v57;
  unint64_t v58;
  int *v59;
  FILE *v60;
  int v61;
  void **v62;
  void **v63;
  void **v64;
  int v65;
  void **v66;
  void **v67;
  void **v68;
  uint64_t *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  int ident;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  int v78;
  char *v79;
  char *v80;
  void *v81;
  const void *v83;
  void *__p[2];
  char v85;
  void *v86[2];
  char v87;
  socklen_t MaxLength;
  socklen_t v89[2];
  const kevent *v90;
  uint64_t v91;
  void *v92;
  __int128 *v93;
  uint64_t *v94;
  _QWORD *v95;
  size_t v96;
  void *v97[2];
  __int128 v98;
  kevent v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  sockaddr v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;

  v9 = (int *)this;
  RNBSocket::Disconnect(this);
  *(_OWORD *)v97 = 0u;
  v98 = 0u;
  v10 = kqueue();
  if ((v10 & 0x80000000) == 0)
  {
    v83 = a5;
    v11 = strcmp(a2, "*");
    if (v11)
      v12 = a2;
    else
      v12 = "localhost";
    v95 = 0;
    v96 = 0;
    v94 = (uint64_t *)&v95;
    lldb_private::SocketAddress::GetAddressInfo((lldb_private::SocketAddress *)v12, 0, 0, 1, 6, 0, (char **)&v92);
    v14 = (__int128 *)v92;
    v13 = v93;
    if (v92 != v93)
    {
      do
      {
        v15 = *v14;
        v16 = v14[1];
        v17 = v14[3];
        v100 = v14[2];
        v101 = v17;
        *(_OWORD *)&v99.ident = v15;
        *(_OWORD *)&v99.data = v16;
        v18 = v14[4];
        v19 = v14[5];
        v20 = v14[7];
        v104 = v14[6];
        v105 = v20;
        v102 = v18;
        v103 = v19;
        LODWORD(v86[0]) = 0;
        Family = lldb_private::SocketAddress::GetFamily((lldb_private::SocketAddress *)&v99);
        v22 = socket(Family, 1, 6);
        LODWORD(v86[0]) = v22;
        if (v22 == -1)
          goto LABEL_8;
        *(_DWORD *)&v107.sa_len = 1;
        setsockopt(v22, 0xFFFF, 4, &v107, 4u);
        v111 = v102;
        v112 = v103;
        v113 = v104;
        v114 = v105;
        v107 = *(sockaddr *)&v99.ident;
        v108 = *(_OWORD *)&v99.data;
        v109 = v100;
        v110 = v101;
        if (v11 && lldb_private::SocketAddress::IsLocalhost((lldb_private::SocketAddress *)&v107))
        {
          lldb_private::SocketAddress::SetPort((lldb_private::SocketAddress *)&v107, Port);
        }
        else
        {
          v23 = lldb_private::SocketAddress::GetFamily((lldb_private::SocketAddress *)&v107);
          lldb_private::SocketAddress::SetToAnyAddress((lldb_private::SocketAddress *)&v107, v23, Port);
        }
        v24 = (int)v86[0];
        Length = lldb_private::SocketAddress::GetLength((lldb_private::SocketAddress *)&v107);
        if (bind(v24, &v107, Length) == -1)
        {
          if (SLODWORD(v86[0]) >= 1)
            goto LABEL_20;
        }
        else
        {
          if (listen((int)v86[0], 5) != -1)
          {
            if (!Port)
            {
              v89[0] = 0;
              v89[0] = lldb_private::SocketAddress::GetLength((lldb_private::SocketAddress *)&v99);
              if (getsockname((int)v86[0], (sockaddr *)&v99, v89))
                Port = 0;
              else
                Port = lldb_private::SocketAddress::GetPort((lldb_private::SocketAddress *)&v99);
            }
            *(_QWORD *)v89 = v86;
            v26 = std::__tree<std::__value_type<int,lldb_private::SocketAddress>,std::__map_value_compare<int,std::__value_type<int,lldb_private::SocketAddress>,std::less<int>,true>,std::allocator<std::__value_type<int,lldb_private::SocketAddress>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v94, (int *)v86, (uint64_t)&std::piecewise_construct, (_DWORD **)v89);
            v28 = v100;
            v27 = v101;
            v29 = *(_OWORD *)&v99.data;
            *(_OWORD *)(v26 + 5) = *(_OWORD *)&v99.ident;
            v31 = v104;
            v30 = v105;
            v32 = v103;
            *(_OWORD *)(v26 + 13) = v102;
            *(_OWORD *)(v26 + 15) = v32;
            *(_OWORD *)(v26 + 17) = v31;
            *(_OWORD *)(v26 + 19) = v30;
            *(_OWORD *)(v26 + 7) = v29;
            *(_OWORD *)(v26 + 9) = v28;
            *(_OWORD *)(v26 + 11) = v27;
            goto LABEL_7;
          }
          if (SLODWORD(v86[0]) >= 1)
          {
LABEL_20:
            *__error() = 0;
            close((int)v86[0]);
            LODWORD(v86[0]) = -1;
          }
        }
LABEL_7:
        lldb_private::SocketAddress::~SocketAddress((lldb_private::SocketAddress *)&v107);
LABEL_8:
        lldb_private::SocketAddress::~SocketAddress((lldb_private::SocketAddress *)&v99);
        v14 += 8;
      }
      while (v14 != v13);
    }
    v33 = v96;
    if (!v96)
    {
      LODWORD(v97[0]) = *__error();
      HIDWORD(v97[0]) = 2;
      if (SHIBYTE(v98) < 0)
      {
        *(_BYTE *)v97[1] = 0;
        *(_QWORD *)&v98 = 0;
      }
      else
      {
        LOBYTE(v97[1]) = 0;
        HIBYTE(v98) = 0;
      }
      DNBError::LogThreaded((DNBError *)v97, "::listen or ::bind failed");
      v77 = 1;
      v79 = (char *)v92;
      if (!v92)
        goto LABEL_124;
      goto LABEL_120;
    }
    if (a4)
    {
      a4(v83, Port);
      v33 = v96;
      *(_QWORD *)v89 = 0;
      v90 = 0;
      v91 = 0;
      if (!v96)
      {
LABEL_35:
        v34 = v94;
        if (v94 != (uint64_t *)&v95)
        {
          v35 = 0;
          p_filter = &v99.filter;
          do
          {
            v37 = *((_OWORD *)v34 + 8);
            v103 = *((_OWORD *)v34 + 7);
            v104 = v37;
            v105 = *((_OWORD *)v34 + 9);
            v106 = v34[20];
            v38 = *((_OWORD *)v34 + 3);
            v39 = *((_OWORD *)v34 + 5);
            v40 = *((_OWORD *)v34 + 6);
            v100 = *((_OWORD *)v34 + 4);
            v101 = v39;
            v102 = v40;
            *(_OWORD *)&v99.ident = *((_OWORD *)v34 + 2);
            *(_OWORD *)&v99.data = v38;
            v41 = *(_QWORD *)v89 + 32 * v35;
            *(_QWORD *)v41 = SLODWORD(v99.ident);
            *(_DWORD *)(v41 + 8) = 0x1FFFF;
            *(_QWORD *)(v41 + 20) = 0;
            *(_QWORD *)(v41 + 12) = 0;
            *(_DWORD *)(v41 + 28) = 0;
            lldb_private::SocketAddress::~SocketAddress((lldb_private::SocketAddress *)p_filter);
            v42 = (uint64_t *)v34[1];
            if (v42)
            {
              do
              {
                v43 = v42;
                v42 = (uint64_t *)*v42;
              }
              while (v42);
            }
            else
            {
              do
              {
                v43 = (uint64_t *)v34[2];
                v44 = *v43 == (_QWORD)v34;
                v34 = v43;
              }
              while (!v44);
            }
            ++v35;
            v34 = v43;
          }
          while (v43 != (uint64_t *)&v95);
        }
        while (1)
        {
          *__error() = 0;
          v45 = kevent(v10, *(const kevent **)v89, ((unint64_t)v90 - *(_QWORD *)v89) >> 5, &v99, 4, 0);
          if (v45 == -1)
          {
            if (*__error() != 35 && *__error() != 35 && *__error() != 4)
              goto LABEL_91;
          }
          else
          {
            if ((v45 & 0x80000000) == 0)
            {
              if (!v45)
                goto LABEL_95;
              v46 = 0;
              v47 = 0;
              v48 = v45;
              while (2)
              {
                v49 = v95;
                if (v95)
                {
                  v50 = *((_DWORD *)&v99.ident + 8 * v46);
                  v51 = (unsigned __int8 *)&v95;
                  do
                  {
                    v52 = (unsigned __int8 *)v49;
                    v53 = v51;
                    v54 = *((_DWORD *)v49 + 8);
                    v55 = (unsigned __int8 *)(v49 + 1);
                    if (v54 >= v50)
                    {
                      v55 = v52;
                      v51 = v52;
                    }
                    v49 = *(_QWORD **)v55;
                  }
                  while (v49);
                  if (v51 != (unsigned __int8 *)&v95)
                  {
                    if (v54 < v50)
                      v52 = v53;
                    if (*((_DWORD *)v52 + 8) <= v50)
                    {
                      lldb_private::SocketAddress::SocketAddress((lldb_private::SocketAddress *)&v107);
                      MaxLength = 0;
                      MaxLength = lldb_private::SocketAddress::GetMaxLength(v56);
                      v57 = accept(v50, &v107, &MaxLength);
                      *v9 = v57;
                      if (v57 == -1)
                      {
                        LODWORD(v97[0]) = *__error();
                        HIDWORD(v97[0]) = 2;
                        if (SHIBYTE(v98) < 0)
                        {
                          *(_BYTE *)v97[1] = 0;
                          *(_QWORD *)&v98 = 0;
                        }
                        else
                        {
                          LOBYTE(v97[1]) = 0;
                          HIBYTE(v98) = 0;
                        }
                        DNBError::LogThreaded((DNBError *)v97, "error: Socket accept failed.");
                      }
                      v58 = (unint64_t)(v51 + 40);
                      if (lldb_private::SocketAddress::IsAnyAddr((lldb_private::SocketAddress *)(v51 + 40))
                        || lldb_private::SocketAddress::operator==(&v107.sa_len, v51 + 40))
                      {
                        v47 = 1;
                      }
                      else
                      {
                        close(*v9);
                        v59 = v9;
                        *v9 = -1;
                        v60 = __stderrp;
                        lldb_private::SocketAddress::GetIPAddress((unint64_t)&v107, v86);
                        v61 = v87;
                        v62 = (void **)v86[0];
                        lldb_private::SocketAddress::GetIPAddress(v58, __p);
                        v63 = v86;
                        if (v61 < 0)
                          v63 = v62;
                        v64 = __p;
                        if (v85 < 0)
                          v64 = (void **)__p[0];
                        fprintf(v60, "error: rejecting incoming connection from %s (expecting %s)\n", (const char *)v63, (const char *)v64);
                        if (v85 < 0)
                          operator delete(__p[0]);
                        v9 = v59;
                        if (v87 < 0)
                          operator delete(v86[0]);
                        if (DNBLogEnabled())
                        {
                          lldb_private::SocketAddress::GetIPAddress((unint64_t)&v107, v86);
                          v65 = v87;
                          v66 = (void **)v86[0];
                          lldb_private::SocketAddress::GetIPAddress(v58, __p);
                          v67 = v86;
                          if (v65 < 0)
                            v67 = v66;
                          v68 = __p;
                          if (v85 < 0)
                            v68 = (void **)__p[0];
                          _DNBLogThreaded("error: rejecting connection from %s (expecting %s)\n", (const char *)v67, (const char *)v68);
                          v9 = v59;
                          if (v85 < 0)
                          {
                            operator delete(__p[0]);
                            if ((v87 & 0x80000000) == 0)
                              goto LABEL_86;
                          }
                          else if ((v87 & 0x80000000) == 0)
                          {
                            goto LABEL_86;
                          }
                          operator delete(v86[0]);
                        }
LABEL_86:
                        v97[0] = 0;
                        if (SHIBYTE(v98) < 0)
                        {
                          *(_BYTE *)v97[1] = 0;
                          *(_QWORD *)&v98 = 0;
                        }
                        else
                        {
                          LOBYTE(v97[1]) = 0;
                          HIBYTE(v98) = 0;
                        }
                      }
                      lldb_private::SocketAddress::~SocketAddress((lldb_private::SocketAddress *)&v107);
                    }
                  }
                }
                if (++v46 == v48)
                  goto LABEL_96;
                continue;
              }
            }
LABEL_91:
            LODWORD(v97[0]) = *__error();
            HIDWORD(v97[0]) = 1;
            if (SHIBYTE(v98) < 0)
            {
              *(_BYTE *)v97[1] = 0;
              *(_QWORD *)&v98 = 0;
            }
            else
            {
              LOBYTE(v97[1]) = 0;
              HIBYTE(v98) = 0;
            }
            DNBError::LogThreaded((DNBError *)v97, "error: kevent() failed.");
LABEL_95:
            v47 = 0;
LABEL_96:
            if (LODWORD(v97[0]) || (v47 & 1) != 0)
            {
              v69 = v94;
              if (v94 != (uint64_t *)&v95)
              {
                do
                {
                  v70 = *((_OWORD *)v69 + 8);
                  v103 = *((_OWORD *)v69 + 7);
                  v104 = v70;
                  v105 = *((_OWORD *)v69 + 9);
                  v106 = v69[20];
                  v71 = *((_OWORD *)v69 + 3);
                  v72 = *((_OWORD *)v69 + 5);
                  v73 = *((_OWORD *)v69 + 6);
                  v100 = *((_OWORD *)v69 + 4);
                  v101 = v72;
                  v102 = v73;
                  *(_OWORD *)&v99.ident = *((_OWORD *)v69 + 2);
                  *(_OWORD *)&v99.data = v71;
                  ident = v99.ident;
                  if (SLODWORD(v99.ident) >= 1)
                  {
                    *__error() = 0;
                    close(ident);
                  }
                  lldb_private::SocketAddress::~SocketAddress((lldb_private::SocketAddress *)&v99.filter);
                  v75 = (uint64_t *)v69[1];
                  if (v75)
                  {
                    do
                    {
                      v76 = v75;
                      v75 = (uint64_t *)*v75;
                    }
                    while (v75);
                  }
                  else
                  {
                    do
                    {
                      v76 = (uint64_t *)v69[2];
                      v44 = *v76 == (_QWORD)v69;
                      v69 = v76;
                    }
                    while (!v44);
                  }
                  v69 = v76;
                }
                while (v76 != (uint64_t *)&v95);
              }
              v77 = 1;
              if (!LODWORD(v97[0]))
              {
                v78 = *v9;
                LODWORD(v99.ident) = 1;
                setsockopt(v78, 6, 1, &v99, 4u);
                v77 = 0;
              }
              if (*(_QWORD *)v89)
              {
                v90 = *(const kevent **)v89;
                operator delete(*(void **)v89);
              }
              v79 = (char *)v92;
              if (!v92)
              {
LABEL_124:
                std::__tree<std::__value_type<int,lldb_private::SocketAddress>,std::__map_value_compare<int,std::__value_type<int,lldb_private::SocketAddress>,std::less<int>,true>,std::allocator<std::__value_type<int,lldb_private::SocketAddress>>>::destroy((uint64_t)&v94, v95);
                if (SHIBYTE(v98) < 0)
                  goto LABEL_125;
                return v77;
              }
LABEL_120:
              v80 = (char *)v93;
              v81 = v79;
              if (v93 != (__int128 *)v79)
              {
                do
                  lldb_private::SocketAddress::~SocketAddress((lldb_private::SocketAddress *)(v80 - 128));
                while (v80 != v79);
                v81 = v92;
              }
              v93 = (__int128 *)v79;
              operator delete(v81);
              goto LABEL_124;
            }
          }
        }
      }
    }
    else
    {
      *(_QWORD *)v89 = 0;
      v90 = 0;
      v91 = 0;
    }
    std::vector<kevent>::__append((char **)v89, v33);
    goto LABEL_35;
  }
  LODWORD(v97[0]) = *__error();
  HIDWORD(v97[0]) = 1;
  if (SHIBYTE(v98) < 0)
  {
    *(_BYTE *)v97[1] = 0;
    *(_QWORD *)&v98 = 0;
  }
  else
  {
    LOBYTE(v97[1]) = 0;
    HIBYTE(v98) = 0;
  }
  DNBError::LogThreaded((DNBError *)v97, "error: failed to create kqueue.");
  v77 = 1;
  if (SHIBYTE(v98) < 0)
LABEL_125:
    operator delete(v97[1]);
  return v77;
}

void sub_10003344C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,char a32,_QWORD *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  if (__p)
    operator delete(__p);
  std::vector<lldb_private::SocketAddress>::~vector[abi:ne180100](&a29);
  std::__tree<std::__value_type<int,lldb_private::SocketAddress>,std::__map_value_compare<int,std::__value_type<int,lldb_private::SocketAddress>,std::less<int>,true>,std::allocator<std::__value_type<int,lldb_private::SocketAddress>>>::destroy((uint64_t)&a32, a33);
  if (a41 < 0)
    operator delete(a36);
  _Unwind_Resume(a1);
}

BOOL RNBSocket::Disconnect(RNBSocket *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  _BOOL8 result;
  int v10;
  uint64_t v11;

  if (*((_BYTE *)this + 4))
  {
    if (*((_BYTE *)this + 5))
    {
      close(*(_DWORD *)this);
      sleep(0x1Eu);
      *(_DWORD *)this = -1;
      *((_WORD *)this + 2) = 0;
      v8 = DNBLogEnabled();
      result = 0;
      if (!v8)
        return result;
      _DNBLog(0, (uint64_t)"Shutting down secure socket proxy, SSP finish-callback didn't kill debugserver.", v2, v3, v4, v5, v6, v7, v11);
    }
    else
    {
      *((_BYTE *)this + 4) = 0;
      *(_DWORD *)this = -1;
      lockdown_disconnect(*((_QWORD *)this + 1));
    }
  }
  else if (*(int *)this >= 1)
  {
    *__error() = 0;
    v10 = close(*(_DWORD *)this);
    *(_DWORD *)this = -1;
    return v10 != 0;
  }
  return 0;
}

void **std::vector<lldb_private::SocketAddress>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = v2;
    if (v3 != v2)
    {
      do
        lldb_private::SocketAddress::~SocketAddress((lldb_private::SocketAddress *)(v3 - 128));
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t RNBSocket::Connect(RNBSocket *this, lldb_private::SocketAddress *a2, unsigned int a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  sockaddr v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int Family;
  int v16;
  int v17;
  socklen_t Length;
  int v19;
  char *v20;
  char *v21;
  char *v23;
  char *v24;
  int v25;
  sockaddr v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  RNBSocket::Disconnect(this);
  lldb_private::SocketAddress::GetAddressInfo(a2, 0, 0, 1, 6, 0, &v23);
  v6 = v23;
  v7 = v24;
  v8 = 1;
  if (v23 == v24)
  {
    if (v23)
      goto LABEL_11;
    return v8;
  }
  while (1)
  {
    v9 = *(sockaddr *)v6;
    v10 = *((_OWORD *)v6 + 1);
    v11 = *((_OWORD *)v6 + 3);
    v28 = *((_OWORD *)v6 + 2);
    v29 = v11;
    v26 = v9;
    v27 = v10;
    v12 = *((_OWORD *)v6 + 4);
    v13 = *((_OWORD *)v6 + 5);
    v14 = *((_OWORD *)v6 + 7);
    v32 = *((_OWORD *)v6 + 6);
    v33 = v14;
    v30 = v12;
    v31 = v13;
    Family = lldb_private::SocketAddress::GetFamily((lldb_private::SocketAddress *)&v26);
    v16 = socket(Family, 1, 6);
    *(_DWORD *)this = v16;
    if (v16 != -1)
      break;
LABEL_4:
    lldb_private::SocketAddress::~SocketAddress((lldb_private::SocketAddress *)&v26);
    v6 += 128;
    if (v6 == v7)
    {
      v8 = 1;
      goto LABEL_10;
    }
  }
  v25 = 1;
  setsockopt(v16, 0xFFFF, 4, &v25, 4u);
  lldb_private::SocketAddress::SetPort((lldb_private::SocketAddress *)&v26, a3);
  v17 = *(_DWORD *)this;
  Length = lldb_private::SocketAddress::GetLength((lldb_private::SocketAddress *)&v26);
  if (connect(v17, &v26, Length) == -1)
  {
    RNBSocket::Disconnect(this);
    goto LABEL_4;
  }
  v19 = *(_DWORD *)this;
  v25 = 1;
  setsockopt(v19, 6, 1, &v25, 4u);
  lldb_private::SocketAddress::~SocketAddress((lldb_private::SocketAddress *)&v26);
  v8 = 0;
LABEL_10:
  v6 = v23;
  if (v23)
  {
LABEL_11:
    v20 = v24;
    v21 = v6;
    if (v24 != v6)
    {
      do
        lldb_private::SocketAddress::~SocketAddress((lldb_private::SocketAddress *)(v20 - 128));
      while (v20 != v6);
      v21 = v23;
    }
    v24 = v6;
    operator delete(v21);
  }
  return v8;
}

void sub_100033808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  lldb_private::SocketAddress::~SocketAddress((lldb_private::SocketAddress *)&a13);
  std::vector<lldb_private::SocketAddress>::~vector[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t RNBSocket::useFD(RNBSocket *this, int a2)
{
  uint64_t result;

  if (a2 < 0)
  {
    if (DNBLogEnabledForAny(0x80000))
      _DNBLogThreaded("Bad file descriptor passed in.");
    return 1;
  }
  else
  {
    result = 0;
    *(_DWORD *)this = a2;
  }
  return result;
}

uint64_t RNBSocket::ConnectToService(RNBSocket *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t socket;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _QWORD v21[5];
  _QWORD v22[6];
  _QWORD v23[6];

  if (DNBLogEnabled())
    _DNBLog(0, (uint64_t)"Connecting to com.apple.%s service...", v4, v5, v6, v7, v8, v9, (uint64_t)"debugserver");
  RNBSocket::Disconnect(this);
  if (secure_lockdown_checkin((char *)this + 8, 0, 0))
  {
    if (DNBLogEnabledForAny(0x80000))
      _DNBLogThreaded("::secure_lockdown_checkin(&m_fd, NULL, NULL) failed");
    *(_DWORD *)this = -1;
    return 2;
  }
  v11 = *((_QWORD *)this + 1);
  if (a2)
  {
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = ___ZN9RNBSocket16ConnectToServiceEb_block_invoke;
    v21[3] = &__block_descriptor_40_e5_v8__0l;
    v21[4] = this;
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    v23[2] = ___ZL58DVTSecureSocketProxy_CreateWithLockdownConnectionFunctionsP20_lockdown_connectionPFiS0_EPFlS0_PvmEPFlS0_PKvmEU13block_pointerFvvE_block_invoke;
    v23[3] = &__block_descriptor_48_e12_q24__0_v8Q16l;
    v23[4] = &lockdown_recv;
    v23[5] = v11;
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = ___ZL58DVTSecureSocketProxy_CreateWithLockdownConnectionFunctionsP20_lockdown_connectionPFiS0_EPFlS0_PvmEPFlS0_PKvmEU13block_pointerFvvE_block_invoke_2;
    v22[3] = &__block_descriptor_48_e13_q24__0r_v8Q16l;
    v22[4] = &lockdown_send;
    v22[5] = v11;
    socket = lockdown_get_socket(v11);
    *(_DWORD *)this = DVTSecureSocketProxy_Create(socket, v23, v22, v21);
    *((_BYTE *)this + 5) = 1;
    if (DNBLogEnabled())
      _DNBLog(0, (uint64_t)"Using secure socket proxy.", v13, v14, v15, v16, v17, v18, v20);
    if (*(_DWORD *)this != -1)
      goto LABEL_12;
LABEL_14:
    if (DNBLogEnabledForAny(0x80000))
      _DNBLogThreaded("::lockdown_get_socket() failed");
    return 2;
  }
  v19 = lockdown_get_socket(v11);
  *(_DWORD *)this = v19;
  *((_BYTE *)this + 5) = 0;
  if (v19 == -1)
    goto LABEL_14;
LABEL_12:
  result = 0;
  *((_BYTE *)this + 4) = 1;
  return result;
}

void ___ZN9RNBSocket16ConnectToServiceEb_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t vars0;

  lockdown_disconnect(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
  if (DNBLogEnabled())
  {
    _DNBLog(0, (uint64_t)"debugserver secure socket proxy finish-block shut down.", v1, v2, v3, v4, v5, v6, vars0);
    if (!DNBLogEnabled())
LABEL_3:
      _exit(0);
  }
  else if (!DNBLogEnabled())
  {
    goto LABEL_3;
  }
  _DNBLog(0, (uint64_t)"debugserver expedited exit.", v7, v8, v9, v10, v11, v12, vars0);
  _exit(0);
}

uint64_t RNBSocket::OpenFile(RNBSocket *this, const char *a2)
{
  int v4;
  void *__p[2];
  __int128 v7;
  termios v8;

  *(_OWORD *)__p = 0u;
  v7 = 0u;
  v4 = open(a2, 2);
  *(_DWORD *)this = v4;
  if (v4 == -1)
  {
    LODWORD(__p[0]) = *__error();
    HIDWORD(__p[0]) = 2;
    LOBYTE(__p[1]) = 0;
    HIBYTE(v7) = 0;
    DNBError::LogThreaded((DNBError *)__p, "can't open file '%s'", a2);
    if (SHIBYTE(v7) < 0)
      operator delete(__p[1]);
    return 2;
  }
  else
  {
    if (!tcgetattr(v4, &v8))
    {
      v8.c_lflag &= 0xFFFFFFFFFFFFFEF7;
      tcsetattr(*(_DWORD *)this, 0, &v8);
    }
    return 0;
  }
}

void sub_100033B5C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_100033B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t RNBSocket::Read(int *a1, uint64_t a2)
{
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  __darwin_ct_rune_t v10;
  uint64_t v12;
  const char *v13;
  void *__p[2];
  __int128 v15;
  std::string::value_type __s[1024];

  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  if (*a1 == -1)
    return 1;
  *(_OWORD *)__p = 0u;
  v15 = 0u;
  while (1)
  {
    *__error() = 0;
    v4 = read(*a1, __s, 0x400uLL);
    v5 = v4;
    if (v4 != -1)
      break;
    if (*__error() != 35 && *__error() != 35 && *__error() != 4)
      goto LABEL_14;
  }
  if (v4 > 0)
  {
    std::string::append((std::string *)a2, __s, v4);
    goto LABEL_15;
  }
LABEL_14:
  LODWORD(__p[0]) = *__error();
  HIDWORD(__p[0]) = 2;
  LOBYTE(__p[1]) = 0;
  HIBYTE(v15) = 0;
  if (LODWORD(__p[0]))
    goto LABEL_16;
LABEL_15:
  if (!DNBLogCheckLogBit(0x80000))
    goto LABEL_17;
LABEL_16:
  DNBError::LogThreaded((DNBError *)__p, "::read(%i, %p, %llu) => %i", *a1, __s, 1024, v5);
LABEL_17:
  if ((unint64_t)(v5 + 1) >= 2)
  {
    while (1)
    {
      if (*(char *)(a2 + 23) < 0)
      {
        v8 = *(_QWORD *)(a2 + 8);
        if (!v8)
          break;
      }
      else
      {
        if (!*(_BYTE *)(a2 + 23))
          break;
        v8 = *(unsigned __int8 *)(a2 + 23);
      }
      v9 = *(char *)(a2 + 23) >= 0 ? a2 : *(_QWORD *)a2;
      v10 = *(char *)(v8 + v9 - 1);
      if (!(v10 < 0 ? __maskrune(v10, 0x4000uLL) : _DefaultRuneLocale.__runetype[v10] & 0x4000))
        break;
      v12 = *(unsigned __int8 *)(a2 + 23);
      if ((v12 & 0x80u) != 0)
        v12 = *(_QWORD *)(a2 + 8);
      std::string::erase((std::string *)a2, v12 - 1, 0xFFFFFFFFFFFFFFFFLL);
    }
    if (DNBLogEnabledForAny(0x80000))
    {
      if (*(char *)(a2 + 23) >= 0)
        v13 = (const char *)a2;
      else
        v13 = *(const char **)a2;
      _DNBLogThreaded("read: %s", v13);
    }
    v6 = 0;
    if (SHIBYTE(v15) < 0)
      goto LABEL_22;
  }
  else
  {
    if (v5)
      v6 = 1;
    else
      v6 = 2;
    *a1 = -1;
    if (SHIBYTE(v15) < 0)
LABEL_22:
      operator delete(__p[1]);
  }
  return v6;
}

void sub_100033DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t RNBSocket::Write(RNBSocket *this, const void *a2, size_t a3)
{
  int v4;
  ssize_t v7;
  uint64_t v8;
  void *__p[2];
  __int128 v11;

  v4 = *(_DWORD *)this;
  if (v4 == -1)
    return 1;
  *(_OWORD *)__p = 0u;
  v11 = 0u;
  v7 = write(v4, a2, a3);
  if (v7 < 0
    && (LODWORD(__p[0]) = *__error(), HIDWORD(__p[0]) = 2, LOBYTE(__p[1]) = 0, HIBYTE(v11) = 0, LODWORD(__p[0]))
    || DNBLogCheckLogBit(0x80000))
  {
    DNBError::LogThreaded((DNBError *)__p, "::write(socket = %i, buffer = %p, length = %llu) => %i", *(_DWORD *)this, a2, a3, v7);
  }
  v8 = 1;
  if ((v7 & 0x8000000000000000) == 0 && v7 == a3)
  {
    if (DNBLogEnabledForAny(0x800000))
      _DNBLogThreaded("putpkt: %*s", a3, (const char *)a2);
    if (DNBLogEnabledForAny(0x80000))
      _DNBLogThreaded("sent: %*s", a3, (const char *)a2);
    v8 = 0;
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__p[1]);
  return v8;
}

void sub_100033EFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZL58DVTSecureSocketProxy_CreateWithLockdownConnectionFunctionsP20_lockdown_connectionPFiS0_EPFlS0_PvmEPFlS0_PKvmEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 32))(*(_QWORD *)(a1 + 40));
}

uint64_t ___ZL58DVTSecureSocketProxy_CreateWithLockdownConnectionFunctionsP20_lockdown_connectionPFiS0_EPFlS0_PvmEPFlS0_PKvmEU13block_pointerFvvE_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 32))(*(_QWORD *)(a1 + 40));
}

void std::__tree<std::__value_type<int,lldb_private::SocketAddress>,std::__map_value_compare<int,std::__value_type<int,lldb_private::SocketAddress>,std::less<int>,true>,std::allocator<std::__value_type<int,lldb_private::SocketAddress>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,lldb_private::SocketAddress>,std::__map_value_compare<int,std::__value_type<int,lldb_private::SocketAddress>,std::less<int>,true>,std::allocator<std::__value_type<int,lldb_private::SocketAddress>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<int,lldb_private::SocketAddress>,std::__map_value_compare<int,std::__value_type<int,lldb_private::SocketAddress>,std::less<int>,true>,std::allocator<std::__value_type<int,lldb_private::SocketAddress>>>::destroy(a1, a2[1]);
    lldb_private::SocketAddress::~SocketAddress((lldb_private::SocketAddress *)(a2 + 5));
    operator delete(a2);
  }
}

uint64_t **std::__tree<std::__value_type<int,lldb_private::SocketAddress>,std::__map_value_compare<int,std::__value_type<int,lldb_private::SocketAddress>,std::less<int>,true>,std::allocator<std::__value_type<int,lldb_private::SocketAddress>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;
  uint64_t *v12;
  uint64_t *v13;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v10 >= v8)
        return v9;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_9:
    v11 = operator new(0xA8uLL);
    v11[8] = **a4;
    lldb_private::SocketAddress::SocketAddress((lldb_private::SocketAddress *)(v11 + 10));
    *(_QWORD *)v11 = 0;
    *((_QWORD *)v11 + 1) = 0;
    *((_QWORD *)v11 + 2) = v9;
    *v7 = (uint64_t *)v11;
    v12 = (uint64_t *)**a1;
    v13 = (uint64_t *)v11;
    if (v12)
    {
      *a1 = v12;
      v13 = *v7;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v11;
}

void sub_100034058(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

void std::vector<kevent>::__append(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;
  __int128 v17;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 5)
  {
    if (a2)
    {
      v12 = 32 * a2;
      bzero(a1[1], 32 * a2);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = (v5 - *a1) >> 5;
    v8 = v7 + a2;
    if ((v7 + a2) >> 59)
      std::vector<kevent>::__throw_length_error[abi:ne180100]();
    v9 = v4 - v6;
    if (v9 >> 4 > v8)
      v8 = v9 >> 4;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0)
      v10 = 0x7FFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 59)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(32 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[32 * v7];
    v14 = 32 * a2;
    v15 = &v11[32 * v10];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        v17 = *((_OWORD *)v5 - 1);
        *((_OWORD *)v13 - 2) = *((_OWORD *)v5 - 2);
        *((_OWORD *)v13 - 1) = v17;
        v13 -= 32;
        v5 -= 32;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
      operator delete(v5);
  }
}

void std::vector<kevent>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
}

void sub_100034208(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  return result;
}

char *SysSignal::Name(SysSignal *this)
{
  if (((_DWORD)this - 1) > 0x1E)
    return 0;
  else
    return off_100061168[(int)this - 1];
}

BOOL CFBundle::SetPath(CFBundle *this, const char *a2)
{
  const void *v4;
  const void *v5;
  const __CFURL *v6;
  const __CFURL *v7;
  CFBundleRef v8;
  CFBundleRef v9;
  _BOOL8 v10;
  uint64_t v12;
  CFStringRef filePath;

  v4 = (const void *)*((_QWORD *)this + 1);
  if (v4)
  {
    CFRelease(v4);
    *((_QWORD *)this + 1) = 0;
  }
  v5 = (const void *)*((_QWORD *)this + 3);
  if (v5)
  {
    CFRelease(v5);
    *((_QWORD *)this + 3) = 0;
  }
  CFString::CFString((CFString *)&v12, 0);
  CFString::SetFileSystemRepresentation((CFString *)&v12, a2);
  if (filePath)
  {
    v6 = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, filePath, kCFURLPOSIXPathStyle, 1u);
    v7 = (const __CFURL *)*((_QWORD *)this + 3);
    if (v7 != v6)
    {
      if (v7)
        CFRelease(v7);
      *((_QWORD *)this + 3) = v6;
    }
    if (v6)
    {
      v8 = CFBundleCreate(kCFAllocatorDefault, v6);
      v9 = (CFBundleRef)*((_QWORD *)this + 1);
      if (v9 != v8)
      {
        if (v9)
          CFRelease(v9);
        *((_QWORD *)this + 1) = v8;
      }
    }
  }
  v10 = *((_QWORD *)this + 1) != 0;
  CFString::~CFString((CFString *)&v12);
  return v10;
}

void CFBundle::CFBundle(CFBundle *this, const char *a2)
{
  *(_QWORD *)this = off_100061270;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = off_1000612B0;
  *((_QWORD *)this + 3) = 0;
  if (a2)
  {
    if (*a2)
      CFBundle::SetPath(this, a2);
  }
}

_QWORD *CFReleaser<__CFURL const*>::~CFReleaser(_QWORD *a1)
{
  const void *v2;

  *a1 = off_1000612B0;
  v2 = (const void *)a1[1];
  if (v2)
  {
    CFRelease(v2);
    a1[1] = 0;
  }
  return a1;
}

void CFBundle::~CFBundle(CFBundle *this)
{
  const void *v2;
  const void *v3;

  *(_QWORD *)this = off_100061270;
  *((_QWORD *)this + 2) = off_1000612B0;
  v2 = (const void *)*((_QWORD *)this + 3);
  if (v2)
  {
    CFRelease(v2);
    *((_QWORD *)this + 3) = 0;
  }
  *(_QWORD *)this = off_100061290;
  v3 = (const void *)*((_QWORD *)this + 1);
  if (v3)
  {
    CFRelease(v3);
    *((_QWORD *)this + 1) = 0;
  }
}

{
  const void *v2;
  const void *v3;

  *(_QWORD *)this = off_100061270;
  *((_QWORD *)this + 2) = off_1000612B0;
  v2 = (const void *)*((_QWORD *)this + 3);
  if (v2)
  {
    CFRelease(v2);
    *((_QWORD *)this + 3) = 0;
  }
  *(_QWORD *)this = off_100061290;
  v3 = (const void *)*((_QWORD *)this + 1);
  if (v3)
  {
    CFRelease(v3);
    *((_QWORD *)this + 1) = 0;
  }
  operator delete();
}

__CFBundle *CFBundle::GetIdentifier(CFBundle *this)
{
  __CFBundle *result;

  result = (__CFBundle *)*((_QWORD *)this + 1);
  if (result)
    return (__CFBundle *)CFBundleGetIdentifier(result);
  return result;
}

__CFBundle *CFBundle::CopyExecutableURL(CFBundle *this)
{
  __CFBundle *result;

  result = (__CFBundle *)*((_QWORD *)this + 1);
  if (result)
    return CFBundleCopyExecutableURL(result);
  return result;
}

_QWORD *CFReleaser<__CFBundle *>::~CFReleaser(_QWORD *a1)
{
  const void *v2;

  *a1 = off_100061290;
  v2 = (const void *)a1[1];
  if (v2)
  {
    CFRelease(v2);
    a1[1] = 0;
  }
  return a1;
}

void CFReleaser<__CFBundle *>::~CFReleaser(_QWORD *a1)
{
  const void *v2;

  *a1 = off_100061290;
  v2 = (const void *)a1[1];
  if (v2)
  {
    CFRelease(v2);
    a1[1] = 0;
  }
  operator delete();
}

void CFReleaser<__CFURL const*>::~CFReleaser(_QWORD *a1)
{
  const void *v2;

  *a1 = off_1000612B0;
  v2 = (const void *)a1[1];
  if (v2)
  {
    CFRelease(v2);
    a1[1] = 0;
  }
  operator delete();
}

void CFString::CFString(CFString *this, const __CFString *a2)
{
  *(_QWORD *)this = off_1000612D0;
  *((_QWORD *)this + 1) = a2;
}

void CFString::CFString(CFString *this, const char *a2, CFStringEncoding a3)
{
  CFStringRef v4;
  CFStringRef v5;

  *(_QWORD *)this = off_1000612D0;
  *((_QWORD *)this + 1) = 0;
  if (a2)
  {
    if (*a2)
    {
      v4 = CFStringCreateWithCString(kCFAllocatorDefault, a2, a3);
      v5 = (CFStringRef)*((_QWORD *)this + 1);
      if (v5 != v4)
      {
        if (v5)
          CFRelease(v5);
        *((_QWORD *)this + 1) = v4;
      }
    }
  }
}

void CFString::~CFString(CFString *this)
{
  const void *v2;

  *(_QWORD *)this = off_1000612F0;
  v2 = (const void *)*((_QWORD *)this + 1);
  if (v2)
  {
    CFRelease(v2);
    *((_QWORD *)this + 1) = 0;
  }
}

{
  const void *v2;

  *(_QWORD *)this = off_1000612F0;
  v2 = (const void *)*((_QWORD *)this + 1);
  if (v2)
  {
    CFRelease(v2);
    *((_QWORD *)this + 1) = 0;
  }
  operator delete();
}

CFStringRef CFString::SetFileSystemRepresentation(CFString *this, const char *a2)
{
  CFStringRef v3;
  CFStringRef v4;

  if (a2 && *a2)
    v3 = CFStringCreateWithFileSystemRepresentation(kCFAllocatorDefault, a2);
  else
    v3 = 0;
  v4 = (CFStringRef)*((_QWORD *)this + 1);
  if (v4 != v3)
  {
    if (v4)
      CFRelease(v4);
    *((_QWORD *)this + 1) = v3;
  }
  return v3;
}

uint64_t CFString::GlobPath(const char *a1, uint64_t a2)
{
  glob_t v4;

  if (glob(a1, 2048, 0, &v4))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      **(_BYTE **)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 23) = 0;
    }
  }
  else
  {
    std::string::assign((std::string *)a2, *(const std::string::value_type **)v4.gl_pathv);
    globfree(&v4);
  }
  if (*(char *)(a2 + 23) >= 0)
    return a2;
  else
    return *(_QWORD *)a2;
}

const __CFString *CFString::UTF8(const __CFString *result, uint64_t a2)
{
  const __CFString *v3;
  CFIndex Length;
  int64_t MaximumSizeForEncoding;
  CFIndex v6;
  char *v7;
  const char *v8;
  size_t v9;

  if (!result)
    return result;
  v3 = result;
  Length = CFStringGetLength(result);
  MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  if (MaximumSizeForEncoding < 1)
    return 0;
  std::string::resize((std::string *)a2, MaximumSizeForEncoding, 0);
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    v6 = *(unsigned __int8 *)(a2 + 23);
    if (*(_BYTE *)(a2 + 23))
    {
      v7 = (char *)a2;
      goto LABEL_8;
    }
    return 0;
  }
  v6 = *(_QWORD *)(a2 + 8);
  if (!v6)
    return 0;
  v7 = *(char **)a2;
LABEL_8:
  if (!CFStringGetCString(v3, v7, v6, 0x8000100u))
    return 0;
  if (*(char *)(a2 + 23) >= 0)
    v8 = (const char *)a2;
  else
    v8 = *(const char **)a2;
  v9 = strlen(v8);
  std::string::resize((std::string *)a2, v9, 0);
  if (*(char *)(a2 + 23) >= 0)
    return (const __CFString *)a2;
  else
    return *(const __CFString **)a2;
}

_QWORD *CFReleaser<__CFString const*>::~CFReleaser(_QWORD *a1)
{
  const void *v2;

  *a1 = off_1000612F0;
  v2 = (const void *)a1[1];
  if (v2)
  {
    CFRelease(v2);
    a1[1] = 0;
  }
  return a1;
}

void CFReleaser<__CFString const*>::~CFReleaser(_QWORD *a1)
{
  const void *v2;

  *a1 = off_1000612F0;
  v2 = (const void *)a1[1];
  if (v2)
  {
    CFRelease(v2);
    a1[1] = 0;
  }
  operator delete();
}

void Genealogy::Genealogy(Genealogy *this)
{
  *((_QWORD *)this + 11) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 10) = (char *)this + 88;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_BYTE *)this + 128) = 0;
  *(_QWORD *)this = dlsym((void *)0xFFFFFFFFFFFFFFFELL, "os_activity_diagnostic_for_pid");
  *((_QWORD *)this + 1) = dlsym((void *)0xFFFFFFFFFFFFFFFELL, "os_activity_iterate_processes");
  *((_QWORD *)this + 2) = dlsym((void *)0xFFFFFFFFFFFFFFFELL, "os_activity_iterate_breadcrumbs");
  *((_QWORD *)this + 3) = dlsym((void *)0xFFFFFFFFFFFFFFFELL, "os_activity_iterate_messages");
  *((_QWORD *)this + 4) = dlsym((void *)0xFFFFFFFFFFFFFFFELL, "os_activity_iterate_activities");
  *((_QWORD *)this + 5) = dlsym((void *)0xFFFFFFFFFFFFFFFELL, "os_trace_get_type");
  *((_QWORD *)this + 6) = dlsym((void *)0xFFFFFFFFFFFFFFFELL, "os_trace_copy_formatted_message");
  *((_QWORD *)this + 7) = dlsym((void *)0xFFFFFFFFFFFFFFFELL, "os_activity_for_thread");
  *((_QWORD *)this + 8) = dlsym((void *)0xFFFFFFFFFFFFFFFELL, "os_activity_for_task_thread");
  *((_QWORD *)this + 9) = dlsym((void *)0xFFFFFFFFFFFFFFFELL, "os_activity_messages_for_thread");
}

void Genealogy::GetGenealogyInfoForThread(Genealogy *this@<X0>, const MachThreadList *a2@<X3>, BOOL *a3@<X5>, uint64_t a4@<X1>, unint64_t a5@<X2>, int a6@<W4>, _QWORD *a7@<X8>)
{
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  BOOL v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  *a7 = 0;
  a7[1] = 0;
  if (!*((_QWORD *)this + 12) && !*((_BYTE *)this + 128))
    Genealogy::GetActivities(this, a4, a2, a6);
  v11 = (_QWORD *)*((_QWORD *)this + 11);
  if (v11)
  {
    v12 = (_QWORD *)((char *)this + 88);
    do
    {
      v13 = v11[4];
      v14 = v13 >= a5;
      if (v13 >= a5)
        v15 = v11;
      else
        v15 = v11 + 1;
      if (v14)
        v12 = v11;
      v11 = (_QWORD *)*v15;
    }
    while (*v15);
    if (v12 != (_QWORD *)((char *)this + 88) && v12[4] <= a5)
    {
      v17 = v12[5];
      v16 = v12[6];
      if (v16)
      {
        v18 = (unint64_t *)(v16 + 8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      *a7 = v17;
      a7[1] = v16;
    }
  }
  *a3 = *((_BYTE *)this + 128);
}

void Genealogy::GetActivities(Genealogy *this, uint64_t a2, const MachThreadList *a3, int a4)
{
  unsigned int (*v8)(uint64_t, _QWORD, uint64_t, _QWORD *);
  dispatch_time_t v9;
  uint64_t *v10;
  uint64_t i;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  void **v16;
  void **v17;
  void *v18;
  void **v19;
  void **v20;
  void *v21;
  void **v22;
  void **v23;
  void **v24;
  _QWORD v25[11];
  int v26;
  int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *(*v31)(_QWORD *, _QWORD *);
  void (*v32)(uint64_t);
  _QWORD **v33;
  _QWORD *v34[2];
  _QWORD v35[5];
  void *__p;
  void **v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  __n128 (*v42)(_QWORD *, uint64_t);
  void (*v43)(uint64_t);
  void *v44;
  void **v45;
  uint64_t v46;
  _QWORD v47[5];
  void **v48;
  void **v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  dispatch_semaphore_t v54;

  if (!*(_QWORD *)this
    || !*((_QWORD *)this + 1)
    || !*((_QWORD *)this + 2)
    || !*((_QWORD *)this + 3)
    || !*((_QWORD *)this + 4)
    || !*((_QWORD *)this + 5)
    || !*((_QWORD *)this + 6)
    || *(_OWORD *)((char *)this + 56) == 0)
  {
    return;
  }
  v51 = 0;
  v52 = &v51;
  v53 = 0x2000000000;
  v54 = 0;
  v54 = dispatch_semaphore_create(0);
  v47[0] = 0;
  v47[1] = v47;
  v47[2] = 0x4002000000;
  v47[3] = __Block_byref_object_copy_;
  v47[4] = __Block_byref_object_dispose_;
  v49 = 0;
  v50 = 0;
  v48 = 0;
  v39 = 0;
  v40 = &v39;
  v41 = 0x4002000000;
  v42 = __Block_byref_object_copy__10;
  v43 = __Block_byref_object_dispose__11;
  v45 = 0;
  v46 = 0;
  v44 = 0;
  v35[0] = 0;
  v35[1] = v35;
  v35[2] = 0x4002000000;
  v35[3] = __Block_byref_object_copy__12;
  v35[4] = __Block_byref_object_dispose__13;
  v37 = 0;
  v38 = 0;
  __p = 0;
  v28 = 0;
  v29 = &v28;
  v30 = 0x4002000000;
  v31 = __Block_byref_object_copy__14;
  v32 = __Block_byref_object_dispose__15;
  v34[0] = 0;
  v34[1] = 0;
  v33 = v34;
  v8 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t, _QWORD *))this;
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 1107296256;
  v25[2] = ___ZN9Genealogy13GetActivitiesEiRK14MachThreadListj_block_invoke;
  v25[3] = &__block_descriptor_tmp_28;
  v25[4] = v47;
  v25[5] = &v39;
  v25[9] = this;
  v25[10] = a3;
  v26 = a2;
  v27 = a4;
  v25[6] = v35;
  v25[7] = &v28;
  v25[8] = &v51;
  if (v8(a2, 0, 9, v25)
    && (v9 = dispatch_time(0, 500000000), dispatch_semaphore_wait((dispatch_semaphore_t)v52[3], v9)))
  {
    *((_BYTE *)this + 128) = 1;
  }
  else
  {
    v10 = (uint64_t *)v29[5];
    if (v10 != v29 + 6)
    {
      do
      {
        v12 = v40[5];
        for (i = v40[6]; v12 != i; v12 += 72)
        {
          if (*(_QWORD *)(v12 + 8) == v10[5])
            operator new();
        }
        v13 = (uint64_t *)v10[1];
        if (v13)
        {
          do
          {
            v14 = v13;
            v13 = (uint64_t *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v14 = (uint64_t *)v10[2];
            v15 = *v14 == (_QWORD)v10;
            v10 = v14;
          }
          while (!v15);
        }
        v10 = v14;
      }
      while (v14 != v29 + 6);
    }
  }
  _Block_object_dispose(&v28, 8);
  std::__tree<std::__value_type<unsigned int,DNBArchPluginInfoTag>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,DNBArchPluginInfoTag>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,DNBArchPluginInfoTag>>>::destroy((uint64_t)&v33, v34[0]);
  _Block_object_dispose(v35, 8);
  v16 = (void **)__p;
  if (__p)
  {
    v17 = v37;
    v18 = __p;
    if (v37 != __p)
    {
      do
      {
        if (*((char *)v17 - 1) < 0)
          operator delete(*(v17 - 3));
        v17 -= 8;
      }
      while (v17 != v16);
      v18 = __p;
    }
    v37 = v16;
    operator delete(v18);
  }
  _Block_object_dispose(&v39, 8);
  v19 = (void **)v44;
  if (v44)
  {
    v20 = v45;
    v21 = v44;
    if (v45 == v44)
    {
LABEL_44:
      v45 = v19;
      operator delete(v21);
      goto LABEL_45;
    }
    while (1)
    {
      if (*((char *)v20 - 1) < 0)
      {
        operator delete(*(v20 - 3));
        if (*((char *)v20 - 25) < 0)
LABEL_42:
          operator delete(*(v20 - 6));
      }
      else if (*((char *)v20 - 25) < 0)
      {
        goto LABEL_42;
      }
      v20 -= 9;
      if (v20 == v19)
      {
        v21 = v44;
        goto LABEL_44;
      }
    }
  }
LABEL_45:
  _Block_object_dispose(v47, 8);
  v22 = v48;
  if (v48)
  {
    v23 = v49;
    v24 = v48;
    if (v49 != v48)
    {
      do
      {
        if (*((char *)v23 - 1) < 0)
          operator delete(*(v23 - 3));
        v23 -= 6;
      }
      while (v23 != v22);
      v24 = v48;
    }
    v49 = v22;
    operator delete(v24);
  }
  _Block_object_dispose(&v51, 8);
}

void Genealogy::Clear(Genealogy *this)
{
  char *v1;

  v1 = (char *)this + 88;
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<Genealogy::ThreadActivity>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<Genealogy::ThreadActivity>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<Genealogy::ThreadActivity>>>>::destroy((uint64_t)this + 80, *((_QWORD **)this + 11));
  *((_QWORD *)v1 - 1) = v1;
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
  v1[40] = 0;
}

__n128 __Block_byref_object_copy_(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 48);
    v4 = *(void **)(a1 + 40);
    if (v3 != v1)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 48;
      }
      while (v3 != v1);
      v4 = *(void **)(a1 + 40);
    }
    *(_QWORD *)(a1 + 48) = v1;
    operator delete(v4);
  }
}

__n128 __Block_byref_object_copy__10(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__11(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 48);
    v4 = *(void **)(a1 + 40);
    if (v3 == v1)
    {
LABEL_12:
      *(_QWORD *)(a1 + 48) = v1;
      operator delete(v4);
      return;
    }
    while (1)
    {
      if (*(char *)(v3 - 1) < 0)
      {
        operator delete(*(void **)(v3 - 24));
        if (*(char *)(v3 - 25) < 0)
LABEL_9:
          operator delete(*(void **)(v3 - 48));
      }
      else if (*(char *)(v3 - 25) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 72;
      if (v3 == v1)
      {
        v4 = *(void **)(a1 + 40);
        goto LABEL_12;
      }
    }
  }
}

__n128 __Block_byref_object_copy__12(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__13(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 48);
    v4 = *(void **)(a1 + 40);
    if (v3 != v1)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 64;
      }
      while (v3 != v1);
      v4 = *(void **)(a1 + 40);
    }
    *(_QWORD *)(a1 + 48) = v1;
    operator delete(v4);
  }
}

_QWORD *__Block_byref_object_copy__14(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result[5] = a2[5];
  v2 = a2 + 6;
  v3 = a2[6];
  result[6] = v3;
  v4 = result + 6;
  v5 = a2[7];
  result[7] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    a2[5] = v2;
    *v2 = 0;
    a2[7] = 0;
  }
  else
  {
    result[5] = v4;
  }
  return result;
}

void __Block_byref_object_dispose__15(uint64_t a1)
{
  std::__tree<std::__value_type<unsigned int,DNBArchPluginInfoTag>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,DNBArchPluginInfoTag>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,DNBArchPluginInfoTag>>>::destroy(a1 + 40, *(_QWORD **)(a1 + 48));
}

intptr_t ___ZN9Genealogy13GetActivitiesEiRK14MachThreadListj_block_invoke(uint64_t a1, uint64_t a2, int a3)
{
  __int128 v4;
  void (*v5)(uint64_t, _QWORD *);
  __int128 v6;
  _QWORD v8[4];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  if (!a3)
  {
    v8[0] = _NSConcreteStackBlock;
    v4 = *(_OWORD *)(a1 + 72);
    v5 = *(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(a1 + 72) + 8);
    v8[1] = 1107296256;
    v8[2] = ___ZN9Genealogy13GetActivitiesEiRK14MachThreadListj_block_invoke_2;
    v8[3] = &__block_descriptor_tmp_26;
    v11 = v4;
    v12 = *(_QWORD *)(a1 + 88);
    v6 = *(_OWORD *)(a1 + 48);
    v9 = *(_OWORD *)(a1 + 32);
    v10 = v6;
    v5(a2, v8);
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24));
}

uint64_t ___ZN9Genealogy13GetActivitiesEiRK14MachThreadListj_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t, _QWORD *);
  void (*v5)(uint64_t, uint64_t, _QWORD *);
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, _QWORD *);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  unint64_t v12;
  uint64_t (*v13)(_QWORD, unint64_t);
  uint64_t v14;
  uint64_t (*v15)(uint64_t, unint64_t);
  uint64_t v16;
  uint64_t *v17;
  uint64_t **v18;
  uint64_t **v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, _QWORD *);
  _QWORD *v29;
  _QWORD *v30;
  BOOL v31;
  _QWORD v34[7];
  _QWORD v35[6];
  _QWORD v36[5];
  _QWORD v37[6];

  if (*(_DWORD *)(a1 + 80) == *(_DWORD *)(a2 + 56))
  {
    v3 = *(_QWORD *)(a1 + 64);
    v4 = *(void (**)(uint64_t, _QWORD *))(v3 + 16);
    v37[0] = _NSConcreteStackBlock;
    v37[1] = 1107296256;
    v37[2] = ___ZN9Genealogy13GetActivitiesEiRK14MachThreadListj_block_invoke_3;
    v37[3] = &__block_descriptor_tmp;
    v37[4] = *(_QWORD *)(a1 + 32);
    v4(a2, v37);
    v5 = *(void (**)(uint64_t, uint64_t, _QWORD *))(v3 + 32);
    v6 = *(_QWORD *)(a2 + 16);
    v36[0] = _NSConcreteStackBlock;
    v36[1] = 1107296256;
    v36[2] = ___ZN9Genealogy13GetActivitiesEiRK14MachThreadListj_block_invoke_17;
    v36[3] = &__block_descriptor_tmp_19;
    v36[4] = *(_QWORD *)(a1 + 40);
    v5(v6, a2, v36);
    v7 = *(void (**)(uint64_t, uint64_t, _QWORD *))(v3 + 24);
    v8 = *(_QWORD *)(a2 + 8);
    v35[0] = _NSConcreteStackBlock;
    v35[1] = 1107296256;
    v35[2] = ___ZN9Genealogy13GetActivitiesEiRK14MachThreadListj_block_invoke_20;
    v35[3] = &__block_descriptor_tmp_22;
    v35[4] = *(_QWORD *)(a1 + 48);
    v35[5] = v3;
    v7(v8, a2, v35);
    v9 = MachThreadList::NumThreads(*(MachThreadList **)(a1 + 72));
    if (v9)
    {
      v10 = v9;
      for (i = 0; i != v10; ++i)
      {
        v12 = MachThreadList::ThreadIDAtIndex(*(MachThreadList **)(a1 + 72), i);
        v13 = *(uint64_t (**)(_QWORD, unint64_t))(v3 + 64);
        if (v13)
        {
          v14 = v13(*(unsigned int *)(a1 + 84), v12);
          if (v14)
            goto LABEL_12;
        }
        else
        {
          v15 = *(uint64_t (**)(uint64_t, unint64_t))(v3 + 56);
          if (v15)
          {
            v14 = v15(a2, v12);
            if (v14)
            {
LABEL_12:
              v16 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
              v18 = (uint64_t **)(v16 + 48);
              v17 = *(uint64_t **)(v16 + 48);
              if (v17)
              {
                while (1)
                {
                  while (1)
                  {
                    v19 = (uint64_t **)v17;
                    v20 = v17[4];
                    if (v12 >= v20)
                      break;
                    v17 = *v19;
                    v18 = v19;
                    if (!*v19)
                      goto LABEL_19;
                  }
                  if (v20 >= v12)
                    break;
                  v17 = v19[1];
                  if (!v17)
                  {
                    v18 = v19 + 1;
                    goto LABEL_19;
                  }
                }
              }
              else
              {
                v19 = (uint64_t **)(v16 + 48);
LABEL_19:
                v21 = (uint64_t *)v19;
                v19 = (uint64_t **)operator new(0x30uLL);
                v19[4] = (uint64_t *)v12;
                v19[5] = 0;
                *v19 = 0;
                v19[1] = 0;
                v19[2] = v21;
                *v18 = (uint64_t *)v19;
                v22 = **(_QWORD **)(v16 + 40);
                v23 = (uint64_t *)v19;
                if (v22)
                {
                  *(_QWORD *)(v16 + 40) = v22;
                  v23 = *v18;
                }
                std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v16 + 48), v23);
                ++*(_QWORD *)(v16 + 56);
              }
              v19[5] = (uint64_t *)v14;
            }
          }
        }
      }
    }
    if (*(_QWORD *)(a2 + 16))
    {
      v24 = *(_QWORD **)(*(_QWORD *)(a1 + 56) + 8);
      if (v24[7])
      {
        v25 = (_QWORD *)v24[5];
        if (v25 != v24 + 6)
        {
          do
          {
            v26 = v25[5];
            v27 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v3 + 72))(a2, v26, v25[4]);
            v28 = *(void (**)(uint64_t, uint64_t, _QWORD *))(v3 + 24);
            v34[0] = _NSConcreteStackBlock;
            v34[1] = 1107296256;
            v34[2] = ___ZN9Genealogy13GetActivitiesEiRK14MachThreadListj_block_invoke_23;
            v34[3] = &__block_descriptor_tmp_24;
            v34[5] = v3;
            v34[6] = v26;
            v34[4] = *(_QWORD *)(a1 + 48);
            v28(v27, a2, v34);
            v29 = (_QWORD *)v25[1];
            if (v29)
            {
              do
              {
                v30 = v29;
                v29 = (_QWORD *)*v29;
              }
              while (v29);
            }
            else
            {
              do
              {
                v30 = (_QWORD *)v25[2];
                v31 = *v30 == (_QWORD)v25;
                v25 = v30;
              }
              while (!v31);
            }
            v25 = v30;
          }
          while (v30 != (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 48));
        }
      }
    }
  }
  return 1;
}

uint64_t ___ZN9Genealogy13GetActivitiesEiRK14MachThreadListj_block_invoke_3(uint64_t a1, uint64_t a2)
{
  const std::string::value_type *v3;
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  char *v9;
  _BYTE v11[24];
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  *(_DWORD *)v11 = *(_DWORD *)a2;
  *(_OWORD *)&v11[8] = *(_OWORD *)(a2 + 8);
  v3 = *(const std::string::value_type **)(a2 + 24);
  if (v3)
    std::string::assign(&__p, v3);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(_QWORD *)(v4 + 48);
  if (v5 >= *(_QWORD *)(v4 + 56))
  {
    v9 = std::vector<Genealogy::Breadcrumb>::__push_back_slow_path<Genealogy::Breadcrumb const&>(v4 + 40, (uint64_t)v11);
  }
  else
  {
    v6 = *(_OWORD *)v11;
    *(_QWORD *)(v5 + 16) = *(_QWORD *)&v11[16];
    *(_OWORD *)v5 = v6;
    v7 = (std::string *)(v5 + 24);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v7, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      v8 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v5 + 40) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
    v9 = (char *)(v5 + 48);
  }
  *(_QWORD *)(v4 + 48) = v9;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 1;
}

void __copy_helper_block_8_32r(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 32), *(const void **)(a2 + 32), 8);
}

void __destroy_helper_block_8_32r(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 32), 8);
}

uint64_t ___ZN9Genealogy13GetActivitiesEiRK14MachThreadListj_block_invoke_17(uint64_t a1, __int128 *a2)
{
  const std::string::value_type *v4;
  uint64_t v5;
  const std::string::value_type *v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  char *v12;
  std::string *v13;
  __int128 v14;
  __int128 v16;
  uint64_t v17;
  void *v18[2];
  void *__p[5];

  memset(__p, 0, 32);
  *(_OWORD *)v18 = 0u;
  v16 = *a2;
  v5 = *((_QWORD *)a2 + 2);
  v4 = (const std::string::value_type *)*((_QWORD *)a2 + 3);
  v17 = v5;
  if (v4)
    std::string::assign((std::string *)v18, v4);
  v6 = (const std::string::value_type *)*((_QWORD *)a2 + 4);
  if (v6)
    std::string::assign((std::string *)&__p[1], v6);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v8 = *(_QWORD *)(v7 + 48);
  if (v8 >= *(_QWORD *)(v7 + 56))
  {
    v12 = std::vector<Genealogy::Activity>::__push_back_slow_path<Genealogy::Activity const&>((void **)(v7 + 40), (uint64_t)&v16);
  }
  else
  {
    v9 = v16;
    *(_QWORD *)(v8 + 16) = v17;
    *(_OWORD *)v8 = v9;
    v10 = (std::string *)(v8 + 24);
    if (SHIBYTE(__p[0]) < 0)
    {
      std::string::__init_copy_ctor_external(v10, (const std::string::value_type *)v18[0], (std::string::size_type)v18[1]);
    }
    else
    {
      v11 = *(_OWORD *)v18;
      *(void **)(v8 + 40) = __p[0];
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
    }
    v13 = (std::string *)(v8 + 48);
    if (SHIBYTE(__p[3]) < 0)
    {
      std::string::__init_copy_ctor_external(v13, (const std::string::value_type *)__p[1], (std::string::size_type)__p[2]);
    }
    else
    {
      v14 = *(_OWORD *)&__p[1];
      *(void **)(v8 + 64) = __p[3];
      *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
    }
    v12 = (char *)(v8 + 72);
  }
  *(_QWORD *)(v7 + 48) = v12;
  if (SHIBYTE(__p[3]) < 0)
  {
    operator delete(__p[1]);
    if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
      return 1;
LABEL_18:
    operator delete(v18[0]);
    return 1;
  }
  if (SHIBYTE(__p[0]) < 0)
    goto LABEL_18;
  return 1;
}

uint64_t ___ZN9Genealogy13GetActivitiesEiRK14MachThreadListj_block_invoke_20(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  const std::string::value_type *v5;
  uint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  char *v12;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  std::string __p;

  v4 = *(_QWORD *)(a1 + 40);
  memset(&__p, 0, sizeof(__p));
  v14 = *((unint64_t *)a2 + 2);
  v15 = *a2;
  LOBYTE(v16) = (*(uint64_t (**)(__int128 *))(v4 + 40))(a2);
  if (*((_QWORD *)a2 + 5) && *((_QWORD *)a2 + 6))
    operator new();
  v5 = (const std::string::value_type *)(*(uint64_t (**)(__int128 *))(v4 + 48))(a2);
  if (v5)
    std::string::assign(&__p, v5);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v7 = *(_QWORD *)(v6 + 48);
  if (v7 >= *(_QWORD *)(v6 + 56))
  {
    v12 = std::vector<Genealogy::Message>::__push_back_slow_path<Genealogy::Message const&>(v6 + 40, (uint64_t)&v14);
  }
  else
  {
    v8 = v14;
    v9 = v15;
    *(_QWORD *)(v7 + 32) = v16;
    *(_OWORD *)v7 = v8;
    *(_OWORD *)(v7 + 16) = v9;
    v10 = (std::string *)(v7 + 40);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v10, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      v11 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v7 + 56) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
    }
    v12 = (char *)(v7 + 64);
  }
  *(_QWORD *)(v6 + 48) = v12;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 1;
}

uint64_t ___ZN9Genealogy13GetActivitiesEiRK14MachThreadListj_block_invoke_23(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  const std::string::value_type *v5;
  uint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  char *v12;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  std::string __p;

  v4 = a1[5];
  memset(&__p, 0, sizeof(__p));
  *(_QWORD *)&v14 = *((_QWORD *)a2 + 2);
  v15 = *a2;
  LOBYTE(v16) = (*(uint64_t (**)(__int128 *))(v4 + 40))(a2);
  *((_QWORD *)&v14 + 1) = a1[6];
  if (*((_QWORD *)a2 + 5) && *((_QWORD *)a2 + 6))
    operator new();
  v5 = (const std::string::value_type *)(*(uint64_t (**)(__int128 *))(v4 + 48))(a2);
  if (v5)
    std::string::assign(&__p, v5);
  v6 = *(_QWORD *)(a1[4] + 8);
  v7 = *(_QWORD *)(v6 + 48);
  if (v7 >= *(_QWORD *)(v6 + 56))
  {
    v12 = std::vector<Genealogy::Message>::__push_back_slow_path<Genealogy::Message const&>(v6 + 40, (uint64_t)&v14);
  }
  else
  {
    v8 = v14;
    v9 = v15;
    *(_QWORD *)(v7 + 32) = v16;
    *(_OWORD *)v7 = v8;
    *(_OWORD *)(v7 + 16) = v9;
    v10 = (std::string *)(v7 + 40);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v10, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      v11 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v7 + 56) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
    }
    v12 = (char *)(v7 + 64);
  }
  *(_QWORD *)(v6 + 48) = v12;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 1;
}

void __copy_helper_block_8_32r40r48r56r(uint64_t a1, const void **a2)
{
  _Block_object_assign((void *)(a1 + 32), a2[4], 8);
  _Block_object_assign((void *)(a1 + 40), a2[5], 8);
  _Block_object_assign((void *)(a1 + 48), a2[6], 8);
  _Block_object_assign((void *)(a1 + 56), a2[7], 8);
}

void __destroy_helper_block_8_32r40r48r56r(const void **a1)
{
  _Block_object_dispose(a1[7], 8);
  _Block_object_dispose(a1[6], 8);
  _Block_object_dispose(a1[5], 8);
  _Block_object_dispose(a1[4], 8);
}

void __copy_helper_block_8_32r40r48r56r64r(uint64_t a1, const void **a2)
{
  _Block_object_assign((void *)(a1 + 32), a2[4], 8);
  _Block_object_assign((void *)(a1 + 40), a2[5], 8);
  _Block_object_assign((void *)(a1 + 48), a2[6], 8);
  _Block_object_assign((void *)(a1 + 56), a2[7], 8);
  _Block_object_assign((void *)(a1 + 64), a2[8], 8);
}

void __destroy_helper_block_8_32r40r48r56r64r(const void **a1)
{
  _Block_object_dispose(a1[8], 8);
  _Block_object_dispose(a1[7], 8);
  _Block_object_dispose(a1[6], 8);
  _Block_object_dispose(a1[5], 8);
  _Block_object_dispose(a1[4], 8);
}

uint64_t Genealogy::GetProcessExecutableInfosAtIndex@<X0>(uint64_t this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  *a3 = 0;
  a3[1] = 0;
  if (a2)
  {
    v3 = a2 - 1;
    v4 = *(_QWORD *)(this + 104);
    if (a2 - 1 <= (unint64_t)((*(_QWORD *)(this + 112) - v4) >> 4))
    {
      v5 = *(_OWORD *)(v4 + 16 * v3);
      v6 = *(_QWORD *)(v4 + 16 * v3 + 8);
      if (v6)
      {
        v7 = (unint64_t *)(v6 + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      *(_OWORD *)a3 = v5;
    }
  }
  return this;
}

void std::__tree<std::__value_type<unsigned long long,std::shared_ptr<Genealogy::ThreadActivity>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<Genealogy::ThreadActivity>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<Genealogy::ThreadActivity>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (a2)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<Genealogy::ThreadActivity>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<Genealogy::ThreadActivity>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<Genealogy::ThreadActivity>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<Genealogy::ThreadActivity>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<Genealogy::ThreadActivity>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<Genealogy::ThreadActivity>>>>::destroy(a1, a2[1]);
    v4 = (std::__shared_weak_count *)a2[6];
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    operator delete(a2);
  }
}

char *std::vector<Genealogy::Breadcrumb>::__push_back_slow_path<Genealogy::Breadcrumb const&>(uint64_t a1, uint64_t a2)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  std::string *v10;
  std::string *v11;
  char *v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  void **v16;

  v2 = *(void ***)a1;
  v3 = *(void ***)(a1 + 8);
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *(_QWORD *)a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    abort();
  if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v2) >> 4) > v5)
    v5 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v2) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v2) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v8 = 0x555555555555555;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0x555555555555555)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v9 = (char *)operator new(48 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = (std::string *)&v9[48 * v4];
  *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
  v10->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  v11 = v10 + 1;
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
    v2 = *(void ***)a1;
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 24);
    v10[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
  }
  v12 = &v9[48 * v8];
  v13 = (char *)&v10[2];
  if (v3 == v2)
  {
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v13;
    *(_QWORD *)(a1 + 16) = v12;
  }
  else
  {
    do
    {
      v14 = *((_OWORD *)v3 - 3);
      v10[-2].__r_.__value_.__r.__words[2] = (std::string::size_type)*(v3 - 4);
      *(_OWORD *)&v10[-2].__r_.__value_.__l.__data_ = v14;
      v15 = *(_OWORD *)(v3 - 3);
      v10[-1].__r_.__value_.__r.__words[2] = (std::string::size_type)*(v3 - 1);
      *(_OWORD *)&v10[-1].__r_.__value_.__l.__data_ = v15;
      v10 -= 2;
      *(v3 - 2) = 0;
      *(v3 - 1) = 0;
      *(v3 - 3) = 0;
      v3 -= 6;
    }
    while (v3 != v2);
    v2 = *(void ***)a1;
    v16 = *(void ***)(a1 + 8);
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v13;
    *(_QWORD *)(a1 + 16) = v12;
    while (v16 != v2)
    {
      if (*((char *)v16 - 1) < 0)
        operator delete(*(v16 - 3));
      v16 -= 6;
    }
  }
  if (v2)
    operator delete(v2);
  return v13;
}

char *std::vector<Genealogy::Activity>::__push_back_slow_path<Genealogy::Activity const&>(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  _QWORD *v7;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  void **v18;

  v2 = 0x8E38E38E38E38E39 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0x38E38E38E38E38ELL)
    abort();
  if (0x1C71C71C71C71C72 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v3)
    v3 = 0x1C71C71C71C71C72 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0x8E38E38E38E38E39 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x1C71C71C71C71C7)
    v6 = 0x38E38E38E38E38ELL;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x38E38E38E38E38ELL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v7 = operator new(72 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = (std::string *)&v7[9 * v2];
  *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
  v8->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  v9 = v8 + 1;
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 24);
    v8[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
  }
  v10 = (std::string *)&v7[9 * v2 + 6];
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 48);
    v7[9 * v2 + 8] = *(_QWORD *)(a2 + 64);
  }
  v11 = (char *)&v7[9 * v6];
  v12 = (char *)&v8[3];
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 != *a1)
  {
    do
    {
      v15 = *(_OWORD *)(v14 - 9);
      v8[-3].__r_.__value_.__r.__words[2] = (std::string::size_type)*(v14 - 7);
      *(_OWORD *)&v8[-3].__r_.__value_.__l.__data_ = v15;
      v16 = *((_OWORD *)v14 - 3);
      v8[-2].__r_.__value_.__r.__words[2] = (std::string::size_type)*(v14 - 4);
      *(_OWORD *)&v8[-2].__r_.__value_.__l.__data_ = v16;
      *(v14 - 5) = 0;
      *(v14 - 4) = 0;
      *(v14 - 6) = 0;
      v17 = *(_OWORD *)(v14 - 3);
      v8[-1].__r_.__value_.__r.__words[2] = (std::string::size_type)*(v14 - 1);
      *(_OWORD *)&v8[-1].__r_.__value_.__l.__data_ = v17;
      v8 -= 3;
      *(v14 - 2) = 0;
      *(v14 - 1) = 0;
      *(v14 - 3) = 0;
      v14 -= 9;
    }
    while (v14 != v13);
    v14 = (void **)*a1;
    v18 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v12;
    a1[2] = v11;
    while (1)
    {
      if (v18 == v14)
        goto LABEL_28;
      if (*((char *)v18 - 1) < 0)
      {
        operator delete(*(v18 - 3));
        if ((*((char *)v18 - 25) & 0x80000000) == 0)
          goto LABEL_20;
      }
      else if ((*((char *)v18 - 25) & 0x80000000) == 0)
      {
        goto LABEL_20;
      }
      operator delete(*(v18 - 6));
LABEL_20:
      v18 -= 9;
    }
  }
  *a1 = v8;
  a1[1] = v12;
  a1[2] = v11;
LABEL_28:
  if (v14)
    operator delete(v14);
  return v12;
}

void std::__shared_ptr_pointer<Genealogy::ProcessExecutableInfo *,std::shared_ptr<Genealogy::ProcessExecutableInfo>::__shared_ptr_default_delete<Genealogy::ProcessExecutableInfo,Genealogy::ProcessExecutableInfo>,std::allocator<Genealogy::ProcessExecutableInfo>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t std::__shared_ptr_pointer<Genealogy::ProcessExecutableInfo *,std::shared_ptr<Genealogy::ProcessExecutableInfo>::__shared_ptr_default_delete<Genealogy::ProcessExecutableInfo,Genealogy::ProcessExecutableInfo>,std::allocator<Genealogy::ProcessExecutableInfo>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    operator delete();
  }
  return result;
}

char *std::vector<Genealogy::Message>::__push_back_slow_path<Genealogy::Message const&>(uint64_t a1, uint64_t a2)
{
  void **v2;
  void **v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  std::string *v13;
  char *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  void **v19;

  v2 = *(void ***)a1;
  v3 = *(void ***)(a1 + 8);
  v4 = ((uint64_t)v3 - *(_QWORD *)a1) >> 6;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 58)
    abort();
  v8 = *(_QWORD *)(a1 + 16) - (_QWORD)v2;
  if (v8 >> 5 > v5)
    v5 = v8 >> 5;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0)
    v9 = 0x3FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  if (v9)
  {
    if (v9 >> 58)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v10 = (char *)operator new(v9 << 6);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[64 * v4];
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  *((_QWORD *)v11 + 4) = *(_QWORD *)(a2 + 32);
  v13 = (std::string *)(v11 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
    v2 = *(void ***)a1;
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 40);
    *((_QWORD *)v11 + 7) = *(_QWORD *)(a2 + 56);
  }
  v14 = &v10[64 * v9];
  v15 = v11 + 64;
  if (v3 == v2)
  {
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v15;
    *(_QWORD *)(a1 + 16) = v14;
  }
  else
  {
    do
    {
      v16 = *((_OWORD *)v3 - 4);
      v17 = *((_OWORD *)v3 - 3);
      *((_QWORD *)v11 - 4) = *(v3 - 4);
      *((_OWORD *)v11 - 4) = v16;
      *((_OWORD *)v11 - 3) = v17;
      v18 = *(_OWORD *)(v3 - 3);
      *((_QWORD *)v11 - 1) = *(v3 - 1);
      *(_OWORD *)(v11 - 24) = v18;
      v11 -= 64;
      *(v3 - 2) = 0;
      *(v3 - 1) = 0;
      *(v3 - 3) = 0;
      v3 -= 8;
    }
    while (v3 != v2);
    v2 = *(void ***)a1;
    v19 = *(void ***)(a1 + 8);
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v15;
    *(_QWORD *)(a1 + 16) = v14;
    while (v19 != v2)
    {
      if (*((char *)v19 - 1) < 0)
        operator delete(*(v19 - 3));
      v19 -= 8;
    }
  }
  if (v2)
    operator delete(v2);
  return v15;
}

void std::__shared_ptr_pointer<Genealogy::ThreadActivity *,std::shared_ptr<Genealogy::ThreadActivity>::__shared_ptr_default_delete<Genealogy::ThreadActivity,Genealogy::ThreadActivity>,std::allocator<Genealogy::ThreadActivity>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

Genealogy::ThreadActivity *std::__shared_ptr_pointer<Genealogy::ThreadActivity *,std::shared_ptr<Genealogy::ThreadActivity>::__shared_ptr_default_delete<Genealogy::ThreadActivity,Genealogy::ThreadActivity>,std::allocator<Genealogy::ThreadActivity>>::__on_zero_shared(uint64_t a1)
{
  Genealogy::ThreadActivity *result;

  result = *(Genealogy::ThreadActivity **)(a1 + 24);
  if (result)
  {
    Genealogy::ThreadActivity::~ThreadActivity(result);
    operator delete();
  }
  return result;
}

void Genealogy::ThreadActivity::~ThreadActivity(Genealogy::ThreadActivity *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = *((_QWORD *)this + 12);
  if (v2)
  {
    v3 = *((_QWORD *)this + 13);
    v4 = (void *)*((_QWORD *)this + 12);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 48;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 12);
    }
    *((_QWORD *)this + 13) = v2;
    operator delete(v4);
  }
  v5 = *((_QWORD *)this + 9);
  if (v5)
  {
    v6 = *((_QWORD *)this + 10);
    v7 = (void *)*((_QWORD *)this + 9);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0)
          operator delete(*(void **)(v6 - 24));
        v6 -= 64;
      }
      while (v6 != v5);
      v7 = (void *)*((_QWORD *)this + 9);
    }
    *((_QWORD *)this + 10) = v5;
    operator delete(v7);
  }
  if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    if ((*((char *)this + 47) & 0x80000000) == 0)
      return;
LABEL_21:
    operator delete(*((void **)this + 3));
    return;
  }
  operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    goto LABEL_21;
}

uint64_t catch_mach_exception_raise_state(int a1, int a2, uint64_t a3, int a4)
{
  const char *v8;

  if (DNBLogCheckLogBit(8) && DNBLogEnabled())
  {
    if ((a2 - 1) > 0xC)
      v8 = 0;
    else
      v8 = off_100061490[a2 - 1];
    _DNBLogThreaded("::%s(exc_port = 0x%4.4x, exc_type = %d(%s), exc_data = 0x%llx, exc_data_count = %d)", "catch_mach_exception_raise_state", a1, a2, v8, a3, a4);
  }
  return 5;
}

uint64_t catch_mach_exception_raise_state_identity(int a1, int a2, int a3, int a4, uint64_t *a5, int a6)
{
  const char *v12;
  uint64_t v13;
  uint64_t v14;

  if (DNBLogCheckLogBit(8) && DNBLogEnabled())
  {
    if ((a4 - 1) > 0xC)
      v12 = 0;
    else
      v12 = off_100061490[a4 - 1];
    v13 = 3135093469;
    if (a6)
    {
      v14 = *a5;
      if (a6 != 1)
        v13 = a5[1];
    }
    else
    {
      v14 = 3135093469;
    }
    _DNBLogThreaded("::%s(exc_port = 0x%4.4x, thd_port = 0x%4.4x, tsk_port = 0x%4.4x, exc_type = %d(%s), exc_data[%d] = { 0x%llx, 0x%llx })", "catch_mach_exception_raise_state_identity", a1, a2, a3, a4, v12, a6, v14, v13);
  }
  return 5;
}

uint64_t catch_mach_exception_raise(int a1, unsigned int a2, unsigned int a3, unsigned int a4, uint64_t *a5, unsigned int a6)
{
  unsigned int v12;
  task_basic_info *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t result;
  uint64_t v21;

  if (DNBLogCheckLogBit(8) && DNBLogEnabled())
  {
    if (a4 - 1 > 0xC)
      v14 = 0;
    else
      v14 = off_100061490[a4 - 1];
    v15 = 3135093469;
    if (a6)
    {
      v16 = *a5;
      if (a6 != 1)
        v15 = a5[1];
    }
    else
    {
      v16 = 3135093469;
    }
    _DNBLogThreaded("::%s(exc_port = 0x%4.4x, thd_port = 0x%4.4x, tsk_port = 0x%4.4x, exc_type = %d(%s), exc_data[%d] = { 0x%llx, 0x%llx })", "catch_mach_exception_raise", a1, a2, a3, a4, v14, a6, v16, v15);
  }
  v17 = (unsigned int *)g_message;
  *(_DWORD *)(g_message + 8) = 0;
  *((_QWORD *)v17 + 3) = *((_QWORD *)v17 + 2);
  if (*v17 == a3)
  {
    *v17 = a3;
    v17[1] = a2;
    v17[2] = a4;
    v18 = a5;
    v19 = a6;
LABEL_13:
    MachException::Data::AppendExceptionData((MachException::Data *)v17, v18, v19);
    return 0;
  }
  if ((MachTask::IsValid((MachTask *)*v17, v12, v13) & 1) != 0)
    return 5;
  result = 5;
  if (a4 == 5 && a6 == 2 && *a5 == 65539 && a5[1] == 5)
  {
    v21 = g_message;
    *(_DWORD *)g_message = a3;
    *(_DWORD *)(v21 + 4) = a2;
    *(_DWORD *)(v21 + 8) = 5;
    v17 = (unsigned int *)v21;
    v18 = a5;
    v19 = 2;
    goto LABEL_13;
  }
  return result;
}

void MachException::Data::AppendExceptionData(MachException::Data *this, uint64_t *a2, unsigned int a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t *v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  if (a3)
  {
    v5 = 0;
    v6 = (char *)*((_QWORD *)this + 3);
    v7 = a3;
    v28 = a3;
    while (1)
    {
      v9 = a2[v5];
      v10 = *((_QWORD *)this + 4);
      if ((unint64_t)v6 >= v10)
        break;
      *(_QWORD *)v6 = v9;
      v8 = v6 + 8;
LABEL_4:
      *((_QWORD *)this + 3) = v8;
      ++v5;
      v6 = v8;
      if (v5 == v7)
        return;
    }
    v11 = (char *)*((_QWORD *)this + 2);
    v12 = (v6 - v11) >> 3;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 61)
      abort();
    v14 = v10 - (_QWORD)v11;
    if (v14 >> 2 > v13)
      v13 = v14 >> 2;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v16 = operator new(8 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = (uint64_t *)&v16[8 * v12];
    *v17 = v9;
    v8 = (char *)(v17 + 1);
    if (v6 == v11)
      goto LABEL_29;
    v18 = v6 - v11 - 8;
    if (v18 < 0x168)
    {
      v19 = v6;
      goto LABEL_28;
    }
    v20 = (v6 - 8 - v11) & 0xFFFFFFFFFFFFFFF8;
    if (&v16[v6 - v11 - 8 - v20] > &v16[v6 - v11 - 8])
    {
      v19 = v6;
    }
    else
    {
      if (&v6[-v20 - 8] <= v6 - 8)
      {
        if ((unint64_t)(v11 - v16) < 0x20)
        {
          v19 = v6;
          goto LABEL_28;
        }
        v21 = (v18 >> 3) + 1;
        v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
        v19 = &v6[-v22];
        v17 = (uint64_t *)((char *)v17 - v22);
        v23 = &v16[8 * v12 - 16];
        v24 = v6 - 16;
        v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v26 = *(_OWORD *)v24;
          *(v23 - 1) = *((_OWORD *)v24 - 1);
          *v23 = v26;
          v23 -= 2;
          v24 -= 32;
          v25 -= 4;
        }
        while (v25);
        if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_28;
LABEL_29:
        *((_QWORD *)this + 2) = v17;
        *((_QWORD *)this + 3) = v8;
        *((_QWORD *)this + 4) = &v16[8 * v15];
        if (v11)
          operator delete(v11);
        v7 = v28;
        goto LABEL_4;
      }
      v19 = v6;
    }
    do
    {
LABEL_28:
      v27 = *((_QWORD *)v19 - 1);
      v19 -= 8;
      *--v17 = v27;
    }
    while (v19 != v11);
    goto LABEL_29;
  }
}

void MachException::Message::Dump(MachException::Message *this)
{
  if (DNBLogEnabledForAny(8))
    _DNBLogThreaded("  exc_msg { bits = 0x%8.8x size = 0x%8.8x remote-port = 0x%8.8x local-port = 0x%8.8x reserved = 0x%8.8x id = 0x%8.8x } ", *(_DWORD *)this, *((_DWORD *)this + 1), *((_DWORD *)this + 2), *((_DWORD *)this + 3), *((_DWORD *)this + 4), *((_DWORD *)this + 5));
  if (DNBLogEnabledForAny(8))
    _DNBLogThreaded("reply_msg { bits = 0x%8.8x size = 0x%8.8x remote-port = 0x%8.8x local-port = 0x%8.8x reserved = 0x%8.8x id = 0x%8.8x }", *((_DWORD *)this + 256), *((_DWORD *)this + 257), *((_DWORD *)this + 258), *((_DWORD *)this + 259), *((_DWORD *)this + 260), *((_DWORD *)this + 261));
  MachException::Data::Dump((MachException::Message *)((char *)this + 2048));
}

void MachException::Data::Dump(MachException::Data *this)
{
  unsigned int v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  char *v9;
  const char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v2 = *((_DWORD *)this + 2) - 1;
  if (v2 > 0xC)
    v3 = "???";
  else
    v3 = off_100061490[v2];
  if (DNBLogEnabledForAny(8))
    _DNBLogThreaded("    state { task_port = 0x%4.4x, thread_port =  0x%4.4x, exc_type = %i (%s) ...", *(_DWORD *)this, *((_DWORD *)this + 1), *((_DWORD *)this + 2), v3);
  v5 = *((_QWORD *)this + 2);
  v4 = *((_QWORD *)this + 3);
  v6 = v4 - v5;
  v7 = *((_DWORD *)this + 2) == 5 && v6 == 16;
  if (v7 && *(_QWORD *)v5 == 65539 && (v8 = *(_DWORD *)(v5 + 8)) != 0)
  {
    v9 = SysSignal::Name((SysSignal *)*(unsigned int *)(v5 + 8));
    if (DNBLogEnabledForAny(8))
    {
      v10 = "unknown signal";
      if (v9)
        v10 = v9;
      _DNBLogThreaded("            exc_data: EXC_SOFT_SIGNAL (%i (%s))", v8, v10);
    }
  }
  else if (v4 != v5)
  {
    v11 = 0;
    v12 = v6 >> 3;
    if (v12 <= 1)
      v13 = 1;
    else
      v13 = v12;
    do
    {
      if (DNBLogEnabledForAny(8))
        _DNBLogThreaded("            exc_data[%llu]: 0x%llx", v11, *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v11));
      ++v11;
    }
    while (v13 != v11);
  }
}

uint64_t MachException::Data::GetStopInfo(uint64_t a1, uint64_t a2)
{
  int v2;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char *v13;
  const char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  *(_QWORD *)(a2 + 336) = 0;
  *(_OWORD *)(a2 + 304) = 0u;
  *(_OWORD *)(a2 + 320) = 0u;
  *(_OWORD *)(a2 + 272) = 0u;
  *(_OWORD *)(a2 + 288) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 256) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  v2 = *(_DWORD *)(a1 + 8);
  if (!v2)
    return 1;
  if (v2 == 6)
  {
    v5 = *(_QWORD **)(a1 + 16);
    if (*v5 == 258 && *(_QWORD *)(a1 + 24) - (_QWORD)v5 >= 9uLL)
    {
      *(_DWORD *)a2 = 4;
      *(_QWORD *)(a2 + 264) = v5[1];
      *(_QWORD *)(a2 + 272) = -1;
      v6 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)(*(_QWORD *)(a1 + 24) - v6) >= 0x11)
        *(_DWORD *)(a2 + 280) = *(_QWORD *)(v6 + 16);
      return 1;
    }
  }
  *(_DWORD *)a2 = 2;
  *(_DWORD *)(a2 + 264) = v2;
  if ((*(_DWORD *)(a1 + 8) - 1) > 0xC)
    v7 = snprintf((char *)(a2 + 4), 0x100uLL, "%i");
  else
    v7 = snprintf((char *)(a2 + 4), 0x100uLL, "%s");
  v8 = a2 + 260;
  v9 = (char *)(a2 + v7 + 4);
  v10 = (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3;
  *(_QWORD *)(a2 + 272) = v10;
  if (*(_DWORD *)(a1 + 8) == 5
    && (v11 = *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24) - v11 == 16)
    && *(_QWORD *)v11 == 65539
    && (v12 = *(_DWORD *)(v11 + 8)) != 0)
  {
    if ((unint64_t)v9 < v8)
    {
      v13 = SysSignal::Name((SysSignal *)*(unsigned int *)(v11 + 8));
      v14 = "unknown signal";
      if (v13)
        v14 = v13;
      snprintf(v9, v8 - (_QWORD)v9, " EXC_SOFT_SIGNAL( %i(%s))", v12, v14);
    }
  }
  else if ((unint64_t)v9 < v8)
  {
    v15 = &v9[snprintf((char *)(a2 + v7 + 4), v8 - (_QWORD)v9, " data[%llu] = {", v10)];
    if ((unint64_t)v15 < v8)
    {
      v16 = 0;
      do
      {
        v17 = *(_QWORD *)(a2 + 272);
        if (v16 >= v17)
          goto LABEL_27;
        v18 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v16++);
        if (v16 == v17)
          v19 = 125;
        else
          v19 = 44;
        v15 += snprintf(v15, v8 - (_QWORD)v15, "0x%llx%c", v18, v19);
      }
      while ((unint64_t)v15 < v8);
    }
  }
  v17 = *(_QWORD *)(a2 + 272);
LABEL_27:
  if (v17)
  {
    v20 = 0;
    do
    {
      *(_QWORD *)(a2 + 280 + 8 * v20) = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v20);
      ++v20;
    }
    while (v20 < *(_QWORD *)(a2 + 272));
  }
  return 1;
}

uint64_t MachException::Message::Receive(mach_msg_header_t *this, mach_port_name_t a2, mach_msg_option_t a3, int a4, mach_port_name_t a5)
{
  _BOOL4 v10;
  _BOOL4 v11;
  mach_msg_timeout_t v12;
  uint64_t v13;
  _DWORD v15[2];
  void *__p;
  uint64_t v17;
  uint64_t v18;

  __p = 0;
  v17 = 0;
  v18 = 0;
  v10 = DNBLogCheckLogBit(8);
  v11 = v10;
  v12 = a4 & (a3 << 23 >> 31);
  if ((a3 & 0x100) == 0 && v10 && DNBLogEnabled())
    _DNBLogThreaded("::mach_msg(msg->{bits = %#x, size = %u remote_port = %#x, local_port = %#x, reserved = 0x%x, id = 0x%x}, option = %#x, send_size = 0, rcv_size = %llu, rcv_name = %#x, timeout = %u, notify = %#x)", this->msgh_bits, this->msgh_size, this->msgh_remote_port, this->msgh_local_port, this->msgh_voucher_port, this->msgh_id, a3, 1024, a2, v12, a5);
  v13 = mach_msg(this, a3, 0, 0x400u, a2, v12, a5);
  v15[0] = v13;
  v15[1] = 1;
  LOBYTE(__p) = 0;
  HIBYTE(v18) = 0;
  if (v11)
  {
    DNBError::LogThreaded((DNBError *)v15, "::mach_msg(msg->{bits = %#x, size = %u remote_port = %#x, local_port = %#x, reserved = 0x%x, id = 0x%x}, option = %#x, send_size = %u, rcv_size = %u, rcv_name = %#x, timeout = %u, notify = %#x)", this->msgh_bits, this->msgh_size, this->msgh_remote_port, this->msgh_local_port, this->msgh_voucher_port, this->msgh_id, a3, 0, 1024, a2, v12, a5);
    v13 = v15[0];
    if (SHIBYTE(v18) < 0)
      operator delete(__p);
  }
  return v13;
}

BOOL MachException::Message::CatchExceptionRaise(MachException::Message *this, int a2)
{
  int v2;
  _BOOL8 result;

  *((_DWORD *)this + 512) = a2;
  g_message = (uint64_t)this + 2048;
  v2 = mach_exc_server(this, (uint64_t)this + 1024);
  if (!v2 && DNBLogCheckLogBit(8) && DNBLogEnabled())
    _DNBLogThreaded("mach_exc_server returned zero...");
  result = v2 != 0;
  g_message = 0;
  return result;
}

uint64_t MachException::Message::Reply(MachException::Message *this, MachProcess *a2, int a3)
{
  uint64_t v5;
  int v6;
  mach_port_name_t v7;
  int v9;
  unsigned int v10;
  uint64_t v11;
  int x;
  __int128 v14;
  __int128 v15;

  v14 = 0u;
  v15 = 0u;
  if (*((_DWORD *)this + 514) != 5)
    goto LABEL_20;
  v5 = *((_QWORD *)this + 258);
  if (*((_QWORD *)this + 259) - v5 != 16)
    goto LABEL_20;
  if (*(_QWORD *)v5 != 65539)
    goto LABEL_20;
  v6 = *(_DWORD *)(v5 + 8);
  if (!v6)
    goto LABEL_20;
  x = -1;
  v7 = *((_DWORD *)this + 512);
  if (*((_DWORD *)a2 + 30) == v7)
  {
    v9 = *(_DWORD *)a2;
    x = *(_DWORD *)a2;
  }
  else
  {
    *(_QWORD *)&v14 = pid_for_task(v7, &x) | 0x100000000;
    if (SHIBYTE(v15) < 0)
    {
      **((_BYTE **)&v14 + 1) = 0;
      *(_QWORD *)&v15 = 0;
    }
    else
    {
      BYTE8(v14) = 0;
      HIBYTE(v15) = 0;
    }
    v9 = x;
    a3 = v6;
  }
  if (v9 == -1)
    MachException::Message::Reply();
  *__error() = 0;
  if (!ptrace(13, x, (caddr_t)*((unsigned int *)this + 513), a3))
  {
    *(_QWORD *)&v14 = 0;
    if ((SHIBYTE(v15) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_16:
    **((_BYTE **)&v14 + 1) = 0;
    *(_QWORD *)&v15 = 0;
    goto LABEL_17;
  }
  LODWORD(v14) = *__error();
  DWORD1(v14) = 2;
  if (SHIBYTE(v15) < 0)
    goto LABEL_16;
LABEL_14:
  BYTE8(v14) = 0;
  HIBYTE(v15) = 0;
LABEL_17:
  if (DNBLogCheckLogBit(8) || (_DWORD)v14)
    DNBError::LogThreaded((DNBError *)&v14, "::ptrace (request = PT_THUPDATE, pid = 0x%4.4x, tid = 0x%4.4x, signal = %i)", x, *((_DWORD *)this + 513), a3);
LABEL_20:
  if (DNBLogEnabledForAny(8))
    _DNBLogThreaded("::mach_msg(msg->{bits = %#x, size = %u, remote_port = %#x, local_port = %#x, reserved = 0x%x, id = 0x%x}, option = %#x, send_size = %u, rcv_size = %u, rcv_name = %#x, timeout = %u, notify = %#x)", *((_DWORD *)this + 256), *((_DWORD *)this + 257), *((_DWORD *)this + 258), *((_DWORD *)this + 259), *((_DWORD *)this + 260), *((_DWORD *)this + 261), 65, *((_DWORD *)this + 257), 0, 0, 0, 0);
  v10 = mach_msg((mach_msg_header_t *)((char *)this + 1024), 65, *((_DWORD *)this + 257), 0, 0, 0, 0);
  *(_QWORD *)&v14 = v10 | 0x100000000;
  if (SHIBYTE(v15) < 0)
  {
    **((_BYTE **)&v14 + 1) = 0;
    *(_QWORD *)&v15 = 0;
    v10 = v14;
    if (!(_DWORD)v14)
      goto LABEL_34;
  }
  else
  {
    BYTE8(v14) = 0;
    HIBYTE(v15) = 0;
    if (!v10)
      goto LABEL_34;
  }
  if (v10 == 268435463)
  {
    if (DNBLogCheckLogBit(8))
      DNBError::LogThreaded((DNBError *)&v14, "::mach_msg() - send interrupted");
  }
  else if (*((_DWORD *)this + 512) == *((_DWORD *)a2 + 30))
  {
    if (DNBLogEnabled())
      _DNBLogThreaded("error: mach_msg() returned an error when replying to a mach exception: error = %u", (_DWORD)v14);
  }
  else if (DNBLogCheckLogBit(8))
  {
    DNBError::LogThreaded((DNBError *)&v14, "::mach_msg() - failed (child of task)");
  }
LABEL_34:
  v11 = v14;
  if (SHIBYTE(v15) < 0)
    operator delete(*((void **)&v14 + 1));
  return v11;
}

uint64_t MachException::PortInfo::Save(MachException::PortInfo *this, task_t a2)
{
  kern_return_t exception_ports;
  uint64_t v5;
  unsigned int v7;
  int v8;
  void *__p;
  uint64_t v10;
  uint64_t v11;

  if (DNBLogEnabledForAny(9))
    _DNBLogThreaded("MachException::PortInfo::Save(task = 0x%4.4x)", a2);
  __p = 0;
  v10 = 0;
  v11 = 0;
  *(_DWORD *)this = 7166;
  *((_DWORD *)this + 57) = 14;
  exception_ports = task_get_exception_ports(a2, 0x1BFEu, (exception_mask_array_t)this + 1, (mach_msg_type_number_t *)this + 57, (exception_handler_array_t)this + 15, (exception_behavior_array_t)this + 29, (exception_flavor_array_t)this + 43);
  v7 = exception_ports;
  v8 = 1;
  LOBYTE(__p) = 0;
  HIBYTE(v11) = 0;
  if (DNBLogCheckLogBit(8) || (v5 = 0, exception_ports))
  {
    DNBError::LogThreaded((DNBError *)&v7, "::task_get_exception_ports(task = 0x%4.4x, mask = 0x%x, maskCnt => %u, ports, behaviors, flavors)", a2, *(_DWORD *)this, *((_DWORD *)this + 57));
    v5 = v7;
    if (v7 == 4)
    {
      if (*(_DWORD *)this == 7166)
      {
        v5 = 4;
LABEL_16:
        *(_DWORD *)this = 0;
        *((_DWORD *)this + 57) = 0;
LABEL_17:
        if (SHIBYTE(v11) < 0)
          operator delete(__p);
        return v5;
      }
      *(_DWORD *)this = 7166;
      *((_DWORD *)this + 57) = 14;
      v7 = task_get_exception_ports(a2, 0x1BFEu, (exception_mask_array_t)this + 1, (mach_msg_type_number_t *)this + 57, (exception_handler_array_t)this + 15, (exception_behavior_array_t)this + 29, (exception_flavor_array_t)this + 43);
      v8 = 1;
      if (SHIBYTE(v11) < 0)
      {
        *(_BYTE *)__p = 0;
        v10 = 0;
      }
      else
      {
        LOBYTE(__p) = 0;
        HIBYTE(v11) = 0;
      }
      if (!DNBLogCheckLogBit(8) && !v7)
      {
        v5 = 0;
        goto LABEL_17;
      }
      DNBError::LogThreaded((DNBError *)&v7, "::task_get_exception_ports(task = 0x%4.4x, mask = 0x%x, maskCnt => %u, ports, behaviors, flavors)", a2, *(_DWORD *)this, *((_DWORD *)this + 57));
      v5 = v7;
    }
    if (!(_DWORD)v5)
      goto LABEL_17;
    goto LABEL_16;
  }
  return v5;
}

uint64_t MachException::PortInfo::Restore(MachException::PortInfo *this, task_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  void *__p[2];
  __int128 v10;

  if (DNBLogEnabledForAny(9))
    _DNBLogThreaded("MachException::PortInfo::Restore( task = 0x%4.4x)", a2);
  *(_OWORD *)__p = 0u;
  v10 = 0u;
  if (*((_DWORD *)this + 57))
  {
    v4 = 0;
    while (1)
    {
      v6 = (char *)this + 4 * v4;
      __p[0] = (void *)(task_set_exception_ports(a2, *((_DWORD *)v6 + 1), *((_DWORD *)v6 + 15), *((_DWORD *)v6 + 29), *((_DWORD *)v6 + 43)) | 0x100000000);
      if (SHIBYTE(v10) < 0)
      {
        *(_BYTE *)__p[1] = 0;
        *(_QWORD *)&v10 = 0;
      }
      else
      {
        LOBYTE(__p[1]) = 0;
        HIBYTE(v10) = 0;
      }
      if (DNBLogCheckLogBit(8) || LODWORD(__p[0]))
      {
        DNBError::LogThreaded((DNBError *)__p, "::task_set_exception_ports(task = 0x%4.4x, exception_mask = 0x%8.8x, new_port = 0x%4.4x, behavior = 0x%8.8x, new_flavor = 0x%8.8x)", a2, *((_DWORD *)v6 + 1), *((_DWORD *)v6 + 15), *((_DWORD *)v6 + 29), *((_DWORD *)v6 + 43));
        v5 = LODWORD(__p[0]);
        if (LODWORD(__p[0]))
          break;
      }
      if (++v4 >= (unint64_t)*((unsigned int *)this + 57))
      {
        v5 = 0;
        break;
      }
    }
    v7 = SHIBYTE(v10);
    *((_DWORD *)this + 57) = 0;
    if (v7 < 0)
      operator delete(__p[1]);
  }
  else
  {
    v5 = 0;
    *((_DWORD *)this + 57) = 0;
  }
  return v5;
}

uint64_t MachException::ExceptionMask(MachException *this, const char *a2)
{
  unsigned __int8 v3;
  uint64_t v4;
  const char *v5;
  size_t v6;
  size_t v7;
  __int128 *p_dst;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v13;
  __int128 __dst;
  unint64_t v23;

  {
    MachException::ExceptionMask(char const*)::prefix_len = 4;
  }
  if (strncmp((const char *)this, "EXC_", 4uLL))
    return 0;
  v5 = (char *)this + MachException::ExceptionMask(char const*)::prefix_len;
  v6 = strlen(v5);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_dst = (__int128 *)operator new(v9 + 1);
    *((_QWORD *)&__dst + 1) = v7;
    v23 = v10 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_11;
  }
  HIBYTE(v23) = v6;
  p_dst = &__dst;
  if (v6)
LABEL_11:
    memcpy(p_dst, v5, v7);
  *((_BYTE *)p_dst + v7) = 0;
  if ((SHIBYTE(v23) & 0x80000000) == 0)
  {
    v11 = &__dst;
    switch(HIBYTE(v23))
    {
      case 8:
        break;
      case 9:
        goto LABEL_14;
      case 0xA:
        if ((_QWORD)__dst == 0x454343415F444142 && WORD4(__dst) == 21331)
          goto LABEL_50;
        goto LABEL_58;
      case 0xF:
        if ((_QWORD)__dst == 0x54534E495F444142 && *(_QWORD *)((char *)&__dst + 7) == 0x4E4F495443555254)
          goto LABEL_65;
        if (HIBYTE(v23) == 8)
          goto LABEL_67;
        if (HIBYTE(v23) == 9)
          goto LABEL_14;
        if (HIBYTE(v23) != 10)
          goto LABEL_69;
LABEL_58:
        if ((_QWORD)__dst == 0x54454D4854495241 && WORD4(__dst) == 17225)
          goto LABEL_76;
        if (HIBYTE(v23) == 8)
          goto LABEL_67;
        if (HIBYTE(v23) != 9)
          goto LABEL_69;
LABEL_14:
        if ((_QWORD)__dst == 0x4F4954414C554D45 && BYTE8(__dst) == 78)
          goto LABEL_66;
        if (HIBYTE(v23) != 8)
          goto LABEL_69;
LABEL_67:
        v11 = &__dst;
        break;
      default:
        goto LABEL_69;
    }
LABEL_68:
    if (*(_QWORD *)v11 == 0x4552415754464F53)
    {
      v4 = 32;
      goto LABEL_88;
    }
    goto LABEL_69;
  }
  v13 = *((_QWORD *)&__dst + 1);
  if (*((_QWORD *)&__dst + 1) == 10 && *(_QWORD *)__dst == 0x454343415F444142 && *(_WORD *)(__dst + 8) == 21331)
  {
LABEL_50:
    v4 = 2;
    goto LABEL_88;
  }
  if (*((_QWORD *)&__dst + 1) == 15)
  {
    if (*(_QWORD *)__dst == 0x54534E495F444142 && *(_QWORD *)(__dst + 7) == 0x4E4F495443555254)
    {
LABEL_65:
      v4 = 4;
      goto LABEL_88;
    }
    v13 = *((_QWORD *)&__dst + 1);
  }
  if (v13 == 10)
  {
    if (*(_QWORD *)__dst == 0x54454D4854495241 && *(_WORD *)(__dst + 8) == 17225)
    {
LABEL_76:
      v4 = 8;
      goto LABEL_88;
    }
    v13 = *((_QWORD *)&__dst + 1);
  }
  if (v13 == 9)
  {
    if (*(_QWORD *)__dst == 0x4F4954414C554D45 && *(_BYTE *)(__dst + 8) == 78)
    {
LABEL_66:
      v4 = 16;
      goto LABEL_88;
    }
    v13 = *((_QWORD *)&__dst + 1);
  }
  if (v13 == 8)
  {
    v11 = (__int128 *)__dst;
    goto LABEL_68;
  }
LABEL_69:
  if (std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&__dst, "BREAKPOINT"))
  {
    v4 = 64;
  }
  else if (std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&__dst, "SYSCALL"))
  {
    v4 = 128;
  }
  else if (std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&__dst, "MACH_SYSCALL"))
  {
    v4 = 256;
  }
  else if (std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&__dst, "RPC_ALERT"))
  {
    v4 = 512;
  }
  else if (std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&__dst, "CRASH"))
  {
    v4 = 1024;
  }
  else if (std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&__dst, "RESOURCE"))
  {
    v4 = 2048;
  }
  else if (std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&__dst, "GUARD"))
  {
    v4 = 4096;
  }
  else if (std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&__dst, "CORPSE_NOTIFY"))
  {
    v4 = 0x2000;
  }
  else
  {
    v4 = 0;
  }
LABEL_88:
  if (SHIBYTE(v23) < 0)
    operator delete((void *)__dst);
  return v4;
}

void MachProcess::MachProcess(MachProcess *this)
{
  *(_QWORD *)this = 0;
  *(_QWORD *)((char *)this + 12) = -1;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 5) = -1;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  MachTask::MachTask((MachProcess *)((char *)this + 104), this);
  *((_DWORD *)this + 110) = 0;
  *((_QWORD *)this + 56) = 0;
  PThreadMutex::PThreadMutex((MachProcess *)((char *)this + 456), 2);
  *((_DWORD *)this + 137) = 0;
  *((_QWORD *)this + 70) = 0;
  *((_QWORD *)this + 65) = 0;
  *((_QWORD *)this + 67) = 0;
  *((_QWORD *)this + 66) = 0;
  *((_BYTE *)this + 544) = 0;
  PThreadMutex::PThreadMutex((MachProcess *)((char *)this + 568), 2);
  *((_QWORD *)this + 81) = 0;
  *(_OWORD *)((char *)this + 632) = 0u;
  PThreadEvent::PThreadEvent((MachProcess *)((char *)this + 656), 0, 1);
  DNBThreadResumeActions::DNBThreadResumeActions((MachProcess *)((char *)this + 832));
  *((_QWORD *)this + 112) = 0;
  *((_OWORD *)this + 55) = 0u;
  PThreadMutex::PThreadMutex((MachProcess *)((char *)this + 904), 2);
  MachThreadList::MachThreadList((MachProcess *)((char *)this + 968));
  Genealogy::Genealogy((MachProcess *)((char *)this + 1080));
  *((_DWORD *)this + 304) = 1;
  PThreadMutex::PThreadMutex((MachProcess *)((char *)this + 1224), 2);
  PThreadEvent::PThreadEvent((MachProcess *)((char *)this + 1288), 0, 31);
  PThreadEvent::PThreadEvent((MachProcess *)((char *)this + 1464), 0, 31);
  DNBBreakpointList::DNBBreakpointList((MachProcess *)((char *)this + 1640));
  DNBBreakpointList::DNBBreakpointList((MachProcess *)((char *)this + 1664));
  *((_QWORD *)this + 225) = 0;
  *((_BYTE *)this + 1752) = 0;
  *(_OWORD *)((char *)this + 1688) = 0u;
  *(_OWORD *)((char *)this + 1704) = 0u;
  *(_OWORD *)((char *)this + 1720) = 0u;
  *(_OWORD *)((char *)this + 1736) = 0u;
  *((_OWORD *)this + 110) = 0u;
  *((_OWORD *)this + 111) = 0u;
  *((_QWORD *)this + 220) = dlsym((void *)0xFFFFFFFFFFFFFFFELL, "_dyld_process_info_create");
  *((_QWORD *)this + 221) = dlsym((void *)0xFFFFFFFFFFFFFFFELL, "_dyld_process_info_for_each_image");
  *((_QWORD *)this + 222) = dlsym((void *)0xFFFFFFFFFFFFFFFELL, "_dyld_process_info_release");
  *((_QWORD *)this + 223) = dlsym((void *)0xFFFFFFFFFFFFFFFELL, "_dyld_process_info_get_cache");
  *((_QWORD *)this + 224) = dlsym((void *)0xFFFFFFFFFFFFFFFELL, "_dyld_process_info_get_platform");
  *((_QWORD *)this + 225) = dlsym((void *)0xFFFFFFFFFFFFFFFELL, "_dyld_process_info_get_state");
  if (DNBLogEnabledForAny(3))
    _DNBLogThreaded("%s", "MachProcess::MachProcess()");
}

void sub_100037F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, void **a12, DNBThreadResumeActions *a13, PThreadEvent *a14, void **a15, PThreadMutex *a16, PThreadMutex *a17, MachTask *a18)
{
  uint64_t v18;
  pthread_mutex_t *v19;
  PThreadEvent *v20;
  PThreadEvent *v21;
  DNBBreakpointList *v22;
  void **v23;
  pthread_mutex_t *v24;
  MachThreadList *v25;
  Genealogy *v26;

  DNBBreakpointList::~DNBBreakpointList(v22);
  PThreadEvent::~PThreadEvent(v21);
  PThreadEvent::~PThreadEvent(v20);
  PThreadMutex::~PThreadMutex(v19);
  Genealogy::~Genealogy(v26);
  MachThreadList::~MachThreadList(v25);
  PThreadMutex::~PThreadMutex(v24);
  std::vector<MachException::Message>::~vector[abi:ne180100]((void **)(v18 + 880));
  DNBThreadResumeActions::~DNBThreadResumeActions(a13);
  PThreadEvent::~PThreadEvent(a14);
  std::vector<std::string>::~vector[abi:ne180100](a15);
  PThreadMutex::~PThreadMutex((pthread_mutex_t *)a16);
  if (*(char *)(v18 + 543) < 0)
    operator delete(*(void **)(v18 + 520));
  PThreadMutex::~PThreadMutex((pthread_mutex_t *)a17);
  MachTask::~MachTask(a18);
  if (*(char *)(v18 + 103) < 0)
    operator delete(*v23);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v18 + 48));
  if (*(char *)(v18 + 47) < 0)
    operator delete(*a12);
  _Unwind_Resume(a1);
}

void Genealogy::~Genealogy(Genealogy *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *((_QWORD *)this + 13);
  if (v2)
  {
    v3 = *((_QWORD *)this + 14);
    v4 = (void *)*((_QWORD *)this + 13);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 13);
    }
    *((_QWORD *)this + 14) = v2;
    operator delete(v4);
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<Genealogy::ThreadActivity>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<Genealogy::ThreadActivity>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<Genealogy::ThreadActivity>>>>::destroy((uint64_t)this + 80, *((_QWORD **)this + 11));
}

void **std::vector<MachException::Message>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 3);
        if (v5)
        {
          *((_QWORD *)v3 - 2) = v5;
          operator delete(v5);
        }
        v3 -= 2088;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void DNBThreadResumeActions::~DNBThreadResumeActions(DNBThreadResumeActions *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
    operator delete(v2);
  v3 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v3;
    operator delete(v3);
  }
}

void **std::vector<std::string>::~vector[abi:ne180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void MachProcess::~MachProcess(MachProcess *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  if (DNBLogEnabledForAny(3))
    _DNBLogThreaded("%s", "MachProcess::~MachProcess()");
  MachProcess::Clear(this, 0);
  if (*((char *)this + 1743) < 0)
    operator delete(*((void **)this + 215));
  DNBBreakpointList::~DNBBreakpointList((MachProcess *)((char *)this + 1664));
  DNBBreakpointList::~DNBBreakpointList((MachProcess *)((char *)this + 1640));
  PThreadEvent::~PThreadEvent((MachProcess *)((char *)this + 1464));
  PThreadEvent::~PThreadEvent((MachProcess *)((char *)this + 1288));
  if (pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 1224))
    && !pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 1224)))
  {
    pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 1224));
  }
  v2 = *((_QWORD *)this + 148);
  if (v2)
  {
    v3 = *((_QWORD *)this + 149);
    v4 = (void *)*((_QWORD *)this + 148);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 148);
    }
    *((_QWORD *)this + 149) = v2;
    operator delete(v4);
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<Genealogy::ThreadActivity>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<Genealogy::ThreadActivity>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<Genealogy::ThreadActivity>>>>::destroy((uint64_t)this + 1160, *((_QWORD **)this + 146));
  MachThreadList::~MachThreadList((MachProcess *)((char *)this + 968));
  if (pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 904))
    && !pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 904)))
  {
    pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 904));
  }
  v8 = *((_QWORD *)this + 110);
  if (v8)
  {
    v9 = *((_QWORD *)this + 111);
    v10 = (void *)*((_QWORD *)this + 110);
    if (v9 != v8)
    {
      do
      {
        v11 = *(void **)(v9 - 24);
        if (v11)
        {
          *(_QWORD *)(v9 - 16) = v11;
          operator delete(v11);
        }
        v9 -= 2088;
      }
      while (v9 != v8);
      v10 = (void *)*((_QWORD *)this + 110);
    }
    *((_QWORD *)this + 111) = v8;
    operator delete(v10);
  }
  v12 = (void *)*((_QWORD *)this + 107);
  if (v12)
    operator delete(v12);
  v13 = (void *)*((_QWORD *)this + 104);
  if (v13)
  {
    *((_QWORD *)this + 105) = v13;
    operator delete(v13);
  }
  PThreadEvent::~PThreadEvent((MachProcess *)((char *)this + 656));
  v14 = *((_QWORD *)this + 79);
  if (v14)
  {
    v15 = *((_QWORD *)this + 80);
    v16 = (void *)*((_QWORD *)this + 79);
    if (v15 != v14)
    {
      do
      {
        if (*(char *)(v15 - 1) < 0)
          operator delete(*(void **)(v15 - 24));
        v15 -= 24;
      }
      while (v15 != v14);
      v16 = (void *)*((_QWORD *)this + 79);
    }
    *((_QWORD *)this + 80) = v14;
    operator delete(v16);
  }
  if (pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 568))
    && !pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 568)))
  {
    pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 568));
  }
  if (*((char *)this + 543) < 0)
    operator delete(*((void **)this + 65));
  if (pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 456))
    && !pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 456)))
  {
    pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 456));
  }
  MachTask::~MachTask((MachProcess *)((char *)this + 104));
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  v17 = *((_QWORD *)this + 6);
  if (v17)
  {
    v18 = *((_QWORD *)this + 7);
    v19 = (void *)*((_QWORD *)this + 6);
    if (v18 != v17)
    {
      do
      {
        if (*(char *)(v18 - 1) < 0)
          operator delete(*(void **)(v18 - 24));
        v18 -= 24;
      }
      while (v18 != v17);
      v19 = (void *)*((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 7) = v17;
    operator delete(v19);
  }
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void MachProcess::Clear(MachProcess *this, char a2)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  MachTask::Clear((_QWORD *)this + 13);
  *((_DWORD *)this + 2) = 0;
  *(_DWORD *)this = 0;
  if ((a2 & 1) == 0)
  {
    v4 = *((_DWORD *)this + 3);
    if ((v4 & 0x80000000) == 0)
    {
      close(v4);
      *((_DWORD *)this + 3) = -1;
    }
    v5 = *((_DWORD *)this + 4);
    if ((v5 & 0x80000000) == 0)
    {
      close(v5);
      *((_DWORD *)this + 4) = -1;
    }
    v6 = *((_DWORD *)this + 5);
    if ((v6 & 0x80000000) == 0)
    {
      close(v6);
      *((_DWORD *)this + 5) = -1;
    }
  }
  if (*((char *)this + 47) < 0)
  {
    **((_BYTE **)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
  }
  else
  {
    *((_BYTE *)this + 24) = 0;
    *((_BYTE *)this + 47) = 0;
  }
  v7 = *((_QWORD *)this + 6);
  for (i = *((_QWORD *)this + 7); i != v7; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  *((_QWORD *)this + 7) = v7;
  MachProcess::SetState((uint64_t)this, 1u);
  *((_QWORD *)this + 55) = 0;
  MachThreadList::Clear((MachProcess *)((char *)this + 968));
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 904));
  v9 = *((_QWORD *)this + 111);
  v10 = *((_QWORD *)this + 110);
  while (v9 != v10)
  {
    v11 = *(void **)(v9 - 24);
    if (v11)
    {
      *(_QWORD *)(v9 - 16) = v11;
      operator delete(v11);
    }
    v9 -= 2088;
  }
  *((_QWORD *)this + 111) = v10;
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 904));
  Genealogy::Clear((MachProcess *)((char *)this + 1080));
  if (*((_QWORD *)this + 70))
  {
    PThreadEvent::SetEvents((pthread_mutex_t *)((char *)this + 656), 1);
    pthread_join(*((pthread_t *)this + 70), 0);
    *((_QWORD *)this + 70) = 0;
    PThreadEvent::ResetEvents((pthread_mutex_t *)((char *)this + 656), 1);
  }
}

uint64_t MachProcess::GetState(MachProcess *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;

  v2 = (pthread_mutex_t *)((char *)this + 1224);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 1224));
  v3 = *((unsigned int *)this + 304);
  pthread_mutex_unlock(v2);
  return v3;
}

void PThreadMutex::Locker::~Locker(pthread_mutex_t **this)
{
  pthread_mutex_t *v1;

  v1 = *this;
  if (v1)
    pthread_mutex_unlock(v1);
}

uint64_t MachProcess::ThreadGetName(MachProcess *this, uint64_t a2)
{
  return MachThreadList::GetName((MachProcess *)((char *)this + 968), a2);
}

uint64_t MachProcess::ThreadGetState(MachProcess *this, uint64_t a2)
{
  return MachThreadList::GetState((MachProcess *)((char *)this + 968), a2);
}

uint64_t MachProcess::GetNumThreads(MachProcess *this)
{
  return MachThreadList::NumThreads((MachProcess *)((char *)this + 968));
}

uint64_t MachProcess::GetThreadAtIndex(MachProcess *this, unint64_t a2)
{
  return MachThreadList::ThreadIDAtIndex((MachProcess *)((char *)this + 968), a2);
}

BOOL MachProcess::SyncThreadState(MachProcess *this, uint64_t a2)
{
  kern_return_t v2;
  _BOOL8 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  thread_act_t *v8;
  std::__shared_weak_count *v9;

  MachThreadList::GetThreadByID((MachProcess *)((char *)this + 968), a2, &v8);
  if (!v8)
  {
    v3 = 0;
    v4 = v9;
    if (!v9)
      return v3;
    goto LABEL_7;
  }
  v2 = thread_abort_safely(v8[4]);
  if (DNBLogEnabledForAny(4))
    _DNBLogThreaded("thread = 0x%8.8x calling thread_abort_safely (tid) => %u (GetGPRState() for stop_count = %u)", v8[4], v2, *(_DWORD *)(*(_QWORD *)v8 + 444));
  v3 = v2 == 0;
  v4 = v9;
  if (v9)
  {
LABEL_7:
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

void sub_1000387F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<MachThread>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<MachThread>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void MachProcess::GetRequestedQoS(MachProcess *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  MachThreadList::GetRequestedQoS((MachProcess *)((char *)this + 968), a2, a3, a4, a5);
}

uint64_t MachProcess::GetPThreadT(MachProcess *this, uint64_t a2)
{
  return MachThreadList::GetPThreadT((MachProcess *)((char *)this + 968), a2);
}

uint64_t MachProcess::GetDispatchQueueT(MachProcess *this, uint64_t a2)
{
  return MachThreadList::GetDispatchQueueT((MachProcess *)((char *)this + 968), a2);
}

uint64_t MachProcess::GetTSDAddressForThread(MachProcess *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MachThreadList::GetTSDAddressForThread((MachProcess *)((char *)this + 968), a2, a3, a4, a5);
}

unint64_t MachProcess::GetDeploymentInfo(MachProcess *this, const load_command *a2, mach_vm_address_t a3, int a4)
{
  uint64_t Memory;
  unsigned __int8 v8;
  int v9;
  uint64_t (*v10)(_QWORD, _QWORD, void **);
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  int v14;
  const char *p_p;
  char *v17;
  char *__endptr;
  void *__p;
  unsigned int v20;
  unsigned int v21;
  char v22;

  Memory = 0;
  v8 = 0;
  switch(a2->cmd & 0x7FFFFFFF)
  {
    case '$':
      Memory = MachTask::ReadMemory((MachProcess *)((char *)this + 104), a3, 0x10uLL, (char *)&__p);
      if (!Memory)
        goto LABEL_22;
      DNBBreakpointList::RemoveTrapsFromBuffer((_QWORD *)this + 205, a3, Memory, (char *)&__p);
      if (Memory != 16)
        goto LABEL_24;
      Memory = HIWORD(v20);
      v8 = 1;
      if (a4)
        goto LABEL_26;
      return v8 | (unint64_t)(Memory << 32);
    case '%':
      Memory = MachTask::ReadMemory((MachProcess *)((char *)this + 104), a3, 0x10uLL, (char *)&__p);
      if (!Memory)
        goto LABEL_22;
      DNBBreakpointList::RemoveTrapsFromBuffer((_QWORD *)this + 205, a3, Memory, (char *)&__p);
      if (Memory != 16)
        goto LABEL_24;
      Memory = HIWORD(v20);
      v8 = 2;
      if (a4)
        goto LABEL_26;
      return v8 | (unint64_t)(Memory << 32);
    case '&':
    case '\'':
    case '(':
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
    case '1':
      goto LABEL_25;
    case '/':
      Memory = MachTask::ReadMemory((MachProcess *)((char *)this + 104), a3, 0x10uLL, (char *)&__p);
      if (!Memory)
        goto LABEL_22;
      DNBBreakpointList::RemoveTrapsFromBuffer((_QWORD *)this + 205, a3, Memory, (char *)&__p);
      if (Memory != 16)
        goto LABEL_24;
      Memory = HIWORD(v20);
      v8 = 3;
      if (!a4)
        return v8 | (unint64_t)(Memory << 32);
      goto LABEL_26;
    case '0':
      Memory = MachTask::ReadMemory((MachProcess *)((char *)this + 104), a3, 0x10uLL, (char *)&__p);
      if (!Memory)
        goto LABEL_22;
      DNBBreakpointList::RemoveTrapsFromBuffer((_QWORD *)this + 205, a3, Memory, (char *)&__p);
      if (Memory != 16)
        goto LABEL_24;
      Memory = HIWORD(v20);
      v8 = 4;
      if (!a4)
        return v8 | (unint64_t)(Memory << 32);
      goto LABEL_26;
    case '2':
      Memory = MachTask::ReadMemory((MachProcess *)((char *)this + 104), a3, 0x18uLL, (char *)&__p);
      if (Memory)
      {
        DNBBreakpointList::RemoveTrapsFromBuffer((_QWORD *)this + 205, a3, Memory, (char *)&__p);
        if (Memory == 24)
        {
          v8 = v20;
          Memory = HIWORD(v21);
          if (!a4)
            return v8 | (unint64_t)(Memory << 32);
        }
        else
        {
LABEL_24:
          Memory = 0;
          v8 = 0;
LABEL_25:
          if (!a4)
            return v8 | (unint64_t)(Memory << 32);
        }
      }
      else
      {
LABEL_22:
        v8 = 0;
        if (!a4)
          return v8 | (unint64_t)(Memory << 32);
      }
LABEL_26:
      v9 = *((_DWORD *)this + 2);
      if (v9)
      {
        if (v9 != 6)
          return v8 | (unint64_t)(Memory << 32);
LABEL_39:
        MachProcess::GetMacCatalystVersionString(&__p);
        if (v22 >= 0)
          p_p = (const char *)&__p;
        else
          p_p = (const char *)__p;
        v17 = 0;
        __endptr = 0;
        Memory = strtoul(p_p, &__endptr, 10);
        if (__endptr && *__endptr == 46)
        {
          strtoul(__endptr + 1, &v17, 10);
          if (!v17 || *v17 != 46)
          {
            if ((v22 & 0x80000000) == 0)
              goto LABEL_50;
            goto LABEL_49;
          }
          strtoul(v17 + 1, 0, 10);
          if (v22 < 0)
LABEL_49:
            operator delete(__p);
        }
        else if (v22 < 0)
        {
          goto LABEL_49;
        }
LABEL_50:
        v8 = 6;
        return v8 | (unint64_t)(Memory << 32);
      }
      v10 = (uint64_t (*)(_QWORD, _QWORD, void **))*((_QWORD *)this + 220);
      if (v10 && (LODWORD(__p) = 0, (v11 = v10(*((unsigned int *)this + 30), 0, &__p)) != 0))
      {
        v12 = v11;
        v13 = (uint64_t (*)(uint64_t))*((_QWORD *)this + 224);
        if (v13)
          v14 = v13(v11);
        else
          v14 = 0;
        (*((void (**)(uint64_t))this + 222))(v12);
      }
      else
      {
        v14 = 0;
      }
      *((_DWORD *)this + 2) = v14;
      if (v14 == 6)
        goto LABEL_39;
      return v8 | (unint64_t)(Memory << 32);
    default:
      Memory = 0;
      v8 = 0;
      if (!a4)
        return v8 | (unint64_t)(Memory << 32);
      goto LABEL_26;
  }
}

unint64_t MachProcess::ReadMemory(MachProcess *this, mach_vm_address_t a2, unint64_t a3, char *a4)
{
  unint64_t Memory;

  Memory = MachTask::ReadMemory((MachProcess *)((char *)this + 104), a2, a3, a4);
  if (Memory)
    DNBBreakpointList::RemoveTrapsFromBuffer((_QWORD *)this + 205, a2, Memory, a4);
  return Memory;
}

void MachProcess::GetMacCatalystVersionString(_QWORD *a1@<X8>)
{
  void *v3;
  const char *v4;
  const char *v5;
  size_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3 = objc_autoreleasePoolPush();
  v4 = (const char *)objc_msgSend(-[NSDictionary objectForKey:](+[NSDictionary dictionaryWithContentsOfFile:](NSDictionary, "dictionaryWithContentsOfFile:", CFSTR("/System/Library/CoreServices/SystemVersion.plist")), "objectForKey:", CFSTR("iOSSupportVersion")), "UTF8String");
  if (!v4)
  {
    objc_autoreleasePoolPop(v3);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    return;
  }
  v5 = v4;
  v6 = strlen(v4);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v8 = v6 | 7;
    v9 = v8 + 1;
    v10 = operator new(v8 + 1);
    a1[1] = v7;
    a1[2] = v9 | 0x8000000000000000;
    *a1 = v10;
    a1 = v10;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v6;
    if (!v6)
      goto LABEL_11;
  }
  memmove(a1, v5, v7);
LABEL_11:
  *((_BYTE *)a1 + v7) = 0;
  objc_autoreleasePoolPop(v3);
}

uint64_t MachProcess::GetMachOInformationFromMemory(uint64_t a1, int a2, mach_vm_address_t a3, int a4, uint64_t a5)
{
  MachTask *v8;
  unint64_t v9;
  int v10;
  int v11;
  unint64_t Memory;
  mach_vm_address_t v13;
  int v14;
  unsigned int v15;
  uint64_t result;
  unint64_t v17;
  uint32_t cmd;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  __int128 v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  __int128 v33;
  unint64_t v34;
  __int128 v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  int v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v45;
  unint64_t v46;
  unint64_t DeploymentInfo;
  unint64_t v48;
  char v49;
  int v50;
  const char *v51;
  int v52;
  unsigned __int16 *v53;
  int v54;
  int v55;
  std::string *v57;
  std::string::size_type size;
  std::string *v59;
  std::string::size_type v60;
  unint64_t v61;
  std::string *v62;
  std::string::size_type v63;
  char **v64;
  void **v65;
  load_command v67;
  std::string v68;
  __int128 v69;
  __int128 v70;
  int v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  std::string::value_type __s[16];
  char v76;
  _BYTE v77[40];
  __int128 v78;
  __int128 v79;
  __int128 v80;

  v8 = (MachTask *)(a1 + 104);
  if (a4 != 4)
  {
    Memory = MachTask::ReadMemory((MachTask *)(a1 + 104), a3, 0x20uLL, v77);
    if (!Memory)
      return 0;
    DNBBreakpointList::RemoveTrapsFromBuffer((_QWORD *)(a1 + 1640), a3, Memory, v77);
    if (Memory != 32)
      return 0;
    v10 = *(_DWORD *)v77;
    v11 = *(_DWORD *)&v77[4];
    if ((*(_DWORD *)v77 + 17958194) >= 2 && *(_DWORD *)v77 != -805638658 && *(_DWORD *)v77 != -822415874)
      return 0;
    if (*(int *)&v77[4] <= 16777222)
    {
      if (*(_DWORD *)&v77[4] != 7 && *(_DWORD *)&v77[4] != 12)
        return 0;
    }
    else if (*(_DWORD *)&v77[4] != 16777223 && *(_DWORD *)&v77[4] != 16777228 && *(_DWORD *)&v77[4] != 33554444)
    {
      return 0;
    }
    v13 = a3 + 32;
    goto LABEL_28;
  }
  v9 = MachTask::ReadMemory((MachTask *)(a1 + 104), a3, 0x1CuLL, v77);
  if (!v9)
    return 0;
  DNBBreakpointList::RemoveTrapsFromBuffer((_QWORD *)(a1 + 1640), a3, v9, v77);
  if (v9 != 28)
    return 0;
  v10 = *(_DWORD *)v77;
  v11 = *(_DWORD *)&v77[4];
  if ((*(_DWORD *)v77 + 17958194) >= 2 && *(_DWORD *)v77 != -805638658 && *(_DWORD *)v77 != -822415874)
    return 0;
  if (*(int *)&v77[4] <= 16777222)
  {
    if (*(_DWORD *)&v77[4] != 7 && *(_DWORD *)&v77[4] != 12)
      return 0;
    goto LABEL_24;
  }
  if (*(_DWORD *)&v77[4] == 16777223 || *(_DWORD *)&v77[4] == 16777228 || *(_DWORD *)&v77[4] == 33554444)
  {
LABEL_24:
    v13 = a3 + 28;
LABEL_28:
    *(_DWORD *)a5 = v10;
    *(_DWORD *)(a5 + 4) = v11;
    *(_DWORD *)(a5 + 8) = *(_DWORD *)&v77[8] & 0xFFFFFF;
    v14 = *(_DWORD *)&v77[16];
    *(_OWORD *)(a5 + 12) = *(_OWORD *)&v77[12];
    if (!v14)
      return 1;
    v15 = 0;
    v64 = (char **)(a5 + 32);
    v65 = (void **)(a5 + 72);
    while (1)
    {
      v17 = MachTask::ReadMemory(v8, v13, 8uLL, (char *)&v67);
      if (!v17)
        return 0;
      DNBBreakpointList::RemoveTrapsFromBuffer((_QWORD *)(a1 + 1640), v13, v17, (char *)&v67);
      if (v17 != 8)
        return 0;
      cmd = v67.cmd;
      if (v67.cmd == 1)
        break;
LABEL_54:
      if (cmd == 25)
      {
        v32 = MachTask::ReadMemory(v8, v13, 0x48uLL, (char *)&v68);
        if (!v32)
          return 0;
        DNBBreakpointList::RemoveTrapsFromBuffer((_QWORD *)(a1 + 1640), v13, v32, (char *)&v68);
        if (v32 != 72)
          return 0;
        memset(v77, 0, 24);
        v76 = 0;
        *(_OWORD *)__s = *(_OWORD *)&v68.__r_.__value_.__r.__words[1];
        std::string::assign((std::string *)v77, __s);
        *(_OWORD *)&v77[24] = v69;
        v78 = v70;
        *(_QWORD *)&v33 = v71;
        *((_QWORD *)&v33 + 1) = v72;
        v79 = v33;
        *(_QWORD *)&v33 = v73;
        *((_QWORD *)&v33 + 1) = v74;
        v80 = v33;
        v34 = *(_QWORD *)(a5 + 40);
        if (v34 >= *(_QWORD *)(a5 + 48))
        {
          v36 = std::vector<MachProcess::mach_o_segment>::__push_back_slow_path<MachProcess::mach_o_segment const&>(v64, (uint64_t)v77);
        }
        else
        {
          if ((v77[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(*(std::string **)(a5 + 40), *(const std::string::value_type **)v77, *(std::string::size_type *)&v77[8]);
          }
          else
          {
            v35 = *(_OWORD *)v77;
            *(_QWORD *)(v34 + 16) = *(_QWORD *)&v77[16];
            *(_OWORD *)v34 = v35;
          }
          v37 = *(_OWORD *)&v77[24];
          v38 = v78;
          v39 = v79;
          *(_OWORD *)(v34 + 72) = v80;
          *(_OWORD *)(v34 + 56) = v39;
          *(_OWORD *)(v34 + 40) = v38;
          *(_OWORD *)(v34 + 24) = v37;
          v36 = (char *)(v34 + 88);
          *(_QWORD *)(a5 + 40) = v34 + 88;
        }
        *(_QWORD *)(a5 + 40) = v36;
        v40 = v77[23];
        if ((v77[23] & 0x80000000) == 0)
        {
          if (v77[23] == 16)
          {
            v41 = (uint64_t *)v77;
            goto LABEL_70;
          }
LABEL_76:
          cmd = v67.cmd;
          goto LABEL_77;
        }
        if (*(_QWORD *)&v77[8] == 16)
        {
          v41 = *(uint64_t **)v77;
LABEL_70:
          v43 = *v41;
          v42 = v41[1];
          if (v43 == 0x7274784563657845 && v42 == 0x646E657073755361)
          {
            *(_BYTE *)(a1 + 412) = 1;
            if ((v40 & 0x80000000) == 0)
              goto LABEL_76;
          }
          else if ((v77[23] & 0x80000000) == 0)
          {
            goto LABEL_76;
          }
        }
        operator delete(*(void **)v77);
        goto LABEL_76;
      }
LABEL_77:
      if (cmd == 27)
      {
        v45 = MachTask::ReadMemory(v8, v13, 0x18uLL, v77);
        if (v45)
        {
          DNBBreakpointList::RemoveTrapsFromBuffer((_QWORD *)(a1 + 1640), v13, v45, v77);
          if (v45 == 24)
            uuid_copy((unsigned __int8 *)(a5 + 56), &v77[8]);
        }
      }
      DeploymentInfo = MachProcess::GetDeploymentInfo((MachProcess *)a1, &v67, v13, *(_DWORD *)(a5 + 12) == 2);
      if (!(_BYTE)DeploymentInfo)
        goto LABEL_30;
      v48 = v46;
      switch((char)DeploymentInfo)
      {
        case 1:
          v77[23] = 6;
          strcpy(v77, "macosx");
          v49 = 1;
          break;
        case 2:
          v77[23] = 3;
          strcpy(v77, "ios");
          goto LABEL_102;
        case 3:
          v77[23] = 4;
          v50 = 1936684660;
          goto LABEL_99;
        case 4:
          v77[23] = 7;
          strcpy(v77, "watchos");
          v49 = 1;
          break;
        case 5:
          v77[23] = 8;
          strcpy(v77, "bridgeos");
          v49 = 1;
          break;
        case 6:
          v77[23] = 11;
          strcpy(v77, "maccatalyst");
          goto LABEL_102;
        case 7:
          v77[23] = 12;
          strcpy(v77, "iossimulator");
          goto LABEL_102;
        case 8:
          v77[23] = 13;
          v51 = "tvossimulator";
          goto LABEL_101;
        case 9:
          v77[23] = 16;
          strcpy(v77, "watchossimulator");
          goto LABEL_102;
        case 10:
          v77[23] = 9;
          strcpy(v77, "driverkit");
          goto LABEL_102;
        case 11:
          v77[23] = 4;
          v50 = 1936683640;
LABEL_99:
          *(_DWORD *)v77 = v50;
          v49 = 1;
          v77[4] = 0;
          break;
        case 12:
          v77[23] = 13;
          v51 = "xrossimulator";
LABEL_101:
          *(_QWORD *)v77 = *(_QWORD *)v51;
          *(_QWORD *)&v77[5] = *(_QWORD *)(v51 + 5);
          v77[13] = 0;
LABEL_102:
          v49 = 1;
          break;
        default:
          if (DNBLogEnabled())
            _DNBLogError("Unknown platform %u found for one binary", DeploymentInfo);
          v49 = 0;
          v77[0] = 0;
          break;
      }
      v77[24] = v49;
      if (a2 != 6)
      {
        v52 = *(char *)(a5 + 95);
        if (v52 < 0)
        {
          if (*(_QWORD *)(a5 + 80) == 6)
          {
            v53 = (unsigned __int16 *)*v65;
LABEL_109:
            v54 = *(_DWORD *)v53;
            v55 = v53[2];
            if (v54 == 1868783981 && v55 == 30835)
              goto LABEL_141;
          }
        }
        else
        {
          v53 = (unsigned __int16 *)(a5 + 72);
          if (v52 == 6)
            goto LABEL_109;
        }
      }
      std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((char *)&unk_1000528BD, (uint64_t)v77, &v68);
      if (*(char *)(a5 + 95) < 0)
        operator delete(*v65);
      *(_OWORD *)v65 = *(_OWORD *)&v68.__r_.__value_.__l.__data_;
      *(_QWORD *)(a5 + 88) = *((_QWORD *)&v68.__r_.__value_.__l + 2);
      std::string::assign((std::string *)(a5 + 96), (const std::string::value_type *)&unk_1000528BD);
      std::to_string(&v68, HIDWORD(DeploymentInfo));
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v57 = &v68;
      else
        v57 = (std::string *)v68.__r_.__value_.__r.__words[0];
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v68.__r_.__value_.__r.__words[2]);
      else
        size = v68.__r_.__value_.__l.__size_;
      std::string::append((std::string *)(a5 + 96), (const std::string::value_type *)v57, size);
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v68.__r_.__value_.__l.__data_);
      std::string::append((std::string *)(a5 + 96), ".");
      std::to_string(&v68, v48);
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v59 = &v68;
      else
        v59 = (std::string *)v68.__r_.__value_.__r.__words[0];
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v60 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
      else
        v60 = v68.__r_.__value_.__l.__size_;
      std::string::append((std::string *)(a5 + 96), (const std::string::value_type *)v59, v60);
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v68.__r_.__value_.__l.__data_);
        v61 = HIDWORD(v48);
        if (HIDWORD(v48))
        {
LABEL_133:
          std::string::append((std::string *)(a5 + 96), ".");
          std::to_string(&v68, v61);
          if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v62 = &v68;
          else
            v62 = (std::string *)v68.__r_.__value_.__r.__words[0];
          if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v63 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
          else
            v63 = v68.__r_.__value_.__l.__size_;
          std::string::append((std::string *)(a5 + 96), (const std::string::value_type *)v62, v63);
          if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v68.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        v61 = HIDWORD(v48);
        if (HIDWORD(v48))
          goto LABEL_133;
      }
LABEL_141:
      if (v77[24])
      {
        if ((v77[23] & 0x80000000) != 0)
          operator delete(*(void **)v77);
      }
LABEL_30:
      v13 += v67.cmdsize;
      ++v15;
      result = 1;
      if (v15 >= *(_DWORD *)(a5 + 16))
        return result;
    }
    v19 = MachTask::ReadMemory(v8, v13, 0x38uLL, (char *)&v68);
    if (!v19)
      return 0;
    DNBBreakpointList::RemoveTrapsFromBuffer((_QWORD *)(a1 + 1640), v13, v19, (char *)&v68);
    if (v19 != 56)
      return 0;
    memset(v77, 0, 24);
    v76 = 0;
    *(_OWORD *)__s = *(_OWORD *)&v68.__r_.__value_.__r.__words[1];
    std::string::assign((std::string *)v77, __s);
    *(_QWORD *)&v20 = v69;
    *((_QWORD *)&v20 + 1) = DWORD1(v69);
    *(_OWORD *)&v77[24] = v20;
    *(_QWORD *)&v20 = DWORD2(v69);
    *((_QWORD *)&v20 + 1) = HIDWORD(v69);
    v78 = v20;
    *(_QWORD *)&v20 = (int)v70;
    *((_QWORD *)&v20 + 1) = SDWORD1(v70);
    v79 = v20;
    *(_QWORD *)&v20 = DWORD2(v70);
    *((_QWORD *)&v20 + 1) = HIDWORD(v70);
    v80 = v20;
    v21 = *(_QWORD *)(a5 + 40);
    if (v21 >= *(_QWORD *)(a5 + 48))
    {
      v23 = std::vector<MachProcess::mach_o_segment>::__push_back_slow_path<MachProcess::mach_o_segment const&>(v64, (uint64_t)v77);
    }
    else
    {
      if ((v77[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(*(std::string **)(a5 + 40), *(const std::string::value_type **)v77, *(std::string::size_type *)&v77[8]);
      }
      else
      {
        v22 = *(_OWORD *)v77;
        *(_QWORD *)(v21 + 16) = *(_QWORD *)&v77[16];
        *(_OWORD *)v21 = v22;
      }
      v24 = *(_OWORD *)&v77[24];
      v25 = v78;
      v26 = v79;
      *(_OWORD *)(v21 + 72) = v80;
      *(_OWORD *)(v21 + 56) = v26;
      *(_OWORD *)(v21 + 40) = v25;
      *(_OWORD *)(v21 + 24) = v24;
      v23 = (char *)(v21 + 88);
      *(_QWORD *)(a5 + 40) = v21 + 88;
    }
    *(_QWORD *)(a5 + 40) = v23;
    v27 = v77[23];
    if ((v77[23] & 0x80000000) != 0)
    {
      if (*(_QWORD *)&v77[8] != 16)
        goto LABEL_52;
      v28 = *(uint64_t **)v77;
    }
    else
    {
      if (v77[23] != 16)
        goto LABEL_53;
      v28 = (uint64_t *)v77;
    }
    v30 = *v28;
    v29 = v28[1];
    if (v30 == 0x7274784563657845 && v29 == 0x646E657073755361)
    {
      *(_BYTE *)(a1 + 412) = 1;
      if ((v27 & 0x80000000) == 0)
        goto LABEL_53;
      goto LABEL_52;
    }
    if ((v77[23] & 0x80000000) != 0)
LABEL_52:
      operator delete(*(void **)v77);
LABEL_53:
    cmd = v67.cmd;
    goto LABEL_54;
  }
  return 0;
}

void sub_100039744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40)
{
  uint64_t v40;
  uint64_t v41;

  *(_QWORD *)(v40 + 40) = v41;
  if (a39 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(char *__s@<X1>, uint64_t a2@<X0>, std::string *a3@<X8>)
{
  std::string *v3;
  size_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;

  v3 = a3;
  if (!*(_BYTE *)(a2 + 24))
  {
    v5 = strlen(__s);
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = v5;
    if (v5 >= 0x17)
    {
      v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v7 = v5 | 7;
      v8 = v7 + 1;
      v9 = (std::string *)operator new(v7 + 1);
      v3->__r_.__value_.__l.__size_ = v6;
      v3->__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
      v3->__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
      v3 = v9;
    }
    else
    {
      *((_BYTE *)&v3->__r_.__value_.__s + 23) = v5;
      if (!v5)
        goto LABEL_13;
    }
    memcpy(v3, __s, v6);
LABEL_13:
    v3->__r_.__value_.__s.__data_[v6] = 0;
    return;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
}

void MachProcess::FormatDynamicLibrariesIntoJSON()
{
  operator new();
}

void sub_10003A7BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  std::shared_ptr<MachThread>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  if (a21 < 0)
    operator delete(__p);
  std::shared_ptr<MachThread>::~shared_ptr[abi:ne180100](v21 - 144);
  std::shared_ptr<MachThread>::~shared_ptr[abi:ne180100](v21 - 160);
  _Unwind_Resume(a1);
}

void ___ZN11MachProcess30GetAllLoadedBinariesViaDYLDSPIERNSt3__16vectorINS_24binary_image_informationENS0_9allocatorIS2_EEEE_block_invoke(uint64_t a1, uint64_t a2, const unsigned __int8 *a3, std::string::value_type *__s)
{
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  char *v10;
  void **v11;
  void **v12;
  void *v13;
  std::string v14;
  uint64_t v15;
  uint64_t v16;
  void *__p;
  void **v18;
  uint64_t v19;
  unsigned __int8 v20[16];
  void *v21[2];
  void *v22[2];
  __int128 v23;
  char v24;

  memset(&v14, 0, sizeof(v14));
  v15 = -1;
  v18 = 0;
  v19 = 0;
  __p = 0;
  *(_OWORD *)v21 = 0u;
  *(_OWORD *)v22 = 0u;
  v23 = 0u;
  v24 = 0;
  std::string::assign(&v14, __s);
  uuid_copy(v20, a3);
  v15 = a2;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(v7 + 8);
  if (v8 >= *(_QWORD *)(v7 + 16))
  {
    v10 = std::vector<MachProcess::binary_image_information>::__push_back_slow_path<MachProcess::binary_image_information const&>((void **)v7, (uint64_t)&v14);
  }
  else
  {
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(*(std::string **)(v7 + 8), v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
    }
    else
    {
      v9 = *(_OWORD *)&v14.__r_.__value_.__l.__data_;
      *(_QWORD *)(v8 + 16) = *((_QWORD *)&v14.__r_.__value_.__l + 2);
      *(_OWORD *)v8 = v9;
    }
    *(_QWORD *)(v8 + 24) = v15;
    MachProcess::mach_o_information::mach_o_information(v8 + 32, (uint64_t)&v16);
    *(_BYTE *)(v8 + 152) = v24;
    v10 = (char *)(v8 + 160);
    *(_QWORD *)(v7 + 8) = v8 + 160;
  }
  *(_QWORD *)(v7 + 8) = v10;
  if (SHIBYTE(v23) < 0)
  {
    operator delete(v22[1]);
    if ((SHIBYTE(v22[0]) & 0x80000000) == 0)
    {
LABEL_9:
      v11 = (void **)__p;
      if (__p)
        goto LABEL_10;
      goto LABEL_20;
    }
  }
  else if ((SHIBYTE(v22[0]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v21[0]);
  v11 = (void **)__p;
  if (__p)
  {
LABEL_10:
    v12 = v18;
    v13 = v11;
    if (v18 != v11)
    {
      do
      {
        if (*((char *)v12 - 65) < 0)
          operator delete(*(v12 - 11));
        v12 -= 11;
      }
      while (v12 != v11);
      v13 = __p;
    }
    v18 = v11;
    operator delete(v13);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_17;
    return;
  }
LABEL_20:
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
LABEL_17:
    operator delete(v14.__r_.__value_.__l.__data_);
}

void sub_10003AC44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v2 + 8) = v3;
  MachProcess::binary_image_information::~binary_image_information((void **)va);
  _Unwind_Resume(a1);
}

void MachProcess::binary_image_information::~binary_image_information(void **this)
{
  void **v2;
  void **v3;
  void **v4;

  if (*((char *)this + 151) < 0)
  {
    operator delete(this[16]);
    if ((*((char *)this + 127) & 0x80000000) == 0)
    {
LABEL_3:
      v2 = (void **)this[8];
      if (!v2)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*((char *)this + 127) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[13]);
  v2 = (void **)this[8];
  if (!v2)
  {
LABEL_4:
    if ((*((char *)this + 23) & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(*this);
    return;
  }
LABEL_8:
  v3 = (void **)this[9];
  v4 = v2;
  if (v3 != v2)
  {
    do
    {
      if (*((char *)v3 - 65) < 0)
        operator delete(*(v3 - 11));
      v3 -= 11;
    }
    while (v3 != v2);
    v4 = (void **)this[8];
  }
  this[9] = v2;
  operator delete(v4);
  if (*((char *)this + 23) < 0)
    goto LABEL_15;
}

void MachProcess::GetAllLoadedLibrariesInfos(MachProcess *this, int a2, int a3)
{
  int v5;
  int v8;
  uint64_t (*v9)(_QWORD, _QWORD, size_t *);
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, _QWORD *);
  int v13;
  uint64_t (*v14)(_QWORD, _QWORD, _QWORD *);
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  void *__p;
  _BYTE *v22;
  uint64_t v23;
  _QWORD v24[4];
  void **p_p;

  __p = (void *)0xE00000001;
  LODWORD(v22) = 1;
  HIDWORD(v22) = a2;
  v20 = 648;
  v5 = sysctl((int *)&__p, 4u, v24, &v20, 0, 0);
  if ((p_p & 4) == 0 && v20 != 0 && v5 == 0)
    v8 = 4;
  else
    v8 = 8;
  __p = 0;
  v22 = 0;
  v23 = 0;
  v9 = (uint64_t (*)(_QWORD, _QWORD, size_t *))*((_QWORD *)this + 220);
  if (v9)
  {
    LODWORD(v20) = 0;
    v10 = v9(*((unsigned int *)this + 30), 0, &v20);
    v11 = v10;
    if (v10)
    {
      v12 = (void (*)(uint64_t, _QWORD *))*((_QWORD *)this + 221);
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      v24[2] = ___ZN11MachProcess30GetAllLoadedBinariesViaDYLDSPIERNSt3__16vectorINS_24binary_image_informationENS0_9allocatorIS2_EEEE_block_invoke;
      v24[3] = &__block_descriptor_40_e19_v32__0Q8_16C_16r_24l;
      p_p = &__p;
      v12(v10, v24);
      (*((void (**)(uint64_t))this + 222))(v11);
    }
  }
  if (a3)
  {
    v13 = *((_DWORD *)this + 2);
    if (!v13)
    {
      v14 = (uint64_t (*)(_QWORD, _QWORD, _QWORD *))*((_QWORD *)this + 220);
      if (v14 && (LODWORD(v24[0]) = 0, v15 = v14(*((unsigned int *)this + 30), 0, v24), (v16 = v15) != 0))
      {
        v17 = (uint64_t (*)(uint64_t))*((_QWORD *)this + 224);
        if (v17)
          v13 = v17(v15);
        else
          v13 = 0;
        (*((void (**)(uint64_t))this + 222))(v16);
      }
      else
      {
        v13 = 0;
      }
      *((_DWORD *)this + 2) = v13;
    }
    if (v22 != __p)
    {
      v18 = 0;
      if ((unint64_t)((v22 - (_BYTE *)__p) / 160) <= 1)
        v19 = 1;
      else
        v19 = (v22 - (_BYTE *)__p) / 160;
      do
      {
        if (MachProcess::GetMachOInformationFromMemory((uint64_t)this, v13, *(_QWORD *)((char *)__p + v18 + 24), v8, (uint64_t)__p + v18 + 32))*((_BYTE *)__p + v18 + 152) = 1;
        v18 += 160;
        --v19;
      }
      while (v19);
    }
  }
  MachProcess::FormatDynamicLibrariesIntoJSON();
}

void sub_10003AFB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<MachProcess::binary_image_information>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void **std::vector<MachProcess::binary_image_information>::~vector[abi:ne180100](void **a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v2)
    {
      do
      {
        v3 -= 160;
        std::allocator<MachProcess::binary_image_information>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void MachProcess::GetLibrariesInfoForAddresses(uint64_t a1, int a2, _QWORD *a3)
{
  int v5;
  int v8;
  uint64_t (*v9)(_QWORD, _QWORD, size_t *);
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, void **);
  int v13;
  uint64_t (*v14)(_QWORD, _QWORD, void **);
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char *v26;
  uint64_t v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  std::string *v31;
  std::string *v32;
  void **v33;
  void **v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  void *v40;
  size_t v41;
  std::string *v42;
  unint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, const unsigned __int8 *, std::string::value_type *);
  uint64_t v50;
  void **v51;
  void *v52;
  void **v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  std::string::value_type v58;

  v44 = (void *)0xE00000001;
  LODWORD(v45) = 1;
  HIDWORD(v45) = a2;
  v41 = 648;
  v5 = sysctl((int *)&v44, 4u, &v47, &v41, 0, 0);
  if ((v51 & 4) == 0 && v41 != 0 && v5 == 0)
    v8 = 4;
  else
    v8 = 8;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v9 = *(uint64_t (**)(_QWORD, _QWORD, size_t *))(a1 + 1760);
  if (v9)
  {
    LODWORD(v41) = 0;
    v10 = v9(*(unsigned int *)(a1 + 120), 0, &v41);
    v11 = v10;
    if (v10)
    {
      v12 = *(void (**)(uint64_t, void **))(a1 + 1768);
      v47 = _NSConcreteStackBlock;
      v48 = 3221225472;
      v49 = ___ZN11MachProcess30GetAllLoadedBinariesViaDYLDSPIERNSt3__16vectorINS_24binary_image_informationENS0_9allocatorIS2_EEEE_block_invoke;
      v50 = (uint64_t)&__block_descriptor_40_e19_v32__0Q8_16C_16r_24l;
      v51 = &v44;
      v12(v10, &v47);
      (*(void (**)(uint64_t))(a1 + 1776))(v11);
    }
  }
  v13 = *(_DWORD *)(a1 + 8);
  if (!v13)
  {
    v14 = *(uint64_t (**)(_QWORD, _QWORD, void **))(a1 + 1760);
    if (v14 && (LODWORD(v47) = 0, v15 = v14(*(unsigned int *)(a1 + 120), 0, &v47), (v16 = v15) != 0))
    {
      v17 = *(uint64_t (**)(uint64_t))(a1 + 1792);
      if (v17)
        v13 = v17(v15);
      else
        v13 = 0;
      (*(void (**)(uint64_t))(a1 + 1776))(v16);
    }
    else
    {
      v13 = 0;
    }
    *(_DWORD *)(a1 + 8) = v13;
  }
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v18 = a3[1] - *a3;
  if (!v18)
LABEL_70:
    MachProcess::FormatDynamicLibrariesIntoJSON();
  v38 = v8;
  v39 = a1;
  v19 = 0;
  v20 = v44;
  v40 = v45;
  v21 = v18 >> 3;
  if ((unint64_t)(((_BYTE *)v45 - (_BYTE *)v44) / 160) <= 1)
    v22 = 1;
  else
    v22 = ((_BYTE *)v45 - (_BYTE *)v44) / 160;
  if (v21 <= 1)
    v23 = 1;
  else
    v23 = v21;
LABEL_31:
  if (v40 == v20)
    goto LABEL_46;
  v24 = 0;
  v25 = 0;
  while (1)
  {
    v26 = (char *)v44 + 160 * v24;
    v27 = v24;
    while (*((_QWORD *)v26 + 3) != *(_QWORD *)(*a3 + 8 * v19))
    {
      ++v27;
      v26 += 160;
      if (v22 == v27)
      {
        if ((v25 & 1) != 0)
          goto LABEL_30;
LABEL_46:
        v47 = 0;
        v48 = 0;
        v49 = 0;
        v50 = -1;
        v53 = 0;
        v54 = 0;
        v52 = 0;
        v55 = 0u;
        v56 = 0u;
        v57 = 0u;
        v58 = 0;
        v50 = *(_QWORD *)(*a3 + 8 * v19);
        v31 = v42;
        if ((unint64_t)v42 >= v43)
        {
          v32 = (std::string *)std::vector<MachProcess::binary_image_information>::__push_back_slow_path<MachProcess::binary_image_information const&>((void **)&v41, (uint64_t)&v47);
        }
        else
        {
          v42->__r_.__value_.__r.__words[0] = 0;
          v31->__r_.__value_.__l.__size_ = 0;
          v31->__r_.__value_.__r.__words[2] = 0;
          v31[1].__r_.__value_.__r.__words[0] = v50;
          MachProcess::mach_o_information::mach_o_information((uint64_t)&v31[1].__r_.__value_.__l.__size_, (uint64_t)&v51);
          v31[6].__r_.__value_.__s.__data_[8] = v58;
          v32 = (std::string *)((char *)v31 + 160);
        }
        v42 = v32;
        if ((SHIBYTE(v57) & 0x80000000) == 0)
        {
          if ((SBYTE7(v56) & 0x80000000) == 0)
            goto LABEL_51;
LABEL_54:
          operator delete((void *)v55);
          v33 = (void **)v52;
          if (v52)
            goto LABEL_55;
LABEL_29:
          if ((SHIBYTE(v49) & 0x80000000) == 0)
            goto LABEL_30;
LABEL_62:
          operator delete(v47);
          goto LABEL_30;
        }
        operator delete(*((void **)&v56 + 1));
        if (SBYTE7(v56) < 0)
          goto LABEL_54;
LABEL_51:
        v33 = (void **)v52;
        if (!v52)
          goto LABEL_29;
LABEL_55:
        v34 = v53;
        v35 = v33;
        if (v53 != v33)
        {
          do
          {
            if (*((char *)v34 - 65) < 0)
              operator delete(*(v34 - 11));
            v34 -= 11;
          }
          while (v34 != v33);
          v35 = v52;
        }
        v53 = v33;
        operator delete(v35);
        if (SHIBYTE(v49) < 0)
          goto LABEL_62;
LABEL_30:
        if (++v19 == v23)
        {
          if (v42 != (std::string *)v41)
          {
            v36 = 0;
            if ((unint64_t)((uint64_t)((uint64_t)v42 - v41) / 160) <= 1)
              v37 = 1;
            else
              v37 = (uint64_t)((uint64_t)v42 - v41) / 160;
            do
            {
              if (MachProcess::GetMachOInformationFromMemory(v39, v13, *(_QWORD *)(v41 + v36 + 24), v38, v41 + v36 + 32))*(_BYTE *)(v41 + v36 + 152) = 1;
              v36 += 160;
              --v37;
            }
            while (v37);
          }
          goto LABEL_70;
        }
        goto LABEL_31;
      }
    }
    v28 = v42;
    if ((unint64_t)v42 >= v43)
    {
      v30 = (std::string *)std::vector<MachProcess::binary_image_information>::__push_back_slow_path<MachProcess::binary_image_information const&>((void **)&v41, (uint64_t)v26);
    }
    else
    {
      if (v26[23] < 0)
      {
        std::string::__init_copy_ctor_external(v42, *(const std::string::value_type **)v26, *((_QWORD *)v26 + 1));
      }
      else
      {
        v29 = *(_OWORD *)v26;
        v42->__r_.__value_.__r.__words[2] = *((_QWORD *)v26 + 2);
        *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
      }
      v28[1].__r_.__value_.__r.__words[0] = *((_QWORD *)v26 + 3);
      MachProcess::mach_o_information::mach_o_information((uint64_t)&v28[1].__r_.__value_.__l.__size_, (uint64_t)(v26 + 32));
      v28[6].__r_.__value_.__s.__data_[8] = v26[152];
      v30 = (std::string *)((char *)v28 + 160);
    }
    v42 = v30;
    v24 = v27 + 1;
    v25 = 1;
    if (v22 - 1 == v27)
      goto LABEL_30;
  }
}

void sub_10003B554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  std::vector<MachProcess::binary_image_information>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void MachProcess::GetSharedCacheInfo(MachProcess *this)
{
  operator new();
}

void sub_10003B8D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,char a42)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<MachThread>::~shared_ptr[abi:ne180100]((uint64_t)&a42);
  _Unwind_Resume(a1);
}

uint64_t MachProcess::GetCurrentThread(MachProcess *this)
{
  return MachThreadList::CurrentThreadID((MachProcess *)((char *)this + 968));
}

uint64_t MachProcess::SetCurrentThread(MachProcess *this, uint64_t a2)
{
  return MachThreadList::SetCurrentThread((MachProcess *)((char *)this + 968), a2);
}

uint64_t MachProcess::GetThreadStoppedReason(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t ThreadStoppedReason;

  ThreadStoppedReason = MachThreadList::GetThreadStoppedReason(a1 + 968, a2, (uint64_t)a3);
  if ((_DWORD)ThreadStoppedReason)
  {
    if (*(_BYTE *)(a1 + 1752))
    {
      *a3 = 3;
    }
    else if (*a3 == 4)
    {
      MachProcess::RefineWatchpointStopInfo(a1, a2, (uint64_t)a3);
    }
  }
  return ThreadStoppedReason;
}

void MachProcess::RefineWatchpointStopInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  DNBBreakpointList *v5;
  char *NearestWatchpoint;
  char *v7;
  unint64_t *v8;
  uint64_t RegisterSetInfo;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  const char *v25;
  int RegisterValue;
  unint64_t v27;
  int v28;
  unint64_t v29;
  uint64x2_t v30;
  int16x8_t v31;
  BOOL v32;
  int v33;
  char *v34;
  DNBBreakpointList *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t v44;
  unint64_t v45;

  v5 = (DNBBreakpointList *)(a1 + 1664);
  NearestWatchpoint = DNBBreakpointList::FindNearestWatchpoint((DNBBreakpointList *)(a1 + 1664), *(_QWORD *)(a3 + 264));
  if (NearestWatchpoint)
  {
    v7 = NearestWatchpoint;
    *(_QWORD *)(a3 + 272) = *((_QWORD *)NearestWatchpoint + 2);
    *(_DWORD *)(a3 + 280) = *((_DWORD *)NearestWatchpoint + 7);
    if (DNBLogEnabledForAny(2048))
      _DNBLogThreaded("MachProcess::RefineWatchpointStopInfo mach exception addr 0x%llx moved in to nearest watchpoint, 0x%llx-0x%llx", *(_QWORD *)(a3 + 264), *((_QWORD *)v7 + 2), *((_QWORD *)v7 + 2) + *((unsigned int *)v7 + 1) - 1);
  }
  else
  {
    *(_QWORD *)(a3 + 272) = *(_QWORD *)(a3 + 264);
  }
  *(_BYTE *)(a3 + 284) = 0;
  v45 = 0;
  v39 = a1 + 968;
  MachThreadList::GetThreadByID((MachThreadList *)(a1 + 968), a2, &v42);
  if (v42 && *(_QWORD *)(v42 + 184))
  {
    RegisterSetInfo = DNBArchProtocol::GetRegisterSetInfo((DNBArchProtocol *)&v45, v8);
  }
  else
  {
    RegisterSetInfo = 0;
    v45 = 0;
  }
  v35 = v5;
  v10 = v43;
  if (v43)
  {
    p_shared_owners = (unint64_t *)&v43->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v45;
  if (v45)
  {
    v36 = a3;
    v37 = RegisterSetInfo;
    v14 = 0;
    v15 = 0;
    v40 = 0;
    v16 = 0;
    v38 = 0;
    do
    {
      v17 = RegisterSetInfo + 24 * v14;
      v19 = *(_QWORD *)(v17 + 8);
      v18 = (_QWORD *)(v17 + 8);
      if (v19)
      {
        v20 = RegisterSetInfo + 24 * v14;
        v22 = *(_QWORD *)(v20 + 16);
        v21 = (unint64_t *)(v20 + 16);
        if (v22)
        {
          v23 = 0;
          v24 = 1;
          do
          {
            v25 = *(const char **)(*v18 + 72 * v23 + 8);
            if (!strcmp(v25, "esr"))
            {
              RegisterValue = MachThreadList::GetRegisterValue(v39, a2);
              v27 = v40;
              if (RegisterValue)
                v27 = v44;
              v40 = v27;
              if (RegisterValue)
                v15 = 1;
              v25 = *(const char **)(*v18 + 72 * v23 + 8);
            }
            if (!strcmp(v25, "far"))
            {
              v28 = MachThreadList::GetRegisterValue(v39, a2);
              v29 = v38;
              if (v28)
                v29 = v44;
              v38 = v29;
              if (v28)
                v16 = 1;
            }
            v23 = v24++;
          }
          while (*v21 > v23);
          v13 = v45;
          RegisterSetInfo = v37;
        }
      }
      ++v14;
    }
    while (v14 < v13);
    if (v15 && v16)
    {
      if (v38 != *(_QWORD *)(v36 + 264) && DNBLogEnabledForAny(2048))
        _DNBLogThreaded("MachProcess::RefineWatchpointStopInfo mach exception addr 0x%llx but FAR register has value 0x%llx", *(_QWORD *)(v36 + 264), v38);
      if ((v40 & 0xFC000000) == 0xD0000000)
      {
        *(_BYTE *)(v36 + 284) = 1;
        *(_DWORD *)(v36 + 288) = v40 & 0xFFFFFF;
        *(_DWORD *)(v36 + 292) = (v40 >> 18) & 0x3F;
        v30 = (uint64x2_t)vdupq_n_s64(v40);
        v31 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v30, (uint64x2_t)xmmword_100051FC0), (int32x4_t)vshlq_u64(v30, (uint64x2_t)xmmword_100051FB0));
        *(int8x8_t *)v31.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v31), (int8x8_t)0x1000100010001);
        *(_DWORD *)(v36 + 296) = vmovn_s16(v31).u32[0];
        *(_BYTE *)(v36 + 300) = (v40 & 0x400) != 0;
        v32 = (v40 & 0x40) != 0;
        *(_BYTE *)(v36 + 301) = v32;
        *(_BYTE *)(v36 + 302) = v32;
        *(_DWORD *)(v36 + 304) = v40 & 0x3F;
        if (DNBLogEnabledForAny(2048))
          _DNBLogThreaded("ESR watchpoint fields parsed: iss = 0x%x, wpt = %u, wptv = %d, wpf = %d, fnp = %d, vncr = %d, fnv = %d, cm = %d, wnr = %d, dfsc = 0x%x", *(_DWORD *)(v36 + 288), *(_DWORD *)(v36 + 292), *(unsigned __int8 *)(v36 + 296), *(unsigned __int8 *)(v36 + 297), *(unsigned __int8 *)(v36 + 298), *(unsigned __int8 *)(v36 + 299), *(unsigned __int8 *)(v36 + 300), *(unsigned __int8 *)(v36 + 301), *(unsigned __int8 *)(v36 + 302), *(_DWORD *)(v36 + 304));
        if (*(_BYTE *)(v36 + 296))
        {
          if (DNBLogEnabledForAny(2048))
            _DNBLogThreaded("Watchpoint Valid field true, finding startaddr of watchpoint %d", *(_DWORD *)(v36 + 292));
          v33 = *(_DWORD *)(v36 + 292);
          *(_DWORD *)(v36 + 280) = v33;
          v34 = DNBBreakpointList::FindByHardwareIndex(v35, v33);
          if (v34)
            *(_QWORD *)(v36 + 272) = *((_QWORD *)v34 + 2);
        }
      }
    }
  }
}

void sub_10003BDA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  std::shared_ptr<MachThread>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  _Unwind_Resume(a1);
}

char *MachProcess::GetThreadInfo(MachProcess *this, uint64_t a2)
{
  return MachThreadList::GetThreadInfo((MachProcess *)((char *)this + 968), a2);
}

uint64_t MachProcess::GetCPUType(MachProcess *this)
{
  uint64_t result;
  int v3;
  size_t v4;
  size_t v5;
  unsigned int v6;
  size_t v7;
  int v8[4];
  __int128 v9;
  __int128 v10;

  result = *((unsigned int *)this + 1);
  if (!(_DWORD)result)
  {
    v3 = *(_DWORD *)this;
    if (*(_DWORD *)this)
    {
      v9 = 0u;
      v10 = 0u;
      *(_OWORD *)v8 = 0u;
      v7 = 12;
      if (sysctlnametomib("sysctl.proc_cputype", v8, &v7))
      {
        result = 0;
      }
      else
      {
        v4 = v7;
        v8[v7] = v3;
        v7 = v4 + 1;
        v6 = 0;
        v5 = 4;
        if (sysctl(v8, v4 + 1, &v6, &v5, 0, 0))
          result = 0;
        else
          result = v6;
      }
      *((_DWORD *)this + 1) = result;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t MachProcess::GetRegisterValue(uint64_t a1, uint64_t a2)
{
  return MachThreadList::GetRegisterValue(a1 + 968, a2);
}

uint64_t MachProcess::SetRegisterValue(uint64_t a1, uint64_t a2)
{
  return MachThreadList::SetRegisterValue(a1 + 968, a2);
}

uint64_t MachProcess::SetState(uint64_t a1, unsigned int a2)
{
  pthread_mutex_t *v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  PThreadEvent *v8;
  pthread_mutex_t *v9;
  int v10;
  const char *v11;
  const char *v12;

  v4 = (pthread_mutex_t *)(a1 + 1224);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 1224));
  v5 = *(_DWORD *)(a1 + 1216);
  if (v5 == 9)
  {
    if (DNBLogEnabledForAny(2))
    {
      DNBStateAsString(a2);
      _DNBLogThreaded("MachProcess::SetState(%s) ignoring new state since current state is exited");
    }
LABEL_7:
    v6 = 0;
    goto LABEL_8;
  }
  if (v5 == a2)
  {
    if (DNBLogEnabledForAny(2))
    {
      DNBStateAsString(a2);
      _DNBLogThreaded("MachProcess::SetState(%s) ignoring redundant state change...");
    }
    goto LABEL_7;
  }
  if (a2 - 1 > 8)
    v6 = 1;
  else
    v6 = dword_100051F38[a2 - 1];
  if (DNBLogEnabledForAny(2))
  {
    v11 = DNBStateAsString(a2);
    v12 = DNBStateAsString(v5);
    _DNBLogThreaded("MachProcess::SetState(%s) upating state (previous state was %s), event_mask = 0x%8.8x", v11, v12, v6);
  }
  *(_DWORD *)(a1 + 1216) = a2;
  if (a2 == 4)
    ++*(_DWORD *)(a1 + 444);
LABEL_8:
  result = pthread_mutex_unlock(v4);
  if (v6)
  {
    v8 = (PThreadEvent *)(a1 + 1288);
    PThreadEvent::SetEvents((pthread_mutex_t *)(a1 + 1288), v6);
    v9 = (pthread_mutex_t *)(a1 + 1464);
    PThreadEvent::SetEvents(v9, v6);
    if (v6 == 2)
      v10 = 1;
    else
      v10 = 2;
    PThreadEvent::ResetEvents(v9, v10);
    return PThreadEvent::WaitForResetAck(v8, v6, 0);
  }
  return result;
}

void sub_10003C038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  PThreadMutex::Locker::~Locker((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

uint64_t MachProcess::STDIOThread(MachProcess *this, void *a2)
{
  int v3;
  int v4;
  BOOL v5;
  BOOL v6;
  int v7;
  int v8;
  std::string::size_type v9;
  std::string::size_type v10;
  unsigned int v11;
  int v12;
  char *v13;
  std::string::size_type v14;
  std::string::size_type v15;
  int v16;
  char *v17;
  fd_set v19;
  void *__p[2];
  __int128 v21;
  char v22[1024];

  if (DNBLogEnabledForAny(2))
    _DNBLogThreaded("MachProcess::%s(arg = %p) thread starting...", "STDIOThread", this);
  pthread_setname_np("stdio monitoring thread");
  *(_OWORD *)__p = 0u;
  v21 = 0u;
  v3 = *((_DWORD *)this + 4);
  if (v3 == *((_DWORD *)this + 5))
    v4 = -1;
  else
    v4 = *((_DWORD *)this + 5);
  v5 = v3 >= 0;
  v6 = v4 >= 0;
  while ((v3 & 0x80000000) == 0 || (v4 & 0x80000000) == 0)
  {
    pthread_testcancel();
    memset(&v19, 0, sizeof(v19));
    if (v5 && __darwin_check_fd_set_overflow(v3, &v19, 0))
      v19.fds_bits[v3 >> 5] |= 1 << v3;
    if (v6 && __darwin_check_fd_set_overflow(v4, &v19, 0))
      v19.fds_bits[v4 >> 5] |= 1 << v4;
    if (v3 <= v4)
      v7 = v4;
    else
      v7 = v3;
    v8 = select(v7 + 1, &v19, 0, 0, 0);
    if (DNBLogEnabledForAny(2))
      _DNBLogThreaded("select (nfds, &read_fds, NULL, NULL, NULL) => %d", v8);
    if (v8 < 0)
    {
      v11 = *__error();
      if (DNBLogCheckLogBit(2))
      {
        __p[0] = (void *)(v11 | 0x200000000);
        if (SHIBYTE(v21) < 0)
        {
          *(_BYTE *)__p[1] = 0;
          *(_QWORD *)&v21 = 0;
        }
        else
        {
          LOBYTE(__p[1]) = 0;
          HIBYTE(v21) = 0;
        }
        DNBError::LogThreadedIfError((DNBError *)__p, "select (nfds, &read_fds, NULL, NULL, NULL) => %d", v8);
      }
      if (v11 == 9)
        goto LABEL_55;
    }
    else if (v8)
    {
      v22[1023] = 0;
      if (v5
        && __darwin_check_fd_set_overflow(v3, &v19, 0)
        && ((v19.fds_bits[v3 >> 5] >> v3) & 1) != 0)
      {
        while (1)
        {
          v9 = read(v3, v22, 0x3FFuLL);
          v10 = v9;
          if ((v9 & 0x8000000000000000) != 0)
          {
            v12 = *__error();
            if (DNBLogEnabledForAny(2))
            {
              v13 = strerror(v12);
              _DNBLogThreaded("read (stdout_fd,) => %zd   errno: %d (%s)", v10, v12, v13);
            }
            goto LABEL_36;
          }
          if (!v9)
            break;
          MachProcess::AppendSTDOUT(this, v22, v9);
        }
        if (DNBLogEnabledForAny(2))
          _DNBLogThreaded("read (stdout_fd,) => %zd  (reached EOF for child STDOUT)", 0);
        v3 = -1;
        if (v6)
          goto LABEL_37;
      }
      else
      {
LABEL_36:
        if (v6)
        {
LABEL_37:
          if (__darwin_check_fd_set_overflow(v4, &v19, 0)
            && ((v19.fds_bits[v4 >> 5] >> v4) & 1) != 0)
          {
            while (1)
            {
              v14 = read(v4, v22, 0x3FFuLL);
              v15 = v14;
              if ((v14 & 0x8000000000000000) != 0)
                break;
              if (!v14)
              {
                if (DNBLogEnabledForAny(2))
                  _DNBLogThreaded("read (stderr_fd,) => %zd  (reached EOF for child STDERR)", 0);
                v4 = -1;
                goto LABEL_51;
              }
              MachProcess::AppendSTDOUT(this, v22, v14);
            }
            v16 = *__error();
            if (DNBLogEnabledForAny(2))
            {
              v17 = strerror(v16);
              _DNBLogThreaded("read (stderr_fd,) => %zd   errno: %d (%s)", v15, v16, v17);
            }
          }
        }
      }
    }
LABEL_51:
    v5 = v3 >= 0;
    v6 = v4 >= 0;
  }
  if (DNBLogEnabledForAny(2))
    _DNBLogThreaded("MachProcess::%s (%p): thread exiting...", "STDIOThread", this);
LABEL_55:
  if (SHIBYTE(v21) < 0)
    operator delete(__p[1]);
  return 0;
}

void sub_10003C3F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

pthread_mutex_t *MachProcess::SetEnableAsyncProfiling(pthread_mutex_t *result, int a2, int a3, int a4)
{
  pthread_mutex_t *v4;
  uint64_t v5;

  v4 = result;
  result[8].__opaque[24] = a2;
  *(_DWORD *)&result[8].__opaque[28] = a3;
  *(_DWORD *)&result[8].__opaque[32] = a4;
  v5 = *(_QWORD *)&result[8].__opaque[40];
  if (a2)
  {
    if (!v5)
    {
      if (DNBLogEnabledForAny(2))
        _DNBLogThreaded("MachProcess::%s()", "StartProfileThread");
      return (pthread_mutex_t *)pthread_create((pthread_t *)&v4[8].__opaque[40], 0, (void *(__cdecl *)(void *))MachProcess::ProfileThread, v4);
    }
  }
  else if (v5)
  {
    PThreadEvent::SetEvents((pthread_mutex_t *)((char *)result + 656), 1);
    pthread_join(*(pthread_t *)&v4[8].__opaque[40], 0);
    *(_QWORD *)&v4[8].__opaque[40] = 0;
    return PThreadEvent::ResetEvents((pthread_mutex_t *)((char *)v4 + 656), 1);
  }
  return result;
}

uint64_t MachProcess::ProfileThread(MachProcess *this, void *a2)
{
  int v3;
  task_basic_info *v4;
  const char *tv_sec;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  timespec v11;
  timeval __p;
  char v13;

  if (DNBLogEnabledForAny(2))
    _DNBLogThreaded("MachProcess::%s(arg = %p) thread starting...", "ProfileThread", this);
  pthread_setname_np("performance profiling thread");
  while (*((_BYTE *)this + 544))
  {
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 1224));
    v3 = *((_DWORD *)this + 304);
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 1224));
    if (v3 != 5)
    {
      if (v3 == 1 || v3 == 8)
        return 0;
      goto LABEL_17;
    }
    MachTask::GetProfileData((uint64_t)this + 104, *((_DWORD *)this + 138), v4, &__p);
    if (v13 < 0)
    {
      if (!*(_QWORD *)&__p.tv_usec)
        goto LABEL_16;
      tv_sec = (const char *)__p.tv_sec;
    }
    else
    {
      if (!v13)
        goto LABEL_17;
      tv_sec = (const char *)&__p;
    }
    MachProcess::SignalAsyncProfileData(this, tv_sec);
    if (v13 < 0)
LABEL_16:
      operator delete((void *)__p.tv_sec);
LABEL_17:
    v6 = *((_DWORD *)this + 137);
    v7 = v6 / 0xF4240;
    v8 = v6 % 0xF4240;
    gettimeofday(&__p, 0);
    v11.tv_sec = __p.tv_sec;
    v11.tv_nsec = 1000 * __p.tv_usec;
    if (v8 | v7)
    {
      v9 = 1000 * __p.tv_usec + v8;
      v11.tv_sec = __p.tv_sec + v7 + v9 / 1000000000;
      v11.tv_nsec = v9 % 1000000000;
    }
    if ((PThreadEvent::WaitForSetEvents((pthread_mutex_t *)((char *)this + 656), 1u, &v11) & 1) != 0)
      return 0;
  }
  return 0;
}

void sub_10003C678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL MachProcess::Resume(MachProcess *this, char **a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (DNBLogEnabledForAny(2))
    _DNBLogThreaded("MachProcess::Resume ()");
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 1224));
  v4 = *((_DWORD *)this + 304);
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 1224));
  if (v4 == 5)
  {
    if (DNBLogEnabled())
      _DNBLog(0, (uint64_t)"Resume() - task 0x%x is already running, ignoring...", v5, v6, v7, v8, v9, v10, *((unsigned int *)this + 30));
    return 1;
  }
  if (v4 == 4)
  {
    if ((char **)((char *)this + 832) != a2)
      std::vector<DNBThreadResumeAction>::__assign_with_size[abi:ne180100]<DNBThreadResumeAction*,DNBThreadResumeAction*>((_QWORD *)this + 104, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
    std::vector<BOOL>::operator=((uint64_t)this + 856, (uint64_t)(a2 + 3));
    MachProcess::PrivateResume(this);
    return 1;
  }
  result = DNBLogEnabled();
  if (result)
  {
    v12 = *((unsigned int *)this + 30);
    DNBStateAsString(v4);
    _DNBLog(0, (uint64_t)"Resume() - task 0x%x has state %s, can't continue...", v13, v14, v15, v16, v17, v18, v12);
    return 0;
  }
  return result;
}

uint64_t MachProcess::PrivateResume(MachProcess *this)
{
  pthread_mutex_t *v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  task_basic_info *v6;

  v2 = (pthread_mutex_t *)((char *)this + 904);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 904));
  v3 = *((_DWORD *)this + 436);
  *((_DWORD *)this + 437) = v3;
  if (v3)
  {
    if (DNBLogEnabledForAny(2))
      _DNBLogThreaded("MachProcess::PrivateResume() - task 0x%x resuming (with unhandled interrupt signal %i)...", *((_DWORD *)this + 30), *((_DWORD *)this + 437));
  }
  else if (DNBLogEnabledForAny(2))
  {
    _DNBLogThreaded("MachProcess::PrivateResume() - task 0x%x resuming...", *((_DWORD *)this + 30));
  }
  MachProcess::ReplyToAllExceptions(this);
  MachThreadList::ProcessWillResume((MachProcess *)((char *)this + 968), this, (MachProcess *)((char *)this + 832));
  if (DNBThreadResumeActions::NumActionsWithState((uint64_t *)this + 104, 6))
    v4 = 6;
  else
    v4 = 5;
  MachProcess::SetState((uint64_t)this, v4);
  MachTask::Resume((MachProcess *)((char *)this + 104), v5, v6);
  return pthread_mutex_unlock(v2);
}

void sub_10003C880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  PThreadMutex::Locker::~Locker((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

uint64_t MachProcess::Kill(MachProcess *this, const timespec *a2)
{
  unsigned int v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  int v12;
  int v13;
  int v14;
  const char *v15;
  void *v16;
  void *v17;
  unsigned int v18;
  pthread_mutex_t *v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *__p[2];
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  void *v34[2];
  __int128 v35;

  if (DNBLogEnabledForAny(2))
    _DNBLogThreaded("MachProcess::Kill ()");
  v3 = MachProcess::DoSIGSTOP(this, 1, 0, 0);
  if (DNBLogEnabledForAny(2))
  {
    v4 = DNBStateAsString(v3);
    _DNBLogThreaded("MachProcess::Kill() DoSIGSTOP() state = %s", v4);
  }
  *__error() = 0;
  if (DNBLogEnabled())
    _DNBLog(0, (uint64_t)"Sending ptrace PT_KILL to terminate inferior process pid %d.", v5, v6, v7, v8, v9, v10, *(unsigned int *)this);
  ptrace(8, *(_DWORD *)this, 0, 0);
  *(_OWORD *)v34 = 0u;
  v35 = 0u;
  LODWORD(v34[0]) = *__error();
  HIDWORD(v34[0]) = 2;
  LOBYTE(v34[1]) = 0;
  HIBYTE(v35) = 0;
  v11 = DNBLogCheckLogBit(2);
  v12 = (int)v34[0];
  if (LODWORD(v34[0]))
    v13 = 1;
  else
    v13 = v11;
  if (v13 == 1)
  {
    v14 = *(_DWORD *)this;
    v15 = (const char *)DNBError::AsString((DNBError *)v34);
    DNBError::LogThreaded((DNBError *)v34, "MachProcess::Kill() DoSIGSTOP() ::ptrace (PT_KILL, pid=%u, 0, 0) => 0x%8.8x (%s)", v14, v12, v15);
  }
  DNBThreadResumeActions::DNBThreadResumeActions((uint64_t)__p, 5, 0);
  v16 = (void *)*((_QWORD *)this + 104);
  if (v16)
  {
    *((_QWORD *)this + 105) = v16;
    operator delete(v16);
    *((_QWORD *)this + 104) = 0;
    *((_QWORD *)this + 105) = 0;
    *((_QWORD *)this + 106) = 0;
  }
  *((_OWORD *)this + 52) = *(_OWORD *)__p;
  *((_QWORD *)this + 106) = v31;
  __p[1] = 0;
  v31 = 0;
  __p[0] = 0;
  v17 = (void *)*((_QWORD *)this + 107);
  if (v17)
  {
    operator delete(v17);
    *((_QWORD *)this + 107) = 0;
    *((_QWORD *)this + 108) = 0;
    *((_QWORD *)this + 109) = 0;
    v17 = __p[0];
  }
  *((_QWORD *)this + 107) = v32;
  *((_OWORD *)this + 54) = v33;
  v33 = 0uLL;
  v32 = 0;
  if (v17)
  {
    __p[1] = v17;
    operator delete(v17);
  }
  MachProcess::PrivateResume(this);
  v18 = 0;
  v19 = (pthread_mutex_t *)((char *)this + 1224);
  while (1)
  {
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 1224));
    v20 = *((_DWORD *)this + 304);
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 1224));
    if (v20 == 9)
      break;
    usleep(0x2710u);
    v21 = v18 >= 0xF1B30;
    v18 += 10000;
    if (v21)
    {
      v18 = 1000000;
      break;
    }
  }
  if (DNBLogEnabled())
  {
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 1224));
    v22 = *((_DWORD *)this + 304);
    pthread_mutex_unlock(v19);
    DNBStateAsString(v22);
    _DNBLog(0, (uint64_t)"Waited %u ms for process to be reaped (state = %s)", v23, v24, v25, v26, v27, v28, v18 / 0x3E8uLL);
  }
  if (SHIBYTE(v35) < 0)
    operator delete(v34[1]);
  return 1;
}

void sub_10003CB0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MachProcess::DoSIGSTOP(MachProcess *this, int a2, int a3, unsigned int *a4)
{
  pthread_mutex_t *v8;
  unsigned int v9;
  const char *v10;
  unsigned int ThreadIndexForThreadStoppedWithSignal;
  uint64_t v12;
  const char *v13;
  int v14;
  void *v15;
  void *v16;
  const char *v17;
  unsigned int v18;
  timespec v20;
  void *__p[2];
  uint64_t v22;
  uint64_t v23;
  __int128 v24;

  v8 = (pthread_mutex_t *)((char *)this + 1224);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 1224));
  v9 = *((_DWORD *)this + 304);
  pthread_mutex_unlock(v8);
  if (DNBLogEnabledForAny(2))
  {
    v10 = DNBStateAsString(v9);
    _DNBLogThreaded("MachProcess::DoSIGSTOP() state = %s", v10);
  }
  if (v9 - 5 >= 2)
  {
    if (a2)
    {
      if (DNBLogEnabledForAny(512))
        _DNBLogThreaded("MachProcess::%s (remove = %d)", "DisableAllBreakpoints", 1);
      DNBBreakpointList::DisableAllBreakpoints((uint64_t)this + 1640, this);
      DNBBreakpointList::RemoveDisabled((MachProcess *)((char *)this + 1640));
      if (DNBLogEnabledForAny(2048))
        _DNBLogThreaded("MachProcess::%s (remove = %d)", "DisableAllWatchpoints", 1);
      DNBBreakpointList::DisableAllWatchpoints((uint64_t)this + 1664, this);
      DNBBreakpointList::RemoveDisabled((MachProcess *)((char *)this + 1664));
    }
    ThreadIndexForThreadStoppedWithSignal = MachThreadList::GetThreadIndexForThreadStoppedWithSignal((MachProcess *)((char *)this + 968), 17);
    if (a4)
      *a4 = ThreadIndexForThreadStoppedWithSignal;
    if (ThreadIndexForThreadStoppedWithSignal != -1)
    {
      pthread_mutex_lock(v8);
      v12 = *((unsigned int *)this + 304);
      pthread_mutex_unlock(v8);
      return v12;
    }
    if (DNBLogEnabledForAny(2))
    {
      v13 = DNBStateAsString(v9);
      _DNBLogThreaded("MachProcess::DoSIGSTOP() state = %s -- resuming process", v13);
    }
    if (a3)
      v14 = 5;
    else
      v14 = 10;
    DNBThreadResumeActions::DNBThreadResumeActions((uint64_t)__p, v14, 0);
    v15 = (void *)*((_QWORD *)this + 104);
    if (v15)
    {
      *((_QWORD *)this + 105) = v15;
      operator delete(v15);
    }
    *((_OWORD *)this + 52) = *(_OWORD *)__p;
    *((_QWORD *)this + 106) = v22;
    __p[1] = 0;
    v22 = 0;
    __p[0] = 0;
    v16 = (void *)*((_QWORD *)this + 107);
    if (v16)
    {
      operator delete(v16);
      v16 = __p[0];
    }
    *((_QWORD *)this + 107) = v23;
    *((_OWORD *)this + 54) = v24;
    v24 = 0uLL;
    v23 = 0;
    if (v16)
    {
      __p[1] = v16;
      operator delete(v16);
    }
    MachProcess::PrivateResume(this);
    PThreadEvent::ResetEvents((pthread_mutex_t *)((char *)this + 1288), 1);
    pthread_mutex_lock(v8);
    v9 = *((_DWORD *)this + 304);
    pthread_mutex_unlock(v8);
    a2 = 0;
  }
  if (DNBLogEnabledForAny(2))
  {
    v17 = DNBStateAsString(v9);
    _DNBLogThreaded("MachProcess::DoSIGSTOP() state = %s -- sending SIGSTOP", v17);
  }
  gettimeofday((timeval *)__p, 0);
  v20.tv_sec = (__darwin_time_t)__p[0] + SLODWORD(__p[1]) / 1000000 + 2;
  v20.tv_nsec = 1000 * LODWORD(__p[1]) % 1000000000;
  MachProcess::Signal(this, 17, &v20);
  if (a2)
  {
    if (DNBLogEnabledForAny(512))
      _DNBLogThreaded("MachProcess::%s (remove = %d)", "DisableAllBreakpoints", 1);
    DNBBreakpointList::DisableAllBreakpoints((uint64_t)this + 1640, this);
    DNBBreakpointList::RemoveDisabled((MachProcess *)((char *)this + 1640));
    if (DNBLogEnabledForAny(2048))
      _DNBLogThreaded("MachProcess::%s (remove = %d)", "DisableAllWatchpoints", 1);
    DNBBreakpointList::DisableAllWatchpoints((uint64_t)this + 1664, this);
    DNBBreakpointList::RemoveDisabled((MachProcess *)((char *)this + 1664));
  }
  v18 = MachThreadList::GetThreadIndexForThreadStoppedWithSignal((MachProcess *)((char *)this + 968), 17);
  if (a4)
    *a4 = v18;
  pthread_mutex_lock(v8);
  v12 = *((unsigned int *)this + 304);
  pthread_mutex_unlock(v8);
  return v12;
}

BOOL MachProcess::Interrupt(MachProcess *this)
{
  pthread_mutex_t *v2;
  int v3;
  _BOOL8 result;
  _BOOL4 v5;

  v2 = (pthread_mutex_t *)((char *)this + 1224);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 1224));
  v3 = *((_DWORD *)this + 304);
  pthread_mutex_unlock(v2);
  if ((v3 - 5) > 1)
  {
    result = DNBLogEnabledForAny(2);
    if (!result)
      return result;
    _DNBLogThreaded("MachProcess::Interrupt() - process already stopped, no interrupt sent");
    return 0;
  }
  if (*((_DWORD *)this + 436))
  {
    result = DNBLogEnabledForAny(2);
    if (!result)
      return result;
    _DNBLogThreaded("MachProcess::Interrupt() - previously sent an interrupt signal %i that hasn't been received yet, interrupt aborted");
    return 0;
  }
  *((_DWORD *)this + 436) = 17;
  if (MachProcess::Signal(this, 17, 0))
  {
    if (DNBLogEnabledForAny(2))
      _DNBLogThreaded("MachProcess::Interrupt() - sent %i signal to interrupt process", *((_DWORD *)this + 436));
    return 1;
  }
  else
  {
    *((_DWORD *)this + 436) = 0;
    v5 = DNBLogEnabledForAny(2);
    result = 0;
    if (v5)
    {
      _DNBLogThreaded("MachProcess::Interrupt() - failed to send %i signal to interrupt process");
      return 0;
    }
  }
  return result;
}

BOOL MachProcess::Signal(MachProcess *this, int a2, const timespec *a3)
{
  pthread_mutex_t *v6;
  int v7;
  _BOOL4 v9;
  unsigned int v10;
  const char *v11;
  _DWORD v12[2];
  void *__p;
  uint64_t v14;
  uint64_t v15;

  if (DNBLogEnabledForAny(2))
    _DNBLogThreaded("MachProcess::Signal (signal = %d, timeout = %p)", a2, a3);
  v6 = (pthread_mutex_t *)((char *)this + 1224);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 1224));
  v7 = *((_DWORD *)this + 304);
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 1224));
  if (kill(*(_DWORD *)this, a2))
  {
    v12[0] = *__error();
    v12[1] = 2;
    v14 = 0;
    v15 = 0;
    __p = 0;
    DNBError::LogThreadedIfError((DNBError *)v12, "kill (pid = %d, signo = %i)", *(_DWORD *)this, a2);
    if (SHIBYTE(v15) < 0)
      operator delete(__p);
    return 0;
  }
  else
  {
    v9 = DNBLogEnabledForAny(2);
    if (a3 && (v7 - 5) <= 1)
    {
      if (v9)
        _DNBLogThreaded("MachProcess::Signal (signal = %d, timeout = %p) waiting for signal to stop process...", a2, a3);
      PThreadEvent::WaitForSetEvents((pthread_mutex_t *)((char *)this + 1464), 2u, a3);
      pthread_mutex_lock((pthread_mutex_t *)((char *)this + 1224));
      v10 = *((_DWORD *)this + 304);
      pthread_mutex_unlock(v6);
      if (DNBLogEnabledForAny(2))
      {
        v11 = DNBStateAsString(v10);
        _DNBLogThreaded("MachProcess::Signal (signal = %d, timeout = %p) state = %s", a2, a3, v11);
      }
      return v10 - 7 < 0xFFFFFFFE;
    }
    else
    {
      if (v9)
        _DNBLogThreaded("MachProcess::Signal (signal = %d, timeout = %p) not waiting...", a2, a3);
      return 1;
    }
  }
}

void sub_10003D120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL MachProcess::SendEvent(MachProcess *this, char *a2, DNBError *a3)
{
  if (DNBLogEnabledForAny(2))
    _DNBLogThreaded("MachProcess::SendEvent (event = %s) to pid: %d", a2, *(_DWORD *)this);
  return *(_DWORD *)this && MachProcess::BoardServiceSendEvent(this, a2, a3);
}

BOOL MachProcess::BoardServiceSendEvent(MachProcess *this, char *a2, DNBError *a3)
{
  id v6;
  _QWORD *v7;
  _BOOL8 v8;
  int v9;
  uint64_t v10;
  int v11;
  NSString *v12;
  NSMutableDictionary *v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  char v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  unsigned int v27;

  if (!a2 || !*a2)
  {
    if (DNBLogEnabled())
      _DNBLogError("SendEvent called with NULL event data.");
    std::string::assign((std::string *)((char *)a3 + 8), "SendEvent called with empty event data");
    return 0;
  }
  v6 = objc_alloc_init((Class)NSAutoreleasePool);
  if (!strcmp(a2, "BackgroundApplication"))
  {
    v9 = *((_DWORD *)this + 110);
    if ((v9 & 0x10) == 0)
    {
      v10 = *(unsigned int *)this;
      if ((_DWORD)v10)
      {
        if (objc_msgSend(objc_alloc_init((Class)BKSApplicationStateMonitor), "mostElevatedApplicationStateForPID:", v10))
        {
          v11 = *((_DWORD *)this + 110) | 8;
        }
        else
        {
          v17 = objc_msgSend(objc_alloc_init((Class)BKSApplicationStateMonitor), "mostElevatedApplicationStateForPID:", *(unsigned int *)this);
          v11 = *((_DWORD *)this + 110);
          if (v17)
            v11 |= 4u;
        }
        v9 = v11 | 0x10;
        *((_DWORD *)this + 110) = v9;
      }
    }
    if ((v9 & 4) != 0)
    {
      v18 = CallBoardSystemServiceOpenApplication<BKSSystemService,BKSOpenApplicationErrorCode,(BKSOpenApplicationErrorCode)0,&(SetBKSError(long,std::string,DNBError &))>(0, 0, (uint64_t)a3, 0);
      v9 = *((_DWORD *)this + 110);
      if ((v9 & 0x10) != 0)
      {
LABEL_48:
        if ((v9 & 8) != 0)
          v18 = CallBoardSystemServiceOpenApplication<FBSSystemService,FBSOpenApplicationErrorCode,(FBSOpenApplicationErrorCode)0,&(SetFBSError(long,std::string,DNBError &))>(0, 0, (uint64_t)a3, 0);
        v8 = v18 != 0;
        if (v18)
          goto LABEL_65;
        if (DNBLogEnabled())
        {
          DNBError::AsString(a3);
          _DNBLogError("Failed to background application, error: %s.");
        }
        goto LABEL_64;
      }
    }
    else
    {
      v18 = 1;
      if ((v9 & 0x10) != 0)
        goto LABEL_48;
    }
    v19 = *(unsigned int *)this;
    if ((_DWORD)v19)
    {
      if (objc_msgSend(objc_alloc_init((Class)BKSApplicationStateMonitor), "mostElevatedApplicationStateForPID:", v19))
      {
        v20 = *((_DWORD *)this + 110) | 8;
      }
      else
      {
        v26 = objc_msgSend(objc_alloc_init((Class)BKSApplicationStateMonitor), "mostElevatedApplicationStateForPID:", *(unsigned int *)this);
        v20 = *((_DWORD *)this + 110);
        if (v26)
          v20 |= 4u;
      }
      v9 = v20 | 0x10;
      *((_DWORD *)this + 110) = v9;
    }
    goto LABEL_48;
  }
  v7 = (_QWORD *)((char *)this + 1720);
  if (*((char *)this + 1743) < 0)
  {
    if (!*((_QWORD *)this + 216))
      goto LABEL_21;
    v7 = (_QWORD *)*v7;
  }
  else if (!*((_BYTE *)this + 1743))
  {
LABEL_21:
    if (DNBLogEnabled())
      _DNBLogError("Tried to send event \"%s\" to a process that has no bundle ID.", a2);
    return 0;
  }
  v12 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7);
  v13 = (NSMutableDictionary *)+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  v14 = *((_DWORD *)this + 110);
  if ((v14 & 0x10) == 0)
  {
    v15 = *(unsigned int *)this;
    if ((_DWORD)v15)
    {
      if (objc_msgSend(objc_alloc_init((Class)BKSApplicationStateMonitor), "mostElevatedApplicationStateForPID:", v15))
      {
        v16 = *((_DWORD *)this + 110) | 8;
      }
      else
      {
        v21 = objc_msgSend(objc_alloc_init((Class)BKSApplicationStateMonitor), "mostElevatedApplicationStateForPID:", *(unsigned int *)this);
        v16 = *((_DWORD *)this + 110);
        if (v21)
          v16 |= 4u;
      }
      v14 = v16 | 0x10;
      *((_DWORD *)this + 110) = v14;
    }
  }
  if ((v14 & 4) != 0)
  {
    if ((BKSAddEventDataToOptions(v13, a2, a3) & 1) == 0)
      goto LABEL_67;
    v22 = CallBoardSystemServiceOpenApplication<BKSSystemService,BKSOpenApplicationErrorCode,(BKSOpenApplicationErrorCode)0,&(SetBKSError(long,std::string,DNBError &))>(v12, v13, (uint64_t)a3, 0);
    if (DNBLogEnabledForAny(2))
      _DNBLogThreaded("Called BKSCallOpenApplicationFunction to send event.");
  }
  else
  {
    v22 = 1;
  }
  v23 = *((_DWORD *)this + 110);
  if ((v23 & 0x10) == 0)
  {
    v24 = *(unsigned int *)this;
    if ((_DWORD)v24)
    {
      if (objc_msgSend(objc_alloc_init((Class)BKSApplicationStateMonitor), "mostElevatedApplicationStateForPID:", v24))
      {
        v25 = *((_DWORD *)this + 110) | 8;
      }
      else
      {
        v27 = objc_msgSend(objc_alloc_init((Class)BKSApplicationStateMonitor), "mostElevatedApplicationStateForPID:", *(unsigned int *)this);
        v25 = *((_DWORD *)this + 110);
        if (v27)
          v25 |= 4u;
      }
      v23 = v25 | 0x10;
      *((_DWORD *)this + 110) = v23;
    }
  }
  if ((v23 & 8) == 0)
    goto LABEL_57;
  if ((FBSAddEventDataToOptions(v13, a2, a3) & 1) != 0)
  {
    v22 = CallBoardSystemServiceOpenApplication<FBSSystemService,FBSOpenApplicationErrorCode,(FBSOpenApplicationErrorCode)0,&(SetFBSError(long,std::string,DNBError &))>(v12, v13, (uint64_t)a3, 0);
    if (DNBLogEnabledForAny(2))
    {
      _DNBLogThreaded("Called FBSCallOpenApplicationFunction to send event.");
      if ((v22 & 1) != 0)
        goto LABEL_58;
LABEL_62:
      if (DNBLogEnabled())
      {
        DNBError::AsString(a3);
        _DNBLogError("Failed to send event: %s, error: %s.");
      }
LABEL_64:
      v8 = 0;
      goto LABEL_65;
    }
LABEL_57:
    if ((v22 & 1) != 0)
    {
LABEL_58:
      v8 = 1;
LABEL_65:
      objc_msgSend(v6, "drain");
      return v8;
    }
    goto LABEL_62;
  }
LABEL_67:
  objc_msgSend(v6, "drain");
  return 0;
}

void MachProcess::DisableAllBreakpoints(MachProcess *this, int a2)
{
  if (DNBLogEnabledForAny(512))
    _DNBLogThreaded("MachProcess::%s (remove = %d)", "DisableAllBreakpoints", a2);
  DNBBreakpointList::DisableAllBreakpoints((uint64_t)this + 1640, this);
  if (a2)
    DNBBreakpointList::RemoveDisabled((MachProcess *)((char *)this + 1640));
}

void MachProcess::DisableAllWatchpoints(MachProcess *this, int a2)
{
  if (DNBLogEnabledForAny(2048))
    _DNBLogThreaded("MachProcess::%s (remove = %d)", "DisableAllWatchpoints", a2);
  DNBBreakpointList::DisableAllWatchpoints((uint64_t)this + 1664, this);
  if (a2)
    DNBBreakpointList::RemoveDisabled((MachProcess *)((char *)this + 1664));
}

uint64_t MachProcess::Detach(MachProcess *this)
{
  unsigned int v2;
  const char *v3;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  task_basic_info *v8;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unsigned int v14;

  if (DNBLogEnabledForAny(2))
    _DNBLogThreaded("MachProcess::Detach()");
  v14 = -1;
  v2 = MachProcess::DoSIGSTOP(this, 1, 1, &v14);
  if (DNBLogEnabledForAny(2))
  {
    v3 = DNBStateAsString(v2);
    _DNBLogThreaded("MachProcess::Detach() DoSIGSTOP() returned %s", v3);
  }
  *((_QWORD *)this + 105) = *((_QWORD *)this + 104);
  *((_QWORD *)this + 108) = 0;
  Genealogy::Clear((MachProcess *)((char *)this + 1080));
  *(_QWORD *)&v10 = MachThreadList::ThreadIDAtIndex((MachProcess *)((char *)this + 968), v14);
  *((_QWORD *)&v10 + 1) = -4294967291;
  v11 = -1;
  DNBThreadResumeActions::Append((char **)this + 104, &v10);
  DNBThreadResumeActions::SetDefaultThreadActionIfNeeded((char **)this + 104, 5, 0);
  v13 = (char *)this + 904;
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 904));
  MachProcess::ReplyToAllExceptions(this);
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 904));
  MachTask::ShutDownExcecptionThread((MachProcess *)((char *)this + 104));
  *__error() = 0;
  v4 = *(_DWORD *)this;
  v5 = ptrace(11, *(_DWORD *)this, (caddr_t)1, 0);
  v6 = *__error();
  v10 = v6 | 0x200000000uLL;
  v11 = 0;
  v12 = 0;
  if (DNBLogCheckLogBit(2) || v6 | v5)
    DNBError::LogThreaded((DNBError *)&v10, "::ptrace (PT_DETACH, %u, (caddr_t)1, 0)", v4);
  MachTask::Resume((MachProcess *)((char *)this + 104), v7, v8);
  MachTask::Clear((_QWORD *)this + 13);
  *((_DWORD *)this + 2) = 0;
  MachProcess::Clear(this, 1);
  MachProcess::SetState((uint64_t)this, 8u);
  if (SHIBYTE(v12) < 0)
    operator delete(*((void **)&v10 + 1));
  return 1;
}

void sub_10003D85C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  PThreadMutex::Locker::~Locker((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

void sub_10003D870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MachProcess::ReplyToAllExceptions(MachProcess *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ThreadIDByMachPortNumber;
  _QWORD *ActionForThread;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  pthread_mutex_t *v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  char *v18;

  v2 = (pthread_mutex_t *)((char *)this + 904);
  v18 = (char *)this + 904;
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 904));
  v3 = *((_QWORD *)this + 110);
  v4 = *((_QWORD *)this + 111);
  if (v3 != v4)
  {
    v13 = v2;
    v5 = 0;
    do
    {
      if (DNBLogEnabledForAny(8))
        _DNBLogThreaded("Replying to exception %u...", 625320909 * (v5 >> 3));
      ThreadIDByMachPortNumber = MachThreadList::GetThreadIDByMachPortNumber((MachProcess *)((char *)this + 968), *(_DWORD *)(v3 + v5 + 2052));
      if (ThreadIDByMachPortNumber
        && (ActionForThread = DNBThreadResumeActions::GetActionForThread((MachProcess *)((char *)this + 832), ThreadIDByMachPortNumber, 0)) != 0)
      {
        v8 = *((_DWORD *)ActionForThread + 3);
        if (v8)
          DNBThreadResumeActions::SetSignalHandledForThread((uint64_t)this + 832, ThreadIDByMachPortNumber);
      }
      else
      {
        v8 = 0;
      }
      v14 = MachException::Message::Reply((MachException::Message *)(v3 + v5), this, v8);
      v16 = 0;
      v15 = 0uLL;
      v17 = 0;
      if (DNBLogCheckLogBit(8))
        DNBError::LogThreadedIfError((DNBError *)&v14, "Error replying to exception");
      if (SHIBYTE(v17) < 0)
        operator delete(*(void **)((char *)&v15 + 4));
      v5 += 2088;
    }
    while (v3 + v5 != v4);
    v9 = *((_QWORD *)this + 111);
    v10 = *((_QWORD *)this + 110);
    while (v9 != v10)
    {
      v11 = *(void **)(v9 - 24);
      if (v11)
      {
        *(_QWORD *)(v9 - 16) = v11;
        operator delete(v11);
      }
      v9 -= 2088;
    }
    *((_QWORD *)this + 111) = v10;
    v2 = v13;
  }
  return pthread_mutex_unlock(v2);
}

void sub_10003DA34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, pthread_mutex_t *a19)
{
  PThreadMutex::Locker::~Locker(&a19);
  _Unwind_Resume(a1);
}

unint64_t MachProcess::WriteMemory(MachProcess *this, unint64_t a2, unint64_t a3, char *a4)
{
  uint64_t BreakpointsThatOverlapRange;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  int v27;
  const char *v28;
  unint64_t v29;
  MachTask *v30;
  void *__p;
  void *v32;
  uint64_t v33;

  __p = 0;
  v32 = 0;
  v33 = 0;
  BreakpointsThatOverlapRange = DNBBreakpointList::FindBreakpointsThatOverlapRange((_QWORD *)this + 205, a2, a3, (uint64_t)&__p);
  if (!BreakpointsThatOverlapRange)
  {
    v10 = MachTask::WriteMemory((MachProcess *)((char *)this + 104), a2, a3, a4);
    v25 = __p;
    if (__p)
      goto LABEL_29;
    return v10;
  }
  v9 = 0;
  v10 = 0;
  v29 = a3;
  v11 = a3 + a2;
  v30 = (MachProcess *)((char *)this + 104);
  do
  {
    v12 = *((_QWORD *)__p + v9);
    if ((*(_BYTE *)(v12 + 24) & 5) != 1
      || *(_DWORD *)(v12 + 28) != -1
      || (v13 = *(unsigned int *)(v12 + 4), !(_DWORD)v13)
      || ((v14 = *(_QWORD *)(v12 + 16), v15 = v14 + v13, v11 > v14) ? (v16 = v15 > a2) : (v16 = 0), !v16))
    {
      v27 = 1859;
      v28 = "intersects";
      goto LABEL_34;
    }
    if (v11 >= v15)
      v17 = v14 + v13;
    else
      v17 = v11;
    if (v14 <= a2)
      v18 = a2;
    else
      v18 = *(_QWORD *)(v12 + 16);
    v19 = a2 >= v14;
    v20 = a2 - v14;
    if (v19)
      v21 = v20;
    else
      v21 = 0;
    if (v18 >= v11)
    {
      v27 = 1860;
      v28 = "addr <= intersect_addr && intersect_addr < addr + size";
      goto LABEL_34;
    }
    if (v17 <= a2)
    {
      v27 = 1862;
      v28 = "addr < intersect_addr + intersect_size && intersect_addr + intersect_size <= addr + size";
      goto LABEL_34;
    }
    v22 = v17 - v18;
    if (v21 + v17 - v18 > v13)
    {
      v27 = 1863;
      v28 = "opcode_offset + intersect_size <= bp->ByteSize()";
LABEL_34:
      __assert_rtn("WriteMemory", "MachProcess.mm", v27, v28);
    }
    v23 = v18 - (v10 + a2);
    if (v18 > v10 + a2)
    {
      v24 = MachTask::WriteMemory(v30, v10 + a2, v18 - (v10 + a2), &a4[v10]);
      v10 += v24;
      if (v24 != v23)
        break;
    }
    memcpy((void *)(v12 + v21 + 8), &a4[v10], v22);
    v10 += v22;
    ++v9;
  }
  while (BreakpointsThatOverlapRange != v9);
  if (v29 > v10)
    v10 += MachTask::WriteMemory(v30, v10 + a2, v29 - v10, &a4[v10]);
  v25 = __p;
  if (__p)
  {
LABEL_29:
    v32 = v25;
    operator delete(v25);
  }
  return v10;
}

void sub_10003DC68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *MachProcess::CreateBreakpoint(uint64_t **this, unint64_t a2, uint64_t a3, int a4)
{
  char *v8;
  char *v9;
  int v10;

  if (DNBLogEnabledForAny(512))
    _DNBLogThreaded("MachProcess::CreateBreakpoint(addr = 0x%8.8llx, length = %llu, hardware = %i)", a2, a3, a4);
  v8 = DNBBreakpointList::FindByAddress((DNBBreakpointList *)(this + 205), a2);
  if (v8)
  {
    v9 = v8;
    ++*(_DWORD *)v8;
  }
  else
  {
    v9 = DNBBreakpointList::Add(this + 205, a2, a3, a4);
  }
  if (MachProcess::EnableBreakpoint((MachProcess *)this, a2))
  {
    if (DNBLogEnabledForAny(512))
      _DNBLogThreaded("MachProcess::CreateBreakpoint(addr = 0x%8.8llx, length = %llu) => %p", a2, a3, v9);
  }
  else
  {
    if (!*(_DWORD *)v9 || (v10 = *(_DWORD *)v9 - 1, (*(_DWORD *)v9 = v10) == 0))
      DNBBreakpointList::Remove((DNBBreakpointList *)(this + 205), a2);
    return 0;
  }
  return v9;
}

uint64_t MachProcess::EnableBreakpoint(MachProcess *this, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  unint64_t v7;
  char *BreakpointOpcode;
  char *v9;
  char __s2[4];

  if (DNBLogEnabledForAny(512))
    _DNBLogThreaded("MachProcess::EnableBreakpoint(addr = 0x%8.8llx)", a2);
  result = (uint64_t)DNBBreakpointList::FindByAddress((MachProcess *)((char *)this + 1640), a2);
  if (result)
  {
    v5 = result;
    if ((*(_BYTE *)(result + 24) & 1) != 0)
    {
      if (DNBLogEnabled())
        _DNBLogWarning("MachProcess::EnableBreakpoint(addr = 0x%8.8llx): breakpoint already enabled.", a2);
      return 1;
    }
    if ((*(_BYTE *)(result + 24) & 2) != 0)
    {
      v6 = MachThreadList::EnableHardwareBreakpoint((uint64_t)this + 968, result);
      *(_DWORD *)(v5 + 28) = v6;
      if (v6 != -1)
      {
        *(_BYTE *)(v5 + 24) |= 1u;
        return 1;
      }
    }
    v7 = *(unsigned int *)(v5 + 4);
    if (!(_DWORD)v7)
      MachProcess::EnableBreakpoint();
    BreakpointOpcode = (char *)DNBArchProtocol::GetBreakpointOpcode((DNBArchProtocol *)*(unsigned int *)(v5 + 4));
    if (MachTask::ReadMemory((MachProcess *)((char *)this + 104), a2, v7, (char *)(v5 + 8)) != v7)
    {
      result = DNBLogEnabled();
      if (!(_DWORD)result)
        return result;
      _DNBLogError("MachProcess::EnableBreakpoint(addr = 0x%8.8llx): unable to read memory at breakpoint address.");
      return 0;
    }
    if (MachTask::WriteMemory((MachProcess *)((char *)this + 104), a2, v7, BreakpointOpcode) != v7)
    {
      result = DNBLogEnabled();
      if (!(_DWORD)result)
        return result;
      _DNBLogError("MachProcess::EnableBreakpoint(addr = 0x%8.8llx): unable to write breakpoint opcode to memory.");
      return 0;
    }
    if (MachTask::ReadMemory((MachProcess *)((char *)this + 104), a2, v7, __s2) == v7)
    {
      if (!memcmp(BreakpointOpcode, __s2, v7))
      {
        *(_BYTE *)(v5 + 24) |= 1u;
        MachThreadList::NotifyBreakpointChanged((uint64_t)this + 968);
        if (DNBLogEnabledForAny(512))
          _DNBLogThreaded("MachProcess::EnableBreakpoint(addr = 0x%8.8llx) : SUCCESS.", a2);
        return 1;
      }
      if (!DNBLogEnabled())
        return 0;
      v9 = "MachProcess::EnableBreakpoint(addr = 0x%8.8llx): breakpoint opcode verification failed.";
    }
    else
    {
      if (!DNBLogEnabled())
        return 0;
      v9 = "MachProcess::EnableBreakpoint(addr = 0x%8.8llx): unable to read memory to verify breakpoint opcode.";
    }
    _DNBLogError(v9, a2);
    return 0;
  }
  return result;
}

char *MachProcess::CreateWatchpoint(uint64_t **this, unint64_t a2, uint64_t a3, int a4, int a5)
{
  DNBBreakpointList *v10;
  char *v11;
  int v12;
  _BOOL4 v13;

  if (DNBLogEnabledForAny(2048))
    _DNBLogThreaded("MachProcess::CreateWatchpoint(addr = 0x%8.8llx, length = %llu, flags = 0x%8.8x, hardware = %i)", a2, a3, a4, a5);
  v10 = (DNBBreakpointList *)(this + 208);
  if (DNBBreakpointList::FindByAddress((DNBBreakpointList *)(this + 208), a2))
    return 0;
  v11 = DNBBreakpointList::Add(this + 208, a2, a3, a5);
  v11[24] = (8 * (a4 & 3)) | v11[24] & 0xE7 | 4;
  v12 = MachProcess::EnableWatchpoint((MachProcess *)this, a2);
  v13 = DNBLogEnabledForAny(2048);
  if (!v12)
  {
    if (v13)
      _DNBLogThreaded("MachProcess::CreateWatchpoint(addr = 0x%8.8llx, length = %llu) => FAILED", a2, a3);
    DNBBreakpointList::Remove(v10, a2);
    return 0;
  }
  if (v13)
    _DNBLogThreaded("MachProcess::CreateWatchpoint(addr = 0x%8.8llx, length = %llu) => %p", a2, a3, v11);
  return v11;
}

uint64_t MachProcess::EnableWatchpoint(MachProcess *this, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  uint64_t v7;

  if (DNBLogEnabledForAny(2048))
    _DNBLogThreaded("MachProcess::EnableWatchpoint(addr = 0x%8.8llx)", a2);
  result = (uint64_t)DNBBreakpointList::FindByAddress((MachProcess *)((char *)this + 1664), a2);
  if (result)
  {
    v5 = result;
    if ((*(_BYTE *)(result + 24) & 1) != 0)
    {
      v7 = *(_QWORD *)(result + 16);
      if (DNBLogEnabled())
        _DNBLogWarning("MachProcess::EnableWatchpoint(addr = 0x%8.8llx): watchpoint already enabled.", v7);
      return 1;
    }
    v6 = MachThreadList::EnableHardwareWatchpoint((uint64_t)this + 968, result);
    *(_DWORD *)(v5 + 28) = v6;
    if (v6 != -1)
    {
      *(_BYTE *)(v5 + 24) |= 1u;
      return 1;
    }
    return 0;
  }
  return result;
}

BOOL MachProcess::DisableBreakpoint(MachProcess *this, unint64_t a2, int a3)
{
  DNBBreakpointList *v6;
  char *v7;
  uint64_t v8;
  int v9;
  _BOOL8 result;
  int v11;
  char *v12;
  unint64_t v13;
  const void *BreakpointOpcode;
  char v15;
  unint64_t v16;
  int v17;
  _BOOL4 v18;
  int v19;
  uint64_t v20;

  v6 = (MachProcess *)((char *)this + 1640);
  v7 = DNBBreakpointList::FindByAddress((MachProcess *)((char *)this + 1640), a2);
  if (!v7)
  {
    result = DNBLogEnabled();
    if (!result)
      return result;
    _DNBLogError("MachProcess::DisableBreakpoint(addr = 0x%8.8llx, remove = %d) invalid breakpoint address", a2, a3);
    return 0;
  }
  v8 = (uint64_t)v7;
  if ((v7[24] & 1) == 0)
  {
    if (a3)
    {
      if (!*(_DWORD *)v7 || (v9 = *(_DWORD *)v7 - 1, (*(_DWORD *)v7 = v9) == 0))
      {
        MachThreadList::NotifyBreakpointChanged((uint64_t)this + 968);
        DNBBreakpointList::Remove(v6, a2);
        return 1;
      }
    }
    return 1;
  }
  if (a3)
  {
    if (*(_DWORD *)v7)
    {
      v11 = *(_DWORD *)v7 - 1;
      *(_DWORD *)v7 = v11;
      if (v11)
        return 1;
    }
  }
  if (DNBLogEnabledForAny(513))
    _DNBLogThreaded("MachProcess::DisableBreakpoint(addr = 0x%8.8llx, remove = %d)", a2, a3);
  if (*(_DWORD *)(v8 + 28) == -1)
  {
    v13 = *(unsigned int *)(v8 + 4);
    if (!(_DWORD)v13)
      MachProcess::DisableBreakpoint();
    BreakpointOpcode = (const void *)DNBArchProtocol::GetBreakpointOpcode((DNBArchProtocol *)*(unsigned int *)(v8 + 4));
    ((void (*)(void))__chkstk_darwin)();
    if (MachTask::ReadMemory((MachProcess *)((char *)this + 104), a2, v13, (char *)&v20 - ((v13 + 15) & 0x1FFFFFFF0)) != v13)
    {
      if (DNBLogEnabled())
        _DNBLogWarning("MachProcess::DisableBreakpoint: unable to read memory at 0x%8.8llx", a2);
      return 0;
    }
    v15 = *(_BYTE *)(v8 + 24);
    v20 = (uint64_t)&v20;
    if ((v15 & 1) != 0)
    {
      if (!memcmp((char *)&v20 - ((v13 + 15) & 0x1FFFFFFF0), BreakpointOpcode, v13))
      {
        v16 = MachTask::WriteMemory((MachProcess *)((char *)this + 104), a2, v13, (char *)(v8 + 8));
        if (v16 != v13)
        {
          if (DNBLogEnabled())
            _DNBLogError("MachProcess::DisableBreakpoint(addr = 0x%8.8llx, remove = %d) memory write failed when restoring original opcode", a2, a3);
          return 0;
        }
        v17 = 1;
LABEL_32:
        __chkstk_darwin(v16);
        if (MachTask::ReadMemory((MachProcess *)((char *)this + 104), a2, v13, (char *)&v20 - ((v13 + 15) & 0x1FFFFFFF0)) == v13)
        {
          if (!memcmp((const void *)(v8 + 8), (char *)&v20 - ((v13 + 15) & 0x1FFFFFFF0), v13))
          {
            *(_DWORD *)(v8 + 28) = -1;
            *(_BYTE *)(v8 + 24) &= ~1u;
            if (a3)
            {
              if (!*(_DWORD *)v8 || (v19 = *(_DWORD *)v8 - 1, (*(_DWORD *)v8 = v19) == 0))
              {
                MachThreadList::NotifyBreakpointChanged((uint64_t)this + 968);
                DNBBreakpointList::Remove(v6, a2);
              }
            }
            if (DNBLogEnabledForAny(512))
              _DNBLogThreaded("MachProcess::DisableBreakpoint(addr = 0x%8.8llx, remove = %d) => success", a2, a3);
            return 1;
          }
          v18 = DNBLogEnabled();
          if (v17)
          {
            if (v18)
              _DNBLogError("MachProcess::DisableBreakpoint(addr = 0x%8.8llx, remove = %d) : failed to restore original opcode");
          }
          else if (v18)
          {
            _DNBLogError("MachProcess::DisableBreakpoint(addr = 0x%8.8llx, remove = %d) : opcode changed");
          }
        }
        else if (DNBLogEnabled())
        {
          _DNBLogWarning("MachProcess::DisableBreakpoint: unable to disable breakpoint 0x%8.8llx", a2);
        }
        return 0;
      }
      v16 = DNBLogEnabled();
      if ((_DWORD)v16)
        _DNBLogWarning("MachProcess::DisableBreakpoint(addr = 0x%8.8llx, remove = %d) expected a breakpoint opcode but didn't find one.", a2, a3);
    }
    else
    {
      v16 = DNBLogEnabledForAny(513);
      if ((_DWORD)v16)
        _DNBLogThreaded("MachProcess::DisableBreakpoint(addr = 0x%8.8llx, remove = %d) is not enabled", a2, a3);
    }
    v17 = 0;
    goto LABEL_32;
  }
  v12 = (char *)this + 968;
  result = MachThreadList::DisableHardwareBreakpoint((uint64_t)v12, v8);
  if (result)
  {
    *(_DWORD *)(v8 + 28) = -1;
    *(_BYTE *)(v8 + 24) &= ~1u;
    if (a3)
    {
      MachThreadList::NotifyBreakpointChanged((uint64_t)v12);
      DNBBreakpointList::Remove(v6, a2);
    }
    if (DNBLogEnabledForAny(512))
      _DNBLogThreaded("MachProcess::DisableBreakpoint(addr = 0x%8.8llx, remove = %d) (hardware) => success", a2, a3);
    return 1;
  }
  return result;
}

BOOL MachProcess::DisableWatchpoint(MachProcess *this, unint64_t a2, int a3)
{
  char *v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  _BOOL8 result;

  if (DNBLogEnabledForAny(2048))
    _DNBLogThreaded("MachProcess::%s(addr = 0x%8.8llx, remove = %d)", "DisableWatchpoint", a2, a3);
  v6 = DNBBreakpointList::FindByAddress((MachProcess *)((char *)this + 1664), a2);
  if (!v6)
  {
    result = DNBLogEnabled();
    if (!result)
      return result;
    _DNBLogError("MachProcess::DisableWatchpoint(addr = 0x%8.8llx, remove = %d) invalid watchpoint ID", a2, a3);
    return 0;
  }
  v7 = (uint64_t)v6;
  if (!a3 || !*(_DWORD *)v6 || (v8 = *(_DWORD *)v6 - 1, (*(_DWORD *)v6 = v8) == 0))
  {
    v9 = *((_QWORD *)v6 + 2);
    if (DNBLogEnabledForAny(2048))
      _DNBLogThreaded("MachProcess::DisableWatchpoint(addr = 0x%8.8llx, remove = %d)", v9, a3);
    if (*(_DWORD *)(v7 + 28) != -1)
    {
      result = MachThreadList::DisableHardwareWatchpoint((uint64_t)this + 968, v7);
      if (!result)
        return result;
      *(_DWORD *)(v7 + 28) = -1;
      *(_BYTE *)(v7 + 24) &= ~1u;
      if (a3)
        DNBBreakpointList::Remove((MachProcess *)((char *)this + 1664), v9);
      if (DNBLogEnabledForAny(2048))
      {
        _DNBLogThreaded("MachProcess::Disablewatchpoint(addr = 0x%8.8llx, remove = %d) (hardware) => success", v9, a3);
        return 1;
      }
      return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t MachProcess::GetNumSupportedHardwareWatchpoints(MachThread ***this)
{
  return MachThreadList::NumSupportedHardwareWatchpoints(this + 121);
}

uint64_t MachProcess::ExceptionMessageReceived(MachProcess *this, const MachException::Message *a2)
{
  pthread_mutex_t *v4;
  unint64_t v5;
  int v6;
  _BYTE *v7;
  _BYTE *v8;
  int64_t v9;
  char *v10;
  char *v11;
  _QWORD *v12;

  v4 = (pthread_mutex_t *)((char *)this + 904);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 904));
  if (*((_QWORD *)this + 110) == *((_QWORD *)this + 111))
    MachTask::Suspend((MachProcess *)((char *)this + 104));
  if (DNBLogEnabledForAny(8))
    _DNBLogThreaded("MachProcess::ExceptionMessageReceived()");
  v5 = *((_QWORD *)this + 111);
  if (v5 >= *((_QWORD *)this + 112))
  {
    v12 = std::vector<MachException::Message>::__push_back_slow_path<MachException::Message const&>((void **)this + 110, a2);
  }
  else
  {
    memcpy(*((void **)this + 111), a2, 0x800uLL);
    v6 = *((_DWORD *)a2 + 514);
    *(_QWORD *)(v5 + 2048) = *((_QWORD *)a2 + 256);
    *(_DWORD *)(v5 + 2056) = v6;
    *(_QWORD *)(v5 + 2064) = 0;
    *(_QWORD *)(v5 + 2080) = 0;
    *(_QWORD *)(v5 + 2072) = 0;
    v7 = (_BYTE *)*((_QWORD *)a2 + 258);
    v8 = (_BYTE *)*((_QWORD *)a2 + 259);
    v9 = v8 - v7;
    if (v8 != v7)
    {
      if (v9 < 0)
        std::vector<kevent>::__throw_length_error[abi:ne180100]();
      v10 = (char *)operator new(v8 - v7);
      *(_QWORD *)(v5 + 2064) = v10;
      *(_QWORD *)(v5 + 2072) = v10;
      v11 = &v10[8 * (v9 >> 3)];
      *(_QWORD *)(v5 + 2080) = v11;
      memcpy(v10, v7, v9);
      *(_QWORD *)(v5 + 2072) = v11;
    }
    v12 = (_QWORD *)(v5 + 2088);
    *((_QWORD *)this + 111) = v5 + 2088;
  }
  *((_QWORD *)this + 111) = v12;
  return pthread_mutex_unlock(v4);
}

void sub_10003E7AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;
  void *v6;
  va_list va;

  va_start(va, a2);
  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v3 + 2072) = v6;
    operator delete(v6);
  }
  *(_QWORD *)(v2 + 888) = v3;
  PThreadMutex::Locker::~Locker((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

uint64_t MachProcess::ExceptionMessageBundleComplete(MachProcess *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  int v11;
  int v12;
  BOOL v13;
  char v14;
  uint64_t v15;
  uint64_t DYLDAllImageInfosAddress;
  mach_vm_address_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  DNBArchProtocol *v28;
  __darwin_time_t tv_sec;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  timespec v41;
  pthread_mutex_t *v42;
  size_t v43;
  unsigned int v44;
  void *__p[2];
  __int128 v46;
  __int128 v47;

  v2 = (pthread_mutex_t *)((char *)this + 904);
  v42 = (pthread_mutex_t *)((char *)this + 904);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 904));
  if (DNBLogEnabledForAny(8))
    _DNBLogThreaded("%s: %llu exception messages.", "task_t MachProcess::ExceptionMessageBundleComplete()", 0x77A9AF922545A3CDLL * ((uint64_t)(*((_QWORD *)this + 111) - *((_QWORD *)this + 110)) >> 3));
  v3 = *((_QWORD *)this + 110);
  v4 = *((_QWORD *)this + 111);
  if (v3 == v4)
  {
    if (DNBLogEnabledForAny(8))
      _DNBLogThreaded("%s empty exception messages bundle (%llu exceptions).", "task_t MachProcess::ExceptionMessageBundleComplete()", 0x77A9AF922545A3CDLL * ((uint64_t)(*((_QWORD *)this + 111) - *((_QWORD *)this + 110)) >> 3));
    v20 = *((unsigned int *)this + 30);
    goto LABEL_73;
  }
  *((_BYTE *)this + 1752) = 0;
  v5 = *((_DWORD *)this + 30);
  if (!*(_DWORD *)this)
    goto LABEL_59;
  v6 = 0;
  v7 = 0;
  v8 = (unsigned __int128)((v4 - v3) * (__int128)0x7D8C42B2836ED5D3) >> 64;
  v9 = (v8 >> 10) + ((unint64_t)v8 >> 63);
  if (v9 <= 1)
    v9 = 1;
  v10 = (_QWORD *)(v3 + 2072);
  while (*((_DWORD *)v10 - 6) != v5)
  {
LABEL_16:
    v10 += 261;
    if (!--v9)
      goto LABEL_37;
  }
  ++v6;
  if (*((_DWORD *)v10 - 4) != 5 || (v15 = *(v10 - 1), *v10 - v15 != 16) || *(_QWORD *)v15 != 65539)
  {
    v11 = 0;
LABEL_9:
    v12 = *((_DWORD *)this + 436);
    if (v12)
      v13 = v11 == v12;
    else
      v13 = 0;
    v14 = v13;
    v7 |= v14;
    goto LABEL_16;
  }
  v11 = *(_DWORD *)(v15 + 8);
  if (v11 != 5)
    goto LABEL_9;
  *(_OWORD *)__p = 0u;
  v46 = 0u;
  DYLDAllImageInfosAddress = MachTask::GetDYLDAllImageInfosAddress((MachProcess *)((char *)this + 104), (DNBError *)__p);
  if (SHIBYTE(v46) < 0)
    operator delete(__p[1]);
  if (DYLDAllImageInfosAddress != -1)
  {
    v17 = DYLDAllImageInfosAddress + 4;
    LODWORD(v41.tv_sec) = 0;
    if (MachTask::ReadMemory((MachProcess *)((char *)this + 104), v17, 4uLL, (char *)&v41) == 4)
    {
      if (!LODWORD(v41.tv_sec))
      {
        *((_BYTE *)this + 1752) = 1;
        *(_OWORD *)__p = 0u;
        v46 = 0u;
        v18 = *((_DWORD *)this + 30);
        v19 = MachTask::TaskPortForProcessID((MachProcess *)((char *)this + 104), (DNBError *)__p, 1);
        if (v18 != v19 && DNBLogEnabledForAny(2))
          _DNBLogThreaded("exec: task changed from 0x%4.4x to 0x%4.4x", v18, v19);
        if (SHIBYTE(v46) < 0)
          operator delete(__p[1]);
      }
    }
    else if (DNBLogEnabled())
    {
      _DNBLog(0, (uint64_t)"error: failed to read all_image_infos.infoArrayCount from 0x%8.8llx", v21, v22, v23, v24, v25, v26, v17);
    }
  }
LABEL_37:
  if (*((_BYTE *)this + 1752))
  {
    v27 = *(_DWORD *)this;
    v46 = 0u;
    v47 = 0u;
    *(_OWORD *)__p = 0u;
    v41.tv_sec = 12;
    if (sysctlnametomib("sysctl.proc_cputype", (int *)__p, (size_t *)&v41))
    {
      v28 = 0;
    }
    else
    {
      tv_sec = v41.tv_sec;
      *((_DWORD *)__p + v41.tv_sec) = v27;
      v41.tv_sec = tv_sec + 1;
      v44 = 0;
      v43 = 4;
      if (sysctl((int *)__p, tv_sec + 1, &v44, &v43, 0, 0))
        v28 = 0;
      else
        v28 = (DNBArchProtocol *)v44;
    }
    if (*((_DWORD *)this + 1) != (_DWORD)v28)
    {
      if (DNBLogEnabled())
        _DNBLog(0, (uint64_t)"arch changed from 0x%8.8x to 0x%8.8x", v30, v31, v32, v33, v34, v35, *((unsigned int *)this + 1));
      *((_DWORD *)this + 1) = (_DWORD)v28;
      DNBArchProtocol::SetArchitecture(v28, 0);
    }
    MachThreadList::Clear((MachProcess *)((char *)this + 968));
    Genealogy::Clear((MachProcess *)((char *)this + 1080));
    DNBBreakpointList::DisableAll((MachProcess *)((char *)this + 1640));
    MachTask::ClearAllocations((MachProcess *)((char *)this + 104));
  }
  if (!*((_DWORD *)this + 436))
    goto LABEL_59;
  if ((v7 & 1) == 0)
  {
    if (DNBLogEnabledForAny(2))
      _DNBLogThreaded("MachProcess::ExceptionMessageBundleComplete(): didn't get signal %i after MachProcess::Interrupt()", *((_DWORD *)this + 436));
    goto LABEL_59;
  }
  if (DNBLogEnabledForAny(2))
    _DNBLogThreaded("MachProcess::ExceptionMessageBundleComplete(): process successfully interrupted with signal %i", *((_DWORD *)this + 436));
  *((_DWORD *)this + 436) = 0;
  if (!*((_DWORD *)this + 437))
  {
LABEL_59:
    v36 = 0;
    goto LABEL_60;
  }
  v36 = v6 == 1;
  if (v6 == 1 && DNBLogEnabledForAny(2))
    _DNBLogThreaded("MachProcess::ExceptionMessageBundleComplete(): auto resuming due to unhandled interrupt signal %i", *((_DWORD *)this + 437));
  *((_DWORD *)this + 437) = 0;
LABEL_60:
  MachThreadList::ProcessDidStop((MachProcess *)((char *)this + 968), this);
  Genealogy::Clear((MachProcess *)((char *)this + 1080));
  v37 = *((_QWORD *)this + 110);
  if (*((_QWORD *)this + 111) != v37)
  {
    v38 = 0;
    v39 = 2048;
    do
    {
      if (*(_DWORD *)(v37 + v39) == v5)
        MachThreadList::NotifyException((MachProcess *)((char *)this + 968), (MachException::Data *)(v37 + v39));
      if (DNBLogCheckLogBit(8))
        MachException::Message::Dump((MachException::Message *)(*((_QWORD *)this + 110) + v39 - 2048));
      ++v38;
      v37 = *((_QWORD *)this + 110);
      v39 += 2088;
    }
    while (v38 < 0x77A9AF922545A3CDLL * ((*((_QWORD *)this + 111) - v37) >> 3));
  }
  if (DNBLogCheckLogBit(4))
    MachThreadList::Dump((MachProcess *)((char *)this + 968));
  LOBYTE(v43) = 0;
  if (((v36 | !MachThreadList::ShouldStop((MachProcess *)((char *)this + 968), (BOOL *)&v43)) & 1) != 0)
  {
    MachProcess::PrivateResume(this);
  }
  else
  {
    gettimeofday((timeval *)__p, 0);
    v41.tv_sec = (__darwin_time_t)__p[0] + SLODWORD(__p[1]) / 1000000 + 1;
    v41.tv_nsec = 1000 * LODWORD(__p[1]) % 1000000000;
    PThreadEvent::WaitForEventsToReset((pthread_mutex_t *)((char *)this + 1288), 1u, &v41);
    MachProcess::SetState((uint64_t)this, 4u);
  }
  v2 = v42;
  v20 = *((unsigned int *)this + 30);
  if (v42)
LABEL_73:
    pthread_mutex_unlock(v2);
  return v20;
}

void sub_10003ED7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, pthread_mutex_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  PThreadMutex::Locker::~Locker(&a14);
  _Unwind_Resume(a1);
}

void MachProcess::SetExitInfo(MachProcess *this, const char *a2)
{
  if (a2 && *a2)
  {
    if (DNBLogEnabledForAny(2))
      _DNBLogThreaded("MachProcess::%s(\"%s\")", "SetExitInfo", a2);
    std::string::assign((std::string *)((char *)this + 80), a2);
  }
  else
  {
    if (DNBLogEnabledForAny(2))
      _DNBLogThreaded("MachProcess::%s(NULL)", "SetExitInfo");
    if (*((char *)this + 103) < 0)
    {
      **((_BYTE **)this + 10) = 0;
      *((_QWORD *)this + 11) = 0;
    }
    else
    {
      *((_BYTE *)this + 80) = 0;
      *((_BYTE *)this + 103) = 0;
    }
  }
}

uint64_t MachProcess::AppendSTDOUT(MachProcess *this, char *a2, std::string::size_type a3)
{
  pthread_mutex_t *v6;
  pthread_mutex_t *v7;

  if (DNBLogEnabledForAny(2))
    _DNBLogThreaded("MachProcess::%s (<%llu> %s) ...", "AppendSTDOUT", a3, a2);
  v6 = (pthread_mutex_t *)((char *)this + 456);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 456));
  std::string::append((std::string *)((char *)this + 520), a2, a3);
  v7 = (pthread_mutex_t *)((char *)this + 1288);
  PThreadEvent::SetEvents(v7, 8);
  PThreadEvent::WaitForResetAck((PThreadEvent *)v7, 8, 0);
  return pthread_mutex_unlock(v6);
}

void sub_10003EF38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  PThreadMutex::Locker::~Locker((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

size_t MachProcess::GetAvailableSTDOUT(MachProcess *this, char *a2, size_t a3)
{
  size_t v6;
  char *v7;
  char *v8;

  if (DNBLogEnabledForAny(2))
    _DNBLogThreaded("MachProcess::%s (&%p[%llu]) ...", "GetAvailableSTDOUT", a2, a3);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 456));
  if ((*((char *)this + 543) & 0x80000000) == 0)
  {
    v6 = *((unsigned __int8 *)this + 543);
    if (*((_BYTE *)this + 543))
      goto LABEL_5;
LABEL_10:
    a3 = 0;
    goto LABEL_17;
  }
  v6 = *((_QWORD *)this + 66);
  if (!v6)
    goto LABEL_10;
LABEL_5:
  v7 = (char *)this + 520;
  if (v6 <= a3)
  {
    if ((*((_BYTE *)this + 543) & 0x80) != 0)
      v7 = *(char **)v7;
    memcpy(a2, v7, v6);
    if (*((char *)this + 543) < 0)
    {
      **((_BYTE **)this + 65) = 0;
      *((_QWORD *)this + 66) = 0;
    }
    else
    {
      *((_BYTE *)this + 520) = 0;
      *((_BYTE *)this + 543) = 0;
    }
    a3 = v6;
  }
  else
  {
    v8 = (char *)this + 520;
    if ((*((_BYTE *)this + 543) & 0x80) != 0)
      v8 = *(char **)v7;
    memcpy(a2, v8, a3);
    std::string::erase((std::string *)((char *)this + 520), 0, a3);
  }
LABEL_17:
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 456));
  return a3;
}

void sub_10003F064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  PThreadMutex::Locker::~Locker((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

void MachProcess::GetDyldProcessState(MachProcess *this)
{
  operator new();
}

void sub_10003F78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  std::shared_ptr<MachThread>::~shared_ptr[abi:ne180100](v21 - 80);
  _Unwind_Resume(a1);
}

uint64_t MachProcess::GetAvailableSTDERR(MachProcess *this, char *a2)
{
  return 0;
}

pthread_mutex_t *MachProcess::SignalAsyncProfileData(MachProcess *this, const char *a2)
{
  size_t v4;
  size_t v5;
  __int128 *p_dst;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  char *v11;
  int v12;
  pthread_mutex_t *v13;
  pthread_mutex_t *result;
  __int128 __dst;
  unint64_t v16;
  pthread_mutex_t *v17;

  if (DNBLogEnabledForAny(2))
    _DNBLogThreaded("MachProcess::%s (%s) ...", "SignalAsyncProfileData", a2);
  v17 = (pthread_mutex_t *)((char *)this + 568);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 568));
  v4 = strlen(a2);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = v5;
    v16 = v8 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_10;
  }
  HIBYTE(v16) = v4;
  p_dst = &__dst;
  if (v4)
LABEL_10:
    memcpy(p_dst, a2, v5);
  *((_BYTE *)p_dst + v5) = 0;
  v9 = *((_QWORD *)this + 80);
  if (v9 >= *((_QWORD *)this + 81))
  {
    v11 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)this + 79, (uint64_t)&__dst);
    v12 = SHIBYTE(v16);
    *((_QWORD *)this + 80) = v11;
    if (v12 < 0)
      operator delete((void *)__dst);
  }
  else
  {
    v10 = __dst;
    *(_QWORD *)(v9 + 16) = v16;
    *(_OWORD *)v9 = v10;
    *((_QWORD *)this + 80) = v9 + 24;
  }
  v13 = (pthread_mutex_t *)((char *)this + 1288);
  PThreadEvent::SetEvents(v13, 16);
  PThreadEvent::WaitForResetAck((PThreadEvent *)v13, 16, 0);
  result = v17;
  if (v17)
    return (pthread_mutex_t *)pthread_mutex_unlock(v17);
  return result;
}

void sub_10003FB00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, pthread_mutex_t *a17)
{
  if (a16 < 0)
    operator delete(__p);
  PThreadMutex::Locker::~Locker(&a17);
  _Unwind_Resume(a1);
}

size_t MachProcess::GetAsyncProfileData(MachProcess *this, char *a2, size_t a3)
{
  _BYTE *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  void **v12;

  if (DNBLogEnabledForAny(2))
    _DNBLogThreaded("MachProcess::%s (&%p[%llu]) ...", "GetAsyncProfileData", a2, a3);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 568));
  v6 = (_BYTE *)*((_QWORD *)this + 79);
  if (v6 == *((_BYTE **)this + 80))
    goto LABEL_11;
  if (((char)v6[23] & 0x80000000) == 0)
  {
    v7 = v6[23];
    if (v6[23])
      goto LABEL_6;
LABEL_11:
    a3 = 0;
    goto LABEL_25;
  }
  v7 = *((_QWORD *)v6 + 1);
  if (!v7)
    goto LABEL_11;
LABEL_6:
  if (v7 <= a3)
  {
    if ((v6[23] & 0x80) != 0)
      v6 = *(_BYTE **)v6;
    memcpy(a2, v6, v7);
    v8 = *((_QWORD *)this + 79);
    v9 = v8 + 24;
    v10 = (char *)*((_QWORD *)this + 80);
    if ((char *)(v8 + 24) != v10)
    {
      v11 = (char *)(v8 + 23);
      do
      {
        v12 = (void **)(v11 - 23);
        if (*v11 < 0)
          operator delete(*v12);
        *(_OWORD *)v12 = *(_OWORD *)(v11 + 1);
        *(_QWORD *)(v11 - 7) = *(_QWORD *)(v11 + 17);
        v11[24] = 0;
        v11 += 24;
        *(v11 - 23) = 0;
        v8 += 24;
      }
      while (v11 + 1 != v10);
      v9 = *((_QWORD *)this + 80);
    }
    while (v9 != v8)
    {
      if (*(char *)(v9 - 1) < 0)
        operator delete(*(void **)(v9 - 24));
      v9 -= 24;
    }
    *((_QWORD *)this + 80) = v8;
    a3 = v7;
  }
  else
  {
    if ((v6[23] & 0x80) != 0)
      v6 = *(_BYTE **)v6;
    memcpy(a2, v6, a3);
    std::string::erase(*((std::string **)this + 79), 0, a3);
  }
LABEL_25:
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 568));
  return a3;
}

void sub_10003FCC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  PThreadMutex::Locker::~Locker((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

uint64_t MachProcess::AttachForDebug(MachProcess *a1, uint64_t a2, int8x16_t **a3, char *a4, size_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  pid_t v28;
  char v29;
  uint64_t v30;
  const char *v31;
  const char *v32;
  const char *v33;
  pid_t v34;
  int v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  pid_t v45;
  void *__p[2];
  __int128 v48;
  size_t v49;
  int v50[2];
  int v51;
  int v52;
  _BYTE buffer[4];
  int v54;
  char v55;

  MachProcess::Clear(a1, 0);
  if (!(_DWORD)a2)
    return 0;
  *(_OWORD *)__p = 0u;
  v48 = 0u;
  if (getpgid(a2) < 0)
  {
    LODWORD(__p[0]) = *__error();
    HIDWORD(__p[0]) = 2;
    if (SHIBYTE(v48) < 0)
    {
      *(_BYTE *)__p[1] = 0;
      *(_QWORD *)&v48 = 0;
    }
    else
    {
      LOBYTE(__p[1]) = 0;
      HIBYTE(v48) = 0;
    }
    v30 = DNBError::AsString((DNBError *)__p);
    v31 = "No such process";
    if (v30)
      v31 = (const char *)v30;
    snprintf(a4, a5, "%s", v31);
    if (DNBLogEnabled())
      _DNBLogError("MachProcess::AttachForDebug pid %d does not exist", a2);
    a2 = 0;
    v29 = 0;
    if (SHIBYTE(v48) < 0)
      goto LABEL_53;
    goto LABEL_54;
  }
  MachProcess::SetState((uint64_t)a1, 2u);
  *(_DWORD *)a1 = a2;
  if (!MachTask::StartExceptionThread((uint64_t)a1 + 104, a3, (uint64_t)__p))
  {
    v26 = DNBError::AsString((DNBError *)__p);
    v27 = "unable to start the exception thread";
    if (v26)
      v27 = (const char *)v26;
    snprintf(a4, a5, "%s", v27);
    if (DNBLogEnabledForAny(2))
      _DNBLogThreaded("error: failed to attach to pid %d", a2);
    if (DNBLogEnabled())
    {
      v28 = getpid();
      _DNBLogError("[LaunchAttach] END (%d) MachProcess::AttachForDebug failed to start exception thread attaching to pid %i: %s", v28, a2, a4);
    }
    a2 = 0;
    v29 = 0;
    *(_DWORD *)a1 = 0;
    if (SHIBYTE(v48) < 0)
      goto LABEL_53;
    goto LABEL_54;
  }
  if (DNBLogEnabled())
  {
    v10 = getpid();
    _DNBLog(0, (uint64_t)"[LaunchAttach] (%d) About to ptrace(PT_ATTACHEXC, %d)...", v11, v12, v13, v14, v15, v16, v10);
  }
  *__error() = 0;
  v17 = ptrace(14, a2, 0, 0);
  v18 = *__error();
  if (DNBLogEnabled())
  {
    v19 = getpid();
    _DNBLog(0, (uint64_t)"[LaunchAttach] (%d) Completed ptrace(PT_ATTACHEXC, %d) == %d", v20, v21, v22, v23, v24, v25, v19);
  }
  if (!v17)
  {
    __p[0] = 0;
    if (SHIBYTE(v48) < 0)
    {
      *(_BYTE *)__p[1] = 0;
      *(_QWORD *)&v48 = 0;
      if (LODWORD(__p[0]))
        goto LABEL_34;
    }
    else
    {
      LOBYTE(__p[1]) = 0;
      HIBYTE(v48) = 0;
    }
LABEL_44:
    *((_DWORD *)a1 + 110) |= 1u;
    usleep(0x3D090u);
    if (DNBLogEnabled())
    {
      v37 = getpid();
      _DNBLog(0, (uint64_t)"[LaunchAttach] (%d) Done napping after ptrace(PT_ATTACHEXC)'ing", v38, v39, v40, v41, v42, v43, v37);
    }
    if (DNBLogEnabledForAny(2))
      _DNBLogThreaded("successfully attached to pid %d", a2);
    v29 = 0;
    a2 = *(unsigned int *)a1;
    if (SHIBYTE(v48) < 0)
      goto LABEL_53;
    goto LABEL_54;
  }
  __p[0] = (void *)(v18 | 0x100000000);
  if (SHIBYTE(v48) < 0)
  {
    *(_BYTE *)__p[1] = 0;
    *(_QWORD *)&v48 = 0;
  }
  else
  {
    LOBYTE(__p[1]) = 0;
    HIBYTE(v48) = 0;
  }
  if (DNBLogEnabled())
  {
    v32 = (const char *)DNBError::AsString((DNBError *)__p);
    _DNBLogError("MachProcess::AttachForDebug failed to ptrace(PT_ATTACHEXC) pid %i: %s", a2, v32);
  }
  if (!LODWORD(__p[0]))
    goto LABEL_44;
LABEL_34:
  v33 = (const char *)DNBError::AsString((DNBError *)__p);
  snprintf(a4, a5, "%s", v33);
  if (DNBLogEnabled())
  {
    v34 = getpid();
    _DNBLogError("[LaunchAttach] (%d) MachProcess::AttachForDebug error: failed to attach to pid %d", v34, a2);
  }
  *(_QWORD *)v50 = 0xE00000001;
  v51 = 1;
  v52 = a2;
  v49 = 648;
  if (!sysctl(v50, 4u, buffer, &v49, 0, 0) && (v55 & 8) != 0)
  {
    if (proc_pidinfo(a2, 13, 0, buffer, 64) == 64)
      v35 = v54;
    else
      v35 = 0;
    if (v35 == getpid())
    {
      v36 = (const char *)DNBError::AsString((DNBError *)__p);
      snprintf(a4, a5, "%s - Failed to attach to pid %d, AttachForDebug() unable to ptrace(PT_ATTACHEXC)", v36, *(_DWORD *)a1);
    }
    else
    {
      v44 = (const char *)DNBError::AsString((DNBError *)__p);
      snprintf(a4, a5, "%s - process %d is already being debugged by pid %d", v44, a2, v35);
      if (DNBLogEnabled())
      {
        v45 = getpid();
        _DNBLogError("[LaunchAttach] (%d) MachProcess::AttachForDebug pid %d is already being debugged by pid %d", v45, a2, v35);
      }
    }
  }
  v29 = 1;
  if (SHIBYTE(v48) < 0)
LABEL_53:
    operator delete(__p[1]);
LABEL_54:
  if ((v29 & 1) != 0)
    return 0;
  return a2;
}

void sub_100040158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL MachProcess::ProcessIsBeingDebugged(MachProcess *this)
{
  size_t v2;
  int v3[2];
  int v4;
  int v5;
  _BYTE v6[648];

  *(_QWORD *)v3 = 0xE00000001;
  v4 = 1;
  v5 = (int)this;
  v2 = 648;
  return !sysctl(v3, 4u, v6, &v2, 0, 0) && (v6[33] & 8) != 0;
}

uint64_t MachProcess::GetParentProcessID(MachProcess *this)
{
  _BYTE buffer[4];
  unsigned int v3;

  if (proc_pidinfo((int)this, 13, 0, buffer, 64) == 64)
    return v3;
  else
    return 0;
}

void MachProcess::GetGenealogyInfoForThread(MachProcess *this@<X0>, BOOL *a2@<X2>, unint64_t a3@<X1>, _QWORD *a4@<X8>)
{
  Genealogy::GetGenealogyInfoForThread((MachProcess *)((char *)this + 1080), (MachProcess *)((char *)this + 968), a2, *(unsigned int *)this, a3, *((_DWORD *)this + 30), a4);
}

uint64_t MachProcess::GetGenealogyImageInfo@<X0>(MachProcess *this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return Genealogy::GetProcessExecutableInfosAtIndex((uint64_t)this + 1080, a2, a3);
}

uint64_t MachProcess::GetOSVersionNumbers(MachProcess *this, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  id v7;
  NSProcessInfo *v8;

  v7 = objc_alloc_init((Class)NSAutoreleasePool);
  v8 = +[NSProcessInfo processInfo](NSProcessInfo, "processInfo");
  if (v8)
  {
    -[NSProcessInfo operatingSystemVersion](v8, "operatingSystemVersion");
    if (!this)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (this)
LABEL_3:
    *(_QWORD *)this = 0;
LABEL_4:
  if (a2)
    *a2 = 0;
  if (a3)
    *a3 = 0;
  objc_msgSend(v7, "drain");
  return 1;
}

const __CFString *MachProcess::PrepareForAttach(const char *a1, int a2, int a3, uint64_t a4)
{
  size_t v7;
  void *v8;
  void **v9;
  const __CFString *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  const char *v14;
  const char *v15;
  const char *v16;
  id v17;
  NSString *v18;
  id v19;
  id v20;
  const char *v21;
  NSNumber *v22;
  NSNumber *v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  dispatch_time_t v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  void *__p[2];
  uint64_t v39;
  _QWORD v40[7];
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t);
  void (*v49)(uint64_t);
  dispatch_semaphore_t v50;
  void *v51[2];
  uint64_t v52;
  void *__dst[2];
  unint64_t v54;
  void *v55[2];
  unsigned __int8 v56;

  if (!a3)
    return 0;
  v7 = strlen(a1);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v11 = v7 | 7;
    v12 = v11 + 1;
    v9 = (void **)operator new(v11 + 1);
    __dst[1] = v8;
    v54 = v12 | 0x8000000000000000;
    __dst[0] = v9;
    goto LABEL_10;
  }
  HIBYTE(v54) = v7;
  v9 = __dst;
  if (v7)
LABEL_10:
    memcpy(v9, a1, (size_t)v8);
  *((_BYTE *)v8 + (_QWORD)v9) = 0;
  GetAppBundle(__dst, v55);
  if (SHIBYTE(v54) < 0)
    operator delete(__dst[0]);
  v13 = v56;
  if ((v56 & 0x80u) != 0)
    v13 = (unint64_t)v55[1];
  if (!v13)
  {
    if (DNBLogEnabledForAny(2))
      _DNBLogThreaded("MachProcess::PrepareForAttach(): path '%s' doesn't contain .app, we can't tell springboard to wait for launch...", a1);
LABEL_43:
    v10 = 0;
    if ((char)v56 < 0)
      goto LABEL_57;
    return v10;
  }
  if (a2 != 5 && a2)
    goto LABEL_43;
  if ((v56 & 0x80u) == 0)
    v14 = (const char *)v55;
  else
    v14 = (const char *)v55[0];
  v10 = CopyBundleIDForPath(v14, (DNBError *)a4);
  v51[0] = 0;
  v51[1] = 0;
  v52 = 0;
  CFString::UTF8(v10, (uint64_t)v51);
  if (DNBLogEnabledForAny(2))
  {
    v15 = (const char *)v55;
    if ((v56 & 0x80u) != 0)
      v15 = (const char *)v55[0];
    v16 = (const char *)v51;
    if (v52 < 0)
      v16 = (const char *)v51[0];
    _DNBLogThreaded("CopyBundleIDForPath (%s, err_str) returned @\"%s\"", v15, v16);
  }
  if (v10)
  {
    v17 = objc_alloc_init((Class)NSAutoreleasePool);
    v18 = -[NSFileManager stringWithFileSystemRepresentation:length:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "stringWithFileSystemRepresentation:length:", "/dev/null", 9);
    v19 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
    v20 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
    if (DNBLogEnabledForAny(2))
    {
      v21 = (const char *)v51;
      if (v52 < 0)
        v21 = (const char *)v51[0];
      _DNBLogThreaded("Calling BKSSystemService openApplication: @\"%s\",options include stdio path: \"%s\", BKSDebugOptionKeyDebugOnNextLaunch & BKSDebugOptionKeyWaitForDebugger)", v21, "/dev/null");
    }
    objc_msgSend(v19, "setObject:forKey:", v18, FBSDebugOptionKeyStandardOutPath);
    objc_msgSend(v19, "setObject:forKey:", v18, FBSDebugOptionKeyStandardErrorPath);
    v22 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1);
    objc_msgSend(v19, "setObject:forKey:", v22, FBSDebugOptionKeyWaitForDebugger);
    v23 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1);
    objc_msgSend(v19, "setObject:forKey:", v23, FBSDebugOptionKeyDebugOnNextLaunch);
    objc_msgSend(v20, "setObject:forKey:", v19, FBSOpenApplicationOptionKeyDebuggingOptions);
    v24 = objc_alloc_init((Class)FBSSystemService);
    v25 = objc_msgSend(v24, "createClientPort");
    v45 = 0;
    v46 = &v45;
    v47 = 0x3052000000;
    v48 = __Block_byref_object_copy__0;
    v49 = __Block_byref_object_dispose__0;
    v50 = 0;
    v50 = dispatch_semaphore_create(0);
    v41 = 0;
    v42 = &v41;
    v43 = 0x2020000000;
    v44 = 0;
    if (DNBLogEnabled())
    {
      v26 = getpid();
      _DNBLog(0, (uint64_t)"[LaunchAttach] START (%d) requesting FBS launch of app with bundle ID '%s'", v27, v28, v29, v30, v31, v32, v26);
    }
    v40[0] = _NSConcreteStackBlock;
    v40[1] = 3254779904;
    v40[2] = ___ZN11MachProcess16PrepareForAttachEPKc19nub_launch_flavor_tbR8DNBError_block_invoke;
    v40[3] = &__block_descriptor_56_e8_32o40r48r_e17_v16__0__NSError_8l;
    v40[4] = v24;
    v40[5] = &v41;
    v40[6] = &v45;
    objc_msgSend(v24, "openApplication:options:clientPort:withResult:", v10, v20, v25, v40);
    v33 = dispatch_time(0, 9000000000);
    if (dispatch_semaphore_wait((dispatch_semaphore_t)v46[5], v33))
    {
      if (DNBLogEnabled())
      {
        v34 = (const char *)v51;
        if (v52 < 0)
          v34 = (const char *)v51[0];
        _DNBLogError("timed out trying to launch %s.", v34);
      }
      std::string::assign((std::string *)(a4 + 8), "debugserver timed out waiting for openApplication to complete.");
      *(_QWORD *)a4 = 111;
      if (*(char *)(a4 + 31) < 0)
      {
        **(_BYTE **)(a4 + 8) = 0;
        *(_QWORD *)(a4 + 16) = 0;
      }
      else
      {
        *(_BYTE *)(a4 + 8) = 0;
        *(_BYTE *)(a4 + 31) = 0;
      }
    }
    else
    {
      v35 = v42[3];
      if (v35)
      {
        __p[0] = 0;
        __p[1] = 0;
        v39 = 0;
        SetFBSError(v35, (uint64_t)__p, a4);
        if (SHIBYTE(v39) < 0)
          operator delete(__p[0]);
        if (DNBLogEnabled())
        {
          v36 = (const char *)v51;
          if (v52 < 0)
            v36 = (const char *)v51[0];
          _DNBLogError("unable to launch the application with CFBundleIdentifier '%s' bks_error = %ld", v36, v42[3]);
        }
      }
    }
    dispatch_release((dispatch_object_t)v46[5]);
    objc_msgSend(v17, "drain");
    _Block_object_dispose(&v41, 8);
    _Block_object_dispose(&v45, 8);
    if (DNBLogEnabledForAny(2))
      _DNBLogThreaded("Successfully set DebugOnNextLaunch.");
  }
  if (SHIBYTE(v52) < 0)
  {
    operator delete(v51[0]);
    if (((char)v56 & 0x80000000) == 0)
      return v10;
    goto LABEL_57;
  }
  if ((char)v56 < 0)
LABEL_57:
    operator delete(v55[0]);
  return v10;
}

void sub_10004086C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  if (a17 < 0)
    operator delete(__p);
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  if (*(char *)(v29 - 113) < 0)
    operator delete(*(void **)(v29 - 136));
  if (*(char *)(v29 - 65) < 0)
    operator delete(*(void **)(v29 - 88));
  _Unwind_Resume(a1);
}

void GetAppBundle(void **__src@<X0>, _QWORD *a2@<X8>)
{
  void **v2;
  int v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *i;
  size_t v12;
  size_t v13;
  void **v14;
  void **v15;
  size_t v16;
  __int128 *p_dst;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *j;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  void **v29;
  __int128 __dst;
  unint64_t v31;

  v2 = __src;
  v4 = *((char *)__src + 23);
  v5 = *((unsigned __int8 *)__src + 23);
  if (v4 < 0)
  {
    v6 = (char *)*__src;
    v7 = (char *)__src[1];
    if (!v7)
      goto LABEL_69;
  }
  else
  {
    v6 = (char *)__src;
    v7 = (char *)*((unsigned __int8 *)__src + 23);
    if (!*((_BYTE *)__src + 23))
      goto LABEL_69;
  }
  v8 = &v7[(_QWORD)v6];
  v9 = v6;
  v10 = &v7[(_QWORD)v6];
  while (2)
  {
    for (i = v9 + 3; ; ++i)
    {
      v9 = i - 2;
      if (*(i - 3) != 46)
      {
        if (v9 == v8)
          goto LABEL_18;
        continue;
      }
      if (v9 == v8)
        goto LABEL_18;
      if (*v9 == 97)
      {
        if (i - 1 == v8)
          goto LABEL_18;
        if (*(i - 1) == 112)
          break;
      }
    }
    if (i != v8)
    {
      if (*i == 112)
        v10 = i - 3;
      continue;
    }
    break;
  }
LABEL_18:
  if (v10 == v8)
    goto LABEL_69;
  v12 = v10 - v6;
  if (v12 == -1)
    goto LABEL_69;
  if (v4 < 0)
  {
    if ((_BYTE *)v12 != (char *)__src[1] - 4)
      goto LABEL_32;
    v2 = (void **)*__src;
    v5 = (unint64_t)__src[1];
LABEL_25:
    if (v5 >= v12 + 4)
      v13 = v12 + 4;
    else
      v13 = v5;
    if (v13 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_81;
    goto LABEL_29;
  }
  if (v12 == v5 - 4)
    goto LABEL_25;
  while (1)
  {
LABEL_32:
    v14 = v2;
    if ((v5 & 0x80) != 0)
      v14 = (void **)*v2;
    if (*((_BYTE *)v14 + v12 + 4) == 47)
      break;
    v15 = v2;
    if ((char)v5 < 0)
    {
      v15 = (void **)*v2;
      v5 = (unint64_t)v2[1];
    }
    if (v5 >= v12)
      v16 = v12;
    else
      v16 = v5;
    if (v16 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v16 >= 0x17)
    {
      v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17)
        v18 = v16 | 7;
      v19 = v18 + 1;
      p_dst = (__int128 *)operator new(v18 + 1);
      *((_QWORD *)&__dst + 1) = v16;
      v31 = v19 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v31) = v16;
      p_dst = &__dst;
      if (!v16)
        goto LABEL_48;
    }
    memmove(p_dst, v15, v16);
LABEL_48:
    *((_BYTE *)p_dst + v16) = 0;
    if (*((char *)v2 + 23) < 0)
      operator delete(*v2);
    *(_OWORD *)v2 = __dst;
    v2[2] = (void *)v31;
    v5 = *((unsigned __int8 *)v2 + 23);
    if (*((char *)v2 + 23) < 0)
    {
      v20 = (char *)*v2;
      v21 = (char *)v2[1];
      if (!v21)
        goto LABEL_69;
    }
    else
    {
      v20 = (char *)v2;
      v21 = (char *)*((unsigned __int8 *)v2 + 23);
      if (!*((_BYTE *)v2 + 23))
        goto LABEL_69;
    }
    v22 = &v21[(_QWORD)v20];
    v23 = v20;
    v24 = &v21[(_QWORD)v20];
    while (2)
    {
      for (j = v23 + 3; ; ++j)
      {
        v23 = j - 2;
        if (*(j - 3) != 46)
        {
          if (v23 == v22)
            goto LABEL_67;
          continue;
        }
        if (v23 == v22)
          goto LABEL_67;
        if (*v23 == 97)
        {
          if (j - 1 == v22)
            goto LABEL_67;
          if (*(j - 1) == 112)
            break;
        }
      }
      if (j != v22)
      {
        if (*j == 112)
          v24 = j - 3;
        continue;
      }
      break;
    }
LABEL_67:
    if (v24 != v22)
    {
      v12 = v24 - v20;
      if (v12 != -1)
        continue;
    }
LABEL_69:
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return;
  }
  if ((char)v5 < 0)
  {
    v29 = v2;
    v2 = (void **)*v2;
    v5 = (unint64_t)v29[1];
  }
  if (v5 >= v12 + 4)
    v13 = v12 + 4;
  else
    v13 = v5;
  if (v13 > 0x7FFFFFFFFFFFFFF7)
LABEL_81:
    std::string::__throw_length_error[abi:ne180100]();
LABEL_29:
  if (v13 >= 0x17)
  {
    v26 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v26 = v13 | 7;
    v27 = v26 + 1;
    v28 = operator new(v26 + 1);
    a2[1] = v13;
    a2[2] = v27 | 0x8000000000000000;
    *a2 = v28;
    a2 = v28;
  }
  else
  {
    *((_BYTE *)a2 + 23) = v13;
    if (!v13)
      goto LABEL_74;
  }
  memmove(a2, v2, v13);
LABEL_74:
  *((_BYTE *)a2 + v13) = 0;
}

const __CFString *CopyBundleIDForPath(const char *a1, DNBError *a2)
{
  const __CFString *Identifier;
  void **v5;
  const char *v7;
  stat v8;
  void *__p[2];
  uint64_t v10;
  char v11[32];
  char __str[1024];

  CFBundle::CFBundle((CFBundle *)v11, a1);
  Identifier = (const __CFString *)CFBundle::GetIdentifier((CFBundle *)v11);
  __p[0] = 0;
  __p[1] = 0;
  v10 = 0;
  if (CFString::UTF8(Identifier, (uint64_t)__p))
  {
    if (DNBLogEnabledForAny(2))
    {
      v5 = __p;
      if (v10 < 0)
        v5 = (void **)__p[0];
      _DNBLogThreaded("%s() extracted CFBundleIdentifier: %s", "CopyBundleIDForPath", (const char *)v5);
    }
    CFRetain(Identifier);
    if ((SHIBYTE(v10) & 0x80000000) == 0)
      goto LABEL_7;
LABEL_30:
    operator delete(__p[0]);
    goto LABEL_7;
  }
  if (stat(a1, &v8) < 0)
  {
    *(_DWORD *)a2 = *__error();
    *((_DWORD *)a2 + 1) = 2;
    if (*((char *)a2 + 31) < 0)
    {
      **((_BYTE **)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
    }
    else
    {
      *((_BYTE *)a2 + 8) = 0;
      *((_BYTE *)a2 + 31) = 0;
    }
    v7 = (const char *)DNBError::AsString(a2);
    snprintf(__str, 0x400uLL, "%s: \"%s\"", v7, a1);
    if (__str[0])
    {
      std::string::assign((std::string *)((char *)a2 + 8), __str);
    }
    else if (*((char *)a2 + 31) < 0)
    {
      **((_BYTE **)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
    }
    else
    {
      *((_BYTE *)a2 + 8) = 0;
      *((_BYTE *)a2 + 31) = 0;
    }
    if (DNBLogEnabledForAny(2))
      _DNBLogThreaded("%s() error: %s", "CopyBundleIDForPath", __str);
  }
  else
  {
    *(_QWORD *)a2 = 0xFFFFFFFFLL;
    if (*((char *)a2 + 31) < 0)
    {
      **((_BYTE **)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
    }
    else
    {
      *((_BYTE *)a2 + 8) = 0;
      *((_BYTE *)a2 + 31) = 0;
    }
    snprintf(__str, 0x400uLL, "failed to extract CFBundleIdentifier from %s", a1);
    if (__str[0])
    {
      std::string::assign((std::string *)((char *)a2 + 8), __str);
    }
    else if (*((char *)a2 + 31) < 0)
    {
      **((_BYTE **)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
    }
    else
    {
      *((_BYTE *)a2 + 8) = 0;
      *((_BYTE *)a2 + 31) = 0;
    }
    if (DNBLogEnabledForAny(2))
      _DNBLogThreaded("%s() error: failed to extract CFBundleIdentifier from '%s'", "CopyBundleIDForPath", a1);
  }
  Identifier = 0;
  if (SHIBYTE(v10) < 0)
    goto LABEL_30;
LABEL_7:
  CFBundle::~CFBundle((CFBundle *)v11);
  return Identifier;
}

void sub_100040EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  CFBundle::~CFBundle((CFBundle *)&a35);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__0(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

intptr_t ___ZN11MachProcess16PrepareForAttachEPKc19nub_launch_flavor_tbR8DNBError_block_invoke(uint64_t a1, void *a2)
{
  if (a2)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(a2, "code");

  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
}

void __copy_helper_block_e8_32o40r48r(uint64_t a1, const void **a2)
{
  _Block_object_assign((void *)(a1 + 32), a2[4], 3);
  _Block_object_assign((void *)(a1 + 40), a2[5], 8);
  _Block_object_assign((void *)(a1 + 48), a2[6], 8);
}

void __destroy_helper_block_e8_32o40r48r(const void **a1)
{
  _Block_object_dispose(a1[6], 8);
  _Block_object_dispose(a1[5], 8);
  _Block_object_dispose(a1[4], 3);
}

void SetFBSError(int a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  std::string *p_s;
  std::string __s;

  *(_DWORD *)a3 = a1;
  *(_DWORD *)(a3 + 4) = 5;
  if (*(char *)(a3 + 31) < 0)
  {
    **(_BYTE **)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  else
  {
    *(_BYTE *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 31) = 0;
  }
  v5 = (void *)FBSOpenApplicationErrorCodeToString();
  *((_BYTE *)&__s.__r_.__value_.__s + 23) = 17;
  strcpy((char *)&__s, "unknown FBS error");
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(_QWORD *)(a2 + 8))
      goto LABEL_6;
  }
  else if (*(_BYTE *)(a2 + 23))
  {
LABEL_6:
    std::string::operator=(&__s, (const std::string *)a2);
    goto LABEL_10;
  }
  if (v5)
    std::string::assign(&__s, (const std::string::value_type *)objc_msgSend(v5, "UTF8String"));
LABEL_10:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
    if (!__s.__r_.__value_.__r.__words[0])
      goto LABEL_15;
  }
  else
  {
    p_s = &__s;
  }
  if (p_s->__r_.__value_.__s.__data_[0])
  {
    std::string::assign((std::string *)(a3 + 8), (const std::string::value_type *)p_s);
    goto LABEL_17;
  }
LABEL_15:
  if ((*(char *)(a3 + 31) & 0x80000000) == 0)
  {
    *(_BYTE *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 31) = 0;
LABEL_17:
    if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_18;
  }
  **(_BYTE **)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
LABEL_18:
    operator delete(__s.__r_.__value_.__l.__data_);
}

void sub_1000410D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id MachProcess::CheckForProcess(uint64_t a1, int a2)
{
  Class *v3;
  id v5;
  id v6;

  if (!a1)
    return 0;
  if (a2 == 5)
  {
    v3 = (Class *)FBSSystemService_ptr;
    goto LABEL_7;
  }
  if (a2 != 4)
    return 0;
  v3 = (Class *)BKSSystemService_ptr;
LABEL_7:
  v5 = objc_alloc_init(*v3);
  v6 = objc_msgSend(v5, "pidForApplication:", a1);

  return v6;
}

void MachProcess::CleanupAfterAttach(MachProcess *this, int a2, DNBError *a3, DNBError *a4)
{
  if (this)
  {
    if (a2 == 4)
    {
      if ((a3 & 1) == 0)
        MachProcess::BKSCleanupAfterAttach(this, a4, a3);
      goto LABEL_9;
    }
    if (a2 == 5)
    {
      if ((a3 & 1) == 0)
        MachProcess::FBSCleanupAfterAttach(this, a4, a3);
LABEL_9:
      CFRelease(this);
    }
  }
}

id MachProcess::FBSCleanupAfterAttach(MachProcess *this, DNBError *a2, DNBError *a3)
{
  id v5;
  id v6;
  NSNumber *v7;
  id v8;
  const char *v9;
  const char *v10;

  v5 = objc_alloc_init((Class)NSAutoreleasePool);
  v6 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  v7 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1);
  objc_msgSend(v6, "setObject:forKey:", v7, FBSDebugOptionKeyCancelDebugOnNextLaunch);
  v8 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  objc_msgSend(v8, "setObject:forKey:", v6, FBSOpenApplicationOptionKeyDebuggingOptions);
  if ((CallBoardSystemServiceOpenApplication<FBSSystemService,FBSOpenApplicationErrorCode,(FBSOpenApplicationErrorCode)0,&(SetFBSError(long,std::string,DNBError &))>(this, v8, (uint64_t)a2, 0) & 1) == 0&& DNBLogEnabled())
  {
    v9 = (const char *)-[MachProcess UTF8String](this, "UTF8String");
    v10 = (const char *)DNBError::AsString(a2);
    _DNBLogError("error trying to cancel debug on next launch for %s: %s", v9, v10);
  }
  return objc_msgSend(v5, "drain");
}

id MachProcess::BKSCleanupAfterAttach(MachProcess *this, DNBError *a2, DNBError *a3)
{
  id v5;
  id v6;
  NSNumber *v7;
  id v8;
  const char *v9;
  const char *v10;

  v5 = objc_alloc_init((Class)NSAutoreleasePool);
  v6 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  v7 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1);
  objc_msgSend(v6, "setObject:forKey:", v7, BKSDebugOptionKeyCancelDebugOnNextLaunch);
  v8 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  objc_msgSend(v8, "setObject:forKey:", v6, BKSOpenApplicationOptionKeyDebuggingOptions);
  if ((CallBoardSystemServiceOpenApplication<BKSSystemService,BKSOpenApplicationErrorCode,(BKSOpenApplicationErrorCode)0,&(SetBKSError(long,std::string,DNBError &))>(this, v8, (uint64_t)a2, 0) & 1) == 0&& DNBLogEnabled())
  {
    v9 = (const char *)-[MachProcess UTF8String](this, "UTF8String");
    v10 = (const char *)DNBError::AsString(a2);
    _DNBLogError("error trying to cancel debug on next launch for %s: %s", v9, v10);
  }
  return objc_msgSend(v5, "drain");
}

const char **MachProcess::LaunchForDebug(unsigned int *a1, char *a2, _QWORD *a3, const char **a4, const char **a5, char *a6, char *a7, char *a8, char a9, unsigned int a10, int a11, char *a12, int8x16_t **a13, uint64_t a14)
{
  DNBArchProtocol *v22;
  const char **v23;
  MachProcess *v24;
  DNBError *v25;
  DNBArchProtocol *CPUType;
  int CPUSubType;
  unsigned int v28;
  const char *v29;
  const char **v30;
  __int128 v31;
  const char *v32;
  size_t v33;
  size_t v34;
  __int128 *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  size_t v47;
  void *v48;
  void *v49;
  uint64_t v50;
  unsigned int v51;
  size_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  const char *p_dst;
  uint64_t v84;
  uint64_t v85;
  int v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 *v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 *v102;
  char *v104;
  char *v105;
  MachProcess *v106;
  DNBError *v107;
  _DWORD v108[2];
  void *v109;
  uint64_t v110;
  uint64_t v111;
  void *__p[2];
  unint64_t v113;
  void *__src[2];
  unint64_t v115;
  __int128 __dst;
  int64_t v117;

  MachProcess::Clear((MachProcess *)a1, 0);
  if (DNBLogEnabledForAny(2))
    _DNBLogThreaded("%s( path = '%s', argv = %p, envp = %p, launch_flavor = %u, disable_aslr = %d)", "LaunchForDebug", a2, a3, a4, a10, a11);
  v22 = (DNBArchProtocol *)MachProcess::SetState((uint64_t)a1, 3u);
  switch(a10)
  {
    case 1u:
      CPUType = (DNBArchProtocol *)DNBArchProtocol::GetCPUType(v22);
      CPUSubType = DNBArchProtocol::GetCPUSubType(CPUType);
      LODWORD(v106) = a11;
      LOBYTE(v105) = a9;
      v28 = MachProcess::PosixSpawnChildForPTraceDebugging((MachProcess *)a2, (const char *)CPUType, CPUSubType, (char *const *)a3, a4, a5, a6, a7, a8, v105, a1, v106, (DNBError *)a14, v107);
      *a1 = v28;
      if (!v28)
        goto LABEL_31;
      goto LABEL_5;
    case 2u:
      v51 = MachProcess::ForkChildForPTraceDebugging((MachProcess *)a2, (char *const *)a3, v23, (const char **)a1, v24, v25);
      *a1 = v51;
      if (!v51)
        goto LABEL_31;
      goto LABEL_5;
    case 4u:
      v47 = strlen(a2);
      if (v47 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v48 = (void *)v47;
      if (v47 >= 0x17)
      {
        v80 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v47 | 7) != 0x17)
          v80 = v47 | 7;
        v81 = v80 + 1;
        v49 = operator new(v80 + 1);
        __p[1] = v48;
        v113 = v81 | 0x8000000000000000;
        __p[0] = v49;
        v50 = a14;
      }
      else
      {
        HIBYTE(v113) = v47;
        v49 = __p;
        v50 = a14;
        if (!v47)
          goto LABEL_58;
      }
      memcpy(v49, a2, (size_t)v48);
LABEL_58:
      *((_BYTE *)v48 + (_QWORD)v49) = 0;
      GetAppBundle(__p, &__dst);
      if (SHIBYTE(v113) < 0)
      {
        operator delete(__p[0]);
        v82 = SHIBYTE(v117);
        if ((SHIBYTE(v117) & 0x80000000) == 0)
          goto LABEL_60;
      }
      else
      {
        v82 = SHIBYTE(v117);
        if ((SHIBYTE(v117) & 0x80000000) == 0)
        {
LABEL_60:
          if (!v82)
            goto LABEL_75;
          a1[110] |= 0x14u;
          p_dst = (const char *)&__dst;
          goto LABEL_74;
        }
      }
      if (!*((_QWORD *)&__dst + 1))
        goto LABEL_75;
      a1[110] |= 0x14u;
      p_dst = (const char *)__dst;
LABEL_74:
      if (MachProcess::BoardServiceLaunchForDebug(a1, p_dst, (const char **)a3, (char **)a4, a9, a11 != 0, a12, a13, v50))goto LABEL_83;
LABEL_75:
      if (DNBLogEnabled())
      {
        v94 = &__dst;
        if (v117 < 0)
          v94 = (__int128 *)__dst;
        _DNBLog(0, (uint64_t)"Failed to launch '%s' with BKS", v88, v89, v90, v91, v92, v93, (uint64_t)v94);
      }
LABEL_90:
      v95 = 1;
      if (SHIBYTE(v117) < 0)
        goto LABEL_84;
LABEL_91:
      if ((v95 & 1) != 0)
        goto LABEL_92;
      return a4;
    case 5u:
      v52 = strlen(a2);
      if (v52 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v53 = (void *)v52;
      if (v52 >= 0x17)
      {
        v84 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v52 | 7) != 0x17)
          v84 = v52 | 7;
        v85 = v84 + 1;
        v54 = operator new(v84 + 1);
        __src[1] = v53;
        v115 = v85 | 0x8000000000000000;
        __src[0] = v54;
        v55 = a14;
      }
      else
      {
        HIBYTE(v115) = v52;
        v54 = __src;
        v55 = a14;
        if (!v52)
          goto LABEL_66;
      }
      memcpy(v54, a2, (size_t)v53);
LABEL_66:
      *((_BYTE *)v53 + (_QWORD)v54) = 0;
      GetAppBundle(__src, &__dst);
      if (SHIBYTE(v115) < 0)
      {
        operator delete(__src[0]);
        v86 = SHIBYTE(v117);
        if ((SHIBYTE(v117) & 0x80000000) == 0)
          goto LABEL_68;
      }
      else
      {
        v86 = SHIBYTE(v117);
        if ((SHIBYTE(v117) & 0x80000000) == 0)
        {
LABEL_68:
          if (!v86)
            goto LABEL_86;
          a1[110] |= 0x18u;
          v87 = (const char *)&__dst;
          goto LABEL_82;
        }
      }
      if (!*((_QWORD *)&__dst + 1))
        goto LABEL_86;
      a1[110] |= 0x18u;
      v87 = (const char *)__dst;
LABEL_82:
      if (!MachProcess::BoardServiceLaunchForDebug(a1, v87, (const char **)a3, (char **)a4, a9, a11 != 0, a12, a13, v55))
      {
LABEL_86:
        if (DNBLogEnabled())
        {
          v102 = &__dst;
          if (v117 < 0)
            v102 = (__int128 *)__dst;
          _DNBLog(0, (uint64_t)"Failed to launch '%s' with FBS", v96, v97, v98, v99, v100, v101, (uint64_t)v102);
        }
        goto LABEL_90;
      }
LABEL_83:
      v95 = 0;
      a4 = (const char **)*a1;
      if ((SHIBYTE(v117) & 0x80000000) == 0)
        goto LABEL_91;
LABEL_84:
      operator delete((void *)__dst);
      if ((v95 & 1) != 0)
      {
LABEL_92:
        if (!*a1)
        {
LABEL_31:
          if (!*(_DWORD *)a14)
          {
            *(_QWORD *)a14 = 0xFFFFFFFFLL;
            if (*(char *)(a14 + 31) < 0)
            {
              **(_BYTE **)(a14 + 8) = 0;
              *(_QWORD *)(a14 + 16) = 0;
            }
            else
            {
              *(_BYTE *)(a14 + 8) = 0;
              *(_BYTE *)(a14 + 31) = 0;
            }
          }
          return (const char **)*a1;
        }
LABEL_5:
        std::string::assign((std::string *)a1 + 1, a2);
        v29 = (const char *)*a3;
        if (*a3)
        {
          v30 = (const char **)(a3 + 1);
          do
          {
            v33 = strlen(v29);
            if (v33 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            v34 = v33;
            if (v33 >= 0x17)
            {
              v36 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v33 | 7) != 0x17)
                v36 = v33 | 7;
              v37 = v36 + 1;
              v35 = (__int128 *)operator new(v36 + 1);
              *((_QWORD *)&__dst + 1) = v34;
              v117 = v37 | 0x8000000000000000;
              *(_QWORD *)&__dst = v35;
            }
            else
            {
              HIBYTE(v117) = v33;
              v35 = &__dst;
              if (!v33)
                goto LABEL_17;
            }
            memmove(v35, v29, v34);
LABEL_17:
            *((_BYTE *)v35 + v34) = 0;
            v38 = *((_QWORD *)a1 + 7);
            if (v38 < *((_QWORD *)a1 + 8))
            {
              v31 = __dst;
              *(_QWORD *)(v38 + 16) = v117;
              *(_OWORD *)v38 = v31;
              *((_QWORD *)a1 + 7) = v38 + 24;
            }
            else
            {
              v39 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a1 + 6, (uint64_t)&__dst);
              v40 = SHIBYTE(v117);
              *((_QWORD *)a1 + 7) = v39;
              if (v40 < 0)
                operator delete((void *)__dst);
            }
            v32 = *v30++;
            v29 = v32;
          }
          while (v32);
        }
        MachTask::StartExceptionThread((uint64_t)(a1 + 26), a13, a14);
        if (*(_DWORD *)a14)
        {
          if (!DNBError::AsString((DNBError *)a14))
            std::string::assign((std::string *)(a14 + 8), "unable to start the exception thread");
          if (DNBLogEnabled())
            _DNBLog(0, (uint64_t)"Could not get inferior's Mach exception port, sending ptrace PT_KILL and exiting.", v41, v42, v43, v44, v45, v46, (uint64_t)v104);
          ptrace(8, *a1, 0, 0);
          a4 = 0;
          *a1 = 0;
          return a4;
        }
        if (DNBLogEnabledForAny(2))
          _DNBLogThreaded("MachProcess::%s()", "StartSTDIOThread");
        pthread_create((pthread_t *)a1 + 56, 0, (void *(__cdecl *)(void *))MachProcess::STDIOThread, a1);
        if (a10 == 1)
        {
          MachProcess::SetState((uint64_t)a1, 2u);
          *__error() = 0;
          if (DNBLogEnabled())
          {
            v62 = getpid();
            _DNBLog(0, (uint64_t)"[LaunchAttach] (%d) About to ptrace(PT_ATTACHEXC, %d)...", v63, v64, v65, v66, v67, v68, v62);
          }
          v69 = ptrace(14, *a1, 0, 0);
          v70 = *__error();
          if (DNBLogEnabled())
          {
            v71 = getpid();
            _DNBLog(0, (uint64_t)"[LaunchAttach] (%d) Completed ptrace(PT_ATTACHEXC, %d) == %d", v72, v73, v74, v75, v76, v77, v71);
          }
          if (v69)
          {
            MachProcess::SetState((uint64_t)a1, 9u);
            v108[0] = v70;
            v108[1] = 2;
            v110 = 0;
            v111 = 0;
            v109 = 0;
            if (DNBLogEnabledForAny(2))
            {
              v78 = *a1;
              v79 = (const char *)DNBError::AsString((DNBError *)v108);
              _DNBLogThreaded("error: failed to attach to spawned pid %d (err = %i, errno = %i (%s))", v78, v69, v70, v79);
            }
            snprintf((char *)&__dst, 0x400uLL, "Failed to attach to pid %d, LaunchForDebug() unable to ptrace(PT_ATTACHEXC)", *a1);
            if ((_BYTE)__dst)
            {
              std::string::assign((std::string *)(a14 + 8), (const std::string::value_type *)&__dst);
            }
            else if (*(char *)(a14 + 31) < 0)
            {
              **(_BYTE **)(a14 + 8) = 0;
              *(_QWORD *)(a14 + 16) = 0;
            }
            else
            {
              *(_BYTE *)(a14 + 8) = 0;
              *(_BYTE *)(a14 + 31) = 0;
            }
            if (SHIBYTE(v111) < 0)
              operator delete(v109);
            return (const char **)*a1;
          }
          a1[110] |= 1u;
          if (DNBLogEnabledForAny(2))
            _DNBLogThreaded("successfully spawned pid %d", *a1);
        }
        *(_QWORD *)a14 = 0;
        if (*(char *)(a14 + 31) < 0)
        {
          **(_BYTE **)(a14 + 8) = 0;
          *(_QWORD *)(a14 + 16) = 0;
        }
        else
        {
          *(_BYTE *)(a14 + 8) = 0;
          *(_BYTE *)(a14 + 31) = 0;
        }
        return (const char **)*a1;
      }
      return a4;
    default:
      if (DNBLogEnabled())
        _DNBLog(0, (uint64_t)"Failed to launch: invalid launch flavor: %d", v56, v57, v58, v59, v60, v61, a10);
      *(_QWORD *)a14 = 0xFFFFFFFFLL;
      a4 = 0;
      if (*(char *)(a14 + 31) < 0)
      {
        **(_BYTE **)(a14 + 8) = 0;
        *(_QWORD *)(a14 + 16) = 0;
      }
      else
      {
        *(_BYTE *)(a14 + 8) = 0;
        *(_BYTE *)(a14 + 31) = 0;
      }
      return a4;
  }
}

void sub_100041BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a25 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MachProcess::ForkChildForPTraceDebugging(MachProcess *this, char *const *a2, const char **a3, const char **a4, MachProcess *a5, DNBError *a6)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  gid_t v13;
  int v14;
  int v15;

  v15 = 0;
  PseudoTerminal::PseudoTerminal((PseudoTerminal *)&v14);
  v9 = PseudoTerminal::Fork(&v14, &v15);
  v10 = v9;
  if ((v9 & 0x80000000) == 0)
  {
    if (!(_DWORD)v9)
    {
      ptrace(0, 0, 0, 0);
      ptrace(12, 0, 0, 0);
      v13 = getgid();
      if (!setgid(v13))
      {
        setpgid(0, 0);
        sleep(1u);
        execv((const char *)this, a2);
      }
      exit(127);
    }
    setpgid(v9, v9);
    if (a4)
    {
      v11 = v14;
      v14 = -1;
      *((_DWORD *)a4 + 3) = v11;
      *((_DWORD *)a4 + 4) = v11;
      *((_DWORD *)a4 + 5) = v11;
    }
  }
  PseudoTerminal::~PseudoTerminal((PseudoTerminal *)&v14);
  return v10;
}

void sub_100041D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10)
{
  PseudoTerminal::~PseudoTerminal((PseudoTerminal *)&a10);
  _Unwind_Resume(a1);
}

uint64_t MachProcess::BoardServiceLaunchForDebug(unsigned int *a1, const char *a2, const char **a3, char **a4, char a5, int a6, char *a7, int8x16_t **a8, uint64_t a9)
{
  unsigned int v17;
  const char *v18;
  const char **v19;
  __int128 v20;
  const char *v21;
  size_t v22;
  size_t v23;
  __int128 *p_dst;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 __dst;
  unint64_t v67;

  if (DNBLogEnabledForAny(2))
    _DNBLogThreaded("%s( '%s', argv)", "BoardServiceLaunchForDebug", a2);
  MachProcess::SetState((uint64_t)a1, 3u);
  v17 = MachProcess::BoardServiceForkChildForPTraceDebugging((MachProcess *)a1, a2, a3, a4, a5, a6, a7, (DNBError *)a9);
  *a1 = v17;
  if (v17)
  {
    std::string::assign((std::string *)a1 + 1, a2);
    v18 = *a3;
    if (*a3)
    {
      v19 = a3 + 1;
      do
      {
        v22 = strlen(v18);
        if (v22 >= 0x7FFFFFFFFFFFFFF8)
          std::string::__throw_length_error[abi:ne180100]();
        v23 = v22;
        if (v22 >= 0x17)
        {
          v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v22 | 7) != 0x17)
            v25 = v22 | 7;
          v26 = v25 + 1;
          p_dst = (__int128 *)operator new(v25 + 1);
          *((_QWORD *)&__dst + 1) = v23;
          v67 = v26 | 0x8000000000000000;
          *(_QWORD *)&__dst = p_dst;
        }
        else
        {
          HIBYTE(v67) = v22;
          p_dst = &__dst;
          if (!v22)
            goto LABEL_16;
        }
        memmove(p_dst, v18, v23);
LABEL_16:
        *((_BYTE *)p_dst + v23) = 0;
        v27 = *((_QWORD *)a1 + 7);
        if (v27 < *((_QWORD *)a1 + 8))
        {
          v20 = __dst;
          *(_QWORD *)(v27 + 16) = v67;
          *(_OWORD *)v27 = v20;
          *((_QWORD *)a1 + 7) = v27 + 24;
        }
        else
        {
          v28 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a1 + 6, (uint64_t)&__dst);
          v29 = SHIBYTE(v67);
          *((_QWORD *)a1 + 7) = v28;
          if (v29 < 0)
            operator delete((void *)__dst);
        }
        v21 = *v19++;
        v18 = v21;
      }
      while (v21);
    }
    MachTask::StartExceptionThread((uint64_t)(a1 + 26), a8, a9);
    if (*(_DWORD *)a9)
    {
      if (DNBError::AsString((DNBError *)a9))
      {
        if (!DNBLogEnabled())
        {
LABEL_23:
          ptrace(8, *a1, 0, 0);
          result = 0;
          *a1 = 0;
          return result;
        }
      }
      else
      {
        std::string::assign((std::string *)(a9 + 8), "unable to start the exception thread");
        if (!DNBLogEnabled())
          goto LABEL_23;
      }
      v30 = getpid();
      _DNBLog(0, (uint64_t)"[LaunchAttach] END (%d) Could not get inferior's Mach exception port, sending ptrace PT_KILL to pid %i and exiting.", v31, v32, v33, v34, v35, v36, v30);
      goto LABEL_23;
    }
    if (DNBLogEnabledForAny(2))
      _DNBLogThreaded("MachProcess::%s()", "StartSTDIOThread");
    pthread_create((pthread_t *)a1 + 56, 0, (void *(__cdecl *)(void *))MachProcess::STDIOThread, a1);
    MachProcess::SetState((uint64_t)a1, 2u);
    if (DNBLogEnabled())
    {
      v38 = getpid();
      _DNBLog(0, (uint64_t)"[LaunchAttach] (%d) About to ptrace(PT_ATTACHEXC, %d)...", v39, v40, v41, v42, v43, v44, v38);
    }
    v45 = ptrace(14, *a1, 0, 0);
    if (DNBLogEnabled())
    {
      v46 = getpid();
      _DNBLog(0, (uint64_t)"[LaunchAttach] (%d) Completed ptrace(PT_ATTACHEXC, %d) == %d", v47, v48, v49, v50, v51, v52, v46);
    }
    if (v45)
    {
      std::string::assign((std::string *)(a9 + 8), "Failed to attach to pid: BoardServiceLaunchForDebug() unable to ptrace(PT_ATTACHEXC)");
      MachProcess::SetState((uint64_t)a1, 9u);
      if (DNBLogEnabled())
      {
        v65 = getpid();
        _DNBLog(0, (uint64_t)"[LaunchAttach] END (%d) error: failed to attach to pid %d", v53, v54, v55, v56, v57, v58, v65);
      }
    }
    else
    {
      a1[110] |= 1u;
      if (DNBLogEnabled())
        _DNBLog(0, (uint64_t)"[LaunchAttach] successfully attached to pid %d", v59, v60, v61, v62, v63, v64, *a1);
    }
  }
  return *a1;
}

void sub_100042080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MachProcess::PosixSpawnChildForPTraceDebugging(MachProcess *this, const char *a2, int a3, char *const *a4, const char **a5, const char **a6, char *a7, char *a8, char *a9, const char *a10, _DWORD *a11, MachProcess *a12, DNBError *a13, DNBError *a14)
{
  char *v19;
  int v20;
  __int16 v21;
  int v22;
  const char *v23;
  uint64_t v24;
  uint64_t (*v26)(posix_spawnattr_t *, uint64_t, cpu_type_t *, int *, size_t *);
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  pid_t v37;
  DNBArchProtocol *v38;
  size_t v39;
  int AvailablePrimary;
  pid_t v42;
  posix_spawn_file_actions_t v43;
  int v44;
  sigset_t v45;
  sigset_t v46;
  posix_spawnattr_t v47;
  int v48;
  cpu_type_t v49;
  size_t v50;
  unsigned int v51;
  size_t v52;
  size_t v53[2];
  __int128 v54;
  __int128 v55;

  v19 = a9;
  v48 = a3;
  v49 = (int)a2;
  if (DNBLogEnabledForAny(2))
    _DNBLogThreaded("%s(path='%s', argv=%p, envp=%p, working_dir=%s, stdin=%s, stdout=%s stderr=%s, no-stdio=%i)", "PosixSpawnChildForPTraceDebugging", (const char *)this, a4, a5, (const char *)a6, a7, a8, a9, a10);
  v47 = 0;
  v20 = posix_spawnattr_init(&v47);
  *(_DWORD *)a13 = v20;
  *((_DWORD *)a13 + 1) = 2;
  if (*((char *)a13 + 31) < 0)
  {
    **((_BYTE **)a13 + 1) = 0;
    *((_QWORD *)a13 + 2) = 0;
    if (!*(_DWORD *)a13)
      goto LABEL_7;
  }
  else
  {
    *((_BYTE *)a13 + 8) = 0;
    *((_BYTE *)a13 + 31) = 0;
    if (!v20)
    {
LABEL_7:
      if (!DNBLogCheckLogBit(2))
        goto LABEL_9;
    }
  }
  DNBError::LogThreaded(a13, "::posix_spawnattr_init(&attr)");
LABEL_9:
  if (*(_DWORD *)a13)
    return 0;
  if ((_DWORD)a12)
    v21 = 398;
  else
    v21 = 142;
  v45 = -1;
  v46 = 0;
  posix_spawnattr_setsigmask(&v47, &v46);
  posix_spawnattr_setsigdefault(&v47, &v45);
  v22 = posix_spawnattr_setflags(&v47, v21);
  *(_DWORD *)a13 = v22;
  *((_DWORD *)a13 + 1) = 2;
  if (*((char *)a13 + 31) < 0)
  {
    **((_BYTE **)a13 + 1) = 0;
    *((_QWORD *)a13 + 2) = 0;
    if (!*(_DWORD *)a13)
      goto LABEL_17;
  }
  else
  {
    *((_BYTE *)a13 + 8) = 0;
    *((_BYTE *)a13 + 31) = 0;
    if (!v22)
    {
LABEL_17:
      if (!DNBLogCheckLogBit(2))
        goto LABEL_21;
    }
  }
  v23 = " | _POSIX_SPAWN_DISABLE_ASLR";
  if (!(_DWORD)a12)
    v23 = (const char *)&unk_1000528BD;
  DNBError::LogThreaded(a13, "::posix_spawnattr_setflags(&attr, POSIX_SPAWN_START_SUSPENDED%s)", v23);
LABEL_21:
  if (*(_DWORD *)a13)
    return 0;
  if (v49)
  {
    v53[0] = 0;
    if (v48)
    {
      v26 = (uint64_t (*)(posix_spawnattr_t *, uint64_t, cpu_type_t *, int *, size_t *))dlsym((void *)0xFFFFFFFFFFFFFFFELL, "posix_spawnattr_setarchpref_np");
      if (v26)
      {
        v27 = v26(&v47, 1, &v49, &v48, v53);
        *(_DWORD *)a13 = v27;
        *((_DWORD *)a13 + 1) = 1;
        if (*((char *)a13 + 31) < 0)
        {
          **((_BYTE **)a13 + 1) = 0;
          *((_QWORD *)a13 + 2) = 0;
          v27 = *(_DWORD *)a13;
        }
        else
        {
          *((_BYTE *)a13 + 8) = 0;
          *((_BYTE *)a13 + 31) = 0;
        }
        if (!v27 && !DNBLogCheckLogBit(2))
          goto LABEL_41;
        DNBError::LogThreaded(a13, "::posix_spawnattr_setarchpref_np(&attr, 1, cpu_type = 0x%8.8x, cpu_subtype = 0x%8.8x, count => %llu)", v49, v48, v53[0]);
        if (*(_DWORD *)a13 || v53[0] != 1)
          return 0;
        if (!v27)
          goto LABEL_43;
      }
    }
    v28 = posix_spawnattr_setbinpref_np(&v47, 1uLL, &v49, v53);
    *(_DWORD *)a13 = v28;
    *((_DWORD *)a13 + 1) = 2;
    if (*((char *)a13 + 31) < 0)
    {
      **((_BYTE **)a13 + 1) = 0;
      *((_QWORD *)a13 + 2) = 0;
      if (!*(_DWORD *)a13)
        goto LABEL_39;
    }
    else
    {
      *((_BYTE *)a13 + 8) = 0;
      *((_BYTE *)a13 + 31) = 0;
      if (!v28)
      {
LABEL_39:
        if (DNBLogCheckLogBit(2))
          goto LABEL_40;
LABEL_41:
        if (*(_DWORD *)a13 || v53[0] != 1)
          return 0;
        goto LABEL_43;
      }
    }
LABEL_40:
    DNBError::LogThreaded(a13, "::posix_spawnattr_setbinpref_np(&attr, 1, cpu_type = 0x%8.8x, count => %llu)", v49, v53[0]);
    goto LABEL_41;
  }
LABEL_43:
  PseudoTerminal::PseudoTerminal((PseudoTerminal *)&v44);
  v43 = 0;
  v29 = posix_spawn_file_actions_init(&v43);
  v30 = v29;
  *(_DWORD *)a13 = v29;
  *((_DWORD *)a13 + 1) = 2;
  if (*((char *)a13 + 31) < 0)
  {
    **((_BYTE **)a13 + 1) = 0;
    *((_QWORD *)a13 + 2) = 0;
    v30 = *(_DWORD *)a13;
    if (*(_DWORD *)a13)
      goto LABEL_48;
  }
  else
  {
    *((_BYTE *)a13 + 8) = 0;
    *((_BYTE *)a13 + 31) = 0;
    if (v29)
      goto LABEL_48;
  }
  if (!DNBLogCheckLogBit(2))
  {
    v42 = 0;
    goto LABEL_59;
  }
LABEL_48:
  DNBError::LogThreaded(a13, "::posix_spawn_file_actions_init(&file_actions)");
  v42 = 0;
  if (!v30)
  {
LABEL_59:
    AvailablePrimary = -1;
    if (!a7 && !a8 && !a9)
    {
      if ((a10 & 1) != 0)
      {
        a8 = 0;
        v19 = 0;
        AvailablePrimary = -1;
        goto LABEL_70;
      }
      AvailablePrimary = PseudoTerminal::OpenFirstAvailablePrimary((PseudoTerminal *)&v44, 131074);
      if (AvailablePrimary)
      {
        a8 = 0;
        v19 = 0;
        goto LABEL_70;
      }
      v19 = PseudoTerminal::SecondaryName((PseudoTerminal *)&v44);
      AvailablePrimary = 0;
      a8 = v19;
      a7 = v19;
    }
    if ((a10 & 1) == 0 && a7 && *a7)
    {
LABEL_71:
      if ((a10 & 1) != 0 || !a8 || !*a8)
        a8 = "/dev/null";
      if ((a10 & 1) != 0 || !v19 || !*v19)
        v19 = "/dev/null";
      v32 = posix_spawn_file_actions_addopen(&v43, 0, a7, 0x20000, 0);
      *(_DWORD *)a13 = v32;
      *((_DWORD *)a13 + 1) = 2;
      if (*((char *)a13 + 31) < 0)
      {
        **((_BYTE **)a13 + 1) = 0;
        *((_QWORD *)a13 + 2) = 0;
        if (!*(_DWORD *)a13)
          goto LABEL_83;
      }
      else
      {
        *((_BYTE *)a13 + 8) = 0;
        *((_BYTE *)a13 + 31) = 0;
        if (!v32)
        {
LABEL_83:
          if (!DNBLogCheckLogBit(2))
            goto LABEL_85;
        }
      }
      DNBError::LogThreaded(a13, "::posix_spawn_file_actions_addopen (&file_actions, filedes=STDIN_FILENO, path='%s')", a7);
LABEL_85:
      v33 = posix_spawn_file_actions_addopen(&v43, 1, a8, 131585, 0x1A0u);
      *(_DWORD *)a13 = v33;
      *((_DWORD *)a13 + 1) = 2;
      if (*((char *)a13 + 31) < 0)
      {
        **((_BYTE **)a13 + 1) = 0;
        *((_QWORD *)a13 + 2) = 0;
        if (!*(_DWORD *)a13)
          goto LABEL_89;
      }
      else
      {
        *((_BYTE *)a13 + 8) = 0;
        *((_BYTE *)a13 + 31) = 0;
        if (!v33)
        {
LABEL_89:
          if (!DNBLogCheckLogBit(2))
            goto LABEL_91;
        }
      }
      DNBError::LogThreaded(a13, "::posix_spawn_file_actions_addopen (&file_actions, filedes=STDOUT_FILENO, path='%s')", a8);
LABEL_91:
      v34 = posix_spawn_file_actions_addopen(&v43, 2, v19, 131585, 0x1A0u);
      *(_DWORD *)a13 = v34;
      *((_DWORD *)a13 + 1) = 2;
      if (*((char *)a13 + 31) < 0)
      {
        **((_BYTE **)a13 + 1) = 0;
        *((_QWORD *)a13 + 2) = 0;
        if (!*(_DWORD *)a13)
          goto LABEL_95;
      }
      else
      {
        *((_BYTE *)a13 + 8) = 0;
        *((_BYTE *)a13 + 31) = 0;
        if (!v34)
        {
LABEL_95:
          if (!DNBLogCheckLogBit(2))
            goto LABEL_97;
        }
      }
      DNBError::LogThreaded(a13, "::posix_spawn_file_actions_addopen (&file_actions, filedes=STDERR_FILENO, path='%s')", v19);
LABEL_97:
      if (a6)
        chdir((const char *)a6);
      v35 = posix_spawnp(&v42, (const char *)this, &v43, &v47, a4, (char *const *)a5);
      *(_DWORD *)a13 = v35;
      *((_DWORD *)a13 + 1) = 2;
      if (*((char *)a13 + 31) < 0)
      {
        **((_BYTE **)a13 + 1) = 0;
        *((_QWORD *)a13 + 2) = 0;
        if (*(_DWORD *)a13)
          goto LABEL_104;
      }
      else
      {
        *((_BYTE *)a13 + 8) = 0;
        *((_BYTE *)a13 + 31) = 0;
        if (v35)
          goto LABEL_104;
      }
      if (!DNBLogCheckLogBit(2))
        goto LABEL_105;
LABEL_104:
      DNBError::LogThreaded(a13, "::posix_spawnp(pid => %i, path = '%s', file_actions = %p, attr = %p, argv = %p, envp = %p)", v42, (const char *)this, &v43, &v47, a4, a5);
      goto LABEL_105;
    }
LABEL_70:
    a7 = "/dev/null";
    goto LABEL_71;
  }
  if (a6)
    chdir((const char *)a6);
  v31 = posix_spawnp(&v42, (const char *)this, 0, &v47, a4, (char *const *)a5);
  *(_DWORD *)a13 = v31;
  *((_DWORD *)a13 + 1) = 2;
  if (*((char *)a13 + 31) < 0)
  {
    **((_BYTE **)a13 + 1) = 0;
    *((_QWORD *)a13 + 2) = 0;
    if (!*(_DWORD *)a13)
      goto LABEL_55;
LABEL_56:
    DNBError::LogThreaded(a13, "::posix_spawnp(pid => %i, path = '%s', file_actions = %p, attr = %p, argv = %p, envp = %p)", v42, (const char *)this, 0, &v47, a4, a5);
    goto LABEL_57;
  }
  *((_BYTE *)a13 + 8) = 0;
  *((_BYTE *)a13 + 31) = 0;
  if (v31)
    goto LABEL_56;
LABEL_55:
  if (DNBLogCheckLogBit(2))
    goto LABEL_56;
LABEL_57:
  AvailablePrimary = -1;
LABEL_105:
  if (*(_DWORD *)a13)
    v42 = 0;
  if (a11 && !AvailablePrimary)
  {
    v36 = v44;
    v44 = -1;
    a11[3] = v36;
    a11[4] = v36;
    a11[5] = v36;
  }
  posix_spawnattr_destroy(&v47);
  v37 = v42;
  if (v42)
  {
    v54 = 0u;
    v55 = 0u;
    *(_OWORD *)v53 = 0u;
    v52 = 12;
    if (sysctlnametomib("sysctl.proc_cputype", (int *)v53, &v52))
    {
      v38 = 0;
    }
    else
    {
      v39 = v52;
      *((_DWORD *)v53 + v52) = v37;
      v52 = v39 + 1;
      v51 = 0;
      v50 = 4;
      if (sysctl((int *)v53, v39 + 1, &v51, &v50, 0, 0))
        v38 = 0;
      else
        v38 = (DNBArchProtocol *)v51;
    }
    if (DNBLogEnabledForAny(2))
      _DNBLogThreaded("MachProcess::%s() pid=%i, cpu_type=0x%8.8x", "PosixSpawnChildForPTraceDebugging", v42, (_DWORD)v38);
    if ((_DWORD)v38)
      DNBArchProtocol::SetArchitecture(v38, 0);
  }
  if (!v30)
  {
    *(_OWORD *)v53 = 0u;
    v54 = 0u;
    v53[0] = posix_spawn_file_actions_destroy(&v43) | 0x200000000;
    LOBYTE(v53[1]) = 0;
    HIBYTE(v54) = 0;
    if (LODWORD(v53[0]) || DNBLogCheckLogBit(2))
    {
      DNBError::LogThreaded((DNBError *)v53, "::posix_spawn_file_actions_destroy(&file_actions)");
      if (SHIBYTE(v54) < 0)
        operator delete((void *)v53[1]);
    }
  }
  v24 = v42;
  PseudoTerminal::~PseudoTerminal((PseudoTerminal *)&v44);
  return v24;
}

void sub_1000428BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  va_list va;

  va_start(va, a14);
  if (*(char *)(v14 - 113) < 0)
    operator delete(*(void **)(v14 - 136));
  PseudoTerminal::~PseudoTerminal((PseudoTerminal *)va);
  _Unwind_Resume(a1);
}

uint64_t MachProcess::BoardServiceForkChildForPTraceDebugging(MachProcess *this, const char *a2, const char **a3, char **a4, char a5, int a6, char *a7, DNBError *a8)
{
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  unint64_t v19;
  NSMutableArray *v20;
  uint64_t i;
  NSString *v22;
  uint64_t v23;
  id v24;
  char *v25;
  const char **v26;
  char *v27;
  char *v28;
  NSFileManager *v29;
  NSString *v30;
  __CFString *v31;
  int v32;
  uint64_t v33;
  int v34;
  char *v35;
  unsigned int v36;
  int v37;
  id v38;
  void *v39;
  NSNumber *v40;
  NSNumber *v41;
  NSMutableDictionary *v42;
  NSNumber *v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  id v47;
  void *v48;
  NSNumber *v49;
  NSNumber *v50;
  NSMutableDictionary *v51;
  NSNumber *v52;
  NSNumber *v53;
  id v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSNumber *v62;
  id v63;
  int v64;
  char *__s;
  int v67;
  id v68;
  unsigned int v69;
  int v70;
  void *__p[2];
  __int128 v72;

  if (*a3)
  {
    if (DNBLogEnabledForAny(2))
      _DNBLogThreaded("%s( '%s', argv, %p)", "BoardServiceForkChildForPTraceDebugging", a2, this);
    v68 = objc_alloc_init((Class)NSAutoreleasePool);
    v16 = 0;
    v17 = -1;
    do
    {
      v18 = a3[v16++];
      ++v17;
    }
    while (v18);
    v67 = a6;
    __s = a7;
    if (a3[1])
    {
      v19 = v16 - 1;
      v20 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", ~(unint64_t)(v17 != 0) + v16);
      if (v19 >= 2)
      {
        for (i = 1; i != v19; ++i)
        {
          if (!a3[i])
            break;
          v22 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
          if (!v22)
            break;
          -[NSMutableArray addObject:](v20, "addObject:", v22);
        }
      }
    }
    else
    {
      v20 = 0;
    }
    if (*a4)
    {
      v24 = objc_alloc_init((Class)NSMutableDictionary);
      v25 = *a4;
      if (*a4)
      {
        v26 = (const char **)(a4 + 1);
        do
        {
          v28 = strchr(v25, 61);
          if (v28 && v28 != v25)
            objc_msgSend(v24, "setObject:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v28 + 1), objc_msgSend(objc_alloc((Class)NSString), "initWithBytes:length:encoding:", *(v26 - 1), (int)v28 - (int)v25, 4));
          v27 = (char *)*v26++;
          v25 = v27;
        }
        while (v27);
      }
    }
    else
    {
      v24 = 0;
    }
    v29 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
    PseudoTerminal::PseudoTerminal((PseudoTerminal *)&v70);
    if ((a5 & 1) != 0 || PseudoTerminal::OpenFirstAvailablePrimary((PseudoTerminal *)&v70, 131074))
      goto LABEL_25;
    v35 = PseudoTerminal::SecondaryName((PseudoTerminal *)&v70);
    if (DNBLogEnabledForAny(2))
      _DNBLogThreaded("%s() successfully opened primary pty, secondary is %s", "BoardServiceForkChildForPTraceDebugging", v35);
    if (!v35
      || !*v35
      || (chmod(v35, 0x1FFu),
          (v30 = -[NSFileManager stringWithFileSystemRepresentation:length:](v29, "stringWithFileSystemRepresentation:length:", v35, strlen(v35))) == 0))
    {
LABEL_25:
      v30 = -[NSFileManager stringWithFileSystemRepresentation:length:](v29, "stringWithFileSystemRepresentation:length:", "/dev/null", 9);
    }
    v31 = (__CFString *)CopyBundleIDForPath(a2, a8);
    if (!v31)
    {
      objc_msgSend(v68, "drain");
      v23 = 0;
LABEL_76:
      PseudoTerminal::~PseudoTerminal((PseudoTerminal *)&v70);
      return v23;
    }
    v69 = 0;
    v32 = *((_DWORD *)this + 110);
    if ((v32 & 0x10) == 0)
    {
      v33 = *(unsigned int *)this;
      if ((_DWORD)v33)
      {
        if (objc_msgSend(objc_alloc_init((Class)BKSApplicationStateMonitor), "mostElevatedApplicationStateForPID:", v33))
        {
          v34 = *((_DWORD *)this + 110) | 8;
        }
        else
        {
          v36 = objc_msgSend(objc_alloc_init((Class)BKSApplicationStateMonitor), "mostElevatedApplicationStateForPID:", *(unsigned int *)this);
          v34 = *((_DWORD *)this + 110);
          if (v36)
            v34 |= 4u;
        }
        v32 = v34 | 0x10;
        *((_DWORD *)this + 110) = v32;
      }
    }
    if ((v32 & 4) != 0)
    {
      v38 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
      v39 = v38;
      if (v20)
        objc_msgSend(v38, "setObject:forKey:", v20, BKSDebugOptionKeyArguments);
      if (v24)
        objc_msgSend(v39, "setObject:forKey:", v24, BKSDebugOptionKeyEnvironment);
      objc_msgSend(v39, "setObject:forKey:", v30, BKSDebugOptionKeyStandardOutPath);
      objc_msgSend(v39, "setObject:forKey:", v30, BKSDebugOptionKeyStandardErrorPath);
      v40 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1);
      objc_msgSend(v39, "setObject:forKey:", v40, BKSDebugOptionKeyWaitForDebugger);
      if (v67)
      {
        v41 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1);
        objc_msgSend(v39, "setObject:forKey:", v41, BKSDebugOptionKeyDisableASLR);
      }
      v42 = (NSMutableDictionary *)+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
      -[NSMutableDictionary setObject:forKey:](v42, "setObject:forKey:", v39, BKSOpenApplicationOptionKeyDebuggingOptions);
      v43 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1);
      -[NSMutableDictionary setObject:forKey:](v42, "setObject:forKey:", v43, BKSOpenApplicationOptionKeyUnlockDevice);
      *(_OWORD *)__p = 0u;
      v72 = 0u;
      BKSAddEventDataToOptions(v42, __s, (DNBError *)__p);
      if (SHIBYTE(v72) < 0)
        operator delete(__p[1]);
      v37 = CallBoardSystemServiceOpenApplication<BKSSystemService,BKSOpenApplicationErrorCode,(BKSOpenApplicationErrorCode)0,&(SetBKSError(long,std::string,DNBError &))>(v31, v42, (uint64_t)a8, &v69);
      v32 = *((_DWORD *)this + 110);
      if ((v32 & 0x10) != 0)
        goto LABEL_59;
    }
    else
    {
      v37 = 0;
      if ((v32 & 0x10) != 0)
      {
LABEL_59:
        if ((v32 & 8) != 0)
        {
          v47 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
          v48 = v47;
          if (v20)
            objc_msgSend(v47, "setObject:forKey:", v20, FBSDebugOptionKeyArguments);
          if (v24)
            objc_msgSend(v48, "setObject:forKey:", v24, FBSDebugOptionKeyEnvironment);
          objc_msgSend(v48, "setObject:forKey:", v30, FBSDebugOptionKeyStandardOutPath);
          objc_msgSend(v48, "setObject:forKey:", v30, FBSDebugOptionKeyStandardErrorPath);
          v49 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1);
          objc_msgSend(v48, "setObject:forKey:", v49, FBSDebugOptionKeyWaitForDebugger);
          if (v67)
          {
            v50 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1);
            objc_msgSend(v48, "setObject:forKey:", v50, FBSDebugOptionKeyDisableASLR);
          }
          v51 = (NSMutableDictionary *)+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
          -[NSMutableDictionary setObject:forKey:](v51, "setObject:forKey:", v48, FBSOpenApplicationOptionKeyDebuggingOptions);
          v52 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1);
          -[NSMutableDictionary setObject:forKey:](v51, "setObject:forKey:", v52, FBSOpenApplicationOptionKeyUnlockDevice);
          v53 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1);
          -[NSMutableDictionary setObject:forKey:](v51, "setObject:forKey:", v53, FBSOpenApplicationOptionKeyPromptUnlockDevice);
          v54 = +[LSApplicationProxy applicationProxyForBundleURL:](LSApplicationProxy, "applicationProxyForBundleURL:", +[NSURL fileURLWithPath:isDirectory:](NSURL, "fileURLWithPath:isDirectory:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2), 1));
          if (v54)
          {
            if (DNBLogEnabled())
            {
              v55 = objc_msgSend(v54, "sequenceNumber");
              objc_msgSend(objc_msgSend(objc_msgSend(v54, "cacheGUID"), "UUIDString"), "UTF8String");
              _DNBLog(0, (uint64_t)"Sending AppProxy info: sequence no: %lu, GUID: %s.", v56, v57, v58, v59, v60, v61, (uint64_t)v55);
            }
            v62 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v54, "sequenceNumber"));
            -[NSMutableDictionary setObject:forKey:](v51, "setObject:forKey:", v62, FBSOpenApplicationOptionKeyLSSequenceNumber);
            v63 = objc_msgSend(objc_msgSend(v54, "cacheGUID"), "UUIDString");
            -[NSMutableDictionary setObject:forKey:](v51, "setObject:forKey:", v63, FBSOpenApplicationOptionKeyLSCacheGUID);
          }
          *(_OWORD *)__p = 0u;
          v72 = 0u;
          FBSAddEventDataToOptions(v51, __s, (DNBError *)__p);
          if (SHIBYTE(v72) < 0)
            operator delete(__p[1]);
          v37 = CallBoardSystemServiceOpenApplication<FBSSystemService,FBSOpenApplicationErrorCode,(FBSOpenApplicationErrorCode)0,&(SetFBSError(long,std::string,DNBError &))>(v31, v51, (uint64_t)a8, &v69);
        }
        if (v37)
        {
          v64 = v70;
          v70 = -1;
          *((_DWORD *)this + 3) = v64;
          *((_DWORD *)this + 4) = v64;
          *((_DWORD *)this + 5) = v64;
          CFString::UTF8(v31, (uint64_t)this + 1720);
        }
        objc_msgSend(v68, "drain");
        v23 = v69;
        goto LABEL_76;
      }
    }
    v44 = *(unsigned int *)this;
    if ((_DWORD)v44)
    {
      if (objc_msgSend(objc_alloc_init((Class)BKSApplicationStateMonitor), "mostElevatedApplicationStateForPID:", v44))
      {
        v45 = *((_DWORD *)this + 110) | 8;
      }
      else
      {
        v46 = objc_msgSend(objc_alloc_init((Class)BKSApplicationStateMonitor), "mostElevatedApplicationStateForPID:", *(unsigned int *)this);
        v45 = *((_DWORD *)this + 110);
        if (v46)
          v45 |= 4u;
      }
      v32 = v45 | 0x10;
      *((_DWORD *)this + 110) = v32;
    }
    goto LABEL_59;
  }
  return 0;
}

void sub_10004303C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  PseudoTerminal::~PseudoTerminal((PseudoTerminal *)&a16);
  _Unwind_Resume(a1);
}

uint64_t MachProcess::ProcessUsingBackBoard(MachProcess *this)
{
  unsigned int v1;
  uint64_t v3;
  int v4;
  unsigned int v5;

  v1 = *((_DWORD *)this + 110);
  if ((v1 & 0x10) == 0)
  {
    v3 = *(unsigned int *)this;
    if ((_DWORD)v3)
    {
      if (objc_msgSend(objc_alloc_init((Class)BKSApplicationStateMonitor), "mostElevatedApplicationStateForPID:", v3))
      {
        v4 = *((_DWORD *)this + 110) | 8;
      }
      else
      {
        v5 = objc_msgSend(objc_alloc_init((Class)BKSApplicationStateMonitor), "mostElevatedApplicationStateForPID:", *(unsigned int *)this);
        v4 = *((_DWORD *)this + 110);
        if (v5)
          v4 |= 4u;
      }
      v1 = v4 | 0x10;
      *((_DWORD *)this + 110) = v1;
    }
  }
  return (v1 >> 2) & 1;
}

uint64_t BKSAddEventDataToOptions(NSMutableDictionary *a1, char *__s, DNBError *a3)
{
  void **v5;
  void **v6;
  char v7;
  std::string *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  std::string *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  void *v26;
  uint64_t v28;
  uint64_t v29;
  std::string v30;
  void *__p;
  void **v32;
  uint64_t v33;

  __p = 0;
  v32 = 0;
  v33 = 0;
  SplitEventData(__s, (uint64_t)&__p);
  v5 = (void **)__p;
  v6 = v32;
  if (__p == v32)
  {
    v7 = 0;
    if (__p)
      goto LABEL_26;
    return v7 & 1;
  }
  v7 = 0;
  v8 = (std::string *)((char *)a3 + 8);
  v29 = BKSOpenApplicationOptionKeyActivateSuspended;
  v9 = BKSActivateForEventOptionTypeBackgroundContentFetching;
  v10 = BKSOpenApplicationOptionKeyActivateForEvent;
  do
  {
    if (*((char *)v5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v30, (const std::string::value_type *)*v5, (std::string::size_type)v5[1]);
    }
    else
    {
      v11 = *(_OWORD *)v5;
      v30.__r_.__value_.__r.__words[2] = (std::string::size_type)v5[2];
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v11;
    }
    if (!std::string::compare(&v30, "BackgroundContentFetching"))
    {
      if (DNBLogEnabled())
        _DNBLog(0, (uint64_t)"Setting ActivateForEvent key in options dictionary.", v13, v14, v15, v16, v17, v18, v28);
      -[NSMutableDictionary setObject:forKey:](a1, "setObject:forKey:", +[NSDictionary dictionaryWithObject:forKey:](NSDictionary, "dictionaryWithObject:forKey:", +[NSDictionary dictionary](NSDictionary, "dictionary"), v9), v10);
      v7 = 1;
LABEL_17:
      if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_3;
LABEL_18:
      operator delete(v30.__r_.__value_.__l.__data_);
      goto LABEL_3;
    }
    if (std::string::compare(&v30, "ActivateSuspended"))
    {
      if (DNBLogEnabled())
      {
        v12 = &v30;
        if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v12 = (std::string *)v30.__r_.__value_.__r.__words[0];
        _DNBLogError("Unrecognized event type: %s.  Ignoring.", (const char *)v12);
      }
      std::string::assign(v8, "Unrecognized event data");
      goto LABEL_17;
    }
    if (DNBLogEnabled())
      _DNBLog(0, (uint64_t)"Setting ActivateSuspended key in options dictionary.", v19, v20, v21, v22, v23, v24, v28);
    -[NSMutableDictionary setObject:forKey:](a1, "setObject:forKey:", &__kCFBooleanTrue, v29);
    v7 = 1;
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_18;
LABEL_3:
    v5 += 3;
  }
  while (v5 != v6);
  v5 = (void **)__p;
  if (!__p)
    return v7 & 1;
LABEL_26:
  v25 = v32;
  v26 = v5;
  if (v32 != v5)
  {
    do
    {
      if (*((char *)v25 - 1) < 0)
        operator delete(*(v25 - 3));
      v25 -= 3;
    }
    while (v25 != v5);
    v26 = __p;
  }
  v32 = v5;
  operator delete(v26);
  return v7 & 1;
}

void sub_10004333C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17)
{
  std::vector<std::string>::~vector[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

uint64_t FBSAddEventDataToOptions(NSMutableDictionary *a1, char *__s, DNBError *a3)
{
  void **v5;
  void **v6;
  char v7;
  std::string *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  std::string *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  void *v26;
  uint64_t v28;
  uint64_t v29;
  std::string v30;
  void *__p;
  void **v32;
  uint64_t v33;

  __p = 0;
  v32 = 0;
  v33 = 0;
  SplitEventData(__s, (uint64_t)&__p);
  v5 = (void **)__p;
  v6 = v32;
  if (__p == v32)
  {
    v7 = 0;
    if (__p)
      goto LABEL_26;
    return v7 & 1;
  }
  v7 = 0;
  v8 = (std::string *)((char *)a3 + 8);
  v29 = FBSOpenApplicationOptionKeyActivateSuspended;
  v9 = FBSActivateForEventOptionTypeBackgroundContentFetching;
  v10 = FBSOpenApplicationOptionKeyActivateForEvent;
  do
  {
    if (*((char *)v5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v30, (const std::string::value_type *)*v5, (std::string::size_type)v5[1]);
    }
    else
    {
      v11 = *(_OWORD *)v5;
      v30.__r_.__value_.__r.__words[2] = (std::string::size_type)v5[2];
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v11;
    }
    if (!std::string::compare(&v30, "BackgroundContentFetching"))
    {
      if (DNBLogEnabled())
        _DNBLog(0, (uint64_t)"Setting ActivateForEvent key in options dictionary.", v13, v14, v15, v16, v17, v18, v28);
      -[NSMutableDictionary setObject:forKey:](a1, "setObject:forKey:", +[NSDictionary dictionaryWithObject:forKey:](NSDictionary, "dictionaryWithObject:forKey:", +[NSDictionary dictionary](NSDictionary, "dictionary"), v9), v10);
      v7 = 1;
LABEL_17:
      if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_3;
LABEL_18:
      operator delete(v30.__r_.__value_.__l.__data_);
      goto LABEL_3;
    }
    if (std::string::compare(&v30, "ActivateSuspended"))
    {
      if (DNBLogEnabled())
      {
        v12 = &v30;
        if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v12 = (std::string *)v30.__r_.__value_.__r.__words[0];
        _DNBLogError("Unrecognized event type: %s.  Ignoring.", (const char *)v12);
      }
      std::string::assign(v8, "Unrecognized event data.");
      goto LABEL_17;
    }
    if (DNBLogEnabled())
      _DNBLog(0, (uint64_t)"Setting ActivateSuspended key in options dictionary.", v19, v20, v21, v22, v23, v24, v28);
    -[NSMutableDictionary setObject:forKey:](a1, "setObject:forKey:", &__kCFBooleanTrue, v29);
    v7 = 1;
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_18;
LABEL_3:
    v5 += 3;
  }
  while (v5 != v6);
  v5 = (void **)__p;
  if (!__p)
    return v7 & 1;
LABEL_26:
  v25 = v32;
  v26 = v5;
  if (v32 != v5)
  {
    do
    {
      if (*((char *)v25 - 1) < 0)
        operator delete(*(v25 - 3));
      v25 -= 3;
    }
    while (v25 != v5);
    v26 = __p;
  }
  v32 = v5;
  operator delete(v26);
  return v7 & 1;
}

void sub_1000435AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17)
{
  std::vector<std::string>::~vector[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  std::ostream::sentry::sentry(v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, &std::ctype<char>::id);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  std::ostream::sentry::~sentry(v13);
  return a1;
}

void sub_1000436F0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  std::ostream::sentry::~sentry(&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1000436D0);
}

void sub_100043738(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  size_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__b[2];
  int64_t v22;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if ((uint64_t)v12 >= 1)
    {
      if (v12 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      if (v12 >= 0x17)
      {
        v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v14 = v12 | 7;
        v15 = v14 + 1;
        v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        v22 = v15 | 0x8000000000000000;
        __b[0] = v13;
      }
      else
      {
        HIBYTE(v22) = v12;
        v13 = __b;
      }
      memset(v13, __c, v12);
      *((_BYTE *)v13 + v12) = 0;
      if (v22 >= 0)
        v16 = __b;
      else
        v16 = (void **)__b[0];
      v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(_QWORD *)v6 + 96))(v6, v16, v12);
      v18 = v17;
      if (SHIBYTE(v22) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12)
          return 0;
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(_QWORD *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

void sub_1000438D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

uint64_t std::vector<BOOL>::operator=(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *(void **)a1;
      if (v4 > v5 << 6)
      {
        if (v6)
        {
          operator delete(v6);
          *(_QWORD *)a1 = 0;
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          v4 = *(_QWORD *)(a2 + 8);
        }
        if ((v4 & 0x8000000000000000) != 0)
          std::vector<kevent>::__throw_length_error[abi:ne180100]();
        v7 = ((v4 - 1) >> 6) + 1;
        v6 = operator new(8 * v7);
        *(_QWORD *)a1 = v6;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = v7;
        v4 = *(_QWORD *)(a2 + 8);
      }
      memmove(v6, *(const void **)a2, (((v4 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
      v4 = *(_QWORD *)(a2 + 8);
    }
    *(_QWORD *)(a1 + 8) = v4;
  }
  return a1;
}

_QWORD *std::vector<DNBThreadResumeAction>::__assign_with_size[abi:ne180100]<DNBThreadResumeAction*,DNBThreadResumeAction*>(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  char *v17;
  void *v18;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *result) >> 3) < __sz)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_23;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL)
LABEL_23:
      std::vector<kevent>::__throw_length_error[abi:ne180100]();
    v13 = 3 * v12;
    result = operator new(24 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v16 - v9) >> 3) >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v18 = (void *)*result;
LABEL_21:
    result = memmove(v18, __src, v14);
    goto LABEL_22;
  }
  v17 = &__src[8 * ((v16 - v9) >> 3)];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v17;
  if (v14)
  {
    v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *v15 = &v9[v14];
  return result;
}

uint64_t CallBoardSystemServiceOpenApplication<BKSSystemService,BKSOpenApplicationErrorCode,(BKSOpenApplicationErrorCode)0,&(SetBKSError(long,std::string,DNBError &))>(id a1, void *a2, uint64_t a3, _DWORD *a4)
{
  id v8;
  void *v9;
  id v10;
  const char *v11;
  const char *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  dispatch_time_t v21;
  intptr_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  pid_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v34;
  std::string::size_type size;
  std::string *v36;
  pid_t v37;
  std::string __str;
  _QWORD v39[11];
  BOOL v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  __n128 (*v48)(__n128 *, __n128 *);
  void (*v49)(uint64_t);
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t);
  void (*v60)(uint64_t);
  dispatch_semaphore_t v61;
  std::string v62;

  v8 = objc_alloc_init((Class)BKSSystemService);
  v9 = v8;
  if (!a1)
  {
    a1 = objc_msgSend(v8, "systemApplicationBundleIdentifier");
    if (!a1)
    {
      std::string::assign((std::string *)(a3 + 8), "No system application to message.");
      return 0;
    }
  }
  v10 = objc_msgSend(v9, "createClientPort");
  v56 = 0;
  v57 = &v56;
  v58 = 0x3052000000;
  v59 = __Block_byref_object_copy__0;
  v60 = __Block_byref_object_dispose__0;
  v61 = 0;
  v61 = dispatch_semaphore_create(0);
  v52 = 0;
  v53 = &v52;
  v54 = 0x2020000000;
  v55 = 0;
  v45 = 0;
  v46 = &v45;
  v47 = 0x4812000000;
  v48 = __Block_byref_object_copy__263;
  v49 = __Block_byref_object_dispose__264;
  v50 = 0u;
  v51 = 0u;
  v41 = 0;
  v42 = &v41;
  v43 = 0x2020000000;
  v44 = 0;
  v11 = (const char *)objc_msgSend(a1, "UTF8String");
  if (v11)
    v12 = v11;
  else
    v12 = "<Unknown Bundle ID>";
  v13 = objc_msgSend(a2, "description");
  if (DNBLogEnabled())
  {
    v14 = getpid();
    objc_msgSend(v13, "UTF8String");
    _DNBLog(0, (uint64_t)"[LaunchAttach] START (%d) templated *Board launcher: app lunch request for '%s' - options:\n%s", v15, v16, v17, v18, v19, v20, v14);
  }
  v39[0] = _NSConcreteStackBlock;
  v39[1] = 3254779904;
  v39[2] = ___ZL37CallBoardSystemServiceOpenApplicationI16BKSSystemService27BKSOpenApplicationErrorCodeLS1_0EXadL_ZL11SetBKSErrorlNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEER8DNBErrorEEEbP8NSStringP12NSDictionarySA_Pi_block_invoke;
  v39[3] = &__block_descriptor_89_e8_32o40o48r56r64r72r_e17_v16__0__NSError_8l;
  v40 = a4 != 0;
  v39[6] = &v52;
  v39[7] = &v41;
  v39[4] = a1;
  v39[5] = v9;
  v39[8] = &v45;
  v39[9] = &v56;
  v39[10] = v12;
  objc_msgSend(v9, "openApplication:options:clientPort:withResult:", a1, a2, v10, v39);
  v21 = dispatch_time(0, 30000000000);
  v22 = dispatch_semaphore_wait((dispatch_semaphore_t)v57[5], v21);
  dispatch_release((dispatch_object_t)v57[5]);
  if (DNBLogEnabled())
  {
    v23 = getpid();
    _DNBLog(0, (uint64_t)"[LaunchAttach] END (%d) templated *Board launcher finished app lunch request for '%s'", v24, v25, v26, v27, v28, v29, v23);
  }
  if (!v22)
  {
    v31 = *((unsigned int *)v53 + 6);
    if (!(_DWORD)v31)
    {
      if (a4)
      {
        *a4 = *((_DWORD *)v42 + 6);
        if (DNBLogEnabledForAny(2))
          _DNBLogThreaded("Out of completion handler, pid from block %d and passing out: %d", *((_DWORD *)v42 + 6), *a4);
      }
      v32 = 1;
      goto LABEL_21;
    }
    if (*((char *)v46 + 71) < 0)
      std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)v46[6], v46[7]);
    else
      __str = *(std::string *)((_BYTE *)v46 + 2);
    *(_DWORD *)a3 = v31;
    *(_DWORD *)(a3 + 4) = 4;
    if (*(char *)(a3 + 31) < 0)
    {
      **(_BYTE **)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 31) = 0;
    }
    v34 = (void *)BKSOpenApplicationErrorCodeToString(v31);
    *((_BYTE *)&v62.__r_.__value_.__s + 23) = 17;
    strcpy((char *)&v62, "unknown BKS error");
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __str.__r_.__value_.__l.__size_;
    if (size)
    {
      std::string::operator=(&v62, &__str);
    }
    else if (v34)
    {
      std::string::assign(&v62, (const std::string::value_type *)objc_msgSend(v34, "UTF8String"));
    }
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    {
      v36 = (std::string *)v62.__r_.__value_.__r.__words[0];
      if (!v62.__r_.__value_.__r.__words[0])
        goto LABEL_48;
    }
    else
    {
      v36 = &v62;
    }
    if (v36->__r_.__value_.__s.__data_[0])
    {
      std::string::assign((std::string *)(a3 + 8), (const std::string::value_type *)v36);
      if ((SHIBYTE(v62.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_45;
LABEL_50:
      operator delete(v62.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_46;
      goto LABEL_51;
    }
LABEL_48:
    if (*(char *)(a3 + 31) < 0)
    {
      **(_BYTE **)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_50;
    }
    else
    {
      *(_BYTE *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 31) = 0;
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_50;
    }
LABEL_45:
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_46;
LABEL_51:
    operator delete(__str.__r_.__value_.__l.__data_);
LABEL_46:
    if (DNBLogEnabled())
    {
      v37 = getpid();
      _DNBLogError("[LaunchAttach] END (%d) unable to launch the application with CFBundleIdentifier '%s' bks_error = %ld", v37, v12, *((unsigned int *)v53 + 6));
    }
    goto LABEL_20;
  }
  if (DNBLogEnabled())
  {
    v30 = getpid();
    _DNBLogError("[LaunchAttach] END (%d) timed out trying to send openApplication to %s.", v30, v12);
  }
  *(_QWORD *)a3 = 111;
  if (*(char *)(a3 + 31) < 0)
  {
    **(_BYTE **)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  else
  {
    *(_BYTE *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 31) = 0;
  }
  std::string::assign((std::string *)(a3 + 8), "timed out trying to launch app");
LABEL_20:
  v32 = 0;
LABEL_21:
  _Block_object_dispose(&v41, 8);
  _Block_object_dispose(&v45, 8);
  if (SHIBYTE(v51) < 0)
    operator delete(*((void **)&v50 + 1));
  _Block_object_dispose(&v52, 8);
  _Block_object_dispose(&v56, 8);
  return v32;
}

void sub_100043FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;

  if (a18 < 0)
    operator delete(__p);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a35, 8);
  if (a46 < 0)
    operator delete(a41);
  _Block_object_dispose((const void *)(v46 - 208), 8);
  _Block_object_dispose((const void *)(v46 - 176), 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__263(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a1[3] = result;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  a2[3].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__264(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

intptr_t ___ZL37CallBoardSystemServiceOpenApplicationI16BKSSystemService27BKSOpenApplicationErrorCodeLS1_0EXadL_ZL11SetBKSErrorlNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEER8DNBErrorEEEbP8NSStringP12NSDictionarySA_Pi_block_invoke(uint64_t a1, void *a2)
{
  const std::string::value_type *v4;
  pid_t v5;
  const char *v6;
  pid_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  if (a2)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(a2, "code");
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
  {
    v4 = (const std::string::value_type *)objc_msgSend(objc_msgSend(a2, "localizedDescription"), "UTF8String");
    if (v4)
    {
      std::string::assign((std::string *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 48), v4);
      if (DNBLogEnabled())
      {
        v5 = getpid();
        _DNBLogError("[LaunchAttach] END (%d) In app launch attempt, got error localizedDescription '%s'.", v5, v4);
      }
      v6 = -[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@"), a2), "UTF8String");
      if (DNBLogEnabled())
      {
        v7 = getpid();
        _DNBLogError("[LaunchAttach] END (%d) In app launch attempt, got error NSError object description: '%s'.", v7, v6);
      }
    }
    if (DNBLogEnabledForAny(2))
    {
      v8 = "<unknown error>";
      if (v4)
        v8 = v4;
      _DNBLogThreaded("In completion handler for send event, got error \"%s\"(%ld).", v8, *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24));
    }
  }
  else if (*(_BYTE *)(a1 + 88))
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = objc_msgSend(*(id *)(a1 + 40), "pidForApplication:", *(_QWORD *)(a1 + 32));
    if (DNBLogEnabled())
      _DNBLog(0, (uint64_t)"[LaunchAttach] In completion handler, got pid for bundle id '%s', pid: %d.", v9, v10, v11, v12, v13, v14, *(_QWORD *)(a1 + 80));
  }
  else if (DNBLogEnabled())
  {
    _DNBLog(0, (uint64_t)"[LaunchAttach] In completion handler, launch was successful, debugserver did not ask for the pid", v15, v16, v17, v18, v19, v20, v22);
  }

  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40));
}

void __copy_helper_block_e8_32o40o48r56r64r72r(uint64_t a1, const void **a2)
{
  _Block_object_assign((void *)(a1 + 32), a2[4], 3);
  _Block_object_assign((void *)(a1 + 40), a2[5], 3);
  _Block_object_assign((void *)(a1 + 48), a2[6], 8);
  _Block_object_assign((void *)(a1 + 56), a2[7], 8);
  _Block_object_assign((void *)(a1 + 64), a2[8], 8);
  _Block_object_assign((void *)(a1 + 72), a2[9], 8);
}

void __destroy_helper_block_e8_32o40o48r56r64r72r(const void **a1)
{
  _Block_object_dispose(a1[9], 8);
  _Block_object_dispose(a1[8], 8);
  _Block_object_dispose(a1[7], 8);
  _Block_object_dispose(a1[6], 8);
  _Block_object_dispose(a1[5], 3);
  _Block_object_dispose(a1[4], 3);
}

uint64_t CallBoardSystemServiceOpenApplication<FBSSystemService,FBSOpenApplicationErrorCode,(FBSOpenApplicationErrorCode)0,&(SetFBSError(long,std::string,DNBError &))>(id a1, void *a2, uint64_t a3, _DWORD *a4)
{
  id v8;
  void *v9;
  id v10;
  const char *v11;
  const char *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  dispatch_time_t v21;
  intptr_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  pid_t v30;
  uint64_t v31;
  uint64_t v32;
  pid_t v34;
  std::string v35;
  _QWORD v36[11];
  BOOL v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  __n128 (*v45)(__n128 *, __n128 *);
  void (*v46)(uint64_t);
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t);
  void (*v57)(uint64_t);
  dispatch_semaphore_t v58;

  v8 = objc_alloc_init((Class)FBSSystemService);
  v9 = v8;
  if (!a1)
  {
    a1 = objc_msgSend(v8, "systemApplicationBundleIdentifier");
    if (!a1)
    {
      std::string::assign((std::string *)(a3 + 8), "No system application to message.");
      return 0;
    }
  }
  v10 = objc_msgSend(v9, "createClientPort");
  v53 = 0;
  v54 = &v53;
  v55 = 0x3052000000;
  v56 = __Block_byref_object_copy__0;
  v57 = __Block_byref_object_dispose__0;
  v58 = 0;
  v58 = dispatch_semaphore_create(0);
  v49 = 0;
  v50 = &v49;
  v51 = 0x2020000000;
  v52 = 0;
  v42 = 0;
  v43 = &v42;
  v44 = 0x4812000000;
  v45 = __Block_byref_object_copy__263;
  v46 = __Block_byref_object_dispose__264;
  v47 = 0u;
  v48 = 0u;
  v38 = 0;
  v39 = &v38;
  v40 = 0x2020000000;
  v41 = 0;
  v11 = (const char *)objc_msgSend(a1, "UTF8String");
  if (v11)
    v12 = v11;
  else
    v12 = "<Unknown Bundle ID>";
  v13 = objc_msgSend(a2, "description");
  if (DNBLogEnabled())
  {
    v14 = getpid();
    objc_msgSend(v13, "UTF8String");
    _DNBLog(0, (uint64_t)"[LaunchAttach] START (%d) templated *Board launcher: app lunch request for '%s' - options:\n%s", v15, v16, v17, v18, v19, v20, v14);
  }
  v36[0] = _NSConcreteStackBlock;
  v36[1] = 3254779904;
  v36[2] = ___ZL37CallBoardSystemServiceOpenApplicationI16FBSSystemService27FBSOpenApplicationErrorCodeLS1_0EXadL_ZL11SetFBSErrorlNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEER8DNBErrorEEEbP8NSStringP12NSDictionarySA_Pi_block_invoke;
  v36[3] = &__block_descriptor_89_e8_32o40o48r56r64r72r_e17_v16__0__NSError_8l;
  v37 = a4 != 0;
  v36[6] = &v49;
  v36[7] = &v38;
  v36[4] = a1;
  v36[5] = v9;
  v36[8] = &v42;
  v36[9] = &v53;
  v36[10] = v12;
  objc_msgSend(v9, "openApplication:options:clientPort:withResult:", a1, a2, v10, v36);
  v21 = dispatch_time(0, 30000000000);
  v22 = dispatch_semaphore_wait((dispatch_semaphore_t)v54[5], v21);
  dispatch_release((dispatch_object_t)v54[5]);
  if (DNBLogEnabled())
  {
    v23 = getpid();
    _DNBLog(0, (uint64_t)"[LaunchAttach] END (%d) templated *Board launcher finished app lunch request for '%s'", v24, v25, v26, v27, v28, v29, v23);
  }
  if (v22)
  {
    if (DNBLogEnabled())
    {
      v30 = getpid();
      _DNBLogError("[LaunchAttach] END (%d) timed out trying to send openApplication to %s.", v30, v12);
    }
    *(_QWORD *)a3 = 111;
    if (*(char *)(a3 + 31) < 0)
    {
      **(_BYTE **)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 31) = 0;
    }
    std::string::assign((std::string *)(a3 + 8), "timed out trying to launch app");
  }
  else
  {
    v31 = v50[3];
    if (!v31)
    {
      if (a4)
      {
        *a4 = *((_DWORD *)v39 + 6);
        if (DNBLogEnabledForAny(2))
          _DNBLogThreaded("Out of completion handler, pid from block %d and passing out: %d", *((_DWORD *)v39 + 6), *a4);
      }
      v32 = 1;
      goto LABEL_21;
    }
    if (*((char *)v43 + 71) < 0)
      std::string::__init_copy_ctor_external(&v35, (const std::string::value_type *)v43[6], v43[7]);
    else
      v35 = *(std::string *)((_BYTE *)v43 + 2);
    SetFBSError(v31, (uint64_t)&v35, a3);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    if (DNBLogEnabled())
    {
      v34 = getpid();
      _DNBLogError("[LaunchAttach] END (%d) unable to launch the application with CFBundleIdentifier '%s' bks_error = %ld", v34, v12, v50[3]);
    }
  }
  v32 = 0;
LABEL_21:
  _Block_object_dispose(&v38, 8);
  _Block_object_dispose(&v42, 8);
  if (SHIBYTE(v48) < 0)
    operator delete(*((void **)&v47 + 1));
  _Block_object_dispose(&v49, 8);
  _Block_object_dispose(&v53, 8);
  return v32;
}

void sub_100044684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;

  if (a18 < 0)
    operator delete(__p);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a35, 8);
  if (a46 < 0)
    operator delete(a41);
  _Block_object_dispose((const void *)(v46 - 176), 8);
  _Block_object_dispose((const void *)(v46 - 144), 8);
  _Unwind_Resume(a1);
}

intptr_t ___ZL37CallBoardSystemServiceOpenApplicationI16FBSSystemService27FBSOpenApplicationErrorCodeLS1_0EXadL_ZL11SetFBSErrorlNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEER8DNBErrorEEEbP8NSStringP12NSDictionarySA_Pi_block_invoke(uint64_t a1, void *a2)
{
  const std::string::value_type *v4;
  pid_t v5;
  const char *v6;
  pid_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  if (a2)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(a2, "code");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
  {
    v4 = (const std::string::value_type *)objc_msgSend(objc_msgSend(a2, "localizedDescription"), "UTF8String");
    if (v4)
    {
      std::string::assign((std::string *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 48), v4);
      if (DNBLogEnabled())
      {
        v5 = getpid();
        _DNBLogError("[LaunchAttach] END (%d) In app launch attempt, got error localizedDescription '%s'.", v5, v4);
      }
      v6 = -[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@"), a2), "UTF8String");
      if (DNBLogEnabled())
      {
        v7 = getpid();
        _DNBLogError("[LaunchAttach] END (%d) In app launch attempt, got error NSError object description: '%s'.", v7, v6);
      }
    }
    if (DNBLogEnabledForAny(2))
    {
      v8 = "<unknown error>";
      if (v4)
        v8 = v4;
      _DNBLogThreaded("In completion handler for send event, got error \"%s\"(%ld).", v8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24));
    }
  }
  else if (*(_BYTE *)(a1 + 88))
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = objc_msgSend(*(id *)(a1 + 40), "pidForApplication:", *(_QWORD *)(a1 + 32));
    if (DNBLogEnabled())
      _DNBLog(0, (uint64_t)"[LaunchAttach] In completion handler, got pid for bundle id '%s', pid: %d.", v9, v10, v11, v12, v13, v14, *(_QWORD *)(a1 + 80));
  }
  else if (DNBLogEnabled())
  {
    _DNBLog(0, (uint64_t)"[LaunchAttach] In completion handler, launch was successful, debugserver did not ask for the pid", v15, v16, v17, v18, v19, v20, v22);
  }

  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40));
}

void SplitEventData(char *__s, uint64_t a2)
{
  void **v4;
  void **i;
  __int128 v6;
  char *v7;
  char *v8;
  size_t v9;
  __int128 *p_dst;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  int v15;
  size_t v16;
  size_t v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __int128 v22;
  char *v23;
  int v24;
  __int128 __dst;
  unint64_t v26;

  v4 = *(void ***)a2;
  for (i = *(void ***)(a2 + 8); i != v4; i -= 3)
  {
    if (*((char *)i - 1) < 0)
      operator delete(*(i - 3));
  }
  *(_QWORD *)(a2 + 8) = v4;
  if (!__s || !*__s)
    return;
  while (1)
  {
    v7 = strchr(__s, 58);
    if (!v7)
      break;
    v8 = v7;
    v9 = v7 - __s;
    if (v7 != __s)
    {
      if (v9 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_35;
      if (v9 >= 0x17)
      {
        v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v9 | 7) != 0x17)
          v11 = v9 | 7;
        v12 = v11 + 1;
        p_dst = (__int128 *)operator new(v11 + 1);
        *((_QWORD *)&__dst + 1) = v9;
        v26 = v12 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v26) = (_BYTE)v7 - (_BYTE)__s;
        p_dst = &__dst;
      }
      memmove(p_dst, __s, v9);
      *((_BYTE *)p_dst + v9) = 0;
      v13 = *(_QWORD *)(a2 + 8);
      if (v13 < *(_QWORD *)(a2 + 16))
      {
        v6 = __dst;
        *(_QWORD *)(v13 + 16) = v26;
        *(_OWORD *)v13 = v6;
        *(_QWORD *)(a2 + 8) = v13 + 24;
      }
      else
      {
        v14 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a2, (uint64_t)&__dst);
        v15 = SHIBYTE(v26);
        *(_QWORD *)(a2 + 8) = v14;
        if (v15 < 0)
          operator delete((void *)__dst);
      }
    }
    __s = v8 + 1;
    if (!v8[1])
      return;
  }
  v16 = strlen(__s);
  if (v16 > 0x7FFFFFFFFFFFFFF7)
LABEL_35:
    std::string::__throw_length_error[abi:ne180100]();
  v17 = v16;
  if (v16 >= 0x17)
  {
    v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v19 = v16 | 7;
    v20 = v19 + 1;
    v18 = (__int128 *)operator new(v19 + 1);
    *((_QWORD *)&__dst + 1) = v17;
    v26 = v20 | 0x8000000000000000;
    *(_QWORD *)&__dst = v18;
    goto LABEL_29;
  }
  HIBYTE(v26) = v16;
  v18 = &__dst;
  if (v16)
LABEL_29:
    memmove(v18, __s, v17);
  *((_BYTE *)v18 + v17) = 0;
  v21 = *(_QWORD *)(a2 + 8);
  if (v21 >= *(_QWORD *)(a2 + 16))
  {
    v23 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a2, (uint64_t)&__dst);
    v24 = SHIBYTE(v26);
    *(_QWORD *)(a2 + 8) = v23;
    if (v24 < 0)
      operator delete((void *)__dst);
  }
  else
  {
    v22 = __dst;
    *(_QWORD *)(v21 + 16) = v26;
    *(_OWORD *)v21 = v22;
    *(_QWORD *)(a2 + 8) = v21 + 24;
  }
}

void sub_100044A80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<MachProcess::mach_o_segment>::__push_back_slow_path<MachProcess::mach_o_segment const&>(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  std::string *v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char *v17;
  void **v18;
  char *v20;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0x2E8BA2E8BA2E8BA3 * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x2E8BA2E8BA2E8BALL)
    std::vector<kevent>::__throw_length_error[abi:ne180100]();
  if (0x5D1745D1745D1746 * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x5D1745D1745D1746 * ((a1[2] - v3) >> 3);
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 3)) >= 0x1745D1745D1745DLL)
    v8 = 0x2E8BA2E8BA2E8BALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0x2E8BA2E8BA2E8BALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v9 = (char *)operator new(88 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = (std::string *)&v9[88 * v5];
  v20 = &v9[88 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v3 = *a1;
    v4 = a1[1];
    v10 = (std::string *)&v9[88 * v5];
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v10->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  v11 = &v9[88 * v5];
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v11 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v11 + 72) = *(_OWORD *)(a2 + 72);
  v12 = v11 + 88;
  if (v4 == v3)
  {
    v17 = v3;
  }
  else
  {
    do
    {
      v13 = *(_OWORD *)(v4 - 88);
      v10[-3].__r_.__value_.__r.__words[0] = *((_QWORD *)v4 - 9);
      *(_OWORD *)&v10[-4].__r_.__value_.__r.__words[1] = v13;
      *((_QWORD *)v4 - 10) = 0;
      *((_QWORD *)v4 - 9) = 0;
      *((_QWORD *)v4 - 11) = 0;
      v14 = *((_OWORD *)v4 - 4);
      v15 = *((_OWORD *)v4 - 3);
      v16 = *((_OWORD *)v4 - 1);
      *(_OWORD *)&v10[-2].__r_.__value_.__r.__words[2] = *((_OWORD *)v4 - 2);
      *(_OWORD *)&v10[-1].__r_.__value_.__r.__words[1] = v16;
      *(_OWORD *)&v10[-3].__r_.__value_.__r.__words[1] = v14;
      *(_OWORD *)&v10[-2].__r_.__value_.__l.__data_ = v15;
      v10 = (std::string *)((char *)v10 - 88);
      v4 -= 88;
    }
    while (v4 != v3);
    v17 = *a1;
    v3 = a1[1];
  }
  *a1 = (char *)v10;
  a1[1] = v12;
  a1[2] = v20;
  if (v3 != v17)
  {
    v18 = (void **)(v3 - 88);
    do
    {
      if (*((char *)v18 + 23) < 0)
        operator delete(*v18);
      v18 -= 11;
    }
    while (v18 + 11 != (void **)v17);
    v3 = v17;
  }
  if (v3)
    operator delete(v3);
  return v12;
}

void sub_100044CAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<MachProcess::mach_o_segment>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<MachProcess::mach_o_segment>::~__split_buffer(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v5;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v5 = v2 - 11;
      *(_QWORD *)(a1 + 16) = v2 - 11;
      if (*((char *)v2 - 65) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::shared_ptr<JSONGenerator::Array>::shared_ptr[abi:ne180100]<JSONGenerator::Array,void>(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100044E2C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<JSONGenerator::Dictionary>::shared_ptr[abi:ne180100]<JSONGenerator::Dictionary,void>(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100044F54(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

char *std::vector<MachProcess::binary_image_information>::__push_back_slow_path<MachProcess::binary_image_information const&>(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  _BYTE *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  __int128 v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;

  v3 = 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5);
  v4 = v3 + 1;
  if (v3 + 1 > 0x199999999999999)
    std::vector<kevent>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) > v4)
    v4 = 0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5);
  if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) >= 0xCCCCCCCCCCCCCCLL)
    v6 = 0x199999999999999;
  else
    v6 = v4;
  v27 = (uint64_t)(a1 + 2);
  if (v6)
  {
    if (v6 > 0x199999999999999)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = operator new(160 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[160 * v3];
  v24 = v8;
  v26 = &v7[160 * v6];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v7[160 * v3], *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v8 = *(_OWORD *)a2;
    *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  }
  v9 = &v7[160 * v3];
  *((_QWORD *)v9 + 3) = *(_QWORD *)(a2 + 24);
  MachProcess::mach_o_information::mach_o_information((uint64_t)(v9 + 32), a2 + 32);
  v7[160 * v3 + 152] = *(_BYTE *)(a2 + 152);
  v10 = &v7[160 * v3];
  v25 = v10;
  v11 = (char *)*a1;
  v12 = (char *)a1[1];
  if (v12 == *a1)
  {
    v22 = (char *)a1[1];
  }
  else
  {
    v13 = 0;
    do
    {
      v14 = &v12[v13];
      v15 = *(_OWORD *)&v12[v13 - 160];
      v16 = &v8[v13];
      *((_QWORD *)v16 - 18) = *(_QWORD *)&v12[v13 - 144];
      *((_OWORD *)v16 - 10) = v15;
      *((_QWORD *)v14 - 19) = 0;
      *((_QWORD *)v14 - 18) = 0;
      v17 = *(_QWORD *)&v12[v13 - 136];
      *((_QWORD *)v14 - 20) = 0;
      *((_QWORD *)v16 - 17) = v17;
      v18 = *(_OWORD *)&v12[v13 - 128];
      v19 = *(_OWORD *)&v12[v13 - 112];
      *((_QWORD *)v16 - 11) = 0;
      *((_QWORD *)v16 - 10) = 0;
      *((_OWORD *)v16 - 8) = v18;
      *((_OWORD *)v16 - 7) = v19;
      *((_QWORD *)v16 - 12) = 0;
      *((_OWORD *)v16 - 6) = *(_OWORD *)&v12[v13 - 96];
      *((_QWORD *)v16 - 10) = *(_QWORD *)&v12[v13 - 80];
      *((_QWORD *)v14 - 12) = 0;
      *((_QWORD *)v14 - 11) = 0;
      *((_QWORD *)v14 - 10) = 0;
      *(_OWORD *)(v16 - 72) = *(_OWORD *)&v12[v13 - 72];
      v20 = *(_OWORD *)&v12[v13 - 56];
      *((_QWORD *)v16 - 5) = *(_QWORD *)&v12[v13 - 40];
      *(_OWORD *)(v16 - 56) = v20;
      *((_QWORD *)v14 - 6) = 0;
      *((_QWORD *)v14 - 5) = 0;
      *((_QWORD *)v14 - 7) = 0;
      v21 = *(_OWORD *)&v12[v13 - 32];
      *((_QWORD *)v16 - 2) = *(_QWORD *)&v12[v13 - 16];
      *((_OWORD *)v16 - 2) = v21;
      *((_QWORD *)v14 - 3) = 0;
      *((_QWORD *)v14 - 2) = 0;
      *((_QWORD *)v14 - 4) = 0;
      *(v16 - 8) = v12[v13 - 8];
      v13 -= 160;
    }
    while (&v12[v13] != v11);
    v22 = (char *)*a1;
    v12 = (char *)a1[1];
    v10 = &v24[v13];
  }
  *a1 = v10;
  a1[1] = v25 + 160;
  a1[2] = v26;
  if (v12 != v22)
  {
    do
    {
      v12 -= 160;
      std::allocator<MachProcess::binary_image_information>::destroy[abi:ne180100](v27, (uint64_t)v12);
    }
    while (v12 != v22);
    v12 = v22;
  }
  if (v12)
    operator delete(v12);
  return v25 + 160;
}

void sub_1000451B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<MachProcess::binary_image_information>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MachProcess::mach_o_information::mach_o_information(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  std::vector<MachProcess::mach_o_segment>::__init_with_size[abi:ne180100]<MachProcess::mach_o_segment*,MachProcess::mach_o_segment*>((_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3));
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 72), *(const std::string::value_type **)(a2 + 72), *(_QWORD *)(a2 + 80));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = v5;
  }
  v6 = (std::string *)(a1 + 96);
  if (*(char *)(a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 96), *(_QWORD *)(a2 + 104));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return a1;
}

void sub_1000452B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v5;
  void **v6;
  void *v7;

  if (*(char *)(v1 + 95) < 0)
  {
    operator delete(*v3);
    v5 = (void **)*v2;
    if (!*v2)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v5 = (void **)*v2;
    if (!*v2)
      goto LABEL_3;
  }
  v6 = *(void ***)(v1 + 40);
  v7 = v5;
  if (v6 != v5)
  {
    do
    {
      if (*((char *)v6 - 65) < 0)
        operator delete(*(v6 - 11));
      v6 -= 11;
    }
    while (v6 != v5);
    v7 = *v2;
  }
  *(_QWORD *)(v1 + 40) = v5;
  operator delete(v7);
  _Unwind_Resume(exception_object);
}

void std::vector<MachProcess::mach_o_segment>::__init_with_size[abi:ne180100]<MachProcess::mach_o_segment*,MachProcess::mach_o_segment*>(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v8;
  uint64_t v9;
  char *v10;
  std::string *v11;
  uint64_t v12;

  if (a4)
  {
    if (a4 >= 0x2E8BA2E8BA2E8BBLL)
      std::vector<kevent>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(88 * a4);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[88 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        v11 = (std::string *)&v8[v9];
        v12 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)v12, *(_QWORD *)(v12 + 8));
        }
        else
        {
          *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)v12;
          v11->__r_.__value_.__r.__words[2] = *(_QWORD *)(v12 + 16);
        }
        v10 = &v8[v9];
        *(_OWORD *)(v10 + 24) = *(_OWORD *)(a2 + v9 + 24);
        *(_OWORD *)(v10 + 40) = *(_OWORD *)(a2 + v9 + 40);
        *(_OWORD *)(v10 + 56) = *(_OWORD *)(a2 + v9 + 56);
        *(_OWORD *)(v10 + 72) = *(_OWORD *)(a2 + v9 + 72);
        v9 += 88;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    a1[1] = v8;
  }
}

void sub_100045444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::__exception_guard_exceptions<std::vector<MachProcess::mach_o_segment>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ***std::__exception_guard_exceptions<std::vector<MachProcess::mach_o_segment>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***a1)
{
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  if (!*((_BYTE *)a1 + 8))
  {
    v2 = *a1;
    v3 = (void **)**a1;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **a1;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 65) < 0)
            operator delete(*(v4 - 11));
          v4 -= 11;
        }
        while (v4 != v3);
        v5 = **a1;
      }
      v2[1] = v3;
      operator delete(v5);
    }
  }
  return a1;
}

uint64_t std::__split_buffer<MachProcess::binary_image_information>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 16) = i - 160;
    std::allocator<MachProcess::binary_image_information>::destroy[abi:ne180100](v4, i - 160);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::allocator<MachProcess::binary_image_information>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void **v3;
  void **v4;
  void **v5;

  if (*(char *)(a2 + 151) < 0)
  {
    operator delete(*(void **)(a2 + 128));
    if ((*(char *)(a2 + 127) & 0x80000000) == 0)
    {
LABEL_3:
      v3 = *(void ***)(a2 + 64);
      if (!v3)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(char *)(a2 + 127) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a2 + 104));
  v3 = *(void ***)(a2 + 64);
  if (!v3)
  {
LABEL_4:
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(*(void **)a2);
    return;
  }
LABEL_8:
  v4 = *(void ***)(a2 + 72);
  v5 = v3;
  if (v4 != v3)
  {
    do
    {
      if (*((char *)v4 - 65) < 0)
        operator delete(*(v4 - 11));
      v4 -= 11;
    }
    while (v4 != v3);
    v5 = *(void ***)(a2 + 64);
  }
  *(_QWORD *)(a2 + 72) = v3;
  operator delete(v5);
  if (*(char *)(a2 + 23) < 0)
    goto LABEL_15;
}

_QWORD *std::vector<MachException::Message>::__push_back_slow_path<MachException::Message const&>(void **a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char **v15;
  char *v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int v22;
  char *v23;
  void *v25;
  _QWORD *v26;

  v4 = (char *)*a1;
  v3 = (char *)a1[1];
  v5 = 0x77A9AF922545A3CDLL * ((v3 - (_BYTE *)*a1) >> 3);
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x1F6310ACA0DBB5)
    std::vector<kevent>::__throw_length_error[abi:ne180100]();
  if (0xEF535F244A8B479ALL * (((_BYTE *)a1[2] - v4) >> 3) > v6)
    v6 = 0xEF535F244A8B479ALL * (((_BYTE *)a1[2] - v4) >> 3);
  if ((unint64_t)(0x77A9AF922545A3CDLL * (((_BYTE *)a1[2] - v4) >> 3)) >= 0xFB18856506DDALL)
    v8 = 0x1F6310ACA0DBB5;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0x1F6310ACA0DBB5)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v9 = (char *)operator new(2088 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[2088 * v5];
  v11 = &v9[2088 * v8];
  memcpy(v10, a2, 0x80CuLL);
  *((_QWORD *)v10 + 258) = 0;
  *((_QWORD *)v10 + 260) = 0;
  *((_QWORD *)v10 + 259) = 0;
  v12 = (_BYTE *)a2[258];
  v13 = (_BYTE *)a2[259];
  v14 = v13 - v12;
  if (v13 != v12)
  {
    v15 = (char **)(v10 + 2072);
    if (v14 < 0)
      std::vector<kevent>::__throw_length_error[abi:ne180100]();
    v16 = (char *)operator new(v13 - v12);
    *((_QWORD *)v10 + 258) = v16;
    *v15 = v16;
    v17 = &v16[8 * (v14 >> 3)];
    *((_QWORD *)v10 + 260) = v17;
    memcpy(v16, v12, v14);
    *v15 = v17;
  }
  v18 = v10 + 2088;
  v26 = v10 + 2088;
  if (v3 == v4)
  {
    v23 = v3;
  }
  else
  {
    v19 = 0;
    do
    {
      v20 = &v10[v19];
      v21 = &v3[v19];
      memcpy(&v10[v19 - 2088], &v3[v19 - 2088], 0x800uLL);
      v22 = *(_DWORD *)&v3[v19 - 32];
      *((_QWORD *)v20 - 5) = *(_QWORD *)&v3[v19 - 40];
      *((_DWORD *)v20 - 8) = v22;
      *((_QWORD *)v20 - 2) = 0;
      *((_QWORD *)v20 - 1) = 0;
      *(_OWORD *)(v20 - 24) = *(_OWORD *)&v3[v19 - 24];
      *((_QWORD *)v20 - 1) = *(_QWORD *)&v3[v19 - 8];
      *((_QWORD *)v21 - 3) = 0;
      *((_QWORD *)v21 - 2) = 0;
      *((_QWORD *)v21 - 1) = 0;
      v19 -= 2088;
    }
    while (&v3[v19] != v4);
    v23 = (char *)*a1;
    v3 = (char *)a1[1];
    v10 += v19;
    v18 = v26;
  }
  *a1 = v10;
  a1[1] = v18;
  a1[2] = v11;
  if (v3 == v23)
  {
    if (v3)
LABEL_21:
      operator delete(v3);
  }
  else
  {
    do
    {
      v25 = (void *)*((_QWORD *)v3 - 3);
      if (v25)
      {
        *((_QWORD *)v3 - 2) = v25;
        operator delete(v25);
      }
      v3 -= 2088;
    }
    while (v3 != v23);
    v3 = v23;
    if (v23)
      goto LABEL_21;
  }
  return v18;
}

void sub_100045868(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  _QWORD *v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v2;
  if (*v2)
  {
    *v3 = v5;
    operator delete(v5);
  }
  std::__split_buffer<MachException::Message>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<MachException::Message>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v4 = v2 - 2088;
        *(_QWORD *)(a1 + 16) = v2 - 2088;
        v5 = *(void **)(v2 - 24);
        if (!v5)
          break;
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 2088;
    }
    while (v4 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void MachTask::MachTask(MachTask *this, MachProcess *a2)
{
  *(_QWORD *)this = off_100061588;
  *((_QWORD *)this + 1) = a2;
  *((_DWORD *)this + 4) = 0;
  MachVMMemory::MachVMMemory((MachTask *)((char *)this + 24));
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 41) = 0;
  *(_QWORD *)((char *)this + 302) = 0;
  *((_QWORD *)this + 39) = (char *)this + 320;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
}

_QWORD *MachTask::Clear(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  v1 = this;
  v2 = this + 37;
  if (this[37])
    this = (_QWORD *)MachTask::ShutDownExcecptionThread((MachTask *)this);
  *((_DWORD *)v1 + 4) = 0;
  *v2 = 0;
  *(_QWORD *)((char *)v2 + 6) = 0;
  return this;
}

void MachTask::~MachTask(MachTask *this)
{
  *(_QWORD *)this = off_100061588;
  if (*((_QWORD *)this + 37))
    MachTask::ShutDownExcecptionThread(this);
  *((_DWORD *)this + 4) = 0;
  *((_QWORD *)this + 37) = 0;
  *(_QWORD *)((char *)this + 302) = 0;
  std::__tree<std::__value_type<unsigned int,DNBArchPluginInfoTag>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,DNBArchPluginInfoTag>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,DNBArchPluginInfoTag>>>::destroy((uint64_t)this + 312, *((_QWORD **)this + 40));
  MachVMMemory::~MachVMMemory((void **)this + 3);
}

{
  *(_QWORD *)this = off_100061588;
  if (*((_QWORD *)this + 37))
    MachTask::ShutDownExcecptionThread(this);
  *((_DWORD *)this + 4) = 0;
  *((_QWORD *)this + 37) = 0;
  *(_QWORD *)((char *)this + 302) = 0;
  std::__tree<std::__value_type<unsigned int,DNBArchPluginInfoTag>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,DNBArchPluginInfoTag>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,DNBArchPluginInfoTag>>>::destroy((uint64_t)this + 312, *((_QWORD **)this + 40));
  MachVMMemory::~MachVMMemory((void **)this + 3);
  operator delete();
}

uint64_t MachTask::Suspend(MachTask *this)
{
  task_read_t v1;
  _BOOL4 v2;
  int v3;
  uint64_t v4;
  void *__p[2];
  __int128 v7;

  *(_OWORD *)__p = 0u;
  v7 = 0u;
  v1 = *((_DWORD *)this + 4);
  __p[0] = (void *)(task_suspend(v1) | 0x100000000);
  LOBYTE(__p[1]) = 0;
  HIBYTE(v7) = 0;
  v2 = DNBLogCheckLogBit(0x2000);
  if (LODWORD(__p[0]))
    v3 = 1;
  else
    v3 = v2;
  if (v3 != 1)
    return 0;
  DNBError::LogThreaded((DNBError *)__p, "::task_suspend(target_task = 0x%4.4x)", v1);
  v4 = LODWORD(__p[0]);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[1]);
  return v4;
}

void sub_100045B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MachTask::Resume(MachTask *this, uint64_t a2, task_basic_info *a3)
{
  MachTask *v3;
  uint64_t v5;
  integer_t v6;
  _BOOL4 v7;
  int v8;
  _BOOL4 v9;
  int v10;
  void *__p[2];
  __int128 v13;
  integer_t task_info_out[10];

  v3 = (MachTask *)*((unsigned int *)this + 4);
  if (!(_DWORD)v3)
    return 4;
  *(_OWORD *)__p = 0u;
  v13 = 0u;
  LODWORD(__p[0]) = MachTask::BasicInfo(v3, task_info_out, a3);
  HIDWORD(__p[0]) = 1;
  LOBYTE(__p[1]) = 0;
  HIBYTE(v13) = 0;
  if (LODWORD(__p[0]))
    return LODWORD(__p[0]);
  v6 = task_info_out[0];
  if (*((_BYTE *)this + 309) && task_info_out[0] == 2)
  {
    __p[0] = (void *)(task_resume((task_read_t)v3) | 0x100000000);
    if (SHIBYTE(v13) < 0)
    {
      *(_BYTE *)__p[1] = 0;
      *(_QWORD *)&v13 = 0;
    }
    else
    {
      LOBYTE(__p[1]) = 0;
      HIBYTE(v13) = 0;
    }
    v7 = DNBLogCheckLogBit(0x2000);
    if (LODWORD(__p[0]))
      v8 = 1;
    else
      v8 = v7;
    if (v8 == 1)
      DNBError::LogThreaded((DNBError *)__p, "::task_resume double-resume after exec-start-stopped(target_task = 0x%4.4x)", (_DWORD)v3);
    v6 = task_info_out[0];
  }
  *((_BYTE *)this + 309) = 0;
  if (v6 >= 1)
  {
    __p[0] = (void *)(task_resume((task_read_t)v3) | 0x100000000);
    if (SHIBYTE(v13) < 0)
    {
      *(_BYTE *)__p[1] = 0;
      *(_QWORD *)&v13 = 0;
    }
    else
    {
      LOBYTE(__p[1]) = 0;
      HIBYTE(v13) = 0;
    }
    v9 = DNBLogCheckLogBit(0x2000);
    v10 = LODWORD(__p[0]) || v9;
    if (v10 == 1)
      DNBError::LogThreaded((DNBError *)__p, "::task_resume(target_task = 0x%4.4x)", (_DWORD)v3);
  }
  v5 = LODWORD(__p[0]);
  if (SHIBYTE(v13) < 0)
    operator delete(__p[1]);
  return v5;
}

void sub_100045C8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MachTask::BasicInfo(MachTask *this, task_info_t task_info_out, task_basic_info *a3)
{
  int v4;
  unsigned int v5;
  _BOOL4 v6;
  int v7;
  _BOOL4 v8;
  int v10;
  int v11;
  uint64_t v12;
  double v14;
  mach_msg_type_number_t task_info_outCnt;
  void *__p[2];
  __int128 v17;

  if (!task_info_out)
    return 4;
  v4 = (int)this;
  *(_OWORD *)__p = 0u;
  v17 = 0u;
  task_info_outCnt = 10;
  v5 = task_info((task_name_t)this, 0x12u, task_info_out, &task_info_outCnt);
  __p[0] = (void *)(v5 | 0x100000000);
  LOBYTE(__p[1]) = 0;
  HIBYTE(v17) = 0;
  v6 = DNBLogCheckLogBit(0x2000);
  if (v5)
    v7 = 1;
  else
    v7 = v6;
  if (v7 == 1)
    DNBError::LogThreaded((DNBError *)__p, "::task_info(target_task = 0x%4.4x, flavor = TASK_BASIC_INFO, task_info_out => %p, task_info_outCnt => %u)", v4, task_info_out, task_info_outCnt);
  if (DNBLogCheckLogBit(0x2000))
  {
    v8 = DNBLogCheckLogBit(1);
    if (!LODWORD(__p[0]) && v8)
    {
      v10 = task_info_out[5];
      v11 = task_info_out[6];
      if (DNBLogEnabled())
      {
        v14 = (float)((float)((float)v11 / 1000000.0) + (float)v10);
        _DNBLogThreaded("task_basic_info = { suspend_count = %i, virtual_size = 0x%8.8llx, resident_size = 0x%8.8llx, user_time = %f, system_time = %f }", *task_info_out, *(_QWORD *)(task_info_out + 1), *(_QWORD *)(task_info_out + 3), v14, v14);
      }
    }
  }
  v12 = LODWORD(__p[0]);
  if (SHIBYTE(v17) < 0)
    operator delete(__p[1]);
  return v12;
}

void sub_100045DE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MachTask::ShutDownExcecptionThread(MachTask *this)
{
  mach_port_name_t v2;
  _opaque_pthread_t *v3;
  _BOOL4 v4;
  int v5;
  _BOOL4 v6;
  int v7;
  mach_port_t v8;
  _BOOL4 v9;
  int v10;
  uint64_t v11;
  void *__p[2];
  __int128 v14;

  *(_OWORD *)__p = 0u;
  v14 = 0u;
  LODWORD(__p[0]) = MachException::PortInfo::Restore((MachTask *)((char *)this + 64), *((_DWORD *)this + 4));
  HIDWORD(__p[0]) = 1;
  LOBYTE(__p[1]) = 0;
  HIBYTE(v14) = 0;
  v2 = *((_DWORD *)this + 76);
  v3 = (_opaque_pthread_t *)*((_QWORD *)this + 37);
  *((_DWORD *)this + 76) = 0;
  __p[0] = (void *)(pthread_cancel(v3) | 0x200000000);
  LOBYTE(__p[1]) = 0;
  HIBYTE(v14) = 0;
  v4 = DNBLogCheckLogBit(0x2000);
  if (LODWORD(__p[0]))
    v5 = 1;
  else
    v5 = v4;
  if (v5 == 1)
    DNBError::LogThreaded((DNBError *)__p, "::pthread_cancel(thread = %p)", *((const void **)this + 37));
  __p[0] = (void *)(pthread_join(*((pthread_t *)this + 37), 0) | 0x200000000);
  if (SHIBYTE(v14) < 0)
  {
    *(_BYTE *)__p[1] = 0;
    *(_QWORD *)&v14 = 0;
  }
  else
  {
    LOBYTE(__p[1]) = 0;
    HIBYTE(v14) = 0;
  }
  v6 = DNBLogCheckLogBit(0x2000);
  if (LODWORD(__p[0]))
    v7 = 1;
  else
    v7 = v6;
  if (v7 == 1)
    DNBError::LogThreaded((DNBError *)__p, "::pthread_join(thread = %p, value_ptr = NULL)", *((const void **)this + 37));
  v8 = mach_task_self_;
  __p[0] = (void *)(mach_port_deallocate(mach_task_self_, v2) | 0x100000000);
  if (SHIBYTE(v14) < 0)
  {
    *(_BYTE *)__p[1] = 0;
    *(_QWORD *)&v14 = 0;
  }
  else
  {
    LOBYTE(__p[1]) = 0;
    HIBYTE(v14) = 0;
  }
  v9 = DNBLogCheckLogBit(0x2000);
  if (LODWORD(__p[0]))
    v10 = 1;
  else
    v10 = v9;
  if (v10 == 1)
  {
    DNBError::LogThreaded((DNBError *)__p, "::mach_port_deallocate(task = 0x%4.4x, name = 0x%4.4x)", v8, v2);
    v11 = LODWORD(__p[0]);
  }
  else
  {
    v11 = 0;
  }
  *((_WORD *)this + 154) = 0;
  if (SHIBYTE(v14) < 0)
    operator delete(__p[1]);
  return v11;
}

void sub_100045FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t MachTask::ReadMemory(MachTask *this, mach_vm_address_t a2, unint64_t a3, char *a4)
{
  task_name_t v5;
  unint64_t v8;
  _BOOL4 v9;
  uint64_t v11[6];

  v5 = *((_DWORD *)this + 4);
  if (!v5)
    return 0;
  v8 = MachVMMemory::Read((vm_size_t *)this + 3, v5, a2, a4, a3);
  if (DNBLogEnabledForAny(32))
    _DNBLogThreaded("MachTask::ReadMemory(addr = 0x%8.8llx, size = %llu, buf = %p) => %llu bytes read", a2, a3, a4, v8);
  if (DNBLogCheckLogBit(128) || (v9 = DNBLogCheckLogBit(64), a3 <= 8) && v9)
  {
    DNBDataRef::DNBDataRef((DNBDataRef *)v11, (const unsigned __int8 *)a4, v8, 0);
    DNBDataRef::Dump(v11, 0, v8, a2, 0, 0x10u, 0);
    DNBDataRef::~DNBDataRef((DNBDataRef *)v11);
  }
  return v8;
}

void sub_1000460A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  DNBDataRef::~DNBDataRef((DNBDataRef *)va);
  _Unwind_Resume(a1);
}

unint64_t MachTask::WriteMemory(MachTask *this, mach_vm_address_t a2, unint64_t a3, char *a4)
{
  task_name_t v5;
  unint64_t v8;
  _BOOL4 v9;
  uint64_t v11[6];

  v5 = *((_DWORD *)this + 4);
  if (!v5)
    return 0;
  v8 = MachVMMemory::Write((vm_size_t *)this + 3, v5, a2, a4, a3);
  if (DNBLogEnabledForAny(32))
    _DNBLogThreaded("MachTask::WriteMemory(addr = 0x%8.8llx, size = %llu, buf = %p) => %llu bytes written", a2, a3, a4, v8);
  if (DNBLogCheckLogBit(128) || (v9 = DNBLogCheckLogBit(64), a3 <= 8) && v9)
  {
    DNBDataRef::DNBDataRef((DNBDataRef *)v11, (const unsigned __int8 *)a4, v8, 0);
    DNBDataRef::Dump(v11, 0, v8, a2, 0, 0x10u, 0);
    DNBDataRef::~DNBDataRef((DNBDataRef *)v11);
  }
  return v8;
}

void sub_100046190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  DNBDataRef::~DNBDataRef((DNBDataRef *)va);
  _Unwind_Resume(a1);
}

uint64_t MachTask::GetMemoryRegionInfo(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t MemoryRegionInfo;

  v4 = *(unsigned int *)(a1 + 16);
  if (!(_DWORD)v4)
    return 0xFFFFFFFFLL;
  MemoryRegionInfo = MachVMMemory::GetMemoryRegionInfo(a1 + 24, v4, a2, a3);
  if (DNBLogEnabledForAny(32))
    _DNBLogThreaded("MachTask::MemoryRegionInfo(addr = 0x%8.8llx) => %i  (start = 0x%8.8llx, size = 0x%8.8llx, permissions = %u)", a2, MemoryRegionInfo, *(_QWORD *)a3, *(_QWORD *)(a3 + 8), *(_DWORD *)(a3 + 16));
  return MemoryRegionInfo;
}

void MachTask::GetProfileData(uint64_t a1@<X0>, __int16 a2@<W1>, task_basic_info *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v6;
  mach_port_t v7;
  task_inspect_t v8;
  uint64_t v9;
  __darwin_time_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t GloballyUniqueThreadIDForMachPortID;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  int v20;
  uint64_t *v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  uint64_t *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  size_t v39;
  size_t v40;
  __int128 *p_p;
  _OWORD *v42;
  timeval v43;
  unint64_t v44;
  _OWORD *v45;
  __int128 v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  __int128 v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  int64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  _BYTE *v61;
  uint64_t *v62;
  unint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  char *v66;
  uint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD *v71;
  uint64_t *v72;
  uint64_t v73;
  __int128 v74;
  mach_vm_size_t v75;
  int CPUType;
  size_t v77;
  uint64_t v78;
  std::ios_base *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  const char *v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  unsigned __int8 *v100;
  uint64_t v101;
  const char *v102;
  size_t v103;
  char *v104;
  const std::locale::facet *v105;
  unsigned int v106;
  const std::ios_base *v107;
  const std::locale::facet *v108;
  _QWORD *v109;
  _QWORD *v110;
  unsigned __int8 v111;
  thread_act_array_t v112;
  unint64_t v113;
  int v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  _QWORD *v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;
  double v127;
  _QWORD *v128;
  _QWORD *v129;
  _QWORD *v130;
  _QWORD *v131;
  _QWORD *v132;
  _QWORD *v133;
  char *v134;
  char *v135;
  void *v136;
  __darwin_time_t v137;
  uint64_t v138;
  task_inspect_t v139;
  task_inspect_t v140;
  _QWORD *v141;
  void **v142;
  unsigned int pid;
  char *v144;
  uint64_t v145;
  char *v146;
  _QWORD *v147;
  uint64_t *v148;
  size_t v149;
  _DWORD v150[5];
  char v151;
  __int128 v152;
  __int128 v153;
  int v154;
  void (__cdecl **v155)(std::ostringstream *__hidden);
  _OWORD v156[2];
  uint64_t v157;
  uint64_t v158;
  mach_msg_type_number_t thread_info_outCnt[2];
  mach_msg_type_number_t act_listCnt[2];
  __int128 __p;
  unint64_t v162;
  unsigned int v163;
  int v164;
  unsigned int v165;
  void *v166;
  uint64_t *v167;
  char *v168;
  void *v169;
  char *v170;
  unint64_t v171;
  void *v172;
  uint64_t *v173;
  uint64_t *v174;
  __int128 task_info_out;
  __int128 v176;
  uint64_t v177;
  integer_t host_info_out[4];
  thread_act_array_t act_list;
  char v180;
  timeval buffer;
  __int128 v182;
  __int128 v183;
  _OWORD v184[24];
  uint64_t v185;
  rusage_info_t host_info_outCnt;
  uint64_t arg;
  __int128 v188;
  int8x16_t v189;
  uint64_t v190;
  __int128 v191;

  v6 = a4;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if ((a2 & 1) == 0
    || ((buffer.tv_sec = 0x1900000006, v149 = 4, MachTask::GetProfileData(DNBProfileDataScanType)::numCPU != -1)
     || !sysctl((int *)&buffer, 2u, &MachTask::GetProfileData(DNBProfileDataScanType)::numCPU, &v149, 0, 0))
    && (v7 = mach_host_self(),
        LODWORD(host_info_outCnt) = 4,
        !host_statistics(v7, 3, host_info_out, (mach_msg_type_number_t *)&host_info_outCnt)))
  {
    v8 = *(_DWORD *)(a1 + 16);
    if (v8)
    {
      v9 = **(unsigned int **)(a1 + 8);
      if (!MachTask::BasicInfo((MachTask *)*(unsigned int *)(a1 + 16), (task_info_t)&task_info_out, a3))
      {
        if ((a2 & 2) != 0)
        {
          v12 = SHIDWORD(v176) + (uint64_t)SDWORD1(v176);
          v13 = v177 + DWORD2(v176);
          if ((int)v177 + DWORD2(v176) > 999999)
          {
            v13 = v177 + DWORD2(v176) - 1000000;
            ++v12;
          }
          v11 = 1000000 * v12 + v13;
          if (gettimeofday(&buffer, 0))
            v10 = 0;
          else
            v10 = buffer.tv_usec + 1000000 * buffer.tv_sec;
        }
        else
        {
          v10 = 0;
          v11 = 0;
        }
        v173 = 0;
        v172 = 0;
        v174 = 0;
        v170 = 0;
        v169 = 0;
        v171 = 0;
        v167 = 0;
        v166 = 0;
        v168 = 0;
        pid = v9;
        if ((a2 & 4) != 0)
        {
          act_list = 0;
          act_listCnt[0] = 0;
          if (!task_threads(v8, &act_list, act_listCnt))
          {
            if (act_listCnt[0])
            {
              v137 = v10;
              v138 = v11;
              v139 = v8;
              v144 = 0;
              v146 = 0;
              v148 = 0;
              v14 = 0;
              v141 = v6;
              while (1)
              {
                thread_info_outCnt[0] = 6;
                if (thread_info(act_list[v14], 4u, (thread_info_t)&host_info_outCnt, thread_info_outCnt))
                  goto LABEL_22;
                thread_info_outCnt[0] = 10;
                if (thread_info(act_list[v14], 3u, (thread_info_t)&v149, thread_info_outCnt))
                  goto LABEL_22;
                if ((v151 & 2) == 0)
                  break;
LABEL_21:
                mach_port_deallocate(mach_task_self_, act_list[v14]);
LABEL_22:
                if (++v14 >= (unint64_t)act_listCnt[0])
                {
                  v75 = 4 * act_listCnt[0];
                  v6 = v141;
                  v9 = pid;
                  v8 = v139;
                  v10 = v137;
                  v11 = v138;
                  goto LABEL_107;
                }
              }
              GloballyUniqueThreadIDForMachPortID = MachThread::GetGloballyUniqueThreadIDForMachPortID((MachThread *)act_list[v14]);
              v17 = GloballyUniqueThreadIDForMachPortID;
              v18 = v173;
              if (v173 < v174)
              {
                *v173 = GloballyUniqueThreadIDForMachPortID;
                v19 = v18 + 1;
                v20 = pid;
                goto LABEL_49;
              }
              v21 = (uint64_t *)v172;
              v22 = (char *)v173 - (_BYTE *)v172;
              v23 = ((char *)v173 - (_BYTE *)v172) >> 3;
              v24 = v23 + 1;
              if ((unint64_t)(v23 + 1) >> 61)
                goto LABEL_173;
              v25 = (char *)v174 - (_BYTE *)v172;
              if (((char *)v174 - (_BYTE *)v172) >> 2 > v24)
                v24 = v25 >> 2;
              if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
                v26 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v26 = v24;
              if (v26)
              {
                if (v26 >> 61)
                  goto LABEL_172;
                v27 = (char *)operator new(8 * v26);
              }
              else
              {
                v27 = 0;
              }
              v28 = (uint64_t *)&v27[8 * v23];
              *v28 = v17;
              v19 = v28 + 1;
              if (v18 == v21)
              {
                v20 = pid;
                goto LABEL_47;
              }
              v29 = (char *)v18 - (char *)v21 - 8;
              if (v29 >= 0x58)
              {
                v30 = (char *)v18 - v27 - v22;
                v20 = pid;
                if (v30 >= 0x20)
                {
                  v31 = (v29 >> 3) + 1;
                  v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
                  v33 = &v18[v32 / 0xFFFFFFFFFFFFFFF8];
                  v28 = (uint64_t *)((char *)v28 - v32);
                  v34 = &v27[8 * v23 - 16];
                  v35 = v18 - 2;
                  v36 = v31 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v37 = *(_OWORD *)v35;
                    *((_OWORD *)v34 - 1) = *((_OWORD *)v35 - 1);
                    *(_OWORD *)v34 = v37;
                    v34 -= 32;
                    v35 -= 4;
                    v36 -= 4;
                  }
                  while (v36);
                  v18 = v33;
                  if (v31 == (v31 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_47:
                    v172 = v28;
                    v174 = (uint64_t *)&v27[8 * v26];
                    if (v21)
                      operator delete(v21);
LABEL_49:
                    v173 = v19;
                    if ((a2 & 8) != 0 && arg)
                    {
                      if (proc_pidinfo(v20, 5, arg, &buffer, 112) && LOBYTE(v184[0]))
                      {
                        v39 = strlen((const char *)v184);
                        if (v39 >= 0x7FFFFFFFFFFFFFF8)
                          std::string::__throw_length_error[abi:ne180100]();
                        v40 = v39;
                        if (v39 >= 0x17)
                        {
                          v48 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v39 | 7) != 0x17)
                            v48 = v39 | 7;
                          v49 = v48 + 1;
                          p_p = (__int128 *)operator new(v48 + 1);
                          *((_QWORD *)&__p + 1) = v40;
                          v162 = v49 | 0x8000000000000000;
                          *(_QWORD *)&__p = p_p;
                        }
                        else
                        {
                          HIBYTE(v162) = v39;
                          p_p = &__p;
                          if (!v39)
                            goto LABEL_70;
                        }
                        memcpy(p_p, v184, v40);
LABEL_70:
                        *((_BYTE *)p_p + v40) = 0;
                        v50 = v170;
                        if ((unint64_t)v170 >= v171)
                        {
                          v170 = std::vector<std::string>::__push_back_slow_path<std::string>(&v169, (uint64_t)&__p);
                          if (SHIBYTE(v162) < 0)
                            operator delete((void *)__p);
                        }
                        else
                        {
                          v51 = __p;
                          *((_QWORD *)v170 + 2) = v162;
                          *v50 = v51;
                          v170 = (char *)v50 + 24;
                        }
                        v148 = v167;
                        v144 = v168;
                        v44 = (unint64_t)v168;
                        goto LABEL_75;
                      }
                      HIBYTE(v162) = 0;
                      LOBYTE(__p) = 0;
                      v45 = v170;
                      if ((unint64_t)v170 >= v171)
                      {
                        v47 = (unint64_t)v144;
                        v170 = std::vector<std::string>::__push_back_slow_path<std::string>(&v169, (uint64_t)&__p);
                        if (SHIBYTE(v162) < 0)
                          operator delete((void *)__p);
                      }
                      else
                      {
                        v46 = __p;
                        *((_QWORD *)v170 + 2) = v162;
                        *v45 = v46;
                        v170 = (char *)v45 + 24;
                        v47 = (unint64_t)v144;
                      }
                      v44 = v47;
                    }
                    else
                    {
                      BYTE7(v182) = 0;
                      LOBYTE(buffer.tv_sec) = 0;
                      v42 = v170;
                      if ((unint64_t)v170 >= v171)
                      {
                        v44 = (unint64_t)v146;
                        v170 = std::vector<std::string>::__push_back_slow_path<std::string>(&v169, (uint64_t)&buffer);
                        if (SBYTE7(v182) < 0)
                          operator delete((void *)buffer.tv_sec);
                      }
                      else
                      {
                        v43 = buffer;
                        *((_QWORD *)v170 + 2) = v182;
                        *v42 = v43;
                        v170 = (char *)v42 + 24;
                        v44 = (unint64_t)v146;
                      }
                    }
LABEL_75:
                    v52 = v150[0] + (uint64_t)(int)v149;
                    v53 = v150[1] + HIDWORD(v149);
                    if (v150[1] + HIDWORD(v149) > 999999)
                    {
                      v53 = v150[1] + HIDWORD(v149) - 1000000;
                      ++v52;
                    }
                    v54 = 1000000 * v52 + v53;
                    v55 = v148;
                    if ((unint64_t)v148 < v44)
                    {
                      v146 = (char *)v44;
                      *v148 = v54;
                      v15 = v148 + 1;
LABEL_20:
                      v167 = v15;
                      v148 = v15;
                      goto LABEL_21;
                    }
                    v56 = (uint64_t *)v166;
                    v57 = (char *)v148 - (_BYTE *)v166;
                    v58 = ((char *)v148 - (_BYTE *)v166) >> 3;
                    v59 = v58 + 1;
                    if ((unint64_t)(v58 + 1) >> 61)
LABEL_173:
                      std::vector<kevent>::__throw_length_error[abi:ne180100]();
                    if ((uint64_t)(v44 - (_QWORD)v166) >> 2 > v59)
                      v59 = (uint64_t)(v44 - (_QWORD)v166) >> 2;
                    if (v44 - (unint64_t)v166 >= 0x7FFFFFFFFFFFFFF8)
                      v60 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v60 = v59;
                    if (v60)
                    {
                      if (v60 >> 61)
LABEL_172:
                        std::__throw_bad_array_new_length[abi:ne180100]();
                      v61 = operator new(8 * v60);
                      v55 = v148;
                    }
                    else
                    {
                      v61 = 0;
                    }
                    v62 = (uint64_t *)&v61[8 * v58];
                    *v62 = v54;
                    v15 = v62 + 1;
                    if (v55 != v56)
                    {
                      v63 = (char *)v55 - (char *)v56 - 8;
                      if (v63 >= 0x168)
                      {
                        v67 = v55 - 1;
                        v68 = ((char *)(v55 - 1) - (char *)v56) & 0xFFFFFFFFFFFFFFF8;
                        if (&v61[v57 - 8 - v68] > &v61[v57 - 8])
                        {
                          v64 = v148;
                        }
                        else if ((uint64_t *)((char *)v67 - v68) > v67)
                        {
                          v64 = v148;
                        }
                        else if ((unint64_t)((char *)v148 - v61 - v57) >= 0x20)
                        {
                          v69 = (v63 >> 3) + 1;
                          v70 = 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
                          v64 = &v148[v70 / 0xFFFFFFFFFFFFFFF8];
                          v62 = (uint64_t *)((char *)v62 - v70);
                          v71 = &v61[8 * v58 - 16];
                          v72 = v148 - 2;
                          v73 = v69 & 0x3FFFFFFFFFFFFFFCLL;
                          do
                          {
                            v74 = *(_OWORD *)v72;
                            *(v71 - 1) = *((_OWORD *)v72 - 1);
                            *v71 = v74;
                            v71 -= 2;
                            v72 -= 4;
                            v73 -= 4;
                          }
                          while (v73);
                          if (v69 == (v69 & 0x3FFFFFFFFFFFFFFCLL))
                            goto LABEL_92;
                        }
                        else
                        {
                          v64 = v148;
                        }
                      }
                      else
                      {
                        v64 = v55;
                      }
                      do
                      {
                        v65 = *--v64;
                        *--v62 = v65;
                      }
                      while (v64 != v56);
                    }
LABEL_92:
                    v66 = &v61[8 * v60];
                    v166 = v62;
                    v168 = v66;
                    v144 = v66;
                    if (v56)
                      operator delete(v56);
                    v146 = v66;
                    goto LABEL_20;
                  }
                }
              }
              else
              {
                v20 = pid;
              }
              do
              {
                v38 = *--v18;
                *--v28 = v38;
              }
              while (v18 != v21);
              goto LABEL_47;
            }
            v75 = 0;
LABEL_107:
            mach_vm_deallocate(mach_task_self_, (mach_vm_address_t)act_list, v75);
          }
        }
        act_list = 0;
        *(_QWORD *)thread_info_outCnt = 0;
        *(_QWORD *)act_listCnt = 0;
        v158 = 0;
        v156[0] = task_info_out;
        v156[1] = v176;
        v157 = v177;
        CPUType = MachProcess::GetCPUType(*(MachProcess **)(a1 + 8));
        if (MachVMMemory::GetMemoryProfile((int)a1 + 24, a2, v8, (int)v156, CPUType, v9, (host_info64_t)&__p, &act_list, act_listCnt, thread_info_outCnt, &v158))
        {
          v140 = v8;
          v142 = (void **)v6;
          v149 = v77;
          *(_QWORD *)((char *)&v150[-2] + *(_QWORD *)(v77 - 24)) = v78;
          v79 = (std::ios_base *)((char *)&v150[-2] + *(_QWORD *)(v149 - 24));
          std::ios_base::init(v79, v150);
          v79[1].__vftable = 0;
          v79[1].__fmtflags_ = -1;
          std::streambuf::basic_streambuf(v150);
          v152 = 0u;
          v153 = 0u;
          v154 = 16;
          if ((a2 & 1) != 0)
          {
            v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v149, (uint64_t)"num_cpu:", 8);
            v81 = (_QWORD *)std::ostream::operator<<(v80, MachTask::GetProfileData(DNBProfileDataScanType)::numCPU);
            LOBYTE(buffer.tv_sec) = 59;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)&buffer, 1);
            v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v149, (uint64_t)"host_user_ticks:", 16);
            v83 = (_QWORD *)std::ostream::operator<<(v82, host_info_out[0]);
            LOBYTE(buffer.tv_sec) = 59;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)&buffer, 1);
            v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v149, (uint64_t)"host_sys_ticks:", 15);
            v85 = (_QWORD *)std::ostream::operator<<(v84, host_info_out[1]);
            LOBYTE(buffer.tv_sec) = 59;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)&buffer, 1);
            v86 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v149, (uint64_t)"host_idle_ticks:", 16);
            v87 = (_QWORD *)std::ostream::operator<<(v86, host_info_out[2]);
            LOBYTE(buffer.tv_sec) = 59;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)&buffer, 1);
          }
          if ((a2 & 2) != 0)
          {
            v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v149, (uint64_t)"elapsed_usec:", 13);
            v89 = (_QWORD *)std::ostream::operator<<(v88, v10);
            LOBYTE(buffer.tv_sec) = 59;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)&buffer, 1);
            v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v149, (uint64_t)"task_used_usec:", 15);
            v91 = (_QWORD *)std::ostream::operator<<(v90, v11);
            LOBYTE(buffer.tv_sec) = 59;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)&buffer, 1);
          }
          if ((a2 & 4) != 0)
          {
            v92 = v172;
            if (v173 != v172)
            {
              v93 = 0;
              v147 = v172;
              if ((unint64_t)(((char *)v173 - (_BYTE *)v172) >> 3) <= 1)
                v94 = 1;
              else
                v94 = ((char *)v173 - (_BYTE *)v172) >> 3;
              v95 = "thread_used_id:";
              v145 = v94;
              do
              {
                v96 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v149, (uint64_t)v95, 15);
                *(_DWORD *)((char *)v96 + *(_QWORD *)(*v96 - 24) + 8) = *(_DWORD *)((_BYTE *)v96
                                                                                    + *(_QWORD *)(*v96 - 24)
                                                                                    + 8) & 0xFFFFFFB5 | 8;
                v97 = (_QWORD *)std::ostream::operator<<(v96, v92[v93]);
                *(_DWORD *)((char *)v97 + *(_QWORD *)(*v97 - 24) + 8) = *(_DWORD *)((_BYTE *)v97
                                                                                    + *(_QWORD *)(*v97 - 24)
                                                                                    + 8) & 0xFFFFFFB5 | 2;
                LOBYTE(buffer.tv_sec) = 59;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)&buffer, 1);
                v98 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v149, (uint64_t)"thread_used_usec:", 17);
                v99 = (_QWORD *)std::ostream::operator<<(v98, *((_QWORD *)v166 + v93));
                LOBYTE(buffer.tv_sec) = 59;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)&buffer, 1);
                if ((a2 & 8) == 0)
                  goto LABEL_121;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v149, (uint64_t)"thread_used_name:", 17);
                v100 = (unsigned __int8 *)v169 + 24 * v93;
                if ((char)v100[23] < 0)
                {
                  v101 = *((_QWORD *)v100 + 1);
                  if (v101)
                  {
                    v100 = *(unsigned __int8 **)v100;
LABEL_128:
                    v102 = v95;
                    v103 = v149;
                    v104 = (char *)&v150[-2] + *(_QWORD *)(v149 - 24);
                    if (*((_DWORD *)v104 + 36) == -1)
                    {
                      std::ios_base::getloc((const std::ios_base *)((char *)&v150[-2] + *(_QWORD *)(v149 - 24)));
                      v105 = std::locale::use_facet((const std::locale *)&buffer, &std::ctype<char>::id);
                      ((void (*)(const std::locale::facet *, uint64_t))v105->__vftable[2].~facet_0)(v105, 32);
                      std::locale::~locale((std::locale *)&buffer);
                      v103 = v149;
                    }
                    *((_DWORD *)v104 + 36) = 48;
                    *(_DWORD *)((char *)v150 + *(_QWORD *)(v103 - 24)) = *(_DWORD *)((char *)v150
                                                                                   + *(_QWORD *)(v103 - 24)) & 0xFFFFFFB5 | 8;
                    *(_DWORD *)((char *)v150 + *(_QWORD *)(v103 - 24)) = *(_DWORD *)((char *)v150
                                                                                   + *(_QWORD *)(v103 - 24)) & 0xFFFFFF4F | 0x80;
                    *(_QWORD *)((char *)&v150[4] + *(_QWORD *)(v103 - 24)) = 2;
                    if (v101)
                    {
                      do
                      {
                        v106 = *v100++;
                        std::ostream::operator<<(&v149, v106);
                        --v101;
                      }
                      while (v101);
                      v103 = v149;
                    }
                    *(_DWORD *)((char *)v150 + *(_QWORD *)(v103 - 24)) = *(_DWORD *)((char *)v150
                                                                                   + *(_QWORD *)(v103 - 24)) & 0xFFFFFFB5 | 2;
                    v107 = (const std::ios_base *)((char *)&v150[-2] + *(_QWORD *)(v103 - 24));
                    if (v107[1].__fmtflags_ == -1)
                    {
                      std::ios_base::getloc(v107);
                      v108 = std::locale::use_facet((const std::locale *)&buffer, &std::ctype<char>::id);
                      ((void (*)(const std::locale::facet *, uint64_t))v108->__vftable[2].~facet_0)(v108, 32);
                      std::locale::~locale((std::locale *)&buffer);
                    }
                    v107[1].__fmtflags_ = 32;
                    v95 = v102;
                    v94 = v145;
                    v92 = v147;
                  }
                }
                else
                {
                  v101 = v100[23];
                  if (v100[23])
                    goto LABEL_128;
                }
                LOBYTE(buffer.tv_sec) = 59;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v149, (uint64_t)&buffer, 1);
LABEL_121:
                ++v93;
              }
              while (v93 != v94);
            }
          }
          if ((a2 & 0x20) != 0)
          {
            v109 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v149, (uint64_t)"total:", 6);
            v110 = (_QWORD *)std::ostream::operator<<(v109, act_list);
            LOBYTE(buffer.tv_sec) = 59;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)&buffer, 1);
          }
          if ((a2 & 0x40) != 0)
          {
            if ((v111 & 1) == 0
            {
              MachTask::GetProfileData(DNBProfileDataScanType)::pagesize = vm_kernel_page_size;
            }
            v112 = act_list;
            v113 = MachTask::GetProfileData(DNBProfileDataScanType)::pagesize;
            v114 = v164;
            v115 = v165;
            v116 = __p;
            v117 = v163;
            v118 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v149, (uint64_t)"used:", 5);
            v119 = (_QWORD *)std::ostream::operator<<(v118, ((unint64_t)v112 / v113 - ((v116 - v114) + v115 + v117))* MachTask::GetProfileData(DNBProfileDataScanType)::pagesize);
            LOBYTE(buffer.tv_sec) = 59;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)&buffer, 1);
            if ((a2 & 0x100) != 0)
            {
              v120 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v149, (uint64_t)"anonymous:", 10);
              v121 = (_QWORD *)std::ostream::operator<<(v120, *(_QWORD *)act_listCnt);
              LOBYTE(buffer.tv_sec) = 59;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v121, (uint64_t)&buffer, 1);
            }
            v122 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v149, (uint64_t)"phys_footprint:", 15);
            v123 = (_QWORD *)std::ostream::operator<<(v122, *(_QWORD *)thread_info_outCnt);
            LOBYTE(buffer.tv_sec) = 59;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v123, (uint64_t)&buffer, 1);
          }
          if (a2 < 0)
          {
            v124 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v149, (uint64_t)"mem_cap:", 8);
            v125 = (_QWORD *)std::ostream::operator<<(v124, v158);
            LOBYTE(buffer.tv_sec) = 59;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v125, (uint64_t)&buffer, 1);
          }
          if ((a2 & 0x200) != 0 && !proc_pid_rusage(pid, 2, &host_info_outCnt))
          {
            v126 = mach_absolute_time();
            v185 = 0;
            memset(v184, 0, sizeof(v184));
            v182 = 0u;
            v183 = 0u;
            buffer = (timeval)0;
            pm_sample_task_and_pid(v140, pid, &buffer, v126, -24);
            *(_OWORD *)((char *)&v184[5] + 4) = v188;
            *(int8x16_t *)((char *)&v184[6] + 4) = vextq_s8(v189, v189, 8uLL);
            *(_OWORD *)((char *)&v184[16] + 8) = v191;
            *((_QWORD *)&v184[17] + 1) = v190;
            v127 = pm_energy_impact(&buffer);
            v128 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v149, (uint64_t)"energy:", 7);
            v129 = (_QWORD *)std::ostream::operator<<(v128, (unint64_t)(v127 * 1000000000.0));
            v180 = 59;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v129, (uint64_t)&v180, 1);
          }
          if ((a2 & 0x400) != 0)
          {
            LODWORD(buffer.tv_sec) = -1;
            LODWORD(host_info_outCnt) = -1;
            if (!proc_get_cpumon_params(pid, &buffer, &host_info_outCnt)
              && (buffer.tv_sec & 0x80000000) == 0
              && (host_info_outCnt & 0x80000000) == 0)
            {
              v130 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v149, (uint64_t)"cpu_cap_p:", 10);
              v131 = (_QWORD *)std::ostream::operator<<(v130, LODWORD(buffer.tv_sec));
              v180 = 59;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)&v180, 1);
              v132 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v149, (uint64_t)"cpu_cap_t:", 10);
              v133 = (_QWORD *)std::ostream::operator<<(v132, host_info_outCnt);
              v180 = 59;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v133, (uint64_t)&v180, 1);
            }
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v149, (uint64_t)"--end--;", 8);
          std::stringbuf::str(&buffer, v150);
          if (*((char *)v142 + 23) < 0)
            operator delete(*v142);
          *(timeval *)v142 = buffer;
          v142[2] = (void *)v182;
          if (SBYTE7(v153) < 0)
            operator delete((void *)v152);
          std::streambuf::~streambuf(v150);
          std::ios::~ios(&v155);
        }
        if (v166)
          operator delete(v166);
        v134 = (char *)v169;
        if (v169)
        {
          v135 = v170;
          v136 = v169;
          if (v170 != v169)
          {
            do
            {
              if (*(v135 - 1) < 0)
                operator delete(*((void **)v135 - 3));
              v135 -= 24;
            }
            while (v135 != v134);
            v136 = v169;
          }
          v170 = v134;
          operator delete(v136);
        }
        if (v172)
          operator delete(v172);
      }
    }
  }
}

void sub_100047284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a69;
  void *v70;
  void *v71;

  if (a69 < 0)
    operator delete(__p);
  v70 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v70;
    operator delete(v70);
  }
  std::vector<std::string>::~vector[abi:ne180100]((void **)&STACK[0x268]);
  v71 = (void *)STACK[0x280];
  if (STACK[0x280])
  {
    STACK[0x288] = (unint64_t)v71;
    operator delete(v71);
  }
  if (*(char *)(a17 + 23) < 0)
    operator delete(*(void **)a17);
  _Unwind_Resume(a1);
}

MachTask *MachTask::TaskPortForProcessID(MachTask *this, DNBError *a2, int a3)
{
  MachTask *result;
  BOOL v5;
  unsigned int *v6;

  result = (MachTask *)*((unsigned int *)this + 4);
  if ((_DWORD)result)
    v5 = a3 == 0;
  else
    v5 = 0;
  if (!v5)
  {
    v6 = (unsigned int *)*((_QWORD *)this + 1);
    if (v6)
    {
      result = MachTask::TaskPortForProcessID((MachTask *)*v6, (int)a2, (DNBError *)0xA, 0x2710u);
      *((_DWORD *)this + 4) = (_DWORD)result;
    }
  }
  return result;
}

MachTask *MachTask::TaskPortForProcessID(MachTask *this, int a2, DNBError *a3, useconds_t a4)
{
  MachTask *v4;
  unsigned int v5;
  mach_port_name_t v6;
  int v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  int v19;
  int v20;
  const char *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  mach_port_name_t v31;
  void *__p[2];
  __int128 v33;
  char __str[1024];

  if (!(_DWORD)this)
    return 0;
  v5 = a3;
  *(_OWORD *)__p = 0u;
  v33 = 0u;
  v6 = mach_task_self_;
  v31 = 0;
  if (!(_DWORD)a3)
  {
LABEL_26:
    v10 = 0;
    if ((SHIBYTE(v33) & 0x80000000) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
  v4 = this;
  v8 = 0;
  v9 = (int)this;
  v30 = (int)this;
  v10 = 1;
  while (1)
  {
    if (DNBLogEnabled())
    {
      v11 = getpid();
      _DNBLog(0, (uint64_t)"[LaunchAttach] (%d) about to task_for_pid(%d)", v12, v13, v14, v15, v16, v17, v11);
    }
    __p[0] = (void *)(task_for_pid(v6, (int)v4, &v31) | 0x100000000);
    if (SHIBYTE(v33) < 0)
    {
      *(_BYTE *)__p[1] = 0;
      *(_QWORD *)&v33 = 0;
    }
    else
    {
      LOBYTE(__p[1]) = 0;
      HIBYTE(v33) = 0;
    }
    v18 = DNBLogCheckLogBit(0x2000);
    v19 = (int)__p[0];
    v20 = LODWORD(__p[0]) || v18;
    if (v20 != 1)
      break;
    if (DNBError::AsString((DNBError *)__p))
      v21 = (const char *)DNBError::AsString((DNBError *)__p);
    else
      v21 = "success";
    snprintf(__str, 0x400uLL, "::task_for_pid(target_tport = 0x%4.4x, pid = %d, &task) => err = 0x%8.8x (%s)", v6, v9, v19, v21);
    if (LODWORD(__p[0]))
    {
      if (__str[0])
      {
        std::string::assign((std::string *)&__p[1], __str);
      }
      else if (SHIBYTE(v33) < 0)
      {
        *(_BYTE *)__p[1] = 0;
        *(_QWORD *)&v33 = 0;
      }
      else
      {
        LOBYTE(__p[1]) = 0;
        HIBYTE(v33) = 0;
      }
      if (DNBLogEnabled())
        _DNBLogError("[LaunchAttach] MachTask::TaskPortForProcessID task_for_pid(%d) failed: %s", v30, __str);
    }
    DNBError::LogThreaded((DNBError *)__p, __str);
    if (!LODWORD(__p[0]))
      break;
    usleep(a4);
    v10 = ++v8 < v5;
    if (v5 == v8)
      goto LABEL_26;
  }
  if (DNBLogEnabled())
  {
    v23 = getpid();
    _DNBLog(0, (uint64_t)"[LaunchAttach] (%d) successfully task_for_pid(%d)'ed", v24, v25, v26, v27, v28, v29, v23);
  }
  v4 = (MachTask *)v31;
  if (SHIBYTE(v33) < 0)
LABEL_27:
    operator delete(__p[1]);
LABEL_28:
  if (!v10)
    return 0;
  return v4;
}

void sub_10004763C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

MachTask *MachTask::IsValid(MachTask *this, unsigned int a2, task_basic_info *a3)
{
  integer_t task_info_out[10];

  if ((_DWORD)this)
    return (MachTask *)(MachTask::BasicInfo(this, task_info_out, a3) == 0);
  return this;
}

BOOL MachTask::StartExceptionThread(uint64_t a1, int8x16_t **a2, uint64_t a3)
{
  int v6;
  task_basic_info *v7;
  MachTask *v8;
  mach_port_t v9;
  mach_port_name_t *v10;
  kern_return_t v11;
  unsigned int *v12;
  _BOOL8 result;
  kern_return_t inserted;
  _DWORD *v15;
  exception_mask_t v16;
  int8x16_t *v17;
  int8x16_t *v18;
  unint64_t v19;
  uint64_t v20;
  int8x16_t *v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t *v24;
  uint64_t v25;
  int8x16_t v26;
  __int32 v27;
  int v28;
  integer_t task_info_out[10];

  if (DNBLogEnabledForAny(8))
    _DNBLogThreaded("MachTask::%s()", "StartExceptionThread");
  v8 = (MachTask *)*(unsigned int *)(a1 + 16);
  if (!(_DWORD)v8
    && ((v12 = *(unsigned int **)(a1 + 8)) == 0
     || (v8 = MachTask::TaskPortForProcessID((MachTask *)*v12, v6, (DNBError *)0xA, 0x2710u),
         (*(_DWORD *)(a1 + 16) = (_DWORD)v8) == 0))
    || MachTask::BasicInfo(v8, task_info_out, v7))
  {
    result = DNBLogEnabled();
    if (!result)
      return result;
    _DNBLogError("MachTask::%s (): task invalid, exception thread start failed.", "StartExceptionThread");
    return 0;
  }
  v9 = mach_task_self_;
  v10 = (mach_port_name_t *)(a1 + 304);
  v11 = mach_port_allocate(mach_task_self_, 1u, (mach_port_name_t *)(a1 + 304));
  *(_DWORD *)a3 = v11;
  *(_DWORD *)(a3 + 4) = 1;
  if (*(char *)(a3 + 31) < 0)
  {
    **(_BYTE **)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    if (*(_DWORD *)a3)
      return 0;
  }
  else
  {
    *(_BYTE *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 31) = 0;
    if (v11)
      return 0;
  }
  inserted = mach_port_insert_right(v9, *v10, *v10, 0x14u);
  *(_DWORD *)a3 = inserted;
  *(_DWORD *)(a3 + 4) = 1;
  if (*(char *)(a3 + 31) < 0)
  {
    **(_BYTE **)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    if (!*(_DWORD *)a3)
      goto LABEL_19;
    return 0;
  }
  *(_BYTE *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 31) = 0;
  if (inserted)
    return 0;
LABEL_19:
  v15 = (_DWORD *)(a1 + 64);
  MachException::PortInfo::Save((MachException::PortInfo *)(a1 + 64), *(_DWORD *)(a1 + 16));
  v16 = *(_DWORD *)(a1 + 64);
  if (!v16)
  {
    std::string::assign((std::string *)(a3 + 8), "failed to get exception port info");
    return 0;
  }
  v18 = *a2;
  v17 = a2[1];
  if (*a2 != v17)
  {
    v19 = (char *)v17 - (char *)v18 - 4;
    if (v19 < 0x3C
      || v15 < (__int32 *)((char *)&v18->i32[1] + (v19 & 0xFFFFFFFFFFFFFFFCLL)) && (unint64_t)v18 < a1 + 68)
    {
      goto LABEL_41;
    }
    v20 = (v19 >> 2) + 1;
    v21 = (int8x16_t *)((char *)v18 + 4 * (v20 & 0x7FFFFFFFFFFFFFF8));
    v22.i64[0] = -1;
    v22.i64[1] = -1;
    v23.i32[1] = -1;
    v23.i64[1] = -1;
    v23.i32[0] = *(_DWORD *)(a1 + 64);
    v24 = v18 + 1;
    v25 = v20 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v23 = vbicq_s8(v23, v24[-1]);
      v22 = vbicq_s8(v22, *v24);
      v24 += 2;
      v25 -= 8;
    }
    while (v25);
    v26 = vandq_s8(v22, v23);
    *(int8x8_t *)v26.i8 = vand_s8(*(int8x8_t *)v26.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL));
    v16 = v26.i32[0] & v26.i32[1];
    *v15 = v26.i32[0] & v26.i32[1];
    v18 = v21;
    if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_41:
      do
      {
        v27 = v18->i32[0];
        v18 = (int8x16_t *)((char *)v18 + 4);
        v16 &= ~v27;
        *v15 = v16;
      }
      while (v18 != v17);
    }
  }
  *(_DWORD *)a3 = task_set_exception_ports((task_t)v8, v16, *v10, -2147483647, 5);
  *(_DWORD *)(a3 + 4) = 1;
  if (*(char *)(a3 + 31) < 0)
  {
    **(_BYTE **)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  else
  {
    *(_BYTE *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 31) = 0;
  }
  if (DNBLogCheckLogBit(8) || *(_DWORD *)a3)
  {
    DNBError::LogThreaded((DNBError *)a3, "::task_set_exception_ports(task = 0x%4.4x, exception_mask = 0x%8.8x, new_port = 0x%4.4x, behavior = 0x%8.8x, new_flavor = 0x%8.8x)", (_DWORD)v8, *v15, *v10, -2147483647, 5);
    if (*(_DWORD *)a3)
      return 0;
  }
  v28 = pthread_create((pthread_t *)(a1 + 296), 0, (void *(__cdecl *)(void *))MachTask::ExceptionThread, (void *)a1);
  *(_DWORD *)a3 = v28;
  *(_DWORD *)(a3 + 4) = 1;
  if (*(char *)(a3 + 31) < 0)
  {
    **(_BYTE **)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v28 = *(_DWORD *)a3;
  }
  else
  {
    *(_BYTE *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 31) = 0;
  }
  return v28 == 0;
}

uint64_t MachTask::ExceptionThread(MachTask *this, void *a2)
{
  MachProcess *v3;
  _opaque_pthread_t *v4;
  _opaque_pthread_t *v5;
  MachTask *v6;
  uint64_t v7;
  int v8;
  mach_msg_option_t v9;
  int v10;
  task_basic_info *v11;
  MachTask *v12;
  task_basic_info *v13;
  _BOOL4 v14;
  char *v15;
  char v16;
  void *v17;
  BOOL v18;
  CFTypeRef cf;
  int v21;
  sched_param v22;
  int x[10];
  mach_msg_header_t v24[85];
  mach_port_name_t v25;
  int v26;
  int v27;
  void *__p;
  void *v29;
  uint64_t v30;

  if (!this)
    return 0;
  v3 = (MachProcess *)*((_QWORD *)this + 1);
  if (DNBLogEnabledForAny(8))
    _DNBLogThreaded("MachTask::%s(arg = %p) starting thread...", "ExceptionThread", this);
  pthread_setname_np("exception monitoring thread");
  v21 = 0;
  v4 = pthread_self();
  if (!pthread_getschedparam(v4, &v21, &v22))
  {
    v22.sched_priority = 47;
    v5 = pthread_self();
    pthread_setschedparam(v5, v21, &v22);
  }
  v6 = (MachTask *)*((unsigned int *)this + 4);
  if (MachProcess::ProcessUsingBackBoard(v3)
    && (v7 = BKSWatchdogAssertionCreateForPID(kCFAllocatorDefault, *(unsigned int *)v3)) != 0)
  {
    cf = (CFTypeRef)v7;
  }
  else
  {
    cf = 0;
  }
  v8 = 0;
  while ((*((_DWORD *)this + 76) - 1) <= 0xFFFFFFFD)
  {
    pthread_testcancel();
    __p = 0;
    v29 = 0;
    v30 = 0;
    bzero(v24, 0x80CuLL);
    if (v8)
      v9 = 1282;
    else
      v9 = 1026;
    v10 = MachException::Message::Receive(v24, *((_DWORD *)this + 76), v9, v8 != 0, 0);
    if (v10)
    {
      if (v10 == 268451843)
      {
        if (v8)
        {
          v12 = (MachTask *)MachProcess::ExceptionMessageBundleComplete(v3);
          v6 = v12;
          if (!(_DWORD)v12 || MachTask::BasicInfo(v12, x, v13))
          {
            if (DNBLogEnabledForAny(8))
              _DNBLogThreaded("task has exited...");
            MachProcess::SetState((uint64_t)v3, 9u);
            v8 = 0;
            goto LABEL_45;
          }
          if (DNBLogEnabledForAny(8))
            _DNBLogThreaded("got a timeout, continuing...");
          v8 = 0;
        }
        goto LABEL_56;
      }
      if (v10 == 268451845)
      {
        if ((*((_DWORD *)this + 76) - 1) >= 0xFFFFFFFE)
        {
          if (DNBLogEnabledForAny(8))
            _DNBLogThreaded("thread cancelled...");
          goto LABEL_45;
        }
        if (!(_DWORD)v6 || MachTask::BasicInfo(v6, x, v11))
        {
          if (DNBLogEnabledForAny(8))
            _DNBLogThreaded("task has exited...");
          MachProcess::SetState((uint64_t)v3, 9u);
          goto LABEL_45;
        }
        v18 = DNBLogEnabledForAny(8);
        v15 = "interrupted, but task still valid, continuing...";
        if (!v18)
          goto LABEL_56;
LABEL_42:
        _DNBLogThreaded(v15);
      }
      else
      {
        v14 = DNBLogEnabledForAny(8);
        v15 = "got some other error, do something about it??? nah, continuing for now...";
        if (v14)
          goto LABEL_42;
      }
LABEL_56:
      v16 = 0;
      v17 = __p;
      if (!__p)
        goto LABEL_12;
      goto LABEL_11;
    }
    if (!MachException::Message::CatchExceptionRaise((MachException::Message *)v24, (int)v6))
      goto LABEL_56;
    if (v25 != (_DWORD)v6 && v25 && v26 && v27)
    {
      x[0] = -1;
      if (!pid_for_task(v25, x) && *(_DWORD *)v3 != x[0])
      {
        if (DNBLogEnabled())
          _DNBLogError("Got an exec mach message but the pid of the new task and the pid of the old task do not match, something is wrong.");
LABEL_45:
        v16 = 1;
        v17 = __p;
        if (!__p)
          goto LABEL_12;
        goto LABEL_11;
      }
      if (DNBLogEnabledForAny(8))
        _DNBLogThreaded("task port changed from 0x%4.4x to 0x%4.4x", (_DWORD)v6, v25);
      v6 = (MachTask *)v25;
      *((_DWORD *)this + 4) = v25;
      *((_BYTE *)this + 309) = *((_BYTE *)this + 308);
      *((_BYTE *)this + 308) = 0;
    }
    MachProcess::ExceptionMessageReceived(v3, (const MachException::Message *)v24);
    v16 = 0;
    ++v8;
    v17 = __p;
    if (!__p)
      goto LABEL_12;
LABEL_11:
    v29 = v17;
    operator delete(v17);
LABEL_12:
    if ((v16 & 1) != 0)
      break;
  }
  if (DNBLogEnabledForAny(8))
    _DNBLogThreaded("MachTask::%s (%p): thread exiting...", "ExceptionThread", this);
  if (cf)
    CFRelease(cf);
  return 0;
}

void sub_100047D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  CFReleaser<BKSWatchdogAssertion *>::~CFReleaser(va);
  _Unwind_Resume(a1);
}

_QWORD *CFReleaser<BKSWatchdogAssertion *>::~CFReleaser(_QWORD *a1)
{
  const void *v2;

  *a1 = off_1000615B8;
  v2 = (const void *)a1[1];
  if (v2)
  {
    CFRelease(v2);
    a1[1] = 0;
  }
  return a1;
}

uint64_t MachTask::GetDYLDAllImageInfosAddress(MachTask *this, DNBError *a2)
{
  task_name_t v4;
  unsigned int *v5;
  kern_return_t v7;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[4];

  task_info_outCnt = 4;
  v4 = *((_DWORD *)this + 4);
  if (!v4)
  {
    v5 = (unsigned int *)*((_QWORD *)this + 1);
    if (!v5)
    {
      v4 = 0;
      if (*(_DWORD *)a2)
        return -1;
      goto LABEL_7;
    }
    v4 = MachTask::TaskPortForProcessID((MachTask *)*v5, (int)a2, (DNBError *)0xA, 0x2710u);
    *((_DWORD *)this + 4) = v4;
  }
  if (*(_DWORD *)a2)
    return -1;
LABEL_7:
  v7 = task_info(v4, 0x11u, task_info_out, &task_info_outCnt);
  *(_DWORD *)a2 = v7;
  *((_DWORD *)a2 + 1) = 1;
  if (*((char *)a2 + 31) < 0)
  {
    **((_BYTE **)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    v7 = *(_DWORD *)a2;
  }
  else
  {
    *((_BYTE *)a2 + 8) = 0;
    *((_BYTE *)a2 + 31) = 0;
  }
  if (v7)
    return -1;
  else
    return *(_QWORD *)task_info_out;
}

mach_vm_address_t MachTask::AllocateMemory(MachTask *this, mach_vm_size_t size, unsigned int a3)
{
  vm_map_t v3;
  mach_vm_address_t v7;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t **v11;
  mach_vm_address_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  mach_vm_address_t address;

  v3 = *((_DWORD *)this + 4);
  if (!v3)
    return -1;
  address = 0;
  if (mach_vm_allocate(v3, &address, size, 1))
    return -1;
  if (mach_vm_protect(v3, address, size, 0, a3 & 4 | (__rbit32(a3) >> 30)))
  {
    mach_vm_deallocate(v3, address, size);
    return -1;
  }
  v7 = address;
  v9 = (uint64_t *)*((_QWORD *)this + 40);
  if (v9)
  {
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v9;
        v12 = v9[4];
        if (address >= v12)
          break;
        v9 = *v11;
        v10 = v11;
        if (!*v11)
          goto LABEL_14;
      }
      if (v12 >= address)
        break;
      v9 = v11[1];
      if (!v9)
      {
        v10 = v11 + 1;
        goto LABEL_14;
      }
    }
  }
  else
  {
    v10 = (uint64_t **)((char *)this + 320);
    v11 = (uint64_t **)((char *)this + 320);
LABEL_14:
    v13 = (uint64_t *)operator new(0x30uLL);
    v13[4] = v7;
    v13[5] = size;
    *v13 = 0;
    v13[1] = 0;
    v13[2] = (uint64_t)v11;
    *v10 = v13;
    v14 = **((_QWORD **)this + 39);
    if (v14)
    {
      *((_QWORD *)this + 39) = v14;
      v15 = *v10;
    }
    else
    {
      v15 = v13;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 40), v15);
    ++*((_QWORD *)this + 41);
    return address;
  }
  return v7;
}

BOOL MachTask::DeallocateMemory(MachTask *this, mach_vm_address_t a2)
{
  vm_map_t v2;
  MachTask *v3;
  uint64_t *v5;
  MachTask *v6;
  MachTask *v7;
  BOOL v8;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  mach_vm_size_t v13;
  uint64_t *v14;

  v2 = *((_DWORD *)this + 4);
  if (!v2)
    return 0;
  v3 = (MachTask *)*((_QWORD *)this + 39);
  if (v3 == (MachTask *)((char *)this + 320))
    return 0;
  v5 = (uint64_t *)*((_QWORD *)this + 39);
  while (v5[4] != a2)
  {
    v6 = (MachTask *)v5[1];
    if (v6)
    {
      do
      {
        v7 = v6;
        v6 = *(MachTask **)v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        v7 = (MachTask *)v5[2];
        v8 = *(_QWORD *)v7 == (_QWORD)v5;
        v5 = (uint64_t *)v7;
      }
      while (!v8);
    }
    v5 = (uint64_t *)v7;
    if (v7 == (MachTask *)((char *)this + 320))
      return 0;
  }
  v10 = (uint64_t *)v5[1];
  if (v10)
  {
    do
    {
      v11 = v10;
      v10 = (uint64_t *)*v10;
    }
    while (v10);
  }
  else
  {
    v12 = v5;
    do
    {
      v11 = (uint64_t *)v12[2];
      v8 = *v11 == (_QWORD)v12;
      v12 = v11;
    }
    while (!v8);
  }
  v13 = v5[5];
  if (v3 == (MachTask *)v5)
    *((_QWORD *)this + 39) = v11;
  v14 = (uint64_t *)*((_QWORD *)this + 40);
  --*((_QWORD *)this + 41);
  std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v14, v5);
  operator delete(v5);
  if (!getenv("DEBUGSERVER_ZOMBIE_ALLOCATIONS"))
    return mach_vm_deallocate(v2, a2, v13) == 0;
  mach_vm_protect(v2, a2, v13, 0, 0);
  return 1;
}

void MachTask::ClearAllocations(MachTask *this)
{
  std::__tree<std::__value_type<unsigned int,DNBArchPluginInfoTag>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,DNBArchPluginInfoTag>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,DNBArchPluginInfoTag>>>::destroy((uint64_t)this + 312, *((_QWORD **)this + 40));
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 39) = (char *)this + 320;
}

void CFReleaser<BKSWatchdogAssertion *>::~CFReleaser(_QWORD *a1)
{
  const void *v2;

  *a1 = off_1000615B8;
  v2 = (const void *)a1[1];
  if (v2)
  {
    CFRelease(v2);
    a1[1] = 0;
  }
  operator delete();
}

void MachThread::MachThread(MachThread *this, MachProcess *a2, char a3, uint64_t a4, int a5)
{
  int v7;
  unint64_t *v8;
  uint64_t RegisterSetInfo;
  uint64_t v10;
  thread_inspect_t v11;
  uint64_t v12;
  mach_msg_type_number_t thread_info_outCnt;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a4;
  v7 = ++GetSequenceID(void)::g_nextID;
  *((_DWORD *)this + 4) = a5;
  *((_DWORD *)this + 5) = v7;
  *((_DWORD *)this + 6) = 1;
  PThreadMutex::PThreadMutex((MachThread *)((char *)this + 32), 2);
  *((_DWORD *)this + 34) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_DWORD *)this + 38) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 23) = DNBArchProtocol::Create();
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_BYTE *)this + 368) = a3;
  *((_QWORD *)this + 47) = 0;
  v12 = 0;
  RegisterSetInfo = DNBArchProtocol::GetRegisterSetInfo((DNBArchProtocol *)&v12, v8);
  v10 = v12;
  *((_QWORD *)this + 24) = RegisterSetInfo;
  *((_QWORD *)this + 25) = v10;
  *((_QWORD *)this + 47) = dlsym((void *)0xFFFFFFFFFFFFFFFELL, "_pthread_qos_class_decode");
  v11 = *((_DWORD *)this + 4);
  if (!v11 || (thread_info_outCnt = 10, thread_info(v11, 3u, (thread_info_t)this + 24, &thread_info_outCnt)))
  {
    *((_QWORD *)this + 16) = 0;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 7) = 0u;
  }
  if (DNBLogEnabledForAny(5))
    _DNBLogThreaded("MachThread::MachThread(process = %p, tid = 0x%8.8llx, seq_id = %u)", this, *((_QWORD *)this + 1), *((_DWORD *)this + 5));
}

void MachThread::~MachThread(MachThread *this)
{
  uint64_t v2;
  void *v3;

  if (DNBLogEnabledForAny(5))
    _DNBLogThreaded("MachThread::~MachThread() for tid = 0x%8.8llx (%u)", *((_QWORD *)this + 1), *((_DWORD *)this + 5));
  if (*((char *)this + 367) < 0)
    operator delete(*((void **)this + 43));
  v2 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 20);
  if (v3)
  {
    *((_QWORD *)this + 21) = v3;
    operator delete(v3);
  }
  if (pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 32)))
  {
    if (!pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 32)))
      pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 32));
  }
}

void MachThread::Suspend(MachThread *this)
{
  thread_read_t v2;
  _DWORD v3[2];
  void *__p;
  uint64_t v5;
  uint64_t v6;

  if (DNBLogEnabledForAny(5))
    _DNBLogThreaded("MachThread::%s()", "Suspend");
  v2 = *((_DWORD *)this + 4);
  if (v2)
  {
    v3[0] = thread_suspend(v2);
    v3[1] = 1;
    v5 = 0;
    v6 = 0;
    __p = 0;
    if (v3[0])
    {
      DNBLogCheckLogBit(4);
    }
    else
    {
      ++*((_DWORD *)this + 34);
      if (!DNBLogCheckLogBit(4))
        return;
    }
    DNBError::LogThreaded((DNBError *)v3, "::thread_suspend (%4.4x)", *((_DWORD *)this + 4));
    if (SHIBYTE(v6) < 0)
      operator delete(__p);
  }
}

BOOL MachThread::SetSuspendCountBeforeResume(MachThread *this, int a2)
{
  thread_inspect_t v4;
  char *v5;
  int v6;
  thread_inspect_t v7;
  void *__p[2];
  __int128 v10;
  mach_msg_type_number_t thread_info_outCnt;

  if (DNBLogEnabledForAny(5))
    _DNBLogThreaded("MachThread::%s()", "SetSuspendCountBeforeResume");
  *(_OWORD *)__p = 0u;
  v10 = 0u;
  v4 = *((_DWORD *)this + 4);
  if (v4)
  {
    if (a2)
    {
      v5 = (char *)this + 96;
      thread_info_outCnt = 10;
      if (thread_info(v4, 3u, (thread_info_t)this + 24, &thread_info_outCnt))
      {
LABEL_6:
        *((_QWORD *)v5 + 4) = 0;
        *(_OWORD *)v5 = 0u;
        *((_OWORD *)v5 + 1) = 0u;
        goto LABEL_22;
      }
      v6 = *((_DWORD *)this + 32);
      *((_DWORD *)this + 34) -= v6;
      if (v6 >= 1)
      {
LABEL_10:
        v5 = (char *)this + 96;
        do
        {
          __p[0] = (void *)(thread_resume(*((_DWORD *)this + 4)) | 0x100000000);
          if (SHIBYTE(v10) < 0)
          {
            *(_BYTE *)__p[1] = 0;
            *(_QWORD *)&v10 = 0;
          }
          else
          {
            LOBYTE(__p[1]) = 0;
            HIBYTE(v10) = 0;
          }
          if ((DNBLogCheckLogBit(4) || LODWORD(__p[0]))
            && (DNBError::LogThreaded((DNBError *)__p, "::thread_resume (%4.4x)", *((_DWORD *)this + 4)), LODWORD(__p[0])))
          {
            v7 = *((_DWORD *)this + 4);
            if (!v7)
              goto LABEL_6;
            thread_info_outCnt = 10;
            if (thread_info(v7, 3u, (thread_info_t)this + 24, &thread_info_outCnt))
              goto LABEL_6;
            v6 = *((_DWORD *)this + 32);
          }
          else
          {
            --v6;
          }
        }
        while (v6 > 0);
      }
    }
    else
    {
      v6 = *((_DWORD *)this + 34);
      *((_DWORD *)this + 34) = 0;
      if (v6 >= 1)
        goto LABEL_10;
    }
  }
LABEL_22:
  if (SHIBYTE(v10) < 0)
    operator delete(__p[1]);
  return v4 != 0;
}

uint64_t MachThread::RestoreSuspendCountAfterStop(MachThread *this)
{
  int v2;
  int v3;
  BOOL v4;
  uint64_t v5;
  unsigned int v6;
  thread_inspect_t v7;
  int v8;
  void *__p[2];
  __int128 v11;
  mach_msg_type_number_t thread_info_outCnt;

  if (DNBLogEnabledForAny(5))
    _DNBLogThreaded("MachThread::%s()", "RestoreSuspendCountAfterStop");
  *(_OWORD *)__p = 0u;
  v11 = 0u;
  if (!*((_DWORD *)this + 4))
    goto LABEL_29;
  v2 = *((_DWORD *)this + 34);
  if (v2 >= 1)
  {
    while (1)
    {
      __p[0] = (void *)(thread_resume(*((_DWORD *)this + 4)) | 0x100000000);
      if (SHIBYTE(v11) < 0)
      {
        *(_BYTE *)__p[1] = 0;
        *(_QWORD *)&v11 = 0;
      }
      else
      {
        LOBYTE(__p[1]) = 0;
        HIBYTE(v11) = 0;
      }
      if (DNBLogCheckLogBit(4) || LODWORD(__p[0]))
      {
        DNBError::LogThreaded((DNBError *)__p, "::thread_resume (%4.4x)", *((_DWORD *)this + 4));
        if (LODWORD(__p[0]))
          break;
      }
      v3 = *((_DWORD *)this + 34);
      v4 = __OFSUB__(v3--, 1);
      *((_DWORD *)this + 34) = v3;
      if ((v3 < 0) ^ v4 | (v3 == 0))
      {
        v5 = 1;
        if ((SHIBYTE(v11) & 0x80000000) == 0)
          return v5;
        goto LABEL_31;
      }
    }
    v7 = *((_DWORD *)this + 4);
    if (v7 && (thread_info_outCnt = 10, !thread_info(v7, 3u, (thread_info_t)this + 24, &thread_info_outCnt)))
    {
      v8 = *((_DWORD *)this + 32);
    }
    else
    {
      v8 = 0;
      *((_QWORD *)this + 16) = 0;
      *((_OWORD *)this + 6) = 0u;
      *((_OWORD *)this + 7) = 0u;
    }
    v5 = 0;
    *((_DWORD *)this + 34) = v8;
    if ((SHIBYTE(v11) & 0x80000000) == 0)
      return v5;
    goto LABEL_31;
  }
  v5 = 1;
  if ((v2 & 0x80000000) == 0)
    goto LABEL_30;
  while (1)
  {
    v6 = thread_suspend(*((_DWORD *)this + 4));
    __p[0] = (void *)(v6 | 0x100000000);
    if (SHIBYTE(v11) < 0)
      break;
    LOBYTE(__p[1]) = 0;
    HIBYTE(v11) = 0;
    if (v6)
      goto LABEL_27;
LABEL_21:
    ++*((_DWORD *)this + 34);
    if (DNBLogCheckLogBit(4))
      goto LABEL_28;
    if ((*((_DWORD *)this + 34) & 0x80000000) == 0)
      goto LABEL_30;
  }
  *(_BYTE *)__p[1] = 0;
  *(_QWORD *)&v11 = 0;
  if (!LODWORD(__p[0]))
    goto LABEL_21;
LABEL_27:
  DNBLogCheckLogBit(4);
LABEL_28:
  DNBError::LogThreaded((DNBError *)__p, "::thread_suspend (%4.4x)", *((_DWORD *)this + 4));
LABEL_29:
  v5 = 0;
LABEL_30:
  if (SHIBYTE(v11) < 0)
LABEL_31:
    operator delete(__p[1]);
  return v5;
}

char *MachThread::GetBasicInfoAsString(MachThread *this)
{
  thread_inspect_t v2;
  char *v3;
  uint64_t v5;
  double v6;
  integer_t thread_info_out[10];
  mach_msg_type_number_t thread_info_outCnt;

  v2 = *((_DWORD *)this + 4);
  if (!v2)
    return 0;
  thread_info_outCnt = 10;
  if (thread_info(v2, 3u, thread_info_out, &thread_info_outCnt))
    return 0;
  v5 = *((_QWORD *)this + 1);
  v3 = MachThread::GetBasicInfoAsString(void)const::g_basic_info_string;
  v6 = (float)((float)((float)thread_info_out[1] / 1000000.0) + (float)thread_info_out[0]);
  snprintf(MachThread::GetBasicInfoAsString(void)const::g_basic_info_string, 0x400uLL, "Thread 0x%8.8llx: user=%f system=%f cpu=%d sleep_time=%d", v5, v6, v6, thread_info_out[4], thread_info_out[9]);
  return v3;
}

BOOL MachThread::IsUserReady(MachThread *this)
{
  int v2;
  unsigned int v3;
  thread_inspect_t v5;
  mach_msg_type_number_t thread_info_outCnt;

  v2 = *((_DWORD *)this + 30);
  if (!v2)
  {
    v5 = *((_DWORD *)this + 4);
    if (!v5 || (thread_info_outCnt = 10, thread_info(v5, 3u, (thread_info_t)this + 24, &thread_info_outCnt)))
    {
      *((_QWORD *)this + 16) = 0;
      *((_OWORD *)this + 6) = 0u;
      *((_OWORD *)this + 7) = 0u;
      return (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 23) + 88))(*((_QWORD *)this + 23), 0) != 0;
    }
    v2 = *((_DWORD *)this + 30);
  }
  v3 = v2 - 1;
  if (v3 < 5 && ((0x17u >> v3) & 1) != 0)
    return 1;
  return (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 23) + 88))(*((_QWORD *)this + 23), 0) != 0;
}

void MachThread::Dump(MachThread *this, int a2)
{
  unsigned int v4;
  const char *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *((_DWORD *)this + 30) - 1;
  if (v4 > 4)
  {
    v5 = "???";
    if (!DNBLogEnabled())
      return;
    goto LABEL_5;
  }
  v5 = off_1000615D8[v4];
  if (DNBLogEnabled())
  {
LABEL_5:
    v6 = *((_QWORD *)this + 1);
    v7 = *((_DWORD *)this + 5);
    v8 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 23) + 88))(*((_QWORD *)this + 23), -1);
    v9 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 23) + 104))(*((_QWORD *)this + 23), -1);
    _DNBLogThreaded("[%3u] #%3u tid: 0x%8.8llx, pc: 0x%16.16llx, sp: 0x%16.16llx, user: %d.%6.6d, system: %d.%6.6d, cpu: %2d, policy: %2d, run_state: %2d (%s), flags: %2d, suspend_count: %2d (current %2d), sleep_time: %d", a2, v7, v6, v8, v9, *((_DWORD *)this + 24), *((_DWORD *)this + 25), *((_DWORD *)this + 26), *((_DWORD *)this + 27), *((_DWORD *)this + 28), *((_DWORD *)this + 29), *((_DWORD *)this + 30), v5, *((_DWORD *)this + 31), *((_DWORD *)this + 32), *((_DWORD *)this + 34), *((_DWORD *)this + 33));
  }
}

uint64_t MachThread::ThreadWillResume(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v6;
  const char *v7;
  int v8;
  uint64_t result;

  if (*(_QWORD *)(a2 + 16) != -1)
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 184) + 96))(*(_QWORD *)(a1 + 184));
  v6 = *(_DWORD *)(a2 + 8);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 32));
  *(_DWORD *)(a1 + 24) = v6;
  if (DNBLogEnabledForAny(4))
  {
    v7 = DNBStateAsString(v6);
    _DNBLogThreaded("MachThread::SetState(%s) for tid = 0x%8.8llx", v7, *(_QWORD *)(a1 + 8));
  }
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 32));
  v8 = *(_DWORD *)(a2 + 8);
  if ((v8 - 5) < 2)
  {
    if (DNBLogEnabledForAny(5))
      _DNBLogThreaded("MachThread::%s()", "Resume");
    if (*(_DWORD *)(a1 + 16))
      MachThread::SetSuspendCountBeforeResume((MachThread *)a1, a3);
  }
  else if (v8 == 10 || v8 == 4)
  {
    if (a3)
      MachThread::ThreadWillResume();
    MachThread::Suspend((MachThread *)a1);
  }
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 184) + 112))(*(_QWORD *)(a1 + 184));
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a1 + 160);
  return result;
}

BOOL MachThread::ShouldStop(MachThread *this, BOOL *a2)
{
  DNBBreakpointList *v4;
  unint64_t v5;
  _BOOL8 result;
  int v7;

  v4 = (DNBBreakpointList *)(*(_QWORD *)this + 1640);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 23) + 88))(*((_QWORD *)this + 23), -1);
  if (DNBBreakpointList::FindByAddress(v4, v5))
    return 1;
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 23) + 192))(*((_QWORD *)this + 23)))
  {
    result = 0;
    *a2 = 1;
  }
  else
  {
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 32));
    v7 = *((_DWORD *)this + 6);
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 32));
    return v7 != 5 && *((_DWORD *)this + 36) && *((_DWORD *)this + 37) && *((_DWORD *)this + 38) != 0;
  }
  return result;
}

uint64_t MachThread::GetState(MachThread *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;

  v2 = (pthread_mutex_t *)((char *)this + 32);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 32));
  v3 = *((unsigned int *)this + 6);
  pthread_mutex_unlock(v2);
  return v3;
}

BOOL MachThread::IsStepping(MachThread *this)
{
  MachThread *v1;
  pthread_mutex_t *v2;

  v1 = this;
  v2 = (pthread_mutex_t *)((char *)this + 32);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 32));
  LODWORD(v1) = *((_DWORD *)v1 + 6);
  pthread_mutex_unlock(v2);
  return (_DWORD)v1 == 6;
}

uint64_t MachThread::ThreadDidStop(MachThread *this)
{
  thread_inspect_t v2;
  pthread_mutex_t *v3;
  unsigned int v4;
  const char *v5;
  mach_msg_type_number_t thread_info_outCnt;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 23) + 120))(*((_QWORD *)this + 23));
  MachThread::RestoreSuspendCountAfterStop(this);
  v2 = *((_DWORD *)this + 4);
  if (v2 && (thread_info_outCnt = 10, !thread_info(v2, 3u, (thread_info_t)this + 24, &thread_info_outCnt)))
  {
    if (*((int *)this + 32) >= 1)
    {
      v3 = (pthread_mutex_t *)((char *)this + 32);
      pthread_mutex_lock((pthread_mutex_t *)((char *)this + 32));
      v4 = 10;
      *((_DWORD *)this + 6) = 10;
      if (!DNBLogEnabledForAny(4))
        goto LABEL_6;
      goto LABEL_5;
    }
  }
  else
  {
    *((_QWORD *)this + 16) = 0;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 7) = 0u;
  }
  v3 = (pthread_mutex_t *)((char *)this + 32);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 32));
  v4 = 4;
  *((_DWORD *)this + 6) = 4;
  if (DNBLogEnabledForAny(4))
  {
LABEL_5:
    v5 = DNBStateAsString(v4);
    _DNBLogThreaded("MachThread::SetState(%s) for tid = 0x%8.8llx", v5, *((_QWORD *)this + 1));
  }
LABEL_6:
  pthread_mutex_unlock(v3);
  return 1;
}

uint64_t MachThread::NotifyException(MachThread *this, MachException::Data *a2)
{
  uint64_t v4;
  MachException::Data *v5;
  int v6;
  uint64_t v7;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 23) + 128))(*((_QWORD *)this + 23));
  v5 = (MachThread *)((char *)this + 144);
  if (!*((_DWORD *)this + 36)
    || !*((_DWORD *)this + 37)
    || (v6 = *((_DWORD *)this + 38)) == 0
    || v6 == 6
    || v6 == 5 && **((_QWORD **)this + 20) == 1)
  {
    v7 = *(_QWORD *)a2;
    *((_DWORD *)this + 38) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v5 = v7;
    if (v5 != a2)
      std::vector<long long>::__assign_with_size[abi:nn180100]<long long *,long long *>((_QWORD *)this + 20, *((char **)a2 + 2), *((char **)a2 + 3), (uint64_t)(*((_QWORD *)a2 + 3) - *((_QWORD *)a2 + 2)) >> 3);
  }
  return v4;
}

unint64_t MachThread::GetRegisterInfo(MachThread *this, unint64_t a2, unint64_t a3)
{
  uint64_t v3;

  if (*((_QWORD *)this + 25) <= a2)
    return 0;
  v3 = *((_QWORD *)this + 24);
  if (*(_QWORD *)(v3 + 24 * a2 + 16) <= a3)
    return 0;
  else
    return *(_QWORD *)(v3 + 24 * a2 + 8) + 72 * a3;
}

uint64_t MachThread::GetRegisterValue(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 184) + 16))(*(_QWORD *)(a1 + 184));
}

uint64_t MachThread::SetRegisterValue(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 184) + 24))(*(_QWORD *)(a1 + 184));
}

uint64_t MachThread::GetRegisterContext(MachThread *this, void *a2)
{
  return (*(uint64_t (**)(_QWORD, void *))(**((_QWORD **)this + 23) + 32))(*((_QWORD *)this + 23), a2);
}

uint64_t MachThread::SetRegisterContext(MachThread *this, const void *a2)
{
  return (*(uint64_t (**)(_QWORD, const void *))(**((_QWORD **)this + 23) + 40))(*((_QWORD *)this + 23), a2);
}

uint64_t MachThread::SaveRegisterState(MachThread *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 23) + 48))(*((_QWORD *)this + 23));
}

uint64_t MachThread::RestoreRegisterState(MachThread *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 23) + 56))(*((_QWORD *)this + 23));
}

uint64_t MachThread::EnableHardwareBreakpoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2 || (*(_BYTE *)(a2 + 24) & 4) != 0)
    return 0xFFFFFFFFLL;
  else
    return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 184) + 152))(*(_QWORD *)(a1 + 184), *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 4), a3);
}

uint64_t MachThread::EnableHardwareWatchpoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;

  if (a2 && (v3 = *(unsigned __int8 *)(a2 + 24), (v3 & 4) != 0))
    return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 184) + 160))(*(_QWORD *)(a1 + 184), *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 4), (v3 >> 3) & 1, (v3 >> 4) & 1, a3);
  else
    return 0xFFFFFFFFLL;
}

uint64_t MachThread::RollbackTransForHWP(MachThread *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 23) + 208))(*((_QWORD *)this + 23));
}

uint64_t MachThread::FinishTransForHWP(MachThread *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 23) + 216))(*((_QWORD *)this + 23));
}

uint64_t MachThread::DisableHardwareBreakpoint(uint64_t a1, uint64_t a2)
{
  if (!a2 || *(_DWORD *)(a2 + 28) == -1)
    return 0;
  else
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 184) + 168))(*(_QWORD *)(a1 + 184));
}

uint64_t MachThread::DisableHardwareWatchpoint(uint64_t a1, uint64_t a2)
{
  if (!a2 || *(_DWORD *)(a2 + 28) == -1)
    return 0;
  else
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 184) + 176))(*(_QWORD *)(a1 + 184));
}

uint64_t MachThread::NumSupportedHardwareWatchpoints(MachThread *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 23) + 144))(*((_QWORD *)this + 23));
}

uint64_t MachThread::GetName(MachThread *this)
{
  mach_msg_type_number_t thread_info_outCnt;

  thread_info_outCnt = 6;
  if (!thread_info(*((_DWORD *)this + 4), 4u, (thread_info_t)this + 52, &thread_info_outCnt)
    && proc_pidinfo(**(_DWORD **)this, 5, *((_QWORD *)this + 27), (char *)this + 232, 112)
    && *((_BYTE *)this + 280))
  {
    return (uint64_t)this + 280;
  }
  else
  {
    return 0;
  }
}

uint64_t MachThread::GetGloballyUniqueThreadIDForMachPortID(MachThread *this)
{
  unsigned int v1;
  mach_msg_type_number_t thread_info_outCnt;
  integer_t thread_info_out[6];

  v1 = this;
  thread_info_outCnt = 6;
  if (thread_info((thread_inspect_t)this, 4u, thread_info_out, &thread_info_outCnt))
    return v1;
  else
    return *(_QWORD *)thread_info_out;
}

uint64_t MachThread::GetPThreadT(MachThread *this)
{
  thread_inspect_t v2;
  unint64_t Memory;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  char v8[12];
  mach_msg_type_number_t thread_info_outCnt;
  integer_t thread_info_out;
  unint64_t v11;

  v2 = *((_DWORD *)this + 4);
  if (!v2)
    return -1;
  thread_info_outCnt = 6;
  if (thread_info(v2, 4u, &thread_info_out, &thread_info_outCnt))
    return -1;
  if (*((_BYTE *)this + 368))
  {
    *(_QWORD *)v8 = 0;
    Memory = MachProcess::ReadMemory(*(MachProcess **)this, v11, 8uLL, v8);
    v5 = *(_QWORD *)v8;
    if (*(_QWORD *)v8)
      v6 = Memory == 8;
    else
      v6 = 0;
  }
  else
  {
    *(_DWORD *)v8 = 0;
    v7 = MachProcess::ReadMemory(*(MachProcess **)this, v11, 4uLL, v8);
    v5 = *(unsigned int *)v8;
    if (*(_DWORD *)v8)
      v6 = v7 == 4;
    else
      v6 = 0;
  }
  if (v6)
    return v5;
  else
    return -1;
}

uint64_t MachThread::GetTSDAddressForThread(MachThread *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t PThreadT;
  mach_vm_address_t v10;
  unint64_t Memory;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  char v16[12];
  unsigned int v17;

  PThreadT = MachThread::GetPThreadT(this);
  if ((unint64_t)(a3 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
    return PThreadT + a3;
  if (a4 != 4)
    return -1;
  v17 = 0;
  v10 = PThreadT + a2;
  Memory = MachProcess::ReadMemory(*(MachProcess **)this, v10, 4uLL, (char *)&v17);
  if (v17)
    v12 = Memory == 4;
  else
    v12 = 0;
  if (v12)
    v13 = v17;
  else
    v13 = -1;
  *(_QWORD *)v16 = 0;
  v14 = MachProcess::ReadMemory(*(MachProcess **)this, v10, 8uLL, v16);
  if (*(_QWORD *)v16)
    v15 = v14 == 8;
  else
    v15 = 0;
  if (v15)
    return *(_QWORD *)v16;
  else
    return v13;
}

uint64_t MachThread::GetDispatchQueueT(MachThread *this)
{
  thread_inspect_t v2;
  unint64_t Memory;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  char v8[12];
  mach_msg_type_number_t thread_info_outCnt;
  integer_t thread_info_out[4];
  unint64_t v11;

  v2 = *((_DWORD *)this + 4);
  if (!v2)
    return -1;
  thread_info_outCnt = 6;
  if (thread_info(v2, 4u, thread_info_out, &thread_info_outCnt) || v11 + 1 < 2)
    return -1;
  if (*((_BYTE *)this + 368))
  {
    *(_QWORD *)v8 = 0;
    Memory = MachProcess::ReadMemory(*(MachProcess **)this, v11, 8uLL, v8);
    v5 = *(_QWORD *)v8;
    if (*(_QWORD *)v8)
      v6 = Memory == 8;
    else
      v6 = 0;
  }
  else
  {
    *(_DWORD *)v8 = 0;
    v7 = MachProcess::ReadMemory(*(MachProcess **)this, v11, 4uLL, v8);
    v5 = *(unsigned int *)v8;
    if (*(_DWORD *)v8)
      v6 = v7 == 4;
    else
      v6 = 0;
  }
  if (v6)
    return v5;
  else
    return -1;
}

std::string *MachThread::GetRequestedQoS@<X0>(std::string *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::string *v5;
  unint64_t Memory;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  const std::string::value_type *v11;
  const std::string::value_type *v12;
  unsigned int v13;
  uint64_t v14;

  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_DWORD *)(a4 + 48) = -1;
  if (LODWORD(this->__r_.__value_.__r.__words[2]))
  {
    v5 = this;
    if (this[15].__r_.__value_.__r.__words[2])
    {
      if (this[15].__r_.__value_.__s.__data_[8])
      {
        v14 = 0;
        Memory = MachProcess::ReadMemory((MachProcess *)this->__r_.__value_.__l.__data_, a2 + 8 * a3, 8uLL, (char *)&v14);
        v7 = v14;
        v8 = Memory == 8;
      }
      else
      {
        v13 = 0;
        v9 = MachProcess::ReadMemory((MachProcess *)this->__r_.__value_.__l.__data_, a2 + 4 * a3, 4uLL, (char *)&v13);
        v7 = v13;
        v8 = v9 == 4;
      }
      if (v8)
        v10 = v7;
      else
        v10 = 0;
      this = (std::string *)((uint64_t (*)(uint64_t, _QWORD, _QWORD))v5[15].__r_.__value_.__r.__words[2])(v10, 0, 0);
      v11 = "User Interactive";
      v12 = "QOS_CLASS_USER_INTERACTIVE";
      switch((int)this)
      {
        case 0:
          v11 = "Unspecified";
          v12 = "QOS_CLASS_UNSPECIFIED";
          goto LABEL_15;
        case 9:
          v11 = "Background";
          v12 = "QOS_CLASS_BACKGROUND";
          goto LABEL_15;
        case 17:
          v11 = "Utility";
          v12 = "QOS_CLASS_UTILITY";
          goto LABEL_15;
        case 21:
          v11 = "Default";
          v12 = "QOS_CLASS_DEFAULT";
          goto LABEL_15;
        case 25:
          v11 = "User Initiated";
          v12 = "QOS_CLASS_USER_INITIATED";
          goto LABEL_15;
        case 33:
LABEL_15:
          *(_DWORD *)(a4 + 48) = (_DWORD)this;
          std::string::assign((std::string *)a4, v12);
          this = std::string::assign((std::string *)(a4 + 24), v11);
          break;
        default:
          return this;
      }
    }
  }
  return this;
}

_QWORD *std::vector<long long>::__assign_with_size[abi:nn180100]<long long *,long long *>(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 61)
      goto LABEL_22;
    v10 = v8 >> 2;
    if (v8 >> 2 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 61)
LABEL_22:
      abort();
    v13 = v12;
    result = operator new(8 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 3;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[8 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

void MachThreadList::MachThreadList(MachThreadList *this)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  PThreadMutex::PThreadMutex((MachThreadList *)((char *)this + 24), 2);
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_BYTE *)this + 104) = 0;
}

void MachThreadList::~MachThreadList(MachThreadList *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  if (pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 24))
    && !pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 24)))
  {
    pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 24));
    v5 = *(char **)this;
    if (!*(_QWORD *)this)
      return;
  }
  else
  {
    v5 = *(char **)this;
    if (!*(_QWORD *)this)
      return;
  }
  v6 = (char *)*((_QWORD *)this + 1);
  v7 = v5;
  if (v6 != v5)
  {
    do
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)v6 - 1);
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v6 -= 16;
    }
    while (v6 != v5);
    v7 = *(char **)this;
  }
  *((_QWORD *)this + 1) = v5;
  operator delete(v7);
}

uint64_t MachThreadList::GetState(MachThreadList *this, uint64_t a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  unint64_t v6;
  std::__shared_weak_count **v7;
  MachThread *v8;
  uint64_t State;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v4 = (pthread_mutex_t *)((char *)this + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  v5 = *((_QWORD *)this + 1) - *(_QWORD *)this;
  if (v5)
  {
    v6 = v5 >> 4;
    if (v6 <= 1)
      v6 = 1;
    v7 = (std::__shared_weak_count **)(*(_QWORD *)this + 8);
    while (1)
    {
      v8 = (MachThread *)*(v7 - 1);
      if (*((_QWORD *)v8 + 1) == a2)
        break;
      v7 += 2;
      if (!--v6)
        goto LABEL_7;
    }
    v11 = *v7;
    if (*v7)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    pthread_mutex_unlock(v4);
    State = MachThread::GetState(v8);
    if (v11)
    {
      v14 = (unint64_t *)&v11->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
LABEL_7:
    pthread_mutex_unlock(v4);
    return 0;
  }
  return State;
}

uint64_t MachThreadList::GetThreadByID@<X0>(MachThreadList *this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  pthread_mutex_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v6 = (pthread_mutex_t *)((char *)this + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  *a3 = 0;
  a3[1] = 0;
  v7 = *((_QWORD *)this + 1) - *(_QWORD *)this;
  if (v7)
  {
    v8 = v7 >> 4;
    if (v8 <= 1)
      v8 = 1;
    for (i = (uint64_t *)(*(_QWORD *)this + 8); ; i += 2)
    {
      v10 = *(i - 1);
      if (*(_QWORD *)(v10 + 8) == a2)
        break;
      if (!--v8)
        return pthread_mutex_unlock(v6);
    }
    v11 = *i;
    if (v11)
    {
      v12 = (unint64_t *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    *a3 = v10;
    a3[1] = v11;
  }
  return pthread_mutex_unlock(v6);
}

uint64_t MachThreadList::GetName(MachThreadList *this, uint64_t a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  unint64_t v6;
  std::__shared_weak_count **v7;
  MachThread *v8;
  uint64_t Name;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v4 = (pthread_mutex_t *)((char *)this + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  v5 = *((_QWORD *)this + 1) - *(_QWORD *)this;
  if (v5)
  {
    v6 = v5 >> 4;
    if (v6 <= 1)
      v6 = 1;
    v7 = (std::__shared_weak_count **)(*(_QWORD *)this + 8);
    while (1)
    {
      v8 = (MachThread *)*(v7 - 1);
      if (*((_QWORD *)v8 + 1) == a2)
        break;
      v7 += 2;
      if (!--v6)
        goto LABEL_7;
    }
    v11 = *v7;
    if (*v7)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    pthread_mutex_unlock(v4);
    Name = MachThread::GetName(v8);
    if (v11)
    {
      v14 = (unint64_t *)&v11->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
LABEL_7:
    pthread_mutex_unlock(v4);
    return 0;
  }
  return Name;
}

void MachThreadList::GetRequestedQoS(MachThreadList *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  pthread_mutex_t *v10;
  uint64_t v11;
  unint64_t v12;
  std::__shared_weak_count **v13;
  std::string *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;

  v10 = (pthread_mutex_t *)((char *)this + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  v11 = *((_QWORD *)this + 1) - *(_QWORD *)this;
  if (v11)
  {
    v12 = v11 >> 4;
    if (v12 <= 1)
      v12 = 1;
    v13 = (std::__shared_weak_count **)(*(_QWORD *)this + 8);
    while (1)
    {
      v14 = (std::string *)*(v13 - 1);
      if (v14->__r_.__value_.__l.__size_ == a2)
        break;
      v13 += 2;
      if (!--v12)
        goto LABEL_7;
    }
    v15 = *v13;
    if (*v13)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
      pthread_mutex_unlock(v10);
      MachThread::GetRequestedQoS(v14, a3, a4, a5);
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    else
    {
      pthread_mutex_unlock(v10);
      MachThread::GetRequestedQoS(v14, a3, a4, a5);
    }
  }
  else
  {
LABEL_7:
    pthread_mutex_unlock(v10);
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_DWORD *)(a5 + 48) = -1;
  }
}

uint64_t MachThreadList::GetPThreadT(MachThreadList *this, uint64_t a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  unint64_t v6;
  std::__shared_weak_count **v7;
  MachThread *v8;
  uint64_t PThreadT;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v4 = (pthread_mutex_t *)((char *)this + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  v5 = *((_QWORD *)this + 1) - *(_QWORD *)this;
  if (v5)
  {
    v6 = v5 >> 4;
    if (v6 <= 1)
      v6 = 1;
    v7 = (std::__shared_weak_count **)(*(_QWORD *)this + 8);
    while (1)
    {
      v8 = (MachThread *)*(v7 - 1);
      if (*((_QWORD *)v8 + 1) == a2)
        break;
      v7 += 2;
      if (!--v6)
        goto LABEL_7;
    }
    v11 = *v7;
    if (*v7)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    pthread_mutex_unlock(v4);
    PThreadT = MachThread::GetPThreadT(v8);
    if (v11)
    {
      v14 = (unint64_t *)&v11->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
LABEL_7:
    pthread_mutex_unlock(v4);
    return -1;
  }
  return PThreadT;
}

uint64_t MachThreadList::GetDispatchQueueT(MachThreadList *this, uint64_t a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  unint64_t v6;
  std::__shared_weak_count **v7;
  MachThread *v8;
  uint64_t DispatchQueueT;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v4 = (pthread_mutex_t *)((char *)this + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  v5 = *((_QWORD *)this + 1) - *(_QWORD *)this;
  if (v5)
  {
    v6 = v5 >> 4;
    if (v6 <= 1)
      v6 = 1;
    v7 = (std::__shared_weak_count **)(*(_QWORD *)this + 8);
    while (1)
    {
      v8 = (MachThread *)*(v7 - 1);
      if (*((_QWORD *)v8 + 1) == a2)
        break;
      v7 += 2;
      if (!--v6)
        goto LABEL_7;
    }
    v11 = *v7;
    if (*v7)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    pthread_mutex_unlock(v4);
    DispatchQueueT = MachThread::GetDispatchQueueT(v8);
    if (v11)
    {
      v14 = (unint64_t *)&v11->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
LABEL_7:
    pthread_mutex_unlock(v4);
    return -1;
  }
  return DispatchQueueT;
}

uint64_t MachThreadList::GetTSDAddressForThread(MachThreadList *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  pthread_mutex_t *v10;
  uint64_t v11;
  unint64_t v12;
  std::__shared_weak_count **v13;
  MachThread *v14;
  uint64_t TSDAddressForThread;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;

  v10 = (pthread_mutex_t *)((char *)this + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  v11 = *((_QWORD *)this + 1) - *(_QWORD *)this;
  if (v11)
  {
    v12 = v11 >> 4;
    if (v12 <= 1)
      v12 = 1;
    v13 = (std::__shared_weak_count **)(*(_QWORD *)this + 8);
    while (1)
    {
      v14 = (MachThread *)*(v13 - 1);
      if (*((_QWORD *)v14 + 1) == a2)
        break;
      v13 += 2;
      if (!--v12)
        goto LABEL_7;
    }
    v17 = *v13;
    if (*v13)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    pthread_mutex_unlock(v10);
    TSDAddressForThread = MachThread::GetTSDAddressForThread(v14, a3, a4, a5);
    if (v17)
    {
      v20 = (unint64_t *)&v17->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  else
  {
LABEL_7:
    pthread_mutex_unlock(v10);
    return -1;
  }
  return TSDAddressForThread;
}

uint64_t MachThreadList::SetCurrentThread(MachThreadList *this, uint64_t a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  unint64_t v6;
  std::__shared_weak_count **v7;
  uint64_t v8;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  v4 = (pthread_mutex_t *)((char *)this + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  v5 = *((_QWORD *)this + 1) - *(_QWORD *)this;
  if (v5)
  {
    v6 = v5 >> 4;
    if (v6 <= 1)
      v6 = 1;
    v7 = (std::__shared_weak_count **)(*(_QWORD *)this + 8);
    while (1)
    {
      v8 = (uint64_t)*(v7 - 1);
      if (*(_QWORD *)(v8 + 8) == a2)
        break;
      v7 += 2;
      if (!--v6)
        goto LABEL_7;
    }
    v10 = *v7;
    if (*v7)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
      pthread_mutex_unlock(v4);
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    else
    {
      pthread_mutex_unlock(v4);
    }
    v14 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
    *((_QWORD *)this + 11) = v8;
    *((_QWORD *)this + 12) = v10;
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (v10)
    {
      v17 = (unint64_t *)&v10->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  else
  {
LABEL_7:
    pthread_mutex_unlock(v4);
    return 0;
  }
  return a2;
}

uint64_t MachThreadList::GetThreadStoppedReason(uint64_t a1, uint64_t a2, uint64_t a3)
{
  pthread_mutex_t *v6;
  uint64_t v7;
  unint64_t v8;
  std::__shared_weak_count **v9;
  uint64_t v10;
  uint64_t StopInfo;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  v6 = (pthread_mutex_t *)(a1 + 24);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 24));
  v7 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (v7)
  {
    v8 = v7 >> 4;
    if (v8 <= 1)
      v8 = 1;
    v9 = (std::__shared_weak_count **)(*(_QWORD *)a1 + 8);
    while (1)
    {
      v10 = (uint64_t)*(v9 - 1);
      if (*(_QWORD *)(v10 + 8) == a2)
        break;
      v9 += 2;
      if (!--v8)
        goto LABEL_7;
    }
    v13 = *v9;
    if (*v9)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    pthread_mutex_unlock(v6);
    StopInfo = MachException::Data::GetStopInfo(v10 + 144, a3);
    if (v13)
    {
      v16 = (unint64_t *)&v13->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  else
  {
LABEL_7:
    pthread_mutex_unlock(v6);
    return 0;
  }
  return StopInfo;
}

BOOL MachThreadList::GetIdentifierInfo(MachThreadList *this, uint64_t a2, thread_identifier_info *a3)
{
  pthread_mutex_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  thread_inspect_t v10;
  mach_msg_type_number_t thread_info_outCnt;

  v6 = (pthread_mutex_t *)((char *)this + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  v7 = *(_QWORD *)this;
  v8 = *((_QWORD *)this + 1) - *(_QWORD *)this;
  if (v8)
  {
    v9 = v8 >> 4;
    if (v9 <= 1)
      v9 = 1;
    while (*(_QWORD *)(*(_QWORD *)v7 + 8) != a2)
    {
      v7 += 16;
      if (!--v9)
        goto LABEL_6;
    }
    v10 = *(_DWORD *)(*(_QWORD *)v7 + 16);
  }
  else
  {
LABEL_6:
    v10 = 0;
  }
  pthread_mutex_unlock(v6);
  thread_info_outCnt = 6;
  return thread_info(v10, 4u, (thread_info_t)a3, &thread_info_outCnt) == 0;
}

char *MachThreadList::GetThreadInfo(MachThreadList *this, uint64_t a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  unint64_t v6;
  std::__shared_weak_count **v7;
  MachThread *v8;
  char *BasicInfoAsString;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v4 = (pthread_mutex_t *)((char *)this + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  v5 = *((_QWORD *)this + 1) - *(_QWORD *)this;
  if (v5)
  {
    v6 = v5 >> 4;
    if (v6 <= 1)
      v6 = 1;
    v7 = (std::__shared_weak_count **)(*(_QWORD *)this + 8);
    while (1)
    {
      v8 = (MachThread *)*(v7 - 1);
      if (*((_QWORD *)v8 + 1) == a2)
        break;
      v7 += 2;
      if (!--v6)
        goto LABEL_7;
    }
    v11 = *v7;
    if (*v7)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    pthread_mutex_unlock(v4);
    BasicInfoAsString = MachThread::GetBasicInfoAsString(v8);
    if (v11)
    {
      v14 = (unint64_t *)&v11->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
LABEL_7:
    pthread_mutex_unlock(v4);
    return 0;
  }
  return BasicInfoAsString;
}

uint64_t MachThreadList::GetThreadIDByMachPortNumber(MachThreadList *this, int a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v4 = (pthread_mutex_t *)((char *)this + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  v5 = *(_QWORD *)this;
  v6 = *((_QWORD *)this + 1) - *(_QWORD *)this;
  if (v6)
  {
    v7 = v6 >> 4;
    if (v7 <= 1)
      v7 = 1;
    while (*(_DWORD *)(*(_QWORD *)v5 + 16) != a2)
    {
      v5 += 16;
      if (!--v7)
        goto LABEL_6;
    }
    v8 = *(_QWORD *)(*(_QWORD *)v5 + 8);
  }
  else
  {
LABEL_6:
    v8 = 0;
  }
  pthread_mutex_unlock(v4);
  return v8;
}

uint64_t MachThreadList::GetRegisterValue(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  unint64_t v6;
  std::__shared_weak_count **v7;
  uint64_t v8;
  uint64_t RegisterValue;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v4 = (pthread_mutex_t *)(a1 + 24);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 24));
  v5 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (v5)
  {
    v6 = v5 >> 4;
    if (v6 <= 1)
      v6 = 1;
    v7 = (std::__shared_weak_count **)(*(_QWORD *)a1 + 8);
    while (1)
    {
      v8 = (uint64_t)*(v7 - 1);
      if (*(_QWORD *)(v8 + 8) == a2)
        break;
      v7 += 2;
      if (!--v6)
        goto LABEL_7;
    }
    v11 = *v7;
    if (*v7)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    pthread_mutex_unlock(v4);
    RegisterValue = MachThread::GetRegisterValue(v8);
    if (v11)
    {
      v14 = (unint64_t *)&v11->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
LABEL_7:
    pthread_mutex_unlock(v4);
    return 0;
  }
  return RegisterValue;
}

uint64_t MachThreadList::SetRegisterValue(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  unint64_t v6;
  std::__shared_weak_count **v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v4 = (pthread_mutex_t *)(a1 + 24);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 24));
  v5 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (v5)
  {
    v6 = v5 >> 4;
    if (v6 <= 1)
      v6 = 1;
    v7 = (std::__shared_weak_count **)(*(_QWORD *)a1 + 8);
    while (1)
    {
      v8 = (uint64_t)*(v7 - 1);
      if (*(_QWORD *)(v8 + 8) == a2)
        break;
      v7 += 2;
      if (!--v6)
        goto LABEL_7;
    }
    v11 = *v7;
    if (*v7)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    pthread_mutex_unlock(v4);
    v9 = MachThread::SetRegisterValue(v8);
    if (v11)
    {
      v14 = (unint64_t *)&v11->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
LABEL_7:
    pthread_mutex_unlock(v4);
    return 0;
  }
  return v9;
}

uint64_t MachThreadList::GetRegisterContext(MachThreadList *this, uint64_t a2, void *a3)
{
  pthread_mutex_t *v6;
  uint64_t v7;
  unint64_t v8;
  std::__shared_weak_count **v9;
  MachThread *v10;
  uint64_t RegisterContext;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  v6 = (pthread_mutex_t *)((char *)this + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  v7 = *((_QWORD *)this + 1) - *(_QWORD *)this;
  if (v7)
  {
    v8 = v7 >> 4;
    if (v8 <= 1)
      v8 = 1;
    v9 = (std::__shared_weak_count **)(*(_QWORD *)this + 8);
    while (1)
    {
      v10 = (MachThread *)*(v9 - 1);
      if (*((_QWORD *)v10 + 1) == a2)
        break;
      v9 += 2;
      if (!--v8)
        goto LABEL_7;
    }
    v13 = *v9;
    if (*v9)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    pthread_mutex_unlock(v6);
    RegisterContext = MachThread::GetRegisterContext(v10, a3);
    if (v13)
    {
      v16 = (unint64_t *)&v13->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  else
  {
LABEL_7:
    pthread_mutex_unlock(v6);
    return 0;
  }
  return RegisterContext;
}

uint64_t MachThreadList::SetRegisterContext(MachThreadList *this, uint64_t a2, const void *a3)
{
  pthread_mutex_t *v6;
  uint64_t v7;
  unint64_t v8;
  std::__shared_weak_count **v9;
  MachThread *v10;
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  v6 = (pthread_mutex_t *)((char *)this + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  v7 = *((_QWORD *)this + 1) - *(_QWORD *)this;
  if (v7)
  {
    v8 = v7 >> 4;
    if (v8 <= 1)
      v8 = 1;
    v9 = (std::__shared_weak_count **)(*(_QWORD *)this + 8);
    while (1)
    {
      v10 = (MachThread *)*(v9 - 1);
      if (*((_QWORD *)v10 + 1) == a2)
        break;
      v9 += 2;
      if (!--v8)
        goto LABEL_7;
    }
    v13 = *v9;
    if (*v9)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    pthread_mutex_unlock(v6);
    v11 = MachThread::SetRegisterContext(v10, a3);
    if (v13)
    {
      v16 = (unint64_t *)&v13->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  else
  {
LABEL_7:
    pthread_mutex_unlock(v6);
    return 0;
  }
  return v11;
}

uint64_t MachThreadList::SaveRegisterState(MachThreadList *this, uint64_t a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  unint64_t v6;
  std::__shared_weak_count **v7;
  MachThread *v8;
  uint64_t v9;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v4 = (pthread_mutex_t *)((char *)this + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  v5 = *((_QWORD *)this + 1) - *(_QWORD *)this;
  if (v5)
  {
    v6 = v5 >> 4;
    if (v6 <= 1)
      v6 = 1;
    v7 = (std::__shared_weak_count **)(*(_QWORD *)this + 8);
    while (1)
    {
      v8 = (MachThread *)*(v7 - 1);
      if (*((_QWORD *)v8 + 1) == a2)
        break;
      v7 += 2;
      if (!--v6)
        goto LABEL_7;
    }
    v11 = *v7;
    if (*v7)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    pthread_mutex_unlock(v4);
    v9 = MachThread::SaveRegisterState(v8);
    if (v11)
    {
      v14 = (unint64_t *)&v11->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
LABEL_7:
    pthread_mutex_unlock(v4);
    return 0;
  }
  return v9;
}

uint64_t MachThreadList::RestoreRegisterState(MachThreadList *this, uint64_t a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  unint64_t v6;
  std::__shared_weak_count **v7;
  MachThread *v8;
  uint64_t v9;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v4 = (pthread_mutex_t *)((char *)this + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  v5 = *((_QWORD *)this + 1) - *(_QWORD *)this;
  if (v5)
  {
    v6 = v5 >> 4;
    if (v6 <= 1)
      v6 = 1;
    v7 = (std::__shared_weak_count **)(*(_QWORD *)this + 8);
    while (1)
    {
      v8 = (MachThread *)*(v7 - 1);
      if (*((_QWORD *)v8 + 1) == a2)
        break;
      v7 += 2;
      if (!--v6)
        goto LABEL_7;
    }
    v11 = *v7;
    if (*v7)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    pthread_mutex_unlock(v4);
    v9 = MachThread::RestoreRegisterState(v8);
    if (v11)
    {
      v14 = (unint64_t *)&v11->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
LABEL_7:
    pthread_mutex_unlock(v4);
    return 0;
  }
  return v9;
}

uint64_t MachThreadList::NumThreads(MachThreadList *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;

  v2 = (pthread_mutex_t *)((char *)this + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  v3 = (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4;
  pthread_mutex_unlock(v2);
  return v3;
}

uint64_t MachThreadList::ThreadIDAtIndex(MachThreadList *this, unint64_t a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;

  v4 = (pthread_mutex_t *)((char *)this + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  if (a2 >= (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 16 * a2) + 8);
  pthread_mutex_unlock(v4);
  return v5;
}

uint64_t MachThreadList::CurrentThreadID(MachThreadList *this)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v6 = 0;
  v7 = 0;
  MachThreadList::CurrentThread((uint64_t *)this, &v6);
  if (v6)
  {
    v1 = *(_QWORD *)(v6 + 8);
    v2 = v7;
    if (!v7)
      return v1;
  }
  else
  {
    v1 = 0;
    v2 = v7;
    if (!v7)
      return v1;
  }
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return v1;
}

uint64_t MachThreadList::CurrentThread(uint64_t *a1, _QWORD *a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  _DWORD *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;

  v4 = (pthread_mutex_t *)(a1 + 3);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 3));
  if (!a1[11])
  {
    v13 = *a1;
    v14 = a1[1];
    v15 = v14 - *a1;
    if (v14 != *a1)
    {
      v16 = 0;
      v17 = v15 >> 4;
      v18 = 1;
      while (1)
      {
        v19 = *(_DWORD **)(v13 + 16 * v16);
        if (v19[36])
        {
          if (v19[37] && v19[38])
            break;
        }
        v16 = v18++;
        if (v17 <= v16)
          goto LABEL_2;
      }
      v20 = *(_QWORD *)(v13 + 16 * v16 + 8);
      if (v20)
      {
        v21 = (unint64_t *)(v20 + 8);
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      v23 = (std::__shared_weak_count *)a1[12];
      a1[11] = (uint64_t)v19;
      a1[12] = v20;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(p_shared_owners);
        while (__stlxr(v25 - 1, p_shared_owners));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
    }
  }
LABEL_2:
  v6 = a1[11];
  v5 = a1[12];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)a2[1];
  *a2 = v6;
  a2[1] = v5;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return pthread_mutex_unlock(v4);
}

uint64_t MachThreadList::NotifyException(MachThreadList *this, MachException::Data *a2)
{
  int v4;
  pthread_mutex_t *v5;
  uint64_t v6;
  unint64_t v7;
  std::__shared_weak_count **v8;
  MachThread *v9;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;

  v4 = *((_DWORD *)a2 + 1);
  v5 = (pthread_mutex_t *)((char *)this + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  v6 = *((_QWORD *)this + 1) - *(_QWORD *)this;
  if (v6)
  {
    v7 = v6 >> 4;
    if (v7 <= 1)
      v7 = 1;
    v8 = (std::__shared_weak_count **)(*(_QWORD *)this + 8);
    while (1)
    {
      v9 = (MachThread *)*(v8 - 1);
      if (*((_DWORD *)v9 + 4) == v4)
        break;
      v8 += 2;
      if (!--v7)
        goto LABEL_7;
    }
    v11 = *v8;
    if (*v8)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      pthread_mutex_unlock(v5);
      MachThread::NotifyException(v9, a2);
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      pthread_mutex_unlock(v5);
      MachThread::NotifyException(v9, a2);
    }
    return 1;
  }
  else
  {
LABEL_7:
    pthread_mutex_unlock(v5);
    return 0;
  }
}

uint64_t MachThreadList::Clear(MachThreadList *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  uint64_t i;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (pthread_mutex_t *)((char *)this + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  v3 = *(_QWORD *)this;
  for (i = *((_QWORD *)this + 1); i != v3; i -= 16)
  {
    v5 = *(std::__shared_weak_count **)(i - 8);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  *((_QWORD *)this + 1) = v3;
  return pthread_mutex_unlock(v2);
}

unint64_t MachThreadList::UpdateThreadList(uint64_t *a1, MachProcess *a2, int a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  task_inspect_t v13;
  _BOOL4 v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t GloballyUniqueThreadIDForMachPortID;
  uint64_t v18;
  unint64_t v19;
  size_t *v20;
  size_t v21;
  size_t v22;
  unint64_t *v23;
  unint64_t v24;
  char *v25;
  size_t v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  MachThread *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  _QWORD *v34;
  size_t v35;
  unint64_t *v36;
  unint64_t v37;
  _OWORD *v38;
  size_t v39;
  unint64_t *v40;
  unint64_t v41;
  _OWORD *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  __int128 v47;
  void *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  char *v52;
  char *v53;
  void *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  size_t v59[2];
  mach_msg_type_number_t act_listCnt;
  thread_act_array_t act_list;
  void *__p[2];
  void *v63;
  _DWORD v64[2];
  void *v65;
  uint64_t v66;
  uint64_t v67;
  char v68;

  if (DNBLogEnabledForAny(4))
    _DNBLogThreaded("MachThreadList::UpdateThreadList (pid = %4.4x, update = %u) process stop count = %u", *(_DWORD *)a2, a3, *((_DWORD *)a2 + 111));
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 3));
  if (!*((_DWORD *)a2 + 111))
  {
    __p[0] = (void *)0xE00000001;
    v8 = *(_DWORD *)a2;
    LODWORD(__p[1]) = 1;
    HIDWORD(__p[1]) = v8;
    v59[0] = 648;
    if (!sysctl((int *)__p, 4u, v64, v59, 0, 0) && v59[0] && (v68 & 4) != 0)
      *((_BYTE *)a1 + 104) = 1;
    if (*((_BYTE *)a1 + 104))
    {
      v9 = 16777228;
    }
    else if (MachProcess::GetCPUType(a2) == 33554444)
    {
      v9 = 33554444;
    }
    else
    {
      v9 = 12;
    }
    DNBArchProtocol::SetArchitecture((DNBArchProtocol *)v9, 0);
  }
  v11 = *a1;
  v10 = a1[1];
  if (*a1 == v10 || a3 != 0)
  {
    act_list = 0;
    act_listCnt = 0;
    v13 = *((_DWORD *)a2 + 30);
    v14 = 1;
    v64[0] = task_threads(v13, &act_list, &act_listCnt);
    v64[1] = 1;
    v66 = 0;
    v67 = 0;
    v65 = 0;
    if (DNBLogCheckLogBit(4) || v64[0])
    {
      DNBError::LogThreaded((DNBError *)v64, "::task_threads(task = 0x%4.4x, thread_list => %p, thread_list_count => %u)", v13, act_list, act_listCnt);
      v14 = v64[0] == 0;
    }
    if (v14 && act_listCnt)
    {
      v15 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v63 = 0;
      while (1)
      {
        v16 = act_list[v15];
        GloballyUniqueThreadIDForMachPortID = MachThread::GetGloballyUniqueThreadIDForMachPortID((MachThread *)v16);
        pthread_mutex_lock((pthread_mutex_t *)(a1 + 3));
        v59[0] = 0;
        v59[1] = 0;
        v18 = a1[1] - *a1;
        if (v18)
        {
          v19 = v18 >> 4;
          if (v19 <= 1)
            v19 = 1;
          v20 = (size_t *)(*a1 + 8);
          while (1)
          {
            v21 = *(v20 - 1);
            if (*(_QWORD *)(v21 + 8) == GloballyUniqueThreadIDForMachPortID)
              break;
            v20 += 2;
            if (!--v19)
              goto LABEL_36;
          }
          v22 = *v20;
          if (*v20)
          {
            v23 = (unint64_t *)(v22 + 8);
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          v59[0] = v21;
          v59[1] = v22;
        }
LABEL_36:
        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 3));
        if (v59[0])
        {
          v25 = (char *)__p[1];
          if (__p[1] >= v63)
            goto LABEL_61;
          *(_QWORD *)__p[1] = v59[0];
          v26 = v59[1];
          *((_QWORD *)v25 + 1) = v59[1];
          if (v26)
          {
            v27 = (unint64_t *)(v26 + 8);
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
        }
        else
        {
          v29 = operator new(0x198uLL);
          v29[1] = 0;
          v29[2] = 0;
          *v29 = off_100061610;
          v30 = MachThread::MachThread((MachThread *)(v29 + 3), a2, *((_BYTE *)a1 + 104), GloballyUniqueThreadIDForMachPortID, v16);
          v31 = (std::__shared_weak_count *)v59[1];
          v59[0] = (size_t)v30;
          v59[1] = (size_t)v29;
          if (v31)
          {
            p_shared_owners = (unint64_t *)&v31->__shared_owners_;
            do
              v33 = __ldaxr(p_shared_owners);
            while (__stlxr(v33 - 1, p_shared_owners));
            if (!v33)
            {
              ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
              std::__shared_weak_count::__release_weak(v31);
            }
          }
          if (!MachThread::IsUserReady((MachThread *)v59[0]))
            goto LABEL_63;
          if (a4)
          {
            v34 = *(_QWORD **)(a4 + 8);
            if ((unint64_t)v34 >= *(_QWORD *)(a4 + 16))
            {
              v38 = std::vector<std::shared_ptr<JSONGenerator::Object>>::__push_back_slow_path<std::shared_ptr<JSONGenerator::Object> const&>(a4, (__int128 *)v59);
            }
            else
            {
              *v34 = v59[0];
              v35 = v59[1];
              v34[1] = v59[1];
              if (v35)
              {
                v36 = (unint64_t *)(v35 + 8);
                do
                  v37 = __ldxr(v36);
                while (__stxr(v37 + 1, v36));
              }
              v38 = v34 + 2;
            }
            *(_QWORD *)(a4 + 8) = v38;
          }
          v25 = (char *)__p[1];
          if (__p[1] >= v63)
          {
LABEL_61:
            v42 = std::vector<std::shared_ptr<JSONGenerator::Object>>::__push_back_slow_path<std::shared_ptr<JSONGenerator::Object> const&>((uint64_t)__p, (__int128 *)v59);
            goto LABEL_62;
          }
          *(_QWORD *)__p[1] = v59[0];
          v39 = v59[1];
          *((_QWORD *)v25 + 1) = v59[1];
          if (v39)
          {
            v40 = (unint64_t *)(v39 + 8);
            do
              v41 = __ldxr(v40);
            while (__stxr(v41 + 1, v40));
          }
        }
        v42 = v25 + 16;
LABEL_62:
        __p[1] = v42;
LABEL_63:
        v43 = (std::__shared_weak_count *)v59[1];
        if (v59[1])
        {
          v44 = (unint64_t *)(v59[1] + 8);
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        if (++v15 >= (unint64_t)act_listCnt)
        {
          v46 = (uint64_t)v63;
          v47 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)__p;
          *(_OWORD *)__p = v47;
          v48 = (void *)a1[2];
          a1[2] = v46;
          v63 = v48;
          v49 = (std::__shared_weak_count *)a1[12];
          a1[11] = 0;
          a1[12] = 0;
          if (v49)
          {
            v50 = (unint64_t *)&v49->__shared_owners_;
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
              std::__shared_weak_count::__release_weak(v49);
            }
          }
          vm_deallocate(mach_task_self_, (vm_address_t)act_list, 4 * act_listCnt);
          v52 = (char *)__p[0];
          if (__p[0])
          {
            v53 = (char *)__p[1];
            v54 = __p[0];
            if (__p[1] != __p[0])
            {
              do
              {
                v55 = (std::__shared_weak_count *)*((_QWORD *)v53 - 1);
                if (v55)
                {
                  v56 = (unint64_t *)&v55->__shared_owners_;
                  do
                    v57 = __ldaxr(v56);
                  while (__stlxr(v57 - 1, v56));
                  if (!v57)
                  {
                    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                    std::__shared_weak_count::__release_weak(v55);
                  }
                }
                v53 -= 16;
              }
              while (v53 != v52);
              v54 = __p[0];
            }
            __p[1] = v52;
            operator delete(v54);
          }
          break;
        }
      }
    }
    if (SHIBYTE(v67) < 0)
      operator delete(v65);
    v11 = *a1;
    v10 = a1[1];
  }
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 3));
  return (unint64_t)(v10 - v11) >> 4;
}

uint64_t MachThreadList::Dump(MachThreadList *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;

  v2 = (pthread_mutex_t *)((char *)this + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  v3 = *((_QWORD *)this + 1);
  v4 = v3 - *(_QWORD *)this;
  if (v3 != *(_QWORD *)this)
  {
    v5 = 0;
    v6 = 0;
    v7 = v4 >> 4;
    do
    {
      MachThread::Dump(*(MachThread **)(*(_QWORD *)this + 16 * v5), v6++);
      v5 = v6;
    }
    while (v7 > v6);
  }
  return pthread_mutex_unlock(v2);
}

uint64_t MachThreadList::ProcessWillResume(MachThreadList *this, MachProcess *a2, const DNBThreadResumeActions *a3)
{
  pthread_mutex_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  __int128 *v20;
  uint64_t v21;
  _BOOL4 v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  __int128 *ActionForThread;
  char *v27;
  char *v28;
  unint64_t v30;
  unsigned int v31;
  MachThread *v32;
  uint64_t v33;
  int v34;
  int v35;
  _BOOL4 IsUserReady;
  char *v37;
  void *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  pthread_mutex_t *v43;
  __int128 v44;
  uint64_t v45;
  void *__p;
  char *v47;
  uint64_t v48;

  v6 = (pthread_mutex_t *)((char *)this + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  __p = 0;
  v47 = 0;
  v48 = 0;
  if (*((_QWORD *)a3 + 1) == *(_QWORD *)a3
    || (v7 = DNBThreadResumeActions::NumActionsWithState((uint64_t *)a3, 6),
        DNBThreadResumeActions::NumActionsWithState((uint64_t *)a3, 5) + v7 != 1))
  {
    MachThreadList::UpdateThreadList((uint64_t *)this, a2, 1, (uint64_t)&__p);
    v11 = 0;
    v44 = xmmword_1000520A0;
    v45 = -1;
  }
  else
  {
    v8 = *((_QWORD *)a3 + 1) - *(_QWORD *)a3;
    if (v8)
    {
      v9 = v8 / 24;
      if (v9 <= 1)
        v9 = 1;
      v10 = (_DWORD *)(*(_QWORD *)a3 + 8);
      while ((*v10 - 5) > 1)
      {
        v10 += 6;
        if (!--v9)
          goto LABEL_9;
      }
      v11 = *((_QWORD *)v10 - 1);
    }
    else
    {
LABEL_9:
      v11 = 0;
    }
    MachThreadList::UpdateThreadList((uint64_t *)this, a2, 1, (uint64_t)&__p);
    v44 = xmmword_1000520A0;
    v45 = -1;
    DWORD2(v44) = 10;
  }
  v13 = __p;
  v12 = v47;
  v14 = (v47 - (_BYTE *)__p) >> 4;
  v15 = *((_QWORD *)this + 1);
  v16 = v15 - *(_QWORD *)this;
  if (v15 == *(_QWORD *)this)
  {
    v28 = (char *)__p;
    v27 = v47;
  }
  else
  {
    v43 = v6;
    v17 = 0;
    v18 = 0;
    v19 = v16 >> 4;
    do
    {
      v23 = *(_QWORD *)(*(_QWORD *)this + 16 * v17);
      if (v12 == v13)
      {
LABEL_21:
        ActionForThread = (__int128 *)DNBThreadResumeActions::GetActionForThread(a3, *(_QWORD *)(v23 + 8), 1);
        if (!ActionForThread)
          MachThreadList::ProcessWillResume();
        v20 = ActionForThread;
        v22 = v11 == *(_QWORD *)(v23 + 8);
        v21 = v23;
      }
      else
      {
        v24 = 0;
        v25 = 1;
        while (v23 != *((_QWORD *)__p + 2 * v24))
        {
          v24 = v25++;
          if (v14 <= v24)
            goto LABEL_21;
        }
        v20 = &v44;
        v21 = v23;
        v22 = 0;
      }
      MachThread::ThreadWillResume(v21, (uint64_t)v20, v22);
      v17 = ++v18;
    }
    while (v19 > v18);
    v28 = (char *)__p;
    v27 = v47;
    v6 = v43;
  }
  if (v27 != v28 && v12 != v13)
  {
    v30 = 0;
    v31 = 1;
    do
    {
      if (DNBLogEnabledForAny(4))
      {
        v32 = (MachThread *)*((_QWORD *)__p + 2 * v30);
        v33 = *((_QWORD *)v32 + 1);
        v34 = *(_DWORD *)a2;
        v35 = *((_DWORD *)a2 + 111);
        IsUserReady = MachThread::IsUserReady(v32);
        _DNBLogThreaded("MachThreadList::ProcessWillResume (pid = %4.4x) stop-id=%u, resuming newly discovered thread: 0x%8.8llx, thread-is-user-ready=%i)", v34, v35, v33, IsUserReady);
      }
      v30 = v31++;
    }
    while (v14 > v30);
    v28 = (char *)__p;
  }
  if (v28)
  {
    v37 = v47;
    v38 = v28;
    if (v47 != v28)
    {
      do
      {
        v39 = (std::__shared_weak_count *)*((_QWORD *)v37 - 1);
        if (v39)
        {
          p_shared_owners = (unint64_t *)&v39->__shared_owners_;
          do
            v41 = __ldaxr(p_shared_owners);
          while (__stlxr(v41 - 1, p_shared_owners));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
        v37 -= 16;
      }
      while (v37 != v28);
      v38 = __p;
    }
    v47 = v28;
    operator delete(v38);
  }
  return pthread_mutex_unlock(v6);
}

unint64_t MachThreadList::ProcessDidStop(MachThreadList *this, MachProcess *a2)
{
  pthread_mutex_t *v4;
  unint64_t updated;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = (pthread_mutex_t *)((char *)this + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  updated = MachThreadList::UpdateThreadList((uint64_t *)this, a2, 1, 0);
  v6 = updated;
  if ((_DWORD)updated)
  {
    v7 = 0;
    v8 = 16 * updated;
    do
    {
      MachThread::ThreadDidStop(*(MachThread **)(*(_QWORD *)this + v7));
      v7 += 16;
    }
    while (v8 != v7);
  }
  pthread_mutex_unlock(v4);
  return v6;
}

BOOL MachThreadList::ShouldStop(MachThreadList *this, BOOL *a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  _BOOL8 ShouldStop;

  v4 = (pthread_mutex_t *)((char *)this + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  v5 = *((_QWORD *)this + 1);
  v6 = v5 - *(_QWORD *)this;
  if (v5 == *(_QWORD *)this)
  {
    ShouldStop = 0;
  }
  else
  {
    v7 = 0;
    v8 = v6 >> 4;
    v9 = 1;
    do
    {
      ShouldStop = MachThread::ShouldStop(*(MachThread **)(*(_QWORD *)this + 16 * v7), a2);
      if (ShouldStop)
        break;
      v7 = v9++;
    }
    while (v8 > v7);
  }
  pthread_mutex_unlock(v4);
  return ShouldStop;
}

uint64_t MachThreadList::NotifyBreakpointChanged(uint64_t a1)
{
  pthread_mutex_t *v1;

  v1 = (pthread_mutex_t *)(a1 + 24);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 24));
  return pthread_mutex_unlock(v1);
}

uint64_t MachThreadList::DoHardwareBreakpointAction(uint64_t a1, uint64_t a2, int a3)
{
  pthread_mutex_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v20;
  pthread_mutex_t *v21;

  if (!a2)
    return 0xFFFFFFFFLL;
  v6 = (pthread_mutex_t *)(a1 + 24);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 24));
  v8 = *(uint64_t **)a1;
  v7 = *(uint64_t **)(a1 + 8);
  v9 = (uint64_t)v7 - *(_QWORD *)a1;
  v10 = v9 >> 4;
  if (v7 != *(uint64_t **)a1)
  {
    switch(a3)
    {
      case 0:
        v11 = MachThread::EnableHardwareWatchpoint(*v8, a2, 1);
        goto LABEL_10;
      case 1:
        v13 = MachThread::DisableHardwareWatchpoint(*v8, a2);
        goto LABEL_13;
      case 2:
        v11 = MachThread::EnableHardwareBreakpoint(*v8, a2, 1);
LABEL_10:
        v12 = v11;
        if ((_DWORD)v11 == -1)
          goto LABEL_29;
        goto LABEL_14;
      case 3:
        v13 = MachThread::DisableHardwareBreakpoint(*v8, a2);
LABEL_13:
        v12 = v13;
LABEL_14:
        v21 = v6;
        if ((unint64_t)v9 >= 0x11)
        {
          v14 = 1;
          while (2)
          {
            switch(a3)
            {
              case 0:
                v16 = MachThread::EnableHardwareWatchpoint(*(_QWORD *)(*(_QWORD *)a1 + 16 * v14), a2, 0);
                goto LABEL_22;
              case 1:
                v15 = MachThread::DisableHardwareWatchpoint(*(_QWORD *)(*(_QWORD *)a1 + 16 * v14), a2);
                goto LABEL_17;
              case 2:
                v16 = MachThread::EnableHardwareBreakpoint(*(_QWORD *)(*(_QWORD *)a1 + 16 * v14), a2, 0);
LABEL_22:
                v12 = v16;
                if ((_DWORD)v16 != -1)
                  goto LABEL_18;
                if ((_DWORD)v14)
                {
                  v20 = 0;
                  do
                  {
                    MachThread::RollbackTransForHWP(*(MachThread **)(*(_QWORD *)a1 + v20));
                    v20 += 16;
                  }
                  while (16 * v14 != v20);
                }
                v12 = 0xFFFFFFFFLL;
                goto LABEL_28;
              case 3:
                v15 = MachThread::DisableHardwareBreakpoint(*(_QWORD *)(*(_QWORD *)a1 + 16 * v14), a2);
LABEL_17:
                v12 = v15;
                goto LABEL_18;
              default:
LABEL_18:
                v14 = (v14 + 1);
                if (v10 > v14)
                  continue;
                goto LABEL_25;
            }
          }
        }
        goto LABEL_25;
      default:
        v12 = 0xFFFFFFFFLL;
        goto LABEL_29;
    }
  }
  v21 = v6;
  v12 = 0xFFFFFFFFLL;
LABEL_25:
  if (v7 != v8)
  {
    v17 = 0;
    v18 = 1;
    do
    {
      MachThread::FinishTransForHWP(*(MachThread **)(*(_QWORD *)a1 + 16 * v17));
      v17 = v18++;
    }
    while (v10 > v17);
  }
LABEL_28:
  v6 = v21;
LABEL_29:
  pthread_mutex_unlock(v6);
  return v12;
}

uint64_t MachThreadList::EnableHardwareWatchpoint(uint64_t a1, uint64_t a2)
{
  return MachThreadList::DoHardwareBreakpointAction(a1, a2, 0);
}

BOOL MachThreadList::DisableHardwareWatchpoint(uint64_t a1, uint64_t a2)
{
  return MachThreadList::DoHardwareBreakpointAction(a1, a2, 1) != -1;
}

uint64_t MachThreadList::EnableHardwareBreakpoint(uint64_t a1, uint64_t a2)
{
  return MachThreadList::DoHardwareBreakpointAction(a1, a2, 2);
}

BOOL MachThreadList::DisableHardwareBreakpoint(uint64_t a1, uint64_t a2)
{
  return MachThreadList::DoHardwareBreakpointAction(a1, a2, 3) != -1;
}

uint64_t MachThreadList::NumSupportedHardwareWatchpoints(MachThread ***this)
{
  pthread_mutex_t *v2;
  uint64_t v3;

  v2 = (pthread_mutex_t *)(this + 3);
  pthread_mutex_lock((pthread_mutex_t *)(this + 3));
  if (this[1] == *this)
    v3 = 0;
  else
    v3 = MachThread::NumSupportedHardwareWatchpoints(**this);
  pthread_mutex_unlock(v2);
  return v3;
}

uint64_t MachThreadList::GetThreadIndexForThreadStoppedWithSignal(MachThreadList *this, int a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (pthread_mutex_t *)((char *)this + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  v5 = *(_QWORD *)this;
  v6 = *((_QWORD *)this + 1) - *(_QWORD *)this;
  if (v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = v6 >> 4;
    do
    {
      v10 = *(_QWORD *)(v5 + 16 * v7);
      if (*(_DWORD *)(v10 + 152) == 5
        && (v12 = v10 + 160, v11 = *(_QWORD *)(v10 + 160), *(_QWORD *)(v12 + 8) - v11 == 16)
        && *(_QWORD *)v11 == 65539)
      {
        if (*(_DWORD *)(v11 + 8) == a2)
          goto LABEL_11;
      }
      else if (!a2)
      {
        goto LABEL_11;
      }
      v7 = (v8 + 1);
      v8 = v7;
    }
    while (v9 > v7);
  }
  v8 = 0xFFFFFFFFLL;
LABEL_11:
  pthread_mutex_unlock(v4);
  return v8;
}

void std::__shared_ptr_emplace<MachThread>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100061610;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MachThread>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100061610;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void std::__shared_ptr_emplace<MachThread>::__on_zero_shared(uint64_t a1)
{
  MachThread::~MachThread((MachThread *)(a1 + 24));
}

void MachVMMemory::MachVMMemory(MachVMMemory *this)
{
  *(_QWORD *)this = -1;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
}

void MachVMMemory::~MachVMMemory(void **this)
{
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

uint64_t MachVMMemory::PageSize(vm_size_t *this, task_name_t target_task)
{
  uint64_t result;
  kern_return_t v4;
  _BOOL4 v5;
  mach_port_t v6;
  kern_return_t v7;
  integer_t task_info_out[3];
  int v9;
  mach_msg_type_number_t task_info_outCnt;

  result = *this;
  if (result != -1)
    return result;
  if (target_task)
  {
    task_info_outCnt = 93;
    v4 = task_info(target_task, 0x16u, task_info_out, &task_info_outCnt);
    v5 = DNBLogEnabledForAny(0x2000);
    if (!v4)
    {
      if (v5)
        _DNBLogThreaded("MachVMMemory::PageSize task_info returned page size of 0x%x", v9);
      result = v9;
      *this = v9;
      return result;
    }
    if (v5)
      _DNBLogThreaded("MachVMMemory::PageSize task_info call failed to get page size, TASK_VM_INFO %d, TASK_VM_INFO_COUNT %d, kern return %d", 22, 93, v4);
  }
  v6 = mach_host_self();
  v7 = host_page_size(v6, this);
  *((_DWORD *)this + 2) = v7;
  *((_DWORD *)this + 3) = 1;
  if (*((char *)this + 39) < 0)
  {
    *(_BYTE *)this[2] = 0;
    this[3] = 0;
    if (*((_DWORD *)this + 2))
      goto LABEL_8;
  }
  else
  {
    *((_BYTE *)this + 16) = 0;
    *((_BYTE *)this + 39) = 0;
    if (v7)
    {
LABEL_8:
      result = 0;
      *this = 0;
      return result;
    }
  }
  return *this;
}

void get_dirty_pages(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  int v4;
  uint64_t v5;
  char *v6;
  int v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  mach_vm_size_t v11;
  uint64_t v12;
  mach_vm_size_t v13;
  mach_vm_offset_t v14;
  mach_vm_size_t v15;
  uint64_t v16;
  char *v17;
  vm_size_t v18;
  char *v19;
  mach_vm_offset_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  vm_size_t v26;
  _BYTE *v27;
  mach_vm_offset_t *v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  mach_vm_offset_t v38;
  uint64_t v39;
  mach_vm_size_t v40;
  uint64_t v41;
  vm_map_read_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  mach_vm_offset_t v46;
  mach_vm_size_t dispositions_count;

  v43 = a2;
  v42 = a1;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  __chkstk_darwin(a1);
  v6 = (char *)&v39 - v5;
  v41 = v7;
  v8 = v7 + 4095;
  if (v8 >= 0x1000)
  {
    v9 = 0;
    v10 = 0;
    v11 = v4;
    v12 = v8 >> 12;
    if (v8 >> 12 <= 1)
      v12 = 1;
    v39 = v12;
    v40 = v11;
    v45 = (char *)&v39 - v5;
    while (1)
    {
      v13 = v41 - (v10 << 12);
      if (v13 >= v40)
        v13 = v40;
      dispositions_count = v13;
      v14 = v43 + vm_page_size * (v10 << 12);
      if (mach_vm_page_range_query(v42, v14, vm_page_size * v13, (mach_vm_address_t)v6, &dispositions_count))
        return;
      v44 = v10;
      v15 = dispositions_count;
      if (dispositions_count)
        break;
LABEL_6:
      v10 = v44 + 1;
      if (v44 + 1 == v39)
        return;
    }
    v16 = 0;
    v17 = *a3;
    v18 = vm_page_size;
    v46 = v14;
    while (1)
    {
      if ((*(_DWORD *)&v6[4 * v16] & 8) == 0)
        goto LABEL_14;
      v20 = v14 + v18 * v16;
      v21 = (unint64_t)a3[2];
      if ((unint64_t)v9 >= v21)
        break;
      *(_QWORD *)v9 = v20;
      v19 = v9 + 8;
LABEL_13:
      a3[1] = v19;
      v15 = dispositions_count;
      v9 = v19;
LABEL_14:
      if (++v16 >= v15)
        goto LABEL_6;
    }
    v22 = (v9 - v17) >> 3;
    v23 = v22 + 1;
    if ((unint64_t)(v22 + 1) >> 61)
      abort();
    v24 = v21 - (_QWORD)v17;
    if (v24 >> 2 > v23)
      v23 = v24 >> 2;
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
      v25 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v25 = v23;
    if (v25)
    {
      if (v25 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v26 = v18;
      v27 = operator new(8 * v25);
      v18 = v26;
    }
    else
    {
      v27 = 0;
    }
    v28 = (mach_vm_offset_t *)&v27[8 * v22];
    *v28 = v20;
    v19 = (char *)(v28 + 1);
    if (v9 == v17)
      goto LABEL_40;
    v29 = v9 - v17 - 8;
    if (v29 < 0x168)
    {
      v30 = v9;
      goto LABEL_39;
    }
    v31 = (v9 - 8 - v17) & 0xFFFFFFFFFFFFFFF8;
    if (&v27[v9 - v17 - 8 - v31] > &v27[v9 - v17 - 8])
    {
      v30 = v9;
    }
    else
    {
      if (&v9[-v31 - 8] <= v9 - 8)
      {
        if ((unint64_t)(v17 - v27) < 0x20)
        {
          v30 = v9;
          goto LABEL_39;
        }
        v32 = (v29 >> 3) + 1;
        v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
        v30 = &v9[-v33];
        v28 = (mach_vm_offset_t *)((char *)v28 - v33);
        v34 = &v27[8 * v22 - 16];
        v35 = v9 - 16;
        v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v37 = *(_OWORD *)v35;
          *(v34 - 1) = *((_OWORD *)v35 - 1);
          *v34 = v37;
          v34 -= 2;
          v35 -= 32;
          v36 -= 4;
        }
        while (v36);
        if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_39;
LABEL_40:
        *a3 = (char *)v28;
        a3[1] = v19;
        a3[2] = &v27[8 * v25];
        if (v17)
        {
          operator delete(v17);
          v18 = vm_page_size;
        }
        v17 = (char *)v28;
        v6 = v45;
        v14 = v46;
        goto LABEL_13;
      }
      v30 = v9;
    }
    do
    {
LABEL_39:
      v38 = *((_QWORD *)v30 - 1);
      v30 -= 8;
      *--v28 = v38;
    }
    while (v30 != v17);
    goto LABEL_40;
  }
}

uint64_t MachVMMemory::GetMemoryRegionInfo(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  __int128 v13;
  uint64_t v14;
  _BYTE v15[16];
  int v16;
  __int128 v17;

  MachVMRegion::MachVMRegion((MachVMRegion *)v15, a2);
  if (MachVMRegion::GetRegionForAddress((MachVMRegion *)v15, a3))
  {
    *(_OWORD *)a4 = v17;
    *(_DWORD *)(a4 + 16) = MachVMRegion::GetDNBPermissions((MachVMRegion *)v15);
    get_dirty_pages(a2, v17, (char **)&v13);
    v7 = *(void **)(a4 + 24);
    if (v7)
    {
      *(_QWORD *)(a4 + 32) = v7;
      operator delete(v7);
    }
    *(_OWORD *)(a4 + 24) = v13;
    *(_QWORD *)(a4 + 40) = v14;
    MachVMRegion::GetMemoryTypes((MachVMRegion *)v15, (uint64_t)&v13);
    v8 = *(_QWORD *)(a4 + 48);
    if (v8)
    {
      v9 = *(_QWORD *)(a4 + 56);
      v10 = *(void **)(a4 + 48);
      if (v9 != v8)
      {
        do
        {
          if (*(char *)(v9 - 1) < 0)
            operator delete(*(void **)(v9 - 24));
          v9 -= 24;
        }
        while (v9 != v8);
        v10 = *(void **)(a4 + 48);
      }
      *(_QWORD *)(a4 + 56) = v8;
      operator delete(v10);
    }
    *(_OWORD *)(a4 + 48) = v13;
    *(_QWORD *)(a4 + 64) = v14;
  }
  else
  {
    *(_QWORD *)a4 = a3;
    if (v16 || (v11 = v17 - a3, (unint64_t)v17 <= a3))
      v11 = ~a3;
    *(_QWORD *)(a4 + 8) = v11;
    *(_DWORD *)(a4 + 16) = 0;
  }
  MachVMRegion::~MachVMRegion((MachVMRegion *)v15);
  return 1;
}

uint64_t MachVMMemory::GetMemoryProfile(int a1, __int16 a2, task_name_t a3, int a4, int a5, uint64_t a6, host_info64_t host_info64_out, _QWORD *a8, _QWORD *a9, _QWORD *a10, _QWORD *a11)
{
  unsigned __int8 v16;
  size_t v18[47];
  mach_msg_type_number_t task_info_outCnt;
  mach_msg_type_number_t host_info64_outCnt;

  if ((a2 & 0x20) != 0)
  {
    if (GetPhysicalMemory(void)::calculated != 1)
    {
      v18[0] = 8;
      sysctlbyname("hw.memsize", &GetPhysicalMemory(void)::physical_memory, v18, 0, 0);
      GetPhysicalMemory(void)::calculated = 1;
    }
    *a8 = GetPhysicalMemory(void)::physical_memory;
  }
  if ((a2 & 0x40) == 0)
    goto LABEL_8;
  if ((v16 & 1) == 0
  {
    MachVMMemory::GetMemoryProfile(DNBProfileDataScanType,unsigned int,task_basic_info,int,int,vm_statistics64 &,unsigned long long &,unsigned long long &,unsigned long long &,unsigned long long &)::localHost = mach_host_self();
  }
  host_info64_outCnt = 38;
  host_statistics64(MachVMMemory::GetMemoryProfile(DNBProfileDataScanType,unsigned int,task_basic_info,int,int,vm_statistics64 &,unsigned long long &,unsigned long long &,unsigned long long &,unsigned long long &)::localHost, 4, host_info64_out, &host_info64_outCnt);
  task_info_outCnt = 93;
  if (task_info(a3, 0x17u, (task_info_t)v18, &task_info_outCnt))
  {
LABEL_8:
    if ((a2 & 0x8000) == 0)
      return 1;
    goto LABEL_9;
  }
  if ((a2 & 0x100) != 0)
    *a9 = v18[15] + v18[6] - v18[12];
  *a10 = v18[18];
  if (a2 < 0)
  {
LABEL_9:
    v18[0] = 0;
    v18[1] = 0;
    if (!memorystatus_control(8, a6, 0, v18, 16))
      *a11 = SLODWORD(v18[0]);
  }
  return 1;
}

unint64_t MachVMMemory::Read(vm_size_t *this, task_name_t target_task, mach_vm_address_t a3, char *a4, unint64_t a5)
{
  unint64_t v5;
  char *v7;
  DNBError *v11;
  void *v12;
  vm_size_t v13;
  mach_vm_size_t v14;
  unint64_t v15;
  unsigned int v16;
  _BOOL4 v17;
  void *__src;
  size_t __n;

  v5 = 0;
  if (a4 && a5)
  {
    v7 = a4;
    v5 = 0;
    v11 = (DNBError *)(this + 1);
    do
    {
      v14 = a5 - v5;
      v15 = MachVMMemory::PageSize(this, target_task);
      if (v15 && v15 + a3 / v15 * v15 - a3 < v14)
        v14 = v15 + a3 / v15 * v15 - a3;
      LODWORD(__n) = 0;
      __src = 0;
      *((_DWORD *)this + 2) = mach_vm_read(target_task, a3, v14, (vm_offset_t *)&__src, (mach_msg_type_number_t *)&__n);
      *((_DWORD *)this + 3) = 1;
      if (*((char *)this + 39) < 0)
      {
        *(_BYTE *)this[2] = 0;
        this[3] = 0;
      }
      else
      {
        *((_BYTE *)this + 16) = 0;
        *((_BYTE *)this + 39) = 0;
      }
      if (DNBLogCheckLogBit(32))
        DNBError::LogThreaded(v11, "::mach_vm_read(task = 0x%4.4x, addr = 0x%8.8llx, size = %llu, data => %8.8p, dataCnt => %i)", target_task, a3, v14, __src, __n);
      if (*(_DWORD *)v11)
        break;
      v16 = __n;
      if (v14 != __n)
      {
        v17 = DNBLogCheckLogBit(32);
        v16 = __n;
        if (v17)
        {
          DNBError::LogThreaded(v11, "::mach_vm_read(task = 0x%4.4x, addr = 0x%8.8llx, size = %llu, data => %8.8p, dataCnt=>%i) only read %u of %llu bytes", target_task, a3, v14, __src, __n, __n, v14);
          v16 = __n;
        }
      }
      v12 = __src;
      v13 = v16;
      memcpy(v7, __src, v16);
      vm_deallocate(mach_task_self_, (vm_address_t)v12, v13);
      v5 += __n;
      a3 += __n;
      v7 += __n;
    }
    while (v5 < a5);
  }
  return v5;
}

unint64_t MachVMMemory::Write(vm_size_t *this, task_name_t a2, mach_vm_address_t a3, char *a4, unint64_t a5)
{
  unint64_t v10;
  mach_vm_address_t v11;
  mach_vm_address_t v12;
  mach_vm_size_t v13;
  unint64_t v14;
  _BYTE v16[48];
  mach_vm_address_t v17;
  uint64_t v18;

  MachVMRegion::MachVMRegion((MachVMRegion *)v16, a2);
  v10 = 0;
  if (a5)
  {
    v11 = a3;
    while (MachVMRegion::GetRegionForAddress((MachVMRegion *)v16, v11))
    {
      if (v17 > v11)
        goto LABEL_18;
      if (v18 + v17 <= v11)
        goto LABEL_18;
      v12 = v18 + v17 - v11;
      if (!v12)
        goto LABEL_18;
      if (a5 - v10 >= v12)
        v13 = v18 + v17 - v11;
      else
        v13 = a5 - v10;
      if (!MachVMRegion::SetProtections((MachVMRegion *)v16, v11, v13, 3))
      {
        if (DNBLogEnabledForAny(256))
          _DNBLogThreaded("Failed to set read/write protections on region for address: [0x%8.8llx-0x%8.8llx)");
        goto LABEL_18;
      }
      v14 = MachVMMemory::WriteRegion(this, a2, v11, a4, v13);
      if (v14)
      {
        v10 += v14;
        v11 += v14;
        a4 += v14;
        if (v10 < a5)
          continue;
      }
      goto LABEL_18;
    }
    if (DNBLogEnabledForAny(256))
      _DNBLogThreaded("Failed to get region for address: 0x%8.8llx");
  }
LABEL_18:
  MachVMRegion::~MachVMRegion((MachVMRegion *)v16);
  return v10;
}

unint64_t MachVMMemory::WriteRegion(vm_size_t *this, task_name_t target_task, mach_vm_address_t a3, char *a4, unint64_t a5)
{
  unint64_t v5;
  char *v7;
  DNBError *v11;
  unint64_t v12;
  unint64_t v13;
  vm_machine_attribute_val_t value;

  v5 = 0;
  if (a4 && a5)
  {
    v7 = a4;
    v5 = 0;
    v11 = (DNBError *)(this + 1);
    do
    {
      v12 = a5 - v5;
      v13 = MachVMMemory::PageSize(this, target_task);
      if (v13 && v13 + a3 / v13 * v13 - a3 < v12)
        v12 = v13 + a3 / v13 * v13 - a3;
      *((_DWORD *)this + 2) = mach_vm_write(target_task, a3, (vm_offset_t)v7, v12);
      *((_DWORD *)this + 3) = 1;
      if (*((char *)this + 39) < 0)
      {
        *(_BYTE *)this[2] = 0;
        this[3] = 0;
      }
      else
      {
        *((_BYTE *)this + 16) = 0;
        *((_BYTE *)this + 39) = 0;
      }
      if (DNBLogCheckLogBit(32) || *(_DWORD *)v11)
        DNBError::LogThreaded(v11, "::mach_vm_write(task = 0x%4.4x, addr = 0x%8.8llx, data = %8.8p, dataCnt = %u)", target_task, a3, v7, v12);
      value = 6;
      *((_DWORD *)this + 2) = vm_machine_attribute(target_task, a3, v12, 1u, &value);
      *((_DWORD *)this + 3) = 1;
      if (*((char *)this + 39) < 0)
      {
        *(_BYTE *)this[2] = 0;
        this[3] = 0;
      }
      else
      {
        *((_BYTE *)this + 16) = 0;
        *((_BYTE *)this + 39) = 0;
      }
      if (DNBLogCheckLogBit(32) || *(_DWORD *)v11)
      {
        DNBError::LogThreaded(v11, "::vm_machine_attribute(task = 0x%4.4x, addr = 0x%8.8llx, size = %u, attr = MATTR_CACHE, mattr_value => MATTR_VAL_CACHE_FLUSH)", target_task, a3, v12);
        if (*(_DWORD *)v11)
          break;
      }
      v5 += v12;
      a3 += v12;
      v7 += v12;
    }
    while (v5 < a5);
  }
  return v5;
}

void MachVMRegion::MachVMRegion(MachVMRegion *this, int a2)
{
  *(_DWORD *)this = a2;
  *((_QWORD *)this + 1) = -1;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = xmmword_1000520C0;
  *((_DWORD *)this + 16) = -1;
  *((_DWORD *)this + 29) = 0;
  *(_OWORD *)((char *)this + 120) = xmmword_1000520C0;
  *(_OWORD *)((char *)this + 68) = 0u;
  *(_OWORD *)((char *)this + 84) = 0u;
  *(_OWORD *)((char *)this + 100) = 0u;
}

void MachVMRegion::~MachVMRegion(MachVMRegion *this)
{
  int v2;

  MachVMRegion::RestoreProtections(this);
  *((_QWORD *)this + 1) = -1;
  *((_QWORD *)this + 2) = 0;
  if (*((char *)this + 47) < 0)
  {
    **((_BYTE **)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
    v2 = *((char *)this + 47);
    *((_OWORD *)this + 3) = xmmword_1000520C0;
    *((_DWORD *)this + 16) = -1;
    *(_OWORD *)((char *)this + 68) = 0u;
    *(_OWORD *)((char *)this + 84) = 0u;
    *(_OWORD *)((char *)this + 100) = 0u;
    *((_DWORD *)this + 29) = 0;
    *(_OWORD *)((char *)this + 120) = xmmword_1000520C0;
    if (v2 < 0)
      operator delete(*((void **)this + 3));
  }
  else
  {
    *((_BYTE *)this + 24) = 0;
    *((_BYTE *)this + 47) = 0;
    *((_OWORD *)this + 3) = xmmword_1000520C0;
    *((_DWORD *)this + 16) = -1;
    *(_OWORD *)((char *)this + 68) = 0u;
    *(_OWORD *)((char *)this + 84) = 0u;
    *(_OWORD *)((char *)this + 100) = 0u;
    *((_DWORD *)this + 29) = 0;
    *(_OWORD *)((char *)this + 120) = xmmword_1000520C0;
  }
}

uint64_t MachVMRegion::RestoreProtections(MachVMRegion *this)
{
  vm_prot_t v2;
  mach_vm_size_t v3;

  v2 = *((_DWORD *)this + 17);
  if (*((_DWORD *)this + 29) == v2 || (v3 = *((_QWORD *)this + 16)) == 0)
  {
    *((_QWORD *)this + 2) = 0;
    if (*((char *)this + 47) < 0)
    {
      **((_BYTE **)this + 3) = 0;
      *((_QWORD *)this + 4) = 0;
    }
    else
    {
      *((_BYTE *)this + 24) = 0;
      *((_BYTE *)this + 47) = 0;
    }
  }
  else
  {
    *((_DWORD *)this + 4) = mach_vm_protect(*(_DWORD *)this, *((_QWORD *)this + 15), v3, 0, v2);
    *((_DWORD *)this + 5) = 1;
    if (*((char *)this + 47) < 0)
    {
      **((_BYTE **)this + 3) = 0;
      *((_QWORD *)this + 4) = 0;
    }
    else
    {
      *((_BYTE *)this + 24) = 0;
      *((_BYTE *)this + 47) = 0;
    }
    if (DNBLogCheckLogBit(256) || *((_DWORD *)this + 4))
    {
      DNBError::LogThreaded((MachVMRegion *)((char *)this + 16), "::mach_vm_protect(task = 0x%4.4x, addr = 0x%8.8llx, size = %llu, set_max = %i, prot = %u)", *(_DWORD *)this, *((_QWORD *)this + 15), *((_QWORD *)this + 16), 0, *((_DWORD *)this + 17));
      if (*((_DWORD *)this + 4))
        return 0;
    }
    *(_OWORD *)((char *)this + 120) = xmmword_1000520C0;
    *((_DWORD *)this + 29) = *((_DWORD *)this + 17);
  }
  return 1;
}

BOOL MachVMRegion::SetProtections(MachVMRegion *this, mach_vm_address_t address, mach_vm_size_t a3, vm_prot_t new_protection)
{
  mach_vm_address_t v4;
  uint64_t v7;
  mach_vm_size_t v8;
  _BOOL8 result;
  _DWORD *v11;

  v4 = *((_QWORD *)this + 6);
  if (v4 > address)
    return 0;
  v7 = *((_QWORD *)this + 7);
  if (v7 + v4 <= address)
    return 0;
  if (v4 - address + v7 >= a3)
    v8 = a3;
  else
    v8 = v4 - address + v7;
  if (!v8)
  {
    result = DNBLogEnabledForAny(257);
    if (!result)
      return result;
    _DNBLogThreaded("%s: Zero size for task 0x%4.4x at address 0x%8.8llx) ", "SetProtections", *(_DWORD *)this, address);
    return 0;
  }
  if ((*((_DWORD *)this + 29) & 7) != new_protection)
  {
    *((_DWORD *)this + 4) = mach_vm_protect(*(_DWORD *)this, address, v8, 0, new_protection);
    *((_DWORD *)this + 5) = 1;
    v11 = (_DWORD *)((char *)this + 16);
    if (*((char *)this + 47) < 0)
    {
      **((_BYTE **)this + 3) = 0;
      *((_QWORD *)this + 4) = 0;
    }
    else
    {
      *((_BYTE *)this + 24) = 0;
      *((_BYTE *)this + 47) = 0;
    }
    if (DNBLogCheckLogBit(256))
      DNBError::LogThreaded((MachVMRegion *)((char *)this + 16), "::mach_vm_protect(task = 0x%4.4x, addr = 0x%8.8llx, size = %llu, set_max = %i, prot = %u)", *(_DWORD *)this, address, v8, 0, new_protection);
    if (!*v11
      || ((*((_DWORD *)this + 4) = mach_vm_protect(*(_DWORD *)this, address, v8, 0, new_protection | 0x10),
           *((_DWORD *)this + 5) = 1,
           *((char *)this + 47) < 0)
        ? (**((_BYTE **)this + 3) = 0, *((_QWORD *)this + 4) = 0)
        : (*((_BYTE *)this + 24) = 0, *((_BYTE *)this + 47) = 0),
          !DNBLogCheckLogBit(256) && !*v11
       || (DNBError::LogThreaded((MachVMRegion *)((char *)this + 16), "::mach_vm_protect(task = 0x%4.4x, addr = 0x%8.8llx, size = %llu, set_max = %i, prot = %u)", *(_DWORD *)this, address, v8, 0, new_protection | 0x10), !*((_DWORD *)this + 4))))
    {
      *((_DWORD *)this + 29) = new_protection;
      result = 1;
      *((_QWORD *)this + 15) = address;
      *((_QWORD *)this + 16) = v8;
      return result;
    }
    return 0;
  }
  if (DNBLogEnabledForAny(257))
    _DNBLogThreaded("MachVMRegion::%s: protections (%u) already sufficient for task 0x%4.4x at address 0x%8.8llx) ", "SetProtections", new_protection, *(_DWORD *)this, address);
  return 1;
}

BOOL MachVMRegion::GetRegionForAddress(MachVMRegion *this, unint64_t a2)
{
  _BOOL4 v4;
  kern_return_t v5;
  kern_return_t v6;
  _BOOL4 v7;
  unint64_t v8;
  mach_msg_type_number_t infoCnt;

  MachVMRegion::RestoreProtections(this);
  *((_QWORD *)this + 1) = -1;
  if (*((char *)this + 47) < 0)
  {
    **((_BYTE **)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
    v4 = *((char *)this + 47) < 0;
  }
  else
  {
    v4 = 0;
    *((_BYTE *)this + 24) = 0;
    *((_BYTE *)this + 47) = 0;
  }
  *((_QWORD *)this + 7) = 0;
  *(_OWORD *)((char *)this + 68) = 0u;
  *(_OWORD *)((char *)this + 84) = 0u;
  *(_OWORD *)((char *)this + 100) = 0u;
  *((_DWORD *)this + 29) = 0;
  *(_OWORD *)((char *)this + 120) = xmmword_1000520C0;
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    **((_BYTE **)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
  }
  else
  {
    *((_BYTE *)this + 24) = 0;
    *((_BYTE *)this + 47) = 0;
  }
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 6) = a2;
  *((_DWORD *)this + 16) = 1024;
  infoCnt = 12;
  v5 = mach_vm_region_recurse(*(_DWORD *)this, (mach_vm_address_t *)this + 6, (mach_vm_size_t *)this + 7, (natural_t *)this + 16, (vm_region_recurse_info_t)this + 17, &infoCnt);
  *((_DWORD *)this + 4) = v5;
  *((_DWORD *)this + 5) = 1;
  if (*((char *)this + 47) < 0)
  {
    **((_BYTE **)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
    v6 = *((_DWORD *)this + 4);
  }
  else
  {
    v6 = v5;
    *((_BYTE *)this + 24) = 0;
    *((_BYTE *)this + 47) = 0;
  }
  v7 = DNBLogCheckLogBit(256);
  if (v7 || v6)
  {
    DNBError::LogThreaded((MachVMRegion *)((char *)this + 16), "::mach_vm_region_recurse(task = 0x%4.4x, address => 0x%8.8llx, size => %llu, nesting_depth => %d, info => %p, infoCnt => %d) addr = 0x%8.8llx ", *(_DWORD *)this, *((_QWORD *)this + 6), *((_QWORD *)this + 7), *((_DWORD *)this + 16), (char *)this + 68, infoCnt, a2);
    if (v6)
      return 0;
  }
  if (v7 && DNBLogEnabled())
    _DNBLogThreaded("info = { prot = %u, max_prot = %u, inheritance = 0x%8.8x, offset = 0x%8.8llx, user_tag = 0x%8.8x, ref_count = %u, shadow_depth = %u, ext_pager = %u, share_mode = %u, is_submap = %d, behavior = %d, object_id = 0x%8.8x, user_wired_count = 0x%4.4x }", *((_DWORD *)this + 17), *((_DWORD *)this + 18), *((_DWORD *)this + 19), *((_QWORD *)this + 10), *((_DWORD *)this + 22), *((_DWORD *)this + 23), *((unsigned __int16 *)this + 48), *((unsigned __int8 *)this + 98), *((unsigned __int8 *)this + 99), *((_DWORD *)this + 25), *((_DWORD *)this + 26), *((_DWORD *)this + 27), *((unsigned __int16 *)this + 56));
  *((_DWORD *)this + 29) = *((_DWORD *)this + 17);
  v8 = *((_QWORD *)this + 6);
  return v8 <= a2 && *((_QWORD *)this + 7) + v8 > a2;
}

uint64_t MachVMRegion::GetDNBPermissions(MachVMRegion *this)
{
  if (*((_QWORD *)this + 1) == -1 || *((_QWORD *)this + 6) == -1 || !*((_QWORD *)this + 7))
    return 0;
  else
    return *((_DWORD *)this + 17) & 4 | (__rbit32(*((_DWORD *)this + 17)) >> 30);
}

void MachVMRegion::GetMemoryTypes(MachVMRegion *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  char *v5;
  int v6;
  const char *v7;
  unint64_t v8;
  __int128 v9;
  char *v10;
  int v11;
  int v12;
  unint64_t v14;
  __int128 v15;
  char *v16;
  int v17;
  int v18;
  unint64_t v19;
  __int128 v20;
  char *v21;
  int v22;
  unint64_t v23;
  __int128 v24;
  char *v25;
  int v26;
  unint64_t v27;
  __int128 v28;
  char *v29;
  int v30;
  void *__p[2];
  uint64_t v32;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v4 = *((_DWORD *)this + 22);
  if (v4 == 30)
  {
    if (*((_DWORD *)this + 17))
    {
      HIBYTE(v32) = 5;
      strcpy((char *)__p, "stack");
    }
    else
    {
      HIBYTE(v32) = 11;
      strcpy((char *)__p, "stack-guard");
    }
    v5 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a2, (uint64_t)__p);
    v6 = SHIBYTE(v32);
    *(_QWORD *)(a2 + 8) = v5;
    if (v6 < 0)
      operator delete(__p[0]);
    v4 = *((_DWORD *)this + 22);
  }
  if (v4 == 1)
  {
    if (*((_DWORD *)this + 17))
    {
      if (*((_BYTE *)this + 99) == 3)
      {
        HIBYTE(v32) = 15;
        v7 = "malloc-reserved";
      }
      else
      {
        HIBYTE(v32) = 15;
        v7 = "malloc-metadata";
      }
      __p[0] = *(void **)v7;
      *(void **)((char *)__p + 7) = *(void **)(v7 + 7);
      HIBYTE(__p[1]) = 0;
    }
    else
    {
      HIBYTE(v32) = 12;
      strcpy((char *)__p, "malloc-guard");
    }
    v8 = *(_QWORD *)(a2 + 8);
    if (v8 >= *(_QWORD *)(a2 + 16))
    {
      v10 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a2, (uint64_t)__p);
      v11 = SHIBYTE(v32);
      *(_QWORD *)(a2 + 8) = v10;
      if (v11 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v9 = *(_OWORD *)__p;
      *(_QWORD *)(v8 + 16) = v32;
      *(_OWORD *)v8 = v9;
      *(_QWORD *)(a2 + 8) = v8 + 24;
    }
  }
  v12 = *((_DWORD *)this + 22);
  if ((v12 - 2) < 8 || v12 == 11)
  {
    HIBYTE(v32) = 4;
    strcpy((char *)__p, "heap");
    v14 = *(_QWORD *)(a2 + 8);
    if (v14 >= *(_QWORD *)(a2 + 16))
    {
      v16 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a2, (uint64_t)__p);
      v17 = SHIBYTE(v32);
      *(_QWORD *)(a2 + 8) = v16;
      if (v17 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v15 = *(_OWORD *)__p;
      *(_QWORD *)(v14 + 16) = v32;
      *(_OWORD *)v14 = v15;
      *(_QWORD *)(a2 + 8) = v14 + 24;
    }
    v18 = *((_DWORD *)this + 22);
    if (v18 == 7)
    {
      HIBYTE(v32) = 11;
      strcpy((char *)__p, "malloc-tiny");
      v19 = *(_QWORD *)(a2 + 8);
      if (v19 >= *(_QWORD *)(a2 + 16))
      {
        v21 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a2, (uint64_t)__p);
        v22 = SHIBYTE(v32);
        *(_QWORD *)(a2 + 8) = v21;
        if (v22 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v20 = *(_OWORD *)__p;
        *(_QWORD *)(v19 + 16) = v32;
        *(_OWORD *)v19 = v20;
        *(_QWORD *)(a2 + 8) = v19 + 24;
      }
      v18 = *((_DWORD *)this + 22);
      if (v18 != 3)
      {
LABEL_30:
        if (v18 != 2)
          return;
        goto LABEL_42;
      }
    }
    else if (v18 != 3)
    {
      goto LABEL_30;
    }
    HIBYTE(v32) = 12;
    strcpy((char *)__p, "malloc-large");
    v23 = *(_QWORD *)(a2 + 8);
    if (v23 >= *(_QWORD *)(a2 + 16))
    {
      v25 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a2, (uint64_t)__p);
      v26 = SHIBYTE(v32);
      *(_QWORD *)(a2 + 8) = v25;
      if (v26 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v24 = *(_OWORD *)__p;
      *(_QWORD *)(v23 + 16) = v32;
      *(_OWORD *)v23 = v24;
      *(_QWORD *)(a2 + 8) = v23 + 24;
    }
    if (*((_DWORD *)this + 22) != 2)
      return;
LABEL_42:
    HIBYTE(v32) = 12;
    strcpy((char *)__p, "malloc-small");
    v27 = *(_QWORD *)(a2 + 8);
    if (v27 >= *(_QWORD *)(a2 + 16))
    {
      v29 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a2, (uint64_t)__p);
      v30 = SHIBYTE(v32);
      *(_QWORD *)(a2 + 8) = v29;
      if (v30 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v28 = *(_OWORD *)__p;
      *(_QWORD *)(v27 + 16) = v32;
      *(_OWORD *)v27 = v28;
      *(_QWORD *)(a2 + 8) = v27 + 24;
    }
  }
}

uint64_t OsLogger::GetLogFunction(OsLogger *this)
{
  return 0;
}

double DNBArchMachARM64::Initialize(DNBArchMachARM64 *this)
{
  double result;
  _OWORD v2[2];
  _OWORD v3[2];

  v3[0] = unk_100061638;
  v3[1] = *(_OWORD *)&off_100061648;
  DNBArchProtocol::RegisterArchPlugin((unsigned int *)v3);
  v2[0] = unk_100061658;
  v2[1] = *(_OWORD *)&off_100061668;
  *(_QWORD *)&result = DNBArchProtocol::RegisterArchPlugin((unsigned int *)v2).n128_u64[0];
  return result;
}

char *DNBArchMachARM64::Create(DNBArchMachARM64 *this, MachThread *a2)
{
  char *v3;
  __int128 v4;
  uint64_t v5;
  unint64_t v6;

  v3 = (char *)operator new(0x1C80uLL, (std::align_val_t)0x40uLL);
  *((_DWORD *)v3 + 2) = 0;
  *(_QWORD *)v3 = off_100065C48;
  *((_QWORD *)v3 + 2) = this;
  *((_QWORD *)v3 + 829) = -1;
  *(_QWORD *)&v4 = -1;
  *((_QWORD *)&v4 + 1) = -1;
  *(_OWORD *)(v3 + 6600) = v4;
  *(_OWORD *)(v3 + 6616) = v4;
  *(_OWORD *)(v3 + 7176) = 0u;
  *(_OWORD *)(v3 + 7192) = 0u;
  *(_OWORD *)(v3 + 7208) = 0u;
  *((_DWORD *)v3 + 1806) = -1;
  *((_WORD *)v3 + 3614) = 0;
  *((_QWORD *)v3 + 906) = 0;
  *((_QWORD *)v3 + 905) = 0;
  *((_QWORD *)v3 + 904) = v3 + 7240;
  std::vector<DNBArchMachARM64::disabled_watchpoint>::__append((void **)v3 + 897, 0x10uLL);
  v5 = *((_QWORD *)v3 + 900);
  v6 = *((_QWORD *)v3 + 901) - v5;
  if (v6 > 0xFF)
  {
    if (v6 != 256)
      *((_QWORD *)v3 + 901) = v5 + 256;
  }
  else
  {
    std::vector<DNBArchMachARM64::disabled_watchpoint>::__append((void **)v3 + 900, 16 - (v6 >> 4));
  }
  bzero(v3 + 6656, 0x208uLL);
  return v3;
}

char **DNBArchMachARM64::GetRegisterSetInfo(DNBArchMachARM64 *this, unint64_t *a2)
{
  char **result;
  uint64_t v4;

  if (!(_DWORD)a2)
    goto LABEL_6;
  if (CPUHasAMX(void)::g_has_avx == -1)
  {
    CPUHasAMX(void)::g_has_avx = (_get_cpu_capabilities() & 0x78000000) != 0;
    if (CPUHasAMX(void)::g_has_avx == 1)
      goto LABEL_4;
LABEL_6:
    result = &DNBArchMachARM64::g_reg_sets;
    v4 = 4;
    goto LABEL_7;
  }
  if (CPUHasAMX(void)::g_has_avx != 1)
    goto LABEL_6;
LABEL_4:
  result = &DNBArchMachARM64::g_reg_sets_with_amx;
  v4 = 5;
LABEL_7:
  *(_QWORD *)this = v4;
  return result;
}

void *DNBArchMachARM64::SoftwareBreakpointOpcode(DNBArchMachARM64 *this)
{
  return &g_arm64_breakpoint_opcode;
}

uint64_t DNBArchMachARM64::GetPC(DNBArchMachARM64 *this, uint64_t a2)
{
  if (!DNBArchMachARM64::GetGPRState(this, 0))
    return *((_QWORD *)this + 40);
  return a2;
}

uint64_t DNBArchMachARM64::GetGPRState(DNBArchMachARM64 *this, char a2)
{
  uint64_t state;
  kern_return_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  natural_t out_state[68];
  mach_msg_type_number_t out_stateCnt;
  mach_msg_type_number_t old_stateCnt;

  if ((a2 & 1) == 0 && !*((_DWORD *)this + 1650))
    return 0;
  old_stateCnt = 68;
  state = thread_get_state(*(_DWORD *)(*((_QWORD *)this + 2) + 16), 6, (thread_state_t)this + 16, &old_stateCnt);
  if (!(_DWORD)state)
  {
    out_stateCnt = 68;
    v4 = thread_convert_thread_state(*(_DWORD *)(*((_QWORD *)this + 2) + 16), 1, 6, (thread_state_t)this + 16, old_stateCnt, out_state, &out_stateCnt);
    if (DNBLogEnabledForAny(4))
      _DNBLogThreaded("converted register values to debugserver's keys, return value %d, old count %d new count %d", v4, old_stateCnt, out_stateCnt);
    memcpy((char *)this + 64, out_state, 4 * old_stateCnt);
  }
  if (DNBLogEnabledForAny(4))
  {
    if (DNBLogEnabled())
      _DNBLogThreaded("thread_get_state signed regs \n   fp=%16.16llx\n   lr=%16.16llx\n   sp=%16.16llx\n   pc=%16.16llx", *((_QWORD *)this + 37), *((_QWORD *)this + 38), *((_QWORD *)this + 39), *((_QWORD *)this + 40));
    v5 = *((_QWORD *)this + 37);
    v6 = *((_QWORD *)this + 38);
    v7 = *((_QWORD *)this + 39);
    v8 = *((_QWORD *)this + 40);
    if (DNBLogEnabled())
    {
      v10 = *(_OWORD *)((char *)this + 248);
      _DNBLogThreaded("thread_get_state(0x%4.4x, %u, &gpr, %u) => 0x%8.8x (count = %u) regs\n   x0=%16.16llx\n   x1=%16.16llx\n   x2=%16.16llx\n   x3=%16.16llx\n   x4=%16.16llx\n   x5=%16.16llx\n   x6=%16.16llx\n   x7=%16.16llx\n   x8=%16.16llx\n   x9=%16.16llx\n  x10=%16.16llx\n  x11=%16.16llx\n  x12=%16.16llx\n  x13=%16.16llx\n  x14=%16.16llx\n  x15=%16.16llx\n  x16=%16.16llx\n  x17=%16.16llx\n"
        "  x18=%16.16llx\n"
        "  x19=%16.16llx\n"
        "  x20=%16.16llx\n"
        "  x21=%16.16llx\n"
        "  x22=%16.16llx\n"
        "  x23=%16.16llx\n"
        "  x24=%16.16llx\n"
        "  x25=%16.16llx\n"
        "  x26=%16.16llx\n"
        "  x27=%16.16llx\n"
        "  x28=%16.16llx\n"
        "   fp=%16.16llx\n"
        "   lr=%16.16llx\n"
        "   sp=%16.16llx\n"
        "   pc=%16.16llx\n"
        " cpsr=%8.8x",
        *(_DWORD *)(*((_QWORD *)this + 2) + 16),
        1,
        68,
        state,
        old_stateCnt,
        *((_QWORD *)this + 8),
        *((_QWORD *)this + 9),
        *((_QWORD *)this + 10),
        *((_QWORD *)this + 11),
        *((_QWORD *)this + 12),
        *((_QWORD *)this + 13),
        *((_QWORD *)this + 14),
        *((_QWORD *)this + 15),
        *((_QWORD *)this + 16),
        *((_QWORD *)this + 17),
        *((_QWORD *)this + 8),
        *((_QWORD *)this + 19),
        *((_QWORD *)this + 20),
        *((_QWORD *)this + 21),
        *((_QWORD *)this + 22),
        *((_QWORD *)this + 23),
        *((_QWORD *)this + 24),
        *((_QWORD *)this + 25),
        *((_QWORD *)this + 26),
        *((_QWORD *)this + 27),
        *((_QWORD *)this + 28),
        *((_QWORD *)this + 29),
        *((_QWORD *)this + 30),
        (_QWORD)v10,
        *((_QWORD *)&v10 + 1),
        *((_QWORD *)this + 33),
        *((_QWORD *)this + 34),
        *((_QWORD *)this + 35),
        *((_QWORD *)this + 36),
        v5,
        v6,
        v7,
        v8,
        *((_DWORD *)this + 82));
    }
  }
  *((_DWORD *)this + 1650) = state;
  return state;
}

BOOL DNBArchMachARM64::SetPC(DNBArchMachARM64 *this, uint64_t a2)
{
  int GPRState;
  kern_return_t v5;
  natural_t __dst[69];
  mach_msg_type_number_t out_stateCnt;

  GPRState = DNBArchMachARM64::GetGPRState(this, 0);
  if (!GPRState)
  {
    *((_QWORD *)this + 40) = a2;
    out_stateCnt = 68;
    memcpy(__dst, (char *)this + 64, 0x110uLL);
    v5 = thread_convert_thread_state(*(_DWORD *)(*((_QWORD *)this + 2) + 16), 2, 6, (thread_state_t)this + 16, 0x44u, __dst, &out_stateCnt);
    if (DNBLogEnabledForAny(4))
      _DNBLogThreaded("converted register values to inferior's keys, return value %d, count %d", v5, out_stateCnt);
    GPRState = thread_set_state(*(_DWORD *)(*((_QWORD *)this + 2) + 16), 6, __dst, 0x44u);
    *((_DWORD *)this + 1651) = GPRState;
    *((_DWORD *)this + 1650) = -1;
  }
  return GPRState == 0;
}

uint64_t DNBArchMachARM64::GetSP(DNBArchMachARM64 *this, uint64_t a2)
{
  if (!DNBArchMachARM64::GetGPRState(this, 0))
    return *((_QWORD *)this + 39);
  return a2;
}

uint64_t DNBArchMachARM64::GetVFPState(DNBArchMachARM64 *this, char a2)
{
  uint64_t state;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  mach_msg_type_number_t old_stateCnt;

  if ((a2 & 1) == 0 && !*((_DWORD *)this + 1652))
    return 0;
  old_stateCnt = 132;
  state = thread_get_state(*(_DWORD *)(*((_QWORD *)this + 2) + 16), 17, (thread_state_t)this + 84, &old_stateCnt);
  if (DNBLogEnabledForAny(4) && DNBLogEnabled())
  {
    v4 = *((_OWORD *)this + 21);
    v5 = *((_OWORD *)this + 22);
    v6 = *((_OWORD *)this + 23);
    v7 = *((_OWORD *)this + 24);
    v8 = *((_OWORD *)this + 25);
    v9 = *((_OWORD *)this + 26);
    v10 = *((_OWORD *)this + 27);
    v11 = *((_OWORD *)this + 28);
    v12 = *((_OWORD *)this + 29);
    v13 = *((_OWORD *)this + 30);
    v14 = *((_OWORD *)this + 31);
    v15 = *((_OWORD *)this + 32);
    v16 = *((_OWORD *)this + 45);
    v17 = *((_OWORD *)this + 46);
    v18 = *((_OWORD *)this + 47);
    v19 = *((_OWORD *)this + 48);
    v20 = *((_OWORD *)this + 49);
    v21 = *((_OWORD *)this + 50);
    v22 = *((_OWORD *)this + 51);
    _DNBLogThreaded("thread_get_state(0x%4.4x, %u, &vfp, %u) => 0x%8.8x (count = %u) regs\n   q0  = 0x%16.16llx%16.16llx\n   q1  = 0x%16.16llx%16.16llx\n   q2  = 0x%16.16llx%16.16llx\n   q3  = 0x%16.16llx%16.16llx\n   q4  = 0x%16.16llx%16.16llx\n   q5  = 0x%16.16llx%16.16llx\n   q6  = 0x%16.16llx%16.16llx\n   q7  = 0x%16.16llx%16.16llx\n   q8  = 0x%16.16llx%16.16llx\n   q9  = 0x%16.16llx%16.16llx\n   q10 = 0x%16.16llx%16.16llx\n   q11 = 0x%16.16llx%16.16llx\n   q12 = 0x%16.16llx%16.16llx\n   q13 = 0x%16.16llx%16.16llx\n   q14 = 0x%16.16llx%16.16llx\n   q15 = 0x%16.16llx%16.16llx\n   q16 = 0x%16.16llx%16.16llx\n   q17 = 0x%16.16llx%16.16llx\n"
      "   q18 = 0x%16.16llx%16.16llx\n"
      "   q19 = 0x%16.16llx%16.16llx\n"
      "   q20 = 0x%16.16llx%16.16llx\n"
      "   q21 = 0x%16.16llx%16.16llx\n"
      "   q22 = 0x%16.16llx%16.16llx\n"
      "   q23 = 0x%16.16llx%16.16llx\n"
      "   q24 = 0x%16.16llx%16.16llx\n"
      "   q25 = 0x%16.16llx%16.16llx\n"
      "   q26 = 0x%16.16llx%16.16llx\n"
      "   q27 = 0x%16.16llx%16.16llx\n"
      "   q28 = 0x%16.16llx%16.16llx\n"
      "   q29 = 0x%16.16llx%16.16llx\n"
      "   q30 = 0x%16.16llx%16.16llx\n"
      "   q31 = 0x%16.16llx%16.16llx\n"
      "  fpsr = 0x%8.8x\n"
      "  fpcr = 0x%8.8x\n"
      "\n",
      *(_DWORD *)(*((_QWORD *)this + 2) + 16),
      2,
      132,
      state,
      old_stateCnt,
      (_QWORD)v4,
      *((_QWORD *)&v4 + 1),
      (_QWORD)v5,
      *((_QWORD *)&v5 + 1),
      (_QWORD)v6,
      *((_QWORD *)&v6 + 1),
      (_QWORD)v7,
      *((_QWORD *)&v7 + 1),
      (_QWORD)v8,
      *((_QWORD *)&v8 + 1),
      (_QWORD)v9,
      *((_QWORD *)&v9 + 1),
      (_QWORD)v10,
      *((_QWORD *)&v10 + 1),
      (_QWORD)v11,
      *((_QWORD *)&v11 + 1),
      (_QWORD)v12,
      *((_QWORD *)&v12 + 1),
      (_QWORD)v13,
      *((_QWORD *)&v13 + 1),
      (_QWORD)v14,
      *((_QWORD *)&v14 + 1),
      (_QWORD)v15,
      *((_QWORD *)&v15 + 1),
      *((_QWORD *)this + 66),
      *((_QWORD *)this + 67),
      *((_QWORD *)this + 68),
      *((_QWORD *)this + 69),
      *((_QWORD *)this + 70),
      *((_QWORD *)this + 71),
      *((_QWORD *)this + 72),
      *((_QWORD *)this + 73),
      *((_QWORD *)this + 74),
      *((_QWORD *)this + 75),
      *((_QWORD *)this + 76),
      *((_QWORD *)this + 77),
      *((_QWORD *)this + 78),
      *((_QWORD *)this + 79),
      *((_QWORD *)this + 80),
      *((_QWORD *)this + 81),
      *((_QWORD *)this + 82),
      *((_QWORD *)this + 83),
      *((_QWORD *)this + 84),
      *((_QWORD *)this + 85),
      *((_QWORD *)this + 86),
      *((_QWORD *)this + 87),
      *((_QWORD *)this + 88),
      *((_QWORD *)this + 89),
      (_QWORD)v16,
      *((_QWORD *)&v16 + 1),
      (_QWORD)v17,
      *((_QWORD *)&v17 + 1),
      (_QWORD)v18,
      *((_QWORD *)&v18 + 1),
      (_QWORD)v19,
      *((_QWORD *)&v19 + 1),
      (_QWORD)v20,
      *((_QWORD *)&v20 + 1),
      (_QWORD)v21,
      *((_QWORD *)&v21 + 1),
      (_QWORD)v22,
      *((_QWORD *)&v22 + 1),
      *((_QWORD *)this + 104),
      *((_QWORD *)this + 105),
      *((_DWORD *)this + 212),
      *((_DWORD *)this + 213));
  }
  *((_DWORD *)this + 1652) = state;
  return state;
}

void DNBArchMachARM64::ThreadWillResume(DNBArchMachARM64 *this)
{
  char *v2;
  kern_return_t state;
  uint64_t v4;
  int v5;
  mach_msg_type_number_t old_stateCnt;

  v2 = (char *)this + 7228;
  if (MachThread::IsStepping(*((MachThread **)this + 2)))
    DNBArchMachARM64::EnableHardwareSingleStep((natural_t *)this, 1);
  if (*v2 && (*((_DWORD *)this + 1806) & 0x80000000) == 0)
  {
    old_stateCnt = 130;
    state = thread_get_state(*(_DWORD *)(*((_QWORD *)this + 2) + 16), 15, (thread_state_t)this + 1520, &old_stateCnt);
    v4 = *((unsigned int *)this + 1806);
    if (state || (*((_QWORD *)this + v4 + 808) & 1) != 0)
    {
      (*(void (**)(DNBArchMachARM64 *, uint64_t, _QWORD))(*(_QWORD *)this + 176))(this, v4, 0);
      if (DNBLogEnabledForAny(2048))
        _DNBLogThreaded("DNBArchMachARM64::ThreadWillResume() DisableHardwareWatchpoint(%d) called", *((_DWORD *)this + 1806));
      v5 = DNBArchMachARM64::EnableHardwareSingleStep((natural_t *)this, 1);
      v2[1] = v5 == 0;
      if (v5)
      {
        *v2 = 0;
        *((_DWORD *)this + 1806) = -1;
        if (DNBLogEnabledForAny(2048))
          _DNBLogThreaded("DNBArchMachARM64::ThreadWillResume() failed to enable single step");
      }
      else if (DNBLogEnabledForAny(2048))
      {
        _DNBLogThreaded("DNBArchMachARM64::ThreadWillResume() succeeded to enable single step");
      }
    }
    else
    {
      *v2 = 0;
      *((_DWORD *)this + 1806) = -1;
    }
  }
}

uint64_t DNBArchMachARM64::EnableHardwareSingleStep(natural_t *this, int a2)
{
  kern_return_t state;
  uint64_t v5;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v9;
  unsigned int GPRState;
  int v11;
  void *__p;
  uint64_t v13;
  uint64_t v14;
  mach_msg_type_number_t old_stateCnt;

  __p = 0;
  v13 = 0;
  v14 = 0;
  if (DNBLogEnabledForAny(4096))
    _DNBLogThreaded("%s( enable = %d)", "EnableHardwareSingleStep", a2);
  GPRState = DNBArchMachARM64::GetGPRState((DNBArchMachARM64 *)this, 0);
  v11 = 1;
  LOBYTE(__p) = 0;
  HIBYTE(v14) = 0;
  if (GPRState)
  {
    DNBError::LogThreaded((DNBError *)&GPRState, "%s: failed to read the GPR registers");
    goto LABEL_8;
  }
  old_stateCnt = 130;
  state = thread_get_state(*(_DWORD *)(*((_QWORD *)this + 2) + 16), 15, this + 1520, &old_stateCnt);
  GPRState = state;
  v11 = 1;
  if (SHIBYTE(v14) < 0)
  {
    *(_BYTE *)__p = 0;
    v13 = 0;
    if (GPRState)
      goto LABEL_7;
LABEL_12:
    v7 = *((_QWORD *)this + 40);
    v8 = DNBLogEnabledForAny(4096);
    if (a2)
    {
      if (v8)
        _DNBLogThreaded("%s: Setting MDSCR_EL1 Single Step bit at pc 0x%llx", "EnableHardwareSingleStep", v7);
      v9 = *((_QWORD *)this + 824) | 1;
    }
    else
    {
      if (v8)
        _DNBLogThreaded("%s: Clearing MDSCR_EL1 Single Step bit at pc 0x%llx", "EnableHardwareSingleStep", v7);
      v9 = *((_QWORD *)this + 824) & 0xFFFFFFFELL;
    }
    *((_QWORD *)this + 824) = v9;
    v5 = thread_set_state(*(_DWORD *)(*((_QWORD *)this + 2) + 16), 15, this + 1520, 0x82u);
    if (SHIBYTE(v14) < 0)
      goto LABEL_9;
    return v5;
  }
  LOBYTE(__p) = 0;
  HIBYTE(v14) = 0;
  if (!state)
    goto LABEL_12;
LABEL_7:
  DNBError::LogThreaded((DNBError *)&GPRState, "%s: failed to read the DBG registers");
LABEL_8:
  v5 = GPRState;
  if (SHIBYTE(v14) < 0)
LABEL_9:
    operator delete(__p);
  return v5;
}

uint64_t DNBArchMachARM64::NotifyException(DNBArchMachARM64 *this, MachException::Data *a2)
{
  _QWORD *v3;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int *v10;
  uint64_t v11;
  uint64_t v14;
  unint64_t v15;
  mach_vm_address_t v16;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  _QWORD *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _OWORD *v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  mach_msg_type_number_t old_stateCnt;

  if (*((_DWORD *)a2 + 2) != 6)
    return 0;
  v3 = (_QWORD *)*((_QWORD *)a2 + 2);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v3 != 16)
    return 0;
  if (*v3 == 1)
  {
    v15 = (*(uint64_t (**)(DNBArchMachARM64 *, uint64_t))(*(_QWORD *)this + 88))(this, -1);
    if (v15 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v16 = v15;
      if (!DNBBreakpointList::FindByAddress((DNBBreakpointList *)(**((_QWORD **)this + 2) + 1640), v15)
        && MachProcess::ReadMemory(**((MachProcess ***)this + 2), v16, 4uLL, (char *)&v39) == 4
        && (_DWORD)v39 == -734134272)
      {
        (*(void (**)(DNBArchMachARM64 *, mach_vm_address_t))(*(_QWORD *)this + 96))(this, v16 + 4);
      }
    }
    return 0;
  }
  if (*v3 != 258)
    return 0;
  v39 = v3[1];
  v5 = (*(uint64_t (**)(DNBArchMachARM64 *, uint64_t *))(*(_QWORD *)this + 184))(this, &v39);
  if (DNBLogEnabledForAny(2048))
    _DNBLogThreaded("DNBArchMachARM64::NotifyException watchpoint %d was hit on address 0x%llx", v5, v39);
  v6 = (*(uint64_t (**)(DNBArchMachARM64 *))(*(_QWORD *)this + 144))(this);
  if (v6)
  {
    v7 = 0;
    v8 = v6;
    v9 = (char *)this + 6464;
    v10 = LoHi;
    do
    {
      v11 = *v10;
      if (v7 != v11 && (_DWORD)v11 != 0 && (_DWORD)v11 == v5)
      {
        old_stateCnt = 130;
        if (!thread_get_state(*(_DWORD *)(*((_QWORD *)this + 2) + 16), 15, (thread_state_t)this + 1520, &old_stateCnt)&& v7 < (*(unsigned int (**)(DNBArchMachARM64 *))(*(_QWORD *)this + 144))(this)&& (*v9 & 1) != 0&& *((_QWORD *)v9 - 16) != -1)
        {
          old_stateCnt = 130;
          if (!thread_get_state(*(_DWORD *)(*((_QWORD *)this + 2) + 16), 15, (thread_state_t)this + 1520, &old_stateCnt)&& v7 < (*(unsigned int (**)(DNBArchMachARM64 *))(*(_QWORD *)this + 144))(this)&& (*v9 & 1) != 0)
          {
            v14 = *((_QWORD *)v9 - 16);
          }
          else
          {
            v14 = -1;
          }
          v39 = v14;
          if (DNBLogEnabledForAny(2048))
            _DNBLogThreaded("DNBArchMachARM64::NotifyException It is a linked watchpoint; rewritten to index %d addr 0x%llx",
              *v10,
              v39);
        }
      }
      ++v7;
      ++v10;
      v9 += 8;
    }
    while (v8 != v7);
  }
  if (v5 == -1)
    return 1;
  *((_BYTE *)this + 7228) = 1;
  *((_DWORD *)this + 1806) = v5;
  v18 = (char *)*((_QWORD *)a2 + 2);
  *((_QWORD *)v18 + 1) = v39;
  v19 = v5;
  v21 = (char *)*((_QWORD *)a2 + 3);
  v20 = *((_QWORD *)a2 + 4);
  if ((unint64_t)v21 >= v20)
  {
    v23 = (v21 - v18) >> 3;
    v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 61)
      abort();
    v25 = v20 - (_QWORD)v18;
    if (v25 >> 2 > v24)
      v24 = v25 >> 2;
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
      v26 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v26 = v24;
    if (v26)
    {
      if (v26 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v27 = operator new(8 * v26);
    }
    else
    {
      v27 = 0;
    }
    v28 = &v27[8 * v23];
    v29 = &v27[8 * v26];
    *v28 = v19;
    v22 = v28 + 1;
    if (v21 == v18)
    {
      *((_QWORD *)a2 + 2) = v28;
      *((_QWORD *)a2 + 3) = v22;
      *((_QWORD *)a2 + 4) = v29;
    }
    else
    {
      v30 = v21 - v18 - 8;
      if (v30 < 0x58)
        goto LABEL_65;
      if ((unint64_t)(v18 - v27) < 0x20)
        goto LABEL_65;
      v31 = (v30 >> 3) + 1;
      v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
      v33 = &v21[-v32];
      v28 = (_QWORD *)((char *)v28 - v32);
      v34 = &v27[v21 - v18 - 16];
      v35 = v21 - 16;
      v36 = v31 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v37 = *(_OWORD *)v35;
        *(v34 - 1) = *((_OWORD *)v35 - 1);
        *v34 = v37;
        v34 -= 2;
        v35 -= 32;
        v36 -= 4;
      }
      while (v36);
      v21 = v33;
      if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_65:
        do
        {
          v38 = *((_QWORD *)v21 - 1);
          v21 -= 8;
          *--v28 = v38;
        }
        while (v21 != v18);
      }
      *((_QWORD *)a2 + 2) = v28;
      *((_QWORD *)a2 + 3) = v22;
      *((_QWORD *)a2 + 4) = v29;
      if (!v18)
        goto LABEL_59;
    }
    operator delete(v18);
  }
  else
  {
    *(_QWORD *)v21 = v19;
    v22 = v21 + 8;
  }
LABEL_59:
  *((_QWORD *)a2 + 3) = v22;
  return 1;
}

BOOL DNBArchMachARM64::ThreadDidStop(DNBArchMachARM64 *this)
{
  _WORD *v2;
  uint64_t v3;

  v2 = (_WORD *)((char *)this + 7228);
  *((_DWORD *)this + 1650) = -1;
  *((_DWORD *)this + 1652) = -1;
  *((_DWORD *)this + 1654) = -1;
  *((_DWORD *)this + 1658) = -1;
  *((_DWORD *)this + 1656) = -1;
  if (*((_BYTE *)this + 7229))
  {
    if (DNBArchMachARM64::EnableHardwareSingleStep((natural_t *)this, 0))
    {
      if (DNBLogEnabled())
        _DNBLogError("internal error detected: m_watchpoint_resume_step_enabled is true but unable to disable single step!");
    }
    else if (!*(_BYTE *)v2 || (*((_DWORD *)this + 1806) & 0x80000000) != 0)
    {
      if (DNBLogEnabled())
        _DNBLogError("internal error detected: m_watchpoint_resume_step_enabled is true but (m_watchpoint_did_occur && m_watchpoint_hw_index >= 0) does not hold!");
    }
    else
    {
      (*(void (**)(DNBArchMachARM64 *))(*(_QWORD *)this + 224))(this);
      *v2 = 0;
      *((_DWORD *)this + 1806) = -1;
    }
  }
  v3 = 1;
  if (!DNBArchMachARM64::GetGPRState(this, 1) && MachThread::IsStepping(*((MachThread **)this + 2)))
    return DNBArchMachARM64::EnableHardwareSingleStep((natural_t *)this, 0) == 0;
  return v3;
}

uint64_t DNBArchMachARM64::NumSupportedHardwareWatchpoints(DNBArchMachARM64 *this)
{
  uint64_t result;
  int v2;
  size_t v3;

  result = DNBArchMachARM64::NumSupportedHardwareWatchpoints(void)::g_num_supported_hw_watchpoints;
  if (DNBArchMachARM64::NumSupportedHardwareWatchpoints(void)::g_num_supported_hw_watchpoints == -1)
  {
    DNBArchMachARM64::NumSupportedHardwareWatchpoints(void)::g_num_supported_hw_watchpoints = 0;
    v2 = 0;
    v3 = 4;
    if (!sysctlbyname("hw.optional.watchpoint", &v2, &v3, 0, 0))
    {
      DNBArchMachARM64::NumSupportedHardwareWatchpoints(void)::g_num_supported_hw_watchpoints = v2;
      if (DNBLogEnabledForAny(4))
        _DNBLogThreaded("hw.optional.watchpoint=%u", v2);
    }
    return DNBArchMachARM64::NumSupportedHardwareWatchpoints(void)::g_num_supported_hw_watchpoints;
  }
  return result;
}

uint64_t DNBArchMachARM64::NumSupportedHardwareBreakpoints(DNBArchMachARM64 *this)
{
  uint64_t result;
  int v2;
  size_t v3;

  result = DNBArchMachARM64::NumSupportedHardwareBreakpoints(void)::g_num_supported_hw_breakpoints;
  if (DNBArchMachARM64::NumSupportedHardwareBreakpoints(void)::g_num_supported_hw_breakpoints == -1)
  {
    DNBArchMachARM64::NumSupportedHardwareBreakpoints(void)::g_num_supported_hw_breakpoints = 0;
    v2 = 0;
    v3 = 4;
    if (!sysctlbyname("hw.optional.breakpoint", &v2, &v3, 0, 0))
    {
      DNBArchMachARM64::NumSupportedHardwareBreakpoints(void)::g_num_supported_hw_breakpoints = v2;
      if (DNBLogEnabledForAny(4))
        _DNBLogThreaded("hw.optional.breakpoint=%u", v2);
    }
    return DNBArchMachARM64::NumSupportedHardwareBreakpoints(void)::g_num_supported_hw_breakpoints;
  }
  return result;
}

uint64_t DNBArchMachARM64::EnableHardwareBreakpoint(DNBArchMachARM64 *this, unint64_t a2, uint64_t a3, int a4)
{
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t *v15;
  kern_return_t v16;
  kern_return_t v17;
  kern_return_t v18;
  mach_msg_type_number_t old_stateCnt;

  if (DNBLogEnabledForAny(2048))
    _DNBLogThreaded("DNBArchMachARM64::EnableHardwareBreakpoint(addr = 0x%8.8llx, size = %zu)", a2, a3);
  v8 = (*(uint64_t (**)(DNBArchMachARM64 *))(*(_QWORD *)this + 136))(this);
  v9 = a2 & 0xFFFFFFFFFFFFFFFELL;
  v10 = 103;
  if (a3 != 2)
  {
    v9 = a2;
    v10 = 0;
  }
  if (a3 == 4)
    v11 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  else
    v11 = v9;
  if (a3 == 4)
    v12 = 487;
  else
    v12 = v10;
  old_stateCnt = 130;
  if (thread_get_state(*(_DWORD *)(*((_QWORD *)this + 2) + 16), 15, (thread_state_t)this + 1520, &old_stateCnt))
    return 0xFFFFFFFFLL;
  if (!v8)
  {
LABEL_17:
    if (DNBLogEnabledForAny(2048))
      _DNBLogThreaded("DNBArchMachARM64::EnableHardwareBreakpoint(): All hardware resources (%u) are in use.", v8);
    return 0xFFFFFFFFLL;
  }
  v14 = 0;
  v15 = (uint64_t *)((char *)this + 6208);
  while ((*(_BYTE *)v15 & 1) != 0)
  {
    --v14;
    ++v15;
    if (-(uint64_t)v8 == v14)
      goto LABEL_17;
  }
  *(v15 - 16) = v11;
  *v15 = v12;
  if (DNBLogEnabledForAny(2048))
    _DNBLogThreaded("DNBArchMachARM64::EnableHardwareBreakpoint() adding breakpoint on address 0x%llx with control register value 0x%x", *(v15 - 16), *v15);
  v16 = thread_set_state(*(_DWORD *)(*((_QWORD *)this + 2) + 16), 15, (thread_state_t)this + 1520, 0x82u);
  if (a4)
  {
    v17 = task_set_state(*(_DWORD *)(**((_QWORD **)this + 2) + 120), 15, (thread_state_t)this + 1520, 0x82u);
    if (v17)
    {
      v18 = v17;
      if (DNBLogEnabledForAny(2048))
        _DNBLogThreaded("DNBArchMachARM64::SetDBGState failed to set debug control register state: 0x%8.8x.", v18);
    }
  }
  if (DNBLogEnabledForAny(2048))
    _DNBLogThreaded("DNBArchMachARM64::EnableHardwareBreakpoint() SetDBGState() => 0x%8.8x.", v16);
  if (v16)
    return 0xFFFFFFFFLL;
  return -v14;
}

void DNBArchMachARM64::AlignRequestedWatchpoint(DNBArchMachARM64 *this@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  _QWORD *v19;
  uint64_t v20[3];
  uint64_t v21[3];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  if (!a3)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  v7 = 8;
  if (a3 > 8)
    v7 = a3;
  v8 = 1 << -(char)__clz(v7 - 1);
  v9 = -v8 & a2;
  v10 = v9 + v8;
  if (v9 + v8 >= a3 + a2)
  {
    v19 = operator new(0x20uLL);
    a4[1] = v19 + 4;
    a4[2] = v19 + 4;
    *v19 = v9;
    v19[1] = a2;
    v19[2] = v8;
    v19[3] = a3;
    *a4 = v19;
    return;
  }
  DNBArchMachARM64::AlignRequestedWatchpoint(v21, this, a2, v10 - a2);
  DNBArchMachARM64::AlignRequestedWatchpoint(v20, this, v9 + v8, a3 - (v10 - a2));
  v12 = (void *)v21[0];
  v13 = (void *)v20[0];
  if (v21[1] - v21[0] == 32 && v20[1] - v20[0] == 32)
  {
    v14 = *(_OWORD *)(v21[0] + 16);
    v22 = *(_OWORD *)v21[0];
    v23 = v14;
    v15 = *(_OWORD *)(v20[0] + 16);
    v24 = *(_OWORD *)v20[0];
    v25 = v15;
    v16 = operator new(0x40uLL);
    a4[1] = v16 + 4;
    a4[2] = v16 + 4;
    v17 = v23;
    *v16 = v22;
    v16[1] = v17;
    v18 = v25;
    v16[2] = v24;
    v16[3] = v18;
    *a4 = v16;
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    if (!v13)
      goto LABEL_12;
  }
  operator delete(v13);
LABEL_12:
  if (v12)
    operator delete(v12);
}

uint64_t DNBArchMachARM64::EnableHardwareWatchpoint(DNBArchMachARM64 *this, unint64_t a2, unint64_t a3, unsigned int a4, unsigned int a5, uint64_t a6)
{
  _BOOL4 v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  char *v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  char *v41;
  unsigned int v42;
  unint64_t v44;
  char *v45;
  unint64_t v48;
  _OWORD v49[2];
  _OWORD v50[2];
  char *v51;
  char *v52;

  if (DNBLogEnabledForAny(2048))
    _DNBLogThreaded("DNBArchMachARM64::EnableHardwareWatchpoint(addr = 0x%8.8llx, size = %zu, read = %u, write = %u)", a2, a3, a4, a5);
  DNBArchMachARM64::AlignRequestedWatchpoint(this, a2, a3, &v51);
  v10 = DNBLogEnabledForAny(2048);
  v12 = v51;
  v11 = v52;
  if (v10)
    _DNBLogThreaded("DNBArchMachARM64::EnableHardwareWatchpoint() using %zu hardware watchpoints", (v52 - v51) >> 5);
  v13 = a5;
  v14 = 0xFFFFFFFFLL;
  if ((a4 | a5) != 1)
    goto LABEL_51;
  v15 = v11 - v12;
  if (v11 == v12)
    goto LABEL_51;
  if (v15 == 32)
  {
    v16 = *((_OWORD *)v12 + 1);
    if (*((_QWORD *)v12 + 2) > 8uLL)
    {
      v49[0] = *(_OWORD *)v12;
      v49[1] = v16;
      v14 = DNBArchMachARM64::SetMASKWatchpoint((uint64_t)this, v49, a4, a5, a6);
    }
    else
    {
      v50[0] = *(_OWORD *)v12;
      v50[1] = v16;
      v14 = DNBArchMachARM64::SetBASWatchpoint((uint64_t)this, (uint64_t *)v50, a4, a5, a6);
    }
    goto LABEL_52;
  }
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = v15 >> 5;
  v44 = v21;
  v45 = v12;
  if (v21 <= 1)
    v21 = 1;
  v48 = v21;
  v22 = a4;
  do
  {
    v23 = (*(uint64_t (**)(DNBArchMachARM64 *, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 160))(this, *(_QWORD *)&v12[32 * v17 + 8], *(_QWORD *)&v12[32 * v17 + 24], v22, v13, a6);
    if (v23 == -1)
      goto LABEL_14;
    v24 = v23;
    if (v20 < v19)
    {
      *(_DWORD *)v20 = v23;
      v20 += 4;
      goto LABEL_14;
    }
    v25 = (v20 - v18) >> 2;
    v26 = v25 + 1;
    if ((unint64_t)(v25 + 1) >> 62)
      abort();
    if ((v19 - v18) >> 1 > v26)
      v26 = (v19 - v18) >> 1;
    if ((unint64_t)(v19 - v18) >= 0x7FFFFFFFFFFFFFFCLL)
      v27 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v27 = v26;
    if (v27)
    {
      if (v27 >> 62)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v28 = operator new(4 * v27);
    }
    else
    {
      v28 = 0;
    }
    v29 = &v28[4 * v25];
    *(_DWORD *)v29 = v24;
    v30 = v29 + 4;
    if (v20 != v18)
    {
      v31 = v20 - v18 - 4;
      if (v31 >= 0xBC
        && (v32 = (v20 - 4 - v18) & 0xFFFFFFFFFFFFFFFCLL, &v28[v20 - v18 - 4 - v32] <= &v28[v20 - v18 - 4])
        && &v20[-v32 - 4] <= v20 - 4
        && (unint64_t)(v18 - v28) >= 0x20)
      {
        v35 = (v31 >> 2) + 1;
        v36 = 4 * (v35 & 0x7FFFFFFFFFFFFFF8);
        v33 = (unsigned int *)&v20[-v36];
        v29 -= v36;
        v37 = &v28[4 * v25 - 16];
        v38 = v20 - 16;
        v39 = v35 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v40 = *(_OWORD *)v38;
          *(v37 - 1) = *((_OWORD *)v38 - 1);
          *v37 = v40;
          v37 -= 2;
          v38 -= 32;
          v39 -= 8;
        }
        while (v39);
        v22 = a4;
        if (v35 == (v35 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_34:
          v19 = &v28[4 * v27];
          if (!v18)
            goto LABEL_37;
          goto LABEL_35;
        }
      }
      else
      {
        v33 = (unsigned int *)v20;
        v22 = a4;
      }
      do
      {
        v34 = *--v33;
        *((_DWORD *)v29 - 1) = v34;
        v29 -= 4;
      }
      while (v33 != (unsigned int *)v18);
      goto LABEL_34;
    }
    v22 = a4;
    v19 = &v28[4 * v27];
    if (!v18)
    {
LABEL_37:
      v20 = v30;
      goto LABEL_38;
    }
LABEL_35:
    v20 = v30;
    operator delete(v18);
LABEL_38:
    v18 = v29;
    v12 = v45;
    v13 = a5;
LABEL_14:
    ++v17;
  }
  while (v17 != v48);
  if (v44 == (v20 - v18) >> 2)
  {
    LoHi[*(unsigned int *)v18] = *((_DWORD *)v18 + 1);
    v14 = *(unsigned int *)v18;
    goto LABEL_50;
  }
  if (v18 != v20)
  {
    v41 = v18;
    do
    {
      v42 = *(_DWORD *)v41;
      v41 += 4;
      (*(void (**)(DNBArchMachARM64 *, _QWORD, uint64_t))(*(_QWORD *)this + 176))(this, v42, a6);
    }
    while (v41 != v20);
  }
  v14 = 0xFFFFFFFFLL;
  if (v18)
LABEL_50:
    operator delete(v18);
LABEL_51:
  if (v12)
LABEL_52:
    operator delete(v12);
  return v14;
}

uint64_t DNBArchMachARM64::SetBASWatchpoint(uint64_t a1, uint64_t *a2, int a3, int a4, int a5)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  kern_return_t v22;
  kern_return_t v23;
  kern_return_t v24;
  int v26;
  mach_msg_type_number_t old_stateCnt;

  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  v12 = *a2;
  v11 = a2[1];
  v13 = a2[3];
  v14 = 0xFFFFFFFFLL;
  old_stateCnt = 130;
  if (!thread_get_state(*(_DWORD *)(*(_QWORD *)(a1 + 16) + 16), 15, (thread_state_t)(a1 + 6080), &old_stateCnt))
  {
    v26 = a5;
    if (v10)
    {
      v15 = 0;
      while ((*(_QWORD *)(a1 + 6464 + 8 * v15) & 1) != 0)
      {
        if (v10 == ++v15)
          goto LABEL_9;
      }
    }
    else
    {
      LODWORD(v15) = 0;
    }
    if ((_DWORD)v15 == v10)
    {
LABEL_9:
      if (DNBLogEnabledForAny(2048))
        _DNBLogThreaded("DNBArchMachARM64::SetBASWatchpoint(): All hardware resources (%u) are in use.", v10);
      return 0xFFFFFFFFLL;
    }
    else
    {
      v16 = v11 - v12;
      v17 = ~(-1 << v13) << (v11 - v12);
      if (DNBLogEnabledForAny(2048))
        _DNBLogThreaded("DNBArchMachARM64::SetBASWatchpoint() set hardware register %d to BAS watchpoint aligned start address 0x%llx, watch region start offset %lld, number of bytes %zu", v15, v12, v16, v13);
      LoHi[v15] = 0;
      v18 = a1 + 8 * v15;
      *(_QWORD *)(v18 + 6336) = v12;
      if (a3)
        v19 = 8;
      else
        v19 = 0;
      v20 = v19 | (32 * v17);
      if (a4)
        v21 = 16;
      else
        v21 = 0;
      *(_QWORD *)(v18 + 6464) = v20 | v21 | 5u;
      if (DNBLogEnabledForAny(2048))
        _DNBLogThreaded("DNBArchMachARM64::SetBASWatchpoint() adding watchpoint on address 0x%llx with control register value 0x%x", *(_QWORD *)(v18 + 6336), *(_QWORD *)(v18 + 6464));
      v22 = thread_set_state(*(_DWORD *)(*(_QWORD *)(a1 + 16) + 16), 15, (thread_state_t)(a1 + 6080), 0x82u);
      if (v26)
      {
        v23 = task_set_state(*(_DWORD *)(**(_QWORD **)(a1 + 16) + 120), 15, (thread_state_t)(a1 + 6080), 0x82u);
        if (v23)
        {
          v24 = v23;
          if (DNBLogEnabledForAny(2048))
            _DNBLogThreaded("DNBArchMachARM64::SetDBGState failed to set debug control register state: 0x%8.8x.", v24);
        }
      }
      if (DNBLogEnabledForAny(2048))
        _DNBLogThreaded("DNBArchMachARM64::SetBASWatchpoint() SetDBGState() => 0x%8.8x.", v22);
      if (v22)
        return 0xFFFFFFFFLL;
      else
        return v15;
    }
  }
  return v14;
}

uint64_t DNBArchMachARM64::SetMASKWatchpoint(uint64_t a1, _QWORD *a2, int a3, int a4, int a5)
{
  int v10;
  uint64_t v12;
  uint8x8_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  kern_return_t v19;
  kern_return_t v20;
  kern_return_t v21;
  mach_msg_type_number_t old_stateCnt;

  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  old_stateCnt = 130;
  if (thread_get_state(*(_DWORD *)(*(_QWORD *)(a1 + 16) + 16), 15, (thread_state_t)(a1 + 6080), &old_stateCnt))
    return 0xFFFFFFFFLL;
  if (v10)
  {
    v12 = 0;
    while ((*(_QWORD *)(a1 + 6464 + 8 * v12) & 1) != 0)
    {
      if (v10 == ++v12)
        goto LABEL_11;
    }
  }
  else
  {
    LODWORD(v12) = 0;
  }
  if ((_DWORD)v12 == v10)
  {
LABEL_11:
    if (DNBLogEnabledForAny(2048))
      _DNBLogThreaded("DNBArchMachARM64::SetMASKWatchpoint(): All hardware resources (%u) are in use.", v10);
    return 0xFFFFFFFFLL;
  }
  if (DNBLogEnabledForAny(2048))
    _DNBLogThreaded("DNBArchMachARM64::SetMASKWatchpoint() set hardware register %d to MASK watchpoint aligned start address 0x%llx, aligned size %zu", v12, *a2, a2[2]);
  LoHi[v12] = 0;
  v13 = (uint8x8_t)vcnt_s8((int8x8_t)(a2[2] - 1));
  v13.i16[0] = vaddlv_u8(v13);
  v14 = *a2;
  v15 = a1 + 8 * v12;
  *(_QWORD *)(v15 + 6336) = v14;
  v16 = 8;
  if (!a3)
    v16 = 0;
  v17 = v16 | ((unint64_t)v13.u32[0] << 24);
  v18 = 16;
  if (!a4)
    v18 = 0;
  *(_QWORD *)(v15 + 6464) = v17 | v18 | 0x1FE5;
  if (DNBLogEnabledForAny(2048))
    _DNBLogThreaded("DNBArchMachARM64::SetMASKWatchpoint() adding watchpoint on address 0x%llx with control register value 0x%llx", *(_QWORD *)(v15 + 6336), *(_QWORD *)(v15 + 6464));
  v19 = thread_set_state(*(_DWORD *)(*(_QWORD *)(a1 + 16) + 16), 15, (thread_state_t)(a1 + 6080), 0x82u);
  if (a5)
  {
    v20 = task_set_state(*(_DWORD *)(**(_QWORD **)(a1 + 16) + 120), 15, (thread_state_t)(a1 + 6080), 0x82u);
    if (v20)
    {
      v21 = v20;
      if (DNBLogEnabledForAny(2048))
        _DNBLogThreaded("DNBArchMachARM64::SetDBGState failed to set debug control register state: 0x%8.8x.", v21);
    }
  }
  if (DNBLogEnabledForAny(2048))
    _DNBLogThreaded("DNBArchMachARM64::SetMASKWatchpoint() SetDBGState() => 0x%8.8x.", v19);
  if (v19)
    return 0xFFFFFFFFLL;
  else
    return v12;
}

uint64_t DNBArchMachARM64::ReenableHardwareWatchpoint(DNBArchMachARM64 *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = a2;
  if ((*(unsigned int (**)(DNBArchMachARM64 *))(*(_QWORD *)this + 144))(this) > a2
    && LoHi[v2])
  {
    result = (*(uint64_t (**)(DNBArchMachARM64 *, uint64_t))(*(_QWORD *)this + 232))(this, v2);
    if (!(_DWORD)result)
      return result;
    v2 = LoHi[v2];
  }
  return (*(uint64_t (**)(DNBArchMachARM64 *, uint64_t))(*(_QWORD *)this + 232))(this, v2);
}

BOOL DNBArchMachARM64::ReenableHardwareWatchpoint_helper(DNBArchMachARM64 *this, unsigned int a2)
{
  uint64_t v4;
  char *v5;
  mach_msg_type_number_t old_stateCnt;

  old_stateCnt = 130;
  if (thread_get_state(*(_DWORD *)(*((_QWORD *)this + 2) + 16), 15, (thread_state_t)this + 1520, &old_stateCnt)
    || (*(unsigned int (**)(DNBArchMachARM64 *))(*(_QWORD *)this + 144))(this) <= a2)
  {
    return 0;
  }
  v4 = *((_QWORD *)this + 897) + 16 * a2;
  v5 = (char *)this + 8 * a2;
  *((_QWORD *)v5 + 792) = *(_QWORD *)v4;
  *((_QWORD *)v5 + 808) = *(unsigned int *)(v4 + 8);
  if (DNBLogEnabledForAny(2048))
    _DNBLogThreaded("DNBArchMachARM64::ReenableHardwareWatchpoint_helper( %u) - WVR%u = 0x%8.8llx  WCR%u = 0x%8.8llx", a2, a2, *((_QWORD *)v5 + 792), a2, *((_QWORD *)v5 + 808));
  return thread_set_state(*(_DWORD *)(*((_QWORD *)this + 2) + 16), 15, (thread_state_t)this + 1520, 0x82u) == 0;
}

BOOL DNBArchMachARM64::DisableHardwareWatchpoint(DNBArchMachARM64 *this, unsigned int a2, int a3)
{
  unsigned int v4;
  _BOOL8 result;

  v4 = a2;
  if ((*(unsigned int (**)(DNBArchMachARM64 *))(*(_QWORD *)this + 144))(this) > a2 && LoHi[v4])
  {
    result = DNBArchMachARM64::DisableHardwareWatchpoint_helper(this, v4, a3);
    if (!(_DWORD)result)
      return result;
    v4 = LoHi[v4];
  }
  return DNBArchMachARM64::DisableHardwareWatchpoint_helper(this, v4, a3);
}

BOOL DNBArchMachARM64::DisableHardwareWatchpoint_helper(DNBArchMachARM64 *this, unsigned int a2, int a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  kern_return_t v9;
  kern_return_t v10;
  kern_return_t v11;
  mach_msg_type_number_t old_stateCnt;

  old_stateCnt = 130;
  if (thread_get_state(*(_DWORD *)(*((_QWORD *)this + 2) + 16), 15, (thread_state_t)this + 1520, &old_stateCnt)
    || (*(unsigned int (**)(DNBArchMachARM64 *))(*(_QWORD *)this + 144))(this) <= a2)
  {
    return 0;
  }
  v6 = (char *)this + 8 * a2;
  v7 = *((_QWORD *)this + 897) + 16 * a2;
  *(_QWORD *)v7 = *((_QWORD *)v6 + 792);
  v8 = *((_QWORD *)v6 + 808);
  *(_DWORD *)(v7 + 8) = v8;
  *((_QWORD *)v6 + 808) = v8 & 0xFFFFFFFFFFFFFFFELL;
  if (DNBLogEnabledForAny(2048))
    _DNBLogThreaded("DNBArchMachARM64::DisableHardwareWatchpoint( %u) - WVR%u = 0x%8.8llx  WCR%u = 0x%8.8llx", a2, a2, *((_QWORD *)v6 + 792), a2, *((_QWORD *)v6 + 808));
  v9 = thread_set_state(*(_DWORD *)(*((_QWORD *)this + 2) + 16), 15, (thread_state_t)this + 1520, 0x82u);
  if (a3)
  {
    v10 = task_set_state(*(_DWORD *)(**((_QWORD **)this + 2) + 120), 15, (thread_state_t)this + 1520, 0x82u);
    if (v10)
    {
      v11 = v10;
      if (DNBLogEnabledForAny(2048))
        _DNBLogThreaded("DNBArchMachARM64::SetDBGState failed to set debug control register state: 0x%8.8x.", v11);
    }
  }
  return v9 == 0;
}

BOOL DNBArchMachARM64::DisableHardwareBreakpoint(DNBArchMachARM64 *this, unsigned int a2, int a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  kern_return_t v10;
  kern_return_t v11;
  kern_return_t v12;
  mach_msg_type_number_t old_stateCnt;

  old_stateCnt = 130;
  v6 = (char *)this + 6080;
  if (thread_get_state(*(_DWORD *)(*((_QWORD *)this + 2) + 16), 15, (thread_state_t)this + 1520, &old_stateCnt)
    || (*(unsigned int (**)(DNBArchMachARM64 *))(*(_QWORD *)this + 136))(this) <= a2)
  {
    return 0;
  }
  v7 = 8 * a2;
  v8 = *((_QWORD *)this + 900) + 16 * a2;
  *(_QWORD *)v8 = *(_QWORD *)&v6[v7];
  v9 = (char *)this + v7;
  *(_DWORD *)(v8 + 8) = *(_QWORD *)((char *)this + v7 + 6208);
  *(_QWORD *)((char *)this + v7 + 6208) = 0;
  if (DNBLogEnabledForAny(2048))
    _DNBLogThreaded("DNBArchMachARM64::DisableHardwareBreakpoint( %u) - WVR%u = 0x%8.8llx  BCR%u = 0x%8.8llx", a2, a2, *(_QWORD *)&v6[8 * a2], a2, *((_QWORD *)v9 + 776));
  v10 = thread_set_state(*(_DWORD *)(*((_QWORD *)this + 2) + 16), 15, (thread_state_t)this + 1520, 0x82u);
  if (a3)
  {
    v11 = task_set_state(*(_DWORD *)(**((_QWORD **)this + 2) + 120), 15, (thread_state_t)this + 1520, 0x82u);
    if (v11)
    {
      v12 = v11;
      if (DNBLogEnabledForAny(2048))
        _DNBLogThreaded("DNBArchMachARM64::SetDBGState failed to set debug control register state: 0x%8.8x.", v12);
    }
  }
  return v10 == 0;
}

uint64_t DNBArchMachARM64::GetHardwareWatchpointHit(DNBArchMachARM64 *this, unint64_t *a2)
{
  kern_return_t state;
  uint64_t v5;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  const char *v14;
  uint64_t v15;
  mach_msg_type_number_t old_stateCnt;

  old_stateCnt = 130;
  state = thread_get_state(*(_DWORD *)(*((_QWORD *)this + 2) + 16), 15, (thread_state_t)this + 1520, &old_stateCnt);
  if (DNBLogEnabledForAny(2048))
    _DNBLogThreaded("DNBArchMachARM64::GetHardwareWatchpointHit() GetDBGState() => 0x%8.8x.", state);
  if (DNBLogEnabledForAny(2048))
    _DNBLogThreaded("DNBArchMachARM64::GetHardwareWatchpointHit() addr = 0x%llx", *a2);
  if (state)
    return 0xFFFFFFFFLL;
  v7 = (*(uint64_t (**)(DNBArchMachARM64 *))(*(_QWORD *)this + 144))(this);
  if (!v7)
    return 0xFFFFFFFFLL;
  v8 = (_QWORD *)((char *)this + 6464);
  v9 = -(uint64_t)v7;
  v10 = 792;
  while (1)
  {
    v11 = *(v8 - 16);
    if (DNBLogEnabledForAny(2048))
      _DNBLogThreaded("DNBArchImplARM64::GetHardwareWatchpointHit() slot: %u (addr = 0x%llx, WCR = 0x%llx)", v10 - 792, v11, *v8);
    v12 = *v8;
    if ((*v8 & 1) == 0)
      goto LABEL_12;
    v13 = BYTE3(v12) & 0x1F;
    if (DNBLogEnabledForAny(2048))
    {
      v14 = "is MASK watchpoint";
      if (!v13)
        v14 = "is BAS watchpoint";
      _DNBLogThreaded("DNBArchImplARM64::GetHardwareWatchpointHit() slot: %u %s", v10 - 792, v14);
    }
    if (!v13)
      break;
    if ((unint64_t)(v11 << 15) >> (v13 + 15) == *a2 << 15 >> (v13 + 15))
    {
      v5 = v10 - 792;
      if (DNBLogEnabledForAny(2048))
        _DNBLogThreaded("DNBArchImplARM64::GetHardwareWatchpointHit() slot: %u matched MASK ignoring %u low bits", v10 - 792, BYTE3(v12) & 0x1F);
      return v5;
    }
LABEL_12:
    ++v10;
    ++v8;
    if (v9 + v10 == 792)
      return 0xFFFFFFFFLL;
  }
  if (((*a2 ^ v11) & 0x1FFFFFFFFFFF8) != 0)
    goto LABEL_12;
  if ((v12 & 0x20) != 0)
  {
    v15 = 0;
  }
  else if ((v12 & 0x40) != 0)
  {
    v15 = 1;
  }
  else if ((v12 & 0x80) != 0)
  {
    v15 = 2;
  }
  else if ((v12 & 0x100) != 0)
  {
    v15 = 3;
  }
  else if ((v12 & 0x200) != 0)
  {
    v15 = 4;
  }
  else if ((v12 & 0x400) != 0)
  {
    v15 = 5;
  }
  else if ((v12 & 0x800) != 0)
  {
    v15 = 6;
  }
  else
  {
    v15 = 7;
    if ((v12 & 0x1000) == 0)
      v15 = 0xFFFFFFFFLL;
  }
  if (((v12 >> 5 >> (*a2 & 7)) & 1) == 0)
    goto LABEL_12;
  *a2 = v15 + v11;
  if (DNBLogEnabledForAny(2048))
    _DNBLogThreaded("DNBArchImplARM64::GetHardwareWatchpointHit() slot: %u matched BAS", v10 - 792);
  return v10 - 792;
}

unint64_t DNBArchMachARM64::GetRegisterValue(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v7;
  int v8;
  unint64_t result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t v22;
  unsigned int v23;

  v5 = a3;
  if ((_DWORD)a2 == -1)
  {
    if (a3 > 0xA)
      return 0;
    v5 = dword_1000520F8[a3];
    v7 = 1;
  }
  else
  {
    v7 = a2;
  }
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, v7, 0);
  result = 0;
  if (!v8)
  {
    result = MachThread::GetRegisterInfo(*(MachThread **)(a1 + 16), v7, v5);
    if (result)
    {
      *(_OWORD *)a4 = *(_OWORD *)result;
      v10 = *(_OWORD *)(result + 16);
      v11 = *(_OWORD *)(result + 32);
      v12 = *(_OWORD *)(result + 48);
      *(_QWORD *)(a4 + 64) = *(_QWORD *)(result + 64);
      *(_OWORD *)(a4 + 32) = v11;
      *(_OWORD *)(a4 + 48) = v12;
      *(_OWORD *)(a4 + 16) = v10;
      switch((int)v7)
      {
        case 1:
          if (v5 <= 0x20)
          {
            switch(v5)
            {
              case 0x1Du:
                v13 = *(_QWORD *)(a1 + 296);
                goto LABEL_40;
              case 0x1Eu:
                v13 = *(_QWORD *)(a1 + 304);
                goto LABEL_40;
              case 0x1Fu:
                v13 = *(_QWORD *)(a1 + 312);
                goto LABEL_40;
              case 0x20u:
                v13 = *(_QWORD *)(a1 + 320);
LABEL_40:
                v23 = 0;
                if (DNBGetAddressingBits(&v23))
                  v22 = ~(-1 << v23);
                else
                  v22 = -1;
                v14 = v22 & v13;
                break;
              default:
                v14 = *(_QWORD *)(a1 + 8 * v5 + 64);
                break;
            }
            goto LABEL_44;
          }
          if (v5 != 33)
            return 0;
          *(_DWORD *)(a4 + 72) = *(_DWORD *)(a1 + 328);
          goto LABEL_45;
        case 2:
          if (v5 <= 0x1F)
          {
            *(_OWORD *)(a4 + 72) = *(_OWORD *)(a1 + 16 * v5 + 336);
            goto LABEL_45;
          }
          if (v5 == 33)
          {
            *(_DWORD *)(a4 + 72) = *(_DWORD *)(a1 + 852);
            goto LABEL_45;
          }
          if (v5 == 32)
          {
            *(_DWORD *)(a4 + 72) = *(_DWORD *)(a1 + 848);
            goto LABEL_45;
          }
          if (v5 <= 0x41)
          {
            *(_DWORD *)(a4 + 72) = *(_DWORD *)(a1 + 16 * (v5 - 34) + 336);
            goto LABEL_45;
          }
          if (v5 > 0x61)
            return 0;
          v14 = *(_QWORD *)(a1 + 16 * (v5 - 66) + 336);
          goto LABEL_44;
        case 3:
          if (v5 == 2)
          {
            *(_DWORD *)(a4 + 72) = *(_DWORD *)(a1 + 876);
            goto LABEL_45;
          }
          if (v5 == 1)
          {
            *(_DWORD *)(a4 + 72) = *(_DWORD *)(a1 + 872);
            goto LABEL_45;
          }
          if (v5)
            return 0;
          v14 = *(_QWORD *)(a1 + 864);
          goto LABEL_44;
        case 4:
          if (v5 <= 7)
          {
            v15 = (_OWORD *)(a1 + ((unint64_t)v5 << 6));
            v16 = v15[56];
            v17 = v15[57];
            v18 = v15[58];
            v19 = v15[59];
LABEL_30:
            *(_OWORD *)(a4 + 120) = v19;
            *(_OWORD *)(a4 + 104) = v18;
            *(_OWORD *)(a4 + 88) = v17;
            *(_OWORD *)(a4 + 72) = v16;
            goto LABEL_45;
          }
          if (v5 <= 0xF)
          {
            v20 = (_OWORD *)(a1 + ((unint64_t)(v5 - 8) << 6));
            v16 = v20[88];
            v17 = v20[89];
            v18 = v20[90];
            v19 = v20[91];
            goto LABEL_30;
          }
          if (v5 <= 0x4F)
          {
            v21 = (_OWORD *)(a1 + ((unint64_t)(v5 - 16) << 6));
            v16 = v21[120];
            v17 = v21[121];
            v18 = v21[122];
            v19 = v21[123];
            goto LABEL_30;
          }
          if (v5 != 80)
            return 0;
          v14 = *(_QWORD *)(a1 + 6016);
LABEL_44:
          *(_QWORD *)(a4 + 72) = v14;
LABEL_45:
          result = 1;
          break;
        default:
          return 0;
      }
    }
  }
  return result;
}

unint64_t DNBArchMachARM64::SetRegisterValue(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v7;
  int v8;
  unint64_t result;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v5 = a3;
  if ((_DWORD)a2 == -1)
  {
    if (a3 > 0xA)
      return 0;
    v5 = dword_1000520F8[a3];
    v7 = 1;
  }
  else
  {
    v7 = a2;
  }
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, v7, 0);
  result = 0;
  if (!v8)
  {
    result = MachThread::GetRegisterInfo(*(MachThread **)(a1 + 16), v7, v5);
    if (result)
    {
      switch((int)v7)
      {
        case 1:
          if (v5 > 0x20)
          {
            if (v5 != 33)
              return 0;
            *(_DWORD *)(a1 + 328) = *(_DWORD *)(a4 + 72);
          }
          else
          {
            v10 = *(_QWORD *)(a4 + 72);
            switch(v5)
            {
              case 0x1Du:
                *(_QWORD *)(a1 + 296) = v10;
                break;
              case 0x1Eu:
                *(_QWORD *)(a1 + 304) = v10;
                break;
              case 0x1Fu:
                *(_QWORD *)(a1 + 312) = v10;
                break;
              case 0x20u:
                *(_QWORD *)(a1 + 320) = v10;
                break;
              default:
                *(_QWORD *)(a1 + 8 * v5 + 64) = v10;
                break;
            }
          }
          return (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, v7) == 0;
        case 2:
          if (v5 <= 0x1F)
          {
            *(_OWORD *)(a1 + 16 * v5 + 336) = *(_OWORD *)(a4 + 72);
            return (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, v7) == 0;
          }
          if (v5 == 33)
          {
            *(_DWORD *)(a1 + 852) = *(_DWORD *)(a4 + 72);
            return (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, v7) == 0;
          }
          if (v5 == 32)
          {
            *(_DWORD *)(a1 + 848) = *(_DWORD *)(a4 + 72);
            return (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, v7) == 0;
          }
          if (v5 <= 0x41)
          {
            *(_DWORD *)(a1 + 16 * (v5 - 34) + 336) = *(_DWORD *)(a4 + 72);
            return (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, v7) == 0;
          }
          if (v5 > 0x61)
            return 0;
          *(_QWORD *)(a1 + 16 * (v5 - 66) + 336) = *(_QWORD *)(a4 + 72);
          return (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, v7) == 0;
        case 3:
          if (v5 == 2)
          {
            *(_DWORD *)(a1 + 876) = *(_DWORD *)(a4 + 72);
          }
          else if (v5 == 1)
          {
            *(_DWORD *)(a1 + 872) = *(_DWORD *)(a4 + 72);
          }
          else
          {
            if (v5)
              return 0;
            *(_QWORD *)(a1 + 864) = *(_QWORD *)(a4 + 72);
          }
          return (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, v7) == 0;
        case 4:
          if (v5 <= 7)
          {
            v11 = (_OWORD *)(a1 + ((unint64_t)v5 << 6));
            v12 = *(_OWORD *)(a4 + 72);
            v13 = *(_OWORD *)(a4 + 88);
            v14 = *(_OWORD *)(a4 + 120);
            v11[58] = *(_OWORD *)(a4 + 104);
            v11[59] = v14;
            v11[56] = v12;
            v11[57] = v13;
            return 1;
          }
          if (v5 <= 0xF)
          {
            v15 = (_OWORD *)(a1 + ((unint64_t)(v5 - 8) << 6));
            v16 = *(_OWORD *)(a4 + 72);
            v17 = *(_OWORD *)(a4 + 88);
            v18 = *(_OWORD *)(a4 + 104);
            v15[91] = *(_OWORD *)(a4 + 120);
            v15[90] = v18;
            v15[89] = v17;
            v15[88] = v16;
            return 1;
          }
          if (v5 <= 0x4F)
          {
            v19 = (_OWORD *)(a1 + ((unint64_t)(v5 - 16) << 6));
            v20 = *(_OWORD *)(a4 + 72);
            v21 = *(_OWORD *)(a4 + 88);
            v22 = *(_OWORD *)(a4 + 104);
            v19[123] = *(_OWORD *)(a4 + 120);
            v19[122] = v22;
            v19[121] = v21;
            v19[120] = v20;
            return 1;
          }
          if (v5 != 80)
            return 0;
          *(_QWORD *)(a1 + 6016) = *(_QWORD *)(a4 + 72);
          result = 1;
          break;
        default:
          return 0;
      }
    }
  }
  return result;
}

uint64_t DNBArchMachARM64::GetRegisterState(natural_t *this, int a2, char a3)
{
  int GPRState;
  int v6;
  kern_return_t state;
  uint64_t v8;
  thread_read_t v10;
  natural_t *v11;
  thread_state_flavor_t v12;
  mach_msg_type_number_t old_stateCnt;

  switch(a2)
  {
    case 0:
      GPRState = DNBArchMachARM64::GetGPRState((DNBArchMachARM64 *)this, a3);
      v6 = DNBArchMachARM64::GetVFPState((DNBArchMachARM64 *)this, a3) | GPRState;
      if ((a3 & 1) != 0 || this[1656])
      {
        old_stateCnt = 4;
        state = thread_get_state(*(_DWORD *)(*((_QWORD *)this + 2) + 16), 7, this + 216, &old_stateCnt);
        this[1656] = state;
      }
      else
      {
        state = 0;
      }
      old_stateCnt = 130;
      v8 = v6 | state | thread_get_state(*(_DWORD *)(*((_QWORD *)this + 2) + 16), 15, this + 1520, &old_stateCnt);
      old_stateCnt = 1296;
      thread_get_state(*(_DWORD *)(*((_QWORD *)this + 2) + 16), 25, this + 224, &old_stateCnt);
      return v8;
    case 1:
      return DNBArchMachARM64::GetGPRState((DNBArchMachARM64 *)this, a3);
    case 2:
      return DNBArchMachARM64::GetVFPState((DNBArchMachARM64 *)this, a3);
    case 3:
      if ((a3 & 1) == 0 && !this[1656])
        return 0;
      old_stateCnt = 4;
      v8 = thread_get_state(*(_DWORD *)(*((_QWORD *)this + 2) + 16), 7, this + 216, &old_stateCnt);
      this[1656] = v8;
      return v8;
    case 4:
      old_stateCnt = 1296;
      v10 = *(_DWORD *)(*((_QWORD *)this + 2) + 16);
      v11 = this + 224;
      v12 = 25;
      goto LABEL_13;
    case 5:
      old_stateCnt = 130;
      v10 = *(_DWORD *)(*((_QWORD *)this + 2) + 16);
      v11 = this + 1520;
      v12 = 15;
LABEL_13:
      v8 = thread_get_state(v10, v12, v11, &old_stateCnt);
      break;
    default:
      v8 = 4;
      break;
  }
  return v8;
}

uint64_t DNBArchMachARM64::SetRegisterState(DNBArchMachARM64 *this, uint64_t a2)
{
  int v2;
  uint64_t result;
  kern_return_t v5;
  kern_return_t v6;
  kern_return_t v7;
  kern_return_t v8;
  kern_return_t v9;
  kern_return_t v10;
  natural_t __dst[69];
  mach_msg_type_number_t out_stateCnt;

  v2 = a2;
  result = (*(uint64_t (**)(DNBArchMachARM64 *, uint64_t, _QWORD))(*(_QWORD *)this + 64))(this, a2, 0);
  if (!(_DWORD)result)
  {
    switch(v2)
    {
      case 0:
        out_stateCnt = 68;
        memcpy(__dst, (char *)this + 64, 0x110uLL);
        v5 = thread_convert_thread_state(*(_DWORD *)(*((_QWORD *)this + 2) + 16), 2, 6, (thread_state_t)this + 16, 0x44u, __dst, &out_stateCnt);
        if (DNBLogEnabledForAny(4))
          _DNBLogThreaded("converted register values to inferior's keys, return value %d, count %d", v5, out_stateCnt);
        v6 = thread_set_state(*(_DWORD *)(*((_QWORD *)this + 2) + 16), 6, __dst, 0x44u);
        *((_DWORD *)this + 1651) = v6;
        *((_DWORD *)this + 1650) = -1;
        v7 = thread_set_state(*(_DWORD *)(*((_QWORD *)this + 2) + 16), 17, (thread_state_t)this + 84, 0x84u);
        *((_DWORD *)this + 1653) = v7;
        *((_DWORD *)this + 1652) = -1;
        v8 = thread_set_state(*(_DWORD *)(*((_QWORD *)this + 2) + 16), 7, (thread_state_t)this + 216, 4u);
        *((_DWORD *)this + 1657) = v8;
        *((_DWORD *)this + 1656) = -1;
        v9 = thread_set_state(*(_DWORD *)(*((_QWORD *)this + 2) + 16), 15, (thread_state_t)this + 1520, 0x82u);
        result = v9 | thread_set_state(*(_DWORD *)(*((_QWORD *)this + 2) + 16), 25, (thread_state_t)this + 224, 0x510u) | v6 | v7 | v8;
        break;
      case 1:
        out_stateCnt = 68;
        memcpy(__dst, (char *)this + 64, 0x110uLL);
        v10 = thread_convert_thread_state(*(_DWORD *)(*((_QWORD *)this + 2) + 16), 2, 6, (thread_state_t)this + 16, 0x44u, __dst, &out_stateCnt);
        if (DNBLogEnabledForAny(4))
          _DNBLogThreaded("converted register values to inferior's keys, return value %d, count %d", v10, out_stateCnt);
        result = thread_set_state(*(_DWORD *)(*((_QWORD *)this + 2) + 16), 6, __dst, 0x44u);
        *((_DWORD *)this + 1651) = result;
        *((_DWORD *)this + 1650) = -1;
        break;
      case 2:
        result = thread_set_state(*(_DWORD *)(*((_QWORD *)this + 2) + 16), 17, (thread_state_t)this + 84, 0x84u);
        *((_DWORD *)this + 1653) = result;
        *((_DWORD *)this + 1652) = -1;
        break;
      case 3:
        result = thread_set_state(*(_DWORD *)(*((_QWORD *)this + 2) + 16), 7, (thread_state_t)this + 216, 4u);
        *((_DWORD *)this + 1657) = result;
        *((_DWORD *)this + 1656) = -1;
        break;
      case 4:
        result = thread_set_state(*(_DWORD *)(*((_QWORD *)this + 2) + 16), 25, (thread_state_t)this + 224, 0x510u);
        break;
      case 5:
        result = thread_set_state(*(_DWORD *)(*((_QWORD *)this + 2) + 16), 15, (thread_state_t)this + 1520, 0x82u);
        break;
      default:
        result = 4;
        break;
    }
  }
  return result;
}

BOOL DNBArchMachARM64::RegisterSetStateIsValid(DNBArchMachARM64 *this, int a2)
{
  int v2;

  switch(a2)
  {
    case 0:
      v2 = *((_DWORD *)this + 1652) | *((_DWORD *)this + 1650) | *((_DWORD *)this + 1656) | *((_DWORD *)this + 1658);
      break;
    case 1:
      v2 = *((_DWORD *)this + 1650);
      break;
    case 2:
      v2 = *((_DWORD *)this + 1652);
      break;
    case 3:
      v2 = *((_DWORD *)this + 1656);
      break;
    case 4:
      v2 = *((_DWORD *)this + 1654);
      break;
    default:
      v2 = -1;
      break;
  }
  return v2 == 0;
}

uint64_t DNBArchMachARM64::GetRegisterContext(natural_t *this, char *a2, unint64_t a3)
{
  int GPRState;
  int v7;
  kern_return_t state;
  uint64_t v9;
  mach_msg_type_number_t old_stateCnt;
  mach_msg_type_number_t v12;

  if (a2 && a3)
  {
    GPRState = DNBArchMachARM64::GetGPRState((DNBArchMachARM64 *)this, 0);
    v7 = DNBArchMachARM64::GetVFPState((DNBArchMachARM64 *)this, 0) | GPRState;
    if (this[1656])
    {
      old_stateCnt = 4;
      state = thread_get_state(*(_DWORD *)(*((_QWORD *)this + 2) + 16), 7, this + 216, &old_stateCnt);
      this[1656] = state;
      if (v7 | state)
        return 0;
    }
    else if (v7)
    {
      return 0;
    }
    v12 = 1296;
    thread_get_state(*(_DWORD *)(*((_QWORD *)this + 2) + 16), 25, this + 224, &v12);
    memcpy(a2, this + 16, 0x110uLL);
    memcpy(a2 + 272, this + 84, 0x220uLL);
    memcpy(a2 + 816, this + 224, 0x1440uLL);
    if (a3 >> 4 <= 0x176)
      DNBArchMachARM64::GetRegisterContext();
  }
  v9 = 6000;
  if (DNBLogEnabledForAny(4))
    _DNBLogThreaded("DNBArchMachARM64::GetRegisterContext (buf = %p, len = %zu) => %zu", a2, a3, 0x1770uLL);
  return v9;
}

uint64_t DNBArchMachARM64::SetRegisterContext(DNBArchMachARM64 *this, char *__src, unint64_t a3)
{
  uint64_t v5;
  char *v7;
  kern_return_t v8;
  natural_t __dst[69];
  mach_msg_type_number_t out_stateCnt;

  v5 = 0;
  if (__src && a3)
  {
    v7 = (char *)this + 64;
    memcpy((char *)this + 64, __src, 0x110uLL);
    memcpy((char *)this + 336, __src + 272, 0x220uLL);
    memcpy((char *)this + 896, __src + 816, 0x1440uLL);
    if (a3 >> 4 <= 0x176)
      DNBArchMachARM64::SetRegisterContext();
    out_stateCnt = 68;
    memcpy(__dst, v7, 0x110uLL);
    v8 = thread_convert_thread_state(*(_DWORD *)(*((_QWORD *)this + 2) + 16), 2, 6, (thread_state_t)v7, 0x44u, __dst, &out_stateCnt);
    if (DNBLogEnabledForAny(4))
      _DNBLogThreaded("converted register values to inferior's keys, return value %d, count %d", v8, out_stateCnt);
    *((_DWORD *)this + 1651) = thread_set_state(*(_DWORD *)(*((_QWORD *)this + 2) + 16), 6, __dst, 0x44u);
    *((_DWORD *)this + 1650) = -1;
    *((_DWORD *)this + 1653) = thread_set_state(*(_DWORD *)(*((_QWORD *)this + 2) + 16), 17, (thread_state_t)this + 84, 0x84u);
    *((_DWORD *)this + 1652) = -1;
    *((_DWORD *)this + 1657) = thread_set_state(*(_DWORD *)(*((_QWORD *)this + 2) + 16), 7, (thread_state_t)this + 216, 4u);
    *((_DWORD *)this + 1656) = -1;
    thread_set_state(*(_DWORD *)(*((_QWORD *)this + 2) + 16), 25, (thread_state_t)this + 224, 0x510u);
    v5 = 6000;
  }
  if (DNBLogEnabledForAny(4))
    _DNBLogThreaded("DNBArchMachARM64::SetRegisterContext (buf = %p, len = %zu) => %zu", __src, a3, v5);
  return v5;
}

uint64_t DNBArchMachARM64::SaveRegisterState(DNBArchMachARM64 *this)
{
  kern_return_t v2;
  uint64_t v3;
  char *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;

  v2 = thread_abort_safely(*(_DWORD *)(*((_QWORD *)this + 2) + 16));
  if (DNBLogEnabledForAny(4))
    _DNBLogThreaded("thread = 0x%4.4x calling thread_abort_safely (tid) => %u (SetGPRState() for stop_count = %u)", *(_DWORD *)(*((_QWORD *)this + 2) + 16), v2, *(_DWORD *)(**((_QWORD **)this + 2) + 444));
  if (DNBArchMachARM64::GetGPRState(this, 1))
  {
    if (DNBLogEnabledForAny(4))
      _DNBLogThreaded("DNBArchMachARM64::SaveRegisterState () error: GPR regs failed to read: %u ");
    return 0xFFFFFFFFLL;
  }
  if (DNBArchMachARM64::GetVFPState(this, 1))
  {
    if (DNBLogEnabledForAny(4))
      _DNBLogThreaded("DNBArchMachARM64::SaveRegisterState () error: %s regs failed to read: %u");
    return 0xFFFFFFFFLL;
  }
  v3 = (*((_DWORD *)this + 2) + 1);
  *((_DWORD *)this + 2) = v3;
  v5 = (char *)*((_QWORD *)this + 905);
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 16);
        if (v3 >= v8)
          break;
        v5 = (char *)*v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_18;
      }
      if (v8 >= v3)
        break;
      v5 = (char *)v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_18;
      }
    }
  }
  else
  {
    v6 = (uint64_t **)((char *)this + 7240);
    v7 = (uint64_t **)((char *)this + 7240);
LABEL_18:
    v9 = (char *)v7;
    v7 = (uint64_t **)operator new(0x1800uLL, (std::align_val_t)0x40uLL);
    *((_DWORD *)v7 + 16) = v3;
    bzero(v7 + 16, 0x1780uLL);
    *v7 = 0;
    v7[1] = 0;
    v7[2] = (uint64_t *)v9;
    *v6 = (uint64_t *)v7;
    v10 = **((_QWORD **)this + 904);
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *((_QWORD *)this + 904) = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 905), v11);
    ++*((_QWORD *)this + 906);
  }
  memcpy(v7 + 16, (char *)this + 64, 0x1780uLL);
  return v3;
}

uint64_t DNBArchMachARM64::RestoreRegisterState(DNBArchMachARM64 *this, unsigned int a2)
{
  char *v2;
  char *v4;
  unsigned int v5;
  BOOL v6;
  char **v7;
  uint64_t v8;
  kern_return_t v10;
  kern_return_t v11;
  kern_return_t v12;
  char *v13;
  char *v14;
  char *v15;
  BOOL v16;
  natural_t __dst[69];
  mach_msg_type_number_t out_stateCnt;

  v2 = (char *)*((_QWORD *)this + 905);
  if (!v2)
    return 0;
  v4 = (char *)this + 7240;
  do
  {
    v5 = *((_DWORD *)v2 + 16);
    v6 = v5 >= a2;
    if (v5 >= a2)
      v7 = (char **)v2;
    else
      v7 = (char **)(v2 + 8);
    if (v6)
      v4 = v2;
    v2 = *v7;
  }
  while (*v7);
  if (v4 == (char *)this + 7240 || *((_DWORD *)v4 + 16) > a2)
    return 0;
  memcpy((char *)this + 64, v4 + 128, 0x110uLL);
  memcpy((char *)this + 336, v4 + 400, 0x210uLL);
  out_stateCnt = 68;
  memcpy(__dst, (char *)this + 64, 0x110uLL);
  v10 = thread_convert_thread_state(*(_DWORD *)(*((_QWORD *)this + 2) + 16), 2, 6, (thread_state_t)this + 16, 0x44u, __dst, &out_stateCnt);
  if (DNBLogEnabledForAny(4))
    _DNBLogThreaded("converted register values to inferior's keys, return value %d, count %d", v10, out_stateCnt);
  v11 = thread_set_state(*(_DWORD *)(*((_QWORD *)this + 2) + 16), 6, __dst, 0x44u);
  *((_DWORD *)this + 1651) = v11;
  *((_DWORD *)this + 1650) = -1;
  if (v11)
  {
    if (DNBLogEnabledForAny(4))
      _DNBLogThreaded("DNBArchMachARM64::RestoreRegisterState (save_id = %u) error: GPR regs failed to write: %u");
    goto LABEL_22;
  }
  v12 = thread_set_state(*(_DWORD *)(*((_QWORD *)this + 2) + 16), 17, (thread_state_t)this + 84, 0x84u);
  *((_DWORD *)this + 1653) = v12;
  *((_DWORD *)this + 1652) = -1;
  if (v12)
  {
    if (DNBLogEnabledForAny(4))
      _DNBLogThreaded("DNBArchMachARM64::RestoreRegisterState (save_id = %u) error: %s regs failed to write: %u");
LABEL_22:
    v8 = 0;
    v13 = (char *)*((_QWORD *)v4 + 1);
    if (v13)
      goto LABEL_23;
LABEL_26:
    v15 = v4;
    do
    {
      v14 = (char *)*((_QWORD *)v15 + 2);
      v16 = *(_QWORD *)v14 == (_QWORD)v15;
      v15 = v14;
    }
    while (!v16);
    goto LABEL_29;
  }
  v8 = 1;
  v13 = (char *)*((_QWORD *)v4 + 1);
  if (!v13)
    goto LABEL_26;
  do
  {
LABEL_23:
    v14 = v13;
    v13 = *(char **)v13;
  }
  while (v13);
LABEL_29:
  if (*((char **)this + 904) == v4)
    *((_QWORD *)this + 904) = v14;
  --*((_QWORD *)this + 906);
  std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 905), (uint64_t *)v4);
  operator delete(v4, (std::align_val_t)0x40uLL);
  return v8;
}

void DNBArchMachARM64::~DNBArchMachARM64(DNBArchMachARM64 *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_100065C48;
  std::__tree<std::__value_type<unsigned int,DNBArchMachARM64::Context>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,DNBArchMachARM64::Context>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,DNBArchMachARM64::Context>>>::destroy((uint64_t)this + 7232, *((_QWORD **)this + 905));
  v2 = (void *)*((_QWORD *)this + 900);
  if (v2)
  {
    *((_QWORD *)this + 901) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 897);
  if (v3)
  {
    *((_QWORD *)this + 898) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_100065C48;
  std::__tree<std::__value_type<unsigned int,DNBArchMachARM64::Context>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,DNBArchMachARM64::Context>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,DNBArchMachARM64::Context>>>::destroy((uint64_t)this + 7232, *((_QWORD **)this + 905));
  v2 = (void *)*((_QWORD *)this + 900);
  if (v2)
  {
    *((_QWORD *)this + 901) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 897);
  if (v3)
  {
    *((_QWORD *)this + 898) = v3;
    operator delete(v3);
  }
  operator delete(this, (std::align_val_t)0x40uLL);
}

uint64_t DNBArchProtocol::StepNotComplete(DNBArchProtocol *this)
{
  return 0;
}

uint64_t DNBArchProtocol::StartTransForHWP(DNBArchProtocol *this)
{
  return 1;
}

uint64_t DNBArchProtocol::RollbackTransForHWP(DNBArchProtocol *this)
{
  return 1;
}

uint64_t DNBArchProtocol::FinishTransForHWP(DNBArchProtocol *this)
{
  return 1;
}

void std::vector<DNBArchMachARM64::disabled_watchpoint>::__append(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  void *v25;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - v5) >> 4)
  {
    if (a2)
    {
      if (((a2 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
        goto LABEL_34;
      v13 = ((a2 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      v6 = &v5[16 * (v13 & 0x1FFFFFFFFFFFFFFELL)];
      v14 = v5 + 16;
      v15 = v13 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *((_QWORD *)v14 - 2) = 0;
        *(_QWORD *)v14 = 0;
        *((_DWORD *)v14 - 2) = 0;
        *((_DWORD *)v14 + 2) = 0;
        v14 += 32;
        v15 -= 2;
      }
      while (v15);
      if (v13 != (v13 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_34:
        do
        {
          *(_QWORD *)v6 = 0;
          *((_DWORD *)v6 + 2) = 0;
          v6 += 16;
        }
        while (v6 != &v5[16 * a2]);
      }
      v6 = &v5[16 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (char *)*a1;
    v8 = (v5 - (_BYTE *)*a1) >> 4;
    v9 = v8 + a2;
    if ((v8 + a2) >> 60)
      abort();
    v10 = v4 - v7;
    if (v10 >> 3 > v9)
      v9 = v10 >> 3;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 60)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v12 = (char *)operator new(16 * v11);
    }
    else
    {
      v12 = 0;
    }
    v16 = &v12[16 * v8];
    v17 = &v16[16 * a2];
    v18 = v16;
    if (((a2 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_35;
    v19 = ((a2 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    v18 = &v16[16 * (v19 & 0x1FFFFFFFFFFFFFFELL)];
    v20 = v16 + 16;
    v21 = v19 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *((_QWORD *)v20 - 2) = 0;
      *(_QWORD *)v20 = 0;
      *((_DWORD *)v20 - 2) = 0;
      *((_DWORD *)v20 + 2) = 0;
      v20 += 32;
      v21 -= 2;
    }
    while (v21);
    if (v19 != (v19 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_35:
      do
      {
        *(_QWORD *)v18 = 0;
        *((_DWORD *)v18 + 2) = 0;
        v18 += 16;
      }
      while (v18 != v17);
    }
    v22 = &v12[16 * v11];
    if (v5 != v7)
    {
      do
      {
        v23 = *((_QWORD *)v6 - 2);
        v6 -= 16;
        v24 = *((_DWORD *)v6 + 2);
        *((_QWORD *)v16 - 2) = v23;
        v16 -= 16;
        *((_DWORD *)v16 + 2) = v24;
      }
      while (v6 != v7);
    }
    v25 = *a1;
    *a1 = v16;
    a1[1] = v17;
    a1[2] = v22;
    if (v25)
      operator delete(v25);
  }
}

void std::__tree<std::__value_type<unsigned int,DNBArchMachARM64::Context>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,DNBArchMachARM64::Context>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,DNBArchMachARM64::Context>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,DNBArchMachARM64::Context>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,DNBArchMachARM64::Context>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,DNBArchMachARM64::Context>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned int,DNBArchMachARM64::Context>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,DNBArchMachARM64::Context>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,DNBArchMachARM64::Context>>>::destroy(a1, a2[1]);
    operator delete(a2, (std::align_val_t)0x40uLL);
  }
}

uint64_t mach_exc_server_routine(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 20);
  if ((v1 - 2411) >= 0xFFFFFFFA)
    return (uint64_t)*(&catch_mach_exc_subsystem + 5 * (v1 - 2405) + 5);
  else
    return 0;
}

uint64_t _Xmach_exception_raise(uint64_t result, uint64_t a2)
{
  int v3;
  unsigned int v4;
  unsigned int v5;

  if ((*(_DWORD *)result & 0x80000000) != 0)
  {
    v3 = -304;
    if (*(_DWORD *)(result + 24) != 2)
      goto LABEL_3;
    v4 = *(_DWORD *)(result + 4);
    if (v4 < 0x44 || v4 > 0x54)
      goto LABEL_3;
    if (*(unsigned __int16 *)(result + 38) << 16 != 1114112 || *(unsigned __int16 *)(result + 50) << 16 != 1114112)
    {
      v3 = -300;
      goto LABEL_3;
    }
    v5 = *(_DWORD *)(result + 64);
    if (v5 <= 2 && v5 <= (v4 - 68) >> 3 && v4 == 8 * v5 + 68)
    {
      result = catch_mach_exception_raise(*(_DWORD *)(result + 12), *(_DWORD *)(result + 28), *(_DWORD *)(result + 40), *(_DWORD *)(result + 60), (uint64_t *)(result + 68), v5);
      *(_DWORD *)(a2 + 32) = result;
      goto LABEL_4;
    }
  }
  v3 = -304;
LABEL_3:
  *(_DWORD *)(a2 + 32) = v3;
LABEL_4:
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

_DWORD *_Xmach_exception_raise_state(_DWORD *result, uint64_t a2)
{
  unsigned int v3;
  BOOL v4;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  _DWORD *v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  NDR_record_t v12;
  _DWORD *v13;

  if ((*result & 0x80000000) != 0)
    goto LABEL_17;
  v3 = result[1];
  v4 = v3 < 0x30 || v3 > 0x1480;
  if (v4
    || (v5 = result[9], v5 > 2)
    || ((v6 = 2 * v5, v5 <= (v3 - 48) >> 3) ? (v7 = v3 >= 8 * v5 + 48) : (v7 = 0),
        !v7
     || (v8 = &result[v6], v9 = v8[11], v9 > 0x510)
     || ((v10 = v3 - v6 * 4, v9 <= (v10 - 48) >> 2) ? (v11 = v10 == 4 * v9 + 48) : (v11 = 0), !v11)))
  {
LABEL_17:
    *(_DWORD *)(a2 + 32) = -304;
    v12 = NDR_record;
LABEL_18:
    *(NDR_record_t *)(a2 + 24) = v12;
    return result;
  }
  *(_DWORD *)(a2 + 40) = 1296;
  v13 = v8 + 10;
  result = (_DWORD *)catch_mach_exception_raise_state(result[3], result[8], (uint64_t)(result + 10), v5);
  *(_DWORD *)(a2 + 32) = (_DWORD)result;
  v12 = NDR_record;
  if ((_DWORD)result)
    goto LABEL_18;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  *(_DWORD *)(a2 + 36) = *v13;
  *(_DWORD *)(a2 + 4) = 4 * *(_DWORD *)(a2 + 40) + 44;
  return result;
}

uint64_t _Xmach_exception_raise_state_identity(uint64_t result, uint64_t a2)
{
  int v3;
  NDR_record_t v4;
  unsigned int v5;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  _DWORD *v12;

  if ((*(_DWORD *)result & 0x80000000) == 0)
    goto LABEL_2;
  v3 = -304;
  if (*(_DWORD *)(result + 24) != 2)
    goto LABEL_3;
  v5 = *(_DWORD *)(result + 4);
  if (v5 < 0x4C || v5 > 0x149C)
    goto LABEL_3;
  if (*(unsigned __int16 *)(result + 38) << 16 != 1114112 || *(unsigned __int16 *)(result + 50) << 16 != 1114112)
  {
    v3 = -300;
    goto LABEL_3;
  }
  v7 = *(_DWORD *)(result + 64);
  if (v7 > 2)
    goto LABEL_2;
  v3 = -304;
  if (v7 > (v5 - 76) >> 3)
    goto LABEL_3;
  v8 = 8 * v7;
  if (v5 < 8 * v7 + 76)
    goto LABEL_3;
  v9 = result + v8;
  v10 = *(_DWORD *)(v9 + 72);
  if (v10 > 0x510 || (v11 = v5 - v8, v10 > (v11 - 76) >> 2) || v11 != 4 * v10 + 76)
  {
LABEL_2:
    v3 = -304;
LABEL_3:
    *(_DWORD *)(a2 + 32) = v3;
    v4 = NDR_record;
LABEL_4:
    *(NDR_record_t *)(a2 + 24) = v4;
    return result;
  }
  *(_DWORD *)(a2 + 40) = 1296;
  v12 = (_DWORD *)(v9 + 68);
  result = catch_mach_exception_raise_state_identity(*(_DWORD *)(result + 12), *(_DWORD *)(result + 28), *(_DWORD *)(result + 40), *(_DWORD *)(result + 60), (uint64_t *)(result + 68), v7);
  *(_DWORD *)(a2 + 32) = result;
  v4 = NDR_record;
  if ((_DWORD)result)
    goto LABEL_4;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  *(_DWORD *)(a2 + 36) = *v12;
  *(_DWORD *)(a2 + 4) = 4 * *(_DWORD *)(a2 + 40) + 44;
  return result;
}

uint64_t mach_exc_server(_DWORD *a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  void (*v5)(void);
  uint64_t result;

  v2 = a1[2];
  *(_DWORD *)a2 = *a1 & 0x1F;
  *(_DWORD *)(a2 + 4) = 36;
  v3 = a1[5] + 100;
  *(_DWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = v3;
  v4 = a1[5];
  if ((v4 - 2411) >= 0xFFFFFFFA
    && (v5 = (void (*)(void))*(&catch_mach_exc_subsystem + 5 * (v4 - 2405) + 5)) != 0)
  {
    v5();
    return 1;
  }
  else
  {
    result = 0;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 32) = -303;
  }
  return result;
}

void PortWasBoundCallbackUnixSocket()
{
  perror("error: socket (AF_UNIX, SOCK_STREAM, 0)");
  OUTLINED_FUNCTION_0();
}

{
  perror("error: connect (socket, &saddr_un, saddr_un_len)");
  OUTLINED_FUNCTION_0();
}

{
  perror("error: send (s, pid_str, pid_str_len, 0)");
  OUTLINED_FUNCTION_0();
}

void DNBBreakpointList::RemoveTrapsFromBuffer()
{
  __assert_rtn("RemoveTrapsFromBuffer", "DNBBreakpoint.cpp", 187, "opcode_offset + intersect_size <= bp.ByteSize()");
}

{
  __assert_rtn("RemoveTrapsFromBuffer", "DNBBreakpoint.cpp", 186, "addr < intersect_addr + intersect_size && intersect_addr + intersect_size <= addr + size");
}

{
  __assert_rtn("RemoveTrapsFromBuffer", "DNBBreakpoint.cpp", 184, "addr <= intersect_addr && intersect_addr < addr + size");
}

void DNBProcessLaunch()
{
  __assert_rtn("DNBProcessLaunch", "DNB.cpp", 395, "res && \"Couldn't add process to map!\"");
}

void DNBProcessAttach()
{
  __assert_rtn("DNBProcessAttach", "DNB.cpp", 499, "res && \"Couldn't add process to map!\"");
}

void DNBProcessAttach(char *a1, int a2, char *a3, int a4)
{
  uint64_t v7;
  int *v8;
  char *v9;

  snprintf(a1, 0x10uLL, "--fd=%d", a2);
  snprintf(a3, 0x10uLL, "--attach=%d", a4);
  execl("/Library/Apple/usr/libexec/oah/debugserver", "/Library/Apple/usr/libexec/oah/debugserver", "--native-regs", "--setsid", a1, "--handoff-attach-from-native", a3, 0);
  if (DNBLogEnabledForAny(2))
  {
    v7 = *__error();
    v8 = __error();
    v9 = strerror(*v8);
    _DNBLogThreaded("Failed to launch debugserver for translated process: ", v7, v9);
  }
  __break(1u);
}

void DNBDataRef::GetMax64()
{
  __assert_rtn("GetMax64", "DNBDataRef.cpp", 134, "false && \"GetMax64 unhandled case!\"");
}

void DNBDataRef::Dump()
{
  __assert_rtn("GetPointer", "DNBDataRef.cpp", 146, "m_ptrSize != 0");
}

void PThreadMutex::PThreadMutex()
{
  __assert_rtn("PThreadMutex", "PThreadMutex.h", 96, "err == 0");
}

{
  __assert_rtn("PThreadMutex", "PThreadMutex.h", 94, "err == 0");
}

{
  __assert_rtn("PThreadMutex", "PThreadMutex.h", 92, "err == 0");
}

{
  __assert_rtn("PThreadMutex", "PThreadMutex.h", 90, "err == 0");
}

void PThreadEvent::PThreadEvent()
{
  __assert_rtn("PThreadMutex", "PThreadMutex.h", 83, "err == 0");
}

void RNBRemote::InitializeRegisters()
{
  __assert_rtn("InitializeRegisters", "RNBRemote.cpp", 1343, "num_reg_sets > 0 && reg_sets != NULL");
}

void MachException::Message::Reply()
{
  __assert_rtn("Reply", "MachException.cpp", 325, "state_pid != -1");
}

void MachProcess::EnableBreakpoint()
{
  __assert_rtn("EnableBreakpoint", "MachProcess.mm", 2252, "break_op_size != 0");
}

void MachProcess::DisableBreakpoint()
{
  __assert_rtn("DisableBreakpoint", "MachProcess.mm", 2089, "break_op_size > 0");
}

void MachThread::ThreadWillResume()
{
  __assert_rtn("ThreadWillResume", "MachThread.cpp", 351, "others_stopped == false");
}

void MachThreadList::ProcessWillResume()
{
  __assert_rtn("ProcessWillResume", "MachThreadList.cpp", 429, "thread_action");
}

void DNBArchMachARM64::GetRegisterContext()
{
  __assert_rtn("GetRegisterContext", "DNBArchImplARM64.cpp", 3068, "bytes_written == size");
}

void DNBArchMachARM64::SetRegisterContext()
{
  __assert_rtn("SetRegisterContext", "DNBArchImplARM64.cpp", 3109, "bytes_written == size");
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete(void *__p, std::align_val_t a2)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, std::align_val_t a2)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "UTF8String");
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "UUIDString");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addObject:");
}

id objc_msgSend_applicationProxyForBundleURL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "applicationProxyForBundleURL:");
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayWithCapacity:");
}

id objc_msgSend_cacheGUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cacheGUID");
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "code");
}

id objc_msgSend_createClientPort(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createClientPort");
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultManager");
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "description");
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionary");
}

id objc_msgSend_dictionaryWithContentsOfFile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithContentsOfFile:");
}

id objc_msgSend_dictionaryWithObject_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithObject:forKey:");
}

id objc_msgSend_drain(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "drain");
}

id objc_msgSend_fileURLWithPath_isDirectory_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileURLWithPath:isDirectory:");
}

id objc_msgSend_initWithBytes_length_encoding_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithBytes:length:encoding:");
}

id objc_msgSend_localizedDescription(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localizedDescription");
}

id objc_msgSend_mostElevatedApplicationStateForPID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mostElevatedApplicationStateForPID:");
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_openApplication_options_clientPort_withResult_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "openApplication:options:clientPort:withResult:");
}

id objc_msgSend_operatingSystemVersion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "operatingSystemVersion");
}

id objc_msgSend_pidForApplication_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pidForApplication:");
}

id objc_msgSend_processInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processInfo");
}

id objc_msgSend_sequenceNumber(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sequenceNumber");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_stringWithFileSystemRepresentation_length_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringWithFileSystemRepresentation:length:");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringWithUTF8String:");
}

id objc_msgSend_systemApplicationBundleIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "systemApplicationBundleIdentifier");
}
