uint64_t sub_100004744()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100005D98(v0, qword_100071A80);
  sub_100005D1C(v0, (uint64_t)qword_100071A80);
  return Logger.init(subsystem:category:)(0x79656B656C707061, 0xEE006465726F7473, 0x6E6F6D656164, 0xE600000000000000);
}

BOOL sub_1000047BC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_1000047D0()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100004814()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10000483C(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

const char *sub_10000487C()
{
  return "AppleKeyStore";
}

const char *sub_100004890()
{
  _BYTE *v0;
  const char *v1;

  v1 = "applekeystored";
  if (*v0 != 1)
    v1 = "analytics";
  if (*v0)
    return v1;
  else
    return "oti";
}

void sub_1000048D8(uint64_t a1)
{
  sub_100004938(a1, "received notification for analytics kext");
}

uint64_t sub_1000048E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

void sub_10000492C(uint64_t a1)
{
  sub_100004938(a1, "received notification for lock state change");
}

void sub_100004938(uint64_t a1, const char *a2)
{
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  NSObject *oslog;

  if (qword_10006E5C0 != -1)
    swift_once(&qword_10006E5C0, sub_10001AB28);
  v3 = type metadata accessor for Logger(0);
  sub_100005D1C(v3, (uint64_t)qword_100071AE0);
  oslog = Logger.logObject.getter();
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(oslog, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v4, a2, v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

}

uint64_t sub_100004A0C()
{
  int v0;
  BOOL v1;
  int v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  __int128 v17;
  char v18;
  ValueMetadata *v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  char v34;
  char v35;
  uint64_t v36;

  v19 = &type metadata for AppleKeyStore;
  v20 = sub_100005D34();
  LOBYTE(v17) = 2;
  v0 = isFeatureEnabled(_:)(&v17);
  sub_100005D78(&v17);
  if (&metaclass for ModelContainer)
    v1 = &nominal type descriptor for ModelContainer == 0;
  else
    v1 = 1;
  v6 = !v1
    && &type metadata for ModelContainer != 0
    && &type metadata accessor for ModelContainer != 0
    && &protocol conformance descriptor for ModelContainer != 0
    && &class metadata base offset for ModelContainer != 0;
  v7 = v0 & v6;
  if ((_DWORD)v7 == 1)
  {
    if (qword_10006E5A0 != -1)
      swift_once(&qword_10006E5A0, sub_100004744);
    v8 = type metadata accessor for Logger(0);
    sub_100005D1C(v8, (uint64_t)qword_100071A80);
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "analytics ENABLED", v11, 2u);
      swift_slowDealloc(v11, -1, -1);
    }

    v17 = xmmword_10004A4F0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 1024;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 86400;
    v26 = 0;
    v27 = 7200;
    v28 = 0;
    v29 = 1800;
    v30 = 0;
    v31 = 600;
    v32 = 0;
    v33 = xmmword_10004A500;
    v34 = 0;
    v35 = 1;
    v36 = 4096;
    sub_10003A6E0(&v17);
  }
  else
  {
    if (qword_10006E5A0 != -1)
      swift_once(&qword_10006E5A0, sub_100004744);
    v12 = type metadata accessor for Logger(0);
    sub_100005D1C(v12, (uint64_t)qword_100071A80);
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "analytics DISABLED", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }

  }
  return v7;
}

void sub_100004CC0()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;

  type metadata accessor for AKSDaemon(0);
  sub_100005690(&qword_10006E688);
  Flag.wrappedValue.getter((uint64_t *)((char *)&v4 + 2));
  sub_100005C18();
  Flag.wrappedValue.getter((uint64_t *)((char *)&v4 + 1));
  if (BYTE1(v4) == 1)
    exit(0);
  Flag.wrappedValue.getter(&v4);
  if (qword_10006E5A0 != -1)
    swift_once(&qword_10006E5A0, sub_100004744);
  v0 = type metadata accessor for Logger(0);
  sub_100005D1C(v0, (uint64_t)qword_100071A80);
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "applekeystored feature flag DISABLED, NOT running applekeystored", v3, 2u);
    swift_slowDealloc(v3, -1, -1);
  }

  if ((sub_100004A0C() & 1) != 0)
    CFRunLoopRun();
}

BOOL sub_100004E08(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_100004E20()
{
  _BYTE *v0;

  if (*v0)
    return 0x65646F4D74736574;
  else
    return 0xD000000000000010;
}

uint64_t sub_100004E60@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000064F0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100004E84()
{
  return 0;
}

void sub_100004E90(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_100004E9C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100005E50();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100004EC4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100005E50();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100004EEC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void (*v24)(_QWORD, _QWORD, _QWORD);
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(_QWORD, _QWORD, _QWORD);
  char v39;
  char v40;

  v33 = a2;
  v36 = sub_100005690(&qword_10006E688);
  v32 = *(_QWORD *)(v36 - 8);
  v3 = __chkstk_darwin(v36);
  v34 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v35 = (char *)&v31 - v5;
  v37 = sub_100005690(&qword_10006E750);
  v6 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005690(&qword_10006E748);
  __chkstk_darwin(v9);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for NameSpecification(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for AKSDaemon(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  static NameSpecification.customLong(_:withSingleDash:)(1953066601, 0xE400000000000000, 0);
  v18 = type metadata accessor for ArgumentHelp(0);
  v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
  v19(v11, 1, 1, v18);
  Flag<A>.init(wrappedValue:name:help:)(0, v14, v11);
  v20 = &v17[*(int *)(v15 + 20)];
  static NameSpecification.customLong(_:withSingleDash:)(1953719668, 0xE400000000000000, 0);
  v19(v11, 1, 1, v18);
  Flag<A>.init(wrappedValue:name:help:)(0, v14, v11);
  v21 = a1[3];
  v22 = a1[4];
  sub_100005E2C(a1, v21);
  v23 = sub_100005E50();
  v24 = v38;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AKSDaemon.CodingKeys, &type metadata for AKSDaemon.CodingKeys, v23, v21, v22);
  if (!v24)
  {
    v25 = v6;
    v40 = 0;
    v26 = sub_100005ED0();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v36, &v40, v37, v36, v26);
    v27 = v36;
    v38 = *(void (**)(_QWORD, _QWORD, _QWORD))(v32 + 40);
    v38(v17, v35, v36);
    v39 = 1;
    v28 = v37;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v27, &v39, v37, v27, v26);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v8, v28);
    v29 = v33;
    v38(v20, v34, v36);
    sub_100005F60((uint64_t)v17, v29);
  }
  sub_100005D78(a1);
  return sub_100005E94((uint64_t)v17);
}

void sub_100005250()
{
  sub_100004CC0();
}

uint64_t sub_100005274()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void (*v7)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v9;

  v0 = sub_100005690(&qword_10006E748);
  __chkstk_darwin(v0);
  v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for NameSpecification(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static NameSpecification.customLong(_:withSingleDash:)(1953066601, 0xE400000000000000, 0);
  v6 = type metadata accessor for ArgumentHelp(0);
  v7 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
  v7(v2, 1, 1, v6);
  Flag<A>.init(wrappedValue:name:help:)(0, v5, v2);
  static NameSpecification.customLong(_:withSingleDash:)(1953719668, 0xE400000000000000, 0);
  v7(v2, 1, 1, v6);
  return Flag<A>.init(wrappedValue:name:help:)(0, v5, v2);
}

void sub_1000053B0()
{
  ParsableArguments.validate()();
}

uint64_t sub_1000053C8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100004EEC(a1, a2);
}

int main(int argc, const char **argv, const char **envp)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for AKSDaemon(0);
  v4 = sub_100005A54(&qword_10006E610, type metadata accessor for AKSDaemon, (uint64_t)&unk_10004A5FC);
  static ParsableCommand.main()(v3, v4);
  return 0;
}

uint64_t type metadata accessor for AKSDaemon(uint64_t a1)
{
  uint64_t result;

  result = qword_10006E6E8;
  if (!qword_10006E6E8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AKSDaemon);
  return result;
}

__n128 sub_100005468(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t sub_100005480(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1000054A0(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

void type metadata accessor for mach_msg_header_t(uint64_t a1)
{
  sub_100006334(a1, &qword_10006E678, (uint64_t)&unk_100066E20, (uint64_t (*)(_QWORD, uint64_t))&swift_getForeignTypeMetadata);
}

uint64_t initializeBufferWithCopyOfBuffer for FileAnalyticsEvent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

__n128 sub_100005518(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  result = *(__n128 *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  *(__n128 *)(a1 + 144) = result;
  *(_OWORD *)(a1 + 160) = v9;
  return result;
}

uint64_t sub_100005554(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 208))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100005574(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 200) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 208) = v3;
  return result;
}

void type metadata accessor for AKSAnalyticsCounters(uint64_t a1)
{
  sub_100006334(a1, &qword_10006E680, (uint64_t)&unk_100066EB0, (uint64_t (*)(_QWORD, uint64_t))&swift_getForeignTypeMetadata);
}

uint64_t *sub_1000055F0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v9);
  }
  else
  {
    v7 = sub_100005690(&qword_10006E688);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + *(int *)(a3 + 20)), (uint64_t *)((char *)a2 + *(int *)(a3 + 20)), v7);
  }
  return a1;
}

uint64_t sub_100005690(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_1000056D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v6)(uint64_t, uint64_t);

  v4 = sub_100005690(&qword_10006E688);
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v6(a1, v4);
  return ((uint64_t (*)(uint64_t, uint64_t))v6)(a1 + *(int *)(a2 + 20), v4);
}

uint64_t sub_10000573C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = sub_100005690(&qword_10006E688);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t sub_1000057B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = sub_100005690(&qword_10006E688);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t sub_100005824(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = sub_100005690(&qword_10006E688);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t sub_100005898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = sub_100005690(&qword_10006E688);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t sub_10000590C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100005918);
}

uint64_t sub_100005918(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005690(&qword_10006E688);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_100005958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100005964);
}

uint64_t sub_100005964(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005690(&qword_10006E688);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void sub_1000059A8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_100006334(319, (unint64_t *)&unk_10006E6F8, (uint64_t)&type metadata for Bool, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for Flag);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = v4[0];
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

uint64_t sub_100005A28()
{
  return sub_100005A54(&qword_10006E728, type metadata accessor for AKSDaemon, (uint64_t)&unk_10004A594);
}

uint64_t sub_100005A54(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100005A94()
{
  return sub_100005A54(&qword_10006E730, type metadata accessor for AKSDaemon, (uint64_t)&unk_10004A5BC);
}

uint64_t sub_100005AC0(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10004A818, a1);
  return _CFObject.hashValue.getter(a1, WitnessTable);
}

uint64_t sub_100005AFC(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10004A818, a2);
  return _CFObject.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_100005B44(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, a1);
  WitnessTable = swift_getWitnessTable(&unk_10004A818, a2);
  _CFObject.hash(into:)(v5, a2, WitnessTable);
  return Hasher._finalize()();
}

BOOL sub_100005B9C(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100005BB0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;

  v4 = *a1;
  v5 = *a2;
  WitnessTable = swift_getWitnessTable(&unk_10004A818, a3);
  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

void sub_100005BFC(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

uint64_t sub_100005C08(uint64_t result, _BYTE **a2)
{
  _BYTE *v2;

  v2 = *a2;
  *v2 = result;
  *a2 = v2 + 1;
  return result;
}

void sub_100005C18()
{
  NSObject *v0;
  void *v1;
  NSObject *v2;
  void *v3;
  void **v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  void *v7;
  void (*v8)(uint64_t);
  uint64_t v9;

  sub_100005DD8();
  v0 = static OS_dispatch_queue.main.getter();
  v8 = sub_1000048D8;
  v9 = 0;
  v4 = _NSConcreteStackBlock;
  v5 = 1107296256;
  v6 = sub_1000048E4;
  v7 = &unk_100066F10;
  v1 = _Block_copy(&v4);
  xpc_set_event_stream_handler("com.apple.iokit.matching", v0, v1);
  _Block_release(v1);

  v2 = static OS_dispatch_queue.main.getter();
  v8 = sub_10000492C;
  v9 = 0;
  v4 = _NSConcreteStackBlock;
  v5 = 1107296256;
  v6 = sub_1000048E4;
  v7 = &unk_100066F38;
  v3 = _Block_copy(&v4);
  xpc_set_event_stream_handler("com.apple.notifyd.matching", v2, v3);
  _Block_release(v3);

}

uint64_t sub_100005D1C(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

unint64_t sub_100005D34()
{
  unint64_t result;

  result = qword_10006E738;
  if (!qword_10006E738)
  {
    result = swift_getWitnessTable(&unk_10004A8D8, &type metadata for AppleKeyStore);
    atomic_store(result, (unint64_t *)&qword_10006E738);
  }
  return result;
}

uint64_t sub_100005D78(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t *sub_100005D98(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

unint64_t sub_100005DD8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10006E740;
  if (!qword_10006E740)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10006E740);
  }
  return result;
}

uint64_t sub_100005E14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100005E24(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

_QWORD *sub_100005E2C(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_100005E50()
{
  unint64_t result;

  result = qword_10006E758;
  if (!qword_10006E758)
  {
    result = swift_getWitnessTable(&unk_10004A888, &type metadata for AKSDaemon.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10006E758);
  }
  return result;
}

uint64_t sub_100005E94(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AKSDaemon(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100005ED0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10006E760;
  if (!qword_10006E760)
  {
    v1 = sub_100005F1C(&qword_10006E688);
    result = swift_getWitnessTable(&protocol conformance descriptor for Flag<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10006E760);
  }
  return result;
}

uint64_t sub_100005F1C(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_100005F60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AKSDaemon(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for CFNumber(uint64_t a1)
{
  sub_100006334(a1, &qword_10006E768, (uint64_t)&unk_100066F70, (uint64_t (*)(_QWORD, uint64_t))&swift_getForeignTypeMetadata);
}

void type metadata accessor for CFString(uint64_t a1)
{
  sub_100006334(a1, &qword_10006E770, (uint64_t)&unk_100066FA0, (uint64_t (*)(_QWORD, uint64_t))&swift_getForeignTypeMetadata);
}

_BYTE *initializeBufferWithCopyOfBuffer for AKSDaemon.CodingKeys(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for AKSDaemon.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AKSDaemon.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000060C4 + 4 * byte_10004A525[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000060F8 + 4 * byte_10004A520[v4]))();
}

uint64_t sub_1000060F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100006100(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100006108);
  return result;
}

uint64_t sub_100006114(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10000611CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100006120(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100006128(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100006134(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_100006140(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for AKSDaemon.CodingKeys()
{
  return &type metadata for AKSDaemon.CodingKeys;
}

uint64_t getEnumTagSinglePayload for AppleKeyStore(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AppleKeyStore(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100006238 + 4 * byte_10004A52F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10000626C + 4 * byte_10004A52A[v4]))();
}

uint64_t sub_10000626C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100006274(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10000627CLL);
  return result;
}

uint64_t sub_100006288(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100006290);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100006294(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000629C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_1000062A8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for AppleKeyStore()
{
  return &type metadata for AppleKeyStore;
}

__n128 sub_1000062C0(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_1000062CC(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1000062EC(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for AKSAnalyticsEventHeader(uint64_t a1)
{
  sub_100006334(a1, &qword_10006E778, (uint64_t)&unk_100067148, (uint64_t (*)(_QWORD, uint64_t))&swift_getForeignTypeMetadata);
}

void sub_100006334(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = a4(0, a3);
    if (!v6)
      atomic_store(v5, a2);
  }
}

unint64_t sub_10000637C()
{
  unint64_t result;

  result = qword_10006E780;
  if (!qword_10006E780)
  {
    result = swift_getWitnessTable(&unk_10004A6FC, &type metadata for AppleKeyStore);
    atomic_store(result, (unint64_t *)&qword_10006E780);
  }
  return result;
}

unint64_t sub_1000063C4()
{
  unint64_t result;

  result = qword_10006E788;
  if (!qword_10006E788)
  {
    result = swift_getWitnessTable(&unk_10004A7B4, &type metadata for AKSDaemon.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10006E788);
  }
  return result;
}

uint64_t sub_100006408()
{
  return sub_100005A54(&qword_10006E790, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_10004A844);
}

uint64_t sub_100006434()
{
  return sub_100005A54(&qword_10006E798, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_10004A7EC);
}

unint64_t sub_100006464()
{
  unint64_t result;

  result = qword_10006E7A0;
  if (!qword_10006E7A0)
  {
    result = swift_getWitnessTable(&unk_10004A724, &type metadata for AKSDaemon.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10006E7A0);
  }
  return result;
}

unint64_t sub_1000064AC()
{
  unint64_t result;

  result = qword_10006E7A8;
  if (!qword_10006E7A8)
  {
    result = swift_getWitnessTable(&unk_10004A74C, &type metadata for AKSDaemon.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10006E7A8);
  }
  return result;
}

uint64_t sub_1000064F0(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  char v6;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x8000000100050D10;
    if (a2 == 0x8000000100050D10)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100050D10, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x65646F4D74736574 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65646F4D74736574, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1000065E8(uint64_t a1)
{
  return sub_10000BAE4(a1, qword_100071A98, 0);
}

uint64_t sub_1000065F8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = *a1;
  KeyPath = swift_getKeyPath(&unk_10004B5C8);
  v4 = sub_100005A54(&qword_10006FFA0, type metadata accessor for AnalyticsSchemaV1.ProcessAnalytics, (uint64_t)&unk_10004B4A8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004B5C8);
  v6 = sub_100005A54(&qword_100070008, type metadata accessor for AnalyticsSchemaV1.ProcessAnalytics, (uint64_t)&unk_10004B564);
  PersistentModel.getValue<A>(forKey:)(v9, v5, v6, &protocol witness table for String);
  result = swift_release(v5);
  v8 = v9[1];
  *a2 = v9[0];
  a2[1] = v8;
  return result;
}

uint64_t sub_1000066DC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[7];
  uint64_t v8;

  v3 = *a1;
  v2 = a1[1];
  v8 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004B5C8);
  v7[2] = v8;
  v7[3] = v3;
  v7[4] = v2;
  v5 = sub_100005A54(&qword_10006FFA0, type metadata accessor for AnalyticsSchemaV1.ProcessAnalytics, (uint64_t)&unk_10004B4A8);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_100017838, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_1000067A0()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004B5C8);
  v2 = sub_100005A54(&qword_10006FFA0, type metadata accessor for AnalyticsSchemaV1.ProcessAnalytics, (uint64_t)&unk_10004B4A8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004B5C8);
  v4 = sub_100005A54(&qword_100070008, type metadata accessor for AnalyticsSchemaV1.ProcessAnalytics, (uint64_t)&unk_10004B564);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for String);
  swift_release(v3);
  return v6;
}

uint64_t sub_10000687C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = *a1;
  KeyPath = swift_getKeyPath(&unk_10004B5F0);
  v4 = sub_100005A54(&qword_10006FFA0, type metadata accessor for AnalyticsSchemaV1.ProcessAnalytics, (uint64_t)&unk_10004B4A8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004B5F0);
  v6 = sub_100005A54(&qword_100070008, type metadata accessor for AnalyticsSchemaV1.ProcessAnalytics, (uint64_t)&unk_10004B564);
  PersistentModel.getValue<A>(forKey:)(v9, v5, v6, &protocol witness table for String);
  result = swift_release(v5);
  v8 = v9[1];
  *a2 = v9[0];
  a2[1] = v8;
  return result;
}

uint64_t sub_100006960(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[7];
  uint64_t v8;

  v3 = *a1;
  v2 = a1[1];
  v8 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004B5F0);
  v7[2] = v8;
  v7[3] = v3;
  v7[4] = v2;
  v5 = sub_100005A54(&qword_10006FFA0, type metadata accessor for AnalyticsSchemaV1.ProcessAnalytics, (uint64_t)&unk_10004B4A8);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_1000177FC, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_100006A24()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004B5F0);
  v2 = sub_100005A54(&qword_10006FFA0, type metadata accessor for AnalyticsSchemaV1.ProcessAnalytics, (uint64_t)&unk_10004B4A8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004B5F0);
  v4 = sub_100005A54(&qword_100070008, type metadata accessor for AnalyticsSchemaV1.ProcessAnalytics, (uint64_t)&unk_10004B564);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for String);
  swift_release(v3);
  return v6;
}

uint64_t sub_100006B00@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v8 = *a1;
  KeyPath = swift_getKeyPath(&unk_10004B618);
  v4 = sub_100005A54(&qword_10006FFA0, type metadata accessor for AnalyticsSchemaV1.ProcessAnalytics, (uint64_t)&unk_10004B4A8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004B618);
  v6 = sub_100005A54(&qword_100070008, type metadata accessor for AnalyticsSchemaV1.ProcessAnalytics, (uint64_t)&unk_10004B564);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for UInt64);
  result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_100006BE4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004B618);
  v6[2] = v7;
  v6[3] = v2;
  v4 = sub_100005A54(&qword_10006FFA0, type metadata accessor for AnalyticsSchemaV1.ProcessAnalytics, (uint64_t)&unk_10004B4A8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_1000177E4, v6, (char *)&type metadata for () + 8, v4);
  return swift_release(KeyPath);
}

uint64_t sub_100006C88()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004B618);
  v2 = sub_100005A54(&qword_10006FFA0, type metadata accessor for AnalyticsSchemaV1.ProcessAnalytics, (uint64_t)&unk_10004B4A8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004B618);
  v4 = sub_100005A54(&qword_100070008, type metadata accessor for AnalyticsSchemaV1.ProcessAnalytics, (uint64_t)&unk_10004B564);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for UInt64);
  swift_release(v3);
  return v6;
}

uint64_t sub_100006D64(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_10004B618);
  v6 = a2;
  v4 = sub_100005A54(&qword_100070008, type metadata accessor for AnalyticsSchemaV1.ProcessAnalytics, (uint64_t)&unk_10004B564);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for UInt64);
  return swift_release(KeyPath);
}

uint64_t sub_100006DF0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v8 = *a1;
  KeyPath = swift_getKeyPath(&unk_10004B640);
  v4 = sub_100005A54(&qword_10006FFA0, type metadata accessor for AnalyticsSchemaV1.ProcessAnalytics, (uint64_t)&unk_10004B4A8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004B640);
  v6 = sub_100005A54(&qword_100070008, type metadata accessor for AnalyticsSchemaV1.ProcessAnalytics, (uint64_t)&unk_10004B564);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Int);
  result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_100006ED4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004B640);
  v6[2] = v7;
  v6[3] = v2;
  v4 = sub_100005A54(&qword_10006FFA0, type metadata accessor for AnalyticsSchemaV1.ProcessAnalytics, (uint64_t)&unk_10004B4A8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_1000177CC, v6, (char *)&type metadata for () + 8, v4);
  return swift_release(KeyPath);
}

uint64_t sub_100006F78()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004B640);
  v2 = sub_100005A54(&qword_10006FFA0, type metadata accessor for AnalyticsSchemaV1.ProcessAnalytics, (uint64_t)&unk_10004B4A8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004B640);
  v4 = sub_100005A54(&qword_100070008, type metadata accessor for AnalyticsSchemaV1.ProcessAnalytics, (uint64_t)&unk_10004B564);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Int);
  swift_release(v3);
  return v6;
}

uint64_t sub_100007054(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_10004B640);
  v6 = a2;
  v4 = sub_100005A54(&qword_100070008, type metadata accessor for AnalyticsSchemaV1.ProcessAnalytics, (uint64_t)&unk_10004B564);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for Int);
  return swift_release(KeyPath);
}

uint64_t sub_1000070E0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[24];
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v2 = v1;
  v4 = (_QWORD *)(v1 + 16);
  v5 = type metadata accessor for AnalyticsSchemaV1.ProcessAnalytics(0);
  *(_QWORD *)(v2 + 40) = sub_100005690(&qword_100070010);
  v6 = sub_100005A54(&qword_100070008, type metadata accessor for AnalyticsSchemaV1.ProcessAnalytics, (uint64_t)&unk_10004B564);
  *(_QWORD *)&v10 = v5;
  *((_QWORD *)&v10 + 1) = v5;
  v11 = v6;
  v12 = v6;
  *(_QWORD *)(v2 + 48) = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>, 1);
  sub_10001788C(v4);
  v7 = static PersistentModel.createBackingData<A>()(v5, v5, v6, v6);
  ObservationRegistrar.init()(v7);
  sub_100019FC4((uint64_t)a1, (uint64_t)&v10);
  swift_beginAccess(v4, v9, 33, 0);
  sub_100005D78(v4);
  sub_100017874(&v10, (uint64_t)v4);
  swift_endAccess(v9);
  sub_100005D78(a1);
  return v2;
}

uint64_t sub_1000071F4()
{
  return sub_10000898C(&OBJC_IVAR____TtCO14applekeystored17AnalyticsSchemaV116ProcessAnalytics___observationRegistrar);
}

uint64_t sub_100007200()
{
  return type metadata accessor for AnalyticsSchemaV1.ProcessAnalytics(0);
}

uint64_t type metadata accessor for AnalyticsSchemaV1.ProcessAnalytics(uint64_t a1)
{
  return sub_1000126CC(a1, qword_10006E8A0, (uint64_t)&nominal type descriptor for AnalyticsSchemaV1.ProcessAnalytics);
}

uint64_t sub_10000721C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = (char *)&value witness table for () + 64;
  v4[1] = (char *)&value witness table for () + 64;
  v4[2] = (char *)&value witness table for () + 64;
  v4[3] = (char *)&value witness table for () + 64;
  v4[4] = "(";
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1000072A8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v8 = *a1;
  KeyPath = swift_getKeyPath(&unk_10004B668);
  v4 = sub_100005A54(&qword_10006FF80, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B38C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004B668);
  v6 = sub_100005A54(&qword_100070028, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B448);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Int);
  result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_10000738C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004B668);
  v6[2] = v7;
  v6[3] = v2;
  v4 = sub_100005A54(&qword_10006FF80, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B38C);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_100017EFC, v6, (char *)&type metadata for () + 8, v4);
  return swift_release(KeyPath);
}

uint64_t sub_100007430()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004B668);
  v2 = sub_100005A54(&qword_10006FF80, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B38C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004B668);
  v4 = sub_100005A54(&qword_100070028, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B448);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Int);
  swift_release(v3);
  return v6;
}

uint64_t sub_10000750C(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_10004B668);
  v6 = a2;
  v4 = sub_100005A54(&qword_100070028, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B448);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for Int);
  return swift_release(KeyPath);
}

uint64_t sub_100007598@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = *a1;
  KeyPath = swift_getKeyPath(&unk_10004B690);
  v4 = sub_100005A54(&qword_10006FF80, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B38C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004B690);
  v6 = sub_100005A54(&qword_100070028, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B448);
  PersistentModel.getValue<A>(forKey:)(v9, v5, v6, &protocol witness table for String);
  result = swift_release(v5);
  v8 = v9[1];
  *a2 = v9[0];
  a2[1] = v8;
  return result;
}

uint64_t sub_10000767C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[7];
  uint64_t v8;

  v3 = *a1;
  v2 = a1[1];
  v8 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004B690);
  v7[2] = v8;
  v7[3] = v3;
  v7[4] = v2;
  v5 = sub_100005A54(&qword_10006FF80, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B38C);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_100017EC0, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_100007740()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004B690);
  v2 = sub_100005A54(&qword_10006FF80, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B38C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004B690);
  v4 = sub_100005A54(&qword_100070028, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B448);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for String);
  swift_release(v3);
  return v6;
}

uint64_t sub_10000781C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = *a1;
  KeyPath = swift_getKeyPath(&unk_10004B6B8);
  v4 = sub_100005A54(&qword_10006FF80, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B38C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004B6B8);
  v6 = sub_100005A54(&qword_100070028, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B448);
  PersistentModel.getValue<A>(forKey:)(v9, v5, v6, &protocol witness table for String);
  result = swift_release(v5);
  v8 = v9[1];
  *a2 = v9[0];
  a2[1] = v8;
  return result;
}

uint64_t sub_100007900(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[7];
  uint64_t v8;

  v3 = *a1;
  v2 = a1[1];
  v8 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004B6B8);
  v7[2] = v8;
  v7[3] = v3;
  v7[4] = v2;
  v5 = sub_100005A54(&qword_10006FF80, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B38C);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_100017E84, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_1000079C4()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004B6B8);
  v2 = sub_100005A54(&qword_10006FF80, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B38C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004B6B8);
  v4 = sub_100005A54(&qword_100070028, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B448);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for String);
  swift_release(v3);
  return v6;
}

uint64_t sub_100007AA0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = *a1;
  KeyPath = swift_getKeyPath(&unk_10004B6E0);
  v4 = sub_100005A54(&qword_10006FF80, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B38C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004B6E0);
  v6 = sub_100005A54(&qword_100070028, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B448);
  PersistentModel.getValue<A>(forKey:)(v9, v5, v6, &protocol witness table for String);
  result = swift_release(v5);
  v8 = v9[1];
  *a2 = v9[0];
  a2[1] = v8;
  return result;
}

uint64_t sub_100007B84(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[7];
  uint64_t v8;

  v3 = *a1;
  v2 = a1[1];
  v8 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004B6E0);
  v7[2] = v8;
  v7[3] = v3;
  v7[4] = v2;
  v5 = sub_100005A54(&qword_10006FF80, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B38C);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_100017E48, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_100007C48()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004B6E0);
  v2 = sub_100005A54(&qword_10006FF80, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B38C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004B6E0);
  v4 = sub_100005A54(&qword_100070028, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B448);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for String);
  swift_release(v3);
  return v6;
}

uint64_t sub_100007D24@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v8 = *a1;
  KeyPath = swift_getKeyPath(&unk_10004B708);
  v4 = sub_100005A54(&qword_10006FF80, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B38C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004B708);
  v6 = sub_100005A54(&qword_100070028, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B448);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for UInt64);
  result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_100007E08(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004B708);
  v6[2] = v7;
  v6[3] = v2;
  v4 = sub_100005A54(&qword_10006FF80, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B38C);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_100017E30, v6, (char *)&type metadata for () + 8, v4);
  return swift_release(KeyPath);
}

uint64_t sub_100007EAC()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004B708);
  v2 = sub_100005A54(&qword_10006FF80, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B38C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004B708);
  v4 = sub_100005A54(&qword_100070028, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B448);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for UInt64);
  swift_release(v3);
  return v6;
}

uint64_t sub_100007F88(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_10004B708);
  v6 = a2;
  v4 = sub_100005A54(&qword_100070028, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B448);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for UInt64);
  return swift_release(KeyPath);
}

uint64_t sub_100008014()
{
  return sub_1000081B8((uint64_t)&unk_10004B730);
}

uint64_t sub_100008020@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, _DWORD *a3@<X8>)
{
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  uint64_t v11;

  v11 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v6 = sub_100005A54(&qword_10006FF80, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B38C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v11, KeyPath, v6);
  swift_release(KeyPath);
  v7 = swift_getKeyPath(a2);
  v8 = sub_100005A54(&qword_100070028, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B448);
  PersistentModel.getValue<A>(forKey:)(&v10, v7, v8, &protocol witness table for UInt32);
  result = swift_release(v7);
  *a3 = v10;
  return result;
}

uint64_t sub_100008100(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v7;
  uint64_t KeyPath;
  uint64_t v9;
  _QWORD v11[3];
  int v12;
  uint64_t v13;

  v7 = *a1;
  v13 = *a2;
  KeyPath = swift_getKeyPath(a5);
  v11[2] = v13;
  v12 = v7;
  v9 = sub_100005A54(&qword_10006FF80, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B38C);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v13, KeyPath, a6, v11, (char *)&type metadata for () + 8, v9);
  return swift_release(KeyPath);
}

uint64_t sub_1000081AC()
{
  return sub_1000081B8((uint64_t)&unk_10004B758);
}

uint64_t sub_1000081B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v8;
  uint64_t v9;

  v9 = v1;
  KeyPath = swift_getKeyPath(a1);
  v4 = sub_100005A54(&qword_10006FF80, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B38C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(a1);
  v6 = sub_100005A54(&qword_100070028, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B448);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for UInt32);
  swift_release(v5);
  return v8;
}

uint64_t sub_10000828C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v8 = *a1;
  KeyPath = swift_getKeyPath(&unk_10004B780);
  v4 = sub_100005A54(&qword_10006FF80, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B38C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004B780);
  v6 = sub_100005A54(&qword_100070028, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B448);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for UInt64);
  result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_100008370(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004B780);
  v6[2] = v7;
  v6[3] = v2;
  v4 = sub_100005A54(&qword_10006FF80, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B38C);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_100017DA0, v6, (char *)&type metadata for () + 8, v4);
  return swift_release(KeyPath);
}

uint64_t sub_100008414()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004B780);
  v2 = sub_100005A54(&qword_10006FF80, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B38C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004B780);
  v4 = sub_100005A54(&qword_100070028, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B448);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for UInt64);
  swift_release(v3);
  return v6;
}

uint64_t sub_1000084F0(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_10004B780);
  v6 = a2;
  v4 = sub_100005A54(&qword_100070028, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B448);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for UInt64);
  return swift_release(KeyPath);
}

uint64_t sub_10000857C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v8 = *a1;
  KeyPath = swift_getKeyPath(&unk_10004B7A8);
  v4 = sub_100005A54(&qword_10006FF80, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B38C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004B7A8);
  v6 = sub_100005A54(&qword_100070028, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B448);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Int);
  result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_100008660(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004B7A8);
  v6[2] = v7;
  v6[3] = v2;
  v4 = sub_100005A54(&qword_10006FF80, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B38C);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_100017D88, v6, (char *)&type metadata for () + 8, v4);
  return swift_release(KeyPath);
}

uint64_t sub_100008704()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004B7A8);
  v2 = sub_100005A54(&qword_10006FF80, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B38C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004B7A8);
  v4 = sub_100005A54(&qword_100070028, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B448);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Int);
  swift_release(v3);
  return v6;
}

uint64_t sub_1000087E0(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_10004B7A8);
  v6 = a2;
  v4 = sub_100005A54(&qword_100070028, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B448);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for Int);
  return swift_release(KeyPath);
}

uint64_t sub_10000886C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[24];
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v2 = v1;
  v4 = (_QWORD *)(v1 + 16);
  v5 = type metadata accessor for AnalyticsSchemaV1.FileAnalytics(0);
  *(_QWORD *)(v2 + 40) = sub_100005690(&qword_100070030);
  v6 = sub_100005A54(&qword_100070028, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B448);
  *(_QWORD *)&v10 = v5;
  *((_QWORD *)&v10 + 1) = v5;
  v11 = v6;
  v12 = v6;
  *(_QWORD *)(v2 + 48) = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>, 1);
  sub_10001788C(v4);
  v7 = static PersistentModel.createBackingData<A>()(v5, v5, v6, v6);
  ObservationRegistrar.init()(v7);
  sub_100019FC4((uint64_t)a1, (uint64_t)&v10);
  swift_beginAccess(v4, v9, 33, 0);
  sub_100005D78(v4);
  sub_100017874(&v10, (uint64_t)v4);
  swift_endAccess(v9);
  sub_100005D78(a1);
  return v2;
}

uint64_t sub_100008980()
{
  return sub_10000898C(&OBJC_IVAR____TtCO14applekeystored17AnalyticsSchemaV113FileAnalytics___observationRegistrar);
}

uint64_t sub_10000898C(_QWORD *a1)
{
  _QWORD *v1;
  char *v3;
  uint64_t v4;

  sub_100005D78(v1 + 2);
  v3 = (char *)v1 + *a1;
  v4 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return swift_deallocClassInstance(v1, *(unsigned int *)(*v1 + 48), *(unsigned __int16 *)(*v1 + 52));
}

uint64_t sub_1000089E4()
{
  return type metadata accessor for AnalyticsSchemaV1.FileAnalytics(0);
}

uint64_t type metadata accessor for AnalyticsSchemaV1.FileAnalytics(uint64_t a1)
{
  return sub_1000126CC(a1, qword_10006EA88, (uint64_t)&nominal type descriptor for AnalyticsSchemaV1.FileAnalytics);
}

uint64_t sub_100008A00(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[11];

  v4[0] = (char *)&value witness table for () + 64;
  v4[1] = (char *)&value witness table for () + 64;
  v4[2] = (char *)&value witness table for () + 64;
  v4[3] = (char *)&value witness table for () + 64;
  v4[4] = (char *)&value witness table for () + 64;
  v4[5] = (char *)&value witness table for () + 64;
  v4[6] = (char *)&value witness table for () + 64;
  v4[7] = (char *)&value witness table for () + 64;
  v4[8] = (char *)&value witness table for () + 64;
  v4[9] = "(";
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[10] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 11, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100008A94@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v8 = *a1;
  KeyPath = swift_getKeyPath(&unk_10004B7D0);
  v4 = sub_100005A54(&qword_10006FF60, type metadata accessor for AnalyticsSchemaV1.PipelineState, (uint64_t)&unk_10004B270);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004B7D0);
  v6 = sub_100005A54(&qword_100070040, type metadata accessor for AnalyticsSchemaV1.PipelineState, (uint64_t)&unk_10004B32C);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Int);
  result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_100008B78(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004B7D0);
  v6[2] = v7;
  v6[3] = v2;
  v4 = sub_100005A54(&qword_10006FF60, type metadata accessor for AnalyticsSchemaV1.PipelineState, (uint64_t)&unk_10004B270);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_10001810C, v6, (char *)&type metadata for () + 8, v4);
  return swift_release(KeyPath);
}

uint64_t sub_100008C1C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004B7D0);
  v2 = sub_100005A54(&qword_10006FF60, type metadata accessor for AnalyticsSchemaV1.PipelineState, (uint64_t)&unk_10004B270);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004B7D0);
  v4 = sub_100005A54(&qword_100070040, type metadata accessor for AnalyticsSchemaV1.PipelineState, (uint64_t)&unk_10004B32C);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Int);
  swift_release(v3);
  return v6;
}

uint64_t sub_100008CF8(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_10004B7D0);
  v6 = a2;
  v4 = sub_100005A54(&qword_100070040, type metadata accessor for AnalyticsSchemaV1.PipelineState, (uint64_t)&unk_10004B32C);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for Int);
  return swift_release(KeyPath);
}

uint64_t sub_100008D84@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  char v9;
  uint64_t v10;
  char v11;

  v10 = *a1;
  KeyPath = swift_getKeyPath(&unk_10004B7F8);
  v4 = sub_100005A54(&qword_10006FF60, type metadata accessor for AnalyticsSchemaV1.PipelineState, (uint64_t)&unk_10004B270);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v10, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004B7F8);
  v6 = sub_100005A54(&qword_100070040, type metadata accessor for AnalyticsSchemaV1.PipelineState, (uint64_t)&unk_10004B32C);
  v7 = sub_1000180AC((unint64_t *)&qword_100070078, (uint64_t)&protocol witness table for Int, (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(&v10, v5, v6, v7);
  result = swift_release(v5);
  v9 = v11;
  *(_QWORD *)a2 = v10;
  *(_BYTE *)(a2 + 8) = v9;
  return result;
}

uint64_t sub_100008E8C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  char v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[4];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  v9 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004B7F8);
  v7[2] = v9;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_100005A54(&qword_10006FF60, type metadata accessor for AnalyticsSchemaV1.PipelineState, (uint64_t)&unk_10004B270);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_100018070, v7, (char *)&type metadata for () + 8, v5);
  return swift_release(KeyPath);
}

uint64_t sub_100008F40()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v7 = v0;
  KeyPath = swift_getKeyPath(&unk_10004B7F8);
  v2 = sub_100005A54(&qword_10006FF60, type metadata accessor for AnalyticsSchemaV1.PipelineState, (uint64_t)&unk_10004B270);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004B7F8);
  v4 = sub_100005A54(&qword_100070040, type metadata accessor for AnalyticsSchemaV1.PipelineState, (uint64_t)&unk_10004B32C);
  v5 = sub_1000180AC((unint64_t *)&qword_100070078, (uint64_t)&protocol witness table for Int, (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(&v7, v3, v4, v5);
  swift_release(v3);
  return v7;
}

uint64_t sub_10000903C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v9 = *a1;
  KeyPath = swift_getKeyPath(&unk_10004B820);
  v4 = sub_100005A54(&qword_10006FF60, type metadata accessor for AnalyticsSchemaV1.PipelineState, (uint64_t)&unk_10004B270);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004B820);
  v6 = sub_100005A54(&qword_100070040, type metadata accessor for AnalyticsSchemaV1.PipelineState, (uint64_t)&unk_10004B32C);
  v7 = sub_100017FEC((unint64_t *)&qword_100070058, &qword_100070060, (uint64_t)&protocol conformance descriptor for Date, (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(a2, v5, v6, v7);
  return swift_release(v5);
}

uint64_t sub_10000913C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  _BYTE v11[16];
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;

  v4 = sub_100005690(&qword_100070038);
  __chkstk_darwin(v4);
  v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100017F2C(a1, (uint64_t)v6);
  v14 = *a2;
  v7 = v14;
  KeyPath = swift_getKeyPath(&unk_10004B820);
  v12 = v7;
  v13 = v6;
  v9 = sub_100005A54(&qword_10006FF60, type metadata accessor for AnalyticsSchemaV1.PipelineState, (uint64_t)&unk_10004B270);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v14, KeyPath, sub_100017F74, v11, (char *)&type metadata for () + 8, v9);
  swift_release(KeyPath);
  return sub_100017FAC((uint64_t)v6);
}

uint64_t sub_100009230@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v9 = v1;
  KeyPath = swift_getKeyPath(&unk_10004B820);
  v4 = sub_100005A54(&qword_10006FF60, type metadata accessor for AnalyticsSchemaV1.PipelineState, (uint64_t)&unk_10004B270);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004B820);
  v6 = sub_100005A54(&qword_100070040, type metadata accessor for AnalyticsSchemaV1.PipelineState, (uint64_t)&unk_10004B32C);
  v7 = sub_100017FEC((unint64_t *)&qword_100070058, &qword_100070060, (uint64_t)&protocol conformance descriptor for Date, (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(a1, v5, v6, v7);
  return swift_release(v5);
}

uint64_t sub_100009330(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[24];
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v2 = v1;
  v4 = (_QWORD *)(v1 + 24);
  v5 = type metadata accessor for AnalyticsSchemaV1.PipelineState(0);
  *(_QWORD *)(v2 + 48) = sub_100005690(&qword_100070080);
  v6 = sub_100005A54(&qword_100070040, type metadata accessor for AnalyticsSchemaV1.PipelineState, (uint64_t)&unk_10004B32C);
  *(_QWORD *)&v10 = v5;
  *((_QWORD *)&v10 + 1) = v5;
  v11 = v6;
  v12 = v6;
  *(_QWORD *)(v2 + 56) = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>, 1);
  sub_10001788C(v4);
  v7 = static PersistentModel.createBackingData<A>()(v5, v5, v6, v6);
  *(_WORD *)(v2 + 16) = 257;
  ObservationRegistrar.init()(v7);
  *(_WORD *)(v2 + 16) = 0;
  sub_100019FC4((uint64_t)a1, (uint64_t)&v10);
  swift_beginAccess(v4, v9, 33, 0);
  sub_100005D78(v4);
  sub_100017874(&v10, (uint64_t)v4);
  swift_endAccess(v9);
  sub_100005D78(a1);
  return v2;
}

uint64_t sub_100009450()
{
  return sub_10000F7A4(&OBJC_IVAR____TtCO14applekeystored17AnalyticsSchemaV113PipelineState___observationRegistrar);
}

uint64_t sub_10000945C()
{
  return type metadata accessor for AnalyticsSchemaV1.PipelineState(0);
}

uint64_t type metadata accessor for AnalyticsSchemaV1.PipelineState(uint64_t a1)
{
  return sub_1000126CC(a1, qword_10006ED88, (uint64_t)&nominal type descriptor for AnalyticsSchemaV1.PipelineState);
}

uint64_t sub_10000947C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v8 = *a1;
  KeyPath = swift_getKeyPath(&unk_10004B848);
  v4 = sub_100005A54(&qword_10006FF40, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B154);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004B848);
  v6 = sub_100005A54(&qword_100070088, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B210);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Int);
  result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_100009560(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004B848);
  v6[2] = v7;
  v6[3] = v2;
  v4 = sub_100005A54(&qword_10006FF40, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B154);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_1000186B0, v6, (char *)&type metadata for () + 8, v4);
  return swift_release(KeyPath);
}

uint64_t sub_100009604()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004B848);
  v2 = sub_100005A54(&qword_10006FF40, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B154);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004B848);
  v4 = sub_100005A54(&qword_100070088, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B210);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Int);
  swift_release(v3);
  return v6;
}

uint64_t sub_1000096E0(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_10004B848);
  v6 = a2;
  v4 = sub_100005A54(&qword_100070088, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B210);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for Int);
  return swift_release(KeyPath);
}

uint64_t sub_10000976C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v8 = *a1;
  KeyPath = swift_getKeyPath(&unk_10004B870);
  v4 = sub_100005A54(&qword_10006FF40, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B154);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004B870);
  v6 = sub_100005A54(&qword_100070088, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B210);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Int);
  result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_100009850(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004B870);
  v6[2] = v7;
  v6[3] = v2;
  v4 = sub_100005A54(&qword_10006FF40, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B154);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_100018698, v6, (char *)&type metadata for () + 8, v4);
  return swift_release(KeyPath);
}

uint64_t sub_1000098F4()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004B870);
  v2 = sub_100005A54(&qword_10006FF40, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B154);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004B870);
  v4 = sub_100005A54(&qword_100070088, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B210);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Int);
  swift_release(v3);
  return v6;
}

uint64_t sub_1000099D0(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_10004B870);
  v6 = a2;
  v4 = sub_100005A54(&qword_100070088, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B210);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for Int);
  return swift_release(KeyPath);
}

uint64_t sub_100009A5C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v8 = *a1;
  KeyPath = swift_getKeyPath(&unk_10004B898);
  v4 = sub_100005A54(&qword_10006FF40, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B154);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004B898);
  v6 = sub_100005A54(&qword_100070088, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B210);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Int);
  result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_100009B40(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004B898);
  v6[2] = v7;
  v6[3] = v2;
  v4 = sub_100005A54(&qword_10006FF40, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B154);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_100018680, v6, (char *)&type metadata for () + 8, v4);
  return swift_release(KeyPath);
}

uint64_t sub_100009BE4()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004B898);
  v2 = sub_100005A54(&qword_10006FF40, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B154);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004B898);
  v4 = sub_100005A54(&qword_100070088, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B210);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Int);
  swift_release(v3);
  return v6;
}

uint64_t sub_100009CC0(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_10004B898);
  v6 = a2;
  v4 = sub_100005A54(&qword_100070088, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B210);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for Int);
  return swift_release(KeyPath);
}

uint64_t sub_100009D4C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v8 = *a1;
  KeyPath = swift_getKeyPath(&unk_10004B8C0);
  v4 = sub_100005A54(&qword_10006FF40, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B154);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004B8C0);
  v6 = sub_100005A54(&qword_100070088, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B210);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Int);
  result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_100009E30(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004B8C0);
  v6[2] = v7;
  v6[3] = v2;
  v4 = sub_100005A54(&qword_10006FF40, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B154);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_100018668, v6, (char *)&type metadata for () + 8, v4);
  return swift_release(KeyPath);
}

uint64_t sub_100009ED4()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004B8C0);
  v2 = sub_100005A54(&qword_10006FF40, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B154);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004B8C0);
  v4 = sub_100005A54(&qword_100070088, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B210);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Int);
  swift_release(v3);
  return v6;
}

uint64_t sub_100009FB0(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_10004B8C0);
  v6 = a2;
  v4 = sub_100005A54(&qword_100070088, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B210);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for Int);
  return swift_release(KeyPath);
}

uint64_t sub_10000A03C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v8 = *a1;
  KeyPath = swift_getKeyPath(&unk_10004B8E8);
  v4 = sub_100005A54(&qword_10006FF40, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B154);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004B8E8);
  v6 = sub_100005A54(&qword_100070088, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B210);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Int);
  result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_10000A120(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004B8E8);
  v6[2] = v7;
  v6[3] = v2;
  v4 = sub_100005A54(&qword_10006FF40, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B154);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_100018650, v6, (char *)&type metadata for () + 8, v4);
  return swift_release(KeyPath);
}

uint64_t sub_10000A1C4()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004B8E8);
  v2 = sub_100005A54(&qword_10006FF40, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B154);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004B8E8);
  v4 = sub_100005A54(&qword_100070088, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B210);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Int);
  swift_release(v3);
  return v6;
}

uint64_t sub_10000A2A0(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_10004B8E8);
  v6 = a2;
  v4 = sub_100005A54(&qword_100070088, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B210);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for Int);
  return swift_release(KeyPath);
}

uint64_t sub_10000A32C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v8 = *a1;
  KeyPath = swift_getKeyPath(&unk_10004B910);
  v4 = sub_100005A54(&qword_10006FF40, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B154);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004B910);
  v6 = sub_100005A54(&qword_100070088, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B210);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Int);
  result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_10000A410(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004B910);
  v6[2] = v7;
  v6[3] = v2;
  v4 = sub_100005A54(&qword_10006FF40, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B154);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_100018638, v6, (char *)&type metadata for () + 8, v4);
  return swift_release(KeyPath);
}

uint64_t sub_10000A4B4()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004B910);
  v2 = sub_100005A54(&qword_10006FF40, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B154);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004B910);
  v4 = sub_100005A54(&qword_100070088, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B210);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Int);
  swift_release(v3);
  return v6;
}

uint64_t sub_10000A590(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_10004B910);
  v6 = a2;
  v4 = sub_100005A54(&qword_100070088, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B210);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for Int);
  return swift_release(KeyPath);
}

uint64_t sub_10000A61C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v8 = *a1;
  KeyPath = swift_getKeyPath(&unk_10004B938);
  v4 = sub_100005A54(&qword_10006FF40, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B154);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004B938);
  v6 = sub_100005A54(&qword_100070088, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B210);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Int);
  result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_10000A700(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004B938);
  v6[2] = v7;
  v6[3] = v2;
  v4 = sub_100005A54(&qword_10006FF40, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B154);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_100018620, v6, (char *)&type metadata for () + 8, v4);
  return swift_release(KeyPath);
}

uint64_t sub_10000A7A4()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004B938);
  v2 = sub_100005A54(&qword_10006FF40, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B154);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004B938);
  v4 = sub_100005A54(&qword_100070088, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B210);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Int);
  swift_release(v3);
  return v6;
}

uint64_t sub_10000A880(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_10004B938);
  v6 = a2;
  v4 = sub_100005A54(&qword_100070088, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B210);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for Int);
  return swift_release(KeyPath);
}

uint64_t sub_10000A90C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v8 = *a1;
  KeyPath = swift_getKeyPath(&unk_10004B960);
  v4 = sub_100005A54(&qword_10006FF40, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B154);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004B960);
  v6 = sub_100005A54(&qword_100070088, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B210);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Int);
  result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_10000A9F0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004B960);
  v6[2] = v7;
  v6[3] = v2;
  v4 = sub_100005A54(&qword_10006FF40, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B154);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_100018608, v6, (char *)&type metadata for () + 8, v4);
  return swift_release(KeyPath);
}

uint64_t sub_10000AA94()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004B960);
  v2 = sub_100005A54(&qword_10006FF40, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B154);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004B960);
  v4 = sub_100005A54(&qword_100070088, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B210);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Int);
  swift_release(v3);
  return v6;
}

uint64_t sub_10000AB70(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_10004B960);
  v6 = a2;
  v4 = sub_100005A54(&qword_100070088, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B210);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for Int);
  return swift_release(KeyPath);
}

uint64_t sub_10000ABFC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v8 = *a1;
  KeyPath = swift_getKeyPath(&unk_10004B988);
  v4 = sub_100005A54(&qword_10006FF40, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B154);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004B988);
  v6 = sub_100005A54(&qword_100070088, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B210);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Int);
  result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_10000ACE0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004B988);
  v6[2] = v7;
  v6[3] = v2;
  v4 = sub_100005A54(&qword_10006FF40, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B154);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_1000185F0, v6, (char *)&type metadata for () + 8, v4);
  return swift_release(KeyPath);
}

uint64_t sub_10000AD84()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004B988);
  v2 = sub_100005A54(&qword_10006FF40, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B154);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004B988);
  v4 = sub_100005A54(&qword_100070088, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B210);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Int);
  swift_release(v3);
  return v6;
}

uint64_t sub_10000AE60(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_10004B988);
  v6 = a2;
  v4 = sub_100005A54(&qword_100070088, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B210);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for Int);
  return swift_release(KeyPath);
}

uint64_t sub_10000AEEC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v8 = *a1;
  KeyPath = swift_getKeyPath(&unk_10004B9B0);
  v4 = sub_100005A54(&qword_10006FF40, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B154);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004B9B0);
  v6 = sub_100005A54(&qword_100070088, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B210);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Int);
  result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_10000AFD0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004B9B0);
  v6[2] = v7;
  v6[3] = v2;
  v4 = sub_100005A54(&qword_10006FF40, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B154);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_1000185D8, v6, (char *)&type metadata for () + 8, v4);
  return swift_release(KeyPath);
}

uint64_t sub_10000B074()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004B9B0);
  v2 = sub_100005A54(&qword_10006FF40, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B154);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004B9B0);
  v4 = sub_100005A54(&qword_100070088, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B210);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Int);
  swift_release(v3);
  return v6;
}

uint64_t sub_10000B150(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_10004B9B0);
  v6 = a2;
  v4 = sub_100005A54(&qword_100070088, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B210);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for Int);
  return swift_release(KeyPath);
}

uint64_t sub_10000B1DC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v8 = *a1;
  KeyPath = swift_getKeyPath(&unk_10004B9D8);
  v4 = sub_100005A54(&qword_10006FF40, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B154);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004B9D8);
  v6 = sub_100005A54(&qword_100070088, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B210);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Int);
  result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_10000B2C0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004B9D8);
  v6[2] = v7;
  v6[3] = v2;
  v4 = sub_100005A54(&qword_10006FF40, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B154);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_1000185C0, v6, (char *)&type metadata for () + 8, v4);
  return swift_release(KeyPath);
}

uint64_t sub_10000B364()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004B9D8);
  v2 = sub_100005A54(&qword_10006FF40, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B154);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004B9D8);
  v4 = sub_100005A54(&qword_100070088, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B210);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Int);
  swift_release(v3);
  return v6;
}

uint64_t sub_10000B440(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_10004B9D8);
  v6 = a2;
  v4 = sub_100005A54(&qword_100070088, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B210);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for Int);
  return swift_release(KeyPath);
}

uint64_t sub_10000B4CC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v42[3];
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v2 = v1;
  v4 = (_QWORD *)(v1 + 16);
  v5 = type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters(0);
  *(_QWORD *)(v2 + 40) = sub_100005690(&qword_100070090);
  v6 = sub_100005A54(&qword_100070088, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B210);
  *(_QWORD *)&v43 = v5;
  *((_QWORD *)&v43 + 1) = v5;
  v44 = v6;
  v45 = v6;
  *(_QWORD *)(v2 + 48) = swift_getOpaqueTypeConformance2(&v43, &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>, 1);
  sub_10001788C(v4);
  static PersistentModel.createBackingData<A>()(v5, v5, v6, v6);
  sub_100019FC4((uint64_t)v4, (uint64_t)&v43);
  v7 = v45;
  v8 = v46;
  sub_100005E2C(&v43, v45);
  KeyPath = swift_getKeyPath(&unk_10004B848);
  v42[0] = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(KeyPath, v42, &type metadata for Int, &protocol witness table for Int, v7, v8);
  swift_release(KeyPath);
  sub_100005D78(&v43);
  sub_100019FC4((uint64_t)v4, (uint64_t)&v43);
  v10 = v45;
  v11 = v46;
  sub_100005E2C(&v43, v45);
  v12 = swift_getKeyPath(&unk_10004B870);
  v42[0] = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v12, v42, &type metadata for Int, &protocol witness table for Int, v10, v11);
  swift_release(v12);
  sub_100005D78(&v43);
  sub_100019FC4((uint64_t)v4, (uint64_t)&v43);
  v13 = v45;
  v14 = v46;
  sub_100005E2C(&v43, v45);
  v15 = swift_getKeyPath(&unk_10004B898);
  v42[0] = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v15, v42, &type metadata for Int, &protocol witness table for Int, v13, v14);
  swift_release(v15);
  sub_100005D78(&v43);
  sub_100019FC4((uint64_t)v4, (uint64_t)&v43);
  v16 = v45;
  v17 = v46;
  sub_100005E2C(&v43, v45);
  v18 = swift_getKeyPath(&unk_10004B8C0);
  v42[0] = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v18, v42, &type metadata for Int, &protocol witness table for Int, v16, v17);
  swift_release(v18);
  sub_100005D78(&v43);
  sub_100019FC4((uint64_t)v4, (uint64_t)&v43);
  v19 = v45;
  v20 = v46;
  sub_100005E2C(&v43, v45);
  v21 = swift_getKeyPath(&unk_10004B8E8);
  v42[0] = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v21, v42, &type metadata for Int, &protocol witness table for Int, v19, v20);
  swift_release(v21);
  sub_100005D78(&v43);
  sub_100019FC4((uint64_t)v4, (uint64_t)&v43);
  v22 = v45;
  v23 = v46;
  sub_100005E2C(&v43, v45);
  v24 = swift_getKeyPath(&unk_10004B910);
  v42[0] = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v24, v42, &type metadata for Int, &protocol witness table for Int, v22, v23);
  swift_release(v24);
  sub_100005D78(&v43);
  sub_100019FC4((uint64_t)v4, (uint64_t)&v43);
  v25 = v45;
  v26 = v46;
  sub_100005E2C(&v43, v45);
  v27 = swift_getKeyPath(&unk_10004B938);
  v42[0] = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v27, v42, &type metadata for Int, &protocol witness table for Int, v25, v26);
  swift_release(v27);
  sub_100005D78(&v43);
  sub_100019FC4((uint64_t)v4, (uint64_t)&v43);
  v28 = v45;
  v29 = v46;
  sub_100005E2C(&v43, v45);
  v30 = swift_getKeyPath(&unk_10004B960);
  v42[0] = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v30, v42, &type metadata for Int, &protocol witness table for Int, v28, v29);
  swift_release(v30);
  sub_100005D78(&v43);
  sub_100019FC4((uint64_t)v4, (uint64_t)&v43);
  v31 = v45;
  v32 = v46;
  sub_100005E2C(&v43, v45);
  v33 = swift_getKeyPath(&unk_10004B988);
  v42[0] = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v33, v42, &type metadata for Int, &protocol witness table for Int, v31, v32);
  swift_release(v33);
  sub_100005D78(&v43);
  sub_100019FC4((uint64_t)v4, (uint64_t)&v43);
  v34 = v45;
  v35 = v46;
  sub_100005E2C(&v43, v45);
  v36 = swift_getKeyPath(&unk_10004B9B0);
  v42[0] = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v36, v42, &type metadata for Int, &protocol witness table for Int, v34, v35);
  swift_release(v36);
  sub_100005D78(&v43);
  sub_100019FC4((uint64_t)v4, (uint64_t)&v43);
  v37 = v45;
  v38 = v46;
  sub_100005E2C(&v43, v45);
  v39 = swift_getKeyPath(&unk_10004B9D8);
  v42[0] = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v39, v42, &type metadata for Int, &protocol witness table for Int, v37, v38);
  swift_release(v39);
  v40 = sub_100005D78(&v43);
  ObservationRegistrar.init()(v40);
  sub_100019FC4((uint64_t)a1, (uint64_t)&v43);
  swift_beginAccess(v4, v42, 33, 0);
  sub_100005D78(v4);
  sub_100017874(&v43, (uint64_t)v4);
  swift_endAccess(v42);
  sub_100005D78(a1);
  return v2;
}

uint64_t sub_10000B9F4()
{
  return sub_10000898C(&OBJC_IVAR____TtCO14applekeystored17AnalyticsSchemaV117AnalyticsCounters___observationRegistrar);
}

uint64_t sub_10000BA00()
{
  return type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters(0);
}

uint64_t type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters(uint64_t a1)
{
  return sub_1000126CC(a1, qword_10006EF38, (uint64_t)&nominal type descriptor for AnalyticsSchemaV1.AnalyticsCounters);
}

uint64_t sub_10000BA1C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[13];

  v4[0] = (char *)&value witness table for () + 64;
  v4[1] = (char *)&value witness table for () + 64;
  v4[2] = (char *)&value witness table for () + 64;
  v4[3] = (char *)&value witness table for () + 64;
  v4[4] = (char *)&value witness table for () + 64;
  v4[5] = (char *)&value witness table for () + 64;
  v4[6] = (char *)&value witness table for () + 64;
  v4[7] = (char *)&value witness table for () + 64;
  v4[8] = (char *)&value witness table for () + 64;
  v4[9] = (char *)&value witness table for () + 64;
  v4[10] = (char *)&value witness table for () + 64;
  v4[11] = "(";
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[12] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 13, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10000BAB8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000127BC(&qword_10006E5A8, (uint64_t)qword_100071A98, (uint64_t)sub_1000065E8, a1);
}

uint64_t sub_10000BAD4(uint64_t a1)
{
  return sub_10000BAE4(a1, qword_100071AB0, 1);
}

uint64_t sub_10000BAE4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;

  v5 = type metadata accessor for Schema.Version(0);
  sub_100005D98(v5, a2);
  sub_100005D1C(v5, (uint64_t)a2);
  return Schema.Version.init(_:_:_:)(1, a3, 0);
}

uint64_t sub_10000BB40@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = *a1;
  KeyPath = swift_getKeyPath(&unk_10004BA00);
  v4 = sub_100005A54(&qword_10006FF20, type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics, (uint64_t)&unk_10004B038);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004BA00);
  v6 = sub_100005A54(&qword_10006FFC8, type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics, (uint64_t)&unk_10004B0F4);
  PersistentModel.getValue<A>(forKey:)(v9, v5, v6, &protocol witness table for String);
  result = swift_release(v5);
  v8 = v9[1];
  *a2 = v9[0];
  a2[1] = v8;
  return result;
}

uint64_t sub_10000BC24(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[7];
  uint64_t v8;

  v3 = *a1;
  v2 = a1[1];
  v8 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004BA00);
  v7[2] = v8;
  v7[3] = v3;
  v7[4] = v2;
  v5 = sub_100005A54(&qword_10006FF20, type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics, (uint64_t)&unk_10004B038);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_100018AAC, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10000BCE8()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004BA00);
  v2 = sub_100005A54(&qword_10006FF20, type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics, (uint64_t)&unk_10004B038);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004BA00);
  v4 = sub_100005A54(&qword_10006FFC8, type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics, (uint64_t)&unk_10004B0F4);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for String);
  swift_release(v3);
  return v6;
}

uint64_t sub_10000BDC4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = *a1;
  KeyPath = swift_getKeyPath(&unk_10004BA28);
  v4 = sub_100005A54(&qword_10006FF20, type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics, (uint64_t)&unk_10004B038);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004BA28);
  v6 = sub_100005A54(&qword_10006FFC8, type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics, (uint64_t)&unk_10004B0F4);
  PersistentModel.getValue<A>(forKey:)(v9, v5, v6, &protocol witness table for String);
  result = swift_release(v5);
  v8 = v9[1];
  *a2 = v9[0];
  a2[1] = v8;
  return result;
}

uint64_t sub_10000BEA8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[7];
  uint64_t v8;

  v3 = *a1;
  v2 = a1[1];
  v8 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004BA28);
  v7[2] = v8;
  v7[3] = v3;
  v7[4] = v2;
  v5 = sub_100005A54(&qword_10006FF20, type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics, (uint64_t)&unk_10004B038);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_100018A70, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10000BF6C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004BA28);
  v2 = sub_100005A54(&qword_10006FF20, type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics, (uint64_t)&unk_10004B038);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004BA28);
  v4 = sub_100005A54(&qword_10006FFC8, type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics, (uint64_t)&unk_10004B0F4);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for String);
  swift_release(v3);
  return v6;
}

uint64_t sub_10000C048@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = *a1;
  KeyPath = swift_getKeyPath(&unk_10004BA50);
  v4 = sub_100005A54(&qword_10006FF20, type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics, (uint64_t)&unk_10004B038);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004BA50);
  v6 = sub_100005A54(&qword_10006FFC8, type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics, (uint64_t)&unk_10004B0F4);
  PersistentModel.getValue<A>(forKey:)(v9, v5, v6, &protocol witness table for String);
  result = swift_release(v5);
  v8 = v9[1];
  *a2 = v9[0];
  a2[1] = v8;
  return result;
}

uint64_t sub_10000C12C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[7];
  uint64_t v8;

  v3 = *a1;
  v2 = a1[1];
  v8 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004BA50);
  v7[2] = v8;
  v7[3] = v3;
  v7[4] = v2;
  v5 = sub_100005A54(&qword_10006FF20, type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics, (uint64_t)&unk_10004B038);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_100018A34, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10000C1F0()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004BA50);
  v2 = sub_100005A54(&qword_10006FF20, type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics, (uint64_t)&unk_10004B038);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004BA50);
  v4 = sub_100005A54(&qword_10006FFC8, type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics, (uint64_t)&unk_10004B0F4);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for String);
  swift_release(v3);
  return v6;
}

uint64_t sub_10000C2CC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v8 = *a1;
  KeyPath = swift_getKeyPath(&unk_10004BA78);
  v4 = sub_100005A54(&qword_10006FF20, type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics, (uint64_t)&unk_10004B038);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004BA78);
  v6 = sub_100005A54(&qword_10006FFC8, type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics, (uint64_t)&unk_10004B0F4);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for UInt64);
  result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_10000C3B0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004BA78);
  v6[2] = v7;
  v6[3] = v2;
  v4 = sub_100005A54(&qword_10006FF20, type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics, (uint64_t)&unk_10004B038);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_100018A1C, v6, (char *)&type metadata for () + 8, v4);
  return swift_release(KeyPath);
}

uint64_t sub_10000C454()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004BA78);
  v2 = sub_100005A54(&qword_10006FF20, type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics, (uint64_t)&unk_10004B038);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004BA78);
  v4 = sub_100005A54(&qword_10006FFC8, type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics, (uint64_t)&unk_10004B0F4);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for UInt64);
  swift_release(v3);
  return v6;
}

uint64_t sub_10000C530(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_10004BA78);
  v6 = a2;
  v4 = sub_100005A54(&qword_10006FFC8, type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics, (uint64_t)&unk_10004B0F4);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for UInt64);
  return swift_release(KeyPath);
}

uint64_t sub_10000C5BC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v8 = *a1;
  KeyPath = swift_getKeyPath(&unk_10004BAA0);
  v4 = sub_100005A54(&qword_10006FF20, type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics, (uint64_t)&unk_10004B038);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004BAA0);
  v6 = sub_100005A54(&qword_10006FFC8, type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics, (uint64_t)&unk_10004B0F4);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Int);
  result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_10000C6A0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004BAA0);
  v6[2] = v7;
  v6[3] = v2;
  v4 = sub_100005A54(&qword_10006FF20, type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics, (uint64_t)&unk_10004B038);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_100018A04, v6, (char *)&type metadata for () + 8, v4);
  return swift_release(KeyPath);
}

uint64_t sub_10000C744()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004BAA0);
  v2 = sub_100005A54(&qword_10006FF20, type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics, (uint64_t)&unk_10004B038);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004BAA0);
  v4 = sub_100005A54(&qword_10006FFC8, type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics, (uint64_t)&unk_10004B0F4);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Int);
  swift_release(v3);
  return v6;
}

uint64_t sub_10000C820(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_10004BAA0);
  v6 = a2;
  v4 = sub_100005A54(&qword_10006FFC8, type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics, (uint64_t)&unk_10004B0F4);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for Int);
  return swift_release(KeyPath);
}

void sub_10000C8AC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t KeyPath;
  _QWORD v15[2];
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;

  v4 = v3;
  v8 = (_QWORD *)(v3 + 16);
  v9 = type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics(0);
  *(_QWORD *)(v4 + 40) = sub_100005690(&qword_100070098);
  v10 = sub_100005A54(&qword_10006FFC8, type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics, (uint64_t)&unk_10004B0F4);
  v16[0] = v9;
  v16[1] = v9;
  v16[2] = v10;
  v17 = v10;
  *(_QWORD *)(v4 + 48) = swift_getOpaqueTypeConformance2(v16, &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>, 1);
  sub_10001788C(v8);
  v11 = static PersistentModel.createBackingData<A>()(v9, v9, v10, v10);
  ObservationRegistrar.init()(v11);
  sub_100019FC4((uint64_t)v8, (uint64_t)v16);
  v13 = v17;
  v12 = v18;
  sub_100005E2C(v16, v17);
  KeyPath = swift_getKeyPath(&unk_10004BA00);
  v15[0] = a1;
  v15[1] = a2;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(KeyPath, v15, &type metadata for String, &protocol witness table for String, v13, v12);
  swift_bridgeObjectRelease(a2);
  swift_release(KeyPath);
  sub_100005D78(v16);
  __asm { BR              X10 }
}

uint64_t sub_10000CA0C()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;

  sub_100019FC4(v1, (uint64_t)v23);
  v3 = v24;
  v4 = v25;
  sub_100005E2C(v23, v24);
  KeyPath = swift_getKeyPath(&unk_10004BA28);
  v21 = 0x6574697277;
  v22 = 0xE500000000000000;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(KeyPath, &v21, &type metadata for String, &protocol witness table for String, v3, v4);
  swift_bridgeObjectRelease(0xE500000000000000);
  swift_release(KeyPath);
  sub_100005D78(v23);
  v6 = sub_100040D68(v2);
  v8 = v7;
  sub_100019FC4(v1, (uint64_t)v23);
  v9 = v24;
  v10 = v25;
  sub_100005E2C(v23, v24);
  v11 = swift_getKeyPath(&unk_10004BA50);
  v21 = v6;
  v22 = v8;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v11, &v21, &type metadata for String, &protocol witness table for String, v9, v10);
  swift_bridgeObjectRelease(v8);
  swift_release(v11);
  sub_100005D78(v23);
  sub_100019FC4(v1, (uint64_t)v23);
  v12 = v24;
  v13 = v25;
  sub_100005E2C(v23, v24);
  v14 = swift_getKeyPath(&unk_10004BA78);
  v21 = v19;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v14, &v21, &type metadata for UInt64, &protocol witness table for UInt64, v12, v13);
  swift_release(v14);
  sub_100005D78(v23);
  sub_100019FC4(v1, (uint64_t)v23);
  v15 = v24;
  v16 = v25;
  sub_100005E2C(v23, v24);
  v17 = swift_getKeyPath(&unk_10004BAA0);
  v21 = v20;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v17, &v21, &type metadata for Int, &protocol witness table for Int, v15, v16);
  swift_release(v17);
  sub_100005D78(v23);
  return v0;
}

uint64_t sub_10000CC44(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[24];
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v2 = v1;
  v4 = (_QWORD *)(v1 + 16);
  v5 = type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics(0);
  *(_QWORD *)(v2 + 40) = sub_100005690(&qword_100070098);
  v6 = sub_100005A54(&qword_10006FFC8, type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics, (uint64_t)&unk_10004B0F4);
  *(_QWORD *)&v10 = v5;
  *((_QWORD *)&v10 + 1) = v5;
  v11 = v6;
  v12 = v6;
  *(_QWORD *)(v2 + 48) = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>, 1);
  sub_10001788C(v4);
  v7 = static PersistentModel.createBackingData<A>()(v5, v5, v6, v6);
  ObservationRegistrar.init()(v7);
  sub_100019FC4((uint64_t)a1, (uint64_t)&v10);
  swift_beginAccess(v4, v9, 33, 0);
  sub_100005D78(v4);
  sub_100017874(&v10, (uint64_t)v4);
  swift_endAccess(v9);
  sub_100005D78(a1);
  return v2;
}

uint64_t sub_10000CD58()
{
  return sub_10000898C(&OBJC_IVAR____TtCO14applekeystored17AnalyticsSchemaV216ProcessAnalytics___observationRegistrar);
}

uint64_t sub_10000CD64()
{
  return type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics(0);
}

uint64_t type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics(uint64_t a1)
{
  return sub_1000126CC(a1, qword_10006F2A8, (uint64_t)&nominal type descriptor for AnalyticsSchemaV2.ProcessAnalytics);
}

uint64_t sub_10000CD80(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = (char *)&value witness table for () + 64;
  v4[1] = (char *)&value witness table for () + 64;
  v4[2] = (char *)&value witness table for () + 64;
  v4[3] = (char *)&value witness table for () + 64;
  v4[4] = (char *)&value witness table for () + 64;
  v4[5] = "(";
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[6] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 7, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10000CE0C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v8 = *a1;
  KeyPath = swift_getKeyPath(&unk_10004BAC8);
  v4 = sub_100005A54(&qword_10006FF00, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AF1C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004BAC8);
  v6 = sub_100005A54(&qword_10006FFD0, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AFD8);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Int);
  result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_10000CEF0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004BAC8);
  v6[2] = v7;
  v6[3] = v2;
  v4 = sub_100005A54(&qword_10006FF00, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AF1C);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_100019774, v6, (char *)&type metadata for () + 8, v4);
  return swift_release(KeyPath);
}

uint64_t sub_10000CF94()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004BAC8);
  v2 = sub_100005A54(&qword_10006FF00, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AF1C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004BAC8);
  v4 = sub_100005A54(&qword_10006FFD0, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AFD8);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Int);
  swift_release(v3);
  return v6;
}

uint64_t sub_10000D070(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_10004BAC8);
  v6 = a2;
  v4 = sub_100005A54(&qword_10006FFD0, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AFD8);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for Int);
  return swift_release(KeyPath);
}

uint64_t sub_10000D0FC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = *a1;
  KeyPath = swift_getKeyPath(&unk_10004BAF0);
  v4 = sub_100005A54(&qword_10006FF00, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AF1C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004BAF0);
  v6 = sub_100005A54(&qword_10006FFD0, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AFD8);
  PersistentModel.getValue<A>(forKey:)(v9, v5, v6, &protocol witness table for String);
  result = swift_release(v5);
  v8 = v9[1];
  *a2 = v9[0];
  a2[1] = v8;
  return result;
}

uint64_t sub_10000D1E0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[7];
  uint64_t v8;

  v3 = *a1;
  v2 = a1[1];
  v8 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004BAF0);
  v7[2] = v8;
  v7[3] = v3;
  v7[4] = v2;
  v5 = sub_100005A54(&qword_10006FF00, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AF1C);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_100019738, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10000D2A4()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004BAF0);
  v2 = sub_100005A54(&qword_10006FF00, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AF1C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004BAF0);
  v4 = sub_100005A54(&qword_10006FFD0, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AFD8);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for String);
  swift_release(v3);
  return v6;
}

uint64_t sub_10000D380@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = *a1;
  KeyPath = swift_getKeyPath(&unk_10004BB18);
  v4 = sub_100005A54(&qword_10006FF00, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AF1C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004BB18);
  v6 = sub_100005A54(&qword_10006FFD0, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AFD8);
  PersistentModel.getValue<A>(forKey:)(v9, v5, v6, &protocol witness table for String);
  result = swift_release(v5);
  v8 = v9[1];
  *a2 = v9[0];
  a2[1] = v8;
  return result;
}

uint64_t sub_10000D464(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[7];
  uint64_t v8;

  v3 = *a1;
  v2 = a1[1];
  v8 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004BB18);
  v7[2] = v8;
  v7[3] = v3;
  v7[4] = v2;
  v5 = sub_100005A54(&qword_10006FF00, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AF1C);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_1000196FC, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10000D528()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004BB18);
  v2 = sub_100005A54(&qword_10006FF00, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AF1C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004BB18);
  v4 = sub_100005A54(&qword_10006FFD0, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AFD8);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for String);
  swift_release(v3);
  return v6;
}

uint64_t sub_10000D604@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = *a1;
  KeyPath = swift_getKeyPath(&unk_10004BB40);
  v4 = sub_100005A54(&qword_10006FF00, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AF1C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004BB40);
  v6 = sub_100005A54(&qword_10006FFD0, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AFD8);
  PersistentModel.getValue<A>(forKey:)(v9, v5, v6, &protocol witness table for String);
  result = swift_release(v5);
  v8 = v9[1];
  *a2 = v9[0];
  a2[1] = v8;
  return result;
}

uint64_t sub_10000D6E8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[7];
  uint64_t v8;

  v3 = *a1;
  v2 = a1[1];
  v8 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004BB40);
  v7[2] = v8;
  v7[3] = v3;
  v7[4] = v2;
  v5 = sub_100005A54(&qword_10006FF00, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AF1C);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_1000196C0, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10000D7AC()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004BB40);
  v2 = sub_100005A54(&qword_10006FF00, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AF1C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004BB40);
  v4 = sub_100005A54(&qword_10006FFD0, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AFD8);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for String);
  swift_release(v3);
  return v6;
}

uint64_t sub_10000D888@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = *a1;
  KeyPath = swift_getKeyPath(&unk_10004BB68);
  v4 = sub_100005A54(&qword_10006FF00, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AF1C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004BB68);
  v6 = sub_100005A54(&qword_10006FFD0, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AFD8);
  PersistentModel.getValue<A>(forKey:)(v9, v5, v6, &protocol witness table for String);
  result = swift_release(v5);
  v8 = v9[1];
  *a2 = v9[0];
  a2[1] = v8;
  return result;
}

uint64_t sub_10000D96C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[7];
  uint64_t v8;

  v3 = *a1;
  v2 = a1[1];
  v8 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004BB68);
  v7[2] = v8;
  v7[3] = v3;
  v7[4] = v2;
  v5 = sub_100005A54(&qword_10006FF00, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AF1C);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_100019684, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10000DA30()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004BB68);
  v2 = sub_100005A54(&qword_10006FF00, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AF1C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004BB68);
  v4 = sub_100005A54(&qword_10006FFD0, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AFD8);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for String);
  swift_release(v3);
  return v6;
}

uint64_t sub_10000DB0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t (*a6)(uint64_t), uint64_t a7)
{
  uint64_t KeyPath;
  uint64_t v13;
  _QWORD v15[2];

  KeyPath = swift_getKeyPath(a4);
  v15[0] = a2;
  v15[1] = a3;
  v13 = sub_100005A54(a5, a6, a7);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, v15, v13, &protocol witness table for String);
  return swift_release(KeyPath);
}

uint64_t sub_10000DBA8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v8 = *a1;
  KeyPath = swift_getKeyPath(&unk_10004BB90);
  v4 = sub_100005A54(&qword_10006FF00, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AF1C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004BB90);
  v6 = sub_100005A54(&qword_10006FFD0, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AFD8);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for UInt64);
  result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_10000DC8C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004BB90);
  v6[2] = v7;
  v6[3] = v2;
  v4 = sub_100005A54(&qword_10006FF00, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AF1C);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_10001966C, v6, (char *)&type metadata for () + 8, v4);
  return swift_release(KeyPath);
}

uint64_t sub_10000DD30()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004BB90);
  v2 = sub_100005A54(&qword_10006FF00, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AF1C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004BB90);
  v4 = sub_100005A54(&qword_10006FFD0, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AFD8);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for UInt64);
  swift_release(v3);
  return v6;
}

uint64_t sub_10000DE0C(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_10004BB90);
  v6 = a2;
  v4 = sub_100005A54(&qword_10006FFD0, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AFD8);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for UInt64);
  return swift_release(KeyPath);
}

uint64_t sub_10000DE98@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_10000DEA4(a1, (uint64_t)&unk_10004BBB8, a2);
}

uint64_t sub_10000DEA4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, _DWORD *a3@<X8>)
{
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  uint64_t v11;

  v11 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v6 = sub_100005A54(&qword_10006FF00, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AF1C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v11, KeyPath, v6);
  swift_release(KeyPath);
  v7 = swift_getKeyPath(a2);
  v8 = sub_100005A54(&qword_10006FFD0, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AFD8);
  PersistentModel.getValue<A>(forKey:)(&v10, v7, v8, &protocol witness table for UInt32);
  result = swift_release(v7);
  *a3 = v10;
  return result;
}

uint64_t sub_10000DF84(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10000DF98(a1, a2, a3, a4, (uint64_t)&unk_10004BBB8, (uint64_t)sub_100019630);
}

uint64_t sub_10000DF98(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v7;
  uint64_t KeyPath;
  uint64_t v9;
  _QWORD v11[3];
  int v12;
  uint64_t v13;

  v7 = *a1;
  v13 = *a2;
  KeyPath = swift_getKeyPath(a5);
  v11[2] = v13;
  v12 = v7;
  v9 = sub_100005A54(&qword_10006FF00, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AF1C);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v13, KeyPath, a6, v11, (char *)&type metadata for () + 8, v9);
  return swift_release(KeyPath);
}

uint64_t sub_10000E044()
{
  return sub_10000E050((uint64_t)&unk_10004BBB8);
}

uint64_t sub_10000E050(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v8;
  uint64_t v9;

  v9 = v1;
  KeyPath = swift_getKeyPath(a1);
  v4 = sub_100005A54(&qword_10006FF00, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AF1C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(a1);
  v6 = sub_100005A54(&qword_10006FFD0, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AFD8);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for UInt32);
  swift_release(v5);
  return v8;
}

uint64_t sub_10000E124@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_10000DEA4(a1, (uint64_t)&unk_10004BBE0, a2);
}

uint64_t sub_10000E130(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10000DF98(a1, a2, a3, a4, (uint64_t)&unk_10004BBE0, (uint64_t)sub_1000195F4);
}

uint64_t sub_10000E144()
{
  return sub_10000E050((uint64_t)&unk_10004BBE0);
}

uint64_t sub_10000E150(uint64_t a1, int a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t), uint64_t a6)
{
  uint64_t KeyPath;
  uint64_t v11;
  int v13;

  KeyPath = swift_getKeyPath(a3);
  v13 = a2;
  v11 = sub_100005A54(a4, a5, a6);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v13, v11, &protocol witness table for UInt32);
  return swift_release(KeyPath);
}

uint64_t sub_10000E1E0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v8 = *a1;
  KeyPath = swift_getKeyPath(&unk_10004BC08);
  v4 = sub_100005A54(&qword_10006FF00, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AF1C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004BC08);
  v6 = sub_100005A54(&qword_10006FFD0, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AFD8);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for UInt64);
  result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_10000E2C4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004BC08);
  v6[2] = v7;
  v6[3] = v2;
  v4 = sub_100005A54(&qword_10006FF00, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AF1C);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_1000195DC, v6, (char *)&type metadata for () + 8, v4);
  return swift_release(KeyPath);
}

uint64_t sub_10000E368()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004BC08);
  v2 = sub_100005A54(&qword_10006FF00, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AF1C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004BC08);
  v4 = sub_100005A54(&qword_10006FFD0, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AFD8);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for UInt64);
  swift_release(v3);
  return v6;
}

uint64_t sub_10000E444(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_10004BC08);
  v6 = a2;
  v4 = sub_100005A54(&qword_10006FFD0, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AFD8);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for UInt64);
  return swift_release(KeyPath);
}

uint64_t sub_10000E4D0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v8 = *a1;
  KeyPath = swift_getKeyPath(&unk_10004BC30);
  v4 = sub_100005A54(&qword_10006FF00, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AF1C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004BC30);
  v6 = sub_100005A54(&qword_10006FFD0, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AFD8);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Int);
  result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_10000E5B4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004BC30);
  v6[2] = v7;
  v6[3] = v2;
  v4 = sub_100005A54(&qword_10006FF00, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AF1C);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_1000195C4, v6, (char *)&type metadata for () + 8, v4);
  return swift_release(KeyPath);
}

uint64_t sub_10000E658()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004BC30);
  v2 = sub_100005A54(&qword_10006FF00, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AF1C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004BC30);
  v4 = sub_100005A54(&qword_10006FFD0, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AFD8);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Int);
  swift_release(v3);
  return v6;
}

uint64_t sub_10000E734(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_10004BC30);
  v6 = a2;
  v4 = sub_100005A54(&qword_10006FFD0, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AFD8);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for Int);
  return swift_release(KeyPath);
}

uint64_t sub_10000E7C0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[24];
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v2 = v1;
  v4 = (_QWORD *)(v1 + 16);
  v5 = type metadata accessor for AnalyticsSchemaV2.FileAnalytics(0);
  *(_QWORD *)(v2 + 40) = sub_100005690(&qword_1000700A0);
  v6 = sub_100005A54(&qword_10006FFD0, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AFD8);
  *(_QWORD *)&v10 = v5;
  *((_QWORD *)&v10 + 1) = v5;
  v11 = v6;
  v12 = v6;
  *(_QWORD *)(v2 + 48) = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>, 1);
  sub_10001788C(v4);
  v7 = static PersistentModel.createBackingData<A>()(v5, v5, v6, v6);
  ObservationRegistrar.init()(v7);
  sub_100019FC4((uint64_t)a1, (uint64_t)&v10);
  swift_beginAccess(v4, v9, 33, 0);
  sub_100005D78(v4);
  sub_100017874(&v10, (uint64_t)v4);
  swift_endAccess(v9);
  sub_100005D78(a1);
  return v2;
}

uint64_t sub_10000E8D4()
{
  return sub_10000898C(&OBJC_IVAR____TtCO14applekeystored17AnalyticsSchemaV213FileAnalytics___observationRegistrar);
}

uint64_t sub_10000E8E0()
{
  return type metadata accessor for AnalyticsSchemaV2.FileAnalytics(0);
}

uint64_t type metadata accessor for AnalyticsSchemaV2.FileAnalytics(uint64_t a1)
{
  return sub_1000126CC(a1, qword_10006F4C8, (uint64_t)&nominal type descriptor for AnalyticsSchemaV2.FileAnalytics);
}

uint64_t sub_10000E8FC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[12];

  v4[0] = (char *)&value witness table for () + 64;
  v4[1] = (char *)&value witness table for () + 64;
  v4[2] = (char *)&value witness table for () + 64;
  v4[3] = (char *)&value witness table for () + 64;
  v4[4] = (char *)&value witness table for () + 64;
  v4[5] = (char *)&value witness table for () + 64;
  v4[6] = (char *)&value witness table for () + 64;
  v4[7] = (char *)&value witness table for () + 64;
  v4[8] = (char *)&value witness table for () + 64;
  v4[9] = (char *)&value witness table for () + 64;
  v4[10] = "(";
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[11] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 12, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10000E994@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v8 = *a1;
  KeyPath = swift_getKeyPath(&unk_10004BC58);
  v4 = sub_100005A54(&qword_10006FEE0, type metadata accessor for AnalyticsSchemaV2.PipelineState, (uint64_t)&unk_10004AE00);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004BC58);
  v6 = sub_100005A54(&qword_10006FFD8, type metadata accessor for AnalyticsSchemaV2.PipelineState, (uint64_t)&unk_10004AEBC);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Int);
  result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_10000EA78(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004BC58);
  v6[2] = v7;
  v6[3] = v2;
  v4 = sub_100005A54(&qword_10006FEE0, type metadata accessor for AnalyticsSchemaV2.PipelineState, (uint64_t)&unk_10004AE00);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_100019994, v6, (char *)&type metadata for () + 8, v4);
  return swift_release(KeyPath);
}

uint64_t sub_10000EB1C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004BC58);
  v2 = sub_100005A54(&qword_10006FEE0, type metadata accessor for AnalyticsSchemaV2.PipelineState, (uint64_t)&unk_10004AE00);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004BC58);
  v4 = sub_100005A54(&qword_10006FFD8, type metadata accessor for AnalyticsSchemaV2.PipelineState, (uint64_t)&unk_10004AEBC);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Int);
  swift_release(v3);
  return v6;
}

uint64_t sub_10000EBF8(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_10004BC58);
  v6 = a2;
  v4 = sub_100005A54(&qword_10006FFD8, type metadata accessor for AnalyticsSchemaV2.PipelineState, (uint64_t)&unk_10004AEBC);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for Int);
  return swift_release(KeyPath);
}

uint64_t sub_10000EC84@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  char v9;
  uint64_t v10;
  char v11;

  v10 = *a1;
  KeyPath = swift_getKeyPath(&unk_10004BC80);
  v4 = sub_100005A54(&qword_10006FEE0, type metadata accessor for AnalyticsSchemaV2.PipelineState, (uint64_t)&unk_10004AE00);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v10, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004BC80);
  v6 = sub_100005A54(&qword_10006FFD8, type metadata accessor for AnalyticsSchemaV2.PipelineState, (uint64_t)&unk_10004AEBC);
  v7 = sub_1000180AC((unint64_t *)&qword_100070078, (uint64_t)&protocol witness table for Int, (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(&v10, v5, v6, v7);
  result = swift_release(v5);
  v9 = v11;
  *(_QWORD *)a2 = v10;
  *(_BYTE *)(a2 + 8) = v9;
  return result;
}

uint64_t sub_10000ED8C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  char v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[4];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  v9 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004BC80);
  v7[2] = v9;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_100005A54(&qword_10006FEE0, type metadata accessor for AnalyticsSchemaV2.PipelineState, (uint64_t)&unk_10004AE00);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_100019958, v7, (char *)&type metadata for () + 8, v5);
  return swift_release(KeyPath);
}

uint64_t sub_10000EE40()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v7 = v0;
  KeyPath = swift_getKeyPath(&unk_10004BC80);
  v2 = sub_100005A54(&qword_10006FEE0, type metadata accessor for AnalyticsSchemaV2.PipelineState, (uint64_t)&unk_10004AE00);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004BC80);
  v4 = sub_100005A54(&qword_10006FFD8, type metadata accessor for AnalyticsSchemaV2.PipelineState, (uint64_t)&unk_10004AEBC);
  v5 = sub_1000180AC((unint64_t *)&qword_100070078, (uint64_t)&protocol witness table for Int, (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(&v7, v3, v4, v5);
  swift_release(v3);
  return v7;
}

uint64_t sub_10000EF3C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10000EF70(a1, a2, a3, (uint64_t)&unk_10004BC80, &qword_10006FFD8, type metadata accessor for AnalyticsSchemaV2.PipelineState, (uint64_t)&unk_10004AEBC);
}

uint64_t sub_10000EF70(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t *a5, uint64_t (*a6)(uint64_t), uint64_t a7)
{
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  char v17;

  KeyPath = swift_getKeyPath(a4);
  v16 = a2;
  v17 = a3 & 1;
  v13 = sub_100005A54(a5, a6, a7);
  v14 = sub_1000180AC(&qword_100070068, (uint64_t)&protocol witness table for Int, (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v16, v13, v14);
  return swift_release(KeyPath);
}

uint64_t sub_10000F030@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v9 = *a1;
  KeyPath = swift_getKeyPath(&unk_10004BCA8);
  v4 = sub_100005A54(&qword_10006FEE0, type metadata accessor for AnalyticsSchemaV2.PipelineState, (uint64_t)&unk_10004AE00);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004BCA8);
  v6 = sub_100005A54(&qword_10006FFD8, type metadata accessor for AnalyticsSchemaV2.PipelineState, (uint64_t)&unk_10004AEBC);
  v7 = sub_100017FEC((unint64_t *)&qword_100070058, &qword_100070060, (uint64_t)&protocol conformance descriptor for Date, (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(a2, v5, v6, v7);
  return swift_release(v5);
}

uint64_t sub_10000F130(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  _BYTE v11[16];
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;

  v4 = sub_100005690(&qword_100070038);
  __chkstk_darwin(v4);
  v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100017F2C(a1, (uint64_t)v6);
  v14 = *a2;
  v7 = v14;
  KeyPath = swift_getKeyPath(&unk_10004BCA8);
  v12 = v7;
  v13 = v6;
  v9 = sub_100005A54(&qword_10006FEE0, type metadata accessor for AnalyticsSchemaV2.PipelineState, (uint64_t)&unk_10004AE00);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v14, KeyPath, sub_100019920, v11, (char *)&type metadata for () + 8, v9);
  swift_release(KeyPath);
  return sub_100017FAC((uint64_t)v6);
}

uint64_t sub_10000F224@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v9 = v1;
  KeyPath = swift_getKeyPath(&unk_10004BCA8);
  v4 = sub_100005A54(&qword_10006FEE0, type metadata accessor for AnalyticsSchemaV2.PipelineState, (uint64_t)&unk_10004AE00);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004BCA8);
  v6 = sub_100005A54(&qword_10006FFD8, type metadata accessor for AnalyticsSchemaV2.PipelineState, (uint64_t)&unk_10004AEBC);
  v7 = sub_100017FEC((unint64_t *)&qword_100070058, &qword_100070060, (uint64_t)&protocol conformance descriptor for Date, (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(a1, v5, v6, v7);
  return swift_release(v5);
}

uint64_t sub_10000F324(uint64_t a1, uint64_t a2)
{
  return sub_10000F358(a1, a2, (uint64_t)&unk_10004BCA8, &qword_10006FFD8, type metadata accessor for AnalyticsSchemaV2.PipelineState, (uint64_t)&unk_10004AEBC);
}

uint64_t sub_10000F358(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t), uint64_t a6)
{
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12;

  KeyPath = swift_getKeyPath(a3);
  v11 = sub_100005A54(a4, a5, a6);
  v12 = sub_100017FEC(&qword_100070048, &qword_100070050, (uint64_t)&protocol conformance descriptor for Date, (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, a2, v11, v12);
  return swift_release(KeyPath);
}

uint64_t sub_10000F408(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  int v24;
  _BYTE v25[16];
  uint64_t v26;
  char *v27;
  _BYTE v28[16];
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  _QWORD v33[3];
  uint64_t v34;
  uint64_t v35;

  v5 = v4;
  v24 = a3;
  v9 = sub_100005690(&qword_100070038);
  __chkstk_darwin(v9);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)(v4 + 24);
  v13 = type metadata accessor for AnalyticsSchemaV2.PipelineState(0);
  *(_QWORD *)(v5 + 48) = sub_100005690(&qword_1000700A8);
  v14 = sub_100005A54(&qword_10006FFD8, type metadata accessor for AnalyticsSchemaV2.PipelineState, (uint64_t)&unk_10004AEBC);
  v33[0] = v13;
  v33[1] = v13;
  v33[2] = v14;
  v34 = v14;
  *(_QWORD *)(v5 + 56) = swift_getOpaqueTypeConformance2(v33, &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>, 1);
  sub_10001788C(v12);
  v15 = static PersistentModel.createBackingData<A>()(v13, v13, v14, v14);
  *(_WORD *)(v5 + 16) = 257;
  ObservationRegistrar.init()(v15);
  sub_100019FC4((uint64_t)v12, (uint64_t)v33);
  v17 = v34;
  v16 = v35;
  sub_100005E2C(v33, v34);
  KeyPath = swift_getKeyPath(&unk_10004BC58);
  v32 = a1;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(KeyPath, &v32, &type metadata for Int, &protocol witness table for Int, v17, v16);
  swift_release(KeyPath);
  sub_100005D78(v33);
  v33[0] = v5;
  v19 = swift_getKeyPath(&unk_10004BC80);
  v29 = v5;
  v30 = a2;
  v31 = v24 & 1;
  v20 = sub_100005A54(&qword_10006FEE0, type metadata accessor for AnalyticsSchemaV2.PipelineState, (uint64_t)&unk_10004AE00);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v33, v19, sub_10001A910, v28, (char *)&type metadata for () + 8, v20);
  swift_release(v19);
  sub_100017F2C(a4, (uint64_t)v11);
  v33[0] = v5;
  v21 = swift_getKeyPath(&unk_10004BCA8);
  v26 = v5;
  v27 = v11;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v33, v21, sub_10001AA14, v25, (char *)&type metadata for () + 8, v20);
  swift_release(v21);
  sub_100017FAC((uint64_t)v11);
  sub_100017FAC(a4);
  return v5;
}

uint64_t sub_10000F678(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[24];
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v2 = v1;
  v4 = (_QWORD *)(v1 + 24);
  v5 = type metadata accessor for AnalyticsSchemaV2.PipelineState(0);
  *(_QWORD *)(v2 + 48) = sub_100005690(&qword_1000700A8);
  v6 = sub_100005A54(&qword_10006FFD8, type metadata accessor for AnalyticsSchemaV2.PipelineState, (uint64_t)&unk_10004AEBC);
  *(_QWORD *)&v10 = v5;
  *((_QWORD *)&v10 + 1) = v5;
  v11 = v6;
  v12 = v6;
  *(_QWORD *)(v2 + 56) = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>, 1);
  sub_10001788C(v4);
  v7 = static PersistentModel.createBackingData<A>()(v5, v5, v6, v6);
  *(_WORD *)(v2 + 16) = 257;
  ObservationRegistrar.init()(v7);
  *(_WORD *)(v2 + 16) = 0;
  sub_100019FC4((uint64_t)a1, (uint64_t)&v10);
  swift_beginAccess(v4, v9, 33, 0);
  sub_100005D78(v4);
  sub_100017874(&v10, (uint64_t)v4);
  swift_endAccess(v9);
  sub_100005D78(a1);
  return v2;
}

uint64_t sub_10000F798()
{
  return sub_10000F7A4(&OBJC_IVAR____TtCO14applekeystored17AnalyticsSchemaV213PipelineState___observationRegistrar);
}

uint64_t sub_10000F7A4(_QWORD *a1)
{
  _QWORD *v1;
  char *v3;
  uint64_t v4;

  sub_100005D78(v1 + 3);
  v3 = (char *)v1 + *a1;
  v4 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return swift_deallocClassInstance(v1, *(unsigned int *)(*v1 + 48), *(unsigned __int16 *)(*v1 + 52));
}

uint64_t sub_10000F7FC()
{
  return type metadata accessor for AnalyticsSchemaV2.PipelineState(0);
}

uint64_t type metadata accessor for AnalyticsSchemaV2.PipelineState(uint64_t a1)
{
  return sub_1000126CC(a1, qword_10006F800, (uint64_t)&nominal type descriptor for AnalyticsSchemaV2.PipelineState);
}

uint64_t sub_10000F818(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = (char *)&value witness table for () + 64;
  v4[1] = (char *)&value witness table for Builtin.Int8 + 64;
  v4[2] = (char *)&value witness table for Builtin.Int8 + 64;
  v4[3] = "(";
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10000F8AC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v8 = *a1;
  KeyPath = swift_getKeyPath(&unk_10004BCD0);
  v4 = sub_100005A54(&qword_10006FEC0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ACE4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004BCD0);
  v6 = sub_100005A54(&qword_10006FFE0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ADA0);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Int);
  result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_10000F990(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004BCD0);
  v6[2] = v7;
  v6[3] = v2;
  v4 = sub_100005A54(&qword_10006FEC0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ACE4);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_100019FAC, v6, (char *)&type metadata for () + 8, v4);
  return swift_release(KeyPath);
}

uint64_t sub_10000FA34()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004BCD0);
  v2 = sub_100005A54(&qword_10006FEC0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ACE4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004BCD0);
  v4 = sub_100005A54(&qword_10006FFE0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ADA0);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Int);
  swift_release(v3);
  return v6;
}

uint64_t sub_10000FB10(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_10004BCD0);
  v6 = a2;
  v4 = sub_100005A54(&qword_10006FFE0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ADA0);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for Int);
  return swift_release(KeyPath);
}

uint64_t sub_10000FB9C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v8 = *a1;
  KeyPath = swift_getKeyPath(&unk_10004BCF8);
  v4 = sub_100005A54(&qword_10006FEC0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ACE4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004BCF8);
  v6 = sub_100005A54(&qword_10006FFE0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ADA0);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Int);
  result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_10000FC80(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004BCF8);
  v6[2] = v7;
  v6[3] = v2;
  v4 = sub_100005A54(&qword_10006FEC0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ACE4);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_100019F94, v6, (char *)&type metadata for () + 8, v4);
  return swift_release(KeyPath);
}

uint64_t sub_10000FD24()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004BCF8);
  v2 = sub_100005A54(&qword_10006FEC0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ACE4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004BCF8);
  v4 = sub_100005A54(&qword_10006FFE0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ADA0);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Int);
  swift_release(v3);
  return v6;
}

uint64_t sub_10000FE00(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_10004BCF8);
  v6 = a2;
  v4 = sub_100005A54(&qword_10006FFE0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ADA0);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for Int);
  return swift_release(KeyPath);
}

uint64_t sub_10000FE8C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v8 = *a1;
  KeyPath = swift_getKeyPath(&unk_10004BD20);
  v4 = sub_100005A54(&qword_10006FEC0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ACE4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004BD20);
  v6 = sub_100005A54(&qword_10006FFE0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ADA0);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Int);
  result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_10000FF70(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004BD20);
  v6[2] = v7;
  v6[3] = v2;
  v4 = sub_100005A54(&qword_10006FEC0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ACE4);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_100019F7C, v6, (char *)&type metadata for () + 8, v4);
  return swift_release(KeyPath);
}

uint64_t sub_100010014()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004BD20);
  v2 = sub_100005A54(&qword_10006FEC0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ACE4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004BD20);
  v4 = sub_100005A54(&qword_10006FFE0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ADA0);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Int);
  swift_release(v3);
  return v6;
}

uint64_t sub_1000100F0(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_10004BD20);
  v6 = a2;
  v4 = sub_100005A54(&qword_10006FFE0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ADA0);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for Int);
  return swift_release(KeyPath);
}

uint64_t sub_10001017C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v8 = *a1;
  KeyPath = swift_getKeyPath(&unk_10004BD48);
  v4 = sub_100005A54(&qword_10006FEC0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ACE4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004BD48);
  v6 = sub_100005A54(&qword_10006FFE0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ADA0);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Int);
  result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_100010260(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004BD48);
  v6[2] = v7;
  v6[3] = v2;
  v4 = sub_100005A54(&qword_10006FEC0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ACE4);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_100019F64, v6, (char *)&type metadata for () + 8, v4);
  return swift_release(KeyPath);
}

uint64_t sub_100010304()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004BD48);
  v2 = sub_100005A54(&qword_10006FEC0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ACE4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004BD48);
  v4 = sub_100005A54(&qword_10006FFE0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ADA0);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Int);
  swift_release(v3);
  return v6;
}

uint64_t sub_1000103E0(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_10004BD48);
  v6 = a2;
  v4 = sub_100005A54(&qword_10006FFE0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ADA0);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for Int);
  return swift_release(KeyPath);
}

uint64_t sub_10001046C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v8 = *a1;
  KeyPath = swift_getKeyPath(&unk_10004BD70);
  v4 = sub_100005A54(&qword_10006FEC0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ACE4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004BD70);
  v6 = sub_100005A54(&qword_10006FFE0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ADA0);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Int);
  result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_100010550(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004BD70);
  v6[2] = v7;
  v6[3] = v2;
  v4 = sub_100005A54(&qword_10006FEC0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ACE4);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_100019F4C, v6, (char *)&type metadata for () + 8, v4);
  return swift_release(KeyPath);
}

uint64_t sub_1000105F4()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004BD70);
  v2 = sub_100005A54(&qword_10006FEC0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ACE4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004BD70);
  v4 = sub_100005A54(&qword_10006FFE0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ADA0);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Int);
  swift_release(v3);
  return v6;
}

uint64_t sub_1000106D0(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_10004BD70);
  v6 = a2;
  v4 = sub_100005A54(&qword_10006FFE0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ADA0);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for Int);
  return swift_release(KeyPath);
}

uint64_t sub_10001075C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v8 = *a1;
  KeyPath = swift_getKeyPath(&unk_10004BD98);
  v4 = sub_100005A54(&qword_10006FEC0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ACE4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004BD98);
  v6 = sub_100005A54(&qword_10006FFE0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ADA0);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Int);
  result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_100010840(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004BD98);
  v6[2] = v7;
  v6[3] = v2;
  v4 = sub_100005A54(&qword_10006FEC0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ACE4);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_100019F34, v6, (char *)&type metadata for () + 8, v4);
  return swift_release(KeyPath);
}

uint64_t sub_1000108E4()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004BD98);
  v2 = sub_100005A54(&qword_10006FEC0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ACE4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004BD98);
  v4 = sub_100005A54(&qword_10006FFE0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ADA0);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Int);
  swift_release(v3);
  return v6;
}

uint64_t sub_1000109C0(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_10004BD98);
  v6 = a2;
  v4 = sub_100005A54(&qword_10006FFE0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ADA0);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for Int);
  return swift_release(KeyPath);
}

uint64_t sub_100010A4C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v8 = *a1;
  KeyPath = swift_getKeyPath(&unk_10004BDC0);
  v4 = sub_100005A54(&qword_10006FEC0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ACE4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004BDC0);
  v6 = sub_100005A54(&qword_10006FFE0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ADA0);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Int);
  result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_100010B30(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004BDC0);
  v6[2] = v7;
  v6[3] = v2;
  v4 = sub_100005A54(&qword_10006FEC0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ACE4);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_100019F1C, v6, (char *)&type metadata for () + 8, v4);
  return swift_release(KeyPath);
}

uint64_t sub_100010BD4()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004BDC0);
  v2 = sub_100005A54(&qword_10006FEC0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ACE4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004BDC0);
  v4 = sub_100005A54(&qword_10006FFE0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ADA0);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Int);
  swift_release(v3);
  return v6;
}

uint64_t sub_100010CB0(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_10004BDC0);
  v6 = a2;
  v4 = sub_100005A54(&qword_10006FFE0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ADA0);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for Int);
  return swift_release(KeyPath);
}

uint64_t sub_100010D3C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v8 = *a1;
  KeyPath = swift_getKeyPath(&unk_10004BDE8);
  v4 = sub_100005A54(&qword_10006FEC0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ACE4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004BDE8);
  v6 = sub_100005A54(&qword_10006FFE0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ADA0);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Int);
  result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_100010E20(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004BDE8);
  v6[2] = v7;
  v6[3] = v2;
  v4 = sub_100005A54(&qword_10006FEC0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ACE4);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_100019F04, v6, (char *)&type metadata for () + 8, v4);
  return swift_release(KeyPath);
}

uint64_t sub_100010EC4()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004BDE8);
  v2 = sub_100005A54(&qword_10006FEC0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ACE4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004BDE8);
  v4 = sub_100005A54(&qword_10006FFE0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ADA0);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Int);
  swift_release(v3);
  return v6;
}

uint64_t sub_100010FA0(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_10004BDE8);
  v6 = a2;
  v4 = sub_100005A54(&qword_10006FFE0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ADA0);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for Int);
  return swift_release(KeyPath);
}

uint64_t sub_10001102C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v8 = *a1;
  KeyPath = swift_getKeyPath(&unk_10004BE10);
  v4 = sub_100005A54(&qword_10006FEC0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ACE4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004BE10);
  v6 = sub_100005A54(&qword_10006FFE0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ADA0);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Int);
  result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_100011110(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004BE10);
  v6[2] = v7;
  v6[3] = v2;
  v4 = sub_100005A54(&qword_10006FEC0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ACE4);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_100019EEC, v6, (char *)&type metadata for () + 8, v4);
  return swift_release(KeyPath);
}

uint64_t sub_1000111B4()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004BE10);
  v2 = sub_100005A54(&qword_10006FEC0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ACE4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004BE10);
  v4 = sub_100005A54(&qword_10006FFE0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ADA0);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Int);
  swift_release(v3);
  return v6;
}

uint64_t sub_100011290(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_10004BE10);
  v6 = a2;
  v4 = sub_100005A54(&qword_10006FFE0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ADA0);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for Int);
  return swift_release(KeyPath);
}

uint64_t sub_10001131C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v8 = *a1;
  KeyPath = swift_getKeyPath(&unk_10004BE38);
  v4 = sub_100005A54(&qword_10006FEC0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ACE4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004BE38);
  v6 = sub_100005A54(&qword_10006FFE0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ADA0);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Int);
  result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_100011400(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004BE38);
  v6[2] = v7;
  v6[3] = v2;
  v4 = sub_100005A54(&qword_10006FEC0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ACE4);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_100019ED4, v6, (char *)&type metadata for () + 8, v4);
  return swift_release(KeyPath);
}

uint64_t sub_1000114A4()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004BE38);
  v2 = sub_100005A54(&qword_10006FEC0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ACE4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004BE38);
  v4 = sub_100005A54(&qword_10006FFE0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ADA0);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Int);
  swift_release(v3);
  return v6;
}

uint64_t sub_100011580(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_10004BE38);
  v6 = a2;
  v4 = sub_100005A54(&qword_10006FFE0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ADA0);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for Int);
  return swift_release(KeyPath);
}

uint64_t sub_10001160C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v8 = *a1;
  KeyPath = swift_getKeyPath(&unk_10004BE60);
  v4 = sub_100005A54(&qword_10006FEC0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ACE4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004BE60);
  v6 = sub_100005A54(&qword_10006FFE0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ADA0);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Int);
  result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_1000116F0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004BE60);
  v6[2] = v7;
  v6[3] = v2;
  v4 = sub_100005A54(&qword_10006FEC0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ACE4);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_100019EBC, v6, (char *)&type metadata for () + 8, v4);
  return swift_release(KeyPath);
}

uint64_t sub_100011794()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004BE60);
  v2 = sub_100005A54(&qword_10006FEC0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ACE4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004BE60);
  v4 = sub_100005A54(&qword_10006FFE0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ADA0);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Int);
  swift_release(v3);
  return v6;
}

uint64_t sub_100011870(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_10004BE60);
  v6 = a2;
  v4 = sub_100005A54(&qword_10006FFE0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ADA0);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for Int);
  return swift_release(KeyPath);
}

uint64_t sub_1000118FC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v8 = *a1;
  KeyPath = swift_getKeyPath(&unk_10004BE88);
  v4 = sub_100005A54(&qword_10006FEC0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ACE4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004BE88);
  v6 = sub_100005A54(&qword_10006FFE0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ADA0);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Int);
  result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_1000119E0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_10004BE88);
  v6[2] = v7;
  v6[3] = v2;
  v4 = sub_100005A54(&qword_10006FEC0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ACE4);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_100019EA4, v6, (char *)&type metadata for () + 8, v4);
  return swift_release(KeyPath);
}

uint64_t sub_100011A84()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_10004BE88);
  v2 = sub_100005A54(&qword_10006FEC0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ACE4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_10004BE88);
  v4 = sub_100005A54(&qword_10006FFE0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ADA0);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Int);
  swift_release(v3);
  return v6;
}

uint64_t sub_100011B60(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_10004BE88);
  v6 = a2;
  v4 = sub_100005A54(&qword_10006FFE0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ADA0);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for Int);
  return swift_release(KeyPath);
}

uint64_t sub_100011BEC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  _QWORD v44[3];
  uint64_t v45;
  uint64_t v46;

  v1 = v0;
  v2 = (_QWORD *)(v0 + 16);
  v3 = type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters(0);
  *(_QWORD *)(v1 + 40) = sub_100005690(&qword_1000700B0);
  v4 = sub_100005A54(&qword_10006FFE0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ADA0);
  v44[0] = v3;
  v44[1] = v3;
  v44[2] = v4;
  v45 = v4;
  *(_QWORD *)(v1 + 48) = swift_getOpaqueTypeConformance2(v44, &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>, 1);
  sub_10001788C(v2);
  static PersistentModel.createBackingData<A>()(v3, v3, v4, v4);
  sub_100019FC4((uint64_t)v2, (uint64_t)v44);
  v5 = v45;
  v6 = v46;
  sub_100005E2C(v44, v45);
  KeyPath = swift_getKeyPath(&unk_10004BCD0);
  v43 = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(KeyPath, &v43, &type metadata for Int, &protocol witness table for Int, v5, v6);
  swift_release(KeyPath);
  sub_100005D78(v44);
  sub_100019FC4((uint64_t)v2, (uint64_t)v44);
  v8 = v45;
  v9 = v46;
  sub_100005E2C(v44, v45);
  v10 = swift_getKeyPath(&unk_10004BCF8);
  v43 = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v10, &v43, &type metadata for Int, &protocol witness table for Int, v8, v9);
  swift_release(v10);
  sub_100005D78(v44);
  sub_100019FC4((uint64_t)v2, (uint64_t)v44);
  v11 = v45;
  v12 = v46;
  sub_100005E2C(v44, v45);
  v13 = swift_getKeyPath(&unk_10004BD20);
  v43 = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v13, &v43, &type metadata for Int, &protocol witness table for Int, v11, v12);
  swift_release(v13);
  sub_100005D78(v44);
  sub_100019FC4((uint64_t)v2, (uint64_t)v44);
  v14 = v45;
  v15 = v46;
  sub_100005E2C(v44, v45);
  v16 = swift_getKeyPath(&unk_10004BD48);
  v43 = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v16, &v43, &type metadata for Int, &protocol witness table for Int, v14, v15);
  swift_release(v16);
  sub_100005D78(v44);
  sub_100019FC4((uint64_t)v2, (uint64_t)v44);
  v17 = v45;
  v18 = v46;
  sub_100005E2C(v44, v45);
  v19 = swift_getKeyPath(&unk_10004BD70);
  v43 = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v19, &v43, &type metadata for Int, &protocol witness table for Int, v17, v18);
  swift_release(v19);
  sub_100005D78(v44);
  sub_100019FC4((uint64_t)v2, (uint64_t)v44);
  v20 = v45;
  v21 = v46;
  sub_100005E2C(v44, v45);
  v22 = swift_getKeyPath(&unk_10004BD98);
  v43 = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v22, &v43, &type metadata for Int, &protocol witness table for Int, v20, v21);
  swift_release(v22);
  sub_100005D78(v44);
  sub_100019FC4((uint64_t)v2, (uint64_t)v44);
  v23 = v45;
  v24 = v46;
  sub_100005E2C(v44, v45);
  v25 = swift_getKeyPath(&unk_10004BDC0);
  v43 = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v25, &v43, &type metadata for Int, &protocol witness table for Int, v23, v24);
  swift_release(v25);
  sub_100005D78(v44);
  sub_100019FC4((uint64_t)v2, (uint64_t)v44);
  v26 = v45;
  v27 = v46;
  sub_100005E2C(v44, v45);
  v28 = swift_getKeyPath(&unk_10004BDE8);
  v43 = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v28, &v43, &type metadata for Int, &protocol witness table for Int, v26, v27);
  swift_release(v28);
  sub_100005D78(v44);
  sub_100019FC4((uint64_t)v2, (uint64_t)v44);
  v29 = v45;
  v30 = v46;
  sub_100005E2C(v44, v45);
  v31 = swift_getKeyPath(&unk_10004BE10);
  v43 = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v31, &v43, &type metadata for Int, &protocol witness table for Int, v29, v30);
  swift_release(v31);
  sub_100005D78(v44);
  sub_100019FC4((uint64_t)v2, (uint64_t)v44);
  v32 = v45;
  v33 = v46;
  sub_100005E2C(v44, v45);
  v34 = swift_getKeyPath(&unk_10004BE38);
  v43 = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v34, &v43, &type metadata for Int, &protocol witness table for Int, v32, v33);
  swift_release(v34);
  sub_100005D78(v44);
  sub_100019FC4((uint64_t)v2, (uint64_t)v44);
  v35 = v45;
  v36 = v46;
  sub_100005E2C(v44, v45);
  v37 = swift_getKeyPath(&unk_10004BE60);
  v43 = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v37, &v43, &type metadata for Int, &protocol witness table for Int, v35, v36);
  swift_release(v37);
  sub_100005D78(v44);
  sub_100019FC4((uint64_t)v2, (uint64_t)v44);
  v38 = v45;
  v39 = v46;
  sub_100005E2C(v44, v45);
  v40 = swift_getKeyPath(&unk_10004BE88);
  v43 = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v40, &v43, &type metadata for Int, &protocol witness table for Int, v38, v39);
  swift_release(v40);
  v41 = sub_100005D78(v44);
  ObservationRegistrar.init()(v41);
  return v1;
}

uint64_t sub_100012120(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v45[3];
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v2 = v1;
  v4 = (_QWORD *)(v1 + 16);
  v5 = type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters(0);
  *(_QWORD *)(v2 + 40) = sub_100005690(&qword_1000700B0);
  v6 = sub_100005A54(&qword_10006FFE0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ADA0);
  *(_QWORD *)&v46 = v5;
  *((_QWORD *)&v46 + 1) = v5;
  v47 = v6;
  v48 = v6;
  *(_QWORD *)(v2 + 48) = swift_getOpaqueTypeConformance2(&v46, &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>, 1);
  sub_10001788C(v4);
  static PersistentModel.createBackingData<A>()(v5, v5, v6, v6);
  sub_100019FC4((uint64_t)v4, (uint64_t)&v46);
  v7 = v48;
  v8 = v49;
  sub_100005E2C(&v46, v48);
  KeyPath = swift_getKeyPath(&unk_10004BCD0);
  v45[0] = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(KeyPath, v45, &type metadata for Int, &protocol witness table for Int, v7, v8);
  swift_release(KeyPath);
  sub_100005D78(&v46);
  sub_100019FC4((uint64_t)v4, (uint64_t)&v46);
  v10 = v48;
  v11 = v49;
  sub_100005E2C(&v46, v48);
  v12 = swift_getKeyPath(&unk_10004BCF8);
  v45[0] = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v12, v45, &type metadata for Int, &protocol witness table for Int, v10, v11);
  swift_release(v12);
  sub_100005D78(&v46);
  sub_100019FC4((uint64_t)v4, (uint64_t)&v46);
  v13 = v48;
  v14 = v49;
  sub_100005E2C(&v46, v48);
  v15 = swift_getKeyPath(&unk_10004BD20);
  v45[0] = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v15, v45, &type metadata for Int, &protocol witness table for Int, v13, v14);
  swift_release(v15);
  sub_100005D78(&v46);
  sub_100019FC4((uint64_t)v4, (uint64_t)&v46);
  v16 = v48;
  v17 = v49;
  sub_100005E2C(&v46, v48);
  v18 = swift_getKeyPath(&unk_10004BD48);
  v45[0] = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v18, v45, &type metadata for Int, &protocol witness table for Int, v16, v17);
  swift_release(v18);
  sub_100005D78(&v46);
  sub_100019FC4((uint64_t)v4, (uint64_t)&v46);
  v19 = v48;
  v20 = v49;
  sub_100005E2C(&v46, v48);
  v21 = swift_getKeyPath(&unk_10004BD70);
  v45[0] = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v21, v45, &type metadata for Int, &protocol witness table for Int, v19, v20);
  swift_release(v21);
  sub_100005D78(&v46);
  sub_100019FC4((uint64_t)v4, (uint64_t)&v46);
  v22 = v48;
  v23 = v49;
  sub_100005E2C(&v46, v48);
  v24 = swift_getKeyPath(&unk_10004BD98);
  v45[0] = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v24, v45, &type metadata for Int, &protocol witness table for Int, v22, v23);
  swift_release(v24);
  sub_100005D78(&v46);
  sub_100019FC4((uint64_t)v4, (uint64_t)&v46);
  v25 = v48;
  v26 = v49;
  sub_100005E2C(&v46, v48);
  v27 = swift_getKeyPath(&unk_10004BDC0);
  v45[0] = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v27, v45, &type metadata for Int, &protocol witness table for Int, v25, v26);
  swift_release(v27);
  sub_100005D78(&v46);
  sub_100019FC4((uint64_t)v4, (uint64_t)&v46);
  v28 = v48;
  v29 = v49;
  sub_100005E2C(&v46, v48);
  v30 = swift_getKeyPath(&unk_10004BDE8);
  v45[0] = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v30, v45, &type metadata for Int, &protocol witness table for Int, v28, v29);
  swift_release(v30);
  sub_100005D78(&v46);
  sub_100019FC4((uint64_t)v4, (uint64_t)&v46);
  v31 = v48;
  v32 = v49;
  sub_100005E2C(&v46, v48);
  v33 = swift_getKeyPath(&unk_10004BE10);
  v45[0] = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v33, v45, &type metadata for Int, &protocol witness table for Int, v31, v32);
  swift_release(v33);
  sub_100005D78(&v46);
  sub_100019FC4((uint64_t)v4, (uint64_t)&v46);
  v34 = v48;
  v35 = v49;
  sub_100005E2C(&v46, v48);
  v36 = swift_getKeyPath(&unk_10004BE38);
  v45[0] = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v36, v45, &type metadata for Int, &protocol witness table for Int, v34, v35);
  swift_release(v36);
  sub_100005D78(&v46);
  sub_100019FC4((uint64_t)v4, (uint64_t)&v46);
  v37 = v48;
  v38 = v49;
  sub_100005E2C(&v46, v48);
  v39 = swift_getKeyPath(&unk_10004BE60);
  v45[0] = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v39, v45, &type metadata for Int, &protocol witness table for Int, v37, v38);
  swift_release(v39);
  sub_100005D78(&v46);
  sub_100019FC4((uint64_t)v4, (uint64_t)&v46);
  v40 = v48;
  v41 = v49;
  sub_100005E2C(&v46, v48);
  v42 = swift_getKeyPath(&unk_10004BE88);
  v45[0] = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v42, v45, &type metadata for Int, &protocol witness table for Int, v40, v41);
  swift_release(v42);
  v43 = sub_100005D78(&v46);
  ObservationRegistrar.init()(v43);
  sub_100019FC4((uint64_t)a1, (uint64_t)&v46);
  swift_beginAccess(v4, v45, 33, 0);
  sub_100005D78(v4);
  sub_100017874(&v46, (uint64_t)v4);
  swift_endAccess(v45);
  sub_100005D78(a1);
  return v2;
}

uint64_t sub_1000126A4()
{
  return sub_10000898C(&OBJC_IVAR____TtCO14applekeystored17AnalyticsSchemaV217AnalyticsCounters___observationRegistrar);
}

uint64_t sub_1000126B0()
{
  return type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters(0);
}

uint64_t type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters(uint64_t a1)
{
  return sub_1000126CC(a1, qword_10006F9B0, (uint64_t)&nominal type descriptor for AnalyticsSchemaV2.AnalyticsCounters);
}

uint64_t sub_1000126CC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t sub_100012700(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[14];

  v4[0] = (char *)&value witness table for () + 64;
  v4[1] = (char *)&value witness table for () + 64;
  v4[2] = (char *)&value witness table for () + 64;
  v4[3] = (char *)&value witness table for () + 64;
  v4[4] = (char *)&value witness table for () + 64;
  v4[5] = (char *)&value witness table for () + 64;
  v4[6] = (char *)&value witness table for () + 64;
  v4[7] = (char *)&value witness table for () + 64;
  v4[8] = (char *)&value witness table for () + 64;
  v4[9] = (char *)&value witness table for () + 64;
  v4[10] = (char *)&value witness table for () + 64;
  v4[11] = (char *)&value witness table for () + 64;
  v4[12] = "(";
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[13] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 14, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1000127A0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000127BC(&qword_10006E5B0, (uint64_t)qword_100071AB0, (uint64_t)sub_10000BAD4, a1);
}

uint64_t sub_1000127BC@<X0>(_QWORD *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  if (*a1 != -1)
    swift_once(a1, a3);
  v6 = type metadata accessor for Schema.Version(0);
  v7 = sub_100005D1C(v6, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a4, v7, v6);
}

uint64_t sub_100012828()
{
  uint64_t v0;
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;

  v0 = type metadata accessor for MigrationStage(0);
  sub_100005D98(v0, qword_100071AC8);
  v1 = (_QWORD *)sub_100005D1C(v0, (uint64_t)qword_100071AC8);
  v2 = sub_10001A888();
  v3 = sub_10001A8CC();
  *v1 = &type metadata for AnalyticsSchemaV1;
  v1[1] = v2;
  v1[2] = &type metadata for AnalyticsSchemaV2;
  v1[3] = v3;
  return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 104))(v1, enum case for MigrationStage.lightweight(_:), v0);
}

uint64_t sub_1000128B4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v0 = sub_100005690(&qword_1000702F0);
  v1 = swift_allocObject(v0, 64, 7);
  *(_OWORD *)(v1 + 16) = xmmword_10004BF50;
  v2 = sub_10001A888();
  *(_QWORD *)(v1 + 32) = &type metadata for AnalyticsSchemaV1;
  *(_QWORD *)(v1 + 40) = v2;
  v3 = sub_10001A8CC();
  *(_QWORD *)(v1 + 48) = &type metadata for AnalyticsSchemaV2;
  *(_QWORD *)(v1 + 56) = v3;
  return v1;
}

uint64_t sub_100012918()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v0 = sub_100005690(&qword_1000702D8);
  v1 = type metadata accessor for MigrationStage(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = swift_allocObject(v0, v4 + *(_QWORD *)(v2 + 72), v3 | 7);
  *(_OWORD *)(v5 + 16) = xmmword_10004BF60;
  if (qword_10006E5B8 != -1)
    swift_once(&qword_10006E5B8, sub_100012828);
  v6 = sub_100005D1C(v1, (uint64_t)qword_100071AC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v5 + v4, v6, v1);
  return v5;
}

uint64_t sub_1000129DC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[16];
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[16];
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[16];
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[16];
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[16];
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[16];
  uint64_t v46;
  uint64_t v47;
  _BYTE v48[16];
  uint64_t v49;
  uint64_t v50;
  _BYTE v51[16];
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[16];
  uint64_t v55;
  uint64_t v56;
  _BYTE v57[16];
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v3 = *a1;
  v60 = v1;
  KeyPath = swift_getKeyPath(&unk_10004BCD0);
  v58 = v1;
  v59 = v3;
  v5 = sub_100005A54(&qword_10006FEC0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ACE4);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v60, KeyPath, sub_10001A924, v57, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  v6 = a1[1];
  v60 = v1;
  v7 = swift_getKeyPath(&unk_10004BCF8);
  v55 = v1;
  v56 = v6;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v60, v7, sub_10001A938, v54, (char *)&type metadata for () + 8, v5);
  swift_release(v7);
  v8 = a1[2];
  v60 = v1;
  v9 = swift_getKeyPath(&unk_10004BD20);
  v52 = v1;
  v53 = v8;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v60, v9, sub_10001A94C, v51, (char *)&type metadata for () + 8, v5);
  swift_release(v9);
  v10 = a1[3];
  v60 = v1;
  v11 = swift_getKeyPath(&unk_10004BD48);
  v49 = v1;
  v50 = v10;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v60, v11, sub_10001A960, v48, (char *)&type metadata for () + 8, v5);
  swift_release(v11);
  v12 = a1[4];
  v60 = v1;
  v13 = swift_getKeyPath(&unk_10004BD70);
  v46 = v1;
  v47 = v12;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v60, v13, sub_10001A974, v45, (char *)&type metadata for () + 8, v5);
  swift_release(v13);
  v14 = a1[5];
  v60 = v1;
  v15 = swift_getKeyPath(&unk_10004BD98);
  v43 = v1;
  v44 = v14;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v60, v15, sub_10001A988, v42, (char *)&type metadata for () + 8, v5);
  swift_release(v15);
  v16 = a1[7];
  v60 = v1;
  v17 = swift_getKeyPath(&unk_10004BDE8);
  v40 = v1;
  v41 = v16;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v60, v17, sub_10001A99C, v39, (char *)&type metadata for () + 8, v5);
  swift_release(v17);
  v18 = a1[8];
  v60 = v1;
  v19 = swift_getKeyPath(&unk_10004BE10);
  v37 = v1;
  v38 = v18;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v60, v19, sub_10001A9B0, v36, (char *)&type metadata for () + 8, v5);
  swift_release(v19);
  v20 = a1[9];
  v60 = v1;
  v21 = swift_getKeyPath(&unk_10004BE38);
  v34 = v1;
  v35 = v20;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v60, v21, sub_10001A9C4, v33, (char *)&type metadata for () + 8, v5);
  swift_release(v21);
  v22 = a1[10];
  v60 = v1;
  v23 = swift_getKeyPath(&unk_10004BE60);
  v31 = v1;
  v32 = v22;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v60, v23, sub_10001A9D8, v30, (char *)&type metadata for () + 8, v5);
  swift_release(v23);
  v24 = a1[11];
  v60 = v1;
  v25 = swift_getKeyPath(&unk_10004BE88);
  v28 = v1;
  v29 = v24;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v60, v25, sub_10001A9EC, &v27, (char *)&type metadata for () + 8, v5);
  return swift_release(v25);
}

uint64_t sub_100012D4C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  KeyPath = swift_getKeyPath(&unk_10004BCD0);
  v4 = sub_100005A54(&qword_10006FEC0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ACE4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v42, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_10004BCD0);
  v6 = sub_100005A54(&qword_10006FFE0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ADA0);
  PersistentModel.getValue<A>(forKey:)(&v42, v5, v6, &protocol witness table for Int);
  swift_release(v5);
  v41 = v42;
  v42 = v1;
  v7 = swift_getKeyPath(&unk_10004BCF8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v42, v7, v4);
  swift_release(v7);
  v8 = swift_getKeyPath(&unk_10004BCF8);
  PersistentModel.getValue<A>(forKey:)(&v42, v8, v6, &protocol witness table for Int);
  swift_release(v8);
  v40 = v42;
  v42 = v1;
  v9 = swift_getKeyPath(&unk_10004BD20);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v42, v9, v4);
  swift_release(v9);
  v10 = swift_getKeyPath(&unk_10004BD20);
  PersistentModel.getValue<A>(forKey:)(&v42, v10, v6, &protocol witness table for Int);
  swift_release(v10);
  v39 = v42;
  v42 = v1;
  v11 = swift_getKeyPath(&unk_10004BD48);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v42, v11, v4);
  swift_release(v11);
  v12 = swift_getKeyPath(&unk_10004BD48);
  PersistentModel.getValue<A>(forKey:)(&v42, v12, v6, &protocol witness table for Int);
  swift_release(v12);
  v38 = v42;
  v42 = v1;
  v13 = swift_getKeyPath(&unk_10004BD70);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v42, v13, v4);
  swift_release(v13);
  v14 = swift_getKeyPath(&unk_10004BD70);
  PersistentModel.getValue<A>(forKey:)(&v42, v14, v6, &protocol witness table for Int);
  swift_release(v14);
  v37 = v42;
  v42 = v1;
  v15 = swift_getKeyPath(&unk_10004BD98);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v42, v15, v4);
  swift_release(v15);
  v16 = swift_getKeyPath(&unk_10004BD98);
  PersistentModel.getValue<A>(forKey:)(&v42, v16, v6, &protocol witness table for Int);
  swift_release(v16);
  v36 = v42;
  v42 = v1;
  v17 = swift_getKeyPath(&unk_10004BDC0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v42, v17, v4);
  swift_release(v17);
  v18 = swift_getKeyPath(&unk_10004BDC0);
  PersistentModel.getValue<A>(forKey:)(&v42, v18, v6, &protocol witness table for Int);
  swift_release(v18);
  v35 = v42;
  v42 = v1;
  v19 = swift_getKeyPath(&unk_10004BDE8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v42, v19, v4);
  swift_release(v19);
  v20 = swift_getKeyPath(&unk_10004BDE8);
  PersistentModel.getValue<A>(forKey:)(&v42, v20, v6, &protocol witness table for Int);
  swift_release(v20);
  v34 = v42;
  v42 = v1;
  v21 = swift_getKeyPath(&unk_10004BE10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v42, v21, v4);
  swift_release(v21);
  v22 = swift_getKeyPath(&unk_10004BE10);
  PersistentModel.getValue<A>(forKey:)(&v42, v22, v6, &protocol witness table for Int);
  swift_release(v22);
  v33 = v42;
  v42 = v1;
  v23 = swift_getKeyPath(&unk_10004BE38);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v42, v23, v4);
  swift_release(v23);
  v24 = swift_getKeyPath(&unk_10004BE38);
  PersistentModel.getValue<A>(forKey:)(&v42, v24, v6, &protocol witness table for Int);
  swift_release(v24);
  v25 = v42;
  v42 = v1;
  v26 = swift_getKeyPath(&unk_10004BE60);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v42, v26, v4);
  swift_release(v26);
  v27 = swift_getKeyPath(&unk_10004BE60);
  PersistentModel.getValue<A>(forKey:)(&v42, v27, v6, &protocol witness table for Int);
  swift_release(v27);
  v28 = v42;
  v42 = v1;
  v29 = swift_getKeyPath(&unk_10004BE88);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v42, v29, v4);
  swift_release(v29);
  v30 = swift_getKeyPath(&unk_10004BE88);
  PersistentModel.getValue<A>(forKey:)(&v42, v30, v6, &protocol witness table for Int);
  result = swift_release(v30);
  v32 = v42;
  *a1 = v41;
  a1[1] = v40;
  a1[2] = v39;
  a1[3] = v38;
  a1[4] = v37;
  a1[5] = v36;
  a1[6] = v35;
  a1[7] = v34;
  a1[8] = v33;
  a1[9] = v25;
  a1[10] = v28;
  a1[11] = v32;
  return result;
}

uint64_t sub_1000132C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(char *, char *, uint64_t);
  uint64_t v56;
  uint64_t *v57;
  void (*v58)(char *, uint64_t *);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v54 - v8;
  __chkstk_darwin(v7);
  v11 = (char *)&v54 - v10;
  v12 = type metadata accessor for AnalyticsStore();
  sub_1000137D0(0, (uint64_t)v11);
  if (!v1)
  {
    v59 = 0;
    v60 = v0;
    if (qword_10006E5C0 != -1)
      swift_once(&qword_10006E5C0, sub_10001AB28);
    v13 = type metadata accessor for Logger(0);
    sub_100005D1C(v13, (uint64_t)qword_100071AE0);
    v55 = *(uint64_t (**)(char *, char *, uint64_t))(v3 + 16);
    v14 = v55(v9, v11, v2);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.info.getter();
    v17 = os_log_type_enabled(v15, v16);
    v54 = v12;
    if (v17)
    {
      v18 = swift_slowAlloc(12, -1);
      v57 = (uint64_t *)v2;
      v19 = (uint8_t *)v18;
      v56 = swift_slowAlloc(32, -1);
      v63 = v56;
      *(_DWORD *)v19 = 136315138;
      v58 = (void (*)(char *, uint64_t *))(v19 + 4);
      v20 = URL.absoluteString.getter();
      v22 = v21;
      v61 = sub_100016DBC(v20, v21, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62);
      swift_bridgeObjectRelease(v22);
      v58 = *(void (**)(char *, uint64_t *))(v3 + 8);
      v58(v9, v57);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "opening AnalyticsStore at %s", v19, 0xCu);
      v23 = v56;
      swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      v24 = v19;
      v2 = (uint64_t)v57;
      swift_slowDealloc(v24, -1, -1);
    }
    else
    {
      v58 = *(void (**)(char *, uint64_t *))(v3 + 8);
      v58(v9, (uint64_t *)v2);
    }

    v56 = type metadata accessor for ModelConfiguration(0);
    v57 = &v54;
    v25 = *(_QWORD *)(v56 - 8);
    __chkstk_darwin(v56);
    v27 = (char *)&v54 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
    v55(v6, v11, v2);
    v28 = type metadata accessor for ModelConfiguration.CloudKitDatabase(0);
    v29 = __chkstk_darwin(v28);
    v31 = (char *)&v54 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
    static ModelConfiguration.CloudKitDatabase.automatic.getter(v29);
    ModelConfiguration.init(_:schema:url:allowsSave:cloudKitDatabase:)(0, 0, 0, v6, 1, v31);
    type metadata accessor for ModelContainer(0);
    v32 = sub_100005690(&qword_10006FFC0);
    v33 = swift_allocObject(v32, 96, 7);
    *(_OWORD *)(v33 + 16) = xmmword_10004BF70;
    v34 = type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics(0);
    v35 = sub_100005A54(&qword_10006FFC8, type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics, (uint64_t)&unk_10004B0F4);
    *(_QWORD *)(v33 + 32) = v34;
    *(_QWORD *)(v33 + 40) = v35;
    v36 = type metadata accessor for AnalyticsSchemaV2.FileAnalytics(0);
    v37 = sub_100005A54(&qword_10006FFD0, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AFD8);
    *(_QWORD *)(v33 + 48) = v36;
    *(_QWORD *)(v33 + 56) = v37;
    v38 = type metadata accessor for AnalyticsSchemaV2.PipelineState(0);
    v39 = sub_100005A54(&qword_10006FFD8, type metadata accessor for AnalyticsSchemaV2.PipelineState, (uint64_t)&unk_10004AEBC);
    *(_QWORD *)(v33 + 64) = v38;
    *(_QWORD *)(v33 + 72) = v39;
    v40 = type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters(0);
    v41 = sub_100005A54(&qword_10006FFE0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ADA0);
    *(_QWORD *)(v33 + 80) = v40;
    *(_QWORD *)(v33 + 88) = v41;
    v42 = sub_100017474();
    v43 = sub_100005690(&qword_10006FFF0);
    v44 = *(unsigned __int8 *)(v25 + 80);
    v45 = (v44 + 32) & ~v44;
    v46 = v2;
    v47 = swift_allocObject(v43, v45 + *(_QWORD *)(v25 + 72), v44 | 7);
    *(_OWORD *)(v47 + 16) = xmmword_10004BF60;
    v48 = v47 + v45;
    v49 = v56;
    (*(void (**)(uint64_t, char *, uint64_t))(v25 + 16))(v48, v27, v56);
    v50 = v59;
    v51 = ModelContainer.__allocating_init(for:migrationPlan:configurations:)(v33, &type metadata for AnalyticsMigrationPlan, v42, v47);
    if (!v50)
    {
      v53 = v51;
      (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v49);
      v58(v11, (uint64_t *)v46);
      v0 = v60;
      *(_QWORD *)(v60 + 16) = v53;
      return v0;
    }
    (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v49);
    v58(v11, (uint64_t *)v46);
    v0 = v60;
    v12 = v54;
  }
  swift_deallocPartialClassInstance(v0, v12, 24, 7);
  return v0;
}

uint64_t sub_1000137D0@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  NSURL *v18;
  void *v19;
  void *v20;
  unsigned int v21;
  id v22;
  id v23;
  id v24;
  NSURL *v25;
  void *v26;
  void *v27;
  unsigned int v28;
  uint64_t v29;
  id v30;
  void (*v31)(char *, uint64_t);
  id v33;
  _QWORD v34[3];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;

  v34[1] = a2;
  v3 = type metadata accessor for URLResourceValues(0);
  v35 = *(_QWORD *)(v3 - 8);
  v36 = v3;
  ((void (*)(void))__chkstk_darwin)();
  v5 = (char *)v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v37 = *(_QWORD *)(v6 - 8);
  v7 = ((uint64_t (*)(void))__chkstk_darwin)();
  v9 = (char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)v34 - v10;
  v12 = (void *)objc_opt_self(NSFileManager);
  v13 = objc_msgSend(v12, "defaultManager");
  v38 = 0;
  v14 = objc_msgSend(v13, "URLForDirectory:inDomain:appropriateForURL:create:error:", 5, 1, 0, 1, &v38);

  v15 = v38;
  if (v14)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v16 = v15;

    URL.appendingPathComponent(_:isDirectory:)(0x796C616E41534B41, 0xEC00000073636974, 1);
    if ((a1 & 1) != 0)
    {
      v17 = objc_msgSend(v12, "defaultManager");
      URL._bridgeToObjectiveC()(v18);
      v20 = v19;
      v38 = 0;
      v21 = objc_msgSend(v17, "removeItemAtURL:error:", v19, &v38);

      v22 = v38;
      if (!v21)
        goto LABEL_9;
      v23 = v38;
    }
    v24 = objc_msgSend(v12, "defaultManager");
    URL._bridgeToObjectiveC()(v25);
    v27 = v26;
    v38 = 0;
    v28 = objc_msgSend(v24, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v26, 1, 0, &v38);

    v22 = v38;
    if (v28)
    {
      URLResourceValues.init()(v38);
      URLResourceValues.isExcludedFromBackup.setter(1);
      v29 = v34[2];
      URL.setResourceValues(_:)(v5);
      if (!v29)
        URL.appendingPathComponent(_:)(0xD000000000000013, 0x80000001000511C0);
      (*(void (**)(char *, uint64_t))(v35 + 8))(v5, v36);
      goto LABEL_10;
    }
LABEL_9:
    v30 = v22;
    _convertNSErrorToError(_:)(v22);

    swift_willThrow();
LABEL_10:
    v31 = *(void (**)(char *, uint64_t))(v37 + 8);
    v31(v9, v6);
    return ((uint64_t (*)(char *, uint64_t))v31)(v11, v6);
  }
  v33 = v38;
  _convertNSErrorToError(_:)(v15);

  return swift_willThrow();
}

uint64_t sub_100013B00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  os_log_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  os_log_t v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AnalyticsStore();
  v6 = swift_allocObject(v5, 24, 7);
  sub_1000132C8();
  if (v0)
  {
    if (qword_10006E5C0 != -1)
      swift_once(&qword_10006E5C0, sub_10001AB28);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_100005D1C(v7, (uint64_t)qword_100071AE0);
    swift_errorRetain(v0);
    v9 = swift_errorRetain(v0);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v27 = v1;
      v12 = swift_slowAlloc(12, -1);
      v25[0] = v10;
      v25[1] = v8;
      v13 = (uint8_t *)v12;
      v14 = (uint64_t *)swift_slowAlloc(8, -1);
      v26 = v5;
      *(_DWORD *)v13 = 138412290;
      swift_errorRetain(v0);
      v15 = v4;
      v16 = v2;
      v17 = _swift_stdlib_bridgeErrorToNSError(v0);
      v28 = v17;
      v5 = v26;
      v1 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
      *v14 = v17;
      v2 = v16;
      v4 = v15;
      swift_errorRelease(v0);
      swift_errorRelease(v0);
      v18 = v25[0];
      _os_log_impl((void *)&_mh_execute_header, v25[0], v11, "failed to open database: %@", v13, 0xCu);
      v19 = sub_100005690(&qword_10006FFB8);
      swift_arrayDestroy(v14, 1, v19);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);

      v20 = swift_errorRelease(v0);
    }
    else
    {
      swift_errorRelease(v0);
      swift_errorRelease(v0);
      swift_errorRelease(v0);

    }
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "removing old database", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }

    sub_1000137D0(1, (uint64_t)v4);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    v6 = swift_allocObject(v5, 24, 7);
    sub_1000132C8();
  }
  return v6;
}

uint64_t type metadata accessor for AnalyticsStore()
{
  return objc_opt_self(_TtC14applekeystored14AnalyticsStore);
}

uint64_t sub_100013E28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];

  v1 = sub_100005690(&qword_100070038);
  __chkstk_darwin(v1);
  v3 = (char *)v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100005690(&qword_1000702C0);
  __chkstk_darwin(v4);
  v6 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100005690(&qword_1000702C8);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005690(&qword_1000702D0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v6, 1, 1, v11);
  v12 = type metadata accessor for AnalyticsSchemaV2.PipelineState(0);
  v13 = sub_100005A54(&qword_10006FFD8, type metadata accessor for AnalyticsSchemaV2.PipelineState, (uint64_t)&unk_10004AEBC);
  FetchDescriptor.init(predicate:sortBy:)(v6, &_swiftEmptyArrayStorage, v12, v13);
  v14 = dispatch thunk of ModelContext.fetch<A>(_:)(v10, v12, v13);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if (v0)
    return v7;
  if ((unint64_t)v14 >> 62)
  {
    if (v14 < 0)
      v17 = v14;
    else
      v17 = v14 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v14);
    v18 = _CocoaArrayWrapper.endIndex.getter(v17);
    swift_bridgeObjectRelease(v14);
    v15 = (uint64_t)v3;
    if (v18)
      goto LABEL_4;
  }
  else
  {
    v15 = (uint64_t)v3;
    if (*(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_4:
      if ((v14 & 0xC000000000000001) != 0)
      {
        v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v14);
        goto LABEL_7;
      }
      if (*(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v7 = *(_QWORD *)(v14 + 32);
        swift_retain(v7);
LABEL_7:
        swift_bridgeObjectRelease(v14);
        return v7;
      }
      __break(1u);
      goto LABEL_19;
    }
  }
  swift_bridgeObjectRelease(v14);
  if (qword_10006E5C0 != -1)
LABEL_19:
    swift_once(&qword_10006E5C0, sub_10001AB28);
  v19 = type metadata accessor for Logger(0);
  v20 = sub_100005D1C(v19, (uint64_t)qword_100071AE0);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "initializing PipelineState", v23, 2u);
    swift_slowDealloc(v23, -1, -1);
  }

  v24 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v15, 1, 1, v24);
  v7 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  sub_10000F408(1, 0, 1, v15);
  v25 = dispatch thunk of ModelContext.insert<A>(_:)(v7, v12, v13);
  dispatch thunk of ModelContext.save()(v25);
  return v7;
}

uint64_t sub_10001418C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  _QWORD v21[2];

  v1 = sub_100005690(&qword_1000702A8);
  __chkstk_darwin(v1);
  v3 = (char *)v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100005690(&qword_1000702B0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005690(&qword_1000702B8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters(0);
  v10 = sub_100005A54(&qword_10006FFE0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ADA0);
  FetchDescriptor.init(predicate:sortBy:)(v3, &_swiftEmptyArrayStorage, v9, v10);
  v11 = dispatch thunk of ModelContext.fetch<A>(_:)(v7, v9, v10);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (v0)
    return v4;
  if ((unint64_t)v11 >> 62)
  {
    if (v11 < 0)
      v13 = v11;
    else
      v13 = v11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v11);
    v14 = _CocoaArrayWrapper.endIndex.getter(v13);
    swift_bridgeObjectRelease(v11);
    if (v14)
      goto LABEL_4;
  }
  else if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_4:
    if ((v11 & 0xC000000000000001) != 0)
    {
      v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v11);
      goto LABEL_7;
    }
    if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v4 = *(_QWORD *)(v11 + 32);
      swift_retain(v4);
LABEL_7:
      swift_bridgeObjectRelease(v11);
      return v4;
    }
    __break(1u);
    goto LABEL_19;
  }
  swift_bridgeObjectRelease(v11);
  if (qword_10006E5C0 != -1)
LABEL_19:
    swift_once(&qword_10006E5C0, sub_10001AB28);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_100005D1C(v15, (uint64_t)qword_100071AE0);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "initializing AnalyticsCounters", v19, 2u);
    swift_slowDealloc(v19, -1, -1);
  }

  v4 = swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  sub_100011BEC();
  v20 = dispatch thunk of ModelContext.insert<A>(_:)(v4, v9, v10);
  dispatch thunk of ModelContext.save()(v20);
  return v4;
}

uint64_t sub_100014474(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t KeyPath;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  char *v43;
  uint64_t v44;
  char v45[16];
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v10 = sub_100005690(&qword_100070150);
  __chkstk_darwin(v10);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100005690(&qword_100070158);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = a2;
  v47 = a3;
  v40 = a3;
  v41 = a4;
  v42 = a5;
  v48 = a4;
  v49 = a5;
  v50 = a1;
  v17 = type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics(0);
  v52 = v17;
  Predicate.init(_:)(sub_10001A1D8, v45, 1, &v52);
  v18 = sub_100005690(&qword_100070160);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v12, 0, 1, v18);
  v19 = sub_100005A54(&qword_10006FFC8, type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics, (uint64_t)&unk_10004B0F4);
  FetchDescriptor.init(predicate:sortBy:)(v12, &_swiftEmptyArrayStorage, v17, v19);
  v20 = v44;
  result = dispatch thunk of ModelContext.fetch<A>(_:)(v16, v17, v19);
  v44 = v20;
  if (v20)
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  v22 = result;
  v38 = v13;
  v39 = v19;
  v43 = v16;
  v23 = v41;
  v37 = v14;
  if (!((unint64_t)result >> 62))
  {
    v24 = v40;
    if (*(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_5;
LABEL_14:
    swift_bridgeObjectRelease(v22);
    v35 = swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
    swift_bridgeObjectRetain(v24);
    sub_10000C8AC(a2, v24, v23);
    dispatch thunk of ModelContext.insert<A>(_:)(v35, v17, v39);
    swift_release(v35);
    v25 = v43;
    return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v25, v38);
  }
  if (result < 0)
    v33 = result;
  else
    v33 = result & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(result);
  v34 = _CocoaArrayWrapper.endIndex.getter(v33);
  result = swift_bridgeObjectRelease(v22);
  v24 = v40;
  if (!v34)
    goto LABEL_14;
LABEL_5:
  if ((v22 & 0xC000000000000001) != 0)
  {
    v27 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v22);
    v25 = v43;
    v26 = v39;
  }
  else
  {
    v25 = v43;
    v26 = v39;
    if (!*(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_19;
    }
    v27 = *(_QWORD *)(v22 + 32);
    swift_retain(v27);
  }
  swift_bridgeObjectRelease(v22);
  v51 = v27;
  KeyPath = swift_getKeyPath(&unk_10004BA78);
  v29 = sub_100005A54(&qword_10006FF20, type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics, (uint64_t)&unk_10004B038);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v51, KeyPath, v29);
  swift_release(KeyPath);
  v30 = swift_getKeyPath(&unk_10004BA78);
  PersistentModel.getValue<A>(forKey:)(&v51, v30, v26, &protocol witness table for UInt64);
  result = swift_release(v30);
  v31 = v51 + 1;
  if (v51 == -1)
  {
LABEL_19:
    __break(1u);
    return result;
  }
  v51 = v27;
  v32 = swift_getKeyPath(&unk_10004BA78);
  __chkstk_darwin(v32);
  *(&v36 - 2) = v27;
  *(&v36 - 1) = v31;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v51, v32, sub_10001AA00, &v36 - 4, (char *)&type metadata for () + 8, v29);
  swift_release(v27);
  swift_release(v32);
  return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v25, v38);
}

uint64_t sub_100014868@<X0>(uint64_t *a1@<X0>, void (*a2)(char *, uint64_t)@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t KeyPath;
  void (*v40)(char *, uint64_t);
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  void (*v110)(char *, uint64_t);
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  char *v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  void (*v146)(char *, uint64_t);
  char *v147;
  _QWORD v148[2];

  v136 = a6;
  v131 = a5;
  v118 = a4;
  v111 = a3;
  v110 = a2;
  v142 = a7;
  v8 = sub_100005690(&qword_1000700B8);
  v9 = *(_QWORD *)(v8 - 8);
  v138 = v8;
  v139 = v9;
  __chkstk_darwin(v8);
  v134 = (char *)&v99 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = sub_100005690(&qword_100070118);
  v137 = *(_QWORD *)(v135 - 8);
  __chkstk_darwin(v135);
  v132 = (char *)&v99 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005690(&qword_100070128);
  v13 = *(_QWORD *)(v12 - 8);
  v140 = v12;
  v141 = v13;
  __chkstk_darwin(v12);
  v133 = (char *)&v99 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = sub_100005690(&qword_100070168);
  v124 = *(_QWORD *)(v123 - 8);
  __chkstk_darwin(v123);
  v120 = (char *)&v99 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = sub_100005690(&qword_100070170);
  v127 = *(_QWORD *)(v125 - 8);
  __chkstk_darwin(v125);
  v121 = (char *)&v99 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100005690(&qword_100070178);
  v18 = *(_QWORD *)(v17 - 8);
  v129 = v17;
  v130 = v18;
  __chkstk_darwin(v17);
  v122 = (char *)&v99 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = sub_100005690(&qword_100070180);
  v112 = *(_QWORD *)(v109 - 8);
  __chkstk_darwin(v109);
  v105 = (char *)&v99 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = sub_100005690(&qword_100070188);
  v114 = *(_QWORD *)(v113 - 8);
  __chkstk_darwin(v113);
  v106 = (char *)&v99 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = sub_100005690(&qword_100070190);
  v116 = *(_QWORD *)(v115 - 8);
  __chkstk_darwin(v115);
  v108 = (char *)&v99 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100005690(&qword_100070198);
  v103 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v25 = (char *)&v99 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_100005690(&qword_100070110);
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v29 = (char *)&v99 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = sub_100005690(&qword_1000701A0);
  v102 = *(_QWORD *)(v143 - 8);
  __chkstk_darwin(v143);
  v31 = (char *)&v99 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = sub_100005690(&qword_1000701A8);
  v107 = *(_QWORD *)(v104 - 8);
  __chkstk_darwin(v104);
  v101 = (char *)&v99 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = sub_100005690(&qword_1000701B0);
  v119 = *(_QWORD *)(v117 - 8);
  __chkstk_darwin(v117);
  v145 = (char *)&v99 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = sub_100005690(&qword_1000701B8);
  v128 = *(_QWORD *)(v126 - 8);
  __chkstk_darwin(v126);
  v147 = (char *)&v99 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = *a1;
  v144 = v35;
  v36 = sub_10001A838(&qword_100070120, &qword_100070110, (uint64_t)&protocol conformance descriptor for PredicateExpressions.Variable<A>);
  v37 = v35;
  v38 = v36;
  static PredicateExpressions.build_Arg<A>(_:)(v37, v26);
  KeyPath = swift_getKeyPath(&unk_10004BA00);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v29, KeyPath, v26, v38);
  swift_release(KeyPath);
  v40 = *(void (**)(char *, uint64_t))(v27 + 8);
  v40(v29, v26);
  v41 = v40;
  v146 = v40;
  v148[0] = v110;
  v148[1] = v111;
  static PredicateExpressions.build_Arg<A>(_:)(v148, &type metadata for String);
  v42 = sub_10001A838(&qword_1000701C0, &qword_1000701A0, (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  v43 = sub_10001A838(&qword_1000701C8, &qword_100070198, (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  v44 = v143;
  v111 = v42;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)(v31, v25, v143, v23, v42, v43, &protocol witness table for String);
  (*(void (**)(char *, uint64_t))(v103 + 8))(v25, v23);
  v110 = *(void (**)(char *, uint64_t))(v102 + 8);
  v110(v31, v44);
  v45 = v144;
  v100 = v38;
  static PredicateExpressions.build_Arg<A>(_:)(v144, v26);
  v46 = swift_getKeyPath(&unk_10004BA28);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v29, v46, v26, v38);
  swift_release(v46);
  v41(v29, v26);
  LOBYTE(v148[0]) = v118;
  v47 = v105;
  static PredicateExpressions.build_Arg<A>(_:)(v148, &type metadata for AccessMode);
  v48 = swift_getKeyPath(&unk_10004BEB0);
  v49 = sub_10001A838(&qword_1000701D0, &qword_100070180, (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  v50 = v106;
  v51 = v109;
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v47, v48, v109, v49);
  swift_release(v48);
  (*(void (**)(char *, uint64_t))(v112 + 8))(v47, v51);
  v52 = sub_10001A838(&qword_1000701D8, &qword_100070188, (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  v53 = v108;
  v54 = v113;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)(v31, v50, v44, v113, v42, v52, &protocol witness table for String);
  (*(void (**)(char *, uint64_t))(v114 + 8))(v50, v54);
  v55 = v110;
  v110(v31, v44);
  v56 = sub_10001A838(&qword_1000701E0, &qword_1000701A8, (uint64_t)&protocol conformance descriptor for PredicateExpressions.Equal<A, B>);
  v57 = sub_10001A838(&qword_1000701E8, &qword_100070190, (uint64_t)&protocol conformance descriptor for PredicateExpressions.Equal<A, B>);
  v58 = v101;
  v59 = v104;
  v60 = v115;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)(v101, v53, v104, v115, v56, v57);
  (*(void (**)(char *, uint64_t))(v116 + 8))(v53, v60);
  (*(void (**)(char *, uint64_t))(v107 + 8))(v58, v59);
  v61 = v100;
  static PredicateExpressions.build_Arg<A>(_:)(v45, v26);
  v62 = swift_getKeyPath(&unk_10004BA50);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v29, v62, v26, v61);
  swift_release(v62);
  v146(v29, v26);
  LOBYTE(v148[0]) = v131;
  v63 = v120;
  static PredicateExpressions.build_Arg<A>(_:)(v148, &type metadata for AccessCategory);
  v64 = swift_getKeyPath(&unk_10004BED8);
  v65 = sub_10001A838(&qword_1000701F0, &qword_100070168, (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  v66 = v121;
  v67 = v123;
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v63, v64, v123, v65);
  swift_release(v64);
  (*(void (**)(char *, uint64_t))(v124 + 8))(v63, v67);
  v68 = sub_10001A838(&qword_1000701F8, &qword_100070170, (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  v69 = v122;
  v70 = v66;
  v71 = v66;
  v72 = v143;
  v73 = v125;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)(v31, v71, v143, v125, v111, v68, &protocol witness table for String);
  (*(void (**)(char *, uint64_t))(v127 + 8))(v70, v73);
  v55(v31, v72);
  v74 = sub_10001A838(&qword_100070200, &qword_1000701B0, (uint64_t)&protocol conformance descriptor for PredicateExpressions.Conjunction<A, B>);
  v75 = sub_10001A838(&qword_100070208, &qword_100070178, (uint64_t)&protocol conformance descriptor for PredicateExpressions.Equal<A, B>);
  v76 = v145;
  v77 = v117;
  v78 = v129;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)(v145, v69, v117, v129, v74, v75);
  (*(void (**)(char *, uint64_t))(v130 + 8))(v69, v78);
  (*(void (**)(char *, uint64_t))(v119 + 8))(v76, v77);
  static PredicateExpressions.build_Arg<A>(_:)(v144, v26);
  v79 = swift_getKeyPath(&unk_10004BAA0);
  v80 = v132;
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v29, v79, v26, v61);
  swift_release(v79);
  v146(v29, v26);
  v148[0] = v136;
  v81 = v134;
  static PredicateExpressions.build_Arg<A>(_:)(v148, &type metadata for Int);
  v82 = sub_10001A838(&qword_100070148, &qword_100070118, (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  v83 = sub_10001A838(&qword_100070108, &qword_1000700B8, (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  v84 = v133;
  v85 = v80;
  v86 = v80;
  v87 = v81;
  v88 = v81;
  v89 = v135;
  v90 = v138;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)(v85, v87, v135, v138, v82, v83, &protocol witness table for Int);
  (*(void (**)(char *, uint64_t))(v139 + 8))(v88, v90);
  (*(void (**)(char *, uint64_t))(v137 + 8))(v86, v89);
  v91 = sub_100005690(&qword_100070210);
  v92 = v142;
  v142[3] = v91;
  v92[4] = sub_10001A2A8();
  sub_10001788C(v92);
  v93 = sub_10001A838(&qword_100070298, &qword_1000701B8, (uint64_t)&protocol conformance descriptor for PredicateExpressions.Conjunction<A, B>);
  v94 = sub_10001A838(&qword_1000702A0, &qword_100070128, (uint64_t)&protocol conformance descriptor for PredicateExpressions.Equal<A, B>);
  v95 = v147;
  v96 = v126;
  v97 = v140;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)(v147, v84, v126, v140, v93, v94);
  (*(void (**)(char *, uint64_t))(v141 + 8))(v84, v97);
  return (*(uint64_t (**)(char *, uint64_t))(v128 + 8))(v95, v96);
}

uint64_t sub_10001546C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t KeyPath;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v21 = a2;
  v5 = sub_100005690(&qword_1000700B8);
  v23 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005690(&qword_100070110);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005690(&qword_100070118);
  v22 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a1;
  v16 = sub_10001A838(&qword_100070120, &qword_100070110, (uint64_t)&protocol conformance descriptor for PredicateExpressions.Variable<A>);
  static PredicateExpressions.build_Arg<A>(_:)(v15, v8);
  KeyPath = swift_getKeyPath(&unk_10004BAA0);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v11, KeyPath, v8, v16);
  swift_release(KeyPath);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v24 = v21;
  static PredicateExpressions.build_Arg<A>(_:)(&v24, &type metadata for Int);
  a3[3] = sub_100005690(&qword_100070128);
  a3[4] = sub_10001A12C();
  sub_10001788C(a3);
  v18 = sub_10001A838(&qword_100070148, &qword_100070118, (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  v19 = sub_10001A838(&qword_100070108, &qword_1000700B8, (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)(v14, v7, v12, v5, v18, v19, &protocol witness table for Int);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v14, v12);
}

uint64_t sub_1000156B8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t KeyPath;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v21 = a2;
  v5 = sub_100005690(&qword_1000700B8);
  v23 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005690(&qword_1000700C0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005690(&qword_1000700C8);
  v22 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a1;
  v16 = sub_10001A838(&qword_1000700D0, &qword_1000700C0, (uint64_t)&protocol conformance descriptor for PredicateExpressions.Variable<A>);
  static PredicateExpressions.build_Arg<A>(_:)(v15, v8);
  KeyPath = swift_getKeyPath(&unk_10004BC30);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v11, KeyPath, v8, v16);
  swift_release(KeyPath);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v24 = v21;
  static PredicateExpressions.build_Arg<A>(_:)(&v24, &type metadata for Int);
  a3[3] = sub_100005690(&qword_1000700D8);
  a3[4] = sub_10001A008();
  sub_10001788C(a3);
  v18 = sub_10001A838(&qword_100070100, &qword_1000700C8, (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  v19 = sub_10001A838(&qword_100070108, &qword_1000700B8, (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)(v14, v7, v12, v5, v18, v19, &protocol witness table for Int);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v14, v12);
}

uint64_t sub_100015904()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for AnalyticsStoreContext()
{
  return objc_opt_self(_TtC14applekeystored21AnalyticsStoreContext);
}

ValueMetadata *type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters._SwiftDataNoType()
{
  return &type metadata for AnalyticsSchemaV2.AnalyticsCounters._SwiftDataNoType;
}

ValueMetadata *type metadata accessor for AnalyticsSchemaV2.PipelineState._SwiftDataNoType()
{
  return &type metadata for AnalyticsSchemaV2.PipelineState._SwiftDataNoType;
}

ValueMetadata *type metadata accessor for AnalyticsSchemaV2.FileAnalytics._SwiftDataNoType()
{
  return &type metadata for AnalyticsSchemaV2.FileAnalytics._SwiftDataNoType;
}

ValueMetadata *type metadata accessor for AnalyticsSchemaV2()
{
  return &type metadata for AnalyticsSchemaV2;
}

ValueMetadata *type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics._SwiftDataNoType()
{
  return &type metadata for AnalyticsSchemaV2.ProcessAnalytics._SwiftDataNoType;
}

ValueMetadata *type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters._SwiftDataNoType()
{
  return &type metadata for AnalyticsSchemaV1.AnalyticsCounters._SwiftDataNoType;
}

ValueMetadata *type metadata accessor for AnalyticsSchemaV1.PipelineState._SwiftDataNoType()
{
  return &type metadata for AnalyticsSchemaV1.PipelineState._SwiftDataNoType;
}

ValueMetadata *type metadata accessor for AnalyticsSchemaV1.FileAnalytics._SwiftDataNoType()
{
  return &type metadata for AnalyticsSchemaV1.FileAnalytics._SwiftDataNoType;
}

ValueMetadata *type metadata accessor for AnalyticsSchemaV1()
{
  return &type metadata for AnalyticsSchemaV1;
}

ValueMetadata *type metadata accessor for AnalyticsSchemaV1.ProcessAnalytics._SwiftDataNoType()
{
  return &type metadata for AnalyticsSchemaV1.ProcessAnalytics._SwiftDataNoType;
}

uint64_t sub_1000159E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100016504(a1, a2, a3, type metadata accessor for AnalyticsSchemaV1.ProcessAnalytics, (void (*)(uint64_t))sub_1000070E0);
}

uint64_t sub_100015A00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100015BC0(a1, a2, a3, (void (*)(uint64_t, _QWORD *))sub_100017874);
}

void (*sub_100015A0C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[16] = v1;
  swift_beginAccess(v1 + 16, v3 + 10, 0, 0);
  sub_100019FC4(v1 + 16, (uint64_t)v3);
  return sub_100015A74;
}

void sub_100015A74(uint64_t *a1, char a2)
{
  sub_100015C24(a1, a2, (void (*)(uint64_t, _QWORD *))sub_100017874);
}

Swift::Int sub_100015A84(uint64_t a1, uint64_t a2)
{
  return sub_100016574(a1, a2, type metadata accessor for AnalyticsSchemaV1.ProcessAnalytics, &qword_100070008, (uint64_t)&unk_10004B564);
}

uint64_t sub_100015AA0(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10004B564, a2);
  return PersistentModel.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_100015AE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100016648(a1, a2, a3, (uint64_t)&unk_10004B564);
}

uint64_t sub_100015AF4(uint64_t a1, uint64_t a2)
{
  return sub_1000166C4(a1, a2, type metadata accessor for AnalyticsSchemaV1.ProcessAnalytics, &qword_100070008, (uint64_t)&unk_10004B564);
}

uint64_t sub_100015B10(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;

  v4 = *a1;
  v5 = *a2;
  WitnessTable = swift_getWitnessTable(&unk_10004B564, a3);
  return static PersistentModel.== infix(_:_:)(v4, v5, a3, WitnessTable) & 1;
}

uint64_t sub_100015B64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100016504(a1, a2, a3, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (void (*)(uint64_t))sub_10000886C);
}

uint64_t sub_100015B78@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + 16;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_100019FC4(v3, a1);
}

uint64_t sub_100015BC0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, _QWORD *))
{
  uint64_t v4;
  _QWORD *v7;
  _BYTE v9[24];

  v7 = (_QWORD *)(v4 + 16);
  swift_beginAccess(v7, v9, 33, 0);
  sub_100005D78(v7);
  a4(a1, v7);
  return swift_endAccess(v9);
}

void sub_100015C24(uint64_t *a1, char a2, void (*a3)(uint64_t, _QWORD *))
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v4 = (_QWORD *)*a1;
  v5 = *a1 + 40;
  if ((a2 & 1) != 0)
  {
    v6 = (_QWORD *)(v4[16] + 16);
    sub_100019FC4(*a1, v5);
    swift_beginAccess(v6, v4 + 13, 33, 0);
    sub_100005D78(v6);
    a3(v5, v6);
    swift_endAccess(v4 + 13);
    sub_100005D78(v4);
  }
  else
  {
    v7 = (_QWORD *)(v4[16] + 16);
    swift_beginAccess(v7, v5, 33, 0);
    sub_100005D78(v7);
    a3((uint64_t)v4, v7);
    swift_endAccess(v5);
  }
  free(v4);
}

Swift::Int sub_100015CF0(uint64_t a1, uint64_t a2)
{
  return sub_100016574(a1, a2, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, &qword_100070028, (uint64_t)&unk_10004B448);
}

uint64_t sub_100015D0C(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10004B448, a2);
  return PersistentModel.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_100015D54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100016648(a1, a2, a3, (uint64_t)&unk_10004B448);
}

uint64_t sub_100015D60(uint64_t a1, uint64_t a2)
{
  return sub_1000166C4(a1, a2, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, &qword_100070028, (uint64_t)&unk_10004B448);
}

uint64_t sub_100015D7C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;

  v4 = *a1;
  v5 = *a2;
  WitnessTable = swift_getWitnessTable(&unk_10004B448, a3);
  return static PersistentModel.== infix(_:_:)(v4, v5, a3, WitnessTable) & 1;
}

uint64_t sub_100015DD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100016504(a1, a2, a3, type metadata accessor for AnalyticsSchemaV1.PipelineState, (void (*)(uint64_t))sub_100009330);
}

uint64_t sub_100015DE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000162B8(a1, a2, a3, (void (*)(uint64_t, _QWORD *))sub_100017874);
}

void (*sub_100015DF4(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[16] = v1;
  swift_beginAccess(v1 + 24, v3 + 10, 0, 0);
  sub_100019FC4(v1 + 24, (uint64_t)v3);
  return sub_100015E5C;
}

void sub_100015E5C(uint64_t *a1, char a2)
{
  sub_10001631C(a1, a2, (void (*)(uint64_t, _QWORD *))sub_100017874);
}

uint64_t sub_100015E68()
{
  return sub_10001978C((uint64_t)&unk_10004B7D0, (uint64_t)&unk_10004B7F8, (uint64_t)&unk_10004B820);
}

Swift::Int sub_100015E94(uint64_t a1, uint64_t a2)
{
  return sub_100016574(a1, a2, type metadata accessor for AnalyticsSchemaV1.PipelineState, &qword_100070040, (uint64_t)&unk_10004B32C);
}

uint64_t sub_100015EB0(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10004B32C, a2);
  return PersistentModel.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_100015EF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100016648(a1, a2, a3, (uint64_t)&unk_10004B32C);
}

uint64_t sub_100015F04(uint64_t a1, uint64_t a2)
{
  return sub_1000166C4(a1, a2, type metadata accessor for AnalyticsSchemaV1.PipelineState, &qword_100070040, (uint64_t)&unk_10004B32C);
}

uint64_t sub_100015F20(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;

  v4 = *a1;
  v5 = *a2;
  WitnessTable = swift_getWitnessTable(&unk_10004B32C, a3);
  return static PersistentModel.== infix(_:_:)(v4, v5, a3, WitnessTable) & 1;
}

uint64_t sub_100015F74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100016504(a1, a2, a3, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (void (*)(uint64_t))sub_10000B4CC);
}

Swift::Int sub_100015F8C(uint64_t a1, uint64_t a2)
{
  return sub_100016574(a1, a2, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, &qword_100070088, (uint64_t)&unk_10004B210);
}

uint64_t sub_100015FA8(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10004B210, a2);
  return PersistentModel.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_100015FF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100016648(a1, a2, a3, (uint64_t)&unk_10004B210);
}

uint64_t sub_100015FFC(uint64_t a1, uint64_t a2)
{
  return sub_1000166C4(a1, a2, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, &qword_100070088, (uint64_t)&unk_10004B210);
}

uint64_t sub_100016018(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;

  v4 = *a1;
  v5 = *a2;
  WitnessTable = swift_getWitnessTable(&unk_10004B210, a3);
  return static PersistentModel.== infix(_:_:)(v4, v5, a3, WitnessTable) & 1;
}

uint64_t sub_10001606C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100016504(a1, a2, a3, type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics, (void (*)(uint64_t))sub_10000CC44);
}

Swift::Int sub_100016084(uint64_t a1, uint64_t a2)
{
  return sub_100016574(a1, a2, type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics, &qword_10006FFC8, (uint64_t)&unk_10004B0F4);
}

uint64_t sub_1000160A0(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10004B0F4, a2);
  return PersistentModel.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_1000160E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100016648(a1, a2, a3, (uint64_t)&unk_10004B0F4);
}

uint64_t sub_1000160F4(uint64_t a1, uint64_t a2)
{
  return sub_1000166C4(a1, a2, type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics, &qword_10006FFC8, (uint64_t)&unk_10004B0F4);
}

uint64_t sub_100016110(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;

  v4 = *a1;
  v5 = *a2;
  WitnessTable = swift_getWitnessTable(&unk_10004B0F4, a3);
  return static PersistentModel.== infix(_:_:)(v4, v5, a3, WitnessTable) & 1;
}

uint64_t sub_100016164(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100016504(a1, a2, a3, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (void (*)(uint64_t))sub_10000E7C0);
}

Swift::Int sub_10001617C(uint64_t a1, uint64_t a2)
{
  return sub_100016574(a1, a2, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, &qword_10006FFD0, (uint64_t)&unk_10004AFD8);
}

uint64_t sub_100016198(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10004AFD8, a2);
  return PersistentModel.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_1000161E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100016648(a1, a2, a3, (uint64_t)&unk_10004AFD8);
}

uint64_t sub_1000161EC(uint64_t a1, uint64_t a2)
{
  return sub_1000166C4(a1, a2, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, &qword_10006FFD0, (uint64_t)&unk_10004AFD8);
}

uint64_t sub_100016208(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;

  v4 = *a1;
  v5 = *a2;
  WitnessTable = swift_getWitnessTable(&unk_10004AFD8, a3);
  return static PersistentModel.== infix(_:_:)(v4, v5, a3, WitnessTable) & 1;
}

uint64_t sub_10001625C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100016504(a1, a2, a3, type metadata accessor for AnalyticsSchemaV2.PipelineState, (void (*)(uint64_t))sub_10000F678);
}

uint64_t sub_100016270@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + 24;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_100019FC4(v3, a1);
}

uint64_t sub_1000162B8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, _QWORD *))
{
  uint64_t v4;
  _QWORD *v7;
  _BYTE v9[24];

  v7 = (_QWORD *)(v4 + 24);
  swift_beginAccess(v7, v9, 33, 0);
  sub_100005D78(v7);
  a4(a1, v7);
  return swift_endAccess(v9);
}

void sub_10001631C(uint64_t *a1, char a2, void (*a3)(uint64_t, _QWORD *))
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v4 = (_QWORD *)*a1;
  v5 = *a1 + 40;
  if ((a2 & 1) != 0)
  {
    v6 = (_QWORD *)(v4[16] + 24);
    sub_100019FC4(*a1, v5);
    swift_beginAccess(v6, v4 + 13, 33, 0);
    sub_100005D78(v6);
    a3(v5, v6);
    swift_endAccess(v4 + 13);
    sub_100005D78(v4);
  }
  else
  {
    v7 = (_QWORD *)(v4[16] + 24);
    swift_beginAccess(v7, v5, 33, 0);
    sub_100005D78(v7);
    a3((uint64_t)v4, v7);
    swift_endAccess(v5);
  }
  free(v4);
}

uint64_t sub_1000163E4()
{
  return sub_10001978C((uint64_t)&unk_10004BC58, (uint64_t)&unk_10004BC80, (uint64_t)&unk_10004BCA8);
}

Swift::Int sub_100016410(uint64_t a1, uint64_t a2)
{
  return sub_100016574(a1, a2, type metadata accessor for AnalyticsSchemaV2.PipelineState, &qword_10006FFD8, (uint64_t)&unk_10004AEBC);
}

uint64_t sub_10001642C(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10004AEBC, a2);
  return PersistentModel.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_100016474(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100016648(a1, a2, a3, (uint64_t)&unk_10004AEBC);
}

uint64_t sub_100016480(uint64_t a1, uint64_t a2)
{
  return sub_1000166C4(a1, a2, type metadata accessor for AnalyticsSchemaV2.PipelineState, &qword_10006FFD8, (uint64_t)&unk_10004AEBC);
}

uint64_t sub_10001649C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;

  v4 = *a1;
  v5 = *a2;
  WitnessTable = swift_getWitnessTable(&unk_10004AEBC, a3);
  return static PersistentModel.== infix(_:_:)(v4, v5, a3, WitnessTable) & 1;
}

uint64_t sub_1000164F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100016504(a1, a2, a3, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (void (*)(uint64_t))sub_100012120);
}

uint64_t sub_100016504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), void (*a5)(uint64_t))
{
  uint64_t v7;
  uint64_t v8;

  v7 = a4(0);
  v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  a5(a1);
  return v8;
}

Swift::Int sub_100016558(uint64_t a1, uint64_t a2)
{
  return sub_100016574(a1, a2, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, &qword_10006FFE0, (uint64_t)&unk_10004ADA0);
}

Swift::Int sub_100016574(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[9];

  Hasher.init(_seed:)(v11, 0);
  v8 = a3(0);
  v9 = sub_100005A54(a4, a3, a5);
  PersistentModel.hash(into:)(v11, v8, v9);
  return Hasher._finalize()();
}

uint64_t sub_1000165F4(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10004ADA0, a2);
  return PersistentModel.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_10001663C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100016648(a1, a2, a3, (uint64_t)&unk_10004ADA0);
}

Swift::Int sub_100016648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8, a1);
  WitnessTable = swift_getWitnessTable(a4, a2);
  PersistentModel.hash(into:)(v8, a2, WitnessTable);
  return Hasher._finalize()();
}

uint64_t sub_1000166A8(uint64_t a1, uint64_t a2)
{
  return sub_1000166C4(a1, a2, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, &qword_10006FFE0, (uint64_t)&unk_10004ADA0);
}

uint64_t sub_1000166C4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;

  v8 = a3(0);
  v9 = sub_100005A54(a4, a3, a5);
  return PersistentModel.id.getter(v8, v9);
}

uint64_t sub_10001672C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;

  v4 = *a1;
  v5 = *a2;
  WitnessTable = swift_getWitnessTable(&unk_10004ADA0, a3);
  return static PersistentModel.== infix(_:_:)(v4, v5, a3, WitnessTable) & 1;
}

uint64_t sub_100016780()
{
  return sub_100005A54(&qword_10006FEB0, (uint64_t (*)(uint64_t))&type metadata accessor for PersistentIdentifier, (uint64_t)&protocol conformance descriptor for PersistentIdentifier);
}

uint64_t sub_1000167AC()
{
  return sub_100005A54(&qword_10006FEB8, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004AD00);
}

uint64_t sub_1000167D8()
{
  return sub_100005A54(&qword_10006FEC0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ACE4);
}

uint64_t sub_100016804()
{
  return sub_100005A54(&qword_10006FEC8, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004AD60);
}

uint64_t sub_100016830()
{
  return sub_100005A54(&qword_10006FED0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004AD28);
}

uint64_t sub_10001685C()
{
  return sub_100005A54(&qword_10006FED8, type metadata accessor for AnalyticsSchemaV2.PipelineState, (uint64_t)&unk_10004AE1C);
}

uint64_t sub_100016888()
{
  return sub_100005A54(&qword_10006FEE0, type metadata accessor for AnalyticsSchemaV2.PipelineState, (uint64_t)&unk_10004AE00);
}

uint64_t sub_1000168B4()
{
  return sub_100005A54(&qword_10006FEE8, type metadata accessor for AnalyticsSchemaV2.PipelineState, (uint64_t)&unk_10004AE7C);
}

uint64_t sub_1000168E0()
{
  return sub_100005A54(&qword_10006FEF0, type metadata accessor for AnalyticsSchemaV2.PipelineState, (uint64_t)&unk_10004AE44);
}

uint64_t sub_10001690C()
{
  return sub_100005A54(&qword_10006FEF8, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AF38);
}

uint64_t sub_100016938()
{
  return sub_100005A54(&qword_10006FF00, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AF1C);
}

uint64_t sub_100016964()
{
  return sub_100005A54(&qword_10006FF08, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AF98);
}

uint64_t sub_100016990()
{
  return sub_100005A54(&qword_10006FF10, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AF60);
}

uint64_t sub_1000169BC()
{
  return sub_100005A54(&qword_10006FF18, type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics, (uint64_t)&unk_10004B054);
}

uint64_t sub_1000169E8()
{
  return sub_100005A54(&qword_10006FF20, type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics, (uint64_t)&unk_10004B038);
}

uint64_t sub_100016A14()
{
  return sub_100005A54(&qword_10006FF28, type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics, (uint64_t)&unk_10004B0B4);
}

uint64_t sub_100016A40()
{
  return sub_100005A54(&qword_10006FF30, type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics, (uint64_t)&unk_10004B07C);
}

uint64_t sub_100016A6C()
{
  return sub_100005A54(&qword_10006FF38, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B170);
}

uint64_t sub_100016A98()
{
  return sub_100005A54(&qword_10006FF40, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B154);
}

uint64_t sub_100016AC4()
{
  return sub_100005A54(&qword_10006FF48, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B1D0);
}

uint64_t sub_100016AF0()
{
  return sub_100005A54(&qword_10006FF50, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B198);
}

uint64_t sub_100016B1C()
{
  return sub_100005A54(&qword_10006FF58, type metadata accessor for AnalyticsSchemaV1.PipelineState, (uint64_t)&unk_10004B28C);
}

uint64_t sub_100016B48()
{
  return sub_100005A54(&qword_10006FF60, type metadata accessor for AnalyticsSchemaV1.PipelineState, (uint64_t)&unk_10004B270);
}

uint64_t sub_100016B74()
{
  return sub_100005A54(&qword_10006FF68, type metadata accessor for AnalyticsSchemaV1.PipelineState, (uint64_t)&unk_10004B2EC);
}

uint64_t sub_100016BA0()
{
  return sub_100005A54(&qword_10006FF70, type metadata accessor for AnalyticsSchemaV1.PipelineState, (uint64_t)&unk_10004B2B4);
}

uint64_t sub_100016BCC()
{
  return sub_100005A54(&qword_10006FF78, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B3A8);
}

uint64_t sub_100016BF8()
{
  return sub_100005A54(&qword_10006FF80, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B38C);
}

uint64_t sub_100016C24()
{
  return sub_100005A54(&qword_10006FF88, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B408);
}

uint64_t sub_100016C50()
{
  return sub_100005A54(&qword_10006FF90, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B3D0);
}

uint64_t sub_100016C7C()
{
  return sub_100005A54(&qword_10006FF98, type metadata accessor for AnalyticsSchemaV1.ProcessAnalytics, (uint64_t)&unk_10004B4C4);
}

uint64_t sub_100016CA8()
{
  return sub_100005A54(&qword_10006FFA0, type metadata accessor for AnalyticsSchemaV1.ProcessAnalytics, (uint64_t)&unk_10004B4A8);
}

uint64_t sub_100016CD4()
{
  return sub_100005A54(&qword_10006FFA8, type metadata accessor for AnalyticsSchemaV1.ProcessAnalytics, (uint64_t)&unk_10004B524);
}

uint64_t sub_100016D00()
{
  return sub_100005A54(&qword_10006FFB0, type metadata accessor for AnalyticsSchemaV1.ProcessAnalytics, (uint64_t)&unk_10004B4EC);
}

uint64_t sub_100016D2C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100016D4C(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  v6 = a4();
  v8 = v7;
  v9 = sub_100016DBC(v6, v7, a3);
  v10 = *a1 + 8;
  v12 = v9;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13);
  result = swift_bridgeObjectRelease(v8);
  *a1 = v10;
  return result;
}

uint64_t sub_100016DBC(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_100016E8C(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_1000174B8((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_1000174B8((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_100005D78(v12);
  return v7;
}

uint64_t sub_100016E8C(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_100017044(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_100017044(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_1000170D8(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_100017328(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_100017328(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_1000170D8(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_10001724C(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return &_swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_10001724C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = sub_100005690(&qword_10006FFF8);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_1000172B0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v5 = a1;
  v6 = a1 >> 16;
  v7 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v13 = String.UTF16View.index(_:offsetBy:)(15, v6, a2);
    v14 = v13 + (v7 << 16);
    v15 = v13 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v16 = v14 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v16 = v15;
    return v16 | 4;
  }
  else
  {
    v8 = String.UTF8View._foreignIndex(_:offsetBy:)(15, v6);
    v9 = v8 + (v7 << 16);
    v10 = v8 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v11 = v9 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v11 = v10;
    return v11 | 8;
  }
}

uint64_t sub_100017328(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005690(&qword_10006FFF8);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

unint64_t sub_100017474()
{
  unint64_t result;

  result = qword_10006FFE8;
  if (!qword_10006FFE8)
  {
    result = swift_getWitnessTable(&unk_10004BF18, &type metadata for AnalyticsMigrationPlan);
    atomic_store(result, (unint64_t *)&qword_10006FFE8);
  }
  return result;
}

uint64_t sub_1000174B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1000174F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v0 = sub_100005690(&qword_10006FFC0);
  v1 = swift_allocObject(v0, 96, 7);
  *(_OWORD *)(v1 + 16) = xmmword_10004BF70;
  v2 = type metadata accessor for AnalyticsSchemaV1.ProcessAnalytics(0);
  v3 = sub_100005A54(&qword_100070008, type metadata accessor for AnalyticsSchemaV1.ProcessAnalytics, (uint64_t)&unk_10004B564);
  *(_QWORD *)(v1 + 32) = v2;
  *(_QWORD *)(v1 + 40) = v3;
  v4 = type metadata accessor for AnalyticsSchemaV1.FileAnalytics(0);
  v5 = sub_100005A54(&qword_100070028, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B448);
  *(_QWORD *)(v1 + 48) = v4;
  *(_QWORD *)(v1 + 56) = v5;
  v6 = type metadata accessor for AnalyticsSchemaV1.PipelineState(0);
  v7 = sub_100005A54(&qword_100070040, type metadata accessor for AnalyticsSchemaV1.PipelineState, (uint64_t)&unk_10004B32C);
  *(_QWORD *)(v1 + 64) = v6;
  *(_QWORD *)(v1 + 72) = v7;
  v8 = type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters(0);
  v9 = sub_100005A54(&qword_100070088, type metadata accessor for AnalyticsSchemaV1.AnalyticsCounters, (uint64_t)&unk_10004B210);
  *(_QWORD *)(v1 + 80) = v8;
  *(_QWORD *)(v1 + 88) = v9;
  return v1;
}

uint64_t sub_1000175EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;

  v0 = sub_100005690(&qword_100070000);
  v1 = type metadata accessor for Schema.PropertyMetadata(0);
  v2 = swift_allocObject(v0, ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80))+ 4 * *(_QWORD *)(*(_QWORD *)(v1 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) | 7);
  *(_OWORD *)(v2 + 16) = xmmword_10004BF70;
  KeyPath = swift_getKeyPath(&unk_10004B5C8);
  v11 = 0u;
  v12 = 0u;
  v10 = 0;
  v8 = 0u;
  v9 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x737365636F7270, 0xE700000000000000, KeyPath, &v11, &v8);
  v4 = swift_getKeyPath(&unk_10004B5F0);
  v11 = 0u;
  v12 = 0u;
  v10 = 0;
  v8 = 0u;
  v9 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x6143737365636361, 0xEE0079726F676574, v4, &v11, &v8);
  v5 = swift_getKeyPath(&unk_10004B618);
  v11 = 0u;
  v12 = 0u;
  v10 = 0;
  v8 = 0u;
  v9 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x6F43737365636361, 0xEB00000000746E75, v5, &v11, &v8);
  v6 = swift_getKeyPath(&unk_10004B640);
  v11 = 0u;
  v12 = 0u;
  v10 = 0;
  v8 = 0u;
  v9 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x69746172656E6567, 0xEA00000000006E6FLL, v6, &v11, &v8);
  return v2;
}

uint64_t sub_1000177CC()
{
  uint64_t v0;

  return sub_100007054(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000177E4()
{
  uint64_t v0;

  return sub_100006D64(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000177FC()
{
  uint64_t *v0;

  return sub_10000DB0C(v0[2], v0[3], v0[4], (uint64_t)&unk_10004B5F0, &qword_100070008, type metadata accessor for AnalyticsSchemaV1.ProcessAnalytics, (uint64_t)&unk_10004B564);
}

uint64_t sub_100017838()
{
  uint64_t *v0;

  return sub_10000DB0C(v0[2], v0[3], v0[4], (uint64_t)&unk_10004B5C8, &qword_100070008, type metadata accessor for AnalyticsSchemaV1.ProcessAnalytics, (uint64_t)&unk_10004B564);
}

uint64_t sub_100017874(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

_QWORD *sub_10001788C(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

uint64_t sub_1000178C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;

  v0 = sub_100005690(&qword_100070000);
  v1 = type metadata accessor for Schema.PropertyMetadata(0);
  v2 = swift_allocObject(v0, ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80))+ 9 * *(_QWORD *)(*(_QWORD *)(v1 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) | 7);
  *(_OWORD *)(v2 + 16) = xmmword_10004BF80;
  KeyPath = swift_getKeyPath(&unk_10004B668);
  v21 = 0u;
  v22 = 0u;
  v4 = sub_100005690(&qword_100070018);
  v5 = type metadata accessor for Schema.Attribute.Option(0);
  v6 = swift_allocObject(v4, ((*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v5 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) | 7);
  *(_OWORD *)(v6 + 16) = xmmword_10004BF60;
  static Schema.Attribute.Option.unique.getter();
  v7 = type metadata accessor for Schema.Attribute(0);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  v8 = Schema.Attribute.init(_:originalName:hashModifier:)(v6, 0, 0, 0, 0);
  *((_QWORD *)&v19 + 1) = v7;
  v20 = sub_100005A54(&qword_100070020, (uint64_t (*)(uint64_t))&type metadata accessor for Schema.Attribute, (uint64_t)&protocol conformance descriptor for Schema.Attribute);
  *(_QWORD *)&v18 = v8;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(1953459315, 0xE400000000000000, KeyPath, &v21, &v18);
  v9 = swift_getKeyPath(&unk_10004B690);
  v21 = 0u;
  v22 = 0u;
  v20 = 0;
  v18 = 0u;
  v19 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(1752457584, 0xE400000000000000, v9, &v21, &v18);
  v10 = swift_getKeyPath(&unk_10004B6B8);
  v21 = 0u;
  v22 = 0u;
  v20 = 0;
  v18 = 0u;
  v19 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x737365636F7270, 0xE700000000000000, v10, &v21, &v18);
  v11 = swift_getKeyPath(&unk_10004B6E0);
  v21 = 0u;
  v22 = 0u;
  v20 = 0;
  v18 = 0u;
  v19 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x6143737365636361, 0xEE0079726F676574, v11, &v21, &v18);
  v12 = swift_getKeyPath(&unk_10004B708);
  v21 = 0u;
  v22 = 0u;
  v20 = 0;
  v18 = 0u;
  v19 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x6F43737365636361, 0xEB00000000746E75, v12, &v21, &v18);
  v13 = swift_getKeyPath(&unk_10004B730);
  v21 = 0u;
  v22 = 0u;
  v20 = 0;
  v18 = 0u;
  v19 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0xD000000000000011, 0x8000000100051430, v13, &v21, &v18);
  v14 = swift_getKeyPath(&unk_10004B758);
  v21 = 0u;
  v22 = 0u;
  v20 = 0;
  v18 = 0u;
  v19 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x745367616279656BLL, 0xEB00000000657461, v14, &v21, &v18);
  v15 = swift_getKeyPath(&unk_10004B780);
  v21 = 0u;
  v22 = 0u;
  v20 = 0;
  v18 = 0u;
  v19 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x6279654B65726F6DLL, 0xEF65746174536761, v15, &v21, &v18);
  v16 = swift_getKeyPath(&unk_10004B7A8);
  v21 = 0u;
  v22 = 0u;
  v20 = 0;
  v18 = 0u;
  v19 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x69746172656E6567, 0xEA00000000006E6FLL, v16, &v21, &v18);
  return v2;
}

uint64_t sub_100017CF8@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_100008020(a1, (uint64_t)&unk_10004B730, a2);
}

uint64_t sub_100017D14(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100008100(a1, a2, a3, a4, (uint64_t)&unk_10004B730, (uint64_t)sub_100017DF4);
}

uint64_t sub_100017D38@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_100008020(a1, (uint64_t)&unk_10004B758, a2);
}

uint64_t sub_100017D54(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100008100(a1, a2, a3, a4, (uint64_t)&unk_10004B758, (uint64_t)sub_100017DB8);
}

uint64_t sub_100017D88()
{
  uint64_t v0;

  return sub_1000087E0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100017DA0()
{
  uint64_t v0;

  return sub_1000084F0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100017DB8()
{
  uint64_t v0;

  return sub_10000E150(*(_QWORD *)(v0 + 16), *(_DWORD *)(v0 + 24), (uint64_t)&unk_10004B758, &qword_100070028, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B448);
}

uint64_t sub_100017DF4()
{
  uint64_t v0;

  return sub_10000E150(*(_QWORD *)(v0 + 16), *(_DWORD *)(v0 + 24), (uint64_t)&unk_10004B730, &qword_100070028, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B448);
}

uint64_t sub_100017E30()
{
  uint64_t v0;

  return sub_100007F88(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100017E48()
{
  uint64_t *v0;

  return sub_10000DB0C(v0[2], v0[3], v0[4], (uint64_t)&unk_10004B6E0, &qword_100070028, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B448);
}

uint64_t sub_100017E84()
{
  uint64_t *v0;

  return sub_10000DB0C(v0[2], v0[3], v0[4], (uint64_t)&unk_10004B6B8, &qword_100070028, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B448);
}

uint64_t sub_100017EC0()
{
  uint64_t *v0;

  return sub_10000DB0C(v0[2], v0[3], v0[4], (uint64_t)&unk_10004B690, &qword_100070028, type metadata accessor for AnalyticsSchemaV1.FileAnalytics, (uint64_t)&unk_10004B448);
}

uint64_t sub_100017EFC()
{
  uint64_t v0;

  return sub_10000750C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100017F2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005690(&qword_100070038);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100017F74()
{
  uint64_t v0;

  return sub_10000F358(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), (uint64_t)&unk_10004B820, &qword_100070040, type metadata accessor for AnalyticsSchemaV1.PipelineState, (uint64_t)&unk_10004B32C);
}

uint64_t sub_100017FAC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005690(&qword_100070038);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100017FEC(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v9 = sub_100005F1C(&qword_100070038);
    sub_100005A54(a2, (uint64_t (*)(uint64_t))&type metadata accessor for Date, a3);
    result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100018070()
{
  uint64_t v0;

  return sub_10000EF70(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32), (uint64_t)&unk_10004B7F8, &qword_100070040, type metadata accessor for AnalyticsSchemaV1.PipelineState, (uint64_t)&unk_10004B32C);
}

uint64_t sub_1000180AC(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100005F1C(&qword_100070070);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10001810C()
{
  uint64_t v0;

  return sub_100008CF8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100018124()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _QWORD v18[3];
  void *v19;

  v0 = sub_100005690(&qword_100070000);
  v1 = type metadata accessor for Schema.PropertyMetadata(0);
  v2 = swift_allocObject(v0, ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80))+ 11 * *(_QWORD *)(*(_QWORD *)(v1 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) | 7);
  *(_OWORD *)(v2 + 16) = xmmword_10004BF90;
  KeyPath = swift_getKeyPath(&unk_10004B848);
  v19 = &type metadata for Int;
  v18[0] = 0;
  v17 = 0;
  v15 = 0u;
  v16 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x69746172656E6567, 0xEA00000000006E6FLL, KeyPath, v18, &v15);
  v4 = swift_getKeyPath(&unk_10004B870);
  v19 = &type metadata for Int;
  v18[0] = 0;
  v17 = 0;
  v15 = 0u;
  v16 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x656C626967696C65, 0xEE0073746E657645, v4, v18, &v15);
  v5 = swift_getKeyPath(&unk_10004B898);
  v19 = &type metadata for Int;
  v18[0] = 0;
  v17 = 0;
  v15 = 0u;
  v16 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x656C626967696C65, 0xED000073656C6946, v5, v18, &v15);
  v6 = swift_getKeyPath(&unk_10004B8C0);
  v19 = &type metadata for Int;
  v18[0] = 0;
  v17 = 0;
  v15 = 0u;
  v16 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x6465746365707865, 0xEE0073746E657645, v6, v18, &v15);
  v7 = swift_getKeyPath(&unk_10004B8E8);
  v19 = &type metadata for Int;
  v18[0] = 0;
  v17 = 0;
  v15 = 0u;
  v16 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x4564657070696B73, 0xED000073746E6576, v7, v18, &v15);
  v8 = swift_getKeyPath(&unk_10004B910);
  v19 = &type metadata for Int;
  v18[0] = 0;
  v17 = 0;
  v15 = 0u;
  v16 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0xD000000000000016, 0x8000000100051470, v8, v18, &v15);
  v9 = swift_getKeyPath(&unk_10004B938);
  v19 = &type metadata for Int;
  v18[0] = 0;
  v17 = 0;
  v15 = 0u;
  v16 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0xD000000000000010, 0x8000000100051490, v9, v18, &v15);
  v10 = swift_getKeyPath(&unk_10004B960);
  v19 = &type metadata for Int;
  v18[0] = 0;
  v17 = 0;
  v15 = 0u;
  v16 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0xD000000000000010, 0x80000001000514B0, v10, v18, &v15);
  v11 = swift_getKeyPath(&unk_10004B988);
  v19 = &type metadata for Int;
  v18[0] = 0;
  v17 = 0;
  v15 = 0u;
  v16 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0xD000000000000010, 0x80000001000514D0, v11, v18, &v15);
  v12 = swift_getKeyPath(&unk_10004B9B0);
  v19 = &type metadata for Int;
  v18[0] = 0;
  v17 = 0;
  v15 = 0u;
  v16 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0xD000000000000012, 0x80000001000514F0, v12, v18, &v15);
  v13 = swift_getKeyPath(&unk_10004B9D8);
  v19 = &type metadata for Int;
  v18[0] = 0;
  v17 = 0;
  v15 = 0u;
  v16 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0xD000000000000011, 0x8000000100051510, v13, v18, &v15);
  return v2;
}

uint64_t sub_1000185C0()
{
  uint64_t v0;

  return sub_10000B440(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000185D8()
{
  uint64_t v0;

  return sub_10000B150(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000185F0()
{
  uint64_t v0;

  return sub_10000AE60(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100018608()
{
  uint64_t v0;

  return sub_10000AB70(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100018620()
{
  uint64_t v0;

  return sub_10000A880(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100018638()
{
  uint64_t v0;

  return sub_10000A590(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100018650()
{
  uint64_t v0;

  return sub_10000A2A0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100018668()
{
  uint64_t v0;

  return sub_100009FB0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100018680()
{
  uint64_t v0;

  return sub_100009CC0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100018698()
{
  uint64_t v0;

  return sub_1000099D0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000186B0()
{
  uint64_t v0;

  return sub_1000096E0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000186C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v0 = sub_100005690(&qword_10006FFC0);
  v1 = swift_allocObject(v0, 96, 7);
  *(_OWORD *)(v1 + 16) = xmmword_10004BF70;
  v2 = type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics(0);
  v3 = sub_100005A54(&qword_10006FFC8, type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics, (uint64_t)&unk_10004B0F4);
  *(_QWORD *)(v1 + 32) = v2;
  *(_QWORD *)(v1 + 40) = v3;
  v4 = type metadata accessor for AnalyticsSchemaV2.FileAnalytics(0);
  v5 = sub_100005A54(&qword_10006FFD0, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AFD8);
  *(_QWORD *)(v1 + 48) = v4;
  *(_QWORD *)(v1 + 56) = v5;
  v6 = type metadata accessor for AnalyticsSchemaV2.PipelineState(0);
  v7 = sub_100005A54(&qword_10006FFD8, type metadata accessor for AnalyticsSchemaV2.PipelineState, (uint64_t)&unk_10004AEBC);
  *(_QWORD *)(v1 + 64) = v6;
  *(_QWORD *)(v1 + 72) = v7;
  v8 = type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters(0);
  v9 = sub_100005A54(&qword_10006FFE0, type metadata accessor for AnalyticsSchemaV2.AnalyticsCounters, (uint64_t)&unk_10004ADA0);
  *(_QWORD *)(v1 + 80) = v8;
  *(_QWORD *)(v1 + 88) = v9;
  return v1;
}

uint64_t sub_1000187BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  v0 = sub_100005690(&qword_100070000);
  v1 = type metadata accessor for Schema.PropertyMetadata(0);
  v2 = swift_allocObject(v0, ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80))+ 5 * *(_QWORD *)(*(_QWORD *)(v1 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) | 7);
  *(_OWORD *)(v2 + 16) = xmmword_10004BFA0;
  KeyPath = swift_getKeyPath(&unk_10004BA00);
  v12 = 0u;
  v13 = 0u;
  v11 = 0;
  v9 = 0u;
  v10 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x737365636F7270, 0xE700000000000000, KeyPath, &v12, &v9);
  v4 = swift_getKeyPath(&unk_10004BA28);
  v12 = 0u;
  v13 = 0u;
  v11 = 0;
  v9 = 0u;
  v10 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x6F4D737365636361, 0xEA00000000006564, v4, &v12, &v9);
  v5 = swift_getKeyPath(&unk_10004BA50);
  v12 = 0u;
  v13 = 0u;
  v11 = 0;
  v9 = 0u;
  v10 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x6143737365636361, 0xEE0079726F676574, v5, &v12, &v9);
  v6 = swift_getKeyPath(&unk_10004BA78);
  v12 = 0u;
  v13 = 0u;
  v11 = 0;
  v9 = 0u;
  v10 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x6F43737365636361, 0xEB00000000746E75, v6, &v12, &v9);
  v7 = swift_getKeyPath(&unk_10004BAA0);
  v12 = 0u;
  v13 = 0u;
  v11 = 0;
  v9 = 0u;
  v10 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x69746172656E6567, 0xEA00000000006E6FLL, v7, &v12, &v9);
  return v2;
}

uint64_t sub_100018A04()
{
  uint64_t v0;

  return sub_10000C820(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100018A1C()
{
  uint64_t v0;

  return sub_10000C530(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100018A34()
{
  uint64_t *v0;

  return sub_10000DB0C(v0[2], v0[3], v0[4], (uint64_t)&unk_10004BA50, &qword_10006FFC8, type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics, (uint64_t)&unk_10004B0F4);
}

uint64_t sub_100018A70()
{
  uint64_t *v0;

  return sub_10000DB0C(v0[2], v0[3], v0[4], (uint64_t)&unk_10004BA28, &qword_10006FFC8, type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics, (uint64_t)&unk_10004B0F4);
}

uint64_t sub_100018AAC()
{
  uint64_t *v0;

  return sub_10000DB0C(v0[2], v0[3], v0[4], (uint64_t)&unk_10004BA00, &qword_10006FFC8, type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics, (uint64_t)&unk_10004B0F4);
}

void sub_100018AE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  uint64_t v30;
  uint64_t v31;

  v7 = v6;
  v12 = (_QWORD *)(v6 + 16);
  v13 = type metadata accessor for AnalyticsSchemaV2.FileAnalytics(0);
  *(_QWORD *)(v7 + 40) = sub_100005690(&qword_1000700A0);
  v14 = sub_100005A54(&qword_10006FFD0, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AFD8);
  v29[0] = v13;
  v29[1] = v13;
  v29[2] = v14;
  v30 = v14;
  *(_QWORD *)(v7 + 48) = swift_getOpaqueTypeConformance2(v29, &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>, 1);
  sub_10001788C(v12);
  v15 = static PersistentModel.createBackingData<A>()(v13, v13, v14, v14);
  ObservationRegistrar.init()(v15);
  sub_100019FC4((uint64_t)v12, (uint64_t)v29);
  v16 = v30;
  v17 = v31;
  sub_100005E2C(v29, v30);
  KeyPath = swift_getKeyPath(&unk_10004BAC8);
  v27 = a1;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(KeyPath, &v27, &type metadata for Int, &protocol witness table for Int, v16, v17);
  swift_release(KeyPath);
  sub_100005D78(v29);
  sub_100019FC4((uint64_t)v12, (uint64_t)v29);
  v19 = v30;
  v20 = v31;
  sub_100005E2C(v29, v30);
  v21 = swift_getKeyPath(&unk_10004BAF0);
  v27 = a2;
  v28 = a3;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v21, &v27, &type metadata for String, &protocol witness table for String, v19, v20);
  swift_bridgeObjectRelease(a3);
  swift_release(v21);
  sub_100005D78(v29);
  sub_100019FC4((uint64_t)v12, (uint64_t)v29);
  v22 = v30;
  v23 = v31;
  sub_100005E2C(v29, v30);
  v24 = swift_getKeyPath(&unk_10004BB18);
  v27 = a4;
  v28 = a5;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v24, &v27, &type metadata for String, &protocol witness table for String, v22, v23);
  swift_bridgeObjectRelease(a5);
  swift_release(v24);
  sub_100005D78(v29);
  __asm { BR              X10 }
}

uint64_t sub_100018D3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD v34[3];
  uint64_t v35;
  uint64_t v36;

  sub_100019FC4(v1, (uint64_t)v34);
  v2 = v35;
  v3 = v36;
  sub_100005E2C(v34, v35);
  KeyPath = swift_getKeyPath(&unk_10004BB40);
  v32 = 0x6574697277;
  v33 = 0xE500000000000000;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(KeyPath, &v32, &type metadata for String, &protocol witness table for String, v2, v3);
  swift_bridgeObjectRelease(0xE500000000000000);
  swift_release(KeyPath);
  sub_100005D78(v34);
  v5 = sub_100040D68(v27);
  v7 = v6;
  sub_100019FC4(v1, (uint64_t)v34);
  v8 = v35;
  v9 = v36;
  sub_100005E2C(v34, v35);
  v10 = swift_getKeyPath(&unk_10004BB68);
  v32 = v5;
  v33 = v7;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v10, &v32, &type metadata for String, &protocol witness table for String, v8, v9);
  swift_bridgeObjectRelease(v7);
  swift_release(v10);
  sub_100005D78(v34);
  sub_100019FC4(v1, (uint64_t)v34);
  v11 = v35;
  v12 = v36;
  sub_100005E2C(v34, v35);
  v13 = swift_getKeyPath(&unk_10004BB90);
  v32 = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v13, &v32, &type metadata for UInt64, &protocol witness table for UInt64, v11, v12);
  swift_release(v13);
  sub_100005D78(v34);
  sub_100019FC4(v1, (uint64_t)v34);
  v14 = v35;
  v15 = v36;
  sub_100005E2C(v34, v35);
  v16 = swift_getKeyPath(&unk_10004BBB8);
  LODWORD(v32) = v28;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v16, &v32, &type metadata for UInt32, &protocol witness table for UInt32, v14, v15);
  swift_release(v16);
  sub_100005D78(v34);
  sub_100019FC4(v1, (uint64_t)v34);
  v17 = v35;
  v18 = v36;
  sub_100005E2C(v34, v35);
  v19 = swift_getKeyPath(&unk_10004BBE0);
  LODWORD(v32) = v29;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v19, &v32, &type metadata for UInt32, &protocol witness table for UInt32, v17, v18);
  swift_release(v19);
  sub_100005D78(v34);
  sub_100019FC4(v1, (uint64_t)v34);
  v20 = v35;
  v21 = v36;
  sub_100005E2C(v34, v35);
  v22 = swift_getKeyPath(&unk_10004BC08);
  v32 = v30;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v22, &v32, &type metadata for UInt64, &protocol witness table for UInt64, v20, v21);
  swift_release(v22);
  sub_100005D78(v34);
  sub_100019FC4(v1, (uint64_t)v34);
  v23 = v35;
  v24 = v36;
  sub_100005E2C(v34, v35);
  v25 = swift_getKeyPath(&unk_10004BC30);
  v32 = v31;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v25, &v32, &type metadata for Int, &protocol witness table for Int, v23, v24);
  swift_release(v25);
  sub_100005D78(v34);
  return v0;
}

uint64_t sub_1000190A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;

  v0 = sub_100005690(&qword_100070000);
  v1 = type metadata accessor for Schema.PropertyMetadata(0);
  v2 = swift_allocObject(v0, ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80))+ 10 * *(_QWORD *)(*(_QWORD *)(v1 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) | 7);
  *(_OWORD *)(v2 + 16) = xmmword_10004BFB0;
  KeyPath = swift_getKeyPath(&unk_10004BAC8);
  v22 = 0u;
  v23 = 0u;
  v4 = sub_100005690(&qword_100070018);
  v5 = type metadata accessor for Schema.Attribute.Option(0);
  v6 = swift_allocObject(v4, ((*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v5 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) | 7);
  *(_OWORD *)(v6 + 16) = xmmword_10004BF60;
  static Schema.Attribute.Option.unique.getter();
  v7 = type metadata accessor for Schema.Attribute(0);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  v8 = Schema.Attribute.init(_:originalName:hashModifier:)(v6, 0, 0, 0, 0);
  *((_QWORD *)&v20 + 1) = v7;
  v21 = sub_100005A54(&qword_100070020, (uint64_t (*)(uint64_t))&type metadata accessor for Schema.Attribute, (uint64_t)&protocol conformance descriptor for Schema.Attribute);
  *(_QWORD *)&v19 = v8;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(1953459315, 0xE400000000000000, KeyPath, &v22, &v19);
  v9 = swift_getKeyPath(&unk_10004BAF0);
  v22 = 0u;
  v23 = 0u;
  v21 = 0;
  v19 = 0u;
  v20 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(1752457584, 0xE400000000000000, v9, &v22, &v19);
  v10 = swift_getKeyPath(&unk_10004BB18);
  v22 = 0u;
  v23 = 0u;
  v21 = 0;
  v19 = 0u;
  v20 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x737365636F7270, 0xE700000000000000, v10, &v22, &v19);
  v11 = swift_getKeyPath(&unk_10004BB40);
  v22 = 0u;
  v23 = 0u;
  v21 = 0;
  v19 = 0u;
  v20 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x6F4D737365636361, 0xEA00000000006564, v11, &v22, &v19);
  v12 = swift_getKeyPath(&unk_10004BB68);
  v22 = 0u;
  v23 = 0u;
  v21 = 0;
  v19 = 0u;
  v20 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x6143737365636361, 0xEE0079726F676574, v12, &v22, &v19);
  v13 = swift_getKeyPath(&unk_10004BB90);
  v22 = 0u;
  v23 = 0u;
  v21 = 0;
  v19 = 0u;
  v20 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x6F43737365636361, 0xEB00000000746E75, v13, &v22, &v19);
  v14 = swift_getKeyPath(&unk_10004BBB8);
  v22 = 0u;
  v23 = 0u;
  v21 = 0;
  v19 = 0u;
  v20 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0xD000000000000011, 0x8000000100051430, v14, &v22, &v19);
  v15 = swift_getKeyPath(&unk_10004BBE0);
  v22 = 0u;
  v23 = 0u;
  v21 = 0;
  v19 = 0u;
  v20 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x745367616279656BLL, 0xEB00000000657461, v15, &v22, &v19);
  v16 = swift_getKeyPath(&unk_10004BC08);
  v22 = 0u;
  v23 = 0u;
  v21 = 0;
  v19 = 0u;
  v20 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x6279654B65726F6DLL, 0xEF65746174536761, v16, &v22, &v19);
  v17 = swift_getKeyPath(&unk_10004BC30);
  v22 = 0u;
  v23 = 0u;
  v21 = 0;
  v19 = 0u;
  v20 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x69746172656E6567, 0xEA00000000006E6FLL, v17, &v22, &v19);
  return v2;
}

uint64_t sub_100019534@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_10000DEA4(a1, (uint64_t)&unk_10004BBB8, a2);
}

uint64_t sub_100019550(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10000DF98(a1, a2, a3, a4, (uint64_t)&unk_10004BBB8, (uint64_t)sub_100019630);
}

uint64_t sub_100019574@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_10000DEA4(a1, (uint64_t)&unk_10004BBE0, a2);
}

uint64_t sub_100019590(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10000DF98(a1, a2, a3, a4, (uint64_t)&unk_10004BBE0, (uint64_t)sub_1000195F4);
}

uint64_t sub_1000195C4()
{
  uint64_t v0;

  return sub_10000E734(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000195DC()
{
  uint64_t v0;

  return sub_10000E444(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000195F4()
{
  uint64_t v0;

  return sub_10000E150(*(_QWORD *)(v0 + 16), *(_DWORD *)(v0 + 24), (uint64_t)&unk_10004BBE0, &qword_10006FFD0, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AFD8);
}

uint64_t sub_100019630()
{
  uint64_t v0;

  return sub_10000E150(*(_QWORD *)(v0 + 16), *(_DWORD *)(v0 + 24), (uint64_t)&unk_10004BBB8, &qword_10006FFD0, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AFD8);
}

uint64_t sub_10001966C()
{
  uint64_t v0;

  return sub_10000DE0C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100019684()
{
  uint64_t *v0;

  return sub_10000DB0C(v0[2], v0[3], v0[4], (uint64_t)&unk_10004BB68, &qword_10006FFD0, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AFD8);
}

uint64_t sub_1000196C0()
{
  uint64_t *v0;

  return sub_10000DB0C(v0[2], v0[3], v0[4], (uint64_t)&unk_10004BB40, &qword_10006FFD0, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AFD8);
}

uint64_t sub_1000196FC()
{
  uint64_t *v0;

  return sub_10000DB0C(v0[2], v0[3], v0[4], (uint64_t)&unk_10004BB18, &qword_10006FFD0, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AFD8);
}

uint64_t sub_100019738()
{
  uint64_t *v0;

  return sub_10000DB0C(v0[2], v0[3], v0[4], (uint64_t)&unk_10004BAF0, &qword_10006FFD0, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AFD8);
}

uint64_t sub_100019774()
{
  uint64_t v0;

  return sub_10000D070(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10001978C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;

  v6 = sub_100005690(&qword_100070000);
  v7 = *(_QWORD *)(type metadata accessor for Schema.PropertyMetadata(0) - 8);
  v8 = swift_allocObject(v6, ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ 3 * *(_QWORD *)(v7 + 72), *(unsigned __int8 *)(v7 + 80) | 7);
  *(_OWORD *)(v8 + 16) = xmmword_10004BFC0;
  KeyPath = swift_getKeyPath(a1);
  v16 = 0u;
  v17 = 0u;
  v15 = 0;
  v13 = 0u;
  v14 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x69746172656E6567, 0xEA00000000006E6FLL, KeyPath, &v16, &v13);
  v10 = swift_getKeyPath(a2);
  v16 = 0u;
  v17 = 0u;
  v15 = 0;
  v13 = 0u;
  v14 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0xD000000000000010, 0x8000000100051450, v10, &v16, &v13);
  v11 = swift_getKeyPath(a3);
  v16 = 0u;
  v17 = 0u;
  v15 = 0;
  v13 = 0u;
  v14 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x6F7065527478656ELL, 0xEE00656D69547472, v11, &v16, &v13);
  return v8;
}

uint64_t sub_100019920()
{
  uint64_t v0;

  return sub_10000F358(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), (uint64_t)&unk_10004BCA8, &qword_10006FFD8, type metadata accessor for AnalyticsSchemaV2.PipelineState, (uint64_t)&unk_10004AEBC);
}

uint64_t sub_100019958()
{
  uint64_t v0;

  return sub_10000EF70(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32), (uint64_t)&unk_10004BC80, &qword_10006FFD8, type metadata accessor for AnalyticsSchemaV2.PipelineState, (uint64_t)&unk_10004AEBC);
}

uint64_t sub_100019994()
{
  uint64_t v0;

  return sub_10000EBF8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000199AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _QWORD v19[3];
  void *v20;

  v0 = sub_100005690(&qword_100070000);
  v1 = type metadata accessor for Schema.PropertyMetadata(0);
  v2 = swift_allocObject(v0, ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80))+ 12 * *(_QWORD *)(*(_QWORD *)(v1 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) | 7);
  *(_OWORD *)(v2 + 16) = xmmword_10004BFD0;
  KeyPath = swift_getKeyPath(&unk_10004BCD0);
  v20 = &type metadata for Int;
  v19[0] = 0;
  v18 = 0;
  v16 = 0u;
  v17 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x69746172656E6567, 0xEA00000000006E6FLL, KeyPath, v19, &v16);
  v4 = swift_getKeyPath(&unk_10004BCF8);
  v20 = &type metadata for Int;
  v19[0] = 0;
  v18 = 0;
  v16 = 0u;
  v17 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x656C626967696C65, 0xEE0073746E657645, v4, v19, &v16);
  v5 = swift_getKeyPath(&unk_10004BD20);
  v20 = &type metadata for Int;
  v19[0] = 0;
  v18 = 0;
  v16 = 0u;
  v17 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x656C626967696C65, 0xED000073656C6946, v5, v19, &v16);
  v6 = swift_getKeyPath(&unk_10004BD48);
  v20 = &type metadata for Int;
  v19[0] = 0;
  v18 = 0;
  v16 = 0u;
  v17 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x6465746365707865, 0xEE0073746E657645, v6, v19, &v16);
  v7 = swift_getKeyPath(&unk_10004BD70);
  v20 = &type metadata for Int;
  v19[0] = 0;
  v18 = 0;
  v16 = 0u;
  v17 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x4564657070696B73, 0xED000073746E6576, v7, v19, &v16);
  v8 = swift_getKeyPath(&unk_10004BD98);
  v20 = &type metadata for Int;
  v19[0] = 0;
  v18 = 0;
  v16 = 0u;
  v17 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0xD000000000000016, 0x8000000100051470, v8, v19, &v16);
  v9 = swift_getKeyPath(&unk_10004BDC0);
  v20 = &type metadata for Int;
  v19[0] = 0;
  v18 = 0;
  v16 = 0u;
  v17 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0xD000000000000010, 0x8000000100051530, v9, v19, &v16);
  v10 = swift_getKeyPath(&unk_10004BDE8);
  v20 = &type metadata for Int;
  v19[0] = 0;
  v18 = 0;
  v16 = 0u;
  v17 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0xD000000000000010, 0x8000000100051490, v10, v19, &v16);
  v11 = swift_getKeyPath(&unk_10004BE10);
  v20 = &type metadata for Int;
  v19[0] = 0;
  v18 = 0;
  v16 = 0u;
  v17 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0xD000000000000010, 0x80000001000514B0, v11, v19, &v16);
  v12 = swift_getKeyPath(&unk_10004BE38);
  v20 = &type metadata for Int;
  v19[0] = 0;
  v18 = 0;
  v16 = 0u;
  v17 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0xD000000000000010, 0x80000001000514D0, v12, v19, &v16);
  v13 = swift_getKeyPath(&unk_10004BE60);
  v20 = &type metadata for Int;
  v19[0] = 0;
  v18 = 0;
  v16 = 0u;
  v17 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0xD000000000000012, 0x80000001000514F0, v13, v19, &v16);
  v14 = swift_getKeyPath(&unk_10004BE88);
  v20 = &type metadata for Int;
  v19[0] = 0;
  v18 = 0;
  v16 = 0u;
  v17 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0xD000000000000011, 0x8000000100051510, v14, v19, &v16);
  return v2;
}

uint64_t sub_100019EA4()
{
  uint64_t v0;

  return sub_100011B60(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100019EBC()
{
  uint64_t v0;

  return sub_100011870(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100019ED4()
{
  uint64_t v0;

  return sub_100011580(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100019EEC()
{
  uint64_t v0;

  return sub_100011290(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100019F04()
{
  uint64_t v0;

  return sub_100010FA0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100019F1C()
{
  uint64_t v0;

  return sub_100010CB0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100019F34()
{
  uint64_t v0;

  return sub_1000109C0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100019F4C()
{
  uint64_t v0;

  return sub_1000106D0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100019F64()
{
  uint64_t v0;

  return sub_1000103E0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100019F7C()
{
  uint64_t v0;

  return sub_1000100F0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100019F94()
{
  uint64_t v0;

  return sub_10000FE00(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100019FAC()
{
  uint64_t v0;

  return sub_10000FB10(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100019FC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_10001A008()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000700E0;
  if (!qword_1000700E0)
  {
    v1 = sub_100005F1C(&qword_1000700D8);
    sub_10001A0B4(&qword_1000700E8, &qword_1000700C8, &qword_1000700F0, &qword_1000700C0);
    sub_10001A4C8(&qword_1000700F8, &qword_1000700B8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> PredicateExpressions.Equal<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000700E0);
  }
  return result;
}

uint64_t sub_10001A0B4(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100005F1C(a2);
    sub_10001A838(a3, a4, (uint64_t)&protocol conformance descriptor for PredicateExpressions.Variable<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> PredicateExpressions.KeyPath<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10001A12C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100070130;
  if (!qword_100070130)
  {
    v1 = sub_100005F1C(&qword_100070128);
    sub_10001A0B4(&qword_100070138, &qword_100070118, &qword_100070140, &qword_100070110);
    sub_10001A4C8(&qword_1000700F8, &qword_1000700B8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> PredicateExpressions.Equal<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100070130);
  }
  return result;
}

uint64_t sub_10001A1D8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_100014868(a1, *(void (**)(char *, uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24), *(unsigned __int8 *)(v2 + 32), *(unsigned __int8 *)(v2 + 33), *(_QWORD *)(v2 + 40), a2);
}

uint64_t sub_10001A1EC(unsigned __int8 *a1)
{
  return ((uint64_t (*)(void))((char *)sub_10001A214 + 4 * byte_10004A91A[*a1]))();
}

void sub_10001A214(_QWORD *a1@<X8>)
{
  *a1 = 0x6574697277;
  a1[1] = 0xE500000000000000;
}

void sub_10001A22C(_QWORD *a1@<X8>)
{
  *a1 = 0x657461657263;
  a1[1] = 0xE600000000000000;
}

void sub_10001A244(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000015;
  a1[1] = 0x800000010004ED40;
}

void sub_10001A264(_QWORD *a1@<X8>)
{
  *a1 = 0x6E776F6E6B6E75;
  a1[1] = 0xE700000000000000;
}

uint64_t sub_10001A280@<X0>(unsigned __int8 *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100040D68(*a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

unint64_t sub_10001A2A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100070218;
  if (!qword_100070218)
  {
    v1 = sub_100005F1C(&qword_100070210);
    sub_10001A314();
    sub_10001A12C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> PredicateExpressions.Conjunction<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100070218);
  }
  return result;
}

unint64_t sub_10001A314()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100070220;
  if (!qword_100070220)
  {
    v1 = sub_100005F1C(&qword_1000701B8);
    sub_10001A398();
    sub_10001A638(&qword_100070270, &qword_100070178, (void (*)(void))sub_10001A6C4);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> PredicateExpressions.Conjunction<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100070220);
  }
  return result;
}

unint64_t sub_10001A398()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100070228;
  if (!qword_100070228)
  {
    v1 = sub_100005F1C(&qword_1000701B0);
    sub_10001A41C();
    sub_10001A638(&qword_100070248, &qword_100070190, (void (*)(void))sub_10001A528);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> PredicateExpressions.Conjunction<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100070228);
  }
  return result;
}

unint64_t sub_10001A41C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100070230;
  if (!qword_100070230)
  {
    v1 = sub_100005F1C(&qword_1000701A8);
    sub_10001A0B4(&qword_100070238, &qword_1000701A0, &qword_100070140, &qword_100070110);
    sub_10001A4C8(&qword_100070240, &qword_100070198);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> PredicateExpressions.Equal<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100070230);
  }
  return result;
}

uint64_t sub_10001A4C8(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100005F1C(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> PredicateExpressions.Value<A>, v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10001A528()
{
  return sub_10001A6E0(&qword_100070250, &qword_100070188, (void (*)(void))sub_10001A544);
}

unint64_t sub_10001A544()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100070258;
  if (!qword_100070258)
  {
    v1 = sub_100005F1C(&qword_100070180);
    sub_10001A5B0();
    sub_10001A5F4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> PredicateExpressions.Value<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100070258);
  }
  return result;
}

unint64_t sub_10001A5B0()
{
  unint64_t result;

  result = qword_100070260;
  if (!qword_100070260)
  {
    result = swift_getWitnessTable(&unk_10004E920, &type metadata for AccessMode);
    atomic_store(result, (unint64_t *)&qword_100070260);
  }
  return result;
}

unint64_t sub_10001A5F4()
{
  unint64_t result;

  result = qword_100070268;
  if (!qword_100070268)
  {
    result = swift_getWitnessTable(&unk_10004E8F8, &type metadata for AccessMode);
    atomic_store(result, (unint64_t *)&qword_100070268);
  }
  return result;
}

uint64_t sub_10001A638(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100005F1C(a2);
    sub_10001A0B4(&qword_100070238, &qword_1000701A0, &qword_100070140, &qword_100070110);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> PredicateExpressions.Equal<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10001A6C4()
{
  return sub_10001A6E0(&qword_100070278, &qword_100070170, (void (*)(void))sub_10001A744);
}

uint64_t sub_10001A6E0(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100005F1C(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> PredicateExpressions.KeyPath<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10001A744()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100070280;
  if (!qword_100070280)
  {
    v1 = sub_100005F1C(&qword_100070168);
    sub_10001A7B0();
    sub_10001A7F4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> PredicateExpressions.Value<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100070280);
  }
  return result;
}

unint64_t sub_10001A7B0()
{
  unint64_t result;

  result = qword_100070288;
  if (!qword_100070288)
  {
    result = swift_getWitnessTable(&unk_10004E8D0, &type metadata for AccessCategory);
    atomic_store(result, (unint64_t *)&qword_100070288);
  }
  return result;
}

unint64_t sub_10001A7F4()
{
  unint64_t result;

  result = qword_100070290;
  if (!qword_100070290)
  {
    result = swift_getWitnessTable(&unk_10004E8A8, &type metadata for AccessCategory);
    atomic_store(result, (unint64_t *)&qword_100070290);
  }
  return result;
}

uint64_t sub_10001A838(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100005F1C(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsMigrationPlan()
{
  return &type metadata for AnalyticsMigrationPlan;
}

unint64_t sub_10001A888()
{
  unint64_t result;

  result = qword_1000702E0;
  if (!qword_1000702E0)
  {
    result = swift_getWitnessTable(&unk_10004AC84, &type metadata for AnalyticsSchemaV1);
    atomic_store(result, (unint64_t *)&qword_1000702E0);
  }
  return result;
}

unint64_t sub_10001A8CC()
{
  unint64_t result;

  result = qword_1000702E8;
  if (!qword_1000702E8)
  {
    result = swift_getWitnessTable(&unk_10004ACB4, &type metadata for AnalyticsSchemaV2);
    atomic_store(result, (unint64_t *)&qword_1000702E8);
  }
  return result;
}

uint64_t sub_10001A910()
{
  return sub_100019958();
}

uint64_t sub_10001A924()
{
  return sub_100019FAC();
}

uint64_t sub_10001A938()
{
  return sub_100019F94();
}

uint64_t sub_10001A94C()
{
  return sub_100019F7C();
}

uint64_t sub_10001A960()
{
  return sub_100019F64();
}

uint64_t sub_10001A974()
{
  return sub_100019F4C();
}

uint64_t sub_10001A988()
{
  return sub_100019F34();
}

uint64_t sub_10001A99C()
{
  return sub_100019F04();
}

uint64_t sub_10001A9B0()
{
  return sub_100019EEC();
}

uint64_t sub_10001A9C4()
{
  return sub_100019ED4();
}

uint64_t sub_10001A9D8()
{
  return sub_100019EBC();
}

uint64_t sub_10001A9EC()
{
  return sub_100019EA4();
}

uint64_t sub_10001AA00()
{
  return sub_100018A1C();
}

uint64_t sub_10001AA14()
{
  return sub_100019920();
}

uint64_t sub_10001AA40(uint64_t a1, uint64_t a2)
{
  void **v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t result;
  void *v14;
  Class isa;
  uint64_t v16;

  v5 = type metadata accessor for String.Encoding(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter(v7);
  v10 = String.data(using:allowLossyConversion:)(v9, 0, a1, a2);
  v12 = v11;
  result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  if (v12 >> 60 != 15)
  {
    v14 = *v2;
    isa = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v14, "writeData:", isa);

    return sub_10001BAB0(v10, v12);
  }
  return result;
}

uint64_t sub_10001AB28()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100005D98(v0, qword_100071AE0);
  sub_100005D1C(v0, (uint64_t)qword_100071AE0);
  return Logger.init(subsystem:category:)(0x796C616E41534B41, 0xEC00000073636974, 0x636974796C616E61, 0xE900000000000073);
}

BOOL sub_10001ABA4(char *a1, char *a2)
{
  return dword_10004C3CC[*a1] == dword_10004C3CC[*a2];
}

Swift::Int sub_10001ABC8()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(dword_10004C3CC[v1]);
  return Hasher._finalize()();
}

void sub_10001AC14()
{
  char *v0;

  Hasher._combine(_:)(dword_10004C3CC[*v0]);
}

Swift::Int sub_10001AC48(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(dword_10004C3CC[v2]);
  return Hasher._finalize()();
}

uint64_t sub_10001AC90@<X0>(int *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10001BB08(*a1);
  *a2 = result;
  return result;
}

void sub_10001ACB8(_DWORD *a1@<X8>)
{
  char *v1;

  *a1 = dword_10004C3CC[*v1];
}

uint64_t sub_10001ACD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10001BB2C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10001AD2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10001BB2C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10001AD78(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10001ADB4 + 4 * byte_10004BFF0[a1]))(0x7269447373616C43, 0xEC000000656E6F4ELL);
}

uint64_t sub_10001ADB4()
{
  return 0x417373616C43;
}

uint64_t sub_10001ADC8()
{
  return 0x427373616C43;
}

uint64_t sub_10001ADDC()
{
  return 0x437373616C43;
}

uint64_t sub_10001ADF0()
{
  return 0x447373616C43;
}

uint64_t sub_10001AE04()
{
  return 0x457373616C43;
}

uint64_t sub_10001AE18()
{
  return 0x467373616C43;
}

uint64_t sub_10001AE2C()
{
  return 0x58437373616C43;
}

uint64_t sub_10001AE44()
{
  return 0x6365746F72506F4ELL;
}

uint64_t sub_10001AE64()
{
  unsigned __int8 *v0;

  return sub_10001AD78(*v0);
}

uint64_t sub_10001AE6C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for ProtectionClassCounter()
{
  return objc_opt_self(_TtC14applekeystored22ProtectionClassCounter);
}

ValueMetadata *type metadata accessor for FileHandlerOutputStream()
{
  return &type metadata for FileHandlerOutputStream;
}

uint64_t getEnumTagSinglePayload for ProtectionClass(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ProtectionClass(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_10001AF9C + 4 * byte_10004BFFE[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_10001AFD0 + 4 * byte_10004BFF9[v4]))();
}

uint64_t sub_10001AFD0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001AFD8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10001AFE0);
  return result;
}

uint64_t sub_10001AFEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10001AFF4);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_10001AFF8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001B000(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ProtectionClass()
{
  return &type metadata for ProtectionClass;
}

unint64_t sub_10001B020()
{
  unint64_t result;

  result = qword_1000703C8;
  if (!qword_1000703C8)
  {
    result = swift_getWitnessTable(&unk_10004C140, &type metadata for ProtectionClass);
    atomic_store(result, (unint64_t *)&qword_1000703C8);
  }
  return result;
}

uint64_t sub_10001B064()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  Class isa;
  id v4;
  void *v5;
  Class v6;
  id v7;
  void *v8;
  Class v9;
  id v10;
  uint64_t v11;
  void *v12;
  Class v13;
  id v14;
  void *v15;
  Class v16;
  id v17;
  void *v18;
  void *v19;
  Class v20;
  id v21;
  void *v22;
  void *v23;
  Class v24;
  id v25;
  uint64_t v26;
  void *v27;
  void *v28;
  Class v29;
  id v30;
  uint64_t v31;
  void *v32;
  void *v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  Swift::String v45;
  uint64_t v47;
  uint64_t v48;
  Swift::String v49;
  void *v50;
  Swift::String v51;
  Swift::String v52;

  v1 = v0;
  v2 = objc_msgSend(objc_allocWithZone((Class)NSNumberFormatter), "init");
  objc_msgSend(v2, "setFormatWidth:", 4);
  objc_msgSend(v2, "setPaddingPosition:", 3);
  if (*(_QWORD *)(*(_QWORD *)(v0 + 16) + 16))
    sub_10002D760(0);
  isa = UInt64._bridgeToObjectiveC()().super.super.isa;
  v4 = objc_msgSend(v2, "stringForObjectValue:", isa);

  if (v4)
  {
    v52._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v52._object = v5;

  }
  else
  {
    v52._countAndFlagsBits = 4271950;
    v52._object = (void *)0xE300000000000000;
  }
  if (*(_QWORD *)(*(_QWORD *)(v1 + 16) + 16))
    sub_10002D760(1);
  v6 = UInt64._bridgeToObjectiveC()().super.super.isa;
  v7 = objc_msgSend(v2, "stringForObjectValue:", v6);

  if (v7)
  {
    v51._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v51._object = v8;

  }
  else
  {
    v51._countAndFlagsBits = 4271950;
    v51._object = (void *)0xE300000000000000;
  }
  if (*(_QWORD *)(*(_QWORD *)(v1 + 16) + 16))
    sub_10002D760(2);
  v9 = UInt64._bridgeToObjectiveC()().super.super.isa;
  v10 = objc_msgSend(v2, "stringForObjectValue:", v9);

  if (v10)
  {
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v50 = v12;

  }
  else
  {
    v50 = (void *)0xE300000000000000;
    v11 = 4271950;
  }
  if (*(_QWORD *)(*(_QWORD *)(v1 + 16) + 16))
    sub_10002D760(3);
  v13 = UInt64._bridgeToObjectiveC()().super.super.isa;
  v14 = objc_msgSend(v2, "stringForObjectValue:", v13);

  if (v14)
  {
    v49._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v49._object = v15;

  }
  else
  {
    v49._countAndFlagsBits = 4271950;
    v49._object = (void *)0xE300000000000000;
  }
  if (*(_QWORD *)(*(_QWORD *)(v1 + 16) + 16))
    sub_10002D760(4);
  v16 = UInt64._bridgeToObjectiveC()().super.super.isa;
  v17 = objc_msgSend(v2, "stringForObjectValue:", v16);

  if (v17)
  {
    v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v19 = v18;

  }
  else
  {
    v19 = (void *)0xE300000000000000;
    v48 = 4271950;
  }
  if (*(_QWORD *)(*(_QWORD *)(v1 + 16) + 16))
    sub_10002D760(5);
  v20 = UInt64._bridgeToObjectiveC()().super.super.isa;
  v21 = objc_msgSend(v2, "stringForObjectValue:", v20);

  if (v21)
  {
    v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v23 = v22;

  }
  else
  {
    v23 = (void *)0xE300000000000000;
    v47 = 4271950;
  }
  if (*(_QWORD *)(*(_QWORD *)(v1 + 16) + 16))
    sub_10002D760(6);
  v24 = UInt64._bridgeToObjectiveC()().super.super.isa;
  v25 = objc_msgSend(v2, "stringForObjectValue:", v24);

  if (v25)
  {
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v28 = v27;

  }
  else
  {
    v28 = (void *)0xE300000000000000;
    v26 = 4271950;
  }
  if (*(_QWORD *)(*(_QWORD *)(v1 + 16) + 16))
    sub_10002D760(7);
  v29 = UInt64._bridgeToObjectiveC()().super.super.isa;
  v30 = objc_msgSend(v2, "stringForObjectValue:", v29);

  if (v30)
  {
    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    v33 = v32;

  }
  else
  {
    v33 = (void *)0xE300000000000000;
    v31 = 4271950;
  }
  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease(0xE000000000000000);
  String.append(_:)(v51);
  swift_bridgeObjectRelease(v51._object);
  v34._countAndFlagsBits = 4014624;
  v34._object = (void *)0xE300000000000000;
  String.append(_:)(v34);
  v35._countAndFlagsBits = v11;
  v35._object = v50;
  String.append(_:)(v35);
  swift_bridgeObjectRelease(v50);
  v36._countAndFlagsBits = 4014880;
  v36._object = (void *)0xE300000000000000;
  String.append(_:)(v36);
  String.append(_:)(v49);
  swift_bridgeObjectRelease(v49._object);
  v37._countAndFlagsBits = 4015136;
  v37._object = (void *)0xE300000000000000;
  String.append(_:)(v37);
  v38._countAndFlagsBits = v48;
  v38._object = v19;
  String.append(_:)(v38);
  swift_bridgeObjectRelease(v19);
  v39._countAndFlagsBits = 4015392;
  v39._object = (void *)0xE300000000000000;
  String.append(_:)(v39);
  v40._countAndFlagsBits = v47;
  v40._object = v23;
  String.append(_:)(v40);
  swift_bridgeObjectRelease(v23);
  v41._countAndFlagsBits = 4015648;
  v41._object = (void *)0xE300000000000000;
  String.append(_:)(v41);
  v42._countAndFlagsBits = v26;
  v42._object = v28;
  String.append(_:)(v42);
  swift_bridgeObjectRelease(v28);
  v43._countAndFlagsBits = 1029194528;
  v43._object = (void *)0xE400000000000000;
  String.append(_:)(v43);
  v44._countAndFlagsBits = v31;
  v44._object = v33;
  String.append(_:)(v44);
  swift_bridgeObjectRelease(v33);
  v45._countAndFlagsBits = 0x3D656E6F4E20;
  v45._object = (void *)0xE600000000000000;
  String.append(_:)(v45);
  String.append(_:)(v52);

  swift_bridgeObjectRelease(v52._object);
  return 15681;
}

uint64_t sub_10001B634(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10001B660 + 4 * byte_10004C003[a1]))(1701869940, 0xE400000000000000);
}

uint64_t sub_10001B660()
{
  return 0x69746365746F7270;
}

uint64_t sub_10001B684()
{
  return 0x737365636F7270;
}

uint64_t sub_10001B69C()
{
  return 1752457584;
}

unint64_t sub_10001B6A8()
{
  return 0xD000000000000010;
}

unint64_t sub_10001B6F0()
{
  return 0xD000000000000011;
}

uint64_t sub_10001B710()
{
  return 0x745367616279656BLL;
}

uint64_t sub_10001B730()
{
  return 0x6279654B65726F6DLL;
}

uint64_t sub_10001B754(_QWORD *a1)
{
  unsigned int *v1;
  uint64_t v2;
  unsigned int *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;

  v3 = v1;
  v5 = sub_100005690(&qword_1000703E8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100005E2C(a1, v9);
  v11 = sub_10001C7F4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FileAnalyticsEvent.CodingKeys, &type metadata for FileAnalyticsEvent.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v34 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v34, v5);
  if (!v2)
  {
    v13 = v3[1];
    v33 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, &v33, v5);
    v14 = *((_QWORD *)v3 + 1);
    v15 = *((_QWORD *)v3 + 2);
    v32 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v32, v5);
    v16 = *((_QWORD *)v3 + 3);
    v17 = *((_QWORD *)v3 + 4);
    v31 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v31, v5);
    v18 = *((unsigned __int8 *)v3 + 40);
    v30 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, &v30, v5);
    v19 = *((unsigned __int8 *)v3 + 41);
    v29 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, &v29, v5);
    v20 = *((_QWORD *)v3 + 6);
    v21 = *((unsigned __int8 *)v3 + 56);
    v28 = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v21, &v28, v5);
    v22 = v3[15];
    v27 = 7;
    KeyedEncodingContainer.encode(_:forKey:)(v22, &v27, v5);
    v23 = v3[16];
    HIBYTE(v26) = 8;
    KeyedEncodingContainer.encode(_:forKey:)(v23, (char *)&v26 + 7, v5);
    v24 = *((_QWORD *)v3 + 9);
    BYTE6(v26) = 9;
    KeyedEncodingContainer.encode(_:forKey:)(v24, (char *)&v26 + 6, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10001B9AC()
{
  return sub_10001B064();
}

uint64_t sub_10001B9CC()
{
  unsigned __int8 *v0;

  return sub_10001B634(*v0);
}

uint64_t sub_10001B9D4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10001BFC0(a1, a2);
  *a3 = result;
  return result;
}

void sub_10001B9F8(_BYTE *a1@<X8>)
{
  *a1 = 10;
}

uint64_t sub_10001BA04(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001C7F4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001BA2C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001C7F4();
  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_10001BA54@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  _OWORD v6[5];

  sub_10001C40C(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v6[4];
    result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_10001BA9C(_QWORD *a1)
{
  return sub_10001B754(a1);
}

uint64_t sub_10001BAB0(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_10001BAC4(result, a2);
  return result;
}

uint64_t sub_10001BAC4(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10001BB08(int a1)
{
  if ((a1 + 1) > 8)
    return 9;
  else
    return byte_10004C3F0[a1 + 1];
}

unint64_t sub_10001BB2C()
{
  unint64_t result;

  result = qword_1000703D0;
  if (!qword_1000703D0)
  {
    result = swift_getWitnessTable(&unk_10004C0C8, &type metadata for ProtectionClass);
    atomic_store(result, (unint64_t *)&qword_1000703D0);
  }
  return result;
}

unint64_t *initializeBufferWithCopyOfBuffer for AnalyticsError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  sub_10001BBA0(*a2);
  *a1 = v3;
  return a1;
}

unint64_t sub_10001BBA0(unint64_t result)
{
  if (!(result >> 62))
    return swift_errorRetain();
  return result;
}

unint64_t destroy for AnalyticsError(unint64_t *a1)
{
  return sub_10001BBB8(*a1);
}

unint64_t sub_10001BBB8(unint64_t result)
{
  if (!(result >> 62))
    return swift_errorRelease();
  return result;
}

unint64_t *assignWithCopy for AnalyticsError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  sub_10001BBA0(*a2);
  v4 = *a1;
  *a1 = v3;
  sub_10001BBB8(v4);
  return a1;
}

_QWORD *initializeWithTake for AnalyticsError(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

unint64_t *assignWithTake for AnalyticsError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  sub_10001BBB8(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnalyticsError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)a1 >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)a1 >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AnalyticsError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
  }
  return result;
}

uint64_t sub_10001BCDC(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1 >> 62;
  if ((_DWORD)v1 == 3)
    return *a1 + 3;
  else
    return v1;
}

_QWORD *sub_10001BCF4(_QWORD *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

_QWORD *sub_10001BD04(_QWORD *result, uint64_t a2)
{
  if (a2 < 3)
    *result = *result & 0xFFFFFFFFFFFFFFFLL | (a2 << 62);
  else
    *result = (a2 - 3) | 0xC000000000000000;
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsError()
{
  return &type metadata for AnalyticsError;
}

uint64_t destroy for FileAnalyticsEvent(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
}

uint64_t initializeWithCopy for FileAnalyticsEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 60) = *(_QWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  ((void (*)(void))swift_bridgeObjectRetain)();
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for FileAnalyticsEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  v8 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v8;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  return a1;
}

__n128 initializeWithTake for FileAnalyticsEvent(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for FileAnalyticsEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRelease(v7);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 60) = *(_QWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for FileAnalyticsEvent(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FileAnalyticsEvent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FileAnalyticsEvent()
{
  return &type metadata for FileAnalyticsEvent;
}

uint64_t sub_10001BFC0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;

  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x69746365746F7270 && a2 == 0xEF7373616C436E6FLL)
  {
    v7 = 0xEF7373616C436E6FLL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69746365746F7270, 0xEF7373616C436E6FLL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x737365636F7270 && a2 == 0xE700000000000000)
  {
    v8 = 0xE700000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x737365636F7270, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 1752457584 && a2 == 0xE400000000000000)
  {
    v9 = 0xE400000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1752457584, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0xD000000000000010)
  {
    v10 = 0x8000000100051580;
    if (a2 == 0x8000000100051580)
      goto LABEL_31;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100051580, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if (a1 == 0x6F4C656369766564 && a2 == 0xEC00000064656B63)
  {
    v11 = 0xEC00000064656B63;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F4C656369766564, 0xEC00000064656B63, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 0xD000000000000010)
  {
    v12 = 0x80000001000515A0;
    if (a2 == 0x80000001000515A0)
      goto LABEL_42;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001000515A0, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_42:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x8000000100051430)
  {
    v13 = 0x8000000100051430;
LABEL_48:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100051430, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_48;
  }
  if (a1 == 0x745367616279656BLL && a2 == 0xEB00000000657461)
  {
    v14 = 0xEB00000000657461;
LABEL_54:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x745367616279656BLL, 0xEB00000000657461, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_54;
  }
  if (a1 == 0x6279654B65726F6DLL && a2 == 0xEF65746174536761)
  {
    swift_bridgeObjectRelease(0xEF65746174536761);
    return 9;
  }
  else
  {
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6279654B65726F6DLL, 0xEF65746174536761, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v15 & 1) != 0)
      return 9;
    else
      return 10;
  }
}

uint64_t sub_10001C40C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;

  v5 = sub_100005690(&qword_1000703D8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100005E2C(a1, v9);
  v11 = sub_10001C7F4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for FileAnalyticsEvent.CodingKeys, &type metadata for FileAnalyticsEvent.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_100005D78(a1);
  v46 = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v46, v5);
  v45 = 1;
  v36 = KeyedDecodingContainer.decode(_:forKey:)(&v45, v5);
  v44 = 2;
  v13 = KeyedDecodingContainer.decode(_:forKey:)(&v44, v5);
  v15 = v14;
  v34 = v13;
  v43 = 3;
  swift_bridgeObjectRetain(v14);
  v16 = KeyedDecodingContainer.decode(_:forKey:)(&v43, v5);
  v35 = v17;
  v31 = v16;
  v33 = v15;
  v42 = 4;
  swift_bridgeObjectRetain(v17);
  v32 = 0;
  v30 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v42, v5);
  v41 = 5;
  LODWORD(v15) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v41, v5);
  v40 = 6;
  v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v40, v5);
  v28 = v19;
  v29 = v18;
  v39 = 7;
  v27 = KeyedDecodingContainer.decode(_:forKey:)(&v39, v5);
  v38 = 8;
  HIDWORD(v26) = KeyedDecodingContainer.decode(_:forKey:)(&v38, v5);
  LODWORD(v32) = v15;
  v37 = 9;
  v20 = KeyedDecodingContainer.decode(_:forKey:)(&v37, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_100005D78(a1);
  v21 = v35;
  swift_bridgeObjectRelease(v35);
  v22 = v33;
  result = swift_bridgeObjectRelease(v33);
  v24 = v36;
  *(_DWORD *)a2 = v12;
  *(_DWORD *)(a2 + 4) = v24;
  *(_QWORD *)(a2 + 8) = v34;
  *(_QWORD *)(a2 + 16) = v22;
  *(_QWORD *)(a2 + 24) = v31;
  *(_QWORD *)(a2 + 32) = v21;
  *(_BYTE *)(a2 + 40) = v30;
  *(_BYTE *)(a2 + 41) = v32;
  *(_QWORD *)(a2 + 48) = v29;
  *(_BYTE *)(a2 + 56) = v28 & 1;
  v25 = HIDWORD(v26);
  *(_DWORD *)(a2 + 60) = v27;
  *(_DWORD *)(a2 + 64) = v25;
  *(_QWORD *)(a2 + 72) = v20;
  return result;
}

unint64_t sub_10001C7F4()
{
  unint64_t result;

  result = qword_1000703E0;
  if (!qword_1000703E0)
  {
    result = swift_getWitnessTable(&unk_10004C378, &type metadata for FileAnalyticsEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000703E0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FileAnalyticsEvent.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FileAnalyticsEvent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_10001C914 + 4 * byte_10004C012[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_10001C948 + 4 * byte_10004C00D[v4]))();
}

uint64_t sub_10001C948(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001C950(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10001C958);
  return result;
}

uint64_t sub_10001C964(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10001C96CLL);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_10001C970(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001C978(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FileAnalyticsEvent.CodingKeys()
{
  return &type metadata for FileAnalyticsEvent.CodingKeys;
}

unint64_t sub_10001C998()
{
  unint64_t result;

  result = qword_1000703F0;
  if (!qword_1000703F0)
  {
    result = swift_getWitnessTable(&unk_10004C350, &type metadata for FileAnalyticsEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000703F0);
  }
  return result;
}

unint64_t sub_10001C9E0()
{
  unint64_t result;

  result = qword_1000703F8;
  if (!qword_1000703F8)
  {
    result = swift_getWitnessTable(&unk_10004C2C0, &type metadata for FileAnalyticsEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000703F8);
  }
  return result;
}

unint64_t sub_10001CA28()
{
  unint64_t result;

  result = qword_100070400;
  if (!qword_100070400)
  {
    result = swift_getWitnessTable(&unk_10004C2E8, &type metadata for FileAnalyticsEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100070400);
  }
  return result;
}

uint64_t AKSAnalyticsCounters.description.getter()
{
  Swift::String v0;
  Swift::String v1;
  void *object;
  Swift::String v3;
  Swift::String v4;
  void *v5;
  Swift::String v6;
  Swift::String v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  void *v17;
  Swift::String v18;
  Swift::String v19;
  void *v20;
  Swift::String v21;
  Swift::String v22;
  void *v23;
  Swift::String v24;
  Swift::String v25;
  void *v26;
  Swift::String v27;
  Swift::String v28;
  void *v29;
  Swift::String v30;
  Swift::String v31;
  void *v32;
  Swift::String v33;
  Swift::String v34;
  void *v35;
  Swift::String v36;
  Swift::String v37;
  void *v38;
  Swift::String v39;
  Swift::String v40;
  void *v41;
  Swift::String v42;
  Swift::String v43;
  void *v44;
  Swift::String v45;
  Swift::String v46;
  void *v47;
  Swift::String v48;
  Swift::String v49;
  void *v50;

  _StringGuts.grow(_:)(186);
  v0._countAndFlagsBits = 0x646165526E65706FLL;
  v0._object = (void *)0xED00003D656C6261;
  String.append(_:)(v0);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  object = v1._object;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object);
  v3._countAndFlagsBits = 47;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  v5 = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v5);
  v6._countAndFlagsBits = 0x6972576E65706F20;
  v6._object = (void *)0xEE003D656C626174;
  String.append(_:)(v6);
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  v8 = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v8);
  v9._countAndFlagsBits = 47;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  v11 = v10._object;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v11);
  v12._countAndFlagsBits = 0x3D65746165726320;
  v12._object = (void *)0xE800000000000000;
  String.append(_:)(v12);
  v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  v14 = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v14);
  v15._countAndFlagsBits = 47;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  v17 = v16._object;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v17);
  v18._countAndFlagsBits = 0xD000000000000014;
  v18._object = (void *)0x80000001000515C0;
  String.append(_:)(v18);
  v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  v20 = v19._object;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v20);
  v21._countAndFlagsBits = 47;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  v23 = v22._object;
  String.append(_:)(v22);
  swift_bridgeObjectRelease(v23);
  v24._countAndFlagsBits = 0xD000000000000015;
  v24._object = (void *)0x80000001000515E0;
  String.append(_:)(v24);
  v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  v26 = v25._object;
  String.append(_:)(v25);
  swift_bridgeObjectRelease(v26);
  v27._countAndFlagsBits = 47;
  v27._object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  v29 = v28._object;
  String.append(_:)(v28);
  swift_bridgeObjectRelease(v29);
  v30._countAndFlagsBits = 0x656C626173696420;
  v30._object = (void *)0xEA00000000003D64;
  String.append(_:)(v30);
  v31._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  v32 = v31._object;
  String.append(_:)(v31);
  swift_bridgeObjectRelease(v32);
  v33._object = (void *)0xEA00000000003D79;
  v33._countAndFlagsBits = 0x6C6E4F6461657220;
  String.append(_:)(v33);
  v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  v35 = v34._object;
  String.append(_:)(v34);
  swift_bridgeObjectRelease(v35);
  v36._object = (void *)0x8000000100051600;
  v36._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v36);
  v37._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  v38 = v37._object;
  String.append(_:)(v37);
  swift_bridgeObjectRelease(v38);
  v39._countAndFlagsBits = 0x6F74636572696420;
  v39._object = (void *)0xEB000000003D7972;
  String.append(_:)(v39);
  v40._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  v41 = v40._object;
  String.append(_:)(v40);
  swift_bridgeObjectRelease(v41);
  v42._countAndFlagsBits = 0x3D706F726420;
  v42._object = (void *)0xE600000000000000;
  String.append(_:)(v42);
  v43._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  v44 = v43._object;
  String.append(_:)(v43);
  swift_bridgeObjectRelease(v44);
  v45._countAndFlagsBits = 0x3D7265746C696620;
  v45._object = (void *)0xE800000000000000;
  String.append(_:)(v45);
  v46._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  v47 = v46._object;
  String.append(_:)(v46);
  swift_bridgeObjectRelease(v47);
  v48._countAndFlagsBits = 0x3D726F72726520;
  v48._object = (void *)0xE700000000000000;
  String.append(_:)(v48);
  v49._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  v50 = v49._object;
  String.append(_:)(v49);
  swift_bridgeObjectRelease(v50);
  return 0;
}

uint64_t sub_10001CFA0(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;

  v3 = v1;
  v5 = sub_100005690(&qword_1000706A0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100005E2C(a1, v9);
  v11 = sub_10001F538();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for KernelCounters.CodingKeys, &type metadata for KernelCounters.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v23 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v23, v5);
  if (!v2)
  {
    v13 = v3[1];
    v22 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, &v22, v5);
    v14 = v3[2];
    v21 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v21, v5);
    v15 = v3[3];
    v20 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v15, &v20, v5);
    v16 = v3[4];
    v19 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v16, &v19, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10001D12C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10001D164 + 4 * byte_10004C400[*v0]))(0x6576456C61746F74, 0xEB0000000073746ELL);
}

uint64_t sub_10001D164()
{
  return 0x646574726F706572;
}

uint64_t sub_10001D188()
{
  return 0x646570706F7264;
}

uint64_t sub_10001D1A0()
{
  return 0x64657265746C6966;
}

uint64_t sub_10001D1B8()
{
  return 0x726F727265;
}

uint64_t sub_10001D1CC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10001EB3C(a1, a2);
  *a3 = result;
  return result;
}

void sub_10001D1F0(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_10001D1FC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001F538();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001D224(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001F538();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10001D24C@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  sub_10001ED8C(a1, (uint64_t *)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_10001D290(_QWORD *a1)
{
  return sub_10001CFA0(a1);
}

void *sub_10001D2A4()
{
  uint64_t v0;
  void *result;

  *(_QWORD *)(v0 + 64) = 0;
  *(_BYTE *)(v0 + 72) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_DWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_DWORD *)(v0 + 56) = 0;
  *(_QWORD *)(v0 + 80) = 32;
  result = calloc(1uLL, 0x20uLL);
  if (result)
  {
    *(_QWORD *)(v0 + 88) = result;
    return (void *)v0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10001D2F0()
{
  uint64_t v0;
  const __CFDictionary *v1;
  io_service_t MatchingService;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  NSObject *oslog;
  io_connect_t connect;

  v1 = IOServiceMatching("AKSAnalytics");
  MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v1);
  if (MatchingService)
  {
    connect = 0;
    if (IOServiceOpen(MatchingService, mach_task_self_, 0, &connect))
    {
      if (qword_10006E5C0 != -1)
        swift_once(&qword_10006E5C0, sub_10001AB28);
      v3 = type metadata accessor for Logger(0);
      v4 = sub_100005D1C(v3, (uint64_t)qword_100071AE0);
      v5 = Logger.logObject.getter(v4);
      v6 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v5, v6))
      {
        v7 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v7 = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to open AKSAnalytics service", v7, 2u);
        swift_slowDealloc(v7, -1, -1);
      }

    }
    else
    {
      *(_DWORD *)(v0 + 32) = connect;
    }
  }
  else
  {
    if (qword_10006E5C0 != -1)
      swift_once(&qword_10006E5C0, sub_10001AB28);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_100005D1C(v8, (uint64_t)qword_100071AE0);
    oslog = Logger.logObject.getter(v9);
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v10, "AKSAnalytics service not found", v11, 2u);
      swift_slowDealloc(v11, -1, -1);
    }

  }
}

void sub_10001D51C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  mach_port_t NotificationPort;
  kern_return_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  const char *v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint32_t v29;
  uint64_t v30;
  uint64_t v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t ObjectType;
  void *v46;
  uint64_t v47;
  char *v48;
  kern_return_t v49;
  kern_return_t v50;
  uint64_t v51;
  uint64_t v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  os_log_type_t v58;
  uint64_t v59;
  uint64_t v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  os_log_t v69;
  uint64_t aBlock[5];
  uint64_t v71;
  mach_vm_size_t ofSize;
  mach_vm_address_t atAddress;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v14 = __chkstk_darwin(v13);
  v17 = (char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_DWORD *)(v1 + 56))
  {
    __break(1u);
    goto LABEL_33;
  }
  v68 = v15;
  v69 = v14;
  NotificationPort = IODataQueueAllocateNotificationPort();
  *(_DWORD *)(v1 + 56) = NotificationPort;
  if (NotificationPort)
  {
    v67 = v5;
    ofSize = 0;
    atAddress = 0;
    v19 = IOConnectMapMemory64(*(_DWORD *)(v1 + 32), 0, mach_task_self_, &atAddress, &ofSize, 1u);
    if (v19)
    {
      LODWORD(v5) = v19;
      if (qword_10006E5C0 == -1)
      {
LABEL_5:
        v20 = type metadata accessor for Logger(0);
        v21 = sub_100005D1C(v20, (uint64_t)qword_100071AE0);
        v22 = Logger.logObject.getter(v21);
        v23 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v22, v23))
        {
LABEL_29:

          return;
        }
        v24 = (uint8_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v24 = 67109120;
        LODWORD(aBlock[0]) = (_DWORD)v5;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(aBlock, (char *)aBlock + 4);
        v25 = "IOConnectMapMemory64 failed: %d";
        v26 = v22;
        v27 = v23;
        v28 = v24;
        v29 = 8;
LABEL_7:
        _os_log_impl((void *)&_mh_execute_header, v26, v27, v25, v28, v29);
        swift_slowDealloc(v24, -1, -1);
        goto LABEL_29;
      }
LABEL_33:
      swift_once(&qword_10006E5C0, sub_10001AB28);
      goto LABEL_5;
    }
    v64 = v3;
    v65 = v2;
    *(_QWORD *)(v1 + 40) = atAddress;
    v66 = sub_10001EAE4(0, (unint64_t *)&qword_10006E740, OS_dispatch_queue_ptr);
    ((void (*)(void))static DispatchQoS.unspecified.getter)();
    aBlock[0] = (uint64_t)&_swiftEmptyArrayStorage;
    v34 = sub_100005A54(&qword_100070640, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
    v35 = sub_100005690(&qword_100070648);
    v36 = sub_10001A838((unint64_t *)&qword_100070650, &qword_100070648, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v35, v36, v10, v34);
    (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v6);
    v37 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000022, 0x8000000100051750, v17, v12, v9, 0);
    v38 = *(void **)(v1 + 48);
    *(_QWORD *)(v1 + 48) = v37;

    sub_10001EAE4(0, &qword_100070658, OS_dispatch_source_ptr);
    v39 = *(unsigned int *)(v1 + 56);
    v40 = *(void **)(v1 + 48);
    v41 = v40;
    v42 = static OS_dispatch_source.makeMachReceiveSource(port:queue:)(v39, v40);

    v43 = *(_QWORD *)(v1 + 64);
    *(_QWORD *)(v1 + 64) = v42;
    swift_unknownObjectRelease(v43);
    v44 = *(_QWORD *)(v1 + 64);
    if (!v44)
    {
      if (qword_10006E5C0 != -1)
        swift_once(&qword_10006E5C0, sub_10001AB28);
      v56 = type metadata accessor for Logger(0);
      v57 = sub_100005D1C(v56, (uint64_t)qword_100071AE0);
      v22 = Logger.logObject.getter(v57);
      v58 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v22, v58))
        goto LABEL_29;
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      v25 = "cannot create notification source";
      v26 = v22;
      v27 = v58;
      v28 = v24;
      v29 = 2;
      goto LABEL_7;
    }
    ObjectType = swift_getObjectType(*(_QWORD *)(v1 + 64));
    aBlock[4] = (uint64_t)sub_10001EB1C;
    v71 = v1;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_10001DDE8;
    aBlock[3] = (uint64_t)&unk_100067910;
    v46 = _Block_copy(aBlock);
    swift_unknownObjectRetain(v44);
    v47 = swift_retain(v1);
    static DispatchQoS.unspecified.getter(v47);
    v48 = v67;
    sub_10001DE14();
    OS_dispatch_source.setEventHandler(qos:flags:handler:)(v17, v48, v46, ObjectType);
    _Block_release(v46);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v48, v65);
    (*(void (**)(char *, os_log_t))(v68 + 8))(v17, v69);
    swift_release(v71);
    OS_dispatch_source.activate()();
    v49 = IOConnectSetNotificationPort(*(_DWORD *)(v1 + 32), 0, *(_DWORD *)(v1 + 56), 0);
    if (v49)
    {
      v50 = v49;
      if (qword_10006E5C0 != -1)
        swift_once(&qword_10006E5C0, sub_10001AB28);
      v51 = type metadata accessor for Logger(0);
      v52 = sub_100005D1C(v51, (uint64_t)qword_100071AE0);
      v22 = Logger.logObject.getter(v52);
      v53 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v22, v53))
      {
        v54 = (uint8_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v54 = 67109120;
        LODWORD(aBlock[0]) = v50;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(aBlock, (char *)aBlock + 4);
        _os_log_impl((void *)&_mh_execute_header, v22, v53, "IOConnectSetNotificationPort failed: %d", v54, 8u);
        v55 = v54;
LABEL_28:
        swift_slowDealloc(v55, -1, -1);
        swift_unknownObjectRelease(v44);
        goto LABEL_29;
      }
LABEL_30:

      swift_unknownObjectRelease(v44);
      return;
    }
    aBlock[0] = 1;
    if (IOConnectCallScalarMethod(*(_DWORD *)(v1 + 32), 0, aBlock, 1u, 0, 0))
    {
      if (qword_10006E5C0 != -1)
        swift_once(&qword_10006E5C0, sub_10001AB28);
      v59 = type metadata accessor for Logger(0);
      v60 = sub_100005D1C(v59, (uint64_t)qword_100071AE0);
      v22 = Logger.logObject.getter(v60);
      v61 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v22, v61))
      {
        v62 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v62 = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, v61, "Failed to enable analytics", v62, 2u);
        v55 = v62;
        goto LABEL_28;
      }
      goto LABEL_30;
    }
    swift_unknownObjectRelease(v44);
    *(_BYTE *)(v1 + 72) = 1;
  }
  else
  {
    if (qword_10006E5C0 != -1)
      swift_once(&qword_10006E5C0, sub_10001AB28);
    v30 = type metadata accessor for Logger(0);
    v31 = sub_100005D1C(v30, (uint64_t)qword_100071AE0);
    v69 = (os_log_t)Logger.logObject.getter(v31);
    v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v69, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v69, v32, "failed to allocate mach port", v33, 2u);
      swift_slowDealloc(v33, -1, -1);
    }

  }
}

unsigned int *sub_10001DD00(uint64_t a1)
{
  unsigned int *result;
  IODataQueueMemory *v3;
  void (*v4)(_OWORD *);
  uint64_t v5;
  uint64_t v6[8];
  _OWORD v7[2];
  __int128 v8;
  __int128 v9;
  _OWORD v10[4];

  result = (unsigned int *)sub_10001DEC8();
  v3 = *(IODataQueueMemory **)(a1 + 40);
  if (((unint64_t)v3 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    for (result = (unsigned int *)IODataQueuePeek(*(IODataQueueMemory **)(a1 + 40));
          result;
          result = (unsigned int *)IODataQueuePeek(v3))
    {
      sub_10001EF68((__int128 *)(result + 1), (uint64_t)result + *result + 4, (uint64_t)v6);
      sub_10001F414((uint64_t)v6, (uint64_t)v7, &qword_100070678);
      if (*((_QWORD *)&v8 + 1))
      {
        v10[0] = v7[0];
        v10[1] = v7[1];
        v10[2] = v8;
        v10[3] = v9;
        v4 = *(void (**)(_OWORD *))(a1 + 16);
        if (v4)
        {
          v5 = *(_QWORD *)(a1 + 24);
          swift_retain(v5);
          v4(v10);
          sub_10001EA28((uint64_t)v4, v5);
        }
        sub_10001F458(v6);
      }
      IODataQueueDequeue(v3, 0, 0);
    }
  }
  return result;
}

uint64_t sub_10001DDE8(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_10001DE14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = &_swiftEmptyArrayStorage;
  v1 = sub_100005A54(&qword_100070660, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v2 = sub_100005690(&qword_100070668);
  v3 = sub_10001A838(&qword_100070670, &qword_100070668, (uint64_t)&protocol conformance descriptor for [A]);
  return dispatch thunk of SetAlgebra.init<A>(_:)(&v5, v2, v3, v0, v1);
}

uint64_t sub_10001DEC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _DWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  mach_error_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  do
  {
    v5 = *(_DWORD **)(v0 + 88);
    *v5 = 0;
    v6 = *(_QWORD *)(v0 + 80);
    if ((v6 & 0x8000000000000000) != 0)
      goto LABEL_14;
    if (HIDWORD(v6))
    {
      result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
      goto LABEL_16;
    }
    v5[1] = v6;
    v7 = *(_QWORD *)(v0 + 88);
    *(_QWORD *)(v7 + 8) = 0;
    result = mach_msg((mach_msg_header_t *)v7, 258, 0, *(_DWORD *)(v7 + 4), *(_DWORD *)(v0 + 56), 0, 0);
  }
  while (!(_DWORD)result);
  v9 = result;
  if ((_DWORD)result == 268451843)
    return result;
  if (qword_10006E5C0 != -1)
    swift_once(&qword_10006E5C0, sub_10001AB28);
  v10 = sub_100005D1C(v1, (uint64_t)qword_100071AE0);
  v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v10, v1);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v12, v13))
    goto LABEL_11;
  v14 = swift_slowAlloc(22, -1);
  v15 = swift_slowAlloc(64, -1);
  v24 = v15;
  *(_DWORD *)v14 = 136315394;
  HIDWORD(v23) = v9;
  v16 = sub_10001EAA0();
  v17 = String.init<A>(_:radix:uppercase:)((char *)&v23 + 4, 16, 0, &type metadata for Int32, v16);
  v19 = v18;
  *(_QWORD *)(v14 + 4) = sub_100016DBC(v17, v18, &v24);
  swift_bridgeObjectRelease(v19);
  *(_WORD *)(v14 + 12) = 2080;
  if (mach_error_string(v9))
  {
    v20 = String.init(cString:)();
    v22 = v21;
    *(_QWORD *)(v14 + 14) = sub_100016DBC(v20, v21, &v24);
    swift_bridgeObjectRelease(v22);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "mach_msg receive failed: 0x%s %s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v15, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);
LABEL_11:

    return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  __break(1u);
LABEL_14:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
LABEL_16:
  __break(1u);
  return result;
}

void sub_10001E1A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = sub_100005690(&qword_100070618);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = (v7 + 16) & ~v7;
  v9 = swift_allocObject(&unk_1000678F8, v8 + v6, v7 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = sub_10001E9E8;
  *(_QWORD *)(a2 + 24) = v9;
  sub_10001EA28(v10, v11);
  sub_10001D51C();
}

uint64_t sub_10001E284(_OWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _OWORD v10[4];

  v2 = sub_100005690(&qword_100070620);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1[1];
  v10[0] = *a1;
  v10[1] = v6;
  v7 = a1[3];
  v10[2] = a1[2];
  v10[3] = v7;
  sub_10001EA38((uint64_t)a1);
  v8 = sub_100005690(&qword_100070618);
  AsyncStream.Continuation.yield(_:)(v10, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

char *sub_10001E33C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _OWORD *v7;
  kern_return_t v8;
  mach_error_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  char *result;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  size_t v33;
  _OWORD v34[14];
  uint64_t v35[27];

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_DWORD *)(v1 + 32))
  {
    if (qword_10006E5C0 != -1)
      swift_once(&qword_10006E5C0, sub_10001AB28);
    v20 = sub_100005D1C(v3, (uint64_t)qword_100071AE0);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "no connection for kext counters", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }

    sub_10001EA6C((uint64_t)v34);
    goto LABEL_20;
  }
  v7 = (_OWORD *)swift_slowAlloc(208, -1);
  v33 = 208;
  v8 = IOConnectCallStructMethod(*(_DWORD *)(v1 + 32), 1u, 0, 0, v7, &v33);
  if (!v8)
  {
    v24 = v7[11];
    v34[10] = v7[10];
    v34[11] = v24;
    v34[12] = v7[12];
    v25 = v7[7];
    v34[6] = v7[6];
    v34[7] = v25;
    v26 = v7[9];
    v34[8] = v7[8];
    v34[9] = v26;
    v27 = v7[3];
    v34[2] = v7[2];
    v34[3] = v27;
    v28 = v7[5];
    v34[4] = v7[4];
    v34[5] = v28;
    v29 = v7[1];
    v34[0] = *v7;
    v34[1] = v29;
    sub_10001EA98((uint64_t)v34);
LABEL_19:
    swift_slowDealloc(v7, -1, -1);
LABEL_20:
    sub_10001F414((uint64_t)v34, (uint64_t)v35, &qword_100070628);
    return (char *)sub_10001F414((uint64_t)v35, a1, &qword_100070628);
  }
  v9 = v8;
  if (qword_10006E5C0 != -1)
    swift_once(&qword_10006E5C0, sub_10001AB28);
  v10 = sub_100005D1C(v3, (uint64_t)qword_100071AE0);
  v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v10, v3);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v12, v13))
  {

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
LABEL_18:
    sub_10001EA6C((uint64_t)v34);
    goto LABEL_19;
  }
  v32 = a1;
  v14 = (uint8_t *)swift_slowAlloc(12, -1);
  v31 = swift_slowAlloc(32, -1);
  v35[0] = v31;
  *(_DWORD *)v14 = 136315138;
  result = mach_error_string(v9);
  if (result)
  {
    v16 = String.init(validatingUTF8:)();
    if (v17)
    {
      v18 = v17;
    }
    else
    {
      v16 = 0x206E776F6E6B6E55;
      v18 = 0xED0000726F727265;
    }
    *(_QWORD *)&v34[0] = sub_100016DBC(v16, v18, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v34, (char *)v34 + 8);
    swift_bridgeObjectRelease(v18);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "failed to get kext counters: %s", v14, 0xCu);
    v19 = v31;
    swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v14, -1, -1);

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    a1 = v32;
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

uint64_t sub_10001E710()
{
  uint64_t v0;

  sub_10001EA28(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 64));
  return swift_deallocClassInstance(v0, 96, 7);
}

uint64_t type metadata accessor for AnalyticsEventSource()
{
  return objc_opt_self(_TtC14applekeystored20AnalyticsEventSource);
}

uint64_t destroy for AnalyticsEvent(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
}

uint64_t initializeWithCopy for AnalyticsEvent(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for AnalyticsEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 initializeWithTake for AnalyticsEvent(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AnalyticsEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnalyticsEvent(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnalyticsEvent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsEvent()
{
  return &type metadata for AnalyticsEvent;
}

uint64_t sub_10001E984()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_100005690(&qword_100070618);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10001E9E8(_OWORD *a1)
{
  sub_100005690(&qword_100070618);
  return sub_10001E284(a1);
}

uint64_t sub_10001EA28(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

uint64_t sub_10001EA38(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 56);
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 40));
  swift_bridgeObjectRetain(v2);
  return a1;
}

double sub_10001EA6C(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 208) = 1;
  return result;
}

uint64_t sub_10001EA98(uint64_t result)
{
  *(_BYTE *)(result + 208) = 0;
  return result;
}

unint64_t sub_10001EAA0()
{
  unint64_t result;

  result = qword_100070630;
  if (!qword_100070630)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int32, &type metadata for Int32);
    atomic_store(result, (unint64_t *)&qword_100070630);
  }
  return result;
}

uint64_t sub_10001EAE4(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

unsigned int *sub_10001EB1C()
{
  uint64_t v0;

  return sub_10001DD00(v0);
}

uint64_t sub_10001EB24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001EB34(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001EB3C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x6576456C61746F74 && a2 == 0xEB0000000073746ELL)
  {
    v5 = 0xEB0000000073746ELL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6576456C61746F74, 0xEB0000000073746ELL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x646574726F706572 && a2 == 0xEE0073746E657645)
  {
    v7 = 0xEE0073746E657645;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x646574726F706572, 0xEE0073746E657645, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x646570706F7264 && a2 == 0xE700000000000000)
  {
    v8 = 0xE700000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x646570706F7264, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x64657265746C6966 && a2 == 0xE800000000000000)
  {
    v9 = 0xE800000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64657265746C6966, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x726F727265 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x726F727265, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_10001ED8C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;

  v5 = sub_100005690(&qword_100070690);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100005E2C(a1, v9);
  v11 = sub_10001F538();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for KernelCounters.CodingKeys, &type metadata for KernelCounters.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_100005D78(a1);
  v23 = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v23, v5);
  v22 = 1;
  v13 = KeyedDecodingContainer.decode(_:forKey:)(&v22, v5);
  v21 = 2;
  v18 = KeyedDecodingContainer.decode(_:forKey:)(&v21, v5);
  v20 = 3;
  v17 = KeyedDecodingContainer.decode(_:forKey:)(&v20, v5);
  v19 = 4;
  v14 = KeyedDecodingContainer.decode(_:forKey:)(&v19, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  result = sub_100005D78(a1);
  *a2 = v12;
  a2[1] = v13;
  v16 = v17;
  a2[2] = v18;
  a2[3] = v16;
  a2[4] = v14;
  return result;
}

void sub_10001EF68(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  os_log_type_t v37;
  uint8_t *v38;
  const char *v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint32_t v43;
  uint64_t v44;
  uint64_t v45;
  os_log_type_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 *v58;
  uint64_t v59;

  v6 = type metadata accessor for String.Encoding(0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1 || (v10 = a2 - (_QWORD)a1, a2 - (uint64_t)a1 <= 31))
  {
    if (qword_10006E5C0 != -1)
      swift_once(&qword_10006E5C0, sub_10001AB28);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_100005D1C(v11, (uint64_t)qword_100071AE0);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v13, v14))
      goto LABEL_24;
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v15 = 134217984;
    v16 = a2 - (_QWORD)a1;
    if (!a1)
      v16 = 0;
    v56 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "short AnalyticsEvent message %ld", v15, 0xCu);
    v17 = v15;
    goto LABEL_23;
  }
  v18 = *((unsigned int *)a1 + 5);
  v19 = v18 + 32;
  if (v18 >= 0xFFFFFFE0)
  {
    __break(1u);
    goto LABEL_33;
  }
  v20 = *((unsigned int *)a1 + 6);
  v21 = __CFADD__(v19, (_DWORD)v20);
  v22 = v19 + v20;
  if (v21)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v10 != v22)
  {
    if (qword_10006E5C0 == -1)
    {
LABEL_16:
      v35 = type metadata accessor for Logger(0);
      v36 = sub_100005D1C(v35, (uint64_t)qword_100071AE0);
      v13 = Logger.logObject.getter(v36);
      v37 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v13, v37))
      {
LABEL_24:

LABEL_25:
        v33 = 0;
        v20 = 0;
        v27 = 0;
        v28 = 0;
        v30 = 0;
        v32 = 0;
        v34 = 0uLL;
        goto LABEL_26;
      }
      v38 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v38 = 134217984;
      v56 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57);
      v39 = "invalid AnalyticsEvent length %ld";
      v40 = v13;
      v41 = v37;
      v42 = v38;
      v43 = 12;
      goto LABEL_22;
    }
LABEL_34:
    swift_once(&qword_10006E5C0, sub_10001AB28);
    goto LABEL_16;
  }
  v54 = *a1;
  v53 = *((unsigned int *)a1 + 4);
  v56 = 32;
  v57 = v18 + 32;
  v58 = a1;
  v59 = a2;
  static String.Encoding.utf8.getter(v7);
  v23 = sub_100005690(&qword_100070680);
  v24 = sub_10001A838(&qword_100070688, &qword_100070680, (uint64_t)&protocol conformance descriptor for Slice<A>);
  v55 = v23;
  v25 = String.init<A>(bytes:encoding:)(&v56, v9, v23, v24);
  if (!v26)
  {
    if (qword_10006E5C0 != -1)
      swift_once(&qword_10006E5C0, sub_10001AB28);
    v44 = type metadata accessor for Logger(0);
    v45 = sub_100005D1C(v44, (uint64_t)qword_100071AE0);
    v13 = Logger.logObject.getter(v45);
    v46 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v13, v46))
      goto LABEL_24;
    v38 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v38 = 0;
    v39 = "invalid AnalyticsEvent path";
    v40 = v13;
    v41 = v46;
    v42 = v38;
    v43 = 2;
LABEL_22:
    _os_log_impl((void *)&_mh_execute_header, v40, v41, v39, v42, v43);
    v17 = v38;
LABEL_23:
    swift_slowDealloc(v17, -1, -1);
    goto LABEL_24;
  }
  v27 = v25;
  v28 = v26;
  v56 = v18 + 32;
  v57 = v18 + 32 + v20;
  v58 = a1;
  v59 = a2;
  swift_bridgeObjectRetain(v26);
  static String.Encoding.utf8.getter(v29);
  v30 = String.init<A>(bytes:encoding:)(&v56, v9, v55, v24);
  v32 = v31;
  swift_bridgeObjectRelease(v28);
  if (!v32)
  {
    if (qword_10006E5C0 != -1)
      swift_once(&qword_10006E5C0, sub_10001AB28);
    v47 = type metadata accessor for Logger(0);
    v48 = sub_100005D1C(v47, (uint64_t)qword_100071AE0);
    v49 = Logger.logObject.getter(v48);
    v50 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v49, v50))
    {
      v51 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v51 = 0;
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "invalid AnalyticsEvent proc", v51, 2u);
      swift_slowDealloc(v51, -1, -1);
    }

    swift_bridgeObjectRelease(v28);
    goto LABEL_25;
  }
  v33 = v53 | (v18 << 32);
  v34 = v54;
LABEL_26:
  *(_OWORD *)a3 = v34;
  *(_QWORD *)(a3 + 16) = v33;
  *(_QWORD *)(a3 + 24) = v20;
  *(_QWORD *)(a3 + 32) = v27;
  *(_QWORD *)(a3 + 40) = v28;
  *(_QWORD *)(a3 + 48) = v30;
  *(_QWORD *)(a3 + 56) = v32;
}

uint64_t sub_10001F414(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100005690(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t *sub_10001F458(uint64_t *a1)
{
  sub_10001F490(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7]);
  return a1;
}

uint64_t sub_10001F490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (a6)
  {
    swift_bridgeObjectRelease(a6);
    return swift_bridgeObjectRelease(a8);
  }
  return result;
}

__n128 initializeWithCopy for KernelCounters(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for KernelCounters(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for KernelCounters(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 40) = v3;
  return result;
}

ValueMetadata *type metadata accessor for KernelCounters()
{
  return &type metadata for KernelCounters;
}

unint64_t sub_10001F538()
{
  unint64_t result;

  result = qword_100070698;
  if (!qword_100070698)
  {
    result = swift_getWitnessTable(&unk_10004C5F4, &type metadata for KernelCounters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100070698);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for KernelCounters.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for KernelCounters.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10001F658 + 4 * byte_10004C40A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10001F68C + 4 * byte_10004C405[v4]))();
}

uint64_t sub_10001F68C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001F694(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10001F69CLL);
  return result;
}

uint64_t sub_10001F6A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10001F6B0);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10001F6B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001F6BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KernelCounters.CodingKeys()
{
  return &type metadata for KernelCounters.CodingKeys;
}

unint64_t sub_10001F6DC()
{
  unint64_t result;

  result = qword_1000706A8;
  if (!qword_1000706A8)
  {
    result = swift_getWitnessTable(&unk_10004C5CC, &type metadata for KernelCounters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000706A8);
  }
  return result;
}

unint64_t sub_10001F724()
{
  unint64_t result;

  result = qword_1000706B0;
  if (!qword_1000706B0)
  {
    result = swift_getWitnessTable(&unk_10004C53C, &type metadata for KernelCounters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000706B0);
  }
  return result;
}

unint64_t sub_10001F76C()
{
  unint64_t result;

  result = qword_1000706B8;
  if (!qword_1000706B8)
  {
    result = swift_getWitnessTable(&unk_10004C564, &type metadata for KernelCounters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000706B8);
  }
  return result;
}

uint64_t sub_10001F7B0(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10001F7EC + 4 * byte_10004C660[a1]))(0xD000000000000015, 0x80000001000517F0);
}

uint64_t sub_10001F7EC()
{
  uint64_t v0;

  return v0 + 2;
}

uint64_t sub_10001F830()
{
  return 0x63746142656C6966;
}

uint64_t sub_10001F854()
{
  return 0x726F706552676F6CLL;
}

uint64_t sub_10001F88C(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  char v26;
  __int128 v27;

  v3 = v1;
  v5 = sub_100005690(&qword_100070818);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100005E2C(a1, v9);
  v11 = sub_10002639C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AnalyticsReporterConfig.CodingKeys, &type metadata for AnalyticsReporterConfig.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = *((unsigned __int8 *)v3 + 8);
  LOBYTE(v27) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v27, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = *((unsigned __int8 *)v3 + 24);
    LOBYTE(v27) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v27, v5);
    v16 = v3[4];
    v17 = *((unsigned __int8 *)v3 + 40);
    LOBYTE(v27) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v27, v5);
    v18 = v3[6];
    v19 = *((unsigned __int8 *)v3 + 56);
    LOBYTE(v27) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v27, v5);
    v20 = v3[8];
    LOBYTE(v27) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v20, &v27, v5);
    v21 = v3[9];
    LOBYTE(v27) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v21, &v27, v5);
    v22 = *((unsigned __int8 *)v3 + 80);
    LOBYTE(v27) = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v22, &v27, v5);
    v27 = *(_OWORD *)(v3 + 11);
    v26 = 7;
    v23 = sub_100026424();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v27, &v26, v5, &type metadata for SplunkLoggerConfig, v23);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10001FAC0()
{
  unsigned __int8 *v0;

  return sub_10001F7B0(*v0);
}

uint64_t sub_10001FAC8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100023660(a1, a2);
  *a3 = result;
  return result;
}

void sub_10001FAEC(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_10001FAF8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002639C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001FB20(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002639C();
  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_10001FB48@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[6];
  uint64_t v8;

  sub_1000239A0(a1, (uint64_t)v7);
  if (!v2)
  {
    v5 = v7[5];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(_QWORD *)(a2 + 96) = v8;
    v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_10001FBA4(_QWORD *a1)
{
  return sub_10001F88C(a1);
}

void sub_10001FBB8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  double v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = Date.init()(v8);
  v12 = Date.timeIntervalSince1970.getter(v11);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  if ((~*(_QWORD *)&v12 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v12 <= -1.0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (v12 >= 1.84467441e19)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v21 = a1;
  v22 = a2;
  if (qword_10006E5F0 != -1)
LABEL_9:
    swift_once(&qword_10006E5F0, sub_100031F44);
  v13 = xmmword_100071B10;
  v15 = qword_100071B20;
  v14 = unk_100071B28;
  v16 = xmmword_100071B30;
  v17 = qword_100071B40;
  v18 = unk_100071B48;
  swift_bridgeObjectRetain(*((_QWORD *)&xmmword_100071B10 + 1));
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(*((_QWORD *)&v16 + 1));
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v22);
  *(_QWORD *)a3 = (unint64_t)v12;
  *(_OWORD *)(a3 + 8) = v13;
  *(_QWORD *)(a3 + 24) = v15;
  *(_QWORD *)(a3 + 32) = v14;
  *(_OWORD *)(a3 + 40) = v16;
  *(_QWORD *)(a3 + 56) = v17;
  v19 = v21;
  *(_QWORD *)(a3 + 64) = v18;
  *(_QWORD *)(a3 + 72) = v19;
  *(_QWORD *)(a3 + 80) = v20;
}

uint64_t sub_10001FD28(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10001FD54 + 4 * byte_10004C668[a1]))(1701669236, 0xE400000000000000);
}

uint64_t sub_10001FD54()
{
  return 0x6C65646F4D7768;
}

uint64_t sub_10001FD6C()
{
  return 0x754E6C6169726573;
}

uint64_t sub_10001FD8C()
{
  return 0x4449656369766564;
}

uint64_t sub_10001FDA4()
{
  return 0x726556646C697562;
}

uint64_t sub_10001FDC4()
{
  return 0x795474726F706572;
}

uint64_t sub_10001FDE0()
{
  return 0x737365636F7270;
}

uint64_t sub_10001FDF8()
{
  return 1701080941;
}

uint64_t sub_10001FE04()
{
  return 0x79726F6765746163;
}

uint64_t sub_10001FE1C()
{
  return 0x746E756F63;
}

uint64_t sub_10001FE30(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;

  v3 = v1;
  v5 = sub_100005690(&qword_1000708D0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100005E2C(a1, v9);
  v11 = sub_100027A4C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ProcessAnalyticsReport.CodingKeys, &type metadata for ProcessAnalyticsReport.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v37 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v37, v5);
  if (!v2)
  {
    v13 = v3[1];
    v14 = v3[2];
    v36 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, v14, &v36, v5);
    v15 = v3[3];
    v16 = v3[4];
    v35 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, &v35, v5);
    v17 = v3[5];
    v18 = v3[6];
    v34 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v17, v18, &v34, v5);
    v19 = v3[7];
    v20 = v3[8];
    v33 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v20, &v33, v5);
    v21 = v3[9];
    v22 = v3[10];
    v32 = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v21, v22, &v32, v5);
    v23 = v3[11];
    v24 = v3[12];
    v31 = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v23, v24, &v31, v5);
    v30 = *((_BYTE *)v3 + 104);
    HIBYTE(v29) = 7;
    v25 = sub_10001A5F4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v30, (char *)&v29 + 7, v5, &type metadata for AccessMode, v25);
    BYTE6(v29) = *((_BYTE *)v3 + 105);
    BYTE5(v29) = 8;
    v26 = sub_10001A7F4();
    KeyedEncodingContainer.encode<A>(_:forKey:)((char *)&v29 + 6, (char *)&v29 + 5, v5, &type metadata for AccessCategory, v26);
    v27 = v3[14];
    BYTE4(v29) = 9;
    KeyedEncodingContainer.encode(_:forKey:)(v27, (char *)&v29 + 4, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000200B4()
{
  unsigned __int8 *v0;

  return sub_10001FD28(*v0);
}

uint64_t sub_1000200BC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100023C74(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000200E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100027A4C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100020108(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100027A4C();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100020130@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[2];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  sub_100024098(a1, (uint64_t)v8);
  if (!v2)
  {
    v5 = v12;
    *(_OWORD *)(a2 + 64) = v11;
    *(_OWORD *)(a2 + 80) = v5;
    *(_OWORD *)(a2 + 96) = v13;
    *(_QWORD *)(a2 + 112) = v14;
    v6 = v8[1];
    *(_OWORD *)a2 = v8[0];
    *(_OWORD *)(a2 + 16) = v6;
    result = *(double *)&v9;
    v7 = v10;
    *(_OWORD *)(a2 + 32) = v9;
    *(_OWORD *)(a2 + 48) = v7;
  }
  return result;
}

uint64_t sub_100020194(_QWORD *a1)
{
  return sub_10001FE30(a1);
}

uint64_t sub_1000201A8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000201D4 + 4 * byte_10004C672[a1]))(1701669236, 0xE400000000000000);
}

uint64_t sub_1000201D4()
{
  return 0x6C65646F4D7768;
}

uint64_t sub_1000201EC()
{
  return 0x754E6C6169726573;
}

uint64_t sub_10002020C()
{
  return 0x4449656369766564;
}

uint64_t sub_100020224()
{
  return 0x726556646C697562;
}

uint64_t sub_100020244()
{
  return 0x795474726F706572;
}

uint64_t sub_100020260()
{
  return 0x737365636F7270;
}

uint64_t sub_100020278()
{
  return 1752457584;
}

uint64_t sub_100020284()
{
  return 1701080941;
}

uint64_t sub_100020290()
{
  return 0x79726F6765746163;
}

unint64_t sub_1000202A8()
{
  return 0xD000000000000011;
}

uint64_t sub_1000202C4()
{
  return 0x745367616279656BLL;
}

uint64_t sub_1000202E4()
{
  return 0x6279654B65726F6DLL;
}

uint64_t sub_100020308(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;

  v3 = v1;
  v5 = sub_100005690(&qword_1000708B8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100005E2C(a1, v9);
  v11 = sub_100027980();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FileAnalyticsReport.CodingKeys, &type metadata for FileAnalyticsReport.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v41 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v41, v5);
  if (!v2)
  {
    v13 = v3[1];
    v14 = v3[2];
    v40 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, v14, &v40, v5);
    v15 = v3[3];
    v16 = v3[4];
    v39 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, &v39, v5);
    v17 = v3[5];
    v18 = v3[6];
    v38 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v17, v18, &v38, v5);
    v19 = v3[7];
    v20 = v3[8];
    v37 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v20, &v37, v5);
    v21 = v3[9];
    v22 = v3[10];
    v36 = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v21, v22, &v36, v5);
    v23 = v3[11];
    v24 = v3[12];
    v35 = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v23, v24, &v35, v5);
    v25 = v3[13];
    v26 = v3[14];
    v34 = 7;
    KeyedEncodingContainer.encode(_:forKey:)(v25, v26, &v34, v5);
    HIBYTE(v33) = *((_BYTE *)v3 + 120);
    BYTE6(v33) = 8;
    v27 = sub_10001A5F4();
    KeyedEncodingContainer.encode<A>(_:forKey:)((char *)&v33 + 7, (char *)&v33 + 6, v5, &type metadata for AccessMode, v27);
    BYTE5(v33) = *((_BYTE *)v3 + 121);
    BYTE4(v33) = 9;
    v28 = sub_10001A7F4();
    KeyedEncodingContainer.encode<A>(_:forKey:)((char *)&v33 + 5, (char *)&v33 + 4, v5, &type metadata for AccessCategory, v28);
    v29 = *((unsigned int *)v3 + 31);
    BYTE3(v33) = 10;
    KeyedEncodingContainer.encode(_:forKey:)(v29, (char *)&v33 + 3, v5);
    v30 = *((unsigned int *)v3 + 32);
    BYTE2(v33) = 11;
    KeyedEncodingContainer.encode(_:forKey:)(v30, (char *)&v33 + 2, v5);
    v31 = v3[17];
    BYTE1(v33) = 12;
    KeyedEncodingContainer.encode(_:forKey:)(v31, (char *)&v33 + 1, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100020604()
{
  unsigned __int8 *v0;

  return sub_1000201A8(*v0);
}

uint64_t sub_10002060C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000246D8(a1, a2);
  *a3 = result;
  return result;
}

void sub_100020630(_BYTE *a1@<X8>)
{
  *a1 = 13;
}

uint64_t sub_10002063C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100027980();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100020664(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100027980();
  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_10002068C@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[9];

  sub_100024C54(a1, v8);
  if (!v2)
  {
    v5 = v8[7];
    *(_OWORD *)(a2 + 96) = v8[6];
    *(_OWORD *)(a2 + 112) = v5;
    *(_OWORD *)(a2 + 128) = v8[8];
    v6 = v8[3];
    *(_OWORD *)(a2 + 32) = v8[2];
    *(_OWORD *)(a2 + 48) = v6;
    v7 = v8[5];
    *(_OWORD *)(a2 + 64) = v8[4];
    *(_OWORD *)(a2 + 80) = v7;
    result = (__n128)v8[1];
    *(_OWORD *)a2 = v8[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_1000206E4(_QWORD *a1)
{
  return sub_100020308(a1);
}

uint64_t sub_1000206F8(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  unint64_t v24;
  uint64_t v26;
  char v27;
  _OWORD v28[2];
  uint64_t v29;

  v3 = v1;
  v5 = sub_100005690(&qword_100070870);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100005E2C(a1, v9);
  v11 = sub_100027718();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for KernelCounterReport.CodingKeys, &type metadata for KernelCounterReport.CodingKeys, v11, v9, v10);
  v12 = *v3;
  LOBYTE(v28[0]) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v28, v5);
  if (!v2)
  {
    v13 = v3[1];
    v14 = v3[2];
    LOBYTE(v28[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, v14, v28, v5);
    v15 = v3[3];
    v16 = v3[4];
    LOBYTE(v28[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, v28, v5);
    v17 = v3[5];
    v18 = v3[6];
    LOBYTE(v28[0]) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v17, v18, v28, v5);
    v19 = v3[7];
    v20 = v3[8];
    LOBYTE(v28[0]) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v20, v28, v5);
    v21 = v3[9];
    v22 = v3[10];
    LOBYTE(v28[0]) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v21, v22, v28, v5);
    v23 = *(_OWORD *)(v3 + 13);
    v28[0] = *(_OWORD *)(v3 + 11);
    v28[1] = v23;
    v29 = v3[15];
    v27 = 6;
    v24 = sub_1000277A0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v28, &v27, v5, &type metadata for KernelCounters, v24);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_1000208FC(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_100020908(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100027718();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100020930(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100027718();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100020958@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v9[2];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  sub_100025434(a1, v9);
  if (!v2)
  {
    v5 = v13;
    a2[4] = v12;
    a2[5] = v5;
    v6 = v15;
    a2[6] = v14;
    a2[7] = v6;
    v7 = v9[1];
    *a2 = v9[0];
    a2[1] = v7;
    result = *(double *)&v10;
    v8 = v11;
    a2[2] = v10;
    a2[3] = v8;
  }
  return result;
}

uint64_t sub_1000209A8(_QWORD *a1)
{
  return sub_1000206F8(a1);
}

uint64_t sub_1000209BC(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v28;
  char v29;
  _OWORD v30[6];

  v3 = v1;
  v5 = sub_100005690(&qword_100070898);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100005E2C(a1, v9);
  v11 = sub_1000277E4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for EventCounterReport.CodingKeys, &type metadata for EventCounterReport.CodingKeys, v11, v9, v10);
  v12 = *v3;
  LOBYTE(v30[0]) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v30, v5);
  if (!v2)
  {
    v13 = v3[1];
    v14 = v3[2];
    LOBYTE(v30[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, v14, v30, v5);
    v15 = v3[3];
    v16 = v3[4];
    LOBYTE(v30[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, v30, v5);
    v17 = v3[5];
    v18 = v3[6];
    LOBYTE(v30[0]) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v17, v18, v30, v5);
    v19 = v3[7];
    v20 = v3[8];
    LOBYTE(v30[0]) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v20, v30, v5);
    v21 = v3[9];
    v22 = v3[10];
    LOBYTE(v30[0]) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v21, v22, v30, v5);
    v23 = *(_OWORD *)(v3 + 17);
    v30[2] = *(_OWORD *)(v3 + 15);
    v30[3] = v23;
    v24 = *(_OWORD *)(v3 + 21);
    v30[4] = *(_OWORD *)(v3 + 19);
    v30[5] = v24;
    v25 = *(_OWORD *)(v3 + 13);
    v30[0] = *(_OWORD *)(v3 + 11);
    v30[1] = v25;
    v29 = 6;
    v26 = sub_10002793C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v30, &v29, v5, &type metadata for AnalyticsManagerCounters.Snapshot, v26);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100020BCC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100020BF4 + 4 * byte_10004C67F[*v0]))(1701669236, 0xE400000000000000);
}

uint64_t sub_100020BF4()
{
  return 0x6C65646F4D7768;
}

uint64_t sub_100020C0C()
{
  return 0x754E6C6169726573;
}

uint64_t sub_100020C2C()
{
  return 0x4449656369766564;
}

uint64_t sub_100020C44()
{
  return 0x726556646C697562;
}

uint64_t sub_100020C64()
{
  return 0x795474726F706572;
}

uint64_t sub_100020C80()
{
  return 0x737265746E756F63;
}

uint64_t sub_100020C98@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10002595C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100020CBC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000277E4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100020CE4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000277E4();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100020D0C@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v10[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  sub_100025C6C(a1, (uint64_t)v10);
  if (!v2)
  {
    v5 = v18;
    *(_OWORD *)(a2 + 128) = v17;
    *(_OWORD *)(a2 + 144) = v5;
    *(_OWORD *)(a2 + 160) = v19;
    *(_QWORD *)(a2 + 176) = v20;
    v6 = v14;
    *(_OWORD *)(a2 + 64) = v13;
    *(_OWORD *)(a2 + 80) = v6;
    v7 = v16;
    *(_OWORD *)(a2 + 96) = v15;
    *(_OWORD *)(a2 + 112) = v7;
    v8 = v10[1];
    *(_OWORD *)a2 = v10[0];
    *(_OWORD *)(a2 + 16) = v8;
    result = *(double *)&v11;
    v9 = v12;
    *(_OWORD *)(a2 + 32) = v11;
    *(_OWORD *)(a2 + 48) = v9;
  }
  return result;
}

uint64_t sub_100020D88(_QWORD *a1)
{
  return sub_1000209BC(a1);
}

uint64_t sub_100020D9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  return swift_task_switch(sub_100020DB8, 0, 0);
}

uint64_t sub_100020DB8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  _QWORD *v7;

  if (qword_10006E5C0 != -1)
    swift_once(&qword_10006E5C0, sub_10001AB28);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100005D1C(v1, (uint64_t)qword_100071AE0);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = v0[4];
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v6 = 134217984;
    v0[2] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "preparing analytics report for generation %ld", v6, 0xCu);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = (_QWORD *)swift_task_alloc(dword_1000706F4);
  v0[6] = v7;
  *v7 = v0;
  v7[1] = sub_100020EF0;
  return sub_100020FCC(v0[3], v0[4]);
}

uint64_t sub_100020EF0(char a1)
{
  uint64_t **v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t **v6;

  v3 = *v1;
  v4 = (*v1)[6];
  v5 = *v1;
  swift_task_dealloc(v4);
  if ((a1 & 1) == 0)
    return ((uint64_t (*)(_QWORD))v5[1])(0);
  v6 = (uint64_t **)swift_task_alloc(dword_1000706FC);
  v3[7] = (uint64_t)v6;
  *v6 = v5;
  v6[1] = (uint64_t *)sub_100020F7C;
  return sub_100021E20(v3[3], v3[4]);
}

uint64_t sub_100020F7C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = *v1;
  v3 = *(_QWORD *)(v6 + 56);
  v4 = *v1;
  v6 = v4;
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_100020FCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  v4 = sub_100005690(&qword_100070150);
  v3[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10002102C, 0, 0);
}

uint64_t sub_10002102C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(*(_QWORD *)(v0 + 48) + 80);
  *(_QWORD *)(v0 + 64) = v3;
  *(_QWORD *)(v0 + 72) = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v0 + 56);
  v5 = sub_100005690(&qword_100070158);
  v20 = *(_QWORD *)(v5 - 8);
  v6 = swift_task_alloc((*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v0 + 80) = v6;
  v7 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 88) = v7;
  *(_QWORD *)(v7 + 16) = v2;
  v8 = type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics(0);
  *(_QWORD *)(v0 + 16) = v8;
  *(_QWORD *)(v0 + 96) = v8;
  Predicate.init(_:)(sub_10002669C, v7, 1, v0 + 16);
  v9 = sub_100005690(&qword_100070160);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 0, 1, v9);
  v10 = sub_100005A54(&qword_10006FFC8, type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics, (uint64_t)&unk_10004B0F4);
  *(_QWORD *)(v0 + 104) = v10;
  FetchDescriptor.init(predicate:sortBy:)(v4, &_swiftEmptyArrayStorage, v8, v10);
  FetchDescriptor.fetchLimit.setter(v3, 0, v5);
  v11 = dispatch thunk of ModelContext.fetch<A>(_:)(v6, v8, v10);
  *(_QWORD *)(v0 + 112) = v11;
  *(_QWORD *)(v0 + 120) = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(v6, v5);
  if (!((unint64_t)v11 >> 62))
  {
    v13 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    *(_QWORD *)(v0 + 128) = v13;
    if (v13)
      goto LABEL_3;
LABEL_14:
    swift_bridgeObjectRelease(v11);
    v16 = *(_QWORD *)(v0 + 80);
    v17 = *(_QWORD *)(v0 + 56);
    swift_task_dealloc(*(_QWORD *)(v0 + 88));
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(1);
  }
  if (v11 < 0)
    v19 = v11;
  else
    v19 = v11 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v11);
  v13 = _CocoaArrayWrapper.endIndex.getter(v19);
  result = swift_bridgeObjectRelease(v11);
  *(_QWORD *)(v0 + 128) = v13;
  if (!v13)
    goto LABEL_14;
LABEL_3:
  if (v13 < 1)
  {
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain(v11);
    for (i = 0; i != v13; ++i)
    {
      if ((v11 & 0xC000000000000001) != 0)
      {
        v15 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v11);
      }
      else
      {
        v15 = *(_QWORD *)(v11 + 8 * i + 32);
        swift_retain(v15);
      }
      sub_1000219F4(v15);
      swift_release(v15);
    }
    swift_bridgeObjectRelease(v11);
    v18 = (_QWORD *)swift_task_alloc(dword_100070FD4);
    *(_QWORD *)(v0 + 136) = v18;
    *v18 = v0;
    v18[1] = sub_1000214A0;
    return sub_1000303AC();
  }
  return result;
}

uint64_t sub_1000214A0(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_BYTE *)(*(_QWORD *)v1 + 144) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000214FC, 0, 0);
}

uint64_t sub_1000214FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t);
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;

  v1 = *(_QWORD *)(v0 + 112);
  if ((*(_BYTE *)(v0 + 144) & 1) == 0)
  {
    swift_bridgeObjectRelease(v1);
LABEL_25:
    v37 = 0;
LABEL_26:
    v38 = *(_QWORD *)(v0 + 80);
    v39 = *(_QWORD *)(v0 + 56);
    swift_task_dealloc(*(_QWORD *)(v0 + 88));
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v37);
  }
  swift_bridgeObjectRetain(v1);
  v2 = 0;
  do
  {
    v5 = *(_QWORD *)(v0 + 112);
    if ((v5 & 0xC000000000000001) != 0)
    {
      v3 = specialized _ArrayBuffer._getElementSlowPath(_:)(v2, v5);
    }
    else
    {
      v3 = *(_QWORD *)(v5 + 8 * v2 + 32);
      swift_retain(v3);
    }
    v4 = *(_QWORD *)(v0 + 128);
    ++v2;
    dispatch thunk of ModelContext.delete<A>(_:)(v3, *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
    swift_release(v3);
  }
  while (v2 != v4);
  v7 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 88);
  swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 112), 2);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  v42 = *(_QWORD *)(v0 + 120);
  v8 = *(_QWORD *)(v0 + 64);
  v9 = *(_QWORD *)(v0 + 56);
  v10 = *(_QWORD *)(v0 + 40);
  v11 = sub_100005690(&qword_100070158);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v0 + 80) = v13;
  v14 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 88) = v14;
  *(_QWORD *)(v14 + 16) = v10;
  v15 = type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics(0);
  *(_QWORD *)(v0 + 96) = v15;
  *(_QWORD *)(v0 + 16) = v15;
  Predicate.init(_:)(sub_10002669C, v14, 1, v0 + 16);
  v16 = sub_100005690(&qword_100070160);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v9, 0, 1, v16);
  v17 = sub_100005A54(&qword_10006FFC8, type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics, (uint64_t)&unk_10004B0F4);
  *(_QWORD *)(v0 + 104) = v17;
  FetchDescriptor.init(predicate:sortBy:)(v9, &_swiftEmptyArrayStorage, v15, v17);
  FetchDescriptor.fetchLimit.setter(v8, 0, v11);
  v18 = dispatch thunk of ModelContext.fetch<A>(_:)(v13, v15, v17);
  *(_QWORD *)(v0 + 112) = v18;
  *(_QWORD *)(v0 + 120) = v42;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v13, v11);
  if (v42)
  {
    if (qword_10006E5C0 != -1)
      swift_once(&qword_10006E5C0, sub_10001AB28);
    v20 = type metadata accessor for Logger(0);
    sub_100005D1C(v20, (uint64_t)qword_100071AE0);
    swift_errorRetain(v42);
    v21 = swift_errorRetain(v42);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v24 = 138412290;
      swift_errorRetain(v42);
      v26 = _swift_stdlib_bridgeErrorToNSError(v42);
      *(_QWORD *)(v0 + 24) = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32);
      *v25 = v26;
      swift_errorRelease(v42);
      swift_errorRelease(v42);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "fetchProcessAnalyticsBatch failed: %@", v24, 0xCu);
      v27 = sub_100005690(&qword_10006FFB8);
      swift_arrayDestroy(v25, 1, v27);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);
    }
    else
    {
      swift_errorRelease(v42);
      swift_errorRelease(v42);
    }
    v31 = *(_QWORD *)(v0 + 48);

    v32 = *(_QWORD *)(*(_QWORD *)(v31 + 120) + 80);
    v33 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 136);
    v34 = swift_retain(v32);
    v35 = (unint64_t *)v33(v34);
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
    swift_errorRelease(v42);
    swift_release(v32);
    goto LABEL_25;
  }
  if (!((unint64_t)v18 >> 62))
  {
    v28 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
    *(_QWORD *)(v0 + 128) = v28;
    if (v28)
      goto LABEL_15;
LABEL_32:
    swift_bridgeObjectRelease(v18);
    v37 = 1;
    goto LABEL_26;
  }
  if (v18 < 0)
    v41 = v18;
  else
    v41 = v18 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v18);
  v28 = _CocoaArrayWrapper.endIndex.getter(v41);
  result = swift_bridgeObjectRelease(v18);
  *(_QWORD *)(v0 + 128) = v28;
  if (!v28)
    goto LABEL_32;
LABEL_15:
  if (v28 < 1)
  {
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain(v18);
    for (i = 0; i != v28; ++i)
    {
      if ((v18 & 0xC000000000000001) != 0)
      {
        v30 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v18);
      }
      else
      {
        v30 = *(_QWORD *)(v18 + 8 * i + 32);
        swift_retain(v30);
      }
      sub_1000219F4(v30);
      swift_release(v30);
    }
    swift_bridgeObjectRelease(v18);
    v40 = (_QWORD *)swift_task_alloc(dword_100070FD4);
    *(_QWORD *)(v0 + 136) = v40;
    *v40 = v0;
    v40[1] = sub_1000214A0;
    return sub_1000303AC();
  }
  return result;
}

void sub_1000219F4(uint64_t a1)
{
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  const char *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  void *object;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t countAndFlagsBits;
  Swift::String v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  char v40;
  char v41;
  uint64_t v42;

  v32._countAndFlagsBits = a1;
  KeyPath = swift_getKeyPath(&unk_10004C8F0);
  v3 = sub_100005A54(&qword_10006FF20, type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics, (uint64_t)&unk_10004B038);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v32, KeyPath, v3);
  swift_release(KeyPath);
  v4 = swift_getKeyPath(&unk_10004C8F0);
  v5 = sub_100005A54(&qword_10006FFC8, type metadata accessor for AnalyticsSchemaV2.ProcessAnalytics, (uint64_t)&unk_10004B0F4);
  PersistentModel.getValue<A>(forKey:)(&v32, v4, v5, &protocol witness table for String);
  swift_release(v4);
  v6 = sub_100046E90(v32);
  if (v6 == 5)
  {
    if (qword_10006E5C0 != -1)
      swift_once(&qword_10006E5C0, sub_10001AB28);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_100005D1C(v7, (uint64_t)qword_100071AE0);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v9, v10))
      goto LABEL_12;
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    v12 = "invalid access mode in ProcessAnalytics record";
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v9, v10, v12, v11, 2u);
    swift_slowDealloc(v11, -1, -1);
LABEL_12:

    return;
  }
  v13 = v6;
  v32._countAndFlagsBits = a1;
  v14 = swift_getKeyPath(&unk_10004C918);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v32, v14, v3);
  swift_release(v14);
  v15 = swift_getKeyPath(&unk_10004C918);
  PersistentModel.getValue<A>(forKey:)(&v32, v15, v5, &protocol witness table for String);
  swift_release(v15);
  v16 = sub_100046ED8(v32._countAndFlagsBits, (uint64_t)v32._object);
  if (v16 == 19)
  {
    if (qword_10006E5C0 != -1)
      swift_once(&qword_10006E5C0, sub_10001AB28);
    v17 = type metadata accessor for Logger(0);
    v18 = sub_100005D1C(v17, (uint64_t)qword_100071AE0);
    v9 = Logger.logObject.getter(v18);
    v10 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v9, v10))
      goto LABEL_12;
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    v12 = "invalid access category in ProcessAnalytics record";
    goto LABEL_11;
  }
  v19 = v16;
  v32._countAndFlagsBits = a1;
  v20 = swift_getKeyPath(&unk_10004C940);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v32, v20, v3);
  swift_release(v20);
  v21 = swift_getKeyPath(&unk_10004C940);
  PersistentModel.getValue<A>(forKey:)(&v32, v21, v5, &protocol witness table for String);
  swift_release(v21);
  object = v32._object;
  countAndFlagsBits = v32._countAndFlagsBits;
  v32._countAndFlagsBits = a1;
  v23 = swift_getKeyPath(&unk_10004C968);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v32, v23, v3);
  swift_release(v23);
  v24 = swift_getKeyPath(&unk_10004C968);
  PersistentModel.getValue<A>(forKey:)(&v32, v24, v5, &protocol witness table for UInt64);
  swift_release(v24);
  v25 = v32._countAndFlagsBits;
  sub_10001FBB8(0x737365636F7250, 0xE700000000000000, (uint64_t)&v32);
  v26 = v33;
  v27 = v34;
  v28 = v35;
  v29 = v36;
  v30 = v37;
  v38 = countAndFlagsBits;
  v39 = object;
  v40 = v13;
  v41 = v19;
  v42 = v25;
  sub_100032448((uint64_t)&v32);
  swift_bridgeObjectRelease(object);
  swift_bridgeObjectRelease(v30);
  swift_bridgeObjectRelease(v29);
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v27);
  swift_bridgeObjectRelease(v26);
}

uint64_t sub_100021E20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  v4 = sub_100005690(&qword_100070828);
  v3[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100021E80, 0, 0);
}

uint64_t sub_100021E80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(*(_QWORD *)(v0 + 48) + 88);
  *(_QWORD *)(v0 + 64) = v3;
  *(_QWORD *)(v0 + 72) = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v0 + 56);
  v5 = sub_100005690(&qword_100070830);
  v20 = *(_QWORD *)(v5 - 8);
  v6 = swift_task_alloc((*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v0 + 80) = v6;
  v7 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 88) = v7;
  *(_QWORD *)(v7 + 16) = v2;
  v8 = type metadata accessor for AnalyticsSchemaV2.FileAnalytics(0);
  *(_QWORD *)(v0 + 16) = v8;
  *(_QWORD *)(v0 + 96) = v8;
  Predicate.init(_:)(sub_100026674, v7, 1, v0 + 16);
  v9 = sub_100005690(&qword_100070838);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 0, 1, v9);
  v10 = sub_100005A54(&qword_10006FFD0, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AFD8);
  *(_QWORD *)(v0 + 104) = v10;
  FetchDescriptor.init(predicate:sortBy:)(v4, &_swiftEmptyArrayStorage, v8, v10);
  FetchDescriptor.fetchLimit.setter(v3, 0, v5);
  v11 = dispatch thunk of ModelContext.fetch<A>(_:)(v6, v8, v10);
  *(_QWORD *)(v0 + 112) = v11;
  *(_QWORD *)(v0 + 120) = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(v6, v5);
  if (!((unint64_t)v11 >> 62))
  {
    v13 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    *(_QWORD *)(v0 + 128) = v13;
    if (v13)
      goto LABEL_3;
LABEL_14:
    swift_bridgeObjectRelease(v11);
    v16 = *(_QWORD *)(v0 + 80);
    v17 = *(_QWORD *)(v0 + 56);
    swift_task_dealloc(*(_QWORD *)(v0 + 88));
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(1);
  }
  if (v11 < 0)
    v19 = v11;
  else
    v19 = v11 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v11);
  v13 = _CocoaArrayWrapper.endIndex.getter(v19);
  result = swift_bridgeObjectRelease(v11);
  *(_QWORD *)(v0 + 128) = v13;
  if (!v13)
    goto LABEL_14;
LABEL_3:
  if (v13 < 1)
  {
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain(v11);
    for (i = 0; i != v13; ++i)
    {
      if ((v11 & 0xC000000000000001) != 0)
      {
        v15 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v11);
      }
      else
      {
        v15 = *(_QWORD *)(v11 + 8 * i + 32);
        swift_retain(v15);
      }
      sub_100022848(v15);
      swift_release(v15);
    }
    swift_bridgeObjectRelease(v11);
    v18 = (_QWORD *)swift_task_alloc(dword_100070FD4);
    *(_QWORD *)(v0 + 136) = v18;
    *v18 = v0;
    v18[1] = sub_1000222F4;
    return sub_1000303AC();
  }
  return result;
}

uint64_t sub_1000222F4(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_BYTE *)(*(_QWORD *)v1 + 144) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100022350, 0, 0);
}

uint64_t sub_100022350()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t);
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;

  v1 = *(_QWORD *)(v0 + 112);
  if ((*(_BYTE *)(v0 + 144) & 1) == 0)
  {
    swift_bridgeObjectRelease(v1);
LABEL_25:
    v37 = 0;
LABEL_26:
    v38 = *(_QWORD *)(v0 + 80);
    v39 = *(_QWORD *)(v0 + 56);
    swift_task_dealloc(*(_QWORD *)(v0 + 88));
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v37);
  }
  swift_bridgeObjectRetain(v1);
  v2 = 0;
  do
  {
    v5 = *(_QWORD *)(v0 + 112);
    if ((v5 & 0xC000000000000001) != 0)
    {
      v3 = specialized _ArrayBuffer._getElementSlowPath(_:)(v2, v5);
    }
    else
    {
      v3 = *(_QWORD *)(v5 + 8 * v2 + 32);
      swift_retain(v3);
    }
    v4 = *(_QWORD *)(v0 + 128);
    ++v2;
    dispatch thunk of ModelContext.delete<A>(_:)(v3, *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
    swift_release(v3);
  }
  while (v2 != v4);
  v7 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 88);
  swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 112), 2);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  v42 = *(_QWORD *)(v0 + 120);
  v8 = *(_QWORD *)(v0 + 64);
  v9 = *(_QWORD *)(v0 + 56);
  v10 = *(_QWORD *)(v0 + 40);
  v11 = sub_100005690(&qword_100070830);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v0 + 80) = v13;
  v14 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 88) = v14;
  *(_QWORD *)(v14 + 16) = v10;
  v15 = type metadata accessor for AnalyticsSchemaV2.FileAnalytics(0);
  *(_QWORD *)(v0 + 96) = v15;
  *(_QWORD *)(v0 + 16) = v15;
  Predicate.init(_:)(sub_100026674, v14, 1, v0 + 16);
  v16 = sub_100005690(&qword_100070838);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v9, 0, 1, v16);
  v17 = sub_100005A54(&qword_10006FFD0, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AFD8);
  *(_QWORD *)(v0 + 104) = v17;
  FetchDescriptor.init(predicate:sortBy:)(v9, &_swiftEmptyArrayStorage, v15, v17);
  FetchDescriptor.fetchLimit.setter(v8, 0, v11);
  v18 = dispatch thunk of ModelContext.fetch<A>(_:)(v13, v15, v17);
  *(_QWORD *)(v0 + 112) = v18;
  *(_QWORD *)(v0 + 120) = v42;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v13, v11);
  if (v42)
  {
    if (qword_10006E5C0 != -1)
      swift_once(&qword_10006E5C0, sub_10001AB28);
    v20 = type metadata accessor for Logger(0);
    sub_100005D1C(v20, (uint64_t)qword_100071AE0);
    swift_errorRetain(v42);
    v21 = swift_errorRetain(v42);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v24 = 138412290;
      swift_errorRetain(v42);
      v26 = _swift_stdlib_bridgeErrorToNSError(v42);
      *(_QWORD *)(v0 + 24) = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32);
      *v25 = v26;
      swift_errorRelease(v42);
      swift_errorRelease(v42);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "fetchFileAnalyticsBatch failed: %@", v24, 0xCu);
      v27 = sub_100005690(&qword_10006FFB8);
      swift_arrayDestroy(v25, 1, v27);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);
    }
    else
    {
      swift_errorRelease(v42);
      swift_errorRelease(v42);
    }
    v31 = *(_QWORD *)(v0 + 48);

    v32 = *(_QWORD *)(*(_QWORD *)(v31 + 120) + 80);
    v33 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 136);
    v34 = swift_retain(v32);
    v35 = (unint64_t *)v33(v34);
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
    swift_errorRelease(v42);
    swift_release(v32);
    goto LABEL_25;
  }
  if (!((unint64_t)v18 >> 62))
  {
    v28 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
    *(_QWORD *)(v0 + 128) = v28;
    if (v28)
      goto LABEL_15;
LABEL_32:
    swift_bridgeObjectRelease(v18);
    v37 = 1;
    goto LABEL_26;
  }
  if (v18 < 0)
    v41 = v18;
  else
    v41 = v18 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v18);
  v28 = _CocoaArrayWrapper.endIndex.getter(v41);
  result = swift_bridgeObjectRelease(v18);
  *(_QWORD *)(v0 + 128) = v28;
  if (!v28)
    goto LABEL_32;
LABEL_15:
  if (v28 < 1)
  {
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain(v18);
    for (i = 0; i != v28; ++i)
    {
      if ((v18 & 0xC000000000000001) != 0)
      {
        v30 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v18);
      }
      else
      {
        v30 = *(_QWORD *)(v18 + 8 * i + 32);
        swift_retain(v30);
      }
      sub_100022848(v30);
      swift_release(v30);
    }
    swift_bridgeObjectRelease(v18);
    v40 = (_QWORD *)swift_task_alloc(dword_100070FD4);
    *(_QWORD *)(v0 + 136) = v40;
    *v40 = v0;
    v40[1] = sub_1000222F4;
    return sub_1000303AC();
  }
  return result;
}

void sub_100022848(uint64_t a1)
{
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  const char *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  void *v32;
  uint64_t v33;
  void *object;
  uint64_t countAndFlagsBits;
  _OWORD v36[5];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  Swift::String v41[5];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  v41[0]._countAndFlagsBits = a1;
  KeyPath = swift_getKeyPath(&unk_10004C7D8);
  v3 = sub_100005A54(&qword_10006FF00, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AF1C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v41, KeyPath, v3);
  swift_release(KeyPath);
  v4 = swift_getKeyPath(&unk_10004C7D8);
  v5 = sub_100005A54(&qword_10006FFD0, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AFD8);
  PersistentModel.getValue<A>(forKey:)(v41, v4, v5, &protocol witness table for String);
  swift_release(v4);
  v6 = sub_100046E90(v41[0]);
  if (v6 == 5)
  {
    if (qword_10006E5C0 != -1)
      swift_once(&qword_10006E5C0, sub_10001AB28);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_100005D1C(v7, (uint64_t)qword_100071AE0);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v9, v10))
      goto LABEL_12;
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    v12 = "invalid access mode in FileAnalytics record";
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v9, v10, v12, v11, 2u);
    swift_slowDealloc(v11, -1, -1);
LABEL_12:

    return;
  }
  v13 = v6;
  v41[0]._countAndFlagsBits = a1;
  v14 = swift_getKeyPath(&unk_10004C800);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v41, v14, v3);
  swift_release(v14);
  v15 = swift_getKeyPath(&unk_10004C800);
  PersistentModel.getValue<A>(forKey:)(v41, v15, v5, &protocol witness table for String);
  swift_release(v15);
  v16 = sub_100046ED8(v41[0]._countAndFlagsBits, (uint64_t)v41[0]._object);
  if (v16 == 19)
  {
    if (qword_10006E5C0 != -1)
      swift_once(&qword_10006E5C0, sub_10001AB28);
    v17 = type metadata accessor for Logger(0);
    v18 = sub_100005D1C(v17, (uint64_t)qword_100071AE0);
    v9 = Logger.logObject.getter(v18);
    v10 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v9, v10))
      goto LABEL_12;
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    v12 = "invalid access category in FileAnalytics record";
    goto LABEL_11;
  }
  v19 = v16;
  v41[0]._countAndFlagsBits = a1;
  v20 = swift_getKeyPath(&unk_10004C828);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v41, v20, v3);
  swift_release(v20);
  v21 = swift_getKeyPath(&unk_10004C828);
  PersistentModel.getValue<A>(forKey:)(v41, v21, v5, &protocol witness table for String);
  swift_release(v21);
  object = v41[0]._object;
  countAndFlagsBits = v41[0]._countAndFlagsBits;
  v41[0]._countAndFlagsBits = a1;
  v22 = swift_getKeyPath(&unk_10004C850);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v41, v22, v3);
  swift_release(v22);
  v23 = swift_getKeyPath(&unk_10004C850);
  PersistentModel.getValue<A>(forKey:)(v41, v23, v5, &protocol witness table for String);
  swift_release(v23);
  v32 = v41[0]._object;
  v33 = v41[0]._countAndFlagsBits;
  v41[0]._countAndFlagsBits = a1;
  v24 = swift_getKeyPath(&unk_10004C878);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v41, v24, v3);
  swift_release(v24);
  v25 = swift_getKeyPath(&unk_10004C878);
  PersistentModel.getValue<A>(forKey:)(v41, v25, v5, &protocol witness table for UInt32);
  swift_release(v25);
  v31 = v41[0]._countAndFlagsBits;
  v41[0]._countAndFlagsBits = a1;
  v26 = swift_getKeyPath(&unk_10004C8A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v41, v26, v3);
  swift_release(v26);
  v27 = swift_getKeyPath(&unk_10004C8A0);
  PersistentModel.getValue<A>(forKey:)(v41, v27, v5, &protocol witness table for UInt32);
  swift_release(v27);
  LODWORD(v26) = v41[0]._countAndFlagsBits;
  v41[0]._countAndFlagsBits = a1;
  v28 = swift_getKeyPath(&unk_10004C8C8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v41, v28, v3);
  swift_release(v28);
  v29 = swift_getKeyPath(&unk_10004C8C8);
  PersistentModel.getValue<A>(forKey:)(v41, v29, v5, &protocol witness table for UInt64);
  swift_release(v29);
  v30 = v41[0]._countAndFlagsBits;
  sub_10001FBB8(1701603654, 0xE400000000000000, (uint64_t)v41);
  v36[0] = v41[0];
  v36[1] = v41[1];
  v36[2] = v41[2];
  v36[3] = v41[3];
  v36[4] = v41[4];
  *(_QWORD *)&v37 = v42;
  *((_QWORD *)&v37 + 1) = countAndFlagsBits;
  *(_QWORD *)&v38 = object;
  *((_QWORD *)&v38 + 1) = v33;
  *(_QWORD *)&v39 = v32;
  BYTE8(v39) = v13;
  BYTE9(v39) = v19;
  HIDWORD(v39) = v31;
  LODWORD(v40) = v26;
  *((_QWORD *)&v40 + 1) = v30;
  v44 = v39;
  v45 = v40;
  v42 = v37;
  v43 = v38;
  sub_100032804((uint64_t)v41);
  sub_1000265EC(v36);
}

uint64_t sub_100022DB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  BOOL v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char v53[8];

  v6 = sub_100005690(&qword_100070038);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v50 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v1 + 16);
  v13 = *(_BYTE *)(v1 + 24);
  if ((v13 & 1) == 0 && (*(_BYTE *)(v1 + 40) & 1) == 0)
  {
    v14 = *(_QWORD *)(v1 + 32);
    v15 = __OFADD__(v12, v14);
    v12 += v14;
    if (v15)
    {
      __break(1u);
LABEL_36:
      swift_once(&qword_10006E5C0, sub_10001AB28);
      goto LABEL_17;
    }
  }
  v49 = v12;
  v52 = a1;
  KeyPath = swift_getKeyPath(&unk_10004C788);
  v51 = v10;
  v17 = KeyPath;
  v18 = sub_100005A54(&qword_10006FEE0, type metadata accessor for AnalyticsSchemaV2.PipelineState, (uint64_t)&unk_10004AE00);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v52, v17, v18);
  swift_release(v17);
  v19 = swift_getKeyPath(&unk_10004C788);
  v4 = v9;
  v20 = sub_100005A54(&qword_10006FFD8, type metadata accessor for AnalyticsSchemaV2.PipelineState, (uint64_t)&unk_10004AEBC);
  v21 = sub_1000264D4();
  PersistentModel.getValue<A>(forKey:)(v8, v19, v20, v21);
  v22 = v19;
  v3 = v51;
  swift_release(v22);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v9) == 1)
  {
    sub_100017FAC((uint64_t)v8);
    return 0;
  }
  v9 = (uint64_t)v50;
  v23 = (*(uint64_t (**)(char *, _QWORD *, uint64_t))(v3 + 32))(v50, v8, v4);
  v24 = round(Date.timeIntervalSinceNow.getter(v23));
  if (v24 <= -9.22337204e18 || v24 >= 9.22337204e18)
  {
    v52 = a1;
    v26 = swift_getKeyPath(&unk_10004C7B0);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v52, v26, v18);
    swift_release(v26);
    v27 = swift_getKeyPath(&unk_10004C7B0);
    v28 = sub_100026558();
    PersistentModel.getValue<A>(forKey:)(&v52, v27, v20, v28);
    swift_release(v27);
    if ((v53[0] & 1) != 0)
    {
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v9, v4);
      return 0;
    }
    v36 = v51;
    if (qword_10006E5C0 != -1)
      swift_once(&qword_10006E5C0, sub_10001AB28);
    v37 = type metadata accessor for Logger(0);
    v38 = sub_100005D1C(v37, (uint64_t)qword_100071AE0);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "invalid report time from database", v41, 2u);
      swift_slowDealloc(v41, -1, -1);
    }

    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v9, v4);
    return 0;
  }
  v2 = (uint64_t)v24;
  if (v49 >= (uint64_t)v24)
    v29 = 1;
  else
    v29 = v13;
  if ((v29 & 1) == 0)
  {
    if (qword_10006E5C0 != -1)
      swift_once(&qword_10006E5C0, sub_10001AB28);
    v42 = type metadata accessor for Logger(0);
    v43 = sub_100005D1C(v42, (uint64_t)qword_100071AE0);
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v44, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "discarding report time from database (too large)", v46, 2u);
      swift_slowDealloc(v46, -1, -1);
    }

    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v9, v4);
    return 0;
  }
  if (qword_10006E5C0 != -1)
    goto LABEL_36;
LABEL_17:
  v30 = type metadata accessor for Logger(0);
  v31 = sub_100005D1C(v30, (uint64_t)qword_100071AE0);
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v34 = 134217984;
    v52 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "first report time from database: %ld", v34, 0xCu);
    swift_slowDealloc(v34, -1, -1);
  }

  if (v2 <= 0)
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v9, v4);
    return 0;
  }
  v35 = 1000000000000000000 * v2;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v9, v4);
  return v35;
}

uint64_t sub_1000232EC(char a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  if ((*(_BYTE *)(v1 + 24) & 1) != 0)
    return 0;
  if ((a1 & 1) != 0 && (*(_BYTE *)(v1 + 56) & 1) == 0)
  {
    v3 = sub_100026468(*(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 64), *(_BYTE *)(v1 + 72));
    if (qword_10006E5C0 != -1)
      swift_once(&qword_10006E5C0, sub_10001AB28);
    v10 = type metadata accessor for Logger(0);
    v11 = sub_100005D1C(v10, (uint64_t)qword_100071AE0);
    v6 = Logger.logObject.getter(v11);
    v7 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v6, v7))
      goto LABEL_14;
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v8 = 134217984;
    v12 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13);
    v9 = "next report retry in %ld seconds";
  }
  else
  {
    v3 = sub_100026468(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40));
    if (qword_10006E5C0 != -1)
      swift_once(&qword_10006E5C0, sub_10001AB28);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_100005D1C(v4, (uint64_t)qword_100071AE0);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v6, v7))
      goto LABEL_14;
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v8 = 134217984;
    v12 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13);
    v9 = "next report in %ld seconds";
  }
  _os_log_impl((void *)&_mh_execute_header, v6, v7, v9, v8, 0xCu);
  swift_slowDealloc(v8, -1, -1);
LABEL_14:

  return 1000000000000000000 * v3;
}

uint64_t sub_100023518()
{
  _QWORD *v0;

  swift_release(v0[15]);
  swift_release(v0[16]);
  swift_release(v0[17]);
  swift_release(v0[18]);
  return swift_deallocClassInstance(v0, 152, 7);
}

uint64_t type metadata accessor for AnalyticsReporter()
{
  return objc_opt_self(_TtC14applekeystored17AnalyticsReporter);
}

__n128 initializeWithCopy for AnalyticsReporterConfig(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for AnalyticsReporterConfig(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 104))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 80);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AnalyticsReporterConfig(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 104) = 0;
    if (a2)
      *(_BYTE *)(result + 80) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsReporterConfig()
{
  return &type metadata for AnalyticsReporterConfig;
}

uint64_t sub_100023660(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;

  if (a1 == 0xD000000000000015 && a2 == 0x80000001000517F0)
  {
    v4 = 0x80000001000517F0;
LABEL_6:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x80000001000517F0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
    goto LABEL_6;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x8000000100051810)
  {
    v6 = 0x8000000100051810;
LABEL_12:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100051810, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_12;
  }
  if (a1 == 0xD000000000000012)
  {
    v7 = 0x8000000100051830;
    if (a2 == 0x8000000100051830)
      goto LABEL_17;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100051830, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x8000000100051850)
  {
    v8 = 0x8000000100051850;
LABEL_23:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100051850, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_23;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x8000000100051870)
  {
    v9 = 0x8000000100051870;
LABEL_29:
    swift_bridgeObjectRelease(v9);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100051870, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_29;
  }
  if (a1 == 0x63746142656C6966 && a2 == 0xED0000657A695368)
  {
    v10 = 0xED0000657A695368;
LABEL_35:
    swift_bridgeObjectRelease(v10);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x63746142656C6966, 0xED0000657A695368, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_35;
  }
  if (a1 == 0x726F706552676F6CLL && a2 == 0xEA00000000007374)
  {
    v11 = 0xEA00000000007374;
LABEL_41:
    swift_bridgeObjectRelease(v11);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F706552676F6CLL, 0xEA00000000007374, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_41;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x8000000100051890)
  {
    swift_bridgeObjectRelease(0x8000000100051890);
    return 7;
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100051890, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

uint64_t sub_1000239A0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char v34[8];
  uint64_t v35;
  int v36;
  char v37;

  v5 = sub_100005690(&qword_100070800);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100005E2C(a1, v9);
  v11 = sub_10002639C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AnalyticsReporterConfig.CodingKeys, &type metadata for AnalyticsReporterConfig.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_100005D78(a1);
  v34[0] = 0;
  v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v34, v5);
  v14 = v13;
  v34[0] = 1;
  v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v34, v5);
  v36 = v16;
  v33 = v15;
  v34[0] = 2;
  v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v34, v5);
  v31 = v18;
  v32 = v17;
  v34[0] = 3;
  v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v34, v5);
  v29 = v20;
  v30 = v19;
  v34[0] = 4;
  v28 = KeyedDecodingContainer.decode(_:forKey:)(v34, v5);
  v34[0] = 5;
  v27 = KeyedDecodingContainer.decode(_:forKey:)(v34, v5);
  v34[0] = 6;
  HIDWORD(v26) = KeyedDecodingContainer.decode(_:forKey:)(v34, v5);
  v37 = 7;
  v21 = sub_1000263E0();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for SplunkLoggerConfig, &v37, v5, &type metadata for SplunkLoggerConfig, v21);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v22 = v34[0];
  v23 = v35;
  result = sub_100005D78(a1);
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = v14 & 1;
  *(_QWORD *)(a2 + 16) = v33;
  *(_BYTE *)(a2 + 24) = v36 & 1;
  *(_QWORD *)(a2 + 32) = v32;
  *(_BYTE *)(a2 + 40) = v31 & 1;
  *(_QWORD *)(a2 + 48) = v30;
  *(_BYTE *)(a2 + 56) = v29 & 1;
  v25 = v27;
  *(_QWORD *)(a2 + 64) = v28;
  *(_QWORD *)(a2 + 72) = v25;
  *(_BYTE *)(a2 + 80) = BYTE4(v26) & 1;
  *(_BYTE *)(a2 + 88) = v22;
  *(_QWORD *)(a2 + 96) = v23;
  return result;
}

uint64_t sub_100023C74(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;

  if (a1 == 1701669236 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701669236, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6C65646F4D7768 && a2 == 0xE700000000000000)
  {
    v7 = 0xE700000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C65646F4D7768, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x754E6C6169726573 && a2 == 0xEC0000007265626DLL)
  {
    v8 = 0xEC0000007265626DLL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x754E6C6169726573, 0xEC0000007265626DLL, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x4449656369766564 && a2 == 0xE800000000000000)
  {
    v9 = 0xE800000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4449656369766564, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x726556646C697562 && a2 == 0xEC0000006E6F6973)
  {
    v10 = 0xEC0000006E6F6973;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726556646C697562, 0xEC0000006E6F6973, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x795474726F706572 && a2 == 0xEA00000000006570)
  {
    v11 = 0xEA00000000006570;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x795474726F706572, 0xEA00000000006570, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_38;
  }
  if (a1 == 0x737365636F7270 && a2 == 0xE700000000000000)
  {
    v12 = 0xE700000000000000;
LABEL_44:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x737365636F7270, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_44;
  }
  if (a1 == 1701080941 && a2 == 0xE400000000000000)
  {
    v13 = 0xE400000000000000;
LABEL_50:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701080941, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_50;
  }
  if (a1 == 0x79726F6765746163 && a2 == 0xE800000000000000)
  {
    v14 = 0xE800000000000000;
LABEL_56:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x79726F6765746163, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_56;
  }
  if (a1 == 0x746E756F63 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 9;
  }
  else
  {
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746E756F63, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v15 & 1) != 0)
      return 9;
    else
      return 10;
  }
}

uint64_t sub_100024098@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  _BYTE v60[2];
  _BYTE v61[10];
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;

  v5 = sub_100005690(&qword_1000708C0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100005E2C(a1, v9);
  v11 = sub_100027A4C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ProcessAnalyticsReport.CodingKeys, &type metadata for ProcessAnalyticsReport.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_100005D78(a1);
  v68 = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v68, v5);
  v67 = 1;
  v54 = KeyedDecodingContainer.decode(_:forKey:)(&v67, v5);
  v66 = 2;
  v14 = v13;
  swift_bridgeObjectRetain(v13);
  v15 = KeyedDecodingContainer.decode(_:forKey:)(&v66, v5);
  v58 = v14;
  v53 = v15;
  v65 = 3;
  v17 = v16;
  swift_bridgeObjectRetain(v16);
  v18 = KeyedDecodingContainer.decode(_:forKey:)(&v65, v5);
  v57 = v17;
  v52 = v18;
  v64 = 4;
  v20 = v19;
  swift_bridgeObjectRetain(v19);
  v21 = KeyedDecodingContainer.decode(_:forKey:)(&v64, v5);
  v56 = v20;
  v51 = v21;
  v63 = 5;
  v55 = v22;
  swift_bridgeObjectRetain(v22);
  v49 = KeyedDecodingContainer.decode(_:forKey:)(&v63, v5);
  v50 = v23;
  v62 = 6;
  swift_bridgeObjectRetain(v23);
  v47 = KeyedDecodingContainer.decode(_:forKey:)(&v62, v5);
  v24 = v50;
  v61[0] = 7;
  v26 = v25;
  v27 = sub_10001A5B0();
  v48 = v26;
  swift_bridgeObjectRetain(v26);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for AccessMode, v61, v5, &type metadata for AccessMode, v27);
  v46 = v12;
  v28 = v48;
  v45 = v61[9];
  v60[0] = 8;
  v29 = sub_10001A7B0();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for AccessCategory, v60, v5, &type metadata for AccessCategory, v29);
  v44 = v60[1];
  v59 = 9;
  v30 = KeyedDecodingContainer.decode(_:forKey:)(&v59, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_100005D78(a1);
  swift_bridgeObjectRelease(v28);
  v31 = v24;
  swift_bridgeObjectRelease(v24);
  v32 = v55;
  swift_bridgeObjectRelease(v55);
  v33 = v56;
  swift_bridgeObjectRelease(v56);
  v34 = v57;
  swift_bridgeObjectRelease(v57);
  v35 = v58;
  result = swift_bridgeObjectRelease(v58);
  v37 = v54;
  *(_QWORD *)a2 = v46;
  *(_QWORD *)(a2 + 8) = v37;
  v38 = v53;
  *(_QWORD *)(a2 + 16) = v35;
  *(_QWORD *)(a2 + 24) = v38;
  v39 = v52;
  *(_QWORD *)(a2 + 32) = v34;
  *(_QWORD *)(a2 + 40) = v39;
  v40 = v51;
  *(_QWORD *)(a2 + 48) = v33;
  *(_QWORD *)(a2 + 56) = v40;
  v41 = v49;
  *(_QWORD *)(a2 + 64) = v32;
  *(_QWORD *)(a2 + 72) = v41;
  v42 = v47;
  *(_QWORD *)(a2 + 80) = v31;
  *(_QWORD *)(a2 + 88) = v42;
  *(_QWORD *)(a2 + 96) = v28;
  *(_BYTE *)(a2 + 104) = v45;
  *(_BYTE *)(a2 + 105) = v44;
  *(_QWORD *)(a2 + 112) = v30;
  return result;
}

uint64_t sub_1000246D8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;

  if (a1 == 1701669236 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701669236, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6C65646F4D7768 && a2 == 0xE700000000000000)
  {
    v7 = 0xE700000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C65646F4D7768, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x754E6C6169726573 && a2 == 0xEC0000007265626DLL)
  {
    v8 = 0xEC0000007265626DLL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x754E6C6169726573, 0xEC0000007265626DLL, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x4449656369766564 && a2 == 0xE800000000000000)
  {
    v9 = 0xE800000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4449656369766564, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x726556646C697562 && a2 == 0xEC0000006E6F6973)
  {
    v10 = 0xEC0000006E6F6973;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726556646C697562, 0xEC0000006E6F6973, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x795474726F706572 && a2 == 0xEA00000000006570)
  {
    v11 = 0xEA00000000006570;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x795474726F706572, 0xEA00000000006570, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_38;
  }
  if (a1 == 0x737365636F7270 && a2 == 0xE700000000000000)
  {
    v12 = 0xE700000000000000;
LABEL_44:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x737365636F7270, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_44;
  }
  if (a1 == 1752457584 && a2 == 0xE400000000000000)
  {
    v13 = 0xE400000000000000;
LABEL_50:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1752457584, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_50;
  }
  if (a1 == 1701080941 && a2 == 0xE400000000000000)
  {
    v14 = 0xE400000000000000;
LABEL_56:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701080941, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_56;
  }
  if (a1 == 0x79726F6765746163 && a2 == 0xE800000000000000)
  {
    v15 = 0xE800000000000000;
LABEL_62:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x79726F6765746163, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_62;
  }
  if (a1 == 0xD000000000000011)
  {
    v16 = 0x8000000100051430;
    if (a2 == 0x8000000100051430)
      goto LABEL_67;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100051430, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
LABEL_67:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if (a1 == 0x745367616279656BLL && a2 == 0xEB00000000657461)
  {
    v17 = 0xEB00000000657461;
LABEL_73:
    swift_bridgeObjectRelease(v17);
    return 11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x745367616279656BLL, 0xEB00000000657461, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
    goto LABEL_73;
  }
  if (a1 == 0x6279654B65726F6DLL && a2 == 0xEF65746174536761)
  {
    swift_bridgeObjectRelease(0xEF65746174536761);
    return 12;
  }
  else
  {
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6279654B65726F6DLL, 0xEF65746174536761, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v18 & 1) != 0)
      return 12;
    else
      return 13;
  }
}

_QWORD *sub_100024C54@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *result;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _QWORD v71[15];
  char v72;
  char v73;
  int v74;
  int v75;
  uint64_t v76;
  int v77;
  char v78;

  v5 = sub_100005690(&qword_1000708A8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  v61 = a1;
  sub_100005E2C(a1, v9);
  v11 = sub_100027980();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for FileAnalyticsReport.CodingKeys, &type metadata for FileAnalyticsReport.CodingKeys, v11, v9, v10);
  if (v2)
    return (_QWORD *)sub_100005D78(v61);
  LOBYTE(v71[0]) = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(v71, v5);
  LOBYTE(v71[0]) = 1;
  v54 = KeyedDecodingContainer.decode(_:forKey:)(v71, v5);
  LOBYTE(v71[0]) = 2;
  v14 = v13;
  swift_bridgeObjectRetain(v13);
  v15 = KeyedDecodingContainer.decode(_:forKey:)(v71, v5);
  v60 = v14;
  v53 = v15;
  LOBYTE(v71[0]) = 3;
  v17 = v16;
  swift_bridgeObjectRetain(v16);
  v18 = KeyedDecodingContainer.decode(_:forKey:)(v71, v5);
  v59 = v17;
  v52 = v18;
  LOBYTE(v71[0]) = 4;
  v20 = v19;
  swift_bridgeObjectRetain(v19);
  v21 = KeyedDecodingContainer.decode(_:forKey:)(v71, v5);
  v58 = v20;
  v51 = v21;
  LOBYTE(v71[0]) = 5;
  v23 = v22;
  swift_bridgeObjectRetain(v22);
  v24 = KeyedDecodingContainer.decode(_:forKey:)(v71, v5);
  v57 = v23;
  v50 = v24;
  LOBYTE(v71[0]) = 6;
  v56 = v25;
  swift_bridgeObjectRetain(v25);
  v49 = KeyedDecodingContainer.decode(_:forKey:)(v71, v5);
  LOBYTE(v71[0]) = 7;
  v55 = v26;
  swift_bridgeObjectRetain(v26);
  v48 = KeyedDecodingContainer.decode(_:forKey:)(v71, v5);
  LOBYTE(v62) = 8;
  v28 = v27;
  v29 = sub_10001A5B0();
  swift_bridgeObjectRetain(v28);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for AccessMode, &v62, v5, &type metadata for AccessMode, v29);
  v77 = LOBYTE(v71[0]);
  LOBYTE(v62) = 9;
  v30 = sub_10001A7B0();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for AccessCategory, &v62, v5, &type metadata for AccessCategory, v30);
  v47 = LOBYTE(v71[0]);
  LOBYTE(v71[0]) = 10;
  v46 = KeyedDecodingContainer.decode(_:forKey:)(v71, v5);
  LOBYTE(v71[0]) = 11;
  v45 = KeyedDecodingContainer.decode(_:forKey:)(v71, v5);
  v78 = 12;
  v31 = KeyedDecodingContainer.decode(_:forKey:)(&v78, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(_QWORD *)&v62 = v12;
  *((_QWORD *)&v62 + 1) = v54;
  v33 = v59;
  v32 = v60;
  *(_QWORD *)&v63 = v60;
  *((_QWORD *)&v63 + 1) = v53;
  *(_QWORD *)&v64 = v59;
  *((_QWORD *)&v64 + 1) = v52;
  *(_QWORD *)&v65 = v58;
  *((_QWORD *)&v65 + 1) = v51;
  *(_QWORD *)&v66 = v57;
  *((_QWORD *)&v66 + 1) = v50;
  *(_QWORD *)&v67 = v56;
  *((_QWORD *)&v67 + 1) = v49;
  *(_QWORD *)&v68 = v55;
  *((_QWORD *)&v68 + 1) = v48;
  v34 = v28;
  *(_QWORD *)&v69 = v28;
  BYTE8(v69) = v77;
  BYTE9(v69) = v47;
  HIDWORD(v69) = v46;
  LODWORD(v70) = v45;
  v44 = v31;
  *((_QWORD *)&v70 + 1) = v31;
  sub_1000279C4(&v62);
  swift_bridgeObjectRelease(v32);
  swift_bridgeObjectRelease(v33);
  v35 = v58;
  swift_bridgeObjectRelease(v58);
  v36 = v57;
  swift_bridgeObjectRelease(v57);
  v37 = v56;
  swift_bridgeObjectRelease(v56);
  v38 = v55;
  swift_bridgeObjectRelease(v55);
  swift_bridgeObjectRelease(v34);
  sub_100005D78(v61);
  v71[0] = v12;
  v71[1] = v54;
  v71[2] = v60;
  v71[3] = v53;
  v71[4] = v59;
  v71[5] = v52;
  v71[6] = v35;
  v71[7] = v51;
  v71[8] = v36;
  v71[9] = v50;
  v71[10] = v37;
  v71[11] = v49;
  v71[12] = v38;
  v71[13] = v48;
  v71[14] = v34;
  v72 = v77;
  v73 = v47;
  v74 = v46;
  v75 = v45;
  v76 = v44;
  result = sub_1000265EC(v71);
  v40 = v69;
  a2[6] = v68;
  a2[7] = v40;
  a2[8] = v70;
  v41 = v65;
  a2[2] = v64;
  a2[3] = v41;
  v42 = v67;
  a2[4] = v66;
  a2[5] = v42;
  v43 = v63;
  *a2 = v62;
  a2[1] = v43;
  return result;
}

char *sub_100025434@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *result;
  __int128 v37;
  _OWORD *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _OWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _QWORD v66[16];
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  char v70;

  v5 = sub_100005690(&qword_100070858);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  v57 = a1;
  sub_100005E2C(a1, v9);
  v11 = sub_100027718();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for KernelCounterReport.CodingKeys, &type metadata for KernelCounterReport.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_100005D78(v57);
    return v8;
  }
  else
  {
    v12 = v6;
    v55 = a2;
    LOBYTE(v66[0]) = 0;
    v13 = KeyedDecodingContainer.decode(_:forKey:)(v66, v5);
    LOBYTE(v66[0]) = 1;
    v54 = KeyedDecodingContainer.decode(_:forKey:)(v66, v5);
    LOBYTE(v66[0]) = 2;
    v15 = v14;
    swift_bridgeObjectRetain(v14);
    v16 = KeyedDecodingContainer.decode(_:forKey:)(v66, v5);
    v52 = v13;
    v53 = v16;
    v17 = v15;
    LOBYTE(v66[0]) = 3;
    v19 = v18;
    swift_bridgeObjectRetain(v18);
    v20 = KeyedDecodingContainer.decode(_:forKey:)(v66, v5);
    v56 = v19;
    v21 = v20;
    LOBYTE(v66[0]) = 4;
    v23 = v22;
    swift_bridgeObjectRetain(v22);
    v49 = KeyedDecodingContainer.decode(_:forKey:)(v66, v5);
    v50 = v21;
    v24 = v23;
    LOBYTE(v66[0]) = 5;
    v51 = v25;
    swift_bridgeObjectRetain(v25);
    v26 = KeyedDecodingContainer.decode(_:forKey:)(v66, v5);
    v28 = v27;
    v47 = v26;
    v70 = 6;
    v29 = sub_10002775C();
    v48 = v28;
    swift_bridgeObjectRetain(v28);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for KernelCounters, &v70, v5, &type metadata for KernelCounters, v29);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v8, v5);
    v45 = v68;
    v46 = v67;
    v43 = v69;
    v44 = *((_QWORD *)&v68 + 1);
    v42 = *((_QWORD *)&v69 + 1);
    v31 = v51;
    v30 = v52;
    *(_QWORD *)&v58 = v52;
    *((_QWORD *)&v58 + 1) = v54;
    v32 = v17;
    *(_QWORD *)&v59 = v17;
    v33 = v53;
    v34 = v56;
    *((_QWORD *)&v59 + 1) = v53;
    *(_QWORD *)&v60 = v56;
    *((_QWORD *)&v60 + 1) = v50;
    *(_QWORD *)&v61 = v24;
    v35 = v48;
    *((_QWORD *)&v61 + 1) = v49;
    *(_QWORD *)&v62 = v51;
    *((_QWORD *)&v62 + 1) = v47;
    *(_QWORD *)&v63 = v48;
    *((_QWORD *)&v63 + 1) = v67;
    v64 = v68;
    v65 = v69;
    sub_10002786C(&v58);
    swift_bridgeObjectRelease(v32);
    swift_bridgeObjectRelease(v34);
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease(v31);
    swift_bridgeObjectRelease(v35);
    sub_100005D78(v57);
    v66[0] = v30;
    v66[1] = v54;
    v66[2] = v32;
    v66[3] = v33;
    v66[4] = v34;
    v66[5] = v50;
    v66[6] = v24;
    v66[7] = v49;
    v66[8] = v31;
    v66[9] = v47;
    v66[10] = v35;
    v66[11] = v46;
    v66[12] = v45;
    v66[13] = v44;
    v66[14] = v43;
    v66[15] = v42;
    result = (char *)sub_1000278D4(v66);
    v37 = v63;
    v38 = v55;
    v55[4] = v62;
    v38[5] = v37;
    v39 = v65;
    v38[6] = v64;
    v38[7] = v39;
    v40 = v59;
    *v38 = v58;
    v38[1] = v40;
    v41 = v61;
    v38[2] = v60;
    v38[3] = v41;
  }
  return result;
}

uint64_t sub_10002595C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;

  if (a1 == 1701669236 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701669236, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6C65646F4D7768 && a2 == 0xE700000000000000)
  {
    v7 = 0xE700000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C65646F4D7768, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x754E6C6169726573 && a2 == 0xEC0000007265626DLL)
  {
    v8 = 0xEC0000007265626DLL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x754E6C6169726573, 0xEC0000007265626DLL, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x4449656369766564 && a2 == 0xE800000000000000)
  {
    v9 = 0xE800000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4449656369766564, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x726556646C697562 && a2 == 0xEC0000006E6F6973)
  {
    v10 = 0xEC0000006E6F6973;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726556646C697562, 0xEC0000006E6F6973, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x795474726F706572 && a2 == 0xEA00000000006570)
  {
    v11 = 0xEA00000000006570;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x795474726F706572, 0xEA00000000006570, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_38;
  }
  if (a1 == 0x737265746E756F63 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 6;
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0x737265746E756F63, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

char *sub_100025C6C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *result;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  _QWORD v76[23];
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  char v84;

  v5 = sub_100005690(&qword_100070880);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  v63 = a1;
  sub_100005E2C(a1, v9);
  v11 = sub_1000277E4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for EventCounterReport.CodingKeys, &type metadata for EventCounterReport.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_100005D78(v63);
    return v8;
  }
  else
  {
    v12 = v6;
    v61 = a2;
    LOBYTE(v76[0]) = 0;
    v13 = KeyedDecodingContainer.decode(_:forKey:)(v76, v5);
    LOBYTE(v76[0]) = 1;
    v14 = KeyedDecodingContainer.decode(_:forKey:)(v76, v5);
    LOBYTE(v76[0]) = 2;
    v16 = v15;
    swift_bridgeObjectRetain(v15);
    v17 = KeyedDecodingContainer.decode(_:forKey:)(v76, v5);
    v59 = v13;
    v60 = v17;
    LOBYTE(v76[0]) = 3;
    v19 = v18;
    swift_bridgeObjectRetain(v18);
    v20 = KeyedDecodingContainer.decode(_:forKey:)(v76, v5);
    v62 = v19;
    v57 = v20;
    v58 = v21;
    LOBYTE(v76[0]) = 4;
    swift_bridgeObjectRetain(v21);
    v55 = KeyedDecodingContainer.decode(_:forKey:)(v76, v5);
    v56 = v22;
    v23 = v58;
    LOBYTE(v76[0]) = 5;
    swift_bridgeObjectRetain(v22);
    v24 = KeyedDecodingContainer.decode(_:forKey:)(v76, v5);
    v26 = v25;
    v53 = v24;
    v84 = 6;
    v27 = sub_100027828();
    v54 = v26;
    swift_bridgeObjectRetain(v26);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for AnalyticsManagerCounters.Snapshot, &v84, v5, &type metadata for AnalyticsManagerCounters.Snapshot, v27);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v8, v5);
    v51 = v78;
    v52 = v77;
    v49 = v79;
    v50 = *((_QWORD *)&v78 + 1);
    v47 = v80;
    v48 = *((_QWORD *)&v79 + 1);
    v45 = v81;
    v46 = *((_QWORD *)&v80 + 1);
    v43 = v82;
    v44 = *((_QWORD *)&v81 + 1);
    v41 = v83;
    v42 = *((_QWORD *)&v82 + 1);
    v28 = v59;
    *(_QWORD *)&v64 = v59;
    *((_QWORD *)&v64 + 1) = v14;
    v29 = v16;
    *(_QWORD *)&v65 = v16;
    *((_QWORD *)&v65 + 1) = v60;
    v30 = v62;
    v31 = v56;
    *(_QWORD *)&v66 = v62;
    *((_QWORD *)&v66 + 1) = v57;
    v32 = v23;
    *(_QWORD *)&v67 = v23;
    *((_QWORD *)&v67 + 1) = v55;
    v33 = v54;
    *(_QWORD *)&v68 = v56;
    *((_QWORD *)&v68 + 1) = v53;
    *(_QWORD *)&v69 = v54;
    *((_QWORD *)&v69 + 1) = v77;
    v70 = v78;
    v71 = v79;
    v72 = v80;
    v73 = v81;
    v74 = v82;
    v75 = v83;
    sub_10002786C(&v64);
    swift_bridgeObjectRelease(v29);
    swift_bridgeObjectRelease(v30);
    swift_bridgeObjectRelease(v32);
    swift_bridgeObjectRelease(v31);
    swift_bridgeObjectRelease(v33);
    sub_100005D78(v63);
    v76[0] = v28;
    v76[1] = v14;
    v76[2] = v29;
    v76[3] = v60;
    v76[4] = v30;
    v76[5] = v57;
    v76[6] = v32;
    v76[7] = v55;
    v76[8] = v31;
    v76[9] = v53;
    v76[10] = v33;
    v76[11] = v52;
    v76[12] = v51;
    v76[13] = v50;
    v76[14] = v49;
    v76[15] = v48;
    v76[16] = v47;
    v76[17] = v46;
    v76[18] = v45;
    v76[19] = v44;
    v76[20] = v43;
    v76[21] = v42;
    v76[22] = v41;
    result = (char *)sub_1000278D4(v76);
    v35 = v73;
    v36 = v61;
    *(_OWORD *)(v61 + 128) = v72;
    *(_OWORD *)(v36 + 144) = v35;
    *(_OWORD *)(v36 + 160) = v74;
    *(_QWORD *)(v36 + 176) = v75;
    v37 = v69;
    *(_OWORD *)(v36 + 64) = v68;
    *(_OWORD *)(v36 + 80) = v37;
    v38 = v71;
    *(_OWORD *)(v36 + 96) = v70;
    *(_OWORD *)(v36 + 112) = v38;
    v39 = v65;
    *(_OWORD *)v36 = v64;
    *(_OWORD *)(v36 + 16) = v39;
    v40 = v67;
    *(_OWORD *)(v36 + 32) = v66;
    *(_OWORD *)(v36 + 48) = v40;
  }
  return result;
}

uint64_t sub_100026218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  Swift::Int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v27[24];

  v4 = v3;
  v8 = type metadata accessor for JSONEncoder.OutputFormatting(0);
  __chkstk_darwin(v8);
  v10 = &v27[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v11 = type metadata accessor for MessageEncoder();
  v12 = swift_allocObject(v11, 24, 7);
  v13 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  v14 = ((uint64_t (*)(void))JSONEncoder.init())();
  *(_QWORD *)(v12 + 16) = v14;
  v15 = swift_retain(v14);
  static JSONEncoder.OutputFormatting.sortedKeys.getter(v15);
  dispatch thunk of JSONEncoder.outputFormatting.setter(v10);
  swift_release(v14);
  *(_QWORD *)(v4 + 144) = v12;
  v16 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v4 + 80) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v4 + 96) = v16;
  v17 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v4 + 32) = v17;
  v18 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v4 + 64) = v18;
  v20 = *(_QWORD *)(a1 + 88);
  v19 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(v4 + 112) = v19;
  *(_QWORD *)(v4 + 120) = a3;
  *(_QWORD *)(v4 + 128) = a2;
  v21 = type metadata accessor for SplunkLogger();
  v22 = swift_allocObject(v21, 56, 7);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  swift_retain(a3);
  v23 = swift_retain(a2);
  v24 = JSONEncoder.init()(v23);
  *(_QWORD *)(v22 + 24) = v19;
  *(_QWORD *)(v22 + 32) = v24;
  *(_OWORD *)(v22 + 40) = xmmword_10004D0C0;
  *(_QWORD *)(v22 + 16) = v20;
  swift_beginAccess(v22 + 40, v27, 33, 0);
  Data._Representation.reserveCapacity(_:)(v19);
  swift_endAccess(v27);
  *(_QWORD *)(v4 + 136) = v22;
  return v4;
}

unint64_t sub_10002639C()
{
  unint64_t result;

  result = qword_100070808;
  if (!qword_100070808)
  {
    result = swift_getWitnessTable(&unk_10004CC48, &type metadata for AnalyticsReporterConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100070808);
  }
  return result;
}

unint64_t sub_1000263E0()
{
  unint64_t result;

  result = qword_100070810;
  if (!qword_100070810)
  {
    result = swift_getWitnessTable(&unk_10004D67C, &type metadata for SplunkLoggerConfig);
    atomic_store(result, (unint64_t *)&qword_100070810);
  }
  return result;
}

unint64_t sub_100026424()
{
  unint64_t result;

  result = qword_100070820;
  if (!qword_100070820)
  {
    result = swift_getWitnessTable(&unk_10004D654, &type metadata for SplunkLoggerConfig);
    atomic_store(result, (unint64_t *)&qword_100070820);
  }
  return result;
}

unint64_t sub_100026468(unint64_t result, uint64_t a2, char a3)
{
  unint64_t v3;
  uint64_t v5;
  BOOL v6;

  v3 = result;
  if ((a3 & 1) != 0)
    return v3;
  if (a2 + 0x4000000000000000 < 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (2 * a2 < 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  result = sub_10002DEC8((2 * a2) | 1);
  v5 = result - a2;
  if (__OFSUB__(result, a2))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v6 = __OFADD__(v3, v5);
  v3 += v5;
  if (!v6)
    return v3;
LABEL_10:
  __break(1u);
  return result;
}

unint64_t sub_1000264D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100070058;
  if (!qword_100070058)
  {
    v1 = sub_100005F1C(&qword_100070038);
    sub_100005A54(&qword_100070060, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100070058);
  }
  return result;
}

unint64_t sub_100026558()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100070078;
  if (!qword_100070078)
  {
    v1 = sub_100005F1C(&qword_100070070);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100070078);
  }
  return result;
}

_QWORD *sub_1000265EC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[2];
  v3 = a1[4];
  v4 = a1[6];
  v5 = a1[8];
  v6 = a1[10];
  v7 = a1[12];
  swift_bridgeObjectRelease(a1[14]);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_100026674@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1000156B8(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_10002669C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_10001546C(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t destroy for ProcessAnalyticsReport(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[10]);
  return swift_bridgeObjectRelease(a1[12]);
}

uint64_t initializeWithCopy for ProcessAnalyticsReport(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  v6 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  v8 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v7;
  v10 = *(_QWORD *)(a2 + 64);
  v9 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 72) = v9;
  v12 = *(_QWORD *)(a2 + 80);
  v11 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v12;
  *(_QWORD *)(a1 + 88) = v11;
  v13 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v13;
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  return a1;
}

uint64_t assignWithCopy for ProcessAnalyticsReport(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  v13 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v14 = *(_QWORD *)(a2 + 96);
  v15 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 105);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  return a1;
}

__n128 initializeWithTake for ProcessAnalyticsReport(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for ProcessAnalyticsReport(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v9;
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(a2 + 80);
  v12 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v11;
  swift_bridgeObjectRelease(v12);
  v13 = *(_QWORD *)(a2 + 96);
  v14 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v13;
  swift_bridgeObjectRelease(v14);
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for ProcessAnalyticsReport(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 120))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ProcessAnalyticsReport(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 120) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ProcessAnalyticsReport()
{
  return &type metadata for ProcessAnalyticsReport;
}

uint64_t destroy for FileAnalyticsReport(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[10]);
  swift_bridgeObjectRelease(a1[12]);
  return swift_bridgeObjectRelease(a1[14]);
}

uint64_t initializeWithCopy for FileAnalyticsReport(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  v6 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  v8 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v7;
  v10 = *(_QWORD *)(a2 + 64);
  v9 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 72) = v9;
  v12 = *(_QWORD *)(a2 + 80);
  v11 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v12;
  *(_QWORD *)(a1 + 88) = v11;
  v14 = *(_QWORD *)(a2 + 96);
  v13 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v14;
  *(_QWORD *)(a1 + 104) = v13;
  v15 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 112) = v15;
  *(_WORD *)(a1 + 120) = *(_WORD *)(a2 + 120);
  *(_QWORD *)(a1 + 124) = *(_QWORD *)(a2 + 124);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  return a1;
}

uint64_t assignWithCopy for FileAnalyticsReport(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  v13 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v14 = *(_QWORD *)(a2 + 96);
  v15 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v16 = *(_QWORD *)(a2 + 112);
  v17 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  return a1;
}

__n128 initializeWithTake for FileAnalyticsReport(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

uint64_t assignWithTake for FileAnalyticsReport(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v9;
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(a2 + 80);
  v12 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v11;
  swift_bridgeObjectRelease(v12);
  v13 = *(_QWORD *)(a2 + 96);
  v14 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v13;
  swift_bridgeObjectRelease(v14);
  v15 = *(_QWORD *)(a2 + 112);
  v16 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v15;
  swift_bridgeObjectRelease(v16);
  *(_WORD *)(a1 + 120) = *(_WORD *)(a2 + 120);
  *(_QWORD *)(a1 + 124) = *(_QWORD *)(a2 + 124);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  return a1;
}

uint64_t getEnumTagSinglePayload for FileAnalyticsReport(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 144))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FileAnalyticsReport(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 144) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 144) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FileAnalyticsReport()
{
  return &type metadata for FileAnalyticsReport;
}

uint64_t initializeWithCopy for EventCounterReport(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  v6 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  v8 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v7;
  v10 = *(_QWORD *)(a2 + 64);
  v9 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 72) = v9;
  v11 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v11;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  return a1;
}

_QWORD *assignWithCopy for EventCounterReport(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = a2[2];
  v5 = a1[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[3] = a2[3];
  v6 = a2[4];
  v7 = a1[4];
  a1[4] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[5] = a2[5];
  v8 = a2[6];
  v9 = a1[6];
  a1[6] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[7] = a2[7];
  v10 = a2[8];
  v11 = a1[8];
  a1[8] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[9] = a2[9];
  v12 = a2[10];
  v13 = a1[10];
  a1[10] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  a1[11] = a2[11];
  a1[12] = a2[12];
  a1[13] = a2[13];
  a1[14] = a2[14];
  a1[15] = a2[15];
  a1[16] = a2[16];
  a1[17] = a2[17];
  a1[18] = a2[18];
  a1[19] = a2[19];
  a1[20] = a2[20];
  a1[21] = a2[21];
  a1[22] = a2[22];
  return a1;
}

__n128 initializeWithTake for EventCounterReport(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[10];
  *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 + 22);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t assignWithTake for EventCounterReport(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v9;
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(a2 + 80);
  v12 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v11;
  swift_bridgeObjectRelease(v12);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  return a1;
}

uint64_t getEnumTagSinglePayload for EventCounterReport(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 184))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EventCounterReport(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 184) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 184) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for EventCounterReport()
{
  return &type metadata for EventCounterReport;
}

uint64_t _s14applekeystored18EventCounterReportVwxx_0(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  return swift_bridgeObjectRelease(a1[10]);
}

uint64_t initializeWithCopy for KernelCounterReport(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  v6 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  v8 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v7;
  v10 = *(_QWORD *)(a2 + 64);
  v9 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 72) = v9;
  v11 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v11;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  return a1;
}

_QWORD *assignWithCopy for KernelCounterReport(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = a2[2];
  v5 = a1[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[3] = a2[3];
  v6 = a2[4];
  v7 = a1[4];
  a1[4] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[5] = a2[5];
  v8 = a2[6];
  v9 = a1[6];
  a1[6] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[7] = a2[7];
  v10 = a2[8];
  v11 = a1[8];
  a1[8] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[9] = a2[9];
  v12 = a2[10];
  v13 = a1[10];
  a1[10] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  a1[11] = a2[11];
  a1[12] = a2[12];
  a1[13] = a2[13];
  a1[14] = a2[14];
  a1[15] = a2[15];
  return a1;
}

__n128 initializeWithTake for KernelCounterReport(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t assignWithTake for KernelCounterReport(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v9;
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(a2 + 80);
  v12 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v11;
  swift_bridgeObjectRelease(v12);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  return a1;
}

uint64_t getEnumTagSinglePayload for KernelCounterReport(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 128))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for KernelCounterReport(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 128) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 128) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for KernelCounterReport()
{
  return &type metadata for KernelCounterReport;
}

uint64_t getEnumTagSinglePayload for AnalyticsReporterConfig.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AnalyticsReporterConfig.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1000275C0 + 4 * byte_10004C68B[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1000275F4 + 4 * byte_10004C686[v4]))();
}

uint64_t sub_1000275F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000275FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100027604);
  return result;
}

uint64_t sub_100027610(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100027618);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_10002761C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100027624(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsReporterConfig.CodingKeys()
{
  return &type metadata for AnalyticsReporterConfig.CodingKeys;
}

unint64_t sub_100027644()
{
  unint64_t result;

  result = qword_100070840;
  if (!qword_100070840)
  {
    result = swift_getWitnessTable(&unk_10004CAA0, &type metadata for AnalyticsReporterConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100070840);
  }
  return result;
}

unint64_t sub_10002768C()
{
  unint64_t result;

  result = qword_100070848;
  if (!qword_100070848)
  {
    result = swift_getWitnessTable(&unk_10004CA10, &type metadata for AnalyticsReporterConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100070848);
  }
  return result;
}

unint64_t sub_1000276D4()
{
  unint64_t result;

  result = qword_100070850;
  if (!qword_100070850)
  {
    result = swift_getWitnessTable(&unk_10004CA38, &type metadata for AnalyticsReporterConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100070850);
  }
  return result;
}

unint64_t sub_100027718()
{
  unint64_t result;

  result = qword_100070860;
  if (!qword_100070860)
  {
    result = swift_getWitnessTable(&unk_10004D068, &type metadata for KernelCounterReport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100070860);
  }
  return result;
}

unint64_t sub_10002775C()
{
  unint64_t result;

  result = qword_100070868;
  if (!qword_100070868)
  {
    result = swift_getWitnessTable(&unk_10004C508, &type metadata for KernelCounters);
    atomic_store(result, (unint64_t *)&qword_100070868);
  }
  return result;
}

unint64_t sub_1000277A0()
{
  unint64_t result;

  result = qword_100070878;
  if (!qword_100070878)
  {
    result = swift_getWitnessTable(&unk_10004C4E0, &type metadata for KernelCounters);
    atomic_store(result, (unint64_t *)&qword_100070878);
  }
  return result;
}

unint64_t sub_1000277E4()
{
  unint64_t result;

  result = qword_100070888;
  if (!qword_100070888)
  {
    result = swift_getWitnessTable(&unk_10004D018, &type metadata for EventCounterReport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100070888);
  }
  return result;
}

unint64_t sub_100027828()
{
  unint64_t result;

  result = qword_100070890;
  if (!qword_100070890)
  {
    result = swift_getWitnessTable(&unk_10004DBB4, &type metadata for AnalyticsManagerCounters.Snapshot);
    atomic_store(result, (unint64_t *)&qword_100070890);
  }
  return result;
}

_QWORD *sub_10002786C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[4];
  v3 = a1[6];
  v4 = a1[8];
  v5 = a1[10];
  swift_bridgeObjectRetain(a1[2]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *sub_1000278D4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[2];
  v3 = a1[4];
  v4 = a1[6];
  v5 = a1[8];
  swift_bridgeObjectRelease(a1[10]);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

unint64_t sub_10002793C()
{
  unint64_t result;

  result = qword_1000708A0;
  if (!qword_1000708A0)
  {
    result = swift_getWitnessTable(&unk_10004DB8C, &type metadata for AnalyticsManagerCounters.Snapshot);
    atomic_store(result, (unint64_t *)&qword_1000708A0);
  }
  return result;
}

unint64_t sub_100027980()
{
  unint64_t result;

  result = qword_1000708B0;
  if (!qword_1000708B0)
  {
    result = swift_getWitnessTable(&unk_10004CFC8, &type metadata for FileAnalyticsReport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000708B0);
  }
  return result;
}

_QWORD *sub_1000279C4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  v3 = a1[6];
  v4 = a1[8];
  v5 = a1[10];
  v6 = a1[12];
  v7 = a1[14];
  swift_bridgeObjectRetain(a1[2]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

unint64_t sub_100027A4C()
{
  unint64_t result;

  result = qword_1000708C8;
  if (!qword_1000708C8)
  {
    result = swift_getWitnessTable(&unk_10004CF78, &type metadata for ProcessAnalyticsReport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000708C8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ProcessAnalyticsReport.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_100027ADC + 4 * byte_10004C695[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_100027B10 + 4 * byte_10004C690[v4]))();
}

uint64_t sub_100027B10(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100027B18(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100027B20);
  return result;
}

uint64_t sub_100027B2C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100027B34);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_100027B38(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100027B40(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ProcessAnalyticsReport.CodingKeys()
{
  return &type metadata for ProcessAnalyticsReport.CodingKeys;
}

uint64_t getEnumTagSinglePayload for FileAnalyticsReport.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF4)
    goto LABEL_17;
  if (a2 + 12 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 12) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 12;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 12;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 12;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xD;
  v8 = v6 - 13;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FileAnalyticsReport.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 12 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 12) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF3)
    return ((uint64_t (*)(void))((char *)&loc_100027C38 + 4 * byte_10004C69F[v4]))();
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_100027C6C + 4 * byte_10004C69A[v4]))();
}

uint64_t sub_100027C6C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100027C74(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100027C7CLL);
  return result;
}

uint64_t sub_100027C88(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100027C90);
  *(_BYTE *)result = a2 + 12;
  return result;
}

uint64_t sub_100027C94(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100027C9C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FileAnalyticsReport.CodingKeys()
{
  return &type metadata for FileAnalyticsReport.CodingKeys;
}

ValueMetadata *type metadata accessor for EventCounterReport.CodingKeys()
{
  return &type metadata for EventCounterReport.CodingKeys;
}

uint64_t _s14applekeystored18EventCounterReportV10CodingKeysOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s14applekeystored18EventCounterReportV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_100027DAC + 4 * byte_10004C6A9[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_100027DE0 + 4 * byte_10004C6A4[v4]))();
}

uint64_t sub_100027DE0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100027DE8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100027DF0);
  return result;
}

uint64_t sub_100027DFC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100027E04);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_100027E08(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100027E10(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KernelCounterReport.CodingKeys()
{
  return &type metadata for KernelCounterReport.CodingKeys;
}

unint64_t sub_100027E30()
{
  unint64_t result;

  result = qword_1000708D8;
  if (!qword_1000708D8)
  {
    result = swift_getWitnessTable(&unk_10004CD28, &type metadata for KernelCounterReport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000708D8);
  }
  return result;
}

unint64_t sub_100027E78()
{
  unint64_t result;

  result = qword_1000708E0;
  if (!qword_1000708E0)
  {
    result = swift_getWitnessTable(&unk_10004CDE0, &type metadata for EventCounterReport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000708E0);
  }
  return result;
}

unint64_t sub_100027EC0()
{
  unint64_t result;

  result = qword_1000708E8;
  if (!qword_1000708E8)
  {
    result = swift_getWitnessTable(&unk_10004CE98, &type metadata for FileAnalyticsReport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000708E8);
  }
  return result;
}

unint64_t sub_100027F08()
{
  unint64_t result;

  result = qword_1000708F0;
  if (!qword_1000708F0)
  {
    result = swift_getWitnessTable(&unk_10004CF50, &type metadata for ProcessAnalyticsReport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000708F0);
  }
  return result;
}

unint64_t sub_100027F50()
{
  unint64_t result;

  result = qword_1000708F8;
  if (!qword_1000708F8)
  {
    result = swift_getWitnessTable(&unk_10004CEC0, &type metadata for ProcessAnalyticsReport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000708F8);
  }
  return result;
}

unint64_t sub_100027F98()
{
  unint64_t result;

  result = qword_100070900;
  if (!qword_100070900)
  {
    result = swift_getWitnessTable(&unk_10004CEE8, &type metadata for ProcessAnalyticsReport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100070900);
  }
  return result;
}

unint64_t sub_100027FE0()
{
  unint64_t result;

  result = qword_100070908;
  if (!qword_100070908)
  {
    result = swift_getWitnessTable(&unk_10004CE08, &type metadata for FileAnalyticsReport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100070908);
  }
  return result;
}

unint64_t sub_100028028()
{
  unint64_t result;

  result = qword_100070910;
  if (!qword_100070910)
  {
    result = swift_getWitnessTable(&unk_10004CE30, &type metadata for FileAnalyticsReport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100070910);
  }
  return result;
}

unint64_t sub_100028070()
{
  unint64_t result;

  result = qword_100070918;
  if (!qword_100070918)
  {
    result = swift_getWitnessTable(&unk_10004CD50, &type metadata for EventCounterReport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100070918);
  }
  return result;
}

unint64_t sub_1000280B8()
{
  unint64_t result;

  result = qword_100070920;
  if (!qword_100070920)
  {
    result = swift_getWitnessTable(&unk_10004CD78, &type metadata for EventCounterReport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100070920);
  }
  return result;
}

unint64_t sub_100028100()
{
  unint64_t result;

  result = qword_100070928;
  if (!qword_100070928)
  {
    result = swift_getWitnessTable(&unk_10004CC98, &type metadata for KernelCounterReport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100070928);
  }
  return result;
}

unint64_t sub_100028148()
{
  unint64_t result;

  result = qword_100070930;
  if (!qword_100070930)
  {
    result = swift_getWitnessTable(&unk_10004CCC0, &type metadata for KernelCounterReport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100070930);
  }
  return result;
}

void sub_100028198(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_1000281E8()
{
  uint64_t v1;

  ((void (*)(uint64_t *, uint64_t, unint64_t))String.hash(into:))(&v1, 0x61446E6967756C70, 0xEA00000000006174);
  swift_bridgeObjectRelease(0xEA00000000006174);
  return Hasher._finalize()();
}

void sub_100028288(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_1000282D0()
{
  uint64_t v1;

  ((void (*)(uint64_t *, uint64_t, unint64_t))String.hash(into:))(&v1, 0x6574697277, 0xE500000000000000);
  swift_bridgeObjectRelease(0xE500000000000000);
  return Hasher._finalize()();
}

void sub_100028354(char *a1)
{
  sub_100029E4C(*a1);
}

void sub_100028360()
{
  char *v0;

  sub_100028198(*v0);
}

void sub_100028368()
{
  __asm { BR              X10 }
}

uint64_t sub_1000283A4(uint64_t a1)
{
  ((void (*)(uint64_t, uint64_t, unint64_t))String.hash(into:))(a1, 0x61446E6967756C70, 0xEA00000000006174);
  return swift_bridgeObjectRelease(0xEA00000000006174);
}

void sub_100028430(uint64_t a1)
{
  char *v1;

  sub_10002A24C(a1, *v1);
}

unint64_t sub_100028438@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100029CCC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100028464()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_100028494 + 4 * byte_10004D0E1[*v0]))();
}

void sub_100028494(_QWORD *a1@<X8>)
{
  *a1 = 0x61446E6967756C70;
  a1[1] = 0xEA00000000006174;
}

void sub_1000284B4(_QWORD *a1@<X8>)
{
  *a1 = 0x6E6F6D656164;
  a1[1] = 0xE600000000000000;
}

void sub_1000284CC(_QWORD *a1@<X8>)
{
  *a1 = 0x61446D6574737973;
  a1[1] = 0xEA00000000006174;
}

void sub_1000284EC(_QWORD *a1@<X8>)
{
  *a1 = 0x70756F7247707061;
  a1[1] = 0xE800000000000000;
}

void sub_100028508(_QWORD *a1@<X8>)
{
  *a1 = 0x72476D6574737973;
  a1[1] = 0xEB0000000070756FLL;
}

uint64_t sub_10002852C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100029D14();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100028588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100029D14();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1000285D4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for ContainerClassIndex()
{
  return objc_opt_self(_TtC14applekeystored19ContainerClassIndex);
}

uint64_t sub_100028618(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v36;
  uint64_t v37[3];
  uint64_t v38;
  uint64_t v39;
  _QWORD aBlock[5];
  uint64_t v41;

  v2 = v1;
  v4 = type metadata accessor for ContainerClassIndex();
  v5 = swift_allocObject(v4, 32, 7);
  *(_QWORD *)(v5 + 24) = sub_10002A338((uint64_t)&_swiftEmptyArrayStorage);
  *(_BYTE *)(v5 + 16) = a1;
  swift_beginAccess(v1 + 24, aBlock, 33, 0);
  swift_retain(v5);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + 24));
  v37[0] = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0x8000000000000000;
  sub_100045D00(v5, a1, isUniquelyReferenced_nonNull_native);
  v7 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = v37[0];
  swift_bridgeObjectRelease(v7);
  swift_endAccess(aBlock);
  v8 = swift_allocObject(&unk_100068328, 24, 7);
  *(_QWORD *)(v8 + 16) = 0;
  v9 = container_query_create();
  if (v9)
  {
    v10 = v9;
    v36 = (uint64_t *)(v1 + 24);
    container_query_set_class(v9, qword_10004D270[a1]);
    container_query_set_include_other_owners(v10, 1);
    container_query_operation_set_flags(v10, &_mh_execute_header);
    v11 = swift_allocObject(&unk_100068350, 48, 7);
    *(_QWORD *)(v11 + 16) = v1;
    *(_QWORD *)(v11 + 24) = v5;
    *(_BYTE *)(v11 + 32) = a1;
    *(_QWORD *)(v11 + 40) = v8;
    aBlock[4] = sub_100029D9C;
    v41 = v11;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000297F8;
    aBlock[3] = &unk_100068368;
    v12 = _Block_copy(aBlock);
    v13 = v41;
    swift_retain(v5);
    swift_retain(v1);
    swift_retain(v8);
    swift_release(v13);
    container_query_iterate_results_sync(v10, v12);
    _Block_release(v12);
    swift_beginAccess(v8 + 16, aBlock, 0, 0);
    if (*(uint64_t *)(v8 + 16) >= 2)
    {
      if (qword_10006E5C0 != -1)
        swift_once(&qword_10006E5C0, sub_10001AB28);
      v14 = type metadata accessor for Logger(0);
      v15 = sub_100005D1C(v14, (uint64_t)qword_100071AE0);
      v16 = Logger.logObject.getter(v15);
      v17 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v16, v17))
      {
        v18 = (_DWORD *)swift_slowAlloc(12, -1);
        v37[0] = swift_slowAlloc(32, -1);
        *v18 = 136315138;
        __asm { BR              X10 }
      }

    }
    if (qword_10006E5C0 != -1)
      swift_once(&qword_10006E5C0, sub_10001AB28);
    v25 = type metadata accessor for Logger(0);
    sub_100005D1C(v25, (uint64_t)qword_100071AE0);
    v26 = swift_retain(v2);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = swift_slowAlloc(22, -1);
      v39 = swift_slowAlloc(32, -1);
      *(_DWORD *)v29 = 134218242;
      v30 = *v36;
      if (*(_QWORD *)(*v36 + 16))
      {
        swift_bridgeObjectRetain(v30);
        sub_10002D828(a1);
        if ((v32 & 1) != 0)
        {
          v33 = *(_QWORD *)(*(_QWORD *)(v30 + 56) + 8 * v31);
          swift_retain(v33);
          swift_bridgeObjectRelease(v30);
          swift_beginAccess(v33 + 24, v37, 0, 0);
          v34 = *(_QWORD *)(*(_QWORD *)(v33 + 24) + 16);
          swift_release(v33);
          goto LABEL_22;
        }
        swift_bridgeObjectRelease(v30);
      }
      v34 = 0;
LABEL_22:
      v38 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
      swift_release(v2);
      *(_WORD *)(v29 + 12) = 2080;
      __asm { BR              X10 }
    }

    swift_release(v2);
    container_query_free(v10);
    swift_release(v5);
    v24 = v8;
  }
  else
  {
    if (qword_10006E5C0 != -1)
      swift_once(&qword_10006E5C0, sub_10001AB28);
    v19 = type metadata accessor for Logger(0);
    v20 = sub_100005D1C(v19, (uint64_t)qword_100071AE0);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (_DWORD *)swift_slowAlloc(12, -1);
      aBlock[0] = swift_slowAlloc(32, -1);
      *v23 = 136315138;
      __asm { BR              X10 }
    }
    swift_release(v8);

    v24 = v5;
  }
  return swift_release(v24);
}

uint64_t sub_100028E7C(uint64_t a1, uint64_t (*a2)(char *, char *, uint64_t), uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  uint64_t (*v41)(char *, char *, uint64_t);
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  char *v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  int v51;
  _BOOL4 v52;
  uint64_t v53;
  _DWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _DWORD v75[4];
  NSObject *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t (*v86)(char *, char *, uint64_t);
  uint64_t v87;
  uint64_t v88[3];
  _QWORD v89[3];
  char v90[32];

  v84 = a4;
  v85 = a5;
  v86 = a2;
  v7 = sub_100005690(&qword_100070B18);
  __chkstk_darwin(v7);
  v9 = (char *)v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for FilePath(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)v75 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)v75 - v19;
  v21 = __chkstk_darwin(v18);
  v23 = (char *)v75 - v22;
  __chkstk_darwin(v21);
  v25 = (char *)v75 - v24;
  if (!container_get_identifier(a1))
    return 1;
  v83 = a3;
  v82 = String.init(cString:)();
  v27 = v26;
  if (!container_get_path(a1))
  {
    swift_bridgeObjectRelease(v27);
    return 1;
  }
  v80 = v14;
  v81 = v27;
  v28 = String.init(cString:)();
  FilePath.init(_:)(v28);
  v29 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 32))(v25, v23, v10);
  FilePath.lastComponent.getter(v29);
  v30 = type metadata accessor for FilePath.Component(0);
  v31 = v10;
  v32 = *(_QWORD *)(v30 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v9, 1, v30) == 1)
  {
    swift_bridgeObjectRelease(v81);
    sub_100029DC4((uint64_t)v9);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v25, v31);
    return 1;
  }
  v77 = FilePath.Component.string.getter();
  v78 = v33;
  (*(void (**)(char *, uint64_t))(v32 + 8))(v9, v30);
  v34 = *(uint64_t (**)(char *, char *, uint64_t))(v11 + 16);
  v79 = v25;
  v35 = v34(v17, v25, v31);
  v36 = FilePath.removingLastComponent()(v35);
  v37 = FilePath.string.getter(v36);
  v39 = v38;
  v40 = *(void (**)(char *, uint64_t))(v11 + 8);
  v40(v20, v31);
  v41 = v86;
  v42 = (_QWORD *)((char *)v86 + 16);
  swift_beginAccess((char *)v86 + 16, v90, 0, 0);
  v43 = *((_QWORD *)v41 + 2);
  v44 = (_QWORD *)v31;
  v45 = v80;
  if (*(_QWORD *)(v43 + 16))
  {
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(v43);
    v46 = sub_10002D7C4(v37, v39);
    if ((v47 & 1) != 0)
    {
      v45 = *(char **)(*(_QWORD *)(v43 + 56) + 8 * v46);
      swift_retain(v45);
      swift_bridgeObjectRelease_n(v39, 2);
      swift_bridgeObjectRelease(v43);
      v39 = v83;
      if (v45 != (char *)v83)
      {
        v37 = (uint64_t)v79;
        v42 = v81;
        if (qword_10006E5C0 == -1)
        {
LABEL_10:
          v48 = type metadata accessor for Logger(0);
          sub_100005D1C(v48, (uint64_t)qword_100071AE0);
          v49 = swift_retain_n(v45, 2);
          v50 = Logger.logObject.getter(v49);
          v51 = static os_log_type_t.error.getter();
          v52 = os_log_type_enabled(v50, (os_log_type_t)v51);
          v53 = v82;
          if (v52)
          {
            v75[3] = v51;
            v76 = v50;
            v85 = v44;
            v86 = v34;
            v54 = (_DWORD *)swift_slowAlloc(22, -1);
            v89[0] = swift_slowAlloc(64, -1);
            *v54 = 136315394;
            __asm { BR              X10 }
          }

          swift_release_n(v45, 3);
          v45 = v80;
          goto LABEL_15;
        }
LABEL_25:
        swift_once(&qword_10006E5C0, sub_10001AB28);
        goto LABEL_10;
      }
      swift_release(v83);
      v37 = (uint64_t)v79;
      v45 = v80;
      v42 = v81;
      v53 = v82;
      goto LABEL_15;
    }
    swift_bridgeObjectRelease(v39);
    swift_bridgeObjectRelease(v43);
  }
  v55 = v44;
  v44 = v40;
  v40 = (void (*)(char *, uint64_t))v34;
  v34 = (uint64_t (*)(char *, char *, uint64_t))(v85 + 2);
  swift_beginAccess(v42, v89, 33, 0);
  v56 = v83;
  swift_retain(v83);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v42);
  v88[0] = *v42;
  *v42 = 0x8000000000000000;
  sub_100045E34(v56, v37, v39, isUniquelyReferenced_nonNull_native);
  v58 = *v42;
  *v42 = v88[0];
  swift_bridgeObjectRelease(v39);
  swift_bridgeObjectRelease(v58);
  swift_endAccess(v89);
  swift_beginAccess(v34, v89, 1, 0);
  if (__OFADD__(*(_QWORD *)v34, 1))
  {
    __break(1u);
    goto LABEL_25;
  }
  ++*(_QWORD *)v34;
  v37 = (uint64_t)v79;
  v42 = v81;
  v39 = v83;
  v34 = (uint64_t (*)(char *, char *, uint64_t))v40;
  v40 = (void (*)(char *, uint64_t))v44;
  v44 = v55;
  v53 = v82;
LABEL_15:
  v59 = v40;
  swift_beginAccess(v39 + 24, v88, 33, 0);
  v60 = v78;
  swift_bridgeObjectRetain(v78);
  swift_bridgeObjectRetain(v42);
  v61 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v39 + 24));
  v87 = *(_QWORD *)(v39 + 24);
  *(_QWORD *)(v39 + 24) = 0x8000000000000000;
  sub_100045B8C(v53, (uint64_t)v42, v77, v60, v61);
  v62 = *(_QWORD *)(v39 + 24);
  *(_QWORD *)(v39 + 24) = v87;
  swift_bridgeObjectRelease(v60);
  swift_bridgeObjectRelease(v62);
  swift_endAccess(v88);
  swift_bridgeObjectRelease(v60);
  if (qword_10006E5C0 != -1)
    swift_once(&qword_10006E5C0, sub_10001AB28);
  v63 = type metadata accessor for Logger(0);
  sub_100005D1C(v63, (uint64_t)qword_100071AE0);
  v34(v45, (char *)v37, (uint64_t)v44);
  v64 = swift_bridgeObjectRetain(v42);
  v65 = Logger.logObject.getter(v64);
  v66 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v65, v66))
  {
    v67 = swift_slowAlloc(22, -1);
    v68 = swift_slowAlloc(64, -1);
    v88[0] = v68;
    *(_DWORD *)v67 = 136315394;
    swift_bridgeObjectRetain(v42);
    v87 = sub_100016DBC(v53, (unint64_t)v42, v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, v88);
    swift_bridgeObjectRelease_n(v42, 3);
    *(_WORD *)(v67 + 12) = 2080;
    v69 = sub_100029E04();
    v70 = dispatch thunk of CustomStringConvertible.description.getter(v44, v69);
    v72 = v71;
    v87 = sub_100016DBC(v70, v71, v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, v88);
    swift_bridgeObjectRelease(v72);
    v59(v45, (uint64_t)v44);
    _os_log_impl((void *)&_mh_execute_header, v65, v66, "found container %s at path %s", (uint8_t *)v67, 0x16u);
    swift_arrayDestroy(v68, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v68, -1, -1);
    swift_slowDealloc(v67, -1, -1);

    v73 = (uint64_t)v79;
  }
  else
  {

    v59(v45, (uint64_t)v44);
    swift_bridgeObjectRelease_n(v42, 2);
    v73 = v37;
  }
  v59((char *)v73, (uint64_t)v44);
  return 1;
}

uint64_t sub_1000297F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t);

  v4 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  LOBYTE(a2) = v4(a2);
  swift_release(v3);
  return a2 & 1;
}

uint64_t sub_100029840(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v32;
  _BYTE v33[24];
  _BYTE v34[24];
  _BYTE v35[24];

  v4 = v3;
  swift_beginAccess(v3 + 24, v35, 1, 0);
  v8 = *(_QWORD *)(v3 + 24);
  if (!*(_QWORD *)(v8 + 16))
  {
LABEL_10:
    v18 = sub_10002A458((uint64_t)&_swiftEmptyArrayStorage);
    swift_beginAccess(v4 + 16, v34, 1, 0);
    v19 = *(_QWORD *)(v4 + 16);
    *(_QWORD *)(v4 + 16) = v18;
    swift_bridgeObjectRelease(v19);
    sub_10002A464((uint64_t)&_swiftEmptyArrayStorage);
    v20 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = v21;
    swift_bridgeObjectRelease(v20);
    sub_100028618(0);
    sub_100028618(1);
    sub_100028618(2);
    sub_100028618(3);
    sub_100028618(4);
    sub_100028618(5);
    v22 = *(_QWORD *)(v4 + 24);
    if (*(_QWORD *)(v22 + 16))
    {
      swift_bridgeObjectRetain(*(_QWORD *)(v4 + 24));
      sub_10002D828(a3);
      if ((v24 & 1) == 0)
      {
        v30 = v22;
LABEL_18:
        swift_bridgeObjectRelease(v30);
        return 0;
      }
      v25 = *(_QWORD *)(*(_QWORD *)(v22 + 56) + 8 * v23);
      swift_retain(v25);
      swift_bridgeObjectRelease(v22);
      swift_beginAccess(v25 + 24, v33, 0, 0);
      v26 = *(_QWORD *)(v25 + 24);
      if (*(_QWORD *)(v26 + 16))
      {
        swift_bridgeObjectRetain(a2);
        swift_bridgeObjectRetain(v26);
        v27 = sub_10002D7C4(a1, a2);
        if ((v28 & 1) != 0)
        {
          v29 = (uint64_t *)(*(_QWORD *)(v26 + 56) + 16 * v27);
          v16 = *v29;
          swift_bridgeObjectRetain(v29[1]);
          swift_release(v25);
          swift_bridgeObjectRelease(a2);
          swift_bridgeObjectRelease(v26);
          return v16;
        }
        swift_release(v25);
        swift_bridgeObjectRelease(a2);
        v30 = v26;
        goto LABEL_18;
      }
      swift_release(v25);
    }
    return 0;
  }
  swift_bridgeObjectRetain(v8);
  sub_10002D828(a3);
  if ((v10 & 1) == 0)
  {
    v17 = v8;
LABEL_9:
    swift_bridgeObjectRelease(v17);
    goto LABEL_10;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v9);
  swift_retain(v11);
  swift_bridgeObjectRelease(v8);
  swift_beginAccess(v11 + 24, &v32, 0, 0);
  v12 = *(_QWORD *)(v11 + 24);
  if (!*(_QWORD *)(v12 + 16))
  {
    swift_release(v11);
    goto LABEL_10;
  }
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v12);
  v13 = sub_10002D7C4(a1, a2);
  if ((v14 & 1) == 0)
  {
    swift_release(v11);
    swift_bridgeObjectRelease(a2);
    v17 = v12;
    goto LABEL_9;
  }
  v15 = (uint64_t *)(*(_QWORD *)(v12 + 56) + 16 * v13);
  v16 = *v15;
  swift_bridgeObjectRetain(v15[1]);
  swift_release(v11);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v12);
  return v16;
}

uint64_t sub_100029ADC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for ContainerIndex()
{
  return objc_opt_self(_TtC14applekeystored14ContainerIndex);
}

uint64_t getEnumTagSinglePayload for ContainerClass(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ContainerClass(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_100029C04 + 4 * byte_10004D0FE[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100029C38 + 4 * byte_10004D0F9[v4]))();
}

uint64_t sub_100029C38(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100029C40(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100029C48);
  return result;
}

uint64_t sub_100029C54(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100029C5CLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_100029C60(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100029C68(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContainerClass()
{
  return &type metadata for ContainerClass;
}

unint64_t sub_100029C88()
{
  unint64_t result;

  result = qword_100070B08;
  if (!qword_100070B08)
  {
    result = swift_getWitnessTable(&unk_10004D240, &type metadata for ContainerClass);
    atomic_store(result, (unint64_t *)&qword_100070B08);
  }
  return result;
}

unint64_t sub_100029CCC(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100061468, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 6)
    return 6;
  else
    return v3;
}

unint64_t sub_100029D14()
{
  unint64_t result;

  result = qword_100070B10;
  if (!qword_100070B10)
  {
    result = swift_getWitnessTable(&unk_10004D1C8, &type metadata for ContainerClass);
    atomic_store(result, (unint64_t *)&qword_100070B10);
  }
  return result;
}

uint64_t sub_100029D58()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100029D68()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100029D9C(uint64_t a1)
{
  uint64_t v1;

  return sub_100028E7C(a1, *(uint64_t (**)(char *, char *, uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(_QWORD **)(v1 + 40));
}

uint64_t sub_100029DAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100029DBC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100029DC4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005690(&qword_100070B18);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100029E04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100070B20;
  if (!qword_100070B20)
  {
    v1 = type metadata accessor for FilePath(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for FilePath, v1);
    atomic_store(result, (unint64_t *)&qword_100070B20);
  }
  return result;
}

void sub_100029E4C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100029E9C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100029F30 + 4 * byte_10004D2B6[a2]))(0x61446E6967756C70);
}

uint64_t sub_100029F30(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x61446E6967756C70 && v1 == 0xEA00000000006174)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x61446E6967756C70, 0xEA00000000006174, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEA00000000006174);
  return v2 & 1;
}

void sub_10002A00C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_10002A04C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10002A0C4 + 4 * byte_10004D2C1[a2]))(0x6574697277);
}

uint64_t sub_10002A0C4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6574697277 && v1 == 0xE500000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6574697277, 0xE500000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE500000000000000);
  return v2 & 1;
}

void sub_10002A184(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_10002A1C8()
{
  uint64_t v1;

  ((void (*)(uint64_t *, uint64_t, unint64_t))String.hash(into:))(&v1, 0x6574697277, 0xE500000000000000);
  swift_bridgeObjectRelease(0xE500000000000000);
  return Hasher._finalize()();
}

void sub_10002A24C(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_10002A298()
{
  uint64_t v1;

  ((void (*)(uint64_t *, uint64_t, unint64_t))String.hash(into:))(&v1, 0x61446E6967756C70, 0xEA00000000006174);
  swift_bridgeObjectRelease(0xEA00000000006174);
  return Hasher._finalize()();
}

unint64_t sub_10002A338(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005690(&qword_100070D00);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v7 = *(v6 - 3);
    v8 = *(v6 - 2);
    v10 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    result = sub_10002D7C4(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    v14 = (_QWORD *)(v4[7] + 16 * result);
    *v14 = v10;
    v14[1] = v9;
    v15 = v4[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10002A458(uint64_t a1)
{
  return sub_10002A6A0(a1, &qword_100070C98);
}

void sub_10002A464(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2
    && (sub_100005690(&qword_100070C90),
        v3 = static _DictionaryStorage.allocate(capacity:)(v2),
        v4 = (_QWORD *)v3,
        (v5 = *(_QWORD *)(a1 + 16)) != 0))
  {
    swift_retain(v3);
    v6 = (_QWORD *)(a1 + 40);
    while (1)
    {
      v7 = *((_BYTE *)v6 - 8);
      v8 = *v6;
      swift_retain(*v6);
      sub_10002D828(v7);
      if ((v10 & 1) != 0)
        break;
      *(_QWORD *)((char *)v4 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v9;
      *(_BYTE *)(v4[6] + v9) = v7;
      *(_QWORD *)(v4[7] + 8 * v9) = v8;
      v11 = v4[2];
      v12 = __OFADD__(v11, 1);
      v13 = v11 + 1;
      if (v12)
        goto LABEL_10;
      v4[2] = v13;
      v6 += 2;
      if (!--v5)
      {
        swift_release(v4);
        goto LABEL_8;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
LABEL_8:
    swift_bridgeObjectRelease(a1);
  }
}

unint64_t sub_10002A564(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t result;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005690(&qword_100070CA8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(v1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(v1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v19 = v1;
  v6 = (_BYTE *)(v1 + 64);
  while (1)
  {
    v7 = *((_QWORD *)v6 - 4);
    v8 = *((_QWORD *)v6 - 3);
    v10 = *((_QWORD *)v6 - 2);
    v9 = *((_QWORD *)v6 - 1);
    v11 = *v6;
    swift_bridgeObjectRetain(v8);
    result = sub_10002D7C4(v7, v8);
    if ((v13 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v14 = (uint64_t *)(v4[6] + 16 * result);
    *v14 = v7;
    v14[1] = v8;
    v15 = v4[7] + 24 * result;
    *(_QWORD *)v15 = v10;
    *(_QWORD *)(v15 + 8) = v9;
    *(_BYTE *)(v15 + 16) = v11;
    v16 = v4[2];
    v17 = __OFADD__(v16, 1);
    v18 = v16 + 1;
    if (v17)
      goto LABEL_11;
    v4[2] = v18;
    v6 += 40;
    if (!--v5)
    {
      swift_release(v4);
      v1 = v19;
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10002A694(uint64_t a1)
{
  return sub_10002A6A0(a1, &qword_100070CA0);
}

unint64_t sub_10002A6A0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005690(a2);
  v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  v5 = (_QWORD *)v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v5;
  }
  swift_retain(v4);
  v7 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v8 = *(v7 - 2);
    v9 = *(v7 - 1);
    v10 = *v7;
    swift_bridgeObjectRetain(v9);
    swift_retain(v10);
    result = sub_10002D7C4(v8, v9);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v5[6] + 16 * result);
    *v13 = v8;
    v13[1] = v9;
    *(_QWORD *)(v5[7] + 8 * result) = v10;
    v14 = v5[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v5[2] = v16;
    v7 += 3;
    if (!--v6)
    {
      swift_release(v5);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10002A7B4()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100005D98(v0, qword_100071AF8);
  sub_100005D1C(v0, (uint64_t)qword_100071AF8);
  return Logger.init(subsystem:category:)(0x796C616E41534B41, 0xEC00000073636974, 0x73746E657665, 0xE600000000000000);
}

uint64_t sub_10002A828(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  char v23;

  v3 = v1;
  v5 = sub_100005690(&qword_100070CC0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100005E2C(a1, v9);
  v11 = sub_10002E524();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for EventCollectorConfig.CodingKeys, &type metadata for EventCollectorConfig.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v23 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v23, v5);
  if (!v2)
  {
    v14 = v3[2];
    v22 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v22, v5);
    v15 = *((unsigned __int8 *)v3 + 24);
    v21 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v15, &v21, v5);
    v16 = v3[4];
    v17 = v3[5];
    v20 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v20, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10002A98C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10002A9C0 + 4 * byte_10004D2D1[*v0]))(0x69467963696C6F70, 0xEA0000000000656CLL);
}

unint64_t sub_10002A9C0()
{
  return 0xD000000000000016;
}

uint64_t sub_10002A9E0()
{
  return 0x746E657645676F6CLL;
}

unint64_t sub_10002A9FC()
{
  return 0xD000000000000012;
}

uint64_t sub_10002AA18@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10002DF50(a1, a2);
  *a3 = result;
  return result;
}

void sub_10002AA3C(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_10002AA48(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002E524();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10002AA70(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002E524();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10002AA98@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  sub_10002E114(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_10002AAD8(_QWORD *a1)
{
  return sub_10002A828(a1);
}

uint64_t sub_10002AAEC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 152) = v0;
  return swift_task_switch(sub_10002AB04, 0, 0);
}

uint64_t sub_10002AB04()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  __objc2_ivar *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  unint64_t v36;
  int64_t v37;
  unint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  _DWORD *v47;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v2 = v0 + 19;
  v1 = v0[19];
  v3 = *(_QWORD *)(v1 + 16);
  v0[20] = v3;
  v4 = *(__objc2_ivar **)(v1 + 24);
  v0[21] = v4;
  if (v4)
  {
    v5 = qword_10006E5C0;
    swift_bridgeObjectRetain(v4);
    if (v5 != -1)
      goto LABEL_44;
    goto LABEL_3;
  }
  if (qword_10006E5C0 != -1)
    swift_once(&qword_10006E5C0, sub_10001AB28);
  v53 = type metadata accessor for Logger(0);
  v12 = sub_100005D1C(v53, (uint64_t)qword_100071AE0);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "loading built-in policy", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }
  v16 = v0 + 8;
  v3 = (uint64_t)(v0 + 11);

  if (qword_10006E5F8 != -1)
    swift_once(&qword_10006E5F8, sub_10003C88C);
  v17 = qword_100071B50;
  v0 = *(_QWORD **)(qword_100071B50 + 16);
  if (v0)
  {
    v18 = v2 - 17;
    swift_bridgeObjectRetain(qword_100071B50);
    v19 = v17 + 40;
    do
    {
      v20 = *(_QWORD *)v19;
      v21 = *(_QWORD *)(v19 + 8);
      v22 = *(_BYTE *)(v19 + 32);
      v23 = *(_OWORD *)(v19 + 16);
      *(_QWORD *)(v50 + 16) = *(_QWORD *)(v19 - 8);
      *(_QWORD *)(v50 + 24) = v20;
      *(_QWORD *)(v50 + 32) = v21;
      *(_OWORD *)(v50 + 40) = v23;
      *(_BYTE *)(v50 + 56) = v22;
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v21);
      sub_100042B10(v18);
      swift_bridgeObjectRelease(v20);
      swift_bridgeObjectRelease(v21);
      v19 += 48;
      v0 = (_QWORD *)((char *)v0 - 1);
    }
    while (v0);
    swift_bridgeObjectRelease(v17);
  }
  v24 = *(_QWORD *)(*(_QWORD *)(v50 + 152) + 112);
  v25 = sub_10002A6A0((uint64_t)&_swiftEmptyArrayStorage, &qword_100070C98);
  swift_beginAccess(v24 + 16, v16, 1, 0);
  v26 = *(_QWORD *)(v24 + 16);
  *(_QWORD *)(v24 + 16) = v25;
  swift_bridgeObjectRelease(v26);
  sub_10002A464((uint64_t)&_swiftEmptyArrayStorage);
  v28 = v27;
  swift_beginAccess(v24 + 24, v3, 1, 0);
  v29 = *(_QWORD *)(v24 + 24);
  *(_QWORD *)(v24 + 24) = v28;
  swift_bridgeObjectRelease(v29);
  sub_100028618(0);
  sub_100028618(1);
  sub_100028618(2);
  sub_100028618(3);
  sub_100028618(4);
  sub_100028618(5);
  v30 = *(_QWORD *)(v24 + 16);
  v51 = v30 + 64;
  v31 = -1;
  v32 = -1 << *(_BYTE *)(v30 + 32);
  if (-v32 < 64)
    v31 = ~(-1 << -(char)v32);
  v33 = v31 & *(_QWORD *)(v30 + 64);
  v52 = (unint64_t)(63 - v32) >> 6;
  swift_bridgeObjectRetain(v30);
  v34 = 0;
  v2 = qword_100071AE0;
  v4 = &stru_10006E000;
  while (1)
  {
    if (v33)
    {
      v54 = (v33 - 1) & v33;
      v36 = __clz(__rbit64(v33)) | (v34 << 6);
      goto LABEL_35;
    }
    v37 = v34 + 1;
    if (__OFADD__(v34, 1))
    {
      __break(1u);
      goto LABEL_43;
    }
    v0 = (_QWORD *)v50;
    if (v37 >= v52)
      goto LABEL_39;
    v38 = *(_QWORD *)(v51 + 8 * v37);
    ++v34;
    if (!v38)
    {
      v34 = v37 + 1;
      if (v37 + 1 >= v52)
        goto LABEL_39;
      v38 = *(_QWORD *)(v51 + 8 * v34);
      if (!v38)
      {
        v34 = v37 + 2;
        if (v37 + 2 >= v52)
          goto LABEL_39;
        v38 = *(_QWORD *)(v51 + 8 * v34);
        if (!v38)
          break;
      }
    }
LABEL_34:
    v54 = (v38 - 1) & v38;
    v36 = __clz(__rbit64(v38)) + (v34 << 6);
LABEL_35:
    v40 = *(_QWORD *)(v30 + 48) + 16 * v36;
    v0 = *(_QWORD **)v40;
    v41 = *(_QWORD *)(v40 + 8);
    v42 = *(_QWORD *)(*(_QWORD *)(v30 + 56) + 8 * v36);
    v43 = qword_10006E5C0;
    swift_bridgeObjectRetain(v41);
    swift_retain(v42);
    if (v43 != -1)
      swift_once(&qword_10006E5C0, sub_10001AB28);
    sub_100005D1C(v53, (uint64_t)qword_100071AE0);
    swift_bridgeObjectRetain_n(v41, 2);
    v44 = swift_retain_n(v42, 2);
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (_DWORD *)swift_slowAlloc(22, -1);
      v55 = swift_slowAlloc(64, -1);
      *v47 = 136315394;
      __asm { BR              X9 }
    }
    swift_release_n(v42, 2);
    swift_bridgeObjectRelease_n(v41, 2);

    v3 = *(unsigned __int8 *)(v42 + 16);
    v35 = sub_1000424D0((uint64_t)v0, v41);
    *(_BYTE *)(v35 + 56) = v3;
    swift_release(v35);
    swift_release(v42);
    swift_bridgeObjectRelease(v41);
    v33 = v54;
  }
  v39 = v37 + 3;
  if (v39 >= v52)
  {
LABEL_39:
    swift_release(v30);
    return (*(uint64_t (**)(void))(v50 + 8))();
  }
  v38 = *(_QWORD *)(v51 + 8 * v39);
  if (v38)
  {
    v34 = v39;
    goto LABEL_34;
  }
  while (1)
  {
    v34 = v39 + 1;
    if (__OFADD__(v39, 1))
      break;
    if (v34 >= v52)
      goto LABEL_39;
    v38 = *(_QWORD *)(v51 + 8 * v34);
    ++v39;
    if (v38)
      goto LABEL_34;
  }
LABEL_43:
  __break(1u);
LABEL_44:
  swift_once(&qword_10006E5C0, sub_10001AB28);
LABEL_3:
  v6 = type metadata accessor for Logger(0);
  v0[22] = sub_100005D1C(v6, (uint64_t)qword_100071AE0);
  v7 = swift_bridgeObjectRetain_n(v4, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v55 = v11;
    *(_DWORD *)v10 = 136315138;
    v0 = (_QWORD *)v50;
    swift_bridgeObjectRetain(v4);
    *(v2 - 1) = sub_100016DBC(v3, (unint64_t)v4, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 1, v2);
    swift_bridgeObjectRelease_n(v4, 3);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "loading policy from %s", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v4, 2);
  }

  v0[23] = *(_QWORD *)(v0[19] + 64);
  v49 = (_QWORD *)swift_task_alloc(dword_100071614);
  v0[24] = v49;
  *v49 = v0;
  v49[1] = sub_10002B388;
  return sub_100044348(v3, (uint64_t)v4);
}

uint64_t sub_10002B388()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 192);
  *(_QWORD *)(*v1 + 200) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10002B930;
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 168));
    v4 = sub_10002B3F4;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10002B3F4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t i;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _DWORD *v27;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  int64_t v33;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 152) + 112);
  v2 = sub_10002A6A0((uint64_t)&_swiftEmptyArrayStorage, &qword_100070C98);
  swift_beginAccess(v1 + 16, v0 + 64, 1, 0);
  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = v2;
  swift_bridgeObjectRelease(v3);
  sub_10002A464((uint64_t)&_swiftEmptyArrayStorage);
  v5 = v4;
  swift_beginAccess(v1 + 24, v0 + 88, 1, 0);
  v6 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = v5;
  swift_bridgeObjectRelease(v6);
  sub_100028618(0);
  sub_100028618(1);
  sub_100028618(2);
  sub_100028618(3);
  sub_100028618(4);
  sub_100028618(5);
  v7 = *(_QWORD *)(v1 + 16);
  v30 = v7 + 64;
  v8 = -1;
  v9 = -1 << *(_BYTE *)(v7 + 32);
  if (-v9 < 64)
    v8 = ~(-1 << -(char)v9);
  v10 = v8 & *(_QWORD *)(v7 + 64);
  v31 = (unint64_t)(63 - v9) >> 6;
  v29 = v0;
  swift_bridgeObjectRetain(v7);
  for (i = 0; ; i = v33)
  {
    if (v10)
    {
      v14 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v15 = v14 | (i << 6);
      goto LABEL_21;
    }
    v16 = i + 1;
    if (__OFADD__(i, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v16 >= v31)
      goto LABEL_25;
    v17 = *(_QWORD *)(v30 + 8 * v16);
    ++i;
    if (!v17)
    {
      i = v16 + 1;
      if (v16 + 1 >= v31)
        goto LABEL_25;
      v17 = *(_QWORD *)(v30 + 8 * i);
      if (!v17)
      {
        i = v16 + 2;
        if (v16 + 2 >= v31)
          goto LABEL_25;
        v17 = *(_QWORD *)(v30 + 8 * i);
        if (!v17)
          break;
      }
    }
LABEL_20:
    v10 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (i << 6);
LABEL_21:
    v19 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 16 * v15);
    v20 = v19[1];
    v32 = *v19;
    v21 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v15);
    v22 = qword_10006E5C0;
    swift_bridgeObjectRetain(v20);
    swift_retain(v21);
    if (v22 != -1)
      swift_once(&qword_10006E5C0, sub_10001AB28);
    v23 = type metadata accessor for Logger(0);
    sub_100005D1C(v23, (uint64_t)qword_100071AE0);
    swift_bridgeObjectRetain_n(v20, 2);
    v24 = swift_retain_n(v21, 2);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.debug.getter();
    v33 = i;
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (_DWORD *)swift_slowAlloc(22, -1);
      swift_slowAlloc(64, -1);
      *v27 = 136315394;
      __asm { BR              X9 }
    }
    swift_release_n(v21, 2);
    swift_bridgeObjectRelease_n(v20, 2);

    v12 = *(_BYTE *)(v21 + 16);
    v13 = sub_1000424D0(v32, v20);
    *(_BYTE *)(v13 + 56) = v12;
    swift_release(v13);
    swift_release(v21);
    swift_bridgeObjectRelease(v20);
  }
  v18 = v16 + 3;
  if (v18 < v31)
  {
    v17 = *(_QWORD *)(v30 + 8 * v18);
    if (!v17)
    {
      while (1)
      {
        i = v18 + 1;
        if (__OFADD__(v18, 1))
          break;
        if (i >= v31)
          goto LABEL_25;
        v17 = *(_QWORD *)(v30 + 8 * i);
        ++v18;
        if (v17)
          goto LABEL_20;
      }
LABEL_27:
      __break(1u);
      JUMPOUT(0x10002B918);
    }
    i = v18;
    goto LABEL_20;
  }
LABEL_25:
  swift_release(v7);
  return (*(uint64_t (**)(void))(v29 + 8))();
}

uint64_t sub_10002B930()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 168);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain(v2);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v0 + 200);
    v8 = *(_QWORD *)(v0 + 160);
    v7 = *(_QWORD *)(v0 + 168);
    v9 = swift_slowAlloc(22, -1);
    v10 = (uint64_t *)swift_slowAlloc(8, -1);
    v18 = swift_slowAlloc(32, -1);
    v19 = v18;
    *(_DWORD *)v9 = 136315394;
    swift_bridgeObjectRetain(v7);
    *(_QWORD *)(v0 + 128) = sub_100016DBC(v8, v7, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136);
    swift_bridgeObjectRelease_n(v7, 3);
    *(_WORD *)(v9 + 12) = 2112;
    swift_errorRetain(v6);
    v11 = _swift_stdlib_bridgeErrorToNSError(v6);
    *(_QWORD *)(v0 + 136) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144);
    *v10 = v11;
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "failed to load policy from %s: %@", (uint8_t *)v9, 0x16u);
    v12 = sub_100005690(&qword_10006FFB8);
    swift_arrayDestroy(v10, 1, v12);
    swift_slowDealloc(v10, -1, -1);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 200);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 168), 2);
    swift_errorRelease(v13);
    swift_errorRelease(v13);
  }

  v14 = *(_QWORD *)(v0 + 200);
  v15 = sub_10002E608();
  swift_allocError(&type metadata for AnalyticsError, v15, 0, 0);
  *v16 = v14;
  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10002BB70()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  NSString v5;
  NSString v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;

  v1 = v0[7];
  if (v1)
  {
    v2 = v0[6];
    v3 = (void *)objc_opt_self(NSFileManager);
    v4 = objc_msgSend(v3, "defaultManager", swift_bridgeObjectRetain(v1).n128_f64[0]);
    v5 = String._bridgeToObjectiveC()();
    objc_msgSend(v4, "createFileAtPath:contents:attributes:", v5, 0, 0);

    swift_bridgeObjectRetain(v1);
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v1);
    v7 = objc_msgSend((id)objc_opt_self(NSFileHandle), "fileHandleForWritingAtPath:", v6);

    if (v7)
    {
      v8 = (void *)v0[16];
      v0[16] = v7;
      v21 = v7;

      if (qword_10006E5C0 != -1)
        swift_once(&qword_10006E5C0, sub_10001AB28);
      v9 = type metadata accessor for Logger(0);
      sub_100005D1C(v9, (uint64_t)qword_100071AE0);
      swift_bridgeObjectRetain(v1);
      v11 = Logger.logObject.getter(v10);
      v12 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v11, v12))
      {
        v13 = (uint8_t *)swift_slowAlloc(12, -1);
        v14 = swift_slowAlloc(32, -1);
        v23 = v14;
        *(_DWORD *)v13 = 136315138;
        swift_bridgeObjectRetain(v1);
        v22 = sub_100016DBC(v2, v1, &v23);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);
        swift_bridgeObjectRelease_n(v1, 3);
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "recording events to %s", v13, 0xCu);
        swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v14, -1, -1);
        swift_slowDealloc(v13, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v1, 2);
      }
    }
    else
    {
      if (qword_10006E5C0 != -1)
        swift_once(&qword_10006E5C0, sub_10001AB28);
      v15 = type metadata accessor for Logger(0);
      sub_100005D1C(v15, (uint64_t)qword_100071AE0);
      swift_bridgeObjectRetain(v1);
      v17 = Logger.logObject.getter(v16);
      v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc(12, -1);
        v20 = swift_slowAlloc(32, -1);
        v23 = v20;
        *(_DWORD *)v19 = 136315138;
        swift_bridgeObjectRetain(v1);
        v22 = sub_100016DBC(v2, v1, &v23);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);
        swift_bridgeObjectRelease_n(v1, 3);
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "failed to open event recording file %s", v19, 0xCu);
        swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v20, -1, -1);
        swift_slowDealloc(v19, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v1, 2);
      }
    }
  }
}

uint64_t sub_10002BF58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 72) = a1;
  *(_QWORD *)(v2 + 80) = v1;
  return swift_task_switch(sub_10002BF70, 0, 0);
}

uint64_t sub_10002BF70()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v1 = *(_QWORD *)(v0 + 72);
  *(_DWORD *)(v0 + 152) = *(_DWORD *)(v1 + 12);
  v2 = *(_DWORD *)(v1 + 16);
  v3 = sub_10001BB08(v2);
  *(_BYTE *)(v0 + 156) = v3;
  v4 = *(_QWORD *)(v0 + 80);
  if (v3 == 9)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v4 + 136) + 56);
    v6 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 136);
    v7 = swift_retain(v5);
    v8 = (unint64_t *)v6(v7);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    swift_release(v5);
    if (qword_10006E5C8 != -1)
      swift_once(&qword_10006E5C8, sub_10002A7B4);
    v10 = *(_QWORD *)(v0 + 72);
    v11 = type metadata accessor for Logger(0);
    sub_100005D1C(v11, (uint64_t)qword_100071AF8);
    v12 = sub_10001EA38(v10);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter();
    v15 = os_log_type_enabled(v13, v14);
    v16 = *(_QWORD *)(v0 + 72);
    if (v15)
    {
      v17 = swift_slowAlloc(18, -1);
      v18 = swift_slowAlloc(32, -1);
      v23 = v18;
      *(_DWORD *)v17 = 67109378;
      *(_DWORD *)(v0 + 144) = v2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 148);
      *(_WORD *)(v17 + 8) = 2080;
      v19 = *(_QWORD *)(v16 + 32);
      v20 = *(_QWORD *)(v16 + 40);
      swift_bridgeObjectRetain(v20);
      *(_QWORD *)(v0 + 56) = sub_100016DBC(v19, v20, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64);
      swift_bridgeObjectRelease(v20);
      sub_10002E5AC(v16);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "invalid protection class %u for %s", (uint8_t *)v17, 0x12u);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);
    }
    else
    {
      sub_10002E5AC(*(_QWORD *)(v0 + 72));
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v21 = *(_QWORD *)(v4 + 72);
    *(_QWORD *)(v0 + 88) = v21;
    return swift_task_switch(sub_10002C1CC, v21, 0);
  }
}

uint64_t sub_10002C1CC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  int v3;
  uint64_t (*v4)();
  unint64_t v6;
  __uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  char v13;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(unsigned __int8 *)(v1 + 128);
  *(_BYTE *)(v0 + 157) = v2;
  if (v2 != 2)
  {
    v3 = *(unsigned __int8 *)(v1 + 129);
    *(_BYTE *)(v0 + 158) = v3;
    if (v3 != 2)
    {
      *(_QWORD *)(v0 + 96) = *(_QWORD *)(v1 + 160);
      if ((*(_BYTE *)(v1 + 168) & 1) == 0)
      {
        *(_QWORD *)(v0 + 104) = *(_QWORD *)(v1 + 152);
        v6 = *(_QWORD *)(v1 + 136);
        if ((*(_BYTE *)(v1 + 144) & 1) == 0)
        {
          v7 = clock_gettime_nsec_np(_CLOCK_MONOTONIC);
          if (v7 >= v6)
          {
            v13 = 0;
            v6 = (v7 - v6) / 0x3B9ACA00;
            goto LABEL_15;
          }
          if (qword_10006E5C0 != -1)
            swift_once(&qword_10006E5C0, sub_10001AB28);
          v8 = type metadata accessor for Logger(0);
          v9 = sub_100005D1C(v8, (uint64_t)qword_100071AE0);
          v10 = Logger.logObject.getter(v9);
          v11 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v10, v11))
          {
            v12 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v12 = 0;
            _os_log_impl((void *)&_mh_execute_header, v10, v11, "Unexpected deviceLockTime", v12, 2u);
            swift_slowDealloc(v12, -1, -1);
          }

          v6 = 0;
        }
        v13 = 1;
LABEL_15:
        *(_BYTE *)(v0 + 159) = v13;
        *(_QWORD *)(v0 + 112) = v6;
        v4 = sub_10002C34C;
        return swift_task_switch(v4, 0, 0);
      }
    }
  }
  v4 = sub_10002C7A8;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10002C34C()
{
  uint64_t v0;
  unsigned int v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  char v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t);
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int8x16_t v38;
  uint64_t v40;
  uint64_t v41;

  v1 = *(_DWORD *)(v0 + 152);
  v2 = sub_1000471E0(*(_BYTE *)(v0 + 156));
  v3 = sub_1000472F8(v1);
  v4 = *(_QWORD *)(v0 + 80);
  if (v3 == 5)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v4 + 136) + 64);
    v6 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 136);
    v7 = swift_retain(v5);
    v8 = (unint64_t *)v6(v7);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    swift_release(v5);
    if (qword_10006E5C8 != -1)
      swift_once(&qword_10006E5C8, sub_10002A7B4);
    v11 = (uint64_t *)(v0 + 72);
    v10 = *(_QWORD *)(v0 + 72);
    v12 = type metadata accessor for Logger(0);
    sub_100005D1C(v12, (uint64_t)qword_100071AF8);
    v13 = sub_10001EA38(v10);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = *(_DWORD *)(v0 + 152);
      v17 = *v11;
      v18 = swift_slowAlloc(18, -1);
      v40 = swift_slowAlloc(32, -1);
      v41 = v40;
      *(_DWORD *)v18 = 67109378;
      *(_DWORD *)(v0 + 148) = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 148, v0 + 152);
      *(_WORD *)(v18 + 8) = 2080;
      v20 = *(_QWORD *)(v17 + 32);
      v19 = *(_QWORD *)(v17 + 40);
      swift_bridgeObjectRetain(v19);
      *(_QWORD *)(v0 + 64) = sub_100016DBC(v20, v19, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72);
      swift_bridgeObjectRelease(v19);
      sub_10002E5AC(v17);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "invalid event type %u for %s", (uint8_t *)v18, 0x12u);
      swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v18, -1, -1);
    }
    else
    {
      sub_10002E5AC(*v11);
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v21 = v3;
  v22 = *(uint64_t **)(v0 + 72);
  v23 = v22[6];
  v24 = v22[7];
  sub_100042E9C(v23, v24, v22[4], v22[5], *(_QWORD *)(v4 + 112), (_QWORD *)(v0 + 16));
  if ((*(_BYTE *)(v0 + 33) & 1) != 0)
  {
    v25 = *(_QWORD *)(v0 + 80);
    v26 = (uint64_t *)(v25 + 80);
    v27 = (uint64_t *)(v25 + 88);
    v28 = *(_BYTE *)(v25 + 96);
  }
  else
  {
    v27 = (uint64_t *)(v0 + 24);
    v28 = *(_BYTE *)(v0 + 32) & 1;
    v26 = (uint64_t *)(v0 + 16);
  }
  if ((sub_10002D028(*v26, *v27, v28, v21) & 1) == 0)
  {
    sub_10002E5E0(v0 + 16);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v29 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 80) + 136) + 24);
  v30 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 136);
  v31 = swift_retain(v29);
  v32 = (unint64_t *)v30(v31);
  do
    v33 = __ldxr(v32);
  while (__stxr(v33 + 1, v32));
  swift_release(v29);
  v35 = *(_QWORD *)(v0 + 40);
  v34 = *(_QWORD *)(v0 + 48);
  *(_QWORD *)(v0 + 120) = v35;
  *(_QWORD *)(v0 + 128) = v34;
  v36 = dword_100070B64;
  swift_bridgeObjectRetain(v34);
  v37 = swift_task_alloc(v36);
  *(_QWORD *)(v0 + 136) = v37;
  *(_QWORD *)v37 = v0;
  *(_QWORD *)(v37 + 8) = sub_10002C6DC;
  v38 = *(int8x16_t *)(v0 + 96);
  *(_QWORD *)(v37 + 72) = *(_QWORD *)(v0 + 80);
  *(int8x16_t *)(v37 + 56) = vextq_s8(v38, v38, 8uLL);
  *(_BYTE *)(v37 + 81) = v2;
  *(_BYTE *)(v37 + 80) = v21;
  *(_QWORD *)(v37 + 40) = v35;
  *(_QWORD *)(v37 + 48) = v34;
  *(_QWORD *)(v37 + 24) = v23;
  *(_QWORD *)(v37 + 32) = v24;
  return swift_task_switch(sub_10002C834, 0, 0);
}

uint64_t sub_10002C6DC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0 + 16;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 136));
  sub_10002E5E0(v1);
  return swift_task_switch(sub_10002C73C, 0, 0);
}

uint64_t sub_10002C73C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  if ((*(_BYTE *)(v1 + 40) & 1) != 0 || *(_QWORD *)(v1 + 128))
    sub_10002CD68(*(_QWORD **)(v0 + 72), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_BYTE *)(v0 + 157) & 1 | ((*(_BYTE *)(v0 + 158) & 1) << 8), *(_QWORD *)(v0 + 112), *(_BYTE *)(v0 + 159), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 96));
  sub_10002E5E0(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002C7A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 80) + 136) + 72);
  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 136);
  v3 = swift_retain(v1);
  v4 = (unint64_t *)v2(v3);
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002C808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v9 + 64) = a8;
  *(_QWORD *)(v9 + 72) = v8;
  *(_QWORD *)(v9 + 48) = a4;
  *(_QWORD *)(v9 + 56) = a7;
  *(_BYTE *)(v9 + 81) = a6;
  *(_BYTE *)(v9 + 80) = a5;
  *(_QWORD *)(v9 + 32) = a2;
  *(_QWORD *)(v9 + 40) = a3;
  *(_QWORD *)(v9 + 24) = a1;
  return swift_task_switch(sub_10002C834, 0, 0);
}

uint64_t sub_10002C834()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 136) + 16);
  v5 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 136);
  v6 = *(unsigned __int8 *)(v0 + 80);
  v7 = *(unsigned __int8 *)(v0 + 81);
  v8 = swift_retain(v4);
  v9 = *(_QWORD *)v5(v8);
  swift_release(v4);
  sub_100014474(v9, v1, v3, v6, v7);
  v10 = sub_10002CC94();
  if ((v11 & 1) != 0)
  {
    v19 = *(_QWORD *)(*(_QWORD *)(v2 + 136) + 104);
    v20 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 136);
    v21 = swift_retain(v19);
    v22 = (unint64_t *)v20(v21);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    v18 = v19;
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 48);
    v29 = *(_QWORD *)(v0 + 40);
    v13 = *(_QWORD *)(v0 + 32);
    v28 = *(_QWORD *)(v0 + 24);
    v26 = v10;
    v27 = *(_BYTE *)(v0 + 80);
    v14 = type metadata accessor for AnalyticsSchemaV2.FileAnalytics(0);
    swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    sub_100018AE8(v26, v29, v12, v28, v13, v27);
    v16 = v15;
    v17 = sub_100005A54(&qword_10006FFD0, type metadata accessor for AnalyticsSchemaV2.FileAnalytics, (uint64_t)&unk_10004AFD8);
    dispatch thunk of ModelContext.insert<A>(_:)(v16, v14, v17);
    v18 = v16;
  }
  v24 = swift_release(v18);
  dispatch thunk of ModelContext.save()(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_10002CC94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  int64_t v7;
  unint64_t result;
  int64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  v1 = v0;
  v2 = *(_QWORD *)(*(_QWORD *)(v0 + 136) + 32);
  v3 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 136);
  v4 = swift_retain(v2);
  v5 = (unint64_t *)v3(v4);
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  swift_release(v2);
  v7 = *(_QWORD *)(v1 + 32);
  if (v7 <= (uint64_t)(v6 + 1))
    result = v6 + 1;
  else
    result = *(_QWORD *)(v1 + 32);
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (!result)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  v9 = sub_10002DEC8(result);
  if (v9 >= v7)
    return 0;
  v10 = *(_QWORD *)(*(_QWORD *)(v1 + 136) + 96);
  v11 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 136);
  v12 = swift_retain(v10);
  v13 = (unint64_t *)v11(v12);
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  swift_release(v10);
  return v9;
}

void sub_10002CD68(_QWORD *a1, uint64_t a2, uint64_t a3, __int16 a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  id v27;
  uint64_t v28;
  id v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;

  v9 = v8;
  v11 = a1[6];
  v12 = a1[7];
  *(_QWORD *)&v30 = *(_QWORD *)((char *)a1 + 12);
  *((_QWORD *)&v30 + 1) = v11;
  v31 = v12;
  v32 = a2;
  v33 = a3;
  v34 = a4 & 0x101;
  v35 = a5;
  v36 = a6 & 1;
  v37 = a7;
  v38 = a8;
  v13 = *(_QWORD *)(v9 + 120);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(a3);
  v14 = sub_10003A414(&v30, v13);
  v16 = v15;
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(v12);
  if (v16)
  {
    if (*(_BYTE *)(v9 + 40) == 1)
    {
      if (qword_10006E5C8 != -1)
        swift_once(&qword_10006E5C8, sub_10002A7B4);
      v17 = type metadata accessor for Logger(0);
      sub_100005D1C(v17, (uint64_t)qword_100071AF8);
      v18 = swift_bridgeObjectRetain_n(v16, 2);
      v19 = Logger.logObject.getter(v18);
      v20 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v19, v20))
      {

        swift_bridgeObjectRelease_n(v16, 2);
        v23 = *(void **)(v9 + 128);
        if (v23)
          goto LABEL_8;
LABEL_10:
        swift_bridgeObjectRelease(v16);
        return;
      }
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = (void *)swift_slowAlloc(32, -1);
      v29 = v22;
      *(_DWORD *)v21 = 136315138;
      swift_bridgeObjectRetain(v16);
      v28 = sub_100016DBC(v14, v16, (uint64_t *)&v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
      swift_bridgeObjectRelease_n(v16, 3);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Event: %s", v21, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);

    }
    v23 = *(void **)(v9 + 128);
    if (v23)
    {
LABEL_8:
      v29 = v23;
      v24 = sub_100005690(&qword_100070CE8);
      v25 = swift_allocObject(v24, 64, 7);
      *(_OWORD *)(v25 + 16) = xmmword_10004BF60;
      *(_QWORD *)(v25 + 56) = &type metadata for String;
      *(_QWORD *)(v25 + 32) = v14;
      *(_QWORD *)(v25 + 40) = v16;
      v26 = sub_10002E568();
      v27 = v23;
      print<A>(_:separator:terminator:to:)(v25, 32, 0xE100000000000000, 10, 0xE100000000000000, &v29, &type metadata for FileHandlerOutputStream, v26);
      swift_bridgeObjectRelease(v25);

      return;
    }
    goto LABEL_10;
  }
}

uint64_t sub_10002D028(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if ((a3 & 1) == 0)
    __asm { BR              X10 }
  if (a1 | a2)
    return 1;
  v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 48);
  v6 = *v5;
  v7 = *(uint64_t (**)(uint64_t))(*(_QWORD *)*v5 + 136);
  v8 = swift_retain(*v5);
  v9 = (unint64_t *)v7(v8);
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  swift_release(v6);
  return 0;
}

uint64_t sub_10002D0F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[18] = a4;
  v5[19] = a5;
  v6 = sub_100005690(&qword_100070CD0);
  v5[20] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[21] = v7;
  v5[22] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10002D15C, 0, 0);
}

uint64_t sub_10002D15C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  _QWORD *v7;

  if (qword_10006E5C0 != -1)
    swift_once(&qword_10006E5C0, sub_10001AB28);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100005D1C(v1, (uint64_t)qword_100071AE0);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "starting analytics collection", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = sub_100005690(&qword_100070CD8);
  AsyncStream.makeAsyncIterator()(v6);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(_QWORD *)(v0 + 184) = v7;
  *v7 = v0;
  v7[1] = sub_10002D290;
  return AsyncStream.Iterator.next(isolation:)(v0 + 80, 0, 0, *(_QWORD *)(v0 + 160));
}

uint64_t sub_10002D290()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 184));
  return swift_task_switch(sub_10002D2E4, 0, 0);
}

uint64_t sub_10002D2E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  *(_QWORD *)(v0 + 192) = v1;
  *(_QWORD *)(v0 + 200) = v2;
  v4 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 104);
  *(_QWORD *)(v0 + 208) = v4;
  *(_QWORD *)(v0 + 216) = v3;
  v5 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 120);
  *(_QWORD *)(v0 + 224) = v5;
  *(_QWORD *)(v0 + 232) = v6;
  v7 = *(_QWORD *)(v0 + 128);
  v8 = *(_QWORD *)(v0 + 136);
  *(_QWORD *)(v0 + 240) = v7;
  *(_QWORD *)(v0 + 248) = v8;
  if (v6)
  {
    *(_QWORD *)(v0 + 16) = v1;
    *(_QWORD *)(v0 + 24) = v2;
    *(_QWORD *)(v0 + 32) = v4;
    *(_DWORD *)(v0 + 40) = v3;
    *(_QWORD *)(v0 + 48) = v5;
    *(_QWORD *)(v0 + 56) = v6;
    *(_QWORD *)(v0 + 64) = v7;
    *(_QWORD *)(v0 + 72) = v8;
    v9 = (_QWORD *)swift_task_alloc(dword_100070B5C);
    *(_QWORD *)(v0 + 256) = v9;
    *v9 = v0;
    v9[1] = sub_10002D3BC;
    v10 = *(_QWORD *)(v0 + 152);
    v9[9] = v0 + 16;
    v9[10] = v10;
    return swift_task_switch(sub_10002BF70, 0, 0);
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 176);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 168) + 8))(v12, *(_QWORD *)(v0 + 160));
    swift_task_dealloc(v12);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10002D3BC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;

  v1 = *v0;
  v12 = *(_QWORD *)(*v0 + 248);
  v13 = *v0 + 80;
  v3 = *(_QWORD *)(*v0 + 232);
  v2 = *(_QWORD *)(*v0 + 240);
  v5 = *(_QWORD *)(*v0 + 216);
  v4 = *(_QWORD *)(*v0 + 224);
  v7 = *(_QWORD *)(*v0 + 200);
  v6 = *(_QWORD *)(*v0 + 208);
  v8 = *(_QWORD *)(*v0 + 192);
  v9 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 256));
  sub_10001F490(v8, v7, v6, v5, v4, v3, v2, v12);
  v10 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(_QWORD *)(v1 + 184) = v10;
  *v10 = v9;
  v10[1] = sub_10002D290;
  return AsyncStream.Iterator.next(isolation:)(v13, 0, 0, *(_QWORD *)(v1 + 160));
}

uint64_t sub_10002D494()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(v1);
  swift_release(*(_QWORD *)(v0 + 64));
  swift_release(*(_QWORD *)(v0 + 72));
  swift_release(*(_QWORD *)(v0 + 104));
  swift_release(*(_QWORD *)(v0 + 112));
  swift_release(*(_QWORD *)(v0 + 120));

  swift_release(*(_QWORD *)(v0 + 136));
  return v0;
}

uint64_t sub_10002D4FC()
{
  uint64_t v0;

  sub_10002D494();
  return swift_deallocClassInstance(v0, 144, 7);
}

uint64_t type metadata accessor for EventCollector()
{
  return objc_opt_self(_TtC14applekeystored14EventCollector);
}

uint64_t destroy for EventCollectorConfig(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
}

uint64_t initializeWithCopy for EventCollectorConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for EventCollectorConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 initializeWithTake for EventCollectorConfig(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for EventCollectorConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for EventCollectorConfig(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for EventCollectorConfig(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for EventCollectorConfig()
{
  return &type metadata for EventCollectorConfig;
}

unint64_t sub_10002D760(char a1)
{
  uint64_t v1;
  Swift::Int v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, *(_QWORD *)(v1 + 40));
  Hasher._combine(_:)(dword_10004D4E0[a1]);
  v3 = Hasher._finalize()();
  return sub_10002D9B4(a1, v3);
}

unint64_t sub_10002D7C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_10002DA68(a1, a2, v5);
}

void sub_10002D828(char a1)
{
  uint64_t v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, *(_QWORD *)(v1 + 40));
  __asm { BR              X10 }
}

uint64_t sub_10002D880()
{
  uint64_t v0;
  Swift::Int v1;
  uint64_t v3;

  String.hash(into:)(&v3, 0x61446E6967756C70, 0xEA00000000006174);
  swift_bridgeObjectRelease(0xEA00000000006174);
  v1 = Hasher._finalize()();
  return sub_10002DB48(v0, v1);
}

unint64_t sub_10002D92C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8, *(_QWORD *)(v1 + 40));
  type metadata accessor for CFString(0);
  v4 = v3;
  v5 = sub_100005A54(&qword_100070CE0, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_10004A818);
  _CFObject.hash(into:)(v8, v4, v5);
  v6 = Hasher._finalize()();
  return sub_10002DD88(a1, v6);
}

unint64_t sub_10002D9B4(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = dword_10004D4E0[a1];
    v8 = *(_QWORD *)(v2 + 48);
    if (dword_10004D4E0[*(char *)(v8 + result)] != v7)
    {
      v9 = ~v5;
      for (result = (result + 1) & v9;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v9)
      {
        if (dword_10004D4E0[*(char *)(v8 + result)] == v7)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_10002DA68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_10002DB48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = a2 & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  return a2 & ~(-1 << *(_BYTE *)(v2 + 32));
}

unint64_t sub_10002DD88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  char v13;
  uint64_t v14;
  id v15;
  char v16;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v6 = v2;
    type metadata accessor for CFString(0);
    v9 = v8;
    v10 = *(void **)(*(_QWORD *)(v6 + 48) + 8 * i);
    v11 = sub_100005A54(&qword_100070CE0, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_10004A818);
    v12 = v10;
    v13 = static _CFObject.== infix(_:_:)(v12, a1, v9, v11);

    if ((v13 & 1) == 0)
    {
      v14 = ~v4;
      for (i = (i + 1) & v14; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v14)
      {
        v15 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * i);
        v16 = static _CFObject.== infix(_:_:)(v15, a1, v9, v11);

        if ((v16 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_10002DEC8(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  if (result)
  {
    v1 = result;
    v3 = 0;
    swift_stdlib_random(&v3, 8);
    result = (v3 * (unsigned __int128)v1) >> 64;
    if (v3 * v1 < v1)
    {
      v2 = -(uint64_t)v1 % v1;
      if (v2 > v3 * v1)
      {
        do
        {
          v3 = 0;
          swift_stdlib_random(&v3, 8);
        }
        while (v2 > v3 * v1);
        return (v3 * (unsigned __int128)v1) >> 64;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10002DF50(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x69467963696C6F70 && a2 == 0xEA0000000000656CLL)
  {
    v5 = 0xEA0000000000656CLL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69467963696C6F70, 0xEA0000000000656CLL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000016)
  {
    v7 = 0x8000000100051A10;
    if (a2 == 0x8000000100051A10)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x8000000100051A10, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0x746E657645676F6CLL && a2 == 0xE900000000000073)
  {
    v8 = 0xE900000000000073;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746E657645676F6CLL, 0xE900000000000073, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_19;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x8000000100051A30)
  {
    swift_bridgeObjectRelease(0x8000000100051A30);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100051A30, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_10002E114@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  char v25;
  char v26;
  char v27;

  v5 = sub_100005690(&qword_100070CB0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100005E2C(a1, v9);
  v11 = sub_10002E524();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for EventCollectorConfig.CodingKeys, &type metadata for EventCollectorConfig.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_100005D78(a1);
  v27 = 0;
  v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v27, v5);
  v14 = v13;
  v26 = 1;
  swift_bridgeObjectRetain(v13);
  v22 = KeyedDecodingContainer.decode(_:forKey:)(&v26, v5);
  v25 = 2;
  v23 = KeyedDecodingContainer.decode(_:forKey:)(&v25, v5);
  v24 = 3;
  v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v24, v5);
  v17 = v16;
  v18 = *(void (**)(char *, uint64_t))(v6 + 8);
  v19 = v15;
  v18(v8, v5);
  swift_bridgeObjectRetain(v17);
  sub_100005D78(a1);
  swift_bridgeObjectRelease(v17);
  result = swift_bridgeObjectRelease(v14);
  *(_QWORD *)a2 = v12;
  *(_QWORD *)(a2 + 8) = v14;
  *(_QWORD *)(a2 + 16) = v22;
  *(_BYTE *)(a2 + 24) = v23 & 1;
  *(_QWORD *)(a2 + 32) = v19;
  *(_QWORD *)(a2 + 40) = v17;
  return result;
}

uint64_t sub_10002E324(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;

  v4 = v3;
  v8 = type metadata accessor for JSONEncoder.OutputFormatting(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AnalyticsPolicy();
  v12 = swift_allocObject(v11, 57, 7);
  *(_QWORD *)(v12 + 16) = 0;
  *(_QWORD *)(v12 + 24) = 0;
  *(_WORD *)(v12 + 32) = 256;
  *(_QWORD *)(v12 + 40) = sub_10002A564((uint64_t)&_swiftEmptyArrayStorage);
  *(_QWORD *)(v12 + 48) = sub_10002A6A0((uint64_t)&_swiftEmptyArrayStorage, &qword_100070CA0);
  *(_BYTE *)(v12 + 56) = 6;
  *(_QWORD *)(v4 + 64) = v12;
  v13 = type metadata accessor for LockStateObserver();
  swift_allocObject(v13, 169, 15);
  *(_QWORD *)(v4 + 72) = sub_10002E944();
  *(_OWORD *)(v4 + 80) = xmmword_10004D510;
  *(_BYTE *)(v4 + 96) = 1;
  v14 = type metadata accessor for ContainerIndex();
  v15 = swift_allocObject(v14, 32, 7);
  *(_QWORD *)(v15 + 16) = sub_10002A6A0((uint64_t)&_swiftEmptyArrayStorage, &qword_100070C98);
  sub_10002A464((uint64_t)&_swiftEmptyArrayStorage);
  *(_QWORD *)(v15 + 24) = v16;
  *(_QWORD *)(v4 + 112) = v15;
  v17 = type metadata accessor for MessageEncoder();
  v18 = swift_allocObject(v17, 24, 7);
  v19 = type metadata accessor for JSONEncoder(0);
  v20 = swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v21 = JSONEncoder.init()(v20);
  *(_QWORD *)(v18 + 16) = v21;
  v22 = swift_retain(v21);
  static JSONEncoder.OutputFormatting.sortedKeys.getter(v22);
  dispatch thunk of JSONEncoder.outputFormatting.setter(v10);
  swift_release(v21);
  *(_QWORD *)(v4 + 120) = v18;
  *(_QWORD *)(v4 + 128) = 0;
  v23 = a1[1];
  *(_OWORD *)(v4 + 16) = *a1;
  *(_OWORD *)(v4 + 32) = v23;
  *(_OWORD *)(v4 + 48) = a1[2];
  v24 = type metadata accessor for AnalyticsStoreContext();
  v25 = swift_allocObject(v24, 24, 7);
  v26 = *(_QWORD *)(a2 + 16);
  v27 = type metadata accessor for ModelContext(0);
  swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
  v28 = swift_retain(v26);
  *(_QWORD *)(v25 + 16) = ModelContext.init(_:)(v28);
  *(_QWORD *)(v4 + 104) = v25;
  *(_QWORD *)(v4 + 136) = a3;
  return v4;
}

unint64_t sub_10002E524()
{
  unint64_t result;

  result = qword_100070CB8;
  if (!qword_100070CB8)
  {
    result = swift_getWitnessTable(&unk_10004D48C, &type metadata for EventCollectorConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100070CB8);
  }
  return result;
}

unint64_t sub_10002E568()
{
  unint64_t result;

  result = qword_100070CF0;
  if (!qword_100070CF0)
  {
    result = swift_getWitnessTable(&unk_10004C168, &type metadata for FileHandlerOutputStream);
    atomic_store(result, (unint64_t *)&qword_100070CF0);
  }
  return result;
}

uint64_t sub_10002E5AC(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_10002E5E0(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  return a1;
}

unint64_t sub_10002E608()
{
  unint64_t result;

  result = qword_100070CF8;
  if (!qword_100070CF8)
  {
    result = swift_getWitnessTable(&unk_10004C224, &type metadata for AnalyticsError);
    atomic_store(result, (unint64_t *)&qword_100070CF8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for EventCollectorConfig.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for EventCollectorConfig.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10002E728 + 4 * byte_10004D2F1[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10002E75C + 4 * byte_10004D2EC[v4]))();
}

uint64_t sub_10002E75C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002E764(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10002E76CLL);
  return result;
}

uint64_t sub_10002E778(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10002E780);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10002E784(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002E78C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EventCollectorConfig.CodingKeys()
{
  return &type metadata for EventCollectorConfig.CodingKeys;
}

unint64_t sub_10002E7AC()
{
  unint64_t result;

  result = qword_100070D08;
  if (!qword_100070D08)
  {
    result = swift_getWitnessTable(&unk_10004D464, &type metadata for EventCollectorConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100070D08);
  }
  return result;
}

unint64_t sub_10002E7F4()
{
  unint64_t result;

  result = qword_100070D10;
  if (!qword_100070D10)
  {
    result = swift_getWitnessTable(&unk_10004D3D4, &type metadata for EventCollectorConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100070D10);
  }
  return result;
}

unint64_t sub_10002E83C()
{
  unint64_t result;

  result = qword_100070D18;
  if (!qword_100070D18)
  {
    result = swift_getWitnessTable(&unk_10004D3FC, &type metadata for EventCollectorConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100070D18);
  }
  return result;
}

void *sub_10002E880(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  char v9;
  id v10;
  uint64_t v12;
  void *v13;

  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v8 = sub_10002D92C((uint64_t)a1);
      if ((v9 & 1) != 0)
      {
        v7 = *(void **)(*(_QWORD *)(a2 + 56) + 8 * v8);
        v10 = v7;
        return v7;
      }
    }
    return 0;
  }
  v3 = a1;
  v4 = __CocoaDictionary.lookup(_:)();

  if (!v4)
    return 0;
  v12 = v4;
  type metadata accessor for CFNumber(0);
  v6 = v5;
  swift_unknownObjectRetain(v4);
  swift_dynamicCast(&v13, &v12, (char *)&type metadata for Swift.AnyObject + 8, v6, 7);
  v7 = v13;
  swift_unknownObjectRelease(v4);
  return v7;
}

uint64_t sub_10002E944()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  void *v17;

  v1 = v0;
  v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize(v1);
  *(_QWORD *)(v1 + 120) = 0;
  *(_WORD *)(v1 + 128) = 514;
  *(_QWORD *)(v1 + 136) = 0;
  *(_BYTE *)(v1 + 144) = 1;
  *(_QWORD *)(v1 + 152) = 0;
  *(_QWORD *)(v1 + 160) = 0;
  *(_BYTE *)(v1 + 168) = 1;
  sub_100005DD8();
  static DispatchQoS.unspecified.getter();
  v17 = &_swiftEmptyArrayStorage;
  v12 = sub_100005A54(&qword_100070640, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v13 = sub_100005690(&qword_100070648);
  v14 = sub_10002F7F0();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v17, v13, v14, v6, v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v2);
  *(_QWORD *)(v1 + 112) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000021, 0x8000000100051AE0, v11, v8, v5, 0);
  return v1;
}

uint64_t sub_10002EB1C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  NSObject *v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t result;
  void **p_isa;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;

  v1 = v0;
  v2 = *(void **)(v0 + 112);
  v22 = sub_10002F83C;
  v3 = _NSConcreteStackBlock;
  p_isa = _NSConcreteStackBlock;
  v19 = 1107296256;
  v20 = sub_10002F3F4;
  v21 = &unk_100068660;
  v4 = _Block_copy(&p_isa);
  v5 = v23;
  v6 = v2;
  swift_retain(v1);
  swift_release(v5);
  v7 = AKSEventsRegister(v6, v4);
  _Block_release(v4);

  *(_QWORD *)(v1 + 120) = v7;
  if (v7)
    goto LABEL_6;
  if (qword_10006E5C0 != -1)
    goto LABEL_8;
  while (1)
  {
    v8 = type metadata accessor for Logger(0);
    v9 = sub_100005D1C(v8, (uint64_t)qword_100071AE0);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Failed to register for AKS events", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

LABEL_6:
    v13 = *(void **)(v1 + 112);
    v14 = swift_allocObject(&unk_100068698, 32, 7);
    *(_QWORD *)(v14 + 16) = sub_10002F85C;
    *(_QWORD *)(v14 + 24) = v1;
    v22 = sub_10002F874;
    v23 = v14;
    p_isa = (void **)&v3->isa;
    v19 = 1107296256;
    v20 = sub_10002F71C;
    v21 = &unk_1000686B0;
    v15 = _Block_copy(&p_isa);
    v16 = v23;
    swift_retain(v1);
    v3 = v13;
    swift_retain(v14);
    swift_release(v16);
    dispatch_sync(v3, v15);

    _Block_release(v15);
    LOBYTE(v15) = swift_isEscapingClosureAtFileLocation(v14, "", 84, 94, 25, 1);
    swift_release(v1);
    result = swift_release(v14);
    if ((v15 & 1) == 0)
      break;
    __break(1u);
LABEL_8:
    swift_once(&qword_10006E5C0, sub_10001AB28);
  }
  return result;
}

void sub_10002ED60(int a1, void *a2, uint64_t a3)
{
  id v4;

  if (a1 == 1)
  {
    if (a2)
    {
      type metadata accessor for CFString(0);
      type metadata accessor for CFNumber(0);
      sub_100005A54(&qword_10006E790, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_10004A844);
      v4 = a2;
      static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();

    }
  }
  else if (!a1)
  {
    *(_WORD *)(a3 + 128) = 1;
    *(_QWORD *)(a3 + 136) = 0;
    *(_BYTE *)(a3 + 144) = 1;
  }
}

void sub_10002F3F4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  id v7;

  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

void sub_10002F454(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  const char *v7;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t internal_state;
  uint64_t v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  int v22;

  v22 = 0;
  if (aks_get_lock_state(4294967293, &v22))
  {
    if (qword_10006E5C0 != -1)
      swift_once(&qword_10006E5C0, sub_10001AB28);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_100005D1C(v2, (uint64_t)qword_100071AE0);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v4, v5))
      goto LABEL_14;
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    v7 = "Failed to get initial lock state";
    goto LABEL_13;
  }
  v8 = v22;
  v9 = v22 & 1;
  if (qword_10006E5C0 != -1)
    swift_once(&qword_10006E5C0, sub_10001AB28);
  v10 = type metadata accessor for Logger(0);
  v11 = sub_100005D1C(v10, (uint64_t)qword_100071AE0);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc(14, -1);
    *(_DWORD *)v14 = 67109376;
    LODWORD(v17[0]) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v17, (char *)v17 + 4);
    *(_WORD *)(v14 + 8) = 1024;
    LODWORD(v17[0]) = (v8 & 4) >> 2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v17, (char *)v17 + 4);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Initial lock state: %{BOOL}d, beenUnlocked=%{BOOL}d", (uint8_t *)v14, 0xEu);
    swift_slowDealloc(v14, -1, -1);
  }

  v21 = 0;
  v19 = 0u;
  v20 = 0u;
  v18 = 0u;
  memset(v17, 0, sizeof(v17));
  internal_state = aks_get_internal_state(4294967293, v17);
  if ((_DWORD)internal_state)
  {
    v4 = Logger.logObject.getter(internal_state);
    v5 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v4, v5))
    {
LABEL_14:

      return;
    }
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    v7 = "Failed to get initial internal lock state";
LABEL_13:
    _os_log_impl((void *)&_mh_execute_header, v4, v5, v7, v6, 2u);
    swift_slowDealloc(v6, -1, -1);
    goto LABEL_14;
  }
  *(_BYTE *)(a1 + 128) = (v8 & 4) >> 2;
  *(_BYTE *)(a1 + 129) = v9;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 1;
  v16 = *(_QWORD *)((char *)&v18 + 2);
  *(_QWORD *)(a1 + 152) = DWORD1(v17[0]) | ((unint64_t)LODWORD(v17[0]) << 32);
  *(_QWORD *)(a1 + 160) = v16;
  *(_BYTE *)(a1 + 168) = 0;
}

uint64_t sub_10002F71C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_10002F73C()
{
  uint64_t v0;

  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for LockStateObserver()
{
  return objc_opt_self(_TtC14applekeystored17LockStateObserver);
}

__n128 initializeBufferWithCopyOfBuffer for SplunkLoggerConfig(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for RawLockState(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for RawLockState(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for RawLockState()
{
  return &type metadata for RawLockState;
}

uint64_t sub_10002F7E4()
{
  uint64_t v0;

  return v0;
}

unint64_t sub_10002F7F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100070650;
  if (!qword_100070650)
  {
    v1 = sub_100005F1C(&qword_100070648);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100070650);
  }
  return result;
}

void sub_10002F83C(int a1, void *a2)
{
  uint64_t v2;

  sub_10002ED60(a1, a2, v2);
}

uint64_t sub_10002F844(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10002F854(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_10002F85C()
{
  uint64_t v0;

  sub_10002F454(v0);
}

uint64_t sub_10002F864()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002F874()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10002F894@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for MessageEncoder()
{
  return objc_opt_self(_TtC14applekeystored14MessageEncoder);
}

uint64_t sub_10002F8E4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  char v16;
  char v17;

  v7 = sub_100005690(&qword_1000710B0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_100005E2C(a1, v11);
  v13 = sub_1000313FC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SplunkLoggerConfig.CodingKeys, &type metadata for SplunkLoggerConfig.CodingKeys, v13, v11, v12);
  v17 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v17, v7);
  if (!v3)
  {
    v16 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(a3, &v16, v7);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

BOOL sub_10002FA00(char a1, char a2)
{
  return a1 == a2;
}

void sub_10002FA10(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

uint64_t sub_10002FA34(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 1701669236 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701669236, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7974656372756F73 && a2 == 0xEA00000000006570)
  {
    v7 = 0xEA00000000006570;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7974656372756F73, 0xEA00000000006570, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x7865646E69 && a2 == 0xE500000000000000)
  {
    v8 = 0xE500000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7865646E69, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x746E657665 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746E657665, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

Swift::Int sub_10002FBD8(unsigned __int8 a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t sub_10002FC1C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10002FC48 + 4 * byte_10004D5E0[a1]))(1701669236, 0xE400000000000000);
}

uint64_t sub_10002FC48()
{
  return 0x7974656372756F73;
}

uint64_t sub_10002FC64()
{
  return 0x7865646E69;
}

uint64_t sub_10002FC78()
{
  return 0x746E657665;
}

uint64_t sub_10002FC8C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t WitnessTable;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  char v31;
  char v32;
  char v33;
  char v34;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v27 = *(_QWORD *)(a2 + 32);
  v28 = v4;
  v6 = type metadata accessor for SplunkMessage.CodingKeys(255, v4, v5, v27);
  WitnessTable = swift_getWitnessTable(&unk_10004D910, v6);
  v8 = type metadata accessor for KeyedEncodingContainer(0, v6, WitnessTable);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v27 - v10;
  v12 = a1[3];
  v13 = a1[4];
  sub_100005E2C(a1, v12);
  v14 = v12;
  v15 = v29;
  dispatch thunk of Encoder.container<A>(keyedBy:)(v6, v6, WitnessTable, v14, v13);
  v16 = *v15;
  v34 = 0;
  v17 = v30;
  KeyedEncodingContainer.encode(_:forKey:)(v16, &v34, v8);
  if (v17)
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v19 = v9;
  v20 = v27;
  v21 = v28;
  v22 = v15[1];
  v23 = v15[2];
  v33 = 1;
  KeyedEncodingContainer.encode(_:forKey:)(v22, v23, &v33, v8);
  v24 = v15[3];
  v25 = v15[4];
  v32 = 2;
  KeyedEncodingContainer.encode(_:forKey:)(v24, v25, &v32, v8);
  v26 = (char *)v15 + *(int *)(a2 + 52);
  v31 = 3;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v26, &v31, v8, v21, v20);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v11, v8);
}

uint64_t sub_10002FE3C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t WitnessTable;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;
  char v48;

  v40 = a5;
  v39 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v38 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for SplunkMessage.CodingKeys(255, v10, v11, v12);
  WitnessTable = swift_getWitnessTable(&unk_10004D910, v13);
  v43 = type metadata accessor for KeyedDecodingContainer(0, v13, WitnessTable);
  v37 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v16 = (char *)&v35 - v15;
  v41 = a2;
  v36 = a3;
  v35 = type metadata accessor for SplunkMessage(0, a2, a3, a4);
  v17 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v19 = (char *)&v35 - v18;
  v21 = a1[3];
  v20 = a1[4];
  sub_100005E2C(a1, v21);
  v42 = v16;
  v22 = v44;
  dispatch thunk of Decoder.container<A>(keyedBy:)(v13, v13, WitnessTable, v21, v20);
  if (v22)
    return sub_100005D78(a1);
  v44 = v17;
  v24 = v37;
  v23 = v38;
  v25 = v19;
  v26 = a1;
  v28 = v40;
  v27 = v41;
  v29 = v39;
  v48 = 0;
  *(_QWORD *)v25 = KeyedDecodingContainer.decode(_:forKey:)(&v48, v43);
  v47 = 1;
  *((_QWORD *)v25 + 1) = KeyedDecodingContainer.decode(_:forKey:)(&v47, v43);
  *((_QWORD *)v25 + 2) = v30;
  v46 = 2;
  *((_QWORD *)v25 + 3) = KeyedDecodingContainer.decode(_:forKey:)(&v46, v43);
  *((_QWORD *)v25 + 4) = v31;
  v45 = 3;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v27, &v45, v43, v27, v36);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v42, v43);
  v32 = v35;
  (*(void (**)(char *, char *, uint64_t))(v29 + 32))(&v25[*(int *)(v35 + 52)], v23, v27);
  v33 = v44;
  (*(void (**)(uint64_t, char *, uint64_t))(v44 + 16))(v28, v25, v32);
  sub_100005D78(v26);
  return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v25, v32);
}

unint64_t sub_100030120()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000011;
  else
    return 0xD000000000000010;
}

uint64_t sub_100030160@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000311C4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100030184(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000313FC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000301AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000313FC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000301D4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1000312AC(a1);
  if (!v2)
  {
    *(_BYTE *)a2 = result & 1;
    *(_QWORD *)(a2 + 8) = v5;
  }
  return result;
}

uint64_t sub_100030204(_QWORD *a1)
{
  unsigned __int8 *v1;

  return sub_10002F8E4(a1, *v1, *((_QWORD *)v1 + 1));
}

BOOL sub_100030220(char *a1, char *a2)
{
  return sub_10002FA00(*a1, *a2);
}

Swift::Int sub_100030238()
{
  unsigned __int8 *v0;

  return sub_10002FBD8(*v0);
}

void sub_100030248(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_10002FA10(a1, *v1);
}

Swift::Int sub_100030258(uint64_t a1)
{
  unsigned __int8 *v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  sub_10002FA10((uint64_t)v3, *v1);
  return Hasher._finalize()();
}

uint64_t sub_1000302A0()
{
  unsigned __int8 *v0;

  return sub_10002FC1C(*v0);
}

uint64_t sub_1000302B0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10002FA34(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000302E0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_100031F3C();
  *a1 = result;
  return result;
}

uint64_t sub_100030310(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10004D910, a1);
  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_100030344(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10004D910, a1);
  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

uint64_t sub_100030378@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10002FE3C(a1, a2[2], a2[3], a2[4], a3);
}

uint64_t sub_100030398(_QWORD *a1, uint64_t a2)
{
  return sub_10002FC8C(a1, a2);
}

uint64_t sub_1000303AC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1[11] = v0;
  v2 = type metadata accessor for URL(0);
  v1[12] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[13] = v3;
  v1[14] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for URLRequest(0);
  v1[15] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[16] = v5;
  v1[17] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100030434, 0, 0);
}

void sub_100030434()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);
  swift_beginAccess(v1 + 40, v0 + 16, 0, 0);
  __asm { BR              X12 }
}

uint64_t sub_100030734(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  void (*v9)();

  v7 = *v4;
  v8 = *(_QWORD *)(*v4 + 152);
  *(_QWORD *)(v7 + 160) = a3;
  *(_QWORD *)(v7 + 168) = v3;
  swift_task_dealloc(v8);
  if (v3)
  {
    v9 = sub_100030BFC;
  }
  else
  {

    sub_10001BAC4(a1, a2);
    v9 = sub_1000307BC;
  }
  return swift_task_switch(v9, 0, 0);
}

void sub_1000307BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  int v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  void *v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = objc_opt_self(NSHTTPURLResponse);
  v3 = swift_dynamicCastObjCClass(v1, v2);
  if (v3)
  {
    v4 = (void *)v3;
    v5 = *(id *)(v0 + 160);
    if (objc_msgSend(v4, "statusCode") != (id)200)
    {
      if (qword_10006E5C0 != -1)
        swift_once(&qword_10006E5C0, sub_10001AB28);
      v17 = *(void **)(v0 + 160);
      v18 = type metadata accessor for Logger(0);
      sub_100005D1C(v18, (uint64_t)qword_100071AE0);
      v19 = Logger.logObject.getter(v17);
      v20 = static os_log_type_t.error.getter();
      v21 = os_log_type_enabled(v19, v20);
      v22 = *(void **)(v0 + 160);
      if (v21)
      {
        v23 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v23 = 134217984;
        *(_QWORD *)(v0 + 80) = objc_msgSend(v4, "statusCode");
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88);

        _os_log_impl((void *)&_mh_execute_header, v19, v20, "failed to post telemetry: %ld", v23, 0xCu);
        swift_slowDealloc(v23, -1, -1);

      }
      else
      {

      }
LABEL_20:
      v24 = *(_QWORD *)(v0 + 88);
      swift_beginAccess(v24 + 40, v0 + 40, 33, 0);
      __asm { BR              X12 }
    }

  }
  if (qword_10006E5C0 != -1)
    swift_once(&qword_10006E5C0, sub_10001AB28);
  v6 = *(_QWORD *)(v0 + 88);
  v7 = type metadata accessor for Logger(0);
  sub_100005D1C(v7, (uint64_t)qword_100071AE0);
  v8 = swift_retain_n(v6, 2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = *(unsigned __int8 *)(v0 + 176);
    v25 = *(_QWORD *)(v0 + 88);
    v26 = *(void **)(v0 + 160);
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    *(_DWORD *)v12 = 136315138;
    v27 = v13;
    if (v11)
      v14 = 0x69746375646F7270;
    else
      v14 = 24945;
    if (v11)
      v15 = 0xEA00000000006E6FLL;
    else
      v15 = 0xE200000000000000;
    *(_QWORD *)(v0 + 72) = sub_100016DBC(v14, v15, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80);
    swift_bridgeObjectRelease(v15);
    swift_release_n(v25, 2);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "successfully posted telemetry to %s server", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {
    v16 = *(_QWORD *)(v0 + 88);

    swift_release_n(v16, 2);
  }
  goto LABEL_20;
}

void sub_100030BFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  v1 = v0 + 40;

  if (qword_10006E5C0 != -1)
    swift_once(&qword_10006E5C0, sub_10001AB28);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = type metadata accessor for Logger(0);
  sub_100005D1C(v3, (uint64_t)qword_100071AE0);
  swift_errorRetain(v2);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 168);
  if (v7)
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v9 = 138412290;
    swift_errorRetain(v8);
    v11 = _swift_stdlib_bridgeErrorToNSError(v8);
    *(_QWORD *)(v0 + 64) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72);
    *v10 = v11;
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "failed to post telemetry: %@", v9, 0xCu);
    v12 = sub_100005690(&qword_10006FFB8);
    swift_arrayDestroy(v10, 1, v12);
    v13 = v10;
    v1 = v0 + 40;
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    swift_errorRelease(v8);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 168));
    swift_errorRelease(v8);
    swift_errorRelease(v8);

  }
  v14 = *(_QWORD *)(v0 + 88);
  swift_beginAccess(v14 + 40, v1, 33, 0);
  __asm { BR              X12 }
}

uint64_t sub_100030E9C(uint64_t a1)
{
  return sub_100030EE4(a1, qword_100070F58, 0xD000000000000034, 0x8000000100051BC0);
}

uint64_t sub_100030EC0(uint64_t a1)
{
  return sub_100030EE4(a1, qword_100070F70, 0xD000000000000037, 0x8000000100051C80);
}

uint64_t sub_100030EE4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v7 = sub_100005690(qword_1000710B8);
  __chkstk_darwin(v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  sub_100005D98(v10, a2);
  v11 = sub_100005D1C(v10, (uint64_t)a2);
  URL.init(string:)(a3, a4);
  v12 = *(_QWORD *)(v10 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v10);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(v11, v9, v10);
  __break(1u);
  return result;
}

uint64_t sub_100030FC0(uint64_t a1)
{
  return sub_100031000(a1, 0x8000000100051C00, &qword_100070F88, &qword_100070F90);
}

uint64_t sub_100030FE0(uint64_t a1)
{
  return sub_100031000(a1, 0x8000000100051C40, &qword_100070F98, &qword_100070FA0);
}

uint64_t sub_100031000(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v7 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = Data.init(base64Encoded:options:)(0xD000000000000030, a2, 0);
  if (v11 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    v12 = result;
    v13 = v11;
    static String.Encoding.utf8.getter(result);
    v14 = String.init(data:encoding:)(v12, v13, v9);
    v16 = v15;
    result = sub_10001BAB0(v12, v13);
    if (v16)
    {
      *a3 = v14;
      *a4 = v16;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1000310D4()
{
  _QWORD *v0;

  swift_release(v0[4]);
  sub_10001BAC4(v0[5], v0[6]);
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for SplunkLogger()
{
  return objc_opt_self(_TtC14applekeystored12SplunkLogger);
}

uint64_t getEnumTagSinglePayload for SplunkLoggerConfig(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[16])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SplunkLoggerConfig(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for SplunkLoggerConfig()
{
  return &type metadata for SplunkLoggerConfig;
}

uint64_t sub_1000311C4(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  char v6;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x8000000100051CC0;
    if (a2 == 0x8000000100051CC0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100051CC0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x8000000100051CE0)
  {
    swift_bridgeObjectRelease(0x8000000100051CE0);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100051CE0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1000312AC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  char v12;
  char v13;

  v3 = sub_100005690(&qword_1000710A0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_100005E2C(a1, v7);
  v9 = sub_1000313FC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SplunkLoggerConfig.CodingKeys, &type metadata for SplunkLoggerConfig.CodingKeys, v9, v7, v8);
  if (!v1)
  {
    v13 = 0;
    LOBYTE(v7) = KeyedDecodingContainer.decode(_:forKey:)(&v13, v3);
    v12 = 1;
    KeyedDecodingContainer.decode(_:forKey:)(&v12, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  sub_100005D78(a1);
  return v7 & 1;
}

unint64_t sub_1000313FC()
{
  unint64_t result;

  result = qword_1000710A8;
  if (!qword_1000710A8)
  {
    result = swift_getWitnessTable(&unk_10004D7F4, &type metadata for SplunkLoggerConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000710A8);
  }
  return result;
}

uint64_t sub_100031440(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100031484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 40);
}

uint64_t sub_10003148C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = &unk_10004D6B8;
  v4[2] = &unk_10004D6B8;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 4, v4, a1 + 40);
    return 0;
  }
  return result;
}

uint64_t *sub_100031514(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 40) & (unint64_t)~v6) + *(_QWORD *)(v5 + 64) > 0x18)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain(v9);
  }
  else
  {
    v11 = *a2;
    v10 = (unint64_t)a2 + 15;
    *a1 = v11;
    v12 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v12 = *(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF8);
    v13 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFFF8) + 8);
    v12[1] = v13;
    v14 = (_QWORD *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
    v15 = (_QWORD *)(((v10 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8);
    *v14 = *v15;
    v16 = v15[1];
    v14[1] = v16;
    v17 = ((unint64_t)v14 + v6 + 16) & ~v6;
    v18 = ((unint64_t)v15 + v6 + 16) & ~v6;
    v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v16);
    v19(v17, v18, v4);
  }
  return v3;
}

uint64_t sub_10003161C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = (a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v3 + 8));
  v4 = (v3 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + 8));
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((v4 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *sub_100031674(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);

  v5 = *a2;
  v4 = (unint64_t)a2 + 15;
  *a1 = v5;
  v6 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
  v7 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 8);
  v6[1] = v7;
  v8 = (_QWORD *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF8);
  v9 = (_QWORD *)(((v4 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8);
  *v8 = *v9;
  v10 = v9[1];
  v8[1] = v10;
  v11 = *(_QWORD *)(a3 + 16);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = ((unint64_t)v8 + v13 + 16) & ~v13;
  v15 = ((unint64_t)v9 + v13 + 16) & ~v13;
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v10);
  v16(v14, v15, v11);
  return a1;
}

_QWORD *sub_100031728(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = v6[1];
  v8 = v5[1];
  v5[1] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  v9 = (_QWORD *)(((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  v11 = v10[1];
  v12 = v9[1];
  v9[1] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v13 + 24))(((unint64_t)v9 + *(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80), ((unint64_t)v10 + *(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  return a1;
}

_QWORD *sub_1000317E8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _OWORD *v4;
  _OWORD *v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;

  *a1 = *a2;
  v4 = (_OWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_OWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = (_OWORD *)(((unint64_t)v4 + 23) & 0xFFFFFFFFFFFFFFF8);
  v7 = (_OWORD *)(((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *v7;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 32))(((unint64_t)v6 + *(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), ((unint64_t)v7 + *(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

_QWORD *sub_10003185C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = v5[1];
  v5[1] = v6[1];
  swift_bridgeObjectRelease(v7);
  v8 = (_QWORD *)(((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFF8);
  v9 = (_QWORD *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v8 = *v9;
  v10 = v8[1];
  v8[1] = v9[1];
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v11 + 40))(((unint64_t)v8 + *(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), ((unint64_t)v9 + *(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  return a1;
}

uint64_t sub_100031904(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 40) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      v15 = (a1 + 15) & 0xFFFFFFFFFFFFFFF8;
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((((v15 + 23) & 0xFFFFFFFFFFFFFFF8) + v7 + 16) & ~v7);
      v16 = *(_QWORD *)(v15 + 8);
      if (v16 >= 0xFFFFFFFF)
        LODWORD(v16) = -1;
      return (v16 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1000319D8 + 4 * byte_10004D5E4[(v9 - 1)]))();
}

void sub_100031A58(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = &dword_100000004;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = &_mh_execute_header.magic + 1;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata accessor for SplunkMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100031E1C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SplunkMessage);
}

uint64_t storeEnumTagSinglePayload for SplunkLoggerConfig.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100031CB8 + 4 * byte_10004D5F7[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100031CEC + 4 * byte_10004D5F2[v4]))();
}

uint64_t sub_100031CEC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100031CF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100031CFCLL);
  return result;
}

uint64_t sub_100031D08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100031D10);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100031D14(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100031D1C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SplunkLoggerConfig.CodingKeys()
{
  return &type metadata for SplunkLoggerConfig.CodingKeys;
}

unint64_t sub_100031D3C()
{
  unint64_t result;

  result = qword_100071140;
  if (!qword_100071140)
  {
    result = swift_getWitnessTable(&unk_10004D77C, &type metadata for SplunkLoggerConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100071140);
  }
  return result;
}

unint64_t sub_100031D84()
{
  unint64_t result;

  result = qword_100071148;
  if (!qword_100071148)
  {
    result = swift_getWitnessTable(&unk_10004D6EC, &type metadata for SplunkLoggerConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100071148);
  }
  return result;
}

unint64_t sub_100031DCC()
{
  unint64_t result;

  result = qword_100071150[0];
  if (!qword_100071150[0])
  {
    result = swift_getWitnessTable(&unk_10004D714, &type metadata for SplunkLoggerConfig.CodingKeys);
    atomic_store(result, qword_100071150);
  }
  return result;
}

uint64_t type metadata accessor for SplunkMessage.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100031E1C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SplunkMessage.CodingKeys);
}

uint64_t sub_100031E1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t sub_100031E48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t sub_100031E50(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100031E9C + 4 * byte_10004D601[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100031ED0 + 4 * byte_10004D5FC[v4]))();
}

uint64_t sub_100031ED0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100031ED8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100031EE0);
  return result;
}

uint64_t sub_100031EEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100031EF4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100031EF8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100031F00(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100031F0C(uint64_t a1)
{
  return swift_getWitnessTable(&unk_10004D8E8, a1);
}

uint64_t sub_100031F1C(uint64_t a1)
{
  return swift_getWitnessTable(&unk_10004D858, a1);
}

uint64_t sub_100031F2C(uint64_t a1)
{
  return swift_getWitnessTable(&unk_10004D880, a1);
}

uint64_t sub_100031F3C()
{
  return 4;
}

double sub_100031F44()
{
  double result;
  _OWORD v1[2];
  __int128 v2;
  __int128 v3;

  sub_1000321D8(v1);
  xmmword_100071B10 = v1[0];
  *(_OWORD *)&qword_100071B20 = v1[1];
  result = *(double *)&v2;
  xmmword_100071B30 = v2;
  *(_OWORD *)&qword_100071B40 = v3;
  return result;
}

double sub_100031F7C@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  NSString v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v16 = 0;
  v6 = String._bridgeToObjectiveC()();
  v7 = MGCopyAnswerWithError(v6, 0, &v16);

  if (v7)
  {
    if (!v16)
    {
      *(_QWORD *)(a3 + 24) = swift_getObjectType(v7);
      *(_QWORD *)a3 = v7;
      return result;
    }
    if (qword_10006E5C0 != -1)
      swift_once(&qword_10006E5C0, sub_10001AB28);
    v8 = type metadata accessor for Logger(0);
    sub_100005D1C(v8, (uint64_t)qword_100071AE0);
    v9 = swift_bridgeObjectRetain_n(a2, 2);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = swift_slowAlloc(18, -1);
      v13 = swift_slowAlloc(32, -1);
      v19 = v13;
      *(_DWORD *)v12 = 136315394;
      swift_bridgeObjectRetain(a2);
      v17 = sub_100016DBC(a1, a2, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18);
      swift_bridgeObjectRelease_n(a2, 3);
      *(_WORD *)(v12 + 12) = 1024;
      swift_beginAccess(&v16, &v17, 0, 0);
      v15 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "MobileGestalt query failed for key %s: %d", (uint8_t *)v12, 0x12u);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
  }
  result = 0.0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  return result;
}

uint64_t sub_1000321D8@<X0>(_QWORD *a1@<X8>)
{
  void *v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t result;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE v17[24];
  uint64_t v18;

  v2 = objc_autoreleasePoolPush();
  sub_100031F7C(0x536C65646F4D5748, 0xEA00000000007274, (uint64_t)v17);
  objc_autoreleasePoolPop(v2);
  if (v18)
  {
    if (swift_dynamicCast(&v15, v17, (char *)&type metadata for Any + 8, &type metadata for String, 6))
    {
      v3 = v15;
      v4 = v16;
      goto LABEL_6;
    }
  }
  else
  {
    sub_100032408((uint64_t)v17);
  }
  v3 = 0;
  v4 = 0xE000000000000000;
LABEL_6:
  v5 = objc_autoreleasePoolPush();
  sub_100031F7C(0x754E6C6169726553, 0xEC0000007265626DLL, (uint64_t)v17);
  objc_autoreleasePoolPop(v5);
  if (v18)
  {
    if (swift_dynamicCast(&v15, v17, (char *)&type metadata for Any + 8, &type metadata for String, 6))
    {
      v6 = v15;
      v7 = v16;
      goto LABEL_11;
    }
  }
  else
  {
    sub_100032408((uint64_t)v17);
  }
  v6 = 0;
  v7 = 0xE000000000000000;
LABEL_11:
  v8 = objc_autoreleasePoolPush();
  sub_100031F7C(0x6544657571696E55, 0xEE00444965636976, (uint64_t)v17);
  objc_autoreleasePoolPop(v8);
  if (v18)
  {
    if (swift_dynamicCast(&v15, v17, (char *)&type metadata for Any + 8, &type metadata for String, 6))
    {
      v9 = v15;
      v10 = v16;
      goto LABEL_16;
    }
  }
  else
  {
    sub_100032408((uint64_t)v17);
  }
  v9 = 0;
  v10 = 0xE000000000000000;
LABEL_16:
  v11 = objc_autoreleasePoolPush();
  sub_100031F7C(0x726556646C697542, 0xEC0000006E6F6973, (uint64_t)v17);
  objc_autoreleasePoolPop(v11);
  if (!v18)
  {
    result = sub_100032408((uint64_t)v17);
    goto LABEL_20;
  }
  result = swift_dynamicCast(&v15, v17, (char *)&type metadata for Any + 8, &type metadata for String, 6);
  if (!(_DWORD)result)
  {
LABEL_20:
    v13 = 0;
    v14 = 0xE000000000000000;
    goto LABEL_21;
  }
  v13 = v15;
  v14 = v16;
LABEL_21:
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v9;
  a1[5] = v10;
  a1[6] = v13;
  a1[7] = v14;
  return result;
}

uint64_t sub_100032408(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005690(&qword_1000711D8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_100032448(uint64_t a1)
{
  uint64_t v1;
  os_log_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  double v27;
  _QWORD v29[2];
  os_log_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  _BYTE v50[32];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _OWORD v58[11];

  v3 = v1;
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v47 = *(_QWORD *)(a1 + 24);
  v48 = v7;
  v8 = *(_QWORD *)(a1 + 32);
  v45 = *(_QWORD *)(a1 + 40);
  v46 = v8;
  v9 = *(_QWORD *)(a1 + 48);
  v43 = *(_QWORD *)(a1 + 56);
  v44 = v9;
  v10 = *(_QWORD *)(a1 + 64);
  v41 = *(_QWORD *)(a1 + 72);
  v42 = v10;
  v11 = *(_QWORD *)(a1 + 80);
  v39 = *(_QWORD *)(a1 + 88);
  v40 = v11;
  v38 = *(_QWORD *)(a1 + 96);
  LODWORD(v11) = *(unsigned __int8 *)(a1 + 104);
  v36 = *(unsigned __int8 *)(a1 + 105);
  v37 = v11;
  v35 = *(_QWORD *)(a1 + 112);
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v1 + 96) != 1)
    goto LABEL_8;
  v16 = sub_10003989C(a1, *(_QWORD *)(v1 + 144));
  if (!v17)
    goto LABEL_8;
  v2 = v17;
  v33 = v16;
  v34 = v6;
  if (qword_10006E5C0 != -1)
    goto LABEL_15;
  while (1)
  {
    v18 = type metadata accessor for Logger(0);
    sub_100005D1C(v18, (uint64_t)qword_100071AE0);
    swift_bridgeObjectRetain(v2);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = swift_slowAlloc(12, -1);
      v30 = v20;
      v23 = (uint8_t *)v22;
      v31 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v58[0] = v31;
      v32 = v5;
      *(_DWORD *)v23 = 136315138;
      v29[1] = v23 + 4;
      swift_bridgeObjectRetain(v2);
      *(_QWORD *)&v49 = sub_100016DBC(v33, (unint64_t)v2, (uint64_t *)v58);
      v5 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, (char *)&v49 + 8);
      swift_bridgeObjectRelease_n(v2, 3);
      v2 = v30;
      _os_log_impl((void *)&_mh_execute_header, v30, v21, "splunk event: %s", v23, 0xCu);
      v24 = v31;
      swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v2, 2);
    }
    v6 = v34;
LABEL_8:
    v3 = *(_QWORD *)(v3 + 136);
    v25 = sub_10003B9A0((_QWORD *)a1);
    v26 = Date.init()(v25);
    v27 = Date.timeIntervalSince1970.getter(v26);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    if ((~*(_QWORD *)&v27 & 0x7FF0000000000000) == 0)
    {
      __break(1u);
LABEL_13:
      __break(1u);
      goto LABEL_14;
    }
    if (v27 <= -1.0)
      goto LABEL_13;
    if (v27 < 1.84467441e19)
      break;
LABEL_14:
    __break(1u);
LABEL_15:
    swift_once(&qword_10006E5C0, sub_10001AB28);
  }
  *(_QWORD *)&v49 = (unint64_t)v27;
  *((_QWORD *)&v49 + 1) = 7633012;
  *(_QWORD *)v50 = 0xE300000000000000;
  strcpy(&v50[8], "dataprotection");
  v50[23] = -18;
  *(_QWORD *)&v50[24] = v5;
  *(_QWORD *)&v51 = v6;
  *((_QWORD *)&v51 + 1) = v48;
  *(_QWORD *)&v52 = v47;
  *((_QWORD *)&v52 + 1) = v46;
  *(_QWORD *)&v53 = v45;
  *((_QWORD *)&v53 + 1) = v44;
  *(_QWORD *)&v54 = v43;
  *((_QWORD *)&v54 + 1) = v42;
  *(_QWORD *)&v55 = v41;
  *((_QWORD *)&v55 + 1) = v40;
  *(_QWORD *)&v56 = v39;
  *((_QWORD *)&v56 + 1) = v38;
  LOBYTE(v57) = v37;
  BYTE1(v57) = v36;
  *((_QWORD *)&v57 + 1) = v35;
  v58[4] = v52;
  v58[5] = v53;
  v58[6] = v54;
  v58[7] = v55;
  v58[2] = *(_OWORD *)&v50[16];
  v58[3] = v51;
  v58[0] = v49;
  v58[1] = *(_OWORD *)v50;
  v58[8] = v56;
  v58[9] = v57;
  sub_1000333D4(v58);
  return sub_10003BA14(&v49);
}

_QWORD *sub_100032804(uint64_t a1)
{
  uint64_t v1;
  os_log_t v2;
  uint64_t v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  double v25;
  uint8_t *v27;
  os_log_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  __int128 v32;
  _BYTE v33[168];
  _OWORD v34[11];
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;

  v3 = v1;
  v5 = *(_OWORD *)(a1 + 112);
  v42 = *(_OWORD *)(a1 + 96);
  v43 = v5;
  v44 = *(_OWORD *)(a1 + 128);
  v6 = *(_OWORD *)(a1 + 48);
  v38 = *(_OWORD *)(a1 + 32);
  v39 = v6;
  v7 = *(_OWORD *)(a1 + 80);
  v40 = *(_OWORD *)(a1 + 64);
  v41 = v7;
  v8 = *(_OWORD *)(a1 + 16);
  v36 = *(_OWORD *)a1;
  v37 = v8;
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v1 + 96) != 1)
    goto LABEL_7;
  v13 = sub_100039B78(a1, *(_QWORD *)(v1 + 144));
  if (!v14)
    goto LABEL_7;
  v2 = v14;
  v31 = v13;
  if (qword_10006E5C0 != -1)
    goto LABEL_14;
  while (1)
  {
    v15 = type metadata accessor for Logger(0);
    sub_100005D1C(v15, (uint64_t)qword_100071AE0);
    swift_bridgeObjectRetain(v2);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v30 = (uint8_t *)swift_slowAlloc(12, -1);
      v29 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v34[0] = v29;
      v28 = v17;
      v19 = v30;
      *(_DWORD *)v30 = 136315138;
      v27 = v19 + 4;
      swift_bridgeObjectRetain(v2);
      *(_QWORD *)&v32 = sub_100016DBC(v31, (unint64_t)v2, (uint64_t *)v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, (char *)&v32 + 8);
      swift_bridgeObjectRelease_n(v2, 3);
      v2 = v28;
      v20 = v18;
      v21 = v30;
      _os_log_impl((void *)&_mh_execute_header, v28, v20, "splunk event: %s", v30, 0xCu);
      v22 = v29;
      swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v2, 2);
    }
LABEL_7:
    v3 = *(_QWORD *)(v3 + 136);
    v23 = sub_1000279C4((_QWORD *)a1);
    v24 = Date.init()(v23);
    v25 = Date.timeIntervalSince1970.getter(v24);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    if ((~*(_QWORD *)&v25 & 0x7FF0000000000000) == 0)
    {
      __break(1u);
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
    if (v25 <= -1.0)
      goto LABEL_12;
    if (v25 < 1.84467441e19)
      break;
LABEL_13:
    __break(1u);
LABEL_14:
    swift_once(&qword_10006E5C0, sub_10001AB28);
  }
  *(_OWORD *)&v33[120] = v42;
  *(_OWORD *)&v33[104] = v41;
  *(_OWORD *)&v33[136] = v43;
  *(_OWORD *)&v33[152] = v44;
  *(_OWORD *)&v33[40] = v37;
  *(_OWORD *)&v33[56] = v38;
  *(_OWORD *)&v33[72] = v39;
  *(_OWORD *)&v33[88] = v40;
  *(_QWORD *)&v32 = (unint64_t)v25;
  *((_QWORD *)&v32 + 1) = 7633012;
  *(_QWORD *)v33 = 0xE300000000000000;
  strcpy(&v33[8], "dataprotection");
  v33[23] = -18;
  *(_OWORD *)&v33[24] = v36;
  v34[8] = *(_OWORD *)&v33[112];
  v34[9] = *(_OWORD *)&v33[128];
  v34[10] = *(_OWORD *)&v33[144];
  v35 = *((_QWORD *)&v44 + 1);
  v34[4] = *(_OWORD *)&v33[48];
  v34[5] = *(_OWORD *)&v33[64];
  v34[6] = *(_OWORD *)&v33[80];
  v34[7] = *(_OWORD *)&v33[96];
  v34[0] = v32;
  v34[1] = *(_OWORD *)v33;
  v34[2] = *(_OWORD *)&v33[16];
  v34[3] = *(_OWORD *)&v33[32];
  sub_100033568((uint64_t)v34);
  return sub_10003B81C(&v32);
}

_QWORD *sub_100032B88(uint64_t a1)
{
  uint64_t v1;
  os_log_t v2;
  uint64_t v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  double v25;
  uint8_t *v27;
  os_log_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  __int128 v32;
  _BYTE v33[152];
  _OWORD v34[10];
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  v3 = v1;
  v5 = *(_OWORD *)(a1 + 80);
  v40 = *(_OWORD *)(a1 + 64);
  v41 = v5;
  v6 = *(_OWORD *)(a1 + 112);
  v42 = *(_OWORD *)(a1 + 96);
  v43 = v6;
  v7 = *(_OWORD *)(a1 + 16);
  v36 = *(_OWORD *)a1;
  v37 = v7;
  v8 = *(_OWORD *)(a1 + 48);
  v38 = *(_OWORD *)(a1 + 32);
  v39 = v8;
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v1 + 96) != 1)
    goto LABEL_7;
  v13 = sub_10003A140(a1, *(_QWORD *)(v1 + 144));
  if (!v14)
    goto LABEL_7;
  v2 = v14;
  v31 = v13;
  if (qword_10006E5C0 != -1)
    goto LABEL_14;
  while (1)
  {
    v15 = type metadata accessor for Logger(0);
    sub_100005D1C(v15, (uint64_t)qword_100071AE0);
    swift_bridgeObjectRetain(v2);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v30 = (uint8_t *)swift_slowAlloc(12, -1);
      v29 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v34[0] = v29;
      v28 = v17;
      v19 = v30;
      *(_DWORD *)v30 = 136315138;
      v27 = v19 + 4;
      swift_bridgeObjectRetain(v2);
      *(_QWORD *)&v32 = sub_100016DBC(v31, (unint64_t)v2, (uint64_t *)v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, (char *)&v32 + 8);
      swift_bridgeObjectRelease_n(v2, 3);
      v2 = v28;
      v20 = v18;
      v21 = v30;
      _os_log_impl((void *)&_mh_execute_header, v28, v20, "splunk event: %s", v30, 0xCu);
      v22 = v29;
      swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v2, 2);
    }
LABEL_7:
    v3 = *(_QWORD *)(v3 + 136);
    v23 = sub_10002786C((_QWORD *)a1);
    v24 = Date.init()(v23);
    v25 = Date.timeIntervalSince1970.getter(v24);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    if ((~*(_QWORD *)&v25 & 0x7FF0000000000000) == 0)
    {
      __break(1u);
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
    if (v25 <= -1.0)
      goto LABEL_12;
    if (v25 < 1.84467441e19)
      break;
LABEL_13:
    __break(1u);
LABEL_14:
    swift_once(&qword_10006E5C0, sub_10001AB28);
  }
  *(_QWORD *)&v32 = (unint64_t)v25;
  *((_QWORD *)&v32 + 1) = 7633012;
  *(_QWORD *)v33 = 0xE300000000000000;
  strcpy(&v33[8], "dataprotection");
  v33[23] = -18;
  *(_OWORD *)&v33[24] = v36;
  *(_OWORD *)&v33[40] = v37;
  *(_OWORD *)&v33[88] = v40;
  *(_OWORD *)&v33[104] = v41;
  *(_OWORD *)&v33[120] = v42;
  *(_OWORD *)&v33[136] = v43;
  *(_OWORD *)&v33[56] = v38;
  *(_OWORD *)&v33[72] = v39;
  v34[2] = *(_OWORD *)&v33[16];
  v34[1] = *(_OWORD *)v33;
  v34[0] = v32;
  v34[5] = *(_OWORD *)&v33[64];
  v34[6] = *(_OWORD *)&v33[80];
  v34[3] = *(_OWORD *)&v33[32];
  v34[4] = *(_OWORD *)&v33[48];
  v35 = *((_QWORD *)&v43 + 1);
  v34[8] = *(_OWORD *)&v33[112];
  v34[9] = *(_OWORD *)&v33[128];
  v34[7] = *(_OWORD *)&v33[96];
  sub_1000338B0((uint64_t)v34);
  return sub_10003B4C0(&v32);
}

_QWORD *sub_100032EF8(uint64_t a1)
{
  uint64_t v1;
  os_log_t v2;
  uint64_t v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint8_t *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  double v24;
  uint8_t *v26;
  os_log_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  _BYTE v31[208];
  _OWORD v32[14];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  v3 = v1;
  v5 = *(_OWORD *)(a1 + 144);
  v41 = *(_OWORD *)(a1 + 128);
  v42 = v5;
  v43 = *(_OWORD *)(a1 + 160);
  v44 = *(_QWORD *)(a1 + 176);
  v6 = *(_OWORD *)(a1 + 80);
  v37 = *(_OWORD *)(a1 + 64);
  v38 = v6;
  v7 = *(_OWORD *)(a1 + 112);
  v39 = *(_OWORD *)(a1 + 96);
  v40 = v7;
  v8 = *(_OWORD *)(a1 + 16);
  v33 = *(_OWORD *)a1;
  v34 = v8;
  v9 = *(_OWORD *)(a1 + 48);
  v35 = *(_OWORD *)(a1 + 32);
  v36 = v9;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v1 + 96) != 1)
    goto LABEL_7;
  v29 = sub_100039E54(a1, *(_QWORD *)(v1 + 144));
  if (!v14)
    goto LABEL_7;
  v2 = v14;
  if (qword_10006E5C0 != -1)
    goto LABEL_14;
  while (1)
  {
    v15 = type metadata accessor for Logger(0);
    sub_100005D1C(v15, (uint64_t)qword_100071AE0);
    swift_bridgeObjectRetain(v2);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v28 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v32[0] = v28;
      v27 = v17;
      v20 = v19;
      *(_DWORD *)v19 = 136315138;
      v26 = v19 + 4;
      swift_bridgeObjectRetain(v2);
      *(_QWORD *)&v30 = sub_100016DBC(v29, (unint64_t)v2, (uint64_t *)v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, (char *)&v30 + 8);
      swift_bridgeObjectRelease_n(v2, 3);
      v2 = v27;
      _os_log_impl((void *)&_mh_execute_header, v27, v18, "splunk event: %s", v19, 0xCu);
      v21 = v28;
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v2, 2);
    }
LABEL_7:
    v3 = *(_QWORD *)(v3 + 136);
    v22 = sub_10002786C((_QWORD *)a1);
    v23 = Date.init()(v22);
    v24 = Date.timeIntervalSince1970.getter(v23);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    if ((~*(_QWORD *)&v24 & 0x7FF0000000000000) == 0)
    {
      __break(1u);
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
    if (v24 <= -1.0)
      goto LABEL_12;
    if (v24 < 1.84467441e19)
      break;
LABEL_13:
    __break(1u);
LABEL_14:
    swift_once(&qword_10006E5C0, sub_10001AB28);
  }
  *(_QWORD *)&v30 = (unint64_t)v24;
  *((_QWORD *)&v30 + 1) = 7633012;
  *(_QWORD *)v31 = 0xE300000000000000;
  strcpy(&v31[8], "dataprotection");
  v31[23] = -18;
  *(_OWORD *)&v31[152] = v41;
  *(_OWORD *)&v31[168] = v42;
  *(_OWORD *)&v31[184] = v43;
  *(_QWORD *)&v31[200] = v44;
  *(_OWORD *)&v31[88] = v37;
  *(_OWORD *)&v31[104] = v38;
  *(_OWORD *)&v31[120] = v39;
  *(_OWORD *)&v31[136] = v40;
  *(_OWORD *)&v31[24] = v33;
  *(_OWORD *)&v31[40] = v34;
  *(_OWORD *)&v31[56] = v35;
  *(_OWORD *)&v31[72] = v36;
  v32[10] = *(_OWORD *)&v31[144];
  v32[11] = *(_OWORD *)&v31[160];
  v32[12] = *(_OWORD *)&v31[176];
  v32[13] = *(_OWORD *)&v31[192];
  v32[6] = *(_OWORD *)&v31[80];
  v32[7] = *(_OWORD *)&v31[96];
  v32[8] = *(_OWORD *)&v31[112];
  v32[9] = *(_OWORD *)&v31[128];
  v32[2] = *(_OWORD *)&v31[16];
  v32[3] = *(_OWORD *)&v31[32];
  v32[4] = *(_OWORD *)&v31[48];
  v32[5] = *(_OWORD *)&v31[64];
  v32[0] = v30;
  v32[1] = *(_OWORD *)v31;
  sub_10003370C(v32);
  return sub_10003B4C0(&v30);
}

uint64_t sub_100033288(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v20[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6);
  if ((_DWORD)v8 == 1)
  {
    sub_10003B3BC(a1, &qword_100071440);
    v9 = 7168;
    v10 = *(_QWORD *)(a3 + 16);
    if (v10)
    {
LABEL_3:
      v11 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v10);
      swift_unknownObjectRetain(v10);
      v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
      v15 = v14;
      swift_unknownObjectRelease(v10);
      goto LABEL_6;
    }
  }
  else
  {
    v16 = TaskPriority.rawValue.getter(v8);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v9 = v16 | 0x1C00;
    v10 = *(_QWORD *)(a3 + 16);
    if (v10)
      goto LABEL_3;
  }
  v13 = 0;
  v15 = 0;
LABEL_6:
  v17 = swift_allocObject(&unk_100068A58, 32, 7);
  *(_QWORD *)(v17 + 16) = a2;
  *(_QWORD *)(v17 + 24) = a3;
  if (v15 | v13)
  {
    v20[0] = 0;
    v20[1] = 0;
    v18 = v20;
    v20[2] = v13;
    v20[3] = v15;
  }
  else
  {
    v18 = 0;
  }
  return swift_task_create(v9, v18, (char *)&type metadata for () + 8, &unk_100071470, v17);
}

uint64_t sub_1000333D4(_OWORD *a1)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BYTE v13[32];
  _OWORD v14[10];

  v2 = a1[7];
  v14[6] = a1[6];
  v14[7] = v2;
  v3 = a1[9];
  v14[8] = a1[8];
  v14[9] = v3;
  v4 = a1[3];
  v14[2] = a1[2];
  v14[3] = v4;
  v5 = a1[5];
  v14[4] = a1[4];
  v14[5] = v5;
  v6 = a1[1];
  v14[0] = *a1;
  v14[1] = v6;
  v7 = sub_100005690(&qword_100071588);
  v8 = sub_10003BB7C(&qword_100071590, &qword_100071588);
  v9 = dispatch thunk of JSONEncoder.encode<A>(_:)(v14, v7, v8);
  v11 = v10;
  swift_beginAccess(v1 + 40, v13, 33, 0);
  Data.append(_:)(v9, v11);
  swift_endAccess(v13);
  return sub_10001BAC4(v9, v11);
}

uint64_t sub_100033568(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BYTE v13[32];
  _OWORD v14[11];
  uint64_t v15;

  v2 = *(_OWORD *)(a1 + 144);
  v14[8] = *(_OWORD *)(a1 + 128);
  v14[9] = v2;
  v14[10] = *(_OWORD *)(a1 + 160);
  v15 = *(_QWORD *)(a1 + 176);
  v3 = *(_OWORD *)(a1 + 80);
  v14[4] = *(_OWORD *)(a1 + 64);
  v14[5] = v3;
  v4 = *(_OWORD *)(a1 + 112);
  v14[6] = *(_OWORD *)(a1 + 96);
  v14[7] = v4;
  v5 = *(_OWORD *)(a1 + 16);
  v14[0] = *(_OWORD *)a1;
  v14[1] = v5;
  v6 = *(_OWORD *)(a1 + 48);
  v14[2] = *(_OWORD *)(a1 + 32);
  v14[3] = v6;
  v7 = sub_100005690(&qword_100071568);
  v8 = sub_10003BB7C(&qword_100071570, &qword_100071568);
  v9 = dispatch thunk of JSONEncoder.encode<A>(_:)(v14, v7, v8);
  v11 = v10;
  swift_beginAccess(v1 + 40, v13, 33, 0);
  Data.append(_:)(v9, v11);
  swift_endAccess(v13);
  return sub_10001BAC4(v9, v11);
}

uint64_t sub_10003370C(_OWORD *a1)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _BYTE v15[32];
  _OWORD v16[14];

  v2 = a1[11];
  v16[10] = a1[10];
  v16[11] = v2;
  v3 = a1[13];
  v16[12] = a1[12];
  v16[13] = v3;
  v4 = a1[7];
  v16[6] = a1[6];
  v16[7] = v4;
  v5 = a1[9];
  v16[8] = a1[8];
  v16[9] = v5;
  v6 = a1[3];
  v16[2] = a1[2];
  v16[3] = v6;
  v7 = a1[5];
  v16[4] = a1[4];
  v16[5] = v7;
  v8 = a1[1];
  v16[0] = *a1;
  v16[1] = v8;
  v9 = sub_100005690(&qword_100071510);
  v10 = sub_10003BB7C(&qword_100071518, &qword_100071510);
  v11 = dispatch thunk of JSONEncoder.encode<A>(_:)(v16, v9, v10);
  v13 = v12;
  swift_beginAccess(v1 + 40, v15, 33, 0);
  Data.append(_:)(v11, v13);
  swift_endAccess(v15);
  return sub_10001BAC4(v11, v13);
}

uint64_t sub_1000338B0(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BYTE v13[32];
  _OWORD v14[10];
  uint64_t v15;

  v2 = *(_OWORD *)(a1 + 144);
  v14[8] = *(_OWORD *)(a1 + 128);
  v14[9] = v2;
  v15 = *(_QWORD *)(a1 + 160);
  v3 = *(_OWORD *)(a1 + 80);
  v14[4] = *(_OWORD *)(a1 + 64);
  v14[5] = v3;
  v4 = *(_OWORD *)(a1 + 112);
  v14[6] = *(_OWORD *)(a1 + 96);
  v14[7] = v4;
  v5 = *(_OWORD *)(a1 + 16);
  v14[0] = *(_OWORD *)a1;
  v14[1] = v5;
  v6 = *(_OWORD *)(a1 + 48);
  v14[2] = *(_OWORD *)(a1 + 32);
  v14[3] = v6;
  v7 = sub_100005690(&qword_1000714F0);
  v8 = sub_10003BB7C(&qword_1000714F8, &qword_1000714F0);
  v9 = dispatch thunk of JSONEncoder.encode<A>(_:)(v14, v7, v8);
  v11 = v10;
  swift_beginAccess(v1 + 40, v13, 33, 0);
  Data.append(_:)(v9, v11);
  swift_endAccess(v13);
  return sub_10001BAC4(v9, v11);
}

uint64_t sub_100033A4C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[16];
  _BYTE v34[16];
  char v35;

  v3 = v1;
  v5 = sub_100005690(&qword_100071498);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100005E2C(a1, v9);
  v11 = sub_10003B06C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AnalyticsConfig.CodingKeys, &type metadata for AnalyticsConfig.CodingKeys, v11, v9, v10);
  v12 = *(_QWORD *)v3;
  LOBYTE(v23) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v23, v5);
  if (!v2)
  {
    v13 = *(_QWORD *)(v3 + 8);
    v14 = *(unsigned __int8 *)(v3 + 16);
    LOBYTE(v23) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v13, v14, &v23, v5);
    v15 = *(_OWORD *)(v3 + 40);
    v30 = *(_OWORD *)(v3 + 24);
    v31 = v15;
    v32 = *(_OWORD *)(v3 + 56);
    sub_10001F414((uint64_t)&v32, (uint64_t)v34, &qword_1000714A0);
    sub_10001F414((uint64_t)&v30, (uint64_t)v33, &qword_1000714A0);
    v23 = v30;
    v24 = v31;
    v25 = v32;
    v35 = 2;
    sub_10003A978(v3);
    v16 = sub_10003B138();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v35, v5, &type metadata for EventCollectorConfig, v16);
    sub_10003B17C((uint64_t)v33);
    sub_10003B17C((uint64_t)v34);
    v17 = *(_OWORD *)(v3 + 120);
    v18 = *(_OWORD *)(v3 + 152);
    v27 = *(_OWORD *)(v3 + 136);
    v28 = v18;
    v29 = *(_QWORD *)(v3 + 168);
    v19 = *(_OWORD *)(v3 + 88);
    v23 = *(_OWORD *)(v3 + 72);
    v20 = *(_OWORD *)(v3 + 104);
    v26 = v17;
    v24 = v19;
    v25 = v20;
    v35 = 3;
    v21 = sub_10003B1A4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v35, v5, &type metadata for AnalyticsReporterConfig, v21);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100033C84()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100033CBC + 4 * byte_10004D970[*v0]))(0xD000000000000019, 0x8000000100051F80);
}

unint64_t sub_100033CBC()
{
  return 0xD000000000000015;
}

uint64_t sub_100033CD8()
{
  return 0x6F7463656C6C6F63;
}

uint64_t sub_100033CFC()
{
  return 0x726574726F706572;
}

uint64_t sub_100033D20@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10003AA74(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100033D44(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003B06C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100033D6C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003B06C();
  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_100033D94@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v9[11];

  sub_10003AC6C(a1, (uint64_t)v9);
  if (!v2)
  {
    v5 = v9[9];
    *(_OWORD *)(a2 + 128) = v9[8];
    *(_OWORD *)(a2 + 144) = v5;
    *(_OWORD *)(a2 + 160) = v9[10];
    v6 = v9[5];
    *(_OWORD *)(a2 + 64) = v9[4];
    *(_OWORD *)(a2 + 80) = v6;
    v7 = v9[7];
    *(_OWORD *)(a2 + 96) = v9[6];
    *(_OWORD *)(a2 + 112) = v7;
    v8 = v9[1];
    *(_OWORD *)a2 = v9[0];
    *(_OWORD *)(a2 + 16) = v8;
    result = (__n128)v9[3];
    *(_OWORD *)(a2 + 32) = v9[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_100033DF4(_QWORD *a1)
{
  return sub_100033A4C(a1);
}

uint64_t sub_100033E4C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100033E84 + 4 * byte_10004D974[a1]))(0x69746172656E6567, 0xEA00000000006E6FLL);
}

uint64_t sub_100033E84()
{
  return 0x656C626967696C65;
}

uint64_t sub_100033EE0()
{
  return 0x4564657070696B73;
}

unint64_t sub_100033F04()
{
  return 0xD000000000000016;
}

uint64_t sub_100033F94(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;

  v3 = v1;
  v5 = sub_100005690(&qword_1000715C0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100005E2C(a1, v9);
  v11 = sub_10003C608();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AnalyticsManagerCounters.Snapshot.CodingKeys, &type metadata for AnalyticsManagerCounters.Snapshot.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v33 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v33, v5);
  if (!v2)
  {
    v13 = v3[1];
    v32 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, &v32, v5);
    v14 = v3[2];
    v31 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v31, v5);
    v15 = v3[3];
    v30 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v15, &v30, v5);
    v16 = v3[4];
    v29 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v16, &v29, v5);
    v17 = v3[5];
    v28 = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v17, &v28, v5);
    v18 = v3[6];
    v27 = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v18, &v27, v5);
    v19 = v3[7];
    v26 = 7;
    KeyedEncodingContainer.encode(_:forKey:)(v19, &v26, v5);
    v20 = v3[8];
    HIBYTE(v25) = 8;
    KeyedEncodingContainer.encode(_:forKey:)(v20, (char *)&v25 + 7, v5);
    v21 = v3[9];
    BYTE6(v25) = 9;
    KeyedEncodingContainer.encode(_:forKey:)(v21, (char *)&v25 + 6, v5);
    v22 = v3[10];
    BYTE5(v25) = 10;
    KeyedEncodingContainer.encode(_:forKey:)(v22, (char *)&v25 + 5, v5);
    v23 = v3[11];
    BYTE4(v25) = 11;
    KeyedEncodingContainer.encode(_:forKey:)(v23, (char *)&v25 + 4, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100034238()
{
  unsigned __int8 *v0;

  return sub_100033E4C(*v0);
}

uint64_t sub_100034240@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10003BDF0(a1, a2);
  *a3 = result;
  return result;
}

void sub_100034264(_BYTE *a1@<X8>)
{
  *a1 = 12;
}

uint64_t sub_100034270(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003C608();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100034298(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003C608();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1000342C0@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[6];

  sub_10003C2EC(a1, (uint64_t *)v8);
  if (!v2)
  {
    v5 = v8[3];
    a2[2] = v8[2];
    a2[3] = v5;
    v6 = v8[5];
    a2[4] = v8[4];
    a2[5] = v6;
    result = *(double *)v8;
    v7 = v8[1];
    *a2 = v8[0];
    a2[1] = v7;
  }
  return result;
}

uint64_t sub_100034308(_QWORD *a1)
{
  return sub_100033F94(a1);
}

uint64_t *sub_10003431C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD **v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *(_QWORD *)(*(uint64_t (**)(void))(*v1[2] + 136))();
  v14 = *(_QWORD *)(*(uint64_t (**)(void))(*v1[3] + 136))();
  v13 = *(_QWORD *)(*(uint64_t (**)(void))(*v1[4] + 136))();
  v12 = *(_QWORD *)(*(uint64_t (**)(void))(*v1[5] + 136))();
  v3 = *(_QWORD *)(*(uint64_t (**)(void))(*v1[6] + 136))();
  v4 = *(_QWORD *)(*(uint64_t (**)(void))(*v1[7] + 136))();
  v5 = *(_QWORD *)(*(uint64_t (**)(void))(*v1[8] + 136))();
  v6 = *(_QWORD *)(*(uint64_t (**)(void))(*v1[9] + 136))();
  v7 = *(_QWORD *)(*(uint64_t (**)(void))(*v1[10] + 136))();
  v8 = *(_QWORD *)(*(uint64_t (**)(void))(*v1[11] + 136))();
  v9 = *(_QWORD *)(*(uint64_t (**)(void))(*v1[12] + 136))();
  result = (uint64_t *)(*(uint64_t (**)(void))(*v1[13] + 136))();
  v11 = *result;
  *a1 = v15;
  a1[1] = v14;
  a1[2] = v13;
  a1[3] = v12;
  a1[4] = v3;
  a1[5] = v4;
  a1[6] = v5;
  a1[7] = v6;
  a1[8] = v7;
  a1[9] = v8;
  a1[10] = v9;
  a1[11] = v11;
  return result;
}

unint64_t *sub_10003448C@<X0>(unint64_t *a1@<X8>)
{
  _QWORD **v1;
  unint64_t *v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *result;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v2 = (unint64_t *)(*(uint64_t (**)(void))(*v1[2] + 136))();
  do
    v3 = __ldxr(v2);
  while (__stxr(v3 + 1, v2));
  v4 = (unint64_t *)(*(uint64_t (**)(void))(*v1[3] + 136))();
  do
    v5 = __ldxr(v4);
  while (__stxr(0, v4));
  v27 = v5;
  v6 = (unint64_t *)(*(uint64_t (**)(void))(*v1[4] + 136))();
  do
    v7 = __ldxr(v6);
  while (__stxr(0, v6));
  v26 = v7;
  v8 = (unint64_t *)(*(uint64_t (**)(void))(*v1[5] + 136))();
  do
    v9 = __ldxr(v8);
  while (__stxr(0, v8));
  v10 = (unint64_t *)(*(uint64_t (**)(void))(*v1[6] + 136))();
  do
    v11 = __ldxr(v10);
  while (__stxr(0, v10));
  v12 = (unint64_t *)(*(uint64_t (**)(void))(*v1[7] + 136))();
  do
    v13 = __ldxr(v12);
  while (__stxr(0, v12));
  v14 = (unint64_t *)(*(uint64_t (**)(void))(*v1[8] + 136))();
  do
    v15 = __ldxr(v14);
  while (__stxr(0, v14));
  v16 = (unint64_t *)(*(uint64_t (**)(void))(*v1[9] + 136))();
  do
    v17 = __ldxr(v16);
  while (__stxr(0, v16));
  v18 = (unint64_t *)(*(uint64_t (**)(void))(*v1[10] + 136))();
  do
    v19 = __ldxr(v18);
  while (__stxr(0, v18));
  v20 = (unint64_t *)(*(uint64_t (**)(void))(*v1[11] + 136))();
  do
    v21 = __ldxr(v20);
  while (__stxr(0, v20));
  v22 = (unint64_t *)(*(uint64_t (**)(void))(*v1[12] + 136))();
  do
    v23 = __ldxr(v22);
  while (__stxr(0, v22));
  result = (unint64_t *)(*(uint64_t (**)(void))(*v1[13] + 136))();
  do
    v25 = __ldxr(result);
  while (__stxr(0, result));
  *a1 = v3;
  a1[1] = v27;
  a1[2] = v26;
  a1[3] = v9;
  a1[4] = v11;
  a1[5] = v13;
  a1[6] = v15;
  a1[7] = v17;
  a1[8] = v19;
  a1[9] = v21;
  a1[10] = v23;
  a1[11] = v25;
  return result;
}

_QWORD *sub_10003465C(uint64_t *a1)
{
  _QWORD **v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *result;

  v3 = *a1;
  *(_QWORD *)(*(uint64_t (**)(void))(*v1[2] + 136))() = v3;
  v4 = a1[1];
  *(_QWORD *)(*(uint64_t (**)(void))(*v1[3] + 136))() = v4;
  v5 = a1[2];
  *(_QWORD *)(*(uint64_t (**)(void))(*v1[4] + 136))() = v5;
  v6 = a1[3];
  *(_QWORD *)(*(uint64_t (**)(void))(*v1[5] + 136))() = v6;
  v7 = a1[4];
  *(_QWORD *)(*(uint64_t (**)(void))(*v1[6] + 136))() = v7;
  v8 = a1[5];
  *(_QWORD *)(*(uint64_t (**)(void))(*v1[7] + 136))() = v8;
  v9 = a1[6];
  *(_QWORD *)(*(uint64_t (**)(void))(*v1[8] + 136))() = v9;
  v10 = a1[7];
  *(_QWORD *)(*(uint64_t (**)(void))(*v1[9] + 136))() = v10;
  v11 = a1[8];
  *(_QWORD *)(*(uint64_t (**)(void))(*v1[10] + 136))() = v11;
  v12 = a1[9];
  *(_QWORD *)(*(uint64_t (**)(void))(*v1[11] + 136))() = v12;
  v13 = a1[10];
  *(_QWORD *)(*(uint64_t (**)(void))(*v1[12] + 136))() = v13;
  v14 = a1[11];
  result = (_QWORD *)(*(uint64_t (**)(void))(*v1[13] + 136))();
  *result = v14;
  return result;
}

_QWORD *sub_1000347A4()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  swift_release(v0[7]);
  swift_release(v0[8]);
  swift_release(v0[9]);
  swift_release(v0[10]);
  swift_release(v0[11]);
  swift_release(v0[12]);
  swift_release(v0[13]);
  return v0;
}

uint64_t sub_100034818()
{
  uint64_t v0;

  sub_1000347A4();
  return swift_deallocClassInstance(v0, 112, 7);
}

uint64_t type metadata accessor for AnalyticsManagerCounters()
{
  return objc_opt_self(_TtC14applekeystored24AnalyticsManagerCounters);
}

_QWORD *sub_100034858()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = sub_100005690(&qword_100071468);
  v2 = swift_allocObject(v1, 24, 7);
  *(_QWORD *)(v2 + 16) = 0;
  v0[2] = v2;
  v3 = swift_allocObject(v1, 24, 7);
  *(_QWORD *)(v3 + 16) = 0;
  v0[3] = v3;
  v4 = swift_allocObject(v1, 24, 7);
  *(_QWORD *)(v4 + 16) = 0;
  v0[4] = v4;
  v5 = swift_allocObject(v1, 24, 7);
  *(_QWORD *)(v5 + 16) = 0;
  v0[5] = v5;
  v6 = swift_allocObject(v1, 24, 7);
  *(_QWORD *)(v6 + 16) = 0;
  v0[6] = v6;
  v7 = swift_allocObject(v1, 24, 7);
  *(_QWORD *)(v7 + 16) = 0;
  v0[7] = v7;
  v8 = swift_allocObject(v1, 24, 7);
  *(_QWORD *)(v8 + 16) = 0;
  v0[8] = v8;
  v9 = swift_allocObject(v1, 24, 7);
  *(_QWORD *)(v9 + 16) = 0;
  v0[9] = v9;
  v10 = swift_allocObject(v1, 24, 7);
  *(_QWORD *)(v10 + 16) = 0;
  v0[10] = v10;
  v11 = swift_allocObject(v1, 24, 7);
  *(_QWORD *)(v11 + 16) = 0;
  v0[11] = v11;
  v12 = swift_allocObject(v1, 24, 7);
  *(_QWORD *)(v12 + 16) = 0;
  v0[12] = v12;
  v13 = swift_allocObject(v1, 24, 7);
  *(_QWORD *)(v13 + 16) = 0;
  v0[13] = v13;
  return v0;
}

uint64_t sub_1000349A0()
{
  Swift::String v0;
  Swift::String v1;
  void *object;
  Swift::String v3;
  Swift::String v4;
  void *v5;
  Swift::String v6;
  Swift::String v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  void *v17;
  Swift::String v18;
  Swift::String v19;
  void *v20;
  Swift::String v21;
  Swift::String v22;
  void *v23;
  Swift::String v24;
  Swift::String v25;
  void *v26;
  Swift::String v27;
  Swift::String v28;
  void *v29;
  Swift::String v30;
  Swift::String v31;
  void *v32;
  Swift::String v33;
  Swift::String v34;
  void *v35;

  _StringGuts.grow(_:)(232);
  v0._countAndFlagsBits = 0x69746172656E6567;
  v0._object = (void *)0xEB000000003D6E6FLL;
  String.append(_:)(v0);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v1._object;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object);
  v3._object = (void *)0x8000000100051DE0;
  v3._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v3);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v5 = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v5);
  v6._countAndFlagsBits = 0x6C626967696C6520;
  v6._object = (void *)0xEF3D73656C694665;
  String.append(_:)(v6);
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v8 = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v8);
  v9._object = (void *)0x8000000100051E00;
  v9._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v9);
  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v11 = v10._object;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v11);
  v12._countAndFlagsBits = 0x64657070696B7320;
  v12._object = (void *)0xEF3D73746E657645;
  String.append(_:)(v12);
  v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v14 = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v14);
  v15._countAndFlagsBits = 0xD000000000000018;
  v15._object = (void *)0x8000000100051E20;
  String.append(_:)(v15);
  v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v17 = v16._object;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v17);
  v18._object = (void *)0x8000000100051E40;
  v18._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v18);
  v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v20 = v19._object;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v20);
  v21._object = (void *)0x8000000100051E60;
  v21._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v21);
  v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v23 = v22._object;
  String.append(_:)(v22);
  swift_bridgeObjectRelease(v23);
  v24._object = (void *)0x8000000100051E80;
  v24._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v24);
  v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v26 = v25._object;
  String.append(_:)(v25);
  swift_bridgeObjectRelease(v26);
  v27._object = (void *)0x8000000100051EA0;
  v27._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v27);
  v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v29 = v28._object;
  String.append(_:)(v28);
  swift_bridgeObjectRelease(v29);
  v30._countAndFlagsBits = 0xD000000000000014;
  v30._object = (void *)0x8000000100051EC0;
  String.append(_:)(v30);
  v31._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v32 = v31._object;
  String.append(_:)(v31);
  swift_bridgeObjectRelease(v32);
  v33._countAndFlagsBits = 0xD000000000000013;
  v33._object = (void *)0x8000000100051EE0;
  String.append(_:)(v33);
  v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v35 = v34._object;
  String.append(_:)(v34);
  swift_bridgeObjectRelease(v35);
  return 0;
}

_QWORD *sub_100034DAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD v38[11];
  _OWORD v39[6];
  uint64_t v40;
  _OWORD v41[3];
  char v42;
  char v43;
  char v44;
  char v45;
  _OWORD v46[11];
  char v47;

  v3 = (_QWORD *)v1;
  *(_OWORD *)(v1 + 16) = xmmword_10004A4F0;
  v5 = v1 + 16;
  v47 = 0;
  v45 = 0;
  v44 = 0;
  v43 = 0;
  v42 = 0;
  *(_BYTE *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 56) = 1024;
  *(_BYTE *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 80) = 0;
  *(_QWORD *)(v1 + 88) = 86400;
  *(_BYTE *)(v1 + 96) = 0;
  *(_QWORD *)(v1 + 104) = 7200;
  *(_BYTE *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 120) = 1800;
  *(_BYTE *)(v1 + 128) = 0;
  *(_QWORD *)(v1 + 136) = 600;
  *(_BYTE *)(v1 + 144) = v42;
  *(_OWORD *)(v1 + 152) = xmmword_10004A500;
  *(_BYTE *)(v1 + 168) = 0;
  *(_BYTE *)(v1 + 176) = 1;
  *(_QWORD *)(v1 + 184) = 4096;
  v6 = type metadata accessor for AnalyticsEventSource();
  swift_allocObject(v6, 96, 7);
  *(_QWORD *)(v1 + 192) = sub_10001D2A4();
  v7 = type metadata accessor for AnalyticsManagerCounters();
  v8 = swift_allocObject(v7, 112, 7);
  sub_100034858();
  *(_QWORD *)(v5 + 208) = v8;
  v9 = *(_OWORD *)(v5 + 144);
  v46[8] = *(_OWORD *)(v5 + 128);
  v46[9] = v9;
  v46[10] = *(_OWORD *)(v5 + 160);
  v10 = *(_OWORD *)(v5 + 80);
  v46[4] = *(_OWORD *)(v5 + 64);
  v46[5] = v10;
  v11 = *(_OWORD *)(v5 + 112);
  v46[6] = *(_OWORD *)(v5 + 96);
  v46[7] = v11;
  v12 = *(_OWORD *)(v5 + 16);
  v46[0] = *(_OWORD *)v5;
  v46[1] = v12;
  v13 = *(_OWORD *)(v5 + 48);
  v46[2] = *(_OWORD *)(v5 + 32);
  v46[3] = v13;
  v14 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(v5 + 128) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v5 + 144) = v14;
  *(_OWORD *)(v5 + 160) = *(_OWORD *)(a1 + 160);
  v15 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v5 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v5 + 80) = v15;
  v16 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v5 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v5 + 112) = v16;
  v17 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a1;
  *(_OWORD *)(v5 + 16) = v17;
  v18 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v5 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v5 + 48) = v18;
  sub_10003A978(a1);
  sub_10003AA40((uint64_t)v46);
  type metadata accessor for AnalyticsStore();
  v19 = sub_100013B00();
  if (v2)
  {
    sub_10003AA40(a1);
    v20 = *(_OWORD *)(v5 + 144);
    v38[8] = *(_OWORD *)(v5 + 128);
    v38[9] = v20;
    v38[10] = *(_OWORD *)(v5 + 160);
    v21 = *(_OWORD *)(v5 + 80);
    v38[4] = *(_OWORD *)(v5 + 64);
    v38[5] = v21;
    v22 = *(_OWORD *)(v5 + 112);
    v38[6] = *(_OWORD *)(v5 + 96);
    v38[7] = v22;
    v23 = *(_OWORD *)(v5 + 16);
    v38[0] = *(_OWORD *)v5;
    v38[1] = v23;
    v24 = *(_OWORD *)(v5 + 48);
    v38[2] = *(_OWORD *)(v5 + 32);
    v38[3] = v24;
    sub_10003AA40((uint64_t)v38);
    swift_release(v3[24]);
    swift_release(v3[28]);
    v25 = type metadata accessor for AnalyticsManager();
    swift_deallocPartialClassInstance(v3, v25, 232, 7);
  }
  else
  {
    v26 = v19;
    v3[25] = v19;
    v27 = *(_OWORD *)(a1 + 40);
    v41[0] = *(_OWORD *)(a1 + 24);
    v41[1] = v27;
    v41[2] = *(_OWORD *)(a1 + 56);
    v28 = v3[28];
    v29 = type metadata accessor for EventCollector();
    swift_allocObject(v29, 144, 7);
    sub_10003A978(a1);
    swift_retain(v26);
    swift_retain(v28);
    v30 = sub_10002E324(v41, v26, v28);
    swift_release(v26);
    v3[26] = v30;
    v31 = *(_OWORD *)(a1 + 120);
    v32 = *(_OWORD *)(a1 + 152);
    v39[4] = *(_OWORD *)(a1 + 136);
    v39[5] = v32;
    v40 = *(_QWORD *)(a1 + 168);
    v33 = *(_OWORD *)(a1 + 88);
    v39[0] = *(_OWORD *)(a1 + 72);
    v39[1] = v33;
    v39[2] = *(_OWORD *)(a1 + 104);
    v39[3] = v31;
    v34 = v3[28];
    v35 = type metadata accessor for AnalyticsReporter();
    swift_allocObject(v35, 152, 7);
    swift_retain(v26);
    swift_retain(v34);
    v36 = sub_100026218((uint64_t)v39, v26, v34);
    swift_release(v26);
    swift_release(v34);
    sub_10003AA40(a1);
    v3[27] = v36;
  }
  return v3;
}

uint64_t sub_1000350BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD v22[4];

  v1 = v0;
  v2 = sub_100005690(&qword_100071440);
  __chkstk_darwin(v2);
  v4 = (char *)v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TaskPriority(0);
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  v7 = (_QWORD *)swift_allocObject(&unk_100068B48, 40, 7);
  v7[2] = 0;
  v8 = v7 + 2;
  v7[3] = 0;
  v7[4] = v1;
  v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  v10 = swift_retain(v1);
  if (v9 == 1)
  {
    sub_10003B3BC((uint64_t)v4, &qword_100071440);
    v11 = 7168;
LABEL_6:
    v19 = 0;
    goto LABEL_7;
  }
  v12 = TaskPriority.rawValue.getter(v10);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  v11 = v12 | 0x1C00;
  v13 = *v8;
  if (!*v8)
    goto LABEL_6;
  v14 = v7[3];
  ObjectType = swift_getObjectType(*v8);
  swift_unknownObjectRetain(v13);
  v16 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v14);
  v18 = v17;
  swift_unknownObjectRelease(v13);
  if (!(v18 | v16))
    goto LABEL_6;
  v22[0] = 0;
  v22[1] = 0;
  v19 = v22;
  v22[2] = v16;
  v22[3] = v18;
LABEL_7:
  v20 = swift_task_create(v11, v19, (char *)&type metadata for () + 8, &unk_100071540, v7);
  return swift_release(v20);
}

uint64_t sub_10003527C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[18] = a4;
  v5 = type metadata accessor for ContinuousClock(0);
  v4[19] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[20] = v6;
  v4[21] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000352DC, 0, 0);
}

uint64_t sub_1000352DC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  v1 = *(_QWORD *)(v0[18] + 200);
  v2 = type metadata accessor for AnalyticsStoreContext();
  inited = swift_initStackObject(v2, v0 + 14);
  v0[22] = inited;
  v4 = *(_QWORD *)(v1 + 16);
  v5 = type metadata accessor for ModelContext(0);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v6 = swift_retain(v4);
  *(_QWORD *)(inited + 16) = ModelContext.init(_:)(v6);
  v7 = sub_10001418C();
  v0[23] = v7;
  v8 = *(_QWORD *)(v0[18] + 16);
  v9 = 1000000000000000000 * v8;
  v10 = ((v8 >> 63) & 0xF21F494C589C0000) + (((unint64_t)v8 * (unsigned __int128)0xDE0B6B3A7640000uLL) >> 64);
  ContinuousClock.init()(v7);
  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1000714C8 + dword_1000714C8);
  v11 = (_QWORD *)swift_task_alloc(unk_1000714CC);
  v0[24] = v11;
  *v11 = v0;
  v11[1] = sub_100035428;
  return v13(v9, v10, 0, 0, 1);
}

uint64_t sub_100035428()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 192);
  *(_QWORD *)(*(_QWORD *)v1 + 200) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(_QWORD, _QWORD))(v2[20] + 8))(v2[21], v2[19]);
  if (v0)
    v4 = sub_100035758;
  else
    v4 = sub_10003549C;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10003549C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v23;
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  v1 = v0[25];
  v2 = *(_QWORD *)(v0[18] + 224);
  swift_retain(v2);
  sub_10003431C(v0 + 2);
  swift_release(v2);
  v3 = sub_1000129DC(v0 + 2);
  v4 = dispatch thunk of ModelContext.save()(v3);
  if (v1)
  {
    if (qword_10006E5C0 != -1)
      swift_once(&qword_10006E5C0, sub_10001AB28);
    v5 = type metadata accessor for Logger(0);
    sub_100005D1C(v5, (uint64_t)qword_100071AE0);
    swift_errorRetain(v1);
    v6 = swift_errorRetain(v1);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v23 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v9 = 138412290;
      swift_errorRetain(v1);
      v10 = _swift_stdlib_bridgeErrorToNSError(v1);
      v0[17] = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 17, v0 + 18);
      *v23 = v10;
      swift_errorRelease(v1);
      swift_errorRelease(v1);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "counter checkpoint failed: %@", v9, 0xCu);
      v11 = sub_100005690(&qword_10006FFB8);
      swift_arrayDestroy(v23, 1, v11);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v9, -1, -1);
    }
    else
    {
      swift_errorRelease(v1);
      swift_errorRelease(v1);
    }
    v12 = v0[18];

    v13 = *(_QWORD *)(*(_QWORD *)(v12 + 224) + 80);
    v14 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 136);
    v15 = swift_retain(v13);
    v16 = (unint64_t *)v14(v15);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    swift_release(v13);
    v4 = swift_errorRelease(v1);
  }
  v18 = *(_QWORD *)(v0[18] + 16);
  v19 = 1000000000000000000 * v18;
  v20 = ((v18 >> 63) & 0xF21F494C589C0000) + (((unint64_t)v18 * (unsigned __int128)0xDE0B6B3A7640000uLL) >> 64);
  ContinuousClock.init()(v4);
  v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1000714C8 + dword_1000714C8);
  v21 = (_QWORD *)swift_task_alloc(unk_1000714CC);
  v0[24] = v21;
  *v21 = v0;
  v21[1] = sub_100035428;
  return v24(v19, v20, 0, 0, 1);
}

uint64_t sub_100035758()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 168);
  swift_release(*(_QWORD *)(v0 + 184));
  swift_release(v2);
  swift_errorRelease(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000357B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD v23[4];

  v1 = v0;
  v2 = sub_100005690(&qword_100071440);
  __chkstk_darwin(v2);
  v4 = (char *)v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TaskPriority(0);
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  v7 = (_QWORD *)swift_allocObject(&unk_100068AF8, 40, 7);
  v7[2] = 0;
  v8 = v7 + 2;
  v7[3] = 0;
  v7[4] = v1;
  v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  v10 = swift_retain(v1);
  if (v9 == 1)
  {
    sub_10003B3BC((uint64_t)v4, &qword_100071440);
    v11 = 0;
    v12 = 0;
    v13 = 7168;
  }
  else
  {
    v14 = TaskPriority.rawValue.getter(v10);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    v13 = v14 | 0x1C00;
    v15 = *v8;
    if (*v8)
    {
      v16 = v7[3];
      ObjectType = swift_getObjectType(*v8);
      swift_unknownObjectRetain(v15);
      v11 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v16);
      v12 = v18;
      swift_unknownObjectRelease(v15);
    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
  }
  v19 = swift_allocObject(&unk_100068B20, 32, 7);
  *(_QWORD *)(v19 + 16) = &unk_100071528;
  *(_QWORD *)(v19 + 24) = v7;
  if (v12 | v11)
  {
    v23[0] = 0;
    v23[1] = 0;
    v20 = v23;
    v23[2] = v11;
    v23[3] = v12;
  }
  else
  {
    v20 = 0;
  }
  v21 = swift_task_create(v13, v20, (char *)&type metadata for () + 8, &unk_100071530, v19);
  return swift_release(v21);
}

uint64_t sub_100035988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4[100] = a4;
  v5 = type metadata accessor for ContinuousClock.Instant(0);
  v4[101] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[102] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[103] = swift_task_alloc(v7);
  v4[104] = swift_task_alloc(v7);
  v8 = type metadata accessor for ContinuousClock(0);
  v4[105] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[106] = v9;
  v4[107] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100035A20, 0, 0);
}

uint64_t sub_100035A20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  _QWORD *v20;

  v1 = *(_QWORD *)(v0 + 800);
  if (*(_BYTE *)(v1 + 32) == 1)
  {
    if (qword_10006E5C0 != -1)
      swift_once(&qword_10006E5C0, sub_10001AB28);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_100005D1C(v2, (uint64_t)qword_100071AE0);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "status reporting disabled", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }

    v7 = *(_QWORD *)(v0 + 832);
    v8 = *(_QWORD *)(v0 + 824);
    swift_task_dealloc(*(_QWORD *)(v0 + 856));
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 816);
    v11 = *(_QWORD *)(v1 + 24);
    *(_QWORD *)(v0 + 864) = v11;
    v12 = 1000000000000000000 * v11;
    v13 = *(_QWORD *)(v0 + 840);
    v14 = *(_QWORD *)(v0 + 824);
    v15 = *(_QWORD *)(v0 + 808);
    v16 = ((v11 >> 63) & 0xF21F494C589C0000)
        + (((unint64_t)v11 * (unsigned __int128)0xDE0B6B3A7640000uLL) >> 64);
    ContinuousClock.init()();
    *(_QWORD *)(v0 + 776) = v12;
    *(_QWORD *)(v0 + 784) = v16;
    *(_OWORD *)(v0 + 752) = 0u;
    *(_BYTE *)(v0 + 768) = 1;
    v17 = sub_100005A54(&qword_1000714D0, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock, (uint64_t)&protocol conformance descriptor for ContinuousClock);
    dispatch thunk of Clock.now.getter(v13, v17);
    v18 = sub_100005A54(&qword_1000714D8, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant, (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
    dispatch thunk of InstantProtocol.advanced(by:)(v0 + 776, v15, v18);
    v19 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    *(_QWORD *)(v0 + 872) = v19;
    v19(v14, v15);
    v20 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of Clock.sleep(until:tolerance:)[1]);
    *(_QWORD *)(v0 + 880) = v20;
    *v20 = v0;
    v20[1] = sub_100035C8C;
    return dispatch thunk of Clock.sleep(until:tolerance:)(*(_QWORD *)(v0 + 832), v0 + 752, *(_QWORD *)(v0 + 840), v17);
  }
}

uint64_t sub_100035C8C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 880);
  *(_QWORD *)(*v1 + 888) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v2 + 872))(*(_QWORD *)(v2 + 832), *(_QWORD *)(v2 + 808));
    v4 = sub_1000361B0;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 856);
    v6 = *(_QWORD *)(v2 + 848);
    v7 = *(_QWORD *)(v2 + 840);
    (*(void (**)(_QWORD, _QWORD))(v2 + 872))(*(_QWORD *)(v2 + 832), *(_QWORD *)(v2 + 808));
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    v4 = sub_100035D34;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100035D34()
{
  uint64_t v0;
  _QWORD *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  _QWORD *v40;
  uint64_t v42;

  v1 = (_QWORD *)(v0 + 800);
  sub_10001E33C(v0 + 16);
  sub_10001F414(v0 + 16, v0 + 232, &qword_100070628);
  if (sub_10003B414(v0 + 232) != 1)
  {
    v2 = *(_OWORD *)(v0 + 408);
    *(_OWORD *)(v0 + 608) = *(_OWORD *)(v0 + 392);
    *(_OWORD *)(v0 + 624) = v2;
    *(_OWORD *)(v0 + 640) = *(_OWORD *)(v0 + 424);
    v3 = *(_OWORD *)(v0 + 344);
    *(_OWORD *)(v0 + 544) = *(_OWORD *)(v0 + 328);
    *(_OWORD *)(v0 + 560) = v3;
    v4 = *(_OWORD *)(v0 + 376);
    *(_OWORD *)(v0 + 576) = *(_OWORD *)(v0 + 360);
    *(_OWORD *)(v0 + 592) = v4;
    v5 = *(_OWORD *)(v0 + 280);
    *(_OWORD *)(v0 + 480) = *(_OWORD *)(v0 + 264);
    *(_OWORD *)(v0 + 496) = v5;
    v6 = *(_OWORD *)(v0 + 312);
    *(_OWORD *)(v0 + 512) = *(_OWORD *)(v0 + 296);
    *(_OWORD *)(v0 + 528) = v6;
    v7 = *(_OWORD *)(v0 + 248);
    *(_OWORD *)(v0 + 448) = *(_OWORD *)(v0 + 232);
    *(_OWORD *)(v0 + 464) = v7;
    if (qword_10006E5C0 != -1)
      swift_once(&qword_10006E5C0, sub_10001AB28);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_100005D1C(v8, (uint64_t)qword_100071AE0);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      *(_DWORD *)v12 = 136315138;
      v42 = v13;
      v14 = AKSAnalyticsCounters.description.getter();
      v16 = v15;
      *(_QWORD *)(v0 + 792) = sub_100016DBC(v14, v15, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 792, v0 + 800);
      swift_bridgeObjectRelease(v16);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "kernel: %s", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }

  }
  if (qword_10006E5C0 != -1)
    swift_once(&qword_10006E5C0, sub_10001AB28);
  v17 = *v1;
  v18 = type metadata accessor for Logger(0);
  sub_100005D1C(v18, (uint64_t)qword_100071AE0);
  v19 = swift_retain_n(v17, 2);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.info.getter();
  v22 = os_log_type_enabled(v20, v21);
  v23 = *v1;
  if (v22)
  {
    v24 = swift_slowAlloc(12, -1);
    v25 = swift_slowAlloc(32, -1);
    v42 = v25;
    *(_DWORD *)v24 = 136315138;
    v26 = *(_QWORD *)(v23 + 224);
    swift_retain(v26);
    sub_10003431C((_QWORD *)(v0 + 656));
    swift_release(v26);
    v27 = sub_1000349A0();
    v29 = v28;
    *(_QWORD *)(v24 + 4) = sub_100016DBC(v27, v28, &v42);
    swift_bridgeObjectRelease(v29);
    swift_release_n(v23, 2);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "events: %s", (uint8_t *)v24, 0xCu);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v24, -1, -1);
  }
  else
  {
    swift_release_n(*v1, 2);
  }

  v30 = *(_QWORD *)(v0 + 864);
  v31 = *(_QWORD *)(v0 + 840);
  v32 = *(_QWORD *)(v0 + 824);
  v33 = *(_QWORD *)(v0 + 816);
  v34 = *(_QWORD *)(v0 + 808);
  v35 = 1000000000000000000 * v30;
  v36 = ((v30 >> 63) & 0xF21F494C589C0000) + (((unint64_t)v30 * (unsigned __int128)0xDE0B6B3A7640000uLL) >> 64);
  ContinuousClock.init()();
  *(_QWORD *)(v0 + 776) = v35;
  *(_QWORD *)(v0 + 784) = v36;
  *(_OWORD *)(v0 + 752) = 0u;
  *(_BYTE *)(v0 + 768) = 1;
  v37 = sub_100005A54(&qword_1000714D0, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock, (uint64_t)&protocol conformance descriptor for ContinuousClock);
  dispatch thunk of Clock.now.getter(v31, v37);
  v38 = sub_100005A54(&qword_1000714D8, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant, (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)(v0 + 776, v34, v38);
  v39 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
  *(_QWORD *)(v0 + 872) = v39;
  v39(v32, v34);
  v40 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of Clock.sleep(until:tolerance:)[1]);
  *(_QWORD *)(v0 + 880) = v40;
  *v40 = v0;
  v40[1] = sub_100035C8C;
  return dispatch thunk of Clock.sleep(until:tolerance:)(*(_QWORD *)(v0 + 832), v0 + 752, *(_QWORD *)(v0 + 840), v37);
}

uint64_t sub_1000361B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 888);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 848) + 8))(*(_QWORD *)(v0 + 856), *(_QWORD *)(v0 + 840));
  swift_errorRelease(v1);
  v2 = *(_QWORD *)(v0 + 832);
  v3 = *(_QWORD *)(v0 + 824);
  swift_task_dealloc(*(_QWORD *)(v0 + 856));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100036218(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v7 + 1312) = v6;
  *(_BYTE *)(v7 + 226) = a6;
  *(_QWORD *)(v7 + 1304) = a5;
  *(_BYTE *)(v7 + 225) = a4;
  *(_QWORD *)(v7 + 1296) = a3;
  *(_QWORD *)(v7 + 1288) = a2;
  *(_QWORD *)(v7 + 1280) = a1;
  v8 = type metadata accessor for ContinuousClock(0);
  *(_QWORD *)(v7 + 1320) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v7 + 1328) = v9;
  *(_QWORD *)(v7 + 1336) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100036290, 0, 0);
}

uint64_t sub_100036290()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  __objc2_ivar *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t (*v99)(uint64_t, uint64_t, uint64_t, uint64_t, char);
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;

  if ((*(_BYTE *)(v0 + 225) & 1) == 0
    && (static Duration.< infix(_:_:)(0, 0, *(_QWORD *)(v0 + 1288), *(_QWORD *)(v0 + 1296)) & 1) != 0)
  {
    ContinuousClock.init()();
    v99 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1000714C8 + dword_1000714C8);
    v1 = (_QWORD *)swift_task_alloc(unk_1000714CC);
    *(_QWORD *)(v0 + 1344) = v1;
    *v1 = v0;
    v1[1] = sub_1000369D0;
    return v99(*(_QWORD *)(v0 + 1288), *(_QWORD *)(v0 + 1296), 0, 0, 1);
  }
  v3 = v0 + 16;
  v100 = v0 + 232;
  v89 = v0 + 1272;
  v4 = *(_QWORD *)(v0 + 1312);
  v5 = *(_BYTE *)(v0 + 226);
  v6 = *(_QWORD *)(v4 + 224);
  swift_retain(v6);
  v7 = &stru_10006E000;
  if ((v5 & 1) != 0)
  {
    sub_10003448C((unint64_t *)(v0 + 1168));
    v19 = *(_QWORD *)(v0 + 1168);
    v9 = *(_QWORD *)(v0 + 1184);
    v97 = *(_QWORD *)(v0 + 1192);
    v98 = *(_QWORD *)(v0 + 1176);
    v86 = *(_QWORD *)(v0 + 1200);
    v95 = *(_QWORD *)(v0 + 1216);
    v96 = *(_QWORD *)(v0 + 1208);
    v93 = *(_QWORD *)(v0 + 1232);
    v94 = *(_QWORD *)(v0 + 1224);
    v91 = *(_QWORD *)(v0 + 1248);
    v92 = *(_QWORD *)(v0 + 1240);
    v90 = *(_QWORD *)(v0 + 1256);
    swift_release(v6);
    if (qword_10006E5C0 != -1)
      swift_once(&qword_10006E5C0, sub_10001AB28);
    v20 = *(_QWORD *)(v0 + 1312);
    v21 = type metadata accessor for Logger(0);
    sub_100005D1C(v21, (uint64_t)qword_100071AE0);
    v22 = swift_retain(v20);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.info.getter();
    v25 = os_log_type_enabled(v23, v24);
    v26 = *(_QWORD *)(v0 + 1312);
    if (v25)
    {
      v87 = v9;
      v27 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v27 = 134217984;
      v28 = *(_QWORD *)(*(_QWORD *)(v4 + 224) + 16);
      v29 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 136);
      v30 = swift_retain(v28);
      v31 = *(_QWORD *)v29(v30);
      swift_release(v28);
      *(_QWORD *)(v0 + 1264) = v31;
      v7 = &stru_10006E000;
      v3 = v0 + 16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1264, v89);
      swift_release(v26);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "starting new generation %ld", v27, 0xCu);
      v32 = v27;
      v9 = v87;
      swift_slowDealloc(v32, -1, -1);
    }
    else
    {
      swift_release(*(_QWORD *)(v0 + 1312));
    }

    v8 = v19;
    v10 = v86;
  }
  else
  {
    sub_10003431C((_QWORD *)(v0 + 1072));
    v8 = *(_QWORD *)(v0 + 1072);
    v9 = *(_QWORD *)(v0 + 1088);
    v97 = *(_QWORD *)(v0 + 1096);
    v98 = *(_QWORD *)(v0 + 1080);
    v10 = *(_QWORD *)(v0 + 1104);
    v95 = *(_QWORD *)(v0 + 1120);
    v96 = *(_QWORD *)(v0 + 1112);
    v93 = *(_QWORD *)(v0 + 1136);
    v94 = *(_QWORD *)(v0 + 1128);
    v91 = *(_QWORD *)(v0 + 1152);
    v92 = *(_QWORD *)(v0 + 1144);
    v90 = *(_QWORD *)(v0 + 1160);
    swift_release(v6);
    if (qword_10006E5C0 != -1)
      swift_once(&qword_10006E5C0, sub_10001AB28);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_100005D1C(v11, (uint64_t)qword_100071AE0);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *(_QWORD *)(v0 + 1304);
      v16 = v8;
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v17 = 134217984;
      *(_QWORD *)(v0 + 1272) = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v89, v0 + 1280);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "retrying report for generation %ld", v17, 0xCu);
      v18 = v17;
      v8 = v16;
      v3 = v0 + 16;
      v7 = &stru_10006E000;
      swift_slowDealloc(v18, -1, -1);
    }

    v19 = *(_QWORD *)(v0 + 1304);
  }
  *(_QWORD *)(v0 + 1360) = v19;
  sub_10001E33C(v100);
  sub_10001F414(v100, v3, &qword_100070628);
  result = sub_10003B414(v3);
  if ((_DWORD)result == 1)
  {
    if (v7[46].offs != (int32_t *)-1)
      swift_once(&qword_10006E5C0, sub_10001AB28);
    v33 = type metadata accessor for Logger(0);
    v34 = sub_100005D1C(v33, (uint64_t)qword_100071AE0);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "missing kernel counters for splunk report", v37, 2u);
      swift_slowDealloc(v37, -1, -1);
    }
    v38 = *(_QWORD *)(v0 + 1312);

    v39 = *(_QWORD *)(v38 + 216);
    goto LABEL_29;
  }
  v40 = *(_QWORD *)(v0 + 16);
  v41 = *(_QWORD *)(v0 + 24);
  v42 = __CFADD__(v40, v41);
  v43 = v40 + v41;
  if (v42)
  {
    __break(1u);
    goto LABEL_31;
  }
  v44 = *(_QWORD *)(v0 + 32);
  v42 = __CFADD__(v43, v44);
  v45 = v43 + v44;
  if (v42)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v46 = *(_QWORD *)(v0 + 40);
  v47 = v45 + v46;
  if (__CFADD__(v45, v46))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v48 = *(_QWORD *)(v0 + 56);
  v49 = *(_QWORD *)(v0 + 64);
  v42 = __CFADD__(v48, v49);
  v50 = v48 + v49;
  if (v42)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v51 = *(_QWORD *)(v0 + 72);
  v42 = __CFADD__(v50, v51);
  v52 = v50 + v51;
  if (v42)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v53 = *(_QWORD *)(v0 + 80);
  v42 = __CFADD__(v52, v53);
  v54 = v52 + v53;
  if (!v42)
  {
    v55 = v10;
    v56 = *(_QWORD *)(v0 + 128);
    v88 = v9;
    v57 = *(_QWORD *)(v0 + 144);
    v58 = *(_QWORD *)(v0 + 152);
    v101 = v8;
    v59 = v54;
    v39 = *(_QWORD *)(*(_QWORD *)(v0 + 1312) + 216);
    v60 = v47;
    sub_10001FBB8(0x6F436C656E72654BLL, 0xEE00737265746E75, (uint64_t)&v102);
    v61 = v103;
    v62 = v104;
    v63 = v105;
    v64 = v106;
    v65 = v107;
    v66 = v108;
    *(_OWORD *)(v0 + 944) = v102;
    *(_OWORD *)(v0 + 960) = v61;
    *(_OWORD *)(v0 + 976) = v62;
    *(_QWORD *)(v0 + 992) = v63;
    *(_QWORD *)(v0 + 1000) = v64;
    *(_OWORD *)(v0 + 1008) = v65;
    *(_QWORD *)(v0 + 1024) = v66;
    *(_QWORD *)(v0 + 1032) = v60;
    *(_QWORD *)(v0 + 1040) = v59;
    *(_QWORD *)(v0 + 1048) = v56;
    v10 = v55;
    *(_QWORD *)(v0 + 1056) = v57;
    v9 = v88;
    *(_QWORD *)(v0 + 1064) = v58;
    v8 = v101;
    v67 = *(_OWORD *)(v0 + 944);
    v68 = *(_OWORD *)(v0 + 960);
    v69 = *(_OWORD *)(v0 + 992);
    *(_OWORD *)(v0 + 848) = *(_OWORD *)(v0 + 976);
    *(_OWORD *)(v0 + 864) = v69;
    *(_OWORD *)(v0 + 816) = v67;
    *(_OWORD *)(v0 + 832) = v68;
    v70 = *(_OWORD *)(v0 + 1008);
    v71 = *(_OWORD *)(v0 + 1024);
    v72 = *(_OWORD *)(v0 + 1056);
    *(_OWORD *)(v0 + 912) = *(_OWORD *)(v0 + 1040);
    *(_OWORD *)(v0 + 928) = v72;
    *(_OWORD *)(v0 + 880) = v70;
    *(_OWORD *)(v0 + 896) = v71;
    sub_100032B88(v0 + 816);
    sub_1000278D4((_QWORD *)(v0 + 944));
LABEL_29:
    *(_QWORD *)(v0 + 1368) = v39;
    sub_10001FBB8(0x756F43746E657645, 0xED0000737265746ELL, (uint64_t)&v102);
    v74 = v103;
    v73 = v104;
    v75 = v105;
    v76 = v106;
    v77 = v107;
    v78 = v108;
    *(_OWORD *)(v0 + 632) = v102;
    *(_OWORD *)(v0 + 648) = v74;
    *(_OWORD *)(v0 + 664) = v73;
    *(_QWORD *)(v0 + 680) = v75;
    *(_QWORD *)(v0 + 688) = v76;
    *(_OWORD *)(v0 + 696) = v77;
    *(_QWORD *)(v0 + 712) = v78;
    *(_QWORD *)(v0 + 720) = v8;
    *(_QWORD *)(v0 + 728) = v98;
    *(_QWORD *)(v0 + 736) = v9;
    *(_QWORD *)(v0 + 744) = v97;
    *(_QWORD *)(v0 + 752) = v10;
    *(_QWORD *)(v0 + 760) = v96;
    *(_QWORD *)(v0 + 768) = v95;
    *(_QWORD *)(v0 + 776) = v94;
    *(_QWORD *)(v0 + 784) = v93;
    *(_QWORD *)(v0 + 792) = v92;
    *(_QWORD *)(v0 + 800) = v91;
    *(_QWORD *)(v0 + 808) = v90;
    *(_QWORD *)(v0 + 624) = v90;
    v79 = *(_OWORD *)(v0 + 680);
    *(_OWORD *)(v0 + 480) = *(_OWORD *)(v0 + 664);
    *(_OWORD *)(v0 + 496) = v79;
    v80 = *(_OWORD *)(v0 + 744);
    *(_OWORD *)(v0 + 544) = *(_OWORD *)(v0 + 728);
    *(_OWORD *)(v0 + 560) = v80;
    v81 = *(_OWORD *)(v0 + 712);
    *(_OWORD *)(v0 + 512) = *(_OWORD *)(v0 + 696);
    *(_OWORD *)(v0 + 528) = v81;
    v82 = *(_OWORD *)(v0 + 792);
    v83 = *(_OWORD *)(v0 + 760);
    *(_OWORD *)(v0 + 592) = *(_OWORD *)(v0 + 776);
    *(_OWORD *)(v0 + 608) = v82;
    *(_OWORD *)(v0 + 576) = v83;
    v84 = *(_OWORD *)(v0 + 648);
    *(_OWORD *)(v0 + 448) = *(_OWORD *)(v0 + 632);
    *(_OWORD *)(v0 + 464) = v84;
    sub_100032EF8(v0 + 448);
    sub_1000278D4((_QWORD *)(v0 + 632));
    v85 = (_QWORD *)swift_task_alloc(dword_100070FD4);
    *(_QWORD *)(v0 + 1376) = v85;
    *v85 = v0;
    v85[1] = sub_100037134;
    return sub_1000303AC();
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_1000369D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1344);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1336);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 1328);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 1320);
  *(_QWORD *)(*(_QWORD *)v1 + 1352) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0)
    v6 = sub_100037100;
  else
    v6 = sub_100036A58;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100036A58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  __objc2_ivar *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;

  v1 = v0 + 16;
  v98 = v0 + 232;
  v88 = v0 + 1272;
  v2 = *(_QWORD *)(v0 + 1312);
  v3 = *(_BYTE *)(v0 + 226);
  v4 = *(_QWORD *)(v2 + 224);
  swift_retain(v4);
  v5 = &stru_10006E000;
  if ((v3 & 1) != 0)
  {
    sub_10003448C((unint64_t *)(v0 + 1168));
    v17 = *(_QWORD *)(v0 + 1168);
    v7 = *(_QWORD *)(v0 + 1184);
    v96 = *(_QWORD *)(v0 + 1192);
    v97 = *(_QWORD *)(v0 + 1176);
    v85 = *(_QWORD *)(v0 + 1200);
    v94 = *(_QWORD *)(v0 + 1216);
    v95 = *(_QWORD *)(v0 + 1208);
    v92 = *(_QWORD *)(v0 + 1232);
    v93 = *(_QWORD *)(v0 + 1224);
    v90 = *(_QWORD *)(v0 + 1248);
    v91 = *(_QWORD *)(v0 + 1240);
    v89 = *(_QWORD *)(v0 + 1256);
    swift_release(v4);
    if (qword_10006E5C0 != -1)
      swift_once(&qword_10006E5C0, sub_10001AB28);
    v18 = *(_QWORD *)(v0 + 1312);
    v19 = type metadata accessor for Logger(0);
    sub_100005D1C(v19, (uint64_t)qword_100071AE0);
    v20 = swift_retain(v18);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.info.getter();
    v23 = os_log_type_enabled(v21, v22);
    v24 = *(_QWORD *)(v0 + 1312);
    if (v23)
    {
      v86 = v7;
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v25 = 134217984;
      v26 = *(_QWORD *)(*(_QWORD *)(v2 + 224) + 16);
      v27 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 136);
      v28 = swift_retain(v26);
      v29 = *(_QWORD *)v27(v28);
      swift_release(v26);
      *(_QWORD *)(v0 + 1264) = v29;
      v5 = &stru_10006E000;
      v1 = v0 + 16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1264, v88);
      swift_release(v24);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "starting new generation %ld", v25, 0xCu);
      v30 = v25;
      v7 = v86;
      swift_slowDealloc(v30, -1, -1);
    }
    else
    {
      swift_release(*(_QWORD *)(v0 + 1312));
    }

    v6 = v17;
    v8 = v85;
  }
  else
  {
    sub_10003431C((_QWORD *)(v0 + 1072));
    v6 = *(_QWORD *)(v0 + 1072);
    v7 = *(_QWORD *)(v0 + 1088);
    v96 = *(_QWORD *)(v0 + 1096);
    v97 = *(_QWORD *)(v0 + 1080);
    v8 = *(_QWORD *)(v0 + 1104);
    v94 = *(_QWORD *)(v0 + 1120);
    v95 = *(_QWORD *)(v0 + 1112);
    v92 = *(_QWORD *)(v0 + 1136);
    v93 = *(_QWORD *)(v0 + 1128);
    v90 = *(_QWORD *)(v0 + 1152);
    v91 = *(_QWORD *)(v0 + 1144);
    v89 = *(_QWORD *)(v0 + 1160);
    swift_release(v4);
    if (qword_10006E5C0 != -1)
      swift_once(&qword_10006E5C0, sub_10001AB28);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_100005D1C(v9, (uint64_t)qword_100071AE0);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *(_QWORD *)(v0 + 1304);
      v14 = v6;
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v15 = 134217984;
      *(_QWORD *)(v0 + 1272) = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v88, v0 + 1280);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "retrying report for generation %ld", v15, 0xCu);
      v16 = v15;
      v6 = v14;
      v1 = v0 + 16;
      v5 = &stru_10006E000;
      swift_slowDealloc(v16, -1, -1);
    }

    v17 = *(_QWORD *)(v0 + 1304);
  }
  *(_QWORD *)(v0 + 1360) = v17;
  sub_10001E33C(v98);
  sub_10001F414(v98, v1, &qword_100070628);
  result = sub_10003B414(v1);
  if ((_DWORD)result == 1)
  {
    if (v5[46].offs != (int32_t *)-1)
      swift_once(&qword_10006E5C0, sub_10001AB28);
    v32 = type metadata accessor for Logger(0);
    v33 = sub_100005D1C(v32, (uint64_t)qword_100071AE0);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "missing kernel counters for splunk report", v36, 2u);
      swift_slowDealloc(v36, -1, -1);
    }
    v37 = *(_QWORD *)(v0 + 1312);

    v38 = *(_QWORD *)(v37 + 216);
    goto LABEL_26;
  }
  v39 = *(_QWORD *)(v0 + 16);
  v40 = *(_QWORD *)(v0 + 24);
  v41 = __CFADD__(v39, v40);
  v42 = v39 + v40;
  if (v41)
  {
    __break(1u);
    goto LABEL_28;
  }
  v43 = *(_QWORD *)(v0 + 32);
  v41 = __CFADD__(v42, v43);
  v44 = v42 + v43;
  if (v41)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v45 = *(_QWORD *)(v0 + 40);
  v46 = v44 + v45;
  if (__CFADD__(v44, v45))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v47 = *(_QWORD *)(v0 + 56);
  v48 = *(_QWORD *)(v0 + 64);
  v41 = __CFADD__(v47, v48);
  v49 = v47 + v48;
  if (v41)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v50 = *(_QWORD *)(v0 + 72);
  v41 = __CFADD__(v49, v50);
  v51 = v49 + v50;
  if (v41)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v52 = *(_QWORD *)(v0 + 80);
  v41 = __CFADD__(v51, v52);
  v53 = v51 + v52;
  if (!v41)
  {
    v54 = v8;
    v55 = *(_QWORD *)(v0 + 128);
    v87 = v7;
    v56 = *(_QWORD *)(v0 + 144);
    v57 = *(_QWORD *)(v0 + 152);
    v99 = v6;
    v58 = v53;
    v38 = *(_QWORD *)(*(_QWORD *)(v0 + 1312) + 216);
    v59 = v46;
    sub_10001FBB8(0x6F436C656E72654BLL, 0xEE00737265746E75, (uint64_t)&v100);
    v60 = v101;
    v61 = v102;
    v62 = v103;
    v63 = v104;
    v64 = v105;
    v65 = v106;
    *(_OWORD *)(v0 + 944) = v100;
    *(_OWORD *)(v0 + 960) = v60;
    *(_OWORD *)(v0 + 976) = v61;
    *(_QWORD *)(v0 + 992) = v62;
    *(_QWORD *)(v0 + 1000) = v63;
    *(_OWORD *)(v0 + 1008) = v64;
    *(_QWORD *)(v0 + 1024) = v65;
    *(_QWORD *)(v0 + 1032) = v59;
    *(_QWORD *)(v0 + 1040) = v58;
    *(_QWORD *)(v0 + 1048) = v55;
    v8 = v54;
    *(_QWORD *)(v0 + 1056) = v56;
    v7 = v87;
    *(_QWORD *)(v0 + 1064) = v57;
    v6 = v99;
    v66 = *(_OWORD *)(v0 + 944);
    v67 = *(_OWORD *)(v0 + 960);
    v68 = *(_OWORD *)(v0 + 992);
    *(_OWORD *)(v0 + 848) = *(_OWORD *)(v0 + 976);
    *(_OWORD *)(v0 + 864) = v68;
    *(_OWORD *)(v0 + 816) = v66;
    *(_OWORD *)(v0 + 832) = v67;
    v69 = *(_OWORD *)(v0 + 1008);
    v70 = *(_OWORD *)(v0 + 1024);
    v71 = *(_OWORD *)(v0 + 1056);
    *(_OWORD *)(v0 + 912) = *(_OWORD *)(v0 + 1040);
    *(_OWORD *)(v0 + 928) = v71;
    *(_OWORD *)(v0 + 880) = v69;
    *(_OWORD *)(v0 + 896) = v70;
    sub_100032B88(v0 + 816);
    sub_1000278D4((_QWORD *)(v0 + 944));
LABEL_26:
    *(_QWORD *)(v0 + 1368) = v38;
    sub_10001FBB8(0x756F43746E657645, 0xED0000737265746ELL, (uint64_t)&v100);
    v73 = v101;
    v72 = v102;
    v74 = v103;
    v75 = v104;
    v76 = v105;
    v77 = v106;
    *(_OWORD *)(v0 + 632) = v100;
    *(_OWORD *)(v0 + 648) = v73;
    *(_OWORD *)(v0 + 664) = v72;
    *(_QWORD *)(v0 + 680) = v74;
    *(_QWORD *)(v0 + 688) = v75;
    *(_OWORD *)(v0 + 696) = v76;
    *(_QWORD *)(v0 + 712) = v77;
    *(_QWORD *)(v0 + 720) = v6;
    *(_QWORD *)(v0 + 728) = v97;
    *(_QWORD *)(v0 + 736) = v7;
    *(_QWORD *)(v0 + 744) = v96;
    *(_QWORD *)(v0 + 752) = v8;
    *(_QWORD *)(v0 + 760) = v95;
    *(_QWORD *)(v0 + 768) = v94;
    *(_QWORD *)(v0 + 776) = v93;
    *(_QWORD *)(v0 + 784) = v92;
    *(_QWORD *)(v0 + 792) = v91;
    *(_QWORD *)(v0 + 800) = v90;
    *(_QWORD *)(v0 + 808) = v89;
    *(_QWORD *)(v0 + 624) = v89;
    v78 = *(_OWORD *)(v0 + 680);
    *(_OWORD *)(v0 + 480) = *(_OWORD *)(v0 + 664);
    *(_OWORD *)(v0 + 496) = v78;
    v79 = *(_OWORD *)(v0 + 744);
    *(_OWORD *)(v0 + 544) = *(_OWORD *)(v0 + 728);
    *(_OWORD *)(v0 + 560) = v79;
    v80 = *(_OWORD *)(v0 + 712);
    *(_OWORD *)(v0 + 512) = *(_OWORD *)(v0 + 696);
    *(_OWORD *)(v0 + 528) = v80;
    v81 = *(_OWORD *)(v0 + 792);
    v82 = *(_OWORD *)(v0 + 760);
    *(_OWORD *)(v0 + 592) = *(_OWORD *)(v0 + 776);
    *(_OWORD *)(v0 + 608) = v81;
    *(_OWORD *)(v0 + 576) = v82;
    v83 = *(_OWORD *)(v0 + 648);
    *(_OWORD *)(v0 + 448) = *(_OWORD *)(v0 + 632);
    *(_OWORD *)(v0 + 464) = v83;
    sub_100032EF8(v0 + 448);
    sub_1000278D4((_QWORD *)(v0 + 632));
    v84 = (_QWORD *)swift_task_alloc(dword_100070FD4);
    *(_QWORD *)(v0 + 1376) = v84;
    *v84 = v0;
    v84[1] = sub_100037134;
    return sub_1000303AC();
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_100037100()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 1336));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100037134()
{
  uint64_t **v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t **v3;

  v1 = *v0;
  v2 = *v0;
  swift_task_dealloc((*v0)[172]);
  v3 = (uint64_t **)swift_task_alloc(dword_1000706EC);
  v1[173] = (uint64_t)v3;
  *v3 = v2;
  v3[1] = (uint64_t *)sub_1000371A4;
  return sub_100020D9C(v1[160], v1[170]);
}

uint64_t sub_1000371A4(char a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(*v1 + 1384);
  v4 = *(_QWORD *)(*v1 + 1360);
  v5 = *(_QWORD *)(*v1 + 1336);
  v6 = *v1;
  swift_task_dealloc(v3);
  v7 = a1 & 1;
  if ((_DWORD)v7)
    v4 = 0;
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v7);
}

uint64_t sub_10003721C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)(v7 + 104) = a6;
  *(_QWORD *)(v7 + 80) = a5;
  *(_QWORD *)(v7 + 88) = v6;
  *(_QWORD *)(v7 + 64) = a3;
  *(_QWORD *)(v7 + 72) = a4;
  *(_QWORD *)(v7 + 48) = a1;
  *(_QWORD *)(v7 + 56) = a2;
  v8 = sub_100005690(&qword_100070038);
  *(_QWORD *)(v7 + 96) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100037284, 0, 0);
}

uint64_t sub_100037284()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v1 = *(_QWORD *)(v0 + 96);
  v21 = *(_BYTE *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 72);
  v20 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 88) + 224) + 16);
  v6 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 136);
  v7 = swift_retain(v5);
  v8 = *(_QWORD *)v6(v7);
  swift_release(v5);
  *(_QWORD *)(v0 + 16) = v3;
  KeyPath = swift_getKeyPath(&unk_10004DB28);
  v10 = swift_task_alloc(32);
  *(_QWORD *)(v10 + 16) = v3;
  *(_QWORD *)(v10 + 24) = v8;
  v19 = sub_100005A54(&qword_10006FEE0, type metadata accessor for AnalyticsSchemaV2.PipelineState, (uint64_t)&unk_10004AE00);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 16, KeyPath, sub_10003B384, v10, (char *)&type metadata for () + 8, v19);
  swift_release(KeyPath);
  swift_task_dealloc(v10);
  v11 = Duration.components.getter(v4, v2);
  Date.init(timeIntervalSinceNow:)((double)v11);
  v12 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v1, 0, 1, v12);
  *(_QWORD *)(v0 + 24) = v3;
  v13 = swift_getKeyPath(&unk_10004DB50);
  v14 = swift_task_alloc(32);
  *(_QWORD *)(v14 + 16) = v3;
  *(_QWORD *)(v14 + 24) = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 24, v13, sub_10003B3A4, v14, (char *)&type metadata for () + 8, v19);
  swift_release(v13);
  swift_task_dealloc(v14);
  sub_10003B3BC(v1, &qword_100070038);
  *(_QWORD *)(v0 + 32) = v3;
  v15 = swift_getKeyPath(&unk_10004DB00);
  v16 = swift_task_alloc(48);
  *(_QWORD *)(v16 + 16) = v3;
  *(_QWORD *)(v16 + 24) = v20;
  *(_BYTE *)(v16 + 32) = v21 & 1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 32, v15, sub_10003B3F8, v16, (char *)&type metadata for () + 8, v19);
  swift_release(v15);
  v17 = swift_task_dealloc(v16);
  dispatch thunk of ModelContext.save()(v17);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003767C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 120) = a1;
  *(_QWORD *)(v2 + 128) = v1;
  return swift_task_switch(sub_100037694, 0, 0);
}

uint64_t sub_100037694()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = sub_10001418C();
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v2 + 224);
  swift_retain(v3);
  sub_100012D4C((_QWORD *)(v0 + 16));
  sub_10003465C((uint64_t *)(v0 + 16));
  swift_release(v3);
  v4 = sub_100013E28();
  v5 = *(_QWORD *)(v2 + 224);
  *(_QWORD *)(v0 + 112) = v4;
  KeyPath = swift_getKeyPath(&unk_10004DB28);
  v7 = sub_100005A54(&qword_10006FEE0, type metadata accessor for AnalyticsSchemaV2.PipelineState, (uint64_t)&unk_10004AE00);
  swift_retain(v5);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 112, KeyPath, v7);
  swift_release(KeyPath);
  v8 = swift_getKeyPath(&unk_10004DB28);
  v9 = sub_100005A54(&qword_10006FFD8, type metadata accessor for AnalyticsSchemaV2.PipelineState, (uint64_t)&unk_10004AEBC);
  PersistentModel.getValue<A>(forKey:)((_QWORD *)(v0 + 112), v8, v9, &protocol witness table for Int);
  v10 = swift_release(v8);
  v11 = *(_QWORD *)(v0 + 112);
  *(_QWORD *)(*(uint64_t (**)(uint64_t))(**(_QWORD **)(v5 + 16) + 136))(v10) = v11;
  swift_release(v5);
  swift_release(v1);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
}

uint64_t sub_10003784C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v1[9] = v0;
  v2 = sub_100005690(&qword_100071440);
  v1[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100005690(&qword_1000714B8);
  v1[11] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[12] = v4;
  v1[13] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005690(&qword_100070CD8);
  v1[14] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[15] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v1[16] = v7;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[17] = swift_task_alloc(v8);
  v1[18] = swift_task_alloc(v8);
  return swift_task_switch(sub_100037914, 0, 0);
}

uint64_t sub_100037914()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0[9] + 200);
  v2 = type metadata accessor for AnalyticsStoreContext();
  inited = swift_initStackObject(v2, v0 + 2);
  v0[19] = inited;
  v4 = *(_QWORD *)(v1 + 16);
  v5 = type metadata accessor for ModelContext(0);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v6 = swift_retain(v4);
  *(_QWORD *)(inited + 16) = ModelContext.init(_:)(v6);
  v7 = (_QWORD *)swift_task_alloc(dword_100071334);
  v0[20] = v7;
  *v7 = v0;
  v7[1] = sub_1000379D0;
  v8 = v0[9];
  v7[15] = inited;
  v7[16] = v8;
  return swift_task_switch(sub_100037694, 0, 0);
}

uint64_t sub_1000379D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 160);
  *(_QWORD *)(v3 + 168) = a1;
  *(_QWORD *)(v3 + 176) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1000385B4;
  else
    v5 = sub_100037A3C;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100037A3C()
{
  _QWORD *v0;
  _QWORD *v1;

  v0[23] = *(_QWORD *)(v0[9] + 208);
  v1 = (_QWORD *)swift_task_alloc(dword_100070B54);
  v0[24] = v1;
  *v1 = v0;
  v1[1] = sub_100037A8C;
  return sub_10002AAEC();
}

uint64_t sub_100037A8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 192);
  *(_QWORD *)(*(_QWORD *)v1 + 200) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100038618;
  else
    v3 = sub_100037AF0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100037AF0()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0[23];
  v3 = v0[12];
  v2 = (_QWORD *)v0[13];
  v4 = v0[11];
  v5 = *(_QWORD *)(v0[9] + 192);
  sub_10001D2F0();
  *v2 = 1024;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v2, enum case for AsyncStream.Continuation.BufferingPolicy.bufferingNewest<A>(_:), v4);
  AsyncStream.init(_:bufferingPolicy:_:)(&type metadata for AnalyticsEvent, v2, sub_10003B1E8, v5, &type metadata for AnalyticsEvent);
  sub_10002BB70();
  v6 = *(_QWORD *)(v1 + 72);
  v0[26] = v6;
  return swift_task_switch(sub_100037BA4, v6, 0);
}

uint64_t sub_100037BA4()
{
  sub_10002EB1C();
  return swift_task_switch(sub_100037BE0, 0, 0);
}

uint64_t sub_100037BE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  _QWORD *v26;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;

  v1 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 144);
  v40 = v2;
  v41 = *(_QWORD *)(v0 + 168);
  v5 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 128);
  v6 = *(_QWORD *)(v0 + 112);
  v7 = *(_QWORD *)(v0 + 72);
  v8 = *(_QWORD *)(v0 + 80);
  v9 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v2, v6);
  v10 = *(unsigned __int8 *)(v5 + 80);
  v11 = (v10 + 32) & ~v10;
  v12 = (v4 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = swift_allocObject(&unk_100068A80, v12 + 8, v10 | 7);
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)(v13 + 24) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v13 + v11, v3, v6);
  *(_QWORD *)(v13 + v12) = v1;
  swift_retain(v1);
  *(_QWORD *)(v0 + 216) = sub_100033288(v8, (uint64_t)&unk_1000714C0, v13);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v40, v6);
  sub_1000350BC();
  sub_1000357B4();
  *(_QWORD *)(v0 + 224) = *(_QWORD *)(v7 + 216);
  v14 = sub_100022DB0(v41);
  if ((v16 & 1) != 0)
  {
    *(_BYTE *)(v0 + 50) = 1;
    *(_QWORD *)(v0 + 256) = 0;
    v28 = sub_1000232EC(0);
    if ((v30 & 1) != 0)
    {
      if (qword_10006E5C0 != -1)
        swift_once(&qword_10006E5C0, sub_10001AB28);
      v34 = type metadata accessor for Logger(0);
      v35 = sub_100005D1C(v34, (uint64_t)qword_100071AE0);
      *(_QWORD *)(v0 + 312) = v35;
      v36 = Logger.logObject.getter(v35);
      v37 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v36, v37))
      {
        v38 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v38 = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "reporting disabled", v38, 2u);
        swift_slowDealloc(v38, -1, -1);
      }

      v39 = (_QWORD *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
      *(_QWORD *)(v0 + 320) = v39;
      *v39 = v0;
      v39[1] = sub_100038458;
      return Task<>.value.getter();
    }
    else
    {
      v31 = v28;
      v32 = v29;
      *(_QWORD *)(v0 + 264) = v29;
      *(_QWORD *)(v0 + 272) = v28;
      v33 = (_QWORD *)swift_task_alloc(dword_10007132C);
      *(_QWORD *)(v0 + 280) = v33;
      *v33 = v0;
      v33[1] = sub_1000381BC;
      return sub_10003721C(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 168), v31, v32, 0, 1);
    }
  }
  else
  {
    v17 = v14;
    v18 = v15;
    *(_QWORD *)(v0 + 64) = *(_QWORD *)(v0 + 168);
    KeyPath = swift_getKeyPath(&unk_10004DB00);
    v20 = sub_100005A54(&qword_10006FEE0, type metadata accessor for AnalyticsSchemaV2.PipelineState, (uint64_t)&unk_10004AE00);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 64, KeyPath, v20);
    swift_release(KeyPath);
    v21 = swift_getKeyPath(&unk_10004DB00);
    v22 = sub_100005A54(&qword_10006FFD8, type metadata accessor for AnalyticsSchemaV2.PipelineState, (uint64_t)&unk_10004AEBC);
    v23 = sub_100026558();
    PersistentModel.getValue<A>(forKey:)((_QWORD *)(v0 + 40), v21, v22, v23);
    swift_release(v21);
    v24 = *(_QWORD *)(v0 + 40);
    v25 = *(_BYTE *)(v0 + 48);
    v26 = (_QWORD *)swift_task_alloc(dword_100071324);
    *(_QWORD *)(v0 + 232) = v26;
    *v26 = v0;
    v26[1] = sub_100037FA0;
    return sub_100036218(*(_QWORD *)(v0 + 152), v17, v18, 0, v24, v25);
  }
}

uint64_t sub_100037FA0(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 232);
  *(_QWORD *)(*v3 + 240) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    v8 = sub_100038688;
  }
  else
  {
    *(_BYTE *)(v6 + 49) = a2;
    *(_QWORD *)(v6 + 248) = a1;
    v8 = sub_10003801C;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_10003801C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  _QWORD *v15;

  v1 = *(_QWORD *)(v0 + 248);
  v2 = *(_BYTE *)(v0 + 49) & 1;
  *(_BYTE *)(v0 + 50) = v2;
  *(_QWORD *)(v0 + 256) = v1;
  v3 = sub_1000232EC(v2 == 0);
  if ((v5 & 1) != 0)
  {
    if (qword_10006E5C0 != -1)
      swift_once(&qword_10006E5C0, sub_10001AB28);
    v10 = type metadata accessor for Logger(0);
    v11 = sub_100005D1C(v10, (uint64_t)qword_100071AE0);
    *(_QWORD *)(v0 + 312) = v11;
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "reporting disabled", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }

    v15 = (_QWORD *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
    *(_QWORD *)(v0 + 320) = v15;
    *v15 = v0;
    v15[1] = sub_100038458;
    return Task<>.value.getter();
  }
  else
  {
    v6 = v3;
    v7 = v4;
    *(_QWORD *)(v0 + 264) = v4;
    *(_QWORD *)(v0 + 272) = v3;
    v8 = (_QWORD *)swift_task_alloc(dword_10007132C);
    *(_QWORD *)(v0 + 280) = v8;
    *v8 = v0;
    v8[1] = sub_1000381BC;
    return sub_10003721C(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 168), v6, v7, v1, v2);
  }
}

uint64_t sub_1000381BC()
{
  uint64_t **v0;
  uint64_t *v1;
  char v2;
  uint64_t **v3;
  uint64_t *v5;

  v1 = *v0;
  v2 = *((_BYTE *)*v0 + 50);
  v5 = *v0;
  swift_task_dealloc((*v0)[35]);
  v3 = (uint64_t **)swift_task_alloc(dword_100071324);
  v1[36] = (uint64_t)v3;
  *v3 = v5;
  v3[1] = (uint64_t *)sub_10003823C;
  return sub_100036218(v1[19], v1[34], v1[33], 0, v1[32], v2);
}

uint64_t sub_10003823C(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 288);
  *(_QWORD *)(*v3 + 296) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    v8 = sub_100038704;
  }
  else
  {
    *(_BYTE *)(v6 + 51) = a2;
    *(_QWORD *)(v6 + 304) = a1;
    v8 = sub_1000382B8;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_1000382B8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  _QWORD *v15;

  v1 = *(_QWORD *)(v0 + 304);
  v2 = *(_BYTE *)(v0 + 51) & 1;
  *(_BYTE *)(v0 + 50) = v2;
  *(_QWORD *)(v0 + 256) = v1;
  v3 = sub_1000232EC(v2 == 0);
  if ((v5 & 1) != 0)
  {
    if (qword_10006E5C0 != -1)
      swift_once(&qword_10006E5C0, sub_10001AB28);
    v10 = type metadata accessor for Logger(0);
    v11 = sub_100005D1C(v10, (uint64_t)qword_100071AE0);
    *(_QWORD *)(v0 + 312) = v11;
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "reporting disabled", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }

    v15 = (_QWORD *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
    *(_QWORD *)(v0 + 320) = v15;
    *v15 = v0;
    v15[1] = sub_100038458;
    return Task<>.value.getter();
  }
  else
  {
    v6 = v3;
    v7 = v4;
    *(_QWORD *)(v0 + 264) = v4;
    *(_QWORD *)(v0 + 272) = v3;
    v8 = (_QWORD *)swift_task_alloc(dword_10007132C);
    *(_QWORD *)(v0 + 280) = v8;
    *v8 = v0;
    v8[1] = sub_1000381BC;
    return sub_10003721C(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 168), v6, v7, v1, v2);
  }
}

uint64_t sub_100038458()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 320));
  return swift_task_switch(sub_1000384AC, 0, 0);
}

uint64_t sub_1000384AC()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "analytics collector task terminated unexpectedly", v3, 2u);
    swift_slowDealloc(v3, -1, -1);
  }
  v4 = *(_QWORD *)(v0 + 168);
  v6 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 152);
  v7 = *(_QWORD *)(v0 + 136);
  v8 = *(_QWORD *)(v0 + 104);
  v9 = *(_QWORD *)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 216));
  swift_release(v4);
  swift_setDeallocating(v5);
  swift_release(*(_QWORD *)(v5 + 16));

  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000385B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_release(*(_QWORD *)(v0 + 152));
  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100038618()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 152);
  swift_release(*(_QWORD *)(v0 + 168));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100038688()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 152);
  swift_release(*(_QWORD *)(v0 + 216));
  swift_release(v1);
  swift_release(v2);
  v3 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100038704()
{
  uint64_t v0;
  __objc2_ivar *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  _QWORD *v27;

  v1 = &stru_10006E000;
  if (qword_10006E5C0 != -1)
    swift_once(&qword_10006E5C0, sub_10001AB28);
  v2 = *(_QWORD *)(v0 + 296);
  v3 = type metadata accessor for Logger(0);
  sub_100005D1C(v3, (uint64_t)qword_100071AE0);
  swift_errorRetain(v2);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 296);
  if (v7)
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v9 = 138412290;
    swift_errorRetain(v8);
    v11 = _swift_stdlib_bridgeErrorToNSError(v8);
    *(_QWORD *)(v0 + 56) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64);
    *v10 = v11;
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "report failed: %@", v9, 0xCu);
    v12 = sub_100005690(&qword_10006FFB8);
    v13 = 1;
    swift_arrayDestroy(v10, 1, v12);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    swift_errorRelease(v8);
    v14 = *(_QWORD *)(v0 + 256);
    if ((*(_BYTE *)(v0 + 50) & 1) != 0)
    {
      v1 = &stru_10006E000;
LABEL_7:
      v13 = 0;
      v15 = 1;
      goto LABEL_10;
    }
    v15 = 0;
    v1 = &stru_10006E000;
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 296));
    swift_errorRelease(v8);
    swift_errorRelease(v8);

    v14 = *(_QWORD *)(v0 + 256);
    if ((*(_BYTE *)(v0 + 50) & 1) != 0)
      goto LABEL_7;
    v15 = 0;
    v13 = 1;
  }
LABEL_10:
  *(_BYTE *)(v0 + 50) = v15;
  *(_QWORD *)(v0 + 256) = v14;
  v16 = sub_1000232EC(v13);
  if ((v18 & 1) != 0)
  {
    if (v1[46].offs != (int32_t *)-1)
      swift_once(&qword_10006E5C0, sub_10001AB28);
    v23 = sub_100005D1C(v3, (uint64_t)qword_100071AE0);
    *(_QWORD *)(v0 + 312) = v23;
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "reporting disabled", v26, 2u);
      swift_slowDealloc(v26, -1, -1);
    }

    v27 = (_QWORD *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
    *(_QWORD *)(v0 + 320) = v27;
    *v27 = v0;
    v27[1] = sub_100038458;
    return Task<>.value.getter();
  }
  else
  {
    v19 = v16;
    v20 = v17;
    *(_QWORD *)(v0 + 264) = v17;
    *(_QWORD *)(v0 + 272) = v16;
    v21 = (_QWORD *)swift_task_alloc(dword_10007132C);
    *(_QWORD *)(v0 + 280) = v21;
    *v21 = v0;
    v21[1] = sub_1000381BC;
    return sub_10003721C(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 168), v19, v20, v14, v15);
  }
}

uint64_t sub_100038A7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 24) = a4;
  return swift_task_switch(sub_100038A94, 0, 0);
}

uint64_t sub_100038A94()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[3];
  v2 = type metadata accessor for AnalyticsManager();
  v0[4] = swift_allocObject(v2, 232, 7);
  sub_10003A978(v1);
  sub_100034DAC(v1);
  v3 = (_QWORD *)swift_task_alloc(dword_10007133C);
  v0[5] = v3;
  *v3 = v0;
  v3[1] = sub_100038CD4;
  return sub_10003784C();
}

uint64_t sub_100038CD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  *(_QWORD *)(*(_QWORD *)v1 + 48) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100038D68;
  else
    v3 = sub_100038D38;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100038D38()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100038D68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  swift_release(*(_QWORD *)(v0 + 32));
  v1 = *(_QWORD *)(v0 + 48);
  if (qword_10006E5C0 != -1)
    swift_once(&qword_10006E5C0, sub_10001AB28);
  v2 = type metadata accessor for Logger(0);
  sub_100005D1C(v2, (uint64_t)qword_100071AE0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138412290;
    swift_errorRetain(v1);
    v8 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 16) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
    *v7 = v8;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "failed to init AnalyticsManager: %@", v6, 0xCu);
    v9 = sub_100005690(&qword_10006FFB8);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100038F34()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[11];

  v1 = *(_OWORD *)(v0 + 160);
  v7[8] = *(_OWORD *)(v0 + 144);
  v7[9] = v1;
  v7[10] = *(_OWORD *)(v0 + 176);
  v2 = *(_OWORD *)(v0 + 96);
  v7[4] = *(_OWORD *)(v0 + 80);
  v7[5] = v2;
  v3 = *(_OWORD *)(v0 + 128);
  v7[6] = *(_OWORD *)(v0 + 112);
  v7[7] = v3;
  v4 = *(_OWORD *)(v0 + 32);
  v7[0] = *(_OWORD *)(v0 + 16);
  v7[1] = v4;
  v5 = *(_OWORD *)(v0 + 64);
  v7[2] = *(_OWORD *)(v0 + 48);
  v7[3] = v5;
  sub_10003AA40((uint64_t)v7);
  swift_release(*(_QWORD *)(v0 + 192));
  swift_release(*(_QWORD *)(v0 + 200));
  swift_release(*(_QWORD *)(v0 + 208));
  swift_release(*(_QWORD *)(v0 + 216));
  swift_release(*(_QWORD *)(v0 + 224));
  return swift_deallocClassInstance(v0, 232, 7);
}

uint64_t type metadata accessor for AnalyticsManager()
{
  return objc_opt_self(_TtC14applekeystored16AnalyticsManager);
}

uint64_t destroy for AnalyticsConfig(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 64));
}

uint64_t initializeWithCopy for AnalyticsConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for AnalyticsConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 64);
  v8 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v9;
  v10 = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v10;
  v11 = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = v11;
  v12 = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = v12;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  return a1;
}

__n128 initializeWithTake for AnalyticsConfig(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(__n128 *)(a1 + 112) = result;
  *(_OWORD *)(a1 + 128) = v8;
  return result;
}

uint64_t assignWithTake for AnalyticsConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease(v6);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 64);
  v8 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v7;
  swift_bridgeObjectRelease(v8);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnalyticsConfig(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 176))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AnalyticsConfig(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 176) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 176) = 0;
    if (a2)
      *(_QWORD *)(result + 32) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsConfig()
{
  return &type metadata for AnalyticsConfig;
}

uint64_t sub_100039378(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t sub_1000393AC(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100039410;
  return v6(a1);
}

uint64_t sub_100039410()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10003945C(uint64_t (*a1)(void))
{
  uint64_t v1;

  v1 = a1();
  return _swift_stdlib_bridgeErrorToNSError(v1);
}

uint64_t sub_10003947C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  *(_QWORD *)(v6 + 56) = v5;
  v12 = type metadata accessor for ContinuousClock.Instant(0);
  *(_QWORD *)(v6 + 64) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v6 + 72) = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 80) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 88) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 40) = a1;
  *(_QWORD *)(v6 + 48) = a2;
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  *(_BYTE *)(v6 + 32) = a5 & 1;
  return swift_task_switch(sub_100039520, 0, 0);
}

uint64_t sub_100039520()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  _QWORD *v8;

  v1 = v0[10];
  v2 = v0[8];
  v3 = v0[9];
  v4 = type metadata accessor for ContinuousClock(0);
  v5 = sub_100005A54(&qword_1000714D0, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock, (uint64_t)&protocol conformance descriptor for ContinuousClock);
  dispatch thunk of Clock.now.getter(v4, v5);
  v6 = sub_100005A54(&qword_1000714D8, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant, (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)(v0 + 5, v2, v6);
  v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v7;
  v7(v1, v2);
  v8 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of Clock.sleep(until:tolerance:)[1]);
  v0[13] = v8;
  *v8 = v0;
  v8[1] = sub_100039638;
  return dispatch thunk of Clock.sleep(until:tolerance:)(v0[11], v0 + 2, v4, v5);
}

uint64_t sub_100039638()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  v2 = *(_QWORD *)(*v1 + 104);
  v4 = *(_QWORD *)(*v1 + 88);
  v5 = *(_QWORD *)(*v1 + 64);
  v6 = *v1;
  *(_QWORD *)(v6 + 112) = v0;
  swift_task_dealloc(v2);
  v3(v4, v5);
  if (v0)
    return swift_task_switch(sub_1000396E4, 0, 0);
  v8 = *(_QWORD *)(v6 + 80);
  swift_task_dealloc(*(_QWORD *)(v6 + 88));
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_1000396E4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

_BYTE **sub_100039720(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

void *sub_100039730(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  uint64_t v4;

  if (__src)
    v4 = a2 - (_QWORD)__src;
  else
    v4 = 0;
  if (!__dst)
  {
    if (v4 <= 0)
      return __src;
LABEL_10:
    __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawBufferPointer.copyMemory source has too many elements", 69, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 487, 0);
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v4)
    goto LABEL_10;
  if (__src)
    return memmove(__dst, __src, a2 - (_QWORD)__src);
  return __src;
}

void sub_1000397C4(uint64_t *a1, _QWORD **a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a4();
  v7 = (void *)v6;
  v8 = *a1 + 8;
  if (v6)
    v10 = v6;
  else
    v10 = 0;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11);
  *a1 = v8;
  v9 = *a2;
  if (*a2)
  {
    *v9 = v7;
    *a2 = v9 + 1;
  }
  else
  {

  }
}

uint64_t sub_100039874@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_10003989C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  _QWORD v28[6];

  v4 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v4);
  v6 = (char *)v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[3] = &type metadata for ProcessAnalyticsReport;
  v28[4] = sub_10003BAA8();
  v7 = sub_10003BAEC();
  v28[5] = v7;
  v8 = swift_allocObject(&unk_100068BC0, 136, 7);
  v28[0] = v8;
  v9 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v8 + 80) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v8 + 96) = v9;
  *(_OWORD *)(v8 + 112) = *(_OWORD *)(a1 + 96);
  *(_QWORD *)(v8 + 128) = *(_QWORD *)(a1 + 112);
  v10 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v8 + 32) = v10;
  v11 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v8 + 64) = v11;
  v12 = sub_100005E2C(v28, (uint64_t)&type metadata for ProcessAnalyticsReport);
  v13 = *(_QWORD *)(a2 + 16);
  sub_10003B9A0((_QWORD *)a1);
  swift_retain(v13);
  v14 = dispatch thunk of JSONEncoder.encode<A>(_:)(v12, &type metadata for ProcessAnalyticsReport, v7);
  v16 = v15;
  v17 = swift_release(v13);
  static String.Encoding.utf8.getter(v17);
  v18 = String.init(data:encoding:)(v14, v16, v6);
  if (v19)
  {
    v20 = v18;
    sub_10001BAC4(v14, v16);
  }
  else
  {
    if (qword_10006E5C0 != -1)
      swift_once(&qword_10006E5C0, sub_10001AB28);
    v22 = type metadata accessor for Logger(0);
    v23 = sub_100005D1C(v22, (uint64_t)qword_100071AE0);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "JSON utf8 conversion failed", v26, 2u);
      swift_slowDealloc(v26, -1, -1);
    }
    sub_10001BAC4(v14, v16);

    v20 = 0;
  }
  sub_100005D78(v28);
  return v20;
}

uint64_t sub_100039B78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  _QWORD v29[6];

  v4 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v4);
  v6 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29[3] = &type metadata for FileAnalyticsReport;
  v29[4] = sub_10003B8C4();
  v7 = sub_10003B908();
  v29[5] = v7;
  v8 = (_OWORD *)swift_allocObject(&unk_100068B98, 160, 7);
  v29[0] = v8;
  v9 = *(_OWORD *)(a1 + 112);
  v8[7] = *(_OWORD *)(a1 + 96);
  v8[8] = v9;
  v8[9] = *(_OWORD *)(a1 + 128);
  v10 = *(_OWORD *)(a1 + 48);
  v8[3] = *(_OWORD *)(a1 + 32);
  v8[4] = v10;
  v11 = *(_OWORD *)(a1 + 80);
  v8[5] = *(_OWORD *)(a1 + 64);
  v8[6] = v11;
  v12 = *(_OWORD *)(a1 + 16);
  v8[1] = *(_OWORD *)a1;
  v8[2] = v12;
  v13 = sub_100005E2C(v29, (uint64_t)&type metadata for FileAnalyticsReport);
  v14 = *(_QWORD *)(a2 + 16);
  sub_1000279C4((_QWORD *)a1);
  swift_retain(v14);
  v15 = dispatch thunk of JSONEncoder.encode<A>(_:)(v13, &type metadata for FileAnalyticsReport, v7);
  v17 = v16;
  v18 = swift_release(v14);
  static String.Encoding.utf8.getter(v18);
  v19 = String.init(data:encoding:)(v15, v17, v6);
  if (v20)
  {
    v21 = v19;
    sub_10001BAC4(v15, v17);
  }
  else
  {
    if (qword_10006E5C0 != -1)
      swift_once(&qword_10006E5C0, sub_10001AB28);
    v23 = type metadata accessor for Logger(0);
    v24 = sub_100005D1C(v23, (uint64_t)qword_100071AE0);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "JSON utf8 conversion failed", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }
    sub_10001BAC4(v15, v17);

    v21 = 0;
  }
  sub_100005D78(v29);
  return v21;
}

uint64_t sub_100039E54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  _QWORD v30[6];

  v4 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v4);
  v6 = (char *)v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30[3] = &type metadata for EventCounterReport;
  v30[4] = sub_10003B548();
  v7 = sub_10003B58C();
  v30[5] = v7;
  v8 = swift_allocObject(&unk_100068AD0, 200, 7);
  v30[0] = v8;
  v9 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(v8 + 144) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v8 + 160) = v9;
  *(_OWORD *)(v8 + 176) = *(_OWORD *)(a1 + 160);
  *(_QWORD *)(v8 + 192) = *(_QWORD *)(a1 + 176);
  v10 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v8 + 80) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v8 + 96) = v10;
  v11 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v8 + 112) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v8 + 128) = v11;
  v12 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v8 + 32) = v12;
  v13 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v8 + 64) = v13;
  v14 = sub_100005E2C(v30, (uint64_t)&type metadata for EventCounterReport);
  v15 = *(_QWORD *)(a2 + 16);
  sub_10002786C((_QWORD *)a1);
  swift_retain(v15);
  v16 = dispatch thunk of JSONEncoder.encode<A>(_:)(v14, &type metadata for EventCounterReport, v7);
  v18 = v17;
  v19 = swift_release(v15);
  static String.Encoding.utf8.getter(v19);
  v20 = String.init(data:encoding:)(v16, v18, v6);
  if (v21)
  {
    v22 = v20;
    sub_10001BAC4(v16, v18);
  }
  else
  {
    if (qword_10006E5C0 != -1)
      swift_once(&qword_10006E5C0, sub_10001AB28);
    v24 = type metadata accessor for Logger(0);
    v25 = sub_100005D1C(v24, (uint64_t)qword_100071AE0);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "JSON utf8 conversion failed", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }
    sub_10001BAC4(v16, v18);

    v22 = 0;
  }
  sub_100005D78(v30);
  return v22;
}

uint64_t sub_10003A140(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  _QWORD v29[6];

  v4 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v4);
  v6 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29[3] = &type metadata for KernelCounterReport;
  v29[4] = sub_10003B430();
  v7 = sub_10003B474();
  v29[5] = v7;
  v8 = (_OWORD *)swift_allocObject(&unk_100068AA8, 144, 7);
  v29[0] = v8;
  v9 = *(_OWORD *)(a1 + 80);
  v8[5] = *(_OWORD *)(a1 + 64);
  v8[6] = v9;
  v10 = *(_OWORD *)(a1 + 112);
  v8[7] = *(_OWORD *)(a1 + 96);
  v8[8] = v10;
  v11 = *(_OWORD *)(a1 + 16);
  v8[1] = *(_OWORD *)a1;
  v8[2] = v11;
  v12 = *(_OWORD *)(a1 + 48);
  v8[3] = *(_OWORD *)(a1 + 32);
  v8[4] = v12;
  v13 = sub_100005E2C(v29, (uint64_t)&type metadata for KernelCounterReport);
  v14 = *(_QWORD *)(a2 + 16);
  sub_10002786C((_QWORD *)a1);
  swift_retain(v14);
  v15 = dispatch thunk of JSONEncoder.encode<A>(_:)(v13, &type metadata for KernelCounterReport, v7);
  v17 = v16;
  v18 = swift_release(v14);
  static String.Encoding.utf8.getter(v18);
  v19 = String.init(data:encoding:)(v15, v17, v6);
  if (v20)
  {
    v21 = v19;
    sub_10001BAC4(v15, v17);
  }
  else
  {
    if (qword_10006E5C0 != -1)
      swift_once(&qword_10006E5C0, sub_10001AB28);
    v23 = type metadata accessor for Logger(0);
    v24 = sub_100005D1C(v23, (uint64_t)qword_100071AE0);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "JSON utf8 conversion failed", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }
    sub_10001BAC4(v15, v17);

    v21 = 0;
  }
  sub_100005D78(v29);
  return v21;
}

uint64_t sub_10003A414(_OWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  _QWORD v26[6];

  v4 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v4);
  v6 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[3] = &type metadata for FileAnalyticsEvent;
  v26[4] = sub_10003B734();
  v7 = sub_10003B778();
  v26[5] = v7;
  v8 = (_OWORD *)swift_allocObject(&unk_100068B70, 96, 7);
  v26[0] = v8;
  v9 = a1[3];
  v8[3] = a1[2];
  v8[4] = v9;
  v8[5] = a1[4];
  v10 = a1[1];
  v8[1] = *a1;
  v8[2] = v10;
  v11 = sub_100005E2C(v26, (uint64_t)&type metadata for FileAnalyticsEvent);
  v12 = *(_QWORD *)(a2 + 16);
  sub_10003B7E8((uint64_t)a1);
  swift_retain(v12);
  v13 = dispatch thunk of JSONEncoder.encode<A>(_:)(v11, &type metadata for FileAnalyticsEvent, v7);
  v15 = v14;
  v16 = swift_release(v12);
  static String.Encoding.utf8.getter(v16);
  v17 = String.init(data:encoding:)(v13, v15, v6);
  if (v18)
  {
    v19 = v17;
    sub_10001BAC4(v13, v15);
  }
  else
  {
    if (qword_10006E5C0 != -1)
      swift_once(&qword_10006E5C0, sub_10001AB28);
    v21 = type metadata accessor for Logger(0);
    sub_100005D1C(v21, (uint64_t)qword_100071AE0);
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "JSON utf8 conversion failed", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }
    sub_10001BAC4(v13, v15);

    v19 = 0;
  }
  sub_100005D78(v26);
  return v19;
}

uint64_t sub_10003A6E0(_OWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ObjectType;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD v28[4];

  v2 = sub_100005690(&qword_100071440);
  __chkstk_darwin(v2);
  v4 = (char *)v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TaskPriority(0);
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  v7 = swift_allocObject(&unk_100068A08, 208, 7);
  *(_QWORD *)(v7 + 16) = 0;
  v8 = (_QWORD *)(v7 + 16);
  *(_QWORD *)(v7 + 24) = 0;
  v9 = a1[9];
  *(_OWORD *)(v7 + 160) = a1[8];
  *(_OWORD *)(v7 + 176) = v9;
  *(_OWORD *)(v7 + 192) = a1[10];
  v10 = a1[5];
  *(_OWORD *)(v7 + 96) = a1[4];
  *(_OWORD *)(v7 + 112) = v10;
  v11 = a1[7];
  *(_OWORD *)(v7 + 128) = a1[6];
  *(_OWORD *)(v7 + 144) = v11;
  v12 = a1[1];
  *(_OWORD *)(v7 + 32) = *a1;
  *(_OWORD *)(v7 + 48) = v12;
  v13 = a1[3];
  *(_OWORD *)(v7 + 64) = a1[2];
  *(_OWORD *)(v7 + 80) = v13;
  v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  v15 = sub_10003A978((uint64_t)a1);
  if (v14 == 1)
  {
    sub_10003B3BC((uint64_t)v4, &qword_100071440);
    v16 = 0;
    v17 = 0;
    v18 = 7168;
  }
  else
  {
    v19 = TaskPriority.rawValue.getter(v15);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    v18 = v19 | 0x1C00;
    v20 = *v8;
    if (*v8)
    {
      v21 = *(_QWORD *)(v7 + 24);
      ObjectType = swift_getObjectType(*v8);
      swift_unknownObjectRetain(v20);
      v16 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v21);
      v17 = v23;
      swift_unknownObjectRelease(v20);
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
  }
  v24 = swift_allocObject(&unk_100068A30, 32, 7);
  *(_QWORD *)(v24 + 16) = &unk_100071450;
  *(_QWORD *)(v24 + 24) = v7;
  if (v17 | v16)
  {
    v28[0] = 0;
    v28[1] = 0;
    v25 = v28;
    v28[2] = v16;
    v28[3] = v17;
  }
  else
  {
    v25 = 0;
  }
  v26 = swift_task_create(v18, v25, (char *)&type metadata for () + 8, &unk_100071460, v24);
  return swift_release(v26);
}

uint64_t sub_10003A8E4()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[8]);
  swift_bridgeObjectRelease(v0[12]);
  return swift_deallocObject(v0, 208, 7);
}

uint64_t sub_10003A918()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_10007144C);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_10003C880;
  v2[3] = v0 + 32;
  return swift_task_switch(sub_100038A94, 0, 0);
}

uint64_t sub_10003A978(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 64));
  swift_bridgeObjectRetain(v2);
  return a1;
}

uint64_t sub_10003A9AC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10003A9D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10007145C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10003C880;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100071458 + dword_100071458))(a1, v4);
}

uint64_t sub_10003AA40(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_10003AA74(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  char v8;

  if (a1 == 0xD000000000000019 && a2 == 0x8000000100051F80)
  {
    v4 = 0x8000000100051F80;
LABEL_6:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, 0x8000000100051F80, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
    goto LABEL_6;
  }
  if (a1 == 0xD000000000000015)
  {
    v6 = 0x8000000100051FA0;
    if (a2 == 0x8000000100051FA0)
      goto LABEL_11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100051FA0, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if (a1 == 0x6F7463656C6C6F63 && a2 == 0xEF6769666E6F4372)
  {
    v7 = 0xEF6769666E6F4372;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F7463656C6C6F63, 0xEF6769666E6F4372, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_17;
  }
  if (a1 == 0x726574726F706572 && a2 == 0xEE006769666E6F43)
  {
    swift_bridgeObjectRelease(0xEE006769666E6F43);
    return 3;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x726574726F706572, 0xEE006769666E6F43, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_10003AC6C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  unsigned __int8 v80;
  unsigned __int8 v81;
  uint64_t v82;
  char v83;
  char v84;
  char v85;
  char v86;
  char v87;
  char v88;

  v42 = sub_100005690(&qword_100071478);
  v5 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_100005E2C(a1, v8);
  v10 = sub_10003B06C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AnalyticsConfig.CodingKeys, &type metadata for AnalyticsConfig.CodingKeys, v10, v8, v9);
  if (v2)
    return sub_100005D78(a1);
  v11 = v5;
  LOBYTE(v48) = 0;
  v12 = v42;
  v13 = KeyedDecodingContainer.decode(_:forKey:)(&v48, v42);
  LOBYTE(v48) = 1;
  v41 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v48, v12);
  v87 = v14 & 1;
  LOBYTE(v70) = 2;
  v40 = v14;
  v15 = sub_10003B0B0();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for EventCollectorConfig, &v70, v12, &type metadata for EventCollectorConfig, v15);
  v39 = v49;
  v34 = v50;
  v35 = v48;
  v37 = v51;
  v16 = v53;
  v36 = v52;
  v88 = 3;
  v17 = sub_10003B0F4();
  swift_bridgeObjectRetain(v39);
  v38 = v16;
  swift_bridgeObjectRetain(v16);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for AnalyticsReporterConfig, &v88, v12, &type metadata for AnalyticsReporterConfig, v17);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v7, v12);
  v26 = v70;
  v27 = v72;
  v28 = v74;
  v29 = v76;
  v42 = v78;
  v33 = v79;
  v31 = v81;
  v32 = v80;
  v30 = v82;
  v86 = v71;
  v85 = v73;
  v84 = v75;
  v83 = v77;
  v47 = v40 & 1;
  v46 = v71;
  v45 = v73;
  v44 = v75;
  v43 = v77;
  sub_100005D78(a1);
  v18 = v41;
  v48 = v13;
  v49 = v41;
  LOBYTE(v50) = v87;
  v20 = v34;
  v19 = v35;
  v21 = v38;
  v22 = v39;
  v51 = v35;
  v52 = v39;
  v53 = v34;
  v54 = v37;
  v55 = v36;
  v56 = v38;
  v57 = v26;
  v58 = v86;
  v59 = v27;
  v60 = v85;
  v61 = v28;
  v62 = v84;
  v63 = v29;
  v64 = v83;
  v65 = v42;
  v66 = v33;
  v67 = v32;
  v68 = v31;
  v69 = v30;
  result = sub_10003AA40((uint64_t)&v48);
  *(_QWORD *)a2 = v13;
  *(_QWORD *)(a2 + 8) = v18;
  *(_BYTE *)(a2 + 16) = v47;
  *(_QWORD *)(a2 + 24) = v19;
  *(_QWORD *)(a2 + 32) = v22;
  *(_QWORD *)(a2 + 40) = v20;
  *(_BYTE *)(a2 + 48) = v37;
  *(_QWORD *)(a2 + 56) = v36;
  *(_QWORD *)(a2 + 64) = v21;
  *(_QWORD *)(a2 + 72) = v26;
  *(_BYTE *)(a2 + 80) = v46;
  *(_QWORD *)(a2 + 88) = v27;
  *(_BYTE *)(a2 + 96) = v45;
  *(_QWORD *)(a2 + 104) = v28;
  *(_BYTE *)(a2 + 112) = v44;
  *(_QWORD *)(a2 + 120) = v29;
  *(_BYTE *)(a2 + 128) = v43;
  v24 = v33;
  *(_QWORD *)(a2 + 136) = v42;
  *(_QWORD *)(a2 + 144) = v24;
  *(_BYTE *)(a2 + 152) = v32;
  *(_BYTE *)(a2 + 160) = v31;
  *(_QWORD *)(a2 + 168) = v30;
  return result;
}

unint64_t sub_10003B06C()
{
  unint64_t result;

  result = qword_100071480;
  if (!qword_100071480)
  {
    result = swift_getWitnessTable(&unk_10004DC94, &type metadata for AnalyticsConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100071480);
  }
  return result;
}

unint64_t sub_10003B0B0()
{
  unint64_t result;

  result = qword_100071488;
  if (!qword_100071488)
  {
    result = swift_getWitnessTable(&unk_10004D3A0, &type metadata for EventCollectorConfig);
    atomic_store(result, (unint64_t *)&qword_100071488);
  }
  return result;
}

unint64_t sub_10003B0F4()
{
  unint64_t result;

  result = qword_100071490;
  if (!qword_100071490)
  {
    result = swift_getWitnessTable(&unk_10004C760, &type metadata for AnalyticsReporterConfig);
    atomic_store(result, (unint64_t *)&qword_100071490);
  }
  return result;
}

unint64_t sub_10003B138()
{
  unint64_t result;

  result = qword_1000714A8;
  if (!qword_1000714A8)
  {
    result = swift_getWitnessTable(&unk_10004D378, &type metadata for EventCollectorConfig);
    atomic_store(result, (unint64_t *)&qword_1000714A8);
  }
  return result;
}

uint64_t sub_10003B17C(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return a1;
}

unint64_t sub_10003B1A4()
{
  unint64_t result;

  result = qword_1000714B0;
  if (!qword_1000714B0)
  {
    result = swift_getWitnessTable(&unk_10004C738, &type metadata for AnalyticsReporterConfig);
    atomic_store(result, (unint64_t *)&qword_1000714B0);
  }
  return result;
}

void sub_10003B1E8(uint64_t a1)
{
  uint64_t v1;

  sub_10001E1A8(a1, v1);
}

uint64_t sub_10003B1F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_100005690(&qword_100070CD8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_10003B284(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(sub_100005690(&qword_100070CD8) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = v1 + v5;
  v9 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v10 = (_QWORD *)swift_task_alloc(dword_100070CCC);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10003B32C;
  return sub_10002D0F8(a1, v6, v7, v8, v9);
}

uint64_t sub_10003B32C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10003B384()
{
  uint64_t v0;

  return sub_10000EBF8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10003B3A4()
{
  uint64_t v0;

  return sub_10000F324(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10003B3BC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100005690(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10003B3F8()
{
  uint64_t v0;

  return sub_10000EF3C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
}

uint64_t sub_10003B414(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 208))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

unint64_t sub_10003B430()
{
  unint64_t result;

  result = qword_1000714E0;
  if (!qword_1000714E0)
  {
    result = swift_getWitnessTable(&unk_10004CC20, &type metadata for KernelCounterReport);
    atomic_store(result, (unint64_t *)&qword_1000714E0);
  }
  return result;
}

unint64_t sub_10003B474()
{
  unint64_t result;

  result = qword_1000714E8;
  if (!qword_1000714E8)
  {
    result = swift_getWitnessTable(&unk_10004CBF8, &type metadata for KernelCounterReport);
    atomic_store(result, (unint64_t *)&qword_1000714E8);
  }
  return result;
}

uint64_t sub_10003B4B8()
{
  return sub_10003B5D8(144);
}

_QWORD *sub_10003B4C0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[2];
  v3 = a1[4];
  v4 = a1[7];
  v5 = a1[9];
  v6 = a1[11];
  v7 = a1[13];
  swift_bridgeObjectRelease(a1[15]);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

unint64_t sub_10003B548()
{
  unint64_t result;

  result = qword_100071500;
  if (!qword_100071500)
  {
    result = swift_getWitnessTable(&unk_10004CBD0, &type metadata for EventCounterReport);
    atomic_store(result, (unint64_t *)&qword_100071500);
  }
  return result;
}

unint64_t sub_10003B58C()
{
  unint64_t result;

  result = qword_100071508;
  if (!qword_100071508)
  {
    result = swift_getWitnessTable(&unk_10004CBA8, &type metadata for EventCounterReport);
    atomic_store(result, (unint64_t *)&qword_100071508);
  }
  return result;
}

uint64_t sub_10003B5D0()
{
  return sub_10003B5D8(200);
}

uint64_t sub_10003B5D8(uint64_t a1)
{
  _QWORD *v1;

  swift_bridgeObjectRelease(v1[4]);
  swift_bridgeObjectRelease(v1[6]);
  swift_bridgeObjectRelease(v1[8]);
  swift_bridgeObjectRelease(v1[10]);
  swift_bridgeObjectRelease(v1[12]);
  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_10003B62C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_100071524);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10003C880;
  return sub_100035988(a1, v4, v5, v6);
}

uint64_t sub_10003B69C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10003B6C8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10007153C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10003B32C;
  return sub_10003527C(a1, v4, v5, v6);
}

unint64_t sub_10003B734()
{
  unint64_t result;

  result = qword_100071548;
  if (!qword_100071548)
  {
    result = swift_getWitnessTable(&unk_10004C28C, &type metadata for FileAnalyticsEvent);
    atomic_store(result, (unint64_t *)&qword_100071548);
  }
  return result;
}

unint64_t sub_10003B778()
{
  unint64_t result;

  result = qword_100071550;
  if (!qword_100071550)
  {
    result = swift_getWitnessTable(&unk_10004C264, &type metadata for FileAnalyticsEvent);
    atomic_store(result, (unint64_t *)&qword_100071550);
  }
  return result;
}

uint64_t sub_10003B7BC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 96, 7);
}

uint64_t sub_10003B7E8(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  return a1;
}

_QWORD *sub_10003B81C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[2];
  v3 = a1[4];
  v4 = a1[7];
  v5 = a1[9];
  v6 = a1[11];
  v7 = a1[13];
  v8 = a1[15];
  v9 = a1[17];
  swift_bridgeObjectRelease(a1[19]);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

unint64_t sub_10003B8C4()
{
  unint64_t result;

  result = qword_100071558;
  if (!qword_100071558)
  {
    result = swift_getWitnessTable(&unk_10004CB80, &type metadata for FileAnalyticsReport);
    atomic_store(result, (unint64_t *)&qword_100071558);
  }
  return result;
}

unint64_t sub_10003B908()
{
  unint64_t result;

  result = qword_100071560;
  if (!qword_100071560)
  {
    result = swift_getWitnessTable(&unk_10004CB58, &type metadata for FileAnalyticsReport);
    atomic_store(result, (unint64_t *)&qword_100071560);
  }
  return result;
}

uint64_t sub_10003B94C()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[8]);
  swift_bridgeObjectRelease(v0[10]);
  swift_bridgeObjectRelease(v0[12]);
  swift_bridgeObjectRelease(v0[14]);
  swift_bridgeObjectRelease(v0[16]);
  return swift_deallocObject(v0, 160, 7);
}

_QWORD *sub_10003B9A0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[4];
  v3 = a1[6];
  v4 = a1[8];
  v5 = a1[10];
  v6 = a1[12];
  swift_bridgeObjectRetain(a1[2]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

_QWORD *sub_10003BA14(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a1[2];
  v3 = a1[4];
  v4 = a1[7];
  v5 = a1[9];
  v6 = a1[11];
  v7 = a1[13];
  v8 = a1[15];
  swift_bridgeObjectRelease(a1[17]);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

unint64_t sub_10003BAA8()
{
  unint64_t result;

  result = qword_100071578;
  if (!qword_100071578)
  {
    result = swift_getWitnessTable(&unk_10004CB30, &type metadata for ProcessAnalyticsReport);
    atomic_store(result, (unint64_t *)&qword_100071578);
  }
  return result;
}

unint64_t sub_10003BAEC()
{
  unint64_t result;

  result = qword_100071580;
  if (!qword_100071580)
  {
    result = swift_getWitnessTable(&unk_10004CB08, &type metadata for ProcessAnalyticsReport);
    atomic_store(result, (unint64_t *)&qword_100071580);
  }
  return result;
}

uint64_t sub_10003BB30()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[8]);
  swift_bridgeObjectRelease(v0[10]);
  swift_bridgeObjectRelease(v0[12]);
  swift_bridgeObjectRelease(v0[14]);
  return swift_deallocObject(v0, 136, 7);
}

uint64_t sub_10003BB7C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100005F1C(a2);
    result = swift_getWitnessTable(&unk_10004D7CC, v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AnalyticsConfig.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10003BC08 + 4 * byte_10004D985[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10003BC3C + 4 * byte_10004D980[v4]))();
}

uint64_t sub_10003BC3C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003BC44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003BC4CLL);
  return result;
}

uint64_t sub_10003BC58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003BC60);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10003BC64(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003BC6C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsConfig.CodingKeys()
{
  return &type metadata for AnalyticsConfig.CodingKeys;
}

__n128 initializeWithCopy for AnalyticsManagerCounters.Snapshot(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t getEnumTagSinglePayload for AnalyticsManagerCounters.Snapshot(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 96))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AnalyticsManagerCounters.Snapshot(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 96) = v3;
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsManagerCounters.Snapshot()
{
  return &type metadata for AnalyticsManagerCounters.Snapshot;
}

unint64_t sub_10003BD1C()
{
  unint64_t result;

  result = qword_100071598;
  if (!qword_100071598)
  {
    result = swift_getWitnessTable(&unk_10004DC6C, &type metadata for AnalyticsConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100071598);
  }
  return result;
}

unint64_t sub_10003BD64()
{
  unint64_t result;

  result = qword_1000715A0;
  if (!qword_1000715A0)
  {
    result = swift_getWitnessTable(&unk_10004DBDC, &type metadata for AnalyticsConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000715A0);
  }
  return result;
}

unint64_t sub_10003BDAC()
{
  unint64_t result;

  result = qword_1000715A8;
  if (!qword_1000715A8)
  {
    result = swift_getWitnessTable(&unk_10004DC04, &type metadata for AnalyticsConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000715A8);
  }
  return result;
}

uint64_t sub_10003BDF0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;

  if (a1 == 0x69746172656E6567 && a2 == 0xEA00000000006E6FLL)
  {
    v5 = 0xEA00000000006E6FLL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69746172656E6567, 0xEA00000000006E6FLL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x656C626967696C65 && a2 == 0xEE0073746E657645)
  {
    v7 = 0xEE0073746E657645;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C626967696C65, 0xEE0073746E657645, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x656C626967696C65 && a2 == 0xED000073656C6946)
  {
    v8 = 0xED000073656C6946;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C626967696C65, 0xED000073656C6946, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6465746365707865 && a2 == 0xEE0073746E657645)
  {
    v9 = 0xEE0073746E657645;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6465746365707865, 0xEE0073746E657645, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x4564657070696B73 && a2 == 0xED000073746E6576)
  {
    v10 = 0xED000073746E6576;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4564657070696B73, 0xED000073746E6576, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0xD000000000000016)
  {
    v11 = 0x8000000100051470;
    if (a2 == 0x8000000100051470)
      goto LABEL_37;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x8000000100051470, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if (a1 == 0xD000000000000010)
  {
    v12 = 0x8000000100051530;
    if (a2 == 0x8000000100051530)
      goto LABEL_42;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100051530, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_42:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if (a1 == 0xD000000000000010)
  {
    v13 = 0x8000000100051490;
    if (a2 == 0x8000000100051490)
      goto LABEL_47;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100051490, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
LABEL_47:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if (a1 == 0xD000000000000010)
  {
    v14 = 0x80000001000514B0;
    if (a2 == 0x80000001000514B0)
      goto LABEL_52;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001000514B0, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
LABEL_52:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if (a1 == 0xD000000000000010)
  {
    v15 = 0x80000001000514D0;
    if (a2 == 0x80000001000514D0)
      goto LABEL_57;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001000514D0, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
LABEL_57:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x80000001000514F0)
  {
    v16 = 0x80000001000514F0;
LABEL_63:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000001000514F0, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
    goto LABEL_63;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x8000000100051510)
  {
    swift_bridgeObjectRelease(0x8000000100051510);
    return 11;
  }
  else
  {
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100051510, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v17 & 1) != 0)
      return 11;
    else
      return 12;
  }
}

uint64_t sub_10003C2EC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;

  v5 = sub_100005690(&qword_1000715B0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100005E2C(a1, v9);
  v11 = sub_10003C608();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AnalyticsManagerCounters.Snapshot.CodingKeys, &type metadata for AnalyticsManagerCounters.Snapshot.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_100005D78(a1);
  v40 = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v40, v5);
  v39 = 1;
  v13 = KeyedDecodingContainer.decode(_:forKey:)(&v39, v5);
  v38 = 2;
  v28 = KeyedDecodingContainer.decode(_:forKey:)(&v38, v5);
  v37 = 3;
  v27 = KeyedDecodingContainer.decode(_:forKey:)(&v37, v5);
  v36 = 4;
  v26 = KeyedDecodingContainer.decode(_:forKey:)(&v36, v5);
  v35 = 5;
  v25 = KeyedDecodingContainer.decode(_:forKey:)(&v35, v5);
  v34 = 6;
  v24 = KeyedDecodingContainer.decode(_:forKey:)(&v34, v5);
  v33 = 7;
  v23 = KeyedDecodingContainer.decode(_:forKey:)(&v33, v5);
  v32 = 8;
  v22 = KeyedDecodingContainer.decode(_:forKey:)(&v32, v5);
  v31 = 9;
  v21 = KeyedDecodingContainer.decode(_:forKey:)(&v31, v5);
  v30 = 10;
  v20 = KeyedDecodingContainer.decode(_:forKey:)(&v30, v5);
  v29 = 11;
  v14 = KeyedDecodingContainer.decode(_:forKey:)(&v29, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  result = sub_100005D78(a1);
  *a2 = v12;
  a2[1] = v13;
  v16 = v27;
  a2[2] = v28;
  a2[3] = v16;
  v17 = v25;
  a2[4] = v26;
  a2[5] = v17;
  v18 = v23;
  a2[6] = v24;
  a2[7] = v18;
  v19 = v21;
  a2[8] = v22;
  a2[9] = v19;
  a2[10] = v20;
  a2[11] = v14;
  return result;
}

unint64_t sub_10003C608()
{
  unint64_t result;

  result = qword_1000715B8;
  if (!qword_1000715B8)
  {
    result = swift_getWitnessTable(&unk_10004DD9C, &type metadata for AnalyticsManagerCounters.Snapshot.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000715B8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AnalyticsManagerCounters.Snapshot.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF5)
    goto LABEL_17;
  if (a2 + 11 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 11) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 11;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 11;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 11;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xC;
  v8 = v6 - 12;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AnalyticsManagerCounters.Snapshot.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_10003C728 + 4 * byte_10004D98F[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_10003C75C + 4 * byte_10004D98A[v4]))();
}

uint64_t sub_10003C75C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003C764(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003C76CLL);
  return result;
}

uint64_t sub_10003C778(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003C780);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_10003C784(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003C78C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsManagerCounters.Snapshot.CodingKeys()
{
  return &type metadata for AnalyticsManagerCounters.Snapshot.CodingKeys;
}

unint64_t sub_10003C7AC()
{
  unint64_t result;

  result = qword_1000715C8;
  if (!qword_1000715C8)
  {
    result = swift_getWitnessTable(&unk_10004DD74, &type metadata for AnalyticsManagerCounters.Snapshot.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000715C8);
  }
  return result;
}

unint64_t sub_10003C7F4()
{
  unint64_t result;

  result = qword_1000715D0;
  if (!qword_1000715D0)
  {
    result = swift_getWitnessTable(&unk_10004DCE4, &type metadata for AnalyticsManagerCounters.Snapshot.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000715D0);
  }
  return result;
}

unint64_t sub_10003C83C()
{
  unint64_t result;

  result = qword_1000715D8;
  if (!qword_1000715D8)
  {
    result = swift_getWitnessTable(&unk_10004DD0C, &type metadata for AnalyticsManagerCounters.Snapshot.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000715D8);
  }
  return result;
}

double sub_10003C88C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v0 = sub_100005690(&qword_1000715E0);
  v1 = swift_allocObject(v0, 19088, 7);
  *(_OWORD *)(v1 + 16) = xmmword_10004DDF0;
  strcpy((char *)(v1 + 32), "/private/var");
  *(_BYTE *)(v1 + 45) = 0;
  *(_WORD *)(v1 + 46) = -5120;
  *(_QWORD *)(v1 + 56) = 0;
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 48) = &off_100061518;
  *(_BYTE *)(v1 + 72) = 1;
  *(_QWORD *)(v1 + 80) = 0xD000000000000017;
  *(_QWORD *)(v1 + 88) = 0x8000000100051FC0;
  *(_QWORD *)(v1 + 96) = &off_100061578;
  *(_OWORD *)(v1 + 104) = xmmword_10004DE00;
  *(_BYTE *)(v1 + 120) = 0;
  *(_QWORD *)(v1 + 128) = 0xD000000000000018;
  *(_QWORD *)(v1 + 136) = 0x8000000100051FE0;
  *(_QWORD *)(v1 + 144) = &_swiftEmptyArrayStorage;
  *(_OWORD *)(v1 + 152) = xmmword_10004DE10;
  *(_BYTE *)(v1 + 168) = 0;
  *(_QWORD *)(v1 + 176) = 0xD000000000000018;
  *(_QWORD *)(v1 + 184) = 0x8000000100051FE0;
  *(_QWORD *)(v1 + 192) = &off_1000615A8;
  *(_OWORD *)(v1 + 200) = xmmword_10004DE20;
  *(_BYTE *)(v1 + 216) = 0;
  *(_QWORD *)(v1 + 224) = 0xD000000000000018;
  *(_QWORD *)(v1 + 232) = 0x8000000100051FE0;
  *(_QWORD *)(v1 + 240) = &off_1000615E8;
  *(_QWORD *)&result = 7;
  *(_OWORD *)(v1 + 248) = xmmword_10004DE30;
  *(_BYTE *)(v1 + 264) = 0;
  *(_QWORD *)(v1 + 272) = 0xD000000000000018;
  *(_QWORD *)(v1 + 280) = 0x8000000100051FE0;
  *(_QWORD *)(v1 + 288) = &off_100061618;
  *(_QWORD *)(v1 + 296) = 14;
  *(_QWORD *)(v1 + 304) = 2128;
  *(_BYTE *)(v1 + 312) = 0;
  *(_QWORD *)(v1 + 320) = 0xD000000000000021;
  *(_QWORD *)(v1 + 328) = 0x8000000100052000;
  *(_QWORD *)(v1 + 336) = &off_100061648;
  *(_QWORD *)(v1 + 344) = 5;
  *(_QWORD *)(v1 + 352) = 1;
  *(_BYTE *)(v1 + 360) = 0;
  *(_QWORD *)(v1 + 368) = 0xD000000000000017;
  *(_QWORD *)(v1 + 376) = 0x8000000100052030;
  *(_QWORD *)(v1 + 392) = 0;
  *(_QWORD *)(v1 + 400) = 0;
  *(_QWORD *)(v1 + 384) = &_swiftEmptyArrayStorage;
  *(_BYTE *)(v1 + 408) = 1;
  *(_QWORD *)(v1 + 416) = 0xD000000000000015;
  *(_QWORD *)(v1 + 424) = 0x8000000100052050;
  *(_QWORD *)(v1 + 432) = &off_100061688;
  *(_QWORD *)(v1 + 440) = 1;
  *(_QWORD *)(v1 + 448) = 64;
  *(_BYTE *)(v1 + 456) = 0;
  *(_QWORD *)(v1 + 464) = 0xD000000000000015;
  *(_QWORD *)(v1 + 472) = 0x8000000100052050;
  *(_QWORD *)(v1 + 480) = &off_1000616B8;
  *(_QWORD *)(v1 + 488) = 9;
  *(_QWORD *)(v1 + 496) = 64;
  *(_BYTE *)(v1 + 504) = 0;
  *(_QWORD *)(v1 + 512) = 0xD000000000000010;
  *(_QWORD *)(v1 + 520) = 0x8000000100052070;
  *(_QWORD *)(v1 + 528) = &off_1000616E8;
  *(_QWORD *)(v1 + 536) = 1;
  *(_QWORD *)(v1 + 544) = 64;
  *(_BYTE *)(v1 + 552) = 0;
  *(_QWORD *)(v1 + 560) = 0xD000000000000011;
  *(_QWORD *)(v1 + 568) = 0x8000000100052090;
  *(_QWORD *)(v1 + 576) = &off_100061718;
  *(_QWORD *)(v1 + 584) = 2;
  *(_QWORD *)(v1 + 592) = 64;
  *(_BYTE *)(v1 + 600) = 0;
  *(_QWORD *)(v1 + 608) = 0xD000000000000018;
  *(_QWORD *)(v1 + 616) = 0x80000001000520B0;
  *(_QWORD *)(v1 + 624) = &_swiftEmptyArrayStorage;
  *(_QWORD *)(v1 + 632) = 1;
  *(_QWORD *)(v1 + 640) = 64;
  *(_BYTE *)(v1 + 648) = 0;
  *(_QWORD *)(v1 + 656) = 0xD000000000000018;
  *(_QWORD *)(v1 + 664) = 0x80000001000520B0;
  *(_QWORD *)(v1 + 672) = &off_100061748;
  *(_QWORD *)(v1 + 680) = 4;
  *(_QWORD *)(v1 + 688) = 64;
  *(_BYTE *)(v1 + 696) = 0;
  *(_QWORD *)(v1 + 704) = 0xD000000000000018;
  *(_QWORD *)(v1 + 712) = 0x80000001000520B0;
  *(_QWORD *)(v1 + 720) = &off_100061788;
  *(_QWORD *)(v1 + 728) = 5;
  *(_QWORD *)(v1 + 736) = 64;
  *(_BYTE *)(v1 + 744) = 0;
  *(_QWORD *)(v1 + 752) = 0xD000000000000018;
  *(_QWORD *)(v1 + 760) = 0x80000001000520B0;
  *(_QWORD *)(v1 + 768) = &off_1000617B8;
  *(_QWORD *)(v1 + 776) = 5;
  *(_QWORD *)(v1 + 784) = 2112;
  *(_BYTE *)(v1 + 792) = 0;
  *(_QWORD *)(v1 + 800) = 0xD000000000000010;
  *(_QWORD *)(v1 + 808) = 0x80000001000520D0;
  *(_QWORD *)(v1 + 816) = &off_1000617E8;
  *(_QWORD *)(v1 + 824) = 1;
  *(_QWORD *)(v1 + 832) = 64;
  *(_BYTE *)(v1 + 840) = 0;
  *(_QWORD *)(v1 + 848) = 0xD000000000000010;
  *(_QWORD *)(v1 + 856) = 0x80000001000520D0;
  *(_QWORD *)(v1 + 864) = &off_100061828;
  *(_QWORD *)(v1 + 872) = 4;
  *(_QWORD *)(v1 + 880) = 64;
  *(_BYTE *)(v1 + 888) = 0;
  *(_QWORD *)(v1 + 896) = 0xD000000000000010;
  *(_QWORD *)(v1 + 904) = 0x80000001000520D0;
  *(_QWORD *)(v1 + 912) = &off_100061918;
  *(_QWORD *)(v1 + 920) = 4;
  *(_QWORD *)(v1 + 928) = 2068;
  *(_BYTE *)(v1 + 936) = 0;
  *(_QWORD *)(v1 + 944) = 0xD000000000000010;
  *(_QWORD *)(v1 + 952) = 0x80000001000520D0;
  *(_QWORD *)(v1 + 960) = &off_100061948;
  *(_QWORD *)(v1 + 968) = 14;
  *(_QWORD *)(v1 + 976) = 2130;
  *(_BYTE *)(v1 + 984) = 0;
  *(_QWORD *)(v1 + 992) = 0xD000000000000015;
  *(_QWORD *)(v1 + 1000) = 0x80000001000520F0;
  *(_QWORD *)(v1 + 1008) = &off_100061978;
  *(_QWORD *)(v1 + 1016) = 4;
  *(_QWORD *)(v1 + 1024) = 64;
  *(_BYTE *)(v1 + 1032) = 0;
  *(_QWORD *)(v1 + 1040) = 0xD000000000000015;
  *(_QWORD *)(v1 + 1048) = 0x80000001000520F0;
  *(_QWORD *)(v1 + 1056) = &off_1000619A8;
  *(_QWORD *)(v1 + 1064) = 5;
  *(_QWORD *)(v1 + 1072) = 64;
  *(_BYTE *)(v1 + 1080) = 0;
  *(_QWORD *)(v1 + 1088) = 0xD000000000000020;
  *(_QWORD *)(v1 + 1096) = 0x8000000100052110;
  *(_QWORD *)(v1 + 1104) = &off_1000619E8;
  *(_QWORD *)(v1 + 1112) = 2;
  *(_QWORD *)(v1 + 1120) = 16;
  *(_BYTE *)(v1 + 1128) = 0;
  *(_QWORD *)(v1 + 1136) = 0xD000000000000020;
  *(_QWORD *)(v1 + 1144) = 0x8000000100052110;
  *(_QWORD *)(v1 + 1152) = &off_100061A18;
  *(_QWORD *)(v1 + 1160) = 2;
  *(_QWORD *)(v1 + 1168) = 2064;
  *(_BYTE *)(v1 + 1176) = 0;
  *(_QWORD *)(v1 + 1184) = 0xD000000000000030;
  *(_QWORD *)(v1 + 1192) = 0x8000000100052140;
  *(_QWORD *)(v1 + 1200) = &off_100061A48;
  *(_QWORD *)(v1 + 1208) = 2;
  *(_QWORD *)(v1 + 1216) = 2;
  *(_BYTE *)(v1 + 1224) = 0;
  *(_QWORD *)(v1 + 1232) = 0xD00000000000001ALL;
  *(_QWORD *)(v1 + 1240) = 0x8000000100052180;
  *(_QWORD *)(v1 + 1248) = &off_100061A78;
  *(_QWORD *)(v1 + 1256) = 5;
  *(_QWORD *)(v1 + 1264) = 64;
  *(_BYTE *)(v1 + 1272) = 0;
  *(_QWORD *)(v1 + 1280) = 0xD000000000000015;
  *(_QWORD *)(v1 + 1288) = 0x80000001000521A0;
  *(_QWORD *)(v1 + 1296) = &off_100061AA8;
  *(_QWORD *)(v1 + 1304) = 15;
  *(_QWORD *)(v1 + 1312) = 2128;
  *(_BYTE *)(v1 + 1320) = 0;
  *(_QWORD *)(v1 + 1328) = 0xD000000000000022;
  *(_QWORD *)(v1 + 1336) = 0x80000001000521C0;
  *(_QWORD *)(v1 + 1344) = &off_100061AD8;
  *(_QWORD *)(v1 + 1352) = 1;
  *(_QWORD *)(v1 + 1360) = 64;
  *(_BYTE *)(v1 + 1368) = 0;
  *(_QWORD *)(v1 + 1384) = 0x80000001000521F0;
  *(_QWORD *)(v1 + 1392) = &off_100061B48;
  *(_QWORD *)(v1 + 1424) = 0xD00000000000001BLL;
  *(_QWORD *)(v1 + 1432) = 0x8000000100052230;
  *(_QWORD *)(v1 + 1440) = &off_100061BC8;
  *(_QWORD *)(v1 + 1448) = 1;
  *(_QWORD *)(v1 + 1456) = 80;
  *(_BYTE *)(v1 + 1464) = 0;
  *(_QWORD *)(v1 + 1472) = 0xD00000000000001BLL;
  *(_QWORD *)(v1 + 1480) = 0x8000000100052230;
  *(_QWORD *)(v1 + 1488) = &off_100061BF8;
  *(_QWORD *)(v1 + 1496) = 1;
  *(_QWORD *)(v1 + 1504) = 2128;
  *(_QWORD *)(v1 + 1520) = 0xD00000000000001BLL;
  *(_QWORD *)(v1 + 1528) = 0x8000000100052230;
  *(_QWORD *)(v1 + 1536) = &off_100061C38;
  *(_QWORD *)(v1 + 1544) = 12;
  *(_QWORD *)(v1 + 1552) = 2128;
  *(_BYTE *)(v1 + 1560) = 0;
  *(_QWORD *)(v1 + 1568) = 0xD000000000000016;
  *(_QWORD *)(v1 + 1576) = 0x8000000100052250;
  *(_QWORD *)(v1 + 1584) = &off_100061C68;
  *(_QWORD *)(v1 + 1592) = 1;
  *(_QWORD *)(v1 + 1600) = 64;
  *(_BYTE *)(v1 + 1608) = 0;
  *(_QWORD *)(v1 + 1616) = 0xD00000000000001CLL;
  *(_QWORD *)(v1 + 1624) = 0x8000000100052270;
  *(_QWORD *)(v1 + 1632) = &off_100061C98;
  *(_QWORD *)(v1 + 1640) = 1;
  *(_QWORD *)(v1 + 1648) = 64;
  *(_BYTE *)(v1 + 1656) = 0;
  *(_QWORD *)(v1 + 1664) = 0xD00000000000001CLL;
  *(_QWORD *)(v1 + 1672) = 0x8000000100052270;
  *(_QWORD *)(v1 + 1680) = &off_100061CE8;
  *(_QWORD *)(v1 + 1688) = 4;
  *(_QWORD *)(v1 + 1696) = 64;
  *(_BYTE *)(v1 + 1704) = 0;
  *(_QWORD *)(v1 + 1712) = 0xD00000000000001ELL;
  *(_QWORD *)(v1 + 1720) = 0x8000000100052290;
  *(_QWORD *)(v1 + 1728) = &off_100061D18;
  *(_QWORD *)(v1 + 1736) = 1;
  *(_QWORD *)(v1 + 1744) = 64;
  *(_QWORD *)(v1 + 1768) = 0x8000000100052290;
  *(_QWORD *)(v1 + 1776) = &off_100061D98;
  *(_QWORD *)(v1 + 1816) = 0x80000001000522B0;
  *(_QWORD *)(v1 + 1824) = &off_100061DC8;
  *(_QWORD *)(v1 + 1856) = 0xD000000000000018;
  *(_QWORD *)(v1 + 1864) = 0x80000001000522E0;
  *(_QWORD *)(v1 + 1872) = &off_100061DF8;
  *(_QWORD *)(v1 + 1904) = 0xD00000000000001BLL;
  *(_QWORD *)(v1 + 1920) = &off_100061E48;
  *(_QWORD *)(v1 + 1912) = 0x8000000100052300;
  *(_QWORD *)(v1 + 1952) = 0xD00000000000001BLL;
  *(_QWORD *)(v1 + 1960) = 0x8000000100052300;
  *(_QWORD *)(v1 + 1968) = &off_100061E78;
  *(_QWORD *)(v1 + 2008) = 0x8000000100052320;
  *(_QWORD *)(v1 + 2016) = &off_100061EA8;
  *(_QWORD *)(v1 + 2048) = 0xD000000000000015;
  *(_QWORD *)(v1 + 2056) = 0x8000000100052350;
  *(_QWORD *)(v1 + 2064) = &off_100061ED8;
  *(_QWORD *)(v1 + 2096) = 0xD000000000000018;
  *(_QWORD *)(v1 + 2104) = 0x8000000100052370;
  *(_QWORD *)(v1 + 2144) = 0xD000000000000018;
  *(_QWORD *)(v1 + 2152) = 0x8000000100052390;
  *(_QWORD *)(v1 + 2160) = &off_100061F08;
  *(_QWORD *)(v1 + 2192) = 0xD000000000000018;
  *(_QWORD *)(v1 + 2200) = 0x8000000100052390;
  *(_QWORD *)(v1 + 2208) = &off_100061F88;
  *(_QWORD *)(v1 + 2240) = 0xD00000000000001BLL;
  *(_QWORD *)(v1 + 2248) = 0x80000001000523B0;
  *(_QWORD *)(v1 + 2256) = &off_100061FB8;
  *(_QWORD *)(v1 + 2296) = 0x80000001000523D0;
  *(_QWORD *)(v1 + 2304) = &off_100061FE8;
  *(_QWORD *)(v1 + 2344) = 0x8000000100052400;
  *(_QWORD *)(v1 + 2352) = &off_100062018;
  *(_BYTE *)(v1 + 2376) = 0;
  *(_QWORD *)(v1 + 2384) = 0xD000000000000017;
  *(_QWORD *)(v1 + 2392) = 0x8000000100052420;
  *(_QWORD *)(v1 + 2400) = &off_100062048;
  *(_QWORD *)(v1 + 2408) = 1;
  *(_QWORD *)(v1 + 2416) = 16;
  *(_BYTE *)(v1 + 2424) = 0;
  *(_QWORD *)(v1 + 2440) = 0x8000000100052420;
  *(_QWORD *)(v1 + 2944) = 64;
  *(_BYTE *)(v1 + 2952) = 0;
  *(_QWORD *)(v1 + 2960) = 0xD000000000000017;
  *(_QWORD *)(v1 + 2912) = 0xD000000000000017;
  *(_QWORD *)(v1 + 2920) = 0x8000000100052420;
  *(_QWORD *)(v1 + 2928) = &off_100062418;
  *(_QWORD *)(v1 + 2936) = 5;
  *(_QWORD *)(v1 + 2872) = 0x8000000100052420;
  *(_QWORD *)(v1 + 2880) = &off_1000623E8;
  *(_QWORD *)(v1 + 2888) = 4;
  *(_QWORD *)(v1 + 2896) = 2132;
  *(_BYTE *)(v1 + 2904) = 0;
  *(_QWORD *)(v1 + 2840) = 4;
  *(_QWORD *)(v1 + 2848) = 2128;
  *(_BYTE *)(v1 + 2856) = 0;
  *(_QWORD *)(v1 + 2864) = 0xD000000000000017;
  *(_QWORD *)(v1 + 2832) = &off_1000623A8;
  *(_BYTE *)(v1 + 2808) = 0;
  *(_QWORD *)(v1 + 2816) = 0xD000000000000017;
  *(_QWORD *)(v1 + 2824) = 0x8000000100052420;
  *(_QWORD *)(v1 + 2784) = &off_100062378;
  *(_QWORD *)(v1 + 2776) = 0x8000000100052420;
  *(_QWORD *)(v1 + 2792) = 4;
  *(_QWORD *)(v1 + 2800) = 2064;
  *(_QWORD *)(v1 + 2448) = &off_100062078;
  *(_QWORD *)(v1 + 2736) = &off_100062338;
  *(_QWORD *)(v1 + 2744) = 4;
  *(_QWORD *)(v1 + 2752) = 80;
  *(_BYTE *)(v1 + 2760) = 0;
  *(_QWORD *)(v1 + 2768) = 0xD000000000000017;
  *(_QWORD *)(v1 + 2632) = 0x8000000100052420;
  *(_QWORD *)(v1 + 2704) = 68;
  *(_BYTE *)(v1 + 2712) = 0;
  *(_QWORD *)(v1 + 2720) = 0xD000000000000017;
  *(_QWORD *)(v1 + 2728) = 0x8000000100052420;
  *(_QWORD *)(v1 + 2672) = 0xD000000000000017;
  *(_QWORD *)(v1 + 2680) = 0x8000000100052420;
  *(_QWORD *)(v1 + 2688) = &off_100062308;
  *(_QWORD *)(v1 + 2696) = 4;
  *(_QWORD *)(v1 + 2640) = &off_100062188;
  *(_QWORD *)(v1 + 2648) = 4;
  *(_QWORD *)(v1 + 2656) = 64;
  *(_BYTE *)(v1 + 2664) = 0;
  *(_QWORD *)(v1 + 2600) = 4;
  *(_QWORD *)(v1 + 2608) = 16;
  *(_BYTE *)(v1 + 2616) = 0;
  *(_QWORD *)(v1 + 2624) = 0xD000000000000017;
  *(_QWORD *)(v1 + 2592) = &off_100062128;
  *(_BYTE *)(v1 + 2568) = 0;
  *(_QWORD *)(v1 + 2576) = 0xD000000000000017;
  *(_QWORD *)(v1 + 2584) = 0x8000000100052420;
  *(_QWORD *)(v1 + 2544) = &off_1000620E8;
  *(_QWORD *)(v1 + 2536) = 0x8000000100052420;
  *(_QWORD *)(v1 + 2552) = 4;
  *(_QWORD *)(v1 + 2560) = 4;
  *(_QWORD *)(v1 + 2456) = 1;
  *(_QWORD *)(v1 + 2496) = &off_1000620B8;
  *(_QWORD *)(v1 + 2504) = 3;
  *(_QWORD *)(v1 + 2512) = 64;
  *(_BYTE *)(v1 + 2520) = 0;
  *(_QWORD *)(v1 + 2528) = 0xD000000000000017;
  *(_QWORD *)(v1 + 2464) = 64;
  *(_BYTE *)(v1 + 2472) = 0;
  *(_QWORD *)(v1 + 2480) = 0xD000000000000017;
  *(_QWORD *)(v1 + 2488) = 0x8000000100052420;
  *(_QWORD *)(v1 + 2976) = &off_100062448;
  *(_QWORD *)(v1 + 3024) = &off_100062478;
  *(_QWORD *)(v1 + 3072) = &off_1000624A8;
  *(_QWORD *)(v1 + 3120) = &off_1000624D8;
  *(_QWORD *)(v1 + 2432) = 0xD000000000000017;
  *(_QWORD *)(v1 + 3168) = &off_100062508;
  *(_QWORD *)(v1 + 3216) = &off_100062538;
  *(_QWORD *)(v1 + 3232) = 320;
  *(_QWORD *)(v1 + 3264) = &off_100062568;
  *(_QWORD *)(v1 + 3312) = &off_100062598;
  *(_QWORD *)(v1 + 3360) = &off_1000625C8;
  *(_BYTE *)(v1 + 1752) = 0;
  *(_QWORD *)(v1 + 3408) = &off_100062618;
  *(_QWORD *)(v1 + 2336) = 0xD00000000000001ELL;
  *(_QWORD *)(v1 + 2360) = 6;
  *(_QWORD *)(v1 + 2368) = 64;
  *(_QWORD *)(v1 + 1784) = 4;
  *(_QWORD *)(v1 + 2288) = 0xD00000000000002BLL;
  *(_QWORD *)(v1 + 2312) = 2;
  *(_QWORD *)(v1 + 2320) = 16;
  *(_BYTE *)(v1 + 2328) = 0;
  *(_QWORD *)(v1 + 1792) = 64;
  *(_BYTE *)(v1 + 1800) = 0;
  *(_QWORD *)(v1 + 1808) = 0xD000000000000020;
  *(_QWORD *)(v1 + 2264) = 6;
  *(_QWORD *)(v1 + 2272) = 2064;
  *(_BYTE *)(v1 + 2280) = 0;
  *(_QWORD *)(v1 + 1832) = 1;
  *(_QWORD *)(v1 + 1880) = 3;
  *(_QWORD *)(v1 + 1888) = 64;
  *(_QWORD *)(v1 + 2216) = 4;
  *(_QWORD *)(v1 + 2224) = 64;
  *(_BYTE *)(v1 + 2232) = 0;
  *(_BYTE *)(v1 + 1896) = 0;
  *(_QWORD *)(v1 + 1928) = 1;
  *(_QWORD *)(v1 + 1976) = 4;
  *(_QWORD *)(v1 + 2168) = 1;
  *(_QWORD *)(v1 + 2176) = 64;
  *(_BYTE *)(v1 + 2184) = 0;
  *(_QWORD *)(v1 + 1984) = 64;
  *(_BYTE *)(v1 + 1992) = 0;
  *(_QWORD *)(v1 + 2112) = &_swiftEmptyArrayStorage;
  *(_QWORD *)(v1 + 2120) = 1;
  *(_QWORD *)(v1 + 2128) = 64;
  *(_BYTE *)(v1 + 2136) = 0;
  *(_QWORD *)(v1 + 2024) = 1;
  *(_QWORD *)(v1 + 2032) = 64;
  *(_BYTE *)(v1 + 2040) = 0;
  *(_QWORD *)(v1 + 2072) = 5;
  *(_QWORD *)(v1 + 2080) = 64;
  *(_BYTE *)(v1 + 2088) = 0;
  *(_QWORD *)(v1 + 3008) = 0xD000000000000017;
  *(_QWORD *)(v1 + 3056) = 0xD000000000000017;
  *(_QWORD *)(v1 + 3104) = 0xD000000000000017;
  *(_QWORD *)(v1 + 3152) = 0xD000000000000017;
  *(_QWORD *)(v1 + 3200) = 0xD000000000000017;
  *(_QWORD *)(v1 + 3248) = 0xD000000000000017;
  *(_QWORD *)(v1 + 3296) = 0xD000000000000017;
  *(_QWORD *)(v1 + 3344) = 0xD000000000000017;
  *(_QWORD *)(v1 + 3392) = 0xD000000000000017;
  *(_QWORD *)(v1 + 3440) = 0xD000000000000017;
  *(_QWORD *)(v1 + 2000) = 0xD000000000000025;
  *(_QWORD *)(v1 + 1936) = 64;
  *(_BYTE *)(v1 + 1944) = 0;
  *(_QWORD *)(v1 + 2968) = 0x8000000100052420;
  *(_QWORD *)(v1 + 3016) = 0x8000000100052420;
  *(_QWORD *)(v1 + 3064) = 0x8000000100052420;
  *(_QWORD *)(v1 + 3112) = 0x8000000100052420;
  *(_QWORD *)(v1 + 3160) = 0x8000000100052420;
  *(_QWORD *)(v1 + 3208) = 0x8000000100052420;
  *(_QWORD *)(v1 + 3256) = 0x8000000100052420;
  *(_QWORD *)(v1 + 3304) = 0x8000000100052420;
  *(_QWORD *)(v1 + 3352) = 0x8000000100052420;
  *(_QWORD *)(v1 + 3400) = 0x8000000100052420;
  *(_QWORD *)(v1 + 3448) = 0x8000000100052420;
  *(_QWORD *)(v1 + 3456) = &off_100062648;
  *(_QWORD *)(v1 + 1840) = 64;
  *(_QWORD *)(v1 + 3496) = 0x8000000100052440;
  *(_BYTE *)(v1 + 1848) = 0;
  *(_QWORD *)(v1 + 3504) = &off_100062678;
  *(_QWORD *)(v1 + 3544) = 0x8000000100052470;
  *(_QWORD *)(v1 + 3552) = &off_1000626A8;
  *(_QWORD *)(v1 + 3592) = 0x8000000100052490;
  *(_QWORD *)(v1 + 3600) = &off_1000626D8;
  *(_QWORD *)(v1 + 3632) = 0xD000000000000043;
  *(_QWORD *)(v1 + 3640) = 0x80000001000524E0;
  *(_QWORD *)(v1 + 3648) = &off_100062768;
  *(_QWORD *)(v1 + 3688) = 0x8000000100052530;
  *(_QWORD *)(v1 + 3736) = 0x8000000100052530;
  *(_QWORD *)(v1 + 1760) = 0xD00000000000001ELL;
  *(_QWORD *)(v1 + 3744) = &off_100062798;
  *(_QWORD *)(v1 + 3784) = 0x8000000100052560;
  *(_QWORD *)(v1 + 3792) = &off_1000627C8;
  *(_QWORD *)(v1 + 3840) = &off_1000627F8;
  *(_QWORD *)(v1 + 3888) = &off_100062828;
  *(_QWORD *)(v1 + 3936) = &off_1000628C8;
  *(_QWORD *)(v1 + 3832) = 0x8000000100052590;
  *(_QWORD *)(v1 + 3880) = 0x8000000100052590;
  *(_QWORD *)(v1 + 3928) = 0x8000000100052590;
  *(_QWORD *)(v1 + 3976) = 0x8000000100052590;
  *(_QWORD *)(v1 + 3984) = &off_1000628F8;
  *(_QWORD *)(v1 + 4016) = 0xD00000000000002ELL;
  *(_QWORD *)(v1 + 4024) = 0x80000001000525C0;
  *(_QWORD *)(v1 + 4032) = &off_100062928;
  *(_QWORD *)(v1 + 4080) = &off_100062958;
  *(_BYTE *)(v1 + 4104) = 0;
  *(_QWORD *)(v1 + 4128) = &off_100062998;
  *(_BYTE *)(v1 + 4152) = 0;
  *(_QWORD *)(v1 + 4176) = &off_1000629E8;
  *(_BYTE *)(v1 + 4200) = 0;
  *(_QWORD *)(v1 + 4224) = &off_100062A18;
  *(_BYTE *)(v1 + 4248) = 0;
  *(_QWORD *)(v1 + 4272) = &off_100062A48;
  *(_BYTE *)(v1 + 4296) = 0;
  *(_QWORD *)(v1 + 4320) = &off_100062A78;
  *(_BYTE *)(v1 + 4344) = 0;
  *(_BYTE *)(v1 + 1512) = 0;
  *(_QWORD *)(v1 + 4072) = 0x80000001000525F0;
  *(_QWORD *)(v1 + 4120) = 0x80000001000525F0;
  *(_QWORD *)(v1 + 4168) = 0x80000001000525F0;
  *(_QWORD *)(v1 + 4216) = 0x80000001000525F0;
  *(_QWORD *)(v1 + 4264) = 0x80000001000525F0;
  *(_QWORD *)(v1 + 4312) = 0x80000001000525F0;
  *(_QWORD *)(v1 + 4360) = 0x80000001000525F0;
  *(_QWORD *)(v1 + 4368) = &off_100062AA8;
  *(_QWORD *)(v1 + 4416) = &off_100062AD8;
  *(_QWORD *)(v1 + 4464) = &off_100062B08;
  *(_QWORD *)(v1 + 4512) = &off_100062B38;
  *(_QWORD *)(v1 + 4560) = &off_100062B68;
  *(_QWORD *)(v1 + 4608) = &off_100062B98;
  *(_BYTE *)(v1 + 1416) = 0;
  *(_QWORD *)(v1 + 1376) = 0xD000000000000037;
  *(_QWORD *)(v1 + 1400) = 1;
  *(_QWORD *)(v1 + 1408) = 64;
  *(_QWORD *)(v1 + 2984) = 5;
  *(_QWORD *)(v1 + 2992) = 2064;
  *(_BYTE *)(v1 + 3000) = 0;
  *(_QWORD *)(v1 + 3032) = 5;
  *(_QWORD *)(v1 + 3040) = 2128;
  *(_BYTE *)(v1 + 3048) = 0;
  *(_QWORD *)(v1 + 3080) = 6;
  *(_QWORD *)(v1 + 3088) = 64;
  *(_BYTE *)(v1 + 4392) = 0;
  *(_BYTE *)(v1 + 4440) = 0;
  *(_BYTE *)(v1 + 4488) = 0;
  *(_BYTE *)(v1 + 4536) = 0;
  *(_BYTE *)(v1 + 4584) = 0;
  *(_BYTE *)(v1 + 4632) = 0;
  *(_QWORD *)(v1 + 4408) = 0x8000000100052620;
  *(_QWORD *)(v1 + 4456) = 0x8000000100052620;
  *(_QWORD *)(v1 + 4504) = 0x8000000100052620;
  *(_QWORD *)(v1 + 4552) = 0x8000000100052620;
  *(_QWORD *)(v1 + 4600) = 0x8000000100052620;
  *(_QWORD *)(v1 + 4648) = 0x8000000100052620;
  *(_QWORD *)(v1 + 4656) = &off_100062BC8;
  *(_BYTE *)(v1 + 4680) = 0;
  *(_QWORD *)(v1 + 4704) = &off_100062BF8;
  *(_BYTE *)(v1 + 4728) = 0;
  *(_QWORD *)(v1 + 4752) = &off_100062C28;
  *(_BYTE *)(v1 + 4776) = 0;
  *(_QWORD *)(v1 + 4800) = &off_100062EB8;
  *(_BYTE *)(v1 + 4824) = 0;
  *(_QWORD *)(v1 + 4848) = &off_100062F38;
  *(_BYTE *)(v1 + 4872) = 0;
  *(_QWORD *)(v1 + 4896) = &off_100062F68;
  *(_BYTE *)(v1 + 4920) = 0;
  *(_QWORD *)(v1 + 4944) = &off_100062F98;
  *(_BYTE *)(v1 + 4968) = 0;
  *(_QWORD *)(v1 + 4992) = &off_100062FD8;
  *(_BYTE *)(v1 + 5016) = 0;
  *(_QWORD *)(v1 + 5040) = &off_100063038;
  *(_BYTE *)(v1 + 5064) = 0;
  *(_QWORD *)(v1 + 5088) = &off_100063078;
  *(_BYTE *)(v1 + 5112) = 0;
  *(_QWORD *)(v1 + 5136) = &off_100063108;
  *(_BYTE *)(v1 + 5160) = 0;
  *(_QWORD *)(v1 + 5184) = &off_100063138;
  *(_BYTE *)(v1 + 5208) = 0;
  *(_QWORD *)(v1 + 5232) = &off_1000631B8;
  *(_BYTE *)(v1 + 5256) = 0;
  *(_QWORD *)(v1 + 5280) = &off_1000631F8;
  *(_BYTE *)(v1 + 5304) = 0;
  *(_QWORD *)(v1 + 5328) = &off_100063238;
  *(_BYTE *)(v1 + 5352) = 0;
  *(_QWORD *)(v1 + 5376) = &off_100063268;
  *(_BYTE *)(v1 + 5400) = 0;
  *(_QWORD *)(v1 + 5424) = &off_1000632A8;
  *(_BYTE *)(v1 + 5448) = 0;
  *(_QWORD *)(v1 + 5472) = &off_1000632E8;
  *(_BYTE *)(v1 + 5496) = 0;
  *(_QWORD *)(v1 + 5520) = &off_100063388;
  *(_BYTE *)(v1 + 5544) = 0;
  *(_QWORD *)(v1 + 5568) = &off_1000633B8;
  *(_BYTE *)(v1 + 5592) = 0;
  *(_QWORD *)(v1 + 5616) = &off_100063408;
  *(_BYTE *)(v1 + 5640) = 0;
  *(_QWORD *)(v1 + 5664) = &off_100063438;
  *(_BYTE *)(v1 + 5688) = 0;
  *(_QWORD *)(v1 + 4696) = 0x8000000100052650;
  *(_QWORD *)(v1 + 4744) = 0x8000000100052650;
  *(_QWORD *)(v1 + 4792) = 0x8000000100052650;
  *(_QWORD *)(v1 + 4840) = 0x8000000100052650;
  *(_QWORD *)(v1 + 4888) = 0x8000000100052650;
  *(_QWORD *)(v1 + 4936) = 0x8000000100052650;
  *(_QWORD *)(v1 + 4984) = 0x8000000100052650;
  *(_QWORD *)(v1 + 5032) = 0x8000000100052650;
  *(_QWORD *)(v1 + 5080) = 0x8000000100052650;
  *(_QWORD *)(v1 + 5128) = 0x8000000100052650;
  *(_QWORD *)(v1 + 5176) = 0x8000000100052650;
  *(_QWORD *)(v1 + 5224) = 0x8000000100052650;
  *(_QWORD *)(v1 + 5272) = 0x8000000100052650;
  *(_QWORD *)(v1 + 5320) = 0x8000000100052650;
  *(_QWORD *)(v1 + 5368) = 0x8000000100052650;
  *(_QWORD *)(v1 + 5416) = 0x8000000100052650;
  *(_QWORD *)(v1 + 5464) = 0x8000000100052650;
  *(_QWORD *)(v1 + 5512) = 0x8000000100052650;
  *(_QWORD *)(v1 + 5560) = 0x8000000100052650;
  *(_QWORD *)(v1 + 5608) = 0x8000000100052650;
  *(_QWORD *)(v1 + 5656) = 0x8000000100052650;
  *(_QWORD *)(v1 + 5704) = 0x8000000100052650;
  *(_QWORD *)(v1 + 5712) = &off_100063478;
  *(_BYTE *)(v1 + 5736) = 0;
  *(_QWORD *)(v1 + 5760) = &off_1000634A8;
  *(_BYTE *)(v1 + 5784) = 0;
  *(_QWORD *)(v1 + 5808) = &off_1000634D8;
  *(_BYTE *)(v1 + 5832) = 0;
  *(_QWORD *)(v1 + 5856) = &off_100063508;
  *(_BYTE *)(v1 + 5880) = 0;
  *(_QWORD *)(v1 + 5752) = 0x8000000100052680;
  *(_QWORD *)(v1 + 5800) = 0x8000000100052680;
  *(_QWORD *)(v1 + 5848) = 0x8000000100052680;
  *(_QWORD *)(v1 + 5896) = 0x8000000100052680;
  *(_QWORD *)(v1 + 5904) = &off_100063538;
  *(_BYTE *)(v1 + 5928) = 0;
  *(_QWORD *)(v1 + 5944) = 0x80000001000526B0;
  *(_BYTE *)(v1 + 5976) = 0;
  *(_QWORD *)(v1 + 5952) = &off_100063568;
  *(_QWORD *)(v1 + 5992) = 0x80000001000526E0;
  *(_QWORD *)(v1 + 6000) = &off_100063598;
  *(_BYTE *)(v1 + 6024) = 0;
  *(_QWORD *)(v1 + 5744) = 0xD000000000000024;
  *(_QWORD *)(v1 + 5792) = 0xD000000000000024;
  *(_QWORD *)(v1 + 6032) = 0xD00000000000002BLL;
  *(_QWORD *)(v1 + 5840) = 0xD000000000000024;
  *(_QWORD *)(v1 + 6040) = 0x8000000100052710;
  *(_QWORD *)(v1 + 6048) = &off_1000635D8;
  *(_BYTE *)(v1 + 6072) = 0;
  *(_QWORD *)(v1 + 5888) = 0xD000000000000024;
  *(_QWORD *)(v1 + 6088) = 0x8000000100052740;
  *(_QWORD *)(v1 + 6096) = &off_100063618;
  *(_BYTE *)(v1 + 6120) = 0;
  *(_QWORD *)(v1 + 6144) = &off_100063648;
  *(_BYTE *)(v1 + 6168) = 0;
  *(_QWORD *)(v1 + 6192) = &off_100063688;
  *(_BYTE *)(v1 + 6216) = 0;
  *(_QWORD *)(v1 + 6240) = &off_1000636B8;
  *(_BYTE *)(v1 + 6264) = 0;
  *(_QWORD *)(v1 + 6128) = 0xD000000000000024;
  *(_QWORD *)(v1 + 6136) = 0x8000000100052770;
  *(_QWORD *)(v1 + 6176) = 0xD000000000000024;
  *(_QWORD *)(v1 + 6184) = 0x8000000100052770;
  *(_QWORD *)(v1 + 6224) = 0xD000000000000024;
  *(_QWORD *)(v1 + 6232) = 0x8000000100052770;
  *(_QWORD *)(v1 + 6272) = 0xD000000000000024;
  *(_QWORD *)(v1 + 6280) = 0x8000000100052770;
  *(_QWORD *)(v1 + 6288) = &off_1000636E8;
  *(_BYTE *)(v1 + 6312) = 0;
  *(_QWORD *)(v1 + 6328) = 0x80000001000527A0;
  *(_QWORD *)(v1 + 6336) = &off_100063718;
  *(_BYTE *)(v1 + 6360) = 0;
  *(_QWORD *)(v1 + 6376) = 0x80000001000527D0;
  *(_QWORD *)(v1 + 6384) = &off_100063748;
  *(_BYTE *)(v1 + 6408) = 0;
  *(_QWORD *)(v1 + 6432) = &off_100063778;
  *(_BYTE *)(v1 + 6456) = 0;
  *(_QWORD *)(v1 + 6424) = 0x8000000100052810;
  *(_QWORD *)(v1 + 6472) = 0x8000000100052810;
  *(_QWORD *)(v1 + 6480) = &off_1000637A8;
  *(_BYTE *)(v1 + 6504) = 0;
  *(_QWORD *)(v1 + 6512) = 0xD000000000000024;
  *(_QWORD *)(v1 + 6520) = 0x8000000100052840;
  *(_QWORD *)(v1 + 6528) = &off_1000637E8;
  *(_BYTE *)(v1 + 6552) = 0;
  *(_QWORD *)(v1 + 6568) = 0x8000000100052870;
  *(_BYTE *)(v1 + 6600) = 0;
  *(_QWORD *)(v1 + 6576) = &off_100063818;
  *(_QWORD *)(v1 + 6616) = 0x80000001000528A0;
  *(_QWORD *)(v1 + 6624) = &off_100063848;
  *(_BYTE *)(v1 + 6648) = 0;
  *(_QWORD *)(v1 + 6664) = 0x80000001000528A0;
  *(_BYTE *)(v1 + 6696) = 0;
  *(_QWORD *)(v1 + 6672) = &off_100063878;
  *(_QWORD *)(v1 + 6712) = 0x80000001000528A0;
  *(_QWORD *)(v1 + 6720) = &off_100063918;
  *(_BYTE *)(v1 + 6744) = 0;
  *(_QWORD *)(v1 + 6760) = 0x80000001000528A0;
  *(_QWORD *)(v1 + 6768) = &off_100063948;
  *(_BYTE *)(v1 + 6792) = 0;
  *(_QWORD *)(v1 + 6808) = 0x80000001000528A0;
  *(_QWORD *)(v1 + 6816) = &off_100063978;
  *(_BYTE *)(v1 + 6840) = 0;
  *(_QWORD *)(v1 + 6864) = &off_1000639B8;
  *(_BYTE *)(v1 + 6888) = 0;
  *(_BYTE *)(v1 + 6936) = 0;
  *(_BYTE *)(v1 + 6984) = 0;
  *(_QWORD *)(v1 + 6912) = &off_1000639E8;
  *(_BYTE *)(v1 + 7080) = 0;
  *(_QWORD *)(v1 + 7096) = 0x8000000100052920;
  *(_BYTE *)(v1 + 10200) = 0;
  *(_BYTE *)(v1 + 10296) = 0;
  *(_BYTE *)(v1 + 10440) = 0;
  *(_BYTE *)(v1 + 10488) = 0;
  *(_BYTE *)(v1 + 10536) = 0;
  *(_BYTE *)(v1 + 10584) = 0;
  *(_BYTE *)(v1 + 10632) = 0;
  *(_BYTE *)(v1 + 10680) = 0;
  *(_BYTE *)(v1 + 10728) = 0;
  *(_BYTE *)(v1 + 10776) = 0;
  *(_BYTE *)(v1 + 10824) = 0;
  *(_BYTE *)(v1 + 10872) = 0;
  *(_QWORD *)(v1 + 10880) = 0xD00000000000003FLL;
  *(_BYTE *)(v1 + 10920) = 0;
  *(_QWORD *)(v1 + 10912) = 64;
  *(_QWORD *)(v1 + 10888) = 0x80000001000532C0;
  *(_QWORD *)(v1 + 10904) = 1;
  *(_QWORD *)(v1 + 10896) = &off_100064BD8;
  *(_QWORD *)(v1 + 10552) = 0x80000001000531D0;
  *(_QWORD *)(v1 + 10600) = 0x80000001000531D0;
  *(_QWORD *)(v1 + 10848) = &off_100064BA8;
  *(_QWORD *)(v1 + 10856) = 7;
  *(_QWORD *)(v1 + 10864) = 64;
  *(_QWORD *)(v1 + 10832) = 0xD000000000000025;
  *(_QWORD *)(v1 + 10840) = 0x8000000100053290;
  *(_QWORD *)(v1 + 10792) = 0x8000000100053290;
  *(_QWORD *)(v1 + 10800) = &off_100064B78;
  *(_QWORD *)(v1 + 10808) = 1;
  *(_QWORD *)(v1 + 10816) = 64;
  *(_QWORD *)(v1 + 3776) = 0xD000000000000026;
  *(_QWORD *)(v1 + 10768) = 64;
  *(_QWORD *)(v1 + 10784) = 0xD000000000000025;
  *(_QWORD *)(v1 + 10736) = 0xD000000000000026;
  *(_QWORD *)(v1 + 10752) = &off_100064B48;
  *(_QWORD *)(v1 + 10760) = 2;
  *(_QWORD *)(v1 + 10744) = 0x8000000100053260;
  *(_QWORD *)(v1 + 10608) = &off_100064AB8;
  *(_QWORD *)(v1 + 10704) = &off_100064B18;
  *(_QWORD *)(v1 + 10712) = 5;
  *(_QWORD *)(v1 + 10720) = 64;
  *(_QWORD *)(v1 + 10696) = 0x8000000100053230;
  *(_QWORD *)(v1 + 10672) = 64;
  *(_QWORD *)(v1 + 10688) = 0xD000000000000025;
  *(_QWORD *)(v1 + 5936) = 0xD000000000000029;
  *(_QWORD *)(v1 + 5984) = 0xD000000000000029;
  *(_QWORD *)(v1 + 10640) = 0xD000000000000029;
  *(_QWORD *)(v1 + 10664) = 5;
  *(_QWORD *)(v1 + 10648) = 0x8000000100053200;
  *(_QWORD *)(v1 + 10656) = &off_100064AE8;
  *(_QWORD *)(v1 + 10592) = 0xD000000000000028;
  *(_QWORD *)(v1 + 10616) = 4;
  *(_QWORD *)(v1 + 10624) = 64;
  *(_QWORD *)(v1 + 10560) = &off_100064A68;
  *(_QWORD *)(v1 + 6608) = 0xD000000000000028;
  *(_QWORD *)(v1 + 6656) = 0xD000000000000028;
  *(_QWORD *)(v1 + 6704) = 0xD000000000000028;
  *(_QWORD *)(v1 + 10568) = 2;
  *(_QWORD *)(v1 + 10576) = 64;
  *(_QWORD *)(v1 + 6752) = 0xD000000000000028;
  *(_QWORD *)(v1 + 6800) = 0xD000000000000028;
  *(_QWORD *)(v1 + 10544) = 0xD000000000000028;
  *(_QWORD *)(v1 + 10528) = 2128;
  *(_QWORD *)(v1 + 6960) = &off_100063A18;
  *(_QWORD *)(v1 + 10520) = 7;
  *(_QWORD *)(v1 + 10512) = &off_100064A38;
  *(_QWORD *)(v1 + 10496) = 0xD000000000000023;
  *(_QWORD *)(v1 + 10504) = 0x80000001000531A0;
  *(_QWORD *)(v1 + 10472) = 3;
  *(_QWORD *)(v1 + 10480) = 80;
  *(_QWORD *)(v1 + 7048) = 0x8000000100052900;
  *(_QWORD *)(v1 + 10464) = &off_1000649F8;
  *(_QWORD *)(v1 + 10448) = 0xD000000000000023;
  *(_QWORD *)(v1 + 10456) = 0x80000001000531A0;
  *(_QWORD *)(v1 + 10416) = &off_1000649C8;
  *(_QWORD *)(v1 + 10408) = 0x80000001000531A0;
  *(_QWORD *)(v1 + 10424) = 2;
  *(_QWORD *)(v1 + 10432) = 16;
  *(_BYTE *)(v1 + 10392) = 0;
  *(_QWORD *)(v1 + 10376) = 1;
  *(_QWORD *)(v1 + 10384) = 2064;
  *(_QWORD *)(v1 + 10400) = 0xD000000000000023;
  *(_QWORD *)(v1 + 10368) = &off_100064998;
  *(_QWORD *)(v1 + 10352) = 0xD000000000000023;
  *(_QWORD *)(v1 + 10360) = 0x80000001000531A0;
  *(_BYTE *)(v1 + 10344) = 0;
  *(_QWORD *)(v1 + 10328) = 1;
  *(_QWORD *)(v1 + 10336) = 80;
  *(_QWORD *)(v1 + 7056) = &off_100063A78;
  *(_QWORD *)(v1 + 10320) = &off_100064968;
  *(_QWORD *)(v1 + 10304) = 0xD000000000000023;
  *(_QWORD *)(v1 + 10312) = 0x80000001000531A0;
  *(_QWORD *)(v1 + 10272) = &off_100064938;
  *(_QWORD *)(v1 + 10264) = 0x80000001000531A0;
  *(_QWORD *)(v1 + 10280) = 1;
  *(_QWORD *)(v1 + 10288) = 64;
  *(_BYTE *)(v1 + 10248) = 0;
  *(_QWORD *)(v1 + 10232) = 1;
  *(_QWORD *)(v1 + 10240) = 16;
  *(_QWORD *)(v1 + 10256) = 0xD000000000000023;
  *(_QWORD *)(v1 + 10216) = 0x80000001000531A0;
  *(_QWORD *)(v1 + 10224) = &off_1000648F8;
  *(_QWORD *)(v1 + 3536) = 0xD00000000000001ELL;
  *(_QWORD *)(v1 + 10208) = 0xD000000000000023;
  *(_QWORD *)(v1 + 10112) = 0xD00000000000001ELL;
  *(_QWORD *)(v1 + 10184) = 4;
  *(_QWORD *)(v1 + 10192) = 16;
  *(_QWORD *)(v1 + 10160) = 0xD000000000000022;
  *(_QWORD *)(v1 + 10168) = 0x8000000100053170;
  *(_QWORD *)(v1 + 10176) = &off_1000648C8;
  *(_BYTE *)(v1 + 10152) = 0;
  *(_QWORD *)(v1 + 10144) = 16;
  *(_QWORD *)(v1 + 10128) = &off_100064898;
  *(_QWORD *)(v1 + 10136) = 1;
  *(_QWORD *)(v1 + 10120) = 0x8000000100053150;
  *(_QWORD *)(v1 + 7072) = 16;
  *(_QWORD *)(v1 + 6856) = 0x80000001000528D0;
  *(_QWORD *)(v1 + 6904) = 0x80000001000528D0;
  *(_QWORD *)(v1 + 6952) = 0x80000001000528D0;
  *(_QWORD *)(v1 + 7040) = 0xD00000000000001FLL;
  *(_QWORD *)(v1 + 7064) = 1;
  *(_QWORD *)(v1 + 7000) = 0x80000001000528D0;
  *(_BYTE *)(v1 + 7032) = 0;
  *(_QWORD *)(v1 + 7016) = 15;
  *(_QWORD *)(v1 + 7024) = 2068;
  *(_QWORD *)(v1 + 7008) = &off_100063A48;
  *(_QWORD *)(v1 + 3424) = 84;
  *(_QWORD *)(v1 + 6992) = 0xD000000000000022;
  *(_QWORD *)(v1 + 6976) = 84;
  *(_QWORD *)(v1 + 7104) = &off_100063AA8;
  *(_QWORD *)(v1 + 6968) = 7;
  *(_BYTE *)(v1 + 7128) = 0;
  *(_QWORD *)(v1 + 6872) = 1;
  *(_QWORD *)(v1 + 6920) = 3;
  *(_QWORD *)(v1 + 6928) = 4;
  *(_QWORD *)(v1 + 6944) = 0xD000000000000022;
  *(_QWORD *)(v1 + 6880) = 4;
  *(_QWORD *)(v1 + 6896) = 0xD000000000000022;
  *(_QWORD *)(v1 + 7144) = 0x8000000100052920;
  *(_QWORD *)(v1 + 7152) = &off_100063AD8;
  *(_QWORD *)(v1 + 6488) = 15;
  *(_QWORD *)(v1 + 6496) = 2128;
  *(_QWORD *)(v1 + 6824) = 4;
  *(_QWORD *)(v1 + 6832) = 16;
  *(_QWORD *)(v1 + 6848) = 0xD000000000000022;
  *(_QWORD *)(v1 + 6536) = 4;
  *(_QWORD *)(v1 + 6544) = 64;
  *(_QWORD *)(v1 + 6560) = 0xD000000000000025;
  *(_QWORD *)(v1 + 6584) = 2;
  *(_QWORD *)(v1 + 6592) = 16;
  *(_QWORD *)(v1 + 6784) = 2064;
  *(_QWORD *)(v1 + 6632) = 1;
  *(_QWORD *)(v1 + 6640) = 16;
  *(_QWORD *)(v1 + 6680) = 2;
  *(_QWORD *)(v1 + 6728) = 2;
  *(_QWORD *)(v1 + 6736) = 2048;
  *(_QWORD *)(v1 + 6776) = 2;
  *(_QWORD *)(v1 + 7168) = 2130;
  *(_BYTE *)(v1 + 7176) = 0;
  *(_QWORD *)(v1 + 7200) = &off_100063B08;
  *(_BYTE *)(v1 + 7224) = 0;
  *(_QWORD *)(v1 + 7192) = 0x8000000100052950;
  *(_QWORD *)(v1 + 7240) = 0x8000000100052950;
  *(_QWORD *)(v1 + 7248) = &off_100063B38;
  *(_BYTE *)(v1 + 7272) = 0;
  *(_QWORD *)(v1 + 6688) = 16;
  *(_QWORD *)(v1 + 7288) = 0x8000000100052990;
  *(_QWORD *)(v1 + 7296) = &off_100063B88;
  *(_BYTE *)(v1 + 7320) = 0;
  *(_QWORD *)(v1 + 7336) = 0x80000001000529C0;
  *(_QWORD *)(v1 + 7344) = &off_100063BB8;
  *(_BYTE *)(v1 + 7368) = 0;
  *(_QWORD *)(v1 + 7392) = &off_100063BE8;
  *(_BYTE *)(v1 + 7416) = 0;
  *(_QWORD *)(v1 + 7440) = &off_100063C48;
  *(_BYTE *)(v1 + 7464) = 0;
  *(_QWORD *)(v1 + 7488) = &off_100063C98;
  *(_BYTE *)(v1 + 7512) = 0;
  *(_QWORD *)(v1 + 7536) = &off_100063CC8;
  *(_BYTE *)(v1 + 7560) = 0;
  *(_QWORD *)(v1 + 7384) = 0x80000001000529F0;
  *(_QWORD *)(v1 + 7432) = 0x80000001000529F0;
  *(_QWORD *)(v1 + 7480) = 0x80000001000529F0;
  *(_QWORD *)(v1 + 7528) = 0x80000001000529F0;
  *(_QWORD *)(v1 + 7576) = 0x80000001000529F0;
  *(_QWORD *)(v1 + 7584) = &off_100063CF8;
  *(_BYTE *)(v1 + 7608) = 0;
  *(_QWORD *)(v1 + 7632) = &off_100063D38;
  *(_BYTE *)(v1 + 7656) = 0;
  *(_QWORD *)(v1 + 7680) = &off_100063D68;
  *(_BYTE *)(v1 + 7704) = 0;
  *(_QWORD *)(v1 + 6440) = 1;
  *(_QWORD *)(v1 + 6448) = 2064;
  *(_QWORD *)(v1 + 6464) = 0xD00000000000002CLL;
  *(_QWORD *)(v1 + 7624) = 0x8000000100052A20;
  *(_QWORD *)(v1 + 7672) = 0x8000000100052A20;
  *(_QWORD *)(v1 + 7720) = 0x8000000100052A20;
  *(_QWORD *)(v1 + 7728) = &off_100063D98;
  *(_QWORD *)(v1 + 7744) = 2134;
  *(_QWORD *)(v1 + 6416) = 0xD00000000000002CLL;
  *(_BYTE *)(v1 + 7752) = 0;
  *(_QWORD *)(v1 + 6400) = 2128;
  *(_QWORD *)(v1 + 7768) = 0x8000000100052A50;
  *(_QWORD *)(v1 + 6392) = 11;
  *(_QWORD *)(v1 + 7776) = &off_100063DC8;
  *(_BYTE *)(v1 + 7800) = 0;
  *(_QWORD *)(v1 + 6368) = 0xD000000000000031;
  *(_QWORD *)(v1 + 6344) = 1;
  *(_QWORD *)(v1 + 6352) = 64;
  *(_QWORD *)(v1 + 7816) = 0x8000000100052A80;
  *(_QWORD *)(v1 + 7824) = &off_100063DF8;
  *(_QWORD *)(v1 + 6320) = 0xD00000000000002ALL;
  *(_BYTE *)(v1 + 7848) = 0;
  *(_QWORD *)(v1 + 6296) = 11;
  *(_QWORD *)(v1 + 6304) = 16;
  *(_BYTE *)(v1 + 7896) = 0;
  *(_QWORD *)(v1 + 7872) = &off_100063E28;
  *(_QWORD *)(v1 + 7864) = 0x8000000100052AB0;
  *(_QWORD *)(v1 + 7912) = 0x8000000100052AB0;
  *(_QWORD *)(v1 + 6256) = 2064;
  *(_BYTE *)(v1 + 7944) = 0;
  *(_QWORD *)(v1 + 6248) = 3;
  *(_QWORD *)(v1 + 7920) = &off_100063E68;
  *(_QWORD *)(v1 + 6152) = 1;
  *(_QWORD *)(v1 + 6160) = 2064;
  *(_QWORD *)(v1 + 6200) = 3;
  *(_QWORD *)(v1 + 6208) = 2048;
  *(_QWORD *)(v1 + 7328) = 0xD000000000000020;
  *(_QWORD *)(v1 + 7376) = 0xD000000000000020;
  *(_QWORD *)(v1 + 7424) = 0xD000000000000020;
  *(_QWORD *)(v1 + 7472) = 0xD000000000000020;
  *(_QWORD *)(v1 + 7520) = 0xD000000000000020;
  *(_QWORD *)(v1 + 7568) = 0xD000000000000020;
  *(_QWORD *)(v1 + 7616) = 0xD000000000000020;
  *(_QWORD *)(v1 + 7664) = 0xD000000000000020;
  *(_QWORD *)(v1 + 7712) = 0xD000000000000020;
  *(_QWORD *)(v1 + 7952) = 0xD000000000000020;
  *(_QWORD *)(v1 + 6112) = 16;
  *(_QWORD *)(v1 + 7960) = 0x8000000100052AE0;
  *(_QWORD *)(v1 + 6104) = 4;
  *(_QWORD *)(v1 + 7968) = &off_100063E98;
  *(_BYTE *)(v1 + 7992) = 0;
  *(_QWORD *)(v1 + 6064) = 64;
  *(_QWORD *)(v1 + 6080) = 0xD000000000000023;
  *(_BYTE *)(v1 + 8040) = 0;
  *(_QWORD *)(v1 + 6056) = 1;
  *(_QWORD *)(v1 + 8016) = &off_100063ED8;
  *(_BYTE *)(v1 + 8088) = 0;
  *(_QWORD *)(v1 + 8064) = &off_100063F08;
  *(_QWORD *)(v1 + 6008) = 3;
  *(_QWORD *)(v1 + 6016) = 2112;
  *(_QWORD *)(v1 + 8008) = 0x8000000100052B10;
  *(_QWORD *)(v1 + 8056) = 0x8000000100052B10;
  *(_QWORD *)(v1 + 8104) = 0x8000000100052B10;
  *(_QWORD *)(v1 + 8112) = &off_100063F58;
  *(_BYTE *)(v1 + 8136) = 0;
  *(_QWORD *)(v1 + 5960) = 2;
  *(_QWORD *)(v1 + 5968) = 2048;
  *(_QWORD *)(v1 + 8152) = 0x8000000100052B40;
  *(_BYTE *)(v1 + 8184) = 0;
  *(_QWORD *)(v1 + 8160) = &off_100063F88;
  *(_QWORD *)(v1 + 8200) = 0x8000000100052B70;
  *(_QWORD *)(v1 + 5912) = 3;
  *(_QWORD *)(v1 + 5920) = 16;
  *(_QWORD *)(v1 + 8208) = &off_100063FB8;
  *(_BYTE *)(v1 + 8232) = 0;
  *(_QWORD *)(v1 + 8256) = &off_100063FE8;
  *(_QWORD *)(v1 + 5864) = 2;
  *(_QWORD *)(v1 + 5872) = 2064;
  *(_BYTE *)(v1 + 8280) = 0;
  *(_QWORD *)(v1 + 8304) = &off_100064028;
  *(_BYTE *)(v1 + 8328) = 0;
  *(_QWORD *)(v1 + 5816) = 2;
  *(_QWORD *)(v1 + 5824) = 16;
  *(_QWORD *)(v1 + 8248) = 0x8000000100052BB0;
  *(_QWORD *)(v1 + 8296) = 0x8000000100052BB0;
  *(_QWORD *)(v1 + 8344) = 0x8000000100052BB0;
  *(_QWORD *)(v1 + 8352) = &off_100064058;
  *(_QWORD *)(v1 + 8400) = &off_100064088;
  *(_QWORD *)(v1 + 5776) = 64;
  *(_BYTE *)(v1 + 8424) = 0;
  *(_QWORD *)(v1 + 5768) = 1;
  *(_QWORD *)(v1 + 8448) = &off_100064128;
  *(_BYTE *)(v1 + 8472) = 0;
  *(_QWORD *)(v1 + 8488) = 0x8000000100052C10;
  *(_QWORD *)(v1 + 5720) = 14;
  *(_QWORD *)(v1 + 5728) = 2128;
  *(_BYTE *)(v1 + 8376) = 0;
  *(_QWORD *)(v1 + 8496) = &off_100064158;
  *(_QWORD *)(v1 + 8536) = 0x8000000100052C40;
  *(_QWORD *)(v1 + 5680) = 64;
  *(_QWORD *)(v1 + 5696) = 0xD000000000000022;
  *(_QWORD *)(v1 + 8544) = &off_100064188;
  *(_QWORD *)(v1 + 5672) = 14;
  *(_QWORD *)(v1 + 8584) = 0x8000000100052C60;
  *(_QWORD *)(v1 + 5648) = 0xD000000000000022;
  *(_QWORD *)(v1 + 8592) = &off_1000641B8;
  *(_QWORD *)(v1 + 5624) = 13;
  *(_QWORD *)(v1 + 5632) = 2064;
  *(_QWORD *)(v1 + 8640) = &off_1000641E8;
  *(_QWORD *)(v1 + 5600) = 0xD000000000000022;
  *(_QWORD *)(v1 + 8632) = 0x8000000100052C90;
  *(_QWORD *)(v1 + 8680) = 0x8000000100052C90;
  *(_QWORD *)(v1 + 5576) = 7;
  *(_QWORD *)(v1 + 5584) = 2128;
  *(_QWORD *)(v1 + 8688) = &off_100064218;
  *(_QWORD *)(v1 + 5552) = 0xD000000000000022;
  *(_QWORD *)(v1 + 8728) = 0x8000000100052CC0;
  *(_QWORD *)(v1 + 8736) = &off_100064248;
  *(_QWORD *)(v1 + 5528) = 7;
  *(_QWORD *)(v1 + 5536) = 2064;
  *(_QWORD *)(v1 + 5440) = 64;
  *(_QWORD *)(v1 + 5480) = 7;
  *(_QWORD *)(v1 + 5488) = 80;
  *(_QWORD *)(v1 + 5504) = 0xD000000000000022;
  *(_QWORD *)(v1 + 5456) = 0xD000000000000022;
  *(_BYTE *)(v1 + 8520) = 0;
  *(_BYTE *)(v1 + 8568) = 0;
  *(_BYTE *)(v1 + 8616) = 0;
  *(_BYTE *)(v1 + 8664) = 0;
  *(_BYTE *)(v1 + 8712) = 0;
  *(_BYTE *)(v1 + 8760) = 0;
  *(_QWORD *)(v1 + 8784) = &off_100064278;
  *(_QWORD *)(v1 + 5432) = 7;
  *(_BYTE *)(v1 + 8808) = 0;
  *(_QWORD *)(v1 + 5392) = 80;
  *(_QWORD *)(v1 + 5408) = 0xD000000000000022;
  *(_QWORD *)(v1 + 8776) = 0x8000000100052CF0;
  *(_QWORD *)(v1 + 8824) = 0x8000000100052CF0;
  *(_QWORD *)(v1 + 5384) = 5;
  *(_BYTE *)(v1 + 8856) = 0;
  *(_QWORD *)(v1 + 5344) = 64;
  *(_QWORD *)(v1 + 5360) = 0xD000000000000022;
  *(_QWORD *)(v1 + 8832) = &off_1000642A8;
  *(_QWORD *)(v1 + 5336) = 5;
  *(_QWORD *)(v1 + 8800) = 3158;
  *(_QWORD *)(v1 + 8848) = 3158;
  *(_QWORD *)(v1 + 8872) = 0x8000000100052D20;
  *(_QWORD *)(v1 + 5296) = 16;
  *(_QWORD *)(v1 + 5312) = 0xD000000000000022;
  *(_BYTE *)(v1 + 8904) = 0;
  *(_QWORD *)(v1 + 5288) = 5;
  *(_QWORD *)(v1 + 8880) = &off_1000642D8;
  *(_QWORD *)(v1 + 5264) = 0xD000000000000022;
  *(_QWORD *)(v1 + 8920) = 0x8000000100052D50;
  *(_QWORD *)(v1 + 8928) = &off_100064308;
  *(_QWORD *)(v1 + 5240) = 4;
  *(_QWORD *)(v1 + 5248) = 64;
  *(_BYTE *)(v1 + 8952) = 0;
  *(_QWORD *)(v1 + 5200) = 80;
  *(_QWORD *)(v1 + 5216) = 0xD000000000000022;
  *(_BYTE *)(v1 + 9000) = 0;
  *(_QWORD *)(v1 + 5168) = 0xD000000000000022;
  *(_QWORD *)(v1 + 5192) = 3;
  *(_QWORD *)(v1 + 8976) = &off_100064338;
  *(_QWORD *)(v1 + 4400) = 0xD000000000000021;
  *(_QWORD *)(v1 + 4448) = 0xD000000000000021;
  *(_QWORD *)(v1 + 5120) = 0xD000000000000022;
  *(_QWORD *)(v1 + 5144) = 3;
  *(_QWORD *)(v1 + 5152) = 68;
  *(_QWORD *)(v1 + 4496) = 0xD000000000000021;
  *(_QWORD *)(v1 + 4544) = 0xD000000000000021;
  *(_QWORD *)(v1 + 4592) = 0xD000000000000021;
  *(_QWORD *)(v1 + 5072) = 0xD000000000000022;
  *(_QWORD *)(v1 + 5096) = 3;
  *(_QWORD *)(v1 + 5104) = 64;
  *(_QWORD *)(v1 + 4640) = 0xD000000000000021;
  *(_QWORD *)(v1 + 5000) = 2;
  *(_QWORD *)(v1 + 5008) = 64;
  *(_QWORD *)(v1 + 5024) = 0xD000000000000022;
  *(_QWORD *)(v1 + 5048) = 3;
  *(_QWORD *)(v1 + 5056) = 16;
  *(_QWORD *)(v1 + 8000) = 0xD000000000000021;
  *(_QWORD *)(v1 + 8048) = 0xD000000000000021;
  *(_QWORD *)(v1 + 8096) = 0xD000000000000021;
  *(_QWORD *)(v1 + 8960) = 0xD000000000000021;
  *(_QWORD *)(v1 + 9008) = 0xD000000000000021;
  *(_QWORD *)(v1 + 8968) = 0x8000000100052D80;
  *(_QWORD *)(v1 + 9016) = 0x8000000100052D80;
  *(_QWORD *)(v1 + 4976) = 0xD000000000000022;
  *(_QWORD *)(v1 + 9024) = &off_100064438;
  *(_QWORD *)(v1 + 4952) = 2;
  *(_QWORD *)(v1 + 4960) = 16;
  *(_BYTE *)(v1 + 9048) = 0;
  *(_BYTE *)(v1 + 9096) = 0;
  *(_QWORD *)(v1 + 4928) = 0xD000000000000022;
  *(_QWORD *)(v1 + 4904) = 1;
  *(_QWORD *)(v1 + 4912) = 2064;
  *(_QWORD *)(v1 + 9064) = 0x8000000100052DB0;
  *(_BYTE *)(v1 + 9144) = 0;
  *(_QWORD *)(v1 + 4880) = 0xD000000000000022;
  *(_BYTE *)(v1 + 9192) = 0;
  *(_QWORD *)(v1 + 4856) = 1;
  *(_QWORD *)(v1 + 4864) = 2048;
  *(_QWORD *)(v1 + 9120) = &off_100064468;
  *(_QWORD *)(v1 + 4808) = 1;
  *(_QWORD *)(v1 + 4816) = 80;
  *(_QWORD *)(v1 + 4832) = 0xD000000000000022;
  *(_QWORD *)(v1 + 9168) = &off_100064498;
  *(_QWORD *)(v1 + 4760) = 1;
  *(_QWORD *)(v1 + 4768) = 64;
  *(_QWORD *)(v1 + 4784) = 0xD000000000000022;
  *(_QWORD *)(v1 + 7808) = 0xD000000000000025;
  *(_QWORD *)(v1 + 8768) = 0xD000000000000025;
  *(_QWORD *)(v1 + 8816) = 0xD000000000000025;
  *(_QWORD *)(v1 + 8864) = 0xD000000000000025;
  *(_QWORD *)(v1 + 9104) = 0xD000000000000025;
  *(_QWORD *)(v1 + 9152) = 0xD000000000000025;
  *(_QWORD *)(v1 + 9200) = 0xD000000000000025;
  *(_QWORD *)(v1 + 4736) = 0xD000000000000022;
  *(_QWORD *)(v1 + 4712) = 1;
  *(_QWORD *)(v1 + 4720) = 16;
  *(_QWORD *)(v1 + 9112) = 0x8000000100052DF0;
  *(_QWORD *)(v1 + 9160) = 0x8000000100052DF0;
  *(_QWORD *)(v1 + 9208) = 0x8000000100052DF0;
  *(_QWORD *)(v1 + 4688) = 0xD000000000000022;
  *(_QWORD *)(v1 + 9216) = &off_1000644C8;
  *(_BYTE *)(v1 + 9240) = 0;
  *(_QWORD *)(v1 + 4664) = 15;
  *(_QWORD *)(v1 + 4672) = 2132;
  *(_QWORD *)(v1 + 9248) = 0xD00000000000002DLL;
  *(_QWORD *)(v1 + 9256) = 0x8000000100052E20;
  *(_QWORD *)(v1 + 9264) = &off_1000644F8;
  *(_QWORD *)(v1 + 4616) = 3;
  *(_QWORD *)(v1 + 4624) = 16;
  *(_BYTE *)(v1 + 9288) = 0;
  *(_QWORD *)(v1 + 4568) = 2;
  *(_QWORD *)(v1 + 4576) = 2064;
  *(_QWORD *)(v1 + 4064) = 0xD00000000000002FLL;
  *(_QWORD *)(v1 + 4112) = 0xD00000000000002FLL;
  *(_QWORD *)(v1 + 4160) = 0xD00000000000002FLL;
  *(_QWORD *)(v1 + 4208) = 0xD00000000000002FLL;
  *(_QWORD *)(v1 + 4256) = 0xD00000000000002FLL;
  *(_QWORD *)(v1 + 4528) = 2048;
  *(_QWORD *)(v1 + 4304) = 0xD00000000000002FLL;
  *(_QWORD *)(v1 + 4352) = 0xD00000000000002FLL;
  *(_QWORD *)(v1 + 9296) = 0xD00000000000002FLL;
  *(_QWORD *)(v1 + 4520) = 2;
  *(_QWORD *)(v1 + 9304) = 0x8000000100052E50;
  *(_QWORD *)(v1 + 9312) = &off_100064528;
  *(_BYTE *)(v1 + 9336) = 0;
  *(_QWORD *)(v1 + 4472) = 1;
  *(_QWORD *)(v1 + 4480) = 2064;
  *(_BYTE *)(v1 + 9384) = 0;
  *(_QWORD *)(v1 + 9360) = &off_100064558;
  *(_QWORD *)(v1 + 9408) = &off_100064588;
  *(_BYTE *)(v1 + 9432) = 0;
  *(_QWORD *)(v1 + 4432) = 16;
  *(_BYTE *)(v1 + 9480) = 0;
  *(_QWORD *)(v1 + 4424) = 1;
  *(_QWORD *)(v1 + 9456) = &off_1000645C8;
  *(_QWORD *)(v1 + 4328) = 7;
  *(_QWORD *)(v1 + 4336) = 2064;
  *(_QWORD *)(v1 + 4376) = 7;
  *(_QWORD *)(v1 + 4384) = 2128;
  *(_QWORD *)(v1 + 7280) = 0xD000000000000023;
  *(_QWORD *)(v1 + 8480) = 0xD000000000000023;
  *(_QWORD *)(v1 + 8624) = 0xD000000000000023;
  *(_QWORD *)(v1 + 8672) = 0xD000000000000023;
  *(_QWORD *)(v1 + 9344) = 0xD000000000000023;
  *(_QWORD *)(v1 + 9392) = 0xD000000000000023;
  *(_QWORD *)(v1 + 9440) = 0xD000000000000023;
  *(_QWORD *)(v1 + 9488) = 0xD000000000000023;
  *(_QWORD *)(v1 + 4280) = 6;
  *(_QWORD *)(v1 + 4288) = 16;
  *(_QWORD *)(v1 + 9352) = 0x8000000100052E80;
  *(_QWORD *)(v1 + 9400) = 0x8000000100052E80;
  *(_QWORD *)(v1 + 9448) = 0x8000000100052E80;
  *(_QWORD *)(v1 + 9496) = 0x8000000100052E80;
  *(_QWORD *)(v1 + 9504) = &off_1000645F8;
  *(_BYTE *)(v1 + 9528) = 0;
  *(_QWORD *)(v1 + 4240) = 2048;
  *(_BYTE *)(v1 + 9576) = 0;
  *(_QWORD *)(v1 + 4232) = 2;
  *(_QWORD *)(v1 + 9552) = &off_100064628;
  *(_QWORD *)(v1 + 9544) = 0x8000000100052EB0;
  *(_QWORD *)(v1 + 9592) = 0x8000000100052EB0;
  *(_QWORD *)(v1 + 9600) = &off_100064658;
  *(_QWORD *)(v1 + 4184) = 2;
  *(_QWORD *)(v1 + 4192) = 16;
  *(_BYTE *)(v1 + 9624) = 0;
  *(_QWORD *)(v1 + 9640) = 0x8000000100052EE0;
  *(_QWORD *)(v1 + 9648) = &off_100064688;
  *(_QWORD *)(v1 + 4144) = 64;
  *(_BYTE *)(v1 + 9672) = 0;
  *(_QWORD *)(v1 + 9680) = 0xD000000000000038;
  *(_QWORD *)(v1 + 4136) = 1;
  *(_QWORD *)(v1 + 9688) = 0x8000000100052F20;
  *(_QWORD *)(v1 + 9696) = &off_1000646B8;
  *(_BYTE *)(v1 + 9720) = 0;
  *(_QWORD *)(v1 + 4096) = 16;
  *(_QWORD *)(v1 + 9736) = 0x8000000100052F60;
  *(_QWORD *)(v1 + 4088) = 1;
  *(_QWORD *)(v1 + 9744) = &off_1000646E8;
  *(_QWORD *)(v1 + 4048) = 2128;
  *(_BYTE *)(v1 + 4056) = 0;
  *(_BYTE *)(v1 + 9768) = 0;
  *(_BYTE *)(v1 + 9816) = 0;
  *(_QWORD *)(v1 + 4040) = 7;
  *(_QWORD *)(v1 + 4000) = 80;
  *(_BYTE *)(v1 + 4008) = 0;
  *(_QWORD *)(v1 + 9784) = 0x8000000100052FA0;
  *(_QWORD *)(v1 + 3968) = 0xD000000000000027;
  *(_QWORD *)(v1 + 3992) = 3;
  *(_QWORD *)(v1 + 9792) = &off_100064718;
  *(_QWORD *)(v1 + 3944) = 2;
  *(_QWORD *)(v1 + 3952) = 2064;
  *(_BYTE *)(v1 + 3960) = 0;
  *(_QWORD *)(v1 + 9056) = 0xD000000000000035;
  *(_QWORD *)(v1 + 9824) = 0xD000000000000035;
  *(_BYTE *)(v1 + 3912) = 0;
  *(_QWORD *)(v1 + 3920) = 0xD000000000000027;
  *(_QWORD *)(v1 + 9832) = 0x8000000100052FE0;
  *(_QWORD *)(v1 + 3896) = 2;
  *(_QWORD *)(v1 + 3904) = 16;
  *(_QWORD *)(v1 + 9840) = &off_100064748;
  *(_BYTE *)(v1 + 9864) = 0;
  *(_BYTE *)(v1 + 3864) = 0;
  *(_QWORD *)(v1 + 3872) = 0xD000000000000027;
  *(_QWORD *)(v1 + 3848) = 1;
  *(_QWORD *)(v1 + 3856) = 16;
  *(_QWORD *)(v1 + 9880) = 0x8000000100053020;
  *(_QWORD *)(v1 + 3808) = 64;
  *(_BYTE *)(v1 + 3816) = 0;
  *(_QWORD *)(v1 + 3824) = 0xD000000000000027;
  *(_QWORD *)(v1 + 9888) = &off_1000647A8;
  *(_BYTE *)(v1 + 9912) = 0;
  *(_QWORD *)(v1 + 9920) = 0xD000000000000031;
  *(_QWORD *)(v1 + 3800) = 4;
  *(_BYTE *)(v1 + 9960) = 0;
  *(_QWORD *)(v1 + 3752) = 4;
  *(_QWORD *)(v1 + 3760) = 64;
  *(_BYTE *)(v1 + 3768) = 0;
  *(_BYTE *)(v1 + 3720) = 0;
  *(_QWORD *)(v1 + 3728) = 0xD00000000000002ALL;
  *(_QWORD *)(v1 + 9928) = 0x8000000100053070;
  *(_QWORD *)(v1 + 3696) = &_swiftEmptyArrayStorage;
  *(_QWORD *)(v1 + 3704) = 1;
  *(_QWORD *)(v1 + 3712) = 64;
  *(_QWORD *)(v1 + 9936) = &off_1000647D8;
  *(_QWORD *)(v1 + 3664) = 64;
  *(_BYTE *)(v1 + 3672) = 0;
  *(_QWORD *)(v1 + 3680) = 0xD00000000000002ALL;
  *(_QWORD *)(v1 + 9776) = 0xD000000000000039;
  *(_QWORD *)(v1 + 9968) = 0xD000000000000039;
  *(_QWORD *)(v1 + 3656) = 1;
  *(_QWORD *)(v1 + 9976) = 0x80000001000530B0;
  *(_QWORD *)(v1 + 9984) = &off_100064808;
  *(_QWORD *)(v1 + 3616) = 64;
  *(_BYTE *)(v1 + 3624) = 0;
  *(_BYTE *)(v1 + 10008) = 0;
  *(_QWORD *)(v1 + 3584) = 0xD000000000000040;
  *(_QWORD *)(v1 + 3608) = 1;
  *(_QWORD *)(v1 + 0x2000) = 0xD000000000000033;
  *(_QWORD *)(v1 + 10016) = 0xD000000000000033;
  *(_QWORD *)(v1 + 3568) = 64;
  *(_BYTE *)(v1 + 3576) = 0;
  *(_QWORD *)(v1 + 10024) = 0x80000001000530F0;
  *(_QWORD *)(v1 + 3560) = 2;
  *(_QWORD *)(v1 + 10032) = &off_100064838;
  *(_QWORD *)(v1 + 3512) = 1;
  *(_QWORD *)(v1 + 3520) = 64;
  *(_BYTE *)(v1 + 3528) = 0;
  *(_BYTE *)(v1 + 10056) = 0;
  *(_QWORD *)(v1 + 3472) = 2128;
  *(_BYTE *)(v1 + 3480) = 0;
  *(_QWORD *)(v1 + 3488) = 0xD000000000000022;
  *(_QWORD *)(v1 + 8528) = 0xD00000000000001FLL;
  *(_QWORD *)(v1 + 10064) = 0xD00000000000001FLL;
  *(_QWORD *)(v1 + 3464) = 15;
  *(_QWORD *)(v1 + 10072) = 0x8000000100053130;
  *(_QWORD *)(v1 + 10080) = &off_100064868;
  *(_BYTE *)(v1 + 3432) = 0;
  *(_BYTE *)(v1 + 10104) = 0;
  *(_QWORD *)(v1 + 3416) = 15;
  *(_QWORD *)(v1 + 10944) = &off_100064C08;
  *(_BYTE *)(v1 + 10968) = 0;
  *(_BYTE *)(v1 + 3384) = 0;
  *(_BYTE *)(v1 + 11016) = 0;
  *(_QWORD *)(v1 + 3368) = 15;
  *(_QWORD *)(v1 + 3376) = 80;
  *(_QWORD *)(v1 + 10992) = &off_100064C38;
  *(_BYTE *)(v1 + 3096) = 0;
  *(_QWORD *)(v1 + 3128) = 6;
  *(_QWORD *)(v1 + 3320) = 14;
  *(_QWORD *)(v1 + 3328) = 80;
  *(_BYTE *)(v1 + 3336) = 0;
  *(_QWORD *)(v1 + 3136) = 80;
  *(_BYTE *)(v1 + 3144) = 0;
  *(_QWORD *)(v1 + 3176) = 7;
  *(_QWORD *)(v1 + 3272) = 12;
  *(_QWORD *)(v1 + 3280) = 2132;
  *(_BYTE *)(v1 + 3288) = 0;
  *(_QWORD *)(v1 + 3184) = 64;
  *(_BYTE *)(v1 + 3192) = 0;
  *(_QWORD *)(v1 + 3224) = 12;
  *(_BYTE *)(v1 + 3240) = 0;
  *(_QWORD *)(v1 + 7088) = 0xD00000000000002CLL;
  *(_QWORD *)(v1 + 9856) = 64;
  *(_QWORD *)(v1 + 9896) = 3;
  *(_QWORD *)(v1 + 9944) = 1;
  *(_QWORD *)(v1 + 9952) = 64;
  *(_QWORD *)(v1 + 9992) = 11;
  *(_QWORD *)(v1 + 10000) = 2128;
  *(_QWORD *)(v1 + 10040) = 1;
  *(_QWORD *)(v1 + 10088) = 5;
  *(_QWORD *)(v1 + 10928) = 0xD000000000000040;
  *(_QWORD *)(v1 + 10976) = 0xD000000000000040;
  *(_QWORD *)(v1 + 11024) = 0xD000000000000040;
  *(_QWORD *)(v1 + 10096) = 16;
  *(_QWORD *)(v1 + 10936) = 0x8000000100053300;
  *(_QWORD *)(v1 + 10984) = 0x8000000100053300;
  *(_QWORD *)(v1 + 11032) = 0x8000000100053300;
  *(_QWORD *)(v1 + 11040) = &off_100064C68;
  *(_BYTE *)(v1 + 11064) = 0;
  *(_QWORD *)(v1 + 11072) = 0xD00000000000006BLL;
  *(_QWORD *)(v1 + 11080) = 0x8000000100053350;
  *(_QWORD *)(v1 + 11088) = &off_100064C98;
  *(_BYTE *)(v1 + 11112) = 0;
  *(_QWORD *)(v1 + 11128) = 0x80000001000533C0;
  *(_BYTE *)(v1 + 11160) = 0;
  *(_QWORD *)(v1 + 11136) = &off_100064CC8;
  *(_QWORD *)(v1 + 11120) = 0xD000000000000064;
  *(_QWORD *)(v1 + 11168) = 0xD000000000000064;
  *(_QWORD *)(v1 + 10048) = 80;
  *(_QWORD *)(v1 + 11176) = 0x8000000100053430;
  *(_QWORD *)(v1 + 11184) = &off_100064CF8;
  *(_BYTE *)(v1 + 11208) = 0;
  *(_QWORD *)(v1 + 11224) = 0x80000001000534A0;
  *(_QWORD *)(v1 + 11232) = &off_100064DC8;
  *(_BYTE *)(v1 + 11256) = 0;
  *(_QWORD *)(v1 + 11280) = &off_100064DF8;
  *(_BYTE *)(v1 + 11304) = 0;
  *(_QWORD *)(v1 + 11264) = 0xD00000000000005DLL;
  *(_QWORD *)(v1 + 11312) = 0xD00000000000005DLL;
  *(_QWORD *)(v1 + 11272) = 0x8000000100053500;
  *(_QWORD *)(v1 + 11320) = 0x8000000100053500;
  *(_QWORD *)(v1 + 11328) = &off_100064E28;
  *(_BYTE *)(v1 + 11352) = 0;
  *(_QWORD *)(v1 + 11368) = 0x8000000100053560;
  *(_BYTE *)(v1 + 11400) = 0;
  *(_QWORD *)(v1 + 11408) = 0xD000000000000065;
  *(_QWORD *)(v1 + 9904) = 80;
  *(_QWORD *)(v1 + 11416) = 0x80000001000535D0;
  *(_QWORD *)(v1 + 11424) = &off_100064E58;
  *(_BYTE *)(v1 + 11448) = 0;
  *(_QWORD *)(v1 + 11456) = 0xD00000000000005ALL;
  *(_QWORD *)(v1 + 9872) = 0xD00000000000004DLL;
  *(_QWORD *)(v1 + 11464) = 0x8000000100053640;
  *(_QWORD *)(v1 + 11472) = &off_100064ED8;
  *(_QWORD *)(v1 + 9848) = 1;
  *(_BYTE *)(v1 + 11496) = 0;
  *(_QWORD *)(v1 + 11520) = &off_100064F08;
  *(_BYTE *)(v1 + 11544) = 0;
  *(_QWORD *)(v1 + 9800) = 1;
  *(_QWORD *)(v1 + 9808) = 16;
  *(_QWORD *)(v1 + 11568) = &off_100064F38;
  *(_BYTE *)(v1 + 11592) = 0;
  *(_QWORD *)(v1 + 9752) = 1;
  *(_QWORD *)(v1 + 9760) = 16;
  *(_QWORD *)(v1 + 11512) = 0x80000001000536A0;
  *(_QWORD *)(v1 + 11560) = 0x80000001000536A0;
  *(_QWORD *)(v1 + 11608) = 0x80000001000536A0;
  *(_BYTE *)(v1 + 11640) = 0;
  *(_QWORD *)(v1 + 9728) = 0xD000000000000032;
  *(_BYTE *)(v1 + 11688) = 0;
  *(_QWORD *)(v1 + 9712) = 16;
  *(_QWORD *)(v1 + 11616) = &off_100064F68;
  *(_QWORD *)(v1 + 9704) = 1;
  *(_QWORD *)(v1 + 11656) = 0x8000000100053700;
  *(_QWORD *)(v1 + 11696) = 0xD000000000000053;
  *(_BYTE *)(v1 + 11736) = 0;
  *(_QWORD *)(v1 + 9656) = 1;
  *(_QWORD *)(v1 + 9664) = 64;
  *(_QWORD *)(v1 + 11704) = 0x8000000100053760;
  *(_QWORD *)(v1 + 9608) = 3;
  *(_QWORD *)(v1 + 9616) = 2048;
  *(_QWORD *)(v1 + 9632) = 0xD000000000000032;
  *(_QWORD *)(v1 + 11504) = 0xD000000000000057;
  *(_QWORD *)(v1 + 11552) = 0xD000000000000057;
  *(_QWORD *)(v1 + 11600) = 0xD000000000000057;
  *(_QWORD *)(v1 + 11744) = 0xD000000000000057;
  *(_QWORD *)(v1 + 9584) = 0xD000000000000022;
  *(_QWORD *)(v1 + 11752) = 0x80000001000537C0;
  *(_QWORD *)(v1 + 9536) = 0xD000000000000022;
  *(_QWORD *)(v1 + 9560) = 1;
  *(_QWORD *)(v1 + 9568) = 2048;
  *(_QWORD *)(v1 + 9072) = &_swiftEmptyArrayStorage;
  *(_QWORD *)(v1 + 9512) = 6;
  *(_QWORD *)(v1 + 9520) = 18;
  *(_QWORD *)(v1 + 11376) = &_swiftEmptyArrayStorage;
  *(_QWORD *)(v1 + 11664) = &_swiftEmptyArrayStorage;
  *(_QWORD *)(v1 + 11712) = &_swiftEmptyArrayStorage;
  *(_QWORD *)(v1 + 11760) = &_swiftEmptyArrayStorage;
  *(_BYTE *)(v1 + 11784) = 0;
  *(_QWORD *)(v1 + 9472) = 16;
  *(_QWORD *)(v1 + 11800) = 0x8000000100053820;
  *(_QWORD *)(v1 + 11808) = &off_100064F98;
  *(_BYTE *)(v1 + 11832) = 0;
  *(_QWORD *)(v1 + 9464) = 6;
  *(_QWORD *)(v1 + 11840) = 0xD00000000000003CLL;
  *(_QWORD *)(v1 + 11848) = 0x8000000100053860;
  *(_QWORD *)(v1 + 11856) = &off_100064FC8;
  *(_QWORD *)(v1 + 9416) = 2;
  *(_QWORD *)(v1 + 9424) = 16;
  *(_BYTE *)(v1 + 11880) = 0;
  *(_QWORD *)(v1 + 11888) = 0xD00000000000003DLL;
  *(_QWORD *)(v1 + 9376) = 16;
  *(_QWORD *)(v1 + 11896) = 0x80000001000538A0;
  *(_QWORD *)(v1 + 11904) = &off_100064FF8;
  *(_BYTE *)(v1 + 11928) = 0;
  *(_QWORD *)(v1 + 9368) = 1;
  *(_QWORD *)(v1 + 11944) = 0x80000001000538E0;
  *(_BYTE *)(v1 + 11976) = 0;
  *(_QWORD *)(v1 + 9320) = 2;
  *(_QWORD *)(v1 + 9328) = 2064;
  *(_QWORD *)(v1 + 11952) = &off_100065028;
  *(_QWORD *)(v1 + 11792) = 0xD000000000000034;
  *(_QWORD *)(v1 + 11984) = 0xD000000000000034;
  *(_QWORD *)(v1 + 9272) = 1;
  *(_QWORD *)(v1 + 9280) = 2128;
  *(_QWORD *)(v1 + 11992) = 0x8000000100053920;
  *(_QWORD *)(v1 + 12000) = &off_100065058;
  *(_BYTE *)(v1 + 12024) = 0;
  *(_QWORD *)(v1 + 9232) = 80;
  *(_QWORD *)(v1 + 7184) = 0xD000000000000030;
  *(_QWORD *)(v1 + 7232) = 0xD000000000000030;
  *(_QWORD *)(v1 + 12032) = 0xD000000000000030;
  *(_QWORD *)(v1 + 9224) = 15;
  *(_QWORD *)(v1 + 12040) = 0x8000000100053960;
  *(_QWORD *)(v1 + 12048) = &off_100065088;
  *(_BYTE *)(v1 + 12072) = 0;
  *(_QWORD *)(v1 + 9176) = 5;
  *(_QWORD *)(v1 + 9184) = 64;
  *(_BYTE *)(v1 + 12120) = 0;
  *(_QWORD *)(v1 + 12096) = &off_1000650B8;
  *(_QWORD *)(v1 + 12088) = 0x80000001000539A0;
  *(_QWORD *)(v1 + 12136) = 0x80000001000539A0;
  *(_QWORD *)(v1 + 9136) = 64;
  *(_BYTE *)(v1 + 12168) = 0;
  *(_QWORD *)(v1 + 9128) = 1;
  *(_QWORD *)(v1 + 12144) = &off_1000650E8;
  *(_BYTE *)(v1 + 12216) = 0;
  *(_QWORD *)(v1 + 12192) = &off_100065118;
  *(_QWORD *)(v1 + 9080) = 1;
  *(_QWORD *)(v1 + 9088) = 64;
  *(_QWORD *)(v1 + 12184) = 0x80000001000539D0;
  *(_QWORD *)(v1 + 12232) = 0x80000001000539D0;
  *(_QWORD *)(v1 + 12240) = &off_100065148;
  *(_BYTE *)(v1 + 12264) = 0;
  *(_QWORD *)(v1 + 8704) = 2132;
  *(_QWORD *)(v1 + 9032) = 3;
  *(_QWORD *)(v1 + 9040) = 2128;
  *(_QWORD *)(v1 + 12256) = 2132;
  *(_QWORD *)(v1 + 8888) = 2;
  *(_QWORD *)(v1 + 8984) = 1;
  *(_QWORD *)(v1 + 8992) = 64;
  *(_QWORD *)(v1 + 8896) = 16;
  *(_QWORD *)(v1 + 8912) = 0xD000000000000027;
  *(_QWORD *)(v1 + 8936) = 5;
  *(_QWORD *)(v1 + 8944) = 2068;
  *(_QWORD *)(v1 + 12176) = 0xD00000000000002ALL;
  *(_QWORD *)(v1 + 12224) = 0xD00000000000002ALL;
  *(_QWORD *)(v1 + 12272) = 0xD00000000000002ALL;
  *(_QWORD *)(v1 + 12280) = 0x8000000100053A00;
  *(_QWORD *)(v1 + 12288) = &off_100065178;
  *(_BYTE *)(v1 + 12312) = 0;
  *(_QWORD *)(v1 + 7112) = 1;
  *(_QWORD *)(v1 + 7120) = 64;
  *(_QWORD *)(v1 + 7136) = 0xD00000000000002CLL;
  *(_QWORD *)(v1 + 8840) = 15;
  *(_QWORD *)(v1 + 7160) = 3;
  *(_QWORD *)(v1 + 7208) = 1;
  *(_QWORD *)(v1 + 7216) = 2048;
  *(_QWORD *)(v1 + 7856) = 0xD00000000000002CLL;
  *(_QWORD *)(v1 + 7904) = 0xD00000000000002CLL;
  *(_QWORD *)(v1 + 8720) = 0xD000000000000027;
  *(_QWORD *)(v1 + 8792) = 7;
  *(_QWORD *)(v1 + 12080) = 0xD00000000000002CLL;
  *(_QWORD *)(v1 + 12128) = 0xD00000000000002CLL;
  *(_QWORD *)(v1 + 12320) = 0xD00000000000002CLL;
  *(_QWORD *)(v1 + 12328) = 0x8000000100053A30;
  *(_QWORD *)(v1 + 12336) = &off_1000651A8;
  *(_BYTE *)(v1 + 12360) = 0;
  *(_QWORD *)(v1 + 8744) = 13;
  *(_QWORD *)(v1 + 8752) = 20;
  *(_QWORD *)(v1 + 7256) = 3;
  *(_QWORD *)(v1 + 7264) = 2064;
  *(_QWORD *)(v1 + 7304) = 4;
  *(_QWORD *)(v1 + 7312) = 2064;
  *(_QWORD *)(v1 + 7352) = 1;
  *(_QWORD *)(v1 + 8696) = 3;
  *(_QWORD *)(v1 + 7360) = 2064;
  *(_QWORD *)(v1 + 7400) = 2;
  *(_QWORD *)(v1 + 7408) = 64;
  *(_QWORD *)(v1 + 7448) = 4;
  *(_QWORD *)(v1 + 8648) = 1;
  *(_QWORD *)(v1 + 8656) = 16;
  *(_QWORD *)(v1 + 7456) = 64;
  *(_QWORD *)(v1 + 7496) = 4;
  *(_QWORD *)(v1 + 7504) = 2064;
  *(_QWORD *)(v1 + 8576) = 0xD000000000000022;
  *(_QWORD *)(v1 + 8600) = 2;
  *(_QWORD *)(v1 + 8608) = 16;
  *(_QWORD *)(v1 + 7544) = 5;
  *(_QWORD *)(v1 + 7552) = 64;
  *(_QWORD *)(v1 + 7592) = 6;
  *(_QWORD *)(v1 + 7600) = 64;
  *(_QWORD *)(v1 + 8552) = 2;
  *(_QWORD *)(v1 + 8560) = 2048;
  *(_QWORD *)(v1 + 7640) = 1;
  *(_QWORD *)(v1 + 8512) = 16;
  *(_QWORD *)(v1 + 11936) = 0xD000000000000037;
  *(_QWORD *)(v1 + 12368) = 0xD000000000000037;
  *(_QWORD *)(v1 + 12376) = 0x8000000100053A60;
  *(_QWORD *)(v1 + 12384) = &off_1000651D8;
  *(_BYTE *)(v1 + 12408) = 0;
  *(_QWORD *)(v1 + 8504) = 2;
  *(_QWORD *)(v1 + 7648) = 16;
  *(_QWORD *)(v1 + 8440) = 0x8000000100052BE0;
  *(_QWORD *)(v1 + 8456) = 7;
  *(_QWORD *)(v1 + 8464) = 2128;
  *(_QWORD *)(v1 + 7688) = 14;
  *(_QWORD *)(v1 + 7696) = 68;
  *(_QWORD *)(v1 + 8368) = 2128;
  *(_QWORD *)(v1 + 8408) = 1;
  *(_QWORD *)(v1 + 8416) = 64;
  *(_QWORD *)(v1 + 8432) = 0xD000000000000027;
  *(_QWORD *)(v1 + 7736) = 15;
  *(_QWORD *)(v1 + 7760) = 0xD000000000000027;
  *(_QWORD *)(v1 + 7784) = 6;
  *(_QWORD *)(v1 + 8320) = 2048;
  *(_QWORD *)(v1 + 8336) = 0xD000000000000022;
  *(_QWORD *)(v1 + 8360) = 7;
  *(_QWORD *)(v1 + 7792) = 64;
  *(_QWORD *)(v1 + 7832) = 1;
  *(_QWORD *)(v1 + 7840) = 64;
  *(_QWORD *)(v1 + 8272) = 16;
  *(_QWORD *)(v1 + 8288) = 0xD000000000000022;
  *(_QWORD *)(v1 + 8312) = 1;
  *(_QWORD *)(v1 + 7880) = 1;
  *(_QWORD *)(v1 + 7888) = 16;
  *(_QWORD *)(v1 + 7928) = 5;
  *(_QWORD *)(v1 + 8224) = 16;
  *(_QWORD *)(v1 + 8240) = 0xD000000000000022;
  *(_QWORD *)(v1 + 8264) = 1;
  *(_QWORD *)(v1 + 7936) = 16;
  *(_QWORD *)(v1 + 7976) = 1;
  *(_QWORD *)(v1 + 7984) = 16;
  *(_QWORD *)(v1 + 8024) = 1;
  *(_QWORD *)(v1 + 8176) = 80;
  *(_QWORD *)(v1 + 8216) = 5;
  *(_QWORD *)(v1 + 8032) = 2064;
  *(_QWORD *)(v1 + 8072) = 3;
  *(_QWORD *)(v1 + 8080) = 16;
  *(_QWORD *)(v1 + 8128) = 2048;
  *(_QWORD *)(v1 + 8144) = 0xD000000000000022;
  *(_QWORD *)(v1 + 8168) = 1;
  *(_QWORD *)(v1 + 8120) = 3;
  *(_QWORD *)(v1 + 10952) = 1;
  *(_QWORD *)(v1 + 10960) = 2064;
  *(_QWORD *)(v1 + 11000) = 1;
  *(_QWORD *)(v1 + 11008) = 2128;
  *(_QWORD *)(v1 + 11048) = 11;
  *(_QWORD *)(v1 + 11056) = 80;
  *(_QWORD *)(v1 + 11096) = 2;
  *(_QWORD *)(v1 + 11104) = 2064;
  *(_QWORD *)(v1 + 12416) = 0xD000000000000032;
  *(_QWORD *)(v1 + 12424) = 0x8000000100053AA0;
  *(_QWORD *)(v1 + 12432) = &off_100065208;
  *(_BYTE *)(v1 + 12456) = 0;
  *(_QWORD *)(v1 + 12480) = &off_100065238;
  *(_BYTE *)(v1 + 12504) = 0;
  *(_QWORD *)(v1 + 12528) = &off_100065268;
  *(_BYTE *)(v1 + 12552) = 0;
  *(_QWORD *)(v1 + 12576) = &off_100065298;
  *(_BYTE *)(v1 + 12600) = 0;
  *(_QWORD *)(v1 + 12624) = &off_1000652C8;
  *(_QWORD *)(v1 + 8384) = 0xD000000000000027;
  *(_QWORD *)(v1 + 12464) = 0xD00000000000004CLL;
  *(_QWORD *)(v1 + 12472) = 0x8000000100053AE0;
  *(_QWORD *)(v1 + 12512) = 0xD00000000000004CLL;
  *(_QWORD *)(v1 + 12520) = 0x8000000100053AE0;
  *(_QWORD *)(v1 + 12560) = 0xD00000000000004CLL;
  *(_QWORD *)(v1 + 12568) = 0x8000000100053AE0;
  *(_QWORD *)(v1 + 12608) = 0xD00000000000004CLL;
  *(_QWORD *)(v1 + 12616) = 0x8000000100053AE0;
  *(_BYTE *)(v1 + 12648) = 0;
  *(_QWORD *)(v1 + 12664) = 0x8000000100053AE0;
  *(_QWORD *)(v1 + 12656) = 0xD00000000000004CLL;
  *(_QWORD *)(v1 + 12672) = &off_1000652F8;
  *(_BYTE *)(v1 + 12696) = 0;
  *(_QWORD *)(v1 + 12712) = 0x8000000100053B30;
  *(_QWORD *)(v1 + 12720) = &off_100065328;
  *(_BYTE *)(v1 + 12744) = 0;
  *(_QWORD *)(v1 + 12768) = &off_100065358;
  *(_QWORD *)(v1 + 12816) = &off_100065388;
  *(_QWORD *)(v1 + 12864) = &off_1000653B8;
  *(_QWORD *)(v1 + 12760) = 0x8000000100053B80;
  *(_BYTE *)(v1 + 12792) = 0;
  *(_QWORD *)(v1 + 12808) = 0x8000000100053B80;
  *(_BYTE *)(v1 + 12840) = 0;
  *(_QWORD *)(v1 + 12856) = 0x8000000100053B80;
  *(_BYTE *)(v1 + 12888) = 0;
  *(_QWORD *)(v1 + 12904) = 0x8000000100053B80;
  *(_QWORD *)(v1 + 12912) = &off_1000653E8;
  *(_BYTE *)(v1 + 12936) = 0;
  *(_QWORD *)(v1 + 12960) = &off_100065418;
  *(_BYTE *)(v1 + 12984) = 0;
  *(_QWORD *)(v1 + 13008) = &off_100065448;
  *(_BYTE *)(v1 + 13032) = 0;
  *(_QWORD *)(v1 + 13056) = &off_100065478;
  *(_BYTE *)(v1 + 13080) = 0;
  *(_QWORD *)(v1 + 13104) = &off_1000654A8;
  *(_BYTE *)(v1 + 13128) = 0;
  *(_QWORD *)(v1 + 12952) = 0x8000000100053BD0;
  *(_QWORD *)(v1 + 13000) = 0x8000000100053BD0;
  *(_QWORD *)(v1 + 13048) = 0x8000000100053BD0;
  *(_QWORD *)(v1 + 13096) = 0x8000000100053BD0;
  *(_QWORD *)(v1 + 13144) = 0x8000000100053BD0;
  *(_QWORD *)(v1 + 13152) = &off_1000654D8;
  *(_QWORD *)(v1 + 13168) = 22;
  *(_BYTE *)(v1 + 13176) = 0;
  *(_QWORD *)(v1 + 13200) = &off_100065508;
  *(_BYTE *)(v1 + 13224) = 0;
  *(_QWORD *)(v1 + 13248) = &off_100065538;
  *(_BYTE *)(v1 + 13272) = 0;
  *(_QWORD *)(v1 + 13296) = &off_100065568;
  *(_BYTE *)(v1 + 13320) = 0;
  *(_QWORD *)(v1 + 13184) = 0xD000000000000048;
  *(_QWORD *)(v1 + 13232) = 0xD000000000000048;
  *(_QWORD *)(v1 + 13280) = 0xD000000000000048;
  *(_QWORD *)(v1 + 13328) = 0xD000000000000048;
  *(_QWORD *)(v1 + 13192) = 0x8000000100053C20;
  *(_QWORD *)(v1 + 13240) = 0x8000000100053C20;
  *(_QWORD *)(v1 + 13288) = 0x8000000100053C20;
  *(_QWORD *)(v1 + 13336) = 0x8000000100053C20;
  *(_QWORD *)(v1 + 13344) = &off_100065598;
  *(_BYTE *)(v1 + 13368) = 0;
  *(_QWORD *)(v1 + 13392) = &off_1000655C8;
  *(_BYTE *)(v1 + 13416) = 0;
  *(_QWORD *)(v1 + 13440) = &off_1000655F8;
  *(_BYTE *)(v1 + 13464) = 0;
  *(_QWORD *)(v1 + 13384) = 0x8000000100053C70;
  *(_QWORD *)(v1 + 13432) = 0x8000000100053C70;
  *(_QWORD *)(v1 + 13480) = 0x8000000100053C70;
  *(_QWORD *)(v1 + 13488) = &off_100065628;
  *(_BYTE *)(v1 + 13512) = 0;
  *(_QWORD *)(v1 + 13536) = &off_100065658;
  *(_BYTE *)(v1 + 13560) = 0;
  *(_QWORD *)(v1 + 13520) = 0xD00000000000004CLL;
  *(_QWORD *)(v1 + 13568) = 0xD00000000000004CLL;
  *(_QWORD *)(v1 + 13528) = 0x8000000100053CD0;
  *(_QWORD *)(v1 + 13576) = 0x8000000100053CD0;
  *(_QWORD *)(v1 + 13584) = &off_100065688;
  *(_BYTE *)(v1 + 13608) = 0;
  *(_QWORD *)(v1 + 13624) = 0x8000000100053D20;
  *(_BYTE *)(v1 + 13656) = 0;
  *(_QWORD *)(v1 + 13632) = &off_1000656B8;
  *(_QWORD *)(v1 + 13672) = 0x8000000100053D70;
  *(_QWORD *)(v1 + 13680) = &off_1000656E8;
  *(_BYTE *)(v1 + 13704) = 0;
  *(_QWORD *)(v1 + 13728) = &off_100065718;
  *(_BYTE *)(v1 + 13752) = 0;
  *(_QWORD *)(v1 + 13720) = 0x8000000100053D70;
  *(_QWORD *)(v1 + 13768) = 0x8000000100053D70;
  *(_QWORD *)(v1 + 13776) = &off_100065748;
  *(_BYTE *)(v1 + 13800) = 0;
  *(_QWORD *)(v1 + 13824) = &off_100065778;
  *(_BYTE *)(v1 + 13848) = 0;
  *(_QWORD *)(v1 + 13816) = 0x8000000100053DC0;
  *(_QWORD *)(v1 + 13864) = 0x8000000100053DC0;
  *(_QWORD *)(v1 + 13872) = &off_1000657A8;
  *(_BYTE *)(v1 + 13896) = 0;
  *(_QWORD *)(v1 + 13920) = &off_1000657D8;
  *(_BYTE *)(v1 + 13944) = 0;
  *(_BYTE *)(v1 + 13992) = 0;
  *(_BYTE *)(v1 + 14040) = 0;
  *(_BYTE *)(v1 + 14088) = 0;
  *(_BYTE *)(v1 + 14136) = 0;
  *(_BYTE *)(v1 + 14184) = 0;
  *(_BYTE *)(v1 + 14232) = 0;
  *(_BYTE *)(v1 + 14328) = 0;
  *(_BYTE *)(v1 + 14376) = 0;
  *(_BYTE *)(v1 + 14424) = 0;
  *(_BYTE *)(v1 + 14472) = 0;
  *(_BYTE *)(v1 + 14568) = 0;
  *(_BYTE *)(v1 + 14664) = 0;
  *(_BYTE *)(v1 + 14760) = 0;
  *(_BYTE *)(v1 + 14856) = 0;
  *(_BYTE *)(v1 + 14904) = 0;
  *(_BYTE *)(v1 + 14952) = 0;
  *(_QWORD *)(v1 + 15104) = 0xD00000000000004ALL;
  *(_BYTE *)(v1 + 15144) = 0;
  *(_BYTE *)(v1 + 15192) = 0;
  *(_BYTE *)(v1 + 15240) = 0;
  *(_BYTE *)(v1 + 15288) = 0;
  *(_BYTE *)(v1 + 15384) = 0;
  *(_BYTE *)(v1 + 15528) = 0;
  *(_BYTE *)(v1 + 15672) = 0;
  *(_BYTE *)(v1 + 15720) = 0;
  *(_BYTE *)(v1 + 15768) = 0;
  *(_BYTE *)(v1 + 15864) = 0;
  *(_BYTE *)(v1 + 16200) = 0;
  *(_QWORD *)(v1 + 13968) = &off_100065818;
  *(_QWORD *)(v1 + 16304) = 0xD000000000000075;
  *(_QWORD *)(v1 + 16368) = &off_100066198;
  *(_BYTE *)(v1 + 16440) = 0;
  *(_BYTE *)(v1 + 16488) = 0;
  *(_BYTE *)(v1 + 16632) = 0;
  *(_BYTE *)(v1 + 16680) = 0;
  *(_QWORD *)(v1 + 16832) = 0xD00000000000006CLL;
  *(_QWORD *)(v1 + 16880) = 0xD00000000000006ELL;
  *(_QWORD *)(v1 + 16928) = 0xD000000000000066;
  *(_QWORD *)(v1 + 17032) = 0x80000001000549B0;
  *(_QWORD *)(v1 + 16976) = 0xD00000000000006DLL;
  *(_QWORD *)(v1 + 17008) = 2064;
  *(_BYTE *)(v1 + 17016) = 0;
  *(_QWORD *)(v1 + 17024) = 0xD000000000000058;
  *(_QWORD *)(v1 + 16992) = &off_100066458;
  *(_QWORD *)(v1 + 17000) = 1;
  *(_QWORD *)(v1 + 16984) = 0x8000000100054940;
  *(_BYTE *)(v1 + 16968) = 0;
  *(_QWORD *)(v1 + 16944) = &off_100066418;
  *(_QWORD *)(v1 + 16952) = 1;
  *(_QWORD *)(v1 + 16960) = 16;
  *(_QWORD *)(v1 + 16936) = 0x80000001000548D0;
  *(_QWORD *)(v1 + 11360) = 0xD000000000000061;
  *(_QWORD *)(v1 + 12632) = 12;
  *(_BYTE *)(v1 + 16920) = 0;
  *(_QWORD *)(v1 + 16912) = 2112;
  *(_QWORD *)(v1 + 16904) = 4;
  *(_QWORD *)(v1 + 16888) = 0x8000000100054860;
  *(_QWORD *)(v1 + 16896) = &off_1000663E8;
  *(_QWORD *)(v1 + 16840) = 0x80000001000547F0;
  *(_QWORD *)(v1 + 16856) = 1;
  *(_QWORD *)(v1 + 16864) = 16;
  *(_BYTE *)(v1 + 16872) = 0;
  *(_QWORD *)(v1 + 16848) = &off_1000663A8;
  *(_BYTE *)(v1 + 16824) = 0;
  *(_BYTE *)(v1 + 16776) = 0;
  *(_QWORD *)(v1 + 16808) = 1;
  *(_QWORD *)(v1 + 16816) = 64;
  *(_QWORD *)(v1 + 16784) = 0xD000000000000061;
  *(_QWORD *)(v1 + 16792) = 0x8000000100054780;
  *(_QWORD *)(v1 + 16800) = &off_100066378;
  *(_QWORD *)(v1 + 16752) = &off_100066348;
  *(_QWORD *)(v1 + 16768) = 80;
  *(_QWORD *)(v1 + 8392) = 0x8000000100052BE0;
  *(_QWORD *)(v1 + 16736) = 0xD000000000000084;
  *(_QWORD *)(v1 + 16744) = 0x80000001000546F0;
  *(_QWORD *)(v1 + 16760) = 12;
  *(_QWORD *)(v1 + 16696) = 0x80000001000546F0;
  *(_QWORD *)(v1 + 16712) = 1;
  *(_QWORD *)(v1 + 16720) = 64;
  *(_BYTE *)(v1 + 16728) = 0;
  *(_QWORD *)(v1 + 16704) = &off_100066308;
  *(_QWORD *)(v1 + 16688) = 0xD000000000000084;
  *(_QWORD *)(v1 + 13496) = 12;
  *(_QWORD *)(v1 + 16664) = 12;
  *(_QWORD *)(v1 + 16672) = 80;
  *(_QWORD *)(v1 + 16656) = &off_1000662D8;
  *(_QWORD *)(v1 + 16640) = 0xD000000000000084;
  *(_QWORD *)(v1 + 16648) = 0x8000000100054660;
  *(_QWORD *)(v1 + 16608) = &off_1000662A8;
  *(_QWORD *)(v1 + 16616) = 1;
  *(_QWORD *)(v1 + 16624) = 64;
  *(_QWORD *)(v1 + 16592) = 0xD000000000000084;
  *(_QWORD *)(v1 + 16600) = 0x8000000100054660;
  *(_BYTE *)(v1 + 16584) = 0;
  *(_QWORD *)(v1 + 16576) = 2;
  *(_QWORD *)(v1 + 16552) = 0x80000001000545D0;
  *(_QWORD *)(v1 + 16560) = &off_100066268;
  *(_QWORD *)(v1 + 16568) = 1;
  *(_QWORD *)(v1 + 16528) = 16;
  *(_BYTE *)(v1 + 16536) = 0;
  *(_QWORD *)(v1 + 16544) = 0xD000000000000080;
  *(_QWORD *)(v1 + 16512) = &off_100066238;
  *(_QWORD *)(v1 + 16520) = 4;
  *(_QWORD *)(v1 + 13912) = 0x8000000100053E10;
  *(_QWORD *)(v1 + 16480) = 16;
  *(_QWORD *)(v1 + 16496) = 0xD000000000000061;
  *(_QWORD *)(v1 + 16504) = 0x8000000100054560;
  *(_QWORD *)(v1 + 13960) = 0x8000000100053E10;
  *(_QWORD *)(v1 + 16456) = 0x8000000100054560;
  *(_QWORD *)(v1 + 16464) = &off_1000661F8;
  *(_QWORD *)(v1 + 16472) = 1;
  *(_QWORD *)(v1 + 16432) = 16;
  *(_QWORD *)(v1 + 16448) = 0xD000000000000061;
  *(_QWORD *)(v1 + 16416) = &off_1000661C8;
  *(_QWORD *)(v1 + 16408) = 0x80000001000544E0;
  *(_QWORD *)(v1 + 16424) = 5;
  *(_BYTE *)(v1 + 16392) = 0;
  *(_QWORD *)(v1 + 16376) = 1;
  *(_QWORD *)(v1 + 0x4000) = 16;
  *(_QWORD *)(v1 + 16400) = 0xD000000000000070;
  *(_QWORD *)(v1 + 14008) = 0x8000000100053E10;
  *(_QWORD *)(v1 + 16352) = 0xD000000000000070;
  *(_QWORD *)(v1 + 16360) = 0x80000001000544E0;
  *(_BYTE *)(v1 + 16344) = 0;
  *(_QWORD *)(v1 + 16336) = 16;
  *(_QWORD *)(v1 + 16312) = 0x8000000100054460;
  *(_QWORD *)(v1 + 16320) = &off_100066158;
  *(_QWORD *)(v1 + 16328) = 1;
  *(_QWORD *)(v1 + 14056) = 0x8000000100053E10;
  *(_BYTE *)(v1 + 16296) = 0;
  *(_QWORD *)(v1 + 16288) = 64;
  *(_BYTE *)(v1 + 16248) = 0;
  *(_QWORD *)(v1 + 16272) = &off_100066128;
  *(_QWORD *)(v1 + 16280) = 1;
  *(_QWORD *)(v1 + 16256) = 0xD00000000000004ALL;
  *(_QWORD *)(v1 + 16264) = 0x8000000100054410;
  *(_QWORD *)(v1 + 16232) = 7;
  *(_QWORD *)(v1 + 16240) = 2128;
  *(_QWORD *)(v1 + 16216) = 0x80000001000543C0;
  *(_QWORD *)(v1 + 16224) = &off_1000660F8;
  *(_QWORD *)(v1 + 14064) = &off_100065878;
  *(_QWORD *)(v1 + 16192) = 2128;
  *(_QWORD *)(v1 + 16208) = 0xD000000000000049;
  *(_QWORD *)(v1 + 16168) = 0x8000000100054370;
  *(_QWORD *)(v1 + 16176) = &off_1000660C8;
  *(_QWORD *)(v1 + 16184) = 1;
  *(_BYTE *)(v1 + 16152) = 0;
  *(_QWORD *)(v1 + 16144) = 64;
  *(_QWORD *)(v1 + 16160) = 0xD000000000000049;
  *(_QWORD *)(v1 + 14104) = 0x8000000100053E10;
  *(_BYTE *)(v1 + 16104) = 0;
  *(_QWORD *)(v1 + 16136) = 5;
  *(_QWORD *)(v1 + 16112) = 0xD00000000000004ELL;
  *(_QWORD *)(v1 + 16120) = 0x8000000100054320;
  *(_QWORD *)(v1 + 16128) = &off_100066098;
  *(_QWORD *)(v1 + 16080) = &off_100066068;
  *(_QWORD *)(v1 + 16088) = 1;
  *(_QWORD *)(v1 + 16096) = 64;
  *(_BYTE *)(v1 + 15960) = 0;
  *(_QWORD *)(v1 + 16064) = 0xD00000000000004ELL;
  *(_QWORD *)(v1 + 16072) = 0x8000000100054320;
  *(_QWORD *)(v1 + 14112) = &off_1000658A8;
  *(_QWORD *)(v1 + 16048) = 80;
  *(_BYTE *)(v1 + 16056) = 0;
  *(_QWORD *)(v1 + 16024) = 0x80000001000542C0;
  *(_QWORD *)(v1 + 16032) = &off_100066038;
  *(_QWORD *)(v1 + 16040) = 3;
  *(_QWORD *)(v1 + 16000) = 80;
  *(_BYTE *)(v1 + 16008) = 0;
  *(_QWORD *)(v1 + 16016) = 0xD000000000000054;
  *(_QWORD *)(v1 + 15984) = &off_100066008;
  *(_QWORD *)(v1 + 15992) = 3;
  *(_QWORD *)(v1 + 15968) = 0xD000000000000059;
  *(_QWORD *)(v1 + 15976) = 0x8000000100054260;
  *(_QWORD *)(v1 + 15944) = 6;
  *(_QWORD *)(v1 + 15952) = 2048;
  *(_QWORD *)(v1 + 15928) = 0x8000000100054200;
  *(_QWORD *)(v1 + 15936) = &off_100065FD8;
  *(_QWORD *)(v1 + 15744) = &off_100065F18;
  *(_QWORD *)(v1 + 15904) = 20;
  *(_BYTE *)(v1 + 15912) = 0;
  *(_QWORD *)(v1 + 15920) = 0xD000000000000050;
  *(_QWORD *)(v1 + 15888) = &off_100065FA8;
  *(_QWORD *)(v1 + 15896) = 13;
  *(_QWORD *)(v1 + 15856) = 16;
  *(_QWORD *)(v1 + 15872) = 0xD000000000000056;
  *(_QWORD *)(v1 + 15880) = 0x80000001000541A0;
  *(_QWORD *)(v1 + 15840) = &off_100065F78;
  *(_QWORD *)(v1 + 15824) = 0xD000000000000056;
  *(_QWORD *)(v1 + 15832) = 0x80000001000541A0;
  *(_QWORD *)(v1 + 15848) = 7;
  *(_QWORD *)(v1 + 15784) = 0x80000001000541A0;
  *(_BYTE *)(v1 + 15816) = 0;
  *(_QWORD *)(v1 + 15800) = 5;
  *(_QWORD *)(v1 + 15808) = 16;
  *(_QWORD *)(v1 + 15792) = &off_100065F48;
  *(_QWORD *)(v1 + 15776) = 0xD000000000000056;
  *(_QWORD *)(v1 + 12248) = 15;
  *(_QWORD *)(v1 + 15736) = 0x8000000100054150;
  *(_QWORD *)(v1 + 15752) = 15;
  *(_QWORD *)(v1 + 15760) = 80;
  *(_QWORD *)(v1 + 13160) = 15;
  *(_QWORD *)(v1 + 13592) = 15;
  *(_QWORD *)(v1 + 15704) = 13;
  *(_QWORD *)(v1 + 15712) = 20;
  *(_QWORD *)(v1 + 15728) = 0xD00000000000004BLL;
  *(_QWORD *)(v1 + 14120) = 15;
  *(_QWORD *)(v1 + 15696) = &off_100065EE8;
  *(_QWORD *)(v1 + 15680) = 0xD00000000000004BLL;
  *(_QWORD *)(v1 + 15688) = 0x8000000100054150;
  *(_QWORD *)(v1 + 15648) = &off_100065EB8;
  *(_QWORD *)(v1 + 15640) = 0x8000000100054150;
  *(_QWORD *)(v1 + 15656) = 5;
  *(_QWORD *)(v1 + 15664) = 16;
  *(_BYTE *)(v1 + 15624) = 0;
  *(_QWORD *)(v1 + 15608) = 4;
  *(_QWORD *)(v1 + 15616) = 16;
  *(_QWORD *)(v1 + 15632) = 0xD00000000000004BLL;
  *(_QWORD *)(v1 + 15544) = 0x8000000100054150;
  *(_QWORD *)(v1 + 15592) = 0x8000000100054150;
  *(_QWORD *)(v1 + 15600) = &off_100065E88;
  *(_QWORD *)(v1 + 15584) = 0xD00000000000004BLL;
  *(_BYTE *)(v1 + 15576) = 0;
  *(_QWORD *)(v1 + 15568) = 80;
  *(_QWORD *)(v1 + 15552) = &off_100065E58;
  *(_QWORD *)(v1 + 15560) = 1;
  *(_QWORD *)(v1 + 14152) = 0x8000000100053E60;
  *(_QWORD *)(v1 + 15536) = 0xD00000000000004BLL;
  *(_QWORD *)(v1 + 15504) = &off_100065E28;
  *(_QWORD *)(v1 + 15496) = 0x8000000100054100;
  *(_QWORD *)(v1 + 15512) = 13;
  *(_QWORD *)(v1 + 15520) = 20;
  *(_BYTE *)(v1 + 15480) = 0;
  *(_QWORD *)(v1 + 15464) = 7;
  *(_QWORD *)(v1 + 15472) = 80;
  *(_QWORD *)(v1 + 15488) = 0xD00000000000004ELL;
  *(_QWORD *)(v1 + 15456) = &off_100065DF8;
  *(_QWORD *)(v1 + 15440) = 0xD00000000000004ELL;
  *(_QWORD *)(v1 + 15448) = 0x8000000100054100;
  *(_BYTE *)(v1 + 15432) = 0;
  *(_QWORD *)(v1 + 15416) = 5;
  *(_QWORD *)(v1 + 15424) = 64;
  *(_QWORD *)(v1 + 14208) = &off_100065908;
  *(_QWORD *)(v1 + 15408) = &off_100065DC8;
  *(_QWORD *)(v1 + 15392) = 0xD00000000000004ELL;
  *(_QWORD *)(v1 + 15400) = 0x8000000100054100;
  *(_QWORD *)(v1 + 15360) = &off_100065D98;
  *(_QWORD *)(v1 + 15352) = 0x8000000100054100;
  *(_QWORD *)(v1 + 15368) = 4;
  *(_QWORD *)(v1 + 15376) = 16;
  *(_QWORD *)(v1 + 15304) = 0x8000000100054100;
  *(_BYTE *)(v1 + 15336) = 0;
  *(_QWORD *)(v1 + 15328) = 64;
  *(_QWORD *)(v1 + 15344) = 0xD00000000000004ELL;
  *(_QWORD *)(v1 + 15312) = &off_100065D68;
  *(_QWORD *)(v1 + 15320) = 1;
  *(_QWORD *)(v1 + 14256) = &off_100065938;
  *(_QWORD *)(v1 + 15296) = 0xD00000000000004ELL;
  *(_QWORD *)(v1 + 15264) = &off_100065D38;
  *(_QWORD *)(v1 + 15256) = 0x80000001000540B0;
  *(_QWORD *)(v1 + 15272) = 13;
  *(_QWORD *)(v1 + 15280) = 20;
  *(_QWORD *)(v1 + 15232) = 16;
  *(_QWORD *)(v1 + 15248) = 0xD00000000000004ALL;
  *(_QWORD *)(v1 + 15168) = &off_100065CD8;
  *(_QWORD *)(v1 + 15216) = &off_100065D08;
  *(_QWORD *)(v1 + 15208) = 0x80000001000540B0;
  *(_QWORD *)(v1 + 15224) = 7;
  *(_QWORD *)(v1 + 14200) = 0x8000000100053EC0;
  *(_QWORD *)(v1 + 15176) = 6;
  *(_QWORD *)(v1 + 15184) = 16;
  *(_QWORD *)(v1 + 15200) = 0xD00000000000004ALL;
  *(_QWORD *)(v1 + 14248) = 0x8000000100053EC0;
  *(_QWORD *)(v1 + 15136) = 16;
  *(_QWORD *)(v1 + 15152) = 0xD00000000000004ALL;
  *(_QWORD *)(v1 + 15160) = 0x80000001000540B0;
  *(_QWORD *)(v1 + 14296) = 0x8000000100053EC0;
  *(_QWORD *)(v1 + 15120) = &off_100065CA8;
  *(_QWORD *)(v1 + 15112) = 0x80000001000540B0;
  *(_QWORD *)(v1 + 15128) = 5;
  *(_QWORD *)(v1 + 15072) = &off_100065C78;
  *(_BYTE *)(v1 + 15096) = 0;
  *(_QWORD *)(v1 + 15080) = 2;
  *(_QWORD *)(v1 + 15088) = 16;
  *(_BYTE *)(v1 + 15048) = 0;
  *(_QWORD *)(v1 + 15040) = 64;
  *(_QWORD *)(v1 + 15056) = 0xD00000000000004ALL;
  *(_QWORD *)(v1 + 15064) = 0x80000001000540B0;
  *(_QWORD *)(v1 + 15016) = 0x80000001000540B0;
  *(_QWORD *)(v1 + 15024) = &off_100065C38;
  *(_QWORD *)(v1 + 15032) = 1;
  *(_BYTE *)(v1 + 15000) = 0;
  *(_QWORD *)(v1 + 14992) = 4;
  *(_QWORD *)(v1 + 15008) = 0xD00000000000004ALL;
  *(_QWORD *)(v1 + 14896) = 18;
  *(_QWORD *)(v1 + 14976) = &off_100065C08;
  *(_QWORD *)(v1 + 14984) = 1;
  *(_QWORD *)(v1 + 14968) = 0x8000000100054060;
  *(_QWORD *)(v1 + 14960) = 0xD00000000000004FLL;
  *(_QWORD *)(v1 + 14928) = &off_100065BD8;
  *(_QWORD *)(v1 + 14936) = 5;
  *(_QWORD *)(v1 + 14944) = 16;
  *(_QWORD *)(v1 + 14888) = 2;
  *(_QWORD *)(v1 + 14912) = 0xD000000000000050;
  *(_QWORD *)(v1 + 14920) = 0x8000000100054000;
  *(_QWORD *)(v1 + 14872) = 0x8000000100054000;
  *(_QWORD *)(v1 + 14880) = &off_100065BA8;
  *(_QWORD *)(v1 + 11144) = 14;
  *(_QWORD *)(v1 + 12920) = 14;
  *(_QWORD *)(v1 + 13112) = 14;
  *(_QWORD *)(v1 + 14864) = 0xD000000000000050;
  *(_QWORD *)(v1 + 14840) = 14;
  *(_QWORD *)(v1 + 14848) = 2128;
  *(_QWORD *)(v1 + 14800) = 2068;
  *(_QWORD *)(v1 + 14816) = 0xD00000000000004FLL;
  *(_QWORD *)(v1 + 14824) = 0x8000000100053FB0;
  *(_QWORD *)(v1 + 14832) = &off_100065B78;
  *(_BYTE *)(v1 + 14808) = 0;
  *(_QWORD *)(v1 + 14792) = 13;
  *(_QWORD *)(v1 + 14304) = &off_100065968;
  *(_QWORD *)(v1 + 14768) = 0xD00000000000004FLL;
  *(_QWORD *)(v1 + 14776) = 0x8000000100053FB0;
  *(_QWORD *)(v1 + 14784) = &off_100065B48;
  *(_QWORD *)(v1 + 14736) = &off_100065B18;
  *(_QWORD *)(v1 + 14744) = 7;
  *(_QWORD *)(v1 + 14752) = 2064;
  *(_BYTE *)(v1 + 14712) = 0;
  *(_QWORD *)(v1 + 14720) = 0xD00000000000004FLL;
  *(_QWORD *)(v1 + 14728) = 0x8000000100053FB0;
  *(_QWORD *)(v1 + 14352) = &off_100065998;
  *(_QWORD *)(v1 + 14688) = &off_100065AE8;
  *(_QWORD *)(v1 + 14696) = 1;
  *(_QWORD *)(v1 + 14704) = 16;
  *(_QWORD *)(v1 + 14672) = 0xD00000000000004FLL;
  *(_QWORD *)(v1 + 14680) = 0x8000000100053FB0;
  *(_QWORD *)(v1 + 14632) = 0x8000000100053F60;
  *(_QWORD *)(v1 + 14640) = &off_100065AB8;
  *(_QWORD *)(v1 + 14648) = 13;
  *(_QWORD *)(v1 + 14656) = 20;
  *(_QWORD *)(v1 + 14600) = 4;
  *(_QWORD *)(v1 + 14608) = 16;
  *(_BYTE *)(v1 + 14616) = 0;
  *(_QWORD *)(v1 + 14624) = 0xD00000000000004ELL;
  *(_QWORD *)(v1 + 14592) = &off_100065A88;
  *(_QWORD *)(v1 + 14488) = 0x8000000100053F60;
  *(_QWORD *)(v1 + 14576) = 0xD00000000000004ELL;
  *(_QWORD *)(v1 + 14584) = 0x8000000100053F60;
  *(_QWORD *)(v1 + 14536) = 0x8000000100053F60;
  *(_QWORD *)(v1 + 14544) = &off_100065A58;
  *(_QWORD *)(v1 + 14552) = 1;
  *(_QWORD *)(v1 + 14560) = 80;
  *(_QWORD *)(v1 + 14504) = 1;
  *(_QWORD *)(v1 + 14512) = 64;
  *(_BYTE *)(v1 + 14520) = 0;
  *(_QWORD *)(v1 + 14528) = 0xD00000000000004ELL;
  *(_QWORD *)(v1 + 14496) = &off_100065A28;
  *(_QWORD *)(v1 + 14336) = 0xD00000000000004DLL;
  *(_QWORD *)(v1 + 14384) = 0xD00000000000004DLL;
  *(_QWORD *)(v1 + 14480) = 0xD00000000000004ELL;
  *(_QWORD *)(v1 + 14432) = 0xD00000000000004DLL;
  *(_QWORD *)(v1 + 14448) = &off_1000659F8;
  *(_QWORD *)(v1 + 14456) = 13;
  *(_QWORD *)(v1 + 14464) = 20;
  *(_QWORD *)(v1 + 14344) = 0x8000000100053F10;
  *(_QWORD *)(v1 + 14440) = 0x8000000100053F10;
  *(_QWORD *)(v1 + 14392) = 0x8000000100053F10;
  *(_QWORD *)(v1 + 14400) = &off_1000659C8;
  *(_QWORD *)(v1 + 14408) = 6;
  *(_QWORD *)(v1 + 14416) = 16;
  *(_QWORD *)(v1 + 12688) = 20;
  *(_QWORD *)(v1 + 12880) = 20;
  *(_QWORD *)(v1 + 13072) = 20;
  *(_QWORD *)(v1 + 13312) = 20;
  *(_QWORD *)(v1 + 14360) = 1;
  *(_QWORD *)(v1 + 14368) = 64;
  *(_QWORD *)(v1 + 13552) = 20;
  *(_QWORD *)(v1 + 13792) = 20;
  *(_QWORD *)(v1 + 13888) = 20;
  *(_QWORD *)(v1 + 14080) = 20;
  *(_QWORD *)(v1 + 14312) = 13;
  *(_QWORD *)(v1 + 14320) = 20;
  *(_BYTE *)(v1 + 14280) = 0;
  *(_QWORD *)(v1 + 14264) = 6;
  *(_QWORD *)(v1 + 14272) = 80;
  *(_QWORD *)(v1 + 14288) = 0xD00000000000004BLL;
  *(_QWORD *)(v1 + 12752) = 0xD00000000000004BLL;
  *(_QWORD *)(v1 + 12800) = 0xD00000000000004BLL;
  *(_QWORD *)(v1 + 12848) = 0xD00000000000004BLL;
  *(_QWORD *)(v1 + 14216) = 5;
  *(_QWORD *)(v1 + 14224) = 16;
  *(_QWORD *)(v1 + 14240) = 0xD00000000000004BLL;
  *(_QWORD *)(v1 + 12896) = 0xD00000000000004BLL;
  *(_QWORD *)(v1 + 13808) = 0xD00000000000004BLL;
  *(_QWORD *)(v1 + 13856) = 0xD00000000000004BLL;
  *(_QWORD *)(v1 + 14168) = 1;
  *(_QWORD *)(v1 + 14176) = 4;
  *(_QWORD *)(v1 + 14192) = 0xD00000000000004BLL;
  *(_QWORD *)(v1 + 14160) = &off_1000658D8;
  *(_QWORD *)(v1 + 12680) = 13;
  *(_QWORD *)(v1 + 14128) = 80;
  *(_QWORD *)(v1 + 14144) = 0xD000000000000054;
  *(_QWORD *)(v1 + 12872) = 13;
  *(_QWORD *)(v1 + 13064) = 13;
  *(_QWORD *)(v1 + 13304) = 13;
  *(_QWORD *)(v1 + 13352) = 13;
  *(_QWORD *)(v1 + 13544) = 13;
  *(_QWORD *)(v1 + 14096) = 0xD00000000000004ALL;
  *(_QWORD *)(v1 + 13784) = 13;
  *(_QWORD *)(v1 + 13880) = 13;
  *(_QWORD *)(v1 + 14072) = 13;
  *(_QWORD *)(v1 + 14048) = 0xD00000000000004ALL;
  *(_QWORD *)(v1 + 14016) = &off_100065848;
  *(_QWORD *)(v1 + 12944) = 0xD00000000000004ALL;
  *(_QWORD *)(v1 + 12992) = 0xD00000000000004ALL;
  *(_QWORD *)(v1 + 14000) = 0xD00000000000004ALL;
  *(_QWORD *)(v1 + 14024) = 5;
  *(_QWORD *)(v1 + 14032) = 16;
  *(_QWORD *)(v1 + 13040) = 0xD00000000000004ALL;
  *(_QWORD *)(v1 + 13088) = 0xD00000000000004ALL;
  *(_QWORD *)(v1 + 13136) = 0xD00000000000004ALL;
  *(_QWORD *)(v1 + 13904) = 0xD00000000000004ALL;
  *(_QWORD *)(v1 + 13976) = 4;
  *(_QWORD *)(v1 + 13984) = 16;
  *(_QWORD *)(v1 + 13928) = 1;
  *(_QWORD *)(v1 + 13936) = 64;
  *(_QWORD *)(v1 + 13952) = 0xD00000000000004ALL;
  *(_QWORD *)(v1 + 17040) = &off_100066498;
  *(_BYTE *)(v1 + 17064) = 0;
  *(_QWORD *)(v1 + 17088) = &off_1000664D8;
  *(_BYTE *)(v1 + 17112) = 0;
  *(_QWORD *)(v1 + 13832) = 4;
  *(_QWORD *)(v1 + 13840) = 80;
  *(_QWORD *)(v1 + 17080) = 0x80000001000549B0;
  *(_QWORD *)(v1 + 17128) = 0x80000001000549B0;
  *(_BYTE *)(v1 + 17160) = 0;
  *(_QWORD *)(v1 + 17136) = &off_100066508;
  *(_QWORD *)(v1 + 17168) = 0xD00000000000006FLL;
  *(_QWORD *)(v1 + 17176) = 0x8000000100054A10;
  *(_QWORD *)(v1 + 17184) = &off_100066538;
  *(_BYTE *)(v1 + 17208) = 0;
  *(_QWORD *)(v1 + 17232) = &off_100066568;
  *(_BYTE *)(v1 + 17256) = 0;
  *(_QWORD *)(v1 + 13736) = 6;
  *(_QWORD *)(v1 + 13744) = 80;
  *(_QWORD *)(v1 + 13760) = 0xD00000000000004ELL;
  *(_QWORD *)(v1 + 17216) = 0xD000000000000059;
  *(_QWORD *)(v1 + 17264) = 0xD000000000000059;
  *(_QWORD *)(v1 + 17224) = 0x8000000100054A80;
  *(_QWORD *)(v1 + 17272) = 0x8000000100054A80;
  *(_QWORD *)(v1 + 17280) = &off_1000665C8;
  *(_BYTE *)(v1 + 17304) = 0;
  *(_QWORD *)(v1 + 13400) = 1;
  *(_QWORD *)(v1 + 13696) = 16;
  *(_QWORD *)(v1 + 13712) = 0xD00000000000004ELL;
  *(_QWORD *)(v1 + 13408) = 64;
  *(_QWORD *)(v1 + 13424) = 0xD000000000000051;
  *(_QWORD *)(v1 + 13448) = 4;
  *(_QWORD *)(v1 + 13648) = 64;
  *(_QWORD *)(v1 + 13664) = 0xD00000000000004ELL;
  *(_QWORD *)(v1 + 13688) = 5;
  *(_QWORD *)(v1 + 13456) = 16;
  *(_QWORD *)(v1 + 13472) = 0xD000000000000051;
  *(_QWORD *)(v1 + 13504) = 80;
  *(_QWORD *)(v1 + 13600) = 80;
  *(_QWORD *)(v1 + 13616) = 0xD00000000000004FLL;
  *(_QWORD *)(v1 + 13640) = 5;
  *(_QWORD *)(v1 + 17072) = 0xD000000000000058;
  *(_QWORD *)(v1 + 17120) = 0xD000000000000058;
  *(_QWORD *)(v1 + 17312) = 0xD000000000000058;
  *(_QWORD *)(v1 + 17320) = 0x8000000100054AE0;
  *(_QWORD *)(v1 + 17328) = &off_1000665F8;
  *(_BYTE *)(v1 + 17352) = 0;
  *(_QWORD *)(v1 + 17368) = 0x8000000100054B40;
  *(_BYTE *)(v1 + 17400) = 0;
  *(_QWORD *)(v1 + 17376) = &off_100066628;
  *(_BYTE *)(v1 + 17448) = 0;
  *(_QWORD *)(v1 + 17424) = &off_100066658;
  *(_BYTE *)(v1 + 17496) = 0;
  *(_QWORD *)(v1 + 17472) = &off_100066688;
  *(_BYTE *)(v1 + 17544) = 0;
  *(_QWORD *)(v1 + 17520) = &off_1000666B8;
  *(_QWORD *)(v1 + 17416) = 0x8000000100054BA0;
  *(_QWORD *)(v1 + 17464) = 0x8000000100054BA0;
  *(_QWORD *)(v1 + 17512) = 0x8000000100054BA0;
  *(_QWORD *)(v1 + 17560) = 0x8000000100054BA0;
  *(_QWORD *)(v1 + 17568) = &off_1000666E8;
  *(_BYTE *)(v1 + 17592) = 0;
  *(_QWORD *)(v1 + 17616) = &off_100066718;
  *(_BYTE *)(v1 + 17640) = 0;
  *(_QWORD *)(v1 + 17600) = 0xD00000000000005ELL;
  *(_QWORD *)(v1 + 17648) = 0xD00000000000005ELL;
  *(_QWORD *)(v1 + 17608) = 0x8000000100054BF0;
  *(_QWORD *)(v1 + 17656) = 0x8000000100054BF0;
  *(_QWORD *)(v1 + 17664) = &off_100066748;
  *(_QWORD *)(v1 + 12728) = 11;
  *(_QWORD *)(v1 + 13376) = 0xD000000000000051;
  *(_QWORD *)(v1 + 17672) = 11;
  *(_BYTE *)(v1 + 17688) = 0;
  *(_QWORD *)(v1 + 11864) = 4;
  *(_QWORD *)(v1 + 11912) = 4;
  *(_QWORD *)(v1 + 13360) = 80;
  *(_QWORD *)(v1 + 11960) = 4;
  *(_QWORD *)(v1 + 12152) = 4;
  *(_QWORD *)(v1 + 12392) = 4;
  *(_QWORD *)(v1 + 12536) = 4;
  *(_QWORD *)(v1 + 12968) = 1;
  *(_QWORD *)(v1 + 12976) = 64;
  *(_QWORD *)(v1 + 13016) = 5;
  *(_QWORD *)(v1 + 13024) = 16;
  *(_QWORD *)(v1 + 13120) = 80;
  *(_QWORD *)(v1 + 13208) = 2;
  *(_QWORD *)(v1 + 13256) = 5;
  *(_QWORD *)(v1 + 13264) = 16;
  *(_QWORD *)(v1 + 13216) = 16;
  *(_QWORD *)(v1 + 17696) = 0xD000000000000054;
  *(_QWORD *)(v1 + 17704) = 0x8000000100054C50;
  *(_BYTE *)(v1 + 17736) = 0;
  *(_QWORD *)(v1 + 17712) = &off_100066778;
  *(_BYTE *)(v1 + 17784) = 0;
  *(_QWORD *)(v1 + 17760) = &off_1000667A8;
  *(_BYTE *)(v1 + 17832) = 0;
  *(_QWORD *)(v1 + 17808) = &off_1000667E8;
  *(_BYTE *)(v1 + 17880) = 0;
  *(_QWORD *)(v1 + 17856) = &off_100066818;
  *(_QWORD *)(v1 + 17752) = 0x8000000100054CB0;
  *(_QWORD *)(v1 + 17800) = 0x8000000100054CB0;
  *(_QWORD *)(v1 + 17848) = 0x8000000100054CB0;
  *(_QWORD *)(v1 + 17896) = 0x8000000100054CB0;
  *(_QWORD *)(v1 + 17904) = &off_100066848;
  *(_BYTE *)(v1 + 17928) = 0;
  *(_QWORD *)(v1 + 17952) = &off_100066888;
  *(_BYTE *)(v1 + 17976) = 0;
  *(_QWORD *)(v1 + 17944) = 0x8000000100054D10;
  *(_QWORD *)(v1 + 17992) = 0x8000000100054D10;
  *(_QWORD *)(v1 + 18000) = &off_1000668B8;
  *(_BYTE *)(v1 + 18024) = 0;
  *(_QWORD *)(v1 + 18048) = &off_1000668E8;
  *(_BYTE *)(v1 + 18072) = 0;
  *(_QWORD *)(v1 + 18040) = 0x8000000100054D60;
  *(_QWORD *)(v1 + 18064) = 4;
  *(_QWORD *)(v1 + 18088) = 0x8000000100054D60;
  *(_QWORD *)(v1 + 18096) = &off_100066918;
  *(_BYTE *)(v1 + 18120) = 0;
  *(_QWORD *)(v1 + 18112) = 4;
  *(_BYTE *)(v1 + 18168) = 0;
  *(_QWORD *)(v1 + 18144) = &off_100066958;
  *(_BYTE *)(v1 + 18216) = 0;
  *(_QWORD *)(v1 + 18192) = &off_100066988;
  *(_BYTE *)(v1 + 18264) = 0;
  *(_QWORD *)(v1 + 18240) = &off_1000669B8;
  *(_BYTE *)(v1 + 18312) = 0;
  *(_QWORD *)(v1 + 18288) = &off_1000669E8;
  *(_QWORD *)(v1 + 18336) = &off_100066A18;
  *(_BYTE *)(v1 + 18360) = 0;
  *(_QWORD *)(v1 + 12928) = 80;
  *(_QWORD *)(v1 + 18352) = 2048;
  *(_BYTE *)(v1 + 18408) = 0;
  *(_QWORD *)(v1 + 18384) = &off_100066A48;
  *(_QWORD *)(v1 + 12736) = 80;
  *(_QWORD *)(v1 + 12776) = 1;
  *(_QWORD *)(v1 + 12784) = 64;
  *(_QWORD *)(v1 + 12824) = 5;
  *(_QWORD *)(v1 + 12832) = 16;
  *(_QWORD *)(v1 + 18128) = 0xD00000000000004FLL;
  *(_QWORD *)(v1 + 18176) = 0xD00000000000004FLL;
  *(_QWORD *)(v1 + 18224) = 0xD00000000000004FLL;
  *(_QWORD *)(v1 + 18272) = 0xD00000000000004FLL;
  *(_QWORD *)(v1 + 18320) = 0xD00000000000004FLL;
  *(_QWORD *)(v1 + 18368) = 0xD00000000000004FLL;
  *(_QWORD *)(v1 + 18416) = 0xD00000000000004FLL;
  *(_QWORD *)(v1 + 18136) = 0x8000000100054DC0;
  *(_QWORD *)(v1 + 18184) = 0x8000000100054DC0;
  *(_QWORD *)(v1 + 18232) = 0x8000000100054DC0;
  *(_QWORD *)(v1 + 18280) = 0x8000000100054DC0;
  *(_QWORD *)(v1 + 18328) = 0x8000000100054DC0;
  *(_QWORD *)(v1 + 18376) = 0x8000000100054DC0;
  *(_QWORD *)(v1 + 18424) = 0x8000000100054DC0;
  *(_QWORD *)(v1 + 18432) = &off_100066A78;
  *(_QWORD *)(v1 + 11336) = 7;
  *(_QWORD *)(v1 + 12344) = 7;
  *(_QWORD *)(v1 + 12704) = 0xD00000000000004ELL;
  *(_QWORD *)(v1 + 12584) = 7;
  *(_QWORD *)(v1 + 17144) = 7;
  *(_QWORD *)(v1 + 17288) = 7;
  *(_QWORD *)(v1 + 17912) = 7;
  *(_QWORD *)(v1 + 18440) = 7;
  *(_BYTE *)(v1 + 18456) = 0;
  *(_QWORD *)(v1 + 11152) = 2128;
  *(_QWORD *)(v1 + 11344) = 2128;
  *(_QWORD *)(v1 + 12592) = 16;
  *(_QWORD *)(v1 + 12640) = 80;
  *(_QWORD *)(v1 + 18448) = 2128;
  *(_QWORD *)(v1 + 18464) = 0xD000000000000055;
  *(_QWORD *)(v1 + 18472) = 0x8000000100054E10;
  *(_QWORD *)(v1 + 18480) = &off_100066AA8;
  *(_QWORD *)(v1 + 18488) = 10;
  *(_BYTE *)(v1 + 18504) = 0;
  *(_QWORD *)(v1 + 18528) = &off_100066AD8;
  *(_BYTE *)(v1 + 18552) = 0;
  *(_QWORD *)(v1 + 12448) = 64;
  *(_QWORD *)(v1 + 12544) = 16;
  *(_QWORD *)(v1 + 12488) = 1;
  *(_QWORD *)(v1 + 12496) = 64;
  *(_QWORD *)(v1 + 17744) = 0xD000000000000050;
  *(_QWORD *)(v1 + 17792) = 0xD000000000000050;
  *(_QWORD *)(v1 + 17840) = 0xD000000000000050;
  *(_QWORD *)(v1 + 17888) = 0xD000000000000050;
  *(_QWORD *)(v1 + 18512) = 0xD000000000000050;
  *(_QWORD *)(v1 + 18560) = 0xD000000000000050;
  *(_QWORD *)(v1 + 18520) = 0x8000000100054E70;
  *(_QWORD *)(v1 + 18568) = 0x8000000100054E70;
  *(_QWORD *)(v1 + 18576) = &off_100066B18;
  *(_BYTE *)(v1 + 18600) = 0;
  *(_QWORD *)(v1 + 18616) = 0x8000000100054ED0;
  *(_QWORD *)(v1 + 18624) = &off_100066B48;
  *(_QWORD *)(v1 + 12400) = 64;
  *(_QWORD *)(v1 + 12440) = 2;
  *(_QWORD *)(v1 + 11528) = 2;
  *(_QWORD *)(v1 + 12008) = 2;
  *(_QWORD *)(v1 + 12296) = 2;
  *(_QWORD *)(v1 + 12352) = 2064;
  *(_QWORD *)(v1 + 17720) = 2;
  *(_QWORD *)(v1 + 17816) = 2;
  *(_QWORD *)(v1 + 17960) = 2;
  *(_QWORD *)(v1 + 18104) = 2;
  *(_QWORD *)(v1 + 18584) = 2;
  *(_QWORD *)(v1 + 18632) = 2;
  *(_QWORD *)(v1 + 11200) = 64;
  *(_QWORD *)(v1 + 12304) = 16;
  *(_QWORD *)(v1 + 11392) = 64;
  *(_QWORD *)(v1 + 11440) = 64;
  *(_QWORD *)(v1 + 11488) = 64;
  *(_QWORD *)(v1 + 11680) = 64;
  *(_QWORD *)(v1 + 11728) = 64;
  *(_QWORD *)(v1 + 11776) = 64;
  *(_QWORD *)(v1 + 11824) = 64;
  *(_QWORD *)(v1 + 11872) = 64;
  *(_QWORD *)(v1 + 11920) = 64;
  *(_QWORD *)(v1 + 12064) = 64;
  *(_QWORD *)(v1 + 12104) = 3;
  *(_QWORD *)(v1 + 12208) = 64;
  *(_QWORD *)(v1 + 12112) = 64;
  *(_QWORD *)(v1 + 12160) = 64;
  *(_QWORD *)(v1 + 12200) = 1;
  *(_QWORD *)(v1 + 17200) = 64;
  *(_QWORD *)(v1 + 17344) = 64;
  *(_QWORD *)(v1 + 17440) = 64;
  *(_QWORD *)(v1 + 17632) = 64;
  *(_QWORD *)(v1 + 18208) = 64;
  *(_QWORD *)(v1 + 18640) = 64;
  *(_BYTE *)(v1 + 18648) = 0;
  *(_QWORD *)(v1 + 18672) = &off_100066B78;
  *(_BYTE *)(v1 + 18696) = 0;
  *(_QWORD *)(v1 + 18720) = &off_100066BA8;
  *(_BYTE *)(v1 + 18744) = 0;
  *(_QWORD *)(v1 + 11216) = 0xD00000000000005BLL;
  *(_QWORD *)(v1 + 12056) = 3;
  *(_QWORD *)(v1 + 18656) = 0xD00000000000005BLL;
  *(_QWORD *)(v1 + 18704) = 0xD00000000000005BLL;
  *(_QWORD *)(v1 + 18752) = 0xD00000000000005BLL;
  *(_QWORD *)(v1 + 18664) = 0x8000000100054F30;
  *(_QWORD *)(v1 + 18712) = 0x8000000100054F30;
  *(_QWORD *)(v1 + 18760) = 0x8000000100054F30;
  *(_QWORD *)(v1 + 18768) = &off_100066BD8;
  *(_QWORD *)(v1 + 11968) = 16;
  *(_QWORD *)(v1 + 12016) = 16;
  *(_QWORD *)(v1 + 17408) = 0xD00000000000004ELL;
  *(_QWORD *)(v1 + 17456) = 0xD00000000000004ELL;
  *(_QWORD *)(v1 + 17504) = 0xD00000000000004ELL;
  *(_QWORD *)(v1 + 17552) = 0xD00000000000004ELL;
  *(_QWORD *)(v1 + 17936) = 0xD00000000000004ELL;
  *(_QWORD *)(v1 + 17984) = 0xD00000000000004ELL;
  *(_QWORD *)(v1 + 18776) = 6;
  *(_BYTE *)(v1 + 18792) = 0;
  *(_QWORD *)(v1 + 18800) = 0xD00000000000004ELL;
  *(_QWORD *)(v1 + 18808) = 0x8000000100054F90;
  *(_QWORD *)(v1 + 18816) = &off_100066C08;
  *(_BYTE *)(v1 + 18840) = 0;
  *(_QWORD *)(v1 + 18864) = &off_100066C38;
  *(_BYTE *)(v1 + 18888) = 0;
  *(_QWORD *)(v1 + 18608) = 0xD000000000000052;
  *(_QWORD *)(v1 + 18848) = 0xD000000000000052;
  *(_QWORD *)(v1 + 18896) = 0xD000000000000052;
  *(_QWORD *)(v1 + 18856) = 0x8000000100054FE0;
  *(_QWORD *)(v1 + 18904) = 0x8000000100054FE0;
  *(_QWORD *)(v1 + 18912) = &off_100066C68;
  *(_QWORD *)(v1 + 11248) = 80;
  *(_QWORD *)(v1 + 11576) = 3;
  *(_QWORD *)(v1 + 11768) = 1;
  *(_QWORD *)(v1 + 11816) = 1;
  *(_QWORD *)(v1 + 17488) = 80;
  *(_QWORD *)(v1 + 17528) = 3;
  *(_QWORD *)(v1 + 17536) = 80;
  *(_QWORD *)(v1 + 17680) = 80;
  *(_QWORD *)(v1 + 17776) = 80;
  *(_QWORD *)(v1 + 17920) = 80;
  *(_QWORD *)(v1 + 18296) = 3;
  *(_QWORD *)(v1 + 18344) = 3;
  *(_QWORD *)(v1 + 18496) = 80;
  *(_QWORD *)(v1 + 18920) = 3;
  *(_BYTE *)(v1 + 18936) = 0;
  *(_QWORD *)(v1 + 18928) = 80;
  *(_QWORD *)(v1 + 18960) = &off_100066C98;
  *(_BYTE *)(v1 + 18984) = 0;
  *(_QWORD *)(v1 + 11720) = 1;
  *(_QWORD *)(v1 + 11648) = 0xD000000000000056;
  *(_QWORD *)(v1 + 11672) = 1;
  *(_QWORD *)(v1 + 17360) = 0xD000000000000051;
  *(_QWORD *)(v1 + 18032) = 0xD000000000000051;
  *(_QWORD *)(v1 + 18080) = 0xD000000000000051;
  *(_QWORD *)(v1 + 18944) = 0xD000000000000051;
  *(_QWORD *)(v1 + 18992) = 0xD000000000000051;
  *(_QWORD *)(v1 + 18952) = 0x8000000100055040;
  *(_QWORD *)(v1 + 19000) = 0x8000000100055040;
  *(_QWORD *)(v1 + 19008) = &off_100066CD8;
  *(_QWORD *)(v1 + 11624) = 5;
  *(_QWORD *)(v1 + 11632) = 2064;
  *(_QWORD *)(v1 + 11480) = 5;
  *(_QWORD *)(v1 + 11536) = 2064;
  *(_QWORD *)(v1 + 11584) = 2064;
  *(_QWORD *)(v1 + 17096) = 5;
  *(_QWORD *)(v1 + 17192) = 5;
  *(_QWORD *)(v1 + 17336) = 5;
  *(_QWORD *)(v1 + 17576) = 5;
  *(_QWORD *)(v1 + 17864) = 5;
  *(_QWORD *)(v1 + 18008) = 5;
  *(_QWORD *)(v1 + 18392) = 5;
  *(_QWORD *)(v1 + 18728) = 5;
  *(_QWORD *)(v1 + 18824) = 5;
  *(_QWORD *)(v1 + 19016) = 5;
  *(_QWORD *)(v1 + 11296) = 16;
  *(_QWORD *)(v1 + 11384) = 1;
  *(_QWORD *)(v1 + 11432) = 1;
  *(_QWORD *)(v1 + 17056) = 16;
  *(_QWORD *)(v1 + 17104) = 16;
  *(_QWORD *)(v1 + 17152) = 16;
  *(_QWORD *)(v1 + 17248) = 16;
  *(_QWORD *)(v1 + 17296) = 16;
  *(_QWORD *)(v1 + 17392) = 16;
  *(_QWORD *)(v1 + 17728) = 16;
  *(_QWORD *)(v1 + 17824) = 16;
  *(_QWORD *)(v1 + 17872) = 16;
  *(_QWORD *)(v1 + 18160) = 16;
  *(_QWORD *)(v1 + 18304) = 16;
  *(_QWORD *)(v1 + 18544) = 16;
  *(_QWORD *)(v1 + 18592) = 16;
  *(_QWORD *)(v1 + 18688) = 16;
  *(_QWORD *)(v1 + 18736) = 16;
  *(_QWORD *)(v1 + 18784) = 16;
  *(_QWORD *)(v1 + 18880) = 16;
  *(_QWORD *)(v1 + 18976) = 16;
  *(_QWORD *)(v1 + 19024) = 16;
  *(_BYTE *)(v1 + 19032) = 0;
  *(_QWORD *)(v1 + 19040) = 0xD000000000000056;
  *(_QWORD *)(v1 + 19048) = 0x80000001000550A0;
  *(_QWORD *)(v1 + 19056) = &off_100066D08;
  *(_QWORD *)(v1 + 11288) = 1;
  *(_QWORD *)(v1 + 11192) = 1;
  *(_QWORD *)(v1 + 11240) = 1;
  *(_QWORD *)(v1 + 17048) = 1;
  *(_QWORD *)(v1 + 17240) = 1;
  *(_QWORD *)(v1 + 17384) = 1;
  *(_QWORD *)(v1 + 17432) = 1;
  *(_QWORD *)(v1 + 17480) = 1;
  *(_QWORD *)(v1 + 17624) = 1;
  *(_QWORD *)(v1 + 17768) = 1;
  *(_QWORD *)(v1 + 18056) = 1;
  *(_QWORD *)(v1 + 18152) = 1;
  *(_QWORD *)(v1 + 18200) = 1;
  *(_QWORD *)(v1 + 18248) = 1;
  *(_QWORD *)(v1 + 18536) = 1;
  *(_QWORD *)(v1 + 18680) = 1;
  *(_QWORD *)(v1 + 18872) = 1;
  *(_QWORD *)(v1 + 18968) = 1;
  *(_QWORD *)(v1 + 19064) = 1;
  *(_QWORD *)(v1 + 17584) = 2064;
  *(_QWORD *)(v1 + 17968) = 2064;
  *(_QWORD *)(v1 + 18016) = 2064;
  *(_QWORD *)(v1 + 18256) = 2064;
  *(_QWORD *)(v1 + 18400) = 2064;
  *(_QWORD *)(v1 + 18832) = 2064;
  *(_QWORD *)(v1 + 19072) = 2064;
  *(_BYTE *)(v1 + 19080) = 0;
  qword_100071B50 = v1;
  return result;
}

uint64_t sub_100040D68(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100040D98 + 4 * byte_10004DE40[a1]))(0x726568746FLL, 0xE500000000000000);
}

uint64_t sub_100040D98()
{
  return 0x417373616C63;
}

uint64_t sub_100040DAC()
{
  return 0x427373616C63;
}

unint64_t sub_100040DC0()
{
  return 0xD000000000000011;
}

uint64_t sub_100040F08()
{
  return 0x6365746F72506F6ELL;
}

uint64_t sub_100040F28(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100040F54 + 4 * byte_10004DE53[a1]))(1684104562, 0xE400000000000000);
}

uint64_t sub_100040F54()
{
  return 0x6574697277;
}

uint64_t sub_100040F68()
{
  return 0x657461657263;
}

unint64_t sub_100040F7C()
{
  return 0xD000000000000015;
}

uint64_t sub_100040F98()
{
  return 0x6E776F6E6B6E75;
}

void sub_100040FB0(char *a1)
{
  sub_10002A00C(*a1);
}

void sub_100040FBC()
{
  char *v0;

  sub_100028288(*v0);
}

void sub_100040FC4()
{
  __asm { BR              X10 }
}

uint64_t sub_100040FF8(uint64_t a1)
{
  ((void (*)(uint64_t, uint64_t, unint64_t))String.hash(into:))(a1, 0x6574697277, 0xE500000000000000);
  return swift_bridgeObjectRelease(0xE500000000000000);
}

void sub_100041068(uint64_t a1)
{
  char *v1;

  sub_10002A184(a1, *v1);
}

unint64_t sub_100041070@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100046E90(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10004109C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1000410C4 + 4 * byte_10004DE5D[*v0]))();
}

void sub_1000410C4(_QWORD *a1@<X8>)
{
  *a1 = 0x6574697277;
  a1[1] = 0xE500000000000000;
}

void sub_1000410DC(_QWORD *a1@<X8>)
{
  *a1 = 0x657461657263;
  a1[1] = 0xE600000000000000;
}

void sub_1000410F4(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000015;
  a1[1] = 0x800000010004ED40;
}

void sub_100041114(_QWORD *a1@<X8>)
{
  *a1 = 0x6E776F6E6B6E75;
  a1[1] = 0xE700000000000000;
}

uint64_t sub_100041130(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100048FD0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10004118C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100048FD0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

BOOL sub_1000411D8(_QWORD *a1, _QWORD *a2)
{
  return *a1 < *a2;
}

BOOL sub_1000411EC(_QWORD *a1, _QWORD *a2)
{
  return *a2 >= *a1;
}

BOOL sub_100041200(_QWORD *a1, _QWORD *a2)
{
  return *a1 >= *a2;
}

BOOL sub_100041214(_QWORD *a1, _QWORD *a2)
{
  return *a2 < *a1;
}

BOOL sub_100041228(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

_QWORD *sub_10004123C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100041248(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000486CC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000412A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000486CC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_1000412F4()
{
  Swift::UInt64 *v0;

  Hasher._combine(_:)(*v0);
}

void sub_100041320(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_100041328@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_10004133C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *sub_100041350@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_100041364(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_100041394@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_1000413C0@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_1000413E4(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_1000413F8(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *sub_10004140C(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_100041420@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_100041434(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_100041448(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_10004145C(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_100041470()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t sub_100041480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

_QWORD *sub_100041498(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

_QWORD *sub_1000414AC@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_1000414BC(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_1000414C8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_1000473E4(a1);
  result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

uint64_t sub_100041504(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = sub_100040D68(*a1);
  v5 = v4;
  v6 = sub_100040D68(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_10004158C()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6, 0);
  v2 = sub_100040D68(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1000415EC(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_100040D68(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10004162C(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  v3 = sub_100040D68(v2);
  v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_100041688@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100046ED8(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_1000416B4@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100040D68(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000416DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100049014();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100041738(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100049014();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100041784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000487A4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000417E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000487A4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

Swift::Int sub_10004182C()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_100041870(uint64_t a1)
{
  Swift::UInt64 *v1;
  Swift::UInt64 v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_1000418B0(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;

  *((_QWORD *)&v37 + 1) = a2;
  v36 = a4;
  *(_QWORD *)&v37 = a3;
  v5 = sub_100005690(&qword_100071890);
  v32 = *(_QWORD *)(v5 - 8);
  v33 = v5;
  __chkstk_darwin(v5);
  v31 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100005690(&qword_100071898);
  v34 = *(_QWORD *)(v7 - 8);
  v35 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100005690(&qword_1000718A0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100005690(&qword_1000718A8);
  v39 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a1[3];
  v18 = a1[4];
  sub_100005E2C(a1, v17);
  v19 = sub_100047B08();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AnalyticsAction.CodingKeys, &type metadata for AnalyticsAction.CodingKeys, v19, v17, v18);
  if ((v36 & 1) != 0)
  {
    if (v37 == 0)
    {
      LOBYTE(v41) = 0;
      v29 = sub_100047C5C();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for AnalyticsAction.SkipCodingKeys, &v41, v14, &type metadata for AnalyticsAction.SkipCodingKeys, v29);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    }
    else
    {
      LOBYTE(v41) = 2;
      v27 = sub_100047B4C();
      v28 = v31;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for AnalyticsAction.ReportCodingKeys, &v41, v14, &type metadata for AnalyticsAction.ReportCodingKeys, v27);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v28, v33);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v16, v14);
  }
  else
  {
    v20 = v37;
    LOBYTE(v41) = 1;
    v21 = sub_100047B90();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for AnalyticsAction.ExpectCodingKeys, &v41, v14, &type metadata for AnalyticsAction.ExpectCodingKeys, v21);
    v41 = *((_QWORD *)&v37 + 1);
    v40 = 0;
    v22 = sub_100047CA0();
    v23 = v35;
    v24 = v38;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v41, &v40, v35, &type metadata for AccessModeSet, v22);
    if (!v24)
    {
      v41 = v20;
      v40 = 1;
      v25 = sub_100047CE4();
      KeyedEncodingContainer.encode<A>(_:forKey:)(&v41, &v40, v23, &type metadata for AccessCategorySet, v25);
    }
    (*(void (**)(char *, uint64_t))(v34 + 8))(v9, v23);
    return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v16, v14);
  }
}

uint64_t sub_100041BB8()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x746365707845;
  if (*v0 != 1)
    v1 = 0x74726F706552;
  if (*v0)
    return v1;
  else
    return 1885956947;
}

uint64_t sub_100041C04@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10004741C(a1, a2);
  *a3 = result;
  return result;
}

void sub_100041C28(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_100041C34(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100047B08();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100041C5C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100047B08();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100041C84()
{
  _BYTE *v0;

  if (*v0)
    return 0x69726F6765746163;
  else
    return 0x7365646F6DLL;
}

uint64_t sub_100041CC0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100047550(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100041CE4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100047B90();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100041D0C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100047B90();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100041D34()
{
  return 0;
}

void sub_100041D40(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_100041D4C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100047B4C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100041D74(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100047B4C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100041D9C@<X0>(uint64_t a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease(a1);
  *a2 = 1;
  return result;
}

uint64_t sub_100041DC8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100047C5C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100041DF0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100047C5C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100041E18@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  char v6;

  result = sub_100047644(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = v6 & 1;
  }
  return result;
}

uint64_t sub_100041E48(_QWORD *a1)
{
  uint64_t v1;

  return sub_1000418B0(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(unsigned __int8 *)(v1 + 16));
}

Swift::Int sub_100041E64()
{
  uint64_t v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  int v3;
  Swift::UInt v4;
  _QWORD v6[9];

  v2 = *(_QWORD *)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)(v6, 0);
  if (v3 == 1)
  {
    if (v2 | v1)
      v4 = 2;
    else
      v4 = 0;
    Hasher._combine(_:)(v4);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v2);
    Hasher._combine(_:)(v1);
  }
  return Hasher._finalize()();
}

void sub_100041EF4()
{
  uint64_t v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt v3;

  v2 = *(_QWORD *)v0;
  v1 = *(_QWORD *)(v0 + 8);
  if (*(_BYTE *)(v0 + 16) == 1)
  {
    if (v2 | v1)
      v3 = 2;
    else
      v3 = 0;
    Hasher._combine(_:)(v3);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v2);
    Hasher._combine(_:)(v1);
  }
}

Swift::Int sub_100041F60(uint64_t a1)
{
  uint64_t v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  int v4;
  Swift::UInt v5;
  _QWORD v7[9];

  v3 = *(_QWORD *)v1;
  v2 = *(_QWORD *)(v1 + 8);
  v4 = *(unsigned __int8 *)(v1 + 16);
  Hasher.init(_seed:)(v7, a1);
  if (v4 == 1)
  {
    if (v3 | v2)
      v5 = 2;
    else
      v5 = 0;
    Hasher._combine(_:)(v5);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v3);
    Hasher._combine(_:)(v2);
  }
  return Hasher._finalize()();
}

uint64_t sub_100041FEC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  _BOOL4 v9;
  _BOOL4 v10;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2;
  v4 = a2[1];
  v5 = (*(_QWORD *)a1 == *a2) & ~*((unsigned __int8 *)a2 + 16);
  if (v2 != v4)
    v5 = 0;
  v6 = *(_QWORD *)a1 | v2;
  v7 = v3 | v4;
  v8 = (v3 | v4) != 0;
  if (!*((_BYTE *)a2 + 16))
    v8 = 0;
  v9 = v7 == 0;
  if (!*((_BYTE *)a2 + 16))
    v9 = 0;
  if (v6)
    v10 = v8;
  else
    v10 = v9;
  if (*(_BYTE *)(a1 + 16) == 1)
    return v10;
  else
    return v5;
}

uint64_t sub_10004204C(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD v18[2];
  char v19;
  __int128 v20;

  v3 = v1;
  v5 = sub_100005690(&qword_100071A50);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100005E2C(a1, v9);
  v11 = sub_100048F48();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AnalyticsPolicyRule.CodingKeys, &type metadata for AnalyticsPolicyRule.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  LOBYTE(v18[0]) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, v18, v5);
  if (!v2)
  {
    v18[0] = v3[2];
    v19 = 1;
    v14 = sub_100005690(&qword_100071A28);
    v15 = sub_100049058(&qword_100071A58, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v18, &v19, v5, v14, v15);
    sub_1000490B8((__int128 *)(v3 + 3), (uint64_t)&v20);
    sub_1000490B8(&v20, (uint64_t)v18);
    v19 = 2;
    v16 = sub_1000490D0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v18, &v19, v5, &type metadata for AnalyticsAction, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000421EC(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _BOOL4 v3;
  uint64_t v4;
  _BOOL4 v5;
  BOOL v6;
  unsigned int v7;
  int v8;
  _BOOL4 v9;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)a1 < *(_QWORD *)a2;
  if (*(_QWORD *)a1 == *(_QWORD *)a2)
    v3 = *(_QWORD *)(a1 + 8) < v2;
  v4 = *(_QWORD *)a2 | v2;
  v5 = v4 != 0;
  if (!*(_BYTE *)(a2 + 16))
    v5 = v3;
  v6 = *(_OWORD *)a1 == 0;
  v7 = v6;
  if (v6)
    v8 = *(unsigned __int8 *)(a2 + 16);
  else
    v8 = 0;
  v9 = v4 != 0;
  if (v8 == 1)
    v7 = v9;
  if (*(_BYTE *)(a1 + 16) == 1)
    return v7;
  else
    return v5;
}

BOOL sub_100042254(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  int v3;
  _BOOL4 v4;
  uint64_t v5;
  _BOOL4 v6;
  BOOL v7;
  _BOOL4 v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = *(_QWORD *)a2 < *(_QWORD *)a1;
  if (*(_QWORD *)a2 == *(_QWORD *)a1)
    v4 = *(_QWORD *)(a2 + 8) < v2;
  v5 = *(_QWORD *)a1 | v2;
  v6 = v5 != 0;
  if (!*(_BYTE *)(a1 + 16))
    v6 = v4;
  v7 = *(_OWORD *)a2 == 0;
  if (!v7)
    v3 = 0;
  v8 = v5 != 0;
  if (v3 != 1)
    v8 = v7;
  if (*(_BYTE *)(a2 + 16) != 1)
    v8 = v6;
  return !v8;
}

uint64_t sub_1000422C0(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _BOOL4 v3;
  uint64_t v4;
  _BOOL4 v5;
  BOOL v6;
  int v7;
  int v8;
  _BOOL4 v9;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)a1 < *(_QWORD *)a2;
  if (*(_QWORD *)a1 == *(_QWORD *)a2)
    v3 = *(_QWORD *)(a1 + 8) < v2;
  v4 = *(_QWORD *)a2 | v2;
  v5 = v4 != 0;
  if (!*(_BYTE *)(a2 + 16))
    v5 = v3;
  v6 = *(_OWORD *)a1 == 0;
  v7 = v6;
  if (v6)
    v8 = *(unsigned __int8 *)(a2 + 16);
  else
    v8 = 0;
  v9 = v4 != 0;
  if (v8 == 1)
    v7 = v9;
  if (*(_BYTE *)(a1 + 16) != 1)
    v7 = v5;
  return v7 ^ 1u;
}

BOOL sub_10004232C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  int v3;
  _BOOL4 v4;
  uint64_t v5;
  _BOOL4 v6;
  BOOL v7;
  _BOOL4 v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = *(_QWORD *)a2 < *(_QWORD *)a1;
  if (*(_QWORD *)a2 == *(_QWORD *)a1)
    v4 = *(_QWORD *)(a2 + 8) < v2;
  v5 = *(_QWORD *)a1 | v2;
  v6 = v5 != 0;
  if (!*(_BYTE *)(a1 + 16))
    v6 = v4;
  v7 = *(_OWORD *)a2 == 0;
  if (!v7)
    v3 = 0;
  v8 = v5 != 0;
  if (v3 != 1)
    v8 = v7;
  if (*(_BYTE *)(a2 + 16) == 1)
    return v8;
  else
    return v6;
}

uint64_t sub_100042394()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x737365636F7270;
  if (*v0 != 1)
    v1 = 0x6E6F69746361;
  if (*v0)
    return v1;
  else
    return 1752457584;
}

uint64_t sub_1000423E4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100048B90(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100042408(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100048F48();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100042430(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100048F48();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100042458@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];

  sub_100048CCC(a1, (uint64_t)&v6);
  if (!v2)
  {
    v5 = v7[0];
    *a2 = v6;
    a2[1] = v5;
    result = *(double *)((char *)v7 + 9);
    *(_OWORD *)((char *)a2 + 25) = *(_OWORD *)((char *)v7 + 9);
  }
  return result;
}

uint64_t sub_100042498(_QWORD *a1)
{
  return sub_10004204C(a1);
}

uint64_t sub_1000424D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  void (*v58)(char *, uint64_t);
  void (*v59)(_BYTE *, _QWORD);
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t);
  void (*v80)(char *, char *, uint64_t);
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94[24];
  uint64_t v95;
  _BYTE v96[40];

  v92 = a1;
  v75 = type metadata accessor for FilePath.Component(0);
  v91 = *(_QWORD *)(v75 - 8);
  v3 = __chkstk_darwin(v75);
  v90 = (char *)&v73 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v82 = (char *)&v73 - v5;
  v6 = type metadata accessor for FilePath.ComponentView.Index(0);
  v7 = *(_QWORD *)(v6 - 8);
  v88 = v6;
  v89 = v7;
  v8 = __chkstk_darwin(v6);
  v87 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v73 - v10;
  v12 = type metadata accessor for FilePath.ComponentView(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_100005690(&qword_100071940);
  v16 = __chkstk_darwin(v83);
  v18 = (char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v74 = (uint64_t)&v73 - v19;
  v20 = type metadata accessor for FilePath(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v73 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v26 = (char *)&v73 - v25;
  swift_bridgeObjectRetain(a2);
  FilePath.init(_:)(v92);
  v77 = v21;
  v27 = *(uint64_t (**)(char *, char *, uint64_t))(v21 + 16);
  v76 = v26;
  v78 = v20;
  v28 = v27(v24, v26, v20);
  FilePath.components.getter(v28);
  v80 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v80(v18, v15, v12);
  v85 = sub_100005A54(&qword_100071948, (uint64_t (*)(uint64_t))&type metadata accessor for FilePath.ComponentView, (uint64_t)&protocol conformance descriptor for FilePath.ComponentView);
  dispatch thunk of Collection.startIndex.getter(v12);
  v29 = *(void (**)(char *, uint64_t))(v13 + 8);
  v30 = v75;
  v81 = v15;
  v84 = v12;
  v79 = v29;
  v29(v15, v12);
  v31 = v83;
  v32 = &v18[*(int *)(v83 + 36)];
  v33 = v89;
  v34 = *(void (**)(char *, char *, uint64_t))(v89 + 32);
  v86 = v11;
  v34(v32, v11, v88);
  v35 = (uint64_t)v18;
  v36 = v74;
  sub_10001F414(v35, v74, &qword_100071940);
  v37 = v36 + *(int *)(v31 + 36);
  v83 = *(_QWORD *)(v33 + 16);
  swift_retain(v93);
  LODWORD(v92) = 1;
  while (1)
  {
    v49 = v86;
    v50 = v37;
    v51 = v37;
    v52 = v88;
    ((void (*)(char *, uint64_t, uint64_t))v83)(v86, v50, v88);
    v53 = v87;
    v54 = v84;
    v55 = v85;
    dispatch thunk of Collection.endIndex.getter(v84, v85);
    v56 = sub_100005A54(&qword_100071950, (uint64_t (*)(uint64_t))&type metadata accessor for FilePath.ComponentView.Index, (uint64_t)&protocol conformance descriptor for FilePath.ComponentView.Index);
    v57 = dispatch thunk of static Equatable.== infix(_:_:)(v49, v53, v52, v56);
    v58 = *(void (**)(char *, uint64_t))(v89 + 8);
    v58(v53, v52);
    v58(v49, v52);
    if ((v57 & 1) != 0)
      break;
    v59 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read(v96, v51, v54, v55);
    v39 = v91;
    v60 = v82;
    (*(void (**)(char *))(v91 + 16))(v82);
    v59(v96, 0);
    v61 = v81;
    v80(v81, (char *)v36, v54);
    dispatch thunk of Collection.formIndex(after:)(v51, v54, v55);
    v79(v61, v54);
    v38 = v90;
    v62 = (*(uint64_t (**)(char *, char *, uint64_t))(v39 + 32))(v90, v60, v30);
    v63 = v30;
    v37 = v51;
    if ((v92 & 1) != 0)
    {
      v64 = FilePath.Component.string.getter(v62);
      v66 = v65;
      v67 = v93;
      swift_beginAccess(v93 + 48, v94, 0, 0);
      v68 = *(_QWORD *)(v67 + 48);
      if (!*(_QWORD *)(v68 + 16))
        goto LABEL_3;
      swift_bridgeObjectRetain(v68);
      v69 = sub_10002D7C4(v64, v66);
      if ((v70 & 1) == 0)
      {
        swift_bridgeObjectRelease(v68);
LABEL_3:
        swift_bridgeObjectRelease(v66);
        v38 = v90;
        v39 = v91;
        goto LABEL_4;
      }
      v71 = *(_QWORD *)(*(_QWORD *)(v68 + 56) + 8 * v69);
      swift_retain(v71);
      swift_bridgeObjectRelease(v68);
      swift_bridgeObjectRelease(v66);
      (*(void (**)(char *, uint64_t))(v91 + 8))(v90, v63);
      swift_release(v93);
      LODWORD(v92) = 1;
      v93 = v71;
      v30 = v63;
    }
    else
    {
LABEL_4:
      v40 = type metadata accessor for AnalyticsPolicy();
      v41 = swift_allocObject(v40, 57, 7);
      *(_QWORD *)(v41 + 16) = 0;
      *(_QWORD *)(v41 + 24) = 0;
      *(_WORD *)(v41 + 32) = 256;
      *(_QWORD *)(v41 + 40) = sub_10002A564((uint64_t)&_swiftEmptyArrayStorage);
      v42 = sub_10002A694((uint64_t)&_swiftEmptyArrayStorage);
      *(_QWORD *)(v41 + 48) = v42;
      *(_BYTE *)(v41 + 56) = 6;
      v43 = FilePath.Component.string.getter(v42);
      v45 = v44;
      v46 = v93;
      swift_beginAccess(v93 + 48, v96, 33, 0);
      swift_retain(v41);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v46 + 48));
      v95 = *(_QWORD *)(v46 + 48);
      *(_QWORD *)(v46 + 48) = 0x8000000000000000;
      sub_100045E48(v41, v43, v45, isUniquelyReferenced_nonNull_native, (void (*)(void))sub_100046620, &qword_100070CA0);
      v48 = *(_QWORD *)(v46 + 48);
      *(_QWORD *)(v46 + 48) = v95;
      swift_bridgeObjectRelease(v48);
      swift_bridgeObjectRelease(v45);
      swift_endAccess(v96);
      swift_release(v46);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v38, v63);
      LODWORD(v92) = 0;
      v93 = v41;
      v30 = v63;
    }
  }
  sub_10003B3BC(v36, &qword_100071940);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v76, v78);
  return v93;
}

uint64_t sub_100042B10(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  char v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t *v46;
  char v47;
  uint64_t v48;
  _QWORD *v49;
  _BYTE v50[24];
  char v51[24];
  uint64_t v52;

  v1 = a1;
  v2 = sub_1000424D0(*a1, a1[1]);
  v3 = v1[2];
  v52 = v3;
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
  {
    v37 = v1[3];
    v38 = v1[4];
    v39 = *((_BYTE *)v1 + 40);
    if ((*(_BYTE *)(v2 + 33) & 1) == 0)
    {
      v41 = *(_QWORD *)(v2 + 16);
      v40 = *(_QWORD *)(v2 + 24);
      if (*((_BYTE *)v1 + 40))
      {
        v39 = *(_BYTE *)(v2 + 32) & 1;
        if (v37 | v38)
        {
          v37 = *(_QWORD *)(v2 + 16);
          v38 = *(_QWORD *)(v2 + 24);
        }
        else
        {
          v39 = 1;
        }
      }
      else
      {
        v42 = v37 | v41;
        v43 = v38 | v40;
        if (v41 | v40)
        {
          v44 = 0;
        }
        else
        {
          v37 = *(_QWORD *)(v2 + 16);
          v38 = *(_QWORD *)(v2 + 24);
          v44 = 1;
        }
        if ((*(_BYTE *)(v2 + 32) & 1) != 0)
        {
          v39 = v44;
        }
        else
        {
          v37 = v42;
          v38 = v43;
          v39 = 0;
        }
      }
    }
    *(_QWORD *)(v2 + 16) = v37;
    *(_QWORD *)(v2 + 24) = v38;
    *(_BYTE *)(v2 + 32) = v39;
    *(_BYTE *)(v2 + 33) = 0;
    return swift_release(v2);
  }
  v45 = v2;
  v5 = (_QWORD *)(v2 + 40);
  swift_bridgeObjectRetain(v3);
  swift_beginAccess(v5, v51, 0, 0);
  v6 = (uint64_t *)(v3 + 40);
  v46 = v1;
  while (1)
  {
    v10 = *(v6 - 1);
    v9 = *v6;
    v11 = *v5;
    if (!*(_QWORD *)(*v5 + 16))
    {
      v15 = v1[3];
      v48 = v1[4];
      v47 = *((_BYTE *)v1 + 40);
      swift_bridgeObjectRetain(v9);
      goto LABEL_16;
    }
    swift_bridgeObjectRetain(*v6);
    swift_bridgeObjectRetain(v11);
    v12 = sub_10002D7C4(v10, v9);
    if ((v13 & 1) == 0)
    {
      swift_bridgeObjectRelease(v11);
      v15 = v1[3];
      v48 = v1[4];
      v20 = *((_BYTE *)v1 + 40);
LABEL_15:
      v47 = v20;
      goto LABEL_16;
    }
    v14 = *(_QWORD *)(v11 + 56) + 24 * v12;
    v15 = *(_QWORD *)v14;
    v16 = *(_QWORD *)(v14 + 8);
    v17 = *(unsigned __int8 *)(v14 + 16);
    swift_bridgeObjectRelease(v11);
    v19 = v1[3];
    v18 = v1[4];
    if (*((_BYTE *)v1 + 40) == 1)
    {
      if (!(v19 | v18))
      {
        v15 = v1[3];
        v16 = v1[4];
      }
      v48 = v16;
      if (v19 | v18)
        v20 = v17;
      else
        v20 = 1;
      goto LABEL_15;
    }
    if (v17)
    {
      if (!(v15 | v16))
      {
        v48 = v16;
        v20 = 1;
        goto LABEL_15;
      }
      v47 = 0;
      v15 = v1[3];
      v48 = v1[4];
    }
    else
    {
      v47 = 0;
      v15 |= v19;
      v48 = v18 | v16;
    }
LABEL_16:
    swift_beginAccess(v5, v50, 33, 0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v5);
    v22 = (_QWORD *)*v5;
    v49 = (_QWORD *)*v5;
    *v5 = 0x8000000000000000;
    v24 = sub_10002D7C4(v10, v9);
    v25 = v22[2];
    v26 = (v23 & 1) == 0;
    v27 = v25 + v26;
    if (__OFADD__(v25, v26))
      break;
    v28 = v23;
    if (v22[3] >= v27)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1000467D4();
        v22 = v49;
      }
    }
    else
    {
      sub_100045878(v27, isUniquelyReferenced_nonNull_native);
      v22 = v49;
      v29 = sub_10002D7C4(v10, v9);
      if ((v28 & 1) != (v30 & 1))
        goto LABEL_45;
      v24 = v29;
    }
    if ((v28 & 1) != 0)
    {
      v7 = v22[7] + 24 * v24;
      *(_QWORD *)v7 = v15;
      *(_QWORD *)(v7 + 8) = v48;
      *(_BYTE *)(v7 + 16) = v47;
    }
    else
    {
      v22[(v24 >> 6) + 8] |= 1 << v24;
      v31 = (uint64_t *)(v22[6] + 16 * v24);
      *v31 = v10;
      v31[1] = v9;
      v32 = v22[7] + 24 * v24;
      *(_QWORD *)v32 = v15;
      *(_QWORD *)(v32 + 8) = v48;
      *(_BYTE *)(v32 + 16) = v47;
      v33 = v22[2];
      v34 = __OFADD__(v33, 1);
      v35 = v33 + 1;
      if (v34)
        goto LABEL_44;
      v22[2] = v35;
      swift_bridgeObjectRetain(v9);
    }
    v6 += 2;
    v8 = *v5;
    *v5 = v22;
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v9);
    swift_endAccess(v50);
    --v4;
    v1 = v46;
    if (!v4)
    {
      sub_100047DB0(&v52);
      return swift_release(v45);
    }
  }
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_100042E9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  char v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  void (*v72)(char *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t *, _QWORD);
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  void (*v85)(char *, char *, uint64_t);
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void (*v121)(char *, uint64_t);
  uint64_t result;
  _QWORD *v123;
  uint64_t v124;
  _QWORD *v125;
  int v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  char *v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t (*v139)(char *, char *, uint64_t);
  char *v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  char *v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  _QWORD *v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  void (*v164)(char *, char *, uint64_t);
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  void (*v169)(char *, uint64_t);
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char v175[8];
  char v176[8];
  uint64_t v177;
  unint64_t v178;
  char v179[8];

  v7 = v6;
  v147 = a5;
  v154 = a1;
  v125 = a6;
  v135 = sub_100005690(&qword_100071900);
  __chkstk_darwin(v135);
  v134 = (char *)&v125 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = sub_100005690(&qword_100071908);
  v12 = __chkstk_darwin(v141);
  v133 = (char *)&v125 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v145 = (char *)&v125 - v14;
  v132 = sub_100005690(&qword_100071910);
  v15 = __chkstk_darwin(v132);
  v131 = (char *)&v125 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v140 = (char *)&v125 - v17;
  v18 = sub_100005690(&qword_100070B18);
  __chkstk_darwin(v18);
  v142 = (char *)&v125 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v172 = sub_100005690(&qword_100071918);
  v161 = *(_QWORD *)(v172 - 8);
  __chkstk_darwin(v172);
  v152 = (char *)&v125 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v166 = type metadata accessor for FilePath.ComponentView.Index(0);
  v165 = *(_QWORD *)(v166 - 8);
  v21 = __chkstk_darwin(v166);
  v168 = (char *)&v125 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v167 = (char *)&v125 - v23;
  v24 = type metadata accessor for FilePath.Component(0);
  v173 = *(_QWORD *)(v24 - 8);
  v174 = v24;
  v25 = __chkstk_darwin(v24);
  v146 = (char *)&v125 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v25);
  v171 = (char *)&v125 - v28;
  v29 = __chkstk_darwin(v27);
  v151 = (char *)&v125 - v30;
  __chkstk_darwin(v29);
  v150 = (char *)&v125 - v31;
  v32 = sub_100005690(&qword_100071920);
  v33 = __chkstk_darwin(v32);
  v160 = (_QWORD **)((char *)&v125 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v33);
  v159 = (char *)&v125 - v35;
  v170 = type metadata accessor for FilePath.ComponentView(0);
  v156 = *(_QWORD *)(v170 - 8);
  v36 = __chkstk_darwin(v170);
  v137 = (char *)&v125 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  v155 = (char *)&v125 - v38;
  v39 = sub_100005690(&qword_100071928);
  __chkstk_darwin(v39);
  v41 = (char *)&v125 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_100005690(&qword_100071930);
  __chkstk_darwin(v42);
  v44 = (char *)&v125 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = type metadata accessor for FilePath(0);
  v138 = *(_QWORD *)(v144 - 8);
  v45 = __chkstk_darwin(v144);
  v136 = (char *)&v125 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = __chkstk_darwin(v45);
  v143 = (char *)&v125 - v48;
  __chkstk_darwin(v47);
  v148 = (char *)&v125 - v49;
  swift_beginAccess(v6 + 40, v179, 0, 0);
  v50 = *(_QWORD *)(v6 + 40);
  v51 = *(_QWORD *)(v50 + 16);
  v153 = a2;
  if (!v51)
    goto LABEL_5;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v50);
  v52 = sub_10002D7C4(v154, a2);
  if ((v53 & 1) == 0)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v50);
LABEL_5:
    v129 = *(_QWORD *)(v7 + 16);
    v128 = *(_QWORD *)(v7 + 24);
    v127 = *(unsigned __int8 *)(v7 + 32);
    v126 = *(unsigned __int8 *)(v7 + 33);
    goto LABEL_6;
  }
  v54 = *(_QWORD *)(v50 + 56) + 24 * v52;
  v129 = *(_QWORD *)v54;
  v128 = *(_QWORD *)(v54 + 8);
  v127 = *(unsigned __int8 *)(v54 + 16);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v50);
  v126 = 0;
LABEL_6:
  swift_bridgeObjectRetain(a4);
  v55 = v148;
  FilePath.init(_:)(a3);
  v139 = *(uint64_t (**)(char *, char *, uint64_t))(v138 + 16);
  v56 = v139(v143, v55, v144);
  FilePath.components.getter(v56);
  v57 = v170;
  (*(void (**)(char *, char *, uint64_t))(v156 + 32))(v155, v41, v170);
  v58 = sub_100005A54(&qword_100071938, (uint64_t (*)(uint64_t))&type metadata accessor for FilePath.ComponentView, (uint64_t)&protocol conformance descriptor for FilePath.ComponentView);
  dispatch thunk of Sequence.makeIterator()(v57, v58);
  v149 = *(int *)(v42 + 36);
  *(_QWORD *)&v44[v149] = 0;
  v162 = &v44[*(int *)(sub_100005690(&qword_100071940) + 36)];
  v164 = *(void (**)(char *, char *, uint64_t))(v165 + 16);
  swift_retain(v7);
  v130 = xmmword_10004BF60;
  v158 = v44;
  v59 = v7;
  while (1)
  {
    v64 = v167;
    v65 = v162;
    v66 = v166;
    v164(v167, v162, v166);
    v67 = sub_100005A54(&qword_100071948, (uint64_t (*)(uint64_t))&type metadata accessor for FilePath.ComponentView, (uint64_t)&protocol conformance descriptor for FilePath.ComponentView);
    v68 = v168;
    v69 = v170;
    dispatch thunk of Collection.endIndex.getter(v170, v67);
    v70 = sub_100005A54(&qword_100071950, (uint64_t (*)(uint64_t))&type metadata accessor for FilePath.ComponentView.Index, (uint64_t)&protocol conformance descriptor for FilePath.ComponentView.Index);
    v71 = dispatch thunk of static Equatable.== infix(_:_:)(v64, v68, v66, v70);
    v72 = *(void (**)(char *, uint64_t))(v165 + 8);
    v72(v68, v66);
    v169 = v72;
    v72(v64, v66);
    v163 = v67;
    if ((v71 & 1) != 0)
    {
      v73 = 1;
      v74 = (uint64_t)v160;
      v75 = (uint64_t)v159;
    }
    else
    {
      v157 = v59;
      v76 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read(&v177, v65, v69, v67);
      v77 = v173;
      v78 = v174;
      v79 = v151;
      (*(void (**)(char *))(v173 + 16))(v151);
      v76(&v177, 0);
      v80 = v65;
      v81 = v156;
      v82 = v155;
      (*(void (**)(char *, char *, uint64_t))(v156 + 16))(v155, v44, v69);
      v83 = v80;
      v84 = v172;
      dispatch thunk of Collection.formIndex(after:)(v83, v69, v67);
      (*(void (**)(char *, uint64_t))(v81 + 8))(v82, v69);
      v85 = *(void (**)(char *, char *, uint64_t))(v77 + 32);
      v86 = v150;
      v85(v150, v79, v78);
      v87 = &v152[*(int *)(v84 + 48)];
      v88 = v149;
      v89 = *(_QWORD *)&v44[v149];
      v85(v87, v86, v78);
      if (__OFADD__(v89, 1))
      {
        __break(1u);
        JUMPOUT(0x1000441B8);
      }
      *(_QWORD *)&v44[v88] = v89 + 1;
      v74 = (uint64_t)v160;
      v90 = (char *)v160 + *(int *)(v172 + 48);
      *v160 = v89;
      v85(v90, v87, v174);
      v73 = 0;
      v75 = (uint64_t)v159;
      v59 = v157;
    }
    v91 = v161;
    v92 = v172;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v161 + 56))(v74, v73, 1, v172);
    sub_10001F414(v74, v75, &qword_100071920);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v91 + 48))(v75, 1, v92) == 1)
      break;
    v93 = (*(uint64_t (**)(char *, uint64_t))(v173 + 32))(v171, v75 + *(int *)(v172 + 48));
    v94 = *(unsigned __int8 *)(v59 + 56);
    if ((_DWORD)v94 != 6)
    {
      v95 = FilePath.Component.string.getter(v93);
      v97 = v96;
      sub_100029840(v95, v96, v94);
      v99 = v98;
      v93 = swift_bridgeObjectRelease(v97);
      if (v99)
      {
        v177 = 36;
        v178 = 0xE100000000000000;
        __asm { BR              X8 }
      }
    }
    v177 = FilePath.Component.string.getter(v93);
    v178 = v100;
    v101 = String.init<A>(_:)(&v177, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
    v103 = v102;
    swift_beginAccess(v59 + 48, v176, 0, 0);
    v104 = *(_QWORD *)(v59 + 48);
    if (!*(_QWORD *)(v104 + 16))
    {
      v113 = v103;
LABEL_26:
      swift_bridgeObjectRelease(v113);
      (*(void (**)(char *, uint64_t))(v173 + 8))(v171, v174);
      break;
    }
    swift_bridgeObjectRetain(*(_QWORD *)(v59 + 48));
    v105 = sub_10002D7C4(v101, v103);
    if ((v106 & 1) == 0)
    {
      swift_bridgeObjectRelease(v103);
      v113 = v104;
      goto LABEL_26;
    }
    v107 = *(_QWORD *)(*(_QWORD *)(v104 + 56) + 8 * v105);
    swift_retain(v107);
    swift_release(v59);
    swift_bridgeObjectRelease(v103);
    swift_bridgeObjectRelease(v104);
    swift_beginAccess(v107 + 40, v175, 0, 0);
    v108 = *(_QWORD *)(v107 + 40);
    if (*(_QWORD *)(v108 + 16))
    {
      v109 = v153;
      swift_bridgeObjectRetain(v153);
      swift_retain(v107);
      swift_bridgeObjectRetain(v108);
      v110 = sub_10002D7C4(v154, v109);
      if ((v111 & 1) == 0)
      {
        swift_bridgeObjectRelease(v109);
        swift_bridgeObjectRelease(v108);
        goto LABEL_8;
      }
      v112 = *(_QWORD *)(v108 + 56) + 24 * v110;
      v129 = *(_QWORD *)v112;
      v128 = *(_QWORD *)(v112 + 8);
      v127 = *(unsigned __int8 *)(v112 + 16);
      swift_release(v107);
      swift_bridgeObjectRelease(v109);
      swift_bridgeObjectRelease(v108);
      (*(void (**)(char *, uint64_t))(v173 + 8))(v171, v174);
      v126 = 0;
      v44 = v158;
      v59 = v107;
    }
    else
    {
      swift_retain(v107);
LABEL_8:
      v44 = v158;
      v60 = *(_QWORD *)(v107 + 16);
      v61 = *(_QWORD *)(v107 + 24);
      v62 = *(unsigned __int8 *)(v107 + 32);
      v63 = *(_BYTE *)(v107 + 33);
      swift_release(v107);
      (*(void (**)(char *, uint64_t))(v173 + 8))(v171, v174);
      v59 = v107;
      if ((v63 & 1) == 0)
      {
        v126 = 0;
        v129 = v60;
        v128 = v61;
        v127 = v62;
        v59 = v107;
      }
    }
  }
  sub_10003B3BC((uint64_t)v158, &qword_100071930);
  v114 = v143;
  v115 = v148;
  v116 = v144;
  v117 = v139(v143, v148, v144);
  v118 = FilePath.string.getter(v117);
  v120 = v119;
  swift_release(v59);
  v121 = *(void (**)(char *, uint64_t))(v138 + 8);
  v121(v114, v116);
  result = ((uint64_t (*)(char *, uint64_t))v121)(v115, v116);
  v123 = v125;
  v124 = v128;
  *v125 = v129;
  v123[1] = v124;
  *((_BYTE *)v123 + 16) = v127;
  *((_BYTE *)v123 + 17) = v126 & 1;
  v123[3] = v118;
  v123[4] = v120;
  return result;
}

uint64_t sub_1000441D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v6 = type metadata accessor for FilePath.ComponentView.Index(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v20 - v11;
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  if (a2 < 0)
  {
    v13((char *)&v20 - v11, a1, v6);
    v16 = type metadata accessor for FilePath.ComponentView(0);
    v17 = sub_100005A54(&qword_100071980, (uint64_t (*)(uint64_t))&type metadata accessor for FilePath.ComponentView, (uint64_t)&protocol conformance descriptor for FilePath.ComponentView);
    v18 = 0;
    do
    {
      --v18;
      dispatch thunk of BidirectionalCollection.formIndex(before:)(v12, v16, v17);
    }
    while (v18 > a2);
    v10 = v12;
  }
  else
  {
    v13(v10, a1, v6);
    if (a2)
    {
      v14 = type metadata accessor for FilePath.ComponentView(0);
      v15 = sub_100005A54(&qword_100071948, (uint64_t (*)(uint64_t))&type metadata accessor for FilePath.ComponentView, (uint64_t)&protocol conformance descriptor for FilePath.ComponentView);
      do
      {
        dispatch thunk of Collection.formIndex(after:)(v10, v14, v15);
        --a2;
      }
      while (a2);
    }
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a3, v10, v6);
}

uint64_t sub_100044348(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3[21] = a2;
  v3[22] = v2;
  v3[20] = a1;
  v4 = sub_100005690(&qword_1000718C0);
  v3[23] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[24] = v5;
  v3[25] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100005690(&qword_1000718C8);
  v3[26] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[27] = v7;
  v3[28] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  v3[29] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[30] = v9;
  v3[31] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100044404, 0, 0);
}

uint64_t sub_100044404()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = v0[24];
  v1 = v0[25];
  v3 = v0[23];
  URL.init(fileURLWithPath:)(v0[20], v0[21]);
  v4 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v0[32] = JSONDecoder.init()();
  URL.lines.getter();
  AsyncLineSequence.makeAsyncIterator()(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v5 = sub_10001A838(&qword_1000718D0, &qword_1000718C8, (uint64_t)&protocol conformance descriptor for AsyncLineSequence<A>.AsyncIterator);
  v0[33] = v5;
  v6 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  v0[34] = v6;
  *v6 = v0;
  v6[1] = sub_100044508;
  return dispatch thunk of AsyncIteratorProtocol.next()(v0 + 16, v0[26], v5);
}

uint64_t sub_100044508()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 272));
  if (v0)
  {
    *(_QWORD *)(v2 + 304) = v0;
    v3 = sub_1000447F0;
  }
  else
  {
    *(_QWORD *)(v2 + 280) = 0;
    v3 = sub_100044570;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100044570()
{
  uint64_t v0;

  *(_OWORD *)(v0 + 288) = *(_OWORD *)(v0 + 128);
  return swift_task_switch(sub_10004458C, 0, 0);
}

uint64_t sub_10004458C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v30;
  _QWORD *v31;

  v1 = *(_QWORD *)(v0 + 296);
  if (!v1)
  {
    v22 = *(_QWORD *)(v0 + 248);
    v23 = *(_QWORD *)(v0 + 232);
    v24 = *(_QWORD *)(v0 + 240);
    v26 = *(_QWORD *)(v0 + 216);
    v25 = *(_QWORD *)(v0 + 224);
    v28 = *(_QWORD *)(v0 + 200);
    v27 = *(_QWORD *)(v0 + 208);
    swift_release(*(_QWORD *)(v0 + 256));
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v23);
    swift_task_dealloc(v22);
    swift_task_dealloc(v25);
    swift_task_dealloc(v28);
    v21 = *(uint64_t (**)(void))(v0 + 8);
    return v21();
  }
  v2 = *(_QWORD *)(v0 + 280);
  v3 = *(_QWORD *)(v0 + 288);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 296));
  v4 = sub_100044940(v3, v1);
  v6 = v5;
  v7 = sub_100047D28();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for AnalyticsPolicyRule, v4, v6, &type metadata for AnalyticsPolicyRule, v7);
  if (v2)
  {
    v9 = *(_QWORD *)(v0 + 288);
    v8 = *(_QWORD *)(v0 + 296);
    v10 = *(_QWORD *)(v0 + 256);
    v12 = *(_QWORD *)(v0 + 160);
    v11 = *(_QWORD *)(v0 + 168);
    swift_errorRelease(v2);
    sub_10001BAC4(v4, v6);
    v13 = sub_100047D6C();
    swift_allocError(&type metadata for AnalyticsPolicyError, v13, 0, 0);
    *(_QWORD *)v14 = v12;
    *(_QWORD *)(v14 + 8) = v11;
    *(_QWORD *)(v14 + 16) = v9;
    *(_QWORD *)(v14 + 24) = v8;
    *(_QWORD *)(v14 + 32) = 0;
    *(_BYTE *)(v14 + 40) = 64;
    v15 = swift_bridgeObjectRetain(v11);
    swift_willThrow(v15);
    swift_release(v10);
    v17 = *(_QWORD *)(v0 + 240);
    v16 = *(_QWORD *)(v0 + 248);
    v19 = *(_QWORD *)(v0 + 224);
    v18 = *(_QWORD *)(v0 + 232);
    v20 = *(_QWORD *)(v0 + 200);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 216) + 8))(v19, *(_QWORD *)(v0 + 208));
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
    swift_task_dealloc(v16);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    v21 = *(uint64_t (**)(void))(v0 + 8);
    return v21();
  }
  swift_bridgeObjectRelease(v1);
  sub_10001BAC4(v4, v6);
  v30 = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 32) = v30;
  *(_OWORD *)(v0 + 41) = *(_OWORD *)(v0 + 89);
  sub_100042B10((uint64_t *)(v0 + 16));
  *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 16);
  sub_10003B17C(v0 + 112);
  *(_QWORD *)(v0 + 144) = *(_QWORD *)(v0 + 32);
  sub_100047DB0((_QWORD *)(v0 + 144));
  v31 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  *(_QWORD *)(v0 + 312) = v31;
  *v31 = v0;
  v31[1] = sub_1000448D8;
  return dispatch thunk of AsyncIteratorProtocol.next()(v0 + 128, *(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 264));
}

uint64_t sub_1000447F0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 152) = *(_QWORD *)(v0 + 304);
  v1 = sub_100005690(&qword_1000718D8);
  swift_willThrowTypedImpl(v0 + 152, v1, &protocol self-conformance witness table for Error);
  return swift_task_switch(sub_100044850, 0, 0);
}

uint64_t sub_100044850()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  swift_release(*(_QWORD *)(v0 + 256));
  v2 = *(_QWORD *)(v0 + 240);
  v1 = *(_QWORD *)(v0 + 248);
  v4 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 232);
  v5 = *(_QWORD *)(v0 + 200);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 216) + 8))(v4, *(_QWORD *)(v0 + 208));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000448D8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 312));
  if (v0)
  {
    *(_QWORD *)(v2 + 304) = v0;
    v3 = sub_1000447F0;
  }
  else
  {
    *(_QWORD *)(v2 + 280) = 0;
    v3 = sub_100044570;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100044940(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  __int128 v17[2];
  uint64_t v18;
  __int128 v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)&v19 = a1;
  *((_QWORD *)&v19 + 1) = a2;
  swift_bridgeObjectRetain(a2);
  v2 = sub_100005690(&qword_1000718F0);
  if (!swift_dynamicCast(v17, &v19, &type metadata for String.UTF8View, v2, 6))
  {
    v18 = 0;
    memset(v17, 0, sizeof(v17));
    sub_10003B3BC((uint64_t)v17, &qword_1000718F8);
    if ((a2 & 0x1000000000000000) != 0)
      goto LABEL_20;
    if ((a2 & 0x2000000000000000) != 0)
    {
      v20[0] = a1;
      v20[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      v7 = (char *)v20 + (HIBYTE(a2) & 0xF);
      v8 = v20;
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        v5 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v6 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v5 = _StringObject.sharedUTF8.getter(a1, a2);
      }
      if (v5)
        v7 = (_BYTE *)(v5 + v6);
      else
        v7 = 0;
      v8 = (_BYTE *)v5;
    }
    v9 = sub_1000470E0(v8, v7);
    v11 = v10;
    if (v10 >> 60 != 15)
    {
      swift_bridgeObjectRelease(a2);
      *(_QWORD *)&v17[0] = v9;
      *((_QWORD *)&v17[0] + 1) = v11;
      return *(_QWORD *)&v17[0];
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
LABEL_20:
      v12 = String.UTF8View._foreignCount()();
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v12 = HIBYTE(a2) & 0xF;
    }
    else
    {
      v12 = a1 & 0xFFFFFFFFFFFFLL;
    }
    *(_QWORD *)&v17[0] = sub_100047144(v12);
    *((_QWORD *)&v17[0] + 1) = v13;
    __chkstk_darwin(*(_QWORD *)&v17[0]);
    sub_100046994();
    __asm { BR              X12 }
  }
  sub_100017874(v17, (uint64_t)v20);
  v3 = v21;
  v4 = v22;
  sub_100005E2C(v20, v21);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)(&v19, sub_100046C84, 0, &type metadata for Data._Representation, v3, v4);
  swift_bridgeObjectRelease(a2);
  v17[0] = v19;
  sub_100005D78(v20);
  return *(_QWORD *)&v17[0];
}

uint64_t sub_100044E44()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocClassInstance(v0, 57, 7);
}

uint64_t type metadata accessor for AnalyticsPolicy()
{
  return objc_opt_self(_TtC14applekeystored15AnalyticsPolicy);
}

uint64_t sub_100044E90()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for PolicyWriter()
{
  return objc_opt_self(_TtC14applekeystored12PolicyWriter);
}

__n128 initializeBufferWithCopyOfBuffer for AnalyticsAction(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for AnalyticsAction(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AnalyticsAction(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 17) = v3;
  return result;
}

uint64_t sub_100044F40(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100044F5C(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    *(_BYTE *)(result + 16) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsAction()
{
  return &type metadata for AnalyticsAction;
}

unint64_t sub_100044F90()
{
  unint64_t result;

  result = qword_100071820;
  if (!qword_100071820)
  {
    result = swift_getWitnessTable(&unk_10004DF28, &type metadata for AnalyticsAction);
    atomic_store(result, (unint64_t *)&qword_100071820);
  }
  return result;
}

unint64_t sub_100044FD8()
{
  unint64_t result;

  result = qword_100071828;
  if (!qword_100071828)
  {
    result = swift_getWitnessTable(&unk_10004E070, &type metadata for AccessCategorySet);
    atomic_store(result, (unint64_t *)&qword_100071828);
  }
  return result;
}

unint64_t sub_100045020()
{
  unint64_t result;

  result = qword_100071830;
  if (!qword_100071830)
  {
    result = swift_getWitnessTable(&unk_10004E098, &type metadata for AccessModeSet);
    atomic_store(result, (unint64_t *)&qword_100071830);
  }
  return result;
}

Swift::Int sub_100045064(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  uint64_t v42;
  char v43;
  _QWORD v44[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100005690(&qword_100070D00);
  v43 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v42 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v40 = v3;
  v41 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v23 = v22 | (v14 << 6);
      goto LABEL_34;
    }
    v24 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v24 >= v41)
      break;
    v25 = (_QWORD *)(v5 + 64);
    v26 = *(_QWORD *)(v42 + 8 * v24);
    ++v14;
    if (!v26)
    {
      v14 = v24 + 1;
      if (v24 + 1 >= v41)
        goto LABEL_36;
      v26 = *(_QWORD *)(v42 + 8 * v14);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_36:
          swift_release(v5);
          v3 = v40;
          if ((v43 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = *(_QWORD *)(v42 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v14 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v14 >= v41)
              goto LABEL_36;
            v26 = *(_QWORD *)(v42 + 8 * v14);
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v14 = v27;
      }
    }
LABEL_33:
    v11 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_34:
    v32 = 16 * v23;
    v33 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v32);
    v35 = *v33;
    v34 = v33[1];
    v36 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v32);
    v37 = *v36;
    v38 = v36[1];
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain(v33[1]);
      swift_bridgeObjectRetain(v38);
    }
    Hasher.init(_seed:)(v44, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v44, v35, v34);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v17 == v29;
        if (v17 == v29)
          v17 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v31 == -1);
      v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 16 * v18;
    v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v19);
    *v20 = v35;
    v20[1] = v34;
    v21 = (_QWORD *)(*(_QWORD *)(v8 + 56) + v19);
    *v21 = v37;
    v21[1] = v38;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v40;
  v25 = (_QWORD *)(v5 + 64);
  if ((v43 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v5 + 32);
  if (v39 >= 64)
    bzero(v25, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v39;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

void sub_100045388(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100005690(&qword_100070C90);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v9 = (_QWORD *)(v5 + 64);
    v10 = -1;
    if (v8 < 64)
      v10 = ~(-1 << v8);
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v8 + 63) >> 6;
    swift_retain(v5);
    v13 = 0;
    while (1)
    {
      if (v11)
      {
        v14 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v15 = v14 | (v13 << 6);
      }
      else
      {
        v16 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
          __break(1u);
LABEL_32:
          __break(1u);
          return;
        }
        if (v16 >= v12)
          goto LABEL_25;
        v17 = v9[v16];
        ++v13;
        if (!v17)
        {
          v13 = v16 + 1;
          if (v16 + 1 >= v12)
            goto LABEL_25;
          v17 = v9[v13];
          if (!v17)
          {
            v18 = v16 + 2;
            if (v18 >= v12)
            {
LABEL_25:
              swift_release(v5);
              if ((a2 & 1) != 0)
              {
                v22 = 1 << *(_BYTE *)(v5 + 32);
                if (v22 > 63)
                  bzero((void *)(v5 + 64), ((unint64_t)(v22 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v9 = -1 << v22;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v17 = v9[v18];
            if (!v17)
            {
              while (1)
              {
                v13 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_32;
                if (v13 >= v12)
                  goto LABEL_25;
                v17 = v9[v13];
                ++v18;
                if (v17)
                  goto LABEL_22;
              }
            }
            v13 = v18;
          }
        }
LABEL_22:
        v11 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v13 << 6);
      }
      v19 = *(_QWORD *)(v5 + 56);
      v20 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v15);
      v21 = *(_QWORD *)(v19 + 8 * v15);
      if ((a2 & 1) == 0)
        swift_retain(*(_QWORD *)(v19 + 8 * v15));
      sub_100045FBC(v20, v21, v7);
    }
  }
  swift_release(v5);
  *v3 = v7;
}

Swift::Int sub_100045568(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_100005690(a3);
  v38 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_43;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v37 = v6 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v36 = (unint64_t)(v10 + 63) >> 6;
  v13 = v8 + 64;
  result = swift_retain(v6);
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v36)
      break;
    v24 = (_QWORD *)(v6 + 64);
    v25 = *(_QWORD *)(v37 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v36)
        goto LABEL_36;
      v25 = *(_QWORD *)(v37 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v36)
        {
LABEL_36:
          swift_release(v6);
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v36)
              goto LABEL_36;
            v25 = *(_QWORD *)(v37 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v12 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v22);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain(v31[1]);
      swift_retain(v34);
    }
    Hasher.init(_seed:)(v39, *(_QWORD *)(v9 + 40));
    String.hash(into:)(v39, v33, v32);
    result = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v9 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v19);
    *v20 = v33;
    v20[1] = v32;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v19) = v34;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release(v6);
  v24 = (_QWORD *)(v6 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v6 + 32);
  if (v35 >= 64)
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v35;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_43:
  result = swift_release(v6);
  *v4 = v9;
  return result;
}

Swift::Int sub_100045878(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  char v39;
  __int128 v40;
  _QWORD v41[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100005690(&qword_100070CA8);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v36 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v38 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain(v5);
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v22 = v21 | (v14 << 6);
      }
      else
      {
        v23 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v23 >= v37)
          goto LABEL_36;
        v24 = v38[v23];
        ++v14;
        if (!v24)
        {
          v14 = v23 + 1;
          if (v23 + 1 >= v37)
            goto LABEL_36;
          v24 = v38[v14];
          if (!v24)
          {
            v25 = v23 + 2;
            if (v25 >= v37)
            {
LABEL_36:
              swift_release(v5);
              v3 = v36;
              if ((v39 & 1) != 0)
              {
                v35 = 1 << *(_BYTE *)(v5 + 32);
                if (v35 >= 64)
                  bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v35;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v24 = v38[v25];
            if (!v24)
            {
              while (1)
              {
                v14 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_43;
                if (v14 >= v37)
                  goto LABEL_36;
                v24 = v38[v14];
                ++v25;
                if (v24)
                  goto LABEL_33;
              }
            }
            v14 = v25;
          }
        }
LABEL_33:
        v11 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }
      v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
      v32 = *v30;
      v31 = v30[1];
      v33 = *(_QWORD *)(v5 + 56) + 24 * v22;
      v40 = *(_OWORD *)v33;
      v34 = *(_BYTE *)(v33 + 16);
      if ((v39 & 1) == 0)
        swift_bridgeObjectRetain(v31);
      Hasher.init(_seed:)(v41, *(_QWORD *)(v8 + 40));
      String.hash(into:)(v41, v32, v31);
      result = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v28 = v17 == v27;
          if (v17 == v27)
            v17 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v12 + 8 * v17);
        }
        while (v29 == -1);
        v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
      *v19 = v32;
      v19[1] = v31;
      v20 = *(_QWORD *)(v8 + 56) + 24 * v18;
      *(_OWORD *)v20 = v40;
      *(_BYTE *)(v20 + 16) = v34;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_100045B8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;

  v6 = v5;
  v12 = *v5;
  v14 = sub_10002D7C4(a3, a4);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_100046114();
LABEL_7:
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = (_QWORD *)(v20[7] + 16 * v14);
      result = swift_bridgeObjectRelease(v21[1]);
      *v21 = a1;
      v21[1] = a2;
      return result;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v25 = (uint64_t *)(v20[6] + 16 * v14);
    *v25 = a3;
    v25[1] = a4;
    v26 = (_QWORD *)(v20[7] + 16 * v14);
    *v26 = a1;
    v26[1] = a2;
    v27 = v20[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (!v28)
    {
      v20[2] = v29;
      return swift_bridgeObjectRetain(a4);
    }
    goto LABEL_14;
  }
  sub_100045064(v17, a5 & 1);
  v23 = sub_10002D7C4(a3, a4);
  if ((v18 & 1) == (v24 & 1))
  {
    v14 = v23;
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_100045D00(uint64_t a1, char a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v4 = v3;
  v8 = *v3;
  sub_10002D828(a2);
  v11 = v10;
  v12 = *(_QWORD *)(v8 + 16);
  v13 = (v9 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v15 = v9;
  v16 = *(_QWORD *)(v8 + 24);
  if (v16 >= v14 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v16 >= v14 && (a3 & 1) == 0)
  {
    sub_1000462CC();
LABEL_7:
    v17 = (_QWORD *)*v4;
    if ((v15 & 1) != 0)
    {
LABEL_8:
      v18 = v17[7];
      swift_release(*(_QWORD *)(v18 + 8 * v11));
      *(_QWORD *)(v18 + 8 * v11) = a1;
      return;
    }
LABEL_11:
    v17[(v11 >> 6) + 8] |= 1 << v11;
    *(_BYTE *)(v17[6] + v11) = a2;
    *(_QWORD *)(v17[7] + 8 * v11) = a1;
    v21 = v17[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
      v17[2] = v23;
      return;
    }
    goto LABEL_14;
  }
  sub_100045388(v14, a3 & 1);
  sub_10002D828(a2);
  if ((v15 & 1) == (v20 & 1))
  {
    v11 = v19;
    v17 = (_QWORD *)*v4;
    if ((v15 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for ContainerClass);
  __break(1u);
}

uint64_t sub_100045E34(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_100045E48(a1, a2, a3, a4, (void (*)(void))sub_10004646C, &qword_100070C98);
}

uint64_t sub_100045E48(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), uint64_t *a6)
{
  _QWORD *v6;
  _QWORD *v9;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t result;
  unint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;

  v9 = v6;
  v14 = *v6;
  v16 = sub_10002D7C4(a2, a3);
  v17 = *(_QWORD *)(v14 + 16);
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v20 = v15;
  v21 = *(_QWORD *)(v14 + 24);
  if (v21 >= v19 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v21 >= v19 && (a4 & 1) == 0)
  {
    a5();
LABEL_7:
    v22 = (_QWORD *)*v9;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      v23 = v22[7];
      result = swift_release(*(_QWORD *)(v23 + 8 * v16));
      *(_QWORD *)(v23 + 8 * v16) = a1;
      return result;
    }
LABEL_11:
    v22[(v16 >> 6) + 8] |= 1 << v16;
    v27 = (uint64_t *)(v22[6] + 16 * v16);
    *v27 = a2;
    v27[1] = a3;
    *(_QWORD *)(v22[7] + 8 * v16) = a1;
    v28 = v22[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (!v29)
    {
      v22[2] = v30;
      return swift_bridgeObjectRetain(a3);
    }
    goto LABEL_14;
  }
  sub_100045568(v19, a4 & 1, a6);
  v25 = sub_10002D7C4(a2, a3);
  if ((v20 & 1) == (v26 & 1))
  {
    v16 = v25;
    v22 = (_QWORD *)*v9;
    if ((v20 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_100045FBC(char a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, *(_QWORD *)(a3 + 40));
  __asm { BR              X10 }
}

unint64_t sub_100046018()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  Swift::Int v3;
  unint64_t result;
  uint64_t v5;

  ((void (*)(uint64_t *, uint64_t, unint64_t))String.hash(into:))(&v5, 0x61446E6967756C70, 0xEA00000000006174);
  swift_bridgeObjectRelease(0xEA00000000006174);
  v3 = Hasher._finalize()();
  result = ((uint64_t (*)(Swift::Int, uint64_t, uint64_t))_HashTable.nextHole(atOrAfter:))(v3 & ~(-1 << *(_BYTE *)(v0 + 32)), v0 + 64, ~(-1 << *(_BYTE *)(v0 + 32)));
  *(_QWORD *)(v0 + 64 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_BYTE *)(*(_QWORD *)(v0 + 48) + result) = v2;
  *(_QWORD *)(*(_QWORD *)(v0 + 56) + 8 * result) = v1;
  ++*(_QWORD *)(v0 + 16);
  return result;
}

void *sub_100046114()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  sub_100005690(&qword_100070D00);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain(v18);
    result = (void *)swift_bridgeObjectRetain(v22);
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000462CC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v1 = v0;
  sub_100005690(&qword_100070C90);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
    result = (void *)swift_retain(v16);
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10004646C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_100005690(&qword_100070C98);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    result = (void *)swift_retain(v20);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100046620()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_100005690(&qword_100070CA0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  v5 = *(_QWORD *)(v2 + 16);
  if (!v5)
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v7 = v2 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v8)
  {
    result = memmove(result, (const void *)(v2 + 64), 8 * v8);
    v5 = *(_QWORD *)(v2 + 16);
  }
  v10 = 0;
  *(_QWORD *)(v4 + 16) = v5;
  v11 = 1 << *(_BYTE *)(v2 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v2 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v19);
    result = (void *)swift_retain(v21);
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_1000467D4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _QWORD *v23;
  __int128 v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;

  v1 = v0;
  sub_100005690(&qword_100070CA8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      v9 = v26 + 1;
      if (v26 + 1 >= v13)
        goto LABEL_26;
      v27 = *(_QWORD *)(v6 + 8 * v9);
      if (!v27)
        break;
    }
LABEL_25:
    v12 = (v27 - 1) & v27;
    v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 24 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_BYTE *)(v21 + 16);
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v24 = *(_OWORD *)v21;
    *v23 = v19;
    v23[1] = v18;
    v25 = *(_QWORD *)(v4 + 56) + v20;
    *(_OWORD *)v25 = v24;
    *(_BYTE *)(v25 + 16) = v22;
    swift_bridgeObjectRetain(v18);
  }
  v28 = v26 + 2;
  if (v28 >= v13)
    goto LABEL_26;
  v27 = *(_QWORD *)(v6 + 8 * v28);
  if (v27)
  {
    v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v9);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_100046994()
{
  __asm { BR              X11 }
}

_QWORD *sub_1000469F4@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *(*v3)(_QWORD **__return_ptr, uint64_t *, char *);
  uint64_t v4;
  _QWORD *result;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;

  v8 = v4;
  LOWORD(v9) = a1;
  BYTE2(v9) = BYTE2(a1);
  HIBYTE(v9) = BYTE3(a1);
  v10 = BYTE4(a1);
  v11 = BYTE5(a1);
  v12 = BYTE6(a1);
  result = v3(&v7, &v8, (char *)&v8 + BYTE6(a1));
  if (!v2)
    result = v7;
  v6 = v9 | ((unint64_t)v10 << 32) | ((unint64_t)v11 << 40) | ((unint64_t)v12 << 48);
  *v1 = v8;
  v1[1] = v6;
  return result;
}

_BYTE *sub_100046C84@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = (_BYTE *)sub_100046F28(result, a2);
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = (_BYTE *)sub_100046FE8((uint64_t)result, (uint64_t)a2);
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = (_BYTE *)sub_100047060((uint64_t)result, (uint64_t)a2);
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

_QWORD *sub_100046CF8(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  if (a3)
  {
    result = a1(&v6, a3, a4 - a3);
    if (v4)
      return result;
    return (_QWORD *)v6;
  }
  result = a1(&v6, 0, 0);
  if (!v4)
    return (_QWORD *)v6;
  return result;
}

char *sub_100046D5C(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t v3;
  char *result;
  char *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = (char *)__DataStorage._bytes.getter();
  if (!result)
    goto LABEL_12;
  v8 = result;
  result = (char *)__DataStorage._offset.getter();
  v9 = a1 - (_QWORD)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  v12 = __DataStorage._length.getter();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3)
    return (char *)v14;
  return result;
}

uint64_t sub_100046E08@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  if (result)
  {
    v5 = result;
    v8 = *a3;
    v7 = a3[1];
    swift_bridgeObjectRetain(v7);
    result = _StringGuts.copyUTF8(into:)(v5, a2, v8, v7);
    if ((v9 & 1) == 0)
    {
      v10 = result;
      result = swift_bridgeObjectRelease(v7);
      *a4 = 0;
      a4[1] = 0xE000000000000000;
      a4[2] = 15;
      a4[3] = v10;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_100046E90(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000611E8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5)
    return 5;
  else
    return v3;
}

uint64_t sub_100046ED8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_100061280, a1, a2, &unk_10006E600);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x13)
    return 19;
  else
    return v3;
}

uint64_t sub_100046F28(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;

  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t sub_100046FE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (a1)
    v3 = a2 - a1;
  else
    v3 = 0;
  v4 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < 0)
  {
    __break(1u);
  }
  else
  {
    v6 = type metadata accessor for Data.RangeReference(0);
    result = swift_allocObject(v6, 32, 7);
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v3;
  }
  return result;
}

uint64_t sub_100047060(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (a1)
    v3 = a2 - a1;
  else
    v3 = 0;
  v4 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v3 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v3 & 0x80000000) == 0)
    return v3 << 32;
LABEL_10:
  __break(1u);
  return result;
}

_BYTE *sub_1000470E0(_BYTE *result, _BYTE *a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = a2 - result;
    if (a2 == result)
    {
      return 0;
    }
    else if (v2 <= 14)
    {
      return (_BYTE *)sub_100046F28(result, a2);
    }
    else if ((unint64_t)v2 >= 0x7FFFFFFF)
    {
      return (_BYTE *)sub_100046FE8((uint64_t)result, (uint64_t)a2);
    }
    else
    {
      return (_BYTE *)sub_100047060((uint64_t)result, (uint64_t)a2);
    }
  }
  return result;
}

uint64_t sub_100047144(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (result)
  {
    v1 = result;
    if (result <= 14)
    {
      if (result < 0)
        __break(1u);
      else
        return 0;
    }
    else
    {
      v2 = type metadata accessor for __DataStorage(0);
      swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
      __DataStorage.init(length:)(v1);
      if (v1 >= 0x7FFFFFFF)
      {
        v3 = type metadata accessor for Data.RangeReference(0);
        result = swift_allocObject(v3, 32, 7);
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

uint64_t sub_1000471E0(unsigned __int8 a1)
{
  return ((uint64_t (*)())((char *)nullsub_2 + 4 * byte_10004DE68[a1]))();
}

uint64_t sub_100047204@<X0>(unint64_t a1@<X2>, char a2@<W3>, __int16 a3@<W8>)
{
  uint64_t v3;

  if ((a3 & 0x100) != 0)
    v3 = 3;
  else
    v3 = 4;
  if ((a3 & 0x100) == 0 || (a2 & 1) != 0)
    return nullsub_2(v3);
  if (!(a1 / 0xE10))
    return 11;
  if (a1 / 0xE10 == 1)
    return 12;
  if ((a1 - 7200) >> 5 < 0xE1)
    return 13;
  if ((a1 - 14400) >> 6 < 0xE1)
    return 14;
  if ((a1 - 28800) >> 6 < 0xE1)
    return 15;
  if ((a1 - 43200) >> 6 < 0x2A3)
    return 16;
  return 17;
}

uint64_t sub_1000472F8(unsigned int a1)
{
  if (a1 >= 5)
    return 5;
  else
    return (0x203030100uLL >> (8 * a1));
}

uint64_t sub_10004731C(unsigned __int8 a1, char a2)
{
  if ((a2 & 1) != 0)
    return ((uint64_t (*)(uint64_t))((char *)&loc_100047340 + 4 * byte_10004DE71[a1]))(6144);
  else
    return 1 << qword_10004ECA0[(char)a1];
}

void sub_100047364()
{
  JUMPOUT(0x100047358);
}

void sub_10004736C()
{
  JUMPOUT(0x100047358);
}

void sub_100047374()
{
  JUMPOUT(0x100047358);
}

void sub_10004737C()
{
  JUMPOUT(0x100047358);
}

void sub_100047384()
{
  JUMPOUT(0x100047358);
}

void sub_10004738C()
{
  JUMPOUT(0x100047358);
}

void sub_100047394()
{
  JUMPOUT(0x100047358);
}

void sub_10004739C()
{
  JUMPOUT(0x100047358);
}

void sub_1000473A4()
{
  JUMPOUT(0x100047358);
}

void sub_1000473AC()
{
  JUMPOUT(0x100047358);
}

uint64_t sub_1000473B4()
{
  return 14336;
}

uint64_t sub_1000473BC()
{
  return 30720;
}

uint64_t sub_1000473C4()
{
  return 63488;
}

uint64_t sub_1000473CC()
{
  return 129024;
}

uint64_t sub_1000473D4()
{
  return 260096;
}

void sub_1000473DC()
{
  JUMPOUT(0x100047358);
}

uint64_t sub_1000473E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_10004741C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 1885956947 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1885956947, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x746365707845 && a2 == 0xE600000000000000)
  {
    v7 = 0xE600000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746365707845, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x74726F706552 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74726F706552, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_100047550(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x7365646F6DLL && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7365646F6DLL, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x69726F6765746163 && a2 == 0xEA00000000007365)
  {
    swift_bridgeObjectRelease(0xEA00000000007365);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x69726F6765746163, 0xEA00000000007365, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100047644(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  __n128 v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;

  v2 = sub_100005690(&qword_100071838);
  v37 = *(_QWORD *)(v2 - 8);
  v38 = v2;
  __chkstk_darwin(v2);
  v41 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_100005690(&qword_100071840);
  v39 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v40 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005690(&qword_100071848);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005690(&qword_100071850);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  v42 = a1;
  sub_100005E2C(a1, v13);
  v15 = sub_100047B08();
  v16 = v43;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AnalyticsAction.CodingKeys, &type metadata for AnalyticsAction.CodingKeys, v15, v13, v14);
  if (!v16)
  {
    v35 = v5;
    v17 = v40;
    v18 = v41;
    v43 = KeyedDecodingContainer.allKeys.getter(v9);
    if (*(_QWORD *)(v43 + 16) == 1)
    {
      if (*(_BYTE *)(v43 + 32))
      {
        if (*(_BYTE *)(v43 + 32) == 1)
        {
          v19 = v10;
          LOBYTE(v46) = 1;
          v20 = sub_100047B90();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for AnalyticsAction.ExpectCodingKeys, &v46, v9, &type metadata for AnalyticsAction.ExpectCodingKeys, v20);
          v41 = (char *)v9;
          LOBYTE(v45) = 0;
          v30 = sub_100047BD4();
          v31 = v36;
          KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for AccessModeSet, &v45, v36, &type metadata for AccessModeSet, v30);
          v32 = v17;
          v5 = v46;
          v44 = 1;
          v33 = sub_100047C18();
          KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for AccessCategorySet, &v44, v31, &type metadata for AccessCategorySet, v33);
          (*(void (**)(char *, uint64_t))(v39 + 8))(v32, v31);
          swift_bridgeObjectRelease(v43);
          (*(void (**)(char *, char *))(v19 + 8))(v12, v41);
        }
        else
        {
          LOBYTE(v46) = 2;
          v28 = sub_100047B4C();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for AnalyticsAction.ReportCodingKeys, &v46, v9, &type metadata for AnalyticsAction.ReportCodingKeys, v28);
          (*(void (**)(char *, uint64_t))(v37 + 8))(v18, v38);
          swift_bridgeObjectRelease(v43);
          (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
          v5 = 1;
        }
      }
      else
      {
        LOBYTE(v46) = 0;
        v27 = sub_100047C5C();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for AnalyticsAction.SkipCodingKeys, &v46, v9, &type metadata for AnalyticsAction.SkipCodingKeys, v27);
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v35);
        swift_bridgeObjectRelease(v43);
        (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
        v5 = 0;
      }
    }
    else
    {
      v21 = v12;
      v22 = type metadata accessor for DecodingError(0);
      swift_allocError(v22, &protocol witness table for DecodingError, 0, 0);
      v24 = v23;
      v5 = (uint64_t)v23 + *(int *)(sub_100005690(&qword_100071860) + 48);
      *v24 = &type metadata for AnalyticsAction;
      v25 = KeyedDecodingContainer.codingPath.getter(v9);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v25, 0xD00000000000002BLL, 0x8000000100055190, 0);
      v26.n128_f64[0] = (*(double (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v24, enum case for DecodingError.typeMismatch(_:), v22);
      swift_willThrow(v26);
      swift_bridgeObjectRelease(v43);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v21, v9);
    }
  }
  sub_100005D78(v42);
  return v5;
}

unint64_t sub_100047B08()
{
  unint64_t result;

  result = qword_100071858;
  if (!qword_100071858)
  {
    result = swift_getWitnessTable(&unk_10004EB40, &type metadata for AnalyticsAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100071858);
  }
  return result;
}

unint64_t sub_100047B4C()
{
  unint64_t result;

  result = qword_100071868;
  if (!qword_100071868)
  {
    result = swift_getWitnessTable(&unk_10004EAF0, &type metadata for AnalyticsAction.ReportCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100071868);
  }
  return result;
}

unint64_t sub_100047B90()
{
  unint64_t result;

  result = qword_100071870;
  if (!qword_100071870)
  {
    result = swift_getWitnessTable(&unk_10004EAA0, &type metadata for AnalyticsAction.ExpectCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100071870);
  }
  return result;
}

unint64_t sub_100047BD4()
{
  unint64_t result;

  result = qword_100071878;
  if (!qword_100071878)
  {
    result = swift_getWitnessTable(&unk_10004EA78, &type metadata for AccessModeSet);
    atomic_store(result, (unint64_t *)&qword_100071878);
  }
  return result;
}

unint64_t sub_100047C18()
{
  unint64_t result;

  result = qword_100071880;
  if (!qword_100071880)
  {
    result = swift_getWitnessTable(&unk_10004EA50, &type metadata for AccessCategorySet);
    atomic_store(result, (unint64_t *)&qword_100071880);
  }
  return result;
}

unint64_t sub_100047C5C()
{
  unint64_t result;

  result = qword_100071888;
  if (!qword_100071888)
  {
    result = swift_getWitnessTable(&unk_10004EA00, &type metadata for AnalyticsAction.SkipCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100071888);
  }
  return result;
}

unint64_t sub_100047CA0()
{
  unint64_t result;

  result = qword_1000718B0;
  if (!qword_1000718B0)
  {
    result = swift_getWitnessTable(&unk_10004E9D8, &type metadata for AccessModeSet);
    atomic_store(result, (unint64_t *)&qword_1000718B0);
  }
  return result;
}

unint64_t sub_100047CE4()
{
  unint64_t result;

  result = qword_1000718B8;
  if (!qword_1000718B8)
  {
    result = swift_getWitnessTable(&unk_10004E9B0, &type metadata for AccessCategorySet);
    atomic_store(result, (unint64_t *)&qword_1000718B8);
  }
  return result;
}

unint64_t sub_100047D28()
{
  unint64_t result;

  result = qword_1000718E0;
  if (!qword_1000718E0)
  {
    result = swift_getWitnessTable(&unk_10004E988, &type metadata for AnalyticsPolicyRule);
    atomic_store(result, (unint64_t *)&qword_1000718E0);
  }
  return result;
}

unint64_t sub_100047D6C()
{
  unint64_t result;

  result = qword_1000718E8;
  if (!qword_1000718E8)
  {
    result = swift_getWitnessTable(&unk_10004E948, &type metadata for AnalyticsPolicyError);
    atomic_store(result, (unint64_t *)&qword_1000718E8);
  }
  return result;
}

_QWORD *sub_100047DB0(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return a1;
}

_QWORD *sub_100047DD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  _QWORD v13[2];

  v5 = *(uint64_t **)(v3 + 16);
  v7 = *v5;
  v6 = v5[1];
  v13[0] = v7;
  v13[1] = v6;
  v12[2] = v13;
  result = sub_100046CF8((_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_100047E34, (uint64_t)v12, a1, a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  return result;
}

uint64_t sub_100047E34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  return sub_100046E08(a1, a2, *(uint64_t **)(v3 + 16), a3);
}

uint64_t storeEnumTagSinglePayload for AccessMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100047E9C + 4 * byte_10004DE89[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100047ED0 + 4 * byte_10004DE84[v4]))();
}

uint64_t sub_100047ED0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100047ED8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100047EE0);
  return result;
}

uint64_t sub_100047EEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100047EF4);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100047EF8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100047F00(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessMode()
{
  return &type metadata for AccessMode;
}

uint64_t getEnumTagSinglePayload for AccessCategory(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEE)
    goto LABEL_17;
  if (a2 + 18 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 18) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 18;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 18;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 18;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x13;
  v8 = v6 - 19;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessCategory(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 18 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 18) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xED)
    return ((uint64_t (*)(void))((char *)&loc_100047FF8 + 4 * byte_10004DE93[v4]))();
  *a1 = a2 + 18;
  return ((uint64_t (*)(void))((char *)sub_10004802C + 4 * byte_10004DE8E[v4]))();
}

uint64_t sub_10004802C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100048034(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10004803CLL);
  return result;
}

uint64_t sub_100048048(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100048050);
  *(_BYTE *)result = a2 + 18;
  return result;
}

uint64_t sub_100048054(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004805C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessCategory()
{
  return &type metadata for AccessCategory;
}

void sub_100048078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  __asm { BR              X10 }
}

uint64_t sub_1000480A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain(a1);
  return swift_bridgeObjectRetain(a3);
}

void destroy for AnalyticsPolicyError(uint64_t a1)
{
  sub_1000480D8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
}

void sub_1000480D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  __asm { BR              X10 }
}

uint64_t sub_100048108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRelease(a1);
  return swift_bridgeObjectRelease(a3);
}

uint64_t initializeWithCopy for AnalyticsPolicyError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 40);
  sub_100048078(*(_QWORD *)a2, v4, v5, v6, v7, v8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  return a1;
}

uint64_t assignWithCopy for AnalyticsPolicyError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 40);
  sub_100048078(*(_QWORD *)a2, v4, v5, v6, v7, v8);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  v14 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v8;
  sub_1000480D8(v9, v10, v11, v12, v13, v14);
  return a1;
}

__n128 initializeWithTake for AnalyticsPolicyRule(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AnalyticsPolicyError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  char v11;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 32) = v3;
  v11 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v4;
  sub_1000480D8(v5, v7, v6, v8, v9, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnalyticsPolicyError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7D && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 125);
  v3 = ((*(unsigned __int8 *)(a1 + 40) >> 6) & 0xFFFFFF83 | (4 * ((*(unsigned __int8 *)(a1 + 40) >> 1) & 0x1F))) ^ 0x7F;
  if (v3 >= 0x7C)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AnalyticsPolicyError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7C)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 125;
    if (a3 >= 0x7D)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0x7D)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
    {
      *(_QWORD *)(result + 32) = 0;
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_BYTE *)(result + 40) = 2 * (((-a2 >> 2) & 0x1F) - 32 * a2);
    }
  }
  return result;
}

uint64_t sub_10004833C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40) >> 6;
}

uint64_t sub_100048348(uint64_t result)
{
  *(_BYTE *)(result + 40) &= 0x3Fu;
  return result;
}

uint64_t sub_100048358(uint64_t result, char a2)
{
  *(_BYTE *)(result + 40) = *(_BYTE *)(result + 40) & 1 | (a2 << 6);
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsPolicyError()
{
  return &type metadata for AnalyticsPolicyError;
}

uint64_t destroy for AnalyticsPolicyRule(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

uint64_t initializeWithCopy for AnalyticsPolicyRule(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for AnalyticsPolicyRule(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v8;
  return a1;
}

uint64_t assignWithTake for AnalyticsPolicyRule(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnalyticsPolicyRule(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 41))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnalyticsPolicyRule(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 41) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsPolicyRule()
{
  return &type metadata for AnalyticsPolicyRule;
}

ValueMetadata *type metadata accessor for AnalyticsAction.CodingKeys()
{
  return &type metadata for AnalyticsAction.CodingKeys;
}

ValueMetadata *type metadata accessor for AnalyticsAction.SkipCodingKeys()
{
  return &type metadata for AnalyticsAction.SkipCodingKeys;
}

uint64_t storeEnumTagSinglePayload for AnalyticsAction.ExpectCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000485D0 + 4 * byte_10004DEA5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100048604 + 4 * byte_10004DEA0[v4]))();
}

uint64_t sub_100048604(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004860C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100048614);
  return result;
}

uint64_t sub_100048620(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100048628);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10004862C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100048634(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsAction.ExpectCodingKeys()
{
  return &type metadata for AnalyticsAction.ExpectCodingKeys;
}

ValueMetadata *type metadata accessor for AnalyticsAction.ReportCodingKeys()
{
  return &type metadata for AnalyticsAction.ReportCodingKeys;
}

ValueMetadata *type metadata accessor for AccessCategorySet()
{
  return &type metadata for AccessCategorySet;
}

ValueMetadata *type metadata accessor for AccessModeSet()
{
  return &type metadata for AccessModeSet;
}

unint64_t sub_100048684()
{
  unint64_t result;

  result = qword_100071988;
  if (!qword_100071988)
  {
    result = swift_getWitnessTable(&unk_10004E1E0, &type metadata for AccessModeSet);
    atomic_store(result, (unint64_t *)&qword_100071988);
  }
  return result;
}

unint64_t sub_1000486CC()
{
  unint64_t result;

  result = qword_100071990;
  if (!qword_100071990)
  {
    result = swift_getWitnessTable(&unk_10004E210, &type metadata for AccessModeSet);
    atomic_store(result, (unint64_t *)&qword_100071990);
  }
  return result;
}

unint64_t sub_100048714()
{
  unint64_t result;

  result = qword_100071998;
  if (!qword_100071998)
  {
    result = swift_getWitnessTable(&unk_10004E248, &type metadata for AccessModeSet);
    atomic_store(result, (unint64_t *)&qword_100071998);
  }
  return result;
}

unint64_t sub_10004875C()
{
  unint64_t result;

  result = qword_1000719A0;
  if (!qword_1000719A0)
  {
    result = swift_getWitnessTable(&unk_10004E388, &type metadata for AccessCategorySet);
    atomic_store(result, (unint64_t *)&qword_1000719A0);
  }
  return result;
}

unint64_t sub_1000487A4()
{
  unint64_t result;

  result = qword_1000719A8;
  if (!qword_1000719A8)
  {
    result = swift_getWitnessTable(&unk_10004E3B8, &type metadata for AccessCategorySet);
    atomic_store(result, (unint64_t *)&qword_1000719A8);
  }
  return result;
}

unint64_t sub_1000487EC()
{
  unint64_t result;

  result = qword_1000719B0;
  if (!qword_1000719B0)
  {
    result = swift_getWitnessTable(&unk_10004E3F0, &type metadata for AccessCategorySet);
    atomic_store(result, (unint64_t *)&qword_1000719B0);
  }
  return result;
}

unint64_t sub_100048834()
{
  unint64_t result;

  result = qword_1000719B8;
  if (!qword_1000719B8)
  {
    result = swift_getWitnessTable(&unk_10004E610, &type metadata for AnalyticsAction.ExpectCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000719B8);
  }
  return result;
}

unint64_t sub_10004887C()
{
  unint64_t result;

  result = qword_1000719C0;
  if (!qword_1000719C0)
  {
    result = swift_getWitnessTable(&unk_10004E718, &type metadata for AnalyticsAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000719C0);
  }
  return result;
}

unint64_t sub_1000488C4()
{
  unint64_t result;

  result = qword_1000719C8;
  if (!qword_1000719C8)
  {
    result = swift_getWitnessTable(&unk_10004E7E0, &type metadata for AccessCategory);
    atomic_store(result, (unint64_t *)&qword_1000719C8);
  }
  return result;
}

unint64_t sub_10004890C()
{
  unint64_t result;

  result = qword_1000719D0;
  if (!qword_1000719D0)
  {
    result = swift_getWitnessTable(&unk_10004E880, &type metadata for AccessMode);
    atomic_store(result, (unint64_t *)&qword_1000719D0);
  }
  return result;
}

unint64_t sub_100048954()
{
  unint64_t result;

  result = qword_1000719D8;
  if (!qword_1000719D8)
  {
    result = swift_getWitnessTable(&unk_10004E638, &type metadata for AnalyticsAction.SkipCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000719D8);
  }
  return result;
}

unint64_t sub_10004899C()
{
  unint64_t result;

  result = qword_1000719E0;
  if (!qword_1000719E0)
  {
    result = swift_getWitnessTable(&unk_10004E660, &type metadata for AnalyticsAction.SkipCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000719E0);
  }
  return result;
}

unint64_t sub_1000489E4()
{
  unint64_t result;

  result = qword_1000719E8;
  if (!qword_1000719E8)
  {
    result = swift_getWitnessTable(&unk_10004E580, &type metadata for AnalyticsAction.ExpectCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000719E8);
  }
  return result;
}

unint64_t sub_100048A2C()
{
  unint64_t result;

  result = qword_1000719F0;
  if (!qword_1000719F0)
  {
    result = swift_getWitnessTable(&unk_10004E5A8, &type metadata for AnalyticsAction.ExpectCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000719F0);
  }
  return result;
}

unint64_t sub_100048A74()
{
  unint64_t result;

  result = qword_1000719F8;
  if (!qword_1000719F8)
  {
    result = swift_getWitnessTable(&unk_10004E530, &type metadata for AnalyticsAction.ReportCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000719F8);
  }
  return result;
}

unint64_t sub_100048ABC()
{
  unint64_t result;

  result = qword_100071A00;
  if (!qword_100071A00)
  {
    result = swift_getWitnessTable(&unk_10004E558, &type metadata for AnalyticsAction.ReportCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100071A00);
  }
  return result;
}

unint64_t sub_100048B04()
{
  unint64_t result;

  result = qword_100071A08;
  if (!qword_100071A08)
  {
    result = swift_getWitnessTable(&unk_10004E688, &type metadata for AnalyticsAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100071A08);
  }
  return result;
}

unint64_t sub_100048B4C()
{
  unint64_t result;

  result = qword_100071A10;
  if (!qword_100071A10)
  {
    result = swift_getWitnessTable(&unk_10004E6B0, &type metadata for AnalyticsAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100071A10);
  }
  return result;
}

uint64_t sub_100048B90(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 1752457584 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1752457584, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x737365636F7270 && a2 == 0xE700000000000000)
  {
    v7 = 0xE700000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x737365636F7270, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6E6F69746361 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F69746361, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_100048CCC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  char v28;
  char v29;

  v5 = sub_100005690(&qword_100071A18);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100005E2C(a1, v9);
  v11 = sub_100048F48();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AnalyticsPolicyRule.CodingKeys, &type metadata for AnalyticsPolicyRule.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_100005D78(a1);
  LOBYTE(v27[0]) = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(v27, v5);
  v14 = v13;
  v26 = v12;
  v15 = sub_100005690(&qword_100071A28);
  v29 = 1;
  v16 = sub_100049058(&qword_100071A30, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
  swift_bridgeObjectRetain(v14);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v15, &v29, v5, v15, v16);
  v17 = v27[0];
  v29 = 2;
  v18 = sub_100048F8C();
  v25 = v17;
  swift_bridgeObjectRetain(v17);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for AnalyticsAction, &v29, v5, &type metadata for AnalyticsAction, v18);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v19 = v27[0];
  v20 = v27[1];
  v21 = v28;
  sub_100005D78(a1);
  v22 = v25;
  swift_bridgeObjectRelease(v25);
  result = swift_bridgeObjectRelease(v14);
  *(_QWORD *)a2 = v26;
  *(_QWORD *)(a2 + 8) = v14;
  *(_QWORD *)(a2 + 16) = v22;
  *(_QWORD *)(a2 + 24) = v19;
  *(_QWORD *)(a2 + 32) = v20;
  *(_BYTE *)(a2 + 40) = v21;
  return result;
}

unint64_t sub_100048F48()
{
  unint64_t result;

  result = qword_100071A20;
  if (!qword_100071A20)
  {
    result = swift_getWitnessTable(&unk_10004EC48, &type metadata for AnalyticsPolicyRule.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100071A20);
  }
  return result;
}

unint64_t sub_100048F8C()
{
  unint64_t result;

  result = qword_100071A38;
  if (!qword_100071A38)
  {
    result = swift_getWitnessTable(&unk_10004DFB8, &type metadata for AnalyticsAction);
    atomic_store(result, (unint64_t *)&qword_100071A38);
  }
  return result;
}

unint64_t sub_100048FD0()
{
  unint64_t result;

  result = qword_100071A40;
  if (!qword_100071A40)
  {
    result = swift_getWitnessTable(&unk_10004E808, &type metadata for AccessMode);
    atomic_store(result, (unint64_t *)&qword_100071A40);
  }
  return result;
}

unint64_t sub_100049014()
{
  unint64_t result;

  result = qword_100071A48;
  if (!qword_100071A48)
  {
    result = swift_getWitnessTable(&unk_10004E768, &type metadata for AccessCategory);
    atomic_store(result, (unint64_t *)&qword_100071A48);
  }
  return result;
}

uint64_t sub_100049058(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100005F1C(&qword_100071A28);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000490B8(__int128 *a1, uint64_t a2)
{
  __int128 v2;

  v2 = *a1;
  *(_BYTE *)(a2 + 16) = *((_BYTE *)a1 + 16);
  *(_OWORD *)a2 = v2;
  return a2;
}

unint64_t sub_1000490D0()
{
  unint64_t result;

  result = qword_100071A60;
  if (!qword_100071A60)
  {
    result = swift_getWitnessTable(&unk_10004DF90, &type metadata for AnalyticsAction);
    atomic_store(result, (unint64_t *)&qword_100071A60);
  }
  return result;
}

uint64_t _s14applekeystored15AnalyticsActionO10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100049160 + 4 * byte_10004DEAF[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100049194 + 4 * byte_10004DEAA[v4]))();
}

uint64_t sub_100049194(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004919C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000491A4);
  return result;
}

uint64_t sub_1000491B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000491B8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000491BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000491C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsPolicyRule.CodingKeys()
{
  return &type metadata for AnalyticsPolicyRule.CodingKeys;
}

unint64_t sub_1000491E4()
{
  unint64_t result;

  result = qword_100071A68;
  if (!qword_100071A68)
  {
    result = swift_getWitnessTable(&unk_10004EC20, &type metadata for AnalyticsPolicyRule.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100071A68);
  }
  return result;
}

unint64_t sub_10004922C()
{
  unint64_t result;

  result = qword_100071A70;
  if (!qword_100071A70)
  {
    result = swift_getWitnessTable(&unk_10004EB90, &type metadata for AnalyticsPolicyRule.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100071A70);
  }
  return result;
}

unint64_t sub_100049274()
{
  unint64_t result;

  result = qword_100071A78;
  if (!qword_100071A78)
  {
    result = swift_getWitnessTable(&unk_10004EBB8, &type metadata for AnalyticsPolicyRule.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100071A78);
  }
  return result;
}
