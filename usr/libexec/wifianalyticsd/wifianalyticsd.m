void sub_100003E60(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.wifi.analytics", "Default");
  v2 = (void *)WALogCategoryDefault;
  WALogCategoryDefault = (uint64_t)v1;

}

id WALogCategoryDefaultHandle()
{
  if (qword_1000ECF18 != -1)
    dispatch_once(&qword_1000ECF18, &stru_1000CCB80);
  return (id)qword_1000ECF20;
}

void sub_100003ED0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.wifi.analytics", "Default");
  v2 = (void *)qword_1000ECF20;
  qword_1000ECF20 = (uint64_t)v1;

}

id WALogDiagnosticProfileLogHandle()
{
  if (qword_1000ECF28 != -1)
    dispatch_once(&qword_1000ECF28, &stru_1000CCBA0);
  return (id)qword_1000ECF30;
}

void sub_100003F40(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.wifi.analytics", "diagnosticstream");
  v2 = (void *)qword_1000ECF30;
  qword_1000ECF30 = (uint64_t)v1;

}

id WALogWorkReportHandle()
{
  if (qword_1000ECF38 != -1)
    dispatch_once(&qword_1000ECF38, &stru_1000CCBC0);
  return (id)qword_1000ECF40;
}

void sub_100003FB0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.wifi.analytics", "WorkReport");
  v2 = (void *)qword_1000ECF40;
  qword_1000ECF40 = (uint64_t)v1;

}

id WALogActivityManagerHandle()
{
  if (qword_1000ECF48 != -1)
    dispatch_once(&qword_1000ECF48, &stru_1000CCBE0);
  return (id)qword_1000ECF50;
}

void sub_100004020(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.wifi.analytics", "Activity");
  v2 = (void *)qword_1000ECF50;
  qword_1000ECF50 = (uint64_t)v1;

}

void sub_100004260(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_100004274(uint64_t a1)
{
  void *v2;
  id WeakRetained;
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  _BYTE *v15;
  void *v16;
  void *v17;
  void *v18;
  _BYTE *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  WAMessageAWDStoreEntry *v25;
  void *v26;
  void *v27;
  id v28;
  NSObject *v29;
  id v30;
  int v31;
  const char *v32;
  __int16 v33;
  int v34;
  __int16 v35;
  id v36;
  __int16 v37;
  void *v38;
  __int16 v39;
  void *v40;
  __int16 v41;
  id v42;

  v2 = objc_autoreleasePoolPush();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = WALogCategoryDefaultHandle();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uuid"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "key"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "originalClassName"));
    v31 = 136447490;
    v32 = "-[WAMessageAWDStore updateMessage:]_block_invoke";
    v33 = 1024;
    v34 = 60;
    v35 = 2112;
    v36 = v6;
    v37 = 2112;
    v38 = v7;
    v39 = 2112;
    v40 = v8;
    v41 = 2048;
    v42 = objc_msgSend(WeakRetained, "storeSize");
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%{public}s::%d:Message store ingesting message with UUID: %@ key: %@ and original classname: %@ size before: %lu", (uint8_t *)&v31, 0x3Au);

  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "uuidToMessageMap"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uuid"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v10));

  if (v11)
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "uuidToMessageMap"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uuid"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", v13));
    v15 = objc_msgSend(v14, "size");

    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "uuidToMessageMap"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uuid"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectForKeyedSubscript:", v17));
    objc_msgSend(v18, "updatePayload:", *(_QWORD *)(a1 + 32));

    v19 = objc_msgSend(WeakRetained, "storeSize");
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "uuidToMessageMap"));
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uuid"));
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "objectForKeyedSubscript:", v21));
    objc_msgSend(WeakRetained, "setStoreSize:", (char *)objc_msgSend(v22, "size") + v19 - v15);

    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "uuidToMessageMap"));
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uuid"));
    v25 = (WAMessageAWDStoreEntry *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "objectForKeyedSubscript:", v24));

  }
  else
  {
    v25 = -[WAMessageAWDStoreEntry initWithPayload:]([WAMessageAWDStoreEntry alloc], "initWithPayload:", *(_QWORD *)(a1 + 32));
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "uuidToMessageMap"));
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uuid"));
    objc_msgSend(v26, "setObject:forKeyedSubscript:", v25, v27);

    objc_msgSend(WeakRetained, "setStoreSize:", (char *)objc_msgSend(WeakRetained, "storeSize") + -[WAMessageAWDStoreEntry size](v25, "size"));
  }
  objc_msgSend(WeakRetained, "_insertInOrder:", v25);
  objc_msgSend(WeakRetained, "_purgeIfNecessary");
  v28 = WALogCategoryDefaultHandle();
  v29 = objc_claimAutoreleasedReturnValue(v28);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
  {
    v30 = objc_msgSend(WeakRetained, "storeSize");
    v31 = 136446722;
    v32 = "-[WAMessageAWDStore updateMessage:]_block_invoke";
    v33 = 1024;
    v34 = 75;
    v35 = 2048;
    v36 = v30;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "%{public}s::%d:Size after: %lu", (uint8_t *)&v31, 0x1Cu);
  }

  objc_autoreleasePoolPop(v2);
}

void sub_100004858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  objc_destroyWeak((id *)(v10 - 88));
  _Unwind_Resume(a1);
}

uint64_t sub_100004880(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100004890(uint64_t a1)
{

}

void sub_100004898(uint64_t a1)
{
  void *v2;
  id WeakRetained;
  void *v4;
  void *v5;
  void *v6;

  v2 = objc_autoreleasePoolPush();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "uuidToMessageMap"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32)));

  if (v5)
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "message"));
  else
    v6 = 0;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v6);
  if (v5)

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
  objc_autoreleasePoolPop(v2);
}

int64_t sub_1000049C8(id a1, WAMessageAWDStoreEntry *a2, WAMessageAWDStoreEntry *a3)
{
  WAMessageAWDStoreEntry *v4;
  WAMessageAWDStoreEntry *v5;
  id v6;
  int64_t v7;
  id v8;

  v4 = a2;
  v5 = a3;
  v6 = -[WAMessageAWDStoreEntry lastModifiedTimeInMillisecondEpoch](v4, "lastModifiedTimeInMillisecondEpoch");
  if (v6 <= (id)-[WAMessageAWDStoreEntry lastModifiedTimeInMillisecondEpoch](v5, "lastModifiedTimeInMillisecondEpoch"))
  {
    v8 = -[WAMessageAWDStoreEntry lastModifiedTimeInMillisecondEpoch](v4, "lastModifiedTimeInMillisecondEpoch");
    v7 = v8 < (id)-[WAMessageAWDStoreEntry lastModifiedTimeInMillisecondEpoch](v5, "lastModifiedTimeInMillisecondEpoch");
  }
  else
  {
    v7 = -1;
  }

  return v7;
}

void sub_100004F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100004F48(uint64_t a1)
{
  void *v2;
  id WeakRetained;
  void *v4;
  void *v5;

  v2 = objc_autoreleasePoolPush();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "uuidToMessageMap"));
  objc_msgSend(v4, "removeAllObjects");

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "sortedByLastAccess"));
  objc_msgSend(v5, "removeAllObjects");

  objc_msgSend(WeakRetained, "setStoreSize:", 0);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

  objc_autoreleasePoolPop(v2);
}

void sub_10000531C(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_100005330(uint64_t a1)
{
  void *v2;
  id WeakRetained;

  v2 = objc_autoreleasePoolPush();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_removeMessageWithUUID:", *(_QWORD *)(a1 + 32));

  objc_autoreleasePoolPop(v2);
}

void sub_100005400(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, void *a7, void *a8, void *a9)
{
  id v14;
  id v15;
  id v16;
  id v17;
  NSObject *v18;
  id v19;
  NSObject *v20;
  id v21;
  NSObject *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  NSObject *v35;
  void *v36;
  void *v37;
  id v38;
  int v39;
  void *v40;
  void *v41;
  unsigned __int8 v42;
  id v43;
  NSObject *v44;
  _BOOL4 v45;
  void *v46;
  void *v47;
  void *v48;
  id v49;
  NSObject *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  id v82;
  NSObject *v83;
  id v84;
  NSObject *v85;
  id v86;
  NSObject *v87;
  id v88;
  id v89;
  id v90;
  id v91;
  void *v92;
  void *v93;
  void *v94;
  char *v95;
  uint64_t v96;
  char *i;
  void *v98;
  id v99;
  void *v100;
  void *v101;
  unsigned __int8 v102;
  id v103;
  NSObject *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  id v134;
  NSObject *v135;
  id v136;
  NSObject *v137;
  id v138;
  id v139;
  id v140;
  id v141;
  void *v142;
  void *v143;
  void *v144;
  char *v145;
  uint64_t v146;
  char *j;
  void *v148;
  id v149;
  void *v150;
  void *v151;
  unsigned __int8 v152;
  id v153;
  NSObject *v154;
  void *v155;
  void *v156;
  void *v157;
  void *v158;
  void *v159;
  void *v160;
  void *v161;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  void *v167;
  void *v168;
  void *v169;
  void *v170;
  void *v171;
  void *v172;
  void *v173;
  void *v174;
  void *v175;
  void *v176;
  void *v177;
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  void *v182;
  void *v183;
  id v184;
  NSObject *v185;
  id v186;
  NSObject *v187;
  id v188;
  id v189;
  id v190;
  id v191;
  void *v192;
  void *v193;
  void *v194;
  char *v195;
  uint64_t v196;
  char *k;
  void *v198;
  id v199;
  void *v200;
  void *v201;
  unsigned __int8 v202;
  id v203;
  NSObject *v204;
  void *v205;
  void *v206;
  void *v207;
  void *v208;
  void *v209;
  void *v210;
  void *v211;
  void *v212;
  void *v213;
  void *v214;
  void *v215;
  void *v216;
  void *v217;
  void *v218;
  void *v219;
  void *v220;
  void *v221;
  void *v222;
  void *v223;
  void *v224;
  void *v225;
  void *v226;
  void *v227;
  void *v228;
  void *v229;
  void *v230;
  void *v231;
  void *v232;
  void *v233;
  id v234;
  id v235;
  NSObject *v236;
  void *v237;
  id v238;
  NSObject *v239;
  id v240;
  NSObject *v241;
  id v242;
  id v243;
  NSObject *v244;
  void *v245;
  void *v246;
  id v247;
  id v248;
  id v249;
  void *v250;
  void *v251;
  uint64_t v252;
  char v253;
  char v254;
  id v255;
  void *v256;
  void *v257;
  BOOL v258;
  void *v259;
  void *v260;
  void *v261;
  _BOOL4 v262;
  void *v263;
  void *v264;
  _BOOL4 v265;
  void *v266;
  void *v267;
  void *v268;
  id v269;
  void *v270;
  void *v271;
  void *v272;
  char v273;
  id v274;
  NSObject *v275;
  id v276;
  id v277;
  id v278;
  void *v279;
  uint64_t v280;
  char v281;
  char v282;
  id v283;
  void *v284;
  void *v285;
  BOOL v286;
  void *v287;
  void *v288;
  _BOOL4 v289;
  void *v290;
  void *v291;
  void *v292;
  id v293;
  void *v294;
  void *v295;
  void *v296;
  char v297;
  id v298;
  NSObject *v299;
  id v300;
  NSObject *v301;
  id v302;
  NSObject *v303;
  id v304;
  NSObject *v305;
  void *v306;
  void *v307;
  void *v308;
  id v309;
  void *v310;
  void *v311;
  void *v312;
  void *v313;
  void *v314;
  id v315;
  void *v316;
  void *v317;
  void *v318;
  id v319;
  void (**v320)(id, id, id);
  void *context;
  id contexta;
  id contextb;
  id contextc;
  void *contextd;
  id v326;
  id v327;
  id v328;
  id v329;
  id v330;
  void *v331;
  void *v332;
  id v333;
  id v334;
  id v335;
  id v336;
  id v337;
  id v338;
  id v339;
  id WeakRetained;
  id v341;
  id val;
  id v343;
  id v344;
  id v345;
  id v346;
  id v347;
  id v348;
  id v350;
  id v351;
  id v352;
  id location;
  id v354[2];
  __int128 v355;
  __int128 v356;
  __int128 v357;
  id v358;
  uint8_t v359[4];
  const char *v360;
  __int16 v361;
  int v362;
  __int16 v363;
  void *v364;
  uint8_t buf[4];
  const char *v366;
  __int16 v367;
  int v368;
  __int16 v369;
  void *v370;

  v333 = a2;
  v14 = a3;
  v15 = a4;
  objc_initWeak(&location, a5);
  v16 = a7;
  v326 = a8;
  v320 = a9;
  val = objc_loadWeakRetained(&location);
  v310 = objc_autoreleasePoolPush();
  v17 = WALogCategoryDefaultHandle();
  v18 = objc_claimAutoreleasedReturnValue(v17);
  if (os_signpost_enabled(v18))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "populateNWActivityInterfaceStats", "", buf, 2u);
  }

  v352 = 0;
  sub_100008D88(v333, val, a6, v16, v14, v15, v326, &v352);
  v315 = v352;
  v19 = WALogCategoryDefaultHandle();
  v20 = objc_claimAutoreleasedReturnValue(v19);
  if (os_signpost_enabled(v20))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "populateNWActivityInterfaceStats", "", buf, 2u);
  }

  v21 = WALogCategoryDefaultHandle();
  v22 = objc_claimAutoreleasedReturnValue(v21);
  if (os_signpost_enabled(v22))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v22, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "populateNWActivityAWDLInterfaceStats", "", buf, 2u);
  }

  v311 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v333, "fieldForKey:", CFSTR("NWA_awdlIfStats")));
  v23 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v311, "subMessageValue"));
  objc_initWeak(&v358, val);
  v343 = v16;
  v327 = v14;
  v24 = v15;
  v336 = objc_loadWeakRetained(&v358);
  v25 = v23;
  v26 = sub_100024B98(v24);
  v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
  context = objc_autoreleasePoolPush();
  v356 = 0u;
  v357 = 0u;
  *(_OWORD *)v354 = 0u;
  v355 = 0u;
  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "objectForKeyedSubscript:", v27));
  v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "allKeys"));

  v30 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", v354, buf, 16);
  if (v30)
  {
    v31 = *(_QWORD *)v355;
LABEL_9:
    v32 = 0;
    while (1)
    {
      if (*(_QWORD *)v355 != v31)
        objc_enumerationMutation(v29);
      v33 = (void *)*((_QWORD *)v354[1] + v32);
      if (objc_msgSend(v33, "containsString:", CFSTR("Interface awdl")))
      {
        if ((objc_msgSend(v33, "containsString:", CFSTR("Peer")) & 1) == 0)
          break;
      }
      if (v30 == (id)++v32)
      {
        v30 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", v354, buf, 16);
        if (v30)
          goto LABEL_9;
        goto LABEL_16;
      }
    }
    v38 = v33;

    if (!v38)
      goto LABEL_17;
    v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "fieldForKey:", CFSTR("NWAAWDLIS_role")));
    v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "stringValue"));
    v42 = objc_msgSend(v41, "isEqualToString:", v38);

    v43 = WALogCategoryDefaultHandle();
    v44 = objc_claimAutoreleasedReturnValue(v43);
    v45 = os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG);
    if ((v42 & 1) != 0)
    {
      if (v45)
      {
        *(_DWORD *)v359 = 136446466;
        v360 = "void populateNWActivityAWDLInterfaceStats(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopula"
               "torMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __stron"
               "g, NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
        v361 = 1024;
        v362 = 1095;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "%{public}s::%d:Found AWDL Interface", v359, 0x12u);
      }
    }
    else
    {
      if (v45)
      {
        *(_DWORD *)v359 = 136446466;
        v360 = "void populateNWActivityAWDLInterfaceStats(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopula"
               "torMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __stron"
               "g, NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
        v361 = 1024;
        v362 = 1092;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "%{public}s::%d:Setting AWDL Interface", v359, 0x12u);
      }

      v44 = objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "fieldForKey:", CFSTR("NWAAWDLIS_role")));
      -[NSObject setStringValue:](v44, "setStringValue:", v38);
    }

    v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "objectForKeyedSubscript:", v27));
    v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "objectForKeyedSubscript:", v38));
    v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "objectForKeyedSubscript:", CFSTR("Manager Config")));

    if (v48)
    {
      sub_100024D98(v24, v25, CFSTR("NWAAWDLIS_enabled"), v27, v38, CFSTR("Manager Config"), CFSTR("Enabled"));
      sub_100024D98(v24, v25, CFSTR("NWAAWDLIS_rtPeerCount"), v27, v38, CFSTR("Manager Config"), CFSTR("Realtime Group Peer Count"));
      sub_100024D98(v24, v25, CFSTR("NWAAWDLIS_peerCount"), v27, v38, CFSTR("Manager Config"), CFSTR("Peer Count"));
      sub_100024D98(v24, v25, CFSTR("NWAAWDLIS_peersAdded"), v27, v38, CFSTR("Manager Config"), CFSTR("Peers Added"));
      sub_100024D98(v24, v25, CFSTR("NWAAWDLIS_peersRemoved"), v27, v38, CFSTR("Manager Config"), CFSTR("Peers Removed"));
    }
    else
    {
      v49 = WALogCategoryDefaultHandle();
      v50 = objc_claimAutoreleasedReturnValue(v49);
      if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v359 = 136446466;
        v360 = "void populateNWActivityAWDLInterfaceStats(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopula"
               "torMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __stron"
               "g, NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
        v361 = 1024;
        v362 = 1105;
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_ERROR, "%{public}s::%d:AWDL hasn't been enabled yet, rescan needed, continuing", v359, 0x12u);
      }

    }
    v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "objectForKeyedSubscript:", v27));
    v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "objectForKeyedSubscript:", v38));
    v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v52, "objectForKeyedSubscript:", CFSTR("Action Frames")));

    if (v53)
      sub_100024D98(v24, v25, CFSTR("NWAAWDLIS_afCount"), v27, v38, CFSTR("Action Frames"), CFSTR("Input"));
    v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "objectForKeyedSubscript:", v27));
    v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "objectForKeyedSubscript:", v38));
    v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("Data Bytes")));

    if (v56)
    {
      sub_100025404(v24, v25, v336, a6, v343, 0, CFSTR("NWAAWDLIS_bytes"), v27, v38, CFSTR("Data Bytes"), CFSTR("Rx Bytes"));
      sub_100025404(v24, v25, v336, a6, v343, 3u, CFSTR("NWAAWDLIS_bytes"), v27, v38, CFSTR("Data Bytes"), CFSTR("BE Tx Bytes"));
      sub_100025404(v24, v25, v336, a6, v343, 2u, CFSTR("NWAAWDLIS_bytes"), v27, v38, CFSTR("Data Bytes"), CFSTR("BK Tx Bytes"));
      sub_100025404(v24, v25, v336, a6, v343, 5u, CFSTR("NWAAWDLIS_bytes"), v27, v38, CFSTR("Data Bytes"), CFSTR("VI Tx Bytes"));
      sub_100025404(v24, v25, v336, a6, v343, 4u, CFSTR("NWAAWDLIS_bytes"), v27, v38, CFSTR("Data Bytes"), CFSTR("VO Tx Bytes"));
      sub_100025404(v24, v25, v336, a6, v343, 1u, CFSTR("NWAAWDLIS_bytes"), v27, v38, CFSTR("Data Bytes"), CFSTR("Tx Bytes"));
    }
    v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "objectForKeyedSubscript:", v27));
    v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "objectForKeyedSubscript:", v38));
    v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "objectForKeyedSubscript:", CFSTR("Data Packets")));

    if (v59)
    {
      sub_100025404(v24, v25, v336, a6, v343, 0, CFSTR("NWAAWDLIS_packets"), v27, v38, CFSTR("Data Packets"), CFSTR("Rx Packets"));
      sub_100025404(v24, v25, v336, a6, v343, 3u, CFSTR("NWAAWDLIS_packets"), v27, v38, CFSTR("Data Packets"), CFSTR("BE Tx Packets"));
      sub_100025404(v24, v25, v336, a6, v343, 2u, CFSTR("NWAAWDLIS_packets"), v27, v38, CFSTR("Data Packets"), CFSTR("BK Tx Packets"));
      sub_100025404(v24, v25, v336, a6, v343, 5u, CFSTR("NWAAWDLIS_packets"), v27, v38, CFSTR("Data Packets"), CFSTR("VI Tx Packets"));
      sub_100025404(v24, v25, v336, a6, v343, 4u, CFSTR("NWAAWDLIS_packets"), v27, v38, CFSTR("Data Packets"), CFSTR("VO Tx Packets"));
      sub_100025404(v24, v25, v336, a6, v343, 1u, CFSTR("NWAAWDLIS_packets"), v27, v38, CFSTR("Data Packets"), CFSTR("Tx Packets"));
    }
    v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "objectForKeyedSubscript:", v27));
    v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "objectForKeyedSubscript:", v38));
    v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v61, "objectForKeyedSubscript:", CFSTR("Manager Config")));

    if (v62)
    {
      sub_100024F58(v24, v25, v336, a6, v343, CFSTR("NWAAWDLIS_npeers"), v27, v38, CFSTR("Manager Config"), CFSTR("Peer Count State"));
      sub_100024F58(v24, v25, v336, a6, v343, CFSTR("NWAAWDLIS_nrtpeers"), v27, v38, CFSTR("Manager Config"), CFSTR("Realtime Group Peer Count State"));
      sub_100024F58(v24, v25, v336, a6, v343, CFSTR("NWAAWDLIS_enableStates"), v27, v38, CFSTR("Manager Config"), CFSTR("Enabled State"));
    }
    v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "objectForKeyedSubscript:", v27));
    v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "objectForKeyedSubscript:", v38));
    v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v64, "objectForKeyedSubscript:", CFSTR("AWDL Schedule")));

    if (v65)
      sub_100024F58(v24, v25, v336, a6, v343, CFSTR("NWAAWDLIS_awdlStates"), v27, v38, CFSTR("AWDL Schedule"), CFSTR("AWDL Schedule State"));
    v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "objectForKeyedSubscript:", v27));
    v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v66, "objectForKeyedSubscript:", v38));
    v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v67, "objectForKeyedSubscript:", CFSTR("TxCompletion Latency")));
    v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "objectForKeyedSubscript:", CFSTR("Completion Latency Be")));

    if (v69)
      sub_100026788(v24, v25, v336, a6, v343, CFSTR("NWAAWDLIS_txLatencyBEs"), v27, v38, CFSTR("Completion Latency Be"));
    v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "objectForKeyedSubscript:", v27));
    v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "objectForKeyedSubscript:", v38));
    v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v71, "objectForKeyedSubscript:", CFSTR("TxCompletion Latency")));
    v73 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v72, "objectForKeyedSubscript:", CFSTR("Completion Latency Bk")));

    if (v73)
      sub_100026788(v24, v25, v336, a6, v343, CFSTR("NWAAWDLIS_txLatencyBKs"), v27, v38, CFSTR("Completion Latency Bk"));
    v74 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "objectForKeyedSubscript:", v27));
    v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v74, "objectForKeyedSubscript:", v38));
    v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v75, "objectForKeyedSubscript:", CFSTR("TxCompletion Latency")));
    v77 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v76, "objectForKeyedSubscript:", CFSTR("Completion Latency Vo")));

    if (v77)
      sub_100026788(v24, v25, v336, a6, v343, CFSTR("NWAAWDLIS_txLatencyVOs"), v27, v38, CFSTR("Completion Latency Vo"));
    v78 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "objectForKeyedSubscript:", v27));
    v79 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v78, "objectForKeyedSubscript:", v38));
    v80 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v79, "objectForKeyedSubscript:", CFSTR("TxCompletion Latency")));
    v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v80, "objectForKeyedSubscript:", CFSTR("Completion Latency Vi")));

    if (v81)
      sub_100026788(v24, v25, v336, a6, v343, CFSTR("NWAAWDLIS_txLatencyVIs"), v27, v38, CFSTR("Completion Latency Vi"));
    v39 = 0;
  }
  else
  {
LABEL_16:

LABEL_17:
    v34 = WALogCategoryDefaultHandle();
    v35 = objc_claimAutoreleasedReturnValue(v34);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "objectForKeyedSubscript:", v27));
      v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "allKeys"));
      *(_DWORD *)v359 = 136446722;
      v360 = "void populateNWActivityAWDLInterfaceStats(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulato"
             "rMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, N"
             "SDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
      v361 = 1024;
      v362 = 1088;
      v363 = 2112;
      v364 = v37;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to find group Interface awdlX:... we have %@", v359, 0x1Cu);

    }
    v38 = 0;
    v39 = 1;
  }
  objc_autoreleasePoolPop(context);
  if (v39)
  {
    v82 = WALogCategoryDefaultHandle();
    v83 = objc_claimAutoreleasedReturnValue(v82);
    if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v359 = 136446466;
      v360 = "void populateNWActivityAWDLInterfaceStats(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulato"
             "rMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, N"
             "SDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
      v361 = 1024;
      v362 = 1159;
      _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed ", v359, 0x12u);
    }

  }
  objc_destroyWeak(&v358);

  contexta = v315;
  v84 = WALogCategoryDefaultHandle();
  v85 = objc_claimAutoreleasedReturnValue(v84);
  if (os_signpost_enabled(v85))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v85, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "populateNWActivityAWDLInterfaceStats", "", buf, 2u);
  }

  v86 = WALogCategoryDefaultHandle();
  v87 = objc_claimAutoreleasedReturnValue(v86);
  if (os_signpost_enabled(v87))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v87, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "populateNWActivityAPInterfaceStats", "", buf, 2u);
  }

  v312 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v333, "fieldForKey:", CFSTR("NWA_apIfStats")));
  v88 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v312, "subMessageValue"));
  objc_initWeak(&v358, val);
  v344 = v343;
  v328 = v327;
  v89 = v24;
  v337 = objc_loadWeakRetained(&v358);
  v90 = v88;
  v91 = sub_100024B98(v89);
  v92 = (void *)objc_claimAutoreleasedReturnValue(v91);
  v316 = objc_autoreleasePoolPush();
  v356 = 0u;
  v357 = 0u;
  *(_OWORD *)v354 = 0u;
  v355 = 0u;
  v93 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "objectForKeyedSubscript:", v92));
  v94 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v93, "allKeys"));

  v95 = (char *)objc_msgSend(v94, "countByEnumeratingWithState:objects:count:", v354, buf, 16);
  if (v95)
  {
    v96 = *(_QWORD *)v355;
    while (2)
    {
      for (i = 0; i != v95; ++i)
      {
        if (*(_QWORD *)v355 != v96)
          objc_enumerationMutation(v94);
        v98 = (void *)*((_QWORD *)v354[1] + (_QWORD)i);
        if (objc_msgSend(v98, "containsString:", CFSTR("Interface ap"))
          && (objc_msgSend(v98, "containsString:", CFSTR("Peer")) & 1) == 0)
        {
          v99 = v98;

          if (v99)
          {
            v100 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v90, "fieldForKey:", CFSTR("NWAAPIS_role")));
            v101 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v100, "stringValue"));
            v102 = objc_msgSend(v101, "isEqualToString:", v99);

            if ((v102 & 1) == 0)
            {
              v103 = WALogCategoryDefaultHandle();
              v104 = objc_claimAutoreleasedReturnValue(v103);
              if (os_log_type_enabled(v104, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)v359 = 136446466;
                v360 = "void populateNWActivityAPInterfaceStats(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporter"
                       "PopulatorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _N"
                       "onnull __strong, NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
                v361 = 1024;
                v362 = 1195;
                _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_DEBUG, "%{public}s::%d:Setting AP Interface", v359, 0x12u);
              }

              v105 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v90, "fieldForKey:", CFSTR("NWAAPIS_role")));
              objc_msgSend(v105, "setStringValue:", v99);

            }
            v106 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "objectForKeyedSubscript:", v92));
            v107 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v106, "objectForKeyedSubscript:", v99));
            v108 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v107, "objectForKeyedSubscript:", CFSTR("Manager Config")));

            if (v108)
            {
              sub_100024D98(v89, v90, CFSTR("NWAAPIS_enabled"), v92, v99, CFSTR("Manager Config"), CFSTR("Enabled"));
              sub_100024D98(v89, v90, CFSTR("NWAAPIS_peerCount"), v92, v99, CFSTR("Manager Config"), CFSTR("Peer Count"));
              sub_100024D98(v89, v90, CFSTR("NWAAPIS_peersAdded"), v92, v99, CFSTR("Manager Config"), CFSTR("Peers Added"));
              sub_100024D98(v89, v90, CFSTR("NWAAPIS_peersRemoved"), v92, v99, CFSTR("Manager Config"), CFSTR("Peers Removed"));
            }
            v109 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "objectForKeyedSubscript:", v92));
            v110 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v109, "objectForKeyedSubscript:", v99));
            v111 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v110, "objectForKeyedSubscript:", CFSTR("Data Bytes")));

            if (v111)
            {
              sub_100025404(v89, v90, v337, a6, v344, 0, CFSTR("NWAAPIS_bytes"), v92, v99, CFSTR("Data Bytes"), CFSTR("Rx Bytes"));
              sub_100025404(v89, v90, v337, a6, v344, 3u, CFSTR("NWAAPIS_bytes"), v92, v99, CFSTR("Data Bytes"), CFSTR("BE Tx Bytes"));
              sub_100025404(v89, v90, v337, a6, v344, 2u, CFSTR("NWAAPIS_bytes"), v92, v99, CFSTR("Data Bytes"), CFSTR("BK Tx Bytes"));
              sub_100025404(v89, v90, v337, a6, v344, 5u, CFSTR("NWAAPIS_bytes"), v92, v99, CFSTR("Data Bytes"), CFSTR("VI Tx Bytes"));
              sub_100025404(v89, v90, v337, a6, v344, 4u, CFSTR("NWAAPIS_bytes"), v92, v99, CFSTR("Data Bytes"), CFSTR("VO Tx Bytes"));
              sub_100025404(v89, v90, v337, a6, v344, 1u, CFSTR("NWAAPIS_bytes"), v92, v99, CFSTR("Data Bytes"), CFSTR("Tx Bytes"));
            }
            v112 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "objectForKeyedSubscript:", v92));
            v113 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v112, "objectForKeyedSubscript:", v99));
            v114 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v113, "objectForKeyedSubscript:", CFSTR("Data Packets")));

            if (v114)
            {
              sub_100025404(v89, v90, v337, a6, v344, 0, CFSTR("NWAAPIS_packets"), v92, v99, CFSTR("Data Packets"), CFSTR("Rx Packets"));
              sub_100025404(v89, v90, v337, a6, v344, 3u, CFSTR("NWAAPIS_packets"), v92, v99, CFSTR("Data Packets"), CFSTR("BE Tx Packets"));
              sub_100025404(v89, v90, v337, a6, v344, 2u, CFSTR("NWAAPIS_packets"), v92, v99, CFSTR("Data Packets"), CFSTR("BK Tx Packets"));
              sub_100025404(v89, v90, v337, a6, v344, 5u, CFSTR("NWAAPIS_packets"), v92, v99, CFSTR("Data Packets"), CFSTR("VI Tx Packets"));
              sub_100025404(v89, v90, v337, a6, v344, 4u, CFSTR("NWAAPIS_packets"), v92, v99, CFSTR("Data Packets"), CFSTR("VO Tx Packets"));
              sub_100025404(v89, v90, v337, a6, v344, 1u, CFSTR("NWAAPIS_packets"), v92, v99, CFSTR("Data Packets"), CFSTR("Tx Packets"));
            }
            v115 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "objectForKeyedSubscript:", v92));
            v116 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v115, "objectForKeyedSubscript:", v99));
            v117 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v116, "objectForKeyedSubscript:", CFSTR("Manager Config")));

            if (v117)
            {
              sub_100024F58(v89, v90, v337, a6, v344, CFSTR("NWAAPIS_npeers"), v92, v99, CFSTR("Manager Config"), CFSTR("Peer Count State"));
              sub_100024F58(v89, v90, v337, a6, v344, CFSTR("NWAAPIS_enableStates"), v92, v99, CFSTR("Manager Config"), CFSTR("Enabled State"));
            }
            v118 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "objectForKeyedSubscript:", v92));
            v119 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v118, "objectForKeyedSubscript:", v99));
            v120 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v119, "objectForKeyedSubscript:", CFSTR("TxCompletion Latency")));
            v121 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v120, "objectForKeyedSubscript:", CFSTR("Completion Latency Be")));

            if (v121)
              sub_100026788(v89, v90, v337, a6, v344, CFSTR("NWAAPIS_txLatencyBEs"), v92, v99, CFSTR("Completion Latency Be"));
            v122 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "objectForKeyedSubscript:", v92));
            v123 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v122, "objectForKeyedSubscript:", v99));
            v124 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v123, "objectForKeyedSubscript:", CFSTR("TxCompletion Latency")));
            v125 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v124, "objectForKeyedSubscript:", CFSTR("Completion Latency Bk")));

            if (v125)
              sub_100026788(v89, v90, v337, a6, v344, CFSTR("NWAAPIS_txLatencyBKs"), v92, v99, CFSTR("Completion Latency Bk"));
            v126 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "objectForKeyedSubscript:", v92));
            v127 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v126, "objectForKeyedSubscript:", v99));
            v128 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v127, "objectForKeyedSubscript:", CFSTR("TxCompletion Latency")));
            v129 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v128, "objectForKeyedSubscript:", CFSTR("Completion Latency Vo")));

            if (v129)
              sub_100026788(v89, v90, v337, a6, v344, CFSTR("NWAAPIS_txLatencyVOs"), v92, v99, CFSTR("Completion Latency Vo"));
            v130 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "objectForKeyedSubscript:", v92));
            v131 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v130, "objectForKeyedSubscript:", v99));
            v132 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v131, "objectForKeyedSubscript:", CFSTR("TxCompletion Latency")));
            v133 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v132, "objectForKeyedSubscript:", CFSTR("Completion Latency Vi")));

            if (v133)
              sub_100026788(v89, v90, v337, a6, v344, CFSTR("NWAAPIS_txLatencyVIs"), v92, v99, CFSTR("Completion Latency Vi"));
          }
          goto LABEL_90;
        }
      }
      v95 = (char *)objc_msgSend(v94, "countByEnumeratingWithState:objects:count:", v354, buf, 16);
      if (v95)
        continue;
      break;
    }
  }

  v99 = 0;
LABEL_90:
  objc_autoreleasePoolPop(v316);

  objc_destroyWeak(&v358);
  contextb = contexta;

  v134 = WALogCategoryDefaultHandle();
  v135 = objc_claimAutoreleasedReturnValue(v134);
  if (os_signpost_enabled(v135))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v135, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "populateNWActivityAPInterfaceStats", "", buf, 2u);
  }

  v136 = WALogCategoryDefaultHandle();
  v137 = objc_claimAutoreleasedReturnValue(v136);
  if (os_signpost_enabled(v137))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v137, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "populateNWActivityIRInterfaceStats", "", buf, 2u);
  }

  v313 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v333, "fieldForKey:", CFSTR("NWA_irIfStats")));
  v138 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v313, "subMessageValue"));
  objc_initWeak(&v358, val);
  v345 = v344;
  v329 = v328;
  v139 = v89;
  v338 = objc_loadWeakRetained(&v358);
  v140 = v138;
  v141 = sub_100024B98(v139);
  v142 = (void *)objc_claimAutoreleasedReturnValue(v141);
  v317 = objc_autoreleasePoolPush();
  v356 = 0u;
  v357 = 0u;
  *(_OWORD *)v354 = 0u;
  v355 = 0u;
  v143 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v139, "objectForKeyedSubscript:", v142));
  v144 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v143, "allKeys"));

  v145 = (char *)objc_msgSend(v144, "countByEnumeratingWithState:objects:count:", v354, buf, 16);
  if (v145)
  {
    v146 = *(_QWORD *)v355;
    while (2)
    {
      for (j = 0; j != v145; ++j)
      {
        if (*(_QWORD *)v355 != v146)
          objc_enumerationMutation(v144);
        v148 = (void *)*((_QWORD *)v354[1] + (_QWORD)j);
        if (objc_msgSend(v148, "containsString:", CFSTR("Interface ir"))
          && (objc_msgSend(v148, "containsString:", CFSTR("Peer")) & 1) == 0)
        {
          v149 = v148;

          if (v149)
          {
            v150 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v140, "fieldForKey:", CFSTR("NWAIRIS_role")));
            v151 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v150, "stringValue"));
            v152 = objc_msgSend(v151, "isEqualToString:", v149);

            if ((v152 & 1) == 0)
            {
              v153 = WALogCategoryDefaultHandle();
              v154 = objc_claimAutoreleasedReturnValue(v153);
              if (os_log_type_enabled(v154, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)v359 = 136446466;
                v360 = "void populateNWActivityIRInterfaceStats(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporter"
                       "PopulatorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _N"
                       "onnull __strong, NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
                v361 = 1024;
                v362 = 1284;
                _os_log_impl((void *)&_mh_execute_header, v154, OS_LOG_TYPE_DEBUG, "%{public}s::%d:Setting IR Interface", v359, 0x12u);
              }

              v155 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v140, "fieldForKey:", CFSTR("NWAIRIS_role")));
              objc_msgSend(v155, "setStringValue:", v149);

            }
            v156 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v139, "objectForKeyedSubscript:", v142));
            v157 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v156, "objectForKeyedSubscript:", v149));
            v158 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v157, "objectForKeyedSubscript:", CFSTR("Manager Config")));

            if (v158)
            {
              sub_100024D98(v139, v140, CFSTR("NWAIRIS_enabled"), v142, v149, CFSTR("Manager Config"), CFSTR("Enabled"));
              sub_100024D98(v139, v140, CFSTR("NWAIRIS_peerCount"), v142, v149, CFSTR("Manager Config"), CFSTR("Peer Count"));
              sub_100024D98(v139, v140, CFSTR("NWAIRIS_peersAdded"), v142, v149, CFSTR("Manager Config"), CFSTR("Peers Added"));
              sub_100024D98(v139, v140, CFSTR("NWAIRIS_peersRemoved"), v142, v149, CFSTR("Manager Config"), CFSTR("Peers Removed"));
            }
            v159 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v139, "objectForKeyedSubscript:", v142));
            v160 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v159, "objectForKeyedSubscript:", v149));
            v161 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v160, "objectForKeyedSubscript:", CFSTR("Data Bytes")));

            if (v161)
            {
              sub_100025404(v139, v140, v338, a6, v345, 0, CFSTR("NWAIRIS_bytes"), v142, v149, CFSTR("Data Bytes"), CFSTR("Rx Bytes"));
              sub_100025404(v139, v140, v338, a6, v345, 3u, CFSTR("NWAIRIS_bytes"), v142, v149, CFSTR("Data Bytes"), CFSTR("BE Tx Bytes"));
              sub_100025404(v139, v140, v338, a6, v345, 2u, CFSTR("NWAIRIS_bytes"), v142, v149, CFSTR("Data Bytes"), CFSTR("BK Tx Bytes"));
              sub_100025404(v139, v140, v338, a6, v345, 5u, CFSTR("NWAIRIS_bytes"), v142, v149, CFSTR("Data Bytes"), CFSTR("VI Tx Bytes"));
              sub_100025404(v139, v140, v338, a6, v345, 4u, CFSTR("NWAIRIS_bytes"), v142, v149, CFSTR("Data Bytes"), CFSTR("VO Tx Bytes"));
              sub_100025404(v139, v140, v338, a6, v345, 1u, CFSTR("NWAIRIS_bytes"), v142, v149, CFSTR("Data Bytes"), CFSTR("Tx Bytes"));
            }
            v162 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v139, "objectForKeyedSubscript:", v142));
            v163 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v162, "objectForKeyedSubscript:", v149));
            v164 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v163, "objectForKeyedSubscript:", CFSTR("Data Packets")));

            if (v164)
            {
              sub_100025404(v139, v140, v338, a6, v345, 0, CFSTR("NWAIRIS_packets"), v142, v149, CFSTR("Data Packets"), CFSTR("Rx Packets"));
              sub_100025404(v139, v140, v338, a6, v345, 3u, CFSTR("NWAIRIS_packets"), v142, v149, CFSTR("Data Packets"), CFSTR("BE Tx Packets"));
              sub_100025404(v139, v140, v338, a6, v345, 2u, CFSTR("NWAIRIS_packets"), v142, v149, CFSTR("Data Packets"), CFSTR("BK Tx Packets"));
              sub_100025404(v139, v140, v338, a6, v345, 5u, CFSTR("NWAIRIS_packets"), v142, v149, CFSTR("Data Packets"), CFSTR("VI Tx Packets"));
              sub_100025404(v139, v140, v338, a6, v345, 4u, CFSTR("NWAIRIS_packets"), v142, v149, CFSTR("Data Packets"), CFSTR("VO Tx Packets"));
              sub_100025404(v139, v140, v338, a6, v345, 1u, CFSTR("NWAIRIS_packets"), v142, v149, CFSTR("Data Packets"), CFSTR("Tx Packets"));
            }
            v165 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v139, "objectForKeyedSubscript:", v142));
            v166 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v165, "objectForKeyedSubscript:", v149));
            v167 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v166, "objectForKeyedSubscript:", CFSTR("Manager Config")));

            if (v167)
            {
              sub_100024F58(v139, v140, v338, a6, v345, CFSTR("NWAIRIS_npeers"), v142, v149, CFSTR("Manager Config"), CFSTR("Peer Count State"));
              sub_100024F58(v139, v140, v338, a6, v345, CFSTR("NWAIRIS_enableStates"), v142, v149, CFSTR("Manager Config"), CFSTR("Enabled State"));
            }
            v168 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v139, "objectForKeyedSubscript:", v142));
            v169 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v168, "objectForKeyedSubscript:", v149));
            v170 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v169, "objectForKeyedSubscript:", CFSTR("TxCompletion Latency")));
            v171 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v170, "objectForKeyedSubscript:", CFSTR("Completion Latency Be")));

            if (v171)
              sub_100026788(v139, v140, v338, a6, v345, CFSTR("NWAIRIS_txLatencyBEs"), v142, v149, CFSTR("Completion Latency Be"));
            v172 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v139, "objectForKeyedSubscript:", v142));
            v173 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v172, "objectForKeyedSubscript:", v149));
            v174 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v173, "objectForKeyedSubscript:", CFSTR("TxCompletion Latency")));
            v175 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v174, "objectForKeyedSubscript:", CFSTR("Completion Latency Bk")));

            if (v175)
              sub_100026788(v139, v140, v338, a6, v345, CFSTR("NWAIRIS_txLatencyBKs"), v142, v149, CFSTR("Completion Latency Bk"));
            v176 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v139, "objectForKeyedSubscript:", v142));
            v177 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v176, "objectForKeyedSubscript:", v149));
            v178 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v177, "objectForKeyedSubscript:", CFSTR("TxCompletion Latency")));
            v179 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v178, "objectForKeyedSubscript:", CFSTR("Completion Latency Vo")));

            if (v179)
              sub_100026788(v139, v140, v338, a6, v345, CFSTR("NWAIRIS_txLatencyVOs"), v142, v149, CFSTR("Completion Latency Vo"));
            v180 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v139, "objectForKeyedSubscript:", v142));
            v181 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v180, "objectForKeyedSubscript:", v149));
            v182 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v181, "objectForKeyedSubscript:", CFSTR("TxCompletion Latency")));
            v183 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v182, "objectForKeyedSubscript:", CFSTR("Completion Latency Vi")));

            if (v183)
              sub_100026788(v139, v140, v338, a6, v345, CFSTR("NWAIRIS_txLatencyVIs"), v142, v149, CFSTR("Completion Latency Vi"));
          }
          goto LABEL_125;
        }
      }
      v145 = (char *)objc_msgSend(v144, "countByEnumeratingWithState:objects:count:", v354, buf, 16);
      if (v145)
        continue;
      break;
    }
  }

  v149 = 0;
LABEL_125:
  objc_autoreleasePoolPop(v317);

  objc_destroyWeak(&v358);
  contextc = contextb;

  v184 = WALogCategoryDefaultHandle();
  v185 = objc_claimAutoreleasedReturnValue(v184);
  if (os_signpost_enabled(v185))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v185, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "populateNWActivityIRInterfaceStats", "", buf, 2u);
  }

  v186 = WALogCategoryDefaultHandle();
  v187 = objc_claimAutoreleasedReturnValue(v186);
  if (os_signpost_enabled(v187))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v187, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "populateNWActivityNANInterfaceStats", "", buf, 2u);
  }

  v314 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v333, "fieldForKey:", CFSTR("NWA_nanIfStats")));
  v188 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v314, "subMessageValue"));
  objc_initWeak(&v358, val);
  v346 = v345;
  v330 = v329;
  v189 = v139;
  v339 = objc_loadWeakRetained(&v358);
  v190 = v188;
  v191 = sub_100024B98(v189);
  v192 = (void *)objc_claimAutoreleasedReturnValue(v191);
  v318 = objc_autoreleasePoolPush();
  v356 = 0u;
  v357 = 0u;
  *(_OWORD *)v354 = 0u;
  v355 = 0u;
  v193 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v189, "objectForKeyedSubscript:", v192));
  v194 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v193, "allKeys"));

  v195 = (char *)objc_msgSend(v194, "countByEnumeratingWithState:objects:count:", v354, buf, 16);
  if (v195)
  {
    v196 = *(_QWORD *)v355;
    while (2)
    {
      for (k = 0; k != v195; ++k)
      {
        if (*(_QWORD *)v355 != v196)
          objc_enumerationMutation(v194);
        v198 = (void *)*((_QWORD *)v354[1] + (_QWORD)k);
        if (objc_msgSend(v198, "containsString:", CFSTR("Interface nan"))
          && (objc_msgSend(v198, "containsString:", CFSTR("Peer")) & 1) == 0)
        {
          v199 = v198;

          if (v199)
          {
            v200 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v190, "fieldForKey:", CFSTR("NWANANIS_role")));
            v201 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v200, "stringValue"));
            v202 = objc_msgSend(v201, "isEqualToString:", v199);

            if ((v202 & 1) == 0)
            {
              v203 = WALogCategoryDefaultHandle();
              v204 = objc_claimAutoreleasedReturnValue(v203);
              if (os_log_type_enabled(v204, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)v359 = 136446466;
                v360 = "void populateNWActivityNANInterfaceStats(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporte"
                       "rPopulatorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _"
                       "Nonnull __strong, NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
                v361 = 1024;
                v362 = 1373;
                _os_log_impl((void *)&_mh_execute_header, v204, OS_LOG_TYPE_DEBUG, "%{public}s::%d:Setting NAN Interface", v359, 0x12u);
              }

              v205 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v190, "fieldForKey:", CFSTR("NWANANIS_role")));
              objc_msgSend(v205, "setStringValue:", v199);

            }
            v206 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v189, "objectForKeyedSubscript:", v192));
            v207 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v206, "objectForKeyedSubscript:", v199));
            v208 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v207, "objectForKeyedSubscript:", CFSTR("Manager Config")));

            if (v208)
            {
              sub_100024D98(v189, v190, CFSTR("NWANANIS_enabled"), v192, v199, CFSTR("Manager Config"), CFSTR("Enabled"));
              sub_100024D98(v189, v190, CFSTR("NWANANIS_peerCount"), v192, v199, CFSTR("Manager Config"), CFSTR("Peer Count"));
              sub_100024D98(v189, v190, CFSTR("NWANANIS_peersAdded"), v192, v199, CFSTR("Manager Config"), CFSTR("Peers Added"));
              sub_100024D98(v189, v190, CFSTR("NWANANIS_peersRemoved"), v192, v199, CFSTR("Manager Config"), CFSTR("Peers Removed"));
            }
            v209 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v189, "objectForKeyedSubscript:", v192));
            v210 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v209, "objectForKeyedSubscript:", v199));
            v211 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v210, "objectForKeyedSubscript:", CFSTR("Data Bytes")));

            if (v211)
            {
              sub_100025404(v189, v190, v339, a6, v346, 0, CFSTR("NWANANIS_bytes"), v192, v199, CFSTR("Data Bytes"), CFSTR("Rx Bytes"));
              sub_100025404(v189, v190, v339, a6, v346, 3u, CFSTR("NWANANIS_bytes"), v192, v199, CFSTR("Data Bytes"), CFSTR("BE Tx Bytes"));
              sub_100025404(v189, v190, v339, a6, v346, 2u, CFSTR("NWANANIS_bytes"), v192, v199, CFSTR("Data Bytes"), CFSTR("BK Tx Bytes"));
              sub_100025404(v189, v190, v339, a6, v346, 5u, CFSTR("NWANANIS_bytes"), v192, v199, CFSTR("Data Bytes"), CFSTR("VI Tx Bytes"));
              sub_100025404(v189, v190, v339, a6, v346, 4u, CFSTR("NWANANIS_bytes"), v192, v199, CFSTR("Data Bytes"), CFSTR("VO Tx Bytes"));
              sub_100025404(v189, v190, v339, a6, v346, 1u, CFSTR("NWANANIS_bytes"), v192, v199, CFSTR("Data Bytes"), CFSTR("Tx Bytes"));
            }
            v212 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v189, "objectForKeyedSubscript:", v192));
            v213 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v212, "objectForKeyedSubscript:", v199));
            v214 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v213, "objectForKeyedSubscript:", CFSTR("Data Packets")));

            if (v214)
            {
              sub_100025404(v189, v190, v339, a6, v346, 0, CFSTR("NWANANIS_packets"), v192, v199, CFSTR("Data Packets"), CFSTR("Rx Packets"));
              sub_100025404(v189, v190, v339, a6, v346, 3u, CFSTR("NWANANIS_packets"), v192, v199, CFSTR("Data Packets"), CFSTR("BE Tx Packets"));
              sub_100025404(v189, v190, v339, a6, v346, 2u, CFSTR("NWANANIS_packets"), v192, v199, CFSTR("Data Packets"), CFSTR("BK Tx Packets"));
              sub_100025404(v189, v190, v339, a6, v346, 5u, CFSTR("NWANANIS_packets"), v192, v199, CFSTR("Data Packets"), CFSTR("VI Tx Packets"));
              sub_100025404(v189, v190, v339, a6, v346, 4u, CFSTR("NWANANIS_packets"), v192, v199, CFSTR("Data Packets"), CFSTR("VO Tx Packets"));
              sub_100025404(v189, v190, v339, a6, v346, 1u, CFSTR("NWANANIS_packets"), v192, v199, CFSTR("Data Packets"), CFSTR("Tx Packets"));
            }
            v215 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v189, "objectForKeyedSubscript:", v192));
            v216 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v215, "objectForKeyedSubscript:", v199));
            v217 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v216, "objectForKeyedSubscript:", CFSTR("Manager Config")));

            if (v217)
            {
              sub_100024F58(v189, v190, v339, a6, v346, CFSTR("NWANANIS_npeers"), v192, v199, CFSTR("Manager Config"), CFSTR("Peer Count State"));
              sub_100024F58(v189, v190, v339, a6, v346, CFSTR("NWANANIS_enableStates"), v192, v199, CFSTR("Manager Config"), CFSTR("Enabled State"));
            }
            v218 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v189, "objectForKeyedSubscript:", v192));
            v219 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v218, "objectForKeyedSubscript:", v199));
            v220 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v219, "objectForKeyedSubscript:", CFSTR("TxCompletion Latency")));
            v221 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v220, "objectForKeyedSubscript:", CFSTR("Completion Latency Be")));

            if (v221)
              sub_100026788(v189, v190, v339, a6, v346, CFSTR("NWANANIS_txLatencyBEs"), v192, v199, CFSTR("Completion Latency Be"));
            v222 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v189, "objectForKeyedSubscript:", v192));
            v223 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v222, "objectForKeyedSubscript:", v199));
            v224 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v223, "objectForKeyedSubscript:", CFSTR("TxCompletion Latency")));
            v225 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v224, "objectForKeyedSubscript:", CFSTR("Completion Latency Bk")));

            if (v225)
              sub_100026788(v189, v190, v339, a6, v346, CFSTR("NWANANIS_txLatencyBKs"), v192, v199, CFSTR("Completion Latency Bk"));
            v226 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v189, "objectForKeyedSubscript:", v192));
            v227 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v226, "objectForKeyedSubscript:", v199));
            v228 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v227, "objectForKeyedSubscript:", CFSTR("TxCompletion Latency")));
            v229 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v228, "objectForKeyedSubscript:", CFSTR("Completion Latency Vo")));

            if (v229)
              sub_100026788(v189, v190, v339, a6, v346, CFSTR("NWANANIS_txLatencyVOs"), v192, v199, CFSTR("Completion Latency Vo"));
            v230 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v189, "objectForKeyedSubscript:", v192));
            v231 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v230, "objectForKeyedSubscript:", v199));
            v232 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v231, "objectForKeyedSubscript:", CFSTR("TxCompletion Latency")));
            v233 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v232, "objectForKeyedSubscript:", CFSTR("Completion Latency Vi")));

            if (v233)
              sub_100026788(v189, v190, v339, a6, v346, CFSTR("NWANANIS_txLatencyVIs"), v192, v199, CFSTR("Completion Latency Vi"));
          }
          goto LABEL_160;
        }
      }
      v195 = (char *)objc_msgSend(v194, "countByEnumeratingWithState:objects:count:", v354, buf, 16);
      if (v195)
        continue;
      break;
    }
  }

  v199 = 0;
LABEL_160:
  objc_autoreleasePoolPop(v318);

  objc_destroyWeak(&v358);
  v234 = contextc;

  v235 = WALogCategoryDefaultHandle();
  v236 = objc_claimAutoreleasedReturnValue(v235);
  if (os_signpost_enabled(v236))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v236, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "populateNWActivityNANInterfaceStats", "", buf, 2u);
  }

  v237 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v333, "fieldForKey:", CFSTR("NWA_controllerStats")));
  contextd = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v237, "subMessageValue"));

  v238 = WALogCategoryDefaultHandle();
  v239 = objc_claimAutoreleasedReturnValue(v238);
  if (os_signpost_enabled(v239))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v239, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "nwActivityIteratorblock", "", buf, 2u);
  }

  v240 = WALogCategoryDefaultHandle();
  v241 = objc_claimAutoreleasedReturnValue(v240);
  if (os_signpost_enabled(v241))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v241, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "populateNWActivityControllerStats", "", buf, 2u);
  }

  v351 = v234;
  sub_10000A7C0(contextd, val, a6, v346, v330, v189, &v351);
  v242 = v351;

  v243 = WALogCategoryDefaultHandle();
  v244 = objc_claimAutoreleasedReturnValue(v243);
  if (os_signpost_enabled(v244))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v244, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "populateNWActivityControllerStats", "", buf, 2u);
  }

  v245 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v333, "fieldForKey:", CFSTR("NWA_linkQualSample")));
  v246 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v245, "subMessageValue"));
  v350 = v242;
  sub_10000F208(v246, v346, v330, v189, &v350);
  v319 = v350;

  v247 = v333;
  objc_initWeak(v354, val);
  v347 = v346;
  v334 = v330;
  v248 = v189;
  WeakRetained = objc_loadWeakRetained(v354);
  v331 = objc_autoreleasePoolPush();
  v249 = sub_100024B98(v248);
  v250 = (void *)objc_claimAutoreleasedReturnValue(v249);
  v251 = 0;
  v252 = 0;
  v253 = 1;
  while (1)
  {
    v254 = v253;
    v255 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("WiFi Quality Score Slice %lu"), v252);

    v256 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v248, "objectForKeyedSubscript:", v250));
    v251 = v255;
    v257 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v256, "objectForKeyedSubscript:", v255));
    v258 = v257 == 0;

    if (v258)
      goto LABEL_175;
    v259 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v248, "objectForKeyedSubscript:", v250));
    v260 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v259, "objectForKeyedSubscript:", v255));
    v261 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v260, "objectForKeyedSubscript:", CFSTR("Counters")));
    v262 = v261 == 0;

    if (v262)
      break;
    v263 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v247, "fieldForKey:", CFSTR("NWA_scores")));
    v264 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v263, "repeatableValues"));
    v265 = v264 == 0;

    if (v265)
    {
      v266 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "getNewMessageForKey:groupType:forProcessWithToken:", CFSTR("QS"), a6, v347));
      v267 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v247, "fieldForKey:", CFSTR("NWA_scores")));
      objc_msgSend(v267, "addRepeatableSubMessageValue:", v266);

      v268 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v247, "fieldForKey:", CFSTR("NWA_scores")));
      v269 = objc_msgSend(v266, "copy");
      objc_msgSend(v268, "addRepeatableSubMessageValue:", v269);

    }
    v270 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v247, "fieldForKey:", CFSTR("NWA_scores")));
    v271 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "repeatableValues"));
    v272 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v271, "objectAtIndex:", v252));

    if (!v272)
    {
      v309 = WALogCategoryDefaultHandle();
      v305 = objc_claimAutoreleasedReturnValue(v309);
      if (os_log_type_enabled(v305, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v366 = "void populateNWActivityQualityScore(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorMes"
               "sageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSD"
               "ictionary * _Nonnull __strong)";
        v367 = 1024;
        v368 = 2380;
        _os_log_impl((void *)&_mh_execute_header, v305, OS_LOG_TYPE_ERROR, "%{public}s::%d:Bad sliceSpecificMessage", buf, 0x12u);
      }
      goto LABEL_201;
    }
    sub_100024D98(v248, v272, CFSTR("QS_channelQuality"), v250, v251, CFSTR("Counters"), CFSTR("Channel Quality Score"));
    sub_100024D98(v248, v272, CFSTR("QS_txLoss"), v250, v251, CFSTR("Counters"), CFSTR("Tx Loss Score"));
    sub_100024D98(v248, v272, CFSTR("QS_rxLoss"), v250, v251, CFSTR("Counters"), CFSTR("Rx Loss Score"));
    sub_100024D98(v248, v272, CFSTR("QS_txLatency"), v250, v251, CFSTR("Counters"), CFSTR("Tx Latency Score"));
    sub_100024D98(v248, v272, CFSTR("QS_rxLatency"), v250, v251, CFSTR("Counters"), CFSTR("Rx Latency Score"));

LABEL_175:
    v253 = 0;
    v273 = 0;
    v252 = 1;
    if ((v254 & 1) == 0)
      goto LABEL_176;
  }
  v304 = WALogCategoryDefaultHandle();
  v305 = objc_claimAutoreleasedReturnValue(v304);
  if (os_log_type_enabled(v305, OS_LOG_TYPE_ERROR))
  {
    v306 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v248, "objectForKeyedSubscript:", v250));
    v307 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v306, "objectForKeyedSubscript:", v251));
    v308 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v307, "allKeys"));
    *(_DWORD *)buf = 136446722;
    v366 = "void populateNWActivityQualityScore(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorMessage"
           "Delegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSDictionar"
           "y * _Nonnull __strong)";
    v367 = 1024;
    v368 = 2369;
    v369 = 2112;
    v370 = v308;
    _os_log_impl((void *)&_mh_execute_header, v305, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to find subgroup with contains Counters, we have %@", buf, 0x1Cu);

  }
LABEL_201:

  v273 = 1;
LABEL_176:

  objc_autoreleasePoolPop(v331);
  if ((v273 & 1) != 0)
  {
    v274 = WALogCategoryDefaultHandle();
    v275 = objc_claimAutoreleasedReturnValue(v274);
    if (os_log_type_enabled(v275, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v366 = "void populateNWActivityQualityScore(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorMessa"
             "geDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSDicti"
             "onary * _Nonnull __strong)";
      v367 = 1024;
      v368 = 2394;
      _os_log_impl((void *)&_mh_execute_header, v275, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed ", buf, 0x12u);
    }

  }
  objc_destroyWeak(v354);

  v276 = v247;
  objc_initWeak(v354, val);
  v348 = v347;
  v335 = v334;
  v277 = v248;
  v341 = objc_loadWeakRetained(v354);
  v332 = objc_autoreleasePoolPush();
  v278 = sub_100024B98(v277);
  v279 = (void *)objc_claimAutoreleasedReturnValue(v278);
  v280 = 0;
  v281 = 1;
  while (2)
  {
    v282 = v281;
    v283 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("BT LE Connection Stats Slice %lu"), v280);
    v284 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v277, "objectForKeyedSubscript:", v279));
    v285 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v284, "objectForKeyedSubscript:", v283));
    v286 = v285 == 0;

    if (v286)
    {
LABEL_186:

      v281 = 0;
      v297 = 0;
      v280 = 1;
      if ((v282 & 1) == 0)
        goto LABEL_187;
      continue;
    }
    break;
  }
  v287 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v276, "fieldForKey:", CFSTR("NWA_btleConnections")));
  v288 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v287, "repeatableValues"));
  v289 = v288 == 0;

  if (v289)
  {
    v290 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v341, "getNewMessageForKey:groupType:forProcessWithToken:", CFSTR("WFAAWDBTLECS"), a6, v348));
    v291 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v276, "fieldForKey:", CFSTR("NWA_btleConnections")));
    objc_msgSend(v291, "addRepeatableSubMessageValue:", v290);

    v292 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v276, "fieldForKey:", CFSTR("NWA_btleConnections")));
    v293 = objc_msgSend(v290, "copy");
    objc_msgSend(v292, "addRepeatableSubMessageValue:", v293);

  }
  v294 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v276, "fieldForKey:", CFSTR("NWA_btleConnections")));
  v295 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v294, "repeatableValues"));
  v296 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v295, "objectAtIndex:", v280));

  if (v296)
  {
    sub_100024D98(v277, v296, CFSTR("WFAAWDBTLECS_start"), v279, v283, CFSTR("Counters"), CFSTR("BT LE Cnx Start"));
    sub_100024D98(v277, v296, CFSTR("WFAAWDBTLECS_complete"), v279, v283, CFSTR("Counters"), CFSTR("BT LE Cnx Complete"));
    sub_100024D98(v277, v296, CFSTR("WFAAWDBTLECS_peakOutage"), v279, v283, CFSTR("Counters"), CFSTR("BT LE Cnx Peak Outage"));
    sub_100024D98(v277, v296, CFSTR("WFAAWDBTLECS_totalDuration"), v279, v283, CFSTR("Counters"), CFSTR("BT LE Cnx Total Duration"));
    sub_100024D98(v277, v296, CFSTR("WFAAWDBTLECS_dc0"), v279, v283, CFSTR("Counters"), CFSTR("BT LE Cnx DC 0"));
    sub_100024D98(v277, v296, CFSTR("WFAAWDBTLECS_dc1"), v279, v283, CFSTR("Counters"), CFSTR("BT LE Cnx DC 1"));
    sub_100024D98(v277, v296, CFSTR("WFAAWDBTLECS_dc2"), v279, v283, CFSTR("Counters"), CFSTR("BT LE Cnx DC 2"));
    sub_100024D98(v277, v296, CFSTR("WFAAWDBTLECS_dc3"), v279, v283, CFSTR("Counters"), CFSTR("BT LE Cnx DC 3"));
    sub_100024D98(v277, v296, CFSTR("WFAAWDBTLECS_dc4"), v279, v283, CFSTR("Counters"), CFSTR("BT LE Cnx DC 4"));
    sub_100024D98(v277, v296, CFSTR("WFAAWDBTLECS_dc5"), v279, v283, CFSTR("Counters"), CFSTR("BT LE Cnx DC 5"));

    goto LABEL_186;
  }
  v302 = WALogCategoryDefaultHandle();
  v303 = objc_claimAutoreleasedReturnValue(v302);
  if (os_log_type_enabled(v303, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    v366 = "void populateNWActivityBTLEConnection(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorMessa"
           "geDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSDiction"
           "ary * _Nonnull __strong)";
    v367 = 1024;
    v368 = 2325;
    _os_log_impl((void *)&_mh_execute_header, v303, OS_LOG_TYPE_ERROR, "%{public}s::%d:Bad sliceSpecificMessage", buf, 0x12u);
  }

  v297 = 1;
LABEL_187:

  objc_autoreleasePoolPop(v332);
  if ((v297 & 1) != 0)
  {
    v298 = WALogCategoryDefaultHandle();
    v299 = objc_claimAutoreleasedReturnValue(v298);
    if (os_log_type_enabled(v299, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v366 = "void populateNWActivityBTLEConnection(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorMes"
             "sageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSDic"
             "tionary * _Nonnull __strong)";
      v367 = 1024;
      v368 = 2345;
      _os_log_impl((void *)&_mh_execute_header, v299, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed ", buf, 0x12u);
    }

  }
  objc_destroyWeak(v354);

  v300 = WALogCategoryDefaultHandle();
  v301 = objc_claimAutoreleasedReturnValue(v300);
  if (os_signpost_enabled(v301))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v301, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "nwActivityIteratorblock", "", buf, 2u);
  }

  objc_autoreleasePoolPop(v310);
  v320[2](v320, v276, v319);

  objc_destroyWeak(&location);
}

void sub_100008CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28,id location,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,id a38)
{
  objc_destroyWeak(&location);
  objc_destroyWeak(&a28);
  _Unwind_Resume(a1);
}

void sub_100008D88(void *a1, void *a2, uint64_t a3, void *a4, void *a5, void *a6, void *a7, _QWORD *a8)
{
  void *v13;
  void *v14;
  id v15;
  char v16;
  uint64_t v17;
  void *i;
  void *v19;
  void *v20;
  void *v21;
  unsigned int v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  unsigned int v29;
  _UNKNOWN **v30;
  id v31;
  id v32;
  void *v33;
  void *v34;
  id v35;
  void *v36;
  void *v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  id v43;
  NSObject *v44;
  void *v45;
  void *v46;
  id v47;
  void *v48;
  void *v49;
  void *v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  id v55;
  void *v56;
  void *v57;
  void *v58;
  id v59;
  NSObject *v60;
  id v61;
  void *v62;
  id v63;
  id v64;
  void *v65;
  void *v66;
  void *v67;
  id v68;
  NSObject *v69;
  void *v70;
  void *v71;
  void *v72;
  id v73;
  NSObject *v74;
  void *v75;
  void *v76;
  void *v77;
  id v78;
  NSObject *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  id v94;
  NSObject *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  id v106;
  void *v107;
  uint64_t v108;
  void *j;
  void *v110;
  void *v111;
  void *v112;
  unsigned int v113;
  id v114;
  void *v115;
  void *v116;
  void *v117;
  id v118;
  NSObject *v119;
  void *v120;
  void *v121;
  id v122;
  NSObject *v123;
  id v125;
  id v126;
  void *v127;
  void *v128;
  id v130;
  id v131;
  id v132;
  void *v133;
  id v134;
  void *v135;
  id v136;
  id v137;
  char v138;
  id obj;
  id obja;
  id v141;
  void *v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  id location;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  _BYTE v160[128];
  uint8_t v161[128];
  uint8_t v162[4];
  const char *v163;
  __int16 v164;
  int v165;
  __int16 v166;
  void *v167;
  uint8_t buf[4];
  const char *v169;
  __int16 v170;
  int v171;
  __int16 v172;
  void *v173;
  __int16 v174;
  void *v175;
  uint8_t v176[4];
  const char *v177;
  __int16 v178;
  int v179;
  __int16 v180;
  uint64_t v181;
  __int16 v182;
  void *v183;

  v126 = a1;
  objc_initWeak(&location, a2);
  v131 = a4;
  v125 = a5;
  v136 = a6;
  v141 = a7;
  v130 = objc_loadWeakRetained(&location);
  v149 = 0u;
  v150 = 0u;
  v147 = 0u;
  v148 = 0u;
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v126, "fieldForKey:", CFSTR("NWA_interfaceStats")));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "repeatableValues"));

  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v147, v161, 16);
  if (!v15)
  {

    v142 = 0;
LABEL_13:
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v130, "getNewMessageForKey:groupType:forProcessWithToken:", CFSTR("NWAIS"), a3, v131));

    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v126, "fieldForKey:", CFSTR("NWA_interfaceStats")));
    objc_msgSend(v25, "addRepeatableSubMessageValue:", v24);

    if (objc_msgSend(v141, "hasSuffix:", v141))
    {
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "fieldForKey:", CFSTR("NWAIS_role")));
      objc_msgSend(v26, "setStringValue:", v141);

    }
    v142 = v24;
    goto LABEL_16;
  }
  v142 = 0;
  v16 = 0;
  v17 = *(_QWORD *)v148;
  do
  {
    for (i = 0; i != v15; i = (char *)i + 1)
    {
      if (*(_QWORD *)v148 != v17)
        objc_enumerationMutation(v14);
      v19 = *(void **)(*((_QWORD *)&v147 + 1) + 8 * (_QWORD)i);
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "fieldForKey:", CFSTR("NWAIS_role")));
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "stringValue"));
      v22 = objc_msgSend(v21, "isEqualToString:", v141);

      if (v22)
      {
        v23 = v19;

        v16 = 1;
        v142 = v23;
      }
    }
    v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v147, v161, 16);
  }
  while (v15);

  if ((v16 & 1) == 0)
    goto LABEL_13;
LABEL_16:
  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v142, "fieldForKey:", CFSTR("NWAIS_role")));
  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "stringValue"));
  v29 = objc_msgSend(v28, "isEqualToString:", v141);

  v30 = &AnalyticsSendEventLazy_ptr;
  if (v29)
  {
    v31 = v142;
    v132 = v131;
    v137 = v141;
    v134 = v125;
    v32 = v136;
    v127 = v31;
    v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "fieldForKey:", CFSTR("NWAIS_assoc")));
    obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "subMessageValue"));

    v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Interface %@"), v137));
    v35 = sub_100024B98(v32);
    v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
    v158 = 0u;
    v159 = 0u;
    v156 = 0u;
    v157 = 0u;
    v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "objectForKeyedSubscript:", v36));
    v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "allKeys"));

    v39 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v156, v176, 16);
    if (v39)
    {
      v40 = *(_QWORD *)v157;
LABEL_19:
      v41 = 0;
      while (1)
      {
        if (*(_QWORD *)v157 != v40)
          objc_enumerationMutation(v38);
        v42 = *(void **)(*((_QWORD *)&v156 + 1) + 8 * v41);
        if ((objc_msgSend(v42, "isEqualToString:", v34) & 1) != 0)
          break;
        if (v39 == (id)++v41)
        {
          v39 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v156, v176, 16);
          if (v39)
            goto LABEL_19;
          goto LABEL_25;
        }
      }
      v47 = v42;

      if (!v47)
        goto LABEL_26;
      v154 = 0u;
      v155 = 0u;
      v152 = 0u;
      v153 = 0u;
      v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "objectForKeyedSubscript:", v36));
      v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "objectForKeyedSubscript:", v47));
      v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "allKeys"));

      v51 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v152, buf, 16);
      if (!v51)
      {
LABEL_38:

        v30 = &AnalyticsSendEventLazy_ptr;
LABEL_39:
        v55 = WALogCategoryDefaultHandle();
        v44 = objc_claimAutoreleasedReturnValue(v55);
        if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
        {
          v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "objectForKeyedSubscript:", v36));
          v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v56, "objectForKeyedSubscript:", v47));
          v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "allKeys"));
          *(_DWORD *)v162 = 136446722;
          v163 = "void populateNWActivityInterfaceAssocStats(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPop"
                 "ulatorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSString * _Nonnull __stro"
                 "ng, NSDictionary * _Nonnull __strong, NSDictionary * _Nonnull __strong)";
          v164 = 1024;
          v165 = 856;
          v166 = 2112;
          v167 = v58;
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to find subgroup, we have %@", v162, 0x1Cu);

        }
        goto LABEL_41;
      }
      v52 = *(_QWORD *)v153;
LABEL_32:
      v53 = 0;
      while (1)
      {
        if (*(_QWORD *)v153 != v52)
          objc_enumerationMutation(v50);
        v54 = *(void **)(*((_QWORD *)&v152 + 1) + 8 * v53);
        if ((objc_msgSend(v54, "containsString:", CFSTR("Association Join Counters")) & 1) != 0)
          break;
        if (v51 == (id)++v53)
        {
          v51 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v152, buf, 16);
          if (v51)
            goto LABEL_32;
          goto LABEL_38;
        }
      }
      v61 = v54;

      v30 = &AnalyticsSendEventLazy_ptr;
      if (!v61)
        goto LABEL_39;
      sub_100024D98(v32, obj, CFSTR("NWAA_authSuccess"), v36, v47, v61, CFSTR("Auth Success"));
      sub_100024D98(v32, obj, CFSTR("NWAA_authFailed"), v36, v47, v61, CFSTR("Auth Failed"));
      sub_100024D98(v32, obj, CFSTR("NWAA_assocSuccess"), v36, v47, v61, CFSTR("Assoc Success"));
      sub_100024D98(v32, obj, CFSTR("NWAA_assocFailed"), v36, v47, v61, CFSTR("Assoc Failed"));
      sub_100024D98(v32, obj, CFSTR("NWAA_reassocSuccess"), v36, v47, v61, CFSTR("Reassoc Success"));
      sub_100024D98(v32, obj, CFSTR("NWAA_reassocFailed"), v36, v47, v61, CFSTR("Reassoc Failed"));
      sub_100024D98(v32, obj, CFSTR("NWAA_linkChanged"), v36, v47, v61, CFSTR("Link Changed"));
      sub_100024D98(v32, obj, CFSTR("NWAA_roamSuccess"), v36, v47, v61, CFSTR("Roam Success"));
      sub_100024D98(v32, obj, CFSTR("NWAA_roamFailed"), v36, v47, v61, CFSTR("Roam Failed"));
      sub_100024D98(v32, obj, CFSTR("NWAA_assocDoneSuccess"), v36, v47, v61, CFSTR("Assoc Done Success"));
      sub_100024D98(v32, obj, CFSTR("NWAA_assocDoneFailed"), v36, v47, v61, CFSTR("Assoc Done Failed"));
      sub_100024D98(v32, obj, CFSTR("NWAA_assocReady"), v36, v47, v61, CFSTR("Assoc Ready"));
      sub_100024D98(v32, obj, CFSTR("NWAA_ssidChanged"), v36, v47, v61, CFSTR("SSID Changed"));
      sub_100024D98(v32, obj, CFSTR("NWAA_bssidChanged"), v36, v47, v61, CFSTR("BSSID Changed"));
      sub_100024D98(v32, obj, CFSTR("NWAA_deauthReceived"), v36, v47, v61, CFSTR("Deauth Received"));
      sub_100024D98(v32, obj, CFSTR("NWAA_disassocReceived"), v36, v47, v61, CFSTR("Dissasoc Received"));
      sub_100024D98(v32, obj, CFSTR("NWAA_decryptError"), v36, v47, v61, CFSTR("Decrypt Error"));
      sub_100024D98(v32, obj, CFSTR("NWAA_pruned"), v36, v47, v61, CFSTR("Pruned"));
      sub_100024D98(v32, obj, CFSTR("NWAA_supplicant"), v36, v47, v61, CFSTR("Supplicant"));
      sub_100024D98(v32, obj, CFSTR("NWAA_macAddrChanged"), v36, v47, v61, CFSTR("MAC Addr Changed"));
      sub_100024D98(v32, obj, CFSTR("NWAA_rssiChanged"), v36, v47, v61, CFSTR("RSSI Changed"));
      sub_100024D98(v32, obj, CFSTR("NWAA_homeChanQualChanged"), v36, v47, v61, CFSTR("Home Channel Qual Changed"));
      sub_100024D98(v32, obj, CFSTR("NWAA_chanSwitchEvent"), v36, v47, v61, CFSTR("Channel Switch Event"));
      sub_100024D98(v32, obj, CFSTR("NWAA_roamPrep"), v36, v47, v61, CFSTR("Roam Prep"));
      sub_100024D98(v32, obj, CFSTR("NWAA_roamScanStart"), v36, v47, v61, CFSTR("Roam Scan Start"));
      sub_100024D98(v32, obj, CFSTR("NWAA_roamScanEnd"), v36, v47, v61, CFSTR("Roam Scan End"));
      sub_100024D98(v32, obj, CFSTR("NWAA_scanResults"), v36, v47, v61, CFSTR("Scan Results"));
      sub_100024D98(v32, obj, CFSTR("NWAA_scanSummary"), v36, v47, v61, CFSTR("Scan Summary"));
      sub_100024D98(v32, obj, CFSTR("NWAA_scanDone"), v36, v47, v61, CFSTR("Scan Done"));
      sub_100024D98(v32, obj, CFSTR("NWAA_scanInternalDone"), v36, v47, v61, CFSTR("Scan Internal Done"));
      sub_100024D98(v32, obj, CFSTR("NWAA_bssDisallowEvent"), v36, v47, v61, CFSTR("BSS Disallow Event"));
      sub_100024D98(v32, obj, CFSTR("NWAA_slowWiFiSymptom"), v36, v47, v61, CFSTR("Slow WiFi Symptom"));
      sub_100024D98(v32, obj, CFSTR("NWAA_dpsSymptom"), v36, v47, v61, CFSTR("DPS Symptom"));
      sub_100024D98(v32, obj, CFSTR("NWAA_crashTracerTrig"), v36, v47, v61, CFSTR("Crash Tracer Triggered"));
      sub_100024D98(v32, obj, CFSTR("NWAA_rc1Stats"), v36, v47, v61, CFSTR("RC1 Stats"));
      sub_100024D98(v32, obj, CFSTR("NWAA_rc2Stats"), v36, v47, v61, CFSTR("RC2 Stats"));
      sub_100024D98(v32, obj, CFSTR("NWAA_escoTrafficInd"), v36, v47, v61, CFSTR("ESCO Traffic Indication"));
    }
    else
    {
LABEL_25:

LABEL_26:
      v43 = WALogCategoryDefaultHandle();
      v44 = objc_claimAutoreleasedReturnValue(v43);
      if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
      {
        v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "objectForKeyedSubscript:", v36));
        v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "allKeys"));
        *(_DWORD *)buf = 136446978;
        v169 = "void populateNWActivityInterfaceAssocStats(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopul"
               "atorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSString * _Nonnull __strong, "
               "NSDictionary * _Nonnull __strong, NSDictionary * _Nonnull __strong)";
        v170 = 1024;
        v171 = 847;
        v172 = 2112;
        v173 = v34;
        v174 = 2112;
        v175 = v46;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to find group %@, we have %@", buf, 0x26u);

      }
      v47 = 0;
LABEL_41:

      v59 = WALogCategoryDefaultHandle();
      v60 = objc_claimAutoreleasedReturnValue(v59);
      if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v162 = 136446466;
        v163 = "void populateNWActivityInterfaceAssocStats(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopul"
               "atorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSString * _Nonnull __strong, "
               "NSDictionary * _Nonnull __strong, NSDictionary * _Nonnull __strong)";
        v164 = 1024;
        v165 = 904;
        _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed ", v162, 0x12u);
      }

      v61 = 0;
    }

  }
  v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30[119], "stringWithFormat:", CFSTR("Interface %@"), v141));
  v63 = sub_100024B98(v136);
  v135 = (void *)objc_claimAutoreleasedReturnValue(v63);
  v64 = v62;
  v128 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30[119], "stringWithFormat:", CFSTR("Interface %@ Chip"), v141));
  v133 = v64;
  if (v64)
  {
    v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v136, "objectForKeyedSubscript:", v135));
    v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v65, "objectForKeyedSubscript:", v133));
    v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v66, "objectForKeyedSubscript:", CFSTR("Manager Config")));

    if (v67)
    {
      sub_100024D98(v136, v142, CFSTR("NWAIS_enabled"), v135, v133, CFSTR("Manager Config"), CFSTR("Enabled"));
      sub_100024F58(v136, v142, v130, a3, v131, CFSTR("NWAIS_enableStates"), v135, v133, CFSTR("Manager Config"), CFSTR("Enabled State"));
    }
    else
    {
      v68 = WALogCategoryDefaultHandle();
      v69 = objc_claimAutoreleasedReturnValue(v68);
      if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v176 = 136446466;
        v177 = "void populateNWActivityInterfaceStats(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorM"
               "essageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, N"
               "SDictionary * _Nonnull __strong, NSString * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
        v178 = 1024;
        v179 = 966;
        _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_ERROR, "%{public}s::%d:Infra hasn't been enabled yet, rescan needed, continuing", v176, 0x12u);
      }

    }
    v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v136, "objectForKeyedSubscript:", v135));
    v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "objectForKeyedSubscript:", v133));
    v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v71, "objectForKeyedSubscript:", CFSTR("Data Bytes")));

    if (v72)
    {
      sub_100025404(v136, v142, v130, a3, v131, 0, CFSTR("NWAIS_bytes"), v135, v133, CFSTR("Data Bytes"), CFSTR("Rx Bytes"));
      sub_100025404(v136, v142, v130, a3, v131, 3u, CFSTR("NWAIS_bytes"), v135, v133, CFSTR("Data Bytes"), CFSTR("BE Tx Bytes"));
      sub_100025404(v136, v142, v130, a3, v131, 2u, CFSTR("NWAIS_bytes"), v135, v133, CFSTR("Data Bytes"), CFSTR("BK Tx Bytes"));
      sub_100025404(v136, v142, v130, a3, v131, 5u, CFSTR("NWAIS_bytes"), v135, v133, CFSTR("Data Bytes"), CFSTR("VI Tx Bytes"));
      sub_100025404(v136, v142, v130, a3, v131, 4u, CFSTR("NWAIS_bytes"), v135, v133, CFSTR("Data Bytes"), CFSTR("VO Tx Bytes"));
      sub_100025404(v136, v142, v130, a3, v131, 1u, CFSTR("NWAIS_bytes"), v135, v133, CFSTR("Data Bytes"), CFSTR("Tx Bytes"));
    }
    else
    {
      v73 = WALogCategoryDefaultHandle();
      v74 = objc_claimAutoreleasedReturnValue(v73);
      if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v176 = 136446466;
        v177 = "void populateNWActivityInterfaceStats(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorM"
               "essageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, N"
               "SDictionary * _Nonnull __strong, NSString * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
        v178 = 1024;
        v179 = 980;
        _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_ERROR, "%{public}s::%d:Infra Missing Data Bytes subgroup, continuing", v176, 0x12u);
      }

    }
    v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v136, "objectForKeyedSubscript:", v135));
    v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v75, "objectForKeyedSubscript:", v133));
    v77 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v76, "objectForKeyedSubscript:", CFSTR("Data Packets")));

    if (v77)
    {
      sub_100025404(v136, v142, v130, a3, v131, 0, CFSTR("NWAIS_packets"), v135, v133, CFSTR("Data Packets"), CFSTR("Rx Packets"));
      sub_100025404(v136, v142, v130, a3, v131, 3u, CFSTR("NWAIS_packets"), v135, v133, CFSTR("Data Packets"), CFSTR("BE Tx Packets"));
      sub_100025404(v136, v142, v130, a3, v131, 2u, CFSTR("NWAIS_packets"), v135, v133, CFSTR("Data Packets"), CFSTR("BK Tx Packets"));
      sub_100025404(v136, v142, v130, a3, v131, 5u, CFSTR("NWAIS_packets"), v135, v133, CFSTR("Data Packets"), CFSTR("VI Tx Packets"));
      sub_100025404(v136, v142, v130, a3, v131, 4u, CFSTR("NWAIS_packets"), v135, v133, CFSTR("Data Packets"), CFSTR("VO Tx Packets"));
      sub_100025404(v136, v142, v130, a3, v131, 1u, CFSTR("NWAIS_packets"), v135, v133, CFSTR("Data Packets"), CFSTR("Tx Packets"));
    }
    else
    {
      v78 = WALogCategoryDefaultHandle();
      v79 = objc_claimAutoreleasedReturnValue(v78);
      if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v176 = 136446466;
        v177 = "void populateNWActivityInterfaceStats(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorM"
               "essageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, N"
               "SDictionary * _Nonnull __strong, NSString * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
        v178 = 1024;
        v179 = 994;
        _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_ERROR, "%{public}s::%d:Infra Missing Data Packets subgroup, continuing", v176, 0x12u);
      }

    }
    v80 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v136, "objectForKeyedSubscript:", v135));
    v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v80, "objectForKeyedSubscript:", v128));

    if (v81)
    {
      v82 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v136, "objectForKeyedSubscript:", v135));
      v83 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v82, "objectForKeyedSubscript:", v128));
      v84 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v83, "objectForKeyedSubscript:", CFSTR("Rx Data Frame Counters")));

      if (v84)
      {
        sub_100025784(v136, v142, v130, a3, v131, 6, CFSTR("NWAIS_packets"), v135, v128, CFSTR("Rx Data Frame Counters"), CFSTR("SU MPDU Data"));
        sub_100025784(v136, v142, v130, a3, v131, 8, CFSTR("NWAIS_packets"), v135, v128, CFSTR("Rx Data Frame Counters"), CFSTR("OFDMA MPDU Data"));
        sub_100025784(v136, v142, v130, a3, v131, 10, CFSTR("NWAIS_packets"), v135, v128, CFSTR("Rx Data Frame Counters"), CFSTR("MU MIMO MPDU Data"));
      }
      v85 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v136, "objectForKeyedSubscript:", v135));
      v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v85, "objectForKeyedSubscript:", v128));
      v87 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "objectForKeyedSubscript:", CFSTR("Rx Data Byte Counters")));

      if (v87)
      {
        sub_100025784(v136, v142, v130, a3, v131, 6, CFSTR("NWAIS_bytes"), v135, v128, CFSTR("Rx Data Byte Counters"), CFSTR("SU MPDU Bytes"));
        sub_100025784(v136, v142, v130, a3, v131, 8, CFSTR("NWAIS_bytes"), v135, v128, CFSTR("Rx Data Byte Counters"), CFSTR("OFDMA MPDU Bytes"));
        sub_100025784(v136, v142, v130, a3, v131, 10, CFSTR("NWAIS_bytes"), v135, v128, CFSTR("Rx Data Byte Counters"), CFSTR("MU MIMO MPDU Bytes"));
      }
      v88 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v136, "objectForKeyedSubscript:", v135));
      v89 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "objectForKeyedSubscript:", v128));
      v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "objectForKeyedSubscript:", CFSTR("Tx Data Frame Counters")));

      if (v90)
      {
        sub_100025784(v136, v142, v130, a3, v131, 7, CFSTR("NWAIS_packets"), v135, v128, CFSTR("Tx Data Frame Counters"), CFSTR("SU MPDU Data"));
        sub_100025784(v136, v142, v130, a3, v131, 9, CFSTR("NWAIS_packets"), v135, v128, CFSTR("Tx Data Frame Counters"), CFSTR("OFDMA MPDU Data"));
      }
      v91 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v136, "objectForKeyedSubscript:", v135));
      v92 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v91, "objectForKeyedSubscript:", v128));
      v93 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v92, "objectForKeyedSubscript:", CFSTR("Tx Data Byte Counters")));

      if (v93)
      {
        sub_100025784(v136, v142, v130, a3, v131, 7, CFSTR("NWAIS_bytes"), v135, v128, CFSTR("Tx Data Byte Counters"), CFSTR("SU MPDU Bytes"));
        sub_100025784(v136, v142, v130, a3, v131, 9, CFSTR("NWAIS_bytes"), v135, v128, CFSTR("Tx Data Byte Counters"), CFSTR("OFDMA MPDU Bytes"));
      }
    }
    else
    {
      v94 = WALogCategoryDefaultHandle();
      v95 = objc_claimAutoreleasedReturnValue(v94);
      if (os_log_type_enabled(v95, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v176 = 136446466;
        v177 = "void populateNWActivityInterfaceStats(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorM"
               "essageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, N"
               "SDictionary * _Nonnull __strong, NSString * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
        v178 = 1024;
        v179 = 1021;
        _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_ERROR, "%{public}s::%d:Infra Missing Interface en0 Chip group, continuing", v176, 0x12u);
      }

    }
    v96 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v136, "objectForKeyedSubscript:", v135));
    v97 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v96, "objectForKeyedSubscript:", v133));
    v98 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v97, "objectForKeyedSubscript:", CFSTR("Phy Mode")));

    if (v98)
      sub_100024F58(v136, v142, v130, a3, v131, CFSTR("NWAIS_phymodes"), v135, v133, CFSTR("Phy Mode"), CFSTR("PhyMode State"));
    v99 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v136, "objectForKeyedSubscript:", v135));
    v100 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v99, "objectForKeyedSubscript:", v133));
    v101 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v100, "objectForKeyedSubscript:", CFSTR("NSS")));

    if (v101)
      sub_100024F58(v136, v142, v130, a3, v131, CFSTR("NWAIS_nss"), v135, v133, CFSTR("NSS"), CFSTR("NSS State"));
    v102 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v136, "objectForKeyedSubscript:", v135));
    v103 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v102, "objectForKeyedSubscript:", v133));
    v104 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v103, "objectForKeyedSubscript:", CFSTR("Data Path Stuck")));

    if (v104)
    {
      sub_100024D98(v136, v142, CFSTR("NWAIS_consecutivedps"), v135, v133, CFSTR("Data Path Stuck"), CFSTR("Consecutive DPS Detected"));
      sub_100024D98(v136, v142, CFSTR("NWAIS_dps"), v135, v133, CFSTR("Data Path Stuck"), CFSTR("DPS Detected"));
    }
    v145 = 0u;
    v146 = 0u;
    v143 = 0u;
    v144 = 0u;
    v105 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v142, "fieldForKey:", CFSTR("NWAIS_peers")));
    obja = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v105, "repeatableValues"));

    v106 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v143, v160, 16);
    if (v106)
    {
      v107 = 0;
      v138 = 0;
      v108 = *(_QWORD *)v144;
      do
      {
        for (j = 0; j != v106; j = (char *)j + 1)
        {
          if (*(_QWORD *)v144 != v108)
            objc_enumerationMutation(obja);
          v110 = *(void **)(*((_QWORD *)&v143 + 1) + 8 * (_QWORD)j);
          v111 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v110, "fieldForKey:", CFSTR("NWAPS_hashID")));
          v112 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v111, "stringValue"));
          v113 = objc_msgSend(v112, "isEqualToString:", CFSTR("00:00:00:00:00:00"));

          if (v113)
          {
            v114 = v110;

            v138 = 1;
            v107 = v114;
          }
        }
        v106 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v143, v160, 16);
      }
      while (v106);

      if ((v138 & 1) != 0)
        goto LABEL_94;
    }
    else
    {

      v107 = 0;
    }
    v115 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v130, "getNewMessageForKey:groupType:forProcessWithToken:", CFSTR("NWAPS"), a3, v131));

    v116 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v142, "fieldForKey:", CFSTR("NWAIS_peers")));
    objc_msgSend(v116, "addRepeatableSubMessageValue:", v115);

    v117 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v115, "fieldForKey:", CFSTR("NWAPS_hashID")));
    objc_msgSend(v117, "setStringValue:", CFSTR("00:00:00:00:00:00"));

    v107 = v115;
LABEL_94:
    sub_100010BE0(v142, v107, v130, a3, v131, v125, v136, v141, a8);
    goto LABEL_95;
  }
  v118 = WALogCategoryDefaultHandle();
  v119 = objc_claimAutoreleasedReturnValue(v118);
  if (os_log_type_enabled(v119, OS_LOG_TYPE_ERROR))
  {
    v120 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v136, "objectForKeyedSubscript:", v135));
    v121 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v120, "allKeys"));
    *(_DWORD *)v176 = 136446978;
    v177 = "void populateNWActivityInterfaceStats(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorMessa"
           "geDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSDiction"
           "ary * _Nonnull __strong, NSString * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
    v178 = 1024;
    v179 = 960;
    v180 = 2112;
    v181 = 0;
    v182 = 2112;
    v183 = v121;
    _os_log_impl((void *)&_mh_execute_header, v119, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to find group %@, we have %@", v176, 0x26u);

  }
  v122 = WALogCategoryDefaultHandle();
  v123 = objc_claimAutoreleasedReturnValue(v122);
  if (os_log_type_enabled(v123, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v176 = 136446466;
    v177 = "void populateNWActivityInterfaceStats(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorMessa"
           "geDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSDiction"
           "ary * _Nonnull __strong, NSString * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
    v178 = 1024;
    v179 = 1059;
    _os_log_impl((void *)&_mh_execute_header, v123, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed ", v176, 0x12u);
  }

  v107 = 0;
LABEL_95:

  objc_destroyWeak(&location);
}

void sub_10000A76C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10000A7C0(void *a1, void *a2, uint64_t a3, void *a4, void *a5, void *a6, _QWORD *a7)
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  _BOOL4 v25;
  void *v26;
  void *v27;
  void *v28;
  _BOOL4 v29;
  id v30;
  id v31;
  id v32;
  id v33;
  void *v34;
  void *v35;
  id v36;
  void *v37;
  void *v38;
  void *v39;
  _BOOL4 v40;
  void *v41;
  void *v42;
  void *v43;
  _BOOL4 v44;
  id v45;
  id v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  id WeakRetained;
  id v52;
  void *v53;
  void *v54;
  void *v55;
  BOOL v56;
  void *v57;
  void *v58;
  BOOL v59;
  void *v60;
  void *v61;
  BOOL v62;
  void *v63;
  void *v64;
  _BOOL4 v65;
  void *v66;
  void *v67;
  void *v68;
  id v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  BOOL v75;
  void *v76;
  void *v77;
  _BOOL4 v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  BOOL v84;
  void *v85;
  void *v86;
  BOOL v87;
  id v88;
  id v89;
  void *v90;
  void *v91;
  id v92;
  void *v93;
  void *v94;
  void *v95;
  _BOOL4 v96;
  void *v97;
  void *v98;
  void *v99;
  NSObject *v100;
  void *v101;
  void *v102;
  int Count;
  uint64_t v104;
  uint64_t NameForIndex;
  void *v106;
  uint64_t Residency;
  uint64_t Unit;
  double v109;
  void *v110;
  id v111;
  void *v112;
  id v113;
  void *v114;
  id v115;
  uint64_t v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  int v121;
  unsigned __int8 v122;
  char v123;
  id v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  void *v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  void *v149;
  void *v150;
  void *v151;
  void *v152;
  void *v153;
  void *v154;
  void *v155;
  void *v156;
  void *v157;
  void *v158;
  void *v159;
  void *v160;
  void *v161;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  id v166;
  NSObject *v167;
  void *v168;
  id v169;
  void *v170;
  uint64_t v171;
  char v172;
  void *v173;
  void *v174;
  char *v175;
  uint64_t v176;
  char *i;
  void *v178;
  id v179;
  id v180;
  void *v181;
  void *v182;
  _BOOL4 v183;
  void *v184;
  void *v185;
  void *v186;
  id v187;
  void *v188;
  void *v189;
  void *v190;
  id v191;
  void *v192;
  uint64_t v193;
  char v194;
  void *v195;
  void *v196;
  char *v197;
  uint64_t v198;
  char *j;
  void *v200;
  id v201;
  id v202;
  void *v203;
  void *v204;
  _BOOL4 v205;
  void *v206;
  void *v207;
  void *v208;
  id v209;
  void *v210;
  void *v211;
  void *v212;
  id v213;
  void *v214;
  uint64_t v215;
  char v216;
  void *v217;
  void *v218;
  char *v219;
  uint64_t v220;
  char *k;
  void *v222;
  id v223;
  id v224;
  void *v225;
  void *v226;
  _BOOL4 v227;
  void *v228;
  void *v229;
  void *v230;
  id v231;
  void *v232;
  void *v233;
  void *v234;
  void *v235;
  void *v236;
  void *v237;
  void *v238;
  id v239;
  id v240;
  id v241;
  void *v242;
  void *v243;
  id v244;
  void *v245;
  NSObject *v246;
  void *v247;
  void *v248;
  void *v249;
  void *v250;
  BOOL v251;
  void *v252;
  void *v253;
  void *v254;
  void *v255;
  void *v256;
  BOOL v257;
  id v258;
  id v259;
  void *v260;
  void *v261;
  id v262;
  void *v263;
  void *v264;
  void *v265;
  void *v266;
  void *v267;
  void *v268;
  void *v269;
  BOOL v270;
  void *v271;
  void *v272;
  void *v273;
  void *v274;
  BOOL v275;
  void *v276;
  void *v277;
  void *v278;
  void *v279;
  void *v280;
  BOOL v281;
  void *v282;
  void *v283;
  void *v284;
  void *v285;
  BOOL v286;
  void *v287;
  void *v288;
  id v289;
  void *v290;
  char *v291;
  uint64_t v292;
  char *m;
  void *v294;
  void *v295;
  void *v296;
  void *v297;
  void *v298;
  uint64_t v299;
  char v300;
  void *v301;
  void *v302;
  BOOL v303;
  void *v304;
  void *v305;
  void *v306;
  id v307;
  void *v308;
  void *v309;
  id v310;
  __CFString *v311;
  __CFString *v312;
  __CFString *v313;
  __CFString *v314;
  void *v315;
  int IntegerValue;
  NSObject *v317;
  void *v318;
  id v319;
  id v320;
  id v321;
  NSObject *v322;
  id v323;
  NSObject *v324;
  id v325;
  NSObject *v326;
  id v327;
  NSObject *v328;
  id v329;
  NSObject *v330;
  id v331;
  NSObject *v332;
  id v333;
  NSObject *v334;
  void *v335;
  __CFString *v336;
  id v337;
  NSObject *v338;
  void *v339;
  __CFString *v340;
  id v341;
  NSObject *v342;
  void *v343;
  __CFString *v344;
  id v345;
  id v346;
  void *v347;
  void *v348;
  __CFString *v349;
  id v350;
  NSObject *v351;
  id v352;
  void *v353;
  __CFString *v354;
  id v355;
  NSObject *v356;
  id v357;
  NSObject *v358;
  void *v359;
  void *v360;
  id v361;
  NSObject *v362;
  id v363;
  NSObject *v364;
  const char *v365;
  id v366;
  id v367;
  id v368;
  NSObject *v369;
  void *context;
  void *v372;
  id v373;
  id v374;
  id v375;
  id val;
  void *v377;
  id v378;
  id obj;
  id obja;
  void *v381;
  void *v382;
  id v383;
  id v384;
  id v385;
  char v386;
  __CFString *v387;
  id v388;
  id v389;
  id v390;
  id v391;
  uint64_t v393;
  void *v394;
  uint64_t v395;
  id v396;
  id v397;
  id v398;
  id v399;
  id v400;
  void *v401;
  void *v402;
  void *v403;
  __CFString *v404;
  id v405;
  id v406;
  id v407;
  id v408;
  __CFString *v409;
  id v410;
  void *v411;
  void *v412;
  id v413;
  id v414;
  id v415;
  id v416;
  id v417;
  void *v418;
  id v419;
  char v420;
  char v421;
  char v422;
  id v423;
  __CFString *v424;
  void *v425;
  __int128 v426;
  __int128 v427;
  __int128 v428;
  __int128 v429;
  id location;
  id v431[2];
  __int128 v432;
  __int128 v433;
  __int128 v434;
  _BYTE v435[128];
  _BYTE buf[12];
  __int16 v437;
  int v438;
  __int16 v439;
  const __CFString *v440;
  __int16 v441;
  const __CFString *v442;
  __int16 v443;
  const __CFString *v444;
  __int16 v445;
  void *v446;
  id v447;
  uint8_t v448[4];
  const char *v449;
  __int16 v450;
  int v451;
  __int16 v452;
  const __CFString *v453;
  __int16 v454;
  const __CFString *v455;
  __int16 v456;
  const __CFString *v457;
  __int16 v458;
  const __CFString *v459;

  v11 = a1;
  objc_initWeak(&location, a2);
  v12 = a4;
  v13 = a5;
  v14 = a6;
  val = objc_loadWeakRetained(&location);
  v15 = v11;
  v16 = v12;
  v17 = v13;
  v18 = v14;
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "fieldForKey:", CFSTR("NWACS_scanActivity")));
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "subMessageValue"));

  v21 = sub_100024B98(v18);
  v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", v22));
  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "objectForKeyedSubscript:", CFSTR("WLAN Power")));
  v25 = v24 == 0;

  if (v25)
  {
    v333 = WALogCategoryDefaultHandle();
    v334 = objc_claimAutoreleasedReturnValue(v333);
    if (os_log_type_enabled(v334, OS_LOG_TYPE_ERROR))
    {
      v335 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", v22));
      v336 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v335, "allKeys"));
      *(_DWORD *)v448 = 136446722;
      v449 = "void populateNWActivityScanActivity(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorMessa"
             "geDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSDicti"
             "onary * _Nonnull __strong)";
      v450 = 1024;
      v451 = 1442;
      v452 = 2112;
      v453 = v336;
      _os_log_impl((void *)&_mh_execute_header, v334, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to find group, we have %@", v448, 0x1Cu);

    }
  }
  else
  {
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", v22));
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "objectForKeyedSubscript:", CFSTR("WLAN Power")));
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "objectForKeyedSubscript:", CFSTR("Phy Scan")));
    v29 = v28 == 0;

    if (!v29)
    {
      sub_100024D98(v18, v20, CFSTR("NWASA_userCount"), v22, CFSTR("WLAN Power"), CFSTR("Phy Scan"), CFSTR("User Scan Count"));
      sub_100024D98(v18, v20, CFSTR("NWASA_userDur"), v22, CFSTR("WLAN Power"), CFSTR("Phy Scan"), CFSTR("User Scan Dur"));
      sub_100024D98(v18, v20, CFSTR("NWASA_roamCount"), v22, CFSTR("WLAN Power"), CFSTR("Phy Scan"), CFSTR("Roam Scan Count"));
      sub_100024D98(v18, v20, CFSTR("NWASA_roamDur"), v22, CFSTR("WLAN Power"), CFSTR("Phy Scan"), CFSTR("Roam Scan Dur"));
      sub_100024D98(v18, v20, CFSTR("NWASA_assocCount"), v22, CFSTR("WLAN Power"), CFSTR("Phy Scan"), CFSTR("Assoc Scan Count"));
      sub_100024D98(v18, v20, CFSTR("NWASA_assocDur"), v22, CFSTR("WLAN Power"), CFSTR("Phy Scan"), CFSTR("Assoc Scan Dur"));
      sub_100024D98(v18, v20, CFSTR("NWASA_pnoBSSIDCount"), v22, CFSTR("WLAN Power"), CFSTR("Phy Scan"), CFSTR("PNO BSSID Scan Count"));
      sub_100024D98(v18, v20, CFSTR("NWASA_pnoBSSIDDur"), v22, CFSTR("WLAN Power"), CFSTR("Phy Scan"), CFSTR("PNO BSSID Scan Dur"));
      sub_100024D98(v18, v20, CFSTR("NWASA_pnoSSIDCount"), v22, CFSTR("WLAN Power"), CFSTR("Phy Scan"), CFSTR("PNO SSID  Scan Count"));
      sub_100024D98(v18, v20, CFSTR("NWASA_pnoSSIDDur"), v22, CFSTR("WLAN Power"), CFSTR("Phy Scan"), CFSTR("PNO SSID  Scan Dur"));
      sub_100024D98(v18, v20, CFSTR("NWASA_otherCount"), v22, CFSTR("WLAN Power"), CFSTR("Phy Scan"), CFSTR("Other Scan Count"));
      sub_100024D98(v18, v20, CFSTR("NWASA_otherDur"), v22, CFSTR("WLAN Power"), CFSTR("Phy Scan"), CFSTR("Other Scan Dur"));
      goto LABEL_4;
    }
    v346 = WALogCategoryDefaultHandle();
    v334 = objc_claimAutoreleasedReturnValue(v346);
    if (os_log_type_enabled(v334, OS_LOG_TYPE_ERROR))
    {
      v347 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", v22));
      v348 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v347, "objectForKeyedSubscript:", CFSTR("WLAN Power")));
      v349 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v348, "allKeys"));
      *(_DWORD *)v448 = 136446722;
      v449 = "void populateNWActivityScanActivity(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorMessa"
             "geDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSDicti"
             "onary * _Nonnull __strong)";
      v450 = 1024;
      v451 = 1444;
      v452 = 2112;
      v453 = v349;
      _os_log_impl((void *)&_mh_execute_header, v334, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to find subgroup, we have %@", v448, 0x1Cu);

    }
  }

  v350 = WALogCategoryDefaultHandle();
  v351 = objc_claimAutoreleasedReturnValue(v350);
  if (os_log_type_enabled(v351, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v448 = 136446466;
    v449 = "void populateNWActivityScanActivity(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorMessage"
           "Delegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSDictionar"
           "y * _Nonnull __strong)";
    v450 = 1024;
    v451 = 1463;
    _os_log_impl((void *)&_mh_execute_header, v351, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed ", v448, 0x12u);
  }

LABEL_4:
  v30 = v15;
  v31 = v16;
  v32 = v17;
  v33 = v18;
  v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "fieldForKey:", CFSTR("NWACS_powerActivity")));
  v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "subMessageValue"));

  v36 = sub_100024B98(v33);
  v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
  v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "objectForKeyedSubscript:", v37));
  v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "objectForKeyedSubscript:", CFSTR("WLAN Power")));
  v40 = v39 == 0;

  if (v40)
  {
    v337 = WALogCategoryDefaultHandle();
    v338 = objc_claimAutoreleasedReturnValue(v337);
    if (os_log_type_enabled(v338, OS_LOG_TYPE_ERROR))
    {
      v339 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "objectForKeyedSubscript:", v37));
      v340 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v339, "allKeys"));
      *(_DWORD *)v448 = 136446722;
      v449 = "void populateNWActivityPowerActivity(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorMess"
             "ageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSDict"
             "ionary * _Nonnull __strong)";
      v450 = 1024;
      v451 = 1482;
      v452 = 2112;
      v453 = v340;
      _os_log_impl((void *)&_mh_execute_header, v338, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to find group, we have %@", v448, 0x1Cu);

    }
  }
  else
  {
    v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "objectForKeyedSubscript:", v37));
    v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "objectForKeyedSubscript:", CFSTR("WLAN Power")));
    v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "objectForKeyedSubscript:", CFSTR("Phy Activity")));
    v44 = v43 == 0;

    if (!v44)
    {
      sub_100028720(v33, v35, CFSTR("NWAPPS_kRadioPhyReportTxDur"), v37, CFSTR("WLAN Power"), CFSTR("Phy Activity"), CFSTR("Radio Tx Dur"));
      sub_100028720(v33, v35, CFSTR("NWAPPS_kRadioPhyReportRxDur"), v37, CFSTR("WLAN Power"), CFSTR("Phy Activity"), CFSTR("Radio Rx Dur"));
      goto LABEL_7;
    }
    v352 = WALogCategoryDefaultHandle();
    v338 = objc_claimAutoreleasedReturnValue(v352);
    if (os_log_type_enabled(v338, OS_LOG_TYPE_ERROR))
    {
      v425 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "objectForKeyedSubscript:", v37));
      v353 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v425, "objectForKeyedSubscript:", CFSTR("WLAN Power")));
      v354 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v353, "allKeys"));
      *(_DWORD *)v448 = 136446978;
      v449 = "void populateNWActivityPowerActivity(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorMess"
             "ageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSDict"
             "ionary * _Nonnull __strong)";
      v450 = 1024;
      v451 = 1484;
      v452 = 2112;
      v453 = CFSTR("Phy Activity");
      v454 = 2112;
      v455 = v354;
      _os_log_impl((void *)&_mh_execute_header, v338, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to find subgroup %@, we have %@", v448, 0x26u);

    }
  }

  v355 = WALogCategoryDefaultHandle();
  v356 = objc_claimAutoreleasedReturnValue(v355);
  if (os_log_type_enabled(v356, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v448 = 136446466;
    v449 = "void populateNWActivityPowerActivity(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorMessag"
           "eDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSDictiona"
           "ry * _Nonnull __strong)";
    v450 = 1024;
    v451 = 1492;
    _os_log_impl((void *)&_mh_execute_header, v356, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed ", v448, 0x12u);
  }

LABEL_7:
  v417 = v30;
  objc_initWeak(v431, val);
  v45 = v31;
  v410 = v32;
  v46 = v33;
  v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v417, "fieldForKey:", CFSTR("NWACS_impedingFunctions")));
  v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "subMessageValue"));

  v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "fieldForKey:", CFSTR("NWAIF_sdbtdm")));
  v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "subMessageValue"));

  WeakRetained = objc_loadWeakRetained(v431);
  v52 = sub_100024B98(v46);
  v53 = (void *)objc_claimAutoreleasedReturnValue(v52);
  v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "objectForKeyedSubscript:", v53));
  v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "objectForKeyedSubscript:", CFSTR("TVPM Slice 0")));
  v56 = v55 == 0;

  if (!v56)
  {
    sub_100024D98(v46, v48, CFSTR("NWAIF_txduty0"), v53, CFSTR("TVPM Slice 0"), CFSTR("Temperature Voltage Power Management"), CFSTR("Tx Duty Cycle (%)"));
    sub_100024D98(v46, v48, CFSTR("NWAIF_txpowerbackoff0"), v53, CFSTR("TVPM Slice 0"), CFSTR("Temperature Voltage Power Management"), CFSTR("Tx Power Backoff (1/4dBm)"));
    sub_100024D98(v46, v48, CFSTR("NWAIF_activechains0"), v53, CFSTR("TVPM Slice 0"), CFSTR("Temperature Voltage Power Management"), CFSTR("Active Chains"));
    sub_100024D98(v46, v48, CFSTR("NWAIF_temp0"), v53, CFSTR("TVPM Slice 0"), CFSTR("Temperature Voltage Power Management"), CFSTR("Temperature (C)"));
    sub_100024D98(v46, v48, CFSTR("NWAIF_voltage0"), v53, CFSTR("TVPM Slice 0"), CFSTR("Temperature Voltage Power Management"), CFSTR("Battery Voltage (10xV)"));
    sub_100024D98(v46, v48, CFSTR("NWAIF_ppm0"), v53, CFSTR("TVPM Slice 0"), CFSTR("Temperature Voltage Power Management"), CFSTR("PPM"));
    sub_100024D98(v46, v48, CFSTR("NWAIF_ctlmid0"), v53, CFSTR("TVPM Slice 0"), CFSTR("Temperature Voltage Power Management"), CFSTR("CTLM Index"));
    sub_100024F58(v46, v48, WeakRetained, a3, v45, CFSTR("NWAIF_cTLMIndexs"), v53, CFSTR("TVPM Slice 0"), CFSTR("CTLM Index"), CFSTR("CTLM Index"));
    sub_100024F58(v46, v48, WeakRetained, a3, v45, CFSTR("NWAIF_txPowerBackoffDBs"), v53, CFSTR("TVPM Slice 0"), CFSTR("Tx Power Backoff"), CFSTR("Tx Power Backoff"));
    sub_100024F58(v46, v48, WeakRetained, a3, v45, CFSTR("NWAIF_txDutyCyclePcts"), v53, CFSTR("TVPM Slice 0"), CFSTR("Tx Duty Cycle"), CFSTR("Tx Duty Cycle"));
  }
  v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "objectForKeyedSubscript:", v53));
  v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "objectForKeyedSubscript:", CFSTR("TVPM Slice 1")));
  v59 = v58 == 0;

  if (!v59)
  {
    sub_100024D98(v46, v48, CFSTR("NWAIF_txduty1"), v53, CFSTR("TVPM Slice 1"), CFSTR("Temperature Voltage Power Management"), CFSTR("Tx Duty Cycle (%)"));
    sub_100024D98(v46, v48, CFSTR("NWAIF_txpowerbackoff1"), v53, CFSTR("TVPM Slice 1"), CFSTR("Temperature Voltage Power Management"), CFSTR("Tx Power Backoff (1/4dBm)"));
    sub_100024D98(v46, v48, CFSTR("NWAIF_activechains1"), v53, CFSTR("TVPM Slice 1"), CFSTR("Temperature Voltage Power Management"), CFSTR("Active Chains"));
    sub_100024D98(v46, v48, CFSTR("NWAIF_temp1"), v53, CFSTR("TVPM Slice 1"), CFSTR("Temperature Voltage Power Management"), CFSTR("Temperature (C)"));
    sub_100024D98(v46, v48, CFSTR("NWAIF_voltage1"), v53, CFSTR("TVPM Slice 1"), CFSTR("Temperature Voltage Power Management"), CFSTR("Battery Voltage (10xV)"));
    sub_100024D98(v46, v48, CFSTR("NWAIF_ppm1"), v53, CFSTR("TVPM Slice 1"), CFSTR("Temperature Voltage Power Management"), CFSTR("PPM"));
    sub_100024D98(v46, v48, CFSTR("NWAIF_ctlmid1"), v53, CFSTR("TVPM Slice 1"), CFSTR("Temperature Voltage Power Management"), CFSTR("CTLM Index"));
    sub_100024F58(v46, v48, WeakRetained, a3, v45, CFSTR("NWAIF_cTLMIndex1s"), v53, CFSTR("TVPM Slice 1"), CFSTR("CTLM Index"), CFSTR("CTLM Index"));
    sub_100024F58(v46, v48, WeakRetained, a3, v45, CFSTR("NWAIF_txPowerBackoffDB1s"), v53, CFSTR("TVPM Slice 1"), CFSTR("Tx Power Backoff"), CFSTR("Tx Power Backoff"));
    sub_100024F58(v46, v48, WeakRetained, a3, v45, CFSTR("NWAIF_txDutyCyclePct1s"), v53, CFSTR("TVPM Slice 1"), CFSTR("Tx Duty Cycle"), CFSTR("Tx Duty Cycle"));
  }
  v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "objectForKeyedSubscript:", v53));
  v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "objectForKeyedSubscript:", CFSTR("TDM Slice 0")));
  v62 = v61 == 0;

  if (!v62)
  {
    v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "fieldForKey:", CFSTR("TDM_sliceStats")));
    v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "repeatableValues"));
    v65 = v64 == 0;

    if (v65)
    {
      v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "getNewMessageForKey:groupType:forProcessWithToken:", CFSTR("TDMS"), a3, v45));
      v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "fieldForKey:", CFSTR("TDM_sliceStats")));
      objc_msgSend(v67, "addRepeatableSubMessageValue:", v66);

      v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "fieldForKey:", CFSTR("TDM_sliceStats")));
      v69 = objc_msgSend(v66, "copy");
      objc_msgSend(v68, "addRepeatableSubMessageValue:", v69);

    }
    v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "fieldForKey:", CFSTR("TDM_sliceStats")));
    v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "repeatableValues"));
    v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v71, "objectAtIndex:", 0));

    if (!v72)
    {
      v363 = WALogCategoryDefaultHandle();
      v364 = objc_claimAutoreleasedReturnValue(v363);
      if (!os_log_type_enabled(v364, OS_LOG_TYPE_ERROR))
        goto LABEL_238;
      *(_DWORD *)v448 = 136446466;
      v449 = "void populateNWActivityImpedingFunctions(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulator"
             "MessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NS"
             "Dictionary * _Nonnull __strong)";
      v450 = 1024;
      v451 = 1559;
      v365 = "%{public}s::%d:Bad sliceSpecificMessage";
      goto LABEL_237;
    }
    sub_100028720(v46, v72, CFSTR("TDMS_txDeferDuration"), v53, CFSTR("TDM Slice 0"), CFSTR("TDM Counters"), CFSTR("TXA Defer Duration"));
    sub_100028720(v46, v72, CFSTR("TDMS_txaDuration"), v53, CFSTR("TDM Slice 0"), CFSTR("TDM Counters"), CFSTR("TXA On Duration"));
    sub_100028720(v46, v72, CFSTR("TDMS_txPriDuration"), v53, CFSTR("TDM Slice 0"), CFSTR("TDM Counters"), CFSTR("TXA Priority Duration"));
    sub_100024D98(v46, v72, CFSTR("TDMS_txaONCount"), v53, CFSTR("TDM Slice 0"), CFSTR("TDM Counters"), CFSTR("TXA Set On"));
    sub_100024D98(v46, v72, CFSTR("TDMS_txaTimeoutCount"), v53, CFSTR("TDM Slice 0"), CFSTR("TDM Counters"), CFSTR("TXA Timeout Count"));
    sub_100024D98(v46, v72, CFSTR("TDMS_txaPORCount"), v53, CFSTR("TDM Slice 0"), CFSTR("TDM Counters"), CFSTR("Path Off Requests"));
    sub_100024D98(v46, v72, CFSTR("TDMS_txPathEnableReqCount"), v53, CFSTR("TDM Slice 0"), CFSTR("TDM Counters"), CFSTR("Path Unmute Requests"));
    sub_100024D98(v46, v72, CFSTR("TDMS_txPathMuteCount"), v53, CFSTR("TDM Slice 0"), CFSTR("TDM Counters"), CFSTR("Path Mute Requests"));
    sub_100024D98(v46, v72, CFSTR("TDMS_txMuteCount"), v53, CFSTR("TDM Slice 0"), CFSTR("TDM Counters"), CFSTR("Active Tx Muted"));
    sub_100024D98(v46, v72, CFSTR("TDMS_ackTxPowerBackoffCount"), v53, CFSTR("TDM Slice 0"), CFSTR("TDM Counters"), CFSTR("Active Tx Power Backedoff"));
    sub_100024D98(v46, v72, CFSTR("TDMS_txPriorityCount"), v53, CFSTR("TDM Slice 0"), CFSTR("TDM Counters"), CFSTR("TXA Priority Taken"));
    sub_100024D98(v46, v72, CFSTR("TDMS_txDeferredCount"), v53, CFSTR("TDM Slice 0"), CFSTR("TDM Counters"), CFSTR("TXA Defer Count"));

  }
  v73 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "objectForKeyedSubscript:", v53));
  v74 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v73, "objectForKeyedSubscript:", CFSTR("TDM Slice 1")));
  v75 = v74 == 0;

  if (!v75)
  {
    v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "fieldForKey:", CFSTR("TDM_sliceStats")));
    v77 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v76, "repeatableValues"));
    v78 = v77 == 0;

    if (!v78)
    {
      v79 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "fieldForKey:", CFSTR("TDM_sliceStats")));
      v80 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v79, "repeatableValues"));
      v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v80, "objectAtIndex:", 1));

      if (v81)
      {
        sub_100028720(v46, v81, CFSTR("TDMS_txDeferDuration"), v53, CFSTR("TDM Slice 1"), CFSTR("TDM Counters"), CFSTR("TXA Defer Duration"));
        sub_100028720(v46, v81, CFSTR("TDMS_txaDuration"), v53, CFSTR("TDM Slice 1"), CFSTR("TDM Counters"), CFSTR("TXA On Duration"));
        sub_100028720(v46, v81, CFSTR("TDMS_txPriDuration"), v53, CFSTR("TDM Slice 1"), CFSTR("TDM Counters"), CFSTR("TXA Priority Duration"));
        sub_100024D98(v46, v81, CFSTR("TDMS_txaONCount"), v53, CFSTR("TDM Slice 1"), CFSTR("TDM Counters"), CFSTR("TXA Set On"));
        sub_100024D98(v46, v81, CFSTR("TDMS_txaTimeoutCount"), v53, CFSTR("TDM Slice 1"), CFSTR("TDM Counters"), CFSTR("TXA Timeout Count"));
        sub_100024D98(v46, v81, CFSTR("TDMS_txaPORCount"), v53, CFSTR("TDM Slice 1"), CFSTR("TDM Counters"), CFSTR("Path Off Requests"));
        sub_100024D98(v46, v81, CFSTR("TDMS_txPathEnableReqCount"), v53, CFSTR("TDM Slice 1"), CFSTR("TDM Counters"), CFSTR("Path Unmute Requests"));
        sub_100024D98(v46, v81, CFSTR("TDMS_txPathMuteCount"), v53, CFSTR("TDM Slice 1"), CFSTR("TDM Counters"), CFSTR("Path Mute Requests"));
        sub_100024D98(v46, v81, CFSTR("TDMS_txMuteCount"), v53, CFSTR("TDM Slice 1"), CFSTR("TDM Counters"), CFSTR("Active Tx Muted"));
        sub_100024D98(v46, v81, CFSTR("TDMS_ackTxPowerBackoffCount"), v53, CFSTR("TDM Slice 1"), CFSTR("TDM Counters"), CFSTR("Active Tx Power Backedoff"));
        sub_100024D98(v46, v81, CFSTR("TDMS_txPriorityCount"), v53, CFSTR("TDM Slice 1"), CFSTR("TDM Counters"), CFSTR("TXA Priority Taken"));
        sub_100024D98(v46, v81, CFSTR("TDMS_txDeferredCount"), v53, CFSTR("TDM Slice 1"), CFSTR("TDM Counters"), CFSTR("TXA Defer Count"));

        goto LABEL_20;
      }
      v367 = WALogCategoryDefaultHandle();
      v364 = objc_claimAutoreleasedReturnValue(v367);
      if (os_log_type_enabled(v364, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v448 = 136446466;
        v449 = "void populateNWActivityImpedingFunctions(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulat"
               "orMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong"
               ", NSDictionary * _Nonnull __strong)";
        v450 = 1024;
        v451 = 1582;
        v365 = "%{public}s::%d:Bad sliceSpecificMessage";
        goto LABEL_237;
      }
LABEL_238:

      v368 = WALogCategoryDefaultHandle();
      v369 = objc_claimAutoreleasedReturnValue(v368);
      if (os_log_type_enabled(v369, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v448 = 136446466;
        v449 = "void populateNWActivityImpedingFunctions(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulat"
               "orMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong"
               ", NSDictionary * _Nonnull __strong)";
        v450 = 1024;
        v451 = 1623;
        _os_log_impl((void *)&_mh_execute_header, v369, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed ", v448, 0x12u);
      }

      goto LABEL_24;
    }
    v366 = WALogCategoryDefaultHandle();
    v364 = objc_claimAutoreleasedReturnValue(v366);
    if (!os_log_type_enabled(v364, OS_LOG_TYPE_ERROR))
      goto LABEL_238;
    *(_DWORD *)v448 = 136446466;
    v449 = "void populateNWActivityImpedingFunctions(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorMe"
           "ssageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSDict"
           "ionary * _Nonnull __strong)";
    v450 = 1024;
    v451 = 1579;
    v365 = "%{public}s::%d:TDM_sliceStats should exist when looking at slice 1";
LABEL_237:
    _os_log_impl((void *)&_mh_execute_header, v364, OS_LOG_TYPE_ERROR, v365, v448, 0x12u);
    goto LABEL_238;
  }
LABEL_20:
  v82 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "objectForKeyedSubscript:", v53));
  v83 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v82, "objectForKeyedSubscript:", CFSTR("RC1 Coex")));
  v84 = v83 == 0;

  if (!v84)
  {
    sub_100024D98(v46, v48, CFSTR("NWAIF_rc1Request"), v53, CFSTR("RC1 Coex"), CFSTR("Counters"), CFSTR("RC1 Request"));
    sub_100024D98(v46, v48, CFSTR("NWAIF_rc1Duration"), v53, CFSTR("RC1 Coex"), CFSTR("Counters"), CFSTR("RC1 Duration"));
    sub_100024D98(v46, v48, CFSTR("NWAIF_rc1wlanCrit"), v53, CFSTR("RC1 Coex"), CFSTR("Counters"), CFSTR("WLAN Crit"));
    sub_100024D98(v46, v48, CFSTR("NWAIF_rc1wlanCritDuration"), v53, CFSTR("RC1 Coex"), CFSTR("Counters"), CFSTR("WLAN Crit Duration"));
  }
  v85 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "objectForKeyedSubscript:", v53));
  v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v85, "objectForKeyedSubscript:", CFSTR("RC2 Coex")));
  v87 = v86 == 0;

  if (!v87)
  {
    sub_100024D98(v46, v48, CFSTR("NWAIF_rc2Request"), v53, CFSTR("RC1 Coex"), CFSTR("Counters"), CFSTR("RC2 Request"));
    sub_100024D98(v46, v48, CFSTR("NWAIF_rc2Duration"), v53, CFSTR("RC1 Coex"), CFSTR("Counters"), CFSTR("RC2 Duration"));
    sub_100024D98(v46, v48, CFSTR("NWAIF_rc2LongGrant"), v53, CFSTR("RC1 Coex"), CFSTR("Counters"), CFSTR("Grant Delay Larger than 4.5ms"));
    sub_100024D98(v46, v48, CFSTR("NWAIF_rc2Grant"), v53, CFSTR("RC1 Coex"), CFSTR("Counters"), CFSTR("Grant"));
    sub_100024D98(v46, v48, CFSTR("NWAIF_rc2cts2a"), v53, CFSTR("RC1 Coex"), CFSTR("Counters"), CFSTR("Successfully TXed CTS2A"));
  }
LABEL_24:

  objc_destroyWeak(v431);
  sub_100026CB8(v417, v45, v410, v46, a7);
  v88 = v417;
  v400 = v45;
  v405 = v410;
  v89 = v46;
  v394 = v88;
  v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "fieldForKey:", CFSTR("NWACS_btCoex")));
  v411 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v90, "subMessageValue"));

  v91 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v411, "fieldForKey:", CFSTR("NWABC_btrequestReason")));
  v418 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v91, "subMessageValue"));

  v92 = sub_100024B98(v89);
  v93 = (void *)objc_claimAutoreleasedReturnValue(v92);
  v94 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "objectForKeyedSubscript:", v93));
  v95 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v94, "objectForKeyedSubscript:", CFSTR("BT Coex")));
  v96 = v95 == 0;

  if (v96)
  {
    v341 = WALogCategoryDefaultHandle();
    v342 = objc_claimAutoreleasedReturnValue(v341);
    if (os_log_type_enabled(v342, OS_LOG_TYPE_ERROR))
    {
      v343 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "objectForKeyedSubscript:", v93));
      v344 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v343, "allKeys"));
      *(_DWORD *)v448 = 136446722;
      v449 = "void populateNWActivityBTCoex(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorMessageDele"
             "gate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSDictionary "
             "* _Nonnull __strong)";
      v450 = 1024;
      v451 = 1825;
      v452 = 2112;
      v453 = v344;
      _os_log_impl((void *)&_mh_execute_header, v342, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to find group, we have %@", v448, 0x1Cu);

    }
    v345 = WALogCategoryDefaultHandle();
    v100 = objc_claimAutoreleasedReturnValue(v345);
    if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v448 = 136446466;
      v449 = "void populateNWActivityBTCoex(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorMessageDele"
             "gate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSDictionary "
             "* _Nonnull __strong)";
      v450 = 1024;
      v451 = 1867;
      _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed ", v448, 0x12u);
    }
  }
  else
  {
    sub_100024D98(v89, v411, CFSTR("NWABC_request"), v93, CFSTR("BT Coex"), CFSTR("Counters"), CFSTR("Antenna Requests"));
    sub_100024D98(v89, v411, CFSTR("NWABC_grant"), v93, CFSTR("BT Coex"), CFSTR("Counters"), CFSTR("Antenna Grants"));
    sub_100024D98(v89, v411, CFSTR("NWABC_btabort"), v93, CFSTR("BT Coex"), CFSTR("Counters"), CFSTR("WLAN Preempted"));
    sub_100024D98(v89, v411, CFSTR("NWABC_psnullretrycount"), v93, CFSTR("BT Coex"), CFSTR("Counters"), CFSTR("PSNULL exceeded"));
    sub_100024D98(v89, v411, CFSTR("NWABC_ucodehighlatency"), v93, CFSTR("BT Coex"), CFSTR("Counters"), CFSTR("High UCode Latency"));
    v97 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "objectForKeyedSubscript:", v93));
    v98 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v97, "objectForKeyedSubscript:", CFSTR("BT Coex")));
    v99 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v98, "objectForKeyedSubscript:", CFSTR("Extra Counters")));

    if (v99)
    {
      sub_100024D98(v89, v411, CFSTR("NWABC_pm"), v93, CFSTR("BT Coex"), CFSTR("Extra Counters"), CFSTR("PM Protection Success"));
      sub_100024D98(v89, v411, CFSTR("NWABC_wlantxpreempt"), v93, CFSTR("BT Coex"), CFSTR("Extra Counters"), CFSTR("WLAN Tx Preemption"));
      sub_100024D98(v89, v411, CFSTR("NWABC_wlanrxpreempt"), v93, CFSTR("BT Coex"), CFSTR("Extra Counters"), CFSTR("WLAN Rx Preemption"));
      sub_100024D98(v89, v411, CFSTR("NWABC_aptxafterpm"), v93, CFSTR("BT Coex"), CFSTR("Extra Counters"), CFSTR("AP Tx after PM Protection"));
      sub_100024D98(v89, v411, CFSTR("NWABC_audiogrant"), v93, CFSTR("BT Coex"), CFSTR("Extra Counters"), CFSTR("Periodic Audio Grant Count"));
      sub_100024D98(v89, v411, CFSTR("NWABC_audiodeny"), v93, CFSTR("BT Coex"), CFSTR("Extra Counters"), CFSTR("Periodic Audio Deny Count"));
      sub_100024D98(v89, v411, CFSTR("NWABC_a2dpgrant"), v93, CFSTR("BT Coex"), CFSTR("Extra Counters"), CFSTR("A2DP Grant Count"));
      sub_100024D98(v89, v411, CFSTR("NWABC_a2dpdeny"), v93, CFSTR("BT Coex"), CFSTR("Extra Counters"), CFSTR("A2DP Deny Count"));
      sub_100024D98(v89, v411, CFSTR("NWABC_sniffgrant"), v93, CFSTR("BT Coex"), CFSTR("Extra Counters"), CFSTR("Sniff Grant Count"));
      sub_100024D98(v89, v411, CFSTR("NWABC_sniffdeny"), v93, CFSTR("BT Coex"), CFSTR("Extra Counters"), CFSTR("Sniff Deny Count"));
    }
    sub_100024D98(v89, v418, CFSTR("NWABCRR_acl"), v93, CFSTR("BT Coex"), CFSTR("Antenna Request Reason"), CFSTR("ACL"));
    sub_100024D98(v89, v418, CFSTR("NWABCRR_sco"), v93, CFSTR("BT Coex"), CFSTR("Antenna Request Reason"), CFSTR("SCO"));
    sub_100024D98(v89, v418, CFSTR("NWABCRR_esco"), v93, CFSTR("BT Coex"), CFSTR("Antenna Request Reason"), CFSTR("eSCO"));
    sub_100024D98(v89, v418, CFSTR("NWABCRR_a2dp"), v93, CFSTR("BT Coex"), CFSTR("Antenna Request Reason"), CFSTR("A2DP"));
    sub_100024D98(v89, v418, CFSTR("NWABCRR_sniff"), v93, CFSTR("BT Coex"), CFSTR("Antenna Request Reason"), CFSTR("Sniff"));
    sub_100024D98(v89, v418, CFSTR("NWABCRR_pagescan"), v93, CFSTR("BT Coex"), CFSTR("Antenna Request Reason"), CFSTR("Page Scan"));
    sub_100024D98(v89, v418, CFSTR("NWABCRR_inquiryscan"), v93, CFSTR("BT Coex"), CFSTR("Antenna Request Reason"), CFSTR("Inquity Scan"));
    sub_100024D98(v89, v418, CFSTR("NWABCRR_page"), v93, CFSTR("BT Coex"), CFSTR("Antenna Request Reason"), CFSTR("Page"));
    sub_100024D98(v89, v418, CFSTR("NWABCRR_inquiry"), v93, CFSTR("BT Coex"), CFSTR("Antenna Request Reason"), CFSTR("Inquiry"));
    sub_100024D98(v89, v418, CFSTR("NWABCRR_mss"), v93, CFSTR("BT Coex"), CFSTR("Antenna Request Reason"), CFSTR("MSS"));
    sub_100024D98(v89, v418, CFSTR("NWABCRR_park"), v93, CFSTR("BT Coex"), CFSTR("Antenna Request Reason"), CFSTR("PARK"));
    sub_100024D98(v89, v418, CFSTR("NWABCRR_blescan"), v93, CFSTR("BT Coex"), CFSTR("Antenna Request Reason"), CFSTR("BLE Scan"));
    sub_100024D98(v89, v418, CFSTR("NWABCRR_ble"), v93, CFSTR("BT Coex"), CFSTR("Antenna Request Reason"), CFSTR("BLE"));
    sub_100024D98(v89, v418, CFSTR("NWABCRR_other"), v93, CFSTR("BT Coex"), CFSTR("Antenna Request Reason"), CFSTR("Other"));
    v100 = v411;
    v387 = v93;
    v101 = sub_100025990(v89, v387, CFSTR("BT Coex"), CFSTR("Antenna Ownership"), CFSTR("Antenna Ownership while on 2GHz"));
    v102 = v101;
    if (v101)
    {
      Count = IOReportStateGetCount(v101);
      if (Count >= 1)
      {
        v104 = 0;
        do
        {
          NameForIndex = IOReportStateGetNameForIndex(v102, v104);
          v106 = (void *)objc_claimAutoreleasedReturnValue(NameForIndex);
          if (objc_msgSend(v106, "containsString:", CFSTR("BT")))
          {
            Residency = IOReportStateGetResidency(v102, v104);
            Unit = IOReportChannelGetUnit(v102);
            v109 = IOReportScaleValue(Residency, Unit, 0x100007C00000000);
            v110 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject fieldForKey:](v100, "fieldForKey:", CFSTR("NWABC_duration")));
            objc_msgSend(v110, "setUint32Value:", v109);

          }
          v104 = (v104 + 1);
        }
        while (Count != (_DWORD)v104);
      }
    }
    else
    {
      v361 = WALogCategoryDefaultHandle();
      v362 = objc_claimAutoreleasedReturnValue(v361);
      if (os_log_type_enabled(v362, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v448 = 136447490;
        v449 = "_Bool fillUInt32FieldFromState(NSDictionary * _Nonnull __strong, WAMessageAWD * _Nullable __strong, NSStr"
               "ing * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull "
               "__strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong)";
        v450 = 1024;
        v451 = 346;
        v452 = 2112;
        v453 = v387;
        v454 = 2112;
        v455 = CFSTR("BT Coex");
        v456 = 2112;
        v457 = CFSTR("Antenna Ownership");
        v458 = 2112;
        v459 = CFSTR("Antenna Ownership while on 2GHz");
        _os_log_impl((void *)&_mh_execute_header, v362, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to find %@ %@ %@ %@", v448, 0x3Au);
      }

    }
  }

  v111 = v394;
  v373 = v400;
  v374 = v405;
  v419 = v89;
  v372 = v111;
  v112 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v111, "fieldForKey:", CFSTR("NWACS_phyrate")));
  v377 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v112, "subMessageValue"));

  v113 = sub_100024B98(v419);
  v412 = (void *)objc_claimAutoreleasedReturnValue(v113);
  context = objc_autoreleasePoolPush();
  v433 = 0u;
  v434 = 0u;
  *(_OWORD *)v431 = 0u;
  v432 = 0u;
  v114 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v419, "objectForKeyedSubscript:", v412));
  obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v114, "allKeys"));

  v115 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", v431, v448, 16);
  if (v115)
  {
    v395 = *(_QWORD *)v432;
LABEL_36:
    v116 = 0;
    while (1)
    {
      if (*(_QWORD *)v432 != v395)
        objc_enumerationMutation(obj);
      v117 = (void *)*((_QWORD *)v431[1] + v116);
      v118 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v419, "objectForKeyedSubscript:", v412));
      v119 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v118, "objectForKeyedSubscript:", v117));
      v120 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v119, "objectForKeyedSubscript:", CFSTR("Tx MCS Success")));
      if (v120
        || (v405 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v419, "objectForKeyedSubscript:", v412)),
            v400 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v405, "objectForKeyedSubscript:", v117)),
            (v114 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v400, "objectForKeyedSubscript:", CFSTR("Tx VHT Success")))) != 0))
      {
        v121 = 0;
      }
      else
      {
        v381 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v419, "objectForKeyedSubscript:", v412));
        v382 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v381, "objectForKeyedSubscript:", v117));
        v387 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v382, "objectForKeyedSubscript:", CFSTR("Tx HE Success")));
        if (!v387)
        {

          v114 = 0;
          v387 = 0;
          v123 = 0;
LABEL_51:

          if ((v123 & 1) != 0)
          {
LABEL_55:
            v124 = v117;
            goto LABEL_56;
          }
          goto LABEL_52;
        }
        v114 = 0;
        v121 = 1;
      }
      v122 = objc_msgSend(v117, "containsString:", CFSTR("awdl"));
      v123 = v122 ^ 1;
      if (v121)
      {

        if (!v120)
          goto LABEL_51;
      }
      else if (!v120)
      {
        goto LABEL_51;
      }

      if ((v122 & 1) == 0)
        goto LABEL_55;
LABEL_52:
      if (v115 == (id)++v116)
      {
        v115 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", v431, v448, 16);
        if (v115)
          goto LABEL_36;
        break;
      }
    }
  }
  v124 = 0;
LABEL_56:

  v125 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v419, "objectForKeyedSubscript:", v412));
  v126 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v125, "objectForKeyedSubscript:", v124));

  if (v126)
  {
    v127 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v419, "objectForKeyedSubscript:", v412));
    v128 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v127, "objectForKeyedSubscript:", v124));
    v129 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v128, "objectForKeyedSubscript:", CFSTR("Tx MPDU in AMPDU Usage")));

    if (v129)
      sub_100028A80(v419, v377, CFSTR("NWARAA_ampduAGGs"), v412, v124, CFSTR("Tx MPDU in AMPDU Usage"), CFSTR("Tx MPDU in AMPDU Usage"), 64, 1u);
    v130 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v419, "objectForKeyedSubscript:", v412));
    v131 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v130, "objectForKeyedSubscript:", v124));
    v132 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v131, "objectForKeyedSubscript:", CFSTR("Rx MCS Success")));

    if (v132)
      sub_100028A80(v419, v377, CFSTR("NWARAA_rxMCSSuccess"), v412, v124, CFSTR("Rx MCS Success"), CFSTR("Rx MCS Success"), 33, 0);
    v133 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v419, "objectForKeyedSubscript:", v412));
    v134 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v133, "objectForKeyedSubscript:", v124));
    v135 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v134, "objectForKeyedSubscript:", CFSTR("Tx MCS Success")));

    if (v135)
      sub_100028A80(v419, v377, CFSTR("NWARAA_txMCSSuccess"), v412, v124, CFSTR("Tx MCS Success"), CFSTR("Tx MCS Success"), 33, 0);
    v136 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v419, "objectForKeyedSubscript:", v412));
    v137 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v136, "objectForKeyedSubscript:", v124));
    v138 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v137, "objectForKeyedSubscript:", CFSTR("Rx VHT Success")));

    if (v138)
      sub_100028A80(v419, v377, CFSTR("NWARAA_rxVHTSuccess"), v412, v124, CFSTR("Rx VHT Success"), CFSTR("Rx VHT Success"), 33, 0);
    v139 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v419, "objectForKeyedSubscript:", v412));
    v140 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v139, "objectForKeyedSubscript:", v124));
    v141 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v140, "objectForKeyedSubscript:", CFSTR("Tx VHT Success")));

    if (v141)
      sub_100028A80(v419, v377, CFSTR("NWARAA_txVHTSuccess"), v412, v124, CFSTR("Tx VHT Success"), CFSTR("Tx VHT Success"), 33, 0);
    v142 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v419, "objectForKeyedSubscript:", v412));
    v143 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v142, "objectForKeyedSubscript:", v124));
    v144 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v143, "objectForKeyedSubscript:", CFSTR("Rx HE Success")));

    if (v144)
      sub_100028A80(v419, v377, CFSTR("NWARAA_rxHESuccess"), v412, v124, CFSTR("Rx HE Success"), CFSTR("Rx HE Success"), 33, 0);
    v145 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v419, "objectForKeyedSubscript:", v412));
    v146 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v145, "objectForKeyedSubscript:", v124));
    v147 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v146, "objectForKeyedSubscript:", CFSTR("Tx HE Success")));

    if (v147)
      sub_100028A80(v419, v377, CFSTR("NWARAA_txHESuccess"), v412, v124, CFSTR("Tx HE Success"), CFSTR("Tx HE Success"), 33, 0);
    v148 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v419, "objectForKeyedSubscript:", v412));
    v149 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v148, "objectForKeyedSubscript:", v124));
    v150 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v149, "objectForKeyedSubscript:", CFSTR("Rx MPDU in SU AMPDU Usage")));

    if (v150)
      sub_100028A80(v419, v377, CFSTR("NWARAA_rxampduSUs"), v412, v124, CFSTR("Rx MPDU in SU AMPDU Usage"), CFSTR("Rx MPDU in SU AMPDU Usage"), 64, 1u);
    v151 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v419, "objectForKeyedSubscript:", v412));
    v152 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v151, "objectForKeyedSubscript:", v124));
    v153 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v152, "objectForKeyedSubscript:", CFSTR("Tx MPDU in SU AMPDU Usage")));

    if (v153)
      sub_100028A80(v419, v377, CFSTR("NWARAA_txampduSUs"), v412, v124, CFSTR("Tx MPDU in SU AMPDU Usage"), CFSTR("Tx MPDU in SU AMPDU Usage"), 64, 1u);
    v154 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v419, "objectForKeyedSubscript:", v412));
    v155 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v154, "objectForKeyedSubscript:", v124));
    v156 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v155, "objectForKeyedSubscript:", CFSTR("Rx MPDU in OFDMA AMPDU Usage")));

    if (v156)
      sub_100028A80(v419, v377, CFSTR("NWARAA_rxampduOFDMAs"), v412, v124, CFSTR("Rx MPDU in OFDMA AMPDU Usage"), CFSTR("Rx MPDU in OFDMA AMPDU Usage"), 64, 1u);
    v157 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v419, "objectForKeyedSubscript:", v412));
    v158 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v157, "objectForKeyedSubscript:", v124));
    v159 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v158, "objectForKeyedSubscript:", CFSTR("Tx MPDU in OFDMA AMPDU Usage")));

    if (v159)
      sub_100028A80(v419, v377, CFSTR("NWARAA_txampduOFDMAs"), v412, v124, CFSTR("Tx MPDU in OFDMA AMPDU Usage"), CFSTR("Tx MPDU in OFDMA AMPDU Usage"), 64, 1u);
    v160 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v419, "objectForKeyedSubscript:", v412));
    v161 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v160, "objectForKeyedSubscript:", v124));
    v162 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v161, "objectForKeyedSubscript:", CFSTR("Rx MPDU in MU-MIMO AMPDU Usage")));

    if (v162)
      sub_100028A80(v419, v377, CFSTR("NWARAA_rxampduMUMIMOs"), v412, v124, CFSTR("Rx MPDU in MU-MIMO AMPDU Usage"), CFSTR("Rx MPDU in MU-MIMO AMPDU Usage"), 64, 1u);
    v163 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v419, "objectForKeyedSubscript:", v412));
    v164 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v163, "objectForKeyedSubscript:", v124));
    v165 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v164, "objectForKeyedSubscript:", CFSTR("Tx MPDU in MU-MIMO AMPDU Usage")));

    if (v165)
      sub_100028A80(v419, v377, CFSTR("NWARAA_txampduMUMIMOs"), v412, v124, CFSTR("Tx MPDU in MU-MIMO AMPDU Usage"), CFSTR("Tx MPDU in MU-MIMO AMPDU Usage"), 64, 1u);
  }
  else
  {
    v357 = WALogCategoryDefaultHandle();
    v358 = objc_claimAutoreleasedReturnValue(v357);
    if (os_log_type_enabled(v358, OS_LOG_TYPE_ERROR))
    {
      v359 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v419, "objectForKeyedSubscript:", v412));
      v360 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v359, "allKeys"));
      *(_DWORD *)buf = 136447490;
      *(_QWORD *)&buf[4] = "void populateNWActivityRateAndAgg(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPo"
                           "pulatorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * "
                           "_Nonnull __strong, NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
      v437 = 1024;
      v438 = 1983;
      v439 = 2112;
      v440 = CFSTR("Tx MCS Success");
      v441 = 2112;
      v442 = CFSTR("Tx VHT Success");
      v443 = 2112;
      v444 = CFSTR("Tx HE Success");
      v445 = 2112;
      v446 = v360;
      _os_log_impl((void *)&_mh_execute_header, v358, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to find group that contains subgroup %@ or %@ or %@, we have %@", buf, 0x3Au);

    }
  }
  objc_autoreleasePoolPop(context);
  if (!v126)
  {
    v166 = WALogCategoryDefaultHandle();
    v167 = objc_claimAutoreleasedReturnValue(v166);
    if (os_log_type_enabled(v167, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "void populateNWActivityRateAndAgg(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPo"
                           "pulatorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * "
                           "_Nonnull __strong, NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
      v437 = 1024;
      v438 = 2041;
      _os_log_impl((void *)&_mh_execute_header, v167, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed ", buf, 0x12u);
    }

    if (!*a7)
    {
      v447 = NSLocalizedFailureReasonErrorKey;
      *(_QWORD *)buf = CFSTR("WAErrorCodeHEVHTMCSMissing");
      v168 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, &v447, 1));
      *a7 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.wifi.analytics.errordomain"), 9026, v168));

    }
  }

  v413 = v372;
  objc_initWeak(&v447, val);
  v396 = v373;
  v383 = v374;
  v406 = v419;
  v388 = objc_loadWeakRetained(&v447);
  v169 = sub_100024B98(v406);
  v401 = (void *)objc_claimAutoreleasedReturnValue(v169);
  v170 = 0;
  v171 = 0;
  v172 = 1;
  while (1)
  {
    v420 = v172;
    v433 = 0u;
    v434 = 0u;
    *(_OWORD *)v431 = 0u;
    v432 = 0u;
    v173 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v406, "objectForKeyedSubscript:", v401));
    v174 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v173, "allKeys"));

    v175 = (char *)objc_msgSend(v174, "countByEnumeratingWithState:objects:count:", v431, v448, 16);
    if (v175)
    {
      v176 = *(_QWORD *)v432;
      while (2)
      {
        for (i = 0; i != v175; ++i)
        {
          if (*(_QWORD *)v432 != v176)
            objc_enumerationMutation(v174);
          v178 = (void *)*((_QWORD *)v431[1] + (_QWORD)i);
          v179 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%lu"), v171);
          if (objc_msgSend(v178, "containsString:", CFSTR("Tx MPDU WME Slice "))
            && (objc_msgSend(v178, "containsString:", v179) & 1) != 0)
          {
            v180 = v178;

            v170 = v180;
            goto LABEL_100;
          }

        }
        v175 = (char *)objc_msgSend(v174, "countByEnumeratingWithState:objects:count:", v431, v448, 16);
        if (v175)
          continue;
        break;
      }
    }
LABEL_100:

    if (!v170)
      goto LABEL_105;
    v181 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v413, "fieldForKey:", CFSTR("NWACS_txmpduWMEs")));
    v182 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v181, "repeatableValues"));
    v183 = v182 == 0;

    if (v183)
    {
      v184 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v388, "getNewMessageForKey:groupType:forProcessWithToken:", CFSTR("NWAMWME"), a3, v396));
      v185 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v413, "fieldForKey:", CFSTR("NWACS_txmpduWMEs")));
      objc_msgSend(v185, "addRepeatableSubMessageValue:", v184);

      v186 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v413, "fieldForKey:", CFSTR("NWACS_txmpduWMEs")));
      v187 = objc_msgSend(v184, "copy");
      objc_msgSend(v186, "addRepeatableSubMessageValue:", v187);

    }
    v188 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v413, "fieldForKey:", CFSTR("NWACS_txmpduWMEs")));
    v189 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v188, "repeatableValues"));
    v190 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v189, "objectAtIndex:", v171));

    if (!v190)
      break;
    sub_100028720(v406, v190, CFSTR("NWAMWME_tid0"), v401, v170, CFSTR("Counters"), CFSTR("                        Tx MPDU Tid0"));
    sub_100028720(v406, v190, CFSTR("NWAMWME_tid1"), v401, v170, CFSTR("Counters"), CFSTR("                        Tx MPDU Tid1"));
    sub_100028720(v406, v190, CFSTR("NWAMWME_tid2"), v401, v170, CFSTR("Counters"), CFSTR("                        Tx MPDU Tid2"));
    sub_100028720(v406, v190, CFSTR("NWAMWME_tid3"), v401, v170, CFSTR("Counters"), CFSTR("                        Tx MPDU Tid3"));
    sub_100028720(v406, v190, CFSTR("NWAMWME_tid4"), v401, v170, CFSTR("Counters"), CFSTR("                        Tx MPDU Tid4"));
    sub_100028720(v406, v190, CFSTR("NWAMWME_tid5"), v401, v170, CFSTR("Counters"), CFSTR("                        Tx MPDU Tid5"));
    sub_100028720(v406, v190, CFSTR("NWAMWME_tid6"), v401, v170, CFSTR("Counters"), CFSTR("                        Tx MPDU Tid6"));
    sub_100028720(v406, v190, CFSTR("NWAMWME_tid7"), v401, v170, CFSTR("Counters"), CFSTR("                        Tx MPDU Tid7"));

LABEL_105:
    v172 = 0;
    v171 = 1;
    if ((v420 & 1) == 0)
      goto LABEL_106;
  }
  v321 = WALogCategoryDefaultHandle();
  v322 = objc_claimAutoreleasedReturnValue(v321);
  if (os_log_type_enabled(v322, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "void populateNWActivityTxMpduWME(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopul"
                         "atorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonn"
                         "ull __strong, NSDictionary * _Nonnull __strong)";
    v437 = 1024;
    v438 = 2084;
    _os_log_impl((void *)&_mh_execute_header, v322, OS_LOG_TYPE_ERROR, "%{public}s::%d:Bad sliceSpecificMessage", buf, 0x12u);
  }

  v323 = WALogCategoryDefaultHandle();
  v324 = objc_claimAutoreleasedReturnValue(v323);
  if (os_log_type_enabled(v324, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "void populateNWActivityTxMpduWME(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopul"
                         "atorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonn"
                         "ull __strong, NSDictionary * _Nonnull __strong)";
    v437 = 1024;
    v438 = 2101;
    _os_log_impl((void *)&_mh_execute_header, v324, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed ", buf, 0x12u);
  }

LABEL_106:
  objc_destroyWeak(&v447);

  v414 = v413;
  objc_initWeak(&v447, val);
  v397 = v396;
  v384 = v383;
  v407 = v406;
  v389 = objc_loadWeakRetained(&v447);
  v191 = sub_100024B98(v407);
  v402 = (void *)objc_claimAutoreleasedReturnValue(v191);
  v192 = 0;
  v193 = 0;
  v194 = 1;
  while (2)
  {
    v421 = v194;
    v433 = 0u;
    v434 = 0u;
    *(_OWORD *)v431 = 0u;
    v432 = 0u;
    v195 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v407, "objectForKeyedSubscript:", v402));
    v196 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v195, "allKeys"));

    v197 = (char *)objc_msgSend(v196, "countByEnumeratingWithState:objects:count:", v431, v448, 16);
    if (v197)
    {
      v198 = *(_QWORD *)v432;
      while (2)
      {
        for (j = 0; j != v197; ++j)
        {
          if (*(_QWORD *)v432 != v198)
            objc_enumerationMutation(v196);
          v200 = (void *)*((_QWORD *)v431[1] + (_QWORD)j);
          v201 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%lu"), v193);
          if (objc_msgSend(v200, "containsString:", CFSTR("Rx MPDU WME Slice "))
            && (objc_msgSend(v200, "containsString:", v201) & 1) != 0)
          {
            v202 = v200;

            v192 = v202;
            goto LABEL_118;
          }

        }
        v197 = (char *)objc_msgSend(v196, "countByEnumeratingWithState:objects:count:", v431, v448, 16);
        if (v197)
          continue;
        break;
      }
    }
LABEL_118:

    if (!v192)
    {
LABEL_123:
      v194 = 0;
      v193 = 1;
      if ((v421 & 1) == 0)
        goto LABEL_124;
      continue;
    }
    break;
  }
  v203 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v414, "fieldForKey:", CFSTR("NWACS_rxmpduWMEs")));
  v204 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v203, "repeatableValues"));
  v205 = v204 == 0;

  if (v205)
  {
    v206 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v389, "getNewMessageForKey:groupType:forProcessWithToken:", CFSTR("NWAMWME"), a3, v397));
    v207 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v414, "fieldForKey:", CFSTR("NWACS_rxmpduWMEs")));
    objc_msgSend(v207, "addRepeatableSubMessageValue:", v206);

    v208 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v414, "fieldForKey:", CFSTR("NWACS_rxmpduWMEs")));
    v209 = objc_msgSend(v206, "copy");
    objc_msgSend(v208, "addRepeatableSubMessageValue:", v209);

  }
  v210 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v414, "fieldForKey:", CFSTR("NWACS_rxmpduWMEs")));
  v211 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v210, "repeatableValues"));
  v212 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v211, "objectAtIndex:", v193));

  if (v212)
  {
    sub_100028720(v407, v212, CFSTR("NWAMWME_tid0"), v402, v192, CFSTR("Counters"), CFSTR("                        Rx MPDU Tid0"));
    sub_100028720(v407, v212, CFSTR("NWAMWME_tid1"), v402, v192, CFSTR("Counters"), CFSTR("                        Rx MPDU Tid1"));
    sub_100028720(v407, v212, CFSTR("NWAMWME_tid2"), v402, v192, CFSTR("Counters"), CFSTR("                        Rx MPDU Tid2"));
    sub_100028720(v407, v212, CFSTR("NWAMWME_tid3"), v402, v192, CFSTR("Counters"), CFSTR("                        Rx MPDU Tid3"));
    sub_100028720(v407, v212, CFSTR("NWAMWME_tid4"), v402, v192, CFSTR("Counters"), CFSTR("                        Rx MPDU Tid4"));
    sub_100028720(v407, v212, CFSTR("NWAMWME_tid5"), v402, v192, CFSTR("Counters"), CFSTR("                        Rx MPDU Tid5"));
    sub_100028720(v407, v212, CFSTR("NWAMWME_tid6"), v402, v192, CFSTR("Counters"), CFSTR("                        Rx MPDU Tid6"));
    sub_100028720(v407, v212, CFSTR("NWAMWME_tid7"), v402, v192, CFSTR("Counters"), CFSTR("                        Rx MPDU Tid7"));

    goto LABEL_123;
  }
  v325 = WALogCategoryDefaultHandle();
  v326 = objc_claimAutoreleasedReturnValue(v325);
  if (os_log_type_enabled(v326, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "void populateNWActivityRxMpduWME(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopul"
                         "atorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonn"
                         "ull __strong, NSDictionary * _Nonnull __strong)";
    v437 = 1024;
    v438 = 2139;
    _os_log_impl((void *)&_mh_execute_header, v326, OS_LOG_TYPE_ERROR, "%{public}s::%d:Bad sliceSpecificMessage", buf, 0x12u);
  }

  v327 = WALogCategoryDefaultHandle();
  v328 = objc_claimAutoreleasedReturnValue(v327);
  if (os_log_type_enabled(v328, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "void populateNWActivityRxMpduWME(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopul"
                         "atorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonn"
                         "ull __strong, NSDictionary * _Nonnull __strong)";
    v437 = 1024;
    v438 = 2156;
    _os_log_impl((void *)&_mh_execute_header, v328, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed ", buf, 0x12u);
  }

LABEL_124:
  objc_destroyWeak(&v447);

  v415 = v414;
  objc_initWeak(&v447, val);
  v398 = v397;
  v385 = v384;
  v408 = v407;
  v390 = objc_loadWeakRetained(&v447);
  v213 = sub_100024B98(v408);
  v403 = (void *)objc_claimAutoreleasedReturnValue(v213);
  v214 = 0;
  v215 = 0;
  v216 = 1;
  while (2)
  {
    v422 = v216;
    v433 = 0u;
    v434 = 0u;
    *(_OWORD *)v431 = 0u;
    v432 = 0u;
    v217 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v408, "objectForKeyedSubscript:", v403));
    v218 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v217, "allKeys"));

    v219 = (char *)objc_msgSend(v218, "countByEnumeratingWithState:objects:count:", v431, v448, 16);
    if (v219)
    {
      v220 = *(_QWORD *)v432;
      while (2)
      {
        for (k = 0; k != v219; ++k)
        {
          if (*(_QWORD *)v432 != v220)
            objc_enumerationMutation(v218);
          v222 = (void *)*((_QWORD *)v431[1] + (_QWORD)k);
          v223 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%lu"), v215);
          if (objc_msgSend(v222, "containsString:", CFSTR("Rx MPDU Lost Slice "))
            && (objc_msgSend(v222, "containsString:", v223) & 1) != 0)
          {
            v224 = v222;

            v214 = v224;
            goto LABEL_136;
          }

        }
        v219 = (char *)objc_msgSend(v218, "countByEnumeratingWithState:objects:count:", v431, v448, 16);
        if (v219)
          continue;
        break;
      }
    }
LABEL_136:

    if (!v214)
    {
LABEL_141:
      v216 = 0;
      v215 = 1;
      if ((v422 & 1) == 0)
        goto LABEL_142;
      continue;
    }
    break;
  }
  v225 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v415, "fieldForKey:", CFSTR("NWACS_rxmdpuLosts")));
  v226 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v225, "repeatableValues"));
  v227 = v226 == 0;

  if (v227)
  {
    v228 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v390, "getNewMessageForKey:groupType:forProcessWithToken:", CFSTR("NWAML"), a3, v398));
    v229 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v415, "fieldForKey:", CFSTR("NWACS_rxmdpuLosts")));
    objc_msgSend(v229, "addRepeatableSubMessageValue:", v228);

    v230 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v415, "fieldForKey:", CFSTR("NWACS_rxmdpuLosts")));
    v231 = objc_msgSend(v228, "copy");
    objc_msgSend(v230, "addRepeatableSubMessageValue:", v231);

  }
  v232 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v415, "fieldForKey:", CFSTR("NWACS_rxmdpuLosts")));
  v233 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v232, "repeatableValues"));
  v234 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v233, "objectAtIndex:", v215));

  if (v234)
  {
    v235 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v234, "fieldForKey:", CFSTR("NWAML_nonBALost")));
    v236 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v235, "subMessageValue"));

    v237 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v234, "fieldForKey:", CFSTR("NWAML_bALost")));
    v238 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v237, "subMessageValue"));

    sub_100028720(v408, v238, CFSTR("NWAMWME_tid0"), v403, v214, CFSTR("Counters"), CFSTR("                        Rx LOST MPDU BA Tid0"));
    sub_100028720(v408, v238, CFSTR("NWAMWME_tid1"), v403, v214, CFSTR("Counters"), CFSTR("                        Rx LOST MPDU BA Tid1"));
    sub_100028720(v408, v238, CFSTR("NWAMWME_tid2"), v403, v214, CFSTR("Counters"), CFSTR("                        Rx LOST MPDU BA Tid2"));
    sub_100028720(v408, v238, CFSTR("NWAMWME_tid3"), v403, v214, CFSTR("Counters"), CFSTR("                        Rx LOST MPDU BA Tid3"));
    sub_100028720(v408, v238, CFSTR("NWAMWME_tid4"), v403, v214, CFSTR("Counters"), CFSTR("                        Rx LOST MPDU BA Tid4"));
    sub_100028720(v408, v238, CFSTR("NWAMWME_tid5"), v403, v214, CFSTR("Counters"), CFSTR("                        Rx LOST MPDU BA Tid5"));
    sub_100028720(v408, v238, CFSTR("NWAMWME_tid6"), v403, v214, CFSTR("Counters"), CFSTR("                        Rx LOST MPDU BA Tid6"));
    sub_100028720(v408, v238, CFSTR("NWAMWME_tid7"), v403, v214, CFSTR("Counters"), CFSTR("                        Rx LOST MPDU BA Tid7"));
    sub_100028720(v408, v236, CFSTR("NWAMWME_tid0"), v403, v214, CFSTR("Counters"), CFSTR("                        Rx LOST MPDU NonBA Tid0"));
    sub_100028720(v408, v236, CFSTR("NWAMWME_tid1"), v403, v214, CFSTR("Counters"), CFSTR("                        Rx LOST MPDU NonBA Tid1"));
    sub_100028720(v408, v236, CFSTR("NWAMWME_tid2"), v403, v214, CFSTR("Counters"), CFSTR("                        Rx LOST MPDU NonBA Tid2"));
    sub_100028720(v408, v236, CFSTR("NWAMWME_tid3"), v403, v214, CFSTR("Counters"), CFSTR("                        Rx LOST MPDU NonBA Tid3"));
    sub_100028720(v408, v236, CFSTR("NWAMWME_tid4"), v403, v214, CFSTR("Counters"), CFSTR("                        Rx LOST MPDU NonBA Tid4"));
    sub_100028720(v408, v236, CFSTR("NWAMWME_tid5"), v403, v214, CFSTR("Counters"), CFSTR("                        Rx LOST MPDU NonBA Tid5"));
    sub_100028720(v408, v236, CFSTR("NWAMWME_tid6"), v403, v214, CFSTR("Counters"), CFSTR("                        Rx LOST MPDU NonBA Tid6"));
    sub_100028720(v408, v236, CFSTR("NWAMWME_tid7"), v403, v214, CFSTR("Counters"), CFSTR("                        Rx LOST MPDU NonBA Tid7"));

    goto LABEL_141;
  }
  v329 = WALogCategoryDefaultHandle();
  v330 = objc_claimAutoreleasedReturnValue(v329);
  if (os_log_type_enabled(v330, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "void populateNWActivityLostMpdu(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopula"
                         "torMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnu"
                         "ll __strong, NSDictionary * _Nonnull __strong)";
    v437 = 1024;
    v438 = 2195;
    _os_log_impl((void *)&_mh_execute_header, v330, OS_LOG_TYPE_ERROR, "%{public}s::%d:Bad sliceSpecificMessage", buf, 0x12u);
  }

  v331 = WALogCategoryDefaultHandle();
  v332 = objc_claimAutoreleasedReturnValue(v331);
  if (os_log_type_enabled(v332, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "void populateNWActivityLostMpdu(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopula"
                         "torMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnu"
                         "ll __strong, NSDictionary * _Nonnull __strong)";
    v437 = 1024;
    v438 = 2224;
    _os_log_impl((void *)&_mh_execute_header, v332, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed ", buf, 0x12u);
  }

LABEL_142:
  objc_destroyWeak(&v447);

  v239 = v415;
  v423 = v398;
  v240 = v385;
  v241 = v408;
  v242 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v239, "fieldForKey:", CFSTR("NWACS_omi")));
  v243 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v242, "subMessageValue"));

  v244 = sub_100024B98(v241);
  v245 = (void *)objc_claimAutoreleasedReturnValue(v244);
  v246 = objc_claimAutoreleasedReturnValue(objc_msgSend(v241, "objectForKeyedSubscript:", v245));
  v247 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject objectForKeyedSubscript:](v246, "objectForKeyedSubscript:", CFSTR("Slice 0")));
  if (v247)
  {
    v248 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v241, "objectForKeyedSubscript:", v245));
    v249 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v248, "objectForKeyedSubscript:", CFSTR("Slice 0")));
    v250 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v249, "objectForKeyedSubscript:", CFSTR("OMI Counters")));
    v251 = v250 == 0;

    if (v251)
      goto LABEL_151;
    v252 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v241, "objectForKeyedSubscript:", v245));
    v253 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v252, "objectForKeyedSubscript:", CFSTR("Slice 1")));
    if (v253)
    {
      v254 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v241, "objectForKeyedSubscript:", v245));
      v255 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v254, "objectForKeyedSubscript:", CFSTR("Slice 1")));
      v256 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v255, "objectForKeyedSubscript:", CFSTR("OMI Counters")));
      v257 = v256 == 0;

      if (!v257)
      {
        sub_100028DCC(v241, v243, CFSTR("NWAOMI_scheduled"), v245, CFSTR("Total number of OMIs scheduled"));
        sub_100028DCC(v241, v243, CFSTR("NWAOMI_success"), v245, CFSTR("OMI Tx Success"));
        sub_100028DCC(v241, v243, CFSTR("NWAOMI_retries"), v245, CFSTR("OMI retries as TxDone not set"));
        sub_100028DCC(v241, v243, CFSTR("NWAOMI_completionDelay"), v245, CFSTR("Accumulated duration of OMI completion time(ms)"));
        sub_100028DCC(v241, v243, CFSTR("NWAOMI_uLMUReq"), v245, CFSTR("UL MU enable/disable change request"));
        sub_100028DCC(v241, v243, CFSTR("NWAOMI_uLMUAck"), v245, CFSTR("UL MU enable/disable request txed successfully"));
        sub_100028DCC(v241, v243, CFSTR("NWAOMI_txNSTSReq"), v245, CFSTR("Tx NSTS change request"));
        sub_100028DCC(v241, v243, CFSTR("NWAOMI_txNSTSAck"), v245, CFSTR("Tx NSTS change request txed successfully"));
        sub_100028DCC(v241, v243, CFSTR("NWAOMI_rxNSSReq"), v245, CFSTR("Rx NSS change request"));
        sub_100028DCC(v241, v243, CFSTR("NWAOMI_rxNSSAck"), v245, CFSTR("Rx NSS change request txed successfully"));
        sub_100028DCC(v241, v243, CFSTR("NWAOMI_chBWReq"), v245, CFSTR("Channel Width change request"));
        sub_100028DCC(v241, v243, CFSTR("NWAOMI_chBWAck"), v245, CFSTR("Channel Width hange request txed successfully"));
        sub_100028DCC(v241, v243, CFSTR("NWAOMI_eRSUReq"), v245, CFSTR("ER SU enable/disable req"));
        sub_100028DCC(v241, v243, CFSTR("NWAOMI_eRSUAck"), v245, CFSTR("ER SU enable/disable req txed successfully"));
        sub_100028DCC(v241, v243, CFSTR("NWAOMI_dLResoundReq"), v245, CFSTR("DL MU-MIMO Resound recommendation change req"));
        sub_100028DCC(v241, v243, CFSTR("NWAOMI_dLResoundAck"), v245, CFSTR("DL MU-MIMO Resound recommendation request txed successfully"));
        goto LABEL_151;
      }
    }
    else
    {

    }
    v258 = WALogCategoryDefaultHandle();
    v246 = objc_claimAutoreleasedReturnValue(v258);
    if (os_log_type_enabled(v246, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v448 = 136446466;
      v449 = "void populateNWActivityOMI(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorMessageDelegat"
             "e> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSDictionary * _"
             "Nonnull __strong)";
      v450 = 1024;
      v451 = 1903;
      _os_log_impl((void *)&_mh_execute_header, v246, OS_LOG_TYPE_ERROR, "%{public}s::%d:Missing Slice 1 OMI Counters", v448, 0x12u);
    }
  }

LABEL_151:
  v399 = v239;
  objc_initWeak((id *)v448, val);
  v378 = v423;
  v375 = v240;
  v416 = v241;
  v259 = objc_loadWeakRetained((id *)v448);
  v260 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v399, "fieldForKey:", CFSTR("NWACS_ruUsage")));
  v261 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v260, "subMessageValue"));

  v262 = sub_100024B98(v416);
  v263 = (void *)objc_claimAutoreleasedReturnValue(v262);
  v264 = objc_autoreleasePoolPush();
  v265 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v416, "objectForKeyedSubscript:", v263));
  v266 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v265, "objectForKeyedSubscript:", CFSTR("Slice 0")));
  if (!v266)
    goto LABEL_156;
  v267 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v416, "objectForKeyedSubscript:", v263));
  v268 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v267, "objectForKeyedSubscript:", CFSTR("Slice 0")));
  v269 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v268, "objectForKeyedSubscript:", CFSTR("Tx OFDMA RU Counters")));
  v270 = v269 == 0;

  if (v270)
    goto LABEL_157;
  v265 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v416, "objectForKeyedSubscript:", v263));
  v271 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v265, "objectForKeyedSubscript:", CFSTR("Slice 1")));
  if (v271)
  {
    v272 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v416, "objectForKeyedSubscript:", v263));
    v273 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v272, "objectForKeyedSubscript:", CFSTR("Slice 1")));
    v274 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v273, "objectForKeyedSubscript:", CFSTR("Tx OFDMA RU Counters")));
    v275 = v274 == 0;

    if (!v275)
      sub_100029034(v416, v261, v259, a3, v378, CFSTR("NWARU_txs"), v263, CFSTR("Tx OFDMA RU Counters"));
  }
  else
  {
LABEL_156:

  }
LABEL_157:
  v276 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v416, "objectForKeyedSubscript:", v263));
  v277 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v276, "objectForKeyedSubscript:", CFSTR("Slice 0")));
  if (!v277)
    goto LABEL_162;
  v278 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v416, "objectForKeyedSubscript:", v263));
  v279 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v278, "objectForKeyedSubscript:", CFSTR("Slice 0")));
  v280 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v279, "objectForKeyedSubscript:", CFSTR("Rx OFDMA RU Counters")));
  v281 = v280 == 0;

  if (v281)
    goto LABEL_163;
  v276 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v416, "objectForKeyedSubscript:", v263));
  v282 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v276, "objectForKeyedSubscript:", CFSTR("Slice 1")));
  if (v282)
  {
    v283 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v416, "objectForKeyedSubscript:", v263));
    v284 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v283, "objectForKeyedSubscript:", CFSTR("Slice 1")));
    v285 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v284, "objectForKeyedSubscript:", CFSTR("Rx OFDMA RU Counters")));
    v286 = v285 == 0;

    if (!v286)
      sub_100029034(v416, v261, v259, a3, v378, CFSTR("NWARU_rxs"), v263, CFSTR("Rx OFDMA RU Counters"));
  }
  else
  {
LABEL_162:

  }
LABEL_163:
  objc_autoreleasePoolPop(v264);

  objc_destroyWeak((id *)v448);
  v287 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v399, "fieldForKey:", CFSTR("NWACS_channelsVisited0")));
  objc_msgSend(v287, "setUint32Value:", 0);

  v288 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v399, "fieldForKey:", CFSTR("NWACS_channelsVisited1")));
  objc_msgSend(v288, "setUint32Value:", 0);

  v289 = sub_100024B98(v416);
  v409 = (__CFString *)objc_claimAutoreleasedReturnValue(v289);
  *(_OWORD *)v431 = 0u;
  v432 = 0u;
  v433 = 0u;
  v434 = 0u;
  v290 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v416, "allKeys"));
  v291 = (char *)objc_msgSend(v290, "countByEnumeratingWithState:objects:count:", v431, v448, 16);
  if (v291)
  {
    v292 = *(_QWORD *)v432;
    while (2)
    {
      for (m = 0; m != v291; ++m)
      {
        if (*(_QWORD *)v432 != v292)
          objc_enumerationMutation(v290);
        v294 = (void *)*((_QWORD *)v431[1] + (_QWORD)m);
        if ((objc_msgSend(v294, "containsString:", CFSTR("CCPipe")) & 1) != 0)
        {
          obja = v294;

          v290 = obja;
          goto LABEL_173;
        }
      }
      v291 = (char *)objc_msgSend(v290, "countByEnumeratingWithState:objects:count:", v431, v448, 16);
      if (v291)
        continue;
      break;
    }
  }
  obja = 0;
LABEL_173:

  sub_100024D98(v416, v399, CFSTR("NWACS_controllerResets"), v409, CFSTR("Controller"), CFSTR("Driver Availability"), CFSTR("Driver Transitioned to Unavailable"));
  v295 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v416, "objectForKeyedSubscript:", v409));
  v296 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v295, "objectForKeyedSubscript:", CFSTR("TX STATUS")));
  v297 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v296, "objectForKeyedSubscript:", CFSTR("TX Backoff Stuck")));

  v298 = v416;
  if (v297)
    sub_100024D98(v416, v399, CFSTR("NWACS_backoffStuck"), v409, CFSTR("TX STATUS"), CFSTR("TX Backoff Stuck"), CFSTR("Backoff Stuck Detected"));
  v299 = 0;
  v300 = 1;
  v404 = CFSTR("NWACS_channelsVisited0");
  do
  {
    v386 = v300;
    v424 = (__CFString *)objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Channel Switch: Slice %lu"), v299);
    v301 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v298, "objectForKeyedSubscript:", v409));
    v302 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v301, "objectForKeyedSubscript:", v424));
    v303 = v302 == 0;

    if (!v303)
    {
      v428 = 0u;
      v429 = 0u;
      v426 = 0u;
      v427 = 0u;
      v304 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v416, "objectForKeyedSubscript:", v409));
      v305 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v304, "objectForKeyedSubscript:", v424));
      v306 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v305, "objectForKeyedSubscript:", CFSTR("Channels Visited")));
      v391 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v306, "allKeys"));

      v307 = objc_msgSend(v391, "countByEnumeratingWithState:objects:count:", &v426, v435, 16);
      if (v307)
      {
        v393 = *(_QWORD *)v427;
        do
        {
          v308 = 0;
          do
          {
            if (*(_QWORD *)v427 != v393)
              objc_enumerationMutation(v391);
            v309 = *(void **)(*((_QWORD *)&v426 + 1) + 8 * (_QWORD)v308);
            v310 = v399;
            v311 = v404;
            v312 = v409;
            v313 = v424;
            v314 = v309;
            v315 = sub_100025990(v416, v312, v313, CFSTR("Channels Visited"), v314);
            if (v315)
            {
              IntegerValue = IOReportSimpleGetIntegerValue(v315, 0);
              v317 = objc_claimAutoreleasedReturnValue(objc_msgSend(v310, "fieldForKey:", v311));
              v318 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v310, "fieldForKey:", v311));
              -[NSObject setUint32Value:](v317, "setUint32Value:", objc_msgSend(v318, "uint32Value") + IntegerValue);

            }
            else
            {
              v319 = WALogCategoryDefaultHandle();
              v317 = objc_claimAutoreleasedReturnValue(v319);
              if (os_log_type_enabled(v317, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v448 = 136447490;
                v449 = "_Bool addUInt32FieldFromSimple(NSDictionary * _Nonnull __strong, WAMessageAWD * _Nullable __stron"
                       "g, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSSt"
                       "ring * _Nonnull __strong, NSString * _Nonnull __strong)";
                v450 = 1024;
                v451 = 154;
                v452 = 2112;
                v453 = v409;
                v454 = 2112;
                v455 = v424;
                v456 = 2112;
                v457 = CFSTR("Channels Visited");
                v458 = 2112;
                v459 = v314;
                _os_log_impl((void *)&_mh_execute_header, v317, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to find %@ %@ %@ %@", v448, 0x3Au);
              }
            }

            v308 = (char *)v308 + 1;
          }
          while (v307 != v308);
          v320 = objc_msgSend(v391, "countByEnumeratingWithState:objects:count:", &v426, v435, 16);
          v307 = v320;
        }
        while (v320);
      }

    }
    v300 = 0;
    v404 = CFSTR("NWACS_channelsVisited1");
    v299 = 1;
    v298 = v416;
  }
  while ((v386 & 1) != 0);
  sub_100028720(v416, v399, CFSTR("NWACS_commandsIssued"), v409, CFSTR("Commander"), CFSTR("Counters"), CFSTR("Commands Issued"));
  sub_100024D98(v416, v399, CFSTR("NWACS_commanderHalted"), v409, CFSTR("Commander"), CFSTR("Counters"), CFSTR("Commander Quiesce"));
  sub_100024D98(v416, v399, CFSTR("NWACS_iorSuccess"), v409, CFSTR("IOReporter API"), CFSTR("UpdateReport Calls"), CFSTR("Success"));
  sub_100024D98(v416, v399, CFSTR("NWACS_iorWA"), v409, CFSTR("IOReporter API"), CFSTR("UpdateReport Calls"), CFSTR("wifianalyticsd"));
  sub_100024D98(v416, v399, CFSTR("NWACS_ccCaptureDriverLogs"), obja, CFSTR("CoreCapture"), CFSTR("Pipe DriverLogs"), CFSTR("                       Capture Requests"));

  objc_destroyWeak(&location);
}

void sub_10000F0D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10000F208(void *a1, void *a2, void *a3, void *a4, _QWORD *a5)
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  NSObject *v22;
  void *v23;
  id v24;
  NSObject *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  void *v39;
  void *v40;
  uint64_t IntegerValue;
  NSObject *v42;
  void *v43;
  void *v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  id v50;
  id v51;
  id v52;
  id v54;
  id v55;
  void *context;
  id v57;
  void *v58;
  void *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  NSErrorUserInfoKey v72;
  const __CFString *v73;
  _BYTE v74[128];
  _BYTE v75[128];
  uint8_t v76[128];
  uint8_t buf[4];
  const char *v78;
  __int16 v79;
  int v80;
  __int16 v81;
  id v82;
  __int16 v83;
  id v84;
  __int16 v85;
  id v86;
  __int16 v87;
  const __CFString *v88;

  v57 = a1;
  v54 = a2;
  v55 = a3;
  v8 = a4;
  context = objc_autoreleasePoolPush();
  v59 = v8;
  v9 = sub_100024B98(v8);
  v58 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v70 = 0u;
  v71 = 0u;
  v68 = 0u;
  v69 = 0u;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", v58));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "allKeys"));

  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v68, v76, 16);
  if (v12)
  {
    v13 = *(_QWORD *)v69;
LABEL_3:
    v14 = 0;
    while (1)
    {
      if (*(_QWORD *)v69 != v13)
        objc_enumerationMutation(v11);
      v15 = *(void **)(*((_QWORD *)&v68 + 1) + 8 * v14);
      if (objc_msgSend(v15, "containsString:", CFSTR("Interface en")))
      {
        if ((objc_msgSend(v15, "containsString:", CFSTR("Peer 00:00:00:00:00:00")) & 1) != 0)
          break;
      }
      if (v12 == (id)++v14)
      {
        v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v68, v76, 16);
        if (v12)
          goto LABEL_3;
        goto LABEL_10;
      }
    }
    v26 = v15;

    if (!v26)
      goto LABEL_11;
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "objectForKeyedSubscript:", v58));
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "objectForKeyedSubscript:", v26));
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "allKeys"));

    v30 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v64, v75, 16);
    if (v30)
    {
      v31 = *(_QWORD *)v65;
LABEL_24:
      v32 = 0;
      while (1)
      {
        if (*(_QWORD *)v65 != v31)
          objc_enumerationMutation(v29);
        v33 = *(void **)(*((_QWORD *)&v64 + 1) + 8 * v32);
        if ((objc_msgSend(v33, "containsString:", CFSTR("Link quality monitor measurements")) & 1) != 0)
          break;
        if (v30 == (id)++v32)
        {
          v30 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v64, v75, 16);
          if (v30)
            goto LABEL_24;
          goto LABEL_30;
        }
      }
      v34 = v33;

      if (!v34)
      {

        objc_autoreleasePoolPop(context);
        goto LABEL_48;
      }
      sub_100028720(v59, v57, CFSTR("WFAAWDLQM_cCA"), v58, v26, v34, CFSTR("CCA (%) excluding own traffic"));
      v35 = v59;
      v36 = v57;
      v37 = v58;
      v20 = v26;
      v38 = v34;
      v39 = objc_autoreleasePoolPush();
      v40 = sub_100025990(v35, v37, v20, v38, CFSTR("RSSI (dB)"));
      if (v40)
      {
        IntegerValue = IOReportSimpleGetIntegerValue(v40, 0);
        v42 = objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "fieldForKey:", CFSTR("WFAAWDLQM_rSSI")));
        -[NSObject setInt64Value:](v42, "setInt64Value:", IntegerValue);
      }
      else
      {
        v52 = WALogCategoryDefaultHandle();
        v42 = objc_claimAutoreleasedReturnValue(v52);
        if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136447490;
          v78 = "_Bool fillInt64FieldFromSimple(NSDictionary * _Nonnull __strong, WAMessageAWD * _Nullable __strong, NSSt"
                "ring * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnul"
                "l __strong, NSString * _Nonnull __strong)";
          v79 = 1024;
          v80 = 223;
          v81 = 2112;
          v82 = v37;
          v83 = 2112;
          v84 = v20;
          v85 = 2112;
          v86 = v38;
          v87 = 2112;
          v88 = CFSTR("RSSI (dB)");
          _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to find %@ %@ %@ %@", buf, 0x3Au);
        }
      }

      objc_autoreleasePoolPop(v39);
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_txPhyRate"), v37, v20, v38, CFSTR("Avg Tx Phy Rate (Mbps)"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_rxPhyRate"), v37, v20, v38, CFSTR("Avg Rx Phy Rate (Mbps)"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_txAMPDUDensity"), v37, v20, v38, CFSTR("Mode Tx AMPDU Density"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_measurementDurMS"), v37, v20, v38, CFSTR("Time since last measurement (ms)"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_concurrentIntDurMS"), v37, v20, v38, CFSTR("Concurrent interfaces active duration (ms)"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_tVPMActiveDurationMS"), v37, v20, v38, CFSTR("TVPM active duration (ms)"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_phyTxActivityDurMS"), v37, v20, v38, CFSTR("Actual Tx activity duration (ms)"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_phyRxActivityDurMS"), v37, v20, v38, CFSTR("Actual Rx activity duration (ms)"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_txSubBytes"), v37, v20, v38, CFSTR("Submitted Tx bytes"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_txCompBytes"), v37, v20, v38, CFSTR("Successfully completed Tx bytes"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_txDelayBytes"), v37, v20, v38, CFSTR("Delayed Tx bytes from last measurement"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_offChanDurMS"), v37, v20, v38, CFSTR("Off channel duration (ms)"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_txSubPkts"), v37, v20, v38, CFSTR("Submitted Tx packet count"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_txCompPkts"), v37, v20, v38, CFSTR("Successfully completed Tx packet (host reported) count"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_maxQueueFullDurMS"), v37, v20, v38, CFSTR("Max Tx queue full duration (ms) across all AC's"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_avgTxLatencyMS"), v37, v20, v38, CFSTR("Average Tx latency (ms)"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_bTAntennaDurMS"), v37, v20, v38, CFSTR("BT antenna shared duration (ms)"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_outputThroughput"), v37, v20, v38, CFSTR("Tx output throughput from WiFi chipset (Mbps)"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_inputThroughput"), v37, v20, v38, CFSTR("Tx input throughput from NW stack (Mbps)"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_expectedThroughput"), v37, v20, v38, CFSTR("Tx expected throughput for given channel conditions (Mbps)"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_delayedThroughput"), v37, v20, v38, CFSTR("Tx delayed throughput from last measurement period (Mbps)"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_availWLANDurMS"), v37, v20, v38, CFSTR("Available duration for WLAN activity (ms)"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_availWLANTxDurMS"), v37, v20, v38, CFSTR("Available duration for WLAN Tx activity (ms)"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_availWLANRxDurMS"), v37, v20, v38, CFSTR("Available duration for WLAN Rx activity (ms)"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_txRetries"), v37, v20, v38, CFSTR("Tx retry count"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_txFails"), v37, v20, v38, CFSTR("Tx failure count"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_txFrames"), v37, v20, v38, CFSTR("Tx packet (FW reported) count"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_rxOvflErrs"), v37, v20, v38, CFSTR("Rx overflow errors"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_rxFCSErrs"), v37, v20, v38, CFSTR("Rx FCS errors"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_rxPLCPErrs"), v37, v20, v38, CFSTR("Rx PLCP errors"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_rxCRSErrs"), v37, v20, v38, CFSTR("Rx CRS glitches"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_rxDupErrs"), v37, v20, v38, CFSTR("Rx duplicate errors"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_rxReplayErrs"), v37, v20, v38, CFSTR("Rx replay errors"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_rxDecryErrs"), v37, v20, v38, CFSTR("Rx decrypt errors"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_rxRetries"), v37, v20, v38, CFSTR("Rx retry count"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_rxGoodPlcps"), v37, v20, v38, CFSTR("Rx good PLCP count"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_rxFrames"), v37, v20, v38, CFSTR("Rx packet (FW reported) count"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_sNR"), v37, v20, v38, CFSTR("SNR"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_txExpectedAMPDUDensity"), v37, v20, v38, CFSTR("Expected Tx AMPDU density"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_rC1CoexDurationMS"), v37, v20, v38, CFSTR("RC1 coex durations (ms)"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_rC2CoexDurationMS"), v37, v20, v38, CFSTR("RC2 coex durations (ms)"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_lTECoexDurationMS"), v37, v20, v38, CFSTR("LTE coex durations (ms)"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_rxThroughput"), v37, v20, v38, CFSTR("Rx throughput (Mbps)"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_aPTxDataStall"), v37, v20, v38, CFSTR("AP Tx data stall"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_rxAmpduTxBaMismatch"), v37, v20, v38, CFSTR("Rx AMPDU TxBA mismatch"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_symptomsFails"), v37, v20, v38, CFSTR("Symptoms fails"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_is2GBand"), v37, v20, v38, CFSTR("Is 2G band"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_isFGTraffic"), v37, v20, v38, CFSTR("Is FG traffic"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_baselineThroughput"), v37, v20, v38, CFSTR("Throughput test baseline"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_testThroughput"), v37, v20, v38, CFSTR("Throughput test result"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_infraDutyCycle"), v37, v20, v38, CFSTR("Infra duty cycle"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_lastScanReason"), v37, v20, v38, CFSTR("Last scan reason"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_accessPointOUI"), v37, v20, v38, CFSTR("AP MAC address"));
      sub_100028720(v35, v36, CFSTR("WFAAWDLQM_timeSinceLastRecovery"), v37, v20, v38, CFSTR("Time since last recovery"));

      v62 = 0u;
      v63 = 0u;
      v60 = 0u;
      v61 = 0u;
      v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "objectForKeyedSubscript:", v37));
      v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "objectForKeyedSubscript:", v20));
      v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "allKeys"));

      v46 = objc_msgSend(v45, "countByEnumeratingWithState:objects:count:", &v60, v74, 16);
      if (!v46)
      {
LABEL_42:

LABEL_43:
        v50 = WALogCategoryDefaultHandle();
        v17 = objc_claimAutoreleasedReturnValue(v50);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          v78 = "void slowWiFiDiagnosticsCounterSample(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulator"
                "MessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong,"
                " NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
          v79 = 1024;
          v80 = 2741;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to find subgroup with contains Link quality monitor measurements", buf, 0x12u);
        }
        goto LABEL_14;
      }
      v47 = *(_QWORD *)v61;
LABEL_36:
      v48 = 0;
      while (1)
      {
        if (*(_QWORD *)v61 != v47)
          objc_enumerationMutation(v45);
        v49 = *(void **)(*((_QWORD *)&v60 + 1) + 8 * v48);
        if ((objc_msgSend(v49, "containsString:", CFSTR("Link quality monitor states")) & 1) != 0)
          break;
        if (v46 == (id)++v48)
        {
          v46 = objc_msgSend(v45, "countByEnumeratingWithState:objects:count:", &v60, v74, 16);
          if (v46)
            goto LABEL_36;
          goto LABEL_42;
        }
      }
      v51 = v49;

      if (!v51)
        goto LABEL_43;
      sub_10002991C(v35, v36, CFSTR("WFAAWDLQM_txOutputBelowExpectedTrue"), v37, v20, v51, CFSTR("Tx output throughput is below expected throughput"), CFSTR("TRUE"));
      sub_10002991C(v35, v36, CFSTR("WFAAWDLQM_txOutputBelowExpectedFalse"), v37, v20, v51, CFSTR("Tx output throughput is below expected throughput"), CFSTR("FALSE"));
      sub_10002991C(v35, v36, CFSTR("WFAAWDLQM_txOutputBelowInputTrue"), v37, v20, v51, CFSTR("Tx output throughput is below input throughput"), CFSTR("TRUE"));
      sub_10002991C(v35, v36, CFSTR("WFAAWDLQM_txOutputBelowInputFalse"), v37, v20, v51, CFSTR("Tx output throughput is below input throughput"), CFSTR("FALSE"));
      sub_10002991C(v35, v36, CFSTR("WFAAWDLQM_txLowFrameCountTrue"), v37, v20, v51, CFSTR("Tx frame count is too low for LQM analysis"), CFSTR("TRUE"));
      sub_10002991C(v35, v36, CFSTR("WFAAWDLQM_txLowFrameCountFalse"), v37, v20, v51, CFSTR("Tx frame count is too low for LQM analysis"), CFSTR("FALSE"));
      sub_10002991C(v35, v36, CFSTR("WFAAWDLQM_rxLowFrameCountTrue"), v37, v20, v51, CFSTR("Rx frame count is too low for LQM analysis"), CFSTR("TRUE"));
      sub_10002991C(v35, v36, CFSTR("WFAAWDLQM_rxLowFrameCountFalse"), v37, v20, v51, CFSTR("Rx frame count is too low for LQM analysis"), CFSTR("FALSE"));
      sub_10002991C(v35, v36, CFSTR("WFAAWDLQM_highTxLatencyTrue"), v37, v20, v51, CFSTR("Tx latency is too high"), CFSTR("TRUE"));
      sub_10002991C(v35, v36, CFSTR("WFAAWDLQM_highTxLatencyFalse"), v37, v20, v51, CFSTR("Tx latency is too high"), CFSTR("FALSE"));
      sub_10002991C(v35, v36, CFSTR("WFAAWDLQM_lowTxPhyRateTrue"), v37, v20, v51, CFSTR("Tx phy rate is below expectation"), CFSTR("TRUE"));
      sub_10002991C(v35, v36, CFSTR("WFAAWDLQM_lowTxPhyRateFalse"), v37, v20, v51, CFSTR("Tx phy rate is below expectation"), CFSTR("FALSE"));
      sub_10002991C(v35, v36, CFSTR("WFAAWDLQM_highTxPerTrue"), v37, v20, v51, CFSTR("Tx PER is too high"), CFSTR("TRUE"));
      sub_10002991C(v35, v36, CFSTR("WFAAWDLQM_highTxPerFalse"), v37, v20, v51, CFSTR("Tx PER is too high"), CFSTR("FALSE"));
      sub_10002991C(v35, v36, CFSTR("WFAAWDLQM_highTxRetriesTrue"), v37, v20, v51, CFSTR("Tx retries are too high"), CFSTR("TRUE"));
      sub_10002991C(v35, v36, CFSTR("WFAAWDLQM_highTxRetriesFalse"), v37, v20, v51, CFSTR("Tx retries are too high"), CFSTR("FALSE"));
      sub_10002991C(v35, v36, CFSTR("WFAAWDLQM_txQueueFullTrue"), v37, v20, v51, CFSTR("Atleast one tx queue is mostly full"), CFSTR("TRUE"));
      sub_10002991C(v35, v36, CFSTR("WFAAWDLQM_txQueueFullFalse"), v37, v20, v51, CFSTR("Atleast one tx queue is mostly full"), CFSTR("FALSE"));
      sub_10002991C(v35, v36, CFSTR("WFAAWDLQM_lowTxAMPDUDensityTrue"), v37, v20, v51, CFSTR("Tx AMPDU density is too low"), CFSTR("TRUE"));
      sub_10002991C(v35, v36, CFSTR("WFAAWDLQM_lowTxAMPDUDensityFalse"), v37, v20, v51, CFSTR("Tx AMPDU density is too low"), CFSTR("FALSE"));
      sub_10002991C(v35, v36, CFSTR("WFAAWDLQM_highRxRetriesTrue"), v37, v20, v51, CFSTR("Rx retries are too high"), CFSTR("TRUE"));
      sub_10002991C(v35, v36, CFSTR("WFAAWDLQM_highRxRetriesFalse"), v37, v20, v51, CFSTR("Rx retries are too high"), CFSTR("FALSE"));
      sub_10002991C(v35, v36, CFSTR("WFAAWDLQM_highRxPhyPERTrue"), v37, v20, v51, CFSTR("Rx PHY PER is too high"), CFSTR("TRUE"));
      sub_10002991C(v35, v36, CFSTR("WFAAWDLQM_highRxPhyPERFalse"), v37, v20, v51, CFSTR("Rx PHY PER is too high"), CFSTR("FALSE"));
      sub_10002991C(v35, v36, CFSTR("WFAAWDLQM_highRxFCSErrsTrue"), v37, v20, v51, CFSTR("Rx FCS errors are too high"), CFSTR("TRUE"));
      sub_10002991C(v35, v36, CFSTR("WFAAWDLQM_highRxFCSErrsFalse"), v37, v20, v51, CFSTR("Rx FCS errors are too high"), CFSTR("FALSE"));
      sub_10002991C(v35, v36, CFSTR("WFAAWDLQM_highRxOverflowsTrue"), v37, v20, v51, CFSTR("Rx overflows are too high"), CFSTR("TRUE"));
      sub_10002991C(v35, v36, CFSTR("WFAAWDLQM_highRxOverflowsFalse"), v37, v20, v51, CFSTR("Rx overflows are too high"), CFSTR("FALSE"));
      sub_10002991C(v35, v36, CFSTR("WFAAWDLQM_highRxDupsTrue"), v37, v20, v51, CFSTR("Rx duplicates are too high"), CFSTR("TRUE"));
      sub_10002991C(v35, v36, CFSTR("WFAAWDLQM_highRxDupsFalse"), v37, v20, v51, CFSTR("Rx duplicates are too high"), CFSTR("FALSE"));
      sub_10002991C(v35, v36, CFSTR("WFAAWDLQM_highRxReplaysTrue"), v37, v20, v51, CFSTR("Rx replays are too high"), CFSTR("TRUE"));
      sub_10002991C(v35, v36, CFSTR("WFAAWDLQM_highRxReplaysFalse"), v37, v20, v51, CFSTR("Rx replays are too high"), CFSTR("FALSE"));
      sub_10002991C(v35, v36, CFSTR("WFAAWDLQM_highRxDecryptErrsTrue"), v37, v20, v51, CFSTR("Rx decrypt errors are too high"), CFSTR("TRUE"));
      sub_10002991C(v35, v36, CFSTR("WFAAWDLQM_highRxDecryptErrsFalse"), v37, v20, v51, CFSTR("Rx decrypt errors are too high"), CFSTR("FALSE"));
      sub_10002991C(v35, v36, CFSTR("WFAAWDLQM_highRxDataPERTrue"), v37, v20, v51, CFSTR("Rx data PER is too high"), CFSTR("TRUE"));
      sub_10002991C(v35, v36, CFSTR("WFAAWDLQM_highRxDataPERFalse"), v37, v20, v51, CFSTR("Rx data PER is too high"), CFSTR("FALSE"));
      sub_10002991C(v35, v36, CFSTR("WFAAWDLQM_lowAvailWLANDurTrue"), v37, v20, v51, CFSTR("Available WLAN duration is too low"), CFSTR("TRUE"));
      sub_10002991C(v35, v36, CFSTR("WFAAWDLQM_lowAvailWLANDurFalse"), v37, v20, v51, CFSTR("Available WLAN duration is too low"), CFSTR("FALSE"));
      sub_10002991C(v35, v36, CFSTR("WFAAWDLQM_lowAvailWLANTxDurTrue"), v37, v20, v51, CFSTR("Available WLAN Tx duration is too low"), CFSTR("TRUE"));
      sub_10002991C(v35, v36, CFSTR("WFAAWDLQM_lowAvailWLANTxDurFalse"), v37, v20, v51, CFSTR("Available WLAN Tx duration is too low"), CFSTR("FALSE"));
      sub_10002991C(v35, v36, CFSTR("WFAAWDLQM_lowAvailWLANRxDurTrue"), v37, v20, v51, CFSTR("Available WLAN Rx duration is too low"), CFSTR("TRUE"));
      sub_10002991C(v35, v36, CFSTR("WFAAWDLQM_lowAvailWLANRxDurFalse"), v37, v20, v51, CFSTR("Available WLAN Rx duration is too low"), CFSTR("FALSE"));

      objc_autoreleasePoolPop(context);
    }
    else
    {
LABEL_30:

      objc_autoreleasePoolPop(context);
    }
  }
  else
  {
LABEL_10:

LABEL_11:
    v16 = WALogCategoryDefaultHandle();
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "objectForKeyedSubscript:", v58));
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "allKeys"));
      *(_DWORD *)buf = 136446722;
      v78 = "void slowWiFiDiagnosticsCounterSample(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorMess"
            "ageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSDicti"
            "onary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
      v79 = 1024;
      v80 = 2661;
      v81 = 2112;
      v82 = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to find group Interface en0 Peer 00:... we have %@", buf, 0x1Cu);

    }
    v20 = 0;
LABEL_14:

    objc_autoreleasePoolPop(context);
    v21 = WALogCategoryDefaultHandle();
    v22 = objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v78 = "void slowWiFiDiagnosticsCounterSample(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorMess"
            "ageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSDicti"
            "onary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
      v79 = 1024;
      v80 = 2814;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%{public}s::%d:Mandatory IOReporter TxOutputBelowExpected is missing", buf, 0x12u);
    }

    if (!*a5)
    {
      v72 = NSLocalizedFailureReasonErrorKey;
      v73 = CFSTR("WAErrorCodeTxOutputBelowExpectedMissing");
      v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v73, &v72, 1));
      *a5 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.wifi.analytics.errordomain"), 9029, v23));

    }
    v24 = WALogCategoryDefaultHandle();
    v25 = objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v78 = "void slowWiFiDiagnosticsCounterSample(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorMess"
            "ageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSDicti"
            "onary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
      v79 = 1024;
      v80 = 2818;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed ", buf, 0x12u);
    }

  }
LABEL_48:

}

void sub_1000109EC(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, void *a7, void *a8, void *a9)
{
  id v15;
  id v16;
  id v17;
  id v18;
  void (**v19)(id, id, id);
  id v20;
  void *v21;
  void *v22;
  uint64_t v23;
  id v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  id location;

  v15 = a2;
  v16 = a3;
  v17 = a4;
  objc_initWeak(&location, a5);
  v18 = a7;
  v30 = a8;
  v19 = a9;
  v20 = objc_loadWeakRetained(&location);
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "fieldForKey:", CFSTR("DPSCS_controllerStats")));
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "subMessageValue"));

  v32 = 0;
  sub_10000A7C0(v22, v20, a6, v18, v16, v17, &v32);
  v29 = v16;
  v23 = a6;
  v24 = v32;
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "fieldForKey:", CFSTR("DPSCS_peerStats")));
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "subMessageValue"));

  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "fieldForKey:", CFSTR("NWAPS_hashID")));
  objc_msgSend(v27, "setStringValue:", CFSTR("00:00:00:00:00:00"));

  v31 = v24;
  sub_100010BE0(v15, v26, v20, v23, v18, v29, v17, v30, &v31);
  v28 = v31;

  v19[2](v19, v15, v28);
  objc_destroyWeak(&location);

}

void sub_100010BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100010BE0(void *a1, void *a2, void *a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8, _QWORD *a9)
{
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  NSObject *v28;
  id v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  char v35;
  uint64_t v36;
  void *i;
  void *v38;
  void *v39;
  BOOL v40;
  void *v41;
  BOOL v42;
  void *v43;
  BOOL v44;
  void *v45;
  _BOOL4 v46;
  void *v47;
  id v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  id v56;
  void *v57;
  void *v58;
  void *v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  id v64;
  NSObject *v65;
  void *v66;
  void *v67;
  id v68;
  NSObject *v69;
  id v70;
  id v71;
  NSObject *v72;
  void *v73;
  id v74;
  NSObject *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  id v81;
  NSObject *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  id v108;
  NSObject *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  id v131;
  NSObject *v132;
  void *v133;
  void *v134;
  id v135;
  id v136;
  void *v137;
  id v138;
  void *v139;
  id val;
  void *v141;
  id v142;
  id v144;
  void *v145;
  uint64_t v146;
  NSObject *v147;
  id v148;
  id v149;
  id v150;
  id v151;
  void *context;
  uint64_t v153;
  void *v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  id location;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  id v168;
  NSErrorUserInfoKey v169;
  const __CFString *v170;
  NSErrorUserInfoKey v171;
  const __CFString *v172;
  NSErrorUserInfoKey v173;
  const __CFString *v174;
  NSErrorUserInfoKey v175;
  const __CFString *v176;
  _BYTE v177[128];
  uint8_t v178[128];
  uint8_t buf[4];
  const char *v180;
  __int16 v181;
  int v182;
  __int16 v183;
  void *v184;

  v136 = a1;
  v15 = a2;
  objc_initWeak(&location, a3);
  v16 = a5;
  v17 = a6;
  v18 = a7;
  v19 = a8;
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Interface %@ Peer %@"), v19, CFSTR("00:00:00:00:00:00")));
  v141 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Interface %@"), v19));
  v137 = v19;
  v139 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Interface %@ Chip"), v19));
  val = objc_loadWeakRetained(&location);
  v151 = v15;
  objc_initWeak(&v168, val);
  v21 = v20;
  v144 = v16;
  v138 = v17;
  v150 = v18;
  v154 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v142 = objc_loadWeakRetained(&v168);
  v22 = sub_100024B98(v150);
  v23 = objc_claimAutoreleasedReturnValue(v22);
  v148 = v21;
  v145 = (void *)v23;
  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v150, "objectForKeyedSubscript:", v23));
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "objectForKeyedSubscript:", v148));
  LODWORD(v18) = v25 == 0;

  if (!(_DWORD)v18)
  {
    v166 = 0u;
    v167 = 0u;
    v164 = 0u;
    v165 = 0u;
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v150, "objectForKeyedSubscript:", v23));
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "objectForKeyedSubscript:", v148));
    v147 = objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "allKeys"));

    v28 = v147;
    v29 = -[NSObject countByEnumeratingWithState:objects:count:](v147, "countByEnumeratingWithState:objects:count:", &v164, buf, 16);
    if (!v29)
      goto LABEL_43;
    v146 = *(_QWORD *)v165;
    while (1)
    {
      v30 = 0;
      v149 = v29;
      do
      {
        if (*(_QWORD *)v165 != v146)
          objc_enumerationMutation(v28);
        v153 = v30;
        v31 = *(void **)(*((_QWORD *)&v164 + 1) + 8 * v30);
        context = objc_autoreleasePoolPush();
        if ((objc_msgSend(v31, "isEqualToString:", CFSTR("DataPath BE")) & 1) != 0
          || (objc_msgSend(v31, "isEqualToString:", CFSTR("DataPath BK")) & 1) != 0
          || (objc_msgSend(v31, "isEqualToString:", CFSTR("DataPath VO")) & 1) != 0
          || (objc_msgSend(v31, "isEqualToString:", CFSTR("DataPath VI")) & 1) != 0)
        {
          v162 = 0u;
          v163 = 0u;
          v160 = 0u;
          v161 = 0u;
          v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v151, "fieldForKey:", CFSTR("NWAPS_acCompletions")));
          v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "repeatableValues"));

          v34 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v160, v178, 16);
          if (v34)
          {
            v35 = 0;
            v36 = *(_QWORD *)v161;
            do
            {
              for (i = 0; i != v34; i = (char *)i + 1)
              {
                if (*(_QWORD *)v161 != v36)
                  objc_enumerationMutation(v33);
                v38 = *(void **)(*((_QWORD *)&v160 + 1) + 8 * (_QWORD)i);
                if (objc_msgSend(v31, "containsString:", CFSTR("DataPath BE")))
                {
                  v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "fieldForKey:", CFSTR("NWAPACTC_ac")));
                  v40 = objc_msgSend(v39, "int32Value") == 3;

                  if (v40)
                    goto LABEL_24;
                }
                if (objc_msgSend(v31, "containsString:", CFSTR("DataPath BK")))
                {
                  v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "fieldForKey:", CFSTR("NWAPACTC_ac")));
                  v42 = objc_msgSend(v41, "int32Value") == 2;

                  if (v42)
                    goto LABEL_24;
                }
                if (!objc_msgSend(v31, "containsString:", CFSTR("DataPath VO"))
                  || (v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "fieldForKey:", CFSTR("NWAPACTC_ac"))),
                      v44 = objc_msgSend(v43, "int32Value") == 4,
                      v43,
                      !v44))
                {
                  if (!objc_msgSend(v31, "containsString:", CFSTR("DataPath VI")))
                    continue;
                  v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "fieldForKey:", CFSTR("NWAPACTC_ac")));
                  v46 = objc_msgSend(v45, "int32Value") == 5;

                  if (!v46)
                    continue;
                }
LABEL_24:
                objc_msgSend(v154, "setObject:forKeyedSubscript:", v38, v31);
                v35 = 1;
              }
              v34 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v160, v178, 16);
            }
            while (v34);

            if ((v35 & 1) != 0)
              goto LABEL_40;
          }
          else
          {

          }
          v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v142, "getNewMessageForKey:groupType:forProcessWithToken:", CFSTR("NWAPACTC"), a4, v144));
          v48 = objc_msgSend(v47, "copy");
          objc_msgSend(v154, "setObject:forKeyedSubscript:", v48, v31);

          if (objc_msgSend(v31, "containsString:", CFSTR("DataPath BE")))
          {
            v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v154, "objectForKeyedSubscript:", v31));
            v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "fieldForKey:", CFSTR("NWAPACTC_ac")));
            objc_msgSend(v50, "setInt32Value:", 3);
            goto LABEL_38;
          }
          if (objc_msgSend(v31, "containsString:", CFSTR("DataPath BK")))
          {
            v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v154, "objectForKeyedSubscript:", v31));
            v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "fieldForKey:", CFSTR("NWAPACTC_ac")));
            objc_msgSend(v50, "setInt32Value:", 2);
            goto LABEL_38;
          }
          if (objc_msgSend(v31, "containsString:", CFSTR("DataPath VO")))
          {
            v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v154, "objectForKeyedSubscript:", v31));
            v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "fieldForKey:", CFSTR("NWAPACTC_ac")));
            objc_msgSend(v50, "setInt32Value:", 4);
            goto LABEL_38;
          }
          if (objc_msgSend(v31, "containsString:", CFSTR("DataPath VI")))
          {
            v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v154, "objectForKeyedSubscript:", v31));
            v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "fieldForKey:", CFSTR("NWAPACTC_ac")));
            objc_msgSend(v50, "setInt32Value:", 5);
LABEL_38:

          }
          v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v151, "fieldForKey:", CFSTR("NWAPS_acCompletions")));
          v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v154, "objectForKeyedSubscript:", v31));
          objc_msgSend(v51, "addRepeatableSubMessageValue:", v52);

LABEL_40:
          v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v154, "objectForKeyedSubscript:", v31));
          sub_100024D98(v150, v53, CFSTR("NWAPACTC_success"), v145, v148, v31, CFSTR("Total Successfull Completions"));
          sub_100024D98(v150, v53, CFSTR("NWAPACTC_durSinceLastSuccessfulComp"), v145, v148, v31, CFSTR("Duration Since Last Successful Completion"));
          sub_100024D98(v150, v53, CFSTR("NWAPACTC_failedComp"), v145, v148, v31, CFSTR("Total Failed Completions"));
          sub_100024D98(v150, v53, CFSTR("NWAPACTC_durSinceLastFailedComp"), v145, v148, v31, CFSTR("Duration Since Last Failed Completion"));
          sub_100024D98(v150, v53, CFSTR("NWAPACTC_expiredComp"), v145, v148, v31, CFSTR("Expired Completions"));
          sub_100024D98(v150, v53, CFSTR("NWAPACTC_noAckComp"), v145, v148, v31, CFSTR("NoACK Completions"));
          sub_100024D98(v150, v53, CFSTR("NWAPACTC_otherErrComp"), v145, v148, v31, CFSTR("OtherErr Completions"));
          sub_100024D98(v150, v53, CFSTR("NWAPACTC_durSinceLastEnqueue"), v145, v148, v31, CFSTR("Duration Since Last Enqueue"));
          sub_100024D98(v150, v53, CFSTR("NWAPACTC_qeuedPackets"), v145, v148, v31, CFSTR("Queued Packets Waiting For Completion"));
          sub_100024D98(v150, v53, CFSTR("NWAPACTC_sinceLastEnqueueHowManyFailed"), v145, v148, v31, CFSTR("Since Last Enqueue How Many Failed Completions"));
          sub_100024D98(v150, v53, CFSTR("NWAPACTC_sinceLastEnqueueHowManySuccess"), v145, v148, v31, CFSTR("Since Last Enqueue How Many Successfull Completions"));
          sub_100024D98(v150, v53, CFSTR("NWAPACTC_sinceLastSuccessHowManyFailed"), v145, v148, v31, CFSTR("Since Last Success How Many Failed Completions"));
          sub_100024D98(v150, v53, CFSTR("NWAPACTC_durSinceLastEnqueueAtLastCheck"), v145, v148, v31, CFSTR("Duration Since Last Enqueue At Last Check"));
          sub_100024D98(v150, v53, CFSTR("NWAPACTC_successfulCompletionsAtLastCheck"), v145, v148, v31, CFSTR("Successfull Completions Since Last Check"));
          sub_100024D98(v150, v53, CFSTR("NWAPACTC_failedCompletionsAtLastCheck"), v145, v148, v31, CFSTR("Failed Completions Since Last Check"));
          sub_100024D98(v150, v53, CFSTR("NWAPACTC_dpsNotifications"), v145, v148, v31, CFSTR("Data Path Stuck Notifications"));

        }
        objc_autoreleasePoolPop(context);
        v28 = v147;
        v30 = v153 + 1;
      }
      while ((id)(v153 + 1) != v149);
      v29 = -[NSObject countByEnumeratingWithState:objects:count:](v147, "countByEnumeratingWithState:objects:count:", &v164, buf, 16);
      if (!v29)
        goto LABEL_43;
    }
  }
  v131 = WALogCategoryDefaultHandle();
  v132 = objc_claimAutoreleasedReturnValue(v131);
  if (os_log_type_enabled(v132, OS_LOG_TYPE_ERROR))
  {
    v133 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v150, "objectForKeyedSubscript:", v23));
    v134 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v133, "allKeys"));
    *(_DWORD *)buf = 136446722;
    v180 = "void populateNWActivityPerACCompletions(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorMes"
           "sageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSDictionar"
           "y * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
    v181 = 1024;
    v182 = 589;
    v183 = 2112;
    v184 = v134;
    _os_log_impl((void *)&_mh_execute_header, v132, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to find group, we have %@", buf, 0x1Cu);

  }
  v135 = WALogCategoryDefaultHandle();
  v28 = objc_claimAutoreleasedReturnValue(v135);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    v180 = "void populateNWActivityPerACCompletions(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorMes"
           "sageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSDictionar"
           "y * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
    v181 = 1024;
    v182 = 670;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed ", buf, 0x12u);
  }
LABEL_43:

  objc_destroyWeak(&v168);
  v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v151, "fieldForKey:", CFSTR("NWAPS_completions")));
  v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "subMessageValue"));

  v56 = sub_100024B98(v150);
  v57 = (void *)objc_claimAutoreleasedReturnValue(v56);
  v157 = 0u;
  v158 = 0u;
  v155 = 0u;
  v156 = 0u;
  v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v150, "objectForKeyedSubscript:", v57));
  v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "allKeys"));

  v60 = objc_msgSend(v59, "countByEnumeratingWithState:objects:count:", &v155, v177, 16);
  if (v60)
  {
    v61 = *(_QWORD *)v156;
LABEL_45:
    v62 = 0;
    while (1)
    {
      if (*(_QWORD *)v156 != v61)
        objc_enumerationMutation(v59);
      v63 = *(void **)(*((_QWORD *)&v155 + 1) + 8 * v62);
      if ((objc_msgSend(v63, "isEqualToString:", v141) & 1) != 0)
        break;
      if (v60 == (id)++v62)
      {
        v60 = objc_msgSend(v59, "countByEnumeratingWithState:objects:count:", &v155, v177, 16);
        if (v60)
          goto LABEL_45;
        goto LABEL_51;
      }
    }
    v70 = v63;

    if (!v70)
      goto LABEL_52;
    if ((sub_100024F58(v150, v151, val, a4, v144, CFSTR("NWAPS_ccas"), v57, v141, CFSTR("Average CCA State"), CFSTR("Interface Average CCA State")) & 1) == 0)
    {
      v71 = WALogCategoryDefaultHandle();
      v72 = objc_claimAutoreleasedReturnValue(v71);
      if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v180 = "void populateNWActivityPeerStats(WAMessageAWD * _Nullable __strong, WAMessageAWD * _Nullable __strong, __"
               "weak id<WAIOReporterPopulatorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDic"
               "tionary * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _"
               "Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
        v181 = 1024;
        v182 = 703;
        _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_ERROR, "%{public}s::%d:Mandatory IOReporter Interface Average CCA State is missing", buf, 0x12u);
      }

      if (!*a9)
      {
        v175 = NSLocalizedFailureReasonErrorKey;
        v176 = CFSTR("WAErrorCodeCCAMissing");
        v73 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v176, &v175, 1));
        *a9 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.wifi.analytics.errordomain"), 9021, v73));

      }
    }
    sub_100024F58(v150, v151, val, a4, v144, CFSTR("NWAPS_snrs"), v57, v141, CFSTR("LQM SNR State"), CFSTR("LQM SNR State"));
    if ((sub_100024F58(v150, v151, val, a4, v144, CFSTR("NWAPS_rssis"), v57, v141, CFSTR("LQM RSSI State"), CFSTR("LQM RSSI State")) & 1) == 0)
    {
      v74 = WALogCategoryDefaultHandle();
      v75 = objc_claimAutoreleasedReturnValue(v74);
      if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v180 = "void populateNWActivityPeerStats(WAMessageAWD * _Nullable __strong, WAMessageAWD * _Nullable __strong, __"
               "weak id<WAIOReporterPopulatorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDic"
               "tionary * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _"
               "Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
        v181 = 1024;
        v182 = 711;
        _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_ERROR, "%{public}s::%d:Mandatory IOReporter LQM RSSI State is missing", buf, 0x12u);
      }

      if (!*a9)
      {
        v173 = NSLocalizedFailureReasonErrorKey;
        v174 = CFSTR("WAErrorCodeRSSIMissing");
        v76 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v174, &v173, 1));
        *a9 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.wifi.analytics.errordomain"), 9022, v76));

      }
    }
    v77 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v150, "objectForKeyedSubscript:", v57));
    v78 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v77, "objectForKeyedSubscript:", v148));
    v79 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v78, "objectForKeyedSubscript:", CFSTR("TxCompletion Latency")));
    v80 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v79, "objectForKeyedSubscript:", CFSTR("Completion Latency Be")));

    if (v80)
    {
      sub_100026788(v150, v151, val, a4, v144, CFSTR("NWAPS_txLatencyBEs"), v57, v148, CFSTR("Completion Latency Be"));
    }
    else
    {
      v81 = WALogCategoryDefaultHandle();
      v82 = objc_claimAutoreleasedReturnValue(v81);
      if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v180 = "void populateNWActivityPeerStats(WAMessageAWD * _Nullable __strong, WAMessageAWD * _Nullable __strong, __"
               "weak id<WAIOReporterPopulatorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDic"
               "tionary * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _"
               "Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
        v181 = 1024;
        v182 = 720;
        _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_ERROR, "%{public}s::%d:Mandatory IOReporter TxCompletion Latency, Completion Latency Be is missing", buf, 0x12u);
      }

      if (*a9)
        *a9 = 0;
      v171 = NSLocalizedFailureReasonErrorKey;
      v172 = CFSTR("WAErrorCodeTxLatencyBeMissing");
      v83 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v172, &v171, 1));
      *a9 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.wifi.analytics.errordomain"), 9024, v83));

    }
    v84 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v150, "objectForKeyedSubscript:", v57));
    v85 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v84, "objectForKeyedSubscript:", v148));
    v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v85, "objectForKeyedSubscript:", CFSTR("TxCompletion Latency")));
    v87 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "objectForKeyedSubscript:", CFSTR("Completion Latency Bk")));

    if (v87)
      sub_100026788(v150, v151, val, a4, v144, CFSTR("NWAPS_txLatencyBKs"), v57, v148, CFSTR("Completion Latency Bk"));
    v88 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v150, "objectForKeyedSubscript:", v57));
    v89 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "objectForKeyedSubscript:", v148));
    v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "objectForKeyedSubscript:", CFSTR("TxCompletion Latency")));
    v91 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v90, "objectForKeyedSubscript:", CFSTR("Completion Latency Vo")));

    if (v91)
      sub_100026788(v150, v151, val, a4, v144, CFSTR("NWAPS_txLatencyVOs"), v57, v148, CFSTR("Completion Latency Vo"));
    v92 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v150, "objectForKeyedSubscript:", v57));
    v93 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v92, "objectForKeyedSubscript:", v148));
    v94 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v93, "objectForKeyedSubscript:", CFSTR("TxCompletion Latency")));
    v95 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v94, "objectForKeyedSubscript:", CFSTR("Completion Latency Vi")));

    if (v95)
      sub_100026788(v150, v151, val, a4, v144, CFSTR("NWAPS_txLatencyVIs"), v57, v148, CFSTR("Completion Latency Vi"));
    sub_100025404(v150, v151, val, a4, v144, 0, CFSTR("NWAPS_bytes"), v57, v141, CFSTR("Data Bytes"), CFSTR("Rx Bytes"));
    sub_100025404(v150, v151, val, a4, v144, 3u, CFSTR("NWAPS_bytes"), v57, v141, CFSTR("Data Bytes"), CFSTR("BE Tx Bytes"));
    sub_100025404(v150, v151, val, a4, v144, 2u, CFSTR("NWAPS_bytes"), v57, v141, CFSTR("Data Bytes"), CFSTR("BK Tx Bytes"));
    sub_100025404(v150, v151, val, a4, v144, 5u, CFSTR("NWAPS_bytes"), v57, v141, CFSTR("Data Bytes"), CFSTR("VI Tx Bytes"));
    sub_100025404(v150, v151, val, a4, v144, 4u, CFSTR("NWAPS_bytes"), v57, v141, CFSTR("Data Bytes"), CFSTR("VO Tx Bytes"));
    sub_100025404(v150, v151, val, a4, v144, 1u, CFSTR("NWAPS_bytes"), v57, v141, CFSTR("Data Bytes"), CFSTR("Tx Bytes"));
    v96 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v150, "objectForKeyedSubscript:", v57));
    v97 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v96, "objectForKeyedSubscript:", v139));
    v98 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v97, "objectForKeyedSubscript:", CFSTR("Rx Data Byte Counters")));

    if (v98)
    {
      sub_100025404(v150, v151, val, a4, v144, 6u, CFSTR("NWAPS_bytes"), v57, v139, CFSTR("Rx Data Byte Counters"), CFSTR("SU MPDU Bytes"));
      sub_100025404(v150, v151, val, a4, v144, 8u, CFSTR("NWAPS_bytes"), v57, v139, CFSTR("Rx Data Byte Counters"), CFSTR("OFDMA MPDU Bytes"));
      sub_100025404(v150, v151, val, a4, v144, 0xAu, CFSTR("NWAPS_bytes"), v57, v139, CFSTR("Rx Data Byte Counters"), CFSTR("MU MIMO MPDU Bytes"));
    }
    v99 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v150, "objectForKeyedSubscript:", v57));
    v100 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v99, "objectForKeyedSubscript:", v139));
    v101 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v100, "objectForKeyedSubscript:", CFSTR("Tx Data Byte Counters")));

    if (v101)
    {
      sub_100025404(v150, v151, val, a4, v144, 7u, CFSTR("NWAPS_bytes"), v57, v139, CFSTR("Tx Data Byte Counters"), CFSTR("SU MPDU Bytes"));
      sub_100025404(v150, v151, val, a4, v144, 9u, CFSTR("NWAPS_bytes"), v57, v139, CFSTR("Tx Data Byte Counters"), CFSTR("OFDMA MPDU Bytes"));
    }
    sub_100025404(v150, v151, val, a4, v144, 0, CFSTR("NWAPS_packets"), v57, v141, CFSTR("Data Packets"), CFSTR("Rx Packets"));
    sub_100025404(v150, v151, val, a4, v144, 3u, CFSTR("NWAPS_packets"), v57, v141, CFSTR("Data Packets"), CFSTR("BE Tx Packets"));
    sub_100025404(v150, v151, val, a4, v144, 2u, CFSTR("NWAPS_packets"), v57, v141, CFSTR("Data Packets"), CFSTR("BK Tx Packets"));
    sub_100025404(v150, v151, val, a4, v144, 5u, CFSTR("NWAPS_packets"), v57, v141, CFSTR("Data Packets"), CFSTR("VI Tx Packets"));
    sub_100025404(v150, v151, val, a4, v144, 4u, CFSTR("NWAPS_packets"), v57, v141, CFSTR("Data Packets"), CFSTR("VO Tx Packets"));
    sub_100025404(v150, v151, val, a4, v144, 1u, CFSTR("NWAPS_packets"), v57, v141, CFSTR("Data Packets"), CFSTR("Tx Packets"));
    v102 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v150, "objectForKeyedSubscript:", v57));
    v103 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v102, "objectForKeyedSubscript:", v139));
    v104 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v103, "objectForKeyedSubscript:", CFSTR("Rx Data Frame Counters")));

    if (v104)
    {
      sub_100025784(v150, v151, val, a4, v144, 6, CFSTR("NWAPS_packets"), v57, v139, CFSTR("Rx Data Frame Counters"), CFSTR("SU MPDU Data"));
      sub_100025784(v150, v151, val, a4, v144, 8, CFSTR("NWAPS_packets"), v57, v139, CFSTR("Rx Data Frame Counters"), CFSTR("MU MIMO MPDU Data"));
      sub_100025784(v150, v151, val, a4, v144, 10, CFSTR("NWAPS_packets"), v57, v139, CFSTR("Rx Data Frame Counters"), CFSTR("OFDMA MPDU Data"));
    }
    v105 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v150, "objectForKeyedSubscript:", v57));
    v106 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v105, "objectForKeyedSubscript:", v139));
    v107 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v106, "objectForKeyedSubscript:", CFSTR("Tx Data Frame Counters")));

    if (v107)
    {
      sub_100025784(v150, v151, val, a4, v144, 7, CFSTR("NWAPS_packets"), v57, v139, CFSTR("Tx Data Frame Counters"), CFSTR("SU MPDU Data"));
      sub_100025784(v150, v151, val, a4, v144, 9, CFSTR("NWAPS_packets"), v57, v139, CFSTR("Tx Data Frame Counters"), CFSTR("OFDMA MPDU Data"));
    }
    sub_100024D98(v150, v55, CFSTR("NWATC_success"), v57, v148, CFSTR("Completions"), CFSTR("Success"));
    sub_100024D98(v150, v55, CFSTR("NWATC_expired"), v57, v148, CFSTR("Completions"), CFSTR("Expired"));
    sub_100024D98(v150, v55, CFSTR("NWATC_nobuf"), v57, v148, CFSTR("Completions"), CFSTR("No Buffers"));
    sub_100024D98(v150, v55, CFSTR("NWATC_noack"), v57, v148, CFSTR("Completions"), CFSTR("No ACK"));
    sub_100024D98(v150, v55, CFSTR("NWATC_txfailure"), v57, v148, CFSTR("Completions"), CFSTR("Tx Failure"));
    sub_100024D98(v150, v55, CFSTR("NWATC_noresources"), v57, v148, CFSTR("Completions"), CFSTR("No Resources"));
    sub_100024D98(v150, v55, CFSTR("NWATC_ioerror"), v57, v148, CFSTR("Completions"), CFSTR("IO Error"));
    sub_100024D98(v150, v55, CFSTR("NWATC_mbfree"), v57, v148, CFSTR("Completions"), CFSTR("MB Free"));
    sub_100024D98(v150, v55, CFSTR("NWATC_mbfree"), v57, v148, CFSTR("Completions"), CFSTR("MB Free"));
    sub_100024D98(v150, v55, CFSTR("NWATC_chipmodeerror"), v57, v148, CFSTR("Completions"), CFSTR("Chip Mode Error"));
    sub_100024D98(v150, v55, CFSTR("NWATC_noremotepeer"), v57, v148, CFSTR("Completions"), CFSTR("No Remote Peer"));
    sub_100024D98(v150, v55, CFSTR("NWATC_internalerror"), v57, v148, CFSTR("Completions"), CFSTR("Internal Error"));
    if (!sub_100029700(v150, v151, CFSTR("NWAPS_rssiValue"), v57, v141, CFSTR("LQM RSSI"), CFSTR("LQM RSSI value")))
    {
      v108 = WALogCategoryDefaultHandle();
      v109 = objc_claimAutoreleasedReturnValue(v108);
      if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v180 = "void populateNWActivityPeerStats(WAMessageAWD * _Nullable __strong, WAMessageAWD * _Nullable __strong, __"
               "weak id<WAIOReporterPopulatorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDic"
               "tionary * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _"
               "Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
        v181 = 1024;
        v182 = 789;
        _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_ERROR, "%{public}s::%d:Mandatory IOReporter LQM RSSI value is missing", buf, 0x12u);
      }

      if (!*a9)
      {
        v169 = NSLocalizedFailureReasonErrorKey;
        v170 = CFSTR("WAErrorCodeRSSIMissing");
        v110 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v170, &v169, 1));
        *a9 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.wifi.analytics.errordomain"), 9022, v110));

      }
    }
    v111 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v150, "objectForKeyedSubscript:", v57));
    v112 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v111, "objectForKeyedSubscript:", v148));
    v113 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v112, "objectForKeyedSubscript:", CFSTR("RSSI")));
    v114 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v113, "objectForKeyedSubscript:", CFSTR("Core 0 RSSI value")));

    if (v114)
      sub_100029700(v150, v151, CFSTR("NWAPS_rssiValue0"), v57, v148, CFSTR("RSSI"), CFSTR("Core 0 RSSI value"));
    v115 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v150, "objectForKeyedSubscript:", v57));
    v116 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v115, "objectForKeyedSubscript:", v148));
    v117 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v116, "objectForKeyedSubscript:", CFSTR("RSSI")));
    v118 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v117, "objectForKeyedSubscript:", CFSTR("Core 1 RSSI value")));

    if (v118)
      sub_100029700(v150, v151, CFSTR("NWAPS_rssiValue1"), v57, v148, CFSTR("RSSI"), CFSTR("Core 1 RSSI value"));
    sub_100029700(v150, v151, CFSTR("NWAPS_snrValue"), v57, v141, CFSTR("LQM SNR"), CFSTR("LQM SNR value"));
    sub_100024D98(v150, v151, CFSTR("NWAPS_ccaValue"), v57, v141, CFSTR("Average CCA"), CFSTR("Interface Avgerage CCA"));
    v119 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v150, "objectForKeyedSubscript:", v57));
    v120 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v119, "objectForKeyedSubscript:", v141));
    v121 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v120, "objectForKeyedSubscript:", CFSTR("Noise Floor")));
    v122 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v121, "objectForKeyedSubscript:", CFSTR("Noise Floor Value")));

    if (v122)
      sub_100029700(v150, v151, CFSTR("NWAPS_nfValue"), v57, v141, CFSTR("Noise Floor"), CFSTR("Noise Floor Value"));
    v123 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v150, "objectForKeyedSubscript:", v57));
    v124 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v123, "objectForKeyedSubscript:", v141));
    v125 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v124, "objectForKeyedSubscript:", CFSTR("OFDM Desense")));
    v126 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v125, "objectForKeyedSubscript:", CFSTR("OFDM Desense Value")));

    if (v126)
      sub_100024D98(v150, v151, CFSTR("NWAPS_ofdmDesense"), v57, v141, CFSTR("OFDM Desense"), CFSTR("OFDM Desense Value"));
    v127 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v150, "objectForKeyedSubscript:", v57));
    v128 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v127, "objectForKeyedSubscript:", v141));
    v129 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v128, "objectForKeyedSubscript:", CFSTR("IBSS CCA")));
    v130 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v129, "objectForKeyedSubscript:", CFSTR("Interface IBSS CCA")));

    if (v130)
    {
      sub_100024D98(v150, v151, CFSTR("NWAPS_ibssCCA"), v57, v141, CFSTR("IBSS CCA"), CFSTR("Interface IBSS CCA"));
      sub_100024D98(v150, v151, CFSTR("NWAPS_obssCCA"), v57, v141, CFSTR("OBSS CCA"), CFSTR("Interface OBSS CCA"));
      sub_100024D98(v150, v151, CFSTR("NWAPS_interferenceCCA"), v57, v141, CFSTR("Interference CCA"), CFSTR("Interface Interference CCA"));
    }
    sub_100024D98(v150, v151, CFSTR("NWAPS_qbssCCA"), v57, v141, CFSTR("QBSS Values"), CFSTR("Channel Utilization"));
    sub_100024D98(v150, v151, CFSTR("NWAPS_qbssSTACount"), v57, v141, CFSTR("QBSS Values"), CFSTR("Station Count"));
  }
  else
  {
LABEL_51:

LABEL_52:
    v64 = WALogCategoryDefaultHandle();
    v65 = objc_claimAutoreleasedReturnValue(v64);
    if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
    {
      v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v150, "objectForKeyedSubscript:", v57));
      v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v66, "allKeys"));
      *(_DWORD *)buf = 136446722;
      v180 = "void populateNWActivityPeerStats(WAMessageAWD * _Nullable __strong, WAMessageAWD * _Nullable __strong, __we"
             "ak id<WAIOReporterPopulatorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDiction"
             "ary * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnul"
             "l __strong, NSError * _Nullable __autoreleasing * _Nullable)";
      v181 = 1024;
      v182 = 699;
      v183 = 2112;
      v184 = v67;
      _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to find group, we have %@", buf, 0x1Cu);

    }
    v68 = WALogCategoryDefaultHandle();
    v69 = objc_claimAutoreleasedReturnValue(v68);
    if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v180 = "void populateNWActivityPeerStats(WAMessageAWD * _Nullable __strong, WAMessageAWD * _Nullable __strong, __we"
             "ak id<WAIOReporterPopulatorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDiction"
             "ary * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnul"
             "l __strong, NSError * _Nullable __autoreleasing * _Nullable)";
      v181 = 1024;
      v182 = 822;
      _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed ", buf, 0x12u);
    }

    v70 = 0;
  }

  objc_destroyWeak(&location);
}

void sub_1000129F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,id a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,id location)
{
  objc_destroyWeak(&location);
  objc_destroyWeak(&a40);
  _Unwind_Resume(a1);
}

void sub_100012A68(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, void *a7, void *a8, void *a9)
{
  id v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  int v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  void *v52;
  void *v53;
  id v54;
  void *v55;
  void *v56;
  void *v57;
  _BOOL4 v58;
  void *v59;
  void *v60;
  void *v61;
  _BOOL4 v62;
  id v63;
  id v64;
  id v65;
  id v66;
  void *v67;
  void *v68;
  id v69;
  void *v70;
  void *v71;
  void *v72;
  _BOOL4 v73;
  void *v74;
  void *v75;
  void *v76;
  _BOOL4 v77;
  id v78;
  NSObject *v79;
  id v80;
  NSObject *v81;
  void *v82;
  void *v83;
  id v84;
  NSObject *v85;
  void *v86;
  void *v87;
  id v88;
  void *v89;
  void *v90;
  id v91;
  NSObject *v92;
  id v93;
  void *v94;
  void *v95;
  id v96;
  NSObject *v97;
  void *v98;
  void *v99;
  id v100;
  id v101;
  void (**v102)(id, id, id);
  id v103;
  id location;
  NSErrorUserInfoKey v105;
  _BYTE buf[12];
  __int16 v107;
  int v108;
  __int16 v109;
  void *v110;

  v14 = a2;
  v15 = a3;
  v16 = a4;
  objc_initWeak(&location, a5);
  v17 = a7;
  v103 = a8;
  v102 = a9;
  v100 = objc_loadWeakRetained(&location);
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Interface %@ Peer 00:00:00:00:00:00"), v103));
  v19 = v14;
  v20 = v18;
  v21 = v17;
  v22 = v15;
  v23 = v16;
  v24 = sub_100024B98(v23);
  v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "objectForKeyedSubscript:", v25));
  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "objectForKeyedSubscript:", v20));
  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "objectForKeyedSubscript:", CFSTR("TxCompletion Snapshot BE")));

  if (v28)
  {
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "fieldForKey:", CFSTR("DPSS_txCompletionSnapshotBE")));
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "subMessageValue"));

    sub_100024D98(v23, v30, CFSTR("DPSPACTCS_success"), v25, v20, CFSTR("TxCompletion Snapshot BE"), CFSTR("Success"));
    sub_100024D98(v23, v30, CFSTR("DPSPACTCS_dropped"), v25, v20, CFSTR("TxCompletion Snapshot BE"), CFSTR("Miscellaneous Drops"));
    sub_100024D98(v23, v30, CFSTR("DPSPACTCS_noBuf"), v25, v20, CFSTR("TxCompletion Snapshot BE"), CFSTR("NoBuff"));
    sub_100024D98(v23, v30, CFSTR("DPSPACTCS_noResources"), v25, v20, CFSTR("TxCompletion Snapshot BE"), CFSTR("NoResources"));
    sub_100024D98(v23, v30, CFSTR("DPSPACTCS_noAck"), v25, v20, CFSTR("TxCompletion Snapshot BE"), CFSTR("NoAck"));
    sub_100024D98(v23, v30, CFSTR("DPSPACTCS_chipModeError"), v25, v20, CFSTR("TxCompletion Snapshot BE"), CFSTR("ChipModeError"));
    sub_100024D98(v23, v30, CFSTR("DPSPACTCS_expired"), v25, v20, CFSTR("TxCompletion Snapshot BE"), CFSTR("Expired"));
    sub_100024D98(v23, v30, CFSTR("DPSPACTCS_txFailure"), v25, v20, CFSTR("TxCompletion Snapshot BE"), CFSTR("TxFailure"));
    sub_100024D98(v23, v30, CFSTR("DPSPACTCS_firmwareFreePacket"), v25, v20, CFSTR("TxCompletion Snapshot BE"), CFSTR("FirmwareFreePacket"));
    sub_100024D98(v23, v30, CFSTR("DPSPACTCS_maxRetries"), v25, v20, CFSTR("TxCompletion Snapshot BE"), CFSTR("MaxRetries"));
    sub_100024D98(v23, v30, CFSTR("DPSPACTCS_forceLifetimeExp"), v25, v20, CFSTR("TxCompletion Snapshot BE"), CFSTR("ForceLifetimeExpired"));

    v31 = 1;
  }
  else
  {
    v31 = 0;
  }
  v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "objectForKeyedSubscript:", v25));
  v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "objectForKeyedSubscript:", v20));
  v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "objectForKeyedSubscript:", CFSTR("TxCompletion Snapshot BK")));

  if (v34)
  {
    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "fieldForKey:", CFSTR("DPSS_txCompletionSnapshotBK")));
    v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "subMessageValue"));

    sub_100024D98(v23, v36, CFSTR("DPSPACTCS_success"), v25, v20, CFSTR("TxCompletion Snapshot BK"), CFSTR("Success"));
    sub_100024D98(v23, v36, CFSTR("DPSPACTCS_dropped"), v25, v20, CFSTR("TxCompletion Snapshot BK"), CFSTR("Miscellaneous Drops"));
    sub_100024D98(v23, v36, CFSTR("DPSPACTCS_noBuf"), v25, v20, CFSTR("TxCompletion Snapshot BK"), CFSTR("NoBuff"));
    sub_100024D98(v23, v36, CFSTR("DPSPACTCS_noResources"), v25, v20, CFSTR("TxCompletion Snapshot BK"), CFSTR("NoResources"));
    sub_100024D98(v23, v36, CFSTR("DPSPACTCS_noAck"), v25, v20, CFSTR("TxCompletion Snapshot BK"), CFSTR("NoAck"));
    sub_100024D98(v23, v36, CFSTR("DPSPACTCS_chipModeError"), v25, v20, CFSTR("TxCompletion Snapshot BK"), CFSTR("ChipModeError"));
    sub_100024D98(v23, v36, CFSTR("DPSPACTCS_expired"), v25, v20, CFSTR("TxCompletion Snapshot BK"), CFSTR("Expired"));
    sub_100024D98(v23, v36, CFSTR("DPSPACTCS_txFailure"), v25, v20, CFSTR("TxCompletion Snapshot BK"), CFSTR("TxFailure"));
    sub_100024D98(v23, v36, CFSTR("DPSPACTCS_firmwareFreePacket"), v25, v20, CFSTR("TxCompletion Snapshot BK"), CFSTR("FirmwareFreePacket"));
    sub_100024D98(v23, v36, CFSTR("DPSPACTCS_maxRetries"), v25, v20, CFSTR("TxCompletion Snapshot BK"), CFSTR("MaxRetries"));
    sub_100024D98(v23, v36, CFSTR("DPSPACTCS_forceLifetimeExp"), v25, v20, CFSTR("TxCompletion Snapshot BK"), CFSTR("ForceLifetimeExpired"));

    v31 = 1;
  }
  v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "objectForKeyedSubscript:", v25));
  v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "objectForKeyedSubscript:", v20));
  v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "objectForKeyedSubscript:", CFSTR("TxCompletion Snapshot VO")));

  if (v39)
  {
    v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "fieldForKey:", CFSTR("DPSS_txCompletionSnapshotVO")));
    v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "subMessageValue"));

    sub_100024D98(v23, v41, CFSTR("DPSPACTCS_success"), v25, v20, CFSTR("TxCompletion Snapshot VO"), CFSTR("Success"));
    sub_100024D98(v23, v41, CFSTR("DPSPACTCS_dropped"), v25, v20, CFSTR("TxCompletion Snapshot VO"), CFSTR("Miscellaneous Drops"));
    sub_100024D98(v23, v41, CFSTR("DPSPACTCS_noBuf"), v25, v20, CFSTR("TxCompletion Snapshot VO"), CFSTR("NoBuff"));
    sub_100024D98(v23, v41, CFSTR("DPSPACTCS_noResources"), v25, v20, CFSTR("TxCompletion Snapshot VO"), CFSTR("NoResources"));
    sub_100024D98(v23, v41, CFSTR("DPSPACTCS_noAck"), v25, v20, CFSTR("TxCompletion Snapshot VO"), CFSTR("NoAck"));
    sub_100024D98(v23, v41, CFSTR("DPSPACTCS_chipModeError"), v25, v20, CFSTR("TxCompletion Snapshot VO"), CFSTR("ChipModeError"));
    sub_100024D98(v23, v41, CFSTR("DPSPACTCS_expired"), v25, v20, CFSTR("TxCompletion Snapshot VO"), CFSTR("Expired"));
    sub_100024D98(v23, v41, CFSTR("DPSPACTCS_txFailure"), v25, v20, CFSTR("TxCompletion Snapshot VO"), CFSTR("TxFailure"));
    sub_100024D98(v23, v41, CFSTR("DPSPACTCS_firmwareFreePacket"), v25, v20, CFSTR("TxCompletion Snapshot VO"), CFSTR("FirmwareFreePacket"));
    sub_100024D98(v23, v41, CFSTR("DPSPACTCS_maxRetries"), v25, v20, CFSTR("TxCompletion Snapshot VO"), CFSTR("MaxRetries"));
    sub_100024D98(v23, v41, CFSTR("DPSPACTCS_forceLifetimeExp"), v25, v20, CFSTR("TxCompletion Snapshot VO"), CFSTR("ForceLifetimeExpired"));

    v31 = 1;
  }
  v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "objectForKeyedSubscript:", v25));
  v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "objectForKeyedSubscript:", v20));
  v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "objectForKeyedSubscript:", CFSTR("TxCompletion Snapshot VI")));

  if (v44)
  {
    v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "fieldForKey:", CFSTR("DPSS_txCompletionSnapshotVI")));
    v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "subMessageValue"));

    sub_100024D98(v23, v46, CFSTR("DPSPACTCS_success"), v25, v20, CFSTR("TxCompletion Snapshot VI"), CFSTR("Success"));
    sub_100024D98(v23, v46, CFSTR("DPSPACTCS_dropped"), v25, v20, CFSTR("TxCompletion Snapshot VI"), CFSTR("Miscellaneous Drops"));
    sub_100024D98(v23, v46, CFSTR("DPSPACTCS_noBuf"), v25, v20, CFSTR("TxCompletion Snapshot VI"), CFSTR("NoBuff"));
    sub_100024D98(v23, v46, CFSTR("DPSPACTCS_noResources"), v25, v20, CFSTR("TxCompletion Snapshot VI"), CFSTR("NoResources"));
    sub_100024D98(v23, v46, CFSTR("DPSPACTCS_noAck"), v25, v20, CFSTR("TxCompletion Snapshot VI"), CFSTR("NoAck"));
    sub_100024D98(v23, v46, CFSTR("DPSPACTCS_chipModeError"), v25, v20, CFSTR("TxCompletion Snapshot VI"), CFSTR("ChipModeError"));
    sub_100024D98(v23, v46, CFSTR("DPSPACTCS_expired"), v25, v20, CFSTR("TxCompletion Snapshot VI"), CFSTR("Expired"));
    sub_100024D98(v23, v46, CFSTR("DPSPACTCS_txFailure"), v25, v20, CFSTR("TxCompletion Snapshot VI"), CFSTR("TxFailure"));
    sub_100024D98(v23, v46, CFSTR("DPSPACTCS_firmwareFreePacket"), v25, v20, CFSTR("TxCompletion Snapshot VI"), CFSTR("FirmwareFreePacket"));
    sub_100024D98(v23, v46, CFSTR("DPSPACTCS_maxRetries"), v25, v20, CFSTR("TxCompletion Snapshot VI"), CFSTR("MaxRetries"));
    sub_100024D98(v23, v46, CFSTR("DPSPACTCS_forceLifetimeExp"), v25, v20, CFSTR("TxCompletion Snapshot VI"), CFSTR("ForceLifetimeExpired"));
    v47 = 0;
LABEL_10:

    goto LABEL_13;
  }
  if (!v31)
  {
    v78 = WALogCategoryDefaultHandle();
    v79 = objc_claimAutoreleasedReturnValue(v78);
    if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "void populateDPSPerACTxCompletionSnapshot(WAMessageAWD * _Nullable __strong, __weak id<WAIORe"
                           "porterPopulatorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSStrin"
                           "g * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSDictionary * _Nonnull __strong, NS"
                           "Error * _Nullable __autoreleasing * _Nullable)";
      v107 = 1024;
      v108 = 2559;
      _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_ERROR, "%{public}s::%d:Mandatory IOReporter TxCompletion Snapshot XX not found", buf, 0x12u);
    }

    v105 = NSLocalizedFailureReasonErrorKey;
    *(_QWORD *)buf = CFSTR("WAErrorCodeTxCompletionSnapshotMissing");
    v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, &v105, 1));
    v47 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.wifi.analytics.errordomain"), 9033, v46));
    goto LABEL_10;
  }
  v47 = 0;
LABEL_13:

  v101 = v47;
  v48 = v19;
  v49 = v21;
  v50 = v22;
  v51 = v23;
  v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "fieldForKey:", CFSTR("DPSS_btSnapshot")));
  v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v52, "subMessageValue"));

  v54 = sub_100024B98(v51);
  v55 = (void *)objc_claimAutoreleasedReturnValue(v54);
  v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "objectForKeyedSubscript:", v55));
  v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v56, "objectForKeyedSubscript:", CFSTR("BT Coex")));
  v58 = v57 == 0;

  if (v58)
  {
    v80 = WALogCategoryDefaultHandle();
    v81 = objc_claimAutoreleasedReturnValue(v80);
    if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
    {
      v82 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "objectForKeyedSubscript:", v55));
      v83 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v82, "allKeys"));
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "void populateDPSBTCoexSnapshot(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopul"
                           "atorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _No"
                           "nnull __strong, NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
      v107 = 1024;
      v108 = 2579;
      v109 = 2112;
      v110 = v83;
      _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to find group, we have %@", buf, 0x1Cu);

    }
  }
  else
  {
    v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "objectForKeyedSubscript:", v55));
    v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "objectForKeyedSubscript:", CFSTR("BT Coex")));
    v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "objectForKeyedSubscript:", CFSTR("Coex Snapshot")));
    v62 = v61 == 0;

    if (!v62)
    {
      sub_100024D98(v51, v53, CFSTR("DPSBTS_duration"), v55, CFSTR("BT Coex"), CFSTR("Coex Snapshot"), CFSTR("BTDuration(s)"));
      sub_100024D98(v51, v53, CFSTR("DPSBTS_use"), v55, CFSTR("BT Coex"), CFSTR("Coex Snapshot"), CFSTR("BTUse(%)"));
      sub_100028720(v51, v53, CFSTR("DPSBTS_ts"), v55, CFSTR("BT Coex"), CFSTR("Coex Snapshot"), CFSTR("TS(ms)"));
      goto LABEL_16;
    }
    v88 = WALogCategoryDefaultHandle();
    v81 = objc_claimAutoreleasedReturnValue(v88);
    if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
    {
      v89 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "objectForKeyedSubscript:", v55));
      v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "objectForKeyedSubscript:", CFSTR("BT Coex")));
      v98 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v90, "allKeys"));
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "void populateDPSBTCoexSnapshot(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopul"
                           "atorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _No"
                           "nnull __strong, NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
      v107 = 1024;
      v108 = 2581;
      v109 = 2112;
      v110 = v98;
      _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to find subgroup, we have %@", buf, 0x1Cu);

    }
  }

  v91 = WALogCategoryDefaultHandle();
  v92 = objc_claimAutoreleasedReturnValue(v91);
  if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "void populateDPSBTCoexSnapshot(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulat"
                         "orMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnul"
                         "l __strong, NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
    v107 = 1024;
    v108 = 2590;
    _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed ", buf, 0x12u);
  }

LABEL_16:
  v63 = v48;
  v64 = v49;
  v65 = v50;
  v66 = v51;
  v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "fieldForKey:", CFSTR("DPSS_awdlSnapshot")));
  v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v67, "subMessageValue"));

  v69 = sub_100024B98(v66);
  v70 = (void *)objc_claimAutoreleasedReturnValue(v69);
  v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v66, "objectForKeyedSubscript:", v70));
  v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v71, "objectForKeyedSubscript:", CFSTR("AWDL Metrics")));
  v73 = v72 == 0;

  if (v73)
  {
    v84 = WALogCategoryDefaultHandle();
    v85 = objc_claimAutoreleasedReturnValue(v84);
    if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
    {
      v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v66, "objectForKeyedSubscript:", v70));
      v87 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "allKeys"));
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "void populateDPSAWDLSnapshot(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulat"
                           "orMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonn"
                           "ull __strong, NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
      v107 = 1024;
      v108 = 2604;
      v109 = 2112;
      v110 = v87;
      _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to find group, we have %@", buf, 0x1Cu);

    }
  }
  else
  {
    v74 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v66, "objectForKeyedSubscript:", v70));
    v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v74, "objectForKeyedSubscript:", CFSTR("AWDL Metrics")));
    v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v75, "objectForKeyedSubscript:", CFSTR("AWDL Snapshot")));
    v77 = v76 == 0;

    if (!v77)
    {
      sub_100024D98(v66, v68, CFSTR("DPSAWDLS_duration"), v70, CFSTR("AWDL Metrics"), CFSTR("AWDL Snapshot"), CFSTR("AWDLDuration(s)"));
      sub_100024D98(v66, v68, CFSTR("DPSAWDLS_use"), v70, CFSTR("AWDL Metrics"), CFSTR("AWDL Snapshot"), CFSTR("AWDLUse(%)"));
      sub_100024D98(v66, v68, CFSTR("DPSAWDLS_sdb"), v70, CFSTR("AWDL Metrics"), CFSTR("AWDL Snapshot"), CFSTR("SDB"));
      sub_100028720(v66, v68, CFSTR("DPSAWDLS_ts"), v70, CFSTR("AWDL Metrics"), CFSTR("AWDL Snapshot"), CFSTR("TS(ms)"));
      goto LABEL_19;
    }
    v93 = WALogCategoryDefaultHandle();
    v85 = objc_claimAutoreleasedReturnValue(v93);
    if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
    {
      v94 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v66, "objectForKeyedSubscript:", v70));
      v95 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v94, "objectForKeyedSubscript:", CFSTR("AWDL Metrics")));
      v99 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v95, "allKeys"));
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "void populateDPSAWDLSnapshot(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulat"
                           "orMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonn"
                           "ull __strong, NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
      v107 = 1024;
      v108 = 2606;
      v109 = 2112;
      v110 = v99;
      _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to find subgroup, we have %@", buf, 0x1Cu);

    }
  }

  v96 = WALogCategoryDefaultHandle();
  v97 = objc_claimAutoreleasedReturnValue(v96);
  if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "void populateDPSAWDLSnapshot(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulator"
                         "MessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull "
                         "__strong, NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
    v107 = 1024;
    v108 = 2616;
    _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed ", buf, 0x12u);
  }

LABEL_19:
  v102[2](v102, v63, v101);

  objc_destroyWeak(&location);
}

void sub_100013D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100013D30(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, void *a7, void *a8, void *a9)
{
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void (**v19)(id, id, id);
  id v20;
  id v21;
  id v22;
  id location;

  v14 = a2;
  v15 = a3;
  v16 = a4;
  objc_initWeak(&location, a5);
  v17 = a7;
  v18 = a8;
  v19 = a9;
  v20 = objc_loadWeakRetained(&location);
  v22 = 0;
  sub_10000F208(v14, v17, v15, v16, &v22);
  v21 = v22;

  v19[2](v19, v14, v21);
  objc_destroyWeak(&location);

}

void sub_100013E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100013E40(id a1)
{
  void *v1;

  v1 = (void *)qword_1000ECF68;
  qword_1000ECF68 = (uint64_t)&off_1000E0398;

}

void sub_100013E58(id a1)
{
  void *v1;

  v1 = (void *)qword_1000ECF78;
  qword_1000ECF78 = (uint64_t)&off_1000E03B0;

}

void sub_100013E70(id a1)
{
  void *v1;

  v1 = (void *)qword_1000ECF70;
  qword_1000ECF70 = (uint64_t)&off_1000E03C8;

}

void sub_100013E88(id a1)
{
  void *v1;

  v1 = (void *)qword_1000ECF58;
  qword_1000ECF58 = (uint64_t)&off_1000DFF58;

}

void sub_100014768(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_10001477C(uint64_t a1)
{
  id WeakRetained;
  id v3;
  NSObject *v4;
  NSObject *v5;
  os_signpost_id_t v6;
  uint8_t v7[16];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_freeIORCaches");
  v3 = WALogCategoryDefaultHandle();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  v5 = v4;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v4))
  {
    *(_WORD *)v7 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_INTERVAL_END, v6, "IOR freeIORCaches", "", v7, 2u);
  }

}

void sub_100014EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  objc_destroyWeak((id *)(v8 - 40));
  _Unwind_Resume(a1);
}

void sub_100014F0C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_msgSend(WeakRetained, "_runIOLegendTest");

}

void sub_1000155BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1000155DC((id *)va);
  _Unwind_Resume(a1);
}

void sub_1000155DC(id *a1)
{

}

void sub_100018778(_Unwind_Exception *a1)
{
  sub_1000155DC((id *)&STACK[0x3E0]);
  _Unwind_Resume(a1);
}

void sub_1000188FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_100018910(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;
  NSObject *v5;
  NSObject *v6;
  os_signpost_id_t v7;
  uint8_t v8[16];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 32) + 11))
    objc_msgSend(WeakRetained, "_unpersistIORObjects");
  objc_msgSend(v3, "_signalPotentialNewIORChannels");
  v4 = WALogCategoryDefaultHandle();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 48);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
  {
    *(_WORD *)v8 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_INTERVAL_END, v7, "IOR signalPotentialNewIORChannels", "", v8, 2u);
  }

}

id sub_10001AA88(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;

  v2 = WALogCategoryDefaultHandle();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v9 = 136446466;
    v10 = "-[WAIOReporterMessagePopulator _delayedInvocationForRescan]_block_invoke";
    v11 = 1024;
    v12 = 1393;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:New Phy Type in use - rescanning", (uint8_t *)&v9, 0x12u);
  }

  +[WAUtil incrementValueForKey:inMutableDict:onQueue:](WAUtil, "incrementValueForKey:inMutableDict:onQueue:", CFSTR("Rescan Reason: New Phy Count"), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "removeObjectForKey:", CFSTR("Rescan Reason: New Phy Date"));
  v4 = *(void **)(*(_QWORD *)(a1 + 32) + 80);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
  objc_msgSend(v4, "setObject:forKey:", v5, CFSTR("Rescan Reason: New Phy Date"));

  v6 = WALogCategoryDefaultHandle();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v9 = 136446466;
    v10 = "-[WAIOReporterMessagePopulator _delayedInvocationForRescan]_block_invoke";
    v11 = 1024;
    v12 = 1398;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Running _buildOrRescanToBuildChannelAvailabilityCaches:kWAIORIOReporterSearchUnfoundAndMutablePredicates", (uint8_t *)&v9, 0x12u);
  }

  objc_msgSend(*(id *)(a1 + 32), "_buildOrRescanToBuildChannelAvailabilityCaches:", 1);
  return objc_msgSend(*(id *)(a1 + 32), "_iorPreparedForSampling:", 0);
}

void sub_10001ACD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_10001ACEC(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;
  NSObject *v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 32) + 11))
    objc_msgSend(WeakRetained, "_unpersistIORObjects");
  v4 = WALogCategoryDefaultHandle();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 136446466;
    v7 = "-[WAIOReporterMessagePopulator scanPredicatesNotYetFoundAndMutable]_block_invoke";
    v8 = 1024;
    v9 = 1432;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Running _scanPredicatesWithMode:kWAIORIOReporterSearchUnfoundAndMutablePredicates", (uint8_t *)&v6, 0x12u);
  }

  objc_msgSend(v3, "_scanPredicatesWithMode:", 1);
}

void sub_10001E034(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_10001E048(uint64_t a1)
{
  _QWORD *WeakRetained;
  _QWORD *v3;
  id v4;
  NSObject *v5;
  NSObject *v6;
  os_signpost_id_t v7;
  uint8_t v8[16];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 32) + 11))
    objc_msgSend(WeakRetained, "_unpersistIORObjects");
  +[WAUtil incrementValueForKey:inMutableDict:onQueue:](WAUtil, "incrementValueForKey:inMutableDict:onQueue:", CFSTR("External: Determine Channels Calls"), v3[10], v3[6]);
  objc_msgSend(v3, "_findChannelsAndBuildChannelCaches:", 1);
  v4 = WALogCategoryDefaultHandle();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 48);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
  {
    *(_WORD *)v8 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_INTERVAL_END, v7, "IOR determineChannelsPerIORPopulatable", "", v8, 2u);
  }

}

void sub_10001E424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10001E444(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;
  NSObject *v5;
  NSObject *v6;
  os_signpost_id_t v7;
  uint8_t v8[16];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  v3 = WeakRetained;
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 32) + 11))
    objc_msgSend(WeakRetained, "_unpersistIORObjects");
  objc_msgSend(v3, "_prepopulateMessage:forProcess:groupType:andReply:isResubscribe:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 56), 0);
  v4 = WALogCategoryDefaultHandle();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 80);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
  {
    *(_WORD *)v8 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_INTERVAL_END, v7, "IOR prepopulateMessage", "", v8, 2u);
  }

}

void sub_10001FCE0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  NSObject *v10;
  id v11;
  NSObject *v12;
  uint8_t v13[16];
  uint8_t v14[16];
  uint8_t buf[16];

  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 48);
  v8 = a3;
  v9 = a2;
  +[WAUtil incrementValueForKey:inMutableDict:onQueue:](WAUtil, "incrementValueForKey:inMutableDict:onQueue:", CFSTR("IOR Population via Dict"), v6, v7);
  v10 = WALogCategoryDefault;
  if (os_signpost_enabled((os_log_t)WALogCategoryDefault))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "IOR WAIORPopNWActivity Iterator", "", buf, 2u);
    v10 = WALogCategoryDefault;
  }
  if (os_signpost_enabled(v10))
  {
    *(_WORD *)v14 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "IOR WAIORPopNWActivity Reply", "", v14, 2u);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

  v11 = WALogCategoryDefaultHandle();
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_signpost_enabled(v12))
  {
    *(_WORD *)v13 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "IOR WAIORPopNWActivity Reply", "", v13, 2u);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_10001FE6C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 48);
  v8 = a3;
  v9 = a2;
  +[WAUtil incrementValueForKey:inMutableDict:onQueue:](WAUtil, "incrementValueForKey:inMutableDict:onQueue:", CFSTR("IOR Population via Dict"), v6, v7);
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_10001FEF8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 48);
  v8 = a3;
  v9 = a2;
  +[WAUtil incrementValueForKey:inMutableDict:onQueue:](WAUtil, "incrementValueForKey:inMutableDict:onQueue:", CFSTR("IOR Population via Dict"), v6, v7);
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_10001FF84(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  NSObject *v10;
  uint8_t v11[16];

  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 48);
  v8 = a3;
  v9 = a2;
  +[WAUtil incrementValueForKey:inMutableDict:onQueue:](WAUtil, "incrementValueForKey:inMutableDict:onQueue:", CFSTR("IOR Population via Dict"), v6, v7);
  v10 = WALogCategoryDefault;
  if (os_signpost_enabled((os_log_t)WALogCategoryDefault))
  {
    *(_WORD *)v11 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "IOR WAIORPopSlowWiFiDiagnosticsCounterSample Iterator", "", v11, 2u);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_100020070(id a1)
{
  id v1;
  NSObject *v2;
  id v3;
  NSObject *v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;

  v1 = WALogCategoryDefaultHandle();
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v5 = 136446466;
    v6 = "-[WAIOReporterMessagePopulator _prepopulateMessage:forProcess:groupType:andReply:isResubscribe:]_block_invoke";
    v7 = 1024;
    v8 = 2109;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%{public}s::%d:Population done", (uint8_t *)&v5, 0x12u);
  }

  v3 = WALogCategoryDefaultHandle();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_signpost_enabled(v4))
  {
    LOWORD(v5) = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "IOR PopulationGroup", "", (uint8_t *)&v5, 2u);
  }

}

void sub_100020954(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_100020968(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setFailNextCreateOrUpdateSample:", 1);

}

void sub_100020E5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_100020E70(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "unpersistIORObjects");

}

void sub_100021E38(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_100021E4C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_persistIORObjects:", *(unsigned __int8 *)(a1 + 40));

}

id sub_10002314C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id result;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2 = WALogCategoryDefaultHandle();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 136446466;
    v6 = "-[WAIOReporterMessagePopulator _delayedInvocationForPersist]_block_invoke";
    v7 = 1024;
    v8 = 2550;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Performing scheduled persist", (uint8_t *)&v5, 0x12u);
  }

  result = objc_msgSend(*(id *)(a1 + 32), "_persistIORObjects:", 0);
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 9) = 0;
  return result;
}

void sub_1000242D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  objc_destroyWeak((id *)(v8 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_1000242F0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100024300(uint64_t a1)
{

}

void sub_100024308(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_getCachedUsage"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_10002453C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100024554(uint64_t a1, uint64_t a2)
{
  uint64_t DriverName;
  void *v5;
  uint64_t Group;
  void *v7;
  uint64_t SubGroup;
  void *v9;
  uint64_t ChannelName;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  void *v19;
  id v20;
  NSObject *v21;
  id v22;
  NSObject *v23;
  id v24;
  NSObject *v25;
  int v27;
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  id v32;
  __int16 v33;
  void *v34;
  __int16 v35;
  void *v36;
  __int16 v37;
  void *v38;
  __int16 v39;
  uint64_t v40;

  DriverName = IOReportChannelGetDriverName(a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue(DriverName);
  Group = IOReportChannelGetGroup(a2);
  v7 = (void *)objc_claimAutoreleasedReturnValue(Group);
  SubGroup = IOReportChannelGetSubGroup(a2);
  v9 = (void *)objc_claimAutoreleasedReturnValue(SubGroup);
  ChannelName = IOReportChannelGetChannelName(a2);
  v11 = (void *)objc_claimAutoreleasedReturnValue(ChannelName);
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "objectForKeyedSubscript:", v5));
  if (!v12)
  {
    v13 = objc_alloc_init((Class)NSMutableDictionary);
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "setValue:forKey:", v13, v5);
    goto LABEL_14;
  }
  v13 = v12;
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", v7));
  if (!v14)
  {
LABEL_14:
    v15 = objc_alloc_init((Class)NSMutableDictionary);
    objc_msgSend(v13, "setValue:forKey:", v15, v7);
    goto LABEL_15;
  }
  v15 = v14;
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKeyedSubscript:", v9));
  if (!v16)
  {
LABEL_15:
    v17 = objc_alloc_init((Class)NSMutableDictionary);
    objc_msgSend(v15, "setValue:forKey:", v17, v9);
    goto LABEL_16;
  }
  v17 = v16;
  v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectForKeyedSubscript:", v11));
  if (!v18)
  {
LABEL_16:
    objc_msgSend(v17, "setValue:forKey:", a2, v11);
    goto LABEL_12;
  }
  v19 = (void *)v18;
  v20 = WALogCategoryDefaultHandle();
  v21 = objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    v27 = 136446722;
    v28 = "-[WAIOReporterMessagePopulator _createStructuredIOReportDictionary:]_block_invoke";
    v29 = 1024;
    v30 = 2807;
    v31 = 2112;
    v32 = v17;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%{public}s::%d:Existing subgroupDict %@", (uint8_t *)&v27, 0x1Cu);
  }

  v22 = WALogCategoryDefaultHandle();
  v23 = objc_claimAutoreleasedReturnValue(v22);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    v27 = 136446722;
    v28 = "-[WAIOReporterMessagePopulator _createStructuredIOReportDictionary:]_block_invoke";
    v29 = 1024;
    v30 = 2808;
    v31 = 2112;
    v32 = v19;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "%{public}s::%d:Existing channelDict %@", (uint8_t *)&v27, 0x1Cu);
  }

  v24 = WALogCategoryDefaultHandle();
  v25 = objc_claimAutoreleasedReturnValue(v24);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
  {
    v27 = 136447746;
    v28 = "-[WAIOReporterMessagePopulator _createStructuredIOReportDictionary:]_block_invoke";
    v29 = 1024;
    v30 = 2809;
    v31 = 2112;
    v32 = v5;
    v33 = 2112;
    v34 = v7;
    v35 = 2112;
    v36 = v9;
    v37 = 2112;
    v38 = v11;
    v39 = 2112;
    v40 = a2;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%{public}s::%d:how is there already a channel here? %@ %@ %@ %@ %@", (uint8_t *)&v27, 0x44u);
  }

LABEL_12:
  return 0;
}

id sub_100024B98(void *a1)
{
  id v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *j;
  void *v14;
  id v15;
  id v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  _BYTE v28[128];

  v1 = a1;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "allKeys"));
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v24;
    v18 = *(_QWORD *)v24;
    while (2)
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v24 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(v7, "containsString:", CFSTR("WLAN")))
        {
          v17 = v7;
LABEL_19:

          v14 = v7;
          goto LABEL_20;
        }
        v21 = 0u;
        v22 = 0u;
        v19 = 0u;
        v20 = 0u;
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "objectForKeyedSubscript:", v7));
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "allKeys"));

        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v19, v27, 16);
        if (v10)
        {
          v11 = v10;
          v12 = *(_QWORD *)v20;
          while (2)
          {
            for (j = 0; j != v11; j = (char *)j + 1)
            {
              if (*(_QWORD *)v20 != v12)
                objc_enumerationMutation(v9);
              if ((objc_msgSend(*(id *)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)j), "containsString:", CFSTR("WLAN")) & 1) != 0)
              {
                v15 = v7;

                goto LABEL_19;
              }
            }
            v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v19, v27, 16);
            if (v11)
              continue;
            break;
          }
        }

        v5 = v18;
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
      if (v4)
        continue;
      break;
    }
  }
  v14 = 0;
  v7 = v2;
LABEL_20:

  return v14;
}

void sub_100024D98(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  uint64_t IntegerValue;
  void *v23;
  id v24;
  NSObject *v25;
  int v26;
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  id v31;
  __int16 v32;
  id v33;
  __int16 v34;
  id v35;
  __int16 v36;
  id v37;

  v13 = a1;
  v14 = a2;
  v15 = a3;
  v16 = a4;
  v17 = a5;
  v18 = a6;
  v19 = a7;
  v20 = objc_autoreleasePoolPush();
  v21 = sub_100025990(v13, v16, v17, v18, v19);
  if (v21)
  {
    IntegerValue = IOReportSimpleGetIntegerValue(v21, 0);
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "fieldForKey:", v15));
    objc_msgSend(v23, "setUint32Value:", IntegerValue);

  }
  else
  {
    v24 = WALogCategoryDefaultHandle();
    v25 = objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      v26 = 136447490;
      v27 = "_Bool fillUInt32FieldFromSimple(NSDictionary * _Nonnull __strong, WAMessageAWD * _Nullable __strong, NSStrin"
            "g * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __str"
            "ong, NSString * _Nonnull __strong)";
      v28 = 1024;
      v29 = 242;
      v30 = 2112;
      v31 = v16;
      v32 = 2112;
      v33 = v17;
      v34 = 2112;
      v35 = v18;
      v36 = 2112;
      v37 = v19;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to find %@ %@ %@ %@", (uint8_t *)&v26, 0x3Au);
    }

  }
  objc_autoreleasePoolPop(v20);

}

uint64_t sub_100024F58(void *a1, void *a2, void *a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10)
{
  void *v16;
  char v17;
  uint64_t NameForIndex;
  void *v19;
  uint64_t Residency;
  uint64_t Unit;
  double v22;
  id v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  void *i;
  void *v30;
  void *v31;
  void *v32;
  unsigned __int8 v33;
  id v34;
  void *v35;
  id v36;
  void *v37;
  void *v38;
  id v39;
  NSObject *v40;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v48;
  id v49;
  id v50;
  id val;
  void *context;
  id v53;
  id v54;
  id v55;
  void *v56;
  unsigned int v57;
  id location;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  id v63;
  uint8_t buf[4];
  const char *v65;
  __int16 v66;
  int v67;
  __int16 v68;
  id v69;
  __int16 v70;
  id v71;
  __int16 v72;
  id v73;
  __int16 v74;
  id v75;

  v42 = a1;
  v50 = a2;
  objc_initWeak(&location, a3);
  v49 = a5;
  v48 = a6;
  v43 = a7;
  v44 = a8;
  v45 = a9;
  v46 = a10;
  val = objc_loadWeakRetained(&location);
  v16 = sub_100025990(v42, v43, v44, v45, v46);
  if (v16)
  {
    v56 = v16;
    v57 = 0;
    v17 = 0;
    while ((int)v57 < (int)IOReportStateGetCount(v56))
    {
      context = objc_autoreleasePoolPush();
      NameForIndex = IOReportStateGetNameForIndex(v56, v57);
      v19 = (void *)objc_claimAutoreleasedReturnValue(NameForIndex);
      Residency = IOReportStateGetResidency(v56, v57);
      Unit = IOReportChannelGetUnit(v56);
      v22 = IOReportScaleValue(Residency, Unit, 0x100007C00000000);
      v55 = v50;
      objc_initWeak(&v63, val);
      v53 = v49;
      v23 = v19;
      v24 = v48;
      v59 = 0u;
      v60 = 0u;
      v61 = 0u;
      v62 = 0u;
      v54 = v24;
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "fieldForKey:"));
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "repeatableValues"));

      v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v59, buf, 16);
      if (v27)
      {
        v28 = *(_QWORD *)v60;
        while (2)
        {
          for (i = 0; i != v27; i = (char *)i + 1)
          {
            if (*(_QWORD *)v60 != v28)
              objc_enumerationMutation(v26);
            v30 = *(void **)(*((_QWORD *)&v59 + 1) + 8 * (_QWORD)i);
            v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "fieldForKey:", CFSTR("NWASB_state")));
            v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "stringValue"));
            v33 = objc_msgSend(v32, "isEqualToString:", v23);

            if ((v33 & 1) != 0)
            {
              v36 = v30;
              goto LABEL_14;
            }
          }
          v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v59, buf, 16);
          if (v27)
            continue;
          break;
        }
      }

      v34 = objc_loadWeakRetained(&v63);
      v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "getNewMessageForKey:groupType:forProcessWithToken:", CFSTR("NWASB"), a4, v53));
      v36 = objc_msgSend(v35, "copy");

      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "fieldForKey:", v54));
      objc_msgSend(v26, "addRepeatableSubMessageValue:", v36);
LABEL_14:

      v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "fieldForKey:", CFSTR("NWASB_residentTime")));
      objc_msgSend(v37, "setUint64Value:", (unint64_t)v22);

      v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "fieldForKey:", CFSTR("NWASB_state")));
      objc_msgSend(v38, "setStringValue:", v23);

      objc_destroyWeak(&v63);
      objc_autoreleasePoolPop(context);
      ++v57;
      v17 = 1;
    }
  }
  else
  {
    v39 = WALogCategoryDefaultHandle();
    v40 = objc_claimAutoreleasedReturnValue(v39);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136447490;
      v65 = "_Bool fillStatesFromState(NSDictionary * _Nonnull __strong, WAMessageAWD * _Nullable __strong, __weak id<WAI"
            "OReporterPopulatorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSString * _Nonnull"
            " __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSStrin"
            "g * _Nonnull __strong)";
      v66 = 1024;
      v67 = 372;
      v68 = 2112;
      v69 = v43;
      v70 = 2112;
      v71 = v44;
      v72 = 2112;
      v73 = v45;
      v74 = 2112;
      v75 = v46;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to find %@ %@ %@ %@", buf, 0x3Au);
    }

    v17 = 0;
  }

  objc_destroyWeak(&location);
  return v17 & 1;
}

void sub_1000253C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id location,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,id a36)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100025404(void *a1, void *a2, void *a3, uint64_t a4, void *a5, unsigned int a6, void *a7, void *a8, void *a9, void *a10, void *a11)
{
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  uint64_t IntegerValue;
  id v24;
  id v25;
  unsigned int v26;
  NSObject *v27;
  id v28;
  NSObject *v29;
  id v30;
  const char *v31;
  NSObject *v32;
  uint32_t v33;
  id v34;
  void *context;
  id v37;
  id v38;
  id v39;
  id location;
  uint8_t buf[4];
  const char *v42;
  __int16 v43;
  int v44;
  __int16 v45;
  id v46;
  __int16 v47;
  id v48;
  __int16 v49;
  id v50;
  __int16 v51;
  id v52;
  __int16 v53;
  id v54;

  v39 = a1;
  v37 = a2;
  objc_initWeak(&location, a3);
  v38 = a5;
  v17 = a7;
  v18 = a8;
  v19 = a9;
  v20 = a10;
  v21 = a11;
  context = objc_autoreleasePoolPush();
  v22 = sub_100025990(v39, v18, v19, v20, v21);
  if (!v22)
  {
    v34 = WALogCategoryDefaultHandle();
    v27 = objc_claimAutoreleasedReturnValue(v34);
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      goto LABEL_9;
    *(_DWORD *)buf = 136447490;
    v42 = "_Bool fillNWTrafficStatsFromSimple(NSDictionary * _Nonnull __strong, WAMessageAWD * _Nullable __strong, __weak"
          " id<WAIOReporterPopulatorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, WiFiAnalyticsA"
          "WDWiFiNWActivityTcategory, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __s"
          "trong, NSString * _Nonnull __strong, NSString * _Nonnull __strong)";
    v43 = 1024;
    v44 = 283;
    v45 = 2112;
    v46 = v18;
    v47 = 2112;
    v48 = v19;
    v49 = 2112;
    v50 = v20;
    v51 = 2112;
    v52 = v21;
    v31 = "%{public}s::%d:Failed to find %@ %@ %@ %@";
    v32 = v27;
    v33 = 58;
    goto LABEL_8;
  }
  IntegerValue = IOReportSimpleGetIntegerValue(v22, 0);
  v24 = v17;
  v25 = v21;
  v26 = objc_msgSend(v24, "characterAtIndex:", (char *)objc_msgSend(v24, "length") - 1);
  if (v26 == objc_msgSend(v25, "characterAtIndex:", (char *)objc_msgSend(v25, "length") - 1))
  {

    v27 = objc_loadWeakRetained(&location);
    sub_10002651C(v37, v27, a4, v38, IntegerValue, a6, v24);
    goto LABEL_9;
  }
  v28 = WALogCategoryDefaultHandle();
  v29 = objc_claimAutoreleasedReturnValue(v28);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446978;
    v42 = "_Bool sanityCheckBetweenFieldAndChannelName(NSString * _Nonnull __strong, NSString * _Nonnull __strong)";
    v43 = 1024;
    v44 = 109;
    v45 = 2112;
    v46 = v24;
    v47 = 2112;
    v48 = v25;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "%{public}s::%d:Potential field / channel mismatch for %@ and %@", buf, 0x26u);
  }

  v30 = WALogCategoryDefaultHandle();
  v27 = objc_claimAutoreleasedReturnValue(v30);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136447746;
    v42 = "_Bool fillNWTrafficStatsFromSimple(NSDictionary * _Nonnull __strong, WAMessageAWD * _Nullable __strong, __weak"
          " id<WAIOReporterPopulatorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, WiFiAnalyticsA"
          "WDWiFiNWActivityTcategory, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __s"
          "trong, NSString * _Nonnull __strong, NSString * _Nonnull __strong)";
    v43 = 1024;
    v44 = 287;
    v45 = 2112;
    v46 = v24;
    v47 = 2112;
    v48 = v18;
    v49 = 2112;
    v50 = v19;
    v51 = 2112;
    v52 = v20;
    v53 = 2112;
    v54 = v25;
    v31 = "%{public}s::%d:Sanity Failed field-channel mismatch %@ %@ %@ %@ %@";
    v32 = v27;
    v33 = 68;
LABEL_8:
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, v31, buf, v33);
  }
LABEL_9:

  objc_autoreleasePoolPop(context);
  objc_destroyWeak(&location);

}

void sub_100025764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100025784(void *a1, void *a2, void *a3, uint64_t a4, void *a5, uint64_t a6, void *a7, void *a8, void *a9, void *a10, void *a11)
{
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  uint64_t IntegerValue;
  NSObject *v26;
  id v27;
  id v28;
  id v29;
  id location;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  int v34;
  __int16 v35;
  id v36;
  __int16 v37;
  id v38;
  __int16 v39;
  id v40;
  __int16 v41;
  id v42;

  v29 = a1;
  v28 = a2;
  objc_initWeak(&location, a3);
  v18 = a5;
  v19 = a7;
  v20 = a8;
  v21 = a9;
  v22 = a10;
  v23 = a11;
  v24 = sub_100025990(v29, v20, v21, v22, v23);
  if (v24)
  {
    IntegerValue = IOReportSimpleGetIntegerValue(v24, 0);
    v26 = objc_loadWeakRetained(&location);
    sub_10002651C(v28, v26, a4, v18, IntegerValue, a6, v19);
  }
  else
  {
    v27 = WALogCategoryDefaultHandle();
    v26 = objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136447490;
      v32 = "_Bool fillNWTrafficStatsFromSimpleNoCheck(NSDictionary * _Nonnull __strong, WAMessageAWD * _Nullable __stron"
            "g, __weak id<WAIOReporterPopulatorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, WiF"
            "iAnalyticsAWDWiFiNWActivityTcategory, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString *"
            " _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong)";
      v33 = 1024;
      v34 = 305;
      v35 = 2112;
      v36 = v20;
      v37 = 2112;
      v38 = v21;
      v39 = 2112;
      v40 = v22;
      v41 = 2112;
      v42 = v23;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to find %@ %@ %@ %@", buf, 0x3Au);
    }
  }

  objc_destroyWeak(&location);
}

void sub_100025974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void *sub_100025990(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  NSObject *v29;
  void *v30;
  id v31;
  NSObject *v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  void *k;
  void *v41;
  NSObject *v42;
  id v43;
  NSObject *v44;
  void *v45;
  void *v46;
  void *v47;
  id v48;
  NSObject *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  id v55;
  id v56;
  id v57;
  id v58;
  uint64_t v59;
  void *j;
  void *v61;
  NSObject *v62;
  id v63;
  NSObject *v64;
  void *v65;
  void *v66;
  void *v67;
  id v68;
  NSObject *v69;
  id v70;
  NSObject *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  id v79;
  id v80;
  id v81;
  id v82;
  uint64_t v83;
  void *i;
  void *v85;
  NSObject *v86;
  id v87;
  NSObject *v88;
  void *v89;
  void *v90;
  void *v91;
  id v92;
  NSObject *v93;
  id v94;
  NSObject *v95;
  uint64_t v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  id v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  _BYTE v116[128];
  _BYTE v117[128];
  uint8_t v118[128];
  uint8_t buf[4];
  const char *v120;
  __int16 v121;
  int v122;
  __int16 v123;
  id v124;
  __int16 v125;
  void *v126;

  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  v13 = a5;
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v10));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKeyedSubscript:", v11));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectForKeyedSubscript:", v12));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectForKeyedSubscript:", v13));

  if (!v17)
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v10));

    if (v18)
    {
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v10));
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectForKeyedSubscript:", v11));

      v103 = v9;
      if (v20)
      {
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v10));
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "objectForKeyedSubscript:", v11));
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "objectForKeyedSubscript:", v12));

        if (v23)
        {
          v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v10));
          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "objectForKeyedSubscript:", v11));
          v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "objectForKeyedSubscript:", v12));
          v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "objectForKeyedSubscript:", v13));

          if (v27)
          {
            v17 = 0;
            goto LABEL_66;
          }
          v70 = WALogCategoryDefaultHandle();
          v71 = objc_claimAutoreleasedReturnValue(v70);
          if (os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
          {
            v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v10));
            v73 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v72, "objectForKeyedSubscript:", v11));
            v74 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v73, "objectForKeyedSubscript:", v12));
            v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v74, "allKeys"));
            *(_DWORD *)buf = 136446978;
            v120 = "IOReportChannelRef  _Nullable getChRefFrom(NSDictionary * _Nonnull __strong, NSString * _Nonnull __st"
                   "rong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong)";
            v121 = 1024;
            v122 = 81;
            v123 = 2112;
            v124 = v13;
            v125 = 2112;
            v126 = v75;
            _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEBUG, "%{public}s::%d:Looking for channel %@, choices are %@", buf, 0x26u);

          }
          v106 = 0u;
          v107 = 0u;
          v104 = 0u;
          v105 = 0u;
          v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v10));
          v77 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v76, "objectForKeyedSubscript:", v11));
          v78 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v77, "objectForKeyedSubscript:", v12));
          v29 = objc_claimAutoreleasedReturnValue(objc_msgSend(v78, "allKeys"));

          v79 = -[NSObject countByEnumeratingWithState:objects:count:](v29, "countByEnumeratingWithState:objects:count:", &v104, v116, 16);
          if (v79)
          {
            v80 = v79;
            v98 = v11;
            v100 = v12;
            v81 = v10;
            v82 = v13;
            v83 = *(_QWORD *)v105;
            while (2)
            {
              for (i = 0; i != v80; i = (char *)i + 1)
              {
                if (*(_QWORD *)v105 != v83)
                  objc_enumerationMutation(v29);
                v85 = *(void **)(*((_QWORD *)&v104 + 1) + 8 * (_QWORD)i);
                if (objc_msgSend(v85, "containsString:", v82, v98))
                {
                  v86 = v29;
                  v87 = WALogCategoryDefaultHandle();
                  v88 = objc_claimAutoreleasedReturnValue(v87);
                  if (os_log_type_enabled(v88, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 136446722;
                    v120 = "IOReportChannelRef  _Nullable getChRefFrom(NSDictionary * _Nonnull __strong, NSString * _Nonn"
                           "ull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong)";
                    v121 = 1024;
                    v122 = 84;
                    v123 = 2112;
                    v124 = v85;
                    _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEBUG, "%{public}s::%d:Found match with contains %@", buf, 0x1Cu);
                  }

                  v89 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v81));
                  v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "objectForKeyedSubscript:", v98));
                  v91 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v90, "objectForKeyedSubscript:", v100));
                  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v91, "objectForKeyedSubscript:", v85));

                  v9 = v103;
                  v29 = v86;
                  if (v17)
                  {
                    v94 = WALogCategoryDefaultHandle();
                    v95 = objc_claimAutoreleasedReturnValue(v94);
                    if (os_log_type_enabled(v95, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)buf = 136446466;
                      v120 = "IOReportChannelRef  _Nullable getChRefFrom(NSDictionary * _Nonnull __strong, NSString * _No"
                             "nnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong)";
                      v121 = 1024;
                      v122 = 87;
                      _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEBUG, "%{public}s::%d:Using match", buf, 0x12u);
                    }

                    goto LABEL_63;
                  }
                }
              }
              v80 = -[NSObject countByEnumeratingWithState:objects:count:](v29, "countByEnumeratingWithState:objects:count:", &v104, v116, 16);
              if (v80)
                continue;
              break;
            }
            v17 = 0;
LABEL_63:
            v13 = v82;
            v10 = v81;
            v12 = v100;
LABEL_64:
            v11 = v98;
            goto LABEL_65;
          }
        }
        else
        {
          v48 = WALogCategoryDefaultHandle();
          v49 = objc_claimAutoreleasedReturnValue(v48);
          if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
          {
            v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v10));
            v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "objectForKeyedSubscript:", v11));
            v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "allKeys"));
            *(_DWORD *)buf = 136446978;
            v120 = "IOReportChannelRef  _Nullable getChRefFrom(NSDictionary * _Nonnull __strong, NSString * _Nonnull __st"
                   "rong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong)";
            v121 = 1024;
            v122 = 69;
            v123 = 2112;
            v124 = v12;
            v125 = 2112;
            v126 = v52;
            _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "%{public}s::%d:Looking for subgroup %@, choices are %@", buf, 0x26u);

          }
          v110 = 0u;
          v111 = 0u;
          v108 = 0u;
          v109 = 0u;
          v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v10));
          v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "objectForKeyedSubscript:", v11));
          v29 = objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "allKeys"));

          v55 = -[NSObject countByEnumeratingWithState:objects:count:](v29, "countByEnumeratingWithState:objects:count:", &v108, v117, 16);
          if (v55)
          {
            v56 = v55;
            v98 = v11;
            v57 = v12;
            v102 = v10;
            v58 = v13;
            v59 = *(_QWORD *)v109;
            while (2)
            {
              for (j = 0; j != v56; j = (char *)j + 1)
              {
                if (*(_QWORD *)v109 != v59)
                  objc_enumerationMutation(v29);
                v61 = *(void **)(*((_QWORD *)&v108 + 1) + 8 * (_QWORD)j);
                if (objc_msgSend(v61, "containsString:", v57, v98))
                {
                  v62 = v29;
                  v63 = WALogCategoryDefaultHandle();
                  v64 = objc_claimAutoreleasedReturnValue(v63);
                  if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 136446722;
                    v120 = "IOReportChannelRef  _Nullable getChRefFrom(NSDictionary * _Nonnull __strong, NSString * _Nonn"
                           "ull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong)";
                    v121 = 1024;
                    v122 = 72;
                    v123 = 2112;
                    v124 = v61;
                    _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEBUG, "%{public}s::%d:Found match with contains %@", buf, 0x1Cu);
                  }

                  v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v102));
                  v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v65, "objectForKeyedSubscript:", v98));
                  v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v66, "objectForKeyedSubscript:", v61));
                  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v67, "objectForKeyedSubscript:", v58));

                  v9 = v103;
                  v29 = v62;
                  if (v17)
                  {
                    v92 = WALogCategoryDefaultHandle();
                    v93 = objc_claimAutoreleasedReturnValue(v92);
                    if (os_log_type_enabled(v93, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)buf = 136446466;
                      v120 = "IOReportChannelRef  _Nullable getChRefFrom(NSDictionary * _Nonnull __strong, NSString * _No"
                             "nnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong)";
                      v121 = 1024;
                      v122 = 75;
                      _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_DEBUG, "%{public}s::%d:Using match", buf, 0x12u);
                    }

                    goto LABEL_59;
                  }
                }
              }
              v56 = -[NSObject countByEnumeratingWithState:objects:count:](v29, "countByEnumeratingWithState:objects:count:", &v108, v117, 16);
              if (v56)
                continue;
              break;
            }
            v17 = 0;
LABEL_59:
            v13 = v58;
            v10 = v102;
            v12 = v57;
            goto LABEL_64;
          }
        }
      }
      else
      {
        v31 = WALogCategoryDefaultHandle();
        v32 = objc_claimAutoreleasedReturnValue(v31);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
        {
          v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v10));
          v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "allKeys"));
          *(_DWORD *)buf = 136446978;
          v120 = "IOReportChannelRef  _Nullable getChRefFrom(NSDictionary * _Nonnull __strong, NSString * _Nonnull __stro"
                 "ng, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong)";
          v121 = 1024;
          v122 = 57;
          v123 = 2112;
          v124 = v11;
          v125 = 2112;
          v126 = v34;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "%{public}s::%d:Looking for group %@, choices are %@", buf, 0x26u);

        }
        v114 = 0u;
        v115 = 0u;
        v112 = 0u;
        v113 = 0u;
        v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v10));
        v29 = objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "allKeys"));

        v36 = -[NSObject countByEnumeratingWithState:objects:count:](v29, "countByEnumeratingWithState:objects:count:", &v112, v118, 16);
        if (v36)
        {
          v37 = v36;
          v99 = v12;
          v101 = v10;
          v38 = v13;
          v39 = *(_QWORD *)v113;
          v97 = 136446722;
          while (2)
          {
            for (k = 0; k != v37; k = (char *)k + 1)
            {
              if (*(_QWORD *)v113 != v39)
                objc_enumerationMutation(v29);
              v41 = *(void **)(*((_QWORD *)&v112 + 1) + 8 * (_QWORD)k);
              if (objc_msgSend(v41, "containsString:", v11, v97))
              {
                v42 = v29;
                v43 = WALogCategoryDefaultHandle();
                v44 = objc_claimAutoreleasedReturnValue(v43);
                if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = v97;
                  v120 = "IOReportChannelRef  _Nullable getChRefFrom(NSDictionary * _Nonnull __strong, NSString * _Nonnul"
                         "l __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong)";
                  v121 = 1024;
                  v122 = 60;
                  v123 = 2112;
                  v124 = v41;
                  _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "%{public}s::%d:Found match with contains %@", buf, 0x1Cu);
                }

                v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v101));
                v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "objectForKeyedSubscript:", v41));
                v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "objectForKeyedSubscript:", v99));
                v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "objectForKeyedSubscript:", v38));

                v9 = v103;
                v29 = v42;
                if (v17)
                {
                  v68 = WALogCategoryDefaultHandle();
                  v69 = objc_claimAutoreleasedReturnValue(v68);
                  if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 136446466;
                    v120 = "IOReportChannelRef  _Nullable getChRefFrom(NSDictionary * _Nonnull __strong, NSString * _Nonn"
                           "ull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong)";
                    v121 = 1024;
                    v122 = 63;
                    _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEBUG, "%{public}s::%d:Using match", buf, 0x12u);
                  }

                  goto LABEL_40;
                }
              }
            }
            v37 = -[NSObject countByEnumeratingWithState:objects:count:](v29, "countByEnumeratingWithState:objects:count:", &v112, v118, 16);
            if (v37)
              continue;
            break;
          }
          v17 = 0;
LABEL_40:
          v13 = v38;
          v10 = v101;
          v12 = v99;
          goto LABEL_65;
        }
      }
    }
    else
    {
      v28 = WALogCategoryDefaultHandle();
      v29 = objc_claimAutoreleasedReturnValue(v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
      {
        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "allKeys"));
        *(_DWORD *)buf = 136446978;
        v120 = "IOReportChannelRef  _Nullable getChRefFrom(NSDictionary * _Nonnull __strong, NSString * _Nonnull __strong"
               ", NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong)";
        v121 = 1024;
        v122 = 55;
        v123 = 2112;
        v124 = v10;
        v125 = 2112;
        v126 = v30;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "%{public}s::%d:Looking for driver %@, choices are %@", buf, 0x26u);

      }
    }
    v17 = 0;
LABEL_65:

  }
LABEL_66:

  return v17;
}

void sub_10002651C(void *a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7)
{
  id v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *i;
  void *v17;
  void *v18;
  BOOL v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  uint64_t v25;
  id v27;
  id v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  id location;
  _BYTE v34[128];

  v25 = a3;
  v28 = a1;
  objc_initWeak(&location, a2);
  v27 = a4;
  v11 = a7;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "fieldForKey:", v11));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "repeatableValues"));

  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v29, v34, 16);
  if (v14)
  {
    v15 = *(_QWORD *)v30;
    while (2)
    {
      for (i = 0; i != v14; i = (char *)i + 1)
      {
        if (*(_QWORD *)v30 != v15)
          objc_enumerationMutation(v13);
        v17 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * (_QWORD)i);
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "fieldForKey:", CFSTR("NWAT_traffic"), v25));
        v19 = objc_msgSend(v18, "int32Value") == (_DWORD)a6;

        if (v19)
        {
          v22 = v17;
          goto LABEL_11;
        }
      }
      v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v29, v34, 16);
      if (v14)
        continue;
      break;
    }
  }

  v20 = objc_loadWeakRetained(&location);
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "getNewMessageForKey:groupType:forProcessWithToken:", CFSTR("NWAT"), v25, v27));
  v22 = objc_msgSend(v21, "copy");

  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "fieldForKey:", v11));
  objc_msgSend(v13, "addRepeatableSubMessageValue:", v22);
LABEL_11:

  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "fieldForKey:", CFSTR("NWAT_traffic")));
  objc_msgSend(v23, "setInt32Value:", a6);

  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "fieldForKey:", CFSTR("NWAT_value")));
  objc_msgSend(v24, "setUint64Value:", a5);

  objc_destroyWeak(&location);
}

void sub_100026760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100026788(void *a1, void *a2, void *a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8, void *a9)
{
  id v16;
  void *v17;
  void *v18;
  uint64_t UnitLabel;
  uint64_t i;
  void *v21;
  uint64_t BucketHits;
  void *v23;
  id v24;
  NSObject *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  id location;
  uint8_t buf[4];
  const char *v37;
  __int16 v38;
  int v39;
  __int16 v40;
  id v41;
  __int16 v42;
  id v43;
  __int16 v44;
  const __CFString *v45;
  __int16 v46;
  id v47;

  v26 = a1;
  v32 = a2;
  objc_initWeak(&location, a3);
  v31 = a5;
  v30 = a6;
  v27 = a7;
  v28 = a8;
  v29 = a9;
  v16 = objc_loadWeakRetained(&location);
  v33 = 0;
  v34 = 0;
  v17 = sub_100025990(v26, v27, v28, CFSTR("TxCompletion Latency"), v29);
  v18 = v17;
  if (v17)
  {
    UnitLabel = IOReportChannelGetUnitLabel(v17);
    for (i = 0; (int)i < (int)IOReportHistogramGetBucketCount(v18); i = (i + 1))
    {
      v21 = objc_autoreleasePoolPush();
      IOReportHistogramGetBucketBounds(v18, i, &v34, &v33);
      BucketHits = IOReportHistogramGetBucketHits(v18, i);
      v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%lld - %lld %@"), v34, v33, UnitLabel));
      sub_100026A30(v32, v16, a4, v31, v23, BucketHits, v30);

      objc_autoreleasePoolPop(v21);
    }
  }
  else
  {
    v24 = WALogCategoryDefaultHandle();
    v25 = objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136447490;
      v37 = "_Bool fillHistogramFromHistogram(NSDictionary * _Nonnull __strong, WAMessageAWD * _Nullable __strong, __weak"
            " id<WAIOReporterPopulatorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSString * _"
            "Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, "
            "NSString * _Nonnull __strong)";
      v38 = 1024;
      v39 = 396;
      v40 = 2112;
      v41 = v27;
      v42 = 2112;
      v43 = v28;
      v44 = 2112;
      v45 = CFSTR("TxCompletion Latency");
      v46 = 2112;
      v47 = v29;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to find %@ %@ %@ %@", buf, 0x3Au);
    }

  }
  objc_destroyWeak(&location);

}

void sub_100026A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100026A30(void *a1, void *a2, uint64_t a3, void *a4, void *a5, uint64_t a6, void *a7)
{
  id v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *i;
  void *v17;
  void *v18;
  void *v19;
  unsigned __int8 v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  id v28;
  id v29;
  id v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  id location;
  _BYTE v36[128];

  v30 = a1;
  objc_initWeak(&location, a2);
  v28 = a4;
  v11 = a5;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v29 = a7;
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "fieldForKey:"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "repeatableValues"));

  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v31, v36, 16);
  if (v14)
  {
    v15 = *(_QWORD *)v32;
    while (2)
    {
      for (i = 0; i != v14; i = (char *)i + 1)
      {
        if (*(_QWORD *)v32 != v15)
          objc_enumerationMutation(v13);
        v17 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)i);
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "fieldForKey:", CFSTR("NWAHB_bin")));
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "stringValue"));
        v20 = objc_msgSend(v19, "isEqualToString:", v11);

        if ((v20 & 1) != 0)
        {
          v23 = v17;
          goto LABEL_11;
        }
      }
      v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v31, v36, 16);
      if (v14)
        continue;
      break;
    }
  }

  v21 = objc_loadWeakRetained(&location);
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "getNewMessageForKey:groupType:forProcessWithToken:", CFSTR("NWAHB"), a3, v28));
  v23 = objc_msgSend(v22, "copy");

  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "fieldForKey:", v29));
  objc_msgSend(v13, "addRepeatableSubMessageValue:", v23);
LABEL_11:

  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "fieldForKey:", CFSTR("NWAHB_hits")));
  objc_msgSend(v24, "setUint64Value:", a6);

  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "fieldForKey:", CFSTR("NWAHB_bin")));
  objc_msgSend(v25, "setStringValue:", v11);

  objc_destroyWeak(&location);
}

void sub_100026C90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100026CB8(void *a1, void *a2, void *a3, void *a4, _QWORD *a5)
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  void *v37;
  uint64_t v38;
  char v39;
  char v40;
  id v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  char v57;
  char v58;
  id v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  int v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  int v95;
  _BOOL4 v96;
  id v97;
  NSObject *v98;
  void *v99;
  id v100;
  NSObject *v101;
  id v102;
  NSObject *v103;
  void *v104;
  void *v105;
  void *v106;
  id v107;
  void *v108;
  void *v109;
  void *v110;
  id v111;
  void *v112;
  void *v113;
  void *v114;
  id v115;
  void *v116;
  void *v117;
  void *v118;
  id v119;
  NSObject *v120;
  void *v121;
  void *v122;
  void *v123;
  id v124;
  NSObject *v125;
  void *v126;
  void *v127;
  void *v128;
  id v129;
  NSObject *v130;
  void *v131;
  void *v132;
  void *v133;
  id v134;
  NSObject *v135;
  void *v136;
  void *v137;
  void *v138;
  id v139;
  NSObject *v140;
  void *v141;
  void *v142;
  void *v143;
  id v144;
  NSObject *v145;
  void *v146;
  void *v147;
  void *v148;
  _BOOL4 v149;
  int v151;
  int v152;
  void *v153;
  id v154;
  id v155;
  int v156;
  int v157;
  NSErrorUserInfoKey v158;
  const __CFString *v159;
  uint8_t buf[4];
  const char *v161;
  __int16 v162;
  int v163;
  __int16 v164;
  _BYTE v165[10];
  void *v166;
  int v167;
  __int16 v168;
  int v169;
  __int16 v170;
  _BOOL4 v171;
  __int16 v172;
  int v173;

  v8 = a1;
  v154 = a2;
  v155 = a3;
  v9 = a4;
  v153 = v8;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "fieldForKey:", CFSTR("NWACS_aggregateMetrics")));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "subMessageValue"));

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "fieldForKey:", CFSTR("NWAAM_kRxDataErrors")));
  objc_msgSend(v12, "setUint64Value:", 0);

  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "fieldForKey:", CFSTR("NWAAM_kRxFrames")));
  objc_msgSend(v13, "setUint64Value:", 0);

  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "fieldForKey:", CFSTR("NWAAM_kRxRetryBitSet")));
  objc_msgSend(v14, "setUint64Value:", 0);

  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "fieldForKey:", CFSTR("NWAAM_kMACRxDataFrameMatchingRA")));
  objc_msgSend(v15, "setUint64Value:", 0);

  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "fieldForKey:", CFSTR("NWAAM_kMACRxDataFrameOtherRA")));
  objc_msgSend(v16, "setUint64Value:", 0);

  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "fieldForKey:", CFSTR("NWAAM_kMACRxControlFrameMatchingRA")));
  objc_msgSend(v17, "setUint32Value:", 0);

  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "fieldForKey:", CFSTR("NWAAM_kMACRxControlFrameOtherRA")));
  objc_msgSend(v18, "setUint32Value:", 0);

  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "fieldForKey:", CFSTR("NWAAM_kRxGoodPLCP")));
  objc_msgSend(v19, "setUint64Value:", 0);

  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "fieldForKey:", CFSTR("NWAAM_kRxBadPLCP")));
  objc_msgSend(v20, "setUint64Value:", 0);

  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "fieldForKey:", CFSTR("NWAAM_kRxBadFCS")));
  objc_msgSend(v21, "setUint64Value:", 0);

  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "fieldForKey:", CFSTR("NWAAM_kTxFrames")));
  objc_msgSend(v22, "setUint64Value:", 0);

  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "fieldForKey:", CFSTR("NWAAM_kTxRetransmission")));
  objc_msgSend(v23, "setUint64Value:", 0);

  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "fieldForKey:", CFSTR("NWAAM_kdot11RetryCount")));
  objc_msgSend(v24, "setUint64Value:", 0);

  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "fieldForKey:", CFSTR("NWAAM_kdot11MultipleRetryCount")));
  objc_msgSend(v25, "setUint64Value:", 0);

  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "fieldForKey:", CFSTR("NWAAM_kdot11RTSSuccessCount")));
  objc_msgSend(v26, "setUint64Value:", 0);

  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "fieldForKey:", CFSTR("NWAAM_kdot11RTSFailureCount")));
  objc_msgSend(v27, "setUint64Value:", 0);

  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "fieldForKey:", CFSTR("NWAAM_kCtlTxRTS")));
  objc_msgSend(v28, "setUint64Value:", 0);

  v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "fieldForKey:", CFSTR("NWAAM_kRxCRCGlitch")));
  objc_msgSend(v29, "setUint64Value:", 0);

  v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "fieldForKey:", CFSTR("NWAAM_kMACRxUnicastCTStoMAC")));
  objc_msgSend(v30, "setUint64Value:", 0);

  v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "fieldForKey:", CFSTR("NWAAM_kMACRxUnicastCTStoOther")));
  objc_msgSend(v31, "setUint64Value:", 0);

  v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "fieldForKey:", CFSTR("NWAAM_kMACRxUnicastRTStoMAC")));
  objc_msgSend(v32, "setUint64Value:", 0);

  v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "fieldForKey:", CFSTR("NWAAM_kMACRxUnicastRTStoOther")));
  objc_msgSend(v33, "setUint64Value:", 0);

  v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "fieldForKey:", CFSTR("NWAAM_kCtlTxCTS")));
  objc_msgSend(v34, "setUint64Value:", 0);

  v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "fieldForKey:", CFSTR("NWAAM_kRxBadOther")));
  objc_msgSend(v35, "setUint64Value:", 0);

  v36 = sub_100024B98(v9);
  v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
  v157 = 0;
  v38 = 0;
  v39 = 1;
  do
  {
    v40 = v39;
    v41 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Slice %lu"), v38);
    v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v37));
    v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "objectForKeyedSubscript:", v41));

    if (!v43)
      goto LABEL_8;
    v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v37));
    v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "objectForKeyedSubscript:", v41));
    v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "objectForKeyedSubscript:", CFSTR("Rx Counters")));

    if (!v46)
    {
      v102 = WALogCategoryDefaultHandle();
      v103 = objc_claimAutoreleasedReturnValue(v102);
      if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
      {
        v104 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v37));
        v105 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v104, "objectForKeyedSubscript:", v41));
        v106 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v105, "allKeys"));
        *(_DWORD *)buf = 136446978;
        v161 = "void populateNWActivityAggregateMetrics(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulato"
               "rMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong,"
               " NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
        v162 = 1024;
        v163 = 1695;
        v164 = 2112;
        *(_QWORD *)v165 = CFSTR("Rx Counters");
        *(_WORD *)&v165[8] = 2112;
        v166 = v106;
        _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to find subgroup %@, we have %@", buf, 0x26u);

      }
      LOBYTE(v68) = v157;
      LOBYTE(v151) = v157;
      LOBYTE(v152) = v157;
      goto LABEL_58;
    }
    sub_1000288BC(v9, v11, CFSTR("NWAAM_kRxDataErrors"), v37, v41, CFSTR("Rx Counters"), CFSTR("Rx Data Errors"));
    sub_1000288BC(v9, v11, CFSTR("NWAAM_kRxFrames"), v37, v41, CFSTR("Rx Counters"), CFSTR("Rx Data Frames"));
    sub_1000288BC(v9, v11, CFSTR("NWAAM_kRxRetryBitSet"), v37, v41, CFSTR("Rx Counters"), CFSTR("Rx Retry bit set"));
    v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v37));
    v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "objectForKeyedSubscript:", v41));
    v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "objectForKeyedSubscript:", CFSTR("Rx Error Counters")));

    if (!v49)
    {
      v107 = WALogCategoryDefaultHandle();
      v103 = objc_claimAutoreleasedReturnValue(v107);
      if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
      {
        v108 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v37));
        v109 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v108, "objectForKeyedSubscript:", v41));
        v110 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v109, "allKeys"));
        *(_DWORD *)buf = 136446978;
        v161 = "void populateNWActivityAggregateMetrics(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulato"
               "rMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong,"
               " NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
        v162 = 1024;
        v163 = 1702;
        v164 = 2112;
        *(_QWORD *)v165 = CFSTR("Rx Error Counters");
        *(_WORD *)&v165[8] = 2112;
        v166 = v110;
        _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to find subgroup %@, we have %@", buf, 0x26u);

      }
      LOBYTE(v68) = 1;
      LOBYTE(v151) = v157;
      LOBYTE(v152) = v157;
      goto LABEL_58;
    }
    sub_1000288BC(v9, v11, CFSTR("NWAAM_kRxGoodPLCP"), v37, v41, CFSTR("Rx Error Counters"), CFSTR("Rx Good PLCP"));
    sub_1000288BC(v9, v11, CFSTR("NWAAM_kRxBadPLCP"), v37, v41, CFSTR("Rx Error Counters"), CFSTR("Rx Bad PLCP"));
    sub_1000288BC(v9, v11, CFSTR("NWAAM_kRxBadFCS"), v37, v41, CFSTR("Rx Error Counters"), CFSTR("Rx Bad FCS"));
    sub_1000288BC(v9, v11, CFSTR("NWAAM_kRxCRCGlitch"), v37, v41, CFSTR("Rx Error Counters"), CFSTR("Rx CRC Glitch"));
    sub_1000288BC(v9, v11, CFSTR("NWAAM_kRxBadOther"), v37, v41, CFSTR("Rx Error Counters"), CFSTR("Any Other Rx Errors"));
    v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v37));
    v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "objectForKeyedSubscript:", v41));
    v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "objectForKeyedSubscript:", CFSTR("Tx Counters")));

    if (!v52)
    {
      v111 = WALogCategoryDefaultHandle();
      v103 = objc_claimAutoreleasedReturnValue(v111);
      if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
      {
        v112 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v37));
        v113 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v112, "objectForKeyedSubscript:", v41));
        v114 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v113, "allKeys"));
        *(_DWORD *)buf = 136446978;
        v161 = "void populateNWActivityAggregateMetrics(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulato"
               "rMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong,"
               " NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
        v162 = 1024;
        v163 = 1711;
        v164 = 2112;
        *(_QWORD *)v165 = CFSTR("Tx Counters");
        *(_WORD *)&v165[8] = 2112;
        v166 = v114;
        _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to find subgroup %@, we have %@", buf, 0x26u);

      }
      LOBYTE(v151) = 1;
      LOBYTE(v152) = v157;
      goto LABEL_57;
    }
    sub_1000288BC(v9, v11, CFSTR("NWAAM_kTxFrames"), v37, v41, CFSTR("Tx Counters"), CFSTR("Tx Data Frames"));
    sub_1000288BC(v9, v11, CFSTR("NWAAM_kTxRetransmission"), v37, v41, CFSTR("Tx Counters"), CFSTR("Tx Retransmissions"));
    v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v37));
    v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "objectForKeyedSubscript:", v41));
    v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "objectForKeyedSubscript:", CFSTR("dot11 MIB Counters")));

    if (!v55)
    {
      v115 = WALogCategoryDefaultHandle();
      v103 = objc_claimAutoreleasedReturnValue(v115);
      if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
      {
        v116 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v37));
        v117 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v116, "objectForKeyedSubscript:", v41));
        v118 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v117, "allKeys"));
        *(_DWORD *)buf = 136446978;
        v161 = "void populateNWActivityAggregateMetrics(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulato"
               "rMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong,"
               " NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
        v162 = 1024;
        v163 = 1717;
        v164 = 2112;
        *(_QWORD *)v165 = CFSTR("dot11 MIB Counters");
        *(_WORD *)&v165[8] = 2112;
        v166 = v118;
        _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to find subgroup %@, we have %@", buf, 0x26u);

      }
      LOBYTE(v151) = 1;
      LOBYTE(v152) = 1;
LABEL_57:
      LOBYTE(v68) = 1;
LABEL_58:

      v95 = 0;
      v149 = 0;
      v96 = 0;
      goto LABEL_37;
    }
    sub_1000288BC(v9, v11, CFSTR("NWAAM_kdot11MultipleRetryCount"), v37, v41, CFSTR("dot11 MIB Counters"), CFSTR("MSDU successfully transmits >= 1 attempt"));
    sub_1000288BC(v9, v11, CFSTR("NWAAM_kdot11RetryCount"), v37, v41, CFSTR("dot11 MIB Counters"), CFSTR("MSDU successfully transmits > 1 attempt"));
    sub_1000288BC(v9, v11, CFSTR("NWAAM_kdot11RTSSuccessCount"), v37, v41, CFSTR("dot11 MIB Counters"), CFSTR("CTS Rxd in response to RTS"));
    sub_1000288BC(v9, v11, CFSTR("NWAAM_kdot11RTSFailureCount"), v37, v41, CFSTR("dot11 MIB Counters"), CFSTR("CTS not Rxd in response to RTS"));
    v157 = 1;
LABEL_8:

    v39 = 0;
    v38 = 1;
  }
  while ((v40 & 1) != 0);
  v156 = 0;
  v56 = 0;
  v57 = 1;
  do
  {
    v58 = v57;
    v59 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Slice Frames: slice  %lu"), v56);
    v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v37));
    v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "objectForKeyedSubscript:", v59));

    if (v61)
    {
      v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v37));
      v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "objectForKeyedSubscript:", v59));
      v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "objectForKeyedSubscript:", CFSTR("Tx Control Frame Counters")));

      if (!v64)
      {
        v119 = WALogCategoryDefaultHandle();
        v120 = objc_claimAutoreleasedReturnValue(v119);
        if (os_log_type_enabled(v120, OS_LOG_TYPE_ERROR))
        {
          v121 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v37));
          v122 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v121, "objectForKeyedSubscript:", v59));
          v123 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v122, "allKeys"));
          *(_DWORD *)buf = 136446978;
          v161 = "void populateNWActivityAggregateMetrics(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopula"
                 "torMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __str"
                 "ong, NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
          v162 = 1024;
          v163 = 1732;
          v164 = 2112;
          *(_QWORD *)v165 = CFSTR("Tx Control Frame Counters");
          *(_WORD *)&v165[8] = 2112;
          v166 = v123;
          _os_log_impl((void *)&_mh_execute_header, v120, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to find subgroup %@, we have %@", buf, 0x26u);

        }
        v149 = 0;
        goto LABEL_62;
      }
      sub_1000288BC(v9, v11, CFSTR("NWAAM_kCtlTxRTS"), v37, v59, CFSTR("Tx Control Frame Counters"), CFSTR("Tx RTS"));
      v156 = 1;
    }

    v57 = 0;
    v56 = 1;
  }
  while ((v58 & 1) != 0);
  v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v37));
  v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v65, "objectForKeyedSubscript:", CFSTR("Chip Frames")));
  v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v66, "objectForKeyedSubscript:", CFSTR("Tx Control Frame Counters")));

  v149 = v67 != 0;
  if (v67)
    sub_100028720(v9, v11, CFSTR("NWAAM_kCtlTxCTS"), v37, CFSTR("Chip Frames"), CFSTR("Tx Control Frame Counters"), CFSTR("Tx CTS"));
  v68 = v157;
  if ((v157 & 1) != 0)
  {
LABEL_28:
    v151 = v68;
    v152 = v68;
LABEL_29:
    v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v37));
    v91 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v90, "objectForKeyedSubscript:", CFSTR("Chip")));

    if (v91)
    {
      v92 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v37));
      v93 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v92, "objectForKeyedSubscript:", CFSTR("Chip")));
      v94 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v93, "objectForKeyedSubscript:", CFSTR("Rx MAC Counters")));

      if (!v94)
      {
        v124 = WALogCategoryDefaultHandle();
        v125 = objc_claimAutoreleasedReturnValue(v124);
        if (os_log_type_enabled(v125, OS_LOG_TYPE_ERROR))
        {
          v126 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v37));
          v127 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v126, "objectForKeyedSubscript:", CFSTR("Chip")));
          v128 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v127, "allKeys"));
          *(_DWORD *)buf = 136446978;
          v161 = "void populateNWActivityAggregateMetrics(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopula"
                 "torMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __str"
                 "ong, NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
          v162 = 1024;
          v163 = 1783;
          v164 = 2112;
          *(_QWORD *)v165 = CFSTR("Rx MAC Counters");
          *(_WORD *)&v165[8] = 2112;
          v166 = v128;
          _os_log_impl((void *)&_mh_execute_header, v125, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to find subgroup %@, we have %@", buf, 0x26u);

        }
        v96 = 0;
        goto LABEL_36;
      }
      sub_100028720(v9, v11, CFSTR("NWAAM_kMACRxDataFrameMatchingRA"), v37, CFSTR("Chip"), CFSTR("Rx MAC Counters"), CFSTR("Rx Data Frame matching RA"));
      sub_100028720(v9, v11, CFSTR("NWAAM_kMACRxDataFrameOtherRA"), v37, CFSTR("Chip"), CFSTR("Rx MAC Counters"), CFSTR("Rx Data Frame other RA"));
      sub_100024D98(v9, v11, CFSTR("NWAAM_kMACRxControlFrameMatchingRA"), v37, CFSTR("Chip"), CFSTR("Rx MAC Counters"), CFSTR("Rx Control Frame matching RA"));
      sub_100024D98(v9, v11, CFSTR("NWAAM_kMACRxControlFrameOtherRA"), v37, CFSTR("Chip"), CFSTR("Rx MAC Counters"), CFSTR("Rx Control Frame other RA"));
      sub_100028720(v9, v11, CFSTR("NWAAM_kMACRxUnicastCTStoMAC"), v37, CFSTR("Chip"), CFSTR("Rx MAC Counters"), CFSTR("Rx CTS to MAC"));
      sub_100028720(v9, v11, CFSTR("NWAAM_kMACRxUnicastCTStoOther"), v37, CFSTR("Chip"), CFSTR("Rx MAC Counters"), CFSTR("Rx CTS to Other"));
      sub_100028720(v9, v11, CFSTR("NWAAM_kMACRxUnicastRTStoMAC"), v37, CFSTR("Chip"), CFSTR("Rx MAC Counters"), CFSTR("Rx RTS to MAC"));
      sub_100028720(v9, v11, CFSTR("NWAAM_kMACRxUnicastRTStoOther"), v37, CFSTR("Chip"), CFSTR("Rx MAC Counters"), CFSTR("Rx RTS to Other"));
      if (v67 && (v68 & v151 & v152 & v157 & 1) != 0)
      {
        if ((v156 & 1) != 0)
          goto LABEL_44;
        v95 = v156;
        v149 = 1;
        LOBYTE(v157) = 1;
        LOBYTE(v152) = 1;
        v96 = 1;
        goto LABEL_78;
      }
    }
    v96 = v91 != 0;
LABEL_36:
    v95 = v156;
    goto LABEL_37;
  }
  v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v37));
  v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v69, "objectForKeyedSubscript:", CFSTR("Chip Frames")));
  v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "objectForKeyedSubscript:", CFSTR("Tx Control Frame Counters")));

  if (v71)
  {
    sub_100028720(v9, v11, CFSTR("NWAAM_kCtlTxRTS"), v37, CFSTR("Chip Frames"), CFSTR("Tx Control Frame Counters"), CFSTR("Tx RTS"));
    v156 = 1;
  }
  v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v37));
  v73 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v72, "objectForKeyedSubscript:", CFSTR("Chip")));

  if (!v73)
  {
    v68 = v157;
    goto LABEL_28;
  }
  v74 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v37));
  v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v74, "objectForKeyedSubscript:", CFSTR("Chip")));
  v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v75, "objectForKeyedSubscript:", CFSTR("Rx Counters")));

  if (!v76)
  {
    v129 = WALogCategoryDefaultHandle();
    v130 = objc_claimAutoreleasedReturnValue(v129);
    if (os_log_type_enabled(v130, OS_LOG_TYPE_ERROR))
    {
      v131 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v37));
      v132 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v131, "objectForKeyedSubscript:", CFSTR("Chip")));
      v133 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v132, "allKeys"));
      *(_DWORD *)buf = 136446978;
      v161 = "void populateNWActivityAggregateMetrics(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorM"
             "essageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSD"
             "ictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
      v162 = 1024;
      v163 = 1749;
      v164 = 2112;
      *(_QWORD *)v165 = CFSTR("Rx Counters");
      *(_WORD *)&v165[8] = 2112;
      v166 = v133;
      _os_log_impl((void *)&_mh_execute_header, v130, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to find subgroup %@, we have %@", buf, 0x26u);

    }
LABEL_62:
    v96 = 0;
    LOBYTE(v68) = v157;
    v95 = v156 & 1;
    LOBYTE(v151) = v157;
    LOBYTE(v152) = v157;
    goto LABEL_37;
  }
  sub_100028720(v9, v11, CFSTR("NWAAM_kRxDataErrors"), v37, CFSTR("Chip"), CFSTR("Rx Counters"), CFSTR("Rx Data Errors"));
  sub_100028720(v9, v11, CFSTR("NWAAM_kRxFrames"), v37, CFSTR("Chip"), CFSTR("Rx Counters"), CFSTR("Rx Data Frames"));
  sub_100028720(v9, v11, CFSTR("NWAAM_kRxRetryBitSet"), v37, CFSTR("Chip"), CFSTR("Rx Counters"), CFSTR("Rx Retry bit set"));
  v77 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v37));
  v78 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v77, "objectForKeyedSubscript:", CFSTR("Chip")));
  v79 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v78, "objectForKeyedSubscript:", CFSTR("Rx Error Counters")));

  if (v79)
  {
    sub_100028720(v9, v11, CFSTR("NWAAM_kRxGoodPLCP"), v37, CFSTR("Chip"), CFSTR("Rx Error Counters"), CFSTR("Rx Good PLCP"));
    sub_100028720(v9, v11, CFSTR("NWAAM_kRxBadPLCP"), v37, CFSTR("Chip"), CFSTR("Rx Error Counters"), CFSTR("Rx Bad PLCP"));
    sub_100028720(v9, v11, CFSTR("NWAAM_kRxBadFCS"), v37, CFSTR("Chip"), CFSTR("Rx Error Counters"), CFSTR("Rx Bad FCS"));
    sub_100028720(v9, v11, CFSTR("NWAAM_kRxCRCGlitch"), v37, CFSTR("Chip"), CFSTR("Rx Error Counters"), CFSTR("Rx CRC Glitch"));
    v80 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v37));
    v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v80, "objectForKeyedSubscript:", CFSTR("Chip")));
    v82 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v81, "objectForKeyedSubscript:", CFSTR("Rx Error Counters")));
    v83 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v82, "objectForKeyedSubscript:", CFSTR("Any Other Rx Errors")));

    if (v83)
      sub_100028720(v9, v11, CFSTR("NWAAM_kRxBadOther"), v37, CFSTR("Chip"), CFSTR("Rx Error Counters"), CFSTR("Any Other Rx Errors"));
    v84 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v37));
    v85 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v84, "objectForKeyedSubscript:", CFSTR("Chip")));
    v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v85, "objectForKeyedSubscript:", CFSTR("Tx Counters")));

    if (v86)
    {
      sub_1000288BC(v9, v11, CFSTR("NWAAM_kTxFrames"), v37, CFSTR("Chip"), CFSTR("Tx Counters"), CFSTR("Tx Data Frames"));
      sub_1000288BC(v9, v11, CFSTR("NWAAM_kTxRetransmission"), v37, CFSTR("Chip"), CFSTR("Tx Counters"), CFSTR("Tx Retransmissions"));
      v87 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v37));
      v88 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v87, "objectForKeyedSubscript:", CFSTR("Chip")));
      v89 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("dot11 MIB Counters")));

      if (v89)
      {
        sub_1000288BC(v9, v11, CFSTR("NWAAM_kdot11MultipleRetryCount"), v37, CFSTR("Chip"), CFSTR("dot11 MIB Counters"), CFSTR("MSDU successfully transmits >= 1 attempt"));
        sub_1000288BC(v9, v11, CFSTR("NWAAM_kdot11RetryCount"), v37, CFSTR("Chip"), CFSTR("dot11 MIB Counters"), CFSTR("MSDU successfully transmits > 1 attempt"));
        sub_1000288BC(v9, v11, CFSTR("NWAAM_kdot11RTSSuccessCount"), v37, CFSTR("Chip"), CFSTR("dot11 MIB Counters"), CFSTR("CTS Rxd in response to RTS"));
        sub_1000288BC(v9, v11, CFSTR("NWAAM_kdot11RTSFailureCount"), v37, CFSTR("Chip"), CFSTR("dot11 MIB Counters"), CFSTR("CTS not Rxd in response to RTS"));
        v157 = 1;
        v151 = 1;
        v152 = 1;
        v68 = 1;
        goto LABEL_29;
      }
      v144 = WALogCategoryDefaultHandle();
      v145 = objc_claimAutoreleasedReturnValue(v144);
      if (os_log_type_enabled(v145, OS_LOG_TYPE_ERROR))
      {
        v146 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v37));
        v147 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v146, "objectForKeyedSubscript:", CFSTR("Chip")));
        v148 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v147, "allKeys"));
        *(_DWORD *)buf = 136446978;
        v161 = "void populateNWActivityAggregateMetrics(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulato"
               "rMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong,"
               " NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
        v162 = 1024;
        v163 = 1773;
        v164 = 2112;
        *(_QWORD *)v165 = CFSTR("dot11 MIB Counters");
        *(_WORD *)&v165[8] = 2112;
        v166 = v148;
        _os_log_impl((void *)&_mh_execute_header, v145, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to find subgroup %@, we have %@", buf, 0x26u);

      }
      v96 = 0;
      v95 = v156 & 1;
      LOBYTE(v152) = 1;
LABEL_78:
      LOBYTE(v151) = 1;
    }
    else
    {
      v139 = WALogCategoryDefaultHandle();
      v140 = objc_claimAutoreleasedReturnValue(v139);
      if (os_log_type_enabled(v140, OS_LOG_TYPE_ERROR))
      {
        v141 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v37));
        v142 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v141, "objectForKeyedSubscript:", CFSTR("Chip")));
        v143 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v142, "allKeys"));
        *(_DWORD *)buf = 136446978;
        v161 = "void populateNWActivityAggregateMetrics(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulato"
               "rMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong,"
               " NSDictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
        v162 = 1024;
        v163 = 1767;
        v164 = 2112;
        *(_QWORD *)v165 = CFSTR("Tx Counters");
        *(_WORD *)&v165[8] = 2112;
        v166 = v143;
        _os_log_impl((void *)&_mh_execute_header, v140, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to find subgroup %@, we have %@", buf, 0x26u);

      }
      v96 = 0;
      v95 = v156 & 1;
      LOBYTE(v151) = 1;
      LOBYTE(v152) = v157;
    }
    LOBYTE(v68) = 1;
  }
  else
  {
    v134 = WALogCategoryDefaultHandle();
    v135 = objc_claimAutoreleasedReturnValue(v134);
    if (os_log_type_enabled(v135, OS_LOG_TYPE_ERROR))
    {
      v136 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v37));
      v137 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v136, "objectForKeyedSubscript:", CFSTR("Chip")));
      v138 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v137, "allKeys"));
      *(_DWORD *)buf = 136446978;
      v161 = "void populateNWActivityAggregateMetrics(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorM"
             "essageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSD"
             "ictionary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
      v162 = 1024;
      v163 = 1756;
      v164 = 2112;
      *(_QWORD *)v165 = CFSTR("Rx Error Counters");
      *(_WORD *)&v165[8] = 2112;
      v166 = v138;
      _os_log_impl((void *)&_mh_execute_header, v135, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to find subgroup %@, we have %@", buf, 0x26u);

    }
    v96 = 0;
    v95 = v156 & 1;
    LOBYTE(v68) = 1;
    LOBYTE(v151) = v157;
    LOBYTE(v152) = v157;
  }
LABEL_37:
  v97 = WALogCategoryDefaultHandle();
  v98 = objc_claimAutoreleasedReturnValue(v97);
  if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136448258;
    v161 = "void populateNWActivityAggregateMetrics(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorMes"
           "sageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSDicti"
           "onary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
    v162 = 1024;
    v163 = 1801;
    v164 = 1024;
    *(_DWORD *)v165 = v68 & 1;
    *(_WORD *)&v165[4] = 1024;
    *(_DWORD *)&v165[6] = v151 & 1;
    LOWORD(v166) = 1024;
    *(_DWORD *)((char *)&v166 + 2) = v96;
    HIWORD(v166) = 1024;
    v167 = v152 & 1;
    v168 = 1024;
    v169 = v157 & 1;
    v170 = 1024;
    v171 = v149;
    v172 = 1024;
    v173 = v95;
    _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_ERROR, "%{public}s::%d:hasRxCounters %d hasRxErrorCounters %d hasRxMAC %d hasTxCounters %d hasdot11 %d hasTxCTS %d hasTxRTS %d", buf, 0x3Cu);
  }

  if (!*a5)
  {
    v158 = NSLocalizedFailureReasonErrorKey;
    v159 = CFSTR("WAErrorCodeTxRxFrameCountersMissing");
    v99 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v159, &v158, 1));
    *a5 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.wifi.analytics.errordomain"), 9023, v99));

  }
  v100 = WALogCategoryDefaultHandle();
  v101 = objc_claimAutoreleasedReturnValue(v100);
  if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    v161 = "void populateNWActivityAggregateMetrics(WAMessageAWD * _Nullable __strong, __weak id<WAIOReporterPopulatorMes"
           "sageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, NSDictionary * _Nonnull __strong, NSDicti"
           "onary * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)";
    v162 = 1024;
    v163 = 1806;
    _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed ", buf, 0x12u);
  }

LABEL_44:
}

void sub_100028720(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  uint64_t IntegerValue;
  void *v21;
  id v22;
  NSObject *v23;
  int v24;
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  id v29;
  __int16 v30;
  id v31;
  __int16 v32;
  id v33;
  __int16 v34;
  id v35;

  v13 = a2;
  v14 = a3;
  v15 = a4;
  v16 = a5;
  v17 = a6;
  v18 = a7;
  v19 = sub_100025990(a1, v15, v16, v17, v18);
  if (v19)
  {
    IntegerValue = IOReportSimpleGetIntegerValue(v19, 0);
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "fieldForKey:", v14));
    objc_msgSend(v21, "setUint64Value:", IntegerValue);

  }
  else
  {
    v22 = WALogCategoryDefaultHandle();
    v23 = objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      v24 = 136447490;
      v25 = "_Bool fillUInt64FieldFromSimple(NSDictionary * _Nonnull __strong, WAMessageAWD * _Nullable __strong, NSStrin"
            "g * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __str"
            "ong, NSString * _Nonnull __strong)";
      v26 = 1024;
      v27 = 120;
      v28 = 2112;
      v29 = v15;
      v30 = 2112;
      v31 = v16;
      v32 = 2112;
      v33 = v17;
      v34 = 2112;
      v35 = v18;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to find %@ %@ %@ %@", (uint8_t *)&v24, 0x3Au);
    }

  }
}

void sub_1000288BC(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  uint64_t IntegerValue;
  void *v21;
  void *v22;
  id v23;
  NSObject *v24;
  int v25;
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  id v30;
  __int16 v31;
  id v32;
  __int16 v33;
  id v34;
  __int16 v35;
  id v36;

  v13 = a2;
  v14 = a3;
  v15 = a4;
  v16 = a5;
  v17 = a6;
  v18 = a7;
  v19 = sub_100025990(a1, v15, v16, v17, v18);
  if (v19)
  {
    IntegerValue = IOReportSimpleGetIntegerValue(v19, 0);
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "fieldForKey:", v14));
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "fieldForKey:", v14));
    objc_msgSend(v21, "setUint64Value:", (char *)objc_msgSend(v22, "uint64Value") + IntegerValue);

  }
  else
  {
    v23 = WALogCategoryDefaultHandle();
    v24 = objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      v25 = 136447490;
      v26 = "_Bool addUInt64FieldFromSimple(NSDictionary * _Nonnull __strong, WAMessageAWD * _Nullable __strong, NSString"
            " * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __stro"
            "ng, NSString * _Nonnull __strong)";
      v27 = 1024;
      v28 = 137;
      v29 = 2112;
      v30 = v15;
      v31 = 2112;
      v32 = v16;
      v33 = 2112;
      v34 = v17;
      v35 = 2112;
      v36 = v18;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to find %@ %@ %@ %@", (uint8_t *)&v25, 0x3Au);
    }

  }
}

void sub_100028A80(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, uint64_t a8, unsigned __int8 a9)
{
  id v16;
  id v17;
  id v18;
  id v19;
  unint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t IntegerValue;
  void *v29;
  void *v30;
  id v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  NSObject *v37;
  id v38;
  uint64_t v39;
  id v40;
  id v41;
  id v42;
  id v43;
  uint8_t buf[4];
  const char *v45;
  __int16 v46;
  int v47;
  __int16 v48;
  id v49;
  __int16 v50;
  id v51;
  __int16 v52;
  id v53;
  __int16 v54;
  id v55;

  v43 = a1;
  v42 = a2;
  v41 = a3;
  v16 = a4;
  v17 = a5;
  v18 = a6;
  v19 = 0;
  v20 = 0;
  v39 = (a9 ^ 1u) + a8;
  v40 = a7;
  v38 = v18;
  while (1)
  {
    v21 = v19;
    v22 = objc_autoreleasePoolPush();
    v19 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%@ %lu"), v40, v20);

    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "objectForKeyedSubscript:", v16));
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "objectForKeyedSubscript:", v17));
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "objectForKeyedSubscript:", v18));
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "objectForKeyedSubscript:", v19));

    if (v26)
      break;
LABEL_13:
    objc_autoreleasePoolPop(v22);
    if (v39 == ++v20)
      goto LABEL_14;
  }
  v27 = sub_100025990(v43, v16, v17, v18, v19);
  if (v27)
  {
    IntegerValue = IOReportSimpleGetIntegerValue(v27, 0);
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "fieldForKey:", v41));
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "repeatableValues"));

    v31 = objc_msgSend(v30, "count");
    if ((a9 & 1) != 0)
    {
      if (!v31)
      {
        v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "fieldForKey:", v41));
        objc_msgSend(v32, "addRepeatableUInt64Value:", 0);

        v33 = v42;
        v34 = v41;
        v18 = v38;
LABEL_11:
        v35 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "fieldForKey:", v34));
        objc_msgSend(v35, "addRepeatableUInt64Value:", IntegerValue);
        goto LABEL_12;
      }
    }
    else if (!v31)
    {
LABEL_10:
      v34 = v41;
      v33 = v42;
      goto LABEL_11;
    }
    if ((unint64_t)objc_msgSend(v30, "count") > v20)
    {
      v35 = objc_msgSend(objc_alloc((Class)NSNumber), "initWithUnsignedLongLong:", IntegerValue);
      objc_msgSend(v30, "replaceObjectAtIndex:withObject:", v20, v35);
LABEL_12:

      goto LABEL_13;
    }
    goto LABEL_10;
  }
  v36 = WALogCategoryDefaultHandle();
  v37 = objc_claimAutoreleasedReturnValue(v36);
  if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136447490;
    v45 = "_Bool fillUInt64ArrayFromAllKeysSimple(NSDictionary * _Nonnull __strong, WAMessageAWD * _Nullable __strong, NS"
          "String * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __"
          "strong, NSString * _Nonnull __strong, NSUInteger, _Bool)";
    v46 = 1024;
    v47 = 428;
    v48 = 2112;
    v49 = v16;
    v50 = 2112;
    v51 = v17;
    v52 = 2112;
    v53 = v18;
    v54 = 2112;
    v55 = v19;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to find %@ %@ %@ %@", buf, 0x3Au);
  }

  objc_autoreleasePoolPop(v22);
LABEL_14:

}

void sub_100028DCC(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  int IntegerValue;
  int v17;
  NSObject *v18;
  id v19;
  id v20;
  NSObject *v21;
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  id v27;
  __int16 v28;
  const __CFString *v29;
  __int16 v30;
  const __CFString *v31;
  __int16 v32;
  id v33;

  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = a1;
  v14 = sub_100025990(v13, v11, CFSTR("Slice 0"), CFSTR("OMI Counters"), v12);
  v15 = sub_100025990(v13, v11, CFSTR("Slice 1"), CFSTR("OMI Counters"), v12);

  if (!v14)
  {
    v19 = WALogCategoryDefaultHandle();
    v18 = objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v22 = 136447490;
      v23 = "_Bool sum2GroupsUInt32FieldFromSimple(NSDictionary * _Nonnull __strong, WAMessageAWD * _Nullable __strong, N"
            "SString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull"
            " __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong)";
      v24 = 1024;
      v25 = 172;
      v26 = 2112;
      v27 = v11;
      v28 = 2112;
      v29 = CFSTR("Slice 0");
      v30 = 2112;
      v31 = CFSTR("OMI Counters");
      v32 = 2112;
      v33 = v12;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to find %@ %@ %@ %@", (uint8_t *)&v22, 0x3Au);
    }
    goto LABEL_4;
  }
  if (v15)
  {
    IntegerValue = IOReportSimpleGetIntegerValue(v14, 0);
    v17 = IOReportSimpleGetIntegerValue(v15, 0);
    v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "fieldForKey:", v10));
    -[NSObject setUint32Value:](v18, "setUint32Value:", (v17 + IntegerValue));
LABEL_4:

    goto LABEL_5;
  }
  v20 = WALogCategoryDefaultHandle();
  v21 = objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    v22 = 136447490;
    v23 = "_Bool sum2GroupsUInt32FieldFromSimple(NSDictionary * _Nonnull __strong, WAMessageAWD * _Nullable __strong, NSS"
          "tring * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __s"
          "trong, NSString * _Nonnull __strong, NSString * _Nonnull __strong)";
    v24 = 1024;
    v25 = 173;
    v26 = 2112;
    v27 = v11;
    v28 = 2112;
    v29 = CFSTR("Slice 1");
    v30 = 2112;
    v31 = CFSTR("OMI Counters");
    v32 = 2112;
    v33 = v12;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to find %@ %@ %@ %@", (uint8_t *)&v22, 0x3Au);
  }

LABEL_5:
}

void sub_100029034(void *a1, void *a2, void *a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8)
{
  id v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  _BOOL4 v22;
  void *v23;
  void *v24;
  _BOOL4 v25;
  void *v26;
  void *v27;
  void *v28;
  _BOOL4 v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t IntegerValue;
  uint64_t v43;
  int v44;
  id v45;
  NSObject *v46;
  NSObject *v47;
  id v48;
  id v49;
  NSObject *v50;
  id v51;
  const char *v52;
  id v53;
  id v54;
  NSObject *v55;
  uint32_t v56;
  id v57;
  NSObject *obj;
  id v60;
  id v61;
  id v62;
  id v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  id location;
  uint8_t buf[4];
  const char *v70;
  __int16 v71;
  int v72;
  __int16 v73;
  id v74;
  __int16 v75;
  const __CFString *v76;
  __int16 v77;
  id v78;
  __int16 v79;
  void *v80;
  _BYTE v81[128];

  v14 = a1;
  v60 = a2;
  objc_initWeak(&location, a3);
  v61 = a5;
  v62 = a6;
  v15 = a7;
  v16 = a8;
  v63 = objc_loadWeakRetained(&location);
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKeyedSubscript:", v15));
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectForKeyedSubscript:", CFSTR("Slice 0")));
  LODWORD(a6) = v18 == 0;

  if ((_DWORD)a6)
  {
    v51 = WALogCategoryDefaultHandle();
    v50 = objc_claimAutoreleasedReturnValue(v51);
    if (!os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
      goto LABEL_24;
    *(_DWORD *)buf = 136446978;
    v70 = "_Bool sum2GroupsHistogramFieldFromAllKeysSimple(NSDictionary * _Nonnull __strong, WAMessageAWD * _Nullable __s"
          "trong, __weak id<WAIOReporterPopulatorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, N"
          "SString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull _"
          "_strong, NSString * _Nonnull __strong)";
    v71 = 1024;
    v72 = 191;
    v73 = 2112;
    v74 = v15;
    v75 = 2112;
    v76 = CFSTR("Slice 0");
    v52 = "%{public}s::%d:Failed to find %@ %@";
    goto LABEL_31;
  }
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKeyedSubscript:", v15));
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectForKeyedSubscript:", CFSTR("Slice 0")));
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "objectForKeyedSubscript:", v16));
  v22 = v21 == 0;

  if (v22)
  {
    v53 = WALogCategoryDefaultHandle();
    v50 = objc_claimAutoreleasedReturnValue(v53);
    if (!os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
      goto LABEL_24;
    *(_DWORD *)buf = 136447234;
    v70 = "_Bool sum2GroupsHistogramFieldFromAllKeysSimple(NSDictionary * _Nonnull __strong, WAMessageAWD * _Nullable __s"
          "trong, __weak id<WAIOReporterPopulatorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, N"
          "SString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull _"
          "_strong, NSString * _Nonnull __strong)";
    v71 = 1024;
    v72 = 192;
    v73 = 2112;
    v74 = v15;
    v75 = 2112;
    v76 = CFSTR("Slice 0");
    v77 = 2112;
    v78 = v16;
    v52 = "%{public}s::%d:Failed to find %@ %@ %@";
    goto LABEL_34;
  }
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKeyedSubscript:", v15));
  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "objectForKeyedSubscript:", CFSTR("Slice 1")));
  v25 = v24 == 0;

  if (v25)
  {
    v54 = WALogCategoryDefaultHandle();
    v50 = objc_claimAutoreleasedReturnValue(v54);
    if (!os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
      goto LABEL_24;
    *(_DWORD *)buf = 136446978;
    v70 = "_Bool sum2GroupsHistogramFieldFromAllKeysSimple(NSDictionary * _Nonnull __strong, WAMessageAWD * _Nullable __s"
          "trong, __weak id<WAIOReporterPopulatorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, N"
          "SString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull _"
          "_strong, NSString * _Nonnull __strong)";
    v71 = 1024;
    v72 = 193;
    v73 = 2112;
    v74 = v15;
    v75 = 2112;
    v76 = CFSTR("Slice 1");
    v52 = "%{public}s::%d:Failed to find %@ %@";
LABEL_31:
    v55 = v50;
    v56 = 38;
LABEL_35:
    _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_ERROR, v52, buf, v56);
    goto LABEL_24;
  }
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKeyedSubscript:", v15));
  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "objectForKeyedSubscript:", CFSTR("Slice 1")));
  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "objectForKeyedSubscript:", v16));
  v29 = v28 == 0;

  if (v29)
  {
    v57 = WALogCategoryDefaultHandle();
    v50 = objc_claimAutoreleasedReturnValue(v57);
    if (!os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
      goto LABEL_24;
    *(_DWORD *)buf = 136447234;
    v70 = "_Bool sum2GroupsHistogramFieldFromAllKeysSimple(NSDictionary * _Nonnull __strong, WAMessageAWD * _Nullable __s"
          "trong, __weak id<WAIOReporterPopulatorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull __strong, N"
          "SString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull _"
          "_strong, NSString * _Nonnull __strong)";
    v71 = 1024;
    v72 = 194;
    v73 = 2112;
    v74 = v15;
    v75 = 2112;
    v76 = CFSTR("Slice 1");
    v77 = 2112;
    v78 = v16;
    v52 = "%{public}s::%d:Failed to find %@ %@ %@";
LABEL_34:
    v55 = v50;
    v56 = 48;
    goto LABEL_35;
  }
  v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKeyedSubscript:", v15));
  v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "objectForKeyedSubscript:", CFSTR("Slice 0")));
  v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "objectForKeyedSubscript:", v16));
  v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "allKeys"));

  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  obj = v33;
  v34 = -[NSObject countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v64, v81, 16);
  if (!v34)
    goto LABEL_23;
  v35 = *(_QWORD *)v65;
  do
  {
    v36 = 0;
    do
    {
      if (*(_QWORD *)v65 != v35)
        objc_enumerationMutation(obj);
      v37 = *(void **)(*((_QWORD *)&v64 + 1) + 8 * (_QWORD)v36);
      v38 = objc_autoreleasePoolPush();
      v39 = sub_100025990(v14, v15, CFSTR("Slice 0"), v16, v37);
      v40 = sub_100025990(v14, v15, CFSTR("Slice 1"), v16, v37);
      if (v39)
      {
        v41 = v40;
        if (v40)
        {
          IntegerValue = IOReportSimpleGetIntegerValue(v39, 0);
          v43 = IOReportSimpleGetIntegerValue(v41, 0);
          sub_100026A30(v60, v63, a4, v61, v37, v43 + IntegerValue, v62);
          v44 = 1;
          goto LABEL_13;
        }
        v48 = WALogCategoryDefaultHandle();
        v46 = objc_claimAutoreleasedReturnValue(v48);
        if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136447490;
          v70 = "_Bool sum2GroupsHistogramFieldFromAllKeysSimple(NSDictionary * _Nonnull __strong, WAMessageAWD * _Nullab"
                "le __strong, __weak id<WAIOReporterPopulatorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull"
                " __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSS"
                "tring * _Nonnull __strong, NSString * _Nonnull __strong)";
          v71 = 1024;
          v72 = 204;
          v73 = 2112;
          v74 = v15;
          v75 = 2112;
          v76 = CFSTR("Slice 1");
          v77 = 2112;
          v78 = v16;
          v79 = 2112;
          v80 = v37;
          v47 = v46;
          goto LABEL_20;
        }
      }
      else
      {
        v45 = WALogCategoryDefaultHandle();
        v46 = objc_claimAutoreleasedReturnValue(v45);
        if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136447490;
          v70 = "_Bool sum2GroupsHistogramFieldFromAllKeysSimple(NSDictionary * _Nonnull __strong, WAMessageAWD * _Nullab"
                "le __strong, __weak id<WAIOReporterPopulatorMessageDelegate> _Nullable, WAGroupType, NSString * _Nonnull"
                " __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSS"
                "tring * _Nonnull __strong, NSString * _Nonnull __strong)";
          v71 = 1024;
          v72 = 203;
          v73 = 2112;
          v74 = v15;
          v75 = 2112;
          v76 = CFSTR("Slice 0");
          v77 = 2112;
          v78 = v16;
          v79 = 2112;
          v80 = v37;
          v47 = v46;
LABEL_20:
          _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to find %@ %@ %@ %@", buf, 0x3Au);
        }
      }

      v44 = 0;
LABEL_13:
      objc_autoreleasePoolPop(v38);
      if (!v44)
        goto LABEL_23;
      v36 = (char *)v36 + 1;
    }
    while (v34 != v36);
    v49 = -[NSObject countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v64, v81, 16);
    v34 = v49;
  }
  while (v49);
LABEL_23:

  v50 = obj;
LABEL_24:

  objc_destroyWeak(&location);
}

void sub_1000296CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL sub_100029700(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t IntegerValue;
  void *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  void *v31;
  id v32;
  void *v33;
  id v35;
  NSObject *v36;
  void *v37;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  int v41;
  __int16 v42;
  id v43;
  __int16 v44;
  id v45;
  __int16 v46;
  id v47;
  __int16 v48;
  id v49;

  v13 = a1;
  v14 = a2;
  v15 = a3;
  v16 = a4;
  v17 = a5;
  v18 = a6;
  v19 = a7;
  v20 = objc_autoreleasePoolPush();
  v21 = sub_100025990(v13, v16, v17, v18, v19);
  v22 = v21;
  if (v21)
  {
    IntegerValue = IOReportSimpleGetIntegerValue(v21, 0);
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "fieldForKey:", v15));
    v37 = v22;
    v25 = v19;
    v26 = v18;
    v27 = v17;
    v28 = v16;
    v29 = v15;
    v30 = v14;
    v31 = v20;
    v32 = v13;
    v33 = v24;
    objc_msgSend(v24, "setInt32Value:", IntegerValue);

    v13 = v32;
    v20 = v31;
    v14 = v30;
    v15 = v29;
    v16 = v28;
    v17 = v27;
    v18 = v26;
    v19 = v25;
    v22 = v37;
  }
  else
  {
    v35 = WALogCategoryDefaultHandle();
    v36 = objc_claimAutoreleasedReturnValue(v35);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136447490;
      v39 = "_Bool fillInt32FieldFromSimple(NSDictionary * _Nonnull __strong, WAMessageAWD * _Nullable __strong, NSString"
            " * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __stro"
            "ng, NSString * _Nonnull __strong)";
      v40 = 1024;
      v41 = 262;
      v42 = 2112;
      v43 = v16;
      v44 = 2112;
      v45 = v17;
      v46 = 2112;
      v47 = v18;
      v48 = 2112;
      v49 = v19;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to find %@ %@ %@ %@", buf, 0x3Au);
    }

  }
  objc_autoreleasePoolPop(v20);

  return v22 != 0;
}

void sub_10002991C(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  void *v23;
  int Count;
  int v25;
  uint64_t v26;
  uint64_t NameForIndex;
  void *v28;
  uint64_t Residency;
  uint64_t Unit;
  unint64_t v31;
  void *v32;
  id v33;
  NSObject *v34;
  void *v35;
  void *v36;
  void *v37;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  int v41;
  __int16 v42;
  id v43;
  __int16 v44;
  id v45;
  __int16 v46;
  id v47;
  __int16 v48;
  id v49;

  v15 = a2;
  v16 = a3;
  v17 = a4;
  v18 = a5;
  v19 = a6;
  v20 = a7;
  v21 = a8;
  v22 = sub_100025990(a1, v17, v18, v19, v20);
  v36 = v18;
  v37 = v17;
  v35 = v19;
  if (v22)
  {
    v23 = v22;
    Count = IOReportStateGetCount(v22);
    if (Count >= 1)
    {
      v25 = Count;
      v26 = 0;
      do
      {
        NameForIndex = IOReportStateGetNameForIndex(v23, v26);
        v28 = (void *)objc_claimAutoreleasedReturnValue(NameForIndex);
        if (objc_msgSend(v28, "containsString:", v21))
        {
          Residency = IOReportStateGetResidency(v23, v26);
          Unit = IOReportChannelGetUnit(v23);
          v31 = (unint64_t)IOReportScaleValue(Residency, Unit, 0x100007C00000000);
          v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "fieldForKey:", v16));
          objc_msgSend(v32, "setUint64Value:", v31);

        }
        v26 = (v26 + 1);
      }
      while (v25 != (_DWORD)v26);
    }
  }
  else
  {
    v33 = WALogCategoryDefaultHandle();
    v34 = objc_claimAutoreleasedReturnValue(v33);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136447490;
      v39 = "_Bool fillUInt64FieldFromState(NSDictionary * _Nonnull __strong, WAMessageAWD * _Nullable __strong, NSString"
            " * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __strong, NSString * _Nonnull __stro"
            "ng, NSString * _Nonnull __strong, NSString * _Nonnull __strong)";
      v40 = 1024;
      v41 = 323;
      v42 = 2112;
      v43 = v17;
      v44 = 2112;
      v45 = v18;
      v46 = 2112;
      v47 = v19;
      v48 = 2112;
      v49 = v20;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to find %@ %@ %@ %@", buf, 0x3Au);
    }

  }
}

void sub_10002A464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_10002AB14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  void *v34;

  if (a33 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a27 < 0)
    operator delete(a22);

  _Unwind_Resume(a1);
}

void sub_10002ACE4(_Unwind_Exception *exception_object)
{
  void *v1;
  int v2;

  if (v2 < 0)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_10002AD04()
{
  sub_10002AD10();
}

void sub_10002AD10()
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_10002AD58(exception);
}

void sub_10002AD44(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_10002AD58(std::logic_error *a1)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, "basic_string");
  return result;
}

uint64_t sub_10002AD84(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    sub_10002AD04();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

void sub_10002AE78(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_1000ECFA0;
  qword_1000ECFA0 = (uint64_t)v1;

}

uint64_t sub_10002B09C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10002B0AC(uint64_t a1)
{

}

void sub_10002B0B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_getInfraApple80211"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_10002B4D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10002BAD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10002BF2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10002BFD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  _Unwind_Resume(exception_object);
}

void sub_10002C01C(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void sub_10002C1D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10002C3A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10002C570(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10002C73C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10002C8DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10002CD6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_10002D09C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10002D1D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10002D3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_10002D7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  void *v28;

  _Block_object_dispose(&a17, 8);

  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10002D844(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10002D854(uint64_t a1)
{

}

id sub_10002D85C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_storeAttemptedRecovery:reason:fromSSID:fromBSSID:commandResult:", CFSTR("CHIP_RESET_TRIGGER"), CFSTR("DPSQuickTriggeredChipReset"), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), *(unsigned int *)(a1 + 56));
}

void sub_10002DC50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  void *v30;
  void *v31;

  _Block_object_dispose(&a19, 8);

  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

id sub_10002DCB0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_storeAttemptedRecovery:reason:fromSSID:fromBSSID:commandResult:", CFSTR("CHIP_RESET_TRIGGER"), *(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), *(unsigned int *)(a1 + 64));
}

void sub_10002E09C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  void *v30;
  void *v31;

  _Block_object_dispose(&a19, 8);

  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

id sub_10002E0FC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_storeAttemptedRecovery:reason:fromSSID:fromBSSID:commandResult:", CFSTR("REASSOC_CC_TRIGGER"), *(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), *(unsigned int *)(a1 + 64));
}

void sub_10002E40C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10002E944(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_10002EDD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_10002F1D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10002F3F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10002F7A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10002FAB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100030100(id a1)
{
  qword_1000ECFD0 = (uint64_t)malloc_type_malloc(0x3988uLL, 0x1000040C6519F05uLL);
}

void sub_100030688(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000307CC(id a1)
{
  DatapathMetricStream *v1;
  void *v2;

  v1 = objc_alloc_init(DatapathMetricStream);
  v2 = (void *)qword_1000ECFE8;
  qword_1000ECFE8 = (uint64_t)v1;

}

void sub_10003111C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10003114C(uint64_t a1)
{
  id v2;
  id v3;
  NSObject *v4;
  id v5;
  NSObject *v6;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
  {
    v2 = objc_msgSend(*(id *)(a1 + 32), "megawifiprofile_diagnostic_metrics_enabled");
    v3 = WALogCategoryDefaultHandle();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 136446722;
      v9 = "-[DatapathMetricStream observeValueForKeyPath:ofObject:change:context:]_block_invoke";
      v10 = 1024;
      v11 = 146;
      v12 = 1024;
      v13 = (int)v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Disabling and reenabling timer, to ensure new kMegaProfileDiagnosticMetricsPeriod_ms takes immediate effect, curr state %d, disabling", (uint8_t *)&v8, 0x18u);
    }

    objc_msgSend(*(id *)(a1 + 32), "setMegawifiprofile_diagnostic_metrics_enabled:", 0);
    objc_msgSend(*(id *)(a1 + 32), "updateTimerConfiguration");
    v5 = WALogCategoryDefaultHandle();
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 136446722;
      v9 = "-[DatapathMetricStream observeValueForKeyPath:ofObject:change:context:]_block_invoke";
      v10 = 1024;
      v11 = 151;
      v12 = 1024;
      v13 = (int)v2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Applying previous state %d", (uint8_t *)&v8, 0x18u);
    }

    objc_msgSend(*(id *)(a1 + 32), "setMegawifiprofile_diagnostic_metrics_enabled:", v2);
  }
  return objc_msgSend(*(id *)(a1 + 32), "updateTimerConfiguration");
}

void sub_100031588(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  NSObject *v23;
  void *v24;
  void *v25;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  id v31;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = WALogCategoryDefaultHandle();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v27 = "-[DatapathMetricStream fetchMetrics]_block_invoke";
      v28 = 1024;
      v29 = 201;
      v30 = 2112;
      v31 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}s::%d:DatapathMetricGetter get message error: %@", buf, 0x1Cu);
    }
  }
  else
  {
    v8 = v5;
    v9 = objc_autoreleasePoolPush();
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pbConverter"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "instantiateAWDProtobufAndPopulateValues:", v8));

    objc_msgSend(*(id *)(a1 + 32), "streamPBCodeable:additionalDictionaryItems:", v11, 0);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "data"));
    v13 = objc_msgSend(v12, "length");

    if ((unint64_t)v13 > 0x2800)
    {
      v22 = WALogCategoryDefaultHandle();
      v23 = objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "data"));
        *(_DWORD *)buf = 136446722;
        v27 = "-[DatapathMetricStream fetchMetrics]_block_invoke";
        v28 = 1024;
        v29 = 196;
        v30 = 2048;
        v31 = objc_msgSend(v24, "length");
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to cache lastPB - len %lu", buf, 0x1Cu);

      }
    }
    else
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lastPBLock"));
      objc_msgSend(v14, "lock");

      v15 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lastPB")));
      v16 = objc_msgSend(v15, "mutableBytes");
      v25 = v9;
      v17 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "data")));
      v18 = objc_msgSend(v17, "bytes");
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "data"));
      memcpy(v16, v18, (size_t)objc_msgSend(v19, "length"));

      v9 = v25;
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "data"));
      objc_msgSend(*(id *)(a1 + 32), "setLastPBLength:", objc_msgSend(v20, "length"));

      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lastPBLock"));
      objc_msgSend(v21, "unlock");

    }
    objc_autoreleasePoolPop(v9);
  }

}

id sub_10003201C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "fetchMetrics");
}

void sub_100032DCC(id a1)
{
  ManagedConfiguration *v1;
  void *v2;

  if (objc_opt_class(MCProfileConnection))
  {
    v1 = objc_alloc_init(ManagedConfiguration);
    v2 = (void *)qword_1000ECFF8;
    qword_1000ECFF8 = (uint64_t)v1;

  }
}

id sub_1000338CC(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "startMonitoring");
  return objc_msgSend(*(id *)(a1 + 32), "MCSettingsDidChange:", 0);
}

id sub_100033CF8(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "profileChangedCallback:", a2);
}

id sub_100033D04(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  NSObject *v6;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  uint64_t v13;

  v5 = WALogCategoryDefaultHandle();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 136446722;
    v9 = "void __DarwinCenterChangeNotification(CFNotificationCenterRef, void *, CFStringRef, const void *, CFDictionaryRef)";
    v10 = 1024;
    v11 = 302;
    v12 = 2112;
    v13 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:__DarwinCenterChangeNotification %@", (uint8_t *)&v8, 0x1Cu);
  }

  return objc_msgSend(a2, "profileChangedCallback:", 0);
}

void sub_100033DE0(id a1, OS_xpc_object *a2)
{
  OS_xpc_object *v2;
  id v3;
  NSObject *v4;
  xpc_object_t value;
  void *v7;
  void *v8;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;

  v2 = a2;
  v3 = WALogCategoryDefaultHandle();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v9 = 136446466;
    v10 = "-[ManagedConfiguration startMonitoring]_block_invoke";
    v11 = 1024;
    v12 = 275;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Woken up by notifyd.\n", (uint8_t *)&v9, 0x12u);
  }

  if (xpc_get_type(v2) == (xpc_type_t)&_xpc_type_dictionary && &_xpc_type_error != &_xpc_type_dictionary)
  {
    value = xpc_dictionary_get_value(v2, _xpc_event_key_name);
    v7 = (void *)objc_claimAutoreleasedReturnValue(value);
    v8 = v7;
    if (v7 && xpc_get_type(v7) == (xpc_type_t)&_xpc_type_string)
      xpc_string_get_string_ptr(v8);

  }
}

void sub_100033F74(uint64_t a1)
{
  void *v2;
  void *v3;
  unsigned __int8 v4;
  void *v5;
  id v6;
  __CFString *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  NSObject *v22;
  void *v23;
  id v24;
  NSObject *v25;
  id v26;
  const __CFString *v27;
  id v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  NSObject *v34;
  _BOOL4 v35;
  id v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  id v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  void *context;
  id v47;
  _QWORD v48[4];
  _QWORD v49[4];
  uint8_t buf[4];
  const char *v51;
  __int16 v52;
  int v53;
  __int16 v54;
  const __CFString *v55;
  __int16 v56;
  void *v57;

  v2 = objc_autoreleasePoolPush();
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v4 = objc_msgSend(v3, "fileExistsAtPath:", CFSTR("/private/var/Managed Preferences/mobile/com.apple.wifianalyticsd.plist"));

  context = v2;
  if ((v4 & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "setProfileLoaded:", 0);
    v45 = 0;
LABEL_20:
    v5 = 0;
    v7 = 0;
    goto LABEL_21;
  }
  v47 = 0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithContentsOfFile:options:error:](NSData, "dataWithContentsOfFile:options:error:", CFSTR("/private/var/Managed Preferences/mobile/com.apple.wifianalyticsd.plist"), 0, &v47));
  v6 = v47;
  v45 = v6;
  if (!v5)
  {
    v20 = v6;
    v21 = WALogCategoryDefaultHandle();
    v22 = objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "underlyingErrors"));
      *(_DWORD *)buf = 136446978;
      v51 = "-[ManagedConfiguration profileChangedCallback:]_block_invoke";
      v52 = 1024;
      v53 = 325;
      v54 = 2112;
      v55 = CFSTR("/private/var/Managed Preferences/mobile/com.apple.wifianalyticsd.plist");
      v56 = 2112;
      v57 = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Unable to open %@, error %@", buf, 0x26u);

    }
    objc_msgSend(*(id *)(a1 + 32), "setProfileLoaded:", 0);
    goto LABEL_20;
  }
  objc_msgSend(*(id *)(a1 + 32), "setProfileLoaded:", 1);
  v7 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", v5, 0, 0, 0));
  if (!v7)
  {
LABEL_21:
    v19 = 0;
    v17 = 0;
    v43 = 0;
    v44 = 0;
    v11 = 0;
    goto LABEL_22;
  }
  v8 = WALogCategoryDefaultHandle();
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    v51 = "-[ManagedConfiguration profileChangedCallback:]_block_invoke";
    v52 = 1024;
    v53 = 331;
    v54 = 2112;
    v55 = v7;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Found dictionary %@", buf, 0x1Cu);
  }

  v10 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString valueForKey:](v7, "valueForKey:", CFSTR("megawifiprofile_diagnostic_metrics_enabled")));
  v11 = v10;
  if (v10)
    objc_msgSend(*(id *)(a1 + 32), "setMegawifiprofile_diagnostic_metrics_enabled:", objc_msgSend(v10, "BOOLValue"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString valueForKey:](v7, "valueForKey:", CFSTR("megawifiprofile_diagnostic_metrics_period_ms")));
  v13 = v12;
  if (v12)
    objc_msgSend(*(id *)(a1 + 32), "setMegawifiprofile_diagnostic_metrics_period_ms:", objc_msgSend(v12, "unsignedIntValue"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString valueForKey:](v7, "valueForKey:", CFSTR("coredata_diagnostic_metrics_enabled")));
  v15 = v14;
  if (v14)
    objc_msgSend(*(id *)(a1 + 32), "setCoredata_diagnostic_metrics_enabled:", objc_msgSend(v14, "BOOLValue"));
  v43 = v15;
  v16 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString valueForKey:](v7, "valueForKey:", CFSTR("coredata_diagnostic_metrics_enabled")));
  v17 = v16;
  if (v16)
    objc_msgSend(*(id *)(a1 + 32), "setMegawifiprofile_diagnostic_metrics_before_first_assoc:", objc_msgSend(v16, "BOOLValue"));
  v18 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString valueForKey:](v7, "valueForKey:", CFSTR("coredata_diagnostic_metrics_enabled")));
  v19 = v18;
  v44 = v13;
  if (v18)
    objc_msgSend(*(id *)(a1 + 32), "setMegawifiprofile_diagnostic_metrics_while_unassoc:", objc_msgSend(v18, "BOOLValue"));
LABEL_22:
  v24 = WALogCategoryDefaultHandle();
  v25 = objc_claimAutoreleasedReturnValue(v24);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    v51 = "-[ManagedConfiguration profileChangedCallback:]_block_invoke";
    v52 = 1024;
    v53 = 361;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Exiting", buf, 0x12u);
  }

  v26 = objc_msgSend(v11, "isEqualToNumber:", &off_1000E00B0);
  if ((v26 & 1) != 0)
  {
    v27 = CFSTR("Mega Profile Installed");
  }
  else if (objc_msgSend(v11, "isEqualToNumber:", &off_1000E00C8))
  {
    v27 = CFSTR("No Logging Profile Installed");
  }
  else
  {
    v27 = CFSTR("No Profile");
  }
  v28 = objc_alloc_init((Class)NSMutableDictionary);
  v48[0] = WADeviceAnalyticsDiagnosticStateInfo[1];
  v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
  v49[0] = v29;
  v49[1] = v27;
  v48[1] = CFSTR("desc");
  v48[2] = CFSTR("enabled");
  v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v26));
  v48[3] = CFSTR("name");
  v49[2] = v30;
  v49[3] = CFSTR("WiFi Profile State");
  v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v49, v48, 4));
  objc_msgSend(v28, "addEntriesFromDictionary:", v31);

  v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dbDelegate"));
  objc_msgSend(v32, "processMetricDictOffEngine:data:", CFSTR("com.apple.wifi.DiagnosticState"), v28);

  LODWORD(v32) = objc_msgSend(*(id *)(a1 + 32), "profileLoaded");
  v33 = WALogCategoryDefaultHandle();
  v34 = objc_claimAutoreleasedReturnValue(v33);
  v35 = os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v32)
  {
    if (v35)
    {
      *(_DWORD *)buf = 136446722;
      v51 = "-[ManagedConfiguration profileChangedCallback:]_block_invoke";
      v52 = 1024;
      v53 = 387;
      v54 = 2112;
      v55 = v7;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:We think profileLoaded, copying prefs %@", buf, 0x1Cu);
    }

    v36 = -[__CFString copy](v7, "copy");
    v37 = *(_QWORD *)(a1 + 32);
    v38 = *(void **)(v37 + 56);
    *(_QWORD *)(v37 + 56) = v36;

  }
  else
  {
    if (v35)
    {
      *(_DWORD *)buf = 136446466;
      v51 = "-[ManagedConfiguration profileChangedCallback:]_block_invoke";
      v52 = 1024;
      v53 = 390;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:profileLoaded false, assigning defaults", buf, 0x12u);
    }

    v39 = *(_QWORD *)(a1 + 32);
    v40 = *(void **)(v39 + 56);
    *(_QWORD *)(v39 + 56) = 0;

    v41 = +[WAUtil isWiFiFragmentSamplingEnabled](WAUtil, "isWiFiFragmentSamplingEnabled");
    if ((_DWORD)v41)
      v42 = 600000;
    else
      v42 = 5000;
    objc_msgSend(*(id *)(a1 + 32), "setMegawifiprofile_diagnostic_metrics_period_ms:", v42);
    objc_msgSend(*(id *)(a1 + 32), "setMegawifiprofile_diagnostic_metrics_enabled:", v41);
    objc_msgSend(*(id *)(a1 + 32), "setCoredata_diagnostic_metrics_enabled:", v41);
    objc_msgSend(*(id *)(a1 + 32), "setMegawifiprofile_diagnostic_metrics_before_first_assoc:", 0);
    objc_msgSend(*(id *)(a1 + 32), "setMegawifiprofile_diagnostic_metrics_while_unassoc:", 1);
  }

  objc_autoreleasePoolPop(context);
}

void sub_10003533C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10003535C(uint64_t a1)
{
  void *v2;
  void *v3;
  char *v5;
  _Unwind_Exception *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v2 = off_1000ED008;
  v10 = off_1000ED008;
  if (!off_1000ED008)
  {
    v3 = (void *)sub_10003C298();
    v2 = dlsym(v3, "WiFiManagerClientCreate");
    v8[3] = (uint64_t)v2;
    off_1000ED008 = v2;
  }
  _Block_object_dispose(&v7, 8);
  if (!v2)
  {
    v5 = dlerror();
    v6 = (_Unwind_Exception *)abort_report_np("%s", v5);
    _Block_object_dispose(&v7, 8);
    _Unwind_Resume(v6);
  }
  return ((uint64_t (*)(uint64_t, _QWORD))v2)(a1, 0);
}

uint64_t sub_100035418(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  char *v7;
  _Unwind_Exception *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;

  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v4 = off_1000ED018;
  v12 = off_1000ED018;
  if (!off_1000ED018)
  {
    v5 = (void *)sub_10003C298();
    v4 = dlsym(v5, "WiFiManagerClientScheduleWithRunLoop");
    v10[3] = (uint64_t)v4;
    off_1000ED018 = v4;
  }
  _Block_object_dispose(&v9, 8);
  if (!v4)
  {
    v7 = dlerror();
    v8 = (_Unwind_Exception *)abort_report_np("%s", v7);
    _Block_object_dispose(&v9, 8);
    _Unwind_Resume(v8);
  }
  return ((uint64_t (*)(uint64_t, uint64_t, const __CFString *))v4)(a1, a2, CFSTR("managerClient entering runloop mode"));
}

uint64_t sub_1000354E0(uint64_t a1)
{
  void *v2;
  void *v3;
  char *v5;
  _Unwind_Exception *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v2 = off_1000ED020;
  v10 = off_1000ED020;
  if (!off_1000ED020)
  {
    v3 = (void *)sub_10003C298();
    v2 = dlsym(v3, "WiFiManagerClientCopyDevices");
    v8[3] = (uint64_t)v2;
    off_1000ED020 = v2;
  }
  _Block_object_dispose(&v7, 8);
  if (!v2)
  {
    v5 = dlerror();
    v6 = (_Unwind_Exception *)abort_report_np("%s", v5);
    _Block_object_dispose(&v7, 8);
    _Unwind_Resume(v6);
  }
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

uint64_t sub_100035598(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  char *v7;
  _Unwind_Exception *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;

  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v4 = off_1000ED030;
  v12 = off_1000ED030;
  if (!off_1000ED030)
  {
    v5 = (void *)sub_10003C298();
    v4 = dlsym(v5, "WiFiManagerClientUnscheduleFromRunLoop");
    v10[3] = (uint64_t)v4;
    off_1000ED030 = v4;
  }
  _Block_object_dispose(&v9, 8);
  if (!v4)
  {
    v7 = dlerror();
    v8 = (_Unwind_Exception *)abort_report_np("%s", v7);
    _Block_object_dispose(&v9, 8);
    _Unwind_Resume(v8);
  }
  return ((uint64_t (*)(uint64_t, uint64_t, const __CFString *))v4)(a1, a2, CFSTR("managerClient exiting runloop mode"));
}

void sub_100035BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10003ACF0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 buf)
{
  uint64_t v17;
  id v18;
  id v19;
  NSObject *v20;
  WiFiStallDetect *v21;
  void *v22;
  id v23;
  NSObject *v24;

  if (a2)
  {
    if (a2 == 2)
    {
      v18 = objc_begin_catch(a1);
      v19 = WALogCategoryDefaultHandle();
      v20 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136446466;
        *(_QWORD *)((char *)&buf + 4) = "-[DPSQuickRecoveryRecommendationEngine recommendReset:currentSample:acList:qDpsS"
                                        "tat:chipNumber:dpsSnapshot:originalCCA:]";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 747;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "%{public}s::%d:ML modelc files not found in frameworks.. checking executable path", (uint8_t *)&buf, 0x12u);
      }

      v21 = objc_alloc_init(WiFiStallDetect);
      v22 = *(void **)(v17 + 16);
      *(_QWORD *)(v17 + 16) = v21;

      if (!*(_QWORD *)(v17 + 16))
      {
        v23 = WALogCategoryDefaultHandle();
        v24 = objc_claimAutoreleasedReturnValue(v23);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 136446466;
          *(_QWORD *)((char *)&buf + 4) = "-[DPSQuickRecoveryRecommendationEngine recommendReset:currentSample:acList:qDp"
                                          "sStat:chipNumber:dpsSnapshot:originalCCA:]";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 749;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%{public}s::%d:Error WiFiStallDetect init", (uint8_t *)&buf, 0x12u);
        }

      }
      objc_end_catch();
      JUMPOUT(0x10003A70CLL);
    }
    objc_begin_catch(a1);
    if (*(_QWORD *)(v17 + 16))
      objc_exception_rethrow();
    JUMPOUT(0x10003AC30);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10003C298()
{
  uint64_t v0;
  char *v1;
  char *v3;
  __int128 v4;
  uint64_t v5;

  v3 = 0;
  if (!qword_1000ED010)
  {
    v4 = off_1000CD020;
    v5 = 0;
    qword_1000ED010 = _sl_dlopen(&v4, &v3);
    v1 = v3;
    v0 = qword_1000ED010;
    if (qword_1000ED010)
    {
      if (!v3)
        return v0;
    }
    else
    {
      v1 = (char *)abort_report_np("%s", v3);
    }
    free(v1);
    return v0;
  }
  return qword_1000ED010;
}

uint64_t CCSubmitLogToCrashTracer(const char *a1, int a2)
{
  const __CFUUID *v4;
  CFStringRef v5;
  CFTypeRef v6;
  NSString *v7;
  uint64_t (*v8)(const __CFString *, _QWORD);
  const void *v9;
  uint64_t (*v10)(const __CFString *, _QWORD);
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t (*v14)(const __CFString *, _QWORD);
  void *v15;
  const void *v16;
  id v17;
  id v18;
  const void *v19;
  void *v20;
  const __CFString *v21;
  const __CFString *v22;
  const __CFString *v23;
  const __CFString *v24;
  const __CFString *v25;
  const __CFString *v26;
  NSString *v27;
  NSString *v29;
  CFTypeRef v30;
  _QWORD v31[6];
  int v32;

  if (!a1 || !sub_10003C674())
    return 0;
  v4 = CFUUIDCreate(kCFAllocatorDefault);
  v5 = CFUUIDCreateString(kCFAllocatorDefault, v4);
  v6 = (id)CFMakeCollectable(v5);
  CFRelease(v4);
  v7 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s"), a1);
  v8 = (uint64_t (*)(const __CFString *, _QWORD))off_1000ED050;
  v29 = v7;
  v30 = v6;
  if (off_1000ED050
    || (v8 = (uint64_t (*)(const __CFString *, _QWORD))sub_10003C674(), (off_1000ED050 = v8) != 0))
  {
    v9 = (const void *)v8(CFSTR("InverseDeviceID"), 0);
    v10 = (uint64_t (*)(const __CFString *, _QWORD))off_1000ED050;
    if (off_1000ED050)
      goto LABEL_11;
  }
  else
  {
    v9 = 0;
  }
  v12 = sub_10003C674();
  off_1000ED050 = v12;
  if (v12)
  {
    v10 = (uint64_t (*)(const __CFString *, _QWORD))v12;
LABEL_11:
    v13 = (const void *)v10(CFSTR("ProductType"), 0);
    v14 = (uint64_t (*)(const __CFString *, _QWORD))off_1000ED050;
    if (off_1000ED050)
      goto LABEL_16;
    goto LABEL_14;
  }
  v13 = 0;
LABEL_14:
  v15 = sub_10003C674();
  off_1000ED050 = v15;
  if (!v15)
  {
    v16 = 0;
    goto LABEL_17;
  }
  v14 = (uint64_t (*)(const __CFString *, _QWORD))v15;
LABEL_16:
  v16 = (const void *)v14(CFSTR("UniqueDeviceID"), 0);
LABEL_17:
  v17 = objc_alloc_init((Class)NSDateFormatter);
  objc_msgSend(v17, "setDateFormat:", CFSTR("yyyy-MM-dd HH:mm:ss.SSS Z"));
  v18 = objc_msgSend(v17, "stringFromDate:", +[NSDate date](NSDate, "date"));
  v19 = (const void *)_CFCopySystemVersionDictionary();
  v20 = (id)CFMakeCollectable(v19);
  v21 = (const __CFString *)objc_msgSend(v20, "objectForKeyedSubscript:", _kCFSystemVersionProductVersionKey);
  v22 = (const __CFString *)objc_msgSend(v20, "objectForKeyedSubscript:", _kCFSystemVersionProductNameKey);
  v23 = (const __CFString *)objc_msgSend(v20, "objectForKeyedSubscript:", _kCFSystemVersionBuildVersionKey);
  v24 = CFSTR("???");
  if (v22)
    v25 = v22;
  else
    v25 = CFSTR("???");
  if (v21)
    v26 = v21;
  else
    v26 = CFSTR("???");
  if (v23)
    v24 = v23;
  v27 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("\nIncident Identifier:     %@\nCrashReporter Key:       %@\nHardware Model:          %@\nProcess:                 WiFi Firmware\nPath:                    NA\nIdentifier:              WiFi Firmware Trap\nVersion:                 NA\nCode Type:               ARM-32\nRole                     NA\nParent Process:          NA\nCoalition:               NA\n\n\nDate/Time:               %@\nLauch Time:              NA\nOS Version:              %@\nBaseband Version:        NA\nUDID:                    %@\nReport Version:          NA\n"), v30, v9, v13, v18, +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ %@ (%@)"), v25, v26, v24), v16);
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472;
  v31[2] = sub_10003C754;
  v31[3] = &unk_1000CD0F0;
  v31[4] = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@\n%@\n"), v27, v29);
  v31[5] = v27;
  v32 = a2;
  v11 = OSAWriteLogForSubmission(CFSTR("209"), CFSTR("WiFiFWTrap"), 0, 0, v31);
  if (v9)
    CFRelease(v9);
  if (v13)
    CFRelease(v13);
  if (v16)
    CFRelease(v16);
  if (v17)
    CFRelease(v17);
  return v11;
}

void *sub_10003C674()
{
  void *result;
  char *v1;
  const char *v2;
  char v3[1032];
  stat v4;

  result = (void *)qword_1000ED048;
  if (!qword_1000ED048)
  {
    v1 = getenv("DYLD_IMAGE_SUFFIX");
    if (!v1)
    {
      v2 = "/usr/lib/libMobileGestalt.dylib";
      goto LABEL_8;
    }
    strcpy(v3, "/usr/lib/libMobileGestalt.dylib");
    if (strlcat(v3, v1, 0x400uLL) >= 0x400)
      return 0;
    if ((stat(v3, &v4) & 0x80000000) == 0)
    {
      v2 = v3;
LABEL_8:
      result = dlopen(v2, 6);
      qword_1000ED048 = (uint64_t)result;
      if (!result)
        return result;
      return dlsym(result, "MGCopyAnswer");
    }
    result = (void *)qword_1000ED048;
    if (!qword_1000ED048)
      return result;
  }
  return dlsym(result, "MGCopyAnswer");
}

id sub_10003C754(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "writeData:", +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", objc_msgSend(*(id *)(a1 + 32), "UTF8String"), (char *)objc_msgSend(*(id *)(a1 + 40), "length") + *(int *)(a1 + 48)));
}

uint64_t CCSubmitBinaryToCrashTracer(uint64_t result, int a2)
{
  _QWORD v2[5];
  int v3;

  if (result)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_10003C850;
    v2[3] = &unk_1000CD110;
    v2[4] = result;
    v3 = a2;
    return OSAWriteLogForSubmission(CFSTR("221"), CFSTR("WiFiFWTrapBinary"), 0, 0, v2);
  }
  return result;
}

id sub_10003C850(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "writeData:", +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", *(_QWORD *)(a1 + 32), *(int *)(a1 + 40)));
}

uint64_t CCSubmitLqmMetricsTLVBlockToCrashTracer(uint64_t result, int a2)
{
  _QWORD v2[5];
  int v3;

  if (result)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_10003C928;
    v2[3] = &unk_1000CD110;
    v2[4] = result;
    v3 = a2;
    return OSAWriteLogForSubmission(CFSTR("221"), CFSTR("WiFiLQMMetrics"), 0, 0, v2);
  }
  return result;
}

id sub_10003C928(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "writeData:", +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", *(_QWORD *)(a1 + 32), *(int *)(a1 + 40)));
}

void sub_10003C9D8(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_1000ED058;
  qword_1000ED058 = (uint64_t)v1;

}

void sub_10003FA28(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  const void *v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  char *v13;
  _Unwind_Exception *v14;
  uint8_t buf[8];
  uint8_t *v16;
  uint64_t v17;
  void *v18;

  v2 = objc_autoreleasePoolPush();
  *(_QWORD *)buf = 0;
  v16 = buf;
  v17 = 0x2020000000;
  v3 = off_1000ED070;
  v18 = off_1000ED070;
  if (!off_1000ED070)
  {
    v4 = (void *)sub_10003FC08();
    v3 = dlsym(v4, "CoreCaptureControlCreate");
    *((_QWORD *)v16 + 3) = v3;
    off_1000ED070 = v3;
  }
  _Block_object_dispose(buf, 8);
  if (!v3)
    goto LABEL_13;
  v5 = ((uint64_t (*)(const CFAllocatorRef))v3)(kCFAllocatorDefault);
  if (v5)
  {
    v6 = (const void *)v5;
    v7 = objc_msgSend(CFSTR("WiFi"), "UTF8String");
    v8 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "UTF8String");
    *(_QWORD *)buf = 0;
    v16 = buf;
    v17 = 0x2020000000;
    v9 = off_1000ED078;
    v18 = off_1000ED078;
    if (!off_1000ED078)
    {
      v10 = (void *)sub_10003FC08();
      v9 = dlsym(v10, "CoreCaptureControlCaptureWithComponentDirectory");
      *((_QWORD *)v16 + 3) = v9;
      off_1000ED078 = v9;
    }
    _Block_object_dispose(buf, 8);
    if (v9)
    {
      ((void (*)(const void *, id, id))v9)(v6, v7, v8);
      CFRelease(v6);
      goto LABEL_12;
    }
LABEL_13:
    v13 = dlerror();
    v14 = (_Unwind_Exception *)abort_report_np("%s", v13);
    _Block_object_dispose(buf, 8);
    _Unwind_Resume(v14);
  }
  v11 = WALogCategoryDefaultHandle();
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_fault_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Failed to WACoreCaptureControlCreate", buf, 2u);
  }

LABEL_12:
  objc_autoreleasePoolPop(v2);
}

uint64_t sub_10003FC08()
{
  uint64_t v0;
  char *v1;
  char *v3;
  __int128 v4;
  uint64_t v5;

  v3 = 0;
  if (!qword_1000ED068)
  {
    v4 = off_1000CD130;
    v5 = 0;
    qword_1000ED068 = _sl_dlopen(&v4, &v3);
    v1 = v3;
    v0 = qword_1000ED068;
    if (qword_1000ED068)
    {
      if (!v3)
        return v0;
    }
    else
    {
      v1 = (char *)abort_report_np("%s", v3);
    }
    free(v1);
    return v0;
  }
  return qword_1000ED068;
}

void sub_100041B20(uint64_t a1, uint64_t a2, void *a3)
{
  double v5;
  id v6;
  NSObject *v7;
  float v8;
  float v9;
  id v10;
  NSObject *v11;
  float v12;
  void *v13;
  void *v14;
  id v15;
  NSObject *v16;
  double v17;
  id v18;
  NSObject *v19;
  id v20;
  id v21;
  id v22;
  NSObject *v23;
  id v24;
  const char *v25;
  float v26;
  float v27;
  id v28;
  NSObject *v29;
  float v30;
  void *v31;
  id v32;
  NSObject *v33;
  double v34;
  id v35;
  id v36;
  id v37;
  NSObject *v38;
  id v39;
  id v40;
  int v41;
  const char *v42;
  __int16 v43;
  int v44;
  __int16 v45;
  double v46;

  v5 = COERCE_DOUBLE(a3);
  switch(a2)
  {
    case 0:
      v6 = WALogCategoryDefaultHandle();
      v7 = objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        v41 = 136446466;
        v42 = "-[RecommendationEngine recommendActionFromData:andReply:]_block_invoke";
        v43 = 1024;
        v44 = 366;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:WARecommendNull", (uint8_t *)&v41, 0x12u);
      }
      goto LABEL_42;
    case 1:
      objc_msgSend(*(id *)(a1 + 32), "addNumRecommendedCapture");
      objc_msgSend(*(id *)(a1 + 32), "medianCCA:", *(_QWORD *)(a1 + 40));
      v9 = v8;
      v10 = WALogCategoryDefaultHandle();
      v11 = objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        v41 = 136446722;
        v42 = "-[RecommendationEngine recommendActionFromData:andReply:]_block_invoke";
        v43 = 1024;
        v44 = 340;
        v45 = 2048;
        v46 = v9;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:floatCCA %f", (uint8_t *)&v41, 0x1Cu);
      }

      v12 = (float)(unint64_t)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "dps_wd_cca");
      v13 = *(void **)(a1 + 32);
      if (v9 >= v12)
      {
        objc_msgSend(v13, "addNumSuppressedCapture");
        v22 = WALogCategoryDefaultHandle();
        v23 = objc_claimAutoreleasedReturnValue(v22);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          v41 = 136446722;
          v42 = "-[RecommendationEngine recommendActionFromData:andReply:]_block_invoke";
          v43 = 1024;
          v44 = 344;
          v45 = 2048;
          v46 = v9;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:sDPS: aborting FullCapture since cca > limit (%f)", (uint8_t *)&v41, 0x1Cu);
        }

        v24 = WALogCategoryDefaultHandle();
        v7 = objc_claimAutoreleasedReturnValue(v24);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          v41 = 136446466;
          v42 = "-[RecommendationEngine recommendActionFromData:andReply:]_block_invoke";
          v43 = 1024;
          v44 = 345;
          v25 = "%{public}s::%d:WARecommendFullCapture WARecommendNull dps_wd_cca";
          goto LABEL_41;
        }
      }
      else
      {
        if ((objc_msgSend(v13, "canCaptureforDPS") & 1) != 0)
        {
          v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setObject:forKey:", v14, CFSTR("dps_lastCapture"));
          v15 = WALogCategoryDefaultHandle();
          v16 = objc_claimAutoreleasedReturnValue(v15);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            v17 = *(double *)(*(_QWORD *)(a1 + 32) + 8);
            v41 = 136446722;
            v42 = "-[RecommendationEngine recommendActionFromData:andReply:]_block_invoke";
            v43 = 1024;
            v44 = 358;
            v45 = 2112;
            v46 = v17;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:dpsWDBudgetDict %@", (uint8_t *)&v41, 0x1Cu);
          }

          v18 = WALogCategoryDefaultHandle();
          v19 = objc_claimAutoreleasedReturnValue(v18);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            v41 = 136446722;
            v42 = "-[RecommendationEngine recommendActionFromData:andReply:]_block_invoke";
            v43 = 1024;
            v44 = 359;
            v45 = 2112;
            v46 = v5;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:WARecommendFullCapture classification %@", (uint8_t *)&v41, 0x1Cu);
          }
          goto LABEL_33;
        }
        objc_msgSend(*(id *)(a1 + 32), "addNumSuppressedCapture");
        v36 = WALogCategoryDefaultHandle();
        v7 = objc_claimAutoreleasedReturnValue(v36);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          v41 = 136446466;
          v42 = "-[RecommendationEngine recommendActionFromData:andReply:]_block_invoke";
          v43 = 1024;
          v44 = 352;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:WARecommendFullCapture WARecommendNull canWDforDPS", (uint8_t *)&v41, 0x12u);
        }
      }
      goto LABEL_42;
    case 2:
      objc_msgSend(*(id *)(a1 + 32), "addNumRecommendedWD");
      if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "disable_dps_wd"))
      {
        v20 = WALogCategoryDefaultHandle();
        v7 = objc_claimAutoreleasedReturnValue(v20);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          v41 = 136446466;
          v42 = "-[RecommendationEngine recommendActionFromData:andReply:]_block_invoke";
          v43 = 1024;
          v44 = 304;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:WARecommendTrapWatchdog WARecommendNull disable_dps_wd", (uint8_t *)&v41, 0x12u);
        }
LABEL_42:

        (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
        goto LABEL_43;
      }
      objc_msgSend(*(id *)(a1 + 32), "medianCCA:", *(_QWORD *)(a1 + 40));
      v27 = v26;
      v28 = WALogCategoryDefaultHandle();
      v29 = objc_claimAutoreleasedReturnValue(v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        v41 = 136446722;
        v42 = "-[RecommendationEngine recommendActionFromData:andReply:]_block_invoke";
        v43 = 1024;
        v44 = 310;
        v45 = 2048;
        v46 = v27;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:floatCCA %f", (uint8_t *)&v41, 0x1Cu);
      }

      v30 = (float)(unint64_t)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "dps_wd_cca");
      v31 = *(void **)(a1 + 32);
      if (v27 >= v30)
      {
        objc_msgSend(v31, "addNumSuppressedWD");
        v37 = WALogCategoryDefaultHandle();
        v38 = objc_claimAutoreleasedReturnValue(v37);
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          v41 = 136446722;
          v42 = "-[RecommendationEngine recommendActionFromData:andReply:]_block_invoke";
          v43 = 1024;
          v44 = 314;
          v45 = 2048;
          v46 = v27;
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:sDPS: aborting watchdog since cca > limit (%f)", (uint8_t *)&v41, 0x1Cu);
        }

        v39 = WALogCategoryDefaultHandle();
        v7 = objc_claimAutoreleasedReturnValue(v39);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          v41 = 136446466;
          v42 = "-[RecommendationEngine recommendActionFromData:andReply:]_block_invoke";
          v43 = 1024;
          v44 = 315;
          v25 = "%{public}s::%d:WARecommendTrapWatchdog WARecommendNull dps_wd_cca";
LABEL_41:
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v25, (uint8_t *)&v41, 0x12u);
        }
        goto LABEL_42;
      }
      if ((objc_msgSend(v31, "canWDforDPS") & 1) == 0)
      {
        objc_msgSend(*(id *)(a1 + 32), "addNumSuppressedWD");
        v40 = WALogCategoryDefaultHandle();
        v7 = objc_claimAutoreleasedReturnValue(v40);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          v41 = 136446466;
          v42 = "-[RecommendationEngine recommendActionFromData:andReply:]_block_invoke";
          v43 = 1024;
          v44 = 322;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:WARecommendTrapWatchdog WARecommendNoneNoWatchdogBudget canWDforDPS", (uint8_t *)&v41, 0x12u);
        }
        goto LABEL_42;
      }
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setObject:forKey:", v14, CFSTR("dps_lastWD"));
      v32 = WALogCategoryDefaultHandle();
      v33 = objc_claimAutoreleasedReturnValue(v32);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        v34 = *(double *)(*(_QWORD *)(a1 + 32) + 8);
        v41 = 136446722;
        v42 = "-[RecommendationEngine recommendActionFromData:andReply:]_block_invoke";
        v43 = 1024;
        v44 = 329;
        v45 = 2112;
        v46 = v34;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:dpsWDBudgetDict %@", (uint8_t *)&v41, 0x1Cu);
      }

      v35 = WALogCategoryDefaultHandle();
      v19 = objc_claimAutoreleasedReturnValue(v35);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        v41 = 136446722;
        v42 = "-[RecommendationEngine recommendActionFromData:andReply:]_block_invoke";
        v43 = 1024;
        v44 = 330;
        v45 = 2112;
        v46 = v5;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:WARecommendTrapWatchdog classification: %@", (uint8_t *)&v41, 0x1Cu);
      }
LABEL_33:

      (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
LABEL_43:

      return;
    case 3:
      v21 = WALogCategoryDefaultHandle();
      v7 = objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        v41 = 136446466;
        v42 = "-[RecommendationEngine recommendActionFromData:andReply:]_block_invoke";
        v43 = 1024;
        v44 = 372;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:WARecommendNoneNoWatchdogBudget", (uint8_t *)&v41, 0x12u);
      }
      goto LABEL_42;
    default:
      goto LABEL_43;
  }
}

id sub_100042F4C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "keyBagLockStateChangeNotification");
}

id sub_100042F54(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "prepareToTerminateViaEagerExit");
}

id sub_100043164(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 40), "_updateProfileStateDate:", objc_msgSend(*(id *)(a1 + 32), "BOOLValue"));
}

id sub_1000432C4()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1000ED098;
  v7 = qword_1000ED098;
  if (!qword_1000ED098)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_10007173C;
    v3[3] = &unk_1000CD9D0;
    v3[4] = &v4;
    sub_10007173C((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100043364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100043900(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_10004391C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  NSObject *v7;
  id v8;
  _QWORD v9[5];
  id v10;
  id v11[2];

  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "engineQ"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000439FC;
  v9[3] = &unk_1000CD1A0;
  objc_copyWeak(v11, (id *)(a1 + 40));
  v11[1] = a2;
  v9[4] = *(_QWORD *)(a1 + 32);
  v10 = v5;
  v8 = v5;
  dispatch_async(v7, v9);

  objc_destroyWeak(v11);
}

void sub_1000439FC(uint64_t a1)
{
  void *v2;
  _QWORD *WeakRetained;
  _QWORD *v4;
  uint64_t v5;
  unsigned __int8 v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  id v13;
  NSObject *v14;
  void *v15;
  void *v16;
  id v17;
  NSObject *v18;
  void *v19;
  uint64_t v20;
  int v21;
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  unsigned int v26;
  __int16 v27;
  unsigned int v28;
  NSErrorUserInfoKey v29;
  const __CFString *v30;

  v2 = objc_autoreleasePoolPush();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v4 = WeakRetained;
  if (*(_QWORD *)(a1 + 56) == 1)
  {
    objc_msgSend(WeakRetained, "setIsAssociated:", objc_msgSend(WeakRetained, "isAssociated"));
    v5 = *(_QWORD *)(a1 + 32);
    if (*(_BYTE *)(v5 + 50)
      || (objc_msgSend(*(id *)(v5 + 640), "megawifiprofile_diagnostic_metrics_while_unassoc") & 1) != 0
      || (v6 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 640), "megawifiprofile_diagnostic_metrics_before_first_assoc"), !*(_BYTE *)(*(_QWORD *)(a1 + 32) + 49))|| (v6 & 1) != 0)
    {
      v9 = (void *)os_transaction_create("com.apple.wifianalytics.DatapathMetricStream");
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](WAActivityManager, "sharedActivityManager"));
      objc_msgSend(v10, "osTransactionCreate:transaction:", "com.apple.wifianalytics.DatapathMetricStream", v9);

      v11 = WALogCategoryDefaultHandle();
      v12 = objc_claimAutoreleasedReturnValue(v11);
      if (os_signpost_enabled(v12))
      {
        LOWORD(v21) = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "DatapathMetricGetter", "", (uint8_t *)&v21, 2u);
      }

      +[WAUtil incrementValueForKey:inMutableDict:onQueue:](WAUtil, "incrementValueForKey:inMutableDict:onQueue:", CFSTR("Log: DatapathMetricStream Trigger"), v4[86], v4[11]);
      objc_msgSend(v4, "_triggerQueryForNWActivity:forProcessToken:andReply:", *(_QWORD *)(a1 + 56), CFSTR("DatapathMetricStream"), *(_QWORD *)(a1 + 40));
      v13 = WALogCategoryDefaultHandle();
      v14 = objc_claimAutoreleasedReturnValue(v13);
      if (os_signpost_enabled(v14))
      {
        LOWORD(v21) = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "DatapathMetricGetter", "", (uint8_t *)&v21, 2u);
      }

      v15 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](WAActivityManager, "sharedActivityManager"));
      objc_msgSend(v15, "osTransactionComplete:", v9);

    }
    else
    {
      v7 = WALogCategoryDefaultHandle();
      v8 = objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        v21 = 136446978;
        v22 = "-[WAEngine initDatapathMetricGetterAndFetcher]_block_invoke";
        v23 = 1024;
        v24 = 734;
        v25 = 1024;
        v26 = objc_msgSend(v4, "isAssociated");
        v27 = 1024;
        v28 = objc_msgSend(v4, "isAssociatedStateKnown");
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%{public}s::%d:initDatapathMetricGetterAndFetcher _isAssociated %d _isAssociatedStateKnown %d", (uint8_t *)&v21, 0x1Eu);
      }

    }
    v16 = 0;
  }
  else
  {
    v17 = WALogCategoryDefaultHandle();
    v18 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v21 = 136446466;
      v22 = "-[WAEngine initDatapathMetricGetterAndFetcher]_block_invoke_2";
      v23 = 1024;
      v24 = 727;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Only replyStyle = 1 supported", (uint8_t *)&v21, 0x12u);
    }

    v29 = NSLocalizedFailureReasonErrorKey;
    v30 = CFSTR("WAErrorCodeNotRegistered");
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v30, &v29, 1));
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.wifi.analytics.errordomain"), 9009, v19));

    v20 = *(_QWORD *)(a1 + 40);
    if (v20)
      (*(void (**)(uint64_t, _QWORD, void *))(v20 + 16))(v20, 0, v16);
  }

  objc_autoreleasePoolPop(v2);
}

void sub_100043E30(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  NSObject *v12;
  id v13;
  NSObject *v14;
  void *v15;
  int v16;
  const char *v17;
  __int16 v18;
  int v19;

  v2 = (void *)os_transaction_create("com.apple.wifianalytics.migratestore");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](WAActivityManager, "sharedActivityManager"));
  objc_msgSend(v3, "osTransactionCreate:transaction:", "com.apple.wifianalytics.migratestore", v2);

  v4 = WALogCategoryDefaultHandle();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v16 = 136446466;
    v17 = "-[WAEngine setupAnalyticsProcessorWithCompletionBlock:]_block_invoke";
    v18 = 1024;
    v19 = 767;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Alloc AnalyticsProcessor with AnalyticsProcessorMigrationCapable", (uint8_t *)&v16, 0x12u);
  }

  if (+[WAUtil shouldEnableXPCStore](WAUtil, "shouldEnableXPCStore"))
  {
    v6 = WALogCategoryDefaultHandle();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v16 = 136446466;
      v17 = "-[WAEngine setupAnalyticsProcessorWithCompletionBlock:]_block_invoke";
      v18 = 1024;
      v19 = 771;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:[WAUtil shouldEnableXPCStore] true, also etting AnalyticsProcessorEnableXPCStore", (uint8_t *)&v16, 0x12u);
    }

    v8 = 3;
  }
  else
  {
    v8 = 2;
  }
  v9 = objc_msgSend(objc_alloc((Class)AnalyticsProcessor), "initWithOptions:", v8);
  objc_msgSend(*(id *)(a1 + 32), "setAnalyticsProcessor:", v9);

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "analyticsProcessor"));
  if (v10)
  {
    objc_msgSend(*(id *)(a1 + 32), "setAnalyticsProcessorIsReady:", 1);
    v11 = WALogCategoryDefaultHandle();
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v16 = 136446466;
      v17 = "-[WAEngine setupAnalyticsProcessorWithCompletionBlock:]_block_invoke";
      v18 = 1024;
      v19 = 780;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:AnalyticsProcessor ready after first unlock", (uint8_t *)&v16, 0x12u);
    }

    notify_cancel((int)objc_msgSend(*(id *)(a1 + 32), "keybagToken"));
  }
  else
  {
    v13 = WALogCategoryDefaultHandle();
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v16 = 136446466;
      v17 = "-[WAEngine setupAnalyticsProcessorWithCompletionBlock:]_block_invoke";
      v18 = 1024;
      v19 = 777;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%{public}s::%d:Unable to alloc analyticsProcessor. Will not be processing any metrics for AnalyticsStore!", (uint8_t *)&v16, 0x12u);
    }

  }
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](WAActivityManager, "sharedActivityManager"));
  objc_msgSend(v15, "osTransactionComplete:", v2);

}

void sub_1000443B0(uint64_t a1, uint64_t a2)
{
  int v2;
  id v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;

  v2 = a2;
  v4 = objc_msgSend(objc_alloc((Class)NSNumber), "initWithBool:", a2);
  v5 = WALogCategoryDefaultHandle();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 136446722;
    v9 = "-[WAEngine _triggerDeviceAnalyticsStoreMigrationAndReply:]_block_invoke";
    v10 = 1024;
    v11 = 808;
    v12 = 1024;
    v13 = v2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Result for triggerDeviceAnalyticsStoreMigrationAndReply via XPC - Status: %d", (uint8_t *)&v8, 0x18u);
  }

  v7 = *(_QWORD *)(a1 + 32);
  if (v7)
    (*(void (**)(uint64_t, id, _QWORD))(v7 + 16))(v7, v4, 0);

}

id sub_100044A70(uint64_t a1)
{
  id v2;
  NSObject *v3;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2 = WALogCategoryDefaultHandle();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 136446466;
    v6 = "-[WAEngine createAndStartJsonReaderTimer]_block_invoke";
    v7 = 1024;
    v8 = 869;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Calling processWiFiAnalyticsMessageJSONFilesInTmpDir from _jsonFilerReaderTimer", (uint8_t *)&v5, 0x12u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "processWiFiAnalyticsMessageJSONFilesInTmpDir:", 1);
}

id sub_100044C40(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_unpersist");
}

void sub_100045634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id *a13, id *a14, id *a15, id *location)
{
  uint64_t v16;

  objc_destroyWeak((id *)(v16 - 200));
  objc_destroyWeak((id *)(v16 - 192));
  objc_destroyWeak((id *)(v16 - 184));
  _Unwind_Resume(a1);
}

void sub_1000456C4(uint64_t a1)
{
  id WeakRetained;
  id v3;
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  void *v13;
  __int16 v14;
  unsigned int v15;
  __int16 v16;
  unsigned int v17;
  __int16 v18;
  unsigned int v19;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = WALogCategoryDefaultHandle();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "token"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[WAUtil trimTokenForLogging:](WAUtil, "trimTokenForLogging:", v6));
    v8 = 136447490;
    v9 = "-[WAEngine xpcConnection:establishConnectionWithToken:andReply:]_block_invoke";
    v10 = 1024;
    v11 = 973;
    v12 = 2112;
    v13 = v7;
    v14 = 1024;
    v15 = objc_msgSend(v3, "processIdentifier");
    v16 = 1024;
    v17 = objc_msgSend(v3, "effectiveUserIdentifier");
    v18 = 1024;
    v19 = objc_msgSend(v3, "effectiveGroupIdentifier");
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:XPC: INTERRUPTED XPC CONNECTION with token=%@ [pid=%d, euid=%d, egid=%d]", (uint8_t *)&v8, 0x2Eu);

  }
}

void sub_10004582C(id *a1)
{
  NSObject *v2;
  _QWORD block[4];
  id v4;
  id v5;
  id v6;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "engineQ"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000458F8;
  block[3] = &unk_1000CD240;
  objc_copyWeak(&v4, a1 + 5);
  objc_copyWeak(&v5, a1 + 6);
  objc_copyWeak(&v6, a1 + 7);
  dispatch_async(v2, block);

  objc_destroyWeak(&v6);
  objc_destroyWeak(&v5);
  objc_destroyWeak(&v4);
}

void sub_1000458F8(id *a1)
{
  void *v2;
  id WeakRetained;
  id v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  unsigned int v20;
  __int16 v21;
  unsigned int v22;
  __int16 v23;
  unsigned int v24;

  v2 = objc_autoreleasePoolPush();
  WeakRetained = objc_loadWeakRetained(a1 + 4);
  v4 = objc_loadWeakRetained(a1 + 5);
  v5 = WALogCategoryDefaultHandle();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "token"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[WAUtil trimTokenForLogging:](WAUtil, "trimTokenForLogging:", v7));
    v13 = 136447490;
    v14 = "-[WAEngine xpcConnection:establishConnectionWithToken:andReply:]_block_invoke_2";
    v15 = 1024;
    v16 = 981;
    v17 = 2112;
    v18 = v8;
    v19 = 1024;
    v20 = objc_msgSend(v4, "processIdentifier");
    v21 = 1024;
    v22 = objc_msgSend(v4, "effectiveUserIdentifier");
    v23 = 1024;
    v24 = objc_msgSend(v4, "effectiveGroupIdentifier");
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:XPC: INVALIDATED XPC CONNECTION with token=%@ [pid=%d, euid=%d, egid=%d]", (uint8_t *)&v13, 0x2Eu);

  }
  objc_msgSend(v4, "setExportedObject:", 0);
  objc_msgSend(v4, "setInterruptionHandler:", 0);
  objc_msgSend(v4, "setInvalidationHandler:", 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "token"));

  if (v9)
  {
    v10 = objc_loadWeakRetained(a1 + 6);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "processTokenToXPCConnectionMap"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "token"));
    objc_msgSend(v11, "removeObjectForKey:", v12);

  }
  objc_autoreleasePoolPop(v2);
}

void sub_100045AF4(uint64_t a1)
{
  void *v2;
  _QWORD *WeakRetained;
  uint64_t v4;
  void *v5;

  v2 = objc_autoreleasePoolPush();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  +[WAUtil incrementValueForKey:inMutableDict:onQueue:](WAUtil, "incrementValueForKey:inMutableDict:onQueue:", CFSTR("Client: Establish Connection"), WeakRetained[86], WeakRetained[11]);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "processTokenToXPCConnectionMap"));
  objc_msgSend(v5, "setObject:forKeyedSubscript:", v4, *(_QWORD *)(a1 + 32));

  objc_autoreleasePoolPop(v2);
}

void sub_100045C98(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_100045CAC(uint64_t a1)
{
  void *v2;
  _QWORD *WeakRetained;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  NSErrorUserInfoKey v19;
  const __CFString *v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  int v24;

  v2 = objc_autoreleasePoolPush();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "connection"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("com.apple.wifianalytics.pid_%d.%s"), objc_msgSend(v4, "processIdentifier"), "-[WAEngine xpcConnection:submitMessage:groupType:andReply:]_block_invoke"));

  v6 = objc_retainAutorelease(v5);
  v7 = (void *)os_transaction_create(objc_msgSend(v6, "UTF8String"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](WAActivityManager, "sharedActivityManager"));
  v9 = objc_retainAutorelease(v6);
  objc_msgSend(v8, "osTransactionCreate:transaction:", objc_msgSend(v9, "UTF8String"), v7);

  if ((objc_msgSend(WeakRetained, "submitterMapCheck:group:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 64)) & 1) != 0)
  {
    +[WAUtil incrementValueForKey:inMutableDict:onQueue:](WAUtil, "incrementValueForKey:inMutableDict:onQueue:", CFSTR("Client: Submit Message"), WeakRetained[86], WeakRetained[11]);
    v10 = *(_QWORD *)(a1 + 64);
    v11 = *(_QWORD *)(a1 + 40);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "token"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_submitMessage:groupType:forProcessToken:", v11, v10, v12));

  }
  else
  {
    v16 = WALogCategoryDefaultHandle();
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v22 = "-[WAEngine xpcConnection:submitMessage:groupType:andReply:]_block_invoke";
      v23 = 1024;
      v24 = 1012;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:not registered, bailing", buf, 0x12u);
    }

    v19 = NSLocalizedFailureReasonErrorKey;
    v20 = CFSTR("WAErrorCodeNotRegistered");
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v20, &v19, 1));
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.wifi.analytics.errordomain"), 9009, v18));

  }
  v14 = *(_QWORD *)(a1 + 48);
  if (v14)
    (*(void (**)(uint64_t, _QWORD, void *))(v14 + 16))(v14, 0, v13);
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](WAActivityManager, "sharedActivityManager"));
  objc_msgSend(v15, "osTransactionComplete:", v7);

  objc_autoreleasePoolPop(v2);
}

void sub_100046050(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_100046064(uint64_t a1)
{
  void *v2;
  _QWORD *WeakRetained;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  NSErrorUserInfoKey v16;
  const __CFString *v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  int v21;

  v2 = objc_autoreleasePoolPush();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "connection"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("com.apple.wifianalytics.pid_%d.%s"), objc_msgSend(v4, "processIdentifier"), "-[WAEngine xpcConnection:submitWiFiAnalyticsMessageAdvanced:andReply:]_block_invoke"));

  v6 = objc_retainAutorelease(v5);
  v7 = (void *)os_transaction_create(objc_msgSend(v6, "UTF8String"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](WAActivityManager, "sharedActivityManager"));
  v9 = objc_retainAutorelease(v6);
  objc_msgSend(v8, "osTransactionCreate:transaction:", objc_msgSend(v9, "UTF8String"), v7);

  if ((objc_msgSend(WeakRetained, "submitterMapCheck:group:", *(_QWORD *)(a1 + 32), 5) & 1) != 0)
  {
    +[WAUtil incrementValueForKey:inMutableDict:onQueue:](WAUtil, "incrementValueForKey:inMutableDict:onQueue:", CFSTR("Client: Submit WiFi Analytics Message Advanced"), WeakRetained[86], WeakRetained[11]);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_submitWiFiAnalyticsMessageAdvanced:", *(_QWORD *)(a1 + 40)));
  }
  else
  {
    v13 = WALogCategoryDefaultHandle();
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v19 = "-[WAEngine xpcConnection:submitWiFiAnalyticsMessageAdvanced:andReply:]_block_invoke";
      v20 = 1024;
      v21 = 1036;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:not registered, bailing", buf, 0x12u);
    }

    v16 = NSLocalizedFailureReasonErrorKey;
    v17 = CFSTR("WAErrorCodeNotRegistered");
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v17, &v16, 1));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.wifi.analytics.errordomain"), 9009, v15));

  }
  v11 = *(_QWORD *)(a1 + 48);
  if (v11)
    (*(void (**)(uint64_t, _QWORD, void *))(v11 + 16))(v11, 0, v10);
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](WAActivityManager, "sharedActivityManager"));
  objc_msgSend(v12, "osTransactionComplete:", v7);

  objc_autoreleasePoolPop(v2);
}

void sub_1000463C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_1000463D8(uint64_t a1)
{
  void *v2;
  _QWORD *WeakRetained;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  id v11;
  NSErrorUserInfoKey v12;
  const __CFString *v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  int v17;

  v2 = objc_autoreleasePoolPush();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if ((objc_msgSend(WeakRetained, "submitterMapCheck:group:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56)) & 1) != 0)
  {
    +[WAUtil incrementValueForKey:inMutableDict:onQueue:](WAUtil, "incrementValueForKey:inMutableDict:onQueue:", CFSTR("Client: Get Message Model For Group"), WeakRetained[86], WeakRetained[11]);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "token"));
    v5 = *(_QWORD *)(a1 + 56);
    v11 = 0;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_getMessagesModelForProcessToken:groupType:andError:", v4, v5, &v11));
    v7 = v11;
  }
  else
  {
    v9 = WALogCategoryDefaultHandle();
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v15 = "-[WAEngine xpcConnection:getMessagesModelForGroupType:andReply:]_block_invoke";
      v16 = 1024;
      v17 = 1056;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:not registered, bailing", buf, 0x12u);
    }

    v12 = NSLocalizedFailureReasonErrorKey;
    v13 = CFSTR("WAErrorCodeNotRegistered");
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v13, &v12, 1));
    v7 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.wifi.analytics.errordomain"), 9009, v4));
    v6 = 0;
  }

  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
    (*(void (**)(uint64_t, void *, id))(v8 + 16))(v8, v6, v7);

  objc_autoreleasePoolPop(v2);
}

void sub_1000466AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_1000466C0(uint64_t a1)
{
  void *v2;
  _QWORD *WeakRetained;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  unsigned int v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  NSObject *v27;
  void *v28;
  void *v29;
  void *v30;
  const char *v31;
  NSObject *v32;
  os_log_type_t v33;
  uint32_t v34;
  void *v35;
  uint64_t v36;
  id v37;
  NSObject *v38;
  id v39;
  id v40;
  void *v41;
  int v42;
  const char *v43;
  __int16 v44;
  int v45;
  __int16 v46;
  void *v47;
  __int16 v48;
  void *v49;
  NSErrorUserInfoKey v50;
  const __CFString *v51;

  v2 = objc_autoreleasePoolPush();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "token"));

  if (v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "submitterMap"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "token"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", v6));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 56)));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", v8));

    if (v9)
    {
      v39 = WALogCategoryDefaultHandle();
      v27 = objc_claimAutoreleasedReturnValue(v39);
      if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        goto LABEL_9;
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "token"));
      v30 = (void *)objc_claimAutoreleasedReturnValue(+[WAUtil trimTokenForLogging:](WAUtil, "trimTokenForLogging:", v29));
      v42 = 136446722;
      v43 = "-[WAEngine xpcConnection:registerMessageGroup:andReply:]_block_invoke";
      v44 = 1024;
      v45 = 1075;
      v46 = 2112;
      v47 = v30;
      v31 = "%{public}s::%d:token is already registered (token: %@)";
      v32 = v27;
      v33 = OS_LOG_TYPE_DEFAULT;
      v34 = 28;
    }
    else
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "processTokenToGroupTypeMap"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "token"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", v11));
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 56)));
      v14 = objc_msgSend(v12, "containsObject:", v13);

      if (v14)
      {
        v40 = WALogCategoryDefaultHandle();
        v27 = objc_claimAutoreleasedReturnValue(v40);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          v41 = *(void **)(a1 + 56);
          v42 = 136446722;
          v43 = "-[WAEngine xpcConnection:registerMessageGroup:andReply:]_block_invoke";
          v44 = 1024;
          v45 = 1076;
          v46 = 2048;
          v47 = v41;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "%{public}s::%d:XPC: processTokenToGroupTypeMap seems to think this process token has already registered group type: %ld", (uint8_t *)&v42, 0x1Cu);
        }
        goto LABEL_9;
      }
      +[WAUtil incrementValueForKey:inMutableDict:onQueue:](WAUtil, "incrementValueForKey:inMutableDict:onQueue:", CFSTR("Client: Register Message Group"), WeakRetained[86], WeakRetained[11]);
      objc_msgSend(WeakRetained, "_purgeGroupTypeIfNecessary:", *(_QWORD *)(a1 + 56));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "processTokenToGroupTypeMap"));
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "token"));
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectForKeyedSubscript:", v16));

      if (!v17)
      {
        v18 = objc_alloc_init((Class)NSMutableSet);
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "processTokenToGroupTypeMap"));
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "token"));
        objc_msgSend(v19, "setObject:forKeyedSubscript:", v18, v20);

      }
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "processTokenToGroupTypeMap"));
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "token"));
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "objectForKeyedSubscript:", v22));
      v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 56)));
      objc_msgSend(v23, "addObject:", v24);

      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "token"));
      objc_msgSend(WeakRetained, "_initSubmitterAndQueryableRegistrationForProcessToken:andGroupType:", v25, *(_QWORD *)(a1 + 56));

      objc_msgSend(WeakRetained, "_persist");
      v26 = WALogCategoryDefaultHandle();
      v27 = objc_claimAutoreleasedReturnValue(v26);
      if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
      {
LABEL_9:
        v35 = 0;
        goto LABEL_10;
      }
      v28 = *(void **)(a1 + 56);
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "token"));
      v30 = (void *)objc_claimAutoreleasedReturnValue(+[WAUtil trimTokenForLogging:](WAUtil, "trimTokenForLogging:", v29));
      v42 = 136446978;
      v43 = "-[WAEngine xpcConnection:registerMessageGroup:andReply:]_block_invoke";
      v44 = 1024;
      v45 = 1086;
      v46 = 2048;
      v47 = v28;
      v48 = 2112;
      v49 = v30;
      v31 = "%{public}s::%d:XPC: registering message group type: %ld for process: %@";
      v32 = v27;
      v33 = OS_LOG_TYPE_DEBUG;
      v34 = 38;
    }
    _os_log_impl((void *)&_mh_execute_header, v32, v33, v31, (uint8_t *)&v42, v34);

    goto LABEL_9;
  }
  v37 = WALogCategoryDefaultHandle();
  v38 = objc_claimAutoreleasedReturnValue(v37);
  if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
  {
    v42 = 136446466;
    v43 = "-[WAEngine xpcConnection:registerMessageGroup:andReply:]_block_invoke";
    v44 = 1024;
    v45 = 1074;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:couldn't get process name for connection", (uint8_t *)&v42, 0x12u);
  }

  v50 = NSLocalizedFailureReasonErrorKey;
  v51 = CFSTR("WAErrorCodeInternalError");
  v27 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v51, &v50, 1));
  v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.wifi.analytics.errordomain"), 9003, v27));
LABEL_10:

  v36 = *(_QWORD *)(a1 + 40);
  if (v36)
    (*(void (**)(uint64_t, _QWORD, void *))(v36 + 16))(v36, 0, v35);

  objc_autoreleasePoolPop(v2);
}

void sub_100046D8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_100046DA0(uint64_t a1)
{
  void *v2;
  _QWORD *WeakRetained;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[4];
  id v23;
  NSErrorUserInfoKey v24;
  const __CFString *v25;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  void *v31;
  __int16 v32;
  uint64_t v33;

  v2 = objc_autoreleasePoolPush();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if ((objc_msgSend(WeakRetained, "submitterMapCheck:group:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 72)) & 1) != 0)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "connection"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("com.apple.wifianalytics.pid_%d.%s"), objc_msgSend(v4, "processIdentifier"), "-[WAEngine xpcConnection:getNewMessageForKey:groupType:withCopy:andReply:]_block_invoke"));

    v6 = objc_retainAutorelease(v5);
    v7 = (void *)os_transaction_create(objc_msgSend(v6, "UTF8String"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](WAActivityManager, "sharedActivityManager"));
    v9 = objc_retainAutorelease(v6);
    objc_msgSend(v8, "osTransactionCreate:transaction:", objc_msgSend(v9, "UTF8String"), v7);

    +[WAUtil incrementValueForKey:inMutableDict:onQueue:](WAUtil, "incrementValueForKey:inMutableDict:onQueue:", CFSTR("Client: Get New Message For Key"), WeakRetained[86], WeakRetained[11]);
    v10 = *(_QWORD *)(a1 + 72);
    v11 = *(_QWORD *)(a1 + 40);
    v12 = objc_msgSend(*(id *)(a1 + 48), "BOOLValue");
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "token"));
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_1000470B8;
    v22[3] = &unk_1000CD2E0;
    v23 = *(id *)(a1 + 56);
    objc_msgSend(WeakRetained, "_getNewMessageForKey:groupType:withCopy:forProcessToken:shouldCheckForPrePopulation:andReply:", v11, v10, v12, v13, 1, v22);

    v14 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](WAActivityManager, "sharedActivityManager"));
    objc_msgSend(v14, "osTransactionComplete:", v7);

    v15 = 0;
  }
  else
  {
    v16 = WALogCategoryDefaultHandle();
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "token"));
      v19 = *(_QWORD *)(a1 + 72);
      *(_DWORD *)buf = 136446978;
      v27 = "-[WAEngine xpcConnection:getNewMessageForKey:groupType:withCopy:andReply:]_block_invoke";
      v28 = 1024;
      v29 = 1103;
      v30 = 2112;
      v31 = v18;
      v32 = 2048;
      v33 = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:token %@ group %ld not registered, bailing", buf, 0x26u);

    }
    v24 = NSLocalizedFailureReasonErrorKey;
    v25 = CFSTR("WAErrorCodeNotRegistered");
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v25, &v24, 1));
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.wifi.analytics.errordomain"), 9009, v20));

    v21 = *(_QWORD *)(a1 + 56);
    if (v21)
      (*(void (**)(uint64_t, _QWORD, void *))(v21 + 16))(v21, 0, v15);
  }

  objc_autoreleasePoolPop(v2);
}

uint64_t sub_1000470B8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100047360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100047380(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD *WeakRetained;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;

  v2 = objc_autoreleasePoolPush();
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "listener"));
  objc_msgSend(v3, "suspend");

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "connection"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("com.apple.wifianalytics.pid_%d.%s"), objc_msgSend(v5, "processIdentifier"), "-[WAEngine xpcConnection:killDaemonAndReply:]_block_invoke"));

  v7 = objc_retainAutorelease(v6);
  v8 = (void *)os_transaction_create(objc_msgSend(v7, "UTF8String"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](WAActivityManager, "sharedActivityManager"));
  v10 = objc_retainAutorelease(v7);
  objc_msgSend(v9, "osTransactionCreate:transaction:", objc_msgSend(v10, "UTF8String"), v8);

  +[WAUtil incrementValueForKey:inMutableDict:onQueue:](WAUtil, "incrementValueForKey:inMutableDict:onQueue:", CFSTR("Client: Kill Daemon"), WeakRetained[86], WeakRetained[11]);
  objc_msgSend(WeakRetained, "_killDaemonAndReply:", *(_QWORD *)(a1 + 48));
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](WAActivityManager, "sharedActivityManager"));
  objc_msgSend(v11, "osTransactionComplete:", v8);

  objc_autoreleasePoolPop(v2);
}

void sub_100047768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100047788(uint64_t a1)
{
  void *v2;
  _QWORD *WeakRetained;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;

  v2 = objc_autoreleasePoolPush();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "connection"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("com.apple.wifianalytics.pid_%d.%s"), objc_msgSend(v4, "processIdentifier"), "-[WAEngine xpcConnection:clearMessageStoreAndReply:]_block_invoke"));

  v6 = objc_retainAutorelease(v5);
  v7 = (void *)os_transaction_create(objc_msgSend(v6, "UTF8String"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](WAActivityManager, "sharedActivityManager"));
  v9 = objc_retainAutorelease(v6);
  objc_msgSend(v8, "osTransactionCreate:transaction:", objc_msgSend(v9, "UTF8String"), v7);

  +[WAUtil incrementValueForKey:inMutableDict:onQueue:](WAUtil, "incrementValueForKey:inMutableDict:onQueue:", CFSTR("Client: Clear Message Store"), WeakRetained[86], WeakRetained[11]);
  objc_msgSend(WeakRetained, "_clearMessageStoreAndReply:", *(_QWORD *)(a1 + 40));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](WAActivityManager, "sharedActivityManager"));
  objc_msgSend(v10, "osTransactionComplete:", v7);

  objc_autoreleasePoolPop(v2);
}

void sub_100047B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100047BA4(uint64_t a1)
{
  void *v2;
  _QWORD *WeakRetained;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;

  v2 = objc_autoreleasePoolPush();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "connection"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("com.apple.wifianalytics.pid_%d.%s"), objc_msgSend(v4, "processIdentifier"), "-[WAEngine xpcConnection:trapCrashMiniTracerDumpReadyForInterfaceWithName:andReply:]_block_invoke"));

  v6 = objc_retainAutorelease(v5);
  v7 = (void *)os_transaction_create(objc_msgSend(v6, "UTF8String"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](WAActivityManager, "sharedActivityManager"));
  v9 = objc_retainAutorelease(v6);
  objc_msgSend(v8, "osTransactionCreate:transaction:", objc_msgSend(v9, "UTF8String"), v7);

  +[WAUtil incrementValueForKey:inMutableDict:onQueue:](WAUtil, "incrementValueForKey:inMutableDict:onQueue:", CFSTR("Client: Trap Crash Mini Tracer Dump"), WeakRetained[86], WeakRetained[11]);
  objc_msgSend(WeakRetained, "_trapCrashMiniTracerDumpReadyForInterfaceWithName:andReply:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](WAActivityManager, "sharedActivityManager"));
  objc_msgSend(v10, "osTransactionComplete:", v7);

  objc_autoreleasePoolPop(v2);
}

void sub_100047FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100047FC0(uint64_t a1)
{
  void *v2;
  _QWORD *WeakRetained;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;

  v2 = objc_autoreleasePoolPush();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "connection"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("com.apple.wifianalytics.pid_%d.%s"), objc_msgSend(v4, "processIdentifier"), "-[WAEngine xpcConnection:lqmCrashTracerNotifyForInterfaceWithName:andReply:]_block_invoke"));

  v6 = objc_retainAutorelease(v5);
  v7 = (void *)os_transaction_create(objc_msgSend(v6, "UTF8String"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](WAActivityManager, "sharedActivityManager"));
  v9 = objc_retainAutorelease(v6);
  objc_msgSend(v8, "osTransactionCreate:transaction:", objc_msgSend(v9, "UTF8String"), v7);

  +[WAUtil incrementValueForKey:inMutableDict:onQueue:](WAUtil, "incrementValueForKey:inMutableDict:onQueue:", CFSTR("Client: LQM Crash Tracer Notify"), WeakRetained[86], WeakRetained[11]);
  objc_msgSend(WeakRetained, "_lqmCrashTracerNotifyForInterfaceWithName:andReply:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](WAActivityManager, "sharedActivityManager"));
  objc_msgSend(v10, "osTransactionComplete:", v7);

  objc_autoreleasePoolPop(v2);
}

void sub_1000483E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100048400(uint64_t a1)
{
  void *v2;
  _QWORD *WeakRetained;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;

  v2 = objc_autoreleasePoolPush();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "connection"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("com.apple.wifianalytics.pid_%d.%s"), objc_msgSend(v4, "processIdentifier"), "-[WAEngine xpcConnection:lqmCrashTracerReceiveBlock:forInterfaceWithName:andReply:]_block_invoke"));

  v6 = objc_retainAutorelease(v5);
  v7 = (void *)os_transaction_create(objc_msgSend(v6, "UTF8String"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](WAActivityManager, "sharedActivityManager"));
  v9 = objc_retainAutorelease(v6);
  objc_msgSend(v8, "osTransactionCreate:transaction:", objc_msgSend(v9, "UTF8String"), v7);

  +[WAUtil incrementValueForKey:inMutableDict:onQueue:](WAUtil, "incrementValueForKey:inMutableDict:onQueue:", CFSTR("Client: LQM Crash Tracer Receive"), WeakRetained[86], WeakRetained[11]);
  objc_msgSend(WeakRetained, "_lqmCrashTracerReceiveBlock:forInterfaceWithName:andReply:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](WAActivityManager, "sharedActivityManager"));
  objc_msgSend(v10, "osTransactionComplete:", v7);

  objc_autoreleasePoolPop(v2);
}

void sub_100048634(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_100048648(uint64_t a1)
{
  void *v2;
  _QWORD *WeakRetained;
  _QWORD *v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  id v10;
  id v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  id v18;
  NSObject *v19;
  void *v20;
  id v21;
  NSObject *v22;
  uint64_t v23;
  id v24;
  NSErrorUserInfoKey v25;
  const __CFString *v26;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  int v30;

  v2 = objc_autoreleasePoolPush();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v4 = WeakRetained;
  if (*(_QWORD *)(a1 + 56) == 1
    && (objc_msgSend(WeakRetained, "submitterMapCheck:group:", *(_QWORD *)(a1 + 32), 3) & 1) == 0)
  {
    v18 = WALogCategoryDefaultHandle();
    v19 = objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v28 = "-[WAEngine xpcConnection:triggerQueryForNWActivity:andReply:]_block_invoke";
      v29 = 1024;
      v30 = 1247;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:not registered, bailing", buf, 0x12u);
    }

    v25 = NSLocalizedFailureReasonErrorKey;
    v26 = CFSTR("WAErrorCodeNotRegistered");
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v26, &v25, 1));
    v10 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.wifi.analytics.errordomain"), 9009, v20));

    v21 = WALogCategoryDefaultHandle();
    v22 = objc_claimAutoreleasedReturnValue(v21);
    if (os_signpost_enabled(v22))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v22, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "XPC NWActivity Reply", "", buf, 2u);
    }

    v23 = *(_QWORD *)(a1 + 40);
    if (v23)
      (*(void (**)(uint64_t, _QWORD, id))(v23 + 16))(v23, 0, v10);
    v24 = WALogCategoryDefaultHandle();
    v8 = objc_claimAutoreleasedReturnValue(v24);
    if (os_signpost_enabled(v8))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "XPC NWActivity Reply", "", buf, 2u);
    }
  }
  else
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "connection"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("com.apple.wifianalytics.pid_%d.%s"), objc_msgSend(v5, "processIdentifier"), "-[WAEngine xpcConnection:triggerQueryForNWActivity:andReply:]_block_invoke"));

    v7 = objc_retainAutorelease(v6);
    v8 = os_transaction_create(objc_msgSend(v7, "UTF8String"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](WAActivityManager, "sharedActivityManager"));
    v10 = objc_retainAutorelease(v7);
    objc_msgSend(v9, "osTransactionCreate:transaction:", objc_msgSend(v10, "UTF8String"), v8);

    v11 = WALogCategoryDefaultHandle();
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_signpost_enabled(v12))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "XPC NWActivity", "", buf, 2u);
    }

    +[WAUtil incrementValueForKey:inMutableDict:onQueue:](WAUtil, "incrementValueForKey:inMutableDict:onQueue:", CFSTR("Client: Trigger Query for NW Activity"), v4[86], v4[11]);
    v13 = *(_QWORD *)(a1 + 56);
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "token"));
    objc_msgSend(v4, "_triggerQueryForNWActivity:forProcessToken:andReply:", v13, v14, *(_QWORD *)(a1 + 40));

    v15 = WALogCategoryDefaultHandle();
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_signpost_enabled(v16))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "XPC NWActivity", "", buf, 2u);
    }

    v17 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](WAActivityManager, "sharedActivityManager"));
    objc_msgSend(v17, "osTransactionComplete:", v8);

  }
  objc_autoreleasePoolPop(v2);
}

void sub_100048B68(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_100048B7C(uint64_t a1)
{
  void *v2;
  _QWORD *WeakRetained;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  _QWORD v19[4];
  id v20;
  NSErrorUserInfoKey v21;
  const __CFString *v22;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  int v26;

  v2 = objc_autoreleasePoolPush();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if ((objc_msgSend(WeakRetained, "submitterMapCheck:group:", *(_QWORD *)(a1 + 32), 3) & 1) != 0)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "connection"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("com.apple.wifianalytics.pid_%d.%s"), objc_msgSend(v4, "processIdentifier"), "-[WAEngine xpcConnection:convertWiFiStatsIntoPercentile:analysisGroup:groupTarget:andReply:]_block_invoke"));

    v6 = objc_retainAutorelease(v5);
    v7 = (void *)os_transaction_create(objc_msgSend(v6, "UTF8String"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](WAActivityManager, "sharedActivityManager"));
    v9 = objc_retainAutorelease(v6);
    objc_msgSend(v8, "osTransactionCreate:transaction:", objc_msgSend(v9, "UTF8String"), v7);

    +[WAUtil incrementValueForKey:inMutableDict:onQueue:](WAUtil, "incrementValueForKey:inMutableDict:onQueue:", CFSTR("Client: Convert WiFi Stats into Percentile"), WeakRetained[86], WeakRetained[11]);
    v10 = *(_QWORD *)(a1 + 72);
    v12 = *(_QWORD *)(a1 + 40);
    v11 = *(_QWORD *)(a1 + 48);
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "token"));
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_100048E54;
    v19[3] = &unk_1000CD2E0;
    v20 = *(id *)(a1 + 56);
    objc_msgSend(WeakRetained, "_convertWiFiStatsIntoPercentile:analysisGroup:groupTarget:forProcessToken:andReply:", v12, v10, v11, v13, v19);

    v14 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](WAActivityManager, "sharedActivityManager"));
    objc_msgSend(v14, "osTransactionComplete:", v7);

    v15 = 0;
  }
  else
  {
    v17 = WALogCategoryDefaultHandle();
    v18 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v24 = "-[WAEngine xpcConnection:convertWiFiStatsIntoPercentile:analysisGroup:groupTarget:andReply:]_block_invoke";
      v25 = 1024;
      v26 = 1281;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:not registered, bailing", buf, 0x12u);
    }

    v21 = NSLocalizedFailureReasonErrorKey;
    v22 = CFSTR("WAErrorCodeNotRegistered");
    v9 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v22, &v21, 1));
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.wifi.analytics.errordomain"), 9009, v9));
  }

  v16 = *(_QWORD *)(a1 + 56);
  if (v16)
    (*(void (**)(uint64_t, _QWORD, void *))(v16 + 16))(v16, 0, v15);

  objc_autoreleasePoolPop(v2);
}

uint64_t sub_100048E54(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100048F7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_100048F90(uint64_t a1)
{
  void *v2;
  _QWORD *WeakRetained;
  _QWORD *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  NSObject *v20;
  void *v21;
  uint64_t v22;
  NSErrorUserInfoKey v23;
  const __CFString *v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  int v28;

  v2 = objc_autoreleasePoolPush();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v4 = WeakRetained;
  if (*(_QWORD *)(a1 + 64) != 1)
    goto LABEL_3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "submitterMap"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "token"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", v6));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", &off_1000E0350));

  if (!v8)
  {
    v19 = WALogCategoryDefaultHandle();
    v20 = objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v26 = "-[WAEngine xpcConnection:triggerDatapathDiagnosticsAndCollectUpdates:waMessage:andReply:]_block_invoke";
      v27 = 1024;
      v28 = 1310;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:not registered, bailing", buf, 0x12u);
    }

    v23 = NSLocalizedFailureReasonErrorKey;
    v24 = CFSTR("WAErrorCodeNotRegistered");
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v24, &v23, 1));
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.wifi.analytics.errordomain"), 9009, v21));

    v22 = *(_QWORD *)(a1 + 48);
    if (v22)
      (*(void (**)(uint64_t, _QWORD, void *))(v22 + 16))(v22, 0, v18);
  }
  else
  {
LABEL_3:
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "connection"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("com.apple.wifianalytics.pid_%d.%s"), objc_msgSend(v9, "processIdentifier"), "-[WAEngine xpcConnection:triggerDatapathDiagnosticsAndCollectUpdates:waMessage:andReply:]_block_invoke"));

    v11 = objc_retainAutorelease(v10);
    v12 = (void *)os_transaction_create(objc_msgSend(v11, "UTF8String"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](WAActivityManager, "sharedActivityManager"));
    v14 = objc_retainAutorelease(v11);
    objc_msgSend(v13, "osTransactionCreate:transaction:", objc_msgSend(v14, "UTF8String"), v12);

    +[WAUtil incrementValueForKey:inMutableDict:onQueue:](WAUtil, "incrementValueForKey:inMutableDict:onQueue:", CFSTR("Client: Trigger Datapath Diagnostic"), v4[86], v4[11]);
    v15 = *(_QWORD *)(a1 + 64);
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "token"));
    objc_msgSend(v4, "_triggerDatapathDiagnosticsAndCollectUpdates:forProcessToken:waMessage:andReply:", v15, v16, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

    v17 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](WAActivityManager, "sharedActivityManager"));
    objc_msgSend(v17, "osTransactionComplete:", v12);

    v18 = 0;
  }

  objc_autoreleasePoolPop(v2);
}

void sub_100049358(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_10004936C(uint64_t a1)
{
  void *v2;
  _QWORD *WeakRetained;
  void *v4;
  void *v5;
  unsigned __int8 v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  void *v30;
  __int16 v31;
  unsigned int v32;
  __int16 v33;
  const __CFString *v34;

  v2 = objc_autoreleasePoolPush();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "connection"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "valueForEntitlement:", CFSTR("com.apple.private.wifianalytics")));
  v6 = objc_msgSend(v5, "BOOLValue");

  if ((v6 & 1) != 0)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "connection"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("com.apple.wifianalytics.pid_%d.%s"), objc_msgSend(v7, "processIdentifier"), "-[WAEngine xpcConnection:getDpsStatsandReply:]_block_invoke"));

    v9 = objc_retainAutorelease(v8);
    v10 = (void *)os_transaction_create(objc_msgSend(v9, "UTF8String"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](WAActivityManager, "sharedActivityManager"));
    v12 = objc_retainAutorelease(v9);
    objc_msgSend(v11, "osTransactionCreate:transaction:", objc_msgSend(v12, "UTF8String"), v10);

    +[WAUtil incrementValueForKey:inMutableDict:onQueue:](WAUtil, "incrementValueForKey:inMutableDict:onQueue:", CFSTR("Client: Get DPS Stats"), WeakRetained[86], WeakRetained[11]);
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_DPSQuickRecoveryEngineObj"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "recommendationEngine"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "dpsWDBudgetDict"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "updateDpsStats:", v15));
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithDictionary:](NSDictionary, "dictionaryWithDictionary:", v16));

    v18 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](WAActivityManager, "sharedActivityManager"));
    objc_msgSend(v18, "osTransactionComplete:", v10);

  }
  else
  {
    v20 = WALogCategoryDefaultHandle();
    v21 = objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "token"));
      v23 = (void *)objc_claimAutoreleasedReturnValue(+[WAUtil trimTokenForLogging:](WAUtil, "trimTokenForLogging:", v22));
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "connection"));
      *(_DWORD *)buf = 136447234;
      v26 = "-[WAEngine xpcConnection:getDpsStatsandReply:]_block_invoke";
      v27 = 1024;
      v28 = 1340;
      v29 = 2112;
      v30 = v23;
      v31 = 1024;
      v32 = objc_msgSend(v24, "processIdentifier");
      v33 = 2112;
      v34 = CFSTR("com.apple.private.wifianalytics");
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%{public}s::%d:XPC: ERROR: %@ (%d) is not entitled with WA_XPC_ENTITLEMENT for %@, rejecting connection!!!", buf, 0x2Cu);

    }
    v12 = 0;
    v17 = 0;
  }
  v19 = *(_QWORD *)(a1 + 40);
  if (v19)
    (*(void (**)(uint64_t, void *, _QWORD))(v19 + 16))(v19, v17, 0);

  objc_autoreleasePoolPop(v2);
}

void sub_100049768(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_10004977C(uint64_t a1)
{
  void *v2;
  id WeakRetained;
  void *v4;
  void *v5;
  unsigned __int8 v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  void *v29;
  __int16 v30;
  unsigned int v31;
  __int16 v32;
  const __CFString *v33;

  v2 = objc_autoreleasePoolPush();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "connection"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "valueForEntitlement:", CFSTR("com.apple.private.wifianalytics")));
  v6 = objc_msgSend(v5, "BOOLValue");

  if ((v6 & 1) != 0)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "connection"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("com.apple.wifianalytics.pid_%d.%s"), objc_msgSend(v7, "processIdentifier"), "-[WAEngine xpcConnection:getUsageStatsandReply:]_block_invoke"));

    v9 = objc_retainAutorelease(v8);
    v10 = (void *)os_transaction_create(objc_msgSend(v9, "UTF8String"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](WAActivityManager, "sharedActivityManager"));
    v12 = objc_retainAutorelease(v9);
    objc_msgSend(v11, "osTransactionCreate:transaction:", objc_msgSend(v12, "UTF8String"), v10);

    +[WAUtil incrementValueForKey:inMutableDict:onQueue:](WAUtil, "incrementValueForKey:inMutableDict:onQueue:", CFSTR("Client: Get Usage Stats"), *((_QWORD *)WeakRetained + 86), *((_QWORD *)WeakRetained + 11));
    objc_msgSend(WeakRetained, "_calculateEstimatedUptime");
    objc_msgSend(WeakRetained, "_calculateProcessUsage");
    objc_msgSend(WeakRetained, "_calculateProfileUptime");
    v13 = objc_alloc_init((Class)NSMutableDictionary);
    objc_msgSend(v13, "setObject:forKey:", *((_QWORD *)WeakRetained + 86), CFSTR("Module_Engine"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)WeakRetained + 13), "getCachedUsage"));
    v15 = objc_msgSend(v14, "copy");

    if (v15)
      objc_msgSend(v13, "setObject:forKey:", v15, CFSTR("Module_IOR"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "nowCacheUsageForTelemetry"));
    +[WAUtil logNestedDictionary:indent:prefix:](WAUtil, "logNestedDictionary:indent:prefix:", v16, 0, CFSTR("getUsageStatsandReply "));

    v17 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](WAActivityManager, "sharedActivityManager"));
    objc_msgSend(v17, "osTransactionComplete:", v10);

  }
  else
  {
    v19 = WALogCategoryDefaultHandle();
    v20 = objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "token"));
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[WAUtil trimTokenForLogging:](WAUtil, "trimTokenForLogging:", v21));
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "connection"));
      *(_DWORD *)buf = 136447234;
      v25 = "-[WAEngine xpcConnection:getUsageStatsandReply:]_block_invoke";
      v26 = 1024;
      v27 = 1370;
      v28 = 2112;
      v29 = v22;
      v30 = 1024;
      v31 = objc_msgSend(v23, "processIdentifier");
      v32 = 2112;
      v33 = CFSTR("com.apple.private.wifianalytics");
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "%{public}s::%d:XPC: ERROR: %@ (%d) is not entitled with WA_XPC_ENTITLEMENT for %@, rejecting connection!!!", buf, 0x2Cu);

    }
    v12 = 0;
    v15 = 0;
    v13 = 0;
  }
  v18 = *(_QWORD *)(a1 + 48);
  if (v18)
    (*(void (**)(uint64_t, id, _QWORD))(v18 + 16))(v18, v13, 0);

  objc_autoreleasePoolPop(v2);
}

void sub_100049BCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_100049BE0(uint64_t a1)
{
  void *v2;
  _QWORD *WeakRetained;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;
  NSObject *v14;
  NSErrorUserInfoKey v15;
  const __CFString *v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  int v20;

  v2 = objc_autoreleasePoolPush();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if ((objc_msgSend(WeakRetained, "submitterMapCheck:group:", *(_QWORD *)(a1 + 32), 5) & 1) != 0)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "connection"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("com.apple.wifianalytics.pid_%d.%s"), objc_msgSend(v4, "processIdentifier"), "-[WAEngine xpcConnection:setDeviceAnalyticsConfiguration:andReply:]_block_invoke"));

    v6 = objc_retainAutorelease(v5);
    v7 = (void *)os_transaction_create(objc_msgSend(v6, "UTF8String"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](WAActivityManager, "sharedActivityManager"));
    v9 = objc_retainAutorelease(v6);
    objc_msgSend(v8, "osTransactionCreate:transaction:", objc_msgSend(v9, "UTF8String"), v7);

    +[WAUtil incrementValueForKey:inMutableDict:onQueue:](WAUtil, "incrementValueForKey:inMutableDict:onQueue:", CFSTR("Client: Set Device Analytics Config"), WeakRetained[86], WeakRetained[11]);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_setDeviceAnalyticsConfiguration:", *(_QWORD *)(a1 + 40)));
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](WAActivityManager, "sharedActivityManager"));
    objc_msgSend(v11, "osTransactionComplete:", v7);

  }
  else
  {
    v13 = WALogCategoryDefaultHandle();
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v18 = "-[WAEngine xpcConnection:setDeviceAnalyticsConfiguration:andReply:]_block_invoke";
      v19 = 1024;
      v20 = 1412;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:not registered, bailing", buf, 0x12u);
    }

    v15 = NSLocalizedFailureReasonErrorKey;
    v16 = CFSTR("WAErrorCodeNotRegistered");
    v9 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v16, &v15, 1));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.wifi.analytics.errordomain"), 9009, v9));
  }

  v12 = *(_QWORD *)(a1 + 48);
  if (v12)
    (*(void (**)(uint64_t, _QWORD, void *))(v12 + 16))(v12, 0, v10);

  objc_autoreleasePoolPop(v2);
}

void sub_100049F30(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_100049F44(uint64_t a1)
{
  void *v2;
  _QWORD *WeakRetained;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  void *v16;
  NSErrorUserInfoKey v17;
  const __CFString *v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  int v22;

  v2 = objc_autoreleasePoolPush();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if ((objc_msgSend(WeakRetained, "submitterMapCheck:group:", *(_QWORD *)(a1 + 32), 5) & 1) != 0)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "connection"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("com.apple.wifianalytics.pid_%d.%s"), objc_msgSend(v4, "processIdentifier"), "-[WAEngine xpcConnection:getDeviceAnalyticsConfigurationAndReply:]_block_invoke"));

    v6 = objc_retainAutorelease(v5);
    v7 = (void *)os_transaction_create(objc_msgSend(v6, "UTF8String"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](WAActivityManager, "sharedActivityManager"));
    v9 = objc_retainAutorelease(v6);
    objc_msgSend(v8, "osTransactionCreate:transaction:", objc_msgSend(v9, "UTF8String"), v7);

    +[WAUtil incrementValueForKey:inMutableDict:onQueue:](WAUtil, "incrementValueForKey:inMutableDict:onQueue:", CFSTR("Client: Get Device Analytics Config"), WeakRetained[86], WeakRetained[11]);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_getDeviceAnalyticsConfiguration"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](WAActivityManager, "sharedActivityManager"));
    objc_msgSend(v11, "osTransactionComplete:", v7);

    v12 = 0;
  }
  else
  {
    v14 = WALogCategoryDefaultHandle();
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v20 = "-[WAEngine xpcConnection:getDeviceAnalyticsConfigurationAndReply:]_block_invoke";
      v21 = 1024;
      v22 = 1439;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:not registered, bailing", buf, 0x12u);
    }

    v17 = NSLocalizedFailureReasonErrorKey;
    v18 = CFSTR("WAErrorCodeNotRegistered");
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v18, &v17, 1));
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.wifi.analytics.errordomain"), 9009, v16));

    v9 = 0;
    v10 = 0;
  }
  v13 = *(_QWORD *)(a1 + 40);
  if (v13)
    (*(void (**)(uint64_t, void *, void *))(v13 + 16))(v13, v10, v12);

  objc_autoreleasePoolPop(v2);
}

void sub_10004A2D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_10004A2EC(uint64_t a1)
{
  void *v2;
  _QWORD *WeakRetained;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  void *v16;
  NSErrorUserInfoKey v17;
  const __CFString *v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  int v22;

  v2 = objc_autoreleasePoolPush();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if ((objc_msgSend(WeakRetained, "submitterMapCheck:group:", *(_QWORD *)(a1 + 32), 5) & 1) != 0)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "connection"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("com.apple.wifianalytics.pid_%d.%s"), objc_msgSend(v4, "processIdentifier"), "-[WAEngine xpcConnection:summarizeDeviceAnalyticsForNetwork:maxAgeInDays:andReply:]_block_invoke"));

    v6 = objc_retainAutorelease(v5);
    v7 = (void *)os_transaction_create(objc_msgSend(v6, "UTF8String"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](WAActivityManager, "sharedActivityManager"));
    v9 = objc_retainAutorelease(v6);
    objc_msgSend(v8, "osTransactionCreate:transaction:", objc_msgSend(v9, "UTF8String"), v7);

    +[WAUtil incrementValueForKey:inMutableDict:onQueue:](WAUtil, "incrementValueForKey:inMutableDict:onQueue:", CFSTR("Client: Summarize Device Analytics For Network"), WeakRetained[86], WeakRetained[11]);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_summarizeDeviceAnalyticsForNetwork:maxAgeInDays:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 64)));
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](WAActivityManager, "sharedActivityManager"));
    objc_msgSend(v11, "osTransactionComplete:", v7);

    v12 = 0;
  }
  else
  {
    v14 = WALogCategoryDefaultHandle();
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v20 = "-[WAEngine xpcConnection:summarizeDeviceAnalyticsForNetwork:maxAgeInDays:andReply:]_block_invoke";
      v21 = 1024;
      v22 = 1467;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:not registered, bailing", buf, 0x12u);
    }

    v17 = NSLocalizedFailureReasonErrorKey;
    v18 = CFSTR("WAErrorCodeNotRegistered");
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v18, &v17, 1));
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.wifi.analytics.errordomain"), 9009, v16));

    v9 = 0;
    v10 = 0;
  }
  v13 = *(_QWORD *)(a1 + 48);
  if (v13)
    (*(void (**)(uint64_t, void *, void *))(v13 + 16))(v13, v10, v12);

  objc_autoreleasePoolPop(v2);
}

void sub_10004A6F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10004A714(uint64_t a1)
{
  void *v2;
  _QWORD *WeakRetained;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  id v15;
  NSObject *v16;
  uint64_t v17;
  NSErrorUserInfoKey v18;
  const __CFString *v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  int v23;

  v2 = objc_autoreleasePoolPush();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if ((objc_msgSend(WeakRetained, "submitterMapCheck:group:", *(_QWORD *)(a1 + 32), 5) & 1) != 0)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "connection"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("com.apple.wifianalytics.pid_%d.%s"), objc_msgSend(v4, "processIdentifier"), "-[WAEngine xpcConnection:triggerDeviceAnalyticsStoreMigrationAndReply:]_block_invoke"));

    v6 = objc_retainAutorelease(v5);
    v7 = (void *)os_transaction_create(objc_msgSend(v6, "UTF8String"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](WAActivityManager, "sharedActivityManager"));
    v9 = objc_retainAutorelease(v6);
    objc_msgSend(v8, "osTransactionCreate:transaction:", objc_msgSend(v9, "UTF8String"), v7);

    +[WAUtil incrementValueForKey:inMutableDict:onQueue:](WAUtil, "incrementValueForKey:inMutableDict:onQueue:", CFSTR("Client: Trigger Device Analytics Store Migration"), WeakRetained[86], WeakRetained[11]);
    objc_msgSend(WeakRetained, "triggerDeviceAnalyticsStoreMigrationAndReply:", *(_QWORD *)(a1 + 40));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](WAActivityManager, "sharedActivityManager"));
    objc_msgSend(v10, "osTransactionComplete:", v7);

    v11 = 0;
  }
  else
  {
    v12 = WALogCategoryDefaultHandle();
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v21 = "-[WAEngine xpcConnection:triggerDeviceAnalyticsStoreMigrationAndReply:]_block_invoke";
      v22 = 1024;
      v23 = 1495;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:not registered, bailing", buf, 0x12u);
    }

    v18 = NSLocalizedFailureReasonErrorKey;
    v19 = CFSTR("WAErrorCodeNotRegistered");
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v19, &v18, 1));
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.wifi.analytics.errordomain"), 9009, v14));

    v15 = WALogCategoryDefaultHandle();
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v21 = "-[WAEngine xpcConnection:triggerDeviceAnalyticsStoreMigrationAndReply:]_block_invoke";
      v22 = 1024;
      v23 = 1509;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Result for triggerDeviceAnalyticsStoreMigrationAndReply via XPC - Error: WAErrorCodeNotRegistered", buf, 0x12u);
    }

    v17 = *(_QWORD *)(a1 + 40);
    if (v17)
      (*(void (**)(uint64_t, _QWORD, void *))(v17 + 16))(v17, 0, v11);
  }

  objc_autoreleasePoolPop(v2);
}

void sub_10004AC70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10004AC90(uint64_t a1)
{
  void *v2;
  _QWORD *WeakRetained;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;

  v2 = objc_autoreleasePoolPush();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "connection"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("com.apple.wifianalytics.pid_%d.%s"), objc_msgSend(v4, "processIdentifier"), "-[WAEngine xpcConnection:sendMemoryPressureRequestAndReply:]_block_invoke"));

  v6 = objc_retainAutorelease(v5);
  v7 = (void *)os_transaction_create(objc_msgSend(v6, "UTF8String"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](WAActivityManager, "sharedActivityManager"));
  v9 = objc_retainAutorelease(v6);
  objc_msgSend(v8, "osTransactionCreate:transaction:", objc_msgSend(v9, "UTF8String"), v7);

  +[WAUtil incrementValueForKey:inMutableDict:onQueue:](WAUtil, "incrementValueForKey:inMutableDict:onQueue:", CFSTR("Client: Send Memory Pressure Request"), WeakRetained[86], WeakRetained[11]);
  objc_msgSend(WeakRetained, "_sendMemoryPressureRequestAndReply:", *(_QWORD *)(a1 + 40));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](WAActivityManager, "sharedActivityManager"));
  objc_msgSend(v10, "osTransactionComplete:", v7);

  objc_autoreleasePoolPop(v2);
}

void sub_10004B148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  _Block_object_dispose(&a18, 8);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_10004B174(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10004B184(uint64_t a1)
{

}

void sub_10004B18C(uint64_t a1)
{
  void *v2;
  _QWORD *WeakRetained;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[4];
  id v23;
  NSErrorUserInfoKey v24;
  const __CFString *v25;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  int v29;

  v2 = objc_autoreleasePoolPush();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if ((objc_msgSend(WeakRetained, "submitterMapCheck:group:", *(_QWORD *)(a1 + 32), 3) & 1) != 0)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "connection"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("com.apple.wifianalytics.pid_%d.%s"), objc_msgSend(v4, "processIdentifier"), "-[WAEngine xpcConnection:issueIOReportManagementCommand:andReply:]_block_invoke"));

    v6 = objc_retainAutorelease(v5);
    v7 = (void *)os_transaction_create(objc_msgSend(v6, "UTF8String"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](WAActivityManager, "sharedActivityManager"));
    v9 = objc_retainAutorelease(v6);
    objc_msgSend(v8, "osTransactionCreate:transaction:", objc_msgSend(v9, "UTF8String"), v7);

    +[WAUtil incrementValueForKey:inMutableDict:onQueue:](WAUtil, "incrementValueForKey:inMutableDict:onQueue:", CFSTR("Client: Issue IOReport Managemen Command"), WeakRetained[86], WeakRetained[11]);
    v10 = *(_QWORD *)(a1 + 64);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "token"));
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_10004B4CC;
    v22[3] = &unk_1000CD2E0;
    v23 = *(id *)(a1 + 40);
    objc_msgSend(WeakRetained, "_issueIOReportManagementCommand:forProcessToken:andReply:", v10, v11, v22);

    v12 = WALogCategoryDefaultHandle();
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v27 = "-[WAEngine xpcConnection:issueIOReportManagementCommand:andReply:]_block_invoke";
      v28 = 1024;
      v29 = 1564;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:xpcConnection _issueIOReportManagementCommand complete", buf, 0x12u);
    }

    v14 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](WAActivityManager, "sharedActivityManager"));
    objc_msgSend(v14, "osTransactionComplete:", v7);

  }
  else
  {
    v15 = WALogCategoryDefaultHandle();
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v27 = "-[WAEngine xpcConnection:issueIOReportManagementCommand:andReply:]_block_invoke";
      v28 = 1024;
      v29 = 1555;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:not registered, bailing", buf, 0x12u);
    }

    v24 = NSLocalizedFailureReasonErrorKey;
    v25 = CFSTR("WAErrorCodeNotRegistered");
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v25, &v24, 1));
    v18 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.wifi.analytics.errordomain"), 9009, v17));
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v20 = *(void **)(v19 + 40);
    *(_QWORD *)(v19 + 40) = v18;

    v21 = *(_QWORD *)(a1 + 40);
    if (v21)
      (*(void (**)(uint64_t, _QWORD, _QWORD))(v21 + 16))(v21, 0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
  }

  objc_autoreleasePoolPop(v2);
}

uint64_t sub_10004B4CC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10004B7A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10004B7BC(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = objc_autoreleasePoolPush();
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 120), "objectForKeyedSubscript:", a1[5]));
  v4 = *(_QWORD *)(a1[6] + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  objc_autoreleasePoolPop(v2);
}

void sub_10004B8A0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  void *v13;

  v2 = objc_autoreleasePoolPush();
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "processTokenToXPCConnectionMap"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));

  if (v4)
  {
    v5 = WALogCategoryDefaultHandle();
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[WAUtil trimTokenForLogging:](WAUtil, "trimTokenForLogging:", *(_QWORD *)(a1 + 40)));
      v8 = 136446722;
      v9 = "-[WAEngine sendWakeUpNotificationForProcessWithName:]_block_invoke";
      v10 = 1024;
      v11 = 1607;
      v12 = 2112;
      v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:It appears the XPC connection is still valid (no invalidation handler called). No need to send wake up notification for process with token ending: %@", (uint8_t *)&v8, 0x1Cu);

    }
  }
  else
  {
    notify_post((const char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 40)), "UTF8String"));
  }
  objc_autoreleasePoolPop(v2);
}

void sub_10004BA78(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_10004BA8C(uint64_t a1)
{
  void *v2;
  id WeakRetained;
  id v4;
  NSObject *v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;

  v2 = objc_autoreleasePoolPush();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WALogCategoryDefaultHandle();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 136446466;
    v7 = "-[WAEngine prepareToTerminateViaEagerExit]_block_invoke";
    v8 = 1024;
    v9 = 1623;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:prepareToTerminateAnyReply...", (uint8_t *)&v6, 0x12u);
  }

  objc_msgSend(WeakRetained, "_prepareToTerminateViaEagerExit");
  objc_autoreleasePoolPop(v2);
}

void sub_10004BD7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_10004BD90(uint64_t a1)
{
  void *v2;
  id WeakRetained;
  id v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;

  v2 = objc_autoreleasePoolPush();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = WALogCategoryDefaultHandle();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 136446466;
    v8 = "-[WAEngine prepareToTerminateAnyReply:]_block_invoke";
    v9 = 1024;
    v10 = 1642;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:prepareToTerminateAnyReply...", (uint8_t *)&v7, 0x12u);
  }

  objc_msgSend(WeakRetained, "_prepareToTerminate");
  v6 = *(_QWORD *)(a1 + 32);
  if (v6)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v6 + 16))(v6, 0, 0);

  objc_autoreleasePoolPop(v2);
}

void sub_10004C1F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10004C214(uint64_t a1)
{
  void *v2;
  _QWORD *WeakRetained;
  const __CFString *v4;
  unsigned int v5;
  id v6;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  uint32_t v10;
  NSObject *v11;
  _QWORD *v12;
  void *v13;
  id v14;
  _QWORD block[4];
  id v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  unsigned int v24;
  __int16 v25;
  unsigned int v26;
  __int16 v27;
  unsigned int v28;
  __int16 v29;
  unsigned int v30;

  v2 = objc_autoreleasePoolPush();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (*(_BYTE *)(a1 + 40))
    v4 = CFSTR("Dispatch: Received Memory Critical");
  else
    v4 = CFSTR("Dispatch: Received Memory Warning");
  +[WAUtil incrementValueForKey:inMutableDict:onQueue:](WAUtil, "incrementValueForKey:inMutableDict:onQueue:", v4, WeakRetained[86], WeakRetained[11]);
  if ((objc_msgSend(WeakRetained, "dpsStudyInProgress") & 1) != 0
    || (objc_msgSend(WeakRetained, "slowWiFiStudyInProgress") & 1) != 0
    || (objc_msgSend(WeakRetained, "dnsStudyInProgress") & 1) != 0)
  {
    v5 = 1;
  }
  else
  {
    v5 = objc_msgSend(WeakRetained, "isNWActivityInProgress");
  }
  if ((objc_msgSend(WeakRetained, "isMemoryPressureRequestDeferred") & 1) == 0 && v5)
  {
    objc_msgSend(WeakRetained, "setIsMemoryPressureRequestDeferred:", 1);
    v6 = WALogCategoryDefaultHandle();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136447746;
      v18 = "-[WAEngine handleMemoryWarning:]_block_invoke";
      v19 = 1024;
      v20 = 1684;
      v21 = 2080;
      v22 = "-[WAEngine handleMemoryWarning:]_block_invoke";
      v23 = 1024;
      v24 = objc_msgSend(WeakRetained, "dpsStudyInProgress");
      v25 = 1024;
      v26 = objc_msgSend(WeakRetained, "slowWiFiStudyInProgress");
      v27 = 1024;
      v28 = objc_msgSend(WeakRetained, "dnsStudyInProgress");
      v29 = 1024;
      v30 = objc_msgSend(WeakRetained, "isNWActivityInProgress");
      v8 = "%{public}s::%d:%s: deferred (DPS in progress=%d, SlowWiFi in progress=%d, DNS-SlowWiFi in progress=%d, NWActi"
           "vity in progress=%d.";
      v9 = v7;
      v10 = 52;
LABEL_15:
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v8, buf, v10);
      goto LABEL_16;
    }
    goto LABEL_16;
  }
  if ((v5 & 1) == 0)
  {
    v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "mutexQueue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10004C4D0;
    block[3] = &unk_1000CCDB0;
    v12 = WeakRetained;
    v16 = v12;
    dispatch_sync(v11, block);

    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "iorMessagePopulator"));
    objc_msgSend(v13, "freeIORCaches");

    objc_msgSend(v12, "setIsMemoryPressureRequestDeferred:", 0);
    v14 = WALogCategoryDefaultHandle();
    v7 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446722;
      v18 = "-[WAEngine handleMemoryWarning:]_block_invoke_2";
      v19 = 1024;
      v20 = 1692;
      v21 = 2080;
      v22 = "-[WAEngine handleMemoryWarning:]_block_invoke_2";
      v8 = "%{public}s::%d:%s: caches freed.";
      v9 = v7;
      v10 = 28;
      goto LABEL_15;
    }
LABEL_16:

  }
  objc_autoreleasePoolPop(v2);
}

void sub_10004C4D0(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = objc_autoreleasePoolPush();
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cachedModelObjectsKeyToMessageMap"));
  objc_msgSend(v3, "removeAllObjects");

  objc_autoreleasePoolPop(v2);
}

void sub_1000523A4(id a1)
{
  unint64_t v1;
  unint64_t v2;
  mach_timebase_info info;

  info = 0;
  if (!mach_timebase_info(&info))
  {
    LODWORD(v1) = info.numer;
    LODWORD(v2) = info.denom;
    *(double *)&qword_1000ECC00 = (double)v1 / (double)v2;
  }
}

id sub_100052E00(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id result;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2 = WALogCategoryDefaultHandle();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 136446466;
    v6 = "-[WAEngine _enableWorkReportRecurringTimer]_block_invoke";
    v7 = 1024;
    v8 = 2513;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Performing scheduled _reportHourlyWorkReport", (uint8_t *)&v5, 0x12u);
  }

  result = objc_msgSend(*(id *)(a1 + 32), "_reportWorkReportInterval");
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 58) = 0;
  return result;
}

void sub_10005478C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, uint64_t a18, char a19)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

id sub_1000547BC(uint64_t a1)
{
  _QWORD *WeakRetained;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  NSObject *v7;
  id v8;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    +[WAUtil incrementValueForKey:inMutableDict:onQueue:](WAUtil, "incrementValueForKey:inMutableDict:onQueue:", CFSTR("Telemetry: Work Report Accepted"), WeakRetained[86], WeakRetained[11]);
    v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_createWorkReportDictionaryForTelemetryAndRollBucket"));
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v5 = *(void **)(v4 + 40);
    *(_QWORD *)(v4 + 40) = v3;

  }
  v6 = WALogCategoryDefaultHandle();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v10 = 136446466;
    v11 = "-[WAEngine _reportWorkReportInterval]_block_invoke";
    v12 = 1024;
    v13 = 2752;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Sending telemetry for com.apple.wifianalyticsd.workreport", (uint8_t *)&v10, 0x12u);
  }

  v8 = *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return v8;
}

void sub_100055440(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;

  v2 = objc_autoreleasePoolPush();
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cachedModelObjectsKeyToMessageMap"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 56)));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v4));
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
  {
    v9 = objc_claimAutoreleasedReturnValue(+[WAUtil getMessageInstanceForKey:andGroupType:](WAUtil, "getMessageInstanceForKey:andGroupType:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56)));
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v11 = *(void **)(v10 + 40);
    *(_QWORD *)(v10 + 40) = v9;

    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cachedModelObjectsKeyToMessageMap"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 56)));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", v13));

    if (!v14)
    {
      v15 = objc_alloc_init((Class)NSMutableDictionary);
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cachedModelObjectsKeyToMessageMap"));
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 56)));
      objc_msgSend(v16, "setObject:forKeyedSubscript:", v15, v17);

    }
    v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cachedModelObjectsKeyToMessageMap"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 56)));
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectForKeyedSubscript:", v20));
    objc_msgSend(v21, "setObject:forKeyedSubscript:", v18, *(_QWORD *)(a1 + 40));

  }
  objc_autoreleasePoolPop(v2);
}

uint64_t sub_1000558F4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

uint64_t sub_100055BE8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

uint64_t sub_100055EF8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

void sub_100057074(uint64_t a1)
{
  void *v2;

  v2 = objc_autoreleasePoolPush();
  objc_msgSend(*(id *)(a1 + 32), "processWiFiAnalyticsMessageJSONFilesInTmpDir:", 1);
  objc_autoreleasePoolPop(v2);
}

void sub_10005B0A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_10005B0D8(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *i;
  void *v14;
  void *v15;
  void *v16;
  unsigned int v17;
  void *v18;
  void *v19;
  _BOOL4 v20;
  void *v21;
  void *v22;
  _BOOL4 v23;
  void *v24;
  void *v25;
  _BOOL4 v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  id v32;
  uint64_t v33;
  void *j;
  void *v35;
  void *v36;
  void *v37;
  unsigned int v38;
  uint64_t v39;
  void *v40;
  void *v41;
  id v42;
  id v43;
  uint64_t v44;
  void *k;
  void *v46;
  void *v47;
  void *v48;
  unsigned int v49;
  _BOOL8 v50;
  uint64_t v51;
  id v52;
  NSObject *v53;
  unsigned int v54;
  id v55;
  NSObject *v56;
  id v57;
  NSObject *v58;
  uint64_t v59;
  id v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  id v66;
  NSObject *v67;
  id v68;
  NSObject *v69;
  void *v70;
  void *v71;
  void *v72;
  id v73;
  NSObject *v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  id v80;
  NSObject *v81;
  id v82;
  NSObject *v83;
  void *v84;
  double v85;
  id v86;
  NSObject *v87;
  id v88;
  NSObject *v89;
  void *v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  id v97;
  NSObject *v98;
  uint64_t v99;
  id v100;
  NSObject *v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  void *v107;
  void *v108;
  id v109;
  NSObject *v110;
  NSObject *v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  id v115;
  NSObject *v116;
  const char *v117;
  uint64_t v118;
  id v119;
  NSObject *v120;
  NSObject *v121;
  void *v122;
  uint64_t v123;
  const char *v124;
  NSObject *v125;
  os_log_type_t v126;
  uint32_t v127;
  id v128;
  NSObject *v129;
  id v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  id v134;
  uint64_t v135;
  id obj;
  uint64_t v137;
  id v138;
  uint64_t v139;
  unsigned int v140;
  int v141;
  uint64_t v142;
  _QWORD v143[5];
  __int128 v144;
  char v145;
  BOOL v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  NSErrorUserInfoKey v163;
  const __CFString *v164;
  NSErrorUserInfoKey v165;
  const __CFString *v166;
  NSErrorUserInfoKey v167;
  const __CFString *v168;
  uint8_t buf[4];
  const char *v170;
  __int16 v171;
  int v172;
  __int16 v173;
  _BYTE v174[10];
  uint64_t v175;
  int v176;
  __int16 v177;
  id v178;
  _BYTE v179[128];
  _BYTE v180[128];
  _BYTE v181[128];
  _BYTE v182[128];

  v134 = a3;
  v135 = a1;
  v159 = 0u;
  v160 = 0u;
  v161 = 0u;
  v162 = 0u;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("NWA_interfaceStats")));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "repeatableValues"));

  obj = v5;
  v138 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v159, v182, 16);
  if (v138)
  {
    v142 = 0;
    v141 = 0;
    v137 = *(_QWORD *)v160;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v160 != v137)
          objc_enumerationMutation(obj);
        v139 = v6;
        v7 = *(void **)(*((_QWORD *)&v159 + 1) + 8 * v6);
        v155 = 0u;
        v156 = 0u;
        v157 = 0u;
        v158 = 0u;
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "fieldForKey:", CFSTR("NWAIS_peers")));
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "repeatableValues"));

        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v155, v181, 16);
        if (v10)
        {
          v11 = v10;
          v12 = *(_QWORD *)v156;
          do
          {
            for (i = 0; i != v11; i = (char *)i + 1)
            {
              if (*(_QWORD *)v156 != v12)
                objc_enumerationMutation(v9);
              v14 = *(void **)(*((_QWORD *)&v155 + 1) + 8 * (_QWORD)i);
              v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "fieldForKey:", CFSTR("NWAPS_hashID")));
              v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "stringValue"));
              v17 = objc_msgSend(v16, "isEqualToString:", CFSTR("00:00:00:00:00:00"));

              if (v17)
              {
                v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "fieldForKey:", CFSTR("NWAPS_ccas")));
                v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "repeatableValues"));
                v20 = objc_msgSend(v19, "count") != 0;

                v141 |= v20;
                v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "fieldForKey:", CFSTR("NWAPS_acCompletions")));
                v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "repeatableValues"));
                v23 = objc_msgSend(v22, "count") != 0;

                LODWORD(v142) = v23 | v142;
                v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "fieldForKey:", CFSTR("NWAPS_txLatencyBEs")));
                v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "repeatableValues"));
                v26 = objc_msgSend(v25, "count") != 0;

                HIDWORD(v142) |= v26;
              }
              v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "fieldForKey:", CFSTR("NWAPS_hashID")));
              v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "stringValue"));
              objc_msgSend(v28, "isEqualToString:", CFSTR("00:00:00:00:00:00"));

            }
            v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v155, v181, 16);
          }
          while (v11);
        }

        v6 = v139 + 1;
      }
      while ((id)(v139 + 1) != v138);
      v138 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v159, v182, 16);
    }
    while (v138);
  }
  else
  {
    v142 = 0;
    v141 = 0;
  }

  v153 = 0u;
  v154 = 0u;
  v151 = 0u;
  v152 = 0u;
  v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v135 + 56) + 8) + 40), "fieldForKey:", CFSTR("NWA_interfaceStats")));
  v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "repeatableValues"));

  v31 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v151, v180, 16);
  if (v31)
  {
    v32 = v31;
    v33 = *(_QWORD *)v152;
    do
    {
      for (j = 0; j != v32; j = (char *)j + 1)
      {
        if (*(_QWORD *)v152 != v33)
          objc_enumerationMutation(v30);
        v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v151 + 1) + 8 * (_QWORD)j), "fieldForKey:", CFSTR("NWAIS_assoc")));
        v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "subMessageValue"));
        v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "fieldForKey:", CFSTR("NWAA_linkChanged")));
        v38 = objc_msgSend(v37, "uint32Value");

      }
      v32 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v151, v180, 16);
    }
    while (v32);
    v39 = v38 != 0;
  }
  else
  {
    v39 = 0;
  }

  v149 = 0u;
  v150 = 0u;
  v147 = 0u;
  v148 = 0u;
  v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v135 + 56) + 8) + 40), "fieldForKey:", CFSTR("NWA_interfaceStats")));
  v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "repeatableValues"));

  v42 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v147, v179, 16);
  if (v42)
  {
    v43 = v42;
    v140 = v39;
    v44 = *(_QWORD *)v148;
    do
    {
      for (k = 0; k != v43; k = (char *)k + 1)
      {
        if (*(_QWORD *)v148 != v44)
          objc_enumerationMutation(v41);
        v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v147 + 1) + 8 * (_QWORD)k), "fieldForKey:", CFSTR("NWAIS_assoc")));
        v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "subMessageValue"));
        v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "fieldForKey:", CFSTR("NWAA_assocDoneSuccess")));
        v49 = objc_msgSend(v48, "uint32Value");

      }
      v43 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v147, v179, 16);
    }
    while (v43);
    v50 = v49 != 0;
    v39 = v140;
  }
  else
  {
    v50 = 0;
  }

  v51 = v135;
  objc_msgSend(*(id *)(v135 + 32), "setIsAssociatedStateKnown:", 1);
  objc_msgSend(*(id *)(v135 + 32), "setIsAssociated:", objc_msgSend(*(id *)(v135 + 32), "isAssociated"));
  v52 = WALogCategoryDefaultHandle();
  v53 = objc_claimAutoreleasedReturnValue(v52);
  if (os_signpost_enabled(v53))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v53, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "Engine NWActivity Poplulate", "", buf, 2u);
  }

  v54 = objc_msgSend(*(id *)(v135 + 32), "forceStudyErrorFromMsg");
  if (v54)
  {
    v55 = WALogCategoryDefaultHandle();
    v56 = objc_claimAutoreleasedReturnValue(v55);
    if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v170 = "-[WAEngine _triggerQueryForNWActivity:forProcessToken:andReply:]_block_invoke";
      v171 = 1024;
      v172 = 3586;
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Setting attemptRescan to true due to debug command kWAIORCommandForceStudyErrorFromMsg", buf, 0x12u);
    }

    objc_msgSend(*(id *)(v135 + 32), "setForceStudyErrorFromMsg:", 0);
  }
  if (objc_msgSend(v134, "code") == (id)9021
    || objc_msgSend(v134, "code") == (id)9022
    || objc_msgSend(v134, "code") == (id)9023
    || objc_msgSend(v134, "code") == (id)9024
    || objc_msgSend(v134, "code") == (id)9025
    || objc_msgSend(v134, "code") == (id)9026
    || ((v141 ^ 1) & 1) != 0
    || ((v39 ^ 1) & 1) != 0
    || ((v142 ^ 1) & 1) != 0
    || ((HIDWORD(v142) ^ 1) & 1) != 0)
  {
    v57 = WALogCategoryDefaultHandle();
    v58 = objc_claimAutoreleasedReturnValue(v57);
    if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136447746;
      v170 = "-[WAEngine _triggerQueryForNWActivity:forProcessToken:andReply:]_block_invoke";
      v171 = 1024;
      v172 = 3599;
      v173 = 1024;
      *(_DWORD *)v174 = v141 & 1;
      *(_WORD *)&v174[4] = 1024;
      *(_DWORD *)&v174[6] = v39;
      LOWORD(v175) = 1024;
      *(_DWORD *)((char *)&v175 + 2) = v142 & 1;
      HIWORD(v175) = 1024;
      v176 = BYTE4(v142) & 1;
      v177 = 2112;
      v178 = v134;
      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:NWA Doesn't have all fields hasCCA %u hasLinkChanged %u hasAcCompletions %u hastxLatencyBE %u error %@", buf, 0x34u);
    }

    if (objc_msgSend(*(id *)(v135 + 32), "everAssociated:assocDoneSuccess:", v39, v50))
    {
      if (v134)
      {
        v59 = *(_QWORD *)(*(_QWORD *)(v135 + 64) + 8);
        v60 = v134;
        v61 = *(void **)(v59 + 40);
        *(_QWORD *)(v59 + 40) = v60;
      }
      else
      {
        v167 = NSLocalizedFailureReasonErrorKey;
        v168 = CFSTR("WAErrorCodeOtherMissing");
        v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v168, &v167, 1));
        v77 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.wifi.analytics.errordomain"), 9028, v61));
        v78 = *(_QWORD *)(*(_QWORD *)(v135 + 64) + 8);
        v79 = *(void **)(v78 + 40);
        *(_QWORD *)(v78 + 40) = v77;

      }
      v80 = WALogCategoryDefaultHandle();
      v81 = objc_claimAutoreleasedReturnValue(v80);
      if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446722;
        v170 = "-[WAEngine _triggerQueryForNWActivity:forProcessToken:andReply:]_block_invoke";
        v171 = 1024;
        v172 = 3611;
        v173 = 2112;
        *(_QWORD *)v174 = v134;
        _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:NWActivity missing mandatory fields due to %@, everAssociated true, attemptRescan true", buf, 0x1Cu);
      }

      v51 = v135;
      goto LABEL_67;
    }
    v165 = NSLocalizedFailureReasonErrorKey;
    v166 = CFSTR("WAErrorCodeNeverAssociated");
    v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v166, &v165, 1));
    v63 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.wifi.analytics.errordomain"), 9027, v62));
    v64 = *(_QWORD *)(*(_QWORD *)(v135 + 64) + 8);
    v65 = *(void **)(v64 + 40);
    *(_QWORD *)(v64 + 40) = v63;

    v66 = WALogCategoryDefaultHandle();
    v67 = objc_claimAutoreleasedReturnValue(v66);
    if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446722;
      v170 = "-[WAEngine _triggerQueryForNWActivity:forProcessToken:andReply:]_block_invoke";
      v171 = 1024;
      v172 = 3616;
      v173 = 2112;
      *(_QWORD *)v174 = v134;
      _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:NWActivity missing mandatory fields due to %@, everAssociated false, attemptRescan false", buf, 0x1Cu);
    }

    v51 = v135;
  }
  if (v54)
  {
LABEL_67:
    v82 = WALogCategoryDefaultHandle();
    v83 = objc_claimAutoreleasedReturnValue(v82);
    if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v170 = "-[WAEngine _triggerQueryForNWActivity:forProcessToken:andReply:]_block_invoke";
      v171 = 1024;
      v172 = 3620;
      _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Attempting Rescan", buf, 0x12u);
    }

    v84 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    v76 = v84;
    if (*(_QWORD *)(*(_QWORD *)(v51 + 32) + 664) && (objc_msgSend(v84, "timeIntervalSinceDate:"), v85 > 30.0))
    {
      v86 = WALogCategoryDefaultHandle();
      v87 = objc_claimAutoreleasedReturnValue(v86);
      if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v170 = "-[WAEngine _triggerQueryForNWActivity:forProcessToken:andReply:]_block_invoke";
        v171 = 1024;
        v172 = 3624;
        _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Attemping determineChannelsPerIORPopulatable", buf, 0x12u);
      }

      v88 = WALogCategoryDefaultHandle();
      v89 = objc_claimAutoreleasedReturnValue(v88);
      if (os_signpost_enabled(v89))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v89, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "Engine NWActivity MissingChannelsRepopulate", "", buf, 2u);
      }

      v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v51 + 32), "iorMessagePopulator"));
      objc_msgSend(v90, "determineChannelsPerIORPopulatableWithinPopulatorBlock");

      v91 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v51 + 32), "iorMessagePopulator"));
      v92 = *(_QWORD *)(v51 + 72);
      v143[0] = _NSConcreteStackBlock;
      v94 = *(_QWORD *)(v51 + 32);
      v93 = *(_QWORD *)(v51 + 40);
      v95 = *(_OWORD *)(v51 + 56);
      v96 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v51 + 56) + 8) + 40);
      v143[1] = 3221225472;
      v143[2] = sub_10005C2B0;
      v143[3] = &unk_1000CD4B8;
      v145 = v39;
      v146 = v50;
      v143[4] = v94;
      v144 = v95;
      objc_msgSend(v91, "prepopulateMessageWithinPopulatorBlock:forProcess:groupType:andReply:", v96, v93, v92, v143);

      objc_storeStrong((id *)(*(_QWORD *)(v51 + 32) + 664), v76);
    }
    else
    {
      v97 = WALogCategoryDefaultHandle();
      v98 = objc_claimAutoreleasedReturnValue(v97);
      if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
      {
        v99 = *(_QWORD *)(*(_QWORD *)(v51 + 32) + 664);
        *(_DWORD *)buf = 136446722;
        v170 = "-[WAEngine _triggerQueryForNWActivity:forProcessToken:andReply:]_block_invoke";
        v171 = 1024;
        v172 = 3687;
        v173 = 2112;
        *(_QWORD *)v174 = v99;
        _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_ERROR, "%{public}s::%d:Rescanned too recently, waiting for 30s to elapse since last check at %@", buf, 0x1Cu);
      }

    }
    v100 = WALogCategoryDefaultHandle();
    v101 = objc_claimAutoreleasedReturnValue(v100);
    if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v170 = "-[WAEngine _triggerQueryForNWActivity:forProcessToken:andReply:]_block_invoke";
      v171 = 1024;
      v172 = 3689;
      _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Rescan Attempt Complete", buf, 0x12u);
    }

    goto LABEL_82;
  }
  if (v134)
    goto LABEL_83;
  v68 = WALogCategoryDefaultHandle();
  v69 = objc_claimAutoreleasedReturnValue(v68);
  if (os_signpost_enabled(v69))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v69, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "Engine NWActivity GetChannelApInfo", "", buf, 2u);
  }

  v70 = *(void **)(v51 + 32);
  v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v51 + 56) + 8) + 40), "fieldForKey:", CFSTR("NWA_controllerStats")));
  v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v71, "subMessageValue"));
  objc_msgSend(v70, "populateChannelInfo:", v72);

  v51 = v135;
  objc_msgSend(*(id *)(v135 + 32), "populateApProfile:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v135 + 56) + 8) + 40));
  v73 = WALogCategoryDefaultHandle();
  v74 = objc_claimAutoreleasedReturnValue(v73);
  if (os_signpost_enabled(v74))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v74, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "Engine NWActivity GetChannelApInfo", "", buf, 2u);
  }

  v75 = *(_QWORD *)(*(_QWORD *)(v135 + 64) + 8);
  v76 = *(void **)(v75 + 40);
  *(_QWORD *)(v75 + 40) = 0;
LABEL_82:

LABEL_83:
  v102 = *(_QWORD *)(v51 + 80);
  if (v102 == 1)
  {
    v118 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v51 + 64) + 8) + 40);
    v119 = WALogCategoryDefaultHandle();
    v120 = objc_claimAutoreleasedReturnValue(v119);
    v121 = v120;
    if (v118)
    {
      if (os_log_type_enabled(v120, OS_LOG_TYPE_ERROR))
      {
        v122 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v135 + 56) + 8)
                                                                            + 40), "key"));
        v123 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v135 + 64) + 8) + 40);
        *(_DWORD *)buf = 136446978;
        v170 = "-[WAEngine _triggerQueryForNWActivity:forProcessToken:andReply:]_block_invoke";
        v171 = 1024;
        v172 = 3707;
        v173 = 2112;
        *(_QWORD *)v174 = v122;
        *(_WORD *)&v174[8] = 2112;
        v175 = v123;
        v124 = "%{public}s::%d:Reply style 1, returning with %@ status %@";
        v125 = v121;
        v126 = OS_LOG_TYPE_ERROR;
        v127 = 38;
LABEL_95:
        _os_log_impl((void *)&_mh_execute_header, v125, v126, v124, buf, v127);

      }
    }
    else if (os_log_type_enabled(v120, OS_LOG_TYPE_DEBUG))
    {
      v122 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v135 + 56) + 8)
                                                                          + 40), "key"));
      *(_DWORD *)buf = 136446722;
      v170 = "-[WAEngine _triggerQueryForNWActivity:forProcessToken:andReply:]_block_invoke";
      v171 = 1024;
      v172 = 3709;
      v173 = 2112;
      *(_QWORD *)v174 = v122;
      v124 = "%{public}s::%d:Reply style 1, returning with %@ status Success";
      v125 = v121;
      v126 = OS_LOG_TYPE_DEBUG;
      v127 = 28;
      goto LABEL_95;
    }

    v128 = WALogCategoryDefaultHandle();
    v129 = objc_claimAutoreleasedReturnValue(v128);
    if (os_signpost_enabled(v129))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v129, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "Engine NWActivity Reply", "", buf, 2u);
    }

    (*(void (**)(void))(*(_QWORD *)(v135 + 48) + 16))();
    v130 = WALogCategoryDefaultHandle();
    v116 = objc_claimAutoreleasedReturnValue(v130);
    if (!os_signpost_enabled(v116))
      goto LABEL_101;
    *(_WORD *)buf = 0;
    v117 = "Engine NWActivity Reply";
    goto LABEL_100;
  }
  if (!v102)
  {
    v103 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v51 + 32), "submitterMap"));
    v104 = objc_claimAutoreleasedReturnValue(objc_msgSend(v103, "objectForKeyedSubscript:", *(_QWORD *)(v51 + 40)));
    v105 = v51;
    v106 = (void *)v104;
    v107 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(v105 + 72)));
    v108 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v106, "objectForKeyedSubscript:", v107));

    v109 = WALogCategoryDefaultHandle();
    v110 = objc_claimAutoreleasedReturnValue(v109);
    v111 = v110;
    if (!v108)
    {
      if (os_log_type_enabled(v110, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v170 = "-[WAEngine _triggerQueryForNWActivity:forProcessToken:andReply:]_block_invoke";
        v171 = 1024;
        v172 = 3701;
        _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:not registered, bailing", buf, 0x12u);
      }

      v163 = NSLocalizedFailureReasonErrorKey;
      v164 = CFSTR("WAErrorCodeNotRegistered");
      v116 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v164, &v163, 1));
      v131 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.wifi.analytics.errordomain"), 9009, v116));
      v132 = *(_QWORD *)(*(_QWORD *)(v135 + 64) + 8);
      v133 = *(void **)(v132 + 40);
      *(_QWORD *)(v132 + 40) = v131;

      goto LABEL_101;
    }
    if (os_signpost_enabled(v110))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v111, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "Engine NWActivity _submitMessage", "", buf, 2u);
    }

    v112 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v135 + 32), "_submitMessage:groupType:forProcessToken:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v135 + 56) + 8) + 40), *(_QWORD *)(v135 + 72), *(_QWORD *)(v135 + 40)));
    v113 = *(_QWORD *)(*(_QWORD *)(v135 + 64) + 8);
    v114 = *(void **)(v113 + 40);
    *(_QWORD *)(v113 + 40) = v112;

    v115 = WALogCategoryDefaultHandle();
    v116 = objc_claimAutoreleasedReturnValue(v115);
    if (!os_signpost_enabled(v116))
    {
LABEL_101:

      goto LABEL_102;
    }
    *(_WORD *)buf = 0;
    v117 = "Engine NWActivity _submitMessage";
LABEL_100:
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v116, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, v117, "", buf, 2u);
    goto LABEL_101;
  }
LABEL_102:

}

void sub_10005C2B0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  int v10;
  int v11;
  id v12;
  NSObject *v13;
  id v14;
  NSObject *v15;
  const char *v16;
  id v17;
  NSObject *v18;
  id v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  NSObject *v25;
  id v26;
  NSObject *v27;
  id v28;
  id v29;
  NSObject *v30;
  id v31;
  id v32;
  NSObject *v33;
  id v34;
  id v35;
  NSObject *v36;
  id v37;
  id v38;
  NSObject *v39;
  id v40;
  id v41;
  uint64_t v42;
  void *v43;
  id v44;
  NSObject *v45;
  int v46;
  const char *v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  void *v55;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v6)
  {
    if (objc_msgSend(v6, "code") == (id)9021
      || objc_msgSend(v7, "code") == (id)9022
      || objc_msgSend(v7, "code") == (id)9023
      || objc_msgSend(v7, "code") == (id)9024
      || objc_msgSend(v7, "code") == (id)9025
      || objc_msgSend(v7, "code") == (id)9026)
    {
      v8 = WALogCategoryDefaultHandle();
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v10 = *(unsigned __int8 *)(a1 + 56);
        v11 = *(unsigned __int8 *)(a1 + 57);
        v46 = 136447234;
        v47 = "-[WAEngine _triggerQueryForNWActivity:forProcessToken:andReply:]_block_invoke";
        v48 = 1024;
        v49 = 3638;
        v50 = 1024;
        v51 = v10;
        v52 = 1024;
        v53 = v11;
        v54 = 2112;
        v55 = v7;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%{public}s::%d:NWActivity missing mandatory fields on rescan, hasLinkChanged %d, hasAssocDoneSuccess %d: %@", (uint8_t *)&v46, 0x28u);
      }

      switch((unint64_t)objc_msgSend(v7, "code"))
      {
        case 0x233DuLL:
          v12 = WALogCategoryDefaultHandle();
          v13 = objc_claimAutoreleasedReturnValue(v12);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            v46 = 136446466;
            v47 = "-[WAEngine _triggerQueryForNWActivity:forProcessToken:andReply:]_block_invoke";
            v48 = 1024;
            v49 = 3641;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%{public}s::%d:NWActivity missing mandatory fields on rescan: WAErrorCodeCCAMissing", (uint8_t *)&v46, 0x12u);
          }

          v14 = WALogCategoryDefaultHandle();
          v15 = objc_claimAutoreleasedReturnValue(v14);
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
            goto LABEL_42;
          LOWORD(v46) = 0;
          v16 = "NWActivity missing mandatory fields on rescan: WAErrorCodeCCAMissing";
          break;
        case 0x233EuLL:
          v35 = WALogCategoryDefaultHandle();
          v36 = objc_claimAutoreleasedReturnValue(v35);
          if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
          {
            v46 = 136446466;
            v47 = "-[WAEngine _triggerQueryForNWActivity:forProcessToken:andReply:]_block_invoke";
            v48 = 1024;
            v49 = 3645;
            _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "%{public}s::%d:NWActivity missing mandatory fields on rescan: WAErrorCodeRSSIMissing", (uint8_t *)&v46, 0x12u);
          }

          v37 = WALogCategoryDefaultHandle();
          v15 = objc_claimAutoreleasedReturnValue(v37);
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
            goto LABEL_42;
          LOWORD(v46) = 0;
          v16 = "NWActivity missing mandatory fields on rescan: WAErrorCodeRSSIMissing";
          break;
        case 0x233FuLL:
          v26 = WALogCategoryDefaultHandle();
          v27 = objc_claimAutoreleasedReturnValue(v26);
          if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
          {
            v46 = 136446466;
            v47 = "-[WAEngine _triggerQueryForNWActivity:forProcessToken:andReply:]_block_invoke";
            v48 = 1024;
            v49 = 3649;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "%{public}s::%d:NWActivity missing mandatory fields on rescan: WAErrorCodeTxRxFrameCountersMissing", (uint8_t *)&v46, 0x12u);
          }

          v28 = WALogCategoryDefaultHandle();
          v15 = objc_claimAutoreleasedReturnValue(v28);
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
            goto LABEL_42;
          LOWORD(v46) = 0;
          v16 = "NWActivity missing mandatory fields on rescan: WAErrorCodeTxRxFrameCountersMissing";
          break;
        case 0x2340uLL:
          v29 = WALogCategoryDefaultHandle();
          v30 = objc_claimAutoreleasedReturnValue(v29);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
          {
            v46 = 136446466;
            v47 = "-[WAEngine _triggerQueryForNWActivity:forProcessToken:andReply:]_block_invoke";
            v48 = 1024;
            v49 = 3653;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "%{public}s::%d:NWActivity missing mandatory fields on rescan: WAErrorCodeTxLatencyBeMissing", (uint8_t *)&v46, 0x12u);
          }

          v31 = WALogCategoryDefaultHandle();
          v15 = objc_claimAutoreleasedReturnValue(v31);
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
            goto LABEL_42;
          LOWORD(v46) = 0;
          v16 = "NWActivity missing mandatory fields on rescan: WAErrorCodeTxLatencyBeMissing";
          break;
        case 0x2341uLL:
          v32 = WALogCategoryDefaultHandle();
          v33 = objc_claimAutoreleasedReturnValue(v32);
          if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
          {
            v46 = 136446466;
            v47 = "-[WAEngine _triggerQueryForNWActivity:forProcessToken:andReply:]_block_invoke";
            v48 = 1024;
            v49 = 3657;
            _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "%{public}s::%d:NWActivity missing mandatory fields on rescan: WAErrorCodeTxCompletionsMissing", (uint8_t *)&v46, 0x12u);
          }

          v34 = WALogCategoryDefaultHandle();
          v15 = objc_claimAutoreleasedReturnValue(v34);
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
            goto LABEL_42;
          LOWORD(v46) = 0;
          v16 = "NWActivity missing mandatory fields on rescan: WAErrorCodeTxCompletionsMissing";
          break;
        case 0x2342uLL:
          v38 = WALogCategoryDefaultHandle();
          v39 = objc_claimAutoreleasedReturnValue(v38);
          if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
          {
            v46 = 136446466;
            v47 = "-[WAEngine _triggerQueryForNWActivity:forProcessToken:andReply:]_block_invoke";
            v48 = 1024;
            v49 = 3661;
            _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "%{public}s::%d:NWActivity missing mandatory fields on rescan: WAErrorCodeHEVHTMCSMissing", (uint8_t *)&v46, 0x12u);
          }

          v40 = WALogCategoryDefaultHandle();
          v15 = objc_claimAutoreleasedReturnValue(v40);
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
            goto LABEL_42;
          LOWORD(v46) = 0;
          v16 = "NWActivity missing mandatory fields on rescan: WAErrorCodeHEVHTMCSMissing";
          break;
        default:
          goto LABEL_43;
      }
      _os_log_fault_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, v16, (uint8_t *)&v46, 2u);
LABEL_42:

    }
LABEL_43:
    v41 = WALogCategoryDefaultHandle();
    v25 = objc_claimAutoreleasedReturnValue(v41);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      v46 = 136446466;
      v47 = "-[WAEngine _triggerQueryForNWActivity:forProcessToken:andReply:]_block_invoke";
      v48 = 1024;
      v49 = 3677;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Rescan was not successful", (uint8_t *)&v46, 0x12u);
    }
  }
  else
  {
    v17 = WALogCategoryDefaultHandle();
    v18 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v46 = 136446466;
      v47 = "-[WAEngine _triggerQueryForNWActivity:forProcessToken:andReply:]_block_invoke";
      v48 = 1024;
      v49 = 3670;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Rescan was successful", (uint8_t *)&v46, 0x12u);
    }

    v19 = WALogCategoryDefaultHandle();
    v20 = objc_claimAutoreleasedReturnValue(v19);
    if (os_signpost_enabled(v20))
    {
      LOWORD(v46) = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "Engine NWActivity GetChannelApInfo", "", (uint8_t *)&v46, 2u);
    }

    v21 = *(void **)(a1 + 32);
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "fieldForKey:", CFSTR("NWA_controllerStats")));
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "subMessageValue"));
    objc_msgSend(v21, "populateChannelInfo:", v23);

    objc_msgSend(*(id *)(a1 + 32), "populateApProfile:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
    v24 = WALogCategoryDefaultHandle();
    v25 = objc_claimAutoreleasedReturnValue(v24);
    if (os_signpost_enabled(v25))
    {
      LOWORD(v46) = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v25, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "Engine NWActivity GetChannelApInfo", "", (uint8_t *)&v46, 2u);
    }
  }

  v42 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v43 = *(void **)(v42 + 40);
  *(_QWORD *)(v42 + 40) = v7;

  v44 = WALogCategoryDefaultHandle();
  v45 = objc_claimAutoreleasedReturnValue(v44);
  if (os_signpost_enabled(v45))
  {
    LOWORD(v46) = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v45, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "Engine NWActivity MissingChannelsRepopulate", "", (uint8_t *)&v46, 2u);
  }

}

void sub_10005D0F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10005D114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  NSErrorUserInfoKey v11;
  const __CFString *v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a2, 0);
  v4 = WALogCategoryDefaultHandle();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    v14 = "-[WAEngine _convertWiFiStatsIntoPercentile:analysisGroup:groupTarget:forProcessToken:andReply:]_block_invoke";
    v15 = 1024;
    v16 = 3772;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to reply percentileWiFiStats", buf, 0x12u);
  }

  v11 = NSLocalizedFailureReasonErrorKey;
  v12 = CFSTR("WAErrorCodeInternalError");
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v12, &v11, 1));
  v7 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.wifi.analytics.errordomain"), 9003, v6));
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10005E9C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Unwind_Resume(a1);
}

void sub_10005EA38(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  id v8;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  id v14;

  v3 = a2;
  v4 = WALogCategoryDefaultHandle();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v9 = 136446722;
    v10 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
    v11 = 1024;
    v12 = 3939;
    v13 = 2112;
    v14 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:made DPSR %@ ", (uint8_t *)&v9, 0x1Cu);
  }

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v3;
  v8 = v3;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10005EB34(uint64_t a1)
{
  id v2;
  NSObject *v3;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;

  v2 = WALogCategoryDefaultHandle();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 136446466;
    v5 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
    v6 = 1024;
    v7 = 3964;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:kSendReportAfterDelay expired", (uint8_t *)&v4, 0x12u);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10005EBF4(uint64_t a1)
{
  id v2;
  NSObject *v3;
  int v4;
  uint64_t v5;
  void *v6;
  id *v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  uint64_t v12;
  unsigned __int8 v13;
  id *v14;
  unint64_t v15;
  unsigned int v16;
  void *v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  _QWORD v26[4];
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32[2];
  int v33;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;

  v2 = WALogCategoryDefaultHandle();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(a1 + 112);
    *(_DWORD *)buf = 136446722;
    v35 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
    v36 = 1024;
    v37 = 3995;
    v38 = 1024;
    v39 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:DPS Study: Instance %d : start", buf, 0x18u);
  }

  v5 = *(unsigned int *)(a1 + 112);
  if ((_DWORD)v5)
  {
    if (*(_QWORD *)(a1 + 88) == v5)
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 168), "setObject:forKeyedSubscript:", v6, CFSTR("decisionInstance"));
    }
    else
    {
      if (*(_QWORD *)(a1 + 96) - 1 != v5)
        goto LABEL_10;
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 168), "setObject:forKeyedSubscript:", v6, CFSTR("LastInstance"));
    }
  }
  else
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 168), "setObject:forKeyedSubscript:", v6, CFSTR("firstInstance"));
  }

LABEL_10:
  v7 = (id *)(a1 + 32);
  v8 = objc_msgSend(*(id *)(a1 + 32), "isWiFiAssociatedToNetwork");
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  if (*(_BYTE *)(v9 + 24))
    v10 = v8;
  else
    v10 = 0;
  *(_BYTE *)(v9 + 24) = v10;
  v11 = objc_msgSend(*v7, "isWiFiInterfacePrimary");
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  if (*(_BYTE *)(v12 + 24))
    v13 = v11;
  else
    v13 = 0;
  *(_BYTE *)(v12 + 24) = v13;
  v14 = (id *)*v7;
  if (*((_BYTE *)*v7 + 42))
  {
    v15 = *(unsigned int *)(a1 + 112);
    if ((v15 & 1) != 0)
    {
      v16 = *(_DWORD *)(a1 + 112);
    }
    else
    {
      v7 = (id *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14[22], "preferences"));
      if ((unint64_t)objc_msgSend(v7, "dns_symptoms_trap_evaluated_at_sample") > v15)
      {

        goto LABEL_29;
      }
      v16 = *(_DWORD *)(a1 + 112);
      v14 = *(id **)(a1 + 32);
    }
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14[22], "preferences"));
    if ((unint64_t)objc_msgSend(v17, "dns_symptoms_trap_evaluated_at_sample") <= v16)
    {
      v18 = (v15 & 1) == 0;
      v19 = objc_msgSend(*(id *)(a1 + 32), "isWiFiInterfacePrimary");

      if (v18)
      {

        if ((v19 & 1) == 0)
          goto LABEL_30;
        goto LABEL_29;
      }
      if (v19)
      {
LABEL_29:
        objc_msgSend(*(id *)(a1 + 32), "triggerDiagnosticPingWithrequestId:", *(unsigned int *)(a1 + 112));
        objc_msgSend(*(id *)(a1 + 32), "fetchSymptomsScores:", *(unsigned int *)(a1 + 112));
      }
    }
    else
    {

      if ((v15 & 1) == 0)
    }
  }
LABEL_30:
  objc_initWeak((id *)buf, *(id *)(a1 + 32));
  v20 = *(_QWORD *)(a1 + 104);
  v21 = *(void **)(a1 + 32);
  v22 = *(_QWORD *)(a1 + 40);
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  v26[2] = sub_10005EF98;
  v26[3] = &unk_1000CD5A8;
  objc_copyWeak(v32, (id *)buf);
  v23 = *(void **)(a1 + 104);
  v30 = *(_QWORD *)(a1 + 72);
  v32[1] = v23;
  v27 = *(id *)(a1 + 40);
  v24 = *(id *)(a1 + 48);
  v33 = *(_DWORD *)(a1 + 112);
  v31 = *(_QWORD *)(a1 + 80);
  v25 = *(_QWORD *)(a1 + 32);
  v28 = v24;
  v29 = v25;
  objc_msgSend(v21, "_getNewMessageForKey:groupType:forProcessToken:shouldCheckForPrePopulation:andReply:", CFSTR("DPSCS"), v20, v22, 1, v26);

  objc_destroyWeak(v32);
  objc_destroyWeak((id *)buf);
}

void sub_10005EF74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10005EF98(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD *WeakRetained;
  NSObject *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  v8 = WeakRetained[65];
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10005F0B8;
  v15[3] = &unk_1000CD580;
  v16 = v6;
  v17 = v5;
  v9 = *(_QWORD *)(a1 + 56);
  v18 = WeakRetained;
  v22 = v9;
  v24 = *(_QWORD *)(a1 + 80);
  v19 = *(id *)(a1 + 32);
  v10 = *(id *)(a1 + 40);
  v25 = *(_DWORD *)(a1 + 88);
  v23 = *(_QWORD *)(a1 + 64);
  v11 = *(_QWORD *)(a1 + 48);
  v20 = v10;
  v21 = v11;
  v12 = WeakRetained;
  v13 = v5;
  v14 = v6;
  dispatch_async(v8, v15);

}

void sub_10005F0B8(uint64_t a1)
{
  void *v2;
  void *v3;
  BOOL v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  _BOOL4 v12;
  int v13;
  id v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  NSObject *v23;
  void *v24;
  uint64_t v25;
  id *v26;
  uint64_t v27;
  id v28;
  NSObject *v29;
  void *v30;
  id v31;
  NSObject *v32;
  id v33;
  NSObject *v34;
  void *v35;
  void *v36;
  double v37;
  id v38;
  NSObject *v39;
  id v40;
  NSObject *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  id v46;
  NSObject *v47;
  void *v48;
  _BYTE *v49;
  uint64_t v50;
  void *v51;
  _BOOL4 v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  _BOOL4 v60;
  void *v61;
  void *v62;
  void *v63;
  id v64;
  NSObject *v65;
  void *v66;
  void *v67;
  id v68;
  void **v69;
  uint64_t v70;
  void (*v71)(uint64_t, void *, void *);
  void *v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  _QWORD v77[4];
  id v78;
  id v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t (*v85)(uint64_t, uint64_t);
  void (*v86)(uint64_t);
  id v87;
  NSErrorUserInfoKey v88;
  const __CFString *v89;
  uint8_t buf[4];
  const char *v91;
  __int16 v92;
  int v93;
  __int16 v94;
  void *v95;

  v82 = 0;
  v83 = &v82;
  v84 = 0x3032000000;
  v85 = sub_10004B174;
  v86 = sub_10004B184;
  v87 = 0;
  if (*(_QWORD *)(a1 + 32))
    goto LABEL_11;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "fieldForKey:", CFSTR("DPSCS_peerStats")));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "subMessageValue"));
  v4 = v3 == 0;

  if (!v4)
  {
    v5 = *(void **)(a1 + 48);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "fieldForKey:", CFSTR("DPSCS_peerStats")));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "subMessageValue"));
    objc_msgSend(v5, "_examinePeerMessageForIntegrity:", v7);

  }
  if (*(_QWORD *)(a1 + 32))
    goto LABEL_11;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "fieldForKey:", CFSTR("DPSCS_peerStats")));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "subMessageValue"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "fieldForKey:", CFSTR("NWAPS_ccas")));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "repeatableValues"));
  v12 = objc_msgSend(v11, "count") == 0;

  if (v12)
  {
    v14 = WALogCategoryDefaultHandle();
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "fieldForKey:", CFSTR("DPSCS_peerStats")));
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "subMessageValue"));
      *(_DWORD *)buf = 136446722;
      v91 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke_2";
      v92 = 1024;
      v93 = 4034;
      v94 = 2112;
      v95 = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to get CCA %@", buf, 0x1Cu);

    }
    v88 = NSLocalizedFailureReasonErrorKey;
    v89 = CFSTR("WAErrorCodeCCAMissing");
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v89, &v88, 1));
    v19 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.wifi.analytics.errordomain"), 9021, v18));
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
    v21 = *(void **)(v20 + 40);
    *(_QWORD *)(v20 + 40) = v19;

    v13 = 1;
  }
  else
  {
    v13 = 0;
  }
  if (*(_QWORD *)(a1 + 32))
  {
LABEL_11:
    v22 = WALogCategoryDefaultHandle();
    v23 = objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      v24 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 136446722;
      v91 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
      v92 = 1024;
      v93 = 4041;
      v94 = 2112;
      v95 = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "%{public}s::%d:Got error retrieving DPSCS due to %@", buf, 0x1Cu);
    }

    v25 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
    v27 = *(_QWORD *)(v25 + 40);
    v26 = (id *)(v25 + 40);
    if (!v27)
    {
      objc_storeStrong(v26, *(id *)(a1 + 32));
      v28 = WALogCategoryDefaultHandle();
      v29 = objc_claimAutoreleasedReturnValue(v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        v30 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40);
        *(_DWORD *)buf = 136446722;
        v91 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
        v92 = 1024;
        v93 = 4045;
        v94 = 2112;
        v95 = v30;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:retErr will return %@", buf, 0x1Cu);
      }

    }
    v13 = 1;
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 48) + 51))
  {
    v31 = WALogCategoryDefaultHandle();
    v32 = objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v91 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
      v92 = 1024;
      v93 = 4051;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Setting shouldRetry to true due to debug command kWAIORCommandForceStudyErrorFromMsg", buf, 0x12u);
    }

    *(_BYTE *)(*(_QWORD *)(a1 + 48) + 51) = 0;
  }
  else if (!v13)
  {
    v68 = objc_msgSend(*(id *)(a1 + 40), "copy");
    v36 = (void *)v83[5];
    v83[5] = (uint64_t)v68;
    goto LABEL_35;
  }
  v33 = WALogCategoryDefaultHandle();
  v34 = objc_claimAutoreleasedReturnValue(v33);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    v91 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
    v92 = 1024;
    v93 = 4059;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Attempting Rescan", buf, 0x12u);
  }

  v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v36 = v35;
  if (*(_QWORD *)(*(_QWORD *)(a1 + 48) + 664) && (objc_msgSend(v35, "timeIntervalSinceDate:"), v37 > 30.0))
  {
    v38 = WALogCategoryDefaultHandle();
    v39 = objc_claimAutoreleasedReturnValue(v38);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v91 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
      v92 = 1024;
      v93 = 4063;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Attemping determineChannelsPerIORPopulatable", buf, 0x12u);
    }

    v40 = WALogCategoryDefaultHandle();
    v41 = objc_claimAutoreleasedReturnValue(v40);
    if (os_signpost_enabled(v41))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v41, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "Engine DPSCS MissingChannelsRepopulate", "", buf, 2u);
    }

    v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "iorMessagePopulator"));
    objc_msgSend(v42, "determineChannelsPerIORPopulatable");

    v43 = *(_QWORD *)(a1 + 96);
    v45 = *(void **)(a1 + 48);
    v44 = *(_QWORD *)(a1 + 56);
    v77[0] = _NSConcreteStackBlock;
    v77[1] = 3221225472;
    v77[2] = sub_10005FA28;
    v77[3] = &unk_1000CD738;
    v80 = *(_QWORD *)(a1 + 80);
    v81 = &v82;
    v78 = *(id *)(a1 + 40);
    v79 = *(id *)(a1 + 64);
    objc_msgSend(v45, "_getNewMessageForKey:groupType:forProcessToken:shouldCheckForPrePopulation:andReply:", CFSTR("DPSCS"), v43, v44, 1, v77);
    objc_storeStrong((id *)(*(_QWORD *)(a1 + 48) + 664), v36);

  }
  else
  {
    v46 = WALogCategoryDefaultHandle();
    v47 = objc_claimAutoreleasedReturnValue(v46);
    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
    {
      v48 = *(void **)(*(_QWORD *)(a1 + 48) + 664);
      *(_DWORD *)buf = 136446722;
      v91 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
      v92 = 1024;
      v93 = 4089;
      v94 = 2112;
      v95 = v48;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "%{public}s::%d:Rescanned too recently, waiting for 30s to elapse since last check at %@", buf, 0x1Cu);
    }

    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 64));
  }
LABEL_35:

  if (!v83[5])
    goto LABEL_53;
  v49 = (_BYTE *)*(unsigned int *)(a1 + 104);
  if ((_DWORD)v49 == 1
    || (v50 = *(_QWORD *)(a1 + 48), *(_BYTE *)(v50 + 42))
    && (v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v50 + 176), "preferences")),
        v52 = (char *)objc_msgSend(v51, "dns_symptoms_trap_evaluated_at_sample") - 1 == v49,
        v51,
        v52))
  {
    v53 = *(_QWORD *)(a1 + 96);
    v54 = *(void **)(a1 + 48);
    v55 = *(_QWORD *)(a1 + 56);
    v69 = _NSConcreteStackBlock;
    v70 = 3221225472;
    v71 = sub_10005FCC0;
    v72 = &unk_1000CD558;
    v56 = v54;
    v57 = *(_QWORD *)(a1 + 88);
    v76 = *(_DWORD *)(a1 + 104);
    v58 = *(_QWORD *)(a1 + 72);
    v73 = v56;
    v74 = v58;
    v75 = v57;
    objc_msgSend(v56, "_getNewMessageForKey:groupType:forProcessToken:shouldCheckForPrePopulation:andReply:", CFSTR("DPSS"), v53, v55, 1, &v69);

  }
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 48) + 42))
  {
    if (*(_DWORD *)(a1 + 104) >= 2u)
      goto LABEL_50;
    goto LABEL_48;
  }
  v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 72) + 176), "preferences"));
  if (objc_msgSend(v59, "dns_symptoms_trap_evaluated_at_sample") != (id)1)
  {

LABEL_48:
    v61 = *(void **)(a1 + 48);
    v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v83[5], "fieldForKey:", CFSTR("DPSCS_controllerStats"), v69, v70, v71, v72));
    v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "subMessageValue"));
    objc_msgSend(v61, "populateChannelInfo:", v62);

    goto LABEL_49;
  }
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 48) + 42))
  {
    v60 = *(_DWORD *)(a1 + 104) < 2u;

    if (!v60)
      goto LABEL_50;
    goto LABEL_48;
  }
LABEL_49:

LABEL_50:
  v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v83[5], "fieldForKey:", CFSTR("DPSCS_timestamp"), v69, v70, v71, v72));
  objc_msgSend(v63, "setUint64Value:", +[WAUtil getAWDTimestamp](WAUtil, "getAWDTimestamp"));

  v64 = WALogCategoryDefaultHandle();
  v65 = objc_claimAutoreleasedReturnValue(v64);
  if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
  {
    v66 = (void *)v83[5];
    *(_DWORD *)buf = 136446722;
    v91 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
    v92 = 1024;
    v93 = 4120;
    v94 = 2112;
    v95 = v66;
    _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Adding dpsStatsContainer %@ ", buf, 0x1Cu);
  }

  v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsCounterSamples")));
  objc_msgSend(v67, "addRepeatableSubMessageValue:", v83[5]);

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 64));
LABEL_53:
  _Block_object_dispose(&v82, 8);

}

void sub_10005FA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10005FA28(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  id *v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  NSObject *v18;
  void *v19;
  id v20;
  uint64_t v21;
  id v22;
  NSObject *v23;
  int v24;
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  id v29;

  v5 = a2;
  v6 = a3;
  if (!v6)
  {
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v16 = *(void **)(v15 + 40);
    *(_QWORD *)(v15 + 40) = 0;

    v17 = WALogCategoryDefaultHandle();
    v18 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v19 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
      v24 = 136446722;
      v25 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
      v26 = 1024;
      v27 = 4072;
      v28 = 2112;
      v29 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:retErr reset %@", (uint8_t *)&v24, 0x1Cu);
    }

    v20 = objc_msgSend(*(id *)(a1 + 32), "copy");
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v13 = *(NSObject **)(v21 + 40);
    *(_QWORD *)(v21 + 40) = v20;
    goto LABEL_10;
  }
  v7 = WALogCategoryDefaultHandle();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    v24 = 136446722;
    v25 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
    v26 = 1024;
    v27 = 4076;
    v28 = 2112;
    v29 = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}s::%d:DPSCS retry still has error %@", (uint8_t *)&v24, 0x1Cu);
  }

  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v11 = *(_QWORD *)(v9 + 40);
  v10 = (id *)(v9 + 40);
  if (!v11)
  {
    objc_storeStrong(v10, a3);
    v12 = WALogCategoryDefaultHandle();
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v14 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
      v24 = 136446722;
      v25 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
      v26 = 1024;
      v27 = 4080;
      v28 = 2112;
      v29 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:retErr will return %@", (uint8_t *)&v24, 0x1Cu);
    }
LABEL_10:

  }
  v22 = WALogCategoryDefaultHandle();
  v23 = objc_claimAutoreleasedReturnValue(v22);
  if (os_signpost_enabled(v23))
  {
    LOWORD(v24) = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v23, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "Engine DPSCS MissingChannelsRepopulate", "", (uint8_t *)&v24, 2u);
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_10005FCC0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  NSObject *v14;
  id v15;
  NSObject *v16;
  void *v17;
  int v18;
  const char *v19;
  __int16 v20;
  int v21;

  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v7 + 42))
  {
    v8 = *(void **)(v7 + 184);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsEpiloge")));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "subMessageValue"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "fieldForKey:", CFSTR("DPSE_symptomsDnsStats")));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "subMessageValue"));
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 47) |= objc_msgSend(v8, "checkAWDLActivity:symptomsDnsStats:", v5, v12);

  }
  if (v6)
  {
    v13 = WALogCategoryDefaultHandle();
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v18 = 136446466;
      v19 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
      v20 = 1024;
      v21 = 4109;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:error populating DPSR_snapshot", (uint8_t *)&v18, 0x12u);
    }
LABEL_10:

    goto LABEL_11;
  }
  if (*(_DWORD *)(a1 + 56) == 1)
  {
    v15 = WALogCategoryDefaultHandle();
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v18 = 136446466;
      v19 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
      v20 = 1024;
      v21 = 4104;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Adding DPSR_snapshot", (uint8_t *)&v18, 0x12u);
    }

    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 168), "setObject:forKeyedSubscript:", v17, CFSTR("snapshotInstance"));

    v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "fieldForKey:", CFSTR("DPSR_snapshot")));
    -[NSObject setSubMessageValue:](v14, "setSubMessageValue:", v5);
    goto LABEL_10;
  }
LABEL_11:

}

void sub_10005FF0C(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  char *v5;
  void *v6;
  char *v7;
  unsigned int v8;
  id v9;
  NSObject *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  const char *v14;
  char v15;
  int v16;
  id v17;
  NSObject *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  id v26;
  NSObject *v27;
  char *__ptr32 *v28;
  void *v29;
  void *v30;
  id v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  id v39;
  void *v40;
  double v41;
  double v42;
  unint64_t v43;
  unint64_t v44;
  id v45;
  NSObject *v46;
  id v47;
  NSObject *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  void *v52;
  void *v53;
  unsigned int v54;
  id v55;
  NSObject *v56;
  int v57;
  id v58;
  NSObject *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  id v65;
  id v66;
  NSObject *v67;
  void *v68;
  void *v69;
  void *v70;
  id v71;
  NSObject *v72;
  id v73;
  NSObject *v74;
  NSObject *v75;
  void *v76;
  void *v77;
  id v78;
  NSObject *v79;
  id v80;
  NSObject *v81;
  id v82;
  NSObject *v83;
  id v84;
  NSObject *v85;
  id v86;
  id v87;
  NSObject *v88;
  const char *v89;
  NSObject *v90;
  os_log_type_t v91;
  id v92;
  NSObject *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  id v99;
  NSObject *v100;
  id v101;
  id v102;
  NSObject *v103;
  char *v104;
  char *v105;
  void *v106;
  void *v107;
  void *v108;
  const __CFString *v109;
  id v110;
  NSObject *v111;
  void *v112;
  void *v113;
  id v114;
  NSObject *v115;
  void *v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  _QWORD v128[5];
  id v129;
  uint64_t v130;
  _QWORD block[5];
  uint8_t buf[4];
  const char *v133;
  __int16 v134;
  int v135;
  __int16 v136;
  const char *v137;
  __int16 v138;
  const char *v139;
  __int16 v140;
  void *v141;
  __int16 v142;
  const char *v143;

  v2 = objc_autoreleasePoolPush();
  v3 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = (char *)*(unsigned int *)(a1 + 88);
    if (*(_BYTE *)(v4 + 42))
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v4 + 176), "preferences"));
      v7 = (char *)objc_msgSend(v6, "dns_symptoms_trap_evaluated_at_sample") - 1;

      if (v7 != v5)
        goto LABEL_111;
      v8 = objc_msgSend(*(id *)(a1 + 32), "isWiFiNetworkCaptive");
      objc_msgSend(*(id *)(a1 + 32), "computeAverageCcaSinceStudyStart:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));
      v9 = WALogCategoryDefaultHandle();
      v10 = objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        v11 = "YES";
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
          v12 = "YES";
        else
          v12 = "NO";
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24))
          v13 = "YES";
        else
          v13 = "NO";
        if (v8)
          v14 = "YES";
        else
          v14 = "NO";
        if (!*(_BYTE *)(a1 + 92))
          v11 = "NO";
        *(_DWORD *)buf = 136447490;
        v133 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
        v134 = 1024;
        v135 = 4264;
        v136 = 2080;
        v137 = v12;
        v138 = 2080;
        v139 = v13;
        v140 = 2080;
        v141 = (void *)v14;
        v142 = 2080;
        v143 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:DNS Symptoms pre-decision check:: Associated:%s Primary:%s isCaptive:%s isValidDnsConfig:%s", buf, 0x3Au);
      }

      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
      {
        v55 = WALogCategoryDefaultHandle();
        v56 = objc_claimAutoreleasedReturnValue(v55);
        if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          v133 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
          v134 = 1024;
          v135 = 4277;
          _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:SDNS: WiFi Not Associated - setting suppressedReason kSymptomsDnsWiFiDisassociatedDuringStudy", buf, 0x12u);
        }

        v19 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsEpiloge")));
        v20 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject subMessageValue](v19, "subMessageValue"));
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "fieldForKey:", CFSTR("DPSE_symptomsDnsStats")));
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "subMessageValue"));
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "fieldForKey:", CFSTR("WFAAWDWASDS_suppressedReason")));
        v24 = v23;
        v25 = 6;
        goto LABEL_60;
      }
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24))
        v15 = v8;
      else
        v15 = 1;
      if ((v15 & 1) != 0)
      {
        if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24))
        {
          v66 = WALogCategoryDefaultHandle();
          v67 = objc_claimAutoreleasedReturnValue(v66);
          if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136446466;
            v133 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
            v134 = 1024;
            v135 = 4281;
            _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:SDNS: WiFi Not Primary - setting suppressedReason kSymptomsDnsWiFiInterfaceNotPrimary", buf, 0x12u);
          }

          v19 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsEpiloge")));
          v20 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject subMessageValue](v19, "subMessageValue"));
          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "fieldForKey:", CFSTR("DPSE_symptomsDnsStats")));
          v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "subMessageValue"));
          v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "fieldForKey:", CFSTR("WFAAWDWASDS_suppressedReason")));
          v24 = v23;
          v25 = 8;
          goto LABEL_60;
        }
        v16 = *(unsigned __int8 *)(a1 + 92);
        v17 = WALogCategoryDefaultHandle();
        v18 = objc_claimAutoreleasedReturnValue(v17);
        v19 = v18;
        if (v16)
        {
          if (!v8)
          {
            if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446466;
              v133 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
              v134 = 1024;
              v135 = 4292;
              _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%{public}s::%d:SDNS: Unhandled running conditions", buf, 0x12u);
            }
            goto LABEL_61;
          }
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136446466;
            v133 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
            v134 = 1024;
            v135 = 4289;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:SDNS: WiFi is Captive - setting suppressedReason kSymptomsDnsWiFiNetworkIsCaptive", buf, 0x12u);
          }

          v19 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsEpiloge")));
          v20 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject subMessageValue](v19, "subMessageValue"));
          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "fieldForKey:", CFSTR("DPSE_symptomsDnsStats")));
          v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "subMessageValue"));
          v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "fieldForKey:", CFSTR("WFAAWDWASDS_suppressedReason")));
          v24 = v23;
          v25 = 9;
LABEL_60:
          objc_msgSend(v23, "setInt32Value:", v25);

LABEL_61:
          v65 = 0;
          goto LABEL_62;
        }
      }
      else
      {
        v57 = *(unsigned __int8 *)(a1 + 92);
        v58 = WALogCategoryDefaultHandle();
        v59 = objc_claimAutoreleasedReturnValue(v58);
        v19 = v59;
        if (v57)
        {
          if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136446466;
            v133 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
            v134 = 1024;
            v135 = 4267;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:SDNS: WiFi Not Primary - setting suppressedReason kSymptomsDnsWiFiInterfaceNotPrimary", buf, 0x12u);
          }

          v19 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dpsQuickRecoveryEngine"));
          v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsEpiloge")));
          v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "subMessageValue"));
          v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v61, "fieldForKey:", CFSTR("DPSE_symptomsDnsStats")));
          v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "subMessageValue"));
          v64 = *(_QWORD *)(a1 + 32);
          LODWORD(v119) = *(_QWORD *)(v64 + 240);
          v65 = -[NSObject recommendSymptomsDpsRecovery:symptomsDnsStats:awdlState:currentSymptomsCondition:isLANPingSuccessful:appUsage:averageCCA:](v19, "recommendSymptomsDpsRecovery:symptomsDnsStats:awdlState:currentSymptomsCondition:isLANPingSuccessful:appUsage:averageCCA:", 0, v63, *(unsigned __int8 *)(v64 + 47), *(unsigned __int8 *)(v64 + 44), *(unsigned __int8 *)(v64 + 46), *(unsigned __int8 *)(v64 + 41), v119);

LABEL_62:
          v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "interfaceNameToApple80211InstanceMap"));
          v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "infraInterfaceName"));
          v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "objectForKeyedSubscript:", v69));

          if (!v70)
            objc_msgSend(*(id *)(a1 + 32), "queryInfraInterfaceInstanceAndChip");
          if (v65 == (id)2)
          {
            v78 = WALogCategoryDefaultHandle();
            v79 = objc_claimAutoreleasedReturnValue(v78);
            if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136446466;
              v133 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
              v134 = 1024;
              v135 = 4305;
              _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:PeerDiagnostics: Triggering Reassoc for symptoms-dps", buf, 0x12u);
            }

            v80 = WALogCategoryDefaultHandle();
            v81 = objc_claimAutoreleasedReturnValue(v80);
            if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136446466;
              v133 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
              v134 = 1024;
              v135 = 4306;
              _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:SDNS: Recommendation - kSymptomsdDPSReassoc, triggering reassoc wiith reason ReassociateOnDNSSymptoms", buf, 0x12u);
            }

            *(_DWORD *)(*(_QWORD *)(a1 + 32) + 60) |= 0x80u;
            v75 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "interfaceNameToApple80211InstanceMap"));
            v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "infraInterfaceName"));
            v77 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject objectForKeyedSubscript:](v75, "objectForKeyedSubscript:", v76));
            objc_msgSend(v77, "triggerReassociation:", CFSTR("ReassociateOnDNSSymptoms"));
          }
          else
          {
            if (v65 != (id)1)
            {
              v84 = WALogCategoryDefaultHandle();
              v85 = objc_claimAutoreleasedReturnValue(v84);
              if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136446466;
                v133 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
                v134 = 1024;
                v135 = 4310;
                _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:PeerDiagnostics: No Recovery Action recommended for symptoms-dps", buf, 0x12u);
              }

              v86 = WALogCategoryDefaultHandle();
              v75 = objc_claimAutoreleasedReturnValue(v86);
              if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136446466;
                v133 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
                v134 = 1024;
                v135 = 4311;
                _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:SDNS: No Recommendation", buf, 0x12u);
              }
              goto LABEL_77;
            }
            v71 = WALogCategoryDefaultHandle();
            v72 = objc_claimAutoreleasedReturnValue(v71);
            if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136446466;
              v133 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
              v134 = 1024;
              v135 = 4300;
              _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:PeerDiagnostics: Triggering Trap for symptoms-dps", buf, 0x12u);
            }

            v73 = WALogCategoryDefaultHandle();
            v74 = objc_claimAutoreleasedReturnValue(v73);
            if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136446466;
              v133 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
              v134 = 1024;
              v135 = 4301;
              _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:SDNS: Recommendation - WASymptomsDpsRecommendDoReset, triggering DpsReset with reason TrapOnDNSSymptoms", buf, 0x12u);
            }

            *(_DWORD *)(*(_QWORD *)(a1 + 32) + 60) |= 0x40u;
            v75 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "interfaceNameToApple80211InstanceMap"));
            v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "infraInterfaceName"));
            v77 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject objectForKeyedSubscript:](v75, "objectForKeyedSubscript:", v76));
            objc_msgSend(v77, "triggerDpsReset:", CFSTR("TrapOnDNSSymptoms"));
          }

LABEL_77:
          v82 = WALogCategoryDefaultHandle();
          v83 = objc_claimAutoreleasedReturnValue(v82);
          if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136446466;
            v133 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
            v134 = 1024;
            v135 = 4313;
            _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Persisting after DNS symptoms recovery decision", buf, 0x12u);
          }

          objc_msgSend(*(id *)(a1 + 32), "persist");
          goto LABEL_111;
        }
      }
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v133 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
        v134 = 1024;
        v135 = 4285;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:SDNS: DNS Config Not Valid - setting suppressedReason kSymptomsDnsServerConfigurationInvalid", buf, 0x12u);
      }

      v19 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsEpiloge")));
      v20 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject subMessageValue](v19, "subMessageValue"));
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "fieldForKey:", CFSTR("DPSE_symptomsDnsStats")));
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "subMessageValue"));
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "fieldForKey:", CFSTR("WFAAWDWASDS_suppressedReason")));
      v24 = v23;
      v25 = 10;
      goto LABEL_60;
    }
    v28 = &off_100092000;
    if ((_DWORD)v5 != 1
      || !*(_QWORD *)(a1 + 40)
      || (v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "fieldForKey:", CFSTR("DPSR_dpsCounterSamples"))),
          v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "repeatableValues")),
          v31 = objc_msgSend(v30, "count"),
          v30,
          v29,
          v4 = *(_QWORD *)(a1 + 32),
          (unint64_t)v31 < 2))
    {
LABEL_110:
      v116 = *(void **)(v4 + 176);
      v117 = *(void **)(a1 + 48);
      v118 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
      v128[0] = _NSConcreteStackBlock;
      v128[1] = *((_QWORD *)v28 + 279);
      v128[2] = sub_10006133C;
      v128[3] = &unk_1000CD5F8;
      v130 = *(_QWORD *)(a1 + 72);
      v128[4] = v4;
      v129 = v117;
      objc_msgSend(v116, "recommendActionFromData:andReply:", v118, v128);

      goto LABEL_111;
    }
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000612DC;
    block[3] = &unk_1000CCDB0;
    block[4] = v4;
    if (qword_1000ED090 != -1)
      dispatch_once(&qword_1000ED090, block);
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
    {
      v92 = WALogCategoryDefaultHandle();
      v93 = objc_claimAutoreleasedReturnValue(v92);
      if (os_log_type_enabled(v93, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v133 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
        v134 = 1024;
        v135 = 4195;
        _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Aborting DPS recovery since WiFi got disassociated atleast once since initial trigger", buf, 0x12u);
      }

      v94 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsEpiloge")));
      v95 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v94, "subMessageValue"));
      v96 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v95, "fieldForKey:", CFSTR("DPSE_qDpsStats")));
      v97 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v96, "subMessageValue"));
      v98 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v97, "fieldForKey:", CFSTR("WFAAWDWAQDS_suppressedReason")));
      objc_msgSend(v98, "setInt32Value:", 4);

      goto LABEL_109;
    }
    v123 = *(void **)(a1 + 40);
    v127 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsCounterSamples")));
    v126 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v127, "repeatableValues"));
    v120 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v126, "objectAtIndex:", 0));
    v125 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsCounterSamples")));
    v124 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v125, "repeatableValues"));
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v124, "objectAtIndex:", 1));
    v121 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 536);
    v122 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsEpiloge")));
    v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v122, "subMessageValue"));
    v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "fieldForKey:", CFSTR("DPSE_qDpsStats")));
    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "subMessageValue"));
    v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "wifiChipSet"));
    v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("DPSR_snapshot")));
    v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "subMessageValue"));
    LODWORD(v119) = objc_msgSend(*(id *)(a1 + 32), "dpsNotificationCCA");
    v39 = objc_msgSend(v123, "recommendReset:currentSample:acList:qDpsStat:chipNumber:dpsSnapshot:originalCCA:", v120, v32, v121, v35, v36, v38, v119);

    v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    objc_msgSend(v40, "timeIntervalSince1970");
    v42 = v41;

    v43 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 200);
    if (v42 > (double)v43)
    {
      v44 = (unint64_t)v42 - v43;
      v45 = WALogCategoryDefaultHandle();
      v46 = objc_claimAutoreleasedReturnValue(v45);
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446722;
        v133 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke_2";
        v134 = 1024;
        v135 = 4167;
        v136 = 1024;
        LODWORD(v137) = v44;
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Time elapsed since original dps detection: %d seconds", buf, 0x18u);
      }

      if (v39 == (id)1 && v44 <= 5)
      {
        v47 = WALogCategoryDefaultHandle();
        v48 = objc_claimAutoreleasedReturnValue(v47);
        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          v133 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
          v134 = 1024;
          v135 = 4171;
          _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Reseting (fast reset recovery)... to recover from DPS at 6s stall checkpoint.", buf, 0x12u);
        }

        v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "interfaceNameToApple80211InstanceMap"));
        v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "infraInterfaceName"));
        v51 = objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "objectForKeyedSubscript:", v50));
        v28 = &off_100092000;
        if (v51)
        {
          v52 = (void *)v51;
          v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "wifiChipSet"));
          v54 = objc_msgSend(v53, "isEqualToString:", &stru_1000CF640);

          if (!v54)
            goto LABEL_99;
        }
        else
        {

        }
        objc_msgSend(*(id *)(a1 + 32), "queryInfraInterfaceInstanceAndChip");
LABEL_99:
        *(_DWORD *)(*(_QWORD *)(a1 + 32) + 60) |= 4u;
        v102 = WALogCategoryDefaultHandle();
        v103 = objc_claimAutoreleasedReturnValue(v102);
        if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
        {
          v104 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "wifiChipSet"));
          v105 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "infraInterfaceName"));
          v106 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "interfaceNameToApple80211InstanceMap"));
          v107 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "infraInterfaceName"));
          v108 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v106, "objectForKeyedSubscript:", v107));
          *(_DWORD *)buf = 136447234;
          v133 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
          v109 = CFSTR("Yes");
          v134 = 1024;
          v135 = 4179;
          if (!v108)
            v109 = CFSTR("No");
          v136 = 2112;
          v137 = v104;
          v138 = 2112;
          v139 = v105;
          v140 = 2112;
          v141 = (void *)v109;
          _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Triggering Trap for Quick DPS in chip:%@ interface:%@ apple80211InstanceValid:%@", buf, 0x30u);

        }
        v110 = WALogCategoryDefaultHandle();
        v111 = objc_claimAutoreleasedReturnValue(v110);
        if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          v133 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
          v134 = 1024;
          v135 = 4181;
          _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:QDPS: Recommendation - kFastDPSWatchdog, triggering DpsReset with reason TrapOnQuickDPS", buf, 0x12u);
        }

        v88 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "interfaceNameToApple80211InstanceMap"));
        v112 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "infraInterfaceName"));
        v113 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject objectForKeyedSubscript:](v88, "objectForKeyedSubscript:", v112));
        objc_msgSend(v113, "triggerDpsReset:", CFSTR("TrapOnQuickDPS"));

        goto LABEL_106;
      }
    }
    if (v39 == (id)2)
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 32) + 60) |= 0x10u;
      v87 = WALogCategoryDefaultHandle();
      v88 = objc_claimAutoreleasedReturnValue(v87);
      v28 = &off_100092000;
      if (!os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
      {
LABEL_106:

        v114 = WALogCategoryDefaultHandle();
        v115 = objc_claimAutoreleasedReturnValue(v114);
        if (os_log_type_enabled(v115, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          v133 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
          v134 = 1024;
          v135 = 4192;
          _os_log_impl((void *)&_mh_execute_header, v115, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Persisting after Quick DPS recovery decision", buf, 0x12u);
        }

        objc_msgSend(*(id *)(a1 + 32), "persist");
LABEL_109:
        v4 = *(_QWORD *)(a1 + 32);
        goto LABEL_110;
      }
      *(_DWORD *)buf = 136446466;
      v133 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
      v134 = 1024;
      v135 = 4186;
      v89 = "%{public}s::%d:QDPS: No Watchdog Budget";
      v90 = v88;
      v91 = OS_LOG_TYPE_DEFAULT;
    }
    else
    {
      v99 = WALogCategoryDefaultHandle();
      v100 = objc_claimAutoreleasedReturnValue(v99);
      v28 = &off_100092000;
      if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v133 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
        v134 = 1024;
        v135 = 4188;
        _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Aborting Quick DPS recovery action due to notification/study delay", buf, 0x12u);
      }

      v101 = WALogCategoryDefaultHandle();
      v88 = objc_claimAutoreleasedReturnValue(v101);
      if (!os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
        goto LABEL_106;
      *(_DWORD *)buf = 136446466;
      v133 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
      v134 = 1024;
      v135 = 4190;
      v89 = "%{public}s::%d:QDPS: Unhandled case";
      v90 = v88;
      v91 = OS_LOG_TYPE_ERROR;
    }
    _os_log_impl((void *)&_mh_execute_header, v90, v91, v89, buf, 0x12u);
    goto LABEL_106;
  }
  v26 = WALogCategoryDefaultHandle();
  v27 = objc_claimAutoreleasedReturnValue(v26);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_fault_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "nil message passed in to recommendActionFromData", buf, 2u);
  }

LABEL_111:
  objc_autoreleasePoolPop(v2);
}

void sub_1000612DC(uint64_t a1)
{
  void *v2;
  unsigned int v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "wifiChipSet"));
  v3 = objc_msgSend(v2, "isEqualToString:", &stru_1000CF640);

  if (v3)
    objc_msgSend(*(id *)(a1 + 32), "queryInfraInterfaceInstanceAndChip");
}

void sub_10006133C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  NSObject *v9;
  void *v10;
  const char *v11;
  id v12;
  NSObject *v13;
  id v14;
  NSObject *v15;
  id v16;
  NSObject *v17;
  int v18;
  id v19;
  NSObject *v20;
  NSObject *v21;
  id v22;
  NSObject *v23;
  id v24;
  void *v25;
  id v26;
  NSObject *v27;
  id v28;
  id v29;
  NSObject *v30;
  void *v31;
  id v32;
  _BYTE v33[32];

  v5 = a3;
  switch(a2)
  {
    case 0:
      v6 = WALogCategoryDefaultHandle();
      v7 = objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v33 = 136446466;
        *(_QWORD *)&v33[4] = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
        *(_WORD *)&v33[12] = 1024;
        *(_DWORD *)&v33[14] = 4204;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:WARecommendNull", v33, 0x12u);
      }

      if (objc_msgSend(v5, "isEqualToString:", CFSTR("dps_wd_cca")))
      {
        objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKeyedSubscript:", CFSTR("SlowDpsCcaThreshold"), CFSTR("sDpsSuppressionReason"));
        v8 = WALogCategoryDefaultHandle();
        v9 = objc_claimAutoreleasedReturnValue(v8);
        if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          goto LABEL_23;
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "objectForKeyedSubscript:", CFSTR("sDpsSuppressionReason")));
        *(_DWORD *)v33 = 136446722;
        *(_QWORD *)&v33[4] = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
        *(_WORD *)&v33[12] = 1024;
        *(_DWORD *)&v33[14] = 4208;
        *(_WORD *)&v33[18] = 2112;
        *(_QWORD *)&v33[20] = v10;
        v11 = "%{public}s::%d:SDPS: No Recommendation - setting suppressedReason %@";
      }
      else
      {
        if (!objc_msgSend(v5, "isEqualToString:", &stru_1000CF640))
        {
          v32 = WALogCategoryDefaultHandle();
          v9 = objc_claimAutoreleasedReturnValue(v32);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v33 = 136446466;
            *(_QWORD *)&v33[4] = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
            *(_WORD *)&v33[12] = 1024;
            *(_DWORD *)&v33[14] = 4213;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:SDPS: No Recommendation", v33, 0x12u);
          }
          goto LABEL_23;
        }
        objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKeyedSubscript:", CFSTR("SlowDpsRecoveryObserved"), CFSTR("sDpsSuppressionReason"));
        v28 = WALogCategoryDefaultHandle();
        v9 = objc_claimAutoreleasedReturnValue(v28);
        if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          goto LABEL_23;
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "objectForKeyedSubscript:", CFSTR("sDpsSuppressionReason")));
        *(_DWORD *)v33 = 136446722;
        *(_QWORD *)&v33[4] = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
        *(_WORD *)&v33[12] = 1024;
        *(_DWORD *)&v33[14] = 4211;
        *(_WORD *)&v33[18] = 2112;
        *(_QWORD *)&v33[20] = v10;
        v11 = "%{public}s::%d:SDPS: No Recommendation - setting suppressedReason %@";
      }
      goto LABEL_22;
    case 1:
      v12 = WALogCategoryDefaultHandle();
      v13 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v33 = 136446466;
        *(_QWORD *)&v33[4] = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
        *(_WORD *)&v33[12] = 1024;
        *(_DWORD *)&v33[14] = 4218;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:WARecommendFullCapture", v33, 0x12u);
      }

      v14 = WALogCategoryDefaultHandle();
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v33 = 136446722;
        *(_QWORD *)&v33[4] = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
        *(_WORD *)&v33[12] = 1024;
        *(_DWORD *)&v33[14] = 4219;
        *(_WORD *)&v33[18] = 2112;
        *(_QWORD *)&v33[20] = v5;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:SDPS: Recommend Full Capture, with classification %@", v33, 0x1Cu);
      }

      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 504), "__dumpCoreCaptureLogsWithReason:", v5);
      goto LABEL_24;
    case 2:
      v16 = WALogCategoryDefaultHandle();
      v17 = objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v33 = 136446466;
        *(_QWORD *)&v33[4] = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
        *(_WORD *)&v33[12] = 1024;
        *(_DWORD *)&v33[14] = 4224;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:WARecommendTrapWatchdog", v33, 0x12u);
      }

      v18 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 60);
      v19 = WALogCategoryDefaultHandle();
      v20 = objc_claimAutoreleasedReturnValue(v19);
      v21 = v20;
      if ((v18 & 4) != 0)
      {
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v33 = 136446466;
          *(_QWORD *)&v33[4] = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
          *(_WORD *)&v33[12] = 1024;
          *(_DWORD *)&v33[14] = 4226;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%{public}s::%d:Fast DPS already triggered, not proceeding with WARecommendTrapWatchdog", v33, 0x12u);
        }

        objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKeyedSubscript:", CFSTR("SlowDpsAbortedSinceQDpsTriggered"), CFSTR("sDpsSuppressionReason"));
        v29 = WALogCategoryDefaultHandle();
        v30 = objc_claimAutoreleasedReturnValue(v29);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "objectForKeyedSubscript:", CFSTR("sDpsSuppressionReason")));
          *(_DWORD *)v33 = 136446722;
          *(_QWORD *)&v33[4] = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
          *(_WORD *)&v33[12] = 1024;
          *(_DWORD *)&v33[14] = 4229;
          *(_WORD *)&v33[18] = 2112;
          *(_QWORD *)&v33[20] = v31;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:SDPS: Recommendation WARecommendTrapWatchdog - setting suppressedReason %@", v33, 0x1Cu);

        }
      }
      else
      {
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v33 = 136446722;
          *(_QWORD *)&v33[4] = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
          *(_WORD *)&v33[12] = 1024;
          *(_DWORD *)&v33[14] = 4231;
          *(_WORD *)&v33[18] = 2112;
          *(_QWORD *)&v33[20] = v5;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:SDPS: Recommendation WARecommendTrapWatchdog - triggering DpsReset with reason %@", v33, 0x1Cu);
        }

        objc_msgSend(*(id *)(a1 + 32), "_trapFWWithReason:andReply:", v5, *(_QWORD *)(a1 + 40));
        *(_DWORD *)(*(_QWORD *)(a1 + 32) + 60) |= 2u;
      }
      v25 = &__kCFBooleanTrue;
      goto LABEL_25;
    case 3:
      v22 = WALogCategoryDefaultHandle();
      v23 = objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v33 = 136446466;
        *(_QWORD *)&v33[4] = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
        *(_WORD *)&v33[12] = 1024;
        *(_DWORD *)&v33[14] = 4239;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:WARecommendNoneNoWatchdogBudget", v33, 0x12u);
      }

      *(_DWORD *)(*(_QWORD *)(a1 + 32) + 60) |= 8u;
      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKeyedSubscript:", CFSTR("SlowDpsNoBudget"), CFSTR("sDpsSuppressionReason"));
      v24 = WALogCategoryDefaultHandle();
      v9 = objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "objectForKeyedSubscript:", CFSTR("sDpsSuppressionReason")));
        *(_DWORD *)v33 = 136446722;
        *(_QWORD *)&v33[4] = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
        *(_WORD *)&v33[12] = 1024;
        *(_DWORD *)&v33[14] = 4244;
        *(_WORD *)&v33[18] = 2112;
        *(_QWORD *)&v33[20] = v10;
        v11 = "%{public}s::%d:SDPS: No Watchdog Budget - setting suppressedReason %@";
LABEL_22:
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v11, v33, 0x1Cu);

      }
LABEL_23:

      goto LABEL_24;
    default:
LABEL_24:
      v25 = &__kCFBooleanFalse;
LABEL_25:
      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKeyedSubscript:", v25, CFSTR("sDpsStudyRecommendation"), *(_OWORD *)v33, *(_OWORD *)&v33[16]);
      v26 = WALogCategoryDefaultHandle();
      v27 = objc_claimAutoreleasedReturnValue(v26);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v33 = 136446466;
        *(_QWORD *)&v33[4] = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
        *(_WORD *)&v33[12] = 1024;
        *(_DWORD *)&v33[14] = 4252;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Persisting after Slow DPS recovery decision", v33, 0x12u);
      }

      objc_msgSend(*(id *)(a1 + 32), "persist");
      return;
  }
}

void sub_100061AD4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  void *i;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  void *j;
  void *v24;
  id v25;
  NSObject *v26;
  void *v27;
  uint64_t v28;
  id v29;
  NSObject *v30;
  void *v31;
  id v32;
  NSObject *v33;
  id v34;
  NSObject *v35;
  void *v36;
  void *v37;
  id v38;
  id v39;
  NSObject *v40;
  void *v41;
  void *v42;
  id v43;
  id v44;
  NSObject *v45;
  void *v46;
  void *v47;
  id v48;
  id v49;
  id v50;
  id v51;
  uint64_t v52;
  void *k;
  void *v54;
  id v55;
  NSObject *v56;
  void *v57;
  void *v58;
  void *v59;
  id v60;
  id v61;
  id v62;
  uint64_t v63;
  void *m;
  void *v65;
  id v66;
  NSObject *v67;
  void *v68;
  void *v69;
  void *v70;
  uint64_t v71;
  id v72;
  id v73;
  id v74;
  uint64_t v75;
  void *n;
  void *v77;
  id v78;
  NSObject *v79;
  void *v80;
  uint64_t v81;
  NSObject *v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  id v97;
  NSObject *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  id v104;
  NSObject *v105;
  void *v106;
  void *v107;
  id v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  id v113;
  NSObject *v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  void *v120;
  id v121;
  NSObject *v122;
  id v123;
  NSObject *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  id v140;
  NSObject *v141;
  id v142;
  NSObject *v143;
  void *v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  void *v149;
  const char *v150;
  id v151;
  NSObject *v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  void *v157;
  uint64_t v158;
  _QWORD block[7];
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  uint8_t buf[4];
  const char *v181;
  __int16 v182;
  int v183;
  __int16 v184;
  uint64_t v185;
  __int16 v186;
  void *v187;
  NSErrorUserInfoKey v188;
  const __CFString *v189;
  _BYTE v190[128];
  _BYTE v191[128];
  _BYTE v192[128];
  _BYTE v193[128];
  _BYTE v194[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsEpiloge")));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "subMessageValue"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "fieldForKey:", CFSTR("DPSE_isAssociatedAtStudyEnd")));
  objc_msgSend(v4, "setBoolValue:", objc_msgSend(*(id *)(a1 + 32), "isWiFiAssociatedToNetwork"));

  v5 = *(void **)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsEpiloge")));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "subMessageValue"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "fieldForKey:", CFSTR("DPSE_discoveredPeerInfo")));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "subMessageValue"));
  objc_msgSend(v5, "gatherDiscoveredPeerInfo:", v9);

  v178 = 0u;
  v179 = 0u;
  v176 = 0u;
  v177 = 0u;
  v158 = a1;
  v10 = *(id *)(*(_QWORD *)(a1 + 32) + 536);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v176, v194, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v177;
    do
    {
      for (i = 0; i != v12; i = (char *)i + 1)
      {
        if (*(_QWORD *)v177 != v13)
          objc_enumerationMutation(v10);
        v15 = *(void **)(*((_QWORD *)&v176 + 1) + 8 * (_QWORD)i);
        v16 = WALogCategoryDefaultHandle();
        v17 = objc_claimAutoreleasedReturnValue(v16);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446722;
          v181 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
          v182 = 1024;
          v183 = 4333;
          v184 = 2112;
          v185 = (uint64_t)v15;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Adding cached DPSR_stallNotifications: %@", buf, 0x1Cu);
        }

        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v158 + 56) + 8) + 40), "fieldForKey:", CFSTR("DPSR_stallNotifications")));
        objc_msgSend(v18, "addRepeatableSubMessageValue:", v15);

      }
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v176, v194, 16);
    }
    while (v12);
  }

  v174 = 0u;
  v175 = 0u;
  v172 = 0u;
  v173 = 0u;
  v19 = *(id *)(*(_QWORD *)(v158 + 32) + 544);
  v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v172, v193, 16);
  if (v20)
  {
    v21 = v20;
    v22 = *(_QWORD *)v173;
    do
    {
      for (j = 0; j != v21; j = (char *)j + 1)
      {
        if (*(_QWORD *)v173 != v22)
          objc_enumerationMutation(v19);
        v24 = *(void **)(*((_QWORD *)&v172 + 1) + 8 * (_QWORD)j);
        v25 = WALogCategoryDefaultHandle();
        v26 = objc_claimAutoreleasedReturnValue(v25);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446722;
          v181 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
          v182 = 1024;
          v183 = 4338;
          v184 = 2112;
          v185 = (uint64_t)v24;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Adding cached DPSR_probeResults: %@", buf, 0x1Cu);
        }

        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v158 + 56) + 8) + 40), "fieldForKey:", CFSTR("DPSR_probeResults")));
        objc_msgSend(v27, "addRepeatableSubMessageValue:", v24);

      }
      v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v172, v193, 16);
    }
    while (v21);
  }

  v28 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(v158 + 32) + 552), "lastObject"));
  if (v28)
  {
    v29 = WALogCategoryDefaultHandle();
    v30 = objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446722;
      v181 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
      v182 = 1024;
      v183 = 4346;
      v184 = 2112;
      v185 = v28;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Adding cached DPSR_dpsCounterSamples: %@", buf, 0x1Cu);
    }

    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v158 + 56) + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsCounterSamples")));
    objc_msgSend(v31, "addRepeatableSubMessageValue:", v28);

  }
  v32 = WALogCategoryDefaultHandle();
  v33 = objc_claimAutoreleasedReturnValue(v32);
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    v181 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
    v182 = 1024;
    v183 = 4350;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:DatapathStall Summary!", buf, 0x12u);
  }

  v34 = WALogCategoryDefaultHandle();
  v35 = objc_claimAutoreleasedReturnValue(v34);
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v158 + 56) + 8) + 40), "fieldForKey:", CFSTR("DPSR_stallNotifications")));
    v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "repeatableValues"));
    v38 = objc_msgSend(v37, "count");
    *(_DWORD *)buf = 136446722;
    v181 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
    v182 = 1024;
    v183 = 4351;
    v184 = 2048;
    v185 = (uint64_t)v38;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:DPSR_stallNotifications: %lu", buf, 0x1Cu);

  }
  v39 = WALogCategoryDefaultHandle();
  v40 = objc_claimAutoreleasedReturnValue(v39);
  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
  {
    v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v158 + 56) + 8) + 40), "fieldForKey:", CFSTR("DPSR_probeResults")));
    v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "repeatableValues"));
    v43 = objc_msgSend(v42, "count");
    *(_DWORD *)buf = 136446722;
    v181 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
    v182 = 1024;
    v183 = 4352;
    v184 = 2048;
    v185 = (uint64_t)v43;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:DPSR_probeResults: %lu", buf, 0x1Cu);

  }
  v157 = (void *)v28;

  v44 = WALogCategoryDefaultHandle();
  v45 = objc_claimAutoreleasedReturnValue(v44);
  if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
  {
    v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v158 + 56) + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsCounterSamples")));
    v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "repeatableValues"));
    v48 = objc_msgSend(v47, "count");
    *(_DWORD *)buf = 136446722;
    v181 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
    v182 = 1024;
    v183 = 4353;
    v184 = 2048;
    v185 = (uint64_t)v48;
    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:DPSR_dpsCounterSamples: %lu", buf, 0x1Cu);

  }
  v170 = 0u;
  v171 = 0u;
  v168 = 0u;
  v169 = 0u;
  v49 = *(id *)(*(_QWORD *)(v158 + 32) + 560);
  v50 = objc_msgSend(v49, "countByEnumeratingWithState:objects:count:", &v168, v192, 16);
  if (v50)
  {
    v51 = v50;
    v52 = *(_QWORD *)v169;
    do
    {
      for (k = 0; k != v51; k = (char *)k + 1)
      {
        if (*(_QWORD *)v169 != v52)
          objc_enumerationMutation(v49);
        v54 = *(void **)(*((_QWORD *)&v168 + 1) + 8 * (_QWORD)k);
        v55 = WALogCategoryDefaultHandle();
        v56 = objc_claimAutoreleasedReturnValue(v55);
        if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446722;
          v181 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
          v182 = 1024;
          v183 = 4357;
          v184 = 2112;
          v185 = (uint64_t)v54;
          _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Adding cached DPSE_associationChanges: %@", buf, 0x1Cu);
        }

        v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v158 + 56) + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsEpiloge")));
        v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "subMessageValue"));
        v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "fieldForKey:", CFSTR("DPSE_associationChanges")));
        objc_msgSend(v59, "addRepeatableSubMessageValue:", v54);

      }
      v51 = objc_msgSend(v49, "countByEnumeratingWithState:objects:count:", &v168, v192, 16);
    }
    while (v51);
  }

  v166 = 0u;
  v167 = 0u;
  v165 = 0u;
  v164 = 0u;
  v60 = *(id *)(*(_QWORD *)(v158 + 32) + 480);
  v61 = objc_msgSend(v60, "countByEnumeratingWithState:objects:count:", &v164, v191, 16);
  if (v61)
  {
    v62 = v61;
    v63 = *(_QWORD *)v165;
    do
    {
      for (m = 0; m != v62; m = (char *)m + 1)
      {
        if (*(_QWORD *)v165 != v63)
          objc_enumerationMutation(v60);
        v65 = *(void **)(*((_QWORD *)&v164 + 1) + 8 * (_QWORD)m);
        v66 = WALogCategoryDefaultHandle();
        v67 = objc_claimAutoreleasedReturnValue(v66);
        if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446722;
          v181 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
          v182 = 1024;
          v183 = 4362;
          v184 = 2112;
          v185 = (uint64_t)v65;
          _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Adding cached DPSE_accessPointInfo: %@", buf, 0x1Cu);
        }

        v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v158 + 56) + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsEpiloge")));
        v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "subMessageValue"));
        v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v69, "fieldForKey:", CFSTR("DPSE_accessPointInfos")));
        objc_msgSend(v70, "addRepeatableSubMessageValue:", v65);

      }
      v62 = objc_msgSend(v60, "countByEnumeratingWithState:objects:count:", &v164, v191, 16);
    }
    while (v62);
  }

  v162 = 0u;
  v163 = 0u;
  v160 = 0u;
  v161 = 0u;
  v71 = v158;
  v72 = *(id *)(*(_QWORD *)(v158 + 32) + 496);
  v73 = objc_msgSend(v72, "countByEnumeratingWithState:objects:count:", &v160, v190, 16);
  if (v73)
  {
    v74 = v73;
    v75 = *(_QWORD *)v161;
    do
    {
      for (n = 0; n != v74; n = (char *)n + 1)
      {
        if (*(_QWORD *)v161 != v75)
          objc_enumerationMutation(v72);
        v77 = *(void **)(*((_QWORD *)&v160 + 1) + 8 * (_QWORD)n);
        v78 = WALogCategoryDefaultHandle();
        v79 = objc_claimAutoreleasedReturnValue(v78);
        if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446722;
          v181 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
          v182 = 1024;
          v183 = 4367;
          v184 = 2112;
          v185 = (uint64_t)v77;
          _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Adding cached DPSR_usbEvent: %@", buf, 0x1Cu);
        }

        v71 = v158;
        v80 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v158 + 56) + 8) + 40), "fieldForKey:", CFSTR("DPSR_usbEvents")));
        objc_msgSend(v80, "addRepeatableSubMessageValue:", v77);

      }
      v74 = objc_msgSend(v72, "countByEnumeratingWithState:objects:count:", &v160, v190, 16);
    }
    while (v74);
  }

  v81 = *(_QWORD *)(v71 + 32);
  if (*(_BYTE *)(v81 + 42))
  {
    v82 = *(NSObject **)(v81 + 488);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100063024;
    block[3] = &unk_1000CD648;
    v83 = *(_QWORD *)(v71 + 80);
    v84 = *(_QWORD *)(v71 + 56);
    block[4] = v81;
    block[5] = v84;
    block[6] = v83;
    dispatch_sync(v82, block);
  }
  else
  {
    v85 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v71 + 56) + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsEpiloge")));
    v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v85, "subMessageValue"));
    v87 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "fieldForKey:", CFSTR("DPSE_studyType")));
    objc_msgSend(v87, "setInt32Value:", 0);

  }
  v88 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v71 + 56) + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsEpiloge")));
  v89 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "subMessageValue"));
  v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "fieldForKey:", CFSTR("DPSE_action")));
  objc_msgSend(v90, "setInt32Value:", *(unsigned int *)(*(_QWORD *)(v71 + 32) + 60));

  v91 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v71 + 56) + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsEpiloge")));
  v92 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v91, "subMessageValue"));
  v93 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v92, "fieldForKey:", CFSTR("DPSE_actionIntVal")));
  objc_msgSend(v93, "setUint32Value:", *(unsigned int *)(*(_QWORD *)(v71 + 32) + 60));

  v94 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v71 + 56) + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsEpiloge")));
  v95 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v94, "subMessageValue"));
  v96 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v95, "fieldForKey:", CFSTR("DPSE_timestamp")));
  objc_msgSend(v96, "setUint64Value:", +[WAUtil getAWDTimestamp](WAUtil, "getAWDTimestamp"));

  v97 = WALogCategoryDefaultHandle();
  v98 = objc_claimAutoreleasedReturnValue(v97);
  if (os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT))
  {
    v99 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v71 + 56) + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsEpiloge")));
    *(_DWORD *)buf = 136446722;
    v181 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
    v182 = 1024;
    v183 = 4433;
    v184 = 2112;
    v185 = (uint64_t)v99;
    _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:DPSR_dpsEpiloge: %@", buf, 0x1Cu);

  }
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v71 + 56) + 8) + 40), "setMetricID:", 589928);
  if (*(_QWORD *)(v71 + 40))
  {
    v100 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v71 + 32), "submitterMap"));
    v101 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v100, "objectForKeyedSubscript:", *(_QWORD *)(v71 + 40)));
    v102 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(v71 + 88)));
    v103 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v101, "objectForKeyedSubscript:", v102));

    if (!v103)
    {
      v104 = WALogCategoryDefaultHandle();
      v105 = objc_claimAutoreleasedReturnValue(v104);
      if (os_log_type_enabled(v105, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v181 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
        v182 = 1024;
        v183 = 4441;
        _os_log_impl((void *)&_mh_execute_header, v105, OS_LOG_TYPE_ERROR, "%{public}s::%d:Registration somehow was cleared", buf, 0x12u);
      }

      objc_msgSend(*(id *)(v71 + 32), "_purgeGroupTypeIfNecessary:", *(_QWORD *)(v71 + 88));
      v106 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v71 + 32), "processTokenToGroupTypeMap"));
      v107 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v106, "objectForKeyedSubscript:", *(_QWORD *)(v71 + 40)));

      if (!v107)
      {
        v108 = objc_alloc_init((Class)NSMutableSet);
        v109 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v71 + 32), "processTokenToGroupTypeMap"));
        objc_msgSend(v109, "setObject:forKeyedSubscript:", v108, *(_QWORD *)(v71 + 40));

      }
      v110 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v71 + 32), "processTokenToGroupTypeMap"));
      v111 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v110, "objectForKeyedSubscript:", *(_QWORD *)(v71 + 40)));
      v112 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(v71 + 88)));
      objc_msgSend(v111, "addObject:", v112);

      objc_msgSend(*(id *)(v71 + 32), "_initSubmitterAndQueryableRegistrationForProcessToken:andGroupType:", *(_QWORD *)(v71 + 40), *(_QWORD *)(v71 + 88));
      v113 = WALogCategoryDefaultHandle();
      v114 = objc_claimAutoreleasedReturnValue(v113);
      if (os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT))
      {
        v115 = *(_QWORD *)(v71 + 88);
        v116 = (void *)objc_claimAutoreleasedReturnValue(+[WAUtil trimTokenForLogging:](WAUtil, "trimTokenForLogging:", *(_QWORD *)(v71 + 40)));
        *(_DWORD *)buf = 136446978;
        v181 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
        v182 = 1024;
        v183 = 4452;
        v184 = 2048;
        v185 = v115;
        v186 = 2112;
        v187 = v116;
        _os_log_impl((void *)&_mh_execute_header, v114, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:registering message group type: %ld for process: %@", buf, 0x26u);

      }
    }
    v117 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v71 + 32), "_submitMessage:groupType:forProcessToken:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v71 + 56) + 8) + 40), *(_QWORD *)(v71 + 88), *(_QWORD *)(v71 + 40)));
    v118 = *(_QWORD *)(*(_QWORD *)(v71 + 64) + 8);
    v119 = *(void **)(v118 + 40);
    *(_QWORD *)(v118 + 40) = v117;

    v120 = v157;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v71 + 64) + 8) + 40))
    {
      v121 = WALogCategoryDefaultHandle();
      v122 = objc_claimAutoreleasedReturnValue(v121);
      if (os_log_type_enabled(v122, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v181 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
        v182 = 1024;
        v183 = 4464;
        _os_log_impl((void *)&_mh_execute_header, v122, OS_LOG_TYPE_ERROR, "%{public}s::%d:Not sending incomplete DPSR to AWD", buf, 0x12u);
      }

      v123 = WALogCategoryDefaultHandle();
      v124 = objc_claimAutoreleasedReturnValue(v123);
      if (os_log_type_enabled(v124, OS_LOG_TYPE_FAULT))
      {
        v150 = *(const char **)(*(_QWORD *)(*(_QWORD *)(v71 + 64) + 8) + 40);
        *(_DWORD *)buf = 138412290;
        v181 = v150;
        _os_log_fault_impl((void *)&_mh_execute_header, v124, OS_LOG_TYPE_FAULT, "Not sending incomplete DPSR to AWD %@", buf, 0xCu);
      }

    }
    else
    {
      v125 = *(_QWORD *)(v71 + 32);
      v126 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v71 + 56) + 8) + 40);
      v127 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v71 + 72) + 8) + 40);
      v128 = *(void **)(v125 + 160);
      v129 = *(_QWORD *)(v125 + 168);
      if (*(_BYTE *)(v125 + 42))
        objc_msgSend(v128, "transformAndSubmitDNSMessageToCA:additionalInfo:timestamps:", v126, v127, v129);
      else
        objc_msgSend(v128, "transformAndSubmitDPSMessageToCA:additionalInfo:timestamps:", v126, v127, v129);
    }
  }
  else
  {
    v151 = WALogCategoryDefaultHandle();
    v152 = objc_claimAutoreleasedReturnValue(v151);
    if (os_log_type_enabled(v152, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v181 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
      v182 = 1024;
      v183 = 4439;
      _os_log_impl((void *)&_mh_execute_header, v152, OS_LOG_TYPE_ERROR, "%{public}s::%d:nil processToken", buf, 0x12u);
    }

    v188 = NSLocalizedFailureReasonErrorKey;
    v189 = CFSTR("WAErrorCodeLacksRequiredArgument");
    v153 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v189, &v188, 1));
    v154 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.wifi.analytics.errordomain"), 9010, v153));
    v155 = *(_QWORD *)(*(_QWORD *)(v71 + 64) + 8);
    v156 = *(void **)(v155 + 40);
    *(_QWORD *)(v155 + 40) = v154;

    v120 = v157;
  }
  v130 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v71 + 56) + 8) + 40), "fieldForKey:", CFSTR("DPSR_stallNotifications")));
  v131 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v130, "repeatableValues"));
  objc_msgSend(v131, "removeAllObjects");

  v132 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v71 + 56) + 8) + 40), "fieldForKey:", CFSTR("DPSR_probeResults")));
  v133 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v132, "repeatableValues"));
  objc_msgSend(v133, "removeAllObjects");

  v134 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v71 + 56) + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsCounterSamples")));
  v135 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v134, "repeatableValues"));
  objc_msgSend(v135, "removeAllObjects");

  v136 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v71 + 56) + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsEpiloge")));
  v137 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v136, "subMessageValue"));
  v138 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v137, "fieldForKey:", CFSTR("DPSE_associationChanges")));
  v139 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v138, "repeatableValues"));
  objc_msgSend(v139, "removeAllObjects");

  objc_msgSend(*(id *)(*(_QWORD *)(v71 + 32) + 536), "removeAllObjects");
  objc_msgSend(*(id *)(*(_QWORD *)(v71 + 32) + 544), "removeAllObjects");
  objc_msgSend(*(id *)(*(_QWORD *)(v71 + 32) + 552), "removeAllObjects");
  objc_msgSend(*(id *)(*(_QWORD *)(v71 + 32) + 560), "removeAllObjects");
  objc_msgSend(*(id *)(*(_QWORD *)(v71 + 32) + 480), "removeAllObjects");
  objc_msgSend(*(id *)(*(_QWORD *)(v71 + 32) + 496), "removeAllObjects");
  objc_msgSend(*(id *)(*(_QWORD *)(v71 + 32) + 168), "removeAllObjects");
  v140 = WALogCategoryDefaultHandle();
  v141 = objc_claimAutoreleasedReturnValue(v140);
  if (os_log_type_enabled(v141, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    v181 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
    v182 = 1024;
    v183 = 4482;
    _os_log_impl((void *)&_mh_execute_header, v141, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:_dpsCurrentlyGatheringConsecutiveSamples FALSE", buf, 0x12u);
  }

  *(_BYTE *)(*(_QWORD *)(v71 + 32) + 33) = 0;
  v142 = WALogCategoryDefaultHandle();
  v143 = objc_claimAutoreleasedReturnValue(v142);
  if (os_log_type_enabled(v143, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    v181 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
    v182 = 1024;
    v183 = 4484;
    _os_log_impl((void *)&_mh_execute_header, v143, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:_dpsStudyInProgress False", buf, 0x12u);
  }

  *(_BYTE *)(*(_QWORD *)(v71 + 32) + 42) = 0;
  *(_BYTE *)(*(_QWORD *)(v71 + 32) + 32) = 0;
  v144 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v71 + 32), "dpsStudyTransaction"));

  if (v144)
  {
    v145 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](WAActivityManager, "sharedActivityManager"));
    v146 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v71 + 32), "dpsStudyTransaction"));
    objc_msgSend(v145, "osTransactionComplete:", v146);

    objc_msgSend(*(id *)(v71 + 32), "setDpsStudyTransaction:", 0);
  }
  v147 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v71 + 32), "dnsStudyTransaction"));

  if (v147)
  {
    v148 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](WAActivityManager, "sharedActivityManager"));
    v149 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v71 + 32), "dnsStudyTransaction"));
    objc_msgSend(v148, "osTransactionComplete:", v149);

    objc_msgSend(*(id *)(v71 + 32), "setDnsStudyTransaction:", 0);
  }
  if (objc_msgSend(*(id *)(v71 + 32), "isMemoryPressureRequestDeferred"))
    objc_msgSend(*(id *)(v71 + 32), "handleMemoryWarning:", 1);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v71 + 48));

}

void sub_100063024(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;
  unint64_t v4;
  double v5;
  double v6;
  unint64_t v7;
  unint64_t v8;
  double v9;
  double v10;
  unint64_t v11;
  id v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  unint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  void *v26;
  _BYTE *v27;
  double v28;
  double v29;
  unint64_t v30;
  double v31;
  double v32;
  id v33;
  NSObject *v34;
  uint64_t v35;
  id v36;
  NSObject *v37;
  id v38;
  NSObject *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  void *v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  void *v149;
  void *v150;
  void *v151;
  void *v152;
  void *v153;
  void *v154;
  void *v155;
  void *v156;
  void *v157;
  void *v158;
  void *v159;
  void *v160;
  void *v161;
  void *v162;
  int v163;
  const char *v164;
  __int16 v165;
  int v166;
  __int16 v167;
  double v168;
  __int16 v169;
  double v170;
  __int16 v171;
  uint64_t v172;
  __int16 v173;
  uint64_t v174;

  v2 = objc_autoreleasePoolPush();
  v3 = (_QWORD *)a1[4];
  v4 = v3[31];
  v5 = 0.0;
  v6 = 0.0;
  if (v4)
    v6 = (double)(unint64_t)v3[32] / (double)v4 * 100.0;
  v7 = v3[33];
  if (v7)
    v5 = (double)(unint64_t)v3[34] / (double)v7 * 100.0;
  v8 = v3[35];
  v9 = 0.0;
  v10 = 0.0;
  if (v8)
    v10 = (double)(unint64_t)v3[36] / (double)v8 * 100.0;
  v11 = v3[37];
  if (v11)
    v9 = (double)(unint64_t)v3[38] / (double)v11 * 100.0;
  v12 = WALogCategoryDefaultHandle();
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v14 = a1[4];
    v15 = *(_QWORD *)(v14 + 248);
    v16 = *(_QWORD *)(v14 + 280);
    v163 = 136447490;
    v164 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
    v165 = 1024;
    v166 = 4381;
    v167 = 2048;
    v168 = v6;
    v169 = 2048;
    v170 = v10;
    v171 = 2048;
    v172 = v15;
    v173 = 2048;
    v174 = v16;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:LANPingResultSummary: LANHealth-before-trap:%.2f%% LANHealth-after-trap:%.2f%% totalPingsBeforeTrap:%lu totalPingsAfterTrap:%lu", (uint8_t *)&v163, 0x3Au);
  }

  v17 = WALogCategoryDefaultHandle();
  v18 = objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    v19 = a1[4];
    v20 = *(_QWORD *)(v19 + 264);
    v21 = *(_QWORD *)(v19 + 296);
    v163 = 136447490;
    v164 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
    v165 = 1024;
    v166 = 4382;
    v167 = 2048;
    v168 = v5;
    v169 = 2048;
    v170 = v9;
    v171 = 2048;
    v172 = v20;
    v173 = 2048;
    v174 = v21;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:WANPingResultSummary: WANHealth-before-trap:%.2f%% WANHealth-after-trap:%.2f%% totalPingsBeforeTrap:%lu totalPingsAfterTrap:%lu", (uint8_t *)&v163, 0x3Au);
  }

  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 176), "preferences"));
  v23 = (unint64_t)objc_msgSend(v22, "dns_symptoms_trap_evaluated_at_sample");
  v24 = v23 >> 1;

  v25 = (_BYTE *)a1[6];
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 176), "preferences"));
  v27 = objc_msgSend(v26, "dns_symptoms_trap_evaluated_at_sample");

  v28 = 0.0;
  v29 = 0.0;
  if (v23 >= 2)
    v29 = (double)(v24 - *(_QWORD *)(a1[4] + 312)) / (double)v24 * 100.0;
  v30 = v25 - v27;
  if (v25 != v27)
    v28 = (double)(v30 - *(_QWORD *)(a1[4] + 320)) / (double)v30 * 100.0;
  v31 = 0.0;
  v32 = 0.0;
  if (v23 >= 2)
    v32 = (double)(100 * ((v24 - *(_QWORD *)(a1[4] + 328)) / v24));
  if (v25 != v27)
    v31 = (double)(100 * ((v30 - *(_QWORD *)(a1[4] + 336)) / v30));
  v33 = WALogCategoryDefaultHandle();
  v34 = objc_claimAutoreleasedReturnValue(v33);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    v35 = *(_QWORD *)(a1[4] + 312);
    v163 = 136447234;
    v164 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
    v165 = 1024;
    v166 = 4392;
    v167 = 2048;
    v168 = *(double *)&v24;
    v169 = 2048;
    *(_QWORD *)&v170 = v25 - v27;
    v171 = 2048;
    v172 = v35;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:totalInstancesBeforeTrap:%lu totalInstancesAfterTrap:%lu times-netscore-below-threshold-before-trap:%lu", (uint8_t *)&v163, 0x30u);
  }

  v36 = WALogCategoryDefaultHandle();
  v37 = objc_claimAutoreleasedReturnValue(v36);
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
  {
    v163 = 136446978;
    v164 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
    v165 = 1024;
    v166 = 4393;
    v167 = 2048;
    v168 = v29;
    v169 = 2048;
    v170 = v28;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:NetScoreSummary: NetScore Health-before-trap:%.2f%% Health-after-trap:%.2f%%", (uint8_t *)&v163, 0x26u);
  }

  v38 = WALogCategoryDefaultHandle();
  v39 = objc_claimAutoreleasedReturnValue(v38);
  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
  {
    v163 = 136446978;
    v164 = "-[WAEngine gatherConsecutiveDatapathReadings:forProcessToken:andReply:]_block_invoke";
    v165 = 1024;
    v166 = 4394;
    v167 = 2048;
    v168 = v32;
    v169 = 2048;
    v170 = v31;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:DataStallScoreSummary: DataStallScore Health-before-trap:%.2f%% Health-after-trap:%.2f%%", (uint8_t *)&v163, 0x26u);
  }

  v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsEpiloge")));
  v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "subMessageValue"));
  v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "fieldForKey:", CFSTR("DPSE_studyType")));
  objc_msgSend(v42, "setInt32Value:", 1);

  v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsEpiloge")));
  v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "subMessageValue"));
  v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "fieldForKey:", CFSTR("DPSE_symptomsDnsStats")));
  v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "subMessageValue"));
  v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "fieldForKey:", CFSTR("WFAAWDWASDS_totalDnsServers")));
  objc_msgSend(v47, "setUint32Value:", *(unsigned int *)(a1[4] + 344));

  v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsEpiloge")));
  v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "subMessageValue"));
  v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "fieldForKey:", CFSTR("DPSE_symptomsDnsStats")));
  v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "subMessageValue"));
  v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "fieldForKey:", CFSTR("WFAAWDWASDS_numIpv4DnsServers")));
  objc_msgSend(v52, "setUint32Value:", *(unsigned int *)(a1[4] + 352));

  v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsEpiloge")));
  v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "subMessageValue"));
  v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "fieldForKey:", CFSTR("DPSE_symptomsDnsStats")));
  v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "subMessageValue"));
  v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v56, "fieldForKey:", CFSTR("WFAAWDWASDS_numIpv6DnsServers")));
  objc_msgSend(v57, "setUint32Value:", *(unsigned int *)(a1[4] + 360));

  v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsEpiloge")));
  v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "subMessageValue"));
  v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "fieldForKey:", CFSTR("DPSE_symptomsDnsStats")));
  v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "subMessageValue"));
  v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v61, "fieldForKey:", CFSTR("WFAAWDWASDS_numLocalDnsServers")));
  objc_msgSend(v62, "setUint32Value:", *(unsigned int *)(a1[4] + 368));

  v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsEpiloge")));
  v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "subMessageValue"));
  v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v64, "fieldForKey:", CFSTR("DPSE_symptomsDnsStats")));
  v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v65, "subMessageValue"));
  v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v66, "fieldForKey:", CFSTR("WFAAWDWASDS_numRemoteDnsServers")));
  objc_msgSend(v67, "setUint32Value:", *(unsigned int *)(a1[4] + 376));

  v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsEpiloge")));
  v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "subMessageValue"));
  v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v69, "fieldForKey:", CFSTR("DPSE_symptomsDnsStats")));
  v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "subMessageValue"));
  v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v71, "fieldForKey:", CFSTR("WFAAWDWASDS_configType")));
  objc_msgSend(v72, "setInt32Value:", *(unsigned int *)(a1[4] + 384));

  v73 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsEpiloge")));
  v74 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v73, "subMessageValue"));
  v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v74, "fieldForKey:", CFSTR("DPSE_symptomsDnsStats")));
  v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v75, "subMessageValue"));
  v77 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v76, "fieldForKey:", CFSTR("WFAAWDWASDS_netscoreAtStudyStart")));
  objc_msgSend(v77, "setUint32Value:", *(unsigned int *)(a1[4] + 392));

  v78 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsEpiloge")));
  v79 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v78, "subMessageValue"));
  v80 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v79, "fieldForKey:", CFSTR("DPSE_symptomsDnsStats")));
  v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v80, "subMessageValue"));
  v82 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v81, "fieldForKey:", CFSTR("WFAAWDWASDS_stallscoreAtStudyStart")));
  objc_msgSend(v82, "setUint32Value:", *(unsigned int *)(a1[4] + 400));

  v83 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsEpiloge")));
  v84 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v83, "subMessageValue"));
  v85 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v84, "fieldForKey:", CFSTR("DPSE_symptomsDnsStats")));
  v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v85, "subMessageValue"));
  v87 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "fieldForKey:", CFSTR("WFAAWDWASDS_impactedServersAtStudyStart")));
  objc_msgSend(v87, "setUint32Value:", *(unsigned int *)(a1[4] + 408));

  v88 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsEpiloge")));
  v89 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "subMessageValue"));
  v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "fieldForKey:", CFSTR("DPSE_symptomsDnsStats")));
  v91 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v90, "subMessageValue"));
  v92 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v91, "fieldForKey:", CFSTR("WFAAWDWASDS_netscoreHealthBeforeDecision")));
  objc_msgSend(v92, "setUint32Value:", v29);

  v93 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsEpiloge")));
  v94 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v93, "subMessageValue"));
  v95 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v94, "fieldForKey:", CFSTR("DPSE_symptomsDnsStats")));
  v96 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v95, "subMessageValue"));
  v97 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v96, "fieldForKey:", CFSTR("WFAAWDWASDS_stallscoreHealthBeforeDecision")));
  objc_msgSend(v97, "setUint32Value:", v32);

  v98 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsEpiloge")));
  v99 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v98, "subMessageValue"));
  v100 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v99, "fieldForKey:", CFSTR("DPSE_symptomsDnsStats")));
  v101 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v100, "subMessageValue"));
  v102 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v101, "fieldForKey:", CFSTR("WFAAWDWASDS_lanHealthBeforeDecision")));
  objc_msgSend(v102, "setUint32Value:", v6);

  v103 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsEpiloge")));
  v104 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v103, "subMessageValue"));
  v105 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v104, "fieldForKey:", CFSTR("DPSE_symptomsDnsStats")));
  v106 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v105, "subMessageValue"));
  v107 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v106, "fieldForKey:", CFSTR("WFAAWDWASDS_wanHealthBeforeDecision")));
  objc_msgSend(v107, "setUint32Value:", v5);

  v108 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsEpiloge")));
  v109 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v108, "subMessageValue"));
  v110 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v109, "fieldForKey:", CFSTR("DPSE_symptomsDnsStats")));
  v111 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v110, "subMessageValue"));
  v112 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v111, "fieldForKey:", CFSTR("WFAAWDWASDS_isCaptiveServerIPResolved")));
  objc_msgSend(v112, "setBoolValue:", *(unsigned __int8 *)(a1[4] + 43));

  v113 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsEpiloge")));
  v114 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v113, "subMessageValue"));
  v115 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v114, "fieldForKey:", CFSTR("DPSE_symptomsDnsStats")));
  v116 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v115, "subMessageValue"));
  v117 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v116, "fieldForKey:", CFSTR("WFAAWDWASDS_netscoreAtStudyEnd")));
  objc_msgSend(v117, "setUint32Value:", *(unsigned int *)(a1[4] + 416));

  v118 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsEpiloge")));
  v119 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v118, "subMessageValue"));
  v120 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v119, "fieldForKey:", CFSTR("DPSE_symptomsDnsStats")));
  v121 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v120, "subMessageValue"));
  v122 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v121, "fieldForKey:", CFSTR("WFAAWDWASDS_stallscoreAtStudyEnd")));
  objc_msgSend(v122, "setUint32Value:", *(unsigned int *)(a1[4] + 424));

  v123 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsEpiloge")));
  v124 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v123, "subMessageValue"));
  v125 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v124, "fieldForKey:", CFSTR("DPSE_symptomsDnsStats")));
  v126 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v125, "subMessageValue"));
  v127 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v126, "fieldForKey:", CFSTR("WFAAWDWASDS_impactedServersAtStudyEnd")));
  objc_msgSend(v127, "setUint32Value:", *(unsigned int *)(a1[4] + 432));

  v128 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsEpiloge")));
  v129 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v128, "subMessageValue"));
  v130 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v129, "fieldForKey:", CFSTR("DPSE_symptomsDnsStats")));
  v131 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v130, "subMessageValue"));
  v132 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v131, "fieldForKey:", CFSTR("WFAAWDWASDS_netscoreHealthAfterDecision")));
  objc_msgSend(v132, "setUint32Value:", v28);

  v133 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsEpiloge")));
  v134 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v133, "subMessageValue"));
  v135 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v134, "fieldForKey:", CFSTR("DPSE_symptomsDnsStats")));
  v136 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v135, "subMessageValue"));
  v137 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v136, "fieldForKey:", CFSTR("WFAAWDWASDS_stallscoreHealthAfterDecision")));
  objc_msgSend(v137, "setUint32Value:", v31);

  v138 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsEpiloge")));
  v139 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v138, "subMessageValue"));
  v140 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v139, "fieldForKey:", CFSTR("DPSE_symptomsDnsStats")));
  v141 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v140, "subMessageValue"));
  v142 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v141, "fieldForKey:", CFSTR("WFAAWDWASDS_lanHealthAfterDecision")));
  objc_msgSend(v142, "setUint32Value:", v10);

  v143 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsEpiloge")));
  v144 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v143, "subMessageValue"));
  v145 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v144, "fieldForKey:", CFSTR("DPSE_symptomsDnsStats")));
  v146 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v145, "subMessageValue"));
  v147 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v146, "fieldForKey:", CFSTR("WFAAWDWASDS_wanHealthAfterDecision")));
  objc_msgSend(v147, "setUint32Value:", v9);

  v148 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsEpiloge")));
  v149 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v148, "subMessageValue"));
  v150 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v149, "fieldForKey:", CFSTR("DPSE_symptomsDnsStats")));
  v151 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v150, "subMessageValue"));
  v152 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v151, "fieldForKey:", CFSTR("WFAAWDWASDS_dpsNotificationReceivedDuringStudy")));
  objc_msgSend(v152, "setBoolValue:", *(unsigned __int8 *)(a1[4] + 38));

  v153 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsEpiloge")));
  v154 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v153, "subMessageValue"));
  v155 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v154, "fieldForKey:", CFSTR("DPSE_symptomsDnsStats")));
  v156 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v155, "subMessageValue"));
  v157 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v156, "fieldForKey:", CFSTR("WFAAWDWASDS_slowWiFiNotificationReceivedDuringStudy")));
  objc_msgSend(v157, "setBoolValue:", *(unsigned __int8 *)(a1[4] + 39));

  v158 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "fieldForKey:", CFSTR("DPSR_dpsEpiloge")));
  v159 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v158, "subMessageValue"));
  v160 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v159, "fieldForKey:", CFSTR("DPSE_symptomsDnsStats")));
  v161 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v160, "subMessageValue"));
  v162 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v161, "fieldForKey:", CFSTR("WFAAWDWASDS_isPingEnqueueFailing")));
  objc_msgSend(v162, "setBoolValue:", *(unsigned __int8 *)(a1[4] + 40));

  objc_autoreleasePoolPop(v2);
}

void sub_1000653EC(uint64_t a1)
{
  void *v2;

  v2 = objc_autoreleasePoolPush();
  objc_msgSend(*(id *)(a1 + 32), "initializeProbeCxt");
  objc_autoreleasePoolPop(v2);
}

void sub_10006541C(uint64_t a1)
{
  void *v2;

  v2 = objc_autoreleasePoolPush();
  objc_msgSend(*(id *)(a1 + 32), "triggerPeerDiagnosticsStudy:symptomsDnsStats:", *(_QWORD *)(a1 + 40), 0);
  objc_autoreleasePoolPop(v2);
}

void sub_100065450(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  id v13;

  v3 = objc_msgSend(a2, "copy");
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "fieldForKey:", CFSTR("DPSCS_timestamp")));
  objc_msgSend(v4, "setUint64Value:", +[WAUtil getAWDTimestamp](WAUtil, "getAWDTimestamp"));

  v5 = WALogCategoryDefaultHandle();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 136446722;
    v9 = "-[WAEngine _triggerDPSStudy:forProcessToken:waMessage:andReply:]_block_invoke";
    v10 = 1024;
    v11 = 4593;
    v12 = 2112;
    v13 = v3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Adding dpsStatsContainer while _dpsStudyInProgress %@ ", (uint8_t *)&v8, 0x1Cu);
  }

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 552), "addObject:", v3);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 168), "setObject:forKeyedSubscript:", v7, CFSTR("end"));

}

void sub_10006559C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  id v12;

  v3 = objc_msgSend(a2, "copy");
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "fieldForKey:", CFSTR("DPSCS_timestamp")));
  objc_msgSend(v4, "setUint64Value:", +[WAUtil getAWDTimestamp](WAUtil, "getAWDTimestamp"));

  v5 = WALogCategoryDefaultHandle();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 136446722;
    v8 = "-[WAEngine _triggerDPSStudy:forProcessToken:waMessage:andReply:]_block_invoke";
    v9 = 1024;
    v10 = 4657;
    v11 = 2112;
    v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Adding dpsStatsContainer while _dpsStudyInProgress %@ ", (uint8_t *)&v7, 0x1Cu);
  }

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 552), "addObject:", v3);
}

void sub_1000656B8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  id v12;

  v3 = objc_msgSend(a2, "copy");
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "fieldForKey:", CFSTR("DPSCS_timestamp")));
  objc_msgSend(v4, "setUint64Value:", +[WAUtil getAWDTimestamp](WAUtil, "getAWDTimestamp"));

  v5 = WALogCategoryDefaultHandle();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 136446722;
    v8 = "-[WAEngine _triggerDPSStudy:forProcessToken:waMessage:andReply:]_block_invoke";
    v9 = 1024;
    v10 = 4685;
    v11 = 2112;
    v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Adding dpsStatsContainer while _dpsStudyInProgress %@ ", (uint8_t *)&v7, 0x1Cu);
  }

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 552), "addObject:", v3);
}

void sub_1000657D4(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;

  v2 = objc_autoreleasePoolPush();
  v3 = *(void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100065868;
  v5[3] = &unk_1000CCF78;
  v6 = *(id *)(a1 + 48);
  objc_msgSend(v3, "gatherConsecutiveDatapathReadings:forProcessToken:andReply:", 0, v4, v5);

  objc_autoreleasePoolPop(v2);
}

void sub_100065868(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  NSObject *v6;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  id v12;

  v4 = a3;
  v5 = WALogCategoryDefaultHandle();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 136446722;
    v8 = "-[WAEngine _triggerDPSStudy:forProcessToken:waMessage:andReply:]_block_invoke_2";
    v9 = 1024;
    v10 = 4709;
    v11 = 2112;
    v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:gatherConsecutiveDatapathReadings replied err %@", (uint8_t *)&v7, 0x1Cu);
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1000661D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

id sub_10006620C()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1000ED0A8;
  v7 = qword_1000ED0A8;
  if (!qword_1000ED0A8)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100071864;
    v3[3] = &unk_1000CD9D0;
    v3[4] = &v4;
    sub_100071864((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1000662AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000662C4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;

  v5 = a2;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a3);
  v9 = a3;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;
  v8 = v5;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100066AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t v51;

  _Block_object_dispose(&a45, 8);
  _Block_object_dispose(&a51, 8);
  _Block_object_dispose((const void *)(v51 - 224), 8);
  _Unwind_Resume(a1);
}

void sub_100066AE8(uint64_t a1)
{
  id v2;
  NSObject *v3;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;

  v2 = WALogCategoryDefaultHandle();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 136446466;
    v5 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
    v6 = 1024;
    v7 = 4826;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:slow_wifi_report_sent_after expired", (uint8_t *)&v4, 0x12u);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100066BA8(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15[2];
  id location;

  objc_initWeak(&location, *(id *)(a1 + 32));
  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100066CB8;
  v10[3] = &unk_1000CD788;
  objc_copyWeak(v15, &location);
  v5 = *(void **)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  v6 = v5;
  v7 = *(void **)(a1 + 72);
  v11 = v6;
  v15[1] = v7;
  v8 = *(id *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 64);
  v12 = v8;
  v14 = v9;
  objc_msgSend(v3, "_getNewMessageForKey:groupType:forProcessToken:shouldCheckForPrePopulation:andReply:", CFSTR("WFAAWDLQM"), v2, v4, 1, v10);

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
}

void sub_100066C9C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_100066CB8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  dispatch_queue_global_t global_queue;
  NSObject *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  _QWORD v18[4];
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  global_queue = dispatch_get_global_queue(0, 0);
  v9 = objc_claimAutoreleasedReturnValue(global_queue);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_100066DE0;
  v18[3] = &unk_1000CD760;
  v19 = WeakRetained;
  v20 = v6;
  v10 = *(_QWORD *)(a1 + 48);
  v21 = v5;
  v24 = v10;
  v11 = *(id *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 72);
  v22 = v11;
  v26 = v12;
  v13 = *(id *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 56);
  v23 = v13;
  v25 = v14;
  v15 = v5;
  v16 = v6;
  v17 = WeakRetained;
  dispatch_async(v9, v18);

}

void sub_100066DE0(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id *v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id *v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  uint64_t v17;
  void *v18;
  id v19;
  NSObject *v20;
  uint64_t v21;
  id v22;
  NSObject *v23;
  void *v24;
  void *v25;
  double v26;
  id v27;
  NSObject *v28;
  id v29;
  NSObject *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  id v37;
  NSObject *v38;
  uint64_t v39;
  id v40;
  NSObject *v41;
  void *v42;
  id v43;
  NSObject *v44;
  id v45;
  _QWORD v46[4];
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint8_t buf[4];
  const char *v52;
  __int16 v53;
  int v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;

  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 51))
  {
    v2 = WALogCategoryDefaultHandle();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v52 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke_3";
      v53 = 1024;
      v54 = 4848;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Setting error due to debug command kWAIORCommandForceStudyErrorFromMsg", buf, 0x12u);
    }

    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 51) = 0;
    v4 = (id *)(a1 + 40);
  }
  else
  {
    v4 = (id *)(a1 + 40);
    if (!*(_QWORD *)(a1 + 40))
    {
      v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "fieldForKey:", CFSTR("WFAAWDLQM_timestamp")));
      objc_msgSend(v42, "setUint64Value:", +[WAUtil getAWDTimestamp](WAUtil, "getAWDTimestamp"));

      v43 = WALogCategoryDefaultHandle();
      v44 = objc_claimAutoreleasedReturnValue(v43);
      if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v52 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
        v53 = 1024;
        v54 = 4919;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Adding linkQualSample", buf, 0x12u);
      }

      v20 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40), "fieldForKey:", CFSTR("SWFR_linkQualSamples")));
      v45 = objc_msgSend(*(id *)(a1 + 48), "copy");
      -[NSObject addRepeatableSubMessageValue:](v20, "addRepeatableSubMessageValue:", v45);

      goto LABEL_36;
    }
  }
  v5 = WALogCategoryDefaultHandle();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    v8 = *(_QWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 136446978;
    v52 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
    v53 = 1024;
    v54 = 4855;
    v55 = 2112;
    v56 = v7;
    v57 = 2112;
    v58 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to find Slow WiFi values properly populated %@ err: %@", buf, 0x26u);
  }

  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
  v11 = *(_QWORD *)(v9 + 40);
  v10 = (id *)(v9 + 40);
  if (!v11)
  {
    objc_storeStrong(v10, *v4);
    v12 = WALogCategoryDefaultHandle();
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
      *(_DWORD *)buf = 136446722;
      v52 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
      v53 = 1024;
      v54 = 4859;
      v55 = 2112;
      v56 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:retErr will return %@", buf, 0x1Cu);
    }

  }
  if (objc_msgSend(*v4, "code") == (id)9029 && objc_msgSend(*(id *)(a1 + 32), "isAXAssociatoin"))
  {
    v15 = WALogCategoryDefaultHandle();
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v52 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
      v53 = 1024;
      v54 = 4863;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:LinkQualitySamples missing mandatory fields: WAErrorCodeTxOutputBelowExpectedMissing, but PHY MODE is APPLE80211_MODE_11AX rdar://80134615, clearing error", buf, 0x12u);
    }

    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    v18 = *(void **)(v17 + 40);
    *(_QWORD *)(v17 + 40) = 0;

    v19 = WALogCategoryDefaultHandle();
    v20 = objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
      *(_DWORD *)buf = 136446722;
      v52 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
      v53 = 1024;
      v54 = 4865;
      v55 = 2112;
      v56 = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:retErr reset %@", buf, 0x1Cu);
    }
LABEL_36:

    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 56));
    return;
  }
  v22 = WALogCategoryDefaultHandle();
  v23 = objc_claimAutoreleasedReturnValue(v22);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    v52 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
    v53 = 1024;
    v54 = 4869;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Attempting Rescan", buf, 0x12u);
  }

  v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v25 = v24;
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 664) && (objc_msgSend(v24, "timeIntervalSinceDate:"), v26 > 30.0))
  {
    v27 = WALogCategoryDefaultHandle();
    v28 = objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v52 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
      v53 = 1024;
      v54 = 4873;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Attemping determineChannelsPerIORPopulatable", buf, 0x12u);
    }

    v29 = WALogCategoryDefaultHandle();
    v30 = objc_claimAutoreleasedReturnValue(v29);
    if (os_signpost_enabled(v30))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v30, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "Engine LinkQualitySamples MissingChannelsRepopulate", "", buf, 2u);
    }

    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "iorMessagePopulator"));
    objc_msgSend(v31, "determineChannelsPerIORPopulatable");

    v32 = *(void **)(a1 + 32);
    v33 = *(_QWORD *)(a1 + 88);
    v46[0] = _NSConcreteStackBlock;
    v46[1] = 3221225472;
    v46[2] = sub_1000674EC;
    v46[3] = &unk_1000CD738;
    v34 = *(_QWORD *)(a1 + 64);
    v49 = *(_QWORD *)(a1 + 72);
    v35 = *(id *)(a1 + 48);
    v36 = *(_QWORD *)(a1 + 80);
    v47 = v35;
    v50 = v36;
    v48 = *(id *)(a1 + 56);
    objc_msgSend(v32, "_getNewMessageForKey:groupType:forProcessToken:shouldCheckForPrePopulation:andReply:", CFSTR("WFAAWDLQM"), v33, v34, 1, v46);
    objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 664), v25);

  }
  else
  {
    v37 = WALogCategoryDefaultHandle();
    v38 = objc_claimAutoreleasedReturnValue(v37);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      v39 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 664);
      *(_DWORD *)buf = 136446722;
      v52 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
      v53 = 1024;
      v54 = 4911;
      v55 = 2112;
      v56 = v39;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "%{public}s::%d:Rescanned too recently, waiting for 30s to elapse since last check at %@", buf, 0x1Cu);
    }

    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 56));
  }
  v40 = WALogCategoryDefaultHandle();
  v41 = objc_claimAutoreleasedReturnValue(v40);
  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    v52 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
    v53 = 1024;
    v54 = 4914;
    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Rescan Attempt Complete", buf, 0x12u);
  }

}

void sub_1000674EC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  id *v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  id v14;
  id v15;
  NSObject *v16;
  _BOOL4 v17;
  id v18;
  id v19;
  NSObject *v20;
  void *v21;
  void *v22;
  id v23;
  NSObject *v24;
  void *v25;
  id v26;
  id v27;
  NSObject *v28;
  int v29;
  const char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  id v34;

  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v10 = *(void **)(v7 + 40);
  v8 = (id *)(v7 + 40);
  v9 = v10;
  if (v6)
  {
    if (!v9)
    {
      objc_storeStrong(v8, a3);
      v11 = WALogCategoryDefaultHandle();
      v12 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        v13 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
        v29 = 136446722;
        v30 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
        v31 = 1024;
        v32 = 4891;
        v33 = 2112;
        v34 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:retErr will return %@", (uint8_t *)&v29, 0x1Cu);
      }

    }
    v14 = objc_msgSend(v6, "code");
    v15 = WALogCategoryDefaultHandle();
    v16 = objc_claimAutoreleasedReturnValue(v15);
    v17 = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
    if (v14 == (id)9029)
    {
      if (v17)
      {
        v29 = 136446466;
        v30 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
        v31 = 1024;
        v32 = 4896;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%{public}s::%d:LinkQualitySample missing mandatory fields on rescan: WAErrorCodeTxOutputBelowExpectedMissing", (uint8_t *)&v29, 0x12u);
      }

      v18 = WALogCategoryDefaultHandle();
      v16 = objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
      {
        LOWORD(v29) = 0;
        _os_log_fault_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "LinkQualitySample missing mandatory fields on rescan: WAErrorCodeTxOutputBelowExpectedMissing", (uint8_t *)&v29, 2u);
      }
    }
    else if (v17)
    {
      v29 = 136446722;
      v30 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
      v31 = 1024;
      v32 = 4900;
      v33 = 2112;
      v34 = v6;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%{public}s::%d:LinkQualitySample error %@", (uint8_t *)&v29, 0x1Cu);
    }
  }
  else
  {
    *v8 = 0;

    v19 = WALogCategoryDefaultHandle();
    v20 = objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      v21 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
      v29 = 136446722;
      v30 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
      v31 = 1024;
      v32 = 4882;
      v33 = 2112;
      v34 = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:retErr reset %@", (uint8_t *)&v29, 0x1Cu);
    }

    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "fieldForKey:", CFSTR("WFAAWDLQM_timestamp")));
    objc_msgSend(v22, "setUint64Value:", +[WAUtil getAWDTimestamp](WAUtil, "getAWDTimestamp"));

    v23 = WALogCategoryDefaultHandle();
    v24 = objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      v25 = *(void **)(a1 + 32);
      v29 = 136446722;
      v30 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
      v31 = 1024;
      v32 = 4885;
      v33 = 2112;
      v34 = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Adding retry linkQualSample %@", (uint8_t *)&v29, 0x1Cu);
    }

    v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("SWFR_linkQualSamples")));
    v26 = objc_msgSend(v5, "copy");
    -[NSObject addRepeatableSubMessageValue:](v16, "addRepeatableSubMessageValue:", v26);

  }
  v27 = WALogCategoryDefaultHandle();
  v28 = objc_claimAutoreleasedReturnValue(v27);
  if (os_signpost_enabled(v28))
  {
    LOWORD(v29) = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v28, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "Engine LinkQualitySamples MissingChannelsRepopulate", "", (uint8_t *)&v29, 2u);
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

intptr_t sub_1000678F8(uint64_t a1)
{
  id v2;
  id v3;
  __int128 v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  id v12;
  id v13;
  __int128 v14;
  id v15;
  uint64_t v16;
  void *j;
  void *v18;
  id v19;
  NSObject *v20;
  void *v21;
  id v22;
  NSObject *v23;
  id v24;
  NSObject *v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  NSObject *v30;
  void *v31;
  void *v32;
  void *v33;
  unsigned int v34;
  id v35;
  NSObject *v36;
  void *v37;
  void *v38;
  void *v39;
  unsigned int v40;
  id v41;
  NSObject *v42;
  void *v43;
  void *v44;
  void *v45;
  unsigned int v46;
  id v47;
  NSObject *v48;
  void *v49;
  void *v50;
  void *v51;
  unsigned int v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  id v57;
  NSObject *v58;
  void *v59;
  void *v60;
  void *v61;
  unsigned int v62;
  void *v63;
  void *v64;
  id v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  id v70;
  NSObject *v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  void *v77;
  uint64_t v78;
  id *v79;
  uint64_t v80;
  id v81;
  NSObject *v82;
  unint64_t v83;
  id v84;
  NSObject *v85;
  unint64_t v86;
  id v87;
  NSObject *v88;
  id v89;
  NSObject *v90;
  void *v91;
  void *v92;
  id v93;
  NSObject *v94;
  void *v95;
  void *v96;
  void *v97;
  const char *v99;
  id v100;
  NSObject *v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  id v105;
  unint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  uint8_t buf[4];
  const char *v117;
  __int16 v118;
  int v119;
  __int16 v120;
  unint64_t v121;
  __int16 v122;
  void *v123;
  NSErrorUserInfoKey v124;
  const __CFString *v125;
  _BYTE v126[128];
  _BYTE v127[128];

  v112 = 0u;
  v113 = 0u;
  v114 = 0u;
  v115 = 0u;
  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 568);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v112, v127, 16);
  if (v3)
  {
    v5 = v3;
    v6 = *(_QWORD *)v113;
    *(_QWORD *)&v4 = 136446722;
    v107 = v4;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v113 != v6)
          objc_enumerationMutation(v2);
        v8 = *(void **)(*((_QWORD *)&v112 + 1) + 8 * (_QWORD)i);
        v9 = WALogCategoryDefaultHandle();
        v10 = objc_claimAutoreleasedReturnValue(v9);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = v107;
          v117 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
          v118 = 1024;
          v119 = 4939;
          v120 = 2112;
          v121 = (unint64_t)v8;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Adding cached SWFR_slowNotice: %@", buf, 0x1Cu);
        }

        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("SWFR_slowNotice")));
        objc_msgSend(v11, "setSubMessageValue:", v8);

      }
      v5 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v112, v127, 16);
    }
    while (v5);
  }

  v110 = 0u;
  v111 = 0u;
  v108 = 0u;
  v109 = 0u;
  v12 = *(id *)(*(_QWORD *)(a1 + 32) + 496);
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v108, v126, 16);
  if (v13)
  {
    v15 = v13;
    v16 = *(_QWORD *)v109;
    *(_QWORD *)&v14 = 136446722;
    v107 = v14;
    do
    {
      for (j = 0; j != v15; j = (char *)j + 1)
      {
        if (*(_QWORD *)v109 != v16)
          objc_enumerationMutation(v12);
        v18 = *(void **)(*((_QWORD *)&v108 + 1) + 8 * (_QWORD)j);
        v19 = WALogCategoryDefaultHandle();
        v20 = objc_claimAutoreleasedReturnValue(v19);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = v107;
          v117 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
          v118 = 1024;
          v119 = 4944;
          v120 = 2112;
          v121 = (unint64_t)v18;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Adding cached SWFR_usbEvent: %@", buf, 0x1Cu);
        }

        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("SWFR_usbEvents")));
        objc_msgSend(v21, "setSubMessageValue:", v18);

      }
      v15 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v108, v126, 16);
    }
    while (v15);
  }

  v22 = WALogCategoryDefaultHandle();
  v23 = objc_claimAutoreleasedReturnValue(v22);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    v117 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
    v118 = 1024;
    v119 = 4948;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:SlowWiFi Summary!", buf, 0x12u);
  }

  v24 = WALogCategoryDefaultHandle();
  v25 = objc_claimAutoreleasedReturnValue(v24);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("SWFR_linkQualSamples")));
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "repeatableValues"));
    v28 = objc_msgSend(v27, "count");
    *(_DWORD *)buf = 136446722;
    v117 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
    v118 = 1024;
    v119 = 4949;
    v120 = 2048;
    v121 = (unint64_t)v28;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:SWFR_linkQualSamples: %lu", buf, 0x1Cu);

  }
  v29 = WALogCategoryDefaultHandle();
  v30 = objc_claimAutoreleasedReturnValue(v29);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("SWFR_slowNotice")));
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "subMessageValue"));
    v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "fieldForKey:", CFSTR("WFAAWDSWFN_actionField")));
    v34 = objc_msgSend(v33, "uint32Value");
    *(_DWORD *)buf = 136446722;
    v117 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
    v118 = 1024;
    v119 = 4950;
    v120 = 2048;
    v121 = v34;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:WFAAWDSWFN_actionField: %lx", buf, 0x1Cu);

  }
  v35 = WALogCategoryDefaultHandle();
  v36 = objc_claimAutoreleasedReturnValue(v35);
  if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
  {
    v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("SWFR_slowNotice")));
    v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "subMessageValue"));
    v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "fieldForKey:", CFSTR("WFAAWDSWFN_recoveryAction")));
    v40 = objc_msgSend(v39, "uint32Value");
    *(_DWORD *)buf = 136446722;
    v117 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
    v118 = 1024;
    v119 = 4951;
    v120 = 2048;
    v121 = v40;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:WFAAWDSWFN_recoveryAction: %lx", buf, 0x1Cu);

  }
  v41 = WALogCategoryDefaultHandle();
  v42 = objc_claimAutoreleasedReturnValue(v41);
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
  {
    v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("SWFR_slowNotice")));
    v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "subMessageValue"));
    v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "fieldForKey:", CFSTR("WFAAWDSWFN_recoveryReason")));
    v46 = objc_msgSend(v45, "uint32Value");
    *(_DWORD *)buf = 136446722;
    v117 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
    v118 = 1024;
    v119 = 4952;
    v120 = 2048;
    v121 = v46;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:WFAAWDSWFN_recoveryReason: %lx", buf, 0x1Cu);

  }
  v47 = WALogCategoryDefaultHandle();
  v48 = objc_claimAutoreleasedReturnValue(v47);
  if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
  {
    v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("SWFR_slowNotice")));
    v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "subMessageValue"));
    v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "fieldForKey:", CFSTR("WFAAWDSWFN_userInput")));
    v52 = objc_msgSend(v51, "uint32Value");
    *(_DWORD *)buf = 136446722;
    v117 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
    v118 = 1024;
    v119 = 4953;
    v120 = 2048;
    v121 = v52;
    _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:WFAAWDSWFN_userInput: %lx", buf, 0x1Cu);

  }
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "setMetricID:", 589931);
  v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "submitterMap"));
  v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
  v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 80)));
  v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "objectForKeyedSubscript:", v55));

  if (!v56)
  {
    v57 = WALogCategoryDefaultHandle();
    v58 = objc_claimAutoreleasedReturnValue(v57);
    if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v117 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
      v118 = 1024;
      v119 = 4958;
      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_ERROR, "%{public}s::%d:Caller did not register", buf, 0x12u);
    }

    if (*(_QWORD *)(a1 + 40))
    {
      v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "processTokenToGroupTypeMap"));
      v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
      v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 80)));
      v62 = objc_msgSend(v60, "containsObject:", v61);

      if (v62)
      {
        v105 = WALogCategoryDefaultHandle();
        v71 = objc_claimAutoreleasedReturnValue(v105);
        if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
        {
          v106 = *(_QWORD *)(a1 + 80);
          *(_DWORD *)buf = 136446722;
          v117 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
          v118 = 1024;
          v119 = 4960;
          v120 = 2048;
          v121 = v106;
          _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_ERROR, "%{public}s::%d:XPC: processTokenToGroupTypeMap seems to think this process token has already registered group type: %ld", buf, 0x1Cu);
        }
      }
      else
      {
        objc_msgSend(*(id *)(a1 + 32), "_purgeGroupTypeIfNecessary:", *(_QWORD *)(a1 + 80));
        v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "processTokenToGroupTypeMap"));
        v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));

        if (!v64)
        {
          v65 = objc_alloc_init((Class)NSMutableSet);
          v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "processTokenToGroupTypeMap"));
          objc_msgSend(v66, "setObject:forKeyedSubscript:", v65, *(_QWORD *)(a1 + 40));

        }
        v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "processTokenToGroupTypeMap", v107, (_QWORD)v108));
        v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v67, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
        v69 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 80)));
        objc_msgSend(v68, "addObject:", v69);

        objc_msgSend(*(id *)(a1 + 32), "_initSubmitterAndQueryableRegistrationForProcessToken:andGroupType:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 80));
        objc_msgSend(*(id *)(a1 + 32), "_persist");
        v70 = WALogCategoryDefaultHandle();
        v71 = objc_claimAutoreleasedReturnValue(v70);
        if (os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
        {
          v72 = *(_QWORD *)(a1 + 80);
          v73 = (void *)objc_claimAutoreleasedReturnValue(+[WAUtil trimTokenForLogging:](WAUtil, "trimTokenForLogging:", *(_QWORD *)(a1 + 40)));
          *(_DWORD *)buf = 136446978;
          v117 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
          v118 = 1024;
          v119 = 4971;
          v120 = 2048;
          v121 = v72;
          v122 = 2112;
          v123 = v73;
          _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEBUG, "%{public}s::%d:XPC: registering message group type: %ld for process: %@", buf, 0x26u);

        }
      }
    }
    else
    {
      v100 = WALogCategoryDefaultHandle();
      v101 = objc_claimAutoreleasedReturnValue(v100);
      if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v117 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
        v118 = 1024;
        v119 = 4959;
        _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:couldn't get process name for connection", buf, 0x12u);
      }

      v124 = NSLocalizedFailureReasonErrorKey;
      v125 = CFSTR("WAErrorCodeInternalError");
      v71 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v125, &v124, 1));
      v102 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.wifi.analytics.errordomain"), 9003, v71));
      v103 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
      v104 = *(void **)(v103 + 40);
      *(_QWORD *)(v103 + 40) = v102;

    }
  }
  v74 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_submitMessage:groupType:forProcessToken:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), 4, *(_QWORD *)(a1 + 40), v107));
  v75 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v76 = *(void **)(v75 + 40);
  *(_QWORD *)(v75 + 40) = v74;

  v77 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
  if (v77)
  {
    v78 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    v80 = *(_QWORD *)(v78 + 40);
    v79 = (id *)(v78 + 40);
    if (!v80)
    {
      objc_storeStrong(v79, v77);
      v81 = WALogCategoryDefaultHandle();
      v82 = objc_claimAutoreleasedReturnValue(v81);
      if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
      {
        v83 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
        *(_DWORD *)buf = 136446722;
        v117 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
        v118 = 1024;
        v119 = 4984;
        v120 = 2112;
        v121 = v83;
        _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:retErr will return %@", buf, 0x1Cu);
      }

    }
    v84 = WALogCategoryDefaultHandle();
    v85 = objc_claimAutoreleasedReturnValue(v84);
    if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
    {
      v86 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
      *(_DWORD *)buf = 136446722;
      v117 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
      v118 = 1024;
      v119 = 4987;
      v120 = 2112;
      v121 = v86;
      _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_ERROR, "%{public}s::%d:Not sending incomplete SWF to AWD %@", buf, 0x1Cu);
    }

    v87 = WALogCategoryDefaultHandle();
    v88 = objc_claimAutoreleasedReturnValue(v87);
    if (os_log_type_enabled(v88, OS_LOG_TYPE_FAULT))
    {
      v99 = *(const char **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
      *(_DWORD *)buf = 138412290;
      v117 = v99;
      _os_log_fault_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_FAULT, "Not sending incomplete SWF to AWD %@", buf, 0xCu);
    }

  }
  else
  {
    v89 = WALogCategoryDefaultHandle();
    v90 = objc_claimAutoreleasedReturnValue(v89);
    if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v117 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
      v118 = 1024;
      v119 = 4978;
      _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Sending SWF to transformEngine", buf, 0x12u);
    }

    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "transformAndSubmitSWMessageToCA:additionalInfo:timestamps:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), 0, 0);
  }
  v91 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "fieldForKey:", CFSTR("SWFR_linkQualSamples")));
  v92 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v91, "repeatableValues"));
  objc_msgSend(v92, "removeAllObjects");

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 568), "removeAllObjects");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 496), "removeAllObjects");
  v93 = WALogCategoryDefaultHandle();
  v94 = objc_claimAutoreleasedReturnValue(v93);
  if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    v117 = "-[WAEngine gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:]_block_invoke";
    v118 = 1024;
    v119 = 4997;
    _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:_slowWiFiStudyInProgress False", buf, 0x12u);
  }

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 34) = 0;
  v95 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "slowwifiStudyTransaction"));

  if (v95)
  {
    v96 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](WAActivityManager, "sharedActivityManager"));
    v97 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "slowwifiStudyTransaction"));
    objc_msgSend(v96, "osTransactionComplete:", v97);

    objc_msgSend(*(id *)(a1 + 32), "setSlowwifiStudyTransaction:", 0);
  }
  if (objc_msgSend(*(id *)(a1 + 32), "isMemoryPressureRequestDeferred"))
    objc_msgSend(*(id *)(a1 + 32), "handleMemoryWarning:", 1);
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

void sub_100068EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100068ED0(uint64_t a1)
{
  void *v2;

  v2 = objc_autoreleasePoolPush();
  objc_msgSend(*(id *)(a1 + 32), "triggerPeerDiagnosticsStudy:symptomsDnsStats:", 2, 0);
  objc_autoreleasePoolPop(v2);
}

void sub_100068F08(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  __int128 v6;
  _QWORD v7[4];
  __int128 v8;

  v2 = objc_autoreleasePoolPush();
  v3 = *(void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100068FA8;
  v7[3] = &unk_1000CD800;
  v6 = *(_OWORD *)(a1 + 48);
  v5 = (id)v6;
  v8 = v6;
  objc_msgSend(v3, "gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:", 0, v4, v7);

  objc_autoreleasePoolPop(v2);
}

void sub_100068FA8(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  id v13;

  v5 = a3;
  if (v5)
  {
    v6 = WALogCategoryDefaultHandle();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = 136446722;
      v9 = "-[WAEngine _triggerSlowWiFiStudy:forProcessToken:waMessage:andReply:]_block_invoke_2";
      v10 = 1024;
      v11 = 5079;
      v12 = 2112;
      v13 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%{public}s::%d:gatherConsecutiveLinkQualitySamples replied err %@", (uint8_t *)&v8, 0x1Cu);
    }

    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a3);
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_100069360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100069378(uint64_t a1, void *a2, id obj)
{
  id v6;
  id v7;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), obj);
  v6 = obj;
  v7 = a2;
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_1000693EC(uint64_t a1, void *a2, id obj)
{
  id v6;
  id v7;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), obj);
  v6 = obj;
  v7 = a2;
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_10006963C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100069654(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_100069884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006989C(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

id sub_100069940(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_persist");
}

id sub_10006A580(uint64_t a1)
{
  return +[WAUtil incrementValueForKey:inMutableDict:onQueue:](WAUtil, "incrementValueForKey:inMutableDict:onQueue:", CFSTR("AnalyticsProcessor: Save WA Message Metric"), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 688), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 88));
}

id sub_10006A658(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "processMetricDictOnEngine:data:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_10006A978(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  id v5;
  NSObject *v6;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;

  v2 = objc_autoreleasePoolPush();
  v3 = WALogCategoryDefaultHandle();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 136446466;
    v8 = "-[WAEngine _summarizeDeviceAnalyticsForNetwork:maxAgeInDays:]_block_invoke";
    v9 = 1024;
    v10 = 5327;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Forcing flush of JSON files in Tmp Dir....", (uint8_t *)&v7, 0x12u);
  }

  objc_msgSend(*(id *)(a1 + 32), "processWiFiAnalyticsMessageJSONFilesInTmpDir:", 1);
  v5 = WALogCategoryDefaultHandle();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 136446466;
    v8 = "-[WAEngine _summarizeDeviceAnalyticsForNetwork:maxAgeInDays:]_block_invoke";
    v9 = 1024;
    v10 = 5329;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Forcing flush of JSON files in Tmp Dir complete", (uint8_t *)&v7, 0x12u);
  }

  objc_autoreleasePoolPop(v2);
}

id sub_10006C0E8(uint64_t a1)
{
  return +[WAUtil incrementValueForKey:inMutableDict:onQueue:](WAUtil, "incrementValueForKey:inMutableDict:onQueue:", CFSTR("AnalyticsProcessor: Age Out Analytics"), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 688), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 88));
}

id sub_10006C10C(uint64_t a1)
{
  return +[WAUtil incrementValueForKey:inMutableDict:onQueue:](WAUtil, "incrementValueForKey:inMutableDict:onQueue:", CFSTR("AnalyticsProcessor: Process WA Message Metric"), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 688), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 88));
}

id sub_10006C130(uint64_t a1)
{
  return +[WAUtil incrementValueForKey:inMutableDict:onQueue:](WAUtil, "incrementValueForKey:inMutableDict:onQueue:", CFSTR("AnalyticsProcessor: Prune"), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 688), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 88));
}

void sub_10006C3FC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  NSObject *v6;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "datapathMetricStream"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "getPBCodableNSDataFromNSKeyedArchive:", *(_QWORD *)(a1 + 40)));

  if (v3)
  {
    +[WAUtil incrementValueForKey:inMutableDict:onQueue:](WAUtil, "incrementValueForKey:inMutableDict:onQueue:", CFSTR("AnalyticsProcessor: Datapath Metrics Stream"), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 688), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 88));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "analyticsProcessor"));
    objc_msgSend(v4, "processDatapathMetricStream:withDate:", v3, *(_QWORD *)(a1 + 48));

  }
  else
  {
    v5 = WALogCategoryDefaultHandle();
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = 136446466;
      v8 = "-[WAEngine processWiFiAnalyticsMessageWAMFile:file:]_block_invoke";
      v9 = 1024;
      v10 = 5572;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%{public}s::%d:Failed to getPBCodableNSDataFromNSKeyedArchive", (uint8_t *)&v7, 0x12u);
    }

  }
}

void sub_10006C9C8(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = objc_autoreleasePoolPush();
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "__dnsSetupConfig"));
  if (v3)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;

  objc_autoreleasePoolPop(v2);
}

void sub_10006D378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

void sub_10006D3AC(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v2 = objc_autoreleasePoolPush();
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "__dnsStateConfig"));
    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", kSCPropNetDNSServerAddresses));
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v6 = *(void **)(v5 + 40);
    *(_QWORD *)(v5 + 40) = v4;

    if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "__ipv4SetupConfig"));
      v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", kSCPropNetDNSServerAddresses));
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v10 = *(void **)(v9 + 40);
      *(_QWORD *)(v9 + 40) = v8;

    }
  }
  objc_autoreleasePoolPop(v2);
}

void sub_10006DD44(id a1, NSError *a2, NSArray *a3)
{
  NSError *v4;
  NSArray *v5;
  id v6;
  NSObject *v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  NSArray *v13;
  __int16 v14;
  NSError *v15;

  v4 = a2;
  v5 = a3;
  v6 = WALogCategoryDefaultHandle();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 136446978;
    v9 = "-[WAEngine triggerPeerDiscovery]_block_invoke";
    v10 = 1024;
    v11 = 6012;
    v12 = 2112;
    v13 = v5;
    v14 = 2112;
    v15 = v4;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:PeerDiscovery: Initiate Study.. result:%@ error:%@", (uint8_t *)&v8, 0x26u);
  }

}

void sub_10006E4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10006E540(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;

  v6 = a2;
  v7 = a3;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a3);
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a2);
  v8 = WALogCategoryDefaultHandle();
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
    v12 = 136446978;
    v13 = "-[WAEngine gatherDiscoveredPeerInfo:]_block_invoke";
    v14 = 1024;
    v15 = 6042;
    v16 = 2112;
    v17 = v10;
    v18 = 2112;
    v19 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:PeerDiscovery: result:%@ error:%@", (uint8_t *)&v12, 0x26u);
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10006E89C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10006E8D0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  _QWORD *WeakRetained;
  NSObject *v6;
  _QWORD *v7;
  id v8;
  _QWORD block[4];
  id v10;
  id v11;

  v4 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v6 = WeakRetained[61];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10006E974;
  block[3] = &unk_1000CD178;
  v10 = v4;
  v11 = WeakRetained;
  v7 = WeakRetained;
  v8 = v4;
  dispatch_sync(v6, block);

}

void sub_10006E974(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  uint64_t v29;
  _BYTE v30[128];

  v2 = objc_autoreleasePoolPush();
  v3 = v2;
  v4 = *(void **)(a1 + 32);
  if (v4)
  {
    v19 = v2;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v5 = v4;
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v20, v30, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v21;
      do
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(_QWORD *)v21 != v8)
            objc_enumerationMutation(v5);
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)i), "info"));
          v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("DNSResolution")));
          v12 = *(_QWORD *)(a1 + 40);
          v13 = *(void **)(v12 + 472);
          *(_QWORD *)(v12 + 472) = v11;

          v14 = WALogCategoryDefaultHandle();
          v15 = objc_claimAutoreleasedReturnValue(v14);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            v16 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 472);
            *(_DWORD *)buf = 136446722;
            v25 = "-[WAEngine resolveAppleCaptiveServer]_block_invoke_2";
            v26 = 1024;
            v27 = 6098;
            v28 = 2112;
            v29 = v16;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:DNSResolution: result : %@", buf, 0x1Cu);
          }

        }
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v20, v30, 16);
      }
      while (v7);
    }

    v3 = v19;
  }
  v17 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(v17 + 440) || *(_QWORD *)(v17 + 448) || *(_QWORD *)(v17 + 464) || *(_QWORD *)(v17 + 456))
  {
    v18 = *(_QWORD *)(v17 + 472);
    objc_msgSend(*(id *)(v17 + 456), "setObject:forKeyedSubscript:", v18, CFSTR("IPAddress"));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 464), "setObject:forKeyedSubscript:", v18, CFSTR("IPAddress"));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 448), "setObject:forKeyedSubscript:", v18, CFSTR("IPAddress"));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 440), "setObject:forKeyedSubscript:", v18, CFSTR("IPAddress"));
  }
  else
  {
    objc_msgSend((id)v17, "initializeProbeCxt");
  }
  objc_autoreleasePoolPop(v3);
}

void sub_10006F568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,id location)
{
  id *v42;
  uint64_t v43;

  objc_destroyWeak(v42);
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose(&a36, 8);
  _Block_object_dispose((const void *)(v43 - 176), 8);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10006F5D8(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  v2 = objc_autoreleasePoolPush();
  v3 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithDictionary:](NSDictionary, "dictionaryWithDictionary:", *(_QWORD *)(a1[4] + 440)));
  v4 = *(_QWORD *)(a1[5] + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  v6 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithDictionary:](NSDictionary, "dictionaryWithDictionary:", *(_QWORD *)(a1[4] + 448)));
  v7 = *(_QWORD *)(a1[6] + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

  v9 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithDictionary:](NSDictionary, "dictionaryWithDictionary:", *(_QWORD *)(a1[4] + 456)));
  v10 = *(_QWORD *)(a1[7] + 8);
  v11 = *(void **)(v10 + 40);
  *(_QWORD *)(v10 + 40) = v9;

  v12 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithDictionary:](NSDictionary, "dictionaryWithDictionary:", *(_QWORD *)(a1[4] + 464)));
  v13 = *(_QWORD *)(a1[8] + 8);
  v14 = *(void **)(v13 + 40);
  *(_QWORD *)(v13 + 40) = v12;

  objc_autoreleasePoolPop(v2);
}

void sub_10006F6AC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD *WeakRetained;
  NSObject *v8;
  _QWORD *v9;
  id v10;
  id v11;
  _QWORD block[4];
  id v13;
  id v14;
  id v15;
  int v16;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v8 = WeakRetained[61];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10006F77C;
  block[3] = &unk_1000CD930;
  v16 = *(_DWORD *)(a1 + 40);
  v13 = v5;
  v14 = v6;
  v15 = WeakRetained;
  v9 = WeakRetained;
  v10 = v6;
  v11 = v5;
  dispatch_sync(v8, block);

}

void sub_10006F77C(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  unsigned int v15;
  double v16;
  double v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  void *i;
  void *v29;
  unsigned int v30;
  double v31;
  double v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  id v36;
  uint64_t v37;
  id v38;
  NSObject *v39;
  int v40;
  id v41;
  NSObject *v42;
  int v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  id obj;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _BYTE v58[128];
  uint8_t v59[128];
  uint8_t buf[4];
  const char *v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;
  __int16 v66;
  _BYTE v67[10];
  uint64_t v68;

  v2 = objc_autoreleasePoolPush();
  v3 = WALogCategoryDefaultHandle();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(a1 + 56);
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 136447234;
    v61 = "-[WAEngine triggerDiagnosticPingWithrequestId:]_block_invoke_2";
    v62 = 1024;
    v63 = 6200;
    v64 = 1024;
    v65 = v5;
    v66 = 2112;
    *(_QWORD *)v67 = v6;
    *(_WORD *)&v67[8] = 2112;
    v68 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Ping: instanceId:%u error:%@ ProbeResults:: %@", buf, 0x2Cu);
  }

  if (!*(_QWORD *)(a1 + 32))
  {
    v8 = *(void **)(a1 + 40);
    if (!v8)
      goto LABEL_38;
    v44 = v2;
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v9 = v8;
    v48 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v54, v59, 16);
    if (!v48)
      goto LABEL_37;
    v47 = *(_QWORD *)v55;
    v45 = v9;
LABEL_8:
    v10 = 0;
    while (1)
    {
      if (*(_QWORD *)v55 != v47)
        objc_enumerationMutation(v9);
      v11 = *(void **)(*((_QWORD *)&v54 + 1) + 8 * v10);
      if (objc_msgSend(v11, "testID") == (id)3)
        break;
      if (objc_msgSend(v11, "testID") == (id)6)
      {
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "info"));
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "objectForKeyedSubscript:", CFSTR("PingResults")));

        obj = v24;
        v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v50, v58, 16);
        if (v25)
        {
          v26 = v25;
          v46 = v10;
          v27 = *(_QWORD *)v51;
          do
          {
            for (i = 0; i != v26; i = (char *)i + 1)
            {
              if (*(_QWORD *)v51 != v27)
                objc_enumerationMutation(obj);
              v29 = *(void **)(*((_QWORD *)&v50 + 1) + 8 * (_QWORD)i);
              v30 = objc_msgSend(v29, "count");
              v31 = (double)(uint64_t)objc_msgSend(v29, "count");
              objc_msgSend(v29, "packetLoss");
              v33 = (v31 + v32 / -100.0 * (double)(uint64_t)objc_msgSend(v29, "count"));
              v34 = *(unsigned int *)(a1 + 56);
              v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 176), "preferences"));
              v36 = objc_msgSend(v35, "dns_symptoms_trap_evaluated_at_sample");

              v37 = *(_QWORD *)(a1 + 48);
              if ((unint64_t)v36 <= v34)
              {
                *(_QWORD *)(v37 + 304) += v33;
              }
              else
              {
                *(_QWORD *)(v37 + 272) += v33;
                if ((_DWORD)v33)
                  *(_BYTE *)(*(_QWORD *)(a1 + 48) + 46) = 1;
              }
              v38 = WALogCategoryDefaultHandle();
              v39 = objc_claimAutoreleasedReturnValue(v38);
              if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
              {
                v40 = *(_DWORD *)(a1 + 56);
                *(_DWORD *)buf = 136447234;
                v61 = "-[WAEngine triggerDiagnosticPingWithrequestId:]_block_invoke";
                v62 = 1024;
                v63 = 6230;
                v64 = 1024;
                v65 = v40;
                v66 = 1024;
                *(_DWORD *)v67 = v30;
                *(_WORD *)&v67[4] = 1024;
                *(_DWORD *)&v67[6] = v33;
                _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:WANPingResults: instanceId:%u pingCount:%u successCount:%u", buf, 0x24u);
              }

            }
            v26 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v50, v58, 16);
          }
          while (v26);
          v9 = v45;
          v10 = v46;
        }
        goto LABEL_34;
      }
LABEL_35:
      if ((id)++v10 == v48)
      {
        v48 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v54, v59, 16);
        if (!v48)
        {
LABEL_37:

          v2 = v44;
          goto LABEL_38;
        }
        goto LABEL_8;
      }
    }
    v12 = v10;
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "info"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("PingResult")));

    v15 = objc_msgSend(v14, "count");
    v16 = (double)(uint64_t)objc_msgSend(v14, "count");
    objc_msgSend(v14, "packetLoss");
    obj = v14;
    v18 = (v16 + v17 / -100.0 * (double)(uint64_t)objc_msgSend(v14, "count"));
    v19 = *(unsigned int *)(a1 + 56);
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 176), "preferences"));
    v21 = objc_msgSend(v20, "dns_symptoms_trap_evaluated_at_sample");

    v22 = *(_QWORD *)(a1 + 48);
    if ((unint64_t)v21 <= v19)
    {
      *(_QWORD *)(v22 + 288) += v18;
    }
    else
    {
      *(_QWORD *)(v22 + 256) += v18;
      if ((_DWORD)v18)
        *(_BYTE *)(*(_QWORD *)(a1 + 48) + 46) = 1;
    }
    v41 = WALogCategoryDefaultHandle();
    v42 = objc_claimAutoreleasedReturnValue(v41);
    v10 = v12;
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      v43 = *(_DWORD *)(a1 + 56);
      *(_DWORD *)buf = 136447234;
      v61 = "-[WAEngine triggerDiagnosticPingWithrequestId:]_block_invoke";
      v62 = 1024;
      v63 = 6217;
      v64 = 1024;
      v65 = v43;
      v66 = 1024;
      *(_DWORD *)v67 = v15;
      *(_WORD *)&v67[4] = 1024;
      *(_DWORD *)&v67[6] = v18;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:LANPingResults: instanceId:%u pingCount:%u successCount:%u", buf, 0x24u);
    }

LABEL_34:
    goto LABEL_35;
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 48) + 40) = 1;
LABEL_38:
  objc_autoreleasePoolPop(v2);
}

void sub_10006FECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10006FEF0(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *WeakRetained;
  NSObject *v7;
  int v8;
  _QWORD *v9;
  _QWORD block[4];
  id v11;
  uint64_t v12;
  int v13;
  int v14;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v7 = WeakRetained[61];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10006FF88;
  block[3] = &unk_1000CD980;
  v11 = WeakRetained;
  v12 = a3;
  v8 = *(_DWORD *)(a1 + 40);
  v13 = a2;
  v14 = v8;
  v9 = WeakRetained;
  dispatch_sync(v7, block);

}

void sub_10006FF88(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  int v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  const char *v17;
  NSObject *v18;
  os_log_type_t v19;
  uint32_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  int v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  int v31;
  const char *v32;
  int v33;
  const char *v34;
  int v35;
  const char *v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  const char *v44;
  char v45;
  char v46;
  const char *v47;
  __int16 v48;
  const char *v49;

  v2 = objc_autoreleasePoolPush();
  if (!*(_DWORD *)(a1 + 48))
  {
    v8 = *(_QWORD *)(a1 + 40);
    if (v8)
    {
      v7 = *(id *)(v8 + 48);
      if (v7)
      {
        v9 = objc_msgSend(*(id *)(a1 + 32), "isScoreBelowThreshold:type:instanceId:", v7, 0, *(unsigned int *)(a1 + 52));
        v10 = objc_msgSend(*(id *)(a1 + 32), "isScoreBelowThreshold:type:instanceId:", v7, 1, *(unsigned int *)(a1 + 52));
        v11 = *(unsigned int *)(a1 + 52);
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 176), "preferences"));
        v13 = objc_msgSend(v12, "dns_symptoms_trap_evaluated_at_sample");

        v14 = *(_QWORD *)(a1 + 32);
        if ((unint64_t)v13 <= v11)
        {
          if (v9)
          {
            if (!*(_BYTE *)(v14 + 45))
            {
              v21 = *(unsigned int *)(a1 + 52);
              v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v14 + 176), "preferences"));
              *(_QWORD *)(*(_QWORD *)(a1 + 32) + 320) = v21
                                                        - (_QWORD)objc_msgSend(v22, "dns_symptoms_trap_evaluated_at_sample")+ 1;

            }
          }
          else
          {
            if (!*(_BYTE *)(v14 + 45))
            {
              v24 = *(unsigned int *)(a1 + 52);
              v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v14 + 176), "preferences"));
              *(_QWORD *)(*(_QWORD *)(a1 + 32) + 320) = v24
                                                        - (_QWORD)objc_msgSend(v25, "dns_symptoms_trap_evaluated_at_sample");

              v14 = *(_QWORD *)(a1 + 32);
            }
            *(_BYTE *)(v14 + 45) = 1;
          }
          v23 = 336;
        }
        else
        {
          if (v9)
          {
            if (*(_BYTE *)(v14 + 44))
              ++*(_QWORD *)(v14 + 312);
          }
          else
          {
            *(_BYTE *)(v14 + 44) = 0;
          }
          v23 = 328;
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + v23) += v10;
        v26 = WALogCategoryDefaultHandle();
        v16 = objc_claimAutoreleasedReturnValue(v26);
        if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          goto LABEL_38;
        v27 = *(_DWORD *)(a1 + 52);
        v28 = "NO";
        v29 = *(_QWORD *)(a1 + 32);
        v36 = "-[WAEngine fetchSymptomsScores:]_block_invoke_2";
        if (v9)
          v30 = "YES";
        else
          v30 = "NO";
        v31 = *(unsigned __int8 *)(v29 + 44);
        if (v10)
          v32 = "YES";
        else
          v32 = "NO";
        v33 = *(unsigned __int8 *)(v29 + 45);
        if (v31)
          v34 = "YES";
        else
          v34 = "NO";
        v35 = 136447746;
        v37 = 1024;
        if (v33)
          v28 = "YES";
        v38 = 6285;
        v39 = 1024;
        v40 = v27;
        v41 = 2080;
        v42 = v30;
        v43 = 2080;
        v44 = v32;
        v45 = 32;
        v46 = 8;
        v47 = v34;
        v48 = 2080;
        v49 = v28;
        v17 = "%{public}s::%d:Netscore: instanceId:%u isNetScoreBelowThreshold:%s isDataStallScoreBelowThreshold:%s _isPo"
              "orSymptomsDnsConditions:%s _didSymptomsConditionRecoverAfterDecision:%s";
        v18 = v16;
        v19 = OS_LOG_TYPE_DEFAULT;
        v20 = 64;
      }
      else
      {
        v15 = WALogCategoryDefaultHandle();
        v16 = objc_claimAutoreleasedReturnValue(v15);
        if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
LABEL_38:

LABEL_39:
          goto LABEL_40;
        }
        v35 = 136446466;
        v36 = "-[WAEngine fetchSymptomsScores:]_block_invoke";
        v37 = 1024;
        v38 = 6287;
        v17 = "%{public}s::%d:empty eventInfo";
        v18 = v16;
        v19 = OS_LOG_TYPE_ERROR;
        v20 = 18;
      }
      _os_log_impl((void *)&_mh_execute_header, v18, v19, v17, (uint8_t *)&v35, v20);
      goto LABEL_38;
    }
  }
  v3 = WALogCategoryDefaultHandle();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v5 = *(_DWORD *)(a1 + 48);
    v35 = 136446722;
    v36 = "-[WAEngine fetchSymptomsScores:]_block_invoke";
    v37 = 1024;
    v38 = 6290;
    v39 = 1024;
    v40 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%{public}s::%d:Error:%d from Managed Event Fetch", (uint8_t *)&v35, 0x18u);
  }

  if (!*(_QWORD *)(a1 + 40))
  {
    v6 = WALogCategoryDefaultHandle();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v35 = 136446466;
      v36 = "-[WAEngine fetchSymptomsScores:]_block_invoke";
      v37 = 1024;
      v38 = 6292;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%{public}s::%d:Fetched managed event is null", (uint8_t *)&v35, 0x12u);
    }
    goto LABEL_39;
  }
LABEL_40:
  objc_autoreleasePoolPop(v2);
}

void sub_10007173C(uint64_t a1)
{
  sub_1000717A8();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("W5Client");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1000ED098 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    abort_report_np("Unable to find class %s", "W5Client");
    sub_1000717A8();
  }
}

void sub_1000717A8()
{
  char *v0;
  char *v1;
  __int128 v2;
  uint64_t v3;

  v1 = 0;
  if (!qword_1000ED0A0)
  {
    v2 = off_1000CD9F0;
    v3 = 0;
    qword_1000ED0A0 = _sl_dlopen(&v2, &v1);
    v0 = v1;
    if (qword_1000ED0A0)
    {
      if (!v1)
        return;
    }
    else
    {
      v0 = (char *)abort_report_np("%s", v1);
    }
    free(v0);
  }
}

CADataTransformEngine *sub_100071864(uint64_t a1)
{
  CADataTransformEngine *result;
  CADataTransformEngine *v3;
  SEL v4;

  sub_1000717A8();
  result = (CADataTransformEngine *)objc_getClass("W5DiagnosticsTestRequest");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1000ED0A8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = (CADataTransformEngine *)abort_report_np("Unable to find class %s", "W5DiagnosticsTestRequest");
    return -[CADataTransformEngine init](v3, v4);
  }
  return result;
}

id sub_100072540(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  unint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  char v9;
  int v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void *i;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  void *v31;
  id v32;
  NSObject *v33;
  void *v34;
  id v35;
  void *v36;
  id v37;
  NSObject *v38;
  id v39;
  NSObject *v40;
  int v41;
  id v42;
  NSObject *v43;
  NSObject *v44;
  id v45;
  id v46;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  id v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  void *v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  void *v149;
  void *v150;
  void *v151;
  void *v152;
  void *v153;
  void *v154;
  void *v155;
  void *v156;
  void *v157;
  void *v158;
  void *v159;
  void *v160;
  void *v161;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  void *v167;
  void *v168;
  void *v169;
  void *v170;
  void *v171;
  void *v172;
  void *v173;
  void *v174;
  void *v175;
  unint64_t v176;
  void *v177;
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  unint64_t v182;
  void *v183;
  void *v184;
  void *v185;
  void *v186;
  void *v187;
  void *v188;
  void *v189;
  id v190;
  void *v191;
  void *v192;
  void *v193;
  id v194;
  int v195;
  int v196;
  uint64_t v197;
  void *j;
  void *v199;
  void *v200;
  void *v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  void *v205;
  void *v206;
  dispatch_time_t v207;
  dispatch_semaphore_t dsema;
  void *v209;
  void *v210;
  dispatch_semaphore_t v211;
  uint64_t v212;
  void *v213;
  _QWORD v214[5];
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  _QWORD v223[4];
  dispatch_semaphore_t v224;
  uint64_t *v225;
  uint64_t *v226;
  uint64_t v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t (*v230)(uint64_t, uint64_t);
  void (*v231)(uint64_t);
  id v232;
  uint64_t v233;
  uint64_t *v234;
  uint64_t v235;
  char v236;
  uint8_t buf[4];
  const char *v238;
  __int16 v239;
  int v240;
  __int16 v241;
  id v242;
  _BYTE v243[128];
  _BYTE v244[128];

  v233 = 0;
  v234 = &v233;
  v235 = 0x2020000000;
  v236 = 1;
  v211 = dispatch_semaphore_create(0);
  v227 = 0;
  v228 = &v227;
  v229 = 0x3032000000;
  v230 = sub_100074020;
  v231 = sub_100074030;
  v232 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", *(_QWORD *)(a1 + 32)));
  v212 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "instantiateAWDProtobufAndPopulateValues:", *(_QWORD *)(a1 + 48)));
  v213 = v2;
  if (!v2)
  {
    v32 = WALogCategoryDefaultHandle();
    v33 = objc_claimAutoreleasedReturnValue(v32);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v238 = "-[CADataTransformEngine transformAndSubmitDPSMessageToCA:additionalInfo:timestamps:]_block_invoke";
      v239 = 1024;
      v240 = 284;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "%{public}s::%d:Error creating DPS data to send to CA", buf, 0x12u);
    }

    v34 = 0;
    v35 = 0;
    v36 = 0;
    v209 = 0;
    v210 = 0;
    goto LABEL_34;
  }
  v3 = v2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stallNotifications"));
  if (!objc_msgSend(v4, "count"))
  {

    goto LABEL_21;
  }
  v5 = (unint64_t)objc_msgSend(v3, "dpsCounterSamplesCount");
  LOBYTE(v5) = v5 < (unint64_t)objc_msgSend(*(id *)(*(_QWORD *)(v212 + 40) + 16), "dps_interrogation_sample_count");

  if ((v5 & 1) != 0)
  {
LABEL_21:
    v37 = WALogCategoryDefaultHandle();
    v38 = objc_claimAutoreleasedReturnValue(v37);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v238 = "-[CADataTransformEngine transformAndSubmitDPSMessageToCA:additionalInfo:timestamps:]_block_invoke";
      v239 = 1024;
      v240 = 290;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "%{public}s::%d:Invalid DPS data", buf, 0x12u);
    }

    *((_BYTE *)v234 + 24) = 0;
    goto LABEL_24;
  }
  if (*((_BYTE *)v234 + 24))
  {
    v6 = *(void **)(v212 + 40);
    v7 = *(_QWORD *)(v212 + 56);
    v223[0] = _NSConcreteStackBlock;
    v223[1] = 3221225472;
    v223[2] = sub_100074038;
    v223[3] = &unk_1000CDA10;
    v225 = &v227;
    v226 = &v233;
    dsema = v211;
    v224 = dsema;
    objc_msgSend(v6, "computeDPSRecoveryIndex:timestamps:andReply:", v3, v7, v223);

    if (*((_BYTE *)v234 + 24))
    {
      v221 = 0u;
      v222 = 0u;
      v219 = 0u;
      v220 = 0u;
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stallNotifications"));
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v219, v244, 16);
      if (v12)
      {
        v13 = *(_QWORD *)v220;
        do
        {
          for (i = 0; i != v12; i = (char *)i + 1)
          {
            if (*(_QWORD *)v220 != v13)
              objc_enumerationMutation(v8);
            v15 = *(void **)(*((_QWORD *)&v219 + 1) + 8 * (_QWORD)i);
            if (!objc_msgSend(v15, "symptom"))
            {
              v11 = objc_msgSend(v15, "problemAC") | v11;
              v10 |= objc_msgSend(v15, "facetimeCallInProgress");
            }
            v9 |= objc_msgSend(v15, "symptom") == 2;
          }
          v12 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v219, v244, 16);
        }
        while (v12);
      }

      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v11));
      objc_msgSend((id)v228[5], "setObject:forKeyedSubscript:", v16, CFSTR("problematicACs"));

      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v10 & 1));
      objc_msgSend((id)v228[5], "setObject:forKeyedSubscript:", v17, CFSTR("isCriticalAppRunning"));

      v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v9 & 1));
      objc_msgSend((id)v228[5], "setObject:forKeyedSubscript:", v18, CFSTR("didUserToggleWiFiOff"));

      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dpsEpiloge"));
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "qDpsStats"));
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v20, "isDpsValidationDisabled")));
      objc_msgSend((id)v228[5], "setObject:forKeyedSubscript:", v21, CFSTR("isDpsValidationDisabled"));

      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dpsEpiloge"));
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "qDpsStats"));
      v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v23, "quickDpsTimeSincePreviousTriggerMinutes")));
      objc_msgSend((id)v228[5], "setObject:forKeyedSubscript:", v24, CFSTR("timeSincePreviousStudy"));

      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dpsEpiloge"));
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "qDpsStats"));
      v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v26, "quickDpsResetRecommendation")));
      objc_msgSend((id)v228[5], "setObject:forKeyedSubscript:", v27, CFSTR("qDpsStudyRecommendation"));

      v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dpsEpiloge"));
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "qDpsStats"));
      v30 = objc_msgSend(v29, "suppressedReason");
      if (v30 >= 0xB)
        v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), v30));
      else
        v31 = *(&off_1000CDAA8 + (int)v30);
      objc_msgSend((id)v228[5], "setObject:forKeyedSubscript:", v31, CFSTR("qDpsSuppressionReason"));

      v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dpsEpiloge"));
      v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "qDpsStats"));
      v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v49, "screenStateOn")));
      objc_msgSend((id)v228[5], "setObject:forKeyedSubscript:", v50, CFSTR("qDpsScreenStateOnAtDecision"));

      v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dpsEpiloge"));
      v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "qDpsStats"));
      v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v52, "screenStateOn")));
      objc_msgSend((id)v228[5], "setObject:forKeyedSubscript:", v53, CFSTR("MLDecisionPath"));

      v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dpsEpiloge"));
      v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v54, "isAssociatedAtStudyEnd")));
      objc_msgSend((id)v228[5], "setObject:forKeyedSubscript:", v55, CFSTR("isAssociatedAtStudyEnd"));

      v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dpsCounterSampleAtIndex:", 1));
      v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v56, "controllerStats"));
      v210 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), objc_msgSend(v57, "channel")));

      v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dpsCounterSampleAtIndex:", 1));
      v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "controllerStats"));
      v209 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), objc_msgSend(v59, "channelBandwidth")));

      objc_msgSend((id)v228[5], "setObject:forKeyedSubscript:", v210, CFSTR("channel"));
      objc_msgSend((id)v228[5], "setObject:forKeyedSubscript:", v209, CFSTR("channelBandwidth"));
      if (objc_msgSend(v3, "usbEventsCount"))
      {
        v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "usbEventAtIndex:", (char *)objc_msgSend(v3, "usbEventsCount") - 1));
        v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v60, "usbAction")));
        objc_msgSend((id)v228[5], "setObject:forKeyedSubscript:", v61, CFSTR("usbAction"));

        v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "usbEventAtIndex:", (char *)objc_msgSend(v3, "usbEventsCount") - 1));
        v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v62, "usbTotal")));
        objc_msgSend((id)v228[5], "setObject:forKeyedSubscript:", v63, CFSTR("usbTotal"));

        v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "usbEventAtIndex:", (char *)objc_msgSend(v3, "usbEventsCount") - 1));
        v65 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v64, "durationSinceUSBEventInSeconds")));
        objc_msgSend((id)v228[5], "setObject:forKeyedSubscript:", v65, CFSTR("timeSinceUSBEvent"));

        v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "usbEventAtIndex:", (char *)objc_msgSend(v3, "usbEventsCount") - 1));
        v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v66, "smartCCADesenseSupported")));
        objc_msgSend((id)v228[5], "setObject:forKeyedSubscript:", v67, CFSTR("isSmartCCADesenseSupported"));

        v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "usbEventAtIndex:", (char *)objc_msgSend(v3, "usbEventsCount") - 1));
        v69 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v68, "isVendorApple")));
        objc_msgSend((id)v228[5], "setObject:forKeyedSubscript:", v69, CFSTR("isUSBDeviceVendorApple"));

      }
      v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dpsEpiloge"));
      v71 = objc_msgSend(v70, "accessPointInfosCount");

      if (v71)
      {
        v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dpsEpiloge"));
        v73 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v72, "accessPointInfoAtIndex:", 0));
        v74 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v73, "modelName"));
        objc_msgSend((id)v228[5], "setObject:forKeyedSubscript:", v74, CFSTR("APModelName"));

        v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dpsEpiloge"));
        v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v75, "accessPointInfoAtIndex:", 0));
        v77 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v76, "modelNumber"));
        objc_msgSend((id)v228[5], "setObject:forKeyedSubscript:", v77, CFSTR("APModelNumber"));

        v78 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dpsEpiloge"));
        v79 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v78, "accessPointInfoAtIndex:", 0));
        v80 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v79, "manufacturerElement"));
        objc_msgSend((id)v228[5], "setObject:forKeyedSubscript:", v80, CFSTR("APManufacturerElement"));

        v81 = &__kCFBooleanTrue;
      }
      else
      {
        v81 = &__kCFBooleanFalse;
      }
      objc_msgSend((id)v228[5], "setObject:forKeyedSubscript:", v81, CFSTR("IsAPInfoPresent"));
      v82 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "snapshot"));
      v83 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v82, "btSnapshot"));
      v84 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v83, "use")));
      objc_msgSend((id)v228[5], "setObject:forKeyedSubscript:", v84, CFSTR("btUse"));

      v85 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "snapshot"));
      v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v85, "awdlSnapshot"));
      v87 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v86, "use")));
      objc_msgSend((id)v228[5], "setObject:forKeyedSubscript:", v87, CFSTR("awdlUse"));

      v88 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "snapshot"));
      v89 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "awdlSnapshot"));
      v90 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v89, "sdb")));
      objc_msgSend((id)v228[5], "setObject:forKeyedSubscript:", v90, CFSTR("awdlSdb"));

      v91 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dpsCounterSampleAtIndex:", 1));
      v92 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v91, "peerStats"));
      v93 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v92, "ccaValue")));
      objc_msgSend((id)v228[5], "setObject:forKeyedSubscript:", v93, CFSTR("ccaValue"));

      v94 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dpsCounterSampleAtIndex:", 1));
      v95 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v94, "peerStats"));
      v96 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(v95, "rssiValue")));
      objc_msgSend((id)v228[5], "setObject:forKeyedSubscript:", v96, CFSTR("rssiValue"));

      v97 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dpsCounterSampleAtIndex:", 1));
      v98 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v97, "peerStats"));
      v99 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(v98, "snrValue")));
      objc_msgSend((id)v228[5], "setObject:forKeyedSubscript:", v99, CFSTR("snrValue"));

      v100 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dpsEpiloge"));
      v101 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v100, "qDpsStats"));
      v102 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v101, "quickDpsTimeSincePreviousTriggerMinutes")));
      objc_msgSend((id)v228[5], "setObject:forKeyedSubscript:", v102, CFSTR("timeSincePreviousStudy"));

      v103 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dpsCounterSampleAtIndex:", 1));
      v104 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v103, "peerStats"));
      v105 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v104, "completions"));
      LODWORD(v102) = objc_msgSend(v105, "nobuf");
      v106 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dpsCounterSampleAtIndex:", 0));
      v107 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v106, "peerStats"));
      v108 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v107, "completions"));
      v109 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v102 - objc_msgSend(v108, "nobuf")));
      objc_msgSend((id)v228[5], "setObject:forKeyedSubscript:", v109, CFSTR("nobufStatusCountComputedAtDecision"));

      v110 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dpsCounterSampleAtIndex:", 1));
      v111 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v110, "peerStats"));
      v112 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v111, "completions"));
      LODWORD(v109) = objc_msgSend(v112, "chipmodeerror");
      v113 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dpsCounterSampleAtIndex:", 0));
      v114 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v113, "peerStats"));
      v115 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v114, "completions"));
      v116 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v109 - objc_msgSend(v115, "chipmodeerror")));
      objc_msgSend((id)v228[5], "setObject:forKeyedSubscript:", v116, CFSTR("chipmodeerrorStatusCountComputedAtDecision"));

      v117 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dpsCounterSampleAtIndex:", 1));
      v118 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v117, "peerStats"));
      v119 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v118, "completions"));
      LODWORD(v116) = objc_msgSend(v119, "expired");
      v120 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dpsCounterSampleAtIndex:", 0));
      v121 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v120, "peerStats"));
      v122 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v121, "completions"));
      v123 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v116 - objc_msgSend(v122, "expired")));
      objc_msgSend((id)v228[5], "setObject:forKeyedSubscript:", v123, CFSTR("expiredStatusCountComputedAtDecision"));

      v124 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dpsCounterSampleAtIndex:", 1));
      v125 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v124, "peerStats"));
      v126 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v125, "completions"));
      LODWORD(v123) = objc_msgSend(v126, "mbfree");
      v127 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dpsCounterSampleAtIndex:", 0));
      v128 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v127, "peerStats"));
      v129 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v128, "completions"));
      v130 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v123 - objc_msgSend(v129, "mbfree")));
      objc_msgSend((id)v228[5], "setObject:forKeyedSubscript:", v130, CFSTR("mbfreeStatusCountComputedAtDecision"));

      v131 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dpsCounterSampleAtIndex:", 1));
      v132 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v131, "peerStats"));
      v133 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v132, "completions"));
      LODWORD(v130) = objc_msgSend(v133, "noremotepeer");
      v134 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dpsCounterSampleAtIndex:", 0));
      v135 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v134, "peerStats"));
      v136 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v135, "completions"));
      v137 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v130 - objc_msgSend(v136, "noremotepeer")));
      objc_msgSend((id)v228[5], "setObject:forKeyedSubscript:", v137, CFSTR("noremotepeerStatusCountComputedAtDecision"));

      v138 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dpsCounterSampleAtIndex:", 1));
      v139 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v138, "peerStats"));
      v140 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v139, "completions"));
      LODWORD(v137) = objc_msgSend(v140, "noack");
      v141 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dpsCounterSampleAtIndex:", 0));
      v142 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v141, "peerStats"));
      v143 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v142, "completions"));
      v144 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v137 - objc_msgSend(v143, "noack")));
      objc_msgSend((id)v228[5], "setObject:forKeyedSubscript:", v144, CFSTR("noackStatusCountComputedAtDecision"));

      v145 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dpsCounterSampleAtIndex:", 1));
      v146 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v145, "peerStats"));
      v147 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v146, "completions"));
      LODWORD(v144) = objc_msgSend(v147, "txfailure");
      v148 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dpsCounterSampleAtIndex:", 0));
      v149 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v148, "peerStats"));
      v150 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v149, "completions"));
      v151 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v144 - objc_msgSend(v150, "txfailure")));
      objc_msgSend((id)v228[5], "setObject:forKeyedSubscript:", v151, CFSTR("txfailureStatusCountComputedAtDecision"));

      v152 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dpsCounterSampleAtIndex:", 1));
      v153 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v152, "peerStats"));
      v154 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v153, "completions"));
      LODWORD(v151) = objc_msgSend(v154, "noresources");
      v155 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dpsCounterSampleAtIndex:", 0));
      v156 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v155, "peerStats"));
      v157 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v156, "completions"));
      v158 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v151 - objc_msgSend(v157, "noresources")));
      objc_msgSend((id)v228[5], "setObject:forKeyedSubscript:", v158, CFSTR("noresourcesStatusCountComputedAtDecision"));

      v159 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dpsCounterSampleAtIndex:", 1));
      v160 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v159, "peerStats"));
      v161 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v160, "completions"));
      LODWORD(v158) = objc_msgSend(v161, "ioerror");
      v162 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dpsCounterSampleAtIndex:", 0));
      v163 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v162, "peerStats"));
      v164 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v163, "completions"));
      v165 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v158 - objc_msgSend(v164, "ioerror")));
      objc_msgSend((id)v228[5], "setObject:forKeyedSubscript:", v165, CFSTR("ioerrorStatusCountComputedAtDecision"));

      v166 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dpsCounterSampleAtIndex:", 1));
      v167 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v166, "peerStats"));
      v168 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v167, "completions"));
      LODWORD(v165) = objc_msgSend(v168, "internalerror");
      v169 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dpsCounterSampleAtIndex:", 0));
      v170 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v169, "peerStats"));
      v171 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v170, "completions"));
      v172 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v165 - objc_msgSend(v171, "internalerror")));
      objc_msgSend((id)v228[5], "setObject:forKeyedSubscript:", v172, CFSTR("internalerrorStatusCountComputedAtDecision"));

      v173 = *(void **)(v212 + 40);
      v174 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "snapshot"));
      v175 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v174, "btSnapshot"));
      v176 = (unint64_t)objc_msgSend(v175, "ts");
      v177 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v212 + 56), "objectForKeyedSubscript:", CFSTR("snapshotInstance")));
      v178 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v173, "computeSnapshotValidity:snapshotTimestamp:validityThreshold:", v176 / 0x3E8, v177, 7)));
      objc_msgSend((id)v228[5], "setObject:forKeyedSubscript:", v178, CFSTR("isBtSnapshotValid"));

      v179 = *(void **)(v212 + 40);
      v180 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "snapshot"));
      v181 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v180, "awdlSnapshot"));
      v182 = (unint64_t)objc_msgSend(v181, "ts");
      v183 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v212 + 56), "objectForKeyedSubscript:", CFSTR("snapshotInstance")));
      v184 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v179, "computeSnapshotValidity:snapshotTimestamp:validityThreshold:", v182 / 0x3E8, v183, 7)));
      objc_msgSend((id)v228[5], "setObject:forKeyedSubscript:", v184, CFSTR("isAwdlSnapshotValid"));

      v185 = *(void **)(v212 + 40);
      v186 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v212 + 56), "objectForKeyedSubscript:", CFSTR("start")));
      v187 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v212 + 56), "objectForKeyedSubscript:", CFSTR("userToggle")));
      v188 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v185, "computeDifferenceBetweenDates:end:", v186, v187)));
      objc_msgSend((id)v228[5], "setObject:forKeyedSubscript:", v188, CFSTR("userToggleAt"));

      v189 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dpsEpiloge"));
      v190 = objc_msgSend(v189, "associationChangesCount");

      v191 = (void *)v228[5];
      if (v190)
      {
        objc_msgSend(v191, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("isAssociationChangesValid"));
        v217 = 0u;
        v218 = 0u;
        v215 = 0u;
        v216 = 0u;
        v192 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dpsEpiloge"));
        v193 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v192, "associationChanges"));

        v194 = objc_msgSend(v193, "countByEnumeratingWithState:objects:count:", &v215, v243, 16);
        v195 = 0;
        v196 = 0;
        if (v194)
        {
          v197 = *(_QWORD *)v216;
          do
          {
            for (j = 0; j != v194; j = (char *)j + 1)
            {
              if (*(_QWORD *)v216 != v197)
                objc_enumerationMutation(v193);
              v199 = *(void **)(*((_QWORD *)&v215 + 1) + 8 * (_QWORD)j);
              v195 |= objc_msgSend(v199, "changedChannel");
              v196 |= objc_msgSend(v199, "newBSSID");
            }
            v194 = objc_msgSend(v193, "countByEnumeratingWithState:objects:count:", &v215, v243, 16);
          }
          while (v194);
        }

        v200 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v195 & 1));
        objc_msgSend((id)v228[5], "setObject:forKeyedSubscript:", v200, CFSTR("didAssociateToNewChannel"));

        v201 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v196 & 1));
        objc_msgSend((id)v228[5], "setObject:forKeyedSubscript:", v201, CFSTR("didAssociateToNewBSSID"));

      }
      else
      {
        objc_msgSend(v191, "setObject:forKeyedSubscript:", &__kCFBooleanFalse, CFSTR("isAssociationChangesValid"));
      }
      v202 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "snapshot"));

      if (v202)
      {
        v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "snapshot"));
        v203 = 0;
        v35 = 0;
        v34 = 0;
        do
        {
          switch(v203)
          {
            case 0:
              v204 = objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "txCompletionSnapshotBE"));
              goto LABEL_59;
            case 1:
              v204 = objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "txCompletionSnapshotBK"));
              goto LABEL_59;
            case 2:
              v204 = objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "txCompletionSnapshotVI"));
              goto LABEL_59;
            case 3:
              v204 = objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "txCompletionSnapshotVO"));
LABEL_59:
              v205 = (void *)v204;

              v34 = v205;
              break;
            default:
              break;
          }
          if (v34)
          {
            if (v35)
              objc_msgSend(*(id *)(v212 + 40), "computeAggregateTxCompletionStatus:source:", v35, v34);
            else
              v35 = v34;
          }
          ++v203;
        }
        while (v203 != 4);
        v206 = *(void **)(v212 + 40);
        v214[0] = _NSConcreteStackBlock;
        v214[1] = 3221225472;
        v214[2] = sub_1000740E8;
        v214[3] = &unk_1000CDA38;
        v214[4] = &v227;
        objc_msgSend(v206, "findTxCompletionFailureWithMaxCount:andReply:", v35, v214);
      }
      else
      {
        v34 = 0;
        v35 = 0;
        v36 = 0;
      }
      v207 = dispatch_time(0, 15000000000);
      dispatch_semaphore_wait(dsema, v207);
      goto LABEL_27;
    }
  }
LABEL_24:
  v39 = WALogCategoryDefaultHandle();
  v40 = objc_claimAutoreleasedReturnValue(v39);
  if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    v238 = "-[CADataTransformEngine transformAndSubmitDPSMessageToCA:additionalInfo:timestamps:]_block_invoke_2";
    v239 = 1024;
    v240 = 303;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "%{public}s::%d:Invalid DPS data Population", buf, 0x12u);
  }

  v34 = 0;
  v35 = 0;
  v36 = 0;
  v209 = 0;
  v210 = 0;
LABEL_27:
  v41 = *((unsigned __int8 *)v234 + 24);
  v42 = WALogCategoryDefaultHandle();
  v43 = objc_claimAutoreleasedReturnValue(v42);
  v44 = v43;
  if (!v41)
  {
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v238 = "-[CADataTransformEngine transformAndSubmitDPSMessageToCA:additionalInfo:timestamps:]_block_invoke_2";
      v239 = 1024;
      v240 = 438;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "%{public}s::%d:Submitting DPS metric (CA) aborted due to validation Error", buf, 0x12u);
    }

LABEL_34:
    v46 = 0;
    goto LABEL_35;
  }
  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
  {
    v45 = objc_msgSend((id)v228[5], "count");
    *(_DWORD *)buf = 136446722;
    v238 = "-[CADataTransformEngine transformAndSubmitDPSMessageToCA:additionalInfo:timestamps:]_block_invoke";
    v239 = 1024;
    v240 = 441;
    v241 = 2048;
    v242 = v45;
    _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:DPS metricDict fieldCount: %lu", buf, 0x1Cu);
  }

  v46 = (id)v228[5];
LABEL_35:

  _Block_object_dispose(&v227, 8);
  _Block_object_dispose(&v233, 8);
  return v46;
}

void sub_100073FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  _Block_object_dispose(&a45, 8);
  _Block_object_dispose(&a51, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100074020(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100074030(uint64_t a1)
{

}

intptr_t sub_100074038(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  void *v7;
  void *v8;

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a2));
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "setObject:forKeyedSubscript:", v7, CFSTR("recoveryObservedDuringStudy"));

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a3));
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "setObject:forKeyedSubscript:", v8, CFSTR("recoveryAt"));

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = a4;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1000740E8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  void *v7;
  void *v8;
  id v9;

  v9 = a4;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a2));
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "setObject:forKeyedSubscript:", v7, CFSTR("majorTxFailureTypeAmongAllACs"));

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a3));
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "setObject:forKeyedSubscript:", v8, CFSTR("majorTxFailureCountAmongAllACs"));

  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "setObject:forKeyedSubscript:", v9, CFSTR("aggregateTxFailureTypeAmongAllACs"));
}

id sub_100074398(uint64_t a1)
{
  void *v2;
  char *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  char v13;
  int v14;
  uint64_t v15;
  void *i;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  unsigned __int8 v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  unsigned __int8 v28;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  unsigned __int8 v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  unsigned __int8 v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  id v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  unint64_t v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  unint64_t v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  id v100;
  void *v101;
  void *v102;
  id v103;
  id v104;
  int v105;
  int v106;
  uint64_t v107;
  void *j;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  void *v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  void *v149;
  void *v150;
  void *v151;
  void *v152;
  void *v153;
  void *v154;
  void *v155;
  void *v156;
  void *v157;
  void *v158;
  void *v159;
  void *v160;
  void *v161;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  void *v167;
  void *v168;
  void *v169;
  id v170;
  void *v171;
  void *v172;
  void *v173;
  id v174;
  void *v175;
  void *v176;
  void *v177;
  id v178;
  void *v179;
  void *v180;
  void *v181;
  void *v182;
  void *v183;
  void *v184;
  void *v185;
  void *v186;
  void *v187;
  void *v188;
  void *v189;
  void *v190;
  void *v191;
  void *v192;
  void *v193;
  void *v194;
  void *v195;
  void *v196;
  void *v197;
  void *v198;
  void *v199;
  void *v200;
  void *v201;
  void *v202;
  void *v203;
  void *v204;
  void *v205;
  void *v206;
  void *v207;
  void *v208;
  void *v209;
  void *v210;
  void *v211;
  void *v212;
  void *v213;
  void *v214;
  void *v215;
  id v216;
  void *v217;
  double v218;
  double v219;
  void *v220;
  void *v221;
  id v222;
  void *v223;
  double v224;
  double v225;
  id v226;
  void *v227;
  double v228;
  void *v229;
  void *v230;
  id v231;
  NSObject *v232;
  id v233;
  NSObject *v234;
  void *v235;
  id v236;
  void *v237;
  id v238;
  id v239;
  NSObject *v240;
  void *v241;
  void *v242;
  void *v243;
  void *v244;
  void *v245;
  void *v246;
  void *v247;
  void *v248;
  void *v249;
  void *v250;
  void *v251;
  void *v252;
  void *v253;
  void *v254;
  void *v255;
  void *v256;
  void *v257;
  void *v258;
  void *v259;
  void *v260;
  void *v261;
  void *v262;
  void *v263;
  void *v264;
  void *v265;
  void *v266;
  void *v267;
  unsigned int v268;
  void *v269;
  void *v270;
  void *v271;
  void *v272;
  void *v273;
  void *v274;
  void *v275;
  void *v276;
  void *v277;
  void *v278;
  void *v279;
  void *v280;
  void *v281;
  void *v282;
  void *v283;
  void *v284;
  void *v285;
  void *v286;
  void *v287;
  void *v288;
  void *v289;
  char *v290;
  void *v291;
  char *v292;
  void *v293;
  char *v294;
  void *v295;
  char *v296;
  double v297;
  double v298;
  void *v299;
  char *v300;
  void *v301;
  char *v302;
  void *v303;
  char *v304;
  void *v305;
  char *v306;
  double v307;
  double v308;
  id v309;
  void *v310;
  double v311;
  void *v312;
  void *v313;
  id v314;
  NSObject *v315;
  void *v316;
  void *v317;
  void *v318;
  void *v319;
  void *v320;
  void *v321;
  void *v322;
  void *v323;
  void *v324;
  void *v325;
  void *v326;
  void *v327;
  void *v328;
  void *v329;
  void *v330;
  void *v331;
  void *v332;
  void *v333;
  void *v334;
  void *v335;
  id v336;
  void *v337;
  double v338;
  double v339;
  void *v340;
  void *v341;
  id v342;
  void *v343;
  double v344;
  double v345;
  id v346;
  void *v347;
  double v348;
  void *v349;
  void *v350;
  id v351;
  NSObject *v352;
  void *v353;
  void *v354;
  void *v355;
  void *v356;
  void *v357;
  void *v358;
  void *v359;
  void *v360;
  void *v361;
  void *v362;
  void *v363;
  void *v364;
  void *v365;
  void *v366;
  void *v367;
  void *v368;
  void *v369;
  void *v370;
  void *v371;
  void *v372;
  id v373;
  void *v374;
  char *v375;
  void *v376;
  double v377;
  double v378;
  void *v379;
  void *v380;
  id v381;
  void *v382;
  char *v383;
  void *v384;
  double v385;
  double v386;
  id v387;
  void *v388;
  double v389;
  void *v390;
  void *v391;
  id v392;
  NSObject *v393;
  void *v394;
  void *v395;
  void *v396;
  void *v397;
  void *v398;
  void *v399;
  void *v400;
  void *v401;
  void *v402;
  void *v403;
  void *v404;
  id v405;
  void *v406;
  double v407;
  double v408;
  void *v409;
  void *v410;
  id v411;
  void *v412;
  double v413;
  double v414;
  id v415;
  void *v416;
  double v417;
  void *v418;
  void *v419;
  id v420;
  NSObject *v421;
  void *v422;
  void *v423;
  void *v424;
  void *v425;
  void *v426;
  void *v427;
  void *v428;
  void *v429;
  void *v430;
  void *v431;
  void *v432;
  id v433;
  void *v434;
  char *v435;
  void *v436;
  double v437;
  double v438;
  void *v439;
  void *v440;
  id v441;
  void *v442;
  char *v443;
  void *v444;
  double v445;
  double v446;
  id v447;
  void *v448;
  void *v449;
  NSObject *v450;
  void *v451;
  id v452;
  NSObject *v453;
  id v454;
  NSObject *v455;
  id v456;
  id v457;
  id v459;
  const char *v460;
  id v461;
  id v462;
  void *v463;
  NSObject *v464;
  unsigned int v465;
  void *v466;
  void *v467;
  void *v468;
  void *v469;
  void *v470;
  unsigned int v471;
  void *v472;
  void *v473;
  void *v474;
  void *v475;
  void *v476;
  void *v477;
  void *v478;
  void *v479;
  void *v480;
  void *v481;
  void *v482;
  void *v483;
  void *v484;
  void *v485;
  void *v486;
  void *v487;
  void *v488;
  void *v489;
  void *v490;
  void *v491;
  void *v492;
  void *v493;
  void *v494;
  void *v495;
  void *v496;
  void *v497;
  void *v498;
  void *v499;
  uint64_t v500;
  void *v501;
  char *v502;
  void *v503;
  __int128 v504;
  __int128 v505;
  __int128 v506;
  __int128 v507;
  __int128 v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  uint8_t buf[4];
  const char *v513;
  __int16 v514;
  int v515;
  __int16 v516;
  double v517;
  __int16 v518;
  double v519;
  _BYTE v520[128];
  _BYTE v521[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", *(_QWORD *)(a1 + 32)));
  v3 = (char *)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "dns_symptoms_trap_evaluated_at_sample");
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "instantiateAWDProtobufAndPopulateValues:", *(_QWORD *)(a1 + 48)));
  v5 = v4;
  if (!v4)
  {
    v459 = WALogCategoryDefaultHandle();
    v450 = objc_claimAutoreleasedReturnValue(v459);
    if (!os_log_type_enabled(v450, OS_LOG_TYPE_ERROR))
      goto LABEL_125;
    *(_DWORD *)buf = 136446466;
    v513 = "-[CADataTransformEngine transformAndSubmitDNSMessageToCA:additionalInfo:timestamps:]_block_invoke";
    v514 = 1024;
    v515 = 479;
    v460 = "%{public}s::%d:Error creating DPS data to send to CA";
LABEL_134:
    _os_log_impl((void *)&_mh_execute_header, v450, OS_LOG_TYPE_ERROR, v460, buf, 0x12u);
    goto LABEL_125;
  }
  v6 = v4;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "stallNotifications"));
  v8 = objc_msgSend(v7, "count");

  if (!v8)
  {
    v461 = WALogCategoryDefaultHandle();
    v450 = objc_claimAutoreleasedReturnValue(v461);
    if (!os_log_type_enabled(v450, OS_LOG_TYPE_ERROR))
      goto LABEL_125;
    *(_DWORD *)buf = 136446466;
    v513 = "-[CADataTransformEngine transformAndSubmitDNSMessageToCA:additionalInfo:timestamps:]_block_invoke";
    v514 = 1024;
    v515 = 482;
    v460 = "%{public}s::%d:Invalid DNS data: no samples";
    goto LABEL_134;
  }
  v9 = objc_msgSend(v6, "dpsCounterSamplesCount");
  if (v9 < objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "dns_symptoms_interrogation_sample_count"))
  {
    v462 = WALogCategoryDefaultHandle();
    v450 = objc_claimAutoreleasedReturnValue(v462);
    if (!os_log_type_enabled(v450, OS_LOG_TYPE_ERROR))
      goto LABEL_125;
    *(_DWORD *)buf = 136446466;
    v513 = "-[CADataTransformEngine transformAndSubmitDNSMessageToCA:additionalInfo:timestamps:]_block_invoke";
    v514 = 1024;
    v515 = 483;
    v460 = "%{public}s::%d:Invalid DNS data: less samples";
    goto LABEL_134;
  }
  v499 = v5;
  v500 = a1;
  v510 = 0u;
  v511 = 0u;
  v508 = 0u;
  v509 = 0u;
  v503 = v6;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "stallNotifications"));
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v508, v521, 16);
  if (v11)
  {
    v12 = v11;
    v13 = 0;
    v14 = 0;
    v15 = *(_QWORD *)v509;
    do
    {
      for (i = 0; i != v12; i = (char *)i + 1)
      {
        if (*(_QWORD *)v509 != v15)
          objc_enumerationMutation(v10);
        v17 = *(void **)(*((_QWORD *)&v508 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(v17, "symptom") == 4)
          v14 |= objc_msgSend(v17, "facetimeCallInProgress");
        v13 |= objc_msgSend(v17, "symptom") == 2;
      }
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v508, v521, 16);
    }
    while (v12);
  }
  else
  {
    v13 = 0;
    LOBYTE(v14) = 0;
  }

  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v14 & 1));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v18, CFSTR("IsCriticalAppRunning"));

  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v13 & 1));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v19, CFSTR("DidUserToggleWiFiOff"));

  v20 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v500 + 56), "objectForKeyedSubscript:", CFSTR("UserToggleBeforeDecision")));
  if (v20
    && (v21 = (void *)v20,
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v500 + 56), "objectForKeyedSubscript:", CFSTR("UserToggleBeforeDecision"))),
        v23 = objc_msgSend(v22, "BOOLValue"),
        v22,
        v21,
        (v23 & 1) != 0))
  {
    v24 = &__kCFBooleanTrue;
  }
  else
  {
    v24 = &__kCFBooleanFalse;
  }
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v24, CFSTR("UserToggleBeforeDecision"));
  v25 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v500 + 56), "objectForKeyedSubscript:", CFSTR("LinkUpBeforeDecision")));
  if (v25
    && (v26 = (void *)v25,
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v500 + 56), "objectForKeyedSubscript:", CFSTR("LinkUpBeforeDecision"))),
        v28 = objc_msgSend(v27, "BOOLValue"),
        v27,
        v26,
        (v28 & 1) != 0))
  {
    v29 = &__kCFBooleanTrue;
  }
  else
  {
    v29 = &__kCFBooleanFalse;
  }
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v29, CFSTR("LinkUpBeforeDecision"));
  v30 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v500 + 56), "objectForKeyedSubscript:", CFSTR("UserToggleAfterDecision")));
  if (v30
    && (v31 = (void *)v30,
        v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v500 + 56), "objectForKeyedSubscript:", CFSTR("UserToggleAfterDecision"))),
        v33 = objc_msgSend(v32, "BOOLValue"),
        v32,
        v31,
        (v33 & 1) != 0))
  {
    v34 = &__kCFBooleanTrue;
  }
  else
  {
    v34 = &__kCFBooleanFalse;
  }
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v34, CFSTR("UserToggleAfterDecision"));
  v35 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v500 + 56), "objectForKeyedSubscript:", CFSTR("LinkUpAfterDecision")));
  if (v35
    && (v36 = (void *)v35,
        v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v500 + 56), "objectForKeyedSubscript:", CFSTR("LinkUpAfterDecision"))),
        v38 = objc_msgSend(v37, "BOOLValue"),
        v37,
        v36,
        (v38 & 1) != 0))
  {
    v39 = &__kCFBooleanTrue;
  }
  else
  {
    v39 = &__kCFBooleanFalse;
  }
  v502 = v3 - 1;
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v39, CFSTR("LinkUpAfterDecision"));
  v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v503, "dpsCounterSampleAtIndex:", (char *)objc_msgSend(*(id *)(*(_QWORD *)(v500 + 40) + 16), "dns_symptoms_trap_evaluated_at_sample")- 1));
  v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "controllerStats"));
  v42 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), objc_msgSend(v41, "channel")));

  v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v503, "dpsCounterSampleAtIndex:", (char *)objc_msgSend(*(id *)(*(_QWORD *)(v500 + 40) + 16), "dns_symptoms_trap_evaluated_at_sample")- 1));
  v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "controllerStats"));
  v45 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), objc_msgSend(v44, "channelBandwidth")));

  v464 = v42;
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v42, CFSTR("Channel"));
  v463 = (void *)v45;
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v45, CFSTR("ChannelBandwidth"));
  if (objc_msgSend(v503, "usbEventsCount"))
  {
    v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v503, "usbEventAtIndex:", (char *)objc_msgSend(v503, "usbEventsCount") - 1));
    v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v46, "usbAction")));
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v47, CFSTR("usbAction"));

    v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v503, "usbEventAtIndex:", (char *)objc_msgSend(v503, "usbEventsCount") - 1));
    v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v48, "usbTotal")));
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v49, CFSTR("usbTotal"));

    v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v503, "usbEventAtIndex:", (char *)objc_msgSend(v503, "usbEventsCount") - 1));
    v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v50, "durationSinceUSBEventInSeconds")));
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v51, CFSTR("timeSinceUSBEvent"));

    v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v503, "usbEventAtIndex:", (char *)objc_msgSend(v503, "usbEventsCount") - 1));
    v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v52, "smartCCADesenseSupported")));
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v53, CFSTR("isSmartCCADesenseSupported"));

    v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v503, "usbEventAtIndex:", (char *)objc_msgSend(v503, "usbEventsCount") - 1));
    v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v54, "isVendorApple")));
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v55, CFSTR("isUSBDeviceVendorApple"));

  }
  v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v503, "dpsEpiloge"));
  v57 = objc_msgSend(v56, "accessPointInfosCount");

  if (v57)
  {
    v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v503, "dpsEpiloge"));
    v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "accessPointInfoAtIndex:", 0));
    v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "modelName"));
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v60, CFSTR("APModelName"));

    v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v503, "dpsEpiloge"));
    v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v61, "accessPointInfoAtIndex:", 0));
    v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "modelNumber"));
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v63, CFSTR("APModelNumber"));

    v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v503, "dpsEpiloge"));
    v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v64, "accessPointInfoAtIndex:", 0));
    v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v65, "manufacturerElement"));
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v66, CFSTR("APManufacturerElement"));

    v67 = &__kCFBooleanTrue;
  }
  else
  {
    v67 = &__kCFBooleanFalse;
  }
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v67, CFSTR("IsAPInfoPresent"));
  v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v503, "snapshot"));
  v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "btSnapshot"));
  v70 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v69, "use")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v70, CFSTR("BtUse"));

  v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v503, "snapshot"));
  v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v71, "awdlSnapshot"));
  v73 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v72, "use")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v73, CFSTR("AwdlUse"));

  v74 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v503, "snapshot"));
  v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v74, "awdlSnapshot"));
  v76 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v75, "sdb")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v76, CFSTR("AwdlSdb"));

  v77 = *(void **)(v500 + 40);
  v78 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v503, "snapshot"));
  v79 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v78, "btSnapshot"));
  v80 = (unint64_t)objc_msgSend(v79, "ts") / 0x3E8;
  v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v500 + 56), "objectForKeyedSubscript:", CFSTR("snapshotInstance")));
  v82 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v77, "computeSnapshotValidity:snapshotTimestamp:validityThreshold:", v80, v81, 7)));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v82, CFSTR("BtSnapshotValidity"));

  v83 = *(void **)(v500 + 40);
  v84 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v503, "snapshot"));
  v85 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v84, "awdlSnapshot"));
  v86 = (unint64_t)objc_msgSend(v85, "ts") / 0x3E8;
  v87 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v500 + 56), "objectForKeyedSubscript:", CFSTR("snapshotInstance")));
  v88 = v503;
  v89 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v83, "computeSnapshotValidity:snapshotTimestamp:validityThreshold:", v86, v87, 7)));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v89, CFSTR("AwdlSnapshotValidity"));

  v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v503, "dpsCounterSampleAtIndex:", v502));
  v91 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v90, "peerStats"));
  v92 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v91, "ccaValue")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v92, CFSTR("ccaValue"));

  v93 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v503, "dpsCounterSampleAtIndex:", v502));
  v94 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v93, "peerStats"));
  v95 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(v94, "rssiValue")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v95, CFSTR("rssiValue"));

  v96 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v503, "dpsCounterSampleAtIndex:", v502));
  v97 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v96, "peerStats"));
  v98 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(v97, "snrValue")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v98, CFSTR("snrValue"));

  v99 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v503, "dpsEpiloge"));
  v100 = objc_msgSend(v99, "associationChangesCount");

  if (v100)
  {
    objc_msgSend(v2, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("IsAssociationChangesValid"));
    v506 = 0u;
    v507 = 0u;
    v504 = 0u;
    v505 = 0u;
    v101 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v503, "dpsEpiloge"));
    v102 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v101, "associationChanges"));

    v103 = objc_msgSend(v102, "countByEnumeratingWithState:objects:count:", &v504, v520, 16);
    if (v103)
    {
      v104 = v103;
      v105 = 0;
      v106 = 0;
      v107 = *(_QWORD *)v505;
      do
      {
        for (j = 0; j != v104; j = (char *)j + 1)
        {
          if (*(_QWORD *)v505 != v107)
            objc_enumerationMutation(v102);
          v109 = *(void **)(*((_QWORD *)&v504 + 1) + 8 * (_QWORD)j);
          v106 |= objc_msgSend(v109, "changedChannel");
          v105 |= objc_msgSend(v109, "newBSSID");
        }
        v104 = objc_msgSend(v102, "countByEnumeratingWithState:objects:count:", &v504, v520, 16);
      }
      while (v104);
    }
    else
    {
      LOBYTE(v105) = 0;
      LOBYTE(v106) = 0;
    }

    v110 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v106 & 1));
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v110, CFSTR("IsAssociatedToNewChannel"));

    v111 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v105 & 1));
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v111, CFSTR("IsAssociatedToNewBSSID"));

    v88 = v503;
  }
  else
  {
    objc_msgSend(v2, "setObject:forKeyedSubscript:", &__kCFBooleanFalse, CFSTR("IsAssociationChangesValid"));
  }
  v112 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "dpsEpiloge"));
  v113 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v112, "isAssociatedAtStudyEnd")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v113, CFSTR("IsAssociatedAtStudyEnd"));

  v114 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "dpsEpiloge"));
  v115 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v114, "symptomsDnsStats"));
  v116 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v115, "isCaptiveServerIPResolved")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v116, CFSTR("IsCaptiveServerResolved"));

  v117 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "dpsEpiloge"));
  v118 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v117, "symptomsDnsStats"));
  v119 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v118, "symptomsDnsscreenStateOn")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v119, CFSTR("IsScreenStateOn"));

  v120 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "dpsEpiloge"));
  v121 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v120, "symptomsDnsStats"));
  v122 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v121, "totalDnsServers")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v122, CFSTR("TotalDnsServers"));

  v123 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "dpsEpiloge"));
  v124 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v123, "symptomsDnsStats"));
  v125 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v124, "numIpv4DnsServers")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v125, CFSTR("NumIpv4DnsServers"));

  v126 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "dpsEpiloge"));
  v127 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v126, "symptomsDnsStats"));
  v128 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v127, "numIpv6DnsServers")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v128, CFSTR("NumIpv6DnsServers"));

  v129 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "dpsEpiloge"));
  v130 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v129, "symptomsDnsStats"));
  v131 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v130, "numLocalDnsServers")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v131, CFSTR("NumLocalDnsServers"));

  v132 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "dpsEpiloge"));
  v133 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v132, "symptomsDnsStats"));
  v134 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v133, "numRemoteDnsServers")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v134, CFSTR("NumRemoteDnsServers"));

  v135 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "dpsEpiloge"));
  v136 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v135, "symptomsDnsStats"));
  v137 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v136, "lanHealthBeforeDecision")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v137, CFSTR("LanHealthBeforeDecision"));

  v138 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "dpsEpiloge"));
  v139 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v138, "symptomsDnsStats"));
  v140 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v139, "lanHealthAfterDecision")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v140, CFSTR("LanHealthAfterDecision"));

  v141 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "dpsEpiloge"));
  v142 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v141, "symptomsDnsStats"));
  v143 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v142, "wanHealthBeforeDecision")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v143, CFSTR("WanHealthBeforeDecision"));

  v144 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "dpsEpiloge"));
  v145 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v144, "symptomsDnsStats"));
  v146 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v145, "wanHealthAfterDecision")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v146, CFSTR("WanHealthAfterDecision"));

  v147 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "dpsEpiloge"));
  v148 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v147, "symptomsDnsStats"));
  v149 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v148, "netscoreHealthBeforeDecision")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v149, CFSTR("NetscoreHealthBeforeDecision"));

  v150 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "dpsEpiloge"));
  v151 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v150, "symptomsDnsStats"));
  v152 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v151, "netscoreHealthAfterDecision")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v152, CFSTR("NetscoreHealthAfterDecision"));

  v153 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "dpsEpiloge"));
  v154 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v153, "symptomsDnsStats"));
  v155 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v154, "netscoreAtStudyStart")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v155, CFSTR("NetscoreAtStudyStart"));

  v156 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "dpsEpiloge"));
  v157 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v156, "symptomsDnsStats"));
  v158 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v157, "netscoreAtStudyEnd")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v158, CFSTR("NetscoreAtStudyEnd"));

  v159 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "dpsEpiloge"));
  v160 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v159, "symptomsDnsStats"));
  v161 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v160, "impactedServersAtStudyStart")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v161, CFSTR("ImpactedServersAtStudyStart"));

  v162 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "dpsEpiloge"));
  v163 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v162, "symptomsDnsStats"));
  v164 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v163, "impactedServersAtStudyEnd")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v164, CFSTR("ImpactedServersAtStudyEnd"));

  v165 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "dpsEpiloge"));
  v166 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v165, "symptomsDnsStats"));
  v167 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v166, "symptomsDnsTimeSincePreviousTriggerMinutes")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v167, CFSTR("TimeSincePreviousTriggerInMin"));

  v168 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "dpsEpiloge"));
  v169 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v168, "symptomsDnsStats"));
  v170 = objc_msgSend(v169, "configType");
  if (v170 >= 3)
    v171 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), v170));
  else
    v171 = *(&off_1000CDB00 + (int)v170);
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v171, CFSTR("DnsConfigType"));

  v172 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "dpsEpiloge"));
  v173 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v172, "symptomsDnsStats"));
  v174 = objc_msgSend(v173, "suppressedReason");
  if (v174 >= 0xB)
    v175 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), v174));
  else
    v175 = *(&off_1000CDB18 + (int)v174);
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v175, CFSTR("DnsRecoverySuppressedReason"));

  v176 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "dpsEpiloge"));
  v177 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v176, "symptomsDnsStats"));
  v178 = objc_msgSend(v177, "symptomsDnsRecommendation");
  if (v178 >= 3)
    v179 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), v178));
  else
    v179 = *(&off_1000CDB70 + (int)v178);
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v179, CFSTR("DnsRecoveryRecommendation"));

  v180 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "dpsEpiloge"));
  v181 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v180, "symptomsDnsStats"));
  v182 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v181, "dpsNotificationReceivedDuringStudy")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v182, CFSTR("IsDPSNotificationReceivedDuringDNSStudy"));

  v183 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "dpsEpiloge"));
  v184 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v183, "symptomsDnsStats"));
  v185 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v184, "slowWiFiNotificationReceivedDuringStudy")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v185, CFSTR("IsSlowWiFiNotificationReceivedDuringDNSStudy"));

  v186 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "dpsEpiloge"));
  v187 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v186, "symptomsDnsStats"));
  v188 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v187, "isPingEnqueueFailing")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v188, CFSTR("IsPingEnqueueFailing"));

  v189 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v500 + 56), "objectForKeyedSubscript:", CFSTR("IPConfiguredEventTimeStamp")));
  if (v189)
  {
    objc_msgSend(v2, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("IsIPConfiguredEventReceived"));
    v190 = *(void **)(v500 + 40);
    v191 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v500 + 56), "objectForKeyedSubscript:", CFSTR("decisionInstance")));
    v192 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v500 + 56), "objectForKeyedSubscript:", CFSTR("IPConfiguredEventTimeStamp")));
    v193 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v190, "computeDifferenceBetweenDates:end:", v191, v192)));
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v193, CFSTR("IPAcquiredTimeSinceDecisionPoint"));

    v194 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v500 + 56), "objectForKey:", CFSTR("IPAddressTypeOnInterface")));
    v195 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v194, "integerValue")));
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v195, CFSTR("IPAddressTypeOnInterface"));

  }
  else
  {
    objc_msgSend(v2, "setObject:forKeyedSubscript:", &__kCFBooleanFalse, CFSTR("IsIPConfiguredEventReceived"));
  }
  v196 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "dpsCounterSampleAtIndex:", v502));
  v197 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v196, "controllerStats"));
  v198 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v197, "aggregateMetrics"));
  v199 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v198, "kTxFrames")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v199, CFSTR("TxFramesBeforeDecision"));

  v200 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "dpsCounterSamples"));
  v201 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v200, "lastObject"));
  v202 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v201, "controllerStats"));
  v203 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v202, "aggregateMetrics"));
  v204 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v203, "kTxFrames")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v204, CFSTR("TxFramesAfterDecision"));

  v205 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "dpsCounterSampleAtIndex:", v502));
  v206 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v205, "controllerStats"));
  v207 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v206, "aggregateMetrics"));
  v208 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v207, "kTxRetransmission")));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v208, CFSTR("TxRetriesBeforeDecision"));

  v209 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "dpsCounterSamples"));
  v210 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v209, "lastObject"));
  v211 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v210, "controllerStats"));
  v212 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v211, "aggregateMetrics"));
  v501 = v2;
  v213 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v212, "kTxRetransmission")));
  objc_msgSend(v501, "setObject:forKeyedSubscript:", v213, CFSTR("TxRetriesAfterDecision"));

  v214 = *(void **)(v500 + 40);
  v215 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v501, "objectForKeyedSubscript:", CFSTR("TxRetriesBeforeDecision")));
  v216 = objc_msgSend(v215, "integerValue");
  v217 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v501, "objectForKeyedSubscript:", CFSTR("TxFramesBeforeDecision")));
  objc_msgSend(v214, "computePercentage:denomenator:", v216, objc_msgSend(v217, "integerValue"));
  v219 = v218;

  v220 = *(void **)(v500 + 40);
  v221 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v501, "objectForKeyedSubscript:", CFSTR("TxRetriesAfterDecision")));
  v222 = objc_msgSend(v221, "integerValue");
  v223 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v501, "objectForKeyedSubscript:", CFSTR("TxFramesAfterDecision")));
  objc_msgSend(v220, "computePercentage:denomenator:", v222, objc_msgSend(v223, "integerValue"));
  v225 = v224;

  v226 = objc_msgSend(*(id *)(v500 + 40), "compareValues:second:", (unint64_t)v219, (unint64_t)v225);
  if (v226 == (id)2)
  {
    objc_msgSend(v501, "setObject:forKeyedSubscript:", CFSTR("AfterHigher"), CFSTR("TxRetryComparison"));
    v228 = v225 - v219;
LABEL_66:
    v229 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v228));
    objc_msgSend(v501, "setObject:forKeyedSubscript:", v229, CFSTR("TxRetryDifference"));

    v227 = v503;
    goto LABEL_70;
  }
  if (v226 == (id)1)
  {
    objc_msgSend(v501, "setObject:forKeyedSubscript:", CFSTR("BeforeHigher"), CFSTR("TxRetryComparison"));
    v228 = v219 - v225;
    goto LABEL_66;
  }
  v227 = v503;
  if (v226)
  {
    v230 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %lu)"), v226));
    objc_msgSend(v501, "setObject:forKeyedSubscript:", v230, CFSTR("TxRetryComparison"));

    v231 = WALogCategoryDefaultHandle();
    v232 = objc_claimAutoreleasedReturnValue(v231);
    if (os_log_type_enabled(v232, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446978;
      v513 = "-[CADataTransformEngine transformAndSubmitDNSMessageToCA:additionalInfo:timestamps:]_block_invoke";
      v514 = 1024;
      v515 = 627;
      v516 = 2048;
      v517 = v219;
      v518 = 2048;
      v519 = v225;
      _os_log_impl((void *)&_mh_execute_header, v232, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Invalid Comparison result for Tx Retry before:%f after:%f", buf, 0x26u);
    }

  }
  else
  {
    objc_msgSend(v501, "setObject:forKeyedSubscript:", CFSTR("Same"), CFSTR("TxRetryComparison"));
    objc_msgSend(v501, "setObject:forKeyedSubscript:", &off_1000E0380, CFSTR("TxRetryDifference"));
  }
LABEL_70:
  v233 = WALogCategoryDefaultHandle();
  v234 = objc_claimAutoreleasedReturnValue(v233);
  if (os_log_type_enabled(v234, OS_LOG_TYPE_DEFAULT))
  {
    v235 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v501, "objectForKeyedSubscript:", CFSTR("TxRetriesAfterDecision")));
    v236 = objc_msgSend(v235, "integerValue");
    v237 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v501, "objectForKeyedSubscript:", CFSTR("TxFramesAfterDecision")));
    v238 = objc_msgSend(v237, "integerValue");
    *(_DWORD *)buf = 136446978;
    v513 = "-[CADataTransformEngine transformAndSubmitDNSMessageToCA:additionalInfo:timestamps:]_block_invoke";
    v514 = 1024;
    v515 = 630;
    v516 = 2048;
    v517 = *(double *)&v236;
    v518 = 2048;
    v519 = *(double *)&v238;
    _os_log_impl((void *)&_mh_execute_header, v234, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Tx Retry after:%llu Tx Frames after:%llu", buf, 0x26u);

  }
  v239 = WALogCategoryDefaultHandle();
  v240 = objc_claimAutoreleasedReturnValue(v239);
  if (os_log_type_enabled(v240, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446978;
    v513 = "-[CADataTransformEngine transformAndSubmitDNSMessageToCA:additionalInfo:timestamps:]_block_invoke";
    v514 = 1024;
    v515 = 631;
    v516 = 2048;
    v517 = v219;
    v518 = 2048;
    v519 = v225;
    _os_log_impl((void *)&_mh_execute_header, v240, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Comparison result for Tx Retry before:%f after:%f", buf, 0x26u);
  }

  v241 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v227, "dpsCounterSampleAtIndex:", v502));
  v242 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v241, "peerStats"));
  v243 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v242, "completions"));
  v244 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v243, "success")));
  objc_msgSend(v501, "setObject:forKeyedSubscript:", v244, CFSTR("TxCompletionSuccessBeforeDecision"));

  v245 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v227, "dpsCounterSamples"));
  v246 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v245, "lastObject"));
  v247 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v246, "peerStats"));
  v248 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v247, "completions"));
  v249 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v248, "success")));
  objc_msgSend(v501, "setObject:forKeyedSubscript:", v249, CFSTR("TxCompletionSuccessAfterDecision"));

  v250 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v227, "dpsCounterSampleAtIndex:", v502));
  v251 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v250, "peerStats"));
  v252 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v251, "completions"));
  v253 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v252, "noack")));
  objc_msgSend(v501, "setObject:forKeyedSubscript:", v253, CFSTR("TxCompletionNoAckBeforeDecision"));

  v254 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v227, "dpsCounterSamples"));
  v255 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v254, "lastObject"));
  v256 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v255, "peerStats"));
  v257 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v256, "completions"));
  v258 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v257, "noack")));
  objc_msgSend(v501, "setObject:forKeyedSubscript:", v258, CFSTR("TxCompletionNoAckAfterDecision"));

  v259 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v227, "dpsCounterSampleAtIndex:", v502));
  v260 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v259, "peerStats"));
  v261 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v260, "completions"));
  v262 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v261, "expired")));
  objc_msgSend(v501, "setObject:forKeyedSubscript:", v262, CFSTR("TxCompletionExpiryBeforeDecision"));

  v263 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v227, "dpsCounterSamples"));
  v264 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v263, "lastObject"));
  v265 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v264, "peerStats"));
  v266 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v265, "completions"));
  v267 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v266, "expired")));
  objc_msgSend(v501, "setObject:forKeyedSubscript:", v267, CFSTR("TxCompletionExpiryAfterDecision"));

  v497 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v227, "dpsCounterSampleAtIndex:", v502));
  v495 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v497, "peerStats"));
  v493 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v495, "completions"));
  LODWORD(v267) = objc_msgSend(v493, "chipmodeerror");
  v491 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v227, "dpsCounterSampleAtIndex:", v502));
  v489 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v491, "peerStats"));
  v487 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v489, "completions"));
  v268 = objc_msgSend(v487, "mbfree") + (_DWORD)v267;
  v485 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v227, "dpsCounterSampleAtIndex:", v502));
  v483 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v485, "peerStats"));
  v481 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v483, "completions"));
  LODWORD(v267) = objc_msgSend(v481, "noremotepeer");
  v478 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v227, "dpsCounterSampleAtIndex:", v502));
  v476 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v478, "peerStats"));
  v475 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v476, "completions"));
  v471 = v268 + (_DWORD)v267 + objc_msgSend(v475, "txfailure");
  v269 = v227;
  v473 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v227, "dpsCounterSampleAtIndex:", v502));
  v270 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v473, "peerStats"));
  v271 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v270, "completions"));
  LODWORD(v264) = objc_msgSend(v271, "noresources");
  v272 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v269, "dpsCounterSampleAtIndex:", v502));
  v273 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v272, "peerStats"));
  v274 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v273, "completions"));
  LODWORD(v266) = (_DWORD)v264 + objc_msgSend(v274, "ioerror");
  v275 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v269, "dpsCounterSampleAtIndex:", v502));
  v276 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v275, "peerStats"));
  v277 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v276, "completions"));
  v278 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v471 + (_DWORD)v266 + objc_msgSend(v277, "internalerror")));
  objc_msgSend(v501, "setObject:forKeyedSubscript:", v278, CFSTR("TxCompletionAllOtherErrorsBeforeDecision"));

  v498 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v269, "dpsCounterSamples"));
  v496 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v498, "lastObject"));
  v494 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v496, "peerStats"));
  v492 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v494, "completions"));
  LODWORD(v277) = objc_msgSend(v492, "chipmodeerror");
  v490 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v269, "dpsCounterSamples"));
  v488 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v490, "lastObject"));
  v486 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v488, "peerStats"));
  v484 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v486, "completions"));
  LODWORD(v274) = objc_msgSend(v484, "mbfree") + (_DWORD)v277;
  v482 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v269, "dpsCounterSamples"));
  v480 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v482, "lastObject"));
  v479 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v480, "peerStats"));
  v477 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v479, "completions"));
  LODWORD(v277) = objc_msgSend(v477, "noremotepeer");
  v474 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v269, "dpsCounterSamples"));
  v472 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v474, "lastObject"));
  v470 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v472, "peerStats"));
  v469 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v470, "completions"));
  v465 = (_DWORD)v274 + (_DWORD)v277 + objc_msgSend(v469, "txfailure");
  v468 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v269, "dpsCounterSamples"));
  v467 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v468, "lastObject"));
  v466 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v467, "peerStats"));
  v279 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v466, "completions"));
  LODWORD(v277) = objc_msgSend(v279, "noresources");
  v280 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v269, "dpsCounterSamples"));
  v281 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v280, "lastObject"));
  v282 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v281, "peerStats"));
  v283 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v282, "completions"));
  LODWORD(v275) = (_DWORD)v277 + objc_msgSend(v283, "ioerror");
  v284 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v269, "dpsCounterSamples"));
  v285 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v284, "lastObject"));
  v286 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v285, "peerStats"));
  v287 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v286, "completions"));
  v288 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v465 + (_DWORD)v275 + objc_msgSend(v287, "internalerror")));
  objc_msgSend(v501, "setObject:forKeyedSubscript:", v288, CFSTR("TxCompletionAllOtherErrorsAfterDecision"));

  v2 = v501;
  v289 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v501, "objectForKeyedSubscript:", CFSTR("TxCompletionNoAckBeforeDecision")));
  v290 = (char *)objc_msgSend(v289, "integerValue");
  v291 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v501, "objectForKeyedSubscript:", CFSTR("TxCompletionExpiryBeforeDecision")));
  v292 = &v290[(_QWORD)objc_msgSend(v291, "integerValue")];
  v293 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v501, "objectForKeyedSubscript:", CFSTR("TxCompletionAllOtherErrorsBeforeDecision")));
  v294 = (char *)objc_msgSend(v293, "integerValue") + (_QWORD)v292;

  v295 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v501, "objectForKeyedSubscript:", CFSTR("TxCompletionSuccessBeforeDecision")));
  v296 = &v294[(_QWORD)objc_msgSend(v295, "integerValue")];

  objc_msgSend(*(id *)(v500 + 40), "computePercentage:denomenator:", v294, v296);
  v298 = v297;
  v299 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v501, "objectForKeyedSubscript:", CFSTR("TxCompletionNoAckAfterDecision")));
  v300 = (char *)objc_msgSend(v299, "integerValue");
  v301 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v501, "objectForKeyedSubscript:", CFSTR("TxCompletionExpiryAfterDecision")));
  v302 = &v300[(_QWORD)objc_msgSend(v301, "integerValue")];
  v303 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v501, "objectForKeyedSubscript:", CFSTR("TxCompletionAllOtherErrorsAfterDecision")));
  v304 = (char *)objc_msgSend(v303, "integerValue") + (_QWORD)v302;

  v305 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v501, "objectForKeyedSubscript:", CFSTR("TxCompletionSuccessAfterDecision")));
  v306 = &v304[(_QWORD)objc_msgSend(v305, "integerValue")];

  objc_msgSend(*(id *)(v500 + 40), "computePercentage:denomenator:", v304, v306);
  v308 = v307;
  v309 = objc_msgSend(*(id *)(v500 + 40), "compareValues:second:", (unint64_t)v298, (unint64_t)v307);
  if (v309 == (id)2)
  {
    objc_msgSend(v501, "setObject:forKeyedSubscript:", CFSTR("AfterHigher"), CFSTR("TxCompletionFailureComparison"));
    v311 = v308 - v298;
LABEL_80:
    v312 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v311));
    objc_msgSend(v501, "setObject:forKeyedSubscript:", v312, CFSTR("TxCompletionFailureDifference"));

    v310 = v503;
    goto LABEL_84;
  }
  if (v309 == (id)1)
  {
    objc_msgSend(v501, "setObject:forKeyedSubscript:", CFSTR("BeforeHigher"), CFSTR("TxCompletionFailureComparison"));
    v311 = v298 - v308;
    goto LABEL_80;
  }
  v310 = v503;
  if (v309)
  {
    v313 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %lu)"), v309));
    objc_msgSend(v501, "setObject:forKeyedSubscript:", v313, CFSTR("TxCompletionFailureComparison"));

    v314 = WALogCategoryDefaultHandle();
    v315 = objc_claimAutoreleasedReturnValue(v314);
    if (os_log_type_enabled(v315, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446978;
      v513 = "-[CADataTransformEngine transformAndSubmitDNSMessageToCA:additionalInfo:timestamps:]_block_invoke";
      v514 = 1024;
      v515 = 680;
      v516 = 2048;
      v517 = v219;
      v518 = 2048;
      v519 = v225;
      _os_log_impl((void *)&_mh_execute_header, v315, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Invalid Comparison result for Tx Retry before:%f after:%f", buf, 0x26u);
    }

  }
  else
  {
    objc_msgSend(v501, "setObject:forKeyedSubscript:", CFSTR("Same"), CFSTR("TxCompletionFailureComparison"));
    objc_msgSend(v501, "setObject:forKeyedSubscript:", &off_1000E0380, CFSTR("TxCompletionFailureDifference"));
  }
LABEL_84:
  v316 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v310, "dpsCounterSampleAtIndex:", v502));
  v317 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v316, "controllerStats"));
  v318 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v317, "aggregateMetrics"));
  v319 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v318, "kRxFrames")));
  objc_msgSend(v501, "setObject:forKeyedSubscript:", v319, CFSTR("RxFramesBeforeDecision"));

  v320 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v310, "dpsCounterSamples"));
  v321 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v320, "lastObject"));
  v322 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v321, "controllerStats"));
  v323 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v322, "aggregateMetrics"));
  v324 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v323, "kRxFrames")));
  objc_msgSend(v501, "setObject:forKeyedSubscript:", v324, CFSTR("RxFramesAfterDecision"));

  v325 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v310, "dpsCounterSampleAtIndex:", v502));
  v326 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v325, "controllerStats"));
  v327 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v326, "aggregateMetrics"));
  v328 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v327, "kRxRetryBitSet")));
  objc_msgSend(v501, "setObject:forKeyedSubscript:", v328, CFSTR("RxRetriesBeforeDecision"));

  v329 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v310, "dpsCounterSamples"));
  v330 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v329, "lastObject"));
  v331 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v330, "controllerStats"));
  v332 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v331, "aggregateMetrics"));
  v333 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v332, "kRxRetryBitSet")));
  objc_msgSend(v501, "setObject:forKeyedSubscript:", v333, CFSTR("RxRetriesAfterDecision"));

  v334 = *(void **)(v500 + 40);
  v335 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v501, "objectForKeyedSubscript:", CFSTR("RxRetriesBeforeDecision")));
  v336 = objc_msgSend(v335, "integerValue");
  v337 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v501, "objectForKeyedSubscript:", CFSTR("RxFramesBeforeDecision")));
  objc_msgSend(v334, "computePercentage:denomenator:", v336, objc_msgSend(v337, "integerValue"));
  v339 = v338;

  v340 = *(void **)(v500 + 40);
  v341 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v501, "objectForKeyedSubscript:", CFSTR("RxRetriesAfterDecision")));
  v342 = objc_msgSend(v341, "integerValue");
  v343 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v501, "objectForKeyedSubscript:", CFSTR("RxFramesAfterDecision")));
  objc_msgSend(v340, "computePercentage:denomenator:", v342, objc_msgSend(v343, "integerValue"));
  v345 = v344;

  v346 = objc_msgSend(*(id *)(v500 + 40), "compareValues:second:", (unint64_t)v339, (unint64_t)v345);
  if (v346 == (id)2)
  {
    objc_msgSend(v501, "setObject:forKeyedSubscript:", CFSTR("AfterHigher"), CFSTR("RxRetryComparison"));
    v348 = v345 - v339;
LABEL_90:
    v349 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v348));
    objc_msgSend(v501, "setObject:forKeyedSubscript:", v349, CFSTR("RxRetryDifference"));

    v347 = v503;
    goto LABEL_94;
  }
  if (v346 == (id)1)
  {
    objc_msgSend(v501, "setObject:forKeyedSubscript:", CFSTR("BeforeHigher"), CFSTR("RxRetryComparison"));
    v348 = v339 - v345;
    goto LABEL_90;
  }
  v347 = v503;
  if (v346)
  {
    v350 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %lu)"), v346));
    objc_msgSend(v501, "setObject:forKeyedSubscript:", v350, CFSTR("RxRetryComparison"));

    v351 = WALogCategoryDefaultHandle();
    v352 = objc_claimAutoreleasedReturnValue(v351);
    if (os_log_type_enabled(v352, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446978;
      v513 = "-[CADataTransformEngine transformAndSubmitDNSMessageToCA:additionalInfo:timestamps:]_block_invoke";
      v514 = 1024;
      v515 = 708;
      v516 = 2048;
      v517 = v339;
      v518 = 2048;
      v519 = v345;
      _os_log_impl((void *)&_mh_execute_header, v352, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Invalid Comparison result for Rx Retry before:%f after:%f", buf, 0x26u);
    }

  }
  else
  {
    objc_msgSend(v501, "setObject:forKeyedSubscript:", CFSTR("Same"), CFSTR("RxRetryComparison"));
    objc_msgSend(v501, "setObject:forKeyedSubscript:", &off_1000E0380, CFSTR("RxRetryDifference"));
  }
LABEL_94:
  v353 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v347, "dpsCounterSampleAtIndex:", v502));
  v354 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v353, "controllerStats"));
  v355 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v354, "aggregateMetrics"));
  v356 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v355, "kRxGoodPLCP")));
  objc_msgSend(v501, "setObject:forKeyedSubscript:", v356, CFSTR("RxGoodPLCPBeforeDecision"));

  v357 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v347, "dpsCounterSamples"));
  v358 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v357, "lastObject"));
  v359 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v358, "controllerStats"));
  v360 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v359, "aggregateMetrics"));
  v361 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v360, "kRxGoodPLCP")));
  objc_msgSend(v501, "setObject:forKeyedSubscript:", v361, CFSTR("RxGoodPLCPAfterDecision"));

  v362 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v347, "dpsCounterSampleAtIndex:", v502));
  v363 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v362, "controllerStats"));
  v364 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v363, "aggregateMetrics"));
  v365 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v364, "kRxBadPLCP")));
  objc_msgSend(v501, "setObject:forKeyedSubscript:", v365, CFSTR("RxBadPLCPBeforeDecision"));

  v366 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v347, "dpsCounterSamples"));
  v367 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v366, "lastObject"));
  v368 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v367, "controllerStats"));
  v369 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v368, "aggregateMetrics"));
  v370 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v369, "kRxBadPLCP")));
  objc_msgSend(v501, "setObject:forKeyedSubscript:", v370, CFSTR("RxBadPLCPAfterDecision"));

  v371 = *(void **)(v500 + 40);
  v372 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v501, "objectForKeyedSubscript:", CFSTR("RxBadPLCPBeforeDecision")));
  v373 = objc_msgSend(v372, "integerValue");
  v374 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v501, "objectForKeyedSubscript:", CFSTR("RxGoodPLCPBeforeDecision")));
  v375 = (char *)objc_msgSend(v374, "integerValue");
  v376 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v501, "objectForKeyedSubscript:", CFSTR("RxBadPLCPBeforeDecision")));
  objc_msgSend(v371, "computePercentage:denomenator:", v373, &v375[(_QWORD)objc_msgSend(v376, "integerValue")]);
  v378 = v377;

  v379 = *(void **)(v500 + 40);
  v380 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v501, "objectForKeyedSubscript:", CFSTR("RxBadPLCPAfterDecision")));
  v381 = objc_msgSend(v380, "integerValue");
  v382 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v501, "objectForKeyedSubscript:", CFSTR("RxGoodPLCPAfterDecision")));
  v383 = (char *)objc_msgSend(v382, "integerValue");
  v384 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v501, "objectForKeyedSubscript:", CFSTR("RxBadPLCPAfterDecision")));
  objc_msgSend(v379, "computePercentage:denomenator:", v381, &v383[(_QWORD)objc_msgSend(v384, "integerValue")]);
  v386 = v385;

  v387 = objc_msgSend(*(id *)(v500 + 40), "compareValues:second:", (unint64_t)v378, (unint64_t)v386);
  if (v387 == (id)2)
  {
    objc_msgSend(v501, "setObject:forKeyedSubscript:", CFSTR("AfterHigher"), CFSTR("RxBadPLCPComparison"));
    v389 = v386 - v378;
LABEL_100:
    v390 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v389));
    objc_msgSend(v501, "setObject:forKeyedSubscript:", v390, CFSTR("RxBadPLCPDifference"));

    v388 = v503;
    goto LABEL_104;
  }
  if (v387 == (id)1)
  {
    objc_msgSend(v501, "setObject:forKeyedSubscript:", CFSTR("BeforeHigher"), CFSTR("RxBadPLCPComparison"));
    v389 = v378 - v386;
    goto LABEL_100;
  }
  v388 = v503;
  if (v387)
  {
    v391 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %lu)"), v387));
    objc_msgSend(v501, "setObject:forKeyedSubscript:", v391, CFSTR("RxBadPLCPComparison"));

    v392 = WALogCategoryDefaultHandle();
    v393 = objc_claimAutoreleasedReturnValue(v392);
    if (os_log_type_enabled(v393, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446978;
      v513 = "-[CADataTransformEngine transformAndSubmitDNSMessageToCA:additionalInfo:timestamps:]_block_invoke";
      v514 = 1024;
      v515 = 735;
      v516 = 2048;
      v517 = v378;
      v518 = 2048;
      v519 = v386;
      _os_log_impl((void *)&_mh_execute_header, v393, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Invalid Comparison result for Rx BadPLCP before:%f after:%f", buf, 0x26u);
    }

  }
  else
  {
    objc_msgSend(v501, "setObject:forKeyedSubscript:", CFSTR("Same"), CFSTR("RxBadPLCPComparison"));
    objc_msgSend(v501, "setObject:forKeyedSubscript:", &off_1000E0380, CFSTR("RxBadPLCPDifference"));
  }
LABEL_104:
  v394 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v388, "dpsCounterSampleAtIndex:", v502));
  v395 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v394, "controllerStats"));
  v396 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v395, "aggregateMetrics"));
  v397 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v396, "kRxBadFCS")));
  objc_msgSend(v501, "setObject:forKeyedSubscript:", v397, CFSTR("RxBadFCSBeforeDecision"));

  v398 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v388, "dpsCounterSamples"));
  v399 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v398, "lastObject"));
  v400 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v399, "controllerStats"));
  v401 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v400, "aggregateMetrics"));
  v402 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v401, "kRxBadFCS")));
  objc_msgSend(v501, "setObject:forKeyedSubscript:", v402, CFSTR("RxBadFCSAfterDecision"));

  v403 = *(void **)(v500 + 40);
  v404 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v501, "objectForKeyedSubscript:", CFSTR("RxBadFCSBeforeDecision")));
  v405 = objc_msgSend(v404, "integerValue");
  v406 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v501, "objectForKeyedSubscript:", CFSTR("RxGoodPLCPBeforeDecision")));
  objc_msgSend(v403, "computePercentage:denomenator:", v405, objc_msgSend(v406, "integerValue"));
  v408 = v407;

  v409 = *(void **)(v500 + 40);
  v410 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v501, "objectForKeyedSubscript:", CFSTR("RxBadFCSAfterDecision")));
  v411 = objc_msgSend(v410, "integerValue");
  v412 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v501, "objectForKeyedSubscript:", CFSTR("RxGoodPLCPAfterDecision")));
  objc_msgSend(v409, "computePercentage:denomenator:", v411, objc_msgSend(v412, "integerValue"));
  v414 = v413;

  v415 = objc_msgSend(*(id *)(v500 + 40), "compareValues:second:", (unint64_t)v408, (unint64_t)v414);
  if (v415 == (id)2)
  {
    objc_msgSend(v501, "setObject:forKeyedSubscript:", CFSTR("AfterHigher"), CFSTR("RxBadFCSComparison"));
    v417 = v414 - v408;
  }
  else
  {
    if (v415 != (id)1)
    {
      v416 = v503;
      if (v415)
      {
        v419 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %lu)"), v415));
        objc_msgSend(v501, "setObject:forKeyedSubscript:", v419, CFSTR("RxBadFCSComparison"));

        v420 = WALogCategoryDefaultHandle();
        v421 = objc_claimAutoreleasedReturnValue(v420);
        if (os_log_type_enabled(v421, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446978;
          v513 = "-[CADataTransformEngine transformAndSubmitDNSMessageToCA:additionalInfo:timestamps:]_block_invoke";
          v514 = 1024;
          v515 = 759;
          v516 = 2048;
          v517 = v408;
          v518 = 2048;
          v519 = v414;
          _os_log_impl((void *)&_mh_execute_header, v421, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Invalid Comparison result for Rx BadFCS before:%f after:%f", buf, 0x26u);
        }

      }
      else
      {
        objc_msgSend(v501, "setObject:forKeyedSubscript:", CFSTR("Same"), CFSTR("RxBadFCSComparison"));
        objc_msgSend(v501, "setObject:forKeyedSubscript:", &off_1000E0380, CFSTR("RxBadFCSDifference"));
      }
      goto LABEL_114;
    }
    objc_msgSend(v501, "setObject:forKeyedSubscript:", CFSTR("BeforeHigher"), CFSTR("RxBadFCSComparison"));
    v417 = v408 - v414;
  }
  v418 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v417));
  objc_msgSend(v501, "setObject:forKeyedSubscript:", v418, CFSTR("RxBadFCSDifference"));

  v416 = v503;
LABEL_114:
  v422 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v416, "dpsCounterSampleAtIndex:", v502));
  v423 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v422, "controllerStats"));
  v424 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v423, "aggregateMetrics"));
  v425 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v424, "kRxCRCGlitch")));
  objc_msgSend(v501, "setObject:forKeyedSubscript:", v425, CFSTR("RxCRCGlitchBeforeDecision"));

  v426 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v416, "dpsCounterSamples"));
  v427 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v426, "lastObject"));
  v428 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v427, "controllerStats"));
  v429 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v428, "aggregateMetrics"));
  v430 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v429, "kRxCRCGlitch")));
  objc_msgSend(v501, "setObject:forKeyedSubscript:", v430, CFSTR("RxCRCGlitchAfterDecision"));

  v431 = *(void **)(v500 + 40);
  v432 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v501, "objectForKeyedSubscript:", CFSTR("RxCRCGlitchBeforeDecision")));
  v433 = objc_msgSend(v432, "integerValue");
  v434 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v501, "objectForKeyedSubscript:", CFSTR("RxGoodPLCPBeforeDecision")));
  v435 = (char *)objc_msgSend(v434, "integerValue");
  v436 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v501, "objectForKeyedSubscript:", CFSTR("RxBadPLCPBeforeDecision")));
  objc_msgSend(v431, "computePercentage:denomenator:", v433, &v435[(_QWORD)objc_msgSend(v436, "integerValue")]);
  v438 = v437;

  v439 = *(void **)(v500 + 40);
  v440 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v501, "objectForKeyedSubscript:", CFSTR("RxCRCGlitchAfterDecision")));
  v441 = objc_msgSend(v440, "integerValue");
  v442 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v501, "objectForKeyedSubscript:", CFSTR("RxGoodPLCPAfterDecision")));
  v443 = (char *)objc_msgSend(v442, "integerValue");
  v444 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v501, "objectForKeyedSubscript:", CFSTR("RxBadPLCPAfterDecision")));
  objc_msgSend(v439, "computePercentage:denomenator:", v441, &v443[(_QWORD)objc_msgSend(v444, "integerValue")]);
  v446 = v445;

  v447 = objc_msgSend(*(id *)(v500 + 40), "compareValues:second:", (unint64_t)v438, (unint64_t)v446);
  if (v447 == (id)2)
  {
    objc_msgSend(v501, "setObject:forKeyedSubscript:", CFSTR("AfterHigher"), CFSTR("RxCRCGlitchComparison"));
    v448 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v446 - v438));
    objc_msgSend(v501, "setObject:forKeyedSubscript:", v448, CFSTR("RxCRCGlitchDifference"));

    v5 = v499;
LABEL_121:
    v450 = v464;
    goto LABEL_125;
  }
  v5 = v499;
  if (v447 == (id)1)
  {
    objc_msgSend(v501, "setObject:forKeyedSubscript:", CFSTR("BeforeHigher"), CFSTR("RxCRCGlitchComparison"));
    v449 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v438 - v446));
    objc_msgSend(v501, "setObject:forKeyedSubscript:", v449, CFSTR("RxCRCGlitchDifference"));

    goto LABEL_120;
  }
  if (!v447)
  {
    objc_msgSend(v501, "setObject:forKeyedSubscript:", CFSTR("Same"), CFSTR("RxCRCGlitchComparison"));
    objc_msgSend(v501, "setObject:forKeyedSubscript:", &off_1000E0380, CFSTR("RxCRCGlitchDifference"));
LABEL_120:

    goto LABEL_121;
  }
  v451 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %lu)"), v447));
  objc_msgSend(v501, "setObject:forKeyedSubscript:", v451, CFSTR("RxCRCGlitchComparison"));

  v452 = WALogCategoryDefaultHandle();
  v453 = objc_claimAutoreleasedReturnValue(v452);
  v450 = v464;
  if (os_log_type_enabled(v453, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446978;
    v513 = "-[CADataTransformEngine transformAndSubmitDNSMessageToCA:additionalInfo:timestamps:]_block_invoke";
    v514 = 1024;
    v515 = 783;
    v516 = 2048;
    v517 = v438;
    v518 = 2048;
    v519 = v446;
    _os_log_impl((void *)&_mh_execute_header, v453, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Invalid Comparison result for Rx CRCGlitch before:%f after:%f", buf, 0x26u);
  }

LABEL_125:
  v454 = WALogCategoryDefaultHandle();
  v455 = objc_claimAutoreleasedReturnValue(v454);
  if (os_log_type_enabled(v455, OS_LOG_TYPE_DEFAULT))
  {
    v456 = objc_msgSend(v2, "count");
    *(_DWORD *)buf = 136446722;
    v513 = "-[CADataTransformEngine transformAndSubmitDNSMessageToCA:additionalInfo:timestamps:]_block_invoke";
    v514 = 1024;
    v515 = 787;
    v516 = 2048;
    v517 = *(double *)&v456;
    _os_log_impl((void *)&_mh_execute_header, v455, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:DNS metric dict fieldCount: %lu", buf, 0x1Cu);
  }

  v457 = v2;
  return v457;
}

id sub_100077D14(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  void *v37;
  id v38;
  void *v39;
  id v40;
  NSObject *v41;
  void *v42;
  id v43;
  void *v44;
  id v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  id v52;
  void *v53;
  id v54;
  void *v55;
  id v56;
  NSObject *v57;
  void *v58;
  id v59;
  void *v60;
  id v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  id v67;
  void *v68;
  id v69;
  void *v70;
  id v71;
  NSObject *v72;
  void *v73;
  id v74;
  void *v75;
  id v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  id v82;
  void *v83;
  id v84;
  void *v85;
  id v86;
  NSObject *v87;
  void *v88;
  id v89;
  void *v90;
  id v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  id v97;
  void *v98;
  id v99;
  void *v100;
  id v101;
  NSObject *v102;
  void *v103;
  id v104;
  void *v105;
  id v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  id v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  id v122;
  void *v123;
  id v124;
  void *v125;
  id v126;
  NSObject *v127;
  void *v128;
  id v129;
  void *v130;
  id v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  id v137;
  void *v138;
  id v139;
  void *v140;
  id v141;
  NSObject *v142;
  void *v143;
  id v144;
  void *v145;
  id v146;
  void *v147;
  void *v148;
  void *v149;
  void *v150;
  void *v151;
  id v152;
  void *v153;
  id v154;
  void *v155;
  id v156;
  NSObject *v157;
  void *v158;
  id v159;
  void *v160;
  id v161;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  id v167;
  void *v168;
  id v169;
  void *v170;
  id v171;
  NSObject *v172;
  void *v173;
  id v174;
  void *v175;
  id v176;
  void *v177;
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  id v182;
  void *v183;
  id v184;
  void *v185;
  void *v186;
  void *v187;
  void *v188;
  void *v189;
  id v190;
  void *v191;
  id v192;
  void *v193;
  void *v194;
  void *v195;
  void *v196;
  void *v197;
  id v198;
  void *v199;
  id v200;
  void *v201;
  void *v202;
  void *v203;
  void *v204;
  void *v205;
  id v206;
  void *v207;
  id v208;
  void *v209;
  void *v210;
  void *v211;
  void *v212;
  void *v213;
  id v214;
  void *v215;
  id v216;
  void *v217;
  void *v218;
  void *v219;
  void *v220;
  void *v221;
  id v222;
  void *v223;
  id v224;
  void *v225;
  void *v226;
  void *v227;
  void *v228;
  void *v229;
  id v230;
  void *v231;
  id v232;
  void *v233;
  void *v234;
  void *v235;
  void *v236;
  void *v237;
  id v238;
  void *v239;
  id v240;
  void *v241;
  void *v242;
  void *v243;
  void *v244;
  void *v245;
  id v246;
  void *v247;
  id v248;
  void *v249;
  void *v250;
  void *v251;
  void *v252;
  void *v253;
  id v254;
  void *v255;
  id v256;
  void *v257;
  void *v258;
  void *v259;
  void *v260;
  void *v261;
  void *v262;
  void *v263;
  void *v264;
  void *v265;
  _BYTE *v266;
  void *v267;
  void *v268;
  void *v269;
  _BYTE *v270;
  void *v271;
  void *v272;
  void *v273;
  void *v274;
  void *v275;
  id v276;
  id v277;
  void *v278;
  void *v279;
  void *v280;
  void *v281;
  id v282;
  void *v283;
  id v284;
  void *v285;
  void *v286;
  void *v287;
  void *v288;
  void *v289;
  id v290;
  void *v291;
  id v292;
  void *v293;
  void *v294;
  void *v295;
  void *v296;
  void *v297;
  void *v298;
  void *v299;
  void *v300;
  void *v301;
  void *v302;
  void *v303;
  void *v304;
  void *v305;
  void *v306;
  void *v307;
  void *v308;
  void *v309;
  void *v310;
  void *v311;
  void *v312;
  void *v313;
  void *v314;
  void *v315;
  void *v316;
  void *v317;
  NSObject *v318;
  id v319;
  NSObject *v320;
  id v321;
  id v322;
  id v324;
  uint64_t v325;
  NSObject *v326;
  void *v327;
  void *v328;
  uint8_t buf[4];
  const char *v330;
  __int16 v331;
  int v332;
  __int16 v333;
  id v334;
  __int16 v335;
  id v336;
  __int16 v337;
  void *v338;

  if (*(_QWORD *)(a1 + 32))
    v2 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:"));
  else
    v2 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v3 = (void *)v2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "instantiateAWDProtobufAndPopulateValues:", *(_QWORD *)(a1 + 48)));
  v5 = v4;
  if (v4)
  {
    v6 = v4;
    v327 = v5;
    if (objc_msgSend(v6, "hasSlowNotice"))
    {
      v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "slowNotice"));
      -[NSObject recoveryReason](v7, "recoveryReason");
    }
    else
    {
      v7 = 0;
    }
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", -[NSObject actionField](v7, "actionField")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v8, CFSTR("actionField"));

    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", -[NSObject recoveryAction](v7, "recoveryAction")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v9, CFSTR("recoveryAction"));

    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", -[NSObject recoveryReason](v7, "recoveryReason")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v10, CFSTR("recoveryReason"));

    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", -[NSObject userInput](v7, "userInput")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v11, CFSTR("userInput"));

    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", -[NSObject facetimeCallInProgress](v7, "facetimeCallInProgress")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v12, CFSTR("IsCriticalAppInUse"));

    if (objc_msgSend(v6, "usbEventsCount"))
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "usbEventAtIndex:", (char *)objc_msgSend(v6, "usbEventsCount") - 1));
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v13, "usbAction")));
      objc_msgSend(v3, "setObject:forKeyedSubscript:", v14, CFSTR("usbAction"));

      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "usbEventAtIndex:", (char *)objc_msgSend(v6, "usbEventsCount") - 1));
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v15, "usbTotal")));
      objc_msgSend(v3, "setObject:forKeyedSubscript:", v16, CFSTR("usbTotal"));

      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "usbEventAtIndex:", (char *)objc_msgSend(v6, "usbEventsCount") - 1));
      v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v17, "durationSinceUSBEventInSeconds")));
      objc_msgSend(v3, "setObject:forKeyedSubscript:", v18, CFSTR("timeSinceUSBEvent"));

      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "usbEventAtIndex:", (char *)objc_msgSend(v6, "usbEventsCount") - 1));
      v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v19, "smartCCADesenseSupported")));
      objc_msgSend(v3, "setObject:forKeyedSubscript:", v20, CFSTR("isSmartCCADesenseSupported"));

      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "usbEventAtIndex:", (char *)objc_msgSend(v6, "usbEventsCount") - 1));
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v21, "isVendorApple")));
      objc_msgSend(v3, "setObject:forKeyedSubscript:", v22, CFSTR("isUSBDeviceVendorApple"));

    }
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "linkQualSampleAtIndex:", 0));
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "linkQualSamples"));
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "lastObject"));

    v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v23, "cCA")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v26, CFSTR("CCABeforeRecovery"));

    v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v25, "cCA")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v27, CFSTR("CCAAfterRecovery"));

    v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", objc_msgSend(v23, "rSSI")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v28, CFSTR("RSSIBeforeRecovery"));

    v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", objc_msgSend(v25, "rSSI")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v29, CFSTR("RSSIAfterRecovery"));

    v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v23, "sNR")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v30, CFSTR("SNRBeforeRecovery"));

    v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v25, "sNR")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v31, CFSTR("SNRAfterRecovery"));

    v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v23, "txExpectedAMPDUDensity")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v32, CFSTR("TxExpectedAMPDUDensityBeforeRecovery"));

    v328 = v25;
    v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v25, "txExpectedAMPDUDensity")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v33, CFSTR("TxExpectedAMPDUDensityAfterRecovery"));

    v34 = *(void **)(a1 + 40);
    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("TxExpectedAMPDUDensityBeforeRecovery")));
    v36 = objc_msgSend(v35, "integerValue");
    v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("TxExpectedAMPDUDensityAfterRecovery")));
    v38 = objc_msgSend(v34, "compareValues:second:", v36, objc_msgSend(v37, "integerValue"));

    v326 = v7;
    if ((unint64_t)v38 >= 3)
      v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %lu)"), v38));
    else
      v39 = *(&off_1000CDB88 + (_QWORD)v38);
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v39, CFSTR("TxExpectedAMPDUDensityComparison"));

    v40 = WALogCategoryDefaultHandle();
    v41 = objc_claimAutoreleasedReturnValue(v40);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
    {
      v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("TxExpectedAMPDUDensityBeforeRecovery")));
      v43 = objc_msgSend(v42, "integerValue");
      v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("TxExpectedAMPDUDensityAfterRecovery")));
      v45 = objc_msgSend(v44, "integerValue");
      v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("TxExpectedAMPDUDensityComparison")));
      *(_DWORD *)buf = 136447234;
      v330 = "-[CADataTransformEngine transformAndSubmitSWMessageToCA:additionalInfo:timestamps:]_block_invoke";
      v331 = 1024;
      v332 = 859;
      v333 = 2048;
      v334 = v43;
      v335 = 2048;
      v336 = v45;
      v337 = 2112;
      v338 = v46;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:TxExpectedAMPDUDensity before:%ld after:%ld comparison:%@", buf, 0x30u);

    }
    v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v23, "aPTxDataStall")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v47, CFSTR("APTxDataStallBeforeRecovery"));

    v48 = v25;
    v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v25, "aPTxDataStall")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v49, CFSTR("APTxDataStallAfterRecovery"));

    v50 = *(void **)(a1 + 40);
    v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("APTxDataStallBeforeRecovery")));
    v52 = objc_msgSend(v51, "integerValue");
    v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("APTxDataStallAfterRecovery")));
    v54 = objc_msgSend(v50, "compareValues:second:", v52, objc_msgSend(v53, "integerValue"));

    if ((unint64_t)v54 >= 3)
      v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %lu)"), v54));
    else
      v55 = *(&off_1000CDB88 + (_QWORD)v54);
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v55, CFSTR("APTxDataStallComparison"));

    v56 = WALogCategoryDefaultHandle();
    v57 = objc_claimAutoreleasedReturnValue(v56);
    if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
    {
      v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("APTxDataStallBeforeRecovery")));
      v59 = objc_msgSend(v58, "integerValue");
      v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("APTxDataStallAfterRecovery")));
      v61 = objc_msgSend(v60, "integerValue");
      v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("APTxDataStallComparison")));
      *(_DWORD *)buf = 136447234;
      v330 = "-[CADataTransformEngine transformAndSubmitSWMessageToCA:additionalInfo:timestamps:]_block_invoke";
      v331 = 1024;
      v332 = 865;
      v333 = 2048;
      v334 = v59;
      v335 = 2048;
      v336 = v61;
      v337 = 2112;
      v338 = v62;
      _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:APTxStall before:%ld after:%ld comparison:%@", buf, 0x30u);

      v48 = v25;
    }

    v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v23, "rxAmpduTxBaMismatch")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v63, CFSTR("RxAmpduTxBaMismatchBeforeRecovery"));

    v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v48, "rxAmpduTxBaMismatch")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v64, CFSTR("RxAmpduTxBaMismatchAfterRecovery"));

    v65 = *(void **)(a1 + 40);
    v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("RxAmpduTxBaMismatchBeforeRecovery")));
    v67 = objc_msgSend(v66, "integerValue");
    v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("RxAmpduTxBaMismatchAfterRecovery")));
    v69 = objc_msgSend(v65, "compareValues:second:", v67, objc_msgSend(v68, "integerValue"));

    if ((unint64_t)v69 >= 3)
      v70 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %lu)"), v69));
    else
      v70 = *(&off_1000CDB88 + (_QWORD)v69);
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v70, CFSTR("RxAmpduTxBaMismatchComparison"));

    v71 = WALogCategoryDefaultHandle();
    v72 = objc_claimAutoreleasedReturnValue(v71);
    if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
    {
      v73 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("RxAmpduTxBaMismatchBeforeRecovery")));
      v74 = objc_msgSend(v73, "integerValue");
      v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("RxAmpduTxBaMismatchAfterRecovery")));
      v76 = objc_msgSend(v75, "integerValue");
      v77 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("RxAmpduTxBaMismatchComparison")));
      *(_DWORD *)buf = 136447234;
      v330 = "-[CADataTransformEngine transformAndSubmitSWMessageToCA:additionalInfo:timestamps:]_block_invoke";
      v331 = 1024;
      v332 = 871;
      v333 = 2048;
      v334 = v74;
      v335 = 2048;
      v336 = v76;
      v337 = 2112;
      v338 = v77;
      _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:RxAmpduTxBaMismatch before:%ld after:%ld comparison:%@", buf, 0x30u);

      v48 = v25;
    }

    v78 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v23, "symptomsFails")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v78, CFSTR("SymptomsFailsBeforeRecovery"));

    v79 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v48, "symptomsFails")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v79, CFSTR("SymptomsFailsAfterRecovery"));

    v80 = *(void **)(a1 + 40);
    v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("SymptomsFailsBeforeRecovery")));
    v82 = objc_msgSend(v81, "integerValue");
    v83 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("SymptomsFailsAfterRecovery")));
    v84 = objc_msgSend(v80, "compareValues:second:", v82, objc_msgSend(v83, "integerValue"));

    if ((unint64_t)v84 >= 3)
      v85 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %lu)"), v84));
    else
      v85 = *(&off_1000CDB88 + (_QWORD)v84);
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v85, CFSTR("SymptomsFailsComparison"));

    v86 = WALogCategoryDefaultHandle();
    v87 = objc_claimAutoreleasedReturnValue(v86);
    if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
    {
      v88 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("SymptomsFailsBeforeRecovery")));
      v89 = objc_msgSend(v88, "integerValue");
      v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("SymptomsFailsAfterRecovery")));
      v91 = objc_msgSend(v90, "integerValue");
      v92 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("SymptomsFailsComparison")));
      *(_DWORD *)buf = 136447234;
      v330 = "-[CADataTransformEngine transformAndSubmitSWMessageToCA:additionalInfo:timestamps:]_block_invoke";
      v331 = 1024;
      v332 = 877;
      v333 = 2048;
      v334 = v89;
      v335 = 2048;
      v336 = v91;
      v337 = 2112;
      v338 = v92;
      _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:SymptomsFails before:%ld after:%ld comparison:%@", buf, 0x30u);

      v48 = v25;
    }

    v93 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v23, "infraDutyCycle")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v93, CFSTR("InfraDutyCycleBeforeRecovery"));

    v94 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v48, "infraDutyCycle")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v94, CFSTR("InfraDutyCycleAfterRecovery"));

    v95 = *(void **)(a1 + 40);
    v96 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("InfraDutyCycleBeforeRecovery")));
    v97 = objc_msgSend(v96, "integerValue");
    v98 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("InfraDutyCycleAfterRecovery")));
    v99 = objc_msgSend(v95, "compareValues:second:", v97, objc_msgSend(v98, "integerValue"));

    if ((unint64_t)v99 >= 3)
      v100 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %lu)"), v99));
    else
      v100 = *(&off_1000CDB88 + (_QWORD)v99);
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v100, CFSTR("InfraDutyCycleComparison"));

    v101 = WALogCategoryDefaultHandle();
    v102 = objc_claimAutoreleasedReturnValue(v101);
    if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
    {
      v103 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("InfraDutyCycleBeforeRecovery")));
      v104 = objc_msgSend(v103, "integerValue");
      v105 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("InfraDutyCycleAfterRecovery")));
      v106 = objc_msgSend(v105, "integerValue");
      v107 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("InfraDutyCycleComparison")));
      *(_DWORD *)buf = 136447234;
      v330 = "-[CADataTransformEngine transformAndSubmitSWMessageToCA:additionalInfo:timestamps:]_block_invoke";
      v331 = 1024;
      v332 = 883;
      v333 = 2048;
      v334 = v104;
      v335 = 2048;
      v336 = v106;
      v337 = 2112;
      v338 = v107;
      _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:InfraDutyCycle before:%ld after:%ld comparison:%@", buf, 0x30u);

      v48 = v25;
    }

    v108 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v23, "lastScanReason")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v108, CFSTR("LastScanReasonBeforeRecovery"));

    v109 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v48, "lastScanReason")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v109, CFSTR("LastScanReasonAfterRecovery"));

    v110 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v23, "accessPointOUI")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v110, CFSTR("AccessPointOUIBeforeRecovery"));

    v111 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v48, "accessPointOUI")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v111, CFSTR("AccessPointOUIAfterRecovery"));

    v112 = objc_msgSend(v23, "accessPointOUI");
    if (v112 == objc_msgSend(v48, "accessPointOUI"))
      v113 = &__kCFBooleanTrue;
    else
      v113 = &__kCFBooleanFalse;
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v113, CFSTR("IsAccessPointOUISameAfterRecovery"));
    if (objc_msgSend(v23, "is2GBand"))
      v114 = &__kCFBooleanTrue;
    else
      v114 = &__kCFBooleanFalse;
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v114, CFSTR("Is2GBandBeforeRecovery"));
    if (objc_msgSend(v48, "is2GBand"))
      v115 = &__kCFBooleanTrue;
    else
      v115 = &__kCFBooleanFalse;
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v115, CFSTR("Is2GBandAfterRecovery"));
    if (objc_msgSend(v23, "isFGTraffic"))
      v116 = &__kCFBooleanTrue;
    else
      v116 = &__kCFBooleanFalse;
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v116, CFSTR("IsFGTrafficBeforeRecovery"));
    if (objc_msgSend(v48, "isFGTraffic"))
      v117 = &__kCFBooleanTrue;
    else
      v117 = &__kCFBooleanFalse;
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v117, CFSTR("IsFGTrafficAfterRecovery"));
    v118 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v23, "rxThroughput")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v118, CFSTR("RxThroughputBeforeRecovery"));

    v119 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v48, "rxThroughput")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v119, CFSTR("RxThroughputAfterRecovery"));

    v120 = *(void **)(a1 + 40);
    v121 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("RxThroughputBeforeRecovery")));
    v122 = objc_msgSend(v121, "integerValue");
    v123 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("RxThroughputAfterRecovery")));
    v124 = objc_msgSend(v120, "compareValues:second:", v122, objc_msgSend(v123, "integerValue"));

    if ((unint64_t)v124 >= 3)
      v125 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %lu)"), v124));
    else
      v125 = *(&off_1000CDB88 + (_QWORD)v124);
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v125, CFSTR("RxThroughputComparison"));

    v126 = WALogCategoryDefaultHandle();
    v127 = objc_claimAutoreleasedReturnValue(v126);
    if (os_log_type_enabled(v127, OS_LOG_TYPE_DEFAULT))
    {
      v128 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("RxThroughputBeforeRecovery")));
      v129 = objc_msgSend(v128, "integerValue");
      v130 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("RxThroughputAfterRecovery")));
      v131 = objc_msgSend(v130, "integerValue");
      v132 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("RxThroughputComparison")));
      *(_DWORD *)buf = 136447234;
      v330 = "-[CADataTransformEngine transformAndSubmitSWMessageToCA:additionalInfo:timestamps:]_block_invoke";
      v331 = 1024;
      v332 = 902;
      v333 = 2048;
      v334 = v129;
      v335 = 2048;
      v336 = v131;
      v337 = 2112;
      v338 = v132;
      _os_log_impl((void *)&_mh_execute_header, v127, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:RxThroughput before:%ld after:%ld comparison:%@", buf, 0x30u);

      v48 = v25;
    }

    v133 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v23, "baselineThroughput")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v133, CFSTR("BaselineThroughputBeforeRecovery"));

    v134 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v48, "baselineThroughput")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v134, CFSTR("BaselineThroughputAfterRecovery"));

    v135 = *(void **)(a1 + 40);
    v136 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("BaselineThroughputBeforeRecovery")));
    v137 = objc_msgSend(v136, "integerValue");
    v138 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("BaselineThroughputAfterRecovery")));
    v139 = objc_msgSend(v135, "compareValues:second:", v137, objc_msgSend(v138, "integerValue"));

    if ((unint64_t)v139 >= 3)
      v140 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %lu)"), v139));
    else
      v140 = *(&off_1000CDB88 + (_QWORD)v139);
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v140, CFSTR("BaselineThroughputComparison"));

    v141 = WALogCategoryDefaultHandle();
    v142 = objc_claimAutoreleasedReturnValue(v141);
    if (os_log_type_enabled(v142, OS_LOG_TYPE_DEFAULT))
    {
      v143 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("BaselineThroughputBeforeRecovery")));
      v144 = objc_msgSend(v143, "integerValue");
      v145 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("BaselineThroughputAfterRecovery")));
      v146 = objc_msgSend(v145, "integerValue");
      v147 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("BaselineThroughputComparison")));
      *(_DWORD *)buf = 136447234;
      v330 = "-[CADataTransformEngine transformAndSubmitSWMessageToCA:additionalInfo:timestamps:]_block_invoke";
      v331 = 1024;
      v332 = 908;
      v333 = 2048;
      v334 = v144;
      v335 = 2048;
      v336 = v146;
      v337 = 2112;
      v338 = v147;
      _os_log_impl((void *)&_mh_execute_header, v142, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:BaselineThroughput before:%ld after:%ld comparison:%@", buf, 0x30u);

      v48 = v25;
    }

    v148 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v23, "testThroughput")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v148, CFSTR("TestThroughputBeforeRecovery"));

    v149 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v48, "testThroughput")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v149, CFSTR("TestThroughputAfterRecovery"));

    v150 = *(void **)(a1 + 40);
    v151 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("TestThroughputBeforeRecovery")));
    v152 = objc_msgSend(v151, "integerValue");
    v153 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("TestThroughputAfterRecovery")));
    v154 = objc_msgSend(v150, "compareValues:second:", v152, objc_msgSend(v153, "integerValue"));

    if ((unint64_t)v154 >= 3)
      v155 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %lu)"), v154));
    else
      v155 = *(&off_1000CDB88 + (_QWORD)v154);
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v155, CFSTR("TestThroughputComparison"));

    v156 = WALogCategoryDefaultHandle();
    v157 = objc_claimAutoreleasedReturnValue(v156);
    if (os_log_type_enabled(v157, OS_LOG_TYPE_DEFAULT))
    {
      v158 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("TestThroughputBeforeRecovery")));
      v159 = objc_msgSend(v158, "integerValue");
      v160 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("TestThroughputAfterRecovery")));
      v161 = objc_msgSend(v160, "integerValue");
      v162 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("TestThroughputComparison")));
      *(_DWORD *)buf = 136447234;
      v330 = "-[CADataTransformEngine transformAndSubmitSWMessageToCA:additionalInfo:timestamps:]_block_invoke";
      v331 = 1024;
      v332 = 914;
      v333 = 2048;
      v334 = v159;
      v335 = 2048;
      v336 = v161;
      v337 = 2112;
      v338 = v162;
      _os_log_impl((void *)&_mh_execute_header, v157, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:TestThroughput before:%ld after:%ld comparison:%@", buf, 0x30u);

      v48 = v25;
    }

    v163 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v23, "txAMPDUDensity")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v163, CFSTR("TxAMPDUDensityBeforeRecovery"));

    v164 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v48, "txAMPDUDensity")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v164, CFSTR("TxAMPDUDensityAfterRecovery"));

    v165 = *(void **)(a1 + 40);
    v166 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("TxAMPDUDensityBeforeRecovery")));
    v167 = objc_msgSend(v166, "integerValue");
    v168 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("TxAMPDUDensityAfterRecovery")));
    v169 = objc_msgSend(v165, "compareValues:second:", v167, objc_msgSend(v168, "integerValue"));

    if ((unint64_t)v169 >= 3)
      v170 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %lu)"), v169));
    else
      v170 = *(&off_1000CDB88 + (_QWORD)v169);
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v170, CFSTR("TxAMPDUDensityComparison"));

    v171 = WALogCategoryDefaultHandle();
    v172 = objc_claimAutoreleasedReturnValue(v171);
    if (os_log_type_enabled(v172, OS_LOG_TYPE_DEFAULT))
    {
      v173 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("TxAMPDUDensityBeforeRecovery")));
      v174 = objc_msgSend(v173, "integerValue");
      v175 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("TxAMPDUDensityAfterRecovery")));
      v176 = objc_msgSend(v175, "integerValue");
      v177 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("TxAMPDUDensityComparison")));
      *(_DWORD *)buf = 136447234;
      v330 = "-[CADataTransformEngine transformAndSubmitSWMessageToCA:additionalInfo:timestamps:]_block_invoke";
      v331 = 1024;
      v332 = 920;
      v333 = 2048;
      v334 = v174;
      v335 = 2048;
      v336 = v176;
      v337 = 2112;
      v338 = v177;
      _os_log_impl((void *)&_mh_execute_header, v172, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:TxAMPDU before:%ld after:%ld comparison:%@", buf, 0x30u);

      v48 = v25;
    }

    objc_msgSend(*(id *)(a1 + 40), "computePercentage:denomenator:", (char *)objc_msgSend(v23, "rxFCSErrs") + (_QWORD)objc_msgSend(v23, "rxPLCPErrs"), (char *)objc_msgSend(v23, "rxFCSErrs")+ (_QWORD)objc_msgSend(v23, "rxPLCPErrs")+ (unint64_t)objc_msgSend(v23, "rxGoodPlcps"));
    v178 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v178, CFSTR("PhyErrPercentBeforeRecovery"));

    objc_msgSend(*(id *)(a1 + 40), "computePercentage:denomenator:", (char *)objc_msgSend(v48, "rxFCSErrs") + (_QWORD)objc_msgSend(v48, "rxPLCPErrs"), (char *)objc_msgSend(v48, "rxFCSErrs")+ (_QWORD)objc_msgSend(v48, "rxPLCPErrs")+ (unint64_t)objc_msgSend(v48, "rxGoodPlcps"));
    v179 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v179, CFSTR("PhyErrPercentAfterRecovery"));

    v180 = *(void **)(a1 + 40);
    v181 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("PhyErrPercentBeforeRecovery")));
    v182 = objc_msgSend(v181, "integerValue");
    v183 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("PhyErrPercentBeforeRecovery")));
    v184 = objc_msgSend(v180, "compareValues:second:", v182, objc_msgSend(v183, "integerValue"));

    if ((unint64_t)v184 >= 3)
      v185 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %lu)"), v184));
    else
      v185 = *(&off_1000CDB88 + (_QWORD)v184);
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v185, CFSTR("PhyErrPercentComparison"));

    objc_msgSend(*(id *)(a1 + 40), "computePercentage:denomenator:", objc_msgSend(v23, "txCompPkts"), objc_msgSend(v23, "txSubPkts"));
    v186 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v186, CFSTR("CompletionPercentBeforeRecovery"));

    objc_msgSend(*(id *)(a1 + 40), "computePercentage:denomenator:", objc_msgSend(v48, "txCompPkts"), objc_msgSend(v48, "txSubPkts"));
    v187 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v187, CFSTR("CompletionPercentAfterRecovery"));

    v188 = *(void **)(a1 + 40);
    v189 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("CompletionPercentBeforeRecovery")));
    v190 = objc_msgSend(v189, "integerValue");
    v191 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("CompletionPercentAfterRecovery")));
    v192 = objc_msgSend(v188, "compareValues:second:", v190, objc_msgSend(v191, "integerValue"));

    if ((unint64_t)v192 >= 3)
      v193 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %lu)"), v192));
    else
      v193 = *(&off_1000CDB88 + (_QWORD)v192);
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v193, CFSTR("CompletionPercentComparison"));

    objc_msgSend(*(id *)(a1 + 40), "computePercentage:denomenator:", objc_msgSend(v23, "txRetries"), objc_msgSend(v23, "txFrames"));
    v194 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v194, CFSTR("TxRetryPercentBeforeRecovery"));

    objc_msgSend(*(id *)(a1 + 40), "computePercentage:denomenator:", objc_msgSend(v48, "txRetries"), objc_msgSend(v48, "txFrames"));
    v195 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v195, CFSTR("TxRetryPercentAfterRecovery"));

    v196 = *(void **)(a1 + 40);
    v197 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("TxRetryPercentBeforeRecovery")));
    v198 = objc_msgSend(v197, "integerValue");
    v199 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("TxRetryPercentAfterRecovery")));
    v200 = objc_msgSend(v196, "compareValues:second:", v198, objc_msgSend(v199, "integerValue"));

    if ((unint64_t)v200 >= 3)
      v201 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %lu)"), v200));
    else
      v201 = *(&off_1000CDB88 + (_QWORD)v200);
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v201, CFSTR("TxRetryPercentComparison"));

    objc_msgSend(*(id *)(a1 + 40), "computePercentage:denomenator:", objc_msgSend(v23, "txFails"), objc_msgSend(v23, "txFrames"));
    v202 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v202, CFSTR("TxFailPercentBeforeRecovery"));

    objc_msgSend(*(id *)(a1 + 40), "computePercentage:denomenator:", objc_msgSend(v48, "txFails"), objc_msgSend(v48, "txFrames"));
    v203 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v203, CFSTR("TxFailPercentAfterRecovery"));

    v204 = *(void **)(a1 + 40);
    v205 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("TxFailPercentBeforeRecovery")));
    v206 = objc_msgSend(v205, "integerValue");
    v207 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("TxFailPercentAfterRecovery")));
    v208 = objc_msgSend(v204, "compareValues:second:", v206, objc_msgSend(v207, "integerValue"));

    if ((unint64_t)v208 >= 3)
      v209 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %lu)"), v208));
    else
      v209 = *(&off_1000CDB88 + (_QWORD)v208);
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v209, CFSTR("TxFailPercentComparison"));

    v210 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v23, "rxOvflErrs")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v210, CFSTR("RxOvflErrsBeforeRecovery"));

    v211 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v48, "rxOvflErrs")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v211, CFSTR("RxOvflErrsAfterRecovery"));

    v212 = *(void **)(a1 + 40);
    v213 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("RxOvflErrsBeforeRecovery")));
    v214 = objc_msgSend(v213, "integerValue");
    v215 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("RxOvflErrsAfterRecovery")));
    v216 = objc_msgSend(v212, "compareValues:second:", v214, objc_msgSend(v215, "integerValue"));

    if ((unint64_t)v216 >= 3)
      v217 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %lu)"), v216));
    else
      v217 = *(&off_1000CDB88 + (_QWORD)v216);
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v217, CFSTR("RxOvflErrsComparison"));

    v218 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v23, "rxReplayErrs")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v218, CFSTR("RxReplayErrsBeforeRecovery"));

    v219 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v48, "rxReplayErrs")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v219, CFSTR("RxReplayErrsAfterRecovery"));

    v220 = *(void **)(a1 + 40);
    v221 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("RxReplayErrsBeforeRecovery")));
    v222 = objc_msgSend(v221, "integerValue");
    v223 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("RxReplayErrsAfterRecovery")));
    v224 = objc_msgSend(v220, "compareValues:second:", v222, objc_msgSend(v223, "integerValue"));

    if ((unint64_t)v224 >= 3)
      v225 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %lu)"), v224));
    else
      v225 = *(&off_1000CDB88 + (_QWORD)v224);
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v225, CFSTR("RxReplayErrsComparison"));

    v226 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v23, "rxDecryErrs")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v226, CFSTR("RxDecryErrsBeforeRecovery"));

    v227 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v48, "rxDecryErrs")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v227, CFSTR("RxDecryErrsAfterRecovery"));

    v228 = *(void **)(a1 + 40);
    v229 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("RxDecryErrsBeforeRecovery")));
    v230 = objc_msgSend(v229, "integerValue");
    v231 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("RxDecryErrsAfterRecovery")));
    v232 = objc_msgSend(v228, "compareValues:second:", v230, objc_msgSend(v231, "integerValue"));

    if ((unint64_t)v232 >= 3)
      v233 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %lu)"), v232));
    else
      v233 = *(&off_1000CDB88 + (_QWORD)v232);
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v233, CFSTR("RxDecryErrsComparison"));

    v234 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v23, "rxCRSErrs")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v234, CFSTR("RxCRSErrsBeforeRecovery"));

    v235 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v48, "rxCRSErrs")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v235, CFSTR("RxCRSErrsAfterRecovery"));

    v236 = *(void **)(a1 + 40);
    v237 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("RxCRSErrsBeforeRecovery")));
    v238 = objc_msgSend(v237, "integerValue");
    v239 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("RxCRSErrsAfterRecovery")));
    v240 = objc_msgSend(v236, "compareValues:second:", v238, objc_msgSend(v239, "integerValue"));

    if ((unint64_t)v240 >= 3)
      v241 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %lu)"), v240));
    else
      v241 = *(&off_1000CDB88 + (_QWORD)v240);
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v241, CFSTR("RxCRSErrsComparison"));

    v242 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v23, "txPhyRate")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v242, CFSTR("TxPhyRateBeforeRecovery"));

    v243 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v48, "txPhyRate")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v243, CFSTR("TxPhyRateAfterRecovery"));

    v244 = *(void **)(a1 + 40);
    v245 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("TxPhyRateBeforeRecovery")));
    v246 = objc_msgSend(v245, "integerValue");
    v247 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("TxPhyRateAfterRecovery")));
    v248 = objc_msgSend(v244, "compareValues:second:", v246, objc_msgSend(v247, "integerValue"));

    if ((unint64_t)v248 >= 3)
      v249 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %lu)"), v248));
    else
      v249 = *(&off_1000CDB88 + (_QWORD)v248);
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v249, CFSTR("TxPhyRateComparison"));

    v250 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v23, "rxPhyRate")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v250, CFSTR("RxPhyRateBeforeRecovery"));

    v251 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v48, "rxPhyRate")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v251, CFSTR("RxPhyRateAfterRecovery"));

    v252 = *(void **)(a1 + 40);
    v253 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("RxPhyRateBeforeRecovery")));
    v254 = objc_msgSend(v253, "integerValue");
    v255 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("RxPhyRateAfterRecovery")));
    v256 = objc_msgSend(v252, "compareValues:second:", v254, objc_msgSend(v255, "integerValue"));

    v325 = a1;
    if ((unint64_t)v256 >= 3)
      v257 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %lu)"), v256));
    else
      v257 = *(&off_1000CDB88 + (_QWORD)v256);
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v257, CFSTR("RxPhyRateComparison"));

    v258 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v23, "outputThroughput")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v258, CFSTR("OutputThroughputBeforeRecovery"));

    v259 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v48, "outputThroughput")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v259, CFSTR("OutputThroughputAfterRecovery"));

    v260 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v23, "inputThroughput")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v260, CFSTR("InputThroughputBeforeRecovery"));

    v261 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v48, "inputThroughput")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v261, CFSTR("InputThroughputAfterRecovery"));

    v262 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v23, "expectedThroughput")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v262, CFSTR("ExpectedThroughputBeforeRecovery"));

    v263 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v48, "expectedThroughput")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v263, CFSTR("ExpectedThroughputAfterRecovery"));

    v264 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("OutputThroughputBeforeRecovery")));
    v265 = v48;
    v266 = objc_msgSend(v264, "integerValue");
    v267 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("InputThroughputBeforeRecovery")));
    v268 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v266 - (_BYTE *)objc_msgSend(v267, "integerValue")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v268, CFSTR("OutputInputThroughputDiffBeforeRecovery"));

    v269 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("ExpectedThroughputBeforeRecovery")));
    v270 = objc_msgSend(v269, "integerValue");
    v271 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("OutputThroughputBeforeRecovery")));
    v272 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v270 - (_BYTE *)objc_msgSend(v271, "integerValue")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v272, CFSTR("ExpectedOutputThroughputDiffBeforeRecovery"));

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v23, "rxDupErrs"), objc_msgSend(v23, "rxFrames"));
    v273 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v273, CFSTR("RxDupPercentBeforeRecovery"));

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v23, "rxRetries"), objc_msgSend(v23, "rxRetries"));
    v274 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v274, CFSTR("RxRetriesPercentBeforeRecovery"));

    v275 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v23, "timeSinceLastRecovery")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v275, CFSTR("TimeSinceLastSWRecovery"));

    v276 = objc_msgSend(v23, "measurementDurMS");
    v277 = objc_msgSend(v265, "measurementDurMS");
    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v23, "maxQueueFullDurMS"), v276);
    v278 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v278, CFSTR("MaxQueueFullDurMSPercentBeforeRecovery"));

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v265, "maxQueueFullDurMS"), v277);
    v279 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v279, CFSTR("MaxQueueFullDurMSPercentAfterRecovery"));

    v280 = *(void **)(v325 + 40);
    v281 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("MaxQueueFullDurMSPercentBeforeRecovery")));
    v282 = objc_msgSend(v281, "integerValue");
    v283 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("MaxQueueFullDurMSPercentAfterRecovery")));
    v284 = objc_msgSend(v280, "compareValues:second:", v282, objc_msgSend(v283, "integerValue"));

    if ((unint64_t)v284 >= 3)
      v285 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %lu)"), v284));
    else
      v285 = *(&off_1000CDB88 + (_QWORD)v284);
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v285, CFSTR("MaxQueueFullDurMSPercentComparison"));

    v286 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v23, "avgTxLatencyMS")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v286, CFSTR("AvgTxLatencyMSBeforeRecovery"));

    v287 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v328, "avgTxLatencyMS")));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v287, CFSTR("AvgTxLatencyMSAfterRecovery"));

    v288 = *(void **)(v325 + 40);
    v289 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("AvgTxLatencyMSBeforeRecovery")));
    v290 = objc_msgSend(v289, "integerValue");
    v291 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("AvgTxLatencyMSAfterRecovery")));
    v292 = objc_msgSend(v288, "compareValues:second:", v290, objc_msgSend(v291, "integerValue"));

    if ((unint64_t)v292 >= 3)
      v293 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %lu)"), v292));
    else
      v293 = *(&off_1000CDB88 + (_QWORD)v292);
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v293, CFSTR("AvgTxLatencyMSComparison"));

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v23, "rC1CoexDurationMS"), v276);
    v294 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v294, CFSTR("RC1CoexDurationMSPercentBeforeRecovery"));

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v328, "rC1CoexDurationMS"), v277);
    v295 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v295, CFSTR("RC1CoexDurationMSPercentAfterRecovery"));

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v23, "rC2CoexDurationMS"), v276);
    v296 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v296, CFSTR("RC2CoexDurationMSPercentBeforeRecovery"));

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v328, "rC2CoexDurationMS"), v277);
    v297 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v297, CFSTR("RC2CoexDurationMSPercentAfterRecovery"));

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v23, "lTECoexDurationMS"), v276);
    v298 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v298, CFSTR("LTECoexDurationMSPercentBeforeRecovery"));

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v328, "lTECoexDurationMS"), v277);
    v299 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v299, CFSTR("LTECoexDurationMSPercentAfterRecovery"));

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v23, "tVPMActiveDurationMS"), v276);
    v300 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v300, CFSTR("TVPMActiveDurationMSPercentBeforeRecovery"));

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v328, "tVPMActiveDurationMS"), v277);
    v301 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v301, CFSTR("TVPMActiveDurationMSPercentAfterRecovery"));

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v23, "availWLANDurMS"), v276);
    v302 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v302, CFSTR("AvailWLANDurMSPercentBeforeRecovery"));

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v328, "availWLANDurMS"), v277);
    v303 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v303, CFSTR("AvailWLANDurMSPercentAfterRecovery"));

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v23, "availWLANRxDurMS"), v276);
    v304 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v304, CFSTR("AvailWLANRxDurMSPercentBeforeRecovery"));

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v328, "availWLANRxDurMS"), v277);
    v305 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v305, CFSTR("AvailWLANRxDurMSPercentAfterRecovery"));

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v23, "availWLANTxDurMS"), v276);
    v306 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v306, CFSTR("AvailWLANTxDurMSPercentBeforeRecovery"));

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v328, "availWLANTxDurMS"), v277);
    v307 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v307, CFSTR("AvailWLANTxDurMSPercentAfterRecovery"));

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v23, "concurrentIntDurMS"), v276);
    v308 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v308, CFSTR("ConcurrentIntDurMSPercentBeforeRecovery"));

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v328, "concurrentIntDurMS"), v277);
    v309 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v309, CFSTR("ConcurrentIntDurMSPercentAfterRecovery"));

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v23, "phyTxActivityDurMS"), v276);
    v310 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v310, CFSTR("PhyTxActivityDurMSPercentBeforeRecovery"));

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v328, "phyTxActivityDurMS"), v277);
    v311 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v311, CFSTR("PhyTxActivityDurMSPercentAfterRecovery"));

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v23, "phyRxActivityDurMS"), v276);
    v312 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v312, CFSTR("PhyRxActivityDurMSPercentBeforeRecovery"));

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v328, "phyRxActivityDurMS"), v277);
    v313 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v313, CFSTR("PhyRxActivityDurMSPercentAfterRecovery"));

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v23, "offChanDurMS"), v276);
    v314 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v314, CFSTR("OffChanDurMSPercentBeforeRecovery"));

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v328, "offChanDurMS"), v277);
    v315 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v315, CFSTR("OffChanDurMSPercentAfterRecovery"));

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v23, "bTAntennaDurMS"), v276);
    v316 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v316, CFSTR("BTAntennaDurMSPercentBeforeRecovery"));

    objc_msgSend(*(id *)(v325 + 40), "computePercentage:denomenator:", objc_msgSend(v328, "bTAntennaDurMS"), v277);
    v317 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v317, CFSTR("BTAntennaDurMSPercentAfterRecovery"));

    v318 = v326;
    v5 = v327;
  }
  else
  {
    v324 = WALogCategoryDefaultHandle();
    v318 = objc_claimAutoreleasedReturnValue(v324);
    if (os_log_type_enabled(v318, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v330 = "-[CADataTransformEngine transformAndSubmitSWMessageToCA:additionalInfo:timestamps:]_block_invoke";
      v331 = 1024;
      v332 = 824;
      _os_log_impl((void *)&_mh_execute_header, v318, OS_LOG_TYPE_ERROR, "%{public}s::%d:Error creating SW data to send to CA", buf, 0x12u);
    }
  }

  v319 = WALogCategoryDefaultHandle();
  v320 = objc_claimAutoreleasedReturnValue(v319);
  if (os_log_type_enabled(v320, OS_LOG_TYPE_DEFAULT))
  {
    v321 = objc_msgSend(v3, "count");
    *(_DWORD *)buf = 136446722;
    v330 = "-[CADataTransformEngine transformAndSubmitSWMessageToCA:additionalInfo:timestamps:]_block_invoke";
    v331 = 1024;
    v332 = 1038;
    v333 = 2048;
    v334 = v321;
    _os_log_impl((void *)&_mh_execute_header, v320, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:SW metricDict fieldCount: %lu", buf, 0x1Cu);
  }

  v322 = v3;
  return v322;
}

void sub_10007B268(id a1)
{
  WAActivityManager *v1;
  void *v2;

  v1 = objc_alloc_init(WAActivityManager);
  v2 = (void *)qword_1000ED0B8;
  qword_1000ED0B8 = (uint64_t)v1;

}

void sub_10007B8D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  NSObject *v6;
  _QWORD v7[5];
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10007B9F0;
  v7[3] = &unk_1000CDBC8;
  v7[4] = *(_QWORD *)(a1 + 32);
  v2 = objc_claimAutoreleasedReturnValue(+[NSTimer scheduledTimerWithTimeInterval:repeats:block:](NSTimer, "scheduledTimerWithTimeInterval:repeats:block:", 1, v7, 5.0));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 16);
  *(_QWORD *)(v3 + 16) = v2;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 24) = 0;
  v5 = WALogActivityManagerHandle();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    v9 = "-[WAActivityManager debugTimer]_block_invoke";
    v10 = 1024;
    v11 = 160;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:configured _periodicActiveListTimer", buf, 0x12u);
  }

}

void sub_10007B9F0(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD block[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 64);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10007BA48;
  block[3] = &unk_1000CCDB0;
  block[4] = v1;
  dispatch_async(v2, block);
}

void sub_10007BA48(uint64_t a1)
{
  id v1;
  id v2;
  NSObject *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  uint64_t v9;
  id v10;
  NSObject *v11;
  uint64_t description;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint8_t v17[128];
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  id v23;

  v1 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "copy");
  v2 = WALogActivityManagerHandle();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    v19 = "-[WAActivityManager debugTimer]_block_invoke_3";
    v20 = 1024;
    v21 = 149;
    v22 = 2048;
    v23 = objc_msgSend(v1, "count");
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:activeTransactions %lu", buf, 0x1Cu);
  }

  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v4 = v1;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v14 != v7)
          objc_enumerationMutation(v4);
        v9 = *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)i);
        v10 = WALogActivityManagerHandle();
        v11 = objc_claimAutoreleasedReturnValue(v10);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          description = os_transaction_get_description(v9);
          *(_DWORD *)buf = 136446722;
          v19 = "-[WAActivityManager debugTimer]_block_invoke";
          v20 = 1024;
          v21 = 152;
          v22 = 2080;
          v23 = (id)description;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:activeTransaction %s", buf, 0x1Cu);
        }

      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v6);
  }

}

void sub_10007BCE4(_QWORD *a1)
{
  _QWORD *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  id v12;
  NSObject *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  int v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  id v24;
  __int16 v25;
  uint64_t v26;

  v2 = (_QWORD *)a1[4];
  if (!v2[2])
  {
    v3 = objc_msgSend(v2, "debugTimerEnabled");
    v2 = (_QWORD *)a1[4];
    if (v3)
    {
      objc_msgSend(v2, "debugTimer");
      v2 = (_QWORD *)a1[4];
    }
  }
  if (!v2[9])
  {
    v4 = objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
    v5 = a1[4];
    v6 = *(void **)(v5 + 80);
    *(_QWORD *)(v5 + 80) = v4;

    v2 = (_QWORD *)a1[4];
  }
  v7 = (void *)v2[1];
  if (v7 && objc_msgSend(v7, "isValid"))
  {
    v8 = WALogActivityManagerHandle();
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v17 = 136446466;
      v18 = "-[WAActivityManager osTransactionCreate:transaction:]_block_invoke";
      v19 = 1024;
      v20 = 184;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:osTransactionCreate, timer was running, invalidating and freeing", (uint8_t *)&v17, 0x12u);
    }

    objc_msgSend(*(id *)(a1[4] + 8), "invalidate");
    v10 = a1[4];
    v11 = *(void **)(v10 + 8);
    *(_QWORD *)(v10 + 8) = 0;

  }
  objc_msgSend(*(id *)(a1[4] + 32), "addObject:", a1[5]);
  ++*(_QWORD *)(a1[4] + 72);
  v12 = WALogActivityManagerHandle();
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v14 = a1[6];
    v15 = objc_msgSend(*(id *)(a1[4] + 32), "count");
    v16 = *(_QWORD *)(a1[4] + 72);
    v17 = 136447234;
    v18 = "-[WAActivityManager osTransactionCreate:transaction:]_block_invoke";
    v19 = 1024;
    v20 = 192;
    v21 = 2080;
    v22 = v14;
    v23 = 2048;
    v24 = v15;
    v25 = 2048;
    v26 = v16;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:osTransactionCreate %s, active count is now %lu, total started is now %lu", (uint8_t *)&v17, 0x30u);
  }

}

void sub_10007C034(_QWORD *a1)
{
  id v2;
  NSObject *v3;
  uint64_t description;
  id v5;
  NSObject *v6;
  uint64_t v7;
  const __CFString *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  int v14;
  double v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  _BOOL4 v19;
  uint64_t v20;
  id v21;
  NSObject *v22;
  _QWORD v23[6];
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  const __CFString *v29;
  __int16 v30;
  const __CFString *v31;

  v2 = WALogActivityManagerHandle();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    description = os_transaction_get_description(a1[4]);
    *(_DWORD *)buf = 136446722;
    v25 = "-[WAActivityManager osTransactionComplete:]_block_invoke";
    v26 = 1024;
    v27 = 208;
    v28 = 2080;
    v29 = (const __CFString *)description;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:osTransactionComplete %s", buf, 0x1Cu);
  }

  if ((objc_msgSend(*(id *)(a1[5] + 32), "containsObject:", a1[4]) & 1) == 0)
  {
    v5 = WALogActivityManagerHandle();
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = os_transaction_get_description(a1[4]);
      v8 = (const __CFString *)objc_msgSend(*(id *)(a1[5] + 32), "count");
      *(_DWORD *)buf = 136446978;
      v25 = "-[WAActivityManager osTransactionComplete:]_block_invoke";
      v26 = 1024;
      v27 = 211;
      v28 = 2080;
      v29 = (const __CFString *)v7;
      v30 = 2048;
      v31 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%{public}s::%d:osTransactionComplete %s, TRANSACTION NOT FOUND, active count before completing %lu", buf, 0x26u);
    }

    *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
  }
  objc_msgSend(*(id *)(a1[5] + 32), "removeObject:", a1[4]);
  ++*(_QWORD *)(a1[5] + 88);
  if (!objc_msgSend(*(id *)(a1[5] + 32), "count"))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "persistentDomainForName:", CFSTR("com.apple.wifianalyticsd")));

    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKey:", CFSTR("eager-exit-timeout")));
    if (v11)
    {
      v12 = WALogActivityManagerHandle();
      v13 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446978;
        v25 = "-[WAActivityManager osTransactionComplete:]_block_invoke";
        v26 = 1024;
        v27 = 224;
        v28 = 2112;
        v29 = CFSTR("com.apple.wifianalyticsd");
        v30 = 2112;
        v31 = CFSTR("eager-exit-timeout");
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Found preference value in domain: %@ key: %@", buf, 0x26u);
      }

      v14 = objc_msgSend(v11, "intValue");
      if (v14 < 1)
      {
        v21 = WALogActivityManagerHandle();
        v22 = objc_claimAutoreleasedReturnValue(v21);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          v25 = "-[WAActivityManager osTransactionComplete:]_block_invoke";
          v26 = 1024;
          v27 = 263;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:_active_transactions empty, eager exit timer disabled via defaults write", buf, 0x12u);
        }

        goto LABEL_26;
      }
      v15 = (double)v14;
    }
    else
    {
      v15 = 300.0;
    }
    v16 = *(_QWORD *)(a1[5] + 8);
    v17 = WALogActivityManagerHandle();
    v18 = objc_claimAutoreleasedReturnValue(v17);
    v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    if (v16)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446722;
        v25 = "-[WAActivityManager osTransactionComplete:]_block_invoke";
        v26 = 1024;
        v27 = 232;
        v28 = 2048;
        v29 = *(const __CFString **)&v15;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:_active_transactions empty, extending running eager exit timer to %f seconds", buf, 0x1Cu);
      }

      if (objc_msgSend(*(id *)(a1[5] + 8), "isValid"))
        objc_msgSend(*(id *)(a1[5] + 8), "invalidate");
      v20 = a1[5];
      v18 = *(NSObject **)(v20 + 8);
      *(_QWORD *)(v20 + 8) = 0;
    }
    else if (v19)
    {
      *(_DWORD *)buf = 136446722;
      v25 = "-[WAActivityManager osTransactionComplete:]_block_invoke";
      v26 = 1024;
      v27 = 230;
      v28 = 2048;
      v29 = *(const __CFString **)&v15;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:_active_transactions empty, configuring eager exit timer in %f seconds", buf, 0x1Cu);
    }

    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    v23[2] = sub_10007C4B0;
    v23[3] = &unk_1000CD698;
    v23[4] = a1[5];
    *(double *)&v23[5] = v15;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v23);
LABEL_26:

  }
}

void sub_10007C4B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD v6[6];

  v2 = *(_QWORD *)(a1 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10007C538;
  v6[3] = &unk_1000CDC18;
  v6[4] = *(_QWORD *)(a1 + 32);
  v6[5] = v2;
  v3 = objc_claimAutoreleasedReturnValue(+[NSTimer scheduledTimerWithTimeInterval:repeats:block:](NSTimer, "scheduledTimerWithTimeInterval:repeats:block:", 0, v6));
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 8);
  *(_QWORD *)(v4 + 8) = v3;

}

void sub_10007C538(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  id v11;
  NSObject *v12;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  double v20;

  v2 = WALogActivityManagerHandle();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(v4 + 88);
    objc_msgSend(*(id *)(v4 + 80), "timeIntervalSinceNow");
    v13 = 136446978;
    v14 = "-[WAActivityManager osTransactionComplete:]_block_invoke_2";
    v15 = 1024;
    v16 = 242;
    v17 = 2048;
    v18 = v5;
    v19 = 2048;
    v20 = -v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Completed %lu transactions within uptime of %f seconds", (uint8_t *)&v13, 0x26u);
  }

  v7 = WALogActivityManagerHandle();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *(_QWORD *)(a1 + 40);
    v13 = 136446722;
    v14 = "-[WAActivityManager osTransactionComplete:]_block_invoke";
    v15 = 1024;
    v16 = 247;
    v17 = 2048;
    v18 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Attempting Daemon Eager Exit due to inactivity timeout of %f seconds", (uint8_t *)&v13, 0x1Cu);
  }

  objc_msgSend(*(id *)(a1 + 32), "_executeBeforePossibleEagerExit");
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "alternateExecutionBlockForCleanExit"));

  if (v10)
  {
    objc_msgSend(*(id *)(a1 + 32), "_executeTimerBlock");
  }
  else if ((xpc_transaction_try_exit_clean() & 1) == 0)
  {
    v11 = WALogActivityManagerHandle();
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v13 = 136446466;
      v14 = "-[WAActivityManager osTransactionComplete:]_block_invoke";
      v15 = 1024;
      v16 = 254;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Cannot eager exit, still outstanding transactions", (uint8_t *)&v13, 0x12u);
    }

  }
}

id sub_10007C888(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "count");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

int main(int argc, const char **argv, const char **envp)
{
  void *v3;
  uint64_t v4;
  int v5;
  id v6;
  NSObject *v7;
  _BOOL4 v8;
  void *v9;
  unsigned int v10;
  const __CFString *v11;
  id v12;
  NSObject *v13;
  char *user_dir_suffix;
  id v15;
  NSObject *v16;
  NSString *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  _QWORD *v21;
  id v22;
  _QWORD *v23;
  _QWORD *v24;
  WAEngine *v25;
  dispatch_source_t v26;
  void *v27;
  NSObject *v28;
  WAEngine *v29;
  void *v30;
  _QWORD v32[4];
  WAEngine *v33;
  uint8_t v34[8];
  sigaction v35;
  _QWORD v36[4];
  id v37;
  _QWORD handler[4];
  id v39;
  _QWORD v40[5];
  _BYTE buf[40];
  id v42;

  v3 = objc_autoreleasePoolPush();
  if (qword_1000ECF08 != -1)
    dispatch_once(&qword_1000ECF08, &stru_1000CCB60);
  v4 = getpid();
  v5 = sandbox_check(v4, 0, SANDBOX_CHECK_NO_REPORT);
  v6 = WALogCategoryDefaultHandle();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = v5 == 0;
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](NSProcessInfo, "processInfo"));
    v10 = objc_msgSend(v9, "processIdentifier");
    v11 = CFSTR("YES");
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = "int main(int, const char **)";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 118;
    if (v8)
      v11 = CFSTR("NO");
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v10;
    *(_WORD *)&buf[24] = 2112;
    *(_QWORD *)&buf[26] = v11;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:STARTUP (%d) isSandboxed: %@", buf, 0x22u);

  }
  if ((_set_user_dir_suffix("com.apple.wifianalyticsd") & 1) == 0)
  {
    v12 = WALogCategoryDefaultHandle();
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "int main(int, const char **)";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 120;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%{public}s::%d:FAILED to set tmp directory suffix", buf, 0x12u);
    }

  }
  user_dir_suffix = (char *)_get_user_dir_suffix();
  v15 = WALogCategoryDefaultHandle();
  v16 = objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    v17 = NSTemporaryDirectory();
    v18 = objc_claimAutoreleasedReturnValue(v17);
    v19 = (void *)v18;
    v20 = "null";
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = "int main(int, const char **)";
    *(_WORD *)&buf[12] = 1024;
    if (user_dir_suffix)
      v20 = user_dir_suffix;
    *(_DWORD *)&buf[14] = 123;
    *(_WORD *)&buf[18] = 2112;
    *(_QWORD *)&buf[20] = v18;
    *(_WORD *)&buf[28] = 2080;
    *(_QWORD *)&buf[30] = v20;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:NSTemporaryDirectory() is %@ _get_user_dir_suffix is %s", buf, 0x26u);

  }
  if (user_dir_suffix)
    free(user_dir_suffix);
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x3032000000;
  *(_QWORD *)&buf[24] = sub_10007CEAC;
  *(_QWORD *)&buf[32] = sub_10007CEBC;
  v42 = 0;
  v40[0] = _NSConcreteStackBlock;
  v40[1] = 3221225472;
  v40[2] = sub_10007CEC4;
  v40[3] = &unk_1000CD9D0;
  v40[4] = buf;
  v21 = objc_retainBlock(v40);
  v22 = &_dispatch_main_q;
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_10007D098;
  handler[3] = &unk_1000CDC68;
  v23 = v21;
  v39 = v23;
  xpc_set_event_stream_handler("com.apple.notifyd.matching", (dispatch_queue_t)&_dispatch_main_q, handler);

  v36[0] = _NSConcreteStackBlock;
  v36[1] = 3221225472;
  v36[2] = sub_10007D17C;
  v36[3] = &unk_1000CDC68;
  v24 = v23;
  v37 = v24;
  xpc_set_event_stream_handler("com.apple.awd.launch.wifi", (dispatch_queue_t)&_dispatch_main_q, v36);

  v25 = objc_alloc_init(WAEngine);
  v35.__sigaction_u.__sa_handler = (void (__cdecl *)(int))1;
  *(_QWORD *)&v35.sa_mask = 0;
  sigaction(15, &v35, 0);
  v26 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_signal, 0xFuLL, 0, (dispatch_queue_t)&_dispatch_main_q);
  v27 = (void *)qword_1000ED0C0;
  qword_1000ED0C0 = (uint64_t)v26;

  v28 = qword_1000ED0C0;
  if (qword_1000ED0C0)
  {
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472;
    v32[2] = sub_10007D260;
    v32[3] = &unk_1000CCDB0;
    v29 = v25;
    v33 = v29;
    dispatch_source_set_event_handler(v28, v32);
    dispatch_resume((dispatch_object_t)qword_1000ED0C0);
    -[WAEngine run](v29, "run");

  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v34 = 0;
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "FAILED to setup SIGTERM catcher", v34, 2u);
  }

  _Block_object_dispose(buf, 8);
  objc_autoreleasePoolPop(v3);
  if (v28)
  {
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSRunLoop currentRunLoop](NSRunLoop, "currentRunLoop"));
    objc_msgSend(v30, "run");

  }
  return 0;
}

void sub_10007CE88(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007CEAC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10007CEBC(uint64_t a1)
{

}

void sub_10007CEC4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  dispatch_time_t v6;
  _QWORD block[5];

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    v2 = os_transaction_create("com.apple.wifianalytics.keepalive");
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](WAActivityManager, "sharedActivityManager"));
    objc_msgSend(v3, "osTransactionCreate:transaction:", "com.apple.wifianalytics.keepalive", v2);

    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v5 = *(void **)(v4 + 40);
    *(_QWORD *)(v4 + 40) = v2;

    v6 = dispatch_time(0, 30000000000);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10007CFA4;
    block[3] = &unk_1000CD9D0;
    block[4] = *(_QWORD *)(a1 + 32);
    dispatch_after(v6, (dispatch_queue_t)&_dispatch_main_q, block);
  }
}

void sub_10007CFA4(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;

  v2 = WALogCategoryDefaultHandle();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 136446466;
    v8 = "int main(int, const char **)_block_invoke_2";
    v9 = 1024;
    v10 = 131;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Transaction hold expired", (uint8_t *)&v7, 0x12u);
  }

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[WAActivityManager sharedActivityManager](WAActivityManager, "sharedActivityManager"));
  objc_msgSend(v4, "osTransactionComplete:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = 0;

}

uint64_t sub_10007D098(uint64_t a1)
{
  id v2;
  NSObject *v3;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  int v12;

  v2 = WALogCategoryDefaultHandle();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 136446978;
    v6 = "int main(int, const char **)_block_invoke";
    v7 = 1024;
    v8 = 139;
    v9 = 2080;
    v10 = "com.apple.notifyd.matching";
    v11 = 1024;
    v12 = 30;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Wake notify received (%s), staying dirty (holding a transsaction) for %d seconds", (uint8_t *)&v5, 0x22u);
  }

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_10007D17C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  int v12;

  v2 = WALogCategoryDefaultHandle();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 136446978;
    v6 = "int main(int, const char **)_block_invoke";
    v7 = 1024;
    v8 = 143;
    v9 = 2080;
    v10 = "com.apple.awd.launch.wifi";
    v11 = 1024;
    v12 = 30;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}s::%d:Wake notify received (%s), staying dirty (holding a transsaction) for %d seconds", (uint8_t *)&v5, 0x22u);
  }

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_10007D260(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 32);
  if (!v1)
    exit(1);
  return objc_msgSend(v1, "prepareToTerminateAnyReply:", &stru_1000CDCA8);
}

void sub_10007D288(id a1, id a2, NSError *a3)
{
  id v4;
  NSError *v5;
  id v6;
  NSObject *v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;

  v4 = a2;
  v5 = a3;
  v6 = WALogCategoryDefaultHandle();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    v8 = 136446466;
    v9 = "int main(int, const char **)_block_invoke_2";
    v10 = 1024;
    v11 = 164;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%{public}s::%d:Now exit(143)", (uint8_t *)&v8, 0x12u);
  }

  exit(143);
}

void sub_10007DDD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10007E3DC(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  id v17;

  v3 = a2;
  v4 = WALogCategoryDefaultHandle();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 40);
    v8 = 136447234;
    v9 = "-[WADatapathDiagnosticsMessageSubmitter submitSlowWiFiMessage:]_block_invoke";
    v10 = 1024;
    v11 = 139;
    v12 = 2112;
    v13 = v6;
    v14 = 2112;
    v15 = v7;
    v16 = 2112;
    v17 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%{public}s::%d:[WiFi Slow WiFi - %@ %@] ABC snapshot response = %@", (uint8_t *)&v8, 0x30u);
  }

}

void sub_10007F264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007F2A0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10007F2B0(uint64_t a1)
{

}

void sub_10007F2B8(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  id v17;

  v3 = a2;
  v4 = WALogCategoryDefaultHandle();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    v8 = 136447234;
    v9 = "-[WADatapathDiagnosticsMessageSubmitter submitDPEMessage:]_block_invoke";
    v10 = 1024;
    v11 = 369;
    v12 = 2112;
    v13 = v6;
    v14 = 2112;
    v15 = v7;
    v16 = 2112;
    v17 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%{public}s::%d:[WiFi DatapathStall - %@ %@] ABC snapshot response = %@", (uint8_t *)&v8, 0x30u);
  }

}

void sub_100083900(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x320], 8);
  _Block_object_dispose(&STACK[0x350], 8);
  _Unwind_Resume(a1);
}

void sub_1000839F4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  id v17;

  v3 = a2;
  v4 = WALogCategoryDefaultHandle();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    v8 = 136447234;
    v9 = "-[WADatapathDiagnosticsMessageSubmitter submitDPSRMessage:]_block_invoke";
    v10 = 1024;
    v11 = 1030;
    v12 = 2112;
    v13 = v6;
    v14 = 2112;
    v15 = v7;
    v16 = 2112;
    v17 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%{public}s::%d:[WiFi DatapathStall - %@ %@] ABC snapshot response = %@", (uint8_t *)&v8, 0x30u);
  }

}

Class sub_100083B48(uint64_t a1)
{
  const char *v2;
  char *v3;
  Class result;
  char *v5;
  __int128 v6;
  uint64_t v7;

  v5 = 0;
  v2 = (const char *)&qword_1000ED000;
  if (!qword_1000ED0D8)
  {
    v6 = off_1000CDD18;
    v7 = 0;
    qword_1000ED0D8 = _sl_dlopen(&v6, &v5);
    v3 = v5;
    if (!qword_1000ED0D8)
    {
      abort_report_np("%s", v5);
      goto LABEL_7;
    }
    if (v5)
      goto LABEL_8;
  }
  while (1)
  {
    v2 = "SDRDiagnosticReporter";
    result = objc_getClass("SDRDiagnosticReporter");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_7:
    v3 = (char *)abort_report_np("Unable to find class %s", v2);
LABEL_8:
    free(v3);
  }
  qword_1000ED0D0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1000860E8(uint64_t a1, void *a2)
{
  WiFiStallDetect *v3;
  id v4;

  v4 = a2;
  if (v4)
  {
    v3 = -[WiFiStallDetect initWithMLModel:]([WiFiStallDetect alloc], "initWithMLModel:", v4);
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

void sub_100086380(uint64_t a1, void *a2, void *a3)
{
  id v5;
  WiFiStallDetectOutput *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  WiFiStallDetectOutput *v11;
  uint64_t v12;
  void (*v13)(uint64_t, _QWORD, WiFiStallDetectOutput *);
  id v14;

  v14 = a2;
  if (v14)
  {
    v5 = a3;
    v6 = [WiFiStallDetectOutput alloc];
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "featureValueForName:", CFSTR("stall")));
    v8 = objc_msgSend(v7, "int64Value");
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "featureValueForName:", CFSTR("stallProbability")));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "dictionaryValue"));
    v11 = -[WiFiStallDetectOutput initWithStall:stallProbability:](v6, "initWithStall:stallProbability:", v8, v10);

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 32);
    v13 = *(void (**)(uint64_t, _QWORD, WiFiStallDetectOutput *))(v12 + 16);
    v11 = a3;
    v13(v12, 0, v11);
  }

}

void sub_100086550(uint64_t a1, void *a2, void *a3)
{
  id v5;
  WiFiStallDetectOutput *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  WiFiStallDetectOutput *v11;
  uint64_t v12;
  void (*v13)(uint64_t, _QWORD, WiFiStallDetectOutput *);
  id v14;

  v14 = a2;
  if (v14)
  {
    v5 = a3;
    v6 = [WiFiStallDetectOutput alloc];
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "featureValueForName:", CFSTR("stall")));
    v8 = objc_msgSend(v7, "int64Value");
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "featureValueForName:", CFSTR("stallProbability")));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "dictionaryValue"));
    v11 = -[WiFiStallDetectOutput initWithStall:stallProbability:](v6, "initWithStall:stallProbability:", v8, v10);

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 32);
    v13 = *(void (**)(uint64_t, _QWORD, WiFiStallDetectOutput *))(v12 + 16);
    v11 = a3;
    v13(v12, 0, v11);
  }

}

void operator delete(void *__p)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

id objc_msgSend_AC_problem_bitfield(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "AC_problem_bitfield");
}

id objc_msgSend_DatapathMetricGetter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "DatapathMetricGetter");
}

id objc_msgSend_IPv4Addresses(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "IPv4Addresses");
}

id objc_msgSend_IPv4SubnetMasks(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "IPv4SubnetMasks");
}

id objc_msgSend_IPv6Addresses(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "IPv6Addresses");
}

id objc_msgSend_IPv6PrefixLengths(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "IPv6PrefixLengths");
}

id objc_msgSend_JSONObjectWithData_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "JSONObjectWithData:options:error:");
}

id objc_msgSend_TxBE_expiredCompletions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "TxBE_expiredCompletions");
}

id objc_msgSend_TxBE_failedCompletions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "TxBE_failedCompletions");
}

id objc_msgSend_TxBE_noAckCompletions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "TxBE_noAckCompletions");
}

id objc_msgSend_TxBE_otherErrCompletions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "TxBE_otherErrCompletions");
}

id objc_msgSend_TxBK_expiredCompletions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "TxBK_expiredCompletions");
}

id objc_msgSend_TxBK_failedCompletions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "TxBK_failedCompletions");
}

id objc_msgSend_TxBK_noAckCompletions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "TxBK_noAckCompletions");
}

id objc_msgSend_TxBK_otherErrCompletions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "TxBK_otherErrCompletions");
}

id objc_msgSend_TxVI_expiredCompletions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "TxVI_expiredCompletions");
}

id objc_msgSend_TxVI_failedCompletions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "TxVI_failedCompletions");
}

id objc_msgSend_TxVI_noAckCompletions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "TxVI_noAckCompletions");
}

id objc_msgSend_TxVI_otherErrCompletions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "TxVI_otherErrCompletions");
}

id objc_msgSend_TxVO_expiredCompletions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "TxVO_expiredCompletions");
}

id objc_msgSend_TxVO_failedCompletions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "TxVO_failedCompletions");
}

id objc_msgSend_TxVO_noAckCompletions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "TxVO_noAckCompletions");
}

id objc_msgSend_TxVO_otherErrCompletions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "TxVO_otherErrCompletions");
}

id objc_msgSend_URLByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "URLByAppendingPathComponent:");
}

id objc_msgSend_URLByAppendingPathComponent_isDirectory_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "URLByAppendingPathComponent:isDirectory:");
}

id objc_msgSend_URLOfModelInThisBundle(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "URLOfModelInThisBundle");
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "UTF8String");
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "UUID");
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "UUIDString");
}

id objc_msgSend__DPSQuickRecoveryEngineObj(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_DPSQuickRecoveryEngineObj");
}

id objc_msgSend___IPv4StateConfig(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__IPv4StateConfig");
}

id objc_msgSend___IPv6StateConfig(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__IPv6StateConfig");
}

id objc_msgSend___dnsSetupConfig(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__dnsSetupConfig");
}

id objc_msgSend___dnsStateConfig(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__dnsStateConfig");
}

id objc_msgSend___dumpCoreCaptureLogsWithReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__dumpCoreCaptureLogsWithReason:");
}

id objc_msgSend___ipv4SetupConfig(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "__ipv4SetupConfig");
}

id objc_msgSend__addDriverChannelsMatchingPredicateList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_addDriverChannelsMatchingPredicateList:");
}

id objc_msgSend__buildOrRescanToBuildChannelAvailabilityCaches_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_buildOrRescanToBuildChannelAvailabilityCaches:");
}

id objc_msgSend__buildPredicateList_wlan_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_buildPredicateList:wlan:");
}

id objc_msgSend__cachedModelObjectsMessageForGroupType_key_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_cachedModelObjectsMessageForGroupType:key:");
}

id objc_msgSend__calculateEstimatedUptime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_calculateEstimatedUptime");
}

id objc_msgSend__calculateProcessUsage(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_calculateProcessUsage");
}

id objc_msgSend__calculateProfileUptime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_calculateProfileUptime");
}

id objc_msgSend__cancelDelayedInvocationForPersist(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_cancelDelayedInvocationForPersist");
}

id objc_msgSend__clearIOReporterCache(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_clearIOReporterCache");
}

id objc_msgSend__clearMessageStoreAndReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_clearMessageStoreAndReply:");
}

id objc_msgSend__convertWiFiStatsIntoPercentile_analysisGroup_groupTarget_forProcessToken_andReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_convertWiFiStatsIntoPercentile:analysisGroup:groupTarget:forProcessToken:andReply:");
}

id objc_msgSend__createNextWorkReportSnapshot(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_createNextWorkReportSnapshot");
}

id objc_msgSend__createStructuredIOReportDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_createStructuredIOReportDictionary:");
}

id objc_msgSend__createWorkReportDictionaryForTelemetryAndRollBucket(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_createWorkReportDictionaryForTelemetryAndRollBucket");
}

id objc_msgSend__delayedInvocationForPersist(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_delayedInvocationForPersist");
}

id objc_msgSend__delayedInvocationForRescan(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_delayedInvocationForRescan");
}

id objc_msgSend__enableWorkReportRecurringTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_enableWorkReportRecurringTimer");
}

id objc_msgSend__examinePeerMessageForIntegrity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_examinePeerMessageForIntegrity:");
}

id objc_msgSend__executeBeforePossibleEagerExit(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_executeBeforePossibleEagerExit");
}

id objc_msgSend__executeTimerBlock(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_executeTimerBlock");
}

id objc_msgSend__fieldNameFromKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_fieldNameFromKey:");
}

id objc_msgSend__findChannelsAndBuildChannelCaches_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_findChannelsAndBuildChannelCaches:");
}

id objc_msgSend__freeIORCaches(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_freeIORCaches");
}

id objc_msgSend__freeSubscriptionSample_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_freeSubscriptionSample:");
}

id objc_msgSend__generateSetterInvocationFromInstance_andFieldKey_isRepeatable_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_generateSetterInvocationFromInstance:andFieldKey:isRepeatable:");
}

id objc_msgSend__getBasePersistenceKeychainQuery(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getBasePersistenceKeychainQuery");
}

id objc_msgSend__getCCPipeDriverForWLAN(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getCCPipeDriverForWLAN");
}

id objc_msgSend__getCachedUsage(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getCachedUsage");
}

id objc_msgSend__getDataFromKeychain_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getDataFromKeychain:");
}

id objc_msgSend__getDeviceAnalyticsConfiguration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getDeviceAnalyticsConfiguration");
}

id objc_msgSend__getIOServiceWithForceRefresh_apple80211_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getIOServiceWithForceRefresh:apple80211:");
}

id objc_msgSend__getInfraApple80211(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getInfraApple80211");
}

id objc_msgSend__getMessagesModelForProcessToken_groupType_andError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getMessagesModelForProcessToken:groupType:andError:");
}

id objc_msgSend__getNewMessageForKey_groupType_forProcessToken_shouldCheckForPrePopulation_andReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getNewMessageForKey:groupType:forProcessToken:shouldCheckForPrePopulation:andReply:");
}

id objc_msgSend__getNewMessageForKey_groupType_withCopy_forProcessToken_shouldCheckForPrePopulation_andReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getNewMessageForKey:groupType:withCopy:forProcessToken:shouldCheckForPrePopulation:andReply:");
}

id objc_msgSend__getObscureKey(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getObscureKey");
}

id objc_msgSend__getTimeInProfileState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getTimeInProfileState:");
}

id objc_msgSend__handleUnpersistForUsageData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handleUnpersistForUsageData");
}

id objc_msgSend__incrementPredicateCachedUsageWithPrefix_q_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_incrementPredicateCachedUsageWithPrefix:q:");
}

id objc_msgSend__initSubmitterAndQueryableRegistrationForProcessToken_andGroupType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_initSubmitterAndQueryableRegistrationForProcessToken:andGroupType:");
}

id objc_msgSend__initWithGroupAndOptions_groupTarget_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_initWithGroupAndOptions:groupTarget:");
}

id objc_msgSend__insertInOrder_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_insertInOrder:");
}

id objc_msgSend__iorPreparedForSampling_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_iorPreparedForSampling:");
}

id objc_msgSend__isDPSQuickRecoveryEngineUsed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_isDPSQuickRecoveryEngineUsed");
}

id objc_msgSend__issueIOReportManagementCommand_forProcessToken_andReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_issueIOReportManagementCommand:forProcessToken:andReply:");
}

id objc_msgSend__killDaemonAndReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_killDaemonAndReply:");
}

id objc_msgSend__logWorkReport_indent_prefix_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_logWorkReport:indent:prefix:");
}

id objc_msgSend__lqmCrashTracerNotifyForInterfaceWithName_andReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_lqmCrashTracerNotifyForInterfaceWithName:andReply:");
}

id objc_msgSend__lqmCrashTracerReceiveBlock_forInterfaceWithName_andReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_lqmCrashTracerReceiveBlock:forInterfaceWithName:andReply:");
}

id objc_msgSend__persist(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_persist");
}

id objc_msgSend__persistIORObjects_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_persistIORObjects:");
}

id objc_msgSend__prepareToTerminate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_prepareToTerminate");
}

id objc_msgSend__prepareToTerminateViaEagerExit(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_prepareToTerminateViaEagerExit");
}

id objc_msgSend__prepopulateMessage_forProcess_groupType_andReply_isResubscribe_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_prepopulateMessage:forProcess:groupType:andReply:isResubscribe:");
}

id objc_msgSend__processWAMessageForNewIORPossibility_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_processWAMessageForNewIORPossibility:");
}

id objc_msgSend__purgeGroupTypeIfNecessary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_purgeGroupTypeIfNecessary:");
}

id objc_msgSend__purgeIfNecessary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_purgeIfNecessary");
}

id objc_msgSend__removeIORChannelsPersistenceFiles(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_removeIORChannelsPersistenceFiles");
}

id objc_msgSend__removeMessageWithUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_removeMessageWithUUID:");
}

id objc_msgSend__removePersistenceFile(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_removePersistenceFile");
}

id objc_msgSend__reportWorkReportInterval(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_reportWorkReportInterval");
}

id objc_msgSend__rotateObscureKey(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_rotateObscureKey");
}

id objc_msgSend__runIOLegendTest(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_runIOLegendTest");
}

id objc_msgSend__saveKeyIVData_andTagData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_saveKeyIVData:andTagData:");
}

id objc_msgSend__scanPredicatesWithMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_scanPredicatesWithMode:");
}

id objc_msgSend__sendMemoryPressureRequestAndReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_sendMemoryPressureRequestAndReply:");
}

id objc_msgSend__setDeviceAnalyticsConfiguration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setDeviceAnalyticsConfiguration:");
}

id objc_msgSend__signalPotentialNewIORChannels(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_signalPotentialNewIORChannels");
}

id objc_msgSend__submitMessage_groupType_forProcessToken_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_submitMessage:groupType:forProcessToken:");
}

id objc_msgSend__submitWiFiAnalyticsMessageAdvanced_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_submitWiFiAnalyticsMessageAdvanced:");
}

id objc_msgSend__summarizeDeviceAnalyticsForNetwork_maxAgeInDays_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_summarizeDeviceAnalyticsForNetwork:maxAgeInDays:");
}

id objc_msgSend__trapCrashMiniTracerDumpReadyForInterfaceWithName_andReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_trapCrashMiniTracerDumpReadyForInterfaceWithName:andReply:");
}

id objc_msgSend__trapFWWithReason_andReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_trapFWWithReason:andReply:");
}

id objc_msgSend__triggerDPSStudy_forProcessToken_waMessage_andReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_triggerDPSStudy:forProcessToken:waMessage:andReply:");
}

id objc_msgSend__triggerDatapathDiagnosticsAndCollectUpdates_forProcessToken_waMessage_andReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_triggerDatapathDiagnosticsAndCollectUpdates:forProcessToken:waMessage:andReply:");
}

id objc_msgSend__triggerQueryForNWActivity_forProcessToken_andReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_triggerQueryForNWActivity:forProcessToken:andReply:");
}

id objc_msgSend__triggerSlowWiFiStudy_forProcessToken_waMessage_andReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_triggerSlowWiFiStudy:forProcessToken:waMessage:andReply:");
}

id objc_msgSend__unpersistIORObjects(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_unpersistIORObjects");
}

id objc_msgSend_aPTxDataStall(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "aPTxDataStall");
}

id objc_msgSend_abstime_to_ns_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "abstime_to_ns:");
}

id objc_msgSend_ac(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ac");
}

id objc_msgSend_acAsString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "acAsString:");
}

id objc_msgSend_acCompletions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "acCompletions");
}

id objc_msgSend_acCompletionsAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "acCompletionsAtIndex:");
}

id objc_msgSend_acCompletionsCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "acCompletionsCount");
}

id objc_msgSend_accessPointInfoAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accessPointInfoAtIndex:");
}

id objc_msgSend_accessPointInfosCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accessPointInfosCount");
}

id objc_msgSend_accessPointOUI(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accessPointOUI");
}

id objc_msgSend_action(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "action");
}

id objc_msgSend_actionField(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "actionField");
}

id objc_msgSend_addDeltaNSNumberForTelemetryKey_dictKey_dictModule_telDict_recentDict_oldDict_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addDeltaNSNumberForTelemetryKey:dictKey:dictModule:telDict:recentDict:oldDict:");
}

id objc_msgSend_addEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addEntriesFromDictionary:");
}

id objc_msgSend_addNumRecommendedCapture(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addNumRecommendedCapture");
}

id objc_msgSend_addNumRecommendedScreenOffQuickRecoveryWD(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addNumRecommendedScreenOffQuickRecoveryWD");
}

id objc_msgSend_addNumRecommendedScreenOnQuickRecoveryWD(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addNumRecommendedScreenOnQuickRecoveryWD");
}

id objc_msgSend_addNumRecommendedWD(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addNumRecommendedWD");
}

id objc_msgSend_addNumSuppressedCapture(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addNumSuppressedCapture");
}

id objc_msgSend_addNumSuppressedScreenOffQuickRecoveryWD(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addNumSuppressedScreenOffQuickRecoveryWD");
}

id objc_msgSend_addNumSuppressedScreenOnQuickRecoveryWD(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addNumSuppressedScreenOnQuickRecoveryWD");
}

id objc_msgSend_addNumSuppressedWD(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addNumSuppressedWD");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObserver_forKeyPath_options_context_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addObserver:forKeyPath:options:context:");
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addObserver:selector:name:object:");
}

id objc_msgSend_addPersistentStoreWithType_configuration_URL_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addPersistentStoreWithType:configuration:URL:options:error:");
}

id objc_msgSend_addRepeatableSubMessageValue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addRepeatableSubMessageValue:");
}

id objc_msgSend_addRepeatableUInt64Value_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addRepeatableUInt64Value:");
}

id objc_msgSend_ageOutAnalytics_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ageOutAnalytics:");
}

id objc_msgSend_aggregateMetrics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "aggregateMetrics");
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allKeys");
}

id objc_msgSend_alternateExecutionBlockForCleanExit(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "alternateExecutionBlockForCleanExit");
}

id objc_msgSend_analyticsAgeOutTimeIntervalSecs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "analyticsAgeOutTimeIntervalSecs");
}

id objc_msgSend_analyticsProcessingTimeIntervalSecs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "analyticsProcessingTimeIntervalSecs");
}

id objc_msgSend_analyticsProcessor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "analyticsProcessor");
}

id objc_msgSend_analyticsProcessorIsReady(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "analyticsProcessorIsReady");
}

id objc_msgSend_apProfileForBssid_andSSID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "apProfileForBssid:andSSID:");
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appendString:");
}

id objc_msgSend_apple80211Ref(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "apple80211Ref");
}

id objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "archivedDataWithRootObject:requiringSecureCoding:error:");
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "array");
}

id objc_msgSend_arrayByAddingObjectsFromArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayByAddingObjectsFromArray:");
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayWithCapacity:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_associationChanges(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "associationChanges");
}

id objc_msgSend_associationChangesCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "associationChangesCount");
}

id objc_msgSend_availWLANDurMS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "availWLANDurMS");
}

id objc_msgSend_availWLANRxDurMS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "availWLANRxDurMS");
}

id objc_msgSend_availWLANTxDurMS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "availWLANTxDurMS");
}

id objc_msgSend_avgTxLatencyMS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "avgTxLatencyMS");
}

id objc_msgSend_awdReport(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "awdReport");
}

id objc_msgSend_awdlSnapshot(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "awdlSnapshot");
}

id objc_msgSend_bTAntennaDurMS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bTAntennaDurMS");
}

id objc_msgSend_baselineThroughput(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "baselineThroughput");
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "BOOLValue");
}

id objc_msgSend_btCoex(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "btCoex");
}

id objc_msgSend_btSnapshot(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "btSnapshot");
}

id objc_msgSend_bt_abort(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bt_abort");
}

id objc_msgSend_bt_grant(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bt_grant");
}

id objc_msgSend_bt_request(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bt_request");
}

id objc_msgSend_bt_uch_latency(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bt_uch_latency");
}

id objc_msgSend_bundleForClass_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bundleForClass:");
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bytes");
}

id objc_msgSend_bytesValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bytesValue");
}

id objc_msgSend_cCA(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cCA");
}

id objc_msgSend_cachedChannelsCountPerIORPopulatable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cachedChannelsCountPerIORPopulatable");
}

id objc_msgSend_cachedIOPopAvailableChannels(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cachedIOPopAvailableChannels");
}

id objc_msgSend_cachedIOReportSample(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cachedIOReportSample");
}

id objc_msgSend_cachedIOReportSubbedChannels(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cachedIOReportSubbedChannels");
}

id objc_msgSend_cachedModelObjectsKeyToMessageMap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cachedModelObjectsKeyToMessageMap");
}

id objc_msgSend_cachedPredicatesNotYetFound(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cachedPredicatesNotYetFound");
}

id objc_msgSend_cachedUsage(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cachedUsage");
}

id objc_msgSend_canCaptureforDPS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "canCaptureforDPS");
}

id objc_msgSend_canProcessWiFiAnalyticsMessageJSONFiles_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "canProcessWiFiAnalyticsMessageJSONFiles:");
}

id objc_msgSend_canWDforDPS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "canWDforDPS");
}

id objc_msgSend_ccaAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ccaAtIndex:");
}

id objc_msgSend_ccaValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ccaValue");
}

id objc_msgSend_cca_bin(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cca_bin");
}

id objc_msgSend_ccas(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ccas");
}

id objc_msgSend_ccasCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ccasCount");
}

id objc_msgSend_changedChannel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "changedChannel");
}

id objc_msgSend_changedDNSPrimary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "changedDNSPrimary");
}

id objc_msgSend_changedMAC(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "changedMAC");
}

id objc_msgSend_channel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "channel");
}

id objc_msgSend_channelBandwidth(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "channelBandwidth");
}

id objc_msgSend_channelsVisited0(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "channelsVisited0");
}

id objc_msgSend_channelsVisited1(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "channelsVisited1");
}

id objc_msgSend_characterAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "characterAtIndex:");
}

id objc_msgSend_characterSetWithCharactersInString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "characterSetWithCharactersInString:");
}

id objc_msgSend_checkAWDLActivity_symptomsDnsStats_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkAWDLActivity:symptomsDnsStats:");
}

id objc_msgSend_checkDpsStatus_currentSample_qDpsStat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkDpsStatus:currentSample:qDpsStat:");
}

id objc_msgSend_checkForPriorityNetwork(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkForPriorityNetwork");
}

id objc_msgSend_checkParameterThresholds_currentSample_qDpsStat_chipNumber_dpsSnapshot_originalCCA_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkParameterThresholds:currentSample:qDpsStat:chipNumber:dpsSnapshot:originalCCA:");
}

id objc_msgSend_chipModeError(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "chipModeError");
}

id objc_msgSend_chipmodeerror(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "chipmodeerror");
}

id objc_msgSend_clearDnsStudyVariables(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clearDnsStudyVariables");
}

id objc_msgSend_clearMessageStore(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clearMessageStore");
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "code");
}

id objc_msgSend_compareValues_second_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "compareValues:second:");
}

id objc_msgSend_completions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "completions");
}

id objc_msgSend_completions_chipmodeerror(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "completions_chipmodeerror");
}

id objc_msgSend_completions_expired(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "completions_expired");
}

id objc_msgSend_completions_internalerror(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "completions_internalerror");
}

id objc_msgSend_completions_ioerror(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "completions_ioerror");
}

id objc_msgSend_completions_noack(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "completions_noack");
}

id objc_msgSend_completions_nobuf(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "completions_nobuf");
}

id objc_msgSend_completions_noremotepeer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "completions_noremotepeer");
}

id objc_msgSend_completions_noresources(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "completions_noresources");
}

id objc_msgSend_completions_txfailure(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "completions_txfailure");
}

id objc_msgSend_componentsSeparatedByCharactersInSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "componentsSeparatedByCharactersInSet:");
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "componentsSeparatedByString:");
}

id objc_msgSend_computeAggregateTxCompletionStatus_source_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "computeAggregateTxCompletionStatus:source:");
}

id objc_msgSend_computeAverageCcaSinceStudyStart_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "computeAverageCcaSinceStudyStart:");
}

id objc_msgSend_computeBin_previousSample_currentSample_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "computeBin:previousSample:currentSample:");
}

id objc_msgSend_computeDPSRecoveryIndex_timestamps_andReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "computeDPSRecoveryIndex:timestamps:andReply:");
}

id objc_msgSend_computeDifferenceBetweenDates_end_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "computeDifferenceBetweenDates:end:");
}

id objc_msgSend_computeFeatures_currentSample_acList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "computeFeatures:currentSample:acList:");
}

id objc_msgSend_computePercentage_denomenator_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "computePercentage:denomenator:");
}

id objc_msgSend_computeSnapshotValidity_snapshotTimestamp_validityThreshold_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "computeSnapshotValidity:snapshotTimestamp:validityThreshold:");
}

id objc_msgSend_concurrentIntDurMS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "concurrentIntDurMS");
}

id objc_msgSend_configType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configType");
}

id objc_msgSend_conformsToProtocol_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "conformsToProtocol:");
}

id objc_msgSend_connection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "connection");
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_containsString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "containsString:");
}

id objc_msgSend_contentsOfDirectoryAtPath_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "contentsOfDirectoryAtPath:error:");
}

id objc_msgSend_controllerStats(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "controllerStats");
}

id objc_msgSend_convertToIPv6Network_prefixLength_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "convertToIPv6Network:prefixLength:");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copy");
}

id objc_msgSend_coredata_diagnostic_metrics_enabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "coredata_diagnostic_metrics_enabled");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "count");
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_createAndStartJsonReaderTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createAndStartJsonReaderTimer");
}

id objc_msgSend_createChannelWithProviderID_providerName_legCh_groupName_subgroupName_chinfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createChannelWithProviderID:providerName:legCh:groupName:subgroupName:chinfo:");
}

id objc_msgSend_createDirectoryAtPath_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:");
}

id objc_msgSend_createDirectoryAtURL_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:");
}

id objc_msgSend_currentBSSIDandSSID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentBSSIDandSSID");
}

id objc_msgSend_currentChannelInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentChannelInfo:");
}

id objc_msgSend_currentKnownNetworkProfile(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentKnownNetworkProfile");
}

id objc_msgSend_currentRunLoop(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentRunLoop");
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "data");
}

id objc_msgSend_dataUsingEncoding_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataUsingEncoding:");
}

id objc_msgSend_dataWithBytes_length_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithBytes:length:");
}

id objc_msgSend_dataWithCapacity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithCapacity:");
}

id objc_msgSend_dataWithContentsOfFile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithContentsOfFile:");
}

id objc_msgSend_dataWithContentsOfFile_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithContentsOfFile:options:error:");
}

id objc_msgSend_dataWithJSONObject_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithJSONObject:options:error:");
}

id objc_msgSend_datapathMetricStream(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "datapathMetricStream");
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "date");
}

id objc_msgSend_dateFromString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dateFromString:");
}

id objc_msgSend_dateWithTimeIntervalSince1970_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dateWithTimeIntervalSince1970:");
}

id objc_msgSend_dbDelegate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dbDelegate");
}

id objc_msgSend_debugTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "debugTimer");
}

id objc_msgSend_debugTimerEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "debugTimerEnabled");
}

id objc_msgSend_decimalDigitCharacterSet(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decimalDigitCharacterSet");
}

id objc_msgSend_decodeInt64ForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeInt64ForKey:");
}

id objc_msgSend_decodeIntegerForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeIntegerForKey:");
}

id objc_msgSend_decodeObjectForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeObjectForKey:");
}

id objc_msgSend_decodeObjectOfClasses_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeObjectOfClasses:forKey:");
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultCenter");
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultManager");
}

id objc_msgSend_deploymentMetricDiffDays(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deploymentMetricDiffDays");
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "description");
}

id objc_msgSend_determineChannelsPerIORPopulatable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "determineChannelsPerIORPopulatable");
}

id objc_msgSend_determineChannelsPerIORPopulatableWithinPopulatorBlock(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "determineChannelsPerIORPopulatableWithinPopulatorBlock");
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionary");
}

id objc_msgSend_dictionaryRepresentation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryRepresentation");
}

id objc_msgSend_dictionaryValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryValue");
}

id objc_msgSend_dictionaryWithCapacity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithCapacity:");
}

id objc_msgSend_dictionaryWithDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithDictionary:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_dictionaryWithObjectsAndKeys_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithObjectsAndKeys:");
}

id objc_msgSend_disable_dps_wd(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disable_dps_wd");
}

id objc_msgSend_disable_fast_dps_validation_for_test(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disable_fast_dps_validation_for_test");
}

id objc_msgSend_disable_fast_dps_wd(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disable_fast_dps_wd");
}

id objc_msgSend_disable_recommendation_engine(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disable_recommendation_engine");
}

id objc_msgSend_disable_slow_wifi_dps_is_priority_network(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disable_slow_wifi_dps_is_priority_network");
}

id objc_msgSend_disable_slow_wifi_wd(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disable_slow_wifi_wd");
}

id objc_msgSend_distantPast(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "distantPast");
}

id objc_msgSend_dnsStudyInProgress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dnsStudyInProgress");
}

id objc_msgSend_dnsStudyTransaction(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dnsStudyTransaction");
}

id objc_msgSend_dns_symptoms_duration_between_samples_after_trap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dns_symptoms_duration_between_samples_after_trap");
}

id objc_msgSend_dns_symptoms_duration_between_samples_before_trap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dns_symptoms_duration_between_samples_before_trap");
}

id objc_msgSend_dns_symptoms_interrogation_sample_count(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dns_symptoms_interrogation_sample_count");
}

id objc_msgSend_dns_symptoms_trap_evaluated_at_sample(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dns_symptoms_trap_evaluated_at_sample");
}

id objc_msgSend_doesDriverHaveChannelsInStructuredDict_containsStale_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "doesDriverHaveChannelsInStructuredDict:containsStale:");
}

id objc_msgSend_doesMessageNeedPrepopulation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "doesMessageNeedPrepopulation:");
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "doubleValue");
}

id objc_msgSend_dpsCounterSampleAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dpsCounterSampleAtIndex:");
}

id objc_msgSend_dpsCounterSamples(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dpsCounterSamples");
}

id objc_msgSend_dpsCounterSamplesCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dpsCounterSamplesCount");
}

id objc_msgSend_dpsEpiloge(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dpsEpiloge");
}

id objc_msgSend_dpsNotificationCCA(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dpsNotificationCCA");
}

id objc_msgSend_dpsNotificationReceivedDuringStudy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dpsNotificationReceivedDuringStudy");
}

id objc_msgSend_dpsQuickRecoveryEngine(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dpsQuickRecoveryEngine");
}

id objc_msgSend_dpsQuickRecoveryWDBudgetDict(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dpsQuickRecoveryWDBudgetDict");
}

id objc_msgSend_dpsStats(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dpsStats");
}

id objc_msgSend_dpsStudyInProgress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dpsStudyInProgress");
}

id objc_msgSend_dpsStudyTransaction(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dpsStudyTransaction");
}

id objc_msgSend_dpsWDBudgetDict(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dpsWDBudgetDict");
}

id objc_msgSend_dps_capture_evaluated_at_sample(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dps_capture_evaluated_at_sample");
}

id objc_msgSend_dps_duration_between_samples(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dps_duration_between_samples");
}

id objc_msgSend_dps_interrogation_sample_count(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dps_interrogation_sample_count");
}

id objc_msgSend_dps_report_sent_after(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dps_report_sent_after");
}

id objc_msgSend_dps_stall_dur_for_wd(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dps_stall_dur_for_wd");
}

id objc_msgSend_dps_symptoms_average_cca_threshold(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dps_symptoms_average_cca_threshold");
}

id objc_msgSend_dps_trap_evaluated_at_sample(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dps_trap_evaluated_at_sample");
}

id objc_msgSend_dps_wd_cca(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dps_wd_cca");
}

id objc_msgSend_dropped(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dropped");
}

id objc_msgSend_durSinceLastSuccessfulComp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "durSinceLastSuccessfulComp");
}

id objc_msgSend_duration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "duration");
}

id objc_msgSend_durationSinceUSBEventInSeconds(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "durationSinceUSBEventInSeconds");
}

id objc_msgSend_effectiveGroupIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "effectiveGroupIdentifier");
}

id objc_msgSend_effectiveUserIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "effectiveUserIdentifier");
}

id objc_msgSend_encodeInt64_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodeInt64:forKey:");
}

id objc_msgSend_encodeInteger_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodeInteger:forKey:");
}

id objc_msgSend_encodeObject_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodeObject:forKey:");
}

id objc_msgSend_engineQ(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "engineQ");
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "errorWithDomain:code:userInfo:");
}

id objc_msgSend_everAssociated(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "everAssociated");
}

id objc_msgSend_everAssociated_assocDoneSuccess_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "everAssociated:assocDoneSuccess:");
}

id objc_msgSend_exceptionWithName_reason_userInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "exceptionWithName:reason:userInfo:");
}

id objc_msgSend_executeBeforePossibleEagerExit(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "executeBeforePossibleEagerExit");
}

id objc_msgSend_expectedThroughput(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "expectedThroughput");
}

id objc_msgSend_expired(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "expired");
}

id objc_msgSend_facetimeCallInProgress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "facetimeCallInProgress");
}

id objc_msgSend_featureValueForName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "featureValueForName:");
}

id objc_msgSend_featureValueWithDictionary_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "featureValueWithDictionary:error:");
}

id objc_msgSend_featureValueWithDouble_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "featureValueWithDouble:");
}

id objc_msgSend_featureValueWithInt64_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "featureValueWithInt64:");
}

id objc_msgSend_featuresAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "featuresAtIndex:");
}

id objc_msgSend_fetchConfiguredDnsInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchConfiguredDnsInfo");
}

id objc_msgSend_fetchSymptomsScores_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchSymptomsScores:");
}

id objc_msgSend_fieldForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fieldForKey:");
}

id objc_msgSend_fileExistsAtPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileExistsAtPath:");
}

id objc_msgSend_fileExistsAtPath_isDirectory_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileExistsAtPath:isDirectory:");
}

id objc_msgSend_fileHandlingQ(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileHandlingQ");
}

id objc_msgSend_fileURLWithPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileURLWithPath:");
}

id objc_msgSend_fileURLWithPath_isDirectory_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileURLWithPath:isDirectory:");
}

id objc_msgSend_filteredArrayUsingPredicate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "filteredArrayUsingPredicate:");
}

id objc_msgSend_findInterpolatedPercentileFromWiFiStats_andReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "findInterpolatedPercentileFromWiFiStats:andReply:");
}

id objc_msgSend_findTxCompletionFailureWithMaxCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "findTxCompletionFailureWithMaxCount:");
}

id objc_msgSend_findTxCompletionFailureWithMaxCount_andReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "findTxCompletionFailureWithMaxCount:andReply:");
}

id objc_msgSend_firmwareFreePacket(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "firmwareFreePacket");
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "firstObject");
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "floatValue");
}

id objc_msgSend_forceLifetimeExp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "forceLifetimeExp");
}

id objc_msgSend_forceStudyErrorFromMsg(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "forceStudyErrorFromMsg");
}

id objc_msgSend_force_dps_recommend_always(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "force_dps_recommend_always");
}

id objc_msgSend_freeIORCaches(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "freeIORCaches");
}

id objc_msgSend_gatherConsecutiveDatapathReadings_forProcessToken_andReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "gatherConsecutiveDatapathReadings:forProcessToken:andReply:");
}

id objc_msgSend_gatherConsecutiveLinkQualitySamples_forProcessToken_andReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "gatherConsecutiveLinkQualitySamples:forProcessToken:andReply:");
}

id objc_msgSend_gatherDiscoveredPeerInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "gatherDiscoveredPeerInfo:");
}

id objc_msgSend_getAWDTimestamp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAWDTimestamp");
}

id objc_msgSend_getArgument_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getArgument:atIndex:");
}

id objc_msgSend_getCString_maxLength_encoding_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCString:maxLength:encoding:");
}

id objc_msgSend_getCachedUsage(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCachedUsage");
}

id objc_msgSend_getChipSet(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getChipSet");
}

id objc_msgSend_getDriverType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getDriverType");
}

id objc_msgSend_getIORPopAvailabeIOReportersTempFile(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getIORPopAvailabeIOReportersTempFile");
}

id objc_msgSend_getIOReportLegendItemsMatching_retErr_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getIOReportLegendItemsMatching:retErr:");
}

id objc_msgSend_getIOReportingClassPath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getIOReportingClassPath");
}

id objc_msgSend_getIOReportingDriverName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getIOReportingDriverName");
}

id objc_msgSend_getIOReportingService(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getIOReportingService");
}

id objc_msgSend_getIPv4InterfaceNetwork_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getIPv4InterfaceNetwork:");
}

id objc_msgSend_getIPv4InterfaceSubnet(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getIPv4InterfaceSubnet");
}

id objc_msgSend_getIPv6InterfaceNetwork_prefixLength_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getIPv6InterfaceNetwork:prefixLength:");
}

id objc_msgSend_getIPv6InterfacePrefix(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getIPv6InterfacePrefix");
}

id objc_msgSend_getInfraApple80211(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getInfraApple80211");
}

id objc_msgSend_getMessageInstanceForKey_andGroupType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getMessageInstanceForKey:andGroupType:");
}

id objc_msgSend_getNewMessageForKey_groupType_forProcessWithToken_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getNewMessageForKey:groupType:forProcessWithToken:");
}

id objc_msgSend_getPBCodableNSDataFromNSKeyedArchive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getPBCodableNSDataFromNSKeyedArchive:");
}

id objc_msgSend_getPhyMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getPhyMode");
}

id objc_msgSend_getTransformedFlattened_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getTransformedFlattened:");
}

id objc_msgSend_getTransformedFlattenedFrom_style_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getTransformedFlattenedFrom:style:");
}

id objc_msgSend_getUnavailablePredTempFile(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getUnavailablePredTempFile");
}

id objc_msgSend_getUsageTempFile(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getUsageTempFile");
}

id objc_msgSend_getValueForKeyFromUserDefaults_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getValueForKeyFromUserDefaults:");
}

id objc_msgSend_getW5Client(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getW5Client");
}

id objc_msgSend_globalIPv4InterfaceName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "globalIPv4InterfaceName");
}

id objc_msgSend_globalIPv4NetworkServiceID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "globalIPv4NetworkServiceID");
}

id objc_msgSend_globalIPv6NetworkServiceID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "globalIPv6NetworkServiceID");
}

id objc_msgSend_globallyUniqueString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "globallyUniqueString");
}

id objc_msgSend_grabAndSubmitFWTrapInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "grabAndSubmitFWTrapInfo");
}

id objc_msgSend_grabAndSubmitLqmMetrics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "grabAndSubmitLqmMetrics");
}

id objc_msgSend_groupTypeToString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "groupTypeToString:");
}

id objc_msgSend_handleMemoryWarning_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleMemoryWarning:");
}

id objc_msgSend_hasAWDLInterfaceListed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasAWDLInterfaceListed");
}

id objc_msgSend_hasIRInterfaceListed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasIRInterfaceListed");
}

id objc_msgSend_hasNANInterfaceListed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasNANInterfaceListed");
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasPrefix:");
}

id objc_msgSend_hasRttGatewayBE(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasRttGatewayBE");
}

id objc_msgSend_hasRttGatewayBK(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasRttGatewayBK");
}

id objc_msgSend_hasRttGatewayVI(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasRttGatewayVI");
}

id objc_msgSend_hasRttGatewayVO(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasRttGatewayVO");
}

id objc_msgSend_hasSlowNotice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasSlowNotice");
}

id objc_msgSend_hasSoftAPInterfaceListed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasSoftAPInterfaceListed");
}

id objc_msgSend_hasSuffix_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasSuffix:");
}

id objc_msgSend_ifName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ifName");
}

id objc_msgSend_impactedServersAtStudyEnd(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "impactedServersAtStudyEnd");
}

id objc_msgSend_impactedServersAtStudyStart(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "impactedServersAtStudyStart");
}

id objc_msgSend_incrementValueForKey_inMutableDict_onQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "incrementValueForKey:inMutableDict:onQueue:");
}

id objc_msgSend_indexOfObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "indexOfObject:");
}

id objc_msgSend_indexOfObject_inSortedRange_options_usingComparator_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "indexOfObject:inSortedRange:options:usingComparator:");
}

id objc_msgSend_info(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "info");
}

id objc_msgSend_infraDutyCycle(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "infraDutyCycle");
}

id objc_msgSend_infraInterfaceName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "infraInterfaceName");
}

id objc_msgSend_initByFindingInterfaceName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initByFindingInterfaceName");
}

id objc_msgSend_initDatapathMetricGetterAndFetcher(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initDatapathMetricGetterAndFetcher");
}

id objc_msgSend_initWithAC_problem_bitfield_TxBE_expiredCompletions_TxBE_failedCompletions_TxBE_noAckCompletions_TxBE_otherErrCompletions_TxBK_expiredCompletions_TxBK_failedCompletions_TxBK_noAckCompletions_TxBK_otherErrCompletions_TxVI_expiredCompletions_TxVI_failedCompletions_TxVI_noAckCompletions_TxVI_otherErrCompletions_TxVO_expiredCompletions_TxVO_failedCompletions_TxVO_noAckCompletions_TxVO_otherErrCompletions_bt_abort_bt_grant_bt_request_bt_uch_latency_cca_bin_completions_chipmodeerror_completions_expired_completions_internalerror_completions_ioerror_completions_noack_completions_nobuf_completions_noremotepeer_completions_noresources_completions_txfailure_roam_count_roam_duration_rssi_bin_snr_bin_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithAC_problem_bitfield:TxBE_expiredCompletions:TxBE_failedCompletions:TxBE_noAckCompletions:TxBE_otherErrCompletions:TxBK_expiredCompletions:TxBK_failedCompletions:TxBK_noAckCompletions:TxBK_otherErrCompletions:TxVI_expiredCompletions:TxVI_failedCompletions:TxVI_noAckCompletions:TxVI_otherErrCompletions:TxVO_expiredCompletions:TxVO_failedCompletions:TxVO_noAckCompletions:TxVO_otherErrCompletions:bt_abort:bt_grant:bt_request:bt_uch_latency:cca_bin:completions_chipmodeerror:completions_expired:completions_internalerror:completions_ioerror:completions_noack:completions_nobuf:completions_noremotepeer:completions_noresources:completions_txfailure:roam_count:roam_duration:rssi_bin:snr_bin:");
}

id objc_msgSend_initWithBool_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithBool:");
}

id objc_msgSend_initWithBytes_length_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithBytes:length:");
}

id objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithBytesNoCopy:length:freeWhenDone:");
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCapacity:");
}

id objc_msgSend_initWithContentsOfFile_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithContentsOfFile:options:error:");
}

id objc_msgSend_initWithContentsOfURL_configuration_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithContentsOfURL:configuration:error:");
}

id objc_msgSend_initWithContentsOfURL_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithContentsOfURL:error:");
}

id objc_msgSend_initWithData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithData:");
}

id objc_msgSend_initWithData_encoding_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithData:encoding:");
}

id objc_msgSend_initWithFeatureProviderArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithFeatureProviderArray:");
}

id objc_msgSend_initWithFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithFormat:");
}

id objc_msgSend_initWithInterfaceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithInterfaceName:");
}

id objc_msgSend_initWithKey_ascending_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithKey:ascending:");
}

id objc_msgSend_initWithLongLong_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithLongLong:");
}

id objc_msgSend_initWithMLModel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithMLModel:");
}

id objc_msgSend_initWithMachServiceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithMachServiceName:");
}

id objc_msgSend_initWithMessageGroupType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithMessageGroupType:");
}

id objc_msgSend_initWithObjects_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithObjects:");
}

id objc_msgSend_initWithOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithOptions:");
}

id objc_msgSend_initWithPBCodableData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithPBCodableData:");
}

id objc_msgSend_initWithPayload_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithPayload:");
}

id objc_msgSend_initWithServiceType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithServiceType:");
}

id objc_msgSend_initWithStall_stallProbability_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithStall:stallProbability:");
}

id objc_msgSend_initWithUnsignedLong_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithUnsignedLong:");
}

id objc_msgSend_initWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithUnsignedLongLong:");
}

id objc_msgSend_initWithXPCConnection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithXPCConnection:");
}

id objc_msgSend_initializeProbeCxt(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initializeProbeCxt");
}

id objc_msgSend_injectErrorOnNextCreateOrUpdateSample(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "injectErrorOnNextCreateOrUpdateSample");
}

id objc_msgSend_inputThroughput(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "inputThroughput");
}

id objc_msgSend_insertObject_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "insertObject:atIndex:");
}

id objc_msgSend_insertString_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "insertString:atIndex:");
}

id objc_msgSend_instanceMethodSignatureForSelector_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "instanceMethodSignatureForSelector:");
}

id objc_msgSend_instantiateAWDProtobufAndPopulateValues_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "instantiateAWDProtobufAndPopulateValues:");
}

id objc_msgSend_int32Value(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "int32Value");
}

id objc_msgSend_int64Value(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "int64Value");
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "intValue");
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "integerValue");
}

id objc_msgSend_interfaceNameToApple80211InstanceMap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "interfaceNameToApple80211InstanceMap");
}

id objc_msgSend_internalerror(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "internalerror");
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invalidate");
}

id objc_msgSend_invocationWithMethodSignature_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invocationWithMethodSignature:");
}

id objc_msgSend_invoke(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invoke");
}

id objc_msgSend_ioerror(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ioerror");
}

id objc_msgSend_iorMessagePopulator(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "iorMessagePopulator");
}

id objc_msgSend_ior_persist_delay_seconds(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ior_persist_delay_seconds");
}

id objc_msgSend_ior_rescan_budget_exploratory_seconds(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ior_rescan_budget_exploratory_seconds");
}

id objc_msgSend_ior_rescan_budget_less_than_previous_max_channels_seconds(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ior_rescan_budget_less_than_previous_max_channels_seconds");
}

id objc_msgSend_ior_rescan_new_phy_delay_seconds(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ior_rescan_new_phy_delay_seconds");
}

id objc_msgSend_is2GBand(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "is2GBand");
}

id objc_msgSend_isAXAssociatoin(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isAXAssociatoin");
}

id objc_msgSend_isAnalyticsProcessorAllowed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isAnalyticsProcessorAllowed");
}

id objc_msgSend_isAssociated(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isAssociated");
}

id objc_msgSend_isAssociatedAtStudyEnd(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isAssociatedAtStudyEnd");
}

id objc_msgSend_isAssociatedStateKnown(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isAssociatedStateKnown");
}

id objc_msgSend_isCaptive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCaptive");
}

id objc_msgSend_isCaptiveServerIPResolved(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCaptiveServerIPResolved");
}

id objc_msgSend_isDatapathStudyShowingDPS_andReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDatapathStudyShowingDPS:andReply:");
}

id objc_msgSend_isDeletableFileAtPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDeletableFileAtPath:");
}

id objc_msgSend_isDpsValidationDisabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDpsValidationDisabled");
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToNumber_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToNumber:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isFGTraffic(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isFGTraffic");
}

id objc_msgSend_isForegroundTrafficPresent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isForegroundTrafficPresent");
}

id objc_msgSend_isGoodWiFiCondition_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isGoodWiFiCondition:");
}

id objc_msgSend_isHighAWDLActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isHighAWDLActivity:");
}

id objc_msgSend_isIPv4Address_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isIPv4Address:");
}

id objc_msgSend_isInternalScenario(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isInternalScenario");
}

id objc_msgSend_isKeyBagUnlocked(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isKeyBagUnlocked");
}

id objc_msgSend_isMemoryPressureRequestDeferred(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isMemoryPressureRequestDeferred");
}

id objc_msgSend_isNWActivityInProgress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isNWActivityInProgress");
}

id objc_msgSend_isPeerDiagnosticsTriggerAllowed_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPeerDiagnosticsTriggerAllowed:");
}

id objc_msgSend_isPingEnqueueFailing(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPingEnqueueFailing");
}

id objc_msgSend_isPriorityNetwork(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPriorityNetwork");
}

id objc_msgSend_isRepeatable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isRepeatable");
}

id objc_msgSend_isResetAllowedForKey_forPrefSelector_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isResetAllowedForKey:forPrefSelector:");
}

id objc_msgSend_isResetAllowedForQuickDPS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isResetAllowedForQuickDPS");
}

id objc_msgSend_isResetAllowedForSymptomsDPS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isResetAllowedForSymptomsDPS");
}

id objc_msgSend_isScoreBelowThreshold_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isScoreBelowThreshold:");
}

id objc_msgSend_isScoreBelowThreshold_type_instanceId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isScoreBelowThreshold:type:instanceId:");
}

id objc_msgSend_isTriggerDisconnect_currentSample_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isTriggerDisconnect:currentSample:");
}

id objc_msgSend_isUsingCustomDNSSettings(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isUsingCustomDNSSettings");
}

id objc_msgSend_isValid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isValid");
}

id objc_msgSend_isValidJSONObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isValidJSONObject:");
}

id objc_msgSend_isVendorApple(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isVendorApple");
}

id objc_msgSend_isWiFiAssociatedToNetwork(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isWiFiAssociatedToNetwork");
}

id objc_msgSend_isWiFiFragmentSamplingEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isWiFiFragmentSamplingEnabled");
}

id objc_msgSend_isWiFiInterfacePrimary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isWiFiInterfacePrimary");
}

id objc_msgSend_isWiFiNetworkCaptive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isWiFiNetworkCaptive");
}

id objc_msgSend_isWritingWAMessageToJsonAllowed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isWritingWAMessageToJsonAllowed");
}

id objc_msgSend_kRxBadFCS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "kRxBadFCS");
}

id objc_msgSend_kRxBadPLCP(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "kRxBadPLCP");
}

id objc_msgSend_kRxCRCGlitch(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "kRxCRCGlitch");
}

id objc_msgSend_kRxFrames(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "kRxFrames");
}

id objc_msgSend_kRxGoodPLCP(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "kRxGoodPLCP");
}

id objc_msgSend_kRxRetryBitSet(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "kRxRetryBitSet");
}

id objc_msgSend_kTxFrames(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "kTxFrames");
}

id objc_msgSend_kTxRetransmission(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "kTxRetransmission");
}

id objc_msgSend_key(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "key");
}

id objc_msgSend_keyBagLockStateChangeNotification(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyBagLockStateChangeNotification");
}

id objc_msgSend_keybagToken(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keybagToken");
}

id objc_msgSend_lTECoexDurationMS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lTECoexDurationMS");
}

id objc_msgSend_lanHealthAfterDecision(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lanHealthAfterDecision");
}

id objc_msgSend_lanHealthBeforeDecision(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lanHealthBeforeDecision");
}

id objc_msgSend_lastModifiedTimeInMillisecondEpoch(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastModifiedTimeInMillisecondEpoch");
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastObject");
}

id objc_msgSend_lastPB(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastPB");
}

id objc_msgSend_lastPBLength(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastPBLength");
}

id objc_msgSend_lastPBLock(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastPBLock");
}

id objc_msgSend_lastScanReason(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastScanReason");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "length");
}

id objc_msgSend_lengthOfBytesUsingEncoding_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lengthOfBytesUsingEncoding:");
}

id objc_msgSend_linkQualSampleAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "linkQualSampleAtIndex:");
}

id objc_msgSend_linkQualSamples(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "linkQualSamples");
}

id objc_msgSend_listener(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "listener");
}

id objc_msgSend_loadContentsOfURL_configuration_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadContentsOfURL:configuration:completionHandler:");
}

id objc_msgSend_localizedDescription(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localizedDescription");
}

id objc_msgSend_lock(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lock");
}

id objc_msgSend_logNestedDictionary_indent_prefix_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logNestedDictionary:indent:prefix:");
}

id objc_msgSend_longLongValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "longLongValue");
}

id objc_msgSend_managedConfiguration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "managedConfiguration");
}

id objc_msgSend_manufacturerElement(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "manufacturerElement");
}

id objc_msgSend_maxQueueFullDurMS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "maxQueueFullDurMS");
}

id objc_msgSend_maxRetries(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "maxRetries");
}

id objc_msgSend_mbfree(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mbfree");
}

id objc_msgSend_measurementDurMS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "measurementDurMS");
}

id objc_msgSend_medianCCA_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "medianCCA:");
}

id objc_msgSend_megaWiFiProfile(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "megaWiFiProfile");
}

id objc_msgSend_megawifiprofile_diagnostic_metrics_before_first_assoc(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "megawifiprofile_diagnostic_metrics_before_first_assoc");
}

id objc_msgSend_megawifiprofile_diagnostic_metrics_enabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "megawifiprofile_diagnostic_metrics_enabled");
}

id objc_msgSend_megawifiprofile_diagnostic_metrics_period_ms(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "megawifiprofile_diagnostic_metrics_period_ms");
}

id objc_msgSend_megawifiprofile_diagnostic_metrics_while_unassoc(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "megawifiprofile_diagnostic_metrics_while_unassoc");
}

id objc_msgSend_message(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "message");
}

id objc_msgSend_messageDelegate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "messageDelegate");
}

id objc_msgSend_messageForUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "messageForUUID:");
}

id objc_msgSend_messageStore(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "messageStore");
}

id objc_msgSend_messsageWasSubmittedWithUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "messsageWasSubmittedWithUUID:");
}

id objc_msgSend_methodForSelector_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "methodForSelector:");
}

id objc_msgSend_metricInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "metricInfo");
}

id objc_msgSend_metricName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "metricName");
}

id objc_msgSend_minutes_between_dps_wd(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minutes_between_dps_wd");
}

id objc_msgSend_minutes_between_fast_dps_wd_screen_off(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minutes_between_fast_dps_wd_screen_off");
}

id objc_msgSend_minutes_between_fast_dps_wd_screen_on(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minutes_between_fast_dps_wd_screen_on");
}

id objc_msgSend_minutes_between_peer_diagnostics_trigger_for_dns_stall(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minutes_between_peer_diagnostics_trigger_for_dns_stall");
}

id objc_msgSend_minutes_between_peer_diagnostics_trigger_for_other_issues(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minutes_between_peer_diagnostics_trigger_for_other_issues");
}

id objc_msgSend_minutes_between_slow_wifi_wd(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minutes_between_slow_wifi_wd");
}

id objc_msgSend_minutes_between_symptoms_dps_wd_screen_off(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minutes_between_symptoms_dps_wd_screen_off");
}

id objc_msgSend_minutes_between_symptoms_dps_wd_screen_on(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minutes_between_symptoms_dps_wd_screen_on");
}

id objc_msgSend_model(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "model");
}

id objc_msgSend_modelName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "modelName");
}

id objc_msgSend_modelNumber(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "modelNumber");
}

id objc_msgSend_modelWithContentsOfURL_configuration_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "modelWithContentsOfURL:configuration:error:");
}

id objc_msgSend_modelWithContentsOfURL_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "modelWithContentsOfURL:error:");
}

id objc_msgSend_monitoring(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "monitoring");
}

id objc_msgSend_mutableBytes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mutableBytes");
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mutableCopy");
}

id objc_msgSend_mutableFields(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mutableFields");
}

id objc_msgSend_mutexQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mutexQueue");
}

id objc_msgSend_netscoreAtStudyEnd(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "netscoreAtStudyEnd");
}

id objc_msgSend_netscoreAtStudyStart(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "netscoreAtStudyStart");
}

id objc_msgSend_netscoreHealthAfterDecision(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "netscoreHealthAfterDecision");
}

id objc_msgSend_netscoreHealthBeforeDecision(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "netscoreHealthBeforeDecision");
}

id objc_msgSend_networkName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "networkName");
}

id objc_msgSend_networkServiceID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "networkServiceID");
}

id objc_msgSend_newBSSID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newBSSID");
}

id objc_msgSend_newlineCharacterSet(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newlineCharacterSet");
}

id objc_msgSend_nextObject(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nextObject");
}

id objc_msgSend_noAck(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "noAck");
}

id objc_msgSend_noBuf(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "noBuf");
}

id objc_msgSend_noResources(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "noResources");
}

id objc_msgSend_noack(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "noack");
}

id objc_msgSend_nobuf(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nobuf");
}

id objc_msgSend_noremotepeer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "noremotepeer");
}

id objc_msgSend_noresources(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "noresources");
}

id objc_msgSend_now(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "now");
}

id objc_msgSend_nowCacheUsageForTelemetry(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nowCacheUsageForTelemetry");
}

id objc_msgSend_numIpv4DnsServers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numIpv4DnsServers");
}

id objc_msgSend_numIpv6DnsServers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numIpv6DnsServers");
}

id objc_msgSend_numLocalDnsServers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numLocalDnsServers");
}

id objc_msgSend_numRemoteDnsServers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numRemoteDnsServers");
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithFloat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithFloat:");
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithInt:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_numberWithLongLong_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithLongLong:");
}

id objc_msgSend_numberWithUnsignedInt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedInt:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_numberWithUnsignedLong_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedLong:");
}

id objc_msgSend_numberWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedLongLong:");
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectAtIndex:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectEnumerator(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectEnumerator");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_offChanDurMS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "offChanDurMS");
}

id objc_msgSend_oldCacheUsageForTelemetry(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "oldCacheUsageForTelemetry");
}

id objc_msgSend_options(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "options");
}

id objc_msgSend_originalClassName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "originalClassName");
}

id objc_msgSend_osTransactionComplete_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "osTransactionComplete:");
}

id objc_msgSend_osTransactionCreate_transaction_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "osTransactionCreate:transaction:");
}

id objc_msgSend_outputThroughput(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "outputThroughput");
}

id objc_msgSend_packetLoss(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "packetLoss");
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "path");
}

id objc_msgSend_pathForResource_ofType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pathForResource:ofType:");
}

id objc_msgSend_payload(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "payload");
}

id objc_msgSend_pbConverter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pbConverter");
}

id objc_msgSend_peerStats(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "peerStats");
}

id objc_msgSend_performPruneBasedOnStoreSizeAndSave(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "performPruneBasedOnStoreSizeAndSave");
}

id objc_msgSend_persist(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "persist");
}

id objc_msgSend_persistIORObjects_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "persistIORObjects:");
}

id objc_msgSend_persistentDomainForName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "persistentDomainForName:");
}

id objc_msgSend_phyRxActivityDurMS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "phyRxActivityDurMS");
}

id objc_msgSend_phyTxActivityDurMS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "phyTxActivityDurMS");
}

id objc_msgSend_populateApProfile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "populateApProfile:");
}

id objc_msgSend_populateChannelInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "populateChannelInfo:");
}

id objc_msgSend_predicateWithFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predicateWithFormat:");
}

id objc_msgSend_predictionFromFeatures_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predictionFromFeatures:completionHandler:");
}

id objc_msgSend_predictionFromFeatures_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predictionFromFeatures:error:");
}

id objc_msgSend_predictionFromFeatures_options_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predictionFromFeatures:options:completionHandler:");
}

id objc_msgSend_predictionFromFeatures_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predictionFromFeatures:options:error:");
}

id objc_msgSend_prediction_probability_threshold(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "prediction_probability_threshold");
}

id objc_msgSend_prediction_probability_threshold_macos(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "prediction_probability_threshold_macos");
}

id objc_msgSend_predictionsFromBatch_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predictionsFromBatch:options:error:");
}

id objc_msgSend_preferences(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preferences");
}

id objc_msgSend_prepopulateMessage_forProcess_groupType_andReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "prepopulateMessage:forProcess:groupType:andReply:");
}

id objc_msgSend_prepopulateMessageWithinPopulatorBlock_forProcess_groupType_andReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "prepopulateMessageWithinPopulatorBlock:forProcess:groupType:andReply:");
}

id objc_msgSend_probeResultAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "probeResultAtIndex:");
}

id objc_msgSend_probeResults(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "probeResults");
}

id objc_msgSend_problemAC(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "problemAC");
}

id objc_msgSend_processDatapathMetricStream_withDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processDatapathMetricStream:withDate:");
}

id objc_msgSend_processIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processIdentifier");
}

id objc_msgSend_processInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processInfo");
}

id objc_msgSend_processMetricDictOffEngine_data_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processMetricDictOffEngine:data:");
}

id objc_msgSend_processMetricDictOnEngine_data_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processMetricDictOnEngine:data:");
}

id objc_msgSend_processTokenToGroupTypeMap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processTokenToGroupTypeMap");
}

id objc_msgSend_processTokenToXPCConnectionMap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processTokenToXPCConnectionMap");
}

id objc_msgSend_processWAMessageMetric_data_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processWAMessageMetric:data:");
}

id objc_msgSend_processWiFiAnalyticsManagedFault_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processWiFiAnalyticsManagedFault:");
}

id objc_msgSend_processWiFiAnalyticsMessageJSONFilesInTmpDir_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processWiFiAnalyticsMessageJSONFilesInTmpDir:");
}

id objc_msgSend_processWiFiAnalyticsMessageWAMFile_file_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processWiFiAnalyticsMessageWAMFile:file:");
}

id objc_msgSend_profileChangedCallback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "profileChangedCallback:");
}

id objc_msgSend_profileLoaded(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "profileLoaded");
}

id objc_msgSend_propertyListWithData_options_format_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "propertyListWithData:options:format:error:");
}

id objc_msgSend_qDpsStats(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "qDpsStats");
}

id objc_msgSend_qeuedPackets(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "qeuedPackets");
}

id objc_msgSend_queryDebugConfigurationForPeer_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queryDebugConfigurationForPeer:error:");
}

id objc_msgSend_queryInfraInterfaceInstanceAndChip(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queryInfraInterfaceInstanceAndChip");
}

id objc_msgSend_queue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queue");
}

id objc_msgSend_quickDpsResetRecommendation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "quickDpsResetRecommendation");
}

id objc_msgSend_quickDpsTimeSincePreviousTriggerMinutes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "quickDpsTimeSincePreviousTriggerMinutes");
}

id objc_msgSend_rC1CoexDurationMS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rC1CoexDurationMS");
}

id objc_msgSend_rC2CoexDurationMS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rC2CoexDurationMS");
}

id objc_msgSend_rSSI(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rSSI");
}

id objc_msgSend_raise_format_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "raise:format:");
}

id objc_msgSend_rangeOfCharacterFromSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rangeOfCharacterFromSet:");
}

id objc_msgSend_rangeOfString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rangeOfString:");
}

id objc_msgSend_recommendActionFromData_andReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "recommendActionFromData:andReply:");
}

id objc_msgSend_recommendReset_currentSample_acList_qDpsStat_chipNumber_dpsSnapshot_originalCCA_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "recommendReset:currentSample:acList:qDpsStat:chipNumber:dpsSnapshot:originalCCA:");
}

id objc_msgSend_recommendSymptomsDpsRecovery_symptomsDnsStats_awdlState_currentSymptomsCondition_isLANPingSuccessful_appUsage_averageCCA_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "recommendSymptomsDpsRecovery:symptomsDnsStats:awdlState:currentSymptomsCondition:isLANPingSuccessful:appUsage:averageCCA:");
}

id objc_msgSend_recommendationEngine(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "recommendationEngine");
}

id objc_msgSend_recoveryAction(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "recoveryAction");
}

id objc_msgSend_recoveryReason(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "recoveryReason");
}

id objc_msgSend_registerDefaults_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerDefaults:");
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeAllObjects");
}

id objc_msgSend_removeItemAtPath_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeItemAtPath:error:");
}

id objc_msgSend_removeItemAtURL_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeItemAtURL:error:");
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObject:");
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_removeObserver_forKeyPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObserver:forKeyPath:");
}

id objc_msgSend_removeObserver_name_object_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObserver:name:object:");
}

id objc_msgSend_repeatableValues(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "repeatableValues");
}

id objc_msgSend_replaceObjectAtIndex_withObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "replaceObjectAtIndex:withObject:");
}

id objc_msgSend_reportWiFiConnectionQuality_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportWiFiConnectionQuality:");
}

id objc_msgSend_requestWithTestID_configuration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestWithTestID:configuration:");
}

id objc_msgSend_reset_awdl_activity_threshold(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reset_awdl_activity_threshold");
}

id objc_msgSend_reset_cca_bin_threshold(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reset_cca_bin_threshold");
}

id objc_msgSend_reset_legacy_chipset_cca_bin_threshold(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reset_legacy_chipset_cca_bin_threshold");
}

id objc_msgSend_reset_pd_cca_threshold(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reset_pd_cca_threshold");
}

id objc_msgSend_reset_pd_rssi_threshold(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reset_pd_rssi_threshold");
}

id objc_msgSend_reset_rssi_bin_threshold(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reset_rssi_bin_threshold");
}

id objc_msgSend_reset_score_threshold(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reset_score_threshold");
}

id objc_msgSend_residentTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "residentTime");
}

id objc_msgSend_resolveAppleCaptiveServer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resolveAppleCaptiveServer");
}

id objc_msgSend_resourcePath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resourcePath");
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resume");
}

id objc_msgSend_retainArguments(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "retainArguments");
}

id objc_msgSend_roamCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "roamCount");
}

id objc_msgSend_roam_count(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "roam_count");
}

id objc_msgSend_roam_duration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "roam_duration");
}

id objc_msgSend_rotateUUIDsForMessage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rotateUUIDsForMessage:");
}

id objc_msgSend_rssiAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rssiAtIndex:");
}

id objc_msgSend_rssiValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rssiValue");
}

id objc_msgSend_rssi_bin(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rssi_bin");
}

id objc_msgSend_rssis(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rssis");
}

id objc_msgSend_rssisCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rssisCount");
}

id objc_msgSend_rttGatewayBE(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rttGatewayBE");
}

id objc_msgSend_rttGatewayBK(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rttGatewayBK");
}

id objc_msgSend_rttGatewayVI(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rttGatewayVI");
}

id objc_msgSend_rttGatewayVO(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rttGatewayVO");
}

id objc_msgSend_run(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "run");
}

id objc_msgSend_runDiagnostics_configuration_update_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "runDiagnostics:configuration:update:reply:");
}

id objc_msgSend_runIOLegendTest(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "runIOLegendTest");
}

id objc_msgSend_rxAmpduTxBaMismatch(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rxAmpduTxBaMismatch");
}

id objc_msgSend_rxCRSErrs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rxCRSErrs");
}

id objc_msgSend_rxDecryErrs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rxDecryErrs");
}

id objc_msgSend_rxDupErrs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rxDupErrs");
}

id objc_msgSend_rxFCSErrs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rxFCSErrs");
}

id objc_msgSend_rxFrames(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rxFrames");
}

id objc_msgSend_rxGoodPlcps(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rxGoodPlcps");
}

id objc_msgSend_rxOvflErrs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rxOvflErrs");
}

id objc_msgSend_rxPLCPErrs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rxPLCPErrs");
}

id objc_msgSend_rxPhyRate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rxPhyRate");
}

id objc_msgSend_rxReplayErrs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rxReplayErrs");
}

id objc_msgSend_rxRetries(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rxRetries");
}

id objc_msgSend_rxThroughput(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rxThroughput");
}

id objc_msgSend_sNR(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sNR");
}

id objc_msgSend_scanActivity(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scanActivity");
}

id objc_msgSend_scanCharactersFromSet_intoString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scanCharactersFromSet:intoString:");
}

id objc_msgSend_scanHexInt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scanHexInt:");
}

id objc_msgSend_scanPredicatesNotYetFoundAndMutable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scanPredicatesNotYetFoundAndMutable");
}

id objc_msgSend_scanUpToCharactersFromSet_intoString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scanUpToCharactersFromSet:intoString:");
}

id objc_msgSend_scannerWithString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scannerWithString:");
}

id objc_msgSend_scheduleWithQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scheduleWithQueue:");
}

id objc_msgSend_scheduledTimerWithTimeInterval_repeats_block_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scheduledTimerWithTimeInterval:repeats:block:");
}

id objc_msgSend_screenStateOn(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "screenStateOn");
}

id objc_msgSend_sdb(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sdb");
}

id objc_msgSend_selector(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "selector");
}

id objc_msgSend_serviceName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "serviceName");
}

id objc_msgSend_setAnalyticsAgeOutTimeIntervalSecs_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAnalyticsAgeOutTimeIntervalSecs:");
}

id objc_msgSend_setAnalyticsProcessingTimeIntervalSecs_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAnalyticsProcessingTimeIntervalSecs:");
}

id objc_msgSend_setAnalyticsProcessor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAnalyticsProcessor:");
}

id objc_msgSend_setAnalyticsProcessorIsReady_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAnalyticsProcessorIsReady:");
}

id objc_msgSend_setArgument_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setArgument:atIndex:");
}

id objc_msgSend_setBoolValue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBoolValue:");
}

id objc_msgSend_setCachedChannelsCountPerIORPopulatable_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCachedChannelsCountPerIORPopulatable:");
}

id objc_msgSend_setCachedIOPopAvailableChannels_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCachedIOPopAvailableChannels:");
}

id objc_msgSend_setCachedIOReportSample_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCachedIOReportSample:");
}

id objc_msgSend_setCachedIOReportSubbedChannels_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCachedIOReportSubbedChannels:");
}

id objc_msgSend_setCachedPredicatesNotYetFound_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCachedPredicatesNotYetFound:");
}

id objc_msgSend_setCachedUsage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCachedUsage:");
}

id objc_msgSend_setChipModeError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setChipModeError:");
}

id objc_msgSend_setCoredata_diagnostic_metrics_enabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCoredata_diagnostic_metrics_enabled:");
}

id objc_msgSend_setDatapathMetricGetter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDatapathMetricGetter:");
}

id objc_msgSend_setDateFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDateFormat:");
}

id objc_msgSend_setDbDelegate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDbDelegate:");
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDelegate:");
}

id objc_msgSend_setDeploymentMetricDiffDays_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDeploymentMetricDiffDays:");
}

id objc_msgSend_setDisable_dps_wd_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDisable_dps_wd:");
}

id objc_msgSend_setDisable_fast_dps_validation_for_test_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDisable_fast_dps_validation_for_test:");
}

id objc_msgSend_setDisable_fast_dps_wd_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDisable_fast_dps_wd:");
}

id objc_msgSend_setDisable_recommendation_engine_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDisable_recommendation_engine:");
}

id objc_msgSend_setDisable_slow_wifi_dps_is_priority_network_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDisable_slow_wifi_dps_is_priority_network:");
}

id objc_msgSend_setDisable_slow_wifi_wd_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDisable_slow_wifi_wd:");
}

id objc_msgSend_setDispatchQueueAndAddObservers_withGetter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDispatchQueueAndAddObservers:withGetter:");
}

id objc_msgSend_setDnsStudyTransaction_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDnsStudyTransaction:");
}

id objc_msgSend_setDns_symptoms_duration_between_samples_after_trap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDns_symptoms_duration_between_samples_after_trap:");
}

id objc_msgSend_setDns_symptoms_duration_between_samples_before_trap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDns_symptoms_duration_between_samples_before_trap:");
}

id objc_msgSend_setDns_symptoms_interrogation_sample_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDns_symptoms_interrogation_sample_count:");
}

id objc_msgSend_setDns_symptoms_trap_evaluated_at_sample_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDns_symptoms_trap_evaluated_at_sample:");
}

id objc_msgSend_setDpsQuickRecoveryWDBudgetDict_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDpsQuickRecoveryWDBudgetDict:");
}

id objc_msgSend_setDpsStats_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDpsStats:");
}

id objc_msgSend_setDpsStudyTransaction_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDpsStudyTransaction:");
}

id objc_msgSend_setDpsWDBudgetDict_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDpsWDBudgetDict:");
}

id objc_msgSend_setDps_capture_evaluated_at_sample_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDps_capture_evaluated_at_sample:");
}

id objc_msgSend_setDps_duration_between_samples_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDps_duration_between_samples:");
}

id objc_msgSend_setDps_interrogation_sample_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDps_interrogation_sample_count:");
}

id objc_msgSend_setDps_report_sent_after_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDps_report_sent_after:");
}

id objc_msgSend_setDps_stall_dur_for_wd_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDps_stall_dur_for_wd:");
}

id objc_msgSend_setDps_symptoms_average_cca_threshold_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDps_symptoms_average_cca_threshold:");
}

id objc_msgSend_setDps_trap_evaluated_at_sample_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDps_trap_evaluated_at_sample:");
}

id objc_msgSend_setDps_wd_cca_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDps_wd_cca:");
}

id objc_msgSend_setDropped_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDropped:");
}

id objc_msgSend_setEventID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEventID:");
}

id objc_msgSend_setExecuteBeforePossibleEagerExit_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setExecuteBeforePossibleEagerExit:");
}

id objc_msgSend_setExpired_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setExpired:");
}

id objc_msgSend_setExportedInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setExportedInterface:");
}

id objc_msgSend_setExportedObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setExportedObject:");
}

id objc_msgSend_setFailNextCreateOrUpdateSample_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFailNextCreateOrUpdateSample:");
}

id objc_msgSend_setFirmwareFreePacket_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFirmwareFreePacket:");
}

id objc_msgSend_setForceLifetimeExp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setForceLifetimeExp:");
}

id objc_msgSend_setForceStudyErrorFromMsg_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setForceStudyErrorFromMsg:");
}

id objc_msgSend_setForce_dps_recommend_always_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setForce_dps_recommend_always:");
}

id objc_msgSend_setGetter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setGetter:");
}

id objc_msgSend_setInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInfo:");
}

id objc_msgSend_setInfraInterfaceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInfraInterfaceName:");
}

id objc_msgSend_setInt32Value_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInt32Value:");
}

id objc_msgSend_setInt64Value_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInt64Value:");
}

id objc_msgSend_setInterfaceNameToApple80211InstanceMap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInterfaceNameToApple80211InstanceMap:");
}

id objc_msgSend_setInterruptionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInterruptionHandler:");
}

id objc_msgSend_setInvalidationHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInvalidationHandler:");
}

id objc_msgSend_setIorMessagePopulator_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIorMessagePopulator:");
}

id objc_msgSend_setIor_persist_delay_seconds_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIor_persist_delay_seconds:");
}

id objc_msgSend_setIor_rescan_budget_exploratory_seconds_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIor_rescan_budget_exploratory_seconds:");
}

id objc_msgSend_setIor_rescan_budget_less_than_previous_max_channels_seconds_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIor_rescan_budget_less_than_previous_max_channels_seconds:");
}

id objc_msgSend_setIor_rescan_new_phy_delay_seconds_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIor_rescan_new_phy_delay_seconds:");
}

id objc_msgSend_setIsAssociated_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsAssociated:");
}

id objc_msgSend_setIsAssociatedStateKnown_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsAssociatedStateKnown:");
}

id objc_msgSend_setIsMemoryPressureRequestDeferred_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsMemoryPressureRequestDeferred:");
}

id objc_msgSend_setLastModifiedTimeInMillisecondEpoch_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastModifiedTimeInMillisecondEpoch:");
}

id objc_msgSend_setLastPB_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastPB:");
}

id objc_msgSend_setLastPBLength_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastPBLength:");
}

id objc_msgSend_setLastPBLock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastPBLock:");
}

id objc_msgSend_setLength_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLength:");
}

id objc_msgSend_setManagedConfiguration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setManagedConfiguration:");
}

id objc_msgSend_setMaxRetries_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMaxRetries:");
}

id objc_msgSend_setMcConnection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMcConnection:");
}

id objc_msgSend_setMegawifiprofile_diagnostic_metrics_before_first_assoc_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMegawifiprofile_diagnostic_metrics_before_first_assoc:");
}

id objc_msgSend_setMegawifiprofile_diagnostic_metrics_enabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMegawifiprofile_diagnostic_metrics_enabled:");
}

id objc_msgSend_setMegawifiprofile_diagnostic_metrics_period_ms_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMegawifiprofile_diagnostic_metrics_period_ms:");
}

id objc_msgSend_setMegawifiprofile_diagnostic_metrics_while_unassoc_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMegawifiprofile_diagnostic_metrics_while_unassoc:");
}

id objc_msgSend_setMessageDelegate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMessageDelegate:");
}

id objc_msgSend_setMessageStore_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMessageStore:");
}

id objc_msgSend_setMetricID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMetricID:");
}

id objc_msgSend_setMinutes_between_dps_wd_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMinutes_between_dps_wd:");
}

id objc_msgSend_setMinutes_between_fast_dps_wd_screen_off_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMinutes_between_fast_dps_wd_screen_off:");
}

id objc_msgSend_setMinutes_between_fast_dps_wd_screen_on_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMinutes_between_fast_dps_wd_screen_on:");
}

id objc_msgSend_setMinutes_between_peer_diagnostics_trigger_for_dns_stall_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMinutes_between_peer_diagnostics_trigger_for_dns_stall:");
}

id objc_msgSend_setMinutes_between_peer_diagnostics_trigger_for_other_issues_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMinutes_between_peer_diagnostics_trigger_for_other_issues:");
}

id objc_msgSend_setMinutes_between_slow_wifi_wd_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMinutes_between_slow_wifi_wd:");
}

id objc_msgSend_setMinutes_between_symptoms_dps_wd_screen_off_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMinutes_between_symptoms_dps_wd_screen_off:");
}

id objc_msgSend_setMinutes_between_symptoms_dps_wd_screen_on_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMinutes_between_symptoms_dps_wd_screen_on:");
}

id objc_msgSend_setMonitoring_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMonitoring:");
}

id objc_msgSend_setNoAck_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNoAck:");
}

id objc_msgSend_setNoBuf_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNoBuf:");
}

id objc_msgSend_setNoResources_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNoResources:");
}

id objc_msgSend_setNowCacheUsageForTelemetry_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNowCacheUsageForTelemetry:");
}

id objc_msgSend_setNumRoamSamples_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNumRoamSamples:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setOldCacheUsageForTelemetry_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOldCacheUsageForTelemetry:");
}

id objc_msgSend_setPayload_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPayload:");
}

id objc_msgSend_setPersistenceDelegate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPersistenceDelegate:");
}

id objc_msgSend_setPersistentDomain_forName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPersistentDomain:forName:");
}

id objc_msgSend_setPrediction_probability_threshold_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPrediction_probability_threshold:");
}

id objc_msgSend_setPrediction_probability_threshold_macos_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPrediction_probability_threshold_macos:");
}

id objc_msgSend_setPreferences_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPreferences:");
}

id objc_msgSend_setProcessTokenToGroupTypeMap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProcessTokenToGroupTypeMap:");
}

id objc_msgSend_setProfileLoaded_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProfileLoaded:");
}

id objc_msgSend_setQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setQueue:");
}

id objc_msgSend_setReset_awdl_activity_threshold_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setReset_awdl_activity_threshold:");
}

id objc_msgSend_setReset_cca_bin_threshold_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setReset_cca_bin_threshold:");
}

id objc_msgSend_setReset_legacy_chipset_cca_bin_threshold_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setReset_legacy_chipset_cca_bin_threshold:");
}

id objc_msgSend_setReset_pd_cca_threshold_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setReset_pd_cca_threshold:");
}

id objc_msgSend_setReset_pd_rssi_threshold_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setReset_pd_rssi_threshold:");
}

id objc_msgSend_setReset_rssi_bin_threshold_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setReset_rssi_bin_threshold:");
}

id objc_msgSend_setReset_score_threshold_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setReset_score_threshold:");
}

id objc_msgSend_setSelector_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSelector:");
}

id objc_msgSend_setSize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSize:");
}

id objc_msgSend_setSlow_wifi_duration_between_samples_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSlow_wifi_duration_between_samples:");
}

id objc_msgSend_setSlow_wifi_interrogation_sample_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSlow_wifi_interrogation_sample_count:");
}

id objc_msgSend_setSlow_wifi_report_sent_after_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSlow_wifi_report_sent_after:");
}

id objc_msgSend_setSlowwifiStudyTransaction_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSlowwifiStudyTransaction:");
}

id objc_msgSend_setStoreSize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStoreSize:");
}

id objc_msgSend_setStringValue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStringValue:");
}

id objc_msgSend_setSubMessageValue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSubMessageValue:");
}

id objc_msgSend_setSubmissionDelegate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSubmissionDelegate:");
}

id objc_msgSend_setTarget_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTarget:");
}

id objc_msgSend_setTestDateDiffDays_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTestDateDiffDays:");
}

id objc_msgSend_setTimestamp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTimestamp:");
}

id objc_msgSend_setToken_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setToken:");
}

id objc_msgSend_setTxFailure_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTxFailure:");
}

id objc_msgSend_setUint32Value_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUint32Value:");
}

id objc_msgSend_setUint64Value_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUint64Value:");
}

id objc_msgSend_setValue_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setValue:forKey:");
}

id objc_msgSend_setValue_forKeyPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setValue:forKeyPath:");
}

id objc_msgSend_setValueForKeyToUserDefaults_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setValueForKeyToUserDefaults:forKey:");
}

id objc_msgSend_setWifiChipSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiChipSet:");
}

id objc_msgSend_setWithObjects_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWithObjects:");
}

id objc_msgSend_setWork_report_logs_enabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWork_report_logs_enabled:");
}

id objc_msgSend_setWork_report_seconds_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWork_report_seconds:");
}

id objc_msgSend_setupAnalyticsProcessorWithCompletionBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupAnalyticsProcessorWithCompletionBlock:");
}

id objc_msgSend_sharedActivityManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedActivityManager");
}

id objc_msgSend_sharedConnection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedConnection");
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedInstance");
}

id objc_msgSend_sharedObject(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedObject");
}

id objc_msgSend_shouldEnableXPCStore(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldEnableXPCStore");
}

id objc_msgSend_shouldProcessAnalyticsImmediately(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldProcessAnalyticsImmediately");
}

id objc_msgSend_signalPotentialNewIORChannels(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "signalPotentialNewIORChannels");
}

id objc_msgSend_signatureWithDomain_type_subType_subtypeContext_detectedProcess_triggerThresholdValues_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "signatureWithDomain:type:subType:subtypeContext:detectedProcess:triggerThresholdValues:");
}

id objc_msgSend_size(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "size");
}

id objc_msgSend_slowNotice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "slowNotice");
}

id objc_msgSend_slowWiFiNotificationReceivedDuringStudy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "slowWiFiNotificationReceivedDuringStudy");
}

id objc_msgSend_slowWiFiStudyInProgress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "slowWiFiStudyInProgress");
}

id objc_msgSend_slow_wifi_duration_between_samples(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "slow_wifi_duration_between_samples");
}

id objc_msgSend_slow_wifi_interrogation_sample_count(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "slow_wifi_interrogation_sample_count");
}

id objc_msgSend_slow_wifi_report_sent_after(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "slow_wifi_report_sent_after");
}

id objc_msgSend_slowwifiStudyTransaction(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "slowwifiStudyTransaction");
}

id objc_msgSend_smartCCADesenseSupported(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "smartCCADesenseSupported");
}

id objc_msgSend_snapshot(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "snapshot");
}

id objc_msgSend_snapshotWithSignature_duration_events_payload_actions_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "snapshotWithSignature:duration:events:payload:actions:reply:");
}

id objc_msgSend_snrAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "snrAtIndex:");
}

id objc_msgSend_snrValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "snrValue");
}

id objc_msgSend_snr_bin(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "snr_bin");
}

id objc_msgSend_snrs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "snrs");
}

id objc_msgSend_snrsCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "snrsCount");
}

id objc_msgSend_sortedArrayUsingDescriptors_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sortedArrayUsingDescriptors:");
}

id objc_msgSend_sortedArrayUsingSelector_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sortedArrayUsingSelector:");
}

id objc_msgSend_sortedByLastAccess(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sortedByLastAccess");
}

id objc_msgSend_stall(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stall");
}

id objc_msgSend_stallNotifications(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stallNotifications");
}

id objc_msgSend_stallProbability(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stallProbability");
}

id objc_msgSend_standardUserDefaults(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "standardUserDefaults");
}

id objc_msgSend_startMonitoring(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startMonitoring");
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "state");
}

id objc_msgSend_stopMonitoring(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopMonitoring");
}

id objc_msgSend_storeQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "storeQueue");
}

id objc_msgSend_storeSize(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "storeSize");
}

id objc_msgSend_streamPBCodeable_additionalDictionaryItems_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "streamPBCodeable:additionalDictionaryItems:");
}

id objc_msgSend_string(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "string");
}

id objc_msgSend_stringByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringByAppendingPathComponent:");
}

id objc_msgSend_stringByReplacingOccurrencesOfString_withString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:");
}

id objc_msgSend_stringFromDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringFromDate:");
}

id objc_msgSend_stringValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringValue");
}

id objc_msgSend_stringWithCString_encoding_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringWithCString:encoding:");
}

id objc_msgSend_stringWithCapacity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringWithCapacity:");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_stringWithString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringWithString:");
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringWithUTF8String:");
}

id objc_msgSend_subMessageValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "subMessageValue");
}

id objc_msgSend_submissionDelegate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "submissionDelegate");
}

id objc_msgSend_submitDPEMessage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "submitDPEMessage:");
}

id objc_msgSend_submitFaultEvent_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "submitFaultEvent:error:");
}

id objc_msgSend_submitLqmMetrics_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "submitLqmMetrics:");
}

id objc_msgSend_submitMessage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "submitMessage:");
}

id objc_msgSend_submitSlowWiFiMessage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "submitSlowWiFiMessage:");
}

id objc_msgSend_submitterMap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "submitterMap");
}

id objc_msgSend_submitterMapCheck_group_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "submitterMapCheck:group:");
}

id objc_msgSend_substringFromIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "substringFromIndex:");
}

id objc_msgSend_substringToIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "substringToIndex:");
}

id objc_msgSend_substringWithRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "substringWithRange:");
}

id objc_msgSend_success(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "success");
}

id objc_msgSend_sumNSNumberForKey_dstDict_otherDict_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sumNSNumberForKey:dstDict:otherDict:");
}

id objc_msgSend_summarizeAnalyticsForNetwork_maxAgeInDays_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "summarizeAnalyticsForNetwork:maxAgeInDays:");
}

id objc_msgSend_suppressedReason(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "suppressedReason");
}

id objc_msgSend_suppressedReasonAsString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "suppressedReasonAsString:");
}

id objc_msgSend_suspend(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "suspend");
}

id objc_msgSend_symptom(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "symptom");
}

id objc_msgSend_symptomsDnsRecommendation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "symptomsDnsRecommendation");
}

id objc_msgSend_symptomsDnsStats(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "symptomsDnsStats");
}

id objc_msgSend_symptomsDnsTimeSincePreviousTriggerMinutes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "symptomsDnsTimeSincePreviousTriggerMinutes");
}

id objc_msgSend_symptomsDnsscreenStateOn(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "symptomsDnsscreenStateOn");
}

id objc_msgSend_symptomsFails(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "symptomsFails");
}

id objc_msgSend_synchronize(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "synchronize");
}

id objc_msgSend_tVPMActiveDurationMS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tVPMActiveDurationMS");
}

id objc_msgSend_temporaryDirectory(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "temporaryDirectory");
}

id objc_msgSend_testDateDiffDays(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "testDateDiffDays");
}

id objc_msgSend_testID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "testID");
}

id objc_msgSend_testThroughput(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "testThroughput");
}

id objc_msgSend_timeIntervalSince1970(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeIntervalSince1970");
}

id objc_msgSend_timeIntervalSinceDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeIntervalSinceDate:");
}

id objc_msgSend_timeIntervalSinceNow(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeIntervalSinceNow");
}

id objc_msgSend_timeIntervalSinceReferenceDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeIntervalSinceReferenceDate");
}

id objc_msgSend_timeSinceLastRecovery(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeSinceLastRecovery");
}

id objc_msgSend_timestamp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timestamp");
}

id objc_msgSend_token(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "token");
}

id objc_msgSend_totalDnsServers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "totalDnsServers");
}

id objc_msgSend_transformAndSubmitDNSMessageToCA_additionalInfo_timestamps_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "transformAndSubmitDNSMessageToCA:additionalInfo:timestamps:");
}

id objc_msgSend_transformAndSubmitDPSMessageToCA_additionalInfo_timestamps_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "transformAndSubmitDPSMessageToCA:additionalInfo:timestamps:");
}

id objc_msgSend_transformAndSubmitSWMessageToCA_additionalInfo_timestamps_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "transformAndSubmitSWMessageToCA:additionalInfo:timestamps:");
}

id objc_msgSend_triggerDeviceAnalyticsStoreMigrationAndReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "triggerDeviceAnalyticsStoreMigrationAndReply:");
}

id objc_msgSend_triggerDiagnosticPingWithrequestId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "triggerDiagnosticPingWithrequestId:");
}

id objc_msgSend_triggerDpsReset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "triggerDpsReset:");
}

id objc_msgSend_triggerPeerDiagnosticsStudy_symptomsDnsStats_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "triggerPeerDiagnosticsStudy:symptomsDnsStats:");
}

id objc_msgSend_triggerPeerDiscovery(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "triggerPeerDiscovery");
}

id objc_msgSend_triggerReassociation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "triggerReassociation:");
}

id objc_msgSend_trimTokenForLogging_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "trimTokenForLogging:");
}

id objc_msgSend_ts(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ts");
}

id objc_msgSend_txAMPDUDensity(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "txAMPDUDensity");
}

id objc_msgSend_txCompPkts(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "txCompPkts");
}

id objc_msgSend_txCompletionSnapshotBE(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "txCompletionSnapshotBE");
}

id objc_msgSend_txCompletionSnapshotBK(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "txCompletionSnapshotBK");
}

id objc_msgSend_txCompletionSnapshotVI(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "txCompletionSnapshotVI");
}

id objc_msgSend_txCompletionSnapshotVO(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "txCompletionSnapshotVO");
}

id objc_msgSend_txExpectedAMPDUDensity(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "txExpectedAMPDUDensity");
}

id objc_msgSend_txFails(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "txFails");
}

id objc_msgSend_txFailure(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "txFailure");
}

id objc_msgSend_txFrames(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "txFrames");
}

id objc_msgSend_txPhyRate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "txPhyRate");
}

id objc_msgSend_txRetries(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "txRetries");
}

id objc_msgSend_txSubPkts(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "txSubPkts");
}

id objc_msgSend_txfailure(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "txfailure");
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "type");
}

id objc_msgSend_uint32Value(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uint32Value");
}

id objc_msgSend_uint64Value(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uint64Value");
}

id objc_msgSend_unarchivedObjectOfClass_fromData_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unarchivedObjectOfClass:fromData:error:");
}

id objc_msgSend_unarchivedObjectOfClasses_fromData_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unarchivedObjectOfClasses:fromData:error:");
}

id objc_msgSend_underlyingErrors(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "underlyingErrors");
}

id objc_msgSend_unlock(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unlock");
}

id objc_msgSend_unpersistIORObjects(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unpersistIORObjects");
}

id objc_msgSend_unsignedIntValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedIntValue");
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedIntegerValue");
}

id objc_msgSend_unsignedLongLongValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedLongLongValue");
}

id objc_msgSend_unsignedLongValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedLongValue");
}

id objc_msgSend_updateDpsStats_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateDpsStats:");
}

id objc_msgSend_updateMessage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateMessage:");
}

id objc_msgSend_updatePayload_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updatePayload:");
}

id objc_msgSend_updateScreenState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateScreenState");
}

id objc_msgSend_updateSymptomsDPSRecoveryWDStatsForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateSymptomsDPSRecoveryWDStatsForKey:");
}

id objc_msgSend_updateTimeSincePreviousTriggerForQuickDps_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateTimeSincePreviousTriggerForQuickDps:");
}

id objc_msgSend_updateTimeSincePreviousTriggerForStudy_msgKey_dictKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateTimeSincePreviousTriggerForStudy:msgKey:dictKey:");
}

id objc_msgSend_updateTimerConfiguration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateTimerConfiguration");
}

id objc_msgSend_usbAction(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "usbAction");
}

id objc_msgSend_usbEventAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "usbEventAtIndex:");
}

id objc_msgSend_usbEventsCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "usbEventsCount");
}

id objc_msgSend_usbTotal(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "usbTotal");
}

id objc_msgSend_use(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "use");
}

id objc_msgSend_userInput(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "userInput");
}

id objc_msgSend_uuid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uuid");
}

id objc_msgSend_uuidToMessageMap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uuidToMessageMap");
}

id objc_msgSend_valueForEntitlement_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "valueForEntitlement:");
}

id objc_msgSend_valueForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "valueForKey:");
}

id objc_msgSend_wanHealthAfterDecision(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wanHealthAfterDecision");
}

id objc_msgSend_wanHealthBeforeDecision(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wanHealthBeforeDecision");
}

id objc_msgSend_whitespaceCharacterSet(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "whitespaceCharacterSet");
}

id objc_msgSend_wifiChipSet(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiChipSet");
}

id objc_msgSend_wifianalyticsTmpDir(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifianalyticsTmpDir");
}

id objc_msgSend_wifianalyticsTmpDirectory(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifianalyticsTmpDirectory");
}

id objc_msgSend_work_report_logs_enabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "work_report_logs_enabled");
}

id objc_msgSend_work_report_seconds(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "work_report_seconds");
}

id objc_msgSend_writeToFile_atomically_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeToFile:atomically:");
}

id objc_msgSend_writeToURL_atomically_encoding_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeToURL:atomically:encoding:error:");
}
