BOOL gpsd::util::getCurrentMachContinuousMinusMachAbsoluteTicks(gpsd::util *this, unint64_t *a2)
{
  uint64_t v3;
  _BOOL8 result;
  const char *v5;
  NSObject *v6;
  uint32_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8_t buf[4];
  unint64_t v14;
  __int16 v15;
  unint64_t v16;

  v11 = 0;
  v12 = 0;
  if (mach_get_times(&v12, &v11, 0))
  {
    v3 = qword_100100838;
    result = os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    *(_WORD *)buf = 0;
    v5 = "#gpsdUtil,mach_get_times failed";
    v6 = v3;
    v7 = 2;
LABEL_7:
    _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, v5, buf, v7);
    return 0;
  }
  v8 = v11;
  v9 = v12;
  if (v11 < v12)
  {
    v10 = qword_100100838;
    result = os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    *(_DWORD *)buf = 134349312;
    v14 = v9;
    v15 = 2050;
    v16 = v8;
    v5 = "#gpsdUtil,invalid tick relationship,abs,%{public}llu,cont,%{public}llu";
    v6 = v10;
    v7 = 22;
    goto LABEL_7;
  }
  *(_QWORD *)this = v11 - v12;
  return 1;
}

void gpsd::util::changeFileToClassD(FILE *this, __sFILE *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  const char *v6;
  uint64_t v7;
  NSObject *v8;
  uint32_t v9;
  int v10;
  uint8_t buf[4];
  int v12;

  if (this)
  {
    v2 = fileno(this);
    if (v2 == -1)
    {
      v4 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
      {
        v10 = *__error();
        *(_DWORD *)buf = 67240192;
        v12 = v10;
        v6 = "#utilFileClass,fileno failed,%{public}d";
        goto LABEL_12;
      }
    }
    else
    {
      v3 = v2;
      if (fcntl(v2, 63) != 4)
      {
        if (fcntl(v3, 64, 4))
        {
          v4 = qword_100100838;
          if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
          {
            v5 = *__error();
            *(_DWORD *)buf = 67240192;
            v12 = v5;
            v6 = "#utilFileClass,set class failed,%{public}d";
LABEL_12:
            v8 = v4;
            v9 = 8;
            goto LABEL_13;
          }
        }
      }
    }
  }
  else
  {
    v7 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v6 = "#utilFileClass,nullptr";
      v8 = v7;
      v9 = 2;
LABEL_13:
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, v6, buf, v9);
    }
  }
}

void ReceiverClockConversion::feedTimemark(ReceiverClockConversion *this, uint64_t a2, double a3, double a4)
{
  double v8;
  double v9;
  double v10;
  GpsdPlatformInfo *v11;
  int HaveRaven;
  NSObject *v13;
  uint64_t v14;
  const char *v15;
  NSObject *v16;
  uint32_t v17;
  double v18;
  uint64_t v19;
  _BYTE v20[12];
  __int16 v21;
  double v22;
  __int16 v23;
  void *v24;
  __int16 v25;
  double v26;
  char v27;
  void *__p;
  char v29;
  char v30;

  if (!ReceiverClockConversion::isRxClockValid(this, a2))
  {
    v14 = qword_100100830;
    if (!os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
      return;
    *(_DWORD *)v20 = 134349056;
    *(_QWORD *)&v20[4] = a2;
    v15 = "#rxClockConv,feedTimemark,invalid rxClockNs,%{public}llu";
    v16 = v14;
    v17 = 12;
    goto LABEL_19;
  }
  v8 = a3 + (double)(unint64_t)a2 * -0.000000001;
  if (*((_BYTE *)this + 32))
  {
    v9 = *((double *)this + 2) + vabdd_f64(a3, *((double *)this + 1)) * 0.00002 + a4 + 0.001;
    if (vabdd_f64(v8, *(double *)this) / v9 > 50.0)
    {
      v10 = v8 - *(double *)this;
      v11 = (GpsdPlatformInfo *)GpsdPlatformInfo::instance(0);
      HaveRaven = GpsdPlatformInfo::expectedToHaveRaven(v11);
      v13 = qword_100100838;
      if (HaveRaven)
      {
        if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)v20 = 134349824;
          *(double *)&v20[4] = v10;
          v21 = 2050;
          v22 = v9;
          v23 = 2050;
          v24 = *(void **)&v8;
          v25 = 2050;
          v26 = a4 + 0.001;
          _os_log_fault_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "#rxClockConv,disagreement,%{public}.3f,%{public}.3f,newRxClockToMct,%{public}.4f,newUncSec,%{public}.4f", v20, 0x2Au);
        }
        sub_100025B58(v20, "Monitoring");
        sub_100025B58(&v24, "RxClockConv");
        sub_100025B58(&__p, "TimemarkInconsistency");
        v30 = 0;
        gpsd::util::triggerDiagnosticReport((uint64_t)v20);
        if (v29 < 0)
          operator delete(__p);
        if (v27 < 0)
          operator delete(v24);
        if (SHIBYTE(v23) < 0)
          operator delete(*(void **)v20);
      }
      else if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v20 = 134349824;
        *(double *)&v20[4] = v10;
        v21 = 2050;
        v22 = v9;
        v23 = 2050;
        v24 = *(void **)&v8;
        v25 = 2050;
        v26 = a4 + 0.001;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#rxClockConv,disagreement,%{public}.3f,%{public}.3f,newRxClockToMct,%{public}.4f,newUncSec,%{public}.4f", v20, 0x2Au);
      }
    }
  }
  *(double *)this = v8;
  *((double *)this + 1) = a3;
  v18 = a4 + 0.001;
  *((double *)this + 2) = v18;
  *((_BYTE *)this + 32) = 1;
  v19 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v20 = 134349312;
    *(double *)&v20[4] = v8;
    v21 = 2050;
    v22 = v18;
    v15 = "#rxClockConv,method,timemark,rxClockToMct,%{public}.4f,uncSec,%{public}.4f";
    v16 = v19;
    v17 = 22;
LABEL_19:
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v15, v20, v17);
  }
}

void sub_100002448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_10002E1C0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void proto::gnss::TimeTransferData::~TimeTransferData(proto::gnss::TimeTransferData *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1000F9580;
  if ((proto::gnss::TimeTransferData *)proto::gnss::TimeTransferData::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  proto::gnss::TimeTransferData::~TimeTransferData(this);
  operator delete();
}

uint64_t GnssHal::PlatformNvStore::clear(GnssHal::PlatformNvStore *this, int a2)
{
  NSObject *v4;
  _BOOL8 v5;
  int v7;
  double v8;
  __int16 v9;
  int v10;

  v4 = qword_100100838;
  v5 = os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG);
  if (v5)
  {
    v7 = 134218240;
    v8 = (double)gpsd::util::getMachContinuousTimeNs((gpsd::util *)v5) * 0.000000001;
    v9 = 1024;
    v10 = a2;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "NvStore,clear,mach_cont_s,%.3f,id,%d", (uint8_t *)&v7, 0x12u);
  }
  std::mutex::lock((std::mutex *)((char *)this + 184));
  sub_100002600((uint64_t)this + 8, a2);
  sub_100002600((uint64_t)this + 96, a2);
  std::mutex::unlock((std::mutex *)((char *)this + 184));
  return 1;
}

void sub_1000025E4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_100002600(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  char v12;
  uint8_t buf[8];
  uint64_t v14;
  uint64_t v15;

  v2 = *(unsigned int *)(a1 + 24);
  if ((int)v2 >= 1)
  {
    v5 = 0;
    v6 = *(_QWORD *)(a1 + 16);
    while (1)
    {
      v7 = *(_QWORD *)(v6 + 8 * v5);
      if (*(_QWORD *)(v7 + 16) == a2)
        break;
      if (v2 == ++v5)
        return;
    }
    if ((int)v2 <= (int)v5)
    {
      wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(buf, 3, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 833);
      v8 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(buf, "CHECK failed: (index) < (size()): ");
      wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v12, v8);
      wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)buf);
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v5);
    }
    v9 = *(_QWORD *)(v7 + 24);
    if (*(char *)(v9 + 23) < 0)
      v10 = *(_QWORD *)(v9 + 8);
    else
      v10 = *(unsigned __int8 *)(v9 + 23);
    *(_QWORD *)(a1 + 80) -= v10;
    *(_QWORD *)buf = 0;
    v14 = 0;
    v15 = 0;
    sub_1000236BC(v7, a2, (gpsd::util **)buf);
    if ((sub_10000674C(a1, 0) & 1) == 0)
    {
      v11 = qword_100100830;
      if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "NvStore,clearFromCache,writeCacheToDisk failed", buf, 2u);
      }
    }
  }
}

void sub_100002738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void proto::gnss::TimeTransferDataExtend::~TimeTransferDataExtend(proto::gnss::TimeTransferDataExtend *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1000F95F8;
  if ((proto::gnss::TimeTransferDataExtend *)proto::gnss::TimeTransferDataExtend::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  proto::gnss::TimeTransferDataExtend::~TimeTransferDataExtend(this);
  operator delete();
}

void sub_1000027A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint8_t v4[16];

  v1 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v1 + 57))
    (*(void (**)(_QWORD))(*(_QWORD *)v1 + 32))(*(_QWORD *)(a1 + 32));
  v2 = *(_QWORD *)(v1 + 32);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  }
  else
  {
    v3 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v4 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "timer,handleEvent,callback,nullptr", v4, 2u);
    }
  }
}

void sub_100002840(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  v1 = *(NSObject **)(a1 + 48);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100024120;
  block[3] = &unk_1000F0D30;
  block[4] = a1;
  dispatch_async(v1, block);
}

void GnssHal::ExtensionsFireImpl::setGnssChipInfo(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  NSObject *v5;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  uint64_t *v9;
  __int16 v10;
  uint64_t *v11;

  v5 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 23) >= 0)
      v6 = a2;
    else
      v6 = (uint64_t *)*a2;
    if (*((char *)a3 + 23) >= 0)
      v7 = a3;
    else
      v7 = (uint64_t *)*a3;
    v8 = 136446467;
    v9 = v6;
    v10 = 2081;
    v11 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#gdm,chipVersion,%{public}s,serial,%{private}s", (uint8_t *)&v8, 0x16u);
  }
}

void sub_10000296C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  NSObject *v6;
  uint64_t v7;
  const void **v8;
  size_t v9;
  const void **v10;
  NSObject *v11;
  _BOOL8 v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void *__p;
  _BYTE *v21;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint8_t buf[4];
  int64_t v28;

  if ((a3 & 0x10000) == 0)
    goto LABEL_5;
  if (!a2)
    a2 = *(_QWORD *)(proto::gpsd::Request::default_instance_ + 128);
  if ((*(_BYTE *)(a2 + 20) & 1) == 0)
  {
LABEL_5:
    v6 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#gdm,INJECT_RTI_FILE missing arguments", (uint8_t *)&__p, 2u);
    }
    LODWORD(__p) = 4;
    v7 = *(_QWORD *)(a4 + 24);
    if (!v7)
      sub_100025CE8();
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v7 + 48))(v7, &__p);
    return;
  }
  v8 = *(const void ***)(a2 + 8);
  if (*((char *)v8 + 23) < 0)
  {
    v10 = v8;
    v8 = (const void **)*v8;
    v9 = (size_t)v10[1];
  }
  else
  {
    v9 = *((unsigned __int8 *)v8 + 23);
  }
  __p = 0;
  v21 = 0;
  v22 = 0;
  sub_100037A7C(&__p, v8, (uint64_t)v8 + v9, v9);
  v11 = qword_100100838;
  v12 = os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG);
  if (v12)
  {
    *(_DWORD *)buf = 134217984;
    v28 = v21 - (_BYTE *)__p;
    _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#gdm,Injecting RTI file,size,%zu", buf, 0xCu);
  }
  if (__p == v21)
  {
    v16 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "#gdm,INJECT_RTI_FILE data blob empty", buf, 2u);
    }
    *(_DWORD *)buf = 4;
    v17 = *(_QWORD *)(a4 + 24);
    if (!v17)
      sub_100025CE8();
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v17 + 48))(v17, buf);
    goto LABEL_34;
  }
  if (!*(_BYTE *)(a1 + 1848) && !*(_BYTE *)(a1 + 1896) && !*(_BYTE *)(a1 + 1897))
    *(double *)(a1 + 1864) = (double)gpsd::util::getMachContinuousTimeNs((gpsd::util *)v12) * 0.000000001;
  v13 = *(_QWORD *)(a1 + 8);
  v25[0] = off_1000F2898;
  v25[1] = a1;
  v26 = v25;
  sub_100031BDC((uint64_t)v23, a4);
  (*(void (**)(uint64_t, void **, _QWORD *, _BYTE *))(*(_QWORD *)v13 + 80))(v13, &__p, v25, v23);
  v14 = v24;
  if (v24 == v23)
  {
    v15 = 4;
    v14 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_29;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_29:
  v18 = v26;
  if (v26 == v25)
  {
    v19 = 4;
    v18 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_34;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_34:
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
}

void sub_100002C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16, char a17, uint64_t a18, uint64_t a19, char *a20)
{
  char *v20;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;

  v22 = a16;
  if (a16 == v20)
  {
    v23 = 4;
    v22 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  v24 = a20;
  if (a20 == &a17)
  {
    v25 = 4;
    v24 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_11;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_11:
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t proto::gpsd::InjectRtiFile::MergePartialFromCodedStream(proto::gpsd::InjectRtiFile *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  void *v7;
  uint64_t result;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
        *((_QWORD *)a2 + 1) = v5 + 1;
      }
      if ((_DWORD)TagFallback != 10)
        break;
      *((_DWORD *)this + 5) |= 1u;
      v7 = (void *)*((_QWORD *)this + 1);
      if (v7 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(a2, v7);
      if (!(_DWORD)result)
        return result;
      if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) == 0)
      return 0;
  }
  return 1;
}

void sub_100002DE0(uint64_t a1)
{
  dispatch_source_t v2;
  id *v3;
  uint64_t v4;
  NSObject *v5;
  dispatch_time_t v6;
  NSObject *v7;
  NSObject *v8;
  _QWORD v9[5];
  std::string v10;
  std::string v11;
  std::string v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;

  *(_DWORD *)(a1 + 1900) = 7;
  if (!*(_QWORD *)(a1 + 1904))
  {
    v2 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, **(dispatch_queue_t **)(a1 + 1936));
    *(_QWORD *)(a1 + 1904) = v2;
    if (!v2)
    {
      v8 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "null fStopCompletedTimer", buf, 2u);
        v8 = qword_100100838;
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        v14 = "/Library/Caches/com.apple.xbs/Sources/CoreGPS/Sources/Daemon/GpsdGnssDeviceManager.mm";
        v15 = 1026;
        v16 = 2894;
        v17 = 2082;
        v18 = "createStopCompletedTimer";
        _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: assertion failure in %{public}s", buf, 0x1Cu);
      }
      sub_100025B58(&v12, "assert");
      sub_100025B58(&v11, "createStopCompletedTimer");
      sub_100025B58(&v10, "null fStopCompletedTimer");
      gpsd::util::triggerDiagnosticReport((uint64_t)&v12, (__int128 *)&v11, (__int128 *)&v10);
      std::string::~string(&v10);
      std::string::~string(&v11);
      std::string::~string(&v12);
      __assert_rtn("createStopCompletedTimer", "GpsdGnssDeviceManager.mm", 2894, "false && \"null fStopCompletedTimer\"");
    }
    v3 = (id *)GpsdPreferences::instance(0);
    if (GpsdPreferences::bigPowerSwitch(v3))
      v4 = 6000000000;
    else
      v4 = 2000000000;
    v5 = *(NSObject **)(a1 + 1904);
    v6 = dispatch_walltime(0, v4);
    dispatch_source_set_timer(v5, v6, v4, 0xEE6B280uLL);
    v7 = *(NSObject **)(a1 + 1904);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100031548;
    v9[3] = &unk_1000F0D30;
    v9[4] = a1;
    dispatch_source_set_event_handler(v7, v9);
    dispatch_resume(*(dispatch_object_t *)(a1 + 1904));
  }
}

void sub_100003030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a31 < 0)
    operator delete(a26);
  _Unwind_Resume(exception_object);
}

void proto::gnss::DecodedExtendedEphemeris::~DecodedExtendedEphemeris(proto::gnss::DecodedExtendedEphemeris *this)
{
  *(_QWORD *)this = off_1000F98C8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

{
  *(_QWORD *)this = off_1000F98C8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void proto::gnss::Velocity::~Velocity(proto::gnss::Velocity *this)
{
  *(_QWORD *)this = off_1000F9418;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

{
  *(_QWORD *)this = off_1000F9418;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void proto::gpsd::StartContext::~StartContext(proto::gpsd::StartContext *this)
{
  *(_QWORD *)this = off_1000FAE88;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

{
  *(_QWORD *)this = off_1000FAE88;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100003114(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1000FA348;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100003144(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  const char *v4;
  id *v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  NSObject *v9;
  id *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[4];
  uint8_t buf[8];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  int v31;
  _BYTE v32[24];
  _BYTE *v33;

  v2 = *(NSObject **)(a1 + 1904);
  if (v2)
  {
    dispatch_source_cancel(v2);

    *(_QWORD *)(a1 + 1904) = 0;
  }
  if (*(_BYTE *)(a1 + 1848))
  {
    v3 = qword_100100838;
    if (!os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
      return;
    *(_WORD *)buf = 0;
    v4 = "#gdm,stopTimer,detected overlap with regular session";
LABEL_12:
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, v4, buf, 2u);
    return;
  }
  if (*(_BYTE *)(a1 + 1896))
  {
    v3 = qword_100100838;
    if (!os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
      return;
    *(_WORD *)buf = 0;
    v4 = "#gdm,stopTimer,detected overlap with emergency session";
    goto LABEL_12;
  }
  if (*(_BYTE *)(a1 + 1897))
  {
    v3 = qword_100100838;
    if (!os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
      return;
    *(_WORD *)buf = 0;
    v4 = "#gdm,stopTimer,detected overlap with emergency pos report";
    goto LABEL_12;
  }
  v5 = (id *)GpsdPreferences::instance(0);
  if (GpsdPreferences::bigPowerSwitch(v5))
  {
    v33 = 0;
    GnssHal::GpioEmbedded::GpioEmbedded(buf, (uint64_t)v32);
    v6 = v33;
    if (v33 == v32)
    {
      v7 = 4;
      v6 = v32;
    }
    else
    {
      if (!v33)
      {
LABEL_20:
        GnssHal::GpioEmbedded::setResetLow((GnssHal::GpioEmbedded *)buf);
        GnssHal::GpioEmbedded::~GpioEmbedded((GnssHal::GpioEmbedded *)buf);
        goto LABEL_21;
      }
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
    goto LABEL_20;
  }
LABEL_21:
  *(_QWORD *)buf = off_1000F9B50;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 1;
  LODWORD(v18) = 20;
  v8 = gnss::Convert::toProtobuf(*(_DWORD *)(a1 + 1900));
  if (v8 >= 0xA)
    __assert_rtn("set_stop_status", "GpsdProtocol.pb.h", 8198, "::proto::gnss::Result_IsValid(value)");
  v31 |= 0x2000u;
  HIDWORD(v23) = v8;
  sub_10001A330(a1, (uint64_t)buf);
  VendorLogger::notifyStop((VendorLogger *)(a1 + 24));
  v9 = qword_100100838;
  if (*(_DWORD *)(a1 + 1900) != 1)
  {
    v11 = *(_DWORD *)(a1 + 1900);
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_FAULT))
    {
      LODWORD(v12) = 67240192;
      HIDWORD(v12) = v11;
      _os_log_fault_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "#gdm,stopTimer,failure,%{public}d", (uint8_t *)&v12, 8u);
      v11 = *(_DWORD *)(a1 + 1900);
    }
    LODWORD(v12) = 2;
    HIDWORD(v12) = v11;
    v14 = 0;
    v15 = 0;
    v13 = 0;
    sub_100025B58(v16, "stopCompletedFailure");
    sub_10002E210();
  }
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v12) = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#gdm,stopTimer,success", (uint8_t *)&v12, 2u);
  }
  sub_10002E304((_QWORD *)a1);
  v10 = (id *)GpsdPreferences::instance(0);
  if (GpsdPreferences::bigPowerSwitch(v10))
  {
    sub_100025B58(&v12, "#bps");
    sub_100028ED8(a1, &v12, 1);
    sub_10002E27C(&v12);
  }
  *(_QWORD *)buf = off_1000F9B50;
  proto::gpsd::Indication::SharedDtor(buf);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)buf);
}

void sub_1000034B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;

  if (a16 < 0)
    operator delete(__p);
  a25 = v25 + 16;
  proto::gpsd::Indication::SharedDtor(&a25);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)&a25);
  _Unwind_Resume(a1);
}

void sub_100003560(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1000FA5A0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

unint64_t sub_100003590(uint64_t a1)
{
  unsigned int v2;
  BOOL v3;
  int v4;
  unsigned int v6;
  int v7;
  BOOL v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id *v13;
  unint64_t v14;
  NSObject *v15;
  int v17;
  unint64_t v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;

  v2 = *(_DWORD *)(GpsdPlatformInfo::instance(0) + 8) - 103;
  v3 = v2 > 4;
  v4 = (1 << v2) & 0x19;
  if (v3 || v4 == 0)
  {
    GpsdPlatformInfo::instance(0);
    return 0;
  }
  v6 = *(_DWORD *)(GpsdPlatformInfo::instance(0) + 8) - 103;
  v3 = v6 > 4;
  v7 = (1 << v6) & 0x19;
  v8 = v3 || v7 == 0;
  if (v8 || (*(_BYTE *)(a1 + 391) & 8) == 0)
  {
    v9 = 0;
LABEL_11:
    v10 = 0;
    goto LABEL_25;
  }
  v11 = *(_QWORD *)(a1 + 216);
  v12 = v11;
  if (!v11)
    v12 = *(_QWORD *)(proto::gpsd::Request::default_instance_ + 216);
  if (*(_BYTE *)(v12 + 16))
  {
    v13 = (id *)GpsdPreferences::instance(0);
    if (GpsdPreferences::useB14LteFilterSettingsForB13(v13))
      v9 = 2;
    else
      v9 = 1;
    if ((*(_BYTE *)(a1 + 391) & 8) == 0)
      goto LABEL_11;
    v11 = *(_QWORD *)(a1 + 216);
    if (!v11)
      goto LABEL_23;
  }
  else
  {
    v9 = 0;
    if (!v11)
LABEL_23:
      v11 = *(_QWORD *)(proto::gpsd::Request::default_instance_ + 216);
  }
  v10 = *(unsigned __int8 *)(v11 + 18);
LABEL_25:
  v15 = qword_100100838;
  if (!os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
    return v9 | (unint64_t)(v10 << 32);
  v17 = 134349824;
  v14 = v9 | (unint64_t)(v10 << 32);
  v18 = v14;
  v19 = 1026;
  v20 = v9;
  v21 = 1026;
  v22 = 0;
  v23 = 1026;
  v24 = v10;
  _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#gdm,decodeCoexConfig,#coexConfig,0x%{public}lluX,lte,%{public}d,blanking,%{public}d,bitMask,%{public}uX", (uint8_t *)&v17, 0x1Eu);
  return v14;
}

void sub_100003748(unint64_t *a1, size_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = (char *)a1[1];
  v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    v6 = *a1;
    v7 = &v5[-*a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      sub_100026868();
    v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (unint64_t)operator new(v10);
    else
      v11 = 0;
    v12 = &v7[v11];
    v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      v11 = (unint64_t)v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
}

void GnssHal::PlatformNvStore::flushPermanent(GnssHal::PlatformNvStore *this)
{
  NSObject *v2;
  uint8_t v3[16];

  v2 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "NvStore,flushPermanent", v3, 2u);
  }
  std::mutex::lock((std::mutex *)((char *)this + 184));
  sub_1000246A4((uint64_t)this + 96);
  std::mutex::unlock((std::mutex *)((char *)this + 184));
}

void sub_1000038F0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100003904(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *result;
  id *v8;
  int v9;
  int v10;
  int v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];
  _BYTE *v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;

  if ((a2[5] & 1) != 0)
  {
    if (!*(_BYTE *)(a1 + 1848) && !*(_BYTE *)(a1 + 1896) && !*(_BYTE *)(a1 + 1897))
      *(double *)(a1 + 1864) = (double)gpsd::util::getMachContinuousTimeNs((gpsd::util *)a1) * 0.000000001;
    v8 = (id *)GpsdPreferences::instance(0);
    v9 = GpsdPreferences::enableConstellationsBitfield(v8);
    v10 = a2[2];
    v11 = a2[3] & ((int)(a2[5] << 30) >> 31);
    v12 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67240960;
      v18 = v9;
      v19 = 1026;
      v20 = v10;
      v21 = 1026;
      v22 = v11;
      v23 = 1026;
      v24 = (v10 | v9) & ~v11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "#gdm,setConfigEnableGnssConstellations,default,0x%{public}x,forceEnable,0x%{public}x,forceDisable,0x%{public}x,net,0x%{public}x", buf, 0x1Au);
    }
    v13 = *(_QWORD *)(a1 + 8);
    sub_100031BDC((uint64_t)v15, a3);
    (*(void (**)(uint64_t, _QWORD, _BYTE *))(*(_QWORD *)v13 + 224))(v13, (v10 | v9) & ~v11, v15);
    result = v16;
    if (v16 == v15)
    {
      v14 = 4;
      result = v15;
    }
    else
    {
      if (!v16)
        return result;
      v14 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v14))();
  }
  else
  {
    *(_DWORD *)buf = 4;
    v4 = *(_QWORD *)(a3 + 24);
    if (!v4)
      sub_100025CE8();
    return (_QWORD *)(*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v4 + 48))(v4, buf);
  }
}

void sub_100003ABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_100003AFC(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  _BYTE v11[72];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;

  v2 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
  {
    v4 = *(unsigned __int8 *)(a1 + 1992);
    v5 = *(unsigned __int8 *)(a1 + 2080);
    *(_DWORD *)v11 = 67109376;
    *(_DWORD *)&v11[4] = v4;
    *(_WORD *)&v11[8] = 1024;
    *(_DWORD *)&v11[10] = v5;
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#tt,sendTimeTransferDataIndication,fromGpioSet,%d,fromGnssVendorSet,%d", v11, 0xEu);
  }
  if (*(_BYTE *)(a1 + 2080) && *(_BYTE *)(a1 + 1992))
  {
    v3 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
    {
      v6 = *(_QWORD *)(a1 + 1976);
      v7 = *(_QWORD *)(a1 + 2032) / 0xF4240uLL;
      v8 = *(_QWORD *)(a1 + 1984);
      v9 = *(_QWORD *)(a1 + 2008);
      v10 = *(float *)(a1 + 2016);
      *(_DWORD *)v11 = 134350336;
      *(_QWORD *)&v11[4] = v7;
      *(_WORD *)&v11[12] = 1026;
      *(_DWORD *)&v11[14] = 0;
      *(_WORD *)&v11[18] = 2050;
      *(_QWORD *)&v11[20] = v6;
      *(_WORD *)&v11[28] = 2050;
      *(_QWORD *)&v11[30] = v8;
      *(_WORD *)&v11[38] = 2048;
      *(_QWORD *)&v11[40] = v9;
      *(_WORD *)&v11[48] = 2050;
      *(double *)&v11[50] = v10;
      _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#rxClockConv,pulse,rxRtcMs,%{public}llu,rxRtcUnc,%{public}u,machAbsTicks,%{public}llu,%{public}llu,gpsNs,%llu,gpsUncNs,%{public}.3f", v11, 0x3Au);
    }
    *(_QWORD *)v11 = off_1000F9B50;
    memset(&v11[8], 0, 64);
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    *(_DWORD *)&v11[8] = 9;
    v21 = 129;
    operator new();
  }
}

void sub_100004050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23)
{
  uint64_t v23;

  a23 = v23 + 16;
  proto::gpsd::Indication::SharedDtor(&a23);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)&a23);
  _Unwind_Resume(a1);
}

void sub_1000040CC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t *v4;
  mach_error_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  NSObject *v9;
  _BOOL8 v10;
  unint64_t MachContinuousTimeNs;
  unint64_t v12;
  NSObject *v13;
  NSObject *v14;
  char *v15;
  gpsd::util *v16;
  std::string v17;
  std::string v18;
  std::string v19;
  gpsd::util *v20[2];
  _BYTE buf[32];
  __int16 v22;
  unint64_t v23;

  v20[0] = 0;
  v20[1] = 0;
  v5 = (*(uint64_t (**)(_QWORD, gpsd::util **, gpsd::util **))(**(_QWORD **)(a1 + 112) + 112))(*(_QWORD *)(a1 + 112), v20, &v20[1]);
  if (v5)
  {
    v14 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      v15 = mach_error_string(v5);
      *(_DWORD *)buf = 67240450;
      *(_DWORD *)&buf[4] = v5;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = v15;
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#spi,fail,gpti,pulseTimeMarkStrobe,errCode,0x%{public}X,%{public}s", buf, 0x12u);
      v14 = qword_100100838;
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CoreGPS/Sources/HAL/Implementation/GnssHalCommSpi.mm";
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = 272;
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "pulseTimeMarkStrobe";
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: assertion failure in %{public}s", buf, 0x1Cu);
    }
    sub_100025B58(&v19, "assert");
    sub_100025B58(&v18, "pulseTimeMarkStrobe");
    sub_100025B58(&v17, "#spi,fail,gpti,pulseTimeMarkStrobe,errCode,0x%{public}X,%{public}s");
    gpsd::util::triggerDiagnosticReport((uint64_t)&v19, (__int128 *)&v18, (__int128 *)&v17);
    std::string::~string(&v17);
    std::string::~string(&v18);
    std::string::~string(&v19);
    __assert_rtn("pulseTimeMarkStrobe", "GnssHalCommSpi.mm", 272, "false && \"#spi,fail,\" \"gpti,\" \"pulseTimeMarkStrobe\" \",errCode,0x%{public}X,%{public}s\"");
  }
  v16 = 0;
  if (gpsd::util::getCurrentMachContinuousMinusMachAbsoluteTicks((gpsd::util *)&v16, v4))
  {
    v6 = *(_QWORD *)(a1 + 32);
    if (v6)
    {
      *(int64x2_t *)buf = vsubq_s64(*(int64x2_t *)v20, vdupq_lane_s64((uint64_t)v16, 0));
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v6 + 48))(v6, buf);
    }
    v7 = gpsd::util::convertMachTimeInTicksToNs((unint64_t)v20[0]);
    *(_QWORD *)a2 = v7;
    v8 = gpsd::util::convertMachTimeInTicksToNs((unint64_t)v20[1]);
    *(_QWORD *)(a2 + 8) = v8;
    *(_BYTE *)(a2 + 16) = 1;
    v9 = qword_100100838;
    v10 = os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG);
    if (v10)
    {
      MachContinuousTimeNs = gpsd::util::getMachContinuousTimeNs((gpsd::util *)v10);
      v12 = gpsd::util::convertMachTimeInTicksToNs((unint64_t)v16);
      *(_DWORD *)buf = 134349824;
      *(_QWORD *)&buf[4] = v7;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = v8;
      *(_WORD *)&buf[22] = 2050;
      *(_QWORD *)&buf[24] = MachContinuousTimeNs;
      v22 = 2050;
      v23 = v12;
      _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#spi,#tt,pulseTimeMarkStrobe,low,ns,%{public}llu,upper,ns,%{public}llu,current,ns,%{public}llu,machContMinusMachAbs,ns,%{public}llu", buf, 0x2Au);
    }
  }
  else
  {
    v13 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "#spi,#tt,pulseTimeMarkStrobe,offset,failed", buf, 2u);
    }
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
}

void sub_1000043D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

unint64_t gpsd::util::convertMachTimeInTicksToNs(unint64_t this)
{
  unsigned __int8 v2;
  char v3;

  v2 = atomic_load((unsigned __int8 *)&qword_100100A58);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_100100A58))
  {
    sub_1000C5FEC();
    __cxa_guard_release(&qword_100100A58);
  }
  v3 = 8;
  if (!byte_100100A88)
    v3 = 0;
  return ((this >> v3) * qword_100100A78 / qword_100100A80) << v3;
}

void sub_1000044A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100100A58);
  _Unwind_Resume(a1);
}

uint64_t GnssHal::ExtensionsFireImpl::platformSpecificFeaturesBitmask(GnssHal::ExtensionsFireImpl *this)
{
  id *v1;

  v1 = (id *)GpsdPreferences::instance(0);
  return GpsdPreferences::platformSpecificFeaturesBitmask(v1);
}

id GnssHal::ExtensionsFireImpl::debugFeaturesBitmask(GnssHal::ExtensionsFireImpl *this)
{
  id *v1;

  v1 = (id *)GpsdPreferences::instance(0);
  return GpsdPreferences::debugFeaturesBitmask(v1);
}

uint64_t GnssHal::ExtensionsFireImpl::platform(GnssHal::ExtensionsFireImpl *this)
{
  id *v1;
  unsigned int v2;
  uint64_t result;
  NSObject *v4;
  uint8_t v5[16];

  v1 = (id *)GpsdPreferences::instance(0);
  v2 = GpsdPreferences::forceFireExtensionsPlatform(v1) + 1;
  if (v2 < 9 && ((0x199u >> v2) & 1) != 0)
    return dword_1000D3694[v2];
  if (*(_DWORD *)(GpsdPlatformInfo::instance(0) + 8) == 103)
    return 2;
  if (*(_DWORD *)(GpsdPlatformInfo::instance(0) + 8) == 106)
    return 3;
  if (*(_DWORD *)(GpsdPlatformInfo::instance(0) + 8) == 107)
    return 4;
  v4 = qword_100100838;
  result = os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_FAULT);
  if ((_DWORD)result)
  {
    *(_WORD *)v5 = 0;
    _os_log_fault_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "UnknownPlatformExtensionFire", v5, 2u);
    return 0;
  }
  return result;
}

void sub_1000045E0(uint64_t a1)
{
  unint64_t MachContinuousTimeNs;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  _BOOL8 v9;
  unint64_t v10;
  double v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  double v16;
  unint64_t v17;
  double v18;
  int v19;
  double v20;
  double v21;
  int v22;
  int v23;
  double v24;
  double v25;
  int v26;
  int v27;
  double v28;
  double v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  double v54;
  uint64_t v55;
  const char *v56;
  NSObject *v57;
  uint32_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  double v115;
  double v116;
  unint64_t v117;
  NSObject *log;
  uint8_t buf[4];
  double v120;
  __int16 v121;
  double v122;
  __int16 v123;
  double v124;
  __int16 v125;
  int v126;
  __int16 v127;
  int v128;
  __int16 v129;
  uint64_t v130;
  __int16 v131;
  int v132;
  __int16 v133;
  int v134;
  __int16 v135;
  int v136;
  __int16 v137;
  int v138;
  __int16 v139;
  uint64_t v140;
  __int16 v141;
  int v142;
  __int16 v143;
  int v144;
  __int16 v145;
  int v146;
  __int16 v147;
  int v148;
  __int16 v149;
  int v150;
  __int16 v151;
  int v152;
  __int16 v153;
  int v154;
  __int16 v155;
  int v156;
  __int16 v157;
  int v158;
  __int16 v159;
  int v160;
  __int16 v161;
  int v162;
  __int16 v163;
  int v164;
  __int16 v165;
  int v166;
  __int16 v167;
  int v168;
  __int16 v169;
  uint64_t v170;
  __int16 v171;
  uint64_t v172;
  __int16 v173;
  int v174;
  __int16 v175;
  int v176;
  __int16 v177;
  int v178;
  __int16 v179;
  int v180;
  __int16 v181;
  int v182;
  __int16 v183;
  int v184;
  __int16 v185;
  int v186;
  __int16 v187;
  int v188;
  __int16 v189;
  int v190;
  __int16 v191;
  int v192;
  __int16 v193;
  int v194;
  __int16 v195;
  int v196;
  __int16 v197;
  unint64_t v198;
  __int16 v199;
  double v200;
  __int16 v201;
  double v202;
  __int16 v203;
  uint64_t v204;
  __int16 v205;
  int v206;
  __int16 v207;
  double v208;
  __int16 v209;
  double v210;
  __int16 v211;
  double v212;
  __int16 v213;
  double v214;
  __int16 v215;
  double v216;
  __int16 v217;
  double v218;
  __int16 v219;
  double v220;
  __int16 v221;
  int v222;
  __int16 v223;
  int v224;
  __int16 v225;
  int v226;
  __int16 v227;
  int v228;
  __int16 v229;
  int v230;
  __int16 v231;
  int v232;
  __int16 v233;
  int v234;
  __int16 v235;
  int v236;
  __int16 v237;
  int v238;
  __int16 v239;
  int v240;
  __int16 v241;
  int v242;
  __int16 v243;
  int v244;
  __int16 v245;
  int v246;
  __int16 v247;
  int v248;
  __int16 v249;
  int v250;
  __int16 v251;
  int v252;
  __int16 v253;
  int v254;
  __int16 v255;
  int v256;
  __int16 v257;
  int v258;
  __int16 v259;
  int v260;
  __int16 v261;
  int v262;
  __int16 v263;
  int v264;
  __int16 v265;
  int v266;
  __int16 v267;
  int v268;
  __int16 v269;
  int v270;
  __int16 v271;
  int v272;
  __int16 v273;
  int v274;
  __int16 v275;
  int v276;
  __int16 v277;
  int v278;
  __int16 v279;
  int v280;
  __int16 v281;
  uint64_t v282;
  __int16 v283;
  uint64_t v284;
  __int16 v285;
  uint64_t v286;
  __int16 v287;
  uint64_t v288;
  __int16 v289;
  uint64_t v290;
  __int16 v291;
  int v292;

  MachContinuousTimeNs = gpsd::util::getMachContinuousTimeNs((gpsd::util *)a1);
  if (!*(_BYTE *)(a1 + 109))
  {
    v55 = qword_100100838;
    if (!os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
      return;
    *(_WORD *)buf = 0;
    v56 = "PerfWarning,not in session";
    v57 = v55;
    v58 = 2;
LABEL_32:
    _os_log_debug_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEBUG, v56, buf, v58);
    return;
  }
  v3 = *(double *)(a1 + 184);
  v4 = (double)MachContinuousTimeNs * 0.000000001 - v3;
  if (v3 < 0.1 || v4 < 0.9)
  {
    v59 = qword_100100838;
    if (!os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
      return;
    *(_DWORD *)buf = 134218240;
    v120 = v3;
    v121 = 2048;
    v122 = v4;
    v56 = "PerfWarning,spurious printSummary,%.3f,%.3f";
    v57 = v59;
    v58 = 22;
    goto LABEL_32;
  }
  v5 = *(double *)(a1 + 784);
  v6 = 0.0;
  v7 = 0.0;
  if (v5 > 0.1)
  {
    v6 = *(double *)(a1 + 800) / v5;
    v7 = *(double *)(a1 + 792) / v5;
  }
  v8 = qword_100100838;
  v9 = os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT);
  if (v9)
  {
    v10 = *(_QWORD *)(a1 + 8);
    v11 = (double)(v10 - *(_QWORD *)a1) * 0.000001;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_QWORD *)(a1 + 24);
    v14 = *(_QWORD *)a1 - 1;
    v15 = v14 >= v10;
    v16 = -1.0;
    if (v15)
      v17 = 0xBFF0000000000000;
    else
      v17 = *(_QWORD *)&v11;
    v18 = (double)(v12 - *(_QWORD *)a1) * 0.000001;
    if (v14 >= v12)
      v18 = -1.0;
    if (v14 < v13)
      v16 = (double)(v13 - *(_QWORD *)a1) * 0.000001;
    v115 = v16;
    v116 = v18;
    v19 = *(_DWORD *)(a1 + 720);
    v20 = 0.0;
    v21 = 0.0;
    if (v19 >= 1)
      v21 = *(double *)(a1 + 728) / (double)v19;
    v22 = *(_DWORD *)(a1 + 624);
    if (v22 >= 1)
      v20 = *(double *)(a1 + 632) / (double)v22;
    v23 = *(_DWORD *)(a1 + 640);
    v24 = 0.0;
    v25 = 0.0;
    if (v23 >= 1)
      v25 = *(double *)(a1 + 648) / (double)v23;
    v26 = *(_DWORD *)(a1 + 656);
    if (v26 >= 1)
      v24 = *(double *)(a1 + 664) / (double)v26;
    v27 = *(_DWORD *)(a1 + 672);
    v28 = 0.0;
    v29 = 0.0;
    if (v27 >= 1)
      v29 = *(double *)(a1 + 680) / (double)v27;
    v30 = *(_DWORD *)(a1 + 688);
    if (v30 >= 1)
      v28 = *(double *)(a1 + 696) / (double)v30;
    v31 = *(unsigned __int8 *)(a1 + 96);
    v32 = *(_DWORD *)(a1 + 44);
    v34 = *(_QWORD *)(a1 + 80);
    v33 = *(_QWORD *)(a1 + 88);
    v35 = *(unsigned __int8 *)(a1 + 97);
    v37 = *(_DWORD *)(a1 + 100);
    v36 = *(_DWORD *)(a1 + 104);
    v39 = *(_DWORD *)(a1 + 64);
    v38 = *(_DWORD *)(a1 + 68);
    v40 = *(_DWORD *)(a1 + 48);
    v41 = *(_DWORD *)(a1 + 60);
    v112 = *(_DWORD *)(a1 + 56);
    v113 = *(_DWORD *)(a1 + 52);
    v110 = *(_DWORD *)(a1 + 72);
    v111 = *(_DWORD *)(a1 + 76);
    v43 = *(_DWORD *)(a1 + 192);
    v42 = *(_DWORD *)(a1 + 196);
    v108 = *(_DWORD *)(a1 + 236);
    v109 = *(_DWORD *)(a1 + 232);
    v44 = *(_QWORD *)(a1 + 472);
    v107 = *(_QWORD *)(a1 + 480);
    v45 = *(_DWORD *)(a1 + 200);
    v46 = *(_DWORD *)(a1 + 204);
    v104 = *(_DWORD *)(a1 + 240);
    v103 = *(_DWORD *)(a1 + 244);
    v48 = *(_DWORD *)(a1 + 208);
    v47 = *(_DWORD *)(a1 + 212);
    v102 = *(_DWORD *)(a1 + 248);
    v100 = *(_DWORD *)(a1 + 256);
    v101 = *(_DWORD *)(a1 + 252);
    v49 = *(_DWORD *)(a1 + 216);
    v50 = *(_DWORD *)(a1 + 220);
    v52 = *(_DWORD *)(a1 + 224);
    v51 = *(_DWORD *)(a1 + 228);
    v99 = *(_DWORD *)(a1 + 260);
    v105 = *(_QWORD *)(a1 + 552);
    v106 = *(_DWORD *)(a1 + 560);
    v53 = *(_DWORD *)(a1 + 704);
    v117 = v17;
    log = v8;
    if (v53 < 1)
      v54 = 0.0;
    else
      v54 = *(double *)(a1 + 712) / (double)v53;
    v126 = *(_DWORD *)(a1 + 40);
    v128 = v41;
    v130 = v34;
    v132 = v31;
    v134 = v37;
    v136 = v32;
    v138 = v39;
    v140 = v33;
    v142 = v35;
    v144 = v36;
    v146 = v40;
    v148 = v38;
    v158 = v43;
    v60 = *(_DWORD *)(a1 + 584);
    v162 = v42;
    v61 = *(_DWORD *)(a1 + 588);
    v166 = v45;
    v62 = *(_DWORD *)(a1 + 592);
    v170 = v44;
    v63 = *(_DWORD *)(a1 + 596);
    v174 = v46;
    v64 = *(_DWORD *)(a1 + 600);
    v178 = v48;
    v65 = *(_DWORD *)(a1 + 564);
    v182 = v47;
    v66 = *(_DWORD *)(a1 + 568);
    v186 = v49;
    v67 = *(_DWORD *)(a1 + 572);
    v190 = v50;
    v68 = *(_DWORD *)(a1 + 576);
    v194 = v52;
    v97 = *(_DWORD *)(a1 + 580);
    v98 = v68;
    v96 = *(_DWORD *)(a1 + 604);
    v150 = v113;
    v114 = *(_DWORD *)(a1 + 608);
    v152 = v110;
    v69 = *(_DWORD *)(a1 + 612);
    v154 = v112;
    v70 = *(_DWORD *)(a1 + 616);
    v156 = v111;
    v71 = *(_DWORD *)(a1 + 736);
    v160 = v51;
    v72 = *(_DWORD *)(a1 + 740);
    v164 = v109;
    v73 = *(_DWORD *)(a1 + 744);
    v168 = v108;
    v74 = *(_DWORD *)(a1 + 748);
    v172 = v107;
    v75 = *(_DWORD *)(a1 + 752);
    v176 = v104;
    v76 = *(_DWORD *)(a1 + 756);
    v180 = v103;
    v77 = *(_DWORD *)(a1 + 760);
    v184 = v102;
    v78 = *(_DWORD *)(a1 + 764);
    v188 = v101;
    v79 = *(_DWORD *)(a1 + 768);
    v192 = v100;
    v80 = *(_DWORD *)(a1 + 772);
    v196 = v99;
    v81 = *(_DWORD *)(a1 + 776);
    v198 = v117;
    v82 = *(_DWORD *)(a1 + 780);
    v200 = v116;
    v83 = *(_DWORD *)(a1 + 532);
    v202 = v115;
    v84 = *(_DWORD *)(a1 + 536);
    v204 = v105;
    v85 = *(_DWORD *)(a1 + 540);
    v206 = v106;
    v86 = *(_DWORD *)(a1 + 544);
    v222 = v60;
    v224 = v61;
    v87 = *(_QWORD *)(a1 + 488);
    v88 = *(_QWORD *)(a1 + 496);
    v226 = v62;
    v228 = v63;
    v90 = *(_QWORD *)(a1 + 504);
    v89 = *(_QWORD *)(a1 + 512);
    v230 = v64;
    v91 = *(_QWORD *)(a1 + 520);
    v232 = v65;
    v92 = *(_DWORD *)(a1 + 528);
    *(_DWORD *)buf = 134371072;
    v120 = v4;
    v234 = v66;
    v121 = 2050;
    v122 = v7;
    v123 = 2050;
    v124 = v6;
    v236 = v67;
    v125 = 1026;
    v127 = 1026;
    v129 = 2050;
    v131 = 1026;
    v133 = 1026;
    v135 = 1026;
    v137 = 1026;
    v139 = 2050;
    v141 = 1026;
    v143 = 1026;
    v145 = 1026;
    v147 = 1026;
    v149 = 1026;
    v151 = 1026;
    v153 = 1026;
    v155 = 1026;
    v157 = 1026;
    v159 = 1026;
    v161 = 1026;
    v163 = 1026;
    v165 = 1026;
    v167 = 1026;
    v169 = 2050;
    v171 = 2050;
    v173 = 1026;
    v175 = 1026;
    v177 = 1026;
    v179 = 1026;
    v181 = 1026;
    v183 = 1026;
    v185 = 1026;
    v187 = 1026;
    v189 = 1026;
    v191 = 1026;
    v193 = 1026;
    v195 = 1026;
    v197 = 2050;
    v199 = 2050;
    v201 = 2050;
    v203 = 2050;
    v205 = 1026;
    v207 = 2050;
    v208 = v21;
    v209 = 2050;
    v210 = v20;
    v211 = 2050;
    v212 = v25;
    v213 = 2050;
    v214 = v24;
    v215 = 2050;
    v216 = v29;
    v217 = 2050;
    v218 = v28;
    v219 = 2050;
    v220 = v54;
    v221 = 1026;
    v223 = 1026;
    v225 = 1026;
    v227 = 1026;
    v229 = 1026;
    v231 = 1026;
    v233 = 1026;
    v235 = 1026;
    v237 = 1026;
    v238 = v98;
    v239 = 1026;
    v240 = v97;
    v241 = 1026;
    v242 = v96;
    v243 = 1026;
    v244 = v114;
    v245 = 1026;
    v246 = v69;
    v247 = 1026;
    v248 = v70;
    v249 = 1026;
    v250 = v71;
    v251 = 1026;
    v252 = v72;
    v253 = 1026;
    v254 = v73;
    v255 = 1026;
    v256 = v74;
    v257 = 1026;
    v258 = v75;
    v259 = 1026;
    v260 = v76;
    v261 = 1026;
    v262 = v77;
    v263 = 1026;
    v264 = v78;
    v265 = 1026;
    v266 = v79;
    v267 = 1026;
    v268 = v80;
    v269 = 1026;
    v270 = v81;
    v271 = 1026;
    v272 = v82;
    v273 = 1026;
    v274 = v83;
    v275 = 1026;
    v276 = v84;
    v277 = 1026;
    v278 = v85;
    v279 = 1026;
    v280 = v86;
    v281 = 2050;
    v282 = v87;
    v283 = 2050;
    v284 = v88;
    v285 = 2050;
    v286 = v90;
    v287 = 2050;
    v288 = v89;
    v289 = 2050;
    v290 = v91;
    v291 = 1026;
    v292 = v92;
    _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEFAULT, "PerfReport,i,%{public}.1f,w,%{public}.2f,%{public}.1f,e,%{public}d,%{public}d,%{public}.2f,%{public}d,0x%{public}X,r,%{public}d,%{public}d,%{public}.2f,%{public}d,0x%{public}X,x,%{public}d,%{public}d,t,%{public}d,%{public}d,p,%{public}d,%{public}d,a,%{public}d,%{public}d,g,%{public}d,%{public}d,d,%{public}d,%{public}d,%{public}.1f,%{public}.3f,v,%{public}d,%{public}d,c,%{public}d,%{public}d,L,%{public}d,%{public}d,m,%{public}d,%{public}d,s,%{public}d,%{public}d,E,%{public}d,%{public}d,T,%{public}.1f,%{public}.1f,%{public}.1f,u,0x%{public}llX,%{public}d,F,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,y,%{public}d,%{public}d,%{public}d,%{public}d,%{public}d,C,%{public}d,%{public}d,%{public}d,%{public}d,%{public}d,D,%{public}d,%{public}d,%{public}d,%{public}d,n,%{public}d,%{public}d,%{public}d,%{public}d,%{public}d,%{public}d,N,%{public}d,%{public}d,%{public}d,%{public}d,%{public}d,%{public}d,R,%{public}d,%{public}d,%{public}d,%{public}d,P,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.3f,%{public}.3f,%{public}d", buf, 0x268u);
  }
  v93 = gpsd::util::getMachContinuousTimeNs((gpsd::util *)v9);
  v94 = 0;
  *(double *)(a1 + 184) = (double)v93 * 0.000000001;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_DWORD *)(a1 + 544) = 0;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_DWORD *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_QWORD *)(a1 + 256) = 0;
  do
  {
    v95 = a1 + 624 + v94;
    *(_DWORD *)v95 = 0;
    *(_QWORD *)(v95 + 8) = 0;
    v94 += 16;
  }
  while (v94 != 112);
  *(_QWORD *)(a1 + 800) = 0;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
}

void VendorLogger::log(uint64_t a1, unsigned int a2, void **a3)
{
  double v6;
  int v7;
  uint64_t v8;
  _BOOL4 v9;
  void *v10;
  const char *v11;
  NSObject *v12;
  uint32_t v13;
  int v14;
  uint64_t v15;
  _BOOL4 v16;
  void *v17;
  const char *v18;
  NSObject *v19;
  uint32_t v20;
  int v21;
  uint64_t v22;
  _BOOL4 v23;
  void *v24;
  const char *v25;
  NSObject *v26;
  os_log_type_t v27;
  int v28;
  uint64_t v29;
  _BOOL4 v30;
  void *v31;
  uint32_t v32;
  int v33;
  uint64_t v34;
  _BOOL4 v35;
  void *v36;
  const char *v37;
  NSObject *v38;
  uint32_t v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  __int128 v44;
  NSObject *v45;
  void *v46;
  _QWORD v47[7];
  unsigned int v48;
  _BYTE buf[24];
  void *v50[2];
  _BYTE v51[32];
  char v52;

  v6 = (double)gpsd::util::getMachContinuousTimeNs((gpsd::util *)a1) * 0.000000001;
  switch(*(_DWORD *)(a1 + 4 * a2 + 160))
  {
    case 0:
      v7 = *(unsigned __int8 *)(a1 + 196);
      v8 = qword_100100828;
      v9 = os_log_type_enabled((os_log_t)qword_100100828, OS_LOG_TYPE_FAULT);
      if (v7)
      {
        if (!v9)
          goto LABEL_34;
        if (*((char *)a3 + 23) >= 0)
          v10 = a3;
        else
          v10 = *a3;
        *(_DWORD *)buf = 134349315;
        *(double *)&buf[4] = v6;
        *(_WORD *)&buf[12] = 2081;
        *(_QWORD *)&buf[14] = v10;
        v11 = "%{public}.3f,%{private}s";
        v12 = v8;
        v13 = 22;
      }
      else
      {
        if (!v9)
          goto LABEL_34;
        if (*((char *)a3 + 23) >= 0)
          v46 = a3;
        else
          v46 = *a3;
        *(_DWORD *)buf = 136380675;
        *(_QWORD *)&buf[4] = v46;
        v11 = "%{private}s";
        v12 = v8;
        v13 = 12;
      }
      _os_log_fault_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, v11, buf, v13);
LABEL_34:
      sub_100025B58(buf, "Vendor");
      sub_100025B58(v50, "assert");
      if (*((char *)a3 + 23) < 0)
      {
        sub_100031B50(&v51[8], *a3, (unint64_t)a3[1]);
      }
      else
      {
        *(_OWORD *)&v51[8] = *(_OWORD *)a3;
        *(_QWORD *)&v51[24] = a3[2];
      }
      v52 = 1;
      gpsd::util::triggerDiagnosticReport((uint64_t)buf);
      if ((v51[31] & 0x80000000) != 0)
        operator delete(*(void **)&v51[8]);
      if ((v51[7] & 0x80000000) != 0)
        operator delete(v50[0]);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
LABEL_67:
      if (*(_QWORD *)(a1 + 880))
      {
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x4812000000;
        v50[0] = sub_10002395C;
        v50[1] = sub_1000238FC;
        *(_OWORD *)&v51[16] = 0u;
        *(_OWORD *)v51 = 0u;
        v44 = *(_OWORD *)&v51[8];
        *(_QWORD *)&v51[24] = a3[2];
        *(_OWORD *)&v51[8] = *(_OWORD *)a3;
        *(_OWORD *)a3 = v44;
        a3[2] = 0;
        v45 = *(NSObject **)(a1 + 880);
        v47[0] = _NSConcreteStackBlock;
        v47[1] = 3221225472;
        v47[2] = sub_100054074;
        v47[3] = &unk_1000F41C0;
        v47[4] = buf;
        v47[5] = a1;
        *(double *)&v47[6] = v6;
        v48 = a2;
        dispatch_async(v45, v47);
        _Block_object_dispose(buf, 8);
        if ((v51[31] & 0x80000000) != 0)
          operator delete(*(void **)&v51[8]);
      }
      return;
    case 1:
      v14 = *(unsigned __int8 *)(a1 + 196);
      v15 = qword_100100828;
      v16 = os_log_type_enabled((os_log_t)qword_100100828, OS_LOG_TYPE_ERROR);
      if (v14)
      {
        if (!v16)
          goto LABEL_67;
        if (*((char *)a3 + 23) >= 0)
          v17 = a3;
        else
          v17 = *a3;
        *(_DWORD *)buf = 134349315;
        *(double *)&buf[4] = v6;
        *(_WORD *)&buf[12] = 2081;
        *(_QWORD *)&buf[14] = v17;
        v18 = "%{public}.3f,%{private}s";
        v19 = v15;
        v20 = 22;
      }
      else
      {
        if (!v16)
          goto LABEL_67;
        if (*((char *)a3 + 23) >= 0)
          v40 = a3;
        else
          v40 = *a3;
        *(_DWORD *)buf = 136380675;
        *(_QWORD *)&buf[4] = v40;
        v18 = "%{private}s";
        v19 = v15;
        v20 = 12;
      }
      _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, v18, buf, v20);
      goto LABEL_67;
    case 2:
      v21 = *(unsigned __int8 *)(a1 + 196);
      v22 = qword_100100828;
      v23 = os_log_type_enabled((os_log_t)qword_100100828, OS_LOG_TYPE_DEFAULT);
      if (v21)
      {
        if (v23)
        {
          if (*((char *)a3 + 23) >= 0)
            v24 = a3;
          else
            v24 = *a3;
          *(_DWORD *)buf = 134349315;
          *(double *)&buf[4] = v6;
          *(_WORD *)&buf[12] = 2081;
          *(_QWORD *)&buf[14] = v24;
          v25 = "%{public}.3f,%{private}s";
          v26 = v22;
          v27 = OS_LOG_TYPE_DEFAULT;
          goto LABEL_26;
        }
      }
      else if (v23)
      {
        if (*((char *)a3 + 23) >= 0)
          v41 = a3;
        else
          v41 = *a3;
        *(_DWORD *)buf = 136380675;
        *(_QWORD *)&buf[4] = v41;
        v25 = "%{private}s";
        v26 = v22;
        v27 = OS_LOG_TYPE_DEFAULT;
        goto LABEL_52;
      }
      goto LABEL_67;
    case 3:
      v28 = *(unsigned __int8 *)(a1 + 196);
      v29 = qword_100100828;
      v30 = os_log_type_enabled((os_log_t)qword_100100828, OS_LOG_TYPE_INFO);
      if (v28)
      {
        if (!v30)
          goto LABEL_67;
        if (*((char *)a3 + 23) >= 0)
          v31 = a3;
        else
          v31 = *a3;
        *(_DWORD *)buf = 134349315;
        *(double *)&buf[4] = v6;
        *(_WORD *)&buf[12] = 2081;
        *(_QWORD *)&buf[14] = v31;
        v25 = "%{public}.3f,%{private}s";
        v26 = v29;
        v27 = OS_LOG_TYPE_INFO;
LABEL_26:
        v32 = 22;
      }
      else
      {
        if (!v30)
          goto LABEL_67;
        if (*((char *)a3 + 23) >= 0)
          v42 = a3;
        else
          v42 = *a3;
        *(_DWORD *)buf = 136380675;
        *(_QWORD *)&buf[4] = v42;
        v25 = "%{private}s";
        v26 = v29;
        v27 = OS_LOG_TYPE_INFO;
LABEL_52:
        v32 = 12;
      }
      _os_log_impl((void *)&_mh_execute_header, v26, v27, v25, buf, v32);
      goto LABEL_67;
    case 4:
      v33 = *(unsigned __int8 *)(a1 + 196);
      v34 = qword_100100828;
      v35 = os_log_type_enabled((os_log_t)qword_100100828, OS_LOG_TYPE_DEBUG);
      if (v33)
      {
        if (!v35)
          goto LABEL_67;
        if (*((char *)a3 + 23) >= 0)
          v36 = a3;
        else
          v36 = *a3;
        *(_DWORD *)buf = 134349315;
        *(double *)&buf[4] = v6;
        *(_WORD *)&buf[12] = 2081;
        *(_QWORD *)&buf[14] = v36;
        v37 = "%{public}.3f,%{private}s";
        v38 = v34;
        v39 = 22;
      }
      else
      {
        if (!v35)
          goto LABEL_67;
        if (*((char *)a3 + 23) >= 0)
          v43 = a3;
        else
          v43 = *a3;
        *(_DWORD *)buf = 136380675;
        *(_QWORD *)&buf[4] = v43;
        v37 = "%{private}s";
        v38 = v34;
        v39 = 12;
      }
      _os_log_debug_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, v37, buf, v39);
      goto LABEL_67;
    default:
      goto LABEL_67;
  }
}

void sub_10000534C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100005398(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _BYTE v11[24];
  _BYTE *v12;
  _QWORD v13[3];
  _QWORD *v14;

  *(_BYTE *)(a1 + 1992) = 0;
  *(_OWORD *)(a1 + 1976) = 0u;
  *(_OWORD *)(a1 + 2000) = 0u;
  *(_DWORD *)(a1 + 2016) = -1082130432;
  *(_QWORD *)(a1 + 2020) = 0;
  *(_DWORD *)(a1 + 2028) = 0;
  *(_QWORD *)(a1 + 2032) = -1;
  *(_OWORD *)(a1 + 2040) = 0u;
  *(_OWORD *)(a1 + 2056) = 0u;
  *(_OWORD *)(a1 + 2065) = 0u;
  v2 = *(_QWORD *)(a1 + 8);
  v13[0] = off_1000F25B0;
  v13[1] = a1;
  v14 = v13;
  sub_100031BDC((uint64_t)v11, a2);
  v9[0] = off_1000F2660;
  v10 = v9;
  (*(void (**)(uint64_t, _QWORD *, _BYTE *, _QWORD *))(*(_QWORD *)v2 + 112))(v2, v13, v11, v9);
  v3 = v10;
  if (v10 == v9)
  {
    v4 = 4;
    v3 = v9;
  }
  else
  {
    if (!v10)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = v12;
  if (v12 == v11)
  {
    v6 = 4;
    v5 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  result = v14;
  if (v14 == v13)
  {
    v8 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_1000054FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  uint64_t v18;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;

  v20 = a13;
  if (a13 == v17)
  {
    v21 = 4;
    v20 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  v22 = a17;
  if (a17 == &a14)
  {
    v23 = 4;
    v22 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_11:
  v24 = *(_QWORD **)(v18 - 32);
  if (v24 == (_QWORD *)(v18 - 56))
  {
    v25 = 4;
    v24 = (_QWORD *)(v18 - 56);
  }
  else
  {
    if (!v24)
      goto LABEL_16;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_16:
  _Unwind_Resume(exception_object);
}

void sub_10000559C(gpsd::util *a1)
{
  gpsd::util *v1;
  NSObject *v2;
  NSObject *v3;
  uint8_t v4[16];
  uint8_t buf[16];

  v1 = a1;
  if (!*((_QWORD *)a1 + 243))
  {
    v2 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gdm,takeOsTransaction", v4, 2u);
    }
    a1 = (gpsd::util *)os_transaction_create("GpsdActive");
    *((_QWORD *)v1 + 243) = a1;
  }
  if (*((_QWORD *)v1 + 245))
  {
    *((double *)v1 + 246) = (double)gpsd::util::getMachContinuousTimeNs(a1) * 0.000000001;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v1 + 245) + 24))(*((_QWORD *)v1 + 245), 60000, 1);
    v3 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#dqwdt,start", buf, 2u);
    }
  }
}

id GnssHal::ExtensionsFireImpl::externalToChipL5GroupDelayMeters(GnssHal::ExtensionsFireImpl *this)
{
  id *v1;

  v1 = (id *)GpsdPreferences::instance(0);
  return GpsdPreferences::externalToChipL5GroupDelayMeters(v1);
}

void sub_1000056AC(uint64_t a1)
{
  NSObject *v2;
  _BOOL8 v3;
  NSObject *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  NSObject *v8;
  _QWORD *v9;
  uint64_t v10;
  uint8_t v11[8];
  _QWORD v12[3];
  _QWORD *v13;
  _QWORD v14[3];
  _QWORD *v15;

  v2 = qword_100100838;
  v3 = os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gdm,stop,initiated", v11, 2u);
  }
  if (!*(_BYTE *)(a1 + 1848))
  {
    v8 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#gdm,Device was already stopped", v11, 2u);
    }
    sub_10000F140(a1, (proto::gpsd *)2, 1u);
    return;
  }
  *(_BYTE *)(a1 + 1848) = 0;
  *(double *)(a1 + 1856) = (double)gpsd::util::getMachContinuousTimeNs((gpsd::util *)v3) * 0.000000001;
  v4 = *(NSObject **)(a1 + 1928);
  if (v4)
  {
    dispatch_source_cancel(v4);

    *(_QWORD *)(a1 + 1928) = 0;
  }
  sub_100002DE0(a1);
  v5 = *(_QWORD *)(a1 + 8);
  v14[0] = off_1000F2DA8;
  v14[1] = a1;
  v15 = v14;
  v12[0] = off_1000F2E28;
  v12[1] = a1;
  v13 = v12;
  (*(void (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v5 + 56))(v5, v14, v12);
  v6 = v13;
  if (v13 == v12)
  {
    v7 = 4;
    v6 = v12;
    goto LABEL_13;
  }
  if (v13)
  {
    v7 = 5;
LABEL_13:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v9 = v15;
  if (v15 == v14)
  {
    v10 = 4;
    v9 = v14;
  }
  else
  {
    if (!v15)
      return;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
}

void sub_100005878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a13;
  if (a13 == v17)
  {
    v20 = 4;
    v19 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = a17;
  if (a17 == &a14)
  {
    v22 = 4;
    v21 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t proto::gnsshal::NvStore::ByteSize(proto::gnsshal::NvStore *this, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2)
{
  int v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;
  int v10;
  _QWORD *v11;

  if ((*((_BYTE *)this + 48) & 1) != 0)
  {
    v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 10);
    if ((v4 & 0x80000000) != 0)
    {
      v3 = 11;
    }
    else if (v4 >= 0x80)
    {
      v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4, a2) + 1;
    }
    else
    {
      v3 = 2;
    }
  }
  else
  {
    v3 = 0;
  }
  v5 = *((_DWORD *)this + 6);
  v6 = (v5 + v3);
  if (v5 >= 1)
  {
    v7 = 0;
    do
    {
      v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnsshal::NvStoreItem::ByteSize(*(proto::gnsshal::NvStoreItem **)(*((_QWORD *)this + 2) + 8 * v7), a2);
      v9 = (int)v8;
      if (v8 >= 0x80)
        v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2);
      else
        v10 = 1;
      v6 = (v9 + v6 + v10);
      ++v7;
    }
    while (v7 < *((int *)this + 6));
  }
  v11 = (_QWORD *)*((_QWORD *)this + 1);
  if (v11 && *v11 != v11[1])
    v6 = wireless_diagnostics::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize((proto::gnsshal::NvStore *)((char *)this + 8), a2)+ v6;
  *((_DWORD *)this + 11) = v6;
  return v6;
}

uint64_t proto::gnsshal::NvStoreItem::ByteSize(proto::gnsshal::NvStoreItem *this, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;
  int v16;

  LOBYTE(v3) = *((_BYTE *)this + 64);
  if (!(_BYTE)v3)
  {
    v5 = 0;
    goto LABEL_24;
  }
  if ((*((_BYTE *)this + 64) & 1) != 0)
  {
    v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 2), (unint64_t)a2)+ 1;
    v3 = *((_DWORD *)this + 16);
    if ((v3 & 2) == 0)
      goto LABEL_16;
  }
  else
  {
    v4 = 0;
    if ((*((_BYTE *)this + 64) & 2) == 0)
      goto LABEL_16;
  }
  v6 = *((_QWORD *)this + 3);
  v7 = *(unsigned __int8 *)(v6 + 23);
  v8 = v7;
  v9 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v10 = *(unsigned __int8 *)(v6 + 23);
  else
    v10 = v9;
  if (v10 >= 0x80)
  {
    v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10, a2);
    v7 = *(unsigned __int8 *)(v6 + 23);
    v9 = *(_QWORD *)(v6 + 8);
    v3 = *((_DWORD *)this + 16);
    v8 = *(_BYTE *)(v6 + 23);
  }
  else
  {
    v11 = 1;
  }
  if (v8 < 0)
    v7 = v9;
  v4 += v11 + v7 + 1;
LABEL_16:
  if ((v3 & 4) != 0)
  {
    v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 14);
    if (v15 >= 0x80)
    {
      v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2)
          + 1;
      v3 = *((_DWORD *)this + 16);
    }
    else
    {
      v16 = 2;
    }
    v4 += v16;
    if ((v3 & 8) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
  if ((v3 & 8) != 0)
  {
LABEL_18:
    v4 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 4), (unint64_t)a2)+ 1;
    v3 = *((_DWORD *)this + 16);
  }
LABEL_19:
  v12 = v4 + 9;
  if ((v3 & 0x10) == 0)
    v12 = v4;
  if ((v3 & 0x20) != 0)
    v5 = v12 + 9;
  else
    v5 = v12;
LABEL_24:
  v13 = (_QWORD *)*((_QWORD *)this + 1);
  if (v13 && *v13 != v13[1])
    v5 = wireless_diagnostics::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize((proto::gnsshal::NvStoreItem *)((char *)this + 8), a2)+ v5;
  *((_DWORD *)this + 15) = v5;
  return v5;
}

unsigned __int8 *proto::gnsshal::NvStore::SerializeWithCachedSizesToArray(proto::gnsshal::NvStore *this, wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  unsigned __int8 *v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  char *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int *v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  unsigned __int8 *v12;
  _QWORD *v13;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v14;
  _QWORD *v15;

  v4 = (unsigned __int8 *)a2;
  if ((*((_BYTE *)this + 48) & 1) != 0)
  {
    v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((int *)this + 10);
    *(_BYTE *)a2 = 8;
    v7 = (char *)a2 + 1;
    if ((v6 & 0x80000000) != 0)
    {
      v8 = (unsigned __int8 *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v6, (unint64_t)v7, a3);
    }
    else
    {
      if (v6 <= 0x7F)
      {
        v4[1] = v6;
        v4 += 2;
        goto LABEL_8;
      }
      v8 = (unsigned __int8 *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v6, v7, a3);
    }
    v4 = v8;
  }
LABEL_8:
  if (*((int *)this + 6) >= 1)
  {
    v9 = 0;
    do
    {
      v10 = *(unsigned int **)(*((_QWORD *)this + 2) + 8 * v9);
      *v4 = 18;
      v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10[15];
      if (v11 > 0x7F)
      {
        v12 = (unsigned __int8 *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v11, (int)v4 + 1, a3);
      }
      else
      {
        v4[1] = v11;
        v12 = v4 + 2;
      }
      v4 = proto::gnsshal::NvStoreItem::SerializeWithCachedSizesToArray((proto::gnsshal::NvStoreItem *)v10, v12, a3, a4);
      ++v9;
    }
    while (v9 < *((int *)this + 6));
  }
  v15 = (_QWORD *)*((_QWORD *)this + 1);
  v14 = (proto::gnsshal::NvStore *)((char *)this + 8);
  v13 = v15;
  if (!v15 || *v13 == v13[1])
    return v4;
  else
    return (unsigned __int8 *)wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v14, (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)v4, a3);
}

unsigned __int8 *proto::gnsshal::NvStoreItem::SerializeWithCachedSizesToArray(proto::gnsshal::NvStoreItem *this, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  int v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  uint64_t v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;
  int v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  const void *v12;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v17;
  _QWORD *v18;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v20;
  uint64_t v21;

  v5 = *((_DWORD *)this + 16);
  if ((v5 & 1) != 0)
  {
    v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((_QWORD *)this + 2);
    *a2 = 8;
    a2 = (unsigned __int8 *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v6, (unint64_t)(a2 + 1), a3);
    v5 = *((_DWORD *)this + 16);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_22;
      goto LABEL_19;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  v7 = *((_QWORD *)this + 3);
  *a2 = 18;
  if (*(char *)(v7 + 23) < 0)
    v8 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(v7 + 8);
  else
    v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v7 + 23);
  if (v8 > 0x7F)
  {
    v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v8, (int)a2 + 1, a3);
  }
  else
  {
    a2[1] = v8;
    v9 = (_DWORD)a2 + 2;
  }
  v10 = *(char *)(v7 + 23);
  if (v10 >= 0)
    v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v7;
  else
    v11 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)v7;
  if (v10 >= 0)
    v12 = (const void *)*(unsigned __int8 *)(v7 + 23);
  else
    v12 = (const void *)*(unsigned int *)(v7 + 8);
  a2 = (unsigned __int8 *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteRawToArray(v11, v12, v9, a4);
  if ((*((_DWORD *)this + 16) & 4) != 0)
  {
LABEL_19:
    v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 14);
    *a2 = 24;
    if (v13 > 0x7F)
    {
      a2 = (unsigned __int8 *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v13, (int)a2 + 1, a3);
    }
    else
    {
      a2[1] = v13;
      a2 += 2;
    }
  }
LABEL_22:
  v14 = *((_DWORD *)this + 16);
  if ((v14 & 8) == 0)
  {
    if ((v14 & 0x10) == 0)
      goto LABEL_24;
LABEL_31:
    v21 = *((_QWORD *)this + 5);
    *a2 = 41;
    *(_QWORD *)(a2 + 1) = v21;
    a2 += 9;
    if ((*((_DWORD *)this + 16) & 0x20) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
  v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((_QWORD *)this + 4);
  *a2 = 32;
  a2 = (unsigned __int8 *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v20, (unint64_t)(a2 + 1), a3);
  v14 = *((_DWORD *)this + 16);
  if ((v14 & 0x10) != 0)
    goto LABEL_31;
LABEL_24:
  if ((v14 & 0x20) != 0)
  {
LABEL_25:
    v15 = *((_QWORD *)this + 6);
    *a2 = 49;
    *(_QWORD *)(a2 + 1) = v15;
    a2 += 9;
  }
LABEL_26:
  v18 = (_QWORD *)*((_QWORD *)this + 1);
  v17 = (proto::gnsshal::NvStoreItem *)((char *)this + 8);
  v16 = v18;
  if (!v18 || *v16 == v16[1])
    return a2;
  else
    return (unsigned __int8 *)wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v17, (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)a2, a3);
}

BOOL CompressionUtil::decode(uint64_t a1, unint64_t *a2, compression_algorithm a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  NSObject *v9;
  _BOOL8 result;
  unint64_t v11;
  size_t v12;
  const uint8_t *v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  float v19;
  size_t v20;
  compression_status v21;
  size_t dst_size;
  size_t v23;
  unint64_t v24;
  NSObject *v25;
  compression_status v26;
  NSObject *v27;
  unint64_t v28;
  NSObject *v29;
  NSObject *v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::string v36;
  compression_stream stream;
  uint8_t buf[4];
  _BYTE v39[10];
  _BYTE v40[20];
  __int16 v41;
  unint64_t v42;

  v6 = *(unsigned __int8 *)(a1 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a1 + 8);
  v7 = 2 * v6;
  v8 = a2[1] - *a2;
  if (v7 <= v8)
  {
    if (v7 < v8)
      a2[1] = *a2 + v7;
  }
  else
  {
    sub_100003748(a2, v7 - v8);
  }
  if (compression_stream_init(&stream, COMPRESSION_STREAM_DECODE, a3))
  {
    v9 = qword_100100838;
    result = os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_FAULT);
    if (result)
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "#ee,#decompress,compression_stream_init failed", buf, 2u);
      return 0;
    }
  }
  else
  {
    v11 = 0;
    v12 = *(unsigned __int8 *)(a1 + 23);
    if ((v12 & 0x80u) == 0)
      v13 = (const uint8_t *)a1;
    else
      v13 = *(const uint8_t **)a1;
    if ((v12 & 0x80u) != 0)
      v12 = *(_QWORD *)(a1 + 8);
    stream.src_ptr = v13;
    stream.src_size = v12;
    v14 = 32;
    while (1)
    {
      v15 = *a2;
      v16 = a2[1];
      v17 = v16 - *a2;
      if (!((v17 - v11) >> 15))
      {
        v18 = v17 + 0x8000;
        v19 = (float)v17 * 1.25;
        if (v17 + 0x8000 <= (unint64_t)v19)
          v18 = (unint64_t)v19;
        if (v18 <= v17)
        {
          if (v18 < v17)
          {
            v16 = v15 + v18;
            a2[1] = v15 + v18;
          }
        }
        else
        {
          sub_100003748(a2, v18 - v17);
          v15 = *a2;
          v16 = a2[1];
        }
      }
      v20 = v16 - v15 - v11;
      stream.dst_ptr = (uint8_t *)(v15 + v11);
      stream.dst_size = v20;
      v21 = compression_stream_process(&stream, 1);
      dst_size = stream.dst_size;
      v23 = v20 - stream.dst_size;
      if ((uint64_t)(v20 - stream.dst_size) < 0)
      {
        v30 = qword_100100838;
        if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134349312;
          *(_QWORD *)v39 = v20;
          *(_WORD *)&v39[8] = 2050;
          *(_QWORD *)v40 = dst_size;
          _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "negative changeInDestSize,%{public}zu,%{public}zu", buf, 0x16u);
          v30 = qword_100100838;
        }
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)v39 = "/Library/Caches/com.apple.xbs/Sources/CoreGPS/Sources/Daemon/GpsdCompressionUtil.mm";
          *(_WORD *)&v39[8] = 1026;
          *(_DWORD *)v40 = 55;
          *(_WORD *)&v40[4] = 2082;
          *(_QWORD *)&v40[6] = "decode";
          _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: assertion failure in %{public}s", buf, 0x1Cu);
        }
        sub_100025B58(&v36, "assert");
        sub_100025B58(&v35, "decode");
        sub_100025B58(&v34, "negative changeInDestSize,%{public}zu,%{public}zu");
        gpsd::util::triggerDiagnosticReport((uint64_t)&v36, (__int128 *)&v35, (__int128 *)&v34);
        std::string::~string(&v34);
        std::string::~string(&v35);
        std::string::~string(&v36);
        __assert_rtn("decode", "GpsdCompressionUtil.mm", 55, "false && \"negative changeInDestSize,%{public}zu,%{public}zu\"");
      }
      v11 += v23;
      v24 = a2[1] - *a2;
      v25 = qword_100100838;
      if (v11 > v24)
      {
        if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134349312;
          *(_QWORD *)v39 = v11;
          *(_WORD *)&v39[8] = 2050;
          *(_QWORD *)v40 = v24;
          _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "unexpected fill,%{public}zd,size,%{public}zu", buf, 0x16u);
          v25 = qword_100100838;
        }
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)v39 = "/Library/Caches/com.apple.xbs/Sources/CoreGPS/Sources/Daemon/GpsdCompressionUtil.mm";
          *(_WORD *)&v39[8] = 1026;
          *(_DWORD *)v40 = 57;
          *(_WORD *)&v40[4] = 2082;
          *(_QWORD *)&v40[6] = "decode";
          _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: assertion failure in %{public}s", buf, 0x1Cu);
        }
        sub_100025B58(&v33, "assert");
        sub_100025B58(&v32, "decode");
        sub_100025B58(&v31, "unexpected fill,%{public}zd,size,%{public}zu");
        gpsd::util::triggerDiagnosticReport((uint64_t)&v33, (__int128 *)&v32, (__int128 *)&v31);
        std::string::~string(&v31);
        std::string::~string(&v32);
        std::string::~string(&v33);
        __assert_rtn("decode", "GpsdCompressionUtil.mm", 57, "false && \"unexpected fill,%{public}zd,size,%{public}zu\"");
      }
      v26 = v21;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67241216;
        *(_DWORD *)v39 = v26;
        *(_WORD *)&v39[4] = 1026;
        *(_DWORD *)&v39[6] = v23;
        *(_WORD *)v40 = 2050;
        *(_QWORD *)&v40[2] = stream.src_size;
        *(_WORD *)&v40[10] = 2050;
        *(_QWORD *)&v40[12] = v24;
        v41 = 2050;
        v42 = v11;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "#ee,#decompress,processed,status,%{public}d,changeInDestSize,%{public}d,inputLeft,%{public}zu,outputVecSize,%{public}zu,outputFillLevel,%{public}zd", buf, 0x2Cu);
      }
      if (v26)
        break;
      if (!--v14)
      {
        v27 = qword_100100838;
        if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "#ee,#decompress,loop counter failed sanity", buf, 2u);
        }
LABEL_37:
        sub_1000254A8(&stream);
        return 0;
      }
    }
    if (v26 != COMPRESSION_STATUS_END)
    {
      v29 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67240192;
        *(_DWORD *)v39 = v26;
        _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "#ee,#decompress,compression_stream_process error,%{public}d", buf, 8u);
      }
      goto LABEL_37;
    }
    v28 = a2[1] - *a2;
    if (v11 <= v28)
    {
      if (v11 < v28)
        a2[1] = *a2 + v11;
    }
    else
    {
      sub_100003748(a2, v11 - v28);
    }
    sub_1000254A8(&stream);
    return 1;
  }
  return result;
}

void sub_1000063AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

void sub_100006448(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  id *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint8_t v14[8];
  _QWORD v15[3];
  _QWORD *v16;
  _QWORD v17[3];
  _QWORD *v18;

  v4 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#gdm,start,initiated", v14, 2u);
  }
  if (*(_BYTE *)(a1 + 1848))
  {
    v5 = qword_100100830;
    if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#gdm,Device was already started", v14, 2u);
    }
    sub_10000F140(a1, (proto::gpsd *)1, 1u);
    return;
  }
  sub_10000559C((gpsd::util *)a1);
  *(_BYTE *)(a1 + 1848) = 1;
  if (*(_QWORD *)(a1 + 1904))
  {
    v6 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#gdm,start,Overlap with previous stop timer", v14, 2u);
    }
    sub_100003144(a1);
    *(_DWORD *)(a1 + 1900) = 7;
  }
  VendorLogger::notifyStart((VendorLogger *)(a1 + 24));
  v7 = (id *)GpsdPreferences::instance(0);
  GpsdPreferences::dumpSettingsToLog(v7);
  *(_BYTE *)(a1 + 2264) = 0;
  *(_OWORD *)(a1 + 2232) = 0u;
  *(_OWORD *)(a1 + 2248) = 0u;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = sub_100003590(a2);
  v17[0] = off_1000F2BA8;
  v17[1] = a1;
  v18 = v17;
  v15[0] = off_1000F2C28;
  v15[1] = a1;
  v16 = v15;
  (*(void (**)(uint64_t, unint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v8 + 48))(v8, v9, v17, v15);
  v10 = v16;
  if (v16 == v15)
  {
    v11 = 4;
    v10 = v15;
    goto LABEL_15;
  }
  if (v16)
  {
    v11 = 5;
LABEL_15:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  v12 = v18;
  if (v18 == v17)
  {
    v13 = 4;
    v12 = v17;
  }
  else
  {
    if (!v18)
      return;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
}

void sub_100006674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a13;
  if (a13 == v17)
  {
    v20 = 4;
    v19 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = a17;
  if (a17 == &a14)
  {
    v22 = 4;
    v21 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t GpsdPreferences::platformSpecificFeaturesBitmask(id *this)
{
  uint64_t v2;

  if (*(_DWORD *)(GpsdPlatformInfo::instance(0) + 8) != 107)
    return 0;
  v2 = objc_msgSend(*this, "BOOLForKey:", CFSTR("EnableCoexL5NotchFilter"));
  if (objc_msgSend(*this, "BOOLForKey:", CFSTR("HasXtalFreqJumpRisk")))
    return v2 | 2;
  else
    return v2;
}

uint64_t sub_10000674C(uint64_t a1, char a2)
{
  size_t v2;
  char v3;
  size_t v4;
  uint64_t v5;
  NSObject *v8;
  size_t v9;
  void **v10;
  const void *v11;
  size_t v12;
  void **v13;
  const void *v14;
  void **v15;
  void **v16;
  FILE *v17;
  __sFILE *v18;
  FILE *v19;
  size_t v20;
  const void *p_ptr;
  int *v22;
  NSObject *v23;
  int v24;
  std::error_code *v25;
  NSObject *v26;
  std::error_code *v27;
  const std::__fs::filesystem::path *v28;
  std::error_code *v29;
  int v30;
  NSObject *v31;
  uint64_t v32;
  const wireless_diagnostics::google::protobuf::UnknownFieldSet *v33;
  int *v35;
  uint64_t v36;
  int v37;
  int v38;
  void **v39;
  char *v40;
  void **v41;
  const char *v42;
  NSObject *v43;
  uint32_t v44;
  size_t v45;
  size_t v46;
  int v47;
  int v48;
  int v49;
  size_t v50;
  int v51;
  int v52;
  void **v53;
  char *v54;
  void **v55;
  const std::__fs::filesystem::path *v56;
  const std::__fs::filesystem::path *v57;
  int v58;
  int v59;
  NSObject *v60;
  NSObject *v61;
  const std::__fs::filesystem::path *v62;
  const std::__fs::filesystem::path *v63;
  int v64;
  int *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  void *__ptr;
  size_t __size;
  uint64_t v72;
  FILE *v73;
  void *__p[2];
  char v75;
  void *v76[2];
  char v77;
  uint8_t buf[4];
  size_t v79;
  __int16 v80;
  _BYTE v81[10];
  __int16 v82;
  int v83;

  v2 = *(unsigned __int8 *)(a1 + 79);
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 64);
  if ((v2 & 0x80u) == 0)
    v5 = *(unsigned __int8 *)(a1 + 79);
  else
    v5 = *(_QWORD *)(a1 + 64);
  if (!v5)
    return 1;
  v8 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "NvStore,writeCacheToDisk", buf, 2u);
    v2 = *(unsigned __int8 *)(a1 + 79);
    v4 = *(_QWORD *)(a1 + 64);
    v3 = *(_BYTE *)(a1 + 79);
  }
  if (v3 >= 0)
    v9 = v2;
  else
    v9 = v4;
  v10 = v76;
  sub_100055A5C((uint64_t)v76, v9 + 4);
  if (v77 < 0)
    v10 = (void **)v76[0];
  if (v9)
  {
    if (*(char *)(a1 + 79) >= 0)
      v11 = (const void *)(a1 + 56);
    else
      v11 = *(const void **)(a1 + 56);
    memmove(v10, v11, v9);
  }
  strcpy((char *)v10 + v9, ".tmp");
  if (*(char *)(a1 + 79) >= 0)
    v12 = *(unsigned __int8 *)(a1 + 79);
  else
    v12 = *(_QWORD *)(a1 + 64);
  v13 = __p;
  sub_100055A5C((uint64_t)__p, v12 + 4);
  if (v75 < 0)
    v13 = (void **)__p[0];
  if (v12)
  {
    if (*(char *)(a1 + 79) >= 0)
      v14 = (const void *)(a1 + 56);
    else
      v14 = *(const void **)(a1 + 56);
    memmove(v13, v14, v12);
  }
  strcpy((char *)v13 + v12, ".bak");
  if (v77 >= 0)
    v15 = v76;
  else
    v15 = (void **)v76[0];
  unlink((const char *)v15);
  if (v77 >= 0)
    v16 = v76;
  else
    v16 = (void **)v76[0];
  v17 = fopen((const char *)v16, "wb+");
  v19 = v17;
  v73 = v17;
  if (v17)
  {
    gpsd::util::changeFileToClassD(v17, v18);
    __ptr = 0;
    __size = 0;
    v72 = 0;
    if (wireless_diagnostics::google::protobuf::MessageLite::SerializeToString(a1, &__ptr))
    {
      if (SHIBYTE(v72) < 0)
      {
        v20 = __size;
        if (__size)
        {
          p_ptr = __ptr;
LABEL_42:
          if (fwrite(p_ptr, v20, 1uLL, v19) == 1)
          {
            sub_1000CC978(&v73);
            if ((a2 & 1) == 0)
            {
              v26 = qword_100100838;
              if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_debug_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "NvStore,Before moving primary to backup", buf, 2u);
              }
              if (v75 >= 0)
                v28 = (const std::__fs::filesystem::path *)__p;
              else
                v28 = (const std::__fs::filesystem::path *)__p[0];
              if (remove(v28, v27))
              {
                v30 = *__error();
                v31 = qword_100100838;
                if (v30 == 2)
                {
                  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "NvStore,No backup file so skipping removal", buf, 2u);
                  }
                }
                else if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
                {
                  v68 = strerror(v30);
                  *(_DWORD *)buf = 136446210;
                  v79 = (size_t)v68;
                  _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "NvStore,Failed to remove backup file,%{public}s", buf, 0xCu);
                }
              }
              if (*(char *)(a1 + 79) >= 0)
                v56 = (const std::__fs::filesystem::path *)(a1 + 56);
              else
                v56 = *(const std::__fs::filesystem::path **)(a1 + 56);
              if (v75 >= 0)
                v57 = (const std::__fs::filesystem::path *)__p;
              else
                v57 = (const std::__fs::filesystem::path *)__p[0];
              rename(v56, v57, v29);
              if (v58)
              {
                v59 = *__error();
                v60 = qword_100100838;
                if (v59 == 2)
                {
                  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_INFO, "NvStore,No primary file so skipping the rename of primary to backup", buf, 2u);
                  }
                }
                else if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
                {
                  v69 = strerror(v59);
                  *(_DWORD *)buf = 136446210;
                  v79 = (size_t)v69;
                  _os_log_error_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_ERROR, "NvStore,Failed to move primary file to backup,%{public}s", buf, 0xCu);
                }
              }
              v61 = qword_100100838;
              if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_debug_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEBUG, "NvStore,After moving primary to backup", buf, 2u);
              }
            }
            if (v77 >= 0)
              v62 = (const std::__fs::filesystem::path *)v76;
            else
              v62 = (const std::__fs::filesystem::path *)v76[0];
            if (*(char *)(a1 + 79) >= 0)
              v63 = (const std::__fs::filesystem::path *)(a1 + 56);
            else
              v63 = *(const std::__fs::filesystem::path **)(a1 + 56);
            rename(v62, v63, v25);
            if (!v64)
            {
              v24 = 0;
LABEL_55:
              if (SHIBYTE(v72) < 0)
                operator delete(__ptr);
              goto LABEL_57;
            }
            v65 = __error();
            v66 = qword_100100838;
            if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
            {
              v67 = strerror(*v65);
              *(_DWORD *)buf = 136446210;
              v79 = (size_t)v67;
              v42 = "NvStore,Failed to move temp file to primary,%{public}s";
              v43 = v66;
              v44 = 12;
LABEL_72:
              _os_log_error_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, v42, buf, v44);
              goto LABEL_54;
            }
          }
          else
          {
            v35 = __error();
            v36 = qword_100100838;
            if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
            {
              v37 = *v35;
              v38 = v77;
              v39 = (void **)v76[0];
              v40 = strerror(v37);
              v41 = v76;
              if (v38 < 0)
                v41 = v39;
              *(_DWORD *)buf = 136446466;
              v79 = (size_t)v41;
              v80 = 2082;
              *(_QWORD *)v81 = v40;
              v42 = "NvStore,Failed to write to temp file,%{public}s,%{public}s";
              v43 = v36;
              v44 = 22;
              goto LABEL_72;
            }
          }
          goto LABEL_54;
        }
      }
      else
      {
        v20 = HIBYTE(v72);
        if (HIBYTE(v72))
        {
          p_ptr = &__ptr;
          goto LABEL_42;
        }
      }
    }
    v32 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      v45 = HIBYTE(v72);
      v46 = __size;
      v47 = *(_DWORD *)(a1 + 40);
      v48 = *(_DWORD *)(a1 + 24);
      v49 = proto::gnsshal::NvStore::ByteSize((proto::gnsshal::NvStore *)a1, v33);
      *(_DWORD *)buf = 134349824;
      if ((v45 & 0x80u) == 0)
        v50 = v45;
      else
        v50 = v46;
      v79 = v50;
      v80 = 1026;
      *(_DWORD *)v81 = v47;
      *(_WORD *)&v81[4] = 1026;
      *(_DWORD *)&v81[6] = v48;
      v82 = 1026;
      v83 = v49;
      v42 = "NvStore,Could not serialize to string,stringSize,%{public}zu,cacheVer,%{public}d,cacheNum,%{public}d,cacheBytes,%{public}d";
      v43 = v32;
      v44 = 30;
      goto LABEL_72;
    }
LABEL_54:
    v24 = 1;
    goto LABEL_55;
  }
  v22 = __error();
  v23 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
  {
    v51 = *v22;
    v52 = v77;
    v53 = (void **)v76[0];
    v54 = strerror(v51);
    v55 = v76;
    if (v52 < 0)
      v55 = v53;
    *(_DWORD *)buf = 136446466;
    v79 = (size_t)v55;
    v80 = 2082;
    *(_QWORD *)v81 = v54;
    _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "NvStore,Failed to open temp file,%{public}s,%{public}s", buf, 0x16u);
  }
  v24 = 1;
LABEL_57:
  sub_1000CC978(&v73);
  if (v75 < 0)
    operator delete(__p[0]);
  if (v77 < 0)
  {
    operator delete(v76[0]);
    if (v24)
      return 0;
  }
  else if (v24)
  {
    return 0;
  }
  return 1;
}

void sub_100006DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, FILE *a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1000CC978(&a15);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(a1);
}

void sub_100006E84(uint64_t a1, int a2, char a3)
{
  NSObject *v3;
  _QWORD v4[5];
  int v5;
  char v6;

  v3 = *(NSObject **)(a1 + 48);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100008E74;
  v4[3] = &unk_1000F39A8;
  v4[4] = a1;
  v5 = a2;
  v6 = a3;
  dispatch_async(v3, v4);
}

uint64_t sub_100006EE4(uint64_t a1)
{
  NSObject *v2;
  _QWORD **v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  const __CFDictionary *v7;
  io_service_t MatchingService;
  mach_error_t ChildEntry;
  io_service_t v10;
  const __CFUUID *v11;
  const __CFUUID *v12;
  mach_error_t v13;
  _QWORD *v14;
  NSObject *v15;
  _QWORD *v16;
  uint64_t v17;
  void (*v18)(uint64_t, _QWORD, _QWORD, uint64_t);
  const __CFUUID *v19;
  CFUUIDBytes v20;
  _QWORD *v21;
  NSObject *v22;
  _QWORD *v23;
  mach_error_t v24;
  mach_error_t v25;
  mach_error_t v26;
  NSObject *v28;
  NSObject *v29;
  NSObject *v30;
  NSObject *v31;
  char *v32;
  NSObject *v33;
  char *v34;
  NSObject *v35;
  char *v36;
  NSObject *v37;
  char *v38;
  NSObject *v39;
  char *v40;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string v57;
  std::string v58;
  SInt32 theScore;
  std::string v60;
  std::string v61;
  std::string v62;
  io_registry_entry_t child;
  std::string v64;
  std::string v65;
  std::string v66;
  uint8_t buf[4];
  _BYTE v68[24];

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1))
  {
    v3 = (_QWORD **)(a1 + 48);
    v4 = *(_QWORD *)(a1 + 48);
    if (v4)
    {
      v5 = *(_QWORD *)(a1 + 112);
      if (v5)
      {
        v6 = qword_100100838;
        if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134349312;
          *(_QWORD *)v68 = v4;
          *(_WORD *)&v68[8] = 2050;
          *(_QWORD *)&v68[10] = v5;
          _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#spi,open,existing,plugin,%{public}p,ifc,%{public}p", buf, 0x16u);
        }
        goto LABEL_23;
      }
    }
    else
    {
      v7 = IOServiceNameMatching("gnss");
      MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v7);
      if (!MatchingService)
      {
        v30 = qword_100100838;
        if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "#spi,fail,IOServiceGetMatchingService", buf, 2u);
          v30 = qword_100100838;
        }
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)v68 = "/Library/Caches/com.apple.xbs/Sources/CoreGPS/Sources/HAL/Implementation/GnssHalCommSpi.mm";
          *(_WORD *)&v68[8] = 1026;
          *(_DWORD *)&v68[10] = 127;
          *(_WORD *)&v68[14] = 2082;
          *(_QWORD *)&v68[16] = "createIoPlugin";
          _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: assertion failure in %{public}s", buf, 0x1Cu);
        }
        sub_100025B58(&v66, "assert");
        sub_100025B58(&v65, "createIoPlugin");
        sub_100025B58(&v64, "#spi,fail,IOServiceGetMatchingService");
        gpsd::util::triggerDiagnosticReport((uint64_t)&v66, (__int128 *)&v65, (__int128 *)&v64);
        std::string::~string(&v64);
        std::string::~string(&v65);
        std::string::~string(&v66);
        __assert_rtn("createIoPlugin", "GnssHalCommSpi.mm", 127, "false && \"#spi,fail,IOServiceGetMatchingService\"");
      }
      child = 0;
      ChildEntry = IORegistryEntryGetChildEntry(MatchingService, "IOService", &child);
      if (ChildEntry)
      {
        v31 = qword_100100838;
        if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
        {
          v32 = mach_error_string(ChildEntry);
          *(_DWORD *)buf = 67240450;
          *(_DWORD *)v68 = ChildEntry;
          *(_WORD *)&v68[4] = 2082;
          *(_QWORD *)&v68[6] = v32;
          _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "#spi,fail,kern,IORegistryEntryGetChildEntry,errCode,0x%{public}X,%{public}s", buf, 0x12u);
          v31 = qword_100100838;
        }
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)v68 = "/Library/Caches/com.apple.xbs/Sources/CoreGPS/Sources/HAL/Implementation/GnssHalCommSpi.mm";
          *(_WORD *)&v68[8] = 1026;
          *(_DWORD *)&v68[10] = 131;
          *(_WORD *)&v68[14] = 2082;
          *(_QWORD *)&v68[16] = "createIoPlugin";
          _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: assertion failure in %{public}s", buf, 0x1Cu);
        }
        sub_100025B58(&v62, "assert");
        sub_100025B58(&v61, "createIoPlugin");
        sub_100025B58(&v60, "#spi,fail,kern,IORegistryEntryGetChildEntry,errCode,0x%{public}X,%{public}s");
        gpsd::util::triggerDiagnosticReport((uint64_t)&v62, (__int128 *)&v61, (__int128 *)&v60);
        std::string::~string(&v60);
        std::string::~string(&v61);
        std::string::~string(&v62);
        __assert_rtn("createIoPlugin", "GnssHalCommSpi.mm", 131, "false && \"#spi,fail,\" \"kern,\" \"IORegistryEntryGetChildEntry\" \",errCode,0x%{public}X,%{public}s\"");
      }
      theScore = 0;
      v10 = child;
      v11 = CFUUIDGetConstantUUIDWithBytes(kCFAllocatorSystemDefault, 0x31u, 0x68u, 0xB0u, 0x8Eu, 0xE5u, 0x7Du, 0x4Eu, 4u, 0x92u, 0xC9u, 0xC0u, 0x15u, 0xB8u, 0xB0u, 0xE9u, 0xABu);
      v12 = CFUUIDGetConstantUUIDWithBytes(0, 0xC2u, 0x44u, 0xE8u, 0x58u, 0x10u, 0x9Cu, 0x11u, 0xD4u, 0x91u, 0xD4u, 0, 0x50u, 0xE4u, 0xC6u, 0x42u, 0x6Fu);
      v13 = IOCreatePlugInInterfaceForService(v10, v11, v12, (IOCFPlugInInterface ***)(a1 + 48), &theScore);
      if (v13)
      {
        v35 = qword_100100838;
        if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
        {
          v36 = mach_error_string(v13);
          *(_DWORD *)buf = 67240450;
          *(_DWORD *)v68 = v13;
          *(_WORD *)&v68[4] = 2082;
          *(_QWORD *)&v68[6] = v36;
          _os_log_error_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "#spi,fail,kern,IOCreatePlugInInterfaceForService,errCode,0x%{public}X,%{public}s", buf, 0x12u);
          v35 = qword_100100838;
        }
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)v68 = "/Library/Caches/com.apple.xbs/Sources/CoreGPS/Sources/HAL/Implementation/GnssHalCommSpi.mm";
          *(_WORD *)&v68[8] = 1026;
          *(_DWORD *)&v68[10] = 135;
          *(_WORD *)&v68[14] = 2082;
          *(_QWORD *)&v68[16] = "createIoPlugin";
          _os_log_error_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: assertion failure in %{public}s", buf, 0x1Cu);
        }
        sub_100025B58(&v58, "assert");
        sub_100025B58(&v57, "createIoPlugin");
        sub_100025B58(&v56, "#spi,fail,kern,IOCreatePlugInInterfaceForService,errCode,0x%{public}X,%{public}s");
        gpsd::util::triggerDiagnosticReport((uint64_t)&v58, (__int128 *)&v57, (__int128 *)&v56);
        std::string::~string(&v56);
        std::string::~string(&v57);
        std::string::~string(&v58);
        __assert_rtn("createIoPlugin", "GnssHalCommSpi.mm", 135, "false && \"#spi,fail,\" \"kern,\" \"IOCreatePlugInInterfaceForService\" \",errCode,0x%{public}X,%{public}s\"");
      }
      v14 = *v3;
      if (!*v3 || !*v14)
      {
        v29 = qword_100100838;
        if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "#spi,fIOCFPluginInterface,nullptr", buf, 2u);
          v29 = qword_100100838;
        }
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)v68 = "/Library/Caches/com.apple.xbs/Sources/CoreGPS/Sources/HAL/Implementation/GnssHalCommSpi.mm";
          *(_WORD *)&v68[8] = 1026;
          *(_DWORD *)&v68[10] = 136;
          *(_WORD *)&v68[14] = 2082;
          *(_QWORD *)&v68[16] = "createIoPlugin";
          _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: assertion failure in %{public}s", buf, 0x1Cu);
        }
        sub_100025B58(&v55, "assert");
        sub_100025B58(&v54, "createIoPlugin");
        sub_100025B58(&v53, "#spi,fIOCFPluginInterface,nullptr");
        gpsd::util::triggerDiagnosticReport((uint64_t)&v55, (__int128 *)&v54, (__int128 *)&v53);
        std::string::~string(&v53);
        std::string::~string(&v54);
        std::string::~string(&v55);
        __assert_rtn("createIoPlugin", "GnssHalCommSpi.mm", 136, "false && \"#spi,fIOCFPluginInterface,nullptr\"");
      }
      v15 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134349312;
        *(_QWORD *)v68 = v14;
        *(_WORD *)&v68[8] = 1026;
        *(_DWORD *)&v68[10] = theScore;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#spi,opened,plugin,%{public}p,score,%{public}d", buf, 0x12u);
      }
      v16 = *(_QWORD **)(a1 + 112);
      if (v16)
      {
LABEL_22:
        if (*v16)
        {
LABEL_23:
          sub_100007F38(a1, 0);
          sub_100007F38(a1, 1);
          *(_BYTE *)(a1 + 42) = 1;
          return 1;
        }
LABEL_25:
        v28 = qword_100100838;
        if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "#spi,open,failed,fGNSSPassthroughInterface,nullptr", buf, 2u);
          v28 = qword_100100838;
        }
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)v68 = "/Library/Caches/com.apple.xbs/Sources/CoreGPS/Sources/HAL/Implementation/GnssHalCommSpi.mm";
          *(_WORD *)&v68[8] = 1026;
          *(_DWORD *)&v68[10] = 149;
          *(_WORD *)&v68[14] = 2082;
          *(_QWORD *)&v68[16] = "createIoPlugin";
          _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: assertion failure in %{public}s", buf, 0x1Cu);
        }
        sub_100025B58(&v43, "assert");
        sub_100025B58(&v42, "createIoPlugin");
        sub_100025B58(&v41, "#spi,open,failed,fGNSSPassthroughInterface,nullptr");
        gpsd::util::triggerDiagnosticReport((uint64_t)&v43, (__int128 *)&v42, (__int128 *)&v41);
        std::string::~string(&v41);
        std::string::~string(&v42);
        std::string::~string(&v43);
        __assert_rtn("createIoPlugin", "GnssHalCommSpi.mm", 149, "false && \"#spi,open,failed,fGNSSPassthroughInterface,nullptr\"");
      }
    }
    v17 = *(_QWORD *)(a1 + 48);
    v18 = *(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v17 + 8);
    v19 = CFUUIDGetConstantUUIDWithBytes(kCFAllocatorSystemDefault, 0xE8u, 0x77u, 0xCDu, 0x61u, 0x8Du, 0x30u, 0x46u, 0x2Du, 0xA3u, 0xB7u, 0xB0u, 0x11u, 0x5Au, 0x2Cu, 0xF8u, 0xA8u);
    v20 = CFUUIDGetUUIDBytes(v19);
    v21 = (_QWORD *)(a1 + 112);
    v18(v17, *(_QWORD *)&v20.byte0, *(_QWORD *)&v20.byte8, a1 + 112);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48));
    v22 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
    {
      v23 = (_QWORD *)*v21;
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v68 = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#spi,opened,ifc,%{public}p", buf, 0xCu);
    }
    v24 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 112) + 64))(*(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 104));
    if (v24)
    {
      v33 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
      {
        v34 = mach_error_string(v24);
        *(_DWORD *)buf = 67240450;
        *(_DWORD *)v68 = v24;
        *(_WORD *)&v68[4] = 2082;
        *(_QWORD *)&v68[6] = v34;
        _os_log_error_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "#spi,fail,gpti,SetDispatchQueue,errCode,0x%{public}X,%{public}s", buf, 0x12u);
        v33 = qword_100100838;
      }
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)v68 = "/Library/Caches/com.apple.xbs/Sources/CoreGPS/Sources/HAL/Implementation/GnssHalCommSpi.mm";
        *(_WORD *)&v68[8] = 1026;
        *(_DWORD *)&v68[10] = 144;
        *(_WORD *)&v68[14] = 2082;
        *(_QWORD *)&v68[16] = "createIoPlugin";
        _os_log_error_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: assertion failure in %{public}s", buf, 0x1Cu);
      }
      sub_100025B58(&v52, "assert");
      sub_100025B58(&v51, "createIoPlugin");
      sub_100025B58(&v50, "#spi,fail,gpti,SetDispatchQueue,errCode,0x%{public}X,%{public}s");
      gpsd::util::triggerDiagnosticReport((uint64_t)&v52, (__int128 *)&v51, (__int128 *)&v50);
      std::string::~string(&v50);
      std::string::~string(&v51);
      std::string::~string(&v52);
      __assert_rtn("createIoPlugin", "GnssHalCommSpi.mm", 144, "false && \"#spi,fail,\" \"gpti,\" \"SetDispatchQueue\" \",errCode,0x%{public}X,%{public}s\"");
    }
    v25 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 112) + 72))(*(_QWORD *)(a1 + 112), sub_100022F28, a1);
    if (v25)
    {
      v37 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
      {
        v38 = mach_error_string(v25);
        *(_DWORD *)buf = 67240450;
        *(_DWORD *)v68 = v25;
        *(_WORD *)&v68[4] = 2082;
        *(_QWORD *)&v68[6] = v38;
        _os_log_error_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "#spi,fail,gpti,RegisterDataHandler,errCode,0x%{public}X,%{public}s", buf, 0x12u);
        v37 = qword_100100838;
      }
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)v68 = "/Library/Caches/com.apple.xbs/Sources/CoreGPS/Sources/HAL/Implementation/GnssHalCommSpi.mm";
        *(_WORD *)&v68[8] = 1026;
        *(_DWORD *)&v68[10] = 145;
        *(_WORD *)&v68[14] = 2082;
        *(_QWORD *)&v68[16] = "createIoPlugin";
        _os_log_error_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: assertion failure in %{public}s", buf, 0x1Cu);
      }
      sub_100025B58(&v49, "assert");
      sub_100025B58(&v48, "createIoPlugin");
      sub_100025B58(&v47, "#spi,fail,gpti,RegisterDataHandler,errCode,0x%{public}X,%{public}s");
      gpsd::util::triggerDiagnosticReport((uint64_t)&v49, (__int128 *)&v48, (__int128 *)&v47);
      std::string::~string(&v47);
      std::string::~string(&v48);
      std::string::~string(&v49);
      __assert_rtn("createIoPlugin", "GnssHalCommSpi.mm", 145, "false && \"#spi,fail,\" \"gpti,\" \"RegisterDataHandler\" \",errCode,0x%{public}X,%{public}s\"");
    }
    v26 = (*(uint64_t (**)(_QWORD, void (*)(const char *, int, gpsd::util *, const unsigned __int8 *), uint64_t))(**(_QWORD **)(a1 + 112) + 88))(*(_QWORD *)(a1 + 112), sub_1000CA854, a1);
    if (v26)
    {
      v39 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
      {
        v40 = mach_error_string(v26);
        *(_DWORD *)buf = 67240450;
        *(_DWORD *)v68 = v26;
        *(_WORD *)&v68[4] = 2082;
        *(_QWORD *)&v68[6] = v40;
        _os_log_error_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "#spi,fail,gpti,RegisterEventHandler,errCode,0x%{public}X,%{public}s", buf, 0x12u);
        v39 = qword_100100838;
      }
      if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)v68 = "/Library/Caches/com.apple.xbs/Sources/CoreGPS/Sources/HAL/Implementation/GnssHalCommSpi.mm";
        *(_WORD *)&v68[8] = 1026;
        *(_DWORD *)&v68[10] = 146;
        *(_WORD *)&v68[14] = 2082;
        *(_QWORD *)&v68[16] = "createIoPlugin";
        _os_log_error_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: assertion failure in %{public}s", buf, 0x1Cu);
      }
      sub_100025B58(&v46, "assert");
      sub_100025B58(&v45, "createIoPlugin");
      sub_100025B58(&v44, "#spi,fail,gpti,RegisterEventHandler,errCode,0x%{public}X,%{public}s");
      gpsd::util::triggerDiagnosticReport((uint64_t)&v46, (__int128 *)&v45, (__int128 *)&v44);
      std::string::~string(&v44);
      std::string::~string(&v45);
      std::string::~string(&v46);
      __assert_rtn("createIoPlugin", "GnssHalCommSpi.mm", 146, "false && \"#spi,fail,\" \"gpti,\" \"RegisterEventHandler\" \",errCode,0x%{public}X,%{public}s\"");
    }
    v16 = (_QWORD *)*v21;
    if (!*v21)
      goto LABEL_25;
    goto LABEL_22;
  }
  v2 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#spi,open,alreadyOpen", buf, 2u);
  }
  return 1;
}

void sub_100007D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a25 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  if (a37 < 0)
    operator delete(a32);
  _Unwind_Resume(a1);
}

void sub_100007F38(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  mach_error_t v6;
  NSObject *v7;
  NSObject *v8;
  char *v9;
  std::string v10;
  std::string v11;
  std::string v12;
  uint8_t buf[4];
  _BYTE v14[14];
  __int16 v15;
  const char *v16;

  if (sub_100008260(*(_QWORD *)(a1 + 112)) == a2)
  {
    v4 = qword_100100830;
    if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#spi,setGnssChipPowerStateOn,alreadyInState,%{public}d", buf, 8u);
    }
  }
  if (a2)
    v5 = 2;
  else
    v5 = 1;
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 112) + 96))(*(_QWORD *)(a1 + 112), v5);
  v7 = qword_100100838;
  if (v6)
  {
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      v9 = mach_error_string(v6);
      *(_DWORD *)buf = 67240450;
      *(_DWORD *)v14 = v6;
      *(_WORD *)&v14[4] = 2082;
      *(_QWORD *)&v14[6] = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#spi,fail,gpti,SetPowerState,errCode,0x%{public}X,%{public}s", buf, 0x12u);
      v7 = qword_100100838;
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)v14 = "/Library/Caches/com.apple.xbs/Sources/CoreGPS/Sources/HAL/Implementation/GnssHalCommSpi.mm";
      *(_WORD *)&v14[8] = 1026;
      *(_DWORD *)&v14[10] = 60;
      v15 = 2082;
      v16 = "setGnssChipPowerStateOn";
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: assertion failure in %{public}s", buf, 0x1Cu);
    }
    sub_100025B58(&v12, "assert");
    sub_100025B58(&v11, "setGnssChipPowerStateOn");
    sub_100025B58(&v10, "#spi,fail,gpti,SetPowerState,errCode,0x%{public}X,%{public}s");
    gpsd::util::triggerDiagnosticReport((uint64_t)&v12, (__int128 *)&v11, (__int128 *)&v10);
    std::string::~string(&v10);
    std::string::~string(&v11);
    std::string::~string(&v12);
    __assert_rtn("setGnssChipPowerStateOn", "GnssHalCommSpi.mm", 60, "false && \"#spi,fail,\" \"gpti,\" \"SetPowerState\" \",errCode,0x%{public}X,%{public}s\"");
  }
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)v14 = a2;
    *(_WORD *)&v14[4] = 1026;
    *(_DWORD *)&v14[6] = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#spi,setGnssChipPowerStateOn,enable,%{public}d,set,%{public}d", buf, 0xEu);
  }
  if (sub_100008260(*(_QWORD *)(a1 + 112)) != a2)
  {
    v8 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#spi,setGnssChipPowerStateOn,failed", buf, 2u);
    }
  }
}

void sub_10000820C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

BOOL sub_100008260(uint64_t a1)
{
  mach_error_t v1;
  NSObject *v2;
  char *v4;
  std::string v5;
  std::string v6;
  std::string v7;
  int v8;
  uint8_t buf[4];
  _BYTE v10[14];
  __int16 v11;
  const char *v12;

  v8 = 0;
  v1 = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)a1 + 104))(a1, &v8);
  v2 = qword_100100838;
  if (v1)
  {
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      v4 = mach_error_string(v1);
      *(_DWORD *)buf = 67240450;
      *(_DWORD *)v10 = v1;
      *(_WORD *)&v10[4] = 2082;
      *(_QWORD *)&v10[6] = v4;
      _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#spi,fail,gpti,GetGnssChipPowerState,errCode,0x%{public}X,%{public}s", buf, 0x12u);
      v2 = qword_100100838;
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)v10 = "/Library/Caches/com.apple.xbs/Sources/CoreGPS/Sources/HAL/Implementation/GnssHalCommSpi.mm";
      *(_WORD *)&v10[8] = 1026;
      *(_DWORD *)&v10[10] = 70;
      v11 = 2082;
      v12 = "isGnssChipPowerStateOn";
      _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: assertion failure in %{public}s", buf, 0x1Cu);
    }
    sub_100025B58(&v7, "assert");
    sub_100025B58(&v6, "isGnssChipPowerStateOn");
    sub_100025B58(&v5, "#spi,fail,gpti,GetGnssChipPowerState,errCode,0x%{public}X,%{public}s");
    gpsd::util::triggerDiagnosticReport((uint64_t)&v7, (__int128 *)&v6, (__int128 *)&v5);
    std::string::~string(&v5);
    std::string::~string(&v6);
    std::string::~string(&v7);
    __assert_rtn("isGnssChipPowerStateOn", "GnssHalCommSpi.mm", 70, "false && \"#spi,fail,\" \"gpti,\" \"GetGnssChipPowerState\" \",errCode,0x%{public}X,%{public}s\"");
  }
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)v10 = v8;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#spi,GetGnssChipPowerState,%{public}d", buf, 8u);
  }
  return v8 == 2;
}

void sub_100008470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

uint64_t GnssHal::PlatformNvStore::storePermanent(uint64_t a1, int a2, uint64_t a3)
{
  std::mutex *v6;
  uint64_t v7;

  v6 = (std::mutex *)(a1 + 184);
  std::mutex::lock((std::mutex *)(a1 + 184));
  v7 = sub_100008538(a1, a2, a3, a1 + 96, a1 + 8);
  std::mutex::unlock(v6);
  return v7;
}

{
  std::mutex *v6;
  uint64_t v7;

  v6 = (std::mutex *)(a1 + 184);
  std::mutex::lock((std::mutex *)(a1 + 184));
  v7 = sub_1000CB834(a1, a2, a3, a1 + 96, a1 + 8);
  std::mutex::unlock(v6);
  return v7;
}

void sub_100008524(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100008538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  _BOOL8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  CFAbsoluteTime Current;
  NSObject *v32;
  int v34;
  double v35;
  const void *v36;
  int v37;
  char v38;
  uint8_t buf[4];
  double v40;
  __int16 v41;
  _BYTE v42[14];
  __int16 v43;
  int v44;

  v9 = *(unsigned int *)(a5 + 24);
  if ((int)v9 < 1)
    goto LABEL_13;
  v11 = 0;
  while (1)
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a5 + 16) + 8 * v11);
    if (*(_QWORD *)(v12 + 16) == a2)
      break;
    if (v9 == ++v11)
      goto LABEL_13;
  }
  if ((int)v9 <= (int)v11)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(buf, 3, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 825);
    v13 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(buf, "CHECK failed: (index) < (size()): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v38, v13);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)buf);
    v12 = *(_QWORD *)(*(_QWORD *)(a5 + 16) + 8 * v11);
  }
  v14 = *(_QWORD *)(v12 + 24);
  if ((*(char *)(v14 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(v14 + 23))
      goto LABEL_10;
LABEL_13:
    sub_100008C48(a1, (uint64_t)"pre-store");
    v17 = qword_100100838;
    v18 = os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG);
    if (v18)
    {
      if (a2 <= 0x7FFFFFFF)
        v34 = a2;
      else
        v34 = a2 - 0x7FFFFFFF;
      v35 = (double)gpsd::util::getMachContinuousTimeNs((gpsd::util *)v18) * 0.000000001;
      v36 = (const void *)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3);
      v37 = gpsd::util::truncatedSha256(*(gpsd::util **)a3, v36);
      *(_DWORD *)buf = 134218752;
      v40 = v35;
      v41 = 1024;
      *(_DWORD *)v42 = v34;
      *(_WORD *)&v42[4] = 2048;
      *(_QWORD *)&v42[6] = v36;
      v43 = 1024;
      v44 = v37;
      _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "NvStore,store,mach_cont_s,%.3f,id,%d,size,%zu,hash,%x", buf, 0x22u);
    }
    v19 = *(unsigned int *)(a4 + 24);
    if ((int)v19 < 1)
    {
LABEL_18:
      v22 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3 + *(_QWORD *)(a4 + 80);
      if (v22 < 8000000)
      {
        v23 = (int)v19;
        *(_QWORD *)(a4 + 80) = v22;
        v24 = *(_DWORD *)(a4 + 28);
        if ((int)v23 >= v24)
        {
          if (v24 == *(_DWORD *)(a4 + 32))
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a4 + 16), v24 + 1);
            v24 = *(_DWORD *)(a4 + 28);
          }
          *(_DWORD *)(a4 + 28) = v24 + 1;
          sub_100048888();
        }
        v25 = *(_QWORD *)(a4 + 16);
        *(_DWORD *)(a4 + 24) = v23 + 1;
        v26 = *(_QWORD *)(v25 + 8 * v23);
        *(_DWORD *)(v26 + 64) |= 8u;
        *(_QWORD *)(v26 + 32) = 0;
        Current = CFAbsoluteTimeGetCurrent();
        *(_DWORD *)(v26 + 64) |= 0x10u;
        *(CFAbsoluteTime *)(v26 + 40) = Current;
        sub_1000236BC(v26, a2, (gpsd::util **)a3);
        goto LABEL_33;
      }
      v27 = qword_100100838;
      if (!os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
      {
LABEL_35:
        v32 = qword_100100830;
        v16 = 0;
        if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "NvStore,storeToCache failed", buf, 2u);
          v16 = 0;
        }
        goto LABEL_37;
      }
    }
    else
    {
      v20 = 0;
      while (1)
      {
        v21 = *(_QWORD *)(*(_QWORD *)(a4 + 16) + 8 * v20);
        if (*(_QWORD *)(v21 + 16) == a2)
          break;
        if (v19 == ++v20)
          goto LABEL_18;
      }
      if ((int)v19 <= (int)v20)
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(buf, 3, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 833);
        v28 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(buf, "CHECK failed: (index) < (size()): ");
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v38, v28);
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)buf);
        v21 = *(_QWORD *)(*(_QWORD *)(a4 + 16) + 8 * v20);
      }
      v29 = *(_QWORD *)(v21 + 24);
      if (*(char *)(v29 + 23) < 0)
        v30 = *(_QWORD *)(v29 + 8);
      else
        v30 = *(unsigned __int8 *)(v29 + 23);
      v22 = *(_QWORD *)(a4 + 80) + *(_QWORD *)(a3 + 8) - (v30 + *(_QWORD *)a3);
      if (v22 < 8000000)
      {
        *(_QWORD *)(a4 + 80) = v22;
        sub_1000236BC(v21, a2, (gpsd::util **)a3);
LABEL_33:
        v16 = 1;
LABEL_37:
        sub_100008C48(a1, (uint64_t)"post-store");
        return v16;
      }
      v27 = qword_100100838;
      if (!os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
        goto LABEL_35;
    }
    *(_DWORD *)buf = 134349312;
    v40 = *(double *)&v22;
    v41 = 2050;
    *(_QWORD *)v42 = 8000000;
    _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "NvStore,NV_LIMIT_TOTAL_SIZE reached,%{public}lld,%{public}lld", buf, 0x16u);
    goto LABEL_35;
  }
  if (!*(_QWORD *)(v14 + 8))
    goto LABEL_13;
LABEL_10:
  v15 = qword_100100830;
  v16 = 0;
  if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "NvStore,Item already in alternate cache", buf, 2u);
    return 0;
  }
  return v16;
}

void sub_1000089E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void GnssHal::PlatformNvStore::recall(GnssHal::PlatformNvStore *this@<X0>, int a2@<W1>, unint64_t *a3@<X8>)
{
  std::mutex *v6;

  v6 = (std::mutex *)((char *)this + 184);
  std::mutex::lock((std::mutex *)((char *)this + 184));
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_100008A84((uint64_t)this, a2, a3);
  std::mutex::unlock(v6);
}

void sub_100008A60(_Unwind_Exception *a1)
{
  std::mutex *v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100008A84(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  char *v14;
  NSObject *v15;
  _BOOL8 v16;
  double v17;
  gpsd::util *v18;
  const void *v19;
  int v20;
  double v21;
  __int16 v22;
  int v23;
  __int16 v24;
  const void *v25;
  __int16 v26;
  int v27;

  v4 = a2;
  v6 = *(unsigned int *)(a1 + 32);
  if ((int)v6 < 1)
  {
LABEL_5:
    v9 = *(unsigned int *)(a1 + 120);
    if ((int)v9 < 1)
      goto LABEL_17;
    v10 = *(uint64_t **)(a1 + 112);
    while (1)
    {
      v8 = *v10;
      if (*(_QWORD *)(*v10 + 16) == a2)
        break;
      ++v10;
      if (!--v9)
        goto LABEL_17;
    }
  }
  else
  {
    v7 = *(uint64_t **)(a1 + 24);
    while (1)
    {
      v8 = *v7;
      if (*(_QWORD *)(*v7 + 16) == a2)
        break;
      ++v7;
      if (!--v6)
        goto LABEL_5;
    }
  }
  v11 = *(char **)(v8 + 24);
  if (v11[23] < 0)
    v12 = *((_QWORD *)v11 + 1);
  else
    v12 = v11[23];
  sub_100008DCC(a3, v12);
  if (v11[23] < 0)
  {
    v14 = v11;
    v11 = *(char **)v11;
    v13 = *((_QWORD *)v14 + 1);
  }
  else
  {
    v13 = v11[23];
  }
  sub_1000CD37C(v11, &v11[v13], a3);
LABEL_17:
  v15 = qword_100100838;
  v16 = os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG);
  if (v16)
  {
    if (v4 > 0x7FFFFFFF)
      LODWORD(v4) = v4 - 0x7FFFFFFF;
    v17 = (double)gpsd::util::getMachContinuousTimeNs((gpsd::util *)v16) * 0.000000001;
    v18 = (gpsd::util *)*a3;
    v19 = (const void *)(a3[1] - *a3);
    v20 = 134218752;
    v21 = v17;
    v22 = 1024;
    v23 = v4;
    v24 = 2048;
    v25 = v19;
    v26 = 1024;
    v27 = gpsd::util::truncatedSha256(v18, v19);
    _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "NvStore,recall,mach_cont_s,%.3f,id,%d,size,%zu,hash,%x", (uint8_t *)&v20, 0x22u);
  }
  sub_100008C48(a1, (uint64_t)"recalled");
}

void sub_100008C48(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  NSObject *v5;
  NSObject *v6;
  id *v7;
  int v8;
  uint64_t v9;

  v4 = atomic_load((unsigned __int8 *)&qword_100100818);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_100100818))
  {
    v7 = (id *)GpsdPreferences::instance(0);
    byte_100100810 = GpsdPreferences::verboseNvStore(v7);
    __cxa_guard_release(&qword_100100818);
  }
  if (byte_100100810)
  {
    v5 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
    {
      v8 = 136315138;
      v9 = a2;
      _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "NvStore,printState,begin,%s", (uint8_t *)&v8, 0xCu);
    }
    if (*(uint64_t *)(a1 + 88) >= 1)
      sub_1000CC73C(a1 + 8);
    sub_1000CC73C(a1 + 96);
    v6 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
    {
      v8 = 136315138;
      v9 = a2;
      _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "NvStore,printState,end,%s", (uint8_t *)&v8, 0xCu);
    }
  }
}

void sub_100008DAC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100100818);
  _Unwind_Resume(a1);
}

void sub_100008DCC(unint64_t *a1, size_t __sz)
{
  unint64_t v2;
  char *v5;
  _BYTE *v6;
  char *v7;
  _BYTE *v8;
  char *v9;
  char v10;

  v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0)
      sub_100026868();
    v5 = (char *)a1[1];
    v6 = operator new(__sz);
    v7 = &v5[(_QWORD)v6 - v2];
    v8 = v7;
    if (v5 != (char *)v2)
    {
      v9 = &v5[~v2];
      do
      {
        v10 = *--v5;
        (v9--)[(_QWORD)v6] = v10;
      }
      while (v5 != (char *)v2);
      v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
      operator delete((void *)v2);
  }
}

void sub_100008E74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  dispatch_time_t v4;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = 1000000 * *(int *)(a1 + 40);
  *(_BYTE *)(v1 + 57) = *(_BYTE *)(a1 + 44);
  v3 = *(NSObject **)(v1 + 40);
  v4 = dispatch_walltime(0, v2);
  dispatch_source_set_timer(v3, v4, v2, 0x989680uLL);
  if (!*(_BYTE *)(v1 + 56))
  {
    dispatch_resume(*(dispatch_object_t *)(v1 + 40));
    *(_BYTE *)(v1 + 56) = 1;
  }
}

void proto::gpsd::Request::~Request(proto::gpsd::Request *this)
{
  proto::gpsd::Request::~Request(this);
  operator delete();
}

{
  *(_QWORD *)this = off_1000F9A60;
  proto::gpsd::Request::SharedDtor(this);
  if (*((_QWORD *)this + 43))
    operator delete[]();
  if (*((_QWORD *)this + 40))
    operator delete[]();
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

_QWORD *proto::gpsd::Request::SharedDtor(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  if ((_QWORD *)proto::gpsd::Request::default_instance_ != this)
  {
    v1 = this;
    v2 = this[3];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = v1[4];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = v1[5];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = v1[6];
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = v1[7];
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = v1[8];
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = v1[9];
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = v1[10];
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = v1[11];
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = v1[12];
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v1[13];
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = v1[14];
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = v1[15];
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = v1[16];
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v16 = v1[17];
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = v1[18];
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v18 = v1[19];
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = v1[20];
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    v20 = v1[21];
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    v21 = v1[22];
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    v22 = v1[23];
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    v23 = v1[24];
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    v24 = v1[25];
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    v25 = v1[26];
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    v26 = v1[27];
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    v27 = v1[28];
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    v28 = v1[29];
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    v29 = v1[30];
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = v1[31];
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v31 = v1[32];
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    v32 = v1[33];
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = v1[34];
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = v1[35];
    if (v34)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
    v35 = v1[36];
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    v36 = v1[38];
    if (v36)
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
    v37 = v1[39];
    if (v37)
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
    v38 = v1[42];
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    v39 = v1[46];
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    this = (_QWORD *)v1[47];
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sub_1000092BC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1000FA258;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1000092EC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100009310(a1);
  operator delete();
}

void sub_100009310(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1000F9E20;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)proto::gpsd::InjectAssistancePosition::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void proto::gnss::Position::~Position(proto::gnss::Position *this)
{
  *(_QWORD *)this = off_1000F93A0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

{
  *(_QWORD *)this = off_1000F93A0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100009390(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1000FA2D0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1000093C0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1000FA690;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1000093F0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1000F9E98;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void proto::gpsd::InjectAssistanceFile::~InjectAssistanceFile(proto::gpsd::InjectAssistanceFile *this)
{
  *(_QWORD *)this = off_1000F9CB8;
  sub_100059B48(*((_QWORD *)this + 1));
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

{
  *(_QWORD *)this = off_1000F9CB8;
  sub_100059B48(*((_QWORD *)this + 1));
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100009468(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1000FA618;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void GpsdPreferences::glonassPerFrequencyGroupDelayMeters(id *this@<X0>, char **a2@<X8>)
{
  id v3;
  void *v4;
  NSObject *v5;
  id v6;
  char *v7;
  uint64_t v8;
  void *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint8_t buf[16];
  _BYTE v26[128];

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = objc_msgSend(*this, "arrayForKey:", CFSTR("GlonassPerFrequencyGroupDelayMeters"));
  v4 = v3;
  if (v3 && (unint64_t)objc_msgSend(v3, "count") > 0xD)
  {
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
    if (v6)
    {
      v7 = 0;
      v8 = *(_QWORD *)v22;
      do
      {
        v9 = 0;
        v10 = a2[2];
        v11 = *a2;
        do
        {
          if (*(_QWORD *)v22 != v8)
            objc_enumerationMutation(v4);
          objc_msgSend(*(id *)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)v9), "doubleValue");
          v13 = v12;
          if (v7 >= v10)
          {
            v14 = (v7 - v11) >> 3;
            v15 = v14 + 1;
            if ((unint64_t)(v14 + 1) >> 61)
              sub_100026868();
            if ((v10 - v11) >> 2 > v15)
              v15 = (v10 - v11) >> 2;
            if ((unint64_t)(v10 - v11) >= 0x7FFFFFFFFFFFFFF8)
              v16 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v16 = v15;
            if (v16)
            {
              if (v16 >> 61)
                sub_1000268B0();
              v17 = (char *)operator new(8 * v16);
            }
            else
            {
              v17 = 0;
            }
            v18 = &v17[8 * v14];
            *(_QWORD *)v18 = v13;
            v19 = v18 + 8;
            while (v7 != v11)
            {
              v20 = *((_QWORD *)v7 - 1);
              v7 -= 8;
              *((_QWORD *)v18 - 1) = v20;
              v18 -= 8;
            }
            v10 = &v17[8 * v16];
            *a2 = v18;
            a2[1] = v19;
            a2[2] = v10;
            if (v11)
              operator delete(v11);
            v11 = v18;
            v7 = v19;
          }
          else
          {
            *(_QWORD *)v7 = v12;
            v7 += 8;
          }
          a2[1] = v7;
          v9 = (char *)v9 + 1;
        }
        while (v9 != v6);
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
      }
      while (v6);
    }
  }
  else
  {
    v5 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Invalid glonassPerFrequencyGroupDelayMeters parameters", buf, 2u);
    }
  }
}

void sub_1000096C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

id GpsdPreferences::dumpSettingsToLog(id *this)
{
  id v1;
  id result;
  __int128 v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  __int128 v10;
  id v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint8_t buf[4];
  void *v17;
  __int16 v18;
  id v19;
  _BYTE v20[128];

  v11 = objc_msgSend(*this, "dictionaryRepresentation");
  v1 = objc_msgSend(objc_msgSend(v11, "allKeys"), "sortedArrayUsingSelector:", "compare:");
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  result = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)v13;
    *(_QWORD *)&v3 = 138412546;
    v10 = v3;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v13 != v5)
          objc_enumerationMutation(v1);
        v7 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)v6);
        if ((objc_msgSend(v7, "isEqualToString:", CFSTR("AppleLanguages"), v10) & 1) == 0
          && (objc_msgSend(v7, "isEqualToString:", CFSTR("NSLanguages")) & 1) == 0
          && (objc_msgSend(v7, "isEqualToString:", CFSTR("NSInterfaceStyle")) & 1) == 0)
        {
          v8 = objc_msgSend(v11, "objectForKeyedSubscript:", v7);
          v9 = qword_100100838;
          if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = v10;
            v17 = v7;
            v18 = 2112;
            v19 = v8;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Pref: %@ = %@", buf, 0x16u);
          }
        }
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      result = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
      v4 = result;
    }
    while (result);
  }
  return result;
}

void sub_1000098B8(uint64_t a1, uint64_t *a2)
{
  NSObject *v3;
  _QWORD block[5];

  NmeaLogging::append(a2);
  v3 = **(NSObject ***)(a1 + 1936);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100023898;
  block[3] = &unk_1000F0D30;
  block[4] = a1;
  dispatch_async(v3, block);
}

void NmeaLogging::append(uint64_t *a1)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  _BOOL4 v9;
  uint64_t v10;
  int v11;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  int v16;
  uint64_t v18;
  int v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  unsigned __int16 v23;
  char *v24;
  int64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  unint64_t v30;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  NSObject *v37;
  os_log_type_t v38;
  const char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  NSObject *v45;
  const char *v46;
  int v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int16 v56;
  unsigned __int16 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int16 v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint8_t buf[4];
  int v68;
  __int16 v69;
  char *v70;

  v2 = atomic_load((unsigned __int8 *)&qword_1001002A8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1001002A8))
  {
    byte_1001002A0 = os_variant_has_internal_diagnostics("com.apple.gpsd");
    __cxa_guard_release(&qword_1001002A8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_1001002B0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_1001002B0))
  {
    byte_1001002A1 = sub_10003C1F8();
    __cxa_guard_release(&qword_1001002B0);
  }
  v4 = *a1;
  v5 = a1[1];
  if (*a1 != v5)
  {
    do
    {
      v6 = 8;
      do
      {
        v7 = *(char *)(v4 + 23);
        v8 = *(unsigned __int8 *)(v4 + 23);
        v9 = v7 < 0;
        if (v7 < 0)
        {
          v15 = *(_QWORD *)(v4 + 8);
          if (!v15)
            goto LABEL_23;
          v14 = *(char **)v4;
          v16 = *(unsigned __int8 *)(*(_QWORD *)v4 + v15 - 1);
          if (v16 != 10 && v16 != 13)
            goto LABEL_50;
          v13 = v15 - 1;
          *(_QWORD *)(v4 + 8) = v15 - 1;
        }
        else
        {
          if (!*(_BYTE *)(v4 + 23))
            goto LABEL_23;
          v10 = *(unsigned __int8 *)(v4 + 23);
          v11 = *(unsigned __int8 *)(v4 - 1 + v10);
          if (v11 != 10 && v11 != 13)
            goto LABEL_22;
          v13 = v10 - 1;
          *(_BYTE *)(v4 + 23) = v10 - 1;
          v14 = (char *)v4;
        }
        v14[v13] = 0;
        --v6;
      }
      while (v6);
      v8 = *(unsigned __int8 *)(v4 + 23);
      if (*(char *)(v4 + 23) < 0)
      {
LABEL_50:
        if (*(_QWORD *)(v4 + 8) < 6uLL)
        {
          v18 = 0;
          v9 = 1;
          goto LABEL_24;
        }
        v24 = *(char **)v4;
        v9 = 1;
      }
      else
      {
LABEL_22:
        v9 = 0;
        if (v8 < 6)
        {
LABEL_23:
          v18 = 0;
          goto LABEL_24;
        }
        v24 = (char *)v4;
      }
      v18 = 0;
      v25 = v24[5] | (unint64_t)((uint64_t)v24[4] << 8) | ((((uint64_t)v24[2] << 8) | ((uint64_t)v24[1] << 16) | v24[3]) << 16);
      if (v25 > 0x5044504753)
      {
        if (v25 <= 0x5051475340)
        {
          if (v25 > 0x5044584942)
          {
            if (v25 <= 0x5044584C4BLL)
            {
              if (v25 == 0x5044584943)
                goto LABEL_202;
              v34 = 1146637379;
            }
            else
            {
              if (v25 == 0x5044584C4CLL || v25 == 0x5046504558)
                goto LABEL_202;
              v34 = 1196183378;
            }
          }
          else
          {
            if (v25 <= 0x504450544CLL)
            {
              if (v25 == 0x5044504754 || v25 == 0x5044504D43)
                goto LABEL_202;
              v32 = 19796;
            }
            else
            {
              if ((unint64_t)(v25 - 0x5044584331) <= 0x1B
                && ((1 << (v25 - 49)) & 0x8080001) != 0)
              {
                goto LABEL_202;
              }
              v32 = 21581;
            }
            v34 = v32 & 0xFFFFFFFF0000FFFFLL | 0x44500000;
          }
LABEL_200:
          v43 = v34 & 0xFFFF0000FFFFFFFFLL | 0x5000000000;
          goto LABEL_201;
        }
        if (v25 > 0x5051504452)
        {
          if (v25 <= 0x5051584648)
          {
            if (v25 == 0x5051504453 || v25 == 0x5051504531)
              goto LABEL_202;
            v34 = 1364215091;
            goto LABEL_200;
          }
          if (v25 == 0x5051584649 || v25 == 0x515A475356)
            goto LABEL_202;
          v43 = 0x515A475341;
LABEL_201:
          if (v25 != v43)
            goto LABEL_24;
          goto LABEL_202;
        }
        v27 = (unint64_t)(v25 - 0x50514D4531) < 5 || v25 == 0x5051475341;
        v28 = 1363628886;
      }
      else
      {
        if (v25 <= 0x5041474343)
        {
          if (v25 > 0x4750475355)
          {
            if (v25 <= 0x4750565446)
            {
              if (v25 == 0x4750475356 || v25 == 0x4750484454)
                goto LABEL_202;
              v26 = 1347571011;
            }
            else
            {
              if (v25 > 0x494D475340)
              {
                if (v25 == 0x494D475341)
                  goto LABEL_202;
                v34 = 1094796100;
                goto LABEL_200;
              }
              if (v25 == 0x4750565447)
                goto LABEL_202;
              v26 = 1363628886;
            }
          }
          else if (v25 <= 0x474E474E52)
          {
            if (v25 == 0x4741475341 || v25 == 0x4741475356)
              goto LABEL_202;
            v26 = 1279742806;
          }
          else if (v25 > 0x4750474740)
          {
            if (v25 == 0x4750474741)
              goto LABEL_202;
            v26 = 1346851649;
          }
          else
          {
            if (v25 == 0x474E474E53)
              goto LABEL_202;
            v26 = 1313297217;
          }
          v43 = v26 & 0xFFFF0000FFFFFFFFLL | 0x4700000000;
          goto LABEL_201;
        }
        v27 = (unint64_t)(v25 - 0x5044424741) <= 0x18
           && ((1 << (v25 - 65)) & 0x1AED17D) != 0
           || v25 == 0x5041474344;
        v28 = 1095975748;
      }
      v30 = v28 & 0xFFFF0000FFFFFFFFLL | 0x5000000000;
      if (!v27 && v25 != v30)
        goto LABEL_24;
LABEL_202:
      if (v25 == 0x5046504558)
      {
        if (v9)
        {
          if (*(_QWORD *)(v4 + 8) <= 0xAuLL)
          {
            v9 = 1;
            goto LABEL_236;
          }
          v51 = *(char **)v4;
        }
        else
        {
          v51 = (char *)v4;
          if (v8 <= 0xA)
          {
            v9 = 0;
LABEL_236:
            v55 = 1179665752;
LABEL_237:
            v18 = v55 & 0xFFFF0000FFFFFFFFLL | 0x5000000000;
LABEL_24:
            v19 = 0;
            v20 = 0;
            goto LABEL_25;
          }
        }
        v18 = v51[10] | ((((uint64_t)v51[8] << 8) | ((uint64_t)v51[7] << 16) | v51[9]) << 8);
        if (v18 > 1262898498)
        {
          if (v18 > 1262901291)
          {
            if (v18 > 1347375915)
            {
              if (v18 == 1347375916 || v18 == 1397705806)
                goto LABEL_277;
              v54 = 1347375959;
            }
            else
            {
              if (v18 == 1262901292 || v18 == 1296125996)
                goto LABEL_277;
              v54 = 1297044547;
            }
            goto LABEL_276;
          }
          if ((unint64_t)(v18 - 1262899249) <= 0x1E && ((1 << (v18 - 49)) & 0x40000003) != 0
            || v18 == 1262898499)
          {
            goto LABEL_277;
          }
          v56 = 21332;
LABEL_251:
          v54 = v56 | 0x4B460000u;
        }
        else
        {
          if (v18 <= 1162891074)
          {
            if (v18 > 1128482910)
            {
              if (v18 == 1128482911 || v18 == 1129073495)
                goto LABEL_277;
              v54 = 1145392428;
            }
            else
            {
              if ((unint64_t)(v18 - 1095194417) < 2)
                goto LABEL_277;
              v54 = 1128482881;
            }
            goto LABEL_276;
          }
          if (v18 > 1262895659)
          {
            if (v18 == 1262895660 || v18 == 1262896197)
              goto LABEL_277;
            v56 = 19777;
            goto LABEL_251;
          }
          if (v18 == 1162891075)
            goto LABEL_277;
          v54 = 1179665742;
        }
LABEL_276:
        if (v18 != v54)
          goto LABEL_236;
        goto LABEL_277;
      }
      v18 = v25;
      if (v25 != 0x50474C4F52)
        goto LABEL_277;
      if (v9)
      {
        if (*(_QWORD *)(v4 + 8) <= 0xCuLL)
        {
          v9 = 1;
LABEL_228:
          v55 = 1196183378;
          goto LABEL_237;
        }
        v50 = *(char **)v4;
      }
      else
      {
        v50 = (char *)v4;
        if (v8 <= 0xC)
        {
          v9 = 0;
          goto LABEL_228;
        }
      }
      if (v50[9] == 44)
        v52 = 10;
      else
        v52 = 9;
      v18 = ((uint64_t)v50[v52 + 1] << 8) | ((uint64_t)v50[v52] << 16) | v50[v52 + 2];
      if (v18 > 5260864)
      {
        if (v18 <= 5456211)
        {
          if (v18 > 5265233)
          {
            if (v18 == 5265234)
              goto LABEL_277;
            v53 = 5392708;
          }
          else
          {
            if (v18 == 5260865)
              goto LABEL_277;
            v53 = 5260877;
          }
        }
        else if (v18 <= 5461056)
        {
          if (v18 == 5456212)
            goto LABEL_277;
          v53 = 5458255;
        }
        else
        {
          if (v18 == 5461057 || v18 == 5461571)
            goto LABEL_277;
          v53 = 5590595;
        }
      }
      else if (v18 <= 4672590)
      {
        if (v18 > 4606285)
        {
          if (v18 == 4606286)
            goto LABEL_277;
          v53 = 4606296;
        }
        else
        {
          if (v18 == 4278083)
            goto LABEL_277;
          v53 = 4412504;
        }
      }
      else if (v18 <= 5002064)
      {
        if (v18 == 4672591)
          goto LABEL_277;
        v53 = 4738113;
      }
      else
      {
        if (v18 == 5002065 || v18 == 5129559)
          goto LABEL_277;
        v53 = 5133901;
      }
      if (v18 != v53)
        goto LABEL_228;
LABEL_277:
      v20 = 2;
      v19 = 1;
      if (v18 > 0x4750475340)
      {
        if (v18 <= 0x5044584330)
        {
          if (v18 > 0x4751475355)
          {
            if ((unint64_t)(v18 - 0x5044424741) <= 0x18
              && ((1 << (v18 - 65)) & 0x1AE5175) != 0
              || v18 == 0x4751475356)
            {
              goto LABEL_25;
            }
            v58 = 1095975748;
LABEL_340:
            v59 = v58 & 0xFFFF0000FFFFFFFFLL | 0x5000000000;
LABEL_351:
            if (v18 != v59)
              goto LABEL_24;
            goto LABEL_25;
          }
          if (v18 == 0x4750475341 || v18 == 0x4750475356)
            goto LABEL_25;
          v61 = 1347571011;
LABEL_337:
          v59 = v61 & 0xFFFF0000FFFFFFFFLL | 0x4700000000;
          goto LABEL_351;
        }
        if (v18 <= 0x50514D4530)
        {
          if (v18 > 0x5044584942)
          {
            if (v18 != 0x5044584943 && v18 != 0x5044584C43)
            {
              v60 = 0x5044584C4CLL;
              goto LABEL_355;
            }
          }
          else if ((unint64_t)(v18 - 0x5044584331) > 0x1B
                 || ((1 << (v18 - 49)) & 0x8080001) == 0)
          {
            goto LABEL_24;
          }
          goto LABEL_356;
        }
        if (v18 > 0x5051504452)
        {
          if (v18 > 0x5051504532)
          {
            if (v18 == 0x5051504533)
              goto LABEL_25;
            v58 = 1364739657;
          }
          else
          {
            if (v18 == 0x5051504453)
              goto LABEL_25;
            v58 = 1364215089;
          }
          goto LABEL_340;
        }
        if ((unint64_t)(v18 - 0x50514D4531) > 3 || v18 == 0x50514D4533)
          goto LABEL_24;
      }
      else
      {
        if (v18 > 1262895659)
        {
          if (v18 <= 1296125995)
          {
            if (v18 <= 1262899248)
            {
              if (v18 > 1262898496)
              {
                if (v18 == 1262898497)
                  goto LABEL_25;
                v57 = 19779;
              }
              else
              {
                if (v18 == 1262895660)
                  goto LABEL_356;
                v57 = 17477;
              }
            }
            else
            {
              if (v18 > 1262900051)
              {
                if (v18 != 1262900052)
                {
                  v60 = 1262901292;
                  goto LABEL_355;
                }
                goto LABEL_356;
              }
              if ((unint64_t)(v18 - 1262899249) < 2)
                goto LABEL_356;
              v57 = 20559;
            }
            v59 = v57 | 0x4B460000u;
            goto LABEL_351;
          }
          if (v18 <= 1397705805)
          {
            if (v18 <= 1347375915)
            {
              if (v18 != 1296125996)
              {
                v60 = 1297044547;
                goto LABEL_355;
              }
              goto LABEL_356;
            }
            if (v18 == 1347375916)
              goto LABEL_356;
            v59 = 1347375959;
            goto LABEL_351;
          }
          if (v18 > 0x474C475355)
          {
            if (v18 == 0x474C475356)
              goto LABEL_25;
            v61 = 1313297217;
          }
          else
          {
            if (v18 == 1397705806)
              goto LABEL_356;
            v61 = 1095193430;
          }
          goto LABEL_337;
        }
        if (v18 <= 1095194416)
        {
          if (v18 > 5392707)
          {
            if (v18 > 5461056)
            {
              if (v18 == 5461057)
                goto LABEL_25;
              v62 = 22083;
            }
            else
            {
              if (v18 == 5392708)
                goto LABEL_25;
              v62 = 16724;
            }
            v59 = v62 | 0x530000u;
          }
          else if (v18 > 4738112)
          {
            if (v18 == 4738113)
              goto LABEL_25;
            v59 = 5002065;
          }
          else
          {
            if (v18 == 4278083)
              goto LABEL_25;
            v59 = 4412504;
          }
          goto LABEL_351;
        }
        if (v18 > 1129073494)
        {
          if (v18 > 1162891074)
          {
            if (v18 == 1162891075)
              goto LABEL_25;
            v60 = 1179665742;
          }
          else
          {
            if (v18 == 1129073495)
              goto LABEL_25;
            v60 = 1145392428;
          }
LABEL_355:
          if (v18 != v60)
            goto LABEL_24;
LABEL_356:
          v19 = 0;
          v20 = 1;
          goto LABEL_25;
        }
        if ((unint64_t)(v18 - 1095194417) >= 2 && v18 != 1128482881)
        {
          v60 = 1128482911;
          goto LABEL_355;
        }
      }
LABEL_25:
      if (v18 > 0x4750484453)
      {
        if (v18 > 0x5044504753)
        {
          if (v18 <= 0x5044584C4BLL)
          {
            if (v18 <= 0x5044584330)
            {
              if (v18 > 0x5044504D53)
              {
                if (v18 == 0x5044504D54)
                  goto LABEL_139;
                v33 = 21581;
              }
              else
              {
                if (v18 == 0x5044504754)
                  goto LABEL_139;
                v33 = 19779;
              }
              v21 = v33 & 0xFFFFFFFF0000FFFFLL | 0x44500000;
            }
            else
            {
              if ((unint64_t)(v18 - 0x5044584331) <= 0x1B
                && ((1 << (v18 - 49)) & 0x8080001) != 0
                || v18 == 0x5044584943)
              {
                goto LABEL_139;
              }
              v21 = 1146637379;
            }
          }
          else if (v18 > 0x5051504452)
          {
            if (v18 == 0x5051504453 || v18 == 0x5051504531)
              goto LABEL_139;
            v21 = 1364215091;
          }
          else
          {
            if ((unint64_t)(v18 - 0x50514D4531) < 5 || v18 == 0x5044584C4CLL)
              goto LABEL_139;
            v21 = 1363628865;
          }
        }
        else if (v18 <= 0x5041474343)
        {
          if (v18 == 0x4750484454 || v18 == 0x4750565447)
            goto LABEL_139;
          v21 = 1094796100;
        }
        else
        {
          if ((unint64_t)(v18 - 0x5044424741) <= 0x18
            && ((1 << (v18 - 65)) & 0x1AE5175) != 0
            || v18 == 0x5041474344)
          {
            goto LABEL_139;
          }
          v21 = 1095975748;
        }
        v22 = v21 & 0xFFFF0000FFFFFFFFLL | 0x5000000000;
        goto LABEL_138;
      }
      if (v18 <= 1129073494)
      {
        if (v18 > 5265233)
        {
          if (v18 > 1095194416)
          {
            if ((unint64_t)(v18 - 1095194417) < 2 || v18 == 1128482881)
              goto LABEL_139;
            v22 = 1128482911;
          }
          else if (v18 <= 5458254)
          {
            if (v18 == 5265234)
              goto LABEL_139;
            v22 = 5392708;
          }
          else
          {
            if (v18 == 5458255 || v18 == 5461057)
              goto LABEL_139;
            v22 = 5590595;
          }
        }
        else if (v18 > 4738112)
        {
          if (v18 <= 5133900)
          {
            if (v18 == 4738113)
              goto LABEL_139;
            v22 = 5129559;
          }
          else
          {
            if (v18 == 5133901 || v18 == 5260865)
              goto LABEL_139;
            v22 = 5260877;
          }
        }
        else if (v18 <= 4606285)
        {
          if (v18 == 4278083)
            goto LABEL_139;
          v22 = 4412504;
        }
        else
        {
          if (v18 == 4606286 || v18 == 4606296)
            goto LABEL_139;
          v22 = 4672591;
        }
        goto LABEL_138;
      }
      if (v18 <= 1262899248)
      {
        if (v18 <= 1262895659)
        {
          if (v18 > 1162891074)
          {
            if (v18 == 1162891075)
              goto LABEL_139;
            v22 = 1179665742;
          }
          else
          {
            if (v18 == 1129073495)
              goto LABEL_139;
            v22 = 1145392428;
          }
          goto LABEL_138;
        }
        if (v18 > 1262898496)
        {
          if (v18 == 1262898497)
            goto LABEL_139;
          v23 = 19779;
        }
        else
        {
          if (v18 == 1262895660)
            goto LABEL_139;
          v23 = 17477;
        }
      }
      else
      {
        if (v18 > 1296125995)
        {
          if (v18 <= 1347375915)
          {
            if (v18 == 1296125996)
              goto LABEL_139;
            v22 = 1297044547;
          }
          else
          {
            if (v18 == 1347375916 || v18 == 1347375959)
              goto LABEL_139;
            v22 = 1397705806;
          }
          goto LABEL_138;
        }
        if ((unint64_t)(v18 - 1262899249) <= 0x1E && ((1 << (v18 - 49)) & 0x40000003) != 0
          || v18 == 1262900052)
        {
          goto LABEL_139;
        }
        v23 = 22572;
      }
      v22 = v23 | 0x4B460000u;
LABEL_138:
      if (v18 != v22)
      {
        if (byte_1001002A0)
          v47 = 2;
        else
          v47 = 1;
        if (!v19)
          v47 = v20;
        if (!v47)
        {
          v65 = qword_100100820;
          if (!os_log_type_enabled((os_log_t)qword_100100820, OS_LOG_TYPE_DEBUG))
            goto LABEL_151;
          v66 = (char *)v4;
          if (v9)
            v66 = *(char **)v4;
          *(_DWORD *)buf = 67240451;
          v68 = byte_1001002A1;
          v69 = 2081;
          v70 = v66;
          v45 = v65;
          v46 = "%{public}c,NMEA:%{private}s";
          goto LABEL_181;
        }
        if (v47 == 1)
        {
          v63 = qword_100100820;
          if (!os_log_type_enabled((os_log_t)qword_100100820, OS_LOG_TYPE_INFO))
            goto LABEL_151;
          v64 = (char *)v4;
          if (v9)
            v64 = *(char **)v4;
          *(_DWORD *)buf = 67240451;
          v68 = byte_1001002A1;
          v69 = 2081;
          v70 = v64;
          v37 = v63;
          v38 = OS_LOG_TYPE_INFO;
          v39 = "%{public}c,NMEA:%{private}s";
        }
        else
        {
          v48 = qword_100100820;
          if (!os_log_type_enabled((os_log_t)qword_100100820, OS_LOG_TYPE_DEFAULT))
            goto LABEL_151;
          v49 = (char *)v4;
          if (v9)
            v49 = *(char **)v4;
          *(_DWORD *)buf = 67240451;
          v68 = byte_1001002A1;
          v69 = 2081;
          v70 = v49;
          v37 = v48;
          v38 = OS_LOG_TYPE_DEFAULT;
          v39 = "%{public}c,NMEA:%{private}s";
        }
        goto LABEL_149;
      }
LABEL_139:
      if (v20)
      {
        if (v20 == 1)
        {
          v40 = qword_100100820;
          if (os_log_type_enabled((os_log_t)qword_100100820, OS_LOG_TYPE_INFO))
          {
            v41 = (char *)v4;
            if (v9)
              v41 = *(char **)v4;
            *(_DWORD *)buf = 67240450;
            v68 = byte_1001002A1;
            v69 = 2082;
            v70 = v41;
            v37 = v40;
            v38 = OS_LOG_TYPE_INFO;
            v39 = "%{public}c,NMEA:%{public}s";
            goto LABEL_149;
          }
        }
        else
        {
          v35 = qword_100100820;
          if (os_log_type_enabled((os_log_t)qword_100100820, OS_LOG_TYPE_DEFAULT))
          {
            v36 = (char *)v4;
            if (v9)
              v36 = *(char **)v4;
            *(_DWORD *)buf = 67240450;
            v68 = byte_1001002A1;
            v69 = 2082;
            v70 = v36;
            v37 = v35;
            v38 = OS_LOG_TYPE_DEFAULT;
            v39 = "%{public}c,NMEA:%{public}s";
LABEL_149:
            _os_log_impl((void *)&_mh_execute_header, v37, v38, v39, buf, 0x12u);
          }
        }
      }
      else
      {
        v42 = qword_100100820;
        if (os_log_type_enabled((os_log_t)qword_100100820, OS_LOG_TYPE_DEBUG))
        {
          v44 = (char *)v4;
          if (v9)
            v44 = *(char **)v4;
          *(_DWORD *)buf = 67240450;
          v68 = byte_1001002A1;
          v69 = 2082;
          v70 = v44;
          v45 = v42;
          v46 = "%{public}c,NMEA:%{public}s";
LABEL_181:
          _os_log_debug_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, v46, buf, 0x12u);
        }
      }
LABEL_151:
      v4 += 24;
    }
    while (v4 != v5);
  }
}

void sub_10000AEB8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1001002B0);
  _Unwind_Resume(a1);
}

void sub_10000AEE0(uint64_t a1, xpc_object_t object)
{
  uint64_t v3;
  const void *data;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  void (*v8)(uint64_t);
  NSObject *v9;
  gpsd::util *uint64;
  gpsd::util *v11;
  unint64_t MachContinuousTimeNs;
  NSObject *v13;
  NSObject *v14;
  _QWORD v15[6];
  size_t length;
  uint8_t buf[16];
  __int128 v18;
  uint64_t v19;

  v3 = *(_QWORD *)(a1 + 32);
  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_error)
  {
    v5 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240962;
      *(_DWORD *)&buf[4] = object == &_xpc_error_connection_interrupted;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = object == &_xpc_error_connection_invalid;
      *(_WORD *)&buf[14] = 1026;
      LODWORD(v18) = object == &_xpc_error_termination_imminent;
      WORD2(v18) = 2080;
      *(_QWORD *)((char *)&v18 + 6) = xpc_dictionary_get_string(object, _xpc_error_key_description);
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#gpsdClientManager,handleXPCMessage,ErrorType,INTERRUPTED,%{public}d,INVALID,%{public}d,IMMINENT,%{public}d,ErrorDesc,%s", buf, 0x1Eu);
    }
    if (object == &_xpc_error_connection_invalid)
    {
      v9 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#gpsdClientManager,handleXPCConnectionInvalid,receipt", buf, 2u);
      }
      v7 = *(NSObject **)(v3 + 32);
      *(_QWORD *)buf = _NSConcreteStackBlock;
      v8 = sub_10003B994;
    }
    else
    {
      if (object != &_xpc_error_termination_imminent)
      {
LABEL_16:
        std::mutex::lock((std::mutex *)(v3 + 40));
        xpc_connection_set_event_handler(*(xpc_connection_t *)(v3 + 16), &stru_1000F3218);
        xpc_connection_cancel(*(xpc_connection_t *)(v3 + 16));
        xpc_release(*(xpc_object_t *)(v3 + 16));
        *(_QWORD *)(v3 + 16) = 0;
        std::mutex::unlock((std::mutex *)(v3 + 40));
        return;
      }
      v6 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#gpsdClientManager,handleXPCConnectionTermination,receipt", buf, 2u);
      }
      v7 = *(NSObject **)(v3 + 32);
      *(_QWORD *)buf = _NSConcreteStackBlock;
      v8 = sub_10003B920;
    }
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&v18 = v8;
    *((_QWORD *)&v18 + 1) = &unk_1000F0D30;
    v19 = v3;
    dispatch_async(v7, buf);
    goto LABEL_16;
  }
  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_dictionary)
  {
    length = 0;
    data = xpc_dictionary_get_data(object, "gpsdRequest", &length);
    xpc_dictionary_get_uint64(object, "requestNumber");
    xpc_dictionary_get_uint64(object, "timeNs");
    if (data)
    {
      v15[0] = 0;
      v15[1] = v15;
      v15[2] = 0x3812000000;
      v15[3] = sub_10002392C;
      v15[4] = sub_1000238C8;
      v15[5] = 0;
      operator new();
    }
    uint64 = (gpsd::util *)xpc_dictionary_get_uint64(object, "connection_ns");
    v11 = uint64;
    if (uint64)
    {
      MachContinuousTimeNs = gpsd::util::getMachContinuousTimeNs(uint64);
      v13 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134349056;
        *(double *)&buf[4] = (double)(MachContinuousTimeNs - (unint64_t)v11) * 0.000000001;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#gpsdClientManager,incomingConnection,age_sec,%{public}.3f", buf, 0xCu);
      }
      v14 = *(NSObject **)(v3 + 32);
      *(_QWORD *)buf = _NSConcreteStackBlock;
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&v18 = sub_10003B8AC;
      *((_QWORD *)&v18 + 1) = &unk_1000F0D30;
      v19 = v3;
      dispatch_async(v14, buf);
    }
  }
}

void sub_10000BB40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;
  uint64_t v45;

  if (a16 < 0)
    operator delete(__p);
  if (*(char *)(v43 - 153) < 0)
    operator delete(*(void **)(v43 - 176));
  CLP::LogEntry::LogEntry::~LogEntry((CLP::LogEntry::LogEntry *)(v43 - 144));
  _Block_object_dispose(&a18, 8);
  v45 = a24;
  a24 = 0;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  _Unwind_Resume(a1);
}

uint64_t sub_10000BC8C(uint64_t a1)
{
  NSObject **v2;
  NSObject *v3;
  NSObject **v4;
  NSObject *v5;
  void **block;
  uint64_t v8;
  void (*v9)(uint64_t);
  void *v10;
  NSObject **v11;

  v2 = *(NSObject ***)(a1 + 128);
  v3 = *v2;
  block = _NSConcreteStackBlock;
  v8 = 3221225472;
  v9 = sub_100018768;
  v10 = &unk_1000F0D30;
  v11 = v2;
  dispatch_async(v3, &block);
  v4 = *(NSObject ***)(a1 + 120);
  v5 = *v4;
  block = _NSConcreteStackBlock;
  v8 = 3221225472;
  v9 = sub_100018768;
  v10 = &unk_1000F0D30;
  v11 = v4;
  dispatch_async(v5, &block);
  return 1;
}

uint64_t proto::gpsd::Request::MergePartialFromCodedStream(proto::gpsd::Request *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char **v5;
  char *v6;
  char *v7;
  unsigned int *v8;
  unsigned int *v9;
  char *v10;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  char *v19;
  int v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  int v28;
  uint64_t result;
  char *v30;
  unint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  char *v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  int v39;
  BOOL v40;
  int v41;
  _BYTE *v42;
  uint64_t v43;
  char *v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  int v49;
  int v50;
  _BYTE *v51;
  int *v52;
  char *v53;
  int v54;
  int v55;
  int v56;
  unsigned int v57;
  int v58;
  int v59;
  _BYTE *v60;
  int *v61;
  char *v62;
  int v63;
  int v64;
  int v65;
  unsigned int v66;
  int v67;
  int v68;
  _BYTE *v69;
  int *v70;
  char *v71;
  int v72;
  int v73;
  int v74;
  unsigned int v75;
  int v76;
  int v77;
  _BYTE *v78;
  uint64_t v79;
  char *v80;
  int v81;
  int v82;
  int v83;
  unsigned int v84;
  int v85;
  int v86;
  _BYTE *v87;
  uint64_t v88;
  char *v89;
  int v90;
  int v91;
  int v92;
  unsigned int v93;
  int v94;
  int v95;
  _BYTE *v96;
  _DWORD *v97;
  char *v98;
  int v99;
  int v100;
  int v101;
  unsigned int v102;
  int v103;
  int v104;
  _BYTE *v105;
  uint64_t v106;
  char *v107;
  int v108;
  int v109;
  int v110;
  unsigned int v111;
  int v112;
  int v113;
  _BYTE *v114;
  uint64_t v115;
  char *v116;
  int v117;
  int v118;
  int v119;
  unsigned int v120;
  int v121;
  int v122;
  _BYTE *v123;
  uint64_t v124;
  char *v125;
  int v126;
  int v127;
  int v128;
  unsigned int v129;
  int v130;
  int v131;
  _BYTE *v132;
  uint64_t v133;
  char *v134;
  int v135;
  int v136;
  int v137;
  unsigned int v138;
  int v139;
  int v140;
  unsigned __int8 *v141;
  proto::gpsd::InjectAssistanceFile *v142;
  char *v143;
  int v144;
  int v145;
  int v146;
  unsigned int v147;
  int v148;
  int v149;
  unsigned __int8 *v150;
  proto::gpsd::InjectRtiFile *v151;
  char *v152;
  int v153;
  int v154;
  int v155;
  unsigned int v156;
  int v157;
  int v158;
  unsigned __int8 *v159;
  int *v160;
  char *v161;
  int v162;
  int v163;
  int v164;
  unsigned int v165;
  int v166;
  int v167;
  unsigned __int8 *v168;
  uint64_t v169;
  char *v170;
  int v171;
  int v172;
  int v173;
  unsigned int v174;
  int v175;
  int v176;
  unsigned __int8 *v177;
  uint64_t v178;
  char *v179;
  int v180;
  int v181;
  int v182;
  unsigned int v183;
  int v184;
  int v185;
  unsigned __int8 *v186;
  uint64_t v187;
  char *v188;
  int v189;
  int v190;
  int v191;
  unsigned int v192;
  int v193;
  int v194;
  unsigned __int8 *v195;
  uint64_t v196;
  char *v197;
  int v198;
  int v199;
  int v200;
  unsigned int v201;
  int v202;
  int v203;
  unsigned __int8 *v204;
  unsigned int *v205;
  char *v206;
  int v207;
  int v208;
  int v209;
  unsigned int v210;
  int v211;
  int v212;
  unsigned __int8 *v213;
  uint64_t v214;
  char *v215;
  int v216;
  int v217;
  int v218;
  unsigned int v219;
  int v220;
  int v221;
  unsigned __int8 *v222;
  uint64_t v223;
  char *v224;
  int v225;
  int v226;
  int v227;
  unsigned int v228;
  int v229;
  int v230;
  unsigned __int8 *v231;
  uint64_t v232;
  char *v233;
  int v234;
  int v235;
  int v236;
  unsigned int v237;
  int v238;
  int v239;
  unsigned __int8 *v240;
  uint64_t v241;
  char *v242;
  int v243;
  int v244;
  int v245;
  unsigned int v246;
  int v247;
  int v248;
  unsigned __int8 *v249;
  proto::gpsd::StartContext *v250;
  char *v251;
  int v252;
  int v253;
  int v254;
  unsigned int v255;
  int v256;
  int v257;
  unsigned __int8 *v258;
  uint64_t v259;
  char *v260;
  int v261;
  int v262;
  int v263;
  unsigned int v264;
  int v265;
  int v266;
  unsigned __int8 *v267;
  uint64_t v268;
  char *v269;
  int v270;
  int v271;
  int v272;
  unsigned int v273;
  int v274;
  int v275;
  unsigned __int8 *v276;
  uint64_t v277;
  char *v278;
  int v279;
  int v280;
  int v281;
  unsigned int v282;
  int v283;
  int v284;
  unsigned __int8 *v285;
  proto::gnss::Emergency::EmergConfig *v286;
  char *v287;
  int v288;
  int v289;
  int v290;
  unsigned int v291;
  int v292;
  int v293;
  unsigned __int8 *v294;
  proto::gnss::Emergency::PositionRequest *v295;
  char *v296;
  int v297;
  int v298;
  int v299;
  unsigned int v300;
  int v301;
  int v302;
  unsigned __int8 *v303;
  char *v304;
  proto::gnss::Emergency::GpsReferenceTime *v305;
  char *v306;
  int v307;
  int v308;
  int v309;
  unsigned int v310;
  int v311;
  int v312;
  unsigned __int8 *v313;
  proto::gnss::Emergency::ReferenceLocation *v314;
  char *v315;
  int v316;
  int v317;
  int v318;
  unsigned int v319;
  int v320;
  int v321;
  unsigned __int8 *v322;
  proto::gnss::Emergency::GpsNavigationModel *v323;
  char *v324;
  int v325;
  int v326;
  int v327;
  unsigned int v328;
  int v329;
  int v330;
  unsigned __int8 *v331;
  proto::gnss::Emergency::GpsAcqAssistance *v332;
  char *v333;
  int v334;
  int v335;
  int v336;
  unsigned int v337;
  int v338;
  int v339;
  unsigned __int8 *v340;
  proto::gnss::Emergency::CellFTAssistance *v341;
  char *v342;
  int v343;
  int v344;
  int v345;
  unsigned int v346;
  int v347;
  int v348;
  unsigned __int8 *v349;
  proto::gnss::Emergency::CplaneContext *v350;
  char *v351;
  int v352;
  int v353;
  int v354;
  unsigned int v355;
  int v356;
  int v357;
  unsigned __int8 *v358;
  int v359;
  int v360;
  unsigned int v361;
  uint64_t v362;
  int v363;
  int v364;
  unsigned __int8 *v365;
  unint64_t v366;
  int v367;
  uint64_t v368;
  unsigned int v369;
  uint64_t v370;
  proto::gnss::Emergency::LocationId *v371;
  char *v372;
  int v373;
  int v374;
  int v375;
  unsigned int v376;
  int v377;
  int v378;
  unsigned __int8 *v379;
  char *v380;
  int v381;
  int v382;
  unsigned int v383;
  uint64_t v384;
  int v385;
  int v386;
  unsigned __int8 *v387;
  unint64_t v388;
  int v389;
  uint64_t v390;
  unsigned int v391;
  uint64_t v392;
  unsigned int v393;
  char *v394;
  char *v395;
  proto::gnss::Emergency::SuplContext *v396;
  char *v397;
  int v398;
  int v399;
  int v400;
  unsigned int v401;
  int v402;
  int v403;
  unsigned __int8 *v404;
  proto::gnss::Emergency::WlanMeasurementList *v405;
  char *v406;
  int v407;
  int v408;
  int v409;
  unsigned int v410;
  int v411;
  int v412;
  unint64_t *v413;
  unsigned int *v414;
  unsigned int *v415;
  unsigned int v416;
  char v417;
  unsigned int v418[12];

  v5 = (char **)((char *)a2 + 8);
  v6 = (char *)this + 344;
  v7 = (char *)this + 320;
  v8 = (unsigned int *)((char *)this + 16);
  v415 = (unsigned int *)((char *)this + 296);
  v9 = (unsigned int *)((char *)this + 300);
  v413 = (unint64_t *)((char *)this + 8);
  v414 = (unsigned int *)((char *)this + 364);
LABEL_2:
  while (2)
  {
    v10 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v10 >= *((_QWORD *)a2 + 2) || *v10 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v10;
      *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      *((_QWORD *)a2 + 1) = v10 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_108;
        v14 = (char *)*((_QWORD *)a2 + 1);
        v13 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v14 >= v13 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v413);
          if (!(_DWORD)result)
            return result;
          v15 = (char *)*((_QWORD *)a2 + 1);
          v13 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v413 = *v14;
          v15 = v14 + 1;
          *v5 = v15;
        }
        *((_DWORD *)this + 97) |= 1u;
        if ((unint64_t)v15 < v13 && *v15 == 16)
        {
          v16 = v15 + 1;
          *v5 = v16;
          goto LABEL_120;
        }
        continue;
      case 2u:
        v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_108;
        v16 = (char *)*((_QWORD *)a2 + 1);
        v13 = *((_QWORD *)a2 + 2);
LABEL_120:
        if ((unint64_t)v16 >= v13 || *v16 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v8);
          if (!(_DWORD)result)
            return result;
          v30 = (char *)*((_QWORD *)a2 + 1);
          v13 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v8 = *v16;
          v30 = v16 + 1;
          *v5 = v30;
        }
        *((_DWORD *)this + 97) |= 2u;
        if ((unint64_t)v30 >= v13 || *v30 != 24)
          continue;
        v17 = v30 + 1;
        *v5 = v17;
LABEL_128:
        v418[0] = 0;
        if ((unint64_t)v17 >= v13 || *v17 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v418);
          if (!(_DWORD)result)
            return result;
          v31 = v418[0];
        }
        else
        {
          v31 = *v17;
          *v5 = v17 + 1;
        }
        if (proto::gpsd::Request_Type_IsValid((proto::gpsd *)v31))
        {
          *((_DWORD *)this + 97) |= 4u;
          *((_DWORD *)this + 5) = v31;
        }
        v32 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v32 >= *((_QWORD *)a2 + 2) || *v32 != 34)
          continue;
        *v5 = v32 + 1;
LABEL_138:
        *((_DWORD *)this + 97) |= 8u;
        v33 = *((_QWORD *)this + 3);
        if (!v33)
          operator new();
        v418[0] = 0;
        v34 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v34 >= *((_QWORD *)a2 + 2) || *v34 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v418))return 0;
        }
        else
        {
          v418[0] = *v34;
          *v5 = v34 + 1;
        }
        v35 = *((_DWORD *)a2 + 14);
        v36 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v35 + 1;
        if (v35 >= v36)
          return 0;
        v37 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v418[0]);
        if (!sub_100015FF8(v33, a2, v38) || !*((_BYTE *)a2 + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v37);
        v39 = *((_DWORD *)a2 + 14);
        v40 = __OFSUB__(v39, 1);
        v41 = v39 - 1;
        if (v41 < 0 == v40)
          *((_DWORD *)a2 + 14) = v41;
        v42 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v42 >= *((_QWORD *)a2 + 2) || *v42 != 42)
          continue;
        *v5 = v42 + 1;
LABEL_152:
        *((_DWORD *)this + 97) |= 0x10u;
        v43 = *((_QWORD *)this + 4);
        if (!v43)
          operator new();
        v418[0] = 0;
        v44 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v44 >= *((_QWORD *)a2 + 2) || *v44 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v418))return 0;
        }
        else
        {
          v418[0] = *v44;
          *v5 = v44 + 1;
        }
        v45 = *((_DWORD *)a2 + 14);
        v46 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v45 + 1;
        if (v45 >= v46)
          return 0;
        v47 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v418[0]);
        if (!sub_100016644(v43, a2, v48) || !*((_BYTE *)a2 + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v47);
        v49 = *((_DWORD *)a2 + 14);
        v40 = __OFSUB__(v49, 1);
        v50 = v49 - 1;
        if (v50 < 0 == v40)
          *((_DWORD *)a2 + 14) = v50;
        v51 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v51 >= *((_QWORD *)a2 + 2) || *v51 != 50)
          continue;
        *v5 = v51 + 1;
LABEL_166:
        *((_DWORD *)this + 97) |= 0x20u;
        v52 = (int *)*((_QWORD *)this + 5);
        if (!v52)
          operator new();
        v418[0] = 0;
        v53 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v53 >= *((_QWORD *)a2 + 2) || *v53 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v418))return 0;
        }
        else
        {
          v418[0] = *v53;
          *v5 = v53 + 1;
        }
        v54 = *((_DWORD *)a2 + 14);
        v55 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v54 + 1;
        if (v54 >= v55)
          return 0;
        v56 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v418[0]);
        if (!sub_1000BC3A4(v52, a2, v57) || !*((_BYTE *)a2 + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v56);
        v58 = *((_DWORD *)a2 + 14);
        v40 = __OFSUB__(v58, 1);
        v59 = v58 - 1;
        if (v59 < 0 == v40)
          *((_DWORD *)a2 + 14) = v59;
        v60 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v60 >= *((_QWORD *)a2 + 2) || *v60 != 58)
          continue;
        *v5 = v60 + 1;
LABEL_180:
        *((_DWORD *)this + 97) |= 0x40u;
        v61 = (int *)*((_QWORD *)this + 6);
        if (!v61)
          operator new();
        v418[0] = 0;
        v62 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v62 >= *((_QWORD *)a2 + 2) || *v62 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v418))return 0;
        }
        else
        {
          v418[0] = *v62;
          *v5 = v62 + 1;
        }
        v63 = *((_DWORD *)a2 + 14);
        v64 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v63 + 1;
        if (v63 >= v64)
          return 0;
        v65 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v418[0]);
        if (!sub_1000BC7B4(v61, a2, v66) || !*((_BYTE *)a2 + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v65);
        v67 = *((_DWORD *)a2 + 14);
        v40 = __OFSUB__(v67, 1);
        v68 = v67 - 1;
        if (v68 < 0 == v40)
          *((_DWORD *)a2 + 14) = v68;
        v69 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v69 >= *((_QWORD *)a2 + 2) || *v69 != 66)
          continue;
        *v5 = v69 + 1;
LABEL_194:
        *((_DWORD *)this + 97) |= 0x80u;
        v70 = (int *)*((_QWORD *)this + 7);
        if (!v70)
          operator new();
        v418[0] = 0;
        v71 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v71 >= *((_QWORD *)a2 + 2) || *v71 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v418))return 0;
        }
        else
        {
          v418[0] = *v71;
          *v5 = v71 + 1;
        }
        v72 = *((_DWORD *)a2 + 14);
        v73 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v72 + 1;
        if (v72 >= v73)
          return 0;
        v74 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v418[0]);
        if (!sub_1000BCBC4(v70, a2, v75) || !*((_BYTE *)a2 + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v74);
        v76 = *((_DWORD *)a2 + 14);
        v40 = __OFSUB__(v76, 1);
        v77 = v76 - 1;
        if (v77 < 0 == v40)
          *((_DWORD *)a2 + 14) = v77;
        v78 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v78 >= *((_QWORD *)a2 + 2) || *v78 != 74)
          continue;
        *v5 = v78 + 1;
LABEL_208:
        *((_DWORD *)this + 97) |= 0x100u;
        v79 = *((_QWORD *)this + 8);
        if (!v79)
          operator new();
        v418[0] = 0;
        v80 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v80 >= *((_QWORD *)a2 + 2) || *v80 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v418))return 0;
        }
        else
        {
          v418[0] = *v80;
          *v5 = v80 + 1;
        }
        v81 = *((_DWORD *)a2 + 14);
        v82 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v81 + 1;
        if (v81 >= v82)
          return 0;
        v83 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v418[0]);
        if (!sub_1000BCFB8(v79, a2, v84) || !*((_BYTE *)a2 + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v83);
        v85 = *((_DWORD *)a2 + 14);
        v40 = __OFSUB__(v85, 1);
        v86 = v85 - 1;
        if (v86 < 0 == v40)
          *((_DWORD *)a2 + 14) = v86;
        v87 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v87 >= *((_QWORD *)a2 + 2) || *v87 != 82)
          continue;
        *v5 = v87 + 1;
LABEL_222:
        *((_DWORD *)this + 97) |= 0x200u;
        v88 = *((_QWORD *)this + 9);
        if (!v88)
          operator new();
        v418[0] = 0;
        v89 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v89 >= *((_QWORD *)a2 + 2) || *v89 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v418))return 0;
        }
        else
        {
          v418[0] = *v89;
          *v5 = v89 + 1;
        }
        v90 = *((_DWORD *)a2 + 14);
        v91 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v90 + 1;
        if (v90 >= v91)
          return 0;
        v92 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v418[0]);
        if (!sub_1000BD388(v88, a2, v93) || !*((_BYTE *)a2 + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v92);
        v94 = *((_DWORD *)a2 + 14);
        v40 = __OFSUB__(v94, 1);
        v95 = v94 - 1;
        if (v95 < 0 == v40)
          *((_DWORD *)a2 + 14) = v95;
        v96 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v96 >= *((_QWORD *)a2 + 2) || *v96 != 90)
          continue;
        *v5 = v96 + 1;
LABEL_236:
        *((_DWORD *)this + 97) |= 0x400u;
        v97 = (_DWORD *)*((_QWORD *)this + 10);
        if (!v97)
          operator new();
        v418[0] = 0;
        v98 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v98 >= *((_QWORD *)a2 + 2) || *v98 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v418))return 0;
        }
        else
        {
          v418[0] = *v98;
          *v5 = v98 + 1;
        }
        v99 = *((_DWORD *)a2 + 14);
        v100 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v99 + 1;
        if (v99 >= v100)
          return 0;
        v101 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v418[0]);
        if (!sub_100015CE4(v97, a2, v102) || !*((_BYTE *)a2 + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v101);
        v103 = *((_DWORD *)a2 + 14);
        v40 = __OFSUB__(v103, 1);
        v104 = v103 - 1;
        if (v104 < 0 == v40)
          *((_DWORD *)a2 + 14) = v104;
        v105 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v105 >= *((_QWORD *)a2 + 2) || *v105 != 98)
          continue;
        *v5 = v105 + 1;
LABEL_250:
        *((_DWORD *)this + 97) |= 0x800u;
        v106 = *((_QWORD *)this + 11);
        if (!v106)
          operator new();
        v418[0] = 0;
        v107 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v107 >= *((_QWORD *)a2 + 2) || *v107 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v418))return 0;
        }
        else
        {
          v418[0] = *v107;
          *v5 = v107 + 1;
        }
        v108 = *((_DWORD *)a2 + 14);
        v109 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v108 + 1;
        if (v108 >= v109)
          return 0;
        v110 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v418[0]);
        if (!sub_100016374(v106, a2, v111) || !*((_BYTE *)a2 + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v110);
        v112 = *((_DWORD *)a2 + 14);
        v40 = __OFSUB__(v112, 1);
        v113 = v112 - 1;
        if (v113 < 0 == v40)
          *((_DWORD *)a2 + 14) = v113;
        v114 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v114 >= *((_QWORD *)a2 + 2) || *v114 != 106)
          continue;
        *v5 = v114 + 1;
LABEL_264:
        *((_DWORD *)this + 97) |= 0x1000u;
        v115 = *((_QWORD *)this + 12);
        if (!v115)
          operator new();
        v418[0] = 0;
        v116 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v116 >= *((_QWORD *)a2 + 2) || *v116 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v418))return 0;
        }
        else
        {
          v418[0] = *v116;
          *v5 = v116 + 1;
        }
        v117 = *((_DWORD *)a2 + 14);
        v118 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v117 + 1;
        if (v117 >= v118)
          return 0;
        v119 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v418[0]);
        if (!sub_1000248AC(v115, a2, v120) || !*((_BYTE *)a2 + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v119);
        v121 = *((_DWORD *)a2 + 14);
        v40 = __OFSUB__(v121, 1);
        v122 = v121 - 1;
        if (v122 < 0 == v40)
          *((_DWORD *)a2 + 14) = v122;
        v123 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v123 >= *((_QWORD *)a2 + 2) || *v123 != 114)
          continue;
        *v5 = v123 + 1;
LABEL_278:
        *((_DWORD *)this + 97) |= 0x2000u;
        v124 = *((_QWORD *)this + 13);
        if (!v124)
          operator new();
        v418[0] = 0;
        v125 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v125 >= *((_QWORD *)a2 + 2) || *v125 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v418))return 0;
        }
        else
        {
          v418[0] = *v125;
          *v5 = v125 + 1;
        }
        v126 = *((_DWORD *)a2 + 14);
        v127 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v126 + 1;
        if (v126 >= v127)
          return 0;
        v128 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v418[0]);
        if (!sub_1000BE2B0(v124, a2, v129) || !*((_BYTE *)a2 + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v128);
        v130 = *((_DWORD *)a2 + 14);
        v40 = __OFSUB__(v130, 1);
        v131 = v130 - 1;
        if (v131 < 0 == v40)
          *((_DWORD *)a2 + 14) = v131;
        v132 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v132 >= *((_QWORD *)a2 + 2) || *v132 != 122)
          continue;
        *v5 = v132 + 1;
LABEL_292:
        *((_DWORD *)this + 97) |= 0x4000u;
        v133 = *((_QWORD *)this + 14);
        if (!v133)
          operator new();
        v418[0] = 0;
        v134 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v134 >= *((_QWORD *)a2 + 2) || *v134 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v418))return 0;
        }
        else
        {
          v418[0] = *v134;
          *v5 = v134 + 1;
        }
        v135 = *((_DWORD *)a2 + 14);
        v136 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v135 + 1;
        if (v135 >= v136)
          return 0;
        v137 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v418[0]);
        if (!sub_1000BE700(v133, a2, v138) || !*((_BYTE *)a2 + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v137);
        v139 = *((_DWORD *)a2 + 14);
        v40 = __OFSUB__(v139, 1);
        v140 = v139 - 1;
        if (v140 < 0 == v40)
          *((_DWORD *)a2 + 14) = v140;
        v141 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v141 <= 1 || *v141 != 130 || v141[1] != 1)
          continue;
        *v5 = (char *)(v141 + 2);
LABEL_307:
        *((_DWORD *)this + 97) |= 0x8000u;
        v142 = (proto::gpsd::InjectAssistanceFile *)*((_QWORD *)this + 15);
        if (!v142)
          operator new();
        v418[0] = 0;
        v143 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v143 >= *((_QWORD *)a2 + 2) || *v143 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v418))return 0;
        }
        else
        {
          v418[0] = *v143;
          *v5 = v143 + 1;
        }
        v144 = *((_DWORD *)a2 + 14);
        v145 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v144 + 1;
        if (v144 >= v145)
          return 0;
        v146 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v418[0]);
        if (!proto::gpsd::InjectAssistanceFile::MergePartialFromCodedStream(v142, a2, v147)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v146);
        v148 = *((_DWORD *)a2 + 14);
        v40 = __OFSUB__(v148, 1);
        v149 = v148 - 1;
        if (v149 < 0 == v40)
          *((_DWORD *)a2 + 14) = v149;
        v150 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v150 <= 1 || *v150 != 138 || v150[1] != 1)
          continue;
        *v5 = (char *)(v150 + 2);
LABEL_322:
        *((_DWORD *)this + 97) |= 0x10000u;
        v151 = (proto::gpsd::InjectRtiFile *)*((_QWORD *)this + 16);
        if (!v151)
          operator new();
        v418[0] = 0;
        v152 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v152 >= *((_QWORD *)a2 + 2) || *v152 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v418))return 0;
        }
        else
        {
          v418[0] = *v152;
          *v5 = v152 + 1;
        }
        v153 = *((_DWORD *)a2 + 14);
        v154 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v153 + 1;
        if (v153 >= v154)
          return 0;
        v155 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v418[0]);
        if (!proto::gpsd::InjectRtiFile::MergePartialFromCodedStream(v151, a2, v156)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v155);
        v157 = *((_DWORD *)a2 + 14);
        v40 = __OFSUB__(v157, 1);
        v158 = v157 - 1;
        if (v158 < 0 == v40)
          *((_DWORD *)a2 + 14) = v158;
        v159 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v159 <= 1 || *v159 != 146 || v159[1] != 1)
          continue;
        *v5 = (char *)(v159 + 2);
LABEL_337:
        *((_DWORD *)this + 97) |= 0x20000u;
        v160 = (int *)*((_QWORD *)this + 17);
        if (!v160)
          operator new();
        v418[0] = 0;
        v161 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v161 >= *((_QWORD *)a2 + 2) || *v161 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v418))return 0;
        }
        else
        {
          v418[0] = *v161;
          *v5 = v161 + 1;
        }
        v162 = *((_DWORD *)a2 + 14);
        v163 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v162 + 1;
        if (v162 >= v163)
          return 0;
        v164 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v418[0]);
        if (!sub_1000BB680(v160, a2, v165) || !*((_BYTE *)a2 + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v164);
        v166 = *((_DWORD *)a2 + 14);
        v40 = __OFSUB__(v166, 1);
        v167 = v166 - 1;
        if (v167 < 0 == v40)
          *((_DWORD *)a2 + 14) = v167;
        v168 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v168 <= 1 || *v168 != 154 || v168[1] != 1)
          continue;
        *v5 = (char *)(v168 + 2);
LABEL_352:
        *((_DWORD *)this + 97) |= 0x40000u;
        v169 = *((_QWORD *)this + 18);
        if (!v169)
          operator new();
        v418[0] = 0;
        v170 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v170 >= *((_QWORD *)a2 + 2) || *v170 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v418))return 0;
        }
        else
        {
          v418[0] = *v170;
          *v5 = v170 + 1;
        }
        v171 = *((_DWORD *)a2 + 14);
        v172 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v171 + 1;
        if (v171 >= v172)
          return 0;
        v173 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v418[0]);
        if (!sub_1000BBE74(v169, a2, v174) || !*((_BYTE *)a2 + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v173);
        v175 = *((_DWORD *)a2 + 14);
        v40 = __OFSUB__(v175, 1);
        v176 = v175 - 1;
        if (v176 < 0 == v40)
          *((_DWORD *)a2 + 14) = v176;
        v177 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v177 <= 1 || *v177 != 162 || v177[1] != 1)
          continue;
        *v5 = (char *)(v177 + 2);
LABEL_367:
        *((_DWORD *)this + 97) |= 0x80000u;
        v178 = *((_QWORD *)this + 19);
        if (!v178)
          operator new();
        v418[0] = 0;
        v179 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v179 >= *((_QWORD *)a2 + 2) || *v179 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v418))return 0;
        }
        else
        {
          v418[0] = *v179;
          *v5 = v179 + 1;
        }
        v180 = *((_DWORD *)a2 + 14);
        v181 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v180 + 1;
        if (v180 >= v181)
          return 0;
        v182 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v418[0]);
        if (!sub_1000BAC78(v178, a2, v183) || !*((_BYTE *)a2 + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v182);
        v184 = *((_DWORD *)a2 + 14);
        v40 = __OFSUB__(v184, 1);
        v185 = v184 - 1;
        if (v185 < 0 == v40)
          *((_DWORD *)a2 + 14) = v185;
        v186 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v186 <= 1 || *v186 != 170 || v186[1] != 1)
          continue;
        *v5 = (char *)(v186 + 2);
LABEL_382:
        *((_DWORD *)this + 97) |= 0x100000u;
        v187 = *((_QWORD *)this + 20);
        if (!v187)
          operator new();
        v418[0] = 0;
        v188 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v188 >= *((_QWORD *)a2 + 2) || *v188 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v418))return 0;
        }
        else
        {
          v418[0] = *v188;
          *v5 = v188 + 1;
        }
        v189 = *((_DWORD *)a2 + 14);
        v190 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v189 + 1;
        if (v189 >= v190)
          return 0;
        v191 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v418[0]);
        if (!sub_1000BC0D4(v187, a2, v192) || !*((_BYTE *)a2 + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v191);
        v193 = *((_DWORD *)a2 + 14);
        v40 = __OFSUB__(v193, 1);
        v194 = v193 - 1;
        if (v194 < 0 == v40)
          *((_DWORD *)a2 + 14) = v194;
        v195 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v195 <= 1 || *v195 != 178 || v195[1] != 1)
          continue;
        *v5 = (char *)(v195 + 2);
LABEL_397:
        *((_DWORD *)this + 97) |= 0x200000u;
        v196 = *((_QWORD *)this + 21);
        if (!v196)
          operator new();
        v418[0] = 0;
        v197 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v197 >= *((_QWORD *)a2 + 2) || *v197 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v418))return 0;
        }
        else
        {
          v418[0] = *v197;
          *v5 = v197 + 1;
        }
        v198 = *((_DWORD *)a2 + 14);
        v199 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v198 + 1;
        if (v198 >= v199)
          return 0;
        v200 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v418[0]);
        if (!sub_1000BEE2C(v196, a2, v201) || !*((_BYTE *)a2 + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v200);
        v202 = *((_DWORD *)a2 + 14);
        v40 = __OFSUB__(v202, 1);
        v203 = v202 - 1;
        if (v203 < 0 == v40)
          *((_DWORD *)a2 + 14) = v203;
        v204 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v204 <= 1 || *v204 != 186 || v204[1] != 1)
          continue;
        *v5 = (char *)(v204 + 2);
LABEL_412:
        *((_DWORD *)this + 97) |= 0x400000u;
        v205 = (unsigned int *)*((_QWORD *)this + 22);
        if (!v205)
          operator new();
        v418[0] = 0;
        v206 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v206 >= *((_QWORD *)a2 + 2) || *v206 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v418))return 0;
        }
        else
        {
          v418[0] = *v206;
          *v5 = v206 + 1;
        }
        v207 = *((_DWORD *)a2 + 14);
        v208 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v207 + 1;
        if (v207 >= v208)
          return 0;
        v209 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v418[0]);
        if (!sub_100024710(v205, a2, v210) || !*((_BYTE *)a2 + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v209);
        v211 = *((_DWORD *)a2 + 14);
        v40 = __OFSUB__(v211, 1);
        v212 = v211 - 1;
        if (v212 < 0 == v40)
          *((_DWORD *)a2 + 14) = v212;
        v213 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v213 <= 1 || *v213 != 194 || v213[1] != 1)
          continue;
        *v5 = (char *)(v213 + 2);
LABEL_427:
        *((_DWORD *)this + 97) |= 0x800000u;
        v214 = *((_QWORD *)this + 23);
        if (!v214)
          operator new();
        v418[0] = 0;
        v215 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v215 >= *((_QWORD *)a2 + 2) || *v215 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v418))return 0;
        }
        else
        {
          v418[0] = *v215;
          *v5 = v215 + 1;
        }
        v216 = *((_DWORD *)a2 + 14);
        v217 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v216 + 1;
        if (v216 >= v217)
          return 0;
        v218 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v418[0]);
        if (!sub_100016528(v214, a2, v219) || !*((_BYTE *)a2 + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v218);
        v220 = *((_DWORD *)a2 + 14);
        v40 = __OFSUB__(v220, 1);
        v221 = v220 - 1;
        if (v221 < 0 == v40)
          *((_DWORD *)a2 + 14) = v221;
        v222 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v222 <= 1 || *v222 != 202 || v222[1] != 1)
          continue;
        *v5 = (char *)(v222 + 2);
LABEL_442:
        *((_DWORD *)this + 97) |= 0x1000000u;
        v223 = *((_QWORD *)this + 24);
        if (!v223)
          operator new();
        v418[0] = 0;
        v224 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v224 >= *((_QWORD *)a2 + 2) || *v224 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v418))return 0;
        }
        else
        {
          v418[0] = *v224;
          *v5 = v224 + 1;
        }
        v225 = *((_DWORD *)a2 + 14);
        v226 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v225 + 1;
        if (v225 >= v226)
          return 0;
        v227 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v418[0]);
        if (!sub_1000BF5D4(v223, a2, v228) || !*((_BYTE *)a2 + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v227);
        v229 = *((_DWORD *)a2 + 14);
        v40 = __OFSUB__(v229, 1);
        v230 = v229 - 1;
        if (v230 < 0 == v40)
          *((_DWORD *)a2 + 14) = v230;
        v231 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v231 <= 1 || *v231 != 210 || v231[1] != 1)
          continue;
        *v5 = (char *)(v231 + 2);
LABEL_457:
        *((_DWORD *)this + 97) |= 0x2000000u;
        v232 = *((_QWORD *)this + 25);
        if (!v232)
          operator new();
        v418[0] = 0;
        v233 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v233 >= *((_QWORD *)a2 + 2) || *v233 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v418))return 0;
        }
        else
        {
          v418[0] = *v233;
          *v5 = v233 + 1;
        }
        v234 = *((_DWORD *)a2 + 14);
        v235 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v234 + 1;
        if (v234 >= v235)
          return 0;
        v236 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v418[0]);
        if (!sub_1000BF8C4(v232, a2, v237) || !*((_BYTE *)a2 + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v236);
        v238 = *((_DWORD *)a2 + 14);
        v40 = __OFSUB__(v238, 1);
        v239 = v238 - 1;
        if (v239 < 0 == v40)
          *((_DWORD *)a2 + 14) = v239;
        v240 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v240 <= 1 || *v240 != 218 || v240[1] != 1)
          continue;
        *v5 = (char *)(v240 + 2);
LABEL_472:
        *((_DWORD *)this + 97) |= 0x4000000u;
        v241 = *((_QWORD *)this + 26);
        if (!v241)
          operator new();
        v418[0] = 0;
        v242 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v242 >= *((_QWORD *)a2 + 2) || *v242 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v418))return 0;
        }
        else
        {
          v418[0] = *v242;
          *v5 = v242 + 1;
        }
        v243 = *((_DWORD *)a2 + 14);
        v244 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v243 + 1;
        if (v243 >= v244)
          return 0;
        v245 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v418[0]);
        if (!sub_1000C363C(v241, a2, v246) || !*((_BYTE *)a2 + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v245);
        v247 = *((_DWORD *)a2 + 14);
        v40 = __OFSUB__(v247, 1);
        v248 = v247 - 1;
        if (v248 < 0 == v40)
          *((_DWORD *)a2 + 14) = v248;
        v249 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v249 <= 1 || *v249 != 226 || v249[1] != 1)
          continue;
        *v5 = (char *)(v249 + 2);
LABEL_487:
        *((_DWORD *)this + 97) |= 0x8000000u;
        v250 = (proto::gpsd::StartContext *)*((_QWORD *)this + 27);
        if (!v250)
          operator new();
        v418[0] = 0;
        v251 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v251 >= *((_QWORD *)a2 + 2) || *v251 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v418))return 0;
        }
        else
        {
          v418[0] = *v251;
          *v5 = v251 + 1;
        }
        v252 = *((_DWORD *)a2 + 14);
        v253 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v252 + 1;
        if (v252 >= v253)
          return 0;
        v254 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v418[0]);
        if (!proto::gpsd::StartContext::MergePartialFromCodedStream(v250, a2, v255)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v254);
        v256 = *((_DWORD *)a2 + 14);
        v40 = __OFSUB__(v256, 1);
        v257 = v256 - 1;
        if (v257 < 0 == v40)
          *((_DWORD *)a2 + 14) = v257;
        v258 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v258 <= 1 || *v258 != 234 || v258[1] != 1)
          continue;
        *v5 = (char *)(v258 + 2);
LABEL_502:
        *((_DWORD *)this + 97) |= 0x10000000u;
        v259 = *((_QWORD *)this + 28);
        if (!v259)
          operator new();
        v418[0] = 0;
        v260 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v260 >= *((_QWORD *)a2 + 2) || *v260 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v418))return 0;
        }
        else
        {
          v418[0] = *v260;
          *v5 = v260 + 1;
        }
        v261 = *((_DWORD *)a2 + 14);
        v262 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v261 + 1;
        if (v261 >= v262)
          return 0;
        v263 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v418[0]);
        if (!sub_1000C40E0(v259, a2, v264) || !*((_BYTE *)a2 + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v263);
        v265 = *((_DWORD *)a2 + 14);
        v40 = __OFSUB__(v265, 1);
        v266 = v265 - 1;
        if (v266 < 0 == v40)
          *((_DWORD *)a2 + 14) = v266;
        v267 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v267 <= 1 || *v267 != 242 || v267[1] != 1)
          continue;
        *v5 = (char *)(v267 + 2);
LABEL_517:
        *((_DWORD *)this + 97) |= 0x20000000u;
        v268 = *((_QWORD *)this + 29);
        if (!v268)
          operator new();
        v418[0] = 0;
        v269 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v269 >= *((_QWORD *)a2 + 2) || *v269 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v418))return 0;
        }
        else
        {
          v418[0] = *v269;
          *v5 = v269 + 1;
        }
        v270 = *((_DWORD *)a2 + 14);
        v271 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v270 + 1;
        if (v270 >= v271)
          return 0;
        v272 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v418[0]);
        if (!sub_1000BEAC0(v268, a2, v273) || !*((_BYTE *)a2 + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v272);
        v274 = *((_DWORD *)a2 + 14);
        v40 = __OFSUB__(v274, 1);
        v275 = v274 - 1;
        if (v275 < 0 == v40)
          *((_DWORD *)a2 + 14) = v275;
        v276 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v276 <= 1 || *v276 != 250 || v276[1] != 1)
          continue;
        *v5 = (char *)(v276 + 2);
LABEL_532:
        *((_DWORD *)this + 97) |= 0x40000000u;
        v277 = *((_QWORD *)this + 30);
        if (!v277)
          operator new();
        v418[0] = 0;
        v278 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v278 >= *((_QWORD *)a2 + 2) || *v278 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v418))return 0;
        }
        else
        {
          v418[0] = *v278;
          *v5 = v278 + 1;
        }
        v279 = *((_DWORD *)a2 + 14);
        v280 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v279 + 1;
        if (v279 >= v280)
          return 0;
        v281 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v418[0]);
        if (!sub_1000184DC(v277, a2, v282) || !*((_BYTE *)a2 + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v281);
        v283 = *((_DWORD *)a2 + 14);
        v40 = __OFSUB__(v283, 1);
        v284 = v283 - 1;
        if (v284 < 0 == v40)
          *((_DWORD *)a2 + 14) = v284;
        v285 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v285 <= 1 || *v285 != 146 || v285[1] != 3)
          continue;
        *v5 = (char *)(v285 + 2);
LABEL_547:
        *((_DWORD *)this + 97) |= 0x80000000;
        v286 = (proto::gnss::Emergency::EmergConfig *)*((_QWORD *)this + 31);
        if (!v286)
          operator new();
        v418[0] = 0;
        v287 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v287 >= *((_QWORD *)a2 + 2) || *v287 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v418))return 0;
        }
        else
        {
          v418[0] = *v287;
          *v5 = v287 + 1;
        }
        v288 = *((_DWORD *)a2 + 14);
        v289 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v288 + 1;
        if (v288 >= v289)
          return 0;
        v290 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v418[0]);
        if (!proto::gnss::Emergency::EmergConfig::MergePartialFromCodedStream(v286, a2, v291)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v290);
        v292 = *((_DWORD *)a2 + 14);
        v40 = __OFSUB__(v292, 1);
        v293 = v292 - 1;
        if (v293 < 0 == v40)
          *((_DWORD *)a2 + 14) = v293;
        v294 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v294 <= 1 || *v294 != 226 || v294[1] != 3)
          continue;
        *v5 = (char *)(v294 + 2);
LABEL_562:
        *((_DWORD *)this + 98) |= 1u;
        v295 = (proto::gnss::Emergency::PositionRequest *)*((_QWORD *)this + 32);
        if (!v295)
          operator new();
        v418[0] = 0;
        v296 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v296 >= *((_QWORD *)a2 + 2) || *v296 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v418))return 0;
        }
        else
        {
          v418[0] = *v296;
          *v5 = v296 + 1;
        }
        v297 = *((_DWORD *)a2 + 14);
        v298 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v297 + 1;
        if (v297 >= v298)
          return 0;
        v299 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v418[0]);
        if (!proto::gnss::Emergency::PositionRequest::MergePartialFromCodedStream(v295, a2, v300)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v299);
        v301 = *((_DWORD *)a2 + 14);
        v40 = __OFSUB__(v301, 1);
        v302 = v301 - 1;
        if (v302 < 0 == v40)
          *((_DWORD *)a2 + 14) = v302;
        v303 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v18 = *((_QWORD *)a2 + 2);
        if ((int)v18 - (int)v303 <= 1 || *v303 != 232 || v303[1] != 3)
          continue;
        v19 = (char *)(v303 + 2);
        *v5 = v19;
LABEL_577:
        if ((unint64_t)v19 >= v18 || *v19 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v415);
          if (!(_DWORD)result)
            return result;
          v304 = (char *)*((_QWORD *)a2 + 1);
          v18 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v415 = *v19;
          v304 = v19 + 1;
          *v5 = v304;
        }
        v20 = *((_DWORD *)this + 98) | 2;
        *((_DWORD *)this + 98) = v20;
        if ((int)v18 - (int)v304 < 2 || *v304 != 242 || v304[1] != 3)
          continue;
        *v5 = v304 + 2;
LABEL_586:
        *((_DWORD *)this + 98) = v20 | 4;
        v305 = (proto::gnss::Emergency::GpsReferenceTime *)*((_QWORD *)this + 33);
        if (!v305)
          operator new();
        v418[0] = 0;
        v306 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v306 >= *((_QWORD *)a2 + 2) || *v306 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v418))return 0;
        }
        else
        {
          v418[0] = *v306;
          *v5 = v306 + 1;
        }
        v307 = *((_DWORD *)a2 + 14);
        v308 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v307 + 1;
        if (v307 >= v308)
          return 0;
        v309 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v418[0]);
        if (!proto::gnss::Emergency::GpsReferenceTime::MergePartialFromCodedStream(v305, a2, v310)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v309);
        v311 = *((_DWORD *)a2 + 14);
        v40 = __OFSUB__(v311, 1);
        v312 = v311 - 1;
        if (v312 < 0 == v40)
          *((_DWORD *)a2 + 14) = v312;
        v313 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v313 <= 1 || *v313 != 250 || v313[1] != 3)
          continue;
        *v5 = (char *)(v313 + 2);
LABEL_601:
        *((_DWORD *)this + 98) |= 8u;
        v314 = (proto::gnss::Emergency::ReferenceLocation *)*((_QWORD *)this + 34);
        if (!v314)
          operator new();
        v418[0] = 0;
        v315 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v315 >= *((_QWORD *)a2 + 2) || *v315 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v418))return 0;
        }
        else
        {
          v418[0] = *v315;
          *v5 = v315 + 1;
        }
        v316 = *((_DWORD *)a2 + 14);
        v317 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v316 + 1;
        if (v316 >= v317)
          return 0;
        v318 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v418[0]);
        if (!proto::gnss::Emergency::ReferenceLocation::MergePartialFromCodedStream(v314, a2, v319)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v318);
        v320 = *((_DWORD *)a2 + 14);
        v40 = __OFSUB__(v320, 1);
        v321 = v320 - 1;
        if (v321 < 0 == v40)
          *((_DWORD *)a2 + 14) = v321;
        v322 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v322 <= 1 || *v322 != 130 || v322[1] != 4)
          continue;
        *v5 = (char *)(v322 + 2);
LABEL_616:
        *((_DWORD *)this + 98) |= 0x10u;
        v323 = (proto::gnss::Emergency::GpsNavigationModel *)*((_QWORD *)this + 35);
        if (!v323)
          operator new();
        v418[0] = 0;
        v324 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v324 >= *((_QWORD *)a2 + 2) || *v324 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v418))return 0;
        }
        else
        {
          v418[0] = *v324;
          *v5 = v324 + 1;
        }
        v325 = *((_DWORD *)a2 + 14);
        v326 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v325 + 1;
        if (v325 >= v326)
          return 0;
        v327 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v418[0]);
        if (!proto::gnss::Emergency::GpsNavigationModel::MergePartialFromCodedStream(v323, a2, v328)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v327);
        v329 = *((_DWORD *)a2 + 14);
        v40 = __OFSUB__(v329, 1);
        v330 = v329 - 1;
        if (v330 < 0 == v40)
          *((_DWORD *)a2 + 14) = v330;
        v331 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v331 <= 1 || *v331 != 138 || v331[1] != 4)
          continue;
        *v5 = (char *)(v331 + 2);
LABEL_631:
        *((_DWORD *)this + 98) |= 0x20u;
        v332 = (proto::gnss::Emergency::GpsAcqAssistance *)*((_QWORD *)this + 36);
        if (!v332)
          operator new();
        v418[0] = 0;
        v333 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v333 >= *((_QWORD *)a2 + 2) || *v333 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v418))return 0;
        }
        else
        {
          v418[0] = *v333;
          *v5 = v333 + 1;
        }
        v334 = *((_DWORD *)a2 + 14);
        v335 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v334 + 1;
        if (v334 >= v335)
          return 0;
        v336 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v418[0]);
        if (!proto::gnss::Emergency::GpsAcqAssistance::MergePartialFromCodedStream(v332, a2, v337)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v336);
        v338 = *((_DWORD *)a2 + 14);
        v40 = __OFSUB__(v338, 1);
        v339 = v338 - 1;
        if (v339 < 0 == v40)
          *((_DWORD *)a2 + 14) = v339;
        v340 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v340 <= 1 || *v340 != 146 || v340[1] != 4)
          continue;
        *v5 = (char *)(v340 + 2);
LABEL_646:
        *((_DWORD *)this + 98) |= 0x40u;
        v341 = (proto::gnss::Emergency::CellFTAssistance *)*((_QWORD *)this + 38);
        if (!v341)
          operator new();
        v418[0] = 0;
        v342 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v342 >= *((_QWORD *)a2 + 2) || *v342 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v418))return 0;
        }
        else
        {
          v418[0] = *v342;
          *v5 = v342 + 1;
        }
        v343 = *((_DWORD *)a2 + 14);
        v344 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v343 + 1;
        if (v343 >= v344)
          return 0;
        v345 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v418[0]);
        if (!proto::gnss::Emergency::CellFTAssistance::MergePartialFromCodedStream(v341, a2, v346)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v345);
        v347 = *((_DWORD *)a2 + 14);
        v40 = __OFSUB__(v347, 1);
        v348 = v347 - 1;
        if (v348 < 0 == v40)
          *((_DWORD *)a2 + 14) = v348;
        v349 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v349 <= 1 || *v349 != 154 || v349[1] != 4)
          continue;
        *v5 = (char *)(v349 + 2);
LABEL_661:
        *((_DWORD *)this + 98) |= 0x80u;
        v350 = (proto::gnss::Emergency::CplaneContext *)*((_QWORD *)this + 39);
        if (!v350)
          operator new();
        v418[0] = 0;
        v351 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v351 >= *((_QWORD *)a2 + 2) || *v351 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v418))return 0;
        }
        else
        {
          v418[0] = *v351;
          *v5 = v351 + 1;
        }
        v352 = *((_DWORD *)a2 + 14);
        v353 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v352 + 1;
        if (v352 >= v353)
          return 0;
        v354 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v418[0]);
        if (!proto::gnss::Emergency::CplaneContext::MergePartialFromCodedStream(v350, a2, v355)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v354);
        v356 = *((_DWORD *)a2 + 14);
        v40 = __OFSUB__(v356, 1);
        v357 = v356 - 1;
        if (v357 < 0 == v40)
          *((_DWORD *)a2 + 14) = v357;
        v358 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v21 = *((_QWORD *)a2 + 2);
        if ((int)v21 - (int)v358 > 1)
        {
          v359 = *v358;
          goto LABEL_696;
        }
        continue;
      case 3u:
        v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_108;
        v17 = (char *)*((_QWORD *)a2 + 1);
        v13 = *((_QWORD *)a2 + 2);
        goto LABEL_128;
      case 4u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_138;
        goto LABEL_108;
      case 5u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_152;
        goto LABEL_108;
      case 6u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_166;
        goto LABEL_108;
      case 7u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_180;
        goto LABEL_108;
      case 8u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_194;
        goto LABEL_108;
      case 9u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_208;
        goto LABEL_108;
      case 0xAu:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_222;
        goto LABEL_108;
      case 0xBu:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_236;
        goto LABEL_108;
      case 0xCu:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_250;
        goto LABEL_108;
      case 0xDu:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_264;
        goto LABEL_108;
      case 0xEu:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_278;
        goto LABEL_108;
      case 0xFu:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_292;
        goto LABEL_108;
      case 0x10u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_307;
        goto LABEL_108;
      case 0x11u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_322;
        goto LABEL_108;
      case 0x12u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_337;
        goto LABEL_108;
      case 0x13u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_352;
        goto LABEL_108;
      case 0x14u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_367;
        goto LABEL_108;
      case 0x15u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_382;
        goto LABEL_108;
      case 0x16u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_397;
        goto LABEL_108;
      case 0x17u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_412;
        goto LABEL_108;
      case 0x18u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_427;
        goto LABEL_108;
      case 0x19u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_442;
        goto LABEL_108;
      case 0x1Au:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_457;
        goto LABEL_108;
      case 0x1Bu:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_472;
        goto LABEL_108;
      case 0x1Cu:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_487;
        goto LABEL_108;
      case 0x1Du:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_502;
        goto LABEL_108;
      case 0x1Eu:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_517;
        goto LABEL_108;
      case 0x1Fu:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_532;
        goto LABEL_108;
      case 0x32u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_547;
        goto LABEL_108;
      case 0x3Cu:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_562;
        goto LABEL_108;
      case 0x3Du:
        v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_108;
        v19 = (char *)*((_QWORD *)a2 + 1);
        v18 = *((_QWORD *)a2 + 2);
        goto LABEL_577;
      case 0x3Eu:
        v12 = TagFallback & 7;
        if (v12 != 2)
          goto LABEL_108;
        v20 = *((_DWORD *)this + 98);
        goto LABEL_586;
      case 0x3Fu:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_601;
        goto LABEL_108;
      case 0x40u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_616;
        goto LABEL_108;
      case 0x41u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_631;
        goto LABEL_108;
      case 0x42u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_646;
        goto LABEL_108;
      case 0x43u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_661;
        goto LABEL_108;
      case 0x46u:
        v12 = TagFallback & 7;
        if (v12 != 2)
        {
          if ((TagFallback & 7) == 0)
          {
            v22 = (char *)*((_QWORD *)a2 + 1);
            v21 = *((_QWORD *)a2 + 2);
            goto LABEL_676;
          }
          goto LABEL_108;
        }
        result = sub_10005EF8C(a2, (uint64_t)v7);
        if (!(_DWORD)result)
          return result;
        while (1)
        {
          v358 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v21 = *((_QWORD *)a2 + 2);
          if ((int)v21 - (int)v358 < 2)
            goto LABEL_2;
          v359 = *v358;
          if (v359 == 186)
            break;
LABEL_696:
          if (v359 != 176 || v358[1] != 4)
            goto LABEL_2;
          v22 = (char *)(v358 + 2);
          *v5 = v22;
LABEL_676:
          v416 = 0;
          if ((unint64_t)v22 >= v21 || *v22 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v416))return 0;
          }
          else
          {
            v416 = *v22;
            *v5 = v22 + 1;
          }
          v360 = *((_DWORD *)this + 82);
          if (v360 == *((_DWORD *)this + 83))
          {
            sub_10003C950((uint64_t)v7, v360 + 1);
            v360 = *((_DWORD *)this + 82);
          }
          v361 = v416;
          v362 = *((_QWORD *)this + 40);
          *((_DWORD *)this + 82) = v360 + 1;
          *(_DWORD *)(v362 + 4 * v360) = v361;
          v363 = *((_DWORD *)this + 83) - *((_DWORD *)this + 82);
          if (v363 >= 1)
          {
            v364 = v363 + 1;
            do
            {
              v365 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
              v366 = *((_QWORD *)a2 + 2);
              if ((int)v366 - (int)v365 < 2 || *v365 != 176 || v365[1] != 4)
                break;
              *v5 = (char *)(v365 + 2);
              if ((unint64_t)(v365 + 2) >= v366 || (char)v365[2] < 0)
              {
                if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v416))return 0;
              }
              else
              {
                v416 = v365[2];
                *v5 = (char *)(v365 + 3);
              }
              v367 = *((_DWORD *)this + 82);
              if (v367 >= *((_DWORD *)this + 83))
              {
                wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v418, 3, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 602);
                v368 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v418, "CHECK failed: (size()) < (Capacity()): ");
                wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v417, v368);
                wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v418);
                v367 = *((_DWORD *)this + 82);
              }
              v369 = v416;
              v370 = *((_QWORD *)this + 40);
              *((_DWORD *)this + 82) = v367 + 1;
              *(_DWORD *)(v370 + 4 * v367) = v369;
              --v364;
            }
            while (v364 > 1);
          }
        }
        if (v358[1] == 4)
        {
          *v5 = (char *)(v358 + 2);
LABEL_700:
          *((_DWORD *)this + 98) |= 0x200u;
          v371 = (proto::gnss::Emergency::LocationId *)*((_QWORD *)this + 42);
          if (!v371)
            operator new();
          v418[0] = 0;
          v372 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v372 >= *((_QWORD *)a2 + 2) || *v372 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v418))return 0;
          }
          else
          {
            v418[0] = *v372;
            *v5 = v372 + 1;
          }
          v373 = *((_DWORD *)a2 + 14);
          v374 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v373 + 1;
          if (v373 >= v374)
            return 0;
          v375 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v418[0]);
          if (!proto::gnss::Emergency::LocationId::MergePartialFromCodedStream(v371, a2, v376)
            || !*((_BYTE *)a2 + 36))
          {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v375);
          v377 = *((_DWORD *)a2 + 14);
          v40 = __OFSUB__(v377, 1);
          v378 = v377 - 1;
          if (v378 < 0 == v40)
            *((_DWORD *)a2 + 14) = v378;
          v379 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v23 = *((_QWORD *)a2 + 2);
          if ((int)v23 - (int)v379 > 1 && *v379 == 192 && v379[1] == 4)
          {
            v24 = (char *)(v379 + 2);
            *v5 = v24;
LABEL_715:
            if ((unint64_t)v24 >= v23 || *v24 < 0)
            {
              result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v9);
              if (!(_DWORD)result)
                return result;
              v380 = (char *)*((_QWORD *)a2 + 1);
              v23 = *((_QWORD *)a2 + 2);
            }
            else
            {
              *v9 = *v24;
              v380 = v24 + 1;
              *v5 = v380;
            }
            *((_DWORD *)this + 98) |= 0x400u;
            if ((int)v23 - (int)v380 >= 2)
            {
              v381 = *v380;
              goto LABEL_744;
            }
          }
        }
        continue;
      case 0x47u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_700;
        goto LABEL_108;
      case 0x48u:
        v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_108;
        v24 = (char *)*((_QWORD *)a2 + 1);
        v23 = *((_QWORD *)a2 + 2);
        goto LABEL_715;
      case 0x49u:
        v12 = TagFallback & 7;
        if (v12 == 2)
        {
          result = sub_10005EF8C(a2, (uint64_t)v6);
          if (!(_DWORD)result)
            return result;
          while (1)
          {
            v380 = (char *)*((_QWORD *)a2 + 1);
            v23 = *((_QWORD *)a2 + 2);
            if ((int)v23 - (int)v380 < 2)
              goto LABEL_2;
            v381 = *v380;
            if (v381 == 208)
              break;
LABEL_744:
            if (v381 != 200 || v380[1] != 4)
              goto LABEL_2;
            v25 = v380 + 2;
            *v5 = v25;
LABEL_724:
            v416 = 0;
            if ((unint64_t)v25 >= v23 || *v25 < 0)
            {
              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v416))return 0;
            }
            else
            {
              v416 = *v25;
              *v5 = v25 + 1;
            }
            v382 = *((_DWORD *)this + 88);
            if (v382 == *((_DWORD *)this + 89))
            {
              sub_10003C950((uint64_t)v6, v382 + 1);
              v382 = *((_DWORD *)this + 88);
            }
            v383 = v416;
            v384 = *((_QWORD *)this + 43);
            *((_DWORD *)this + 88) = v382 + 1;
            *(_DWORD *)(v384 + 4 * v382) = v383;
            v385 = *((_DWORD *)this + 89) - *((_DWORD *)this + 88);
            if (v385 >= 1)
            {
              v386 = v385 + 1;
              do
              {
                v387 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                v388 = *((_QWORD *)a2 + 2);
                if ((int)v388 - (int)v387 < 2 || *v387 != 200 || v387[1] != 4)
                  break;
                *v5 = (char *)(v387 + 2);
                if ((unint64_t)(v387 + 2) >= v388 || (char)v387[2] < 0)
                {
                  if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v416))return 0;
                }
                else
                {
                  v416 = v387[2];
                  *v5 = (char *)(v387 + 3);
                }
                v389 = *((_DWORD *)this + 88);
                if (v389 >= *((_DWORD *)this + 89))
                {
                  wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v418, 3, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 602);
                  v390 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v418, "CHECK failed: (size()) < (Capacity()): ");
                  wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v417, v390);
                  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v418);
                  v389 = *((_DWORD *)this + 88);
                }
                v391 = v416;
                v392 = *((_QWORD *)this + 43);
                *((_DWORD *)this + 88) = v389 + 1;
                *(_DWORD *)(v392 + 4 * v389) = v391;
                --v386;
              }
              while (v386 > 1);
            }
          }
          if (v380[1] == 4)
          {
            v26 = v380 + 2;
            *v5 = v26;
LABEL_748:
            v418[0] = 0;
            if ((unint64_t)v26 >= v23 || *v26 < 0)
            {
              result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v418);
              if (!(_DWORD)result)
                return result;
              v393 = v418[0];
              v394 = (char *)*((_QWORD *)a2 + 1);
              v23 = *((_QWORD *)a2 + 2);
            }
            else
            {
              v393 = *v26;
              v394 = v26 + 1;
              *v5 = v394;
            }
            *((_BYTE *)this + 360) = v393 != 0;
            *((_DWORD *)this + 98) |= 0x1000u;
            if ((int)v23 - (int)v394 >= 2 && *v394 == 216 && v394[1] == 4)
            {
              v27 = v394 + 2;
              *v5 = v27;
LABEL_757:
              if ((unint64_t)v27 >= v23 || *v27 < 0)
              {
                result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v414);
                if (!(_DWORD)result)
                  return result;
                v395 = (char *)*((_QWORD *)a2 + 1);
                v23 = *((_QWORD *)a2 + 2);
              }
              else
              {
                *v414 = *v27;
                v395 = v27 + 1;
                *v5 = v395;
              }
              v28 = *((_DWORD *)this + 98) | 0x2000;
              *((_DWORD *)this + 98) = v28;
              if ((int)v23 - (int)v395 >= 2 && *v395 == 226 && v395[1] == 4)
              {
                *v5 = v395 + 2;
LABEL_766:
                *((_DWORD *)this + 98) = v28 | 0x4000;
                v396 = (proto::gnss::Emergency::SuplContext *)*((_QWORD *)this + 46);
                if (!v396)
                  operator new();
                v418[0] = 0;
                v397 = (char *)*((_QWORD *)a2 + 1);
                if ((unint64_t)v397 >= *((_QWORD *)a2 + 2) || *v397 < 0)
                {
                  if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v418))return 0;
                }
                else
                {
                  v418[0] = *v397;
                  *v5 = v397 + 1;
                }
                v398 = *((_DWORD *)a2 + 14);
                v399 = *((_DWORD *)a2 + 15);
                *((_DWORD *)a2 + 14) = v398 + 1;
                if (v398 >= v399)
                  return 0;
                v400 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v418[0]);
                if (!proto::gnss::Emergency::SuplContext::MergePartialFromCodedStream(v396, a2, v401)
                  || !*((_BYTE *)a2 + 36))
                {
                  return 0;
                }
                wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v400);
                v402 = *((_DWORD *)a2 + 14);
                v40 = __OFSUB__(v402, 1);
                v403 = v402 - 1;
                if (v403 < 0 == v40)
                  *((_DWORD *)a2 + 14) = v403;
                v404 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                if (*((_DWORD *)a2 + 4) - (int)v404 > 1 && *v404 == 234 && v404[1] == 4)
                {
                  *v5 = (char *)(v404 + 2);
LABEL_781:
                  *((_DWORD *)this + 98) |= 0x8000u;
                  v405 = (proto::gnss::Emergency::WlanMeasurementList *)*((_QWORD *)this + 47);
                  if (!v405)
                    operator new();
                  v418[0] = 0;
                  v406 = (char *)*((_QWORD *)a2 + 1);
                  if ((unint64_t)v406 >= *((_QWORD *)a2 + 2) || *v406 < 0)
                  {
                    if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v418))return 0;
                  }
                  else
                  {
                    v418[0] = *v406;
                    *v5 = v406 + 1;
                  }
                  v407 = *((_DWORD *)a2 + 14);
                  v408 = *((_DWORD *)a2 + 15);
                  *((_DWORD *)a2 + 14) = v407 + 1;
                  if (v407 >= v408)
                    return 0;
                  v409 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v418[0]);
                  if (!proto::gnss::Emergency::WlanMeasurementList::MergePartialFromCodedStream(v405, a2, v410)|| !*((_BYTE *)a2 + 36))
                  {
                    return 0;
                  }
                  wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v409);
                  v411 = *((_DWORD *)a2 + 14);
                  v40 = __OFSUB__(v411, 1);
                  v412 = v411 - 1;
                  if (v412 < 0 == v40)
                    *((_DWORD *)a2 + 14) = v412;
                  if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
                    && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
                  {
                    *((_DWORD *)a2 + 8) = 0;
                    result = 1;
                    *((_BYTE *)a2 + 36) = 1;
                    return result;
                  }
                }
              }
            }
          }
          continue;
        }
        if ((TagFallback & 7) == 0)
        {
          v25 = (char *)*((_QWORD *)a2 + 1);
          v23 = *((_QWORD *)a2 + 2);
          goto LABEL_724;
        }
LABEL_108:
        if (v12 != 4)
        {
          if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) == 0)
            return 0;
          continue;
        }
        return 1;
      case 0x4Au:
        v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_108;
        v26 = (char *)*((_QWORD *)a2 + 1);
        v23 = *((_QWORD *)a2 + 2);
        goto LABEL_748;
      case 0x4Bu:
        v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_108;
        v27 = (char *)*((_QWORD *)a2 + 1);
        v23 = *((_QWORD *)a2 + 2);
        goto LABEL_757;
      case 0x4Cu:
        v12 = TagFallback & 7;
        if (v12 != 2)
          goto LABEL_108;
        v28 = *((_DWORD *)this + 98);
        goto LABEL_766;
      case 0x4Du:
        v12 = TagFallback & 7;
        if (v12 != 2)
          goto LABEL_108;
        goto LABEL_781;
      default:
        v12 = TagFallback & 7;
        goto LABEL_108;
    }
  }
}

void sub_10000F120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10000F140(uint64_t a1, proto::gpsd *this, unsigned int a3)
{
  NSObject *v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  void **v10;
  void **v11;
  void **v12;
  const char *v13;
  int v14;
  const char *v15;
  void *v16[2];
  uint64_t v17;
  uint64_t v18;
  void *__p[2];
  char v20;
  uint8_t buf[4];
  void **v22;
  __int16 v23;
  void **v24;

  if ((this & 0xFFFFFFFE) != 0xE)
  {
    v6 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
    {
      gpsd::util::stringify((int)this, (uint64_t)v16);
      v9 = SHIBYTE(v17);
      v10 = (void **)v16[0];
      gnss::stringify(a3, __p);
      v11 = v16;
      if (v9 < 0)
        v11 = v10;
      if (v20 >= 0)
        v12 = __p;
      else
        v12 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      v22 = v11;
      v23 = 2080;
      v24 = v12;
      _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#gdm,sendResponse,%s,%s", buf, 0x16u);
      if (v20 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v17) < 0)
        operator delete(v16[0]);
    }
  }
  v16[0] = off_1000F9AD8;
  v16[1] = 0;
  v17 = 0;
  v18 = 0;
  if (!proto::gpsd::Request_Type_IsValid(this))
  {
    v13 = "::proto::gpsd::Request_Type_IsValid(value)";
    v14 = 7657;
    v15 = "set_request_type";
    goto LABEL_18;
  }
  HIDWORD(v18) = 1;
  LODWORD(v17) = (_DWORD)this;
  v7 = gnss::Convert::toProtobuf(a3);
  if (v7 >= 0xA)
  {
    v13 = "::proto::gnss::Result_IsValid(value)";
    v14 = 7702;
    v15 = "set_result_code";
LABEL_18:
    __assert_rtn(v15, "GpsdProtocol.pb.h", v14, v13);
  }
  HIDWORD(v18) |= 4u;
  HIDWORD(v17) = v7;
  v8 = *(_QWORD *)(a1 + 2296);
  if (!v8)
    sub_100025CE8();
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v8 + 48))(v8, v16);
  sub_10000F44C(a1 + 928, (int)this, a3);
  v16[0] = off_1000F9AD8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)v16);
}

void sub_10000F340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10000F37C(uint64_t a1, uint64_t a2)
{
  sub_10000F710(*(_QWORD *)(a1 + 8), a2, 3);
}

uint64_t gnss::Convert::toProtobuf(unsigned int a1)
{
  uint64_t v2;
  NSObject *v3;
  _DWORD v5[2];

  if (a1 < 9)
    return dword_1000D3348[a1];
  v3 = qword_100100838;
  if (!os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    return 8;
  v5[0] = 67109120;
  v5[1] = a1;
  v2 = 8;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "unhandled gnss::Result enum %d", (uint8_t *)v5, 8u);
  return v2;
}

void sub_10000F44C(uint64_t a1, int a2, int a3)
{
  unint64_t MachContinuousTimeNs;

  if (*(_QWORD *)(a1 + 824))
  {
    MachContinuousTimeNs = gpsd::util::getMachContinuousTimeNs((gpsd::util *)a1);
    std::mutex::lock((std::mutex *)(a1 + 832));
    if (a3 == 1)
    {
      switch(a2)
      {
        case 8:
          if (*(_QWORD *)a1)
          {
            if (!*(_QWORD *)(a1 + 16))
            {
              *(_QWORD *)(a1 + 16) = MachContinuousTimeNs;
              sub_100016FAC((uint64_t *)a1);
            }
          }
          ++*(_DWORD *)(a1 + 56);
          break;
        case 9:
          if (*(_QWORD *)a1 && !*(_QWORD *)(a1 + 8))
          {
            *(_QWORD *)(a1 + 8) = MachContinuousTimeNs;
            sub_100016FAC((uint64_t *)a1);
          }
          ++*(_DWORD *)(a1 + 52);
          break;
        case 10:
          if (*(_QWORD *)a1 && !*(_QWORD *)(a1 + 24))
          {
            *(_QWORD *)(a1 + 24) = MachContinuousTimeNs;
            sub_100016FAC((uint64_t *)a1);
          }
          ++*(_DWORD *)(a1 + 40);
          break;
        case 11:
          ++*(_DWORD *)(a1 + 44);
          break;
        case 12:
          ++*(_DWORD *)(a1 + 48);
          break;
        case 14:
          ++*(_DWORD *)(a1 + 192);
          break;
        case 15:
          ++*(_DWORD *)(a1 + 196);
          break;
        case 16:
          ++*(_DWORD *)(a1 + 200);
          break;
        case 17:
          ++*(_DWORD *)(a1 + 204);
          break;
        case 18:
          ++*(_DWORD *)(a1 + 216);
          break;
        case 19:
          ++*(_DWORD *)(a1 + 220);
          break;
        case 20:
          ++*(_DWORD *)(a1 + 224);
          break;
        case 21:
          ++*(_DWORD *)(a1 + 208);
          break;
        case 22:
          ++*(_DWORD *)(a1 + 212);
          break;
        default:
          break;
      }
    }
    else
    {
      switch(a2)
      {
        case 8:
          ++*(_DWORD *)(a1 + 76);
          break;
        case 9:
          ++*(_DWORD *)(a1 + 72);
          break;
        case 10:
          ++*(_DWORD *)(a1 + 60);
          break;
        case 11:
          ++*(_DWORD *)(a1 + 64);
          break;
        case 12:
          ++*(_DWORD *)(a1 + 68);
          break;
        case 14:
          ++*(_DWORD *)(a1 + 228);
          break;
        case 15:
          ++*(_DWORD *)(a1 + 232);
          break;
        case 16:
          ++*(_DWORD *)(a1 + 236);
          break;
        case 17:
          ++*(_DWORD *)(a1 + 240);
          break;
        case 18:
          ++*(_DWORD *)(a1 + 252);
          break;
        case 19:
          ++*(_DWORD *)(a1 + 256);
          break;
        case 20:
          ++*(_DWORD *)(a1 + 260);
          break;
        case 21:
          ++*(_DWORD *)(a1 + 244);
          break;
        case 22:
          ++*(_DWORD *)(a1 + 248);
          break;
        default:
          break;
      }
    }
    std::mutex::unlock((std::mutex *)(a1 + 832));
  }
}

void sub_10000F710(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  int v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  NSObject *v18;
  NSObject *v19;
  int64x2_t v20;
  void **v21;
  double v22;
  uint64_t v23;
  _BYTE *v24;
  void **v25;
  int v26;
  void **v27;
  int v28;
  uint64_t v29;
  NSObject *v30;
  _QWORD block[6];
  void *v32[2];
  char v33;
  void *v34[2];
  char v35;
  void *v36[2];
  char v37;
  void *v38[2];
  char v39;
  void *__p[2];
  char v41;
  _BYTE v42[12];
  __int16 v43;
  _BYTE v44[18];
  _BYTE buf[24];
  uint64_t (*v46)(uint64_t, uint64_t);
  uint64_t **(*v47)(uint64_t);
  __int128 v48;

  if (*(_BYTE *)(a1 + 16))
  {
    v5 = *(_QWORD *)(a1 + 136);
    if (!v5)
      sub_100025CE8();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, a2);
  }
  else if (*(_BYTE *)(a1 + 56))
  {
    v7 = *(_DWORD *)(a2 + 16);
    if ((v7 & 0xFFFFFFFE) != 0xE)
    {
      v8 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
      {
        gpsd::util::stringify(v7, (uint64_t)v42);
        if (v44[9] >= 0)
          v24 = v42;
        else
          v24 = *(_BYTE **)v42;
        if (!*(_BYTE *)(a1 + 56))
          sub_1000267AC();
        v25 = __p;
        gpsd::util::stringify(*(_DWORD *)(a1 + 32), (uint64_t)__p);
        if (v41 < 0)
          v25 = (void **)__p[0];
        v26 = gnss::Convert::fromProtobuf(*(_DWORD *)(a2 + 20));
        gnss::stringify(v26, v38);
        if (!*(_BYTE *)(a1 + 56))
          sub_1000267AC();
        v27 = v38;
        if (v39 < 0)
          v27 = (void **)v38[0];
        v28 = *(_DWORD *)(a1 + 48);
        v29 = *(_QWORD *)(a1 + 104);
        *(_DWORD *)buf = 136447490;
        *(_QWORD *)&buf[4] = v24;
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v25;
        *(_WORD *)&buf[22] = 2082;
        v46 = (uint64_t (*)(uint64_t, uint64_t))v27;
        LOWORD(v47) = 1026;
        *(_DWORD *)((char *)&v47 + 2) = v28;
        HIWORD(v47) = 1026;
        LODWORD(v48) = a3;
        WORD2(v48) = 2050;
        *(_QWORD *)((char *)&v48 + 6) = v29;
        _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#router,handleResponse,requestType,%{public}s,pendingType,%{public}s,%{public}s,requestSrc,%{public}d, responseSrc,%{public}d,queued,%{public}zu", buf, 0x36u);
        if (v39 < 0)
          operator delete(v38[0]);
        if (v41 < 0)
          operator delete(__p[0]);
        if ((v44[9] & 0x80000000) != 0)
          operator delete(*(void **)v42);
      }
    }
    switch(a3)
    {
      case 0:
      case 2:
      case 4:
        v9 = qword_100100838;
        if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 67240192;
          *(_DWORD *)&buf[4] = a3;
          _os_log_fault_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "#router,handleResponse,unexpectedResponseSource,%{public}d", buf, 8u);
        }
        break;
      case 1:
        v11 = *(_QWORD *)(a1 + 136);
        if (!v11)
          sub_100025CE8();
        goto LABEL_15;
      case 3:
        if (!*(_BYTE *)(a1 + 56))
          sub_1000267AC();
        if (*(_DWORD *)(a1 + 48) == 2)
        {
          v11 = *(_QWORD *)(a1 + 136);
          if (!v11)
            sub_100025CE8();
LABEL_15:
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 48))(v11, a2);
        }
        else
        {
          v12 = qword_100100838;
          if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#router,handleResponse,skip,requesterNotExpectResponse", buf, 2u);
          }
        }
        break;
      default:
        break;
    }
    if (*(_BYTE *)(a1 + 56))
      *(_BYTE *)(a1 + 56) = 0;
    if (*(_QWORD *)(a1 + 104))
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3812000000;
      v46 = sub_10002394C;
      v47 = sub_1000238F0;
      *(_QWORD *)&v48 = 0;
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + ((*(_QWORD *)(a1 + 96) >> 6) & 0x3FFFFFFFFFFFFF8));
      v14 = *(_QWORD *)(a1 + 96) & 0x1FFLL;
      v15 = *(_QWORD *)(v13 + 8 * v14);
      *(_QWORD *)(v13 + 8 * v14) = 0;
      *((_QWORD *)&v48 + 1) = v15;
      v16 = *(uint64_t **)(*(_QWORD *)&buf[8] + 48);
      if (!v16 || (v17 = *v16) == 0)
      {
        v30 = qword_100100838;
        if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v42 = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "#router,fRequestPendingSend,null", v42, 2u);
          v30 = qword_100100838;
        }
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v42 = 136446722;
          *(_QWORD *)&v42[4] = "/Library/Caches/com.apple.xbs/Sources/CoreGPS/Sources/Daemon/GpsdProtobufRouter.mm";
          v43 = 1026;
          *(_DWORD *)v44 = 323;
          *(_WORD *)&v44[4] = 2082;
          *(_QWORD *)&v44[6] = "handleResponse";
          _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: assertion failure in %{public}s", v42, 0x1Cu);
        }
        sub_100025B58(v36, "assert");
        sub_100025B58(v34, "handleResponse");
        sub_100025B58(v32, "#router,fRequestPendingSend,null");
        gpsd::util::triggerDiagnosticReport((uint64_t)v36, (__int128 *)v34, (__int128 *)v32);
        if (v33 < 0)
          operator delete(v32[0]);
        if (v35 < 0)
          operator delete(v34[0]);
        if (v37 < 0)
          operator delete(v36[0]);
        __assert_rtn("handleResponse", "GpsdProtobufRouter.mm", 323, "false && \"#router,fRequestPendingSend,null\"");
      }
      v18 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
      {
        gpsd::util::stringify(*(_DWORD *)(v17 + 20), (uint64_t)__p);
        v21 = v41 >= 0 ? __p : (void **)__p[0];
        v22 = (double)*(unint64_t *)(*(_QWORD *)(*(_QWORD *)&buf[8] + 48) + 8) * 0.000001;
        v23 = *(_QWORD *)(a1 + 104);
        *(_DWORD *)v42 = 136446722;
        *(_QWORD *)&v42[4] = v21;
        v43 = 2050;
        *(double *)v44 = v22;
        *(_WORD *)&v44[8] = 2050;
        *(_QWORD *)&v44[10] = v23;
        _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#router,handleResponse,sendSavedRequest,type,%{public}s,time,ms,%{public}.3f,queued,%{public}zu", v42, 0x20u);
        if (v41 < 0)
          operator delete(__p[0]);
      }
      v19 = *(NSObject **)(a1 + 24);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10004E854;
      block[3] = &unk_1000F2858;
      block[4] = buf;
      block[5] = a1;
      dispatch_async(v19, block);
      sub_10003BD88((uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + ((*(_QWORD *)(a1 + 96) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * (*(_QWORD *)(a1 + 96) & 0x1FFLL)), 0);
      v20 = vaddq_s64(*(int64x2_t *)(a1 + 96), (int64x2_t)xmmword_1000D4300);
      *(int64x2_t *)(a1 + 96) = v20;
      if (v20.i64[0] >= 0x400uLL)
      {
        operator delete(**(void ***)(a1 + 72));
        *(_QWORD *)(a1 + 72) += 8;
        *(_QWORD *)(a1 + 96) -= 512;
      }
      _Block_object_dispose(buf, 8);
      sub_10003BD88((uint64_t **)&v48 + 1, 0);
    }
  }
  else
  {
    v10 = qword_100100830;
    if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#router,handleResponse,fRequestPendingResponse,null", buf, 2u);
    }
  }
}

void sub_10000FDC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a39 < 0)
    operator delete(__p);
  if (a45 < 0)
    operator delete(a40);
  if (a51 < 0)
    operator delete(a46);
  _Unwind_Resume(exception_object);
}

void sub_10000FE84(uint64_t a1, int *a2)
{
  sub_100014F20(*(_QWORD *)(a1 + 8), a2);
}

void GpsdProtobufRouter::handleRequest(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  NSObject *v13;
  unsigned int v14;
  uint8_t *v15;
  uint64_t v16;
  NSObject *v17;
  uint8_t *v18;
  const char *v19;
  int v20;
  const char *v21;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  uint8_t v25[8];
  char v26;
  uint8_t buf[8];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  char v50;
  __int128 v51;
  __int128 v52;
  uint8_t v53[4];
  uint8_t *v54;

  if (*(_BYTE *)(a1 + 16))
  {
    sub_100010E48(*(_QWORD *)a1, a2, a3);
    return;
  }
  v6 = *a2;
  if ((*(_BYTE *)(*a2 + 388) & 4) == 0
    || (v7 = *(_DWORD *)(v6 + 20), (proto::gpsd::Request_Type_IsValid((proto::gpsd *)v7) & 1) == 0))
  {
    v13 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "#router,dispatchRequest,noValidType", buf, 2u);
    }
    *(_QWORD *)buf = off_1000F9AD8;
    v28 = 0uLL;
    *(_QWORD *)&v29 = 0;
    v14 = gnss::Convert::toProtobuf(4u);
    if (v14 >= 0xA)
      __assert_rtn("set_result_code", "GpsdProtocol.pb.h", 7702, "::proto::gnss::Result_IsValid(value)");
    DWORD1(v29) |= 4u;
    HIDWORD(v28) = v14;
    *(_QWORD *)buf = off_1000F9AD8;
    v15 = buf;
LABEL_17:
    wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)v15);
    return;
  }
  if (v7 - 51 <= 1)
  {
    v23 = 0;
    v24 = 0;
    v22[0] = off_1000F9AD8;
    v22[1] = 0;
    v8 = *(_DWORD *)(v6 + 20);
    if (proto::gpsd::Request_Type_IsValid((proto::gpsd *)v8))
    {
      HIDWORD(v24) = 1;
      LODWORD(v23) = v8;
      v9 = gnss::Convert::toProtobuf(1u);
      if (v9 < 0xA)
      {
        HIDWORD(v24) |= 4u;
        HIDWORD(v23) = v9;
        v10 = *(_QWORD *)(a1 + 136);
        if (!v10)
          sub_100025CE8();
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v10 + 48))(v10, v22);
        *(_QWORD *)buf = off_1000F9A60;
        v51 = 0u;
        v52 = 0u;
        v44 = 0u;
        v45 = 0u;
        v46 = 0u;
        v47 = 0u;
        v48 = 0u;
        v49 = 0u;
        v28 = 0u;
        v29 = 0u;
        v30 = 0u;
        v31 = 0u;
        v32 = 0u;
        v33 = 0u;
        v34 = 0u;
        v35 = 0u;
        v36 = 0u;
        v37 = 0u;
        v38 = 0u;
        v39 = 0u;
        v40 = 0u;
        v41 = 0u;
        v42 = 0u;
        v43 = 0u;
        v50 = 0;
        v11 = qword_100100838;
        if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
        {
          gpsd::util::stringify(*(_DWORD *)(*a2 + 20), (uint64_t)v25);
          v18 = v26 >= 0 ? v25 : *(uint8_t **)v25;
          *(_DWORD *)v53 = 136446210;
          v54 = v18;
          _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#router,deprecatedRequest,type,%{public}s", v53, 0xCu);
          if (v26 < 0)
            operator delete(*(void **)v25);
        }
        v12 = *(_DWORD *)(*a2 + 20);
        if (v12 == 51)
        {
          HIDWORD(v28) = 1;
          DWORD2(v52) |= 0x8000004u;
          v16 = v41;
          if (!(_QWORD)v41)
            operator new();
          *(_DWORD *)(v41 + 24) |= 1u;
          *(_BYTE *)(v16 + 16) = 1;
LABEL_24:
          operator new();
        }
        if (v12 == 52)
        {
          DWORD2(v52) |= 4u;
          HIDWORD(v28) = 2;
          goto LABEL_24;
        }
        v17 = qword_100100838;
        if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)v25 = 0;
          _os_log_fault_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "#router,handleDeprecatedRequest,noway", v25, 2u);
        }
        proto::gpsd::Request::~Request((proto::gpsd::Request *)buf);
        v22[0] = off_1000F9AD8;
        v15 = (uint8_t *)v22;
        goto LABEL_17;
      }
      v19 = "::proto::gnss::Result_IsValid(value)";
      v20 = 7702;
      v21 = "set_result_code";
    }
    else
    {
      v19 = "::proto::gpsd::Request_Type_IsValid(value)";
      v20 = 7657;
      v21 = "set_request_type";
    }
    __assert_rtn(v21, "GpsdProtocol.pb.h", v20, v19);
  }
  sub_1000103D8(a1, a2, a3, 2);
}

void sub_100010354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;

  proto::gpsd::Request::~Request((proto::gpsd::Request *)&a17);
  a9 = v17 + 16;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)&a9);
  _Unwind_Resume(a1);
}

void sub_1000103D8(uint64_t a1, uint64_t *a2, unint64_t a3, int a4)
{
  int v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  proto::gpsd *v12;
  unsigned __int8 v13;
  NSObject *v14;
  char v15;
  NSObject *v16;
  _BYTE *v17;
  const char *v18;
  _BYTE *v19;
  int v20;
  double v21;
  _BYTE *v22;
  _BYTE *v23;
  NSObject *v24;
  _BYTE __p[12];
  char v26;
  _BYTE buf[12];
  __int16 v28;
  int v29;
  __int16 v30;
  double v31;

  v8 = *(_DWORD *)(*a2 + 20);
  if ((v8 & 0xFFFFFFFE) != 0xE)
  {
    v9 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
    {
      gpsd::util::stringify(v8, (uint64_t)__p);
      v22 = v26 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = v22;
      v28 = 1026;
      v29 = a4;
      v30 = 2050;
      v31 = (double)a3 * 0.000001;
      _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#router,dispatchRequest,type,%{public}s,src,%{public}d,time,%{public}.3f,ms", buf, 0x1Cu);
      if (v26 < 0)
        operator delete(*(void **)__p);
    }
  }
  if (*(_BYTE *)(a1 + 56))
  {
    v10 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
    {
      gpsd::util::stringify(*(_DWORD *)(a1 + 32), (uint64_t)__p);
      if (!*(_BYTE *)(a1 + 56))
        sub_1000267AC();
      v19 = __p;
      if (v26 < 0)
        v19 = *(_BYTE **)__p;
      v20 = *(_DWORD *)(a1 + 48);
      v21 = (double)*(unint64_t *)(a1 + 40) * 1000000.0;
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = v19;
      v28 = 1026;
      v29 = v20;
      v30 = 2050;
      v31 = v21;
      _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#router,pendingRequest,type,%{public}s,src,%{public}d,time,%{public}.3f,ms", buf, 0x1Cu);
      if (v26 < 0)
        operator delete(*(void **)__p);
    }
    operator new();
  }
  v11 = *a2;
  v12 = (proto::gpsd *)*(unsigned int *)(*a2 + 20);
  *(_DWORD *)(a1 + 32) = (_DWORD)v12;
  *(_QWORD *)(a1 + 40) = a3;
  *(_DWORD *)(a1 + 48) = a4;
  v13 = 1;
  *(_BYTE *)(a1 + 56) = 1;
  if (a4 != 4)
  {
    if ((_DWORD)v12 != 55)
    {
      if ((_DWORD)v12 != 56)
        goto LABEL_14;
      v13 = 0;
    }
    atomic_store(v13, (unsigned __int8 *)(a1 + 17));
    v12 = (proto::gpsd *)*(unsigned int *)(v11 + 20);
LABEL_14:
    switch((int)v12)
    {
      case 0:
        sub_10004E75C(a1, 0, 4u);
        break;
      case 1:
      case 2:
      case 3:
      case 6:
      case 7:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
        sub_100010E48(*(_QWORD *)a1, a2, a3);
        break;
      case 4:
      case 5:
      case 8:
      case 9:
      case 16:
        sub_100010E48(*(_QWORD *)a1, a2, a3);
        GnssEmergencyManager_Private::handleRemoteRequest(*(_QWORD *)(a1 + 8), (wireless_diagnostics::google::protobuf::MessageLite **)a2, a3);
        break;
      case 51:
      case 52:
        v24 = qword_100100838;
        if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 67240192;
          *(_DWORD *)&buf[4] = (_DWORD)v12;
          _os_log_fault_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "#router,dispatchRequestFromRemote,requestDeprecated,type,%{public}d", buf, 8u);
        }
        break;
      case 53:
      case 54:
      case 55:
      case 56:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
        sub_10004E75C(a1, v12, 1u);
        GnssEmergencyManager_Private::handleRemoteRequest(*(_QWORD *)(a1 + 8), (wireless_diagnostics::google::protobuf::MessageLite **)a2, a3);
        break;
      default:
        return;
    }
    return;
  }
  if ((*(_BYTE *)(v11 + 388) & 4) != 0)
  {
    v15 = (_BYTE)v12 - 8;
    if (((_DWORD)v12 - 8) > 0x3B)
      goto LABEL_37;
    if (((1 << v15) & 0x800000000000003) != 0)
    {
      sub_100010E48(*(_QWORD *)a1, a2, a3);
      return;
    }
    if (((1 << v15) & 0x600000000000000) != 0)
    {
      v16 = qword_100100838;
      if (!os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
        return;
      gpsd::util::stringify((int)v12, (uint64_t)buf);
      if ((SBYTE3(v31) & 0x80u) == 0)
        v17 = buf;
      else
        v17 = *(_BYTE **)buf;
      *(_DWORD *)__p = 136446210;
      *(_QWORD *)&__p[4] = v17;
      v18 = "#router,requestFromEmergency,type,%{public}s,deprecated";
    }
    else
    {
LABEL_37:
      sub_10004E75C(a1, v12, 7u);
      v16 = qword_100100838;
      if (!os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
        return;
      gpsd::util::stringify((int)v12, (uint64_t)buf);
      if ((SBYTE3(v31) & 0x80u) == 0)
        v23 = buf;
      else
        v23 = *(_BYTE **)buf;
      *(_DWORD *)__p = 136446210;
      *(_QWORD *)&__p[4] = v23;
      v18 = "#router,requestFromEmergency,type,%{public}s,unavailable";
    }
    _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, v18, __p, 0xCu);
    if (SBYTE3(v31) < 0)
      operator delete(*(void **)buf);
  }
  else
  {
    v14 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#router,requestFromEmergency,noType", buf, 2u);
    }
  }
}

void sub_100010DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t *a16)
{
  void *v16;
  void *v17;

  operator delete(v17);
  if (v16)
    operator delete(v16);
  sub_10003BD88(&a16, 0);
  _Unwind_Resume(a1);
}

void sub_100010E48(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  const char *v6;
  NSObject *v7;
  uint32_t v8;
  proto::gpsd *v9;
  NSObject *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id *v16;
  NSObject *v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t (***v22)();
  uint64_t v23;
  uint64_t (***v24)();
  uint64_t v25;
  id *v26;
  NSObject *v27;
  uint64_t (***v28)();
  void **v29;
  NSObject *v30;
  NSObject *v31;
  void **v32;
  int v33;
  id *v34;
  NSObject *v35;
  void **v36;
  NSObject *v37;
  uint64_t (***v38)();
  NSObject *v39;
  NSObject *v40;
  NSObject *v41;
  NSObject *v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t (***v45)();
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  id *v58;
  id v59;
  uint64_t v60;
  NSObject *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _DWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void **v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _DWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned __int8 *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  std::string *v125;
  NSObject *v126;
  void **v127;
  void **v128;
  void **v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  NSObject *v148;
  NSObject *v149;
  uint64_t v150;
  NSObject *v151;
  NSObject *v152;
  NSObject *v153;
  uint64_t v154;
  void *v155[2];
  char v156;
  void *v157[2];
  char v158;
  void *v159[2];
  char v160;
  uint8_t v161[8];
  std::string v162;
  std::string v163;
  std::string v164;
  _BYTE v165[24];
  _BYTE *v166;
  _BYTE v167[24];
  _BYTE *v168;
  _BYTE v169[24];
  _BYTE *v170;
  _BYTE v171[24];
  uint64_t (***v172)();
  _BYTE v173[24];
  uint64_t (***v174)();
  _BYTE v175[24];
  uint64_t (***v176)();
  _BYTE v177[24];
  uint64_t (***v178)();
  _BYTE v179[24];
  uint64_t (***v180)();
  void *buf[33];
  char v182;
  int v183;
  uint64_t v184;
  _BYTE v185[24];
  uint64_t (***v186)();
  _BYTE v187[24];
  uint64_t (***v188)();
  _BYTE v189[24];
  uint64_t (***v190)();
  _BYTE v191[24];
  uint64_t (***v192)();
  _BYTE v193[24];
  _BYTE *v194;
  uint8_t v195[4];
  __int128 v196;
  _BYTE v197[6];
  _BYTE v198[6];
  void **v199;
  __int16 v200;
  int v201;
  _BYTE v202[24];
  uint64_t (***v203)();
  _BYTE v204[24];
  uint64_t (***v205)();
  _BYTE v206[24];
  uint64_t (***v207)();
  _BYTE v208[24];
  uint64_t (***v209)();
  _BYTE v210[24];
  uint64_t (***v211)();
  _BYTE v212[24];
  uint64_t (***v213)();
  _BYTE v214[24];
  _BYTE *v215;
  _QWORD v216[3];
  uint64_t (***v217)();
  _BYTE v218[24];
  uint64_t (***v219)();
  _BYTE v220[24];
  uint64_t (***v221)();
  _BYTE v222[24];
  uint64_t (***v223)();
  _BYTE v224[24];
  uint64_t (***v225)();
  _BYTE v226[24];
  uint64_t (***v227)();
  _BYTE v228[24];
  uint64_t (***v229)();
  _BYTE v230[24];
  uint64_t (***v231)();
  _BYTE v232[24];
  uint64_t (***v233)();
  _BYTE v234[24];
  uint64_t (***v235)();
  _BYTE v236[24];
  uint64_t (***v237)();
  _BYTE v238[24];
  uint64_t (***v239)();
  _BYTE v240[24];
  uint64_t (***v241)();
  _BYTE v242[24];
  uint64_t (***v243)();
  _BYTE v244[24];
  uint64_t (***v245)();
  _BYTE v246[24];
  uint64_t (***v247)();
  _BYTE v248[24];
  uint64_t (***v249)();
  _BYTE v250[24];
  uint64_t (***v251)();
  _BYTE v252[24];
  uint64_t (***v253)();
  _BYTE v254[24];
  uint64_t (***v255)();
  uint64_t (**v256)();
  __int128 v257;
  uint64_t (***v258)();
  _BYTE v259[24];
  _BYTE *v260;
  uint64_t (**v261)();
  __int128 v262;
  uint64_t (***v263)();

  v3 = *a2;
  if (!*a2)
  {
    v67 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf[0]) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_ERROR, "null requestPtr", (uint8_t *)buf, 2u);
      v67 = qword_100100838;
    }
    if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf[0]) = 136446722;
      *(void **)((char *)buf + 4) = "/Library/Caches/com.apple.xbs/Sources/CoreGPS/Sources/Daemon/GpsdGnssDeviceManager.mm";
      WORD2(buf[1]) = 1026;
      *(_DWORD *)((char *)&buf[1] + 6) = 1463;
      WORD1(buf[2]) = 2082;
      *(void **)((char *)&buf[2] + 4) = "handleRequest";
      _os_log_error_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: assertion failure in %{public}s", (uint8_t *)buf, 0x1Cu);
    }
    sub_100025B58(&v164, "assert");
    sub_100025B58(&v163, "handleRequest");
    sub_100025B58(&v162, "null requestPtr");
    gpsd::util::triggerDiagnosticReport((uint64_t)&v164, (__int128 *)&v163, (__int128 *)&v162);
    std::string::~string(&v162);
    std::string::~string(&v163);
    std::string::~string(&v164);
    __assert_rtn("handleRequest", "GpsdGnssDeviceManager.mm", 1463, "false && \"null requestPtr\"");
  }
  if ((*(_BYTE *)(v3 + 388) & 4) == 0)
  {
    v5 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf[0]) = 0;
      v6 = "#gdm,Missing request type";
      v7 = v5;
      v8 = 2;
LABEL_36:
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, v6, (uint8_t *)buf, v8);
      goto LABEL_13;
    }
    goto LABEL_13;
  }
  v9 = (proto::gpsd *)*(unsigned int *)(v3 + 20);
  if (!(_DWORD)v9 || (proto::gpsd::Request_Type_IsValid((proto::gpsd *)*(unsigned int *)(v3 + 20)) & 1) == 0)
  {
    v13 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      v20 = *(_DWORD *)(v3 + 20);
      LODWORD(buf[0]) = 67240192;
      HIDWORD(buf[0]) = v20;
      v6 = "#gdm,Invalid request type,%{public}d";
      v7 = v13;
      v8 = 8;
      goto LABEL_36;
    }
LABEL_13:
    sub_10000F140(a1, (proto::gpsd *)*(unsigned int *)(v3 + 20), 4u);
    return;
  }
  if ((v9 & 0xFFFFFFFE) != 0xE)
  {
    v11 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
    {
      gpsd::util::stringify((int)v9, (uint64_t)buf);
      v29 = SHIBYTE(buf[2]) >= 0 ? buf : (void **)buf[0];
      *(_DWORD *)v195 = 136315138;
      *(_QWORD *)&v196 = v29;
      _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#gdm,receivedRequest,%s", v195, 0xCu);
      if (SHIBYTE(buf[2]) < 0)
        operator delete(buf[0]);
    }
  }
  v261 = off_1000F26E0;
  *(_QWORD *)&v262 = a1;
  *((_QWORD *)&v262 + 1) = v9;
  v263 = &v261;
  v12 = *(_DWORD *)(v3 + 20);
  switch(v12)
  {
    case 0x1Du:
      if ((*(_BYTE *)(v3 + 391) & 4) == 0)
      {
        sub_10000F140(a1, v9, 4u);
        goto LABEL_45;
      }
      v21 = *(_QWORD *)(v3 + 208);
      if (!v21)
        v21 = *(_QWORD *)(proto::gpsd::Request::default_instance_ + 208);
      v258 = &v256;
      v256 = off_1000F26E0;
      v257 = v262;
      sub_10002E4F0(a1, v21, (uint64_t)&v256);
      v22 = v258;
      if (v258 != &v256)
        goto LABEL_40;
      v23 = 4;
      v22 = &v256;
      goto LABEL_44;
    case 0x22u:
      *(_BYTE *)(a1 + 16) = 1;
      if (*(_BYTE *)(a1 + 18))
      {
        v148 = qword_100100838;
        if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf[0]) = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v148, OS_LOG_TYPE_ERROR, "#gdm,Device has been destroyed", (uint8_t *)buf, 2u);
          v148 = qword_100100838;
        }
        if (os_log_type_enabled(v148, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf[0]) = 136446722;
          *(void **)((char *)buf + 4) = "/Library/Caches/com.apple.xbs/Sources/CoreGPS/Sources/Daemon/GpsdGnssDeviceManager.mm";
          WORD2(buf[1]) = 1026;
          *(_DWORD *)((char *)&buf[1] + 6) = 1501;
          WORD1(buf[2]) = 2082;
          *(void **)((char *)&buf[2] + 4) = "handleRequest";
          _os_log_error_impl((void *)&_mh_execute_header, v148, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: assertion failure in %{public}s", (uint8_t *)buf, 0x1Cu);
        }
        sub_100025B58(v159, "assert");
        sub_100025B58(v157, "handleRequest");
        sub_100025B58(v155, "#gdm,Device has been destroyed");
        gpsd::util::triggerDiagnosticReport((uint64_t)v159, (__int128 *)v157, (__int128 *)v155);
        if (v156 < 0)
          operator delete(v155[0]);
        if (v158 < 0)
          operator delete(v157[0]);
        if (v160 < 0)
          operator delete(v159[0]);
        __assert_rtn("handleRequest", "GpsdGnssDeviceManager.mm", 1501, "false && \"#gdm,Device has been destroyed\"");
      }
      if (*(_BYTE *)(a1 + 17))
      {
        v31 = qword_100100838;
        if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
        {
          gnss::stringify(*(_DWORD *)(a1 + 20), buf);
          v32 = SHIBYTE(buf[2]) >= 0 ? buf : (void **)buf[0];
          *(_DWORD *)v195 = 136446210;
          *(_QWORD *)&v196 = v32;
          _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "#gdm,Multiple BUILD_DEVICE,already attempted with status,%{public}s", v195, 0xCu);
          if (SHIBYTE(buf[2]) < 0)
            operator delete(buf[0]);
        }
        v33 = *(_DWORD *)(a1 + 20);
        LODWORD(buf[0]) = 7;
        HIDWORD(buf[0]) = v33;
        sub_100025B58(&buf[1], "Multiple BUILD_DEVICE");
        memset(&buf[4], 0, 24);
        sub_10002E210();
      }
      v16 = (id *)GpsdPreferences::instance(0);
      if (!GpsdPreferences::bigPowerSwitch(v16))
        sub_10002932C();
      v17 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#gdm,#bps,ignore BUILD_DEVICE", (uint8_t *)buf, 2u);
      }
      v260 = 0;
      GnssHal::GpioEmbedded::GpioEmbedded(buf, (uint64_t)v259);
      v18 = v260;
      if (v260 == v259)
      {
        v19 = 4;
        v18 = v259;
      }
      else
      {
        if (!v260)
          goto LABEL_48;
        v19 = 5;
      }
      (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_48:
      GnssHal::GpioEmbedded::setResetLow((GnssHal::GpioEmbedded *)buf);
      *(_DWORD *)v195 = 1;
      if (!v263)
        sub_100025CE8();
      ((void (*)(uint64_t (***)(), uint8_t *))(*v263)[6])(v263, v195);
      GnssHal::GpioEmbedded::~GpioEmbedded((GnssHal::GpioEmbedded *)buf);
      sub_10002E304((_QWORD *)a1);
      goto LABEL_50;
    case 0x23u:
      v14 = *(_QWORD *)(v3 + 192);
      if (!v14)
        v14 = *(_QWORD *)(proto::gpsd::Request::default_instance_ + 192);
      sub_100028ED8(a1, *(uint64_t **)(v14 + 8), 1);
      LODWORD(buf[0]) = 1;
      if (!v263)
        goto LABEL_605;
      ((void (*)(uint64_t (***)(), void **))(*v263)[6])(v263, buf);
      goto LABEL_50;
    case 0x24u:
      v149 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf[0]) = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v149, OS_LOG_TYPE_ERROR, "#gdm,EXIT request via XPC", (uint8_t *)buf, 2u);
      }
      v150 = *(_QWORD *)(v3 + 200);
      if (!v150)
        v150 = *(_QWORD *)(proto::gpsd::Request::default_instance_ + 200);
      sub_100028ED8(a1, *(uint64_t **)(v150 + 8), 1);
      LODWORD(buf[0]) = 1;
      if (v263)
      {
        ((void (*)(uint64_t (***)(), void **))(*v263)[6])(v263, buf);
        usleep(0x186A0u);
        v153 = qword_100100838;
        if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v153, OS_LOG_TYPE_DEFAULT, "#gdm,Completed exit preparations", (uint8_t *)buf, 2u);
        }
        v154 = *(_QWORD *)(v3 + 200);
        if (!v154)
          v154 = *(_QWORD *)(proto::gpsd::Request::default_instance_ + 200);
        sub_10002E27C(*(uint64_t **)(v154 + 8));
      }
      goto LABEL_605;
    case 0x25u:
      v151 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v151, OS_LOG_TYPE_DEFAULT, "#gdm,hard clear start", (uint8_t *)buf, 2u);
      }
      sub_100025B58(v195, "hard clear");
      sub_100028ED8(a1, (uint64_t *)v195, 1);
      GnssHal::PlatformNvStore::PlatformNvStore((GnssHal::PlatformNvStore *)buf);
      GnssHal::PlatformNvStore::clearSessionStorage((GnssHal::PlatformNvStore *)buf);
      GnssHal::PlatformNvStore::clearPermanentStorage((GnssHal::PlatformNvStore *)buf);
      v152 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v161 = 0;
        _os_log_impl((void *)&_mh_execute_header, v152, OS_LOG_TYPE_DEFAULT, "#gdm,hard clear done", v161, 2u);
      }
      GnssHal::PlatformNvStore::~PlatformNvStore((GnssHal::PlatformNvStore *)buf);
      sub_10002E27C((uint64_t *)v195);
    default:
      v15 = *(_QWORD *)(a1 + 8);
      if (v15)
        goto LABEL_25;
      if (*(_BYTE *)(a1 + 16) && (v12 > 0x22 || ((1 << v12) & 0x500040F04) == 0))
      {
        v34 = (id *)GpsdPreferences::instance(0);
        if (GpsdPreferences::bigPowerSwitch(v34))
        {
          v35 = qword_100100838;
          if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
          {
            gpsd::util::stringify(*(_DWORD *)(v3 + 20), (uint64_t)buf);
            v36 = SHIBYTE(buf[2]) >= 0 ? buf : (void **)buf[0];
            *(_DWORD *)v195 = 136446210;
            *(_QWORD *)&v196 = v36;
            _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#gdm,#bps,createDevice init,%{public}s", v195, 0xCu);
            if (SHIBYTE(buf[2]) < 0)
              operator delete(buf[0]);
          }
          sub_10000559C((gpsd::util *)a1);
          sub_10002932C();
        }
      }
      v15 = *(_QWORD *)(a1 + 8);
      if (v15)
      {
        v12 = *(_DWORD *)(v3 + 20);
LABEL_25:
        switch(v12)
        {
          case 1u:
            sub_100006448(a1, v3);
            goto LABEL_45;
          case 2u:
            sub_1000056AC(a1);
            goto LABEL_45;
          case 3u:
            v51 = (uint64_t)v263;
            if (!v263)
              goto LABEL_160;
            if (v263 == &v261)
            {
              v255 = (uint64_t (***)())v254;
              ((void (*)(uint64_t (***)(), _BYTE *))v261[3])(&v261, v254);
            }
            else
            {
              v51 = ((uint64_t (*)(uint64_t (***)()))(*v263)[2])(v263);
LABEL_160:
              v255 = (uint64_t (***)())v51;
            }
            (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v15 + 24))(v15, v254);
            v22 = v255;
            if (v255 != (uint64_t (***)())v254)
              goto LABEL_40;
            v23 = 4;
            v22 = (uint64_t (***)())v254;
            goto LABEL_44;
          case 4u:
            v55 = (uint64_t)v263;
            if (!v263)
              goto LABEL_200;
            if (v263 == &v261)
            {
              v253 = (uint64_t (***)())v252;
              ((void (*)(uint64_t (***)(), _BYTE *))v261[3])(&v261, v252);
            }
            else
            {
              v55 = ((uint64_t (*)(uint64_t (***)()))(*v263)[2])(v263);
LABEL_200:
              v253 = (uint64_t (***)())v55;
            }
            (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v15 + 32))(v15, v252);
            v22 = v253;
            if (v253 != (uint64_t (***)())v252)
              goto LABEL_40;
            v23 = 4;
            v22 = (uint64_t (***)())v252;
            goto LABEL_44;
          case 5u:
            if ((*(_BYTE *)(v3 + 390) & 4) == 0)
              goto LABEL_211;
            v60 = *(_QWORD *)(v3 + 144);
            if (!v60)
              v60 = *(_QWORD *)(proto::gpsd::Request::default_instance_ + 144);
            if ((*(_BYTE *)(v60 + 20) & 1) == 0)
            {
LABEL_211:
              LODWORD(buf[0]) = 4;
              v45 = v263;
              if (v263)
                goto LABEL_414;
LABEL_605:
              sub_100025CE8();
            }
            v132 = *(_QWORD *)(v60 + 8);
            if ((v132 & ((*(_DWORD *)(GpsdPlatformInfo::instance(0) + 8) - 201) < 2)) != 0)
              v132 = 1024;
            v133 = *(_QWORD *)(a1 + 8);
            v134 = (uint64_t)v263;
            if (!v263)
              goto LABEL_440;
            if (v263 == &v261)
            {
              v251 = (uint64_t (***)())v250;
              ((void (*)(uint64_t (***)(), _BYTE *))v261[3])(&v261, v250);
            }
            else
            {
              v134 = ((uint64_t (*)(uint64_t (***)()))(*v263)[2])(v263);
LABEL_440:
              v251 = (uint64_t (***)())v134;
            }
            (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v133 + 40))(v133, v132, v250);
            v22 = v251;
            if (v251 != (uint64_t (***)())v250)
              goto LABEL_40;
            v23 = 4;
            v22 = (uint64_t (***)())v250;
            goto LABEL_44;
          case 6u:
            if ((*(_BYTE *)(v3 + 390) & 8) == 0)
            {
              LODWORD(buf[0]) = 4;
              v45 = v263;
              if (!v263)
                goto LABEL_605;
              goto LABEL_414;
            }
            v100 = *(unsigned __int8 **)(v3 + 152);
            if (!v100)
              v100 = *(unsigned __int8 **)(proto::gpsd::Request::default_instance_ + 152);
            v101 = (uint64_t)v263;
            if (!v263)
              goto LABEL_348;
            if (v263 == &v261)
            {
              v249 = (uint64_t (***)())v248;
              ((void (*)(uint64_t (***)(), _BYTE *))v261[3])(&v261, v248);
            }
            else
            {
              v101 = ((uint64_t (*)(uint64_t (***)()))(*v263)[2])(v263);
LABEL_348:
              v249 = (uint64_t (***)())v101;
            }
            sub_10002E744(a1, v100, (uint64_t)v248);
            v22 = v249;
            if (v249 != (uint64_t (***)())v248)
              goto LABEL_40;
            v23 = 4;
            v22 = (uint64_t (***)())v248;
            goto LABEL_44;
          case 7u:
            if ((*(_BYTE *)(v3 + 390) & 0x10) == 0)
            {
              LODWORD(buf[0]) = 4;
              v45 = v263;
              if (!v263)
                goto LABEL_605;
              goto LABEL_414;
            }
            v102 = *(_QWORD *)(v3 + 160);
            if (!v102)
              v102 = *(_QWORD *)(proto::gpsd::Request::default_instance_ + 160);
            v103 = (uint64_t)v263;
            if (!v263)
              goto LABEL_354;
            if (v263 == &v261)
            {
              v247 = (uint64_t (***)())v246;
              ((void (*)(uint64_t (***)(), _BYTE *))v261[3])(&v261, v246);
            }
            else
            {
              v103 = ((uint64_t (*)(uint64_t (***)()))(*v263)[2])(v263);
LABEL_354:
              v247 = (uint64_t (***)())v103;
            }
            sub_10002E970(a1, *(_QWORD *)(v102 + 8), *(_DWORD *)(v102 + 20), (uint64_t)v246);
            v22 = v247;
            if (v247 != (uint64_t (***)())v246)
              goto LABEL_40;
            v23 = 4;
            v22 = (uint64_t (***)())v246;
            goto LABEL_44;
          case 8u:
            if ((*(_BYTE *)(v3 + 388) & 8) == 0)
            {
              LODWORD(buf[0]) = 4;
              v45 = v263;
              if (!v263)
                goto LABEL_605;
              goto LABEL_414;
            }
            v104 = *(_QWORD *)(v3 + 24);
            if (!v104)
              v104 = *(_QWORD *)(proto::gpsd::Request::default_instance_ + 24);
            v105 = (uint64_t)v263;
            if (!v263)
              goto LABEL_360;
            if (v263 == &v261)
            {
              v245 = (uint64_t (***)())v244;
              ((void (*)(uint64_t (***)(), _BYTE *))v261[3])(&v261, v244);
            }
            else
            {
              v105 = ((uint64_t (*)(uint64_t (***)()))(*v263)[2])(v263);
LABEL_360:
              v245 = (uint64_t (***)())v105;
            }
            sub_100017310(a1, v104, (uint64_t)v244);
            v22 = v245;
            if (v245 != (uint64_t (***)())v244)
              goto LABEL_40;
            v23 = 4;
            v22 = (uint64_t (***)())v244;
            goto LABEL_44;
          case 9u:
            if ((*(_BYTE *)(v3 + 388) & 0x10) == 0)
            {
              LODWORD(buf[0]) = 4;
              v45 = v263;
              if (v263)
                goto LABEL_414;
              goto LABEL_605;
            }
            v116 = *(_QWORD *)(v3 + 32);
            if (!v116)
              v116 = *(_QWORD *)(proto::gpsd::Request::default_instance_ + 32);
            v117 = (uint64_t)v263;
            if (!v263)
              goto LABEL_392;
            if (v263 == &v261)
            {
              v243 = (uint64_t (***)())v242;
              ((void (*)(uint64_t (***)(), _BYTE *))v261[3])(&v261, v242);
            }
            else
            {
              v117 = ((uint64_t (*)(uint64_t (***)()))(*v263)[2])(v263);
LABEL_392:
              v243 = (uint64_t (***)())v117;
            }
            sub_100017918(a1, v116, (uint64_t)v242);
            v22 = v243;
            if (v243 != (uint64_t (***)())v242)
              goto LABEL_40;
            v23 = 4;
            v22 = (uint64_t (***)())v242;
            goto LABEL_44;
          case 0xAu:
            v62 = (uint64_t)v263;
            if (!v263)
              goto LABEL_221;
            if (v263 == &v261)
            {
              v241 = (uint64_t (***)())v240;
              ((void (*)(uint64_t (***)(), _BYTE *))v261[3])(&v261, v240);
            }
            else
            {
              v62 = ((uint64_t (*)(uint64_t (***)()))(*v263)[2])(v263);
LABEL_221:
              v241 = (uint64_t (***)())v62;
            }
            sub_100017D74(a1, *(_QWORD *)(v3 + 120), *(_DWORD *)(v3 + 388), (uint64_t)v240);
            v22 = v241;
            if (v241 != (uint64_t (***)())v240)
              goto LABEL_40;
            v23 = 4;
            v22 = (uint64_t (***)())v240;
            goto LABEL_44;
          case 0xBu:
            v48 = (uint64_t)v263;
            if (!v263)
              goto LABEL_134;
            if (v263 == &v261)
            {
              v239 = (uint64_t (***)())v238;
              ((void (*)(uint64_t (***)(), _BYTE *))v261[3])(&v261, v238);
            }
            else
            {
              v48 = ((uint64_t (*)(uint64_t (***)()))(*v263)[2])(v263);
LABEL_134:
              v239 = (uint64_t (***)())v48;
            }
            sub_10000296C(a1, *(_QWORD *)(v3 + 128), *(_DWORD *)(v3 + 388), (uint64_t)v238);
            v22 = v239;
            if (v239 != (uint64_t (***)())v238)
              goto LABEL_40;
            v23 = 4;
            v22 = (uint64_t (***)())v238;
            goto LABEL_44;
          case 0xCu:
            LODWORD(buf[0]) = 4;
            v45 = v263;
            if (v263)
              goto LABEL_414;
            goto LABEL_605;
          case 0xEu:
            if ((*(_BYTE *)(v3 + 388) & 0x40) == 0)
            {
              LODWORD(buf[0]) = 4;
              v45 = v263;
              if (!v263)
                goto LABEL_605;
              goto LABEL_414;
            }
            v96 = *(_QWORD *)(v3 + 48);
            if (!v96)
              v96 = *(_QWORD *)(proto::gpsd::Request::default_instance_ + 48);
            v97 = (uint64_t)v263;
            if (!v263)
              goto LABEL_336;
            if (v263 == &v261)
            {
              v237 = (uint64_t (***)())v236;
              ((void (*)(uint64_t (***)(), _BYTE *))v261[3])(&v261, v236);
            }
            else
            {
              v97 = ((uint64_t (*)(uint64_t (***)()))(*v263)[2])(v263);
LABEL_336:
              v237 = (uint64_t (***)())v97;
            }
            sub_10002EB0C(a1, v96, (uint64_t)v236);
            v22 = v237;
            if (v237 != (uint64_t (***)())v236)
              goto LABEL_40;
            v23 = 4;
            v22 = (uint64_t (***)())v236;
            goto LABEL_44;
          case 0xFu:
            if ((*(_BYTE *)(v3 + 388) & 0x80) == 0)
            {
              LODWORD(buf[0]) = 4;
              v45 = v263;
              if (!v263)
                goto LABEL_605;
              goto LABEL_414;
            }
            v84 = *(_QWORD *)(v3 + 56);
            if (!v84)
              v84 = *(_QWORD *)(proto::gpsd::Request::default_instance_ + 56);
            v85 = (uint64_t)v263;
            if (!v263)
              goto LABEL_304;
            if (v263 == &v261)
            {
              v235 = (uint64_t (***)())v234;
              ((void (*)(uint64_t (***)(), _BYTE *))v261[3])(&v261, v234);
            }
            else
            {
              v85 = ((uint64_t (*)(uint64_t (***)()))(*v263)[2])(v263);
LABEL_304:
              v235 = (uint64_t (***)())v85;
            }
            sub_10002ED10(a1, v84, (uint64_t)v234);
            v22 = v235;
            if (v235 != (uint64_t (***)())v234)
              goto LABEL_40;
            v23 = 4;
            v22 = (uint64_t (***)())v234;
            goto LABEL_44;
          case 0x10u:
            if ((*(_BYTE *)(v3 + 389) & 1) == 0)
            {
              LODWORD(buf[0]) = 4;
              v45 = v263;
              if (!v263)
                goto LABEL_605;
              goto LABEL_414;
            }
            v109 = *(_QWORD *)(v3 + 64);
            if (!v109)
              v109 = *(_QWORD *)(proto::gpsd::Request::default_instance_ + 64);
            v110 = (uint64_t)v263;
            if (!v263)
              goto LABEL_372;
            if (v263 == &v261)
            {
              v233 = (uint64_t (***)())v232;
              ((void (*)(uint64_t (***)(), _BYTE *))v261[3])(&v261, v232);
            }
            else
            {
              v110 = ((uint64_t (*)(uint64_t (***)()))(*v263)[2])(v263);
LABEL_372:
              v233 = (uint64_t (***)())v110;
            }
            sub_10002EF14(a1, v109, (uint64_t)v232);
            v22 = v233;
            if (v233 != (uint64_t (***)())v232)
              goto LABEL_40;
            v23 = 4;
            v22 = (uint64_t (***)())v232;
            goto LABEL_44;
          case 0x11u:
            if ((*(_BYTE *)(v3 + 389) & 2) == 0)
            {
              LODWORD(buf[0]) = 4;
              v45 = v263;
              if (!v263)
                goto LABEL_605;
LABEL_414:
              ((void (*)(uint64_t (***)(), void **))(*v45)[6])(v45, buf);
              goto LABEL_45;
            }
            v111 = *(_QWORD *)(v3 + 72);
            if (!v111)
              v111 = *(_QWORD *)(proto::gpsd::Request::default_instance_ + 72);
            v112 = (uint64_t)v263;
            if (!v263)
              goto LABEL_378;
            if (v263 == &v261)
            {
              v231 = (uint64_t (***)())v230;
              ((void (*)(uint64_t (***)(), _BYTE *))v261[3])(&v261, v230);
            }
            else
            {
              v112 = ((uint64_t (*)(uint64_t (***)()))(*v263)[2])(v263);
LABEL_378:
              v231 = (uint64_t (***)())v112;
            }
            sub_10002F050(a1, v111, (uint64_t)v230);
            v22 = v231;
            if (v231 != (uint64_t (***)())v230)
              goto LABEL_40;
            v23 = 4;
            v22 = (uint64_t (***)())v230;
            goto LABEL_44;
          case 0x12u:
            if ((*(_BYTE *)(v3 + 389) & 4) == 0)
            {
              LODWORD(buf[0]) = 4;
              v45 = v263;
              if (v263)
                goto LABEL_414;
              goto LABEL_605;
            }
            v120 = *(_QWORD *)(v3 + 80);
            if (!v120)
              v120 = *(_QWORD *)(proto::gpsd::Request::default_instance_ + 80);
            v121 = (uint64_t)v263;
            if (!v263)
              goto LABEL_404;
            if (v263 == &v261)
            {
              v229 = (uint64_t (***)())v228;
              ((void (*)(uint64_t (***)(), _BYTE *))v261[3])(&v261, v228);
            }
            else
            {
              v121 = ((uint64_t (*)(uint64_t (***)()))(*v263)[2])(v263);
LABEL_404:
              v229 = (uint64_t (***)())v121;
            }
            sub_100017130(a1, v120, (uint64_t)v228);
            v22 = v229;
            if (v229 != (uint64_t (***)())v228)
              goto LABEL_40;
            v23 = 4;
            v22 = (uint64_t (***)())v228;
            goto LABEL_44;
          case 0x13u:
            if ((*(_BYTE *)(v3 + 389) & 8) == 0)
            {
              LODWORD(buf[0]) = 4;
              v45 = v263;
              if (v263)
                goto LABEL_414;
              goto LABEL_605;
            }
            v118 = *(_QWORD *)(v3 + 88);
            if (!v118)
              v118 = *(_QWORD *)(proto::gpsd::Request::default_instance_ + 88);
            v119 = (uint64_t)v263;
            if (!v263)
              goto LABEL_398;
            if (v263 == &v261)
            {
              v227 = (uint64_t (***)())v226;
              ((void (*)(uint64_t (***)(), _BYTE *))v261[3])(&v261, v226);
            }
            else
            {
              v119 = ((uint64_t (*)(uint64_t (***)()))(*v263)[2])(v263);
LABEL_398:
              v227 = (uint64_t (***)())v119;
            }
            sub_100017794(a1, v118, (uint64_t)v226);
            v22 = v227;
            if (v227 != (uint64_t (***)())v226)
              goto LABEL_40;
            v23 = 4;
            v22 = (uint64_t (***)())v226;
            goto LABEL_44;
          case 0x14u:
            if ((*(_BYTE *)(v3 + 389) & 0x10) == 0)
            {
              LODWORD(buf[0]) = 4;
              v45 = v263;
              if (!v263)
                goto LABEL_605;
              goto LABEL_414;
            }
            v82 = *(_QWORD *)(v3 + 96);
            if (!v82)
              v82 = *(_QWORD *)(proto::gpsd::Request::default_instance_ + 96);
            v83 = (uint64_t)v263;
            if (!v263)
              goto LABEL_298;
            if (v263 == &v261)
            {
              v225 = (uint64_t (***)())v224;
              ((void (*)(uint64_t (***)(), _BYTE *))v261[3])(&v261, v224);
            }
            else
            {
              v83 = ((uint64_t (*)(uint64_t (***)()))(*v263)[2])(v263);
LABEL_298:
              v225 = (uint64_t (***)())v83;
            }
            sub_100025380(a1, *(_DWORD *)(v82 + 8), *(_DWORD *)(v82 + 16), (uint64_t)v224);
            v22 = v225;
            if (v225 != (uint64_t (***)())v224)
              goto LABEL_40;
            v23 = 4;
            v22 = (uint64_t (***)())v224;
            goto LABEL_44;
          case 0x15u:
            if ((*(_BYTE *)(v3 + 389) & 0x20) == 0)
            {
              LODWORD(buf[0]) = 4;
              v45 = v263;
              if (!v263)
                goto LABEL_605;
              goto LABEL_414;
            }
            v98 = *(_QWORD *)(v3 + 104);
            if (!v98)
              v98 = *(_QWORD *)(proto::gpsd::Request::default_instance_ + 104);
            v99 = (uint64_t)v263;
            if (!v263)
              goto LABEL_342;
            if (v263 == &v261)
            {
              v223 = (uint64_t (***)())v222;
              ((void (*)(uint64_t (***)(), _BYTE *))v261[3])(&v261, v222);
            }
            else
            {
              v99 = ((uint64_t (*)(uint64_t (***)()))(*v263)[2])(v263);
LABEL_342:
              v223 = (uint64_t (***)())v99;
            }
            sub_10002F2BC(a1, v98, (uint64_t)v222);
            v22 = v223;
            if (v223 != (uint64_t (***)())v222)
              goto LABEL_40;
            v23 = 4;
            v22 = (uint64_t (***)())v222;
            goto LABEL_44;
          case 0x16u:
            if ((*(_BYTE *)(v3 + 389) & 0x40) == 0)
            {
              LODWORD(buf[0]) = 4;
              v45 = v263;
              if (v263)
                goto LABEL_414;
              goto LABEL_605;
            }
            v122 = *(_QWORD *)(v3 + 112);
            if (!v122)
              v122 = *(_QWORD *)(proto::gpsd::Request::default_instance_ + 112);
            v123 = (uint64_t)v263;
            if (!v263)
              goto LABEL_410;
            if (v263 == &v261)
            {
              v221 = (uint64_t (***)())v220;
              ((void (*)(uint64_t (***)(), _BYTE *))v261[3])(&v261, v220);
            }
            else
            {
              v123 = ((uint64_t (*)(uint64_t (***)()))(*v263)[2])(v263);
LABEL_410:
              v221 = (uint64_t (***)())v123;
            }
            sub_10002F408(a1, v122, (uint64_t)v220);
            v22 = v221;
            if (v221 != (uint64_t (***)())v220)
              goto LABEL_40;
            v23 = 4;
            v22 = (uint64_t (***)())v220;
            goto LABEL_44;
          case 0x17u:
            v216[0] = off_1000F2760;
            v216[1] = a1;
            v217 = (uint64_t (***)())v216;
            v46 = (uint64_t)v263;
            if (!v263)
              goto LABEL_120;
            if (v263 == &v261)
            {
              v215 = v214;
              ((void (*)(uint64_t (***)(), _BYTE *))v261[3])(&v261, v214);
            }
            else
            {
              v46 = ((uint64_t (*)(uint64_t (***)()))(*v263)[2])(v263);
LABEL_120:
              v215 = (_BYTE *)v46;
            }
            (*(void (**)(uint64_t, _QWORD *, _BYTE *))(*(_QWORD *)v15 + 208))(v15, v216, v214);
            v137 = v215;
            if (v215 == v214)
            {
              v138 = 4;
              v137 = v214;
            }
            else
            {
              if (!v215)
                goto LABEL_454;
              v138 = 5;
            }
            (*(void (**)(void))(*v137 + 8 * v138))();
LABEL_454:
            v22 = v217;
            if (v217 != v216)
              goto LABEL_40;
            v23 = 4;
            v22 = (uint64_t (***)())v216;
            goto LABEL_44;
          case 0x18u:
            if ((*(_BYTE *)(v3 + 390) & 0x20) == 0)
            {
              LODWORD(buf[0]) = 4;
              v45 = v263;
              if (!v263)
                goto LABEL_605;
              goto LABEL_414;
            }
            v94 = *(_QWORD *)(v3 + 168);
            if (!v94)
              v94 = *(_QWORD *)(proto::gpsd::Request::default_instance_ + 168);
            v95 = (uint64_t)v263;
            if (!v263)
              goto LABEL_330;
            if (v263 == &v261)
            {
              v213 = (uint64_t (***)())v212;
              ((void (*)(uint64_t (***)(), _BYTE *))v261[3])(&v261, v212);
            }
            else
            {
              v95 = ((uint64_t (*)(uint64_t (***)()))(*v263)[2])(v263);
LABEL_330:
              v213 = (uint64_t (***)())v95;
            }
            sub_10002F69C((gpsd::util *)a1, v94, (uint64_t)v212);
            v22 = v213;
            if (v213 != (uint64_t (***)())v212)
              goto LABEL_40;
            v23 = 4;
            v22 = (uint64_t (***)())v212;
            goto LABEL_44;
          case 0x19u:
            if ((*(_BYTE *)(v3 + 390) & 0x40) == 0)
            {
              LODWORD(buf[0]) = 4;
              v45 = v263;
              if (!v263)
                goto LABEL_605;
              goto LABEL_414;
            }
            v86 = *(_DWORD **)(v3 + 176);
            if (!v86)
              v86 = *(_DWORD **)(proto::gpsd::Request::default_instance_ + 176);
            v87 = (uint64_t)v263;
            if (!v263)
              goto LABEL_310;
            if (v263 == &v261)
            {
              v211 = (uint64_t (***)())v210;
              ((void (*)(uint64_t (***)(), _BYTE *))v261[3])(&v261, v210);
            }
            else
            {
              v87 = ((uint64_t (*)(uint64_t (***)()))(*v263)[2])(v263);
LABEL_310:
              v211 = (uint64_t (***)())v87;
            }
            sub_100003904(a1, v86, (uint64_t)v210);
            v22 = v211;
            if (v211 != (uint64_t (***)())v210)
              goto LABEL_40;
            v23 = 4;
            v22 = (uint64_t (***)())v210;
            goto LABEL_44;
          case 0x1Au:
            if ((*(_BYTE *)(v3 + 390) & 0x80) == 0)
              goto LABEL_173;
            v52 = *(_QWORD *)(v3 + 184);
            if (!v52)
              v52 = *(_QWORD *)(proto::gpsd::Request::default_instance_ + 184);
            if ((*(_BYTE *)(v52 + 16) & 1) == 0)
            {
LABEL_173:
              LODWORD(buf[0]) = 4;
              v45 = v263;
              if (!v263)
                goto LABEL_605;
              goto LABEL_414;
            }
            v130 = *(unsigned __int8 *)(v52 + 8);
            v131 = (uint64_t)v263;
            if (!v263)
              goto LABEL_434;
            if (v263 == &v261)
            {
              v209 = (uint64_t (***)())v208;
              ((void (*)(uint64_t (***)(), _BYTE *))v261[3])(&v261, v208);
            }
            else
            {
              v131 = ((uint64_t (*)(uint64_t (***)()))(*v263)[2])(v263);
LABEL_434:
              v209 = (uint64_t (***)())v131;
            }
            (*(void (**)(uint64_t, BOOL, _BYTE *))(*(_QWORD *)v15 + 240))(v15, v130 != 0, v208);
            v22 = v209;
            if (v209 != (uint64_t (***)())v208)
              goto LABEL_40;
            v23 = 4;
            v22 = (uint64_t (***)())v208;
            goto LABEL_44;
          case 0x1Bu:
            v47 = (uint64_t)v263;
            if (!v263)
              goto LABEL_127;
            if (v263 == &v261)
            {
              v205 = (uint64_t (***)())v204;
              ((void (*)(uint64_t (***)(), _BYTE *))v261[3])(&v261, v204);
            }
            else
            {
              v47 = ((uint64_t (*)(uint64_t (***)()))(*v263)[2])(v263);
LABEL_127:
              v205 = (uint64_t (***)())v47;
            }
            sub_100005398(a1, (uint64_t)v204);
            v22 = v205;
            if (v205 != (uint64_t (***)())v204)
              goto LABEL_40;
            v23 = 4;
            v22 = (uint64_t (***)())v204;
            goto LABEL_44;
          case 0x1Cu:
            v65 = (uint64_t)v263;
            if (!v263)
              goto LABEL_245;
            if (v263 == &v261)
            {
              v203 = (uint64_t (***)())v202;
              ((void (*)(uint64_t (***)(), _BYTE *))v261[3])(&v261, v202);
            }
            else
            {
              v65 = ((uint64_t (*)(uint64_t (***)()))(*v263)[2])(v263);
LABEL_245:
              v203 = (uint64_t (***)())v65;
            }
            (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v15 + 120))(v15, v202);
            v22 = v203;
            if (v203 != (uint64_t (***)())v202)
              goto LABEL_40;
            v23 = 4;
            v22 = (uint64_t (***)())v202;
            goto LABEL_44;
          case 0x1Eu:
            if ((*(_BYTE *)(v3 + 391) & 0x10) != 0)
            {
              v124 = *(_QWORD *)(v3 + 224);
              if (!v124)
                v124 = *(_QWORD *)(proto::gpsd::Request::default_instance_ + 224);
              sub_10002F888(a1, *(_DWORD *)(v124 + 8));
              LODWORD(buf[0]) = 1;
              v45 = v263;
              if (v263)
                goto LABEL_414;
            }
            else
            {
              LODWORD(buf[0]) = 4;
              v45 = v263;
              if (v263)
                goto LABEL_414;
            }
            goto LABEL_605;
          case 0x1Fu:
            if ((*(_BYTE *)(v3 + 391) & 0x20) == 0)
            {
              LODWORD(buf[0]) = 4;
              v45 = v263;
              if (!v263)
                goto LABEL_605;
              goto LABEL_414;
            }
            v88 = *(_QWORD *)(v3 + 232);
            if (!v88)
              v88 = *(_QWORD *)(proto::gpsd::Request::default_instance_ + 232);
            v89 = (uint64_t)v263;
            if (!v263)
              goto LABEL_316;
            if (v263 == &v261)
            {
              v219 = (uint64_t (***)())v218;
              ((void (*)(uint64_t (***)(), _BYTE *))v261[3])(&v261, v218);
            }
            else
            {
              v89 = ((uint64_t (*)(uint64_t (***)()))(*v263)[2])(v263);
LABEL_316:
              v219 = (uint64_t (***)())v89;
            }
            sub_10002F544(a1, v88, (uint64_t)v218);
            v22 = v219;
            if (v219 != (uint64_t (***)())v218)
              goto LABEL_40;
            v23 = 4;
            v22 = (uint64_t (***)())v218;
            goto LABEL_44;
          case 0x20u:
            LODWORD(buf[0]) = 1;
            if (v263)
            {
              ((void (*)(uint64_t (***)(), void **))(*v263)[6])(v263, buf);
              sub_100028FE0();
            }
            goto LABEL_605;
          case 0x26u:
            if ((*(_BYTE *)(v3 + 391) & 0x40) == 0)
              goto LABEL_254;
            v56 = *(_QWORD *)(v3 + 240);
            if (!v56)
              v56 = *(_QWORD *)(proto::gpsd::Request::default_instance_ + 240);
            if ((~*(_DWORD *)(v56 + 16) & 3) != 0)
            {
LABEL_254:
              LODWORD(buf[0]) = 4;
              v45 = v263;
              if (v263)
                goto LABEL_414;
              goto LABEL_605;
            }
            v57 = *(unsigned __int8 *)(v56 + 8);
            if (*(_BYTE *)(v56 + 9))
            {
              v58 = (id *)GpsdPreferences::instance(0);
              v59 = GpsdPreferences::enableL5(v58);
            }
            else
            {
              v59 = 0;
            }
            v145 = (uint64_t)v263;
            if (!v263)
              goto LABEL_572;
            if (v263 == &v261)
            {
              v207 = (uint64_t (***)())v206;
              ((void (*)(uint64_t (***)(), _BYTE *))v261[3])(&v261, v206);
            }
            else
            {
              v145 = ((uint64_t (*)(uint64_t (***)()))(*v263)[2])(v263);
LABEL_572:
              v207 = (uint64_t (***)())v145;
            }
            (*(void (**)(uint64_t, BOOL, id, _BYTE *))(*(_QWORD *)v15 + 232))(v15, v57 != 0, v59, v206);
            v22 = v207;
            if (v207 != (uint64_t (***)())v206)
              goto LABEL_40;
            v23 = 4;
            v22 = (uint64_t (***)())v206;
            goto LABEL_44;
          case 0x33u:
            sub_10002F998(a1, v3);
            goto LABEL_45;
          case 0x34u:
            sub_10002FC10(a1);
            goto LABEL_45;
          case 0x35u:
            if ((*(_DWORD *)(v3 + 388) & 0x80000000) == 0)
            {
              v49 = qword_100100838;
              if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
              {
                LOWORD(buf[0]) = 0;
                _os_log_error_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "#gdm,#nilr,EmergConfig payload is missing", (uint8_t *)buf, 2u);
              }
              LODWORD(buf[0]) = 4;
              v45 = v263;
              if (v263)
                goto LABEL_414;
              goto LABEL_605;
            }
            LOBYTE(buf[0]) = 1;
            memset(&buf[1], 0, 24);
            LOBYTE(buf[4]) = 1;
            LOWORD(buf[5]) = -1;
            memset(&buf[6], 0, 27);
            BYTE3(buf[9]) = 1;
            v125 = *(std::string **)(v3 + 248);
            if (!v125)
              v125 = *(std::string **)(proto::gpsd::Request::default_instance_ + 248);
            ProtobufUtil::fromProtobuf(v125, (uint64_t)buf);
            v126 = qword_100100838;
            if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
            {
              v127 = &buf[1];
              v128 = &buf[6];
              if (SHIBYTE(buf[3]) < 0)
                v127 = (void **)buf[1];
              if (SHIBYTE(buf[8]) < 0)
                v128 = (void **)buf[6];
              *(_DWORD *)v195 = 67110403;
              LODWORD(v196) = LOBYTE(buf[0]);
              WORD2(v196) = 2081;
              *(_QWORD *)((char *)&v196 + 6) = v127;
              HIWORD(v196) = 1024;
              *(_DWORD *)v197 = LOBYTE(buf[9]);
              *(_WORD *)&v197[4] = 1024;
              *(_DWORD *)v198 = LOWORD(buf[5]);
              *(_WORD *)&v198[4] = 2081;
              v199 = v128;
              v200 = 1024;
              v201 = LOBYTE(buf[4]);
              _os_log_impl((void *)&_mh_execute_header, v126, OS_LOG_TYPE_DEFAULT, "#gdm,#nilr,emergConfig,heloEnabled,%d,imsi,%{private}s,supl_enable_msa,%d,suplPort,%d,suplServer,%{private}s,cplane_early_return,%d", v195, 0x2Eu);
            }
            if ((*(_DWORD *)(GpsdPlatformInfo::instance(0) + 8) - 201) <= 1)
            {
              *(_DWORD *)v195 = 7;
              if (!v263)
                sub_100025CE8();
              ((void (*)(uint64_t (***)(), uint8_t *))(*v263)[6])(v263, v195);
              goto LABEL_588;
            }
            v139 = *(_QWORD *)(a1 + 8);
            v140 = (uint64_t)v263;
            if (!v263)
              goto LABEL_489;
            if (v263 == &v261)
            {
              v194 = v193;
              ((void (*)(uint64_t (***)(), _BYTE *))v261[3])(&v261, v193);
            }
            else
            {
              v140 = ((uint64_t (*)(uint64_t (***)()))(*v263)[2])(v263);
LABEL_489:
              v194 = (_BYTE *)v140;
            }
            (*(void (**)(uint64_t, void **, _BYTE *))(*(_QWORD *)v139 + 280))(v139, buf, v193);
            v146 = v194;
            if (v194 == v193)
            {
              v147 = 4;
              v146 = v193;
            }
            else
            {
              if (!v194)
              {
LABEL_588:
                sub_10002FE30((uint64_t)buf);
                goto LABEL_45;
              }
              v147 = 5;
            }
            (*(void (**)(void))(*v146 + 8 * v147))();
            goto LABEL_588;
          case 0x3Cu:
            v63 = (uint64_t)v263;
            if (!v263)
              goto LABEL_231;
            if (v263 == &v261)
            {
              v192 = (uint64_t (***)())v191;
              ((void (*)(uint64_t (***)(), _BYTE *))v261[3])(&v261, v191);
            }
            else
            {
              v63 = ((uint64_t (*)(uint64_t (***)()))(*v263)[2])(v263);
LABEL_231:
              v192 = (uint64_t (***)())v63;
            }
            sub_10002FE70(a1, v3, a3, (uint64_t)v191);
            v22 = v192;
            if (v192 != (uint64_t (***)())v191)
              goto LABEL_40;
            v23 = 4;
            v22 = (uint64_t (***)())v191;
            goto LABEL_44;
          case 0x3Du:
            v66 = (uint64_t)v263;
            if (!v263)
              goto LABEL_253;
            if (v263 == &v261)
            {
              v190 = (uint64_t (***)())v189;
              ((void (*)(uint64_t (***)(), _BYTE *))v261[3])(&v261, v189);
            }
            else
            {
              v66 = ((uint64_t (*)(uint64_t (***)()))(*v263)[2])(v263);
LABEL_253:
              v190 = (uint64_t (***)())v66;
            }
            sub_100030320(a1, *(unsigned int *)(v3 + 296), *(_DWORD *)(v3 + 392), (uint64_t)v189);
            v22 = v190;
            if (v190 != (uint64_t (***)())v189)
              goto LABEL_40;
            v23 = 4;
            v22 = (uint64_t (***)())v189;
            goto LABEL_44;
          case 0x41u:
            v42 = qword_100100838;
            if ((*(_BYTE *)(v3 + 392) & 4) == 0)
            {
              if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
              {
                LOWORD(buf[0]) = 0;
                _os_log_error_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "#gdm,#nilr,#cp,GpsReferenceTime payload is missing", (uint8_t *)buf, 2u);
              }
              LODWORD(buf[0]) = 4;
              v38 = v263;
              if (!v263)
                goto LABEL_605;
LABEL_107:
              ((void (*)(uint64_t (***)(), void **))(*v263)[6])(v38, buf);
              goto LABEL_45;
            }
            if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(buf[0]) = 0;
              _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "#gdm,#nilr,#cp,GpsReferenceTime", (uint8_t *)buf, 2u);
            }
            buf[0] = (void *)-1;
            v77 = 1;
            do
            {
              v78 = &buf[v77];
              *(_WORD *)v78 = -1;
              *((_BYTE *)v78 + 2) = -1;
              *(void **)((char *)v78 + 4) = (void *)-1;
              *((_BYTE *)v78 + 12) = -1;
              v77 += 2;
            }
            while (v78 + 2 != (void **)&v182);
            v182 = -1;
            v183 = -1;
            v184 = -1;
            v79 = *(_QWORD *)(v3 + 264);
            if (!v79)
              v79 = *(_QWORD *)(proto::gpsd::Request::default_instance_ + 264);
            ProtobufUtil::fromProtobuf(v79, (uint64_t)buf);
            v80 = *(_QWORD *)(a1 + 8);
            v81 = (uint64_t)v263;
            if (!v263)
              goto LABEL_292;
            if (v263 == &v261)
            {
              v188 = (uint64_t (***)())v187;
              ((void (*)(uint64_t (***)(), _BYTE *))v261[3])(&v261, v187);
            }
            else
            {
              v81 = (*v263)[2]();
LABEL_292:
              v188 = (uint64_t (***)())v81;
            }
            (*(void (**)(uint64_t, void **, _BYTE *))(*(_QWORD *)v80 + 352))(v80, buf, v187);
            v22 = v188;
            if (v188 != (uint64_t (***)())v187)
              goto LABEL_40;
            v23 = 4;
            v22 = (uint64_t (***)())v187;
            goto LABEL_44;
          case 0x42u:
            v61 = qword_100100838;
            if ((*(_BYTE *)(v3 + 392) & 8) == 0)
            {
              if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
              {
                LOWORD(buf[0]) = 0;
                _os_log_error_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_ERROR, "#gdm,#nilr,#cp,ReferenceLocation payload is missing", (uint8_t *)buf, 2u);
              }
              LODWORD(buf[0]) = 4;
              v45 = v263;
              if (v263)
                goto LABEL_414;
              goto LABEL_605;
            }
            if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(buf[0]) = 0;
              _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "#gdm,#nilr,#cp,GpsReferenceLocation", (uint8_t *)buf, 2u);
            }
            buf[0] = (void *)-1;
            buf[1] = (void *)0xFFFFFFFF7FFFFFFFLL;
            *(void **)((char *)&buf[2] + 4) = (void *)-1;
            HIDWORD(buf[3]) = -1;
            LOWORD(buf[2]) = -1;
            v113 = *(int **)(v3 + 272);
            if (!v113)
              v113 = *(int **)(proto::gpsd::Request::default_instance_ + 272);
            ProtobufUtil::fromProtobuf(v113, (uint64_t)buf);
            v114 = *(_QWORD *)(a1 + 8);
            v115 = (uint64_t)v263;
            if (!v263)
              goto LABEL_386;
            if (v263 == &v261)
            {
              v186 = (uint64_t (***)())v185;
              ((void (*)(uint64_t (***)(), _BYTE *))v261[3])(&v261, v185);
            }
            else
            {
              v115 = ((uint64_t (*)(uint64_t (***)()))(*v263)[2])(v263);
LABEL_386:
              v186 = (uint64_t (***)())v115;
            }
            (*(void (**)(uint64_t, void **, _BYTE *))(*(_QWORD *)v114 + 360))(v114, buf, v185);
            v22 = v186;
            if (v186 != (uint64_t (***)())v185)
              goto LABEL_40;
            v23 = 4;
            v22 = (uint64_t (***)())v185;
            goto LABEL_44;
          case 0x43u:
            v41 = qword_100100838;
            if ((*(_BYTE *)(v3 + 392) & 0x10) == 0)
            {
              if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
              {
                LOWORD(buf[0]) = 0;
                _os_log_error_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "#gdm,#nilr,#cp,GpsNavigationModel payload is missing", (uint8_t *)buf, 2u);
              }
              LODWORD(buf[0]) = 4;
              v38 = v263;
              if (!v263)
                goto LABEL_605;
              goto LABEL_107;
            }
            if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(buf[0]) = 0;
              _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "#gdm,#nilr,#cp,GpsNavigationModel", (uint8_t *)buf, 2u);
            }
            sub_100030480((uint64_t)buf);
            v74 = *(_DWORD **)(v3 + 280);
            if (!v74)
              v74 = *(_DWORD **)(proto::gpsd::Request::default_instance_ + 280);
            ProtobufUtil::fromProtobuf(v74, (uint64_t)buf);
            v75 = *(_QWORD *)(a1 + 8);
            v76 = (uint64_t)v263;
            if (!v263)
              goto LABEL_282;
            if (v263 == &v261)
            {
              v180 = (uint64_t (***)())v179;
              ((void (*)(uint64_t (***)(), _BYTE *))v261[3])(&v261, v179);
            }
            else
            {
              v76 = (*v263)[2]();
LABEL_282:
              v180 = (uint64_t (***)())v76;
            }
            (*(void (**)(uint64_t, void **, _BYTE *))(*(_QWORD *)v75 + 368))(v75, buf, v179);
            v22 = v180;
            if (v180 == (uint64_t (***)())v179)
            {
              v23 = 4;
              v22 = (uint64_t (***)())v179;
            }
            else
            {
LABEL_40:
              if (!v22)
              {
LABEL_45:
                sub_1000142D4(a1 + 928, v3);
                goto LABEL_50;
              }
              v23 = 5;
            }
LABEL_44:
            (*v22)[v23]();
            goto LABEL_45;
          case 0x44u:
            v39 = qword_100100838;
            if ((*(_BYTE *)(v3 + 392) & 0x20) == 0)
            {
              if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
              {
                LOWORD(buf[0]) = 0;
                _os_log_error_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "#gdm,#nilr,#cp,GpsAcqAssistance payload is missing", (uint8_t *)buf, 2u);
              }
              LODWORD(buf[0]) = 4;
              v38 = v263;
              if (!v263)
                goto LABEL_605;
              goto LABEL_107;
            }
            if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(buf[0]) = 0;
              _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "#gdm,#nilr,#cp,GpsAcqAssistance", (uint8_t *)buf, 2u);
            }
            sub_100030504((uint64_t)buf);
            v71 = *(_QWORD *)(v3 + 288);
            if (!v71)
              v71 = *(_QWORD *)(proto::gpsd::Request::default_instance_ + 288);
            ProtobufUtil::fromProtobuf(v71, (uint64_t)buf);
            v72 = *(_QWORD *)(a1 + 8);
            v73 = (uint64_t)v263;
            if (!v263)
              goto LABEL_274;
            if (v263 == &v261)
            {
              v178 = (uint64_t (***)())v177;
              ((void (*)(uint64_t (***)(), _BYTE *))v261[3])(&v261, v177);
            }
            else
            {
              v73 = (*v263)[2]();
LABEL_274:
              v178 = (uint64_t (***)())v73;
            }
            (*(void (**)(uint64_t, void **, _BYTE *))(*(_QWORD *)v72 + 376))(v72, buf, v177);
            v22 = v178;
            if (v178 != (uint64_t (***)())v177)
              goto LABEL_40;
            v23 = 4;
            v22 = (uint64_t (***)())v177;
            goto LABEL_44;
          case 0x45u:
            if ((*(_BYTE *)(v3 + 392) & 0x40) == 0)
            {
              v50 = qword_100100838;
              if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
              {
                LOWORD(buf[0]) = 0;
                _os_log_error_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_ERROR, "#gdm,#nilr,#cp,CellFTAssistance payload is missing", (uint8_t *)buf, 2u);
              }
              LODWORD(buf[0]) = 4;
              v45 = v263;
              if (v263)
                goto LABEL_414;
              goto LABEL_605;
            }
            buf[0] = 0;
            LOWORD(buf[1]) = -1;
            HIDWORD(buf[1]) = -1;
            LOWORD(buf[2]) = -1;
            *(void **)((char *)&buf[2] + 4) = (void *)-1;
            WORD2(buf[3]) = -1;
            LODWORD(buf[4]) = -1;
            v90 = *(_QWORD *)(v3 + 304);
            if (!v90)
              v90 = *(_QWORD *)(proto::gpsd::Request::default_instance_ + 304);
            ProtobufUtil::fromProtobuf(v90, buf);
            v91 = qword_100100838;
            if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v195 = 67110144;
              LODWORD(v196) = HIDWORD(buf[0]);
              WORD2(v196) = 1024;
              *(_DWORD *)((char *)&v196 + 6) = HIDWORD(buf[2]);
              WORD5(v196) = 1024;
              HIDWORD(v196) = buf[3];
              *(_WORD *)v197 = 1024;
              *(_DWORD *)&v197[2] = WORD2(buf[3]);
              *(_WORD *)v198 = 1024;
              *(_DWORD *)&v198[2] = buf[4];
              _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEFAULT, "#gdm,#nilr,#cp,CellFTAssistance,networkType,%d,cdmaTime.cdmaTow.intPart,%d,cdmaTime.cdmaTow.fracPart,%d,cdmaTime.weekNum,%d,cdmaTime.absoluteRmsAcc,%d", v195, 0x20u);
            }
            v92 = *(_QWORD *)(a1 + 8);
            v93 = (uint64_t)v263;
            if (!v263)
              goto LABEL_324;
            if (v263 == &v261)
            {
              v176 = (uint64_t (***)())v175;
              ((void (*)(uint64_t (***)(), _BYTE *))v261[3])(&v261, v175);
            }
            else
            {
              v93 = ((uint64_t (*)(uint64_t (***)()))(*v263)[2])(v263);
LABEL_324:
              v176 = (uint64_t (***)())v93;
            }
            (*(void (**)(uint64_t, void **, _BYTE *))(*(_QWORD *)v92 + 392))(v92, buf, v175);
            v22 = v176;
            if (v176 != (uint64_t (***)())v175)
              goto LABEL_40;
            v23 = 4;
            v22 = (uint64_t (***)())v175;
            goto LABEL_44;
          case 0x46u:
            v53 = (uint64_t)v263;
            if (!v263)
              goto LABEL_178;
            if (v263 == &v261)
            {
              v174 = (uint64_t (***)())v173;
              ((void (*)(uint64_t (***)(), _BYTE *))v261[3])(&v261, v173);
            }
            else
            {
              v53 = ((uint64_t (*)(uint64_t (***)()))(*v263)[2])(v263);
LABEL_178:
              v174 = (uint64_t (***)())v53;
            }
            sub_10003057C(a1, v3, (uint64_t)v173);
            v22 = v174;
            if (v174 != (uint64_t (***)())v173)
              goto LABEL_40;
            v23 = 4;
            v22 = (uint64_t (***)())v173;
            goto LABEL_44;
          case 0x47u:
            v64 = (uint64_t)v263;
            if (!v263)
              goto LABEL_238;
            if (v263 == &v261)
            {
              v172 = (uint64_t (***)())v171;
              ((void (*)(uint64_t (***)(), _BYTE *))v261[3])(&v261, v171);
            }
            else
            {
              v64 = ((uint64_t (*)(uint64_t (***)()))(*v263)[2])(v263);
LABEL_238:
              v172 = (uint64_t (***)())v64;
            }
            sub_100030A54(a1, v3, (uint64_t)v171);
            v22 = v172;
            if (v172 != (uint64_t (***)())v171)
              goto LABEL_40;
            v23 = 4;
            v22 = (uint64_t (***)())v171;
            goto LABEL_44;
          case 0x49u:
            if ((*(_BYTE *)(v3 + 393) & 2) == 0)
            {
              v37 = qword_100100838;
              if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
              {
                LOWORD(buf[0]) = 0;
                _os_log_error_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "#gdm,#nilr,#supl,SET_SUPL_LOCATIONID received without Payload", (uint8_t *)buf, 2u);
              }
              LODWORD(buf[0]) = 4;
              v38 = v263;
              if (!v263)
                goto LABEL_605;
              goto LABEL_107;
            }
            LODWORD(buf[0]) = 0;
            memset(&buf[1], 0, 72);
            v68 = *(_QWORD *)(v3 + 336);
            if (!v68)
              v68 = *(_QWORD *)(proto::gpsd::Request::default_instance_ + 336);
            ProtobufUtil::fromProtobuf(v68, (uint64_t)buf);
            v69 = *(_QWORD *)(a1 + 8);
            v70 = (uint64_t)v263;
            if (!v263)
              goto LABEL_266;
            if (v263 == &v261)
            {
              v170 = v169;
              ((void (*)(uint64_t (***)(), _BYTE *))v261[3])(&v261, v169);
            }
            else
            {
              v70 = (*v263)[2]();
LABEL_266:
              v170 = (_BYTE *)v70;
            }
            (*(void (**)(uint64_t, void **, _BYTE *))(*(_QWORD *)v69 + 432))(v69, buf, v169);
            v141 = v170;
            if (v170 == v169)
            {
              v142 = 4;
              v141 = v169;
            }
            else
            {
              if (!v170)
              {
LABEL_547:
                sub_100031458(buf);
                goto LABEL_45;
              }
              v142 = 5;
            }
            (*(void (**)(void))(*v141 + 8 * v142))();
            goto LABEL_547;
          case 0x4Au:
            v43 = qword_100100838;
            if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(buf[0]) = 0;
              _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "#gdm,#nilr,#supl,ABORT_SUPL_SESSION", (uint8_t *)buf, 2u);
              v15 = *(_QWORD *)(a1 + 8);
            }
            v44 = (uint64_t)v263;
            if (!v263)
              goto LABEL_113;
            if (v263 == &v261)
            {
              v166 = v165;
              ((void (*)(uint64_t (***)(), _BYTE *))v261[3])(&v261, v165);
            }
            else
            {
              v44 = ((uint64_t (*)(uint64_t (***)()))(*v263)[2])(v263);
LABEL_113:
              v166 = (_BYTE *)v44;
            }
            (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v15 + 440))(v15, v165);
            v135 = v166;
            if (v166 == v165)
            {
              v136 = 4;
              v135 = v165;
            }
            else
            {
              if (!v166)
                goto LABEL_447;
              v136 = 5;
            }
            (*(void (**)(void))(*v135 + 8 * v136))();
LABEL_447:
            VendorLogger::notifyStop((VendorLogger *)(a1 + 24));
            VendorLogger::notifyStart((VendorLogger *)(a1 + 24));
            goto LABEL_45;
          case 0x4Cu:
            if ((*(_BYTE *)(v3 + 393) & 0x80) == 0)
            {
              v54 = qword_100100838;
              if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
              {
                LOWORD(buf[0]) = 0;
                _os_log_error_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "#gdm,#nilr,#supl,SET_SUPL_WLAN_MEAS received without Payload", (uint8_t *)buf, 2u);
              }
              LODWORD(buf[0]) = 4;
              v45 = v263;
              if (v263)
                goto LABEL_414;
              goto LABEL_605;
            }
            LODWORD(buf[0]) = 0;
            memset(&buf[1], 0, 24);
            v106 = *(_QWORD *)(v3 + 376);
            if (!v106)
              v106 = *(_QWORD *)(proto::gpsd::Request::default_instance_ + 376);
            ProtobufUtil::fromProtobuf(v106, (uint64_t)buf);
            v107 = *(_QWORD *)(a1 + 8);
            v108 = (uint64_t)v263;
            if (!v263)
              goto LABEL_366;
            if (v263 == &v261)
            {
              v168 = v167;
              ((void (*)(uint64_t (***)(), _BYTE *))v261[3])(&v261, v167);
            }
            else
            {
              v108 = ((uint64_t (*)(uint64_t (***)()))(*v263)[2])(v263);
LABEL_366:
              v168 = (_BYTE *)v108;
            }
            (*(void (**)(uint64_t, void **, _BYTE *))(*(_QWORD *)v107 + 464))(v107, buf, v167);
            v143 = v168;
            if (v168 == v167)
            {
              v144 = 4;
              v143 = v167;
            }
            else
            {
              if (!v168)
                goto LABEL_563;
              v144 = 5;
            }
            (*(void (**)(void))(*v143 + 8 * v144))();
LABEL_563:
            if (buf[1])
            {
              buf[2] = buf[1];
              operator delete(buf[1]);
            }
            goto LABEL_45;
          default:
            v40 = qword_100100830;
            if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0]) = 67240192;
              HIDWORD(buf[0]) = v12;
              _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "#gdm,Unexpected request type,%{public}d", (uint8_t *)buf, 8u);
            }
            LODWORD(buf[0]) = 4;
            v38 = v263;
            if (v263)
              goto LABEL_107;
            goto LABEL_605;
        }
      }
      v26 = (id *)GpsdPreferences::instance(0);
      if (GpsdPreferences::bigPowerSwitch(v26) && *(_DWORD *)(v3 + 20) == 2)
      {
        v27 = qword_100100838;
        if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#gdm,#bps,Ignore and ack stop when device held in reset", (uint8_t *)buf, 2u);
        }
        LODWORD(buf[0]) = 1;
        v28 = v263;
        if (!v263)
          goto LABEL_605;
      }
      else
      {
        v30 = qword_100100838;
        if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
        {
          gpsd::util::stringify(*(_DWORD *)(v3 + 20), (uint64_t)buf);
          v129 = SHIBYTE(buf[2]) >= 0 ? buf : (void **)buf[0];
          *(_DWORD *)v195 = 136446210;
          *(_QWORD *)&v196 = v129;
          _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "#gdm,Device not initialized,Cannot handle request,%{public}s", v195, 0xCu);
          if (SHIBYTE(buf[2]) < 0)
            operator delete(buf[0]);
        }
        LODWORD(buf[0]) = 7;
        v28 = v263;
        if (!v263)
          goto LABEL_605;
      }
      ((void (*)(uint64_t (***)(), void **))(*v28)[6])(v28, buf);
LABEL_50:
      v24 = v263;
      if (v263 == &v261)
      {
        v25 = 4;
        v24 = &v261;
        goto LABEL_54;
      }
      if (v263)
      {
        v25 = 5;
LABEL_54:
        (*v24)[v25]();
      }
      return;
  }
}

void sub_100013C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  uint64_t v61;
  uint64_t v62;
  unint64_t *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;

  v64 = (unint64_t *)STACK[0x848];
  if (STACK[0x848] == v61)
  {
    v65 = 4;
    v64 = &STACK[0x830];
  }
  else
  {
    if (!v64)
      goto LABEL_6;
    v65 = 5;
  }
  (*(void (**)(void))(*v64 + 8 * v65))();
LABEL_6:
  sub_10002FE30((uint64_t)&a61);
  v66 = *(_QWORD **)(v62 - 96);
  if (v66 == (_QWORD *)(v62 - 120))
  {
    v67 = 4;
    v66 = (_QWORD *)(v62 - 120);
  }
  else
  {
    if (!v66)
      goto LABEL_11;
    v67 = 5;
  }
  (*(void (**)(void))(*v66 + 8 * v67))();
LABEL_11:
  _Unwind_Resume(a1);
}

uint64_t proto::gpsd::Request_Type_IsValid(proto::gpsd *this)
{
  int v1;
  uint64_t result;

  v1 = (int)this;
  result = 1;
  switch(v1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
      return result;
    default:
      result = 0;
      break;
  }
  return result;
}

void sub_1000142D4(uint64_t a1, uint64_t a2)
{
  int v2;
  std::mutex *v6;
  gpsd::util *v7;
  gpsd::util *MachContinuousTimeNs;
  uint64_t i;
  uint64_t v10;
  unint64_t v15;
  id *v16;
  int v17;
  double v18;
  NSObject *global_queue;
  dispatch_source_t v20;
  NSObject *v21;
  NSObject *v22;
  dispatch_time_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  gpsd::util *v28;
  const void *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  double Current;
  uint64_t v36;
  int v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  gpsd::util *v41;
  uint64_t v42;
  uint64_t v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  _BOOL4 v49;
  double *v50;
  double v51;
  double v52;
  uint64_t v53;
  _QWORD *v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  gpsd::util *v59;
  const void *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  _BOOL4 v67;
  double v68;
  double v69;
  NSObject *v70;
  NSObject *v71;
  _BOOL4 v72;
  int v73;
  uint64_t v74;
  const char *v75;
  NSObject *v76;
  os_log_type_t v77;
  uint32_t v78;
  uint64_t v79;
  NSObject *v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double *v85;
  double v86;
  double v87;
  double v88;
  int v89;
  NSObject *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE v94[32];
  _BYTE v95[12];
  double v96;
  __int16 v97;
  int v98;

  v2 = *(_DWORD *)(a2 + 20);
  if (*(_QWORD *)(a1 + 824))
    _ZF = 1;
  else
    _ZF = v2 == 1;
  if (_ZF)
  {
    switch(v2)
    {
      case 1:
        v6 = (std::mutex *)(a1 + 832);
        std::mutex::lock((std::mutex *)(a1 + 832));
        MachContinuousTimeNs = (gpsd::util *)gpsd::util::getMachContinuousTimeNs(v7);
        *(double *)(a1 + 184) = (double)(unint64_t)MachContinuousTimeNs * 0.000000001;
        *(_DWORD *)(a1 + 544) = 0;
        *(_OWORD *)(a1 + 464) = 0u;
        *(_OWORD *)(a1 + 480) = 0u;
        *(_OWORD *)(a1 + 496) = 0u;
        *(_OWORD *)(a1 + 512) = 0u;
        *(_OWORD *)(a1 + 528) = 0u;
        *(_OWORD *)(a1 + 552) = 0u;
        *(_OWORD *)(a1 + 568) = 0u;
        *(_OWORD *)(a1 + 584) = 0u;
        *(_OWORD *)(a1 + 600) = 0u;
        *(_DWORD *)(a1 + 616) = 0;
        *(_OWORD *)(a1 + 192) = 0u;
        *(_OWORD *)(a1 + 208) = 0u;
        *(_OWORD *)(a1 + 224) = 0u;
        *(_OWORD *)(a1 + 240) = 0u;
        *(_QWORD *)(a1 + 256) = 0;
        for (i = 624; i != 736; i += 16)
        {
          v10 = a1 + i;
          *(_DWORD *)v10 = 0;
          *(_QWORD *)(v10 + 8) = 0;
        }
        *(_QWORD *)(a1 + 800) = 0;
        *(_OWORD *)(a1 + 768) = 0u;
        *(_OWORD *)(a1 + 784) = 0u;
        *(_OWORD *)(a1 + 736) = 0u;
        *(_OWORD *)(a1 + 752) = 0u;
        *(_OWORD *)a1 = 0u;
        *(_OWORD *)(a1 + 16) = 0u;
        *(_BYTE *)(a1 + 32) = 0;
        *(_OWORD *)(a1 + 40) = 0u;
        *(_OWORD *)(a1 + 56) = 0u;
        *(_QWORD *)(a1 + 72) = 0;
        __asm { FMOV            V1.2D, #-1.0 }
        *(_OWORD *)(a1 + 80) = _Q1;
        *(_WORD *)(a1 + 96) = 0;
        *(_QWORD *)(a1 + 100) = 0;
        *(_DWORD *)(a1 + 107) = 0;
        *(_OWORD *)(a1 + 112) = 0u;
        *(_OWORD *)(a1 + 128) = 0u;
        *(_QWORD *)(a1 + 144) = 0;
        *(_QWORD *)(a1 + 152) = 0xBFF0000000000000;
        if (*(_BYTE *)(a1 + 176))
          *(_BYTE *)(a1 + 176) = 0;
        *(_BYTE *)(a1 + 109) = 1;
        v15 = gpsd::util::getMachContinuousTimeNs(MachContinuousTimeNs);
        *(_QWORD *)a1 = v15;
        *(double *)(a1 + 152) = (double)v15 - *(double *)(a1 + 808);
        v16 = (id *)GpsdPreferences::instance(0);
        v17 = GpsdPreferences::performanceReportIntervalSeconds(v16);
        v18 = (double)v17;
        if (v17 >= 1)
        {
          if (!*(_QWORD *)(a1 + 824))
          {
            global_queue = dispatch_get_global_queue(0, 0);
            v20 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, global_queue);
            *(_QWORD *)(a1 + 824) = v20;
            if (v20)
            {
              v21 = v20;
              v22 = qword_100100838;
              if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)v94 = 134217984;
                *(double *)&v94[4] = v18;
                _os_log_debug_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "GpsdPerformanceSummary,timer interval,%.2f", v94, 0xCu);
                v21 = *(NSObject **)(a1 + 824);
              }
              v23 = dispatch_walltime(0, (unint64_t)(v18 * 1000000000.0));
              dispatch_source_set_timer(v21, v23, (unint64_t)(v18 * 1000000000.0), 0x1DCD6500uLL);
              v24 = *(NSObject **)(a1 + 824);
              *(_QWORD *)v94 = _NSConcreteStackBlock;
              *(_QWORD *)&v94[8] = 3221225472;
              *(_QWORD *)&v94[16] = sub_100025D44;
              *(_QWORD *)&v94[24] = &unk_1000F0D30;
              *(_QWORD *)v95 = a1;
              dispatch_source_set_event_handler(v24, v94);
              dispatch_resume(*(dispatch_object_t *)(a1 + 824));
            }
          }
          goto LABEL_111;
        }
        v74 = qword_100100838;
        if (!os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO))
          goto LABEL_111;
        *(_DWORD *)v94 = 134349056;
        *(double *)&v94[4] = v18;
        v75 = "GpsdPerformanceSummary,disabled due to invalid timer interval,%{public}.2f";
        v76 = v74;
        v77 = OS_LOG_TYPE_INFO;
        v78 = 12;
        goto LABEL_110;
      case 2:
        v6 = (std::mutex *)(a1 + 832);
        std::mutex::lock((std::mutex *)(a1 + 832));
        v34 = *(NSObject **)(a1 + 824);
        if (v34)
        {
          dispatch_source_cancel(v34);

          *(_QWORD *)(a1 + 824) = 0;
          sub_1000045E0(a1);
        }
        *(_BYTE *)(a1 + 109) = 0;
        if (*(_BYTE *)(GpsdPlatformInfo::instance(0) + 60) && *(_BYTE *)(a1 + 176))
        {
          Current = CFAbsoluteTimeGetCurrent();
          v36 = *(_QWORD *)(GpsdPlatformInfo::instance(0) + 56);
          if ((v36 & 0xFF00000000) == 0)
            sub_1000267AC();
          v37 = (int)(Current + -5.0 + 662342413.0) / 604800;
          v38 = qword_100100838;
          if (v37 <= (int)v36)
          {
            v41 = (gpsd::util *)os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR);
            if ((_DWORD)v41)
            {
              *(_DWORD *)v94 = 67175169;
              *(_DWORD *)&v94[4] = v37 - v36;
              *(_WORD *)&v94[8] = 1025;
              *(_DWORD *)&v94[10] = (int)(Current + -5.0 + 662342413.0) / 604800;
              *(_WORD *)&v94[14] = 1025;
              *(_DWORD *)&v94[16] = v36;
              _os_log_error_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "#clk,invalidAge,week,%{private}d,now,%{private}d,born,%{private}d", v94, 0x14u);
            }
          }
          else
          {
            if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
            {
              v39 = *(_QWORD *)(a1 + 160);
              v40 = *(_QWORD *)(a1 + 168);
              *(_DWORD *)v94 = 67175169;
              *(_DWORD *)&v94[4] = v37 - v36;
              *(_WORD *)&v94[8] = 2050;
              *(_QWORD *)&v94[10] = v39;
              *(_WORD *)&v94[18] = 2050;
              *(_QWORD *)&v94[20] = v40;
              _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#clk,ca,ageWeek,%{private}d,offsetPpb,%{public}.2f,uncPpb,%{public}.2f", v94, 0x1Cu);
            }
            *(_QWORD *)v94 = _NSConcreteStackBlock;
            *(_QWORD *)&v94[8] = 3221225472;
            *(_QWORD *)&v94[16] = sub_100024144;
            *(_QWORD *)&v94[24] = &unk_1000F0D90;
            *(_QWORD *)v95 = a1;
            *(_DWORD *)&v95[8] = v37 - v36;
            v41 = (gpsd::util *)AnalyticsSendEventLazy(CFSTR("com.apple.gpsd.clock_frequency"), v94);
          }
        }
        else
        {
          v71 = qword_100100838;
          v41 = (gpsd::util *)os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v41)
          {
            v72 = (unint64_t)*(unsigned __int8 *)(GpsdPlatformInfo::instance(0) + 60) << 32 != 0;
            v73 = *(unsigned __int8 *)(a1 + 176);
            *(_DWORD *)v94 = 67240448;
            *(_DWORD *)&v94[4] = v72;
            *(_WORD *)&v94[8] = 1026;
            *(_DWORD *)&v94[10] = v73;
            _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "#clk,ca,skip,bornWeekKnown,%{public}d,hasOffset,%{public}d", v94, 0xEu);
          }
        }
        *(double *)(a1 + 808) = (double)gpsd::util::getMachContinuousTimeNs(v41) * 0.000000001;
        goto LABEL_111;
      case 8:
        v6 = (std::mutex *)(a1 + 832);
        std::mutex::lock((std::mutex *)(a1 + 832));
        v44 = *(_QWORD *)(a2 + 24);
        if (!v44)
          v44 = *(_QWORD *)(proto::gpsd::Request::default_instance_ + 24);
        if (*(_QWORD *)(a1 + 464))
        {
          v45 = *(double *)(a1 + 352);
          v46 = *(double *)(a1 + 360);
          if (sub_100025DD0(a1 + 264) && *(float *)(a1 + 272) < 1000000000.0 && sqrt(v46 * v46 + v45 * v45) < 2000.0)
          {
            v47 = *(_QWORD *)(v44 + 24);
            v48 = *(_QWORD *)(a1 + 464);
            if (v47 - v48 <= 0)
              v49 = v47 - v48 > -2000000000;
            else
              v49 = v47 - v48 < 2000000000;
            if (v49)
            {
              v50 = *(double **)(v44 + 8);
              if (v50)
              {
                v51 = *(double *)(a1 + 312);
                v52 = v50[1] - v51;
                v53 = *(_QWORD *)(v44 + 8);
              }
              else
              {
                v53 = *(_QWORD *)(proto::gpsd::InjectAssistancePosition::default_instance_ + 8);
                v51 = *(double *)(a1 + 312);
                v52 = *(double *)(v53 + 8) - v51;
              }
              v81 = *(double *)(a1 + 344);
              v82 = v52 * 111000.0;
              *(double *)(a1 + 488) = v52 * 111000.0;
              v83 = *(double *)(v53 + 16);
              v84 = cos(v51 * 0.0174532925) * 111321.0 * (v83 - *(double *)(a1 + 320));
              *(double *)(a1 + 496) = v84;
              v85 = v50;
              if (!v50)
                v85 = *(double **)(proto::gpsd::InjectAssistancePosition::default_instance_ + 8);
              v86 = sqrt((v82 * v82 + v84 * v84)/ (v85[7] * v85[7]+ v85[6] * v85[6]+ *(double *)(a1 + 360) * *(double *)(a1 + 360)+ *(double *)(a1 + 352) * *(double *)(a1 + 352)));
              *(double *)(a1 + 512) = v86;
              if (v81 >= 1000.0)
              {
                *(_QWORD *)(a1 + 520) = 0;
                v88 = 0.0;
              }
              else
              {
                if (!v50)
                  v50 = *(double **)(proto::gpsd::InjectAssistancePosition::default_instance_ + 8);
                v87 = v50[3] - *(double *)(a1 + 328);
                *(double *)(a1 + 504) = v87;
                v88 = sqrt(v87 * v87 / (v81 * v81 + v50[5] * v50[5]));
                *(double *)(a1 + 520) = v88;
              }
              v89 = *(_DWORD *)(v44 + 16);
              *(_DWORD *)(a1 + 528) = v89;
              v90 = qword_100100838;
              if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
              {
                v93 = *(_QWORD *)(a1 + 504);
                *(_DWORD *)v94 = 134219264;
                *(double *)&v94[4] = v82;
                *(_WORD *)&v94[12] = 2048;
                *(double *)&v94[14] = v84;
                *(_WORD *)&v94[22] = 2048;
                *(_QWORD *)&v94[24] = v93;
                *(_WORD *)v95 = 2048;
                *(double *)&v95[2] = v86;
                *(_WORD *)&v95[10] = 2048;
                v96 = v88;
                v97 = 1024;
                v98 = v89;
                _os_log_debug_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_DEBUG, "PerfCpi,deltaNorth,%.1f,deltaEast,%.1f,deltaVert,%.1f,deltaHorizNorm,%.2f,deltaVertNorm,%.2f,type,%d", v94, 0x3Au);
              }
            }
            else
            {
              v80 = qword_100100830;
              if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)v94 = 134349312;
                *(_QWORD *)&v94[4] = v48;
                *(_WORD *)&v94[12] = 2050;
                *(_QWORD *)&v94[14] = v47;
                _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEFAULT, "PerfWarning,fix and CPI timestamp mismatch,%{public}llu,%{public}llu", v94, 0x16u);
              }
            }
          }
        }
        v91 = *(unsigned int *)(v44 + 16);
        if (v91 <= 3)
        {
          ++*(_DWORD *)(a1 + 4 * v91 + 532);
          goto LABEL_111;
        }
        v92 = qword_100100830;
        if (!os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
          goto LABEL_111;
        *(_DWORD *)v94 = 67240192;
        *(_DWORD *)&v94[4] = v91;
        v75 = "PerfWarning,bad_index,cpiType,%{public}d";
        v76 = v92;
        v77 = OS_LOG_TYPE_DEFAULT;
        v78 = 8;
        goto LABEL_110;
      case 9:
        v6 = (std::mutex *)(a1 + 832);
        std::mutex::lock((std::mutex *)(a1 + 832));
        v54 = *(_QWORD **)(a2 + 32);
        if (!v54)
          v54 = *(_QWORD **)(proto::gpsd::Request::default_instance_ + 32);
        if (!*(_QWORD *)(a1 + 120))
        {
          *(_QWORD *)(a1 + 120) = v54[1];
          *(_QWORD *)(a1 + 112) = v54[3];
          v55 = (double)(unint64_t)v54[2] * 0.000001;
          *(float *)(a1 + 128) = v55;
        }
        goto LABEL_111;
      case 10:
        v6 = (std::mutex *)(a1 + 832);
        std::mutex::lock((std::mutex *)(a1 + 832));
        v56 = *(_QWORD *)(a2 + 120);
        if (!v56)
          v56 = *(_QWORD *)(proto::gpsd::Request::default_instance_ + 120);
        v57 = *(_QWORD *)(v56 + 8);
        v58 = *(char *)(v57 + 23);
        if (v58 >= 0)
          v59 = *(gpsd::util **)(v56 + 8);
        else
          v59 = *(gpsd::util **)v57;
        if (v58 >= 0)
          v60 = (const void *)*(unsigned __int8 *)(v57 + 23);
        else
          v60 = *(const void **)(v57 + 8);
        v61 = gpsd::util::truncatedSha256(v59, v60);
        *(_DWORD *)(a1 + 100) = v61;
        v31 = qword_100100838;
        if (!os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
          goto LABEL_111;
        v62 = *(_QWORD *)(v56 + 8);
        if (*(char *)(v62 + 23) < 0)
          v63 = *(_QWORD *)(v62 + 8);
        else
          v63 = *(unsigned __int8 *)(v62 + 23);
        *(_DWORD *)v94 = 67240448;
        *(_DWORD *)&v94[4] = v61;
        *(_WORD *)&v94[8] = 2050;
        *(_QWORD *)&v94[10] = v63;
        v75 = "#ee,sha,0x%{public}X,sz,%{public}zu";
        goto LABEL_90;
      case 11:
        v6 = (std::mutex *)(a1 + 832);
        std::mutex::lock((std::mutex *)(a1 + 832));
        v25 = *(_QWORD *)(a2 + 128);
        if (!v25)
          v25 = *(_QWORD *)(proto::gpsd::Request::default_instance_ + 128);
        v26 = *(_QWORD *)(v25 + 8);
        v27 = *(char *)(v26 + 23);
        if (v27 >= 0)
          v28 = *(gpsd::util **)(v25 + 8);
        else
          v28 = *(gpsd::util **)v26;
        if (v27 >= 0)
          v29 = (const void *)*(unsigned __int8 *)(v26 + 23);
        else
          v29 = *(const void **)(v26 + 8);
        v30 = gpsd::util::truncatedSha256(v28, v29);
        *(_DWORD *)(a1 + 104) = v30;
        v31 = qword_100100838;
        if (!os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
          goto LABEL_111;
        v32 = *(_QWORD *)(v25 + 8);
        if (*(char *)(v32 + 23) < 0)
          v33 = *(_QWORD *)(v32 + 8);
        else
          v33 = *(unsigned __int8 *)(v32 + 23);
        *(_DWORD *)v94 = 67240448;
        *(_DWORD *)&v94[4] = v30;
        *(_WORD *)&v94[8] = 2050;
        *(_QWORD *)&v94[10] = v33;
        v75 = "#rti,sha,0x%{public}X,sz,%{public}zu";
LABEL_90:
        v76 = v31;
        v77 = OS_LOG_TYPE_DEFAULT;
        v78 = 18;
        goto LABEL_110;
      case 16:
        v6 = (std::mutex *)(a1 + 832);
        std::mutex::lock((std::mutex *)(a1 + 832));
        v42 = *(_QWORD *)(a2 + 64);
        if (!v42)
          v42 = *(_QWORD *)(proto::gpsd::Request::default_instance_ + 64);
        if (!*(_QWORD *)(a1 + 464)
          || !sub_100025DD0(a1 + 264)
          || *(float *)(a1 + 272) >= 1000000000.0
          || *(double *)(a1 + 344) >= 1000.0)
        {
          goto LABEL_111;
        }
        if ((*(_DWORD *)(v42 + 36) & 7) != 7)
          goto LABEL_111;
        v64 = *(double *)(v42 + 24);
        if (v64 >= 1000.0)
          goto LABEL_111;
        v65 = *(_QWORD *)(v42 + 8);
        v66 = *(_QWORD *)(a1 + 464);
        if (v65 - v66 <= 0)
          v67 = v65 - v66 > -2000000000;
        else
          v67 = v65 - v66 < 2000000000;
        if (v67)
        {
          v68 = *(double *)(v42 + 16) - *(double *)(a1 + 328);
          v69 = sqrt(v68 * v68 / (*(double *)(a1 + 344) * *(double *)(a1 + 344) + v64 * v64));
          *(double *)(a1 + 472) = v68;
          *(double *)(a1 + 480) = v69;
          v70 = qword_100100838;
          if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)v94 = 134218240;
            *(double *)&v94[4] = v68;
            *(_WORD *)&v94[12] = 2048;
            *(double *)&v94[14] = v69;
            _os_log_debug_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEBUG, "PerfDem,delta,%.1f,deltaNorm,%.2f", v94, 0x16u);
          }
        }
        else
        {
          v79 = qword_100100830;
          if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v94 = 134349312;
            *(_QWORD *)&v94[4] = v66;
            *(_WORD *)&v94[12] = 2050;
            *(_QWORD *)&v94[14] = v65;
            v75 = "PerfWarning,fix and DEM timestamp mismatch,%{public}llu,%{public}llu";
            v76 = v79;
            v77 = OS_LOG_TYPE_DEFAULT;
            v78 = 22;
LABEL_110:
            _os_log_impl((void *)&_mh_execute_header, v76, v77, v75, v94, v78);
          }
        }
LABEL_111:
        std::mutex::unlock(v6);
        break;
      default:
        return;
    }
  }
}

void sub_100014EF8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100014F20(uint64_t a1, int *a2)
{
  std::mutex *v4;
  CLP::LogEntry::LogEntry *v5;
  uint64_t v6;
  proto::gpsd::Response *v7;
  NSObject *v8;
  ProtobufLogger *v9;
  gpsd::util *v10;
  int64_t v11;
  unsigned int v12;
  double v13;
  NSObject *v14;
  _BYTE *v15;
  NSObject *v16;
  NSObject *v17;
  _BYTE *v18;
  uint64_t v19;
  void *v20;
  NSObject *v21;
  xpc_object_t v22;
  _BYTE *v23;
  void **v24;
  NSObject *v25;
  void *v26[2];
  char v27;
  void *v28[2];
  char v29;
  void *v30[2];
  char v31;
  void *v32[2];
  char v33;
  uint8_t v34[4];
  void **v35;
  _BYTE v36[18];
  __int16 v37;
  const char *v38;
  void *__p;
  char v40;
  uint64_t v41;
  uint8_t buf[4];
  double v43;
  __int16 v44;
  _BYTE *v45;

  v4 = (std::mutex *)(a1 + 40);
  std::mutex::lock((std::mutex *)(a1 + 40));
  if (*(_QWORD *)(a1 + 104) || *(_BYTE *)(a1 + 128))
  {
    v5 = CLP::LogEntry::LogEntry::LogEntry((CLP::LogEntry::LogEntry *)buf);
    v6 = sub_10003AE50((uint64_t)v5);
    *(_DWORD *)(v6 + 52) |= 8u;
    v7 = *(proto::gpsd::Response **)(v6 + 32);
    if (!v7)
      operator new();
    if (v7 != (proto::gpsd::Response *)a2)
    {
      (*(void (**)(proto::gpsd::Response *))(*(_QWORD *)v7 + 32))(v7);
      proto::gpsd::Response::MergeFrom(v7, (const proto::gpsd::Response *)a2);
    }
    if (*(_BYTE *)(a1 + 128) && (a2[4] & 0xFFFFFFFE) != 0xE)
    {
      sub_10003B048((uint64_t)v36);
      GpsdProtobufPrintingUtilities::printMessageInJson(v6, v36);
      v8 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
      {
        std::stringbuf::str(v32, &v36[8]);
        v24 = v33 >= 0 ? v32 : (void **)v32[0];
        *(_DWORD *)v34 = 136315138;
        v35 = v24;
        _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "ProtoJson: %s", v34, 0xCu);
        if (v33 < 0)
          operator delete(v32[0]);
      }
      if (v40 < 0)
        operator delete(__p);
      std::streambuf::~streambuf(&v36[8]);
      std::ios::~ios(&v41);
    }
    v9 = *(ProtobufLogger **)(a1 + 104);
    if (v9)
      ProtobufLogger::log(v9, (const CLP::LogEntry::LogEntry *)buf);
    CLP::LogEntry::LogEntry::~LogEntry((CLP::LogEntry::LogEntry *)buf);
  }
  if (*(_QWORD *)(a1 + 16))
  {
    v10 = (gpsd::util *)(*(uint64_t (**)(int *))(*(_QWORD *)a2 + 72))(a2);
    v11 = gpsd::util::getMachContinuousTimeNs(v10) - *(_QWORD *)(a1 + 120);
    v12 = a2[4];
    if (v11 >= 200000001)
    {
      v13 = (double)v11 * 0.000001;
      if ((unint64_t)v11 < 0x2540BE401)
      {
        if ((unint64_t)v11 > 0xB2D05E00 || v12 > 0x33 || ((0x8000400000002uLL >> v12) & 1) == 0)
        {
          v17 = qword_100100830;
          if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
          {
            gpsd::util::stringify(v12, (uint64_t)v36);
            if (SBYTE3(v38) >= 0)
              v18 = v36;
            else
              v18 = *(_BYTE **)v36;
            *(_DWORD *)buf = 134349314;
            v43 = v13;
            v44 = 2082;
            v45 = v18;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#gpsdClientManager,excessive request-response delay,%{public}.2f,ms,%{public}s", buf, 0x16u);
LABEL_34:
            if (SBYTE3(v38) < 0)
              operator delete(*(void **)v36);
          }
        }
      }
      else
      {
        v14 = qword_100100838;
        if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
        {
          gpsd::util::stringify(v12, (uint64_t)v36);
          if (SBYTE3(v38) >= 0)
            v15 = v36;
          else
            v15 = *(_BYTE **)v36;
          *(_DWORD *)buf = 134349314;
          v43 = v13;
          v44 = 2082;
          v45 = v15;
          _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#gpsdClientManager,excessive request-response delay,%{public}.2f,ms,%{public}s", buf, 0x16u);
          goto LABEL_34;
        }
      }
    }
    v19 = *(_QWORD *)(a1 + 112);
    if (v19)
      sub_100027748(v19, a2[4], (int)v10);
    v20 = malloc_type_malloc((int)v10, 0x9A3FA7B1uLL);
    if (!v20)
    {
      v25 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v36 = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "#gpsdClientManager,Response memory allocation failed", v36, 2u);
        v25 = qword_100100838;
      }
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v36 = 136446722;
        *(_QWORD *)&v36[4] = "/Library/Caches/com.apple.xbs/Sources/CoreGPS/Sources/Daemon/GpsdClientManager.mm";
        *(_WORD *)&v36[12] = 1026;
        *(_DWORD *)&v36[14] = 165;
        v37 = 2082;
        v38 = "handleResponse";
        _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: assertion failure in %{public}s", v36, 0x1Cu);
      }
      sub_100025B58(v30, "assert");
      sub_100025B58(v28, "handleResponse");
      sub_100025B58(v26, "#gpsdClientManager,Response memory allocation failed");
      gpsd::util::triggerDiagnosticReport((uint64_t)v30, (__int128 *)v28, (__int128 *)v26);
      if (v27 < 0)
        operator delete(v26[0]);
      if (v29 < 0)
        operator delete(v28[0]);
      if (v31 < 0)
        operator delete(v30[0]);
      __assert_rtn("handleResponse", "GpsdClientManager.mm", 165, "false && \"#gpsdClientManager,Response memory allocation failed\"");
    }
    if ((v12 & 0xFFFFFFFE) != 0xE)
    {
      v21 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
      {
        gpsd::util::stringify(v12, (uint64_t)v36);
        if (SBYTE3(v38) >= 0)
          v23 = v36;
        else
          v23 = *(_BYTE **)v36;
        *(_DWORD *)buf = 136315138;
        v43 = *(double *)&v23;
        _os_log_debug_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "#gpsdClientManager,sendResponse,%s", buf, 0xCu);
        if (SBYTE3(v38) < 0)
          operator delete(*(void **)v36);
      }
    }
    wireless_diagnostics::google::protobuf::MessageLite::SerializeToArray((wireless_diagnostics::google::protobuf::MessageLite *)a2, v20, (int)v10);
    v22 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_data(v22, "gpsdResponse", v20, (int)v10);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v22);
    xpc_release(v22);
    free(v20);
    goto LABEL_42;
  }
  v16 = qword_100100830;
  if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v36 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#gpsdClientManager,No remote connection to send response", v36, 2u);
  }
LABEL_42:
  std::mutex::unlock(v4);
}

void sub_1000155BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::mutex *v34;

  std::mutex::unlock(v34);
  _Unwind_Resume(a1);
}

double sub_100015660(gpsd::util *a1)
{
  return (double)gpsd::util::getMachContinuousTimeNs(a1) * 0.000000001;
}

unint64_t gpsd::util::getMachContinuousTimeNs(gpsd::util *this)
{
  unsigned __int8 v1;
  uint64_t v2;
  char v3;

  v1 = atomic_load((unsigned __int8 *)&qword_100100A48);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_100100A48))
  {
    sub_1000C5FEC();
    __cxa_guard_release(&qword_100100A48);
  }
  v2 = mach_continuous_time();
  v3 = 8;
  if (!byte_100100A88)
    v3 = 0;
  return ((v2 >> v3) * qword_100100A78 / qword_100100A80) << v3;
}

void sub_100015708(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100100A48);
  _Unwind_Resume(a1);
}

uint64_t proto::gpsd::Response::ByteSize(proto::gpsd::Response *this, unint64_t a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;

  LOBYTE(v3) = *((_BYTE *)this + 28);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_21;
  }
  if ((*((_BYTE *)this + 28) & 1) == 0)
  {
    v4 = 0;
    if ((*((_BYTE *)this + 28) & 2) == 0)
      goto LABEL_14;
    goto LABEL_13;
  }
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
  if ((v5 & 0x80000000) != 0)
  {
    v4 = 11;
    if ((v3 & 2) != 0)
      goto LABEL_13;
  }
  else
  {
    if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *((_DWORD *)this + 7);
      if ((v3 & 2) == 0)
        goto LABEL_14;
      goto LABEL_13;
    }
    v4 = 2;
    if ((v3 & 2) != 0)
    {
LABEL_13:
      v4 = v4
         + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 1), a2)+ 1;
      v3 = *((_DWORD *)this + 7);
    }
  }
LABEL_14:
  if ((v3 & 4) != 0)
  {
    v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
    if ((v6 & 0x80000000) != 0)
    {
      v7 = 11;
    }
    else if (v6 >= 0x80)
    {
      v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    }
    else
    {
      v7 = 2;
    }
    v4 = (v7 + v4);
  }
LABEL_21:
  *((_DWORD *)this + 6) = v4;
  return v4;
}

void gpsd::util::stringify(int __val@<W0>, uint64_t a2@<X8>)
{
  const std::string::value_type *v4;
  uint64_t v5;
  std::string *v6;
  std::string::size_type v7;
  char v8;
  std::string __p;
  _QWORD v10[2];

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v4 = "START";
  switch(__val)
  {
    case 0:
      v4 = "PROTO_DEFAULT";
      goto LABEL_62;
    case 1:
      goto LABEL_62;
    case 2:
      v4 = "STOP";
      goto LABEL_62;
    case 3:
      v4 = "RESET";
      goto LABEL_62;
    case 4:
      v4 = "CLEAR";
      goto LABEL_62;
    case 5:
      v4 = "DELETE_GNSS_DATA";
      goto LABEL_62;
    case 6:
      v4 = "SET_PVTM_REPORT";
      goto LABEL_62;
    case 7:
      v4 = "SET_NMEA_HANDLER";
      goto LABEL_62;
    case 8:
      v4 = "INJECT_ASSISTANCE_POSITION";
      goto LABEL_62;
    case 9:
      v4 = "INJECT_ASSISTANCE_TIME";
      goto LABEL_62;
    case 10:
      v4 = "INJECT_ASSISTANCE_FILE";
      goto LABEL_62;
    case 11:
      v4 = "INJECT_RTI_FILE";
      goto LABEL_62;
    case 12:
      v4 = "INJECT_SVID_BLOCKLIST";
      goto LABEL_62;
    case 13:
      v4 = "SET_ASSISTANCE_PRESSURE";
      goto LABEL_62;
    case 14:
      v4 = "SET_ASSISTANCE_ACCEL";
      goto LABEL_62;
    case 15:
      v4 = "SET_ASSISTANCE_GYRO";
      goto LABEL_62;
    case 16:
      v4 = "SET_ASSISTANCE_DEM";
      goto LABEL_62;
    case 17:
      v4 = "SET_ASSISTANCE_MAP_VECTOR";
      goto LABEL_62;
    case 18:
      v4 = "SET_ASSISTANCE_MOTION_ACTIVITY_CONTEXT";
      goto LABEL_62;
    case 19:
      v4 = "SET_ASSISTANCE_MOUNT_STATE";
      goto LABEL_62;
    case 20:
      v4 = "SET_ASSISTANCE_SIGNAL_ENVIRONMENT";
      goto LABEL_62;
    case 21:
      v4 = "SET_ASSISTANCE_SPEED_CONSTRAINT";
      goto LABEL_62;
    case 22:
      v4 = "SET_ASSISTANCE_ALONG_TRACK_VELOCITY";
      goto LABEL_62;
    case 23:
      v4 = "SET_POWER_REPORT";
      goto LABEL_62;
    case 24:
      v4 = "SET_CONFIG_SIMULATOR_MODE";
      goto LABEL_62;
    case 25:
      v4 = "SET_CONFIG_ENABLE_GNSS_CONSTELLATIONS";
      goto LABEL_62;
    case 26:
      v4 = "SET_CONFIG_DUTY_CYCLING";
      goto LABEL_62;
    case 27:
      v4 = "SET_TIME_TRANSFER_PULSE";
      goto LABEL_62;
    case 28:
      v4 = "CLEAN_TIME_TRANSFER_PULSE";
      goto LABEL_62;
    case 29:
      v4 = "INJECT_LTL_INFO";
      goto LABEL_62;
    case 30:
      v4 = "CNTIN_STATUS_UPDATE";
      goto LABEL_62;
    case 31:
      v4 = "SET_THERMAL_RISK_STATE";
      goto LABEL_62;
    case 32:
      v4 = "PING";
      goto LABEL_62;
    case 34:
      v4 = "BUILD_DEVICE";
      goto LABEL_62;
    case 35:
      v4 = "TERMINATION_IMMINENT";
      goto LABEL_62;
    case 36:
      v4 = "EXIT";
      goto LABEL_62;
    case 37:
      v4 = "FORCE_CLEAR_ALL_NV";
      goto LABEL_62;
    case 38:
      v4 = "SET_CONFIG_RF_BAND_ENABLE";
      goto LABEL_62;
    case 51:
      v4 = "START_EMERGENCY_PREEMPTIVE_SESSION";
      goto LABEL_62;
    case 52:
      v4 = "STOP_EMERGENCY_PREEMPTIVE_SESSION";
      goto LABEL_62;
    case 53:
      v4 = "SET_EMERGENCY_CONFIG";
      goto LABEL_62;
    case 54:
      v4 = "SET_EMERGENCY_SESSION_SUMMARY_REPORT";
      goto LABEL_62;
    case 55:
      v4 = "ENTER_EMERGENCY_MODE";
      goto LABEL_62;
    case 56:
      v4 = "EXIT_EMERGENCY_MODE";
      goto LABEL_62;
    case 60:
      v4 = "START_EMERGENCY_POSITION";
      goto LABEL_62;
    case 61:
      v4 = "STOP_EMERGENCY_POSITION";
      goto LABEL_62;
    case 62:
      v4 = "SET_EMERGENCY_POSITION_REPORT";
      goto LABEL_62;
    case 63:
      v4 = "SET_EMERGENCY_MEASUREMENT_REPORT";
      goto LABEL_62;
    case 64:
      v4 = "SET_NW_ASSISTANCE_NEEDED_REPORT";
      goto LABEL_62;
    case 65:
      v4 = "SET_NW_ASSISTANCE_GPS_REF_TIME";
      goto LABEL_62;
    case 66:
      v4 = "SET_NW_ASSISTANCE_REF_POSITION";
      goto LABEL_62;
    case 67:
      v4 = "SET_NW_ASSISTANCE_GPS_EPHEMERIS";
      goto LABEL_62;
    case 68:
      v4 = "SET_NW_ASSISTANCE_GPS_ACQUISITION";
      goto LABEL_62;
    case 69:
      v4 = "INJECT_FT_ASSISTANCE";
      goto LABEL_62;
    case 70:
      v4 = "DECODE_SUPL_INIT";
      goto LABEL_62;
    case 71:
      v4 = "SET_SUPL_INIT";
      goto LABEL_62;
    case 72:
      v4 = "SET_SUPL_LOCATIONID_NEEDED_REPORT";
      goto LABEL_62;
    case 73:
      v4 = "SET_SUPL_LOCATIONID";
      goto LABEL_62;
    case 74:
      v4 = "ABORT_SUPL_SESSION";
      goto LABEL_62;
    case 75:
      v4 = "SET_SUPL_SESSION_STATUS_REPORT";
      goto LABEL_62;
    case 76:
      v4 = "SET_SUPL_WLAN_MEAS";
LABEL_62:
      std::string::assign((std::string *)a2, v4);
      v5 = *(unsigned __int8 *)(a2 + 23);
      if (*(char *)(a2 + 23) < 0)
        v5 = *(_QWORD *)(a2 + 8);
      if (!v5)
        goto LABEL_65;
      return;
    default:
LABEL_65:
      std::to_string(&__p, __val);
      v6 = std::string::insert(&__p, 0, "unknown_");
      v7 = v6->__r_.__value_.__r.__words[0];
      v10[0] = v6->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v10 + 7) = *(std::string::size_type *)((char *)&v6->__r_.__value_.__r.__words[1] + 7);
      v8 = HIBYTE(v6->__r_.__value_.__r.__words[2]);
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      *(_QWORD *)a2 = v7;
      *(_QWORD *)(a2 + 8) = v10[0];
      *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v10 + 7);
      *(_BYTE *)(a2 + 23) = v8;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      return;
  }
}

void sub_100015BD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v14 + 23) < 0)
    operator delete(*(void **)v14);
  _Unwind_Resume(exception_object);
}

uint64_t gpsd::util::truncatedSha256(gpsd::util *this, const void *a2)
{
  uint64_t result;
  NSObject *v5;
  int v6;
  gpsd::util *v7;
  __int16 v8;
  const void *v9;
  unsigned __int8 md[4];

  if (CC_SHA256(this, (CC_LONG)a2, md))
    return bswap32(*(unsigned int *)md);
  v5 = qword_100100838;
  result = os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    v6 = 134218240;
    v7 = this;
    v8 = 2048;
    v9 = a2;
    _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#gpsdUtil,CC_SHA256 failed on,%p,%zu", (uint8_t *)&v6, 0x16u);
    return 0;
  }
  return result;
}

uint64_t sub_100015CE4(_DWORD *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unint64_t *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  unint64_t v9;
  char *v10;
  _BYTE *v11;
  char *v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  unsigned int v17;
  _BYTE *v18;
  unsigned int v19;
  _BYTE *v20;
  unint64_t v21;
  uint64_t result;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;

  v5 = (unint64_t *)(a1 + 2);
  while (2)
  {
    v6 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v6 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v10 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
        if ((unint64_t)v10 < v9 && (*v10 & 0x80000000) == 0)
        {
          *v5 = *v10;
          v11 = v10 + 1;
          *((_QWORD *)this + 1) = v11;
LABEL_24:
          a1[8] |= 1u;
          if ((unint64_t)v11 < v9 && *v11 == 16)
          {
            v12 = v11 + 1;
            *((_QWORD *)this + 1) = v12;
            goto LABEL_27;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
        if ((_DWORD)result)
        {
          v11 = (_BYTE *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
          goto LABEL_24;
        }
        break;
      case 2u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v12 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
LABEL_27:
        v25 = 0;
        if ((unint64_t)v12 >= v9 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v25);
          if (!(_DWORD)result)
            return result;
          v17 = v25;
        }
        else
        {
          v17 = *v12;
          *((_QWORD *)this + 1) = v12 + 1;
        }
        if (v17 <= 9)
        {
          a1[8] |= 2u;
          a1[4] = v17;
        }
        v18 = (_BYTE *)*((_QWORD *)this + 1);
        v13 = *((_QWORD *)this + 2);
        if ((unint64_t)v18 >= v13 || *v18 != 24)
          continue;
        v14 = v18 + 1;
        *((_QWORD *)this + 1) = v14;
LABEL_37:
        v24 = 0;
        if ((unint64_t)v14 >= v13 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v24);
          if (!(_DWORD)result)
            return result;
          v19 = v24;
        }
        else
        {
          v19 = *v14;
          *((_QWORD *)this + 1) = v14 + 1;
        }
        if (v19 <= 4)
        {
          a1[8] |= 4u;
          a1[5] = v19;
        }
        v20 = (_BYTE *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        if ((unint64_t)v20 >= v15 || *v20 != 32)
          continue;
        v16 = v20 + 1;
        *((_QWORD *)this + 1) = v16;
LABEL_47:
        v23 = 0;
        if ((unint64_t)v16 >= v15 || *v16 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v23);
          if (!(_DWORD)result)
            return result;
          v21 = v23;
        }
        else
        {
          v21 = *v16;
          *((_QWORD *)this + 1) = v16 + 1;
        }
        if (proto::gnss::Reliability_IsValid((proto::gnss *)v21))
        {
          a1[8] |= 8u;
          a1[6] = v21;
        }
        if (*((_QWORD *)this + 1) != *((_QWORD *)this + 2)
          || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
        {
          continue;
        }
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      case 3u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v14 = (char *)*((_QWORD *)this + 1);
        v13 = *((_QWORD *)this + 2);
        goto LABEL_37;
      case 4u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v16 = (char *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        goto LABEL_47;
      default:
        v8 = TagFallback & 7;
LABEL_18:
        if (v8 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

BOOL proto::gnss::Reliability_IsValid(proto::gnss *this)
{
  unsigned int v1;
  _BOOL8 result;

  v1 = this;
  result = 1;
  if (v1 > 0x32 || ((1 << v1) & 0x4000002000403) == 0)
    return v1 == 75;
  return result;
}

uint64_t sub_100015FF8(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unint64_t *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  proto::gnss::Position *v9;
  char *v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  BOOL v21;
  int v22;
  _BYTE *v23;
  unsigned int v24;
  uint64_t result;
  _BYTE *v26;
  unsigned int v27;
  _BYTE *v28;
  unsigned __int8 *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;

  v5 = (unint64_t *)(a1 + 24);
  while (2)
  {
    v6 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v6 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_20;
        *(_DWORD *)(a1 + 36) |= 1u;
        v9 = *(proto::gnss::Position **)(a1 + 8);
        if (!v9)
          operator new();
        v32 = 0;
        v10 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v10 >= *((_QWORD *)this + 2) || *v10 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v32))return 0;
        }
        else
        {
          v32 = *v10;
          *((_QWORD *)this + 1) = v10 + 1;
        }
        v16 = *((_DWORD *)this + 14);
        v17 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v16 + 1;
        if (v16 >= v17)
          return 0;
        v18 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v32);
        if (!proto::gnss::Position::MergePartialFromCodedStream(v9, this, v19) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v18);
        v20 = *((_DWORD *)this + 14);
        v21 = __OFSUB__(v20, 1);
        v22 = v20 - 1;
        if (v22 < 0 == v21)
          *((_DWORD *)this + 14) = v22;
        v23 = (_BYTE *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        if ((unint64_t)v23 >= v11 || *v23 != 16)
          continue;
        v12 = v23 + 1;
        *((_QWORD *)this + 1) = v12;
        goto LABEL_33;
      case 2u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v12 = (char *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
LABEL_33:
        v30 = 0;
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v30);
          if (!(_DWORD)result)
            return result;
          v24 = v30;
        }
        else
        {
          v24 = *v12;
          *((_QWORD *)this + 1) = v12 + 1;
        }
        if (v24 <= 3)
        {
          *(_DWORD *)(a1 + 36) |= 2u;
          *(_DWORD *)(a1 + 16) = v24;
        }
        v26 = (_BYTE *)*((_QWORD *)this + 1);
        v13 = *((_QWORD *)this + 2);
        if ((unint64_t)v26 >= v13 || *v26 != 24)
          continue;
        v14 = v26 + 1;
        *((_QWORD *)this + 1) = v14;
LABEL_43:
        v31 = 0;
        if ((unint64_t)v14 >= v13 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v31);
          if (!(_DWORD)result)
            return result;
          v27 = v31;
          v28 = (_BYTE *)*((_QWORD *)this + 1);
          v13 = *((_QWORD *)this + 2);
        }
        else
        {
          v27 = *v14;
          v28 = v14 + 1;
          *((_QWORD *)this + 1) = v28;
        }
        *(_BYTE *)(a1 + 20) = v27 != 0;
        *(_DWORD *)(a1 + 36) |= 4u;
        if ((unint64_t)v28 >= v13 || *v28 != 80)
          continue;
        v15 = v28 + 1;
        *((_QWORD *)this + 1) = v15;
LABEL_51:
        if ((unint64_t)v15 >= v13 || *v15 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
          if (!(_DWORD)result)
            return result;
          v29 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v13 = *((_QWORD *)this + 2);
        }
        else
        {
          *v5 = *v15;
          v29 = (unsigned __int8 *)(v15 + 1);
          *((_QWORD *)this + 1) = v29;
        }
        *(_DWORD *)(a1 + 36) |= 8u;
        if (v29 != (unsigned __int8 *)v13 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
          continue;
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        break;
      case 3u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v14 = (char *)*((_QWORD *)this + 1);
        v13 = *((_QWORD *)this + 2);
        goto LABEL_43;
      case 0xAu:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v15 = (char *)*((_QWORD *)this + 1);
        v13 = *((_QWORD *)this + 2);
        goto LABEL_51;
      default:
        v8 = TagFallback & 7;
LABEL_20:
        if (v8 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

uint64_t sub_100016374(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unint64_t *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  unint64_t v9;
  char *v10;
  char *v11;
  _BYTE *v12;
  unsigned int v13;
  uint64_t result;
  unsigned int v15;

  v5 = (unint64_t *)(a1 + 8);
  while (1)
  {
    while (1)
    {
      v6 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v6 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v8 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_16;
      v11 = (char *)*((_QWORD *)this + 1);
      v9 = *((_QWORD *)this + 2);
      if ((unint64_t)v11 >= v9 || *v11 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
        if (!(_DWORD)result)
          return result;
        v12 = (_BYTE *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
      }
      else
      {
        *v5 = *v11;
        v12 = v11 + 1;
        *((_QWORD *)this + 1) = v12;
      }
      *(_DWORD *)(a1 + 24) |= 1u;
      if ((unint64_t)v12 < v9 && *v12 == 16)
      {
        v10 = v12 + 1;
        *((_QWORD *)this + 1) = v10;
LABEL_24:
        v15 = 0;
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v15);
          if (!(_DWORD)result)
            return result;
          v13 = v15;
        }
        else
        {
          v13 = *v10;
          *((_QWORD *)this + 1) = v10 + 1;
        }
        if (v13 - 1 <= 3)
        {
          *(_DWORD *)(a1 + 24) |= 2u;
          *(_DWORD *)(a1 + 16) = v13;
        }
        if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      v8 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v10 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
        goto LABEL_24;
      }
    }
    else
    {
      v8 = TagFallback & 7;
    }
LABEL_16:
    if (v8 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_100016528(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unint64_t v7;
  char *v8;
  unsigned int v9;
  unsigned __int8 *v10;
  uint64_t result;
  unsigned int v12;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
      }
      if ((_DWORD)TagFallback != 8)
        break;
      v12 = 0;
      v8 = (char *)*((_QWORD *)this + 1);
      v7 = *((_QWORD *)this + 2);
      if ((unint64_t)v8 >= v7 || *v8 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v12);
        if (!(_DWORD)result)
          return result;
        v9 = v12;
        v10 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v7 = *((_QWORD *)this + 2);
      }
      else
      {
        v9 = *v8;
        v10 = (unsigned __int8 *)(v8 + 1);
        *((_QWORD *)this + 1) = v10;
      }
      *(_BYTE *)(a1 + 8) = v9 != 0;
      *(_DWORD *)(a1 + 16) |= 1u;
      if (v10 == (unsigned __int8 *)v7 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
  return 1;
}

uint64_t sub_100016644(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unint64_t *v5;
  unint64_t *v6;
  unint64_t *v7;
  char *v8;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v10;
  int v11;
  unint64_t v12;
  char *v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  _BYTE *v17;
  unsigned __int8 *v18;
  uint64_t result;

  v5 = (unint64_t *)(a1 + 8);
  v6 = (unint64_t *)(a1 + 16);
  v7 = (unint64_t *)(a1 + 24);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v8 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v8;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v8 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v10 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v14 = (char *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
        if ((unint64_t)v14 >= v12 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
          if (!(_DWORD)result)
            return result;
          v15 = (_BYTE *)*((_QWORD *)this + 1);
          v12 = *((_QWORD *)this + 2);
        }
        else
        {
          *v5 = *v14;
          v15 = v14 + 1;
          *((_QWORD *)this + 1) = v15;
        }
        *(_DWORD *)(a1 + 36) |= 1u;
        if ((unint64_t)v15 < v12 && *v15 == 16)
        {
          v16 = v15 + 1;
          *((_QWORD *)this + 1) = v16;
          goto LABEL_27;
        }
      }
      if (v10 != 2)
        break;
      v11 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_19;
      v16 = (char *)*((_QWORD *)this + 1);
      v12 = *((_QWORD *)this + 2);
LABEL_27:
      if ((unint64_t)v16 >= v12 || *v16 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v6);
        if (!(_DWORD)result)
          return result;
        v17 = (_BYTE *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
      }
      else
      {
        *v6 = *v16;
        v17 = v16 + 1;
        *((_QWORD *)this + 1) = v17;
      }
      *(_DWORD *)(a1 + 36) |= 2u;
      if ((unint64_t)v17 < v12 && *v17 == 24)
      {
        v13 = v17 + 1;
        *((_QWORD *)this + 1) = v13;
LABEL_35:
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v7);
          if (!(_DWORD)result)
            return result;
          v18 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v12 = *((_QWORD *)this + 2);
        }
        else
        {
          *v7 = *v13;
          v18 = (unsigned __int8 *)(v13 + 1);
          *((_QWORD *)this + 1) = v18;
        }
        *(_DWORD *)(a1 + 36) |= 4u;
        if (v18 == (unsigned __int8 *)v12
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if (v10 == 3)
    {
      v11 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v13 = (char *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
        goto LABEL_35;
      }
    }
    else
    {
      v11 = TagFallback & 7;
    }
LABEL_19:
    if (v11 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t proto::gpsd::InjectAssistanceFile::MergePartialFromCodedStream(proto::gpsd::InjectAssistanceFile *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  unint64_t v8;
  char *v9;
  void *v10;
  uint64_t result;
  _BYTE *v12;
  unsigned int v13;
  unsigned int v14;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
        *((_QWORD *)a2 + 1) = v5 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v7 = TagFallback & 7;
      if (v7 != 2)
        goto LABEL_21;
      *((_DWORD *)this + 6) |= 1u;
      v10 = (void *)*((_QWORD *)this + 1);
      if (v10 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(a2, v10);
      if (!(_DWORD)result)
        return result;
      v12 = (_BYTE *)*((_QWORD *)a2 + 1);
      v8 = *((_QWORD *)a2 + 2);
      if ((unint64_t)v12 < v8 && *v12 == 16)
      {
        v9 = v12 + 1;
        *((_QWORD *)a2 + 1) = v9;
LABEL_17:
        v14 = 0;
        if ((unint64_t)v9 >= v8 || *v9 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v14);
          if (!(_DWORD)result)
            return result;
          v13 = v14;
        }
        else
        {
          v13 = *v9;
          *((_QWORD *)a2 + 1) = v9 + 1;
        }
        if (v13 <= 2)
        {
          *((_DWORD *)this + 6) |= 2u;
          *((_DWORD *)this + 4) = v13;
        }
        if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
          && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      v7 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v9 = (char *)*((_QWORD *)a2 + 1);
        v8 = *((_QWORD *)a2 + 2);
        goto LABEL_17;
      }
    }
    else
    {
      v7 = TagFallback & 7;
    }
LABEL_21:
    if (v7 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t proto::gnss::Position::MergePartialFromCodedStream(proto::gnss::Position *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned int *v5;
  unint64_t *v6;
  char *v7;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v9;
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  unint64_t v17;
  _BYTE *v18;
  char *v19;
  _BYTE *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t result;
  unint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  unsigned int v29;
  unsigned int v30[2];

  v5 = (unsigned int *)((char *)this + 72);
  v6 = (unint64_t *)((char *)this + 80);
  while (2)
  {
    v7 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v7 >= *((_QWORD *)a2 + 2) || *v7 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
      *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      *((_QWORD *)a2 + 1) = v7 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v9 = TagFallback & 7;
        if (v9 != 1)
          goto LABEL_59;
        *(_QWORD *)v30 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v30) & 1) == 0)return 0;
        *((_QWORD *)this + 1) = *(_QWORD *)v30;
        *((_DWORD *)this + 24) |= 1u;
        v10 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v10 >= *((_QWORD *)a2 + 2) || *v10 != 17)
          continue;
        *((_QWORD *)a2 + 1) = v10 + 1;
        goto LABEL_15;
      case 2u:
        v9 = TagFallback & 7;
        if (v9 != 1)
          goto LABEL_59;
LABEL_15:
        *(_QWORD *)v30 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v30) & 1) == 0)return 0;
        *((_QWORD *)this + 2) = *(_QWORD *)v30;
        *((_DWORD *)this + 24) |= 2u;
        v11 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v11 >= *((_QWORD *)a2 + 2) || *v11 != 25)
          continue;
        *((_QWORD *)a2 + 1) = v11 + 1;
LABEL_20:
        *(_QWORD *)v30 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v30) & 1) == 0)return 0;
        *((_QWORD *)this + 3) = *(_QWORD *)v30;
        *((_DWORD *)this + 24) |= 4u;
        v12 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v12 >= *((_QWORD *)a2 + 2) || *v12 != 33)
          continue;
        *((_QWORD *)a2 + 1) = v12 + 1;
LABEL_25:
        *(_QWORD *)v30 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v30) & 1) == 0)return 0;
        *((_QWORD *)this + 4) = *(_QWORD *)v30;
        *((_DWORD *)this + 24) |= 8u;
        v13 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v13 >= *((_QWORD *)a2 + 2) || *v13 != 41)
          continue;
        *((_QWORD *)a2 + 1) = v13 + 1;
LABEL_30:
        *(_QWORD *)v30 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v30) & 1) == 0)return 0;
        *((_QWORD *)this + 5) = *(_QWORD *)v30;
        *((_DWORD *)this + 24) |= 0x10u;
        v14 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v14 >= *((_QWORD *)a2 + 2) || *v14 != 49)
          continue;
        *((_QWORD *)a2 + 1) = v14 + 1;
LABEL_35:
        *(_QWORD *)v30 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v30) & 1) == 0)return 0;
        *((_QWORD *)this + 6) = *(_QWORD *)v30;
        *((_DWORD *)this + 24) |= 0x20u;
        v15 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v15 >= *((_QWORD *)a2 + 2) || *v15 != 57)
          continue;
        *((_QWORD *)a2 + 1) = v15 + 1;
LABEL_40:
        *(_QWORD *)v30 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v30) & 1) == 0)return 0;
        *((_QWORD *)this + 7) = *(_QWORD *)v30;
        *((_DWORD *)this + 24) |= 0x40u;
        v16 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v16 >= *((_QWORD *)a2 + 2) || *v16 != 65)
          continue;
        *((_QWORD *)a2 + 1) = v16 + 1;
LABEL_45:
        *(_QWORD *)v30 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v30) & 1) != 0)
        {
          *((_QWORD *)this + 8) = *(_QWORD *)v30;
          *((_DWORD *)this + 24) |= 0x80u;
          v18 = (_BYTE *)*((_QWORD *)a2 + 1);
          v17 = *((_QWORD *)a2 + 2);
          if ((unint64_t)v18 < v17 && *v18 == 72)
          {
            v19 = v18 + 1;
            *((_QWORD *)a2 + 1) = v19;
LABEL_51:
            if ((unint64_t)v19 >= v17 || *v19 < 0)
            {
              result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
              if (!(_DWORD)result)
                return result;
              v20 = (_BYTE *)*((_QWORD *)a2 + 1);
              v17 = *((_QWORD *)a2 + 2);
            }
            else
            {
              *v5 = *v19;
              v20 = v19 + 1;
              *((_QWORD *)a2 + 1) = v20;
            }
            *((_DWORD *)this + 24) |= 0x100u;
            if ((unint64_t)v20 < v17 && *v20 == 80)
            {
              v21 = v20 + 1;
              *((_QWORD *)a2 + 1) = v21;
LABEL_68:
              v30[0] = 0;
              if ((unint64_t)v21 >= v17 || *v21 < 0)
              {
                result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v30);
                if (!(_DWORD)result)
                  return result;
                v26 = v30[0];
              }
              else
              {
                v26 = *v21;
                *((_QWORD *)a2 + 1) = v21 + 1;
              }
              if (proto::gnss::Reliability_IsValid((proto::gnss *)v26))
              {
                *((_DWORD *)this + 24) |= 0x200u;
                *((_DWORD *)this + 19) = v26;
              }
              v27 = (_BYTE *)*((_QWORD *)a2 + 1);
              v22 = *((_QWORD *)a2 + 2);
              if ((unint64_t)v27 < v22 && *v27 == 88)
              {
                v23 = v27 + 1;
                *((_QWORD *)a2 + 1) = v23;
LABEL_78:
                if ((unint64_t)v23 >= v22 || *v23 < 0)
                {
                  result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v6);
                  if (!(_DWORD)result)
                    return result;
                  v28 = (_BYTE *)*((_QWORD *)a2 + 1);
                  v22 = *((_QWORD *)a2 + 2);
                }
                else
                {
                  *v6 = *v23;
                  v28 = v23 + 1;
                  *((_QWORD *)a2 + 1) = v28;
                }
                *((_DWORD *)this + 24) |= 0x400u;
                if ((unint64_t)v28 < v22 && *v28 == 96)
                {
                  v24 = v28 + 1;
                  *((_QWORD *)a2 + 1) = v24;
LABEL_86:
                  v30[0] = 0;
                  if ((unint64_t)v24 >= v22 || *v24 < 0)
                  {
                    result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v30);
                    if (!(_DWORD)result)
                      return result;
                    v29 = v30[0];
                  }
                  else
                  {
                    v29 = *v24;
                    *((_QWORD *)a2 + 1) = v24 + 1;
                  }
                  if (v29 <= 5)
                  {
                    *((_DWORD *)this + 24) |= 0x800u;
                    *((_DWORD *)this + 22) = v29;
                  }
                  if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
                    && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
                  {
                    *((_DWORD *)a2 + 8) = 0;
                    result = 1;
                    *((_BYTE *)a2 + 36) = 1;
                    return result;
                  }
                }
              }
            }
          }
          continue;
        }
        return 0;
      case 3u:
        v9 = TagFallback & 7;
        if (v9 == 1)
          goto LABEL_20;
        goto LABEL_59;
      case 4u:
        v9 = TagFallback & 7;
        if (v9 == 1)
          goto LABEL_25;
        goto LABEL_59;
      case 5u:
        v9 = TagFallback & 7;
        if (v9 == 1)
          goto LABEL_30;
        goto LABEL_59;
      case 6u:
        v9 = TagFallback & 7;
        if (v9 == 1)
          goto LABEL_35;
        goto LABEL_59;
      case 7u:
        v9 = TagFallback & 7;
        if (v9 == 1)
          goto LABEL_40;
        goto LABEL_59;
      case 8u:
        v9 = TagFallback & 7;
        if (v9 == 1)
          goto LABEL_45;
        goto LABEL_59;
      case 9u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_59;
        v19 = (char *)*((_QWORD *)a2 + 1);
        v17 = *((_QWORD *)a2 + 2);
        goto LABEL_51;
      case 0xAu:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_59;
        v21 = (char *)*((_QWORD *)a2 + 1);
        v17 = *((_QWORD *)a2 + 2);
        goto LABEL_68;
      case 0xBu:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_59;
        v23 = (char *)*((_QWORD *)a2 + 1);
        v22 = *((_QWORD *)a2 + 2);
        goto LABEL_78;
      case 0xCu:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_59;
        v24 = (char *)*((_QWORD *)a2 + 1);
        v22 = *((_QWORD *)a2 + 2);
        goto LABEL_86;
      default:
        v9 = TagFallback & 7;
LABEL_59:
        if (v9 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

void sub_100016FAC(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  NSObject *v6;
  unint64_t v7;
  unint64_t v8;
  double v9;
  BOOL v10;
  double v11;
  double v12;
  double v13;
  int v14;
  double v15;
  __int16 v16;
  double v17;
  __int16 v18;
  double v19;
  __int16 v20;
  double v21;

  if (!*((_BYTE *)a1 + 32))
  {
    v2 = *a1;
    if (*a1)
    {
      v3 = a1[1];
      if (v3)
      {
        v4 = a1[2];
        if (v4)
        {
          v5 = a1[3];
          if (v5)
          {
            v6 = qword_100100838;
            if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO))
            {
              if (v3 <= v4)
                v7 = v4;
              else
                v7 = v3;
              if (v7 <= v5)
                v7 = v5;
              v8 = v2 - 1;
              v9 = (double)(v7 - v2) * 0.000001;
              v10 = v2 - 1 >= v7;
              v11 = -1.0;
              if (v10)
                v9 = -1.0;
              v12 = (double)(v3 - v2) * 0.000001;
              if (v8 >= v3)
                v12 = -1.0;
              v13 = (double)(v4 - v2) * 0.000001;
              if (v8 >= v4)
                v13 = -1.0;
              v14 = 134349824;
              v15 = v9;
              v16 = 2050;
              v17 = v12;
              v18 = 2050;
              v19 = v13;
              if (v8 < v5)
                v11 = (double)(v5 - v2) * 0.000001;
              v20 = 2050;
              v21 = v11;
              _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "PerfNominalStart,Assistance timing,total_ms,%{public}.1f,time_ms,%{public}.1f,pos_ms,%{public}.1f,ephem_ms,%{public}.1f", (uint8_t *)&v14, 0x2Au);
            }
            *((_BYTE *)a1 + 32) = 1;
          }
        }
      }
    }
  }
}

_QWORD *sub_100017130(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BYTE v17[24];
  _BYTE *v18;

  if ((~*(_DWORD *)(a2 + 32) & 0xF) != 0)
  {
    v16 = 4;
    v8 = *(_QWORD *)(a3 + 24);
    if (!v8)
      sub_100025CE8();
    return (_QWORD *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v8 + 48))(v8, &v16);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 1848) && !*(_BYTE *)(a1 + 1896) && !*(_BYTE *)(a1 + 1897))
      *(double *)(a1 + 1864) = (double)gpsd::util::getMachContinuousTimeNs((gpsd::util *)a1) * 0.000000001;
    v6 = *(_DWORD *)(a2 + 16) - 1;
    if (v6 > 8)
      v7 = 0;
    else
      v7 = dword_1000D30D8[v6];
    v10 = *(_DWORD *)(a2 + 20);
    v11 = *(unsigned int *)(a2 + 24);
    if (v10 - 1 >= 3)
      v12 = 0;
    else
      v12 = v10;
    if ((v11 - 25) > 0x32 || ((1 << (v11 - 25)) & 0x4000002000001) == 0)
    {
      if ((_DWORD)v11 == 10)
        v11 = 10;
      else
        v11 = 0;
    }
    v13 = *(_QWORD *)(a1 + 8);
    v14 = *(_QWORD *)(a2 + 8);
    sub_100031BDC((uint64_t)v17, a3);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v13 + 160))(v13, v14, v7, v12, v11, v17);
    result = v18;
    if (v18 == v17)
    {
      v15 = 4;
      result = v17;
    }
    else
    {
      if (!v18)
        return result;
      v15 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v15))();
  }
}

void sub_1000172CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_100017310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  gpsd::util *v12;
  unint64_t MachContinuousTimeNs;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  NSObject *v20;
  uint64_t v21;
  double v22;
  double v23;
  _BOOL8 v24;
  double v25;
  double v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  NSObject *v30;
  int v31;
  double v32;
  int v33;
  double v34;
  uint64_t v35;
  uint8_t buf[4];
  _BYTE v37[10];
  __int16 v38;
  double v39;
  __int16 v40;
  double v41;
  __int16 v42;
  double v43;
  __int16 v44;
  int v45;
  __int16 v46;
  double v47;
  _BYTE v48[24];
  _BYTE *v49;

  v4 = *(_DWORD *)(a2 + 36);
  if ((v4 & 1) == 0)
  {
    *(_DWORD *)buf = 4;
    v5 = *(_QWORD *)(a3 + 24);
    if (v5)
    {
LABEL_3:
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v5 + 48))(v5, buf);
      return;
    }
LABEL_41:
    sub_100025CE8();
  }
  v8 = *(_QWORD *)(a2 + 8);
  if (!v8)
    v8 = *(_QWORD *)(proto::gpsd::InjectAssistancePosition::default_instance_ + 8);
  if ((~v4 & 0xC) != 0 || (*(_DWORD *)(v8 + 96) & 0x2F7) != 0x2F7)
  {
    *(_DWORD *)buf = 4;
    v5 = *(_QWORD *)(a3 + 24);
    if (v5)
      goto LABEL_3;
    goto LABEL_41;
  }
  v9 = *(unsigned int *)(v8 + 76);
  if (((v9 - 25) > 0x32 || ((1 << (v9 - 25)) & 0x4000002000001) == 0)
    && (_DWORD)v9 != 10)
  {
    v9 = 0;
  }
  v35 = 0;
  v12 = (gpsd::util *)ProtobufUtil::fromProtobuf(*(_DWORD *)(a2 + 16));
  MachContinuousTimeNs = gpsd::util::getMachContinuousTimeNs(v12);
  v15 = *(double *)(v8 + 48);
  v14 = *(double *)(v8 + 56);
  v16 = *(double *)(v8 + 40);
  v17 = GpsdPlatformInfo::instance(0);
  if ((*(_DWORD *)(v17 + 8) - 201) <= 1 && !(_DWORD)v12)
  {
    v18 = dbl_1000CED10[(*(_DWORD *)(GpsdPlatformInfo::instance(0) + 8) - 201) < 2]
        / sqrt(v14 * v14 + v15 * v15);
    if (v18 >= 1.0)
      v19 = v18;
    else
      v19 = 1.0;
    v20 = qword_100100838;
    v17 = os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v17)
    {
      *(_DWORD *)buf = 134349056;
      *(double *)v37 = v19;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#gdm,injectAssistancePosition,inflating ref pos unc by factor,%{public}.2f", buf, 0xCu);
    }
    v15 = v15 * v19;
    v14 = v14 * v19;
    v16 = fmax(v16, 200.0);
  }
  if (!*(_BYTE *)(a1 + 1848) && !*(_BYTE *)(a1 + 1896) && !*(_BYTE *)(a1 + 1897))
    *(double *)(a1 + 1864) = (double)gpsd::util::getMachContinuousTimeNs((gpsd::util *)v17) * 0.000000001;
  v21 = *(_QWORD *)(a1 + 8);
  v22 = *(double *)(v8 + 8);
  v23 = *(double *)(v8 + 16);
  v24 = *(_BYTE *)(a2 + 20) != 0;
  v25 = *(double *)(v8 + 24);
  v26 = *(double *)(v8 + 64);
  v27 = *(_QWORD *)(a2 + 24);
  sub_100031BDC((uint64_t)v48, a3);
  (*(void (**)(uint64_t, _BOOL8, uint64_t, uint64_t, gpsd::util *, uint64_t *, _BYTE *, double, double, double, double, double, double, double))(*(_QWORD *)v21 + 88))(v21, v24, v9, v27, v12, &v35, v48, v22, v23, v25, v16, v15, v14, v26);
  v28 = v49;
  if (v49 == v48)
  {
    v29 = 4;
    v28 = v48;
  }
  else
  {
    if (!v49)
      goto LABEL_35;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_35:
  v30 = qword_100100838;
  if ((_DWORD)v12 == 1)
  {
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
    {
      v31 = *(unsigned __int8 *)(a2 + 20);
      v32 = (double)(MachContinuousTimeNs - *(_QWORD *)(a2 + 24)) * 0.000001;
      *(_DWORD *)buf = 67241728;
      *(_DWORD *)v37 = 1;
      *(_WORD *)&v37[4] = 1026;
      *(_DWORD *)&v37[6] = v31;
      v38 = 2050;
      v39 = v16;
      v40 = 2050;
      v41 = v15;
      v42 = 2050;
      v43 = v14;
      v44 = 1026;
      v45 = v9;
      v46 = 2050;
      v47 = v32;
      _os_log_debug_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "#gdm,injectAssistancePosition,type,%{public}d,altValid,%{public}d,vertUncM,%{public}.1f,semiMajUncM,%{public}.1f,semiMinUncM,%{public}.1f,reliability,%{public}d,delayMachMs,%{public}.2f,", buf, 0x3Cu);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO))
  {
    v33 = *(unsigned __int8 *)(a2 + 20);
    v34 = (double)(MachContinuousTimeNs - *(_QWORD *)(a2 + 24)) * 0.000001;
    *(_DWORD *)buf = 67241728;
    *(_DWORD *)v37 = (_DWORD)v12;
    *(_WORD *)&v37[4] = 1026;
    *(_DWORD *)&v37[6] = v33;
    v38 = 2050;
    v39 = v16;
    v40 = 2050;
    v41 = v15;
    v42 = 2050;
    v43 = v14;
    v44 = 1026;
    v45 = v9;
    v46 = 2050;
    v47 = v34;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "#gdm,injectAssistancePosition,type,%{public}d,altValid,%{public}d,vertUncM,%{public}.1f,semiMajUncM,%{public}.1f,semiMinUncM,%{public}.1f,reliability,%{public}d,delayMachMs,%{public}.2f,", buf, 0x3Cu);
  }
}

void sub_100017754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  char *v23;
  char *v25;
  uint64_t v26;

  v25 = a23;
  if (a23 == v23)
  {
    v26 = 4;
    v25 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100017794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BYTE v14[24];
  _BYTE *v15;

  if ((~*(_DWORD *)(a2 + 24) & 3) != 0)
  {
    v13 = 4;
    v12 = *(_QWORD *)(a3 + 24);
    if (!v12)
      sub_100025CE8();
    return (_QWORD *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v12 + 48))(v12, &v13);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 1848) && !*(_BYTE *)(a1 + 1896) && !*(_BYTE *)(a1 + 1897))
      *(double *)(a1 + 1864) = (double)gpsd::util::getMachContinuousTimeNs((gpsd::util *)a1) * 0.000000001;
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_QWORD *)(a2 + 8);
    v8 = *(_DWORD *)(a2 + 16);
    if (v8 == 2)
      v9 = 1;
    else
      v9 = 2 * (v8 == 3);
    sub_100031BDC((uint64_t)v14, a3);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v6 + 168))(v6, v7, v9, v14);
    result = v15;
    if (v15 == v14)
    {
      v11 = 4;
      result = v14;
    }
    else
    {
      if (!v15)
        return result;
      v11 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
  }
}

void sub_1000178D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_100017918(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  id *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t MachContinuousTimeNs;
  unint64_t v17;
  int v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  double v31;
  NSObject *v32;
  NSObject *v33;
  uint64_t v34;
  _BYTE v35[24];
  _BYTE *v36;
  uint8_t buf[4];
  double v38;
  __int16 v39;
  unint64_t v40;
  __int16 v41;
  unint64_t v42;
  __int16 v43;
  unint64_t v44;
  __int16 v45;
  uint64_t v46;
  _BYTE v47[24];
  _BYTE *v48;

  if ((~*(_DWORD *)(a2 + 36) & 3) != 0)
  {
    *(_DWORD *)buf = 4;
    v25 = *(_QWORD *)(a3 + 24);
    if (!v25)
      sub_100025CE8();
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v25 + 48))(v25, buf);
    return;
  }
  if (!*(_BYTE *)(a1 + 1848) && !*(_BYTE *)(a1 + 1896) && !*(_BYTE *)(a1 + 1897))
    *(double *)(a1 + 1864) = (double)gpsd::util::getMachContinuousTimeNs((gpsd::util *)a1) * 0.000000001;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = (id *)GpsdPreferences::instance(0);
  v8 = GpsdPreferences::allowAssistanceTimeTo10Milliseconds(v7);
  v9 = 100000000;
  if (v6 > 0x5F5E100)
    v9 = v6;
  v10 = 12000000;
  v11 = 100000000;
  if (v6 > 0x5F5E100)
    v11 = v6;
  if (v6 < 0x2625A00)
    v11 = 50000000;
  if (v6 >= 0x989680)
    v10 = v11;
  if (v8)
    v12 = v10;
  else
    v12 = v9;
  v13 = (_DWORD *)GpsdPlatformInfo::instance(0);
  v14 = v13[2] - 103;
  v15 = (0x19u >> (*((_BYTE *)v13 + 8) - 103)) & 1;
  MachContinuousTimeNs = gpsd::util::getMachContinuousTimeNs((gpsd::util *)v13);
  v17 = MachContinuousTimeNs;
  v18 = *(_DWORD *)(a2 + 36);
  if (v14 <= 4 && v15 != 0)
  {
    if ((v18 & 4) != 0)
    {
      v26 = MachContinuousTimeNs - *(_QWORD *)(a2 + 24);
      if (v26 > 0x12A05F1FFLL)
      {
        v33 = qword_100100830;
        if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134349056;
          v38 = (double)v26 * 0.000001;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#gdm,injectAssistanceTime,Warning,Failed prop sanity check,propagation_ms,%{public}.3f", buf, 0xCu);
        }
        *(_DWORD *)buf = 2;
        v34 = *(_QWORD *)(a3 + 24);
        if (!v34)
          sub_100025CE8();
        (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v34 + 48))(v34, buf);
        return;
      }
    }
    else
    {
      v26 = 0;
    }
    v27 = *(_QWORD *)(a2 + 8);
    v28 = *(_QWORD *)(a1 + 8);
    sub_100031BDC((uint64_t)v47, a3);
    (*(void (**)(uint64_t, unint64_t, uint64_t, unint64_t, _BYTE *))(*(_QWORD *)v28 + 96))(v28, v27 + v26, v12, v17, v47);
    v29 = v48;
    if (v48 == v47)
    {
      v30 = 4;
      v29 = v47;
    }
    else
    {
      if (!v48)
        goto LABEL_42;
      v30 = 5;
    }
    (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_42:
    *(_QWORD *)(a1 + 2216) = v27 + v26;
    *(_QWORD *)(a1 + 2208) = v17;
    *(_BYTE *)(a1 + 2224) = 1;
    v32 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134350080;
      *(_QWORD *)&v38 = v27 + v26;
      v39 = 2050;
      v40 = v17;
      v41 = 2050;
      v42 = v17;
      v43 = 2050;
      v44 = v26;
      v45 = 2050;
      v46 = v12;
      goto LABEL_44;
    }
    return;
  }
  if ((v18 & 4) != 0)
    v20 = *(_QWORD *)(a2 + 24);
  else
    v20 = MachContinuousTimeNs;
  v21 = *(_QWORD *)(a1 + 8);
  v22 = *(_QWORD *)(a2 + 8);
  sub_100031BDC((uint64_t)v35, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, _BYTE *))(*(_QWORD *)v21 + 96))(v21, v22, v12, v20, v35);
  v23 = v36;
  if (v36 == v35)
  {
    v24 = 4;
    v23 = v35;
  }
  else
  {
    if (!v36)
      goto LABEL_38;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_38:
  v31 = *(double *)(a2 + 8);
  *(double *)(a1 + 2216) = v31;
  *(_QWORD *)(a1 + 2208) = v20;
  *(_BYTE *)(a1 + 2224) = 1;
  v32 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134350080;
    v38 = v31;
    v39 = 2050;
    v40 = v20;
    v41 = 2050;
    v42 = v17;
    v43 = 2050;
    v44 = 0;
    v45 = 2050;
    v46 = v12;
LABEL_44:
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "#gdm,injectAssistanceTime,gpsNs,%{public}llu,machNs,%{public}llu,nowNs,%{public}llu,propagationNs,%{public}llu,uncNs,%{public}llu", buf, 0x34u);
  }
}

void sub_100017D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  char *v23;
  char *v25;
  uint64_t v26;

  v25 = a23;
  if (a23 == v23)
  {
    v26 = 4;
    v25 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

id GpsdPreferences::allowAssistanceTimeTo10Milliseconds(id *this)
{
  return objc_msgSend(*this, "BOOLForKey:", CFSTR("AllowAssistanceTimeTo10Milliseconds"));
}

void sub_100017D74(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  int v6;
  NSObject *v7;
  uint64_t v8;
  char *v9;
  int v10;
  unint64_t MachContinuousTimeNs;
  _BOOL4 v12;
  NSObject *v13;
  _BOOL8 v14;
  uint64_t v15;
  size_t v16;
  _BYTE *v17;
  char v18;
  NSObject *v19;
  char *v20;
  uint64_t v21;
  const char *v22;
  NSObject *v23;
  uint32_t v24;
  unsigned int v25;
  BOOL v26;
  int v27;
  unsigned __int8 v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _BYTE *v37;
  _BYTE *v38;
  unint64_t v39;
  uint64_t v40;
  void *__p;
  _BYTE *v42;
  uint64_t v43;
  _BYTE v44[24];
  _BYTE *v45;
  _QWORD v46[3];
  _QWORD *v47;
  uint8_t buf[4];
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  double v53;

  if ((a3 & 0x8000) == 0)
    goto LABEL_5;
  if (!a2)
    a2 = *(_QWORD *)(proto::gpsd::Request::default_instance_ + 120);
  v6 = *(_DWORD *)(a2 + 24);
  if ((v6 & 1) == 0)
  {
LABEL_5:
    v7 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "#gdm,INJECT_ASSISTANCE_FILE missing arguments", buf, 2u);
    }
    *(_DWORD *)buf = 4;
    v8 = *(_QWORD *)(a4 + 24);
    if (!v8)
      sub_100025CE8();
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v8 + 48))(v8, buf);
    return;
  }
  v9 = *(char **)(a2 + 8);
  v42 = 0;
  v43 = 0;
  __p = 0;
  if ((v6 & 2) == 0 || (v10 = *(_DWORD *)(a2 + 16), v10 == 1))
  {
    if (v9[23] < 0)
    {
      v20 = v9;
      v9 = *(char **)v9;
      v16 = *((_QWORD *)v20 + 1);
      if (v16)
        goto LABEL_19;
    }
    else
    {
      v16 = v9[23];
      if (v9[23])
      {
LABEL_19:
        if ((v16 & 0x8000000000000000) != 0)
          sub_100026868();
        sub_100036A90(&__p, v16);
        v17 = v42;
        do
        {
          v18 = *v9++;
          *v17++ = v18;
          --v16;
        }
        while (v16);
        v42 = v17;
        goto LABEL_27;
      }
    }
    v42 = (_BYTE *)v16;
    v17 = (_BYTE *)v16;
LABEL_27:
    v21 = qword_100100838;
    v14 = os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT);
    if (!v14)
      goto LABEL_32;
    *(_DWORD *)buf = 134217984;
    v49 = v17 - (_BYTE *)__p;
    v22 = "#gdm,#ee,Injecting uncompressed assistance file,size,%zu";
    v23 = v21;
    v24 = 12;
    goto LABEL_29;
  }
  if (v10 == 2)
  {
    MachContinuousTimeNs = gpsd::util::getMachContinuousTimeNs((gpsd::util *)a1);
    v12 = CompressionUtil::decode((uint64_t)v9, (unint64_t *)&__p, COMPRESSION_LZMA);
    v13 = qword_100100838;
    if (v12)
    {
      v14 = os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT);
      if (!v14)
        goto LABEL_32;
      if (v9[23] < 0)
        v15 = *((_QWORD *)v9 + 1);
      else
        v15 = v9[23];
      v38 = __p;
      v37 = v42;
      v39 = gpsd::util::getMachContinuousTimeNs((gpsd::util *)v14);
      *(_DWORD *)buf = 134349568;
      v49 = v15;
      v50 = 2050;
      v51 = v37 - v38;
      v52 = 2050;
      v53 = (double)v39 * 0.000000001 - (double)MachContinuousTimeNs * 0.000000001;
      v22 = "#gdm,#ee,Injecting assistance file,lzma,%{public}zu,raw,%{public}zu,decodeTimeSec,%{public}.3f";
      v23 = v13;
      v24 = 32;
LABEL_29:
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, v22, buf, v24);
      goto LABEL_32;
    }
    v14 = os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_FAULT);
    if (v14)
    {
      if (v9[23] < 0)
        v40 = *((_QWORD *)v9 + 1);
      else
        v40 = v9[23];
      *(_DWORD *)buf = 134349056;
      v49 = v40;
      _os_log_fault_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "#gdm,#ee,Failed to decompress assistance file,lzma,%{public}zu", buf, 0xCu);
    }
    v42 = __p;
  }
  else
  {
    v19 = qword_100100838;
    v14 = os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_FAULT);
    if (v14)
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v49) = v10;
      _os_log_fault_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "#gdm,#ee,Assistance file has unknown compression,%{public}d", buf, 8u);
    }
  }
LABEL_32:
  if (__p == v42)
  {
    v30 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "#gdm,INJECT_ASSISTANCE_FILE data blob empty", buf, 2u);
    }
    *(_DWORD *)buf = 4;
    v31 = *(_QWORD *)(a4 + 24);
    if (!v31)
      sub_100025CE8();
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v31 + 48))(v31, buf);
    goto LABEL_59;
  }
  if (!*(_BYTE *)(a1 + 1848) && !*(_BYTE *)(a1 + 1896) && !*(_BYTE *)(a1 + 1897))
    *(double *)(a1 + 1864) = (double)gpsd::util::getMachContinuousTimeNs((gpsd::util *)v14) * 0.000000001;
  v25 = *(_DWORD *)(GpsdPlatformInfo::instance(0) + 8) - 103;
  v26 = v25 > 4;
  v27 = (1 << v25) & 0x19;
  if (v26 || v27 == 0)
  {
    v29 = 4;
  }
  else if ((unint64_t)(v42 - (_BYTE *)__p) >> 4 < 0xC35)
  {
    v29 = 3;
  }
  else
  {
    v29 = 4;
  }
  v32 = *(_QWORD *)(a1 + 8);
  v46[0] = off_1000F27E0;
  v46[1] = a1;
  v47 = v46;
  sub_100031BDC((uint64_t)v44, a4);
  (*(void (**)(uint64_t, void **, _QWORD, _QWORD *, _BYTE *))(*(_QWORD *)v32 + 72))(v32, &__p, v29, v46, v44);
  v33 = v45;
  if (v45 == v44)
  {
    v34 = 4;
    v33 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_54;
    v34 = 5;
  }
  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_54:
  v35 = v47;
  if (v47 == v46)
  {
    v36 = 4;
    v35 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_59;
    v36 = 5;
  }
  (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_59:
  if (__p)
  {
    v42 = __p;
    operator delete(__p);
  }
}

void sub_10001825C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ProtobufUtil::fromProtobuf(int a1)
{
  uint64_t result;
  NSObject *v3;
  _DWORD v4[2];

  result = (a1 - 1);
  if (result >= 3)
  {
    v3 = qword_100100838;
    result = os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      v4[0] = 67109120;
      v4[1] = a1;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::PositionAssistType", (uint8_t *)v4, 8u);
      return 0;
    }
  }
  return result;
}

{
  NSObject *v3;
  _DWORD v4[2];

  if ((a1 - 1) < 5)
    return (a1 - 2);
  v3 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::SessionProtocol", (uint8_t *)v4, 8u);
  }
  return 0xFFFFFFFFLL;
}

{
  NSObject *v3;
  _DWORD v4[2];

  if ((a1 - 1) < 6)
    return (a1 - 2);
  v3 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::PosProtocol", (uint8_t *)v4, 8u);
  }
  return 0xFFFFFFFFLL;
}

{
  uint64_t result;
  NSObject *v3;
  _DWORD v4[2];

  if ((a1 - 1) < 5)
    return dword_1000D34F0[a1 - 1];
  v3 = qword_100100838;
  result = os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::ClsNetworkType", (uint8_t *)v4, 8u);
    return 0;
  }
  return result;
}

{
  uint64_t result;
  NSObject *v3;
  _DWORD v4[2];

  result = (a1 - 1);
  if (result >= 5)
  {
    v3 = qword_100100838;
    result = os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      v4[0] = 67109120;
      v4[1] = a1;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::WlanMeasurementResult", (uint8_t *)v4, 8u);
      return 0;
    }
  }
  return result;
}

{
  uint64_t result;
  NSObject *v3;
  _DWORD v4[2];

  result = (a1 - 1);
  if (result >= 6)
  {
    v3 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      v4[0] = 67109120;
      v4[1] = a1;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::CntInStatus", (uint8_t *)v4, 8u);
    }
    return 2;
  }
  return result;
}

BOOL GnssHal::ExtensionsFireImpl::supportsL5(GnssHal::ExtensionsFireImpl *this)
{
  id *v1;
  unsigned int v2;
  _BOOL8 result;

  v1 = (id *)GpsdPreferences::instance(0);
  v2 = GpsdPreferences::enableL5(v1);
  result = 0;
  if (v2)
    return *(_BYTE *)(GpsdPlatformInfo::instance(0) + 24) != 0;
  return result;
}

uint64_t GpsdPlatformInfo::instance(int a1)
{
  _QWORD block[4];
  int v3;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000C7DD4;
  block[3] = &unk_1000FB430;
  v3 = a1;
  if (qword_1001007F8 != -1)
    dispatch_once(&qword_1001007F8, block);
  return qword_1001007F0;
}

uint64_t GpsdPreferences::instance(int a1)
{
  _QWORD block[4];
  int v3;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000C8B30;
  block[3] = &unk_1000FB430;
  v3 = a1;
  if (qword_100100808 != -1)
    dispatch_once(&qword_100100808, block);
  return qword_100100800;
}

id GpsdPreferences::enableL5(id *this)
{
  return objc_msgSend(*this, "BOOLForKey:", CFSTR("EnableL5"));
}

uint64_t sub_1000184DC(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  unint64_t v8;
  char *v9;
  char *v10;
  unsigned int v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned __int8 *v14;
  uint64_t result;
  unsigned int v16;
  unsigned int v17;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v7 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_15;
      v17 = 0;
      v10 = (char *)*((_QWORD *)this + 1);
      v8 = *((_QWORD *)this + 2);
      if ((unint64_t)v10 >= v8 || *v10 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v17);
        if (!(_DWORD)result)
          return result;
        v11 = v17;
        v12 = (_BYTE *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
      }
      else
      {
        v11 = *v10;
        v12 = v10 + 1;
        *((_QWORD *)this + 1) = v12;
      }
      *(_BYTE *)(a1 + 8) = v11 != 0;
      *(_DWORD *)(a1 + 16) |= 1u;
      if ((unint64_t)v12 < v8 && *v12 == 16)
      {
        v9 = v12 + 1;
        *((_QWORD *)this + 1) = v9;
LABEL_23:
        v16 = 0;
        if ((unint64_t)v9 >= v8 || *v9 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v16);
          if (!(_DWORD)result)
            return result;
          v13 = v16;
          v14 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v8 = *((_QWORD *)this + 2);
        }
        else
        {
          v13 = *v9;
          v14 = (unsigned __int8 *)(v9 + 1);
          *((_QWORD *)this + 1) = v14;
        }
        *(_BYTE *)(a1 + 9) = v13 != 0;
        *(_DWORD *)(a1 + 16) |= 2u;
        if (v14 == (unsigned __int8 *)v8 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      v7 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v9 = (char *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        goto LABEL_23;
      }
    }
    else
    {
      v7 = TagFallback & 7;
    }
LABEL_15:
    if (v7 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t GpsdPreferences::enableConstellationsBitfield(id *this)
{
  unsigned int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;

  v2 = objc_msgSend(*this, "BOOLForKey:", CFSTR("EnableGps"));
  if (objc_msgSend(*this, "BOOLForKey:", CFSTR("EnableQzss")))
    v3 = 16;
  else
    v3 = 0;
  v4 = v3 | v2;
  if (objc_msgSend(*this, "BOOLForKey:", CFSTR("EnableGlonass")))
    v5 = 2;
  else
    v5 = 0;
  if (objc_msgSend(*this, "BOOLForKey:", CFSTR("EnableGalileo")))
    v6 = 8;
  else
    v6 = 0;
  v7 = v4 | v5 | v6;
  if (objc_msgSend(*this, "BOOLForKey:", CFSTR("EnableBeidou")))
    v8 = 4;
  else
    v8 = 0;
  if (objc_msgSend(*this, "BOOLForKey:", CFSTR("EnableNavic")))
    v9 = 32;
  else
    v9 = 0;
  return v7 | v8 | v9;
}

void sub_100018768(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD block[5];

  v1 = *(_QWORD *)(a1 + 32);
  std::mutex::lock((std::mutex *)(v1 + 40));
  v2 = *(_QWORD *)(v1 + 104);
  v3 = *(_QWORD *)(v1 + 112);
  if (v2 == v3)
  {
    std::mutex::unlock((std::mutex *)(v1 + 40));
  }
  else
  {
    *(_OWORD *)(v1 + 104) = *(_OWORD *)(v1 + 128);
    v4 = *(_QWORD *)(v1 + 144);
    v5 = *(_QWORD *)(v1 + 120);
    *(_QWORD *)(v1 + 136) = v3;
    *(_QWORD *)(v1 + 144) = v5;
    *(_QWORD *)(v1 + 120) = v4;
    *(_QWORD *)(v1 + 128) = v2;
    std::mutex::unlock((std::mutex *)(v1 + 40));
    sub_100018834(v1 + 8, *(_QWORD *)(v1 + 128), *(_QWORD *)(v1 + 136) - *(_QWORD *)(v1 + 128));
    v6 = *(_QWORD *)(v1 + 128);
    if (*(_QWORD *)(v1 + 136) != v6)
      *(_QWORD *)(v1 + 136) = v6;
    v7 = *(NSObject **)v1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100018768;
    block[3] = &unk_1000F0D30;
    block[4] = v1;
    dispatch_async(v7, block);
  }
}

uint64_t sub_100018834(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = a3;
  v6 = a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    sub_100025CE8();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v6, &v5);
}

void sub_100018870(gpsd::util *a1, gpsd::util **a2, const unsigned __int8 **a3, const char *a4)
{
  gpsd::util *v4;
  const unsigned __int8 *v5;
  uint64_t v6;
  double v7;
  NSObject *v8;
  const char *v9;
  gpsd::util *v10;
  unint64_t MachContinuousTimeNs;
  NSObject *v12;
  int v13;
  const unsigned __int8 *v14;
  __int16 v15;
  double v16;

  v4 = *a2;
  v5 = *a3;
  v6 = *((_QWORD *)a1 + 1);
  if (*(_BYTE *)(v6 + 41))
    gpsd::util::logBinaryBytes(*a2, v5, (uint64_t)"#spi,read,bin", a4);
  if (!*(_QWORD *)(v6 + 80))
  {
    v8 = qword_100100838;
    if (!os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_FAULT))
      return;
    LOWORD(v13) = 0;
    v9 = "#spi,readCallback,null";
LABEL_11:
    _os_log_fault_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, v9, (uint8_t *)&v13, 2u);
    return;
  }
  if (!*(_BYTE *)(v6 + 42))
  {
    gpsd::util::logBinaryBytes(v4, v5, (uint64_t)"#spi,read,bin", a4);
    v8 = qword_100100838;
    if (!os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_FAULT))
      return;
    LOWORD(v13) = 0;
    v9 = "#spi,readcallback,portClosed";
    goto LABEL_11;
  }
  if (*(_BYTE *)(v6 + 40))
    v7 = (double)gpsd::util::getMachContinuousTimeNs(a1) * 0.000000001;
  else
    v7 = 0.0;
  v10 = (gpsd::util *)sub_100018834(v6 + 56, (uint64_t)v4, (uint64_t)v5);
  if (*(_BYTE *)(v6 + 40))
  {
    MachContinuousTimeNs = gpsd::util::getMachContinuousTimeNs(v10);
    v12 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
    {
      v13 = 134349312;
      v14 = v5;
      v15 = 2050;
      v16 = ((double)MachContinuousTimeNs * 0.000000001 - v7) * 1000000.0;
      _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#spi,hal,read,size,%{public}zu,duration,us,%{public}.1f", (uint8_t *)&v13, 0x16u);
    }
  }
}

void sub_100018A50(uint64_t a1, gpsd::util **a2, const unsigned __int8 **a3, const char *a4)
{
  gpsd::util *v4;
  const unsigned __int8 *v5;
  uint64_t v6;
  gpsd::util *v7;
  const char *v8;
  double v9;
  NSObject *v10;
  NSObject *v11;
  gpsd::util *v12;
  mach_error_t v13;
  unint64_t MachContinuousTimeNs;
  int v15;
  NSObject *v16;
  NSObject *v17;
  double v18;
  NSObject *v19;
  char *v20;
  int v21;
  std::string v22;
  std::string v23;
  uint8_t buf[4];
  _BYTE v25[26];
  __int16 v26;
  const unsigned __int8 *v27;
  __int16 v28;
  double v29;

  v4 = *a2;
  v5 = *a3;
  v6 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v6 + 41))
    gpsd::util::logBinaryBytes(*a2, v5, (uint64_t)"#spi,write,bin", a4);
  v7 = (gpsd::util *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  if ((v7 & 1) != 0)
  {
    if (v4 && v5)
    {
      if (*(_BYTE *)(v6 + 40))
        v9 = (double)gpsd::util::getMachContinuousTimeNs(v7) * 0.000000001;
      else
        v9 = 0.0;
      v12 = (gpsd::util *)(*(uint64_t (**)(_QWORD, gpsd::util *, const unsigned __int8 *))(**(_QWORD **)(v6 + 112) + 80))(*(_QWORD *)(v6 + 112), v4, v5);
      if ((_DWORD)v12)
      {
        v13 = (int)v12;
        MachContinuousTimeNs = gpsd::util::getMachContinuousTimeNs(v12);
        v15 = *(_DWORD *)(v6 + 44) + 1;
        *(_DWORD *)(v6 + 44) = v15;
        v16 = qword_100100838;
        if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_FAULT))
        {
          v20 = mach_error_string(v13);
          v21 = *(_DWORD *)(v6 + 44);
          *(_DWORD *)buf = 67241474;
          *(_DWORD *)v25 = v13;
          *(_WORD *)&v25[4] = 2082;
          *(_QWORD *)&v25[6] = v20;
          *(_WORD *)&v25[14] = 1026;
          *(_DWORD *)&v25[16] = v21;
          *(_WORD *)&v25[20] = 1026;
          *(_DWORD *)&v25[22] = 5;
          v26 = 2050;
          v27 = v5;
          v28 = 2050;
          v29 = ((double)MachContinuousTimeNs * 0.000000001 - v9) * 1000000.0;
          _os_log_fault_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "#spi,write,failed,%{public}X,%{public}s,count,%{public}d/%{public}d,size,%{public}zu,duration,us,%{public}.1f", buf, 0x32u);
          v15 = *(_DWORD *)(v6 + 44);
        }
        if (v15 >= 5)
        {
          v17 = qword_100100838;
          if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "#spi,continuousWriteError", buf, 2u);
            v17 = qword_100100838;
          }
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)v25 = "/Library/Caches/com.apple.xbs/Sources/CoreGPS/Sources/HAL/Implementation/GnssHalCommSpi.mm";
            *(_WORD *)&v25[8] = 1026;
            *(_DWORD *)&v25[10] = 223;
            *(_WORD *)&v25[14] = 2082;
            *(_QWORD *)&v25[16] = "writeInternal";
            _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: assertion failure in %{public}s", buf, 0x1Cu);
          }
          sub_100025B58(buf, "assert");
          sub_100025B58(&v23, "writeInternal");
          sub_100025B58(&v22, "#spi,continuousWriteError");
          gpsd::util::triggerDiagnosticReport((uint64_t)buf, (__int128 *)&v23, (__int128 *)&v22);
          std::string::~string(&v22);
          std::string::~string(&v23);
          std::string::~string((std::string *)buf);
          __assert_rtn("writeInternal", "GnssHalCommSpi.mm", 223, "false && \"#spi,continuousWriteError\"");
        }
      }
      else
      {
        *(_DWORD *)(v6 + 44) = 0;
        if (*(_BYTE *)(v6 + 40))
        {
          v18 = ((double)gpsd::util::getMachContinuousTimeNs(v12) * 0.000000001 - v9) * 1000000.0;
          v19 = qword_100100838;
          if (v18 > (double)(unint64_t)(8 * (_QWORD)v5) / 5.0 + 100000.0
            && os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 134349312;
            *(_QWORD *)v25 = v5;
            *(_WORD *)&v25[8] = 2050;
            *(double *)&v25[10] = v18;
            _os_log_fault_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "#spi,write,longDelay,size,%{public}zu,duration,us,%{public}.1f", buf, 0x16u);
            v19 = qword_100100838;
          }
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134349312;
            *(_QWORD *)v25 = v5;
            *(_WORD *)&v25[8] = 2050;
            *(double *)&v25[10] = v18;
            _os_log_debug_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "#spi,write,size,%{public}zu,duration,us,%{public}.1f", buf, 0x16u);
          }
        }
      }
    }
    else
    {
      v11 = qword_100100830;
      if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134349312;
        *(_QWORD *)v25 = v4;
        *(_WORD *)&v25[8] = 2050;
        *(_QWORD *)&v25[10] = v5;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "$spi,write,invalid,buffer,%{public}p,size,%{public}zu", buf, 0x16u);
      }
    }
  }
  else
  {
    gpsd::util::logBinaryBytes(v4, v5, (uint64_t)"#spi,write,bin", v8);
    v10 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#spi,write,notOpen", buf, 2u);
    }
  }
}

void sub_100018F00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100018F54(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 42);
}

void sub_100018F5C(uint64_t a1, _QWORD *a2)
{
  void (**v2)(proto::gpsd::Indication *__hidden);
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;

  if (*a2)
  {
    v2 = off_1000F9B50;
    v3 = 0u;
    v4 = 0u;
    v5 = 0u;
    v6 = 0u;
    v7 = 0u;
    v8 = 0u;
    v9 = 0u;
    v10 = 0u;
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    LODWORD(v3) = 3;
    v16 = 33;
    operator new();
  }
}

void sub_100019084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  proto::gpsd::Indication::SharedDtor(&a9);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)&a9);
  _Unwind_Resume(a1);
}

void sub_1000190A4(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t **a6, uint64_t *a7)
{
  unint64_t MachContinuousTimeNs;
  double v12;
  char **v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t *v16;
  float v17;
  unint64_t v18;
  NSObject *v19;
  const char *v20;
  NSObject *v21;
  NSObject *v22;
  _BOOL4 v23;
  _BOOL4 v24;
  uint64_t v25;
  float v26;
  _BOOL4 v27;
  double v28;
  int GpsWeekFromBuildDate;
  NSObject *v30;
  double v31;
  unint64_t v32;
  NSObject *v33;
  unint64_t v34;
  double v35;
  double v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  unsigned __int8 v67;
  _QWORD *v68;
  _QWORD *v69;
  gpsd::util *v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 *v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *v101;
  int v102;
  int v103;
  int v104;
  _BOOL4 v105;
  _BOOL4 v106;
  double v107;
  _BOOL4 v108;
  id *v109;
  __int128 v113;
  void (**v114)(proto::gpsd::Indication *__hidden);
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  unsigned int v128;
  uint8_t buf[32];
  _BYTE v130[56];
  _BYTE v131[32];
  __int128 v132;
  __int128 v133;
  _OWORD __p[3];
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;

  MachContinuousTimeNs = gpsd::util::getMachContinuousTimeNs((gpsd::util *)a1);
  v114 = off_1000F9B50;
  v115 = 0u;
  v116 = 0u;
  v117 = 0u;
  v118 = 0u;
  v119 = 0u;
  v120 = 0u;
  v121 = 0u;
  v122 = 0u;
  v123 = 0u;
  v124 = 0u;
  v125 = 0u;
  v126 = 0u;
  v127 = 0u;
  v128 = 1;
  LODWORD(v115) = 1;
  sub_10001DA64(a1 + 928, *a2, *a3);
  sub_100019E84(a1);
  v12 = (double)MachContinuousTimeNs * 0.000000001;
  v13 = &selRef_UTF8String;
  if (!*a2)
    goto LABEL_47;
  v113 = 0uLL;
  v14 = GpsdPlatformInfo::instance(0);
  v15 = *(_DWORD *)(v14 + 8) - 103;
  if (v15 <= 4 && ((1 << v15) & 0x19) != 0 || (v14 = sub_100025DD0(*a2), (_DWORD)v14))
  {
    v16 = (unint64_t *)*a2;
    v17 = *(float *)(*a2 + 8);
    if (v17 == -1.0 || v17 > 2000000000.0)
    {
      v21 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "#imag,fix time too uncertain to crosscheck", buf, 2u);
      }
      goto LABEL_35;
    }
    v18 = *v16;
    if (*v16 > 0x2260FF928FFFFLL)
    {
      v28 = *(double *)&qword_100100170;
      if (*(double *)&qword_100100170 < 0.0)
      {
        GpsWeekFromBuildDate = gpsd::util::getGpsWeekFromBuildDate((gpsd::util *)v14);
        v28 = (double)GpsWeekFromBuildDate * 604800.0;
        *(double *)&qword_100100170 = v28;
        v30 = qword_100100838;
        if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = GpsWeekFromBuildDate;
          _os_log_debug_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "#imag,set build week,%d", buf, 8u);
          v28 = *(double *)&qword_100100170;
        }
      }
      v31 = (double)v18 * 0.000000001;
      if (v31 - v28 < 0.0)
      {
        v32 = v16[23];
        v33 = qword_100100830;
        if ((v32 & 1) == 0 && os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#imag,build time,device missed detection", buf, 2u);
          v32 = v16[23];
          v33 = qword_100100830;
        }
        v16[23] = v32 | 1;
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134349312;
          *(double *)&buf[4] = v31;
          *(_WORD *)&buf[12] = 2050;
          *(_QWORD *)&buf[14] = qword_100100170;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#imag,build time,detection,fix,%{public}.1f,build,%{public}.1f", buf, 0x16u);
        }
      }
      v34 = *(_QWORD *)(a1 + 1888);
      if (!v34)
        goto LABEL_35;
      v35 = (double)v34;
      v36 = v31 - (double)v34;
      if (v36 >= -2.0 && v36 <= 1209600.0)
        goto LABEL_35;
      v37 = v16[23];
      v19 = qword_100100830;
      if ((v37 & 2) == 0 && os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#imag,EE time,device missed detection", buf, 2u);
        v37 = v16[23];
        v19 = qword_100100830;
      }
      v16[23] = v37 | 2;
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        goto LABEL_35;
      *(_DWORD *)buf = 134349312;
      *(double *)&buf[4] = v31;
      *(_WORD *)&buf[12] = 2050;
      *(double *)&buf[14] = v35;
      v20 = "#imag,EE time,detection,fix,%{public}.1f,ee,%{public}.1f";
    }
    else
    {
      v19 = qword_100100830;
      if (!os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
      {
LABEL_35:
        if (ReceiverClockConversion::isRxClockValid((ReceiverClockConversion *)(a1 + 2232), *(_QWORD *)(*a2 + 24)))
        {
          *(_QWORD *)&v113 = ReceiverClockConversion::feedPvtmCallback((ReceiverClockConversion *)(a1 + 2232), *(_QWORD *)(*a2 + 24), v12);
          *((_QWORD *)&v113 + 1) = v38;
        }
        else
        {
          *(double *)&v113 = v12;
          *((_QWORD *)&v113 + 1) = 0x3FF0000000000000;
        }
        v39 = *a2;
        v128 |= 8u;
        if (!(_QWORD)v116)
          operator new();
        gnss::Convert::toProtobuf(v39, &v113, v116);
        goto LABEL_41;
      }
      *(_DWORD *)buf = 134218240;
      *(double *)&buf[4] = (double)v18 * 0.000000001;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v17 * 0.000000001;
      v20 = "#imag,fix is in week 0 with low uncertainty,%f,%f";
    }
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v20, buf, 0x16u);
    goto LABEL_35;
  }
  v22 = qword_100100830;
  if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
  {
    v23 = sub_100022E5C((double *)(*a2 + 48));
    v24 = sub_1000267E0(*a2 + 136);
    v25 = *a2;
    v26 = *(float *)(*a2 + 8);
    if (v26 >= 1.0e11)
    {
      if (v26 <= 0.0)
      {
        v27 = 0;
        goto LABEL_108;
      }
    }
    else
    {
      v27 = 0;
      if (v26 <= 0.0 || !*(_QWORD *)v25)
        goto LABEL_108;
    }
    v27 = *(_QWORD *)(v25 + 24) != -1;
LABEL_108:
    v107 = *(double *)(v25 + 168);
    if (v107 == -1.0)
    {
      v108 = 1;
    }
    else
    {
      v108 = 0;
      if (v107 >= 0.0 && v107 < 360.0)
        v108 = *(double *)(v25 + 176) > 0.0;
    }
    *(_DWORD *)buf = 67240960;
    *(_DWORD *)&buf[4] = v23;
    *(_WORD *)&buf[8] = 1026;
    *(_DWORD *)&buf[10] = v24;
    *(_WORD *)&buf[14] = 1026;
    *(_DWORD *)&buf[16] = v27;
    *(_WORD *)&buf[20] = 1026;
    *(_DWORD *)&buf[22] = v108;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#gdm,pvtmCallback,dropping fix as it failed sanity check,%{public}d,%{public}d,%{public}d,%{public}d", buf, 0x1Au);
  }
LABEL_41:
  *(_BYTE *)(a1 + 1913) = 1;
  v40 = *a2;
  v13 = &selRef_UTF8String;
  v41 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    v42 = *(_QWORD *)v40;
    v43 = *(float *)(v40 + 8);
    v44 = *(_QWORD *)(v40 + 24);
    v45 = *(_QWORD *)(v40 + 32);
    v46 = *(_QWORD *)(v40 + 184);
    *(_DWORD *)buf = 134350848;
    *(_QWORD *)&buf[4] = v42;
    *(_WORD *)&buf[12] = 2050;
    *(double *)&buf[14] = v43;
    *(_WORD *)&buf[22] = 2050;
    *(_QWORD *)&buf[24] = v44;
    *(_WORD *)v130 = 2050;
    *(_QWORD *)&v130[2] = v45;
    *(_WORD *)&v130[10] = 2050;
    *(_QWORD *)&v130[12] = v113;
    *(_WORD *)&v130[20] = 2050;
    *(_QWORD *)&v130[22] = *((_QWORD *)&v113 + 1);
    *(_WORD *)&v130[30] = 2050;
    *(double *)&v130[32] = v12 - *(double *)&v113;
    *(_WORD *)&v130[40] = 2050;
    *(_QWORD *)&v130[42] = v46;
    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "#gdm,Time,gpsNs,%{public}llu,gpsUncNs,%{public}.1f,clockNs,%{public}llu,basebandTimeNs,%{public}llu,convMctSec,%{public}.3f,convMctUncSec,%{public}.3f,age,%{public}.3f,iflags,%{public}llx", buf, 0x52u);
    v41 = qword_100100838;
  }
  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
  {
    v47 = *(_QWORD *)(v40 + 48);
    v48 = *(_QWORD *)(v40 + 56);
    v49 = *(_QWORD *)(v40 + 64);
    v50 = *(_QWORD *)(v40 + 72);
    v51 = *(_QWORD *)(v40 + 80);
    v52 = *(_QWORD *)(v40 + 88);
    v53 = *(_QWORD *)(v40 + 96);
    v54 = *(_QWORD *)(v40 + 104);
    v55 = *(_DWORD *)(v40 + 112);
    v56 = *(_DWORD *)(v40 + 116);
    v57 = *(_DWORD *)(v40 + 128);
    v58 = *(_DWORD *)(*a2 + 192);
    v59 = *(_QWORD *)(v40 + 120);
    *(_DWORD *)buf = 134286593;
    *(_QWORD *)&buf[4] = v47;
    *(_WORD *)&buf[12] = 2049;
    *(_QWORD *)&buf[14] = v48;
    *(_WORD *)&buf[22] = 2049;
    *(_QWORD *)&buf[24] = v49;
    *(_WORD *)v130 = 2049;
    *(_QWORD *)&v130[2] = v50;
    *(_WORD *)&v130[10] = 2050;
    *(_QWORD *)&v130[12] = v51;
    *(_WORD *)&v130[20] = 2050;
    *(_QWORD *)&v130[22] = v52;
    *(_WORD *)&v130[30] = 2050;
    *(_QWORD *)&v130[32] = v53;
    *(_WORD *)&v130[40] = 2050;
    *(_QWORD *)&v130[42] = v54;
    *(_WORD *)&v130[50] = 1026;
    *(_DWORD *)&v130[52] = v55;
    *(_WORD *)v131 = 1026;
    *(_DWORD *)&v131[2] = v56;
    *(_WORD *)&v131[6] = 1026;
    *(_DWORD *)&v131[8] = v57;
    *(_WORD *)&v131[12] = 1026;
    *(_DWORD *)&v131[14] = v58;
    *(_WORD *)&v131[18] = 2050;
    *(_QWORD *)&v131[20] = v59;
    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "#gdm,Position,latitude,%{private}.6f,longitude,%{private}.6f,altWgs84,%{private}.2f,undulation,%{private}.2f,vertUnc,%{public}.2f,semiMajorHorizUnc,%{public}.2f,semiMinorHorizUnc,%{public}.2f,semiMajorAzimuthHorizUnc,%{public}.2f,source,%{public}x,reliability,%{public}d,gnssContent,%{public}d,estTech,%{public}d,assistanceUsed,%{public}llx", buf, 0x74u);
    v41 = qword_100100838;
  }
  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
  {
    v60 = *(_QWORD *)(v40 + 136);
    v61 = *(_QWORD *)(v40 + 144);
    v62 = *(_QWORD *)(v40 + 152);
    v63 = *(_QWORD *)(v40 + 160);
    v64 = *(_QWORD *)(v40 + 168);
    v65 = *(_QWORD *)(v40 + 176);
    *(_DWORD *)buf = 134350336;
    *(_QWORD *)&buf[4] = v60;
    *(_WORD *)&buf[12] = 2050;
    *(_QWORD *)&buf[14] = v61;
    *(_WORD *)&buf[22] = 2050;
    *(_QWORD *)&buf[24] = v62;
    *(_WORD *)v130 = 2050;
    *(_QWORD *)&v130[2] = v63;
    *(_WORD *)&v130[10] = 2050;
    *(_QWORD *)&v130[12] = v64;
    *(_WORD *)&v130[20] = 2050;
    *(_QWORD *)&v130[22] = v65;
    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "#gdm,Velocity,horizSpeed,%{public}.2f,horizSpeedUnc,%{public}.2f,vertVel,%{public}.2f,vertVelUnc,%{public}.2f,course,%{public}.2f,courseUnc,%{public}.2f", buf, 0x3Eu);
  }
LABEL_47:
  v66 = v13[263];
  if (os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG))
  {
    if (*a3)
      v102 = -1171354717 * ((*(_QWORD *)(*a3 + 120) - *(_QWORD *)(*a3 + 112)) >> 4);
    else
      v102 = -1;
    if (*a4)
      v103 = -252645135 * ((*(_QWORD *)(*a4 + 8) - *(_QWORD *)*a4) >> 3);
    else
      v103 = -1;
    if (*a5)
      v104 = -1431655765 * ((*(_QWORD *)(*a5 + 8) - *(_QWORD *)*a5) >> 3);
    else
      v104 = -1;
    v105 = *a6 != 0;
    v106 = *a7 != 0;
    *(_DWORD *)buf = 67110400;
    *(_DWORD *)&buf[4] = (v128 >> 3) & 1;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v102;
    *(_WORD *)&buf[14] = 1024;
    *(_DWORD *)&buf[16] = v103;
    *(_WORD *)&buf[20] = 1024;
    *(_DWORD *)&buf[22] = v104;
    *(_WORD *)&buf[26] = 1024;
    *(_DWORD *)&buf[28] = v105;
    *(_WORD *)v130 = 1024;
    *(_DWORD *)&v130[2] = v106;
    _os_log_debug_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEBUG, "#gdm,pvtmCallback,hasFix,%d,nMeas,%d,nSvInfo,%d,nBand,%d,hasTimeInfo,%d,hasKlob,%d", buf, 0x26u);
  }
  v67 = atomic_load((unsigned __int8 *)&qword_100100288);
  if ((v67 & 1) == 0 && __cxa_guard_acquire(&qword_100100288))
  {
    v109 = (id *)GpsdPreferences::instance(0);
    byte_100100280 = GpsdPreferences::enableMeasurementApi(v109);
    __cxa_guard_release(&qword_100100288);
  }
  if (byte_100100280)
  {
    v68 = (_QWORD *)*a4;
    if (*a4)
      LOBYTE(v68) = *v68 != v68[1];
    v69 = (_QWORD *)*a5;
    if (*a5)
      LOBYTE(v69) = *v69 != v69[1];
    if (*a3)
      LOBYTE(v68) = 1;
    if ((v68 & 1) != 0 || (v69 & 1) != 0 || *a6 || *a7)
    {
      memset(buf, 0, sizeof(buf));
      *(_QWORD *)v130 = 0;
      *(_QWORD *)&v130[8] = -1;
      *(int64x2_t *)&v130[16] = vdupq_n_s64(0x7FF8000000000000uLL);
      *(_OWORD *)&v130[32] = *(_OWORD *)&v130[16];
      *(_OWORD *)v131 = *(_OWORD *)&v130[16];
      *(_WORD *)&v130[48] = 0;
      *(int32x2_t *)&v131[16] = vdup_n_s32(0x7FC00000u);
      *(_DWORD *)&v131[24] = 2143289344;
      *(_QWORD *)&v132 = 0x8000000000000000;
      __asm { FMOV            V1.2S, #-1.0 }
      *((_QWORD *)&v132 + 1) = _D1;
      *(_QWORD *)&v133 = 0x7FF8000000000000;
      DWORD2(v133) = -1082130432;
      memset(__p, 0, sizeof(__p));
      v135 = 0u;
      v136 = 0u;
      v137 = 0u;
      v138 = 0u;
      v139 = 0;
      *(_QWORD *)buf = CFAbsoluteTimeGetCurrent();
      *(double *)&buf[16] = v12;
      *(double *)&buf[8] = (double)gpsd::util::getMachAbsoluteTimeNs(v75) / 1000000000.0;
      v76 = *a3;
      if (*a3)
      {
        v77 = *(_OWORD *)v76;
        v78 = *(_OWORD *)(v76 + 32);
        *(_OWORD *)&v130[24] = *(_OWORD *)(v76 + 16);
        *(_OWORD *)&v130[40] = v78;
        *(_OWORD *)&v130[8] = v77;
        v79 = *(_OWORD *)(v76 + 48);
        v80 = *(_OWORD *)(v76 + 64);
        v81 = *(_OWORD *)(v76 + 96);
        v132 = *(_OWORD *)(v76 + 80);
        v133 = v81;
        *(_OWORD *)v131 = v79;
        *(_OWORD *)&v131[16] = v80;
        if (*(_QWORD *)&__p[0])
        {
          sub_1000319B4((uint64_t)__p, *(uint64_t *)&__p[0]);
          operator delete(*(void **)&__p[0]);
          memset(__p, 0, 24);
        }
        __p[0] = *(_OWORD *)(v76 + 112);
        *(_QWORD *)&__p[1] = *(_QWORD *)(v76 + 128);
        *(_QWORD *)(v76 + 112) = 0;
        *(_QWORD *)(v76 + 120) = 0;
        *(_QWORD *)(v76 + 128) = 0;
        if (!ReceiverClockConversion::isRxClockValid((ReceiverClockConversion *)(a1 + 2232), *(uint64_t *)&v130[8]))
        {
          sub_100021F04((uint64_t)buf);
          goto LABEL_93;
        }
        *(_QWORD *)&buf[24] = ReceiverClockConversion::feedPvtmCallback((ReceiverClockConversion *)(a1 + 2232), *(unint64_t *)&v130[8], *(double *)&buf[16]);
        *(_QWORD *)v130 = v82;
      }
      v83 = *a6;
      if (*a6)
      {
        v84 = *v83;
        *v83 = 0;
        v85 = *((_QWORD *)&v136 + 1);
        *((_QWORD *)&v136 + 1) = v84;
        if (v85)
          operator delete();
        v86 = v83[1];
        v83[1] = 0;
        v87 = v137;
        *(_QWORD *)&v137 = v86;
        if (v87)
          operator delete();
        v88 = v83[2];
        v83[2] = 0;
        v89 = *((_QWORD *)&v137 + 1);
        *((_QWORD *)&v137 + 1) = v88;
        if (v89)
          operator delete();
        v90 = v83[3];
        v83[3] = 0;
        v91 = v138;
        *(_QWORD *)&v138 = v90;
        if (v91)
          operator delete();
        v92 = v83[4];
        v83[4] = 0;
        v93 = *((_QWORD *)&v138 + 1);
        *((_QWORD *)&v138 + 1) = v92;
        if (v93)
          operator delete();
      }
      v94 = (__int128 *)*a5;
      if (*a5)
      {
        if ((_QWORD)v135)
        {
          *((_QWORD *)&v135 + 1) = v135;
          operator delete((void *)v135);
          v135 = 0uLL;
          *(_QWORD *)&v136 = 0;
        }
        v135 = *v94;
        *(_QWORD *)&v136 = *((_QWORD *)v94 + 2);
        *(_QWORD *)v94 = 0;
        *((_QWORD *)v94 + 1) = 0;
        *((_QWORD *)v94 + 2) = 0;
      }
      v95 = *a4;
      if (*a4)
      {
        v96 = (_QWORD *)*((_QWORD *)&__p[1] + 1);
        if (*((_QWORD *)&__p[1] + 1))
        {
          v97 = *(_QWORD **)&__p[2];
          v98 = (void *)*((_QWORD *)&__p[1] + 1);
          if (*(_QWORD *)&__p[2] != *((_QWORD *)&__p[1] + 1))
          {
            do
            {
              v97 -= 17;
              sub_100031AAC(v97);
            }
            while (v97 != v96);
            v98 = (void *)*((_QWORD *)&__p[1] + 1);
          }
          *(_QWORD *)&__p[2] = v96;
          operator delete(v98);
          memset((char *)&__p[1] + 8, 0, 24);
        }
        *(_OWORD *)((char *)&__p[1] + 8) = *(_OWORD *)v95;
        *((_QWORD *)&__p[2] + 1) = *(_QWORD *)(v95 + 16);
        *(_QWORD *)v95 = 0;
        *(_QWORD *)(v95 + 8) = 0;
        *(_QWORD *)(v95 + 16) = 0;
      }
      v99 = *a7;
      *a7 = 0;
      v100 = v139;
      v139 = v99;
      if (v100)
        operator delete();
      gnss::MeasurementData::fillIsUsableFlag((gnss::MeasurementData *)buf);
      v128 |= 0x10u;
      if (!*((_QWORD *)&v116 + 1))
        operator new();
      gnss::Convert::toProtobuf((gnss::Convert *)buf, *((const gnss::MeasurementData **)&v116 + 1), v101);
      sub_100021F04((uint64_t)buf);
    }
  }
  sub_10001A330(a1, (uint64_t)&v114);
LABEL_93:
  v114 = off_1000F9B50;
  proto::gpsd::Indication::SharedDtor(&v114);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)&v114);
}

void sub_100019E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void (**a15)(proto::gpsd::Indication *__hidden this))
{
  __cxa_guard_abort(&qword_100100288);
  a15 = off_1000F9B50;
  proto::gpsd::Indication::SharedDtor(&a15);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)&a15);
  _Unwind_Resume(a1);
}

void sub_100019E84(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  NSObject *v6;
  NSObject *v7;
  const std::string::value_type *v8;
  std::string v9;
  _BYTE buf[12];
  __int16 v11;
  double v12;
  __int16 v13;
  void *v14;
  char v15;
  std::string __p;
  char v17;

  if (!*(_BYTE *)(a1 + 1848) && !*(_BYTE *)(a1 + 1896) && !*(_BYTE *)(a1 + 1897))
  {
    v2 = (double)gpsd::util::getMachContinuousTimeNs((gpsd::util *)a1) * 0.000000001;
    v3 = v2 - *(double *)(a1 + 1856);
    if (v3 >= 0.2)
    {
      v4 = v2 - *(double *)(a1 + 1864);
      if (v4 + -24.0 >= v3)
        v5 = v2 - *(double *)(a1 + 1856);
      else
        v5 = v4 + -24.0;
      v6 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134349568;
        *(double *)&buf[4] = v5;
        v11 = 2050;
        v12 = v3;
        v13 = 2050;
        v14 = *(void **)&v4;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#gdm,outside NMEA/PVTM,any,%{public}.3f,secondsSinceStop,%{public}.3f,secondsSinceSideSpinup,%{public}.3f", buf, 0x20u);
      }
      if (v5 > 1.5)
      {
        v7 = qword_100100838;
        if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 134349568;
          *(double *)&buf[4] = v5;
          v11 = 2050;
          v12 = v3;
          v13 = 2050;
          v14 = *(void **)&v4;
          _os_log_fault_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "#gdm,outside NMEA/PVTM,severe,%{public}.3f,secondsSinceStop,%{public}.3f,secondsSinceSideSpinup,%{public}.3f", buf, 0x20u);
        }
        sub_100025B58(&v9, "LessThan5Seconds");
        if (v5 <= 300.0)
        {
          if (v5 <= 5.0)
          {
LABEL_18:
            sub_100025B58(buf, "Monitoring");
            sub_100025B58(&v14, "OutsideActivity");
            if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
              sub_100031B50(&__p, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
            else
              __p = v9;
            v17 = 0;
            gpsd::util::triggerDiagnosticReport((uint64_t)buf);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (v15 < 0)
              operator delete(v14);
            if (SHIBYTE(v13) < 0)
              operator delete(*(void **)buf);
            if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v9.__r_.__value_.__l.__data_);
            return;
          }
          v8 = "Between5And300Seconds";
        }
        else
        {
          v8 = "MoreThan300Seconds";
        }
        std::string::assign(&v9, v8);
        goto LABEL_18;
      }
    }
  }
}

void sub_10001A0F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *proto::gpsd::Indication::SharedDtor(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if ((_QWORD *)proto::gpsd::Indication::default_instance_ != this)
  {
    v1 = this;
    v2 = this[3];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = v1[4];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = v1[5];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = v1[6];
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = v1[7];
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = v1[8];
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = v1[9];
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = v1[10];
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = v1[11];
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = v1[13];
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v1[14];
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = v1[15];
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = v1[16];
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = v1[17];
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v16 = v1[18];
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = v1[19];
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v18 = v1[20];
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = v1[21];
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    v20 = v1[22];
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    v21 = v1[23];
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    this = (_QWORD *)v1[25];
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t sub_10001A330(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  void **v7;
  void *__p[2];
  char v9;
  uint8_t buf[4];
  void **v11;

  v4 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
  {
    gpsd::util::stringify(*(_DWORD *)(a2 + 8), (uint64_t)__p);
    v7 = v9 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v11 = v7;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gdm,sendIndication,%s", buf, 0xCu);
    if (v9 < 0)
      operator delete(__p[0]);
  }
  sub_10001A444(a1 + 928, a2);
  v5 = *(_QWORD *)(a1 + 2328);
  if (!v5)
    sub_100025CE8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, a2);
}

void sub_10001A43C(uint64_t a1, proto::gpsd::Indication *a2)
{
  sub_10001A524(*(_QWORD *)(a1 + 8), a2);
}

void sub_10001A444(uint64_t a1, uint64_t a2)
{
  int v4;
  float64x2_t *v5;
  float64x2_t v6;
  _QWORD *v7;

  v4 = *(_DWORD *)(a2 + 8);
  if (v4 == 3)
  {
    std::mutex::lock((std::mutex *)(a1 + 832));
    v5 = *(float64x2_t **)(a2 + 40);
    if (!v5)
      v5 = *(float64x2_t **)(proto::gpsd::Indication::default_instance_ + 40);
    v6 = v5[1];
    *(float64x2_t *)(a1 + 784) = vaddq_f64(v6, *(float64x2_t *)(a1 + 784));
    *(double *)(a1 + 800) = vmlad_n_f64(*(double *)(a1 + 800), v5[2].f64[0], v6.f64[0]);
    std::mutex::unlock((std::mutex *)(a1 + 832));
    v4 = *(_DWORD *)(a2 + 8);
  }
  if (v4 == 9)
  {
    std::mutex::lock((std::mutex *)(a1 + 832));
    v7 = *(_QWORD **)(a2 + 56);
    if (!v7)
      v7 = *(_QWORD **)(proto::gpsd::Indication::default_instance_ + 56);
    sub_100024E30(a1, v7);
    std::mutex::unlock((std::mutex *)(a1 + 832));
  }
}

void sub_10001A510(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10001A524(uint64_t a1, proto::gpsd::Indication *a2)
{
  int v2;
  NSObject *v3;
  BOOL v6;
  char v7;
  unsigned __int8 v8;
  GnssEmergencyManager_Private *v9;
  uint64_t v10;
  char v11;
  uint8_t buf[16];

  v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 1) != 0)
  {
    v6 = (v2 & 8) != 0 && *((_DWORD *)a2 + 2) == 1;
    v7 = !v6;
    if (!v6
      || (v8 = atomic_load((unsigned __int8 *)(a1 + 17)), (v8 & 1) == 0)
      || (v9 = *(GnssEmergencyManager_Private **)(a1 + 8)) == 0)
    {
      v10 = *(_QWORD *)(a1 + 168);
      if (!v10)
        sub_100025CE8();
      (*(void (**)(uint64_t, proto::gpsd::Indication *))(*(_QWORD *)v10 + 48))(v10, a2);
      v9 = *(GnssEmergencyManager_Private **)(a1 + 8);
    }
    if (v9)
      v11 = v7;
    else
      v11 = 1;
    if ((v11 & 1) == 0)
      GnssEmergencyManager_Private::handleDeviceIndication(v9, a2);
  }
  else
  {
    v3 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#router,handleIndication,noType", buf, 2u);
    }
  }
}

void sub_10001A688(uint64_t a1, int *a2)
{
  uint64_t v3;
  CLP::LogEntry::LogEntry *v4;
  uint64_t v5;
  uint64_t v6;
  ProtobufLogger *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  uint64_t v16;
  NSObject *v17;
  int v18;
  uint64_t v19;
  NSObject *v20;
  void *v21;
  NSObject *v22;
  xpc_object_t v23;
  _BYTE *v24;
  std::string *v25;
  std::string v26;
  _BYTE __str[56];
  void *__p;
  char v29;
  uint64_t v30;
  std::string v31;
  uint8_t buf[56];

  v3 = *(_QWORD *)(a1 + 8);
  std::mutex::lock((std::mutex *)(v3 + 40));
  if (*(_QWORD *)(v3 + 104) || *(_BYTE *)(v3 + 128))
  {
    v4 = CLP::LogEntry::LogEntry::LogEntry((CLP::LogEntry::LogEntry *)buf);
    v5 = sub_10003AE50((uint64_t)v4);
    *(_DWORD *)(v5 + 52) |= 0x10u;
    v6 = *(_QWORD *)(v5 + 40);
    if (!v6)
      operator new();
    if ((int *)v6 != a2)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
      proto::gpsd::Indication::MergeFrom((proto::gpsd::Indication *)v6, (const proto::gpsd::Indication *)a2);
    }
    v7 = *(ProtobufLogger **)(v3 + 104);
    if (v7)
      ProtobufLogger::log(v7, (const CLP::LogEntry::LogEntry *)buf);
    if (*(_BYTE *)(v3 + 128))
    {
      if ((*(_BYTE *)(v6 + 216) & 0x10) != 0)
      {
        v8 = *(_QWORD *)(v6 + 32);
        if (!v8)
          v8 = *(_QWORD *)(proto::gpsd::Indication::default_instance_ + 32);
        if ((*(_BYTE *)(v8 + 132) & 2) != 0)
        {
          v10 = *(_QWORD *)(v8 + 16);
          if (!v10)
            v10 = *(_QWORD *)(CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance_ + 16);
          v9 = *(_DWORD *)(v10 + 24);
        }
        else
        {
          v9 = -1;
        }
        std::to_string(&v31, v9);
        v11 = std::string::insert(&v31, 0, "stripped ");
        v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
        v26.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v12;
        v11->__r_.__value_.__l.__size_ = 0;
        v11->__r_.__value_.__r.__words[2] = 0;
        v11->__r_.__value_.__r.__words[0] = 0;
        v13 = std::string::append(&v26, " measurements");
        v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        *(_QWORD *)&__str[16] = *((_QWORD *)&v13->__r_.__value_.__l + 2);
        *(_OWORD *)__str = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v26.__r_.__value_.__l.__data_);
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v31.__r_.__value_.__l.__data_);
        *(_DWORD *)(v5 + 52) |= 2u;
        v15 = *(std::string **)(v5 + 16);
        if (v15 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        std::string::operator=(v15, (const std::string *)__str);
        v16 = *(_QWORD *)(v6 + 32);
        if (v16)
          CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::Clear(v16);
        *(_DWORD *)(v6 + 216) &= ~0x10u;
        if ((__str[23] & 0x80000000) != 0)
          operator delete(*(void **)__str);
      }
      sub_10003B048((uint64_t)__str);
      GpsdProtobufPrintingUtilities::printMessageInJson(v5, __str);
      v17 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
      {
        std::stringbuf::str(&v26, &__str[8]);
        v25 = (v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v26
            : (std::string *)v26.__r_.__value_.__r.__words[0];
        LODWORD(v31.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v31.__r_.__value_.__r.__words + 4) = (std::string::size_type)v25;
        _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "ProtoJson: %s", (uint8_t *)&v31, 0xCu);
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v26.__r_.__value_.__l.__data_);
      }
      if (v29 < 0)
        operator delete(__p);
      std::streambuf::~streambuf(&__str[8]);
      std::ios::~ios(&v30);
    }
    CLP::LogEntry::LogEntry::~LogEntry((CLP::LogEntry::LogEntry *)buf);
  }
  if (*(_QWORD *)(v3 + 16))
  {
    v18 = (*(uint64_t (**)(int *))(*(_QWORD *)a2 + 72))(a2);
    v19 = *(_QWORD *)(v3 + 112);
    if (v19)
      sub_100027824(v19, a2[2], v18);
    v21 = malloc_type_malloc(v18, 0xA7C11912uLL);
    v22 = qword_100100838;
    if (!v21)
    {
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__str = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "#gpsdClientManager,Indication memory allocation failed", __str, 2u);
        v22 = qword_100100838;
      }
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__str = 136446722;
        *(_QWORD *)&__str[4] = "/Library/Caches/com.apple.xbs/Sources/CoreGPS/Sources/Daemon/GpsdClientManager.mm";
        *(_WORD *)&__str[12] = 1026;
        *(_DWORD *)&__str[14] = 113;
        *(_WORD *)&__str[18] = 2082;
        *(_QWORD *)&__str[20] = "handleIndication";
        _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: assertion failure in %{public}s", __str, 0x1Cu);
      }
      sub_100025B58(__str, "assert");
      sub_100025B58(buf, "handleIndication");
      sub_100025B58(&v26, "#gpsdClientManager,Indication memory allocation failed");
      gpsd::util::triggerDiagnosticReport((uint64_t)__str, (__int128 *)buf, (__int128 *)&v26);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      if ((char)buf[23] < 0)
        operator delete(*(void **)buf);
      if ((__str[23] & 0x80000000) != 0)
        operator delete(*(void **)__str);
      __assert_rtn("handleIndication", "GpsdClientManager.mm", 113, "false && \"#gpsdClientManager,Indication memory allocation failed\"");
    }
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
    {
      gpsd::util::stringify(a2[2], (uint64_t)__str);
      if (__str[23] >= 0)
        v24 = __str;
      else
        v24 = *(_BYTE **)__str;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v24;
      _os_log_debug_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "#gpsdClientManager,sendIndication,%s", buf, 0xCu);
      if ((__str[23] & 0x80000000) != 0)
        operator delete(*(void **)__str);
    }
    wireless_diagnostics::google::protobuf::MessageLite::SerializeToArray((wireless_diagnostics::google::protobuf::MessageLite *)a2, v21, v18);
    v23 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_data(v23, "gpsdIndication", v21, v18);
    xpc_connection_send_message(*(xpc_connection_t *)(v3 + 16), v23);
    xpc_release(v23);
    free(v21);
  }
  else
  {
    v20 = qword_100100830;
    if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__str = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#gpsdClientManager,No remote connection to send indication", __str, 2u);
    }
  }
  std::mutex::unlock((std::mutex *)(v3 + 40));
}

void sub_10001ACE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  std::mutex *v35;
  uint64_t v36;

  if (a16 < 0)
    operator delete(__p);
  if (*(char *)(v36 - 153) < 0)
    operator delete(*(void **)(v36 - 176));
  CLP::LogEntry::LogEntry::~LogEntry((CLP::LogEntry::LogEntry *)(v36 - 144));
  std::mutex::unlock(v35);
  _Unwind_Resume(a1);
}

uint64_t proto::gpsd::Indication::ByteSize(proto::gpsd::Indication *this, unint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  proto::gnss::Fix *v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  int v12;
  CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;
  int v16;
  proto::gnss::PwrMeasurement *v17;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v18;
  int v19;
  int v20;
  proto::gpsd::Status *v21;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v22;
  int v23;
  int v24;
  proto::gnss::TimeTransferDataExtend *v25;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v26;
  int v27;
  int v28;
  proto::gpsd::RecoveryStatistics *v29;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v30;
  int v31;
  int v32;
  proto::gpsd::LtlInfoRequest *v33;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v34;
  int v35;
  int v36;
  proto::gnss::DecodedExtendedEphemeris *v37;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v38;
  int v39;
  int v40;
  proto::gnss::DecodedRti *v41;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v42;
  int v43;
  int v44;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v45;
  int v46;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v47;
  int v48;
  uint64_t v49;
  int v50;
  proto::gpsd::Exception *v51;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v52;
  int v53;
  int v54;
  uint64_t v55;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v56;
  int v57;
  int v58;
  proto::gnss::Emergency::SummaryReport *v59;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v60;
  int v61;
  int v62;
  proto::gnss::Emergency::PositionReport *v63;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v64;
  int v65;
  int v66;
  proto::gnss::Emergency::MeasurementReport *v67;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v68;
  int v69;
  int v70;
  proto::gnss::Emergency::AssistanceNeededReport *v71;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v72;
  int v73;
  int v74;
  proto::gnss::Emergency::CellFTAssistanceRequest *v75;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v76;
  int v77;
  int v78;
  proto::gnss::Emergency::MeasurementReportWithEstimate *v79;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v80;
  int v81;
  int v82;
  proto::gnss::Emergency::SessionStatus *v83;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v84;
  int v85;
  int v86;
  proto::gnss::Emergency::Init *v87;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v88;
  int v89;
  int v90;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v91;
  int v92;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v93;
  int v94;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v95;
  int v96;
  proto::gnss::Emergency::WlanMeasurementRequest *v97;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v98;
  unsigned int v99;
  int v100;
  int v101;

  v3 = *((_DWORD *)this + 54);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_56;
  }
  if ((v3 & 1) == 0)
  {
    v4 = 0;
    if ((v3 & 2) == 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
  if ((v5 & 0x80000000) != 0)
  {
    v6 = 10;
  }
  else if (v5 >= 0x80)
  {
    v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
    v3 = *((_DWORD *)this + 54);
  }
  else
  {
    v6 = 1;
  }
  v4 = (v6 + 1);
  if ((v3 & 2) != 0)
  {
LABEL_12:
    v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
    if ((v7 & 0x80000000) != 0)
    {
      v8 = 10;
    }
    else if (v7 >= 0x80)
    {
      v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
      v3 = *((_DWORD *)this + 54);
    }
    else
    {
      v8 = 1;
    }
    v4 = (v4 + v8 + 1);
  }
LABEL_18:
  if ((v3 & 4) != 0)
  {
    v4 = v4
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 2), a2)+ 1;
    v3 = *((_DWORD *)this + 54);
    if ((v3 & 8) == 0)
    {
LABEL_20:
      if ((v3 & 0x10) == 0)
        goto LABEL_21;
      goto LABEL_32;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_20;
  }
  v9 = (proto::gnss::Fix *)*((_QWORD *)this + 3);
  if (!v9)
    v9 = *(proto::gnss::Fix **)(proto::gpsd::Indication::default_instance_ + 24);
  v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Fix::ByteSize(v9, a2);
  v11 = (int)v10;
  if (v10 >= 0x80)
    v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2);
  else
    v12 = 1;
  v4 = (v4 + v11 + v12 + 1);
  v3 = *((_DWORD *)this + 54);
  if ((v3 & 0x10) == 0)
  {
LABEL_21:
    if ((v3 & 0x20) == 0)
      goto LABEL_22;
    goto LABEL_38;
  }
LABEL_32:
  v13 = (CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *)*((_QWORD *)this + 4);
  if (!v13)
    v13 = *(CLP::LogEntry::PrivateData::MeasurementReportCallbackContents **)(proto::gpsd::Indication::default_instance_
                                                                            + 32);
  v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::ByteSize(v13, a2);
  v15 = (int)v14;
  if (v14 >= 0x80)
    v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2);
  else
    v16 = 1;
  v4 = (v4 + v15 + v16 + 1);
  v3 = *((_DWORD *)this + 54);
  if ((v3 & 0x20) == 0)
  {
LABEL_22:
    if ((v3 & 0x40) == 0)
      goto LABEL_23;
    goto LABEL_44;
  }
LABEL_38:
  v17 = (proto::gnss::PwrMeasurement *)*((_QWORD *)this + 5);
  if (!v17)
    v17 = *(proto::gnss::PwrMeasurement **)(proto::gpsd::Indication::default_instance_ + 40);
  v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::PwrMeasurement::ByteSize(v17, a2);
  v19 = (int)v18;
  if (v18 >= 0x80)
    v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18, a2);
  else
    v20 = 1;
  v4 = (v4 + v19 + v20 + 1);
  v3 = *((_DWORD *)this + 54);
  if ((v3 & 0x40) == 0)
  {
LABEL_23:
    if ((v3 & 0x80) == 0)
      goto LABEL_56;
    goto LABEL_50;
  }
LABEL_44:
  v21 = (proto::gpsd::Status *)*((_QWORD *)this + 6);
  if (!v21)
    v21 = *(proto::gpsd::Status **)(proto::gpsd::Indication::default_instance_ + 48);
  v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gpsd::Status::ByteSize(v21, a2);
  v23 = (int)v22;
  if (v22 >= 0x80)
    v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22, a2);
  else
    v24 = 1;
  v4 = (v4 + v23 + v24 + 1);
  v3 = *((_DWORD *)this + 54);
  if ((v3 & 0x80) != 0)
  {
LABEL_50:
    v25 = (proto::gnss::TimeTransferDataExtend *)*((_QWORD *)this + 7);
    if (!v25)
      v25 = *(proto::gnss::TimeTransferDataExtend **)(proto::gpsd::Indication::default_instance_ + 56);
    v26 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::TimeTransferDataExtend::ByteSize(v25, a2);
    v27 = (int)v26;
    if (v26 >= 0x80)
      v28 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v26, a2);
    else
      v28 = 1;
    v4 = (v4 + v27 + v28 + 1);
    v3 = *((_DWORD *)this + 54);
  }
LABEL_56:
  if ((v3 & 0xFF00) == 0)
    goto LABEL_114;
  if ((v3 & 0x100) != 0)
  {
    v29 = (proto::gpsd::RecoveryStatistics *)*((_QWORD *)this + 8);
    if (!v29)
      v29 = *(proto::gpsd::RecoveryStatistics **)(proto::gpsd::Indication::default_instance_ + 64);
    v30 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gpsd::RecoveryStatistics::ByteSize(v29, a2);
    v31 = (int)v30;
    if (v30 >= 0x80)
      v32 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v30, a2);
    else
      v32 = 1;
    v4 = (v4 + v31 + v32 + 2);
    v3 = *((_DWORD *)this + 54);
    if ((v3 & 0x200) == 0)
    {
LABEL_59:
      if ((v3 & 0x400) == 0)
        goto LABEL_60;
      goto LABEL_78;
    }
  }
  else if ((v3 & 0x200) == 0)
  {
    goto LABEL_59;
  }
  v33 = (proto::gpsd::LtlInfoRequest *)*((_QWORD *)this + 9);
  if (!v33)
    v33 = *(proto::gpsd::LtlInfoRequest **)(proto::gpsd::Indication::default_instance_ + 72);
  v34 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gpsd::LtlInfoRequest::ByteSize(v33, a2);
  v35 = (int)v34;
  if (v34 >= 0x80)
    v36 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v34, a2);
  else
    v36 = 1;
  v4 = (v4 + v35 + v36 + 2);
  v3 = *((_DWORD *)this + 54);
  if ((v3 & 0x400) == 0)
  {
LABEL_60:
    if ((v3 & 0x800) == 0)
      goto LABEL_61;
    goto LABEL_84;
  }
LABEL_78:
  v37 = (proto::gnss::DecodedExtendedEphemeris *)*((_QWORD *)this + 10);
  if (!v37)
    v37 = *(proto::gnss::DecodedExtendedEphemeris **)(proto::gpsd::Indication::default_instance_ + 80);
  v38 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::DecodedExtendedEphemeris::ByteSize(v37, a2);
  v39 = (int)v38;
  if (v38 >= 0x80)
    v40 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v38, a2);
  else
    v40 = 1;
  v4 = (v4 + v39 + v40 + 2);
  v3 = *((_DWORD *)this + 54);
  if ((v3 & 0x800) == 0)
  {
LABEL_61:
    if ((v3 & 0x1000) == 0)
      goto LABEL_62;
    goto LABEL_90;
  }
LABEL_84:
  v41 = (proto::gnss::DecodedRti *)*((_QWORD *)this + 11);
  if (!v41)
    v41 = *(proto::gnss::DecodedRti **)(proto::gpsd::Indication::default_instance_ + 88);
  v42 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::DecodedRti::ByteSize(v41, a2);
  v43 = (int)v42;
  if (v42 >= 0x80)
    v44 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v42, a2);
  else
    v44 = 1;
  v4 = (v4 + v43 + v44 + 2);
  v3 = *((_DWORD *)this + 54);
  if ((v3 & 0x1000) == 0)
  {
LABEL_62:
    if ((v3 & 0x2000) == 0)
      goto LABEL_63;
    goto LABEL_96;
  }
LABEL_90:
  v45 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 24);
  if ((v45 & 0x80000000) != 0)
  {
    v46 = 10;
  }
  else if (v45 >= 0x80)
  {
    v46 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v45, a2);
    v3 = *((_DWORD *)this + 54);
  }
  else
  {
    v46 = 1;
  }
  v4 = (v4 + v46 + 2);
  if ((v3 & 0x2000) == 0)
  {
LABEL_63:
    if ((v3 & 0x4000) == 0)
      goto LABEL_64;
    goto LABEL_102;
  }
LABEL_96:
  v47 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 25);
  if ((v47 & 0x80000000) != 0)
  {
    v48 = 10;
  }
  else if (v47 >= 0x80)
  {
    v48 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v47, a2);
    v3 = *((_DWORD *)this + 54);
  }
  else
  {
    v48 = 1;
  }
  v4 = (v4 + v48 + 2);
  if ((v3 & 0x4000) == 0)
  {
LABEL_64:
    if ((v3 & 0x8000) == 0)
      goto LABEL_114;
    goto LABEL_108;
  }
LABEL_102:
  v49 = *((_QWORD *)this + 13);
  if (!v49)
    v49 = *(_QWORD *)(proto::gpsd::Indication::default_instance_ + 104);
  if (*(_DWORD *)(v49 + 16))
    v50 = 2 * (*(_DWORD *)(v49 + 16) & 1);
  else
    v50 = 0;
  *(_DWORD *)(v49 + 12) = v50;
  v4 = (v4 + v50 + 3);
  v3 = *((_DWORD *)this + 54);
  if ((v3 & 0x8000) != 0)
  {
LABEL_108:
    v51 = (proto::gpsd::Exception *)*((_QWORD *)this + 14);
    if (!v51)
      v51 = *(proto::gpsd::Exception **)(proto::gpsd::Indication::default_instance_ + 112);
    v52 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gpsd::Exception::ByteSize(v51, a2);
    v53 = (int)v52;
    if (v52 >= 0x80)
      v54 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v52, a2);
    else
      v54 = 1;
    v4 = (v4 + v53 + v54 + 2);
    v3 = *((_DWORD *)this + 54);
  }
LABEL_114:
  if ((v3 & 0xFF0000) == 0)
    goto LABEL_172;
  if ((v3 & 0x10000) != 0)
  {
    v55 = *((_QWORD *)this + 15);
    if (!v55)
      v55 = *(_QWORD *)(proto::gpsd::Indication::default_instance_ + 120);
    v56 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1000C4D04(v55, a2);
    v57 = (int)v56;
    if (v56 >= 0x80)
      v58 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v56, a2);
    else
      v58 = 1;
    v4 = (v4 + v57 + v58 + 2);
    v3 = *((_DWORD *)this + 54);
    if ((v3 & 0x20000) == 0)
    {
LABEL_117:
      if ((v3 & 0x40000) == 0)
        goto LABEL_118;
      goto LABEL_136;
    }
  }
  else if ((v3 & 0x20000) == 0)
  {
    goto LABEL_117;
  }
  v59 = (proto::gnss::Emergency::SummaryReport *)*((_QWORD *)this + 16);
  if (!v59)
    v59 = *(proto::gnss::Emergency::SummaryReport **)(proto::gpsd::Indication::default_instance_ + 128);
  v60 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::SummaryReport::ByteSize(v59, a2);
  v61 = (int)v60;
  if (v60 >= 0x80)
    v62 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v60, a2);
  else
    v62 = 1;
  v4 = (v4 + v61 + v62 + 2);
  v3 = *((_DWORD *)this + 54);
  if ((v3 & 0x40000) == 0)
  {
LABEL_118:
    if ((v3 & 0x80000) == 0)
      goto LABEL_119;
    goto LABEL_142;
  }
LABEL_136:
  v63 = (proto::gnss::Emergency::PositionReport *)*((_QWORD *)this + 17);
  if (!v63)
    v63 = *(proto::gnss::Emergency::PositionReport **)(proto::gpsd::Indication::default_instance_ + 136);
  v64 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::PositionReport::ByteSize(v63, a2);
  v65 = (int)v64;
  if (v64 >= 0x80)
    v66 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v64, a2);
  else
    v66 = 1;
  v4 = (v4 + v65 + v66 + 2);
  v3 = *((_DWORD *)this + 54);
  if ((v3 & 0x80000) == 0)
  {
LABEL_119:
    if ((v3 & 0x100000) == 0)
      goto LABEL_120;
    goto LABEL_148;
  }
LABEL_142:
  v67 = (proto::gnss::Emergency::MeasurementReport *)*((_QWORD *)this + 18);
  if (!v67)
    v67 = *(proto::gnss::Emergency::MeasurementReport **)(proto::gpsd::Indication::default_instance_ + 144);
  v68 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::MeasurementReport::ByteSize(v67, a2);
  v69 = (int)v68;
  if (v68 >= 0x80)
    v70 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v68, a2);
  else
    v70 = 1;
  v4 = (v4 + v69 + v70 + 2);
  v3 = *((_DWORD *)this + 54);
  if ((v3 & 0x100000) == 0)
  {
LABEL_120:
    if ((v3 & 0x200000) == 0)
      goto LABEL_121;
    goto LABEL_154;
  }
LABEL_148:
  v71 = (proto::gnss::Emergency::AssistanceNeededReport *)*((_QWORD *)this + 19);
  if (!v71)
    v71 = *(proto::gnss::Emergency::AssistanceNeededReport **)(proto::gpsd::Indication::default_instance_ + 152);
  v72 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::AssistanceNeededReport::ByteSize(v71, a2);
  v73 = (int)v72;
  if (v72 >= 0x80)
    v74 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v72, a2);
  else
    v74 = 1;
  v4 = (v4 + v73 + v74 + 2);
  v3 = *((_DWORD *)this + 54);
  if ((v3 & 0x200000) == 0)
  {
LABEL_121:
    if ((v3 & 0x400000) == 0)
      goto LABEL_122;
    goto LABEL_160;
  }
LABEL_154:
  v75 = (proto::gnss::Emergency::CellFTAssistanceRequest *)*((_QWORD *)this + 20);
  if (!v75)
    v75 = *(proto::gnss::Emergency::CellFTAssistanceRequest **)(proto::gpsd::Indication::default_instance_ + 160);
  v76 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::CellFTAssistanceRequest::ByteSize(v75, a2);
  v77 = (int)v76;
  if (v76 >= 0x80)
    v78 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v76, a2);
  else
    v78 = 1;
  v4 = (v4 + v77 + v78 + 2);
  v3 = *((_DWORD *)this + 54);
  if ((v3 & 0x400000) == 0)
  {
LABEL_122:
    if ((v3 & 0x800000) == 0)
      goto LABEL_172;
    goto LABEL_166;
  }
LABEL_160:
  v79 = (proto::gnss::Emergency::MeasurementReportWithEstimate *)*((_QWORD *)this + 21);
  if (!v79)
    v79 = *(proto::gnss::Emergency::MeasurementReportWithEstimate **)(proto::gpsd::Indication::default_instance_ + 168);
  v80 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::MeasurementReportWithEstimate::ByteSize(v79, a2);
  v81 = (int)v80;
  if (v80 >= 0x80)
    v82 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v80, a2);
  else
    v82 = 1;
  v4 = (v4 + v81 + v82 + 2);
  v3 = *((_DWORD *)this + 54);
  if ((v3 & 0x800000) != 0)
  {
LABEL_166:
    v83 = (proto::gnss::Emergency::SessionStatus *)*((_QWORD *)this + 22);
    if (!v83)
      v83 = *(proto::gnss::Emergency::SessionStatus **)(proto::gpsd::Indication::default_instance_ + 176);
    v84 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::SessionStatus::ByteSize(v83, a2);
    v85 = (int)v84;
    if (v84 >= 0x80)
      v86 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v84, a2);
    else
      v86 = 1;
    v4 = (v4 + v85 + v86 + 2);
    v3 = *((_DWORD *)this + 54);
  }
LABEL_172:
  if (!HIBYTE(v3))
    goto LABEL_205;
  if ((v3 & 0x1000000) != 0)
  {
    v87 = (proto::gnss::Emergency::Init *)*((_QWORD *)this + 23);
    if (!v87)
      v87 = *(proto::gnss::Emergency::Init **)(proto::gpsd::Indication::default_instance_ + 184);
    v88 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::Init::ByteSize(v87, a2);
    v89 = (int)v88;
    if (v88 >= 0x80)
      v90 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v88, a2);
    else
      v90 = 1;
    v4 = (v4 + v89 + v90 + 2);
    v3 = *((_DWORD *)this + 54);
    if ((v3 & 0x2000000) == 0)
    {
LABEL_175:
      if ((v3 & 0x4000000) == 0)
        goto LABEL_176;
      goto LABEL_189;
    }
  }
  else if ((v3 & 0x2000000) == 0)
  {
    goto LABEL_175;
  }
  v91 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 48);
  if (v91 >= 0x80)
  {
    v92 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v91, a2) + 2;
    v3 = *((_DWORD *)this + 54);
  }
  else
  {
    v92 = 3;
  }
  v4 = (v92 + v4);
  if ((v3 & 0x4000000) == 0)
  {
LABEL_176:
    if ((v3 & 0x8000000) == 0)
      goto LABEL_177;
LABEL_195:
    v95 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 52);
    if (v95 >= 0x80)
    {
      v96 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v95, a2) + 2;
      v3 = *((_DWORD *)this + 54);
    }
    else
    {
      v96 = 3;
    }
    v4 = (v96 + v4);
    if ((v3 & 0x10000000) == 0)
      goto LABEL_205;
    goto LABEL_199;
  }
LABEL_189:
  v93 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 49);
  if ((v93 & 0x80000000) != 0)
  {
    v94 = 12;
  }
  else if (v93 >= 0x80)
  {
    v94 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v93, a2) + 2;
    v3 = *((_DWORD *)this + 54);
  }
  else
  {
    v94 = 3;
  }
  v4 = (v94 + v4);
  if ((v3 & 0x8000000) != 0)
    goto LABEL_195;
LABEL_177:
  if ((v3 & 0x10000000) == 0)
    goto LABEL_205;
LABEL_199:
  v97 = (proto::gnss::Emergency::WlanMeasurementRequest *)*((_QWORD *)this + 25);
  if (!v97)
    v97 = *(proto::gnss::Emergency::WlanMeasurementRequest **)(proto::gpsd::Indication::default_instance_ + 200);
  v98 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::WlanMeasurementRequest::ByteSize(v97, a2);
  v100 = (int)v98;
  if (v98 >= 0x80)
    v101 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v98, v99);
  else
    v101 = 1;
  v4 = (v4 + v100 + v101 + 2);
LABEL_205:
  *((_DWORD *)this + 53) = v4;
  return v4;
}

uint64_t CLP::LogEntry::PrivateData::MeasurementReport::ByteSize(CLP::LogEntry::PrivateData::MeasurementReport *this, unint64_t a2)
{
  int v3;
  CLP::LogEntry::PrivateData::Clock *v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  int v13;

  if ((*((_BYTE *)this + 44) & 1) != 0)
  {
    v4 = (CLP::LogEntry::PrivateData::Clock *)*((_QWORD *)this + 1);
    if (!v4)
      v4 = *(CLP::LogEntry::PrivateData::Clock **)(qword_1001005C8 + 8);
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLP::LogEntry::PrivateData::Clock::ByteSize(v4, a2);
    v6 = (int)v5;
    if (v5 >= 0x80)
      v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
    else
      v7 = 1;
    v3 = v6 + v7 + 1;
  }
  else
  {
    v3 = 0;
  }
  v8 = *((_DWORD *)this + 6);
  v9 = (v8 + v3);
  if (v8 >= 1)
  {
    v10 = 0;
    do
    {
      v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLP::LogEntry::PrivateData::Measurement::ByteSize(*(CLP::LogEntry::PrivateData::Measurement **)(*((_QWORD *)this + 2) + 8 * v10), a2);
      v12 = (int)v11;
      if (v11 >= 0x80)
        v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2);
      else
        v13 = 1;
      v9 = (v12 + v9 + v13);
      ++v10;
    }
    while (v10 < *((int *)this + 6));
  }
  *((_DWORD *)this + 10) = v9;
  return v9;
}

uint64_t CLP::LogEntry::PrivateData::Measurement::ByteSize(CLP::LogEntry::PrivateData::Measurement *this, unint64_t a2)
{
  int v3;
  uint64_t v4;
  CLP::LogEntry::PrivateData::SvId *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  int v8;
  CLP::LogEntry::PrivateData::SyncState *v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  CLP::LogEntry::PrivateData::PhaseTracking *v19;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v20;
  int v21;
  int v22;
  CLP::LogEntry::PrivateData::MeasurementExtension *v23;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v24;
  int v25;
  int v26;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking *v33;

  v3 = *((_DWORD *)this + 28);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_52;
  }
  if ((v3 & 1) == 0)
  {
    v4 = 0;
    if ((v3 & 2) == 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  v5 = (CLP::LogEntry::PrivateData::SvId *)*((_QWORD *)this + 1);
  if (!v5)
    v5 = *(CLP::LogEntry::PrivateData::SvId **)(qword_1001005A0 + 8);
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLP::LogEntry::PrivateData::SvId::ByteSize(v5, a2);
  v7 = (int)v6;
  if (v6 >= 0x80)
    v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2);
  else
    v8 = 1;
  v4 = (v7 + v8 + 1);
  v3 = *((_DWORD *)this + 28);
  if ((v3 & 2) != 0)
  {
LABEL_12:
    v9 = (CLP::LogEntry::PrivateData::SyncState *)*((_QWORD *)this + 2);
    if (!v9)
      v9 = *(CLP::LogEntry::PrivateData::SyncState **)(qword_1001005A0 + 16);
    v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLP::LogEntry::PrivateData::SyncState::ByteSize(v9, a2);
    v11 = (int)v10;
    if (v10 >= 0x80)
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2);
    else
      v12 = 1;
    v4 = (v4 + v11 + v12 + 1);
    v3 = *((_DWORD *)this + 28);
  }
LABEL_18:
  if ((v3 & 4) != 0)
  {
    v4 = v4
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 3), a2)+ 1;
    v3 = *((_DWORD *)this + 28);
    if ((v3 & 8) == 0)
    {
LABEL_20:
      if ((v3 & 0x10) == 0)
        goto LABEL_21;
      goto LABEL_27;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_20;
  }
  v4 = v4
     + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 4), a2)+ 1;
  v3 = *((_DWORD *)this + 28);
  if ((v3 & 0x10) == 0)
  {
LABEL_21:
    if ((v3 & 0x20) == 0)
      goto LABEL_22;
    goto LABEL_28;
  }
LABEL_27:
  v4 = v4
     + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 5), a2)+ 1;
  v3 = *((_DWORD *)this + 28);
  if ((v3 & 0x20) == 0)
  {
LABEL_22:
    if ((v3 & 0x40) == 0)
      goto LABEL_23;
    goto LABEL_37;
  }
LABEL_28:
  v13 = *((_QWORD *)this + 6);
  if (!v13)
    v13 = *(_QWORD *)(qword_1001005A0 + 48);
  v14 = *(unsigned __int8 *)(v13 + 32);
  if (*(_BYTE *)(v13 + 32))
  {
    v15 = (v14 << 31 >> 31) & 9;
    if ((v14 & 2) != 0)
      v15 += 9;
    if ((v14 & 4) != 0)
      v14 = v15 + 2;
    else
      v14 = v15;
  }
  *(_DWORD *)(v13 + 28) = v14;
  v4 = (v4 + v14 + 2);
  v3 = *((_DWORD *)this + 28);
  if ((v3 & 0x40) == 0)
  {
LABEL_23:
    if ((v3 & 0x80) == 0)
      goto LABEL_52;
    goto LABEL_46;
  }
LABEL_37:
  v16 = *((_QWORD *)this + 7);
  if (!v16)
    v16 = *(_QWORD *)(qword_1001005A0 + 56);
  v17 = *(unsigned __int8 *)(v16 + 32);
  if (*(_BYTE *)(v16 + 32))
  {
    v18 = (v17 << 31 >> 31) & 9;
    if ((v17 & 2) != 0)
      v18 += 9;
    if ((v17 & 4) != 0)
      v17 = v18 + 2;
    else
      v17 = v18;
  }
  *(_DWORD *)(v16 + 28) = v17;
  v4 = (v4 + v17 + 2);
  v3 = *((_DWORD *)this + 28);
  if ((v3 & 0x80) != 0)
  {
LABEL_46:
    v19 = (CLP::LogEntry::PrivateData::PhaseTracking *)*((_QWORD *)this + 8);
    if (!v19)
      v19 = *(CLP::LogEntry::PrivateData::PhaseTracking **)(qword_1001005A0 + 64);
    v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLP::LogEntry::PrivateData::PhaseTracking::ByteSize(v19, a2);
    v21 = (int)v20;
    if (v20 >= 0x80)
      v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20, a2);
    else
      v22 = 1;
    v4 = (v4 + v21 + v22 + 1);
    v3 = *((_DWORD *)this + 28);
  }
LABEL_52:
  if ((v3 & 0xFF00) != 0)
  {
    if ((v3 & 0x100) != 0)
    {
      v23 = (CLP::LogEntry::PrivateData::MeasurementExtension *)*((_QWORD *)this + 9);
      if (!v23)
        v23 = *(CLP::LogEntry::PrivateData::MeasurementExtension **)(qword_1001005A0 + 72);
      v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLP::LogEntry::PrivateData::MeasurementExtension::ByteSize(v23, a2);
      v25 = (int)v24;
      if (v24 >= 0x80)
        v26 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v24, a2);
      else
        v26 = 1;
      LODWORD(v4) = v4 + v25 + v26 + 1;
      v3 = *((_DWORD *)this + 28);
    }
    if ((v3 & 0x200) != 0)
      LODWORD(v4) = v4 + 5;
    if ((v3 & 0x400) != 0)
    {
      v27 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 21);
      if ((v27 & 0x80000000) != 0)
      {
        v28 = 11;
      }
      else if (v27 >= 0x80)
      {
        v28 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v27, a2) + 1;
        v3 = *((_DWORD *)this + 28);
      }
      else
      {
        v28 = 2;
      }
      LODWORD(v4) = v28 + v4;
    }
    if ((v3 & 0x800) != 0)
    {
      v29 = *((_QWORD *)this + 11);
      if (!v29)
        v29 = *(_QWORD *)(qword_1001005A0 + 88);
      v30 = *(unsigned __int8 *)(v29 + 32);
      v31 = (v30 << 31 >> 31) & 9;
      if ((v30 & 2) != 0)
        v31 += 9;
      if ((v30 & 4) != 0)
        v31 += 2;
      if (*(_BYTE *)(v29 + 32))
        v32 = v31;
      else
        v32 = 0;
      *(_DWORD *)(v29 + 28) = v32;
      LODWORD(v4) = v4 + v32 + 2;
      v3 = *((_DWORD *)this + 28);
    }
    if ((v3 & 0x1000) != 0)
      v4 = (v4 + 2);
    else
      v4 = v4;
    if ((v3 & 0x2000) != 0)
    {
      v33 = (CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking *)*((_QWORD *)this + 12);
      if (!v33)
        v33 = *(CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking **)(qword_1001005A0 + 96);
      v4 = v4
         + CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking::ByteSize(v33)
         + 2;
    }
  }
  *((_DWORD *)this + 27) = v4;
  return v4;
}

uint64_t CLP::LogEntry::PrivateData::SyncState::ByteSize(CLP::LogEntry::PrivateData::SyncState *this, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  CLP::LogEntry::PrivateData::GpsL1SyncState *v7;
  CLP::LogEntry::PrivateData::GpsL2CSyncState *v8;
  CLP::LogEntry::PrivateData::GpsL5SyncState *v9;
  CLP::LogEntry::PrivateData::GlonassL1fSyncState *v10;
  CLP::LogEntry::PrivateData::BeidouB1SyncState *v11;
  CLP::LogEntry::PrivateData::BeidouB2SyncState *v12;
  CLP::LogEntry::PrivateData::GalileoE1SyncState *v13;
  CLP::LogEntry::PrivateData::GalileoE5SyncState *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  CLP::LogEntry::PrivateData::GpsL1SyncState *v19;

  v3 = *((_DWORD *)this + 24);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_40;
  }
  if ((v3 & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 22);
    if ((v5 & 0x80000000) != 0)
    {
      v6 = 10;
    }
    else if (v5 >= 0x80)
    {
      v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
      v3 = *((_DWORD *)this + 24);
    }
    else
    {
      v6 = 1;
    }
    v4 = (v6 + 1);
    if ((v3 & 2) == 0)
      goto LABEL_15;
  }
  else
  {
    v4 = 0;
    if ((v3 & 2) == 0)
      goto LABEL_15;
  }
  v7 = (CLP::LogEntry::PrivateData::GpsL1SyncState *)*((_QWORD *)this + 1);
  if (!v7)
    v7 = *(CLP::LogEntry::PrivateData::GpsL1SyncState **)(qword_100100558 + 8);
  v4 = v4 + CLP::LogEntry::PrivateData::GpsL1SyncState::ByteSize(v7) + 2;
  v3 = *((_DWORD *)this + 24);
LABEL_15:
  if ((v3 & 4) != 0)
  {
    v8 = (CLP::LogEntry::PrivateData::GpsL2CSyncState *)*((_QWORD *)this + 2);
    if (!v8)
      v8 = *(CLP::LogEntry::PrivateData::GpsL2CSyncState **)(qword_100100558 + 16);
    v4 = v4 + CLP::LogEntry::PrivateData::GpsL2CSyncState::ByteSize(v8) + 2;
    v3 = *((_DWORD *)this + 24);
    if ((v3 & 8) == 0)
    {
LABEL_17:
      if ((v3 & 0x10) == 0)
        goto LABEL_18;
      goto LABEL_28;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_17;
  }
  v9 = (CLP::LogEntry::PrivateData::GpsL5SyncState *)*((_QWORD *)this + 3);
  if (!v9)
    v9 = *(CLP::LogEntry::PrivateData::GpsL5SyncState **)(qword_100100558 + 24);
  v4 = v4 + CLP::LogEntry::PrivateData::GpsL5SyncState::ByteSize(v9) + 2;
  v3 = *((_DWORD *)this + 24);
  if ((v3 & 0x10) == 0)
  {
LABEL_18:
    if ((v3 & 0x20) == 0)
      goto LABEL_19;
    goto LABEL_31;
  }
LABEL_28:
  v10 = (CLP::LogEntry::PrivateData::GlonassL1fSyncState *)*((_QWORD *)this + 4);
  if (!v10)
    v10 = *(CLP::LogEntry::PrivateData::GlonassL1fSyncState **)(qword_100100558 + 32);
  v4 = v4 + CLP::LogEntry::PrivateData::GlonassL1fSyncState::ByteSize(v10) + 2;
  v3 = *((_DWORD *)this + 24);
  if ((v3 & 0x20) == 0)
  {
LABEL_19:
    if ((v3 & 0x40) == 0)
      goto LABEL_20;
    goto LABEL_34;
  }
LABEL_31:
  v11 = (CLP::LogEntry::PrivateData::BeidouB1SyncState *)*((_QWORD *)this + 5);
  if (!v11)
    v11 = *(CLP::LogEntry::PrivateData::BeidouB1SyncState **)(qword_100100558 + 40);
  v4 = v4 + CLP::LogEntry::PrivateData::BeidouB1SyncState::ByteSize(v11) + 2;
  v3 = *((_DWORD *)this + 24);
  if ((v3 & 0x40) == 0)
  {
LABEL_20:
    if ((v3 & 0x80) == 0)
      goto LABEL_40;
    goto LABEL_37;
  }
LABEL_34:
  v12 = (CLP::LogEntry::PrivateData::BeidouB2SyncState *)*((_QWORD *)this + 6);
  if (!v12)
    v12 = *(CLP::LogEntry::PrivateData::BeidouB2SyncState **)(qword_100100558 + 48);
  v4 = v4 + CLP::LogEntry::PrivateData::BeidouB2SyncState::ByteSize(v12) + 2;
  v3 = *((_DWORD *)this + 24);
  if ((v3 & 0x80) != 0)
  {
LABEL_37:
    v13 = (CLP::LogEntry::PrivateData::GalileoE1SyncState *)*((_QWORD *)this + 7);
    if (!v13)
      v13 = *(CLP::LogEntry::PrivateData::GalileoE1SyncState **)(qword_100100558 + 56);
    v4 = v4 + CLP::LogEntry::PrivateData::GalileoE1SyncState::ByteSize(v13) + 2;
    v3 = *((_DWORD *)this + 24);
  }
LABEL_40:
  if ((v3 & 0xFF00) == 0)
    goto LABEL_61;
  if ((v3 & 0x100) != 0)
  {
    v14 = (CLP::LogEntry::PrivateData::GalileoE5SyncState *)*((_QWORD *)this + 8);
    if (!v14)
      v14 = *(CLP::LogEntry::PrivateData::GalileoE5SyncState **)(qword_100100558 + 64);
    v4 = v4 + CLP::LogEntry::PrivateData::GalileoE5SyncState::ByteSize(v14) + 2;
    v3 = *((_DWORD *)this + 24);
    if ((v3 & 0x200) == 0)
    {
LABEL_43:
      if ((v3 & 0x400) == 0)
        goto LABEL_61;
      goto LABEL_58;
    }
  }
  else if ((v3 & 0x200) == 0)
  {
    goto LABEL_43;
  }
  v15 = *((_QWORD *)this + 9);
  if (!v15)
    v15 = *(_QWORD *)(qword_100100558 + 72);
  v16 = *(_DWORD *)(v15 + 16);
  v17 = 2 * (v16 & 1);
  if ((v16 & 2) != 0)
    v17 += 2;
  if ((v16 & 4) != 0)
    v17 += 2;
  if (*(_DWORD *)(v15 + 16))
    v18 = v17;
  else
    v18 = 0;
  *(_DWORD *)(v15 + 12) = v18;
  v4 = (v4 + v18 + 2);
  if ((*((_DWORD *)this + 24) & 0x400) != 0)
  {
LABEL_58:
    v19 = (CLP::LogEntry::PrivateData::GpsL1SyncState *)*((_QWORD *)this + 10);
    if (!v19)
      v19 = *(CLP::LogEntry::PrivateData::GpsL1SyncState **)(qword_100100558 + 80);
    v4 = v4 + CLP::LogEntry::PrivateData::GpsL1SyncState::ByteSize(v19) + 2;
  }
LABEL_61:
  *((_DWORD *)this + 23) = v4;
  return v4;
}

uint64_t CLP::LogEntry::PrivateData::FrequencyOffset::ByteSize(CLP::LogEntry::PrivateData::FrequencyOffset *this)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *((unsigned __int8 *)this + 32);
  if (*((_BYTE *)this + 32))
  {
    v2 = ((int)((_DWORD)v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0)
      v2 += 9;
    if ((v1 & 4) != 0)
      v1 = v2 + 2;
    else
      v1 = v2;
  }
  *((_DWORD *)this + 7) = v1;
  return v1;
}

uint64_t CLP::LogEntry::PrivateData::GpsL1SyncState::ByteSize(CLP::LogEntry::PrivateData::GpsL1SyncState *this)
{
  int v1;
  unsigned int v2;
  uint64_t v3;

  v1 = *((_DWORD *)this + 4);
  v2 = 2 * (v1 & 1);
  if ((v1 & 2) != 0)
    v2 += 2;
  if ((v1 & 4) != 0)
    v2 += 2;
  if ((v1 & 8) != 0)
    v2 += 2;
  if (*((_DWORD *)this + 4))
    v3 = v2;
  else
    v3 = 0;
  *((_DWORD *)this + 3) = v3;
  return v3;
}

uint64_t CLP::LogEntry::PrivateData::SvTime::ByteSize(CLP::LogEntry::PrivateData::SvTime *this)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *((unsigned __int8 *)this + 32);
  if (*((_BYTE *)this + 32))
  {
    v2 = ((int)((_DWORD)v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0)
      v2 += 9;
    if ((v1 & 4) != 0)
      v1 = v2 + 2;
    else
      v1 = v2;
  }
  *((_DWORD *)this + 7) = v1;
  return v1;
}

uint64_t CLP::LogEntry::PrivateData::Clock::ByteSize(CLP::LogEntry::PrivateData::Clock *this, unint64_t a2)
{
  int v3;
  uint64_t v4;
  CLP::LogEntry::PrivateData::ReceiverClockModel *v5;
  CLP::LogEntry::PrivateData::ReceiverClockCorrections *v6;
  CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion *v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  unsigned int v9;
  int v10;
  int v11;

  LOBYTE(v3) = *((_BYTE *)this + 44);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_22;
  }
  if ((*((_BYTE *)this + 44) & 1) != 0)
  {
    v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 1), a2)+ 1;
    v3 = *((_DWORD *)this + 11);
    if ((v3 & 2) == 0)
      goto LABEL_10;
  }
  else
  {
    v4 = 0;
    if ((*((_BYTE *)this + 44) & 2) == 0)
      goto LABEL_10;
  }
  v5 = (CLP::LogEntry::PrivateData::ReceiverClockModel *)*((_QWORD *)this + 2);
  if (!v5)
    v5 = *(CLP::LogEntry::PrivateData::ReceiverClockModel **)(qword_1001005C0 + 16);
  v4 = v4 + CLP::LogEntry::PrivateData::ReceiverClockModel::ByteSize(v5) + 2;
  v3 = *((_DWORD *)this + 11);
LABEL_10:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0)
      goto LABEL_22;
    goto LABEL_16;
  }
  v6 = (CLP::LogEntry::PrivateData::ReceiverClockCorrections *)*((_QWORD *)this + 3);
  if (!v6)
    v6 = *(CLP::LogEntry::PrivateData::ReceiverClockCorrections **)(qword_1001005C0 + 24);
  v4 = v4 + CLP::LogEntry::PrivateData::ReceiverClockCorrections::ByteSize(v6) + 2;
  if ((*((_DWORD *)this + 11) & 8) != 0)
  {
LABEL_16:
    v7 = (CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion *)*((_QWORD *)this + 4);
    if (!v7)
      v7 = *(CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion **)(qword_1001005C0 + 32);
    v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion::ByteSize(v7, a2);
    v10 = (int)v8;
    if (v8 >= 0x80)
      v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, v9);
    else
      v11 = 1;
    v4 = (v4 + v10 + v11 + 1);
  }
LABEL_22:
  *((_DWORD *)this + 10) = v4;
  return v4;
}

uint64_t CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::ByteSize(CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *this, unint64_t a2)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  CLP::LogEntry::PrivateData::MeasurementReport *v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  int v12;
  CLP::LogEntry::PrivateData::TimeConversionInfo *v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;
  int v16;
  int v17;
  CLP::LogEntry::PrivateData::KlobucharModelParameters *v18;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v37;
  int v38;
  int v39;

  LOBYTE(v3) = *((_BYTE *)this + 132);
  if (!(_BYTE)v3)
  {
    v5 = 0;
    goto LABEL_40;
  }
  if ((*((_BYTE *)this + 132) & 1) != 0)
  {
    v6 = *((_QWORD *)this + 1);
    if (!v6)
      v6 = *(_QWORD *)(CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance_ + 8);
    v7 = *(unsigned __int8 *)(v6 + 36);
    if (*(_BYTE *)(v6 + 36))
    {
      v8 = (v7 << 31 >> 31) & 9;
      if ((v7 & 2) != 0)
        v8 += 9;
      if ((v7 & 4) != 0)
        v7 = v8 + 9;
      else
        v7 = v8;
    }
    *(_DWORD *)(v6 + 32) = v7;
    v4 = v7 + 2;
    v3 = *((_DWORD *)this + 33);
    if ((v3 & 2) == 0)
      goto LABEL_21;
    goto LABEL_15;
  }
  v4 = 0;
  if ((*((_BYTE *)this + 132) & 2) != 0)
  {
LABEL_15:
    v9 = (CLP::LogEntry::PrivateData::MeasurementReport *)*((_QWORD *)this + 2);
    if (!v9)
      v9 = *(CLP::LogEntry::PrivateData::MeasurementReport **)(CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance_
                                                             + 16);
    v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLP::LogEntry::PrivateData::MeasurementReport::ByteSize(v9, a2);
    v11 = (int)v10;
    if (v10 >= 0x80)
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2);
    else
      v12 = 1;
    v4 += v11 + v12 + 1;
    v3 = *((_DWORD *)this + 33);
  }
LABEL_21:
  if ((v3 & 0x10) != 0)
  {
    v13 = (CLP::LogEntry::PrivateData::TimeConversionInfo *)*((_QWORD *)this + 9);
    if (!v13)
      v13 = *(CLP::LogEntry::PrivateData::TimeConversionInfo **)(CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance_
                                                               + 72);
    v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLP::LogEntry::PrivateData::TimeConversionInfo::ByteSize(v13, a2);
    v15 = (int)v14;
    if (v14 >= 0x80)
      v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2);
    else
      v16 = 1;
    v4 += v15 + v16 + 1;
    v3 = *((_DWORD *)this + 33);
  }
  v17 = v4 + 9;
  if ((v3 & 0x20) == 0)
    v17 = v4;
  if ((v3 & 0x40) != 0)
    v5 = v17 + 9;
  else
    v5 = v17;
  if ((v3 & 0x80) != 0)
  {
    v18 = (CLP::LogEntry::PrivateData::KlobucharModelParameters *)*((_QWORD *)this + 12);
    if (!v18)
      v18 = *(CLP::LogEntry::PrivateData::KlobucharModelParameters **)(CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance_
                                                                     + 96);
    v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLP::LogEntry::PrivateData::KlobucharModelParameters::ByteSize(v18, a2);
    v20 = (int)v19;
    if (v19 >= 0x80)
      v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19, a2);
    else
      v21 = 1;
    v5 += v20 + v21 + 1;
  }
LABEL_40:
  v22 = *((_DWORD *)this + 8);
  v23 = v22 + v5;
  if (v22 >= 1)
  {
    v24 = 0;
    do
    {
      v25 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLP::LogEntry::PrivateData::SvInfo::ByteSize(*(CLP::LogEntry::PrivateData::SvInfo **)(*((_QWORD *)this + 3) + 8 * v24), a2);
      v26 = (int)v25;
      if (v25 >= 0x80)
        v27 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v25, a2);
      else
        v27 = 1;
      v23 += v26 + v27;
      ++v24;
    }
    while (v24 < *((int *)this + 8));
  }
  v28 = *((_DWORD *)this + 14);
  v29 = v28 + v23;
  if (v28 >= 1)
  {
    v30 = 0;
    do
    {
      v31 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLP::LogEntry::PrivateData::ReceiverBandCorrections::ByteSize(*(CLP::LogEntry::PrivateData::ReceiverBandCorrections **)(*((_QWORD *)this + 6) + 8 * v30), a2);
      v32 = (int)v31;
      if (v31 >= 0x80)
        v33 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v31, a2);
      else
        v33 = 1;
      v29 += v32 + v33;
      ++v30;
    }
    while (v30 < *((int *)this + 14));
  }
  v34 = *((_DWORD *)this + 28);
  v35 = (v34 + v29);
  if (v34 >= 1)
  {
    v36 = 0;
    do
    {
      v37 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1000A7CEC(*(_QWORD *)(*((_QWORD *)this + 13)+ 8 * v36), a2);
      v38 = (int)v37;
      if (v37 >= 0x80)
        v39 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v37, a2);
      else
        v39 = 1;
      v35 = (v38 + v35 + v39);
      ++v36;
    }
    while (v36 < *((int *)this + 28));
  }
  *((_DWORD *)this + 32) = v35;
  return v35;
}

uint64_t CLP::LogEntry::PrivateData::SvInfo::ByteSize(CLP::LogEntry::PrivateData::SvInfo *this, unsigned int a2)
{
  int v3;
  int v4;
  int v5;
  CLP::LogEntry::PrivateData::SvId *v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  int v9;
  int v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  int v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v16;
  int v17;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v18;
  int v19;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v20;
  int v21;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v22;
  int v23;
  CLP::LogEntry::PrivateData::PolynomialOrbit *v24;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v25;
  int v26;
  int v27;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v28;
  int v29;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v30;
  int v31;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v32;
  int v33;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v34;
  int v35;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v36;
  int v37;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v46;
  int v47;
  int v48;

  v3 = *((_DWORD *)this + 43);
  if ((_BYTE)v3)
  {
    if ((v3 & 1) != 0)
    {
      v6 = (CLP::LogEntry::PrivateData::SvId *)*((_QWORD *)this + 1);
      if (!v6)
        v6 = *(CLP::LogEntry::PrivateData::SvId **)(qword_1001005F0 + 8);
      v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLP::LogEntry::PrivateData::SvId::ByteSize(v6, a2);
      v8 = (int)v7;
      if (v7 >= 0x80)
        v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
      else
        v9 = 1;
      v4 = v8 + v9 + 1;
      v3 = *((_DWORD *)this + 43);
    }
    else
    {
      v4 = 0;
    }
    if ((v3 & 2) != 0)
      v10 = v4 + 9;
    else
      v10 = v4;
    if ((v3 & 4) != 0)
    {
      v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 14);
      if ((v11 & 0x80000000) != 0)
      {
        v12 = 10;
      }
      else if (v11 >= 0x80)
      {
        v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2);
        v3 = *((_DWORD *)this + 43);
      }
      else
      {
        v12 = 1;
      }
      v10 += v12 + 1;
    }
    v13 = v10 + 9;
    if ((v3 & 0x10) == 0)
      v13 = v10;
    if ((v3 & 0x20) != 0)
      v13 += 9;
    if ((v3 & 0x40) != 0)
      v13 += 9;
    if ((v3 & 0x80) != 0)
      v5 = v13 + 5;
    else
      v5 = v13;
  }
  else
  {
    v5 = 0;
  }
  if ((v3 & 0xFF00) != 0)
  {
    if ((v3 & 0x100) != 0)
      v5 += 5;
    if ((v3 & 0x200) != 0)
    {
      v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 21);
      if ((v14 & 0x80000000) != 0)
      {
        v15 = 10;
      }
      else if (v14 >= 0x80)
      {
        v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2);
        v3 = *((_DWORD *)this + 43);
      }
      else
      {
        v15 = 1;
      }
      v5 += v15 + 1;
      if ((v3 & 0x400) == 0)
      {
LABEL_35:
        if ((v3 & 0x800) == 0)
          goto LABEL_36;
        goto LABEL_52;
      }
    }
    else if ((v3 & 0x400) == 0)
    {
      goto LABEL_35;
    }
    v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 22);
    if ((v16 & 0x80000000) != 0)
    {
      v17 = 10;
    }
    else if (v16 >= 0x80)
    {
      v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16, a2);
      v3 = *((_DWORD *)this + 43);
    }
    else
    {
      v17 = 1;
    }
    v5 += v17 + 1;
    if ((v3 & 0x800) == 0)
    {
LABEL_36:
      if ((v3 & 0x1000) == 0)
        goto LABEL_37;
      goto LABEL_58;
    }
LABEL_52:
    v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 23);
    if ((v18 & 0x80000000) != 0)
    {
      v19 = 10;
    }
    else if (v18 >= 0x80)
    {
      v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18, a2);
      v3 = *((_DWORD *)this + 43);
    }
    else
    {
      v19 = 1;
    }
    v5 += v19 + 1;
    if ((v3 & 0x1000) == 0)
    {
LABEL_37:
      if ((v3 & 0x2000) == 0)
        goto LABEL_38;
      goto LABEL_64;
    }
LABEL_58:
    v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 24);
    if ((v20 & 0x80000000) != 0)
    {
      v21 = 10;
    }
    else if (v20 >= 0x80)
    {
      v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20, a2);
      v3 = *((_DWORD *)this + 43);
    }
    else
    {
      v21 = 1;
    }
    v5 += v21 + 1;
    if ((v3 & 0x2000) == 0)
    {
LABEL_38:
      if ((v3 & 0x8000) == 0)
        goto LABEL_76;
LABEL_70:
      v24 = (CLP::LogEntry::PrivateData::PolynomialOrbit *)*((_QWORD *)this + 16);
      if (!v24)
        v24 = *(CLP::LogEntry::PrivateData::PolynomialOrbit **)(qword_1001005F0 + 128);
      v25 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLP::LogEntry::PrivateData::PolynomialOrbit::ByteSize(v24);
      v26 = (int)v25;
      if (v25 >= 0x80)
        v27 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v25, a2);
      else
        v27 = 1;
      v5 += v26 + v27 + 2;
      v3 = *((_DWORD *)this + 43);
      goto LABEL_76;
    }
LABEL_64:
    v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 25);
    if ((v22 & 0x80000000) != 0)
    {
      v23 = 10;
    }
    else if (v22 >= 0x80)
    {
      v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22, a2);
      v3 = *((_DWORD *)this + 43);
    }
    else
    {
      v23 = 1;
    }
    v5 += v23 + 1;
    if ((v3 & 0x8000) == 0)
      goto LABEL_76;
    goto LABEL_70;
  }
LABEL_76:
  if ((v3 & 0xFF0000) == 0)
    goto LABEL_122;
  if ((v3 & 0x10000) != 0)
  {
    v28 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 34);
    if ((v28 & 0x80000000) != 0)
    {
      v29 = 10;
    }
    else if (v28 >= 0x80)
    {
      v29 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v28, a2);
      v3 = *((_DWORD *)this + 43);
    }
    else
    {
      v29 = 1;
    }
    v5 += v29 + 2;
    if ((v3 & 0x20000) == 0)
    {
LABEL_79:
      if ((v3 & 0x40000) == 0)
        goto LABEL_80;
      goto LABEL_95;
    }
  }
  else if ((v3 & 0x20000) == 0)
  {
    goto LABEL_79;
  }
  v30 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 35);
  if ((v30 & 0x80000000) != 0)
  {
    v31 = 10;
  }
  else if (v30 >= 0x80)
  {
    v31 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v30, a2);
    v3 = *((_DWORD *)this + 43);
  }
  else
  {
    v31 = 1;
  }
  v5 += v31 + 2;
  if ((v3 & 0x40000) == 0)
  {
LABEL_80:
    if ((v3 & 0x80000) == 0)
      goto LABEL_81;
LABEL_101:
    v34 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 37);
    if ((v34 & 0x80000000) != 0)
    {
      v35 = 12;
    }
    else if (v34 >= 0x80)
    {
      v35 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v34, a2) + 2;
      v3 = *((_DWORD *)this + 43);
    }
    else
    {
      v35 = 3;
    }
    v5 += v35;
    if ((v3 & 0x100000) == 0)
      goto LABEL_113;
    goto LABEL_107;
  }
LABEL_95:
  v32 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 36);
  if ((v32 & 0x80000000) != 0)
  {
    v33 = 12;
  }
  else if (v32 >= 0x80)
  {
    v33 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v32, a2) + 2;
    v3 = *((_DWORD *)this + 43);
  }
  else
  {
    v33 = 3;
  }
  v5 += v33;
  if ((v3 & 0x80000) != 0)
    goto LABEL_101;
LABEL_81:
  if ((v3 & 0x100000) != 0)
  {
LABEL_107:
    v36 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 40);
    if ((v36 & 0x80000000) != 0)
    {
      v37 = 12;
    }
    else if (v36 >= 0x80)
    {
      v37 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v36, a2) + 2;
      v3 = *((_DWORD *)this + 43);
    }
    else
    {
      v37 = 3;
    }
    v5 += v37;
  }
LABEL_113:
  if ((v3 & 0x200000) != 0)
    v5 += 10;
  if ((v3 & 0x400000) != 0)
  {
    v38 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 41);
    if ((v38 & 0x80000000) != 0)
    {
      v39 = 12;
    }
    else if (v38 >= 0x80)
    {
      v39 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v38, a2) + 2;
    }
    else
    {
      v39 = 3;
    }
    v5 += v39;
  }
LABEL_122:
  v40 = *((_DWORD *)this + 8);
  v41 = v40 + v5;
  if (v40 >= 1)
  {
    v42 = 0;
    do
      v41 += CLP::LogEntry::PrivateData::SvPositionAtTime::ByteSize(*(CLP::LogEntry::PrivateData::SvPositionAtTime **)(*((_QWORD *)this + 3) + 8 * v42++))
           + 1;
    while (v42 < *((int *)this + 8));
  }
  v43 = *((_DWORD *)this + 28);
  v44 = (v43 + v41);
  if (v43 >= 1)
  {
    v45 = 0;
    do
    {
      v46 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLP::LogEntry::PrivateData::SvBandCorrections::ByteSize(*(CLP::LogEntry::PrivateData::SvBandCorrections **)(*((_QWORD *)this + 13) + 8 * v45), a2);
      v47 = (int)v46;
      if (v46 >= 0x80)
        v48 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v46, a2);
      else
        v48 = 1;
      v44 = (v47 + v44 + v48);
      ++v45;
    }
    while (v45 < *((int *)this + 28));
  }
  *((_DWORD *)this + 42) = v44;
  return v44;
}

uint64_t CLP::LogEntry::PrivateData::SvPositionAtTime::ByteSize(CLP::LogEntry::PrivateData::SvPositionAtTime *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;

  v1 = *((unsigned __int8 *)this + 28);
  if (*((_BYTE *)this + 28))
  {
    v2 = (v1 << 31 >> 31) & 9;
    if ((v1 & 2) != 0)
    {
      v3 = *((_QWORD *)this + 2);
      if (!v3)
        v3 = *(_QWORD *)(qword_1001005E0 + 16);
      v4 = *(unsigned __int8 *)(v3 + 36);
      v5 = (v4 << 31 >> 31) & 9;
      if ((v4 & 2) != 0)
        v5 += 9;
      if ((v4 & 4) != 0)
        v5 += 9;
      if (*(_BYTE *)(v3 + 36))
        v6 = v5;
      else
        v6 = 0;
      *(_DWORD *)(v3 + 32) = v6;
      v2 = (v2 | 2) + v6;
    }
  }
  else
  {
    v2 = 0;
  }
  *((_DWORD *)this + 6) = v2;
  return v2;
}

uint64_t CLP::LogEntry::PrivateData::Wgs84Ecef::ByteSize(CLP::LogEntry::PrivateData::Wgs84Ecef *this)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *((unsigned __int8 *)this + 36);
  if (*((_BYTE *)this + 36))
  {
    v2 = ((int)((_DWORD)v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0)
      v2 += 9;
    if ((v1 & 4) != 0)
      v1 = v2 + 9;
    else
      v1 = v2;
  }
  *((_DWORD *)this + 8) = v1;
  return v1;
}

uint64_t CLP::LogEntry::PrivateData::SvBandCorrections::ByteSize(CLP::LogEntry::PrivateData::SvBandCorrections *this, unsigned int a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;

  LOBYTE(v3) = *((_BYTE *)this + 44);
  if ((_BYTE)v3)
  {
    if ((*((_BYTE *)this + 44) & 1) != 0)
    {
      v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
      if ((v6 & 0x80000000) != 0)
      {
        v4 = 11;
      }
      else if (v6 >= 0x80)
      {
        v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
        v3 = *((_DWORD *)this + 11);
      }
      else
      {
        v4 = 2;
      }
    }
    else
    {
      v4 = 0;
    }
    if ((v3 & 2) != 0)
      v4 += 9;
    if ((v3 & 4) != 0)
      v4 += 9;
    if ((v3 & 8) != 0)
      v5 = v4 + 9;
    else
      v5 = v4;
    if ((v3 & 0x10) != 0)
    {
      v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 7);
      if ((v7 & 0x80000000) != 0)
      {
        v8 = 11;
      }
      else if (v7 >= 0x80)
      {
        v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2) + 1;
      }
      else
      {
        v8 = 2;
      }
      v5 = (v8 + v5);
    }
  }
  else
  {
    v5 = 0;
  }
  *((_DWORD *)this + 10) = v5;
  return v5;
}

uint64_t CLP::LogEntry::PrivateData::SvId::ByteSize(CLP::LogEntry::PrivateData::SvId *this, unsigned int a2)
{
  char v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  CLP::LogEntry::PrivateData::ConstellationId *v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  unsigned int v8;
  int v9;
  int v10;

  v3 = *((_BYTE *)this + 24);
  if (v3)
  {
    if ((*((_BYTE *)this + 24) & 1) != 0)
    {
      v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
      if (v5 >= 0x80)
      {
        v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2)
           + 1;
        if ((*((_DWORD *)this + 6) & 2) == 0)
          goto LABEL_16;
      }
      else
      {
        v4 = 2;
        if ((v3 & 2) == 0)
          goto LABEL_16;
      }
    }
    else
    {
      v4 = 0;
      if ((*((_BYTE *)this + 24) & 2) == 0)
        goto LABEL_16;
    }
    v6 = (CLP::LogEntry::PrivateData::ConstellationId *)*((_QWORD *)this + 1);
    if (!v6)
      v6 = *(CLP::LogEntry::PrivateData::ConstellationId **)(qword_100100508 + 8);
    v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLP::LogEntry::PrivateData::ConstellationId::ByteSize(v6, a2);
    v9 = (int)v7;
    if (v7 >= 0x80)
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, v8);
    else
      v10 = 1;
    v4 = (v4 + v9 + v10 + 1);
  }
  else
  {
    v4 = 0;
  }
LABEL_16:
  *((_DWORD *)this + 5) = v4;
  return v4;
}

uint64_t CLP::LogEntry::PrivateData::ConstellationId::ByteSize(CLP::LogEntry::PrivateData::ConstellationId *this, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  CLP::LogEntry::PrivateData::GlonassId *v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  int v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v12;
  int v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v16;
  int v17;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v18;
  int v19;

  LOBYTE(v3) = *((_BYTE *)this + 44);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_42;
  }
  if ((*((_BYTE *)this + 44) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
    if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *((_DWORD *)this + 11);
      if ((v3 & 2) == 0)
        goto LABEL_16;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_16;
    }
  }
  else
  {
    v4 = 0;
    if ((*((_BYTE *)this + 44) & 2) == 0)
      goto LABEL_16;
  }
  v6 = (CLP::LogEntry::PrivateData::GlonassId *)*((_QWORD *)this + 1);
  if (!v6)
    v6 = *(CLP::LogEntry::PrivateData::GlonassId **)(qword_100100500 + 8);
  v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLP::LogEntry::PrivateData::GlonassId::ByteSize(v6, a2);
  v8 = (int)v7;
  if (v7 >= 0x80)
    v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
  else
    v9 = 1;
  v4 = (v4 + v8 + v9 + 1);
  v3 = *((_DWORD *)this + 11);
LABEL_16:
  if ((v3 & 4) != 0)
  {
    v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
    if (v10 >= 0x80)
    {
      v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2) + 1;
      v3 = *((_DWORD *)this + 11);
    }
    else
    {
      v11 = 2;
    }
    v4 = (v11 + v4);
    if ((v3 & 8) == 0)
    {
LABEL_18:
      if ((v3 & 0x10) == 0)
        goto LABEL_19;
      goto LABEL_30;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_18;
  }
  v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
  if (v12 >= 0x80)
  {
    v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, a2) + 1;
    v3 = *((_DWORD *)this + 11);
  }
  else
  {
    v13 = 2;
  }
  v4 = (v13 + v4);
  if ((v3 & 0x10) == 0)
  {
LABEL_19:
    if ((v3 & 0x20) == 0)
      goto LABEL_20;
    goto LABEL_34;
  }
LABEL_30:
  v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 7);
  if (v14 >= 0x80)
  {
    v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2) + 1;
    v3 = *((_DWORD *)this + 11);
  }
  else
  {
    v15 = 2;
  }
  v4 = (v15 + v4);
  if ((v3 & 0x20) == 0)
  {
LABEL_20:
    if ((v3 & 0x40) == 0)
      goto LABEL_42;
    goto LABEL_38;
  }
LABEL_34:
  v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
  if (v16 >= 0x80)
  {
    v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16, a2) + 1;
    v3 = *((_DWORD *)this + 11);
  }
  else
  {
    v17 = 2;
  }
  v4 = (v17 + v4);
  if ((v3 & 0x40) != 0)
  {
LABEL_38:
    v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 9);
    if (v18 >= 0x80)
      v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18, a2) + 1;
    else
      v19 = 2;
    v4 = (v19 + v4);
  }
LABEL_42:
  *((_DWORD *)this + 10) = v4;
  return v4;
}

uint64_t CLP::LogEntry::PrivateData::ReceiverBandCorrections::ByteSize(CLP::LogEntry::PrivateData::ReceiverBandCorrections *this, unsigned int a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;

  LOBYTE(v3) = *((_BYTE *)this + 32);
  if ((_BYTE)v3)
  {
    if ((*((_BYTE *)this + 32) & 1) != 0)
    {
      v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
      if ((v6 & 0x80000000) != 0)
      {
        v4 = 11;
      }
      else if (v6 >= 0x80)
      {
        v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
        v3 = *((_DWORD *)this + 8);
      }
      else
      {
        v4 = 2;
      }
    }
    else
    {
      v4 = 0;
    }
    if ((v3 & 2) != 0)
      v4 += 9;
    if ((v3 & 4) != 0)
      v4 += 5;
    if ((v3 & 8) != 0)
      result = v4 + 5;
    else
      result = v4;
  }
  else
  {
    result = 0;
  }
  *((_DWORD *)this + 7) = result;
  return result;
}

uint64_t CLP::LogEntry::PrivateData::GlonassId::ByteSize(CLP::LogEntry::PrivateData::GlonassId *this, unsigned int a2)
{
  char v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  CLP::LogEntry::PrivateData::GlonassSlotInfo *v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  unsigned int v8;
  int v9;
  int v10;

  v3 = *((_BYTE *)this + 24);
  if (v3)
  {
    if ((*((_BYTE *)this + 24) & 1) != 0)
    {
      v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
      if ((v5 & 0x80000000) != 0)
      {
        v4 = 11;
        if ((v3 & 2) == 0)
          goto LABEL_19;
      }
      else if (v5 >= 0x80)
      {
        v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2)
           + 1;
        if ((*((_DWORD *)this + 6) & 2) == 0)
          goto LABEL_19;
      }
      else
      {
        v4 = 2;
        if ((v3 & 2) == 0)
          goto LABEL_19;
      }
    }
    else
    {
      v4 = 0;
      if ((*((_BYTE *)this + 24) & 2) == 0)
        goto LABEL_19;
    }
    v6 = (CLP::LogEntry::PrivateData::GlonassSlotInfo *)*((_QWORD *)this + 1);
    if (!v6)
      v6 = *(CLP::LogEntry::PrivateData::GlonassSlotInfo **)(qword_1001004F8 + 8);
    v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLP::LogEntry::PrivateData::GlonassSlotInfo::ByteSize(v6, a2);
    v9 = (int)v7;
    if (v7 >= 0x80)
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, v8);
    else
      v10 = 1;
    v4 = (v4 + v9 + v10 + 1);
  }
  else
  {
    v4 = 0;
  }
LABEL_19:
  *((_DWORD *)this + 5) = v4;
  return v4;
}

uint64_t CLP::LogEntry::PrivateData::GlonassSlotInfo::ByteSize(CLP::LogEntry::PrivateData::GlonassSlotInfo *this, unsigned int a2)
{
  char v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;

  v3 = *((_BYTE *)this + 20);
  if (v3)
  {
    if ((*((_BYTE *)this + 20) & 1) != 0)
    {
      v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
      if (v5 >= 0x80)
      {
        v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2)
           + 1;
        if ((*((_DWORD *)this + 5) & 2) == 0)
          goto LABEL_16;
      }
      else
      {
        v4 = 2;
        if ((v3 & 2) == 0)
          goto LABEL_16;
      }
    }
    else
    {
      v4 = 0;
      if ((*((_BYTE *)this + 20) & 2) == 0)
        goto LABEL_16;
    }
    v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
    if ((v6 & 0x80000000) != 0)
    {
      v7 = 11;
    }
    else if (v6 >= 0x80)
    {
      v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    }
    else
    {
      v7 = 2;
    }
    v4 = (v7 + v4);
  }
  else
  {
    v4 = 0;
  }
LABEL_16:
  *((_DWORD *)this + 4) = v4;
  return v4;
}

uint64_t CLP::LogEntry::PrivateData::ReceiverClockCorrections::ByteSize(CLP::LogEntry::PrivateData::ReceiverClockCorrections *this)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *((unsigned __int8 *)this + 52);
  if (*((_BYTE *)this + 52))
  {
    v2 = ((int)((_DWORD)v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0)
      v2 += 9;
    if ((v1 & 4) != 0)
      v2 += 9;
    if ((v1 & 8) != 0)
      v2 += 9;
    if ((v1 & 0x10) != 0)
      v1 = v2 + 9;
    else
      v1 = v2;
  }
  *((_DWORD *)this + 12) = v1;
  return v1;
}

uint64_t CLP::LogEntry::PrivateData::KlobucharModelParameters::ByteSize(CLP::LogEntry::PrivateData::KlobucharModelParameters *this, unint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;

  v3 = *((_DWORD *)this + 13);
  if ((_BYTE)v3)
  {
    if ((v3 & 1) != 0)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 1), a2)+ 1;
      v3 = *((_DWORD *)this + 13);
    }
    else
    {
      v4 = 0;
    }
    if ((v3 & 2) != 0)
      v4 += 5;
    if ((v3 & 4) != 0)
      v4 += 5;
    if ((v3 & 8) != 0)
      v4 += 5;
    if ((v3 & 0x10) != 0)
      v4 += 5;
    if ((v3 & 0x20) != 0)
      v4 += 5;
    if ((v3 & 0x40) != 0)
      v4 += 5;
    if ((v3 & 0x80) != 0)
      v4 += 5;
  }
  else
  {
    v4 = 0;
  }
  if ((v3 & 0x100) != 0)
    result = v4 + 5;
  else
    result = v4;
  *((_DWORD *)this + 12) = result;
  return result;
}

uint64_t CLP::LogEntry::PrivateData::TimeConversionInfo::ByteSize(CLP::LogEntry::PrivateData::TimeConversionInfo *this, unint64_t a2)
{
  int v3;
  uint64_t v4;
  CLP::LogEntry::PrivateData::GpsTimeInfo *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  int v8;
  CLP::LogEntry::PrivateData::GlonassTimeInfo *v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  int v12;
  CLP::LogEntry::PrivateData::BeidouTimeInfo *v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;
  int v16;
  CLP::LogEntry::PrivateData::GalileoTimeInfo *v17;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v18;
  int v19;
  int v20;
  CLP::LogEntry::PrivateData::NavicTimeInfo *v21;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v22;
  unsigned int v23;
  int v24;
  int v25;

  LOBYTE(v3) = *((_BYTE *)this + 52);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_40;
  }
  if ((*((_BYTE *)this + 52) & 1) == 0)
  {
    v4 = 0;
    if ((*((_BYTE *)this + 52) & 2) == 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  v5 = (CLP::LogEntry::PrivateData::GpsTimeInfo *)*((_QWORD *)this + 1);
  if (!v5)
    v5 = *(CLP::LogEntry::PrivateData::GpsTimeInfo **)(qword_100100650 + 8);
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLP::LogEntry::PrivateData::GpsTimeInfo::ByteSize(v5, a2);
  v7 = (int)v6;
  if (v6 >= 0x80)
    v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2);
  else
    v8 = 1;
  v4 = (v7 + v8 + 1);
  v3 = *((_DWORD *)this + 13);
  if ((v3 & 2) != 0)
  {
LABEL_12:
    v9 = (CLP::LogEntry::PrivateData::GlonassTimeInfo *)*((_QWORD *)this + 2);
    if (!v9)
      v9 = *(CLP::LogEntry::PrivateData::GlonassTimeInfo **)(qword_100100650 + 16);
    v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLP::LogEntry::PrivateData::GlonassTimeInfo::ByteSize(v9, a2);
    v11 = (int)v10;
    if (v10 >= 0x80)
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2);
    else
      v12 = 1;
    v4 = (v4 + v11 + v12 + 1);
    v3 = *((_DWORD *)this + 13);
  }
LABEL_18:
  if ((v3 & 4) != 0)
  {
    v13 = (CLP::LogEntry::PrivateData::BeidouTimeInfo *)*((_QWORD *)this + 3);
    if (!v13)
      v13 = *(CLP::LogEntry::PrivateData::BeidouTimeInfo **)(qword_100100650 + 24);
    v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLP::LogEntry::PrivateData::BeidouTimeInfo::ByteSize(v13, a2);
    v15 = (int)v14;
    if (v14 >= 0x80)
      v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2);
    else
      v16 = 1;
    v4 = (v4 + v15 + v16 + 1);
    v3 = *((_DWORD *)this + 13);
    if ((v3 & 8) == 0)
    {
LABEL_20:
      if ((v3 & 0x10) == 0)
        goto LABEL_40;
      goto LABEL_34;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_20;
  }
  v17 = (CLP::LogEntry::PrivateData::GalileoTimeInfo *)*((_QWORD *)this + 4);
  if (!v17)
    v17 = *(CLP::LogEntry::PrivateData::GalileoTimeInfo **)(qword_100100650 + 32);
  v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLP::LogEntry::PrivateData::GalileoTimeInfo::ByteSize(v17, a2);
  v19 = (int)v18;
  if (v18 >= 0x80)
    v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18, a2);
  else
    v20 = 1;
  v4 = (v4 + v19 + v20 + 1);
  if ((*((_DWORD *)this + 13) & 0x10) != 0)
  {
LABEL_34:
    v21 = (CLP::LogEntry::PrivateData::NavicTimeInfo *)*((_QWORD *)this + 5);
    if (!v21)
      v21 = *(CLP::LogEntry::PrivateData::NavicTimeInfo **)(qword_100100650 + 40);
    v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLP::LogEntry::PrivateData::NavicTimeInfo::ByteSize(v21, a2);
    v24 = (int)v22;
    if (v22 >= 0x80)
      v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22, v23);
    else
      v25 = 1;
    v4 = (v4 + v24 + v25 + 1);
  }
LABEL_40:
  *((_DWORD *)this + 12) = v4;
  return v4;
}

uint64_t CLP::LogEntry::PrivateData::ReceiverClockModel::ByteSize(CLP::LogEntry::PrivateData::ReceiverClockModel *this)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *((unsigned __int8 *)this + 32);
  if (*((_BYTE *)this + 32))
  {
    v2 = ((int)((_DWORD)v1 << 31) >> 31) & 5;
    if ((v1 & 2) != 0)
      v2 += 5;
    if ((v1 & 4) != 0)
      v2 += 5;
    if ((v1 & 8) != 0)
      v2 += 5;
    if ((v1 & 0x10) != 0)
      v1 = v2 + 2;
    else
      v1 = v2;
  }
  *((_DWORD *)this + 7) = v1;
  return v1;
}

uint64_t CLP::LogEntry::PrivateData::ReceivedTimeStamp::ByteSize(CLP::LogEntry::PrivateData::ReceivedTimeStamp *this)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *((unsigned __int8 *)this + 36);
  if (*((_BYTE *)this + 36))
  {
    v2 = ((int)((_DWORD)v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0)
      v2 += 9;
    if ((v1 & 4) != 0)
      v1 = v2 + 9;
    else
      v1 = v2;
  }
  *((_DWORD *)this + 8) = v1;
  return v1;
}

uint64_t CLP::LogEntry::PrivateData::BeidouTimeInfo::ByteSize(CLP::LogEntry::PrivateData::BeidouTimeInfo *this, unint64_t a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  CLP::LogEntry::PrivateData::LeapSecondInfo *v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;
  int v10;
  CLP::LogEntry::PrivateData::SubSecondConversion *v11;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v12;
  int v13;
  int v14;
  CLP::LogEntry::PrivateData::SubSecondConversion *v15;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v16;
  int v17;
  int v18;
  CLP::LogEntry::PrivateData::SubSecondConversion *v19;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v20;
  int v21;
  int v22;
  CLP::LogEntry::PrivateData::SubSecondConversion *v23;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v24;
  unsigned int v25;
  int v26;
  int v27;

  LOBYTE(v3) = *((_BYTE *)this + 56);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_45;
  }
  if ((*((_BYTE *)this + 56) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 12);
    if (v5 >= 0x80)
    {
      v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
      v3 = *((_DWORD *)this + 14);
    }
    else
    {
      v6 = 1;
    }
    v4 = (v6 + 1);
    if ((v3 & 2) == 0)
      goto LABEL_16;
  }
  else
  {
    v4 = 0;
    if ((*((_BYTE *)this + 56) & 2) == 0)
      goto LABEL_16;
  }
  v7 = (CLP::LogEntry::PrivateData::LeapSecondInfo *)*((_QWORD *)this + 1);
  if (!v7)
    v7 = *(CLP::LogEntry::PrivateData::LeapSecondInfo **)(qword_100100638 + 8);
  v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLP::LogEntry::PrivateData::LeapSecondInfo::ByteSize(v7, a2);
  v9 = (int)v8;
  if (v8 >= 0x80)
    v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2);
  else
    v10 = 1;
  v4 = (v4 + v9 + v10 + 1);
  v3 = *((_DWORD *)this + 14);
LABEL_16:
  if ((v3 & 4) != 0)
  {
    v11 = (CLP::LogEntry::PrivateData::SubSecondConversion *)*((_QWORD *)this + 2);
    if (!v11)
      v11 = *(CLP::LogEntry::PrivateData::SubSecondConversion **)(qword_100100638 + 16);
    v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLP::LogEntry::PrivateData::SubSecondConversion::ByteSize(v11, a2);
    v13 = (int)v12;
    if (v12 >= 0x80)
      v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, a2);
    else
      v14 = 1;
    v4 = (v4 + v13 + v14 + 1);
    v3 = *((_DWORD *)this + 14);
    if ((v3 & 8) == 0)
    {
LABEL_18:
      if ((v3 & 0x10) == 0)
        goto LABEL_19;
      goto LABEL_33;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_18;
  }
  v15 = (CLP::LogEntry::PrivateData::SubSecondConversion *)*((_QWORD *)this + 3);
  if (!v15)
    v15 = *(CLP::LogEntry::PrivateData::SubSecondConversion **)(qword_100100638 + 24);
  v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLP::LogEntry::PrivateData::SubSecondConversion::ByteSize(v15, a2);
  v17 = (int)v16;
  if (v16 >= 0x80)
    v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16, a2);
  else
    v18 = 1;
  v4 = (v4 + v17 + v18 + 1);
  v3 = *((_DWORD *)this + 14);
  if ((v3 & 0x10) == 0)
  {
LABEL_19:
    if ((v3 & 0x20) == 0)
      goto LABEL_45;
    goto LABEL_39;
  }
LABEL_33:
  v19 = (CLP::LogEntry::PrivateData::SubSecondConversion *)*((_QWORD *)this + 4);
  if (!v19)
    v19 = *(CLP::LogEntry::PrivateData::SubSecondConversion **)(qword_100100638 + 32);
  v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLP::LogEntry::PrivateData::SubSecondConversion::ByteSize(v19, a2);
  v21 = (int)v20;
  if (v20 >= 0x80)
    v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20, a2);
  else
    v22 = 1;
  v4 = (v4 + v21 + v22 + 1);
  if ((*((_DWORD *)this + 14) & 0x20) != 0)
  {
LABEL_39:
    v23 = (CLP::LogEntry::PrivateData::SubSecondConversion *)*((_QWORD *)this + 5);
    if (!v23)
      v23 = *(CLP::LogEntry::PrivateData::SubSecondConversion **)(qword_100100638 + 40);
    v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLP::LogEntry::PrivateData::SubSecondConversion::ByteSize(v23, a2);
    v26 = (int)v24;
    if (v24 >= 0x80)
      v27 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v24, v25);
    else
      v27 = 1;
    v4 = (v4 + v26 + v27 + 1);
  }
LABEL_45:
  *((_DWORD *)this + 13) = v4;
  return v4;
}

uint64_t CLP::LogEntry::PrivateData::NavicTimeInfo::ByteSize(CLP::LogEntry::PrivateData::NavicTimeInfo *this, unint64_t a2)
{
  uint64_t v3;
  CLP::LogEntry::PrivateData::SubSecondConversion *v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  int v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;

  if (!*((_BYTE *)this + 24))
  {
    v3 = 0;
    goto LABEL_16;
  }
  if ((*((_BYTE *)this + 24) & 1) == 0)
  {
    v3 = 0;
    if ((*((_BYTE *)this + 24) & 2) == 0)
      goto LABEL_16;
    goto LABEL_12;
  }
  v4 = (CLP::LogEntry::PrivateData::SubSecondConversion *)*((_QWORD *)this + 1);
  if (!v4)
    v4 = *(CLP::LogEntry::PrivateData::SubSecondConversion **)(qword_100100648 + 8);
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLP::LogEntry::PrivateData::SubSecondConversion::ByteSize(v4, a2);
  v6 = (int)v5;
  if (v5 >= 0x80)
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
  else
    v7 = 1;
  v3 = (v6 + v7 + 1);
  if ((*((_DWORD *)this + 6) & 2) != 0)
  {
LABEL_12:
    v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
    if (v8 >= 0x80)
      v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2) + 1;
    else
      v9 = 2;
    v3 = (v9 + v3);
  }
LABEL_16:
  *((_DWORD *)this + 5) = v3;
  return v3;
}

uint64_t CLP::LogEntry::PrivateData::GpsTimeInfo::ByteSize(CLP::LogEntry::PrivateData::GpsTimeInfo *this, unint64_t a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  CLP::LogEntry::PrivateData::LeapSecondInfo *v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  int v9;
  CLP::LogEntry::PrivateData::GpsToUtcConversion *v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  unsigned int v12;
  int v13;
  int v14;

  LOBYTE(v3) = *((_BYTE *)this + 32);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_23;
  }
  if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    v4 = 0;
    if ((*((_BYTE *)this + 32) & 2) == 0)
      goto LABEL_16;
LABEL_10:
    v6 = (CLP::LogEntry::PrivateData::LeapSecondInfo *)*((_QWORD *)this + 1);
    if (!v6)
      v6 = *(CLP::LogEntry::PrivateData::LeapSecondInfo **)(qword_100100618 + 8);
    v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLP::LogEntry::PrivateData::LeapSecondInfo::ByteSize(v6, a2);
    v8 = (int)v7;
    if (v7 >= 0x80)
      v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
    else
      v9 = 1;
    v4 = (v4 + v8 + v9 + 1);
    v3 = *((_DWORD *)this + 8);
    goto LABEL_16;
  }
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
  if (v5 >= 0x80)
  {
    v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
    v3 = *((_DWORD *)this + 8);
    if ((v3 & 2) == 0)
      goto LABEL_16;
    goto LABEL_10;
  }
  v4 = 2;
  if ((v3 & 2) != 0)
    goto LABEL_10;
LABEL_16:
  if ((v3 & 4) != 0)
  {
    v10 = (CLP::LogEntry::PrivateData::GpsToUtcConversion *)*((_QWORD *)this + 2);
    if (!v10)
      v10 = *(CLP::LogEntry::PrivateData::GpsToUtcConversion **)(qword_100100618 + 16);
    v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLP::LogEntry::PrivateData::GpsToUtcConversion::ByteSize(v10, a2);
    v13 = (int)v11;
    if (v11 >= 0x80)
      v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, v12);
    else
      v14 = 1;
    v4 = (v4 + v13 + v14 + 1);
  }
LABEL_23:
  *((_DWORD *)this + 7) = v4;
  return v4;
}

uint64_t CLP::LogEntry::PrivateData::GpsToUtcConversion::ByteSize(CLP::LogEntry::PrivateData::GpsToUtcConversion *this, unint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;

  LOBYTE(v3) = *((_BYTE *)this + 44);
  if ((_BYTE)v3)
  {
    if ((*((_BYTE *)this + 44) & 1) != 0)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 1), a2)+ 1;
      v3 = *((_DWORD *)this + 11);
    }
    else
    {
      v4 = 0;
    }
    if ((v3 & 2) != 0)
      v4 += 9;
    if ((v3 & 4) != 0)
      v4 += 9;
    if ((v3 & 8) != 0)
      result = v4 + 9;
    else
      result = v4;
  }
  else
  {
    result = 0;
  }
  *((_DWORD *)this + 10) = result;
  return result;
}

uint64_t CLP::LogEntry::PrivateData::LeapSecondInfo::ByteSize(CLP::LogEntry::PrivateData::LeapSecondInfo *this, unint64_t a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream **v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  unsigned int v10;
  int v11;
  int v12;

  LOBYTE(v3) = *((_BYTE *)this + 28);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_23;
  }
  if ((*((_BYTE *)this + 28) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
    if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *((_DWORD *)this + 7);
      if ((v3 & 2) == 0)
        goto LABEL_16;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_16;
    }
  }
  else
  {
    v4 = 0;
    if ((*((_BYTE *)this + 28) & 2) == 0)
      goto LABEL_16;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
  if ((v6 & 0x80000000) != 0)
  {
    v7 = 11;
  }
  else if (v6 >= 0x80)
  {
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    v3 = *((_DWORD *)this + 7);
  }
  else
  {
    v7 = 2;
  }
  v4 = (v7 + v4);
LABEL_16:
  if ((v3 & 4) != 0)
  {
    v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream **)*((_QWORD *)this + 2);
    if (!v8)
      v8 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream ***)(qword_100100608 + 16);
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLP::LogEntry::PrivateData::LeapSecondChange::ByteSize(v8, a2);
    v11 = (int)v9;
    if (v9 >= 0x80)
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, v10);
    else
      v12 = 1;
    v4 = (v4 + v11 + v12 + 1);
  }
LABEL_23:
  *((_DWORD *)this + 6) = v4;
  return v4;
}

uint64_t CLP::LogEntry::PrivateData::GpsL5SyncState::ByteSize(CLP::LogEntry::PrivateData::GpsL5SyncState *this)
{
  int v1;
  unsigned int v2;
  uint64_t v3;

  v1 = *((_DWORD *)this + 4);
  v2 = 2 * (v1 & 1);
  if ((v1 & 2) != 0)
    v2 += 2;
  if ((v1 & 4) != 0)
    v2 += 2;
  if ((v1 & 8) != 0)
    v2 += 2;
  if (*((_DWORD *)this + 4))
    v3 = v2;
  else
    v3 = 0;
  *((_DWORD *)this + 3) = v3;
  return v3;
}

uint64_t proto::gnss::Fix::ByteSize(proto::gnss::Fix *this, unint64_t a2)
{
  int v3;
  uint64_t v4;
  proto::gnss::Time *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  int v8;
  proto::gnss::Position *v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  int v12;
  proto::gnss::Velocity *v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;

  LOBYTE(v3) = *((_BYTE *)this + 48);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_32;
  }
  if ((*((_BYTE *)this + 48) & 1) == 0)
  {
    v4 = 0;
    if ((*((_BYTE *)this + 48) & 2) == 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  v5 = (proto::gnss::Time *)*((_QWORD *)this + 1);
  if (!v5)
    v5 = *(proto::gnss::Time **)(proto::gnss::Fix::default_instance_ + 8);
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Time::ByteSize(v5, a2);
  v7 = (int)v6;
  if (v6 >= 0x80)
    v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2);
  else
    v8 = 1;
  v4 = (v7 + v8 + 1);
  v3 = *((_DWORD *)this + 12);
  if ((v3 & 2) != 0)
  {
LABEL_12:
    v9 = (proto::gnss::Position *)*((_QWORD *)this + 2);
    if (!v9)
      v9 = *(proto::gnss::Position **)(proto::gnss::Fix::default_instance_ + 16);
    v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Position::ByteSize(v9, a2);
    v11 = (int)v10;
    if (v10 >= 0x80)
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2);
    else
      v12 = 1;
    v4 = (v4 + v11 + v12 + 1);
    v3 = *((_DWORD *)this + 12);
  }
LABEL_18:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0)
      goto LABEL_20;
LABEL_25:
    v4 = v4
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 4), a2)+ 1;
    if ((*((_DWORD *)this + 12) & 0x10) == 0)
      goto LABEL_32;
    goto LABEL_26;
  }
  v13 = (proto::gnss::Velocity *)*((_QWORD *)this + 3);
  if (!v13)
    v13 = *(proto::gnss::Velocity **)(proto::gnss::Fix::default_instance_ + 24);
  v4 = v4 + proto::gnss::Velocity::ByteSize(v13) + 2;
  v3 = *((_DWORD *)this + 12);
  if ((v3 & 8) != 0)
    goto LABEL_25;
LABEL_20:
  if ((v3 & 0x10) == 0)
    goto LABEL_32;
LABEL_26:
  v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 10);
  if ((v14 & 0x80000000) != 0)
  {
    v15 = 11;
  }
  else if (v14 >= 0x80)
  {
    v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2) + 1;
  }
  else
  {
    v15 = 2;
  }
  v4 = (v15 + v4);
LABEL_32:
  *((_DWORD *)this + 11) = v4;
  return v4;
}

uint64_t proto::gnss::Time::ByteSize(proto::gnss::Time *this, unint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  unsigned int v9;

  v3 = *((_DWORD *)this + 18);
  if ((_BYTE)v3)
  {
    if ((v3 & 1) != 0)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 1), a2)+ 1;
      v3 = *((_DWORD *)this + 18);
    }
    else
    {
      v4 = 0;
    }
    if ((v3 & 2) != 0)
      v4 += 5;
    if ((v3 & 4) != 0)
      v6 = v4 + 2;
    else
      v6 = v4;
    if ((v3 & 8) != 0)
    {
      v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 16);
      if ((v7 & 0x80000000) != 0)
      {
        v8 = 11;
      }
      else if (v7 >= 0x80)
      {
        v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2) + 1;
        v3 = *((_DWORD *)this + 18);
      }
      else
      {
        v8 = 2;
      }
      v6 += v8;
    }
    if ((v3 & 0x10) != 0)
    {
      v6 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 3), a2)+ 1;
      v3 = *((_DWORD *)this + 18);
    }
    v9 = v6 + 9;
    if ((v3 & 0x20) == 0)
      v9 = v6;
    if ((v3 & 0x40) != 0)
      v5 = v9 + 9;
    else
      v5 = v9;
    if ((v3 & 0x80) != 0)
    {
      v5 = v5
         + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 6), a2)+ 1;
      v3 = *((_DWORD *)this + 18);
    }
  }
  else
  {
    v5 = 0;
  }
  if ((v3 & 0x100) != 0)
    v5 = v5
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 7), a2)+ 1;
  *((_DWORD *)this + 17) = v5;
  return v5;
}

uint64_t proto::gnss::Velocity::ByteSize(proto::gnss::Velocity *this)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *((unsigned __int8 *)this + 60);
  if (*((_BYTE *)this + 60))
  {
    v2 = ((int)((_DWORD)v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0)
      v2 += 9;
    if ((v1 & 4) != 0)
      v2 += 9;
    if ((v1 & 8) != 0)
      v2 += 9;
    if ((v1 & 0x10) != 0)
      v2 += 9;
    if ((v1 & 0x20) != 0)
      v1 = v2 + 9;
    else
      v1 = v2;
  }
  *((_DWORD *)this + 14) = v1;
  return v1;
}

uint64_t proto::gnss::PwrMeasurement::ByteSize(proto::gnss::PwrMeasurement *this, unsigned int a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;

  v3 = *((unsigned __int8 *)this + 48);
  if (*((_BYTE *)this + 48))
  {
    v4 = (v3 << 31 >> 31) & 9;
    if ((v3 & 2) != 0)
      v4 += 9;
    if ((v3 & 4) != 0)
      v4 += 9;
    if ((v3 & 8) != 0)
      v5 = v4 + 9;
    else
      v5 = v4;
    if ((v3 & 0x10) != 0)
    {
      v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 10);
      if ((v6 & 0x80000000) != 0)
      {
        v7 = 11;
      }
      else if (v6 >= 0x80)
      {
        v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
      }
      else
      {
        v7 = 2;
      }
      v5 = (v7 + v5);
    }
  }
  else
  {
    v5 = 0;
  }
  *((_DWORD *)this + 11) = v5;
  return v5;
}

uint64_t CLP::LogEntry::PrivateData::GlonassTimeInfo::ByteSize(CLP::LogEntry::PrivateData::GlonassTimeInfo *this, unint64_t a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;
  CLP::LogEntry::PrivateData::GlonassSubsecondConversion *v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  int v13;
  CLP::LogEntry::PrivateData::GlonassSubsecondConversion *v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;
  unsigned int v16;
  int v17;
  int v18;

  LOBYTE(v3) = *((_BYTE *)this + 40);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_36;
  }
  if ((*((_BYTE *)this + 40) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
    if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *((_DWORD *)this + 10);
      if ((v3 & 2) == 0)
        goto LABEL_14;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_14;
    }
  }
  else
  {
    v4 = 0;
    if ((*((_BYTE *)this + 40) & 2) == 0)
      goto LABEL_14;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
  if (v6 >= 0x80)
  {
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    v3 = *((_DWORD *)this + 10);
  }
  else
  {
    v7 = 2;
  }
  v4 = (v7 + v4);
LABEL_14:
  if ((v3 & 4) != 0)
  {
    v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
    if ((v8 & 0x80000000) != 0)
    {
      v9 = 11;
    }
    else if (v8 >= 0x80)
    {
      v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2) + 1;
      v3 = *((_DWORD *)this + 10);
    }
    else
    {
      v9 = 2;
    }
    v4 = (v9 + v4);
    if ((v3 & 8) == 0)
    {
LABEL_16:
      if ((v3 & 0x10) == 0)
        goto LABEL_36;
      goto LABEL_30;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_16;
  }
  v10 = (CLP::LogEntry::PrivateData::GlonassSubsecondConversion *)*((_QWORD *)this + 2);
  if (!v10)
    v10 = *(CLP::LogEntry::PrivateData::GlonassSubsecondConversion **)(qword_100100628 + 16);
  v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLP::LogEntry::PrivateData::GlonassSubsecondConversion::ByteSize(v10, a2);
  v12 = (int)v11;
  if (v11 >= 0x80)
    v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2);
  else
    v13 = 1;
  v4 = (v4 + v12 + v13 + 1);
  if ((*((_DWORD *)this + 10) & 0x10) != 0)
  {
LABEL_30:
    v14 = (CLP::LogEntry::PrivateData::GlonassSubsecondConversion *)*((_QWORD *)this + 3);
    if (!v14)
      v14 = *(CLP::LogEntry::PrivateData::GlonassSubsecondConversion **)(qword_100100628 + 24);
    v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLP::LogEntry::PrivateData::GlonassSubsecondConversion::ByteSize(v14, a2);
    v17 = (int)v15;
    if (v15 >= 0x80)
      v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, v16);
    else
      v18 = 1;
    v4 = (v4 + v17 + v18 + 1);
  }
LABEL_36:
  *((_DWORD *)this + 9) = v4;
  return v4;
}

uint64_t CLP::LogEntry::PrivateData::GlonassSubsecondConversion::ByteSize(CLP::LogEntry::PrivateData::GlonassSubsecondConversion *this, unint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;

  LOBYTE(v3) = *((_BYTE *)this + 28);
  if ((_BYTE)v3)
  {
    if ((*((_BYTE *)this + 28) & 1) != 0)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 1), a2)+ 1;
      v3 = *((_DWORD *)this + 7);
    }
    else
    {
      v4 = 0;
    }
    if ((v3 & 2) != 0)
      result = v4 + 9;
    else
      result = v4;
  }
  else
  {
    result = 0;
  }
  *((_DWORD *)this + 6) = result;
  return result;
}

uint64_t CLP::LogEntry::PrivateData::GalileoTimeInfo::ByteSize(CLP::LogEntry::PrivateData::GalileoTimeInfo *this, unint64_t a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  CLP::LogEntry::PrivateData::LeapSecondInfo *v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  int v9;
  CLP::LogEntry::PrivateData::SubSecondConversion *v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  int v13;
  CLP::LogEntry::PrivateData::SubSecondConversion *v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;
  unsigned int v16;
  int v17;
  int v18;

  LOBYTE(v3) = *((_BYTE *)this + 40);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_31;
  }
  if ((*((_BYTE *)this + 40) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
    if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *((_DWORD *)this + 10);
      if ((v3 & 2) == 0)
        goto LABEL_16;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_16;
    }
  }
  else
  {
    v4 = 0;
    if ((*((_BYTE *)this + 40) & 2) == 0)
      goto LABEL_16;
  }
  v6 = (CLP::LogEntry::PrivateData::LeapSecondInfo *)*((_QWORD *)this + 1);
  if (!v6)
    v6 = *(CLP::LogEntry::PrivateData::LeapSecondInfo **)(qword_100100640 + 8);
  v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLP::LogEntry::PrivateData::LeapSecondInfo::ByteSize(v6, a2);
  v8 = (int)v7;
  if (v7 >= 0x80)
    v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
  else
    v9 = 1;
  v4 = (v4 + v8 + v9 + 1);
  v3 = *((_DWORD *)this + 10);
LABEL_16:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0)
      goto LABEL_31;
    goto LABEL_25;
  }
  v10 = (CLP::LogEntry::PrivateData::SubSecondConversion *)*((_QWORD *)this + 2);
  if (!v10)
    v10 = *(CLP::LogEntry::PrivateData::SubSecondConversion **)(qword_100100640 + 16);
  v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLP::LogEntry::PrivateData::SubSecondConversion::ByteSize(v10, a2);
  v12 = (int)v11;
  if (v11 >= 0x80)
    v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2);
  else
    v13 = 1;
  v4 = (v4 + v12 + v13 + 1);
  if ((*((_DWORD *)this + 10) & 8) != 0)
  {
LABEL_25:
    v14 = (CLP::LogEntry::PrivateData::SubSecondConversion *)*((_QWORD *)this + 3);
    if (!v14)
      v14 = *(CLP::LogEntry::PrivateData::SubSecondConversion **)(qword_100100640 + 24);
    v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLP::LogEntry::PrivateData::SubSecondConversion::ByteSize(v14, a2);
    v17 = (int)v15;
    if (v15 >= 0x80)
      v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, v16);
    else
      v18 = 1;
    v4 = (v4 + v17 + v18 + 1);
  }
LABEL_31:
  *((_DWORD *)this + 9) = v4;
  return v4;
}

uint64_t CLP::LogEntry::PrivateData::SubSecondConversion::ByteSize(CLP::LogEntry::PrivateData::SubSecondConversion *this, unint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;

  LOBYTE(v3) = *((_BYTE *)this + 36);
  if ((_BYTE)v3)
  {
    if ((*((_BYTE *)this + 36) & 1) != 0)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 1), a2)+ 1;
      v3 = *((_DWORD *)this + 9);
    }
    else
    {
      v4 = 0;
    }
    if ((v3 & 2) != 0)
      v4 += 9;
    if ((v3 & 4) != 0)
      result = v4 + 9;
    else
      result = v4;
  }
  else
  {
    result = 0;
  }
  *((_DWORD *)this + 8) = result;
  return result;
}

BOOL ReceiverClockConversion::isRxClockValid(ReceiverClockConversion *this, uint64_t a2)
{
  unint64_t v2;
  NSObject *v4;
  int v6;
  uint64_t v7;

  v2 = a2 - 1;
  if ((unint64_t)(a2 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v4 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
    {
      v6 = 134349056;
      v7 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#rxClockConv,missing rx clock,%{public}llu", (uint8_t *)&v6, 0xCu);
    }
  }
  return v2 < 0xFFFFFFFFFFFFFFFELL;
}

void sub_10001DA64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t j;
  std::mutex *v6;
  gpsd::util *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  NSObject *v21;
  int v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t i;
  char *v26;
  void *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  double v36;
  char *v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  char *v41;
  char **v42;
  char *v43;
  void **v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  BOOL v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _DWORD *v62;
  int v63;
  uint64_t k;
  char *v66;
  float *v67;
  char **v68;
  float *v69;
  float *v70;
  void **v71;
  unint64_t v72;
  uint64_t v73;
  char *v74;
  float *v75;
  uint64_t v76;
  uint64_t v77;
  double v78;
  float *v79;
  uint64_t v80;
  float v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  float *v95;
  float *v96;
  int v97;
  NSObject *v98;
  double v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  double v131;
  float v132;
  double v133;
  double v134;
  NSObject *v135;
  float v136;
  float v137;
  float v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  uint8_t buf[4];
  _BYTE v144[10];
  _BYTE v145[10];
  __int16 v146;
  double v147;
  __int16 v148;
  double v149;
  __int16 v150;
  double v151;
  __int16 v152;
  double v153;
  __int16 v154;
  double v155;
  __int16 v156;
  double v157;
  __int16 v158;
  double v159;
  __int16 v160;
  double v161;
  __int16 v162;
  double v163;
  __int16 v164;
  double v165;
  __int16 v166;
  double v167;
  __int16 v168;
  double v169;
  __int16 v170;
  double v171;
  __int16 v172;
  double v173;
  __int16 v174;
  double v175;
  __int16 v176;
  double v177;
  __int16 v178;
  double v179;
  __int16 v180;
  double v181;
  __int16 v182;
  double v183;
  __int16 v184;
  double v185;
  __int16 v186;
  double v187;
  __int16 v188;
  double v189;
  __int16 v190;
  double v191;
  __int16 v192;
  double v193;
  __int16 v194;
  double v195;
  __int16 v196;
  double v197;
  __int16 v198;
  double v199;
  __int16 v200;
  double v201;
  __int16 v202;
  double v203;
  __int16 v204;
  double v205;
  __int16 v206;
  double v207;
  __int16 v208;
  double v209;
  __int16 v210;
  double v211;
  __int16 v212;
  double v213;

  if (*(_QWORD *)(a1 + 824))
  {
    j = a1;
    v6 = (std::mutex *)(a1 + 832);
    std::mutex::lock((std::mutex *)(a1 + 832));
    if (a2)
    {
      *(_QWORD *)(j + 464) = gpsd::util::getMachContinuousTimeNs(v7);
      *(_OWORD *)(j + 264) = *(_OWORD *)a2;
      v8 = *(_OWORD *)(a2 + 16);
      v9 = *(_OWORD *)(a2 + 32);
      v10 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(j + 312) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(j + 328) = v10;
      *(_OWORD *)(j + 280) = v8;
      *(_OWORD *)(j + 296) = v9;
      v11 = *(_OWORD *)(a2 + 80);
      v12 = *(_OWORD *)(a2 + 96);
      v13 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(j + 376) = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(j + 392) = v13;
      *(_OWORD *)(j + 344) = v11;
      *(_OWORD *)(j + 360) = v12;
      v14 = *(_OWORD *)(a2 + 144);
      v15 = *(_OWORD *)(a2 + 160);
      v16 = *(_OWORD *)(a2 + 176);
      *(_DWORD *)(j + 456) = *(_DWORD *)(a2 + 192);
      *(_OWORD *)(j + 424) = v15;
      *(_OWORD *)(j + 440) = v16;
      *(_OWORD *)(j + 408) = v14;
      v17 = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(j + 552) |= v17;
      if ((v17 & 1) == 0)
        ++*(_DWORD *)(j + 560);
      v18 = *(unsigned int *)(a2 + 128);
      if (v18 > 4)
      {
        v19 = qword_100100830;
        if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67240192;
          *(_DWORD *)v144 = v18;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "PerfWarning,bad_index,gnssContentIndex,%{public}d", buf, 8u);
        }
      }
      else
      {
        ++*(_DWORD *)(j + 4 * v18 + 564);
      }
      v20 = *(unsigned int *)(a2 + 192);
      if (v20 > 3)
      {
        v21 = qword_100100830;
        if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67240192;
          *(_DWORD *)v144 = v18;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "PerfWarning,bad_index,gnssContentIndex,%{public}d", buf, 8u);
        }
      }
      else
      {
        ++*(_DWORD *)(j + 4 * v20 + 604);
      }
      v22 = *(_DWORD *)(a2 + 116);
      switch(v22)
      {
        case 10:
          v23 = 1;
          break;
        case 25:
          v23 = 2;
          break;
        case 50:
          v23 = 3;
          break;
        default:
          v23 = 4 * (v22 == 75);
          break;
      }
      ++*(_DWORD *)(j + 584 + 4 * v23);
    }
    if (!a3)
      goto LABEL_132;
    v24 = atomic_load((unsigned __int8 *)&qword_1001001C0);
    if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_1001001C0))
    {
      qword_100100278 = 0;
      *(_OWORD *)&qword_100100268 = 0u;
      xmmword_100100258 = 0u;
      unk_100100248 = 0u;
      *(_OWORD *)&qword_100100238 = 0u;
      xmmword_100100228 = 0u;
      *(_OWORD *)&algn_100100210[8] = 0u;
      *(_OWORD *)&qword_100100208 = 0u;
      xmmword_1001001F8 = 0u;
      *(_OWORD *)algn_1001001E8 = 0u;
      xmmword_1001001D8 = 0u;
      __cxa_atexit((void (*)(void *))sub_100025D8C, &xmmword_1001001D8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1001001C0);
    }
    for (i = 0; i != 168; i += 24)
    {
      v26 = &byte_1001001B8[i];
      v27 = *(void **)&byte_1001001B8[i + 32];
      *(_QWORD *)&byte_1001001B8[i + 40] = v27;
      if (*(_QWORD *)&byte_1001001B8[i + 48] - (_QWORD)v27 <= 0x13uLL)
      {
        v28 = (char *)operator new(0x14uLL);
        *((_QWORD *)v26 + 4) = v28;
        *((_QWORD *)v26 + 5) = v28;
        *((_QWORD *)v26 + 6) = v28 + 20;
        if (v27)
          operator delete(v27);
      }
    }
    v140 = a3;
    v29 = *(_QWORD *)(a3 + 112);
    v30 = *(_QWORD *)(a3 + 120);
    v142 = j;
    if (v29 != v30)
    {
      v31 = 0;
      v141 = 0;
      v32 = j + 736;
      v139 = j + 760;
      while (2)
      {
        v33 = 0;
        switch(*(_DWORD *)v29)
        {
          case 1:
            goto LABEL_34;
          case 2:
            v33 = 3;
            goto LABEL_34;
          case 4:
            v33 = 4;
            goto LABEL_34;
          case 8:
            v33 = 2;
LABEL_34:
            if (!*(_BYTE *)(v29 + 173))
              goto LABEL_78;
            ++*(_DWORD *)(v32 + 4 * v33);
            v34 = *(_QWORD *)(v29 + 120);
            if (v34 != -1)
            {
              v35 = *(_QWORD *)(v29 + 128);
              if (v35 != -1 && v34 <= v35 && (*(_QWORD *)(v29 + 136) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
              {
                v36 = *(double *)(v29 + 144);
                if (v36 > 0.0 && v36 < 5000.0)
                {
                  ++v141;
                  ++*(_DWORD *)(v139 + 4 * v33);
                }
              }
            }
            v37 = &byte_1001001B8[24 * v33];
            v40 = *((_QWORD *)v37 + 6);
            v39 = v37 + 48;
            v38 = v40;
            v42 = (char **)(v39 - 1);
            v41 = (char *)*(v39 - 1);
            if ((unint64_t)v41 >= v40)
            {
              v44 = (void **)(v39 - 2);
              v45 = (char *)*(v39 - 2);
              v46 = (v41 - v45) >> 2;
              v47 = v46 + 1;
              if ((unint64_t)(v46 + 1) >> 62)
                goto LABEL_135;
              v48 = v38 - (_QWORD)v45;
              if (v48 >> 1 > v47)
                v47 = v48 >> 1;
              v49 = (unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL;
              v50 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v49)
                v50 = v47;
              if (v50)
              {
                v50 = (unint64_t)sub_10002687C(v50);
                v41 = *v42;
                v45 = (char *)*v44;
              }
              else
              {
                v51 = 0;
              }
              v52 = (char *)(v50 + 4 * v46);
              *(_DWORD *)v52 = *(_DWORD *)(v29 + 168);
              v43 = v52 + 4;
              while (v41 != v45)
              {
                v53 = *((_DWORD *)v41 - 1);
                v41 -= 4;
                *((_DWORD *)v52 - 1) = v53;
                v52 -= 4;
              }
              *v44 = v52;
              *v42 = v43;
              *v39 = v50 + 4 * v51;
              if (v45)
                operator delete(v45);
              j = v142;
            }
            else
            {
              *(_DWORD *)v41 = *(_DWORD *)(v29 + 168);
              v43 = v41 + 4;
            }
            *v42 = v43;
            v54 = qword_100100270;
            if (qword_100100270 >= (unint64_t)qword_100100278)
            {
              v56 = (void *)qword_100100268;
              v57 = (qword_100100270 - qword_100100268) >> 2;
              v58 = v57 + 1;
              if ((unint64_t)(v57 + 1) >> 62)
LABEL_135:
                sub_100026868();
              v59 = qword_100100278 - qword_100100268;
              if ((qword_100100278 - qword_100100268) >> 1 > v58)
                v58 = v59 >> 1;
              v49 = (unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL;
              v60 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v49)
                v60 = v58;
              if (v60)
              {
                v60 = (unint64_t)sub_10002687C(v60);
                v56 = (void *)qword_100100268;
                v54 = qword_100100270;
              }
              else
              {
                v61 = 0;
              }
              v62 = (_DWORD *)(v60 + 4 * v57);
              *v62 = *(_DWORD *)(v29 + 168);
              v55 = (uint64_t)(v62 + 1);
              for (j = v142; (void *)v54 != v56; --v62)
              {
                v63 = *(_DWORD *)(v54 - 4);
                v54 -= 4;
                *(v62 - 1) = v63;
              }
              qword_100100268 = (uint64_t)v62;
              qword_100100270 = v55;
              qword_100100278 = v60 + 4 * v61;
              if (v56)
                operator delete(v56);
            }
            else
            {
              *(_DWORD *)qword_100100270 = *(_DWORD *)(v29 + 168);
              v55 = v54 + 4;
            }
            ++v31;
            qword_100100270 = v55;
            if (!*(_BYTE *)(j + 110) && *(_BYTE *)(v29 + 8) == 8 && *(float *)(v29 + 168) > 25.0)
              *(_BYTE *)(j + 110) = 1;
LABEL_78:
            v29 += 176;
            if (v29 == v30)
              goto LABEL_81;
            continue;
          default:
            goto LABEL_78;
        }
      }
    }
    v141 = 0;
    v31 = 0;
LABEL_81:
    for (k = 0; k != 7; ++k)
    {
      v66 = &byte_1001001B8[24 * k];
      v69 = (float *)*((_QWORD *)v66 + 4);
      v68 = (char **)(v66 + 32);
      v67 = v69;
      v71 = (void **)(v68 + 1);
      v70 = (float *)v68[1];
      v72 = 126 - 2 * __clz(v70 - v69);
      if (v70 == v69)
        v73 = 0;
      else
        v73 = v72;
      sub_10001E710(v67, v70, v73, 1);
      v74 = (char *)*v71;
      v75 = (float *)*v68;
      v76 = (_BYTE *)*v71 - *v68;
      v77 = v76 >> 2;
      if ((unint64_t)(v76 >> 2) >= 5)
        v77 = 5;
      if (v77)
      {
        v78 = 0.0;
        v79 = (float *)*v68;
        v80 = v77;
        do
        {
          v81 = *v79++;
          v78 = v78 + v81;
          --v80;
        }
        while (v80);
        v82 = j + 624 + 16 * k;
        ++*(_DWORD *)v82;
        *(double *)(v82 + 8) = v78 / (double)(unint64_t)v77 + *(double *)(v82 + 8);
      }
      if ((unint64_t)v76 > 0x13)
      {
        if (v76 != 20)
          *v71 = v75 + 5;
      }
      else
      {
        v83 = 5 - ((unint64_t)v76 >> 2);
        v84 = &byte_1001001B8[24 * k];
        v87 = *((_QWORD *)v84 + 6);
        v86 = v84 + 48;
        v85 = v87;
        if (v83 <= (v87 - (uint64_t)v74) >> 2)
        {
          memset_pattern16(v74, &unk_1000CECA0, ((16 - v76) & 0xFFFFFFFFFFFFFFFCLL) + 4);
          *v71 = &v74[4 * v83];
        }
        else
        {
          v88 = v85 - (_QWORD)v75;
          v89 = v88 >> 1;
          if ((unint64_t)(v88 >> 1) <= 5)
            v89 = 5;
          if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL)
            v90 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v90 = v89;
          v91 = (char *)sub_10002687C(v90);
          v93 = v92;
          memset_pattern16(&v91[v76], &unk_1000CECA0, 20 - v76);
          v94 = &v91[4 * ((unint64_t)v76 >> 2)];
          v95 = (float *)*v71;
          v96 = (float *)*v68;
          while (v95 != v96)
          {
            v97 = *((_DWORD *)v95-- - 1);
            *((_DWORD *)v94 - 1) = v97;
            v94 -= 4;
          }
          *v68 = v94;
          *v71 = v91 + 20;
          *v86 = &v91[4 * v93];
          if (v96)
            operator delete(v96);
        }
      }
    }
    v98 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO))
    {
      if (qword_100100270 == qword_100100268
        || (unint64_t)(qword_100100270 - qword_100100268) <= 0x10
        || *((_QWORD *)&xmmword_1001001D8 + 1) == (_QWORD)xmmword_1001001D8
        || *((_QWORD *)&xmmword_1001001D8 + 1) - (_QWORD)xmmword_1001001D8 <= 0x10uLL
        || (_QWORD)xmmword_1001001F8 == qword_1001001F0
        || (unint64_t)(xmmword_1001001F8 - qword_1001001F0) <= 0x10
        || *(_QWORD *)algn_100100210 == qword_100100208
        || (unint64_t)(*(_QWORD *)algn_100100210 - qword_100100208) <= 0x10
        || (_QWORD)xmmword_100100228 == qword_100100220
        || (unint64_t)(xmmword_100100228 - qword_100100220) <= 0x10
        || unk_100100240 == qword_100100238
        || (unint64_t)(unk_100100240 - qword_100100238) <= 0x10
        || (_QWORD)xmmword_100100258 == qword_100100250
        || (unint64_t)(xmmword_100100258 - qword_100100250) <= 0x10)
      {
        sub_100026BD8();
      }
      v99 = *(float *)qword_100100268;
      v137 = *(float *)(qword_100100268 + 8);
      v138 = *(float *)(qword_100100268 + 4);
      v100 = *(float *)(qword_100100268 + 16);
      v136 = *(float *)(qword_100100268 + 12);
      v101 = *(float *)xmmword_1001001D8;
      v102 = *(float *)(xmmword_1001001D8 + 4);
      v103 = *(float *)(xmmword_1001001D8 + 8);
      v104 = *(float *)(xmmword_1001001D8 + 12);
      v105 = *(float *)(xmmword_1001001D8 + 16);
      v106 = *(float *)qword_1001001F0;
      v107 = *(float *)(qword_1001001F0 + 4);
      v108 = *(float *)(qword_1001001F0 + 8);
      v109 = *(float *)(qword_1001001F0 + 12);
      v110 = *(float *)(qword_1001001F0 + 16);
      v111 = *(float *)qword_100100208;
      v112 = *(float *)(qword_100100208 + 4);
      v113 = *(float *)(qword_100100208 + 8);
      v114 = *(float *)(qword_100100208 + 12);
      v115 = *(float *)(qword_100100208 + 16);
      v116 = *(float *)qword_100100220;
      v117 = *(float *)(qword_100100220 + 4);
      v118 = *(float *)(qword_100100220 + 8);
      v119 = *(float *)(qword_100100220 + 12);
      v120 = *(float *)(qword_100100220 + 16);
      v121 = *(float *)qword_100100238;
      v122 = *(float *)(qword_100100238 + 4);
      v123 = *(float *)(qword_100100238 + 8);
      v124 = *(float *)(qword_100100238 + 12);
      v125 = *(float *)qword_100100250;
      v126 = *(float *)(qword_100100250 + 4);
      *(_DWORD *)buf = 67249408;
      v127 = *(float *)(qword_100100238 + 16);
      v128 = *(float *)(qword_100100250 + 8);
      v129 = *(float *)(qword_100100250 + 12);
      v130 = *(float *)(qword_100100250 + 16);
      *(double *)&v145[2] = v99;
      v147 = v138;
      v149 = v137;
      v151 = v136;
      v153 = v100;
      v155 = v101;
      v157 = v102;
      v159 = v103;
      v161 = v104;
      v163 = v105;
      v165 = v106;
      v167 = v107;
      v169 = v108;
      v171 = v109;
      v173 = v110;
      v175 = v111;
      v177 = v112;
      v179 = v113;
      v181 = v114;
      v183 = v115;
      v185 = v116;
      v187 = v117;
      v189 = v118;
      v191 = v119;
      v193 = v120;
      v195 = v121;
      v197 = v122;
      v199 = v123;
      v201 = v124;
      v203 = v127;
      v205 = v125;
      v207 = v126;
      v209 = v128;
      v211 = v129;
      v213 = v130;
      *(_DWORD *)v144 = v31;
      *(_WORD *)&v144[4] = 1026;
      *(_DWORD *)&v144[6] = v141;
      *(_WORD *)v145 = 2050;
      v146 = 2050;
      v148 = 2050;
      v150 = 2050;
      v152 = 2050;
      v154 = 2050;
      v156 = 2050;
      v158 = 2050;
      v160 = 2050;
      v162 = 2050;
      v164 = 2050;
      v166 = 2050;
      v168 = 2050;
      v170 = 2050;
      v172 = 2050;
      v174 = 2050;
      v176 = 2050;
      v178 = 2050;
      v180 = 2050;
      v182 = 2050;
      v184 = 2050;
      v186 = 2050;
      v188 = 2050;
      v190 = 2050;
      v192 = 2050;
      v194 = 2050;
      v196 = 2050;
      v198 = 2050;
      v200 = 2050;
      v202 = 2050;
      v204 = 2050;
      v206 = 2050;
      v208 = 2050;
      v210 = 2050;
      v212 = 2050;
      _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_INFO, "PerfSinglePvtm,nCodeLock,%{public}d,nPhaseLock,%{public}d,any_cn0,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,gps_cn0,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,qzs_cn0,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,gal_cn0,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,glo_cn0,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,bds_cn0,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,nic_cn0,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f", buf, 0x16Cu);
    }
    v131 = *(double *)(v140 + 48);
    if ((*(_QWORD *)&v131 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      goto LABEL_132;
    v132 = *(float *)(v140 + 104);
    if ((LODWORD(v132) & 0x7FFFFFFFu) > 0x7F7FFFFF || v132 < 0.0)
      goto LABEL_132;
    if (*(_BYTE *)(v142 + 176))
    {
      v133 = v132;
      if (*(double *)(v142 + 168) <= v132)
      {
LABEL_132:
        std::mutex::unlock(v6);
        return;
      }
      v134 = v131 + *(double *)(v140 + 96);
      *(double *)(v142 + 160) = v134;
      *(double *)(v142 + 168) = v133;
    }
    else
    {
      v134 = v131 + *(double *)(v140 + 96);
      v133 = v132;
      *(double *)(v142 + 160) = v134;
      *(double *)(v142 + 168) = v132;
      *(_BYTE *)(v142 + 176) = 1;
    }
    v135 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134349312;
      *(double *)v144 = v134;
      *(_WORD *)&v144[8] = 2050;
      *(double *)v145 = v133;
      _os_log_impl((void *)&_mh_execute_header, v135, OS_LOG_TYPE_INFO, "#clk,updateSavedOffset,ppb,%{public}.2f,unc,%{public}.2f", buf, 0x16u);
    }
    goto LABEL_132;
  }
}

void sub_10001E6E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::mutex *a14)
{
  std::mutex *v14;

  std::mutex::unlock(v14);
  _Unwind_Resume(a1);
}

float *sub_10001E710(float *result, float *a2, uint64_t a3, char a4)
{
  float *v7;
  float *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float *v12;
  float v13;
  float v14;
  uint64_t v15;
  float v16;
  float *v17;
  float *v18;
  float v19;
  float v20;
  float v21;
  float *v22;
  float *v23;
  float v24;
  float v25;
  float *v26;
  BOOL v27;
  float v28;
  float *v29;
  float *v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float *v36;
  float v37;
  float v38;
  float v39;
  float v40;
  int v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  int v63;
  float v64;
  float v65;
  float v66;
  float v67;
  int v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float *v78;
  BOOL v80;
  uint64_t v81;
  float *v82;
  float v83;
  float v84;
  uint64_t v85;
  uint64_t v86;
  float *v87;
  int64_t v88;
  int64_t v89;
  int64_t v90;
  uint64_t v91;
  float *v92;
  float *v93;
  float v94;
  float v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  float v100;
  float *v101;
  float *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  float *v107;
  float v108;
  float v110;
  float v111;
  float *v112;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v37 = *(a2 - 1);
        v38 = *v8;
        if (v37 > *v8)
        {
          *v8 = v37;
          *(a2 - 1) = v38;
        }
        return result;
      case 3uLL:
        v39 = v8[1];
        v40 = *(a2 - 1);
        if (v39 <= v40)
          v41 = *((_DWORD *)a2 - 1);
        else
          v41 = *((_DWORD *)v8 + 1);
        if (v39 > v40)
          v39 = *(a2 - 1);
        *(a2 - 1) = v39;
        *((_DWORD *)v8 + 1) = v41;
        v42 = *(a2 - 1);
        if (v42 <= *v8)
          v43 = *v8;
        else
          v43 = *(a2 - 1);
        if (v42 > *v8)
          v42 = *v8;
        *(a2 - 1) = v42;
        v45 = *v8;
        v44 = v8[1];
        if (v43 <= v44)
        {
          v45 = v8[1];
          v44 = v43;
        }
        *v8 = v45;
        v8[1] = v44;
        return result;
      case 4uLL:
        v47 = v8[1];
        v46 = v8[2];
        if (*v8 <= v46)
          v48 = v8[2];
        else
          v48 = *v8;
        if (*v8 <= v46)
          v46 = *v8;
        v8[2] = v46;
        *v8 = v48;
        v49 = *(a2 - 1);
        if (v47 <= v49)
          v50 = *(a2 - 1);
        else
          v50 = v47;
        if (v47 <= v49)
          v49 = v47;
        *(a2 - 1) = v49;
        v51 = *v8;
        if (*v8 <= v50)
          v52 = v50;
        else
          v52 = *v8;
        if (*v8 > v50)
          v51 = v50;
        *v8 = v52;
        v8[1] = v51;
        v53 = v8[2];
        v54 = *(a2 - 1);
        if (v53 <= v54)
          v55 = *(a2 - 1);
        else
          v55 = v8[2];
        if (v53 > v54)
          v53 = *(a2 - 1);
        *(a2 - 1) = v53;
        v56 = v8[1];
        if (v56 <= v55)
          v57 = v55;
        else
          v57 = v8[1];
        if (v56 > v55)
          v56 = v55;
        v8[1] = v57;
        v8[2] = v56;
        return result;
      case 5uLL:
        v58 = *v8;
        v59 = v8[1];
        if (*v8 <= v59)
          v60 = v8[1];
        else
          v60 = *v8;
        if (*v8 > v59)
          v58 = v8[1];
        *v8 = v60;
        v8[1] = v58;
        v61 = v8[3];
        v62 = *(a2 - 1);
        if (v61 <= v62)
          v63 = *((_DWORD *)a2 - 1);
        else
          v63 = *((_DWORD *)v8 + 3);
        if (v61 > v62)
          v61 = *(a2 - 1);
        *(a2 - 1) = v61;
        *((_DWORD *)v8 + 3) = v63;
        v64 = *(a2 - 1);
        v65 = v8[2];
        if (v64 <= v65)
          v66 = v8[2];
        else
          v66 = *(a2 - 1);
        if (v64 > v65)
          v64 = v8[2];
        *(a2 - 1) = v64;
        v68 = *((_DWORD *)v8 + 2);
        v67 = v8[3];
        v69 = v8[1];
        if (v66 <= v67)
        {
          v68 = *((_DWORD *)v8 + 3);
          v67 = v66;
        }
        *((_DWORD *)v8 + 2) = v68;
        v8[3] = v67;
        v70 = *(a2 - 1);
        if (v69 <= v70)
          v71 = *(a2 - 1);
        else
          v71 = v69;
        if (v69 <= v70)
          v70 = v69;
        *(a2 - 1) = v70;
        v72 = *v8;
        v74 = v8[2];
        v73 = v8[3];
        if (v73 <= *v8)
          v75 = *v8;
        else
          v75 = v8[3];
        if (v73 > *v8)
          v73 = *v8;
        if (v75 <= v74)
        {
          v72 = v8[2];
          v74 = v75;
        }
        if (v73 <= v71)
          v76 = v71;
        else
          v76 = v73;
        if (v73 > v71)
          v73 = v71;
        if (v76 <= v74)
          v71 = v74;
        *v8 = v72;
        v8[1] = v71;
        if (v76 <= v74)
          v77 = v76;
        else
          v77 = v74;
        v8[2] = v77;
        v8[3] = v73;
        return result;
      default:
        if (v9 <= 95)
        {
          v78 = v8 + 1;
          v80 = v8 == a2 || v78 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v80)
            {
              v81 = 4;
              v82 = v8;
              do
              {
                v84 = *v82;
                v83 = v82[1];
                v82 = v78;
                if (v83 > v84)
                {
                  v85 = v81;
                  while (1)
                  {
                    *(float *)((char *)v8 + v85) = v84;
                    v86 = v85 - 4;
                    if (v85 == 4)
                      break;
                    v84 = *(float *)((char *)v8 + v85 - 8);
                    v85 -= 4;
                    if (v83 <= v84)
                    {
                      v87 = (float *)((char *)v8 + v86);
                      goto LABEL_151;
                    }
                  }
                  v87 = v8;
LABEL_151:
                  *v87 = v83;
                }
                v78 = v82 + 1;
                v81 += 4;
              }
              while (v82 + 1 != a2);
            }
          }
          else if (!v80)
          {
            do
            {
              v111 = *v7;
              v110 = v7[1];
              v7 = v78;
              if (v110 > v111)
              {
                v112 = v78;
                do
                {
                  *v112 = v111;
                  v111 = *(v112 - 2);
                  --v112;
                }
                while (v110 > v111);
                *v112 = v110;
              }
              ++v78;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 == a2)
            return result;
          v88 = (v10 - 2) >> 1;
          v89 = v88;
          do
          {
            v90 = v89;
            if (v88 >= v89)
            {
              v91 = (2 * v89) | 1;
              v92 = &v8[v91];
              if (2 * v90 + 2 < (uint64_t)v10 && *v92 > v92[1])
              {
                ++v92;
                v91 = 2 * v90 + 2;
              }
              v93 = &v8[v90];
              v94 = *v92;
              v95 = *v93;
              if (*v92 <= *v93)
              {
                do
                {
                  *v93 = v94;
                  v93 = v92;
                  if (v88 < v91)
                    break;
                  v96 = 2 * v91;
                  v91 = (2 * v91) | 1;
                  v92 = &v8[v91];
                  v97 = v96 + 2;
                  if (v97 < (uint64_t)v10 && *v92 > v92[1])
                  {
                    ++v92;
                    v91 = v97;
                  }
                  v94 = *v92;
                }
                while (*v92 <= v95);
                *v93 = v95;
              }
            }
            v89 = v90 - 1;
          }
          while (v90);
          v98 = (unint64_t)v9 >> 2;
          while (2)
          {
            v99 = 0;
            v100 = *v8;
            v101 = v8;
            do
            {
              v102 = v101;
              v101 += v99 + 1;
              v103 = 2 * v99;
              v99 = (2 * v99) | 1;
              v104 = v103 + 2;
              if (v104 < v98 && *v101 > v101[1])
              {
                ++v101;
                v99 = v104;
              }
              *v102 = *v101;
            }
            while (v99 <= (uint64_t)((unint64_t)(v98 - 2) >> 1));
            if (v101 == --a2)
            {
LABEL_179:
              *v101 = v100;
            }
            else
            {
              *v101 = *a2;
              *a2 = v100;
              v105 = (char *)v101 - (char *)v8 + 4;
              if (v105 >= 5)
              {
                v106 = (((unint64_t)v105 >> 2) - 2) >> 1;
                v107 = &v8[v106];
                v108 = *v107;
                v100 = *v101;
                if (*v107 > *v101)
                {
                  do
                  {
                    *v101 = v108;
                    v101 = v107;
                    if (!v106)
                      break;
                    v106 = (v106 - 1) >> 1;
                    v107 = &v8[v106];
                    v108 = *v107;
                  }
                  while (*v107 > v100);
                  goto LABEL_179;
                }
              }
            }
            if (v98-- <= 2)
              return result;
            continue;
          }
        }
        v11 = v10 >> 1;
        v12 = &v8[v10 >> 1];
        if ((unint64_t)v9 < 0x201)
        {
          result = sub_1000268D8(&v7[v10 >> 1], v7, a2 - 1);
        }
        else
        {
          sub_1000268D8(v7, &v7[v10 >> 1], a2 - 1);
          sub_1000268D8(v7 + 1, v12 - 1, a2 - 2);
          sub_1000268D8(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = sub_1000268D8(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        if ((a4 & 1) == 0 && *(v7 - 1) <= v14)
        {
          if (v14 <= *(a2 - 1))
          {
            v29 = v7 + 1;
            do
            {
              v8 = v29;
              if (v29 >= a2)
                break;
              ++v29;
            }
            while (v14 <= *v8);
          }
          else
          {
            v8 = v7;
            do
            {
              v28 = v8[1];
              ++v8;
            }
            while (v14 <= v28);
          }
          v30 = a2;
          if (v8 < a2)
          {
            v30 = a2;
            do
              v31 = *--v30;
            while (v14 > v31);
          }
          if (v8 < v30)
          {
            v32 = *v8;
            v33 = *v30;
            do
            {
              *v8 = v33;
              *v30 = v32;
              do
              {
                v34 = v8[1];
                ++v8;
                v32 = v34;
              }
              while (v14 <= v34);
              do
              {
                v35 = *--v30;
                v33 = v35;
              }
              while (v14 > v35);
            }
            while (v8 < v30);
          }
          v36 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v36;
          a4 = 0;
          *v36 = v14;
          continue;
        }
        v15 = 0;
        do
          v16 = v7[++v15];
        while (v16 > v14);
        v17 = &v7[v15];
        v18 = a2;
        if (v15 == 1)
        {
          v18 = a2;
          do
          {
            if (v17 >= v18)
              break;
            v20 = *--v18;
          }
          while (v20 <= v14);
        }
        else
        {
          do
            v19 = *--v18;
          while (v19 <= v14);
        }
        if (v17 >= v18)
        {
          v26 = v17 - 1;
        }
        else
        {
          v21 = *v18;
          v22 = &v7[v15];
          v23 = v18;
          do
          {
            *v22 = v21;
            *v23 = v16;
            do
            {
              v24 = v22[1];
              ++v22;
              v16 = v24;
            }
            while (v24 > v14);
            do
            {
              v25 = *--v23;
              v21 = v25;
            }
            while (v25 <= v14);
          }
          while (v22 < v23);
          v26 = v22 - 1;
        }
        if (v26 != v7)
          *v7 = *v26;
        *v26 = v14;
        if (v17 < v18)
        {
LABEL_32:
          result = (float *)sub_10001E710(v7, v26, a3, a4 & 1);
          a4 = 0;
          v8 = v26 + 1;
          continue;
        }
        v27 = sub_100026948(v7, v26);
        v8 = v26 + 1;
        result = (float *)sub_100026948(v26 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v27)
            continue;
          goto LABEL_32;
        }
        a2 = v26;
        if (!v27)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t proto::gnss::Position::ByteSize(proto::gnss::Position *this, unint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;

  v3 = *((_DWORD *)this + 24);
  if ((_BYTE)v3)
  {
    v4 = (v3 << 31 >> 31) & 9;
    if ((v3 & 2) != 0)
      v4 += 9;
    if ((v3 & 4) != 0)
      v4 += 9;
    if ((v3 & 8) != 0)
      v4 += 9;
    if ((v3 & 0x10) != 0)
      v4 += 9;
    if ((v3 & 0x20) != 0)
      v4 += 9;
    if ((v3 & 0x40) != 0)
      v4 += 9;
    if ((v3 & 0x80) != 0)
      v5 = v4 + 9;
    else
      v5 = v4;
  }
  else
  {
    v5 = 0;
  }
  if ((v3 & 0xFF00) != 0)
  {
    if ((v3 & 0x100) != 0)
    {
      v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 18);
      if (v6 >= 0x80)
      {
        v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
        v3 = *((_DWORD *)this + 24);
      }
      else
      {
        v7 = 2;
      }
      v5 = (v7 + v5);
      if ((v3 & 0x200) == 0)
      {
LABEL_21:
        if ((v3 & 0x400) == 0)
          goto LABEL_22;
        goto LABEL_34;
      }
    }
    else if ((v3 & 0x200) == 0)
    {
      goto LABEL_21;
    }
    v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 19);
    if ((v8 & 0x80000000) != 0)
    {
      v9 = 11;
    }
    else if (v8 >= 0x80)
    {
      v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2) + 1;
      v3 = *((_DWORD *)this + 24);
    }
    else
    {
      v9 = 2;
    }
    v5 = (v9 + v5);
    if ((v3 & 0x400) == 0)
    {
LABEL_22:
      if ((v3 & 0x800) == 0)
        goto LABEL_41;
LABEL_35:
      v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 22);
      if ((v10 & 0x80000000) != 0)
      {
        v11 = 11;
      }
      else if (v10 >= 0x80)
      {
        v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2) + 1;
      }
      else
      {
        v11 = 2;
      }
      v5 = (v11 + v5);
      goto LABEL_41;
    }
LABEL_34:
    v5 = v5
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 10), a2)+ 1;
    if ((*((_DWORD *)this + 24) & 0x800) == 0)
      goto LABEL_41;
    goto LABEL_35;
  }
LABEL_41:
  *((_DWORD *)this + 23) = v5;
  return v5;
}

uint64_t proto::gnss::DecodedExtendedEphemeris::ByteSize(proto::gnss::DecodedExtendedEphemeris *this, unint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;

  LOBYTE(v3) = *((_BYTE *)this + 36);
  if ((_BYTE)v3)
  {
    if ((*((_BYTE *)this + 36) & 1) != 0)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 1), a2)+ 1;
      v3 = *((_DWORD *)this + 9);
    }
    else
    {
      v4 = 0;
    }
    if ((v3 & 2) != 0)
      v5 = v4 + 2;
    else
      v5 = v4;
    if ((v3 & 4) != 0)
    {
      v5 = v5
         + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 2), a2)+ 1;
      v3 = *((_DWORD *)this + 9);
    }
    if ((v3 & 8) != 0)
    {
      v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 7);
      if ((v6 & 0x80000000) != 0)
      {
        v7 = 11;
      }
      else if (v6 >= 0x80)
      {
        v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
      }
      else
      {
        v7 = 2;
      }
      v5 = (v7 + v5);
    }
  }
  else
  {
    v5 = 0;
  }
  *((_DWORD *)this + 8) = v5;
  return v5;
}

uint64_t proto::gnss::TimeTransferDataExtend::ByteSize(proto::gnss::TimeTransferDataExtend *this, unint64_t a2)
{
  int v3;
  uint64_t v4;
  proto::gnss::TimeTransferData *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  int v8;

  LOBYTE(v3) = *((_BYTE *)this + 52);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_17;
  }
  if ((*((_BYTE *)this + 52) & 1) == 0)
  {
    v4 = 0;
    if ((*((_BYTE *)this + 52) & 2) == 0)
      goto LABEL_13;
LABEL_12:
    v4 = v4
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 2), a2)+ 1;
    v3 = *((_DWORD *)this + 13);
    goto LABEL_13;
  }
  v5 = (proto::gnss::TimeTransferData *)*((_QWORD *)this + 1);
  if (!v5)
    v5 = *(proto::gnss::TimeTransferData **)(proto::gnss::TimeTransferDataExtend::default_instance_ + 8);
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::TimeTransferData::ByteSize(v5, a2);
  v7 = (int)v6;
  if (v6 >= 0x80)
    v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2);
  else
    v8 = 1;
  v4 = (v7 + v8 + 1);
  v3 = *((_DWORD *)this + 13);
  if ((v3 & 2) != 0)
    goto LABEL_12;
LABEL_13:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0)
      goto LABEL_15;
LABEL_19:
    v4 = v4
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 4), a2)+ 1;
    if ((*((_DWORD *)this + 13) & 0x10) == 0)
      goto LABEL_17;
    goto LABEL_16;
  }
  v4 = v4
     + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 3), a2)+ 1;
  v3 = *((_DWORD *)this + 13);
  if ((v3 & 8) != 0)
    goto LABEL_19;
LABEL_15:
  if ((v3 & 0x10) != 0)
LABEL_16:
    v4 = v4
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 5), a2)+ 1;
LABEL_17:
  *((_DWORD *)this + 12) = v4;
  return v4;
}

uint64_t proto::gnss::TimeTransferData::ByteSize(proto::gnss::TimeTransferData *this, unint64_t a2)
{
  int v3;
  uint64_t v4;
  proto::gnss::Time *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  int v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;

  v3 = *((_DWORD *)this + 12);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_27;
  }
  v4 = 2 * (v3 & 1u);
  if ((v3 & 2) != 0)
  {
    v5 = (proto::gnss::Time *)*((_QWORD *)this + 1);
    if (!v5)
      v5 = *(proto::gnss::Time **)(proto::gnss::TimeTransferData::default_instance_ + 8);
    v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Time::ByteSize(v5, a2);
    v7 = (int)v6;
    if (v6 >= 0x80)
      v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2);
    else
      v8 = 1;
    v4 = (v4 | 1) + v7 + v8;
    v3 = *((_DWORD *)this + 12);
    if ((v3 & 4) == 0)
    {
LABEL_4:
      if ((v3 & 8) == 0)
        goto LABEL_5;
LABEL_21:
      v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 10);
      if (v11 >= 0x80)
      {
        v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
        v3 = *((_DWORD *)this + 12);
      }
      else
      {
        v12 = 2;
      }
      v4 = (v12 + v4);
      if ((v3 & 0x10) == 0)
      {
LABEL_6:
        if ((v3 & 0x20) == 0)
          goto LABEL_27;
        goto LABEL_26;
      }
      goto LABEL_25;
    }
  }
  else if ((v3 & 4) == 0)
  {
    goto LABEL_4;
  }
  v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
  if ((v9 & 0x80000000) != 0)
  {
    v10 = 11;
  }
  else if (v9 >= 0x80)
  {
    v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2) + 1;
    v3 = *((_DWORD *)this + 12);
  }
  else
  {
    v10 = 2;
  }
  v4 = (v10 + v4);
  if ((v3 & 8) != 0)
    goto LABEL_21;
LABEL_5:
  if ((v3 & 0x10) == 0)
    goto LABEL_6;
LABEL_25:
  v4 = v4
     + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 3), a2)+ 1;
  if ((*((_DWORD *)this + 12) & 0x20) != 0)
LABEL_26:
    v4 = v4
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 4), a2)+ 1;
LABEL_27:
  *((_DWORD *)this + 11) = v4;
  return v4;
}

void proto::gnss::Fix::~Fix(proto::gnss::Fix *this)
{
  *(_QWORD *)this = off_1000F9508;
  sub_1000ACA50(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

{
  *(_QWORD *)this = off_1000F9508;
  sub_1000ACA50(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void proto::gnss::Time::~Time(proto::gnss::Time *this)
{
  *(_QWORD *)this = off_1000F9490;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

{
  *(_QWORD *)this = off_1000F9490;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void proto::gnss::PwrMeasurement::~PwrMeasurement(proto::gnss::PwrMeasurement *this)
{
  *(_QWORD *)this = off_1000F97D8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

{
  *(_QWORD *)this = off_1000F97D8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

unint64_t gpsd::util::getMachAbsoluteTimeNs(gpsd::util *this)
{
  unsigned __int8 v1;
  uint64_t v2;
  char v3;

  v1 = atomic_load((unsigned __int8 *)&qword_100100A50);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_100100A50))
  {
    sub_1000C5FEC();
    __cxa_guard_release(&qword_100100A50);
  }
  v2 = mach_absolute_time();
  v3 = 8;
  if (!byte_100100A88)
    v3 = 0;
  return ((v2 >> v3) * qword_100100A78 / qword_100100A80) << v3;
}

void sub_10001F33C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100100A50);
  _Unwind_Resume(a1);
}

BOOL gnss::Convert::toProtobuf(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  char v12;
  int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;

  if (a3)
  {
    v5 = *(_DWORD *)(a3 + 48) | 2;
    *(_DWORD *)(a3 + 48) = v5;
    v6 = *(_QWORD *)(a3 + 16);
    if (!v6)
      operator new();
    v7 = v5 | 4;
    *(_DWORD *)(a3 + 48) = v7;
    v8 = *(_QWORD *)(a3 + 24);
    if (!v8)
      operator new();
    *(_DWORD *)(a3 + 48) = v7 | 1;
    v9 = *(_QWORD *)(a3 + 8);
    if (!v9)
      operator new();
    *(_QWORD *)(v9 + 8) = *(_QWORD *)a1;
    *(_DWORD *)(v9 + 16) = *(_DWORD *)(a1 + 8);
    *(_QWORD *)(v9 + 24) = *(_QWORD *)(a1 + 24);
    *(_OWORD *)(v9 + 32) = *a2;
    v10 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v9 + 48) = *(_OWORD *)(a1 + 32);
    v11 = *(_DWORD *)(v9 + 72);
    v12 = *(_BYTE *)(a1 + 12);
    *(_DWORD *)(v9 + 72) = v11 | 7;
    *(_BYTE *)(v9 + 20) = v12;
    *(_DWORD *)(v9 + 64) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(v9 + 72) = v11 | 0x1FF;
    v13 = *(_DWORD *)(v6 + 96);
    *(_OWORD *)(v6 + 8) = v10;
    *(_OWORD *)(v6 + 24) = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(v6 + 40) = *(_OWORD *)(a1 + 80);
    *(_DWORD *)(v6 + 96) = v13 | 0xFF;
    *(_OWORD *)(v6 + 56) = *(_OWORD *)(a1 + 96);
    v14 = *(unsigned int *)(a1 + 116);
    v15 = *(_DWORD *)(a1 + 112) & 0x1F | (((*(_DWORD *)(a1 + 112) >> 5) & 1) << 6);
    *(_DWORD *)(v6 + 96) = v13 | 0x1FF;
    *(_DWORD *)(v6 + 72) = v15;
    if (((v14 - 25) > 0x32 || ((1 << (v14 - 25)) & 0x4000002000001) == 0)
      && (_DWORD)v14 != 10)
    {
      v14 = 1;
    }
    if (!proto::gnss::Reliability_IsValid((proto::gnss *)v14))
      __assert_rtn("set_reliability", "GnssTypes.pb.h", 1975, "::proto::gnss::Reliability_IsValid(value)");
    *(_DWORD *)(v6 + 76) = v14;
    *(_QWORD *)(v6 + 80) = *(_QWORD *)(a1 + 120);
    v16 = *(_DWORD *)(a1 + 128);
    if (v16 < 5)
      v17 = v16 + 1;
    else
      v17 = 0;
    *(_DWORD *)(v6 + 96) = v13 | 0xFFF;
    *(_DWORD *)(v6 + 88) = v17;
    v18 = *(_DWORD *)(v8 + 60);
    *(_OWORD *)(v8 + 8) = *(_OWORD *)(a1 + 136);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)(a1 + 152);
    *(_DWORD *)(v8 + 60) = v18 | 0x3F;
    *(_OWORD *)(v8 + 40) = *(_OWORD *)(a1 + 168);
    v19 = *(_DWORD *)(a3 + 48);
    *(_QWORD *)(a3 + 32) = *(_QWORD *)(a1 + 184);
    v20 = *(_DWORD *)(a1 + 192);
    if (v20 < 4)
      v21 = v20 + 1;
    else
      v21 = 0;
    *(_DWORD *)(a3 + 48) = v19 | 0x18;
    *(_DWORD *)(a3 + 40) = v21;
  }
  return a3 != 0;
}

BOOL gnss::Convert::toProtobuf(gnss::Convert *this, const gnss::MeasurementData *a2, CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *a3)
{
  const gnss::MeasurementData *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned __int16 *v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unsigned __int16 *v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unsigned __int16 *v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  int *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  int v72;
  int v73;
  _DWORD *v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  _OWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  unsigned int v105;
  int v106;
  unsigned int v107;
  int v108;
  unsigned int v109;
  BOOL v110;
  int v111;
  unsigned int v112;
  int v113;
  unsigned int v114;
  int v115;
  unsigned int v116;
  int v117;
  unsigned int v118;
  int v119;
  unsigned int v120;
  int v121;
  unsigned int v122;
  int v123;
  unsigned int v124;
  int v125;
  unsigned __int8 *v126;
  unsigned __int8 *i;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  unsigned int v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t *v136;
  uint64_t *j;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  int v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  int v155;
  double v156;
  uint64_t v157;
  float v158;
  float v159;
  uint64_t v160;
  float v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  int v165;
  char v166;
  int *v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  int v175;
  int v176;
  int v177;
  uint64_t v178;
  int v179;
  int v180;
  _DWORD *v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  uint64_t v193;
  char v194;
  int v195;
  char v196;
  char v197;
  char v198;
  uint64_t v199;
  char v200;
  int v201;
  char v202;
  char v203;
  char v204;
  char v205;
  uint64_t v206;
  char v207;
  int v208;
  char v209;
  char v210;
  char v211;
  uint64_t v212;
  char v213;
  int v214;
  char v215;
  char v216;
  char v217;
  uint64_t v218;
  int v219;
  char v220;
  int v221;
  char v222;
  char v223;
  char v224;
  char v225;
  char v226;
  char v227;
  char v228;
  char v229;
  char v230;
  char v231;
  char v232;
  char v233;
  char v234;
  char v235;
  char v236;
  char v237;
  char v238;
  char v239;
  int v240;
  unsigned int v241;
  float v242;
  uint64_t v243;
  uint64_t v244;
  double v245;
  uint64_t v246;
  uint64_t v247;
  double v248;
  uint64_t v249;
  uint64_t v250;
  double v251;
  uint64_t v252;
  int v253;
  char v254;
  unint64_t v255;
  unint64_t v256;
  uint64_t v257;
  double v258;
  uint64_t v259;
  int v260;
  char v261;
  uint64_t v262;
  int32x2_t *v263;
  __int32 v264;
  __int32 v265;
  int32x2_t v266;
  int v267;
  unsigned int v268;
  __int32 v269;
  __int32 v270;
  uint32x2_t v271;
  int8x8_t v272;
  _DWORD *v273;
  _DWORD *v274;
  _DWORD *v275;
  uint64_t v276;
  __int32 v277;
  __int32 v278;
  __int32 v279;
  uint64_t v280;
  const std::string::value_type *v281;
  std::string *v282;
  float *v283;
  uint64_t *k;
  int v285;
  uint64_t v286;
  int32x2_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  double v291;
  uint64_t v292;
  int v293;
  gnss::Convert *v295;
  int *v297;
  int *v298;

  if (!a2)
    return a2 != 0;
  v4 = a2;
  *((_DWORD *)a2 + 33) |= 1u;
  v5 = *((_QWORD *)a2 + 1);
  if (!v5)
    operator new();
  v6 = *(_DWORD *)(v5 + 36);
  *(_OWORD *)(v5 + 8) = *(_OWORD *)this;
  v7 = *((_QWORD *)this + 2);
  *(_DWORD *)(v5 + 36) = v6 | 7;
  *(_QWORD *)(v5 + 24) = v7;
  v8 = *((_DWORD *)a2 + 33);
  *((_OWORD *)a2 + 5) = *(_OWORD *)((char *)this + 24);
  *((_DWORD *)a2 + 33) = v8 | 0x70;
  v9 = *((_QWORD *)a2 + 9);
  if (!v9)
    operator new();
  v10 = (unsigned __int16 *)*((_QWORD *)this + 28);
  if (v10 && sub_100021E68(*((_QWORD *)this + 28)))
  {
    *(_DWORD *)(v9 + 52) |= 1u;
    v11 = *(_QWORD *)(v9 + 8);
    if (!v11)
      operator new();
    v12 = *v10;
    v13 = *(_DWORD *)(v11 + 32);
    *(_DWORD *)(v11 + 32) = v13 | 1;
    *(_DWORD *)(v11 + 24) = v12;
    if (!sub_100021E68((uint64_t)v10))
      goto LABEL_26;
    v14 = v10[4];
    if (v14 == 0x8000)
      goto LABEL_26;
    v15 = *((unsigned __int8 *)v10 + 10);
    if (*((_QWORD *)v10 + 2))
    {
      if ((v15 != 2) == ((__int16)v10[12] != -32768))
        goto LABEL_26;
    }
    else if (v15 == 2)
    {
LABEL_26:
      v24 = *((_QWORD *)this + 28);
      if (sub_100021E68(v24)
        && *(_QWORD *)(v24 + 32)
        && (*(_QWORD *)(v24 + 40) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (*(_QWORD *)(v24 + 48) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (*(_QWORD *)(v24 + 56) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        *(_DWORD *)(v11 + 32) |= 4u;
        v25 = *(_QWORD *)(v11 + 16);
        if (!v25)
          operator new();
        v26 = *(_DWORD *)(v25 + 44);
        *(_QWORD *)(v25 + 8) = *(_QWORD *)(v24 + 32);
        *(_OWORD *)(v25 + 16) = *(_OWORD *)(v24 + 40);
        v27 = *(_QWORD *)(v24 + 56);
        *(_DWORD *)(v25 + 44) = v26 | 0xF;
        *(_QWORD *)(v25 + 32) = v27;
      }
      goto LABEL_34;
    }
    *(_DWORD *)(v11 + 32) = v13 | 3;
    v16 = *(_QWORD *)(v11 + 8);
    if (!v16)
      operator new();
    v17 = *(_DWORD *)(v16 + 28);
    v18 = v17 | 1;
    *(_DWORD *)(v16 + 28) = v17 | 1;
    *(_DWORD *)(v16 + 8) = (__int16)v14;
    v19 = *((_QWORD *)v10 + 2);
    if (v19)
    {
      if (*((_BYTE *)v10 + 10) == 2)
      {
        v20 = v10[12];
        if (v20 != 0x8000)
        {
          *(_DWORD *)(v16 + 28) = v17 | 5;
          v21 = *(_QWORD *)(v16 + 16);
          if (!v21)
            operator new();
          v22 = *(_DWORD *)(v21 + 24);
          *(_QWORD *)(v21 + 8) = v19;
          *(_DWORD *)(v21 + 24) = v22 | 3;
          *(_DWORD *)(v21 + 16) = (__int16)v20;
          v18 = *(_DWORD *)(v16 + 28);
        }
      }
    }
    *(_DWORD *)(v16 + 28) = v18 | 2;
    *(_DWORD *)(v16 + 12) = 1;
    v23 = *((unsigned __int8 *)v10 + 10);
    if (v23 <= 2)
      *(_DWORD *)(v16 + 12) = v23 + 2;
    goto LABEL_26;
  }
LABEL_34:
  v28 = (unsigned __int16 *)*((_QWORD *)this + 29);
  if (v28)
  {
    if ((v29 = *v28) != 0 && v28[1] - 1 < 0x5B5
      || *((_QWORD *)v28 + 1) && (*((_QWORD *)v28 + 2) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      *(_DWORD *)(v9 + 52) |= 2u;
      v30 = *(_QWORD *)(v9 + 16);
      if (!v30)
        operator new();
      v31 = *(_DWORD *)(v30 + 40);
      v32 = v28[1];
      *(_DWORD *)(v30 + 40) = v31 | 3;
      *(_DWORD *)(v30 + 8) = v29;
      *(_DWORD *)(v30 + 12) = v32;
      v33 = *((_QWORD *)v28 + 1);
      if (v29 && (v32 - 1) < 0x5B5)
      {
        if (!v33 || (*((_QWORD *)v28 + 2) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          goto LABEL_51;
      }
      else if (!v33 || (*((_QWORD *)v28 + 2) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        goto LABEL_51;
      }
      *(_DWORD *)(v30 + 40) = v31 | 0xB;
      v34 = *(_QWORD *)(v30 + 16);
      if (!v34)
        operator new();
      v35 = *(_DWORD *)(v34 + 28);
      *(_QWORD *)(v34 + 16) = *((_QWORD *)v28 + 2);
      v36 = *((_QWORD *)v28 + 1);
      *(_DWORD *)(v34 + 28) = v35 | 3;
      *(_QWORD *)(v34 + 8) = v36;
    }
  }
LABEL_51:
  v37 = (unsigned __int16 *)*((_QWORD *)this + 30);
  if (v37)
  {
    v38 = *v37;
    if (*v37
      || *((_QWORD *)v37 + 1)
      && (*((_QWORD *)v37 + 2) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*((_QWORD *)v37 + 3) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      *(_DWORD *)(v9 + 52) |= 4u;
      v39 = *(_QWORD *)(v9 + 24);
      if (!v39)
        operator new();
      v40 = *(_DWORD *)(v39 + 56);
      *(_DWORD *)(v39 + 56) = v40 | 1;
      *(_DWORD *)(v39 + 48) = v38;
      v41 = *((_QWORD *)v37 + 1);
      if (v38)
      {
        if (!v41)
          goto LABEL_70;
        v42 = *((_QWORD *)v37 + 2);
      }
      else
      {
        if (!v41)
          goto LABEL_70;
        v42 = *((_QWORD *)v37 + 2);
        if ((v42 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*((_QWORD *)v37 + 3) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        {
          goto LABEL_70;
        }
      }
      if ((v42 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (*((_QWORD *)v37 + 3) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        *(_DWORD *)(v39 + 56) = v40 | 5;
        v43 = *(_QWORD *)(v39 + 16);
        if (!v43)
          operator new();
        v44 = *(_DWORD *)(v43 + 36);
        *(_QWORD *)(v43 + 8) = *((_QWORD *)v37 + 1);
        *(_DWORD *)(v43 + 36) = v44 | 7;
        *(_OWORD *)(v43 + 16) = *((_OWORD *)v37 + 1);
      }
    }
  }
LABEL_70:
  v45 = (unsigned __int16 *)*((_QWORD *)this + 31);
  if (v45)
  {
    v46 = *v45;
    if (*v45
      || *((_QWORD *)v45 + 1)
      && (*((_QWORD *)v45 + 2) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*((_QWORD *)v45 + 3) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      *(_DWORD *)(v9 + 52) |= 8u;
      v47 = *(_QWORD *)(v9 + 32);
      if (!v47)
        operator new();
      v48 = *(_DWORD *)(v47 + 40);
      *(_DWORD *)(v47 + 40) = v48 | 1;
      *(_DWORD *)(v47 + 32) = v46;
      v49 = *((_QWORD *)v45 + 1);
      if (v46)
      {
        if (!v49)
          goto LABEL_89;
        v50 = *((_QWORD *)v45 + 2);
      }
      else
      {
        if (!v49)
          goto LABEL_89;
        v50 = *((_QWORD *)v45 + 2);
        if ((v50 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*((_QWORD *)v45 + 3) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        {
          goto LABEL_89;
        }
      }
      if ((v50 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (*((_QWORD *)v45 + 3) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        *(_DWORD *)(v47 + 40) = v48 | 5;
        v51 = *(_QWORD *)(v47 + 16);
        if (!v51)
          operator new();
        v52 = *(_DWORD *)(v51 + 36);
        *(_QWORD *)(v51 + 8) = *((_QWORD *)v45 + 1);
        *(_DWORD *)(v51 + 36) = v52 | 7;
        *(_OWORD *)(v51 + 16) = *((_OWORD *)v45 + 1);
      }
    }
  }
LABEL_89:
  v53 = (_QWORD *)*((_QWORD *)this + 32);
  if (v53)
  {
    if (v53[1])
    {
      v54 = v53[2];
      if ((v54 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (v53[3] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        *(_DWORD *)(v9 + 52) |= 0x10u;
        v55 = *(_QWORD *)(v9 + 40);
        if (!v55)
          operator new();
        v56 = *(unsigned __int16 *)v53;
        v57 = *(_DWORD *)(v55 + 24);
        *(_DWORD *)(v55 + 24) = v57 | 2;
        *(_DWORD *)(v55 + 16) = v56;
        if ((v54 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && (v53[3] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        {
          *(_DWORD *)(v55 + 24) = v57 | 3;
          v58 = *(_QWORD *)(v55 + 8);
          if (!v58)
            operator new();
          v59 = *(_DWORD *)(v58 + 36);
          *(_QWORD *)(v58 + 8) = v53[1];
          *(_DWORD *)(v58 + 36) = v59 | 7;
          *(_OWORD *)(v58 + 16) = *((_OWORD *)v53 + 1);
        }
      }
    }
  }
  v60 = (int *)*((_QWORD *)this + 22);
  v295 = this;
  v297 = (int *)*((_QWORD *)this + 23);
  if (v60 != v297)
  {
    while (1)
    {
      v61 = *((_DWORD *)v4 + 9);
      v62 = *((int *)v4 + 8);
      if ((int)v62 >= v61)
      {
        if (v61 == *((_DWORD *)v4 + 10))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((const gnss::MeasurementData *)((char *)a2 + 24), v61 + 1);
          v61 = *((_DWORD *)v4 + 9);
        }
        *((_DWORD *)v4 + 9) = v61 + 1;
        operator new();
      }
      v63 = *((_QWORD *)v4 + 3);
      *((_DWORD *)v4 + 8) = v62 + 1;
      v64 = *(_QWORD *)(v63 + 8 * v62);
      *(_DWORD *)(v64 + 172) |= 1u;
      v65 = *(_QWORD *)(v64 + 8);
      if (!v65)
        operator new();
      v66 = *(_DWORD *)(v65 + 24) | 2;
      *(_DWORD *)(v65 + 24) = v66;
      v67 = *(_QWORD *)(v65 + 8);
      if (!v67)
        operator new();
      v68 = *v60;
      *(_DWORD *)(v65 + 24) = v66 | 1;
      *(_DWORD *)(v65 + 16) = v68;
      switch(v68)
      {
        case 0:
          *(_DWORD *)(v65 + 16) = 0;
          goto LABEL_132;
        case 1:
          *(_DWORD *)(v65 + 16) = 1;
          v70 = *((unsigned __int8 *)v60 + 4);
          *(_DWORD *)(v67 + 44) |= 1u;
          *(_DWORD *)(v67 + 16) = v70;
          goto LABEL_132;
        case 2:
          *(_DWORD *)(v65 + 16) = 2;
          *(_DWORD *)(v67 + 44) |= 2u;
          v71 = *(_QWORD *)(v67 + 8);
          if (!v71)
            operator new();
          v72 = *((char *)v60 + 6);
          v73 = *(_DWORD *)(v71 + 24);
          *(_DWORD *)(v71 + 24) = v73 | 1;
          *(_DWORD *)(v71 + 16) = v72;
          if (*((unsigned __int8 *)v60 + 4) - 1 > 0x17)
            goto LABEL_132;
          *(_DWORD *)(v71 + 24) = v73 | 3;
          v74 = *(_DWORD **)(v71 + 8);
          if (!v74)
            operator new();
          v75 = *((unsigned __int8 *)v60 + 4);
          v74[5] |= 3u;
          v74[2] = v75;
          v74[3] = 1;
          v76 = *((unsigned __int8 *)v60 + 5);
          switch(v76)
          {
            case 3:
              v77 = 4;
              goto LABEL_131;
            case 2:
              v77 = 3;
              goto LABEL_131;
            case 1:
              v77 = 2;
LABEL_131:
              v74[3] = v77;
              break;
          }
LABEL_132:
          if ((*((_BYTE *)v60 + 16) - 1) > 3u)
            v81 = 1;
          else
            v81 = dword_1000D3520[(char)(*((_BYTE *)v60 + 16) - 1)];
          v82 = *(_DWORD *)(v64 + 172) | 4;
          *(_DWORD *)(v64 + 172) = v82;
          *(_DWORD *)(v64 + 56) = v81;
          v83 = *((_QWORD *)v60 + 3);
          v84 = *((_QWORD *)v60 + 4);
          if (v83 != v84)
          {
            do
            {
              v85 = *(_DWORD *)(v64 + 36);
              v86 = *(int *)(v64 + 32);
              if ((int)v86 >= v85)
              {
                if (v85 == *(_DWORD *)(v64 + 40))
                {
                  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v64 + 24), v85 + 1);
                  v85 = *(_DWORD *)(v64 + 36);
                }
                *(_DWORD *)(v64 + 36) = v85 + 1;
                operator new();
              }
              v87 = *(_QWORD *)(v64 + 24);
              *(_DWORD *)(v64 + 32) = v86 + 1;
              v88 = *(_QWORD *)(v87 + 8 * v86);
              v89 = *(_DWORD *)(v88 + 28);
              *(_QWORD *)(v88 + 8) = *(_QWORD *)v83;
              *(_DWORD *)(v88 + 28) = v89 | 3;
              v90 = *(_QWORD *)(v88 + 16);
              if (!v90)
                operator new();
              v91 = *(_DWORD *)(v90 + 36);
              *(_OWORD *)(v90 + 8) = *(_OWORD *)(v83 + 8);
              v92 = *(_QWORD *)(v83 + 24);
              *(_DWORD *)(v90 + 36) = v91 | 7;
              *(_QWORD *)(v90 + 24) = v92;
              v83 += 32;
            }
            while (v83 != v84);
            v82 = *(_DWORD *)(v64 + 172);
          }
          v93 = (_OWORD *)*((_QWORD *)v60 + 6);
          if (v93)
          {
            *(_DWORD *)(v64 + 172) = v82 | 0x8000;
            v94 = *(_QWORD *)(v64 + 128);
            if (!v94)
              operator new();
            v95 = 0;
            *(_DWORD *)(v94 + 76) |= 3u;
            *(_OWORD *)(v94 + 8) = *v93;
            do
            {
              v96 = *((_QWORD *)v60 + 6);
              v97 = *(_QWORD *)(v96 + v95 + 16);
              v98 = *(_DWORD *)(v94 + 32);
              if (v98 == *(_DWORD *)(v94 + 36))
              {
                sub_100041850(v94 + 24, v98 + 1);
                v98 = *(_DWORD *)(v94 + 32);
                v96 = *((_QWORD *)v60 + 6);
              }
              *(_QWORD *)(*(_QWORD *)(v94 + 24) + 8 * v98) = v97;
              *(_DWORD *)(v94 + 32) = v98 + 1;
              v99 = *(_QWORD *)(v96 + v95 + 48);
              v100 = *(_DWORD *)(v94 + 48);
              if (v100 == *(_DWORD *)(v94 + 52))
              {
                sub_100041850(v94 + 40, v100 + 1);
                v100 = *(_DWORD *)(v94 + 48);
                v96 = *((_QWORD *)v60 + 6);
              }
              *(_QWORD *)(*(_QWORD *)(v94 + 40) + 8 * v100) = v99;
              *(_DWORD *)(v94 + 48) = v100 + 1;
              v101 = *(_QWORD *)(v96 + v95 + 80);
              v102 = *(_DWORD *)(v94 + 64);
              if (v102 == *(_DWORD *)(v94 + 68))
              {
                sub_100041850(v94 + 56, v102 + 1);
                v102 = *(_DWORD *)(v94 + 64);
              }
              v103 = *(_QWORD *)(v94 + 56);
              *(_DWORD *)(v94 + 64) = v102 + 1;
              *(_QWORD *)(v103 + 8 * v102) = v101;
              v95 += 8;
            }
            while (v95 != 32);
            v82 = *(_DWORD *)(v64 + 172);
            v4 = a2;
          }
          *(_QWORD *)(v64 + 16) = *((_QWORD *)v60 + 1);
          *(_QWORD *)(v64 + 48) = *((_QWORD *)v60 + 7);
          *(_OWORD *)(v64 + 64) = *((_OWORD *)v60 + 4);
          *(_QWORD *)(v64 + 152) = *((_QWORD *)v60 + 10);
          v104 = v60[23];
          *(_DWORD *)(v64 + 60) = v60[22];
          *(_DWORD *)(v64 + 80) = v104;
          v105 = *((unsigned __int8 *)v60 + 96);
          if (v105 >= 3)
            v106 = 1;
          else
            v106 = v105 + 2;
          *(_DWORD *)(v64 + 172) = v82 | 0x2003F2;
          v107 = *((unsigned __int8 *)v60 + 97);
          if (v107 >= 3)
            v108 = 1;
          else
            v108 = v107 + 2;
          v109 = *((unsigned __int8 *)v60 + 98);
          v110 = v109 >= 3;
          v111 = v109 + 2;
          if (v110)
            v111 = 1;
          *(_DWORD *)(v64 + 84) = v106;
          *(_DWORD *)(v64 + 88) = v111;
          v112 = *((unsigned __int8 *)v60 + 99);
          if (v112 >= 3)
            v113 = 1;
          else
            v113 = v112 + 2;
          *(_DWORD *)(v64 + 136) = v108;
          *(_DWORD *)(v64 + 140) = v113;
          v114 = *((unsigned __int8 *)v60 + 100);
          if (v114 >= 3)
            v115 = 1;
          else
            v115 = v114 + 2;
          v116 = *((unsigned __int8 *)v60 + 101);
          if (v116 >= 3)
            v117 = 1;
          else
            v117 = v116 + 2;
          v118 = *((unsigned __int8 *)v60 + 102);
          v110 = v118 >= 3;
          v119 = v118 + 2;
          if (v110)
            v119 = 1;
          *(_DWORD *)(v64 + 92) = v115;
          *(_DWORD *)(v64 + 96) = v119;
          v120 = *((unsigned __int8 *)v60 + 103);
          v110 = v120 >= 3;
          v121 = v120 + 2;
          if (v110)
            v121 = 1;
          *(_DWORD *)(v64 + 144) = v117;
          *(_DWORD *)(v64 + 148) = v121;
          v122 = *((unsigned __int8 *)v60 + 104);
          if (v122 >= 3)
            v123 = 1;
          else
            v123 = v122 + 2;
          *(_DWORD *)(v64 + 100) = v123;
          v124 = *((unsigned __int8 *)v60 + 105);
          if (v124 >= 3)
            v125 = 1;
          else
            v125 = v124 + 2;
          *(_DWORD *)(v64 + 172) = v82 | 0x3F3FF2;
          *(_DWORD *)(v64 + 160) = v125;
          v126 = (unsigned __int8 *)*((_QWORD *)v60 + 14);
          for (i = (unsigned __int8 *)*((_QWORD *)v60 + 15); v126 != i; v126 += 32)
          {
            v128 = *(_DWORD *)(v64 + 116);
            v129 = *(int *)(v64 + 112);
            if ((int)v129 >= v128)
            {
              if (v128 == *(_DWORD *)(v64 + 120))
              {
                wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v64 + 104), v128 + 1);
                v128 = *(_DWORD *)(v64 + 116);
              }
              *(_DWORD *)(v64 + 116) = v128 + 1;
              operator new();
            }
            v130 = *(_QWORD *)(v64 + 104);
            *(_DWORD *)(v64 + 112) = v129 + 1;
            v131 = *(_QWORD *)(v130 + 8 * v129);
            v132 = *(_DWORD *)(v131 + 44);
            *(_DWORD *)(v131 + 24) = 1;
            v133 = *v126 - 1;
            if (v133 <= 9)
              *(_DWORD *)(v131 + 24) = dword_1000D33AC[(char)v133];
            *(_OWORD *)(v131 + 8) = *(_OWORD *)(v126 + 8);
            v134 = *((_QWORD *)v126 + 3);
            *(_DWORD *)(v131 + 44) = v132 | 0xF;
            *(_QWORD *)(v131 + 32) = v134;
            v135 = *((_DWORD *)v126 + 1);
            if (v135 <= 2)
            {
              *(_DWORD *)(v131 + 44) = v132 | 0x1F;
              *(_DWORD *)(v131 + 28) = v135;
            }
          }
          v60 += 34;
          if (v60 == v297)
            goto LABEL_199;
          break;
        case 3:
        case 5:
        case 6:
        case 7:
          goto LABEL_132;
        case 4:
          *(_DWORD *)(v65 + 16) = 4;
          v78 = *((unsigned __int8 *)v60 + 4);
          *(_DWORD *)(v67 + 44) |= 4u;
          *(_DWORD *)(v67 + 20) = v78;
          goto LABEL_132;
        case 8:
          *(_DWORD *)(v65 + 16) = 8;
          v79 = *((unsigned __int8 *)v60 + 4);
          *(_DWORD *)(v67 + 44) |= 8u;
          *(_DWORD *)(v67 + 24) = v79;
          goto LABEL_132;
        default:
          if (v68 == 16)
          {
            *(_DWORD *)(v65 + 16) = 16;
            v80 = *((unsigned __int8 *)v60 + 4);
            *(_DWORD *)(v67 + 44) |= 0x10u;
            *(_DWORD *)(v67 + 28) = v80;
          }
          else if (v68 == 32)
          {
            *(_DWORD *)(v65 + 16) = 64;
            v69 = *((unsigned __int8 *)v60 + 4);
            *(_DWORD *)(v67 + 44) |= 0x40u;
            *(_DWORD *)(v67 + 36) = v69;
          }
          goto LABEL_132;
      }
    }
  }
LABEL_199:
  v136 = (uint64_t *)*((_QWORD *)this + 25);
  for (j = (uint64_t *)*((_QWORD *)this + 26); v136 != j; *(_QWORD *)(v141 + 20) = v146)
  {
    v138 = *((_DWORD *)v4 + 15);
    v139 = *((int *)v4 + 14);
    if ((int)v139 >= v138)
    {
      if (v138 == *((_DWORD *)v4 + 16))
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((const gnss::MeasurementData *)((char *)v4 + 48), v138 + 1);
        v138 = *((_DWORD *)v4 + 15);
      }
      *((_DWORD *)v4 + 15) = v138 + 1;
      operator new();
    }
    v140 = *((_QWORD *)v4 + 6);
    *((_DWORD *)v4 + 14) = v139 + 1;
    v141 = *(_QWORD *)(v140 + 8 * v139);
    v142 = *((unsigned __int8 *)v136 + 16) - 1;
    if (v142 > 9)
      v143 = 1;
    else
      v143 = dword_1000D33AC[(char)v142];
    v144 = *(_DWORD *)(v141 + 32);
    *(_DWORD *)(v141 + 16) = v143;
    v145 = *v136;
    v146 = v136[1];
    v136 += 3;
    *(_QWORD *)(v141 + 8) = v145;
    *(_DWORD *)(v141 + 32) = v144 | 0xF;
  }
  v147 = *((_QWORD *)v295 + 33);
  v148 = *((_DWORD *)v4 + 33);
  if (v147)
  {
    *((_DWORD *)v4 + 33) = v148 | 0x80;
    v149 = *((_QWORD *)v4 + 12);
    if (!v149)
      operator new();
    v150 = *(_DWORD *)(v149 + 52);
    *(_QWORD *)(v149 + 8) = *(_QWORD *)v147;
    *(_OWORD *)(v149 + 16) = *(_OWORD *)(v147 + 8);
    *(_DWORD *)(v149 + 52) = v150 | 0x1FF;
    *(_OWORD *)(v149 + 32) = *(_OWORD *)(v147 + 24);
    v148 = *((_DWORD *)v4 + 33);
  }
  *((_DWORD *)v4 + 33) = v148 | 2;
  v151 = *((_QWORD *)v4 + 2);
  if (!v151)
    operator new();
  v152 = *(_QWORD *)(v151 + 8);
  *(_DWORD *)(v151 + 44) |= 1u;
  if (!v152)
    operator new();
  v153 = *(_DWORD *)(v152 + 44);
  *(_QWORD *)(v152 + 8) = *((_QWORD *)v295 + 5);
  *(_DWORD *)(v152 + 44) = v153 | 5;
  v154 = *(_QWORD *)(v152 + 24);
  if (!v154)
    operator new();
  v155 = *(_DWORD *)(v154 + 52);
  *(_OWORD *)(v154 + 8) = *(_OWORD *)((char *)v295 + 88);
  *(float64x2_t *)(v154 + 24) = vcvtq_f64_f32(*(float32x2_t *)((char *)v295 + 104));
  v156 = *((float *)v295 + 28);
  *(_DWORD *)(v154 + 52) = v155 | 0x1F;
  *(double *)(v154 + 40) = v156;
  if (*((_QWORD *)v295 + 5) != -1)
  {
    v157 = *((_QWORD *)v295 + 15);
    if (v157 != 0x8000000000000000)
    {
      v158 = *((float *)v295 + 32);
      if (v158 >= -0.5 && v158 <= 0.5)
      {
        v159 = *((float *)v295 + 33);
        if (v159 > 0.0)
        {
          v160 = *((_QWORD *)v295 + 17);
          if ((v160 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
          {
            v161 = *((float *)v295 + 36);
            if (v161 > 0.5)
            {
              *(_DWORD *)(v152 + 44) |= 8u;
              v162 = *(_QWORD *)(v152 + 32);
              if (!v162)
                operator new();
              v163 = *(_DWORD *)(v162 + 40);
              *(_QWORD *)(v162 + 8) = v157;
              *(float *)(v162 + 16) = v158;
              *(float *)(v162 + 20) = v159;
              *(_QWORD *)(v162 + 24) = v160;
              *(_DWORD *)(v162 + 40) = v163 | 0x1F;
              *(float *)(v162 + 32) = v161;
            }
          }
        }
      }
    }
  }
  *(_DWORD *)(v152 + 44) |= 2u;
  v164 = *(_QWORD *)(v152 + 16);
  if (!v164)
    operator new();
  v165 = *(_DWORD *)(v164 + 32);
  *(_DWORD *)(v164 + 32) = v165 | 0xF;
  *(float32x4_t *)(v164 + 8) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*((float64x2_t *)v295 + 3)), *((float64x2_t *)v295 + 4));
  if (*((_BYTE *)v295 + 81))
  {
    v166 = *((_BYTE *)v295 + 80);
    *(_DWORD *)(v164 + 32) = v165 | 0x1F;
    *(_BYTE *)(v164 + 24) = v166;
  }
  v167 = (int *)*((_QWORD *)v295 + 19);
  v298 = (int *)*((_QWORD *)v295 + 20);
  if (v167 != v298)
  {
    while (1)
    {
      v168 = *(_DWORD *)(v151 + 28);
      v169 = *(int *)(v151 + 24);
      if ((int)v169 >= v168)
      {
        if (v168 == *(_DWORD *)(v151 + 32))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v151 + 16), v168 + 1);
          v168 = *(_DWORD *)(v151 + 28);
        }
        *(_DWORD *)(v151 + 28) = v168 + 1;
        operator new();
      }
      v170 = *(_QWORD *)(v151 + 16);
      *(_DWORD *)(v151 + 24) = v169 + 1;
      v171 = *(_QWORD *)(v170 + 8 * v169);
      *(_DWORD *)(v171 + 112) |= 1u;
      v172 = *(_QWORD *)(v171 + 8);
      if (!v172)
        operator new();
      v173 = *(_DWORD *)(v172 + 24) | 2;
      *(_DWORD *)(v172 + 24) = v173;
      v174 = *(_QWORD *)(v172 + 8);
      if (!v174)
        operator new();
      v175 = *v167;
      *(_DWORD *)(v172 + 24) = v173 | 1;
      *(_DWORD *)(v172 + 16) = v175;
      switch(v175)
      {
        case 0:
          *(_DWORD *)(v172 + 16) = 0;
          goto LABEL_265;
        case 1:
          *(_DWORD *)(v172 + 16) = 1;
          v177 = *((unsigned __int8 *)v167 + 4);
          *(_DWORD *)(v174 + 44) |= 1u;
          *(_DWORD *)(v174 + 16) = v177;
          goto LABEL_265;
        case 2:
          *(_DWORD *)(v172 + 16) = 2;
          *(_DWORD *)(v174 + 44) |= 2u;
          v178 = *(_QWORD *)(v174 + 8);
          if (!v178)
            operator new();
          v179 = *((char *)v167 + 6);
          v180 = *(_DWORD *)(v178 + 24);
          *(_DWORD *)(v178 + 24) = v180 | 1;
          *(_DWORD *)(v178 + 16) = v179;
          if (*((unsigned __int8 *)v167 + 4) - 1 > 0x17)
            goto LABEL_265;
          *(_DWORD *)(v178 + 24) = v180 | 3;
          v181 = *(_DWORD **)(v178 + 8);
          if (!v181)
            operator new();
          v182 = *((unsigned __int8 *)v167 + 4);
          v181[5] |= 3u;
          v181[2] = v182;
          v181[3] = 1;
          v183 = *((unsigned __int8 *)v167 + 5);
          switch(v183)
          {
            case 3:
              v184 = 4;
              goto LABEL_264;
            case 2:
              v184 = 3;
              goto LABEL_264;
            case 1:
              v184 = 2;
LABEL_264:
              v181[3] = v184;
              break;
          }
LABEL_265:
          *(_DWORD *)(v171 + 112) |= 2u;
          v188 = *(_QWORD *)(v171 + 16);
          if (!v188)
            operator new();
          v189 = *(_DWORD *)(v188 + 96);
          *(_DWORD *)(v188 + 96) = v189 | 1;
          *(_DWORD *)(v188 + 88) = 1;
          switch(*((_BYTE *)v167 + 8))
          {
            case 1:
              *(_DWORD *)(v188 + 88) = 2;
              *(_DWORD *)(v188 + 96) = v189 | 3;
              v190 = *(_QWORD *)(v188 + 8);
              if (!v190)
                operator new();
              goto LABEL_293;
            case 2:
              *(_DWORD *)(v188 + 88) = 3;
              *(_DWORD *)(v188 + 96) = v189 | 5;
              v191 = *(_QWORD *)(v188 + 16);
              if (!v191)
                operator new();
              v192 = *(_DWORD *)(v191 + 20);
              v225 = *((_BYTE *)v167 + 13);
              *(_DWORD *)(v191 + 20) = v192 | 0x10;
              *(_BYTE *)(v191 + 12) = v225;
              v226 = *((_BYTE *)v167 + 11);
              *(_DWORD *)(v191 + 20) = v192 | 0x14;
              *(_BYTE *)(v191 + 10) = v226;
              v227 = *((_BYTE *)v167 + 12);
              *(_DWORD *)(v191 + 20) = v192 | 0x1C;
              *(_BYTE *)(v191 + 11) = v227;
              v228 = *((_BYTE *)v167 + 10);
              *(_DWORD *)(v191 + 20) = v192 | 0x1E;
              *(_BYTE *)(v191 + 9) = v228;
              v229 = *((_BYTE *)v167 + 9);
              *(_DWORD *)(v191 + 20) = v192 | 0x1F;
              *(_BYTE *)(v191 + 8) = v229;
              break;
            case 3:
              *(_DWORD *)(v188 + 88) = 4;
              *(_DWORD *)(v188 + 96) = v189 | 9;
              v193 = *(_QWORD *)(v188 + 24);
              if (!v193)
                operator new();
              v194 = *((_BYTE *)v167 + 11);
              v195 = *(_DWORD *)(v193 + 16);
              *(_DWORD *)(v193 + 16) = v195 | 4;
              *(_BYTE *)(v193 + 10) = v194;
              v196 = *((_BYTE *)v167 + 11);
              *(_DWORD *)(v193 + 16) = v195 | 6;
              *(_BYTE *)(v193 + 9) = v196;
              v197 = *((_BYTE *)v167 + 12);
              *(_DWORD *)(v193 + 16) = v195 | 0xE;
              *(_BYTE *)(v193 + 11) = v197;
              v198 = *((_BYTE *)v167 + 9);
              *(_DWORD *)(v193 + 16) = v195 | 0xF;
              *(_BYTE *)(v193 + 8) = v198;
              break;
            case 4:
              *(_DWORD *)(v188 + 88) = 5;
              *(_DWORD *)(v188 + 96) = v189 | 0x11;
              v199 = *(_QWORD *)(v188 + 32);
              if (!v199)
                operator new();
              v200 = *((_BYTE *)v167 + 9);
              v201 = *(_DWORD *)(v199 + 20);
              *(_DWORD *)(v199 + 20) = v201 | 1;
              *(_BYTE *)(v199 + 8) = v200;
              v202 = *((_BYTE *)v167 + 11);
              *(_DWORD *)(v199 + 20) = v201 | 5;
              *(_BYTE *)(v199 + 10) = v202;
              v203 = *((_BYTE *)v167 + 12);
              *(_DWORD *)(v199 + 20) = v201 | 0xD;
              *(_BYTE *)(v199 + 11) = v203;
              v204 = *((_BYTE *)v167 + 10);
              *(_DWORD *)(v199 + 20) = v201 | 0xF;
              *(_BYTE *)(v199 + 9) = v204;
              v205 = *((_BYTE *)v167 + 13);
              *(_DWORD *)(v199 + 20) = v201 | 0x1F;
              *(_BYTE *)(v199 + 12) = v205;
              break;
            case 5:
              *(_DWORD *)(v188 + 88) = 6;
              *(_DWORD *)(v188 + 96) = v189 | 0x21;
              v206 = *(_QWORD *)(v188 + 40);
              if (!v206)
                operator new();
              goto LABEL_285;
            case 6:
              *(_DWORD *)(v188 + 88) = 11;
              *(_DWORD *)(v188 + 96) = v189 | 0x21;
              v206 = *(_QWORD *)(v188 + 40);
              if (!v206)
                operator new();
              goto LABEL_285;
            case 7:
              *(_DWORD *)(v188 + 88) = 7;
              *(_DWORD *)(v188 + 96) = v189 | 0x41;
              v206 = *(_QWORD *)(v188 + 48);
              if (!v206)
                operator new();
LABEL_285:
              v207 = *((_BYTE *)v167 + 10);
              v208 = *(_DWORD *)(v206 + 16);
              *(_DWORD *)(v206 + 16) = v208 | 2;
              *(_BYTE *)(v206 + 9) = v207;
              v209 = *((_BYTE *)v167 + 9);
              *(_DWORD *)(v206 + 16) = v208 | 3;
              *(_BYTE *)(v206 + 8) = v209;
              v210 = *((_BYTE *)v167 + 12);
              *(_DWORD *)(v206 + 16) = v208 | 0xB;
              *(_BYTE *)(v206 + 11) = v210;
              v211 = *((_BYTE *)v167 + 11);
              *(_DWORD *)(v206 + 16) = v208 | 0xF;
              *(_BYTE *)(v206 + 10) = v211;
              break;
            case 8:
              *(_DWORD *)(v188 + 88) = 8;
              *(_DWORD *)(v188 + 96) = v189 | 0x81;
              v212 = *(_QWORD *)(v188 + 56);
              if (!v212)
                operator new();
              v213 = *((_BYTE *)v167 + 12);
              v214 = *(_DWORD *)(v212 + 16);
              *(_DWORD *)(v212 + 16) = v214 | 8;
              *(_BYTE *)(v212 + 11) = v213;
              v215 = *((_BYTE *)v167 + 11);
              *(_DWORD *)(v212 + 16) = v214 | 0xC;
              *(_BYTE *)(v212 + 10) = v215;
              v216 = *((_BYTE *)v167 + 9);
              *(_DWORD *)(v212 + 16) = v214 | 0xD;
              *(_BYTE *)(v212 + 8) = v216;
              v217 = *((_BYTE *)v167 + 10);
              *(_DWORD *)(v212 + 16) = v214 | 0xF;
              *(_BYTE *)(v212 + 9) = v217;
              break;
            case 9:
              *(_DWORD *)(v188 + 88) = 9;
              *(_DWORD *)(v188 + 96) = v189 | 0x101;
              v218 = *(_QWORD *)(v188 + 64);
              if (!v218)
                operator new();
              v219 = *(_DWORD *)(v218 + 24);
              v230 = *((_BYTE *)v167 + 18);
              *(_DWORD *)(v218 + 24) = v219 | 0x200;
              *(_BYTE *)(v218 + 17) = v230;
              v231 = *((_BYTE *)v167 + 13);
              *(_DWORD *)(v218 + 24) = v219 | 0x210;
              *(_BYTE *)(v218 + 12) = v231;
              v232 = *((_BYTE *)v167 + 12);
              *(_DWORD *)(v218 + 24) = v219 | 0x218;
              *(_BYTE *)(v218 + 11) = v232;
              v233 = *((_BYTE *)v167 + 17);
              *(_DWORD *)(v218 + 24) = v219 | 0x318;
              *(_BYTE *)(v218 + 16) = v233;
              v234 = *((_BYTE *)v167 + 16);
              *(_DWORD *)(v218 + 24) = v219 | 0x398;
              *(_BYTE *)(v218 + 15) = v234;
              v235 = *((_BYTE *)v167 + 15);
              *(_DWORD *)(v218 + 24) = v219 | 0x3D8;
              *(_BYTE *)(v218 + 14) = v235;
              v236 = *((_BYTE *)v167 + 14);
              *(_DWORD *)(v218 + 24) = v219 | 0x3F8;
              *(_BYTE *)(v218 + 13) = v236;
              v237 = *((_BYTE *)v167 + 10);
              *(_DWORD *)(v218 + 24) = v219 | 0x3FA;
              *(_BYTE *)(v218 + 9) = v237;
              v238 = *((_BYTE *)v167 + 9);
              *(_DWORD *)(v218 + 24) = v219 | 0x3FB;
              *(_BYTE *)(v218 + 8) = v238;
              v239 = *((_BYTE *)v167 + 11);
              *(_DWORD *)(v218 + 24) = v219 | 0x3FF;
              *(_BYTE *)(v218 + 10) = v239;
              break;
            case 0xA:
              *(_DWORD *)(v188 + 88) = 12;
              *(_DWORD *)(v188 + 96) = v189 | 0x401;
              v190 = *(_QWORD *)(v188 + 80);
              if (!v190)
                operator new();
LABEL_293:
              v220 = *((_BYTE *)v167 + 10);
              v221 = *(_DWORD *)(v190 + 16);
              *(_DWORD *)(v190 + 16) = v221 | 2;
              *(_BYTE *)(v190 + 9) = v220;
              v222 = *((_BYTE *)v167 + 11);
              *(_DWORD *)(v190 + 16) = v221 | 6;
              *(_BYTE *)(v190 + 10) = v222;
              v223 = *((_BYTE *)v167 + 9);
              *(_DWORD *)(v190 + 16) = v221 | 7;
              *(_BYTE *)(v190 + 8) = v223;
              v224 = *((_BYTE *)v167 + 12);
              *(_DWORD *)(v190 + 16) = v221 | 0xF;
              *(_BYTE *)(v190 + 11) = v224;
              break;
            default:
              break;
          }
          v240 = *(_DWORD *)(v171 + 112);
          *(_OWORD *)(v171 + 24) = *(_OWORD *)(v167 + 6);
          *(_QWORD *)(v171 + 40) = *((_QWORD *)v167 + 5);
          *(_DWORD *)(v171 + 80) = v167[42];
          *(_BYTE *)(v171 + 104) = *((_BYTE *)v167 + 173);
          *(_DWORD *)(v171 + 112) = v240 | 0x161C;
          *(_DWORD *)(v171 + 84) = 1;
          v241 = *((unsigned __int8 *)v167 + 172);
          if (v241 <= 2)
            *(_DWORD *)(v171 + 84) = v241 + 2;
          if (*((double *)v167 + 6) >= 0.0)
          {
            v242 = *((float *)v167 + 14);
            if (v242 > 0.0)
            {
              *(_DWORD *)(v171 + 112) = v240 | 0x163C;
              v243 = *(_QWORD *)(v171 + 48);
              if (!v243)
                operator new();
              v244 = *((_QWORD *)v167 + 6);
              *(_DWORD *)(v243 + 32) |= 3u;
              *(_QWORD *)(v243 + 8) = v244;
              *(double *)(v243 + 16) = v242;
            }
          }
          if ((*((_QWORD *)v167 + 8) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
          {
            v245 = *((double *)v167 + 9);
            if (v245 > 0.0)
            {
              *(_DWORD *)(v171 + 112) |= 0x40u;
              v246 = *(_QWORD *)(v171 + 56);
              if (!v246)
                operator new();
              v247 = *((_QWORD *)v167 + 8);
              *(_DWORD *)(v246 + 32) |= 3u;
              *(_QWORD *)(v246 + 8) = v247;
              *(double *)(v246 + 16) = v245;
            }
          }
          if ((*((_QWORD *)v167 + 10) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
          {
            v248 = *((double *)v167 + 11);
            if (v248 > 0.0)
            {
              *(_DWORD *)(v171 + 112) |= 0x800u;
              v249 = *(_QWORD *)(v171 + 88);
              if (!v249)
                operator new();
              v250 = *((_QWORD *)v167 + 10);
              *(_DWORD *)(v249 + 32) |= 3u;
              *(_QWORD *)(v249 + 8) = v250;
              *(double *)(v249 + 16) = v248;
            }
          }
          if ((*((_QWORD *)v167 + 12) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
          {
            v251 = *((double *)v167 + 13);
            if (v251 > 0.0)
            {
              *(_DWORD *)(v171 + 112) |= 0x2000u;
              v252 = *(_QWORD *)(v171 + 96);
              if (!v252)
                operator new();
              v253 = *(_DWORD *)(v252 + 32);
              *(_QWORD *)(v252 + 8) = *((_QWORD *)v167 + 12);
              *(double *)(v252 + 16) = v251;
              v254 = *((_BYTE *)v167 + 112);
              *(_DWORD *)(v252 + 32) = v253 | 7;
              *(_BYTE *)(v252 + 24) = v254;
            }
          }
          v255 = *((_QWORD *)v167 + 15);
          if (v255 != -1)
          {
            v256 = *((_QWORD *)v167 + 16);
            if (v256 != -1 && v255 <= v256)
            {
              v257 = *((_QWORD *)v167 + 17);
              if ((v257 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
              {
                v258 = *((double *)v167 + 18);
                if (v258 > 0.0)
                {
                  *(_DWORD *)(v171 + 112) |= 0x80u;
                  v259 = *(_QWORD *)(v171 + 64);
                  if (!v259)
                    operator new();
                  v260 = *(_DWORD *)(v259 + 48);
                  *(_QWORD *)(v259 + 8) = *((_QWORD *)v167 + 15);
                  *(_QWORD *)(v259 + 16) = v256;
                  *(_QWORD *)(v259 + 24) = v257;
                  *(double *)(v259 + 32) = v258;
                  v261 = *((_BYTE *)v167 + 152);
                  *(_DWORD *)(v259 + 48) = v260 | 0x1F;
                  *(_BYTE *)(v259 + 40) = v261;
                }
              }
            }
          }
          v262 = *((_QWORD *)v167 + 20);
          if (v262)
          {
            *(_DWORD *)(v171 + 112) |= 0x100u;
            v263 = *(int32x2_t **)(v171 + 72);
            if (!v263)
              operator new();
            v264 = v263[14].i32[1];
            if ((*(_DWORD *)v262 & 0x7FFFFFFFu) <= 0x7F7FFFFF)
            {
              v264 |= 1u;
              v263[1].i32[0] = *(_DWORD *)v262;
            }
            v265 = *(_DWORD *)(v262 + 4);
            v263[14].i32[1] = v264 | 2;
            v263[1].i32[1] = v265;
            if ((*(_QWORD *)(v262 + 8) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
              && (*(_QWORD *)(v262 + 16) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
              && *(_BYTE *)(v262 + 24))
            {
              v263[14].i32[1] = v264 | 6;
              v266 = v263[2];
              if (!*(_QWORD *)&v266)
                operator new();
              v267 = *(_DWORD *)(*(_QWORD *)&v266 + 32);
              *(_OWORD *)(*(_QWORD *)&v266 + 8) = *(_OWORD *)(v262 + 8);
              *(_DWORD *)(*(_QWORD *)&v266 + 32) = v267 | 7;
              *(_DWORD *)(*(_QWORD *)&v266 + 24) = 1;
              v268 = (*(_BYTE *)(v262 + 24) - 1);
              if (v268 <= 3)
                *(_DWORD *)(*(_QWORD *)&v266 + 24) = v268 + 2;
            }
            v269 = v263[14].i32[1];
            v263[8].i32[0] = *(__int16 *)(v262 + 68);
            v270 = *(unsigned __int8 *)(v262 + 72);
            v263[6].i32[0] = *(unsigned __int16 *)(v262 + 70);
            v263[6].i32[1] = v270;
            v271.i32[0] = *(unsigned __int8 *)(v262 + 92);
            v271.i32[1] = *(unsigned __int8 *)(v262 + 93);
            v272 = (int8x8_t)vcgt_u32((uint32x2_t)0x500000005, v271);
            v263[7] = vsub_s32((int32x2_t)vand_s8((int8x8_t)vadd_s32((int32x2_t)v271, (int32x2_t)0x200000002), v272), (int32x2_t)vmvn_s8(v272));
            v263[14].i32[1] = v269 | 0x7C8;
            v273 = (_DWORD *)v263[3];
            if (!v273)
              operator new();
            sub_10003C684(v273, (int *)(v262 + 32));
            v263[14].i32[1] |= 0x10u;
            v274 = (_DWORD *)v263[4];
            if (!v274)
              operator new();
            sub_10003C684(v274, (int *)(*((_QWORD *)v167 + 20) + 44));
            v263[14].i32[1] |= 0x20u;
            v275 = (_DWORD *)v263[5];
            if (!v275)
              operator new();
            sub_10003C684(v275, (int *)(*((_QWORD *)v167 + 20) + 56));
            v276 = *((_QWORD *)v167 + 20);
            if (*(_BYTE *)(v276 + 80))
            {
              v277 = *(_DWORD *)(v276 + 76);
              v263[14].i32[1] |= 0x800u;
              v263[8].i32[1] = v277;
            }
            if (*(_BYTE *)(v276 + 88))
            {
              v278 = *(_DWORD *)(v276 + 84);
              v263[14].i32[1] |= 0x1000u;
              v263[9].i32[0] = v278;
            }
            if (*(_BYTE *)(v276 + 124))
            {
              v279 = v263[14].i32[1];
              v263[9].i32[1] = *(_DWORD *)(v276 + 120);
              v281 = *(const std::string::value_type **)(v276 + 96);
              v280 = *(_QWORD *)(v276 + 104);
              v263[14].i32[1] = v279 | 0x6000;
              v282 = (std::string *)v263[10];
              if (v282 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
                operator new();
              std::string::assign(v282, v281, v280 - (_QWORD)v281);
              v276 = *((_QWORD *)v167 + 20);
            }
            v283 = *(float **)(v276 + 128);
            for (k = *(uint64_t **)(v276 + 136); v283 != (float *)k; v283 += 10)
            {
              v285 = v263[12].i32[1];
              v286 = v263[12].i32[0];
              if ((int)v286 >= v285)
              {
                if (v285 == v263[13].i32[0])
                {
                  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)&v263[11], v285 + 1);
                  v285 = v263[12].i32[1];
                }
                v263[12].i32[1] = v285 + 1;
                operator new();
              }
              v287 = v263[11];
              v263[12].i32[0] = v286 + 1;
              v288 = *(_QWORD *)(*(_QWORD *)&v287 + 8 * v286);
              *(_DWORD *)(v288 + 32) |= 1u;
              v289 = *(_QWORD *)(v288 + 8);
              if (!v289)
                operator new();
              v290 = *(_QWORD *)v283;
              v291 = v283[2];
              *(_DWORD *)(v289 + 32) |= 3u;
              *(_QWORD *)(v289 + 8) = v290;
              *(double *)(v289 + 16) = v291;
              *(_DWORD *)(v288 + 32) |= 2u;
              v292 = *(_QWORD *)(v288 + 16);
              if (!v292)
                operator new();
              *(_DWORD *)(v292 + 32) |= 3u;
              *(_OWORD *)(v292 + 8) = *((_OWORD *)v283 + 1);
              v293 = *((_DWORD *)v283 + 8);
              *(_DWORD *)(v288 + 32) |= 4u;
              *(_DWORD *)(v288 + 24) = v293;
            }
          }
          v167 += 44;
          if (v167 == v298)
            return a2 != 0;
          break;
        case 3:
        case 5:
        case 6:
        case 7:
          goto LABEL_265;
        case 4:
          *(_DWORD *)(v172 + 16) = 4;
          v185 = *((unsigned __int8 *)v167 + 4);
          *(_DWORD *)(v174 + 44) |= 4u;
          *(_DWORD *)(v174 + 20) = v185;
          goto LABEL_265;
        case 8:
          *(_DWORD *)(v172 + 16) = 8;
          v186 = *((unsigned __int8 *)v167 + 4);
          *(_DWORD *)(v174 + 44) |= 8u;
          *(_DWORD *)(v174 + 24) = v186;
          goto LABEL_265;
        default:
          if (v175 == 16)
          {
            *(_DWORD *)(v172 + 16) = 16;
            v187 = *((unsigned __int8 *)v167 + 4);
            *(_DWORD *)(v174 + 44) |= 0x10u;
            *(_DWORD *)(v174 + 28) = v187;
          }
          else if (v175 == 32)
          {
            *(_DWORD *)(v172 + 16) = 64;
            v176 = *((unsigned __int8 *)v167 + 4);
            *(_DWORD *)(v174 + 44) |= 0x40u;
            *(_DWORD *)(v174 + 36) = v176;
          }
          goto LABEL_265;
      }
    }
  }
  return a2 != 0;
}

BOOL sub_100021E68(uint64_t a1)
{
  int v2;

  if (*(_WORD *)a1)
    return 1;
  if (*(__int16 *)(a1 + 8) != -32768)
  {
    v2 = *(unsigned __int8 *)(a1 + 10);
    if (*(_QWORD *)(a1 + 16))
    {
      if ((v2 != 2) == (*(__int16 *)(a1 + 24) != -32768))
        return *(_QWORD *)(a1 + 32)
            && (*(_QWORD *)(a1 + 40) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (*(_QWORD *)(a1 + 48) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (*(_QWORD *)(a1 + 56) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      return 1;
    }
    if (v2 != 2)
      return 1;
  }
  return *(_QWORD *)(a1 + 32)
      && (*(_QWORD *)(a1 + 40) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(_QWORD *)(a1 + 48) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(_QWORD *)(a1 + 56) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
}

uint64_t sub_100021F04(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void **v10;

  v2 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = 0;
  if (v2)
    operator delete();
  v3 = *(_QWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 256) = 0;
  if (v3)
    operator delete();
  v4 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 248) = 0;
  if (v4)
    operator delete();
  v5 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 240) = 0;
  if (v5)
    operator delete();
  v6 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 232) = 0;
  if (v6)
    operator delete();
  v7 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = 0;
  if (v7)
    operator delete();
  v8 = *(void **)(a1 + 200);
  if (v8)
  {
    *(_QWORD *)(a1 + 208) = v8;
    operator delete(v8);
  }
  v10 = (void **)(a1 + 176);
  sub_100031A3C(&v10);
  v10 = (void **)(a1 + 152);
  sub_100031B10(&v10);
  return a1;
}

uint64_t gnss::MeasurementData::fillIsUsableFlag(gnss::MeasurementData *this)
{
  uint64_t result;
  unsigned int v3;
  BOOL v4;
  int v5;
  uint64_t v7;
  uint64_t i;
  float v9;
  double v10;
  BOOL v11;

  result = GpsdPlatformInfo::instance(0);
  v3 = *(_DWORD *)(result + 8) - 103;
  v4 = v3 > 4;
  v5 = (1 << v3) & 0x19;
  if (!v4 && v5 != 0)
  {
    v7 = *((_QWORD *)this + 19);
    for (i = *((_QWORD *)this + 20); v7 != i; v7 += 176)
    {
      if (*(double *)(v7 + 48) < 0.0
        || (v9 = *(float *)(v7 + 56), v9 <= 0.0)
        || (*(_QWORD *)(v7 + 64) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        v11 = 0;
      }
      else
      {
        v10 = *(double *)(v7 + 72);
        v11 = v9 < 5000.0;
        if (v10 <= 0.0)
          v11 = 0;
        if (v10 >= 50.0)
          v11 = 0;
      }
      *(_BYTE *)(v7 + 173) = v11;
    }
  }
  return result;
}

void CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::~MeasurementReportCallbackContents(CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *this)
{
  CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::~MeasurementReportCallbackContents(this);
  operator delete();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t i;
  uint64_t v8;
  int v9;
  uint64_t j;
  uint64_t v11;
  int v12;
  uint64_t k;
  uint64_t v14;

  *(_QWORD *)this = off_1000F8E58;
  if ((CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *)CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *((_QWORD *)this + 2);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = *((_QWORD *)this + 9);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *((_QWORD *)this + 12);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  v6 = *((_DWORD *)this + 29);
  if (v6 >= 1)
  {
    for (i = 0; i < v6; ++i)
    {
      v8 = *(_QWORD *)(*((_QWORD *)this + 13) + 8 * i);
      if (v8)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
        v6 = *((_DWORD *)this + 29);
      }
    }
  }
  if (*((_QWORD *)this + 13))
    operator delete[]();
  v9 = *((_DWORD *)this + 15);
  if (v9 >= 1)
  {
    for (j = 0; j < v9; ++j)
    {
      v11 = *(_QWORD *)(*((_QWORD *)this + 6) + 8 * j);
      if (v11)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        v9 = *((_DWORD *)this + 15);
      }
    }
  }
  if (*((_QWORD *)this + 6))
    operator delete[]();
  v12 = *((_DWORD *)this + 9);
  if (v12 >= 1)
  {
    for (k = 0; k < v12; ++k)
    {
      v14 = *(_QWORD *)(*((_QWORD *)this + 3) + 8 * k);
      if (v14)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        v12 = *((_DWORD *)this + 9);
      }
    }
  }
  if (*((_QWORD *)this + 3))
    operator delete[]();
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void CLP::LogEntry::PrivateData::MeasurementReport::~MeasurementReport(CLP::LogEntry::PrivateData::MeasurementReport *this)
{
  CLP::LogEntry::PrivateData::MeasurementReport::~MeasurementReport(this);
  operator delete();
}

{
  uint64_t v2;
  int v3;
  uint64_t i;
  uint64_t v5;

  *(_QWORD *)this = off_1000F8408;
  if ((CLP::LogEntry::PrivateData::MeasurementReport *)qword_1001005C8 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  v3 = *((_DWORD *)this + 7);
  if (v3 >= 1)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * i);
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        v3 = *((_DWORD *)this + 7);
      }
    }
  }
  if (*((_QWORD *)this + 2))
    operator delete[]();
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void CLP::LogEntry::PrivateData::Measurement::~Measurement(CLP::LogEntry::PrivateData::Measurement *this)
{
  *(_QWORD *)this = off_1000F81B0;
  sub_10009AF70(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

{
  *(_QWORD *)this = off_1000F81B0;
  sub_10009AF70(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void CLP::LogEntry::PrivateData::SyncState::~SyncState(CLP::LogEntry::PrivateData::SyncState *this)
{
  *(_QWORD *)this = off_1000F7D78;
  sub_1000959BC(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

{
  *(_QWORD *)this = off_1000F7D78;
  sub_1000959BC(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void CLP::LogEntry::PrivateData::SvTime::~SvTime(CLP::LogEntry::PrivateData::SvTime *this)
{
  *(_QWORD *)this = off_1000F7DF0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

{
  *(_QWORD *)this = off_1000F7DF0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void CLP::LogEntry::PrivateData::FrequencyOffset::~FrequencyOffset(CLP::LogEntry::PrivateData::FrequencyOffset *this)
{
  *(_QWORD *)this = off_1000F7E68;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

{
  *(_QWORD *)this = off_1000F7E68;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void CLP::LogEntry::PrivateData::GpsL1SyncState::~GpsL1SyncState(CLP::LogEntry::PrivateData::GpsL1SyncState *this)
{
  *(_QWORD *)this = off_1000F7940;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

{
  *(_QWORD *)this = off_1000F7940;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void CLP::LogEntry::PrivateData::Clock::~Clock(CLP::LogEntry::PrivateData::Clock *this)
{
  *(_QWORD *)this = off_1000F8390;
  sub_10009D3D8(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

{
  *(_QWORD *)this = off_1000F8390;
  sub_10009D3D8(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void CLP::LogEntry::PrivateData::SvInfo::~SvInfo(CLP::LogEntry::PrivateData::SvInfo *this)
{
  CLP::LogEntry::PrivateData::SvInfo::~SvInfo(this);
  operator delete();
}

{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t i;
  uint64_t v6;
  int v7;
  uint64_t j;
  uint64_t v9;

  *(_QWORD *)this = off_1000F8660;
  if ((CLP::LogEntry::PrivateData::SvInfo *)qword_1001005F0 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *((_QWORD *)this + 16);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  v4 = *((_DWORD *)this + 29);
  if (v4 >= 1)
  {
    for (i = 0; i < v4; ++i)
    {
      v6 = *(_QWORD *)(*((_QWORD *)this + 13) + 8 * i);
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        v4 = *((_DWORD *)this + 29);
      }
    }
  }
  if (*((_QWORD *)this + 13))
    operator delete[]();
  v7 = *((_DWORD *)this + 9);
  if (v7 >= 1)
  {
    for (j = 0; j < v7; ++j)
    {
      v9 = *(_QWORD *)(*((_QWORD *)this + 3) + 8 * j);
      if (v9)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
        v7 = *((_DWORD *)this + 9);
      }
    }
  }
  if (*((_QWORD *)this + 3))
    operator delete[]();
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void CLP::LogEntry::PrivateData::SvPositionAtTime::~SvPositionAtTime(CLP::LogEntry::PrivateData::SvPositionAtTime *this)
{
  CLP::LogEntry::PrivateData::SvPositionAtTime::~SvPositionAtTime(this);
  operator delete();
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1000F8570;
  if ((CLP::LogEntry::PrivateData::SvPositionAtTime *)qword_1001005E0 != this)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void CLP::LogEntry::PrivateData::Wgs84Ecef::~Wgs84Ecef(CLP::LogEntry::PrivateData::Wgs84Ecef *this)
{
  *(_QWORD *)this = off_1000F8480;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

{
  *(_QWORD *)this = off_1000F8480;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void CLP::LogEntry::PrivateData::SvBandCorrections::~SvBandCorrections(CLP::LogEntry::PrivateData::SvBandCorrections *this)
{
  *(_QWORD *)this = off_1000F84F8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

{
  *(_QWORD *)this = off_1000F84F8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void CLP::LogEntry::PrivateData::SvId::~SvId(CLP::LogEntry::PrivateData::SvId *this)
{
  CLP::LogEntry::PrivateData::SvId::~SvId(this);
  operator delete();
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1000F78C8;
  if ((CLP::LogEntry::PrivateData::SvId *)qword_100100508 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void CLP::LogEntry::PrivateData::ConstellationId::~ConstellationId(CLP::LogEntry::PrivateData::ConstellationId *this)
{
  CLP::LogEntry::PrivateData::ConstellationId::~ConstellationId(this);
  operator delete();
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1000F7850;
  if ((CLP::LogEntry::PrivateData::ConstellationId *)qword_100100500 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void CLP::LogEntry::PrivateData::ReceiverBandCorrections::~ReceiverBandCorrections(CLP::LogEntry::PrivateData::ReceiverBandCorrections *this)
{
  *(_QWORD *)this = off_1000F86D8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

{
  *(_QWORD *)this = off_1000F86D8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void CLP::LogEntry::PrivateData::GlonassId::~GlonassId(CLP::LogEntry::PrivateData::GlonassId *this)
{
  CLP::LogEntry::PrivateData::GlonassId::~GlonassId(this);
  operator delete();
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1000F77D8;
  if ((CLP::LogEntry::PrivateData::GlonassId *)qword_1001004F8 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void CLP::LogEntry::PrivateData::GlonassSlotInfo::~GlonassSlotInfo(CLP::LogEntry::PrivateData::GlonassSlotInfo *this)
{
  *(_QWORD *)this = off_1000F7760;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

{
  *(_QWORD *)this = off_1000F7760;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void CLP::LogEntry::PrivateData::ReceiverClockCorrections::~ReceiverClockCorrections(CLP::LogEntry::PrivateData::ReceiverClockCorrections *this)
{
  *(_QWORD *)this = off_1000F82A0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

{
  *(_QWORD *)this = off_1000F82A0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void CLP::LogEntry::PrivateData::KlobucharModelParameters::~KlobucharModelParameters(CLP::LogEntry::PrivateData::KlobucharModelParameters *this)
{
  *(_QWORD *)this = off_1000F8C78;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

{
  *(_QWORD *)this = off_1000F8C78;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void CLP::LogEntry::PrivateData::TimeConversionInfo::~TimeConversionInfo(CLP::LogEntry::PrivateData::TimeConversionInfo *this)
{
  *(_QWORD *)this = off_1000F8C00;
  sub_1000A5F58(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

{
  *(_QWORD *)this = off_1000F8C00;
  sub_1000A5F58(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void CLP::LogEntry::PrivateData::ReceiverClockModel::~ReceiverClockModel(CLP::LogEntry::PrivateData::ReceiverClockModel *this)
{
  *(_QWORD *)this = off_1000F8228;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

{
  *(_QWORD *)this = off_1000F8228;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void CLP::LogEntry::PrivateData::ReceivedTimeStamp::~ReceivedTimeStamp(CLP::LogEntry::PrivateData::ReceivedTimeStamp *this)
{
  *(_QWORD *)this = off_1000F8DE0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

{
  *(_QWORD *)this = off_1000F8DE0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void CLP::LogEntry::PrivateData::GlonassTimeInfo::~GlonassTimeInfo(CLP::LogEntry::PrivateData::GlonassTimeInfo *this)
{
  *(_QWORD *)this = off_1000F89A8;
  sub_1000A3748(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

{
  *(_QWORD *)this = off_1000F89A8;
  sub_1000A3748(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void CLP::LogEntry::PrivateData::GlonassSubsecondConversion::~GlonassSubsecondConversion(CLP::LogEntry::PrivateData::GlonassSubsecondConversion *this)
{
  *(_QWORD *)this = off_1000F8930;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

{
  *(_QWORD *)this = off_1000F8930;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void CLP::LogEntry::PrivateData::GalileoTimeInfo::~GalileoTimeInfo(CLP::LogEntry::PrivateData::GalileoTimeInfo *this)
{
  *(_QWORD *)this = off_1000F8B10;
  sub_1000A50D8(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

{
  *(_QWORD *)this = off_1000F8B10;
  sub_1000A50D8(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void CLP::LogEntry::PrivateData::GpsL5SyncState::~GpsL5SyncState(CLP::LogEntry::PrivateData::GpsL5SyncState *this)
{
  *(_QWORD *)this = off_1000F7A30;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

{
  *(_QWORD *)this = off_1000F7A30;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void CLP::LogEntry::PrivateData::BeidouTimeInfo::~BeidouTimeInfo(CLP::LogEntry::PrivateData::BeidouTimeInfo *this)
{
  *(_QWORD *)this = off_1000F8A98;
  sub_1000A44F8(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

{
  *(_QWORD *)this = off_1000F8A98;
  sub_1000A44F8(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void CLP::LogEntry::PrivateData::NavicTimeInfo::~NavicTimeInfo(CLP::LogEntry::PrivateData::NavicTimeInfo *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1000F8B88;
  if ((CLP::LogEntry::PrivateData::NavicTimeInfo *)qword_100100648 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLP::LogEntry::PrivateData::NavicTimeInfo::~NavicTimeInfo(this);
  operator delete();
}

void CLP::LogEntry::PrivateData::SubSecondConversion::~SubSecondConversion(CLP::LogEntry::PrivateData::SubSecondConversion *this)
{
  *(_QWORD *)this = off_1000F8A20;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

{
  *(_QWORD *)this = off_1000F8A20;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void CLP::LogEntry::PrivateData::GpsTimeInfo::~GpsTimeInfo(CLP::LogEntry::PrivateData::GpsTimeInfo *this)
{
  *(_QWORD *)this = off_1000F88B8;
  sub_1000A2C4C(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

{
  *(_QWORD *)this = off_1000F88B8;
  sub_1000A2C4C(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void CLP::LogEntry::PrivateData::GpsToUtcConversion::~GpsToUtcConversion(CLP::LogEntry::PrivateData::GpsToUtcConversion *this)
{
  *(_QWORD *)this = off_1000F8840;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

{
  *(_QWORD *)this = off_1000F8840;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void CLP::LogEntry::PrivateData::LeapSecondInfo::~LeapSecondInfo(CLP::LogEntry::PrivateData::LeapSecondInfo *this)
{
  CLP::LogEntry::PrivateData::LeapSecondInfo::~LeapSecondInfo(this);
  operator delete();
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1000F87C8;
  if ((CLP::LogEntry::PrivateData::LeapSecondInfo *)qword_100100608 != this)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

double ReceiverClockConversion::feedPvtmCallback(ReceiverClockConversion *this, unint64_t a2, double a3)
{
  ReceiverClockConversion::checkRxClockForHwReset(this, a2);
  ReceiverClockConversion::usePvtmReceiptTime(this, a2, a3);
  return *(double *)this + (double)a2 * 0.000000001;
}

void ReceiverClockConversion::checkRxClockForHwReset(ReceiverClockConversion *this, uint64_t a2)
{
  unint64_t v4;
  NSObject *v5;
  int v6;
  unint64_t v7;
  __int16 v8;
  uint64_t v9;

  v4 = *((_QWORD *)this + 3);
  if (a2 + 2000000000 < v4)
  {
    v5 = qword_100100830;
    if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
    {
      v6 = 134349312;
      v7 = v4;
      v8 = 2050;
      v9 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#rxClockConv,reset detected,lastNs,%{public}llu,currNs,%{public}llu", (uint8_t *)&v6, 0x16u);
    }
    *((_BYTE *)this + 32) = 0;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  *((_QWORD *)this + 3) = a2;
}

void ReceiverClockConversion::usePvtmReceiptTime(ReceiverClockConversion *this, unint64_t a2, double a3)
{
  double v3;
  NSObject *v4;
  int v5;
  double v6;
  __int16 v7;
  uint64_t v8;

  if (!*((_BYTE *)this + 32))
  {
    v3 = a3 + (double)a2 * -0.000000001 + -0.166;
    *(double *)this = v3;
    *((double *)this + 1) = a3;
    *((_QWORD *)this + 2) = 0x3FD3333333333333;
    *((_BYTE *)this + 32) = 1;
    v4 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 134349312;
      v6 = v3;
      v7 = 2050;
      v8 = 0x3FD3333333333333;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#rxClockConv,method,receipt,rxClockToMct,%{public}.4f,uncSec,%{public}.4f", (uint8_t *)&v5, 0x16u);
    }
  }
}

BOOL sub_100022E5C(double *a1)
{
  uint64_t v1;
  double v2;
  double v3;
  double v5;

  v1 = 0;
  if (*a1 >= -90.0 && *a1 <= 90.0)
  {
    v1 = 0;
    v2 = a1[1];
    if (v2 > -180.0 && v2 <= 180.0)
    {
      if (a1[2] < -500.0)
        return 0;
      v3 = a1[3];
      if (v3 < -120.0 || v3 > 100.0)
        return 0;
      if (a1[4] <= 0.0)
        return 0;
      if (a1[5] <= 0.0)
        return 0;
      if (a1[6] <= 0.0)
        return 0;
      v5 = a1[7];
      return v5 >= 0.0 && v5 < 180.0;
    }
  }
  return v1;
}

void sub_100022F28(uint64_t a1, char *a2, int64_t a3)
{
  NSObject **v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  std::string v10;
  std::string v11;
  std::string v12;
  _BYTE block[32];
  NSObject **v14;

  if (a2 && a3)
  {
    if (!a1)
    {
      v9 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)block = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#spi,readCallback,commSpiObj,null", block, 2u);
        v9 = qword_100100838;
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)block = 136446722;
        *(_QWORD *)&block[4] = "/Library/Caches/com.apple.xbs/Sources/CoreGPS/Sources/HAL/Implementation/GnssHalCommSpi.mm";
        *(_WORD *)&block[12] = 1026;
        *(_DWORD *)&block[14] = 165;
        *(_WORD *)&block[18] = 2082;
        *(_QWORD *)&block[20] = "readCallback";
        _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: assertion failure in %{public}s", block, 0x1Cu);
      }
      sub_100025B58(&v12, "assert");
      sub_100025B58(&v11, "readCallback");
      sub_100025B58(&v10, "#spi,readCallback,commSpiObj,null");
      gpsd::util::triggerDiagnosticReport((uint64_t)&v12, (__int128 *)&v11, (__int128 *)&v10);
      std::string::~string(&v10);
      std::string::~string(&v11);
      std::string::~string(&v12);
      __assert_rtn("readCallback", "GnssHalCommSpi.mm", 165, "false && \"#spi,readCallback,commSpiObj,null\"");
    }
    sub_100023340(*(_QWORD *)(a1 + 128), a2, a3);
    v6 = *(NSObject ***)(a1 + 128);
    v7 = *v6;
    *(_QWORD *)block = _NSConcreteStackBlock;
    *(_QWORD *)&block[8] = 3221225472;
    *(_QWORD *)&block[16] = sub_100018768;
    *(_QWORD *)&block[24] = &unk_1000F0D30;
    v14 = v6;
    dispatch_async(v7, block);
  }
  else
  {
    v8 = qword_100100830;
    if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)block = 134349312;
      *(_QWORD *)&block[4] = a2;
      *(_WORD *)&block[12] = 2050;
      *(_QWORD *)&block[14] = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#spi,read,invalid,data,%{public}p,size,%{public}zu", block, 0x16u);
    }
  }
}

void sub_100023170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

BOOL sub_1000231C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  return v4 >= 0 && v4 == a3;
}

unsigned __int8 *sub_1000231F8(uint64_t a1, gpsd::util *this, unsigned __int8 *a3, const char *a4)
{
  double v7;
  gpsd::util *v8;
  unint64_t MachContinuousTimeNs;
  NSObject *v10;
  int v12;
  unsigned __int8 *v13;
  __int16 v14;
  double v15;

  if (*(_BYTE *)(a1 + 41))
    gpsd::util::logBinaryBytes(this, a3, (uint64_t)"#spi,hal,write,bin", a4);
  if (*(_BYTE *)(a1 + 40))
    v7 = (double)gpsd::util::getMachContinuousTimeNs((gpsd::util *)a1) * 0.000000001;
  else
    v7 = 0.0;
  sub_100023340(*(_QWORD *)(a1 + 120), (char *)this, (int64_t)a3);
  if (*(_BYTE *)(a1 + 40))
  {
    MachContinuousTimeNs = gpsd::util::getMachContinuousTimeNs(v8);
    v10 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
    {
      v12 = 134218240;
      v13 = a3;
      v14 = 2048;
      v15 = ((double)MachContinuousTimeNs * 0.000000001 - v7) * 1000000.0;
      _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#spi,hal,write,size,%zu,duration,us,%.1f", (uint8_t *)&v12, 0x16u);
    }
  }
  return a3;
}

void sub_100023340(uint64_t a1, char *a2, int64_t a3)
{
  char *v6;
  char *v7;
  void *v8;
  int64_t v9;
  NSObject *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  size_t v15;
  char *v16;
  NSObject *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  int64_t v23;
  char *v24;
  char *v25;
  char *v26;
  int64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  void *v32;
  NSObject *v33;
  std::mutex *v34;
  _BYTE buf[24];
  void *v36;
  uint64_t v37;

  if (a3)
  {
    v34 = (std::mutex *)(a1 + 40);
    std::mutex::lock((std::mutex *)(a1 + 40));
    v6 = *(char **)(a1 + 104);
    v7 = *(char **)(a1 + 112);
    v8 = (void *)(*(_QWORD *)(a1 + 120) - (_QWORD)v6);
    v9 = v7 - v6;
    if ((unint64_t)v8 < v7 - v6 + a3)
    {
      v10 = qword_100100830;
      if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134349568;
        *(_QWORD *)&buf[4] = v6;
        *(_WORD *)&buf[12] = 2050;
        *(_QWORD *)&buf[14] = v7 - v6 + a3;
        *(_WORD *)&buf[22] = 2050;
        v36 = v8;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#spi,ab,overflow,@%{public}p,sz,%{public}zu,cap,%{public}zu", buf, 0x20u);
        v6 = *(char **)(a1 + 104);
        v7 = *(char **)(a1 + 112);
        v9 = v7 - v6;
      }
    }
    if (a3 < 1)
      goto LABEL_44;
    v11 = &v6[v9];
    v12 = *(_QWORD *)(a1 + 120);
    if (v12 - (uint64_t)v7 < a3)
    {
      v13 = v7 - v6 + a3;
      if (v13 < 0)
        sub_100026868();
      v14 = v12 - (_QWORD)v6;
      if (2 * v14 > v13)
        v13 = 2 * v14;
      if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
        v15 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
        v16 = (char *)operator new(v15);
      else
        v16 = 0;
      v28 = &v16[v9];
      memcpy(&v16[v9], a2, a3);
      if (v7 == v6)
      {
        v29 = &v16[v9];
      }
      else
      {
        do
        {
          v16[v9 - 1] = v6[v9 - 1];
          --v9;
        }
        while (v9);
        v7 = *(char **)(a1 + 112);
        v29 = v16;
      }
      v30 = &v28[a3];
      v31 = &v16[v15];
      if (v7 != v11)
        memmove(v30, v11, v7 - v11);
      v32 = *(void **)(a1 + 104);
      *(_QWORD *)(a1 + 104) = v29;
      *(_QWORD *)(a1 + 112) = &v30[v7 - v11];
      *(_QWORD *)(a1 + 120) = v31;
      if (v32)
        operator delete(v32);
      goto LABEL_44;
    }
    v18 = &a2[a3];
    v19 = v7 - v11;
    if (v7 - v11 >= a3)
    {
      v20 = v7;
    }
    else
    {
      memmove(v7, &a2[v19], a3 - v19);
      v20 = &v11[a3];
      *(_QWORD *)(a1 + 112) = &v11[a3];
      if (v19 < 1)
      {
LABEL_44:
        if (((*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) & 0x7FFFFFFFFFFFF800) != 0)
        {
          v33 = *(NSObject **)a1;
          *(_QWORD *)buf = _NSConcreteStackBlock;
          *(_QWORD *)&buf[8] = 3221225472;
          *(_QWORD *)&buf[16] = sub_100018768;
          v36 = &unk_1000F0D30;
          v37 = a1;
          dispatch_async(v33, buf);
        }
        std::mutex::unlock(v34);
        return;
      }
      v18 = &a2[v19];
    }
    v21 = &v11[a3];
    v22 = v20;
    if (&v20[-a3] < v7)
    {
      if (a3 <= v19)
        v23 = v7 - v11;
      else
        v23 = a3;
      v24 = &v7[a3 - v9];
      v25 = &v6[v9 - a3];
      v26 = &v6[v9];
      do
      {
        v26[v23] = v25[v23];
        --v24;
        ++v25;
        ++v26;
      }
      while (&v6[v23] != v24);
      if (a3 <= v19)
        v27 = v7 - v11;
      else
        v27 = a3;
      v22 = &v26[v27];
    }
    *(_QWORD *)(a1 + 112) = v22;
    if (v20 != v21)
      memmove(&v11[a3], &v6[v9], v20 - v21);
    if (v18 != a2)
      memmove(&v6[v9], a2, v18 - a2);
    goto LABEL_44;
  }
  v17 = qword_100100830;
  if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#spi,ab,input,zerosize", buf, 2u);
  }
}

void sub_1000236A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
  std::mutex::unlock(a10);
  _Unwind_Resume(a1);
}

void sub_1000236BC(uint64_t a1, uint64_t a2, gpsd::util **a3)
{
  int v5;
  int v6;
  uint64_t v7;
  gpsd::util *v8;
  gpsd::util *v9;
  std::string::value_type v10;
  uint64_t v11;
  CFAbsoluteTime Current;
  NSObject *v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  __int16 v25;
  uint64_t v26;

  *(_DWORD *)(a1 + 64) |= 1u;
  *(_QWORD *)(a1 + 16) = a2;
  v5 = gpsd::util::truncatedSha256(*a3, (const void *)(a3[1] - *a3));
  v6 = *(_DWORD *)(a1 + 64);
  *(_DWORD *)(a1 + 56) = v5;
  *(_DWORD *)(a1 + 64) = v6 | 6;
  v7 = *(_QWORD *)(a1 + 24);
  if ((_UNKNOWN *)v7 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  if (*(char *)(v7 + 23) < 0)
  {
    **(_BYTE **)v7 = 0;
    *(_QWORD *)(v7 + 8) = 0;
  }
  else
  {
    *(_BYTE *)v7 = 0;
    *(_BYTE *)(v7 + 23) = 0;
  }
  std::string::reserve((std::string *)v7, a3[1] - *a3);
  v8 = *a3;
  v9 = a3[1];
  while (v8 != v9)
  {
    v10 = *(_BYTE *)v8;
    v8 = (gpsd::util *)((char *)v8 + 1);
    std::string::push_back((std::string *)v7, v10);
  }
  v11 = *(_QWORD *)(a1 + 32) + 1;
  *(_DWORD *)(a1 + 64) |= 8u;
  *(_QWORD *)(a1 + 32) = v11;
  Current = CFAbsoluteTimeGetCurrent();
  *(_DWORD *)(a1 + 64) |= 0x20u;
  *(CFAbsoluteTime *)(a1 + 48) = Current;
  v13 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
  {
    v14 = a3[1] - *a3;
    v15 = *(_QWORD *)(a1 + 24);
    if (*(char *)(v15 + 23) < 0)
      v16 = *(_QWORD *)(v15 + 8);
    else
      v16 = *(unsigned __int8 *)(v15 + 23);
    v17 = *(_DWORD *)(a1 + 56);
    v18 = *(_QWORD *)(a1 + 32);
    v19 = 134218752;
    v20 = v14;
    v21 = 2048;
    v22 = v16;
    v23 = 1024;
    v24 = v17;
    v25 = 2048;
    v26 = v18;
    _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "NvStore,storeToProtobuf,source_size,%zu,dest_size,%zu,hash,%x,count,%lld", (uint8_t *)&v19, 0x26u);
  }
}

void sub_100023898(uint64_t a1)
{
  sub_100019E84(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1000238A0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (result)
    operator delete();
  return result;
}

uint64_t sub_1000238C8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t *sub_1000238E8(uint64_t a1)
{
  return sub_10004D95C((uint64_t *)(a1 + 48));
}

uint64_t **sub_1000238F0(uint64_t a1)
{
  return sub_10003BD88((uint64_t **)(a1 + 48), 0);
}

void sub_1000238FC(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

std::condition_variable *sub_100023910(uint64_t a1)
{
  return sub_1000C7970((std::condition_variable **)(a1 + 48), 0);
}

uint64_t sub_10002391C(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

uint64_t sub_10002392C(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

uint64_t sub_10002393C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

uint64_t sub_10002394C(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

__n128 sub_10002395C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a1[3] = result;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  a2[3].n128_u64[0] = 0;
  return result;
}

uint64_t sub_100023978(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

void sub_100023988(uint64_t a1)
{
  GpsdProtobufRouter::handleRequest(**(_QWORD **)(a1 + 40), (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48), *(_QWORD *)(a1 + 48));
}

uint64_t proto::gpsd::Request::IsInitialized(proto::gpsd::Request *this)
{
  return 1;
}

uint64_t proto::gpsd::Request::Clear(uint64_t this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;

  v1 = this;
  v2 = (unsigned int *)(this + 388);
  v3 = *(_DWORD *)(this + 388);
  if ((_BYTE)v3)
  {
    *(_QWORD *)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
    if ((v3 & 8) != 0)
    {
      this = *(_QWORD *)(this + 24);
      if (this)
      {
        this = sub_1000B2C64(this);
        v3 = *v2;
      }
    }
    if ((v3 & 0x10) != 0)
    {
      v4 = *(_QWORD *)(v1 + 32);
      if (v4)
      {
        if (*(_BYTE *)(v4 + 36))
        {
          *(_QWORD *)(v4 + 8) = 0;
          *(_QWORD *)(v4 + 16) = 0;
          *(_QWORD *)(v4 + 24) = 0;
        }
        *(_DWORD *)(v4 + 36) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x20) != 0)
    {
      v5 = *(_QWORD *)(v1 + 40);
      if (v5)
      {
        if (*(int *)(v5 + 16) >= 1)
        {
          v6 = 0;
          do
          {
            v7 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v6);
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
            ++v6;
          }
          while (v6 < *(int *)(v5 + 16));
        }
        *(_DWORD *)(v5 + 16) = 0;
        *(_DWORD *)(v5 + 36) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x40) != 0)
    {
      v8 = *(_QWORD *)(v1 + 48);
      if (v8)
      {
        if (*(int *)(v8 + 16) >= 1)
        {
          v9 = 0;
          do
          {
            v10 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v9);
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
            ++v9;
          }
          while (v9 < *(int *)(v8 + 16));
        }
        *(_DWORD *)(v8 + 16) = 0;
        *(_DWORD *)(v8 + 36) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x80) != 0)
    {
      v11 = *(_QWORD *)(v1 + 56);
      if (v11)
      {
        if (*(int *)(v11 + 16) >= 1)
        {
          v12 = 0;
          do
          {
            v13 = *(_QWORD *)(*(_QWORD *)(v11 + 8) + 8 * v12);
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
            ++v12;
          }
          while (v12 < *(int *)(v11 + 16));
        }
        *(_DWORD *)(v11 + 16) = 0;
        *(_DWORD *)(v11 + 36) = 0;
        v3 = *v2;
      }
    }
  }
  if ((v3 & 0xFF00) != 0)
  {
    if ((v3 & 0x100) != 0)
    {
      v14 = *(_QWORD *)(v1 + 64);
      if (v14)
      {
        if (*(_BYTE *)(v14 + 36))
        {
          *(_QWORD *)(v14 + 8) = 0;
          *(_QWORD *)(v14 + 16) = 0;
          *(_QWORD *)(v14 + 24) = 0;
        }
        *(_DWORD *)(v14 + 36) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x200) != 0)
    {
      v15 = *(_QWORD *)(v1 + 72);
      if (v15)
      {
        v16 = *(_DWORD *)(v15 + 76);
        if ((_BYTE)v16)
        {
          *(_OWORD *)(v15 + 49) = 0u;
          *(_OWORD *)(v15 + 40) = 0u;
          *(_OWORD *)(v15 + 24) = 0u;
          *(_OWORD *)(v15 + 8) = 0u;
        }
        if ((v16 & 0xFF00) != 0)
        {
          *(_BYTE *)(v15 + 69) = 0;
          *(_DWORD *)(v15 + 65) = 0;
        }
        *(_DWORD *)(v15 + 76) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x400) != 0)
    {
      v17 = *(_QWORD *)(v1 + 80);
      if (v17)
      {
        if (*(_BYTE *)(v17 + 32))
        {
          *(_QWORD *)(v17 + 8) = 0;
          *(_QWORD *)(v17 + 16) = 0x400000000;
          *(_DWORD *)(v17 + 24) = 0;
        }
        *(_DWORD *)(v17 + 32) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x800) != 0)
    {
      v18 = *(_QWORD *)(v1 + 88);
      if (v18)
      {
        if (*(_BYTE *)(v18 + 24))
        {
          *(_QWORD *)(v18 + 8) = 0;
          *(_DWORD *)(v18 + 16) = 4;
        }
        *(_DWORD *)(v18 + 24) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x1000) != 0)
    {
      v19 = *(_QWORD *)(v1 + 96);
      if (v19)
      {
        if (*(_BYTE *)(v19 + 16))
          *(_DWORD *)(v19 + 8) = 15;
        *(_DWORD *)(v19 + 16) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x2000) != 0)
    {
      v20 = *(_QWORD *)(v1 + 104);
      if (v20)
      {
        if (*(_BYTE *)(v20 + 44))
        {
          *(_OWORD *)(v20 + 24) = 0u;
          *(_OWORD *)(v20 + 8) = 0u;
        }
        *(_DWORD *)(v20 + 44) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x4000) != 0)
    {
      v21 = *(_QWORD *)(v1 + 112);
      if (v21)
      {
        if (*(_BYTE *)(v21 + 36))
        {
          *(_QWORD *)(v21 + 8) = 0;
          *(_QWORD *)(v21 + 16) = 0;
          *(_QWORD *)(v21 + 24) = 0;
        }
        *(_DWORD *)(v21 + 36) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x8000) != 0)
    {
      this = *(_QWORD *)(v1 + 120);
      if (this)
      {
        this = proto::gpsd::InjectAssistanceFile::Clear(this);
        v3 = *v2;
      }
    }
  }
  if ((v3 & 0xFF0000) != 0)
  {
    if ((v3 & 0x10000) != 0)
    {
      v22 = *(_QWORD *)(v1 + 128);
      if (v22)
      {
        if ((*(_BYTE *)(v22 + 20) & 1) != 0)
        {
          v23 = *(_QWORD *)(v22 + 8);
          if ((_UNKNOWN *)v23 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          {
            if (*(char *)(v23 + 23) < 0)
            {
              **(_BYTE **)v23 = 0;
              *(_QWORD *)(v23 + 8) = 0;
            }
            else
            {
              *(_BYTE *)v23 = 0;
              *(_BYTE *)(v23 + 23) = 0;
            }
          }
        }
        *(_DWORD *)(v22 + 20) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x20000) != 0)
    {
      v24 = *(_QWORD *)(v1 + 136);
      if (v24)
      {
        if (*(int *)(v24 + 16) >= 1)
        {
          v25 = 0;
          do
          {
            v26 = *(_QWORD *)(*(_QWORD *)(v24 + 8) + 8 * v25);
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 32))(v26);
            ++v25;
          }
          while (v25 < *(int *)(v24 + 16));
        }
        *(_DWORD *)(v24 + 16) = 0;
        *(_DWORD *)(v24 + 36) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x40000) != 0)
    {
      v27 = *(_QWORD *)(v1 + 144);
      if (v27)
      {
        if (*(_BYTE *)(v27 + 20))
          *(_QWORD *)(v27 + 8) = 0;
        *(_DWORD *)(v27 + 20) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x80000) != 0)
    {
      v28 = *(_QWORD *)(v1 + 152);
      if (v28)
      {
        if (*(_BYTE *)(v28 + 20))
        {
          *(_BYTE *)(v28 + 8) = 1;
          *(_DWORD *)(v28 + 9) = 0;
          *(_BYTE *)(v28 + 13) = 0;
        }
        *(_DWORD *)(v28 + 20) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x100000) != 0)
    {
      v29 = *(_QWORD *)(v1 + 160);
      if (v29)
      {
        if (*(_BYTE *)(v29 + 20))
          *(_QWORD *)(v29 + 8) = 0;
        *(_DWORD *)(v29 + 20) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x200000) != 0)
    {
      v30 = *(_QWORD *)(v1 + 168);
      if (v30)
      {
        if (*(_BYTE *)(v30 + 20))
        {
          *(_BYTE *)(v30 + 8) = 0;
          *(_DWORD *)(v30 + 12) = 0;
        }
        *(_DWORD *)(v30 + 20) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x400000) != 0)
    {
      v31 = *(_QWORD *)(v1 + 176);
      if (v31)
      {
        if (*(_BYTE *)(v31 + 20))
          *(_QWORD *)(v31 + 8) = 0;
        *(_DWORD *)(v31 + 20) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x800000) != 0)
    {
      v32 = *(_QWORD *)(v1 + 184);
      if (v32)
      {
        if (*(_BYTE *)(v32 + 16))
          *(_BYTE *)(v32 + 8) = 0;
        *(_DWORD *)(v32 + 16) = 0;
        v3 = *v2;
      }
    }
  }
  if (HIBYTE(v3))
  {
    if ((v3 & 0x1000000) != 0)
    {
      v33 = *(_QWORD *)(v1 + 192);
      if (v33)
      {
        if ((*(_BYTE *)(v33 + 20) & 1) != 0)
        {
          v34 = *(_QWORD *)(v33 + 8);
          if ((_UNKNOWN *)v34 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          {
            if (*(char *)(v34 + 23) < 0)
            {
              **(_BYTE **)v34 = 0;
              *(_QWORD *)(v34 + 8) = 0;
            }
            else
            {
              *(_BYTE *)v34 = 0;
              *(_BYTE *)(v34 + 23) = 0;
            }
          }
        }
        *(_DWORD *)(v33 + 20) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x2000000) != 0)
    {
      v35 = *(_QWORD *)(v1 + 200);
      if (v35)
      {
        if ((*(_BYTE *)(v35 + 20) & 1) != 0)
        {
          v36 = *(_QWORD *)(v35 + 8);
          if ((_UNKNOWN *)v36 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          {
            if (*(char *)(v36 + 23) < 0)
            {
              **(_BYTE **)v36 = 0;
              *(_QWORD *)(v36 + 8) = 0;
            }
            else
            {
              *(_BYTE *)v36 = 0;
              *(_BYTE *)(v36 + 23) = 0;
            }
          }
        }
        *(_DWORD *)(v35 + 20) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x4000000) != 0)
    {
      this = *(_QWORD *)(v1 + 208);
      if (this)
      {
        this = sub_1000B30B4(this);
        v3 = *v2;
      }
    }
    if ((v3 & 0x8000000) != 0)
    {
      v37 = *(_QWORD *)(v1 + 216);
      if (v37)
      {
        if (*(_BYTE *)(v37 + 24))
        {
          *(_DWORD *)(v37 + 15) = 0;
          *(_QWORD *)(v37 + 8) = 0;
        }
        *(_DWORD *)(v37 + 24) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x10000000) != 0)
    {
      v38 = *(_QWORD *)(v1 + 224);
      if (v38)
      {
        if (*(_BYTE *)(v38 + 16))
          *(_DWORD *)(v38 + 8) = 0;
        *(_DWORD *)(v38 + 16) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x20000000) != 0)
    {
      v39 = *(_QWORD *)(v1 + 232);
      if (v39)
      {
        if (*(_BYTE *)(v39 + 24))
        {
          *(_QWORD *)(v39 + 8) = 0;
          *(_DWORD *)(v39 + 16) = 0;
        }
        *(_DWORD *)(v39 + 24) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x40000000) != 0)
    {
      v40 = *(_QWORD *)(v1 + 240);
      if (v40)
      {
        if (*(_BYTE *)(v40 + 16))
          *(_WORD *)(v40 + 8) = 0;
        *(_DWORD *)(v40 + 16) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x80000000) != 0)
    {
      this = *(_QWORD *)(v1 + 248);
      if (this)
        this = proto::gnss::Emergency::EmergConfig::Clear(this);
    }
  }
  v41 = *(_DWORD *)(v1 + 392);
  if ((_BYTE)v41)
  {
    if ((v41 & 1) != 0)
    {
      v42 = *(_QWORD *)(v1 + 256);
      if (v42)
      {
        v43 = *(_DWORD *)(v42 + 80);
        if ((_BYTE)v43)
        {
          *(_OWORD *)(v42 + 24) = 0u;
          *(_OWORD *)(v42 + 8) = 0u;
        }
        if ((v43 & 0xFF00) != 0)
        {
          *(_OWORD *)(v42 + 56) = 0u;
          *(_OWORD *)(v42 + 40) = 0u;
        }
        if ((v43 & 0xFF0000) != 0)
          *(_DWORD *)(v42 + 72) = 0;
        *(_DWORD *)(v42 + 80) = 0;
        v41 = *(_DWORD *)(v1 + 392);
      }
    }
    *(_DWORD *)(v1 + 296) = 0;
    if ((v41 & 4) != 0)
    {
      this = *(_QWORD *)(v1 + 264);
      if (this)
      {
        this = proto::gnss::Emergency::GpsReferenceTime::Clear(this);
        v41 = *(_DWORD *)(v1 + 392);
      }
    }
    if ((v41 & 8) != 0)
    {
      v44 = *(_QWORD *)(v1 + 272);
      if (v44)
      {
        v45 = *(_DWORD *)(v44 + 68);
        if ((_BYTE)v45)
        {
          *(_OWORD *)(v44 + 24) = 0u;
          *(_OWORD *)(v44 + 8) = 0u;
        }
        if ((v45 & 0xFF00) != 0)
        {
          *(_QWORD *)(v44 + 40) = 0;
          *(_QWORD *)(v44 + 48) = 0;
          *(_QWORD *)(v44 + 56) = 0;
        }
        *(_DWORD *)(v44 + 68) = 0;
        v41 = *(_DWORD *)(v1 + 392);
      }
    }
    if ((v41 & 0x10) != 0)
    {
      this = *(_QWORD *)(v1 + 280);
      if (this)
      {
        this = proto::gnss::Emergency::GpsNavigationModel::Clear(this);
        v41 = *(_DWORD *)(v1 + 392);
      }
    }
    if ((v41 & 0x20) != 0)
    {
      this = *(_QWORD *)(v1 + 288);
      if (this)
      {
        this = proto::gnss::Emergency::GpsAcqAssistance::Clear(this);
        v41 = *(_DWORD *)(v1 + 392);
      }
    }
    if ((v41 & 0x40) != 0)
    {
      this = *(_QWORD *)(v1 + 304);
      if (this)
      {
        this = proto::gnss::Emergency::CellFTAssistance::Clear(this);
        v41 = *(_DWORD *)(v1 + 392);
      }
    }
    if ((v41 & 0x80) != 0)
    {
      this = *(_QWORD *)(v1 + 312);
      if (this)
      {
        this = proto::gnss::Emergency::CplaneContext::Clear(this);
        v41 = *(_DWORD *)(v1 + 392);
      }
    }
  }
  if ((v41 & 0x1FE00) != 0)
  {
    if ((v41 & 0x200) != 0)
    {
      this = *(_QWORD *)(v1 + 336);
      if (this)
      {
        this = proto::gnss::Emergency::LocationId::Clear(this);
        v41 = *(_DWORD *)(v1 + 392);
      }
    }
    *(_DWORD *)(v1 + 300) = 0;
    *(_BYTE *)(v1 + 360) = 0;
    *(_DWORD *)(v1 + 364) = 0;
    if ((v41 & 0x4000) != 0)
    {
      this = *(_QWORD *)(v1 + 368);
      if (this)
      {
        this = proto::gnss::Emergency::SuplContext::Clear(this);
        v41 = *(_DWORD *)(v1 + 392);
      }
    }
    if ((v41 & 0x8000) != 0)
    {
      this = *(_QWORD *)(v1 + 376);
      if (this)
        this = proto::gnss::Emergency::WlanMeasurementList::Clear(this);
    }
  }
  *(_DWORD *)(v1 + 328) = 0;
  *(_DWORD *)(v1 + 352) = 0;
  *(_QWORD *)v2 = 0;
  return this;
}

uint64_t GnssHal::PlatformLog::getPrimaryPathLogLevel(GnssHal::PlatformLog *this)
{
  return *((unsigned int *)this + 2);
}

id GpsdPreferences::debugFeaturesBitmask(id *this)
{
  id v1;
  NSObject *v2;
  int v4;
  id v5;

  v1 = objc_msgSend(*this, "integerForKey:", CFSTR("DebugFeaturesBitmask"));
  v2 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 134217984;
    v5 = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "debugFeaturesBitmask,0x%llx", (uint8_t *)&v4, 0xCu);
  }
  return v1;
}

void sub_100024120(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v1 + 56))
  {
    *(_BYTE *)(v1 + 56) = 0;
    dispatch_suspend(*(dispatch_object_t *)(v1 + 40));
  }
}

void sub_10002413C(uint64_t a1, unsigned int a2, void **a3)
{
  VendorLogger::log(*(_QWORD *)(a1 + 24), a2, a3);
}

NSDictionary *sub_100024144(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[3];
  _QWORD v4[3];

  v1 = *(_QWORD *)(a1 + 32);
  v3[0] = CFSTR("deviceAgeInWeeks");
  v4[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 40));
  v3[1] = CFSTR("offsetPpb");
  v4[1] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v1 + 160));
  v3[2] = CFSTR("offsetPpbUnc");
  v4[2] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v1 + 168));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 3);
}

id GpsdPreferences::externalToChipL5GroupDelayMeters(id *this)
{
  return objc_msgSend(*this, "doubleForKey:", CFSTR("ExternalToChipL5GroupDelayMeters"));
}

double GnssHal::ExtensionsFireImpl::getGpsCrossCorrelationMinThreshold_dBHz(GnssHal::ExtensionsFireImpl *this)
{
  GpsdPlatformInfo *v1;
  double GpsCrossCorrelationMinThreshold_dBHz;
  NSObject *v3;
  int v5;
  double v6;

  v1 = (GpsdPlatformInfo *)GpsdPlatformInfo::instance(0);
  GpsCrossCorrelationMinThreshold_dBHz = GpsdPlatformInfo::getGpsCrossCorrelationMinThreshold_dBHz(v1);
  v3 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
  {
    v5 = 134217984;
    v6 = GpsCrossCorrelationMinThreshold_dBHz;
    _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "HalExtensions,getGpsCrossCorrelationMinThreshold_dBHz,%f", (uint8_t *)&v5, 0xCu);
  }
  return GpsCrossCorrelationMinThreshold_dBHz;
}

double GnssHal::ExtensionsFireImpl::getGpsCrossCorrelationMaxThreshold_dBHz(GnssHal::ExtensionsFireImpl *this)
{
  NSObject *v1;
  int v3;
  uint64_t v4;

  GpsdPlatformInfo::instance(0);
  v1 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
  {
    v3 = 134217984;
    v4 = 0x4042000000000000;
    _os_log_debug_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "HalExtensions,getGpsCrossCorrelationMaxThreshold_dBHz,%f", (uint8_t *)&v3, 0xCu);
  }
  return 36.0;
}

void GnssHal::ExtensionsFireImpl::glonassPerFrequencyGroupDelayMeters(char **a1@<X8>)
{
  id *v3;

  v3 = (id *)GpsdPreferences::instance(0);
  GpsdPreferences::glonassPerFrequencyGroupDelayMeters(v3, a1);
}

char *GnssHal::ExtensionsFireImpl::getGpsWeekFromBuildDate(GnssHal::ExtensionsFireImpl *this)
{
  if (*((_BYTE *)this + 296))
    return (char *)2049;
  else
    return gpsd::util::getGpsWeekFromBuildDate(this);
}

CFAbsoluteTime sub_1000243BC(uint64_t a1, _BYTE *a2)
{
  if (*(_BYTE *)(a1 + 2224))
  {
    *a2 = 1;
    return (double)(gpsd::util::getMachContinuousTimeNs((gpsd::util *)a1)
                  - *(_QWORD *)(a1 + 2208)
                  + *(_QWORD *)(a1 + 2216))
         * 0.000000001;
  }
  else
  {
    *a2 = 0;
    return CFAbsoluteTimeGetCurrent() + -5.0 + 662342413.0;
  }
}

double GpsdPlatformInfo::getGpsCrossCorrelationMinThreshold_dBHz(GpsdPlatformInfo *this)
{
  double v2;
  NSObject *v3;
  int v5;
  _DWORD v6[2];

  if (qword_1001007E8 != -1)
    dispatch_once(&qword_1001007E8, &stru_1000FB410);
  v2 = 24.0;
  if ((byte_1001007E0 & 1) == 0)
  {
    v3 = qword_100100838;
    v2 = -1.0;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_DWORD *)this;
      v6[0] = 67240192;
      v6[1] = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "HalExtensions,Unexpected hardware,%{public}d", (uint8_t *)v6, 8u);
    }
  }
  return v2;
}

id GpsdPreferences::performanceReportIntervalSeconds(id *this)
{
  return objc_msgSend(*this, "integerForKey:", CFSTR("PerformanceReportIntervalSeconds"));
}

id GpsdPreferences::forceFireExtensionsPlatform(id *this)
{
  return objc_msgSend(*this, "integerForKey:", CFSTR("ForceFireExtensionsPlatform"));
}

id GpsdPreferences::getPvtmTimeOut(id *this)
{
  id v1;
  NSObject *v2;
  _DWORD v4[2];

  v1 = objc_msgSend(*this, "integerForKey:", CFSTR("PvtmTimeOut"));
  v2 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
  {
    v4[0] = 67109120;
    v4[1] = (_DWORD)v1;
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Pref: kPvtmTimeOut = %d", (uint8_t *)v4, 8u);
  }
  return v1;
}

id GpsdPreferences::bigPowerSwitch(id *this)
{
  return objc_msgSend(*this, "BOOLForKey:", CFSTR("BigPowerSwitch"));
}

void sub_10002461C(_BYTE *a1)
{
  NSObject *v2;
  uint8_t v3[16];

  if (((*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 32))(a1) & 1) != 0)
  {
    sub_100007F38((uint64_t)a1, 0);
    a1[42] = 0;
  }
  else
  {
    v2 = qword_100100830;
    if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#spi,close,notOpen", v3, 2u);
    }
  }
}

void sub_1000246A4(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  if ((sub_10000674C(a1, 0) & 1) == 0)
  {
    v1 = qword_100100830;
    if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v2 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "NvStore,flush,writeCacheToDisk failed", v2, 2u);
    }
  }
}

uint64_t sub_100024710(unsigned int *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unsigned int *v5;
  unsigned int *v6;
  char *v7;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v9;
  unint64_t v10;
  char *v11;
  char *v12;
  _BYTE *v13;
  unsigned __int8 *v14;
  uint64_t result;

  v5 = a1 + 2;
  v6 = a1 + 3;
  while (1)
  {
    while (1)
    {
      v7 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v7 >= *((_QWORD *)this + 2) || *v7 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v7 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v9 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_16;
      v12 = (char *)*((_QWORD *)this + 1);
      v10 = *((_QWORD *)this + 2);
      if ((unint64_t)v12 >= v10 || *v12 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
        if (!(_DWORD)result)
          return result;
        v13 = (_BYTE *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
      }
      else
      {
        *v5 = *v12;
        v13 = v12 + 1;
        *((_QWORD *)this + 1) = v13;
      }
      a1[5] |= 1u;
      if ((unint64_t)v13 < v10 && *v13 == 16)
      {
        v11 = v13 + 1;
        *((_QWORD *)this + 1) = v11;
LABEL_24:
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v6);
          if (!(_DWORD)result)
            return result;
          v14 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
        }
        else
        {
          *v6 = *v11;
          v14 = (unsigned __int8 *)(v11 + 1);
          *((_QWORD *)this + 1) = v14;
        }
        a1[5] |= 2u;
        if (v14 == (unsigned __int8 *)v10
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      v9 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v11 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        goto LABEL_24;
      }
    }
    else
    {
      v9 = TagFallback & 7;
    }
LABEL_16:
    if (v9 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_1000248AC(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  char *v7;
  unsigned int v8;
  uint64_t result;
  unsigned int v11;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v5 + 1;
      }
      if ((_DWORD)TagFallback != 8)
        break;
      v11 = 0;
      v7 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v7 >= *((_QWORD *)this + 2) || *v7 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v11);
        if (!(_DWORD)result)
          return result;
        v8 = v11;
      }
      else
      {
        v8 = *v7;
        *((_QWORD *)this + 1) = v7 + 1;
      }
      if (v8 < 7 || v8 == 15)
      {
        *(_DWORD *)(a1 + 16) |= 1u;
        *(_DWORD *)(a1 + 8) = v8;
      }
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
  return 1;
}

void proto::gpsd::InjectRtiFile::~InjectRtiFile(proto::gpsd::InjectRtiFile *this)
{
  *(_QWORD *)this = off_1000F9D30;
  sub_100059B48(*((_QWORD *)this + 1));
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

{
  *(_QWORD *)this = off_1000F9D30;
  sub_100059B48(*((_QWORD *)this + 1));
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

uint64_t proto::gpsd::StartContext::MergePartialFromCodedStream(proto::gpsd::StartContext *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unint64_t *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  unint64_t v9;
  char *v10;
  unsigned int v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  char *v15;
  unsigned int v16;
  _BYTE *v17;
  unsigned int v18;
  _BYTE *v19;
  unsigned __int8 *v20;
  uint64_t result;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;

  v5 = (unint64_t *)((char *)this + 8);
  while (2)
  {
    v6 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v6 >= *((_QWORD *)a2 + 2) || *v6 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      *((_QWORD *)a2 + 1) = v6 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v24 = 0;
        v10 = (char *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v10 < v9 && (*v10 & 0x80000000) == 0)
        {
          v11 = *v10;
          v12 = v10 + 1;
          *((_QWORD *)a2 + 1) = v12;
LABEL_24:
          *((_BYTE *)this + 16) = v11 != 0;
          *((_DWORD *)this + 6) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            v13 = v12 + 1;
            *((_QWORD *)a2 + 1) = v13;
            goto LABEL_27;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v24);
        if ((_DWORD)result)
        {
          v11 = v24;
          v12 = (_BYTE *)*((_QWORD *)a2 + 1);
          v9 = *((_QWORD *)a2 + 2);
          goto LABEL_24;
        }
        break;
      case 2u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v13 = (char *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
LABEL_27:
        v23 = 0;
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v23);
          if (!(_DWORD)result)
            return result;
          v16 = v23;
          v17 = (_BYTE *)*((_QWORD *)a2 + 1);
          v9 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v16 = *v13;
          v17 = v13 + 1;
          *((_QWORD *)a2 + 1) = v17;
        }
        *((_BYTE *)this + 17) = v16 != 0;
        *((_DWORD *)this + 6) |= 2u;
        if ((unint64_t)v17 >= v9 || *v17 != 24)
          continue;
        v14 = v17 + 1;
        *((_QWORD *)a2 + 1) = v14;
LABEL_35:
        v22 = 0;
        if ((unint64_t)v14 >= v9 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v22);
          if (!(_DWORD)result)
            return result;
          v18 = v22;
          v19 = (_BYTE *)*((_QWORD *)a2 + 1);
          v9 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v18 = *v14;
          v19 = v14 + 1;
          *((_QWORD *)a2 + 1) = v19;
        }
        *((_BYTE *)this + 18) = v18 != 0;
        *((_DWORD *)this + 6) |= 4u;
        if ((unint64_t)v19 >= v9 || *v19 != 32)
          continue;
        v15 = v19 + 1;
        *((_QWORD *)a2 + 1) = v15;
LABEL_43:
        if ((unint64_t)v15 >= v9 || *v15 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v20 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v9 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v5 = *v15;
          v20 = (unsigned __int8 *)(v15 + 1);
          *((_QWORD *)a2 + 1) = v20;
        }
        *((_DWORD *)this + 6) |= 8u;
        if (v20 != (unsigned __int8 *)v9 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
          continue;
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      case 3u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v14 = (char *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
        goto LABEL_35;
      case 4u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v15 = (char *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
        goto LABEL_43;
      default:
        v8 = TagFallback & 7;
LABEL_18:
        if (v8 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

BOOL gpsd::util::getCurrentMachContinuousMinusMachAbsoluteNanoseconds(gpsd::util *this, unint64_t *a2)
{
  _BOOL8 CurrentMachContinuousMinusMachAbsoluteTicks;
  gpsd::util *v5;

  v5 = 0;
  CurrentMachContinuousMinusMachAbsoluteTicks = gpsd::util::getCurrentMachContinuousMinusMachAbsoluteTicks((gpsd::util *)&v5, a2);
  if (CurrentMachContinuousMinusMachAbsoluteTicks)
    *(_QWORD *)this = gpsd::util::convertMachTimeInTicksToNs((unint64_t)v5);
  return CurrentMachContinuousMinusMachAbsoluteTicks;
}

char *gpsd::util::getGpsWeekFromBuildDate(gpsd::util *this)
{
  char *result;
  time_t v2;
  double v3;
  tm v4;

  result = (char *)dword_100100A70;
  if (dword_100100A70 <= 0)
  {
    memset(&v4, 0, sizeof(v4));
    result = strptime("Aug  3 2024 08:01:50", "%b %d %Y %H:%M:%S", &v4);
    if (result)
    {
      v2 = mktime(&v4);
      if (v2 < 0)
      {
        return 0;
      }
      else
      {
        v3 = ((double)v2 + -315964800.0 + -259200.0) / 604800.0;
        result = (char *)(int)v3;
        dword_100100A70 = (int)v3;
      }
    }
  }
  return result;
}

uint64_t gnss::Convert::fromProtobuf(unsigned int a1)
{
  if (a1 > 0xF)
    return 0;
  else
    return dword_1000D336C[a1];
}

void sub_100024E30(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  NSObject *v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  double v20;
  unsigned __int8 v21;
  _BYTE *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  const std::locale::facet *v33;
  uint64_t v34;
  id *v35;
  void *__p[2];
  _QWORD v37[7];
  _BYTE buf[22];
  __int16 v39;
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  double v44;

  if (!*(_BYTE *)(a1 + 144))
  {
    if (*(_BYTE *)(a1 + 110))
    {
      v3 = *(_QWORD *)(a1 + 120);
      if (v3)
      {
        v5 = a2[1];
        v6 = v5;
        if (!v5)
          v6 = *(_QWORD *)(proto::gnss::TimeTransferDataExtend::default_instance_ + 8);
        v7 = *(_QWORD *)(v6 + 8);
        if (!v7)
          v7 = *(_QWORD *)(proto::gnss::TimeTransferData::default_instance_ + 8);
        if (*(float *)(v7 + 16) <= 10000.0)
        {
          v8 = a2[4] + a2[5];
          v9 = *(_QWORD *)(a1 + 112);
          if (!v5)
            v5 = *(_QWORD *)(proto::gnss::TimeTransferDataExtend::default_instance_ + 8);
          v10 = v3 - v9;
          v11 = *(_QWORD *)(v5 + 8);
          if (!v11)
            v11 = *(_QWORD *)(proto::gnss::TimeTransferData::default_instance_ + 8);
          v12 = (double)(v8 - v9) * 0.000000001;
          v13 = ((double)(*(_QWORD *)(v11 + 8) - v8) - (double)v10) * 0.000001;
          *(double *)(a1 + 136) = v13;
          *(_BYTE *)(a1 + 144) = 1;
          v14 = *(double *)(a1 + 808);
          if (v14 <= 0.0)
            v15 = -1.0;
          else
            v15 = -(v14 - (double)v8 * 0.000000001);
          v16 = qword_100100838;
          if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
          {
            v17 = a2[1];
            if (!v17)
              v17 = *(_QWORD *)(proto::gnss::TimeTransferDataExtend::default_instance_ + 8);
            v18 = *(float *)(a1 + 128);
            v19 = *(_QWORD *)(v17 + 8);
            if (!v19)
              v19 = *(_QWORD *)(proto::gnss::TimeTransferData::default_instance_ + 8);
            v20 = *(float *)(v19 + 16) * 0.000001;
            *(_DWORD *)buf = 134350080;
            *(double *)&buf[4] = v13;
            *(_WORD *)&buf[12] = 2050;
            *(double *)&buf[14] = v12;
            v39 = 2050;
            v40 = v18;
            v41 = 2050;
            v42 = v20;
            v43 = 2050;
            v44 = v15;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "PerfTimeAssist,measuredErrorMs,%{public}.3f,assistAgeSec,%{public}.3f,assistUncMs,%{public}.3f,gpsUncMs,%{public}.3f,timeBetweenGnssSessions,%{public}f", buf, 0x34u);
          }
          v37[0] = _NSConcreteStackBlock;
          v37[1] = 3221225472;
          v37[2] = sub_100025E4C;
          v37[3] = &unk_1000F0DB0;
          v37[4] = a1;
          *(double *)&v37[5] = v12;
          *(double *)&v37[6] = v15;
          AnalyticsSendEventLazy(CFSTR("com.apple.gpsd.time_assistance_accuracy"), v37);
          v21 = atomic_load((unsigned __int8 *)&qword_1001001C8);
          if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_1001001C8))
          {
            v35 = (id *)GpsdPreferences::instance(0);
            byte_1001001B8 = GpsdPreferences::genericTestCase(v35) == 116;
            __cxa_guard_release(&qword_1001001C8);
          }
          if (byte_1001001B8)
          {
            VendorLogger::isoTimestampString(buf);
            if (!qword_1001001D0)
              operator new();
            if (v39 >= 0)
              v22 = buf;
            else
              v22 = *(_BYTE **)buf;
            if (v39 >= 0)
              v23 = HIBYTE(v39);
            else
              v23 = *(_QWORD *)&buf[8];
            v24 = sub_100026C60((_QWORD *)qword_1001001D0, (uint64_t)v22, v23);
            v25 = sub_100026C60(v24, (uint64_t)",assistMeasuredErrorMs,", 23);
            v26 = *v25;
            *(uint64_t *)((char *)v25 + *(_QWORD *)(*v25 - 24) + 16) = 3;
            *(_DWORD *)((char *)v25 + *(_QWORD *)(v26 - 24) + 8) = *(_DWORD *)((_BYTE *)v25 + *(_QWORD *)(v26 - 24) + 8) & 0xFFFFFEFB | 4;
            if (!*(_BYTE *)(a1 + 144))
              sub_1000267AC();
            v27 = (uint64_t *)std::ostream::operator<<(*(double *)(a1 + 136));
            v28 = *v27;
            *(uint64_t *)((char *)v27 + *(_QWORD *)(*v27 - 24) + 16) = 1;
            *(_DWORD *)((char *)v27 + *(_QWORD *)(v28 - 24) + 8) = *(_DWORD *)((_BYTE *)v27 + *(_QWORD *)(v28 - 24) + 8) & 0xFFFFFEFB | 4;
            sub_100026C60(v27, (uint64_t)",assistAgeSec,", 14);
            v29 = (_QWORD *)std::ostream::operator<<(v12);
            v30 = sub_100026C60(v29, (uint64_t)",assistUncMs,", 13);
            v31 = (_QWORD *)std::ostream::operator<<(v30, *(float *)(a1 + 128));
            sub_100026C60(v31, (uint64_t)",timeBetweenGnssSessionsSec,", 28);
            v32 = (_QWORD *)std::ostream::operator<<(v15);
            std::ios_base::getloc((const std::ios_base *)((char *)v32 + *(_QWORD *)(*v32 - 24)));
            v33 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
            v34 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10);
            std::locale::~locale((std::locale *)__p);
            std::ostream::put(v32, v34);
            std::ostream::flush(v32);
            std::ostream::flush(v32);
            if (SHIBYTE(v39) < 0)
              operator delete(*(void **)buf);
          }
        }
      }
    }
  }
}

void sub_1000252E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  __cxa_guard_abort(&qword_1001001C8);
  _Unwind_Resume(a1);
}

_QWORD *sub_100025380(uint64_t a1, unsigned int a2, char a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _BYTE v11[24];
  _BYTE *v12;

  if ((a3 & 1) != 0)
  {
    v7 = *(_QWORD *)(a1 + 8);
    v8 = gnss::Convert::fromProtobuf(a2);
    sub_100031BDC((uint64_t)v11, a4);
    (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v7 + 176))(v7, v8, v11);
    result = v12;
    if (v12 == v11)
    {
      v9 = 4;
      result = v11;
    }
    else
    {
      if (!v12)
        return result;
      v9 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
  }
  else
  {
    v10 = 4;
    v5 = *(_QWORD *)(a4 + 24);
    if (!v5)
      sub_100025CE8();
    return (_QWORD *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v5 + 48))(v5, &v10);
  }
}

void sub_100025468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1000254A8(compression_stream *a1)
{
  NSObject *v1;
  uint8_t v2[16];

  if (compression_stream_destroy(a1))
  {
    v1 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v2 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#ee,#decompress,failed to destroy stream", v2, 2u);
    }
  }
}

void VendorLogger::notifyStart(VendorLogger *this)
{
  NSObject *v2;
  _QWORD block[5];

  v2 = *((_QWORD *)this + 110);
  if (v2)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100053D38;
    block[3] = &unk_1000F0D30;
    block[4] = this;
    dispatch_async(v2, block);
  }
}

uint64_t ProtobufUtil::toProtobuf(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;

  v2 = *(_DWORD *)(a2 + 36);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(result + 24);
  if ((*(_BYTE *)result - 1) > 3u)
    v3 = 1;
  else
    v3 = dword_1000D3520[(char)(*(_BYTE *)result - 1)];
  *(_DWORD *)(a2 + 36) = v2 | 0xF;
  *(_DWORD *)(a2 + 28) = v3;
  return result;
}

void ProtobufUtil::toProtobuf(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  int v10;

  *(_DWORD *)(a5 + 52) |= 1u;
  v9 = *(_QWORD *)(a5 + 8);
  if (!v9)
    operator new();
  ProtobufUtil::toProtobuf(a1, v9);
  v10 = *(_DWORD *)(a5 + 52);
  *(_QWORD *)(a5 + 16) = a2;
  *(_QWORD *)(a5 + 24) = a3;
  *(_DWORD *)(a5 + 52) = v10 | 0x16;
  *(_QWORD *)(a5 + 40) = a4;
}

__n128 ProtobufUtil::toProtobuf(__n128 *a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned __int8 v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  unsigned __int32 v10;
  unsigned int v11;
  __n128 result;

  v3 = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a2 + 16) = a1->n128_u8[0];
  *(_DWORD *)(a2 + 48) = v3 | 3;
  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
    operator new();
  v5 = *(_DWORD *)(v4 + 72);
  *(_QWORD *)(v4 + 8) = a1->n128_u64[1];
  *(_DWORD *)(v4 + 16) = a1[1].n128_u32[0];
  v6 = a1[1].n128_u8[4];
  *(_DWORD *)(v4 + 72) = v5 | 7;
  *(_BYTE *)(v4 + 20) = v6;
  *(_DWORD *)(v4 + 64) = a1[1].n128_u32[2];
  v7 = a1[2].n128_u64[0];
  *(_DWORD *)(v4 + 72) = v5 | 0x1F;
  *(_QWORD *)(v4 + 24) = v7;
  v8 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = v8 | 4;
  v9 = a1[3].n128_u32[2];
  v10 = a1[3].n128_u32[3];
  if (v9 < 6)
    v11 = v9 + 1;
  else
    v11 = 0;
  *(_DWORD *)(a2 + 20) = v11;
  *(_DWORD *)(a2 + 40) = v10;
  *(_DWORD *)(a2 + 48) = v8 | 0x3C;
  result = a1[4];
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void sub_100025760(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)a1;
  if (v2)
  {
    dispatch_source_cancel(v2);

    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 152) = 0xBFF0000000000000;
}

void sub_10002579C(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void sub_1000257AC(dispatch_object_t *a1)
{
  NSObject *global_queue;
  dispatch_source_t v3;
  NSObject *v4;
  NSObject *v5;
  dispatch_time_t v6;
  NSObject *v7;
  _QWORD handler[5];
  uint8_t buf[16];

  if (!*a1)
  {
    global_queue = dispatch_get_global_queue(0, 0);
    v3 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, global_queue);
    *a1 = v3;
    if (v3)
    {
      v4 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "GpsdResourceWatcher, created timer", buf, 2u);
      }
      sub_1000258C4((uint64_t)a1);
      v5 = *a1;
      v6 = dispatch_walltime(0, 0);
      dispatch_source_set_timer(v5, v6, 0x2540BE400uLL, 0x1DCD6500uLL);
      v7 = *a1;
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472;
      handler[2] = sub_100025B50;
      handler[3] = &unk_1000F0D30;
      handler[4] = a1;
      dispatch_source_set_event_handler(v7, handler);
      dispatch_resume(*a1);
    }
  }
}

void sub_1000258C4(uint64_t a1)
{
  unint64_t MachContinuousTimeNs;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  double v6;
  double v7;
  double v8;
  NSObject *v9;
  __int128 v10;
  __int128 v11;
  timeval ru_utime;
  __int128 v13;
  double v14;
  double v15;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[4];
  unint64_t v18;
  unint64_t v19;
  rusage v20;
  uint8_t buf[4];
  double v22;
  __int16 v23;
  double v24;
  __int16 v25;
  double v26;
  __int16 v27;
  double v28;
  __int16 v29;
  double v30;

  MachContinuousTimeNs = gpsd::util::getMachContinuousTimeNs((gpsd::util *)a1);
  if (getrusage(0, &v20) < 0)
  {
    v3 = qword_100100838;
    if (!os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
      return;
    LOWORD(task_info_out[0]) = 0;
    v4 = "Resource,getrusage error";
    v5 = (uint8_t *)task_info_out;
    goto LABEL_7;
  }
  task_info_outCnt = 93;
  if (task_info(mach_task_self_, 0x16u, task_info_out, &task_info_outCnt))
  {
    v3 = qword_100100838;
    if (!os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
      return;
    *(_WORD *)buf = 0;
    v4 = "Resource,task_info error";
    v5 = buf;
LABEL_7:
    _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, v4, v5, 2u);
    return;
  }
  v6 = (double)MachContinuousTimeNs * 0.000000001;
  v7 = *(double *)(a1 + 152);
  if (v7 != -1.0)
  {
    v8 = v6 - v7;
    if (v6 - v7 > 0.1)
    {
      v9 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
      {
        v14 = ((double)(v20.ru_stime.tv_sec - *(_QWORD *)(a1 + 24))
             + (double)(v20.ru_stime.tv_usec - *(_DWORD *)(a1 + 32)) * 0.000001)
            * 100.0;
        v15 = ((double)(v20.ru_utime.tv_sec - *(_QWORD *)(a1 + 8))
             + (double)(v20.ru_utime.tv_usec - *(_DWORD *)(a1 + 16)) * 0.000001)
            * 100.0;
        *(_DWORD *)buf = 134219008;
        v22 = v15 / v8;
        v23 = 2048;
        v24 = v14 / v8;
        v25 = 2048;
        v26 = (double)v18 * 0.000000953674316;
        v27 = 2048;
        v28 = (double)v19 * 0.000000953674316;
        v29 = 2048;
        v30 = v8;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Resource,user,%.2f,sys,%.2f,residentMB,%.3f,footprintMB,%.3f,interval,%.2f", buf, 0x34u);
      }
    }
  }
  *(double *)(a1 + 152) = v6;
  v10 = *(_OWORD *)&v20.ru_minflt;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)&v20.ru_nswap;
  v11 = *(_OWORD *)&v20.ru_msgrcv;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)&v20.ru_oublock;
  *(_OWORD *)(a1 + 120) = v11;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)&v20.ru_nvcsw;
  ru_utime = v20.ru_utime;
  *(timeval *)(a1 + 24) = v20.ru_stime;
  v13 = *(_OWORD *)&v20.ru_idrss;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)&v20.ru_maxrss;
  *(_OWORD *)(a1 + 56) = v13;
  *(_OWORD *)(a1 + 72) = v10;
  *(timeval *)(a1 + 8) = ru_utime;
}

void sub_100025B50(uint64_t a1)
{
  sub_1000258C4(*(_QWORD *)(a1 + 32));
}

_QWORD *sub_100025B58(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_100025C08();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void sub_100025C08()
{
  sub_100025C1C("basic_string");
}

void sub_100025C1C(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_100025C6C(exception, a1);
}

void sub_100025C58(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_100025C6C(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  return result;
}

uint64_t sub_100025C90(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_100025CE8()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = &off_1000F0D78;
}

void sub_100025D20(std::exception *a1)
{
  std::exception::~exception(a1);
  operator delete();
}

void sub_100025D44(uint64_t a1)
{
  std::mutex *v1;

  v1 = *(std::mutex **)(a1 + 32);
  std::mutex::lock(v1 + 13);
  sub_1000045E0((uint64_t)v1);
  std::mutex::unlock(v1 + 13);
}

void sub_100025D78(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100025D8C(uint64_t a1)
{
  uint64_t i;
  void *v3;

  for (i = 0; i != -168; i -= 24)
  {
    v3 = *(void **)(a1 + i + 144);
    if (v3)
    {
      *(_QWORD *)(a1 + i + 152) = v3;
      operator delete(v3);
    }
  }
  return a1;
}

BOOL sub_100025DD0(uint64_t a1)
{
  float v2;

  v2 = *(float *)(a1 + 8);
  if (v2 >= 1.0e11)
  {
    if (v2 <= 0.0)
      return 0;
  }
  else if (v2 <= 0.0 || *(_QWORD *)a1 == 0)
  {
    return 0;
  }
  if (*(_QWORD *)(a1 + 24) != -1 && sub_100022E5C((double *)(a1 + 48)))
    return sub_1000267E0(a1 + 136);
  return 0;
}

NSDictionary *sub_100025E4C(uint64_t a1)
{
  uint64_t v2;
  double v3;
  _QWORD v5[4];
  _QWORD v6[4];

  v2 = *(_QWORD *)(a1 + 32);
  v5[0] = CFSTR("assistAgeSec");
  v6[0] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 40));
  v5[1] = CFSTR("assistMeasuredErrorMs");
  if (!*(_BYTE *)(v2 + 144))
    sub_1000267AC();
  v6[1] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v2 + 136));
  v5[2] = CFSTR("assistUncertaintyMs");
  LODWORD(v3) = *(_DWORD *)(v2 + 128);
  v6[2] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v3);
  v5[3] = CFSTR("timeBetweenGnssSessionsSec");
  v6[3] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 48));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v6, v5, 4);
}

void (__cdecl ***sub_100025F40(void (__cdecl ***a1)(std::ofstream *__hidden this), uint64_t *a2, int a3))(std::ofstream *__hidden this)
{
  _QWORD *v6;
  void (__cdecl **v7)(std::ofstream *__hidden);
  void (__cdecl **v8)(std::ofstream *__hidden);
  std::ios_base *v9;
  uint64_t *v10;

  v6 = a1 + 1;
  *a1 = v7;
  *(_QWORD *)((char *)*(v7 - 3) + (_QWORD)a1) = v8;
  v9 = (std::ios_base *)((char *)*(*a1 - 3) + (_QWORD)a1);
  std::ios_base::init(v9, a1 + 1);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf(v6);
  if (*((char *)a2 + 23) >= 0)
    v10 = a2;
  else
    v10 = (uint64_t *)*a2;
  if (!std::filebuf::open(v6, v10, a3 | 0x10u))
    std::ios_base::clear((std::ios_base *)((char *)*(*a1 - 3) + (_QWORD)a1), *(_DWORD *)((char *)*(*a1 - 3) + (_QWORD)a1 + 32) | 4);
  return a1;
}

void sub_10002601C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::ostream::~ostream(v1, v2 + 8);
  std::ios::~ios(v1 + 416);
  _Unwind_Resume(a1);
}

uint64_t sub_100026054(uint64_t a1, uint64_t a2)
{
  float v3;
  double v4;
  float v5;
  int v6;
  NSObject *v7;
  _QWORD v9[5];
  float v10;
  float v11;
  int v12;
  uint8_t buf[4];
  double v14;
  __int16 v15;
  double v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;

  v3 = *(double *)a2 - *(double *)(a2 + 8);
  v4 = *(double *)(a2 + 16);
  v5 = -1.0;
  if (v4 > 0.0)
    v5 = fabsf(v3) / v4;
  v6 = *(_DWORD *)(a2 + 24);
  v7 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134349824;
    v14 = v3;
    v15 = 2050;
    v16 = v4;
    v17 = 1026;
    v18 = v6;
    v19 = 1026;
    v20 = (v6 + 30) / 60;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Analytics,RxClockFreq,measuredErrorPpb,%{public}.3f,unc,%{public}.2f,ageSec,%{public}d,ageMin,%{public}d", buf, 0x22u);
  }
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000261C4;
  v9[3] = &unk_1000F0DD0;
  v10 = v3;
  v11 = v5;
  v9[4] = a2;
  v12 = (v6 + 30) / 60;
  return AnalyticsSendEventLazy(CFSTR("com.apple.gpsd.stored_rx_clock_freq"), v9);
}

NSDictionary *sub_1000261C4(uint64_t a1, double a2)
{
  double v3;
  _QWORD v5[4];
  _QWORD v6[4];

  v5[0] = CFSTR("freqErrorPpb");
  *(float *)&a2 = fabsf(*(float *)(a1 + 40));
  v6[0] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", a2);
  v5[1] = CFSTR("freqErrorOverUnc");
  LODWORD(v3) = *(_DWORD *)(a1 + 44);
  v6[1] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v3);
  v5[2] = CFSTR("freqPpb");
  v6[2] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", **(double **)(a1 + 32));
  v5[3] = CFSTR("dataAgeMinutes");
  v6[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 48));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v6, v5, 4);
}

uint64_t sub_1000262A8(uint64_t a1, double *a2)
{
  double v3;
  double v4;
  _BOOL4 v5;
  float v6;
  NSObject *v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD v13[5];
  float v14;
  BOOL v15;
  uint8_t buf[4];
  double v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  double v23;
  __int16 v24;
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  int v29;
  __int16 v30;
  _BOOL4 v31;

  v4 = a2[3];
  v3 = a2[4];
  v5 = v4 > 1.0 && v3 <= 0.5;
  v6 = -1.0;
  if (v3 > 0.0)
    v6 = fabs(v4) / v3;
  v7 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *a2;
    v9 = *((_QWORD *)a2 + 1);
    v10 = *((_QWORD *)a2 + 2);
    v11 = *((_DWORD *)a2 + 10);
    *(_DWORD *)buf = 134350848;
    v17 = v8;
    v18 = 2050;
    v19 = v9;
    v20 = 2050;
    v21 = v10;
    v22 = 2050;
    v23 = v4;
    v24 = 2050;
    v25 = v3;
    v26 = 2050;
    v27 = v6;
    v28 = 1026;
    v29 = v11;
    v30 = 1026;
    v31 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Analytics,RTC,estimatedFreqPpb,%{public}.2f,freqShiftSinceStoredPpb,%{public}.2f,unc,%{public}.2f,timePropagationErrorMs,%{public}.2f,unc,%{public}.2f,errOverUnc,%{public}.2f,ageSec,%{public}d,affectsME,%{public}d", buf, 0x4Au);
  }
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100026428;
  v13[3] = &unk_1000F0DF0;
  v13[4] = a2;
  v14 = v6;
  v15 = v5;
  return AnalyticsSendEventLazy(CFSTR("com.apple.gpsd.propagated_rtc_time"), v13);
}

NSDictionary *sub_100026428(uint64_t a1)
{
  double v2;
  _QWORD v4[6];
  _QWORD v5[6];

  v4[0] = CFSTR("timePropagationErrorMs");
  v5[0] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", fabs(*(double *)(*(_QWORD *)(a1 + 32) + 24)));
  v4[1] = CFSTR("timePropagationUncMs");
  v5[1] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 32) + 32));
  v4[2] = CFSTR("timePropagationErrorOverUnc");
  LODWORD(v2) = *(_DWORD *)(a1 + 40);
  v5[2] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v2);
  v4[3] = CFSTR("errorAffectsME");
  v5[3] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 44));
  v4[4] = CFSTR("freqShiftSinceStoredPpb");
  v5[4] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", fabs(*(double *)(*(_QWORD *)(a1 + 32) + 8)));
  v4[5] = CFSTR("dataAgeSec");
  v5[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 40));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 6);
}

uint64_t sub_100026554(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  float v4;
  double v5;
  double v6;
  double v7;
  int v8;
  NSObject *v9;
  float v10;
  float v11;
  _QWORD v13[5];
  float v14;
  float v15;
  int v16;
  uint8_t buf[4];
  double v18;
  __int16 v19;
  double v20;
  __int16 v21;
  double v22;
  __int16 v23;
  int v24;

  v3 = GpsdPlatformInfo::instance(0);
  if (*(_BYTE *)(v3 + 24))
  {
    v4 = *(double *)(v3 + 16);
    v5 = v4;
  }
  else
  {
    v5 = 0.0;
  }
  v7 = *(double *)a2;
  v6 = *(double *)(a2 + 8);
  v8 = (*(_DWORD *)(a2 + 16) + 30) / 60;
  v9 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134349824;
    v18 = v5;
    v19 = 2050;
    v20 = v6;
    v21 = 2050;
    v22 = v7;
    v23 = 1026;
    v24 = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Analytics,L5Delay,cal,%{public}.2f,learned,%{public}.2f,current,%{public}.2f,learningAgeMin,%{public}d", buf, 0x26u);
  }
  v10 = v7 - v6;
  v13[0] = _NSConcreteStackBlock;
  v11 = v6 - v5;
  v13[1] = 3221225472;
  v13[2] = sub_1000266CC;
  v13[3] = &unk_1000F0DD0;
  v13[4] = a2;
  v14 = v11;
  v15 = v10;
  v16 = v8;
  return AnalyticsSendEventLazy(CFSTR("com.apple.gpsd.estimated_L5_delay"), v13);
}

NSDictionary *sub_1000266CC(uint64_t a1)
{
  double v2;
  double v3;
  _QWORD v5[4];
  _QWORD v6[4];

  v5[0] = CFSTR("estimateMeters");
  v6[0] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", **(double **)(a1 + 32));
  v5[1] = CFSTR("learnedDeltaFromCalMeters");
  LODWORD(v2) = *(_DWORD *)(a1 + 40);
  v6[1] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v2);
  v5[2] = CFSTR("estimateDeltaFromLearnedMeters");
  LODWORD(v3) = *(_DWORD *)(a1 + 44);
  v6[2] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v3);
  v5[3] = CFSTR("learnedDataAgeMinutes");
  v6[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 48));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v6, v5, 4);
}

void sub_1000267AC()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

BOOL sub_1000267E0(uint64_t a1)
{
  double v1;
  uint64_t v2;

  if (*(double *)a1 < 0.0
    || *(double *)(a1 + 8) <= 0.0
    || (*(_QWORD *)(a1 + 16) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || *(double *)(a1 + 24) <= 0.0)
  {
    return 0;
  }
  v1 = *(double *)(a1 + 32);
  if (v1 == -1.0)
    return 1;
  v2 = 0;
  if (v1 >= 0.0 && v1 < 360.0)
    return *(double *)(a1 + 40) > 0.0;
  return v2;
}

void sub_100026868()
{
  sub_100025C1C("vector");
}

void *sub_10002687C(unint64_t a1)
{
  if (a1 >> 62)
    sub_1000268B0();
  return operator new(4 * a1);
}

void sub_1000268B0()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

float *sub_1000268D8(float *result, float *a2, float *a3)
{
  float v3;
  float v4;
  float v5;
  float v6;

  v3 = *a2;
  v4 = *result;
  v5 = *a3;
  if (*a2 <= *result)
  {
    if (v5 > v3)
    {
      *a2 = v5;
      *a3 = v3;
      v6 = *result;
      if (*a2 > *result)
      {
        *result = *a2;
        *a2 = v6;
      }
    }
  }
  else
  {
    if (v5 <= v3)
    {
      *result = v3;
      *a2 = v4;
      if (*a3 <= v4)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v5;
    }
    *a3 = v4;
  }
  return result;
}

BOOL sub_100026948(float *a1, float *a2)
{
  _BOOL8 v2;
  float v3;
  float v4;
  float *v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float *v12;
  int v13;
  uint64_t v14;
  float v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  float v20;
  float v21;
  int v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  int v32;
  float v33;
  float v34;
  float v35;
  float v36;
  int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;

  v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      v3 = *(a2 - 1);
      v4 = *a1;
      if (v3 > *a1)
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      break;
    case 3:
      v20 = a1[1];
      v21 = *(a2 - 1);
      if (v20 <= v21)
        v22 = *((_DWORD *)a2 - 1);
      else
        v22 = *((_DWORD *)a1 + 1);
      if (v20 > v21)
        v20 = *(a2 - 1);
      *(a2 - 1) = v20;
      *((_DWORD *)a1 + 1) = v22;
      v23 = *(a2 - 1);
      if (v23 <= *a1)
        v24 = *a1;
      else
        v24 = *(a2 - 1);
      if (v23 > *a1)
        v23 = *a1;
      *(a2 - 1) = v23;
      v26 = *a1;
      v25 = a1[1];
      if (v24 <= v25)
      {
        v26 = a1[1];
        v25 = v24;
      }
      *a1 = v26;
      a1[1] = v25;
      break;
    case 4:
      v48 = a1[1];
      v47 = a1[2];
      if (*a1 <= v47)
        v49 = a1[2];
      else
        v49 = *a1;
      if (*a1 <= v47)
        v47 = *a1;
      a1[2] = v47;
      *a1 = v49;
      v50 = *(a2 - 1);
      if (v48 <= v50)
        v51 = *(a2 - 1);
      else
        v51 = v48;
      if (v48 <= v50)
        v50 = v48;
      *(a2 - 1) = v50;
      v52 = *a1;
      if (*a1 <= v51)
        v53 = v51;
      else
        v53 = *a1;
      if (*a1 > v51)
        v52 = v51;
      *a1 = v53;
      a1[1] = v52;
      v54 = a1[2];
      v55 = *(a2 - 1);
      if (v54 <= v55)
        v56 = *(a2 - 1);
      else
        v56 = a1[2];
      if (v54 > v55)
        v54 = *(a2 - 1);
      *(a2 - 1) = v54;
      v57 = a1[1];
      if (v57 <= v56)
        v58 = v56;
      else
        v58 = a1[1];
      if (v57 > v56)
        v57 = v56;
      a1[1] = v58;
      a1[2] = v57;
      break;
    case 5:
      v27 = *a1;
      v28 = a1[1];
      if (*a1 <= v28)
        v29 = a1[1];
      else
        v29 = *a1;
      if (*a1 > v28)
        v27 = a1[1];
      *a1 = v29;
      a1[1] = v27;
      v30 = a1[3];
      v31 = *(a2 - 1);
      if (v30 <= v31)
        v32 = *((_DWORD *)a2 - 1);
      else
        v32 = *((_DWORD *)a1 + 3);
      if (v30 > v31)
        v30 = *(a2 - 1);
      *(a2 - 1) = v30;
      *((_DWORD *)a1 + 3) = v32;
      v33 = *(a2 - 1);
      v34 = a1[2];
      if (v33 <= v34)
        v35 = a1[2];
      else
        v35 = *(a2 - 1);
      if (v33 > v34)
        v33 = a1[2];
      *(a2 - 1) = v33;
      v37 = *((_DWORD *)a1 + 2);
      v36 = a1[3];
      v38 = a1[1];
      if (v35 <= v36)
      {
        v37 = *((_DWORD *)a1 + 3);
        v36 = v35;
      }
      *((_DWORD *)a1 + 2) = v37;
      a1[3] = v36;
      v39 = *(a2 - 1);
      if (v38 <= v39)
        v40 = *(a2 - 1);
      else
        v40 = v38;
      if (v38 <= v39)
        v39 = v38;
      *(a2 - 1) = v39;
      v41 = *a1;
      v43 = a1[2];
      v42 = a1[3];
      if (v42 <= *a1)
        v44 = *a1;
      else
        v44 = a1[3];
      if (v42 > *a1)
        v42 = *a1;
      if (v44 <= v43)
      {
        v41 = a1[2];
        v43 = v44;
      }
      if (v42 <= v40)
        v45 = v40;
      else
        v45 = v42;
      if (v42 > v40)
        v42 = v40;
      if (v45 <= v43)
        v40 = v43;
      *a1 = v41;
      a1[1] = v40;
      if (v45 <= v43)
        v46 = v45;
      else
        v46 = v43;
      a1[2] = v46;
      a1[3] = v42;
      break;
    default:
      v5 = a1 + 2;
      v6 = a1[2];
      v8 = *a1;
      v7 = a1[1];
      if (v7 <= v6)
        v9 = a1[2];
      else
        v9 = a1[1];
      if (v7 <= v6)
        v6 = a1[1];
      if (v6 <= v8)
        v10 = *a1;
      else
        v10 = v6;
      if (v6 > v8)
        v6 = *a1;
      *v5 = v6;
      if (v10 <= v9)
        v11 = v9;
      else
        v11 = v8;
      if (v10 > v9)
        v10 = v9;
      *a1 = v11;
      a1[1] = v10;
      v12 = a1 + 3;
      if (a1 + 3 == a2)
      {
LABEL_29:
        v2 = 1;
      }
      else
      {
        v13 = 0;
        v14 = 12;
        while (1)
        {
          v15 = *v12;
          v16 = *v5;
          if (*v12 > *v5)
          {
            v17 = v14;
            while (1)
            {
              *(float *)((char *)a1 + v17) = v16;
              v18 = v17 - 4;
              if (v17 == 4)
                break;
              v16 = *(float *)((char *)a1 + v17 - 8);
              v17 -= 4;
              if (v15 <= v16)
              {
                v19 = (float *)((char *)a1 + v18);
                goto LABEL_27;
              }
            }
            v19 = a1;
LABEL_27:
            *v19 = v15;
            if (++v13 == 8)
              break;
          }
          v5 = v12;
          v14 += 4;
          if (++v12 == a2)
            goto LABEL_29;
        }
        v2 = v12 + 1 == a2;
      }
      break;
  }
  return v2;
}

void sub_100026BD8()
{
  sub_100026BEC("vector");
}

void sub_100026BEC(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_100026C3C(exception, a1);
}

void sub_100026C28(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_100026C3C(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  return result;
}

_QWORD *sub_100026C60(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  std::ostream::sentry::sentry(v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, &std::ctype<char>::id);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!sub_100026DC4(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  std::ostream::sentry::~sentry(v13);
  return a1;
}

void sub_100026D68(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  std::ostream::sentry::~sentry(&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x100026D48);
}

void sub_100026DB0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_100026DC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      sub_100026F00(__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_100026EE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100026F00(_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    sub_100025C08();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

uint64_t sub_100026FA8(uint64_t a1)
{
  uint64_t i;

  sub_100026FF0(a1);
  std::mutex::~mutex((std::mutex *)(a1 + 120));
  for (i = 80; i != -40; i -= 40)
    sub_1000278C8(a1 + i);
  return a1;
}

void sub_100026FF0(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 192);
  if (v2)
  {
    dispatch_source_cancel(v2);

  }
}

void sub_100027028(uint64_t a1)
{
  uint64_t v1;
  std::mutex *v2;
  unint64_t v3;
  uint64x2_t *v9;
  const char *v10;
  const char *v11;
  double v12;
  double v13;
  int v14;
  double v15;
  double v16;
  double v17;
  NSObject *v18;
  _BOOL4 v19;
  char v20;
  std::string *p_p;
  __int32 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t j;
  std::mutex *v31;
  uint64_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  std::string __p;
  std::string buf;
  __int32 v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  float64_t v42;
  __int16 v43;
  double v44;
  __int16 v45;
  float64_t v46;
  __int16 v47;
  double v48;
  __int16 v49;
  double v50;
  __int16 v51;
  double v52;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (std::mutex *)(v1 + 120);
  std::mutex::lock((std::mutex *)(v1 + 120));
  if (!*(_BYTE *)(v1 + 200))
  {
    sub_100026FF0(v1);
    goto LABEL_46;
  }
  v31 = (std::mutex *)(v1 + 120);
  v3 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v34 = _Q0;
  v33 = (float64x2_t)vdupq_n_s64(0x412E848000000000uLL);
  v32 = v1;
  do
  {
    v9 = *(uint64x2_t **)(v1 + 40 * v3 + 16);
    if (v9)
    {
      v10 = "";
      if (v3 == 2)
        v10 = "Ind";
      if (v3 == 1)
        v10 = "Rsp";
      if (v3)
        v11 = v10;
      else
        v11 = "Req";
      do
      {
        memset(&__p, 0, sizeof(__p));
        if (v3 > 1)
        {
          if (v3 == 2)
          {
            gpsd::util::stringify(v9[1].u32[0], (uint64_t)&buf);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            __p = buf;
            v12 = -1.0;
            v13 = -1.0;
            goto LABEL_23;
          }
        }
        else
        {
          gpsd::util::shorthandStringify(v9[1].i32[0], &buf);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          __p = buf;
        }
        v14 = v9[1].i32[2];
        v13 = -1.0;
        if (v14 >= 1)
        {
          v15 = (double)v14;
          v12 = (double)v9[2].u64[1] / 1000000.0 / (double)v14;
          v35 = vdivq_f64(vcvtq_f64_u64(v9[3]), v33);
          if (v3 || (v24 = v9[4].i64[1], v24 < 1))
          {
            v16 = -1.0;
            v17 = -1.0;
          }
          else
          {
            v13 = (double)v9[5].i64[0] / 1000000.0;
            v17 = (double)v24 / 1000000.0;
            v16 = (double)v9[4].i64[0] / 1000000.0 / v15;
          }
          goto LABEL_24;
        }
        v12 = -1.0;
LABEL_23:
        v16 = -1.0;
        v17 = -1.0;
        v35 = v34;
LABEL_24:
        v18 = qword_100100838;
        v19 = os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO);
        v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if (v19)
        {
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          v22 = v9[1].i32[2];
          v23 = v9[2].i64[0];
          LODWORD(buf.__r_.__value_.__l.__data_) = 136448514;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_p;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 1026;
          v38 = v22;
          v39 = 2050;
          v40 = v23;
          v41 = 2050;
          v42 = v35.f64[1];
          v43 = 2050;
          v44 = v12;
          v45 = 2050;
          v46 = v35.f64[0];
          v47 = 2050;
          v48 = v13;
          v49 = 2050;
          v50 = v16;
          v51 = 2050;
          v52 = v17;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "IfcTelem,%{public}s,%{public}s,count,%{public}d,bytes,%{public}zu,minDelayMs,%{public}.1f,meanDelayMs,%{public}.1f,maxDelayMs,%{public}.1f,minAgeMs,%{public}.1f,meanAgeMs,%{public}.1f,maxAgeMs,%{public}.1f", (uint8_t *)&buf, 0x62u);
          v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        if (v20 < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v9 = (uint64x2_t *)v9->i64[0];
      }
      while (v9);
    }
    ++v3;
    v1 = v32;
  }
  while (v3 != 3);
  for (i = 0; i != 3; ++i)
  {
    v26 = (_QWORD *)(v32 + 40 * i);
    if (v26[3])
    {
      v27 = (_QWORD *)v26[2];
      if (v27)
      {
        do
        {
          v28 = (_QWORD *)*v27;
          operator delete(v27);
          v27 = v28;
        }
        while (v28);
      }
      v26[2] = 0;
      v29 = v26[1];
      if (v29)
      {
        for (j = 0; j != v29; ++j)
          *(_QWORD *)(*v26 + 8 * j) = 0;
      }
      v26[3] = 0;
    }
  }
  *(_BYTE *)(v32 + 200) = 0;
  v2 = v31;
LABEL_46:
  std::mutex::unlock(v2);
}

void sub_1000273C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::mutex *v24;

  std::mutex::unlock(v24);
  _Unwind_Resume(a1);
}

void sub_1000273FC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int v8;
  unint64_t MachContinuousTimeNs;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  NSObject *global_queue;
  dispatch_source_t v15;
  NSObject *v16;
  dispatch_time_t v17;
  NSObject *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _DWORD *handler[5];

  v8 = *(_DWORD *)(a2 + 20);
  MachContinuousTimeNs = gpsd::util::getMachContinuousTimeNs((gpsd::util *)a1);
  std::mutex::lock((std::mutex *)(a1 + 120));
  v25 = v8;
  handler[0] = &v25;
  v10 = sub_100027910((float *)a1, &v25, (uint64_t)&unk_1000CECD8, handler);
  ++*((_DWORD *)v10 + 6);
  *((_QWORD *)v10 + 4) += a3;
  *(_QWORD *)(a1 + 184) = MachContinuousTimeNs;
  v11 = MachContinuousTimeNs - a4;
  if (MachContinuousTimeNs < a4)
    v11 = 0;
  v12 = *((_QWORD *)v10 + 6);
  if (v11 > v12)
    v12 = v11;
  *((_QWORD *)v10 + 5) += v11;
  *((_QWORD *)v10 + 6) = v12;
  if (v11 >= *((_QWORD *)v10 + 7))
    v11 = *((_QWORD *)v10 + 7);
  *((_QWORD *)v10 + 7) = v11;
  switch(v8)
  {
    case 8:
      v13 = *(_QWORD *)(a2 + 24);
      if (!v13)
        v13 = *(_QWORD *)(proto::gpsd::Request::default_instance_ + 24);
      goto LABEL_16;
    case 9:
      v13 = *(_QWORD *)(a2 + 32);
      if (!v13)
        v13 = *(_QWORD *)(proto::gpsd::Request::default_instance_ + 32);
LABEL_16:
      v19 = (uint64_t *)(v13 + 24);
      goto LABEL_37;
    case 10:
    case 11:
    case 12:
    case 13:
    case 20:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
      break;
    case 14:
      v20 = *(_QWORD *)(a2 + 48);
      if (!v20)
        v20 = *(_QWORD *)(proto::gpsd::Request::default_instance_ + 48);
      goto LABEL_21;
    case 15:
      v20 = *(_QWORD *)(a2 + 56);
      if (!v20)
        v20 = *(_QWORD *)(proto::gpsd::Request::default_instance_ + 56);
LABEL_21:
      v21 = *(_QWORD *)(*(_QWORD *)(v20 + 8) + 8 * *(int *)(v20 + 16) - 8);
      goto LABEL_36;
    case 16:
      v21 = *(_QWORD *)(a2 + 64);
      if (!v21)
        v21 = *(_QWORD *)(proto::gpsd::Request::default_instance_ + 64);
      goto LABEL_36;
    case 17:
      v21 = *(_QWORD *)(a2 + 72);
      if (!v21)
        v21 = *(_QWORD *)(proto::gpsd::Request::default_instance_ + 72);
      goto LABEL_36;
    case 18:
      v21 = *(_QWORD *)(a2 + 80);
      if (!v21)
        v21 = *(_QWORD *)(proto::gpsd::Request::default_instance_ + 80);
      goto LABEL_36;
    case 19:
      v21 = *(_QWORD *)(a2 + 88);
      if (!v21)
        v21 = *(_QWORD *)(proto::gpsd::Request::default_instance_ + 88);
      goto LABEL_36;
    case 21:
      v21 = *(_QWORD *)(a2 + 104);
      if (!v21)
        v21 = *(_QWORD *)(proto::gpsd::Request::default_instance_ + 104);
      goto LABEL_36;
    case 22:
      v21 = *(_QWORD *)(a2 + 112);
      if (!v21)
        v21 = *(_QWORD *)(proto::gpsd::Request::default_instance_ + 112);
      goto LABEL_36;
    case 31:
      v21 = *(_QWORD *)(a2 + 232);
      if (!v21)
        v21 = *(_QWORD *)(proto::gpsd::Request::default_instance_ + 232);
LABEL_36:
      v19 = (uint64_t *)(v21 + 8);
LABEL_37:
      v22 = *v19;
      if (v22)
      {
        v23 = MachContinuousTimeNs - v22;
        v24 = *((_QWORD *)v10 + 9);
        if (v23 > v24)
          v24 = v23;
        *((_QWORD *)v10 + 8) += v23;
        *((_QWORD *)v10 + 9) = v24;
        if (v23 >= *((_QWORD *)v10 + 10))
          v23 = *((_QWORD *)v10 + 10);
        *((_QWORD *)v10 + 10) = v23;
      }
      break;
    default:
      if (v8 == 1 && !*(_QWORD *)(a1 + 192))
      {
        global_queue = dispatch_get_global_queue(0, 0);
        v15 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, global_queue);
        *(_QWORD *)(a1 + 192) = v15;
        if (v15)
        {
          v16 = v15;
          v17 = dispatch_walltime(0, 30000000000);
          dispatch_source_set_timer(v16, v17, 0x6FC23AC00uLL, 0x1DCD6500uLL);
          v18 = *(NSObject **)(a1 + 192);
          handler[0] = _NSConcreteStackBlock;
          handler[1] = (_DWORD *)3221225472;
          handler[2] = sub_100027028;
          handler[3] = &unk_1000F0D30;
          handler[4] = (_DWORD *)a1;
          dispatch_source_set_event_handler(v18, handler);
          dispatch_resume(*(dispatch_object_t *)(a1 + 192));
        }
      }
      break;
  }
  *(_BYTE *)(a1 + 200) = 1;
  std::mutex::unlock((std::mutex *)(a1 + 120));
}

void sub_100027734(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100027748(uint64_t a1, int a2, uint64_t a3)
{
  std::mutex *v6;
  char *v7;
  unint64_t MachContinuousTimeNs;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int *v12;

  v6 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  v11 = a2;
  v12 = &v11;
  v7 = sub_100027910((float *)(a1 + 40), &v11, (uint64_t)&unk_1000CECD8, &v12);
  ++*((_DWORD *)v7 + 6);
  *((_QWORD *)v7 + 4) += a3;
  MachContinuousTimeNs = gpsd::util::getMachContinuousTimeNs((gpsd::util *)v7);
  v9 = MachContinuousTimeNs - *(_QWORD *)(a1 + 184);
  v10 = *((_QWORD *)v7 + 6);
  if (v9 > v10)
    v10 = MachContinuousTimeNs - *(_QWORD *)(a1 + 184);
  *((_QWORD *)v7 + 5) += v9;
  *((_QWORD *)v7 + 6) = v10;
  if (v9 >= *((_QWORD *)v7 + 7))
    v9 = *((_QWORD *)v7 + 7);
  *((_QWORD *)v7 + 7) = v9;
  *(_BYTE *)(a1 + 200) = 1;
  std::mutex::unlock(v6);
}

void sub_10002780C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100027824(uint64_t a1, int a2, uint64_t a3)
{
  std::mutex *v6;
  char *v7;
  int v8;
  int *v9;

  v6 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  v8 = a2;
  v9 = &v8;
  v7 = sub_100027910((float *)(a1 + 80), &v8, (uint64_t)&unk_1000CECD8, &v9);
  ++*((_DWORD *)v7 + 6);
  *((_QWORD *)v7 + 4) += a3;
  *(_BYTE *)(a1 + 200) = 1;
  std::mutex::unlock(v6);
}

void sub_1000278B4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000278C8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

char *sub_100027910(float *a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  char *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  int8x8_t prime;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v34;

  v7 = *a2;
  v8 = *((_QWORD *)a1 + 1);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (char *)*v10;
      if (*v10)
      {
        do
        {
          v12 = *((_QWORD *)v11 + 1);
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
  v11 = (char *)operator new(0x58uLL);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *((_QWORD *)v11 + 7) = -1;
  *((_QWORD *)v11 + 8) = 0;
  *((_QWORD *)v11 + 9) = 0;
  *((_QWORD *)v11 + 10) = 0x7FFFFFFFFFFFFFFFLL;
  v13 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v14 = a1[8];
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = (int8x8_t)v17;
    else
      prime = (int8x8_t)v16;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v8 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v8)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v8)
    {
      v25 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v8 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        v25 = std::__next_prime(v25);
      }
      else
      {
        v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2)
          v25 = v27;
      }
      if (*(_QWORD *)&prime <= v25)
        prime = (int8x8_t)v25;
      if (*(_QWORD *)&prime >= v8)
      {
        v8 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            sub_1000268B0();
          v19 = operator new(8 * *(_QWORD *)&prime);
          v20 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v19;
          if (v20)
            operator delete(v20);
          v21 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v21++) = 0;
          while (*(_QWORD *)&prime != v21);
          v22 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v22)
          {
            v23 = v22[1];
            v24 = (uint8x8_t)vcnt_s8(prime);
            v24.i16[0] = vaddlv_u8(v24);
            if (v24.u32[0] > 1uLL)
            {
              if (v23 >= *(_QWORD *)&prime)
                v23 %= *(_QWORD *)&prime;
            }
            else
            {
              v23 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = a1 + 4;
            v28 = (_QWORD *)*v22;
            if (*v22)
            {
              do
              {
                v29 = v28[1];
                if (v24.u32[0] > 1uLL)
                {
                  if (v29 >= *(_QWORD *)&prime)
                    v29 %= *(_QWORD *)&prime;
                }
                else
                {
                  v29 &= *(_QWORD *)&prime - 1;
                }
                if (v29 != v23)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v29))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v22;
                    goto LABEL_55;
                  }
                  *v22 = *v28;
                  *v28 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v29);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v29) = v28;
                  v28 = v22;
                }
                v29 = v23;
LABEL_55:
                v22 = v28;
                v28 = (_QWORD *)*v28;
                v23 = v29;
              }
              while (v28);
            }
          }
          v8 = (unint64_t)prime;
          goto LABEL_59;
        }
        v34 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v34)
          operator delete(v34);
        v8 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v30 = *(_QWORD **)a1;
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v31)
  {
    *(_QWORD *)v11 = *v31;
LABEL_72:
    *v31 = v11;
    goto LABEL_73;
  }
  *(_QWORD *)v11 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v11;
  v30[v4] = a1 + 4;
  if (*(_QWORD *)v11)
  {
    v32 = *(_QWORD *)(*(_QWORD *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v32 >= v8)
        v32 %= v8;
    }
    else
    {
      v32 &= v8 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return v11;
}

void sub_100027D10(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100027D24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  gpsd::util *v8;
  uint64_t v9;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  uint64_t j;
  uint64_t v19;
  gpsd::util *v20;
  id *v21;
  const char *v23;
  int v24;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 15) = 0;
  *(_DWORD *)(a1 + 20) = 5;
  VendorLogger::VendorLogger((VendorLogger *)(a1 + 24));
  v9 = 0;
  *(_BYTE *)(a1 + 1088) = 0;
  *(_BYTE *)(a1 + 1104) = 0;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_BYTE *)(a1 + 960) = 0;
  *(_QWORD *)(a1 + 1000) = 0;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 1008) = _Q1;
  *(_WORD *)(a1 + 1024) = 0;
  *(_QWORD *)(a1 + 1028) = 0;
  *(_DWORD *)(a1 + 1035) = 0;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_QWORD *)(a1 + 1072) = 0;
  *(_DWORD *)(a1 + 1200) = -1082130432;
  *(_QWORD *)(a1 + 1216) = -1;
  *(_QWORD *)(a1 + 1080) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 1192) = 0;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_BYTE *)(a1 + 1204) = 0;
  *(_DWORD *)(a1 + 1208) = 0;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_QWORD *)(a1 + 1272) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 1280) = _Q1;
  *(_QWORD *)(a1 + 1296) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 1320) = 0;
  *(_QWORD *)(a1 + 1304) = 0;
  *(_QWORD *)(a1 + 1312) = 0;
  *(_OWORD *)(a1 + 1328) = _Q1;
  *(_OWORD *)(a1 + 1344) = xmmword_1000CECE0;
  *(_OWORD *)(a1 + 1360) = _Q1;
  *(_QWORD *)(a1 + 1376) = 0;
  *(_DWORD *)(a1 + 1384) = 0;
  *(_DWORD *)(a1 + 1472) = 0;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_OWORD *)(a1 + 1440) = 0u;
  *(_OWORD *)(a1 + 1424) = 0u;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(_OWORD *)(a1 + 1392) = 0u;
  do
  {
    v15 = a1 + v9;
    *(_DWORD *)(v15 + 1552) = 0;
    *(_QWORD *)(v15 + 1560) = 0;
    v9 += 16;
  }
  while (v9 != 112);
  *(_DWORD *)(a1 + 1544) = 0;
  *(_OWORD *)(a1 + 1512) = 0u;
  *(_OWORD *)(a1 + 1528) = 0u;
  *(_OWORD *)(a1 + 1480) = 0u;
  *(_OWORD *)(a1 + 1496) = 0u;
  for (i = 1552; i != 1664; i += 16)
  {
    v17 = a1 + i;
    *(_DWORD *)v17 = 0;
    *(_QWORD *)(v17 + 8) = 0;
  }
  *(_QWORD *)(a1 + 1728) = 0;
  *(_OWORD *)(a1 + 1712) = 0u;
  *(_OWORD *)(a1 + 1696) = 0u;
  *(_OWORD *)(a1 + 1680) = 0u;
  *(_OWORD *)(a1 + 1664) = 0u;
  *(double *)(a1 + 1112) = (double)gpsd::util::getMachContinuousTimeNs(v8) * 0.000000001;
  *(_OWORD *)(a1 + 1392) = 0u;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(_OWORD *)(a1 + 1424) = 0u;
  *(_OWORD *)(a1 + 1440) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_DWORD *)(a1 + 1472) = 0;
  *(_OWORD *)(a1 + 1480) = 0u;
  *(_OWORD *)(a1 + 1496) = 0u;
  *(_OWORD *)(a1 + 1512) = 0u;
  *(_OWORD *)(a1 + 1528) = 0u;
  *(_DWORD *)(a1 + 1544) = 0;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_QWORD *)(a1 + 1184) = 0;
  for (j = 1552; j != 1664; j += 16)
  {
    v19 = a1 + j;
    *(_DWORD *)v19 = 0;
    *(_QWORD *)(v19 + 8) = 0;
  }
  *(_QWORD *)(a1 + 1728) = 0;
  *(_OWORD *)(a1 + 1696) = 0u;
  *(_OWORD *)(a1 + 1712) = 0u;
  *(_OWORD *)(a1 + 1664) = 0u;
  *(_OWORD *)(a1 + 1680) = 0u;
  *(_QWORD *)(a1 + 1736) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 1744) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 1752) = 0;
  *(_QWORD *)(a1 + 1760) = 850045863;
  *(_BYTE *)(a1 + 1848) = 0;
  *(_OWORD *)(a1 + 1768) = 0u;
  *(_OWORD *)(a1 + 1784) = 0u;
  *(_OWORD *)(a1 + 1800) = 0u;
  *(_OWORD *)(a1 + 1816) = 0u;
  *(_OWORD *)(a1 + 1832) = 0u;
  *(_OWORD *)(a1 + 1856) = 0u;
  *(_OWORD *)(a1 + 1872) = 0u;
  *(_OWORD *)(a1 + 1882) = 0u;
  *(_DWORD *)(a1 + 1900) = 7;
  *(_QWORD *)(a1 + 1904) = 0;
  *(_WORD *)(a1 + 1912) = 0;
  *(_OWORD *)(a1 + 1920) = 0u;
  *(_QWORD *)(a1 + 1936) = a4;
  *(_QWORD *)(a1 + 1944) = 0;
  *(_QWORD *)(a1 + 1960) = 0;
  *(_QWORD *)(a1 + 1968) = 0x7FEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 1976) = 0u;
  *(_BYTE *)(a1 + 1992) = 0;
  *(_OWORD *)(a1 + 2000) = 0u;
  *(_DWORD *)(a1 + 2016) = -1082130432;
  *(_QWORD *)(a1 + 2020) = 0;
  *(_DWORD *)(a1 + 2028) = 0;
  *(_QWORD *)(a1 + 2032) = -1;
  *(_OWORD *)(a1 + 2040) = 0u;
  *(_OWORD *)(a1 + 2056) = 0u;
  *(_OWORD *)(a1 + 2065) = 0u;
  *(_DWORD *)(a1 + 2088) = 0;
  *(_BYTE *)(a1 + 2092) = 0;
  sub_100025B58((_QWORD *)(a1 + 2096), "");
  *(_QWORD *)(a1 + 2136) = 0;
  *(_OWORD *)(a1 + 2120) = 0u;
  *(_QWORD *)(a1 + 2144) = 850045863;
  *(_BYTE *)(a1 + 2264) = 0;
  *(_OWORD *)(a1 + 2232) = 0u;
  *(_OWORD *)(a1 + 2248) = 0u;
  *(_OWORD *)(a1 + 2152) = 0u;
  *(_OWORD *)(a1 + 2168) = 0u;
  *(_OWORD *)(a1 + 2184) = 0u;
  *(_OWORD *)(a1 + 2200) = 0u;
  *(_OWORD *)(a1 + 2209) = 0u;
  sub_100031BDC(a1 + 2272, a2);
  sub_100031BDC(a1 + 2304, a3);
  *(_QWORD *)(a1 + 2360) = 0;
  *(_QWORD *)(a1 + 2392) = 0;
  if (*(_DWORD *)(GpsdPlatformInfo::instance(0) + 8) == 107)
  {
    gpsd::util::dispatchQueueInit((dispatch_queue_t *)(a1 + 1952), QOS_CLASS_USER_INTERACTIVE, "deviceq_watchdog");
    operator new();
  }
  sub_10000559C((gpsd::util *)a1);
  if (!*(_QWORD *)(a1 + 2328))
  {
    v23 = "fClientManagerIndicationCallback";
    v24 = 55;
    goto LABEL_16;
  }
  if (!*(_QWORD *)(a1 + 2296))
  {
    v23 = "fClientManagerResponseCallback";
    v24 = 56;
LABEL_16:
    __assert_rtn("GpsdGnssDeviceManager", "GpsdGnssDeviceManager.mm", v24, v23);
  }
  *(_QWORD *)(a1 + 1872) = gpsd::util::getMachContinuousTimeNs(v20);
  v21 = (id *)GpsdPreferences::instance(0);
  if (GpsdPreferences::vendorLogQA(v21))
    operator new();
  GpsdPlatformInfo::instance(0);
  return a1;
}

void sub_10002834C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  VendorLogger *v32;
  std::mutex *v33;
  void **v34;
  void **v35;
  std::mutex *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v40 = *(_QWORD **)(v31 + 2392);
  if (v40 == (_QWORD *)(v31 + 2368))
  {
    v41 = 4;
    v40 = (_QWORD *)(v31 + 2368);
  }
  else
  {
    if (!v40)
      goto LABEL_6;
    v41 = 5;
  }
  (*(void (**)(void))(*v40 + 8 * v41))();
LABEL_6:
  v42 = *(_QWORD **)(v31 + 2360);
  if (v42 == (_QWORD *)(v31 + 2336))
  {
    v43 = 4;
    v42 = (_QWORD *)(v31 + 2336);
  }
  else
  {
    if (!v42)
      goto LABEL_11;
    v43 = 5;
  }
  (*(void (**)(void))(*v42 + 8 * v43))();
LABEL_11:
  v44 = *(_QWORD **)(v31 + 2328);
  if (v44 == v38)
  {
    v45 = 4;
    v44 = v38;
  }
  else
  {
    if (!v44)
      goto LABEL_16;
    v45 = 5;
  }
  (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_16:
  v46 = *(_QWORD **)(v31 + 2296);
  if (v46 == v37)
  {
    v47 = 4;
    v46 = v37;
  }
  else
  {
    if (!v46)
      goto LABEL_21;
    v47 = 5;
  }
  (*(void (**)(void))(*v46 + 8 * v47))();
LABEL_21:
  std::mutex::~mutex(v36);
  v48 = *v34;
  if (*v34)
  {
    *(_QWORD *)(v31 + 2128) = v48;
    operator delete(v48);
  }
  if (*(char *)(v31 + 2119) < 0)
    operator delete(*v35);
  v49 = *(_QWORD *)(v31 + 1960);
  *(_QWORD *)(v31 + 1960) = 0;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  v50 = *(_QWORD *)(v31 + 1840);
  *(_QWORD *)(v31 + 1840) = 0;
  if (v50)
    sub_100031C90(v50);
  sub_100031C40(a9, 0);
  std::mutex::~mutex(v33);
  VendorLogger::~VendorLogger(v32);
  v51 = *(_QWORD *)(v31 + 8);
  *(_QWORD *)(v31 + 8) = 0;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 16))(v51);
  _Unwind_Resume(a1);
}

uint64_t sub_100028564(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_1000286D0((uint64_t *)a1);
  v2 = *(_QWORD **)(a1 + 2392);
  if (v2 == (_QWORD *)(a1 + 2368))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 2368);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v4 = *(_QWORD **)(a1 + 2360);
  if (v4 == (_QWORD *)(a1 + 2336))
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 2336);
  }
  else
  {
    if (!v4)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_11:
  v6 = *(_QWORD **)(a1 + 2328);
  if (v6 == (_QWORD *)(a1 + 2304))
  {
    v7 = 4;
    v6 = (_QWORD *)(a1 + 2304);
  }
  else
  {
    if (!v6)
      goto LABEL_16;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_16:
  v8 = *(_QWORD **)(a1 + 2296);
  if (v8 == (_QWORD *)(a1 + 2272))
  {
    v9 = 4;
    v8 = (_QWORD *)(a1 + 2272);
  }
  else
  {
    if (!v8)
      goto LABEL_21;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_21:
  std::mutex::~mutex((std::mutex *)(a1 + 2144));
  v10 = *(void **)(a1 + 2120);
  if (v10)
  {
    *(_QWORD *)(a1 + 2128) = v10;
    operator delete(v10);
  }
  if (*(char *)(a1 + 2119) < 0)
    operator delete(*(void **)(a1 + 2096));
  v11 = *(_QWORD *)(a1 + 1960);
  *(_QWORD *)(a1 + 1960) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(_QWORD *)(a1 + 1840);
  *(_QWORD *)(a1 + 1840) = 0;
  if (v12)
    sub_100031C90(v12);
  sub_100031C40((uint64_t *)(a1 + 1824), 0);
  std::mutex::~mutex((std::mutex *)(a1 + 1760));
  VendorLogger::~VendorLogger((VendorLogger *)(a1 + 24));
  v13 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
  return a1;
}

void sub_1000286D0(uint64_t *a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  void **v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  NSObject *v10;
  int v11;
  NSObject *v12;
  _BOOL8 v13;
  NSObject *v14;
  uint64_t *v15;
  uint64_t v16;
  NSObject *v17;
  int buf;
  _BYTE buf_4[10];
  int v20;
  __int16 v21;
  void **v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  uint64_t v28;
  void **v29;
  char v30;

  *((_BYTE *)a1 + 18) = 1;
  v2 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    v3 = a1[1];
    v4 = *((unsigned __int8 *)a1 + 17);
    gnss::stringify(*((_DWORD *)a1 + 5), &v29);
    v5 = v30 >= 0 ? (void **)&v29 : v29;
    v6 = *((unsigned __int8 *)a1 + 1848);
    v7 = *((unsigned __int8 *)a1 + 1896);
    v8 = *a1;
    buf = 134219266;
    *(_QWORD *)buf_4 = v3;
    *(_WORD *)&buf_4[8] = 1026;
    v20 = v4;
    v21 = 2082;
    v22 = v5;
    v23 = 1026;
    v24 = v6;
    v25 = 1026;
    v26 = v7;
    v27 = 2048;
    v28 = v8;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gdm,destroyDevice,fDevice,%p,fDeviceCtrAttempted,%{public}d,fDeviceCtrStatus,%{public}s,regSession,%{public}d,emergSession,%{public}d,dylibHandle,%p", (uint8_t *)&buf, 0x32u);
    if (v30 < 0)
      operator delete(v29);
  }
  v9 = *((unsigned __int8 *)a1 + 1848);
  if (*((_BYTE *)a1 + 1848) || *((_BYTE *)a1 + 1896) || *((_BYTE *)a1 + 1897))
  {
    v10 = qword_100100830;
    if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
    {
      v11 = *((unsigned __int8 *)a1 + 1896);
      buf = 67240448;
      *(_DWORD *)buf_4 = v9;
      *(_WORD *)&buf_4[4] = 1026;
      *(_DWORD *)&buf_4[6] = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#gdm,destroyDevice,In session,regSession,%{public}d,emergSession,%{public}d", (uint8_t *)&buf, 0xEu);
    }
    v12 = qword_100100838;
    v13 = os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT);
    if (v13)
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#gdm,stopBlocking,initiated", (uint8_t *)&buf, 2u);
    }
    if (a1[1])
    {
      if (*((_BYTE *)a1 + 1848))
      {
        *((_BYTE *)a1 + 1848) = 0;
        *((double *)a1 + 232) = (double)gpsd::util::getMachContinuousTimeNs((gpsd::util *)v13) * 0.000000001;
        if (*(_DWORD *)(GpsdPlatformInfo::instance(0) + 8) != 107)
          operator new();
        v14 = qword_100100838;
        v13 = os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT);
        if (v13)
        {
          LOWORD(buf) = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#gdm,stopBlocking,fallthrough", (uint8_t *)&buf, 2u);
        }
      }
      if (*((_BYTE *)a1 + 1896))
      {
        *((_BYTE *)a1 + 1896) = 0;
        *((double *)a1 + 232) = (double)gpsd::util::getMachContinuousTimeNs((gpsd::util *)v13) * 0.000000001;
        operator new();
      }
    }
  }
  *((_DWORD *)a1 + 5) = 2;
  v15 = (uint64_t *)a1[295];
  a1[295] = 0;
  if (v15 == a1 + 292)
  {
    v16 = 4;
    v15 = a1 + 292;
  }
  else
  {
    if (!v15)
      goto LABEL_27;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_27:
  a1[229] = 0;
  v17 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#gdm,destroyDevice,Immediate exit", (uint8_t *)&buf, 2u);
  }
}

void sub_100028CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  unint64_t *v18;
  unint64_t v19;
  va_list va;

  va_start(va, a17);
  if (a14)
  {
    v18 = a14 + 1;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
      (*(void (**)(unint64_t *))(*a14 + 16))(a14);
  }
  sub_100032114((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100028E3C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3[4];

  v2 = qword_100100830;
  if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v3[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gdm,handleTerminationSignal", (uint8_t *)v3, 2u);
  }
  sub_100025B58(v3, "handleTerminationSignal");
  sub_100028ED8(a1, v3, 1);
  sub_10002E27C(v3);
}

void sub_100028EBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100028ED8(uint64_t a1, uint64_t *a2, int a3)
{
  NSObject *v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  __int16 v11;
  int v12;

  v6 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 23) >= 0)
      v7 = a2;
    else
      v7 = (uint64_t *)*a2;
    v9 = 136446466;
    v10 = v7;
    v11 = 1026;
    v12 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#gdm,Preparing for termination,reason,%{public}s,stopDevice,%{public}d", (uint8_t *)&v9, 0x12u);
  }
  v8 = *(_QWORD *)(a1 + 1832);
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1832) + 56))(*(_QWORD *)(a1 + 1832));
  }
  if (a3 && *(_BYTE *)(a1 + 17))
    sub_1000286D0((uint64_t *)a1);
  VendorLogger::prepareForTermination((VendorLogger *)(a1 + 24));
}

void sub_100028FE0()
{
  void (**v0)(proto::gpsd::Indication *__hidden);
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;

  v0 = off_1000F9B50;
  v1 = 0u;
  v2 = 0u;
  v3 = 0u;
  v4 = 0u;
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  LODWORD(v1) = 2;
  v14 = 65;
  operator new();
}

void sub_100029150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  proto::gpsd::Indication::SharedDtor(&a9);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)&a9);
  _Unwind_Resume(a1);
}

void sub_100029170(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3[4];

  v2 = qword_100100830;
  if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v3[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gdm,handleClientCrash", (uint8_t *)v3, 2u);
  }
  sub_100025B58(v3, "client crash");
  sub_100028ED8(a1, v3, 1);
  sub_10002E27C(v3);
}

void sub_1000291F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10002920C(std::__assoc_sub_state **a1)
{
  std::__assoc_sub_state *v1;
  void *ptr;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::exception_ptr v5;
  std::exception_ptr v6;
  std::unique_lock<std::mutex> __lk;

  v1 = *a1;
  *a1 = 0;
  __lk.__m_ = &v1->__mut_;
  __lk.__owns_ = 1;
  std::mutex::lock(&v1->__mut_);
  std::__assoc_sub_state::__sub_wait(v1, &__lk);
  ptr = v1->__exception_.__ptr_;
  v6.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v6);
  if (ptr)
  {
    std::exception_ptr::exception_ptr(&v6, &v1->__exception_);
    v5.__ptr_ = &v6;
    std::rethrow_exception(v5);
    __break(1u);
  }
  else
  {
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
      ((void (*)(std::__assoc_sub_state *))v1->__on_zero_shared)(v1);
  }
}

void sub_1000292CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::mutex *a11, char a12)
{
  unint64_t *v12;
  unint64_t *v14;
  unint64_t v15;

  std::exception_ptr::~exception_ptr(&a10);
  if (a12)
    std::mutex::unlock(a11);
  if (v12)
  {
    v14 = v12 + 1;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
      (*(void (**)(unint64_t *))(*v12 + 16))(v12);
  }
  _Unwind_Resume(a1);
}

void sub_10002932C()
{
  operator new();
}

void sub_10002C7BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;

  v54 = a52;
  if (a52)
  {
    v55 = (unint64_t *)(a52 + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
      (*(void (**)(uint64_t))(*(_QWORD *)v54 + 16))(v54);
  }
  sub_100032114(&a53);
  if (a40)
  {
    v57 = (unint64_t *)(a40 + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
      (*(void (**)(uint64_t))(*(_QWORD *)a40 + 16))(a40);
  }
  sub_100032114(&a41);
  _Unwind_Resume(a1);
}

void sub_10002D8F4(uint64_t a1, int *a2)
{
  NSObject *v4;
  int v5;
  std::string *p_p;
  NSObject *v7;
  int v8;
  std::string *v9;
  id *v10;
  NSObject *v11;
  int v12;
  std::string *v13;
  unsigned int v14;
  NSObject *v15;
  NSObject *v16;
  int v17;
  std::string *v18;
  std::string __p;
  uint8_t buf[8];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;

  sub_10002DFA4(&__p, (uint64_t)a2);
  if (*(_BYTE *)(a1 + 1912))
  {
    v4 = qword_100100830;
    if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *a2;
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 67240450;
      *(_DWORD *)&buf[4] = v5;
      LOWORD(v21) = 2082;
      *(_QWORD *)((char *)&v21 + 2) = p_p;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#hwReset,ignoring since unresponsive already registered,%{public}d,%{public}s", buf, 0x12u);
    }
  }
  else
  {
    if (!*(_BYTE *)(a1 + 1896))
    {
      *(_BYTE *)(a1 + 1912) = 1;
      if ((*a2 - 3) <= 1)
      {
        v10 = (id *)GpsdPreferences::instance(0);
        if (GpsdPreferences::enableBasebandReset(v10))
        {
          v11 = qword_100100838;
          if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
          {
            v12 = *a2;
            v13 = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v13 = (std::string *)__p.__r_.__value_.__r.__words[0];
            *(_DWORD *)buf = 67240450;
            *(_DWORD *)&buf[4] = v12;
            LOWORD(v21) = 2082;
            *(_QWORD *)((char *)&v21 + 2) = v13;
            _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#hwReset,triggered,reason,%{public}d,%{public}s", buf, 0x12u);
          }
          if (*a2 != 3)
          {
            v14 = -4;
            do
            {
              v15 = qword_100100838;
              if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67240192;
                *(_DWORD *)&buf[4] = v14 + 4;
                _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#bbReset,waitingBeforeAsk,%{public}d", buf, 8u);
              }
              sleep(4u);
              v14 += 4;
            }
            while (v14 < 0x11);
          }
          *(_QWORD *)buf = off_1000F9B50;
          v21 = 0u;
          v22 = 0u;
          v23 = 0u;
          v24 = 0u;
          v25 = 0u;
          v26 = 0u;
          v27 = 0u;
          v28 = 0u;
          v29 = 0u;
          v30 = 0u;
          v31 = 0u;
          v32 = 0u;
          v33 = 0u;
          v34 = 1;
          LODWORD(v21) = 25;
          sub_10001A330(a1, (uint64_t)buf);
          sub_10002DD9C();
        }
      }
      v16 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_FAULT))
      {
        v17 = *a2;
        v18 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 67240450;
        *(_DWORD *)&buf[4] = v17;
        LOWORD(v21) = 2082;
        *(_QWORD *)((char *)&v21 + 2) = v18;
        _os_log_fault_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "#hwReset,triggered,reason,%{public}d,%{public}s", buf, 0x12u);
      }
      sub_10002E210();
    }
    v7 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_FAULT))
    {
      v8 = *a2;
      v9 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v9 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 67240450;
      *(_DWORD *)&buf[4] = v8;
      LOWORD(v21) = 2082;
      *(_QWORD *)((char *)&v21 + 2) = v9;
      _os_log_fault_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "#hwReset,ignoring during emergency session,%{public}d,%{public}s", buf, 0x12u);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_10002DD0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;

  a20 = v20 + 16;
  proto::gpsd::Indication::SharedDtor(&a20);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)&a20);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_10002DD5C(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_10002DD9C()
{
  void (**v0)(proto::gpsd::Indication *__hidden);
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;

  v0 = off_1000F9B50;
  v1 = 0u;
  v2 = 0u;
  v3 = 0u;
  v4 = 0u;
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  LODWORD(v1) = 23;
  v14 = 32769;
  operator new();
}

void sub_10002DF3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;

  if (a14 < 0)
    operator delete(__p);
  a25 = v25 + 16;
  proto::gpsd::Indication::SharedDtor(&a25);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)&a25);
  _Unwind_Resume(a1);
}

void sub_10002DFA4(std::string *a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  void **v10;
  std::string::size_type v11;
  void **v12;
  std::string::size_type v13;
  std::string v14;
  void *__p[2];
  int64_t v16;

  sub_100025B58(a1, "ExceptionUnknown");
  v4 = *(_DWORD *)a2 - 1;
  if (v4 < 8)
    std::string::assign(a1, off_1000F3198[v4]);
  v5 = *(_DWORD *)(a2 + 4);
  if (v5 != -1)
  {
    std::to_string(&v14, v5);
    v6 = std::string::insert(&v14, 0, "_");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v16 = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    if (v16 >= 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    if (v16 >= 0)
      v9 = HIBYTE(v16);
    else
      v9 = (std::string::size_type)__p[1];
    std::string::append(a1, (const std::string::value_type *)v8, v9);
    if (SHIBYTE(v16) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (*(char *)(a2 + 31) < 0)
  {
    if (!*(_QWORD *)(a2 + 16))
      goto LABEL_26;
  }
  else if (!*(_BYTE *)(a2 + 31))
  {
    goto LABEL_26;
  }
  std::operator+<char>(__p, "_", a2 + 8);
  if (v16 >= 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if (v16 >= 0)
    v11 = HIBYTE(v16);
  else
    v11 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v10, v11);
  if (SHIBYTE(v16) < 0)
    operator delete(__p[0]);
LABEL_26:
  if (*(char *)(a2 + 55) < 0)
  {
    if (!*(_QWORD *)(a2 + 40))
      return;
  }
  else if (!*(_BYTE *)(a2 + 55))
  {
    return;
  }
  std::operator+<char>(__p, "_abc_", a2 + 32);
  if (v16 >= 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  if (v16 >= 0)
    v13 = HIBYTE(v16);
  else
    v13 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v12, v13);
  if (SHIBYTE(v16) < 0)
    operator delete(__p[0]);
}

void sub_10002E150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 + 23) < 0)
    operator delete(*(void **)v21);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10002E1C0(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_10002E210()
{
  sub_10002DD9C();
}

void sub_10002E260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10002E27C(uint64_t *a1)
{
  NSObject *v2;
  uint64_t *v3;
  int v4;
  uint64_t *v5;

  v2 = qword_100100830;
  if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a1 + 23) >= 0)
      v3 = a1;
    else
      v3 = (uint64_t *)*a1;
    v4 = 136446210;
    v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gdm,Exiting,reason,%{public}s", (uint8_t *)&v4, 0xCu);
  }
  _Exit(-1);
}

void sub_10002E304(_QWORD *a1)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  uint8_t v6[16];
  uint8_t buf[16];

  v2 = (void *)a1[243];
  if (v2)
  {
    v3 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#gdm,releaseOsTransaction", v6, 2u);
      v2 = (void *)a1[243];
    }

    a1[243] = 0;
  }
  v4 = a1[245];
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    a1[246] = 0x7FEFFFFFFFFFFFFFLL;
    v5 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#dqwdt,stop", buf, 2u);
    }
  }
}

void sub_10002E3DC(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD block[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 1952);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10002E434;
  block[3] = &unk_1000F0D30;
  block[4] = v1;
  dispatch_async(v2, block);
}

void sub_10002E434(gpsd::util *a1)
{
  uint64_t v1;
  double v2;
  NSObject *v3;
  int v4;
  double v5;

  v1 = *((_QWORD *)a1 + 4);
  v2 = (double)gpsd::util::getMachContinuousTimeNs(a1) * 0.000000001;
  *(double *)(v1 + 1968) = v2;
  v3 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 134349056;
    v5 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#dqwdt,heartbeat,lastkick,%{public}.2f", (uint8_t *)&v4, 0xCu);
  }
}

_QWORD *sub_10002E4F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  __int128 v16;
  char v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _BYTE v22[828];
  int v23;
  __int16 v24;
  uint8_t buf[4];
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;

  if (*(_QWORD *)(a1 + 2360))
  {
    if (!*(_BYTE *)(a1 + 1848) && !*(_BYTE *)(a1 + 1896) && !*(_BYTE *)(a1 + 1897))
      *(double *)(a1 + 1864) = (double)gpsd::util::getMachContinuousTimeNs((gpsd::util *)a1) * 0.000000001;
    LOBYTE(v14) = 0;
    v15 = xmmword_1000CED00;
    *(_QWORD *)&v6 = 0x8000000080000000;
    *((_QWORD *)&v6 + 1) = 0x8000000080000000;
    v16 = v6;
    v17 = 0;
    v18 = 0x7FFF;
    v19 = -1;
    v20 = -1;
    v21 = -1;
    bzero(v22, 0x32AuLL);
    *(_OWORD *)&v22[812] = 0u;
    v23 = -1;
    v24 = -1;
    ProtobufUtil::fromProtobuf(a2, (uint64_t)&v14);
    v7 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67240704;
      v26 = v14;
      v27 = 1026;
      v28 = v15;
      v29 = 1026;
      v30 = DWORD1(v15);
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "#gdm,#ltl,success,%{public}d,code,%{public}d,type,%{public}d", buf, 0x14u);
    }
    v8 = *(_QWORD *)(a1 + 2360);
    if (!v8)
      sub_100025CE8();
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v8 + 48))(v8, &v14);
    *(_DWORD *)buf = 1;
    v9 = *(_QWORD *)(a3 + 24);
    if (!v9)
      sub_100025CE8();
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v9 + 48))(v9, buf);
    result = *(_QWORD **)(a1 + 2360);
    *(_QWORD *)(a1 + 2360) = 0;
    if (result == (_QWORD *)(a1 + 2336))
    {
      v11 = 4;
      result = (_QWORD *)(a1 + 2336);
    }
    else
    {
      if (!result)
        return result;
      v11 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
  }
  else
  {
    v12 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v14) = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#gdm,#ltl,null callback", (uint8_t *)&v14, 2u);
    }
    v14 = 0;
    v13 = *(_QWORD *)(a3 + 24);
    if (!v13)
      sub_100025CE8();
    return (_QWORD *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v13 + 48))(v13, &v14);
  }
}

_QWORD *sub_10002E744(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *result;
  uint64_t v15;
  _BYTE v16[24];
  _BYTE *v17;
  _QWORD v18[3];
  _QWORD *v19;
  _QWORD v20[3];
  _QWORD *v21;

  v20[0] = off_1000F2928;
  v20[1] = a1;
  v21 = v20;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = a2[8];
  v5 = a2[9];
  v6 = a2[10];
  v7 = a2[11];
  v8 = a2[12];
  v9 = a2[13];
  v19 = v18;
  v18[0] = off_1000F2928;
  v18[1] = a1;
  sub_100031BDC((uint64_t)v16, a3);
  (*(void (**)(uint64_t, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL, _QWORD *, _BYTE *))(*(_QWORD *)v3 + 64))(v3, v4 != 0, v5 != 0, v6 != 0, v7 != 0, v8 != 0, v9 != 0, v18, v16);
  v10 = v17;
  if (v17 == v16)
  {
    v11 = 4;
    v10 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_6;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_6:
  v12 = v19;
  if (v19 == v18)
  {
    v13 = 4;
    v12 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_11;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_11:
  result = v21;
  if (v21 == v20)
  {
    v15 = 4;
    result = v20;
  }
  else
  {
    if (!v21)
      return result;
    v15 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v15))();
}

void sub_10002E8CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;

  v22 = a13;
  if (a13 == &a10)
  {
    v23 = 4;
    v22 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  v24 = a17;
  if (a17 == &a14)
  {
    v25 = 4;
    v24 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_11:
  v26 = a21;
  if (a21 == &a18)
  {
    v27 = 4;
    v26 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_16;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_16:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10002E970(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _BYTE v12[24];
  _BYTE *v13;
  _QWORD v14[3];
  _QWORD *v15;

  if ((a3 & 1) == 0)
  {
    v11 = 4;
    v4 = *(_QWORD *)(a4 + 24);
    if (!v4)
      sub_100025CE8();
    return (_QWORD *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v4 + 48))(v4, &v11);
  }
  v7 = *(_QWORD *)(a1 + 8);
  v14[0] = off_1000F29A8;
  v14[1] = a1;
  v15 = v14;
  sub_100031BDC((uint64_t)v12, a4);
  (*(void (**)(uint64_t, uint64_t, _QWORD *, _BYTE *))(*(_QWORD *)v7 + 104))(v7, a2, v14, v12);
  v8 = v13;
  if (v13 == v12)
  {
    v9 = 4;
    v8 = v12;
    goto LABEL_8;
  }
  if (v13)
  {
    v9 = 5;
LABEL_8:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  result = v15;
  if (v15 == v14)
  {
    v10 = 4;
    result = v14;
  }
  else
  {
    if (!v15)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

void sub_10002EA94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a13;
  if (a13 == v17)
  {
    v20 = 4;
    v19 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = a17;
  if (a17 == &a14)
  {
    v22 = 4;
    v21 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

void sub_10002EB0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  _BYTE *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *__p;
  _BYTE *v17;
  char v18;
  _BYTE v19[48];
  _BYTE v20[24];
  _BYTE *v21;

  sub_1000385C8(&__p, *(int *)(a2 + 16));
  v6 = (char *)__p;
  v7 = v17;
  if (v17 != __p)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      if ((uint64_t)v9 >= *(int *)(a2 + 16))
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v19, 3, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 825);
        v10 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v19, "CHECK failed: (index) < (size()): ");
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v18, v10);
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v19);
        v6 = (char *)__p;
        v7 = v17;
      }
      v11 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v9);
      v12 = &v6[v8];
      *(_QWORD *)v12 = *(_QWORD *)(v11 + 8);
      *((_QWORD *)v12 + 1) = *(_QWORD *)(v11 + 16);
      *((_DWORD *)v12 + 4) = *(_DWORD *)(v11 + 24);
      ++v9;
      v8 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 3) > v9);
  }
  v13 = *(_QWORD *)(a1 + 8);
  sub_100031BDC((uint64_t)v20, a3);
  (*(void (**)(uint64_t, void **, _BYTE *))(*(_QWORD *)v13 + 128))(v13, &__p, v20);
  v14 = v21;
  if (v21 == v20)
  {
    v15 = 4;
    v14 = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_11;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_11:
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_10002ECA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  char *v23;
  char *v25;
  uint64_t v26;

  v25 = a23;
  if (a23 == v23)
  {
    v26 = 4;
    v25 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_6:
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10002ED10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  _BYTE *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *__p;
  _BYTE *v17;
  char v18;
  _BYTE v19[48];
  _BYTE v20[24];
  _BYTE *v21;

  sub_1000385C8(&__p, *(int *)(a2 + 16));
  v6 = (char *)__p;
  v7 = v17;
  if (v17 != __p)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      if ((uint64_t)v9 >= *(int *)(a2 + 16))
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v19, 3, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 825);
        v10 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v19, "CHECK failed: (index) < (size()): ");
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v18, v10);
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v19);
        v6 = (char *)__p;
        v7 = v17;
      }
      v11 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v9);
      v12 = &v6[v8];
      *(_QWORD *)v12 = *(_QWORD *)(v11 + 8);
      *((_QWORD *)v12 + 1) = *(_QWORD *)(v11 + 16);
      *((_DWORD *)v12 + 4) = *(_DWORD *)(v11 + 24);
      ++v9;
      v8 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 3) > v9);
  }
  v13 = *(_QWORD *)(a1 + 8);
  sub_100031BDC((uint64_t)v20, a3);
  (*(void (**)(uint64_t, void **, _BYTE *))(*(_QWORD *)v13 + 136))(v13, &__p, v20);
  v14 = v21;
  if (v21 == v20)
  {
    v15 = 4;
    v14 = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_11;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_11:
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_10002EEA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  char *v23;
  char *v25;
  uint64_t v26;

  v25 = a23;
  if (a23 == v23)
  {
    v26 = 4;
    v25 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_6:
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10002EF14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _BYTE v11[24];
  _BYTE *v12;

  if ((~*(_DWORD *)(a2 + 36) & 7) != 0)
  {
    v10 = 4;
    v9 = *(_QWORD *)(a3 + 24);
    if (!v9)
      sub_100025CE8();
    return (_QWORD *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v9 + 48))(v9, &v10);
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(double *)(a2 + 16);
    v6 = *(double *)(a2 + 24);
    sub_100031BDC((uint64_t)v11, a3);
    (*(void (**)(uint64_t, uint64_t, _BYTE *, double, double))(*(_QWORD *)v3 + 144))(v3, v4, v11, v5, v6);
    result = v12;
    if (v12 == v11)
    {
      v8 = 4;
      result = v11;
    }
    else
    {
      if (!v12)
        return result;
      v8 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
  }
}

void sub_10002F010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10002F050(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  NSObject *v5;
  uint64_t v6;
  _QWORD *result;
  _BOOL8 v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  _BOOL8 v17;
  _BOOL8 v18;
  _BOOL8 v19;
  _BOOL8 v20;
  _BOOL4 v21;
  uint64_t v22;
  uint8_t buf[8];
  _BYTE v24[24];
  _BYTE *v25;

  v4 = *(_DWORD *)(a2 + 76);
  if ((~v4 & 0xFEF) != 0)
  {
    *(_DWORD *)buf = 4;
    v6 = *(_QWORD *)(a3 + 24);
    if (!v6)
      sub_100025CE8();
    return (_QWORD *)(*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v6 + 48))(v6, buf);
  }
  if ((v4 & 0x10) == 0 && *(_BYTE *)(a2 + 64))
  {
    v5 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#gdm,Missing segment_start_alt_wgs84", buf, 2u);
    }
    *(_DWORD *)buf = 4;
    v6 = *(_QWORD *)(a3 + 24);
    if (!v6)
      sub_100025CE8();
    return (_QWORD *)(*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v6 + 48))(v6, buf);
  }
  v8 = *(unsigned __int8 *)(a2 + 64) != 0;
  v9 = *(double *)(a2 + 40);
  if ((v4 & 0x10) != 0)
    v10 = *(double *)(a2 + 32);
  else
    v10 = 0.0;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a2 + 8);
  v14 = *(double *)(a2 + 16);
  v13 = *(double *)(a2 + 24);
  v16 = *(double *)(a2 + 48);
  v15 = *(double *)(a2 + 56);
  v17 = *(_BYTE *)(a2 + 65) != 0;
  v18 = *(_BYTE *)(a2 + 66) != 0;
  v19 = *(_BYTE *)(a2 + 67) != 0;
  v20 = *(_BYTE *)(a2 + 68) != 0;
  v21 = *(_BYTE *)(a2 + 69) != 0;
  sub_100031BDC((uint64_t)v24, a3);
  (*(void (**)(uint64_t, uint64_t, _BOOL8, _BOOL8, _BOOL8, _BOOL8, _BOOL8, _QWORD, double, double, double, double, double, double, _BYTE *))(*(_QWORD *)v11 + 152))(v11, v12, v8, v17, v18, v19, v20, v21 & (v4 >> 12), v14, v13, v10, v9, v16, v15, v24);
  result = v25;
  if (v25 == v24)
  {
    v22 = 4;
    result = v24;
  }
  else
  {
    if (!v25)
      return result;
    v22 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v22))();
}

void sub_10002F278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10002F2BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _BYTE v12[24];
  _BYTE *v13;

  if ((~*(_DWORD *)(a2 + 44) & 0xF) != 0)
  {
    v11 = 4;
    v10 = *(_QWORD *)(a3 + 24);
    if (!v10)
      sub_100025CE8();
    return (_QWORD *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v10 + 48))(v10, &v11);
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(double *)(a2 + 16);
    v6 = *(double *)(a2 + 24);
    v7 = *(double *)(a2 + 32);
    sub_100031BDC((uint64_t)v12, a3);
    (*(void (**)(uint64_t, uint64_t, _BYTE *, double, double, double))(*(_QWORD *)v3 + 184))(v3, v4, v12, v5, v6, v7);
    result = v13;
    if (v13 == v12)
    {
      v9 = 4;
      result = v12;
    }
    else
    {
      if (!v13)
        return result;
      v9 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
  }
}

void sub_10002F3C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10002F408(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _BYTE v11[24];
  _BYTE *v12;

  if ((~*(_DWORD *)(a2 + 36) & 7) != 0)
  {
    v10 = 4;
    v9 = *(_QWORD *)(a3 + 24);
    if (!v9)
      sub_100025CE8();
    return (_QWORD *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v9 + 48))(v9, &v10);
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(double *)(a2 + 16);
    v6 = *(double *)(a2 + 24);
    sub_100031BDC((uint64_t)v11, a3);
    (*(void (**)(uint64_t, uint64_t, _BYTE *, double, double))(*(_QWORD *)v3 + 192))(v3, v4, v11, v5, v6);
    result = v12;
    if (v12 == v11)
    {
      v8 = 4;
      result = v11;
    }
    else
    {
      if (!v12)
        return result;
      v8 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
  }
}

void sub_10002F504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10002F544(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  uint8_t buf[4];
  int v15;

  v6 = *(unsigned int *)(a2 + 16);
  v7 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#gdm,thermalRisk,%{public}d", buf, 8u);
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a2 + 8);
  sub_100031BDC((uint64_t)v12, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v8 + 200))(v8, v9, v6, v12);
  result = v13;
  if (v13 == v12)
  {
    v11 = 4;
    result = v12;
  }
  else
  {
    if (!v13)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_10002F65C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10002F69C(gpsd::util *a1, uint64_t a2, uint64_t a3)
{
  gpsd::util *v5;
  id *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _BYTE v16[24];
  _BYTE *v17;

  if ((~*(_DWORD *)(a2 + 20) & 3) != 0)
  {
    v15 = 4;
    v9 = *(_QWORD *)(a3 + 24);
    if (!v9)
      sub_100025CE8();
    return (_QWORD *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v9 + 48))(v9, &v15);
  }
  v5 = a1;
  if (!*(_BYTE *)(a2 + 8))
  {
LABEL_6:
    v8 = 0;
    goto LABEL_10;
  }
  v6 = (id *)GpsdPreferences::instance(0);
  a1 = (gpsd::util *)GpsdPreferences::forceEnableXocalLearning(v6);
  if ((_DWORD)a1)
  {
    v7 = qword_100100830;
    a1 = (gpsd::util *)os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT);
    v8 = 0;
    if (!(_DWORD)a1)
      goto LABEL_10;
    LOWORD(v15) = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#gdm,#xocal,force enable by preference", (uint8_t *)&v15, 2u);
    goto LABEL_6;
  }
  v8 = 1;
LABEL_10:
  if (!*((_BYTE *)v5 + 1848) && !*((_BYTE *)v5 + 1896) && !*((_BYTE *)v5 + 1897))
    *((double *)v5 + 233) = (double)gpsd::util::getMachContinuousTimeNs(a1) * 0.000000001;
  v11 = *((_QWORD *)v5 + 1);
  v12 = *(_BYTE *)(a2 + 8) != 0;
  v13 = *(unsigned int *)(a2 + 12);
  sub_100031BDC((uint64_t)v16, a3);
  (*(void (**)(uint64_t, _BOOL8, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v11 + 216))(v11, v12, v13, v8, v16);
  result = v17;
  if (v17 == v16)
  {
    v14 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      return result;
    v14 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v14))();
}

void sub_10002F844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_10002F888(uint64_t a1, int a2)
{
  int v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  _DWORD v7[2];

  v3 = ProtobufUtil::fromProtobuf(a2);
  v4 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67240192;
    v7[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#gdm,#cntin,status update,%{public}d", (uint8_t *)v7, 8u);
  }
  v5 = *(_QWORD *)(a1 + 2392);
  if (v5)
  {
    v7[0] = v3;
    (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v5 + 48))(v5, v7);
  }
  else
  {
    v6 = qword_100100830;
    if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v7[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#gdm,#cntin,no callback to send update", (uint8_t *)v7, 2u);
    }
  }
}

void sub_10002F998(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint8_t v13[8];
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  _QWORD *v17;

  v4 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#gdm,startEmerg,initiated", v13, 2u);
  }
  if (*(_BYTE *)(a1 + 1896))
  {
    v5 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v13 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#gdm,#nilr,Already in Emergency Mode", v13, 2u);
    }
    sub_10000F140(a1, (proto::gpsd *)0x33, 0);
    return;
  }
  sub_10000559C((gpsd::util *)a1);
  *(_BYTE *)(a1 + 1896) = 1;
  if (*(_QWORD *)(a1 + 1904))
  {
    v6 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#gdm,#nilr_start,Overlap with previous stop timer", v13, 2u);
    }
    sub_100003144(a1);
    *(_DWORD *)(a1 + 1900) = 7;
  }
  v7 = *(_QWORD *)(a1 + 8);
  v8 = sub_100003590(a2);
  v16[0] = off_1000F2CA8;
  v16[1] = a1;
  v17 = v16;
  v14[0] = off_1000F2D28;
  v15 = v14;
  (*(void (**)(uint64_t, unint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v7 + 264))(v7, v8, v16, v14);
  v9 = v15;
  if (v15 == v14)
  {
    v10 = 4;
    v9 = v14;
    goto LABEL_15;
  }
  if (v15)
  {
    v10 = 5;
LABEL_15:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  v11 = v17;
  if (v17 == v16)
  {
    v12 = 4;
    v11 = v16;
  }
  else
  {
    if (!v17)
      return;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
}

void sub_10002FBA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a13;
  if (a13 == v17)
  {
    v20 = 4;
    v19 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = a17;
  if (a17 == &a14)
  {
    v22 = 4;
    v21 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

void sub_10002FC10(uint64_t a1)
{
  NSObject *v2;
  _BOOL8 v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  uint8_t v10[8];
  _QWORD v11[3];
  _QWORD *v12;
  _QWORD v13[3];
  _QWORD *v14;

  v2 = qword_100100838;
  v3 = os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gdm,#nilr_stop,initiated", v10, 2u);
  }
  if (!*(_BYTE *)(a1 + 1896))
  {
    v7 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#gdm,#nilr_stop,Device was already stopped", v10, 2u);
    }
    sub_10000F140(a1, (proto::gpsd *)0x34, 1u);
    return;
  }
  *(_BYTE *)(a1 + 1896) = 0;
  *(double *)(a1 + 1856) = (double)gpsd::util::getMachContinuousTimeNs((gpsd::util *)v3) * 0.000000001;
  sub_100002DE0(a1);
  v4 = *(_QWORD *)(a1 + 8);
  v13[0] = off_1000F2EA8;
  v13[1] = a1;
  v14 = v13;
  v11[0] = off_1000F2F28;
  v11[1] = a1;
  v12 = v11;
  (*(void (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v4 + 272))(v4, v13, v11);
  v5 = v12;
  if (v12 == v11)
  {
    v6 = 4;
    v5 = v11;
    goto LABEL_11;
  }
  if (v12)
  {
    v6 = 5;
LABEL_11:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  v8 = v14;
  if (v14 == v13)
  {
    v9 = 4;
    v8 = v13;
  }
  else
  {
    if (!v14)
      return;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
}

void sub_10002FDC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a13;
  if (a13 == v17)
  {
    v20 = 4;
    v19 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = a17;
  if (a17 == &a14)
  {
    v22 = 4;
    v21 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t sub_10002FE30(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_10002FE70(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  NSObject *v8;
  uint64_t v9;
  _QWORD *result;
  _DWORD *v11;
  gpsd::util *v12;
  double v13;
  int v14;
  int v16;
  NSObject *v17;
  NSObject *v18;
  const proto::gnss::Emergency::CplaneContext *v19;
  proto::gnss::Emergency::CplaneContext *v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  unint64_t v26;
  int v27;
  uint8_t v28[4];
  int v29;
  unsigned __int16 v30;
  char v31;
  int v32;
  __int16 v33;
  char v34;
  uint64_t v35;
  int v36;
  char v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD *v40;
  _QWORD v41[3];
  _QWORD *v42;
  _BYTE buf[26];
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;

  if (!*(_BYTE *)(a1 + 1848) && !*(_BYTE *)(a1 + 1896) && !*(_BYTE *)(a1 + 1897))
    sub_10000559C((gpsd::util *)a1);
  *(_BYTE *)(a1 + 1897) = 1;
  if ((*(_BYTE *)(a2 + 392) & 1) != 0)
  {
    *(_WORD *)v28 = -1;
    v29 = -1;
    v30 = -1;
    v31 = 0;
    v32 = -1;
    v33 = 0;
    v34 = 0;
    v35 = -1;
    v36 = -16777216;
    v37 = -1;
    v38 = -1;
    v11 = *(_DWORD **)(a2 + 256);
    if (!v11)
      v11 = *(_DWORD **)(proto::gpsd::Request::default_instance_ + 256);
    ProtobufUtil::fromProtobuf(v11, (uint64_t)v28);
    v13 = (double)gpsd::util::getMachContinuousTimeNs(v12) * 0.000000001 - (double)a3 * 0.000000001;
    v14 = v30;
    if (v13 > 0.0 && v13 <= 10.0)
    {
      v16 = llround(v13);
      v14 = v30 - v16;
      if (v30 <= v16)
      {
        v17 = qword_100100838;
        if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67240192;
          *(_DWORD *)&buf[4] = v14;
          _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "#cp,startEmergencyPosition timeout adjustment,out of range,%{public}d", buf, 8u);
        }
        v14 = 1;
      }
    }
    v18 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349568;
      *(double *)&buf[4] = v13;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v30;
      *(_WORD *)&buf[18] = 1026;
      *(_DWORD *)&buf[20] = v14;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#cp,startEmergencyPosition timeout adjustment,age,%{public}.4f,prev,%{public}hu,resolved,%{public}d", buf, 0x18u);
    }
    v30 = v14;
    if ((*(_DWORD *)(GpsdPlatformInfo::instance(0) + 8) - 201) > 1)
    {
      v24 = *(_QWORD *)(a1 + 8);
      v39[0] = off_1000F2AA8;
      v39[1] = a1;
      v40 = v39;
      (*(void (**)(uint64_t, uint8_t *, _QWORD *))(*(_QWORD *)v24 + 328))(v24, v28, v39);
      result = v40;
      if (v40 == v39)
      {
        v23 = 4;
        result = v39;
        return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v23))();
      }
    }
    else
    {
      v25 = 257;
      v26 = 0xBFF0000000000000;
      v27 = 0;
      if ((*(_BYTE *)(a2 + 392) & 0x80) != 0)
      {
        v19 = *(const proto::gnss::Emergency::CplaneContext **)(a2 + 312);
        if (!v19)
          v19 = *(const proto::gnss::Emergency::CplaneContext **)(proto::gpsd::Request::default_instance_ + 312);
        v20 = proto::gnss::Emergency::CplaneContext::CplaneContext((proto::gnss::Emergency::CplaneContext *)buf, v19);
        ProtobufUtil::fromProtobuf((uint64_t)v20, (uint64_t)&v25);
        *(_QWORD *)buf = off_1000F67E8;
        if ((_BYTE *)proto::gnss::Emergency::CplaneContext::default_instance_ != buf)
        {
          if (*(_QWORD *)&buf[8])
            (*(void (**)(_QWORD))(**(_QWORD **)&buf[8] + 8))(*(_QWORD *)&buf[8]);
          if (*(_QWORD *)&buf[16])
            (*(void (**)(_QWORD))(**(_QWORD **)&buf[16] + 8))(*(_QWORD *)&buf[16]);
        }
        wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)buf);
      }
      v21 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67241472;
        *(_DWORD *)&buf[4] = v25;
        *(_WORD *)&buf[8] = 1026;
        *(_DWORD *)&buf[10] = HIBYTE(v25);
        *(_WORD *)&buf[14] = 1026;
        *(_DWORD *)&buf[16] = v27;
        *(_WORD *)&buf[20] = 1026;
        *(_DWORD *)&buf[22] = HIBYTE(v27);
        v44 = 1026;
        v45 = BYTE1(v27);
        v46 = 1026;
        v47 = BYTE2(v27);
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#gdm,#nilr,#cp,cplaneContext,heloEnabled,%{public}d,cplane_early_return,%{public}d,include1xMsb,%{public}d,useCdmaTimeForMeas,%{public}d,optimizeGnssMeasWith1xMsb,%{public}d,optimizeAfltMeasWith1xMsb,%{public}d", buf, 0x26u);
      }
      v22 = *(_QWORD *)(a1 + 8);
      v41[0] = off_1000F2A28;
      v41[1] = a1;
      v42 = v41;
      (*(void (**)(uint64_t, uint8_t *, __int16 *, _QWORD *))(*(_QWORD *)v22 + 320))(v22, v28, &v25, v41);
      result = v42;
      if (v42 == v41)
      {
        v23 = 4;
        result = v41;
        return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v23))();
      }
    }
    if (!result)
      return result;
    v23 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v23))();
  }
  v8 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v28 = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#gdm,#nilr,#cp,PositionRequest payload is missing", v28, 2u);
  }
  *(_DWORD *)v28 = 4;
  v9 = *(_QWORD *)(a4 + 24);
  if (!v9)
    sub_100025CE8();
  return (_QWORD *)(*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v9 + 48))(v9, v28);
}

void sub_1000302C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char *a26)
{
  char *v26;
  char *v28;
  uint64_t v29;

  v28 = a26;
  if (a26 == v26)
  {
    v29 = 4;
    v28 = &a23;
  }
  else
  {
    if (!a26)
      goto LABEL_6;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100030320(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  NSObject *v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD v11[3];
  _QWORD *v12;

  *(_BYTE *)(a1 + 1897) = 0;
  if ((a3 & 2) != 0)
  {
    v8 = *(_QWORD *)(a1 + 8);
    v11[0] = off_1000F2B28;
    v11[1] = a1;
    v12 = v11;
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v8 + 336))(v8, a2, v11);
    result = v12;
    if (v12 == v11)
    {
      v9 = 4;
      result = v11;
    }
    else
    {
      if (!v12)
        return result;
      v9 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
  }
  else
  {
    v5 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v10) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#gdm,#nilr,#cp,session_id is missing", (uint8_t *)&v10, 2u);
    }
    v10 = 4;
    v6 = *(_QWORD *)(a4 + 24);
    if (!v6)
      sub_100025CE8();
    return (_QWORD *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v6 + 48))(v6, &v10);
  }
}

void sub_100030440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

double sub_100030480(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  uint64_t v3;
  double result;

  *(_BYTE *)a1 = -1;
  v1 = 4;
  *(_QWORD *)&v2 = 0x8000000080000000;
  *((_QWORD *)&v2 + 1) = 0x8000000080000000;
  do
  {
    v3 = a1 + v1;
    *(_OWORD *)v3 = xmmword_1000CED20;
    *(_OWORD *)(v3 + 16) = v2;
    *(_OWORD *)(v3 + 32) = xmmword_1000CED30;
    *(_QWORD *)(v3 + 48) = 0x8000800080008000;
    *(_DWORD *)(v3 + 56) = 0x80000000;
    *(_WORD *)(v3 + 60) = -1;
    *(_DWORD *)(v3 + 64) = -1;
    *(_BYTE *)(v3 + 68) = 127;
    *(_DWORD *)(v3 + 72) = -1;
    v1 += 96;
    *(_BYTE *)(v3 + 76) = -1;
  }
  while (v3 + 96 != a1 + 1540);
  *(_DWORD *)(a1 + 1540) = -1;
  result = NAN;
  *(_QWORD *)(a1 + 1544) = -1;
  return result;
}

double sub_100030504(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double result;

  v1 = 0;
  *(_DWORD *)a1 = -1;
  *(_BYTE *)(a1 + 4) = -1;
  *(_DWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 12) = -1;
  *(_DWORD *)(a1 + 16) = -1;
  *(_WORD *)(a1 + 20) = -1;
  *(_QWORD *)(a1 + 24) = -1;
  *(_WORD *)(a1 + 32) = -1;
  *(_DWORD *)(a1 + 36) = -1;
  do
  {
    v2 = a1 + v1;
    *(_QWORD *)(v2 + 40) = 0xFFFFFFFF7FFFFFFFLL;
    *(_BYTE *)(v2 + 48) = -1;
    *(_DWORD *)(v2 + 50) = -1;
    *(_WORD *)(v2 + 54) = -1;
    v1 += 20;
  }
  while (v1 != 320);
  *(_BYTE *)(a1 + 360) = -1;
  *(_DWORD *)(a1 + 364) = -1;
  result = NAN;
  *(_QWORD *)(a1 + 368) = -1;
  return result;
}

void sub_10003057C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  NSObject *v5;
  uint64_t v6;
  size_t v8;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  int v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  size_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char v25;
  int v26;
  int v27;
  NSObject *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint8_t buf[16];
  uint8_t v33[8];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  int v47;
  void *__p;
  char *v49;
  char *v50;
  _DWORD v51[2];
  __int16 v52;
  char v53;
  char v54;
  __int128 v55;
  _DWORD v56[11];
  char v57;
  __int128 v58;
  _DWORD v59[8];
  uint64_t v60;

  v4 = *(_DWORD *)(a2 + 392);
  if ((v4 & 0x2000) == 0 || (v4 & 0x400) == 0 || (v8 = *(unsigned int *)(a2 + 328), (int)v8 <= 0))
  {
    v5 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v33 = 0;
      _os_log_fault_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "#gdm,#nilr,#supl,DECODE_SUPL_INIT malformed payload", v33, 2u);
    }
    *(_DWORD *)v33 = 4;
    v6 = *(_QWORD *)(a3 + 24);
    if (v6)
    {
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v6 + 48))(v6, v33);
      return;
    }
LABEL_51:
    sub_100025CE8();
  }
  *(_DWORD *)v33 = 1;
  v10 = *(_QWORD *)(a3 + 24);
  if (!v10)
    goto LABEL_51;
  v31 = a1;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v10 + 48))(v10, v33);
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v57 = 0;
  v58 = 0u;
  memset(v59, 0, sizeof(v59));
  v60 = 0;
  v51[0] = 0;
  *(_DWORD *)((char *)v51 + 3) = 0;
  v55 = 0u;
  memset(v56, 0, 38);
  __p = 0;
  v49 = 0;
  v50 = 0;
  sub_100008DCC((unint64_t *)&__p, v8);
  for (i = 0; i != v8; ++i)
  {
    if (i >= *(int *)(a2 + 328))
    {
      wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v33, 3, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 614);
      v12 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v33, "CHECK failed: (index) < (size()): ");
      wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(buf, v12);
      wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v33);
    }
    v13 = *(_DWORD *)(*(_QWORD *)(a2 + 320) + 4 * i);
    v14 = v49;
    if (v49 >= v50)
    {
      v16 = (unint64_t)__p;
      v17 = v49 - (_BYTE *)__p;
      v18 = v49 - (_BYTE *)__p + 1;
      if (v18 < 0)
        sub_100026868();
      v19 = v50 - (_BYTE *)__p;
      if (2 * (v50 - (_BYTE *)__p) > (unint64_t)v18)
        v18 = 2 * v19;
      if (v19 >= 0x3FFFFFFFFFFFFFFFLL)
        v20 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v20 = v18;
      if (v20)
        v21 = (char *)operator new(v20);
      else
        v21 = 0;
      v22 = &v21[v17];
      v23 = &v21[v17];
      *v23 = v13;
      v15 = v23 + 1;
      if (v14 != (char *)v16)
      {
        v24 = &v14[~v16];
        do
        {
          v25 = *--v14;
          (v24--)[(_QWORD)v21] = v25;
        }
        while (v14 != (char *)v16);
        v14 = (char *)__p;
        v22 = v21;
      }
      __p = v22;
      v49 = v15;
      v50 = &v21[v20];
      if (v14)
        operator delete(v14);
    }
    else
    {
      *v49 = v13;
      v15 = v14 + 1;
    }
    v49 = v15;
  }
  *(_QWORD *)v33 = off_1000F9B50;
  v34 = 0u;
  v46 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  LODWORD(v34) = 16;
  v26 = *(_DWORD *)(a2 + 364);
  v47 = 134217729;
  DWORD2(v46) = v26;
  v27 = (*(uint64_t (**)(_QWORD, void **, _DWORD *))(**(_QWORD **)(v31 + 8) + 400))(*(_QWORD *)(v31 + 8), &__p, v51);
  v28 = qword_100100838;
  if (v27)
  {
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#gdm,#nilr,#supl,Supl Init Decode Success", buf, 2u);
    }
    v47 |= 0x1000000u;
    if (!(_QWORD)v45)
      operator new();
    ProtobufUtil::toProtobuf((uint64_t)v51, v45);
    v29 = *(_DWORD *)(a2 + 300);
    v47 |= 0x2000000u;
    DWORD2(v45) = v29;
    v30 = 1;
  }
  else if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    v30 = 2;
    _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "#gdm,#nilr,#supl,Supl Init Decode failure", buf, 2u);
  }
  else
  {
    v30 = 2;
  }
  v47 |= 0x4000000u;
  HIDWORD(v45) = v30;
  sub_10001A330(v31, (uint64_t)v33);
  *(_QWORD *)v33 = off_1000F9B50;
  proto::gpsd::Indication::SharedDtor(v33);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)v33);
  if (__p)
  {
    v49 = (char *)__p;
    operator delete(__p);
  }
  if (*(_QWORD *)&v59[3])
  {
    *(_QWORD *)&v59[5] = *(_QWORD *)&v59[3];
    operator delete(*(void **)&v59[3]);
  }
  if (SHIBYTE(v59[2]) < 0)
    operator delete(*(void **)((char *)&v58 + 4));
  if (*(_QWORD *)&v56[3])
  {
    *(_QWORD *)&v56[5] = *(_QWORD *)&v56[3];
    operator delete(*(void **)&v56[3]);
  }
  if (SHIBYTE(v56[2]) < 0)
    operator delete(*(void **)((char *)&v55 + 4));
}

void sub_1000309F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43)
{
  uint64_t v43;
  uint64_t v44;

  a13 = v43 + 16;
  proto::gpsd::Indication::SharedDtor(&a13);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)&a13);
  if (__p)
  {
    a43 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_1000314A8(v44 - 240);
  _Unwind_Resume(a1);
}

void sub_100030A54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const proto::gnss::Emergency::SuplContext *v6;
  NSObject *v7;
  void *v8;
  void **v9;
  _QWORD *v10;
  size_t v11;
  uint64_t i;
  uint64_t v13;
  int v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  size_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  unint64_t *v39;
  uint64_t k;
  uint64_t v41;
  int v42;
  _BYTE *v43;
  unint64_t v44;
  _BYTE *v45;
  unint64_t v46;
  _BYTE *v47;
  unint64_t v48;
  unint64_t v49;
  size_t v50;
  char *v51;
  char *v52;
  _BYTE *v53;
  _BYTE *v54;
  char v55;
  unint64_t *v56;
  uint64_t j;
  uint64_t v58;
  int v59;
  _BYTE *v60;
  unint64_t v61;
  _BYTE *v62;
  unint64_t v63;
  _BYTE *v64;
  unint64_t v65;
  unint64_t v66;
  size_t v67;
  char *v68;
  char *v69;
  _BYTE *v70;
  _BYTE *v71;
  char v72;
  std::mutex *v73;
  std::mutex *v74;
  size_t __sz;
  void *__p;
  char *v77;
  char *v78;
  unsigned __int16 v79;
  void *v80[2];
  uint64_t v81;
  unsigned __int8 v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  __int16 v86;
  char v87;
  __int16 v88;
  unint64_t v89;
  char v90;
  uint8_t v91[48];
  _BYTE v92[24];
  _BYTE *v93;
  _BYTE v94[24];
  _BYTE *v95;
  uint8_t buf[8];
  __int16 v97;
  void *v98;
  __int16 v99;
  _DWORD v100[15];
  char v101;
  __int128 v102;
  _DWORD v103[8];
  uint64_t v104;

  v79 = -1;
  v80[1] = 0;
  v81 = 0;
  v80[0] = 0;
  v82 = 0;
  v84 = 0;
  v85 = 0;
  v83 = 0;
  v86 = 0;
  v87 = 1;
  v88 = 257;
  v89 = 0xBFF0000000000000;
  if ((*(_BYTE *)(a2 + 393) & 0x40) != 0)
  {
    v6 = *(const proto::gnss::Emergency::SuplContext **)(a2 + 368);
    if (!v6)
      v6 = *(const proto::gnss::Emergency::SuplContext **)(proto::gpsd::Request::default_instance_ + 368);
    proto::gnss::Emergency::SuplContext::SuplContext((proto::gnss::Emergency::SuplContext *)buf, v6);
    ProtobufUtil::fromProtobuf((std::string *)buf, (uint64_t)&v79);
    if ((v100[8] & 0x20) != 0)
      std::string::operator=((std::string *)(a1 + 2096), *(const std::string **)&v100[5]);
    *(_QWORD *)buf = off_1000F48F8;
    proto::gnss::Emergency::SuplContext::SharedDtor(buf);
    wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)buf);
  }
  v7 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    if (v85 >= 0)
      v8 = &v83;
    else
      v8 = v83;
    v9 = (void **)v80[0];
    if (v81 >= 0)
      v9 = v80;
    v10 = (_QWORD *)(a1 + 2096);
    if (*(char *)(a1 + 2119) < 0)
      v10 = (_QWORD *)*v10;
    *(_DWORD *)buf = 67110659;
    *(_DWORD *)&buf[4] = v88;
    v97 = 2081;
    v98 = v8;
    v99 = 1024;
    v100[0] = v82;
    LOWORD(v100[1]) = 1024;
    *(_DWORD *)((char *)&v100[1] + 2) = v79;
    HIWORD(v100[2]) = 2081;
    *(_QWORD *)&v100[3] = v9;
    LOWORD(v100[5]) = 1024;
    *(_DWORD *)((char *)&v100[5] + 2) = HIBYTE(v88);
    HIWORD(v100[6]) = 2080;
    *(_QWORD *)&v100[7] = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#gdm,#nilr,emergContext,heloEnabled,%d,imsi,%{private}s,supl_enable_msa,%d,suplPort,%d,suplServer,%{private}s,cplane_early_return,%d,nsuuid,%s", buf, 0x38u);
    v7 = qword_100100838;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#gdm,#nilr,#supl,SET_SUPL_INIT", buf, 2u);
  }
  v11 = *(unsigned int *)(a2 + 328);
  if ((int)v11 >= 1 && (*(_BYTE *)(a2 + 393) & 0x10) != 0)
  {
    __sz = *(unsigned int *)(a2 + 352);
    if ((int)__sz >= 1)
    {
      v97 = 0;
      LOBYTE(v98) = 0;
      BYTE6(v98) = 0;
      v101 = 0;
      v102 = 0u;
      memset(v103, 0, sizeof(v103));
      v104 = 0;
      *(_DWORD *)buf = 0;
      *(_DWORD *)&buf[3] = 0;
      memset(v100, 0, 54);
      __p = 0;
      v77 = 0;
      v78 = 0;
      sub_100008DCC((unint64_t *)&__p, v11);
      v73 = (std::mutex *)a3;
      for (i = 0; i != v11; ++i)
      {
        if (i >= *(int *)(a2 + 328))
        {
          wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v91, 3, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 614);
          v13 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v91, "CHECK failed: (index) < (size()): ");
          wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v90, v13);
          wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v91);
        }
        v14 = *(_DWORD *)(*(_QWORD *)(a2 + 320) + 4 * i);
        v15 = v77;
        if (v77 >= v78)
        {
          v17 = (unint64_t)__p;
          v18 = v77 - (_BYTE *)__p;
          v19 = v77 - (_BYTE *)__p + 1;
          if (v19 < 0)
            sub_100026868();
          v20 = v78 - (_BYTE *)__p;
          if (2 * (v78 - (_BYTE *)__p) > (unint64_t)v19)
            v19 = 2 * v20;
          if (v20 >= 0x3FFFFFFFFFFFFFFFLL)
            v21 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v21 = v19;
          if (v21)
            v22 = (char *)operator new(v21);
          else
            v22 = 0;
          v23 = &v22[v18];
          v24 = &v22[v18];
          *v24 = v14;
          v16 = v24 + 1;
          if (v15 != (char *)v17)
          {
            v25 = &v15[~v17];
            do
            {
              v26 = *--v15;
              (v25--)[(_QWORD)v22] = v26;
            }
            while (v15 != (char *)v17);
            v15 = (char *)__p;
            v23 = v22;
          }
          __p = v23;
          v77 = v16;
          v78 = &v22[v21];
          if (v15)
            operator delete(v15);
        }
        else
        {
          *v77 = v14;
          v16 = v15 + 1;
        }
        v77 = v16;
      }
      SuplPduLog::traceSuplPdu((SuplPduLog *)__p, (const unsigned __int8 *)(v16 - (_BYTE *)__p), 1);
      if ((*(_DWORD *)(GpsdPlatformInfo::instance(0) + 8) - 201) <= 1)
      {
        v27 = HIBYTE(v85);
        if (v85 < 0)
          v27 = v84;
        if (!v27)
        {
          v37 = qword_100100838;
          if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)v91 = 0;
            _os_log_error_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "#gdm,#nilr,#supl,SET_SUPL_INIT received without valid IMSI", v91, 2u);
          }
          *(_DWORD *)v91 = 4;
          v38 = *(_QWORD *)&v73->__m_.__opaque[16];
          if (!v38)
            sub_100025CE8();
          (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v38 + 48))(v38, v91);
          goto LABEL_110;
        }
        v28 = *(_QWORD *)(a1 + 8);
        sub_100031BDC((uint64_t)v94, (uint64_t)v73);
        (*(void (**)(uint64_t, void **, unsigned __int16 *, _BYTE *))(*(_QWORD *)v28 + 408))(v28, &__p, &v79, v94);
        v29 = v95;
        if (v95 == v94)
        {
          v30 = 4;
          v29 = v94;
        }
        else
        {
          if (!v95)
            goto LABEL_88;
          v30 = 5;
        }
        (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_88:
        std::mutex::lock((std::mutex *)(a1 + 2144));
        v74 = (std::mutex *)(a1 + 2144);
        *(_BYTE *)(a1 + 2092) = *(_BYTE *)(a2 + 360);
        v56 = (unint64_t *)(a1 + 2120);
        *(_QWORD *)(a1 + 2128) = *(_QWORD *)(a1 + 2120);
        sub_100008DCC((unint64_t *)(a1 + 2120), __sz);
        for (j = 0; j != __sz; ++j)
        {
          if (j >= *(int *)(a2 + 352))
          {
            wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v91, 3, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 614);
            v58 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v91, "CHECK failed: (index) < (size()): ");
            wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v90, v58);
            wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v91);
          }
          v59 = *(_DWORD *)(*(_QWORD *)(a2 + 344) + 4 * j);
          v60 = *(_BYTE **)(a1 + 2128);
          v61 = *(_QWORD *)(a1 + 2136);
          if ((unint64_t)v60 >= v61)
          {
            v63 = *v56;
            v64 = &v60[-*v56];
            v65 = (unint64_t)(v64 + 1);
            if ((uint64_t)(v64 + 1) < 0)
              sub_100026868();
            v66 = v61 - v63;
            if (2 * v66 > v65)
              v65 = 2 * v66;
            if (v66 >= 0x3FFFFFFFFFFFFFFFLL)
              v67 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v67 = v65;
            if (v67)
              v68 = (char *)operator new(v67);
            else
              v68 = 0;
            v69 = &v64[(_QWORD)v68];
            v70 = &v64[(_QWORD)v68];
            *v70 = v59;
            v62 = v70 + 1;
            if (v60 != (_BYTE *)v63)
            {
              v71 = &v60[~v63];
              do
              {
                v72 = *--v60;
                (v71--)[(_QWORD)v68] = v72;
              }
              while (v60 != (_BYTE *)v63);
              v60 = (_BYTE *)*v56;
              v69 = v68;
            }
            *(_QWORD *)(a1 + 2120) = v69;
            *(_QWORD *)(a1 + 2128) = v62;
            *(_QWORD *)(a1 + 2136) = &v68[v67];
            if (v60)
              operator delete(v60);
          }
          else
          {
            *v60 = v59;
            v62 = v60 + 1;
          }
          *(_QWORD *)(a1 + 2128) = v62;
        }
LABEL_109:
        std::mutex::unlock(v74);
LABEL_110:
        if (__p)
        {
          v77 = (char *)__p;
          operator delete(__p);
        }
        if (*(_QWORD *)&v103[3])
          operator delete(*(void **)&v103[3]);
        if (SHIBYTE(v103[2]) < 0)
          operator delete(*(void **)((char *)&v102 + 4));
        if (*(_QWORD *)&v100[7])
          operator delete(*(void **)&v100[7]);
        if (SHIBYTE(v100[6]) < 0)
          operator delete(*(void **)&v100[1]);
        goto LABEL_120;
      }
      v33 = *(_DWORD *)(GpsdPlatformInfo::instance(0) + 8) - 103;
      if (v33 > 4 || ((1 << v33) & 0x19) == 0)
        goto LABEL_110;
      v34 = *(_QWORD *)(a1 + 8);
      sub_100031BDC((uint64_t)v92, (uint64_t)v73);
      (*(void (**)(uint64_t, void **, _BYTE *))(*(_QWORD *)v34 + 416))(v34, &__p, v92);
      v35 = v93;
      if (v93 == v92)
      {
        v36 = 4;
        v35 = v92;
      }
      else
      {
        if (!v93)
          goto LABEL_64;
        v36 = 5;
      }
      (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_64:
      std::mutex::lock((std::mutex *)(a1 + 2144));
      v74 = (std::mutex *)(a1 + 2144);
      *(_BYTE *)(a1 + 2092) = *(_BYTE *)(a2 + 360);
      v39 = (unint64_t *)(a1 + 2120);
      *(_QWORD *)(a1 + 2128) = *(_QWORD *)(a1 + 2120);
      sub_100008DCC((unint64_t *)(a1 + 2120), __sz);
      for (k = 0; k != __sz; ++k)
      {
        if (k >= *(int *)(a2 + 352))
        {
          wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v91, 3, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 614);
          v41 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v91, "CHECK failed: (index) < (size()): ");
          wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v90, v41);
          wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v91);
        }
        v42 = *(_DWORD *)(*(_QWORD *)(a2 + 344) + 4 * k);
        v43 = *(_BYTE **)(a1 + 2128);
        v44 = *(_QWORD *)(a1 + 2136);
        if ((unint64_t)v43 >= v44)
        {
          v46 = *v39;
          v47 = &v43[-*v39];
          v48 = (unint64_t)(v47 + 1);
          if ((uint64_t)(v47 + 1) < 0)
            sub_100026868();
          v49 = v44 - v46;
          if (2 * v49 > v48)
            v48 = 2 * v49;
          if (v49 >= 0x3FFFFFFFFFFFFFFFLL)
            v50 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v50 = v48;
          if (v50)
            v51 = (char *)operator new(v50);
          else
            v51 = 0;
          v52 = &v47[(_QWORD)v51];
          v53 = &v47[(_QWORD)v51];
          *v53 = v42;
          v45 = v53 + 1;
          if (v43 != (_BYTE *)v46)
          {
            v54 = &v43[~v46];
            do
            {
              v55 = *--v43;
              (v54--)[(_QWORD)v51] = v55;
            }
            while (v43 != (_BYTE *)v46);
            v43 = (_BYTE *)*v39;
            v52 = v51;
          }
          *(_QWORD *)(a1 + 2120) = v52;
          *(_QWORD *)(a1 + 2128) = v45;
          *(_QWORD *)(a1 + 2136) = &v51[v50];
          if (v43)
            operator delete(v43);
        }
        else
        {
          *v43 = v42;
          v45 = v43 + 1;
        }
        *(_QWORD *)(a1 + 2128) = v45;
      }
      goto LABEL_109;
    }
  }
  v31 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "#gdm,#nilr,#supl,SET_SUPL_INIT received without Payload", buf, 2u);
  }
  *(_DWORD *)buf = 4;
  v32 = *(_QWORD *)(a3 + 24);
  if (!v32)
    sub_100025CE8();
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v32 + 48))(v32, buf);
LABEL_120:
  if (SHIBYTE(v85) < 0)
    operator delete(v83);
  if (SHIBYTE(v81) < 0)
    operator delete(v80[0]);
}

void sub_100031344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  std::mutex::unlock(a10);
  if (__p)
    operator delete(__p);
  sub_1000314A8((uint64_t)&a41);
  sub_100031508((uint64_t)&a15);
  _Unwind_Resume(a1);
}

_QWORD *sub_100031458(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1000314A8(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(_QWORD *)(a1 + 120) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(_QWORD *)(a1 + 56) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

uint64_t sub_100031508(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_100031548(uint64_t a1)
{
  sub_100003144(*(_QWORD *)(a1 + 32));
}

_QWORD *sub_100031550(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100031BDC((uint64_t)v6, a2);
  sub_10003A0F0(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_1000315E8(uint64_t a1)
{
  uint64_t v2;
  double v3;
  double v4;
  NSObject *v5;
  int v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  void *__p;
  char v13;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (double)gpsd::util::getMachContinuousTimeNs((gpsd::util *)a1) * 0.000000001;
  v4 = v3 - *(double *)(v2 + 1920);
  v5 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(unsigned __int8 *)(v2 + 1913);
    LODWORD(v9) = 67240448;
    HIDWORD(v9) = v6;
    LOWORD(v10) = 2050;
    *(double *)((char *)&v10 + 2) = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#gdm,pvtWatchdog,isKicked,%{public}d,actualInterval,%{public}.3f", (uint8_t *)&v9, 0x12u);
  }
  if (vabdd_f64(v4, (double)*(int *)(a1 + 40)) <= 2.0)
  {
    if (!*(_BYTE *)(v2 + 1913))
    {
      v8 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v9) = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#gdm,pvtWatchdog,triggered", (uint8_t *)&v9, 2u);
      }
      v9 = 0x600000006;
      v11 = 0;
      v10 = 0uLL;
      sub_100025B58(&__p, "PvtmWatchDogTimeout");
      sub_10002D8F4(v2, (int *)&v9);
      if (v13 < 0)
        operator delete(__p);
      if (SHIBYTE(v11) < 0)
        operator delete((void *)v10);
    }
  }
  else
  {
    v7 = qword_100100830;
    if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v9) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#gdm,pvtWatchdog,ignoring due to timer interval discrepancy", (uint8_t *)&v9, 2u);
    }
  }
  *(_BYTE *)(v2 + 1913) = 0;
  *(double *)(v2 + 1920) = v3;
}

void sub_1000317C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_10002DD5C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1000317EC(uint64_t a1, int a2)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  void *__p[2];
  char v8;

  v4 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(__p[0]) = 67240192;
    HIDWORD(__p[0]) = a2;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "handleXpcClientEvent,event,%{public}d", (uint8_t *)__p, 8u);
  }
  switch(a2)
  {
    case 0:
      v5 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p[0]) = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#gdm,handleClientConnection", (uint8_t *)__p, 2u);
      }
      sub_100028FE0();
    case 1:
      sub_100028E3C(a1);
    case 2:
      v6 = qword_100100830;
      if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#gdm,handleTerminationImminentFromSystem", (uint8_t *)__p, 2u);
      }
      sub_100025B58(__p, "handleTerminationImminentFromSystem");
      sub_100028ED8(a1, (uint64_t *)__p, 1);
      if (v8 < 0)
        operator delete(__p[0]);
      break;
    case 3:
      sub_100029170(a1);
    default:
      return;
  }
}

void sub_100031990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000319B4(uint64_t result, uint64_t a2)
{
  uint64_t i;
  _QWORD *v3;
  void *v4;
  void *v5;

  for (i = *(_QWORD *)(result + 8); i != a2; i -= 176)
  {
    v3 = *(_QWORD **)(i - 16);
    *(_QWORD *)(i - 16) = 0;
    if (v3)
    {
      v4 = (void *)v3[16];
      if (v4)
      {
        v3[17] = v4;
        operator delete(v4);
      }
      v5 = (void *)v3[12];
      if (v5)
      {
        v3[13] = v5;
        operator delete(v5);
      }
      operator delete();
    }
  }
  *(_QWORD *)(result + 8) = a2;
  return result;
}

void sub_100031A3C(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 17;
        sub_100031AAC(v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_100031AAC(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  v3 = a1[6];
  a1[6] = 0;
  if (v3)
    operator delete();
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
}

void sub_100031B10(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_1000319B4((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

void *sub_100031B50(_BYTE *__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_100025C08();
    v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v6 = a3 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

uint64_t sub_100031BDC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t *sub_100031C40(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    sub_100025760(v2);
    operator delete();
  }
  return result;
}

void sub_100031C90(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 24);
  v3 = *(_QWORD **)(a1 + 48);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  sub_100025C90(a1);
  operator delete();
}

void sub_100031CF8()
{
  operator delete();
}

_QWORD *sub_100031D0C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F0E40;
  result[1] = v3;
  return result;
}

uint64_t sub_100031D40(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F0E40;
  a2[1] = v2;
  return result;
}

void sub_100031D5C(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  gpsd::util *v3;
  double v4;
  double v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  _QWORD block[5];
  uint8_t v11[4];
  double v12;
  __int16 v13;
  uint64_t v14;
  uint8_t buf[4];
  double v16;
  __int16 v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = **(NSObject ***)(v1 + 1936);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10002E3DC;
  block[3] = &unk_1000F0D30;
  block[4] = v1;
  dispatch_async(v2, block);
  v4 = (double)gpsd::util::getMachContinuousTimeNs(v3) * 0.000000001;
  v5 = *(double *)(v1 + 1968);
  if (v4 >= v5)
  {
    if (v4 > v5 + 600.0)
    {
      *(_DWORD *)buf = 8;
      LODWORD(v16) = (int)(v4 - v5 + 0.5);
      sub_100025B58((double *)((char *)&v16 + 4), "DeviceQueueHang");
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v8 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_FAULT))
      {
        v9 = *(_QWORD *)(v1 + 1968);
        *(_DWORD *)v11 = 134349312;
        v12 = v4;
        v13 = 2050;
        v14 = v9;
        _os_log_fault_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "#dqwdt,timeout,now,%{public}.2f,last,%{public}.2f", v11, 0x16u);
      }
      sub_10002E210();
    }
    if (v4 > v5 + 300.0)
    {
      v7 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349312;
        v16 = v4;
        v17 = 2050;
        v18 = v5;
        _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#dqwdt,deviceQueueMayHang,now,%{public}.2f,last,%{public}.2f", buf, 0x16u);
      }
    }
  }
  else
  {
    v6 = qword_100100830;
    if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349312;
      v16 = v4;
      v17 = 2050;
      v18 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#dqwdt,fLastDeviceQueueKickedMachContSec,invalid,now,%{public}.2f,last,%{public}.2f", buf, 0x16u);
    }
  }
}

void sub_100031F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100031FC8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100032004()
{
}

BOOL sub_100032010(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

void sub_10003205C(uint64_t a1)
{
  std::exception_ptr *v2;

  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_1000320A8(uint64_t a1)
{
  std::exception_ptr *v2;

  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  operator delete();
}

uint64_t sub_100032108(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

uint64_t *sub_100032114(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::future_error v7;
  std::exception_ptr v8;
  std::error_code v9;

  v2 = *a1;
  if (*a1)
  {
    if ((*(_BYTE *)(v2 + 136) & 1) == 0)
    {
      v8.__ptr_ = 0;
      v3 = *(_QWORD *)(v2 + 16);
      std::exception_ptr::~exception_ptr(&v8);
      v2 = *a1;
      if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
      {
        v9.__cat_ = std::future_category();
        *(_QWORD *)&v9.__val_ = 4;
        std::future_error::future_error(&v7, v9);
        sub_1000321E4(&v7);
      }
    }
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  }
  return a1;
}

void sub_1000321E4(const std::logic_error *a1)
{
  std::logic_error *exception;
  std::logic_error *v3;

  exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
  v3 = std::logic_error::logic_error(exception, a1);
  v3[1] = a1[1];
}

void sub_100032238(void *a1)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
}

void sub_100032258(unsigned int a1)
{
  std::future_error *exception;
  std::error_code v3;

  exception = (std::future_error *)__cxa_allocate_exception(0x20uLL);
  v3.__cat_ = std::future_category();
  *(_QWORD *)&v3.__val_ = a1;
  std::future_error::future_error(exception, v3);
}

void sub_1000322A0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1000322B4(uint64_t a1)
{
  std::mutex *v2;
  int v3;
  unint64_t *v4;
  unint64_t v5;

  v2 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  v3 = *(_DWORD *)(a1 + 136);
  if ((v3 & 2) != 0)
    sub_100032258(1u);
  v4 = (unint64_t *)(a1 + 8);
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  *(_DWORD *)(a1 + 136) = v3 | 2;
  std::mutex::unlock(v2);
}

void sub_100032310(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100032328()
{
  operator delete();
}

_QWORD *sub_10003233C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F0F18;
  result[1] = v3;
  return result;
}

uint64_t sub_100032370(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F0F18;
  a2[1] = v2;
  return result;
}

void sub_10003238C(uint64_t a1, uint64_t *a2)
{
  sub_1000098B8(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_100032394(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1000323D0()
{
}

void sub_1000323E0()
{
  operator delete();
}

_QWORD *sub_1000323F4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F0FA8;
  result[1] = v3;
  return result;
}

uint64_t sub_100032428(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F0FA8;
  a2[1] = v2;
  return result;
}

void sub_100032444(uint64_t a1, int *a2)
{
  int v2;

  v2 = *a2;
  sub_1000324BC(**(_QWORD **)(a1 + 8), &v2);
}

uint64_t sub_100032474(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1000324B0()
{
}

void sub_1000324BC(uint64_t a1, int *a2)
{
  std::mutex *v4;
  uint64_t v5;
  int v6;
  std::exception_ptr v7;

  if (!a1)
    sub_100032258(3u);
  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((*(_BYTE *)(a1 + 136) & 1) != 0
    || (v7.__ptr_ = 0, v5 = *(_QWORD *)(a1 + 16), std::exception_ptr::~exception_ptr(&v7), v5))
  {
    sub_100032258(2u);
  }
  v6 = *a2;
  *(_DWORD *)(a1 + 136) |= 5u;
  *(_DWORD *)(a1 + 140) = v6;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock(v4);
}

void sub_100032550(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100032568()
{
  operator delete();
}

_QWORD *sub_10003257C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F1038;
  result[1] = v3;
  return result;
}

uint64_t sub_1000325B0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F1038;
  a2[1] = v2;
  return result;
}

void sub_1000325CC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2;
  *a2 = 0;
  v4 = v3;
  sub_100018F5C(v2, &v4);
  if (v3)
    operator delete();
}

void sub_10003262C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    operator delete();
  _Unwind_Resume(exception_object);
}

uint64_t sub_100032654(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100032690()
{
}

void sub_1000326A0()
{
  operator delete();
}

_QWORD *sub_1000326B4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F10C8;
  result[1] = v3;
  return result;
}

uint64_t sub_1000326E8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F10C8;
  a2[1] = v2;
  return result;
}

void sub_100032704(uint64_t a1, int *a2)
{
  int v2;

  v2 = *a2;
  sub_1000324BC(**(_QWORD **)(a1 + 8), &v2);
}

uint64_t sub_100032734(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100032770()
{
}

void sub_100032780()
{
  operator delete();
}

_QWORD *sub_100032794(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F1148;
  result[1] = v3;
  return result;
}

uint64_t sub_1000327C8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F1148;
  a2[1] = v2;
  return result;
}

void sub_1000327E4(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, _QWORD *a6, _QWORD *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[6];
  _QWORD v11[7];
  _QWORD v12[7];

  v7 = *a2;
  *a2 = 0;
  v8 = *a3;
  *a3 = 0;
  *a6 = 0;
  *a7 = 0;
  v12[0] = 0;
  v12[1] = v12;
  v12[2] = 0x3812000000;
  v12[3] = sub_10002391C;
  v12[4] = sub_1000238A0;
  v12[5] = 0;
  v12[6] = v7;
  v11[0] = 0;
  v11[1] = v11;
  v11[2] = 0x3812000000;
  v11[3] = sub_100032BA8;
  v11[4] = sub_100032BB8;
  v9 = 0;
  v11[5] = 0;
  v11[6] = v8;
  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0x3812000000;
  v10[3] = sub_100032BC0;
  v10[4] = sub_100032BD0;
  v10[5] = 0;
  operator new();
}

void sub_100032ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  void ***v12;
  uint64_t v13;
  uint64_t v15;

  _Block_object_dispose((const void *)(v13 - 248), 8);
  sub_100032E00(v12);
  _Block_object_dispose((const void *)(v13 - 192), 8);
  sub_100032F6C(v9);
  _Block_object_dispose((const void *)(v13 - 136), 8);
  v15 = *(_QWORD *)(v13 - 88);
  *(_QWORD *)(v13 - 88) = 0;
  if (!v15)
  {
    if (!v11)
    {
      if (v10)
        sub_100032E9C(v10);
      sub_100032F6C(&a9);
      _Unwind_Resume(a1);
    }
    operator delete();
  }
  operator delete();
}

uint64_t sub_100032B60(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100032B9C()
{
}

uint64_t sub_100032BA8(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

uint64_t *sub_100032BB8(uint64_t a1)
{
  return sub_100032F6C((uint64_t *)(a1 + 48));
}

uint64_t sub_100032BC0(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

void ***sub_100032BD0(uint64_t a1)
{
  return sub_100032E00((void ***)(a1 + 48));
}

uint64_t sub_100032BD8(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

uint64_t sub_100032BE8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (result)
    sub_100032E5C(result);
  return result;
}

uint64_t sub_100032C00(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

uint64_t *sub_100032C10(uint64_t a1)
{
  uint64_t *result;

  result = *(uint64_t **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (result)
    sub_100032E9C(result);
  return result;
}

uint64_t sub_100032C28(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

uint64_t sub_100032C38(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (result)
    operator delete();
  return result;
}

uint64_t *sub_100032C60(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *result;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;

  v1 = a1[10];
  v2 = *(_QWORD *)(a1[4] + 8);
  v3 = *(_QWORD *)(v2 + 48);
  *(_QWORD *)(v2 + 48) = 0;
  v4 = *(_QWORD *)(a1[5] + 8);
  v5 = *(_QWORD *)(v4 + 48);
  *(_QWORD *)(v4 + 48) = 0;
  v19 = v5;
  v20 = v3;
  v6 = *(_QWORD *)(a1[6] + 8);
  v7 = *(void ***)(v6 + 48);
  *(_QWORD *)(v6 + 48) = 0;
  v8 = *(_QWORD *)(a1[7] + 8);
  v9 = *(_QWORD *)(v8 + 48);
  *(_QWORD *)(v8 + 48) = 0;
  v17 = v9;
  v18 = v7;
  v10 = *(_QWORD *)(a1[8] + 8);
  v11 = *(uint64_t **)(v10 + 48);
  *(_QWORD *)(v10 + 48) = 0;
  v12 = *(_QWORD *)(a1[9] + 8);
  v13 = *(_QWORD *)(v12 + 48);
  *(_QWORD *)(v12 + 48) = 0;
  v15 = v13;
  v16 = v11;
  sub_1000190A4(v1, &v20, &v19, (uint64_t *)&v18, &v17, &v16, &v15);
  if (v15)
    operator delete();
  if (v11)
    sub_100032E9C(v11);
  if (v9)
    sub_100032E5C(v9);
  sub_100032E00(&v18);
  result = sub_100032F6C(&v19);
  if (v3)
    operator delete();
  return result;
}

void sub_100032D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  void **v8;
  va_list va;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v8 = va_arg(va1, void **);
  if (!a2)
  {
    if (!v6)
    {
      if (v5)
        sub_100032E5C(v5);
      sub_100032E00((void ***)va);
      sub_100032F6C((uint64_t *)va1);
      if (v4)
        operator delete();
      _Unwind_Resume(a1);
    }
    sub_100032E9C(v6);
  }
  operator delete();
}

void ***sub_100032E00(void ***result)
{
  void **v1;
  void **v2;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v2 = v1;
    sub_100031A3C(&v2);
    operator delete();
  }
  return result;
}

void sub_100032E5C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  operator delete();
}

void sub_100032E9C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[4];
  a1[4] = 0;
  if (v2)
    operator delete();
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    operator delete();
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    operator delete();
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
    operator delete();
  v6 = *a1;
  *a1 = 0;
  if (v6)
    operator delete();
  operator delete();
}

uint64_t *sub_100032F6C(uint64_t *result)
{
  uint64_t v1;
  void **v2;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v2 = (void **)(v1 + 112);
    sub_100031B10(&v2);
    operator delete();
  }
  return result;
}

void sub_100032FD0()
{
  operator delete();
}

_QWORD *sub_100032FE4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F1200;
  result[1] = v3;
  return result;
}

uint64_t sub_100033018(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F1200;
  a2[1] = v2;
  return result;
}

void sub_100033034(uint64_t a1, int *a2)
{
  int v2;

  v2 = *a2;
  sub_1000324BC(**(_QWORD **)(a1 + 8), &v2);
}

uint64_t sub_100033064(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1000330A0()
{
}

void sub_1000330B0()
{
  operator delete();
}

_QWORD *sub_1000330C4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F1280;
  result[1] = v3;
  return result;
}

uint64_t sub_1000330F8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F1280;
  a2[1] = v2;
  return result;
}

void sub_100033114()
{
  NSObject *v0;
  void (**v1)(proto::gpsd::Indication *__hidden);
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;

  v0 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v1) = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#gdm,#nilr,handleEmergencySummaryReport", (uint8_t *)&v1, 2u);
  }
  v1 = off_1000F9B50;
  v2 = 0u;
  v3 = 0u;
  v4 = 0u;
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  LODWORD(v2) = 10;
  v15 = 131073;
  operator new();
}

void sub_100033278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  proto::gpsd::Indication::SharedDtor(&a9);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100033298(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1000332D4()
{
}

void sub_1000332E4()
{
  operator delete();
}

_QWORD *sub_1000332F8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F1310;
  result[1] = v3;
  return result;
}

uint64_t sub_10003332C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F1310;
  a2[1] = v2;
  return result;
}

void sub_100033348(uint64_t a1, int *a2)
{
  int v2;

  v2 = *a2;
  sub_1000324BC(**(_QWORD **)(a1 + 8), &v2);
}

uint64_t sub_100033378(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1000333B4()
{
}

void sub_1000333C4()
{
  operator delete();
}

_QWORD *sub_1000333D8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F1390;
  result[1] = v3;
  return result;
}

uint64_t sub_10003340C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F1390;
  a2[1] = v2;
  return result;
}

void sub_100033428()
{
  NSObject *v0;
  void (**v1)(proto::gpsd::Indication *__hidden);
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;

  v0 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v1) = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#gdm,#nilr,#cp,handleEmergencyPositionReport", (uint8_t *)&v1, 2u);
  }
  v1 = off_1000F9B50;
  v2 = 0u;
  v3 = 0u;
  v4 = 0u;
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  LODWORD(v2) = 11;
  v15 = 262145;
  operator new();
}

void sub_100033574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  proto::gpsd::Indication::SharedDtor(&a9);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100033594(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1000335D0()
{
}

void sub_1000335E0()
{
  operator delete();
}

_QWORD *sub_1000335F4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F1420;
  result[1] = v3;
  return result;
}

uint64_t sub_100033628(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F1420;
  a2[1] = v2;
  return result;
}

void sub_100033644(uint64_t a1, int *a2)
{
  int v2;

  v2 = *a2;
  sub_1000324BC(**(_QWORD **)(a1 + 8), &v2);
}

uint64_t sub_100033674(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1000336B0()
{
}

void sub_1000336C0()
{
  operator delete();
}

_QWORD *sub_1000336D4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F14A0;
  result[1] = v3;
  return result;
}

uint64_t sub_100033708(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F14A0;
  a2[1] = v2;
  return result;
}

void sub_100033724()
{
  NSObject *v0;
  void (**v1)(proto::gpsd::Indication *__hidden);
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;

  v0 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v1) = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#gdm,#nilr,#cp,handleEmergencyAssistanceNeededReport", (uint8_t *)&v1, 2u);
  }
  v1 = off_1000F9B50;
  v2 = 0u;
  v3 = 0u;
  v4 = 0u;
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  LODWORD(v2) = 13;
  v15 = 1048577;
  operator new();
}

void sub_10003386C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  proto::gpsd::Indication::SharedDtor(&a9);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10003388C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1000338C8()
{
}

void sub_1000338D8()
{
  operator delete();
}

_QWORD *sub_1000338EC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F1530;
  result[1] = v3;
  return result;
}

uint64_t sub_100033920(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F1530;
  a2[1] = v2;
  return result;
}

void sub_10003393C(uint64_t a1, int *a2)
{
  int v2;

  v2 = *a2;
  sub_1000324BC(**(_QWORD **)(a1 + 8), &v2);
}

uint64_t sub_10003396C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1000339A8()
{
}

void sub_1000339B8()
{
  operator delete();
}

_QWORD *sub_1000339CC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F15B0;
  result[1] = v3;
  return result;
}

uint64_t sub_100033A00(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F15B0;
  a2[1] = v2;
  return result;
}

void sub_100033A1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  unsigned int v5;
  BOOL v6;
  int v7;
  NSObject *v9;
  void (**v10)(proto::gpsd::Indication *__hidden);
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v10) = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#gdm,#nilr,handleEmergencySuplSessionStatusReport", (uint8_t *)&v10, 2u);
  }
  v5 = *(_DWORD *)(a2 + 8);
  v6 = v5 > 0x1E;
  v7 = (1 << v5) & 0x607C1FF8;
  if (!v6 && v7 != 0)
  {
    v9 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v10) = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#gdm,#nilr,#supl Supl End Flush VendorLogger", (uint8_t *)&v10, 2u);
    }
    VendorLogger::notifyStop((VendorLogger *)(v3 + 24));
    VendorLogger::notifyStart((VendorLogger *)(v3 + 24));
  }
  v10 = off_1000F9B50;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  LODWORD(v11) = 14;
  v24 = 8388609;
  operator new();
}

void sub_100033BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  proto::gpsd::Indication::SharedDtor(&a9);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100033C04(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100033C40()
{
}

void sub_100033C50()
{
  operator delete();
}

_QWORD *sub_100033C64(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F1640;
  result[1] = v3;
  return result;
}

uint64_t sub_100033C98(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F1640;
  a2[1] = v2;
  return result;
}

void sub_100033CB4(uint64_t a1, int *a2)
{
  int v2;

  v2 = *a2;
  sub_1000324BC(**(_QWORD **)(a1 + 8), &v2);
}

uint64_t sub_100033CE4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100033D20()
{
}

void sub_100033D30()
{
  operator delete();
}

_QWORD *sub_100033D44(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F16C0;
  result[1] = v3;
  return result;
}

uint64_t sub_100033D78(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F16C0;
  a2[1] = v2;
  return result;
}

uint64_t sub_100033D94(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  void (**v4)(proto::gpsd::Indication *__hidden);
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v4) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gdm,#nilr,#supl,handleEmergencySuplLocationdIdNeededReport", (uint8_t *)&v4, 2u);
  }
  v4 = off_1000F9B50;
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 1;
  LODWORD(v5) = 15;
  sub_10001A330(v1, (uint64_t)&v4);
  v4 = off_1000F9B50;
  proto::gpsd::Indication::SharedDtor(&v4);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)&v4);
  return 1;
}

void sub_100033E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  proto::gpsd::Indication::SharedDtor(&a9);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100033EA0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100033EDC()
{
}

void sub_100033EEC()
{
  operator delete();
}

_QWORD *sub_100033F00(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F1750;
  result[1] = v3;
  return result;
}

uint64_t sub_100033F34(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F1750;
  a2[1] = v2;
  return result;
}

void sub_100033F50(uint64_t a1, int *a2)
{
  int v2;

  v2 = *a2;
  sub_1000324BC(**(_QWORD **)(a1 + 8), &v2);
}

uint64_t sub_100033F80(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100033FBC()
{
}

void sub_100033FCC()
{
  operator delete();
}

_QWORD *sub_100033FE0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F17D0;
  result[1] = v3;
  return result;
}

uint64_t sub_100034014(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F17D0;
  a2[1] = v2;
  return result;
}

void sub_100034030()
{
  NSObject *v0;
  void (**v1)(proto::gpsd::Indication *__hidden);
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;

  v0 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v1) = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#gdm,#nilr,#supl,handleEmergencySuplWlanMeasNeededReport", (uint8_t *)&v1, 2u);
  }
  v1 = off_1000F9B50;
  v2 = 0u;
  v3 = 0u;
  v4 = 0u;
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  LODWORD(v2) = 24;
  v15 = 268435457;
  operator new();
}

void sub_100034178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  proto::gpsd::Indication::SharedDtor(&a9);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100034198(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1000341D4()
{
}

void sub_1000341E4()
{
  operator delete();
}

_QWORD *sub_1000341F8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F1860;
  result[1] = v3;
  return result;
}

uint64_t sub_10003422C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F1860;
  a2[1] = v2;
  return result;
}

void sub_100034248(uint64_t a1, int *a2)
{
  int v2;

  v2 = *a2;
  sub_1000324BC(**(_QWORD **)(a1 + 8), &v2);
}

uint64_t sub_100034278(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1000342B4()
{
}

void sub_1000342C4()
{
  operator delete();
}

_QWORD *sub_1000342D8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F18E0;
  result[1] = v3;
  return result;
}

uint64_t sub_10003430C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F18E0;
  a2[1] = v2;
  return result;
}

void sub_100034328(uint64_t a1, int *a2)
{
  int v2;

  v2 = *a2;
  sub_1000324BC(**(_QWORD **)(a1 + 8), &v2);
}

uint64_t sub_100034358(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100034394()
{
}

void sub_1000343A4()
{
  operator delete();
}

_QWORD *sub_1000343B8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F1960;
  result[1] = v3;
  return result;
}

uint64_t sub_1000343EC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F1960;
  a2[1] = v2;
  return result;
}

void sub_100034408()
{
  NSObject *v0;
  void (**v1)(proto::gpsd::Indication *__hidden);
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;

  v0 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v1) = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#gdm,#nilr,#cp,handleEmergencyMeasurementReport", (uint8_t *)&v1, 2u);
  }
  v1 = off_1000F9B50;
  v2 = 0u;
  v3 = 0u;
  v4 = 0u;
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  LODWORD(v2) = 12;
  v15 = 524289;
  operator new();
}

void sub_100034554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  proto::gpsd::Indication::SharedDtor(&a9);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100034574(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1000345B0()
{
}

void sub_1000345C0()
{
  operator delete();
}

_QWORD *sub_1000345D4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F19F0;
  result[1] = v3;
  return result;
}

uint64_t sub_100034608(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F19F0;
  a2[1] = v2;
  return result;
}

void sub_100034624(uint64_t a1, int *a2)
{
  int v2;

  v2 = *a2;
  sub_1000324BC(**(_QWORD **)(a1 + 8), &v2);
}

uint64_t sub_100034654(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100034690()
{
}

void sub_1000346A0()
{
  operator delete();
}

_QWORD *sub_1000346B4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F1A70;
  result[1] = v3;
  return result;
}

uint64_t sub_1000346E8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F1A70;
  a2[1] = v2;
  return result;
}

void sub_100034704(uint64_t a1, int *a2)
{
  NSObject *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  _QWORD v15[5];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;

  v3 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *a2;
    v5 = *((unsigned __int8 *)a2 + 4);
    v6 = a2[2];
    v7 = a2[3];
    v8 = a2[4];
    v9 = a2[119];
    v10 = a2[120];
    v11 = *((unsigned __int8 *)a2 + 484);
    v12 = *((unsigned __int8 *)a2 + 485);
    v13 = *((unsigned __int8 *)a2 + 486);
    v14 = *((unsigned __int8 *)a2 + 27);
    LODWORD(v15[0]) = 67242753;
    HIDWORD(v15[0]) = v4;
    LOWORD(v15[1]) = 1026;
    *(_DWORD *)((char *)&v15[1] + 2) = v5;
    HIWORD(v15[1]) = 1026;
    LODWORD(v15[2]) = v6;
    WORD2(v15[2]) = 1026;
    *(_DWORD *)((char *)&v15[2] + 6) = v7;
    WORD1(v15[3]) = 1026;
    HIDWORD(v15[3]) = v8;
    LOWORD(v15[4]) = 1025;
    *(_DWORD *)((char *)&v15[4] + 2) = v9;
    HIWORD(v15[4]) = 1025;
    LODWORD(v16) = v10;
    WORD2(v16) = 1026;
    *(_DWORD *)((char *)&v16 + 6) = v11;
    WORD5(v16) = 1024;
    HIDWORD(v16) = v12;
    LOWORD(v17) = 1026;
    *(_DWORD *)((char *)&v17 + 2) = v13;
    WORD3(v17) = 1026;
    DWORD2(v17) = v14;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#gdm,#nilr,#cp,handleEmergencyMeasurementReportWithEstimate,result,%{public}d,responseType,%{public}d,sessionProtocol,%{public}d,posProtocol,%{public}d,sessionId,%{public}u,locationIndication,lat,%{private}d,lon,%{private}d,locUncAng,%{public}d,locUnc{public}A,%d,locUncP,%{public}d,gpsMeasurements,nrOfSats,%{public}d", (uint8_t *)v15, 0x44u);
  }
  v15[0] = off_1000F9B50;
  memset(&v15[1], 0, 32);
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  LODWORD(v15[1]) = 26;
  v27 = 4194305;
  operator new();
}

void sub_10003490C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  proto::gpsd::Indication::SharedDtor(&a9);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10003492C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100034968()
{
}

void sub_100034978()
{
  operator delete();
}

_QWORD *sub_10003498C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F1B00;
  result[1] = v3;
  return result;
}

uint64_t sub_1000349C0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F1B00;
  a2[1] = v2;
  return result;
}

void sub_1000349DC(uint64_t a1, int *a2)
{
  int v2;

  v2 = *a2;
  sub_1000324BC(**(_QWORD **)(a1 + 8), &v2);
}

uint64_t sub_100034A0C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100034A48()
{
}

void sub_100034A58()
{
  operator delete();
}

_QWORD *sub_100034A6C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F1B80;
  result[1] = v3;
  return result;
}

uint64_t sub_100034AA0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F1B80;
  a2[1] = v2;
  return result;
}

void sub_100034ABC()
{
  NSObject *v0;
  void (**v1)(proto::gpsd::Indication *__hidden);
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;

  v0 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v1) = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#gdm,#nilr,#cp,handleEmergencyFtAssistanceNeededReport", (uint8_t *)&v1, 2u);
  }
  v1 = off_1000F9B50;
  v2 = 0u;
  v3 = 0u;
  v4 = 0u;
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  LODWORD(v2) = 17;
  v15 = 2097153;
  operator new();
}

void sub_100034C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  proto::gpsd::Indication::SharedDtor(&a9);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100034C30(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100034C6C()
{
}

void sub_100034C7C()
{
  operator delete();
}

_QWORD *sub_100034C90(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F1C10;
  result[1] = v3;
  return result;
}

uint64_t sub_100034CC4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F1C10;
  a2[1] = v2;
  return result;
}

void sub_100034CE0(uint64_t a1, int *a2)
{
  int v2;

  v2 = *a2;
  sub_1000324BC(**(_QWORD **)(a1 + 8), &v2);
}

uint64_t sub_100034D10(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100034D4C()
{
}

void sub_100034D5C()
{
  operator delete();
}

_QWORD *sub_100034D70(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F1C90;
  result[1] = v3;
  return result;
}

uint64_t sub_100034DA4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F1C90;
  a2[1] = v2;
  return result;
}

void sub_100034DC0(uint64_t a1, int *a2)
{
  int v2;

  v2 = *a2;
  sub_1000324BC(**(_QWORD **)(a1 + 8), &v2);
}

uint64_t sub_100034DF0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100034E2C()
{
}

void sub_100034E3C()
{
  operator delete();
}

_QWORD *sub_100034E50(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F1D10;
  result[1] = v3;
  return result;
}

uint64_t sub_100034E84(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F1D10;
  a2[1] = v2;
  return result;
}

void sub_100034EA0(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD block[5];
  __int128 v5;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = **(NSObject ***)(v2 + 1936);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100034F4C;
  block[3] = &unk_1000F1D80;
  block[4] = v2;
  v5 = *a2;
  dispatch_async(v3, block);
}

uint64_t sub_100034F04(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100034F40()
{
}

void sub_100034F4C(uint64_t a1)
{
  uint64_t v1;
  __int128 *v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (__int128 *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3 && *(_QWORD *)v2)
  {
    v4 = (_OWORD *)(v1 + 1976);
    v5 = *v2;
  }
  else
  {
    v6 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      v7 = *(_QWORD *)v2;
      v8 = 134349312;
      v9 = v7;
      v10 = 2050;
      v11 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#tt,badGpioData,%{public}llu,%{public}llu", (uint8_t *)&v8, 0x16u);
    }
    v4 = (_OWORD *)(v1 + 1976);
    v5 = 0uLL;
  }
  *v4 = v5;
  *(_BYTE *)(v1 + 1992) = 1;
  sub_100003AFC(v1);
}

void sub_100035044()
{
  operator delete();
}

_QWORD *sub_100035058(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F1DC0;
  result[1] = v3;
  return result;
}

uint64_t sub_10003508C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F1DC0;
  a2[1] = v2;
  return result;
}

void sub_1000350A8(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  void *v3;
  int v4;
  uint64_t v5;
  BOOL v6;
  NSObject *v7;
  _BYTE v8[7];
  std::string v9;
  _QWORD block[6];
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v3 = *(void **)a2;
  v2 = *(_QWORD *)(a2 + 8);
  *(_DWORD *)v8 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)&v8[3] = *(_DWORD *)(a2 + 19);
  v4 = *(char *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v5 = *(_QWORD *)(a1 + 8);
  v15 = -4294967291;
  if (v4 < 0)
  {
    sub_100031B50(&v16, v3, v2);
    v6 = v17 < 0;
  }
  else
  {
    v6 = 0;
    *(_QWORD *)&v16 = v3;
    *((_QWORD *)&v16 + 1) = v2;
    LODWORD(v17) = *(_DWORD *)v8;
    *(_DWORD *)((char *)&v17 + 3) = *(_DWORD *)&v8[3];
    HIBYTE(v17) = v4;
  }
  v18 = 0uLL;
  v19 = 0;
  v7 = **(NSObject ***)(v5 + 1936);
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_1000352D4;
  block[3] = &unk_1000F1E30;
  block[4] = v5;
  block[5] = v15;
  block[1] = 3321888768;
  if (v6)
  {
    sub_100031B50(&v11, (void *)v16, *((unint64_t *)&v16 + 1));
    if (SHIBYTE(v19) < 0)
    {
      sub_100031B50(&v13, (void *)v18, *((unint64_t *)&v18 + 1));
      goto LABEL_9;
    }
  }
  else
  {
    v11 = v16;
    v12 = v17;
  }
  v13 = v18;
  v14 = v19;
LABEL_9:
  dispatch_async(v7, block);
  usleep(0x186A0u);
  sub_10002DFA4(&v9, (uint64_t)&v15);
  sub_10002E27C((uint64_t *)&v9);
}

void sub_100035200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  void *v34;
  int v35;
  uint64_t v36;

  if (a28 < 0)
    operator delete(__p);
  if (*(char *)(v36 - 49) < 0)
    operator delete(*(void **)(v36 - 72));
  if (*(char *)(v36 - 73) < 0)
    operator delete(*(void **)(v36 - 96));
  if (v35 < 0)
    operator delete(v34);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10003528C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1000352C8()
{
}

void sub_1000352D4()
{
  sub_10002DD9C();
}

_BYTE *sub_1000352E4(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _BYTE *result;
  __int128 v6;

  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  if (*(char *)(a2 + 71) < 0)
  {
    sub_100031B50((_BYTE *)(a1 + 48), *(void **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v4;
  }
  result = (_BYTE *)(a1 + 72);
  if (*(char *)(a2 + 95) < 0)
    return sub_100031B50(result, *(void **)(a2 + 72), *(_QWORD *)(a2 + 80));
  v6 = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_OWORD *)result = v6;
  return result;
}

void sub_100035370(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 71) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void sub_10003538C(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

void sub_1000353D4()
{
  operator delete();
}

_QWORD *sub_1000353E8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F1E80;
  result[1] = v3;
  return result;
}

uint64_t sub_10003541C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F1E80;
  a2[1] = v2;
  return result;
}

void sub_100035438(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  _QWORD v15[3];
  _QWORD *v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint8_t buf[8];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int v33;
  _QWORD v34[3];

  v4 = a3 + 3;
  v5 = (_QWORD *)a3[3];
  if (v5)
  {
    if (v5 == a3)
    {
      v16 = v15;
      (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v15);
LABEL_7:
      v6 = *(_QWORD *)(a1 + 8);
      v7 = (uint64_t)v16;
      if (v16)
      {
        if (v16 == v15)
        {
          v18 = v17;
          (*(void (**)(_QWORD *, _QWORD *))(v15[0] + 24))(v15, v17);
          goto LABEL_12;
        }
        v7 = (*(uint64_t (**)(void))(*v16 + 16))();
      }
      v18 = (_QWORD *)v7;
LABEL_12:
      if (*(_QWORD *)(v6 + 2360))
      {
        v8 = qword_100100830;
        if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#gdm,#ltl,detected stacked LtlInfoRequests", buf, 2u);
        }
      }
      v9 = (uint64_t)v18;
      if (v18)
      {
        if (v18 == v17)
        {
          *(_QWORD *)&v21 = buf;
          (*(void (**)(_QWORD *, uint8_t *))(v17[0] + 24))(v17, buf);
LABEL_20:
          v10 = v6 + 2336;
          if (buf != (uint8_t *)(v6 + 2336))
          {
            v11 = v21;
            v12 = *(_QWORD *)(v6 + 2360);
            if ((uint8_t *)v21 == buf)
            {
              if (v12 == v10)
              {
                (*(void (**)(uint8_t *, _QWORD *))(*(_QWORD *)buf + 24))(buf, v34);
                (*(void (**)(_QWORD))(*(_QWORD *)v21 + 32))(v21);
                *(_QWORD *)&v21 = 0;
                (*(void (**)(_QWORD, uint8_t *))(**(_QWORD **)(v6 + 2360) + 24))(*(_QWORD *)(v6 + 2360), buf);
                (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 2360) + 32))(*(_QWORD *)(v6 + 2360));
                *(_QWORD *)(v6 + 2360) = 0;
                *(_QWORD *)&v21 = buf;
                (*(void (**)(_QWORD *, uint64_t))(v34[0] + 24))(v34, v6 + 2336);
                (*(void (**)(_QWORD *))(v34[0] + 32))(v34);
              }
              else
              {
                (*(void (**)(uint8_t *, uint64_t))(*(_QWORD *)buf + 24))(buf, v6 + 2336);
                (*(void (**)(_QWORD))(*(_QWORD *)v21 + 32))(v21);
                *(_QWORD *)&v21 = *(_QWORD *)(v6 + 2360);
              }
              *(_QWORD *)(v6 + 2360) = v10;
            }
            else if (v12 == v10)
            {
              (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v10 + 24))(v6 + 2336, buf);
              (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 2360) + 32))(*(_QWORD *)(v6 + 2360));
              *(_QWORD *)(v6 + 2360) = v21;
              *(_QWORD *)&v21 = buf;
            }
            else
            {
              *(_QWORD *)&v21 = *(_QWORD *)(v6 + 2360);
              *(_QWORD *)(v6 + 2360) = v11;
            }
          }
          v13 = (uint8_t *)v21;
          if ((uint8_t *)v21 == buf)
          {
            v14 = 4;
            v13 = buf;
          }
          else
          {
            if (!(_QWORD)v21)
              goto LABEL_34;
            v14 = 5;
          }
          (*(void (**)(void))(*(_QWORD *)v13 + 8 * v14))();
LABEL_34:
          *(_QWORD *)buf = off_1000F9B50;
          v20 = 0u;
          v21 = 0u;
          v22 = 0u;
          v23 = 0u;
          v24 = 0u;
          v25 = 0u;
          v26 = 0u;
          v27 = 0u;
          v28 = 0u;
          v29 = 0u;
          v30 = 0u;
          v31 = 0u;
          v32 = 0u;
          LODWORD(v20) = 5;
          v33 = 513;
          operator new();
        }
        v9 = (*(uint64_t (**)(void))(*v18 + 16))();
      }
      *(_QWORD *)&v21 = v9;
      goto LABEL_20;
    }
    v16 = (_QWORD *)a3[3];
  }
  else
  {
    v4 = &v16;
  }
  *v4 = 0;
  goto LABEL_7;
}

void sub_100035834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a2)
    sub_10002579C(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000358D8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100035914()
{
}

void sub_100035924()
{
  operator delete();
}

_QWORD *sub_100035938(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F1F10;
  result[1] = v3;
  return result;
}

uint64_t sub_10003596C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F1F10;
  a2[1] = v2;
  return result;
}

void sub_100035988(uint64_t a1, int *a2, uint64_t a3)
{
  int v4;
  void *v5;
  void *v6;
  int v7;
  uint64_t v8;
  _BYTE v9[7];
  int v10[2];
  void *v11[2];
  _BYTE v12[7];
  char v13;
  void *__p;
  char v15;

  v4 = *a2;
  v6 = *(void **)a3;
  v5 = *(void **)(a3 + 8);
  *(_DWORD *)v9 = *(_DWORD *)(a3 + 16);
  *(_DWORD *)&v9[3] = *(_DWORD *)(a3 + 19);
  v7 = *(char *)(a3 + 23);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  v8 = *(_QWORD *)(a1 + 8);
  v10[0] = 4;
  v10[1] = v4;
  if (v7 < 0)
  {
    sub_100031B50(v11, v6, (unint64_t)v5);
  }
  else
  {
    v11[0] = v6;
    v11[1] = v5;
    *(_DWORD *)v12 = *(_DWORD *)v9;
    *(_DWORD *)&v12[3] = *(_DWORD *)&v9[3];
    v13 = v7;
  }
  sub_100025B58(&__p, "BBUnresponsive");
  sub_10002D8F4(v8, v10);
  if (v15 < 0)
    operator delete(__p);
  if ((v13 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v11[0]);
  if (v7 < 0)
    goto LABEL_10;
}

void sub_100035A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  operator delete(v22);
  _Unwind_Resume(a1);
}

uint64_t sub_100035AB0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100035AEC()
{
}

void sub_100035AFC()
{
  operator delete();
}

_QWORD *sub_100035B10(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F1FA0;
  result[1] = v3;
  return result;
}

uint64_t sub_100035B44(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F1FA0;
  a2[1] = v2;
  return result;
}

void sub_100035B60(uint64_t a1, _QWORD *a2)
{
  std::string *v3;
  __int128 v4;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  void *v8;
  unint64_t v9;
  int v10;
  int v11;
  std::string __p;
  void *v13[2];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int v25;
  std::string v26;
  std::string v27;
  _DWORD v28[2];

  if (*a2 != a2[1])
  {
    std::operator+<char>(&v27, "LibraryCrash:", *a2);
    v3 = std::string::append(&v27, ":");
    v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v26, *(_DWORD *)(*a2 + 24));
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v5 = &v26;
    else
      v5 = (std::string *)v26.__r_.__value_.__r.__words[0];
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
    else
      size = v26.__r_.__value_.__l.__size_;
    v7 = std::string::append(&__p, (const std::string::value_type *)v5, size);
    v8 = (void *)v7->__r_.__value_.__r.__words[0];
    v9 = v7->__r_.__value_.__l.__size_;
    v28[0] = v7->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v28 + 3) = *(_DWORD *)((char *)&v7->__r_.__value_.__r.__words[2] + 3);
    v10 = SHIBYTE(v7->__r_.__value_.__r.__words[2]);
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    v11 = *(_DWORD *)(*a2 + 24);
    LODWORD(__p.__r_.__value_.__l.__data_) = 4;
    HIDWORD(__p.__r_.__value_.__r.__words[0]) = v11;
    if (v10 < 0)
    {
      sub_100031B50(&__p.__r_.__value_.__s.__data_[8], v8, v9);
      sub_100031B50(&v13[1], v8, v9);
    }
    else
    {
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v8;
      __p.__r_.__value_.__r.__words[2] = v9;
      LODWORD(v13[0]) = v28[0];
      *(_DWORD *)((char *)v13 + 3) = *(_DWORD *)((char *)v28 + 3);
      HIBYTE(v13[0]) = v10;
      v13[1] = v8;
      *(_QWORD *)&v14 = v9;
      DWORD2(v14) = v28[0];
      *(_DWORD *)((char *)&v14 + 11) = *(_DWORD *)((char *)v28 + 3);
      HIBYTE(v14) = v10;
    }
    sub_10002DD9C();
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1000F9B50;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  LODWORD(__p.__r_.__value_.__r.__words[1]) = 4;
  v25 = 257;
  operator new();
}

void sub_100035DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *__p, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;

  if (a18 < 0)
    operator delete(__p);
  operator delete(v24);
  _Unwind_Resume(a1);
}

uint64_t sub_100035EB8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100035EF4()
{
}

void sub_100035F04()
{
  operator delete();
}

_QWORD *sub_100035F18(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F2030;
  result[1] = v3;
  return result;
}

uint64_t sub_100035F4C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F2030;
  a2[1] = v2;
  return result;
}

void sub_100035F68(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  void (**v8)(proto::gpsd::Indication *__hidden);
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int v22;
  _QWORD v23[3];
  _QWORD *v24;
  _BYTE v25[24];
  _BYTE *v26;

  v3 = a2 + 3;
  v4 = (_QWORD *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      v24 = v23;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v23);
LABEL_7:
      v5 = *(_QWORD *)(a1 + 8);
      v6 = (uint64_t)v24;
      if (v24)
      {
        if (v24 == v23)
        {
          v26 = v25;
          (*(void (**)(_QWORD *, _BYTE *))(v23[0] + 24))(v23, v25);
LABEL_12:
          v7 = qword_100100838;
          if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v8) = 0;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#gdm,#cntin,inquiry,enableClock", (uint8_t *)&v8, 2u);
          }
          sub_100031550((_QWORD *)(v5 + 2368), (uint64_t)v25);
          v8 = off_1000F9B50;
          v9 = 0u;
          v10 = 0u;
          v11 = 0u;
          v12 = 0u;
          v13 = 0u;
          v14 = 0u;
          v15 = 0u;
          v16 = 0u;
          v17 = 0u;
          v18 = 0u;
          v19 = 0u;
          v20 = 0u;
          v21 = 0u;
          LODWORD(v9) = 21;
          v22 = 16385;
          operator new();
        }
        v6 = (*(uint64_t (**)(_QWORD *))(*v24 + 16))(v24);
      }
      v26 = (_BYTE *)v6;
      goto LABEL_12;
    }
    v24 = (_QWORD *)a2[3];
  }
  else
  {
    v3 = &v24;
  }
  *v3 = 0;
  goto LABEL_7;
}

void sub_1000361C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a2)
    sub_10002579C(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100036260(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10003629C()
{
}

void sub_1000362AC()
{
  operator delete();
}

_QWORD *sub_1000362C0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F20C0;
  result[1] = v3;
  return result;
}

uint64_t sub_1000362F4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F20C0;
  a2[1] = v2;
  return result;
}

void sub_100036310()
{
  NSObject *v0;
  void (**v1)(proto::gpsd::Indication *__hidden);
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;

  v0 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v1) = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#gdm,#cntin,inquiry,disableClock", (uint8_t *)&v1, 2u);
  }
  v1 = off_1000F9B50;
  v2 = 0u;
  v3 = 0u;
  v4 = 0u;
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  LODWORD(v2) = 21;
  v15 = 16385;
  operator new();
}

void sub_100036440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  proto::gpsd::Indication::SharedDtor(&a9);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100036460(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10003649C()
{
}

void sub_1000364AC()
{
  operator delete();
}

_QWORD *sub_1000364C0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F2140;
  result[1] = v3;
  return result;
}

uint64_t sub_1000364F4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F2140;
  a2[1] = v2;
  return result;
}

uint64_t sub_100036510(uint64_t a1, uint64_t a2)
{
  return sub_100026054(*(_QWORD *)(a1 + 8) + 928, a2);
}

uint64_t sub_10003651C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100036558()
{
}

void sub_100036568()
{
  operator delete();
}

_QWORD *sub_10003657C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F21D0;
  result[1] = v3;
  return result;
}

uint64_t sub_1000365B0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F21D0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1000365CC(uint64_t a1, double *a2)
{
  return sub_1000262A8(*(_QWORD *)(a1 + 8) + 928, a2);
}

uint64_t sub_1000365D8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100036614()
{
}

void sub_100036624()
{
  operator delete();
}

_QWORD *sub_100036638(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F2260;
  result[1] = v3;
  return result;
}

uint64_t sub_10003666C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F2260;
  a2[1] = v2;
  return result;
}

uint64_t sub_100036688(uint64_t a1, uint64_t a2)
{
  return sub_100026554(*(_QWORD *)(a1 + 8) + 928, a2);
}

uint64_t sub_100036694(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1000366D0()
{
}

void sub_1000366E0()
{
  operator delete();
}

_QWORD *sub_1000366F4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F22F0;
  result[1] = v3;
  return result;
}

uint64_t sub_100036728(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F22F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_100036744(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  int v3;
  uint64_t v4;
  _DWORD v6[2];

  v1 = *(_QWORD *)(a1 + 8);
  std::mutex::lock((std::mutex *)(v1 + 2144));
  v2 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(unsigned __int8 *)(v1 + 2092);
    v6[0] = 67240192;
    v6[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gdm,servingCellLteCb,fIsServingCellLte,%{public}d", (uint8_t *)v6, 8u);
  }
  v4 = *(unsigned __int8 *)(v1 + 2092);
  std::mutex::unlock((std::mutex *)(v1 + 2144));
  return v4;
}

uint64_t sub_100036808(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100036844()
{
}

void sub_100036854()
{
  operator delete();
}

_QWORD *sub_100036868(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F2380;
  result[1] = v3;
  return result;
}

uint64_t sub_10003689C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F2380;
  a2[1] = v2;
  return result;
}

void sub_1000368B8(uint64_t a1, void **a2)
{
  uint64_t v3;
  std::mutex *v4;
  NSObject *v5;
  char *v6;
  _BYTE *v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  size_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;
  __int16 v17[8];

  v3 = *(_QWORD *)(a1 + 8);
  v4 = (std::mutex *)(v3 + 2144);
  std::mutex::lock((std::mutex *)(v3 + 2144));
  v5 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    v17[0] = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#gdm,#nilr,#supl,suplCertCb", (uint8_t *)v17, 2u);
  }
  if ((void **)(v3 + 2120) != a2)
  {
    v6 = *(char **)(v3 + 2120);
    v7 = *(_BYTE **)(v3 + 2128);
    v8 = v7 - v6;
    v9 = (unint64_t)a2[2];
    v10 = (char *)*a2;
    if (v9 - (unint64_t)*a2 >= v7 - v6)
    {
      v13 = (char *)a2[1];
      v14 = v13 - v10;
      if (v13 - v10 < v8)
      {
        v15 = &v6[v14];
        if (v13 != v10)
        {
          memmove(*a2, v6, v14);
          v10 = (char *)a2[1];
        }
        if (v7 != v15)
          memmove(v10, v15, v7 - v15);
        v16 = &v10[v7 - v15];
        goto LABEL_23;
      }
    }
    else
    {
      if (v10)
      {
        a2[1] = v10;
        operator delete(v10);
        v9 = 0;
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
      }
      if ((v8 & 0x8000000000000000) != 0)
        sub_100026868();
      v11 = 2 * v9;
      if (2 * v9 <= v8)
        v11 = v7 - v6;
      if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
        v12 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      sub_100036A90(a2, v12);
      v10 = (char *)a2[1];
    }
    if (v7 != v6)
      memmove(v10, v6, v7 - v6);
    v16 = &v10[v8];
LABEL_23:
    a2[1] = v16;
  }
  std::mutex::unlock(v4);
}

void sub_100036A34(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100036A48(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100036A84()
{
}

char *sub_100036A90(_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    sub_100026868();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void sub_100036AD4()
{
  operator delete();
}

_QWORD *sub_100036AE8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F2410;
  result[1] = v3;
  return result;
}

uint64_t sub_100036B1C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F2410;
  a2[1] = v2;
  return result;
}

void sub_100036B38(uint64_t a1, unsigned int *a2)
{
  unsigned int v2;
  NSObject *v3;
  void (**v4)(proto::gpsd::Indication *__hidden);
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;

  v2 = *a2;
  v3 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v4) = 67240192;
    HIDWORD(v4) = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#gdm,#nilr,#supl,suplConnStatusCb,connStatus,%{public}d", (uint8_t *)&v4, 8u);
  }
  v4 = off_1000F9B50;
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  LODWORD(v5) = 14;
  ProtobufUtil::toProtobuf(v2);
  v18 = 8388609;
  operator new();
}

void sub_100036D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  proto::gpsd::Indication::SharedDtor(&a9);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100036D20(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100036D5C()
{
}

void sub_100036D6C()
{
  operator delete();
}

_QWORD *sub_100036D80(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F24A0;
  result[1] = v3;
  return result;
}

uint64_t sub_100036DB4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F24A0;
  a2[1] = v2;
  return result;
}

void sub_100036DD0(uint64_t a1, std::string *a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  std::mutex::lock((std::mutex *)(v3 + 2144));
  std::string::operator=(a2, (const std::string *)(v3 + 2096));
  std::mutex::unlock((std::mutex *)(v3 + 2144));
}

void sub_100036E14(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100036E28(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100036E64()
{
}

void sub_100036E74()
{
  operator delete();
}

_QWORD *sub_100036E88(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F2530;
  result[1] = v3;
  return result;
}

uint64_t sub_100036EBC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F2530;
  a2[1] = v2;
  return result;
}

void sub_100036ED8(uint64_t a1, int *a2)
{
  int v3;
  NSObject *v4;
  int v5;
  uint8_t buf[4];
  int v7;

  v3 = *a2;
  v5 = *a2;
  v4 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#gdm,newGnssDevice callback,%{public}d", buf, 8u);
  }
  sub_1000324BC(**(_QWORD **)(a1 + 8), &v5);
}

uint64_t sub_100036F94(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100036FD0()
{
}

void sub_100036FE0()
{
  operator delete();
}

_QWORD *sub_100036FF4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F25B0;
  result[1] = v3;
  return result;
}

uint64_t sub_100037028(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F25B0;
  a2[1] = v2;
  return result;
}

void sub_100037044(uint64_t a1, int *a2, unsigned __int8 *a3)
{
  int v3;
  int v4;
  __n128 (*v5)(uint64_t);
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  NSObject *v13;
  _DWORD v14[2];
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint8_t buf[8];
  uint64_t v20;
  __n128 (*v21)(uint64_t);
  _BYTE v22[32];
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = *a2;
  v4 = *a3;
  v14[0] = *(_DWORD *)(a3 + 1);
  *(_DWORD *)((char *)v14 + 3) = *((_DWORD *)a3 + 1);
  v5 = (__n128 (*)(uint64_t))*((_QWORD *)a3 + 1);
  v6 = *((float *)a3 + 4);
  v17 = *(_QWORD *)(a3 + 20);
  v18 = *((_DWORD *)a3 + 7);
  v7 = *((_QWORD *)a3 + 4);
  v8 = *((_QWORD *)a3 + 8);
  v16 = *((_QWORD *)a3 + 7);
  v15 = *(_OWORD *)(a3 + 40);
  v9 = *((_QWORD *)a3 + 9);
  v10 = *(_QWORD *)(a1 + 8);
  v11 = qword_100100838;
  v12 = 16 * (*a2 != 1);
  if (os_log_type_enabled((os_log_t)qword_100100838, v12))
  {
    *(_DWORD *)buf = 67241984;
    *(_DWORD *)&buf[4] = v3 == 1;
    LOWORD(v20) = 1026;
    *(_DWORD *)((char *)&v20 + 2) = v4;
    HIWORD(v20) = 2050;
    v21 = v5;
    *(_WORD *)v22 = 2050;
    *(double *)&v22[2] = v6;
    *(_WORD *)&v22[10] = 2050;
    *(_QWORD *)&v22[12] = v7;
    *(_WORD *)&v22[20] = 2050;
    *(_QWORD *)&v22[22] = v8;
    *(_WORD *)&v22[30] = 2050;
    *(_QWORD *)&v23 = v9;
    WORD4(v23) = 1026;
    *(_DWORD *)((char *)&v23 + 10) = v3;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "#tt,success,%{public}d,isGpsWeekVld,%{public}d,towNs,%{public}llu,unc,%{public}.3f,rxNs,%{public}llu,bbSystemNs,%{public}llu,unc,%{public}llu,code,%{public}d", buf, 0x46u);
  }
  if (v3 != 1)
  {
    LOBYTE(v4) = 0;
    v5 = 0;
    v8 = 0;
    v9 = 0;
    memset(v14, 0, 7);
    v17 = 0;
    v18 = 0;
    v16 = 0;
    v6 = -1.0;
    v7 = -1;
    v15 = 0uLL;
  }
  v13 = **(NSObject ***)(v10 + 1936);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  v20 = 3221225472;
  v21 = sub_1000372AC;
  *(_QWORD *)v22 = &unk_1000F2620;
  *(_QWORD *)&v22[8] = v10;
  v22[16] = v4;
  *(_DWORD *)&v22[17] = v14[0];
  *(_DWORD *)&v22[20] = *(_DWORD *)((char *)v14 + 3);
  *(_QWORD *)&v22[24] = v5;
  *(float *)&v23 = v6;
  *(_QWORD *)((char *)&v23 + 4) = v17;
  HIDWORD(v23) = v18;
  v24 = v7;
  v25 = v15;
  v26 = v16;
  v27 = v8;
  v28 = v9;
  dispatch_async(v13, buf);
}

uint64_t sub_100037264(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000372A0()
{
}

__n128 sub_1000372AC(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_OWORD *)(a1 + 56);
  v3 = *(_OWORD *)(a1 + 72);
  v4 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v1 + 2064) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v1 + 2048) = v4;
  *(_OWORD *)(v1 + 2032) = v3;
  *(_OWORD *)(v1 + 2016) = v2;
  *(_OWORD *)(v1 + 2000) = *(_OWORD *)(a1 + 40);
  *(_BYTE *)(v1 + 2080) = 1;
  sub_100003AFC(v1);
  return result;
}

void sub_1000372EC()
{
  operator delete();
}

_QWORD *sub_100037300()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1000F2660;
  return result;
}

void sub_100037324(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1000F2660;
}

void sub_10003733C(uint64_t a1, int *a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];

  v3 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO))
  {
    v4 = *a2;
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "#tt,onCompleted,%d", (uint8_t *)v5, 8u);
  }
}

uint64_t sub_1000373DC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100037418()
{
}

void sub_100037428()
{
  operator delete();
}

__n128 sub_10003743C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_1000F26E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100037474(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1000F26E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100037494(uint64_t a1, unsigned int *a2)
{
  sub_10000F140(*(_QWORD *)(a1 + 8), (proto::gpsd *)*(unsigned int *)(a1 + 16), *a2);
}

uint64_t sub_1000374A8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000374E4()
{
}

void sub_1000374F4()
{
  operator delete();
}

_QWORD *sub_100037508(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F2760;
  result[1] = v3;
  return result;
}

uint64_t sub_10003753C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F2760;
  a2[1] = v2;
  return result;
}

void sub_100037558(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a2;
  *a2 = 0;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = v2;
  sub_100018F5C(v3, &v4);
  if (v2)
    operator delete();
}

void sub_1000375B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    operator delete();
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000375E0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10003761C()
{
}

void sub_10003762C()
{
  operator delete();
}

_QWORD *sub_100037640(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F27E0;
  result[1] = v3;
  return result;
}

uint64_t sub_100037674(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F27E0;
  a2[1] = v2;
  return result;
}

void sub_100037690(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  NSObject *v4;
  __int128 v5;
  NSObject *v6;
  int v7;
  _QWORD v8[6];
  uint8_t buf[8];
  uint8_t *v10;
  uint64_t v11;
  __n128 (*v12)(uint64_t, uint64_t);
  uint64_t (*v13)();
  const char *v14;
  __int128 v15;
  __int128 v16;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(unsigned __int8 *)a2;
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v7;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gdm,DecodedExtendedEphemeris callback,type,%{public}d", buf, 8u);
  }
  *(_QWORD *)buf = 0;
  v10 = buf;
  v11 = 0x5012000000;
  v12 = sub_100037810;
  v13 = nullsub_96;
  v14 = "";
  v5 = a2[1];
  v15 = *a2;
  v16 = v5;
  v6 = **(NSObject ***)(v3 + 1936);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100037828;
  v8[3] = &unk_1000F2858;
  v8[4] = buf;
  v8[5] = v3;
  dispatch_async(v6, v8);
  _Block_object_dispose(buf, 8);
}

uint64_t sub_1000377C8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100037804()
{
}

__n128 sub_100037810(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(__n128 *)(a1 + 48) = result;
  return result;
}

void sub_100037828(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  CFAbsoluteTime v3;
  _BYTE *v4;
  unint64_t v5;
  double v6;
  int v7;
  BOOL v8;
  NSObject *v9;
  os_log_type_t v10;
  int v11;
  char v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint8_t buf[8];
  __int128 v16;
  _OWORD v17[12];
  int v18;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v14 = 0;
  v3 = sub_1000243BC(v1, &v14);
  v4 = (_BYTE *)(v2 + 48);
  v5 = *(_QWORD *)(v2 + 56);
  v6 = v3 - (double)v5;
  v7 = *(unsigned __int8 *)(v2 + 72);
  v8 = v6 * 0.0000115740741 >= 7.0 || v7 == 0;
  v9 = qword_100100838;
  if (v8)
    v10 = OS_LOG_TYPE_ERROR;
  else
    v10 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled((os_log_t)qword_100100838, v10))
  {
    v11 = *v4;
    *(_DWORD *)buf = 67241472;
    *(_DWORD *)&buf[4] = v11;
    LOWORD(v16) = 1026;
    *(_DWORD *)((char *)&v16 + 2) = v7;
    WORD3(v16) = 2050;
    *((_QWORD *)&v16 + 1) = v5;
    LOWORD(v17[0]) = 2050;
    *(double *)((char *)v17 + 2) = v6;
    WORD5(v17[0]) = 2050;
    *(double *)((char *)v17 + 12) = v6 * 0.0000115740741;
    WORD2(v17[1]) = 1026;
    *(_DWORD *)((char *)&v17[1] + 6) = v14;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "#gdm,#ee,decodedEphemeris,type,%{public}d,integrityValid,%{public}d,dataTimeGpsSec,%{public}llu,ageSecs,%{public}.1f,ageDays,%{public}.2f,isAgeAccurate,%{public}d", buf, 0x32u);
  }
  if ((*v4 & 0xFB) == 0)
  {
    v12 = *(_BYTE *)(v2 + 72);
    v13 = *(_QWORD *)(v2 + 56);
    if (!v12)
      v13 = 0;
    *(_QWORD *)(v1 + 1888) = v13;
    *(double *)(v1 + 1008) = v6 * 0.0000115740741;
    *(_BYTE *)(v1 + 1024) = v12;
  }
  *(_QWORD *)buf = off_1000F9B50;
  v16 = 0u;
  memset(v17, 0, sizeof(v17));
  LODWORD(v16) = 18;
  v18 = 1025;
  operator new();
}

void sub_100037A54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100037A7C(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = sub_100036A90(result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100037AD8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100037AF8()
{
  operator delete();
}

_QWORD *sub_100037B0C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F2898;
  result[1] = v3;
  return result;
}

uint64_t sub_100037B40(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F2898;
  a2[1] = v2;
  return result;
}

void sub_100037B5C(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  _QWORD v6[6];
  uint8_t buf[8];
  uint8_t *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t (*v11)();
  const char *v12;
  __int128 v13;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gdm,DecodedRti callback", buf, 2u);
  }
  *(_QWORD *)buf = 0;
  v8 = buf;
  v9 = 0x4012000000;
  v10 = sub_100037CA0;
  v11 = nullsub_99;
  v12 = "";
  v13 = *a2;
  v5 = **(NSObject ***)(v3 + 1936);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100037CB8;
  v6[3] = &unk_1000F2858;
  v6[4] = buf;
  v6[5] = v3;
  dispatch_async(v5, v6);
  _Block_object_dispose(buf, 8);
}

uint64_t sub_100037C58(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100037C94()
{
}

uint64_t sub_100037CA0(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(result + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(result + 48) = v2;
  return result;
}

void sub_100037CB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  CFAbsoluteTime v3;
  unint64_t v4;
  double v5;
  NSObject *v6;
  char v7;
  unsigned __int8 v8;
  uint8_t buf[8];
  _OWORD v10[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int v22;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v8 = 0;
  v3 = sub_1000243BC(v1, &v8);
  v4 = *(_QWORD *)(v2 + 48);
  v5 = v3 - (double)v4;
  v6 = qword_100100838;
  if (*(_BYTE *)(v2 + 56))
  {
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67241216;
      *(_DWORD *)&buf[4] = 1;
      LOWORD(v10[0]) = 2050;
      *(_QWORD *)((char *)v10 + 2) = v4;
      WORD5(v10[0]) = 2050;
      *(double *)((char *)v10 + 12) = v5;
      WORD2(v10[1]) = 2050;
      *(double *)((char *)&v10[1] + 6) = v5 * 0.0000115740741;
      HIWORD(v10[1]) = 1026;
      LODWORD(v11) = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#gdm,decodedRti,integrityValid,%{public}d,fileTimeGpsSec,%{public}llu,ageSecs,%{public}.1f,ageDays,%{public}.2f,isAgeAccurate,%{public}d", buf, 0x2Cu);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67241216;
    *(_DWORD *)&buf[4] = 0;
    LOWORD(v10[0]) = 2050;
    *(_QWORD *)((char *)v10 + 2) = v4;
    WORD5(v10[0]) = 2050;
    *(double *)((char *)v10 + 12) = v5;
    WORD2(v10[1]) = 2050;
    *(double *)((char *)&v10[1] + 6) = v5 * 0.0000115740741;
    HIWORD(v10[1]) = 1026;
    LODWORD(v11) = v8;
    _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#gdm,decodedRti,integrityValid,%{public}d,fileTimeGpsSec,%{public}llu,ageSecs,%{public}.1f,ageDays,%{public}.2f,isAgeAccurate,%{public}d", buf, 0x2Cu);
  }
  v7 = *(_BYTE *)(v2 + 56);
  *(double *)(v1 + 1016) = v5 * 0.0000115740741;
  *(_BYTE *)(v1 + 1025) = v7;
  *(_QWORD *)buf = off_1000F9B50;
  memset(v10, 0, sizeof(v10));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  LODWORD(v10[0]) = 19;
  v22 = 2049;
  operator new();
}

void sub_100037F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _Unwind_Resume(exception_object);
}

void sub_100037F48()
{
  operator delete();
}

_QWORD *sub_100037F5C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F2928;
  result[1] = v3;
  return result;
}

uint64_t sub_100037F90(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F2928;
  a2[1] = v2;
  return result;
}

void sub_100037FAC(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, _QWORD *a6, _QWORD *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[6];
  _QWORD v11[7];
  _QWORD v12[7];

  v7 = *a2;
  *a2 = 0;
  v8 = *a3;
  *a3 = 0;
  *a6 = 0;
  *a7 = 0;
  v12[0] = 0;
  v12[1] = v12;
  v12[2] = 0x3812000000;
  v12[3] = sub_10002391C;
  v12[4] = sub_1000238A0;
  v12[5] = 0;
  v12[6] = v7;
  v11[0] = 0;
  v11[1] = v11;
  v11[2] = 0x3812000000;
  v11[3] = sub_100032BA8;
  v11[4] = sub_100032BB8;
  v9 = 0;
  v11[5] = 0;
  v11[6] = v8;
  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0x3812000000;
  v10[3] = sub_100032BC0;
  v10[4] = sub_100032BD0;
  v10[5] = 0;
  operator new();
}

void sub_100038284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  void ***v12;
  uint64_t v13;
  uint64_t v15;

  _Block_object_dispose((const void *)(v13 - 248), 8);
  sub_100032E00(v12);
  _Block_object_dispose((const void *)(v13 - 192), 8);
  sub_100032F6C(v9);
  _Block_object_dispose((const void *)(v13 - 136), 8);
  v15 = *(_QWORD *)(v13 - 88);
  *(_QWORD *)(v13 - 88) = 0;
  if (!v15)
  {
    if (!v11)
    {
      if (v10)
        sub_100032E9C(v10);
      sub_100032F6C(&a9);
      _Unwind_Resume(a1);
    }
    operator delete();
  }
  operator delete();
}

uint64_t sub_100038328(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100038364()
{
}

uint64_t *sub_100038370(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *result;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;

  v1 = a1[10];
  v2 = *(_QWORD *)(a1[4] + 8);
  v3 = *(_QWORD *)(v2 + 48);
  *(_QWORD *)(v2 + 48) = 0;
  v4 = *(_QWORD *)(a1[5] + 8);
  v5 = *(_QWORD *)(v4 + 48);
  *(_QWORD *)(v4 + 48) = 0;
  v19 = v5;
  v20 = v3;
  v6 = *(_QWORD *)(a1[6] + 8);
  v7 = *(void ***)(v6 + 48);
  *(_QWORD *)(v6 + 48) = 0;
  v8 = *(_QWORD *)(a1[7] + 8);
  v9 = *(_QWORD *)(v8 + 48);
  *(_QWORD *)(v8 + 48) = 0;
  v17 = v9;
  v18 = v7;
  v10 = *(_QWORD *)(a1[8] + 8);
  v11 = *(uint64_t **)(v10 + 48);
  *(_QWORD *)(v10 + 48) = 0;
  v12 = *(_QWORD *)(a1[9] + 8);
  v13 = *(_QWORD *)(v12 + 48);
  *(_QWORD *)(v12 + 48) = 0;
  v15 = v13;
  v16 = v11;
  sub_1000190A4(v1, &v20, &v19, (uint64_t *)&v18, &v17, &v16, &v15);
  if (v15)
    operator delete();
  if (v11)
    sub_100032E9C(v11);
  if (v9)
    sub_100032E5C(v9);
  sub_100032E00(&v18);
  result = sub_100032F6C(&v19);
  if (v3)
    operator delete();
  return result;
}

void sub_100038498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  void **v8;
  va_list va;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v8 = va_arg(va1, void **);
  if (!a2)
  {
    if (!v6)
    {
      if (v5)
        sub_100032E5C(v5);
      sub_100032E00((void ***)va);
      sub_100032F6C((uint64_t *)va1);
      if (v4)
        operator delete();
      _Unwind_Resume(a1);
    }
    sub_100032E9C(v6);
  }
  operator delete();
}

void sub_100038514()
{
  operator delete();
}

_QWORD *sub_100038528(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F29A8;
  result[1] = v3;
  return result;
}

uint64_t sub_10003855C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F29A8;
  a2[1] = v2;
  return result;
}

void sub_100038578(uint64_t a1, uint64_t *a2)
{
  sub_1000098B8(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_100038580(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000385BC()
{
}

_QWORD *sub_1000385C8(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_100026868();
    v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_10003866C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10003868C()
{
  operator delete();
}

_QWORD *sub_1000386A0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F2A28;
  result[1] = v3;
  return result;
}

uint64_t sub_1000386D4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F2A28;
  a2[1] = v2;
  return result;
}

void sub_1000386F0(uint64_t a1, unsigned int *a2)
{
  unsigned int v2;
  uint64_t v3;
  NSObject *v4;
  uint8_t v5[16];

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  if (*a2 == 1)
  {
    *(_DWORD *)(v3 + 2088) = 1;
  }
  else
  {
    v4 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v5 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#gdm,#nilr,#cp,Error: startEmergencyPositionRequest failed", v5, 2u);
    }
  }
  sub_10000F140(v3, (proto::gpsd *)0x3C, v2);
}

uint64_t sub_100038788(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000387C4()
{
}

void sub_1000387D4()
{
  operator delete();
}

_QWORD *sub_1000387E8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F2AA8;
  result[1] = v3;
  return result;
}

uint64_t sub_10003881C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F2AA8;
  a2[1] = v2;
  return result;
}

void sub_100038838(uint64_t a1, unsigned int *a2)
{
  unsigned int v2;
  uint64_t v3;
  NSObject *v4;
  uint8_t v5[16];

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  if (*a2 == 1)
  {
    *(_DWORD *)(v3 + 2088) = 1;
  }
  else
  {
    v4 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v5 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#gdm,#nilr,#cp,Error: startEmergencyPositionRequest failed", v5, 2u);
    }
  }
  sub_10000F140(v3, (proto::gpsd *)0x3C, v2);
}

uint64_t sub_1000388D0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10003890C()
{
}

void sub_10003891C()
{
  operator delete();
}

_QWORD *sub_100038930(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F2B28;
  result[1] = v3;
  return result;
}

uint64_t sub_100038964(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F2B28;
  a2[1] = v2;
  return result;
}

void sub_100038980(uint64_t a1, unsigned int *a2)
{
  unsigned int v2;
  uint64_t v3;
  NSObject *v4;
  uint8_t v5[16];

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  if (*a2 == 1)
  {
    *(_DWORD *)(v3 + 2088) = 0;
  }
  else
  {
    v4 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v5 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#gdm,#nilr,#cp,stopEmergencyPositionRequest failed", v5, 2u);
    }
  }
  sub_10000F140(v3, (proto::gpsd *)0x3D, v2);
  VendorLogger::notifyStop((VendorLogger *)(v3 + 24));
  VendorLogger::notifyStart((VendorLogger *)(v3 + 24));
  if (!*(_BYTE *)(v3 + 1848) && !*(_BYTE *)(v3 + 1896) && !*(_BYTE *)(v3 + 1897))
    sub_10002E304((_QWORD *)v3);
}

uint64_t sub_100038A48(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100038A84()
{
}

void sub_100038A94()
{
  operator delete();
}

_QWORD *sub_100038AA8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F2BA8;
  result[1] = v3;
  return result;
}

uint64_t sub_100038ADC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F2BA8;
  a2[1] = v2;
  return result;
}

void sub_100038AF8(uint64_t a1, unsigned int *a2)
{
  unsigned int v2;
  uint64_t v3;
  NSObject *v4;
  dispatch_object_t *v5;
  NSObject *v6;
  dispatch_source_t v7;
  id *v8;
  signed int PvtmTimeOut;
  uint64_t v10;
  NSObject *v11;
  dispatch_time_t v12;
  NSObject *v13;
  gpsd::util *v14;
  NSObject *v15;
  std::string v16;
  std::string v17;
  _BYTE buf[32];
  uint64_t v19;
  signed int v20;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = qword_100100838;
  if (*a2 == 1)
  {
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#gdm,start,onAccepted success", buf, 2u);
    }
    v5 = *(dispatch_object_t **)(v3 + 1824);
    if (v5)
      sub_1000257AC(v5);
    if (*(_QWORD *)(v3 + 1928))
    {
      v6 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Nested pvtm watchdog", buf, 2u);
      }
    }
    else
    {
      *(_BYTE *)(v3 + 1913) = 0;
      v7 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, **(dispatch_queue_t **)(v3 + 1936));
      *(_QWORD *)(v3 + 1928) = v7;
      if (!v7)
      {
        v15 = qword_100100838;
        if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "null fPvtmWatchdogTimer", buf, 2u);
          v15 = qword_100100838;
        }
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CoreGPS/Sources/Daemon/GpsdGnssDeviceManager.mm";
          *(_WORD *)&buf[12] = 1026;
          *(_DWORD *)&buf[14] = 3051;
          *(_WORD *)&buf[18] = 2082;
          *(_QWORD *)&buf[20] = "createPvtmWatchdogTimer";
          _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: assertion failure in %{public}s", buf, 0x1Cu);
        }
        sub_100025B58(buf, "assert");
        sub_100025B58(&v17, "createPvtmWatchdogTimer");
        sub_100025B58(&v16, "null fPvtmWatchdogTimer");
        gpsd::util::triggerDiagnosticReport((uint64_t)buf, (__int128 *)&v17, (__int128 *)&v16);
        std::string::~string(&v16);
        std::string::~string(&v17);
        std::string::~string((std::string *)buf);
        __assert_rtn("createPvtmWatchdogTimer", "GpsdGnssDeviceManager.mm", 3051, "false && \"null fPvtmWatchdogTimer\"");
      }
      v8 = (id *)GpsdPreferences::instance(0);
      PvtmTimeOut = GpsdPreferences::getPvtmTimeOut(v8);
      v10 = 1000000000 * PvtmTimeOut;
      v11 = *(NSObject **)(v3 + 1928);
      v12 = dispatch_walltime(0, v10);
      dispatch_source_set_timer(v11, v12, v10, 0x12A05F200uLL);
      v13 = *(NSObject **)(v3 + 1928);
      *(_QWORD *)buf = _NSConcreteStackBlock;
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = sub_1000315E8;
      *(_QWORD *)&buf[24] = &unk_1000F0E10;
      v19 = v3;
      v20 = PvtmTimeOut;
      dispatch_source_set_event_handler(v13, buf);
      *(double *)(v3 + 1920) = (double)gpsd::util::getMachContinuousTimeNs(v14) * 0.000000001;
      dispatch_resume(*(dispatch_object_t *)(v3 + 1928));
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v2;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#gdm,start,onAccepted failure,%{public}d", buf, 8u);
    }
    *(_BYTE *)(v3 + 1848) = 0;
    sub_10002E304((_QWORD *)v3);
  }
  sub_10000F140(v3, (proto::gpsd *)1, v2);
}

void sub_100038E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100038EB0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100038EEC()
{
}

void sub_100038EFC()
{
  operator delete();
}

_QWORD *sub_100038F10(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F2C28;
  result[1] = v3;
  return result;
}

uint64_t sub_100038F44(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F2C28;
  a2[1] = v2;
  return result;
}

void sub_100038F60(uint64_t a1, int *a2)
{
  int v2;
  uint64_t v3;
  NSObject *v4;
  unsigned int v5;
  void (**v6)(proto::gpsd::Indication *__hidden);
  void *v7[2];
  void *__p[2];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  int v20;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = qword_100100838;
  if (*a2 != 1)
  {
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_FAULT))
    {
      LODWORD(v6) = 67240192;
      HIDWORD(v6) = v2;
      _os_log_fault_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "#gdm,start,onCompleted failure,%{public}d", (uint8_t *)&v6, 8u);
    }
    LODWORD(v6) = 1;
    HIDWORD(v6) = v2;
    v7[1] = 0;
    __p[0] = 0;
    v7[0] = 0;
    sub_100025B58(&__p[1], "startCompletedFailure");
    sub_10002DD9C();
  }
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v6) = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#gdm,start,onCompleted success", (uint8_t *)&v6, 2u);
  }
  v6 = off_1000F9B50;
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)__p = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 1;
  LODWORD(v7[0]) = 22;
  v5 = gnss::Convert::toProtobuf(1u);
  if (v5 >= 0xA)
    __assert_rtn("set_start_status", "GpsdProtocol.pb.h", 8175, "::proto::gnss::Result_IsValid(value)");
  v20 |= 0x1000u;
  DWORD2(v12) = v5;
  sub_10001A330(v3, (uint64_t)&v6);
  v6 = off_1000F9B50;
  proto::gpsd::Indication::SharedDtor(&v6);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)&v6);
}

void sub_100039168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000391B8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000391F4()
{
}

void sub_100039204()
{
  operator delete();
}

_QWORD *sub_100039218(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F2CA8;
  result[1] = v3;
  return result;
}

uint64_t sub_10003924C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F2CA8;
  a2[1] = v2;
  return result;
}

void sub_100039268(uint64_t a1, unsigned int *a2)
{
  unsigned int v2;
  uint64_t v3;
  NSObject *v4;
  _DWORD v5[2];

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = qword_100100838;
  if (*a2 == 1)
  {
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v5[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#gdm,#nilr,Enter Emergency Mode", (uint8_t *)v5, 2u);
    }
    VendorLogger::notifyStart((VendorLogger *)(v3 + 24));
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      v5[0] = 67240192;
      v5[1] = v2;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#gdm,#nilr,Failed to Enter Emergency Mode,%{public}d", (uint8_t *)v5, 8u);
    }
    *(_BYTE *)(v3 + 1896) = 0;
    sub_10002E304((_QWORD *)v3);
  }
  sub_10000F140(v3, (proto::gpsd *)0x33, v2);
}

uint64_t sub_100039378(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000393B4()
{
}

void sub_1000393C4()
{
  operator delete();
}

_QWORD *sub_1000393D8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1000F2D28;
  return result;
}

void sub_1000393FC(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1000F2D28;
}

void sub_100039414(uint64_t a1, int *a2)
{
  int v2;
  NSObject *v3;
  _DWORD v4[2];

  v2 = *a2;
  v3 = qword_100100838;
  if (*a2 == 1)
  {
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v4[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#gdm,#nilr_start,onCompleted success", (uint8_t *)v4, 2u);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
  {
    v4[0] = 67240192;
    v4[1] = v2;
    _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#gdm,#nilr_start,onCompleted failure,%{public}d", (uint8_t *)v4, 8u);
  }
}

uint64_t sub_1000394F4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100039530()
{
}

void sub_100039540()
{
  operator delete();
}

_QWORD *sub_100039554(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F2DA8;
  result[1] = v3;
  return result;
}

uint64_t sub_100039588(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F2DA8;
  a2[1] = v2;
  return result;
}

void sub_1000395A4(uint64_t a1, unsigned int *a2)
{
  unsigned int v2;
  uint64_t v3;
  NSObject *v4;
  _DWORD v5[2];

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = qword_100100838;
  if (*a2 == 1)
  {
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v5[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#gdm,stop,onAccepted success", (uint8_t *)v5, 2u);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
  {
    v5[0] = 67240192;
    v5[1] = v2;
    _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#gdm,stop,onAccepted failure,%{public}d", (uint8_t *)v5, 8u);
  }
  sub_10000F140(v3, (proto::gpsd *)2, v2);
}

uint64_t sub_1000396A0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1000396DC()
{
}

void sub_1000396EC()
{
  operator delete();
}

_QWORD *sub_100039700(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F2E28;
  result[1] = v3;
  return result;
}

uint64_t sub_100039734(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F2E28;
  a2[1] = v2;
  return result;
}

void sub_100039750(uint64_t a1, int *a2)
{
  int v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD v5[5];
  int v6;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = **(NSObject ***)(v3 + 1936);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000397FC;
  v5[3] = &unk_1000F0E10;
  v5[4] = v3;
  v6 = v2;
  dispatch_async(v4, v5);
}

uint64_t sub_1000397B4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1000397F0()
{
}

void sub_1000397FC(uint64_t a1)
{
  uint64_t v2;
  int v3;
  NSObject *v4;
  uint64_t v5;
  _DWORD v6[2];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_DWORD *)(a1 + 40);
  v4 = qword_100100838;
  if (v3 == 1)
  {
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v6[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#gdm,stop,onCompleted success", (uint8_t *)v6, 2u);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
  {
    v6[0] = 67240192;
    v6[1] = v3;
    _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#gdm,stop,onCompleted failure,%{public}d", (uint8_t *)v6, 8u);
  }
  v5 = *(_QWORD *)(v2 + 1824);
  if (v5)
    sub_100025760(v5);
  *(_DWORD *)(v2 + 1900) = *(_DWORD *)(a1 + 40);
}

void sub_100039904()
{
  operator delete();
}

_QWORD *sub_100039918(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F2EA8;
  result[1] = v3;
  return result;
}

uint64_t sub_10003994C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F2EA8;
  a2[1] = v2;
  return result;
}

void sub_100039968(uint64_t a1, unsigned int *a2)
{
  unsigned int v2;
  uint64_t v3;
  NSObject *v4;
  _DWORD v5[2];

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = qword_100100838;
  if (*a2 == 1)
  {
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v5[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#gdm,#nilr,Exit Emergency Mode success", (uint8_t *)v5, 2u);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
  {
    v5[0] = 67240192;
    v5[1] = v2;
    _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#gdm,#nilr,Exit Emergency Mode failure,%{public}d", (uint8_t *)v5, 8u);
  }
  sub_10000F140(v3, (proto::gpsd *)0x34, v2);
}

uint64_t sub_100039A64(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100039AA0()
{
}

void sub_100039AB0()
{
  operator delete();
}

_QWORD *sub_100039AC4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F2F28;
  result[1] = v3;
  return result;
}

uint64_t sub_100039AF8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F2F28;
  a2[1] = v2;
  return result;
}

void sub_100039B14(uint64_t a1, int *a2)
{
  int v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD v5[5];
  int v6;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = **(NSObject ***)(v3 + 1936);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100039BC0;
  v5[3] = &unk_1000F0E10;
  v5[4] = v3;
  v6 = v2;
  dispatch_async(v4, v5);
}

uint64_t sub_100039B78(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100039BB4()
{
}

void sub_100039BC0(uint64_t a1)
{
  uint64_t v2;
  int v3;
  NSObject *v4;
  _DWORD v5[2];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_DWORD *)(a1 + 40);
  v4 = qword_100100838;
  if (v3 == 1)
  {
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v5[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#gdm,#nilr_stop,onCompleted success", (uint8_t *)v5, 2u);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
  {
    v5[0] = 67240192;
    v5[1] = v3;
    _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#gdm,#nilr_stop,onCompleted failure,%{public}d", (uint8_t *)v5, 8u);
  }
  *(_DWORD *)(v2 + 1900) = *(_DWORD *)(a1 + 40);
}

void sub_100039CBC()
{
  operator delete();
}

_QWORD *sub_100039CD0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1000F2FA8;
  return result;
}

void sub_100039CF4(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1000F2FA8;
}

void sub_100039D0C(uint64_t a1, int *a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];

  v3 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *a2;
    v5[0] = 67240192;
    v5[1] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#gdm,stopBlocking,reg,onAccepted,%{public}d", (uint8_t *)v5, 8u);
  }
}

uint64_t sub_100039DAC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100039DE8()
{
}

void sub_100039DF8()
{
  operator delete();
}

_QWORD *sub_100039E0C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F3028;
  result[1] = v3;
  return result;
}

uint64_t sub_100039E40(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F3028;
  a2[1] = v2;
  return result;
}

void sub_100039E5C(uint64_t a1, int *a2)
{
  int v2;

  v2 = *a2;
  sub_1000324BC(**(_QWORD **)(a1 + 8), &v2);
}

uint64_t sub_100039E8C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100039EC8()
{
}

void sub_100039ED8()
{
  operator delete();
}

_QWORD *sub_100039EEC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1000F30A8;
  return result;
}

void sub_100039F10(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1000F30A8;
}

void sub_100039F28(uint64_t a1, int *a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];

  v3 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *a2;
    v5[0] = 67240192;
    v5[1] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#gdm,stopBlocking,emerg,onAccepted,%{public}d", (uint8_t *)v5, 8u);
  }
}

uint64_t sub_100039FC8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10003A004()
{
}

void sub_10003A014()
{
  operator delete();
}

_QWORD *sub_10003A028(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F3128;
  result[1] = v3;
  return result;
}

uint64_t sub_10003A05C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F3128;
  a2[1] = v2;
  return result;
}

void sub_10003A078(uint64_t a1, int *a2)
{
  int v2;

  v2 = *a2;
  sub_1000324BC(**(_QWORD **)(a1 + 8), &v2);
}

uint64_t sub_10003A0A8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10003A0E4()
{
}

_QWORD *sub_10003A0F0(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10003A258(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10002579C(a1);
}

void sub_10003A264(int a1)
{
  NSObject *v1;
  const char *v2;
  uint8_t *v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  uint8_t v7[16];
  uint8_t v8[16];
  uint8_t buf[2];
  __int16 v10;

  if (a1 == 2)
  {
    v1 = qword_100100838;
    if (!os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
      goto LABEL_8;
    *(_WORD *)buf = 0;
    v2 = "#gpsdMain,received SIGINT";
    v3 = buf;
    goto LABEL_7;
  }
  if (a1 != 15)
    return;
  v1 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    v10 = 0;
    v2 = "#gpsdMain,received SIGTERM";
    v3 = (uint8_t *)&v10;
LABEL_7:
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, v2, v3, 2u);
  }
LABEL_8:
  v4 = qword_100100290;
  if (qword_100100290)
  {
    v5 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#gpsdMain,starting client manager termination", v8, 2u);
      v4 = qword_100100290;
    }
    sub_10003BA08(v4);
    v6 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#gpsdMain,finished client manager termination", v7, 2u);
    }
  }
}

uint64_t start()
{
  void *v0;
  NSObject *v1;
  _BOOL8 v2;
  double ProcessUptimeSec;
  int v4;
  unsigned int v5;
  unsigned int v6;
  id *v7;
  unsigned int v8;
  NSObject *v9;
  _BOOL8 v10;
  unint64_t MachContinuousTimeNs;
  int *v12;
  NSObject *v13;
  int v14;
  char *v15;
  NSObject *v16;
  int v18;
  _BYTE v19[18];
  __int16 v20;
  const char *v21;

  v0 = objc_autoreleasePoolPush();
  if (!qword_100100838)
    qword_100100838 = (uint64_t)os_log_create("com.apple.gpsd", "general");
  if (!qword_100100830)
    qword_100100830 = (uint64_t)os_log_create("com.apple.gpsd", "Warning");
  if (!qword_100100828)
    qword_100100828 = (uint64_t)os_log_create("com.apple.gpsd", "device");
  if (!qword_100100820)
    qword_100100820 = (uint64_t)os_log_create("com.apple.gpsd", "NMEA");
  if (!qword_100100298)
    qword_100100298 = (uint64_t)os_log_create("com.apple.gpsd", "gem");
  v1 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v18) = 0;
    _os_log_debug_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "Logging init, check if the level is enabled", (uint8_t *)&v18, 2u);
    v1 = qword_100100838;
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    LOWORD(v18) = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "Logging init, check if the level is enabled", (uint8_t *)&v18, 2u);
    v1 = qword_100100838;
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v18) = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Logging init, check if the level is enabled", (uint8_t *)&v18, 2u);
    v1 = qword_100100838;
  }
  v2 = os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    ProcessUptimeSec = gpsd::util::getProcessUptimeSec((gpsd::util *)v2);
    v18 = 134217984;
    *(double *)v19 = ProcessUptimeSec;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Record process start time, %.1f", (uint8_t *)&v18, 0xCu);
  }
  v4 = *(_DWORD *)(GpsdPlatformInfo::instance(0) + 8);
  if ((v4 - 201) >= 2)
  {
    v6 = v4 - 103;
    if (v6 > 4)
      v5 = 0;
    else
      v5 = (0x19u >> v6) & 1;
  }
  else
  {
    v5 = 1;
  }
  v7 = (id *)GpsdPreferences::instance(0);
  v8 = v5 & (GpsdPreferences::forceDisableGpsd(v7) ^ 1);
  v9 = qword_100100838;
  v10 = os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT);
  if (v8 == 1)
  {
    if (v10)
    {
      MachContinuousTimeNs = gpsd::util::getMachContinuousTimeNs((gpsd::util *)v10);
      v18 = 134349570;
      *(double *)v19 = (double)MachContinuousTimeNs * 0.000000001;
      *(_WORD *)&v19[8] = 2080;
      *(_QWORD *)&v19[10] = "Aug  3 2024";
      v20 = 2082;
      v21 = "08:03:42";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#gpsdStart,machContSec,%{public}.3f,Build date,{%s %{public}s}", (uint8_t *)&v18, 0x20u);
    }
    signal(2, (void (__cdecl *)(int))sub_10003A264);
    signal(15, (void (__cdecl *)(int))sub_10003A264);
    if (access("/var/db/gpsd", 0))
    {
      v12 = __error();
      v13 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_FAULT))
      {
        v14 = *v12;
        v15 = strerror(v14);
        v18 = 67240450;
        *(_DWORD *)v19 = v14;
        *(_WORD *)&v19[4] = 2082;
        *(_QWORD *)&v19[6] = v15;
        _os_log_fault_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "#gpsdMain,home check failure,%{public}d,%{public}s", (uint8_t *)&v18, 0x12u);
      }
    }
    else
    {
      v16 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v18) = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#gpsdMain,home check success", (uint8_t *)&v18, 2u);
      }
    }
    sub_10003A80C((uint64_t)&v18);
  }
  if (v10)
  {
    LOWORD(v18) = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#gpsdStart,gpsd is disabled and will remain idle", (uint8_t *)&v18, 2u);
  }
  -[NSRunLoop run](+[NSRunLoop currentRunLoop](NSRunLoop, "currentRunLoop"), "run");
  objc_autoreleasePoolPop(v0);
  return 0;
}

void sub_10003A7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003BB1C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10003A80C(uint64_t a1)
{
  dispatch_queue_t *v2;
  id *v3;
  id *v4;
  id *v5;
  id *v6;
  dispatch_qos_class_t v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  id *v12;
  uint8_t buf[8];

  *(_QWORD *)(a1 + 32) = 0;
  v2 = (dispatch_queue_t *)(a1 + 32);
  *(_QWORD *)(a1 + 40) = 850045863;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_BYTE *)(a1 + 128) = 0;
  v3 = (id *)GpsdPreferences::instance(0);
  if (GpsdPreferences::enableProtobufBinaryLog(v3))
    operator new();
  v4 = (id *)GpsdPreferences::instance(0);
  if (GpsdPreferences::enableInterfaceTelemetry(v4))
    operator new();
  v5 = (id *)GpsdPreferences::instance(0);
  *(_BYTE *)(a1 + 128) = GpsdPreferences::enableProtobufTextLog(v5);
  v6 = (id *)GpsdPreferences::instance(0);
  v7 = GpsdPreferences::maxSchedulerQos(v6);
  v8 = dispatch_queue_attr_make_with_qos_class(0, v7, -1);
  if (!v8)
  {
    v9 = qword_100100830;
    if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#gpsdClientManager,null receive queue attr", buf, 2u);
    }
  }
  *(_QWORD *)(a1 + 24) = dispatch_queue_create("com.apple.gpsd.receiveq", v8);
  v10 = dispatch_queue_attr_make_with_qos_class(0, v7, 0);
  if (!v10)
  {
    v11 = qword_100100830;
    if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#gpsdClientManager,null device queue attr", buf, 2u);
    }
  }
  *v2 = dispatch_queue_create("com.apple.gpsd.gnssdeviceq", v10);
  v12 = (id *)GpsdPreferences::instance(0);
  GpsdPreferences::useInternalEmergencyStack(v12);
  operator new();
}

void sub_10003AD28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t *v35;
  std::mutex *v36;
  uint64_t *v37;
  uint64_t *v38;

  sub_10003BFB8(v38, 0);
  sub_10003BF24(v37, 0);
  std::mutex::~mutex(v36);
  sub_10003BB84(v35, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_10003AE50(uint64_t a1)
{
  gpsd::util *MachContinuousTimeNs;
  gpsd::util *v3;
  uint64_t v4;
  unint64_t MachAbsoluteTimeNs;
  uint64_t v6;
  CFAbsoluteTime Current;
  uint64_t v8;
  uint64_t result;

  MachContinuousTimeNs = (gpsd::util *)gpsd::util::getMachContinuousTimeNs((gpsd::util *)a1);
  v3 = MachContinuousTimeNs;
  *(_DWORD *)(a1 + 52) |= 1u;
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
    operator new();
  *(_DWORD *)(v4 + 44) |= 4u;
  *(double *)(v4 + 24) = (double)(unint64_t)MachContinuousTimeNs * 0.000000001;
  *(_DWORD *)(a1 + 52) |= 1u;
  MachAbsoluteTimeNs = gpsd::util::getMachAbsoluteTimeNs(MachContinuousTimeNs);
  *(_DWORD *)(v4 + 44) |= 2u;
  *(double *)(v4 + 16) = (double)MachAbsoluteTimeNs * 0.000000001;
  *(_DWORD *)(a1 + 52) |= 1u;
  v6 = *(_QWORD *)(a1 + 32);
  if (!v6)
    operator new();
  Current = CFAbsoluteTimeGetCurrent();
  *(_DWORD *)(v6 + 44) |= 1u;
  *(CFAbsoluteTime *)(v6 + 8) = Current;
  *(_DWORD *)(a1 + 52) |= 2u;
  v8 = *(_QWORD *)(a1 + 40);
  if (!v8)
    operator new();
  result = *(_QWORD *)(v8 + 8);
  *(_DWORD *)(v8 + 20) |= 1u;
  if (!result)
    operator new();
  *(_DWORD *)(result + 52) |= 1u;
  *(_QWORD *)(result + 8) = v3;
  return result;
}

uint64_t sub_10003B048(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::ios_base *v5;

  v2 = a1 + 8;
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = v4;
  v5 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf(v2);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_10003B10C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::ostream::~ostream(v2, v3 + 8);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003B134(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v3 = a1 + 8;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf(v3);
  std::ios::~ios(a1 + 112);
  return a1;
}

void sub_10003B1B8(uint64_t a1, xpc_object_t object)
{
  uint64_t v3;
  char *v4;
  xpc_type_t type;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  NSObject *v9;
  uint32_t v10;
  uint64_t v11;
  const char *string;
  pid_t pid;
  NSObject *v14;
  NSObject *v15;
  __SecTask *v16;
  __SecTask *v17;
  CFTypeRef v18;
  const void *v19;
  CFTypeID TypeID;
  char v21;
  NSObject *v22;
  NSObject *v23;
  NSObject *v24;
  NSObject *v25;
  NSObject *v26;
  _xpc_connection_s *v27;
  NSObject *v28;
  audit_token_t v29;
  uint8_t v30[8];
  CFErrorRef error;
  audit_token_t buf;
  uint64_t v33;
  char v34;
  void *__p;
  char v36;
  char v37;
  audit_token_t v38;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = xpc_copy_description(object);
  type = xpc_get_type(object);
  v6 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    buf.val[0] = 67240962;
    buf.val[1] = type == (xpc_type_t)&_xpc_type_connection;
    LOWORD(buf.val[2]) = 1026;
    *(unsigned int *)((char *)&buf.val[2] + 2) = type == (xpc_type_t)&_xpc_type_error;
    HIWORD(buf.val[3]) = 1026;
    buf.val[4] = type == (xpc_type_t)&_xpc_type_dictionary;
    LOWORD(buf.val[5]) = 2080;
    *(_QWORD *)((char *)&buf.val[5] + 2) = v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#gpsdClientManager,Connection,XPC_TYPE_CONNECTION,%{public}d,XPC_TYPE_ERROR,%{public}d,XPC_TYPE_DICTIONARY,%{public}d,desc,%s", (uint8_t *)&buf, 0x1Eu);
  }
  free(v4);
  if (type == (xpc_type_t)&_xpc_type_error)
  {
    v11 = qword_100100838;
    if (!os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
      return;
    string = xpc_dictionary_get_string(object, _xpc_error_key_description);
    buf.val[0] = 67240962;
    buf.val[1] = object == &_xpc_error_connection_interrupted;
    LOWORD(buf.val[2]) = 1026;
    *(unsigned int *)((char *)&buf.val[2] + 2) = object == &_xpc_error_connection_invalid;
    HIWORD(buf.val[3]) = 1026;
    buf.val[4] = object == &_xpc_error_termination_imminent;
    LOWORD(buf.val[5]) = 2080;
    *(_QWORD *)((char *)&buf.val[5] + 2) = string;
    v8 = "#gpsdClientManager,ConnectionError,XPC_ERROR_CONNECTION_INTERRUPTED,%{public}d,XPC_ERROR_CONNECTION_INVALID,%{p"
         "ublic}d,XPC_ERROR_TERMINATION_IMMINENT,%{public}d,ErrorDesc,%s";
    v9 = v11;
    v10 = 30;
    goto LABEL_47;
  }
  if (type != (xpc_type_t)&_xpc_type_connection)
  {
    v7 = qword_100100838;
    if (!os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
      return;
    buf.val[0] = 134217984;
    *(_QWORD *)&buf.val[1] = type;
    v8 = "#gpsdClientManager,Connection,Unexpected type,%p";
    v9 = v7;
    v10 = 12;
LABEL_47:
    _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, v8, (uint8_t *)&buf, v10);
    return;
  }
  pid = xpc_connection_get_pid((xpc_connection_t)object);
  v14 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    buf.val[0] = 67109376;
    buf.val[1] = pid;
    LOWORD(buf.val[2]) = 2048;
    *(_QWORD *)((char *)&buf.val[2] + 2) = object;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#gpsdClientManager,handleXPCConnection,pid,%d,incomingConnection,%p", (uint8_t *)&buf, 0x12u);
  }
  xpc_connection_get_audit_token(object, &v29);
  v38 = v29;
  v15 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf.val[0]) = 0;
    _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "#gpsdClientManager,checkEntitlement", (uint8_t *)&buf, 2u);
  }
  error = 0;
  buf = v38;
  v16 = SecTaskCreateWithAuditToken(kCFAllocatorDefault, &buf);
  v17 = v16;
  if (v16)
  {
    v18 = SecTaskCopyValueForEntitlement(v16, CFSTR("com.apple.gpsd"), &error);
    v19 = v18;
    if (!error)
    {
      if (v18)
      {
        TypeID = CFBooleanGetTypeID();
        if (TypeID == CFGetTypeID(v19))
        {
          if (CFEqual(v19, kCFBooleanTrue))
          {
            v21 = 1;
          }
          else
          {
            v28 = qword_100100838;
            if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)v30 = 0;
              _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "#gpsdClientManager,SecTaskCopyValueForEntitlement check failed", v30, 2u);
            }
            v21 = 0;
          }
LABEL_22:
          CFRelease(v19);
          goto LABEL_26;
        }
      }
    }
    v22 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v30 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "#gpsdClientManager,SecTaskCopyValueForEntitlement failed", v30, 2u);
    }
    v21 = 0;
    if (v19)
      goto LABEL_22;
  }
  else
  {
    v23 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v30 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "#gpsdClientManager,SecTaskCreateWithAuditToken failed", v30, 2u);
    }
    v21 = 0;
  }
LABEL_26:
  if (error)
    CFRelease(error);
  if (v17)
    CFRelease(v17);
  v24 = qword_100100838;
  if ((v21 & 1) == 0)
  {
    if (!os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
      return;
    buf.val[0] = 67109120;
    buf.val[1] = pid;
    v8 = "#gpsdClientManager,Entitlement check failed for client pid,%d";
    v9 = v24;
    v10 = 8;
    goto LABEL_47;
  }
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    buf.val[0] = 67109120;
    buf.val[1] = pid;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#gpsdClientManager,Entitlement check passed for client pid,%d", (uint8_t *)&buf, 8u);
  }
  std::mutex::lock((std::mutex *)(v3 + 40));
  if (*(_QWORD *)(v3 + 16))
  {
    v25 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_FAULT))
    {
      LOWORD(buf.val[0]) = 0;
      _os_log_fault_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_FAULT, "#gpsdClientManager,fRemoteConnection already exists", (uint8_t *)&buf, 2u);
    }
    sub_100025B58(&buf, "XPC");
    sub_100025B58(&buf.val[6], "duplicate_connection");
    sub_100025B58(&__p, "");
    v37 = 0;
    gpsd::util::triggerDiagnosticReport((uint64_t)&buf);
    xpc_connection_suspend(*(xpc_connection_t *)(v3 + 16));
    xpc_release(*(xpc_object_t *)(v3 + 16));
    if (v36 < 0)
      operator delete(__p);
    if (v34 < 0)
      operator delete(*(void **)&buf.val[6]);
    if (SHIBYTE(buf.val[5]) < 0)
      operator delete(*(void **)buf.val);
  }
  *(_QWORD *)(v3 + 16) = object;
  xpc_retain(object);
  xpc_connection_set_target_queue(*(xpc_connection_t *)(v3 + 16), *(dispatch_queue_t *)(v3 + 24));
  v26 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    buf.val[0] = 67109632;
    buf.val[1] = v29.val[0];
    LOWORD(buf.val[2]) = 1024;
    *(unsigned int *)((char *)&buf.val[2] + 2) = v29.val[7];
    HIWORD(buf.val[3]) = 1024;
    buf.val[4] = pid;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#gpsdClientManager,handleXPCConnection,token,0x%08X-0x%08X,pid,%d", (uint8_t *)&buf, 0x14u);
  }
  v27 = *(_xpc_connection_s **)(v3 + 16);
  *(_QWORD *)buf.val = _NSConcreteStackBlock;
  *(_QWORD *)&buf.val[2] = 3221225472;
  *(_QWORD *)&buf.val[4] = sub_10000AEE0;
  *(_QWORD *)&buf.val[6] = &unk_1000F31D8;
  v33 = v3;
  xpc_connection_set_event_handler(v27, &buf);
  xpc_connection_resume(*(xpc_connection_t *)(v3 + 16));
  std::mutex::unlock((std::mutex *)(v3 + 40));
}

void sub_10003B848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::mutex *v26;

  if (a26 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  std::mutex::unlock(v26);
  _Unwind_Resume(a1);
}

void sub_10003B8AC(uint64_t a1)
{
  uint64_t **v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = *(uint64_t ***)(a1 + 32);
  v2 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gpsdClientManager,incomingConnection,processing", v3, 2u);
  }
  sub_1000317EC(**v1, 0);
}

void sub_10003B920(uint64_t a1)
{
  uint64_t **v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = *(uint64_t ***)(a1 + 32);
  v2 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gpsdClientManager,handleXPCConnectionTermination,processing", v3, 2u);
  }
  sub_1000317EC(**v1, 2);
}

void sub_10003B994(uint64_t a1)
{
  uint64_t **v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = *(uint64_t ***)(a1 + 32);
  v2 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gpsdClientManager,handleXPCConnectionInvalid,processing", v3, 2u);
  }
  sub_1000317EC(**v1, 3);
}

void sub_10003BA08(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  _QWORD block[5];
  uint8_t buf[16];

  v2 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gpsdClientManager,handleTerminationSignal,receipt", buf, 2u);
  }
  v3 = *(NSObject **)(a1 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10003BAA8;
  block[3] = &unk_1000F0D30;
  block[4] = a1;
  dispatch_async(v3, block);
}

void sub_10003BAA8(uint64_t a1)
{
  uint64_t **v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = *(uint64_t ***)(a1 + 32);
  v2 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gpsdClientManager,handleTerminationSignal,processing", v3, 2u);
  }
  sub_1000317EC(**v1, 1);
}

uint64_t sub_10003BB1C(uint64_t a1)
{
  dispatch_release(*(dispatch_object_t *)(a1 + 24));
  xpc_connection_cancel(*(xpc_connection_t *)(a1 + 8));
  xpc_release(*(xpc_object_t *)(a1 + 8));
  sub_10003BFB8((uint64_t *)(a1 + 112), 0);
  sub_10003BF24((uint64_t *)(a1 + 104), 0);
  std::mutex::~mutex((std::mutex *)(a1 + 40));
  sub_10003BB84((uint64_t *)a1, 0);
  return a1;
}

uint64_t sub_10003BB84(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10003BBC0(result);
    operator delete();
  }
  return result;
}

uint64_t sub_10003BBC0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = (_QWORD *)(a1 + 144);
  v3 = *(_QWORD **)(a1 + 168);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(_QWORD **)(a1 + 136);
  if (v5 == (_QWORD *)(a1 + 112))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 112);
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  sub_10003BC60((_QWORD *)(a1 + 64));
  sub_10003BE30((_QWORD **)(a1 + 8), 0);
  sub_10003BEE8((uint64_t *)a1, 0);
  return a1;
}

uint64_t sub_10003BC60(_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 >> 9];
    v7 = (uint64_t **)((char *)*v6 + 8 * (v5 & 0x1FF));
    v8 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((a1[5] + v5) & 0x1FF);
    if (v7 != (uint64_t **)v8)
    {
      do
      {
        sub_10003BD88(v7++, 0);
        if ((char *)v7 - (_BYTE *)*v6 == 4096)
        {
          v9 = (uint64_t **)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != (uint64_t **)v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 256;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 512;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    v13 = *v2++;
    operator delete(v13);
  }
  return sub_10003BDE4((uint64_t)a1);
}

uint64_t **sub_10003BD88(uint64_t **result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    operator delete();
  }
  return result;
}

uint64_t sub_10003BDE4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

_QWORD *sub_10003BE30(_QWORD **a1, _QWORD *a2)
{
  _QWORD *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10003BE6C(result);
    operator delete();
  }
  return result;
}

_QWORD *sub_10003BE6C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = a1 + 4;
  v3 = (_QWORD *)a1[7];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[3];
  if (v5 == a1)
  {
    v6 = 4;
    v5 = a1;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

uint64_t sub_10003BEE8(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100028564(result);
    operator delete();
  }
  return result;
}

uint64_t sub_10003BF24(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10003BF60(result);
    operator delete();
  }
  return result;
}

void sub_10003BF60(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 1016);
  if (v2)
  {
    *(_QWORD *)(a1 + 1024) = v2;
    operator delete(v2);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 952));
  v3 = *(void **)(a1 + 928);
  if (v3)
  {
    *(_QWORD *)(a1 + 936) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 904);
  if (v4)
  {
    *(_QWORD *)(a1 + 912) = v4;
    operator delete(v4);
  }
  VendorLogger::~VendorLogger((VendorLogger *)a1);
}

uint64_t sub_10003BFB8(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100026FA8(result);
    operator delete();
  }
  return result;
}

void sub_10003BFF8()
{
  operator delete();
}

_QWORD *sub_10003C00C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F3270;
  result[1] = v3;
  return result;
}

uint64_t sub_10003C040(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F3270;
  a2[1] = v2;
  return result;
}

uint64_t sub_10003C05C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10003C098()
{
}

void sub_10003C0A8()
{
  operator delete();
}

_QWORD *sub_10003C0BC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F3300;
  result[1] = v3;
  return result;
}

uint64_t sub_10003C0F0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F3300;
  a2[1] = v2;
  return result;
}

uint64_t sub_10003C10C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10003C148()
{
}

uint64_t GpsdProtobufPrintingUtilities::printMessageInJson(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  const std::locale::facet *v3;
  uint64_t v4;
  std::locale v6;

  v2 = sub_100026C60(a2, (uint64_t)"Fatal error: printMessageInJson not supported anymore after adapting protobuf lite!", 83);
  std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)));
  v3 = std::locale::use_facet(&v6, &std::ctype<char>::id);
  v4 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale(&v6);
  std::ostream::put(v2, v4);
  std::ostream::flush(v2);
  return 0;
}

void sub_10003C1E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_10003C1F8()
{
  unsigned int v0;
  BOOL v1;
  int v2;

  v0 = *(_DWORD *)(GpsdPlatformInfo::instance(0) + 8) - 103;
  v1 = v0 > 4;
  v2 = (1 << v0) & 0x19;
  if (!v1 && v2 != 0)
    return 102;
  if ((*(_DWORD *)(GpsdPlatformInfo::instance(0) + 8) - 201) >= 2)
    return 117;
  return 107;
}

uint64_t sub_10003C25C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = a1 + 24;
  *(_QWORD *)(a1 + 16) = v3;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf(v4);
  std::ios::~ios(a1 + 128);
  return a1;
}

void sub_10003C2E4(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_10003C324((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_10003C324(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

uint64_t sub_10003C370(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_10003C428((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_10003C3E4(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_1000268B0();
  return operator new(24 * a2);
}

uint64_t sub_10003C428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  sub_10003C4C4((uint64_t)v12);
  return a6;
}

uint64_t sub_10003C4C4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_10003C4F8(a1);
  return a1;
}

void sub_10003C4F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

uint64_t sub_10003C53C(uint64_t a1)
{
  sub_10003C570(a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_10003C570(uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t gnss::Convert::fromProtobuf(int a1)
{
  NSObject *v3;
  _DWORD v4[2];

  if ((a1 - 1) < 9)
    return dword_1000D3324[a1 - 1];
  v3 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "unhandled proto::gnss::Result enum %d", (uint8_t *)v4, 8u);
  }
  return 7;
}

_DWORD *sub_10003C684(_DWORD *result, int *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;

  v2 = *a2;
  result[2] = *a2;
  v3 = result[6];
  result[6] = v3 | 1;
  if ((v2 & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    v5 = a2[1];
    v4 = a2[2];
    if ((v5 & 0x7FFFFFFFu) > 0x7F7FFFFF)
    {
      if ((v4 & 0x7FFFFFFFu) >= 0x7F800000 && (v4 & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      {
        result[6] = v3 | 5;
        result[4] = v4;
      }
    }
    else if ((v4 & 0x7FFFFFFFu) < 0x7F800000)
    {
      result[6] = v3 | 7;
      result[3] = v5;
      result[4] = v4;
    }
  }
  return result;
}

uint64_t sub_10003C71C(unsigned int a1)
{
  if (a1 < 0x11)
    return a1 + 1;
  else
    return 0;
}

uint64_t ProtobufUtil::toProtobuf(unsigned int a1)
{
  if (a1 > 0x21)
    return 0;
  else
    return dword_1000D33D4[a1];
}

{
  if (a1 != 0 && a1 < 0xFFFFFFF2)
    return 0;
  else
    return dword_1000D345C[a1 + 14];
}

uint64_t ProtobufUtil::toProtobuf(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  int v8;
  int32x2_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;

  v4 = *(_DWORD *)(a2 + 124);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 16);
  *(_DWORD *)(a2 + 124) = v4 | 0x3F;
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 32);
  v6 = *(_DWORD *)(a1 + 48);
  v5 = *(_DWORD *)(a1 + 52);
  *(_DWORD *)(a2 + 56) = v6;
  result = sub_10003C71C(v5);
  v8 = 0;
  *(_DWORD *)(a2 + 60) = result;
  v9 = *(int32x2_t *)(a1 + 56);
  v10 = *(_DWORD *)(a1 + 88);
  v11 = *(int *)(a1 + 92);
  if (v10 < 7)
    v12 = v10 + 1;
  else
    v12 = 0;
  *(_DWORD *)(a2 + 96) = v12;
  *(int8x8_t *)(a2 + 64) = vand_s8((int8x8_t)vadd_s32(v9, (int32x2_t)0x100000001), (int8x8_t)vcgt_u32((uint32x2_t)0x600000003, (uint32x2_t)v9));
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 64);
  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a1 + 80);
  if (v11 <= 0x10)
    v8 = dword_1000D3498[v11];
  *(_DWORD *)(a2 + 100) = v8;
  *(_WORD *)(a2 + 104) = *(_WORD *)(a1 + 96);
  v13 = *(_QWORD *)(a1 + 104);
  *(_DWORD *)(a2 + 124) = v4 | 0x3FFFF;
  *(_QWORD *)(a2 + 112) = v13;
  LODWORD(v13) = *(_DWORD *)(a1 + 120);
  *(_DWORD *)(a2 + 124) = v4 | 0x7FFFF;
  *(_DWORD *)(a2 + 108) = v13;
  return result;
}

{
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  unsigned int v17;
  unsigned int v18;

  v4 = sub_10003C71C(*(_DWORD *)a1);
  v5 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 40) = v4;
  *(_DWORD *)(a2 + 48) = v5 | 3;
  v6 = *(_QWORD *)(a2 + 8);
  if (!v6)
    operator new();
  v7 = *(_DWORD *)(v6 + 32);
  *(_BYTE *)(v6 + 8) = *(_BYTE *)(a1 + 4);
  v8 = *(unsigned __int8 *)(a1 + 6);
  *(_DWORD *)(v6 + 12) = *(unsigned __int8 *)(a1 + 5);
  *(_DWORD *)(v6 + 16) = v8;
  v9 = *(unsigned __int16 *)(a1 + 8);
  *(_DWORD *)(v6 + 32) = v7 | 0x1F;
  v10 = *(unsigned __int8 *)(a1 + 10);
  *(_DWORD *)(v6 + 20) = v9;
  *(_DWORD *)(v6 + 24) = v10;
  *(_DWORD *)(a2 + 48) |= 4u;
  v11 = *(_QWORD *)(a2 + 16);
  if (!v11)
    operator new();
  sub_10003C850(a1 + 16, v11);
  *(_DWORD *)(a2 + 48) |= 8u;
  v12 = *(_QWORD *)(a2 + 24);
  if (!v12)
    operator new();
  v13 = *(_DWORD *)(v12 + 16) | 3;
  *(_WORD *)(v12 + 8) = *(_WORD *)(a1 + 72);
  *(_DWORD *)(v12 + 16) = v13;
  *(_DWORD *)(a2 + 48) |= 0x10u;
  v14 = *(_QWORD *)(a2 + 32);
  if (!v14)
    operator new();
  *(_DWORD *)(v14 + 24) |= 1u;
  v15 = *(_QWORD *)(v14 + 8);
  if (!v15)
    operator new();
  result = sub_10003C850(a1 + 80, v15);
  v17 = *(_DWORD *)(a1 + 136);
  if (v17 < 3)
    v18 = v17 + 1;
  else
    v18 = 0;
  *(_DWORD *)(v14 + 24) |= 2u;
  *(_DWORD *)(v14 + 16) = v18;
  return result;
}

uint64_t sub_10003C850(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  const std::string *v7;
  std::string *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;

  v4 = *(_DWORD *)(a2 + 44);
  *(_BYTE *)(a2 + 8) = *(_BYTE *)a1;
  v5 = *(_DWORD *)(a1 + 4);
  if (v5 < 4)
    v6 = v5 + 1;
  else
    v6 = 0;
  *(_DWORD *)(a2 + 12) = v6;
  v7 = (const std::string *)(a1 + 8);
  *(_DWORD *)(a2 + 44) = v4 | 7;
  v8 = *(std::string **)(a2 + 16);
  if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v8, v7);
  v9 = *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32);
  result = sub_10003C950(a2 + 24, *(_DWORD *)(a1 + 40) - *(_DWORD *)(a1 + 32));
  if ((int)v9 >= 1)
  {
    v11 = 0;
    do
    {
      v12 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + v11);
      v13 = *(_DWORD *)(a2 + 32);
      if (v13 == *(_DWORD *)(a2 + 36))
      {
        result = sub_10003C950(a2 + 24, v13 + 1);
        v13 = *(_DWORD *)(a2 + 32);
      }
      v14 = *(_QWORD *)(a2 + 24);
      *(_DWORD *)(a2 + 32) = v13 + 1;
      *(_DWORD *)(v14 + 4 * v13) = v12;
      ++v11;
    }
    while (v9 != v11);
  }
  return result;
}

uint64_t sub_10003C950(uint64_t result, int a2)
{
  int v2;
  int v3;

  v2 = *(_DWORD *)(result + 12);
  if (v2 < a2)
  {
    v3 = 2 * v2;
    if (v3 <= a2)
      v3 = a2;
    if (v3 <= 4)
      v3 = 4;
    *(_DWORD *)(result + 12) = v3;
    operator new[]();
  }
  return result;
}

double ProtobufUtil::toProtobuf(int *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  double result;

  v4 = *(_DWORD *)(a2 + 104);
  v6 = *a1;
  v5 = a1[1];
  *(_DWORD *)(a2 + 8) = v6;
  *(_DWORD *)(a2 + 12) = sub_10003C71C(v5);
  v7 = ProtobufUtil::toProtobuf(a1[2]);
  v8 = a1[3];
  if (v8 < 0x17)
    v9 = v8 + 1;
  else
    v9 = 0;
  *(_DWORD *)(a2 + 16) = v7;
  *(_DWORD *)(a2 + 20) = v9;
  *(_OWORD *)(a2 + 24) = *((_OWORD *)a1 + 1);
  *(_OWORD *)(a2 + 40) = *((_OWORD *)a1 + 2);
  *(_OWORD *)(a2 + 56) = *((_OWORD *)a1 + 3);
  *(_QWORD *)(a2 + 72) = *((_QWORD *)a1 + 8);
  *(_BYTE *)(a2 + 96) = *((_BYTE *)a1 + 72);
  *(_WORD *)(a2 + 97) = *(_WORD *)((char *)a1 + 73);
  *(_DWORD *)(a2 + 104) = v4 | 0x7FFF;
  v10 = *(_QWORD *)(a2 + 80);
  if (!v10)
    operator new();
  v11 = *(_DWORD *)(v10 + 60);
  *(_OWORD *)(v10 + 8) = *((_OWORD *)a1 + 5);
  *(_OWORD *)(v10 + 24) = *((_OWORD *)a1 + 6);
  *(_QWORD *)(v10 + 40) = *((_QWORD *)a1 + 14);
  v12 = *((unsigned __int8 *)a1 + 120);
  *(_DWORD *)(v10 + 60) = v11 | 0x7F;
  v13 = *((unsigned __int8 *)a1 + 121);
  *(_DWORD *)(v10 + 48) = v12;
  *(_DWORD *)(v10 + 52) = v13;
  *(_DWORD *)(a2 + 104) |= 0x8000u;
  v14 = *(_QWORD *)(a2 + 88);
  if (!v14)
    operator new();
  v15 = *(_DWORD *)(v14 + 28);
  v16 = *((unsigned __int16 *)a1 + 66);
  *(_DWORD *)(v14 + 8) = a1[32];
  *(_DWORD *)(v14 + 12) = v16;
  result = *((double *)a1 + 17);
  *(_DWORD *)(v14 + 28) = v15 | 7;
  *(double *)(v14 + 16) = result;
  return result;
}

int8x8_t ProtobufUtil::toProtobuf(int32x2_t *a1, int8x8_t *a2)
{
  __int32 v2;
  int8x8_t result;
  __int32 v4;

  v2 = a2[3].i32[0];
  a2[3].i32[0] = v2 | 3;
  result = vand_s8((int8x8_t)vadd_s32(*a1, (int32x2_t)0x200000002), (int8x8_t)vcgt_u32((uint32x2_t)0x600000005, (uint32x2_t)vadd_s32(*a1, (int32x2_t)0x100000001)));
  a2[1] = result;
  v4 = a1[1].i32[0];
  a2[3].i32[0] = v2 | 7;
  a2[2].i32[0] = v4;
  return result;
}

_DWORD *sub_10003CDE0(int *a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  _DWORD *result;
  int v7;
  int v8;
  int v9;
  int v10;

  v3 = *a1;
  v4 = *(_DWORD *)(a2 + 32);
  v5 = *((unsigned __int16 *)a1 + 2);
  *(_DWORD *)(a2 + 32) = v4 | 3;
  *(_DWORD *)(a2 + 8) = v3;
  *(_DWORD *)(a2 + 12) = v5;
  *(_DWORD *)(a2 + 24) = a1[2];
  *(_DWORD *)(a2 + 32) = v4 | 0xF;
  result = *(_DWORD **)(a2 + 16);
  if (!result)
    operator new();
  v7 = *((unsigned __int16 *)a1 + 6);
  v8 = result[6];
  v9 = *((unsigned __int16 *)a1 + 7);
  result[6] = v8 | 3;
  result[2] = v7;
  result[3] = v9;
  v10 = a1[4];
  result[6] = v8 | 7;
  result[4] = v10;
  return result;
}

uint32x4_t ProtobufUtil::toProtobuf(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int8x8_t *v7;
  int8x8_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  _DWORD *v16;
  int v17;
  int v18;
  int v19;
  _DWORD *v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  _DWORD *v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint32x4_t *v42;
  _DWORD *v43;
  int v44;
  int v45;
  int v46;
  uint32x4_t v47;
  uint64_t v48;
  _DWORD *v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  int *v56;
  _DWORD *v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  _DWORD *v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  _DWORD *v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int *v75;
  int v76;
  uint8x8_t v77;
  uint64_t i;
  int v79;
  uint64_t v80;
  uint64_t v81;
  _DWORD *v82;
  int v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  uint64_t v91;
  _DWORD *v92;
  _DWORD *v93;
  int v94;
  int v95;
  _DWORD *v96;
  int v97;
  int v98;
  int v99;
  int v100;
  _DWORD *v101;
  int v102;
  int v103;
  int v104;
  uint32x4_t *v105;
  __int32 v106;
  __int32 v107;
  uint32x4_t result;
  int v109;

  v4 = ProtobufUtil::toProtobuf(*(_DWORD *)a1);
  v5 = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = v5 | 1;
  v6 = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 12) = v6;
  *(_DWORD *)(a2 + 64) = v5 | 7;
  v7 = *(int8x8_t **)(a2 + 16);
  if (!v7)
    operator new();
  v8 = ProtobufUtil::toProtobuf((int32x2_t *)(a1 + 8), v7);
  *(_DWORD *)(a2 + 64) |= 8u;
  v9 = *(_QWORD *)(a2 + 24);
  if (!v9)
    operator new();
  v10 = *(_DWORD *)(v9 + 40);
  v11 = *(unsigned __int16 *)(a1 + 24);
  *(_DWORD *)(v9 + 8) = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(v9 + 12) = v11;
  *(_DWORD *)(v9 + 40) = v10 | 0xF;
  v12 = *(_DWORD *)(a1 + 28);
  v13 = *(_DWORD *)(a1 + 32);
  v14 = (v12 + 1) >= 3;
  v15 = v12 + 2;
  if (v14)
    v15 = 0;
  *(_DWORD *)(v9 + 16) = *(unsigned __int8 *)(a1 + 26);
  *(_DWORD *)(v9 + 20) = v15;
  *(_DWORD *)(v9 + 32) = v13;
  *(_DWORD *)(v9 + 40) = v10 | 0x3F;
  v16 = *(_DWORD **)(v9 + 24);
  if (!v16)
    operator new();
  v17 = v16[6];
  v18 = *(unsigned __int16 *)(a1 + 40);
  v16[2] = *(_DWORD *)(a1 + 36);
  v16[3] = v18;
  v19 = *(unsigned __int8 *)(a1 + 42);
  v16[6] = v17 | 7;
  v16[4] = v19;
  *(_DWORD *)(a2 + 64) |= 0x10u;
  v20 = *(_DWORD **)(a2 + 32);
  if (!v20)
    operator new();
  v21 = v20[9];
  v20[9] = v21 | 1;
  v22 = *(_DWORD *)(a1 + 44);
  v23 = *(_DWORD *)(a1 + 48);
  if (v22 < 5)
    v24 = v22 + 1;
  else
    v24 = 0;
  v20[2] = v24;
  v20[3] = v23;
  v25 = *(unsigned __int8 *)(a1 + 54);
  v20[4] = *(unsigned __int16 *)(a1 + 52);
  v20[5] = v25;
  v26 = *(_DWORD *)(a1 + 56);
  v27 = v26 + 1;
  v28 = v26 + 2;
  if (v27 >= 3)
    v28 = 0;
  v29 = *(unsigned __int16 *)(a1 + 60);
  v20[9] = v21 | 0x3F;
  v20[6] = v28;
  v20[7] = v29;
  *(_DWORD *)(a2 + 64) |= 0x20u;
  v30 = *(_QWORD *)(a2 + 40);
  if (!v30)
    operator new();
  v31 = 0;
  v32 = *(_DWORD *)(a1 + 64);
  switch(v32)
  {
    case 0:
      v31 = 1;
      break;
    case 1:
      v31 = 2;
      break;
    case 2:
    case 4:
    case 6:
    case 7:
      break;
    case 3:
      v31 = 3;
      break;
    case 5:
      v31 = 4;
      break;
    case 8:
      v31 = 5;
      break;
    case 9:
      v31 = 6;
      break;
    case 10:
      v31 = 7;
      break;
    default:
      if (v32 == 255)
        v31 = 8;
      break;
  }
  v33 = *(_DWORD *)(v30 + 24);
  *(_DWORD *)(v30 + 16) = v31;
  *(_DWORD *)(v30 + 24) = v33 | 3;
  v34 = *(_QWORD *)(v30 + 8);
  if (!v34)
    operator new();
  v35 = (_DWORD *)(v34 + 72);
  v36 = *(_QWORD *)(v34 + 8);
  *(_DWORD *)(v34 + 72) |= 1u;
  if (!v36)
    operator new();
  *(_DWORD *)(v36 + 24) |= 1u;
  v37 = *(_DWORD **)(v36 + 8);
  if (!v37)
    operator new();
  v38 = *(_DWORD *)(a1 + 68);
  v39 = v37[5];
  v37[5] = v39 | 1;
  v40 = *(_DWORD *)(a1 + 72);
  v37[5] = v39 | 3;
  v37[2] = v38;
  v37[3] = v40;
  v41 = *(unsigned __int8 *)(a1 + 76);
  *(_DWORD *)(v36 + 24) |= 2u;
  *(_DWORD *)(v36 + 16) = v41;
  *v35 |= 2u;
  v42 = *(uint32x4_t **)(v34 + 16);
  if (!v42)
    operator new();
  v42[2].i32[1] |= 1u;
  v43 = (_DWORD *)v42->i64[1];
  if (!v43)
    operator new();
  v44 = *(_DWORD *)(a1 + 80);
  v45 = v43[5];
  v43[5] = v45 | 1;
  v46 = *(_DWORD *)(a1 + 84);
  v43[5] = v45 | 3;
  v43[2] = v44;
  v43[3] = v46;
  v42[2].i32[1] |= 0x1Eu;
  v8.i32[0] = *(_DWORD *)(a1 + 88);
  v47 = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)v8));
  v42[1] = v47;
  *v35 |= 4u;
  v48 = *(_QWORD *)(v34 + 24);
  if (!v48)
    operator new();
  *(_DWORD *)(v48 + 44) |= 1u;
  v49 = *(_DWORD **)(v48 + 8);
  if (!v49)
    operator new();
  v50 = *(_DWORD *)(a1 + 92);
  v51 = v49[5];
  v49[5] = v51 | 1;
  v52 = *(_DWORD *)(a1 + 96);
  v49[5] = v51 | 3;
  v49[2] = v50;
  v49[3] = v52;
  v53 = *(_DWORD *)(v48 + 44);
  *(_DWORD *)(v48 + 16) = *(unsigned __int16 *)(a1 + 100);
  v47.i32[0] = *(_DWORD *)(a1 + 102);
  *(uint32x4_t *)(v48 + 20) = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v47.i8));
  v54 = *(unsigned __int8 *)(a1 + 106);
  *(_DWORD *)(v48 + 44) = v53 | 0x7E;
  *(_DWORD *)(v48 + 36) = v54;
  *v35 |= 8u;
  v55 = *(_QWORD *)(v34 + 32);
  if (!v55)
    operator new();
  v56 = (int *)(v55 + 40);
  v57 = *(_DWORD **)(v55 + 8);
  *(_DWORD *)(v55 + 40) |= 1u;
  if (!v57)
    operator new();
  v58 = *(_DWORD *)(a1 + 108);
  v59 = v57[5];
  v57[5] = v59 | 1;
  v60 = *(_DWORD *)(a1 + 112);
  v57[5] = v59 | 3;
  v57[2] = v58;
  v57[3] = v60;
  v61 = *v56;
  v62 = *(unsigned __int8 *)(a1 + 118);
  *(_DWORD *)(v55 + 16) = *(unsigned __int16 *)(a1 + 116);
  *(_DWORD *)(v55 + 20) = v62;
  v63 = *(unsigned __int8 *)(a1 + 120);
  *(_DWORD *)(v55 + 24) = *(unsigned __int8 *)(a1 + 119);
  *(_DWORD *)(v55 + 28) = v63;
  v64 = *(unsigned __int8 *)(a1 + 121);
  *v56 = v61 | 0x3E;
  *(_DWORD *)(v55 + 32) = v64;
  *v35 |= 0x10u;
  v65 = *(_DWORD **)(v34 + 40);
  if (!v65)
    operator new();
  v66 = *(_DWORD *)(a1 + 124);
  v67 = v65[5];
  v65[5] = v67 | 1;
  v68 = *(_DWORD *)(a1 + 128);
  v65[5] = v67 | 3;
  v65[2] = v66;
  v65[3] = v68;
  *v35 |= 0x20u;
  v69 = *(_QWORD *)(v34 + 48);
  if (!v69)
    operator new();
  *(_DWORD *)(v69 + 24) |= 1u;
  v70 = *(_DWORD **)(v69 + 8);
  if (!v70)
    operator new();
  v71 = *(_DWORD *)(a1 + 132);
  v72 = v70[5];
  v70[5] = v72 | 1;
  v73 = *(_DWORD *)(a1 + 136);
  v70[5] = v72 | 3;
  v70[2] = v71;
  v70[3] = v73;
  v74 = *(unsigned __int16 *)(a1 + 140);
  *(_DWORD *)(v69 + 24) |= 2u;
  *(_DWORD *)(v69 + 16) = v74;
  *v35 |= 0x40u;
  v75 = *(int **)(v34 + 56);
  if (!v75)
    operator new();
  v76 = *(unsigned __int8 *)(a1 + 144);
  v75[10] |= 1u;
  v75[8] = v76;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v75 + 2), 15);
  for (i = 0; i != 120; i += 8)
  {
    v79 = v75[5];
    v80 = v75[4];
    if ((int)v80 >= v79)
    {
      if (v79 == v75[6])
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v75 + 2), v79 + 1);
        v79 = v75[5];
      }
      v75[5] = v79 + 1;
      operator new();
    }
    v81 = *((_QWORD *)v75 + 1);
    v75[4] = v80 + 1;
    v82 = *(_DWORD **)(v81 + 8 * v80);
    v83 = *(_DWORD *)(a1 + i + 148);
    v84 = v82[5];
    v82[5] = v84 | 1;
    v85 = *(_DWORD *)(a1 + i + 152);
    v82[5] = v84 | 3;
    v82[2] = v83;
    v82[3] = v85;
  }
  v86 = *(unsigned __int8 *)(a1 + 268);
  *v35 |= 0x80u;
  *(_DWORD *)(v34 + 64) = v86;
  *(_DWORD *)(a2 + 64) |= 0x40u;
  v87 = *(_QWORD *)(a2 + 48);
  if (!v87)
    operator new();
  v88 = *(_DWORD *)(a1 + 272);
  switch(v88)
  {
    case 0:
      v89 = 1;
      break;
    case 1:
      v89 = 2;
      break;
    case 2:
      v89 = 3;
      break;
    case 3:
      v89 = 4;
      break;
    default:
      if (v88 == 255)
        v89 = 5;
      else
        v89 = 0;
      break;
  }
  v90 = *(_DWORD *)(v87 + 24);
  *(_DWORD *)(v87 + 16) = v89;
  *(_DWORD *)(v87 + 24) = v90 | 3;
  v91 = *(_QWORD *)(v87 + 8);
  if (!v91)
    operator new();
  v92 = (_DWORD *)(v91 + 44);
  v93 = *(_DWORD **)(v91 + 8);
  *(_DWORD *)(v91 + 44) |= 1u;
  if (!v93)
    operator new();
  v94 = *(unsigned __int16 *)(a1 + 276);
  v95 = *(unsigned __int16 *)(a1 + 278);
  v93[5] |= 3u;
  v93[2] = v94;
  v93[3] = v95;
  *v92 |= 2u;
  v96 = *(_DWORD **)(v91 + 16);
  if (!v96)
    operator new();
  v97 = v96[7];
  v98 = *(unsigned __int16 *)(a1 + 282);
  v96[2] = *(unsigned __int16 *)(a1 + 280);
  v96[3] = v98;
  v99 = *(unsigned __int8 *)(a1 + 284);
  v96[7] = v97 | 0xF;
  v100 = *(unsigned __int8 *)(a1 + 285);
  v96[4] = v99;
  v96[5] = v100;
  *v92 |= 4u;
  v101 = *(_DWORD **)(v91 + 24);
  if (!v101)
    operator new();
  v102 = v101[6];
  v103 = *(unsigned __int16 *)(a1 + 288);
  v101[2] = *(unsigned __int16 *)(a1 + 286);
  v101[3] = v103;
  v104 = *(unsigned __int8 *)(a1 + 290);
  v101[6] = v102 | 7;
  v101[4] = v104;
  *v92 |= 8u;
  v105 = *(uint32x4_t **)(v91 + 32);
  if (!v105)
    operator new();
  v106 = v105[2].i32[1];
  v107 = *(unsigned __int16 *)(a1 + 294);
  v105->i32[2] = *(unsigned __int16 *)(a1 + 292);
  v105->i32[3] = v107;
  v105[2].i32[1] = v106 | 0x3F;
  v77.i32[0] = *(_DWORD *)(a1 + 296);
  result = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v77));
  v105[1] = result;
  v109 = *(_DWORD *)(a1 + 300);
  *(_DWORD *)(a2 + 64) |= 0x80u;
  *(_DWORD *)(a2 + 56) = v109;
  return result;
}

_DWORD *ProtobufUtil::toProtobuf(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  _DWORD *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  _DWORD *v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *result;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  int v59;
  int v60;
  int v61;

  v4 = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = v4 | 1;
  v5 = *(_DWORD *)(a1 + 4);
  if (*(_DWORD *)a1 < 5u)
    v6 = *(_DWORD *)a1 + 1;
  else
    v6 = 0;
  *(_DWORD *)(a2 + 8) = v6;
  *(_DWORD *)(a2 + 12) = v5;
  v7 = *(unsigned __int8 *)(a1 + 10);
  *(_DWORD *)(a2 + 16) = *(unsigned __int16 *)(a1 + 8);
  *(_DWORD *)(a2 + 20) = v7;
  *(_DWORD *)(a2 + 32) = *(unsigned __int8 *)(a1 + 11);
  *(_DWORD *)(a2 + 52) = v4 | 0x3F;
  v8 = *(_QWORD *)(a2 + 24);
  if (!v8)
    operator new();
  v9 = *(int *)(a1 + 16);
  if (v9 > 4)
    v10 = 0;
  else
    v10 = dword_1000D34DC[v9];
  v11 = *(_DWORD *)(v8 + 24);
  *(_DWORD *)(v8 + 16) = v10;
  *(_DWORD *)(v8 + 24) = v11 | 3;
  v12 = *(_QWORD *)(v8 + 8);
  if (!v12)
    operator new();
  *(_DWORD *)(v12 + 36) |= 1u;
  v13 = *(_QWORD *)(v12 + 8);
  if (!v13)
    operator new();
  v14 = *(_DWORD *)(v13 + 36);
  *(_QWORD *)(v13 + 8) = *(_QWORD *)(a1 + 24);
  v15 = *(unsigned __int16 *)(a1 + 34);
  *(_DWORD *)(v13 + 16) = *(unsigned __int16 *)(a1 + 32);
  *(_DWORD *)(v13 + 20) = v15;
  *(_DWORD *)(v13 + 36) = v14 | 0xF;
  v16 = *(_QWORD *)(v13 + 24);
  if (!v16)
    operator new();
  sub_10003CDE0((int *)(a1 + 36), v16);
  *(_DWORD *)(v12 + 36) |= 2u;
  v17 = *(_QWORD *)(v12 + 16);
  if (!v17)
    operator new();
  v18 = *(_DWORD *)(v17 + 28);
  v19 = *(unsigned __int16 *)(a1 + 58);
  *(_DWORD *)(v17 + 8) = *(unsigned __int8 *)(a1 + 56);
  *(_DWORD *)(v17 + 12) = v19;
  *(_DWORD *)(v17 + 28) = v18 | 7;
  v20 = *(_QWORD *)(v17 + 16);
  if (!v20)
    operator new();
  sub_10003CDE0((int *)(a1 + 60), v20);
  *(_DWORD *)(v12 + 36) |= 4u;
  v21 = *(_QWORD *)(v12 + 24);
  if (!v21)
    operator new();
  v22 = *(unsigned __int16 *)(a1 + 80);
  v23 = *(_DWORD *)(v21 + 60);
  *(_DWORD *)(v21 + 60) = v23 | 1;
  v24 = *(_DWORD *)(a1 + 84);
  *(_DWORD *)(v21 + 8) = v22;
  *(_DWORD *)(v21 + 12) = v24;
  v25 = *(unsigned __int16 *)(a1 + 88);
  *(_DWORD *)(v21 + 60) = v23 | 7;
  v26 = *(_DWORD *)(a1 + 92);
  *(_DWORD *)(v21 + 16) = v25;
  *(_DWORD *)(v21 + 20) = v26;
  *(_DWORD *)(v21 + 60) = v23 | 0x1F;
  v27 = *(_DWORD **)(v21 + 24);
  if (!v27)
    operator new();
  v28 = *(unsigned __int16 *)(a1 + 96);
  v29 = v27[6];
  v27[6] = v29 | 3;
  v30 = *(unsigned __int16 *)(a1 + 98);
  v27[2] = v28;
  v27[3] = v30;
  v31 = *(_DWORD *)(a1 + 100);
  v27[6] = v29 | 7;
  v27[4] = v31;
  v32 = *(_DWORD *)(a1 + 104);
  v33 = *(_DWORD *)(v21 + 60);
  v34 = *(unsigned __int16 *)(a1 + 108);
  *(_DWORD *)(v21 + 60) = v33 | 0x60;
  *(_DWORD *)(v21 + 32) = v32;
  *(_DWORD *)(v21 + 36) = v34;
  v35 = *(char *)(a1 + 116);
  *(_DWORD *)(v21 + 40) = *(_DWORD *)(a1 + 112);
  *(_DWORD *)(v21 + 44) = v35;
  v36 = *(unsigned __int8 *)(a1 + 117);
  *(_DWORD *)(v21 + 60) = v33 | 0x3E0;
  v37 = *(_DWORD *)(a1 + 120);
  *(_DWORD *)(v21 + 60) = v33 | 0x7E0;
  *(_DWORD *)(v21 + 48) = v36;
  *(_DWORD *)(v21 + 52) = v37;
  v38 = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 36) = *(unsigned __int8 *)(a1 + 128);
  *(_DWORD *)(a2 + 52) = v38 | 0xC0;
  v39 = *(_QWORD *)(a2 + 40);
  if (!v39)
    operator new();
  v40 = *(_DWORD *)(a1 + 132);
  if (v40 < 6)
    v41 = v40 + 1;
  else
    v41 = 0;
  v42 = *(_DWORD *)(v39 + 24);
  *(_DWORD *)(v39 + 16) = v41;
  *(_DWORD *)(v39 + 24) = v42 | 3;
  v43 = *(_DWORD **)(v39 + 8);
  if (!v43)
    operator new();
  v44 = v43[12];
  v45 = *(unsigned __int8 *)(a1 + 137);
  v43[2] = *(unsigned __int8 *)(a1 + 136);
  v43[3] = v45;
  v46 = *(unsigned __int8 *)(a1 + 138);
  v43[12] = v44 | 7;
  v43[10] = v46;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v43 + 4), 32);
  v47 = -768;
  do
  {
    v48 = v43[7];
    v49 = (int)v43[6];
    if ((int)v49 >= v48)
    {
      if (v48 == v43[8])
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v43 + 4), v48 + 1);
        v48 = v43[7];
      }
      v43[7] = v48 + 1;
      operator new();
    }
    v50 = *((_QWORD *)v43 + 2);
    v43[6] = v49 + 1;
    result = *(_DWORD **)(v50 + 8 * v49);
    v52 = result[12];
    v53 = a1 + v47;
    v54 = *(unsigned __int8 *)(a1 + v47 + 910);
    result[2] = *(__int16 *)(a1 + v47 + 908);
    result[3] = v54;
    v55 = *(unsigned __int8 *)(a1 + v47 + 912);
    result[4] = *(unsigned __int8 *)(a1 + v47 + 911);
    result[5] = v55;
    v56 = *(_DWORD *)(a1 + v47 + 916);
    if (v56 < 5)
      v57 = v56 + 1;
    else
      v57 = 0;
    result[12] = v52 | 0x1F;
    v58 = *(_DWORD *)(v53 + 920);
    result[6] = v57;
    result[7] = v58;
    v59 = *(unsigned __int8 *)(v53 + 924);
    result[12] = v52 | 0xFF;
    v60 = *(unsigned __int8 *)(v53 + 925);
    result[8] = v59;
    result[9] = v60;
    v61 = *(_DWORD *)(v53 + 928);
    result[12] = v52 | 0x1FF;
    result[10] = v61;
    v47 += 24;
  }
  while (v47);
  return result;
}

{
  int v4;
  int v5;
  int v6;
  int v7;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  _DWORD *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  int v40;
  _DWORD *v41;
  int v42;
  int v43;
  int v44;
  _DWORD *v45;
  int v46;
  int v47;
  _DWORD *v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  _DWORD *result;
  int v55;
  int v56;
  int v57;

  v4 = *(_DWORD *)(a2 + 76);
  v5 = *(unsigned __int16 *)(a1 + 4);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)a1;
  *(_DWORD *)(a2 + 12) = v5;
  v6 = *(unsigned __int8 *)(a1 + 6);
  v7 = *(unsigned __int8 *)(a1 + 7);
  *(_DWORD *)(a2 + 76) = v4 | 0xF;
  *(_DWORD *)(a2 + 16) = v6;
  *(_DWORD *)(a2 + 20) = v7;
  v8 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 24);
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 24), 16);
  v9 = -384;
  do
  {
    v10 = *(_DWORD *)(a2 + 36);
    v11 = *(int *)(a2 + 32);
    if ((int)v11 >= v10)
    {
      if (v10 == *(_DWORD *)(a2 + 40))
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v8, v10 + 1);
        v10 = *(_DWORD *)(a2 + 36);
      }
      *(_DWORD *)(a2 + 36) = v10 + 1;
      operator new();
    }
    v12 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 32) = v11 + 1;
    v13 = *(_DWORD **)(v12 + 8 * v11);
    v14 = v13[12];
    v15 = a1 + v9;
    v16 = *(unsigned __int16 *)(a1 + v9 + 394);
    v13[2] = *(__int16 *)(a1 + v9 + 392);
    v13[3] = v16;
    v17 = *(unsigned __int8 *)(a1 + v9 + 398);
    v13[4] = *(unsigned __int16 *)(a1 + v9 + 396);
    v13[5] = v17;
    v18 = *(unsigned __int8 *)(a1 + v9 + 400);
    v13[6] = *(unsigned __int8 *)(a1 + v9 + 399);
    v13[7] = v18;
    v19 = *(_DWORD *)(a1 + v9 + 404);
    if (v19 < 5)
      v20 = v19 + 1;
    else
      v20 = 0;
    v13[12] = v14 | 0x7F;
    v21 = *(_DWORD *)(v15 + 408);
    v13[8] = v20;
    v13[9] = v21;
    v22 = *(unsigned __int8 *)(v15 + 412);
    v13[12] = v14 | 0x1FF;
    v13[10] = v22;
    v9 += 24;
  }
  while (v9);
  *(_DWORD *)(a2 + 76) |= 0x20u;
  v23 = *(_QWORD *)(a2 + 48);
  if (!v23)
    operator new();
  v24 = *(int *)(a1 + 392);
  if (v24 > 4)
    v25 = 0;
  else
    v25 = dword_1000D34DC[v24];
  v26 = *(_DWORD *)(v23 + 24);
  *(_DWORD *)(v23 + 16) = v25;
  *(_DWORD *)(v23 + 24) = v26 | 3;
  v27 = *(_QWORD *)(v23 + 8);
  if (!v27)
    operator new();
  v28 = (_DWORD *)(v27 + 36);
  v29 = *(_QWORD *)(v27 + 8);
  *(_DWORD *)(v27 + 36) |= 1u;
  if (!v29)
    operator new();
  v30 = *(_QWORD *)(v29 + 8);
  *(_DWORD *)(v29 + 28) |= 1u;
  if (!v30)
    operator new();
  v31 = (int *)(v30 + 36);
  v32 = *(_DWORD **)(v30 + 8);
  *(_DWORD *)(v30 + 36) |= 1u;
  if (!v32)
    operator new();
  v33 = *(_DWORD *)(a1 + 396);
  v34 = v32[5];
  v32[5] = v34 | 1;
  v35 = *(_DWORD *)(a1 + 400);
  v32[5] = v34 | 3;
  v32[2] = v33;
  v32[3] = v35;
  v36 = *v31;
  v37 = *(unsigned __int16 *)(a1 + 406);
  *(_DWORD *)(v30 + 16) = *(unsigned __int16 *)(a1 + 404);
  *(_DWORD *)(v30 + 20) = v37;
  *(_DWORD *)(v30 + 24) = *(unsigned __int16 *)(a1 + 408);
  v38 = *(_DWORD *)(a1 + 412);
  v39 = v38 + 1;
  v40 = v38 + 2;
  if (v39 >= 4)
    v40 = 0;
  *v31 = v36 | 0x1E;
  *(_DWORD *)(v30 + 28) = v40;
  *(_DWORD *)(v29 + 28) |= 2u;
  v41 = *(_DWORD **)(v29 + 16);
  if (!v41)
    operator new();
  v42 = *(_DWORD *)(a1 + 416);
  v43 = v41[5];
  v41[5] = v43 | 1;
  v44 = *(_DWORD *)(a1 + 420);
  v41[5] = v43 | 3;
  v41[2] = v42;
  v41[3] = v44;
  *v28 |= 2u;
  v45 = *(_DWORD **)(v27 + 16);
  if (!v45)
    operator new();
  v46 = *(_DWORD *)(a1 + 424);
  v47 = *(unsigned __int8 *)(a1 + 428);
  v45[5] |= 3u;
  v45[2] = v46;
  v45[3] = v47;
  *v28 |= 4u;
  v48 = *(_DWORD **)(v27 + 24);
  if (!v48)
    operator new();
  v49 = *(_DWORD *)(a1 + 432);
  v48[5] |= 3u;
  v50 = *(unsigned __int8 *)(a1 + 436);
  v48[2] = v49;
  v48[3] = v50;
  v51 = *(unsigned __int8 *)(a1 + 440);
  v52 = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a2 + 76) = v52 | 0x40;
  v53 = *(_DWORD *)(a1 + 444);
  *(_DWORD *)(a2 + 56) = v51;
  *(_DWORD *)(a2 + 60) = v53;
  *(_DWORD *)(a2 + 76) = v52 | 0x1C0;
  result = *(_DWORD **)(a2 + 64);
  if (!result)
    operator new();
  v55 = result[6];
  v56 = *(unsigned __int16 *)(a1 + 452);
  result[2] = *(_DWORD *)(a1 + 448);
  result[3] = v56;
  v57 = *(unsigned __int8 *)(a1 + 454);
  result[6] = v55 | 7;
  result[4] = v57;
  return result;
}

_DWORD *ProtobufUtil::toProtobuf(int32x2_t *a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int8x8_t *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *result;
  int v11;
  __int8 v12;

  v4 = ProtobufUtil::toProtobuf(a1->i32[0]);
  v5 = *(_DWORD *)(a2 + 52);
  v6 = a1->u8[4];
  *(_DWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 12) = v6;
  *(_DWORD *)(a2 + 52) = v5 | 7;
  v7 = *(int8x8_t **)(a2 + 16);
  if (!v7)
    operator new();
  ProtobufUtil::toProtobuf(a1 + 1, v7);
  *(_DWORD *)(a2 + 52) |= 8u;
  v8 = *(_QWORD *)(a2 + 24);
  if (!v8)
    operator new();
  ProtobufUtil::toProtobuf((uint64_t)&a1[2] + 4, v8);
  *(_DWORD *)(a2 + 52) |= 0x10u;
  v9 = *(_QWORD *)(a2 + 32);
  if (!v9)
    operator new();
  result = ProtobufUtil::toProtobuf((uint64_t)&a1[60], v9);
  v11 = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 40) = a1[174].i32[0];
  v12 = a1[174].i8[4];
  *(_DWORD *)(a2 + 52) = v11 | 0x60;
  *(_BYTE *)(a2 + 44) = v12;
  return result;
}

{
  int v4;
  int v5;
  int v6;
  int8x8_t *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *result;
  unsigned int v11;
  unsigned int v12;
  int v13;
  __int8 v14;

  v4 = ProtobufUtil::toProtobuf(a1->i32[0]);
  v5 = *(_DWORD *)(a2 + 52);
  v6 = a1->u8[4];
  *(_DWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 12) = v6;
  *(_DWORD *)(a2 + 52) = v5 | 7;
  v7 = *(int8x8_t **)(a2 + 16);
  if (!v7)
    operator new();
  ProtobufUtil::toProtobuf(a1 + 1, v7);
  *(_DWORD *)(a2 + 52) |= 8u;
  v8 = *(_QWORD *)(a2 + 24);
  if (!v8)
    operator new();
  ProtobufUtil::toProtobuf((uint64_t)&a1[2] + 4, v8);
  *(_DWORD *)(a2 + 52) |= 0x10u;
  v9 = *(_QWORD *)(a2 + 32);
  if (!v9)
    operator new();
  result = ProtobufUtil::toProtobuf((int *)&a1[59] + 1, v9);
  v11 = a1[65].u32[0];
  if (v11 < 3)
    v12 = v11 + 1;
  else
    v12 = 0;
  v13 = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 40) = v12;
  v14 = a1[65].i8[4];
  *(_DWORD *)(a2 + 52) = v13 | 0x60;
  *(_BYTE *)(a2 + 44) = v14;
  return result;
}

uint64_t ProtobufUtil::toProtobuf(unsigned __int16 *a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t i;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t result;
  uint64_t j;
  int v15;
  int v16;
  uint64_t v17;
  int v18;

  v4 = *(_DWORD *)(a2 + 64);
  v5 = a1[1];
  *(_DWORD *)(a2 + 8) = *a1;
  *(_DWORD *)(a2 + 12) = v5;
  v6 = *((unsigned __int8 *)a1 + 4);
  v7 = *((unsigned __int8 *)a1 + 5);
  *(_DWORD *)(a2 + 64) = v4 | 0xF;
  *(_DWORD *)(a2 + 16) = v6;
  *(_DWORD *)(a2 + 20) = v7;
  v8 = a2 + 24;
  sub_10003C950(a2 + 24, 15);
  for (i = 0; i != 15; ++i)
  {
    v10 = *((unsigned __int8 *)a1 + i + 6);
    v11 = *(_DWORD *)(a2 + 32);
    if (v11 == *(_DWORD *)(a2 + 36))
    {
      sub_10003C950(v8, v11 + 1);
      v11 = *(_DWORD *)(a2 + 32);
    }
    v12 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 32) = v11 + 1;
    *(_DWORD *)(v12 + 4 * v11) = v10;
  }
  result = sub_10003C950(a2 + 40, 15);
  for (j = 0; j != 15; ++j)
  {
    v15 = *((unsigned __int8 *)a1 + j + 21);
    v16 = *(_DWORD *)(a2 + 48);
    if (v16 == *(_DWORD *)(a2 + 52))
    {
      result = sub_10003C950(a2 + 40, v16 + 1);
      v16 = *(_DWORD *)(a2 + 48);
    }
    v17 = *(_QWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 48) = v16 + 1;
    *(_DWORD *)(v17 + 4 * v16) = v15;
  }
  v18 = *((unsigned __int8 *)a1 + 36);
  *(_DWORD *)(a2 + 64) |= 0x40u;
  *(_DWORD *)(a2 + 56) = v18;
  return result;
}

uint32x4_t ProtobufUtil::toProtobuf(unsigned __int8 *a1, uint64_t a2)
{
  unsigned __int8 *v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t i;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t j;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  unsigned __int8 *v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  _DWORD *v45;
  int v46;
  unsigned __int8 *v47;
  int v48;
  int v49;
  uint8x8_t v50;
  uint64_t k;
  int v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  int v56;
  int v57;
  uint64_t v58;
  uint32x4_t result;
  unsigned __int8 *v60;

  v3 = a1;
  v4 = *a1;
  v5 = a1[1];
  *(_DWORD *)(a2 + 72) |= 3u;
  *(_DWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 12) = v5;
  v6 = a2 + 16;
  sub_10003C950(a2 + 16, 8);
  for (i = 0; i != 32; i += 4)
  {
    v8 = *(_DWORD *)&v3[i + 4];
    if (v8 < 6)
      v9 = v8 + 1;
    else
      v9 = 0;
    v10 = *(_DWORD *)(a2 + 24);
    if (v10 == *(_DWORD *)(a2 + 28))
    {
      sub_10003C950(v6, v10 + 1);
      v10 = *(_DWORD *)(a2 + 24);
    }
    v11 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 24) = v10 + 1;
    *(_DWORD *)(v11 + 4 * v10) = v9;
  }
  v12 = *(_DWORD *)(a2 + 72);
  v13 = v3[40];
  *(_DWORD *)(a2 + 32) = *((_DWORD *)v3 + 9);
  *(_DWORD *)(a2 + 36) = v13;
  v14 = v3[41];
  *(_DWORD *)(a2 + 72) = v12 | 0x38;
  *(_DWORD *)(a2 + 64) = v14;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 40), 8);
  v15 = 0;
  v60 = v3;
  v16 = v3;
  do
  {
    v17 = *(_DWORD *)(a2 + 52);
    v18 = *(int *)(a2 + 48);
    if ((int)v18 >= v17)
    {
      if (v17 == *(_DWORD *)(a2 + 56))
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 40), v17 + 1);
        v17 = *(_DWORD *)(a2 + 52);
      }
      *(_DWORD *)(a2 + 52) = v17 + 1;
      operator new();
    }
    v19 = *(_QWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 48) = v18 + 1;
    v20 = *(_QWORD *)(v19 + 8 * v18);
    v21 = *(_DWORD *)&v3[224 * v15 + 44];
    if (v21 < 6)
      v22 = v21 + 1;
    else
      v22 = 0;
    v23 = *(_DWORD *)(v20 + 72);
    v24 = &v3[224 * v15];
    v25 = *((unsigned __int16 *)v24 + 24);
    *(_DWORD *)(v20 + 8) = v22;
    *(_DWORD *)(v20 + 12) = v25;
    v26 = v24[50];
    *(_DWORD *)(v20 + 72) = v23 | 7;
    *(_DWORD *)(v20 + 64) = v26;
    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v20 + 16), 15);
    for (j = 0; j != 120; j += 8)
    {
      v28 = *(_DWORD *)(v20 + 28);
      v29 = *(int *)(v20 + 24);
      if ((int)v29 >= v28)
      {
        if (v28 == *(_DWORD *)(v20 + 32))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v20 + 16), v28 + 1);
          v28 = *(_DWORD *)(v20 + 28);
        }
        *(_DWORD *)(v20 + 28) = v28 + 1;
        operator new();
      }
      v30 = *(_QWORD *)(v20 + 16);
      *(_DWORD *)(v20 + 24) = v29 + 1;
      v31 = *(_DWORD **)(v30 + 8 * v29);
      v32 = v16[j + 52];
      v33 = v31[5];
      v31[5] = v33 | 1;
      v34 = *(_DWORD *)&v16[j + 56];
      v31[5] = v33 | 3;
      v31[2] = v32;
      v31[3] = v34;
    }
    *(_DWORD *)(v20 + 72) |= 0x10u;
    v35 = *(_QWORD *)(v20 + 40);
    if (!v35)
      operator new();
    v36 = *(_DWORD *)(v35 + 48);
    v37 = &v3[224 * v15];
    v38 = *((unsigned __int16 *)v37 + 88);
    *(_DWORD *)(v35 + 8) = *((_DWORD *)v37 + 43);
    *(_DWORD *)(v35 + 12) = v38;
    v39 = v37[179];
    *(_DWORD *)(v35 + 16) = v37[178];
    *(_DWORD *)(v35 + 20) = v39;
    v40 = v37[180];
    *(_DWORD *)(v35 + 48) = v36 | 0x1F;
    *(_DWORD *)(v35 + 40) = v40;
    sub_10003C950(v35 + 24, 15);
    v41 = 181;
    do
    {
      v42 = v16[v41];
      v43 = *(_DWORD *)(v35 + 32);
      if (v43 == *(_DWORD *)(v35 + 36))
      {
        sub_10003C950(v35 + 24, v43 + 1);
        v43 = *(_DWORD *)(v35 + 32);
      }
      ++v41;
      v44 = *(_QWORD *)(v35 + 24);
      *(_DWORD *)(v35 + 32) = v43 + 1;
      *(_DWORD *)(v44 + 4 * v43) = v42;
    }
    while (v41 != 196);
    *(_DWORD *)(v20 + 72) |= 0x20u;
    v45 = *(_DWORD **)(v20 + 48);
    if (!v45)
      operator new();
    v3 = v60;
    v46 = v45[13];
    v47 = &v60[224 * v15];
    v48 = v47[198];
    v45[2] = *((unsigned __int16 *)v47 + 98);
    v45[3] = v48;
    v49 = v47[199];
    LODWORD(v47) = v47[200];
    v45[13] = v46 | 0xF;
    v45[4] = v49;
    v45[5] = (_DWORD)v47;
    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v45 + 6), 15);
    for (k = 0; k != 60; k += 4)
    {
      v52 = v45[9];
      v53 = (int)v45[8];
      if ((int)v53 >= v52)
      {
        if (v52 == v45[10])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v45 + 6), v52 + 1);
          v52 = v45[9];
        }
        v45[9] = v52 + 1;
        operator new();
      }
      v54 = *((_QWORD *)v45 + 3);
      v45[8] = v53 + 1;
      v55 = *(_DWORD **)(v54 + 8 * v53);
      v56 = v16[k + 202];
      v57 = *(unsigned __int16 *)&v16[k + 204];
      v55[5] |= 3u;
      v55[2] = v56;
      v55[3] = v57;
    }
    *(_DWORD *)(v20 + 72) |= 0x40u;
    v58 = *(_QWORD *)(v20 + 56);
    if (!v58)
      operator new();
    *(_DWORD *)(v58 + 28) |= 0xFu;
    v50.i32[0] = *(_DWORD *)&v60[224 * v15 + 262];
    result = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v50));
    *(uint32x4_t *)(v58 + 8) = result;
    ++v15;
    v16 += 224;
  }
  while (v15 != 8);
  return result;
}

double ProtobufUtil::toProtobuf(int32x2_t *a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int8x8_t *v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  v4 = ProtobufUtil::toProtobuf(a1->i32[0]);
  v5 = *(_DWORD *)(a2 + 44);
  v6 = a1->u8[4];
  *(_DWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 12) = v6;
  *(_DWORD *)(a2 + 44) = v5 | 7;
  v7 = *(int8x8_t **)(a2 + 16);
  if (!v7)
    operator new();
  ProtobufUtil::toProtobuf(a1 + 1, v7);
  *(_DWORD *)(a2 + 44) |= 8u;
  v8 = *(_QWORD *)(a2 + 24);
  if (!v8)
    operator new();
  ProtobufUtil::toProtobuf((unsigned __int16 *)&a1[2] + 2, v8);
  *(_DWORD *)(a2 + 44) |= 0x10u;
  v9 = *(_QWORD *)(a2 + 32);
  if (!v9)
    operator new();
  *(_QWORD *)&result = ProtobufUtil::toProtobuf((unsigned __int8 *)&a1[7] + 4, v9).u64[0];
  return result;
}

std::string *ProtobufUtil::fromProtobuf(std::string *result, uint64_t a2)
{
  std::string *v3;
  int v4;

  v3 = result;
  v4 = HIDWORD(result[1].__r_.__value_.__r.__words[0]);
  if ((v4 & 1) != 0)
  {
    *(_WORD *)a2 = result->__r_.__value_.__r.__words[2];
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = std::string::operator=((std::string *)(a2 + 8), (const std::string *)result->__r_.__value_.__l.__size_);
  v4 = HIDWORD(v3[1].__r_.__value_.__r.__words[0]);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  *(_BYTE *)(a2 + 32) = v3->__r_.__value_.__s.__data_[20];
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  *(_BYTE *)(a2 + 33) = v3->__r_.__value_.__s.__data_[21];
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      return result;
    goto LABEL_7;
  }
LABEL_13:
  *(_BYTE *)(a2 + 34) = v3->__r_.__value_.__s.__data_[22];
  if ((v4 & 0x20) == 0)
    return result;
LABEL_7:
  *(_BYTE *)(a2 + 35) = *((_BYTE *)&v3->__r_.__value_.__s + 23);
  return result;
}

{
  std::string *v3;
  int v4;
  std::string::pointer data;
  int v6;

  v3 = result;
  v4 = HIDWORD(result[2].__r_.__value_.__r.__words[0]);
  if ((v4 & 1) != 0)
  {
    *(_WORD *)a2 = result[1].__r_.__value_.__r.__words[1];
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = std::string::operator=((std::string *)(a2 + 8), (const std::string *)result->__r_.__value_.__l.__size_);
  v4 = HIDWORD(v3[2].__r_.__value_.__r.__words[0]);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  *(_BYTE *)(a2 + 32) = v3[1].__r_.__value_.__s.__data_[12];
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  result = std::string::operator=((std::string *)(a2 + 40), (const std::string *)v3->__r_.__value_.__r.__words[2]);
  v4 = HIDWORD(v3[2].__r_.__value_.__r.__words[0]);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  *(_BYTE *)(a2 + 64) = v3[1].__r_.__value_.__s.__data_[13];
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  *(_BYTE *)(a2 + 65) = v3[1].__r_.__value_.__s.__data_[14];
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x10) == 0)
      return result;
    goto LABEL_17;
  }
LABEL_16:
  *(_BYTE *)(a2 + 66) = v3[1].__r_.__value_.__s.__data_[15];
  if ((v4 & 0x10) == 0)
    return result;
LABEL_17:
  data = v3[1].__r_.__value_.__l.__data_;
  if (!data)
    data = *(std::string::pointer *)(proto::gnss::Emergency::SuplContext::default_instance_ + 24);
  v6 = *((_DWORD *)data + 6);
  if ((v6 & 1) != 0)
  {
    *(_BYTE *)(a2 + 72) = data[16];
    if ((v6 & 2) == 0)
    {
LABEL_21:
      if ((v6 & 4) == 0)
        return result;
      goto LABEL_22;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_21;
  }
  *(_BYTE *)(a2 + 73) = data[17];
  if ((v6 & 4) == 0)
    return result;
LABEL_22:
  *(_QWORD *)(a2 + 80) = *((_QWORD *)data + 1);
  return result;
}

{
  std::string *v3;
  int v4;
  std::string::size_type v5;
  std::string *data;

  v3 = result;
  v4 = result[1].__r_.__value_.__r.__words[2];
  if ((v4 & 1) != 0)
  {
    *(_BYTE *)a2 = result[1].__r_.__value_.__s.__data_[8];
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_11;
      goto LABEL_7;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = std::string::operator=((std::string *)(a2 + 8), (const std::string *)result->__r_.__value_.__l.__size_);
  v4 = v3[1].__r_.__value_.__r.__words[2];
  if ((v4 & 4) == 0)
    goto LABEL_11;
LABEL_7:
  v5 = v3->__r_.__value_.__r.__words[2];
  if (!v5)
    v5 = *(_QWORD *)(proto::gnss::Emergency::EmergConfig::default_instance_ + 16);
  if ((*(_BYTE *)(v5 + 16) & 1) != 0)
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(v5 + 8);
LABEL_11:
  if ((v4 & 8) != 0)
  {
    data = (std::string *)v3[1].__r_.__value_.__l.__data_;
    if (!data)
      data = *(std::string **)(proto::gnss::Emergency::EmergConfig::default_instance_ + 24);
    return ProtobufUtil::fromProtobuf(data, a2 + 40);
  }
  return result;
}

void ProtobufUtil::fromProtobuf(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  NSObject *v6;
  unint64_t v7;
  _QWORD *v8;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  char *v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  const char *v74;
  NSObject *v75;
  uint64_t v76;
  char v77;
  uint8_t buf[4];
  int v79;

  if ((*(_BYTE *)(a1 + 88) & 1) != 0)
  {
    v4 = *(_DWORD *)(a1 + 80);
    v5 = v4 - 1;
    if ((v4 - 1) >= 6)
    {
      v6 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v79 = v4;
        _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::CellType", buf, 8u);
      }
      v5 = 0;
    }
    *(_DWORD *)a2 = v5;
  }
  v7 = *(int *)(a1 + 16);
  v9 = *(_BYTE **)(a2 + 8);
  v8 = *(_QWORD **)(a2 + 16);
  v10 = 0x6DB6DB6DB6DB6DB7 * (((char *)v8 - v9) >> 2);
  v11 = v7 - v10;
  if (v7 <= v10)
  {
    v18 = *(char **)(a2 + 16);
    if (v7 >= v10)
      goto LABEL_28;
    v18 = &v9[28 * (int)v7];
    goto LABEL_27;
  }
  v12 = *(_QWORD *)(a2 + 24);
  if (0x6DB6DB6DB6DB6DB7 * ((v12 - (uint64_t)v8) >> 2) >= v11)
  {
    v18 = (char *)v8 + 28 * v11;
    do
    {
      *v8 = 0xFFFFFFFF0000;
      v8[1] = -1;
      *((_DWORD *)v8 + 4) = 1667497983;
      *(_QWORD *)((char *)v8 + 20) = 0xFFFFFFFF7FFFFFFFLL;
      v8 = (_QWORD *)((char *)v8 + 28);
    }
    while (v8 != (_QWORD *)v18);
LABEL_27:
    *(_QWORD *)(a2 + 16) = v18;
    goto LABEL_28;
  }
  if ((v7 & 0x80000000) != 0)
    sub_100026868();
  v13 = 0x6DB6DB6DB6DB6DB7 * ((v12 - (uint64_t)v9) >> 2);
  v14 = 0xDB6DB6DB6DB6DB6ELL * ((v12 - (uint64_t)v9) >> 2);
  if (v14 <= v7)
    v14 = *(int *)(a1 + 16);
  if (v13 >= 0x492492492492492)
    v15 = 0x924924924924924;
  else
    v15 = v14;
  if (v15 > 0x924924924924924)
    sub_1000268B0();
  v16 = (char *)operator new(28 * v15);
  v17 = &v16[4 * (((char *)v8 - v9) >> 2)];
  v18 = &v16[28 * (int)v7];
  v19 = v17;
  do
  {
    *(_QWORD *)v19 = 0xFFFFFFFF0000;
    *((_QWORD *)v19 + 1) = -1;
    *((_DWORD *)v19 + 4) = 1667497983;
    *(_QWORD *)(v19 + 20) = 0xFFFFFFFF7FFFFFFFLL;
    v19 += 28;
  }
  while (v19 != v18);
  if (v8 != (_QWORD *)v9)
  {
    do
    {
      v20 = *(_OWORD *)((char *)v8 - 28);
      *((_OWORD *)v17 - 1) = *((_OWORD *)v8 - 1);
      *(_OWORD *)(v17 - 28) = v20;
      v17 -= 28;
      v8 = (_QWORD *)((char *)v8 - 28);
    }
    while (v8 != (_QWORD *)v9);
    v8 = v9;
  }
  *(_QWORD *)(a2 + 8) = v17;
  *(_QWORD *)(a2 + 16) = v18;
  *(_QWORD *)(a2 + 24) = &v16[28 * v15];
  if (v8)
  {
    operator delete(v8);
    v18 = *(char **)(a2 + 16);
  }
LABEL_28:
  v21 = -1227133513 * ((unint64_t)&v18[-*(_QWORD *)(a2 + 8)] >> 2);
  if (*(_DWORD *)(a1 + 16) < v21)
    v21 = *(_DWORD *)(a1 + 16);
  if (v21 >= 1)
  {
    v22 = 0;
    v23 = 0;
    v24 = 28 * v21;
    do
    {
      if (v23 >= *(int *)(a1 + 16))
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(buf, 3, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 825);
        v25 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(buf, "CHECK failed: (index) < (size()): ");
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v77, v25);
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)buf);
      }
      v26 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v23);
      v27 = *(_QWORD *)(a2 + 8);
      v28 = *(_DWORD *)(v26 + 52);
      if ((v28 & 1) != 0)
      {
        *(_BYTE *)(v27 + v22) = *(_BYTE *)(v26 + 8);
        if ((v28 & 2) == 0)
        {
LABEL_36:
          if ((v28 & 4) == 0)
            goto LABEL_37;
          goto LABEL_49;
        }
      }
      else if ((v28 & 2) == 0)
      {
        goto LABEL_36;
      }
      *(_WORD *)(v27 + v22 + 2) = *(_DWORD *)(v26 + 12);
      if ((v28 & 4) == 0)
      {
LABEL_37:
        if ((v28 & 8) == 0)
          goto LABEL_38;
        goto LABEL_50;
      }
LABEL_49:
      *(_WORD *)(v27 + v22 + 4) = *(_DWORD *)(v26 + 16);
      if ((v28 & 8) == 0)
      {
LABEL_38:
        if ((v28 & 0x10) == 0)
          goto LABEL_39;
        goto LABEL_51;
      }
LABEL_50:
      *(_DWORD *)(v27 + v22 + 8) = *(_DWORD *)(v26 + 20);
      v28 = *(_DWORD *)(v26 + 52);
      if ((v28 & 0x10) == 0)
      {
LABEL_39:
        if ((v28 & 0x20) == 0)
          goto LABEL_40;
        goto LABEL_52;
      }
LABEL_51:
      *(_DWORD *)(v27 + v22 + 12) = *(_DWORD *)(v26 + 24);
      v28 = *(_DWORD *)(v26 + 52);
      if ((v28 & 0x20) == 0)
      {
LABEL_40:
        if ((v28 & 0x40) == 0)
          goto LABEL_41;
        goto LABEL_53;
      }
LABEL_52:
      *(_WORD *)(v27 + v22 + 16) = *(_DWORD *)(v26 + 28);
      if ((v28 & 0x40) == 0)
      {
LABEL_41:
        if ((v28 & 0x80) == 0)
          goto LABEL_42;
        goto LABEL_54;
      }
LABEL_53:
      *(_BYTE *)(v27 + v22 + 18) = *(_DWORD *)(v26 + 32);
      if ((v28 & 0x80) == 0)
      {
LABEL_42:
        if ((v28 & 0x100) != 0)
          goto LABEL_55;
        goto LABEL_43;
      }
LABEL_54:
      *(_BYTE *)(v27 + v22 + 19) = *(_DWORD *)(v26 + 36);
      if ((v28 & 0x100) != 0)
      {
LABEL_55:
        *(_DWORD *)(v27 + v22 + 20) = *(_DWORD *)(v26 + 40);
        if ((*(_DWORD *)(v26 + 52) & 0x200) == 0)
          goto LABEL_45;
LABEL_44:
        *(_DWORD *)(v27 + v22 + 24) = *(_DWORD *)(v26 + 44);
        goto LABEL_45;
      }
LABEL_43:
      if ((v28 & 0x200) != 0)
        goto LABEL_44;
LABEL_45:
      ++v23;
      v22 += 28;
    }
    while (v24 != v22);
  }
  v29 = *(int *)(a1 + 40);
  v31 = *(char **)(a2 + 32);
  v30 = *(char **)(a2 + 40);
  v32 = (v30 - v31) >> 4;
  if (v29 <= v32)
  {
    v39 = *(char **)(a2 + 40);
    if (v29 >= v32)
      goto LABEL_78;
    v39 = &v31[16 * v29];
    goto LABEL_77;
  }
  v33 = *(_QWORD *)(a2 + 48);
  if (v29 - v32 <= (v33 - (uint64_t)v30) >> 4)
  {
    v39 = &v30[16 * (v29 - v32)];
    do
    {
      *(_QWORD *)v30 = 0xFFFFFFFF0000;
      *((_QWORD *)v30 + 1) = -1;
      v30 += 16;
    }
    while (v30 != v39);
LABEL_77:
    *(_QWORD *)(a2 + 40) = v39;
    goto LABEL_78;
  }
  if ((v29 & 0x80000000) != 0)
    sub_100026868();
  v34 = v33 - (_QWORD)v31;
  v35 = v34 >> 3;
  if (v34 >> 3 <= v29)
    v35 = *(int *)(a1 + 40);
  if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
    v36 = 0xFFFFFFFFFFFFFFFLL;
  else
    v36 = v35;
  if (v36 >> 60)
    sub_1000268B0();
  v37 = (char *)operator new(16 * v36);
  v38 = &v37[16 * v32];
  v39 = &v37[16 * v29];
  v40 = v38;
  do
  {
    *(_QWORD *)v40 = 0xFFFFFFFF0000;
    *((_QWORD *)v40 + 1) = -1;
    v40 += 16;
  }
  while (v40 != v39);
  if (v30 != v31)
  {
    do
    {
      *((_OWORD *)v38 - 1) = *((_OWORD *)v30 - 1);
      v38 -= 16;
      v30 -= 16;
    }
    while (v30 != v31);
    v30 = v31;
  }
  *(_QWORD *)(a2 + 32) = v38;
  *(_QWORD *)(a2 + 40) = v39;
  *(_QWORD *)(a2 + 48) = &v37[16 * v36];
  if (v30)
  {
    operator delete(v30);
    v39 = *(char **)(a2 + 40);
  }
LABEL_78:
  v41 = (unint64_t)&v39[-*(_QWORD *)(a2 + 32)] >> 4;
  if (*(_DWORD *)(a1 + 40) < (int)v41)
    LODWORD(v41) = *(_DWORD *)(a1 + 40);
  if ((int)v41 >= 1)
  {
    v42 = 0;
    v43 = 0;
    v44 = 16 * v41;
    do
    {
      if (v43 >= *(int *)(a1 + 40))
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(buf, 3, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 825);
        v45 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(buf, "CHECK failed: (index) < (size()): ");
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v77, v45);
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)buf);
      }
      v46 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v43);
      v47 = *(_QWORD *)(a2 + 32);
      v48 = *(_DWORD *)(v46 + 32);
      if ((v48 & 1) != 0)
      {
        *(_BYTE *)(v47 + v42) = *(_BYTE *)(v46 + 8);
        if ((v48 & 2) == 0)
        {
LABEL_86:
          if ((v48 & 4) == 0)
            goto LABEL_87;
          goto LABEL_94;
        }
      }
      else if ((v48 & 2) == 0)
      {
        goto LABEL_86;
      }
      *(_WORD *)(v47 + v42 + 2) = *(_DWORD *)(v46 + 12);
      if ((v48 & 4) == 0)
      {
LABEL_87:
        if ((v48 & 8) != 0)
          goto LABEL_95;
        goto LABEL_88;
      }
LABEL_94:
      *(_WORD *)(v47 + v42 + 4) = *(_DWORD *)(v46 + 16);
      if ((v48 & 8) != 0)
      {
LABEL_95:
        *(_DWORD *)(v47 + v42 + 8) = *(_DWORD *)(v46 + 20);
        if ((*(_DWORD *)(v46 + 32) & 0x10) == 0)
          goto LABEL_90;
LABEL_89:
        *(_DWORD *)(v47 + v42 + 12) = *(_DWORD *)(v46 + 24);
        goto LABEL_90;
      }
LABEL_88:
      if ((v48 & 0x10) != 0)
        goto LABEL_89;
LABEL_90:
      ++v43;
      v42 += 16;
    }
    while (v44 != v42);
  }
  v49 = *(int *)(a1 + 64);
  v51 = *(char **)(a2 + 56);
  v50 = *(char **)(a2 + 64);
  v52 = (v50 - v51) >> 5;
  if (v49 <= v52)
  {
    v59 = *(char **)(a2 + 64);
    if (v49 >= v52)
      goto LABEL_118;
    v59 = &v51[32 * v49];
    goto LABEL_117;
  }
  v53 = *(_QWORD *)(a2 + 72);
  if (v49 - v52 <= (v53 - (uint64_t)v50) >> 5)
  {
    v59 = &v50[32 * (v49 - v52)];
    do
    {
      *(_QWORD *)v50 = 0;
      *((_DWORD *)v50 + 4) = 0;
      *(_DWORD *)(v50 + 2) = -1;
      *((_QWORD *)v50 + 1) = -1;
      *((_WORD *)v50 + 8) = -1;
      *(_QWORD *)(v50 + 20) = 0x7FFFFFFFLL;
      *((_DWORD *)v50 + 7) = -1;
      v50 += 32;
    }
    while (v50 != v59);
LABEL_117:
    *(_QWORD *)(a2 + 64) = v59;
    goto LABEL_118;
  }
  if ((v49 & 0x80000000) != 0)
    sub_100026868();
  v54 = v53 - (_QWORD)v51;
  v55 = v54 >> 4;
  if (v54 >> 4 <= v49)
    v55 = *(int *)(a1 + 64);
  if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFE0)
    v56 = 0x7FFFFFFFFFFFFFFLL;
  else
    v56 = v55;
  if (v56 >> 59)
    sub_1000268B0();
  v57 = (char *)operator new(32 * v56);
  v58 = &v57[32 * v52];
  v59 = &v57[32 * v49];
  v60 = v58;
  do
  {
    *(_QWORD *)v60 = 0;
    *((_DWORD *)v60 + 4) = 0;
    *(_DWORD *)(v60 + 2) = -1;
    *((_QWORD *)v60 + 1) = -1;
    *((_WORD *)v60 + 8) = -1;
    *(_QWORD *)(v60 + 20) = 0x7FFFFFFFLL;
    *((_DWORD *)v60 + 7) = -1;
    v60 += 32;
  }
  while (v60 != v59);
  if (v50 != v51)
  {
    do
    {
      v61 = *((_OWORD *)v50 - 1);
      *((_OWORD *)v58 - 2) = *((_OWORD *)v50 - 2);
      *((_OWORD *)v58 - 1) = v61;
      v58 -= 32;
      v50 -= 32;
    }
    while (v50 != v51);
    v50 = v51;
  }
  *(_QWORD *)(a2 + 56) = v58;
  *(_QWORD *)(a2 + 64) = v59;
  *(_QWORD *)(a2 + 72) = &v57[32 * v56];
  if (v50)
  {
    operator delete(v50);
    v59 = *(char **)(a2 + 64);
  }
LABEL_118:
  v62 = (unint64_t)&v59[-*(_QWORD *)(a2 + 56)] >> 5;
  if (*(_DWORD *)(a1 + 64) < (int)v62)
    LODWORD(v62) = *(_DWORD *)(a1 + 64);
  if ((int)v62 >= 1)
  {
    v63 = 0;
    v64 = 0;
    v65 = 32 * v62;
    v66 = "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Develop"
          "er/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h";
    v76 = v65;
    do
    {
      if (v64 >= *(int *)(a1 + 64))
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(buf, 3, v66, 825);
        v67 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(buf, "CHECK failed: (index) < (size()): ");
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v77, v67);
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)buf);
      }
      v68 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v64);
      v69 = *(_QWORD *)(a2 + 56);
      v70 = *(_DWORD *)(v68 + 44);
      if ((v70 & 1) != 0)
      {
        *(_BYTE *)(v69 + v63) = *(_BYTE *)(v68 + 8);
        if ((v70 & 2) == 0)
        {
LABEL_126:
          if ((v70 & 4) == 0)
            goto LABEL_127;
          goto LABEL_137;
        }
      }
      else if ((v70 & 2) == 0)
      {
        goto LABEL_126;
      }
      *(_WORD *)(v69 + v63 + 2) = *(_DWORD *)(v68 + 12);
      if ((v70 & 4) == 0)
      {
LABEL_127:
        if ((v70 & 8) == 0)
          goto LABEL_128;
        goto LABEL_138;
      }
LABEL_137:
      *(_WORD *)(v69 + v63 + 4) = *(_DWORD *)(v68 + 16);
      if ((v70 & 8) == 0)
      {
LABEL_128:
        if ((v70 & 0x10) == 0)
          goto LABEL_129;
        goto LABEL_139;
      }
LABEL_138:
      *(_DWORD *)(v69 + v63 + 8) = *(_DWORD *)(v68 + 20);
      v70 = *(_DWORD *)(v68 + 44);
      if ((v70 & 0x10) == 0)
      {
LABEL_129:
        if ((v70 & 0x20) == 0)
          goto LABEL_130;
        goto LABEL_140;
      }
LABEL_139:
      *(_DWORD *)(v69 + v63 + 12) = *(_DWORD *)(v68 + 24);
      v70 = *(_DWORD *)(v68 + 44);
      if ((v70 & 0x20) == 0)
      {
LABEL_130:
        if ((v70 & 0x40) != 0)
          goto LABEL_141;
        goto LABEL_131;
      }
LABEL_140:
      *(_WORD *)(v69 + v63 + 16) = *(_DWORD *)(v68 + 28);
      if ((v70 & 0x40) != 0)
      {
LABEL_141:
        v71 = *(_DWORD *)(v68 + 32);
        switch(v71)
        {
          case 1:
            v72 = 0;
            break;
          case 3:
            v72 = 2;
            break;
          case 2:
            v72 = 1;
            break;
          default:
            v73 = a2;
            v74 = v66;
            v75 = qword_100100838;
            if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 67109120;
              v79 = v71;
              _os_log_error_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::FreqMode", buf, 8u);
              v72 = 0;
              v70 = *(_DWORD *)(v68 + 44);
            }
            else
            {
              v72 = 0;
            }
            v66 = v74;
            a2 = v73;
            v65 = v76;
            break;
        }
        *(_DWORD *)(v69 + v63 + 24) = v72;
        if ((v70 & 0x80) == 0)
          goto LABEL_133;
LABEL_132:
        *(_DWORD *)(v69 + v63 + 28) = *(_DWORD *)(v68 + 36);
        goto LABEL_133;
      }
LABEL_131:
      if ((v70 & 0x80) != 0)
        goto LABEL_132;
LABEL_133:
      ++v64;
      v63 += 32;
    }
    while (v65 != v63);
  }
}

{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  char v12;
  _BYTE v13[48];

  v4 = *(_DWORD *)(a1 + 68);
  if ((v4 & 1) != 0)
  {
    *(_DWORD *)a2 = *(_DWORD *)(a1 + 8);
    v4 = *(_DWORD *)(a1 + 68);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
LABEL_34:
      *(_BYTE *)(a2 + 6) = *(_DWORD *)(a1 + 16);
      if ((v4 & 8) == 0)
        goto LABEL_6;
      goto LABEL_5;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)(a2 + 4) = *(_DWORD *)(a1 + 12);
  if ((v4 & 4) != 0)
    goto LABEL_34;
LABEL_4:
  if ((v4 & 8) != 0)
LABEL_5:
    *(_BYTE *)(a2 + 7) = *(_DWORD *)(a1 + 20);
LABEL_6:
  v5 = *(_DWORD *)(a1 + 32);
  if (v5 < 1)
    goto LABEL_26;
  v6 = 0;
  if (v5 >= 16)
    v7 = 16;
  else
    v7 = v5;
  v8 = a2 + 10;
  do
  {
    if (v6 >= *(int *)(a1 + 32))
    {
      wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v13, 3, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 825);
      v9 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (index) < (size()): ");
      wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v12, v9);
      wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
    }
    v10 = *(_DWORD **)(*(_QWORD *)(a1 + 24) + 8 * v6);
    v11 = v10[8];
    if ((v11 & 1) != 0)
    {
      *(_WORD *)(v8 - 2) = v10[2];
      if ((v11 & 2) == 0)
      {
LABEL_15:
        if ((v11 & 4) == 0)
          goto LABEL_16;
        goto LABEL_23;
      }
    }
    else if ((v11 & 2) == 0)
    {
      goto LABEL_15;
    }
    *(_BYTE *)v8 = v10[3];
    if ((v11 & 4) == 0)
    {
LABEL_16:
      if ((v11 & 8) == 0)
        goto LABEL_17;
      goto LABEL_24;
    }
LABEL_23:
    *(_DWORD *)(v8 + 2) = v10[4];
    v11 = v10[8];
    if ((v11 & 8) == 0)
    {
LABEL_17:
      if ((v11 & 0x10) == 0)
        goto LABEL_19;
LABEL_18:
      *(_BYTE *)(v8 + 10) = v10[6];
      goto LABEL_19;
    }
LABEL_24:
    *(_DWORD *)(v8 + 6) = v10[5];
    if ((v10[8] & 0x10) != 0)
      goto LABEL_18;
LABEL_19:
    ++v6;
    v8 += 16;
  }
  while (v7 != v6);
  v4 = *(_DWORD *)(a1 + 68);
LABEL_26:
  if ((v4 & 0x20) != 0)
  {
    *(_BYTE *)(a2 + 264) = *(_DWORD *)(a1 + 48);
    if ((v4 & 0x40) != 0)
      goto LABEL_37;
LABEL_28:
    if ((v4 & 0x80) == 0)
      goto LABEL_29;
LABEL_38:
    *(_DWORD *)(a2 + 272) = ProtobufUtil::fromProtobuf(*(_DWORD *)(a1 + 56));
    if ((*(_DWORD *)(a1 + 68) & 0x100) != 0)
LABEL_30:
      *(_DWORD *)(a2 + 276) = *(_DWORD *)(a1 + 60);
  }
  else
  {
    if ((v4 & 0x40) == 0)
      goto LABEL_28;
LABEL_37:
    *(_DWORD *)(a2 + 268) = ProtobufUtil::fromProtobuf(*(_DWORD *)(a1 + 52));
    v4 = *(_DWORD *)(a1 + 68);
    if ((v4 & 0x80) != 0)
      goto LABEL_38;
LABEL_29:
    if ((v4 & 0x100) != 0)
      goto LABEL_30;
  }
}

{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  int v15;
  int v16;
  NSObject *v17;
  int v18;
  char v19;
  uint8_t buf[4];
  int v21;

  v4 = *(_DWORD *)(a1 + 68);
  if ((v4 & 1) != 0)
  {
    *(_DWORD *)a2 = *(_DWORD *)(a1 + 8);
    v4 = *(_DWORD *)(a1 + 68);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_15;
      goto LABEL_7;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_BYTE *)(a2 + 4) = *(_DWORD *)(a1 + 12);
  if ((v4 & 4) == 0)
    goto LABEL_15;
LABEL_7:
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    v5 = *(_QWORD *)(proto::gnss::Emergency::GpsAcqAssistance::default_instance_ + 16);
  v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 1) != 0)
  {
    *(_DWORD *)(a2 + 8) = ProtobufUtil::fromProtobuf(*(_DWORD *)(v5 + 16));
    v6 = *(_DWORD *)(v5 + 24);
  }
  if ((v6 & 2) != 0)
  {
    v7 = *(_QWORD *)(v5 + 8);
    if (!v7)
      v7 = *(_QWORD *)(proto::gnss::Emergency::CellTimeAssistance::default_instance_ + 8);
    ProtobufUtil::fromProtobuf(v7, a2 + 12);
  }
LABEL_15:
  v8 = *(_DWORD *)(a1 + 32);
  if (v8 >= 1)
  {
    v9 = 0;
    v10 = 0;
    if (v8 >= 16)
      v8 = 16;
    v11 = 20 * v8;
    do
    {
      if (v10 >= *(int *)(a1 + 32))
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(buf, 3, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 825);
        v12 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(buf, "CHECK failed: (index) < (size()): ");
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v19, v12);
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)buf);
      }
      v13 = *(_DWORD **)(*(_QWORD *)(a1 + 24) + 8 * v10);
      v14 = v13[16];
      if ((v14 & 1) != 0)
      {
        *(_WORD *)(a2 + v9 + 40) = v13[2];
        if ((v14 & 2) == 0)
        {
LABEL_23:
          if ((v14 & 4) == 0)
            goto LABEL_24;
          goto LABEL_37;
        }
      }
      else if ((v14 & 2) == 0)
      {
        goto LABEL_23;
      }
      *(_WORD *)(a2 + v9 + 42) = v13[3];
      if ((v14 & 4) == 0)
      {
LABEL_24:
        if ((v14 & 8) == 0)
          goto LABEL_25;
        goto LABEL_38;
      }
LABEL_37:
      *(_BYTE *)(a2 + v9 + 44) = v13[4];
      if ((v14 & 8) == 0)
      {
LABEL_25:
        if ((v14 & 0x10) == 0)
          goto LABEL_26;
        goto LABEL_39;
      }
LABEL_38:
      *(_BYTE *)(a2 + v9 + 45) = v13[5];
      if ((v14 & 0x10) == 0)
      {
LABEL_26:
        if ((v14 & 0x20) == 0)
          goto LABEL_27;
        goto LABEL_40;
      }
LABEL_39:
      *(_BYTE *)(a2 + v9 + 46) = v13[6];
      if ((v14 & 0x20) == 0)
      {
LABEL_27:
        if ((v14 & 0x40) == 0)
          goto LABEL_28;
        goto LABEL_41;
      }
LABEL_40:
      *(_BYTE *)(a2 + v9 + 47) = v13[7];
      if ((v14 & 0x40) == 0)
      {
LABEL_28:
        if ((v14 & 0x80) == 0)
          goto LABEL_29;
        goto LABEL_42;
      }
LABEL_41:
      *(_BYTE *)(a2 + v9 + 48) = v13[8];
      if ((v14 & 0x80) == 0)
      {
LABEL_29:
        if ((v14 & 0x100) == 0)
          goto LABEL_30;
        goto LABEL_43;
      }
LABEL_42:
      *(_WORD *)(a2 + v9 + 50) = v13[9];
      if ((v14 & 0x100) == 0)
      {
LABEL_30:
        if ((v14 & 0x200) == 0)
          goto LABEL_31;
        goto LABEL_44;
      }
LABEL_43:
      *(_BYTE *)(a2 + v9 + 52) = v13[10];
      if ((v14 & 0x200) == 0)
      {
LABEL_31:
        if ((v14 & 0x400) == 0)
          goto LABEL_32;
        goto LABEL_45;
      }
LABEL_44:
      *(_BYTE *)(a2 + v9 + 53) = v13[11];
      if ((v14 & 0x400) == 0)
      {
LABEL_32:
        if ((v14 & 0x800) == 0)
          goto LABEL_33;
        goto LABEL_46;
      }
LABEL_45:
      *(_BYTE *)(a2 + v9 + 54) = v13[12];
      if ((v14 & 0x800) == 0)
      {
LABEL_33:
        if ((v14 & 0x1000) != 0)
          goto LABEL_47;
        goto LABEL_53;
      }
LABEL_46:
      *(_BYTE *)(a2 + v9 + 55) = v13[13];
      if ((v14 & 0x1000) != 0)
      {
LABEL_47:
        v15 = v13[14];
        if ((v15 - 1) >= 6)
        {
          v17 = qword_100100838;
          if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109120;
            v21 = v15;
            _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::GpsDopplerUncMpsExt", buf, 8u);
          }
          v16 = 255;
        }
        else
        {
          v16 = dword_1000D3504[v15 - 1];
        }
        *(_DWORD *)(a2 + v9 + 56) = v16;
      }
LABEL_53:
      ++v10;
      v9 += 20;
    }
    while (v11 != v9);
  }
  v18 = *(_DWORD *)(a1 + 68);
  if ((v18 & 0x10) != 0)
  {
    *(_BYTE *)(a2 + 360) = *(_DWORD *)(a1 + 48);
    if ((v18 & 0x20) == 0)
    {
LABEL_56:
      if ((v18 & 0x40) == 0)
        goto LABEL_57;
      goto LABEL_62;
    }
  }
  else if ((v18 & 0x20) == 0)
  {
    goto LABEL_56;
  }
  *(_DWORD *)(a2 + 364) = ProtobufUtil::fromProtobuf(*(_DWORD *)(a1 + 52));
  v18 = *(_DWORD *)(a1 + 68);
  if ((v18 & 0x40) == 0)
  {
LABEL_57:
    if ((v18 & 0x80) == 0)
      return;
    goto LABEL_58;
  }
LABEL_62:
  *(_DWORD *)(a2 + 368) = ProtobufUtil::fromProtobuf(*(_DWORD *)(a1 + 56));
  if ((*(_DWORD *)(a1 + 68) & 0x80) == 0)
    return;
LABEL_58:
  *(_DWORD *)(a2 + 372) = *(_DWORD *)(a1 + 60);
}

{
  int v4;
  int v5;
  int v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _DWORD *v26;
  int v27;
  char v28;
  uint8_t buf[4];
  int v30;

  v4 = *(_DWORD *)(a1 + 56);
  if ((v4 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 8);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a1 + 12);
  v4 = *(_DWORD *)(a1 + 56);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_11:
  v5 = *(_DWORD *)(a1 + 48);
  v6 = -1;
  switch(v5)
  {
    case 0:
      v7 = qword_100100838;
      if (!os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
        goto LABEL_15;
      *(_DWORD *)buf = 67109120;
      v30 = 0;
      goto LABEL_89;
    case 1:
      break;
    case 2:
      v6 = 0;
      break;
    case 3:
      v6 = 1;
      break;
    case 4:
      v6 = 2;
      break;
    default:
      v7 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v30 = v5;
LABEL_89:
        _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gpsd::LtlInfoType", buf, 8u);
      }
LABEL_15:
      v6 = -1;
      break;
  }
  *(_DWORD *)(a2 + 8) = v6;
  v4 = *(_DWORD *)(a1 + 56);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_35;
  }
LABEL_20:
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    v8 = *(_QWORD *)(proto::gpsd::LtlInfo::default_instance_ + 16);
  v9 = *(_DWORD *)(v8 + 56);
  if ((v9 & 1) != 0)
  {
    *(_DWORD *)(a2 + 12) = *(_DWORD *)(v8 + 8);
    v9 = *(_DWORD *)(v8 + 56);
    if ((v9 & 2) == 0)
    {
LABEL_24:
      if ((v9 & 4) == 0)
        goto LABEL_25;
      goto LABEL_79;
    }
  }
  else if ((v9 & 2) == 0)
  {
    goto LABEL_24;
  }
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(v8 + 12);
  v9 = *(_DWORD *)(v8 + 56);
  if ((v9 & 4) == 0)
  {
LABEL_25:
    if ((v9 & 8) == 0)
      goto LABEL_26;
    goto LABEL_80;
  }
LABEL_79:
  *(_DWORD *)(a2 + 20) = *(_DWORD *)(v8 + 16);
  v9 = *(_DWORD *)(v8 + 56);
  if ((v9 & 8) == 0)
  {
LABEL_26:
    if ((v9 & 0x10) == 0)
      goto LABEL_27;
    goto LABEL_81;
  }
LABEL_80:
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(v8 + 20);
  v9 = *(_DWORD *)(v8 + 56);
  if ((v9 & 0x10) == 0)
  {
LABEL_27:
    if ((v9 & 0x20) == 0)
      goto LABEL_28;
    goto LABEL_82;
  }
LABEL_81:
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(v8 + 24);
  v9 = *(_DWORD *)(v8 + 56);
  if ((v9 & 0x20) == 0)
  {
LABEL_28:
    if ((v9 & 0x40) == 0)
      goto LABEL_29;
    goto LABEL_83;
  }
LABEL_82:
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(v8 + 28);
  v9 = *(_DWORD *)(v8 + 56);
  if ((v9 & 0x40) == 0)
  {
LABEL_29:
    if ((v9 & 0x80) == 0)
      goto LABEL_30;
    goto LABEL_84;
  }
LABEL_83:
  *(_BYTE *)(a2 + 36) = *(_BYTE *)(v8 + 32);
  if ((v9 & 0x80) == 0)
  {
LABEL_30:
    if ((v9 & 0x100) == 0)
      goto LABEL_31;
    goto LABEL_85;
  }
LABEL_84:
  *(_WORD *)(a2 + 38) = *(_DWORD *)(v8 + 36);
  if ((v9 & 0x100) == 0)
  {
LABEL_31:
    if ((v9 & 0x200) == 0)
      goto LABEL_32;
    goto LABEL_86;
  }
LABEL_85:
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(v8 + 40);
  v9 = *(_DWORD *)(v8 + 56);
  if ((v9 & 0x200) == 0)
  {
LABEL_32:
    if ((v9 & 0x400) == 0)
      goto LABEL_34;
    goto LABEL_33;
  }
LABEL_86:
  *(_DWORD *)(a2 + 44) = *(_DWORD *)(v8 + 44);
  if ((*(_DWORD *)(v8 + 56) & 0x400) != 0)
LABEL_33:
    *(_DWORD *)(a2 + 48) = *(_DWORD *)(v8 + 48);
LABEL_34:
  v4 = *(_DWORD *)(a1 + 56);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_56;
  }
LABEL_35:
  v10 = *(_QWORD *)(a1 + 24);
  if (!v10)
    v10 = *(_QWORD *)(proto::gpsd::LtlInfo::default_instance_ + 24);
  v11 = *(_DWORD *)(v10 + 52);
  if ((v11 & 1) != 0)
  {
    *(_DWORD *)(a2 + 52) = *(_DWORD *)(v10 + 8);
    v11 = *(_DWORD *)(v10 + 52);
  }
  if ((v11 & 2) != 0)
    *(_DWORD *)(a2 + 56) = *(_DWORD *)(v10 + 12);
  v12 = *(_DWORD *)(v10 + 24);
  if (v12 >= 1)
  {
    v13 = 0;
    if (v12 >= 135)
      v14 = 135;
    else
      v14 = v12;
    do
    {
      if (v13 >= *(int *)(v10 + 24))
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(buf, 3, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 614);
        v15 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(buf, "CHECK failed: (index) < (size()): ");
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v28, v15);
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)buf);
      }
      *(_DWORD *)(a2 + 60 + 4 * v13) = *(_DWORD *)(*(_QWORD *)(v10 + 16) + 4 * v13);
      ++v13;
    }
    while (v14 != v13);
  }
  v16 = *(_DWORD *)(v10 + 40);
  if (v16 >= 1)
  {
    v17 = 0;
    if (v16 >= 135)
      v18 = 135;
    else
      v18 = v16;
    do
    {
      if (v17 >= *(int *)(v10 + 40))
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(buf, 3, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 614);
        v19 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(buf, "CHECK failed: (index) < (size()): ");
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v28, v19);
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)buf);
      }
      *(_WORD *)(a2 + 600 + 2 * v17) = *(_DWORD *)(*(_QWORD *)(v10 + 32) + 4 * v17);
      ++v17;
    }
    while (v18 != v17);
  }
  v4 = *(_DWORD *)(a1 + 56);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      return;
    goto LABEL_70;
  }
LABEL_56:
  v20 = *(_QWORD *)(a1 + 32);
  if (!v20)
    v20 = *(_QWORD *)(proto::gpsd::LtlInfo::default_instance_ + 32);
  v21 = *(_DWORD *)(v20 + 16);
  if (v21 >= 1)
  {
    v22 = 0;
    if (v21 >= 8)
      v23 = 8;
    else
      v23 = v21;
    do
    {
      if (v22 >= *(int *)(v20 + 16))
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(buf, 3, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 614);
        v24 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(buf, "CHECK failed: (index) < (size()): ");
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v28, v24);
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)buf);
      }
      *(_WORD *)(a2 + 872 + 2 * v22) = *(_DWORD *)(*(_QWORD *)(v20 + 8) + 4 * v22);
      ++v22;
    }
    while (v23 != v22);
  }
  v25 = *(_DWORD *)(v20 + 36);
  if ((v25 & 2) != 0)
    *(_BYTE *)(a2 + 888) = *(_DWORD *)(v20 + 24);
  if ((v25 & 4) != 0)
    *(_BYTE *)(a2 + 889) = *(_DWORD *)(v20 + 28);
  if ((*(_DWORD *)(a1 + 56) & 0x40) != 0)
  {
LABEL_70:
    v26 = *(_DWORD **)(a1 + 40);
    if (!v26)
      v26 = *(_DWORD **)(proto::gpsd::LtlInfo::default_instance_ + 40);
    v27 = v26[5];
    if ((v27 & 1) != 0)
      *(_WORD *)(a2 + 890) = v26[2];
    if ((v27 & 2) != 0)
      *(_WORD *)(a2 + 892) = v26[3];
  }
}

{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  char v10;
  _BYTE v11[48];

  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    *(_DWORD *)a2 = ProtobufUtil::fromProtobuf(*(_DWORD *)(a1 + 32));
  sub_100041504(a2 + 8, *(int *)(a1 + 16));
  v4 = *(_DWORD *)(a1 + 16);
  v5 = -1431655765 * ((*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  if ((int)v4 >= (int)v5)
    v6 = v5;
  else
    v6 = v4;
  if ((int)v6 >= 1)
  {
    v7 = 0;
    for (i = 0; i != v6; ++i)
    {
      if (i >= *(int *)(a1 + 16))
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 825);
        v9 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (index) < (size()): ");
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v9);
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
      }
      ProtobufUtil::fromProtobuf(*(_DWORD **)(*(_QWORD *)(a1 + 8) + 8 * i), (_BYTE *)(*(_QWORD *)(a2 + 8) + v7));
      v7 += 12;
    }
  }
}

void sub_10003FB18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void ProtobufUtil::fromProtobuf(_DWORD *a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  NSObject *v7;
  _DWORD v8[2];

  v4 = a1[20];
  if ((v4 & 1) != 0)
  {
    *(_WORD *)a2 = a1[2];
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_28;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  v5 = a1[3];
  v6 = -1;
  switch(v5)
  {
    case 1:
      break;
    case 2:
      v6 = 0;
      break;
    case 3:
      v6 = 1;
      break;
    case 4:
      v6 = 2;
      break;
    default:
      v7 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
      {
        v8[0] = 67109120;
        v8[1] = v5;
        _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::MethodType", (uint8_t *)v8, 8u);
        v4 = a1[20];
      }
      v6 = -1;
      break;
  }
  *(_DWORD *)(a2 + 4) = v6;
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_29;
  }
LABEL_28:
  *(_WORD *)(a2 + 8) = a1[4];
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_30;
  }
LABEL_29:
  *(_BYTE *)(a2 + 10) = a1[5];
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_31;
  }
LABEL_30:
  *(_DWORD *)(a2 + 12) = a1[6];
  v4 = a1[20];
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_32;
  }
LABEL_31:
  *(_BYTE *)(a2 + 16) = a1[7];
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_33;
  }
LABEL_32:
  *(_BYTE *)(a2 + 17) = a1[8];
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_34;
  }
LABEL_33:
  *(_BYTE *)(a2 + 18) = a1[9];
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_35;
  }
LABEL_34:
  *(_DWORD *)(a2 + 20) = a1[10];
  v4 = a1[20];
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_36;
  }
LABEL_35:
  *(_DWORD *)(a2 + 24) = a1[11];
  v4 = a1[20];
  if ((v4 & 0x400) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_37;
  }
LABEL_36:
  *(_WORD *)(a2 + 28) = a1[12];
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_38;
  }
LABEL_37:
  *(_BYTE *)(a2 + 30) = a1[13];
  if ((v4 & 0x1000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_39;
  }
LABEL_38:
  *(_BYTE *)(a2 + 31) = a1[14];
  if ((v4 & 0x2000) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_40;
  }
LABEL_39:
  *(_BYTE *)(a2 + 32) = a1[15];
  if ((v4 & 0x4000) == 0)
  {
LABEL_16:
    if ((v4 & 0x8000) == 0)
      return;
    goto LABEL_17;
  }
LABEL_40:
  *(_DWORD *)(a2 + 36) = ProtobufUtil::fromProtobuf(a1[16]);
  if ((a1[20] & 0x8000) == 0)
    return;
LABEL_17:
  *(_DWORD *)(a2 + 40) = a1[17];
}

uint64_t ProtobufUtil::fromProtobuf(uint64_t result, uint64_t a2)
{
  _DWORD *v2;
  int v3;
  int v4;

  if ((*(_BYTE *)(result + 28) & 1) != 0)
  {
    v2 = *(_DWORD **)(result + 8);
    if (!v2)
      v2 = *(_DWORD **)(proto::gnss::Emergency::CtsCdmaCellTime::default_instance_ + 8);
    v3 = v2[5];
    if ((v3 & 1) != 0)
    {
      *(_DWORD *)a2 = v2[2];
      v3 = v2[5];
    }
    if ((v3 & 2) != 0)
      *(_DWORD *)(a2 + 4) = v2[3];
  }
  v4 = *(_DWORD *)(result + 28);
  if ((v4 & 2) == 0)
  {
    if ((v4 & 4) == 0)
      return result;
LABEL_12:
    *(_DWORD *)(a2 + 12) = *(_DWORD *)(result + 20);
    return result;
  }
  *(_WORD *)(a2 + 8) = *(_DWORD *)(result + 16);
  if ((v4 & 4) != 0)
    goto LABEL_12;
  return result;
}

{
  _DWORD *v2;
  int v3;
  uint64_t v4;

  if ((*(_BYTE *)(result + 28) & 1) != 0)
  {
    v2 = *(_DWORD **)(result + 8);
    if (!v2)
      v2 = *(_DWORD **)(proto::gnss::Emergency::CellTimeData::default_instance_ + 8);
    v3 = v2[6];
    if ((v3 & 1) != 0)
    {
      *(_WORD *)a2 = v2[2];
      if ((v3 & 2) == 0)
      {
LABEL_6:
        if ((v3 & 4) == 0)
          goto LABEL_8;
        goto LABEL_7;
      }
    }
    else if ((v3 & 2) == 0)
    {
      goto LABEL_6;
    }
    *(_DWORD *)(a2 + 4) = v2[3];
    if ((v2[6] & 4) != 0)
LABEL_7:
      *(_WORD *)(a2 + 8) = v2[4];
  }
LABEL_8:
  if ((*(_BYTE *)(result + 28) & 2) != 0)
  {
    v4 = *(_QWORD *)(result + 16);
    if (!v4)
      v4 = *(_QWORD *)(proto::gnss::Emergency::CellTimeData::default_instance_ + 16);
    return ProtobufUtil::fromProtobuf(v4, a2 + 12);
  }
  return result;
}

{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v2 = *(_DWORD *)(result + 28);
  if ((v2 & 1) != 0)
  {
    v3 = *(_QWORD *)(result + 8);
    if (!v3)
      v3 = *(_QWORD *)(proto::gnss::Emergency::CplaneContext::default_instance_ + 8);
    v4 = *(_DWORD *)(v3 + 24);
    if ((v4 & 1) != 0)
    {
      *(_BYTE *)a2 = *(_BYTE *)(v3 + 16);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0)
          goto LABEL_8;
        goto LABEL_7;
      }
    }
    else if ((v4 & 2) == 0)
    {
      goto LABEL_6;
    }
    *(_BYTE *)(a2 + 1) = *(_BYTE *)(v3 + 17);
    if ((v4 & 4) != 0)
LABEL_7:
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(v3 + 8);
  }
LABEL_8:
  if ((v2 & 2) != 0)
  {
    v5 = *(_QWORD *)(result + 16);
    if (!v5)
      v5 = *(_QWORD *)(proto::gnss::Emergency::CplaneContext::default_instance_ + 16);
    return ProtobufUtil::fromProtobuf(v5, (_BYTE *)(a2 + 16));
  }
  return result;
}

void sub_100040104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

int *ProtobufUtil::fromProtobuf(int *result, uint64_t a2)
{
  int *v3;
  int v4;

  v3 = result;
  v4 = result[17];
  if ((v4 & 1) != 0)
  {
    *(_BYTE *)a2 = result[2];
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_BYTE *)(a2 + 1) = result[3];
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  *(_WORD *)(a2 + 2) = result[4];
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  *(_DWORD *)(a2 + 4) = result[5];
  v4 = result[17];
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  *(_DWORD *)(a2 + 8) = result[6];
  v4 = result[17];
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  *(_BYTE *)(a2 + 12) = result[7];
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  *(_BYTE *)(a2 + 13) = result[8];
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  *(_BYTE *)(a2 + 14) = result[9];
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  *(_BYTE *)(a2 + 15) = result[10];
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  *(_BYTE *)(a2 + 16) = result[11];
  if ((v4 & 0x400) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  *(_BYTE *)(a2 + 17) = result[12];
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_29;
  }
LABEL_28:
  result = (int *)ProtobufUtil::fromProtobuf(result[13]);
  *(_DWORD *)(a2 + 20) = (_DWORD)result;
  v4 = v3[17];
  if ((v4 & 0x1000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000) == 0)
      return result;
    goto LABEL_15;
  }
LABEL_29:
  result = (int *)ProtobufUtil::fromProtobuf(v3[14]);
  *(_DWORD *)(a2 + 24) = (_DWORD)result;
  if ((v3[17] & 0x2000) == 0)
    return result;
LABEL_15:
  *(_DWORD *)(a2 + 28) = v3[15];
  return result;
}

_DWORD *ProtobufUtil::fromProtobuf(_DWORD *result, uint64_t a2)
{
  int v2;
  int v3;

  v2 = result[37];
  if ((v2 & 1) != 0)
  {
    *(_DWORD *)a2 = result[2];
    v2 = result[37];
    if ((v2 & 2) == 0)
    {
LABEL_3:
      if ((v2 & 4) == 0)
        goto LABEL_4;
      goto LABEL_38;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_DWORD *)(a2 + 4) = result[3];
  v2 = result[37];
  if ((v2 & 4) == 0)
  {
LABEL_4:
    if ((v2 & 8) == 0)
      goto LABEL_5;
    goto LABEL_39;
  }
LABEL_38:
  *(_DWORD *)(a2 + 8) = result[4];
  v2 = result[37];
  if ((v2 & 8) == 0)
  {
LABEL_5:
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_40;
  }
LABEL_39:
  *(_DWORD *)(a2 + 12) = result[5];
  v2 = result[37];
  if ((v2 & 0x10) == 0)
  {
LABEL_6:
    if ((v2 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_41;
  }
LABEL_40:
  *(_DWORD *)(a2 + 16) = result[6];
  v2 = result[37];
  if ((v2 & 0x20) == 0)
  {
LABEL_7:
    if ((v2 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_42;
  }
LABEL_41:
  *(_DWORD *)(a2 + 20) = result[7];
  v2 = result[37];
  if ((v2 & 0x40) == 0)
  {
LABEL_8:
    if ((v2 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_43;
  }
LABEL_42:
  *(_DWORD *)(a2 + 24) = result[8];
  v2 = result[37];
  if ((v2 & 0x80) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_44;
  }
LABEL_43:
  *(_DWORD *)(a2 + 28) = result[9];
  v2 = result[37];
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_45;
  }
LABEL_44:
  *(_WORD *)(a2 + 32) = result[10];
  if ((v2 & 0x200) == 0)
  {
LABEL_11:
    if ((v2 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_46;
  }
LABEL_45:
  *(_WORD *)(a2 + 34) = result[11];
  if ((v2 & 0x400) == 0)
  {
LABEL_12:
    if ((v2 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_47;
  }
LABEL_46:
  *(_WORD *)(a2 + 36) = result[12];
  if ((v2 & 0x800) == 0)
  {
LABEL_13:
    if ((v2 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_48;
  }
LABEL_47:
  *(_WORD *)(a2 + 38) = result[13];
  if ((v2 & 0x1000) == 0)
  {
LABEL_14:
    if ((v2 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_49;
  }
LABEL_48:
  *(_WORD *)(a2 + 40) = result[14];
  if ((v2 & 0x2000) == 0)
  {
LABEL_15:
    if ((v2 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_50;
  }
LABEL_49:
  *(_WORD *)(a2 + 42) = result[15];
  if ((v2 & 0x4000) == 0)
  {
LABEL_16:
    if ((v2 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_51;
  }
LABEL_50:
  *(_WORD *)(a2 + 44) = result[16];
  if ((v2 & 0x8000) == 0)
  {
LABEL_17:
    if ((v2 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_52;
  }
LABEL_51:
  *(_WORD *)(a2 + 46) = result[17];
  if ((v2 & 0x10000) == 0)
  {
LABEL_18:
    if ((v2 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_53;
  }
LABEL_52:
  *(_WORD *)(a2 + 48) = result[18];
  if ((v2 & 0x20000) == 0)
  {
LABEL_19:
    if ((v2 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_54;
  }
LABEL_53:
  *(_WORD *)(a2 + 50) = result[19];
  if ((v2 & 0x40000) == 0)
  {
LABEL_20:
    if ((v2 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_55;
  }
LABEL_54:
  *(_WORD *)(a2 + 52) = result[20];
  if ((v2 & 0x80000) == 0)
  {
LABEL_21:
    if ((v2 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_56;
  }
LABEL_55:
  *(_WORD *)(a2 + 54) = result[21];
  if ((v2 & 0x100000) == 0)
  {
LABEL_22:
    if ((v2 & 0x200000) == 0)
      goto LABEL_23;
    goto LABEL_57;
  }
LABEL_56:
  *(_BYTE *)(a2 + 56) = result[22];
  if ((v2 & 0x200000) == 0)
  {
LABEL_23:
    if ((v2 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_58;
  }
LABEL_57:
  *(_BYTE *)(a2 + 57) = result[23];
  if ((v2 & 0x400000) == 0)
  {
LABEL_24:
    if ((v2 & 0x800000) == 0)
      goto LABEL_25;
    goto LABEL_59;
  }
LABEL_58:
  *(_BYTE *)(a2 + 58) = result[24];
  if ((v2 & 0x800000) == 0)
  {
LABEL_25:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_26;
    goto LABEL_60;
  }
LABEL_59:
  *(_BYTE *)(a2 + 59) = result[25];
  if ((v2 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_27;
    goto LABEL_61;
  }
LABEL_60:
  *(_BYTE *)(a2 + 60) = result[26];
  if ((v2 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_28;
    goto LABEL_62;
  }
LABEL_61:
  *(_BYTE *)(a2 + 61) = result[27];
  if ((v2 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_29;
    goto LABEL_63;
  }
LABEL_62:
  *(_DWORD *)(a2 + 64) = result[28];
  v2 = result[37];
  if ((v2 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_30;
    goto LABEL_64;
  }
LABEL_63:
  *(_BYTE *)(a2 + 68) = result[29];
  if ((v2 & 0x10000000) == 0)
  {
LABEL_30:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_31;
    goto LABEL_65;
  }
LABEL_64:
  *(_DWORD *)(a2 + 72) = result[30];
  v2 = result[37];
  if ((v2 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_32;
LABEL_66:
    *(_DWORD *)(a2 + 80) = result[32];
    if ((result[37] & 0x80000000) == 0)
      goto LABEL_33;
    goto LABEL_67;
  }
LABEL_65:
  *(_BYTE *)(a2 + 76) = result[31];
  if ((v2 & 0x40000000) != 0)
    goto LABEL_66;
LABEL_32:
  if ((v2 & 0x80000000) == 0)
    goto LABEL_33;
LABEL_67:
  *(_DWORD *)(a2 + 84) = result[33];
LABEL_33:
  v3 = result[38];
  if ((v3 & 1) == 0)
  {
    if ((v3 & 2) == 0)
      return result;
LABEL_69:
    *(_DWORD *)(a2 + 92) = result[35];
    return result;
  }
  *(_DWORD *)(a2 + 88) = result[34];
  if ((result[38] & 2) != 0)
    goto LABEL_69;
  return result;
}

{
  _DWORD *v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BYTE v11[48];

  v3 = result;
  v4 = result[13];
  if ((v4 & 1) != 0)
    *(_BYTE *)a2 = result[8];
  v5 = result[4];
  if (v5 >= 1)
  {
    v6 = 0;
    if (v5 >= 16)
      v7 = 16;
    else
      v7 = v5;
    v8 = a2 + 4;
    do
    {
      if (v6 >= (int)v3[4])
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 825);
        v9 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (index) < (size()): ");
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v9);
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
      }
      result = ProtobufUtil::fromProtobuf(*(_DWORD **)(*((_QWORD *)v3 + 1) + 8 * v6++), v8);
      v8 += 96;
    }
    while (v7 != v6);
    v4 = v3[13];
  }
  if ((v4 & 4) != 0)
  {
    result = (_DWORD *)ProtobufUtil::fromProtobuf(v3[9]);
    *(_DWORD *)(a2 + 1540) = (_DWORD)result;
    v4 = v3[13];
    if ((v4 & 8) == 0)
    {
LABEL_14:
      if ((v4 & 0x10) == 0)
        return result;
      goto LABEL_15;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_14;
  }
  result = (_DWORD *)ProtobufUtil::fromProtobuf(v3[10]);
  *(_DWORD *)(a2 + 1544) = (_DWORD)result;
  if ((v3[13] & 0x10) == 0)
    return result;
LABEL_15:
  *(_DWORD *)(a2 + 1548) = v3[11];
  return result;
}

void sub_1000405B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t ProtobufUtil::fromProtobuf(uint64_t result, _BYTE *a2)
{
  int v2;

  v2 = *(_DWORD *)(result + 16);
  if ((v2 & 1) != 0)
  {
    *a2 = *(_BYTE *)(result + 8);
    if ((v2 & 2) == 0)
    {
LABEL_3:
      if ((v2 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  a2[1] = *(_BYTE *)(result + 9);
  if ((v2 & 4) == 0)
  {
LABEL_4:
    if ((v2 & 8) == 0)
      return result;
LABEL_9:
    a2[3] = *(_BYTE *)(result + 11);
    return result;
  }
LABEL_8:
  a2[2] = *(_BYTE *)(result + 10);
  if ((v2 & 8) != 0)
    goto LABEL_9;
  return result;
}

void sub_100040A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t ProtobufUtil::fromProtobuf(uint64_t result, _DWORD *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  v3 = result;
  v4 = *(_DWORD *)(result + 28);
  if ((v4 & 1) == 0)
  {
    if ((v4 & 2) == 0)
      goto LABEL_3;
LABEL_6:
    result = ProtobufUtil::fromProtobuf(*(_DWORD *)(v3 + 12));
    a2[1] = result;
    if ((*(_DWORD *)(v3 + 28) & 4) == 0)
      return result;
    goto LABEL_7;
  }
  result = gnss::Convert::fromProtobuf(*(_DWORD *)(result + 8));
  *a2 = result;
  v4 = *(_DWORD *)(v3 + 28);
  if ((v4 & 2) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v4 & 4) == 0)
    return result;
LABEL_7:
  v5 = *(_QWORD *)(v3 + 16);
  if (!v5)
    v5 = *(_QWORD *)(proto::gnss::Emergency::CellFTAssistance::default_instance_ + 16);
  return ProtobufUtil::fromProtobuf(v5, (uint64_t)(a2 + 2));
}

std::string *ProtobufUtil::toProtobuf(std::string *__str, uint64_t a2)
{
  std::string *v4;
  int v5;
  std::string *v6;

  *(_DWORD *)(a2 + 32) |= 1u;
  v4 = *(std::string **)(a2 + 8);
  if (v4 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v4, __str);
  v5 = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 24) = __str[1].__r_.__value_.__l.__data_;
  *(_DWORD *)(a2 + 32) = v5 | 6;
  v6 = *(std::string **)(a2 + 16);
  if (v6 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  return std::string::operator=(v6, (std::string *)((char *)__str + 32));
}

uint64_t ProtobufUtil::toProtobuf(uint64_t *a1, uint64_t a2)
{
  int v4;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  int v13;
  char v14;

  v4 = -1227133513 * ((a1[1] - *a1) >> 3);
  v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 8);
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 8), v4);
  if (v4 >= 1)
  {
    v6 = 0;
    v7 = 56 * v4;
    do
    {
      v8 = *a1;
      v9 = *(_DWORD *)(a2 + 20);
      v10 = *(int *)(a2 + 16);
      if ((int)v10 >= v9)
      {
        if (v9 == *(_DWORD *)(a2 + 24))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v9 + 1);
          v9 = *(_DWORD *)(a2 + 20);
        }
        *(_DWORD *)(a2 + 20) = v9 + 1;
        operator new();
      }
      v11 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 16) = v10 + 1;
      ProtobufUtil::toProtobuf((std::string *)(v8 + v6), *(_QWORD *)(v11 + 8 * v10));
      v6 += 56;
    }
    while (v7 != v6);
  }
  *(_DWORD *)(a2 + 44) |= 2u;
  result = *(_QWORD *)(a2 + 32);
  if (!result)
    operator new();
  v13 = *(_DWORD *)(result + 20);
  v14 = *((_BYTE *)a1 + 24);
  *(_DWORD *)(result + 20) = v13 | 1;
  *(_BYTE *)(result + 12) = v14;
  *(_DWORD *)(result + 8) = *((_DWORD *)a1 + 7);
  *(_WORD *)(result + 13) = *((_WORD *)a1 + 16);
  *(_DWORD *)(result + 20) = v13 | 0xF;
  return result;
}

void sub_10004126C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

_DWORD *ProtobufUtil::fromProtobuf(_DWORD *result, _BYTE *__dst)
{
  _DWORD *v3;
  int v4;
  _BYTE *v5;
  size_t v6;

  v3 = result;
  v4 = result[8];
  if ((v4 & 2) != 0)
  {
    __dst[6] = *((_BYTE *)result + 16);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
LABEL_8:
      *((_WORD *)__dst + 4) = result[5];
      if ((v4 & 1) == 0)
        goto LABEL_12;
      goto LABEL_9;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_3;
  }
  __dst[7] = *((_BYTE *)result + 17);
  if ((v4 & 8) != 0)
    goto LABEL_8;
LABEL_4:
  if ((v4 & 1) == 0)
    goto LABEL_12;
LABEL_9:
  v5 = (_BYTE *)*((_QWORD *)result + 1);
  if (((char)v5[23] & 0x80000000) == 0)
  {
    v6 = v5[23];
    if (!v5[23])
      goto LABEL_12;
    goto LABEL_11;
  }
  v5 = *(_BYTE **)v5;
  v6 = *(_QWORD *)(*((_QWORD *)result + 1) + 8);
  if (v6)
  {
LABEL_11:
    result = memmove(__dst, v5, v6);
    v4 = v3[8];
  }
LABEL_12:
  if ((v4 & 0x10) != 0)
    *((_WORD *)__dst + 5) = v3[6];
  return result;
}

void sub_1000414EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100041504(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_1000418E8((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 12 * a2;
  }
}

_DWORD *ProtobufUtil::toProtobuf(int *a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  BOOL v8;
  int v9;
  _DWORD *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  _DWORD *v15;
  int v16;
  int v17;
  int v18;
  _DWORD *result;
  int v20;
  int v21;

  v3 = *a1;
  v4 = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = v4 | 1;
  v5 = a1[1];
  *(_DWORD *)(a2 + 8) = v3;
  *(_DWORD *)(a2 + 12) = v5;
  v6 = *((unsigned __int8 *)a1 + 9);
  *(_DWORD *)(a2 + 16) = *((unsigned __int8 *)a1 + 8);
  *(_DWORD *)(a2 + 20) = v6;
  v7 = a1[3];
  v8 = (v7 + 1) >= 3;
  v9 = v7 + 2;
  if (v8)
    v9 = 0;
  *(_DWORD *)(a2 + 24) = *((unsigned __int8 *)a1 + 10);
  *(_DWORD *)(a2 + 28) = v9;
  *(_BYTE *)(a2 + 56) = *((_BYTE *)a1 + 16);
  *(_DWORD *)(a2 + 64) = v4 | 0xFF;
  v10 = *(_DWORD **)(a2 + 32);
  if (!v10)
    operator new();
  v11 = v10[6];
  v12 = *((unsigned __int16 *)a1 + 10);
  v10[2] = *((unsigned __int16 *)a1 + 9);
  v10[3] = v12;
  v13 = *((unsigned __int8 *)a1 + 22);
  v10[6] = v11 | 7;
  v10[4] = v13;
  v14 = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a2 + 57) = *((_BYTE *)a1 + 24);
  *(_DWORD *)(a2 + 64) = v14 | 0x300;
  v15 = *(_DWORD **)(a2 + 40);
  if (!v15)
    operator new();
  v16 = a1[7];
  v17 = *((unsigned __int16 *)a1 + 16);
  v15[5] |= 3u;
  v15[2] = v16;
  v15[3] = v17;
  v18 = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a2 + 58) = *((_BYTE *)a1 + 36);
  *(_DWORD *)(a2 + 64) = v18 | 0xC00;
  result = *(_DWORD **)(a2 + 48);
  if (!result)
    operator new();
  v20 = *((unsigned __int16 *)a1 + 19);
  v21 = *((unsigned __int8 *)a1 + 40);
  result[5] |= 3u;
  result[2] = v20;
  result[3] = v21;
  return result;
}

uint64_t sub_100041850(uint64_t result, int a2)
{
  int v2;
  int v3;

  v2 = *(_DWORD *)(result + 12);
  if (v2 < a2)
  {
    v3 = 2 * v2;
    if (v3 <= a2)
      v3 = a2;
    if (v3 <= 4)
      v3 = 4;
    *(_DWORD *)(result + 12) = v3;
    operator new[]();
  }
  return result;
}

void sub_1000418E8(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  int v17;

  v5 = (char *)a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 2) >= a2)
  {
    if (a2)
    {
      v11 = &v5[12 * a2];
      do
      {
        *(_QWORD *)v5 = 0;
        *((_DWORD *)v5 + 2) = 0x7FFFFFFF;
        v5 += 12;
      }
      while (v5 != v11);
      v5 = v11;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 2);
    v7 = v6 + a2;
    if (v6 + a2 > 0x1555555555555555)
      sub_100026868();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 2);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0xAAAAAAAAAAAAAAALL)
      v9 = 0x1555555555555555;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0x1555555555555555)
        sub_1000268B0();
      v10 = (char *)operator new(12 * v9);
    }
    else
    {
      v10 = 0;
    }
    v12 = &v10[12 * v6];
    v13 = &v12[12 * a2];
    v14 = v12;
    do
    {
      *(_QWORD *)v14 = 0;
      *((_DWORD *)v14 + 2) = 0x7FFFFFFF;
      v14 += 12;
    }
    while (v14 != v13);
    v15 = (char *)*a1;
    if (v5 != *a1)
    {
      do
      {
        v16 = *(_QWORD *)(v5 - 12);
        v5 -= 12;
        v17 = *((_DWORD *)v5 + 2);
        *(_QWORD *)(v12 - 12) = v16;
        v12 -= 12;
        *((_DWORD *)v12 + 2) = v17;
      }
      while (v5 != v15);
      v5 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v13;
    a1[2] = &v10[12 * v9];
    if (v5)
      operator delete(v5);
  }
}

uint64_t GnssHal::ExtensionsFireImpl::submitSoftwareRecoveryStatistics(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

uint64_t GnssHal::ExtensionsFireImpl::isCntinAvailable(GnssHal::ExtensionsFireImpl *this)
{
  GpsdPlatformInfo *v1;
  unsigned int v2;
  BOOL v3;
  int v4;
  BOOL v5;

  v1 = (GpsdPlatformInfo *)GpsdPlatformInfo::instance(0);
  v2 = *((_DWORD *)v1 + 2) - 103;
  v3 = v2 >= 4;
  v5 = v2 == 4;
  v4 = (1 << v2) & 0x19;
  v5 = !v5 && v3 || v4 == 0;
  if (v5)
    return 0;
  else
    return GpsdPlatformInfo::isPhone(v1);
}

_QWORD *GnssHal::ExtensionsFireImpl::setCntinEnable(GnssHal::ExtensionsFireImpl *this)
{
  NSObject *v2;
  _QWORD *result;
  uint64_t v4;
  uint8_t v5[8];
  _QWORD v6[3];
  _QWORD *v7;

  v2 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#cntin,setCntinEnable", v5, 2u);
  }
  result = (_QWORD *)*((_QWORD *)this + 8);
  if (result)
  {
    v6[0] = off_1000F34A8;
    v6[1] = this;
    v7 = v6;
    (*(void (**)(_QWORD *, _QWORD *))(*result + 48))(result, v6);
    result = v7;
    if (v7 == v6)
    {
      v4 = 4;
      result = v6;
    }
    else
    {
      if (!v7)
        return result;
      v4 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
  }
  return result;
}

void sub_100041BA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t GnssHal::ExtensionsFireImpl::setCntinDisable(GnssHal::ExtensionsFireImpl *this)
{
  NSObject *v2;
  uint64_t result;
  uint8_t v4[16];

  v2 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#cntin,setCntinDisable", v4, 2u);
  }
  result = *((_QWORD *)this + 12);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

_QWORD *GnssHal::ExtensionsFireImpl::setCntinStatusCb(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint8_t v6[16];

  v4 = qword_100100830;
  if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#cntin,setCntinStatusCb", v6, 2u);
  }
  return sub_100031550((_QWORD *)(a1 + 104), a2);
}

uint64_t GnssHal::ExtensionsFireImpl::factoryTestXml@<X0>(GnssHal::ExtensionsFireImpl *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  NSObject *v3;
  void **v4;
  void *__p[2];
  char v6;
  uint8_t buf[4];
  void **v8;

  result = *((_QWORD *)this + 32);
  if (result)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)result + 48))(__p);
    v3 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
    {
      v4 = __p;
      if (v6 < 0)
        v4 = (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "factoryTestXml,%s", buf, 0xCu);
    }
    operator new();
  }
  *a2 = 0;
  return result;
}

void sub_100041E00(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  operator delete();
}

uint64_t GnssHal::ExtensionsFireImpl::factoryTestJob@<X0>(GnssHal::ExtensionsFireImpl *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  NSObject *v3;
  void **v4;
  void *__p[2];
  char v6;
  uint8_t buf[4];
  void **v8;

  result = *((_QWORD *)this + 36);
  if (result)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)result + 48))(__p);
    v3 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
    {
      v4 = __p;
      if (v6 < 0)
        v4 = (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "factoryTestJob,%s", buf, 0xCu);
    }
    operator new();
  }
  *a2 = 0;
  return result;
}

void sub_100041F70(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  operator delete();
}

void GnssHal::ExtensionsFireImpl::bundleName(GnssHal::ExtensionsFireImpl *this)
{
  GpsdPreferences *v1;
  __int128 v2;

  v1 = (GpsdPreferences *)GpsdPreferences::instance(0);
  GpsdPreferences::bundleName(v1, &v2);
  operator new();
}

void sub_100042014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void GnssHal::ExtensionsFireImpl::nvStorePath(GnssHal::ExtensionsFireImpl *this)
{
  id *v1;
  __int128 v2;

  v1 = (id *)GpsdPreferences::instance(0);
  GpsdPreferences::nvStorePath(v1, &v2);
  operator new();
}

void sub_100042090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *GnssHal::ExtensionsFireImpl::debugSettingsString@<X0>(_QWORD *a1@<X8>)
{
  id *v3;

  v3 = (id *)GpsdPreferences::instance(0);
  return GpsdPreferences::debugSettingsString(v3, a1);
}

uint64_t GnssHal::ExtensionsFireImpl::updateReceiverClockAnalyticsData(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 160);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

uint64_t GnssHal::ExtensionsFireImpl::updateRtcClockAnalyticsData(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 192);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

uint64_t GnssHal::ExtensionsFireImpl::updateL5GroupDelayAnalyticsData(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 224);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

void sub_100042120(_QWORD *a1)
{
  sub_100042144(a1);
  operator delete();
}

_QWORD *sub_100042144(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  *a1 = off_1000F3390;
  v2 = a1 + 33;
  v3 = (_QWORD *)a1[36];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[32];
  if (v5 == a1 + 29)
  {
    v6 = 4;
    v5 = a1 + 29;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[28];
  if (v7 == a1 + 25)
  {
    v8 = 4;
    v7 = a1 + 25;
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  v9 = (_QWORD *)a1[24];
  if (v9 == a1 + 21)
  {
    v10 = 4;
    v9 = a1 + 21;
  }
  else
  {
    if (!v9)
      goto LABEL_21;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_21:
  v11 = (_QWORD *)a1[20];
  if (v11 == a1 + 17)
  {
    v12 = 4;
    v11 = a1 + 17;
  }
  else
  {
    if (!v11)
      goto LABEL_26;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_26:
  v13 = (_QWORD *)a1[16];
  if (v13 == a1 + 13)
  {
    v14 = 4;
    v13 = a1 + 13;
  }
  else
  {
    if (!v13)
      goto LABEL_31;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_31:
  v15 = (_QWORD *)a1[12];
  if (v15 == a1 + 9)
  {
    v16 = 4;
    v15 = a1 + 9;
  }
  else
  {
    if (!v15)
      goto LABEL_36;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_36:
  v17 = (_QWORD *)a1[8];
  if (v17 == a1 + 5)
  {
    v18 = 4;
    v17 = a1 + 5;
  }
  else
  {
    if (!v17)
      goto LABEL_41;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_41:
  v19 = (_QWORD *)a1[4];
  if (v19 == a1 + 1)
  {
    v20 = 4;
    v19 = a1 + 1;
    goto LABEL_45;
  }
  if (v19)
  {
    v20 = 5;
LABEL_45:
    (*(void (**)(void))(*v19 + 8 * v20))();
  }
  return a1;
}

void sub_100042324()
{
  operator delete();
}

_QWORD *sub_100042338(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F34A8;
  result[1] = v3;
  return result;
}

uint64_t sub_10004236C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F34A8;
  a2[1] = v2;
  return result;
}

void sub_100042388(uint64_t a1, int *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  _DWORD v7[2];
  __int16 v8;
  _BOOL4 v9;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(v3 + 128);
  v5 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO))
  {
    v7[0] = 67240448;
    v7[1] = v2;
    v8 = 1026;
    v9 = v4 != 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "#cntin,status,%{public}d,hasHandler,%{public}d", (uint8_t *)v7, 0xEu);
  }
  if (v4)
  {
    v7[0] = v2;
    v6 = *(_QWORD *)(v3 + 128);
    if (!v6)
      sub_100025CE8();
    (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v6 + 48))(v6, v7);
  }
}

uint64_t sub_10004246C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1000424A8()
{
}

_QWORD *GnssHal::ExtensionsOlafImpl::requestLtlInfo(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;

  if (result[4])
  {
    v4 = result;
    sub_100031BDC((uint64_t)v7, a3);
    v5 = v4[4];
    if (!v5)
      sub_100025CE8();
    (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v5 + 48))(v5, a2, v7);
    result = v8;
    if (v8 == v7)
    {
      v6 = 4;
      result = v7;
    }
    else
    {
      if (!v8)
        return result;
      v6 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
  }
  return result;
}

void sub_100042570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _Unwind_Resume(exception_object);
}

double GnssHal::ExtensionsOlafImpl::groupDelayL1InCAChips(GnssHal::ExtensionsOlafImpl *this)
{
  id *v1;
  double v2;
  double v3;
  NSObject *v4;
  int v6;
  double v7;

  v1 = (id *)GpsdPreferences::instance(0);
  GpsdPreferences::groupDelayL1InCAChips(v1);
  v3 = v2;
  v4 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO))
  {
    v6 = 134217984;
    v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "ExtensionsOlafImpl,groupDelayL1InCAChips,%f", (uint8_t *)&v6, 0xCu);
  }
  return v3;
}

uint64_t GnssHal::ExtensionsOlafImpl::enableInertialFusion(GnssHal::ExtensionsOlafImpl *this)
{
  id *v1;

  v1 = (id *)GpsdPreferences::instance(0);
  return GpsdPreferences::isRavenExpected(v1) ^ 1;
}

BOOL GnssHal::ExtensionsOlafImpl::platform(GnssHal::ExtensionsOlafImpl *this)
{
  uint64_t v1;
  _BOOL8 result;
  NSObject *v3;
  uint8_t v4[16];

  v1 = GpsdPlatformInfo::instance(0);
  result = 0;
  if (*(_DWORD *)(v1 + 8) != 201)
  {
    if (*(_DWORD *)(GpsdPlatformInfo::instance(0) + 8) == 202)
    {
      return 1;
    }
    else
    {
      v3 = qword_100100838;
      result = os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_FAULT);
      if (result)
      {
        *(_WORD *)v4 = 0;
        _os_log_fault_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Unhandled platform in ExtensionsOlaf", v4, 2u);
        return 0;
      }
    }
  }
  return result;
}

char *GnssHal::ExtensionsOlafImpl::getGpsWeekFromBuildDate(GnssHal::ExtensionsOlafImpl *this)
{
  if (*((_BYTE *)this + 104))
    return (char *)2049;
  else
    return gpsd::util::getGpsWeekFromBuildDate(this);
}

uint64_t GnssHal::ExtensionsOlafImpl::supportsL5(GnssHal::ExtensionsOlafImpl *this)
{
  return *(unsigned __int8 *)(GpsdPlatformInfo::instance(0) + 24);
}

void GnssHal::ExtensionsOlafImpl::requestBasebandReset(uint64_t a1, int a2, void **a3)
{
  NSObject *v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  void *__p[2];
  void *v11;
  std::string v12;
  std::string v13;
  std::string v14;
  uint8_t buf[4];
  _BYTE v16[14];
  __int16 v17;
  const char *v18;

  v6 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    v7 = a3;
    if (*((char *)a3 + 23) < 0)
      v7 = *a3;
    *(_DWORD *)buf = 67240451;
    *(_DWORD *)v16 = a2;
    *(_WORD *)&v16[4] = 2081;
    *(_QWORD *)&v16[6] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#bbReset,extensionsOlaf,%{public}d,%{private}s", buf, 0x12u);
  }
  v8 = *(_QWORD *)(a1 + 64);
  if (!v8)
  {
    v9 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "requestBasebandReset invoked without a handler", buf, 2u);
      v9 = qword_100100838;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)v16 = "/Library/Caches/com.apple.xbs/Sources/CoreGPS/Sources/HAL/Implementation/GnssHalExtensionsOlafImpl.mm";
      *(_WORD *)&v16[8] = 1026;
      *(_DWORD *)&v16[10] = 58;
      v17 = 2082;
      v18 = "requestBasebandReset";
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: assertion failure in %{public}s", buf, 0x1Cu);
    }
    sub_100025B58(&v14, "assert");
    sub_100025B58(&v13, "requestBasebandReset");
    sub_100025B58(&v12, "requestBasebandReset invoked without a handler");
    gpsd::util::triggerDiagnosticReport((uint64_t)&v14, (__int128 *)&v13, (__int128 *)&v12);
    std::string::~string(&v12);
    std::string::~string(&v13);
    std::string::~string(&v14);
    __assert_rtn("requestBasebandReset", "GnssHalExtensionsOlafImpl.mm", 58, "false && \"requestBasebandReset invoked without a handler\"");
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_100031B50(__p, *a3, (unint64_t)a3[1]);
    v8 = *(_QWORD *)(a1 + 64);
    *(_DWORD *)buf = a2;
    if (!v8)
      sub_100025CE8();
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a3;
    v11 = a3[2];
    *(_DWORD *)buf = a2;
  }
  (*(void (**)(uint64_t, uint8_t *, void **))(*(_QWORD *)v8 + 48))(v8, buf, __p);
  if (SHIBYTE(v11) < 0)
    operator delete(__p[0]);
}

void sub_1000429C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100042A2C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = off_1000F3568;
  v2 = a1 + 5;
  v3 = (_QWORD *)a1[8];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[4];
  if (v5 == a1 + 1)
  {
    v6 = 4;
    v5 = a1 + 1;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

void sub_100042AB8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = off_1000F3568;
  v2 = a1 + 5;
  v3 = (_QWORD *)a1[8];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[4];
  if (v5 == a1 + 1)
  {
    v6 = 4;
    v5 = a1 + 1;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  operator delete();
}

uint64_t sub_100042B64()
{
  return 0;
}

uint64_t sub_100042B6C()
{
  return 0;
}

void sub_100042B74(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

double sub_100042B80(uint64_t a1)
{
  return *(double *)(a1 + 72);
}

void SuplPduLog::traceSuplPdu(SuplPduLog *this, const unsigned __int8 *a2, int a3)
{
  const unsigned __int8 *v3;
  SuplPduLog *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const std::ios_base *v9;
  const std::locale::facet *v10;
  std::string *v11;
  std::string::size_type size;
  std::string::size_type v13;
  std::string::size_type v14;
  std::string::size_type v15;
  NSObject *v16;
  std::string::size_type v17;
  std::string::size_type v18;
  const char *v19;
  uint64_t v20;
  NSObject *v21;
  std::string *v22;
  std::string v24;
  std::string __str;
  uint8_t buf[12];
  __int16 v27;
  _BYTE v28[10];
  void (__cdecl **v29)(std::stringbuf *__hidden);
  __int16 v30;
  _QWORD v31[9];
  char v32;
  uint64_t v33;

  if (this && (v3 = a2) != 0)
  {
    v4 = this;
    memset(&__str, 0, sizeof(__str));
    do
    {
      sub_100042F68((uint64_t)buf);
      v8 = *(_QWORD *)&v28[2];
      *(_DWORD *)((char *)&v29 + *(_QWORD *)(*(_QWORD *)&v28[2] - 24)) = *(_DWORD *)((_BYTE *)&v29
                                                                                     + *(_QWORD *)(*(_QWORD *)&v28[2]
                                                                                                 - 24)) & 0xFFFFFFB5 | 8;
      *(_QWORD *)((char *)v31 + *(_QWORD *)(v8 - 24) + 6) = 2;
      v9 = (const std::ios_base *)&v28[*(_QWORD *)(v8 - 24) + 2];
      if (v9[1].__fmtflags_ == -1)
      {
        std::ios_base::getloc(v9);
        v10 = std::locale::use_facet((const std::locale *)&v24, &std::ctype<char>::id);
        ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
        std::locale::~locale((std::locale *)&v24);
      }
      v9[1].__fmtflags_ = 48;
      std::ostream::operator<<(&v28[2], *(unsigned __int8 *)v4);
      std::stringbuf::str(&v24, &v29);
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = &v24;
      else
        v11 = (std::string *)v24.__r_.__value_.__r.__words[0];
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
      else
        size = v24.__r_.__value_.__l.__size_;
      std::string::append(&__str, (const std::string::value_type *)v11, size);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
      *(_QWORD *)buf = v5;
      *(_QWORD *)&buf[*(_QWORD *)(v5 - 24)] = v7;
      *(_QWORD *)&v28[2] = v6;
      if (v32 < 0)
        operator delete(*(void **)((char *)&v31[6] + 6));
      std::streambuf::~streambuf(&v29);
      std::ios::~ios(&v33);
      v4 = (SuplPduLog *)((char *)v4 + 1);
      --v3;
    }
    while (v3);
    v13 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      v14 = __str.__r_.__value_.__l.__size_ / 0x1F4;
      v15 = __str.__r_.__value_.__l.__size_ % 0x1F4;
    }
    else
    {
      v14 = 0;
      v15 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    v17 = 0;
    if (v15)
      v18 = v14 + 1;
    else
      v18 = v14;
    if (a3)
      v19 = "In";
    else
      v19 = "Out";
    v20 = 1;
    if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_31;
    while (v17 < v13)
    {
      while (1)
      {
        std::string::basic_string(&v24, &__str, v17, 0x1F4uLL, (std::allocator<char> *)buf);
        v21 = qword_100100838;
        if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
        {
          v22 = &v24;
          if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v22 = (std::string *)v24.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 134284291;
          *(_QWORD *)&buf[4] = v20;
          v27 = 2049;
          *(_QWORD *)v28 = v18;
          *(_WORD *)&v28[8] = 2081;
          v29 = (void (__cdecl **)(std::stringbuf *__hidden))v22;
          v30 = 2081;
          v31[0] = v19;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#supl,#pdu,%{private}zu,of,%{private}zu,%{private}s,%{private}s", buf, 0x2Au);
        }
        if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v24.__r_.__value_.__l.__data_);
        v13 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        v17 += 500;
        ++v20;
        if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) == 0)
          break;
LABEL_31:
        if (v17 >= __str.__r_.__value_.__l.__size_)
        {
          operator delete(__str.__r_.__value_.__l.__data_);
          return;
        }
      }
    }
  }
  else
  {
    v16 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "#supl,PDU is empty", buf, 2u);
    }
  }
}

void sub_100042F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::locale a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  std::locale::~locale(&a13);
  sub_10003C25C((uint64_t)&a25);
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100042F68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1 + 16;
  v3 = a1 + 24;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 24));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(v2 + *(_QWORD *)(v7 - 24)) = v8;
  *(_QWORD *)a1 = v9;
  std::streambuf::basic_streambuf(v3);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_10004306C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::iostream::~basic_iostream(v2, v3 + 8);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t GpsdConnectionManager::GpsdConnectionManager(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id *v10;
  dispatch_qos_class_t v11;
  NSObject *v12;
  NSObject *v13;
  uint8_t v15[16];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1000F3600;
  *(_DWORD *)(a1 + 24) = -1;
  *(_BYTE *)(a1 + 28) = 0;
  sub_100025B58((_QWORD *)(a1 + 32), "");
  *(_QWORD *)(a1 + 144) = 1018212795;
  *(_WORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 850045863;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 180) = 0u;
  sub_100031BDC(a1 + 200, a2);
  sub_100031BDC(a1 + 232, a3);
  sub_100031BDC(a1 + 264, a4);
  sub_100031BDC(a1 + 296, a5);
  v10 = (id *)GpsdPreferences::instance(0);
  v11 = GpsdPreferences::maxSchedulerQos(v10);
  v12 = dispatch_queue_attr_make_with_qos_class(0, v11, 0);
  if (!v12)
  {
    v13 = qword_100100830;
    if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#supl,null queue attr", v15, 2u);
    }
  }
  *(_QWORD *)(a1 + 64) = dispatch_queue_create("com.apple.gpsd.suplConnMgr", v12);
  return a1;
}

void sub_10004321C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  std::condition_variable *v3;
  std::mutex *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v10 = *(_QWORD **)(v1 + 320);
  if (v10 == v8)
  {
    v11 = 4;
  }
  else
  {
    if (!v10)
      goto LABEL_6;
    v11 = 5;
    v8 = *(_QWORD **)(v1 + 320);
  }
  (*(void (**)(_QWORD *))(*v8 + 8 * v11))(v8);
LABEL_6:
  v12 = *(_QWORD **)(v1 + 288);
  if (v12 == v7)
  {
    v13 = 4;
    v12 = v7;
  }
  else
  {
    if (!v12)
      goto LABEL_11;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_11:
  v14 = *(_QWORD **)(v1 + 256);
  if (v14 == v6)
  {
    v15 = 4;
    v14 = v6;
  }
  else
  {
    if (!v14)
      goto LABEL_16;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_16:
  v16 = *(_QWORD **)(v1 + 224);
  if (v16 == v5)
  {
    v17 = 4;
    v16 = v5;
  }
  else
  {
    if (!v16)
      goto LABEL_21;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_21:
  std::condition_variable::~condition_variable(v3);
  std::mutex::~mutex(v4);
  if (*(char *)(v1 + 55) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

uint64_t sub_10004331C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *(_QWORD *)a1 = off_1000F3600;
  sub_100043438(a1);
  dispatch_release(*(dispatch_object_t *)(a1 + 64));
  v2 = *(_QWORD **)(a1 + 320);
  if (v2 == (_QWORD *)(a1 + 296))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 296);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v4 = *(_QWORD **)(a1 + 288);
  if (v4 == (_QWORD *)(a1 + 264))
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 264);
  }
  else
  {
    if (!v4)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_11:
  v6 = *(_QWORD **)(a1 + 256);
  if (v6 == (_QWORD *)(a1 + 232))
  {
    v7 = 4;
    v6 = (_QWORD *)(a1 + 232);
  }
  else
  {
    if (!v6)
      goto LABEL_16;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_16:
  v8 = *(_QWORD **)(a1 + 224);
  if (v8 == (_QWORD *)(a1 + 200))
  {
    v9 = 4;
    v8 = (_QWORD *)(a1 + 200);
  }
  else
  {
    if (!v8)
      goto LABEL_21;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_21:
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 144));
  std::mutex::~mutex((std::mutex *)(a1 + 80));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

std::string *sub_100043438(uint64_t a1)
{
  __CFReadStream *v2;
  uint64_t v3;
  __CFWriteStream *v4;
  std::string *result;

  atomic_store(0, (unsigned __int8 *)(a1 + 28));
  v3 = a1 + 8;
  v2 = *(__CFReadStream **)(a1 + 8);
  if (v2)
  {
    CFReadStreamClose(v2);
    CFRelease(*(CFTypeRef *)v3);
  }
  v4 = *(__CFWriteStream **)(a1 + 16);
  if (v4)
  {
    CFWriteStreamClose(v4);
    CFRelease(*(CFTypeRef *)(a1 + 16));
  }
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_DWORD *)(a1 + 24) = -1;
  result = std::string::assign((std::string *)(a1 + 32), "");
  *(_WORD *)(a1 + 56) = 0;
  return result;
}

void sub_1000434AC(uint64_t a1)
{
  sub_10004331C(a1);
  operator delete();
}

BOOL sub_1000434D0(uint64_t a1)
{
  uint64_t v2;
  const __CFData *v3;
  SecCertificateRef v4;
  SecCertificateRef v5;
  const __CFArray *v6;
  SecPolicyRef BasicX509;
  __SecTrust *v8;
  __SecTrust *v9;
  OSStatus v10;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  _BOOL8 v14;
  NSObject *v15;
  OSStatus v16;
  _BOOL4 v18;
  CFErrorRef v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  CFErrorRef v24;
  void *v25[2];
  char v26;
  void *v27[2];
  char v28;
  void *v29[2];
  char v30;
  void *v31[2];
  char v32;
  void *v33[2];
  char v34;
  void *v35[2];
  char v36;
  void *__p[2];
  char v38;
  void *v39[2];
  char v40;
  void *v41[2];
  char v42;
  UInt8 *v43;
  UInt8 *v44;
  uint64_t v45;
  void *values;
  uint8_t buf[4];
  const char *v48;
  __int16 v49;
  int v50;
  __int16 v51;
  const char *v52;

  v43 = 0;
  v44 = 0;
  v45 = 0;
  v2 = *(_QWORD *)(a1 + 256);
  if (!v2)
    sub_100025CE8();
  (*(void (**)(uint64_t, UInt8 **))(*(_QWORD *)v2 + 48))(v2, &v43);
  v3 = CFDataCreate(0, v43, v44 - v43);
  if (!v3)
  {
    v21 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "suplCertData alloc", buf, 2u);
      v21 = qword_100100838;
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v48 = "/Library/Caches/com.apple.xbs/Sources/CoreGPS/Sources/Emergency/GnssConnectionManager.mm";
      v49 = 1026;
      v50 = 310;
      v51 = 2082;
      v52 = "verifySSL";
      _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: assertion failure in %{public}s", buf, 0x1Cu);
    }
    sub_100025B58(v41, "assert");
    sub_100025B58(v39, "verifySSL");
    sub_100025B58(__p, "suplCertData alloc");
    gpsd::util::triggerDiagnosticReport((uint64_t)v41, (__int128 *)v39, (__int128 *)__p);
    if (v38 < 0)
      operator delete(__p[0]);
    if (v40 < 0)
      operator delete(v39[0]);
    if (v42 < 0)
      operator delete(v41[0]);
    __assert_rtn("verifySSL", "GnssConnectionManager.mm", 310, "false && \"suplCertData alloc\"");
  }
  v4 = SecCertificateCreateWithData(0, v3);
  v5 = v4;
  if (v4)
  {
    values = v4;
    v6 = CFArrayCreate(0, (const void **)&values, 1, 0);
    if (!v6)
    {
      v22 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "myCerts alloc", buf, 2u);
        v22 = qword_100100838;
      }
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        v48 = "/Library/Caches/com.apple.xbs/Sources/CoreGPS/Sources/Emergency/GnssConnectionManager.mm";
        v49 = 1026;
        v50 = 319;
        v51 = 2082;
        v52 = "verifySSL";
        _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: assertion failure in %{public}s", buf, 0x1Cu);
      }
      sub_100025B58(v35, "assert");
      sub_100025B58(v33, "verifySSL");
      sub_100025B58(v31, "myCerts alloc");
      gpsd::util::triggerDiagnosticReport((uint64_t)v35, (__int128 *)v33, (__int128 *)v31);
      if (v32 < 0)
        operator delete(v31[0]);
      if (v34 < 0)
        operator delete(v33[0]);
      if (v36 < 0)
        operator delete(v35[0]);
      __assert_rtn("verifySSL", "GnssConnectionManager.mm", 319, "false && \"myCerts alloc\"");
    }
    BasicX509 = SecPolicyCreateBasicX509();
    if (!BasicX509)
    {
      v23 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "myPolicy alloc", buf, 2u);
        v23 = qword_100100838;
      }
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        v48 = "/Library/Caches/com.apple.xbs/Sources/CoreGPS/Sources/Emergency/GnssConnectionManager.mm";
        v49 = 1026;
        v50 = 322;
        v51 = 2082;
        v52 = "verifySSL";
        _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: assertion failure in %{public}s", buf, 0x1Cu);
      }
      sub_100025B58(v29, "assert");
      sub_100025B58(v27, "verifySSL");
      sub_100025B58(v25, "myPolicy alloc");
      gpsd::util::triggerDiagnosticReport((uint64_t)v29, (__int128 *)v27, (__int128 *)v25);
      if (v26 < 0)
        operator delete(v25[0]);
      if (v28 < 0)
        operator delete(v27[0]);
      if (v30 < 0)
        operator delete(v29[0]);
      __assert_rtn("verifySSL", "GnssConnectionManager.mm", 322, "false && \"myPolicy alloc\"");
    }
    v8 = (__SecTrust *)CFWriteStreamCopyProperty(*(CFWriteStreamRef *)(a1 + 16), kCFStreamPropertySSLPeerTrust);
    v9 = v8;
    if (!v8)
    {
      v15 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "#supl unable to obtain trust", buf, 2u);
      }
      v14 = 0;
      goto LABEL_20;
    }
    v10 = SecTrustSetPolicies(v8, BasicX509);
    if (v10)
    {
      v11 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 67240192;
        LODWORD(v48) = v10;
        v12 = "#supl unable to set trust policy status,%{public}d";
LABEL_32:
        _os_log_fault_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, v12, buf, 8u);
      }
    }
    else
    {
      v16 = SecTrustSetAnchorCertificates(v9, v6);
      if (!v16)
      {
        v24 = 0;
        v18 = SecTrustEvaluateWithError(v9, &v24);
        v19 = v24;
        if (v24)
          v14 = 0;
        else
          v14 = v18;
        if (v14)
          goto LABEL_19;
        v20 = qword_100100838;
        if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 138543362;
          v48 = (const char *)v19;
          _os_log_fault_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "#supl: Invalid trust (EV) error: %{public}@", buf, 0xCu);
          v19 = v24;
          if (!v24)
            goto LABEL_19;
        }
        else if (!v19)
        {
          goto LABEL_19;
        }
        CFRelease(v19);
        goto LABEL_19;
      }
      v11 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 67240192;
        LODWORD(v48) = v16;
        v12 = "#supl unable to set anchor certs status,%{public}d";
        goto LABEL_32;
      }
    }
    v14 = 0;
LABEL_19:
    CFRelease(v9);
LABEL_20:
    CFRelease(BasicX509);
    CFRelease(v6);
    CFRelease(v5);
    CFRelease(v3);
    goto LABEL_21;
  }
  v13 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_fault_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "#supl unable to read SUPL certificate data", buf, 2u);
  }
  CFRelease(v3);
  v14 = 0;
LABEL_21:
  if (v43)
  {
    v44 = v43;
    operator delete(v43);
  }
  return v14;
}

void sub_100043BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  uint64_t v57;
  void *v59;

  v59 = *(void **)(v57 - 160);
  if (v59)
  {
    *(_QWORD *)(v57 - 152) = v59;
    operator delete(v59);
  }
  _Unwind_Resume(exception_object);
}

void sub_100043CDC(uint64_t a1)
{
  std::mutex *v2;

  v2 = (std::mutex *)(a1 + 80);
  std::mutex::lock((std::mutex *)(a1 + 80));
  *(_BYTE *)(a1 + 72) = 1;
  std::mutex::unlock(v2);
  std::condition_variable::notify_one((std::condition_variable *)(a1 + 144));
}

void sub_100043D18(uint64_t a1, CFIndex a2, UInt32 a3)
{
  int v6;
  uint64_t v7;
  NSObject *v8;
  unsigned __int8 v9;
  const char *v10;
  const __CFString *v11;
  CFReadStreamRef *v12;
  CFWriteStreamRef *v13;
  CFDictionaryRef v14;
  const __CFString *v15;
  uint64_t v16;
  int v17;
  NSObject *v18;
  _BOOL4 v19;
  CFTypeRef *v20;
  uint64_t v21;
  NSObject *v22;
  CFTypeRef v23;
  const __CFString *v24;
  uint64_t v25;
  void **v26;
  NSString *v27;
  const __CFString *v28;
  std::chrono::steady_clock::time_point v29;
  std::chrono::steady_clock::time_point v30;
  std::chrono::system_clock::time_point v31;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v32;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v33;
  BOOL v34;
  NSObject *v35;
  uint64_t v36;
  NSObject *v37;
  NSObject *v38;
  std::unique_lock<std::mutex>::mutex_type *Status;
  NSObject *v40;
  __CFError *v41;
  const char *v42;
  CFIndex v43;
  NSObject *v44;
  std::unique_lock<std::mutex>::mutex_type *v45;
  NSObject *v46;
  __CFError *v47;
  _QWORD *v48;
  int v49;
  NSObject *v50;
  NSObject *v51;
  NSObject *v52;
  uint64_t v53;
  NSObject *v54;
  NSObject *v55;
  _QWORD block[5];
  void *__p[2];
  uint64_t v58;
  std::string v59;
  std::string v60;
  std::string v61;
  std::string v62;
  std::string v63;
  std::string v64;
  uint8_t buf[16];
  std::unique_lock<std::mutex> __lk;
  CFStreamClientContext clientContext;
  void *values;
  void *keys;

  v6 = *(unsigned __int8 *)(a2 + 23);
  if (*(char *)(a2 + 23) < 0)
    v7 = *(_QWORD *)(a2 + 8);
  else
    v7 = *(unsigned __int8 *)(a2 + 23);
  v8 = qword_100100838;
  if (!a3 || !v7)
  {
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_FAULT))
    {
      if ((v6 & 0x80) != 0)
      {
        if (*(_QWORD *)(a2 + 8))
          v42 = *(const char **)a2;
        else
          v42 = "(null)";
      }
      else
      {
        v42 = "(null)";
        if (v6)
          v42 = (const char *)a2;
      }
      LODWORD(clientContext.version) = 136380931;
      *(CFIndex *)((char *)&clientContext.version + 4) = (CFIndex)v42;
      WORD2(clientContext.info) = 1026;
      *(_DWORD *)((char *)&clientContext.info + 6) = a3;
      _os_log_fault_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "#supl,connect,bad inputs,serverName,%{private}s,port,%{public}d", (uint8_t *)&clientContext, 0x12u);
    }
    LODWORD(clientContext.version) = 4;
    v21 = *(_QWORD *)(a1 + 288);
    if (!v21)
      sub_100025CE8();
    goto LABEL_19;
  }
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
  {
    v43 = a2;
    if ((v6 & 0x80) != 0)
      v43 = *(_QWORD *)a2;
    LODWORD(clientContext.version) = 136315394;
    *(CFIndex *)((char *)&clientContext.version + 4) = v43;
    WORD2(clientContext.info) = 1024;
    *(_DWORD *)((char *)&clientContext.info + 6) = a3;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#supl,connect,opening server,%s,port,%d", (uint8_t *)&clientContext, 0x12u);
  }
  v9 = atomic_load((unsigned __int8 *)(a1 + 28));
  if ((v9 & 1) != 0)
  {
    v22 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      v48 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v48 = (_QWORD *)*v48;
      v49 = *(unsigned __int16 *)(a1 + 56);
      LODWORD(clientContext.version) = 136380931;
      *(CFIndex *)((char *)&clientContext.version + 4) = (CFIndex)v48;
      WORD2(clientContext.info) = 1026;
      *(_DWORD *)((char *)&clientContext.info + 6) = v49;
      _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "#supl,connect,connection still open to serverName,%{private}s,port,%{public}d", (uint8_t *)&clientContext, 0x12u);
    }
    LODWORD(clientContext.version) = 4;
    v21 = *(_QWORD *)(a1 + 288);
    if (!v21)
      sub_100025CE8();
LABEL_19:
    (*(void (**)(uint64_t, CFStreamClientContext *))(*(_QWORD *)v21 + 48))(v21, &clientContext);
    return;
  }
  v10 = (const char *)a2;
  if (*(char *)(a2 + 23) < 0)
    v10 = *(const char **)a2;
  v11 = CFStringCreateWithCString(0, v10, 0x8000100u);
  if (!v11)
  {
    v54 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      LOWORD(clientContext.version) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "hostNameCFStr alloc", (uint8_t *)&clientContext, 2u);
      v54 = qword_100100838;
    }
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
    {
      LODWORD(clientContext.version) = 136446722;
      *(CFIndex *)((char *)&clientContext.version + 4) = (CFIndex)"/Library/Caches/com.apple.xbs/Sources/CoreGPS/Sources/"
                                                                  "Emergency/GnssConnectionManager.mm";
      WORD2(clientContext.info) = 1026;
      *(_DWORD *)((char *)&clientContext.info + 6) = 150;
      WORD1(clientContext.retain) = 2082;
      *(void *(__cdecl **)(void *))((char *)&clientContext.retain + 4) = (void *(__cdecl *)(void *))"connect";
      _os_log_error_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: assertion failure in %{public}s", (uint8_t *)&clientContext, 0x1Cu);
    }
    sub_100025B58(&v64, "assert");
    sub_100025B58(&v63, "connect");
    sub_100025B58(&v62, "hostNameCFStr alloc");
    gpsd::util::triggerDiagnosticReport((uint64_t)&v64, (__int128 *)&v63, (__int128 *)&v62);
    std::string::~string(&v62);
    std::string::~string(&v63);
    std::string::~string(&v64);
    __assert_rtn("connect", "GnssConnectionManager.mm", 150, "false && \"hostNameCFStr alloc\"");
  }
  v12 = (CFReadStreamRef *)(a1 + 8);
  v13 = (CFWriteStreamRef *)(a1 + 16);
  CFStreamCreatePairWithSocketToHost(0, v11, a3, (CFReadStreamRef *)(a1 + 8), (CFWriteStreamRef *)(a1 + 16));
  CFRelease(v11);
  keys = (void *)kCFStreamSSLValidatesCertificateChain;
  values = kCFBooleanFalse;
  v14 = CFDictionaryCreate(0, (const void **)&keys, (const void **)&values, 1, 0, 0);
  if (!v14)
  {
    v55 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      LOWORD(clientContext.version) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_ERROR, "sslDictionary alloc", (uint8_t *)&clientContext, 2u);
      v55 = qword_100100838;
    }
    if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
    {
      LODWORD(clientContext.version) = 136446722;
      *(CFIndex *)((char *)&clientContext.version + 4) = (CFIndex)"/Library/Caches/com.apple.xbs/Sources/CoreGPS/Sources/"
                                                                  "Emergency/GnssConnectionManager.mm";
      WORD2(clientContext.info) = 1026;
      *(_DWORD *)((char *)&clientContext.info + 6) = 160;
      WORD1(clientContext.retain) = 2082;
      *(void *(__cdecl **)(void *))((char *)&clientContext.retain + 4) = (void *(__cdecl *)(void *))"connect";
      _os_log_error_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: assertion failure in %{public}s", (uint8_t *)&clientContext, 0x1Cu);
    }
    sub_100025B58(&v61, "assert");
    sub_100025B58(&v60, "connect");
    sub_100025B58(&v59, "sslDictionary alloc");
    gpsd::util::triggerDiagnosticReport((uint64_t)&v61, (__int128 *)&v60, (__int128 *)&v59);
    std::string::~string(&v59);
    std::string::~string(&v60);
    std::string::~string(&v61);
    __assert_rtn("connect", "GnssConnectionManager.mm", 160, "false && \"sslDictionary alloc\"");
  }
  v15 = kCFStreamPropertyShouldCloseNativeSocket;
  CFReadStreamSetProperty(*(CFReadStreamRef *)(a1 + 8), kCFStreamPropertyShouldCloseNativeSocket, kCFBooleanTrue);
  CFWriteStreamSetProperty(*(CFWriteStreamRef *)(a1 + 16), v15, kCFBooleanTrue);
  v16 = *(_QWORD *)(a1 + 224);
  if (!v16)
    sub_100025CE8();
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 48))(v16);
  v18 = qword_100100838;
  v19 = os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG);
  if (v17)
  {
    if (v19)
    {
      LOWORD(clientContext.version) = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#supl,connect,using LTE,service type set to Emergency", (uint8_t *)&clientContext, 2u);
    }
    v20 = (CFTypeRef *)&kCTDataConnectionServiceTypeEmergency;
  }
  else
  {
    if (v19)
    {
      LOWORD(clientContext.version) = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#supl,connect,not using LTE,service type set to EmergencyLocation", (uint8_t *)&clientContext, 2u);
    }
    v20 = (CFTypeRef *)&kCTDataConnectionServiceTypeEmergencyLocation;
  }
  v23 = *v20;
  v24 = (const __CFString *)kCFStreamPropertyDataConnectionServiceType;
  CFReadStreamSetProperty(*(CFReadStreamRef *)(a1 + 8), kCFStreamPropertyDataConnectionServiceType, *v20);
  CFWriteStreamSetProperty(*(CFWriteStreamRef *)(a1 + 16), v24, v23);
  __p[0] = 0;
  __p[1] = 0;
  v58 = 0;
  v25 = *(_QWORD *)(a1 + 320);
  if (!v25)
    sub_100025CE8();
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v25 + 48))(v25, __p);
  if (v58 >= 0)
    v26 = __p;
  else
    v26 = (void **)__p[0];
  v27 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s"), v26);
  v28 = (const __CFString *)kCFStreamPropertyAccountIdentifier;
  CFReadStreamSetProperty(*v12, kCFStreamPropertyAccountIdentifier, v27);
  CFWriteStreamSetProperty(*v13, v28, v27);
  CFReadStreamSetProperty(*v12, kCFStreamPropertySSLSettings, v14);
  CFWriteStreamSetProperty(*v13, kCFStreamPropertySSLSettings, v14);
  CFRelease(v14);
  clientContext.version = 0;
  clientContext.info = (void *)a1;
  memset(&clientContext.retain, 0, 24);
  *(_BYTE *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  if (!CFReadStreamSetClient(*(CFReadStreamRef *)(a1 + 8), 0xDuLL, (CFReadStreamClientCallBack)sub_100044B40, &clientContext))
  {
    v35 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__lk.__m_) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "#supl,connect,unable to set read stream client", (uint8_t *)&__lk, 2u);
    }
    LODWORD(__lk.__m_) = 3;
    v36 = *(_QWORD *)(a1 + 288);
    if (v36)
      goto LABEL_81;
    goto LABEL_128;
  }
  if (!CFWriteStreamSetClient(*v13, 0xDuLL, (CFWriteStreamClientCallBack)sub_100044CA8, &clientContext))
  {
    v37 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__lk.__m_) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "#supl,connect,unable to set write stream client", (uint8_t *)&__lk, 2u);
    }
    LODWORD(__lk.__m_) = 3;
    v36 = *(_QWORD *)(a1 + 288);
    if (v36)
      goto LABEL_81;
LABEL_128:
    sub_100025CE8();
  }
  CFReadStreamSetDispatchQueue(*(CFReadStreamRef *)(a1 + 8), *(dispatch_queue_t *)(a1 + 64));
  CFWriteStreamSetDispatchQueue(*(CFWriteStreamRef *)(a1 + 16), *(dispatch_queue_t *)(a1 + 64));
  if (!CFReadStreamOpen(*v12))
  {
    v38 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__lk.__m_) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "#supl,connect,read stream open failed", (uint8_t *)&__lk, 2u);
    }
    Status = (std::unique_lock<std::mutex>::mutex_type *)CFReadStreamGetStatus(*v12);
    v40 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__lk.__m_) = 134349056;
      *(std::unique_lock<std::mutex>::mutex_type **)((char *)&__lk.__m_ + 4) = Status;
      _os_log_error_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "#supl,read stream in bad state streamStatus,%{public}lu", (uint8_t *)&__lk, 0xCu);
    }
    v41 = CFReadStreamCopyError(*v12);
    sub_10004508C(a1, v41);
    if (v41)
      CFRelease(v41);
    LODWORD(__lk.__m_) = 3;
    v36 = *(_QWORD *)(a1 + 288);
    if (v36)
      goto LABEL_81;
    goto LABEL_129;
  }
  if (!CFWriteStreamOpen(*v13))
  {
    v44 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__lk.__m_) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "#supl,connect,write stream open failed", (uint8_t *)&__lk, 2u);
    }
    v45 = (std::unique_lock<std::mutex>::mutex_type *)CFWriteStreamGetStatus(*v13);
    v46 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__lk.__m_) = 134349056;
      *(std::unique_lock<std::mutex>::mutex_type **)((char *)&__lk.__m_ + 4) = v45;
      _os_log_error_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "#supl,write stream in bad state streamStatus,%{public}lu", (uint8_t *)&__lk, 0xCu);
    }
    v47 = CFWriteStreamCopyError(*v13);
    sub_10004508C(a1, v47);
    if (v47)
      CFRelease(v47);
    LODWORD(__lk.__m_) = 3;
    v36 = *(_QWORD *)(a1 + 288);
    if (v36)
    {
LABEL_81:
      (*(void (**)(uint64_t, std::unique_lock<std::mutex> *))(*(_QWORD *)v36 + 48))(v36, &__lk);
      goto LABEL_82;
    }
LABEL_129:
    sub_100025CE8();
  }
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 80);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 80));
  v29.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 10000000000;
  while (!*(_BYTE *)(a1 + 72))
  {
    if (std::chrono::steady_clock::now().__d_.__rep_ >= v29.__d_.__rep_)
      goto LABEL_51;
    v30.__d_.__rep_ = v29.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
    if (v30.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v31.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (!v31.__d_.__rep_)
      {
        v32 = 0;
        goto LABEL_46;
      }
      if (v31.__d_.__rep_ < 1)
      {
        if ((unint64_t)v31.__d_.__rep_ >= 0xFFDF3B645A1CAC09)
          goto LABEL_45;
        v32 = 0x8000000000000000;
      }
      else
      {
        if ((unint64_t)v31.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          v32 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_46;
        }
LABEL_45:
        v32 = 1000 * v31.__d_.__rep_;
LABEL_46:
        if (v32 > (v30.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
        {
          v33.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_49:
          std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 144), &__lk, v33);
          std::chrono::steady_clock::now();
          goto LABEL_50;
        }
      }
      v33.__d_.__rep_ = v32 + v30.__d_.__rep_;
      goto LABEL_49;
    }
LABEL_50:
    if (std::chrono::steady_clock::now().__d_.__rep_ >= v29.__d_.__rep_)
    {
LABEL_51:
      v34 = *(_BYTE *)(a1 + 72) != 0;
      goto LABEL_92;
    }
  }
  v34 = 1;
LABEL_92:
  if (__lk.__owns_)
  {
    std::mutex::unlock(__lk.__m_);
    __lk.__owns_ = 0;
    v50 = *(NSObject **)(a1 + 64);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10004505C;
    block[3] = &unk_1000F0D30;
    block[4] = a1;
    dispatch_sync(v50, block);
    if (!v34)
    {
      v51 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_ERROR, "#supl,connect,timeout waiting for connection", buf, 2u);
      }
    }
    if (!*(_BYTE *)(a1 + 193))
    {
      sub_100044EAC(a1);
      *(_DWORD *)buf = 3;
      v53 = *(_QWORD *)(a1 + 288);
      if (v53)
        goto LABEL_106;
      goto LABEL_131;
    }
    if (!*(_BYTE *)(a1 + 194))
    {
      sub_100044F84(a1);
      *(_DWORD *)buf = 3;
      v53 = *(_QWORD *)(a1 + 288);
      if (v53)
        goto LABEL_106;
      goto LABEL_131;
    }
    v52 = qword_100100838;
    if (*(_BYTE *)(a1 + 192))
    {
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "#supl,connect,success", buf, 2u);
      }
      atomic_store(1u, (unsigned __int8 *)(a1 + 28));
      std::string::operator=((std::string *)(a1 + 32), (const std::string *)a2);
      *(_WORD *)(a1 + 56) = a3;
      *(_DWORD *)buf = 2;
      v53 = *(_QWORD *)(a1 + 288);
      if (v53)
        goto LABEL_106;
LABEL_131:
      sub_100025CE8();
    }
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_ERROR, "#supl,connect,SSL failure", buf, 2u);
    }
    sub_100043438(a1);
    *(_DWORD *)buf = 3;
    v53 = *(_QWORD *)(a1 + 288);
    if (!v53)
      goto LABEL_131;
LABEL_106:
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v53 + 48))(v53, buf);
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
LABEL_82:
    if (SHIBYTE(v58) < 0)
      operator delete(__p[0]);
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    __break(1u);
  }
}

void sub_100044A6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100044B40(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  uint64_t v9;

  if (a2 == 8)
  {
    v6 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v8) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#supl,processREvent,read stream error", (uint8_t *)&v8, 2u);
    }
    a3[193] = 0;
    goto LABEL_10;
  }
  if (a2 == 1)
  {
    v5 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v8) = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#supl,processREvent,read stream opened", (uint8_t *)&v8, 2u);
    }
    a3[193] = 1;
    if (a3[195])
    {
      a3[192] = sub_1000434D0((uint64_t)a3);
LABEL_10:
      sub_100043CDC((uint64_t)a3);
    }
  }
  else
  {
    v7 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
    {
      v8 = 134217984;
      v9 = a2;
      _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#supl,processREvent,unsupported event,%lu", (uint8_t *)&v8, 0xCu);
    }
  }
}

void sub_100044CA8(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  const char *v9;
  NSObject *v10;
  uint32_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  if (a2 == 8)
  {
    v6 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v13) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#supl write stream error", (uint8_t *)&v13, 2u);
    }
    a3[194] = 0;
    goto LABEL_14;
  }
  if (a2 == 4)
  {
    v7 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v13) = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#supl write stream can accept bytes", (uint8_t *)&v13, 2u);
    }
    a3[195] = 1;
    if (!a3[193])
    {
      v12 = qword_100100838;
      if (!os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
        return;
      LOWORD(v13) = 0;
      v9 = "#supl read stream not opened yet";
      v10 = v12;
      v11 = 2;
LABEL_20:
      _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, v9, (uint8_t *)&v13, v11);
      return;
    }
    a3[192] = sub_1000434D0((uint64_t)a3);
LABEL_14:
    sub_100043CDC((uint64_t)a3);
    return;
  }
  if (a2 != 1)
  {
    v8 = qword_100100838;
    if (!os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
      return;
    v13 = 134217984;
    v14 = a2;
    v9 = "#supl write event not supported event=%lu";
    v10 = v8;
    v11 = 12;
    goto LABEL_20;
  }
  v5 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v13) = 0;
    _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#supl write stream opened", (uint8_t *)&v13, 2u);
  }
  a3[194] = 1;
}

void sub_100044EAC(uint64_t a1)
{
  CFStreamStatus Status;
  NSObject *v3;
  __CFError *v4;
  int v5;
  CFStreamStatus v6;

  Status = CFReadStreamGetStatus(*(CFReadStreamRef *)(a1 + 8));
  v3 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
  {
    v5 = 134349056;
    v6 = Status;
    _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#supl,read stream in bad state streamStatus,%{public}lu", (uint8_t *)&v5, 0xCu);
  }
  v4 = CFReadStreamCopyError(*(CFReadStreamRef *)(a1 + 8));
  sub_10004508C(a1, v4);
  if (v4)
    CFRelease(v4);
}

void sub_100044F84(uint64_t a1)
{
  CFStreamStatus Status;
  NSObject *v3;
  __CFError *v4;
  int v5;
  CFStreamStatus v6;

  Status = CFWriteStreamGetStatus(*(CFWriteStreamRef *)(a1 + 16));
  v3 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
  {
    v5 = 134349056;
    v6 = Status;
    _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#supl,write stream in bad state streamStatus,%{public}lu", (uint8_t *)&v5, 0xCu);
  }
  v4 = CFWriteStreamCopyError(*(CFWriteStreamRef *)(a1 + 16));
  sub_10004508C(a1, v4);
  if (v4)
    CFRelease(v4);
}

void sub_10004505C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  CFReadStreamSetDispatchQueue(*(CFReadStreamRef *)(v1 + 8), 0);
  CFWriteStreamSetDispatchQueue(*(CFWriteStreamRef *)(v1 + 16), 0);
}

std::string *sub_10004508C(uint64_t a1, CFErrorRef err)
{
  const __CFString *Domain;
  const char *CStringPtr;
  uint64_t v6;
  size_t v7;
  uint64_t *v8;
  const char *v9;
  uint64_t v10;
  _QWORD *v12;
  CFIndex Code;
  _QWORD *v14;
  CFStringRef v15;
  NSObject *v16;
  uint64_t v17;
  void **v18;
  void *v19[2];
  char v20;
  _QWORD v21[2];
  uint64_t v22;
  _QWORD v23[10];
  char v24;
  uint64_t v25;
  uint8_t buf[4];
  void **v27;

  if (!err || !CFErrorGetCode(err))
    return sub_100043438(a1);
  sub_100042F68((uint64_t)v21);
  sub_100026C60(&v22, (uint64_t)"domain,", 7);
  Domain = CFErrorGetDomain(err);
  CStringPtr = CFStringGetCStringPtr(Domain, 0x8000100u);
  v6 = (uint64_t)CStringPtr;
  if (CStringPtr)
  {
    v7 = strlen(CStringPtr);
    v8 = sub_100026C60(&v22, v6, v7);
    v9 = ",";
    v10 = 1;
  }
  else
  {
    v9 = "unkwn,";
    v10 = 6;
    v8 = &v22;
  }
  sub_100026C60(v8, (uint64_t)v9, v10);
  v12 = sub_100026C60(&v22, (uint64_t)"streamErrCode,", 14);
  Code = CFErrorGetCode(err);
  v14 = (_QWORD *)std::ostream::operator<<(v12, Code);
  sub_100026C60(v14, (uint64_t)",streamErrDescription,", 22);
  v15 = CFErrorCopyDescription(err);
  v16 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
  {
    std::stringbuf::str(v19, v23);
    v18 = v20 >= 0 ? v19 : (void **)v19[0];
    *(_DWORD *)buf = 136446210;
    v27 = v18;
    _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "#supl,err,%{public}s", buf, 0xCu);
    if (v20 < 0)
      operator delete(v19[0]);
  }
  CFRelease(v15);
  sub_100043438(a1);
  *(_QWORD *)((char *)v21
  v22 = v17;
  if (v24 < 0)
    operator delete((void *)v23[8]);
  std::streambuf::~streambuf(v23);
  return (std::string *)std::ios::~ios(&v25);
}

void sub_1000452EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10003C25C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100045314(uint64_t a1)
{
  unsigned __int8 v2;
  NSObject *v3;
  uint64_t v4;
  void (*v5)(void);
  uint64_t result;
  unsigned int *v7;
  const __CFData *v8;
  const __CFData *v9;
  NSObject *v10;
  uint64_t v11;
  uint8_t v12[16];
  uint8_t buf[8];
  int v14;
  int v15;
  CFRange v16;

  v2 = atomic_load((unsigned __int8 *)(a1 + 28));
  if ((v2 & 1) == 0)
  {
    v3 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "#supl connection not open", buf, 2u);
    }
    v14 = 12;
    v4 = *(_QWORD *)(a1 + 288);
    if (v4)
    {
      v5 = *(void (**)(void))(*(_QWORD *)v4 + 48);
LABEL_6:
      v5();
      return 4294967293;
    }
    goto LABEL_15;
  }
  v7 = (unsigned int *)(a1 + 24);
  result = *(unsigned int *)(a1 + 24);
  if ((_DWORD)result == -1)
  {
    v8 = (const __CFData *)CFReadStreamCopyProperty(*(CFReadStreamRef *)(a1 + 8), kCFStreamPropertySocketNativeHandle);
    if (!v8)
    {
      v10 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)v12 = 0;
        _os_log_fault_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "#supl couldn't obtain fd of fReadStream", v12, 2u);
      }
      v15 = 12;
      v11 = *(_QWORD *)(a1 + 288);
      if (v11)
      {
        v5 = *(void (**)(void))(*(_QWORD *)v11 + 48);
        goto LABEL_6;
      }
LABEL_15:
      sub_100025CE8();
    }
    v9 = v8;
    v16.location = 0;
    v16.length = 4;
    CFDataGetBytes(v8, v16, (UInt8 *)(a1 + 24));
    CFRelease(v9);
    return *v7;
  }
  return result;
}

CFIndex sub_100045468(uint64_t a1, uint64_t a2)
{
  UInt8 *v4;
  CFIndex v5;
  BOOL v6;
  NSObject *v7;
  uint64_t v8;
  CFIndex v9;
  unsigned __int8 v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  void *v16;
  void *__p[2];
  uint64_t v18;
  uint8_t buf[4];
  _BOOL4 v20;
  __int16 v21;
  CFIndex v22;

  sub_100045A4C(__p, 0x800uLL);
  v4 = (UInt8 *)__p[0];
  v5 = (char *)__p[1] - (char *)__p[0];
  if (__p[0])
    v6 = __p[1] == __p[0];
  else
    v6 = 1;
  if (v6)
  {
    v7 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240448;
      v20 = v4 == 0;
      v21 = 2050;
      v22 = v5;
      _os_log_fault_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "#supl bad inputs nullBuf,%{public}d,size,%{public}zu", buf, 0x12u);
    }
    *(_DWORD *)buf = 7;
    v8 = *(_QWORD *)(a1 + 288);
    if (v8)
    {
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v8 + 48))(v8, buf);
      v9 = 4294967292;
      goto LABEL_25;
    }
    goto LABEL_35;
  }
  v10 = atomic_load((unsigned __int8 *)(a1 + 28));
  if ((v10 & 1) == 0)
  {
    v11 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "#supl connection not open", buf, 2u);
    }
    *(_DWORD *)buf = 6;
    v12 = *(_QWORD *)(a1 + 288);
    if (v12)
      goto LABEL_14;
    goto LABEL_35;
  }
  if (!CFReadStreamHasBytesAvailable(*(CFReadStreamRef *)(a1 + 8)))
  {
    v14 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#supl CFReadStreamHasBytesAvailable failed", buf, 2u);
    }
    v9 = 0;
    goto LABEL_25;
  }
  v9 = CFReadStreamRead(*(CFReadStreamRef *)(a1 + 8), v4, v5);
  v13 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    v20 = v9;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#supl Read retVal,%{public}d", buf, 8u);
  }
  if ((v9 & 0x80000000) != 0)
  {
    *(_DWORD *)buf = 6;
    v12 = *(_QWORD *)(a1 + 288);
    if (v12)
    {
LABEL_14:
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v12 + 48))(v12, buf);
      v9 = 4294967293;
      goto LABEL_25;
    }
LABEL_35:
    sub_100025CE8();
  }
  SuplPduLog::traceSuplPdu((SuplPduLog *)v4, (const unsigned __int8 *)v9, 1);
  if (!(_DWORD)v9)
  {
LABEL_25:
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    return v9;
  }
  if ((void *)v9 <= (void *)((char *)__p[1] - (char *)__p[0]))
  {
    if ((void *)v9 < (void *)((char *)__p[1] - (char *)__p[0]))
      __p[1] = (char *)__p[0] + v9;
  }
  else
  {
    sub_100003748((unint64_t *)__p, v9 - (unint64_t)((char *)__p[1] - (char *)__p[0]));
  }
  v16 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v16;
    operator delete(v16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  *(_OWORD *)a2 = *(_OWORD *)__p;
  *(_QWORD *)(a2 + 16) = v18;
  return v9;
}

void sub_100045754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100045778(uint64_t a1, UInt8 **a2)
{
  UInt8 *v3;
  UInt8 *v4;
  const unsigned __int8 *v5;
  BOOL v6;
  NSObject *v7;
  uint64_t v8;
  CFIndex v9;
  unsigned __int8 v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  int v15;
  _BOOL4 v16;
  __int16 v17;
  const unsigned __int8 *v18;

  v4 = *a2;
  v3 = a2[1];
  v5 = (const unsigned __int8 *)(v3 - *a2);
  if (*a2)
    v6 = v3 == v4;
  else
    v6 = 1;
  if (v6)
  {
    v7 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_FAULT))
    {
      v15 = 67240448;
      v16 = v4 == 0;
      v17 = 2050;
      v18 = v5;
      _os_log_fault_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "#supl,writeHelper,bad_inputs,nullBuf,%{public}d,size,%{public}zu", (uint8_t *)&v15, 0x12u);
    }
    v15 = 9;
    v8 = *(_QWORD *)(a1 + 288);
    if (!v8)
      goto LABEL_20;
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v8 + 48))(v8, &v15);
    return 4294967292;
  }
  else
  {
    v10 = atomic_load((unsigned __int8 *)(a1 + 28));
    if ((v10 & 1) == 0)
    {
      v11 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v15) = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#supl,writeHelper,not open", (uint8_t *)&v15, 2u);
      }
      goto LABEL_17;
    }
    v9 = CFWriteStreamWrite(*(CFWriteStreamRef *)(a1 + 16), *a2, (CFIndex)v5);
    v12 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
    {
      v15 = 67240192;
      v16 = v9;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#supl,writeHelper,retVal,%{public}d", (uint8_t *)&v15, 8u);
    }
    if ((v9 & 0x80000000) != 0)
    {
LABEL_17:
      v15 = 8;
      v13 = *(_QWORD *)(a1 + 288);
      if (v13)
      {
        (*(void (**)(uint64_t, int *))(*(_QWORD *)v13 + 48))(v13, &v15);
        return 4294967293;
      }
LABEL_20:
      sub_100025CE8();
    }
    SuplPduLog::traceSuplPdu((SuplPduLog *)v4, v5, 0);
  }
  return v9;
}

uint64_t sub_10004596C(uint64_t a1)
{
  unsigned __int8 v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v6;
  uint8_t v7[8];
  int v8;
  int v9;

  v2 = atomic_load((unsigned __int8 *)(a1 + 28));
  if ((v2 & 1) == 0)
  {
    v3 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v7 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#supl,close,not_open", v7, 2u);
    }
    v8 = 11;
    v4 = *(_QWORD *)(a1 + 288);
    if (v4)
    {
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v4 + 48))(v4, &v8);
      return 4294967293;
    }
LABEL_8:
    sub_100025CE8();
  }
  sub_100043438(a1);
  v9 = 10;
  v6 = *(_QWORD *)(a1 + 288);
  if (!v6)
    goto LABEL_8;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v6 + 48))(v6, &v9);
  return 4294967294;
}

void sub_100045A38()
{
  sub_100026BEC("basic_string");
}

_QWORD *sub_100045A4C(_QWORD *a1, size_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_100036A90(a1, a2);
    v4 = (char *)a1[1];
    v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_100045AA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100045ABC()
{
  uint64_t result;

  if (CLP::LogEntry::LogEntry::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CLP::LogEntry::LogEntry::default_instance_ + 8))(CLP::LogEntry::LogEntry::default_instance_);
  result = qword_1001002C0;
  if (qword_1001002C0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_1001002C0 + 8))(qword_1001002C0);
  return result;
}

double sub_100045B00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  int v6;
  uint64_t v7;
  char v8;
  _BYTE v9[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "Sources/Protobuf/Generated/CLPLogEntry.pb.cc", 280);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 44);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 44) & 1) != 0)
    {
      result = *(double *)(a2 + 8);
      *(_DWORD *)(a1 + 44) |= 1u;
      *(double *)(a1 + 8) = result;
      v6 = *(_DWORD *)(a2 + 44);
      if ((v6 & 2) == 0)
      {
LABEL_6:
        if ((v6 & 4) == 0)
          goto LABEL_7;
        goto LABEL_12;
      }
    }
    else if ((*(_BYTE *)(a2 + 44) & 2) == 0)
    {
      goto LABEL_6;
    }
    result = *(double *)(a2 + 16);
    *(_DWORD *)(a1 + 44) |= 2u;
    *(double *)(a1 + 16) = result;
    v6 = *(_DWORD *)(a2 + 44);
    if ((v6 & 4) == 0)
    {
LABEL_7:
      if ((v6 & 8) == 0)
        return result;
      goto LABEL_8;
    }
LABEL_12:
    result = *(double *)(a2 + 24);
    *(_DWORD *)(a1 + 44) |= 4u;
    *(double *)(a1 + 24) = result;
    if ((*(_DWORD *)(a2 + 44) & 8) == 0)
      return result;
LABEL_8:
    v7 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 44) |= 8u;
    *(_QWORD *)(a1 + 32) = v7;
  }
  return result;
}

void sub_100045BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLP::LogEntry::LogEntry_TimeStamp::~LogEntry_TimeStamp(CLP::LogEntry::LogEntry_TimeStamp *this)
{
  *(_QWORD *)this = off_1000F3670;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = off_1000F3670;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

void CLP::LogEntry::LogEntry_TimeStamp::New(CLP::LogEntry::LogEntry_TimeStamp *this)
{
  operator new();
}

uint64_t CLP::LogEntry::LogEntry_TimeStamp::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 44))
  {
    *(_OWORD *)(this + 24) = 0u;
    *(_OWORD *)(this + 8) = 0u;
  }
  *(_DWORD *)(this + 44) = 0;
  return this;
}

uint64_t CLP::LogEntry::LogEntry_TimeStamp::MergePartialFromCodedStream(CLP::LogEntry::LogEntry_TimeStamp *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  _BYTE *v8;
  _BYTE *v9;
  unint64_t v10;
  _BYTE *v11;
  char *v12;
  unint64_t v13;
  unsigned __int8 *v14;
  uint64_t result;
  unint64_t v16;

  while (2)
  {
    v5 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      *((_QWORD *)a2 + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_24;
        v16 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, &v16) & 1) == 0)
          return 0;
        *((_QWORD *)this + 1) = v16;
        *((_DWORD *)this + 11) |= 1u;
        v8 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 != 17)
          continue;
        *((_QWORD *)a2 + 1) = v8 + 1;
        goto LABEL_14;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_24;
LABEL_14:
        v16 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, &v16) & 1) == 0)
          return 0;
        *((_QWORD *)this + 2) = v16;
        *((_DWORD *)this + 11) |= 2u;
        v9 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v9 >= *((_QWORD *)a2 + 2) || *v9 != 25)
          continue;
        *((_QWORD *)a2 + 1) = v9 + 1;
LABEL_19:
        v16 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, &v16) & 1) != 0)
        {
          *((_QWORD *)this + 3) = v16;
          *((_DWORD *)this + 11) |= 4u;
          v11 = (_BYTE *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
          if ((unint64_t)v11 < v10 && *v11 == 32)
          {
            v12 = v11 + 1;
            *((_QWORD *)a2 + 1) = v12;
LABEL_28:
            v16 = 0;
            if ((unint64_t)v12 >= v10 || *v12 < 0)
            {
              result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, &v16);
              if (!(_DWORD)result)
                return result;
              v13 = v16;
              v14 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
              v10 = *((_QWORD *)a2 + 2);
            }
            else
            {
              v13 = *v12;
              v14 = (unsigned __int8 *)(v12 + 1);
              *((_QWORD *)a2 + 1) = v14;
            }
            *((_QWORD *)this + 4) = v13;
            *((_DWORD *)this + 11) |= 8u;
            if (v14 == (unsigned __int8 *)v10 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
            {
              *((_DWORD *)a2 + 8) = 0;
              result = 1;
              *((_BYTE *)a2 + 36) = 1;
              return result;
            }
          }
          continue;
        }
        return 0;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 1)
          goto LABEL_19;
        goto LABEL_24;
      case 4u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_24;
        v12 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        goto LABEL_28;
      default:
        v7 = TagFallback & 7;
LABEL_24:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t CLP::LogEntry::LogEntry_TimeStamp::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 44);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, (int)a2, *(double *)(this + 8), a3);
    v6 = *(_DWORD *)(v5 + 44);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (int)a2, *(double *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_QWORD *)(v5 + 32), (uint64_t)a2, a4);
  }
LABEL_8:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (int)a2, *(double *)(v5 + 24), a3);
  if ((*(_DWORD *)(v5 + 44) & 8) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_QWORD *)(v5 + 32), (uint64_t)a2, a4);
  return this;
}

uint64_t CLP::LogEntry::LogEntry_TimeStamp::ByteSize(wireless_diagnostics::google::protobuf::io::CodedOutputStream **this, unint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;

  v3 = *((unsigned __int8 *)this + 44);
  if (*((_BYTE *)this + 44))
  {
    v4 = (v3 << 31 >> 31) & 9;
    if ((v3 & 2) != 0)
      v4 += 9;
    if ((v3 & 4) != 0)
      v5 = v4 + 9;
    else
      v5 = v4;
    if ((v3 & 8) != 0)
      v5 = v5
         + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(this[4], a2)
         + 1;
  }
  else
  {
    v5 = 0;
  }
  *((_DWORD *)this + 10) = v5;
  return v5;
}

double CLP::LogEntry::LogEntry_TimeStamp::CheckTypeAndMergeFrom(CLP::LogEntry::LogEntry_TimeStamp *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  return sub_100045B00((uint64_t)this, (uint64_t)lpsrc);
}

uint64_t CLP::LogEntry::LogEntry_TimeStamp::IsInitialized(CLP::LogEntry::LogEntry_TimeStamp *this)
{
  return 1;
}

_QWORD *CLP::LogEntry::LogEntry_TimeStamp::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "CLP.LogEntry.LogEntry.TimeStamp");
}

CLP::LogEntry::LogEntry *CLP::LogEntry::LogEntry::LogEntry(CLP::LogEntry::LogEntry *this)
{
  *(_QWORD *)this = off_1000F36E8;
  wireless_diagnostics::google::protobuf::internal::ExtensionSet::ExtensionSet((CLP::LogEntry::LogEntry *)((char *)this + 8));
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  return this;
}

void sub_1000460B4(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void CLP::LogEntry::LogEntry::~LogEntry(CLP::LogEntry::LogEntry *this)
{
  wireless_diagnostics::google::protobuf::internal::ExtensionSet *v2;

  *(_QWORD *)this = off_1000F36E8;
  v2 = (CLP::LogEntry::LogEntry *)((char *)this + 8);
  CLP::LogEntry::LogEntry::SharedDtor(this);
  wireless_diagnostics::google::protobuf::internal::ExtensionSet::~ExtensionSet(v2);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLP::LogEntry::LogEntry::~LogEntry(this);
  operator delete();
}

_QWORD *CLP::LogEntry::LogEntry::SharedDtor(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if ((_QWORD *)CLP::LogEntry::LogEntry::default_instance_ != this)
  {
    v1 = this;
    v2 = this[4];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    this = (_QWORD *)v1[5];
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void CLP::LogEntry::LogEntry::New(CLP::LogEntry::LogEntry *this)
{
  operator new();
}

void sub_1000461C4()
{
  operator delete();
}

uint64_t CLP::LogEntry::LogEntry::Clear(CLP::LogEntry::LogEntry *this)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  uint64_t v5;

  result = wireless_diagnostics::google::protobuf::internal::ExtensionSet::Clear((CLP::LogEntry::LogEntry *)((char *)this + 8));
  LOBYTE(v3) = *((_BYTE *)this + 52);
  if ((_BYTE)v3)
  {
    if ((*((_BYTE *)this + 52) & 1) != 0)
    {
      v4 = *((_QWORD *)this + 4);
      if (v4)
      {
        if (*(_BYTE *)(v4 + 44))
        {
          *(_OWORD *)(v4 + 24) = 0u;
          *(_OWORD *)(v4 + 8) = 0u;
        }
        *(_DWORD *)(v4 + 44) = 0;
        v3 = *((_DWORD *)this + 13);
      }
    }
    if ((v3 & 2) != 0)
    {
      v5 = *((_QWORD *)this + 5);
      if (v5)
      {
        if ((*(_BYTE *)(v5 + 20) & 1) != 0)
        {
          result = *(_QWORD *)(v5 + 8);
          if (result)
            result = proto::gpsd::LogEntry::Clear(result);
        }
        *(_DWORD *)(v5 + 20) = 0;
      }
    }
  }
  *((_DWORD *)this + 13) = 0;
  return result;
}

uint64_t CLP::LogEntry::LogEntry::MergePartialFromCodedStream(CLP::LogEntry::LogEntry *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  wireless_diagnostics::google::protobuf::internal::ExtensionSet *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  CLP::LogEntry::LogEntry_TimeStamp *v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  BOOL v16;
  int v17;
  _BYTE *v18;
  CLP::LogEntry::PrivateData::PrivateDataCapture *v19;
  char *v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  uint64_t result;
  unsigned int v28;
  unsigned int v29;

  v5 = (CLP::LogEntry::LogEntry *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v6 >= *((_QWORD *)a2 + 2) || *v6 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
          *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
          *((_QWORD *)a2 + 1) = v6 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        if (TagFallback >> 3 != 1)
          break;
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_18;
        *((_DWORD *)this + 13) |= 1u;
        v9 = (CLP::LogEntry::LogEntry_TimeStamp *)*((_QWORD *)this + 4);
        if (!v9)
          operator new();
        v28 = 0;
        v10 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v10 >= *((_QWORD *)a2 + 2) || *v10 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v28))return 0;
        }
        else
        {
          v28 = *v10;
          *((_QWORD *)a2 + 1) = v10 + 1;
        }
        v11 = *((_DWORD *)a2 + 14);
        v12 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v11 + 1;
        if (v11 >= v12)
          return 0;
        v13 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v28);
        if (!CLP::LogEntry::LogEntry_TimeStamp::MergePartialFromCodedStream(v9, a2, v14)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v13);
        v15 = *((_DWORD *)a2 + 14);
        v16 = __OFSUB__(v15, 1);
        v17 = v15 - 1;
        if (v17 < 0 == v16)
          *((_DWORD *)a2 + 14) = v17;
        v18 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v18 < *((_QWORD *)a2 + 2) && *v18 == 34)
        {
          *((_QWORD *)a2 + 1) = v18 + 1;
          goto LABEL_33;
        }
      }
      if (TagFallback >> 3 != 4)
        break;
      v8 = TagFallback & 7;
      if (v8 != 2)
        goto LABEL_18;
LABEL_33:
      *((_DWORD *)this + 13) |= 2u;
      v19 = (CLP::LogEntry::PrivateData::PrivateDataCapture *)*((_QWORD *)this + 5);
      if (!v19)
        operator new();
      v29 = 0;
      v20 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v20 >= *((_QWORD *)a2 + 2) || *v20 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v29))
          return 0;
      }
      else
      {
        v29 = *v20;
        *((_QWORD *)a2 + 1) = v20 + 1;
      }
      v21 = *((_DWORD *)a2 + 14);
      v22 = *((_DWORD *)a2 + 15);
      *((_DWORD *)a2 + 14) = v21 + 1;
      if (v21 >= v22)
        return 0;
      v23 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v29);
      if (!CLP::LogEntry::PrivateData::PrivateDataCapture::MergePartialFromCodedStream(v19, a2, v24)
        || !*((_BYTE *)a2 + 36))
      {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v23);
      v25 = *((_DWORD *)a2 + 14);
      v16 = __OFSUB__(v25, 1);
      v26 = v25 - 1;
      if (v26 < 0 == v16)
        *((_DWORD *)a2 + 14) = v26;
      if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      }
    }
    v8 = TagFallback & 7;
LABEL_18:
    if (v8 == 4)
      return 1;
    if ((TagFallback & 0xFFFFFFF8) == 0x10)
    {
      if ((wireless_diagnostics::google::protobuf::internal::ExtensionSet::ParseField(v5, TagFallback, a2, (const wireless_diagnostics::google::protobuf::MessageLite *)CLP::LogEntry::LogEntry::default_instance_) & 1) == 0)return 0;
    }
    else if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) == 0)
    {
      return 0;
    }
  }
}

uint64_t CLP::LogEntry::LogEntry::SerializeWithCachedSizes(CLP::LogEntry::LogEntry *this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v6;
  uint64_t result;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  uint64_t v9;

  if ((*((_BYTE *)this + 52) & 1) != 0)
  {
    v6 = *((_QWORD *)this + 4);
    if (!v6)
      v6 = *(_QWORD *)(CLP::LogEntry::LogEntry::default_instance_ + 32);
    wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v6, a2, a4);
  }
  result = wireless_diagnostics::google::protobuf::internal::ExtensionSet::SerializeWithCachedSizes((CLP::LogEntry::LogEntry *)((char *)this + 8), 2, 3, a2);
  if ((*((_BYTE *)this + 52) & 2) != 0)
  {
    v9 = *((_QWORD *)this + 5);
    if (!v9)
      v9 = *(_QWORD *)(CLP::LogEntry::LogEntry::default_instance_ + 40);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v9, a2, v8);
  }
  return result;
}

uint64_t CLP::LogEntry::LogEntry::ByteSize(CLP::LogEntry::LogEntry *this, unint64_t a2)
{
  int v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream **v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  int v7;
  CLP::LogEntry::PrivateData::PrivateDataCapture *v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  unsigned int v10;
  int v11;
  int v12;
  uint64_t result;

  if (!*((_BYTE *)this + 52))
  {
    v3 = 0;
    goto LABEL_18;
  }
  if ((*((_BYTE *)this + 52) & 1) == 0)
  {
    v3 = 0;
    if ((*((_BYTE *)this + 52) & 2) == 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream **)*((_QWORD *)this + 4);
  if (!v4)
    v4 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream ***)(CLP::LogEntry::LogEntry::default_instance_
                                                                            + 32);
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLP::LogEntry::LogEntry_TimeStamp::ByteSize(v4, a2);
  v6 = (int)v5;
  if (v5 >= 0x80)
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
  else
    v7 = 1;
  v3 = v6 + v7 + 1;
  if ((*((_DWORD *)this + 13) & 2) != 0)
  {
LABEL_12:
    v8 = (CLP::LogEntry::PrivateData::PrivateDataCapture *)*((_QWORD *)this + 5);
    if (!v8)
      v8 = *(CLP::LogEntry::PrivateData::PrivateDataCapture **)(CLP::LogEntry::LogEntry::default_instance_ + 40);
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CLP::LogEntry::PrivateData::PrivateDataCapture::ByteSize(v8, a2);
    v11 = (int)v9;
    if (v9 >= 0x80)
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, v10);
    else
      v12 = 1;
    v3 += v11 + v12 + 1;
  }
LABEL_18:
  result = wireless_diagnostics::google::protobuf::internal::ExtensionSet::ByteSize((CLP::LogEntry::LogEntry *)((char *)this + 8))
         + v3;
  *((_DWORD *)this + 12) = result;
  return result;
}

uint64_t CLP::LogEntry::LogEntry::CheckTypeAndMergeFrom(CLP::LogEntry::LogEntry *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  CLP::LogEntry::PrivateData::PrivateDataCapture *v8;
  const CLP::LogEntry::PrivateData::PrivateDataCapture *v9;
  char v11;
  _BYTE v12[48];

  if (lpsrc == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v12, 3, "Sources/Protobuf/Generated/CLPLogEntry.pb.cc", 521);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v5) = *((_BYTE *)lpsrc + 52);
  if ((_BYTE)v5)
  {
    if ((*((_BYTE *)lpsrc + 52) & 1) != 0)
    {
      *((_DWORD *)this + 13) |= 1u;
      v6 = *((_QWORD *)this + 4);
      if (!v6)
        operator new();
      v7 = *((_QWORD *)lpsrc + 4);
      if (!v7)
        v7 = *(_QWORD *)(CLP::LogEntry::LogEntry::default_instance_ + 32);
      sub_100045B00(v6, v7);
      v5 = *((_DWORD *)lpsrc + 13);
    }
    if ((v5 & 2) != 0)
    {
      *((_DWORD *)this + 13) |= 2u;
      v8 = (CLP::LogEntry::PrivateData::PrivateDataCapture *)*((_QWORD *)this + 5);
      if (!v8)
        operator new();
      v9 = (const CLP::LogEntry::PrivateData::PrivateDataCapture *)*((_QWORD *)lpsrc + 5);
      if (!v9)
        v9 = *(const CLP::LogEntry::PrivateData::PrivateDataCapture **)(CLP::LogEntry::LogEntry::default_instance_ + 40);
      CLP::LogEntry::PrivateData::PrivateDataCapture::MergeFrom(v8, v9);
    }
  }
  return wireless_diagnostics::google::protobuf::internal::ExtensionSet::MergeFrom((CLP::LogEntry::LogEntry *)((char *)this + 8), (const wireless_diagnostics::google::protobuf::MessageLite *)((char *)lpsrc + 8));
}

void sub_10004686C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t CLP::LogEntry::LogEntry::IsInitialized(CLP::LogEntry::LogEntry *this)
{
  return wireless_diagnostics::google::protobuf::internal::ExtensionSet::IsInitialized((CLP::LogEntry::LogEntry *)((char *)this + 8));
}

_QWORD *CLP::LogEntry::LogEntry::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "CLP.LogEntry.LogEntry");
}

uint64_t sub_10004689C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t sub_1000468A4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

void sub_1000468AC(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  CLP::LogEntry::PrivateData *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;

  if ((byte_1001002B8 & 1) == 0)
  {
    byte_1001002B8 = 1;
    v4 = (CLP::LogEntry::PrivateData *)wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (int)"Sources/Protobuf/Generated/CLPLogEntry.pb.cc", a4);
    CLP::LogEntry::PrivateData::protobuf_AddDesc_CLPPrivateDataCapture_2eproto(v4, v5, v6, v7);
    operator new();
  }
}

void sub_100046994()
{
  operator delete();
}

uint64_t sub_1000469B8(uint64_t a1)
{
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void ProtobufLogger::ProtobufLogger(ProtobufLogger *this)
{
  id *v2;
  id *v3;
  float v4;
  char *v5;
  NSObject *v6;
  std::string v7;
  void *v8;
  char v9;
  void *v10;
  char v11;
  std::string v12;
  __int128 __p;
  uint64_t v14;
  double v15;
  uint64_t v16;
  _BYTE v17[56];
  __int128 v18;
  uint64_t v19;

  VendorLogger::generateDefaultConfig((uint64_t)&v7);
  std::string::assign(&v7, "proto");
  std::string::assign(&v12, "bin");
  memset_pattern16(v17, &unk_1000D37A0, 0x24uLL);
  v16 |= 0x40uLL;
  v17[36] = 0;
  v2 = (id *)GpsdPreferences::instance(0);
  GpsdPreferences::protobufLogDirectory(v2, &v18);
  if (SHIBYTE(v14) < 0)
    operator delete((void *)__p);
  __p = v18;
  v14 = v19;
  v3 = (id *)GpsdPreferences::instance(0);
  GpsdPreferences::protobufLogRetentionDays(v3);
  v15 = (float)((float)(v4 * 24.0) * 3600.0);
  VendorLogger::VendorLogger((char *)this, (__int128 *)&v7);
  if (SHIBYTE(v14) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (v11 < 0)
    operator delete(v10);
  if (v9 < 0)
    operator delete(v8);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  *(_OWORD *)((char *)this + 920) = 0u;
  *(_OWORD *)((char *)this + 936) = 0u;
  *(_OWORD *)((char *)this + 904) = 0u;
  *((_QWORD *)this + 119) = 850045863;
  *((_OWORD *)this + 60) = 0u;
  *((_OWORD *)this + 61) = 0u;
  *((_OWORD *)this + 62) = 0u;
  *((_OWORD *)this + 63) = 0u;
  *((_OWORD *)this + 64) = 0u;
  v5 = (char *)operator new(3uLL);
  *((_QWORD *)this + 127) = v5;
  *((_QWORD *)this + 129) = v5 + 3;
  *(_WORD *)v5 = 32126;
  v5[2] = 1;
  *((_QWORD *)this + 128) = v5 + 3;
  v6 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO))
  {
    LOWORD(v7.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#protoLogger,created", (uint8_t *)&v7, 2u);
  }
}

void sub_100046BF8(_Unwind_Exception *a1)
{
  VendorLogger *v1;
  std::mutex *v2;
  void **v3;
  std::mutex *v4;
  void *v6;
  void *v7;

  v4 = v2;
  std::mutex::~mutex(v4);
  v6 = (void *)*((_QWORD *)v1 + 116);
  if (v6)
  {
    *((_QWORD *)v1 + 117) = v6;
    operator delete(v6);
  }
  v7 = *v3;
  if (*v3)
  {
    *((_QWORD *)v1 + 114) = v7;
    operator delete(v7);
  }
  VendorLogger::~VendorLogger(v1);
  _Unwind_Resume(a1);
}

void ProtobufLogger::log(ProtobufLogger *this, const CLP::LogEntry::LogEntry *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *((_QWORD *)a2 + 5);
  if (!v4)
    v4 = *(_QWORD *)(CLP::LogEntry::LogEntry::default_instance_ + 40);
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    v5 = *(_QWORD *)(CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 8);
  if ((*(_BYTE *)(v5 + 52) & 4) != 0)
  {
    v6 = *(_QWORD *)(v5 + 24);
    if (!v6)
      v6 = *(_QWORD *)(proto::gpsd::LogEntry::default_instance_ + 24);
    if (*(_DWORD *)(v6 + 20) == 1)
      VendorLogger::notifyStart(this);
  }
  ProtobufLogger::logInternal(this, a2);
  if ((*(_BYTE *)(v5 + 52) & 8) != 0)
  {
    v7 = *(_QWORD *)(v5 + 32);
    if (!v7)
      v7 = *(_QWORD *)(proto::gpsd::LogEntry::default_instance_ + 32);
    if (*(_DWORD *)(v7 + 16) == 2)
      VendorLogger::notifyStop(this);
  }
}

void ProtobufLogger::logInternal(ProtobufLogger *this, const wireless_diagnostics::google::protobuf::MessageLite *a2)
{
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  std::mutex *v10;
  char *v11;
  unint64_t v12;
  BOOL v13;
  size_t v14;
  unsigned int v15;
  unint64_t *v16;
  char *v17;
  _BYTE *v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  size_t v23;
  NSObject *v24;
  _BYTE *v25;
  size_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  BOOL v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  size_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char v43;
  unint64_t v44;
  char *v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  size_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char v55;
  _BYTE *v56;
  void *v57;
  void **v58;
  uint8_t buf[16];
  _BYTE v60[32];
  _BYTE v61[32];

  v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(*(uint64_t (**)(const wireless_diagnostics::google::protobuf::MessageLite *))(*(_QWORD *)a2 + 72))(a2);
  if ((v4 & 0x80000000) == 0)
  {
    v6 = v4;
    if (v4 >= 0x80)
      v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4, v5);
    else
      v7 = 1;
    v8 = v7;
    v9 = v7 + (unint64_t)v6;
    v10 = (std::mutex *)((char *)this + 952);
    std::mutex::lock((std::mutex *)((char *)this + 952));
    v11 = (char *)*((_QWORD *)this + 113);
    v12 = *((_QWORD *)this + 114) - (_QWORD)v11;
    v13 = v9 + 4 >= v12;
    v14 = v9 + 4 - v12;
    if (v14 != 0 && v13)
    {
      sub_100003748((unint64_t *)this + 113, v14);
      v11 = (char *)*((_QWORD *)this + 113);
    }
    else if (!v13)
    {
      *((_QWORD *)this + 114) = &v11[v9 + 4];
    }
    wireless_diagnostics::google::protobuf::io::ArrayOutputStream::ArrayOutputStream((wireless_diagnostics::google::protobuf::io::ArrayOutputStream *)v61, v11, v9 + 4, -1);
    wireless_diagnostics::google::protobuf::io::CodedOutputStream::CodedOutputStream(v60, v61);
    wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v60, v6);
    if ((wireless_diagnostics::google::protobuf::MessageLite::SerializeToCodedStream(a2, (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v60) & 1) == 0)
    {
      v24 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "#protoLogger,serialize failed", buf, 2u);
      }
LABEL_79:
      wireless_diagnostics::google::protobuf::io::CodedOutputStream::~CodedOutputStream((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v60);
      wireless_diagnostics::google::protobuf::io::ArrayOutputStream::~ArrayOutputStream((wireless_diagnostics::google::protobuf::io::ArrayOutputStream *)v61);
      std::mutex::unlock(v10);
      return;
    }
    v15 = cnlogging::details::CNProtobufStreamChecksum::adler32((char *)this + 904, v8, v6);
    wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteLittleEndian32((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v60, v15);
    v16 = (unint64_t *)((char *)this + 928);
    *((_QWORD *)this + 117) = *((_QWORD *)this + 116);
    sub_100008DCC((unint64_t *)this + 116, v9 + 20);
    v17 = (char *)*((_QWORD *)this + 127);
    v18 = (_BYTE *)*((_QWORD *)this + 128);
    v19 = v18 - v17;
    v20 = *((_QWORD *)this + 118);
    v21 = (char *)*((_QWORD *)this + 116);
    if (v20 - (unint64_t)v21 >= v18 - v17)
    {
      v25 = (_BYTE *)*((_QWORD *)this + 117);
      v26 = v25 - v21;
      if (v25 - v21 < v19)
      {
        v27 = &v17[v26];
        if (v25 != v21)
        {
          memmove(*((void **)this + 116), *((const void **)this + 127), v26);
          v21 = (char *)*((_QWORD *)this + 117);
        }
        if (v18 != v27)
          memmove(v21, v27, v18 - v27);
        v28 = &v21[v18 - v27];
        goto LABEL_32;
      }
    }
    else
    {
      if (v21)
      {
        *((_QWORD *)this + 117) = v21;
        operator delete(v21);
        v20 = 0;
        *v16 = 0;
        *((_QWORD *)this + 117) = 0;
        *((_QWORD *)this + 118) = 0;
      }
      if ((v19 & 0x8000000000000000) != 0)
        sub_100026868();
      v22 = 2 * v20;
      if (2 * v20 <= v19)
        v22 = v18 - v17;
      if (v20 >= 0x3FFFFFFFFFFFFFFFLL)
        v23 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v23 = v22;
      sub_100036A90((_QWORD *)this + 116, v23);
      v21 = (char *)*((_QWORD *)this + 117);
    }
    if (v18 != v17)
      memmove(v21, v17, v18 - v17);
    v28 = &v21[v19];
LABEL_32:
    v58 = (void **)((char *)this + 904);
    *((_QWORD *)this + 117) = v28;
    v29 = *((_QWORD *)this + 113);
    if (*((_QWORD *)this + 114) == v29)
    {
      v45 = v28;
    }
    else
    {
      v30 = 0;
      v31 = 0;
      do
      {
        if (v31 && (*(unsigned __int8 *)(v29 + v30) | 0x20) == 0x7D)
        {
          v32 = *((_QWORD *)this + 118);
          if ((unint64_t)v28 >= v32)
          {
            v34 = *v16;
            v35 = &v28[-*v16];
            v36 = (unint64_t)(v35 + 1);
            if ((uint64_t)(v35 + 1) < 0)
              goto LABEL_81;
            v37 = v32 - v34;
            if (2 * v37 > v36)
              v36 = 2 * v37;
            if (v37 >= 0x3FFFFFFFFFFFFFFFLL)
              v38 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v38 = v36;
            if (v38)
              v39 = (char *)operator new(v38);
            else
              v39 = 0;
            v40 = &v35[(_QWORD)v39];
            v41 = &v35[(_QWORD)v39];
            *v41 = 93;
            v33 = v41 + 1;
            if (v28 != (char *)v34)
            {
              v42 = &v28[~v34];
              do
              {
                v43 = *--v28;
                (v42--)[(_QWORD)v39] = v43;
              }
              while (v28 != (char *)v34);
              v28 = (char *)*v16;
              v40 = v39;
            }
            *((_QWORD *)this + 116) = v40;
            *((_QWORD *)this + 117) = v33;
            *((_QWORD *)this + 118) = &v39[v38];
            if (v28)
              operator delete(v28);
          }
          else
          {
            *v28 = 93;
            v33 = v28 + 1;
          }
          *((_QWORD *)this + 117) = v33;
          v29 = *((_QWORD *)this + 113);
          v28 = v33;
        }
        v44 = *((_QWORD *)this + 118);
        if ((unint64_t)v28 >= v44)
        {
          v46 = *v16;
          v47 = &v28[-*v16];
          v48 = (unint64_t)(v47 + 1);
          if ((uint64_t)(v47 + 1) < 0)
LABEL_81:
            sub_100026868();
          v49 = v44 - v46;
          if (2 * v49 > v48)
            v48 = 2 * v49;
          if (v49 >= 0x3FFFFFFFFFFFFFFFLL)
            v50 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v50 = v48;
          if (v50)
            v51 = (char *)operator new(v50);
          else
            v51 = 0;
          v52 = &v47[(_QWORD)v51];
          v53 = &v47[(_QWORD)v51];
          *v53 = *(_BYTE *)(v29 + v30);
          v45 = v53 + 1;
          if (v28 != (char *)v46)
          {
            v54 = &v28[~v46];
            do
            {
              v55 = *--v28;
              (v54--)[(_QWORD)v51] = v55;
            }
            while (v28 != (char *)v46);
            v28 = (char *)*v16;
            v52 = v51;
          }
          *((_QWORD *)this + 116) = v52;
          *((_QWORD *)this + 117) = v45;
          *((_QWORD *)this + 118) = &v51[v50];
          if (v28)
            operator delete(v28);
        }
        else
        {
          *v28 = *(_BYTE *)(v29 + v30);
          v45 = v28 + 1;
        }
        *((_QWORD *)this + 117) = v45;
        v29 = *((_QWORD *)this + 113);
        v31 = *(_BYTE *)(v29 + v30++) == 126;
        v28 = v45;
      }
      while (*((_QWORD *)this + 114) - v29 > v30);
    }
    VendorLogger::log(this, 6, *((const void **)this + 116), (size_t)&v45[-*((_QWORD *)this + 116)]);
    v56 = (_BYTE *)*((_QWORD *)this + 116);
    v10 = (std::mutex *)((char *)this + 952);
    if (*((_QWORD *)this + 118) - (_QWORD)v56 >= 0x10401uLL)
    {
      v57 = *v58;
      *((_QWORD *)this + 114) = 0;
      *((_QWORD *)this + 115) = 0;
      *v58 = 0;
      if (v57)
      {
        operator delete(v57);
        v56 = (_BYTE *)*v16;
      }
      *v16 = 0;
      *((_QWORD *)this + 117) = 0;
      *((_QWORD *)this + 118) = 0;
      if (v56)
        operator delete(v56);
    }
    goto LABEL_79;
  }
}

void sub_1000471E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  wireless_diagnostics::google::protobuf::io::CodedOutputStream::~CodedOutputStream((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)&a13);
  wireless_diagnostics::google::protobuf::io::ArrayOutputStream::~ArrayOutputStream((wireless_diagnostics::google::protobuf::io::ArrayOutputStream *)&a17);
  std::mutex::unlock(a10);
  _Unwind_Resume(a1);
}

void sub_10004723C(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  wireless_diagnostics::google::protobuf::DescriptorPool *v4;
  uint64_t v5;
  uint64_t FileByName;
  uint64_t v7;
  uint64_t v8;
  char v9;
  void *__p[2];
  char v11;

  sub_100047438(a1, a2, a3, a4);
  v5 = wireless_diagnostics::google::protobuf::DescriptorPool::generated_pool(v4);
  sub_100025B58(__p, "GnssHalNvStore.proto");
  FileByName = wireless_diagnostics::google::protobuf::DescriptorPool::FindFileByName(v5, __p);
  v7 = FileByName;
  if (v11 < 0)
  {
    operator delete(__p[0]);
    if (v7)
      goto LABEL_6;
  }
  else if (FileByName)
  {
    goto LABEL_6;
  }
  wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(__p, 3, "Sources/Protobuf/Generated/GnssHalNvStore.pb.cc", 39);
  v8 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(__p, "CHECK failed: file != NULL: ");
  wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v8);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)__p);
LABEL_6:
  qword_1001002D0 = *(_QWORD *)(v7 + 80);
  operator new();
}

void sub_1000473DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)&__p);
  _Unwind_Resume(a1);
}

void sub_100047438(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  int v4;

  if ((byte_1001002C8 & 1) == 0)
  {
    byte_1001002C8 = 1;
    wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (int)"Sources/Protobuf/Generated/GnssHalNvStore.pb.cc", a4);
    wireless_diagnostics::google::protobuf::DescriptorPool::InternalAddGeneratedFile((wireless_diagnostics::google::protobuf::DescriptorPool *)"\n\x14GnssHalNvStore.proto\x12\rproto.gnsshal\"I\n\aNvStore\x12\x13\n\aversion\x18\x01 \x01(\x05:\x02-1\x12)\n\x05items\x18\x02 \x03(\v2\x1A.proto.gnsshal.NvStoreItem\"\xB9\x01\n\vNvStoreItem\x12\n\n\x02id\x18\x01 \x01(\x03\x12\f\n\x04blob\x18\x02 \x01(\f\x12 \n\x15blob_truncated_sha256\x18\x03 \x01(\r:\x010\x12\x1E\n\x12modification_count\x18\x04 \x01(\x03:\x02-1\x12$\n\x18creation_cf_time_seconds\x18\x05 \x01(\x01:\x02-1\x12(\n\x1Cmodification_cf_time_seconds\x18\x06 \x01(\x01:\x02-1", (const void *)0x12C, v4);
    wireless_diagnostics::google::protobuf::MessageFactory::InternalRegisterGeneratedFile("GnssHalNvStore.proto", sub_1000475BC);
    operator new();
  }
}

void sub_100047508()
{
  operator delete();
}

uint64_t sub_100047548()
{
  uint64_t result;

  if (qword_1001002D8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1001002D8 + 8))(qword_1001002D8);
  if (qword_1001002E0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1001002E0 + 8))(qword_1001002E0);
  if (qword_1001002F0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1001002F0 + 8))(qword_1001002F0);
  result = qword_1001002F8;
  if (qword_1001002F8)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_1001002F8 + 8))(qword_1001002F8);
  return result;
}

uint64_t sub_1000475BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];
  char v6;

  v0 = qword_100100300;
  __dmb(0xBu);
  if (v0 != 2)
  {
    v5[1] = sub_10004723C;
    v6 = 0;
    wireless_diagnostics::google::protobuf::GoogleOnceInitImpl(&qword_100100300, v5);
    wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)v5);
  }
  v1 = qword_1001002D0;
  if (!qword_1001002D8)
    ((void (*)(void))sub_100047438)();
  v2 = wireless_diagnostics::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(v1);
  v3 = qword_1001002E8;
  if (!qword_1001002F0)
    sub_100047438(v2);
  return wireless_diagnostics::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(v3);
}

void sub_10004766C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

proto::gnsshal::NvStore *proto::gnsshal::NvStore::NvStore(proto::gnsshal::NvStore *this)
{
  *(_QWORD *)this = off_1000F3790;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((proto::gnsshal::NvStore *)((char *)this + 8));
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 5) = 0xFFFFFFFFLL;
  *((_DWORD *)this + 12) = 0;
  return this;
}

void sub_1000476C4(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

proto::gnsshal::NvStore *proto::gnsshal::NvStore::NvStore(proto::gnsshal::NvStore *this, const proto::gnsshal::NvStore *a2)
{
  *(_QWORD *)this = off_1000F3790;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((proto::gnsshal::NvStore *)((char *)this + 8));
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 5) = 0xFFFFFFFFLL;
  *((_DWORD *)this + 12) = 0;
  proto::gnsshal::NvStore::MergeFrom(this, a2);
  return this;
}

void sub_100047744(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v2;
  uint64_t *v3;

  sub_1000488E8(v3);
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t proto::gnsshal::NvStore::MergeFrom(proto::gnsshal::NvStore *this, const proto::gnsshal::NvStore *a2)
{
  uint64_t v4;
  uint64_t v5;
  const proto::gnsshal::NvStoreItem *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v12;
  _BYTE v13[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v13, 3, "Sources/Protobuf/Generated/GnssHalNvStore.pb.cc", 336);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v12, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((proto::gnsshal::NvStore *)((char *)this + 16), *((_DWORD *)a2 + 6) + *((_DWORD *)this + 6));
  if (*((int *)a2 + 6) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(const proto::gnsshal::NvStoreItem **)(*((_QWORD *)a2 + 2) + 8 * v5);
      v7 = *((_DWORD *)this + 7);
      v8 = *((int *)this + 6);
      if ((int)v8 >= v7)
      {
        if (v7 == *((_DWORD *)this + 8))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((proto::gnsshal::NvStore *)((char *)this + 16), v7 + 1);
          v7 = *((_DWORD *)this + 7);
        }
        *((_DWORD *)this + 7) = v7 + 1;
        sub_100048888();
      }
      v9 = *((_QWORD *)this + 2);
      *((_DWORD *)this + 6) = v8 + 1;
      proto::gnsshal::NvStoreItem::MergeFrom(*(proto::gnsshal::NvStoreItem **)(v9 + 8 * v8), v6);
      ++v5;
    }
    while (v5 < *((int *)a2 + 6));
  }
  if ((*((_BYTE *)a2 + 48) & 1) != 0)
  {
    v10 = *((_DWORD *)a2 + 10);
    *((_DWORD *)this + 12) |= 1u;
    *((_DWORD *)this + 10) = v10;
  }
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((proto::gnsshal::NvStore *)((char *)this + 8), (const proto::gnsshal::NvStore *)((char *)a2 + 8));
}

void sub_1000478C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void proto::gnsshal::NvStore::~NvStore(proto::gnsshal::NvStore *this)
{
  *(_QWORD *)this = off_1000F3790;
  sub_1000488E8((uint64_t *)this + 2);
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((proto::gnsshal::NvStore *)((char *)this + 8));
  wireless_diagnostics::google::protobuf::Message::~Message(this);
}

{
  proto::gnsshal::NvStore::~NvStore(this);
  operator delete();
}

uint64_t proto::gnsshal::NvStore::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 44) = a2;
  return this;
}

void proto::gnsshal::NvStore::New(proto::gnsshal::NvStore *this)
{
  operator new();
}

void sub_100047980()
{
  operator delete();
}

uint64_t proto::gnsshal::NvStore::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v4;
  uint64_t v5;

  v1 = this;
  if (*(_BYTE *)(this + 48))
    *(_DWORD *)(this + 40) = -1;
  if (*(int *)(this + 24) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8 * v2);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 24));
  }
  v5 = *(_QWORD *)(v1 + 8);
  v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(v1 + 8);
  *((_DWORD *)v4 + 4) = 0;
  *((_DWORD *)v4 + 10) = 0;
  if (v5)
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(v4);
  return this;
}

uint64_t proto::gnsshal::NvStore::MergePartialFromCodedStream(proto::gnsshal::NvStore *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v6;
  unsigned int v7;
  char *v8;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v10;
  char *v11;
  unint64_t v12;
  unsigned int v13;
  _BYTE *v14;
  uint64_t result;
  int v16;
  uint64_t v17;
  uint64_t v18;
  proto::gnsshal::NvStoreItem *v19;
  char *v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v25;
  int v26;
  BOOL v27;
  int v28;
  _BYTE *v29;
  unsigned int v30;
  unsigned int v31;

  v6 = (proto::gnsshal::NvStore *)((char *)this + 16);
  v7 = (_DWORD)this + 8;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v8 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v8;
          *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
          *((_QWORD *)a2 + 1) = v8 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        if (TagFallback >> 3 != 1)
          break;
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_16;
        v30 = 0;
        v11 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v11 >= v12 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v30);
          if (!(_DWORD)result)
            return result;
          v13 = v30;
          v14 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v13 = *v11;
          v14 = v11 + 1;
          *((_QWORD *)a2 + 1) = v14;
        }
        *((_DWORD *)this + 10) = v13;
        *((_DWORD *)this + 12) |= 1u;
        if ((unint64_t)v14 < v12 && *v14 == 18)
          goto LABEL_23;
      }
      if (TagFallback >> 3 != 2)
        break;
      v10 = TagFallback & 7;
      if (v10 != 2)
        goto LABEL_16;
      while (1)
      {
        v16 = *((_DWORD *)this + 7);
        v17 = *((int *)this + 6);
        if ((int)v17 >= v16)
        {
          if (v16 == *((_DWORD *)this + 8))
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v16 + 1);
            v16 = *((_DWORD *)this + 7);
          }
          *((_DWORD *)this + 7) = v16 + 1;
          sub_100048888();
        }
        v18 = *((_QWORD *)this + 2);
        *((_DWORD *)this + 6) = v17 + 1;
        v19 = *(proto::gnsshal::NvStoreItem **)(v18 + 8 * v17);
        v31 = 0;
        v20 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v20 >= *((_QWORD *)a2 + 2) || *v20 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v31))return 0;
        }
        else
        {
          v31 = *v20;
          *((_QWORD *)a2 + 1) = v20 + 1;
        }
        v21 = *((_DWORD *)a2 + 14);
        v22 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v21 + 1;
        if (v21 >= v22)
          return 0;
        v23 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v31);
        if (!proto::gnsshal::NvStoreItem::MergePartialFromCodedStream(v19, a2, v24, v25)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v23);
        v26 = *((_DWORD *)a2 + 14);
        v27 = __OFSUB__(v26, 1);
        v28 = v26 - 1;
        if (v28 < 0 == v27)
          *((_DWORD *)a2 + 14) = v28;
        v14 = (_BYTE *)*((_QWORD *)a2 + 1);
        v29 = (_BYTE *)*((_QWORD *)a2 + 2);
        if (v14 >= v29 || *v14 != 18)
          break;
LABEL_23:
        *((_QWORD *)a2 + 1) = v14 + 1;
      }
      if (v14 == v29 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      }
    }
    v10 = TagFallback & 7;
LABEL_16:
    if (v10 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(a2, TagFallback, v7, a4) & 1) == 0)
      return 0;
  }
}

uint64_t proto::gnsshal::NvStore::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v8;
  _QWORD *v9;

  v5 = this;
  if ((*(_BYTE *)(this + 48) & 1) != 0)
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(this + 40), (int)a2, a4);
  if (*(int *)(v5 + 24) >= 1)
  {
    v6 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 24));
  }
  v9 = *(_QWORD **)(v5 + 8);
  v8 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v5 + 8);
  v7 = v9;
  if (v9)
  {
    if (*v7 != v7[1])
      return wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFields(v8, a2, a3);
  }
  return this;
}

uint64_t proto::gnsshal::NvStore::MergeFrom(proto::gnsshal::NvStore *this, const wireless_diagnostics::google::protobuf::Message *lpsrc)
{
  uint64_t v4;
  const proto::gnsshal::NvStore *v5;
  wireless_diagnostics::google::protobuf::Message *v6;
  char v8;
  _BYTE v9[48];

  if (lpsrc == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "Sources/Protobuf/Generated/GnssHalNvStore.pb.cc", 324);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  if (v5)
    return proto::gnsshal::NvStore::MergeFrom(this, v5);
  else
    return wireless_diagnostics::google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_100047DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t proto::gnsshal::NvStore::CopyFrom(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  if (a2 != result)
  {
    v3 = result;
    (*(void (**)(uint64_t))(*(_QWORD *)result + 32))(result);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 112))(v3, a2);
  }
  return result;
}

uint64_t proto::gnsshal::NvStore::IsInitialized(proto::gnsshal::NvStore *this)
{
  return 1;
}

uint64_t proto::gnsshal::NvStore::GetMetadata(proto::gnsshal::NvStore *this)
{
  uint64_t v1;
  _QWORD v3[2];
  char v4;

  v1 = qword_100100300;
  __dmb(0xBu);
  if (v1 != 2)
  {
    v3[1] = sub_10004723C;
    v4 = 0;
    wireless_diagnostics::google::protobuf::GoogleOnceInitImpl(&qword_100100300, v3);
    wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)v3);
  }
  return qword_1001002D0;
}

void sub_100047ED0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

proto::gnsshal::NvStoreItem *proto::gnsshal::NvStoreItem::NvStoreItem(proto::gnsshal::NvStoreItem *this)
{
  *(_QWORD *)this = off_1000F3840;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((proto::gnsshal::NvStoreItem *)((char *)this + 8));
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 4) = -1;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)((char *)this + 40) = _Q0;
  *((_DWORD *)this + 16) = 0;
  return this;
}

void sub_100047F38(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t proto::gnsshal::NvStoreItem::MergeFrom(proto::gnsshal::NvStoreItem *this, const proto::gnsshal::NvStoreItem *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v8;
  const std::string *v9;
  std::string *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _BYTE v15[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v15, 3, "Sources/Protobuf/Generated/GnssHalNvStore.pb.cc", 730);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v14, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v15);
  }
  LOBYTE(v5) = *((_BYTE *)a2 + 64);
  if (!(_BYTE)v5)
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((proto::gnsshal::NvStoreItem *)((char *)this + 8), (const proto::gnsshal::NvStoreItem *)((char *)a2 + 8));
  if ((*((_BYTE *)a2 + 64) & 1) != 0)
  {
    v8 = *((_QWORD *)a2 + 2);
    *((_DWORD *)this + 16) |= 1u;
    *((_QWORD *)this + 2) = v8;
    v5 = *((_DWORD *)a2 + 16);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0)
        goto LABEL_7;
      goto LABEL_16;
    }
  }
  else if ((*((_BYTE *)a2 + 64) & 2) == 0)
  {
    goto LABEL_6;
  }
  v9 = (const std::string *)*((_QWORD *)a2 + 3);
  *((_DWORD *)this + 16) |= 2u;
  v10 = (std::string *)*((_QWORD *)this + 3);
  if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v10, v9);
  v5 = *((_DWORD *)a2 + 16);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  v11 = *((_DWORD *)a2 + 14);
  *((_DWORD *)this + 16) |= 4u;
  *((_DWORD *)this + 14) = v11;
  v5 = *((_DWORD *)a2 + 16);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
LABEL_18:
    v13 = *((_QWORD *)a2 + 5);
    *((_DWORD *)this + 16) |= 0x10u;
    *((_QWORD *)this + 5) = v13;
    if ((*((_DWORD *)a2 + 16) & 0x20) == 0)
      return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((proto::gnsshal::NvStoreItem *)((char *)this + 8), (const proto::gnsshal::NvStoreItem *)((char *)a2 + 8));
    goto LABEL_10;
  }
LABEL_17:
  v12 = *((_QWORD *)a2 + 4);
  *((_DWORD *)this + 16) |= 8u;
  *((_QWORD *)this + 4) = v12;
  v5 = *((_DWORD *)a2 + 16);
  if ((v5 & 0x10) != 0)
    goto LABEL_18;
LABEL_9:
  if ((v5 & 0x20) != 0)
  {
LABEL_10:
    v6 = *((_QWORD *)a2 + 6);
    *((_DWORD *)this + 16) |= 0x20u;
    *((_QWORD *)this + 6) = v6;
  }
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((proto::gnsshal::NvStoreItem *)((char *)this + 8), (const proto::gnsshal::NvStoreItem *)((char *)a2 + 8));
}

void sub_1000480CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void proto::gnsshal::NvStoreItem::~NvStoreItem(proto::gnsshal::NvStoreItem *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1000F3840;
  v2 = *((_QWORD *)this + 3);
  if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    operator delete();
  }
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((proto::gnsshal::NvStoreItem *)((char *)this + 8));
  wireless_diagnostics::google::protobuf::Message::~Message(this);
}

{
  proto::gnsshal::NvStoreItem::~NvStoreItem(this);
  operator delete();
}

uint64_t proto::gnsshal::NvStoreItem::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 60) = a2;
  return this;
}

void proto::gnsshal::NvStoreItem::New(proto::gnsshal::NvStoreItem *this)
{
  operator new();
}

void sub_1000481C4()
{
  operator delete();
}

wireless_diagnostics::google::protobuf::UnknownFieldSet *proto::gnsshal::NvStoreItem::Clear(proto::gnsshal::NvStoreItem *this)
{
  char v1;
  uint64_t v2;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *result;
  uint64_t v9;

  v1 = *((_BYTE *)this + 64);
  if (v1)
  {
    *((_QWORD *)this + 2) = 0;
    if ((v1 & 2) != 0)
    {
      v2 = *((_QWORD *)this + 3);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
    *((_DWORD *)this + 14) = 0;
    *((_QWORD *)this + 4) = -1;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)((char *)this + 40) = _Q0;
  }
  v9 = *((_QWORD *)this + 1);
  result = (proto::gnsshal::NvStoreItem *)((char *)this + 8);
  *((_DWORD *)result + 14) = 0;
  if (v9)
    return (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(result);
  return result;
}

uint64_t proto::gnsshal::NvStoreItem::MergePartialFromCodedStream(proto::gnsshal::NvStoreItem *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  unsigned int *v6;
  unsigned int v7;
  char *v8;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  _BYTE *v14;
  int v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t result;
  void *v20;
  _BYTE *v21;
  _BYTE *v22;
  unint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  unint64_t v26;

  v6 = (unsigned int *)((char *)this + 56);
  v7 = (_DWORD)this + 8;
  while (2)
  {
    v8 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v8;
      *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      *((_QWORD *)a2 + 1) = v8 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v26 = 0;
        v12 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, &v26);
          if (!(_DWORD)result)
            return result;
          v13 = v26;
          v14 = (_BYTE *)*((_QWORD *)a2 + 1);
          v11 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v13 = *v12;
          v14 = v12 + 1;
          *((_QWORD *)a2 + 1) = v14;
        }
        *((_QWORD *)this + 2) = v13;
        v15 = *((_DWORD *)this + 16) | 1;
        *((_DWORD *)this + 16) = v15;
        if ((unint64_t)v14 < v11 && *v14 == 18)
        {
          *((_QWORD *)a2 + 1) = v14 + 1;
          goto LABEL_30;
        }
        continue;
      case 2u:
        v10 = TagFallback & 7;
        if (v10 != 2)
          goto LABEL_22;
        v15 = *((_DWORD *)this + 16);
LABEL_30:
        *((_DWORD *)this + 16) = v15 | 2;
        v20 = (void *)*((_QWORD *)this + 3);
        if (v20 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(a2, v20);
        if (!(_DWORD)result)
          return result;
        v21 = (_BYTE *)*((_QWORD *)a2 + 1);
        v16 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v21 >= v16 || *v21 != 24)
          continue;
        v17 = v21 + 1;
        *((_QWORD *)a2 + 1) = v17;
LABEL_36:
        if ((unint64_t)v17 >= v16 || *v17 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!(_DWORD)result)
            return result;
          v22 = (_BYTE *)*((_QWORD *)a2 + 1);
          v16 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v6 = *v17;
          v22 = v17 + 1;
          *((_QWORD *)a2 + 1) = v22;
        }
        *((_DWORD *)this + 16) |= 4u;
        if ((unint64_t)v22 >= v16 || *v22 != 32)
          continue;
        v18 = v22 + 1;
        *((_QWORD *)a2 + 1) = v18;
LABEL_44:
        v26 = 0;
        if ((unint64_t)v18 >= v16 || *v18 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, &v26);
          if (!(_DWORD)result)
            return result;
          v23 = v26;
          v24 = (_BYTE *)*((_QWORD *)a2 + 1);
          v16 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v23 = *v18;
          v24 = v18 + 1;
          *((_QWORD *)a2 + 1) = v24;
        }
        *((_QWORD *)this + 4) = v23;
        *((_DWORD *)this + 16) |= 8u;
        if ((unint64_t)v24 >= v16 || *v24 != 41)
          continue;
        *((_QWORD *)a2 + 1) = v24 + 1;
LABEL_52:
        v26 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, &v26) & 1) == 0)
          return 0;
        *((_QWORD *)this + 5) = v26;
        *((_DWORD *)this + 16) |= 0x10u;
        v25 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v25 >= *((_QWORD *)a2 + 2) || *v25 != 49)
          continue;
        *((_QWORD *)a2 + 1) = v25 + 1;
LABEL_56:
        v26 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, &v26) & 1) != 0)
        {
          *((_QWORD *)this + 6) = v26;
          *((_DWORD *)this + 16) |= 0x20u;
          if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
            && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
          {
            *((_DWORD *)a2 + 8) = 0;
            result = 1;
            *((_BYTE *)a2 + 36) = 1;
            return result;
          }
          continue;
        }
        return 0;
      case 3u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v17 = (char *)*((_QWORD *)a2 + 1);
        v16 = *((_QWORD *)a2 + 2);
        goto LABEL_36;
      case 4u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v18 = (char *)*((_QWORD *)a2 + 1);
        v16 = *((_QWORD *)a2 + 2);
        goto LABEL_44;
      case 5u:
        v10 = TagFallback & 7;
        if (v10 == 1)
          goto LABEL_52;
        goto LABEL_22;
      case 6u:
        v10 = TagFallback & 7;
        if (v10 != 1)
          goto LABEL_22;
        goto LABEL_56;
      default:
        v10 = TagFallback & 7;
LABEL_22:
        if (v10 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(a2, TagFallback, v7, a4) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t proto::gnsshal::NvStoreItem::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  _QWORD *v7;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v8;
  _QWORD *v9;

  v5 = this;
  v6 = *(_DWORD *)(this + 64);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 16), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 64);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(2, *(_QWORD *)(v5 + 24), a2);
  v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 56), a2, a4);
  v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_QWORD *)(v5 + 32), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_16:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, (int)a2, *(double *)(v5 + 40), a3);
  if ((*(_DWORD *)(v5 + 64) & 0x20) != 0)
LABEL_7:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, (int)a2, *(double *)(v5 + 48), a3);
LABEL_8:
  v9 = *(_QWORD **)(v5 + 8);
  v8 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v5 + 8);
  v7 = v9;
  if (v9)
  {
    if (*v7 != v7[1])
      return wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFields(v8, a2, a3);
  }
  return this;
}

uint64_t proto::gnsshal::NvStoreItem::MergeFrom(proto::gnsshal::NvStoreItem *this, const wireless_diagnostics::google::protobuf::Message *lpsrc)
{
  uint64_t v4;
  const proto::gnsshal::NvStoreItem *v5;
  wireless_diagnostics::google::protobuf::Message *v6;
  char v8;
  _BYTE v9[48];

  if (lpsrc == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "Sources/Protobuf/Generated/GnssHalNvStore.pb.cc", 718);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  if (v5)
    return proto::gnsshal::NvStoreItem::MergeFrom(this, v5);
  else
    return wireless_diagnostics::google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_100048764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t proto::gnsshal::NvStoreItem::CopyFrom(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  if (a2 != result)
  {
    v3 = result;
    (*(void (**)(uint64_t))(*(_QWORD *)result + 32))(result);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 112))(v3, a2);
  }
  return result;
}

uint64_t proto::gnsshal::NvStoreItem::IsInitialized(proto::gnsshal::NvStoreItem *this)
{
  return 1;
}

uint64_t proto::gnsshal::NvStoreItem::GetMetadata(proto::gnsshal::NvStoreItem *this)
{
  uint64_t v1;
  _QWORD v3[2];
  char v4;

  v1 = qword_100100300;
  __dmb(0xBu);
  if (v1 != 2)
  {
    v3[1] = sub_10004723C;
    v4 = 0;
    wireless_diagnostics::google::protobuf::GoogleOnceInitImpl(&qword_100100300, v3);
    wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)v3);
  }
  return qword_1001002E8;
}

void sub_100048844(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100048858(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_100048860(uint64_t a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
  return v1;
}

uint64_t sub_100048880(uint64_t a1)
{
  return *(unsigned int *)(a1 + 60);
}

void sub_100048888()
{
  operator new();
}

void sub_1000488C4()
{
  operator delete();
}

uint64_t sub_1000488E8(uint64_t *a1)
{
  int v2;
  uint64_t i;
  uint64_t v4;
  uint64_t result;

  v2 = *((_DWORD *)a1 + 3);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*a1 + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v2 = *((_DWORD *)a1 + 3);
      }
    }
  }
  result = *a1;
  if (*a1)
    operator delete[]();
  return result;
}

uint64_t GnssHal::PlatformTimer::PlatformTimer(uint64_t a1, dispatch_queue_t queue)
{
  NSObject *v3;
  NSObject *v5;
  _QWORD v6[5];
  void *__p[2];
  char v8;
  void *v9[2];
  char v10;
  void *v11[2];
  char v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;

  *(_QWORD *)a1 = off_1000F3920;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = queue;
  *(_WORD *)(a1 + 56) = 0;
  v3 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, queue);
  *(_QWORD *)(a1 + 40) = v3;
  if (!v3)
  {
    v5 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "timer,nullptr", buf, 2u);
      v5 = qword_100100838;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v14 = "/Library/Caches/com.apple.xbs/Sources/CoreGPS/Sources/HAL/Implementation/GnssHalTimerImpl.mm";
      v15 = 1026;
      v16 = 15;
      v17 = 2082;
      v18 = "PlatformTimer";
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: assertion failure in %{public}s", buf, 0x1Cu);
    }
    sub_100025B58(v11, "assert");
    sub_100025B58(v9, "PlatformTimer");
    sub_100025B58(__p, "timer,nullptr");
    gpsd::util::triggerDiagnosticReport((uint64_t)v11, (__int128 *)v9, (__int128 *)__p);
    if (v8 < 0)
      operator delete(__p[0]);
    if (v10 < 0)
      operator delete(v9[0]);
    if (v12 < 0)
      operator delete(v11[0]);
    __assert_rtn("PlatformTimer", "GnssHalTimerImpl.mm", 15, "false && \"timer,nullptr\"");
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000027A0;
  v6[3] = &unk_1000F0D30;
  v6[4] = a1;
  dispatch_source_set_event_handler(v3, v6);
  return a1;
}

void sub_100048B7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;
  _QWORD **v32;
  _QWORD *v34;
  uint64_t v35;

  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a31 < 0)
    operator delete(a26);
  v34 = *v32;
  if (*v32 == (_QWORD *)(v31 + 8))
  {
    v35 = 4;
    v34 = (_QWORD *)(v31 + 8);
  }
  else
  {
    if (!v34)
      goto LABEL_12;
    v35 = 5;
  }
  (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_12:
  _Unwind_Resume(exception_object);
}

uint64_t sub_100048C00(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)a1 = off_1000F3920;
  v2 = *(NSObject **)(a1 + 40);
  if (!v2)
    goto LABEL_10;
  v3 = *(_QWORD **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3 == (_QWORD *)(a1 + 8))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 8);
    goto LABEL_6;
  }
  if (v3)
  {
    v4 = 5;
LABEL_6:
    (*(void (**)(_QWORD *))(*v3 + 8 * v4))(v3);
    v2 = *(NSObject **)(a1 + 40);
  }
  if (!*(_BYTE *)(a1 + 56))
  {
    dispatch_resume(v2);
    v2 = *(NSObject **)(a1 + 40);
  }
  dispatch_source_cancel(v2);

  *(_QWORD *)(a1 + 40) = 0;
LABEL_10:
  v5 = *(_QWORD **)(a1 + 32);
  if (v5 == (_QWORD *)(a1 + 8))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 8);
    goto LABEL_14;
  }
  if (v5)
  {
    v6 = 5;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

void sub_100048CC8(uint64_t a1)
{
  sub_100048C00(a1);
  operator delete();
}

_QWORD *sub_100048CEC(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[5];
  _BYTE v10[24];
  _BYTE *v11;

  v2 = *(NSObject **)(a1 + 48);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3321888768;
  v9[2] = sub_100048DB4;
  v9[3] = &unk_1000F3978;
  v9[4] = a1;
  sub_100031BDC((uint64_t)v10, a2);
  dispatch_async(v2, v9);
  result = v11;
  if (v11 == v10)
  {
    v8 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*result + 8 * v8))(result, v3, v4, v5, v6);
}

_QWORD *sub_100048DB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  _QWORD v9[3];

  v1 = *(_QWORD *)(a1 + 32);
  sub_100031BDC((uint64_t)v7, a1 + 40);
  v2 = v1 + 8;
  if (v7 != (_QWORD *)(v1 + 8))
  {
    v3 = v8;
    v4 = *(_QWORD *)(v1 + 32);
    if (v8 == v7)
    {
      if (v4 == v2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v7[0] + 24))(v7, v9);
        (*(void (**)(_QWORD *))(*v8 + 32))(v8);
        v8 = 0;
        (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v1 + 32) + 24))(*(_QWORD *)(v1 + 32), v7);
        (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 32) + 32))(*(_QWORD *)(v1 + 32));
        *(_QWORD *)(v1 + 32) = 0;
        v8 = v7;
        (*(void (**)(_QWORD *, uint64_t))(v9[0] + 24))(v9, v1 + 8);
        (*(void (**)(_QWORD *))(v9[0] + 32))(v9);
      }
      else
      {
        (*(void (**)(_QWORD *, uint64_t))(v7[0] + 24))(v7, v1 + 8);
        (*(void (**)(_QWORD *))(*v8 + 32))(v8);
        v8 = *(_QWORD **)(v1 + 32);
      }
      *(_QWORD *)(v1 + 32) = v2;
    }
    else if (v4 == v2)
    {
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 24))(v1 + 8, v7);
      (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 32) + 32))(*(_QWORD *)(v1 + 32));
      *(_QWORD *)(v1 + 32) = v8;
      v8 = v7;
    }
    else
    {
      v8 = *(_QWORD **)(v1 + 32);
      *(_QWORD *)(v1 + 32) = v3;
    }
  }
  result = v8;
  if (v8 == v7)
  {
    v6 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_100048F70(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_10002579C(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_100048F7C(uint64_t a1, uint64_t a2)
{
  return sub_100031BDC(a1 + 40, a2 + 40);
}

_QWORD *sub_100048F88(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t GnssHal::InterfacesImpl::InterfacesImpl(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = off_1000F39D8;
  v13 = *a2;
  *a2 = 0;
  v14 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v13;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = *a3;
  *a3 = 0;
  v16 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = *a4;
  *a4 = 0;
  v18 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v17;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = *a5;
  *a5 = 0;
  v20 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v19;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = *a6;
  *a6 = 0;
  v22 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v21;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = *a7;
  *a7 = 0;
  v24 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v23;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  return a1;
}

void sub_1000490E0(_QWORD *a1)
{
  sub_10004912C(a1);
  operator delete();
}

void sub_100049108(_QWORD *a1)
{
  sub_10004912C(a1);
  operator delete();
}

_QWORD *sub_10004912C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = off_1000F3A20;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[5];
  a1[5] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[4];
  a1[4] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = a1[3];
  a1[3] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = a1[2];
  a1[2] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = a1[1];
  a1[1] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return a1;
}

uint64_t GnssHal::CommUart::CommUart(uint64_t a1, uint64_t a2)
{
  id *v4;
  __int128 v5;

  *(_QWORD *)a1 = off_1000F3A40;
  v4 = (id *)GpsdPreferences::instance(0);
  *(_BYTE *)(a1 + 8) = GpsdPreferences::verboseCommDataSniffer(v4);
  *(_WORD *)(a1 + 16) = *(_WORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_100031B50((_BYTE *)(a1 + 24), *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
  }
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 56) = -1;
  *(_WORD *)(a1 + 60) = 1;
  *(_QWORD *)(a1 + 64) = 0;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1))
    operator new();
  return a1;
}

void sub_1000494EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  void **v27;
  _QWORD **v28;

  sub_10004B28C(v28, 0);
  if (*(char *)(v26 + 47) < 0)
    operator delete(*v27);
  _Unwind_Resume(a1);
}

uint64_t sub_100049598(uint64_t a1)
{
  *(_QWORD *)a1 = off_1000F3A40;
  sub_100049F7C(a1);
  sub_10004B28C((_QWORD **)(a1 + 64), 0);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_1000495EC(uint64_t a1)
{
  sub_100049598(a1);
  operator delete();
}

BOOL sub_100049610(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void **v4;
  unint64_t v5;
  void **v6;
  int v7;
  NSObject *v8;
  speed_t v9;
  int v10;
  uint64_t v11;
  int v12;
  const char *v13;
  uint8_t *p_handler;
  NSObject *v15;
  uint32_t v16;
  NSObject *v17;
  uint64_t v18;
  void **v20;
  id *v21;
  uint64_t v22;
  int v23;
  NSObject *v24;
  NSObject *v25;
  int v26;
  const char *v27;
  NSObject *v28;
  uint32_t v29;
  tcflag_t v30;
  uint64_t v31;
  int v32;
  NSObject *v33;
  int v34;
  int v35;
  void *v36;
  unint64_t *v37;
  int v38;
  dispatch_source_t v39;
  NSObject *v40;
  unsigned int v41;
  NSObject *v42;
  void *v43;
  int v44;
  int v45;
  NSObject *v46;
  void *__p[2];
  uint64_t v48;
  void *v49[2];
  char v50;
  termios handler;
  _BYTE buf[14];
  _BYTE v53[10];

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1))
  {
    v2 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(handler.c_iflag) = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#comm,already open", (uint8_t *)&handler, 2u);
    }
    return *(_BYTE *)(a1 + 60) != 0;
  }
  v4 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      sub_100031B50(__p, *v4, v5);
      goto LABEL_11;
    }
  }
  else if (*(_BYTE *)(a1 + 47))
  {
    *(_OWORD *)__p = *(_OWORD *)v4;
    v48 = *(_QWORD *)(a1 + 40);
    goto LABEL_11;
  }
  GpsdPlatformInfo::instance(0);
  sub_100025B58(__p, "/dev/cu.gps");
LABEL_11:
  if (v48 >= 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  v7 = open((const char *)v6, 131074);
  *(_DWORD *)(a1 + 56) = v7;
  v8 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
  {
    v20 = __p;
    if (v48 < 0)
      v20 = (void **)__p[0];
    LODWORD(handler.c_iflag) = 136315394;
    *(tcflag_t *)((char *)&handler.c_iflag + 4) = (tcflag_t)v20;
    WORD2(handler.c_oflag) = 1026;
    *(_DWORD *)((char *)&handler.c_oflag + 6) = 131074;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#comm,open,%s,flag,0x%{public}X", (uint8_t *)&handler, 0x12u);
    v7 = *(_DWORD *)(a1 + 56);
  }
  if (v7 == -1)
  {
    v11 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      v12 = *__error();
      LODWORD(handler.c_iflag) = 67240192;
      HIDWORD(handler.c_iflag) = v12;
      v13 = "#comm,open,errno,%{public}d";
      p_handler = (uint8_t *)&handler;
      v15 = v11;
      v16 = 8;
LABEL_24:
      _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, v13, p_handler, v16);
    }
LABEL_29:
    v3 = 0;
    goto LABEL_30;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
    goto LABEL_29;
  if (tcgetattr(*(_DWORD *)(a1 + 56), &handler) == -1)
  {
    v17 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      v23 = *__error();
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v23;
      _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "#comm,configure,tcgetattr failed,%{public}d", buf, 8u);
    }
    *(_BYTE *)(a1 + 60) = 0;
    goto LABEL_29;
  }
  cfmakeraw(&handler);
  handler.c_cc[16] = 0;
  handler.c_cc[17] = *(_BYTE *)(a1 + 17);
  if (!handler.c_cc[17])
  {
    v18 = qword_100100838;
    if (!os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
      goto LABEL_29;
    *(_WORD *)buf = 0;
    v13 = "#comm,configure,timeoutTenthsOfSeconds is 0";
    p_handler = buf;
    v15 = v18;
    v16 = 2;
    goto LABEL_24;
  }
  v9 = 115200;
  v49[0] = (void *)115200;
  if (*(_BYTE *)(a1 + 52))
  {
    v10 = 0;
    switch(*(_DWORD *)(a1 + 48))
    {
      case 0:
        v10 = 0;
        v9 = 9600;
        break;
      case 1:
        goto LABEL_47;
      case 3:
        v22 = 1000000;
        goto LABEL_48;
      case 4:
        goto LABEL_42;
      case 5:
        v22 = 3000000;
        goto LABEL_48;
      case 6:
        goto LABEL_41;
      case 7:
        goto LABEL_38;
      default:
        break;
    }
  }
  else
  {
    if (*(_DWORD *)(GpsdPlatformInfo::instance(0) + 8) == 201)
    {
      v21 = (id *)GpsdPreferences::instance(0);
      if ((GpsdPreferences::baudRate4M8(v21) & 1) != 0)
LABEL_38:
        v22 = 4800000;
      else
LABEL_42:
        v22 = 2400000;
    }
    else if (*(_DWORD *)(GpsdPlatformInfo::instance(0) + 8) == 103
           || *(_DWORD *)(GpsdPlatformInfo::instance(0) + 8) == 106)
    {
LABEL_41:
      v22 = 3200000;
    }
    else
    {
      v24 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = 1;
        _os_log_fault_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "UnsupportedHardware,defaultRate,%d,used", buf, 8u);
      }
LABEL_47:
      v22 = 921600;
    }
LABEL_48:
    v49[0] = (void *)v22;
    v10 = 1;
  }
  if (cfsetspeed(&handler, v9))
  {
    v25 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      v26 = *__error();
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)&buf[4] = v9;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)v53 = v26;
      v27 = "#comm,configure,cfsetspeed failed,%{public}lu,%{public}d";
LABEL_52:
      v28 = v25;
      v29 = 18;
LABEL_78:
      _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, v27, buf, v29);
      goto LABEL_57;
    }
    goto LABEL_57;
  }
  v30 = handler.c_cflag | 0x30300;
  if (!*(_BYTE *)(a1 + 16))
    v30 = handler.c_cflag & 0xFFFFFFFFFFFCFCFFLL | 0x300;
  handler.c_cflag = v30;
  if (tcsetattr(*(_DWORD *)(a1 + 56), 0, &handler))
  {
    v31 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      v45 = *__error();
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v45;
      v27 = "#comm,configure,tcsetattr failed,%{public}d";
      v28 = v31;
      v29 = 8;
      goto LABEL_78;
    }
    goto LABEL_57;
  }
  if (!v10)
  {
LABEL_62:
    v33 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO))
    {
      v34 = *(unsigned __int8 *)(a1 + 16);
      v35 = *(unsigned __int8 *)(a1 + 17);
      v36 = v49[0];
      if (!v10)
        v36 = (void *)v9;
      *(_DWORD *)buf = 67240704;
      *(_DWORD *)&buf[4] = v34;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = v35;
      *(_WORD *)v53 = 2050;
      *(_QWORD *)&v53[2] = v36;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "#comm,configured,flowCtrl,%{public}d,timeoutTenths,%{public}d,baud,%{public}lu", buf, 0x18u);
    }
    v37 = *(unint64_t **)(a1 + 64);
    if (v37)
    {
      v38 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)*v37 + 40))(*v37);
      v39 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_read, v38, 0, (dispatch_queue_t)v37[2]);
      v37[7] = (unint64_t)v39;
      if (!v39)
      {
        v46 = qword_100100838;
        if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
        {
          LOWORD(handler.c_iflag) = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "#comm,async,readSrc,nullptr", (uint8_t *)&handler, 2u);
          v46 = qword_100100838;
        }
        if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
        {
          LODWORD(handler.c_iflag) = 136446722;
          *(tcflag_t *)((char *)&handler.c_iflag + 4) = (tcflag_t)"/Library/Caches/com.apple.xbs/Sources/CoreGPS/Sources/"
                                                                  "HAL/Implementation/GnssHalCommUart.mm";
          WORD2(handler.c_oflag) = 1026;
          *(_DWORD *)((char *)&handler.c_oflag + 6) = 456;
          WORD1(handler.c_cflag) = 2082;
          *(tcflag_t *)((char *)&handler.c_cflag + 4) = (tcflag_t)"open";
          _os_log_error_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: assertion failure in %{public}s", (uint8_t *)&handler, 0x1Cu);
        }
        sub_100025B58(&handler, "assert");
        sub_100025B58(buf, "open");
        sub_100025B58(v49, "#comm,async,readSrc,nullptr");
        gpsd::util::triggerDiagnosticReport((uint64_t)&handler, (__int128 *)buf, (__int128 *)v49);
        if (v50 < 0)
          operator delete(v49[0]);
        if ((v53[9] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        if (SHIBYTE(handler.c_cflag) < 0)
          operator delete((void *)handler.c_iflag);
        __assert_rtn("open", "GnssHalCommUart.mm", 456, "false && \"#comm,async,readSrc,nullptr\"");
      }
      sub_100008DCC(v37 + 8, 0x1000uLL);
      v40 = v37[7];
      handler.c_iflag = (tcflag_t)_NSConcreteStackBlock;
      handler.c_oflag = 3221225472;
      handler.c_cflag = (tcflag_t)sub_10004B200;
      handler.c_lflag = (tcflag_t)&unk_1000F0D30;
      *(_QWORD *)handler.c_cc = v37;
      dispatch_source_set_event_handler(v40, &handler);
      dispatch_resume((dispatch_object_t)v37[7]);
      if (v37[1])
      {
        v41 = *(_DWORD *)(GpsdPlatformInfo::instance(0) + 8) - 103;
        if (v41 <= 4 && ((1 << v41) & 0x19) != 0)
        {
          (*(void (**)(unint64_t))(*(_QWORD *)v37[1] + 16))(v37[1]);
          usleep(0x4E20u);
          (*(void (**)(unint64_t))(*(_QWORD *)v37[1] + 24))(v37[1]);
          usleep(0x186A0u);
          v42 = qword_100100838;
          if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_debug_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "#comm,async,powerOnChip", buf, 2u);
          }
        }
      }
    }
    v3 = 1;
    goto LABEL_30;
  }
  v32 = ioctl(*(_DWORD *)(a1 + 56), 0x80085402uLL, v49);
  v25 = qword_100100838;
  if (v32 != -1)
  {
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134218240;
      *(void **)&buf[4] = v49[0];
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)v53 = v9;
      _os_log_debug_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "#comm,configure,IOSSIOSPEED,%lu,standardSpeed,%lu", buf, 0x16u);
    }
    goto LABEL_62;
  }
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
  {
    v43 = v49[0];
    v44 = *__error();
    *(_DWORD *)buf = 134349312;
    *(_QWORD *)&buf[4] = v43;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)v53 = v44;
    v27 = "#comm,configure,IOSSIOSPEED failed,%{public}lu,%{public}d";
    goto LABEL_52;
  }
LABEL_57:
  v3 = 0;
  *(_BYTE *)(a1 + 60) = 0;
LABEL_30:
  if (SHIBYTE(v48) < 0)
    operator delete(__p[0]);
  return v3;
}

void sub_100049F08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a22 < 0)
    operator delete(__p);
  if (*(char *)(v28 - 57) < 0)
    operator delete(*(void **)(v28 - 80));
  if (a28 < 0)
    operator delete(a23);
  if (a16 < 0)
    operator delete(a11);
  _Unwind_Resume(exception_object);
}

void sub_100049F7C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  NSObject *v5;
  os_log_type_t v6;
  uint32_t v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  _DWORD v11[2];

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1))
  {
    v2 = *(_QWORD *)(a1 + 64);
    if (v2)
      sub_10004A0D4(v2);
    if (close(*(_DWORD *)(a1 + 56)) < 0)
    {
      v9 = qword_100100830;
      if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
      {
        v10 = *__error();
        v11[0] = 67240192;
        v11[1] = v10;
        v4 = "#comm,close,errno,%{public}d";
        v5 = v9;
        v6 = OS_LOG_TYPE_DEFAULT;
        v7 = 8;
        goto LABEL_11;
      }
    }
    else
    {
      v3 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO))
      {
        LOWORD(v11[0]) = 0;
        v4 = "#comm,close,completed";
        v5 = v3;
        v6 = OS_LOG_TYPE_INFO;
        v7 = 2;
LABEL_11:
        _os_log_impl((void *)&_mh_execute_header, v5, v6, v4, (uint8_t *)v11, v7);
      }
    }
    *(_DWORD *)(a1 + 56) = -1;
    return;
  }
  v8 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO))
  {
    LOWORD(v11[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "#comm,close,not open", (uint8_t *)v11, 2u);
  }
}

void sub_10004A0D4(uint64_t a1)
{
  unsigned int v2;
  BOOL v3;
  int v4;
  void *v6;

  if (*(_QWORD *)(a1 + 8))
  {
    v2 = *(_DWORD *)(GpsdPlatformInfo::instance(0) + 8) - 103;
    v3 = v2 > 4;
    v4 = (1 << v2) & 0x19;
    if (!v3 && v4 != 0)
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  }
  dispatch_release(*(dispatch_object_t *)(a1 + 56));
  v6 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  if (v6)
    operator delete(v6);
}

BOOL sub_10004A158(uint64_t a1)
{
  int v2;
  int v3;
  _BOOL8 v4;
  uint64_t v5;
  const char *v6;
  NSObject *v7;
  uint32_t v8;
  NSObject *v9;
  int v11;
  NSObject *v12;
  int v13;
  int *v14;
  char *v15;
  fd_set v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  char *v20;
  __int16 v21;
  int v22;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) & 1) != 0)
  {
    v2 = *(_DWORD *)(a1 + 56);
    memset(&v16, 0, sizeof(v16));
    if (__darwin_check_fd_set_overflow(v2, &v16, 0))
      *(__int32_t *)((char *)v16.fds_bits + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v2;
    v3 = select(v2 + 1, &v16, 0, 0, 0);
    v4 = v3 >= 0;
    if (v3 < 0)
    {
      v11 = *__error();
      v12 = qword_100100838;
      if (v11 == 9)
      {
        if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67240192;
          v18 = v2;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "#comm,select,interrupted,fd,%{public}d", buf, 8u);
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
      {
        v13 = *__error();
        v14 = __error();
        v15 = strerror(*v14);
        *(_DWORD *)buf = 67240706;
        v18 = v13;
        v19 = 2082;
        v20 = v15;
        v21 = 1026;
        v22 = v2;
        v6 = "#comm,select,errno,%{public}d,%{public}s,fd,%{public}d";
        v7 = v12;
        v8 = 24;
        goto LABEL_17;
      }
    }
    else if (*(_BYTE *)(a1 + 61))
    {
      v5 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        v6 = "#comm,rx data while in sleep";
        v7 = v5;
        v8 = 2;
LABEL_17:
        _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, v6, buf, v8);
      }
    }
  }
  else
  {
    v9 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v16.fds_bits[0]) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#comm,waitForDataAvailable,portNotOpen", (uint8_t *)&v16, 2u);
    }
    return 0;
  }
  return v4;
}

uint64_t sub_10004A39C(uint64_t a1, void *a2, size_t a3)
{
  const char *v6;
  const unsigned __int8 *v7;
  int v8;
  NSObject *v9;
  NSObject *v10;
  int v11;
  int v12;
  int v14;
  int v15;
  __int16 v16;
  char *v17;

  if (!*(_BYTE *)(a1 + 60) || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) & 1) == 0)
  {
    v10 = qword_100100830;
    if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
    {
      v11 = *(unsigned __int8 *)(a1 + 60);
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
      v14 = 67240448;
      v15 = v11;
      v16 = 1026;
      LODWORD(v17) = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#comm,read,unavailable,good,%{public}d,open,%{public}d", (uint8_t *)&v14, 0xEu);
    }
    return -1;
  }
  v7 = (const unsigned __int8 *)read(*(_DWORD *)(a1 + 56), a2, a3);
  if (*(_BYTE *)(a1 + 8))
    gpsd::util::logBinaryBytes((gpsd::util *)a2, v7, (uint64_t)"#comm,read", v6);
  if (v7 == (const unsigned __int8 *)-1)
  {
    v8 = *__error();
    v9 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
    {
      v14 = 67240450;
      v15 = v8;
      v16 = 2082;
      v17 = strerror(v8);
      _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#comm,read,errno,%{public}d,%{public}s", (uint8_t *)&v14, 0x12u);
    }
    if (v8 == 35)
      return 0;
    *(_BYTE *)(a1 + 60) = 0;
    return -1;
  }
  return (uint64_t)v7;
}

id sub_10004A548()
{
  id *v0;

  v0 = (id *)GpsdPreferences::instance(0);
  return GpsdPreferences::usesAsyncCommRead(v0);
}

BOOL sub_10004A560(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  _QWORD *v5;
  uint64_t v6;
  uint8_t v8[8];
  _BYTE v9[24];
  _BYTE *v10;

  v2 = *(_QWORD *)(a1 + 64);
  if (v2)
  {
    sub_100031BDC((uint64_t)v9, a2);
    if (*(_QWORD *)(v2 + 48))
    {
      v3 = qword_100100830;
      if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v8 = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#comm,setReadCallback,alreadySet", v8, 2u);
      }
    }
    sub_10004B168((_QWORD *)(v2 + 24), (uint64_t)v9);
    v4 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v8 = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#comm,setReadCallback", v8, 2u);
    }
    v5 = v10;
    if (v10 == v9)
    {
      v6 = 4;
      v5 = v9;
      goto LABEL_11;
    }
    if (v10)
    {
      v6 = 5;
LABEL_11:
      (*(void (**)(void))(*v5 + 8 * v6))();
    }
  }
  return v2 != 0;
}

void sub_10004A69C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

BOOL sub_10004A6DC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v6 = 0;
  do
  {
    v7 = v6;
    if (a3 <= v6)
      break;
    v8 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)a1 + 56))(a1, a2 + v6, a3 - v6);
    v6 = v8 + v7;
  }
  while ((v8 & 0x8000000000000000) == 0);
  return a3 == v7;
}

unint64_t sub_10004A73C(uint64_t a1, gpsd::util *this, unsigned __int8 *a3, const char *a4)
{
  unint64_t v7;
  unint64_t v8;
  NSObject *v9;
  NSObject *v10;
  int v12;
  NSObject *v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  _BYTE v18[10];
  int v19;

  if (*(_BYTE *)(a1 + 8))
    gpsd::util::logBinaryBytes(this, a3, (uint64_t)"#comm,write", a4);
  if (!*(_BYTE *)(a1 + 60) || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) & 1) == 0)
  {
    v10 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
    {
      v15 = *(unsigned __int8 *)(a1 + 60);
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
      v17 = 67240448;
      *(_DWORD *)v18 = v15;
      *(_WORD *)&v18[4] = 1026;
      *(_DWORD *)&v18[6] = v16;
      _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#comm,write,unavailable,good,%{public}d,open,%{public}d", (uint8_t *)&v17, 0xEu);
    }
    return -1;
  }
  v7 = write(*(_DWORD *)(a1 + 56), this, (size_t)a3);
  if (v7 != -1)
  {
    v8 = v7;
    if (v7 < (unint64_t)a3)
    {
      v9 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
      {
        v17 = 134349312;
        *(_QWORD *)v18 = a3;
        *(_WORD *)&v18[8] = 1026;
        v19 = v8;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#comm,write,overflow,toWrite,%{public}zu,done,%{public}d,retry", (uint8_t *)&v17, 0x12u);
      }
    }
    return v8;
  }
  v12 = *__error();
  if (v12 != 35)
  {
    *(_BYTE *)(a1 + 60) = 0;
    v14 = qword_100100830;
    if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
    {
      v17 = 67240192;
      *(_DWORD *)v18 = v12;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#comm,write,errno,%{public}d", (uint8_t *)&v17, 8u);
    }
    return -1;
  }
  v13 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
  {
    v17 = 67240192;
    *(_DWORD *)v18 = 35;
    _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#comm,write,errno,%{public}d", (uint8_t *)&v17, 8u);
  }
  return 0;
}

BOOL sub_10004A98C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v6 = 0;
  do
  {
    v7 = v6;
    if (a3 <= v6)
      break;
    v8 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)a1 + 88))(a1, a2 + v6, a3 - v6);
    v6 = v8 + v7;
  }
  while ((v8 & 0x8000000000000000) == 0);
  return a3 == v7;
}

BOOL sub_10004A9EC(uint64_t a1)
{
  _BOOL8 v2;
  NSObject *v3;
  uint8_t v5[16];
  uint8_t buf[16];

  v2 = sub_10004AAB4(a1, 0);
  v3 = qword_100100838;
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#comm,enterLowPowerMode,success", buf, 2u);
    }
    *(_BYTE *)(a1 + 61) = 1;
  }
  else if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v5 = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#comm,enterLowPowerMode,failure", v5, 2u);
  }
  return v2;
}

BOOL sub_10004AAB4(uint64_t a1, int a2)
{
  NSObject *v4;
  NSObject *v5;
  _BOOL8 result;
  int v7;
  int v8;
  int v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  int v13;

  v4 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67240192;
    v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#comm,setRtsState,%{public}d", buf, 8u);
  }
  v9 = 4;
  if (a2 != 1)
  {
    if (!a2 && ioctl(*(_DWORD *)(a1 + 56), 0x8004746BuLL, &v9) < 0)
    {
      v5 = qword_100100838;
      result = os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR);
      if (result)
      {
        v7 = *__error();
        *(_DWORD *)buf = 67240448;
        v11 = 0;
        v12 = 1026;
        v13 = v7;
LABEL_13:
        _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#comm,setRtsState,%{public}d,ioctl error,%{public}d", buf, 0xEu);
        return 0;
      }
      return result;
    }
    return 1;
  }
  if ((ioctl(*(_DWORD *)(a1 + 56), 0x8004746CuLL, &v9) & 0x80000000) == 0)
    return 1;
  v5 = qword_100100838;
  result = os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v8 = *__error();
    *(_DWORD *)buf = 67240448;
    v11 = 1;
    v12 = 1026;
    v13 = v8;
    goto LABEL_13;
  }
  return result;
}

BOOL sub_10004AC64(uint64_t a1)
{
  _BOOL8 v2;
  NSObject *v3;
  uint8_t v5[16];
  uint8_t buf[16];

  v2 = sub_10004AAB4(a1, 1);
  v3 = qword_100100838;
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#comm,exitLowPowerMode,success", buf, 2u);
    }
    *(_BYTE *)(a1 + 61) = 0;
  }
  else if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v5 = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#comm,exitLowPowerMode,failure", v5, 2u);
  }
  return v2;
}

BOOL sub_10004AD28(uint64_t a1)
{
  NSObject *v2;
  int v3;
  _BOOL8 result;
  NSObject *v5;
  NSObject *v6;
  _DWORD v7[2];

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) & 1) != 0)
  {
    if (tcflush(*(_DWORD *)(a1 + 56), 3))
    {
      v2 = qword_100100830;
      if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
      {
        v3 = *__error();
        v7[0] = 67240192;
        v7[1] = v3;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#comm,readWriteFlush,TCIOFLUSH error,%{public}d", (uint8_t *)v7, 8u);
      }
      result = 0;
      *(_BYTE *)(a1 + 60) = 0;
    }
    else
    {
      v6 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v7[0]) = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#comm,readWriteFlush,success", (uint8_t *)v7, 2u);
      }
      return 1;
    }
  }
  else
  {
    v5 = qword_100100838;
    result = os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO);
    if (result)
    {
      LOWORD(v7[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "#comm,readWriteFlush,not open", (uint8_t *)v7, 2u);
      return 0;
    }
  }
  return result;
}

BOOL sub_10004AE88(uint64_t a1)
{
  int v2;
  NSObject *v3;
  int v4;
  _BOOL8 result;
  NSObject *v6;
  _DWORD v7[2];

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) & 1) != 0)
  {
    v2 = tcflush(*(_DWORD *)(a1 + 56), 1);
    v3 = qword_100100838;
    if (v2)
    {
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO))
      {
        v4 = *__error();
        v7[0] = 67240192;
        v7[1] = v4;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "#comm,readFlush,TCIFLUSH error,%{public}d", (uint8_t *)v7, 8u);
      }
      result = 0;
      *(_BYTE *)(a1 + 60) = 0;
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v7[0]) = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#comm,readFlush,success", (uint8_t *)v7, 2u);
      }
      return 1;
    }
  }
  else
  {
    v6 = qword_100100838;
    result = os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO);
    if (result)
    {
      LOWORD(v7[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#comm,readFlush,not open", (uint8_t *)v7, 2u);
      return 0;
    }
  }
  return result;
}

__n128 sub_10004AFE0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  __n128 result;
  NSObject *v10;
  __n128 v11;
  char v12;
  uint8_t buf[16];
  char v14;

  v4 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#comm,CommUart::pulseTimeMarkStrobe", buf, 2u);
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  v5 = *(_QWORD *)(a1 + 64);
  if (v5)
  {
    v6 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#comm,CommUart::AsyncReader::pulseTimeMarkStrobe", buf, 2u);
    }
    v11 = 0uLL;
    v12 = 0;
    v7 = *(_QWORD *)(v5 + 8);
    if (v7)
    {
      (*(void (**)(uint8_t *__return_ptr))(*(_QWORD *)v7 + 48))(buf);
      v11 = *(__n128 *)buf;
      v12 = v14;
    }
    else
    {
      v10 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#comm,fGpio,null", buf, 2u);
      }
    }
    result = v11;
    *(__n128 *)a2 = v11;
    *(_BYTE *)(a2 + 16) = v12;
  }
  else
  {
    v8 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#comm,fAsyncReader,null", buf, 2u);
    }
  }
  return result;
}

_QWORD *sub_10004B168(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100031BDC((uint64_t)v6, a2);
  sub_10004B334(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

uint64_t sub_10004B200(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  v1 = *(_QWORD **)(a1 + 32);
  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v1 + 56))(*v1, v1[8], v1[10] - v1[8]);
  if (result >= 1)
  {
    if (v1[6])
      return sub_100018834((uint64_t)(v1 + 3), v1[8], result);
  }
  return result;
}

BOOL sub_10004B260(uint64_t a1)
{
  return *(_DWORD *)(a1 + 56) != -1;
}

uint64_t sub_10004B270(uint64_t a1)
{
  return *(unsigned int *)(a1 + 56);
}

double sub_10004B278(uint64_t a1, double a2)
{
  LOBYTE(a2) = *(_BYTE *)(a1 + 17);
  return (double)*(unint64_t *)&a2 * 10.0;
}

_QWORD **sub_10004B28C(_QWORD **result, _QWORD *a2)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    sub_10004A0D4((uint64_t)v2);
    v3 = (void *)v2[8];
    if (v3)
    {
      v2[9] = v3;
      operator delete(v3);
    }
    v4 = (_QWORD *)v2[6];
    if (v4 == v2 + 3)
    {
      v5 = 4;
      v4 = v2 + 3;
    }
    else
    {
      if (!v4)
        goto LABEL_10;
      v5 = 5;
    }
    (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_10:
    v6 = v2[1];
    v2[1] = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    operator delete();
  }
  return result;
}

_QWORD *sub_10004B334(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10004B49C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10002579C(a1);
}

uint64_t CLP::LogEntry::PrivateData::protobuf_ShutdownFile_CLPPrivateDataCapture_2eproto(CLP::LogEntry::PrivateData *this)
{
  uint64_t result;

  result = CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_;
  if (CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                              + 8))(CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_);
  return result;
}

void CLP::LogEntry::PrivateData::protobuf_AddDesc_CLPPrivateDataCapture_2eproto(CLP::LogEntry::PrivateData *this, uint64_t a2, uint64_t a3, const char *a4)
{
  CLP::LogEntry::PrivateData *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  proto::gpsd *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;

  if ((byte_100100850 & 1) == 0)
  {
    byte_100100850 = 1;
    v4 = (CLP::LogEntry::PrivateData *)wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (int)"Sources/Protobuf/Generated/CLPPrivateDataCapture.pb.cc", a4);
    CLP::LogEntry::PrivateData::protobuf_AddDesc_CLPGnssMeasApi_2eproto(v4, v5, v6, v7);
    proto::gpsd::protobuf_AddDesc_GpsdProtocol_2eproto(v8, v9, v10, v11);
    operator new();
  }
}

void CLP::LogEntry::PrivateData::PrivateDataCapture::MergeFrom(CLP::LogEntry::PrivateData::PrivateDataCapture *this, const CLP::LogEntry::PrivateData::PrivateDataCapture *a2)
{
  uint64_t v4;
  proto::gpsd::LogEntry *v5;
  const proto::gpsd::LogEntry *v6;
  char v7;
  _BYTE v8[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v8, 3, "Sources/Protobuf/Generated/CLPPrivateDataCapture.pb.cc", 200);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    *((_DWORD *)this + 5) |= 1u;
    v5 = (proto::gpsd::LogEntry *)*((_QWORD *)this + 1);
    if (!v5)
      operator new();
    v6 = (const proto::gpsd::LogEntry *)*((_QWORD *)a2 + 1);
    if (!v6)
      v6 = *(const proto::gpsd::LogEntry **)(CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 8);
    proto::gpsd::LogEntry::MergeFrom(v5, v6);
  }
}

void sub_10004B65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CLP::LogEntry::PrivateData::PrivateDataCapture::~PrivateDataCapture(CLP::LogEntry::PrivateData::PrivateDataCapture *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1000F3B10;
  if ((CLP::LogEntry::PrivateData::PrivateDataCapture *)CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CLP::LogEntry::PrivateData::PrivateDataCapture::~PrivateDataCapture(this);
  operator delete();
}

void CLP::LogEntry::PrivateData::PrivateDataCapture::New(CLP::LogEntry::PrivateData::PrivateDataCapture *this)
{
  operator new();
}

uint64_t CLP::LogEntry::PrivateData::PrivateDataCapture::Clear(uint64_t this)
{
  uint64_t v1;

  v1 = this;
  if ((*(_BYTE *)(this + 20) & 1) != 0)
  {
    this = *(_QWORD *)(this + 8);
    if (this)
      this = proto::gpsd::LogEntry::Clear(this);
  }
  *(_DWORD *)(v1 + 20) = 0;
  return this;
}

uint64_t CLP::LogEntry::PrivateData::PrivateDataCapture::MergePartialFromCodedStream(CLP::LogEntry::PrivateData::PrivateDataCapture *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  proto::gpsd::LogEntry *v7;
  char *v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  BOOL v14;
  int v15;
  uint64_t result;
  unsigned int v17;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
        *((_QWORD *)a2 + 1) = v5 + 1;
      }
      if ((_DWORD)TagFallback != 8034)
        break;
      *((_DWORD *)this + 5) |= 1u;
      v7 = (proto::gpsd::LogEntry *)*((_QWORD *)this + 1);
      if (!v7)
        operator new();
      v17 = 0;
      v8 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v17))
          return 0;
      }
      else
      {
        v17 = *v8;
        *((_QWORD *)a2 + 1) = v8 + 1;
      }
      v9 = *((_DWORD *)a2 + 14);
      v10 = *((_DWORD *)a2 + 15);
      *((_DWORD *)a2 + 14) = v9 + 1;
      if (v9 >= v10)
        return 0;
      v11 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v17);
      if (!proto::gpsd::LogEntry::MergePartialFromCodedStream(v7, a2, v12) || !*((_BYTE *)a2 + 36))
        return 0;
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v11);
      v13 = *((_DWORD *)a2 + 14);
      v14 = __OFSUB__(v13, 1);
      v15 = v13 - 1;
      if (v15 < 0 == v14)
        *((_DWORD *)a2 + 14) = v15;
      if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) == 0)
      return 0;
  }
  return 1;
}

uint64_t CLP::LogEntry::PrivateData::PrivateDataCapture::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;

  if ((*(_BYTE *)(this + 20) & 1) != 0)
  {
    v5 = *(_QWORD *)(this + 8);
    if (!v5)
      v5 = *(_QWORD *)(CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 8);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3EC, v5, a2, a4);
  }
  return this;
}

uint64_t CLP::LogEntry::PrivateData::PrivateDataCapture::ByteSize(CLP::LogEntry::PrivateData::PrivateDataCapture *this, unint64_t a2)
{
  uint64_t result;
  proto::gpsd::LogEntry *v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  unsigned int v6;
  int v7;
  int v8;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v4 = (proto::gpsd::LogEntry *)*((_QWORD *)this + 1);
    if (!v4)
      v4 = *(proto::gpsd::LogEntry **)(CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 8);
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gpsd::LogEntry::ByteSize(v4, a2);
    v7 = (int)v5;
    if (v5 >= 0x80)
      v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, v6);
    else
      v8 = 1;
    result = (v7 + v8 + 2);
  }
  else
  {
    result = 0;
  }
  *((_DWORD *)this + 4) = result;
  return result;
}

void CLP::LogEntry::PrivateData::PrivateDataCapture::CheckTypeAndMergeFrom(CLP::LogEntry::PrivateData::PrivateDataCapture *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  CLP::LogEntry::PrivateData::PrivateDataCapture::MergeFrom(this, lpsrc);
}

uint64_t CLP::LogEntry::PrivateData::PrivateDataCapture::IsInitialized(CLP::LogEntry::PrivateData::PrivateDataCapture *this)
{
  return 1;
}

_QWORD *CLP::LogEntry::PrivateData::PrivateDataCapture::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "CLP.LogEntry.PrivateData.PrivateDataCapture");
}

uint64_t sub_10004BA40(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

_QWORD *sub_10004BA4C(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)a1[3];
  if (v2 == a1)
  {
    v3 = 4;
    v2 = a1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

_QWORD *sub_10004BA98(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)a1[3];
  if (v2 == a1)
  {
    v3 = 4;
    v2 = a1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

uint64_t GnssHal::CommPcie::CommPcie(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t v10[24];
  uint8_t *v11;
  _QWORD v12[3];

  *(_QWORD *)a1 = off_1000F3BA0;
  *(_BYTE *)(a1 + 96) = 0;
  sub_100031BDC(a1 + 104, a3);
  if (qword_100100320)
  {
    v5 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v10 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#pcie,sReadCallbackFunction collision", v10, 2u);
    }
  }
  sub_100031BDC((uint64_t)v10, a2);
  v6 = (uint64_t)v11;
  v7 = (uint8_t *)qword_100100340;
  if (v11 == v10)
  {
    if ((uint64_t *)qword_100100340 == &qword_100100328)
    {
      (*(void (**)(uint8_t *, _QWORD *))(*(_QWORD *)v10 + 24))(v10, v12);
      (*(void (**)(uint8_t *))(*(_QWORD *)v11 + 32))(v11);
      v11 = 0;
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)qword_100100340 + 24))(qword_100100340, v10);
      (*(void (**)(uint64_t))(*(_QWORD *)qword_100100340 + 32))(qword_100100340);
      qword_100100340 = 0;
      v11 = v10;
      (*(void (**)(_QWORD *, uint64_t *))(v12[0] + 24))(v12, &qword_100100328);
      (*(void (**)(_QWORD *))(v12[0] + 32))(v12);
      qword_100100340 = (uint64_t)&qword_100100328;
      v7 = v11;
    }
    else
    {
      (*(void (**)(uint8_t *, uint64_t *))(*(_QWORD *)v10 + 24))(v10, &qword_100100328);
      (*(void (**)(uint8_t *))(*(_QWORD *)v11 + 32))(v11);
      v7 = (uint8_t *)qword_100100340;
      v11 = (uint8_t *)qword_100100340;
      qword_100100340 = (uint64_t)&qword_100100328;
    }
  }
  else
  {
    if ((uint64_t *)qword_100100340 == &qword_100100328)
    {
      v7 = v10;
      (*(void (**)(void))(qword_100100328 + 24))();
      (*(void (**)(uint64_t))(*(_QWORD *)qword_100100340 + 32))(qword_100100340);
      qword_100100340 = (uint64_t)v11;
      v11 = v10;
      v8 = 4;
LABEL_15:
      (*(void (**)(uint8_t *))(*(_QWORD *)v7 + 8 * v8))(v7);
      return a1;
    }
    v11 = (uint8_t *)qword_100100340;
    qword_100100340 = v6;
  }
  if (v7 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_15;
  }
  if (v7)
  {
    v8 = 5;
    goto LABEL_15;
  }
  return a1;
}

void sub_10004BD2C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_10002579C(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10004BD78(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  NSObject *v6;
  _QWORD *v7;
  uint64_t v8;
  uint8_t v10[16];
  uint8_t v11[16];
  uint8_t buf[16];

  *(_QWORD *)a1 = off_1000F3BA0;
  sub_10004C808();
  v2 = (uint64_t *)qword_100100340;
  qword_100100340 = 0;
  if (v2 == &qword_100100328)
  {
    v3 = 4;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (*(_BYTE *)(a1 + 96))
  {
    v4 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#pcie,freeInternal", buf, 2u);
    }
    v5 = TelephonyUtilTransportFree(a1 + 8);
    v6 = qword_100100838;
    if (v5)
    {
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#pcie,freeInternal,success", v11, 2u);
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v10 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#pcie,freeInternal,failure", v10, 2u);
    }
    *(_BYTE *)(a1 + 96) = 0;
  }
  v7 = *(_QWORD **)(a1 + 128);
  if (v7 == (_QWORD *)(a1 + 104))
  {
    v8 = 4;
    v7 = (_QWORD *)(a1 + 104);
    goto LABEL_19;
  }
  if (v7)
  {
    v8 = 5;
LABEL_19:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

void sub_10004BEF8(uint64_t a1)
{
  sub_10004BD78(a1);
  operator delete();
}

uint64_t sub_10004BF1C(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  _BOOL4 v4;
  _DWORD v6[2];

  sub_10004B168(qword_100100308, a2);
  v3 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a2 + 24) != 0;
    v6[0] = 67240192;
    v6[1] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#pcie,setReadCallback,%{public}d", (uint8_t *)v6, 8u);
  }
  return 1;
}

uint64_t sub_10004BFD4(uint64_t a1)
{
  return sub_10004BFDC(a1, 30);
}

uint64_t sub_10004BFDC(uint64_t a1, int a2)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v6;
  char v7;
  uint8_t v9[8];
  _QWORD v10[5];
  uint8_t buf[4];
  int v12;
  _QWORD *v13;
  int v14;
  int v15;
  uint64_t v16;
  Block_layout *v17;
  Block_layout *v18;
  int v19;

  v2 = qword_100100838;
  if (*(_BYTE *)(a1 + 96))
  {
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#pcie,open,already open", buf, 2u);
    }
    return 1;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67240192;
      v12 = a2;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#pcie,open,creating,timeout,%{public}d", buf, 8u);
    }
    TelephonyBasebandPCITransportInitParameters(buf);
    *(_DWORD *)buf = 14;
    v14 = 1000 * a2;
    v15 |= 5u;
    v16 = 0x100000000004;
    v19 = 25;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10004C1F8;
    v10[3] = &unk_1000F3C40;
    v10[4] = a1;
    v13 = v10;
    v17 = &stru_1000F3C80;
    v18 = &stru_1000F3CA0;
    v3 = TelephonyBasebandPCITransportCreate(a1 + 8, buf);
    v6 = qword_100100838;
    if ((_DWORD)v3)
    {
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#pcie,open,success", v9, 2u);
      }
      v7 = 1;
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v9 = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#pcie,open,failure", v9, 2u);
      }
      v7 = 0;
    }
    *(_BYTE *)(a1 + 96) = v7;
  }
  return v3;
}

void sub_10004C1F8(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  NSObject *v8;
  const std::string::value_type *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  std::string *v13;
  uint64_t *v14;
  uint64_t v15;
  std::string __p;
  std::string v17;
  uint8_t buf[4];
  _BYTE v19[24];

  v6 = *(_QWORD *)(a1 + 32);
  memset(&v17, 0, sizeof(v17));
  if (a2)
  {
    if (a2 == 1)
    {
      v8 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134283777;
        *(_QWORD *)v19 = a3;
        *(_WORD *)&v19[8] = 2049;
        *(_QWORD *)&v19[10] = a4;
        _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#pcie,statusBlock,PCITransportStatusError,%{private}p,%{private}p", buf, 0x16u);
      }
      v9 = "#pcie_TransportStatusError";
    }
    else
    {
      v11 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67240705;
        *(_DWORD *)v19 = a2;
        *(_WORD *)&v19[4] = 2049;
        *(_QWORD *)&v19[6] = a3;
        *(_WORD *)&v19[14] = 2049;
        *(_QWORD *)&v19[16] = a4;
        _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#pcie,statusBlock,Unrecognized status 0x%{public}08x,%{private}p,%{private}p", buf, 0x1Cu);
      }
      v9 = "#pcie_UnknownStatus";
    }
  }
  else
  {
    v10 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134283777;
      *(_QWORD *)v19 = a3;
      *(_WORD *)&v19[8] = 2049;
      *(_QWORD *)&v19[10] = a4;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#pcie,statusBlock,PCITransportStatusNotReady,%{private}p,%{private}p", buf, 0x16u);
    }
    v9 = "#pcie_TransportStatusNotReady";
  }
  std::string::assign(&v17, v9);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  if (!qword_100100340)
    exit(-1);
  v12 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    v13 = &v17;
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v13 = (std::string *)v17.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v19 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#pcie,invoking exit callback,%{public}s", buf, 0xCu);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    sub_100031B50(&__p, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
  else
    __p = v17;
  if (!qword_100100340)
    sub_100025CE8();
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)qword_100100340 + 48))(qword_100100340, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v14 = (uint64_t *)qword_100100340;
  qword_100100340 = 0;
  if (v14 == &qword_100100328)
  {
    v15 = 4;
  }
  else
  {
    if (!v14)
      goto LABEL_28;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_28:
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
}

void sub_10004C4D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_10004C508(id a1, int a2, void *a3, unsigned int a4)
{
  uint64_t v7;
  NSObject *v8;
  _DWORD v9[2];
  __int16 v10;
  _BOOL4 v11;
  __int16 v12;
  _BOOL4 v13;
  __int16 v14;
  unsigned int v15;
  __int16 v16;
  _BOOL4 v17;

  v7 = qword_100100320;
  if (!a2 && a4 && qword_100100320)
  {
    sub_100018834((uint64_t)qword_100100308, (uint64_t)a3, a4);
  }
  else
  {
    v8 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
    {
      v9[0] = 67241216;
      v9[1] = a2;
      v10 = 1026;
      v11 = a2 == -536870165;
      v12 = 1026;
      v13 = a2 == -536870168;
      v14 = 1026;
      v15 = a4;
      v16 = 1026;
      v17 = v7 != 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#pcie,async read failure,0x%{public}08x,is_aborted,%{public}d,is_overrun,%{public}d,sz,%{public}u,callback,%{public}d", (uint8_t *)v9, 0x20u);
    }
    free(a3);
  }
}

void sub_10004C660(id a1, int a2, void *a3, unsigned int a4)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t v9;
  void *__p[2];
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  unsigned int v15;

  if (a2)
  {
    v6 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240448;
      v13 = a2;
      v14 = 1026;
      v15 = a4;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#pcie,write error,0x%{public}08x,sz,%{public}u", buf, 0xEu);
    }
    if (!qword_100100340)
      exit(-2);
    v7 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#pcie,invoking exit callback,#pcie_writeError", buf, 2u);
    }
    sub_100025B58(__p, "#pcie_writeError");
    if (!qword_100100340)
      sub_100025CE8();
    (*(void (**)(uint64_t, void **))(*(_QWORD *)qword_100100340 + 48))(qword_100100340, __p);
    if (v11 < 0)
      operator delete(__p[0]);
    v8 = (uint64_t *)qword_100100340;
    qword_100100340 = 0;
    if (v8 == &qword_100100328)
    {
      v9 = 4;
    }
    else
    {
      if (!v8)
        return;
      v9 = 5;
    }
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
}

void sub_10004C7E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10004C808()
{
  NSObject *v0;
  _QWORD *result;
  uint64_t v2;
  uint8_t v3[16];

  v0 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v3 = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#pcie,ignoring close", v3, 2u);
  }
  result = (_QWORD *)qword_100100320;
  qword_100100320 = 0;
  if (result == (_QWORD *)&unk_100100308)
  {
    v2 = 4;
  }
  else
  {
    if (!result)
      return result;
    v2 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v2))();
}

uint64_t GnssHal::CommPcie::openWithRetries(GnssHal::CommPcie *this, int a2)
{
  gpsd::util *MachContinuousTimeNs;
  double v5;
  double v6;
  double v7;
  double v8;
  int v9;
  int v10;
  NSObject *v11;
  gpsd::util *v12;
  int v13;
  double v14;
  double v15;
  double v16;
  NSObject *v17;
  gpsd::util *v18;
  char v19;
  int v20;
  uint64_t v21;
  NSObject *v22;
  _BOOL8 v23;
  unint64_t v24;
  uint8_t buf[4];
  int v27;
  __int16 v28;
  double v29;
  __int16 v30;
  double v31;

  MachContinuousTimeNs = (gpsd::util *)gpsd::util::getMachContinuousTimeNs(this);
  v5 = (double)(unint64_t)MachContinuousTimeNs * 0.000000001;
  v6 = (double)a2;
  v7 = (double)gpsd::util::getMachContinuousTimeNs(MachContinuousTimeNs) * 0.000000001;
  v8 = v5 - v7 + (double)a2;
  v9 = llround(v8);
  if (v9 >= 30)
    v10 = 30;
  else
    v10 = v9;
  if (v10 >= 1)
  {
    do
    {
      v11 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67240448;
        v27 = v10;
        v28 = 2050;
        v29 = v8;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "#pcie,thisOpen,start,thisTimeoutSec,%{public}d,timeLeftSec,%{public}.3f", buf, 0x12u);
      }
      v12 = (gpsd::util *)sub_10004BFDC((uint64_t)this, v10);
      v13 = (int)v12;
      v14 = (double)gpsd::util::getMachContinuousTimeNs(v12) * 0.000000001;
      v15 = v14 - v7;
      v16 = v5 - v14 + v6;
      v17 = qword_100100838;
      v18 = (gpsd::util *)os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v18)
      {
        *(_DWORD *)buf = 67240704;
        v27 = v13;
        v28 = 2050;
        v29 = v15;
        v30 = 2050;
        v31 = v16;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#pcie,thisOpen,success,%{public}d,durationSec,%{public}.3f,timeLeftSec,%{public}.3f", buf, 0x1Cu);
      }
      if (v16 < 5.0)
        v19 = 1;
      else
        v19 = v13;
      if ((v19 & 1) != 0)
        break;
      if (v15 < 5.0)
        v18 = (gpsd::util *)sleep(5u);
      v7 = (double)gpsd::util::getMachContinuousTimeNs(v18) * 0.000000001;
      v8 = v5 - v7 + v6;
      v20 = llround(v8);
      v10 = v20 >= 30 ? 30 : v20;
    }
    while (v10 > 0);
  }
  v21 = (*(uint64_t (**)(GnssHal::CommPcie *))(*(_QWORD *)this + 32))(this);
  v22 = qword_100100838;
  v23 = os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT);
  if (v23)
  {
    v24 = gpsd::util::getMachContinuousTimeNs((gpsd::util *)v23);
    *(_DWORD *)buf = 67240448;
    v27 = v21;
    v28 = 2050;
    v29 = (double)v24 * 0.000000001 - v5;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#pcie,overallOpen,success,%{public}d,durationSeconds,%{public}.3f", buf, 0x12u);
  }
  return v21;
}

uint64_t sub_10004CB20()
{
  return 0;
}

uint64_t sub_10004CB28()
{
  return -1;
}

uint64_t sub_10004CB30()
{
  return 0;
}

uint64_t sub_10004CB38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, int *, uint64_t, uint64_t, _QWORD);
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, int *, uint64_t, uint64_t, _QWORD);
  uint64_t v6;
  NSObject *v7;
  uint8_t v9[12];
  int v10;

  v10 = 0;
  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *, uint64_t, uint64_t, _QWORD))(a1 + 8);
  v3 = a1 + 8;
  v4 = v5;
  if (!v5 || (v6 = a3, (v4(v3, a2, a3, &v10, 1, 1000, 0) & 1) == 0))
  {
    v7 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v9 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#pcie, TelephonyUtilTransportWrite failure", v9, 2u);
    }
    return -1;
  }
  return v6;
}

BOOL sub_10004CBCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  return v4 >= 0 && v4 == a3;
}

uint64_t sub_10004CC00()
{
  NSObject *v0;
  int v2;
  const char *v3;

  v0 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
  {
    v2 = 136315138;
    v3 = "enterLowPowerMode";
    _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#pcie, %s, interface not available on PCIe platform", (uint8_t *)&v2, 0xCu);
  }
  return 0;
}

uint64_t sub_10004CCA8()
{
  NSObject *v0;
  int v2;
  const char *v3;

  v0 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
  {
    v2 = 136315138;
    v3 = "exitLowPowerMode";
    _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#pcie, %s, interface not available on PCIe platform", (uint8_t *)&v2, 0xCu);
  }
  return 1;
}

uint64_t sub_10004CD50()
{
  NSObject *v0;
  uint8_t v2[16];

  v0 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "#pcie,readWriteFlush not available on PCIe", v2, 2u);
  }
  return 1;
}

uint64_t sub_10004CDB4()
{
  NSObject *v0;
  uint8_t v2[16];

  v0 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "#pcie,readFlush not available on PCIe", v2, 2u);
  }
  return 1;
}

void sub_10004CE18(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  NSObject *v4;
  _QWORD v5[7];
  std::unique_lock<std::mutex> __lk;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  v3 = *(_DWORD *)(GpsdPlatformInfo::instance(0) + 8);
  if (v3 == 107 || v3 == 202)
  {
    if (*(_BYTE *)(a1 + 96))
    {
      v5[0] = 0;
      v5[1] = v5;
      v5[2] = 0x3812000000;
      v5[3] = sub_10002393C;
      v5[4] = sub_1000238E8;
      v5[5] = "";
      operator new();
    }
  }
  else
  {
    v4 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__lk.__m_) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#pcie,#tt,pulseTimemarkStrobe not supported", (uint8_t *)&__lk, 2u);
    }
  }
}

void sub_10004D5EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::exception_ptr a22,std::mutex *a23,char a24)
{
  uint64_t *v24;

  _Block_object_dispose(&a15, 8);
  sub_10004D95C(v24);
  _Unwind_Resume(a1);
}

void sub_10004D6BC(uint64_t a1, int a2, uint64_t a3, __int128 *a4)
{
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;

  if (a2 || !a4)
  {
    v8 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v10) = 67240192;
      DWORD1(v10) = a2;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#pcie,#tt,completion failure,0x%{public}08x", (uint8_t *)&v10, 8u);
    }
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    LOBYTE(v10) = 0;
    v12 = 2;
    sub_10004D7CC(*(_QWORD *)(v9 + 48), &v10);
  }
  else
  {
    GpsdPlatformInfo::instance(0);
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v10 = *a4;
    v11 = *((_QWORD *)a4 + 2);
    v12 = 0;
    sub_10004D7CC(*(_QWORD *)(v7 + 48), &v10);
  }
}

void sub_10004D7CC(uint64_t a1, _OWORD *a2)
{
  std::mutex *v4;
  uint64_t v5;
  __int128 v6;
  std::exception_ptr v7;

  if (!a1)
    sub_100032258(3u);
  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((*(_BYTE *)(a1 + 136) & 1) != 0
    || (v7.__ptr_ = 0, v5 = *(_QWORD *)(a1 + 16), std::exception_ptr::~exception_ptr(&v7), v5))
  {
    sub_100032258(2u);
  }
  v6 = a2[1];
  *(_OWORD *)(a1 + 144) = *a2;
  *(_OWORD *)(a1 + 160) = v6;
  *(_DWORD *)(a1 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock(v4);
}

void sub_10004D864(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10004D878(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 96);
}

uint64_t sub_10004D880()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_10004D888()
{
  return 1;
}

double sub_10004D890()
{
  return 0.0;
}

void sub_10004D898(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void sub_10004D8A4(uint64_t a1)
{
  std::exception_ptr *v2;

  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_10004D8F0(uint64_t a1)
{
  std::exception_ptr *v2;

  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  operator delete();
}

uint64_t sub_10004D950(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

uint64_t *sub_10004D95C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::future_error v7;
  std::exception_ptr v8;
  std::error_code v9;

  v2 = *a1;
  if (*a1)
  {
    if ((*(_BYTE *)(v2 + 136) & 1) == 0)
    {
      v8.__ptr_ = 0;
      v3 = *(_QWORD *)(v2 + 16);
      std::exception_ptr::~exception_ptr(&v8);
      v2 = *a1;
      if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
      {
        v9.__cat_ = std::future_category();
        *(_QWORD *)&v9.__val_ = 4;
        std::future_error::future_error(&v7, v9);
        sub_1000321E4(&v7);
      }
    }
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  }
  return a1;
}

uint64_t sub_10004DA2C()
{
  qword_100100320 = 0;
  __cxa_atexit((void (*)(void *))sub_10004BA4C, qword_100100308, (void *)&_mh_execute_header);
  qword_100100340 = 0;
  return __cxa_atexit((void (*)(void *))sub_10004BA98, &qword_100100328, (void *)&_mh_execute_header);
}

void GpsdProtobufRouter::GpsdProtobufRouter(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, char a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t (**v12)();
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  NSObject *v17;
  const char *v18;
  int v19;
  void **v20;
  NSObject *v21;
  void *v22[2];
  char v23;
  void *v24[2];
  char v25;
  _QWORD v26[2];
  char v27;
  void *__p[2];
  char v29;
  void *v30[2];
  char v31;
  _QWORD v32[2];
  char v33;
  _QWORD v34[4];
  _QWORD v35[4];
  _BYTE buf[18];
  __int16 v37;
  _BYTE v38[12];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 16) = a5;
  *(_BYTE *)(a1 + 17) = 0;
  *(_QWORD *)(a1 + 24) = *a4;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  v7 = a1 + 112;
  v8 = *(_QWORD *)(a2 + 24);
  if (v8)
  {
    if (v8 == a2)
    {
      *(_QWORD *)(a1 + 136) = v7;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), v7);
LABEL_6:
      v9 = *(_QWORD *)(a3 + 24);
      if (v9)
      {
        if (v9 == a3)
        {
          *(_QWORD *)(a1 + 168) = a1 + 144;
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24), a1 + 144);
LABEL_11:
          if (*(_QWORD *)(a1 + 136))
          {
            if (*(_QWORD *)(a1 + 168))
            {
              v35[3] = 0;
              v34[3] = 0;
              if (*(_DWORD *)(GpsdPlatformInfo::instance(0) + 8) == 107 || *(_BYTE *)(a1 + 16))
              {
                *(_QWORD *)buf = off_1000F3D58;
                *(_QWORD *)&buf[8] = a1;
                *(_QWORD *)&v38[4] = buf;
                sub_10004E920(buf, v35);
                v10 = *(_QWORD **)&v38[4];
                if (*(_BYTE **)&v38[4] == buf)
                {
                  v11 = 4;
                  v10 = buf;
                }
                else
                {
                  if (!*(_QWORD *)&v38[4])
                  {
LABEL_20:
                    v12 = off_1000F3DE8;
                    goto LABEL_21;
                  }
                  v11 = 5;
                }
                (*(void (**)(void))(*v10 + 8 * v11))();
                goto LABEL_20;
              }
              *(_QWORD *)buf = off_1000F3E78;
              *(_QWORD *)&buf[8] = a1;
              *(_QWORD *)&v38[4] = buf;
              sub_10004E920(buf, v35);
              v15 = *(_QWORD **)&v38[4];
              if (*(_BYTE **)&v38[4] == buf)
              {
                v16 = 4;
                v15 = buf;
              }
              else
              {
                if (!*(_QWORD *)&v38[4])
                {
LABEL_32:
                  v12 = off_1000F3EF8;
LABEL_21:
                  *(_QWORD *)buf = v12;
                  *(_QWORD *)&buf[8] = a1;
                  *(_QWORD *)&v38[4] = buf;
                  sub_10004EB44(buf, v34);
                  v13 = *(_QWORD **)&v38[4];
                  if (*(_BYTE **)&v38[4] == buf)
                  {
                    v14 = 4;
                    v13 = buf;
                  }
                  else
                  {
                    if (!*(_QWORD *)&v38[4])
                      goto LABEL_26;
                    v14 = 5;
                  }
                  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_26:
                  operator new();
                }
                v16 = 5;
              }
              (*(void (**)(void))(*v15 + 8 * v16))();
              goto LABEL_32;
            }
            v21 = qword_100100838;
            if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "#router,fRemoteIndicationCallback,null", buf, 2u);
              v21 = qword_100100838;
            }
            if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CoreGPS/Sources/Daemon/GpsdProtobufRouter.mm";
              *(_WORD *)&buf[12] = 1026;
              *(_DWORD *)&buf[14] = 26;
              v37 = 2082;
              *(_QWORD *)v38 = "GpsdProtobufRouter";
              _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: assertion failure in %{public}s", buf, 0x1Cu);
            }
            sub_100025B58(v26, "assert");
            sub_100025B58(v24, "GpsdProtobufRouter");
            sub_100025B58(v22, "#router,fRemoteIndicationCallback,null");
            gpsd::util::triggerDiagnosticReport((uint64_t)v26, (__int128 *)v24, (__int128 *)v22);
            if (v23 < 0)
              operator delete(v22[0]);
            if (v25 < 0)
              operator delete(v24[0]);
            v18 = "false && \"#router,fRemoteIndicationCallback,null\"";
            v19 = 26;
            if (v27 < 0)
            {
              v20 = (void **)v26;
              goto LABEL_53;
            }
          }
          else
          {
            v17 = qword_100100838;
            if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "#router,fRemoteResponseCallback,null", buf, 2u);
              v17 = qword_100100838;
            }
            if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CoreGPS/Sources/Daemon/GpsdProtobufRouter.mm";
              *(_WORD *)&buf[12] = 1026;
              *(_DWORD *)&buf[14] = 25;
              v37 = 2082;
              *(_QWORD *)v38 = "GpsdProtobufRouter";
              _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: assertion failure in %{public}s", buf, 0x1Cu);
            }
            sub_100025B58(v32, "assert");
            sub_100025B58(v30, "GpsdProtobufRouter");
            sub_100025B58(__p, "#router,fRemoteResponseCallback,null");
            gpsd::util::triggerDiagnosticReport((uint64_t)v32, (__int128 *)v30, (__int128 *)__p);
            if (v29 < 0)
              operator delete(__p[0]);
            if (v31 < 0)
              operator delete(v30[0]);
            v18 = "false && \"#router,fRemoteResponseCallback,null\"";
            v19 = 25;
            if (v33 < 0)
            {
              v20 = (void **)v32;
LABEL_53:
              operator delete(*v20);
            }
          }
          __assert_rtn("GpsdProtobufRouter", "GpsdProtobufRouter.mm", v19, v18);
        }
        v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
      }
      *(_QWORD *)(a1 + 168) = v9;
      goto LABEL_11;
    }
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  }
  *(_QWORD *)(a1 + 136) = v8;
  goto LABEL_6;
}

void sub_10004E434()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(_QWORD **)(v1 - 136);
  if (v2 == v0)
  {
    v3 = 4;
    v2 = (_QWORD *)(v1 - 160);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v4 = *(_QWORD **)(v1 - 104);
  if (v4 == (_QWORD *)(v1 - 128))
  {
    v5 = 4;
    v4 = (_QWORD *)(v1 - 128);
  }
  else
  {
    if (!v4)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_11:
  operator delete();
}

void sub_10004E75C(uint64_t a1, proto::gpsd *this, unsigned int a3)
{
  int v4;
  unsigned int v6;
  const char *v7;
  int v8;
  const char *v9;
  _QWORD v10[2];
  uint64_t v11;
  uint64_t v12;

  v4 = (int)this;
  v10[0] = off_1000F9AD8;
  v10[1] = 0;
  v11 = 0;
  v12 = 0;
  if (!proto::gpsd::Request_Type_IsValid(this))
  {
    v7 = "::proto::gpsd::Request_Type_IsValid(value)";
    v8 = 7657;
    v9 = "set_request_type";
    goto LABEL_6;
  }
  HIDWORD(v12) = 1;
  LODWORD(v11) = v4;
  v6 = gnss::Convert::toProtobuf(a3);
  if (v6 >= 0xA)
  {
    v7 = "::proto::gnss::Result_IsValid(value)";
    v8 = 7702;
    v9 = "set_result_code";
LABEL_6:
    __assert_rtn(v9, "GpsdProtocol.pb.h", v8, v7);
  }
  HIDWORD(v12) |= 4u;
  HIDWORD(v11) = v6;
  sub_10000F710(a1, v10, 1);
  v10[0] = off_1000F9AD8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)v10);
}

void sub_10004E838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t v9;

  a9 = v9 + 16;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)&a9);
  _Unwind_Resume(a1);
}

void sub_10004E854(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48);
  sub_1000103D8(*(_QWORD *)(a1 + 40), (uint64_t *)v1, *(_QWORD *)(v1 + 8), *(_DWORD *)(v1 + 16));
}

void sub_10004E874()
{
  operator delete();
}

_QWORD *sub_10004E888(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F3D58;
  result[1] = v3;
  return result;
}

uint64_t sub_10004E8BC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F3D58;
  a2[1] = v2;
  return result;
}

uint64_t sub_10004E8D8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10004E914()
{
}

_QWORD *sub_10004E920(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10004EA88(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10002579C(a1);
}

void sub_10004EA98()
{
  operator delete();
}

_QWORD *sub_10004EAAC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F3DE8;
  result[1] = v3;
  return result;
}

uint64_t sub_10004EAE0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F3DE8;
  a2[1] = v2;
  return result;
}

uint64_t sub_10004EAFC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10004EB38()
{
}

_QWORD *sub_10004EB44(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10004ECAC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10002579C(a1);
}

void sub_10004ECBC()
{
  operator delete();
}

_QWORD *sub_10004ECD0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F3E78;
  result[1] = v3;
  return result;
}

uint64_t sub_10004ED04(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F3E78;
  a2[1] = v2;
  return result;
}

void sub_10004ED20()
{
  _QWORD v0[6];

  v0[0] = 0;
  v0[1] = v0;
  v0[2] = 0x3812000000;
  v0[3] = sub_10004EE70;
  v0[4] = sub_10004EE80;
  v0[5] = 0;
  operator new();
}

void sub_10004EE04()
{
  operator delete();
}

uint64_t sub_10004EE28(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10004EE64()
{
}

uint64_t sub_10004EE70(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

uint64_t sub_10004EE80(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_10004EEA0(uint64_t a1)
{
  sub_10000F710(*(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48), 3);
}

void sub_10004EEBC()
{
  operator delete();
}

_QWORD *sub_10004EED0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F3EF8;
  result[1] = v3;
  return result;
}

uint64_t sub_10004EF04(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F3EF8;
  a2[1] = v2;
  return result;
}

void sub_10004EF20()
{
  _QWORD v0[6];

  v0[0] = 0;
  v0[1] = v0;
  v0[2] = 0x3812000000;
  v0[3] = sub_10004F070;
  v0[4] = sub_10004F080;
  v0[5] = 0;
  operator new();
}

void sub_10004F004()
{
  operator delete();
}

uint64_t sub_10004F028(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10004F064()
{
}

uint64_t sub_10004F070(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

uint64_t sub_10004F080(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_10004F0A0(uint64_t a1)
{
  sub_10001A524(*(_QWORD *)(a1 + 40), *(proto::gpsd::Indication **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48));
}

void sub_10004F0B8()
{
  operator delete();
}

_QWORD *sub_10004F0CC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F3F78;
  result[1] = v3;
  return result;
}

uint64_t sub_10004F100(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F3F78;
  a2[1] = v2;
  return result;
}

void sub_10004F11C()
{
  operator new();
}

void sub_10004F1E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_10004F264(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10004F2A0()
{
}

void sub_10004F2B0()
{
  operator delete();
}

_QWORD *sub_10004F2C4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1000F4008;
  result[1] = v3;
  return result;
}

uint64_t sub_10004F2F8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1000F4008;
  a2[1] = v2;
  return result;
}

void sub_10004F314(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 v3;
  NSObject *v4;
  uint64_t v5;
  uint8_t v6[16];

  v2 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(a2 + 8) != 1 || (v3 = atomic_load((unsigned __int8 *)(v2 + 17)), (v3 & 1) != 0))
  {
    v5 = *(_QWORD *)(v2 + 168);
    if (!v5)
      sub_100025CE8();
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  }
  else
  {
    v4 = qword_100100830;
    if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "unexpectedIndicationFromGEM,fIsInEmergencyMode,0", v6, 2u);
    }
  }
}

uint64_t sub_10004F3B4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10004F3F0()
{
}

void *sub_10004F3FC(unint64_t a1)
{
  if (a1 >> 61)
    sub_1000268B0();
  return operator new(8 * a1);
}

uint64_t GnssHal::PlatformLog::getSecondaryPathLogLevel(GnssHal::PlatformLog *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t GnssHal::PlatformLog::getLogMask(GnssHal::PlatformLog *this)
{
  return *((_QWORD *)this + 2);
}

void GnssHal::PlatformLog::logSystemException(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  NSObject *v80;
  uint64_t v81;
  id *v82;
  std::string *v83;
  __int128 v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  NSObject *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  void *__p[2];
  std::string::size_type v97;
  uint8_t v98[4];
  uint64_t *v99;
  __int16 v100;
  unint64_t v101;
  __int16 v102;
  uint64_t v103;
  std::string buf;
  uint64_t v105;
  _BYTE v106[384];
  uint64_t v107;

  v6 = *((char *)a2 + 23);
  if (v6 >= 0)
    v7 = a2;
  else
    v7 = (_QWORD *)*a2;
  if (v6 >= 0)
    v8 = *((unsigned __int8 *)a2 + 23);
  else
    v8 = a2[1];
  if (v8 > 0x20)
  {
    if (v8 <= 0x40)
    {
      v12 = (char *)v7 + v8;
      v13 = *(_QWORD *)((char *)v7 + v8 - 16);
      v14 = *(_QWORD *)((char *)v7 + v8 - 8);
      v15 = *v7 - 0x3C5A37A36834CED9 * (v13 + v8);
      v17 = v7[2];
      v16 = v7[3];
      v18 = __ROR8__(v15 + v16, 52);
      v19 = __ROR8__(v15, 37);
      v20 = v15 + v7[1];
      v21 = __ROR8__(v20, 7);
      v22 = v20 + v17;
      v23 = v21 + v19;
      v24 = *((_QWORD *)v12 - 4) + v17;
      v25 = v14 + v16;
      v26 = __ROR8__(v25 + v24, 52);
      v27 = v23 + v18;
      v28 = __ROR8__(v24, 37);
      v29 = *((_QWORD *)v12 - 3) + v24;
      v30 = __ROR8__(v29, 7);
      v31 = v27 + __ROR8__(v22, 31);
      v32 = v29 + v13;
      v33 = v32 + v25;
      v34 = v22 + v16 + v28 + v30 + v26 + __ROR8__(v32, 31);
      v35 = 0x9AE16A3B2F90404FLL;
      v36 = v31
          - 0x3C5A37A36834CED9
          * ((0xC3A5C85C97CB3127 * (v33 + v31) - 0x651E95C4D06FBFB1 * v34) ^ ((0xC3A5C85C97CB3127 * (v33 + v31)
                                                                                 - 0x651E95C4D06FBFB1 * v34) >> 47));
LABEL_15:
      v11 = (v36 ^ (v36 >> 47)) * v35;
      goto LABEL_19;
    }
    v44 = *(_QWORD *)((char *)v7 + v8 - 48);
    v43 = *(_QWORD *)((char *)v7 + v8 - 40);
    v45 = *(_QWORD *)((char *)v7 + v8 - 24);
    v46 = *(_QWORD *)((char *)v7 + v8 - 56);
    v47 = *(_QWORD *)((char *)v7 + v8 - 16);
    v48 = *(_QWORD *)((char *)v7 + v8 - 8);
    v49 = v46 + v47;
    v50 = 0x9DDFEA08EB382D69
        * (v45 ^ ((0x9DDFEA08EB382D69 * (v45 ^ (v44 + v8))) >> 47) ^ (0x9DDFEA08EB382D69 * (v45 ^ (v44 + v8))));
    v51 = 0x9DDFEA08EB382D69 * (v50 ^ (v50 >> 47));
    v52 = *(_QWORD *)((char *)v7 + v8 - 64) + v8;
    v53 = v44 + v46 + v52;
    v54 = v53 + v43;
    v55 = __ROR8__(v53, 44) + v52 + __ROR8__(v52 + v43 + v51, 21);
    v56 = v46 + v47 + *(_QWORD *)((char *)v7 + v8 - 32) - 0x4B6D499041670D8DLL;
    v57 = v45 + v47 + v56;
    v58 = v57 + v48;
    v59 = __ROR8__(v57, 44) + v56 + __ROR8__(v56 + v43 + v48, 21);
    v60 = v7 + 4;
    v61 = *v7 - 0x4B6D499041670D8DLL * v43;
    v62 = -(uint64_t)((v8 - 1) & 0xFFFFFFFFFFFFFFC0);
    do
    {
      v63 = *(v60 - 3);
      v64 = v61 + v54 + v49 + v63;
      v65 = v60[2];
      v66 = v60[3];
      v67 = v60[1];
      v49 = v67 + v54 - 0x4B6D499041670D8DLL * __ROR8__(v49 + v55 + v65, 42);
      v68 = v51 + v58;
      v69 = *(v60 - 2);
      v70 = *(v60 - 1);
      v71 = *(v60 - 4) - 0x4B6D499041670D8DLL * v55;
      v72 = v71 + v58 + v70;
      v73 = v71 + v63 + v69;
      v54 = v73 + v70;
      v74 = __ROR8__(v73, 44) + v71;
      v75 = (0xB492B66FBE98F273 * __ROR8__(v64, 37)) ^ v59;
      v61 = 0xB492B66FBE98F273 * __ROR8__(v68, 33);
      v55 = v74 + __ROR8__(v72 + v75, 21);
      v76 = v61 + v59 + *v60;
      v58 = v67 + v65 + v76 + v66;
      v59 = __ROR8__(v67 + v65 + v76, 44) + v76 + __ROR8__(v49 + v69 + v76 + v66, 21);
      v60 += 8;
      v51 = v75;
      v62 += 64;
    }
    while (v62);
    v77 = 0x9DDFEA08EB382D69
        * (v58 ^ ((0x9DDFEA08EB382D69 * (v58 ^ v54)) >> 47) ^ (0x9DDFEA08EB382D69 * (v58 ^ v54)));
    v78 = v75 - 0x4B6D499041670D8DLL * (v49 ^ (v49 >> 47)) - 0x622015F714C7D297 * (v77 ^ (v77 >> 47));
    v79 = v61
        - 0x622015F714C7D297
        * ((0x9DDFEA08EB382D69
          * (v59 ^ ((0x9DDFEA08EB382D69 * (v59 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v59 ^ v55)))) ^ ((0x9DDFEA08EB382D69 * (v59 ^ ((0x9DDFEA08EB382D69 * (v59 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v59 ^ v55)))) >> 47));
    v11 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69
          * (v79 ^ ((0x9DDFEA08EB382D69 * (v79 ^ v78)) >> 47) ^ (0x9DDFEA08EB382D69 * (v79 ^ v78)))) ^ ((0x9DDFEA08EB382D69 * (v79 ^ ((0x9DDFEA08EB382D69 * (v79 ^ v78)) >> 47) ^ (0x9DDFEA08EB382D69 * (v79 ^ v78)))) >> 47));
  }
  else
  {
    if (v8 > 0x10)
    {
      v37 = v7[1];
      v38 = 0xB492B66FBE98F273 * *v7;
      v39 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)v7 + v8 - 8), 30) + __ROR8__(v38 - v37, 43);
      v40 = v38
          + v8
          + __ROR8__(v37 ^ 0xC949D7C7509E6557, 20)
          - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)v7 + v8 - 8);
      v41 = (v39 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)v7 + v8 - 16)) ^ v40;
      v35 = 0x9DDFEA08EB382D69;
      v42 = v40 ^ ((0x9DDFEA08EB382D69 * v41) >> 47) ^ (0x9DDFEA08EB382D69 * v41);
LABEL_14:
      v36 = 0x9DDFEA08EB382D69 * v42;
      goto LABEL_15;
    }
    if (v8 >= 9)
    {
      v9 = *(_QWORD *)((char *)v7 + v8 - 8);
      v10 = __ROR8__(v9 + v8, v8);
      v11 = (0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69
             * (v10 ^ ((0x9DDFEA08EB382D69 * (v10 ^ *v7)) >> 47) ^ (0x9DDFEA08EB382D69 * (v10 ^ *v7)))) ^ ((0x9DDFEA08EB382D69 * (v10 ^ ((0x9DDFEA08EB382D69 * (v10 ^ *v7)) >> 47) ^ (0x9DDFEA08EB382D69 * (v10 ^ *v7)))) >> 47))) ^ v9;
      goto LABEL_19;
    }
    if (v8 >= 4)
    {
      v90 = *(unsigned int *)((char *)v7 + v8 - 4);
      v91 = (v8 + (8 * *(_DWORD *)v7)) ^ v90;
      v35 = 0x9DDFEA08EB382D69;
      v42 = v90 ^ ((0x9DDFEA08EB382D69 * v91) >> 47) ^ (0x9DDFEA08EB382D69 * v91);
      goto LABEL_14;
    }
    v11 = 0x9AE16A3B2F90404FLL;
    if (v8)
    {
      v92 = v8 + 4 * *((unsigned __int8 *)v7 + v8 - 1);
      v93 = 0x9AE16A3B2F90404FLL
          * (*(unsigned __int8 *)v7 | ((unint64_t)*((unsigned __int8 *)v7 + (v8 >> 1)) << 8));
      v11 = 0x9AE16A3B2F90404FLL * ((0xC949D7C7509E6557 * v92) ^ v93 ^ (((0xC949D7C7509E6557 * v92) ^ v93) >> 47));
    }
  }
LABEL_19:
  if (*(_BYTE *)(a1 + 32))
  {
    v80 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      v81 = a3[1] - *a3;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136381187;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v11;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
      v105 = v81;
      _os_log_error_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_ERROR, "logSystemException,%{private}s,%{public}zu,size,%{public}zu", (uint8_t *)&buf, 0x20u);
    }
  }
  else
  {
    v82 = (id *)GpsdPreferences::instance(0);
    GpsdPreferences::vendorLogDirectory(v82, &buf);
    v83 = std::string::append(&buf, "/gnss_hw_exception.bin");
    v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
    v97 = v83->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v84;
    v83->__r_.__value_.__l.__size_ = 0;
    v83->__r_.__value_.__r.__words[2] = 0;
    v83->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    sub_100025F40((void (__cdecl ***)(std::ofstream *__hidden))&buf, (uint64_t *)__p, 4);
    v85 = sub_100026C60(&buf, (uint64_t)"logSystemException(", 19);
    v86 = (_QWORD *)std::ostream::operator<<(v85, v11);
    v87 = sub_100026C60(v86, (uint64_t)",", 1);
    v88 = (_QWORD *)std::ostream::operator<<(v87, a3[1] - *a3);
    sub_100026C60(v88, (uint64_t)")\n", 2);
    std::ostream::write(&buf, *a3, a3[1] - *a3);
    if (!std::filebuf::close(&buf.__r_.__value_.__r.__words[1]))
      std::ios_base::clear((std::ios_base *)((char *)&buf + *(_QWORD *)(buf.__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)&v106[*(_QWORD *)(buf.__r_.__value_.__r.__words[0] - 24)] | 4);
    v89 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_FAULT))
    {
      if (*((char *)a2 + 23) >= 0)
        v94 = a2;
      else
        v94 = (uint64_t *)*a2;
      v95 = a3[1] - *a3;
      *(_DWORD *)v98 = 136381187;
      v99 = v94;
      v100 = 2050;
      v101 = v11;
      v102 = 2050;
      v103 = v95;
      _os_log_fault_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_FAULT, "logSystemException,%{private}s,%{public}zu,size,%{public}zu", v98, 0x20u);
    }
    *(_BYTE *)(a1 + 32) = 1;
    std::filebuf::~filebuf(&buf.__r_.__value_.__r.__words[1]);
    std::ios::~ios(&v107);
    if (SHIBYTE(v97) < 0)
      operator delete(__p[0]);
  }
}

void sub_10004FB24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10004FB6C(_QWORD *a1)
{
  uint64_t v2;

  std::filebuf::~filebuf(a1 + 1);
  std::ios::~ios(a1 + 52);
  return a1;
}

void GnssHal::PlatformLog::flush(VendorLogger **this)
{
  VendorLogger::flush(this[3]);
}

void sub_10004FBD0()
{
  operator delete();
}

void sub_10004FBE4(uint64_t a1, int a2, uint64_t a3)
{
  VendorLogger::log(*(gpsd::util **)(a1 + 24), a2, *(const void **)a3, *(_QWORD *)(a3 + 8) - *(_QWORD *)a3);
}

void sub_10004FBF8(uint64_t a1, int a2, const void *a3, size_t a4)
{
  VendorLogger::log(*(gpsd::util **)(a1 + 24), a2, a3, a4);
}

_QWORD *GnssHal::GpioEmbedded::GpioEmbedded(_QWORD *a1, uint64_t a2)
{
  NSObject *v3;
  _QWORD *v4;
  NSObject *v5;
  uint8_t v7[16];
  uint8_t buf[16];

  *a1 = &off_1000F4110;
  a1[4] = 0;
  sub_100031BDC((uint64_t)(a1 + 5), a2);
  v3 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "#gpio,frontend,ctor,start", buf, 2u);
  }
  std::mutex::lock(&stru_100100178);
  v4 = (_QWORD *)sub_10004FD70();
  sub_10004FF74(v4, (uint64_t)a1);
  v5 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "#gpio,frontend,ctor,end", v7, 2u);
  }
  std::mutex::unlock(&stru_100100178);
  return a1;
}

void sub_10004FCEC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  std::mutex::unlock(&stru_100100178);
  v4 = (_QWORD *)v1[8];
  if (v4 == v2)
  {
    v5 = 4;
    v4 = v2;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = (_QWORD *)v1[4];
  if (v6 == v1 + 1)
  {
    v7 = 4;
    v6 = v1 + 1;
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  _Unwind_Resume(a1);
}

uint64_t sub_10004FD70()
{
  uint64_t result;
  NSObject *v1;
  std::string v2;
  std::string v3;
  std::string v4;
  uint8_t buf[4];
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;

  if (qword_100100350 != -1)
    dispatch_once(&qword_100100350, &stru_1000F4150);
  result = qword_100100348;
  if (!qword_100100348)
  {
    v1 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "null GpioBackend", buf, 2u);
      v1 = qword_100100838;
    }
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v6 = "/Library/Caches/com.apple.xbs/Sources/CoreGPS/Sources/HAL/Implementation/GnssHalGpioImpl.mm";
      v7 = 1026;
      v8 = 299;
      v9 = 2082;
      v10 = "instance";
      _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: assertion failure in %{public}s", buf, 0x1Cu);
    }
    sub_100025B58(&v4, "assert");
    sub_100025B58(&v3, "instance");
    sub_100025B58(&v2, "null GpioBackend");
    gpsd::util::triggerDiagnosticReport((uint64_t)&v4, (__int128 *)&v3, (__int128 *)&v2);
    std::string::~string(&v2);
    std::string::~string(&v3);
    std::string::~string(&v4);
    __assert_rtn("instance", "GnssHalGpioImpl.mm", 299, "false && \"null GpioBackend\"");
  }
  return result;
}

void sub_10004FF20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void sub_10004FF74(_QWORD *a1, uint64_t a2)
{
  NSObject *v3;
  _DWORD v4[2];

  *a1 = a2;
  v3 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67240192;
    v4[1] = a2 == 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "#gpio,set frontend,isNull,%{public}d", (uint8_t *)v4, 8u);
  }
}

void GnssHal::GpioEmbedded::~GpioEmbedded(GnssHal::GpioEmbedded *this)
{
  NSObject *v2;
  _QWORD *v3;
  NSObject *v4;
  GnssHal::GpioEmbedded *v5;
  uint64_t v6;
  GnssHal::GpioEmbedded *v7;
  uint64_t v8;
  uint8_t v9[16];
  uint8_t buf[16];

  *(_QWORD *)this = &off_1000F4110;
  v2 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#gpio,frontend,dtor,start", buf, 2u);
  }
  std::mutex::lock(&stru_100100178);
  v3 = (_QWORD *)sub_10004FD70();
  sub_10004FF74(v3, 0);
  v4 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#gpio,frontend,dtor,end", v9, 2u);
  }
  std::mutex::unlock(&stru_100100178);
  v5 = (GnssHal::GpioEmbedded *)*((_QWORD *)this + 8);
  if (v5 == (GnssHal::GpioEmbedded *)((char *)this + 40))
  {
    v6 = 4;
    v5 = (GnssHal::GpioEmbedded *)((char *)this + 40);
  }
  else
  {
    if (!v5)
      goto LABEL_10;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_10:
  v7 = (GnssHal::GpioEmbedded *)*((_QWORD *)this + 4);
  if (v7 == (GnssHal::GpioEmbedded *)((char *)this + 8))
  {
    v8 = 4;
    v7 = (GnssHal::GpioEmbedded *)((char *)this + 8);
  }
  else
  {
    if (!v7)
      return;
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
}

void sub_100050160(GnssHal::GpioEmbedded *a1)
{
  GnssHal::GpioEmbedded::~GpioEmbedded(a1);
  operator delete();
}

void GnssHal::GpioEmbedded::setResetLow(GnssHal::GpioEmbedded *this)
{
  int v1;
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  uint8_t v5[16];
  uint8_t buf[16];

  v1 = *(_DWORD *)(GpsdPlatformInfo::instance(0) + 8);
  if (v1 == 103 || v1 == 201 || v1 == 106)
  {
    v2 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gpio,setResetLow", buf, 2u);
    }
    v3 = sub_10004FD70();
    sub_10005025C(v3, 1u, 0);
  }
  else
  {
    v4 = qword_100100830;
    if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#gpio,not supported on platform", v5, 2u);
    }
  }
}

void sub_10005025C(uint64_t a1, uint32_t a2, uint64_t a3)
{
  int v3;
  NSObject *v6;
  uint64_t input;
  uint8_t buf[4];
  uint32_t v9;
  __int16 v10;
  int v11;

  v3 = a3;
  input = a3;
  std::mutex::lock(&stru_100100178);
  if (*(_BYTE *)(a1 + 8))
  {
    IOConnectCallScalarMethod(*(_DWORD *)(a1 + 12), a2, &input, 1u, 0, 0);
  }
  else
  {
    v6 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240448;
      v9 = a2;
      v10 = 1026;
      v11 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#gpio,setGpioState failed,selector,%{public}d,input,%{public}d", buf, 0xEu);
    }
  }
  std::mutex::unlock(&stru_100100178);
}

void sub_10005035C(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_100100178);
  _Unwind_Resume(a1);
}

void sub_100050374()
{
  int v0;
  NSObject *v1;
  uint64_t v2;
  NSObject *v3;
  uint8_t v4[16];
  uint8_t buf[16];

  v0 = *(_DWORD *)(GpsdPlatformInfo::instance(0) + 8);
  if (v0 == 103 || v0 == 201 || v0 == 106)
  {
    v1 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#gpio,setResetHigh", buf, 2u);
    }
    v2 = sub_10004FD70();
    sub_10005025C(v2, 1u, 1uLL);
  }
  else
  {
    v3 = qword_100100830;
    if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#gpio,not supported on platform", v4, 2u);
    }
  }
}

void sub_10005044C()
{
  int v0;
  NSObject *v1;
  uint64_t v2;
  NSObject *v3;
  uint8_t v4[16];
  uint8_t buf[16];

  v0 = *(_DWORD *)(GpsdPlatformInfo::instance(0) + 8);
  if (v0 == 106 || v0 == 103)
  {
    v1 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#gpio,setDeviceWakeLow", buf, 2u);
    }
    v2 = sub_10004FD70();
    sub_10005025C(v2, 3u, 1uLL);
  }
  else
  {
    v3 = qword_100100830;
    if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#gpio,not supported on platform", v4, 2u);
    }
  }
}

void sub_10005051C()
{
  int v0;
  NSObject *v1;
  uint64_t v2;
  NSObject *v3;
  uint8_t v4[16];
  uint8_t buf[16];

  v0 = *(_DWORD *)(GpsdPlatformInfo::instance(0) + 8);
  if (v0 == 106 || v0 == 103)
  {
    v1 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#gpio,setDeviceWakeHigh", buf, 2u);
    }
    v2 = sub_10004FD70();
    sub_10005025C(v2, 3u, 0);
  }
  else
  {
    v3 = qword_100100830;
    if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#gpio,not supported on platform", v4, 2u);
    }
  }
}

void sub_1000505EC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  unint64_t *v6;
  kern_return_t v7;
  _BOOL8 CurrentMachContinuousMinusMachAbsoluteNanoseconds;
  unint64_t MachContinuousTimeNs;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _BYTE *v18;
  NSObject *v19;
  const char *v20;
  NSObject *v21;
  NSObject *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint32_t outputCnt;
  uint64_t output[3];
  mach_port_t connection;
  _QWORD v30[3];
  _QWORD *v31;
  _BYTE buf[22];
  __int16 v33;
  _BYTE *v34;
  __int16 v35;
  unint64_t v36;
  __int16 v37;
  unint64_t v38;
  __int16 v39;
  unint64_t v40;
  _QWORD v41[3];

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  v4 = *(_DWORD *)(GpsdPlatformInfo::instance(0) + 8);
  if (v4 != 103 && v4 != 106 && v4 != 201)
  {
    v19 = qword_100100838;
    if (!os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
      return;
    *(_WORD *)buf = 0;
    v20 = "#gpio,pulseTimeMarkStrobe not supported";
    goto LABEL_17;
  }
  connection = 0;
  v5 = sub_10004FD70();
  if (!sub_100050B00(v5, &connection))
  {
    v19 = qword_100100838;
    if (!os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
      return;
    *(_WORD *)buf = 0;
    v20 = "#gpio,#tt,GPSControlConnect failed";
LABEL_17:
    _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, v20, buf, 2u);
    return;
  }
  outputCnt = 2;
  v7 = IOConnectCallScalarMethod(connection, 5u, 0, 0, output, &outputCnt);
  if (v7 || outputCnt != 2)
  {
    v21 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "#gpio,#tt,TogglePIN,failed,Result,%{public}08x", buf, 8u);
    }
    goto LABEL_38;
  }
  v26 = 0;
  CurrentMachContinuousMinusMachAbsoluteNanoseconds = gpsd::util::getCurrentMachContinuousMinusMachAbsoluteNanoseconds((gpsd::util *)&v26, v6);
  if (!CurrentMachContinuousMinusMachAbsoluteNanoseconds)
  {
    v22 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "#gpio,#tt,machCont timestamping failed", buf, 2u);
    }
    goto LABEL_38;
  }
  MachContinuousTimeNs = gpsd::util::getMachContinuousTimeNs((gpsd::util *)CurrentMachContinuousMinusMachAbsoluteNanoseconds);
  *(_BYTE *)(a2 + 16) = 1;
  v10 = gpsd::util::convertMachTimeInTicksToNs(output[0]);
  v11 = v26;
  v12 = v26 + v10;
  *(_QWORD *)a2 = v26 + v10;
  v13 = gpsd::util::convertMachTimeInTicksToNs(output[1]) + v11;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO))
  {
    v15 = gpsd::util::convertMachTimeInTicksToNs(output[0]);
    v16 = gpsd::util::convertMachTimeInTicksToNs(output[1]);
    *(_DWORD *)buf = 134350336;
    *(_QWORD *)&buf[4] = v12;
    *(_WORD *)&buf[12] = 2050;
    *(_QWORD *)&buf[14] = v13;
    v33 = 2050;
    v34 = (_BYTE *)(v13 - v12);
    v35 = 2050;
    v36 = MachContinuousTimeNs;
    v37 = 2050;
    v38 = v15;
    v39 = 2050;
    v40 = v16;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "#gpio,#tt,TogglePIN,beforeContNs,%{public}llu,afterContNs,%{public}llu,widthNs,%{public}llu,nowContNs,%{public}llu,beforeMachNs,%{public}llu,afterMachNs,%{public}llu", buf, 0x3Eu);
  }
  v31 = 0;
  std::mutex::lock(&stru_100100178);
  sub_100031BDC((uint64_t)buf, a1 + 40);
  v17 = v34;
  v18 = v31;
  if (v34 == buf)
  {
    if (v31 == v30)
    {
      (*(void (**)(_BYTE *, _QWORD *))(*(_QWORD *)buf + 24))(buf, v41);
      (*(void (**)(_BYTE *))(*(_QWORD *)v34 + 32))(v34);
      v34 = 0;
      (*(void (**)(_QWORD *, _BYTE *))(*v31 + 24))(v31, buf);
      (*(void (**)(_QWORD *))(*v31 + 32))(v31);
      v31 = 0;
      v34 = buf;
      (*(void (**)(_QWORD *, _QWORD *))(v41[0] + 24))(v41, v30);
      (*(void (**)(_QWORD *))(v41[0] + 32))(v41);
      v31 = v30;
      v18 = v34;
    }
    else
    {
      (*(void (**)(_BYTE *, _QWORD *))(*(_QWORD *)buf + 24))(buf, v30);
      (*(void (**)(_BYTE *))(*(_QWORD *)v34 + 32))(v34);
      v18 = v31;
      v34 = v31;
      v31 = v30;
    }
  }
  else
  {
    if (v31 == v30)
    {
      v18 = buf;
      (*(void (**)(_QWORD *, _BYTE *))(v30[0] + 24))(v30, buf);
      (*(void (**)(_QWORD *))(*v31 + 32))(v31);
      v31 = v34;
      v34 = buf;
      v23 = 4;
      goto LABEL_31;
    }
    v34 = v31;
    v31 = v17;
  }
  if (v18 == buf)
  {
    v23 = 4;
    v18 = buf;
  }
  else
  {
    if (!v18)
      goto LABEL_32;
    v23 = 5;
  }
LABEL_31:
  (*(void (**)(_BYTE *))(*(_QWORD *)v18 + 8 * v23))(v18);
LABEL_32:
  std::mutex::unlock(&stru_100100178);
  if (v31)
  {
    *(_OWORD *)buf = *(_OWORD *)output;
    (*(void (**)(_QWORD *, _BYTE *))(*v31 + 48))(v31, buf);
    v24 = v31;
    if (v31 == v30)
    {
      v25 = 4;
      v24 = v30;
      goto LABEL_37;
    }
    if (v31)
    {
      v25 = 5;
LABEL_37:
      (*(void (**)(void))(*v24 + 8 * v25))();
    }
  }
LABEL_38:
  IOServiceClose(connection);
}

void sub_100050A94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v19;
  uint64_t v20;

  v19 = a18;
  if (a18 == &a15)
  {
    v20 = 4;
    v19 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

BOOL sub_100050B00(uint64_t a1, io_connect_t *a2)
{
  kern_return_t v4;
  kern_return_t v5;
  uint64_t v6;
  _BOOL8 result;
  const __CFDictionary *v8;
  kern_return_t MatchingServices;
  kern_return_t v10;
  const char *v11;
  uint64_t v12;
  NSObject *v13;
  uint32_t v14;
  io_service_t v15;
  kern_return_t v16;
  kern_return_t v17;
  uint64_t v18;
  io_iterator_t existing;
  mach_port_t mainPort;
  uint8_t buf[4];
  const char *v22;

  mainPort = 0;
  v4 = IOMainPort(0, &mainPort);
  if (v4)
  {
    v5 = v4;
    v6 = qword_100100838;
    result = os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    *(_DWORD *)buf = 67240192;
    LODWORD(v22) = v5;
    v11 = "#gpio,IOMasterPort failed,%{public}d";
    goto LABEL_15;
  }
  v8 = IOServiceMatching("AppleEmbeddedGPSControl");
  if (v8)
  {
    existing = 0;
    MatchingServices = IOServiceGetMatchingServices(mainPort, v8, &existing);
    if (MatchingServices)
    {
      v10 = MatchingServices;
      v6 = qword_100100838;
      result = os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_DWORD *)buf = 67240192;
        LODWORD(v22) = v10;
        v11 = "#gpio,IOServiceGetMatchingServices failed,%{public}d";
LABEL_15:
        v13 = v6;
        v14 = 8;
        goto LABEL_16;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 16) = IOIteratorNext(existing);
      IOObjectRelease(existing);
      v15 = *(_DWORD *)(a1 + 16);
      if (v15)
      {
        v16 = IOServiceOpen(v15, mach_task_self_, 0, a2);
        if (!v16)
          return 1;
        v17 = v16;
        v6 = qword_100100838;
        result = os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR);
        if (result)
        {
          *(_DWORD *)buf = 67240192;
          LODWORD(v22) = v17;
          v11 = "#gpio,IOServiceOpen failed,%{public}d";
          goto LABEL_15;
        }
      }
      else
      {
        v18 = qword_100100838;
        result = os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR);
        if (result)
        {
          *(_WORD *)buf = 0;
          v11 = "#gpio,No fServiceObject";
          v13 = v18;
          v14 = 2;
          goto LABEL_16;
        }
      }
    }
  }
  else
  {
    v12 = qword_100100838;
    result = os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_DWORD *)buf = 136315138;
      v22 = "AppleEmbeddedGPSControl";
      v11 = "#gpio,IOServiceMatching failed,%s";
      v13 = v12;
      v14 = 12;
LABEL_16:
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, v11, buf, v14);
      return 0;
    }
  }
  return result;
}

void sub_100050D40(uint64_t a1, int a2)
{
  uint64_t v4;
  NSObject *v5;
  _BOOL4 v6;
  NSObject *v7;
  int v8;
  int v9;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = qword_100100838;
  v6 = os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO);
  if (v4)
  {
    if (v6)
    {
      v8 = 67240192;
      v9 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "#gpio,notifyDevice,int,sending,%{public}d,", (uint8_t *)&v8, 8u);
      v4 = *(_QWORD *)(a1 + 32);
      v8 = a2;
      if (!v4)
        sub_100025CE8();
    }
    else
    {
      v8 = a2;
    }
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v4 + 48))(v4, &v8);
  }
  else if (v6)
  {
    v8 = 67240192;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "#gpio,notifyDevice,int,no callback,%{public}d,", (uint8_t *)&v8, 8u);
  }
  v7 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO))
  {
    LOWORD(v8) = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "#gpio,notifyDevice,done", (uint8_t *)&v8, 2u);
  }
}

void sub_100050E98(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  int v12;
  _QWORD v13[2];

  v6 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO))
  {
    v12 = 67240448;
    LODWORD(v13[0]) = a3;
    WORD2(v13[0]) = 2050;
    *(_QWORD *)((char *)v13 + 6) = a4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#gpio,callback,begin,%{public}u,%{public}llu", (uint8_t *)&v12, 0x12u);
  }
  std::mutex::lock(&stru_100100178);
  v7 = sub_10004FD70();
  if (*(_QWORD *)v7)
  {
    v8 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO))
    {
      LOWORD(v12) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "#gpio,callback,locked", (uint8_t *)&v12, 2u);
    }
    if (a4)
    {
      if (a4 == 1)
      {
        sub_100050D40(*(_QWORD *)v7, 0);
        ++*(_DWORD *)(v7 + 24);
      }
      else
      {
        v10 = qword_100100838;
        if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
        {
          v12 = 134349056;
          v13[0] = a4;
          _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#gpio,Unrecognized messageArg,%{public}llu", (uint8_t *)&v12, 0xCu);
        }
      }
    }
    else
    {
      sub_100050D40(*(_QWORD *)v7, 1);
      ++*(_DWORD *)(v7 + 20);
    }
  }
  else
  {
    v9 = qword_100100830;
    if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
    {
      v12 = 134349056;
      v13[0] = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#gpio,pGpioObject null,%{public}llu", (uint8_t *)&v12, 0xCu);
    }
  }
  v11 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO))
  {
    LOWORD(v12) = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "#gpio,callback,end", (uint8_t *)&v12, 2u);
  }
  std::mutex::unlock(&stru_100100178);
}

void sub_1000510CC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1000510EC(uint64_t a1, _QWORD *a2)
{
  NSObject *v4;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD v12[3];
  _QWORD *v13;
  _QWORD v14[3];

  v4 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO))
  {
    v5 = a2[3] == 0;
    LODWORD(v12[0]) = 67240192;
    HIDWORD(v12[0]) = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#gpio,setGpioNotifier,int,isNull,%{public}d", (uint8_t *)v12, 8u);
  }
  std::mutex::lock(&stru_100100178);
  v6 = a2[3];
  if (!v6)
    goto LABEL_6;
  if ((_QWORD *)v6 != a2)
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
LABEL_6:
    v13 = (_QWORD *)v6;
    goto LABEL_8;
  }
  v13 = v12;
  (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v12);
LABEL_8:
  v7 = a1 + 8;
  if (v12 != (_QWORD *)(a1 + 8))
  {
    v8 = v13;
    v9 = *(_QWORD *)(a1 + 32);
    if (v13 == v12)
    {
      if (v9 == v7)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v12[0] + 24))(v12, v14);
        (*(void (**)(_QWORD *))(*v13 + 32))(v13);
        v13 = 0;
        (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), v12);
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
        *(_QWORD *)(a1 + 32) = 0;
        v13 = v12;
        (*(void (**)(_QWORD *, uint64_t))(v14[0] + 24))(v14, a1 + 8);
        (*(void (**)(_QWORD *))(v14[0] + 32))(v14);
      }
      else
      {
        (*(void (**)(_QWORD *, uint64_t))(v12[0] + 24))(v12, a1 + 8);
        (*(void (**)(_QWORD *))(*v13 + 32))(v13);
        v13 = *(_QWORD **)(a1 + 32);
      }
      *(_QWORD *)(a1 + 32) = v7;
    }
    else if (v9 == v7)
    {
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 24))(a1 + 8, v12);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
      *(_QWORD *)(a1 + 32) = v13;
      v13 = v12;
    }
    else
    {
      v13 = *(_QWORD **)(a1 + 32);
      *(_QWORD *)(a1 + 32) = v8;
    }
  }
  v10 = v13;
  if (v13 == v12)
  {
    v11 = 4;
    v10 = v12;
    goto LABEL_21;
  }
  if (v13)
  {
    v11 = 5;
LABEL_21:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  std::mutex::unlock(&stru_100100178);
}

void sub_100051348(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_10002579C(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_100051378(id a1)
{
  operator new();
}

void sub_1000515F0()
{
  operator delete();
}

uint64_t sub_100051614()
{
  return __cxa_atexit((void (*)(void *))&std::mutex::~mutex, &stru_100100178, (void *)&_mh_execute_header);
}

void sub_100051630(const char *a1)
{
  NSObject *v2;
  int v3;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;

  if (unlink(a1))
  {
    v2 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      v3 = *__error();
      v4 = 136446466;
      v5 = a1;
      v6 = 1026;
      v7 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "VendorLogger,deleteFile could not unlink,%{public}s,%{public}d", (uint8_t *)&v4, 0x12u);
    }
  }
}

BOOL sub_1000516EC(const char *a1, timespec *a2, off_t *a3)
{
  int v6;
  NSObject *v7;
  int v8;
  stat v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  int v14;

  v6 = stat(a1, &v10);
  if (v6)
  {
    v7 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      v8 = *__error();
      *(_DWORD *)buf = 136446466;
      v12 = a1;
      v13 = 1026;
      v14 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "VendorLogger,getFileModificationTime could not stat,%{public}s,%{public}d", buf, 0x12u);
    }
  }
  else
  {
    *a2 = v10.st_mtimespec;
    *a3 = v10.st_size;
  }
  return v6 == 0;
}

void sub_1000517DC(uint64_t a1)
{
  std::ios_base *v2;
  const std::__fs::filesystem::path *v3;
  NSObject *v4;
  int64_t size;
  std::string *p_buf;
  void **v7;
  int64_t v8;
  NSObject *v9;
  std::string::size_type v10;
  void **v11;
  std::string::size_type v12;
  NSObject *v13;
  std::error_code *v14;
  uint64_t v15;
  std::string *v16;
  const std::__fs::filesystem::path *v17;
  int v18;
  NSObject *v19;
  char *v20;
  int v21;
  std::string *v22;
  int64_t v23;
  char *v24;
  char *v25;
  int v26;
  void *__p[2];
  unsigned __int8 v28;
  void *v29[2];
  unsigned __int8 v30;
  std::string buf;
  uint8_t v32[4];
  std::string *v33;
  __int16 v34;
  std::string *v35;

  sub_100053184(a1);
  if (*(_QWORD *)(a1 + 416))
  {
    std::ostream::flush(a1 + 288);
    if (!std::filebuf::close(a1 + 296))
    {
      v2 = (std::ios_base *)(a1 + 288 + *(_QWORD *)(*(_QWORD *)(a1 + 288) - 24));
      std::ios_base::clear(v2, v2->__rdstate_ | 4);
    }
    v3 = (const std::__fs::filesystem::path *)(a1 + 856);
    if (*(char *)(a1 + 879) < 0)
    {
      sub_100031B50(&buf, *(void **)(a1 + 856), *(_QWORD *)(a1 + 864));
    }
    else
    {
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = *(_OWORD *)&v3->__pn_.__r_.__value_.__l.__data_;
      buf.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 872);
    }
    sub_100053490((uint64_t)v29, (const void **)(a1 + 24), (const void **)(a1 + 72));
    sub_100053490((uint64_t)__p, (const void **)(a1 + 48), (const void **)(a1 + 72));
    size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_buf = &buf;
    else
      p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    if ((v30 & 0x80u) == 0)
      v7 = v29;
    else
      v7 = (void **)v29[0];
    if ((v30 & 0x80u) == 0)
      v8 = v30;
    else
      v8 = (int64_t)v29[1];
    if (v8)
    {
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = buf.__r_.__value_.__l.__size_;
      if (size >= v8)
      {
        v20 = (char *)p_buf + size;
        v21 = *(char *)v7;
        v22 = p_buf;
        do
        {
          v23 = size - v8;
          if (v23 == -1)
            break;
          v24 = (char *)memchr(v22, v21, v23 + 1);
          if (!v24)
            break;
          v25 = v24;
          if (!memcmp(v24, v7, v8))
          {
            if (v25 != v20)
            {
              v10 = v25 - (char *)p_buf;
              if (v25 - (char *)p_buf != -1)
                goto LABEL_25;
            }
            break;
          }
          v22 = (std::string *)(v25 + 1);
          size = v20 - (v25 + 1);
        }
        while (size >= v8);
      }
      v9 = qword_100100830;
      if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v32 = 136315138;
        v33 = p_buf;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "VendorLogger,closeLogFile,Could not archive,%s", v32, 0xCu);
      }
    }
    else
    {
      v10 = 0;
LABEL_25:
      if ((v28 & 0x80u) == 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      if ((v28 & 0x80u) == 0)
        v12 = v28;
      else
        v12 = (std::string::size_type)__p[1];
      std::string::replace(&buf, v10, v8, (const std::string::value_type *)v11, v12);
      v13 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO))
      {
        v15 = a1 + 856;
        if (*(char *)(a1 + 879) < 0)
          v15 = v3->__pn_.__r_.__value_.__r.__words[0];
        v16 = &buf;
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v16 = (std::string *)buf.__r_.__value_.__r.__words[0];
        *(_DWORD *)v32 = 136315394;
        v33 = (std::string *)v15;
        v34 = 2080;
        v35 = v16;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "VendorLogger,closeLogFile,Archiving,Old name,%s,New name,%s", v32, 0x16u);
      }
      if (*(char *)(a1 + 879) < 0)
        v3 = (const std::__fs::filesystem::path *)v3->__pn_.__r_.__value_.__r.__words[0];
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = (const std::__fs::filesystem::path *)&buf;
      else
        v17 = (const std::__fs::filesystem::path *)buf.__r_.__value_.__r.__words[0];
      rename(v3, v17, v14);
      if (v18)
      {
        v19 = qword_100100838;
        if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
        {
          v26 = *__error();
          *(_DWORD *)v32 = 67240192;
          LODWORD(v33) = v26;
          _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "VendorLogger,closeLogFile,rename failed,%{public}d", v32, 8u);
        }
      }
    }
    if (*(char *)(a1 + 879) < 0)
    {
      **(_BYTE **)(a1 + 856) = 0;
      *(_QWORD *)(a1 + 864) = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 856) = 0;
      *(_BYTE *)(a1 + 879) = 0;
    }
    if ((char)v28 < 0)
      operator delete(__p[0]);
    if ((char)v30 < 0)
      operator delete(v29[0]);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
  }
  else
  {
    v4 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "VendorLogger,closeLogFile,No output to close", (uint8_t *)&buf, 2u);
    }
  }
  *(_BYTE *)(a1 + 892) = 0;
}

void sub_100051B98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

id sub_100051BF0(uint64_t a1, const void **a2, uint64_t *a3)
{
  NSArray *v5;
  id result;
  id v7;
  uint64_t v8;
  void *v9;
  char *v10;
  int v11;
  unint64_t v12;
  unsigned __int8 v13;
  size_t v14;
  const void *v15;
  NSObject *v16;
  const void *v17;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  NSEnumerator *obj;
  void *__p[2];
  uint64_t v33;
  void *v34;
  size_t v35;
  unsigned __int8 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint8_t buf[8];
  char *v42;
  char *v43;
  char *v44;
  uint64_t *v45;
  _BYTE v46[128];

  v5 = -[NSFileManager contentsOfDirectoryAtPath:error:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "contentsOfDirectoryAtPath:error:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a1), 0);
  sub_10003C324(a3);
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  obj = -[NSArray reverseObjectEnumerator](v5, "reverseObjectEnumerator");
  result = -[NSEnumerator countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v37, v46, 16);
  v7 = result;
  if (result)
  {
    v8 = *(_QWORD *)v38;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v38 != v8)
          objc_enumerationMutation(obj);
        v10 = (char *)objc_msgSend(*(id *)(*((_QWORD *)&v37 + 1) + 8 * (_QWORD)v9), "UTF8String");
        if (v10)
        {
          sub_100025B58(&v34, v10);
          v11 = *((char *)a2 + 23);
          if (v11 >= 0)
            v12 = *((unsigned __int8 *)a2 + 23);
          else
            v12 = (unint64_t)a2[1];
          v13 = v36;
          if ((char)v36 < 0)
          {
            if (v12 == -1)
LABEL_49:
              sub_100045A38();
            v15 = v34;
            if (v35 >= v12)
              v14 = v12;
            else
              v14 = v35;
          }
          else
          {
            if (v12 == -1)
              goto LABEL_49;
            if (v36 >= v12)
              v14 = v12;
            else
              v14 = v36;
            v15 = &v34;
          }
          if (v11 >= 0)
            v17 = a2;
          else
            v17 = *a2;
          if (!memcmp(v15, v17, v14) && v14 == v12)
          {
            sub_100025B58(__p, v10);
            v20 = a3[1];
            v19 = a3[2];
            if (v20 >= v19)
            {
              v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *a3) >> 3);
              v23 = v22 + 1;
              if (v22 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_100026868();
              v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *a3) >> 3);
              if (2 * v24 > v23)
                v23 = 2 * v24;
              if (v24 >= 0x555555555555555)
                v25 = 0xAAAAAAAAAAAAAAALL;
              else
                v25 = v23;
              v45 = a3 + 2;
              if (v25)
                v26 = (char *)sub_10003C3E4((uint64_t)(a3 + 2), v25);
              else
                v26 = 0;
              v27 = &v26[24 * v22];
              *(_QWORD *)buf = v26;
              v42 = v27;
              v44 = &v26[24 * v25];
              v28 = *(_OWORD *)__p;
              *((_QWORD *)v27 + 2) = v33;
              *(_OWORD *)v27 = v28;
              __p[1] = 0;
              v33 = 0;
              __p[0] = 0;
              v43 = v27 + 24;
              sub_10003C370(a3, buf);
              v29 = a3[1];
              sub_10003C53C((uint64_t)buf);
              v30 = SHIBYTE(v33);
              a3[1] = v29;
              if (v30 < 0)
                operator delete(__p[0]);
            }
            else
            {
              v21 = *(_OWORD *)__p;
              *(_QWORD *)(v20 + 16) = v33;
              *(_OWORD *)v20 = v21;
              a3[1] = v20 + 24;
            }
            v13 = v36;
          }
          if ((v13 & 0x80) != 0)
            operator delete(v34);
        }
        else
        {
          v16 = qword_100100838;
          if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "VendorLogger,pruneLogFiles,null filename from reverseEnumerateFiles", buf, 2u);
          }
        }
        v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      result = -[NSEnumerator countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v37, v46, 16);
      v7 = result;
    }
    while (result);
  }
  return result;
}

void sub_100051F14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void VendorLogger::generateDefaultConfig(uint64_t a1@<X8>)
{
  void **v3;
  id *v4;
  float v5;
  GpsdPreferences *v6;
  id *v7;
  id *v8;
  id *v9;
  id *v10;
  id *v11;
  unsigned int LogLevel;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  id *v17;
  unsigned int v18;
  unsigned int v19;
  __int128 v20;
  uint64_t v21;

  sub_100025B58((_QWORD *)a1, "gpsd");
  sub_100025B58((_QWORD *)(a1 + 24), "o");
  sub_100025B58((_QWORD *)(a1 + 48), "");
  sub_100025B58((_QWORD *)(a1 + 72), "log");
  *(_OWORD *)(a1 + 96) = 0u;
  v3 = (void **)(a1 + 96);
  *(_QWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 196) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 200) = 2;
  memset_pattern16((void *)(a1 + 160), &unk_1000D37A0, 0x24uLL);
  v4 = (id *)GpsdPreferences::instance(0);
  GpsdPreferences::vendorLogRetentionDays(v4);
  *(double *)(a1 + 120) = (float)((float)(v5 * 24.0) * 3600.0);
  v6 = (GpsdPreferences *)GpsdPreferences::instance(0);
  *(_QWORD *)(a1 + 128) = (uint64_t)(int)GpsdPreferences::vendorLogRotationSizeMB(v6) << 20;
  v7 = (id *)GpsdPreferences::instance(0);
  *(_QWORD *)(a1 + 136) = (uint64_t)(int)GpsdPreferences::vendorLogMaxDirectorySizeMB(v7) << 20;
  v8 = (id *)GpsdPreferences::instance(0);
  *(_DWORD *)(a1 + 144) = GpsdPreferences::vendorLogMaxNumberOfFiles(v8);
  v9 = (id *)GpsdPreferences::instance(0);
  *(_BYTE *)(a1 + 196) = GpsdPreferences::vendorLogPrefixWithTimestamp(v9);
  v10 = (id *)GpsdPreferences::instance(0);
  GpsdPreferences::vendorLogDirectory(v10, &v20);
  if (*(char *)(a1 + 119) < 0)
    operator delete(*v3);
  *(_OWORD *)v3 = v20;
  *(_QWORD *)(a1 + 112) = v21;
  *(_QWORD *)(a1 + 152) &= 0xFFFFFFFFFFFFFE00;
  v11 = (id *)GpsdPreferences::instance(0);
  LogLevel = GpsdPreferences::getLogLevel(v11);
  v13 = 0;
  v14 = *(_QWORD *)(a1 + 152);
  if (LogLevel >= 8)
    v15 = 8;
  else
    v15 = LogLevel;
  v16 = (v15 + 1);
  do
  {
    if (v13)
    {
      v14 |= 1 << v13;
      *(_QWORD *)(a1 + 152) = v14;
    }
    ++v13;
  }
  while (v16 != v13);
  v17 = (id *)GpsdPreferences::instance(0);
  v18 = GpsdPreferences::vendorLogAllToOsLog(v17);
  memset_pattern16((void *)(a1 + 160), &unk_1000D37A0, 0x24uLL);
  if (v18)
  {
    *(_OWORD *)(a1 + 164) = xmmword_1000D43A0;
    *(_QWORD *)(a1 + 180) = 0x400000003;
    *(_DWORD *)(a1 + 192) = 4;
  }
  else
  {
    *(_QWORD *)(a1 + 164) = &_mh_execute_header;
    v19 = *(_DWORD *)(GpsdPlatformInfo::instance(0) + 8) - 103;
    if (v19 <= 4 && ((1 << v19) & 0x19) != 0)
    {
      *(_DWORD *)(a1 + 176) = 2;
    }
    else
    {
      GpsdPlatformInfo::instance(0);
      *(_DWORD *)(a1 + 172) = 2;
    }
  }
}

void sub_1000521A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1000469B8(v1);
  _Unwind_Resume(a1);
}

char *VendorLogger::VendorLogger(char *__dst, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _BYTE *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  std::ios_base *v18;
  NSObject *v19;
  dispatch_queue_t v20;
  id *v21;
  int v22;
  id *v23;
  id *v24;
  NSObject *v25;
  int v26;
  const char *v27;
  NSObject *v29;
  void *__p[2];
  char v31;
  void *v32[2];
  char v33;
  void *v34[2];
  char v35;
  uint8_t buf[4];
  const char *v37;
  __int16 v38;
  int v39;
  __int16 v40;
  const char *v41;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100031B50(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_100031B50(__dst + 24, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_100031B50(__dst + 48, *((void **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = a2[3];
    *((_QWORD *)__dst + 8) = *((_QWORD *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    sub_100031B50(__dst + 72, *((void **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v7 = *(__int128 *)((char *)a2 + 72);
    *((_QWORD *)__dst + 11) = *((_QWORD *)a2 + 11);
    *(_OWORD *)(__dst + 72) = v7;
  }
  v8 = __dst + 96;
  if (*((char *)a2 + 119) < 0)
  {
    sub_100031B50(v8, *((void **)a2 + 12), *((_QWORD *)a2 + 13));
  }
  else
  {
    v9 = a2[6];
    *((_QWORD *)__dst + 14) = *((_QWORD *)a2 + 14);
    *(_OWORD *)v8 = v9;
  }
  v10 = *(__int128 *)((char *)a2 + 152);
  v11 = *(__int128 *)((char *)a2 + 168);
  v12 = *(__int128 *)((char *)a2 + 184);
  v13 = *((_DWORD *)a2 + 50);
  v14 = *(__int128 *)((char *)a2 + 120);
  v15 = *(__int128 *)((char *)a2 + 136);
  *((_QWORD *)__dst + 26) = 0;
  *(_OWORD *)(__dst + 136) = v15;
  *(_OWORD *)(__dst + 120) = v14;
  *((_DWORD *)__dst + 50) = v13;
  *(_OWORD *)(__dst + 184) = v12;
  *(_OWORD *)(__dst + 168) = v11;
  *(_OWORD *)(__dst + 152) = v10;
  *((_QWORD *)__dst + 27) = 0;
  *((_QWORD *)__dst + 28) = 0;
  *((_DWORD *)__dst + 68) = 2049;
  *((_WORD *)__dst + 138) = 0;
  *((_QWORD *)__dst + 35) = 0;
  *((_QWORD *)__dst + 36) = v16;
  *(_QWORD *)&__dst[*(_QWORD *)(v16 - 24) + 288] = v17;
  v18 = (std::ios_base *)&__dst[*(_QWORD *)(*((_QWORD *)__dst + 36) - 24) + 288];
  std::ios_base::init(v18, __dst + 296);
  v18[1].__vftable = 0;
  v18[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf(__dst + 296);
  *((_DWORD *)__dst + 224) = 0;
  *(_OWORD *)(__dst + 856) = 0u;
  *(_OWORD *)(__dst + 872) = 0u;
  *(_QWORD *)(__dst + 885) = 0;
  if ((*((_WORD *)__dst + 76) & 0x1FF) == 0)
    goto LABEL_39;
  v19 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_DEFAULT, 0);
  v20 = dispatch_queue_create("com.apple.gpsd.vendor_log", v19);
  *((_QWORD *)__dst + 110) = v20;
  if (!v20)
  {
    v29 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "null fInternalWorkerQueue", buf, 2u);
      v29 = qword_100100838;
    }
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v37 = "/Library/Caches/com.apple.xbs/Sources/CoreGPS/Sources/Daemon/GpsdVendorLogger.mm";
      v38 = 1026;
      v39 = 174;
      v40 = 2082;
      v41 = "VendorLogger";
      _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: assertion failure in %{public}s", buf, 0x1Cu);
    }
    sub_100025B58(v34, "assert");
    sub_100025B58(v32, "VendorLogger");
    sub_100025B58(__p, "null fInternalWorkerQueue");
    gpsd::util::triggerDiagnosticReport((uint64_t)v34, (__int128 *)v32, (__int128 *)__p);
    if (v31 < 0)
      operator delete(__p[0]);
    if (v33 < 0)
      operator delete(v32[0]);
    if (v35 < 0)
      operator delete(v34[0]);
    __assert_rtn("VendorLogger", "GpsdVendorLogger.mm", 174, "false && \"null fInternalWorkerQueue\"");
  }
  v21 = (id *)GpsdPreferences::instance(0);
  if ((GpsdPreferences::vendorLogLz4(v21) & 1) != 0)
  {
    v22 = 256;
LABEL_24:
    __dst[276] = 1;
    *((_DWORD *)__dst + 68) = v22;
    goto LABEL_25;
  }
  v23 = (id *)GpsdPreferences::instance(0);
  if ((GpsdPreferences::vendorLogLzfse(v23) & 1) != 0)
  {
    v22 = 2049;
    goto LABEL_24;
  }
  v24 = (id *)GpsdPreferences::instance(0);
  if ((GpsdPreferences::vendorLogZlib(v24) & 1) != 0)
  {
    v22 = 517;
    goto LABEL_24;
  }
  if (!__dst[276])
    goto LABEL_39;
LABEL_25:
  v25 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO))
  {
    v26 = *((_DWORD *)__dst + 68);
    if (v26 > 773)
    {
      if (v26 == 774)
      {
        v27 = "lzma";
        goto LABEL_38;
      }
      if (v26 == 2049)
      {
        v27 = "lzfse";
        goto LABEL_38;
      }
    }
    else
    {
      if (v26 == 256)
      {
        v27 = "lz4";
        goto LABEL_38;
      }
      if (v26 == 517)
      {
        v27 = "zlib";
LABEL_38:
        *(_DWORD *)buf = 136446210;
        v37 = v27;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "VendorLogger,compression enabled,%{public}s", buf, 0xCu);
        goto LABEL_39;
      }
    }
    v27 = "unk";
    goto LABEL_38;
  }
LABEL_39:
  sub_10005286C((uint64_t)__dst);
  return __dst;
}

void sub_1000526C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  void **v28;
  void **v29;
  void **v30;

  if (*(char *)(v27 + 95) < 0)
    operator delete(*v30);
  if (*(char *)(v27 + 71) < 0)
    operator delete(*v29);
  if (*(char *)(v27 + 47) < 0)
    operator delete(*v28);
  if (*(char *)(v27 + 23) < 0)
    operator delete(*(void **)v27);
  _Unwind_Resume(exception_object);
}

void VendorLogger::VendorLogger(VendorLogger *this)
{
  void *v2[2];
  char v3;
  void *v4;
  char v5;
  void *v6;
  char v7;
  void *v8;
  char v9;
  void *__p;
  char v11;

  VendorLogger::generateDefaultConfig((uint64_t)v2);
  VendorLogger::VendorLogger((char *)this, (__int128 *)v2);
  if (v11 < 0)
    operator delete(__p);
  if (v9 < 0)
    operator delete(v8);
  if (v7 < 0)
    operator delete(v6);
  if (v5 < 0)
    operator delete(v4);
  if (v3 < 0)
    operator delete(v2[0]);
}

void sub_100052858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000469B8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10005286C(uint64_t a1)
{
  const char **v2;
  int v3;
  const char *v4;
  int v5;
  const char *v6;
  NSObject *v7;
  std::string::size_type v8;
  uint64_t v9;
  std::string::size_type v10;
  int v11;
  NSObject *v12;
  int v13;
  const char *v14;
  NSObject *v15;
  uint32_t v16;
  size_t v17;
  std::string *v18;
  const char **v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *p_buf;
  std::string::size_type size;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  void **v32;
  std::string::size_type v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  __int128 v37;
  int v38;
  const std::string::value_type *v39;
  std::string::size_type v40;
  std::string *v41;
  __int128 v42;
  int v43;
  const std::string::value_type *v44;
  std::string::size_type v45;
  std::string *v46;
  std::string::size_type v47;
  char v48;
  int v49;
  const std::string::value_type *v50;
  void **v51;
  NSObject *v52;
  NSObject *v53;
  std::string v54;
  void *__p[2];
  unsigned __int8 v56;
  std::string v57;
  std::string v58;
  std::string v59;
  std::string v60;
  std::string v61;
  std::string v62;
  std::string v63;
  std::string v64;
  _QWORD v65[2];
  std::string buf;
  char __str[8];

  if ((*(_WORD *)(a1 + 152) & 0x1FF) == 0)
    return;
  v2 = (const char **)(a1 + 96);
  v3 = *(char *)(a1 + 119);
  v4 = (const char *)(a1 + 96);
  if (v3 < 0)
    v4 = *v2;
  if (mkdir(v4, 0x1F8u))
  {
    v5 = *__error();
    if (v5 != 17)
    {
      v9 = qword_100100838;
      if (!os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
        goto LABEL_22;
      if (*(char *)(a1 + 119) < 0)
        v10 = (std::string::size_type)*v2;
      else
        v10 = (std::string::size_type)v2;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v10;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v5;
      v14 = "VendorLogger,could not create directory,%{public}s,%{public}d";
      v15 = v9;
      v16 = 18;
LABEL_112:
      _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, v14, (uint8_t *)&buf, v16);
      goto LABEL_22;
    }
    if (*(char *)(a1 + 119) < 0)
      v6 = *v2;
    else
      v6 = (const char *)v2;
    v11 = chmod(v6, 0x1F8u);
    v12 = qword_100100838;
    if (v11)
    {
      if (!os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
        goto LABEL_22;
      v13 = *__error();
      LODWORD(buf.__r_.__value_.__l.__data_) = 67240192;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v13;
      v14 = "VendorLogger,chmod failed,%{public}d";
      v15 = v12;
      v16 = 8;
      goto LABEL_112;
    }
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
    {
      buf.__r_.__value_.__r.__words[0] = 0x1F804000100;
      _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "VendorLogger,directory exists,permissions,%x", (uint8_t *)&buf, 8u);
    }
  }
  else
  {
    v7 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO))
    {
      if (*(char *)(a1 + 119) < 0)
        v8 = (std::string::size_type)*v2;
      else
        v8 = (std::string::size_type)v2;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v8;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = 504;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "VendorLogger,created directory,%{public}s,permissions,%x", (uint8_t *)&buf, 0x12u);
    }
  }
LABEL_22:
  sub_100053554(a1);
  sub_100053C1C(a1);
  snprintf(__str, 8uLL, "%03d", *(_DWORD *)(a1 + 888));
  ++*(_DWORD *)(a1 + 888);
  memset(&v54, 0, sizeof(v54));
  VendorLogger::isoTimestampString(&buf);
  sub_100025B58(&v64, __str);
  if (*(_DWORD *)(GpsdPreferences::instance(0) + 8) == 3)
  {
    std::string::assign(&buf, "unittest");
    std::string::assign(&v64, "000");
  }
  if (*(char *)(a1 + 119) >= 0)
    v17 = *(unsigned __int8 *)(a1 + 119);
  else
    v17 = *(_QWORD *)(a1 + 104);
  v18 = &v57;
  sub_100055A5C((uint64_t)&v57, v17 + 1);
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v18 = (std::string *)v57.__r_.__value_.__r.__words[0];
  if (v17)
  {
    if (*(char *)(a1 + 119) >= 0)
      v19 = v2;
    else
      v19 = *(const char ***)(a1 + 96);
    memmove(v18, v19, v17);
  }
  *(_WORD *)((char *)&v18->__r_.__value_.__l.__data_ + v17) = 47;
  v20 = *(char *)(a1 + 23);
  if (v20 >= 0)
    v21 = (const std::string::value_type *)a1;
  else
    v21 = *(const std::string::value_type **)a1;
  if (v20 >= 0)
    v22 = *(unsigned __int8 *)(a1 + 23);
  else
    v22 = *(_QWORD *)(a1 + 8);
  v23 = std::string::append(&v57, v21, v22);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_buf = &buf;
  else
    p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  else
    size = buf.__r_.__value_.__l.__size_;
  v27 = std::string::append(&v58, (const std::string::value_type *)p_buf, size);
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  v29 = std::string::append(&v59, "_");
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v60.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v31 = &v64;
  else
    v31 = (std::string *)v64.__r_.__value_.__r.__words[0];
  sub_100025B58(__p, (char *)v31);
  if ((v56 & 0x80u) == 0)
    v32 = __p;
  else
    v32 = (void **)__p[0];
  if ((v56 & 0x80u) == 0)
    v33 = v56;
  else
    v33 = (std::string::size_type)__p[1];
  v34 = std::string::append(&v60, (const std::string::value_type *)v32, v33);
  v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v61.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  v36 = std::string::append(&v61, ".");
  v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  v62.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  v38 = *(char *)(a1 + 47);
  if (v38 >= 0)
    v39 = (const std::string::value_type *)(a1 + 24);
  else
    v39 = *(const std::string::value_type **)(a1 + 24);
  if (v38 >= 0)
    v40 = *(unsigned __int8 *)(a1 + 47);
  else
    v40 = *(_QWORD *)(a1 + 32);
  v41 = std::string::append(&v62, v39, v40);
  v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
  v63.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v42;
  v41->__r_.__value_.__l.__size_ = 0;
  v41->__r_.__value_.__r.__words[2] = 0;
  v41->__r_.__value_.__r.__words[0] = 0;
  v43 = *(char *)(a1 + 95);
  if (v43 >= 0)
    v44 = (const std::string::value_type *)(a1 + 72);
  else
    v44 = *(const std::string::value_type **)(a1 + 72);
  if (v43 >= 0)
    v45 = *(unsigned __int8 *)(a1 + 95);
  else
    v45 = *(_QWORD *)(a1 + 80);
  v46 = std::string::append(&v63, v44, v45);
  v47 = v46->__r_.__value_.__r.__words[0];
  v65[0] = v46->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v65 + 7) = *(std::string::size_type *)((char *)&v46->__r_.__value_.__r.__words[1] + 7);
  v48 = HIBYTE(v46->__r_.__value_.__r.__words[2]);
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  *(std::string::size_type *)((char *)&v54.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v65 + 7);
  v54.__r_.__value_.__r.__words[0] = v47;
  v54.__r_.__value_.__l.__size_ = v65[0];
  *((_BYTE *)&v54.__r_.__value_.__s + 23) = v48;
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  if ((char)v56 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  if (!*(_BYTE *)(a1 + 276))
    goto LABEL_95;
  std::string::append(&v54, ".");
  v49 = *(_DWORD *)(a1 + 272);
  if (v49 > 773)
  {
    if (v49 == 774)
    {
      v50 = "lzma";
      goto LABEL_94;
    }
    if (v49 == 2049)
    {
      v50 = "lzfse";
      goto LABEL_94;
    }
LABEL_91:
    v50 = "unk";
    goto LABEL_94;
  }
  if (v49 == 256)
  {
    v50 = "lz4";
    goto LABEL_94;
  }
  if (v49 != 517)
    goto LABEL_91;
  v50 = "zlib";
LABEL_94:
  std::string::append(&v54, v50);
LABEL_95:
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  v51 = (void **)(a1 + 856);
  if (*(char *)(a1 + 879) < 0)
    operator delete(*v51);
  *(_OWORD *)v51 = *(_OWORD *)&v54.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 872) = *((_QWORD *)&v54.__r_.__value_.__l + 2);
  std::ofstream::open(a1 + 288, a1 + 856, 4);
  v52 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a1 + 879) < 0)
      v51 = (void **)*v51;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v51;
    _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "VendorLogger,opening,%{public}s", (uint8_t *)&buf, 0xCu);
  }
  if (!*(_QWORD *)(a1 + 416))
  {
    v53 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_ERROR, "VendorLogger,failed to open", (uint8_t *)&buf, 2u);
    }
  }
  *(_DWORD *)(a1 + 896) = 0;
  *(_BYTE *)(a1 + 892) = 1;
}

void sub_100052F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  _Unwind_Resume(exception_object);
}

void VendorLogger::~VendorLogger(VendorLogger *this)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  _QWORD block[5];

  v2 = *((_QWORD *)this + 110);
  if (v2)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10005317C;
    block[3] = &unk_1000F0D30;
    block[4] = this;
    dispatch_sync(v2, block);
  }
  if (*((char *)this + 879) < 0)
    operator delete(*((void **)this + 107));
  std::filebuf::~filebuf((char *)this + 296);
  std::ios::~ios((char *)this + 704);
  v4 = (void *)*((_QWORD *)this + 26);
  if (v4)
  {
    *((_QWORD *)this + 27) = v4;
    operator delete(v4);
  }
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void sub_10005317C(uint64_t a1)
{
  sub_1000517DC(*(_QWORD *)(a1 + 32));
}

void sub_100053184(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  compression_status v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  char v15;
  uint8_t buf[4];
  char *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  compression_status v25;

  if (*(_BYTE *)(a1 + 276) && *(_BYTE *)(a1 + 277))
  {
    v2 = qword_100100838;
    do
    {
      while (1)
      {
        v15 = 0;
        *(_QWORD *)(a1 + 248) = &v15;
        *(_QWORD *)(a1 + 256) = 0;
        v3 = *(_QWORD *)(a1 + 208);
        v4 = *(_QWORD *)(a1 + 216) - v3;
        *(_QWORD *)(a1 + 232) = v3;
        *(_QWORD *)(a1 + 240) = v4;
        if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134218752;
          v17 = &v15;
          v18 = 2048;
          v19 = 0;
          v20 = 2048;
          v21 = v3;
          v22 = 2048;
          v23 = v4;
          _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "VendorLogger,flushCompression,before,%p,%zu,%p,%zu", buf, 0x2Au);
        }
        v5 = compression_stream_process((compression_stream *)(a1 + 232), 1);
        if (v5 > COMPRESSION_STATUS_END)
        {
          v9 = qword_100100838;
          if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "VendorLogger,flushCompression,failed to finalize stream", buf, 2u);
          }
        }
        else
        {
          v6 = *(_QWORD *)(a1 + 216) - *(_QWORD *)(a1 + 208);
          v7 = *(_QWORD *)(a1 + 240);
          v8 = qword_100100838;
          if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134217984;
            v17 = (char *)(v6 - v7);
            _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "VendorLogger,flushCompression,flushed bytes,%zu", buf, 0xCu);
          }
          if (v6 != v7)
            std::ostream::write(a1 + 288, *(_QWORD *)(a1 + 208), v6 - v7);
        }
        v2 = qword_100100838;
        if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
          break;
        if (v5)
          goto LABEL_17;
      }
      v10 = *(char **)(a1 + 248);
      v11 = *(_QWORD *)(a1 + 256);
      v12 = *(_QWORD *)(a1 + 232);
      v13 = *(_QWORD *)(a1 + 240);
      *(_DWORD *)buf = 134219008;
      v17 = v10;
      v18 = 2048;
      v19 = v11;
      v20 = 2048;
      v21 = v12;
      v22 = 2048;
      v23 = v13;
      v24 = 1024;
      v25 = v5;
      _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "VendorLogger,flushCompression,after,%p,%zu,%p,%zu,status,%d", buf, 0x30u);
      v2 = qword_100100838;
    }
    while (v5 == COMPRESSION_STATUS_OK);
LABEL_17:
    *(_BYTE *)(a1 + 277) = 0;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "VendorLogger,flushCompression,destroying", buf, 2u);
    }
    if (compression_stream_destroy((compression_stream *)(a1 + 232)))
    {
      v14 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "VendorLogger,flushCompression,failed to destroy stream", buf, 2u);
      }
    }
  }
}

uint64_t sub_100053490(uint64_t a1, const void **a2, const void **a3)
{
  size_t v5;
  size_t v6;
  uint64_t result;
  char *v8;
  const void *v9;
  char *v10;
  const void *v11;

  if (*((char *)a2 + 23) >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  if (*((char *)a3 + 23) >= 0)
    v6 = *((unsigned __int8 *)a3 + 23);
  else
    v6 = (size_t)a3[1];
  result = sub_100055A5C(a1, v6 + v5);
  if (*(char *)(result + 23) >= 0)
    v8 = (char *)result;
  else
    v8 = *(char **)result;
  if (v5)
  {
    if (*((char *)a2 + 23) >= 0)
      v9 = a2;
    else
      v9 = *a2;
    result = (uint64_t)memmove(v8, v9, v5);
  }
  v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a3 + 23) >= 0)
      v11 = a3;
    else
      v11 = *a3;
    result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

void sub_100053554(uint64_t a1)
{
  NSObject *v2;
  __darwin_time_t tv_sec;
  double v4;
  double v5;
  NSObject *v6;
  id *v7;
  char **v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  const void **v12;
  const void **v13;
  int v14;
  off_t v15;
  size_t v16;
  std::string *v17;
  const void *v18;
  int v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  void **v24;
  off_t v25;
  off_t v26;
  NSObject *v27;
  _BOOL4 v28;
  __darwin_time_t v29;
  void **v30;
  NSObject *v31;
  void **v32;
  NSObject *v33;
  void **v34;
  uint64_t v35;
  void **v36;
  NSObject *v37;
  const char *v38;
  uint32_t v39;
  void **v40;
  uint64_t v41;
  void **v42;
  void **v43;
  void **v44;
  void **v45;
  NSObject *v46;
  int v47;
  uint64_t v48;
  void *__p[2];
  int64_t v50;
  off_t v51;
  timespec v52;
  const void **v53;
  const void **v54;
  uint64_t v55;
  void *v56;
  size_t v57;
  unsigned __int8 v58;
  timespec __tp;
  std::string v60;
  uint64_t v61;
  __int16 v62;
  off_t v63;
  __int16 v64;
  off_t v65;

  if (*(_BYTE *)(a1 + 892))
  {
    sub_1000517DC(a1);
    if (clock_gettime(_CLOCK_REALTIME, &__tp))
    {
      v2 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
      {
        v47 = *__error();
        LODWORD(v60.__r_.__value_.__l.__data_) = 67240192;
        HIDWORD(v60.__r_.__value_.__r.__words[0]) = v47;
        _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "VendorLogger,pruneLogFiles,clock_gettime failed,%{public}d", (uint8_t *)&v60, 8u);
      }
    }
    tv_sec = __tp.tv_sec;
    v4 = (double)__tp.tv_sec;
    v5 = *(double *)(a1 + 120);
    if (v5 >= (double)__tp.tv_sec)
    {
      v6 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v60.__r_.__value_.__l.__data_) = 134349056;
        *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 4) = tv_sec;
        _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "VendorLogger,pruneLogFiles,timespecNow too small to use,%{public}ld", (uint8_t *)&v60, 0xCu);
        v5 = *(double *)(a1 + 120);
      }
    }
    v7 = (id *)GpsdPreferences::instance(0);
    GpsdPreferences::vendorLogDirectory(v7, &v56);
    v8 = &selRef_UTF8String;
    if ((char)v58 < 0)
    {
      if (v57)
      {
        v53 = 0;
        v54 = 0;
        v55 = 0;
        v9 = v56;
        goto LABEL_13;
      }
    }
    else if (v58)
    {
      v53 = 0;
      v54 = 0;
      v9 = &v56;
      v55 = 0;
LABEL_13:
      v48 = a1;
      sub_100051BF0((uint64_t)v9, (const void **)a1, (uint64_t *)&v53);
      v10 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v54 - v53));
      if (v54 == v53)
        v11 = 0;
      else
        v11 = v10;
      sub_100054B44((uint64_t)v53, v54, v11, 1);
      v51 = 0;
      v12 = v53;
      v13 = v54;
      if (v53 != v54)
      {
        v14 = 0;
        v15 = 0;
        do
        {
          if ((v58 & 0x80u) == 0)
            v16 = v58;
          else
            v16 = v57;
          sub_100055A5C((uint64_t)&v60, v16 + 1);
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v17 = &v60;
          else
            v17 = (std::string *)v60.__r_.__value_.__r.__words[0];
          if (v16)
          {
            if ((v58 & 0x80u) == 0)
              v18 = &v56;
            else
              v18 = v56;
            memmove(v17, v18, v16);
          }
          *(_WORD *)((char *)&v17->__r_.__value_.__l.__data_ + v16) = 47;
          v19 = *((char *)v12 + 23);
          if (v19 >= 0)
            v20 = (const std::string::value_type *)v12;
          else
            v20 = (const std::string::value_type *)*v12;
          if (v19 >= 0)
            v21 = *((unsigned __int8 *)v12 + 23);
          else
            v21 = (std::string::size_type)v12[1];
          v22 = std::string::append(&v60, v20, v21);
          v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
          v50 = v22->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v23;
          v22->__r_.__value_.__l.__size_ = 0;
          v22->__r_.__value_.__r.__words[2] = 0;
          v22->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v60.__r_.__value_.__l.__data_);
          if (v50 >= 0)
            v24 = __p;
          else
            v24 = (void **)__p[0];
          if (!sub_1000516EC((const char *)v24, &v52, &v51))
            goto LABEL_69;
          v25 = v51;
          v26 = v51 + v15;
          v27 = v8[263];
          v28 = os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG);
          v29 = v52.tv_sec;
          if (v28)
          {
            if (v50 >= 0)
              v42 = __p;
            else
              v42 = (void **)__p[0];
            LODWORD(v60.__r_.__value_.__l.__data_) = 136316162;
            *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 4) = (std::string::size_type)v42;
            WORD2(v60.__r_.__value_.__r.__words[1]) = 2048;
            *(std::string::size_type *)((char *)&v60.__r_.__value_.__r.__words[1] + 6) = v52.tv_sec;
            HIWORD(v60.__r_.__value_.__r.__words[2]) = 2048;
            v61 = (uint64_t)(v4 - v5);
            v62 = 2048;
            v63 = v25;
            v64 = 2048;
            v65 = v26;
            _os_log_debug_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "VendorLogger,pruneLogFiles,looking at,%s,modTime,%ld,floorTime,%ld,size,%lld,new total,%lld", (uint8_t *)&v60, 0x34u);
          }
          if (v29 >= (uint64_t)(v4 - v5))
          {
            if (v14 >= *(_DWORD *)(v48 + 144))
            {
              if (v50 >= 0)
                v34 = __p;
              else
                v34 = (void **)__p[0];
              sub_100051630((const char *)v34);
              v8 = &selRef_UTF8String;
              v35 = qword_100100838;
              if (!os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
                goto LABEL_68;
              if (v50 >= 0)
                v36 = __p;
              else
                v36 = (void **)__p[0];
              LODWORD(v60.__r_.__value_.__l.__data_) = 136315394;
              *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
              WORD2(v60.__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&v60.__r_.__value_.__r.__words[1] + 6) = v14 + 1;
              v37 = v35;
              v38 = "VendorLogger,pruneLogFiles,deleted due to num files,%s,num files,%d";
              v39 = 18;
              goto LABEL_86;
            }
            if (!v25)
            {
              if (v50 >= 0)
                v40 = __p;
              else
                v40 = (void **)__p[0];
              sub_100051630((const char *)v40);
              v8 = &selRef_UTF8String;
              v41 = qword_100100838;
              if (!os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
                goto LABEL_68;
              if (v50 >= 0)
                v44 = __p;
              else
                v44 = (void **)__p[0];
              LODWORD(v60.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 4) = (std::string::size_type)v44;
              v37 = v41;
              v38 = "VendorLogger,pruneLogFiles,deleted due to zero size,%s";
              v39 = 12;
LABEL_86:
              _os_log_debug_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, v38, (uint8_t *)&v60, v39);
LABEL_68:
              ++v14;
              goto LABEL_69;
            }
            if (v26 > *(_QWORD *)(v48 + 136))
            {
              if (v50 >= 0)
                v32 = __p;
              else
                v32 = (void **)__p[0];
              sub_100051630((const char *)v32);
              v8 = &selRef_UTF8String;
              v33 = qword_100100838;
              if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
              {
                if (v50 >= 0)
                  v45 = __p;
                else
                  v45 = (void **)__p[0];
                LODWORD(v60.__r_.__value_.__l.__data_) = 136315138;
                *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 4) = (std::string::size_type)v45;
                _os_log_debug_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "VendorLogger,pruneLogFiles,deleted due to size,%s", (uint8_t *)&v60, 0xCu);
              }
              v15 = v26;
              goto LABEL_68;
            }
            v15 = v26;
          }
          else
          {
            if (v50 >= 0)
              v30 = __p;
            else
              v30 = (void **)__p[0];
            sub_100051630((const char *)v30);
            v31 = qword_100100838;
            if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
            {
              if (v50 >= 0)
                v43 = __p;
              else
                v43 = (void **)__p[0];
              LODWORD(v60.__r_.__value_.__l.__data_) = 136315650;
              *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 4) = (std::string::size_type)v43;
              WORD2(v60.__r_.__value_.__r.__words[1]) = 2048;
              *(std::string::size_type *)((char *)&v60.__r_.__value_.__r.__words[1] + 6) = v29;
              HIWORD(v60.__r_.__value_.__r.__words[2]) = 2048;
              v61 = (uint64_t)(v4 - v5);
              _os_log_debug_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "VendorLogger,pruneLogFiles,deleted due to age,%s,fileTime,%ld,targetTime,%ld", (uint8_t *)&v60, 0x20u);
            }
          }
          ++v14;
          v8 = &selRef_UTF8String;
LABEL_69:
          if (SHIBYTE(v50) < 0)
            operator delete(__p[0]);
          v12 += 3;
        }
        while (v12 != v13);
      }
      v60.__r_.__value_.__r.__words[0] = (std::string::size_type)&v53;
      sub_10003C2E4((void ***)&v60);
      goto LABEL_94;
    }
    v46 = qword_100100830;
    if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v60.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "VendorLogger.pruneLogFiles: null path, cannot delete old logs", (uint8_t *)&v60, 2u);
    }
LABEL_94:
    if ((char)v58 < 0)
      operator delete(v56);
  }
}

void sub_100053BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  *(_QWORD *)(v37 - 176) = &a29;
  sub_10003C2E4((void ***)(v37 - 176));
  if (a37 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100053C1C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  NSObject *v4;
  NSObject *v5;
  uint8_t v6[16];
  uint8_t buf[16];

  if (*(_BYTE *)(a1 + 276))
  {
    *(_QWORD *)(a1 + 280) = 0;
    v2 = *(_QWORD *)(a1 + 208);
    v3 = *(_QWORD *)(a1 + 216) - v2;
    if (v3 >> 15)
    {
      if (v3 != 0x8000)
        *(_QWORD *)(a1 + 216) = v2 + 0x8000;
    }
    else
    {
      sub_100003748((unint64_t *)(a1 + 208), 0x8000 - v3);
    }
    v4 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "VendorLogger,initCompression", buf, 2u);
    }
    if (compression_stream_init((compression_stream *)(a1 + 232), COMPRESSION_STREAM_ENCODE, *(compression_algorithm *)(a1 + 272)))
    {
      v5 = qword_100100838;
      if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v6 = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "VendorLogger,initCompression,Could not init stream", v6, 2u);
      }
      *(_BYTE *)(a1 + 276) = 0;
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a1 + 208);
    }
    else
    {
      *(_BYTE *)(a1 + 277) = 1;
    }
  }
}

void sub_100053D38(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = qword_100100838;
  if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
  {
    v3 = (_QWORD *)(v1 + 856);
    if (*(char *)(v1 + 879) < 0)
      v3 = (_QWORD *)*v3;
    v4 = 136446210;
    v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "VendorLogger,notifyStart,activeFilename,%{public}s", (uint8_t *)&v4, 0xCu);
  }
  if (!*(_BYTE *)(v1 + 892) && (*(_WORD *)(v1 + 152) & 0x1FF) != 0)
    sub_10005286C(v1);
}

void VendorLogger::notifyStop(VendorLogger *this)
{
  NSObject *v1;
  NSObject *v3;
  _QWORD block[5];
  uint8_t buf[16];

  v1 = *((_QWORD *)this + 110);
  if (v1)
  {
    v3 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "VendorLogger,notifyStop,received", buf, 2u);
      v1 = *((_QWORD *)this + 110);
    }
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100053EB4;
    block[3] = &unk_1000F0D30;
    block[4] = this;
    dispatch_sync(v1, block);
  }
}

void sub_100053EB4(uint64_t a1)
{
  sub_100053554(*(_QWORD *)(a1 + 32));
}

void VendorLogger::flush(VendorLogger *this)
{
  NSObject *v1;
  NSObject *v3;
  _QWORD block[5];
  uint8_t buf[16];

  v1 = *((_QWORD *)this + 110);
  if (v1)
  {
    v3 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "VendorLogger,flush,received", buf, 2u);
      v1 = *((_QWORD *)this + 110);
    }
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100053F70;
    block[3] = &unk_1000F0D30;
    block[4] = this;
    dispatch_sync(v1, block);
  }
}

uint64_t sub_100053F70(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if ((*(_WORD *)(v1 + 152) & 0x1FF) != 0)
  {
    sub_100053184(*(_QWORD *)(result + 32));
    sub_100053C1C(v1);
    return std::ostream::flush(v1 + 288);
  }
  return result;
}

void VendorLogger::prepareForTermination(VendorLogger *this)
{
  NSObject *v1;
  NSObject *v3;
  _QWORD block[5];
  uint8_t buf[16];

  v1 = *((_QWORD *)this + 110);
  if (v1)
  {
    v3 = qword_100100838;
    if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "VendorLogger,prepareForTermination,received", buf, 2u);
      v1 = *((_QWORD *)this + 110);
    }
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10005406C;
    block[3] = &unk_1000F0D30;
    block[4] = this;
    dispatch_sync(v1, block);
  }
}

void sub_10005406C(uint64_t a1)
{
  sub_100053554(*(_QWORD *)(a1 + 32));
}

void sub_100054074(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  double v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  NSObject *v15;
  uint64_t v16;
  _QWORD *v17;
  size_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char __str[4];
  _BYTE v24[10];
  _BYTE v25[10];

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = (_QWORD *)(v3 + 48);
  v5 = *(double *)(a1 + 48);
  sub_1000543A0((gpsd::util *)v2, v5);
  if (*(_BYTE *)(v2 + 276))
  {
    if (*(_BYTE *)(v2 + 196))
    {
      v6 = snprintf(__str, 0x10uLL, "%.3f,", v5);
      if (v6 >= 1)
        sub_100054488(v2, (uint64_t)__str, v6);
    }
    v7 = *(char *)(v3 + 71);
    if (v7 >= 0)
      v8 = v3 + 48;
    else
      v8 = *(_QWORD *)(v3 + 48);
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(v3 + 71);
    else
      v9 = *(_QWORD *)(v3 + 56);
    sub_100054488(v2, v8, v9);
    if (*(char *)(v3 + 71) < 0)
    {
      v10 = *(_QWORD *)(v3 + 56);
      if (!v10)
        goto LABEL_24;
      v4 = (_QWORD *)*v4;
    }
    else
    {
      v10 = *(unsigned __int8 *)(v3 + 71);
      if (!*(_BYTE *)(v3 + 71))
        goto LABEL_24;
    }
    if (*((_BYTE *)v4 + v10 - 1) != 10)
    {
      __str[0] = 10;
      sub_100054488(v2, (uint64_t)__str, 1);
    }
  }
  else if ((*(_BYTE *)(v2 + 288 + *(_QWORD *)(*(_QWORD *)(v2 + 288) - 24) + 32) & 5) != 0)
  {
    v11 = qword_100100830;
    if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(v3 + 71) >= 0)
        v12 = v3 + 48;
      else
        v12 = *(_QWORD *)(v3 + 48);
      *(_DWORD *)__str = 134349315;
      *(double *)v24 = v5;
      *(_WORD *)&v24[8] = 2081;
      *(_QWORD *)v25 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "VendorLogger,unserviced textLogWorker,%{public}.3f,%{private}s", (uint8_t *)__str, 0x16u);
    }
  }
  else
  {
    if (*(_BYTE *)(v2 + 196) && snprintf(__str, 0x10uLL, "%.3f,", v5) >= 1)
    {
      v18 = strlen(__str);
      sub_100026C60((_QWORD *)(v2 + 288), (uint64_t)__str, v18);
    }
    v19 = *(char *)(v3 + 71);
    if (v19 >= 0)
      v20 = v3 + 48;
    else
      v20 = *(_QWORD *)(v3 + 48);
    if (v19 >= 0)
      v21 = *(unsigned __int8 *)(v3 + 71);
    else
      v21 = *(_QWORD *)(v3 + 56);
    sub_100026C60((_QWORD *)(v2 + 288), v20, v21);
    if (*(char *)(v3 + 71) < 0)
    {
      v22 = *(_QWORD *)(v3 + 56);
      if (!v22)
        goto LABEL_24;
      v4 = (_QWORD *)*v4;
    }
    else
    {
      v22 = *(unsigned __int8 *)(v3 + 71);
      if (!*(_BYTE *)(v3 + 71))
        goto LABEL_24;
    }
    if (*((_BYTE *)v4 + v22 - 1) != 10)
      sub_100026C60((_QWORD *)(v2 + 288), (uint64_t)"\n", 1);
  }
LABEL_24:
  v13 = *(_DWORD *)(a1 + 56);
  if (v13 >= 9)
    sub_100026BEC("bitset test argument out of range");
  if (((*(_QWORD *)(v2 + 152) >> v13) & 1) == 0 && dword_100100358 <= 9)
  {
    v14 = ++dword_100100358;
    v15 = qword_100100830;
    if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
    {
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v17 = (_QWORD *)(v16 + 48);
      if (*(char *)(v16 + 71) < 0)
        v17 = (_QWORD *)*v17;
      *(_DWORD *)__str = 67240707;
      *(_DWORD *)v24 = v14;
      *(_WORD *)&v24[4] = 1026;
      *(_DWORD *)&v24[6] = v13;
      *(_WORD *)v25 = 2081;
      *(_QWORD *)&v25[2] = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "VendorLogger,outOfLevel,text,%{public}d,level,%{public}d,%{private}s", (uint8_t *)__str, 0x18u);
    }
  }
}

void sub_1000543A0(gpsd::util *a1, double a2)
{
  signed int v3;
  NSObject *v4;
  _DWORD v5[2];

  v3 = vcvtmd_s64_f64((double)gpsd::util::getMachContinuousTimeNs(a1) * 0.000000001 - a2);
  if (*((_DWORD *)a1 + 224) < v3 && *((_DWORD *)a1 + 50) <= v3)
  {
    v4 = qword_100100830;
    if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
    {
      v5[0] = 67240192;
      v5[1] = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "VendorLogger,addtl memory use is induced by queue backup,%{public}d", (uint8_t *)v5, 8u);
    }
    *((_DWORD *)a1 + 224) = v3;
  }
}

void sub_100054488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  compression_status v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  NSObject *v16;
  uint8_t buf[4];
  unint64_t v18;
  __int16 v19;
  unint64_t v20;

  if (!*(_BYTE *)(a1 + 276))
    return;
  if (*(_BYTE *)(a1 + 277))
  {
    v4 = *(_QWORD *)(a1 + 208);
    *(_QWORD *)(a1 + 232) = v4;
    *(_QWORD *)(a1 + 248) = a2;
    *(_QWORD *)(a1 + 256) = a3;
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a1 + 216) - v4;
    while (1)
    {
      v5 = compression_stream_process((compression_stream *)(a1 + 232), 0);
      if (v5)
        break;
      v6 = *(_QWORD *)(a1 + 208);
      v7 = *(_QWORD *)(a1 + 216) - v6;
      v8 = *(_QWORD *)(a1 + 240);
      v9 = v7 - v8;
      if (v7 == v8)
      {
        if (!*(_QWORD *)(a1 + 256))
          goto LABEL_25;
      }
      else
      {
        if (v7 < v8)
        {
          v10 = qword_100100838;
          if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134349312;
            v18 = v9;
            v19 = 2050;
            v20 = v7;
            _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "VendorLogger,Excessive bytes_to_print,%{public}zu,limit,%{public}zu", buf, 0x16u);
            v6 = *(_QWORD *)(a1 + 208);
            v9 = *(_QWORD *)(a1 + 216) - v6;
          }
          else
          {
            v9 = v7;
          }
        }
        if ((*(_BYTE *)(a1 + 320 + *(_QWORD *)(*(_QWORD *)(a1 + 288) - 24)) & 5) != 0)
        {
          v11 = qword_100100838;
          if (os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "VendorLogger,stream unavailable for compressed output", buf, 2u);
          }
        }
        else
        {
          std::ostream::write(a1 + 288, v6, v9);
        }
        *(_QWORD *)(a1 + 280) += v9;
        v12 = *(_QWORD *)(a1 + 208);
        v13 = *(_QWORD *)(a1 + 216) - v12;
        *(_QWORD *)(a1 + 232) = v12;
        *(_QWORD *)(a1 + 240) = v13;
      }
    }
    if (v5 == COMPRESSION_STATUS_END)
    {
      v14 = qword_100100838;
      if (!os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
        goto LABEL_25;
      *(_WORD *)buf = 0;
      v15 = "VendorLogger,writeCompressed,unexpected COMPRESSION_STATUS_END";
    }
    else
    {
      v14 = qword_100100838;
      if (!os_log_type_enabled((os_log_t)qword_100100838, OS_LOG_TYPE_ERROR))
        goto LABEL_25;
      *(_WORD *)buf = 0;
      v15 = "VendorLogger,writeCompressed,unexpected COMPRESSION_STATUS_ERROR";
    }
    _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, v15, buf, 2u);
LABEL_25:
    if (*(_QWORD *)(a1 + 280) > *(_QWORD *)(a1 + 128))
      sub_10005286C(a1);
    return;
  }
  if ((byte_100100360 & 1) == 0)
  {
    v16 = qword_100100830;
    if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "VendorLogger,log dropped since compression spun down", buf, 2u);
    }
    byte_100100360 = 1;
  }
}

void VendorLogger::log(gpsd::util *a1, int a2, const void *a3, size_t a4)
{
  double v8;
  NSObject *v9;
  _QWORD block[7];
  int v11;
  _QWORD v12[6];
  void *__p;
  void *v14;
  uint64_t v15;

  if (*((_QWORD *)a1 + 110))
  {
    v8 = (double)gpsd::util::getMachContinuousTimeNs(a1) * 0.000000001;
    v12[0] = 0;
    v12[1] = v12;
    v12[2] = 0x4812000000;
    v12[3] = sub_100054848;
    v12[4] = sub_1000548C8;
    v12[5] = "";
    __p = 0;
    v14 = 0;
    v15 = 0;
    sub_100037A7C(&__p, a3, (uint64_t)a3 + a4, a4);
    v9 = *((_QWORD *)a1 + 110);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000548E0;
    block[3] = &unk_1000F41C0;
    block[4] = v12;
    block[5] = a1;
    *(double *)&block[6] = v8;
    v11 = a2;
    dispatch_async(v9, block);
    _Block_object_dispose(v12, 8);
    if (__p)
    {
      v14 = __p;
      operator delete(__p);
    }
  }
}

_QWORD *sub_100054848(_QWORD *result, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  size_t v4;
  _QWORD *v5;
  char *v6;

  result[6] = 0;
  result[7] = 0;
  result[8] = 0;
  v3 = *(_BYTE **)(a2 + 48);
  v2 = *(_BYTE **)(a2 + 56);
  v4 = v2 - v3;
  if (v2 != v3)
  {
    v5 = result;
    sub_100036A90(result + 6, v2 - v3);
    v6 = (char *)v5[7];
    result = memmove(v6, v3, v4);
    v5[7] = &v6[v4];
  }
  return result;
}

void sub_1000548AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 56) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000548C8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1000548E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  int v5;
  size_t v6;
  unsigned int v7;
  int v8;
  NSObject *v9;
  char __str[4];
  int v11;
  __int16 v12;
  unsigned int v13;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(double *)(a1 + 48);
  sub_1000543A0((gpsd::util *)v2, v4);
  if (*(_BYTE *)(v2 + 276))
  {
    if (*(_BYTE *)(v2 + 196))
    {
      v5 = snprintf(__str, 0x10uLL, "%.3f,", v4);
      if (v5 >= 1)
        sub_100054488(v2, (uint64_t)__str, v5);
    }
    sub_100054488(v2, *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56) - *(_QWORD *)(v3 + 48));
  }
  else
  {
    if (*(_BYTE *)(v2 + 196) && snprintf(__str, 0x10uLL, "%.3f,", v4) >= 1)
    {
      v6 = strlen(__str);
      sub_100026C60((_QWORD *)(v2 + 288), (uint64_t)__str, v6);
    }
    std::ostream::write(v2 + 288, *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56) - *(_QWORD *)(v3 + 48));
  }
  v7 = *(_DWORD *)(a1 + 56);
  if (v7 >= 9)
    sub_100026BEC("bitset test argument out of range");
  if (((*(_QWORD *)(v2 + 152) >> v7) & 1) == 0 && dword_10010035C <= 9)
  {
    v8 = ++dword_10010035C;
    v9 = qword_100100830;
    if (os_log_type_enabled((os_log_t)qword_100100830, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__str = 67240448;
      v11 = v8;
      v12 = 1026;
      v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "VendorLogger,outOfLevel,binary,%{public}d,level,%{public}d", (uint8_t *)__str, 0xEu);
    }
  }
}

_QWORD *VendorLogger::isoTimestampString@<X0>(_QWORD *a1@<X8>)
{
  tm *v3;
  time_t v5;
  char __s[32];

  v5 = time(0);
  v3 = gmtime(&v5);
  if (v5 < 0 || !v3)
    strcpy(__s, "unknown_time");
  else
    strftime(__s, 0x20uLL, "%Y%m%dT_%H-%M-%SZ", v3);
  return sub_100025B58(a1, __s);
}

void sub_100054B44(uint64_t a1, const void **a2, uint64_t a3, char a4)
{
  const void **v8;
  const void **v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  unint64_t v21;
  const void **v22;
  const void **v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 *v27;
  __int128 v28;
  __int128 v29;
  BOOL v30;
  BOOL v31;
  __int128 v32;
  const void **v33;
  _BOOL4 v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  const void **v45;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  const void **v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  int64_t v56;
  int64_t v57;
  int64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  int64_t v68;
  _OWORD *v69;
  uint64_t v70;
  _OWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v90;
  const void **v91;
  __int128 v92;
  uint64_t v93;
  BOOL v94;
  __int128 v95;
  void *v96;
  const void **v97;
  char v98;
  uint64_t v99;
  __int128 v100;
  const void *v101;
  __int128 v102;
  uint64_t v103;

LABEL_1:
  v8 = a2 - 3;
  v97 = a2 - 6;
  v99 = (uint64_t)a2;
  v9 = a2 - 9;
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = (uint64_t)a2 - v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v10) >> 3);
    switch(v12)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (sub_10005552C(v8, (const void **)a1))
        {
          v42 = *(_OWORD *)a1;
          v101 = *(const void **)(a1 + 16);
          v100 = v42;
          v43 = *(_OWORD *)v8;
          *(_QWORD *)(a1 + 16) = v8[2];
          *(_OWORD *)a1 = v43;
          v44 = v100;
          v8[2] = v101;
          *(_OWORD *)v8 = v44;
        }
        return;
      case 3:
        sub_100055598((const void **)a1, (const void **)(a1 + 24), v8);
        return;
      case 4:
        sub_100055888(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (__int128 *)v8);
        return;
      case 5:
        sub_100055954(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (__int128 *)(a1 + 72), (__int128 *)v8);
        return;
      default:
        if (v11 <= 575)
        {
          v45 = (const void **)(a1 + 24);
          v47 = (const void **)a1 == a2 || v45 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v47)
            {
              v48 = 0;
              v49 = a1;
              do
              {
                v50 = (const void **)v49;
                v49 = (uint64_t)v45;
                if (sub_10005552C(v45, v50))
                {
                  v51 = *(_OWORD *)v49;
                  v101 = *(const void **)(v49 + 16);
                  v100 = v51;
                  *(_QWORD *)(v49 + 8) = 0;
                  *(_QWORD *)(v49 + 16) = 0;
                  *(_QWORD *)v49 = 0;
                  v52 = v48;
                  while (1)
                  {
                    v53 = a1 + v52;
                    *(_OWORD *)(v53 + 24) = *(_OWORD *)(a1 + v52);
                    *(_QWORD *)(v53 + 40) = *(_QWORD *)(a1 + v52 + 16);
                    *(_BYTE *)(v53 + 23) = 0;
                    *(_BYTE *)v53 = 0;
                    if (!v52)
                      break;
                    v52 -= 24;
                    if (!sub_10005552C((const void **)&v100, (const void **)(v52 + a1)))
                    {
                      v54 = a1 + v52 + 24;
                      goto LABEL_80;
                    }
                  }
                  v54 = a1;
LABEL_80:
                  v55 = v100;
                  *(_QWORD *)(v54 + 16) = v101;
                  *(_OWORD *)v54 = v55;
                }
                v45 = (const void **)(v49 + 24);
                v48 += 24;
              }
              while ((const void **)(v49 + 24) != a2);
            }
          }
          else if (!v47)
          {
            v90 = a1 - 24;
            do
            {
              v91 = (const void **)a1;
              a1 = (uint64_t)v45;
              if (sub_10005552C(v45, v91))
              {
                v92 = *(_OWORD *)a1;
                v101 = *(const void **)(a1 + 16);
                v100 = v92;
                *(_QWORD *)(a1 + 8) = 0;
                *(_QWORD *)(a1 + 16) = 0;
                *(_QWORD *)a1 = 0;
                v93 = v90;
                do
                {
                  *(_OWORD *)(v93 + 48) = *(_OWORD *)(v93 + 24);
                  *(_QWORD *)(v93 + 64) = *(_QWORD *)(v93 + 40);
                  *(_BYTE *)(v93 + 47) = 0;
                  *(_BYTE *)(v93 + 24) = 0;
                  v94 = sub_10005552C((const void **)&v100, (const void **)v93);
                  v93 -= 24;
                }
                while (v94);
                v95 = v100;
                *(_QWORD *)(v93 + 64) = v101;
                *(_OWORD *)(v93 + 48) = v95;
              }
              v45 = (const void **)(a1 + 24);
              v90 += 24;
            }
            while ((const void **)(a1 + 24) != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((const void **)a1 != a2)
          {
            v56 = (unint64_t)(v12 - 2) >> 1;
            v57 = v56;
            do
            {
              v58 = v57;
              if (v56 >= v57)
              {
                v59 = (2 * v57) | 1;
                v60 = a1 + 24 * v59;
                if (2 * v57 + 2 < v12 && sub_10005552C((const void **)(a1 + 24 * v59), (const void **)(v60 + 24)))
                {
                  v60 += 24;
                  v59 = 2 * v58 + 2;
                }
                v61 = a1 + 24 * v58;
                if (!sub_10005552C((const void **)v60, (const void **)v61))
                {
                  v62 = *(_OWORD *)v61;
                  v101 = *(const void **)(v61 + 16);
                  v100 = v62;
                  *(_QWORD *)(v61 + 8) = 0;
                  *(_QWORD *)(v61 + 16) = 0;
                  *(_QWORD *)v61 = 0;
                  do
                  {
                    v63 = v60;
                    v64 = *(_OWORD *)v60;
                    *(_QWORD *)(v61 + 16) = *(_QWORD *)(v60 + 16);
                    *(_OWORD *)v61 = v64;
                    *(_BYTE *)(v60 + 23) = 0;
                    *(_BYTE *)v60 = 0;
                    if (v56 < v59)
                      break;
                    v65 = (2 * v59) | 1;
                    v60 = a1 + 24 * v65;
                    v66 = 2 * v59 + 2;
                    if (v66 < v12 && sub_10005552C((const void **)(a1 + 24 * v65), (const void **)(v60 + 24)))
                    {
                      v60 += 24;
                      v65 = v66;
                    }
                    v61 = v63;
                    v59 = v65;
                  }
                  while (!sub_10005552C((const void **)v60, (const void **)&v100));
                  v67 = v100;
                  *(_QWORD *)(v63 + 16) = v101;
                  *(_OWORD *)v63 = v67;
                }
              }
              v57 = v58 - 1;
            }
            while (v58);
            v68 = v11 / 0x18uLL;
            v69 = (_OWORD *)v99;
            do
            {
              v70 = 0;
              v71 = v69;
              v96 = *(void **)a1;
              *(_QWORD *)&v102 = *(_QWORD *)(a1 + 8);
              *(_QWORD *)((char *)&v102 + 7) = *(_QWORD *)(a1 + 15);
              v98 = *(_BYTE *)(a1 + 23);
              *(_QWORD *)(a1 + 8) = 0;
              *(_QWORD *)(a1 + 16) = 0;
              *(_QWORD *)a1 = 0;
              v72 = v68 - 2;
              if (v68 < 2)
                v72 = v68 - 1;
              v73 = v72 >> 1;
              v74 = a1;
              do
              {
                v75 = v74 + 24 * v70 + 24;
                v76 = 2 * v70;
                v70 = (2 * v70) | 1;
                v77 = v76 + 2;
                if (v76 + 2 < v68 && sub_10005552C((const void **)v75, (const void **)(v75 + 24)))
                {
                  v75 += 24;
                  v70 = v77;
                }
                if (*(char *)(v74 + 23) < 0)
                  operator delete(*(void **)v74);
                v78 = *(_OWORD *)v75;
                *(_QWORD *)(v74 + 16) = *(_QWORD *)(v75 + 16);
                *(_OWORD *)v74 = v78;
                *(_BYTE *)(v75 + 23) = 0;
                *(_BYTE *)v75 = 0;
                v74 = v75;
              }
              while (v70 <= v73);
              v69 = (_OWORD *)((char *)v71 - 24);
              if ((_OWORD *)v75 == (_OWORD *)((char *)v71 - 24))
              {
                *(_QWORD *)v75 = v96;
                v88 = *(_QWORD *)((char *)&v102 + 7);
                *(_QWORD *)(v75 + 8) = v102;
                *(_QWORD *)(v75 + 15) = v88;
                *(_BYTE *)(v75 + 23) = v98;
              }
              else
              {
                v79 = *v69;
                *(_QWORD *)(v75 + 16) = *((_QWORD *)v71 - 1);
                *(_OWORD *)v75 = v79;
                *((_QWORD *)v71 - 3) = v96;
                v80 = v102;
                *(_QWORD *)((char *)v71 - 9) = *(_QWORD *)((char *)&v102 + 7);
                *((_QWORD *)v71 - 2) = v80;
                *((_BYTE *)v71 - 1) = v98;
                v81 = v75 - a1 + 24;
                if (v81 >= 25)
                {
                  v82 = (v81 / 0x18uLL - 2) >> 1;
                  v83 = a1 + 24 * v82;
                  if (sub_10005552C((const void **)v83, (const void **)v75))
                  {
                    v84 = *(_OWORD *)v75;
                    v101 = *(const void **)(v75 + 16);
                    v100 = v84;
                    *(_QWORD *)(v75 + 8) = 0;
                    *(_QWORD *)(v75 + 16) = 0;
                    *(_QWORD *)v75 = 0;
                    do
                    {
                      v85 = v83;
                      v86 = *(_OWORD *)v83;
                      *(_QWORD *)(v75 + 16) = *(_QWORD *)(v83 + 16);
                      *(_OWORD *)v75 = v86;
                      *(_BYTE *)(v83 + 23) = 0;
                      *(_BYTE *)v83 = 0;
                      if (!v82)
                        break;
                      v82 = (v82 - 1) >> 1;
                      v83 = a1 + 24 * v82;
                      v75 = v85;
                    }
                    while (sub_10005552C((const void **)v83, (const void **)&v100));
                    v87 = v100;
                    *(_QWORD *)(v85 + 16) = v101;
                    *(_OWORD *)v85 = v87;
                  }
                }
              }
            }
            while (v68-- > 2);
          }
          return;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = a1 + 24 * ((unint64_t)v12 >> 1);
        if ((unint64_t)v11 < 0xC01)
        {
          sub_100055598((const void **)v14, (const void **)a1, v8);
        }
        else
        {
          sub_100055598((const void **)a1, (const void **)v14, v8);
          v15 = 3 * v13;
          sub_100055598((const void **)(a1 + 24), (const void **)(a1 + 8 * v15 - 24), v97);
          sub_100055598((const void **)(a1 + 48), (const void **)(a1 + 24 + 8 * v15), v9);
          sub_100055598((const void **)(a1 + 8 * v15 - 24), (const void **)v14, (const void **)(a1 + 24 + 8 * v15));
          v16 = *(_OWORD *)a1;
          v101 = *(const void **)(a1 + 16);
          v100 = v16;
          v17 = *(_QWORD *)(v14 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v14;
          *(_QWORD *)(a1 + 16) = v17;
          v18 = v100;
          *(_QWORD *)(v14 + 16) = v101;
          *(_OWORD *)v14 = v18;
        }
        --a3;
        if ((a4 & 1) == 0 && !sub_10005552C((const void **)(a1 - 24), (const void **)a1))
        {
          v32 = *(_OWORD *)a1;
          v103 = *(_QWORD *)(a1 + 16);
          v102 = v32;
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          if (sub_10005552C((const void **)&v102, v8))
          {
            v10 = a1;
            do
              v10 += 24;
            while (!sub_10005552C((const void **)&v102, (const void **)v10));
          }
          else
          {
            v33 = (const void **)(a1 + 24);
            do
            {
              v10 = (unint64_t)v33;
              if (v33 >= a2)
                break;
              v34 = sub_10005552C((const void **)&v102, v33);
              v33 = (const void **)(v10 + 24);
            }
            while (!v34);
          }
          v35 = (unint64_t)a2;
          if (v10 < (unint64_t)a2)
          {
            v35 = (unint64_t)a2;
            do
              v35 -= 24;
            while (sub_10005552C((const void **)&v102, (const void **)v35));
          }
          while (v10 < v35)
          {
            v36 = *(_OWORD *)v10;
            v101 = *(const void **)(v10 + 16);
            v100 = v36;
            v37 = *(_OWORD *)v35;
            *(_QWORD *)(v10 + 16) = *(_QWORD *)(v35 + 16);
            *(_OWORD *)v10 = v37;
            v38 = v100;
            *(_QWORD *)(v35 + 16) = v101;
            *(_OWORD *)v35 = v38;
            do
              v10 += 24;
            while (!sub_10005552C((const void **)&v102, (const void **)v10));
            do
              v35 -= 24;
            while (sub_10005552C((const void **)&v102, (const void **)v35));
          }
          v39 = (__int128 *)(v10 - 24);
          if (v10 - 24 == a1)
          {
            if (*(char *)(v10 - 1) < 0)
              operator delete(*(void **)a1);
          }
          else
          {
            if (*(char *)(a1 + 23) < 0)
              operator delete(*(void **)a1);
            v40 = *v39;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v10 - 8);
            *(_OWORD *)a1 = v40;
            *(_BYTE *)(v10 - 1) = 0;
            *(_BYTE *)(v10 - 24) = 0;
          }
          a4 = 0;
          v41 = v102;
          *(_QWORD *)(v10 - 8) = v103;
          *v39 = v41;
          continue;
        }
        v19 = 0;
        v20 = *(_OWORD *)a1;
        v103 = *(_QWORD *)(a1 + 16);
        v102 = v20;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        do
          v19 += 24;
        while (sub_10005552C((const void **)(v19 + a1), (const void **)&v102));
        v21 = a1 + v19;
        v22 = (const void **)v99;
        if (v19 == 24)
        {
          v22 = (const void **)v99;
          do
          {
            if (v21 >= (unint64_t)v22)
              break;
            v22 -= 3;
          }
          while (!sub_10005552C(v22, (const void **)&v102));
        }
        else
        {
          do
            v22 -= 3;
          while (!sub_10005552C(v22, (const void **)&v102));
        }
        v10 = a1 + v19;
        if (v21 < (unint64_t)v22)
        {
          v23 = v22;
          do
          {
            v24 = *(_OWORD *)v10;
            v101 = *(const void **)(v10 + 16);
            v100 = v24;
            v25 = *(_OWORD *)v23;
            *(_QWORD *)(v10 + 16) = v23[2];
            *(_OWORD *)v10 = v25;
            v26 = v100;
            v23[2] = v101;
            *(_OWORD *)v23 = v26;
            do
              v10 += 24;
            while (sub_10005552C((const void **)v10, (const void **)&v102));
            do
              v23 -= 3;
            while (!sub_10005552C(v23, (const void **)&v102));
          }
          while (v10 < (unint64_t)v23);
        }
        v27 = (__int128 *)(v10 - 24);
        if (v10 - 24 == a1)
        {
          if (*(char *)(v10 - 1) < 0)
            operator delete(*(void **)a1);
        }
        else
        {
          if (*(char *)(a1 + 23) < 0)
            operator delete(*(void **)a1);
          v28 = *v27;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v10 - 8);
          *(_OWORD *)a1 = v28;
          *(_BYTE *)(v10 - 1) = 0;
          *(_BYTE *)(v10 - 24) = 0;
        }
        v29 = v102;
        *(_QWORD *)(v10 - 8) = v103;
        *v27 = v29;
        v30 = v21 >= (unint64_t)v22;
        a2 = (const void **)v99;
        if (!v30)
        {
LABEL_34:
          sub_100054B44(a1, v10 - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v31 = sub_1000556B4(a1, v10 - 24);
        if (!sub_1000556B4(v10, v99))
        {
          if (v31)
            continue;
          goto LABEL_34;
        }
        a2 = (const void **)(v10 - 24);
        if (!v31)
          goto LABEL_1;
        return;
    }
  }
}

BOOL sub_10005552C(const void **a1, const void **a2)
{
  int v2;
  int v3;
  size_t v4;
  const void *v5;
  size_t v6;
  const void *v7;
  size_t v8;
  int v9;

  v2 = *((char *)a1 + 23);
  v3 = *((char *)a2 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a2 + 23);
  else
    v4 = (size_t)a2[1];
  if (v3 >= 0)
    v5 = a2;
  else
    v5 = *a2;
  if (v2 >= 0)
    v6 = *((unsigned __int8 *)a1 + 23);
  else
    v6 = (size_t)a1[1];
  if (v2 >= 0)
    v7 = a1;
  else
    v7 = *a1;
  if (v6 >= v4)
    v8 = v4;
  else
    v8 = v6;
  v9 = memcmp(v5, v7, v8);
  if (v9)
    return v9 < 0;
  else
    return v4 < v6;
}

BOOL sub_100055598(const void **a1, const void **a2, const void **a3)
{
  BOOL v6;
  _BOOL8 result;
  const void *v8;
  __int128 v9;
  const void *v10;
  const void *v11;
  __int128 v12;
  const void *v13;
  const void *v14;
  __int128 v15;
  const void *v16;
  const void *v17;
  __int128 v18;
  const void *v19;
  const void *v20;

  v6 = sub_10005552C(a2, a1);
  result = sub_10005552C(a3, a2);
  if (v6)
  {
    if (result)
    {
      v8 = a1[2];
      v9 = *(_OWORD *)a1;
      v10 = a3[2];
      *(_OWORD *)a1 = *(_OWORD *)a3;
      a1[2] = v10;
    }
    else
    {
      v17 = a1[2];
      v18 = *(_OWORD *)a1;
      v19 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v19;
      *(_OWORD *)a2 = v18;
      a2[2] = v17;
      result = sub_10005552C(a3, a2);
      if (!result)
        return result;
      v8 = a2[2];
      v9 = *(_OWORD *)a2;
      v20 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v20;
    }
    *(_OWORD *)a3 = v9;
    a3[2] = v8;
  }
  else if (result)
  {
    v11 = a2[2];
    v12 = *(_OWORD *)a2;
    v13 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v13;
    *(_OWORD *)a3 = v12;
    a3[2] = v11;
    result = sub_10005552C(a2, a1);
    if (result)
    {
      v14 = a1[2];
      v15 = *(_OWORD *)a1;
      v16 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v16;
      *(_OWORD *)a2 = v15;
      a2[2] = v14;
    }
  }
  return result;
}

BOOL sub_1000556B4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  const void **v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = a2 - 24;
      if (sub_10005552C((const void **)(a2 - 24), (const void **)a1))
      {
        v7 = *(_QWORD *)(a1 + 16);
        v8 = *(_OWORD *)a1;
        v9 = *(_QWORD *)(v6 + 16);
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(_QWORD *)(a1 + 16) = v9;
        *(_OWORD *)v6 = v8;
        *(_QWORD *)(v6 + 16) = v7;
      }
      return 1;
    case 3uLL:
      sub_100055598((const void **)a1, (const void **)(a1 + 24), (const void **)(a2 - 24));
      return 1;
    case 4uLL:
      sub_100055888(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (__int128 *)(a2 - 24));
      return 1;
    case 5uLL:
      sub_100055954(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (__int128 *)(a1 + 72), (__int128 *)(a2 - 24));
      return 1;
    default:
      v10 = (const void **)(a1 + 48);
      sub_100055598((const void **)a1, (const void **)(a1 + 24), (const void **)(a1 + 48));
      v11 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if (sub_10005552C((const void **)v11, v10))
    {
      v17 = *(_OWORD *)v11;
      v18 = *(_QWORD *)(v11 + 16);
      *(_QWORD *)(v11 + 8) = 0;
      *(_QWORD *)(v11 + 16) = 0;
      *(_QWORD *)v11 = 0;
      v14 = v12;
      while (1)
      {
        v15 = a1 + v14;
        *(_OWORD *)(v15 + 72) = *(_OWORD *)(a1 + v14 + 48);
        *(_QWORD *)(v15 + 88) = *(_QWORD *)(a1 + v14 + 64);
        *(_BYTE *)(v15 + 71) = 0;
        *(_BYTE *)(v15 + 48) = 0;
        if (v14 == -48)
          break;
        v14 -= 24;
        if (!sub_10005552C((const void **)&v17, (const void **)(v15 + 24)))
        {
          v16 = a1 + v14 + 72;
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *(_OWORD *)v16 = v17;
      *(_QWORD *)(v16 + 16) = v18;
      if (++v13 == 8)
        return v11 + 24 == a2;
    }
    v10 = (const void **)v11;
    v12 += 24;
    v11 += 24;
    if (v11 == a2)
      return 1;
  }
}

__n128 sub_100055888(uint64_t a1, const void **a2, const void **a3, __int128 *a4)
{
  __n128 result;
  const void *v9;
  __int128 v10;
  const void *v11;
  const void *v12;
  __int128 v13;
  const void *v14;
  const void *v15;
  const void *v16;

  sub_100055598((const void **)a1, a2, a3);
  if (sub_10005552C((const void **)a4, a3))
  {
    v9 = a3[2];
    v10 = *(_OWORD *)a3;
    v11 = (const void *)*((_QWORD *)a4 + 2);
    *(_OWORD *)a3 = *a4;
    a3[2] = v11;
    *a4 = v10;
    *((_QWORD *)a4 + 2) = v9;
    if (sub_10005552C(a3, a2))
    {
      v12 = a2[2];
      v13 = *(_OWORD *)a2;
      v14 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v14;
      *(_OWORD *)a3 = v13;
      a3[2] = v12;
      if (sub_10005552C(a2, (const void **)a1))
      {
        v15 = *(const void **)(a1 + 16);
        result = *(__n128 *)a1;
        v16 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v16;
        *(__n128 *)a2 = result;
        a2[2] = v15;
      }
    }
  }
  return result;
}

__n128 sub_100055954(uint64_t a1, const void **a2, const void **a3, __int128 *a4, __int128 *a5)
{
  __n128 result;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  const void *v14;
  __int128 v15;
  const void *v16;
  const void *v17;
  __int128 v18;
  const void *v19;
  const void *v20;
  const void *v21;

  sub_100055888(a1, a2, a3, a4);
  if (sub_10005552C((const void **)a5, (const void **)a4))
  {
    v11 = *((_QWORD *)a4 + 2);
    v12 = *a4;
    v13 = *((_QWORD *)a5 + 2);
    *a4 = *a5;
    *((_QWORD *)a4 + 2) = v13;
    *a5 = v12;
    *((_QWORD *)a5 + 2) = v11;
    if (sub_10005552C((const void **)a4, a3))
    {
      v14 = a3[2];
      v15 = *(_OWORD *)a3;
      v16 = (const void *)*((_QWORD *)a4 + 2);
      *(_OWORD *)a3 = *a4;
      a3[2] = v16;
      *a4 = v15;
      *((_QWORD *)a4 + 2) = v14;
      if (sub_10005552C(a3, a2))
      {
        v17 = a2[2];
        v18 = *(_OWORD *)a2;
        v19 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v19;
        *(_OWORD *)a3 = v18;
        a3[2] = v17;
        if (sub_10005552C(a2, (const void **)a1))
        {
          v20 = *(const void **)(a1 + 16);
          result = *(__n128 *)a1;
          v21 = a2[2];
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_QWORD *)(a1 + 16) = v21;
          *(__n128 *)a2 = result;
          a2[2] = v20;
        }
      }
    }
  }
  return result;
}

uint64_t sub_100055A5C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    sub_100025C08();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

uint64_t sub_100055AE0()
{
  uint64_t result;

  if (qword_100100370)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_100100370 + 8))(qword_100100370);
  if (proto::gnss::Emergency::SummaryReport::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)proto::gnss::Emergency::SummaryReport::default_instance_ + 8))(proto::gnss::Emergency::SummaryReport::default_instance_);
  if (qword_100100378)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_100100378 + 8))(qword_100100378);
  if (qword_100100380)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_100100380 + 8))(qword_100100380);
  if (qword_100100388)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_100100388 + 8))(qword_100100388);
  if (qword_100100390)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_100100390 + 8))(qword_100100390);
  if (proto::gnss::Emergency::LocationId::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)proto::gnss::Emergency::LocationId::default_instance_ + 8))(proto::gnss::Emergency::LocationId::default_instance_);
  if (proto::gnss::Emergency::WlanMeasurementRequest::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)proto::gnss::Emergency::WlanMeasurementRequest::default_instance_ + 8))(proto::gnss::Emergency::WlanMeasurementRequest::default_instance_);
  if (qword_100100398)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_100100398 + 8))(qword_100100398);
  if (proto::gnss::Emergency::WlanMeasurementList::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)proto::gnss::Emergency::WlanMeasurementList::default_instance_ + 8))(proto::gnss::Emergency::WlanMeasurementList::default_instance_);
  if (qword_1001003A0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1001003A0 + 8))(qword_1001003A0);
  if (qword_1001003A8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1001003A8 + 8))(qword_1001003A8);
  if (qword_1001003B0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1001003B0 + 8))(qword_1001003B0);
  if (proto::gnss::Emergency::SuplInitVer2Extension::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)proto::gnss::Emergency::SuplInitVer2Extension::default_instance_ + 8))(proto::gnss::Emergency::SuplInitVer2Extension::default_instance_);
  if (proto::gnss::Emergency::Init::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)proto::gnss::Emergency::Init::default_instance_ + 8))(proto::gnss::Emergency::Init::default_instance_);
  if (proto::gnss::Emergency::SuplContext::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)proto::gnss::Emergency::SuplContext::default_instance_ + 8))(proto::gnss::Emergency::SuplContext::default_instance_);
  if (proto::gnss::Emergency::SessionStatus::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)proto::gnss::Emergency::SessionStatus::default_instance_ + 8))(proto::gnss::Emergency::SessionStatus::default_instance_);
  if (qword_1001003B8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1001003B8 + 8))(qword_1001003B8);
  if (proto::gnss::Emergency::ClsUtranCellTime::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)proto::gnss::Emergency::ClsUtranCellTime::default_instance_ + 8))(proto::gnss::Emergency::ClsUtranCellTime::default_instance_);
  if (qword_1001003C0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1001003C0 + 8))(qword_1001003C0);
  if (qword_1001003C8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1001003C8 + 8))(qword_1001003C8);
  if (proto::gnss::Emergency::PositionRequest::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)proto::gnss::Emergency::PositionRequest::default_instance_ + 8))(proto::gnss::Emergency::PositionRequest::default_instance_);
  if (proto::gnss::Emergency::UtranGpsTimeMeasured::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)proto::gnss::Emergency::UtranGpsTimeMeasured::default_instance_ + 8))(proto::gnss::Emergency::UtranGpsTimeMeasured::default_instance_);
  if (qword_1001003D0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1001003D0 + 8))(qword_1001003D0);
  if (qword_1001003D8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1001003D8 + 8))(qword_1001003D8);
  if (proto::gnss::Emergency::GpsTimeMeasured::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)proto::gnss::Emergency::GpsTimeMeasured::default_instance_ + 8))(proto::gnss::Emergency::GpsTimeMeasured::default_instance_);
  if (proto::gnss::Emergency::GpsTimeMeasuredParams::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)proto::gnss::Emergency::GpsTimeMeasuredParams::default_instance_ + 8))(proto::gnss::Emergency::GpsTimeMeasuredParams::default_instance_);
  if (qword_1001003E0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1001003E0 + 8))(qword_1001003E0);
  if (proto::gnss::Emergency::LocationInfo::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)proto::gnss::Emergency::LocationInfo::default_instance_ + 8))(proto::gnss::Emergency::LocationInfo::default_instance_);
  if (proto::gnss::Emergency::CellInfo::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)proto::gnss::Emergency::CellInfo::default_instance_ + 8))(proto::gnss::Emergency::CellInfo::default_instance_);
  if (proto::gnss::Emergency::UtranGanssTimeMeasured::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)proto::gnss::Emergency::UtranGanssTimeMeasured::default_instance_ + 8))(proto::gnss::Emergency::UtranGanssTimeMeasured::default_instance_);
  if (proto::gnss::Emergency::GeranGanssTimeMeasured::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)proto::gnss::Emergency::GeranGanssTimeMeasured::default_instance_ + 8))(proto::gnss::Emergency::GeranGanssTimeMeasured::default_instance_);
  if (proto::gnss::Emergency::ClsEutranCell::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)proto::gnss::Emergency::ClsEutranCell::default_instance_ + 8))(proto::gnss::Emergency::ClsEutranCell::default_instance_);
  if (proto::gnss::Emergency::GanssTimeMeasured::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)proto::gnss::Emergency::GanssTimeMeasured::default_instance_ + 8))(proto::gnss::Emergency::GanssTimeMeasured::default_instance_);
  if (proto::gnss::Emergency::GanssTimeMeasuredParams::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)proto::gnss::Emergency::GanssTimeMeasuredParams::default_instance_ + 8))(proto::gnss::Emergency::GanssTimeMeasuredParams::default_instance_);
  if (qword_1001003E8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1001003E8 + 8))(qword_1001003E8);
  if (qword_1001003F0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1001003F0 + 8))(qword_1001003F0);
  if (proto::gnss::Emergency::PointUncertainCircle::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)proto::gnss::Emergency::PointUncertainCircle::default_instance_ + 8))(proto::gnss::Emergency::PointUncertainCircle::default_instance_);
  if (proto::gnss::Emergency::PointUncertainEllipse::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)proto::gnss::Emergency::PointUncertainEllipse::default_instance_ + 8))(proto::gnss::Emergency::PointUncertainEllipse::default_instance_);
  if (proto::gnss::Emergency::PointAltitudeUncertainEllipsoid::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)proto::gnss::Emergency::PointAltitudeUncertainEllipsoid::default_instance_
                                    + 8))(proto::gnss::Emergency::PointAltitudeUncertainEllipsoid::default_instance_);
  if (proto::gnss::Emergency::EllipsoidArc::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)proto::gnss::Emergency::EllipsoidArc::default_instance_ + 8))(proto::gnss::Emergency::EllipsoidArc::default_instance_);
  if (proto::gnss::Emergency::PointAltitude::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)proto::gnss::Emergency::PointAltitude::default_instance_ + 8))(proto::gnss::Emergency::PointAltitude::default_instance_);
  if (qword_1001003F8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1001003F8 + 8))(qword_1001003F8);
  if (proto::gnss::Emergency::ShapeInfo::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)proto::gnss::Emergency::ShapeInfo::default_instance_ + 8))(proto::gnss::Emergency::ShapeInfo::default_instance_);
  if (proto::gnss::Emergency::LocEstimate::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)proto::gnss::Emergency::LocEstimate::default_instance_ + 8))(proto::gnss::Emergency::LocEstimate::default_instance_);
  if (qword_100100400)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_100100400 + 8))(qword_100100400);
  if (qword_100100408)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_100100408 + 8))(qword_100100408);
  if (qword_100100410)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_100100410 + 8))(qword_100100410);
  if (qword_100100418)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_100100418 + 8))(qword_100100418);
  if (proto::gnss::Emergency::VelocityInfo::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)proto::gnss::Emergency::VelocityInfo::default_instance_ + 8))(proto::gnss::Emergency::VelocityInfo::default_instance_);
  if (proto::gnss::Emergency::VelocityEstimate::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)proto::gnss::Emergency::VelocityEstimate::default_instance_ + 8))(proto::gnss::Emergency::VelocityEstimate::default_instance_);
  if (proto::gnss::Emergency::PositionReport::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)proto::gnss::Emergency::PositionReport::default_instance_ + 8))(proto::gnss::Emergency::PositionReport::default_instance_);
  if (qword_100100420)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_100100420 + 8))(qword_100100420);
  if (qword_100100428)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_100100428 + 8))(qword_100100428);
  if (proto::gnss::Emergency::GanssMeasurementsForSingleGanss::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)proto::gnss::Emergency::GanssMeasurementsForSingleGanss::default_instance_
                                    + 8))(proto::gnss::Emergency::GanssMeasurementsForSingleGanss::default_instance_);
  if (proto::gnss::Emergency::GanssMeasurements::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)proto::gnss::Emergency::GanssMeasurements::default_instance_ + 8))(proto::gnss::Emergency::GanssMeasurements::default_instance_);
  if (qword_100100430)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_100100430 + 8))(qword_100100430);
  if (proto::gnss::Emergency::GpsMeasurements::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)proto::gnss::Emergency::GpsMeasurements::default_instance_ + 8))(proto::gnss::Emergency::GpsMeasurements::default_instance_);
  if (proto::gnss::Emergency::MeasurementReport::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)proto::gnss::Emergency::MeasurementReport::default_instance_ + 8))(proto::gnss::Emergency::MeasurementReport::default_instance_);
  if (qword_100100438)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_100100438 + 8))(qword_100100438);
  if (qword_100100440)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_100100440 + 8))(qword_100100440);
  if (qword_100100448)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_100100448 + 8))(qword_100100448);
  if (qword_100100450)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_100100450 + 8))(qword_100100450);
  if (qword_100100458)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_100100458 + 8))(qword_100100458);
  if (qword_100100460)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_100100460 + 8))(qword_100100460);
  if (proto::gnss::Emergency::GanssAidRequestPerGanss::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)proto::gnss::Emergency::GanssAidRequestPerGanss::default_instance_ + 8))(proto::gnss::Emergency::GanssAidRequestPerGanss::default_instance_);
  if (qword_100100468)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_100100468 + 8))(qword_100100468);
  if (proto::gnss::Emergency::AssistanceNeededReport::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)proto::gnss::Emergency::AssistanceNeededReport::default_instance_ + 8))(proto::gnss::Emergency::AssistanceNeededReport::default_instance_);
  if (qword_100100470)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_100100470 + 8))(qword_100100470);
  if (qword_100100478)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_100100478 + 8))(qword_100100478);
  if (qword_100100480)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_100100480 + 8))(qword_100100480);
  if (qword_100100488)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_100100488 + 8))(qword_100100488);
  if (proto::gnss::Emergency::CtsCdmaCellTime::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)proto::gnss::Emergency::CtsCdmaCellTime::default_instance_ + 8))(proto::gnss::Emergency::CtsCdmaCellTime::default_instance_);
  if (proto::gnss::Emergency::CellTimeData::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)proto::gnss::Emergency::CellTimeData::default_instance_ + 8))(proto::gnss::Emergency::CellTimeData::default_instance_);
  if (proto::gnss::Emergency::CellTimeAssistance::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)proto::gnss::Emergency::CellTimeAssistance::default_instance_ + 8))(proto::gnss::Emergency::CellTimeAssistance::default_instance_);
  if (qword_100100490)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_100100490 + 8))(qword_100100490);
  if (proto::gnss::Emergency::GpsReferenceTime::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)proto::gnss::Emergency::GpsReferenceTime::default_instance_ + 8))(proto::gnss::Emergency::GpsReferenceTime::default_instance_);
  if (proto::gnss::Emergency::ReferenceLocation::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)proto::gnss::Emergency::ReferenceLocation::default_instance_ + 8))(proto::gnss::Emergency::ReferenceLocation::default_instance_);
  if (qword_100100498)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_100100498 + 8))(qword_100100498);
  if (proto::gnss::Emergency::GpsNavigationModel::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)proto::gnss::Emergency::GpsNavigationModel::default_instance_ + 8))(proto::gnss::Emergency::GpsNavigationModel::default_instance_);
  if (qword_1001004A0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1001004A0 + 8))(qword_1001004A0);
  if (proto::gnss::Emergency::CplaneContext::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)proto::gnss::Emergency::CplaneContext::default_instance_ + 8))(proto::gnss::Emergency::CplaneContext::default_instance_);
  if (proto::gnss::Emergency::EmergConfig::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)proto::gnss::Emergency::EmergConfig::default_instance_ + 8))(proto::gnss::Emergency::EmergConfig::default_instance_);
  if (qword_1001004A8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1001004A8 + 8))(qword_1001004A8);
  if (proto::gnss::Emergency::GpsAcqAssistance::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)proto::gnss::Emergency::GpsAcqAssistance::default_instance_ + 8))(proto::gnss::Emergency::GpsAcqAssistance::default_instance_);
  if (proto::gnss::Emergency::CellFTAssistanceRequest::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)proto::gnss::Emergency::CellFTAssistanceRequest::default_instance_ + 8))(proto::gnss::Emergency::CellFTAssistanceRequest::default_instance_);
  if (proto::gnss::Emergency::CellFTAssistance::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)proto::gnss::Emergency::CellFTAssistance::default_instance_ + 8))(proto::gnss::Emergency::CellFTAssistance::default_instance_);
  if (qword_1001004B0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1001004B0 + 8))(qword_1001004B0);
  if (qword_1001004B8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1001004B8 + 8))(qword_1001004B8);
  if (qword_1001004C0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1001004C0 + 8))(qword_1001004C0);
  if (qword_1001004C8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1001004C8 + 8))(qword_1001004C8);
  if (qword_1001004D0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1001004D0 + 8))(qword_1001004D0);
  if (qword_1001004D8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1001004D8 + 8))(qword_1001004D8);
  if (proto::gnss::Emergency::MeasurementReportWithEstimate::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)proto::gnss::Emergency::MeasurementReportWithEstimate::default_instance_
                                    + 8))(proto::gnss::Emergency::MeasurementReportWithEstimate::default_instance_);
  result = qword_1001004E0;
  if (qword_1001004E0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_1001004E0 + 8))(qword_1001004E0);
  return result;
}

void proto::gnss::Emergency::protobuf_AddDesc_GnssEmergencyTypes_2eproto(proto::gnss::Emergency *this, uint64_t a2, uint64_t a3, const char *a4)
{
  proto::gnss *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;

  if ((byte_100100368 & 1) == 0)
  {
    byte_100100368 = 1;
    v4 = (proto::gnss *)wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (int)"Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", a4);
    proto::gnss::protobuf_AddDesc_GnssTypes_2eproto(v4, v5, v6, v7);
    operator new();
  }
}

BOOL proto::gnss::Emergency::LcsGanssId_IsValid(proto::gnss::Emergency *this)
{
  return this < 7;
}

void proto::gnss::Emergency::Configuration::MergeFrom(proto::gnss::Emergency::Configuration *this, const proto::gnss::Emergency::Configuration *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  _BYTE v10[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v10, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 1153);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v5) = *((_BYTE *)a2 + 24);
  if ((_BYTE)v5)
  {
    if ((*((_BYTE *)a2 + 24) & 1) != 0)
    {
      v7 = *((_BYTE *)a2 + 16);
      *((_DWORD *)this + 6) |= 1u;
      *((_BYTE *)this + 16) = v7;
      v5 = *((_DWORD *)a2 + 6);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          return;
        goto LABEL_7;
      }
    }
    else if ((*((_BYTE *)a2 + 24) & 2) == 0)
    {
      goto LABEL_6;
    }
    v8 = *((_BYTE *)a2 + 17);
    *((_DWORD *)this + 6) |= 2u;
    *((_BYTE *)this + 17) = v8;
    if ((*((_DWORD *)a2 + 6) & 4) == 0)
      return;
LABEL_7:
    v6 = *((_QWORD *)a2 + 1);
    *((_DWORD *)this + 6) |= 4u;
    *((_QWORD *)this + 1) = v6;
  }
}

void sub_100058314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void proto::gnss::Emergency::Configuration::~Configuration(proto::gnss::Emergency::Configuration *this)
{
  *(_QWORD *)this = off_1000F41F0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = off_1000F41F0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

void proto::gnss::Emergency::Configuration::New(proto::gnss::Emergency::Configuration *this)
{
  operator new();
}

uint64_t proto::gnss::Emergency::Configuration::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 24))
  {
    *(_WORD *)(this + 16) = 0;
    *(_QWORD *)(this + 8) = 0;
  }
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t proto::gnss::Emergency::Configuration::MergePartialFromCodedStream(proto::gnss::Emergency::Configuration *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  unint64_t v9;
  char *v10;
  unsigned int v11;
  _BYTE *v12;
  char *v13;
  uint64_t result;
  unsigned int v15;
  _BYTE *v16;
  unsigned int v17[2];

  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v5 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
            *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
            *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
            *((_QWORD *)a2 + 1) = v5 + 1;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1)
            break;
          v8 = TagFallback & 7;
          if ((TagFallback & 7) != 0)
            goto LABEL_18;
          v17[0] = 0;
          v10 = (char *)*((_QWORD *)a2 + 1);
          v9 = *((_QWORD *)a2 + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v17);
            if (!(_DWORD)result)
              return result;
            v11 = v17[0];
            v12 = (_BYTE *)*((_QWORD *)a2 + 1);
            v9 = *((_QWORD *)a2 + 2);
          }
          else
          {
            v11 = *v10;
            v12 = v10 + 1;
            *((_QWORD *)a2 + 1) = v12;
          }
          *((_BYTE *)this + 16) = v11 != 0;
          *((_DWORD *)this + 6) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            v13 = v12 + 1;
            *((_QWORD *)a2 + 1) = v13;
            goto LABEL_26;
          }
        }
        if (v7 != 2)
          break;
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v13 = (char *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
LABEL_26:
        v17[0] = 0;
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v17);
          if (!(_DWORD)result)
            return result;
          v15 = v17[0];
          v16 = (_BYTE *)*((_QWORD *)a2 + 1);
          v9 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v15 = *v13;
          v16 = v13 + 1;
          *((_QWORD *)a2 + 1) = v16;
        }
        *((_BYTE *)this + 17) = v15 != 0;
        *((_DWORD *)this + 6) |= 2u;
        if ((unint64_t)v16 < v9 && *v16 == 25)
        {
          *((_QWORD *)a2 + 1) = v16 + 1;
          goto LABEL_34;
        }
      }
      if (v7 != 3)
        break;
      v8 = TagFallback & 7;
      if (v8 != 1)
        goto LABEL_18;
LABEL_34:
      *(_QWORD *)v17 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v17) & 1) == 0)return 0;
      *((_QWORD *)this + 1) = *(_QWORD *)v17;
      *((_DWORD *)this + 6) |= 4u;
      if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      }
    }
    v8 = TagFallback & 7;
LABEL_18:
    if (v8 == 4)
      return 1;
  }
  while ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) != 0);
  return 0;
}

uint64_t proto::gnss::Emergency::Configuration::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int v4;
  uint64_t v5;
  int v6;

  v4 = (int)a2;
  v5 = this;
  v6 = *(_DWORD *)(this + 24);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(this + 16), (BOOL)a2, a4);
    v6 = *(_DWORD *)(v5 + 24);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        return this;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v4, *(double *)(v5 + 8), a3);
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 17), v4, a4);
  if ((*(_DWORD *)(v5 + 24) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v4, *(double *)(v5 + 8), a3);
  return this;
}

uint64_t proto::gnss::Emergency::Configuration::ByteSize(proto::gnss::Emergency::Configuration *this)
{
  int v1;
  unsigned int v2;
  uint64_t v3;

  v1 = *((_DWORD *)this + 6);
  v2 = 2 * (v1 & 1);
  if ((v1 & 2) != 0)
    v2 += 2;
  if ((v1 & 4) != 0)
    v2 |= 9u;
  if (*((_DWORD *)this + 6))
    v3 = v2;
  else
    v3 = 0;
  *((_DWORD *)this + 5) = v3;
  return v3;
}

void proto::gnss::Emergency::Configuration::CheckTypeAndMergeFrom(proto::gnss::Emergency::Configuration *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  proto::gnss::Emergency::Configuration::MergeFrom(this, lpsrc);
}

uint64_t proto::gnss::Emergency::Configuration::IsInitialized(proto::gnss::Emergency::Configuration *this)
{
  return 1;
}

_QWORD *proto::gnss::Emergency::Configuration::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.Configuration");
}

void proto::gnss::Emergency::SummaryReport::MergeFrom(proto::gnss::Emergency::SummaryReport *this, const proto::gnss::Emergency::SummaryReport *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  char v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  char v25;
  _BYTE v26[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v26, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 1887);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v26, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v25, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v26);
  }
  v5 = *((_DWORD *)a2 + 31);
  if ((_BYTE)v5)
  {
    if ((v5 & 1) != 0)
    {
      v6 = *((_QWORD *)a2 + 1);
      *((_DWORD *)this + 31) |= 1u;
      *((_QWORD *)this + 1) = v6;
      v5 = *((_DWORD *)a2 + 31);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          goto LABEL_7;
        goto LABEL_15;
      }
    }
    else if ((v5 & 2) == 0)
    {
      goto LABEL_6;
    }
    v7 = *((_QWORD *)a2 + 2);
    *((_DWORD *)this + 31) |= 2u;
    *((_QWORD *)this + 2) = v7;
    v5 = *((_DWORD *)a2 + 31);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0)
        goto LABEL_8;
      goto LABEL_16;
    }
LABEL_15:
    v8 = *((_QWORD *)a2 + 3);
    *((_DWORD *)this + 31) |= 4u;
    *((_QWORD *)this + 3) = v8;
    v5 = *((_DWORD *)a2 + 31);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_17;
    }
LABEL_16:
    v9 = *((_QWORD *)a2 + 4);
    *((_DWORD *)this + 31) |= 8u;
    *((_QWORD *)this + 4) = v9;
    v5 = *((_DWORD *)a2 + 31);
    if ((v5 & 0x10) == 0)
    {
LABEL_9:
      if ((v5 & 0x20) == 0)
        goto LABEL_10;
      goto LABEL_18;
    }
LABEL_17:
    v10 = *((_QWORD *)a2 + 5);
    *((_DWORD *)this + 31) |= 0x10u;
    *((_QWORD *)this + 5) = v10;
    v5 = *((_DWORD *)a2 + 31);
    if ((v5 & 0x20) == 0)
    {
LABEL_10:
      if ((v5 & 0x40) == 0)
        goto LABEL_11;
      goto LABEL_19;
    }
LABEL_18:
    v11 = *((_QWORD *)a2 + 6);
    *((_DWORD *)this + 31) |= 0x20u;
    *((_QWORD *)this + 6) = v11;
    v5 = *((_DWORD *)a2 + 31);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0)
        goto LABEL_22;
      goto LABEL_20;
    }
LABEL_19:
    v12 = *((_DWORD *)a2 + 14);
    *((_DWORD *)this + 31) |= 0x40u;
    *((_DWORD *)this + 14) = v12;
    v5 = *((_DWORD *)a2 + 31);
    if ((v5 & 0x80) == 0)
      goto LABEL_22;
LABEL_20:
    v13 = *((_DWORD *)a2 + 15);
    if (v13 >= 0x12)
      __assert_rtn("set_method_type", "GnssEmergencyTypes.pb.h", 13226, "::proto::gnss::Emergency::PositionMethod_IsValid(value)");
    *((_DWORD *)this + 31) |= 0x80u;
    *((_DWORD *)this + 15) = v13;
    v5 = *((_DWORD *)a2 + 31);
  }
LABEL_22:
  if ((v5 & 0xFF00) == 0)
    goto LABEL_36;
  if ((v5 & 0x100) != 0)
  {
    v14 = *((_DWORD *)a2 + 16);
    if (v14 >= 4)
      __assert_rtn("set_session_type", "GnssEmergencyTypes.pb.h", 13249, "::proto::gnss::Emergency::PositionSession_IsValid(value)");
    *((_DWORD *)this + 31) |= 0x100u;
    *((_DWORD *)this + 16) = v14;
    v5 = *((_DWORD *)a2 + 31);
  }
  if ((v5 & 0x200) != 0)
  {
    v15 = *((_DWORD *)a2 + 17);
    if (v15 >= 7)
      __assert_rtn("set_protocol_type", "GnssEmergencyTypes.pb.h", 13272, "::proto::gnss::Emergency::PositionProtocol_IsValid(value)");
    *((_DWORD *)this + 31) |= 0x200u;
    *((_DWORD *)this + 17) = v15;
    v5 = *((_DWORD *)a2 + 31);
  }
  if ((v5 & 0x400) != 0)
  {
    v18 = *((_QWORD *)a2 + 9);
    *((_DWORD *)this + 31) |= 0x400u;
    *((_QWORD *)this + 9) = v18;
    v5 = *((_DWORD *)a2 + 31);
    if ((v5 & 0x800) == 0)
    {
LABEL_31:
      if ((v5 & 0x1000) == 0)
        goto LABEL_32;
      goto LABEL_44;
    }
  }
  else if ((v5 & 0x800) == 0)
  {
    goto LABEL_31;
  }
  v19 = *((_QWORD *)a2 + 10);
  *((_DWORD *)this + 31) |= 0x800u;
  *((_QWORD *)this + 10) = v19;
  v5 = *((_DWORD *)a2 + 31);
  if ((v5 & 0x1000) == 0)
  {
LABEL_32:
    if ((v5 & 0x2000) == 0)
      goto LABEL_33;
    goto LABEL_45;
  }
LABEL_44:
  v20 = *((_QWORD *)a2 + 11);
  *((_DWORD *)this + 31) |= 0x1000u;
  *((_QWORD *)this + 11) = v20;
  v5 = *((_DWORD *)a2 + 31);
  if ((v5 & 0x2000) == 0)
  {
LABEL_33:
    if ((v5 & 0x4000) == 0)
      goto LABEL_34;
    goto LABEL_47;
  }
LABEL_45:
  v21 = *((_DWORD *)a2 + 24);
  if (v21 >= 8)
    __assert_rtn("set_pos_req_type", "GnssEmergencyTypes.pb.h", 13361, "::proto::gnss::Emergency::PositionReqType_IsValid(value)");
  *((_DWORD *)this + 31) |= 0x2000u;
  *((_DWORD *)this + 24) = v21;
  v5 = *((_DWORD *)a2 + 31);
  if ((v5 & 0x4000) == 0)
  {
LABEL_34:
    if ((v5 & 0x8000) == 0)
      goto LABEL_36;
    goto LABEL_35;
  }
LABEL_47:
  v22 = *((_DWORD *)a2 + 25);
  if (v22 >= 0x11)
    __assert_rtn("set_error_code", "GnssEmergencyTypes.pb.h", 13384, "::proto::gnss::Emergency::SessionErrorCode_IsValid(value)");
  *((_DWORD *)this + 31) |= 0x4000u;
  *((_DWORD *)this + 25) = v22;
  v5 = *((_DWORD *)a2 + 31);
  if ((v5 & 0x8000) != 0)
  {
LABEL_35:
    v16 = *((_BYTE *)a2 + 104);
    *((_DWORD *)this + 31) |= 0x8000u;
    *((_BYTE *)this + 104) = v16;
    v5 = *((_DWORD *)a2 + 31);
  }
LABEL_36:
  if ((v5 & 0xFF0000) == 0)
    return;
  if ((v5 & 0x10000) != 0)
  {
    v23 = *((_BYTE *)a2 + 105);
    *((_DWORD *)this + 31) |= 0x10000u;
    *((_BYTE *)this + 105) = v23;
    v5 = *((_DWORD *)a2 + 31);
    if ((v5 & 0x20000) == 0)
    {
LABEL_39:
      if ((v5 & 0x40000) == 0)
        return;
      goto LABEL_40;
    }
  }
  else if ((v5 & 0x20000) == 0)
  {
    goto LABEL_39;
  }
  v24 = *((_QWORD *)a2 + 14);
  *((_DWORD *)this + 31) |= 0x20000u;
  *((_QWORD *)this + 14) = v24;
  if ((*((_DWORD *)a2 + 31) & 0x40000) != 0)
  {
LABEL_40:
    v17 = *((_DWORD *)a2 + 27);
    *((_DWORD *)this + 31) |= 0x40000u;
    *((_DWORD *)this + 27) = v17;
  }
}

void sub_100058AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void proto::gnss::Emergency::SummaryReport::~SummaryReport(proto::gnss::Emergency::SummaryReport *this)
{
  *(_QWORD *)this = off_1000F4268;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = off_1000F4268;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

void proto::gnss::Emergency::SummaryReport::New(proto::gnss::Emergency::SummaryReport *this)
{
  operator new();
}

uint64_t proto::gnss::Emergency::SummaryReport::Clear(uint64_t this)
{
  int v1;

  v1 = *(_DWORD *)(this + 124);
  if ((_BYTE)v1)
  {
    *(_QWORD *)(this + 56) = 0;
    *(_OWORD *)(this + 40) = 0u;
    *(_OWORD *)(this + 24) = 0u;
    *(_OWORD *)(this + 8) = 0u;
  }
  if ((v1 & 0xFF00) != 0)
  {
    *(_OWORD *)(this + 89) = 0u;
    *(_OWORD *)(this + 64) = 0u;
    *(_OWORD *)(this + 80) = 0u;
  }
  if ((v1 & 0xFF0000) != 0)
  {
    *(_BYTE *)(this + 105) = 0;
    *(_QWORD *)(this + 112) = 0;
    *(_DWORD *)(this + 108) = 0;
  }
  *(_DWORD *)(this + 124) = 0;
  return this;
}

uint64_t proto::gnss::Emergency::SummaryReport::MergePartialFromCodedStream(proto::gnss::Emergency::SummaryReport *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unint64_t *v5;
  unsigned int *v6;
  char *v7;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v9;
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  unint64_t v15;
  _BYTE *v16;
  char *v17;
  unsigned int v18;
  _BYTE *v19;
  char *v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  char *v33;
  uint64_t result;
  unsigned int v35;
  _BYTE *v36;
  unsigned int v37;
  _BYTE *v38;
  unsigned int v39;
  _BYTE *v40;
  _BYTE *v41;
  _BYTE *v42;
  _BYTE *v43;
  unsigned int v44;
  _BYTE *v45;
  unsigned int v46;
  unsigned __int8 *v47;
  unsigned int v48;
  unsigned __int8 *v49;
  unsigned int v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  unsigned int v54[2];

  v5 = (unint64_t *)((char *)this + 112);
  v6 = (unsigned int *)((char *)this + 108);
  while (2)
  {
    v7 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v7 >= *((_QWORD *)a2 + 2) || *v7 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
      *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      *((_QWORD *)a2 + 1) = v7 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v9 = TagFallback & 7;
        if (v9 != 1)
          goto LABEL_67;
        *(_QWORD *)v54 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v54) & 1) == 0)return 0;
        *((_QWORD *)this + 1) = *(_QWORD *)v54;
        *((_DWORD *)this + 31) |= 1u;
        v10 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v10 >= *((_QWORD *)a2 + 2) || *v10 != 17)
          continue;
        *((_QWORD *)a2 + 1) = v10 + 1;
        goto LABEL_15;
      case 2u:
        v9 = TagFallback & 7;
        if (v9 != 1)
          goto LABEL_67;
LABEL_15:
        *(_QWORD *)v54 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v54) & 1) == 0)return 0;
        *((_QWORD *)this + 2) = *(_QWORD *)v54;
        *((_DWORD *)this + 31) |= 2u;
        v11 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v11 >= *((_QWORD *)a2 + 2) || *v11 != 25)
          continue;
        *((_QWORD *)a2 + 1) = v11 + 1;
LABEL_20:
        *(_QWORD *)v54 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v54) & 1) == 0)return 0;
        *((_QWORD *)this + 3) = *(_QWORD *)v54;
        *((_DWORD *)this + 31) |= 4u;
        v12 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v12 >= *((_QWORD *)a2 + 2) || *v12 != 33)
          continue;
        *((_QWORD *)a2 + 1) = v12 + 1;
LABEL_25:
        *(_QWORD *)v54 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v54) & 1) == 0)return 0;
        *((_QWORD *)this + 4) = *(_QWORD *)v54;
        *((_DWORD *)this + 31) |= 8u;
        v13 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v13 >= *((_QWORD *)a2 + 2) || *v13 != 41)
          continue;
        *((_QWORD *)a2 + 1) = v13 + 1;
LABEL_30:
        *(_QWORD *)v54 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v54) & 1) == 0)return 0;
        *((_QWORD *)this + 5) = *(_QWORD *)v54;
        *((_DWORD *)this + 31) |= 0x10u;
        v14 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v14 >= *((_QWORD *)a2 + 2) || *v14 != 49)
          continue;
        *((_QWORD *)a2 + 1) = v14 + 1;
LABEL_35:
        *(_QWORD *)v54 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v54) & 1) == 0)return 0;
        *((_QWORD *)this + 6) = *(_QWORD *)v54;
        *((_DWORD *)this + 31) |= 0x20u;
        v16 = (_BYTE *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v16 >= v15 || *v16 != 56)
          continue;
        v17 = v16 + 1;
        *((_QWORD *)a2 + 1) = v17;
LABEL_41:
        v54[0] = 0;
        if ((unint64_t)v17 >= v15 || *v17 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v54);
          if (!(_DWORD)result)
            return result;
          v18 = v54[0];
          v19 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v18 = *v17;
          v19 = v17 + 1;
          *((_QWORD *)a2 + 1) = v19;
        }
        *((_DWORD *)this + 14) = v18;
        *((_DWORD *)this + 31) |= 0x40u;
        if ((unint64_t)v19 >= v15 || *v19 != 64)
          continue;
        v20 = v19 + 1;
        *((_QWORD *)a2 + 1) = v20;
LABEL_76:
        v54[0] = 0;
        if ((unint64_t)v20 >= v15 || *v20 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v54);
          if (!(_DWORD)result)
            return result;
          v35 = v54[0];
        }
        else
        {
          v35 = *v20;
          *((_QWORD *)a2 + 1) = v20 + 1;
        }
        if (v35 <= 0x11)
        {
          *((_DWORD *)this + 31) |= 0x80u;
          *((_DWORD *)this + 15) = v35;
        }
        v36 = (_BYTE *)*((_QWORD *)a2 + 1);
        v21 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v36 >= v21 || *v36 != 72)
          continue;
        v22 = v36 + 1;
        *((_QWORD *)a2 + 1) = v22;
LABEL_86:
        v54[0] = 0;
        if ((unint64_t)v22 >= v21 || *v22 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v54);
          if (!(_DWORD)result)
            return result;
          v37 = v54[0];
        }
        else
        {
          v37 = *v22;
          *((_QWORD *)a2 + 1) = v22 + 1;
        }
        if (v37 <= 3)
        {
          *((_DWORD *)this + 31) |= 0x100u;
          *((_DWORD *)this + 16) = v37;
        }
        v38 = (_BYTE *)*((_QWORD *)a2 + 1);
        v23 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v38 >= v23 || *v38 != 80)
          continue;
        v24 = v38 + 1;
        *((_QWORD *)a2 + 1) = v24;
LABEL_96:
        v54[0] = 0;
        if ((unint64_t)v24 >= v23 || *v24 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v54);
          if (!(_DWORD)result)
            return result;
          v39 = v54[0];
        }
        else
        {
          v39 = *v24;
          *((_QWORD *)a2 + 1) = v24 + 1;
        }
        if (v39 <= 6)
        {
          *((_DWORD *)this + 31) |= 0x200u;
          *((_DWORD *)this + 17) = v39;
        }
        v40 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v40 >= *((_QWORD *)a2 + 2) || *v40 != 89)
          continue;
        *((_QWORD *)a2 + 1) = v40 + 1;
LABEL_106:
        *(_QWORD *)v54 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v54) & 1) == 0)return 0;
        *((_QWORD *)this + 9) = *(_QWORD *)v54;
        *((_DWORD *)this + 31) |= 0x400u;
        v41 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v41 >= *((_QWORD *)a2 + 2) || *v41 != 97)
          continue;
        *((_QWORD *)a2 + 1) = v41 + 1;
LABEL_110:
        *(_QWORD *)v54 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v54) & 1) == 0)return 0;
        *((_QWORD *)this + 10) = *(_QWORD *)v54;
        *((_DWORD *)this + 31) |= 0x800u;
        v42 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v42 >= *((_QWORD *)a2 + 2) || *v42 != 105)
          continue;
        *((_QWORD *)a2 + 1) = v42 + 1;
LABEL_114:
        *(_QWORD *)v54 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v54) & 1) != 0)
        {
          *((_QWORD *)this + 11) = *(_QWORD *)v54;
          *((_DWORD *)this + 31) |= 0x1000u;
          v43 = (_BYTE *)*((_QWORD *)a2 + 1);
          v25 = *((_QWORD *)a2 + 2);
          if ((unint64_t)v43 < v25 && *v43 == 112)
          {
            v26 = v43 + 1;
            *((_QWORD *)a2 + 1) = v26;
LABEL_118:
            v54[0] = 0;
            if ((unint64_t)v26 >= v25 || *v26 < 0)
            {
              result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v54);
              if (!(_DWORD)result)
                return result;
              v44 = v54[0];
            }
            else
            {
              v44 = *v26;
              *((_QWORD *)a2 + 1) = v26 + 1;
            }
            if (v44 <= 7)
            {
              *((_DWORD *)this + 31) |= 0x2000u;
              *((_DWORD *)this + 24) = v44;
            }
            v45 = (_BYTE *)*((_QWORD *)a2 + 1);
            v27 = *((_QWORD *)a2 + 2);
            if ((unint64_t)v45 < v27 && *v45 == 120)
            {
              v28 = v45 + 1;
              *((_QWORD *)a2 + 1) = v28;
LABEL_128:
              v54[0] = 0;
              if ((unint64_t)v28 >= v27 || *v28 < 0)
              {
                result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v54);
                if (!(_DWORD)result)
                  return result;
                v46 = v54[0];
              }
              else
              {
                v46 = *v28;
                *((_QWORD *)a2 + 1) = v28 + 1;
              }
              if (v46 <= 0x10)
              {
                *((_DWORD *)this + 31) |= 0x4000u;
                *((_DWORD *)this + 25) = v46;
              }
              v47 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
              v29 = *((_QWORD *)a2 + 2);
              if ((int)v29 - (int)v47 >= 2 && *v47 == 128 && v47[1] == 1)
              {
                v30 = v47 + 2;
                *((_QWORD *)a2 + 1) = v30;
LABEL_139:
                v54[0] = 0;
                if ((unint64_t)v30 >= v29 || (char)*v30 < 0)
                {
                  result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v54);
                  if (!(_DWORD)result)
                    return result;
                  v48 = v54[0];
                  v49 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                  v29 = *((_QWORD *)a2 + 2);
                }
                else
                {
                  v48 = *v30;
                  v49 = v30 + 1;
                  *((_QWORD *)a2 + 1) = v49;
                }
                *((_BYTE *)this + 104) = v48 != 0;
                *((_DWORD *)this + 31) |= 0x8000u;
                if ((int)v29 - (int)v49 >= 2 && *v49 == 136 && v49[1] == 1)
                {
                  v31 = v49 + 2;
                  *((_QWORD *)a2 + 1) = v31;
LABEL_148:
                  v54[0] = 0;
                  if ((unint64_t)v31 >= v29 || (char)*v31 < 0)
                  {
                    result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v54);
                    if (!(_DWORD)result)
                      return result;
                    v50 = v54[0];
                    v51 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                    v29 = *((_QWORD *)a2 + 2);
                  }
                  else
                  {
                    v50 = *v31;
                    v51 = v31 + 1;
                    *((_QWORD *)a2 + 1) = v51;
                  }
                  *((_BYTE *)this + 105) = v50 != 0;
                  *((_DWORD *)this + 31) |= 0x10000u;
                  if ((int)v29 - (int)v51 >= 2 && *v51 == 144 && v51[1] == 1)
                  {
                    v32 = v51 + 2;
                    *((_QWORD *)a2 + 1) = v32;
LABEL_157:
                    if ((unint64_t)v32 >= v29 || (char)*v32 < 0)
                    {
                      result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v5);
                      if (!(_DWORD)result)
                        return result;
                      v52 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                      v29 = *((_QWORD *)a2 + 2);
                    }
                    else
                    {
                      *v5 = *v32;
                      v52 = v32 + 1;
                      *((_QWORD *)a2 + 1) = v52;
                    }
                    *((_DWORD *)this + 31) |= 0x20000u;
                    if ((int)v29 - (int)v52 >= 2 && *v52 == 152 && v52[1] == 1)
                    {
                      v33 = (char *)(v52 + 2);
                      *((_QWORD *)a2 + 1) = v33;
LABEL_166:
                      if ((unint64_t)v33 >= v29 || *v33 < 0)
                      {
                        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
                        if (!(_DWORD)result)
                          return result;
                        v53 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                        v29 = *((_QWORD *)a2 + 2);
                      }
                      else
                      {
                        *v6 = *v33;
                        v53 = (unsigned __int8 *)(v33 + 1);
                        *((_QWORD *)a2 + 1) = v53;
                      }
                      *((_DWORD *)this + 31) |= 0x40000u;
                      if (v53 == (unsigned __int8 *)v29
                        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
                      {
                        *((_DWORD *)a2 + 8) = 0;
                        result = 1;
                        *((_BYTE *)a2 + 36) = 1;
                        return result;
                      }
                    }
                  }
                }
              }
            }
          }
          continue;
        }
        return 0;
      case 3u:
        v9 = TagFallback & 7;
        if (v9 == 1)
          goto LABEL_20;
        goto LABEL_67;
      case 4u:
        v9 = TagFallback & 7;
        if (v9 == 1)
          goto LABEL_25;
        goto LABEL_67;
      case 5u:
        v9 = TagFallback & 7;
        if (v9 == 1)
          goto LABEL_30;
        goto LABEL_67;
      case 6u:
        v9 = TagFallback & 7;
        if (v9 == 1)
          goto LABEL_35;
        goto LABEL_67;
      case 7u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_67;
        v17 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_41;
      case 8u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_67;
        v20 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_76;
      case 9u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_67;
        v22 = (char *)*((_QWORD *)a2 + 1);
        v21 = *((_QWORD *)a2 + 2);
        goto LABEL_86;
      case 0xAu:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_67;
        v24 = (char *)*((_QWORD *)a2 + 1);
        v23 = *((_QWORD *)a2 + 2);
        goto LABEL_96;
      case 0xBu:
        v9 = TagFallback & 7;
        if (v9 == 1)
          goto LABEL_106;
        goto LABEL_67;
      case 0xCu:
        v9 = TagFallback & 7;
        if (v9 == 1)
          goto LABEL_110;
        goto LABEL_67;
      case 0xDu:
        v9 = TagFallback & 7;
        if (v9 == 1)
          goto LABEL_114;
        goto LABEL_67;
      case 0xEu:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_67;
        v26 = (char *)*((_QWORD *)a2 + 1);
        v25 = *((_QWORD *)a2 + 2);
        goto LABEL_118;
      case 0xFu:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_67;
        v28 = (char *)*((_QWORD *)a2 + 1);
        v27 = *((_QWORD *)a2 + 2);
        goto LABEL_128;
      case 0x10u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_67;
        v30 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v29 = *((_QWORD *)a2 + 2);
        goto LABEL_139;
      case 0x11u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_67;
        v31 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v29 = *((_QWORD *)a2 + 2);
        goto LABEL_148;
      case 0x12u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_67;
        v32 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v29 = *((_QWORD *)a2 + 2);
        goto LABEL_157;
      case 0x13u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_67;
        v33 = (char *)*((_QWORD *)a2 + 1);
        v29 = *((_QWORD *)a2 + 2);
        goto LABEL_166;
      default:
        v9 = TagFallback & 7;
LABEL_67:
        if (v9 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t proto::gnss::Emergency::SummaryReport::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 124);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, (int)a2, *(double *)(this + 8), a3);
    v6 = *(_DWORD *)(v5 + 124);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_23;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (int)a2, *(double *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 124);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_24;
  }
LABEL_23:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (int)a2, *(double *)(v5 + 24), a3);
  v6 = *(_DWORD *)(v5 + 124);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_25;
  }
LABEL_24:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, (int)a2, *(double *)(v5 + 32), a3);
  v6 = *(_DWORD *)(v5 + 124);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_26;
  }
LABEL_25:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, (int)a2, *(double *)(v5 + 40), a3);
  v6 = *(_DWORD *)(v5 + 124);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_27;
  }
LABEL_26:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, (int)a2, *(double *)(v5 + 48), a3);
  v6 = *(_DWORD *)(v5 + 124);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_28;
  }
LABEL_27:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(_DWORD *)(v5 + 56), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 124);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(_DWORD *)(v5 + 60), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 124);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(_DWORD *)(v5 + 64), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 124);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(_DWORD *)(v5 + 68), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 124);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, (int)a2, *(double *)(v5 + 72), a3);
  v6 = *(_DWORD *)(v5 + 124);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, (int)a2, *(double *)(v5 + 80), a3);
  v6 = *(_DWORD *)(v5 + 124);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_33:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, (int)a2, *(double *)(v5 + 88), a3);
  v6 = *(_DWORD *)(v5 + 124);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_34:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, *(_DWORD *)(v5 + 96), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 124);
  if ((v6 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_35:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF, *(_DWORD *)(v5 + 100), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 124);
  if ((v6 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_37;
  }
LABEL_36:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, *(unsigned __int8 *)(v5 + 104), (BOOL)a2, a4);
  v6 = *(_DWORD *)(v5 + 124);
  if ((v6 & 0x10000) == 0)
  {
LABEL_18:
    if ((v6 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_38;
  }
LABEL_37:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11, *(unsigned __int8 *)(v5 + 105), (BOOL)a2, a4);
  v6 = *(_DWORD *)(v5 + 124);
  if ((v6 & 0x20000) == 0)
  {
LABEL_19:
    if ((v6 & 0x40000) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x13, *(_DWORD *)(v5 + 108), a2, a4);
  }
LABEL_38:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x12, *(_QWORD *)(v5 + 112), (unint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 124) & 0x40000) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x13, *(_DWORD *)(v5 + 108), a2, a4);
  return this;
}

uint64_t proto::gnss::Emergency::SummaryReport::ByteSize(proto::gnss::Emergency::SummaryReport *this, unint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v12;
  int v13;
  int v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;
  int v16;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v17;
  int v18;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v19;
  int v20;

  v3 = *((_DWORD *)this + 31);
  if ((_BYTE)v3)
  {
    v4 = (v3 << 31 >> 31) & 9;
    if ((v3 & 2) != 0)
      v4 += 9;
    if ((v3 & 4) != 0)
      v4 += 9;
    if ((v3 & 8) != 0)
      v4 += 9;
    if ((v3 & 0x10) != 0)
      v4 += 9;
    if ((v3 & 0x20) != 0)
      v5 = v4 + 9;
    else
      v5 = v4;
    if ((v3 & 0x40) != 0)
    {
      v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 14);
      if ((v6 & 0x80000000) != 0)
      {
        v7 = 10;
      }
      else if (v6 >= 0x80)
      {
        v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2);
        v3 = *((_DWORD *)this + 31);
      }
      else
      {
        v7 = 1;
      }
      v5 = (v5 + v7 + 1);
    }
    if ((v3 & 0x80) != 0)
    {
      v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 15);
      if ((v8 & 0x80000000) != 0)
      {
        v9 = 11;
      }
      else if (v8 >= 0x80)
      {
        v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2) + 1;
        v3 = *((_DWORD *)this + 31);
      }
      else
      {
        v9 = 2;
      }
      v5 = (v9 + v5);
    }
  }
  else
  {
    v5 = 0;
  }
  if ((v3 & 0xFF00) != 0)
  {
    if ((v3 & 0x100) != 0)
    {
      v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 16);
      if ((v10 & 0x80000000) != 0)
      {
        v11 = 11;
      }
      else if (v10 >= 0x80)
      {
        v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2) + 1;
        v3 = *((_DWORD *)this + 31);
      }
      else
      {
        v11 = 2;
      }
      LODWORD(v5) = v11 + v5;
    }
    if ((v3 & 0x200) != 0)
    {
      v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 17);
      if ((v12 & 0x80000000) != 0)
      {
        v13 = 11;
      }
      else if (v12 >= 0x80)
      {
        v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, a2) + 1;
        v3 = *((_DWORD *)this + 31);
      }
      else
      {
        v13 = 2;
      }
      LODWORD(v5) = v13 + v5;
    }
    v14 = v5 + 9;
    if ((v3 & 0x400) == 0)
      v14 = v5;
    if ((v3 & 0x800) != 0)
      v14 += 9;
    if ((v3 & 0x1000) != 0)
      LODWORD(v5) = v14 + 9;
    else
      LODWORD(v5) = v14;
    if ((v3 & 0x2000) != 0)
    {
      v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 24);
      if ((v15 & 0x80000000) != 0)
      {
        v16 = 11;
      }
      else if (v15 >= 0x80)
      {
        v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2) + 1;
        v3 = *((_DWORD *)this + 31);
      }
      else
      {
        v16 = 2;
      }
      LODWORD(v5) = v16 + v5;
    }
    if ((v3 & 0x4000) != 0)
    {
      v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 25);
      if ((v17 & 0x80000000) != 0)
      {
        v18 = 11;
      }
      else if (v17 >= 0x80)
      {
        v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2) + 1;
        v3 = *((_DWORD *)this + 31);
      }
      else
      {
        v18 = 2;
      }
      LODWORD(v5) = v18 + v5;
    }
    if ((v3 & 0x8000) != 0)
      v5 = (v5 + 3);
    else
      v5 = v5;
  }
  if ((v3 & 0xFF0000) != 0)
  {
    if ((v3 & 0x10000) != 0)
      v5 = (v5 + 3);
    else
      v5 = v5;
    if ((v3 & 0x20000) != 0)
    {
      v5 = v5
         + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 14), a2)+ 2;
      v3 = *((_DWORD *)this + 31);
    }
    if ((v3 & 0x40000) != 0)
    {
      v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 27);
      if (v19 >= 0x80)
        v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19, a2) + 2;
      else
        v20 = 3;
      v5 = (v20 + v5);
    }
  }
  *((_DWORD *)this + 30) = v5;
  return v5;
}

void proto::gnss::Emergency::SummaryReport::CheckTypeAndMergeFrom(proto::gnss::Emergency::SummaryReport *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  proto::gnss::Emergency::SummaryReport::MergeFrom(this, lpsrc);
}

uint64_t proto::gnss::Emergency::SummaryReport::IsInitialized(proto::gnss::Emergency::SummaryReport *this)
{
  return 1;
}

_QWORD *proto::gnss::Emergency::SummaryReport::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.SummaryReport");
}

void sub_1000599BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  char v6;
  int v7;
  const std::string *v8;
  std::string *v9;
  char v10;
  char v11;
  char v12;
  char v13;
  _BYTE v14[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v14, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 2283);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v13, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      v7 = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 16) = v7;
      v5 = *(_DWORD *)(a2 + 28);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          goto LABEL_7;
        goto LABEL_16;
      }
    }
    else if ((*(_BYTE *)(a2 + 28) & 2) == 0)
    {
      goto LABEL_6;
    }
    v8 = *(const std::string **)(a2 + 8);
    *(_DWORD *)(a1 + 28) |= 2u;
    v9 = *(std::string **)(a1 + 8);
    if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v9, v8);
    v5 = *(_DWORD *)(a2 + 28);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0)
        goto LABEL_8;
      goto LABEL_17;
    }
LABEL_16:
    v10 = *(_BYTE *)(a2 + 20);
    *(_DWORD *)(a1 + 28) |= 4u;
    *(_BYTE *)(a1 + 20) = v10;
    v5 = *(_DWORD *)(a2 + 28);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
LABEL_17:
    v11 = *(_BYTE *)(a2 + 21);
    *(_DWORD *)(a1 + 28) |= 8u;
    *(_BYTE *)(a1 + 21) = v11;
    v5 = *(_DWORD *)(a2 + 28);
    if ((v5 & 0x10) == 0)
    {
LABEL_9:
      if ((v5 & 0x20) == 0)
        return;
      goto LABEL_10;
    }
LABEL_18:
    v12 = *(_BYTE *)(a2 + 22);
    *(_DWORD *)(a1 + 28) |= 0x10u;
    *(_BYTE *)(a1 + 22) = v12;
    if ((*(_DWORD *)(a2 + 28) & 0x20) == 0)
      return;
LABEL_10:
    v6 = *(_BYTE *)(a2 + 23);
    *(_DWORD *)(a1 + 28) |= 0x20u;
    *(_BYTE *)(a1 + 23) = v6;
  }
}

void sub_100059B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100059B48(uint64_t result)
{
  if ((_UNKNOWN *)result != &wireless_diagnostics::google::protobuf::internal::kEmptyString && result != 0)
  {
    if (*(char *)(result + 23) < 0)
      operator delete(*(void **)result);
    operator delete();
  }
  return result;
}

void sub_100059BA0(uint64_t *a1)
{
  *a1 = (uint64_t)off_1000F42E0;
  sub_100059B48(a1[1]);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

void sub_100059BD4(uint64_t *a1)
{
  *a1 = (uint64_t)off_1000F42E0;
  sub_100059B48(a1[1]);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
  operator delete();
}

void sub_100059C1C()
{
  operator new();
}

uint64_t proto::gnss::Emergency::SuplConfig::Clear(uint64_t this)
{
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(this + 28);
  if (v1)
  {
    *(_DWORD *)(this + 16) = 0;
    if ((v1 & 2) != 0)
    {
      v2 = *(_QWORD *)(this + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
    *(_DWORD *)(this + 20) = 0;
  }
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t sub_100059CAC(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  unint64_t v9;
  char *v10;
  _BYTE *v11;
  int v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  _BYTE *v21;
  unsigned int v22;
  _BYTE *v23;
  unsigned int v24;
  _BYTE *v25;
  unsigned int v26;
  unsigned __int8 *v27;
  uint64_t result;
  unsigned int v29;

  v5 = (unsigned int *)(a1 + 16);
  while (2)
  {
    v6 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v6 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v10 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
        if ((unint64_t)v10 < v9 && (*v10 & 0x80000000) == 0)
        {
          *v5 = *v10;
          v11 = v10 + 1;
          *((_QWORD *)this + 1) = v11;
LABEL_28:
          v12 = *(_DWORD *)(a1 + 28) | 1;
          *(_DWORD *)(a1 + 28) = v12;
          if ((unint64_t)v11 < v9 && *v11 == 18)
          {
            *((_QWORD *)this + 1) = v11 + 1;
            goto LABEL_31;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
        if ((_DWORD)result)
        {
          v11 = (_BYTE *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
          goto LABEL_28;
        }
        break;
      case 2u:
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_22;
        v12 = *(_DWORD *)(a1 + 28);
LABEL_31:
        *(_DWORD *)(a1 + 28) = v12 | 2;
        v18 = *(void **)(a1 + 8);
        if (v18 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v18);
        if (!(_DWORD)result)
          return result;
        v19 = (_BYTE *)*((_QWORD *)this + 1);
        v13 = *((_QWORD *)this + 2);
        if ((unint64_t)v19 >= v13 || *v19 != 24)
          continue;
        v14 = v19 + 1;
        *((_QWORD *)this + 1) = v14;
LABEL_37:
        v29 = 0;
        if ((unint64_t)v14 >= v13 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v29);
          if (!(_DWORD)result)
            return result;
          v20 = v29;
          v21 = (_BYTE *)*((_QWORD *)this + 1);
          v13 = *((_QWORD *)this + 2);
        }
        else
        {
          v20 = *v14;
          v21 = v14 + 1;
          *((_QWORD *)this + 1) = v21;
        }
        *(_BYTE *)(a1 + 20) = v20 != 0;
        *(_DWORD *)(a1 + 28) |= 4u;
        if ((unint64_t)v21 >= v13 || *v21 != 32)
          continue;
        v15 = v21 + 1;
        *((_QWORD *)this + 1) = v15;
LABEL_45:
        v29 = 0;
        if ((unint64_t)v15 >= v13 || *v15 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v29);
          if (!(_DWORD)result)
            return result;
          v22 = v29;
          v23 = (_BYTE *)*((_QWORD *)this + 1);
          v13 = *((_QWORD *)this + 2);
        }
        else
        {
          v22 = *v15;
          v23 = v15 + 1;
          *((_QWORD *)this + 1) = v23;
        }
        *(_BYTE *)(a1 + 21) = v22 != 0;
        *(_DWORD *)(a1 + 28) |= 8u;
        if ((unint64_t)v23 >= v13 || *v23 != 40)
          continue;
        v16 = v23 + 1;
        *((_QWORD *)this + 1) = v16;
LABEL_53:
        v29 = 0;
        if ((unint64_t)v16 >= v13 || *v16 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v29);
          if (!(_DWORD)result)
            return result;
          v24 = v29;
          v25 = (_BYTE *)*((_QWORD *)this + 1);
          v13 = *((_QWORD *)this + 2);
        }
        else
        {
          v24 = *v16;
          v25 = v16 + 1;
          *((_QWORD *)this + 1) = v25;
        }
        *(_BYTE *)(a1 + 22) = v24 != 0;
        *(_DWORD *)(a1 + 28) |= 0x10u;
        if ((unint64_t)v25 >= v13 || *v25 != 48)
          continue;
        v17 = v25 + 1;
        *((_QWORD *)this + 1) = v17;
LABEL_61:
        v29 = 0;
        if ((unint64_t)v17 >= v13 || *v17 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v29);
          if (!(_DWORD)result)
            return result;
          v26 = v29;
          v27 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v13 = *((_QWORD *)this + 2);
        }
        else
        {
          v26 = *v17;
          v27 = (unsigned __int8 *)(v17 + 1);
          *((_QWORD *)this + 1) = v27;
        }
        *(_BYTE *)(a1 + 23) = v26 != 0;
        *(_DWORD *)(a1 + 28) |= 0x20u;
        if (v27 != (unsigned __int8 *)v13 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
          continue;
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      case 3u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v14 = (char *)*((_QWORD *)this + 1);
        v13 = *((_QWORD *)this + 2);
        goto LABEL_37;
      case 4u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v15 = (char *)*((_QWORD *)this + 1);
        v13 = *((_QWORD *)this + 2);
        goto LABEL_45;
      case 5u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v16 = (char *)*((_QWORD *)this + 1);
        v13 = *((_QWORD *)this + 2);
        goto LABEL_53;
      case 6u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v17 = (char *)*((_QWORD *)this + 1);
        v13 = *((_QWORD *)this + 2);
        goto LABEL_61;
      default:
        v8 = TagFallback & 7;
LABEL_22:
        if (v8 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

uint64_t sub_10005A080(uint64_t result, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = result;
  v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(2, *(_QWORD *)(v5 + 8), a2);
  v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 20), a2, a4);
  v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 21), a2, a4);
  v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned __int8 *)(v5 + 23), a2, a4);
  }
LABEL_12:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 22), a2, a4);
  if ((*(_DWORD *)(v5 + 28) & 0x20) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned __int8 *)(v5 + 23), a2, a4);
  return result;
}

uint64_t proto::gnss::Emergency::SuplConfig::ByteSize(proto::gnss::Emergency::SuplConfig *this, unsigned int a2)
{
  int v3;
  int v4;
  uint64_t result;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;

  LOBYTE(v3) = *((_BYTE *)this + 28);
  if (!(_BYTE)v3)
  {
    result = 0;
    goto LABEL_28;
  }
  if ((*((_BYTE *)this + 28) & 1) == 0)
  {
    v4 = 0;
    if ((*((_BYTE *)this + 28) & 2) == 0)
      goto LABEL_19;
LABEL_10:
    v7 = *((_QWORD *)this + 1);
    v8 = *(unsigned __int8 *)(v7 + 23);
    v9 = v8;
    v10 = *(_QWORD *)(v7 + 8);
    if ((v8 & 0x80u) == 0)
      v11 = *(unsigned __int8 *)(v7 + 23);
    else
      v11 = v10;
    if (v11 >= 0x80)
    {
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v11, a2);
      v8 = *(unsigned __int8 *)(v7 + 23);
      v10 = *(_QWORD *)(v7 + 8);
      v3 = *((_DWORD *)this + 7);
      v9 = *(_BYTE *)(v7 + 23);
    }
    else
    {
      v12 = 1;
    }
    if (v9 < 0)
      v8 = v10;
    v4 += v12 + v8 + 1;
    goto LABEL_19;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
  if (v6 < 0x80)
  {
    v4 = 2;
    if ((v3 & 2) == 0)
      goto LABEL_19;
    goto LABEL_10;
  }
  v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
  v3 = *((_DWORD *)this + 7);
  if ((v3 & 2) != 0)
    goto LABEL_10;
LABEL_19:
  v13 = v4 + 2;
  if ((v3 & 4) == 0)
    v13 = v4;
  if ((v3 & 8) != 0)
    v13 += 2;
  if ((v3 & 0x10) != 0)
    v13 += 2;
  if ((v3 & 0x20) != 0)
    result = v13 + 2;
  else
    result = v13;
LABEL_28:
  *((_DWORD *)this + 6) = result;
  return result;
}

void sub_10005A240(uint64_t a1, void *lpsrc)
{
  sub_1000599BC(a1, (uint64_t)lpsrc);
}

uint64_t sub_10005A2A8()
{
  return 1;
}

_QWORD *sub_10005A2B0@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.SuplConfig");
}

void sub_10005A2C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  char v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  char v16;
  _BYTE v17[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v17, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 2751);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v17, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v16, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v17);
  }
  v5 = *(_DWORD *)(a2 + 52);
  if (!(_BYTE)v5)
    goto LABEL_13;
  if ((v5 & 1) != 0)
  {
    v9 = *(_BYTE *)(a2 + 8);
    *(_DWORD *)(a1 + 52) |= 1u;
    *(_BYTE *)(a1 + 8) = v9;
    v5 = *(_DWORD *)(a2 + 52);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0)
        goto LABEL_7;
      goto LABEL_21;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_6;
  }
  v10 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 52) |= 2u;
  *(_DWORD *)(a1 + 12) = v10;
  v5 = *(_DWORD *)(a2 + 52);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  v11 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 52) |= 4u;
  *(_DWORD *)(a1 + 16) = v11;
  v5 = *(_DWORD *)(a2 + 52);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  v12 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 52) |= 8u;
  *(_DWORD *)(a1 + 20) = v12;
  v5 = *(_DWORD *)(a2 + 52);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
LABEL_24:
    v14 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a1 + 52) |= 0x20u;
    *(_DWORD *)(a1 + 28) = v14;
    v5 = *(_DWORD *)(a2 + 52);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0)
        goto LABEL_13;
      goto LABEL_12;
    }
    goto LABEL_25;
  }
LABEL_23:
  v13 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 52) |= 0x10u;
  *(_DWORD *)(a1 + 24) = v13;
  v5 = *(_DWORD *)(a2 + 52);
  if ((v5 & 0x20) != 0)
    goto LABEL_24;
LABEL_10:
  if ((v5 & 0x40) == 0)
    goto LABEL_11;
LABEL_25:
  v15 = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 52) |= 0x40u;
  *(_DWORD *)(a1 + 32) = v15;
  v5 = *(_DWORD *)(a2 + 52);
  if ((v5 & 0x80) != 0)
  {
LABEL_12:
    v6 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a1 + 52) |= 0x80u;
    *(_DWORD *)(a1 + 36) = v6;
    v5 = *(_DWORD *)(a2 + 52);
  }
LABEL_13:
  if ((v5 & 0xFF00) != 0)
  {
    if ((v5 & 0x100) != 0)
    {
      v7 = *(_DWORD *)(a2 + 40);
      *(_DWORD *)(a1 + 52) |= 0x100u;
      *(_DWORD *)(a1 + 40) = v7;
      v5 = *(_DWORD *)(a2 + 52);
    }
    if ((v5 & 0x200) != 0)
    {
      v8 = *(_DWORD *)(a2 + 44);
      *(_DWORD *)(a1 + 52) |= 0x200u;
      *(_DWORD *)(a1 + 44) = v8;
    }
  }
}

void sub_10005A474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10005A48C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1000F4358;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10005A49C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1000F4358;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_10005A4CC()
{
  operator new();
}

uint64_t sub_10005A514(uint64_t result)
{
  int v1;

  v1 = *(_DWORD *)(result + 52);
  if ((_BYTE)v1)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)(result + 12) = 0;
    *(_QWORD *)(result + 28) = 0;
    *(_QWORD *)(result + 20) = 0;
    *(_DWORD *)(result + 36) = 0;
  }
  if ((v1 & 0xFF00) != 0)
    *(_QWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

uint64_t sub_10005A548(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  char *v12;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v14;
  unint64_t v15;
  char *v16;
  unsigned int v17;
  _BYTE *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  _BYTE *v28;
  _BYTE *v29;
  _BYTE *v30;
  _BYTE *v31;
  _BYTE *v32;
  _BYTE *v33;
  _BYTE *v34;
  unsigned int v35;
  _BYTE *v36;
  unsigned __int8 *v37;
  uint64_t result;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;

  v39 = (unsigned int *)(a1 + 12);
  v5 = (unsigned int *)(a1 + 16);
  v6 = (unsigned int *)(a1 + 20);
  v7 = (unsigned int *)(a1 + 24);
  v8 = (unsigned int *)(a1 + 28);
  v9 = (unsigned int *)(a1 + 32);
  v10 = (unsigned int *)(a1 + 36);
  v11 = (unsigned int *)(a1 + 44);
  while (2)
  {
    v12 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v12 >= *((_QWORD *)this + 2) || *v12 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v12;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v12 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_30;
        v40 = 0;
        v16 = (char *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        if ((unint64_t)v16 < v15 && (*v16 & 0x80000000) == 0)
        {
          v17 = *v16;
          v18 = v16 + 1;
          *((_QWORD *)this + 1) = v18;
LABEL_36:
          *(_BYTE *)(a1 + 8) = v17 != 0;
          *(_DWORD *)(a1 + 52) |= 1u;
          if ((unint64_t)v18 < v15 && *v18 == 16)
          {
            v19 = v18 + 1;
            *((_QWORD *)this + 1) = v19;
            goto LABEL_39;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v40);
        if ((_DWORD)result)
        {
          v17 = v40;
          v18 = (_BYTE *)*((_QWORD *)this + 1);
          v15 = *((_QWORD *)this + 2);
          goto LABEL_36;
        }
        break;
      case 2u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_30;
        v19 = (char *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
LABEL_39:
        if ((unint64_t)v19 >= v15 || *v19 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v39);
          if (!(_DWORD)result)
            return result;
          v28 = (_BYTE *)*((_QWORD *)this + 1);
          v15 = *((_QWORD *)this + 2);
        }
        else
        {
          *v39 = *v19;
          v28 = v19 + 1;
          *((_QWORD *)this + 1) = v28;
        }
        *(_DWORD *)(a1 + 52) |= 2u;
        if ((unint64_t)v28 >= v15 || *v28 != 24)
          continue;
        v20 = v28 + 1;
        *((_QWORD *)this + 1) = v20;
LABEL_47:
        if ((unint64_t)v20 >= v15 || *v20 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
          if (!(_DWORD)result)
            return result;
          v29 = (_BYTE *)*((_QWORD *)this + 1);
          v15 = *((_QWORD *)this + 2);
        }
        else
        {
          *v5 = *v20;
          v29 = v20 + 1;
          *((_QWORD *)this + 1) = v29;
        }
        *(_DWORD *)(a1 + 52) |= 4u;
        if ((unint64_t)v29 >= v15 || *v29 != 32)
          continue;
        v21 = v29 + 1;
        *((_QWORD *)this + 1) = v21;
LABEL_55:
        if ((unint64_t)v21 >= v15 || *v21 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v6);
          if (!(_DWORD)result)
            return result;
          v30 = (_BYTE *)*((_QWORD *)this + 1);
          v15 = *((_QWORD *)this + 2);
        }
        else
        {
          *v6 = *v21;
          v30 = v21 + 1;
          *((_QWORD *)this + 1) = v30;
        }
        *(_DWORD *)(a1 + 52) |= 8u;
        if ((unint64_t)v30 >= v15 || *v30 != 40)
          continue;
        v22 = v30 + 1;
        *((_QWORD *)this + 1) = v22;
LABEL_63:
        if ((unint64_t)v22 >= v15 || *v22 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v7);
          if (!(_DWORD)result)
            return result;
          v31 = (_BYTE *)*((_QWORD *)this + 1);
          v15 = *((_QWORD *)this + 2);
        }
        else
        {
          *v7 = *v22;
          v31 = v22 + 1;
          *((_QWORD *)this + 1) = v31;
        }
        *(_DWORD *)(a1 + 52) |= 0x10u;
        if ((unint64_t)v31 >= v15 || *v31 != 48)
          continue;
        v23 = v31 + 1;
        *((_QWORD *)this + 1) = v23;
LABEL_71:
        if ((unint64_t)v23 >= v15 || *v23 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v8);
          if (!(_DWORD)result)
            return result;
          v32 = (_BYTE *)*((_QWORD *)this + 1);
          v15 = *((_QWORD *)this + 2);
        }
        else
        {
          *v8 = *v23;
          v32 = v23 + 1;
          *((_QWORD *)this + 1) = v32;
        }
        *(_DWORD *)(a1 + 52) |= 0x20u;
        if ((unint64_t)v32 >= v15 || *v32 != 56)
          continue;
        v24 = v32 + 1;
        *((_QWORD *)this + 1) = v24;
LABEL_79:
        if ((unint64_t)v24 >= v15 || *v24 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v9);
          if (!(_DWORD)result)
            return result;
          v33 = (_BYTE *)*((_QWORD *)this + 1);
          v15 = *((_QWORD *)this + 2);
        }
        else
        {
          *v9 = *v24;
          v33 = v24 + 1;
          *((_QWORD *)this + 1) = v33;
        }
        *(_DWORD *)(a1 + 52) |= 0x40u;
        if ((unint64_t)v33 >= v15 || *v33 != 64)
          continue;
        v25 = v33 + 1;
        *((_QWORD *)this + 1) = v25;
LABEL_87:
        if ((unint64_t)v25 >= v15 || *v25 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v10);
          if (!(_DWORD)result)
            return result;
          v34 = (_BYTE *)*((_QWORD *)this + 1);
          v15 = *((_QWORD *)this + 2);
        }
        else
        {
          *v10 = *v25;
          v34 = v25 + 1;
          *((_QWORD *)this + 1) = v34;
        }
        *(_DWORD *)(a1 + 52) |= 0x80u;
        if ((unint64_t)v34 >= v15 || *v34 != 72)
          continue;
        v26 = v34 + 1;
        *((_QWORD *)this + 1) = v26;
LABEL_95:
        v41 = 0;
        if ((unint64_t)v26 >= v15 || *v26 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v41);
          if (!(_DWORD)result)
            return result;
          v35 = v41;
          v36 = (_BYTE *)*((_QWORD *)this + 1);
          v15 = *((_QWORD *)this + 2);
        }
        else
        {
          v35 = *v26;
          v36 = v26 + 1;
          *((_QWORD *)this + 1) = v36;
        }
        *(_DWORD *)(a1 + 40) = v35;
        *(_DWORD *)(a1 + 52) |= 0x100u;
        if ((unint64_t)v36 >= v15 || *v36 != 80)
          continue;
        v27 = v36 + 1;
        *((_QWORD *)this + 1) = v27;
LABEL_103:
        if ((unint64_t)v27 >= v15 || *v27 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v11);
          if (!(_DWORD)result)
            return result;
          v37 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v15 = *((_QWORD *)this + 2);
        }
        else
        {
          *v11 = *v27;
          v37 = (unsigned __int8 *)(v27 + 1);
          *((_QWORD *)this + 1) = v37;
        }
        *(_DWORD *)(a1 + 52) |= 0x200u;
        if (v37 != (unsigned __int8 *)v15 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
          continue;
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      case 3u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_30;
        v20 = (char *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        goto LABEL_47;
      case 4u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_30;
        v21 = (char *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        goto LABEL_55;
      case 5u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_30;
        v22 = (char *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        goto LABEL_63;
      case 6u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_30;
        v23 = (char *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        goto LABEL_71;
      case 7u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_30;
        v24 = (char *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        goto LABEL_79;
      case 8u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_30;
        v25 = (char *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        goto LABEL_87;
      case 9u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_30;
        v26 = (char *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        goto LABEL_95;
      case 0xAu:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_30;
        v27 = (char *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        goto LABEL_103;
      default:
        v14 = TagFallback & 7;
LABEL_30:
        if (v14 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

uint64_t sub_10005AAD4(uint64_t result, unsigned int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int *v5;
  int v6;

  v5 = (int *)result;
  v6 = *(_DWORD *)(result + 52);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(result + 8), a2, a4);
    v6 = v5[13];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v5[3], a2, a4);
  v6 = v5[13];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[4], a2, a4);
  v6 = v5[13];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v5[5], a2, a4);
  v6 = v5[13];
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v5[6], a2, a4);
  v6 = v5[13];
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v5[7], a2, a4);
  v6 = v5[13];
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v5[8], a2, a4);
  v6 = v5[13];
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, v5[9], a2, a4);
  v6 = v5[13];
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, v5[11], a2, a4);
  }
LABEL_20:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, v5[10], a2, a4);
  if ((v5[13] & 0x200) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, v5[11], a2, a4);
  return result;
}

uint64_t proto::gnss::Emergency::LteCellInfo::ByteSize(proto::gnss::Emergency::LteCellInfo *this, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v13;
  int v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;
  int v16;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v17;
  int v18;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v19;
  int v20;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v21;
  int v22;

  v3 = *((_DWORD *)this + 13);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_39;
  }
  v4 = 2 * (v3 & 1u);
  if ((v3 & 2) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
    if (v5 >= 0x80)
    {
      v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
      v3 = *((_DWORD *)this + 13);
    }
    else
    {
      v6 = 1;
    }
    v4 = (v4 | 1) + v6;
    if ((v3 & 4) == 0)
    {
LABEL_4:
      if ((v3 & 8) == 0)
        goto LABEL_5;
      goto LABEL_19;
    }
  }
  else if ((v3 & 4) == 0)
  {
    goto LABEL_4;
  }
  v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
  if (v7 >= 0x80)
  {
    v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
    v3 = *((_DWORD *)this + 13);
  }
  else
  {
    v8 = 1;
  }
  v4 = (v4 + v8 + 1);
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_23;
  }
LABEL_19:
  v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
  if (v9 >= 0x80)
  {
    v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2) + 1;
    v3 = *((_DWORD *)this + 13);
  }
  else
  {
    v10 = 2;
  }
  v4 = (v10 + v4);
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_27;
  }
LABEL_23:
  v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
  if (v11 >= 0x80)
  {
    v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
    v3 = *((_DWORD *)this + 13);
  }
  else
  {
    v12 = 2;
  }
  v4 = (v12 + v4);
  if ((v3 & 0x20) == 0)
  {
LABEL_7:
    if ((v3 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_31;
  }
LABEL_27:
  v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 7);
  if (v13 >= 0x80)
  {
    v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2) + 1;
    v3 = *((_DWORD *)this + 13);
  }
  else
  {
    v14 = 2;
  }
  v4 = (v14 + v4);
  if ((v3 & 0x40) == 0)
  {
LABEL_8:
    if ((v3 & 0x80) == 0)
      goto LABEL_39;
    goto LABEL_35;
  }
LABEL_31:
  v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
  if (v15 >= 0x80)
  {
    v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2) + 1;
    v3 = *((_DWORD *)this + 13);
  }
  else
  {
    v16 = 2;
  }
  v4 = (v16 + v4);
  if ((v3 & 0x80) != 0)
  {
LABEL_35:
    v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 9);
    if (v17 >= 0x80)
    {
      v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2) + 1;
      v3 = *((_DWORD *)this + 13);
    }
    else
    {
      v18 = 2;
    }
    v4 = (v18 + v4);
  }
LABEL_39:
  if ((v3 & 0xFF00) != 0)
  {
    if ((v3 & 0x100) != 0)
    {
      v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 10);
      if ((v19 & 0x80000000) != 0)
      {
        v20 = 11;
      }
      else if (v19 >= 0x80)
      {
        v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19, a2) + 1;
        v3 = *((_DWORD *)this + 13);
      }
      else
      {
        v20 = 2;
      }
      v4 = (v20 + v4);
    }
    if ((v3 & 0x200) != 0)
    {
      v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 11);
      if (v21 >= 0x80)
        v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21, a2) + 1;
      else
        v22 = 2;
      v4 = (v22 + v4);
    }
  }
  *((_DWORD *)this + 12) = v4;
  return v4;
}

void sub_10005ADE0(uint64_t a1, void *lpsrc)
{
  sub_10005A2C0(a1, (uint64_t)lpsrc);
}

uint64_t sub_10005AE48()
{
  return 1;
}

_QWORD *sub_10005AE50@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.LteCellInfo");
}

void sub_10005AE60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  char v7;
  int v8;
  int v9;
  int v10;
  char v11;
  _BYTE v12[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v12, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 3078);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 32);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) != 0)
    {
      v7 = *(_BYTE *)(a2 + 8);
      *(_DWORD *)(a1 + 32) |= 1u;
      *(_BYTE *)(a1 + 8) = v7;
      v5 = *(_DWORD *)(a2 + 32);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          goto LABEL_7;
        goto LABEL_13;
      }
    }
    else if ((*(_BYTE *)(a2 + 32) & 2) == 0)
    {
      goto LABEL_6;
    }
    v8 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a1 + 32) |= 2u;
    *(_DWORD *)(a1 + 12) = v8;
    v5 = *(_DWORD *)(a2 + 32);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0)
        goto LABEL_8;
      goto LABEL_14;
    }
LABEL_13:
    v9 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 32) |= 4u;
    *(_DWORD *)(a1 + 16) = v9;
    v5 = *(_DWORD *)(a2 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0)
        return;
      goto LABEL_9;
    }
LABEL_14:
    v10 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 32) |= 8u;
    *(_DWORD *)(a1 + 20) = v10;
    if ((*(_DWORD *)(a2 + 32) & 0x10) == 0)
      return;
LABEL_9:
    v6 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 32) |= 0x10u;
    *(_DWORD *)(a1 + 24) = v6;
  }
}

void sub_10005AF70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10005AF88(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1000F43D0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10005AF98(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1000F43D0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_10005AFC8()
{
  operator new();
}

uint64_t sub_10005B00C(uint64_t result)
{
  if (*(_BYTE *)(result + 32))
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)(result + 20) = 0;
    *(_QWORD *)(result + 12) = 0;
  }
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_10005B028(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  char *v9;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v11;
  unint64_t v12;
  char *v13;
  unsigned int v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  _BYTE *v20;
  _BYTE *v21;
  _BYTE *v22;
  unsigned __int8 *v23;
  uint64_t result;
  unsigned int v25;

  v5 = (unsigned int *)(a1 + 12);
  v6 = (unsigned int *)(a1 + 16);
  v7 = (unsigned int *)(a1 + 20);
  v8 = (unsigned int *)(a1 + 24);
  while (2)
  {
    v9 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v9;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v9 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v25 = 0;
        v13 = (char *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
        if ((unint64_t)v13 < v12 && (*v13 & 0x80000000) == 0)
        {
          v14 = *v13;
          v15 = v13 + 1;
          *((_QWORD *)this + 1) = v15;
LABEL_26:
          *(_BYTE *)(a1 + 8) = v14 != 0;
          *(_DWORD *)(a1 + 32) |= 1u;
          if ((unint64_t)v15 < v12 && *v15 == 16)
          {
            v16 = v15 + 1;
            *((_QWORD *)this + 1) = v16;
            goto LABEL_29;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v25);
        if ((_DWORD)result)
        {
          v14 = v25;
          v15 = (_BYTE *)*((_QWORD *)this + 1);
          v12 = *((_QWORD *)this + 2);
          goto LABEL_26;
        }
        break;
      case 2u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v16 = (char *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
LABEL_29:
        if ((unint64_t)v16 >= v12 || *v16 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
          if (!(_DWORD)result)
            return result;
          v20 = (_BYTE *)*((_QWORD *)this + 1);
          v12 = *((_QWORD *)this + 2);
        }
        else
        {
          *v5 = *v16;
          v20 = v16 + 1;
          *((_QWORD *)this + 1) = v20;
        }
        *(_DWORD *)(a1 + 32) |= 2u;
        if ((unint64_t)v20 >= v12 || *v20 != 24)
          continue;
        v17 = v20 + 1;
        *((_QWORD *)this + 1) = v17;
LABEL_37:
        if ((unint64_t)v17 >= v12 || *v17 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v6);
          if (!(_DWORD)result)
            return result;
          v21 = (_BYTE *)*((_QWORD *)this + 1);
          v12 = *((_QWORD *)this + 2);
        }
        else
        {
          *v6 = *v17;
          v21 = v17 + 1;
          *((_QWORD *)this + 1) = v21;
        }
        *(_DWORD *)(a1 + 32) |= 4u;
        if ((unint64_t)v21 >= v12 || *v21 != 32)
          continue;
        v18 = v21 + 1;
        *((_QWORD *)this + 1) = v18;
LABEL_45:
        if ((unint64_t)v18 >= v12 || *v18 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v7);
          if (!(_DWORD)result)
            return result;
          v22 = (_BYTE *)*((_QWORD *)this + 1);
          v12 = *((_QWORD *)this + 2);
        }
        else
        {
          *v7 = *v18;
          v22 = v18 + 1;
          *((_QWORD *)this + 1) = v22;
        }
        *(_DWORD *)(a1 + 32) |= 8u;
        if ((unint64_t)v22 >= v12 || *v22 != 40)
          continue;
        v19 = v22 + 1;
        *((_QWORD *)this + 1) = v19;
LABEL_53:
        if ((unint64_t)v19 >= v12 || *v19 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v8);
          if (!(_DWORD)result)
            return result;
          v23 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v12 = *((_QWORD *)this + 2);
        }
        else
        {
          *v8 = *v19;
          v23 = (unsigned __int8 *)(v19 + 1);
          *((_QWORD *)this + 1) = v23;
        }
        *(_DWORD *)(a1 + 32) |= 0x10u;
        if (v23 != (unsigned __int8 *)v12 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
          continue;
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      case 3u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v17 = (char *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
        goto LABEL_37;
      case 4u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v18 = (char *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
        goto LABEL_45;
      case 5u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v19 = (char *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
        goto LABEL_53;
      default:
        v11 = TagFallback & 7;
LABEL_20:
        if (v11 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

uint64_t sub_10005B35C(uint64_t result, unsigned int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int *v5;
  int v6;

  v5 = (int *)result;
  v6 = *(_DWORD *)(result + 32);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(result + 8), a2, a4);
    v6 = v5[8];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v5[3], a2, a4);
  v6 = v5[8];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[4], a2, a4);
  v6 = v5[8];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v5[6], a2, a4);
  }
LABEL_10:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v5[5], a2, a4);
  if ((v5[8] & 0x10) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v5[6], a2, a4);
  return result;
}

uint64_t proto::gnss::Emergency::GsmCellInfo::ByteSize(proto::gnss::Emergency::GsmCellInfo *this, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;

  v3 = *((_DWORD *)this + 8);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_24;
  }
  v4 = 2 * (v3 & 1u);
  if ((v3 & 2) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
    if (v5 >= 0x80)
    {
      v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *((_DWORD *)this + 8);
    }
    else
    {
      v6 = 2;
    }
    v4 = (v6 + v4);
    if ((v3 & 4) == 0)
    {
LABEL_4:
      if ((v3 & 8) == 0)
        goto LABEL_5;
      goto LABEL_16;
    }
  }
  else if ((v3 & 4) == 0)
  {
    goto LABEL_4;
  }
  v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
  if (v7 >= 0x80)
  {
    v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2) + 1;
    v3 = *((_DWORD *)this + 8);
  }
  else
  {
    v8 = 2;
  }
  v4 = (v8 + v4);
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_24;
    goto LABEL_20;
  }
LABEL_16:
  v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
  if (v9 >= 0x80)
  {
    v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2) + 1;
    v3 = *((_DWORD *)this + 8);
  }
  else
  {
    v10 = 2;
  }
  v4 = (v10 + v4);
  if ((v3 & 0x10) != 0)
  {
LABEL_20:
    v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
    if (v11 >= 0x80)
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
    else
      v12 = 2;
    v4 = (v12 + v4);
  }
LABEL_24:
  *((_DWORD *)this + 7) = v4;
  return v4;
}

void sub_10005B4F4(uint64_t a1, void *lpsrc)
{
  sub_10005AE60(a1, (uint64_t)lpsrc);
}

uint64_t sub_10005B55C()
{
  return 1;
}

_QWORD *sub_10005B564@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.GsmCellInfo");
}

void sub_10005B574(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  char v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  char v14;
  _BYTE v15[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v15, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 3479);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v14, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v15);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 44);
  if (!(_BYTE)v5)
    return;
  if ((*(_BYTE *)(a2 + 44) & 1) != 0)
  {
    v7 = *(_BYTE *)(a2 + 8);
    *(_DWORD *)(a1 + 44) |= 1u;
    *(_BYTE *)(a1 + 8) = v7;
    v5 = *(_DWORD *)(a2 + 44);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0)
        goto LABEL_7;
      goto LABEL_16;
    }
  }
  else if ((*(_BYTE *)(a2 + 44) & 2) == 0)
  {
    goto LABEL_6;
  }
  v8 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 44) |= 2u;
  *(_DWORD *)(a1 + 12) = v8;
  v5 = *(_DWORD *)(a2 + 44);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  v9 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 44) |= 4u;
  *(_DWORD *)(a1 + 16) = v9;
  v5 = *(_DWORD *)(a2 + 44);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  v10 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 44) |= 8u;
  *(_DWORD *)(a1 + 20) = v10;
  v5 = *(_DWORD *)(a2 + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
LABEL_19:
    v12 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a1 + 44) |= 0x20u;
    *(_DWORD *)(a1 + 28) = v12;
    v5 = *(_DWORD *)(a2 + 44);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0)
        return;
      goto LABEL_12;
    }
    goto LABEL_20;
  }
LABEL_18:
  v11 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 44) |= 0x10u;
  *(_DWORD *)(a1 + 24) = v11;
  v5 = *(_DWORD *)(a2 + 44);
  if ((v5 & 0x20) != 0)
    goto LABEL_19;
LABEL_10:
  if ((v5 & 0x40) == 0)
    goto LABEL_11;
LABEL_20:
  v13 = *(_DWORD *)(a2 + 32);
  if (v13 >= 4)
    __assert_rtn("set_freq_mode", "GnssEmergencyTypes.pb.h", 14153, "::proto::gnss::Emergency::FreqMode_IsValid(value)");
  *(_DWORD *)(a1 + 44) |= 0x40u;
  *(_DWORD *)(a1 + 32) = v13;
  if ((*(_DWORD *)(a2 + 44) & 0x80) != 0)
  {
LABEL_12:
    v6 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a1 + 44) |= 0x80u;
    *(_DWORD *)(a1 + 36) = v6;
  }
}

void sub_10005B70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10005B724(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1000F4448;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10005B734(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1000F4448;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_10005B764()
{
  operator new();
}

uint64_t sub_10005B7AC(uint64_t result)
{
  if (*(_BYTE *)(result + 44))
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)(result + 12) = 0;
    *(_QWORD *)(result + 28) = 0;
    *(_QWORD *)(result + 20) = 0;
    *(_DWORD *)(result + 36) = 0;
  }
  *(_DWORD *)(result + 44) = 0;
  return result;
}

uint64_t sub_10005B7D0(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  char *v11;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v13;
  unint64_t v14;
  char *v15;
  unsigned int v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  unint64_t v24;
  char *v25;
  _BYTE *v26;
  _BYTE *v27;
  _BYTE *v28;
  _BYTE *v29;
  _BYTE *v30;
  unsigned int v31;
  _BYTE *v32;
  unsigned __int8 *v33;
  uint64_t result;
  unsigned int v35;
  unsigned int v36;

  v5 = (unsigned int *)(a1 + 12);
  v6 = (unsigned int *)(a1 + 16);
  v7 = (unsigned int *)(a1 + 20);
  v8 = (unsigned int *)(a1 + 24);
  v9 = (unsigned int *)(a1 + 28);
  v10 = (unsigned int *)(a1 + 36);
  while (2)
  {
    v11 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v11 >= *((_QWORD *)this + 2) || *v11 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v11;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v11 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_26;
        v35 = 0;
        v15 = (char *)*((_QWORD *)this + 1);
        v14 = *((_QWORD *)this + 2);
        if ((unint64_t)v15 < v14 && (*v15 & 0x80000000) == 0)
        {
          v16 = *v15;
          v17 = v15 + 1;
          *((_QWORD *)this + 1) = v17;
LABEL_32:
          *(_BYTE *)(a1 + 8) = v16 != 0;
          *(_DWORD *)(a1 + 44) |= 1u;
          if ((unint64_t)v17 < v14 && *v17 == 16)
          {
            v18 = v17 + 1;
            *((_QWORD *)this + 1) = v18;
            goto LABEL_35;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v35);
        if ((_DWORD)result)
        {
          v16 = v35;
          v17 = (_BYTE *)*((_QWORD *)this + 1);
          v14 = *((_QWORD *)this + 2);
          goto LABEL_32;
        }
        break;
      case 2u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_26;
        v18 = (char *)*((_QWORD *)this + 1);
        v14 = *((_QWORD *)this + 2);
LABEL_35:
        if ((unint64_t)v18 >= v14 || *v18 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
          if (!(_DWORD)result)
            return result;
          v26 = (_BYTE *)*((_QWORD *)this + 1);
          v14 = *((_QWORD *)this + 2);
        }
        else
        {
          *v5 = *v18;
          v26 = v18 + 1;
          *((_QWORD *)this + 1) = v26;
        }
        *(_DWORD *)(a1 + 44) |= 2u;
        if ((unint64_t)v26 >= v14 || *v26 != 24)
          continue;
        v19 = v26 + 1;
        *((_QWORD *)this + 1) = v19;
LABEL_43:
        if ((unint64_t)v19 >= v14 || *v19 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v6);
          if (!(_DWORD)result)
            return result;
          v27 = (_BYTE *)*((_QWORD *)this + 1);
          v14 = *((_QWORD *)this + 2);
        }
        else
        {
          *v6 = *v19;
          v27 = v19 + 1;
          *((_QWORD *)this + 1) = v27;
        }
        *(_DWORD *)(a1 + 44) |= 4u;
        if ((unint64_t)v27 >= v14 || *v27 != 32)
          continue;
        v20 = v27 + 1;
        *((_QWORD *)this + 1) = v20;
LABEL_51:
        if ((unint64_t)v20 >= v14 || *v20 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v7);
          if (!(_DWORD)result)
            return result;
          v28 = (_BYTE *)*((_QWORD *)this + 1);
          v14 = *((_QWORD *)this + 2);
        }
        else
        {
          *v7 = *v20;
          v28 = v20 + 1;
          *((_QWORD *)this + 1) = v28;
        }
        *(_DWORD *)(a1 + 44) |= 8u;
        if ((unint64_t)v28 >= v14 || *v28 != 40)
          continue;
        v21 = v28 + 1;
        *((_QWORD *)this + 1) = v21;
LABEL_59:
        if ((unint64_t)v21 >= v14 || *v21 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v8);
          if (!(_DWORD)result)
            return result;
          v29 = (_BYTE *)*((_QWORD *)this + 1);
          v14 = *((_QWORD *)this + 2);
        }
        else
        {
          *v8 = *v21;
          v29 = v21 + 1;
          *((_QWORD *)this + 1) = v29;
        }
        *(_DWORD *)(a1 + 44) |= 0x10u;
        if ((unint64_t)v29 >= v14 || *v29 != 48)
          continue;
        v22 = v29 + 1;
        *((_QWORD *)this + 1) = v22;
LABEL_67:
        if ((unint64_t)v22 >= v14 || *v22 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v9);
          if (!(_DWORD)result)
            return result;
          v30 = (_BYTE *)*((_QWORD *)this + 1);
          v14 = *((_QWORD *)this + 2);
        }
        else
        {
          *v9 = *v22;
          v30 = v22 + 1;
          *((_QWORD *)this + 1) = v30;
        }
        *(_DWORD *)(a1 + 44) |= 0x20u;
        if ((unint64_t)v30 >= v14 || *v30 != 56)
          continue;
        v23 = v30 + 1;
        *((_QWORD *)this + 1) = v23;
LABEL_75:
        v36 = 0;
        if ((unint64_t)v23 >= v14 || *v23 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v36);
          if (!(_DWORD)result)
            return result;
          v31 = v36;
        }
        else
        {
          v31 = *v23;
          *((_QWORD *)this + 1) = v23 + 1;
        }
        if (v31 <= 3)
        {
          *(_DWORD *)(a1 + 44) |= 0x40u;
          *(_DWORD *)(a1 + 32) = v31;
        }
        v32 = (_BYTE *)*((_QWORD *)this + 1);
        v24 = *((_QWORD *)this + 2);
        if ((unint64_t)v32 >= v24 || *v32 != 64)
          continue;
        v25 = v32 + 1;
        *((_QWORD *)this + 1) = v25;
LABEL_85:
        if ((unint64_t)v25 >= v24 || *v25 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v10);
          if (!(_DWORD)result)
            return result;
          v33 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v24 = *((_QWORD *)this + 2);
        }
        else
        {
          *v10 = *v25;
          v33 = (unsigned __int8 *)(v25 + 1);
          *((_QWORD *)this + 1) = v33;
        }
        *(_DWORD *)(a1 + 44) |= 0x80u;
        if (v33 != (unsigned __int8 *)v24 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
          continue;
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      case 3u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_26;
        v19 = (char *)*((_QWORD *)this + 1);
        v14 = *((_QWORD *)this + 2);
        goto LABEL_43;
      case 4u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_26;
        v20 = (char *)*((_QWORD *)this + 1);
        v14 = *((_QWORD *)this + 2);
        goto LABEL_51;
      case 5u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_26;
        v21 = (char *)*((_QWORD *)this + 1);
        v14 = *((_QWORD *)this + 2);
        goto LABEL_59;
      case 6u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_26;
        v22 = (char *)*((_QWORD *)this + 1);
        v14 = *((_QWORD *)this + 2);
        goto LABEL_67;
      case 7u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_26;
        v23 = (char *)*((_QWORD *)this + 1);
        v14 = *((_QWORD *)this + 2);
        goto LABEL_75;
      case 8u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_26;
        v25 = (char *)*((_QWORD *)this + 1);
        v24 = *((_QWORD *)this + 2);
        goto LABEL_85;
      default:
        v13 = TagFallback & 7;
LABEL_26:
        if (v13 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

uint64_t sub_10005BC74(uint64_t result, unsigned int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int *v5;
  int v6;

  v5 = (int *)result;
  v6 = *(_DWORD *)(result + 44);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(result + 8), a2, a4);
    v6 = v5[11];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v5[3], a2, a4);
  v6 = v5[11];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[4], a2, a4);
  v6 = v5[11];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v5[5], a2, a4);
  v6 = v5[11];
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v5[6], a2, a4);
  v6 = v5[11];
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v5[7], a2, a4);
  v6 = v5[11];
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, v5[9], a2, a4);
  }
LABEL_16:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v5[8], a2, a4);
  if ((v5[11] & 0x80) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, v5[9], a2, a4);
  return result;
}

uint64_t proto::gnss::Emergency::WcdmaCellInfo::ByteSize(proto::gnss::Emergency::WcdmaCellInfo *this, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v13;
  int v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;
  int v16;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v17;
  int v18;

  v3 = *((_DWORD *)this + 11);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_41;
  }
  v4 = 2 * (v3 & 1u);
  if ((v3 & 2) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
    if (v5 >= 0x80)
    {
      v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *((_DWORD *)this + 11);
    }
    else
    {
      v6 = 2;
    }
    v4 = (v6 + v4);
    if ((v3 & 4) == 0)
    {
LABEL_4:
      if ((v3 & 8) == 0)
        goto LABEL_5;
      goto LABEL_19;
    }
  }
  else if ((v3 & 4) == 0)
  {
    goto LABEL_4;
  }
  v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
  if (v7 >= 0x80)
  {
    v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2) + 1;
    v3 = *((_DWORD *)this + 11);
  }
  else
  {
    v8 = 2;
  }
  v4 = (v8 + v4);
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_23;
  }
LABEL_19:
  v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
  if (v9 >= 0x80)
  {
    v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2) + 1;
    v3 = *((_DWORD *)this + 11);
  }
  else
  {
    v10 = 2;
  }
  v4 = (v10 + v4);
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_27;
  }
LABEL_23:
  v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
  if (v11 >= 0x80)
  {
    v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
    v3 = *((_DWORD *)this + 11);
  }
  else
  {
    v12 = 2;
  }
  v4 = (v12 + v4);
  if ((v3 & 0x20) == 0)
  {
LABEL_7:
    if ((v3 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_31;
  }
LABEL_27:
  v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 7);
  if (v13 >= 0x80)
  {
    v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2) + 1;
    v3 = *((_DWORD *)this + 11);
  }
  else
  {
    v14 = 2;
  }
  v4 = (v14 + v4);
  if ((v3 & 0x40) == 0)
  {
LABEL_8:
    if ((v3 & 0x80) == 0)
      goto LABEL_41;
    goto LABEL_37;
  }
LABEL_31:
  v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
  if ((v15 & 0x80000000) != 0)
  {
    v16 = 11;
  }
  else if (v15 >= 0x80)
  {
    v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2) + 1;
    v3 = *((_DWORD *)this + 11);
  }
  else
  {
    v16 = 2;
  }
  v4 = (v16 + v4);
  if ((v3 & 0x80) != 0)
  {
LABEL_37:
    v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 9);
    if (v17 >= 0x80)
      v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2) + 1;
    else
      v18 = 2;
    v4 = (v18 + v4);
  }
LABEL_41:
  *((_DWORD *)this + 10) = v4;
  return v4;
}

void sub_10005BEF0(uint64_t a1, void *lpsrc)
{
  sub_10005B574(a1, (uint64_t)lpsrc);
}

uint64_t sub_10005BF58()
{
  return 1;
}

_QWORD *sub_10005BF60@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.WcdmaCellInfo");
}

void proto::gnss::Emergency::LocationId::MergeFrom(proto::gnss::Emergency::LocationId *this, const proto::gnss::Emergency::LocationId *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  char v21;
  _BYTE v22[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v22, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 3770);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v22, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v21, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v22);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((proto::gnss::Emergency::LocationId *)((char *)this + 8), *((_DWORD *)a2 + 4) + *((_DWORD *)this + 4));
  if (*((int *)a2 + 4) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 8 * v5);
      v7 = *((_DWORD *)this + 5);
      v8 = *((int *)this + 4);
      if ((int)v8 >= v7)
      {
        if (v7 == *((_DWORD *)this + 6))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((proto::gnss::Emergency::LocationId *)((char *)this + 8), v7 + 1);
          v7 = *((_DWORD *)this + 5);
        }
        *((_DWORD *)this + 5) = v7 + 1;
        operator new();
      }
      v9 = *((_QWORD *)this + 1);
      *((_DWORD *)this + 4) = v8 + 1;
      sub_10005A2C0(*(_QWORD *)(v9 + 8 * v8), v6);
      ++v5;
    }
    while (v5 < *((int *)a2 + 4));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((proto::gnss::Emergency::LocationId *)((char *)this + 32), *((_DWORD *)a2 + 10) + *((_DWORD *)this + 10));
  if (*((int *)a2 + 10) >= 1)
  {
    v10 = 0;
    do
    {
      v11 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 8 * v10);
      v12 = *((_DWORD *)this + 11);
      v13 = *((int *)this + 10);
      if ((int)v13 >= v12)
      {
        if (v12 == *((_DWORD *)this + 12))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((proto::gnss::Emergency::LocationId *)((char *)this + 32), v12 + 1);
          v12 = *((_DWORD *)this + 11);
        }
        *((_DWORD *)this + 11) = v12 + 1;
        operator new();
      }
      v14 = *((_QWORD *)this + 4);
      *((_DWORD *)this + 10) = v13 + 1;
      sub_10005AE60(*(_QWORD *)(v14 + 8 * v13), v11);
      ++v10;
    }
    while (v10 < *((int *)a2 + 10));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((proto::gnss::Emergency::LocationId *)((char *)this + 56), *((_DWORD *)a2 + 16) + *((_DWORD *)this + 16));
  if (*((int *)a2 + 16) >= 1)
  {
    v15 = 0;
    do
    {
      v16 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 8 * v15);
      v17 = *((_DWORD *)this + 17);
      v18 = *((int *)this + 16);
      if ((int)v18 >= v17)
      {
        if (v17 == *((_DWORD *)this + 18))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((proto::gnss::Emergency::LocationId *)((char *)this + 56), v17 + 1);
          v17 = *((_DWORD *)this + 17);
        }
        *((_DWORD *)this + 17) = v17 + 1;
        operator new();
      }
      v19 = *((_QWORD *)this + 7);
      *((_DWORD *)this + 16) = v18 + 1;
      sub_10005B574(*(_QWORD *)(v19 + 8 * v18), v16);
      ++v15;
    }
    while (v15 < *((int *)a2 + 16));
  }
  if ((*((_BYTE *)a2 + 88) & 1) != 0)
  {
    v20 = *((_DWORD *)a2 + 20);
    if (v20 >= 7)
      __assert_rtn("set_cell_type", "GnssEmergencyTypes.pb.h", 14202, "::proto::gnss::Emergency::CellType_IsValid(value)");
    *((_DWORD *)this + 22) |= 1u;
    *((_DWORD *)this + 20) = v20;
  }
}

void sub_10005C2C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void proto::gnss::Emergency::LocationId::~LocationId(proto::gnss::Emergency::LocationId *this)
{
  int v2;
  uint64_t i;
  uint64_t v4;
  int v5;
  uint64_t j;
  uint64_t v7;
  int v8;
  uint64_t k;
  uint64_t v10;

  *(_QWORD *)this = off_1000F44C0;
  v2 = *((_DWORD *)this + 17);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 7) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v2 = *((_DWORD *)this + 17);
      }
    }
  }
  if (*((_QWORD *)this + 7))
    operator delete[]();
  v5 = *((_DWORD *)this + 11);
  if (v5 >= 1)
  {
    for (j = 0; j < v5; ++j)
    {
      v7 = *(_QWORD *)(*((_QWORD *)this + 4) + 8 * j);
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        v5 = *((_DWORD *)this + 11);
      }
    }
  }
  if (*((_QWORD *)this + 4))
    operator delete[]();
  v8 = *((_DWORD *)this + 5);
  if (v8 >= 1)
  {
    for (k = 0; k < v8; ++k)
    {
      v10 = *(_QWORD *)(*((_QWORD *)this + 1) + 8 * k);
      if (v10)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        v8 = *((_DWORD *)this + 5);
      }
    }
  }
  if (*((_QWORD *)this + 1))
    operator delete[]();
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  proto::gnss::Emergency::LocationId::~LocationId(this);
  operator delete();
}

void proto::gnss::Emergency::LocationId::New(proto::gnss::Emergency::LocationId *this)
{
  operator new();
}

uint64_t proto::gnss::Emergency::LocationId::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = this;
  if (*(_BYTE *)(this + 88))
    *(_DWORD *)(this + 80) = 0;
  if (*(int *)(this + 16) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8 * v2);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 16));
  }
  *(_DWORD *)(v1 + 16) = 0;
  if (*(int *)(v1 + 40) >= 1)
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v1 + 32) + 8 * v4);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      ++v4;
    }
    while (v4 < *(int *)(v1 + 40));
  }
  *(_DWORD *)(v1 + 40) = 0;
  if (*(int *)(v1 + 64) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v6);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
      ++v6;
    }
    while (v6 < *(int *)(v1 + 64));
  }
  *(_DWORD *)(v1 + 64) = 0;
  *(_DWORD *)(v1 + 88) = 0;
  return this;
}

uint64_t proto::gnss::Emergency::LocationId::MergePartialFromCodedStream(proto::gnss::Emergency::LocationId *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v5;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v6;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v7;
  char *v8;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v10;
  char *v11;
  unsigned int v12;
  uint64_t result;
  _BYTE *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  int v49;
  int v50;
  _BYTE *v51;
  unsigned int v52;

  v5 = (proto::gnss::Emergency::LocationId *)((char *)this + 8);
  v6 = (proto::gnss::Emergency::LocationId *)((char *)this + 32);
  v7 = (proto::gnss::Emergency::LocationId *)((char *)this + 56);
  while (1)
  {
LABEL_2:
    v8 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v8 < *((_QWORD *)a2 + 2) && (*v8 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v8;
      *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      *((_QWORD *)a2 + 1) = v8 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
      goto LABEL_7;
    }
    TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
    *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
    if (!(_DWORD)TagFallback)
      return 1;
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v52 = 0;
        v11 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v11 >= *((_QWORD *)a2 + 2) || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v52);
          if (!(_DWORD)result)
            return result;
          v12 = v52;
        }
        else
        {
          v12 = *v11;
          *((_QWORD *)a2 + 1) = v11 + 1;
        }
        if (v12 <= 6)
        {
          *((_DWORD *)this + 22) |= 1u;
          *((_DWORD *)this + 20) = v12;
        }
        v14 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v14 >= *((_QWORD *)a2 + 2) || *v14 != 18)
          continue;
        goto LABEL_27;
      case 2u:
        v10 = TagFallback & 7;
        if (v10 != 2)
          goto LABEL_18;
        while (2)
        {
          v15 = *((_DWORD *)this + 5);
          v16 = *((int *)this + 4);
          if ((int)v16 >= v15)
          {
            if (v15 == *((_DWORD *)this + 6))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v15 + 1);
              v15 = *((_DWORD *)this + 5);
            }
            *((_DWORD *)this + 5) = v15 + 1;
            operator new();
          }
          v17 = *((_QWORD *)this + 1);
          *((_DWORD *)this + 4) = v16 + 1;
          v18 = *(_QWORD *)(v17 + 8 * v16);
          v52 = 0;
          v19 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v19 >= *((_QWORD *)a2 + 2) || *v19 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v52))return 0;
          }
          else
          {
            v52 = *v19;
            *((_QWORD *)a2 + 1) = v19 + 1;
          }
          v20 = *((_DWORD *)a2 + 14);
          v21 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v20 + 1;
          if (v20 >= v21)
            return 0;
          v22 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v52);
          if (!sub_10005A548(v18, a2, v23) || !*((_BYTE *)a2 + 36))
            return 0;
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v22);
          v24 = *((_DWORD *)a2 + 14);
          v25 = __OFSUB__(v24, 1);
          v26 = v24 - 1;
          if (v26 < 0 == v25)
            *((_DWORD *)a2 + 14) = v26;
          v14 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v14 < *((_QWORD *)a2 + 2))
          {
            v27 = *v14;
            if (v27 == 18)
            {
LABEL_27:
              *((_QWORD *)a2 + 1) = v14 + 1;
              continue;
            }
            if (v27 == 26)
            {
              do
              {
                *((_QWORD *)a2 + 1) = v14 + 1;
LABEL_46:
                v28 = *((_DWORD *)this + 11);
                v29 = *((int *)this + 10);
                if ((int)v29 >= v28)
                {
                  if (v28 == *((_DWORD *)this + 12))
                  {
                    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v28 + 1);
                    v28 = *((_DWORD *)this + 11);
                  }
                  *((_DWORD *)this + 11) = v28 + 1;
                  operator new();
                }
                v30 = *((_QWORD *)this + 4);
                *((_DWORD *)this + 10) = v29 + 1;
                v31 = *(_QWORD *)(v30 + 8 * v29);
                v52 = 0;
                v32 = (char *)*((_QWORD *)a2 + 1);
                if ((unint64_t)v32 >= *((_QWORD *)a2 + 2) || *v32 < 0)
                {
                  if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v52))return 0;
                }
                else
                {
                  v52 = *v32;
                  *((_QWORD *)a2 + 1) = v32 + 1;
                }
                v33 = *((_DWORD *)a2 + 14);
                v34 = *((_DWORD *)a2 + 15);
                *((_DWORD *)a2 + 14) = v33 + 1;
                if (v33 >= v34)
                  return 0;
                v35 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v52);
                if (!sub_10005B028(v31, a2, v36) || !*((_BYTE *)a2 + 36))
                  return 0;
                wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v35);
                v37 = *((_DWORD *)a2 + 14);
                v25 = __OFSUB__(v37, 1);
                v38 = v37 - 1;
                if (v38 < 0 == v25)
                  *((_DWORD *)a2 + 14) = v38;
                v14 = (_BYTE *)*((_QWORD *)a2 + 1);
                if ((unint64_t)v14 >= *((_QWORD *)a2 + 2))
                  goto LABEL_2;
                v39 = *v14;
              }
              while (v39 == 26);
              if (v39 == 34)
              {
                do
                {
                  *((_QWORD *)a2 + 1) = v14 + 1;
LABEL_64:
                  v40 = *((_DWORD *)this + 17);
                  v41 = *((int *)this + 16);
                  if ((int)v41 >= v40)
                  {
                    if (v40 == *((_DWORD *)this + 18))
                    {
                      wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v7, v40 + 1);
                      v40 = *((_DWORD *)this + 17);
                    }
                    *((_DWORD *)this + 17) = v40 + 1;
                    operator new();
                  }
                  v42 = *((_QWORD *)this + 7);
                  *((_DWORD *)this + 16) = v41 + 1;
                  v43 = *(_QWORD *)(v42 + 8 * v41);
                  v52 = 0;
                  v44 = (char *)*((_QWORD *)a2 + 1);
                  if ((unint64_t)v44 >= *((_QWORD *)a2 + 2) || *v44 < 0)
                  {
                    if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v52))return 0;
                  }
                  else
                  {
                    v52 = *v44;
                    *((_QWORD *)a2 + 1) = v44 + 1;
                  }
                  v45 = *((_DWORD *)a2 + 14);
                  v46 = *((_DWORD *)a2 + 15);
                  *((_DWORD *)a2 + 14) = v45 + 1;
                  if (v45 >= v46)
                    return 0;
                  v47 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v52);
                  if (!sub_10005B7D0(v43, a2, v48) || !*((_BYTE *)a2 + 36))
                    return 0;
                  wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v47);
                  v49 = *((_DWORD *)a2 + 14);
                  v25 = __OFSUB__(v49, 1);
                  v50 = v49 - 1;
                  if (v50 < 0 == v25)
                    *((_DWORD *)a2 + 14) = v50;
                  v14 = (_BYTE *)*((_QWORD *)a2 + 1);
                  v51 = (_BYTE *)*((_QWORD *)a2 + 2);
                }
                while (v14 < v51 && *v14 == 34);
                if (v14 == v51 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
                {
                  *((_DWORD *)a2 + 8) = 0;
                  result = 1;
                  *((_BYTE *)a2 + 36) = 1;
                  return result;
                }
              }
            }
          }
          break;
        }
        break;
      case 3u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_46;
        goto LABEL_18;
      case 4u:
        v10 = TagFallback & 7;
        if (v10 != 2)
          goto LABEL_18;
        goto LABEL_64;
      default:
        v10 = TagFallback & 7;
LABEL_18:
        if (v10 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t proto::gnss::Emergency::LocationId::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = this;
  if ((*(_BYTE *)(this + 88) & 1) != 0)
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(this + 80), (int)a2, a4);
  if (*(int *)(v5 + 16) >= 1)
  {
    v6 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 16));
  }
  if (*(int *)(v5 + 40) >= 1)
  {
    v7 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8 * v7++), a2, a4);
    while (v7 < *(int *)(v5 + 40));
  }
  if (*(int *)(v5 + 64) >= 1)
  {
    v8 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v8++), a2, a4);
    while (v8 < *(int *)(v5 + 64));
  }
  return this;
}

uint64_t proto::gnss::Emergency::LocationId::ByteSize(proto::gnss::Emergency::LocationId *this, unsigned int a2)
{
  int v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  int v5;
  int v6;
  uint64_t v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v20;
  int v21;
  int v22;

  if ((*((_BYTE *)this + 88) & 1) != 0)
  {
    v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 20);
    if ((v4 & 0x80000000) != 0)
    {
      v3 = 11;
    }
    else if (v4 >= 0x80)
    {
      v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4, a2) + 1;
    }
    else
    {
      v3 = 2;
    }
  }
  else
  {
    v3 = 0;
  }
  v5 = *((_DWORD *)this + 4);
  v6 = v5 + v3;
  if (v5 >= 1)
  {
    v7 = 0;
    do
    {
      v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::LteCellInfo::ByteSize(*(proto::gnss::Emergency::LteCellInfo **)(*((_QWORD *)this + 1) + 8 * v7), a2);
      v9 = (int)v8;
      if (v8 >= 0x80)
        v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2);
      else
        v10 = 1;
      v6 += v9 + v10;
      ++v7;
    }
    while (v7 < *((int *)this + 4));
  }
  v11 = *((_DWORD *)this + 10);
  v12 = v11 + v6;
  if (v11 >= 1)
  {
    v13 = 0;
    do
    {
      v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::GsmCellInfo::ByteSize(*(proto::gnss::Emergency::GsmCellInfo **)(*((_QWORD *)this + 4) + 8 * v13), a2);
      v15 = (int)v14;
      if (v14 >= 0x80)
        v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2);
      else
        v16 = 1;
      v12 += v15 + v16;
      ++v13;
    }
    while (v13 < *((int *)this + 10));
  }
  v17 = *((_DWORD *)this + 16);
  v18 = (v17 + v12);
  if (v17 >= 1)
  {
    v19 = 0;
    do
    {
      v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::WcdmaCellInfo::ByteSize(*(proto::gnss::Emergency::WcdmaCellInfo **)(*((_QWORD *)this + 7) + 8 * v19), a2);
      v21 = (int)v20;
      if (v20 >= 0x80)
        v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20, a2);
      else
        v22 = 1;
      v18 = (v21 + v18 + v22);
      ++v19;
    }
    while (v19 < *((int *)this + 16));
  }
  *((_DWORD *)this + 21) = v18;
  return v18;
}

void proto::gnss::Emergency::LocationId::CheckTypeAndMergeFrom(proto::gnss::Emergency::LocationId *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  proto::gnss::Emergency::LocationId::MergeFrom(this, lpsrc);
}

uint64_t proto::gnss::Emergency::LocationId::IsInitialized(proto::gnss::Emergency::LocationId *this)
{
  return 1;
}

_QWORD *proto::gnss::Emergency::LocationId::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.LocationId");
}

void proto::gnss::Emergency::WlanMeasurementRequest::MergeFrom(proto::gnss::Emergency::WlanMeasurementRequest *this, const proto::gnss::Emergency::WlanMeasurementRequest *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  char v7;
  char v8;
  _BYTE v9[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 3972);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v5) = *((_BYTE *)a2 + 20);
  if ((_BYTE)v5)
  {
    if ((*((_BYTE *)a2 + 20) & 1) != 0)
    {
      v6 = *((_DWORD *)a2 + 2);
      *((_DWORD *)this + 5) |= 1u;
      *((_DWORD *)this + 2) = v6;
      v5 = *((_DWORD *)a2 + 5);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *((_BYTE *)a2 + 12);
      *((_DWORD *)this + 5) |= 2u;
      *((_BYTE *)this + 12) = v7;
    }
  }
}

void sub_10005CE5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void proto::gnss::Emergency::WlanMeasurementRequest::~WlanMeasurementRequest(proto::gnss::Emergency::WlanMeasurementRequest *this)
{
  *(_QWORD *)this = off_1000F4538;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = off_1000F4538;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

void proto::gnss::Emergency::WlanMeasurementRequest::New(proto::gnss::Emergency::WlanMeasurementRequest *this)
{
  operator new();
}

uint64_t proto::gnss::Emergency::WlanMeasurementRequest::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 20))
  {
    *(_DWORD *)(this + 8) = 0;
    *(_BYTE *)(this + 12) = 0;
  }
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t proto::gnss::Emergency::WlanMeasurementRequest::MergePartialFromCodedStream(proto::gnss::Emergency::WlanMeasurementRequest *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  unint64_t v9;
  char *v10;
  char *v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned __int8 *v14;
  uint64_t result;
  unsigned int v16;

  v5 = (unsigned int *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      v6 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v6 >= *((_QWORD *)a2 + 2) || *v6 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
        *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
        *((_QWORD *)a2 + 1) = v6 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v8 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_16;
      v11 = (char *)*((_QWORD *)a2 + 1);
      v9 = *((_QWORD *)a2 + 2);
      if ((unint64_t)v11 >= v9 || *v11 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
        if (!(_DWORD)result)
          return result;
        v12 = (_BYTE *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
      }
      else
      {
        *v5 = *v11;
        v12 = v11 + 1;
        *((_QWORD *)a2 + 1) = v12;
      }
      *((_DWORD *)this + 5) |= 1u;
      if ((unint64_t)v12 < v9 && *v12 == 16)
      {
        v10 = v12 + 1;
        *((_QWORD *)a2 + 1) = v10;
LABEL_24:
        v16 = 0;
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v16);
          if (!(_DWORD)result)
            return result;
          v13 = v16;
          v14 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v9 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v13 = *v10;
          v14 = (unsigned __int8 *)(v10 + 1);
          *((_QWORD *)a2 + 1) = v14;
        }
        *((_BYTE *)this + 12) = v13 != 0;
        *((_DWORD *)this + 5) |= 2u;
        if (v14 == (unsigned __int8 *)v9 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      v8 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v10 = (char *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
        goto LABEL_24;
      }
    }
    else
    {
      v8 = TagFallback & 7;
    }
LABEL_16:
    if (v8 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t proto::gnss::Emergency::WlanMeasurementRequest::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  char v4;
  uint64_t v5;
  int v6;

  v4 = (char)a2;
  v5 = this;
  v6 = *(_DWORD *)(this + 20);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(this + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 20);
  }
  if ((v6 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 12), v4, a4);
  return this;
}

uint64_t proto::gnss::Emergency::WlanMeasurementRequest::ByteSize(proto::gnss::Emergency::WlanMeasurementRequest *this, unsigned int a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;

  LOBYTE(v3) = *((_BYTE *)this + 20);
  if ((_BYTE)v3)
  {
    if ((*((_BYTE *)this + 20) & 1) != 0)
    {
      v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
      if (v6 >= 0x80)
      {
        v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
        v3 = *((_DWORD *)this + 5);
      }
      else
      {
        v4 = 2;
      }
    }
    else
    {
      v4 = 0;
    }
    if ((v3 & 2) != 0)
      result = v4 + 2;
    else
      result = v4;
  }
  else
  {
    result = 0;
  }
  *((_DWORD *)this + 4) = result;
  return result;
}

void proto::gnss::Emergency::WlanMeasurementRequest::CheckTypeAndMergeFrom(proto::gnss::Emergency::WlanMeasurementRequest *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  proto::gnss::Emergency::WlanMeasurementRequest::MergeFrom(this, lpsrc);
}

uint64_t proto::gnss::Emergency::WlanMeasurementRequest::IsInitialized(proto::gnss::Emergency::WlanMeasurementRequest *this)
{
  return 1;
}

_QWORD *proto::gnss::Emergency::WlanMeasurementRequest::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.WlanMeasurementRequest");
}

void sub_10005D1FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  const std::string *v7;
  std::string *v8;
  char v9;
  char v10;
  int v11;
  char v12;
  _BYTE v13[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v13, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 4269);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v12, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 32);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) != 0)
    {
      v7 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 32) |= 1u;
      v8 = *(std::string **)(a1 + 8);
      if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      std::string::operator=(v8, v7);
      v5 = *(_DWORD *)(a2 + 32);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          goto LABEL_7;
        goto LABEL_15;
      }
    }
    else if ((*(_BYTE *)(a2 + 32) & 2) == 0)
    {
      goto LABEL_6;
    }
    v9 = *(_BYTE *)(a2 + 16);
    *(_DWORD *)(a1 + 32) |= 2u;
    *(_BYTE *)(a1 + 16) = v9;
    v5 = *(_DWORD *)(a2 + 32);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0)
        goto LABEL_8;
      goto LABEL_16;
    }
LABEL_15:
    v10 = *(_BYTE *)(a2 + 17);
    *(_DWORD *)(a1 + 32) |= 4u;
    *(_BYTE *)(a1 + 17) = v10;
    v5 = *(_DWORD *)(a2 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0)
        return;
      goto LABEL_9;
    }
LABEL_16:
    v11 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 32) |= 8u;
    *(_DWORD *)(a1 + 20) = v11;
    if ((*(_DWORD *)(a2 + 32) & 0x10) == 0)
      return;
LABEL_9:
    v6 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 32) |= 0x10u;
    *(_DWORD *)(a1 + 24) = v6;
  }
}

void sub_10005D350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10005D368(uint64_t *a1)
{
  *a1 = (uint64_t)off_1000F45B0;
  sub_100059B48(a1[1]);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

void sub_10005D39C(uint64_t *a1)
{
  *a1 = (uint64_t)off_1000F45B0;
  sub_100059B48(a1[1]);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
  operator delete();
}

void sub_10005D3E4()
{
  operator new();
}

uint64_t sub_10005D430(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 32))
  {
    if ((*(_BYTE *)(result + 32) & 1) != 0)
    {
      v1 = *(_QWORD *)(result + 8);
      if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v1 + 23) < 0)
        {
          **(_BYTE **)v1 = 0;
          *(_QWORD *)(v1 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v1 = 0;
          *(_BYTE *)(v1 + 23) = 0;
        }
      }
    }
    *(_WORD *)(result + 16) = 0;
    *(_DWORD *)(result + 20) = 0;
    *(_DWORD *)(result + 24) = 0;
  }
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_10005D480(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  void *v9;
  uint64_t result;
  unint64_t v11;
  _BYTE *v12;
  char *v13;
  unsigned int v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  unsigned int v19;
  _BYTE *v20;
  _BYTE *v21;
  unsigned int v22;
  unsigned __int8 *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;

  v5 = (unsigned int *)(a1 + 20);
  while (2)
  {
    v6 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v6 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_26;
        *(_DWORD *)(a1 + 32) |= 1u;
        v9 = *(void **)(a1 + 8);
        if (v9 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v9);
        if ((_DWORD)result)
        {
          v12 = (_BYTE *)*((_QWORD *)this + 1);
          v11 = *((_QWORD *)this + 2);
          if ((unint64_t)v12 < v11 && *v12 == 16)
          {
            v13 = v12 + 1;
            *((_QWORD *)this + 1) = v13;
            goto LABEL_18;
          }
          continue;
        }
        return result;
      case 2u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_26;
        v13 = (char *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
LABEL_18:
        v25 = 0;
        if ((unint64_t)v13 < v11 && (*v13 & 0x80000000) == 0)
        {
          v14 = *v13;
          v15 = v13 + 1;
          *((_QWORD *)this + 1) = v15;
LABEL_32:
          *(_BYTE *)(a1 + 16) = v14 != 0;
          *(_DWORD *)(a1 + 32) |= 2u;
          if ((unint64_t)v15 < v11 && *v15 == 24)
          {
            v16 = v15 + 1;
            *((_QWORD *)this + 1) = v16;
            goto LABEL_35;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v25);
        if ((_DWORD)result)
        {
          v14 = v25;
          v15 = (_BYTE *)*((_QWORD *)this + 1);
          v11 = *((_QWORD *)this + 2);
          goto LABEL_32;
        }
        break;
      case 3u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_26;
        v16 = (char *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
LABEL_35:
        v24 = 0;
        if ((unint64_t)v16 >= v11 || *v16 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v24);
          if (!(_DWORD)result)
            return result;
          v19 = v24;
          v20 = (_BYTE *)*((_QWORD *)this + 1);
          v11 = *((_QWORD *)this + 2);
        }
        else
        {
          v19 = *v16;
          v20 = v16 + 1;
          *((_QWORD *)this + 1) = v20;
        }
        *(_BYTE *)(a1 + 17) = v19 != 0;
        *(_DWORD *)(a1 + 32) |= 4u;
        if ((unint64_t)v20 >= v11 || *v20 != 32)
          continue;
        v17 = v20 + 1;
        *((_QWORD *)this + 1) = v17;
LABEL_43:
        if ((unint64_t)v17 >= v11 || *v17 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
          if (!(_DWORD)result)
            return result;
          v21 = (_BYTE *)*((_QWORD *)this + 1);
          v11 = *((_QWORD *)this + 2);
        }
        else
        {
          *v5 = *v17;
          v21 = v17 + 1;
          *((_QWORD *)this + 1) = v21;
        }
        *(_DWORD *)(a1 + 32) |= 8u;
        if ((unint64_t)v21 >= v11 || *v21 != 40)
          continue;
        v18 = v21 + 1;
        *((_QWORD *)this + 1) = v18;
LABEL_51:
        v26 = 0;
        if ((unint64_t)v18 >= v11 || *v18 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
          if (!(_DWORD)result)
            return result;
          v22 = v26;
          v23 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v11 = *((_QWORD *)this + 2);
        }
        else
        {
          v22 = *v18;
          v23 = (unsigned __int8 *)(v18 + 1);
          *((_QWORD *)this + 1) = v23;
        }
        *(_DWORD *)(a1 + 24) = v22;
        *(_DWORD *)(a1 + 32) |= 0x10u;
        if (v23 != (unsigned __int8 *)v11 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
          continue;
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      case 4u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_26;
        v17 = (char *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        goto LABEL_43;
      case 5u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_26;
        v18 = (char *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        goto LABEL_51;
      default:
        v8 = TagFallback & 7;
LABEL_26:
        if (v8 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

uint64_t sub_10005D7CC(uint64_t result, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v4;
  uint64_t v5;
  int v6;

  v4 = a2;
  v5 = result;
  v6 = *(_DWORD *)(result + 32);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(1, *(_QWORD *)(result + 8), a2);
    v6 = *(_DWORD *)(v5 + 32);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 16), v4, a4);
  v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 17), v4, a4);
  v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      return result;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(_DWORD *)(v5 + 24), v4, a4);
  }
LABEL_10:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_DWORD *)(v5 + 20), v4, a4);
  if ((*(_DWORD *)(v5 + 32) & 0x10) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(_DWORD *)(v5 + 24), v4, a4);
  return result;
}

uint64_t proto::gnss::Emergency::WlanMeasurementElement::ByteSize(proto::gnss::Emergency::WlanMeasurementElement *this, unsigned int a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v13;
  int v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;
  int v16;

  LOBYTE(v3) = *((_BYTE *)this + 32);
  if ((_BYTE)v3)
  {
    if ((*((_BYTE *)this + 32) & 1) != 0)
    {
      v6 = *((_QWORD *)this + 1);
      v7 = *(unsigned __int8 *)(v6 + 23);
      v8 = v7;
      v9 = *(_QWORD *)(v6 + 8);
      if ((v7 & 0x80u) == 0)
        v10 = *(unsigned __int8 *)(v6 + 23);
      else
        v10 = v9;
      if (v10 >= 0x80)
      {
        v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10, a2);
        v7 = *(unsigned __int8 *)(v6 + 23);
        v9 = *(_QWORD *)(v6 + 8);
        v11 = v12 + 1;
        v3 = *((_DWORD *)this + 8);
        v8 = *(_BYTE *)(v6 + 23);
      }
      else
      {
        v11 = 2;
      }
      if (v8 < 0)
        v7 = v9;
      v4 = v11 + v7;
    }
    else
    {
      v4 = 0;
    }
    if ((v3 & 2) != 0)
      v4 += 2;
    if ((v3 & 4) != 0)
      v5 = v4 + 2;
    else
      v5 = v4;
    if ((v3 & 8) != 0)
    {
      v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
      if (v13 >= 0x80)
      {
        v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2) + 1;
        v3 = *((_DWORD *)this + 8);
      }
      else
      {
        v14 = 2;
      }
      v5 = (v14 + v5);
    }
    if ((v3 & 0x10) != 0)
    {
      v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
      if ((v15 & 0x80000000) != 0)
      {
        v16 = 11;
      }
      else if (v15 >= 0x80)
      {
        v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2) + 1;
      }
      else
      {
        v16 = 2;
      }
      v5 = (v16 + v5);
    }
  }
  else
  {
    v5 = 0;
  }
  *((_DWORD *)this + 7) = v5;
  return v5;
}

void sub_10005D97C(uint64_t a1, void *lpsrc)
{
  sub_10005D1FC(a1, (uint64_t)lpsrc);
}

uint64_t sub_10005D9E4()
{
  return 1;
}

_QWORD *sub_10005D9EC@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.WlanMeasurementElement");
}

void proto::gnss::Emergency::WlanMeasurementList::MergeFrom(proto::gnss::Emergency::WlanMeasurementList *this, const proto::gnss::Emergency::WlanMeasurementList *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  char v11;
  _BYTE v12[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v12, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 4486);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((proto::gnss::Emergency::WlanMeasurementList *)((char *)this + 8), *((_DWORD *)a2 + 4) + *((_DWORD *)this + 4));
  if (*((int *)a2 + 4) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 8 * v5);
      v7 = *((_DWORD *)this + 5);
      v8 = *((int *)this + 4);
      if ((int)v8 >= v7)
      {
        if (v7 == *((_DWORD *)this + 6))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((proto::gnss::Emergency::WlanMeasurementList *)((char *)this + 8), v7 + 1);
          v7 = *((_DWORD *)this + 5);
        }
        *((_DWORD *)this + 5) = v7 + 1;
        operator new();
      }
      v9 = *((_QWORD *)this + 1);
      *((_DWORD *)this + 4) = v8 + 1;
      sub_10005D1FC(*(_QWORD *)(v9 + 8 * v8), v6);
      ++v5;
    }
    while (v5 < *((int *)a2 + 4));
  }
  if ((*((_BYTE *)a2 + 40) & 1) != 0)
  {
    v10 = *((_DWORD *)a2 + 8);
    if (v10 >= 6)
      __assert_rtn("set_result", "GnssEmergencyTypes.pb.h", 14514, "::proto::gnss::Emergency::WlanMeasurementResult_IsValid(value)");
    *((_DWORD *)this + 10) |= 1u;
    *((_DWORD *)this + 8) = v10;
  }
}

void sub_10005DBA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void proto::gnss::Emergency::WlanMeasurementList::~WlanMeasurementList(proto::gnss::Emergency::WlanMeasurementList *this)
{
  int v2;
  uint64_t i;
  uint64_t v4;

  *(_QWORD *)this = off_1000F4628;
  v2 = *((_DWORD *)this + 5);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 1) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v2 = *((_DWORD *)this + 5);
      }
    }
  }
  if (*((_QWORD *)this + 1))
    operator delete[]();
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  proto::gnss::Emergency::WlanMeasurementList::~WlanMeasurementList(this);
  operator delete();
}

void proto::gnss::Emergency::WlanMeasurementList::New(proto::gnss::Emergency::WlanMeasurementList *this)
{
  operator new();
}

uint64_t proto::gnss::Emergency::WlanMeasurementList::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = this;
  if (*(_BYTE *)(this + 40))
    *(_DWORD *)(this + 32) = 0;
  if (*(int *)(this + 16) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8 * v2);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 16));
  }
  *(_DWORD *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 40) = 0;
  return this;
}

uint64_t proto::gnss::Emergency::WlanMeasurementList::MergePartialFromCodedStream(proto::gnss::Emergency::WlanMeasurementList *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  char *v9;
  unsigned int v10;
  uint64_t result;
  _BYTE *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  BOOL v23;
  int v24;
  _BYTE *v25;
  unsigned int v26;
  unsigned int v27;

  v5 = (proto::gnss::Emergency::WlanMeasurementList *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v6 >= *((_QWORD *)a2 + 2) || *v6 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
          *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
          *((_QWORD *)a2 + 1) = v6 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        if (TagFallback >> 3 != 1)
          break;
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_16;
        v26 = 0;
        v9 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v9 >= *((_QWORD *)a2 + 2) || *v9 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v26);
          if (!(_DWORD)result)
            return result;
          v10 = v26;
        }
        else
        {
          v10 = *v9;
          *((_QWORD *)a2 + 1) = v9 + 1;
        }
        if (v10 <= 5)
        {
          *((_DWORD *)this + 10) |= 1u;
          *((_DWORD *)this + 8) = v10;
        }
        v12 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v12 < *((_QWORD *)a2 + 2) && *v12 == 18)
          goto LABEL_25;
      }
      if (TagFallback >> 3 != 2)
        break;
      v8 = TagFallback & 7;
      if (v8 != 2)
        goto LABEL_16;
      while (1)
      {
        v13 = *((_DWORD *)this + 5);
        v14 = *((int *)this + 4);
        if ((int)v14 >= v13)
        {
          if (v13 == *((_DWORD *)this + 6))
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v13 + 1);
            v13 = *((_DWORD *)this + 5);
          }
          *((_DWORD *)this + 5) = v13 + 1;
          operator new();
        }
        v15 = *((_QWORD *)this + 1);
        *((_DWORD *)this + 4) = v14 + 1;
        v16 = *(_QWORD *)(v15 + 8 * v14);
        v27 = 0;
        v17 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v17 >= *((_QWORD *)a2 + 2) || *v17 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v27))return 0;
        }
        else
        {
          v27 = *v17;
          *((_QWORD *)a2 + 1) = v17 + 1;
        }
        v18 = *((_DWORD *)a2 + 14);
        v19 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v18 + 1;
        if (v18 >= v19)
          return 0;
        v20 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v27);
        if (!sub_10005D480(v16, a2, v21) || !*((_BYTE *)a2 + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v20);
        v22 = *((_DWORD *)a2 + 14);
        v23 = __OFSUB__(v22, 1);
        v24 = v22 - 1;
        if (v24 < 0 == v23)
          *((_DWORD *)a2 + 14) = v24;
        v12 = (_BYTE *)*((_QWORD *)a2 + 1);
        v25 = (_BYTE *)*((_QWORD *)a2 + 2);
        if (v12 >= v25 || *v12 != 18)
          break;
LABEL_25:
        *((_QWORD *)a2 + 1) = v12 + 1;
      }
      if (v12 == v25 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      }
    }
    v8 = TagFallback & 7;
LABEL_16:
    if (v8 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t proto::gnss::Emergency::WlanMeasurementList::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = this;
  if ((*(_BYTE *)(this + 40) & 1) != 0)
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(this + 32), (int)a2, a4);
  if (*(int *)(v5 + 16) >= 1)
  {
    v6 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 16));
  }
  return this;
}

uint64_t proto::gnss::Emergency::WlanMeasurementList::ByteSize(proto::gnss::Emergency::WlanMeasurementList *this, unsigned int a2)
{
  int v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;
  int v10;

  if ((*((_BYTE *)this + 40) & 1) != 0)
  {
    v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
    if ((v4 & 0x80000000) != 0)
    {
      v3 = 11;
    }
    else if (v4 >= 0x80)
    {
      v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4, a2) + 1;
    }
    else
    {
      v3 = 2;
    }
  }
  else
  {
    v3 = 0;
  }
  v5 = *((_DWORD *)this + 4);
  v6 = (v5 + v3);
  if (v5 >= 1)
  {
    v7 = 0;
    do
    {
      v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::WlanMeasurementElement::ByteSize(*(proto::gnss::Emergency::WlanMeasurementElement **)(*((_QWORD *)this + 1) + 8 * v7), a2);
      v9 = (int)v8;
      if (v8 >= 0x80)
        v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2);
      else
        v10 = 1;
      v6 = (v9 + v6 + v10);
      ++v7;
    }
    while (v7 < *((int *)this + 4));
  }
  *((_DWORD *)this + 9) = v6;
  return v6;
}

void proto::gnss::Emergency::WlanMeasurementList::CheckTypeAndMergeFrom(proto::gnss::Emergency::WlanMeasurementList *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  proto::gnss::Emergency::WlanMeasurementList::MergeFrom(this, lpsrc);
}

uint64_t proto::gnss::Emergency::WlanMeasurementList::IsInitialized(proto::gnss::Emergency::WlanMeasurementList *this)
{
  return 1;
}

_QWORD *proto::gnss::Emergency::WlanMeasurementList::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.WlanMeasurementList");
}

void sub_10005E17C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  char v7;
  int v8;
  int v9;
  int v10;
  char v11;
  _BYTE v12[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v12, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 4777);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 32);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) != 0)
    {
      v7 = *(_BYTE *)(a2 + 8);
      *(_DWORD *)(a1 + 32) |= 1u;
      *(_BYTE *)(a1 + 8) = v7;
      v5 = *(_DWORD *)(a2 + 32);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          goto LABEL_7;
        goto LABEL_13;
      }
    }
    else if ((*(_BYTE *)(a2 + 32) & 2) == 0)
    {
      goto LABEL_6;
    }
    v8 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a1 + 32) |= 2u;
    *(_DWORD *)(a1 + 12) = v8;
    v5 = *(_DWORD *)(a2 + 32);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0)
        goto LABEL_8;
      goto LABEL_14;
    }
LABEL_13:
    v9 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 32) |= 4u;
    *(_DWORD *)(a1 + 16) = v9;
    v5 = *(_DWORD *)(a2 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0)
        return;
      goto LABEL_9;
    }
LABEL_14:
    v10 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 32) |= 8u;
    *(_DWORD *)(a1 + 20) = v10;
    if ((*(_DWORD *)(a2 + 32) & 0x10) == 0)
      return;
LABEL_9:
    v6 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 32) |= 0x10u;
    *(_DWORD *)(a1 + 24) = v6;
  }
}

void sub_10005E28C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void proto::gnss::Emergency::QoP::~QoP(proto::gnss::Emergency::QoP *this)
{
  *(_QWORD *)this = off_1000F46A0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = off_1000F46A0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

void proto::gnss::Emergency::QoP::New(proto::gnss::Emergency::QoP *this)
{
  operator new();
}

uint64_t proto::gnss::Emergency::QoP::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 32))
  {
    *(_BYTE *)(this + 8) = 0;
    *(_QWORD *)(this + 20) = 0;
    *(_QWORD *)(this + 12) = 0;
  }
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t proto::gnss::Emergency::QoP::MergePartialFromCodedStream(proto::gnss::Emergency::QoP *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  char *v9;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v11;
  unint64_t v12;
  char *v13;
  unsigned int v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  _BYTE *v20;
  _BYTE *v21;
  _BYTE *v22;
  unsigned __int8 *v23;
  uint64_t result;
  unsigned int v25;

  v5 = (unsigned int *)((char *)this + 12);
  v6 = (unsigned int *)((char *)this + 16);
  v7 = (unsigned int *)((char *)this + 20);
  v8 = (unsigned int *)((char *)this + 24);
  while (2)
  {
    v9 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v9 >= *((_QWORD *)a2 + 2) || *v9 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v9;
      *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      *((_QWORD *)a2 + 1) = v9 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v25 = 0;
        v13 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v13 < v12 && (*v13 & 0x80000000) == 0)
        {
          v14 = *v13;
          v15 = v13 + 1;
          *((_QWORD *)a2 + 1) = v15;
LABEL_26:
          *((_BYTE *)this + 8) = v14 != 0;
          *((_DWORD *)this + 8) |= 1u;
          if ((unint64_t)v15 < v12 && *v15 == 16)
          {
            v16 = v15 + 1;
            *((_QWORD *)a2 + 1) = v16;
            goto LABEL_29;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v25);
        if ((_DWORD)result)
        {
          v14 = v25;
          v15 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
          goto LABEL_26;
        }
        break;
      case 2u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v16 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
LABEL_29:
        if ((unint64_t)v16 >= v12 || *v16 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v20 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v5 = *v16;
          v20 = v16 + 1;
          *((_QWORD *)a2 + 1) = v20;
        }
        *((_DWORD *)this + 8) |= 2u;
        if ((unint64_t)v20 >= v12 || *v20 != 24)
          continue;
        v17 = v20 + 1;
        *((_QWORD *)a2 + 1) = v17;
LABEL_37:
        if ((unint64_t)v17 >= v12 || *v17 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!(_DWORD)result)
            return result;
          v21 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v6 = *v17;
          v21 = v17 + 1;
          *((_QWORD *)a2 + 1) = v21;
        }
        *((_DWORD *)this + 8) |= 4u;
        if ((unint64_t)v21 >= v12 || *v21 != 32)
          continue;
        v18 = v21 + 1;
        *((_QWORD *)a2 + 1) = v18;
LABEL_45:
        if ((unint64_t)v18 >= v12 || *v18 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!(_DWORD)result)
            return result;
          v22 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v7 = *v18;
          v22 = v18 + 1;
          *((_QWORD *)a2 + 1) = v22;
        }
        *((_DWORD *)this + 8) |= 8u;
        if ((unint64_t)v22 >= v12 || *v22 != 40)
          continue;
        v19 = v22 + 1;
        *((_QWORD *)a2 + 1) = v19;
LABEL_53:
        if ((unint64_t)v19 >= v12 || *v19 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v8);
          if (!(_DWORD)result)
            return result;
          v23 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v8 = *v19;
          v23 = (unsigned __int8 *)(v19 + 1);
          *((_QWORD *)a2 + 1) = v23;
        }
        *((_DWORD *)this + 8) |= 0x10u;
        if (v23 != (unsigned __int8 *)v12 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
          continue;
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      case 3u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v17 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        goto LABEL_37;
      case 4u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v18 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        goto LABEL_45;
      case 5u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v19 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        goto LABEL_53;
      default:
        v11 = TagFallback & 7;
LABEL_20:
        if (v11 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

uint64_t proto::gnss::Emergency::QoP::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v4;
  int *v5;
  int v6;

  v4 = a2;
  v5 = (int *)this;
  v6 = *(_DWORD *)(this + 32);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(this + 8), (BOOL)a2, a4);
    v6 = v5[8];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v5[3], v4, a4);
  v6 = v5[8];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[4], v4, a4);
  v6 = v5[8];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v5[6], v4, a4);
  }
LABEL_10:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v5[5], v4, a4);
  if ((v5[8] & 0x10) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v5[6], v4, a4);
  return this;
}

uint64_t proto::gnss::Emergency::QoP::ByteSize(proto::gnss::Emergency::QoP *this, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;

  v3 = *((_DWORD *)this + 8);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_24;
  }
  v4 = 2 * (v3 & 1u);
  if ((v3 & 2) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
    if (v5 >= 0x80)
    {
      v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *((_DWORD *)this + 8);
    }
    else
    {
      v6 = 2;
    }
    v4 = (v6 + v4);
    if ((v3 & 4) == 0)
    {
LABEL_4:
      if ((v3 & 8) == 0)
        goto LABEL_5;
      goto LABEL_16;
    }
  }
  else if ((v3 & 4) == 0)
  {
    goto LABEL_4;
  }
  v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
  if (v7 >= 0x80)
  {
    v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2) + 1;
    v3 = *((_DWORD *)this + 8);
  }
  else
  {
    v8 = 2;
  }
  v4 = (v8 + v4);
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_24;
    goto LABEL_20;
  }
LABEL_16:
  v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
  if (v9 >= 0x80)
  {
    v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2) + 1;
    v3 = *((_DWORD *)this + 8);
  }
  else
  {
    v10 = 2;
  }
  v4 = (v10 + v4);
  if ((v3 & 0x10) != 0)
  {
LABEL_20:
    v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
    if (v11 >= 0x80)
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
    else
      v12 = 2;
    v4 = (v12 + v4);
  }
LABEL_24:
  *((_DWORD *)this + 7) = v4;
  return v4;
}

void proto::gnss::Emergency::QoP::CheckTypeAndMergeFrom(proto::gnss::Emergency::QoP *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  sub_10005E17C((uint64_t)this, (uint64_t)lpsrc);
}

uint64_t proto::gnss::Emergency::QoP::IsInitialized(proto::gnss::Emergency::QoP *this)
{
  return 1;
}

_QWORD *proto::gnss::Emergency::QoP::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.QoP");
}

void sub_10005E890(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  char v7;
  unsigned int v8;
  const std::string *v9;
  std::string *v10;
  char v11;
  _BYTE v12[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v12, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 5069);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  v5 = *(_DWORD *)(a2 + 32);
  if (v5)
  {
    sub_10003C950(a1 + 24, *(_DWORD *)(a1 + 32) + v5);
    memcpy((void *)(*(_QWORD *)(a1 + 24) + 4 * *(int *)(a1 + 32)), *(const void **)(a2 + 24), 4 * *(int *)(a2 + 32));
    *(_DWORD *)(a1 + 32) += *(_DWORD *)(a2 + 32);
  }
  LOBYTE(v6) = *(_BYTE *)(a2 + 44);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 44) & 1) != 0)
    {
      v7 = *(_BYTE *)(a2 + 8);
      *(_DWORD *)(a1 + 44) |= 1u;
      *(_BYTE *)(a1 + 8) = v7;
      v6 = *(_DWORD *)(a2 + 44);
    }
    if ((v6 & 2) != 0)
    {
      v8 = *(_DWORD *)(a2 + 12);
      if (v8 >= 5)
        __assert_rtn("set_slp_address_type", "GnssEmergencyTypes.pb.h", 14702, "::proto::gnss::Emergency::SLPAddressType_IsValid(value)");
      *(_DWORD *)(a1 + 44) |= 2u;
      *(_DWORD *)(a1 + 12) = v8;
      v6 = *(_DWORD *)(a2 + 44);
    }
    if ((v6 & 4) != 0)
    {
      v9 = *(const std::string **)(a2 + 16);
      *(_DWORD *)(a1 + 44) |= 4u;
      v10 = *(std::string **)(a1 + 16);
      if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      std::string::operator=(v10, v9);
    }
  }
}

void sub_10005E9FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void proto::gnss::Emergency::SLPAddress::~SLPAddress(proto::gnss::Emergency::SLPAddress *this)
{
  uint64_t v1;

  *(_QWORD *)this = off_1000F4718;
  v1 = *((_QWORD *)this + 2);
  if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    operator delete();
  }
  if (*((_QWORD *)this + 3))
    operator delete[]();
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  proto::gnss::Emergency::SLPAddress::~SLPAddress(this);
  operator delete();
}

void proto::gnss::Emergency::SLPAddress::New(proto::gnss::Emergency::SLPAddress *this)
{
  operator new();
}

uint64_t proto::gnss::Emergency::SLPAddress::Clear(uint64_t this)
{
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(this + 44);
  if (v1)
  {
    *(_BYTE *)(this + 8) = 0;
    *(_DWORD *)(this + 12) = 0;
    if ((v1 & 4) != 0)
    {
      v2 = *(_QWORD *)(this + 16);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(this + 32) = 0;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

uint64_t proto::gnss::Emergency::SLPAddress::MergePartialFromCodedStream(proto::gnss::Emergency::SLPAddress *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  unint64_t v9;
  char *v10;
  unsigned int v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t result;
  unsigned int v17;
  _BYTE *v18;
  void *v19;
  char *v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  int v25;
  _BYTE *v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  char v33;
  unsigned int v34[12];

  v5 = (char *)this + 24;
  while (2)
  {
    v6 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v6 >= *((_QWORD *)a2 + 2) || *v6 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      *((_QWORD *)a2 + 1) = v6 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v34[0] = 0;
        v10 = (char *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v34);
          if (!(_DWORD)result)
            return result;
          v11 = v34[0];
          v12 = (_BYTE *)*((_QWORD *)a2 + 1);
          v9 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v11 = *v10;
          v12 = v10 + 1;
          *((_QWORD *)a2 + 1) = v12;
        }
        *((_BYTE *)this + 8) = v11 != 0;
        *((_DWORD *)this + 11) |= 1u;
        if ((unint64_t)v12 < v9 && *v12 == 16)
        {
          v13 = v12 + 1;
          *((_QWORD *)a2 + 1) = v13;
          goto LABEL_30;
        }
        continue;
      case 2u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v13 = (char *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
LABEL_30:
        v34[0] = 0;
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v34);
          if (!(_DWORD)result)
            return result;
          v17 = v34[0];
        }
        else
        {
          v17 = *v13;
          *((_QWORD *)a2 + 1) = v13 + 1;
        }
        if (v17 <= 4)
        {
          *((_DWORD *)this + 11) |= 2u;
          *((_DWORD *)this + 3) = v17;
        }
        v18 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v18 >= *((_QWORD *)a2 + 2) || *v18 != 26)
          continue;
        *((_QWORD *)a2 + 1) = v18 + 1;
LABEL_40:
        *((_DWORD *)this + 11) |= 4u;
        v19 = (void *)*((_QWORD *)this + 2);
        if (v19 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(a2, v19);
        if (!(_DWORD)result)
          return result;
        v20 = (char *)*((_QWORD *)a2 + 1);
        v14 = (char *)*((_QWORD *)a2 + 2);
        if (v20 < v14 && *v20 == 32)
          goto LABEL_45;
        continue;
      case 3u:
        v8 = TagFallback & 7;
        if (v8 == 2)
          goto LABEL_40;
        goto LABEL_20;
      case 4u:
        v8 = TagFallback & 7;
        if (v8 == 2)
        {
          result = sub_10005EF8C(a2, (uint64_t)v5);
          if (!(_DWORD)result)
            return result;
          while (1)
          {
            v20 = (char *)*((_QWORD *)a2 + 1);
            v14 = (char *)*((_QWORD *)a2 + 2);
            if (v20 >= v14 || *v20 != 32)
              break;
LABEL_45:
            v15 = v20 + 1;
            *((_QWORD *)a2 + 1) = v15;
LABEL_46:
            v32 = 0;
            if (v15 >= v14 || *v15 < 0)
            {
              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v32))return 0;
            }
            else
            {
              v32 = *v15;
              *((_QWORD *)a2 + 1) = v15 + 1;
            }
            v21 = *((_DWORD *)this + 8);
            if (v21 == *((_DWORD *)this + 9))
            {
              sub_10003C950((uint64_t)v5, v21 + 1);
              v21 = *((_DWORD *)this + 8);
            }
            v22 = v32;
            v23 = *((_QWORD *)this + 3);
            *((_DWORD *)this + 8) = v21 + 1;
            *(_DWORD *)(v23 + 4 * v21) = v22;
            v24 = *((_DWORD *)this + 9) - *((_DWORD *)this + 8);
            if (v24 >= 1)
            {
              v25 = v24 + 1;
              do
              {
                v26 = (_BYTE *)*((_QWORD *)a2 + 1);
                v27 = *((_QWORD *)a2 + 2);
                if ((unint64_t)v26 >= v27 || *v26 != 32)
                  break;
                *((_QWORD *)a2 + 1) = v26 + 1;
                if ((unint64_t)(v26 + 1) >= v27 || (char)v26[1] < 0)
                {
                  if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v32))return 0;
                }
                else
                {
                  v32 = v26[1];
                  *((_QWORD *)a2 + 1) = v26 + 2;
                }
                v28 = *((_DWORD *)this + 8);
                if (v28 >= *((_DWORD *)this + 9))
                {
                  wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v34, 3, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 602);
                  v29 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v34, "CHECK failed: (size()) < (Capacity()): ");
                  wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v33, v29);
                  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v34);
                  v28 = *((_DWORD *)this + 8);
                }
                v30 = v32;
                v31 = *((_QWORD *)this + 3);
                *((_DWORD *)this + 8) = v28 + 1;
                *(_DWORD *)(v31 + 4 * v28) = v30;
                --v25;
              }
              while (v25 > 1);
            }
          }
          if (v20 == v14 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
          {
            *((_DWORD *)a2 + 8) = 0;
            result = 1;
            *((_BYTE *)a2 + 36) = 1;
            return result;
          }
          continue;
        }
        if ((TagFallback & 7) == 0)
        {
          v15 = (char *)*((_QWORD *)a2 + 1);
          v14 = (char *)*((_QWORD *)a2 + 2);
          goto LABEL_46;
        }
LABEL_20:
        if (v8 != 4)
        {
          if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) == 0)
            return 0;
          continue;
        }
        return 1;
      default:
        v8 = TagFallback & 7;
        goto LABEL_20;
    }
  }
}

void sub_10005EF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10005EF8C(wireless_diagnostics::google::protobuf::io::CodedInputStream *this, uint64_t a2)
{
  char *v4;
  unsigned int v5;
  uint64_t result;
  int v7;
  char *v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;

  v13 = 0;
  v4 = (char *)*((_QWORD *)this + 1);
  if ((unint64_t)v4 >= *((_QWORD *)this + 2) || *v4 < 0)
  {
    result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v13);
    if (!(_DWORD)result)
      return result;
    v5 = v13;
  }
  else
  {
    v5 = *v4;
    v13 = v5;
    *((_QWORD *)this + 1) = v4 + 1;
  }
  v7 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v5);
  if ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) >= 1)
  {
    do
    {
      v12 = 0;
      v8 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v12);
        if (!(_DWORD)result)
          return result;
      }
      else
      {
        v12 = *v8;
        *((_QWORD *)this + 1) = v8 + 1;
      }
      v9 = *(_DWORD *)(a2 + 8);
      if (v9 == *(_DWORD *)(a2 + 12))
      {
        sub_10003C950(a2, v9 + 1);
        v9 = *(_DWORD *)(a2 + 8);
      }
      v10 = v12;
      v11 = *(_QWORD *)a2;
      *(_DWORD *)(a2 + 8) = v9 + 1;
      *(_DWORD *)(v11 + 4 * v9) = v10;
    }
    while ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) > 0);
  }
  wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v7);
  return 1;
}

uint64_t proto::gnss::Emergency::SLPAddress::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = this;
  v6 = *(_DWORD *)(this + 44);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(this + 8), (BOOL)a2, a4);
    v6 = *(_DWORD *)(v5 + 44);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), (int)a2, a4);
  if ((*(_DWORD *)(v5 + 44) & 4) != 0)
LABEL_4:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(3, *(_QWORD *)(v5 + 16), a2);
LABEL_5:
  if (*(int *)(v5 + 32) >= 1)
  {
    v7 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_DWORD *)(*(_QWORD *)(v5 + 24) + 4 * v7++), a2, a4);
    while (v7 < *(int *)(v5 + 32));
  }
  return this;
}

uint64_t proto::gnss::Emergency::SLPAddress::ByteSize(proto::gnss::Emergency::SLPAddress *this, unsigned int a2)
{
  int v3;
  int v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v16;
  int v17;
  uint64_t result;

  v3 = *((_DWORD *)this + 11);
  if ((_BYTE)v3)
  {
    v4 = 2 * (v3 & 1);
    if ((v3 & 2) != 0)
    {
      v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
      if ((v5 & 0x80000000) != 0)
      {
        v6 = 11;
      }
      else if (v5 >= 0x80)
      {
        v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
        v3 = *((_DWORD *)this + 11);
      }
      else
      {
        v6 = 2;
      }
      v4 += v6;
    }
    if ((v3 & 4) != 0)
    {
      v7 = *((_QWORD *)this + 2);
      v8 = *(unsigned __int8 *)(v7 + 23);
      v9 = v8;
      v10 = *(_QWORD *)(v7 + 8);
      if ((v8 & 0x80u) == 0)
        v11 = *(unsigned __int8 *)(v7 + 23);
      else
        v11 = v10;
      if (v11 >= 0x80)
      {
        v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v11, a2);
        v8 = *(unsigned __int8 *)(v7 + 23);
        v10 = *(_QWORD *)(v7 + 8);
        v9 = *(_BYTE *)(v7 + 23);
      }
      else
      {
        v12 = 1;
      }
      if (v9 < 0)
        v8 = v10;
      v4 += v12 + v8 + 1;
    }
  }
  else
  {
    v4 = 0;
  }
  v13 = *((_DWORD *)this + 8);
  if (v13 < 1)
  {
    v15 = 0;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    do
    {
      v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(*((_QWORD *)this + 3)
                                                                                             + 4 * v14);
      if (v16 >= 0x80)
      {
        v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16, a2);
        v13 = *((_DWORD *)this + 8);
      }
      else
      {
        v17 = 1;
      }
      v15 += v17;
      ++v14;
    }
    while (v14 < v13);
  }
  result = (v15 + v4 + v13);
  *((_DWORD *)this + 10) = result;
  return result;
}

void proto::gnss::Emergency::SLPAddress::CheckTypeAndMergeFrom(proto::gnss::Emergency::SLPAddress *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  sub_10005E890((uint64_t)this, (uint64_t)lpsrc);
}

uint64_t proto::gnss::Emergency::SLPAddress::IsInitialized(proto::gnss::Emergency::SLPAddress *this)
{
  return 1;
}

_QWORD *proto::gnss::Emergency::SLPAddress::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.SLPAddress");
}

void sub_10005F2F0(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  int v5;
  char v6;
  char v7;
  char v8;
  _BYTE v9[48];

  if (a2 == (_BYTE *)a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 5273);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v5) = a2[16];
  if ((_BYTE)v5)
  {
    if ((a2[16] & 1) != 0)
    {
      v6 = a2[8];
      *(_DWORD *)(a1 + 16) |= 1u;
      *(_BYTE *)(a1 + 8) = v6;
      v5 = *((_DWORD *)a2 + 4);
    }
    if ((v5 & 2) != 0)
    {
      v7 = a2[9];
      *(_DWORD *)(a1 + 16) |= 2u;
      *(_BYTE *)(a1 + 9) = v7;
    }
  }
}

void sub_10005F398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void proto::gnss::Emergency::Notification::~Notification(proto::gnss::Emergency::Notification *this)
{
  *(_QWORD *)this = off_1000F4790;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = off_1000F4790;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

void proto::gnss::Emergency::Notification::New(proto::gnss::Emergency::Notification *this)
{
  operator new();
}

uint64_t proto::gnss::Emergency::Notification::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 16))
    *(_WORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t proto::gnss::Emergency::Notification::MergePartialFromCodedStream(proto::gnss::Emergency::Notification *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  unint64_t v8;
  char *v9;
  char *v10;
  unsigned int v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned __int8 *v14;
  uint64_t result;
  unsigned int v16;
  unsigned int v17;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
        *((_QWORD *)a2 + 1) = v5 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v7 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_15;
      v17 = 0;
      v10 = (char *)*((_QWORD *)a2 + 1);
      v8 = *((_QWORD *)a2 + 2);
      if ((unint64_t)v10 >= v8 || *v10 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v17);
        if (!(_DWORD)result)
          return result;
        v11 = v17;
        v12 = (_BYTE *)*((_QWORD *)a2 + 1);
        v8 = *((_QWORD *)a2 + 2);
      }
      else
      {
        v11 = *v10;
        v12 = v10 + 1;
        *((_QWORD *)a2 + 1) = v12;
      }
      *((_BYTE *)this + 8) = v11 != 0;
      *((_DWORD *)this + 4) |= 1u;
      if ((unint64_t)v12 < v8 && *v12 == 16)
      {
        v9 = v12 + 1;
        *((_QWORD *)a2 + 1) = v9;
LABEL_23:
        v16 = 0;
        if ((unint64_t)v9 >= v8 || *v9 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v16);
          if (!(_DWORD)result)
            return result;
          v13 = v16;
          v14 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v8 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v13 = *v9;
          v14 = (unsigned __int8 *)(v9 + 1);
          *((_QWORD *)a2 + 1) = v14;
        }
        *((_BYTE *)this + 9) = v13 != 0;
        *((_DWORD *)this + 4) |= 2u;
        if (v14 == (unsigned __int8 *)v8 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      v7 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v9 = (char *)*((_QWORD *)a2 + 1);
        v8 = *((_QWORD *)a2 + 2);
        goto LABEL_23;
      }
    }
    else
    {
      v7 = TagFallback & 7;
    }
LABEL_15:
    if (v7 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t proto::gnss::Emergency::Notification::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  char v4;
  uint64_t v5;
  int v6;

  v4 = (char)a2;
  v5 = this;
  v6 = *(_DWORD *)(this + 16);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(this + 8), (BOOL)a2, a4);
    v6 = *(_DWORD *)(v5 + 16);
  }
  if ((v6 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 9), v4, a4);
  return this;
}

uint64_t proto::gnss::Emergency::Notification::ByteSize(proto::gnss::Emergency::Notification *this)
{
  unsigned int v1;
  uint64_t v2;

  v1 = 2 * (*((_DWORD *)this + 4) & 1);
  if ((*((_DWORD *)this + 4) & 2) != 0)
    v1 += 2;
  if (*((_DWORD *)this + 4))
    v2 = v1;
  else
    v2 = 0;
  *((_DWORD *)this + 3) = v2;
  return v2;
}

void proto::gnss::Emergency::Notification::CheckTypeAndMergeFrom(proto::gnss::Emergency::Notification *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  sub_10005F2F0((uint64_t)this, lpsrc);
}

uint64_t proto::gnss::Emergency::Notification::IsInitialized(proto::gnss::Emergency::Notification *this)
{
  return 1;
}

_QWORD *proto::gnss::Emergency::Notification::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.Notification");
}

void sub_10005F6F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  char v9;
  _BYTE v10[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v10, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 5486);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 24);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      *(_DWORD *)(a1 + 24) |= 1u;
      v6 = *(_QWORD *)(a1 + 8);
      if (!v6)
        operator new();
      v7 = *(_QWORD *)(a2 + 8);
      if (!v7)
        v7 = *(_QWORD *)(proto::gnss::Emergency::SuplInitVer2Extension::default_instance_ + 8);
      sub_10005E890(v6, v7);
      v5 = *(_DWORD *)(a2 + 24);
    }
    if ((v5 & 2) != 0)
    {
      v8 = *(_DWORD *)(a2 + 16);
      if (v8 >= 4)
        __assert_rtn("set_trigger_type", "GnssEmergencyTypes.pb.h", 14914, "::proto::gnss::Emergency::TriggerType_IsValid(value)");
      *(_DWORD *)(a1 + 24) |= 2u;
      *(_DWORD *)(a1 + 16) = v8;
    }
  }
}

void sub_10005F81C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void proto::gnss::Emergency::SuplInitVer2Extension::~SuplInitVer2Extension(proto::gnss::Emergency::SuplInitVer2Extension *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1000F4808;
  if ((proto::gnss::Emergency::SuplInitVer2Extension *)proto::gnss::Emergency::SuplInitVer2Extension::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  proto::gnss::Emergency::SuplInitVer2Extension::~SuplInitVer2Extension(this);
  operator delete();
}

void proto::gnss::Emergency::SuplInitVer2Extension::New(proto::gnss::Emergency::SuplInitVer2Extension *this)
{
  operator new();
}

uint64_t proto::gnss::Emergency::SuplInitVer2Extension::Clear(uint64_t this)
{
  uint64_t v1;

  v1 = this;
  if (*(_BYTE *)(this + 24))
  {
    if ((*(_BYTE *)(this + 24) & 1) != 0)
    {
      this = *(_QWORD *)(this + 8);
      if (this)
        this = proto::gnss::Emergency::SLPAddress::Clear(this);
    }
    *(_DWORD *)(v1 + 16) = 0;
  }
  *(_DWORD *)(v1 + 24) = 0;
  return this;
}

uint64_t proto::gnss::Emergency::SuplInitVer2Extension::MergePartialFromCodedStream(proto::gnss::Emergency::SuplInitVer2Extension *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  unint64_t v8;
  char *v9;
  proto::gnss::Emergency::SLPAddress *v10;
  char *v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  int v18;
  _BYTE *v19;
  unsigned int v20;
  uint64_t result;
  unsigned int v22;
  unsigned int v23;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
        *((_QWORD *)a2 + 1) = v5 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 == 1)
        break;
      if (TagFallback >> 3 == 2)
      {
        v7 = TagFallback & 7;
        if ((TagFallback & 7) == 0)
        {
          v9 = (char *)*((_QWORD *)a2 + 1);
          v8 = *((_QWORD *)a2 + 2);
          goto LABEL_29;
        }
      }
      else
      {
        v7 = TagFallback & 7;
      }
LABEL_17:
      if (v7 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) == 0)
        return 0;
    }
    v7 = TagFallback & 7;
    if (v7 != 2)
      goto LABEL_17;
    *((_DWORD *)this + 6) |= 1u;
    v10 = (proto::gnss::Emergency::SLPAddress *)*((_QWORD *)this + 1);
    if (!v10)
      operator new();
    v23 = 0;
    v11 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v11 >= *((_QWORD *)a2 + 2) || *v11 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v23))
        return 0;
    }
    else
    {
      v23 = *v11;
      *((_QWORD *)a2 + 1) = v11 + 1;
    }
    v12 = *((_DWORD *)a2 + 14);
    v13 = *((_DWORD *)a2 + 15);
    *((_DWORD *)a2 + 14) = v12 + 1;
    if (v12 >= v13)
      return 0;
    v14 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v23);
    if (!proto::gnss::Emergency::SLPAddress::MergePartialFromCodedStream(v10, a2, v15)
      || !*((_BYTE *)a2 + 36))
    {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v14);
    v16 = *((_DWORD *)a2 + 14);
    v17 = __OFSUB__(v16, 1);
    v18 = v16 - 1;
    if (v18 < 0 == v17)
      *((_DWORD *)a2 + 14) = v18;
    v19 = (_BYTE *)*((_QWORD *)a2 + 1);
    v8 = *((_QWORD *)a2 + 2);
    if ((unint64_t)v19 < v8 && *v19 == 16)
    {
      v9 = v19 + 1;
      *((_QWORD *)a2 + 1) = v9;
LABEL_29:
      v22 = 0;
      if ((unint64_t)v9 >= v8 || *v9 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v22);
        if (!(_DWORD)result)
          return result;
        v20 = v22;
      }
      else
      {
        v20 = *v9;
        *((_QWORD *)a2 + 1) = v9 + 1;
      }
      if (v20 <= 3)
      {
        *((_DWORD *)this + 6) |= 2u;
        *((_DWORD *)this + 4) = v20;
      }
      if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      }
    }
  }
}

uint64_t proto::gnss::Emergency::SuplInitVer2Extension::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = this;
  v6 = *(_DWORD *)(this + 24);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 16), (int)a2, a4);
  }
  v7 = *(_QWORD *)(this + 8);
  if (!v7)
    v7 = *(_QWORD *)(proto::gnss::Emergency::SuplInitVer2Extension::default_instance_ + 8);
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
  if ((*(_DWORD *)(v5 + 24) & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 16), (int)a2, a4);
  return this;
}

uint64_t proto::gnss::Emergency::SuplInitVer2Extension::ByteSize(proto::gnss::Emergency::SuplInitVer2Extension *this, unsigned int a2)
{
  uint64_t v3;
  proto::gnss::Emergency::SLPAddress *v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  int v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;

  if (!*((_BYTE *)this + 24))
  {
    v3 = 0;
    goto LABEL_18;
  }
  if ((*((_BYTE *)this + 24) & 1) == 0)
  {
    v3 = 0;
    if ((*((_BYTE *)this + 24) & 2) == 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  v4 = (proto::gnss::Emergency::SLPAddress *)*((_QWORD *)this + 1);
  if (!v4)
    v4 = *(proto::gnss::Emergency::SLPAddress **)(proto::gnss::Emergency::SuplInitVer2Extension::default_instance_ + 8);
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::SLPAddress::ByteSize(v4, a2);
  v6 = (int)v5;
  if (v5 >= 0x80)
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
  else
    v7 = 1;
  v3 = (v6 + v7 + 1);
  if ((*((_DWORD *)this + 6) & 2) != 0)
  {
LABEL_12:
    v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
    if ((v8 & 0x80000000) != 0)
    {
      v9 = 11;
    }
    else if (v8 >= 0x80)
    {
      v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2) + 1;
    }
    else
    {
      v9 = 2;
    }
    v3 = (v9 + v3);
  }
LABEL_18:
  *((_DWORD *)this + 5) = v3;
  return v3;
}

void proto::gnss::Emergency::SuplInitVer2Extension::CheckTypeAndMergeFrom(proto::gnss::Emergency::SuplInitVer2Extension *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  sub_10005F6F4((uint64_t)this, (uint64_t)lpsrc);
}

uint64_t proto::gnss::Emergency::SuplInitVer2Extension::IsInitialized(proto::gnss::Emergency::SuplInitVer2Extension *this)
{
  return 1;
}

_QWORD *proto::gnss::Emergency::SuplInitVer2Extension::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.SuplInitVer2Extension");
}

void proto::gnss::Emergency::Init::MergeFrom(proto::gnss::Emergency::Init *this, const proto::gnss::Emergency::Init *a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _BYTE v16[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v16, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 5816);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v15, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v16);
  }
  LOBYTE(v5) = *((_BYTE *)a2 + 48);
  if (!(_BYTE)v5)
    return;
  if ((*((_BYTE *)a2 + 48) & 1) != 0)
  {
    v6 = *((_DWORD *)a2 + 10);
    if (v6 >= 0x12)
      __assert_rtn("set_pos_method", "GnssEmergencyTypes.pb.h", 14941, "::proto::gnss::Emergency::PositionMethod_IsValid(value)");
    *((_DWORD *)this + 12) |= 1u;
    *((_DWORD *)this + 10) = v6;
    v5 = *((_DWORD *)a2 + 12);
  }
  if ((v5 & 2) == 0)
  {
    if ((v5 & 4) == 0)
      goto LABEL_9;
LABEL_17:
    *((_DWORD *)this + 12) |= 4u;
    v9 = *((_QWORD *)this + 2);
    if (!v9)
      operator new();
    v10 = *((_QWORD *)a2 + 2);
    if (!v10)
      v10 = *(_QWORD *)(proto::gnss::Emergency::Init::default_instance_ + 16);
    sub_10005E890(v9, v10);
    v5 = *((_DWORD *)a2 + 12);
    if ((v5 & 8) == 0)
    {
LABEL_10:
      if ((v5 & 0x10) == 0)
        return;
      goto LABEL_27;
    }
    goto LABEL_22;
  }
  *((_DWORD *)this + 12) |= 2u;
  v7 = *((_QWORD *)this + 1);
  if (!v7)
    operator new();
  v8 = *((_QWORD *)a2 + 1);
  if (!v8)
    v8 = *(_QWORD *)(proto::gnss::Emergency::Init::default_instance_ + 8);
  sub_10005E17C(v7, v8);
  v5 = *((_DWORD *)a2 + 12);
  if ((v5 & 4) != 0)
    goto LABEL_17;
LABEL_9:
  if ((v5 & 8) == 0)
    goto LABEL_10;
LABEL_22:
  *((_DWORD *)this + 12) |= 8u;
  v11 = *((_QWORD *)this + 3);
  if (!v11)
    operator new();
  v12 = (_BYTE *)*((_QWORD *)a2 + 3);
  if (!v12)
    v12 = *(_BYTE **)(proto::gnss::Emergency::Init::default_instance_ + 24);
  sub_10005F2F0(v11, v12);
  if ((*((_DWORD *)a2 + 12) & 0x10) != 0)
  {
LABEL_27:
    *((_DWORD *)this + 12) |= 0x10u;
    v13 = *((_QWORD *)this + 4);
    if (!v13)
      operator new();
    v14 = *((_QWORD *)a2 + 4);
    if (!v14)
      v14 = *(_QWORD *)(proto::gnss::Emergency::Init::default_instance_ + 32);
    sub_10005F6F4(v13, v14);
  }
}

void sub_10005FF90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_10005FFA8(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((_QWORD *)proto::gnss::Emergency::Init::default_instance_ != result)
  {
    v1 = result;
    v2 = result[1];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = v1[2];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = v1[3];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    result = (_QWORD *)v1[4];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void proto::gnss::Emergency::Init::~Init(proto::gnss::Emergency::Init *this)
{
  *(_QWORD *)this = off_1000F4880;
  sub_10005FFA8(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = off_1000F4880;
  sub_10005FFA8(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

void proto::gnss::Emergency::Init::New(proto::gnss::Emergency::Init *this)
{
  operator new();
}

uint64_t proto::gnss::Emergency::Init::Clear(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  v1 = this;
  LOBYTE(v2) = *(_BYTE *)(this + 48);
  if ((_BYTE)v2)
  {
    *(_DWORD *)(this + 40) = 0;
    if ((v2 & 2) != 0)
    {
      v3 = *(_QWORD *)(this + 8);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 32))
        {
          *(_BYTE *)(v3 + 8) = 0;
          *(_QWORD *)(v3 + 20) = 0;
          *(_QWORD *)(v3 + 12) = 0;
        }
        *(_DWORD *)(v3 + 32) = 0;
        v2 = *(_DWORD *)(this + 48);
      }
    }
    if ((v2 & 4) != 0)
    {
      this = *(_QWORD *)(this + 16);
      if (this)
      {
        this = proto::gnss::Emergency::SLPAddress::Clear(this);
        v2 = *(_DWORD *)(v1 + 48);
      }
    }
    if ((v2 & 8) != 0)
    {
      v4 = *(_QWORD *)(v1 + 24);
      if (v4)
      {
        if (*(_BYTE *)(v4 + 16))
          *(_WORD *)(v4 + 8) = 0;
        *(_DWORD *)(v4 + 16) = 0;
        v2 = *(_DWORD *)(v1 + 48);
      }
    }
    if ((v2 & 0x10) != 0)
    {
      this = *(_QWORD *)(v1 + 32);
      if (this)
        this = proto::gnss::Emergency::SuplInitVer2Extension::Clear(this);
    }
  }
  *(_DWORD *)(v1 + 48) = 0;
  return this;
}

uint64_t proto::gnss::Emergency::Init::MergePartialFromCodedStream(proto::gnss::Emergency::Init *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  uint64_t result;
  _BYTE *v11;
  proto::gnss::Emergency::QoP *v12;
  char *v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  int v20;
  _BYTE *v21;
  proto::gnss::Emergency::SLPAddress *v22;
  char *v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  _BYTE *v30;
  proto::gnss::Emergency::Notification *v31;
  char *v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  _BYTE *v39;
  proto::gnss::Emergency::SuplInitVer2Extension *v40;
  char *v41;
  int v42;
  int v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;
  unsigned int v48;

  while (1)
  {
    v5 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v5 < *((_QWORD *)a2 + 2) && (*v5 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      *((_QWORD *)a2 + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
      goto LABEL_6;
    }
    TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
    *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
    if (!(_DWORD)TagFallback)
      return 1;
LABEL_6:
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v48 = 0;
        v8 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v48);
          if (!(_DWORD)result)
            return result;
          v9 = v48;
        }
        else
        {
          v9 = *v8;
          *((_QWORD *)a2 + 1) = v8 + 1;
        }
        if (v9 <= 0x11)
        {
          *((_DWORD *)this + 12) |= 1u;
          *((_DWORD *)this + 10) = v9;
        }
        v11 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v11 < *((_QWORD *)a2 + 2) && *v11 == 18)
        {
          *((_QWORD *)a2 + 1) = v11 + 1;
          goto LABEL_29;
        }
        continue;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_19;
LABEL_29:
        *((_DWORD *)this + 12) |= 2u;
        v12 = (proto::gnss::Emergency::QoP *)*((_QWORD *)this + 1);
        if (!v12)
          operator new();
        v48 = 0;
        v13 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v13 >= *((_QWORD *)a2 + 2) || *v13 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v48))return 0;
        }
        else
        {
          v48 = *v13;
          *((_QWORD *)a2 + 1) = v13 + 1;
        }
        v14 = *((_DWORD *)a2 + 14);
        v15 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v14 + 1;
        if (v14 >= v15)
          return 0;
        v16 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v48);
        if (!proto::gnss::Emergency::QoP::MergePartialFromCodedStream(v12, a2, v17)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v16);
        v18 = *((_DWORD *)a2 + 14);
        v19 = __OFSUB__(v18, 1);
        v20 = v18 - 1;
        if (v20 < 0 == v19)
          *((_DWORD *)a2 + 14) = v20;
        v21 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v21 >= *((_QWORD *)a2 + 2) || *v21 != 26)
          continue;
        *((_QWORD *)a2 + 1) = v21 + 1;
LABEL_43:
        *((_DWORD *)this + 12) |= 4u;
        v22 = (proto::gnss::Emergency::SLPAddress *)*((_QWORD *)this + 2);
        if (!v22)
          operator new();
        v48 = 0;
        v23 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v23 >= *((_QWORD *)a2 + 2) || *v23 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v48))return 0;
        }
        else
        {
          v48 = *v23;
          *((_QWORD *)a2 + 1) = v23 + 1;
        }
        v24 = *((_DWORD *)a2 + 14);
        v25 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v24 + 1;
        if (v24 >= v25)
          return 0;
        v26 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v48);
        if (!proto::gnss::Emergency::SLPAddress::MergePartialFromCodedStream(v22, a2, v27)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v26);
        v28 = *((_DWORD *)a2 + 14);
        v19 = __OFSUB__(v28, 1);
        v29 = v28 - 1;
        if (v29 < 0 == v19)
          *((_DWORD *)a2 + 14) = v29;
        v30 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v30 >= *((_QWORD *)a2 + 2) || *v30 != 34)
          continue;
        *((_QWORD *)a2 + 1) = v30 + 1;
LABEL_57:
        *((_DWORD *)this + 12) |= 8u;
        v31 = (proto::gnss::Emergency::Notification *)*((_QWORD *)this + 3);
        if (!v31)
          operator new();
        v48 = 0;
        v32 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v32 >= *((_QWORD *)a2 + 2) || *v32 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v48))return 0;
        }
        else
        {
          v48 = *v32;
          *((_QWORD *)a2 + 1) = v32 + 1;
        }
        v33 = *((_DWORD *)a2 + 14);
        v34 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v33 + 1;
        if (v33 >= v34)
          return 0;
        v35 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v48);
        if (!proto::gnss::Emergency::Notification::MergePartialFromCodedStream(v31, a2, v36)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v35);
        v37 = *((_DWORD *)a2 + 14);
        v19 = __OFSUB__(v37, 1);
        v38 = v37 - 1;
        if (v38 < 0 == v19)
          *((_DWORD *)a2 + 14) = v38;
        v39 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v39 >= *((_QWORD *)a2 + 2) || *v39 != 42)
          continue;
        *((_QWORD *)a2 + 1) = v39 + 1;
LABEL_71:
        *((_DWORD *)this + 12) |= 0x10u;
        v40 = (proto::gnss::Emergency::SuplInitVer2Extension *)*((_QWORD *)this + 4);
        if (!v40)
          operator new();
        v48 = 0;
        v41 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v41 >= *((_QWORD *)a2 + 2) || *v41 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v48))return 0;
        }
        else
        {
          v48 = *v41;
          *((_QWORD *)a2 + 1) = v41 + 1;
        }
        v42 = *((_DWORD *)a2 + 14);
        v43 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v42 + 1;
        if (v42 >= v43)
          return 0;
        v44 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v48);
        if (!proto::gnss::Emergency::SuplInitVer2Extension::MergePartialFromCodedStream(v40, a2, v45)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v44);
        v46 = *((_DWORD *)a2 + 14);
        v19 = __OFSUB__(v46, 1);
        v47 = v46 - 1;
        if (v47 < 0 == v19)
          *((_DWORD *)a2 + 14) = v47;
        if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
          && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
        break;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_43;
        goto LABEL_19;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_57;
        goto LABEL_19;
      case 5u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_19;
        goto LABEL_71;
      default:
        v7 = TagFallback & 7;
LABEL_19:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t proto::gnss::Emergency::Init::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = this;
  v6 = *(_DWORD *)(this + 48);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(this + 40), (int)a2, a4);
    v6 = *(_DWORD *)(v5 + 48);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if (!v7)
    v7 = *(_QWORD *)(proto::gnss::Emergency::Init::default_instance_ + 8);
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_11:
  v8 = *(_QWORD *)(v5 + 16);
  if (!v8)
    v8 = *(_QWORD *)(proto::gnss::Emergency::Init::default_instance_ + 16);
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v8, a2, a4);
  v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      return this;
    goto LABEL_17;
  }
LABEL_14:
  v9 = *(_QWORD *)(v5 + 24);
  if (!v9)
    v9 = *(_QWORD *)(proto::gnss::Emergency::Init::default_instance_ + 24);
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v9, a2, a4);
  if ((*(_DWORD *)(v5 + 48) & 0x10) != 0)
  {
LABEL_17:
    v10 = *(_QWORD *)(v5 + 32);
    if (!v10)
      v10 = *(_QWORD *)(proto::gnss::Emergency::Init::default_instance_ + 32);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v10, a2, a4);
  }
  return this;
}

uint64_t proto::gnss::Emergency::Init::ByteSize(proto::gnss::Emergency::Init *this, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  proto::gnss::Emergency::QoP *v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  int v9;
  proto::gnss::Emergency::SLPAddress *v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  proto::gnss::Emergency::SuplInitVer2Extension *v17;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v18;
  unsigned int v19;
  int v20;
  int v21;

  LOBYTE(v3) = *((_BYTE *)this + 48);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_43;
  }
  if ((*((_BYTE *)this + 48) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 10);
    if ((v5 & 0x80000000) != 0)
    {
      v4 = 11;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *((_DWORD *)this + 12);
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
  }
  else
  {
    v4 = 0;
    if ((*((_BYTE *)this + 48) & 2) == 0)
      goto LABEL_19;
  }
  v6 = (proto::gnss::Emergency::QoP *)*((_QWORD *)this + 1);
  if (!v6)
    v6 = *(proto::gnss::Emergency::QoP **)(proto::gnss::Emergency::Init::default_instance_ + 8);
  v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::QoP::ByteSize(v6, a2);
  v8 = (int)v7;
  if (v7 >= 0x80)
    v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
  else
    v9 = 1;
  v4 = (v4 + v8 + v9 + 1);
  v3 = *((_DWORD *)this + 12);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    v10 = (proto::gnss::Emergency::SLPAddress *)*((_QWORD *)this + 2);
    if (!v10)
      v10 = *(proto::gnss::Emergency::SLPAddress **)(proto::gnss::Emergency::Init::default_instance_ + 16);
    v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::SLPAddress::ByteSize(v10, a2);
    v12 = (int)v11;
    if (v11 >= 0x80)
      v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2);
    else
      v13 = 1;
    v4 = (v4 + v12 + v13 + 1);
    v3 = *((_DWORD *)this + 12);
    if ((v3 & 8) == 0)
    {
LABEL_21:
      if ((v3 & 0x10) == 0)
        goto LABEL_43;
      goto LABEL_37;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_21;
  }
  v14 = *((_QWORD *)this + 3);
  if (!v14)
    v14 = *(_QWORD *)(proto::gnss::Emergency::Init::default_instance_ + 24);
  v15 = 2 * (*(_DWORD *)(v14 + 16) & 1);
  if ((*(_DWORD *)(v14 + 16) & 2) != 0)
    v15 += 2;
  if (*(_DWORD *)(v14 + 16))
    v16 = v15;
  else
    v16 = 0;
  *(_DWORD *)(v14 + 12) = v16;
  v4 = (v4 + v16 + 2);
  if ((*((_DWORD *)this + 12) & 0x10) != 0)
  {
LABEL_37:
    v17 = (proto::gnss::Emergency::SuplInitVer2Extension *)*((_QWORD *)this + 4);
    if (!v17)
      v17 = *(proto::gnss::Emergency::SuplInitVer2Extension **)(proto::gnss::Emergency::Init::default_instance_ + 32);
    v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::SuplInitVer2Extension::ByteSize(v17, a2);
    v20 = (int)v18;
    if (v18 >= 0x80)
      v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18, v19);
    else
      v21 = 1;
    v4 = (v4 + v20 + v21 + 1);
  }
LABEL_43:
  *((_DWORD *)this + 11) = v4;
  return v4;
}

void proto::gnss::Emergency::Init::CheckTypeAndMergeFrom(proto::gnss::Emergency::Init *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  proto::gnss::Emergency::Init::MergeFrom(this, lpsrc);
}

uint64_t proto::gnss::Emergency::Init::IsInitialized(proto::gnss::Emergency::Init *this)
{
  return 1;
}

_QWORD *proto::gnss::Emergency::Init::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.Init");
}

proto::gnss::Emergency::SuplContext *proto::gnss::Emergency::SuplContext::SuplContext(proto::gnss::Emergency::SuplContext *this, const proto::gnss::Emergency::SuplContext *a2)
{
  *(_QWORD *)this = off_1000F48F8;
  *((_QWORD *)this + 1) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((_QWORD *)this + 2) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((_QWORD *)this + 6) = 0;
  proto::gnss::Emergency::SuplContext::MergeFrom(this, a2);
  return this;
}

void sub_100060A84(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void proto::gnss::Emergency::SuplContext::MergeFrom(proto::gnss::Emergency::SuplContext *this, const proto::gnss::Emergency::SuplContext *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  char v7;
  char v8;
  const std::string *v9;
  std::string *v10;
  char v11;
  const std::string *v12;
  std::string *v13;
  proto::gnss::Emergency::Configuration *v14;
  const proto::gnss::Emergency::Configuration *v15;
  const std::string *v16;
  std::string *v17;
  char v18;
  char v19;
  _BYTE v20[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v20, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 6269);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v20, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v19, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v20);
  }
  v5 = *((_DWORD *)a2 + 13);
  if (!(_BYTE)v5)
    goto LABEL_14;
  if ((v5 & 1) != 0)
  {
    v6 = *((_DWORD *)a2 + 8);
    *((_DWORD *)this + 13) |= 1u;
    *((_DWORD *)this + 8) = v6;
    v5 = *((_DWORD *)a2 + 13);
  }
  if ((v5 & 2) != 0)
  {
    v9 = (const std::string *)*((_QWORD *)a2 + 1);
    *((_DWORD *)this + 13) |= 2u;
    v10 = (std::string *)*((_QWORD *)this + 1);
    if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v10, v9);
    v5 = *((_DWORD *)a2 + 13);
    if ((v5 & 4) == 0)
    {
LABEL_8:
      if ((v5 & 8) == 0)
        goto LABEL_9;
      goto LABEL_21;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_8;
  }
  v11 = *((_BYTE *)a2 + 36);
  *((_DWORD *)this + 13) |= 4u;
  *((_BYTE *)this + 36) = v11;
  v5 = *((_DWORD *)a2 + 13);
  if ((v5 & 8) == 0)
  {
LABEL_9:
    if ((v5 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_21:
  v12 = (const std::string *)*((_QWORD *)a2 + 2);
  *((_DWORD *)this + 13) |= 8u;
  v13 = (std::string *)*((_QWORD *)this + 2);
  if (v13 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v13, v12);
  v5 = *((_DWORD *)a2 + 13);
  if ((v5 & 0x10) == 0)
  {
LABEL_10:
    if ((v5 & 0x20) == 0)
      goto LABEL_11;
LABEL_29:
    v16 = (const std::string *)*((_QWORD *)a2 + 5);
    *((_DWORD *)this + 13) |= 0x20u;
    v17 = (std::string *)*((_QWORD *)this + 5);
    if (v17 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v17, v16);
    v5 = *((_DWORD *)a2 + 13);
    if ((v5 & 0x40) == 0)
    {
LABEL_12:
      if ((v5 & 0x80) == 0)
        goto LABEL_14;
      goto LABEL_13;
    }
    goto LABEL_32;
  }
LABEL_24:
  *((_DWORD *)this + 13) |= 0x10u;
  v14 = (proto::gnss::Emergency::Configuration *)*((_QWORD *)this + 3);
  if (!v14)
    operator new();
  v15 = (const proto::gnss::Emergency::Configuration *)*((_QWORD *)a2 + 3);
  if (!v15)
    v15 = *(const proto::gnss::Emergency::Configuration **)(proto::gnss::Emergency::SuplContext::default_instance_ + 24);
  proto::gnss::Emergency::Configuration::MergeFrom(v14, v15);
  v5 = *((_DWORD *)a2 + 13);
  if ((v5 & 0x20) != 0)
    goto LABEL_29;
LABEL_11:
  if ((v5 & 0x40) == 0)
    goto LABEL_12;
LABEL_32:
  v18 = *((_BYTE *)a2 + 37);
  *((_DWORD *)this + 13) |= 0x40u;
  *((_BYTE *)this + 37) = v18;
  v5 = *((_DWORD *)a2 + 13);
  if ((v5 & 0x80) != 0)
  {
LABEL_13:
    v7 = *((_BYTE *)a2 + 38);
    *((_DWORD *)this + 13) |= 0x80u;
    *((_BYTE *)this + 38) = v7;
    v5 = *((_DWORD *)a2 + 13);
  }
LABEL_14:
  if ((v5 & 0x100) != 0)
  {
    v8 = *((_BYTE *)a2 + 39);
    *((_DWORD *)this + 13) |= 0x100u;
    *((_BYTE *)this + 39) = v8;
  }
}

void sub_100060D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

_QWORD *proto::gnss::Emergency::SuplContext::SharedDtor(_QWORD *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;

  v1 = this[1];
  if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    operator delete();
  }
  v3 = this[2];
  if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v3 != 0)
  {
    if (*(char *)(v3 + 23) < 0)
      operator delete(*(void **)v3);
    operator delete();
  }
  v5 = this[5];
  if ((_UNKNOWN *)v5 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    operator delete();
  }
  if ((_QWORD *)proto::gnss::Emergency::SuplContext::default_instance_ != this)
  {
    this = (_QWORD *)this[3];
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void proto::gnss::Emergency::SuplContext::~SuplContext(proto::gnss::Emergency::SuplContext *this)
{
  *(_QWORD *)this = off_1000F48F8;
  proto::gnss::Emergency::SuplContext::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = off_1000F48F8;
  proto::gnss::Emergency::SuplContext::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

void proto::gnss::Emergency::SuplContext::New(proto::gnss::Emergency::SuplContext *this)
{
  operator new();
}

uint64_t proto::gnss::Emergency::SuplContext::Clear(uint64_t this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_DWORD *)(this + 52);
  if ((_BYTE)v1)
  {
    *(_DWORD *)(this + 32) = 0;
    if ((v1 & 2) != 0)
    {
      v2 = *(_QWORD *)(this + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)v2 = 0;
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
    *(_BYTE *)(this + 36) = 0;
    if ((*(_BYTE *)(this + 52) & 8) != 0)
    {
      v3 = *(_QWORD *)(this + 16);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    v4 = *(_DWORD *)(this + 52);
    if ((v4 & 0x10) != 0)
    {
      v5 = *(_QWORD *)(this + 24);
      if (v5)
      {
        if (*(_BYTE *)(v5 + 24))
        {
          *(_WORD *)(v5 + 16) = 0;
          *(_QWORD *)(v5 + 8) = 0;
        }
        *(_DWORD *)(v5 + 24) = 0;
        v4 = *(_DWORD *)(this + 52);
      }
    }
    if ((v4 & 0x20) != 0)
    {
      v6 = *(_QWORD *)(this + 40);
      if ((_UNKNOWN *)v6 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v6 + 23) < 0)
        {
          **(_BYTE **)v6 = 0;
          *(_QWORD *)(v6 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v6 = 0;
          *(_BYTE *)(v6 + 23) = 0;
        }
      }
    }
    *(_WORD *)(this + 37) = 0;
    v1 = *(_DWORD *)(this + 52);
  }
  if ((v1 & 0xFF00) != 0)
    *(_BYTE *)(this + 39) = 0;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

uint64_t proto::gnss::Emergency::SuplContext::MergePartialFromCodedStream(proto::gnss::Emergency::SuplContext *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  unint64_t v9;
  char *v10;
  _BYTE *v11;
  int v12;
  unint64_t v13;
  char *v14;
  int v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t result;
  void *v21;
  _BYTE *v22;
  unsigned int v23;
  _BYTE *v24;
  void *v25;
  _BYTE *v26;
  proto::gnss::Emergency::Configuration *v27;
  char *v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  BOOL v34;
  int v35;
  _BYTE *v36;
  void *v37;
  _BYTE *v38;
  unsigned int v39;
  _BYTE *v40;
  unsigned int v41;
  _BYTE *v42;
  unsigned int v43;
  unsigned __int8 *v44;
  unsigned int v45;

  v5 = (unsigned int *)((char *)this + 32);
  while (2)
  {
    v6 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v6 >= *((_QWORD *)a2 + 2) || *v6 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      *((_QWORD *)a2 + 1) = v6 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v10 = (char *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v11 = (_BYTE *)*((_QWORD *)a2 + 1);
          v9 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v5 = *v10;
          v11 = v10 + 1;
          *((_QWORD *)a2 + 1) = v11;
        }
        v12 = *((_DWORD *)this + 13) | 1;
        *((_DWORD *)this + 13) = v12;
        if ((unint64_t)v11 < v9 && *v11 == 18)
        {
          *((_QWORD *)a2 + 1) = v11 + 1;
          goto LABEL_37;
        }
        continue;
      case 2u:
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_28;
        v12 = *((_DWORD *)this + 13);
LABEL_37:
        *((_DWORD *)this + 13) = v12 | 2;
        v21 = (void *)*((_QWORD *)this + 1);
        if (v21 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(a2, v21);
        if (!(_DWORD)result)
          return result;
        v22 = (_BYTE *)*((_QWORD *)a2 + 1);
        v13 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v22 >= v13 || *v22 != 24)
          continue;
        v14 = v22 + 1;
        *((_QWORD *)a2 + 1) = v14;
LABEL_43:
        v45 = 0;
        if ((unint64_t)v14 >= v13 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v45);
          if (!(_DWORD)result)
            return result;
          v23 = v45;
          v24 = (_BYTE *)*((_QWORD *)a2 + 1);
          v13 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v23 = *v14;
          v24 = v14 + 1;
          *((_QWORD *)a2 + 1) = v24;
        }
        *((_BYTE *)this + 36) = v23 != 0;
        v15 = *((_DWORD *)this + 13) | 4;
        *((_DWORD *)this + 13) = v15;
        if ((unint64_t)v24 >= v13 || *v24 != 34)
          continue;
        *((_QWORD *)a2 + 1) = v24 + 1;
LABEL_51:
        *((_DWORD *)this + 13) = v15 | 8;
        v25 = (void *)*((_QWORD *)this + 2);
        if (v25 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(a2, v25);
        if (!(_DWORD)result)
          return result;
        v26 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v26 >= *((_QWORD *)a2 + 2) || *v26 != 42)
          continue;
        *((_QWORD *)a2 + 1) = v26 + 1;
LABEL_57:
        *((_DWORD *)this + 13) |= 0x10u;
        v27 = (proto::gnss::Emergency::Configuration *)*((_QWORD *)this + 3);
        if (!v27)
          operator new();
        v45 = 0;
        v28 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v28 >= *((_QWORD *)a2 + 2) || *v28 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v45))return 0;
        }
        else
        {
          v45 = *v28;
          *((_QWORD *)a2 + 1) = v28 + 1;
        }
        v29 = *((_DWORD *)a2 + 14);
        v30 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v29 + 1;
        if (v29 < v30)
        {
          v31 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v45);
          if (proto::gnss::Emergency::Configuration::MergePartialFromCodedStream(v27, a2, v32))
          {
            if (*((_BYTE *)a2 + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v31);
              v33 = *((_DWORD *)a2 + 14);
              v34 = __OFSUB__(v33, 1);
              v35 = v33 - 1;
              if (v35 < 0 == v34)
                *((_DWORD *)a2 + 14) = v35;
              v36 = (_BYTE *)*((_QWORD *)a2 + 1);
              if ((unint64_t)v36 < *((_QWORD *)a2 + 2) && *v36 == 50)
              {
                *((_QWORD *)a2 + 1) = v36 + 1;
LABEL_71:
                *((_DWORD *)this + 13) |= 0x20u;
                v37 = (void *)*((_QWORD *)this + 5);
                if (v37 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
                  operator new();
                result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(a2, v37);
                if (!(_DWORD)result)
                  return result;
                v38 = (_BYTE *)*((_QWORD *)a2 + 1);
                v16 = *((_QWORD *)a2 + 2);
                if ((unint64_t)v38 < v16 && *v38 == 56)
                {
                  v17 = v38 + 1;
                  *((_QWORD *)a2 + 1) = v17;
LABEL_77:
                  v45 = 0;
                  if ((unint64_t)v17 >= v16 || *v17 < 0)
                  {
                    result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v45);
                    if (!(_DWORD)result)
                      return result;
                    v39 = v45;
                    v40 = (_BYTE *)*((_QWORD *)a2 + 1);
                    v16 = *((_QWORD *)a2 + 2);
                  }
                  else
                  {
                    v39 = *v17;
                    v40 = v17 + 1;
                    *((_QWORD *)a2 + 1) = v40;
                  }
                  *((_BYTE *)this + 37) = v39 != 0;
                  *((_DWORD *)this + 13) |= 0x40u;
                  if ((unint64_t)v40 < v16 && *v40 == 64)
                  {
                    v18 = v40 + 1;
                    *((_QWORD *)a2 + 1) = v18;
LABEL_85:
                    v45 = 0;
                    if ((unint64_t)v18 >= v16 || *v18 < 0)
                    {
                      result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v45);
                      if (!(_DWORD)result)
                        return result;
                      v41 = v45;
                      v42 = (_BYTE *)*((_QWORD *)a2 + 1);
                      v16 = *((_QWORD *)a2 + 2);
                    }
                    else
                    {
                      v41 = *v18;
                      v42 = v18 + 1;
                      *((_QWORD *)a2 + 1) = v42;
                    }
                    *((_BYTE *)this + 38) = v41 != 0;
                    *((_DWORD *)this + 13) |= 0x80u;
                    if ((unint64_t)v42 < v16 && *v42 == 72)
                    {
                      v19 = v42 + 1;
                      *((_QWORD *)a2 + 1) = v19;
LABEL_93:
                      v45 = 0;
                      if ((unint64_t)v19 >= v16 || *v19 < 0)
                      {
                        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v45);
                        if (!(_DWORD)result)
                          return result;
                        v43 = v45;
                        v44 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                        v16 = *((_QWORD *)a2 + 2);
                      }
                      else
                      {
                        v43 = *v19;
                        v44 = (unsigned __int8 *)(v19 + 1);
                        *((_QWORD *)a2 + 1) = v44;
                      }
                      *((_BYTE *)this + 39) = v43 != 0;
                      *((_DWORD *)this + 13) |= 0x100u;
                      if (v44 == (unsigned __int8 *)v16
                        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
                      {
                        *((_DWORD *)a2 + 8) = 0;
                        result = 1;
                        *((_BYTE *)a2 + 36) = 1;
                        return result;
                      }
                    }
                  }
                }
              }
              continue;
            }
          }
        }
        return 0;
      case 3u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v14 = (char *)*((_QWORD *)a2 + 1);
        v13 = *((_QWORD *)a2 + 2);
        goto LABEL_43;
      case 4u:
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_28;
        v15 = *((_DWORD *)this + 13);
        goto LABEL_51;
      case 5u:
        v8 = TagFallback & 7;
        if (v8 == 2)
          goto LABEL_57;
        goto LABEL_28;
      case 6u:
        v8 = TagFallback & 7;
        if (v8 == 2)
          goto LABEL_71;
        goto LABEL_28;
      case 7u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v17 = (char *)*((_QWORD *)a2 + 1);
        v16 = *((_QWORD *)a2 + 2);
        goto LABEL_77;
      case 8u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v18 = (char *)*((_QWORD *)a2 + 1);
        v16 = *((_QWORD *)a2 + 2);
        goto LABEL_85;
      case 9u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v19 = (char *)*((_QWORD *)a2 + 1);
        v16 = *((_QWORD *)a2 + 2);
        goto LABEL_93;
      default:
        v8 = TagFallback & 7;
LABEL_28:
        if (v8 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t proto::gnss::Emergency::SuplContext::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = this;
  v6 = *(_DWORD *)(this + 52);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(this + 32), a2, a4);
    v6 = *(_DWORD *)(v5 + 52);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(2, *(_QWORD *)(v5 + 8), a2);
  v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 36), (BOOL)a2, a4);
  v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(4, *(_QWORD *)(v5 + 16), a2);
  v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_15:
  v7 = *(_QWORD *)(v5 + 24);
  if (!v7)
    v7 = *(_QWORD *)(proto::gnss::Emergency::SuplContext::default_instance_ + 24);
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v7, a2, a4);
  v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(6, *(_QWORD *)(v5 + 40), a2);
  v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(unsigned __int8 *)(v5 + 37), (BOOL)a2, a4);
  v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(unsigned __int8 *)(v5 + 39), (BOOL)a2, a4);
  }
LABEL_20:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(unsigned __int8 *)(v5 + 38), (BOOL)a2, a4);
  if ((*(_DWORD *)(v5 + 52) & 0x100) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(unsigned __int8 *)(v5 + 39), (BOOL)a2, a4);
  return this;
}

uint64_t proto::gnss::Emergency::SuplContext::ByteSize(proto::gnss::Emergency::SuplContext *this, unsigned int a2)
{
  int v3;
  int v4;
  unsigned int v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t result;

  v3 = *((_DWORD *)this + 13);
  if (!(_BYTE)v3)
  {
    v5 = 0;
    goto LABEL_57;
  }
  if ((v3 & 1) != 0)
  {
    v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
    if (v6 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
      v3 = *((_DWORD *)this + 13);
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
  }
  else
  {
    v4 = 0;
    if ((v3 & 2) == 0)
      goto LABEL_19;
  }
  v7 = *((_QWORD *)this + 1);
  v8 = *(unsigned __int8 *)(v7 + 23);
  v9 = v8;
  v10 = *(_QWORD *)(v7 + 8);
  if ((v8 & 0x80u) == 0)
    v11 = *(unsigned __int8 *)(v7 + 23);
  else
    v11 = v10;
  if (v11 >= 0x80)
  {
    v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v11, a2);
    v8 = *(unsigned __int8 *)(v7 + 23);
    v10 = *(_QWORD *)(v7 + 8);
    v3 = *((_DWORD *)this + 13);
    v9 = *(_BYTE *)(v7 + 23);
  }
  else
  {
    v12 = 1;
  }
  if (v9 < 0)
    v8 = v10;
  v4 += v12 + v8 + 1;
LABEL_19:
  if ((v3 & 4) != 0)
    v4 += 2;
  if ((v3 & 8) == 0)
  {
    if ((v3 & 0x10) == 0)
      goto LABEL_23;
LABEL_34:
    v19 = *((_QWORD *)this + 3);
    if (!v19)
      v19 = *(_QWORD *)(proto::gnss::Emergency::SuplContext::default_instance_ + 24);
    v20 = *(_DWORD *)(v19 + 24);
    v21 = 2 * (v20 & 1);
    if ((v20 & 2) != 0)
      v21 += 2;
    if ((v20 & 4) != 0)
      v21 |= 9u;
    if (*(_DWORD *)(v19 + 24))
      v22 = v21;
    else
      v22 = 0;
    *(_DWORD *)(v19 + 20) = v22;
    v4 += v22 + 2;
    v3 = *((_DWORD *)this + 13);
    if ((v3 & 0x20) == 0)
      goto LABEL_53;
    goto LABEL_44;
  }
  v13 = *((_QWORD *)this + 2);
  v14 = *(unsigned __int8 *)(v13 + 23);
  v15 = v14;
  v16 = *(_QWORD *)(v13 + 8);
  if ((v14 & 0x80u) == 0)
    v17 = *(unsigned __int8 *)(v13 + 23);
  else
    v17 = v16;
  if (v17 >= 0x80)
  {
    v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v17, a2);
    v14 = *(unsigned __int8 *)(v13 + 23);
    v16 = *(_QWORD *)(v13 + 8);
    v3 = *((_DWORD *)this + 13);
    v15 = *(_BYTE *)(v13 + 23);
  }
  else
  {
    v18 = 1;
  }
  if (v15 < 0)
    v14 = v16;
  v4 += v18 + v14 + 1;
  if ((v3 & 0x10) != 0)
    goto LABEL_34;
LABEL_23:
  if ((v3 & 0x20) != 0)
  {
LABEL_44:
    v23 = *((_QWORD *)this + 5);
    v24 = *(unsigned __int8 *)(v23 + 23);
    v25 = v24;
    v26 = *(_QWORD *)(v23 + 8);
    if ((v24 & 0x80u) == 0)
      v27 = *(unsigned __int8 *)(v23 + 23);
    else
      v27 = v26;
    if (v27 >= 0x80)
    {
      v28 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v27, a2);
      v24 = *(unsigned __int8 *)(v23 + 23);
      v26 = *(_QWORD *)(v23 + 8);
      v3 = *((_DWORD *)this + 13);
      v25 = *(_BYTE *)(v23 + 23);
    }
    else
    {
      v28 = 1;
    }
    if (v25 < 0)
      v24 = v26;
    v4 += v28 + v24 + 1;
  }
LABEL_53:
  v5 = v4 + 2;
  if ((v3 & 0x40) == 0)
    v5 = v4;
  if ((v3 & 0x80) != 0)
    v5 += 2;
LABEL_57:
  if ((v3 & 0x100) != 0)
    result = v5 + 2;
  else
    result = v5;
  *((_DWORD *)this + 12) = result;
  return result;
}

void proto::gnss::Emergency::SuplContext::CheckTypeAndMergeFrom(proto::gnss::Emergency::SuplContext *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  proto::gnss::Emergency::SuplContext::MergeFrom(this, lpsrc);
}

uint64_t proto::gnss::Emergency::SuplContext::IsInitialized(proto::gnss::Emergency::SuplContext *this)
{
  return 1;
}

_QWORD *proto::gnss::Emergency::SuplContext::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.SuplContext");
}

void proto::gnss::Emergency::SessionStatus::MergeFrom(proto::gnss::Emergency::SessionStatus *this, const proto::gnss::Emergency::SessionStatus *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  _BYTE v25[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v25, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 6944);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v25, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v24, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v25);
  }
  v5 = *((_DWORD *)a2 + 26);
  if (!(_BYTE)v5)
    goto LABEL_20;
  if ((v5 & 1) != 0)
  {
    v6 = *((_DWORD *)a2 + 2);
    *((_DWORD *)this + 26) |= 1u;
    *((_DWORD *)this + 2) = v6;
    v5 = *((_DWORD *)a2 + 26);
  }
  if ((v5 & 2) != 0)
  {
    v7 = *((_DWORD *)a2 + 3);
    if (v7 >= 0x12)
      __assert_rtn("set_pos_method", "GnssEmergencyTypes.pb.h", 15524, "::proto::gnss::Emergency::PositionMethod_IsValid(value)");
    *((_DWORD *)this + 26) |= 2u;
    *((_DWORD *)this + 3) = v7;
    v5 = *((_DWORD *)a2 + 26);
  }
  if ((v5 & 4) != 0)
  {
    v8 = *((_DWORD *)a2 + 4);
    if (v8 >= 0x21)
      __assert_rtn("set_status", "GnssEmergencyTypes.pb.h", 15547, "::proto::gnss::Emergency::Status_IsValid(value)");
    *((_DWORD *)this + 26) |= 4u;
    *((_DWORD *)this + 4) = v8;
    v5 = *((_DWORD *)a2 + 26);
  }
  if ((v5 & 8) != 0)
  {
    v9 = *((_DWORD *)a2 + 5);
    if (v9 >= 0x18)
      __assert_rtn("set_end_cause", "GnssEmergencyTypes.pb.h", 15570, "::proto::gnss::Emergency::EndCause_IsValid(value)");
    *((_DWORD *)this + 26) |= 8u;
    *((_DWORD *)this + 5) = v9;
    v5 = *((_DWORD *)a2 + 26);
  }
  if ((v5 & 0x10) == 0)
  {
    if ((v5 & 0x20) == 0)
      goto LABEL_17;
LABEL_48:
    v22 = *((_QWORD *)a2 + 4);
    *((_DWORD *)this + 26) |= 0x20u;
    *((_QWORD *)this + 4) = v22;
    v5 = *((_DWORD *)a2 + 26);
    if ((v5 & 0x40) == 0)
    {
LABEL_18:
      if ((v5 & 0x80) == 0)
        goto LABEL_20;
      goto LABEL_19;
    }
    goto LABEL_49;
  }
  v21 = *((_QWORD *)a2 + 3);
  *((_DWORD *)this + 26) |= 0x10u;
  *((_QWORD *)this + 3) = v21;
  v5 = *((_DWORD *)a2 + 26);
  if ((v5 & 0x20) != 0)
    goto LABEL_48;
LABEL_17:
  if ((v5 & 0x40) == 0)
    goto LABEL_18;
LABEL_49:
  v23 = *((_QWORD *)a2 + 5);
  *((_DWORD *)this + 26) |= 0x40u;
  *((_QWORD *)this + 5) = v23;
  v5 = *((_DWORD *)a2 + 26);
  if ((v5 & 0x80) != 0)
  {
LABEL_19:
    v10 = *((_QWORD *)a2 + 6);
    *((_DWORD *)this + 26) |= 0x80u;
    *((_QWORD *)this + 6) = v10;
    v5 = *((_DWORD *)a2 + 26);
  }
LABEL_20:
  if ((v5 & 0xFF00) == 0)
    return;
  if ((v5 & 0x100) != 0)
  {
    v11 = *((_QWORD *)a2 + 7);
    *((_DWORD *)this + 26) |= 0x100u;
    *((_QWORD *)this + 7) = v11;
    v5 = *((_DWORD *)a2 + 26);
    if ((v5 & 0x200) == 0)
    {
LABEL_23:
      if ((v5 & 0x400) == 0)
        goto LABEL_24;
      goto LABEL_32;
    }
  }
  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_23;
  }
  v12 = *((_QWORD *)a2 + 8);
  *((_DWORD *)this + 26) |= 0x200u;
  *((_QWORD *)this + 8) = v12;
  v5 = *((_DWORD *)a2 + 26);
  if ((v5 & 0x400) == 0)
  {
LABEL_24:
    if ((v5 & 0x800) == 0)
      goto LABEL_25;
    goto LABEL_33;
  }
LABEL_32:
  v13 = *((_QWORD *)a2 + 9);
  *((_DWORD *)this + 26) |= 0x400u;
  *((_QWORD *)this + 9) = v13;
  v5 = *((_DWORD *)a2 + 26);
  if ((v5 & 0x800) == 0)
  {
LABEL_25:
    if ((v5 & 0x1000) == 0)
      goto LABEL_26;
    goto LABEL_34;
  }
LABEL_33:
  v14 = *((_BYTE *)a2 + 96);
  *((_DWORD *)this + 26) |= 0x800u;
  *((_BYTE *)this + 96) = v14;
  v5 = *((_DWORD *)a2 + 26);
  if ((v5 & 0x1000) == 0)
  {
LABEL_26:
    if ((v5 & 0x2000) == 0)
      goto LABEL_27;
    goto LABEL_35;
  }
LABEL_34:
  v15 = *((_BYTE *)a2 + 97);
  *((_DWORD *)this + 26) |= 0x1000u;
  *((_BYTE *)this + 97) = v15;
  v5 = *((_DWORD *)a2 + 26);
  if ((v5 & 0x2000) == 0)
  {
LABEL_27:
    if ((v5 & 0x4000) == 0)
      goto LABEL_28;
    goto LABEL_36;
  }
LABEL_35:
  v16 = *((_BYTE *)a2 + 98);
  *((_DWORD *)this + 26) |= 0x2000u;
  *((_BYTE *)this + 98) = v16;
  v5 = *((_DWORD *)a2 + 26);
  if ((v5 & 0x4000) == 0)
  {
LABEL_28:
    if ((v5 & 0x8000) == 0)
      return;
    goto LABEL_41;
  }
LABEL_36:
  *((_DWORD *)this + 26) |= 0x4000u;
  v17 = *((_QWORD *)this + 10);
  if (!v17)
    operator new();
  v18 = *((_QWORD *)a2 + 10);
  if (!v18)
    v18 = *(_QWORD *)(proto::gnss::Emergency::SessionStatus::default_instance_ + 80);
  sub_100062C6C(v17, v18);
  if ((*((_DWORD *)a2 + 26) & 0x8000) != 0)
  {
LABEL_41:
    *((_DWORD *)this + 26) |= 0x8000u;
    v19 = *((_QWORD *)this + 11);
    if (!v19)
      operator new();
    v20 = *((_QWORD *)a2 + 11);
    if (!v20)
      v20 = *(_QWORD *)(proto::gnss::Emergency::SessionStatus::default_instance_ + 88);
    sub_100062DD4(v19, v20);
  }
}

void sub_100061CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100061D10(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if ((_QWORD *)proto::gnss::Emergency::SessionStatus::default_instance_ != result)
  {
    v1 = result;
    v2 = result[10];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    result = (_QWORD *)v1[11];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void proto::gnss::Emergency::SessionStatus::~SessionStatus(proto::gnss::Emergency::SessionStatus *this)
{
  *(_QWORD *)this = off_1000F4970;
  sub_100061D10(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = off_1000F4970;
  sub_100061D10(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

void proto::gnss::Emergency::SessionStatus::New(proto::gnss::Emergency::SessionStatus *this)
{
  operator new();
}

uint64_t proto::gnss::Emergency::SessionStatus::Clear(uint64_t this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_DWORD *)(this + 104);
  if ((_BYTE)v1)
  {
    *(_OWORD *)(this + 40) = 0u;
    *(_OWORD *)(this + 24) = 0u;
    *(_OWORD *)(this + 8) = 0u;
  }
  if ((v1 & 0xFF00) != 0)
  {
    *(_WORD *)(this + 96) = 0;
    *(_BYTE *)(this + 98) = 0;
    *(_QWORD *)(this + 64) = 0;
    *(_QWORD *)(this + 72) = 0;
    *(_QWORD *)(this + 56) = 0;
    if ((v1 & 0x4000) != 0)
    {
      v2 = *(_QWORD *)(this + 80);
      if (v2)
      {
        if (*(_BYTE *)(v2 + 60))
        {
          *(_OWORD *)(v2 + 40) = 0u;
          *(_OWORD *)(v2 + 24) = 0u;
          *(_OWORD *)(v2 + 8) = 0u;
        }
        *(_DWORD *)(v2 + 60) = 0;
        v1 = *(_DWORD *)(this + 104);
      }
    }
    if ((v1 & 0x8000) != 0)
    {
      v3 = *(_QWORD *)(this + 88);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 28))
        {
          *(_QWORD *)(v3 + 8) = 0;
          *(_QWORD *)(v3 + 16) = 0;
        }
        *(_DWORD *)(v3 + 28) = 0;
      }
    }
  }
  *(_DWORD *)(this + 104) = 0;
  return this;
}

uint64_t proto::gnss::Emergency::NetworkReferenceLocation::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 60))
  {
    *(_OWORD *)(this + 40) = 0u;
    *(_OWORD *)(this + 24) = 0u;
    *(_OWORD *)(this + 8) = 0u;
  }
  *(_DWORD *)(this + 60) = 0;
  return this;
}

uint64_t proto::gnss::Emergency::NetworkReferenceTime::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 28))
  {
    *(_QWORD *)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
  }
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t proto::gnss::Emergency::SessionStatus::MergePartialFromCodedStream(proto::gnss::Emergency::SessionStatus *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  unint64_t v9;
  char *v10;
  _BYTE *v11;
  char *v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  int v21;
  uint64_t result;
  unsigned int v23;
  _BYTE *v24;
  unsigned int v25;
  _BYTE *v26;
  unsigned int v27;
  _BYTE *v28;
  _BYTE *v29;
  _BYTE *v30;
  _BYTE *v31;
  _BYTE *v32;
  _BYTE *v33;
  _BYTE *v34;
  _BYTE *v35;
  unsigned int v36;
  _BYTE *v37;
  unsigned int v38;
  _BYTE *v39;
  unsigned int v40;
  _BYTE *v41;
  proto::gnss::Emergency::NetworkReferenceLocation *v42;
  char *v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  int v48;
  BOOL v49;
  int v50;
  unsigned __int8 *v51;
  proto::gnss::Emergency::NetworkReferenceTime *v52;
  char *v53;
  int v54;
  int v55;
  int v56;
  unsigned int v57;
  int v58;
  int v59;
  unsigned int v60[2];

  v5 = (unsigned int *)((char *)this + 8);
  while (2)
  {
    v6 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v6 >= *((_QWORD *)a2 + 2) || *v6 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      *((_QWORD *)a2 + 1) = v6 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_42;
        v10 = (char *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v11 = (_BYTE *)*((_QWORD *)a2 + 1);
          v9 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v5 = *v10;
          v11 = v10 + 1;
          *((_QWORD *)a2 + 1) = v11;
        }
        *((_DWORD *)this + 26) |= 1u;
        if ((unint64_t)v11 < v9 && *v11 == 16)
        {
          v12 = v11 + 1;
          *((_QWORD *)a2 + 1) = v12;
          goto LABEL_50;
        }
        continue;
      case 2u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_42;
        v12 = (char *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
LABEL_50:
        v60[0] = 0;
        if ((unint64_t)v12 >= v9 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v60);
          if (!(_DWORD)result)
            return result;
          v23 = v60[0];
        }
        else
        {
          v23 = *v12;
          *((_QWORD *)a2 + 1) = v12 + 1;
        }
        if (v23 <= 0x11)
        {
          *((_DWORD *)this + 26) |= 2u;
          *((_DWORD *)this + 3) = v23;
        }
        v24 = (_BYTE *)*((_QWORD *)a2 + 1);
        v13 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v24 >= v13 || *v24 != 24)
          continue;
        v14 = v24 + 1;
        *((_QWORD *)a2 + 1) = v14;
LABEL_60:
        v60[0] = 0;
        if ((unint64_t)v14 >= v13 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v60);
          if (!(_DWORD)result)
            return result;
          v25 = v60[0];
        }
        else
        {
          v25 = *v14;
          *((_QWORD *)a2 + 1) = v14 + 1;
        }
        if (v25 <= 0x20)
        {
          *((_DWORD *)this + 26) |= 4u;
          *((_DWORD *)this + 4) = v25;
        }
        v26 = (_BYTE *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v26 >= v15 || *v26 != 32)
          continue;
        v16 = v26 + 1;
        *((_QWORD *)a2 + 1) = v16;
LABEL_70:
        v60[0] = 0;
        if ((unint64_t)v16 >= v15 || *v16 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v60);
          if (!(_DWORD)result)
            return result;
          v27 = v60[0];
        }
        else
        {
          v27 = *v16;
          *((_QWORD *)a2 + 1) = v16 + 1;
        }
        if (v27 <= 0x17)
        {
          *((_DWORD *)this + 26) |= 8u;
          *((_DWORD *)this + 5) = v27;
        }
        v28 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v28 >= *((_QWORD *)a2 + 2) || *v28 != 41)
          continue;
        *((_QWORD *)a2 + 1) = v28 + 1;
LABEL_80:
        *(_QWORD *)v60 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v60) & 1) == 0)return 0;
        *((_QWORD *)this + 3) = *(_QWORD *)v60;
        *((_DWORD *)this + 26) |= 0x10u;
        v29 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v29 >= *((_QWORD *)a2 + 2) || *v29 != 49)
          continue;
        *((_QWORD *)a2 + 1) = v29 + 1;
LABEL_84:
        *(_QWORD *)v60 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v60) & 1) == 0)return 0;
        *((_QWORD *)this + 4) = *(_QWORD *)v60;
        *((_DWORD *)this + 26) |= 0x20u;
        v30 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v30 >= *((_QWORD *)a2 + 2) || *v30 != 57)
          continue;
        *((_QWORD *)a2 + 1) = v30 + 1;
LABEL_88:
        *(_QWORD *)v60 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v60) & 1) == 0)return 0;
        *((_QWORD *)this + 5) = *(_QWORD *)v60;
        *((_DWORD *)this + 26) |= 0x40u;
        v31 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v31 >= *((_QWORD *)a2 + 2) || *v31 != 65)
          continue;
        *((_QWORD *)a2 + 1) = v31 + 1;
LABEL_92:
        *(_QWORD *)v60 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v60) & 1) == 0)return 0;
        *((_QWORD *)this + 6) = *(_QWORD *)v60;
        *((_DWORD *)this + 26) |= 0x80u;
        v32 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v32 >= *((_QWORD *)a2 + 2) || *v32 != 73)
          continue;
        *((_QWORD *)a2 + 1) = v32 + 1;
LABEL_96:
        *(_QWORD *)v60 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v60) & 1) == 0)return 0;
        *((_QWORD *)this + 7) = *(_QWORD *)v60;
        *((_DWORD *)this + 26) |= 0x100u;
        v33 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v33 >= *((_QWORD *)a2 + 2) || *v33 != 81)
          continue;
        *((_QWORD *)a2 + 1) = v33 + 1;
LABEL_100:
        *(_QWORD *)v60 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v60) & 1) == 0)return 0;
        *((_QWORD *)this + 8) = *(_QWORD *)v60;
        *((_DWORD *)this + 26) |= 0x200u;
        v34 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v34 >= *((_QWORD *)a2 + 2) || *v34 != 89)
          continue;
        *((_QWORD *)a2 + 1) = v34 + 1;
LABEL_104:
        *(_QWORD *)v60 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v60) & 1) == 0)return 0;
        *((_QWORD *)this + 9) = *(_QWORD *)v60;
        *((_DWORD *)this + 26) |= 0x400u;
        v35 = (_BYTE *)*((_QWORD *)a2 + 1);
        v17 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v35 >= v17 || *v35 != 96)
          continue;
        v18 = v35 + 1;
        *((_QWORD *)a2 + 1) = v18;
LABEL_108:
        v60[0] = 0;
        if ((unint64_t)v18 >= v17 || *v18 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v60);
          if (!(_DWORD)result)
            return result;
          v36 = v60[0];
          v37 = (_BYTE *)*((_QWORD *)a2 + 1);
          v17 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v36 = *v18;
          v37 = v18 + 1;
          *((_QWORD *)a2 + 1) = v37;
        }
        *((_BYTE *)this + 96) = v36 != 0;
        *((_DWORD *)this + 26) |= 0x800u;
        if ((unint64_t)v37 >= v17 || *v37 != 104)
          continue;
        v19 = v37 + 1;
        *((_QWORD *)a2 + 1) = v19;
LABEL_116:
        v60[0] = 0;
        if ((unint64_t)v19 >= v17 || *v19 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v60);
          if (!(_DWORD)result)
            return result;
          v38 = v60[0];
          v39 = (_BYTE *)*((_QWORD *)a2 + 1);
          v17 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v38 = *v19;
          v39 = v19 + 1;
          *((_QWORD *)a2 + 1) = v39;
        }
        *((_BYTE *)this + 97) = v38 != 0;
        *((_DWORD *)this + 26) |= 0x1000u;
        if ((unint64_t)v39 >= v17 || *v39 != 112)
          continue;
        v20 = v39 + 1;
        *((_QWORD *)a2 + 1) = v20;
LABEL_124:
        v60[0] = 0;
        if ((unint64_t)v20 >= v17 || *v20 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v60);
          if (!(_DWORD)result)
            return result;
          v40 = v60[0];
          v41 = (_BYTE *)*((_QWORD *)a2 + 1);
          v17 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v40 = *v20;
          v41 = v20 + 1;
          *((_QWORD *)a2 + 1) = v41;
        }
        *((_BYTE *)this + 98) = v40 != 0;
        v21 = *((_DWORD *)this + 26) | 0x2000;
        *((_DWORD *)this + 26) = v21;
        if ((unint64_t)v41 >= v17 || *v41 != 122)
          continue;
        *((_QWORD *)a2 + 1) = v41 + 1;
LABEL_132:
        *((_DWORD *)this + 26) = v21 | 0x4000;
        v42 = (proto::gnss::Emergency::NetworkReferenceLocation *)*((_QWORD *)this + 10);
        if (!v42)
          operator new();
        v60[0] = 0;
        v43 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v43 >= *((_QWORD *)a2 + 2) || *v43 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v60))return 0;
        }
        else
        {
          v60[0] = *v43;
          *((_QWORD *)a2 + 1) = v43 + 1;
        }
        v44 = *((_DWORD *)a2 + 14);
        v45 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v44 + 1;
        if (v44 >= v45)
          return 0;
        v46 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v60[0]);
        if (!proto::gnss::Emergency::NetworkReferenceLocation::MergePartialFromCodedStream(v42, a2, v47)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v46);
        v48 = *((_DWORD *)a2 + 14);
        v49 = __OFSUB__(v48, 1);
        v50 = v48 - 1;
        if (v50 < 0 == v49)
          *((_DWORD *)a2 + 14) = v50;
        v51 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v51 <= 1 || *v51 != 130 || v51[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v51 + 2;
LABEL_147:
        *((_DWORD *)this + 26) |= 0x8000u;
        v52 = (proto::gnss::Emergency::NetworkReferenceTime *)*((_QWORD *)this + 11);
        if (!v52)
          operator new();
        v60[0] = 0;
        v53 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v53 >= *((_QWORD *)a2 + 2) || *v53 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v60))return 0;
        }
        else
        {
          v60[0] = *v53;
          *((_QWORD *)a2 + 1) = v53 + 1;
        }
        v54 = *((_DWORD *)a2 + 14);
        v55 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v54 + 1;
        if (v54 < v55)
        {
          v56 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v60[0]);
          if (proto::gnss::Emergency::NetworkReferenceTime::MergePartialFromCodedStream(v52, a2, v57))
          {
            if (*((_BYTE *)a2 + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v56);
              v58 = *((_DWORD *)a2 + 14);
              v49 = __OFSUB__(v58, 1);
              v59 = v58 - 1;
              if (v59 < 0 == v49)
                *((_DWORD *)a2 + 14) = v59;
              if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
                && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
              {
                *((_DWORD *)a2 + 8) = 0;
                result = 1;
                *((_BYTE *)a2 + 36) = 1;
                return result;
              }
              continue;
            }
          }
        }
        return 0;
      case 3u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_42;
        v14 = (char *)*((_QWORD *)a2 + 1);
        v13 = *((_QWORD *)a2 + 2);
        goto LABEL_60;
      case 4u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_42;
        v16 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_70;
      case 5u:
        v8 = TagFallback & 7;
        if (v8 == 1)
          goto LABEL_80;
        goto LABEL_42;
      case 6u:
        v8 = TagFallback & 7;
        if (v8 == 1)
          goto LABEL_84;
        goto LABEL_42;
      case 7u:
        v8 = TagFallback & 7;
        if (v8 == 1)
          goto LABEL_88;
        goto LABEL_42;
      case 8u:
        v8 = TagFallback & 7;
        if (v8 == 1)
          goto LABEL_92;
        goto LABEL_42;
      case 9u:
        v8 = TagFallback & 7;
        if (v8 == 1)
          goto LABEL_96;
        goto LABEL_42;
      case 0xAu:
        v8 = TagFallback & 7;
        if (v8 == 1)
          goto LABEL_100;
        goto LABEL_42;
      case 0xBu:
        v8 = TagFallback & 7;
        if (v8 == 1)
          goto LABEL_104;
        goto LABEL_42;
      case 0xCu:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_42;
        v18 = (char *)*((_QWORD *)a2 + 1);
        v17 = *((_QWORD *)a2 + 2);
        goto LABEL_108;
      case 0xDu:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_42;
        v19 = (char *)*((_QWORD *)a2 + 1);
        v17 = *((_QWORD *)a2 + 2);
        goto LABEL_116;
      case 0xEu:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_42;
        v20 = (char *)*((_QWORD *)a2 + 1);
        v17 = *((_QWORD *)a2 + 2);
        goto LABEL_124;
      case 0xFu:
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_42;
        v21 = *((_DWORD *)this + 26);
        goto LABEL_132;
      case 0x10u:
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_42;
        goto LABEL_147;
      default:
        v8 = TagFallback & 7;
LABEL_42:
        if (v8 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t proto::gnss::Emergency::SessionStatus::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = this;
  v6 = *(_DWORD *)(this + 104);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(this + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 104);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_20;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 104);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_21;
  }
LABEL_20:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 16), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 104);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_22;
  }
LABEL_21:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_DWORD *)(v5 + 20), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 104);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_23;
  }
LABEL_22:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, (int)a2, *(double *)(v5 + 24), a3);
  v6 = *(_DWORD *)(v5 + 104);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_24;
  }
LABEL_23:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, (int)a2, *(double *)(v5 + 32), a3);
  v6 = *(_DWORD *)(v5 + 104);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_25;
  }
LABEL_24:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, (int)a2, *(double *)(v5 + 40), a3);
  v6 = *(_DWORD *)(v5 + 104);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, (int)a2, *(double *)(v5 + 48), a3);
  v6 = *(_DWORD *)(v5 + 104);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, (int)a2, *(double *)(v5 + 56), a3);
  v6 = *(_DWORD *)(v5 + 104);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, (int)a2, *(double *)(v5 + 64), a3);
  v6 = *(_DWORD *)(v5 + 104);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, (int)a2, *(double *)(v5 + 72), a3);
  v6 = *(_DWORD *)(v5 + 104);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, *(unsigned __int8 *)(v5 + 96), (BOOL)a2, a4);
  v6 = *(_DWORD *)(v5 + 104);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_31;
  }
LABEL_30:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, *(unsigned __int8 *)(v5 + 97), (BOOL)a2, a4);
  v6 = *(_DWORD *)(v5 + 104);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_32;
  }
LABEL_31:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, *(unsigned __int8 *)(v5 + 98), (BOOL)a2, a4);
  v6 = *(_DWORD *)(v5 + 104);
  if ((v6 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0)
      return this;
    goto LABEL_35;
  }
LABEL_32:
  v7 = *(_QWORD *)(v5 + 80);
  if (!v7)
    v7 = *(_QWORD *)(proto::gnss::Emergency::SessionStatus::default_instance_ + 80);
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF, v7, a2, a4);
  if ((*(_DWORD *)(v5 + 104) & 0x8000) != 0)
  {
LABEL_35:
    v8 = *(_QWORD *)(v5 + 88);
    if (!v8)
      v8 = *(_QWORD *)(proto::gnss::Emergency::SessionStatus::default_instance_ + 88);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, v8, a2, a4);
  }
  return this;
}

uint64_t proto::gnss::Emergency::SessionStatus::ByteSize(proto::gnss::Emergency::SessionStatus *this, unsigned int a2)
{
  int v3;
  int v4;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  proto::gnss::Emergency::NetworkReferenceLocation *v15;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v16;
  int v17;
  int v18;
  proto::gnss::Emergency::NetworkReferenceTime *v19;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v20;
  unsigned int v21;
  int v22;
  int v23;

  v3 = *((_DWORD *)this + 26);
  if (!(_BYTE)v3)
  {
    v5 = 0;
    goto LABEL_40;
  }
  if ((v3 & 1) != 0)
  {
    v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
    if (v6 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
      v3 = *((_DWORD *)this + 26);
      if ((v3 & 2) == 0)
        goto LABEL_16;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_16;
    }
  }
  else
  {
    v4 = 0;
    if ((v3 & 2) == 0)
      goto LABEL_16;
  }
  v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
  if ((v7 & 0x80000000) != 0)
  {
    v8 = 11;
  }
  else if (v7 >= 0x80)
  {
    v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2) + 1;
    v3 = *((_DWORD *)this + 26);
  }
  else
  {
    v8 = 2;
  }
  v4 += v8;
LABEL_16:
  if ((v3 & 4) != 0)
  {
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
    if ((v9 & 0x80000000) != 0)
    {
      v10 = 11;
    }
    else if (v9 >= 0x80)
    {
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2) + 1;
      v3 = *((_DWORD *)this + 26);
    }
    else
    {
      v10 = 2;
    }
    v4 += v10;
    if ((v3 & 8) == 0)
      goto LABEL_31;
    goto LABEL_25;
  }
  if ((v3 & 8) != 0)
  {
LABEL_25:
    v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
    if ((v11 & 0x80000000) != 0)
    {
      v12 = 11;
    }
    else if (v11 >= 0x80)
    {
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
      v3 = *((_DWORD *)this + 26);
    }
    else
    {
      v12 = 2;
    }
    v4 += v12;
  }
LABEL_31:
  v13 = v4 + 9;
  if ((v3 & 0x10) == 0)
    v13 = v4;
  if ((v3 & 0x20) != 0)
    v13 += 9;
  if ((v3 & 0x40) != 0)
    v13 += 9;
  if ((v3 & 0x80) != 0)
    v5 = v13 + 9;
  else
    v5 = v13;
LABEL_40:
  if ((v3 & 0xFF00) != 0)
  {
    v14 = v5 + 9;
    if ((v3 & 0x100) == 0)
      v14 = v5;
    if ((v3 & 0x200) != 0)
      v14 += 9;
    if ((v3 & 0x400) != 0)
      v14 += 9;
    if ((v3 & 0x800) != 0)
      v14 += 2;
    if ((v3 & 0x1000) != 0)
      v14 += 2;
    if ((v3 & 0x2000) != 0)
      v5 = v14 + 2;
    else
      v5 = v14;
    if ((v3 & 0x4000) != 0)
    {
      v15 = (proto::gnss::Emergency::NetworkReferenceLocation *)*((_QWORD *)this + 10);
      if (!v15)
        v15 = *(proto::gnss::Emergency::NetworkReferenceLocation **)(proto::gnss::Emergency::SessionStatus::default_instance_
                                                                   + 80);
      v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::NetworkReferenceLocation::ByteSize(v15, a2);
      v17 = (int)v16;
      if (v16 >= 0x80)
        v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16, a2);
      else
        v18 = 1;
      v5 = (v5 + v17 + v18 + 1);
      v3 = *((_DWORD *)this + 26);
    }
    if ((v3 & 0x8000) != 0)
    {
      v19 = (proto::gnss::Emergency::NetworkReferenceTime *)*((_QWORD *)this + 11);
      if (!v19)
        v19 = *(proto::gnss::Emergency::NetworkReferenceTime **)(proto::gnss::Emergency::SessionStatus::default_instance_
                                                               + 88);
      v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::NetworkReferenceTime::ByteSize(v19, a2);
      v22 = (int)v20;
      if (v20 >= 0x80)
        v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20, v21);
      else
        v23 = 1;
      v5 = (v5 + v22 + v23 + 2);
    }
  }
  *((_DWORD *)this + 25) = v5;
  return v5;
}

void proto::gnss::Emergency::SessionStatus::CheckTypeAndMergeFrom(proto::gnss::Emergency::SessionStatus *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  proto::gnss::Emergency::SessionStatus::MergeFrom(this, lpsrc);
}

void sub_100062C6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  _BYTE v14[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v14, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 29919);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v13, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 60);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 60) & 1) != 0)
    {
      v7 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 60) |= 1u;
      *(_QWORD *)(a1 + 8) = v7;
      v5 = *(_DWORD *)(a2 + 60);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          goto LABEL_7;
        goto LABEL_15;
      }
    }
    else if ((*(_BYTE *)(a2 + 60) & 2) == 0)
    {
      goto LABEL_6;
    }
    v8 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 60) |= 2u;
    *(_QWORD *)(a1 + 16) = v8;
    v5 = *(_DWORD *)(a2 + 60);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0)
        goto LABEL_8;
      goto LABEL_16;
    }
LABEL_15:
    v9 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 60) |= 4u;
    *(_QWORD *)(a1 + 24) = v9;
    v5 = *(_DWORD *)(a2 + 60);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_17;
    }
LABEL_16:
    v10 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 60) |= 8u;
    *(_QWORD *)(a1 + 32) = v10;
    v5 = *(_DWORD *)(a2 + 60);
    if ((v5 & 0x10) == 0)
    {
LABEL_9:
      if ((v5 & 0x20) == 0)
        goto LABEL_10;
      goto LABEL_18;
    }
LABEL_17:
    v11 = *(_QWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 60) |= 0x10u;
    *(_QWORD *)(a1 + 40) = v11;
    v5 = *(_DWORD *)(a2 + 60);
    if ((v5 & 0x20) == 0)
    {
LABEL_10:
      if ((v5 & 0x40) == 0)
        return;
      goto LABEL_11;
    }
LABEL_18:
    v12 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a1 + 60) |= 0x20u;
    *(_DWORD *)(a1 + 48) = v12;
    if ((*(_DWORD *)(a2 + 60) & 0x40) == 0)
      return;
LABEL_11:
    v6 = *(_DWORD *)(a2 + 52);
    *(_DWORD *)(a1 + 60) |= 0x40u;
    *(_DWORD *)(a1 + 52) = v6;
  }
}

void sub_100062DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100062DD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  char v9;
  _BYTE v10[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v10, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 30170);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      v7 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v7;
      v5 = *(_DWORD *)(a2 + 28);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          return;
        goto LABEL_7;
      }
    }
    else if ((*(_BYTE *)(a2 + 28) & 2) == 0)
    {
      goto LABEL_6;
    }
    v8 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a1 + 28) |= 2u;
    *(_DWORD *)(a1 + 12) = v8;
    if ((*(_DWORD *)(a2 + 28) & 4) == 0)
      return;
LABEL_7:
    v6 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 28) |= 4u;
    *(_QWORD *)(a1 + 16) = v6;
  }
}

void sub_100062EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t proto::gnss::Emergency::SessionStatus::IsInitialized(proto::gnss::Emergency::SessionStatus *this)
{
  return 1;
}

_QWORD *proto::gnss::Emergency::SessionStatus::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.SessionStatus");
}

void sub_100062ED4(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  char v8;
  _BYTE v9[48];

  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 7204);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 20);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 8);
      a1[5] |= 1u;
      a1[2] = v6;
      v5 = *(_DWORD *)(a2 + 20);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_DWORD *)(a2 + 12);
      a1[5] |= 2u;
      a1[3] = v7;
    }
  }
}

void sub_100062F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void proto::gnss::Emergency::ClsGpsCellTime::~ClsGpsCellTime(proto::gnss::Emergency::ClsGpsCellTime *this)
{
  *(_QWORD *)this = off_1000F49E8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = off_1000F49E8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

void proto::gnss::Emergency::ClsGpsCellTime::New(proto::gnss::Emergency::ClsGpsCellTime *this)
{
  operator new();
}

uint64_t proto::gnss::Emergency::ClsGpsCellTime::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 20))
    *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t proto::gnss::Emergency::ClsGpsCellTime::MergePartialFromCodedStream(proto::gnss::Emergency::ClsGpsCellTime *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned int *v5;
  unsigned int *v6;
  char *v7;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v9;
  unint64_t v10;
  char *v11;
  char *v12;
  _BYTE *v13;
  unsigned __int8 *v14;
  uint64_t result;

  v5 = (unsigned int *)((char *)this + 8);
  v6 = (unsigned int *)((char *)this + 12);
  while (1)
  {
    while (1)
    {
      v7 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v7 >= *((_QWORD *)a2 + 2) || *v7 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
        *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
        *((_QWORD *)a2 + 1) = v7 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v9 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_16;
      v12 = (char *)*((_QWORD *)a2 + 1);
      v10 = *((_QWORD *)a2 + 2);
      if ((unint64_t)v12 >= v10 || *v12 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
        if (!(_DWORD)result)
          return result;
        v13 = (_BYTE *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
      }
      else
      {
        *v5 = *v12;
        v13 = v12 + 1;
        *((_QWORD *)a2 + 1) = v13;
      }
      *((_DWORD *)this + 5) |= 1u;
      if ((unint64_t)v13 < v10 && *v13 == 16)
      {
        v11 = v13 + 1;
        *((_QWORD *)a2 + 1) = v11;
LABEL_24:
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!(_DWORD)result)
            return result;
          v14 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v6 = *v11;
          v14 = (unsigned __int8 *)(v11 + 1);
          *((_QWORD *)a2 + 1) = v14;
        }
        *((_DWORD *)this + 5) |= 2u;
        if (v14 == (unsigned __int8 *)v10 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      v9 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v11 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        goto LABEL_24;
      }
    }
    else
    {
      v9 = TagFallback & 7;
    }
LABEL_16:
    if (v9 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t proto::gnss::Emergency::ClsGpsCellTime::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v4;
  uint64_t v5;
  int v6;

  v4 = a2;
  v5 = this;
  v6 = *(_DWORD *)(this + 20);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(this + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 20);
  }
  if ((v6 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), v4, a4);
  return this;
}

uint64_t proto::gnss::Emergency::ClsGpsCellTime::ByteSize(proto::gnss::Emergency::ClsGpsCellTime *this, unsigned int a2)
{
  char v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;

  v3 = *((_BYTE *)this + 20);
  if (v3)
  {
    if ((*((_BYTE *)this + 20) & 1) != 0)
    {
      v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
      if (v5 >= 0x80)
      {
        v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2)
           + 1;
        if ((*((_DWORD *)this + 5) & 2) == 0)
          goto LABEL_14;
      }
      else
      {
        v4 = 2;
        if ((v3 & 2) == 0)
          goto LABEL_14;
      }
    }
    else
    {
      v4 = 0;
      if ((*((_BYTE *)this + 20) & 2) == 0)
        goto LABEL_14;
    }
    v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
    if (v6 >= 0x80)
      v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    else
      v7 = 2;
    v4 = (v7 + v4);
  }
  else
  {
    v4 = 0;
  }
LABEL_14:
  *((_DWORD *)this + 4) = v4;
  return v4;
}

void proto::gnss::Emergency::ClsGpsCellTime::CheckTypeAndMergeFrom(proto::gnss::Emergency::ClsGpsCellTime *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  sub_100062ED4(this, (uint64_t)lpsrc);
}

uint64_t proto::gnss::Emergency::ClsGpsCellTime::IsInitialized(proto::gnss::Emergency::ClsGpsCellTime *this)
{
  return 1;
}

_QWORD *proto::gnss::Emergency::ClsGpsCellTime::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.ClsGpsCellTime");
}

void sub_100063320(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  char v12;
  _BYTE v13[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v13, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 7510);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v12, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 36);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) != 0)
    {
      *(_DWORD *)(a1 + 36) |= 1u;
      v6 = *(_DWORD **)(a1 + 8);
      if (!v6)
        operator new();
      v7 = *(_QWORD *)(a2 + 8);
      if (!v7)
        v7 = *(_QWORD *)(proto::gnss::Emergency::ClsUtranCellTime::default_instance_ + 8);
      sub_100062ED4(v6, v7);
      v5 = *(_DWORD *)(a2 + 36);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          goto LABEL_7;
        goto LABEL_16;
      }
    }
    else if ((*(_BYTE *)(a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    v8 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 36) |= 2u;
    *(_DWORD *)(a1 + 16) = v8;
    v5 = *(_DWORD *)(a2 + 36);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0)
        goto LABEL_8;
      goto LABEL_17;
    }
LABEL_16:
    v9 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 36) |= 4u;
    *(_DWORD *)(a1 + 20) = v9;
    v5 = *(_DWORD *)(a2 + 36);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0)
        return;
LABEL_18:
      v11 = *(_DWORD *)(a2 + 28);
      if (v11 >= 5)
        __assert_rtn("set_modem_state", "GnssEmergencyTypes.pb.h", 16057, "::proto::gnss::Emergency::ClsModemState_IsValid(value)");
      *(_DWORD *)(a1 + 36) |= 0x10u;
      *(_DWORD *)(a1 + 28) = v11;
      return;
    }
LABEL_17:
    v10 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 36) |= 8u;
    *(_DWORD *)(a1 + 24) = v10;
    if ((*(_DWORD *)(a2 + 36) & 0x10) == 0)
      return;
    goto LABEL_18;
  }
}

void sub_10006349C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void proto::gnss::Emergency::ClsUtranCellTime::~ClsUtranCellTime(proto::gnss::Emergency::ClsUtranCellTime *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1000F4A60;
  if ((proto::gnss::Emergency::ClsUtranCellTime *)proto::gnss::Emergency::ClsUtranCellTime::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  proto::gnss::Emergency::ClsUtranCellTime::~ClsUtranCellTime(this);
  operator delete();
}

void proto::gnss::Emergency::ClsUtranCellTime::New(proto::gnss::Emergency::ClsUtranCellTime *this)
{
  operator new();
}

uint64_t proto::gnss::Emergency::ClsUtranCellTime::Clear(uint64_t this)
{
  uint64_t v1;

  if (*(_BYTE *)(this + 36))
  {
    if ((*(_BYTE *)(this + 36) & 1) != 0)
    {
      v1 = *(_QWORD *)(this + 8);
      if (v1)
      {
        if (*(_BYTE *)(v1 + 20))
          *(_QWORD *)(v1 + 8) = 0;
        *(_DWORD *)(v1 + 20) = 0;
      }
    }
    *(_QWORD *)(this + 16) = 0;
    *(_QWORD *)(this + 24) = 0;
  }
  *(_DWORD *)(this + 36) = 0;
  return this;
}

uint64_t proto::gnss::Emergency::ClsUtranCellTime::MergePartialFromCodedStream(proto::gnss::Emergency::ClsUtranCellTime *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  char *v8;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v10;
  proto::gnss::Emergency::ClsGpsCellTime *v11;
  char *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  BOOL v23;
  int v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t result;
  _BYTE *v28;
  _BYTE *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;

  v5 = (unsigned int *)((char *)this + 16);
  v6 = (unsigned int *)((char *)this + 20);
  v7 = (unsigned int *)((char *)this + 24);
  while (2)
  {
    v8 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v8;
      *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      *((_QWORD *)a2 + 1) = v8 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v10 = TagFallback & 7;
        if (v10 != 2)
          goto LABEL_22;
        *((_DWORD *)this + 9) |= 1u;
        v11 = (proto::gnss::Emergency::ClsGpsCellTime *)*((_QWORD *)this + 1);
        if (!v11)
          operator new();
        v32 = 0;
        v12 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v12 >= *((_QWORD *)a2 + 2) || *v12 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v32))return 0;
        }
        else
        {
          v32 = *v12;
          *((_QWORD *)a2 + 1) = v12 + 1;
        }
        v18 = *((_DWORD *)a2 + 14);
        v19 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v18 + 1;
        if (v18 >= v19)
          return 0;
        v20 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v32);
        if (!proto::gnss::Emergency::ClsGpsCellTime::MergePartialFromCodedStream(v11, a2, v21)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v20);
        v22 = *((_DWORD *)a2 + 14);
        v23 = __OFSUB__(v22, 1);
        v24 = v22 - 1;
        if (v24 < 0 == v23)
          *((_DWORD *)a2 + 14) = v24;
        v25 = (_BYTE *)*((_QWORD *)a2 + 1);
        v13 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v25 >= v13 || *v25 != 16)
          continue;
        v14 = v25 + 1;
        *((_QWORD *)a2 + 1) = v14;
        goto LABEL_35;
      case 2u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v14 = (char *)*((_QWORD *)a2 + 1);
        v13 = *((_QWORD *)a2 + 2);
LABEL_35:
        if ((unint64_t)v14 >= v13 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v26 = (_BYTE *)*((_QWORD *)a2 + 1);
          v13 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v5 = *v14;
          v26 = v14 + 1;
          *((_QWORD *)a2 + 1) = v26;
        }
        *((_DWORD *)this + 9) |= 2u;
        if ((unint64_t)v26 >= v13 || *v26 != 24)
          continue;
        v15 = v26 + 1;
        *((_QWORD *)a2 + 1) = v15;
LABEL_43:
        if ((unint64_t)v15 >= v13 || *v15 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!(_DWORD)result)
            return result;
          v28 = (_BYTE *)*((_QWORD *)a2 + 1);
          v13 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v6 = *v15;
          v28 = v15 + 1;
          *((_QWORD *)a2 + 1) = v28;
        }
        *((_DWORD *)this + 9) |= 4u;
        if ((unint64_t)v28 >= v13 || *v28 != 32)
          continue;
        v16 = v28 + 1;
        *((_QWORD *)a2 + 1) = v16;
LABEL_51:
        if ((unint64_t)v16 >= v13 || *v16 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!(_DWORD)result)
            return result;
          v29 = (_BYTE *)*((_QWORD *)a2 + 1);
          v13 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v7 = *v16;
          v29 = v16 + 1;
          *((_QWORD *)a2 + 1) = v29;
        }
        *((_DWORD *)this + 9) |= 8u;
        if ((unint64_t)v29 >= v13 || *v29 != 40)
          continue;
        v17 = v29 + 1;
        *((_QWORD *)a2 + 1) = v17;
LABEL_59:
        v31 = 0;
        if ((unint64_t)v17 >= v13 || *v17 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v31);
          if (!(_DWORD)result)
            return result;
          v30 = v31;
        }
        else
        {
          v30 = *v17;
          *((_QWORD *)a2 + 1) = v17 + 1;
        }
        if (v30 <= 4)
        {
          *((_DWORD *)this + 9) |= 0x10u;
          *((_DWORD *)this + 7) = v30;
        }
        if (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2)
          || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
        {
          continue;
        }
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        break;
      case 3u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v15 = (char *)*((_QWORD *)a2 + 1);
        v13 = *((_QWORD *)a2 + 2);
        goto LABEL_43;
      case 4u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v16 = (char *)*((_QWORD *)a2 + 1);
        v13 = *((_QWORD *)a2 + 2);
        goto LABEL_51;
      case 5u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v17 = (char *)*((_QWORD *)a2 + 1);
        v13 = *((_QWORD *)a2 + 2);
        goto LABEL_59;
      default:
        v10 = TagFallback & 7;
LABEL_22:
        if (v10 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

uint64_t proto::gnss::Emergency::ClsUtranCellTime::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int *v5;
  int v6;
  uint64_t v7;

  v5 = (int *)this;
  v6 = *(_DWORD *)(this + 36);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(this + 8);
    if (!v7)
      v7 = *(_QWORD *)(proto::gnss::Emergency::ClsUtranCellTime::default_instance_ + 8);
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    v6 = v5[9];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v5[4], a2, a4);
  v6 = v5[9];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[5], a2, a4);
  v6 = v5[9];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v5[7], (int)a2, a4);
  }
LABEL_12:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v5[6], a2, a4);
  if ((v5[9] & 0x10) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v5[7], (int)a2, a4);
  return this;
}

uint64_t proto::gnss::Emergency::ClsUtranCellTime::ByteSize(proto::gnss::Emergency::ClsUtranCellTime *this, unsigned int a2)
{
  int v3;
  uint64_t v4;
  proto::gnss::Emergency::ClsGpsCellTime *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  int v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v13;
  int v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;
  int v16;

  LOBYTE(v3) = *((_BYTE *)this + 36);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_34;
  }
  if ((*((_BYTE *)this + 36) & 1) == 0)
  {
    v4 = 0;
    if ((*((_BYTE *)this + 36) & 2) == 0)
      goto LABEL_16;
    goto LABEL_12;
  }
  v5 = (proto::gnss::Emergency::ClsGpsCellTime *)*((_QWORD *)this + 1);
  if (!v5)
    v5 = *(proto::gnss::Emergency::ClsGpsCellTime **)(proto::gnss::Emergency::ClsUtranCellTime::default_instance_ + 8);
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::ClsGpsCellTime::ByteSize(v5, a2);
  v7 = (int)v6;
  if (v6 >= 0x80)
    v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2);
  else
    v8 = 1;
  v4 = (v7 + v8 + 1);
  v3 = *((_DWORD *)this + 9);
  if ((v3 & 2) != 0)
  {
LABEL_12:
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
    if (v9 >= 0x80)
    {
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2) + 1;
      v3 = *((_DWORD *)this + 9);
    }
    else
    {
      v10 = 2;
    }
    v4 = (v10 + v4);
  }
LABEL_16:
  if ((v3 & 4) != 0)
  {
    v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
    if (v11 >= 0x80)
    {
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
      v3 = *((_DWORD *)this + 9);
    }
    else
    {
      v12 = 2;
    }
    v4 = (v12 + v4);
    if ((v3 & 8) == 0)
    {
LABEL_18:
      if ((v3 & 0x10) == 0)
        goto LABEL_34;
      goto LABEL_28;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_18;
  }
  v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
  if (v13 >= 0x80)
  {
    v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2) + 1;
    v3 = *((_DWORD *)this + 9);
  }
  else
  {
    v14 = 2;
  }
  v4 = (v14 + v4);
  if ((v3 & 0x10) != 0)
  {
LABEL_28:
    v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 7);
    if ((v15 & 0x80000000) != 0)
    {
      v16 = 11;
    }
    else if (v15 >= 0x80)
    {
      v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2) + 1;
    }
    else
    {
      v16 = 2;
    }
    v4 = (v16 + v4);
  }
LABEL_34:
  *((_DWORD *)this + 8) = v4;
  return v4;
}

void proto::gnss::Emergency::ClsUtranCellTime::CheckTypeAndMergeFrom(proto::gnss::Emergency::ClsUtranCellTime *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  sub_100063320((uint64_t)this, (uint64_t)lpsrc);
}

uint64_t proto::gnss::Emergency::ClsUtranCellTime::IsInitialized(proto::gnss::Emergency::ClsUtranCellTime *this)
{
  return 1;
}

_QWORD *proto::gnss::Emergency::ClsUtranCellTime::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.ClsUtranCellTime");
}

void sub_100063BE4(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  char v9;
  _BYTE v10[48];

  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v10, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 7755);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 24);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      v7 = *(_DWORD *)(a2 + 8);
      a1[6] |= 1u;
      a1[2] = v7;
      v5 = *(_DWORD *)(a2 + 24);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          return;
        goto LABEL_7;
      }
    }
    else if ((*(_BYTE *)(a2 + 24) & 2) == 0)
    {
      goto LABEL_6;
    }
    v8 = *(_DWORD *)(a2 + 12);
    a1[6] |= 2u;
    a1[3] = v8;
    if ((*(_DWORD *)(a2 + 24) & 4) == 0)
      return;
LABEL_7:
    v6 = *(_DWORD *)(a2 + 16);
    a1[6] |= 4u;
    a1[4] = v6;
  }
}

void sub_100063CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void proto::gnss::Emergency::Plmn::~Plmn(proto::gnss::Emergency::Plmn *this)
{
  *(_QWORD *)this = off_1000F4AD8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = off_1000F4AD8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

void proto::gnss::Emergency::Plmn::New(proto::gnss::Emergency::Plmn *this)
{
  operator new();
}

uint64_t proto::gnss::Emergency::Plmn::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 24))
  {
    *(_QWORD *)(this + 8) = 0;
    *(_DWORD *)(this + 16) = 0;
  }
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t proto::gnss::Emergency::Plmn::MergePartialFromCodedStream(proto::gnss::Emergency::Plmn *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  char *v8;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v10;
  int v11;
  unint64_t v12;
  char *v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  _BYTE *v17;
  unsigned __int8 *v18;
  uint64_t result;

  v5 = (unsigned int *)((char *)this + 8);
  v6 = (unsigned int *)((char *)this + 12);
  v7 = (unsigned int *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v8 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v8;
          *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
          *((_QWORD *)a2 + 1) = v8 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v10 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v14 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v14 >= v12 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v15 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v5 = *v14;
          v15 = v14 + 1;
          *((_QWORD *)a2 + 1) = v15;
        }
        *((_DWORD *)this + 6) |= 1u;
        if ((unint64_t)v15 < v12 && *v15 == 16)
        {
          v16 = v15 + 1;
          *((_QWORD *)a2 + 1) = v16;
          goto LABEL_27;
        }
      }
      if (v10 != 2)
        break;
      v11 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_19;
      v16 = (char *)*((_QWORD *)a2 + 1);
      v12 = *((_QWORD *)a2 + 2);
LABEL_27:
      if ((unint64_t)v16 >= v12 || *v16 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
        if (!(_DWORD)result)
          return result;
        v17 = (_BYTE *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
      }
      else
      {
        *v6 = *v16;
        v17 = v16 + 1;
        *((_QWORD *)a2 + 1) = v17;
      }
      *((_DWORD *)this + 6) |= 2u;
      if ((unint64_t)v17 < v12 && *v17 == 24)
      {
        v13 = v17 + 1;
        *((_QWORD *)a2 + 1) = v13;
LABEL_35:
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!(_DWORD)result)
            return result;
          v18 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v7 = *v13;
          v18 = (unsigned __int8 *)(v13 + 1);
          *((_QWORD *)a2 + 1) = v18;
        }
        *((_DWORD *)this + 6) |= 4u;
        if (v18 == (unsigned __int8 *)v12 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
      }
    }
    if (v10 == 3)
    {
      v11 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v13 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        goto LABEL_35;
      }
    }
    else
    {
      v11 = TagFallback & 7;
    }
LABEL_19:
    if (v11 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

int *proto::gnss::Emergency::Plmn::SerializeWithCachedSizes(int *this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v4;
  int *v5;
  int v6;

  v4 = a2;
  v5 = this;
  v6 = this[6];
  if ((v6 & 1) != 0)
  {
    this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, this[2], a2, a4);
    v6 = v5[6];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        return this;
      return (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[4], v4, a4);
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v5[3], v4, a4);
  if ((v5[6] & 4) != 0)
    return (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[4], v4, a4);
  return this;
}

uint64_t proto::gnss::Emergency::Plmn::ByteSize(proto::gnss::Emergency::Plmn *this, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;

  LOBYTE(v3) = *((_BYTE *)this + 24);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_19;
  }
  if ((*((_BYTE *)this + 24) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
    if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *((_DWORD *)this + 6);
      if ((v3 & 2) == 0)
        goto LABEL_14;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_14;
    }
  }
  else
  {
    v4 = 0;
    if ((*((_BYTE *)this + 24) & 2) == 0)
      goto LABEL_14;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
  if (v6 >= 0x80)
  {
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    v3 = *((_DWORD *)this + 6);
  }
  else
  {
    v7 = 2;
  }
  v4 = (v7 + v4);
LABEL_14:
  if ((v3 & 4) != 0)
  {
    v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
    if (v8 >= 0x80)
      v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2) + 1;
    else
      v9 = 2;
    v4 = (v9 + v4);
  }
LABEL_19:
  *((_DWORD *)this + 5) = v4;
  return v4;
}

void proto::gnss::Emergency::Plmn::CheckTypeAndMergeFrom(proto::gnss::Emergency::Plmn *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  sub_100063BE4(this, (uint64_t)lpsrc);
}

uint64_t proto::gnss::Emergency::Plmn::IsInitialized(proto::gnss::Emergency::Plmn *this)
{
  return 1;
}

_QWORD *proto::gnss::Emergency::Plmn::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.Plmn");
}

void sub_10006412C(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  char v9;
  _BYTE v10[48];

  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v10, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 7998);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 24);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 8);
      if (v6 >= 6)
        __assert_rtn("set_session_protocol", "GnssEmergencyTypes.pb.h", 16154, "::proto::gnss::Emergency::SessionProtocol_IsValid(value)");
      a1[6] |= 1u;
      a1[2] = v6;
      v5 = *(_DWORD *)(a2 + 24);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_DWORD *)(a2 + 12);
      if (v7 >= 7)
        __assert_rtn("set_pos_protocol", "GnssEmergencyTypes.pb.h", 16177, "::proto::gnss::Emergency::PosProtocol_IsValid(value)");
      a1[6] |= 2u;
      a1[3] = v7;
      v5 = *(_DWORD *)(a2 + 24);
    }
    if ((v5 & 4) != 0)
    {
      v8 = *(_DWORD *)(a2 + 16);
      a1[6] |= 4u;
      a1[4] = v8;
    }
  }
}

void sub_100064240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void proto::gnss::Emergency::SessionInfo::~SessionInfo(proto::gnss::Emergency::SessionInfo *this)
{
  *(_QWORD *)this = off_1000F4B50;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = off_1000F4B50;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

void proto::gnss::Emergency::SessionInfo::New(proto::gnss::Emergency::SessionInfo *this)
{
  operator new();
}

uint64_t proto::gnss::Emergency::SessionInfo::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 24))
  {
    *(_QWORD *)(this + 8) = 0;
    *(_DWORD *)(this + 16) = 0;
  }
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t proto::gnss::Emergency::SessionInfo::MergePartialFromCodedStream(proto::gnss::Emergency::SessionInfo *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v8;
  int v9;
  unint64_t v10;
  char *v11;
  char *v12;
  unsigned int v13;
  unint64_t v14;
  char *v15;
  _BYTE *v16;
  unsigned int v17;
  _BYTE *v18;
  unsigned __int8 *v19;
  uint64_t result;
  unsigned int v21;
  unsigned int v22;

  v5 = (unsigned int *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v6 >= *((_QWORD *)a2 + 2) || *v6 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
          *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
          *((_QWORD *)a2 + 1) = v6 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v8 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v22 = 0;
        v12 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v12 >= *((_QWORD *)a2 + 2) || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v22);
          if (!(_DWORD)result)
            return result;
          v13 = v22;
        }
        else
        {
          v13 = *v12;
          *((_QWORD *)a2 + 1) = v12 + 1;
        }
        if (v13 <= 5)
        {
          *((_DWORD *)this + 6) |= 1u;
          *((_DWORD *)this + 2) = v13;
        }
        v16 = (_BYTE *)*((_QWORD *)a2 + 1);
        v14 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v16 < v14 && *v16 == 16)
        {
          v15 = v16 + 1;
          *((_QWORD *)a2 + 1) = v15;
          goto LABEL_29;
        }
      }
      if (v8 != 2)
        break;
      v9 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_19;
      v15 = (char *)*((_QWORD *)a2 + 1);
      v14 = *((_QWORD *)a2 + 2);
LABEL_29:
      v21 = 0;
      if ((unint64_t)v15 >= v14 || *v15 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v21);
        if (!(_DWORD)result)
          return result;
        v17 = v21;
      }
      else
      {
        v17 = *v15;
        *((_QWORD *)a2 + 1) = v15 + 1;
      }
      if (v17 <= 6)
      {
        *((_DWORD *)this + 6) |= 2u;
        *((_DWORD *)this + 3) = v17;
      }
      v18 = (_BYTE *)*((_QWORD *)a2 + 1);
      v10 = *((_QWORD *)a2 + 2);
      if ((unint64_t)v18 < v10 && *v18 == 24)
      {
        v11 = v18 + 1;
        *((_QWORD *)a2 + 1) = v11;
LABEL_39:
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v19 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v5 = *v11;
          v19 = (unsigned __int8 *)(v11 + 1);
          *((_QWORD *)a2 + 1) = v19;
        }
        *((_DWORD *)this + 6) |= 4u;
        if (v19 == (unsigned __int8 *)v10 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
      }
    }
    if (v8 == 3)
    {
      v9 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v11 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        goto LABEL_39;
      }
    }
    else
    {
      v9 = TagFallback & 7;
    }
LABEL_19:
    if (v9 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

int *proto::gnss::Emergency::SessionInfo::SerializeWithCachedSizes(int *this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v4;
  int *v5;
  int v6;

  v4 = a2;
  v5 = this;
  v6 = this[6];
  if ((v6 & 1) != 0)
  {
    this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, this[2], (int)a2, a4);
    v6 = v5[6];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        return this;
      return (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[4], v4, a4);
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v5[3], v4, a4);
  if ((v5[6] & 4) != 0)
    return (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[4], v4, a4);
  return this;
}

uint64_t proto::gnss::Emergency::SessionInfo::ByteSize(proto::gnss::Emergency::SessionInfo *this, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;

  LOBYTE(v3) = *((_BYTE *)this + 24);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_24;
  }
  if ((*((_BYTE *)this + 24) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
    if ((v5 & 0x80000000) != 0)
    {
      v4 = 11;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *((_DWORD *)this + 6);
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
  }
  else
  {
    v4 = 0;
    if ((*((_BYTE *)this + 24) & 2) == 0)
      goto LABEL_19;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
  if ((v6 & 0x80000000) != 0)
  {
    v7 = 11;
  }
  else if (v6 >= 0x80)
  {
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    v3 = *((_DWORD *)this + 6);
  }
  else
  {
    v7 = 2;
  }
  v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
    if (v8 >= 0x80)
      v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2) + 1;
    else
      v9 = 2;
    v4 = (v9 + v4);
  }
LABEL_24:
  *((_DWORD *)this + 5) = v4;
  return v4;
}

void proto::gnss::Emergency::SessionInfo::CheckTypeAndMergeFrom(proto::gnss::Emergency::SessionInfo *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  sub_10006412C(this, (uint64_t)lpsrc);
}

uint64_t proto::gnss::Emergency::SessionInfo::IsInitialized(proto::gnss::Emergency::SessionInfo *this)
{
  return 1;
}

_QWORD *proto::gnss::Emergency::SessionInfo::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.SessionInfo");
}

void proto::gnss::Emergency::PositionRequest::MergeFrom(proto::gnss::Emergency::PositionRequest *this, const proto::gnss::Emergency::PositionRequest *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  char v23;
  _BYTE v24[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v24, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 8683);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v24, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v23, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v24);
  }
  v5 = *((_DWORD *)a2 + 20);
  if (!(_BYTE)v5)
    goto LABEL_16;
  if ((v5 & 1) != 0)
  {
    v6 = *((_DWORD *)a2 + 2);
    *((_DWORD *)this + 20) |= 1u;
    *((_DWORD *)this + 2) = v6;
    v5 = *((_DWORD *)a2 + 20);
  }
  if ((v5 & 2) != 0)
  {
    v7 = *((_DWORD *)a2 + 3);
    if (v7 >= 5)
      __assert_rtn("set_method", "GnssEmergencyTypes.pb.h", 16248, "::proto::gnss::Emergency::MethodType_IsValid(value)");
    *((_DWORD *)this + 20) |= 2u;
    *((_DWORD *)this + 3) = v7;
    v5 = *((_DWORD *)a2 + 20);
  }
  if ((v5 & 4) != 0)
  {
    v18 = *((_DWORD *)a2 + 4);
    *((_DWORD *)this + 20) |= 4u;
    *((_DWORD *)this + 4) = v18;
    v5 = *((_DWORD *)a2 + 20);
    if ((v5 & 8) == 0)
    {
LABEL_11:
      if ((v5 & 0x10) == 0)
        goto LABEL_12;
      goto LABEL_40;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_11;
  }
  v19 = *((_DWORD *)a2 + 5);
  *((_DWORD *)this + 20) |= 8u;
  *((_DWORD *)this + 5) = v19;
  v5 = *((_DWORD *)a2 + 20);
  if ((v5 & 0x10) == 0)
  {
LABEL_12:
    if ((v5 & 0x20) == 0)
      goto LABEL_13;
LABEL_41:
    v21 = *((_DWORD *)a2 + 7);
    *((_DWORD *)this + 20) |= 0x20u;
    *((_DWORD *)this + 7) = v21;
    v5 = *((_DWORD *)a2 + 20);
    if ((v5 & 0x40) == 0)
    {
LABEL_14:
      if ((v5 & 0x80) == 0)
        goto LABEL_16;
      goto LABEL_15;
    }
    goto LABEL_42;
  }
LABEL_40:
  v20 = *((_DWORD *)a2 + 6);
  *((_DWORD *)this + 20) |= 0x10u;
  *((_DWORD *)this + 6) = v20;
  v5 = *((_DWORD *)a2 + 20);
  if ((v5 & 0x20) != 0)
    goto LABEL_41;
LABEL_13:
  if ((v5 & 0x40) == 0)
    goto LABEL_14;
LABEL_42:
  v22 = *((_DWORD *)a2 + 8);
  *((_DWORD *)this + 20) |= 0x40u;
  *((_DWORD *)this + 8) = v22;
  v5 = *((_DWORD *)a2 + 20);
  if ((v5 & 0x80) != 0)
  {
LABEL_15:
    v8 = *((_DWORD *)a2 + 9);
    *((_DWORD *)this + 20) |= 0x80u;
    *((_DWORD *)this + 9) = v8;
    v5 = *((_DWORD *)a2 + 20);
  }
LABEL_16:
  if ((v5 & 0xFF00) == 0)
    goto LABEL_26;
  if ((v5 & 0x100) != 0)
  {
    v11 = *((_DWORD *)a2 + 10);
    *((_DWORD *)this + 20) |= 0x100u;
    *((_DWORD *)this + 10) = v11;
    v5 = *((_DWORD *)a2 + 20);
    if ((v5 & 0x200) == 0)
    {
LABEL_19:
      if ((v5 & 0x400) == 0)
        goto LABEL_20;
      goto LABEL_31;
    }
  }
  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_19;
  }
  v12 = *((_DWORD *)a2 + 11);
  *((_DWORD *)this + 20) |= 0x200u;
  *((_DWORD *)this + 11) = v12;
  v5 = *((_DWORD *)a2 + 20);
  if ((v5 & 0x400) == 0)
  {
LABEL_20:
    if ((v5 & 0x800) == 0)
      goto LABEL_21;
    goto LABEL_32;
  }
LABEL_31:
  v13 = *((_DWORD *)a2 + 12);
  *((_DWORD *)this + 20) |= 0x400u;
  *((_DWORD *)this + 12) = v13;
  v5 = *((_DWORD *)a2 + 20);
  if ((v5 & 0x800) == 0)
  {
LABEL_21:
    if ((v5 & 0x1000) == 0)
      goto LABEL_22;
    goto LABEL_33;
  }
LABEL_32:
  v14 = *((_DWORD *)a2 + 13);
  *((_DWORD *)this + 20) |= 0x800u;
  *((_DWORD *)this + 13) = v14;
  v5 = *((_DWORD *)a2 + 20);
  if ((v5 & 0x1000) == 0)
  {
LABEL_22:
    if ((v5 & 0x2000) == 0)
      goto LABEL_23;
    goto LABEL_34;
  }
LABEL_33:
  v15 = *((_DWORD *)a2 + 14);
  *((_DWORD *)this + 20) |= 0x1000u;
  *((_DWORD *)this + 14) = v15;
  v5 = *((_DWORD *)a2 + 20);
  if ((v5 & 0x2000) == 0)
  {
LABEL_23:
    if ((v5 & 0x4000) == 0)
      goto LABEL_24;
    goto LABEL_35;
  }
LABEL_34:
  v16 = *((_DWORD *)a2 + 15);
  *((_DWORD *)this + 20) |= 0x2000u;
  *((_DWORD *)this + 15) = v16;
  v5 = *((_DWORD *)a2 + 20);
  if ((v5 & 0x4000) == 0)
  {
LABEL_24:
    if ((v5 & 0x8000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_35:
  v17 = *((_DWORD *)a2 + 16);
  if (v17 >= 7)
    __assert_rtn("set_pos_protocol", "GnssEmergencyTypes.pb.h", 16535, "::proto::gnss::Emergency::PosProtocol_IsValid(value)");
  *((_DWORD *)this + 20) |= 0x4000u;
  *((_DWORD *)this + 16) = v17;
  v5 = *((_DWORD *)a2 + 20);
  if ((v5 & 0x8000) != 0)
  {
LABEL_25:
    v9 = *((_DWORD *)a2 + 17);
    *((_DWORD *)this + 20) |= 0x8000u;
    *((_DWORD *)this + 17) = v9;
    v5 = *((_DWORD *)a2 + 20);
  }
LABEL_26:
  if ((v5 & 0x10000) != 0)
  {
    v10 = *((_DWORD *)a2 + 18);
    *((_DWORD *)this + 20) |= 0x10000u;
    *((_DWORD *)this + 18) = v10;
  }
}

void sub_1000649CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void proto::gnss::Emergency::PositionRequest::~PositionRequest(proto::gnss::Emergency::PositionRequest *this)
{
  *(_QWORD *)this = off_1000F4BC8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = off_1000F4BC8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

void proto::gnss::Emergency::PositionRequest::New(proto::gnss::Emergency::PositionRequest *this)
{
  operator new();
}

uint64_t proto::gnss::Emergency::PositionRequest::Clear(uint64_t this)
{
  int v1;

  v1 = *(_DWORD *)(this + 80);
  if ((_BYTE)v1)
  {
    *(_OWORD *)(this + 24) = 0u;
    *(_OWORD *)(this + 8) = 0u;
  }
  if ((v1 & 0xFF00) != 0)
  {
    *(_OWORD *)(this + 56) = 0u;
    *(_OWORD *)(this + 40) = 0u;
  }
  if ((v1 & 0xFF0000) != 0)
    *(_DWORD *)(this + 72) = 0;
  *(_DWORD *)(this + 80) = 0;
  return this;
}

uint64_t proto::gnss::Emergency::PositionRequest::MergePartialFromCodedStream(proto::gnss::Emergency::PositionRequest *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  char *v12;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v14;
  unint64_t v15;
  char *v16;
  _BYTE *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  unsigned __int8 *v34;
  char *v35;
  unsigned int v36;
  _BYTE *v37;
  _BYTE *v38;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;
  _BYTE *v42;
  _BYTE *v43;
  _BYTE *v44;
  _BYTE *v45;
  _BYTE *v46;
  _BYTE *v47;
  _BYTE *v48;
  _BYTE *v49;
  unsigned int v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  uint64_t result;
  unsigned int *v55;
  unsigned int *v56;
  unsigned int *v57;
  unsigned int *v58;
  unsigned int *v59;
  unsigned int *v60;
  unsigned int *v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;

  v55 = (unsigned int *)((char *)this + 8);
  v58 = (unsigned int *)((char *)this + 16);
  v59 = (unsigned int *)((char *)this + 20);
  v60 = (unsigned int *)((char *)this + 24);
  v61 = (unsigned int *)((char *)this + 28);
  v62 = (unsigned int *)((char *)this + 32);
  v5 = (unsigned int *)((char *)this + 36);
  v6 = (unsigned int *)((char *)this + 40);
  v7 = (unsigned int *)((char *)this + 44);
  v8 = (unsigned int *)((char *)this + 48);
  v9 = (unsigned int *)((char *)this + 52);
  v10 = (unsigned int *)((char *)this + 56);
  v11 = (unsigned int *)((char *)this + 60);
  v56 = (unsigned int *)((char *)this + 72);
  v57 = (unsigned int *)((char *)this + 68);
  while (2)
  {
    v12 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v12 >= *((_QWORD *)a2 + 2) || *v12 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v12;
      *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      *((_QWORD *)a2 + 1) = v12 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_44;
        v16 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v16 < v15 && (*v16 & 0x80000000) == 0)
        {
          *v55 = *v16;
          v17 = v16 + 1;
          *((_QWORD *)a2 + 1) = v17;
LABEL_50:
          *((_DWORD *)this + 20) |= 1u;
          if ((unint64_t)v17 < v15 && *v17 == 16)
          {
            v18 = v17 + 1;
            *((_QWORD *)a2 + 1) = v18;
            goto LABEL_53;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v55);
        if ((_DWORD)result)
        {
          v17 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
          goto LABEL_50;
        }
        break;
      case 2u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_44;
        v18 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
LABEL_53:
        v64 = 0;
        if ((unint64_t)v18 >= v15 || *v18 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v64);
          if (!(_DWORD)result)
            return result;
          v36 = v64;
        }
        else
        {
          v36 = *v18;
          *((_QWORD *)a2 + 1) = v18 + 1;
        }
        if (v36 <= 4)
        {
          *((_DWORD *)this + 20) |= 2u;
          *((_DWORD *)this + 3) = v36;
        }
        v37 = (_BYTE *)*((_QWORD *)a2 + 1);
        v19 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v37 >= v19 || *v37 != 24)
          continue;
        v20 = v37 + 1;
        *((_QWORD *)a2 + 1) = v20;
LABEL_63:
        if ((unint64_t)v20 >= v19 || *v20 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v58);
          if (!(_DWORD)result)
            return result;
          v38 = (_BYTE *)*((_QWORD *)a2 + 1);
          v19 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v58 = *v20;
          v38 = v20 + 1;
          *((_QWORD *)a2 + 1) = v38;
        }
        *((_DWORD *)this + 20) |= 4u;
        if ((unint64_t)v38 >= v19 || *v38 != 32)
          continue;
        v21 = v38 + 1;
        *((_QWORD *)a2 + 1) = v21;
LABEL_71:
        if ((unint64_t)v21 >= v19 || *v21 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v59);
          if (!(_DWORD)result)
            return result;
          v39 = (_BYTE *)*((_QWORD *)a2 + 1);
          v19 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v59 = *v21;
          v39 = v21 + 1;
          *((_QWORD *)a2 + 1) = v39;
        }
        *((_DWORD *)this + 20) |= 8u;
        if ((unint64_t)v39 >= v19 || *v39 != 40)
          continue;
        v22 = v39 + 1;
        *((_QWORD *)a2 + 1) = v22;
LABEL_79:
        if ((unint64_t)v22 >= v19 || *v22 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v60);
          if (!(_DWORD)result)
            return result;
          v40 = (_BYTE *)*((_QWORD *)a2 + 1);
          v19 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v60 = *v22;
          v40 = v22 + 1;
          *((_QWORD *)a2 + 1) = v40;
        }
        *((_DWORD *)this + 20) |= 0x10u;
        if ((unint64_t)v40 >= v19 || *v40 != 48)
          continue;
        v23 = v40 + 1;
        *((_QWORD *)a2 + 1) = v23;
LABEL_87:
        if ((unint64_t)v23 >= v19 || *v23 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v61);
          if (!(_DWORD)result)
            return result;
          v41 = (_BYTE *)*((_QWORD *)a2 + 1);
          v19 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v61 = *v23;
          v41 = v23 + 1;
          *((_QWORD *)a2 + 1) = v41;
        }
        *((_DWORD *)this + 20) |= 0x20u;
        if ((unint64_t)v41 >= v19 || *v41 != 56)
          continue;
        v24 = v41 + 1;
        *((_QWORD *)a2 + 1) = v24;
LABEL_95:
        if ((unint64_t)v24 >= v19 || *v24 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v62);
          if (!(_DWORD)result)
            return result;
          v42 = (_BYTE *)*((_QWORD *)a2 + 1);
          v19 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v62 = *v24;
          v42 = v24 + 1;
          *((_QWORD *)a2 + 1) = v42;
        }
        *((_DWORD *)this + 20) |= 0x40u;
        if ((unint64_t)v42 >= v19 || *v42 != 64)
          continue;
        v25 = v42 + 1;
        *((_QWORD *)a2 + 1) = v25;
LABEL_103:
        if ((unint64_t)v25 >= v19 || *v25 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v43 = (_BYTE *)*((_QWORD *)a2 + 1);
          v19 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v5 = *v25;
          v43 = v25 + 1;
          *((_QWORD *)a2 + 1) = v43;
        }
        *((_DWORD *)this + 20) |= 0x80u;
        if ((unint64_t)v43 >= v19 || *v43 != 72)
          continue;
        v26 = v43 + 1;
        *((_QWORD *)a2 + 1) = v26;
LABEL_111:
        if ((unint64_t)v26 >= v19 || *v26 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!(_DWORD)result)
            return result;
          v44 = (_BYTE *)*((_QWORD *)a2 + 1);
          v19 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v6 = *v26;
          v44 = v26 + 1;
          *((_QWORD *)a2 + 1) = v44;
        }
        *((_DWORD *)this + 20) |= 0x100u;
        if ((unint64_t)v44 >= v19 || *v44 != 80)
          continue;
        v27 = v44 + 1;
        *((_QWORD *)a2 + 1) = v27;
LABEL_119:
        if ((unint64_t)v27 >= v19 || *v27 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!(_DWORD)result)
            return result;
          v45 = (_BYTE *)*((_QWORD *)a2 + 1);
          v19 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v7 = *v27;
          v45 = v27 + 1;
          *((_QWORD *)a2 + 1) = v45;
        }
        *((_DWORD *)this + 20) |= 0x200u;
        if ((unint64_t)v45 >= v19 || *v45 != 88)
          continue;
        v28 = v45 + 1;
        *((_QWORD *)a2 + 1) = v28;
LABEL_127:
        if ((unint64_t)v28 >= v19 || *v28 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v8);
          if (!(_DWORD)result)
            return result;
          v46 = (_BYTE *)*((_QWORD *)a2 + 1);
          v19 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v8 = *v28;
          v46 = v28 + 1;
          *((_QWORD *)a2 + 1) = v46;
        }
        *((_DWORD *)this + 20) |= 0x400u;
        if ((unint64_t)v46 >= v19 || *v46 != 96)
          continue;
        v29 = v46 + 1;
        *((_QWORD *)a2 + 1) = v29;
LABEL_135:
        if ((unint64_t)v29 >= v19 || *v29 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v9);
          if (!(_DWORD)result)
            return result;
          v47 = (_BYTE *)*((_QWORD *)a2 + 1);
          v19 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v9 = *v29;
          v47 = v29 + 1;
          *((_QWORD *)a2 + 1) = v47;
        }
        *((_DWORD *)this + 20) |= 0x800u;
        if ((unint64_t)v47 >= v19 || *v47 != 104)
          continue;
        v30 = v47 + 1;
        *((_QWORD *)a2 + 1) = v30;
LABEL_143:
        if ((unint64_t)v30 >= v19 || *v30 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v10);
          if (!(_DWORD)result)
            return result;
          v48 = (_BYTE *)*((_QWORD *)a2 + 1);
          v19 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v10 = *v30;
          v48 = v30 + 1;
          *((_QWORD *)a2 + 1) = v48;
        }
        *((_DWORD *)this + 20) |= 0x1000u;
        if ((unint64_t)v48 >= v19 || *v48 != 112)
          continue;
        v31 = v48 + 1;
        *((_QWORD *)a2 + 1) = v31;
LABEL_151:
        if ((unint64_t)v31 >= v19 || *v31 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v11);
          if (!(_DWORD)result)
            return result;
          v49 = (_BYTE *)*((_QWORD *)a2 + 1);
          v19 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v11 = *v31;
          v49 = v31 + 1;
          *((_QWORD *)a2 + 1) = v49;
        }
        *((_DWORD *)this + 20) |= 0x2000u;
        if ((unint64_t)v49 >= v19 || *v49 != 120)
          continue;
        v32 = v49 + 1;
        *((_QWORD *)a2 + 1) = v32;
LABEL_159:
        v63 = 0;
        if ((unint64_t)v32 >= v19 || *v32 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v63);
          if (!(_DWORD)result)
            return result;
          v50 = v63;
        }
        else
        {
          v50 = *v32;
          *((_QWORD *)a2 + 1) = v32 + 1;
        }
        if (v50 <= 6)
        {
          *((_DWORD *)this + 20) |= 0x4000u;
          *((_DWORD *)this + 16) = v50;
        }
        v51 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v33 = *((_QWORD *)a2 + 2);
        if ((int)v33 - (int)v51 < 2 || *v51 != 128 || v51[1] != 1)
          continue;
        v34 = v51 + 2;
        *((_QWORD *)a2 + 1) = v34;
LABEL_170:
        if ((unint64_t)v34 >= v33 || (char)*v34 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v57);
          if (!(_DWORD)result)
            return result;
          v52 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v33 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v57 = *v34;
          v52 = v34 + 1;
          *((_QWORD *)a2 + 1) = v52;
        }
        *((_DWORD *)this + 20) |= 0x8000u;
        if ((int)v33 - (int)v52 < 2 || *v52 != 136 || v52[1] != 1)
          continue;
        v35 = (char *)(v52 + 2);
        *((_QWORD *)a2 + 1) = v35;
LABEL_179:
        if ((unint64_t)v35 >= v33 || *v35 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v56);
          if (!(_DWORD)result)
            return result;
          v53 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v33 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v56 = *v35;
          v53 = (unsigned __int8 *)(v35 + 1);
          *((_QWORD *)a2 + 1) = v53;
        }
        *((_DWORD *)this + 20) |= 0x10000u;
        if (v53 != (unsigned __int8 *)v33 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
          continue;
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      case 3u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_44;
        v20 = (char *)*((_QWORD *)a2 + 1);
        v19 = *((_QWORD *)a2 + 2);
        goto LABEL_63;
      case 4u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_44;
        v21 = (char *)*((_QWORD *)a2 + 1);
        v19 = *((_QWORD *)a2 + 2);
        goto LABEL_71;
      case 5u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_44;
        v22 = (char *)*((_QWORD *)a2 + 1);
        v19 = *((_QWORD *)a2 + 2);
        goto LABEL_79;
      case 6u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_44;
        v23 = (char *)*((_QWORD *)a2 + 1);
        v19 = *((_QWORD *)a2 + 2);
        goto LABEL_87;
      case 7u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_44;
        v24 = (char *)*((_QWORD *)a2 + 1);
        v19 = *((_QWORD *)a2 + 2);
        goto LABEL_95;
      case 8u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_44;
        v25 = (char *)*((_QWORD *)a2 + 1);
        v19 = *((_QWORD *)a2 + 2);
        goto LABEL_103;
      case 9u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_44;
        v26 = (char *)*((_QWORD *)a2 + 1);
        v19 = *((_QWORD *)a2 + 2);
        goto LABEL_111;
      case 0xAu:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_44;
        v27 = (char *)*((_QWORD *)a2 + 1);
        v19 = *((_QWORD *)a2 + 2);
        goto LABEL_119;
      case 0xBu:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_44;
        v28 = (char *)*((_QWORD *)a2 + 1);
        v19 = *((_QWORD *)a2 + 2);
        goto LABEL_127;
      case 0xCu:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_44;
        v29 = (char *)*((_QWORD *)a2 + 1);
        v19 = *((_QWORD *)a2 + 2);
        goto LABEL_135;
      case 0xDu:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_44;
        v30 = (char *)*((_QWORD *)a2 + 1);
        v19 = *((_QWORD *)a2 + 2);
        goto LABEL_143;
      case 0xEu:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_44;
        v31 = (char *)*((_QWORD *)a2 + 1);
        v19 = *((_QWORD *)a2 + 2);
        goto LABEL_151;
      case 0xFu:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_44;
        v32 = (char *)*((_QWORD *)a2 + 1);
        v19 = *((_QWORD *)a2 + 2);
        goto LABEL_159;
      case 0x10u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_44;
        v34 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v33 = *((_QWORD *)a2 + 2);
        goto LABEL_170;
      case 0x11u:
        v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_44;
        v35 = (char *)*((_QWORD *)a2 + 1);
        v33 = *((_QWORD *)a2 + 2);
        goto LABEL_179;
      default:
        v14 = TagFallback & 7;
LABEL_44:
        if (v14 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

int *proto::gnss::Emergency::PositionRequest::SerializeWithCachedSizes(int *this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v4;
  int *v5;
  int v6;

  v4 = a2;
  v5 = this;
  v6 = this[20];
  if ((v6 & 1) != 0)
  {
    this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, this[2], a2, a4);
    v6 = v5[20];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_21;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v5[3], v4, a4);
  v6 = v5[20];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_22;
  }
LABEL_21:
  this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[4], v4, a4);
  v6 = v5[20];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_23;
  }
LABEL_22:
  this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v5[5], v4, a4);
  v6 = v5[20];
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_24;
  }
LABEL_23:
  this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v5[6], v4, a4);
  v6 = v5[20];
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_25;
  }
LABEL_24:
  this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v5[7], v4, a4);
  v6 = v5[20];
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_26;
  }
LABEL_25:
  this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v5[8], v4, a4);
  v6 = v5[20];
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_27;
  }
LABEL_26:
  this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, v5[9], v4, a4);
  v6 = v5[20];
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_28;
  }
LABEL_27:
  this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, v5[10], v4, a4);
  v6 = v5[20];
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_29;
  }
LABEL_28:
  this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, v5[11], v4, a4);
  v6 = v5[20];
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_29:
  this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, v5[12], v4, a4);
  v6 = v5[20];
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_31;
  }
LABEL_30:
  this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, v5[13], v4, a4);
  v6 = v5[20];
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_32;
  }
LABEL_31:
  this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, v5[14], v4, a4);
  v6 = v5[20];
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_33;
  }
LABEL_32:
  this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, v5[15], v4, a4);
  v6 = v5[20];
  if ((v6 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_34;
  }
LABEL_33:
  this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF, v5[16], v4, a4);
  v6 = v5[20];
  if ((v6 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x10000) == 0)
      return this;
    return (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11, v5[18], v4, a4);
  }
LABEL_34:
  this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, v5[17], v4, a4);
  if ((v5[20] & 0x10000) != 0)
    return (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11, v5[18], v4, a4);
  return this;
}

uint64_t proto::gnss::Emergency::PositionRequest::ByteSize(proto::gnss::Emergency::PositionRequest *this, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v13;
  int v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;
  int v16;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v17;
  int v18;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v19;
  int v20;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v21;
  int v22;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v23;
  int v24;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v25;
  int v26;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v27;
  int v28;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v29;
  int v30;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v31;
  int v32;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v33;
  int v34;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v35;
  int v36;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v37;
  int v38;

  v3 = *((_DWORD *)this + 20);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_47;
  }
  if ((v3 & 1) == 0)
  {
    v4 = 0;
    if ((v3 & 2) == 0)
      goto LABEL_16;
    goto LABEL_10;
  }
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
  if (v5 >= 0x80)
  {
    v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
    v3 = *((_DWORD *)this + 20);
  }
  else
  {
    v6 = 1;
  }
  v4 = (v6 + 1);
  if ((v3 & 2) != 0)
  {
LABEL_10:
    v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
    if ((v7 & 0x80000000) != 0)
    {
      v8 = 10;
    }
    else if (v7 >= 0x80)
    {
      v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
      v3 = *((_DWORD *)this + 20);
    }
    else
    {
      v8 = 1;
    }
    v4 = (v4 + v8 + 1);
  }
LABEL_16:
  if ((v3 & 4) != 0)
  {
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
    if (v9 >= 0x80)
    {
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2);
      v3 = *((_DWORD *)this + 20);
    }
    else
    {
      v10 = 1;
    }
    v4 = (v4 + v10 + 1);
    if ((v3 & 8) == 0)
    {
LABEL_18:
      if ((v3 & 0x10) == 0)
        goto LABEL_19;
      goto LABEL_31;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_18;
  }
  v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
  if (v11 >= 0x80)
  {
    v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2);
    v3 = *((_DWORD *)this + 20);
  }
  else
  {
    v12 = 1;
  }
  v4 = (v4 + v12 + 1);
  if ((v3 & 0x10) == 0)
  {
LABEL_19:
    if ((v3 & 0x20) == 0)
      goto LABEL_20;
    goto LABEL_35;
  }
LABEL_31:
  v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
  if (v13 >= 0x80)
  {
    v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2);
    v3 = *((_DWORD *)this + 20);
  }
  else
  {
    v14 = 1;
  }
  v4 = (v4 + v14 + 1);
  if ((v3 & 0x20) == 0)
  {
LABEL_20:
    if ((v3 & 0x40) == 0)
      goto LABEL_21;
    goto LABEL_39;
  }
LABEL_35:
  v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 7);
  if (v15 >= 0x80)
  {
    v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2);
    v3 = *((_DWORD *)this + 20);
  }
  else
  {
    v16 = 1;
  }
  v4 = (v4 + v16 + 1);
  if ((v3 & 0x40) == 0)
  {
LABEL_21:
    if ((v3 & 0x80) == 0)
      goto LABEL_47;
    goto LABEL_43;
  }
LABEL_39:
  v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
  if (v17 >= 0x80)
  {
    v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2);
    v3 = *((_DWORD *)this + 20);
  }
  else
  {
    v18 = 1;
  }
  v4 = (v4 + v18 + 1);
  if ((v3 & 0x80) != 0)
  {
LABEL_43:
    v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 9);
    if (v19 >= 0x80)
    {
      v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19, a2);
      v3 = *((_DWORD *)this + 20);
    }
    else
    {
      v20 = 1;
    }
    v4 = (v4 + v20 + 1);
  }
LABEL_47:
  if ((v3 & 0xFF00) == 0)
    goto LABEL_56;
  if ((v3 & 0x100) != 0)
  {
    v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 10);
    if (v21 >= 0x80)
    {
      v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21, a2);
      v3 = *((_DWORD *)this + 20);
    }
    else
    {
      v22 = 1;
    }
    v4 = (v4 + v22 + 1);
    if ((v3 & 0x200) == 0)
    {
LABEL_50:
      if ((v3 & 0x400) == 0)
        goto LABEL_51;
      goto LABEL_66;
    }
  }
  else if ((v3 & 0x200) == 0)
  {
    goto LABEL_50;
  }
  v23 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 11);
  if (v23 >= 0x80)
  {
    v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v23, a2) + 1;
    v3 = *((_DWORD *)this + 20);
  }
  else
  {
    v24 = 2;
  }
  v4 = (v24 + v4);
  if ((v3 & 0x400) == 0)
  {
LABEL_51:
    if ((v3 & 0x800) == 0)
      goto LABEL_52;
    goto LABEL_70;
  }
LABEL_66:
  v25 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 12);
  if (v25 >= 0x80)
  {
    v26 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v25, a2) + 1;
    v3 = *((_DWORD *)this + 20);
  }
  else
  {
    v26 = 2;
  }
  v4 = (v26 + v4);
  if ((v3 & 0x800) == 0)
  {
LABEL_52:
    if ((v3 & 0x1000) == 0)
      goto LABEL_53;
    goto LABEL_74;
  }
LABEL_70:
  v27 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 13);
  if (v27 >= 0x80)
  {
    v28 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v27, a2) + 1;
    v3 = *((_DWORD *)this + 20);
  }
  else
  {
    v28 = 2;
  }
  v4 = (v28 + v4);
  if ((v3 & 0x1000) == 0)
  {
LABEL_53:
    if ((v3 & 0x2000) == 0)
      goto LABEL_54;
    goto LABEL_78;
  }
LABEL_74:
  v29 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 14);
  if (v29 >= 0x80)
  {
    v30 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v29, a2) + 1;
    v3 = *((_DWORD *)this + 20);
  }
  else
  {
    v30 = 2;
  }
  v4 = (v30 + v4);
  if ((v3 & 0x2000) == 0)
  {
LABEL_54:
    if ((v3 & 0x4000) == 0)
      goto LABEL_55;
    goto LABEL_82;
  }
LABEL_78:
  v31 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 15);
  if (v31 >= 0x80)
  {
    v32 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v31, a2) + 1;
    v3 = *((_DWORD *)this + 20);
  }
  else
  {
    v32 = 2;
  }
  v4 = (v32 + v4);
  if ((v3 & 0x4000) == 0)
  {
LABEL_55:
    if ((v3 & 0x8000) == 0)
      goto LABEL_56;
    goto LABEL_88;
  }
LABEL_82:
  v33 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 16);
  if ((v33 & 0x80000000) != 0)
  {
    v34 = 11;
  }
  else if (v33 >= 0x80)
  {
    v34 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v33, a2) + 1;
    v3 = *((_DWORD *)this + 20);
  }
  else
  {
    v34 = 2;
  }
  v4 = (v34 + v4);
  if ((v3 & 0x8000) == 0)
  {
LABEL_56:
    if ((v3 & 0x10000) == 0)
      goto LABEL_96;
    goto LABEL_92;
  }
LABEL_88:
  v35 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 17);
  if (v35 >= 0x80)
  {
    v36 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v35, a2) + 2;
    v3 = *((_DWORD *)this + 20);
  }
  else
  {
    v36 = 3;
  }
  v4 = (v36 + v4);
  if ((v3 & 0x10000) != 0)
  {
LABEL_92:
    v37 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 18);
    if (v37 >= 0x80)
      v38 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v37, a2) + 2;
    else
      v38 = 3;
    v4 = (v38 + v4);
  }
LABEL_96:
  *((_DWORD *)this + 19) = v4;
  return v4;
}

void proto::gnss::Emergency::PositionRequest::CheckTypeAndMergeFrom(proto::gnss::Emergency::PositionRequest *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  proto::gnss::Emergency::PositionRequest::MergeFrom(this, lpsrc);
}

uint64_t proto::gnss::Emergency::PositionRequest::IsInitialized(proto::gnss::Emergency::PositionRequest *this)
{
  return 1;
}

_QWORD *proto::gnss::Emergency::PositionRequest::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.PositionRequest");
}

void sub_10006597C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  char v10;
  _BYTE v11[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 8965);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 1u;
      v6 = *(_QWORD *)(a1 + 8);
      if (!v6)
        operator new();
      v7 = *(_QWORD *)(a2 + 8);
      if (!v7)
        v7 = *(_QWORD *)(proto::gnss::Emergency::UtranGpsTimeMeasured::default_instance_ + 8);
      sub_100063320(v6, v7);
      v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 2) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 2u;
      v8 = *(_DWORD **)(a1 + 16);
      if (!v8)
        operator new();
      v9 = *(_QWORD *)(a2 + 16);
      if (!v9)
        v9 = *(_QWORD *)(proto::gnss::Emergency::UtranGpsTimeMeasured::default_instance_ + 16);
      sub_100062ED4(v8, v9);
    }
  }
}

void sub_100065AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100065ACC(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if ((_QWORD *)proto::gnss::Emergency::UtranGpsTimeMeasured::default_instance_ != result)
  {
    v1 = result;
    v2 = result[1];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    result = (_QWORD *)v1[2];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void proto::gnss::Emergency::UtranGpsTimeMeasured::~UtranGpsTimeMeasured(proto::gnss::Emergency::UtranGpsTimeMeasured *this)
{
  *(_QWORD *)this = off_1000F4C40;
  sub_100065ACC(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = off_1000F4C40;
  sub_100065ACC(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

void proto::gnss::Emergency::UtranGpsTimeMeasured::New(proto::gnss::Emergency::UtranGpsTimeMeasured *this)
{
  operator new();
}

uint64_t proto::gnss::Emergency::UtranGpsTimeMeasured::Clear(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v1 = this;
  LOBYTE(v2) = *(_BYTE *)(this + 28);
  if ((_BYTE)v2)
  {
    if ((*(_BYTE *)(this + 28) & 1) != 0)
    {
      this = *(_QWORD *)(this + 8);
      if (this)
      {
        this = proto::gnss::Emergency::ClsUtranCellTime::Clear(this);
        v2 = *(_DWORD *)(v1 + 28);
      }
    }
    if ((v2 & 2) != 0)
    {
      v3 = *(_QWORD *)(v1 + 16);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 20))
          *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 20) = 0;
      }
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

uint64_t proto::gnss::Emergency::UtranGpsTimeMeasured::MergePartialFromCodedStream(proto::gnss::Emergency::UtranGpsTimeMeasured *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  proto::gnss::Emergency::ClsUtranCellTime *v8;
  char *v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  BOOL v15;
  int v16;
  _BYTE *v17;
  proto::gnss::Emergency::ClsGpsCellTime *v18;
  char *v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t result;
  unsigned int v27;
  unsigned int v28;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
          *((_QWORD *)a2 + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        if (TagFallback >> 3 != 1)
          break;
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_17;
        *((_DWORD *)this + 7) |= 1u;
        v8 = (proto::gnss::Emergency::ClsUtranCellTime *)*((_QWORD *)this + 1);
        if (!v8)
          operator new();
        v27 = 0;
        v9 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v9 >= *((_QWORD *)a2 + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v27))return 0;
        }
        else
        {
          v27 = *v9;
          *((_QWORD *)a2 + 1) = v9 + 1;
        }
        v10 = *((_DWORD *)a2 + 14);
        v11 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v10 + 1;
        if (v10 >= v11)
          return 0;
        v12 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v27);
        if (!proto::gnss::Emergency::ClsUtranCellTime::MergePartialFromCodedStream(v8, a2, v13)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v12);
        v14 = *((_DWORD *)a2 + 14);
        v15 = __OFSUB__(v14, 1);
        v16 = v14 - 1;
        if (v16 < 0 == v15)
          *((_DWORD *)a2 + 14) = v16;
        v17 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v17 < *((_QWORD *)a2 + 2) && *v17 == 18)
        {
          *((_QWORD *)a2 + 1) = v17 + 1;
          goto LABEL_29;
        }
      }
      if (TagFallback >> 3 != 2)
        break;
      v7 = TagFallback & 7;
      if (v7 != 2)
        goto LABEL_17;
LABEL_29:
      *((_DWORD *)this + 7) |= 2u;
      v18 = (proto::gnss::Emergency::ClsGpsCellTime *)*((_QWORD *)this + 2);
      if (!v18)
        operator new();
      v28 = 0;
      v19 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v19 >= *((_QWORD *)a2 + 2) || *v19 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v28))
          return 0;
      }
      else
      {
        v28 = *v19;
        *((_QWORD *)a2 + 1) = v19 + 1;
      }
      v20 = *((_DWORD *)a2 + 14);
      v21 = *((_DWORD *)a2 + 15);
      *((_DWORD *)a2 + 14) = v20 + 1;
      if (v20 >= v21)
        return 0;
      v22 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v28);
      if (!proto::gnss::Emergency::ClsGpsCellTime::MergePartialFromCodedStream(v18, a2, v23)
        || !*((_BYTE *)a2 + 36))
      {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v22);
      v24 = *((_DWORD *)a2 + 14);
      v15 = __OFSUB__(v24, 1);
      v25 = v24 - 1;
      if (v25 < 0 == v15)
        *((_DWORD *)a2 + 14) = v25;
      if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      }
    }
    v7 = TagFallback & 7;
LABEL_17:
    if (v7 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t proto::gnss::Emergency::UtranGpsTimeMeasured::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = this;
  v6 = *(_DWORD *)(this + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0)
      return this;
    goto LABEL_7;
  }
  v7 = *(_QWORD *)(this + 8);
  if (!v7)
    v7 = *(_QWORD *)(proto::gnss::Emergency::UtranGpsTimeMeasured::default_instance_ + 8);
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
  if ((*(_DWORD *)(v5 + 28) & 2) != 0)
  {
LABEL_7:
    v8 = *(_QWORD *)(v5 + 16);
    if (!v8)
      v8 = *(_QWORD *)(proto::gnss::Emergency::UtranGpsTimeMeasured::default_instance_ + 16);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  }
  return this;
}

uint64_t proto::gnss::Emergency::UtranGpsTimeMeasured::ByteSize(proto::gnss::Emergency::UtranGpsTimeMeasured *this, unsigned int a2)
{
  uint64_t v3;
  proto::gnss::Emergency::ClsUtranCellTime *v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  int v7;
  proto::gnss::Emergency::ClsGpsCellTime *v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  unsigned int v10;
  int v11;
  int v12;

  if (!*((_BYTE *)this + 28))
  {
    v3 = 0;
    goto LABEL_18;
  }
  if ((*((_BYTE *)this + 28) & 1) == 0)
  {
    v3 = 0;
    if ((*((_BYTE *)this + 28) & 2) == 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  v4 = (proto::gnss::Emergency::ClsUtranCellTime *)*((_QWORD *)this + 1);
  if (!v4)
    v4 = *(proto::gnss::Emergency::ClsUtranCellTime **)(proto::gnss::Emergency::UtranGpsTimeMeasured::default_instance_
                                                      + 8);
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::ClsUtranCellTime::ByteSize(v4, a2);
  v6 = (int)v5;
  if (v5 >= 0x80)
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
  else
    v7 = 1;
  v3 = (v6 + v7 + 1);
  if ((*((_DWORD *)this + 7) & 2) != 0)
  {
LABEL_12:
    v8 = (proto::gnss::Emergency::ClsGpsCellTime *)*((_QWORD *)this + 2);
    if (!v8)
      v8 = *(proto::gnss::Emergency::ClsGpsCellTime **)(proto::gnss::Emergency::UtranGpsTimeMeasured::default_instance_
                                                      + 16);
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::ClsGpsCellTime::ByteSize(v8, a2);
    v11 = (int)v9;
    if (v9 >= 0x80)
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, v10);
    else
      v12 = 1;
    v3 = (v3 + v11 + v12 + 1);
  }
LABEL_18:
  *((_DWORD *)this + 6) = v3;
  return v3;
}

void proto::gnss::Emergency::UtranGpsTimeMeasured::CheckTypeAndMergeFrom(proto::gnss::Emergency::UtranGpsTimeMeasured *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  sub_10006597C((uint64_t)this, (uint64_t)lpsrc);
}

uint64_t proto::gnss::Emergency::UtranGpsTimeMeasured::IsInitialized(proto::gnss::Emergency::UtranGpsTimeMeasured *this)
{
  return 1;
}

_QWORD *proto::gnss::Emergency::UtranGpsTimeMeasured::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.UtranGpsTimeMeasured");
}

void sub_1000660D4(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  char v8;
  _BYTE v9[48];

  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 9167);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 20);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 8);
      a1[5] |= 1u;
      a1[2] = v6;
      v5 = *(_DWORD *)(a2 + 20);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_DWORD *)(a2 + 12);
      a1[5] |= 2u;
      a1[3] = v7;
    }
  }
}

void sub_10006617C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void proto::gnss::Emergency::GeranGpsTimeMeasuredBased::~GeranGpsTimeMeasuredBased(proto::gnss::Emergency::GeranGpsTimeMeasuredBased *this)
{
  *(_QWORD *)this = off_1000F4CB8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = off_1000F4CB8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

void proto::gnss::Emergency::GeranGpsTimeMeasuredBased::New(proto::gnss::Emergency::GeranGpsTimeMeasuredBased *this)
{
  operator new();
}

uint64_t proto::gnss::Emergency::GeranGpsTimeMeasuredBased::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 20))
    *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t proto::gnss::Emergency::GeranGpsTimeMeasuredBased::MergePartialFromCodedStream(proto::gnss::Emergency::GeranGpsTimeMeasuredBased *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned int *v5;
  unsigned int *v6;
  char *v7;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v9;
  unint64_t v10;
  char *v11;
  char *v12;
  _BYTE *v13;
  unsigned __int8 *v14;
  uint64_t result;

  v5 = (unsigned int *)((char *)this + 8);
  v6 = (unsigned int *)((char *)this + 12);
  while (1)
  {
    while (1)
    {
      v7 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v7 >= *((_QWORD *)a2 + 2) || *v7 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
        *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
        *((_QWORD *)a2 + 1) = v7 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v9 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_16;
      v12 = (char *)*((_QWORD *)a2 + 1);
      v10 = *((_QWORD *)a2 + 2);
      if ((unint64_t)v12 >= v10 || *v12 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
        if (!(_DWORD)result)
          return result;
        v13 = (_BYTE *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
      }
      else
      {
        *v5 = *v12;
        v13 = v12 + 1;
        *((_QWORD *)a2 + 1) = v13;
      }
      *((_DWORD *)this + 5) |= 1u;
      if ((unint64_t)v13 < v10 && *v13 == 16)
      {
        v11 = v13 + 1;
        *((_QWORD *)a2 + 1) = v11;
LABEL_24:
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!(_DWORD)result)
            return result;
          v14 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v6 = *v11;
          v14 = (unsigned __int8 *)(v11 + 1);
          *((_QWORD *)a2 + 1) = v14;
        }
        *((_DWORD *)this + 5) |= 2u;
        if (v14 == (unsigned __int8 *)v10 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      v9 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v11 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        goto LABEL_24;
      }
    }
    else
    {
      v9 = TagFallback & 7;
    }
LABEL_16:
    if (v9 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t proto::gnss::Emergency::GeranGpsTimeMeasuredBased::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v4;
  uint64_t v5;
  int v6;

  v4 = a2;
  v5 = this;
  v6 = *(_DWORD *)(this + 20);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(this + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 20);
  }
  if ((v6 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), v4, a4);
  return this;
}

uint64_t proto::gnss::Emergency::GeranGpsTimeMeasuredBased::ByteSize(proto::gnss::Emergency::GeranGpsTimeMeasuredBased *this, unsigned int a2)
{
  char v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;

  v3 = *((_BYTE *)this + 20);
  if (v3)
  {
    if ((*((_BYTE *)this + 20) & 1) != 0)
    {
      v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
      if (v5 >= 0x80)
      {
        v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2)
           + 1;
        if ((*((_DWORD *)this + 5) & 2) == 0)
          goto LABEL_14;
      }
      else
      {
        v4 = 2;
        if ((v3 & 2) == 0)
          goto LABEL_14;
      }
    }
    else
    {
      v4 = 0;
      if ((*((_BYTE *)this + 20) & 2) == 0)
        goto LABEL_14;
    }
    v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
    if (v6 >= 0x80)
      v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    else
      v7 = 2;
    v4 = (v7 + v4);
  }
  else
  {
    v4 = 0;
  }
LABEL_14:
  *((_DWORD *)this + 4) = v4;
  return v4;
}

void proto::gnss::Emergency::GeranGpsTimeMeasuredBased::CheckTypeAndMergeFrom(proto::gnss::Emergency::GeranGpsTimeMeasuredBased *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  sub_1000660D4(this, (uint64_t)lpsrc);
}

uint64_t proto::gnss::Emergency::GeranGpsTimeMeasuredBased::IsInitialized(proto::gnss::Emergency::GeranGpsTimeMeasuredBased *this)
{
  return 1;
}

_QWORD *proto::gnss::Emergency::GeranGpsTimeMeasuredBased::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.GeranGpsTimeMeasuredBased");
}

void sub_100066520(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  char v8;
  _BYTE v9[48];

  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 9369);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 20);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 8);
      a1[5] |= 1u;
      a1[2] = v6;
      v5 = *(_DWORD *)(a2 + 20);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_DWORD *)(a2 + 12);
      a1[5] |= 2u;
      a1[3] = v7;
    }
  }
}

void sub_1000665C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void proto::gnss::Emergency::GeranGpsTimeMeasuredAssisted::~GeranGpsTimeMeasuredAssisted(proto::gnss::Emergency::GeranGpsTimeMeasuredAssisted *this)
{
  *(_QWORD *)this = off_1000F4D30;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = off_1000F4D30;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

void proto::gnss::Emergency::GeranGpsTimeMeasuredAssisted::New(proto::gnss::Emergency::GeranGpsTimeMeasuredAssisted *this)
{
  operator new();
}

uint64_t proto::gnss::Emergency::GeranGpsTimeMeasuredAssisted::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 20))
    *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t proto::gnss::Emergency::GeranGpsTimeMeasuredAssisted::MergePartialFromCodedStream(proto::gnss::Emergency::GeranGpsTimeMeasuredAssisted *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned int *v5;
  unsigned int *v6;
  char *v7;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v9;
  unint64_t v10;
  char *v11;
  char *v12;
  _BYTE *v13;
  unsigned __int8 *v14;
  uint64_t result;

  v5 = (unsigned int *)((char *)this + 8);
  v6 = (unsigned int *)((char *)this + 12);
  while (1)
  {
    while (1)
    {
      v7 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v7 >= *((_QWORD *)a2 + 2) || *v7 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
        *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
        *((_QWORD *)a2 + 1) = v7 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v9 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_16;
      v12 = (char *)*((_QWORD *)a2 + 1);
      v10 = *((_QWORD *)a2 + 2);
      if ((unint64_t)v12 >= v10 || *v12 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
        if (!(_DWORD)result)
          return result;
        v13 = (_BYTE *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
      }
      else
      {
        *v5 = *v12;
        v13 = v12 + 1;
        *((_QWORD *)a2 + 1) = v13;
      }
      *((_DWORD *)this + 5) |= 1u;
      if ((unint64_t)v13 < v10 && *v13 == 16)
      {
        v11 = v13 + 1;
        *((_QWORD *)a2 + 1) = v11;
LABEL_24:
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!(_DWORD)result)
            return result;
          v14 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v6 = *v11;
          v14 = (unsigned __int8 *)(v11 + 1);
          *((_QWORD *)a2 + 1) = v14;
        }
        *((_DWORD *)this + 5) |= 2u;
        if (v14 == (unsigned __int8 *)v10 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      v9 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v11 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        goto LABEL_24;
      }
    }
    else
    {
      v9 = TagFallback & 7;
    }
LABEL_16:
    if (v9 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t proto::gnss::Emergency::GeranGpsTimeMeasuredAssisted::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v4;
  uint64_t v5;
  int v6;

  v4 = a2;
  v5 = this;
  v6 = *(_DWORD *)(this + 20);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(this + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 20);
  }
  if ((v6 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), v4, a4);
  return this;
}

uint64_t proto::gnss::Emergency::GeranGpsTimeMeasuredAssisted::ByteSize(proto::gnss::Emergency::GeranGpsTimeMeasuredAssisted *this, unsigned int a2)
{
  char v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;

  v3 = *((_BYTE *)this + 20);
  if (v3)
  {
    if ((*((_BYTE *)this + 20) & 1) != 0)
    {
      v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
      if (v5 >= 0x80)
      {
        v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2)
           + 1;
        if ((*((_DWORD *)this + 5) & 2) == 0)
          goto LABEL_14;
      }
      else
      {
        v4 = 2;
        if ((v3 & 2) == 0)
          goto LABEL_14;
      }
    }
    else
    {
      v4 = 0;
      if ((*((_BYTE *)this + 20) & 2) == 0)
        goto LABEL_14;
    }
    v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
    if (v6 >= 0x80)
      v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    else
      v7 = 2;
    v4 = (v7 + v4);
  }
  else
  {
    v4 = 0;
  }
LABEL_14:
  *((_DWORD *)this + 4) = v4;
  return v4;
}

void proto::gnss::Emergency::GeranGpsTimeMeasuredAssisted::CheckTypeAndMergeFrom(proto::gnss::Emergency::GeranGpsTimeMeasuredAssisted *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  sub_100066520(this, (uint64_t)lpsrc);
}

uint64_t proto::gnss::Emergency::GeranGpsTimeMeasuredAssisted::IsInitialized(proto::gnss::Emergency::GeranGpsTimeMeasuredAssisted *this)
{
  return 1;
}

_QWORD *proto::gnss::Emergency::GeranGpsTimeMeasuredAssisted::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.GeranGpsTimeMeasuredAssisted");
}

void sub_10006696C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  char v12;
  _BYTE v13[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v13, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 9626);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v12, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 36);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) != 0)
    {
      *(_DWORD *)(a1 + 36) |= 1u;
      v6 = *(_QWORD *)(a1 + 8);
      if (!v6)
        operator new();
      v7 = *(_QWORD *)(a2 + 8);
      if (!v7)
        v7 = *(_QWORD *)(proto::gnss::Emergency::GpsTimeMeasured::default_instance_ + 8);
      sub_10006597C(v6, v7);
      v5 = *(_DWORD *)(a2 + 36);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          return;
        goto LABEL_18;
      }
    }
    else if ((*(_BYTE *)(a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    *(_DWORD *)(a1 + 36) |= 2u;
    v8 = *(_DWORD **)(a1 + 16);
    if (!v8)
      operator new();
    v9 = *(_QWORD *)(a2 + 16);
    if (!v9)
      v9 = *(_QWORD *)(proto::gnss::Emergency::GpsTimeMeasured::default_instance_ + 16);
    sub_1000660D4(v8, v9);
    if ((*(_DWORD *)(a2 + 36) & 4) != 0)
    {
LABEL_18:
      *(_DWORD *)(a1 + 36) |= 4u;
      v10 = *(_DWORD **)(a1 + 24);
      if (!v10)
        operator new();
      v11 = *(_QWORD *)(a2 + 24);
      if (!v11)
        v11 = *(_QWORD *)(proto::gnss::Emergency::GpsTimeMeasured::default_instance_ + 24);
      sub_100066520(v10, v11);
    }
  }
}

void sub_100066B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100066B20(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  if ((_QWORD *)proto::gnss::Emergency::GpsTimeMeasured::default_instance_ != result)
  {
    v1 = result;
    v2 = result[1];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = v1[2];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    result = (_QWORD *)v1[3];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void proto::gnss::Emergency::GpsTimeMeasured::~GpsTimeMeasured(proto::gnss::Emergency::GpsTimeMeasured *this)
{
  *(_QWORD *)this = off_1000F4DA8;
  sub_100066B20(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = off_1000F4DA8;
  sub_100066B20(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

void proto::gnss::Emergency::GpsTimeMeasured::New(proto::gnss::Emergency::GpsTimeMeasured *this)
{
  operator new();
}

uint64_t proto::gnss::Emergency::GpsTimeMeasured::Clear(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  v1 = this;
  LOBYTE(v2) = *(_BYTE *)(this + 36);
  if ((_BYTE)v2)
  {
    if ((*(_BYTE *)(this + 36) & 1) != 0)
    {
      this = *(_QWORD *)(this + 8);
      if (this)
      {
        this = proto::gnss::Emergency::UtranGpsTimeMeasured::Clear(this);
        v2 = *(_DWORD *)(v1 + 36);
      }
    }
    if ((v2 & 2) != 0)
    {
      v3 = *(_QWORD *)(v1 + 16);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 20))
          *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 20) = 0;
        v2 = *(_DWORD *)(v1 + 36);
      }
    }
    if ((v2 & 4) != 0)
    {
      v4 = *(_QWORD *)(v1 + 24);
      if (v4)
      {
        if (*(_BYTE *)(v4 + 20))
          *(_QWORD *)(v4 + 8) = 0;
        *(_DWORD *)(v4 + 20) = 0;
      }
    }
  }
  *(_DWORD *)(v1 + 36) = 0;
  return this;
}

uint64_t proto::gnss::Emergency::GpsTimeMeasured::MergePartialFromCodedStream(proto::gnss::Emergency::GpsTimeMeasured *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  proto::gnss::Emergency::UtranGpsTimeMeasured *v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  BOOL v16;
  int v17;
  _BYTE *v18;
  proto::gnss::Emergency::GeranGpsTimeMeasuredBased *v19;
  char *v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  _BYTE *v27;
  proto::gnss::Emergency::GeranGpsTimeMeasuredAssisted *v28;
  char *v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;
  int v35;
  uint64_t result;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v5 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
            *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
            *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
            *((_QWORD *)a2 + 1) = v5 + 1;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1)
            break;
          v8 = TagFallback & 7;
          if (v8 != 2)
            goto LABEL_20;
          *((_DWORD *)this + 9) |= 1u;
          v9 = (proto::gnss::Emergency::UtranGpsTimeMeasured *)*((_QWORD *)this + 1);
          if (!v9)
            operator new();
          v37 = 0;
          v10 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v10 >= *((_QWORD *)a2 + 2) || *v10 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v37))return 0;
          }
          else
          {
            v37 = *v10;
            *((_QWORD *)a2 + 1) = v10 + 1;
          }
          v11 = *((_DWORD *)a2 + 14);
          v12 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v11 + 1;
          if (v11 >= v12)
            return 0;
          v13 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v37);
          if (!proto::gnss::Emergency::UtranGpsTimeMeasured::MergePartialFromCodedStream(v9, a2, v14)
            || !*((_BYTE *)a2 + 36))
          {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v13);
          v15 = *((_DWORD *)a2 + 14);
          v16 = __OFSUB__(v15, 1);
          v17 = v15 - 1;
          if (v17 < 0 == v16)
            *((_DWORD *)a2 + 14) = v17;
          v18 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v18 < *((_QWORD *)a2 + 2) && *v18 == 18)
          {
            *((_QWORD *)a2 + 1) = v18 + 1;
            goto LABEL_32;
          }
        }
        if (v7 != 2)
          break;
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_20;
LABEL_32:
        *((_DWORD *)this + 9) |= 2u;
        v19 = (proto::gnss::Emergency::GeranGpsTimeMeasuredBased *)*((_QWORD *)this + 2);
        if (!v19)
          operator new();
        v38 = 0;
        v20 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v20 >= *((_QWORD *)a2 + 2) || *v20 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v38))return 0;
        }
        else
        {
          v38 = *v20;
          *((_QWORD *)a2 + 1) = v20 + 1;
        }
        v21 = *((_DWORD *)a2 + 14);
        v22 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v21 + 1;
        if (v21 >= v22)
          return 0;
        v23 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v38);
        if (!proto::gnss::Emergency::GeranGpsTimeMeasuredBased::MergePartialFromCodedStream(v19, a2, v24)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v23);
        v25 = *((_DWORD *)a2 + 14);
        v16 = __OFSUB__(v25, 1);
        v26 = v25 - 1;
        if (v26 < 0 == v16)
          *((_DWORD *)a2 + 14) = v26;
        v27 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v27 < *((_QWORD *)a2 + 2) && *v27 == 26)
        {
          *((_QWORD *)a2 + 1) = v27 + 1;
          goto LABEL_46;
        }
      }
      if (v7 != 3)
        break;
      v8 = TagFallback & 7;
      if (v8 != 2)
        goto LABEL_20;
LABEL_46:
      *((_DWORD *)this + 9) |= 4u;
      v28 = (proto::gnss::Emergency::GeranGpsTimeMeasuredAssisted *)*((_QWORD *)this + 3);
      if (!v28)
        operator new();
      v39 = 0;
      v29 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v29 >= *((_QWORD *)a2 + 2) || *v29 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v39))
          return 0;
      }
      else
      {
        v39 = *v29;
        *((_QWORD *)a2 + 1) = v29 + 1;
      }
      v30 = *((_DWORD *)a2 + 14);
      v31 = *((_DWORD *)a2 + 15);
      *((_DWORD *)a2 + 14) = v30 + 1;
      if (v30 >= v31)
        return 0;
      v32 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v39);
      if (!proto::gnss::Emergency::GeranGpsTimeMeasuredAssisted::MergePartialFromCodedStream(v28, a2, v33)|| !*((_BYTE *)a2 + 36))
      {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v32);
      v34 = *((_DWORD *)a2 + 14);
      v16 = __OFSUB__(v34, 1);
      v35 = v34 - 1;
      if (v35 < 0 == v16)
        *((_DWORD *)a2 + 14) = v35;
      if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      }
    }
    v8 = TagFallback & 7;
LABEL_20:
    if (v8 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t proto::gnss::Emergency::GpsTimeMeasured::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = this;
  v6 = *(_DWORD *)(this + 36);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(this + 8);
    if (!v7)
      v7 = *(_QWORD *)(proto::gnss::Emergency::GpsTimeMeasured::default_instance_ + 8);
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    v6 = *(_DWORD *)(v5 + 36);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        return this;
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v8 = *(_QWORD *)(v5 + 16);
  if (!v8)
    v8 = *(_QWORD *)(proto::gnss::Emergency::GpsTimeMeasured::default_instance_ + 16);
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  if ((*(_DWORD *)(v5 + 36) & 4) != 0)
  {
LABEL_11:
    v9 = *(_QWORD *)(v5 + 24);
    if (!v9)
      v9 = *(_QWORD *)(proto::gnss::Emergency::GpsTimeMeasured::default_instance_ + 24);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v9, a2, a4);
  }
  return this;
}

uint64_t proto::gnss::Emergency::GpsTimeMeasured::ByteSize(proto::gnss::Emergency::GpsTimeMeasured *this, unsigned int a2)
{
  int v3;
  uint64_t v4;
  proto::gnss::Emergency::UtranGpsTimeMeasured *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  int v8;
  proto::gnss::Emergency::GeranGpsTimeMeasuredBased *v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  int v12;
  proto::gnss::Emergency::GeranGpsTimeMeasuredAssisted *v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  unsigned int v15;
  int v16;
  int v17;

  LOBYTE(v3) = *((_BYTE *)this + 36);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_25;
  }
  if ((*((_BYTE *)this + 36) & 1) != 0)
  {
    v5 = (proto::gnss::Emergency::UtranGpsTimeMeasured *)*((_QWORD *)this + 1);
    if (!v5)
      v5 = *(proto::gnss::Emergency::UtranGpsTimeMeasured **)(proto::gnss::Emergency::GpsTimeMeasured::default_instance_
                                                            + 8);
    v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::UtranGpsTimeMeasured::ByteSize(v5, a2);
    v7 = (int)v6;
    if (v6 >= 0x80)
      v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2);
    else
      v8 = 1;
    v4 = (v7 + v8 + 1);
    v3 = *((_DWORD *)this + 9);
    if ((v3 & 2) == 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  v4 = 0;
  if ((*((_BYTE *)this + 36) & 2) != 0)
  {
LABEL_12:
    v9 = (proto::gnss::Emergency::GeranGpsTimeMeasuredBased *)*((_QWORD *)this + 2);
    if (!v9)
      v9 = *(proto::gnss::Emergency::GeranGpsTimeMeasuredBased **)(proto::gnss::Emergency::GpsTimeMeasured::default_instance_
                                                                 + 16);
    v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::GeranGpsTimeMeasuredBased::ByteSize(v9, a2);
    v11 = (int)v10;
    if (v10 >= 0x80)
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2);
    else
      v12 = 1;
    v4 = (v4 + v11 + v12 + 1);
    v3 = *((_DWORD *)this + 9);
  }
LABEL_18:
  if ((v3 & 4) != 0)
  {
    v13 = (proto::gnss::Emergency::GeranGpsTimeMeasuredAssisted *)*((_QWORD *)this + 3);
    if (!v13)
      v13 = *(proto::gnss::Emergency::GeranGpsTimeMeasuredAssisted **)(proto::gnss::Emergency::GpsTimeMeasured::default_instance_
                                                                     + 24);
    v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::GeranGpsTimeMeasuredAssisted::ByteSize(v13, a2);
    v16 = (int)v14;
    if (v14 >= 0x80)
      v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, v15);
    else
      v17 = 1;
    v4 = (v4 + v16 + v17 + 1);
  }
LABEL_25:
  *((_DWORD *)this + 8) = v4;
  return v4;
}

void proto::gnss::Emergency::GpsTimeMeasured::CheckTypeAndMergeFrom(proto::gnss::Emergency::GpsTimeMeasured *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  sub_10006696C((uint64_t)this, (uint64_t)lpsrc);
}

uint64_t proto::gnss::Emergency::GpsTimeMeasured::IsInitialized(proto::gnss::Emergency::GpsTimeMeasured *this)
{
  return 1;
}

_QWORD *proto::gnss::Emergency::GpsTimeMeasured::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.GpsTimeMeasured");
}

void sub_1000672E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _BYTE v10[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v10, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 9843);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 24);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 16);
      if (v6 >= 6)
        __assert_rtn("set_gps_time_measured_type", "GnssEmergencyTypes.pb.h", 16920, "::proto::gnss::Emergency::ClsNetworkType_IsValid(value)");
      *(_DWORD *)(a1 + 24) |= 1u;
      *(_DWORD *)(a1 + 16) = v6;
      v5 = *(_DWORD *)(a2 + 24);
    }
    if ((v5 & 2) != 0)
    {
      *(_DWORD *)(a1 + 24) |= 2u;
      v7 = *(_QWORD *)(a1 + 8);
      if (!v7)
        operator new();
      v8 = *(_QWORD *)(a2 + 8);
      if (!v8)
        v8 = *(_QWORD *)(proto::gnss::Emergency::GpsTimeMeasuredParams::default_instance_ + 8);
      sub_10006696C(v7, v8);
    }
  }
}

void sub_100067404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void proto::gnss::Emergency::GpsTimeMeasuredParams::~GpsTimeMeasuredParams(proto::gnss::Emergency::GpsTimeMeasuredParams *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1000F4E20;
  if ((proto::gnss::Emergency::GpsTimeMeasuredParams *)proto::gnss::Emergency::GpsTimeMeasuredParams::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  proto::gnss::Emergency::GpsTimeMeasuredParams::~GpsTimeMeasuredParams(this);
  operator delete();
}

void proto::gnss::Emergency::GpsTimeMeasuredParams::New(proto::gnss::Emergency::GpsTimeMeasuredParams *this)
{
  operator new();
}

uint64_t proto::gnss::Emergency::GpsTimeMeasuredParams::Clear(uint64_t this)
{
  uint64_t v1;
  char v2;

  v1 = this;
  v2 = *(_BYTE *)(this + 24);
  if (v2)
  {
    *(_DWORD *)(this + 16) = 0;
    if ((v2 & 2) != 0)
    {
      this = *(_QWORD *)(this + 8);
      if (this)
        this = proto::gnss::Emergency::GpsTimeMeasured::Clear(this);
    }
  }
  *(_DWORD *)(v1 + 24) = 0;
  return this;
}

uint64_t proto::gnss::Emergency::GpsTimeMeasuredParams::MergePartialFromCodedStream(proto::gnss::Emergency::GpsTimeMeasuredParams *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  uint64_t result;
  _BYTE *v11;
  proto::gnss::Emergency::GpsTimeMeasured *v12;
  char *v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  int v20;
  unsigned int v21;
  unsigned int v22;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
          *((_QWORD *)a2 + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        if (TagFallback >> 3 != 1)
          break;
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_15;
        v21 = 0;
        v8 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v21);
          if (!(_DWORD)result)
            return result;
          v9 = v21;
        }
        else
        {
          v9 = *v8;
          *((_QWORD *)a2 + 1) = v8 + 1;
        }
        if (v9 <= 5)
        {
          *((_DWORD *)this + 6) |= 1u;
          *((_DWORD *)this + 4) = v9;
        }
        v11 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v11 < *((_QWORD *)a2 + 2) && *v11 == 18)
        {
          *((_QWORD *)a2 + 1) = v11 + 1;
          goto LABEL_25;
        }
      }
      if (TagFallback >> 3 != 2)
      {
        v7 = TagFallback & 7;
        goto LABEL_15;
      }
      v7 = TagFallback & 7;
      if (v7 == 2)
        break;
LABEL_15:
      if (v7 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) == 0)
        return 0;
    }
LABEL_25:
    *((_DWORD *)this + 6) |= 2u;
    v12 = (proto::gnss::Emergency::GpsTimeMeasured *)*((_QWORD *)this + 1);
    if (!v12)
      operator new();
    v22 = 0;
    v13 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v13 >= *((_QWORD *)a2 + 2) || *v13 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v22))
        return 0;
    }
    else
    {
      v22 = *v13;
      *((_QWORD *)a2 + 1) = v13 + 1;
    }
    v14 = *((_DWORD *)a2 + 14);
    v15 = *((_DWORD *)a2 + 15);
    *((_DWORD *)a2 + 14) = v14 + 1;
    if (v14 >= v15)
      return 0;
    v16 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v22);
    if (!proto::gnss::Emergency::GpsTimeMeasured::MergePartialFromCodedStream(v12, a2, v17)
      || !*((_BYTE *)a2 + 36))
    {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v16);
    v18 = *((_DWORD *)a2 + 14);
    v19 = __OFSUB__(v18, 1);
    v20 = v18 - 1;
    if (v20 < 0 == v19)
      *((_DWORD *)a2 + 14) = v20;
    if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
      && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
    {
      *((_DWORD *)a2 + 8) = 0;
      result = 1;
      *((_BYTE *)a2 + 36) = 1;
      return result;
    }
  }
}

uint64_t proto::gnss::Emergency::GpsTimeMeasuredParams::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = this;
  v6 = *(_DWORD *)(this + 24);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(this + 16), (int)a2, a4);
    if ((*(_DWORD *)(v5 + 24) & 2) == 0)
      return this;
  }
  else if ((v6 & 2) == 0)
  {
    return this;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if (!v7)
    v7 = *(_QWORD *)(proto::gnss::Emergency::GpsTimeMeasuredParams::default_instance_ + 8);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
}

uint64_t proto::gnss::Emergency::GpsTimeMeasuredParams::ByteSize(proto::gnss::Emergency::GpsTimeMeasuredParams *this, unsigned int a2)
{
  char v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  proto::gnss::Emergency::GpsTimeMeasured *v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  unsigned int v8;
  int v9;
  int v10;

  v3 = *((_BYTE *)this + 24);
  if (v3)
  {
    if ((*((_BYTE *)this + 24) & 1) != 0)
    {
      v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
      if ((v5 & 0x80000000) != 0)
      {
        v4 = 11;
        if ((v3 & 2) == 0)
          goto LABEL_19;
      }
      else if (v5 >= 0x80)
      {
        v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2)
           + 1;
        if ((*((_DWORD *)this + 6) & 2) == 0)
          goto LABEL_19;
      }
      else
      {
        v4 = 2;
        if ((v3 & 2) == 0)
          goto LABEL_19;
      }
    }
    else
    {
      v4 = 0;
      if ((*((_BYTE *)this + 24) & 2) == 0)
        goto LABEL_19;
    }
    v6 = (proto::gnss::Emergency::GpsTimeMeasured *)*((_QWORD *)this + 1);
    if (!v6)
      v6 = *(proto::gnss::Emergency::GpsTimeMeasured **)(proto::gnss::Emergency::GpsTimeMeasuredParams::default_instance_
                                                       + 8);
    v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::GpsTimeMeasured::ByteSize(v6, a2);
    v9 = (int)v7;
    if (v7 >= 0x80)
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, v8);
    else
      v10 = 1;
    v4 = (v4 + v9 + v10 + 1);
  }
  else
  {
    v4 = 0;
  }
LABEL_19:
  *((_DWORD *)this + 5) = v4;
  return v4;
}

void proto::gnss::Emergency::GpsTimeMeasuredParams::CheckTypeAndMergeFrom(proto::gnss::Emergency::GpsTimeMeasuredParams *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  sub_1000672E8((uint64_t)this, (uint64_t)lpsrc);
}

uint64_t proto::gnss::Emergency::GpsTimeMeasuredParams::IsInitialized(proto::gnss::Emergency::GpsTimeMeasuredParams *this)
{
  return 1;
}

_QWORD *proto::gnss::Emergency::GpsTimeMeasuredParams::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.GpsTimeMeasuredParams");
}

void sub_100067910(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  char v9;
  _BYTE v10[48];

  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v10, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 10076);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 24);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      v7 = *(_DWORD *)(a2 + 8);
      a1[6] |= 1u;
      a1[2] = v7;
      v5 = *(_DWORD *)(a2 + 24);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          return;
        goto LABEL_7;
      }
    }
    else if ((*(_BYTE *)(a2 + 24) & 2) == 0)
    {
      goto LABEL_6;
    }
    v8 = *(_DWORD *)(a2 + 12);
    a1[6] |= 2u;
    a1[3] = v8;
    if ((*(_DWORD *)(a2 + 24) & 4) == 0)
      return;
LABEL_7:
    v6 = *(_DWORD *)(a2 + 16);
    a1[6] |= 4u;
    a1[4] = v6;
  }
}

void sub_1000679E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void proto::gnss::Emergency::GpsTOD::~GpsTOD(proto::gnss::Emergency::GpsTOD *this)
{
  *(_QWORD *)this = off_1000F4E98;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = off_1000F4E98;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

void proto::gnss::Emergency::GpsTOD::New(proto::gnss::Emergency::GpsTOD *this)
{
  operator new();
}

uint64_t proto::gnss::Emergency::GpsTOD::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 24))
  {
    *(_QWORD *)(this + 8) = 0;
    *(_DWORD *)(this + 16) = 0;
  }
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t proto::gnss::Emergency::GpsTOD::MergePartialFromCodedStream(proto::gnss::Emergency::GpsTOD *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  char *v8;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v10;
  int v11;
  unint64_t v12;
  char *v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  _BYTE *v17;
  unsigned __int8 *v18;
  uint64_t result;

  v5 = (unsigned int *)((char *)this + 8);
  v6 = (unsigned int *)((char *)this + 12);
  v7 = (unsigned int *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v8 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v8;
          *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
          *((_QWORD *)a2 + 1) = v8 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v10 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v14 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v14 >= v12 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v15 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v5 = *v14;
          v15 = v14 + 1;
          *((_QWORD *)a2 + 1) = v15;
        }
        *((_DWORD *)this + 6) |= 1u;
        if ((unint64_t)v15 < v12 && *v15 == 16)
        {
          v16 = v15 + 1;
          *((_QWORD *)a2 + 1) = v16;
          goto LABEL_27;
        }
      }
      if (v10 != 2)
        break;
      v11 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_19;
      v16 = (char *)*((_QWORD *)a2 + 1);
      v12 = *((_QWORD *)a2 + 2);
LABEL_27:
      if ((unint64_t)v16 >= v12 || *v16 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
        if (!(_DWORD)result)
          return result;
        v17 = (_BYTE *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
      }
      else
      {
        *v6 = *v16;
        v17 = v16 + 1;
        *((_QWORD *)a2 + 1) = v17;
      }
      *((_DWORD *)this + 6) |= 2u;
      if ((unint64_t)v17 < v12 && *v17 == 24)
      {
        v13 = v17 + 1;
        *((_QWORD *)a2 + 1) = v13;
LABEL_35:
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!(_DWORD)result)
            return result;
          v18 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v7 = *v13;
          v18 = (unsigned __int8 *)(v13 + 1);
          *((_QWORD *)a2 + 1) = v18;
        }
        *((_DWORD *)this + 6) |= 4u;
        if (v18 == (unsigned __int8 *)v12 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
      }
    }
    if (v10 == 3)
    {
      v11 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v13 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        goto LABEL_35;
      }
    }
    else
    {
      v11 = TagFallback & 7;
    }
LABEL_19:
    if (v11 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

int *proto::gnss::Emergency::GpsTOD::SerializeWithCachedSizes(int *this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v4;
  int *v5;
  int v6;

  v4 = a2;
  v5 = this;
  v6 = this[6];
  if ((v6 & 1) != 0)
  {
    this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, this[2], a2, a4);
    v6 = v5[6];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        return this;
      return (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[4], v4, a4);
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v5[3], v4, a4);
  if ((v5[6] & 4) != 0)
    return (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[4], v4, a4);
  return this;
}

uint64_t proto::gnss::Emergency::GpsTOD::ByteSize(proto::gnss::Emergency::GpsTOD *this, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;

  LOBYTE(v3) = *((_BYTE *)this + 24);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_19;
  }
  if ((*((_BYTE *)this + 24) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
    if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *((_DWORD *)this + 6);
      if ((v3 & 2) == 0)
        goto LABEL_14;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_14;
    }
  }
  else
  {
    v4 = 0;
    if ((*((_BYTE *)this + 24) & 2) == 0)
      goto LABEL_14;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
  if (v6 >= 0x80)
  {
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    v3 = *((_DWORD *)this + 6);
  }
  else
  {
    v7 = 2;
  }
  v4 = (v7 + v4);
LABEL_14:
  if ((v3 & 4) != 0)
  {
    v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
    if (v8 >= 0x80)
      v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2) + 1;
    else
      v9 = 2;
    v4 = (v9 + v4);
  }
LABEL_19:
  *((_DWORD *)this + 5) = v4;
  return v4;
}

void proto::gnss::Emergency::GpsTOD::CheckTypeAndMergeFrom(proto::gnss::Emergency::GpsTOD *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  sub_100067910(this, (uint64_t)lpsrc);
}

uint64_t proto::gnss::Emergency::GpsTOD::IsInitialized(proto::gnss::Emergency::GpsTOD *this)
{
  return 1;
}

_QWORD *proto::gnss::Emergency::GpsTOD::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.GpsTOD");
}

void sub_100067E58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  char v13;
  _BYTE v14[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v14, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 10417);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v13, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 40);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) != 0)
    {
      v9 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 40) |= 1u;
      *(_DWORD *)(a1 + 8) = v9;
      v5 = *(_DWORD *)(a2 + 40);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          goto LABEL_7;
        goto LABEL_19;
      }
    }
    else if ((*(_BYTE *)(a2 + 40) & 2) == 0)
    {
      goto LABEL_6;
    }
    v10 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a1 + 40) |= 2u;
    *(_DWORD *)(a1 + 12) = v10;
    v5 = *(_DWORD *)(a2 + 40);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0)
        goto LABEL_8;
      goto LABEL_20;
    }
LABEL_19:
    v11 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 40) |= 4u;
    *(_DWORD *)(a1 + 16) = v11;
    v5 = *(_DWORD *)(a2 + 40);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0)
        goto LABEL_10;
      goto LABEL_9;
    }
LABEL_20:
    v12 = *(_DWORD *)(a2 + 20);
    if (v12 >= 4)
      __assert_rtn("set_fix_type", "GnssEmergencyTypes.pb.h", 17125, "::proto::gnss::Emergency::FixType_IsValid(value)");
    *(_DWORD *)(a1 + 40) |= 8u;
    *(_DWORD *)(a1 + 20) = v12;
    v5 = *(_DWORD *)(a2 + 40);
    if ((v5 & 0x10) == 0)
      goto LABEL_10;
LABEL_9:
    v6 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 40) |= 0x10u;
    *(_DWORD *)(a1 + 32) = v6;
    v5 = *(_DWORD *)(a2 + 40);
LABEL_10:
    if ((v5 & 0x20) != 0)
    {
      *(_DWORD *)(a1 + 40) |= 0x20u;
      v7 = *(_DWORD **)(a1 + 24);
      if (!v7)
        operator new();
      v8 = *(_QWORD *)(a2 + 24);
      if (!v8)
        v8 = *(_QWORD *)(proto::gnss::Emergency::LocationInfo::default_instance_ + 24);
      sub_100067910(v7, v8);
    }
  }
}

void sub_100067FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void proto::gnss::Emergency::LocationInfo::~LocationInfo(proto::gnss::Emergency::LocationInfo *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1000F4F10;
  if ((proto::gnss::Emergency::LocationInfo *)proto::gnss::Emergency::LocationInfo::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 3);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  proto::gnss::Emergency::LocationInfo::~LocationInfo(this);
  operator delete();
}

void proto::gnss::Emergency::LocationInfo::New(proto::gnss::Emergency::LocationInfo *this)
{
  operator new();
}

uint64_t proto::gnss::Emergency::LocationInfo::Clear(uint64_t this)
{
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(this + 40);
  if (v1)
  {
    *(_DWORD *)(this + 32) = 0;
    *(_QWORD *)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
    if ((v1 & 0x20) != 0)
    {
      v2 = *(_QWORD *)(this + 24);
      if (v2)
      {
        if (*(_BYTE *)(v2 + 24))
        {
          *(_QWORD *)(v2 + 8) = 0;
          *(_DWORD *)(v2 + 16) = 0;
        }
        *(_DWORD *)(v2 + 24) = 0;
      }
    }
  }
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t proto::gnss::Emergency::LocationInfo::MergePartialFromCodedStream(proto::gnss::Emergency::LocationInfo *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  char *v9;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v11;
  unint64_t v12;
  char *v13;
  _BYTE *v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  char *v19;
  int v20;
  uint64_t result;
  _BYTE *v22;
  _BYTE *v23;
  unsigned int v24;
  _BYTE *v25;
  _BYTE *v26;
  proto::gnss::Emergency::GpsTOD *v27;
  char *v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  BOOL v34;
  int v35;
  unsigned int v36;
  unsigned int v37;

  v5 = (unsigned int *)((char *)this + 8);
  v6 = (unsigned int *)((char *)this + 12);
  v7 = (unsigned int *)((char *)this + 16);
  v8 = (unsigned int *)((char *)this + 32);
  while (2)
  {
    v9 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v9 >= *((_QWORD *)a2 + 2) || *v9 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v9;
      *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      *((_QWORD *)a2 + 1) = v9 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_23;
        v13 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v14 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v5 = *v13;
          v14 = v13 + 1;
          *((_QWORD *)a2 + 1) = v14;
        }
        *((_DWORD *)this + 10) |= 1u;
        if ((unint64_t)v14 < v12 && *v14 == 16)
        {
          v15 = v14 + 1;
          *((_QWORD *)a2 + 1) = v15;
          goto LABEL_31;
        }
        continue;
      case 2u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_23;
        v15 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
LABEL_31:
        if ((unint64_t)v15 >= v12 || *v15 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!(_DWORD)result)
            return result;
          v22 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v6 = *v15;
          v22 = v15 + 1;
          *((_QWORD *)a2 + 1) = v22;
        }
        *((_DWORD *)this + 10) |= 2u;
        if ((unint64_t)v22 >= v12 || *v22 != 24)
          continue;
        v16 = v22 + 1;
        *((_QWORD *)a2 + 1) = v16;
LABEL_39:
        if ((unint64_t)v16 >= v12 || *v16 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!(_DWORD)result)
            return result;
          v23 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v7 = *v16;
          v23 = v16 + 1;
          *((_QWORD *)a2 + 1) = v23;
        }
        *((_DWORD *)this + 10) |= 4u;
        if ((unint64_t)v23 >= v12 || *v23 != 32)
          continue;
        v17 = v23 + 1;
        *((_QWORD *)a2 + 1) = v17;
LABEL_47:
        v36 = 0;
        if ((unint64_t)v17 >= v12 || *v17 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v36);
          if (!(_DWORD)result)
            return result;
          v24 = v36;
        }
        else
        {
          v24 = *v17;
          *((_QWORD *)a2 + 1) = v17 + 1;
        }
        if (v24 <= 3)
        {
          *((_DWORD *)this + 10) |= 8u;
          *((_DWORD *)this + 5) = v24;
        }
        v25 = (_BYTE *)*((_QWORD *)a2 + 1);
        v18 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v25 >= v18 || *v25 != 40)
          continue;
        v19 = v25 + 1;
        *((_QWORD *)a2 + 1) = v19;
LABEL_57:
        if ((unint64_t)v19 >= v18 || *v19 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v8);
          if (!(_DWORD)result)
            return result;
          v26 = (_BYTE *)*((_QWORD *)a2 + 1);
          v18 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v8 = *v19;
          v26 = v19 + 1;
          *((_QWORD *)a2 + 1) = v26;
        }
        v20 = *((_DWORD *)this + 10) | 0x10;
        *((_DWORD *)this + 10) = v20;
        if ((unint64_t)v26 >= v18 || *v26 != 50)
          continue;
        *((_QWORD *)a2 + 1) = v26 + 1;
LABEL_65:
        *((_DWORD *)this + 10) = v20 | 0x20;
        v27 = (proto::gnss::Emergency::GpsTOD *)*((_QWORD *)this + 3);
        if (!v27)
          operator new();
        v37 = 0;
        v28 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v28 >= *((_QWORD *)a2 + 2) || *v28 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v37))return 0;
        }
        else
        {
          v37 = *v28;
          *((_QWORD *)a2 + 1) = v28 + 1;
        }
        v29 = *((_DWORD *)a2 + 14);
        v30 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v29 + 1;
        if (v29 < v30)
        {
          v31 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v37);
          if (proto::gnss::Emergency::GpsTOD::MergePartialFromCodedStream(v27, a2, v32))
          {
            if (*((_BYTE *)a2 + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v31);
              v33 = *((_DWORD *)a2 + 14);
              v34 = __OFSUB__(v33, 1);
              v35 = v33 - 1;
              if (v35 < 0 == v34)
                *((_DWORD *)a2 + 14) = v35;
              if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
                && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
              {
                *((_DWORD *)a2 + 8) = 0;
                result = 1;
                *((_BYTE *)a2 + 36) = 1;
                return result;
              }
              continue;
            }
          }
        }
        return 0;
      case 3u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_23;
        v16 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        goto LABEL_39;
      case 4u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_23;
        v17 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        goto LABEL_47;
      case 5u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_23;
        v19 = (char *)*((_QWORD *)a2 + 1);
        v18 = *((_QWORD *)a2 + 2);
        goto LABEL_57;
      case 6u:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_23;
        v20 = *((_DWORD *)this + 10);
        goto LABEL_65;
      default:
        v11 = TagFallback & 7;
LABEL_23:
        if (v11 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t proto::gnss::Emergency::LocationInfo::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = this;
  v6 = *(_DWORD *)(this + 40);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(this + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 40);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), a2, a4);
  v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 16), a2, a4);
  v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
LABEL_12:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(_DWORD *)(v5 + 32), a2, a4);
    if ((*(_DWORD *)(v5 + 40) & 0x20) == 0)
      return this;
    goto LABEL_13;
  }
LABEL_11:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_DWORD *)(v5 + 20), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 0x10) != 0)
    goto LABEL_12;
LABEL_6:
  if ((v6 & 0x20) == 0)
    return this;
LABEL_13:
  v7 = *(_QWORD *)(v5 + 24);
  if (!v7)
    v7 = *(_QWORD *)(proto::gnss::Emergency::LocationInfo::default_instance_ + 24);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v7, a2, a4);
}

uint64_t proto::gnss::Emergency::LocationInfo::ByteSize(proto::gnss::Emergency::LocationInfo *this, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v12;
  int v13;
  proto::gnss::Emergency::GpsTOD *v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;
  unsigned int v16;
  int v17;
  int v18;

  LOBYTE(v3) = *((_BYTE *)this + 40);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_39;
  }
  if ((*((_BYTE *)this + 40) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
    if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *((_DWORD *)this + 10);
      if ((v3 & 2) == 0)
        goto LABEL_14;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_14;
    }
  }
  else
  {
    v4 = 0;
    if ((*((_BYTE *)this + 40) & 2) == 0)
      goto LABEL_14;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
  if (v6 >= 0x80)
  {
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    v3 = *((_DWORD *)this + 10);
  }
  else
  {
    v7 = 2;
  }
  v4 = (v7 + v4);
LABEL_14:
  if ((v3 & 4) != 0)
  {
    v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
    if (v8 >= 0x80)
    {
      v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2) + 1;
      v3 = *((_DWORD *)this + 10);
    }
    else
    {
      v9 = 2;
    }
    v4 = (v9 + v4);
    if ((v3 & 8) == 0)
    {
LABEL_16:
      if ((v3 & 0x10) == 0)
        goto LABEL_17;
LABEL_29:
      v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
      if (v12 >= 0x80)
      {
        v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, a2) + 1;
        v3 = *((_DWORD *)this + 10);
      }
      else
      {
        v13 = 2;
      }
      v4 = (v13 + v4);
      if ((v3 & 0x20) == 0)
        goto LABEL_39;
      goto LABEL_33;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_16;
  }
  v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
  if ((v10 & 0x80000000) != 0)
  {
    v11 = 11;
  }
  else if (v10 >= 0x80)
  {
    v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2) + 1;
    v3 = *((_DWORD *)this + 10);
  }
  else
  {
    v11 = 2;
  }
  v4 = (v11 + v4);
  if ((v3 & 0x10) != 0)
    goto LABEL_29;
LABEL_17:
  if ((v3 & 0x20) == 0)
    goto LABEL_39;
LABEL_33:
  v14 = (proto::gnss::Emergency::GpsTOD *)*((_QWORD *)this + 3);
  if (!v14)
    v14 = *(proto::gnss::Emergency::GpsTOD **)(proto::gnss::Emergency::LocationInfo::default_instance_ + 24);
  v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::GpsTOD::ByteSize(v14, a2);
  v17 = (int)v15;
  if (v15 >= 0x80)
    v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, v16);
  else
    v18 = 1;
  v4 = (v4 + v17 + v18 + 1);
LABEL_39:
  *((_DWORD *)this + 9) = v4;
  return v4;
}

void proto::gnss::Emergency::LocationInfo::CheckTypeAndMergeFrom(proto::gnss::Emergency::LocationInfo *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  sub_100067E58((uint64_t)this, (uint64_t)lpsrc);
}

uint64_t proto::gnss::Emergency::LocationInfo::IsInitialized(proto::gnss::Emergency::LocationInfo *this)
{
  return 1;
}

_QWORD *proto::gnss::Emergency::LocationInfo::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.LocationInfo");
}

void sub_100068814(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  _DWORD *v9;
  uint64_t v10;
  char v11;
  _BYTE v12[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v12, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 10705);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 32);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 32) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      v5 = *(_DWORD *)(a2 + 32);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          goto LABEL_7;
        goto LABEL_11;
      }
    }
    else if ((*(_BYTE *)(a2 + 32) & 2) == 0)
    {
      goto LABEL_6;
    }
    v7 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a1 + 32) |= 2u;
    *(_DWORD *)(a1 + 12) = v7;
    v5 = *(_DWORD *)(a2 + 32);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0)
        return;
      goto LABEL_12;
    }
LABEL_11:
    v8 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 32) |= 4u;
    *(_DWORD *)(a1 + 24) = v8;
    if ((*(_DWORD *)(a2 + 32) & 8) == 0)
      return;
LABEL_12:
    *(_DWORD *)(a1 + 32) |= 8u;
    v9 = *(_DWORD **)(a1 + 16);
    if (!v9)
      operator new();
    v10 = *(_QWORD *)(a2 + 16);
    if (!v10)
      v10 = *(_QWORD *)(proto::gnss::Emergency::CellInfo::default_instance_ + 16);
    sub_100063BE4(v9, v10);
  }
}

void sub_10006894C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void proto::gnss::Emergency::CellInfo::~CellInfo(proto::gnss::Emergency::CellInfo *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1000F4F88;
  if ((proto::gnss::Emergency::CellInfo *)proto::gnss::Emergency::CellInfo::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  proto::gnss::Emergency::CellInfo::~CellInfo(this);
  operator delete();
}

void proto::gnss::Emergency::CellInfo::New(proto::gnss::Emergency::CellInfo *this)
{
  operator new();
}

uint64_t proto::gnss::Emergency::CellInfo::Clear(uint64_t this)
{
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(this + 32);
  if (v1)
  {
    *(_QWORD *)(this + 8) = 0;
    *(_DWORD *)(this + 24) = 0;
    if ((v1 & 8) != 0)
    {
      v2 = *(_QWORD *)(this + 16);
      if (v2)
      {
        if (*(_BYTE *)(v2 + 24))
        {
          *(_QWORD *)(v2 + 8) = 0;
          *(_DWORD *)(v2 + 16) = 0;
        }
        *(_DWORD *)(v2 + 24) = 0;
      }
    }
  }
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t proto::gnss::Emergency::CellInfo::MergePartialFromCodedStream(proto::gnss::Emergency::CellInfo *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  char *v8;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v10;
  unint64_t v11;
  char *v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  int v16;
  uint64_t result;
  _BYTE *v18;
  _BYTE *v19;
  proto::gnss::Emergency::Plmn *v20;
  char *v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  BOOL v27;
  int v28;
  unsigned int v29;

  v5 = (unsigned int *)((char *)this + 8);
  v6 = (unsigned int *)((char *)this + 12);
  v7 = (unsigned int *)((char *)this + 24);
  while (2)
  {
    v8 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v8;
      *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      *((_QWORD *)a2 + 1) = v8 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v12 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v13 = (_BYTE *)*((_QWORD *)a2 + 1);
          v11 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v5 = *v12;
          v13 = v12 + 1;
          *((_QWORD *)a2 + 1) = v13;
        }
        *((_DWORD *)this + 8) |= 1u;
        if ((unint64_t)v13 < v11 && *v13 == 16)
        {
          v14 = v13 + 1;
          *((_QWORD *)a2 + 1) = v14;
          goto LABEL_27;
        }
        continue;
      case 2u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v14 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
LABEL_27:
        if ((unint64_t)v14 >= v11 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!(_DWORD)result)
            return result;
          v18 = (_BYTE *)*((_QWORD *)a2 + 1);
          v11 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v6 = *v14;
          v18 = v14 + 1;
          *((_QWORD *)a2 + 1) = v18;
        }
        *((_DWORD *)this + 8) |= 2u;
        if ((unint64_t)v18 >= v11 || *v18 != 24)
          continue;
        v15 = v18 + 1;
        *((_QWORD *)a2 + 1) = v15;
LABEL_35:
        if ((unint64_t)v15 >= v11 || *v15 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!(_DWORD)result)
            return result;
          v19 = (_BYTE *)*((_QWORD *)a2 + 1);
          v11 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v7 = *v15;
          v19 = v15 + 1;
          *((_QWORD *)a2 + 1) = v19;
        }
        v16 = *((_DWORD *)this + 8) | 4;
        *((_DWORD *)this + 8) = v16;
        if ((unint64_t)v19 >= v11 || *v19 != 34)
          continue;
        *((_QWORD *)a2 + 1) = v19 + 1;
LABEL_43:
        *((_DWORD *)this + 8) = v16 | 8;
        v20 = (proto::gnss::Emergency::Plmn *)*((_QWORD *)this + 2);
        if (!v20)
          operator new();
        v29 = 0;
        v21 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v21 >= *((_QWORD *)a2 + 2) || *v21 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v29))return 0;
        }
        else
        {
          v29 = *v21;
          *((_QWORD *)a2 + 1) = v21 + 1;
        }
        v22 = *((_DWORD *)a2 + 14);
        v23 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v22 + 1;
        if (v22 < v23)
        {
          v24 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v29);
          if (proto::gnss::Emergency::Plmn::MergePartialFromCodedStream(v20, a2, v25))
          {
            if (*((_BYTE *)a2 + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v24);
              v26 = *((_DWORD *)a2 + 14);
              v27 = __OFSUB__(v26, 1);
              v28 = v26 - 1;
              if (v28 < 0 == v27)
                *((_DWORD *)a2 + 14) = v28;
              if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
                && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
              {
                *((_DWORD *)a2 + 8) = 0;
                result = 1;
                *((_BYTE *)a2 + 36) = 1;
                return result;
              }
              continue;
            }
          }
        }
        return 0;
      case 3u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v15 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        goto LABEL_35;
      case 4u:
        v10 = TagFallback & 7;
        if (v10 != 2)
          goto LABEL_19;
        v16 = *((_DWORD *)this + 8);
        goto LABEL_43;
      default:
        v10 = TagFallback & 7;
LABEL_19:
        if (v10 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t proto::gnss::Emergency::CellInfo::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = this;
  v6 = *(_DWORD *)(this + 32);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(this + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 32);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
LABEL_8:
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 24), a2, a4);
      if ((*(_DWORD *)(v5 + 32) & 8) == 0)
        return this;
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), a2, a4);
  v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 4) != 0)
    goto LABEL_8;
LABEL_4:
  if ((v6 & 8) == 0)
    return this;
LABEL_9:
  v7 = *(_QWORD *)(v5 + 16);
  if (!v7)
    v7 = *(_QWORD *)(proto::gnss::Emergency::CellInfo::default_instance_ + 16);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v7, a2, a4);
}

uint64_t proto::gnss::Emergency::CellInfo::ByteSize(proto::gnss::Emergency::CellInfo *this, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;
  proto::gnss::Emergency::Plmn *v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  unsigned int v12;
  int v13;
  int v14;

  LOBYTE(v3) = *((_BYTE *)this + 32);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_27;
  }
  if ((*((_BYTE *)this + 32) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
    if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *((_DWORD *)this + 8);
      if ((v3 & 2) == 0)
        goto LABEL_14;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_14;
    }
  }
  else
  {
    v4 = 0;
    if ((*((_BYTE *)this + 32) & 2) == 0)
      goto LABEL_14;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
  if (v6 >= 0x80)
  {
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    v3 = *((_DWORD *)this + 8);
  }
  else
  {
    v7 = 2;
  }
  v4 = (v7 + v4);
LABEL_14:
  if ((v3 & 4) != 0)
  {
    v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
    if (v8 >= 0x80)
    {
      v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2) + 1;
      v3 = *((_DWORD *)this + 8);
    }
    else
    {
      v9 = 2;
    }
    v4 = (v9 + v4);
    if ((v3 & 8) == 0)
      goto LABEL_27;
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_27;
  }
  v10 = (proto::gnss::Emergency::Plmn *)*((_QWORD *)this + 2);
  if (!v10)
    v10 = *(proto::gnss::Emergency::Plmn **)(proto::gnss::Emergency::CellInfo::default_instance_ + 16);
  v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::Plmn::ByteSize(v10, a2);
  v13 = (int)v11;
  if (v11 >= 0x80)
    v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, v12);
  else
    v14 = 1;
  v4 = (v4 + v13 + v14 + 1);
LABEL_27:
  *((_DWORD *)this + 7) = v4;
  return v4;
}

void proto::gnss::Emergency::CellInfo::CheckTypeAndMergeFrom(proto::gnss::Emergency::CellInfo *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  sub_100068814((uint64_t)this, (uint64_t)lpsrc);
}

uint64_t proto::gnss::Emergency::CellInfo::IsInitialized(proto::gnss::Emergency::CellInfo *this)
{
  return 1;
}

_QWORD *proto::gnss::Emergency::CellInfo::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.CellInfo");
}

void sub_100068FD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _BYTE v12[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v12, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 10985);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 36);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) != 0)
    {
      v6 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 36) |= 1u;
      *(_QWORD *)(a1 + 8) = v6;
      v5 = *(_DWORD *)(a2 + 36);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          goto LABEL_7;
        goto LABEL_11;
      }
    }
    else if ((*(_BYTE *)(a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    v7 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 36) |= 2u;
    *(_DWORD *)(a1 + 16) = v7;
    v5 = *(_DWORD *)(a2 + 36);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0)
        return;
      goto LABEL_12;
    }
LABEL_11:
    v8 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 36) |= 4u;
    *(_DWORD *)(a1 + 20) = v8;
    if ((*(_DWORD *)(a2 + 36) & 8) == 0)
      return;
LABEL_12:
    *(_DWORD *)(a1 + 36) |= 8u;
    v9 = *(_QWORD *)(a1 + 24);
    if (!v9)
      operator new();
    v10 = *(_QWORD *)(a2 + 24);
    if (!v10)
      v10 = *(_QWORD *)(proto::gnss::Emergency::UtranGanssTimeMeasured::default_instance_ + 24);
    sub_100068814(v9, v10);
  }
}

void sub_10006910C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void proto::gnss::Emergency::UtranGanssTimeMeasured::~UtranGanssTimeMeasured(proto::gnss::Emergency::UtranGanssTimeMeasured *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1000F5000;
  if ((proto::gnss::Emergency::UtranGanssTimeMeasured *)proto::gnss::Emergency::UtranGanssTimeMeasured::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 3);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  proto::gnss::Emergency::UtranGanssTimeMeasured::~UtranGanssTimeMeasured(this);
  operator delete();
}

void proto::gnss::Emergency::UtranGanssTimeMeasured::New(proto::gnss::Emergency::UtranGanssTimeMeasured *this)
{
  operator new();
}

uint64_t proto::gnss::Emergency::UtranGanssTimeMeasured::Clear(uint64_t this)
{
  uint64_t v1;
  char v2;

  v1 = this;
  v2 = *(_BYTE *)(this + 36);
  if (v2)
  {
    *(_QWORD *)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
    if ((v2 & 8) != 0)
    {
      this = *(_QWORD *)(this + 24);
      if (this)
        this = proto::gnss::Emergency::CellInfo::Clear(this);
    }
  }
  *(_DWORD *)(v1 + 36) = 0;
  return this;
}

uint64_t proto::gnss::Emergency::UtranGanssTimeMeasured::MergePartialFromCodedStream(proto::gnss::Emergency::UtranGanssTimeMeasured *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  char *v8;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v10;
  unint64_t v11;
  char *v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  int v16;
  uint64_t result;
  _BYTE *v18;
  _BYTE *v19;
  proto::gnss::Emergency::CellInfo *v20;
  char *v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  BOOL v27;
  int v28;
  unsigned int v29;

  v5 = (unint64_t *)((char *)this + 8);
  v6 = (unsigned int *)((char *)this + 16);
  v7 = (unsigned int *)((char *)this + 20);
  while (2)
  {
    v8 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v8;
      *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      *((_QWORD *)a2 + 1) = v8 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v12 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v13 = (_BYTE *)*((_QWORD *)a2 + 1);
          v11 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v5 = *v12;
          v13 = v12 + 1;
          *((_QWORD *)a2 + 1) = v13;
        }
        *((_DWORD *)this + 9) |= 1u;
        if ((unint64_t)v13 < v11 && *v13 == 16)
        {
          v14 = v13 + 1;
          *((_QWORD *)a2 + 1) = v14;
          goto LABEL_27;
        }
        continue;
      case 2u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v14 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
LABEL_27:
        if ((unint64_t)v14 >= v11 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!(_DWORD)result)
            return result;
          v18 = (_BYTE *)*((_QWORD *)a2 + 1);
          v11 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v6 = *v14;
          v18 = v14 + 1;
          *((_QWORD *)a2 + 1) = v18;
        }
        *((_DWORD *)this + 9) |= 2u;
        if ((unint64_t)v18 >= v11 || *v18 != 24)
          continue;
        v15 = v18 + 1;
        *((_QWORD *)a2 + 1) = v15;
LABEL_35:
        if ((unint64_t)v15 >= v11 || *v15 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!(_DWORD)result)
            return result;
          v19 = (_BYTE *)*((_QWORD *)a2 + 1);
          v11 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v7 = *v15;
          v19 = v15 + 1;
          *((_QWORD *)a2 + 1) = v19;
        }
        v16 = *((_DWORD *)this + 9) | 4;
        *((_DWORD *)this + 9) = v16;
        if ((unint64_t)v19 >= v11 || *v19 != 34)
          continue;
        *((_QWORD *)a2 + 1) = v19 + 1;
LABEL_43:
        *((_DWORD *)this + 9) = v16 | 8;
        v20 = (proto::gnss::Emergency::CellInfo *)*((_QWORD *)this + 3);
        if (!v20)
          operator new();
        v29 = 0;
        v21 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v21 >= *((_QWORD *)a2 + 2) || *v21 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v29))return 0;
        }
        else
        {
          v29 = *v21;
          *((_QWORD *)a2 + 1) = v21 + 1;
        }
        v22 = *((_DWORD *)a2 + 14);
        v23 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v22 + 1;
        if (v22 < v23)
        {
          v24 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v29);
          if (proto::gnss::Emergency::CellInfo::MergePartialFromCodedStream(v20, a2, v25))
          {
            if (*((_BYTE *)a2 + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v24);
              v26 = *((_DWORD *)a2 + 14);
              v27 = __OFSUB__(v26, 1);
              v28 = v26 - 1;
              if (v28 < 0 == v27)
                *((_DWORD *)a2 + 14) = v28;
              if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
                && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
              {
                *((_DWORD *)a2 + 8) = 0;
                result = 1;
                *((_BYTE *)a2 + 36) = 1;
                return result;
              }
              continue;
            }
          }
        }
        return 0;
      case 3u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v15 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        goto LABEL_35;
      case 4u:
        v10 = TagFallback & 7;
        if (v10 != 2)
          goto LABEL_19;
        v16 = *((_DWORD *)this + 9);
        goto LABEL_43;
      default:
        v10 = TagFallback & 7;
LABEL_19:
        if (v10 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t proto::gnss::Emergency::UtranGanssTimeMeasured::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = this;
  v6 = *(_DWORD *)(this + 36);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 8), (unint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 36);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
LABEL_8:
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 20), a2, a4);
      if ((*(_DWORD *)(v5 + 36) & 8) == 0)
        return this;
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 16), a2, a4);
  v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 4) != 0)
    goto LABEL_8;
LABEL_4:
  if ((v6 & 8) == 0)
    return this;
LABEL_9:
  v7 = *(_QWORD *)(v5 + 24);
  if (!v7)
    v7 = *(_QWORD *)(proto::gnss::Emergency::UtranGanssTimeMeasured::default_instance_ + 24);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v7, a2, a4);
}

uint64_t proto::gnss::Emergency::UtranGanssTimeMeasured::ByteSize(proto::gnss::Emergency::UtranGanssTimeMeasured *this, unint64_t a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  proto::gnss::Emergency::CellInfo *v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  unsigned int v11;
  int v12;
  int v13;

  LOBYTE(v3) = *((_BYTE *)this + 36);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_24;
  }
  if ((*((_BYTE *)this + 36) & 1) != 0)
  {
    v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 1), a2)+ 1;
    v3 = *((_DWORD *)this + 9);
    if ((v3 & 2) == 0)
      goto LABEL_11;
  }
  else
  {
    v4 = 0;
    if ((*((_BYTE *)this + 36) & 2) == 0)
      goto LABEL_11;
  }
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
  if (v5 >= 0x80)
  {
    v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
    v3 = *((_DWORD *)this + 9);
  }
  else
  {
    v6 = 2;
  }
  v4 = (v6 + v4);
LABEL_11:
  if ((v3 & 4) != 0)
  {
    v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
    if (v7 >= 0x80)
    {
      v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2) + 1;
      v3 = *((_DWORD *)this + 9);
    }
    else
    {
      v8 = 2;
    }
    v4 = (v8 + v4);
    if ((v3 & 8) == 0)
      goto LABEL_24;
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_24;
  }
  v9 = (proto::gnss::Emergency::CellInfo *)*((_QWORD *)this + 3);
  if (!v9)
    v9 = *(proto::gnss::Emergency::CellInfo **)(proto::gnss::Emergency::UtranGanssTimeMeasured::default_instance_ + 24);
  v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::CellInfo::ByteSize(v9, a2);
  v12 = (int)v10;
  if (v10 >= 0x80)
    v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, v11);
  else
    v13 = 1;
  v4 = (v4 + v12 + v13 + 1);
LABEL_24:
  *((_DWORD *)this + 8) = v4;
  return v4;
}

void proto::gnss::Emergency::UtranGanssTimeMeasured::CheckTypeAndMergeFrom(proto::gnss::Emergency::UtranGanssTimeMeasured *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  sub_100068FD4((uint64_t)this, (uint64_t)lpsrc);
}

uint64_t proto::gnss::Emergency::UtranGanssTimeMeasured::IsInitialized(proto::gnss::Emergency::UtranGanssTimeMeasured *this)
{
  return 1;
}

_QWORD *proto::gnss::Emergency::UtranGanssTimeMeasured::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.UtranGanssTimeMeasured");
}

void sub_100069788(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BYTE v11[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 11234);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      v5 = *(_DWORD *)(a2 + 28);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          return;
        goto LABEL_10;
      }
    }
    else if ((*(_BYTE *)(a2 + 28) & 2) == 0)
    {
      goto LABEL_6;
    }
    v7 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a1 + 28) |= 2u;
    *(_DWORD *)(a1 + 12) = v7;
    if ((*(_DWORD *)(a2 + 28) & 4) == 0)
      return;
LABEL_10:
    *(_DWORD *)(a1 + 28) |= 4u;
    v8 = *(_QWORD *)(a1 + 16);
    if (!v8)
      operator new();
    v9 = *(_QWORD *)(a2 + 16);
    if (!v9)
      v9 = *(_QWORD *)(proto::gnss::Emergency::GeranGanssTimeMeasured::default_instance_ + 16);
    sub_100068814(v8, v9);
  }
}

void sub_1000698A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void proto::gnss::Emergency::GeranGanssTimeMeasured::~GeranGanssTimeMeasured(proto::gnss::Emergency::GeranGanssTimeMeasured *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1000F5078;
  if ((proto::gnss::Emergency::GeranGanssTimeMeasured *)proto::gnss::Emergency::GeranGanssTimeMeasured::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  proto::gnss::Emergency::GeranGanssTimeMeasured::~GeranGanssTimeMeasured(this);
  operator delete();
}

void proto::gnss::Emergency::GeranGanssTimeMeasured::New(proto::gnss::Emergency::GeranGanssTimeMeasured *this)
{
  operator new();
}

uint64_t proto::gnss::Emergency::GeranGanssTimeMeasured::Clear(uint64_t this)
{
  uint64_t v1;
  char v2;

  v1 = this;
  v2 = *(_BYTE *)(this + 28);
  if (v2)
  {
    *(_QWORD *)(this + 8) = 0;
    if ((v2 & 4) != 0)
    {
      this = *(_QWORD *)(this + 16);
      if (this)
        this = proto::gnss::Emergency::CellInfo::Clear(this);
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

uint64_t proto::gnss::Emergency::GeranGanssTimeMeasured::MergePartialFromCodedStream(proto::gnss::Emergency::GeranGanssTimeMeasured *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned int *v5;
  unsigned int *v6;
  char *v7;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v9;
  int v10;
  int v11;
  unint64_t v12;
  char *v13;
  _BYTE *v14;
  char *v15;
  uint64_t result;
  _BYTE *v17;
  proto::gnss::Emergency::CellInfo *v18;
  char *v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  BOOL v25;
  int v26;
  unsigned int v27;

  v5 = (unsigned int *)((char *)this + 8);
  v6 = (unsigned int *)((char *)this + 12);
  while (1)
  {
    do
    {
      while (1)
      {
        while (1)
        {
          v7 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v7 >= *((_QWORD *)a2 + 2) || *v7 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
            *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
            *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
            *((_QWORD *)a2 + 1) = v7 + 1;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          v9 = TagFallback >> 3;
          if (TagFallback >> 3 != 1)
            break;
          v10 = TagFallback & 7;
          if ((TagFallback & 7) != 0)
            goto LABEL_19;
          v13 = (char *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
          if ((unint64_t)v13 >= v12 || *v13 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
            if (!(_DWORD)result)
              return result;
            v14 = (_BYTE *)*((_QWORD *)a2 + 1);
            v12 = *((_QWORD *)a2 + 2);
          }
          else
          {
            *v5 = *v13;
            v14 = v13 + 1;
            *((_QWORD *)a2 + 1) = v14;
          }
          *((_DWORD *)this + 7) |= 1u;
          if ((unint64_t)v14 < v12 && *v14 == 16)
          {
            v15 = v14 + 1;
            *((_QWORD *)a2 + 1) = v15;
            goto LABEL_27;
          }
        }
        if (v9 == 2)
          break;
        if (v9 == 3)
        {
          v10 = TagFallback & 7;
          if (v10 == 2)
          {
            v11 = *((_DWORD *)this + 7);
            goto LABEL_35;
          }
        }
        else
        {
          v10 = TagFallback & 7;
        }
LABEL_19:
        if (v10 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) == 0)
          return 0;
      }
      v10 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_19;
      v15 = (char *)*((_QWORD *)a2 + 1);
      v12 = *((_QWORD *)a2 + 2);
LABEL_27:
      if ((unint64_t)v15 >= v12 || *v15 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
        if (!(_DWORD)result)
          return result;
        v17 = (_BYTE *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
      }
      else
      {
        *v6 = *v15;
        v17 = v15 + 1;
        *((_QWORD *)a2 + 1) = v17;
      }
      v11 = *((_DWORD *)this + 7) | 2;
      *((_DWORD *)this + 7) = v11;
    }
    while ((unint64_t)v17 >= v12 || *v17 != 26);
    *((_QWORD *)a2 + 1) = v17 + 1;
LABEL_35:
    *((_DWORD *)this + 7) = v11 | 4;
    v18 = (proto::gnss::Emergency::CellInfo *)*((_QWORD *)this + 2);
    if (!v18)
      operator new();
    v27 = 0;
    v19 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v19 >= *((_QWORD *)a2 + 2) || *v19 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v27))
        return 0;
    }
    else
    {
      v27 = *v19;
      *((_QWORD *)a2 + 1) = v19 + 1;
    }
    v20 = *((_DWORD *)a2 + 14);
    v21 = *((_DWORD *)a2 + 15);
    *((_DWORD *)a2 + 14) = v20 + 1;
    if (v20 >= v21)
      return 0;
    v22 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v27);
    if (!proto::gnss::Emergency::CellInfo::MergePartialFromCodedStream(v18, a2, v23)
      || !*((_BYTE *)a2 + 36))
    {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v22);
    v24 = *((_DWORD *)a2 + 14);
    v25 = __OFSUB__(v24, 1);
    v26 = v24 - 1;
    if (v26 < 0 == v25)
      *((_DWORD *)a2 + 14) = v26;
    if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
      && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
    {
      *((_DWORD *)a2 + 8) = 0;
      result = 1;
      *((_BYTE *)a2 + 36) = 1;
      return result;
    }
  }
}

uint64_t proto::gnss::Emergency::GeranGanssTimeMeasured::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = this;
  v6 = *(_DWORD *)(this + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0)
      goto LABEL_3;
LABEL_6:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), a2, a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0)
      return this;
    goto LABEL_7;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(this + 8), a2, a4);
  v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 4) == 0)
    return this;
LABEL_7:
  v7 = *(_QWORD *)(v5 + 16);
  if (!v7)
    v7 = *(_QWORD *)(proto::gnss::Emergency::GeranGanssTimeMeasured::default_instance_ + 16);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
}

uint64_t proto::gnss::Emergency::GeranGanssTimeMeasured::ByteSize(proto::gnss::Emergency::GeranGanssTimeMeasured *this, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  proto::gnss::Emergency::CellInfo *v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  unsigned int v10;
  int v11;
  int v12;

  LOBYTE(v3) = *((_BYTE *)this + 28);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_21;
  }
  if ((*((_BYTE *)this + 28) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
    if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *((_DWORD *)this + 7);
      if ((v3 & 2) == 0)
        goto LABEL_14;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_14;
    }
  }
  else
  {
    v4 = 0;
    if ((*((_BYTE *)this + 28) & 2) == 0)
      goto LABEL_14;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
  if (v6 >= 0x80)
  {
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    v3 = *((_DWORD *)this + 7);
  }
  else
  {
    v7 = 2;
  }
  v4 = (v7 + v4);
LABEL_14:
  if ((v3 & 4) != 0)
  {
    v8 = (proto::gnss::Emergency::CellInfo *)*((_QWORD *)this + 2);
    if (!v8)
      v8 = *(proto::gnss::Emergency::CellInfo **)(proto::gnss::Emergency::GeranGanssTimeMeasured::default_instance_ + 16);
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::CellInfo::ByteSize(v8, a2);
    v11 = (int)v9;
    if (v9 >= 0x80)
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, v10);
    else
      v12 = 1;
    v4 = (v4 + v11 + v12 + 1);
  }
LABEL_21:
  *((_DWORD *)this + 6) = v4;
  return v4;
}

void proto::gnss::Emergency::GeranGanssTimeMeasured::CheckTypeAndMergeFrom(proto::gnss::Emergency::GeranGanssTimeMeasured *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  sub_100069788((uint64_t)this, (uint64_t)lpsrc);
}

uint64_t proto::gnss::Emergency::GeranGanssTimeMeasured::IsInitialized(proto::gnss::Emergency::GeranGanssTimeMeasured *this)
{
  return 1;
}

_QWORD *proto::gnss::Emergency::GeranGanssTimeMeasured::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.GeranGanssTimeMeasured");
}

void sub_100069E50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  _DWORD *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  char v18;
  _BYTE v19[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v19, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 11731);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v19, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v18, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v19);
  }
  v5 = *(_DWORD *)(a2 + 60);
  if (!(_BYTE)v5)
    goto LABEL_13;
  if ((v5 & 1) != 0)
  {
    v8 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 60) |= 1u;
    *(_DWORD *)(a1 + 8) = v8;
    v5 = *(_DWORD *)(a2 + 60);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0)
        goto LABEL_7;
      goto LABEL_21;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_6;
  }
  v9 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 60) |= 2u;
  *(_DWORD *)(a1 + 12) = v9;
  v5 = *(_DWORD *)(a2 + 60);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  v10 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 60) |= 4u;
  *(_DWORD *)(a1 + 16) = v10;
  v5 = *(_DWORD *)(a2 + 60);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  v11 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 60) |= 8u;
  *(_DWORD *)(a1 + 20) = v11;
  v5 = *(_DWORD *)(a2 + 60);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
LABEL_28:
    v14 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 60) |= 0x20u;
    *(_DWORD *)(a1 + 32) = v14;
    v5 = *(_DWORD *)(a2 + 60);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0)
        goto LABEL_13;
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_23:
  *(_DWORD *)(a1 + 60) |= 0x10u;
  v12 = *(_DWORD **)(a1 + 24);
  if (!v12)
    operator new();
  v13 = *(_QWORD *)(a2 + 24);
  if (!v13)
    v13 = *(_QWORD *)(proto::gnss::Emergency::ClsEutranCell::default_instance_ + 24);
  sub_100063BE4(v12, v13);
  v5 = *(_DWORD *)(a2 + 60);
  if ((v5 & 0x20) != 0)
    goto LABEL_28;
LABEL_10:
  if ((v5 & 0x40) == 0)
    goto LABEL_11;
LABEL_29:
  v15 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 60) |= 0x40u;
  *(_DWORD *)(a1 + 36) = v15;
  v5 = *(_DWORD *)(a2 + 60);
  if ((v5 & 0x80) != 0)
  {
LABEL_12:
    v6 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 60) |= 0x80u;
    *(_DWORD *)(a1 + 40) = v6;
    v5 = *(_DWORD *)(a2 + 60);
  }
LABEL_13:
  if ((v5 & 0xFF00) == 0)
    return;
  if ((v5 & 0x100) != 0)
  {
    v16 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a1 + 60) |= 0x100u;
    *(_DWORD *)(a1 + 44) = v16;
    v5 = *(_DWORD *)(a2 + 60);
    if ((v5 & 0x200) == 0)
    {
LABEL_16:
      if ((v5 & 0x400) == 0)
        return;
      goto LABEL_17;
    }
  }
  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_16;
  }
  v17 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 60) |= 0x200u;
  *(_DWORD *)(a1 + 48) = v17;
  if ((*(_DWORD *)(a2 + 60) & 0x400) == 0)
    return;
LABEL_17:
  v7 = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 60) |= 0x400u;
  *(_DWORD *)(a1 + 52) = v7;
}

void sub_10006A074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void proto::gnss::Emergency::ClsEutranCell::~ClsEutranCell(proto::gnss::Emergency::ClsEutranCell *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1000F50F0;
  if ((proto::gnss::Emergency::ClsEutranCell *)proto::gnss::Emergency::ClsEutranCell::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 3);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  proto::gnss::Emergency::ClsEutranCell::~ClsEutranCell(this);
  operator delete();
}

void proto::gnss::Emergency::ClsEutranCell::New(proto::gnss::Emergency::ClsEutranCell *this)
{
  operator new();
}

uint64_t proto::gnss::Emergency::ClsEutranCell::Clear(uint64_t this)
{
  int v1;
  uint64_t v2;

  v1 = *(_DWORD *)(this + 60);
  if ((_BYTE)v1)
  {
    *(_QWORD *)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
    if ((v1 & 0x10) != 0)
    {
      v2 = *(_QWORD *)(this + 24);
      if (v2)
      {
        if (*(_BYTE *)(v2 + 24))
        {
          *(_QWORD *)(v2 + 8) = 0;
          *(_DWORD *)(v2 + 16) = 0;
        }
        *(_DWORD *)(v2 + 24) = 0;
        v1 = *(_DWORD *)(this + 60);
      }
    }
    *(_QWORD *)(this + 32) = 0;
    *(_DWORD *)(this + 40) = 0;
  }
  if ((v1 & 0xFF00) != 0)
  {
    *(_QWORD *)(this + 48) = 0;
    *(_DWORD *)(this + 44) = 0;
  }
  *(_DWORD *)(this + 60) = 0;
  return this;
}

uint64_t proto::gnss::Emergency::ClsEutranCell::MergePartialFromCodedStream(proto::gnss::Emergency::ClsEutranCell *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int *v12;
  char *v13;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v15;
  unint64_t v16;
  char *v17;
  _BYTE *v18;
  char *v19;
  char *v20;
  char *v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int *v25;
  int v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t result;
  _BYTE *v35;
  _BYTE *v36;
  _BYTE *v37;
  unsigned int *v38;
  proto::gnss::Emergency::Plmn *v39;
  unsigned int *v40;
  char *v41;
  int v42;
  int v43;
  int v44;
  unsigned int v45;
  int v46;
  BOOL v47;
  int v48;
  _BYTE *v49;
  _BYTE *v50;
  _BYTE *v51;
  _BYTE *v52;
  unsigned int v53;
  _BYTE *v54;
  _BYTE *v55;
  unsigned __int8 *v56;
  unsigned int *v57;
  unsigned int *v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;

  v57 = (unsigned int *)((char *)this + 8);
  v5 = (unsigned int *)((char *)this + 12);
  v6 = (unsigned int *)((char *)this + 16);
  v7 = (unsigned int *)((char *)this + 20);
  v8 = (unsigned int *)((char *)this + 32);
  v9 = (unsigned int *)((char *)this + 36);
  v10 = (unsigned int *)((char *)this + 40);
  v11 = (unsigned int *)((char *)this + 48);
  v12 = (unsigned int *)((char *)this + 52);
  while (2)
  {
    v13 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v13 >= *((_QWORD *)a2 + 2) || *v13 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v13;
      *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      *((_QWORD *)a2 + 1) = v13 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_32;
        v17 = (char *)*((_QWORD *)a2 + 1);
        v16 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v17 >= v16 || *v17 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v57);
          if (!(_DWORD)result)
            return result;
          v18 = (_BYTE *)*((_QWORD *)a2 + 1);
          v16 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v57 = *v17;
          v18 = v17 + 1;
          *((_QWORD *)a2 + 1) = v18;
        }
        *((_DWORD *)this + 15) |= 1u;
        if ((unint64_t)v18 < v16 && *v18 == 16)
        {
          v19 = v18 + 1;
          *((_QWORD *)a2 + 1) = v19;
          goto LABEL_41;
        }
        continue;
      case 2u:
        v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_32;
        v19 = (char *)*((_QWORD *)a2 + 1);
        v16 = *((_QWORD *)a2 + 2);
LABEL_41:
        if ((unint64_t)v19 >= v16 || *v19 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v35 = (_BYTE *)*((_QWORD *)a2 + 1);
          v16 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v5 = *v19;
          v35 = v19 + 1;
          *((_QWORD *)a2 + 1) = v35;
        }
        *((_DWORD *)this + 15) |= 2u;
        if ((unint64_t)v35 >= v16 || *v35 != 24)
          continue;
        v20 = v35 + 1;
        *((_QWORD *)a2 + 1) = v20;
LABEL_49:
        if ((unint64_t)v20 >= v16 || *v20 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!(_DWORD)result)
            return result;
          v36 = (_BYTE *)*((_QWORD *)a2 + 1);
          v16 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v6 = *v20;
          v36 = v20 + 1;
          *((_QWORD *)a2 + 1) = v36;
        }
        *((_DWORD *)this + 15) |= 4u;
        if ((unint64_t)v36 >= v16 || *v36 != 32)
          continue;
        v21 = v36 + 1;
        *((_QWORD *)a2 + 1) = v21;
LABEL_57:
        if ((unint64_t)v21 >= v16 || *v21 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!(_DWORD)result)
            return result;
          v37 = (_BYTE *)*((_QWORD *)a2 + 1);
          v16 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v7 = *v21;
          v37 = v21 + 1;
          *((_QWORD *)a2 + 1) = v37;
        }
        v26 = *((_DWORD *)this + 15) | 8;
        *((_DWORD *)this + 15) = v26;
        if ((unint64_t)v37 >= v16 || *v37 != 42)
          continue;
        v58 = v12;
        v59 = v11;
        v22 = v10;
        v23 = v8;
        v24 = v7;
        v25 = v5;
        *((_QWORD *)a2 + 1) = v37 + 1;
LABEL_65:
        v38 = v9;
        *((_DWORD *)this + 15) = v26 | 0x10;
        v39 = (proto::gnss::Emergency::Plmn *)*((_QWORD *)this + 3);
        if (!v39)
          operator new();
        v40 = v6;
        v61 = 0;
        v41 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v41 >= *((_QWORD *)a2 + 2) || *v41 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v61))return 0;
        }
        else
        {
          v61 = *v41;
          *((_QWORD *)a2 + 1) = v41 + 1;
        }
        v42 = *((_DWORD *)a2 + 14);
        v43 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v42 + 1;
        if (v42 < v43)
        {
          v44 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v61);
          if (proto::gnss::Emergency::Plmn::MergePartialFromCodedStream(v39, a2, v45))
          {
            if (*((_BYTE *)a2 + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v44);
              v46 = *((_DWORD *)a2 + 14);
              v47 = __OFSUB__(v46, 1);
              v48 = v46 - 1;
              if (v48 < 0 == v47)
                *((_DWORD *)a2 + 14) = v48;
              v49 = (_BYTE *)*((_QWORD *)a2 + 1);
              v27 = *((_QWORD *)a2 + 2);
              v5 = v25;
              v6 = v40;
              v7 = v24;
              v9 = v38;
              v8 = v23;
              v10 = v22;
              v12 = v58;
              v11 = v59;
              if ((unint64_t)v49 < v27 && *v49 == 48)
              {
                v28 = v49 + 1;
                *((_QWORD *)a2 + 1) = v28;
LABEL_79:
                if ((unint64_t)v28 >= v27 || *v28 < 0)
                {
                  result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v8);
                  if (!(_DWORD)result)
                    return result;
                  v50 = (_BYTE *)*((_QWORD *)a2 + 1);
                  v27 = *((_QWORD *)a2 + 2);
                }
                else
                {
                  *v8 = *v28;
                  v50 = v28 + 1;
                  *((_QWORD *)a2 + 1) = v50;
                }
                *((_DWORD *)this + 15) |= 0x20u;
                if ((unint64_t)v50 < v27 && *v50 == 56)
                {
                  v29 = v50 + 1;
                  *((_QWORD *)a2 + 1) = v29;
LABEL_87:
                  if ((unint64_t)v29 >= v27 || *v29 < 0)
                  {
                    result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v9);
                    if (!(_DWORD)result)
                      return result;
                    v51 = (_BYTE *)*((_QWORD *)a2 + 1);
                    v27 = *((_QWORD *)a2 + 2);
                  }
                  else
                  {
                    *v9 = *v29;
                    v51 = v29 + 1;
                    *((_QWORD *)a2 + 1) = v51;
                  }
                  *((_DWORD *)this + 15) |= 0x40u;
                  if ((unint64_t)v51 < v27 && *v51 == 64)
                  {
                    v30 = v51 + 1;
                    *((_QWORD *)a2 + 1) = v30;
LABEL_95:
                    if ((unint64_t)v30 >= v27 || *v30 < 0)
                    {
                      result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v10);
                      if (!(_DWORD)result)
                        return result;
                      v52 = (_BYTE *)*((_QWORD *)a2 + 1);
                      v27 = *((_QWORD *)a2 + 2);
                    }
                    else
                    {
                      *v10 = *v30;
                      v52 = v30 + 1;
                      *((_QWORD *)a2 + 1) = v52;
                    }
                    *((_DWORD *)this + 15) |= 0x80u;
                    if ((unint64_t)v52 < v27 && *v52 == 72)
                    {
                      v31 = v52 + 1;
                      *((_QWORD *)a2 + 1) = v31;
LABEL_103:
                      v60 = 0;
                      if ((unint64_t)v31 >= v27 || *v31 < 0)
                      {
                        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v60);
                        if (!(_DWORD)result)
                          return result;
                        v53 = v60;
                        v54 = (_BYTE *)*((_QWORD *)a2 + 1);
                        v27 = *((_QWORD *)a2 + 2);
                      }
                      else
                      {
                        v53 = *v31;
                        v54 = v31 + 1;
                        *((_QWORD *)a2 + 1) = v54;
                      }
                      *((_DWORD *)this + 11) = v53;
                      *((_DWORD *)this + 15) |= 0x100u;
                      if ((unint64_t)v54 < v27 && *v54 == 80)
                      {
                        v32 = v54 + 1;
                        *((_QWORD *)a2 + 1) = v32;
LABEL_111:
                        if ((unint64_t)v32 >= v27 || *v32 < 0)
                        {
                          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v11);
                          if (!(_DWORD)result)
                            return result;
                          v55 = (_BYTE *)*((_QWORD *)a2 + 1);
                          v27 = *((_QWORD *)a2 + 2);
                        }
                        else
                        {
                          *v11 = *v32;
                          v55 = v32 + 1;
                          *((_QWORD *)a2 + 1) = v55;
                        }
                        *((_DWORD *)this + 15) |= 0x200u;
                        if ((unint64_t)v55 < v27 && *v55 == 88)
                        {
                          v33 = v55 + 1;
                          *((_QWORD *)a2 + 1) = v33;
LABEL_119:
                          if ((unint64_t)v33 >= v27 || *v33 < 0)
                          {
                            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v12);
                            if (!(_DWORD)result)
                              return result;
                            v56 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                            v27 = *((_QWORD *)a2 + 2);
                          }
                          else
                          {
                            *v12 = *v33;
                            v56 = (unsigned __int8 *)(v33 + 1);
                            *((_QWORD *)a2 + 1) = v56;
                          }
                          *((_DWORD *)this + 15) |= 0x400u;
                          if (v56 == (unsigned __int8 *)v27
                            && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
                          {
                            *((_DWORD *)a2 + 8) = 0;
                            result = 1;
                            *((_BYTE *)a2 + 36) = 1;
                            return result;
                          }
                        }
                      }
                    }
                  }
                }
              }
              continue;
            }
          }
        }
        return 0;
      case 3u:
        v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_32;
        v20 = (char *)*((_QWORD *)a2 + 1);
        v16 = *((_QWORD *)a2 + 2);
        goto LABEL_49;
      case 4u:
        v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_32;
        v21 = (char *)*((_QWORD *)a2 + 1);
        v16 = *((_QWORD *)a2 + 2);
        goto LABEL_57;
      case 5u:
        v15 = TagFallback & 7;
        if (v15 != 2)
          goto LABEL_32;
        v58 = v12;
        v59 = v11;
        v22 = v10;
        v23 = v8;
        v24 = v7;
        v25 = v5;
        v26 = *((_DWORD *)this + 15);
        goto LABEL_65;
      case 6u:
        v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_32;
        v28 = (char *)*((_QWORD *)a2 + 1);
        v27 = *((_QWORD *)a2 + 2);
        goto LABEL_79;
      case 7u:
        v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_32;
        v29 = (char *)*((_QWORD *)a2 + 1);
        v27 = *((_QWORD *)a2 + 2);
        goto LABEL_87;
      case 8u:
        v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_32;
        v30 = (char *)*((_QWORD *)a2 + 1);
        v27 = *((_QWORD *)a2 + 2);
        goto LABEL_95;
      case 9u:
        v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_32;
        v31 = (char *)*((_QWORD *)a2 + 1);
        v27 = *((_QWORD *)a2 + 2);
        goto LABEL_103;
      case 0xAu:
        v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_32;
        v32 = (char *)*((_QWORD *)a2 + 1);
        v27 = *((_QWORD *)a2 + 2);
        goto LABEL_111;
      case 0xBu:
        v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_32;
        v33 = (char *)*((_QWORD *)a2 + 1);
        v27 = *((_QWORD *)a2 + 2);
        goto LABEL_119;
      default:
        v15 = TagFallback & 7;
LABEL_32:
        if (v15 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t proto::gnss::Emergency::ClsEutranCell::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = this;
  v6 = *(_DWORD *)(this + 60);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(this + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 60);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), a2, a4);
  v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 16), a2, a4);
  v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_DWORD *)(v5 + 20), a2, a4);
  v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_17:
  v7 = *(_QWORD *)(v5 + 24);
  if (!v7)
    v7 = *(_QWORD *)(proto::gnss::Emergency::ClsEutranCell::default_instance_ + 24);
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v7, a2, a4);
  v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(_DWORD *)(v5 + 32), a2, a4);
  v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(_DWORD *)(v5 + 36), a2, a4);
  v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(_DWORD *)(v5 + 40), a2, a4);
  v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(_DWORD *)(v5 + 44), (int)a2, a4);
  v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(_DWORD *)(v5 + 52), a2, a4);
  }
LABEL_24:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(_DWORD *)(v5 + 48), a2, a4);
  if ((*(_DWORD *)(v5 + 60) & 0x400) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(_DWORD *)(v5 + 52), a2, a4);
  return this;
}

uint64_t proto::gnss::Emergency::ClsEutranCell::ByteSize(proto::gnss::Emergency::ClsEutranCell *this, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  proto::gnss::Emergency::Plmn *v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;
  int v16;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v17;
  int v18;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v19;
  int v20;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v21;
  int v22;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v23;
  int v24;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v25;
  int v26;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v27;
  int v28;

  v3 = *((_DWORD *)this + 15);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_47;
  }
  if ((v3 & 1) == 0)
  {
    v4 = 0;
    if ((v3 & 2) == 0)
      goto LABEL_14;
    goto LABEL_10;
  }
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
  if (v5 >= 0x80)
  {
    v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
    v3 = *((_DWORD *)this + 15);
  }
  else
  {
    v6 = 1;
  }
  v4 = (v6 + 1);
  if ((v3 & 2) != 0)
  {
LABEL_10:
    v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
    if (v7 >= 0x80)
    {
      v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
      v3 = *((_DWORD *)this + 15);
    }
    else
    {
      v8 = 1;
    }
    v4 = (v4 + v8 + 1);
  }
LABEL_14:
  if ((v3 & 4) != 0)
  {
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
    if (v9 >= 0x80)
    {
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2);
      v3 = *((_DWORD *)this + 15);
    }
    else
    {
      v10 = 1;
    }
    v4 = (v4 + v10 + 1);
    if ((v3 & 8) == 0)
    {
LABEL_16:
      if ((v3 & 0x10) == 0)
        goto LABEL_17;
      goto LABEL_29;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_16;
  }
  v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
  if (v11 >= 0x80)
  {
    v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2);
    v3 = *((_DWORD *)this + 15);
  }
  else
  {
    v12 = 1;
  }
  v4 = (v4 + v12 + 1);
  if ((v3 & 0x10) == 0)
  {
LABEL_17:
    if ((v3 & 0x20) == 0)
      goto LABEL_18;
    goto LABEL_35;
  }
LABEL_29:
  v13 = (proto::gnss::Emergency::Plmn *)*((_QWORD *)this + 3);
  if (!v13)
    v13 = *(proto::gnss::Emergency::Plmn **)(proto::gnss::Emergency::ClsEutranCell::default_instance_ + 24);
  v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::Plmn::ByteSize(v13, a2);
  v15 = (int)v14;
  if (v14 >= 0x80)
    v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2);
  else
    v16 = 1;
  v4 = (v4 + v15 + v16 + 1);
  v3 = *((_DWORD *)this + 15);
  if ((v3 & 0x20) == 0)
  {
LABEL_18:
    if ((v3 & 0x40) == 0)
      goto LABEL_19;
    goto LABEL_39;
  }
LABEL_35:
  v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
  if (v17 >= 0x80)
  {
    v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2) + 1;
    v3 = *((_DWORD *)this + 15);
  }
  else
  {
    v18 = 2;
  }
  v4 = (v18 + v4);
  if ((v3 & 0x40) == 0)
  {
LABEL_19:
    if ((v3 & 0x80) == 0)
      goto LABEL_47;
    goto LABEL_43;
  }
LABEL_39:
  v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 9);
  if (v19 >= 0x80)
  {
    v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19, a2) + 1;
    v3 = *((_DWORD *)this + 15);
  }
  else
  {
    v20 = 2;
  }
  v4 = (v20 + v4);
  if ((v3 & 0x80) != 0)
  {
LABEL_43:
    v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 10);
    if (v21 >= 0x80)
    {
      v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21, a2) + 1;
      v3 = *((_DWORD *)this + 15);
    }
    else
    {
      v22 = 2;
    }
    v4 = (v22 + v4);
  }
LABEL_47:
  if ((v3 & 0xFF00) == 0)
    goto LABEL_66;
  if ((v3 & 0x100) != 0)
  {
    v23 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 11);
    if ((v23 & 0x80000000) != 0)
    {
      v24 = 11;
    }
    else if (v23 >= 0x80)
    {
      v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v23, a2) + 1;
      v3 = *((_DWORD *)this + 15);
    }
    else
    {
      v24 = 2;
    }
    v4 = (v24 + v4);
    if ((v3 & 0x200) == 0)
    {
LABEL_50:
      if ((v3 & 0x400) == 0)
        goto LABEL_66;
      goto LABEL_62;
    }
  }
  else if ((v3 & 0x200) == 0)
  {
    goto LABEL_50;
  }
  v25 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 12);
  if (v25 >= 0x80)
  {
    v26 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v25, a2) + 1;
    v3 = *((_DWORD *)this + 15);
  }
  else
  {
    v26 = 2;
  }
  v4 = (v26 + v4);
  if ((v3 & 0x400) != 0)
  {
LABEL_62:
    v27 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 13);
    if (v27 >= 0x80)
      v28 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v27, a2) + 1;
    else
      v28 = 2;
    v4 = (v28 + v4);
  }
LABEL_66:
  *((_DWORD *)this + 14) = v4;
  return v4;
}

void proto::gnss::Emergency::ClsEutranCell::CheckTypeAndMergeFrom(proto::gnss::Emergency::ClsEutranCell *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  sub_100069E50((uint64_t)this, (uint64_t)lpsrc);
}

uint64_t proto::gnss::Emergency::ClsEutranCell::IsInitialized(proto::gnss::Emergency::ClsEutranCell *this)
{
  return 1;
}

_QWORD *proto::gnss::Emergency::ClsEutranCell::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.ClsEutranCell");
}

void sub_10006ACB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _BYTE v13[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v13, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 12026);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v12, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 36);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) != 0)
    {
      *(_DWORD *)(a1 + 36) |= 1u;
      v6 = *(_QWORD *)(a1 + 8);
      if (!v6)
        operator new();
      v7 = *(_QWORD *)(a2 + 8);
      if (!v7)
        v7 = *(_QWORD *)(proto::gnss::Emergency::GanssTimeMeasured::default_instance_ + 8);
      sub_100068FD4(v6, v7);
      v5 = *(_DWORD *)(a2 + 36);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          return;
        goto LABEL_18;
      }
    }
    else if ((*(_BYTE *)(a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    *(_DWORD *)(a1 + 36) |= 2u;
    v8 = *(_QWORD *)(a1 + 16);
    if (!v8)
      operator new();
    v9 = *(_QWORD *)(a2 + 16);
    if (!v9)
      v9 = *(_QWORD *)(proto::gnss::Emergency::GanssTimeMeasured::default_instance_ + 16);
    sub_100069788(v8, v9);
    if ((*(_DWORD *)(a2 + 36) & 4) != 0)
    {
LABEL_18:
      *(_DWORD *)(a1 + 36) |= 4u;
      v10 = *(_QWORD *)(a1 + 24);
      if (!v10)
        operator new();
      v11 = *(_QWORD *)(a2 + 24);
      if (!v11)
        v11 = *(_QWORD *)(proto::gnss::Emergency::GanssTimeMeasured::default_instance_ + 24);
      sub_100069E50(v10, v11);
    }
  }
}

void sub_10006AE68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_10006AE80(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  if ((_QWORD *)proto::gnss::Emergency::GanssTimeMeasured::default_instance_ != result)
  {
    v1 = result;
    v2 = result[1];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = v1[2];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    result = (_QWORD *)v1[3];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void proto::gnss::Emergency::GanssTimeMeasured::~GanssTimeMeasured(proto::gnss::Emergency::GanssTimeMeasured *this)
{
  *(_QWORD *)this = off_1000F5168;
  sub_10006AE80(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = off_1000F5168;
  sub_10006AE80(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

void proto::gnss::Emergency::GanssTimeMeasured::New(proto::gnss::Emergency::GanssTimeMeasured *this)
{
  operator new();
}

uint64_t proto::gnss::Emergency::GanssTimeMeasured::Clear(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  LOBYTE(v2) = *(_BYTE *)(this + 36);
  if ((_BYTE)v2)
  {
    if ((*(_BYTE *)(this + 36) & 1) != 0)
    {
      this = *(_QWORD *)(this + 8);
      if (this)
      {
        this = proto::gnss::Emergency::UtranGanssTimeMeasured::Clear(this);
        v2 = *(_DWORD *)(v1 + 36);
      }
    }
    if ((v2 & 2) != 0)
    {
      this = *(_QWORD *)(v1 + 16);
      if (this)
      {
        this = proto::gnss::Emergency::GeranGanssTimeMeasured::Clear(this);
        v2 = *(_DWORD *)(v1 + 36);
      }
    }
    if ((v2 & 4) != 0)
    {
      this = *(_QWORD *)(v1 + 24);
      if (this)
        this = proto::gnss::Emergency::ClsEutranCell::Clear(this);
    }
  }
  *(_DWORD *)(v1 + 36) = 0;
  return this;
}

uint64_t proto::gnss::Emergency::GanssTimeMeasured::MergePartialFromCodedStream(proto::gnss::Emergency::GanssTimeMeasured *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  proto::gnss::Emergency::UtranGanssTimeMeasured *v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  BOOL v16;
  int v17;
  _BYTE *v18;
  proto::gnss::Emergency::GeranGanssTimeMeasured *v19;
  char *v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  _BYTE *v27;
  proto::gnss::Emergency::ClsEutranCell *v28;
  char *v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;
  int v35;
  uint64_t result;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v5 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
            *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
            *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
            *((_QWORD *)a2 + 1) = v5 + 1;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1)
            break;
          v8 = TagFallback & 7;
          if (v8 != 2)
            goto LABEL_20;
          *((_DWORD *)this + 9) |= 1u;
          v9 = (proto::gnss::Emergency::UtranGanssTimeMeasured *)*((_QWORD *)this + 1);
          if (!v9)
            operator new();
          v37 = 0;
          v10 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v10 >= *((_QWORD *)a2 + 2) || *v10 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v37))return 0;
          }
          else
          {
            v37 = *v10;
            *((_QWORD *)a2 + 1) = v10 + 1;
          }
          v11 = *((_DWORD *)a2 + 14);
          v12 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v11 + 1;
          if (v11 >= v12)
            return 0;
          v13 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v37);
          if (!proto::gnss::Emergency::UtranGanssTimeMeasured::MergePartialFromCodedStream(v9, a2, v14)
            || !*((_BYTE *)a2 + 36))
          {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v13);
          v15 = *((_DWORD *)a2 + 14);
          v16 = __OFSUB__(v15, 1);
          v17 = v15 - 1;
          if (v17 < 0 == v16)
            *((_DWORD *)a2 + 14) = v17;
          v18 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v18 < *((_QWORD *)a2 + 2) && *v18 == 18)
          {
            *((_QWORD *)a2 + 1) = v18 + 1;
            goto LABEL_32;
          }
        }
        if (v7 != 2)
          break;
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_20;
LABEL_32:
        *((_DWORD *)this + 9) |= 2u;
        v19 = (proto::gnss::Emergency::GeranGanssTimeMeasured *)*((_QWORD *)this + 2);
        if (!v19)
          operator new();
        v38 = 0;
        v20 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v20 >= *((_QWORD *)a2 + 2) || *v20 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v38))return 0;
        }
        else
        {
          v38 = *v20;
          *((_QWORD *)a2 + 1) = v20 + 1;
        }
        v21 = *((_DWORD *)a2 + 14);
        v22 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v21 + 1;
        if (v21 >= v22)
          return 0;
        v23 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v38);
        if (!proto::gnss::Emergency::GeranGanssTimeMeasured::MergePartialFromCodedStream(v19, a2, v24)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v23);
        v25 = *((_DWORD *)a2 + 14);
        v16 = __OFSUB__(v25, 1);
        v26 = v25 - 1;
        if (v26 < 0 == v16)
          *((_DWORD *)a2 + 14) = v26;
        v27 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v27 < *((_QWORD *)a2 + 2) && *v27 == 26)
        {
          *((_QWORD *)a2 + 1) = v27 + 1;
          goto LABEL_46;
        }
      }
      if (v7 != 3)
        break;
      v8 = TagFallback & 7;
      if (v8 != 2)
        goto LABEL_20;
LABEL_46:
      *((_DWORD *)this + 9) |= 4u;
      v28 = (proto::gnss::Emergency::ClsEutranCell *)*((_QWORD *)this + 3);
      if (!v28)
        operator new();
      v39 = 0;
      v29 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v29 >= *((_QWORD *)a2 + 2) || *v29 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v39))
          return 0;
      }
      else
      {
        v39 = *v29;
        *((_QWORD *)a2 + 1) = v29 + 1;
      }
      v30 = *((_DWORD *)a2 + 14);
      v31 = *((_DWORD *)a2 + 15);
      *((_DWORD *)a2 + 14) = v30 + 1;
      if (v30 >= v31)
        return 0;
      v32 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v39);
      if (!proto::gnss::Emergency::ClsEutranCell::MergePartialFromCodedStream(v28, a2, v33)
        || !*((_BYTE *)a2 + 36))
      {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v32);
      v34 = *((_DWORD *)a2 + 14);
      v16 = __OFSUB__(v34, 1);
      v35 = v34 - 1;
      if (v35 < 0 == v16)
        *((_DWORD *)a2 + 14) = v35;
      if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      }
    }
    v8 = TagFallback & 7;
LABEL_20:
    if (v8 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t proto::gnss::Emergency::GanssTimeMeasured::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = this;
  v6 = *(_DWORD *)(this + 36);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(this + 8);
    if (!v7)
      v7 = *(_QWORD *)(proto::gnss::Emergency::GanssTimeMeasured::default_instance_ + 8);
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    v6 = *(_DWORD *)(v5 + 36);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        return this;
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v8 = *(_QWORD *)(v5 + 16);
  if (!v8)
    v8 = *(_QWORD *)(proto::gnss::Emergency::GanssTimeMeasured::default_instance_ + 16);
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  if ((*(_DWORD *)(v5 + 36) & 4) != 0)
  {
LABEL_11:
    v9 = *(_QWORD *)(v5 + 24);
    if (!v9)
      v9 = *(_QWORD *)(proto::gnss::Emergency::GanssTimeMeasured::default_instance_ + 24);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v9, a2, a4);
  }
  return this;
}

uint64_t proto::gnss::Emergency::GanssTimeMeasured::ByteSize(proto::gnss::Emergency::GanssTimeMeasured *this, unint64_t a2)
{
  int v3;
  uint64_t v4;
  proto::gnss::Emergency::UtranGanssTimeMeasured *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  int v8;
  proto::gnss::Emergency::GeranGanssTimeMeasured *v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  int v12;
  proto::gnss::Emergency::ClsEutranCell *v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  unsigned int v15;
  int v16;
  int v17;

  LOBYTE(v3) = *((_BYTE *)this + 36);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_25;
  }
  if ((*((_BYTE *)this + 36) & 1) != 0)
  {
    v5 = (proto::gnss::Emergency::UtranGanssTimeMeasured *)*((_QWORD *)this + 1);
    if (!v5)
      v5 = *(proto::gnss::Emergency::UtranGanssTimeMeasured **)(proto::gnss::Emergency::GanssTimeMeasured::default_instance_
                                                              + 8);
    v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::UtranGanssTimeMeasured::ByteSize(v5, a2);
    v7 = (int)v6;
    if (v6 >= 0x80)
      v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2);
    else
      v8 = 1;
    v4 = (v7 + v8 + 1);
    v3 = *((_DWORD *)this + 9);
    if ((v3 & 2) == 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  v4 = 0;
  if ((*((_BYTE *)this + 36) & 2) != 0)
  {
LABEL_12:
    v9 = (proto::gnss::Emergency::GeranGanssTimeMeasured *)*((_QWORD *)this + 2);
    if (!v9)
      v9 = *(proto::gnss::Emergency::GeranGanssTimeMeasured **)(proto::gnss::Emergency::GanssTimeMeasured::default_instance_
                                                              + 16);
    v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::GeranGanssTimeMeasured::ByteSize(v9, a2);
    v11 = (int)v10;
    if (v10 >= 0x80)
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2);
    else
      v12 = 1;
    v4 = (v4 + v11 + v12 + 1);
    v3 = *((_DWORD *)this + 9);
  }
LABEL_18:
  if ((v3 & 4) != 0)
  {
    v13 = (proto::gnss::Emergency::ClsEutranCell *)*((_QWORD *)this + 3);
    if (!v13)
      v13 = *(proto::gnss::Emergency::ClsEutranCell **)(proto::gnss::Emergency::GanssTimeMeasured::default_instance_ + 24);
    v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::ClsEutranCell::ByteSize(v13, a2);
    v16 = (int)v14;
    if (v14 >= 0x80)
      v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, v15);
    else
      v17 = 1;
    v4 = (v4 + v16 + v17 + 1);
  }
LABEL_25:
  *((_DWORD *)this + 8) = v4;
  return v4;
}

void proto::gnss::Emergency::GanssTimeMeasured::CheckTypeAndMergeFrom(proto::gnss::Emergency::GanssTimeMeasured *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  sub_10006ACB4((uint64_t)this, (uint64_t)lpsrc);
}

uint64_t proto::gnss::Emergency::GanssTimeMeasured::IsInitialized(proto::gnss::Emergency::GanssTimeMeasured *this)
{
  return 1;
}

_QWORD *proto::gnss::Emergency::GanssTimeMeasured::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.GanssTimeMeasured");
}

void sub_10006B648(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _BYTE v10[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v10, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 12243);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 24);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 16);
      if (v6 >= 6)
        __assert_rtn("set_ganss_time_measured_type", "GnssEmergencyTypes.pb.h", 17926, "::proto::gnss::Emergency::ClsNetworkType_IsValid(value)");
      *(_DWORD *)(a1 + 24) |= 1u;
      *(_DWORD *)(a1 + 16) = v6;
      v5 = *(_DWORD *)(a2 + 24);
    }
    if ((v5 & 2) != 0)
    {
      *(_DWORD *)(a1 + 24) |= 2u;
      v7 = *(_QWORD *)(a1 + 8);
      if (!v7)
        operator new();
      v8 = *(_QWORD *)(a2 + 8);
      if (!v8)
        v8 = *(_QWORD *)(proto::gnss::Emergency::GanssTimeMeasuredParams::default_instance_ + 8);
      sub_10006ACB4(v7, v8);
    }
  }
}

void sub_10006B764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void proto::gnss::Emergency::GanssTimeMeasuredParams::~GanssTimeMeasuredParams(proto::gnss::Emergency::GanssTimeMeasuredParams *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1000F51E0;
  if ((proto::gnss::Emergency::GanssTimeMeasuredParams *)proto::gnss::Emergency::GanssTimeMeasuredParams::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  proto::gnss::Emergency::GanssTimeMeasuredParams::~GanssTimeMeasuredParams(this);
  operator delete();
}

void proto::gnss::Emergency::GanssTimeMeasuredParams::New(proto::gnss::Emergency::GanssTimeMeasuredParams *this)
{
  operator new();
}

uint64_t proto::gnss::Emergency::GanssTimeMeasuredParams::Clear(uint64_t this)
{
  uint64_t v1;
  char v2;

  v1 = this;
  v2 = *(_BYTE *)(this + 24);
  if (v2)
  {
    *(_DWORD *)(this + 16) = 0;
    if ((v2 & 2) != 0)
    {
      this = *(_QWORD *)(this + 8);
      if (this)
        this = proto::gnss::Emergency::GanssTimeMeasured::Clear(this);
    }
  }
  *(_DWORD *)(v1 + 24) = 0;
  return this;
}

uint64_t proto::gnss::Emergency::GanssTimeMeasuredParams::MergePartialFromCodedStream(proto::gnss::Emergency::GanssTimeMeasuredParams *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  uint64_t result;
  _BYTE *v11;
  proto::gnss::Emergency::GanssTimeMeasured *v12;
  char *v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  int v20;
  unsigned int v21;
  unsigned int v22;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
          *((_QWORD *)a2 + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        if (TagFallback >> 3 != 1)
          break;
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_15;
        v21 = 0;
        v8 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v21);
          if (!(_DWORD)result)
            return result;
          v9 = v21;
        }
        else
        {
          v9 = *v8;
          *((_QWORD *)a2 + 1) = v8 + 1;
        }
        if (v9 <= 5)
        {
          *((_DWORD *)this + 6) |= 1u;
          *((_DWORD *)this + 4) = v9;
        }
        v11 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v11 < *((_QWORD *)a2 + 2) && *v11 == 18)
        {
          *((_QWORD *)a2 + 1) = v11 + 1;
          goto LABEL_25;
        }
      }
      if (TagFallback >> 3 != 2)
      {
        v7 = TagFallback & 7;
        goto LABEL_15;
      }
      v7 = TagFallback & 7;
      if (v7 == 2)
        break;
LABEL_15:
      if (v7 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) == 0)
        return 0;
    }
LABEL_25:
    *((_DWORD *)this + 6) |= 2u;
    v12 = (proto::gnss::Emergency::GanssTimeMeasured *)*((_QWORD *)this + 1);
    if (!v12)
      operator new();
    v22 = 0;
    v13 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v13 >= *((_QWORD *)a2 + 2) || *v13 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v22))
        return 0;
    }
    else
    {
      v22 = *v13;
      *((_QWORD *)a2 + 1) = v13 + 1;
    }
    v14 = *((_DWORD *)a2 + 14);
    v15 = *((_DWORD *)a2 + 15);
    *((_DWORD *)a2 + 14) = v14 + 1;
    if (v14 >= v15)
      return 0;
    v16 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v22);
    if (!proto::gnss::Emergency::GanssTimeMeasured::MergePartialFromCodedStream(v12, a2, v17)
      || !*((_BYTE *)a2 + 36))
    {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v16);
    v18 = *((_DWORD *)a2 + 14);
    v19 = __OFSUB__(v18, 1);
    v20 = v18 - 1;
    if (v20 < 0 == v19)
      *((_DWORD *)a2 + 14) = v20;
    if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
      && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
    {
      *((_DWORD *)a2 + 8) = 0;
      result = 1;
      *((_BYTE *)a2 + 36) = 1;
      return result;
    }
  }
}

uint64_t proto::gnss::Emergency::GanssTimeMeasuredParams::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = this;
  v6 = *(_DWORD *)(this + 24);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(this + 16), (int)a2, a4);
    if ((*(_DWORD *)(v5 + 24) & 2) == 0)
      return this;
  }
  else if ((v6 & 2) == 0)
  {
    return this;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if (!v7)
    v7 = *(_QWORD *)(proto::gnss::Emergency::GanssTimeMeasuredParams::default_instance_ + 8);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
}

uint64_t proto::gnss::Emergency::GanssTimeMeasuredParams::ByteSize(proto::gnss::Emergency::GanssTimeMeasuredParams *this, unint64_t a2)
{
  char v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  proto::gnss::Emergency::GanssTimeMeasured *v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  unsigned int v8;
  int v9;
  int v10;

  v3 = *((_BYTE *)this + 24);
  if (v3)
  {
    if ((*((_BYTE *)this + 24) & 1) != 0)
    {
      v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
      if ((v5 & 0x80000000) != 0)
      {
        v4 = 11;
        if ((v3 & 2) == 0)
          goto LABEL_19;
      }
      else if (v5 >= 0x80)
      {
        v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2)
           + 1;
        if ((*((_DWORD *)this + 6) & 2) == 0)
          goto LABEL_19;
      }
      else
      {
        v4 = 2;
        if ((v3 & 2) == 0)
          goto LABEL_19;
      }
    }
    else
    {
      v4 = 0;
      if ((*((_BYTE *)this + 24) & 2) == 0)
        goto LABEL_19;
    }
    v6 = (proto::gnss::Emergency::GanssTimeMeasured *)*((_QWORD *)this + 1);
    if (!v6)
      v6 = *(proto::gnss::Emergency::GanssTimeMeasured **)(proto::gnss::Emergency::GanssTimeMeasuredParams::default_instance_
                                                         + 8);
    v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::GanssTimeMeasured::ByteSize(v6, a2);
    v9 = (int)v7;
    if (v7 >= 0x80)
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, v8);
    else
      v10 = 1;
    v4 = (v4 + v9 + v10 + 1);
  }
  else
  {
    v4 = 0;
  }
LABEL_19:
  *((_DWORD *)this + 5) = v4;
  return v4;
}

void proto::gnss::Emergency::GanssTimeMeasuredParams::CheckTypeAndMergeFrom(proto::gnss::Emergency::GanssTimeMeasuredParams *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  sub_10006B648((uint64_t)this, (uint64_t)lpsrc);
}

uint64_t proto::gnss::Emergency::GanssTimeMeasuredParams::IsInitialized(proto::gnss::Emergency::GanssTimeMeasuredParams *this)
{
  return 1;
}

_QWORD *proto::gnss::Emergency::GanssTimeMeasuredParams::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.GanssTimeMeasuredParams");
}

void sub_10006BC70(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  char v12;
  _BYTE v13[48];

  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v13, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 12575);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v12, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 36);
  if (!(_BYTE)v5)
    return;
  if ((*(_BYTE *)(a2 + 36) & 1) != 0)
  {
    v6 = *(_DWORD *)(a2 + 8);
    if (v6 >= 6)
      __assert_rtn("set_time_id", "GnssEmergencyTypes.pb.h", 17995, "::proto::gnss::Emergency::GnssTimeId_IsValid(value)");
    a1[9] |= 1u;
    a1[2] = v6;
    v5 = *(_DWORD *)(a2 + 36);
  }
  if ((v5 & 2) != 0)
  {
    v8 = *(_DWORD *)(a2 + 12);
    a1[9] |= 2u;
    a1[3] = v8;
    v5 = *(_DWORD *)(a2 + 36);
    if ((v5 & 4) == 0)
    {
LABEL_9:
      if ((v5 & 8) == 0)
        goto LABEL_10;
LABEL_16:
      v10 = *(_DWORD *)(a2 + 20);
      a1[9] |= 8u;
      a1[5] = v10;
      v5 = *(_DWORD *)(a2 + 36);
      if ((v5 & 0x10) == 0)
      {
LABEL_11:
        if ((v5 & 0x20) == 0)
          return;
        goto LABEL_12;
      }
      goto LABEL_17;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_9;
  }
  v9 = *(_DWORD *)(a2 + 16);
  a1[9] |= 4u;
  a1[4] = v9;
  v5 = *(_DWORD *)(a2 + 36);
  if ((v5 & 8) != 0)
    goto LABEL_16;
LABEL_10:
  if ((v5 & 0x10) == 0)
    goto LABEL_11;
LABEL_17:
  v11 = *(_DWORD *)(a2 + 24);
  if (v11 >= 4)
    __assert_rtn("set_fix_type", "GnssEmergencyTypes.pb.h", 18084, "::proto::gnss::Emergency::FixType_IsValid(value)");
  a1[9] |= 0x10u;
  a1[6] = v11;
  if ((*(_DWORD *)(a2 + 36) & 0x20) != 0)
  {
LABEL_12:
    v7 = *(_DWORD *)(a2 + 28);
    a1[9] |= 0x20u;
    a1[7] = v7;
  }
}

void sub_10006BDEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void proto::gnss::Emergency::GanssLocationInfo::~GanssLocationInfo(proto::gnss::Emergency::GanssLocationInfo *this)
{
  *(_QWORD *)this = off_1000F5258;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = off_1000F5258;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

void proto::gnss::Emergency::GanssLocationInfo::New(proto::gnss::Emergency::GanssLocationInfo *this)
{
  operator new();
}

uint64_t proto::gnss::Emergency::GanssLocationInfo::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 36))
  {
    *(_QWORD *)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
    *(_QWORD *)(this + 24) = 0;
  }
  *(_DWORD *)(this + 36) = 0;
  return this;
}

uint64_t proto::gnss::Emergency::GanssLocationInfo::MergePartialFromCodedStream(proto::gnss::Emergency::GanssLocationInfo *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  char *v9;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v11;
  char *v12;
  unsigned int v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  unsigned int v25;
  _BYTE *v26;
  unsigned __int8 *v27;
  uint64_t result;
  unsigned int v29;
  unsigned int v30;

  v5 = (unsigned int *)((char *)this + 12);
  v6 = (unsigned int *)((char *)this + 16);
  v7 = (unsigned int *)((char *)this + 20);
  v8 = (unsigned int *)((char *)this + 28);
  while (2)
  {
    v9 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v9 >= *((_QWORD *)a2 + 2) || *v9 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v9;
      *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      *((_QWORD *)a2 + 1) = v9 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v30 = 0;
        v12 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v12 < *((_QWORD *)a2 + 2) && (*v12 & 0x80000000) == 0)
        {
          v13 = *v12;
          *((_QWORD *)a2 + 1) = v12 + 1;
          goto LABEL_28;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v30);
        if ((_DWORD)result)
        {
          v13 = v30;
LABEL_28:
          if (v13 <= 5)
          {
            *((_DWORD *)this + 9) |= 1u;
            *((_DWORD *)this + 2) = v13;
          }
          v21 = (_BYTE *)*((_QWORD *)a2 + 1);
          v14 = *((_QWORD *)a2 + 2);
          if ((unint64_t)v21 < v14 && *v21 == 16)
          {
            v15 = v21 + 1;
            *((_QWORD *)a2 + 1) = v15;
            goto LABEL_33;
          }
          continue;
        }
        break;
      case 2u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v15 = (char *)*((_QWORD *)a2 + 1);
        v14 = *((_QWORD *)a2 + 2);
LABEL_33:
        if ((unint64_t)v15 >= v14 || *v15 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v22 = (_BYTE *)*((_QWORD *)a2 + 1);
          v14 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v5 = *v15;
          v22 = v15 + 1;
          *((_QWORD *)a2 + 1) = v22;
        }
        *((_DWORD *)this + 9) |= 2u;
        if ((unint64_t)v22 >= v14 || *v22 != 24)
          continue;
        v16 = v22 + 1;
        *((_QWORD *)a2 + 1) = v16;
LABEL_41:
        if ((unint64_t)v16 >= v14 || *v16 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!(_DWORD)result)
            return result;
          v23 = (_BYTE *)*((_QWORD *)a2 + 1);
          v14 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v6 = *v16;
          v23 = v16 + 1;
          *((_QWORD *)a2 + 1) = v23;
        }
        *((_DWORD *)this + 9) |= 4u;
        if ((unint64_t)v23 >= v14 || *v23 != 32)
          continue;
        v17 = v23 + 1;
        *((_QWORD *)a2 + 1) = v17;
LABEL_49:
        if ((unint64_t)v17 >= v14 || *v17 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!(_DWORD)result)
            return result;
          v24 = (_BYTE *)*((_QWORD *)a2 + 1);
          v14 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v7 = *v17;
          v24 = v17 + 1;
          *((_QWORD *)a2 + 1) = v24;
        }
        *((_DWORD *)this + 9) |= 8u;
        if ((unint64_t)v24 >= v14 || *v24 != 40)
          continue;
        v18 = v24 + 1;
        *((_QWORD *)a2 + 1) = v18;
LABEL_57:
        v29 = 0;
        if ((unint64_t)v18 >= v14 || *v18 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v29);
          if (!(_DWORD)result)
            return result;
          v25 = v29;
        }
        else
        {
          v25 = *v18;
          *((_QWORD *)a2 + 1) = v18 + 1;
        }
        if (v25 <= 3)
        {
          *((_DWORD *)this + 9) |= 0x10u;
          *((_DWORD *)this + 6) = v25;
        }
        v26 = (_BYTE *)*((_QWORD *)a2 + 1);
        v19 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v26 >= v19 || *v26 != 48)
          continue;
        v20 = v26 + 1;
        *((_QWORD *)a2 + 1) = v20;
LABEL_67:
        if ((unint64_t)v20 >= v19 || *v20 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v8);
          if (!(_DWORD)result)
            return result;
          v27 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v19 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v8 = *v20;
          v27 = (unsigned __int8 *)(v20 + 1);
          *((_QWORD *)a2 + 1) = v27;
        }
        *((_DWORD *)this + 9) |= 0x20u;
        if (v27 != (unsigned __int8 *)v19 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
          continue;
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      case 3u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v16 = (char *)*((_QWORD *)a2 + 1);
        v14 = *((_QWORD *)a2 + 2);
        goto LABEL_41;
      case 4u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v17 = (char *)*((_QWORD *)a2 + 1);
        v14 = *((_QWORD *)a2 + 2);
        goto LABEL_49;
      case 5u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v18 = (char *)*((_QWORD *)a2 + 1);
        v14 = *((_QWORD *)a2 + 2);
        goto LABEL_57;
      case 6u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v20 = (char *)*((_QWORD *)a2 + 1);
        v19 = *((_QWORD *)a2 + 2);
        goto LABEL_67;
      default:
        v11 = TagFallback & 7;
LABEL_22:
        if (v11 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

int *proto::gnss::Emergency::GanssLocationInfo::SerializeWithCachedSizes(int *this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v4;
  int *v5;
  int v6;

  v4 = a2;
  v5 = this;
  v6 = this[9];
  if ((v6 & 1) != 0)
  {
    this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, this[2], (int)a2, a4);
    v6 = v5[9];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v5[3], v4, a4);
  v6 = v5[9];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[4], v4, a4);
  v6 = v5[9];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v5[5], v4, a4);
  v6 = v5[9];
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      return this;
    return (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v5[7], v4, a4);
  }
LABEL_12:
  this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v5[6], v4, a4);
  if ((v5[9] & 0x20) != 0)
    return (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v5[7], v4, a4);
  return this;
}

uint64_t proto::gnss::Emergency::GanssLocationInfo::ByteSize(proto::gnss::Emergency::GanssLocationInfo *this, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v12;
  int v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;

  LOBYTE(v3) = *((_BYTE *)this + 36);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_40;
  }
  if ((*((_BYTE *)this + 36) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
    if ((v5 & 0x80000000) != 0)
    {
      v4 = 11;
      if ((v3 & 2) == 0)
        goto LABEL_17;
    }
    else if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *((_DWORD *)this + 9);
      if ((v3 & 2) == 0)
        goto LABEL_17;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_17;
    }
  }
  else
  {
    v4 = 0;
    if ((*((_BYTE *)this + 36) & 2) == 0)
      goto LABEL_17;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
  if (v6 >= 0x80)
  {
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    v3 = *((_DWORD *)this + 9);
  }
  else
  {
    v7 = 2;
  }
  v4 = (v7 + v4);
LABEL_17:
  if ((v3 & 4) != 0)
  {
    v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
    if (v8 >= 0x80)
    {
      v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2) + 1;
      v3 = *((_DWORD *)this + 9);
    }
    else
    {
      v9 = 2;
    }
    v4 = (v9 + v4);
    if ((v3 & 8) == 0)
    {
LABEL_19:
      if ((v3 & 0x10) == 0)
        goto LABEL_20;
      goto LABEL_30;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_19;
  }
  v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
  if (v10 >= 0x80)
  {
    v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2) + 1;
    v3 = *((_DWORD *)this + 9);
  }
  else
  {
    v11 = 2;
  }
  v4 = (v11 + v4);
  if ((v3 & 0x10) == 0)
  {
LABEL_20:
    if ((v3 & 0x20) == 0)
      goto LABEL_40;
    goto LABEL_36;
  }
LABEL_30:
  v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
  if ((v12 & 0x80000000) != 0)
  {
    v13 = 11;
  }
  else if (v12 >= 0x80)
  {
    v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, a2) + 1;
    v3 = *((_DWORD *)this + 9);
  }
  else
  {
    v13 = 2;
  }
  v4 = (v13 + v4);
  if ((v3 & 0x20) != 0)
  {
LABEL_36:
    v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 7);
    if (v14 >= 0x80)
      v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2) + 1;
    else
      v15 = 2;
    v4 = (v15 + v4);
  }
LABEL_40:
  *((_DWORD *)this + 8) = v4;
  return v4;
}

void proto::gnss::Emergency::GanssLocationInfo::CheckTypeAndMergeFrom(proto::gnss::Emergency::GanssLocationInfo *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  sub_10006BC70(this, (uint64_t)lpsrc);
}

uint64_t proto::gnss::Emergency::GanssLocationInfo::IsInitialized(proto::gnss::Emergency::GanssLocationInfo *this)
{
  return 1;
}

_QWORD *proto::gnss::Emergency::GanssLocationInfo::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.GanssLocationInfo");
}

void sub_10006C4F4(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  char v8;
  _BYTE v9[48];

  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 12793);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 20);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 8);
      a1[5] |= 1u;
      a1[2] = v6;
      v5 = *(_DWORD *)(a2 + 20);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_DWORD *)(a2 + 12);
      a1[5] |= 2u;
      a1[3] = v7;
    }
  }
}

void sub_10006C59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void proto::gnss::Emergency::EllipsoidPoint::~EllipsoidPoint(proto::gnss::Emergency::EllipsoidPoint *this)
{
  *(_QWORD *)this = off_1000F52D0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = off_1000F52D0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

void proto::gnss::Emergency::EllipsoidPoint::New(proto::gnss::Emergency::EllipsoidPoint *this)
{
  operator new();
}

uint64_t proto::gnss::Emergency::EllipsoidPoint::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 20))
    *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t proto::gnss::Emergency::EllipsoidPoint::MergePartialFromCodedStream(proto::gnss::Emergency::EllipsoidPoint *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  unint64_t v8;
  char *v9;
  char *v10;
  unsigned int v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned __int8 *v14;
  uint64_t result;
  unsigned int v16;
  unsigned int v17;

  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
        *((_QWORD *)a2 + 1) = v5 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v7 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_15;
      v17 = 0;
      v10 = (char *)*((_QWORD *)a2 + 1);
      v8 = *((_QWORD *)a2 + 2);
      if ((unint64_t)v10 >= v8 || *v10 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v17);
        if (!(_DWORD)result)
          return result;
        v11 = v17;
        v12 = (_BYTE *)*((_QWORD *)a2 + 1);
        v8 = *((_QWORD *)a2 + 2);
      }
      else
      {
        v11 = *v10;
        v12 = v10 + 1;
        *((_QWORD *)a2 + 1) = v12;
      }
      *((_DWORD *)this + 2) = v11;
      *((_DWORD *)this + 5) |= 1u;
      if ((unint64_t)v12 < v8 && *v12 == 16)
      {
        v9 = v12 + 1;
        *((_QWORD *)a2 + 1) = v9;
LABEL_23:
        v16 = 0;
        if ((unint64_t)v9 >= v8 || *v9 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v16);
          if (!(_DWORD)result)
            return result;
          v13 = v16;
          v14 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v8 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v13 = *v9;
          v14 = (unsigned __int8 *)(v9 + 1);
          *((_QWORD *)a2 + 1) = v14;
        }
        *((_DWORD *)this + 3) = v13;
        *((_DWORD *)this + 5) |= 2u;
        if (v14 == (unsigned __int8 *)v8 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      v7 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v9 = (char *)*((_QWORD *)a2 + 1);
        v8 = *((_QWORD *)a2 + 2);
        goto LABEL_23;
      }
    }
    else
    {
      v7 = TagFallback & 7;
    }
LABEL_15:
    if (v7 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t proto::gnss::Emergency::EllipsoidPoint::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int v4;
  uint64_t v5;
  int v6;

  v4 = (int)a2;
  v5 = this;
  v6 = *(_DWORD *)(this + 20);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(this + 8), (int)a2, a4);
    v6 = *(_DWORD *)(v5 + 20);
  }
  if ((v6 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), v4, a4);
  return this;
}

uint64_t proto::gnss::Emergency::EllipsoidPoint::ByteSize(proto::gnss::Emergency::EllipsoidPoint *this, unsigned int a2)
{
  char v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;

  v3 = *((_BYTE *)this + 20);
  if (v3)
  {
    if ((*((_BYTE *)this + 20) & 1) != 0)
    {
      v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
      if ((v5 & 0x80000000) != 0)
      {
        v4 = 11;
        if ((v3 & 2) == 0)
          goto LABEL_19;
      }
      else if (v5 >= 0x80)
      {
        v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2)
           + 1;
        if ((*((_DWORD *)this + 5) & 2) == 0)
          goto LABEL_19;
      }
      else
      {
        v4 = 2;
        if ((v3 & 2) == 0)
          goto LABEL_19;
      }
    }
    else
    {
      v4 = 0;
      if ((*((_BYTE *)this + 20) & 2) == 0)
        goto LABEL_19;
    }
    v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
    if ((v6 & 0x80000000) != 0)
    {
      v7 = 11;
    }
    else if (v6 >= 0x80)
    {
      v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    }
    else
    {
      v7 = 2;
    }
    v4 = (v7 + v4);
  }
  else
  {
    v4 = 0;
  }
LABEL_19:
  *((_DWORD *)this + 4) = v4;
  return v4;
}

void proto::gnss::Emergency::EllipsoidPoint::CheckTypeAndMergeFrom(proto::gnss::Emergency::EllipsoidPoint *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  sub_10006C4F4(this, (uint64_t)lpsrc);
}

uint64_t proto::gnss::Emergency::EllipsoidPoint::IsInitialized(proto::gnss::Emergency::EllipsoidPoint *this)
{
  return 1;
}

_QWORD *proto::gnss::Emergency::EllipsoidPoint::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.EllipsoidPoint");
}

void sub_10006C964(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  char v9;
  _BYTE v10[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v10, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 13003);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 24);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      *(_DWORD *)(a1 + 24) |= 1u;
      v6 = *(_DWORD **)(a1 + 8);
      if (!v6)
        operator new();
      v7 = *(_QWORD *)(a2 + 8);
      if (!v7)
        v7 = *(_QWORD *)(proto::gnss::Emergency::PointUncertainCircle::default_instance_ + 8);
      sub_10006C4F4(v6, v7);
      v5 = *(_DWORD *)(a2 + 24);
    }
    if ((v5 & 2) != 0)
    {
      v8 = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a1 + 24) |= 2u;
      *(_DWORD *)(a1 + 16) = v8;
    }
  }
}

void sub_10006CA50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void proto::gnss::Emergency::PointUncertainCircle::~PointUncertainCircle(proto::gnss::Emergency::PointUncertainCircle *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1000F5348;
  if ((proto::gnss::Emergency::PointUncertainCircle *)proto::gnss::Emergency::PointUncertainCircle::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  proto::gnss::Emergency::PointUncertainCircle::~PointUncertainCircle(this);
  operator delete();
}

void proto::gnss::Emergency::PointUncertainCircle::New(proto::gnss::Emergency::PointUncertainCircle *this)
{
  operator new();
}

uint64_t proto::gnss::Emergency::PointUncertainCircle::Clear(uint64_t this)
{
  uint64_t v1;

  if (*(_BYTE *)(this + 24))
  {
    if ((*(_BYTE *)(this + 24) & 1) != 0)
    {
      v1 = *(_QWORD *)(this + 8);
      if (v1)
      {
        if (*(_BYTE *)(v1 + 20))
          *(_QWORD *)(v1 + 8) = 0;
        *(_DWORD *)(v1 + 20) = 0;
      }
    }
    *(_DWORD *)(this + 16) = 0;
  }
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t proto::gnss::Emergency::PointUncertainCircle::MergePartialFromCodedStream(proto::gnss::Emergency::PointUncertainCircle *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  unint64_t v9;
  char *v10;
  proto::gnss::Emergency::EllipsoidPoint *v11;
  char *v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  BOOL v18;
  int v19;
  _BYTE *v20;
  unsigned __int8 *v21;
  uint64_t result;
  unsigned int v23;

  v5 = (unsigned int *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      v6 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v6 >= *((_QWORD *)a2 + 2) || *v6 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
        *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
        *((_QWORD *)a2 + 1) = v6 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 == 1)
        break;
      if (TagFallback >> 3 == 2)
      {
        v8 = TagFallback & 7;
        if ((TagFallback & 7) == 0)
        {
          v10 = (char *)*((_QWORD *)a2 + 1);
          v9 = *((_QWORD *)a2 + 2);
          goto LABEL_30;
        }
      }
      else
      {
        v8 = TagFallback & 7;
      }
LABEL_18:
      if (v8 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) == 0)
        return 0;
    }
    v8 = TagFallback & 7;
    if (v8 != 2)
      goto LABEL_18;
    *((_DWORD *)this + 6) |= 1u;
    v11 = (proto::gnss::Emergency::EllipsoidPoint *)*((_QWORD *)this + 1);
    if (!v11)
      operator new();
    v23 = 0;
    v12 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v12 >= *((_QWORD *)a2 + 2) || *v12 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v23))
        return 0;
    }
    else
    {
      v23 = *v12;
      *((_QWORD *)a2 + 1) = v12 + 1;
    }
    v13 = *((_DWORD *)a2 + 14);
    v14 = *((_DWORD *)a2 + 15);
    *((_DWORD *)a2 + 14) = v13 + 1;
    if (v13 >= v14)
      return 0;
    v15 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v23);
    if (!proto::gnss::Emergency::EllipsoidPoint::MergePartialFromCodedStream(v11, a2, v16)
      || !*((_BYTE *)a2 + 36))
    {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v15);
    v17 = *((_DWORD *)a2 + 14);
    v18 = __OFSUB__(v17, 1);
    v19 = v17 - 1;
    if (v19 < 0 == v18)
      *((_DWORD *)a2 + 14) = v19;
    v20 = (_BYTE *)*((_QWORD *)a2 + 1);
    v9 = *((_QWORD *)a2 + 2);
    if ((unint64_t)v20 < v9 && *v20 == 16)
    {
      v10 = v20 + 1;
      *((_QWORD *)a2 + 1) = v10;
LABEL_30:
      if ((unint64_t)v10 >= v9 || *v10 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
        if (!(_DWORD)result)
          return result;
        v21 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
      }
      else
      {
        *v5 = *v10;
        v21 = (unsigned __int8 *)(v10 + 1);
        *((_QWORD *)a2 + 1) = v21;
      }
      *((_DWORD *)this + 6) |= 2u;
      if (v21 == (unsigned __int8 *)v9 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      }
    }
  }
}

uint64_t proto::gnss::Emergency::PointUncertainCircle::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = this;
  v6 = *(_DWORD *)(this + 24);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 16), a2, a4);
  }
  v7 = *(_QWORD *)(this + 8);
  if (!v7)
    v7 = *(_QWORD *)(proto::gnss::Emergency::PointUncertainCircle::default_instance_ + 8);
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
  if ((*(_DWORD *)(v5 + 24) & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 16), a2, a4);
  return this;
}

uint64_t proto::gnss::Emergency::PointUncertainCircle::ByteSize(proto::gnss::Emergency::PointUncertainCircle *this, unsigned int a2)
{
  uint64_t v3;
  proto::gnss::Emergency::EllipsoidPoint *v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  int v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;

  if (!*((_BYTE *)this + 24))
  {
    v3 = 0;
    goto LABEL_16;
  }
  if ((*((_BYTE *)this + 24) & 1) == 0)
  {
    v3 = 0;
    if ((*((_BYTE *)this + 24) & 2) == 0)
      goto LABEL_16;
    goto LABEL_12;
  }
  v4 = (proto::gnss::Emergency::EllipsoidPoint *)*((_QWORD *)this + 1);
  if (!v4)
    v4 = *(proto::gnss::Emergency::EllipsoidPoint **)(proto::gnss::Emergency::PointUncertainCircle::default_instance_ + 8);
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::EllipsoidPoint::ByteSize(v4, a2);
  v6 = (int)v5;
  if (v5 >= 0x80)
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
  else
    v7 = 1;
  v3 = (v6 + v7 + 1);
  if ((*((_DWORD *)this + 6) & 2) != 0)
  {
LABEL_12:
    v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
    if (v8 >= 0x80)
      v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2) + 1;
    else
      v9 = 2;
    v3 = (v9 + v3);
  }
LABEL_16:
  *((_DWORD *)this + 5) = v3;
  return v3;
}

void proto::gnss::Emergency::PointUncertainCircle::CheckTypeAndMergeFrom(proto::gnss::Emergency::PointUncertainCircle *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  sub_10006C964((uint64_t)this, (uint64_t)lpsrc);
}

uint64_t proto::gnss::Emergency::PointUncertainCircle::IsInitialized(proto::gnss::Emergency::PointUncertainCircle *this)
{
  return 1;
}

_QWORD *proto::gnss::Emergency::PointUncertainCircle::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.PointUncertainCircle");
}

void sub_10006CF20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  char v12;
  _BYTE v13[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v13, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 13306);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v12, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 36);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) != 0)
    {
      *(_DWORD *)(a1 + 36) |= 1u;
      v7 = *(_DWORD **)(a1 + 8);
      if (!v7)
        operator new();
      v8 = *(_QWORD *)(a2 + 8);
      if (!v8)
        v8 = *(_QWORD *)(proto::gnss::Emergency::PointUncertainEllipse::default_instance_ + 8);
      sub_10006C4F4(v7, v8);
      v5 = *(_DWORD *)(a2 + 36);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          goto LABEL_7;
        goto LABEL_17;
      }
    }
    else if ((*(_BYTE *)(a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    v9 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 36) |= 2u;
    *(_DWORD *)(a1 + 16) = v9;
    v5 = *(_DWORD *)(a2 + 36);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0)
        goto LABEL_8;
      goto LABEL_18;
    }
LABEL_17:
    v10 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 36) |= 4u;
    *(_DWORD *)(a1 + 20) = v10;
    v5 = *(_DWORD *)(a2 + 36);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0)
        return;
      goto LABEL_9;
    }
LABEL_18:
    v11 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 36) |= 8u;
    *(_DWORD *)(a1 + 24) = v11;
    if ((*(_DWORD *)(a2 + 36) & 0x10) == 0)
      return;
LABEL_9:
    v6 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a1 + 36) |= 0x10u;
    *(_DWORD *)(a1 + 28) = v6;
  }
}

void sub_10006D074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void proto::gnss::Emergency::PointUncertainEllipse::~PointUncertainEllipse(proto::gnss::Emergency::PointUncertainEllipse *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1000F53C0;
  if ((proto::gnss::Emergency::PointUncertainEllipse *)proto::gnss::Emergency::PointUncertainEllipse::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  proto::gnss::Emergency::PointUncertainEllipse::~PointUncertainEllipse(this);
  operator delete();
}

void proto::gnss::Emergency::PointUncertainEllipse::New(proto::gnss::Emergency::PointUncertainEllipse *this)
{
  operator new();
}

uint64_t proto::gnss::Emergency::PointUncertainEllipse::Clear(uint64_t this)
{
  uint64_t v1;

  if (*(_BYTE *)(this + 36))
  {
    if ((*(_BYTE *)(this + 36) & 1) != 0)
    {
      v1 = *(_QWORD *)(this + 8);
      if (v1)
      {
        if (*(_BYTE *)(v1 + 20))
          *(_QWORD *)(v1 + 8) = 0;
        *(_DWORD *)(v1 + 20) = 0;
      }
    }
    *(_QWORD *)(this + 16) = 0;
    *(_QWORD *)(this + 24) = 0;
  }
  *(_DWORD *)(this + 36) = 0;
  return this;
}

uint64_t proto::gnss::Emergency::PointUncertainEllipse::MergePartialFromCodedStream(proto::gnss::Emergency::PointUncertainEllipse *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  char *v9;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v11;
  proto::gnss::Emergency::EllipsoidPoint *v12;
  char *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  BOOL v24;
  int v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t result;
  _BYTE *v29;
  _BYTE *v30;
  unsigned __int8 *v31;
  unsigned int v32;

  v5 = (unsigned int *)((char *)this + 16);
  v6 = (unsigned int *)((char *)this + 20);
  v7 = (unsigned int *)((char *)this + 24);
  v8 = (unsigned int *)((char *)this + 28);
  while (2)
  {
    v9 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v9 >= *((_QWORD *)a2 + 2) || *v9 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v9;
      *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      *((_QWORD *)a2 + 1) = v9 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_22;
        *((_DWORD *)this + 9) |= 1u;
        v12 = (proto::gnss::Emergency::EllipsoidPoint *)*((_QWORD *)this + 1);
        if (!v12)
          operator new();
        v32 = 0;
        v13 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v13 >= *((_QWORD *)a2 + 2) || *v13 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v32))return 0;
        }
        else
        {
          v32 = *v13;
          *((_QWORD *)a2 + 1) = v13 + 1;
        }
        v19 = *((_DWORD *)a2 + 14);
        v20 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v19 + 1;
        if (v19 >= v20)
          return 0;
        v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v32);
        if (!proto::gnss::Emergency::EllipsoidPoint::MergePartialFromCodedStream(v12, a2, v22)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v21);
        v23 = *((_DWORD *)a2 + 14);
        v24 = __OFSUB__(v23, 1);
        v25 = v23 - 1;
        if (v25 < 0 == v24)
          *((_DWORD *)a2 + 14) = v25;
        v26 = (_BYTE *)*((_QWORD *)a2 + 1);
        v14 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v26 >= v14 || *v26 != 16)
          continue;
        v15 = v26 + 1;
        *((_QWORD *)a2 + 1) = v15;
        goto LABEL_35;
      case 2u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v15 = (char *)*((_QWORD *)a2 + 1);
        v14 = *((_QWORD *)a2 + 2);
LABEL_35:
        if ((unint64_t)v15 >= v14 || *v15 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v27 = (_BYTE *)*((_QWORD *)a2 + 1);
          v14 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v5 = *v15;
          v27 = v15 + 1;
          *((_QWORD *)a2 + 1) = v27;
        }
        *((_DWORD *)this + 9) |= 2u;
        if ((unint64_t)v27 >= v14 || *v27 != 24)
          continue;
        v16 = v27 + 1;
        *((_QWORD *)a2 + 1) = v16;
LABEL_43:
        if ((unint64_t)v16 >= v14 || *v16 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!(_DWORD)result)
            return result;
          v29 = (_BYTE *)*((_QWORD *)a2 + 1);
          v14 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v6 = *v16;
          v29 = v16 + 1;
          *((_QWORD *)a2 + 1) = v29;
        }
        *((_DWORD *)this + 9) |= 4u;
        if ((unint64_t)v29 >= v14 || *v29 != 32)
          continue;
        v17 = v29 + 1;
        *((_QWORD *)a2 + 1) = v17;
LABEL_51:
        if ((unint64_t)v17 >= v14 || *v17 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!(_DWORD)result)
            return result;
          v30 = (_BYTE *)*((_QWORD *)a2 + 1);
          v14 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v7 = *v17;
          v30 = v17 + 1;
          *((_QWORD *)a2 + 1) = v30;
        }
        *((_DWORD *)this + 9) |= 8u;
        if ((unint64_t)v30 >= v14 || *v30 != 40)
          continue;
        v18 = v30 + 1;
        *((_QWORD *)a2 + 1) = v18;
LABEL_59:
        if ((unint64_t)v18 >= v14 || *v18 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v8);
          if (!(_DWORD)result)
            return result;
          v31 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v14 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v8 = *v18;
          v31 = (unsigned __int8 *)(v18 + 1);
          *((_QWORD *)a2 + 1) = v31;
        }
        *((_DWORD *)this + 9) |= 0x10u;
        if (v31 != (unsigned __int8 *)v14 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
          continue;
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        break;
      case 3u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v16 = (char *)*((_QWORD *)a2 + 1);
        v14 = *((_QWORD *)a2 + 2);
        goto LABEL_43;
      case 4u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v17 = (char *)*((_QWORD *)a2 + 1);
        v14 = *((_QWORD *)a2 + 2);
        goto LABEL_51;
      case 5u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v18 = (char *)*((_QWORD *)a2 + 1);
        v14 = *((_QWORD *)a2 + 2);
        goto LABEL_59;
      default:
        v11 = TagFallback & 7;
LABEL_22:
        if (v11 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

uint64_t proto::gnss::Emergency::PointUncertainEllipse::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int *v5;
  int v6;
  uint64_t v7;

  v5 = (int *)this;
  v6 = *(_DWORD *)(this + 36);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(this + 8);
    if (!v7)
      v7 = *(_QWORD *)(proto::gnss::Emergency::PointUncertainEllipse::default_instance_ + 8);
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    v6 = v5[9];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v5[4], a2, a4);
  v6 = v5[9];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[5], a2, a4);
  v6 = v5[9];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v5[7], a2, a4);
  }
LABEL_12:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v5[6], a2, a4);
  if ((v5[9] & 0x10) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v5[7], a2, a4);
  return this;
}

uint64_t proto::gnss::Emergency::PointUncertainEllipse::ByteSize(proto::gnss::Emergency::PointUncertainEllipse *this, unsigned int a2)
{
  int v3;
  uint64_t v4;
  proto::gnss::Emergency::EllipsoidPoint *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  int v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v13;
  int v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;
  int v16;

  LOBYTE(v3) = *((_BYTE *)this + 36);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_32;
  }
  if ((*((_BYTE *)this + 36) & 1) == 0)
  {
    v4 = 0;
    if ((*((_BYTE *)this + 36) & 2) == 0)
      goto LABEL_16;
    goto LABEL_12;
  }
  v5 = (proto::gnss::Emergency::EllipsoidPoint *)*((_QWORD *)this + 1);
  if (!v5)
    v5 = *(proto::gnss::Emergency::EllipsoidPoint **)(proto::gnss::Emergency::PointUncertainEllipse::default_instance_
                                                    + 8);
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::EllipsoidPoint::ByteSize(v5, a2);
  v7 = (int)v6;
  if (v6 >= 0x80)
    v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2);
  else
    v8 = 1;
  v4 = (v7 + v8 + 1);
  v3 = *((_DWORD *)this + 9);
  if ((v3 & 2) != 0)
  {
LABEL_12:
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
    if (v9 >= 0x80)
    {
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2) + 1;
      v3 = *((_DWORD *)this + 9);
    }
    else
    {
      v10 = 2;
    }
    v4 = (v10 + v4);
  }
LABEL_16:
  if ((v3 & 4) != 0)
  {
    v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
    if (v11 >= 0x80)
    {
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
      v3 = *((_DWORD *)this + 9);
    }
    else
    {
      v12 = 2;
    }
    v4 = (v12 + v4);
    if ((v3 & 8) == 0)
    {
LABEL_18:
      if ((v3 & 0x10) == 0)
        goto LABEL_32;
      goto LABEL_28;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_18;
  }
  v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
  if (v13 >= 0x80)
  {
    v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2) + 1;
    v3 = *((_DWORD *)this + 9);
  }
  else
  {
    v14 = 2;
  }
  v4 = (v14 + v4);
  if ((v3 & 0x10) != 0)
  {
LABEL_28:
    v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 7);
    if (v15 >= 0x80)
      v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2) + 1;
    else
      v16 = 2;
    v4 = (v16 + v4);
  }
LABEL_32:
  *((_DWORD *)this + 8) = v4;
  return v4;
}

void proto::gnss::Emergency::PointUncertainEllipse::CheckTypeAndMergeFrom(proto::gnss::Emergency::PointUncertainEllipse *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  sub_10006CF20((uint64_t)this, (uint64_t)lpsrc);
}

uint64_t proto::gnss::Emergency::PointUncertainEllipse::IsInitialized(proto::gnss::Emergency::PointUncertainEllipse *this)
{
  return 1;
}

_QWORD *proto::gnss::Emergency::PointUncertainEllipse::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.PointUncertainEllipse");
}

void sub_10006D7A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  char v14;
  _BYTE v15[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v15, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 13683);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v14, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v15);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 44);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 44) & 1) != 0)
    {
      *(_DWORD *)(a1 + 44) |= 1u;
      v7 = *(_DWORD **)(a1 + 8);
      if (!v7)
        operator new();
      v8 = *(_QWORD *)(a2 + 8);
      if (!v8)
        v8 = *(_QWORD *)(proto::gnss::Emergency::PointAltitudeUncertainEllipsoid::default_instance_ + 8);
      sub_10006C4F4(v7, v8);
      v5 = *(_DWORD *)(a2 + 44);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          goto LABEL_7;
        goto LABEL_19;
      }
    }
    else if ((*(_BYTE *)(a2 + 44) & 2) == 0)
    {
      goto LABEL_6;
    }
    v9 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 44) |= 2u;
    *(_DWORD *)(a1 + 16) = v9;
    v5 = *(_DWORD *)(a2 + 44);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0)
        goto LABEL_8;
      goto LABEL_20;
    }
LABEL_19:
    v10 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 44) |= 4u;
    *(_DWORD *)(a1 + 20) = v10;
    v5 = *(_DWORD *)(a2 + 44);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_21;
    }
LABEL_20:
    v11 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 44) |= 8u;
    *(_DWORD *)(a1 + 24) = v11;
    v5 = *(_DWORD *)(a2 + 44);
    if ((v5 & 0x10) == 0)
    {
LABEL_9:
      if ((v5 & 0x20) == 0)
        goto LABEL_10;
      goto LABEL_22;
    }
LABEL_21:
    v12 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a1 + 44) |= 0x10u;
    *(_DWORD *)(a1 + 28) = v12;
    v5 = *(_DWORD *)(a2 + 44);
    if ((v5 & 0x20) == 0)
    {
LABEL_10:
      if ((v5 & 0x40) == 0)
        return;
      goto LABEL_11;
    }
LABEL_22:
    v13 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 44) |= 0x20u;
    *(_DWORD *)(a1 + 32) = v13;
    if ((*(_DWORD *)(a2 + 44) & 0x40) == 0)
      return;
LABEL_11:
    v6 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a1 + 44) |= 0x40u;
    *(_DWORD *)(a1 + 36) = v6;
  }
}

void sub_10006D938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void proto::gnss::Emergency::PointAltitudeUncertainEllipsoid::~PointAltitudeUncertainEllipsoid(proto::gnss::Emergency::PointAltitudeUncertainEllipsoid *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1000F5438;
  if ((proto::gnss::Emergency::PointAltitudeUncertainEllipsoid *)proto::gnss::Emergency::PointAltitudeUncertainEllipsoid::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  proto::gnss::Emergency::PointAltitudeUncertainEllipsoid::~PointAltitudeUncertainEllipsoid(this);
  operator delete();
}

void proto::gnss::Emergency::PointAltitudeUncertainEllipsoid::New(proto::gnss::Emergency::PointAltitudeUncertainEllipsoid *this)
{
  operator new();
}

uint64_t proto::gnss::Emergency::PointAltitudeUncertainEllipsoid::Clear(uint64_t this)
{
  uint64_t v1;

  if (*(_BYTE *)(this + 44))
  {
    if ((*(_BYTE *)(this + 44) & 1) != 0)
    {
      v1 = *(_QWORD *)(this + 8);
      if (v1)
      {
        if (*(_BYTE *)(v1 + 20))
          *(_QWORD *)(v1 + 8) = 0;
        *(_DWORD *)(v1 + 20) = 0;
      }
    }
    *(_QWORD *)(this + 16) = 0;
    *(_QWORD *)(this + 24) = 0;
    *(_QWORD *)(this + 32) = 0;
  }
  *(_DWORD *)(this + 44) = 0;
  return this;
}

uint64_t proto::gnss::Emergency::PointAltitudeUncertainEllipsoid::MergePartialFromCodedStream(proto::gnss::Emergency::PointAltitudeUncertainEllipsoid *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  char *v11;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int *v19;
  proto::gnss::Emergency::EllipsoidPoint *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  BOOL v34;
  int v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t result;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;
  _BYTE *v42;
  unsigned __int8 *v43;
  unsigned int v44;

  v5 = (unsigned int *)((char *)this + 16);
  v6 = (unsigned int *)((char *)this + 20);
  v7 = (unsigned int *)((char *)this + 24);
  v8 = (unsigned int *)((char *)this + 28);
  v9 = (unsigned int *)((char *)this + 32);
  v10 = (unsigned int *)((char *)this + 36);
  while (2)
  {
    v11 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v11 >= *((_QWORD *)a2 + 2) || *v11 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v11;
      *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      *((_QWORD *)a2 + 1) = v11 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v13 = TagFallback & 7;
        if (v13 != 2)
          goto LABEL_26;
        v14 = v10;
        v15 = v9;
        v16 = v8;
        v17 = v7;
        v18 = v6;
        v19 = v5;
        *((_DWORD *)this + 11) |= 1u;
        v20 = (proto::gnss::Emergency::EllipsoidPoint *)*((_QWORD *)this + 1);
        if (!v20)
          operator new();
        v44 = 0;
        v21 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v21 >= *((_QWORD *)a2 + 2) || *v21 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v44))return 0;
        }
        else
        {
          v44 = *v21;
          *((_QWORD *)a2 + 1) = v21 + 1;
        }
        v29 = *((_DWORD *)a2 + 14);
        v30 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v29 + 1;
        if (v29 >= v30)
          return 0;
        v31 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v44);
        if (!proto::gnss::Emergency::EllipsoidPoint::MergePartialFromCodedStream(v20, a2, v32)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v31);
        v33 = *((_DWORD *)a2 + 14);
        v34 = __OFSUB__(v33, 1);
        v35 = v33 - 1;
        if (v35 < 0 == v34)
          *((_DWORD *)a2 + 14) = v35;
        v36 = (_BYTE *)*((_QWORD *)a2 + 1);
        v22 = *((_QWORD *)a2 + 2);
        v5 = v19;
        v6 = v18;
        v7 = v17;
        v8 = v16;
        v9 = v15;
        v10 = v14;
        if ((unint64_t)v36 >= v22 || *v36 != 16)
          continue;
        v23 = v36 + 1;
        *((_QWORD *)a2 + 1) = v23;
        goto LABEL_39;
      case 2u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_26;
        v23 = (char *)*((_QWORD *)a2 + 1);
        v22 = *((_QWORD *)a2 + 2);
LABEL_39:
        if ((unint64_t)v23 >= v22 || *v23 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v37 = (_BYTE *)*((_QWORD *)a2 + 1);
          v22 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v5 = *v23;
          v37 = v23 + 1;
          *((_QWORD *)a2 + 1) = v37;
        }
        *((_DWORD *)this + 11) |= 2u;
        if ((unint64_t)v37 >= v22 || *v37 != 24)
          continue;
        v24 = v37 + 1;
        *((_QWORD *)a2 + 1) = v24;
LABEL_47:
        if ((unint64_t)v24 >= v22 || *v24 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!(_DWORD)result)
            return result;
          v39 = (_BYTE *)*((_QWORD *)a2 + 1);
          v22 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v6 = *v24;
          v39 = v24 + 1;
          *((_QWORD *)a2 + 1) = v39;
        }
        *((_DWORD *)this + 11) |= 4u;
        if ((unint64_t)v39 >= v22 || *v39 != 32)
          continue;
        v25 = v39 + 1;
        *((_QWORD *)a2 + 1) = v25;
LABEL_55:
        if ((unint64_t)v25 >= v22 || *v25 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!(_DWORD)result)
            return result;
          v40 = (_BYTE *)*((_QWORD *)a2 + 1);
          v22 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v7 = *v25;
          v40 = v25 + 1;
          *((_QWORD *)a2 + 1) = v40;
        }
        *((_DWORD *)this + 11) |= 8u;
        if ((unint64_t)v40 >= v22 || *v40 != 40)
          continue;
        v26 = v40 + 1;
        *((_QWORD *)a2 + 1) = v26;
LABEL_63:
        if ((unint64_t)v26 >= v22 || *v26 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v8);
          if (!(_DWORD)result)
            return result;
          v41 = (_BYTE *)*((_QWORD *)a2 + 1);
          v22 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v8 = *v26;
          v41 = v26 + 1;
          *((_QWORD *)a2 + 1) = v41;
        }
        *((_DWORD *)this + 11) |= 0x10u;
        if ((unint64_t)v41 >= v22 || *v41 != 48)
          continue;
        v27 = v41 + 1;
        *((_QWORD *)a2 + 1) = v27;
LABEL_71:
        if ((unint64_t)v27 >= v22 || *v27 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v9);
          if (!(_DWORD)result)
            return result;
          v42 = (_BYTE *)*((_QWORD *)a2 + 1);
          v22 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v9 = *v27;
          v42 = v27 + 1;
          *((_QWORD *)a2 + 1) = v42;
        }
        *((_DWORD *)this + 11) |= 0x20u;
        if ((unint64_t)v42 >= v22 || *v42 != 56)
          continue;
        v28 = v42 + 1;
        *((_QWORD *)a2 + 1) = v28;
LABEL_79:
        if ((unint64_t)v28 >= v22 || *v28 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v10);
          if (!(_DWORD)result)
            return result;
          v43 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v22 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v10 = *v28;
          v43 = (unsigned __int8 *)(v28 + 1);
          *((_QWORD *)a2 + 1) = v43;
        }
        *((_DWORD *)this + 11) |= 0x40u;
        if (v43 != (unsigned __int8 *)v22 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
          continue;
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        break;
      case 3u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_26;
        v24 = (char *)*((_QWORD *)a2 + 1);
        v22 = *((_QWORD *)a2 + 2);
        goto LABEL_47;
      case 4u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_26;
        v25 = (char *)*((_QWORD *)a2 + 1);
        v22 = *((_QWORD *)a2 + 2);
        goto LABEL_55;
      case 5u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_26;
        v26 = (char *)*((_QWORD *)a2 + 1);
        v22 = *((_QWORD *)a2 + 2);
        goto LABEL_63;
      case 6u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_26;
        v27 = (char *)*((_QWORD *)a2 + 1);
        v22 = *((_QWORD *)a2 + 2);
        goto LABEL_71;
      case 7u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_26;
        v28 = (char *)*((_QWORD *)a2 + 1);
        v22 = *((_QWORD *)a2 + 2);
        goto LABEL_79;
      default:
        v13 = TagFallback & 7;
LABEL_26:
        if (v13 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

uint64_t proto::gnss::Emergency::PointAltitudeUncertainEllipsoid::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int *v5;
  int v6;
  uint64_t v7;

  v5 = (int *)this;
  v6 = *(_DWORD *)(this + 44);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(this + 8);
    if (!v7)
      v7 = *(_QWORD *)(proto::gnss::Emergency::PointAltitudeUncertainEllipsoid::default_instance_ + 8);
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    v6 = v5[11];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v5[4], a2, a4);
  v6 = v5[11];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[5], a2, a4);
  v6 = v5[11];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v5[6], a2, a4);
  v6 = v5[11];
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v5[7], a2, a4);
  v6 = v5[11];
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v5[9], a2, a4);
  }
LABEL_16:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v5[8], a2, a4);
  if ((v5[11] & 0x40) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v5[9], a2, a4);
  return this;
}

uint64_t proto::gnss::Emergency::PointAltitudeUncertainEllipsoid::ByteSize(proto::gnss::Emergency::PointAltitudeUncertainEllipsoid *this, unsigned int a2)
{
  int v3;
  uint64_t v4;
  proto::gnss::Emergency::EllipsoidPoint *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  int v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v13;
  int v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;
  int v16;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v17;
  int v18;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v19;
  int v20;

  LOBYTE(v3) = *((_BYTE *)this + 44);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_42;
  }
  if ((*((_BYTE *)this + 44) & 1) == 0)
  {
    v4 = 0;
    if ((*((_BYTE *)this + 44) & 2) == 0)
      goto LABEL_16;
    goto LABEL_12;
  }
  v5 = (proto::gnss::Emergency::EllipsoidPoint *)*((_QWORD *)this + 1);
  if (!v5)
    v5 = *(proto::gnss::Emergency::EllipsoidPoint **)(proto::gnss::Emergency::PointAltitudeUncertainEllipsoid::default_instance_
                                                    + 8);
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::EllipsoidPoint::ByteSize(v5, a2);
  v7 = (int)v6;
  if (v6 >= 0x80)
    v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2);
  else
    v8 = 1;
  v4 = (v7 + v8 + 1);
  v3 = *((_DWORD *)this + 11);
  if ((v3 & 2) != 0)
  {
LABEL_12:
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
    if (v9 >= 0x80)
    {
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2) + 1;
      v3 = *((_DWORD *)this + 11);
    }
    else
    {
      v10 = 2;
    }
    v4 = (v10 + v4);
  }
LABEL_16:
  if ((v3 & 4) != 0)
  {
    v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
    if (v11 >= 0x80)
    {
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
      v3 = *((_DWORD *)this + 11);
    }
    else
    {
      v12 = 2;
    }
    v4 = (v12 + v4);
    if ((v3 & 8) == 0)
    {
LABEL_18:
      if ((v3 & 0x10) == 0)
        goto LABEL_19;
      goto LABEL_30;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_18;
  }
  v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
  if (v13 >= 0x80)
  {
    v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2) + 1;
    v3 = *((_DWORD *)this + 11);
  }
  else
  {
    v14 = 2;
  }
  v4 = (v14 + v4);
  if ((v3 & 0x10) == 0)
  {
LABEL_19:
    if ((v3 & 0x20) == 0)
      goto LABEL_20;
    goto LABEL_34;
  }
LABEL_30:
  v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 7);
  if (v15 >= 0x80)
  {
    v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2) + 1;
    v3 = *((_DWORD *)this + 11);
  }
  else
  {
    v16 = 2;
  }
  v4 = (v16 + v4);
  if ((v3 & 0x20) == 0)
  {
LABEL_20:
    if ((v3 & 0x40) == 0)
      goto LABEL_42;
    goto LABEL_38;
  }
LABEL_34:
  v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
  if (v17 >= 0x80)
  {
    v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2) + 1;
    v3 = *((_DWORD *)this + 11);
  }
  else
  {
    v18 = 2;
  }
  v4 = (v18 + v4);
  if ((v3 & 0x40) != 0)
  {
LABEL_38:
    v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 9);
    if (v19 >= 0x80)
      v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19, a2) + 1;
    else
      v20 = 2;
    v4 = (v20 + v4);
  }
LABEL_42:
  *((_DWORD *)this + 10) = v4;
  return v4;
}

void proto::gnss::Emergency::PointAltitudeUncertainEllipsoid::CheckTypeAndMergeFrom(proto::gnss::Emergency::PointAltitudeUncertainEllipsoid *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  sub_10006D7A4((uint64_t)this, (uint64_t)lpsrc);
}

uint64_t proto::gnss::Emergency::PointAltitudeUncertainEllipsoid::IsInitialized(proto::gnss::Emergency::PointAltitudeUncertainEllipsoid *this)
{
  return 1;
}

_QWORD *proto::gnss::Emergency::PointAltitudeUncertainEllipsoid::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.PointAltitudeUncertainEllipsoid");
}

void sub_10006E220(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  char v13;
  _BYTE v14[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v14, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 14037);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v13, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 40);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) != 0)
    {
      *(_DWORD *)(a1 + 40) |= 1u;
      v7 = *(_DWORD **)(a1 + 8);
      if (!v7)
        operator new();
      v8 = *(_QWORD *)(a2 + 8);
      if (!v8)
        v8 = *(_QWORD *)(proto::gnss::Emergency::EllipsoidArc::default_instance_ + 8);
      sub_10006C4F4(v7, v8);
      v5 = *(_DWORD *)(a2 + 40);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          goto LABEL_7;
        goto LABEL_18;
      }
    }
    else if ((*(_BYTE *)(a2 + 40) & 2) == 0)
    {
      goto LABEL_6;
    }
    v9 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 40) |= 2u;
    *(_DWORD *)(a1 + 16) = v9;
    v5 = *(_DWORD *)(a2 + 40);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0)
        goto LABEL_8;
      goto LABEL_19;
    }
LABEL_18:
    v10 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 40) |= 4u;
    *(_DWORD *)(a1 + 20) = v10;
    v5 = *(_DWORD *)(a2 + 40);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_20;
    }
LABEL_19:
    v11 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 40) |= 8u;
    *(_DWORD *)(a1 + 24) = v11;
    v5 = *(_DWORD *)(a2 + 40);
    if ((v5 & 0x10) == 0)
    {
LABEL_9:
      if ((v5 & 0x20) == 0)
        return;
      goto LABEL_10;
    }
LABEL_20:
    v12 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a1 + 40) |= 0x10u;
    *(_DWORD *)(a1 + 28) = v12;
    if ((*(_DWORD *)(a2 + 40) & 0x20) == 0)
      return;
LABEL_10:
    v6 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 40) |= 0x20u;
    *(_DWORD *)(a1 + 32) = v6;
  }
}

void sub_10006E394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void proto::gnss::Emergency::EllipsoidArc::~EllipsoidArc(proto::gnss::Emergency::EllipsoidArc *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1000F54B0;
  if ((proto::gnss::Emergency::EllipsoidArc *)proto::gnss::Emergency::EllipsoidArc::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  proto::gnss::Emergency::EllipsoidArc::~EllipsoidArc(this);
  operator delete();
}

void proto::gnss::Emergency::EllipsoidArc::New(proto::gnss::Emergency::EllipsoidArc *this)
{
  operator new();
}

uint64_t proto::gnss::Emergency::EllipsoidArc::Clear(uint64_t this)
{
  uint64_t v1;

  if (*(_BYTE *)(this + 40))
  {
    if ((*(_BYTE *)(this + 40) & 1) != 0)
    {
      v1 = *(_QWORD *)(this + 8);
      if (v1)
      {
        if (*(_BYTE *)(v1 + 20))
          *(_QWORD *)(v1 + 8) = 0;
        *(_DWORD *)(v1 + 20) = 0;
      }
    }
    *(_QWORD *)(this + 16) = 0;
    *(_QWORD *)(this + 24) = 0;
    *(_DWORD *)(this + 32) = 0;
  }
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t proto::gnss::Emergency::EllipsoidArc::MergePartialFromCodedStream(proto::gnss::Emergency::EllipsoidArc *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  char *v10;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v12;
  proto::gnss::Emergency::EllipsoidPoint *v13;
  char *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  BOOL v26;
  int v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t result;
  _BYTE *v31;
  _BYTE *v32;
  _BYTE *v33;
  unsigned __int8 *v34;
  unsigned int v35;

  v5 = (unsigned int *)((char *)this + 16);
  v6 = (unsigned int *)((char *)this + 20);
  v7 = (unsigned int *)((char *)this + 24);
  v8 = (unsigned int *)((char *)this + 28);
  v9 = (unsigned int *)((char *)this + 32);
  while (2)
  {
    v10 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v10 >= *((_QWORD *)a2 + 2) || *v10 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v10;
      *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      *((_QWORD *)a2 + 1) = v10 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v12 = TagFallback & 7;
        if (v12 != 2)
          goto LABEL_24;
        *((_DWORD *)this + 10) |= 1u;
        v13 = (proto::gnss::Emergency::EllipsoidPoint *)*((_QWORD *)this + 1);
        if (!v13)
          operator new();
        v35 = 0;
        v14 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v14 >= *((_QWORD *)a2 + 2) || *v14 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v35))return 0;
        }
        else
        {
          v35 = *v14;
          *((_QWORD *)a2 + 1) = v14 + 1;
        }
        v21 = *((_DWORD *)a2 + 14);
        v22 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v21 + 1;
        if (v21 >= v22)
          return 0;
        v23 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v35);
        if (!proto::gnss::Emergency::EllipsoidPoint::MergePartialFromCodedStream(v13, a2, v24)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v23);
        v25 = *((_DWORD *)a2 + 14);
        v26 = __OFSUB__(v25, 1);
        v27 = v25 - 1;
        if (v27 < 0 == v26)
          *((_DWORD *)a2 + 14) = v27;
        v28 = (_BYTE *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v28 >= v15 || *v28 != 16)
          continue;
        v16 = v28 + 1;
        *((_QWORD *)a2 + 1) = v16;
        goto LABEL_37;
      case 2u:
        v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_24;
        v16 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
LABEL_37:
        if ((unint64_t)v16 >= v15 || *v16 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v29 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v5 = *v16;
          v29 = v16 + 1;
          *((_QWORD *)a2 + 1) = v29;
        }
        *((_DWORD *)this + 10) |= 2u;
        if ((unint64_t)v29 >= v15 || *v29 != 24)
          continue;
        v17 = v29 + 1;
        *((_QWORD *)a2 + 1) = v17;
LABEL_45:
        if ((unint64_t)v17 >= v15 || *v17 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!(_DWORD)result)
            return result;
          v31 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v6 = *v17;
          v31 = v17 + 1;
          *((_QWORD *)a2 + 1) = v31;
        }
        *((_DWORD *)this + 10) |= 4u;
        if ((unint64_t)v31 >= v15 || *v31 != 32)
          continue;
        v18 = v31 + 1;
        *((_QWORD *)a2 + 1) = v18;
LABEL_53:
        if ((unint64_t)v18 >= v15 || *v18 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!(_DWORD)result)
            return result;
          v32 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v7 = *v18;
          v32 = v18 + 1;
          *((_QWORD *)a2 + 1) = v32;
        }
        *((_DWORD *)this + 10) |= 8u;
        if ((unint64_t)v32 >= v15 || *v32 != 40)
          continue;
        v19 = v32 + 1;
        *((_QWORD *)a2 + 1) = v19;
LABEL_61:
        if ((unint64_t)v19 >= v15 || *v19 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v8);
          if (!(_DWORD)result)
            return result;
          v33 = (_BYTE *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v8 = *v19;
          v33 = v19 + 1;
          *((_QWORD *)a2 + 1) = v33;
        }
        *((_DWORD *)this + 10) |= 0x10u;
        if ((unint64_t)v33 >= v15 || *v33 != 48)
          continue;
        v20 = v33 + 1;
        *((_QWORD *)a2 + 1) = v20;
LABEL_69:
        if ((unint64_t)v20 >= v15 || *v20 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v9);
          if (!(_DWORD)result)
            return result;
          v34 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v15 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v9 = *v20;
          v34 = (unsigned __int8 *)(v20 + 1);
          *((_QWORD *)a2 + 1) = v34;
        }
        *((_DWORD *)this + 10) |= 0x20u;
        if (v34 != (unsigned __int8 *)v15 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
          continue;
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        break;
      case 3u:
        v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_24;
        v17 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_45;
      case 4u:
        v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_24;
        v18 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_53;
      case 5u:
        v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_24;
        v19 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_61;
      case 6u:
        v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_24;
        v20 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_69;
      default:
        v12 = TagFallback & 7;
LABEL_24:
        if (v12 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

uint64_t proto::gnss::Emergency::EllipsoidArc::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int *v5;
  int v6;
  uint64_t v7;

  v5 = (int *)this;
  v6 = *(_DWORD *)(this + 40);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(this + 8);
    if (!v7)
      v7 = *(_QWORD *)(proto::gnss::Emergency::EllipsoidArc::default_instance_ + 8);
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    v6 = v5[10];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v5[4], a2, a4);
  v6 = v5[10];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[5], a2, a4);
  v6 = v5[10];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v5[6], a2, a4);
  v6 = v5[10];
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v5[8], a2, a4);
  }
LABEL_14:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v5[7], a2, a4);
  if ((v5[10] & 0x20) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v5[8], a2, a4);
  return this;
}

uint64_t proto::gnss::Emergency::EllipsoidArc::ByteSize(proto::gnss::Emergency::EllipsoidArc *this, unsigned int a2)
{
  int v3;
  uint64_t v4;
  proto::gnss::Emergency::EllipsoidPoint *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  int v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v13;
  int v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;
  int v16;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v17;
  int v18;

  LOBYTE(v3) = *((_BYTE *)this + 40);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_37;
  }
  if ((*((_BYTE *)this + 40) & 1) == 0)
  {
    v4 = 0;
    if ((*((_BYTE *)this + 40) & 2) == 0)
      goto LABEL_16;
    goto LABEL_12;
  }
  v5 = (proto::gnss::Emergency::EllipsoidPoint *)*((_QWORD *)this + 1);
  if (!v5)
    v5 = *(proto::gnss::Emergency::EllipsoidPoint **)(proto::gnss::Emergency::EllipsoidArc::default_instance_ + 8);
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::EllipsoidPoint::ByteSize(v5, a2);
  v7 = (int)v6;
  if (v6 >= 0x80)
    v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2);
  else
    v8 = 1;
  v4 = (v7 + v8 + 1);
  v3 = *((_DWORD *)this + 10);
  if ((v3 & 2) != 0)
  {
LABEL_12:
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
    if (v9 >= 0x80)
    {
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2) + 1;
      v3 = *((_DWORD *)this + 10);
    }
    else
    {
      v10 = 2;
    }
    v4 = (v10 + v4);
  }
LABEL_16:
  if ((v3 & 4) != 0)
  {
    v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
    if (v11 >= 0x80)
    {
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
      v3 = *((_DWORD *)this + 10);
    }
    else
    {
      v12 = 2;
    }
    v4 = (v12 + v4);
    if ((v3 & 8) == 0)
    {
LABEL_18:
      if ((v3 & 0x10) == 0)
        goto LABEL_19;
      goto LABEL_29;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_18;
  }
  v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
  if (v13 >= 0x80)
  {
    v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2) + 1;
    v3 = *((_DWORD *)this + 10);
  }
  else
  {
    v14 = 2;
  }
  v4 = (v14 + v4);
  if ((v3 & 0x10) == 0)
  {
LABEL_19:
    if ((v3 & 0x20) == 0)
      goto LABEL_37;
    goto LABEL_33;
  }
LABEL_29:
  v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 7);
  if (v15 >= 0x80)
  {
    v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2) + 1;
    v3 = *((_DWORD *)this + 10);
  }
  else
  {
    v16 = 2;
  }
  v4 = (v16 + v4);
  if ((v3 & 0x20) != 0)
  {
LABEL_33:
    v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
    if (v17 >= 0x80)
      v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2) + 1;
    else
      v18 = 2;
    v4 = (v18 + v4);
  }
LABEL_37:
  *((_DWORD *)this + 9) = v4;
  return v4;
}

void proto::gnss::Emergency::EllipsoidArc::CheckTypeAndMergeFrom(proto::gnss::Emergency::EllipsoidArc *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  sub_10006E220((uint64_t)this, (uint64_t)lpsrc);
}

uint64_t proto::gnss::Emergency::EllipsoidArc::IsInitialized(proto::gnss::Emergency::EllipsoidArc *this)
{
  return 1;
}

_QWORD *proto::gnss::Emergency::EllipsoidArc::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.EllipsoidArc");
}

void sub_10006EB88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  char v9;
  _BYTE v10[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v10, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 14263);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 24);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      *(_DWORD *)(a1 + 24) |= 1u;
      v6 = *(_DWORD **)(a1 + 8);
      if (!v6)
        operator new();
      v7 = *(_QWORD *)(a2 + 8);
      if (!v7)
        v7 = *(_QWORD *)(proto::gnss::Emergency::PointAltitude::default_instance_ + 8);
      sub_10006C4F4(v6, v7);
      v5 = *(_DWORD *)(a2 + 24);
    }
    if ((v5 & 2) != 0)
    {
      v8 = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a1 + 24) |= 2u;
      *(_DWORD *)(a1 + 16) = v8;
    }
  }
}

void sub_10006EC74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void proto::gnss::Emergency::PointAltitude::~PointAltitude(proto::gnss::Emergency::PointAltitude *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1000F5528;
  if ((proto::gnss::Emergency::PointAltitude *)proto::gnss::Emergency::PointAltitude::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  proto::gnss::Emergency::PointAltitude::~PointAltitude(this);
  operator delete();
}

void proto::gnss::Emergency::PointAltitude::New(proto::gnss::Emergency::PointAltitude *this)
{
  operator new();
}

uint64_t proto::gnss::Emergency::PointAltitude::Clear(uint64_t this)
{
  uint64_t v1;

  if (*(_BYTE *)(this + 24))
  {
    if ((*(_BYTE *)(this + 24) & 1) != 0)
    {
      v1 = *(_QWORD *)(this + 8);
      if (v1)
      {
        if (*(_BYTE *)(v1 + 20))
          *(_QWORD *)(v1 + 8) = 0;
        *(_DWORD *)(v1 + 20) = 0;
      }
    }
    *(_DWORD *)(this + 16) = 0;
  }
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t proto::gnss::Emergency::PointAltitude::MergePartialFromCodedStream(proto::gnss::Emergency::PointAltitude *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  unint64_t v9;
  char *v10;
  proto::gnss::Emergency::EllipsoidPoint *v11;
  char *v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  BOOL v18;
  int v19;
  _BYTE *v20;
  unsigned __int8 *v21;
  uint64_t result;
  unsigned int v23;

  v5 = (unsigned int *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      v6 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v6 >= *((_QWORD *)a2 + 2) || *v6 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
        *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
        *((_QWORD *)a2 + 1) = v6 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 == 1)
        break;
      if (TagFallback >> 3 == 2)
      {
        v8 = TagFallback & 7;
        if ((TagFallback & 7) == 0)
        {
          v10 = (char *)*((_QWORD *)a2 + 1);
          v9 = *((_QWORD *)a2 + 2);
          goto LABEL_30;
        }
      }
      else
      {
        v8 = TagFallback & 7;
      }
LABEL_18:
      if (v8 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) == 0)
        return 0;
    }
    v8 = TagFallback & 7;
    if (v8 != 2)
      goto LABEL_18;
    *((_DWORD *)this + 6) |= 1u;
    v11 = (proto::gnss::Emergency::EllipsoidPoint *)*((_QWORD *)this + 1);
    if (!v11)
      operator new();
    v23 = 0;
    v12 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v12 >= *((_QWORD *)a2 + 2) || *v12 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v23))
        return 0;
    }
    else
    {
      v23 = *v12;
      *((_QWORD *)a2 + 1) = v12 + 1;
    }
    v13 = *((_DWORD *)a2 + 14);
    v14 = *((_DWORD *)a2 + 15);
    *((_DWORD *)a2 + 14) = v13 + 1;
    if (v13 >= v14)
      return 0;
    v15 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v23);
    if (!proto::gnss::Emergency::EllipsoidPoint::MergePartialFromCodedStream(v11, a2, v16)
      || !*((_BYTE *)a2 + 36))
    {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v15);
    v17 = *((_DWORD *)a2 + 14);
    v18 = __OFSUB__(v17, 1);
    v19 = v17 - 1;
    if (v19 < 0 == v18)
      *((_DWORD *)a2 + 14) = v19;
    v20 = (_BYTE *)*((_QWORD *)a2 + 1);
    v9 = *((_QWORD *)a2 + 2);
    if ((unint64_t)v20 < v9 && *v20 == 16)
    {
      v10 = v20 + 1;
      *((_QWORD *)a2 + 1) = v10;
LABEL_30:
      if ((unint64_t)v10 >= v9 || *v10 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
        if (!(_DWORD)result)
          return result;
        v21 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
      }
      else
      {
        *v5 = *v10;
        v21 = (unsigned __int8 *)(v10 + 1);
        *((_QWORD *)a2 + 1) = v21;
      }
      *((_DWORD *)this + 6) |= 2u;
      if (v21 == (unsigned __int8 *)v9 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      }
    }
  }
}

uint64_t proto::gnss::Emergency::PointAltitude::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = this;
  v6 = *(_DWORD *)(this + 24);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 16), a2, a4);
  }
  v7 = *(_QWORD *)(this + 8);
  if (!v7)
    v7 = *(_QWORD *)(proto::gnss::Emergency::PointAltitude::default_instance_ + 8);
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
  if ((*(_DWORD *)(v5 + 24) & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 16), a2, a4);
  return this;
}

uint64_t proto::gnss::Emergency::PointAltitude::ByteSize(proto::gnss::Emergency::PointAltitude *this, unsigned int a2)
{
  uint64_t v3;
  proto::gnss::Emergency::EllipsoidPoint *v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  int v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;

  if (!*((_BYTE *)this + 24))
  {
    v3 = 0;
    goto LABEL_16;
  }
  if ((*((_BYTE *)this + 24) & 1) == 0)
  {
    v3 = 0;
    if ((*((_BYTE *)this + 24) & 2) == 0)
      goto LABEL_16;
    goto LABEL_12;
  }
  v4 = (proto::gnss::Emergency::EllipsoidPoint *)*((_QWORD *)this + 1);
  if (!v4)
    v4 = *(proto::gnss::Emergency::EllipsoidPoint **)(proto::gnss::Emergency::PointAltitude::default_instance_ + 8);
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::EllipsoidPoint::ByteSize(v4, a2);
  v6 = (int)v5;
  if (v5 >= 0x80)
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
  else
    v7 = 1;
  v3 = (v6 + v7 + 1);
  if ((*((_DWORD *)this + 6) & 2) != 0)
  {
LABEL_12:
    v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
    if (v8 >= 0x80)
      v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2) + 1;
    else
      v9 = 2;
    v3 = (v9 + v3);
  }
LABEL_16:
  *((_DWORD *)this + 5) = v3;
  return v3;
}

void proto::gnss::Emergency::PointAltitude::CheckTypeAndMergeFrom(proto::gnss::Emergency::PointAltitude *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  sub_10006EB88((uint64_t)this, (uint64_t)lpsrc);
}

uint64_t proto::gnss::Emergency::PointAltitude::IsInitialized(proto::gnss::Emergency::PointAltitude *this)
{
  return 1;
}

_QWORD *proto::gnss::Emergency::PointAltitude::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.PointAltitude");
}

void sub_10006F144(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  _BYTE v12[48];

  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v12, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 14465);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2), *(_DWORD *)(a2 + 16) + a1[4]);
  if (*(int *)(a2 + 16) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v5);
      v7 = a1[5];
      v8 = (int)a1[4];
      if ((int)v8 >= v7)
      {
        if (v7 == a1[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2), v7 + 1);
          v7 = a1[5];
        }
        a1[5] = v7 + 1;
        operator new();
      }
      v9 = *((_QWORD *)a1 + 1);
      a1[4] = v8 + 1;
      sub_10006C4F4(*(_DWORD **)(v9 + 8 * v8), v6);
      ++v5;
    }
    while (v5 < *(int *)(a2 + 16));
  }
  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    v10 = *(_DWORD *)(a2 + 32);
    a1[10] |= 1u;
    a1[8] = v10;
  }
}

void sub_10006F2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void proto::gnss::Emergency::Polygon::~Polygon(proto::gnss::Emergency::Polygon *this)
{
  int v2;
  uint64_t i;
  uint64_t v4;

  *(_QWORD *)this = off_1000F55A0;
  v2 = *((_DWORD *)this + 5);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 1) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v2 = *((_DWORD *)this + 5);
      }
    }
  }
  if (*((_QWORD *)this + 1))
    operator delete[]();
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  proto::gnss::Emergency::Polygon::~Polygon(this);
  operator delete();
}

void proto::gnss::Emergency::Polygon::New(proto::gnss::Emergency::Polygon *this)
{
  operator new();
}

uint64_t proto::gnss::Emergency::Polygon::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = this;
  if (*(_BYTE *)(this + 40))
    *(_DWORD *)(this + 32) = 0;
  if (*(int *)(this + 16) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8 * v2);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 16));
  }
  *(_DWORD *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 40) = 0;
  return this;
}

uint64_t proto::gnss::Emergency::Polygon::MergePartialFromCodedStream(proto::gnss::Emergency::Polygon *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned int *v5;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v6;
  char *v7;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v9;
  char *v10;
  unint64_t v11;
  _BYTE *v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  uint64_t v16;
  proto::gnss::Emergency::EllipsoidPoint *v17;
  char *v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  BOOL v24;
  int v25;
  _BYTE *v26;
  unsigned int v27;

  v5 = (unsigned int *)((char *)this + 32);
  v6 = (proto::gnss::Emergency::Polygon *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v7 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v7 >= *((_QWORD *)a2 + 2) || *v7 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
          *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
          *((_QWORD *)a2 + 1) = v7 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        if (TagFallback >> 3 != 1)
          break;
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_16;
        v10 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v10 >= v11 || *v10 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v12 = (_BYTE *)*((_QWORD *)a2 + 1);
          v11 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v5 = *v10;
          v12 = v10 + 1;
          *((_QWORD *)a2 + 1) = v12;
        }
        *((_DWORD *)this + 10) |= 1u;
        if ((unint64_t)v12 < v11 && *v12 == 18)
          goto LABEL_23;
      }
      if (TagFallback >> 3 != 2)
        break;
      v9 = TagFallback & 7;
      if (v9 != 2)
        goto LABEL_16;
      while (1)
      {
        v14 = *((_DWORD *)this + 5);
        v15 = *((int *)this + 4);
        if ((int)v15 >= v14)
        {
          if (v14 == *((_DWORD *)this + 6))
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v14 + 1);
            v14 = *((_DWORD *)this + 5);
          }
          *((_DWORD *)this + 5) = v14 + 1;
          operator new();
        }
        v16 = *((_QWORD *)this + 1);
        *((_DWORD *)this + 4) = v15 + 1;
        v17 = *(proto::gnss::Emergency::EllipsoidPoint **)(v16 + 8 * v15);
        v27 = 0;
        v18 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v18 >= *((_QWORD *)a2 + 2) || *v18 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v27))return 0;
        }
        else
        {
          v27 = *v18;
          *((_QWORD *)a2 + 1) = v18 + 1;
        }
        v19 = *((_DWORD *)a2 + 14);
        v20 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v19 + 1;
        if (v19 >= v20)
          return 0;
        v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v27);
        if (!proto::gnss::Emergency::EllipsoidPoint::MergePartialFromCodedStream(v17, a2, v22)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v21);
        v23 = *((_DWORD *)a2 + 14);
        v24 = __OFSUB__(v23, 1);
        v25 = v23 - 1;
        if (v25 < 0 == v24)
          *((_DWORD *)a2 + 14) = v25;
        v12 = (_BYTE *)*((_QWORD *)a2 + 1);
        v26 = (_BYTE *)*((_QWORD *)a2 + 2);
        if (v12 >= v26 || *v12 != 18)
          break;
LABEL_23:
        *((_QWORD *)a2 + 1) = v12 + 1;
      }
      if (v12 == v26 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      }
    }
    v9 = TagFallback & 7;
LABEL_16:
    if (v9 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t proto::gnss::Emergency::Polygon::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = this;
  if ((*(_BYTE *)(this + 40) & 1) != 0)
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(this + 32), a2, a4);
  if (*(int *)(v5 + 16) >= 1)
  {
    v6 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 16));
  }
  return this;
}

uint64_t proto::gnss::Emergency::Polygon::ByteSize(proto::gnss::Emergency::Polygon *this, unsigned int a2)
{
  int v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;
  int v10;

  if ((*((_BYTE *)this + 40) & 1) != 0)
  {
    v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
    if (v4 >= 0x80)
      v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4, a2) + 1;
    else
      v3 = 2;
  }
  else
  {
    v3 = 0;
  }
  v5 = *((_DWORD *)this + 4);
  v6 = (v5 + v3);
  if (v5 >= 1)
  {
    v7 = 0;
    do
    {
      v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::EllipsoidPoint::ByteSize(*(proto::gnss::Emergency::EllipsoidPoint **)(*((_QWORD *)this + 1) + 8 * v7), a2);
      v9 = (int)v8;
      if (v8 >= 0x80)
        v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2);
      else
        v10 = 1;
      v6 = (v9 + v6 + v10);
      ++v7;
    }
    while (v7 < *((int *)this + 4));
  }
  *((_DWORD *)this + 9) = v6;
  return v6;
}

void proto::gnss::Emergency::Polygon::CheckTypeAndMergeFrom(proto::gnss::Emergency::Polygon *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  sub_10006F144(this, (uint64_t)lpsrc);
}

uint64_t proto::gnss::Emergency::Polygon::IsInitialized(proto::gnss::Emergency::Polygon *this)
{
  return 1;
}

_QWORD *proto::gnss::Emergency::Polygon::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.Polygon");
}

void sub_10006F854(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  char v21;
  _BYTE v22[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v22, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 14907);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v22, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v21, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v22);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 72);
  if (!(_BYTE)v5)
    return;
  if ((*(_BYTE *)(a2 + 72) & 1) != 0)
  {
    *(_DWORD *)(a1 + 72) |= 1u;
    v7 = *(_QWORD *)(a1 + 8);
    if (!v7)
      operator new();
    v8 = *(_QWORD *)(a2 + 8);
    if (!v8)
      v8 = *(_QWORD *)(proto::gnss::Emergency::ShapeInfo::default_instance_ + 8);
    sub_10006C964(v7, v8);
    v5 = *(_DWORD *)(a2 + 72);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0)
        goto LABEL_7;
      goto LABEL_24;
    }
  }
  else if ((*(_BYTE *)(a2 + 72) & 2) == 0)
  {
    goto LABEL_6;
  }
  *(_DWORD *)(a1 + 72) |= 2u;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    operator new();
  v10 = *(_QWORD *)(a2 + 16);
  if (!v10)
    v10 = *(_QWORD *)(proto::gnss::Emergency::ShapeInfo::default_instance_ + 16);
  sub_10006CF20(v9, v10);
  v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_29;
  }
LABEL_24:
  *(_DWORD *)(a1 + 72) |= 4u;
  v11 = *(_QWORD *)(a1 + 24);
  if (!v11)
    operator new();
  v12 = *(_QWORD *)(a2 + 24);
  if (!v12)
    v12 = *(_QWORD *)(proto::gnss::Emergency::ShapeInfo::default_instance_ + 24);
  sub_10006D7A4(v11, v12);
  v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_34;
  }
LABEL_29:
  *(_DWORD *)(a1 + 72) |= 8u;
  v13 = *(_QWORD *)(a1 + 32);
  if (!v13)
    operator new();
  v14 = *(_QWORD *)(a2 + 32);
  if (!v14)
    v14 = *(_QWORD *)(proto::gnss::Emergency::ShapeInfo::default_instance_ + 32);
  sub_10006E220(v13, v14);
  v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
LABEL_39:
    *(_DWORD *)(a1 + 72) |= 0x20u;
    v17 = *(_QWORD *)(a1 + 48);
    if (!v17)
      operator new();
    v18 = *(_QWORD *)(a2 + 48);
    if (!v18)
      v18 = *(_QWORD *)(proto::gnss::Emergency::ShapeInfo::default_instance_ + 48);
    sub_10006EB88(v17, v18);
    v5 = *(_DWORD *)(a2 + 72);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0)
        return;
      goto LABEL_12;
    }
    goto LABEL_44;
  }
LABEL_34:
  *(_DWORD *)(a1 + 72) |= 0x10u;
  v15 = *(_DWORD **)(a1 + 40);
  if (!v15)
    operator new();
  v16 = *(_QWORD *)(a2 + 40);
  if (!v16)
    v16 = *(_QWORD *)(proto::gnss::Emergency::ShapeInfo::default_instance_ + 40);
  sub_10006C4F4(v15, v16);
  v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 0x20) != 0)
    goto LABEL_39;
LABEL_10:
  if ((v5 & 0x40) == 0)
    goto LABEL_11;
LABEL_44:
  *(_DWORD *)(a1 + 72) |= 0x40u;
  v19 = *(_DWORD **)(a1 + 56);
  if (!v19)
    operator new();
  v20 = *(_QWORD *)(a2 + 56);
  if (!v20)
    v20 = *(_QWORD *)(proto::gnss::Emergency::ShapeInfo::default_instance_ + 56);
  sub_10006F144(v19, v20);
  if ((*(_DWORD *)(a2 + 72) & 0x80) != 0)
  {
LABEL_12:
    v6 = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(a1 + 72) |= 0x80u;
    *(_DWORD *)(a1 + 64) = v6;
  }
}

void sub_10006FBD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_10006FBEC(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((_QWORD *)proto::gnss::Emergency::ShapeInfo::default_instance_ != result)
  {
    v1 = result;
    v2 = result[1];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = v1[2];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = v1[3];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = v1[4];
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = v1[5];
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = v1[6];
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    result = (_QWORD *)v1[7];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void proto::gnss::Emergency::ShapeInfo::~ShapeInfo(proto::gnss::Emergency::ShapeInfo *this)
{
  *(_QWORD *)this = off_1000F5618;
  sub_10006FBEC(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = off_1000F5618;
  sub_10006FBEC(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

void proto::gnss::Emergency::ShapeInfo::New(proto::gnss::Emergency::ShapeInfo *this)
{
  operator new();
}

uint64_t proto::gnss::Emergency::ShapeInfo::Clear(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v1 = this;
  LOBYTE(v2) = *(_BYTE *)(this + 72);
  if ((_BYTE)v2)
  {
    if ((*(_BYTE *)(this + 72) & 1) != 0)
    {
      this = *(_QWORD *)(this + 8);
      if (this)
      {
        this = proto::gnss::Emergency::PointUncertainCircle::Clear(this);
        v2 = *(_DWORD *)(v1 + 72);
      }
    }
    if ((v2 & 2) != 0)
    {
      this = *(_QWORD *)(v1 + 16);
      if (this)
      {
        this = proto::gnss::Emergency::PointUncertainEllipse::Clear(this);
        v2 = *(_DWORD *)(v1 + 72);
      }
    }
    if ((v2 & 4) != 0)
    {
      this = *(_QWORD *)(v1 + 24);
      if (this)
      {
        this = proto::gnss::Emergency::PointAltitudeUncertainEllipsoid::Clear(this);
        v2 = *(_DWORD *)(v1 + 72);
      }
    }
    if ((v2 & 8) != 0)
    {
      this = *(_QWORD *)(v1 + 32);
      if (this)
      {
        this = proto::gnss::Emergency::EllipsoidArc::Clear(this);
        v2 = *(_DWORD *)(v1 + 72);
      }
    }
    if ((v2 & 0x10) != 0)
    {
      v3 = *(_QWORD *)(v1 + 40);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 20))
          *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 20) = 0;
        v2 = *(_DWORD *)(v1 + 72);
      }
    }
    if ((v2 & 0x20) != 0)
    {
      this = *(_QWORD *)(v1 + 48);
      if (this)
      {
        this = proto::gnss::Emergency::PointAltitude::Clear(this);
        v2 = *(_DWORD *)(v1 + 72);
      }
    }
    if ((v2 & 0x40) != 0)
    {
      this = *(_QWORD *)(v1 + 56);
      if (this)
        this = proto::gnss::Emergency::Polygon::Clear(this);
    }
    *(_DWORD *)(v1 + 64) = 0;
  }
  *(_DWORD *)(v1 + 72) = 0;
  return this;
}

uint64_t proto::gnss::Emergency::ShapeInfo::MergePartialFromCodedStream(proto::gnss::Emergency::ShapeInfo *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  proto::gnss::Emergency::PointUncertainCircle *v9;
  char *v10;
  unint64_t v11;
  char *v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  BOOL v18;
  int v19;
  _BYTE *v20;
  proto::gnss::Emergency::PointUncertainEllipse *v21;
  char *v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  _BYTE *v29;
  proto::gnss::Emergency::PointAltitudeUncertainEllipsoid *v30;
  char *v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  _BYTE *v38;
  proto::gnss::Emergency::EllipsoidArc *v39;
  char *v40;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  int v45;
  int v46;
  _BYTE *v47;
  proto::gnss::Emergency::EllipsoidPoint *v48;
  char *v49;
  int v50;
  int v51;
  int v52;
  unsigned int v53;
  int v54;
  int v55;
  _BYTE *v56;
  proto::gnss::Emergency::PointAltitude *v57;
  char *v58;
  int v59;
  int v60;
  int v61;
  unsigned int v62;
  int v63;
  int v64;
  _BYTE *v65;
  proto::gnss::Emergency::Polygon *v66;
  char *v67;
  int v68;
  int v69;
  int v70;
  unsigned int v71;
  int v72;
  int v73;
  _BYTE *v74;
  unsigned __int8 *v75;
  uint64_t result;
  unsigned int v77;

  v5 = (unsigned int *)((char *)this + 64);
  while (1)
  {
    v6 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v6 < *((_QWORD *)a2 + 2) && (*v6 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      *((_QWORD *)a2 + 1) = v6 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
      goto LABEL_7;
    }
    TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
    *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
    if (!(_DWORD)TagFallback)
      return 1;
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_28;
        *((_DWORD *)this + 18) |= 1u;
        v9 = (proto::gnss::Emergency::PointUncertainCircle *)*((_QWORD *)this + 1);
        if (!v9)
          operator new();
        v77 = 0;
        v10 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v10 >= *((_QWORD *)a2 + 2) || *v10 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v77))return 0;
        }
        else
        {
          v77 = *v10;
          *((_QWORD *)a2 + 1) = v10 + 1;
        }
        v13 = *((_DWORD *)a2 + 14);
        v14 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v13 + 1;
        if (v13 >= v14)
          return 0;
        v15 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v77);
        if (!proto::gnss::Emergency::PointUncertainCircle::MergePartialFromCodedStream(v9, a2, v16)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v15);
        v17 = *((_DWORD *)a2 + 14);
        v18 = __OFSUB__(v17, 1);
        v19 = v17 - 1;
        if (v19 < 0 == v18)
          *((_DWORD *)a2 + 14) = v19;
        v20 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v20 >= *((_QWORD *)a2 + 2) || *v20 != 18)
          continue;
        *((_QWORD *)a2 + 1) = v20 + 1;
        goto LABEL_41;
      case 2u:
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_28;
LABEL_41:
        *((_DWORD *)this + 18) |= 2u;
        v21 = (proto::gnss::Emergency::PointUncertainEllipse *)*((_QWORD *)this + 2);
        if (!v21)
          operator new();
        v77 = 0;
        v22 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v22 >= *((_QWORD *)a2 + 2) || *v22 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v77))return 0;
        }
        else
        {
          v77 = *v22;
          *((_QWORD *)a2 + 1) = v22 + 1;
        }
        v23 = *((_DWORD *)a2 + 14);
        v24 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v23 + 1;
        if (v23 >= v24)
          return 0;
        v25 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v77);
        if (!proto::gnss::Emergency::PointUncertainEllipse::MergePartialFromCodedStream(v21, a2, v26)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v25);
        v27 = *((_DWORD *)a2 + 14);
        v18 = __OFSUB__(v27, 1);
        v28 = v27 - 1;
        if (v28 < 0 == v18)
          *((_DWORD *)a2 + 14) = v28;
        v29 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v29 >= *((_QWORD *)a2 + 2) || *v29 != 26)
          continue;
        *((_QWORD *)a2 + 1) = v29 + 1;
LABEL_55:
        *((_DWORD *)this + 18) |= 4u;
        v30 = (proto::gnss::Emergency::PointAltitudeUncertainEllipsoid *)*((_QWORD *)this + 3);
        if (!v30)
          operator new();
        v77 = 0;
        v31 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v31 >= *((_QWORD *)a2 + 2) || *v31 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v77))return 0;
        }
        else
        {
          v77 = *v31;
          *((_QWORD *)a2 + 1) = v31 + 1;
        }
        v32 = *((_DWORD *)a2 + 14);
        v33 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v32 + 1;
        if (v32 >= v33)
          return 0;
        v34 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v77);
        if (!proto::gnss::Emergency::PointAltitudeUncertainEllipsoid::MergePartialFromCodedStream(v30, a2, v35)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v34);
        v36 = *((_DWORD *)a2 + 14);
        v18 = __OFSUB__(v36, 1);
        v37 = v36 - 1;
        if (v37 < 0 == v18)
          *((_DWORD *)a2 + 14) = v37;
        v38 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v38 >= *((_QWORD *)a2 + 2) || *v38 != 34)
          continue;
        *((_QWORD *)a2 + 1) = v38 + 1;
LABEL_69:
        *((_DWORD *)this + 18) |= 8u;
        v39 = (proto::gnss::Emergency::EllipsoidArc *)*((_QWORD *)this + 4);
        if (!v39)
          operator new();
        v77 = 0;
        v40 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v40 >= *((_QWORD *)a2 + 2) || *v40 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v77))return 0;
        }
        else
        {
          v77 = *v40;
          *((_QWORD *)a2 + 1) = v40 + 1;
        }
        v41 = *((_DWORD *)a2 + 14);
        v42 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v41 + 1;
        if (v41 >= v42)
          return 0;
        v43 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v77);
        if (!proto::gnss::Emergency::EllipsoidArc::MergePartialFromCodedStream(v39, a2, v44)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v43);
        v45 = *((_DWORD *)a2 + 14);
        v18 = __OFSUB__(v45, 1);
        v46 = v45 - 1;
        if (v46 < 0 == v18)
          *((_DWORD *)a2 + 14) = v46;
        v47 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v47 >= *((_QWORD *)a2 + 2) || *v47 != 42)
          continue;
        *((_QWORD *)a2 + 1) = v47 + 1;
LABEL_83:
        *((_DWORD *)this + 18) |= 0x10u;
        v48 = (proto::gnss::Emergency::EllipsoidPoint *)*((_QWORD *)this + 5);
        if (!v48)
          operator new();
        v77 = 0;
        v49 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v49 >= *((_QWORD *)a2 + 2) || *v49 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v77))return 0;
        }
        else
        {
          v77 = *v49;
          *((_QWORD *)a2 + 1) = v49 + 1;
        }
        v50 = *((_DWORD *)a2 + 14);
        v51 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v50 + 1;
        if (v50 >= v51)
          return 0;
        v52 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v77);
        if (!proto::gnss::Emergency::EllipsoidPoint::MergePartialFromCodedStream(v48, a2, v53)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v52);
        v54 = *((_DWORD *)a2 + 14);
        v18 = __OFSUB__(v54, 1);
        v55 = v54 - 1;
        if (v55 < 0 == v18)
          *((_DWORD *)a2 + 14) = v55;
        v56 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v56 >= *((_QWORD *)a2 + 2) || *v56 != 50)
          continue;
        *((_QWORD *)a2 + 1) = v56 + 1;
LABEL_97:
        *((_DWORD *)this + 18) |= 0x20u;
        v57 = (proto::gnss::Emergency::PointAltitude *)*((_QWORD *)this + 6);
        if (!v57)
          operator new();
        v77 = 0;
        v58 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v58 >= *((_QWORD *)a2 + 2) || *v58 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v77))return 0;
        }
        else
        {
          v77 = *v58;
          *((_QWORD *)a2 + 1) = v58 + 1;
        }
        v59 = *((_DWORD *)a2 + 14);
        v60 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v59 + 1;
        if (v59 >= v60)
          return 0;
        v61 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v77);
        if (!proto::gnss::Emergency::PointAltitude::MergePartialFromCodedStream(v57, a2, v62)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v61);
        v63 = *((_DWORD *)a2 + 14);
        v18 = __OFSUB__(v63, 1);
        v64 = v63 - 1;
        if (v64 < 0 == v18)
          *((_DWORD *)a2 + 14) = v64;
        v65 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v65 >= *((_QWORD *)a2 + 2) || *v65 != 58)
          continue;
        *((_QWORD *)a2 + 1) = v65 + 1;
LABEL_111:
        *((_DWORD *)this + 18) |= 0x40u;
        v66 = (proto::gnss::Emergency::Polygon *)*((_QWORD *)this + 7);
        if (!v66)
          operator new();
        v77 = 0;
        v67 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v67 >= *((_QWORD *)a2 + 2) || *v67 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v77))return 0;
        }
        else
        {
          v77 = *v67;
          *((_QWORD *)a2 + 1) = v67 + 1;
        }
        v68 = *((_DWORD *)a2 + 14);
        v69 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v68 + 1;
        if (v68 >= v69)
          return 0;
        v70 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v77);
        if (!proto::gnss::Emergency::Polygon::MergePartialFromCodedStream(v66, a2, v71)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v70);
        v72 = *((_DWORD *)a2 + 14);
        v18 = __OFSUB__(v72, 1);
        v73 = v72 - 1;
        if (v73 < 0 == v18)
          *((_DWORD *)a2 + 14) = v73;
        v74 = (_BYTE *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v74 < v11 && *v74 == 64)
        {
          v12 = v74 + 1;
          *((_QWORD *)a2 + 1) = v12;
LABEL_125:
          if ((unint64_t)v12 >= v11 || *v12 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
            if (!(_DWORD)result)
              return result;
            v75 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
            v11 = *((_QWORD *)a2 + 2);
          }
          else
          {
            *v5 = *v12;
            v75 = (unsigned __int8 *)(v12 + 1);
            *((_QWORD *)a2 + 1) = v75;
          }
          *((_DWORD *)this + 18) |= 0x80u;
          if (v75 == (unsigned __int8 *)v11 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
          {
            *((_DWORD *)a2 + 8) = 0;
            result = 1;
            *((_BYTE *)a2 + 36) = 1;
            return result;
          }
        }
        break;
      case 3u:
        v8 = TagFallback & 7;
        if (v8 == 2)
          goto LABEL_55;
        goto LABEL_28;
      case 4u:
        v8 = TagFallback & 7;
        if (v8 == 2)
          goto LABEL_69;
        goto LABEL_28;
      case 5u:
        v8 = TagFallback & 7;
        if (v8 == 2)
          goto LABEL_83;
        goto LABEL_28;
      case 6u:
        v8 = TagFallback & 7;
        if (v8 == 2)
          goto LABEL_97;
        goto LABEL_28;
      case 7u:
        v8 = TagFallback & 7;
        if (v8 == 2)
          goto LABEL_111;
        goto LABEL_28;
      case 8u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v12 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        goto LABEL_125;
      default:
        v8 = TagFallback & 7;
LABEL_28:
        if (v8 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t proto::gnss::Emergency::ShapeInfo::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = this;
  v6 = *(_DWORD *)(this + 72);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(this + 8);
    if (!v7)
      v7 = *(_QWORD *)(proto::gnss::Emergency::ShapeInfo::default_instance_ + 8);
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    v6 = *(_DWORD *)(v5 + 72);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v8 = *(_QWORD *)(v5 + 16);
  if (!v8)
    v8 = *(_QWORD *)(proto::gnss::Emergency::ShapeInfo::default_instance_ + 16);
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_16:
  v9 = *(_QWORD *)(v5 + 24);
  if (!v9)
    v9 = *(_QWORD *)(proto::gnss::Emergency::ShapeInfo::default_instance_ + 24);
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v9, a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_22;
  }
LABEL_19:
  v10 = *(_QWORD *)(v5 + 32);
  if (!v10)
    v10 = *(_QWORD *)(proto::gnss::Emergency::ShapeInfo::default_instance_ + 32);
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v10, a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_25;
  }
LABEL_22:
  v11 = *(_QWORD *)(v5 + 40);
  if (!v11)
    v11 = *(_QWORD *)(proto::gnss::Emergency::ShapeInfo::default_instance_ + 40);
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v11, a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_28;
  }
LABEL_25:
  v12 = *(_QWORD *)(v5 + 48);
  if (!v12)
    v12 = *(_QWORD *)(proto::gnss::Emergency::ShapeInfo::default_instance_ + 48);
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v12, a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(_DWORD *)(v5 + 64), a2, a4);
  }
LABEL_28:
  v13 = *(_QWORD *)(v5 + 56);
  if (!v13)
    v13 = *(_QWORD *)(proto::gnss::Emergency::ShapeInfo::default_instance_ + 56);
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v13, a2, a4);
  if ((*(_DWORD *)(v5 + 72) & 0x80) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(_DWORD *)(v5 + 64), a2, a4);
  return this;
}

uint64_t proto::gnss::Emergency::ShapeInfo::ByteSize(proto::gnss::Emergency::ShapeInfo *this, unsigned int a2)
{
  int v3;
  uint64_t v4;
  proto::gnss::Emergency::PointUncertainCircle *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  int v8;
  proto::gnss::Emergency::PointUncertainEllipse *v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  int v12;
  proto::gnss::Emergency::PointAltitudeUncertainEllipsoid *v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;
  int v16;
  proto::gnss::Emergency::EllipsoidArc *v17;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v18;
  int v19;
  int v20;
  proto::gnss::Emergency::EllipsoidPoint *v21;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v22;
  int v23;
  int v24;
  proto::gnss::Emergency::PointAltitude *v25;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v26;
  int v27;
  int v28;
  proto::gnss::Emergency::Polygon *v29;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v30;
  int v31;
  int v32;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v33;
  int v34;

  LOBYTE(v3) = *((_BYTE *)this + 72);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_59;
  }
  if ((*((_BYTE *)this + 72) & 1) == 0)
  {
    v4 = 0;
    if ((*((_BYTE *)this + 72) & 2) == 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  v5 = (proto::gnss::Emergency::PointUncertainCircle *)*((_QWORD *)this + 1);
  if (!v5)
    v5 = *(proto::gnss::Emergency::PointUncertainCircle **)(proto::gnss::Emergency::ShapeInfo::default_instance_ + 8);
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::PointUncertainCircle::ByteSize(v5, a2);
  v7 = (int)v6;
  if (v6 >= 0x80)
    v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2);
  else
    v8 = 1;
  v4 = (v7 + v8 + 1);
  v3 = *((_DWORD *)this + 18);
  if ((v3 & 2) != 0)
  {
LABEL_12:
    v9 = (proto::gnss::Emergency::PointUncertainEllipse *)*((_QWORD *)this + 2);
    if (!v9)
      v9 = *(proto::gnss::Emergency::PointUncertainEllipse **)(proto::gnss::Emergency::ShapeInfo::default_instance_ + 16);
    v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::PointUncertainEllipse::ByteSize(v9, a2);
    v11 = (int)v10;
    if (v10 >= 0x80)
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2);
    else
      v12 = 1;
    v4 = (v4 + v11 + v12 + 1);
    v3 = *((_DWORD *)this + 18);
  }
LABEL_18:
  if ((v3 & 4) != 0)
  {
    v13 = (proto::gnss::Emergency::PointAltitudeUncertainEllipsoid *)*((_QWORD *)this + 3);
    if (!v13)
      v13 = *(proto::gnss::Emergency::PointAltitudeUncertainEllipsoid **)(proto::gnss::Emergency::ShapeInfo::default_instance_
                                                                        + 24);
    v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::PointAltitudeUncertainEllipsoid::ByteSize(v13, a2);
    v15 = (int)v14;
    if (v14 >= 0x80)
      v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2);
    else
      v16 = 1;
    v4 = (v4 + v15 + v16 + 1);
    v3 = *((_DWORD *)this + 18);
    if ((v3 & 8) == 0)
    {
LABEL_20:
      if ((v3 & 0x10) == 0)
        goto LABEL_21;
      goto LABEL_37;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_20;
  }
  v17 = (proto::gnss::Emergency::EllipsoidArc *)*((_QWORD *)this + 4);
  if (!v17)
    v17 = *(proto::gnss::Emergency::EllipsoidArc **)(proto::gnss::Emergency::ShapeInfo::default_instance_ + 32);
  v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::EllipsoidArc::ByteSize(v17, a2);
  v19 = (int)v18;
  if (v18 >= 0x80)
    v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18, a2);
  else
    v20 = 1;
  v4 = (v4 + v19 + v20 + 1);
  v3 = *((_DWORD *)this + 18);
  if ((v3 & 0x10) == 0)
  {
LABEL_21:
    if ((v3 & 0x20) == 0)
      goto LABEL_22;
    goto LABEL_43;
  }
LABEL_37:
  v21 = (proto::gnss::Emergency::EllipsoidPoint *)*((_QWORD *)this + 5);
  if (!v21)
    v21 = *(proto::gnss::Emergency::EllipsoidPoint **)(proto::gnss::Emergency::ShapeInfo::default_instance_ + 40);
  v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::EllipsoidPoint::ByteSize(v21, a2);
  v23 = (int)v22;
  if (v22 >= 0x80)
    v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22, a2);
  else
    v24 = 1;
  v4 = (v4 + v23 + v24 + 1);
  v3 = *((_DWORD *)this + 18);
  if ((v3 & 0x20) == 0)
  {
LABEL_22:
    if ((v3 & 0x40) == 0)
      goto LABEL_23;
    goto LABEL_49;
  }
LABEL_43:
  v25 = (proto::gnss::Emergency::PointAltitude *)*((_QWORD *)this + 6);
  if (!v25)
    v25 = *(proto::gnss::Emergency::PointAltitude **)(proto::gnss::Emergency::ShapeInfo::default_instance_ + 48);
  v26 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::PointAltitude::ByteSize(v25, a2);
  v27 = (int)v26;
  if (v26 >= 0x80)
    v28 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v26, a2);
  else
    v28 = 1;
  v4 = (v4 + v27 + v28 + 1);
  v3 = *((_DWORD *)this + 18);
  if ((v3 & 0x40) == 0)
  {
LABEL_23:
    if ((v3 & 0x80) == 0)
      goto LABEL_59;
    goto LABEL_55;
  }
LABEL_49:
  v29 = (proto::gnss::Emergency::Polygon *)*((_QWORD *)this + 7);
  if (!v29)
    v29 = *(proto::gnss::Emergency::Polygon **)(proto::gnss::Emergency::ShapeInfo::default_instance_ + 56);
  v30 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::Polygon::ByteSize(v29, a2);
  v31 = (int)v30;
  if (v30 >= 0x80)
    v32 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v30, a2);
  else
    v32 = 1;
  v4 = (v4 + v31 + v32 + 1);
  if ((*((_DWORD *)this + 18) & 0x80) != 0)
  {
LABEL_55:
    v33 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 16);
    if (v33 >= 0x80)
      v34 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v33, a2) + 1;
    else
      v34 = 2;
    v4 = (v34 + v4);
  }
LABEL_59:
  *((_DWORD *)this + 17) = v4;
  return v4;
}

void proto::gnss::Emergency::ShapeInfo::CheckTypeAndMergeFrom(proto::gnss::Emergency::ShapeInfo *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  sub_10006F854((uint64_t)this, (uint64_t)lpsrc);
}

uint64_t proto::gnss::Emergency::ShapeInfo::IsInitialized(proto::gnss::Emergency::ShapeInfo *this)
{
  return 1;
}

_QWORD *proto::gnss::Emergency::ShapeInfo::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.ShapeInfo");
}

void sub_100070B64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _BYTE v10[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v10, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 15144);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 24);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 16);
      if (v6 >= 9)
        __assert_rtn("set_shape_type", "GnssEmergencyTypes.pb.h", 19156, "::proto::gnss::Emergency::ShapeType_IsValid(value)");
      *(_DWORD *)(a1 + 24) |= 1u;
      *(_DWORD *)(a1 + 16) = v6;
      v5 = *(_DWORD *)(a2 + 24);
    }
    if ((v5 & 2) != 0)
    {
      *(_DWORD *)(a1 + 24) |= 2u;
      v7 = *(_QWORD *)(a1 + 8);
      if (!v7)
        operator new();
      v8 = *(_QWORD *)(a2 + 8);
      if (!v8)
        v8 = *(_QWORD *)(proto::gnss::Emergency::LocEstimate::default_instance_ + 8);
      sub_10006F854(v7, v8);
    }
  }
}

void sub_100070C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void proto::gnss::Emergency::LocEstimate::~LocEstimate(proto::gnss::Emergency::LocEstimate *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1000F5690;
  if ((proto::gnss::Emergency::LocEstimate *)proto::gnss::Emergency::LocEstimate::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  proto::gnss::Emergency::LocEstimate::~LocEstimate(this);
  operator delete();
}

void proto::gnss::Emergency::LocEstimate::New(proto::gnss::Emergency::LocEstimate *this)
{
  operator new();
}

uint64_t proto::gnss::Emergency::LocEstimate::Clear(uint64_t this)
{
  uint64_t v1;
  char v2;

  v1 = this;
  v2 = *(_BYTE *)(this + 24);
  if (v2)
  {
    *(_DWORD *)(this + 16) = 0;
    if ((v2 & 2) != 0)
    {
      this = *(_QWORD *)(this + 8);
      if (this)
        this = proto::gnss::Emergency::ShapeInfo::Clear(this);
    }
  }
  *(_DWORD *)(v1 + 24) = 0;
  return this;
}

uint64_t proto::gnss::Emergency::LocEstimate::MergePartialFromCodedStream(proto::gnss::Emergency::LocEstimate *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  uint64_t result;
  _BYTE *v11;
  proto::gnss::Emergency::ShapeInfo *v12;
  char *v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  int v20;
  unsigned int v21;
  unsigned int v22;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
          *((_QWORD *)a2 + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        if (TagFallback >> 3 != 1)
          break;
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_15;
        v21 = 0;
        v8 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v21);
          if (!(_DWORD)result)
            return result;
          v9 = v21;
        }
        else
        {
          v9 = *v8;
          *((_QWORD *)a2 + 1) = v8 + 1;
        }
        if (v9 <= 8)
        {
          *((_DWORD *)this + 6) |= 1u;
          *((_DWORD *)this + 4) = v9;
        }
        v11 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v11 < *((_QWORD *)a2 + 2) && *v11 == 18)
        {
          *((_QWORD *)a2 + 1) = v11 + 1;
          goto LABEL_25;
        }
      }
      if (TagFallback >> 3 != 2)
      {
        v7 = TagFallback & 7;
        goto LABEL_15;
      }
      v7 = TagFallback & 7;
      if (v7 == 2)
        break;
LABEL_15:
      if (v7 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) == 0)
        return 0;
    }
LABEL_25:
    *((_DWORD *)this + 6) |= 2u;
    v12 = (proto::gnss::Emergency::ShapeInfo *)*((_QWORD *)this + 1);
    if (!v12)
      operator new();
    v22 = 0;
    v13 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v13 >= *((_QWORD *)a2 + 2) || *v13 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v22))
        return 0;
    }
    else
    {
      v22 = *v13;
      *((_QWORD *)a2 + 1) = v13 + 1;
    }
    v14 = *((_DWORD *)a2 + 14);
    v15 = *((_DWORD *)a2 + 15);
    *((_DWORD *)a2 + 14) = v14 + 1;
    if (v14 >= v15)
      return 0;
    v16 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v22);
    if (!proto::gnss::Emergency::ShapeInfo::MergePartialFromCodedStream(v12, a2, v17)
      || !*((_BYTE *)a2 + 36))
    {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v16);
    v18 = *((_DWORD *)a2 + 14);
    v19 = __OFSUB__(v18, 1);
    v20 = v18 - 1;
    if (v20 < 0 == v19)
      *((_DWORD *)a2 + 14) = v20;
    if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
      && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
    {
      *((_DWORD *)a2 + 8) = 0;
      result = 1;
      *((_BYTE *)a2 + 36) = 1;
      return result;
    }
  }
}

uint64_t proto::gnss::Emergency::LocEstimate::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = this;
  v6 = *(_DWORD *)(this + 24);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(this + 16), (int)a2, a4);
    if ((*(_DWORD *)(v5 + 24) & 2) == 0)
      return this;
  }
  else if ((v6 & 2) == 0)
  {
    return this;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if (!v7)
    v7 = *(_QWORD *)(proto::gnss::Emergency::LocEstimate::default_instance_ + 8);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
}

uint64_t proto::gnss::Emergency::LocEstimate::ByteSize(proto::gnss::Emergency::LocEstimate *this, unsigned int a2)
{
  char v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  proto::gnss::Emergency::ShapeInfo *v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  unsigned int v8;
  int v9;
  int v10;

  v3 = *((_BYTE *)this + 24);
  if (v3)
  {
    if ((*((_BYTE *)this + 24) & 1) != 0)
    {
      v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
      if ((v5 & 0x80000000) != 0)
      {
        v4 = 11;
        if ((v3 & 2) == 0)
          goto LABEL_19;
      }
      else if (v5 >= 0x80)
      {
        v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2)
           + 1;
        if ((*((_DWORD *)this + 6) & 2) == 0)
          goto LABEL_19;
      }
      else
      {
        v4 = 2;
        if ((v3 & 2) == 0)
          goto LABEL_19;
      }
    }
    else
    {
      v4 = 0;
      if ((*((_BYTE *)this + 24) & 2) == 0)
        goto LABEL_19;
    }
    v6 = (proto::gnss::Emergency::ShapeInfo *)*((_QWORD *)this + 1);
    if (!v6)
      v6 = *(proto::gnss::Emergency::ShapeInfo **)(proto::gnss::Emergency::LocEstimate::default_instance_ + 8);
    v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::ShapeInfo::ByteSize(v6, a2);
    v9 = (int)v7;
    if (v7 >= 0x80)
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, v8);
    else
      v10 = 1;
    v4 = (v4 + v9 + v10 + 1);
  }
  else
  {
    v4 = 0;
  }
LABEL_19:
  *((_DWORD *)this + 5) = v4;
  return v4;
}

void proto::gnss::Emergency::LocEstimate::CheckTypeAndMergeFrom(proto::gnss::Emergency::LocEstimate *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  sub_100070B64((uint64_t)this, (uint64_t)lpsrc);
}

uint64_t proto::gnss::Emergency::LocEstimate::IsInitialized(proto::gnss::Emergency::LocEstimate *this)
{
  return 1;
}

_QWORD *proto::gnss::Emergency::LocEstimate::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.LocEstimate");
}

void sub_1000711A4(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  char v8;
  _BYTE v9[48];

  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 15346);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 20);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 8);
      a1[5] |= 1u;
      a1[2] = v6;
      v5 = *(_DWORD *)(a2 + 20);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_DWORD *)(a2 + 12);
      a1[5] |= 2u;
      a1[3] = v7;
    }
  }
}

void sub_10007124C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void proto::gnss::Emergency::HorizontalVelocity::~HorizontalVelocity(proto::gnss::Emergency::HorizontalVelocity *this)
{
  *(_QWORD *)this = off_1000F5708;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = off_1000F5708;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

void proto::gnss::Emergency::HorizontalVelocity::New(proto::gnss::Emergency::HorizontalVelocity *this)
{
  operator new();
}

uint64_t proto::gnss::Emergency::HorizontalVelocity::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 20))
    *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t proto::gnss::Emergency::HorizontalVelocity::MergePartialFromCodedStream(proto::gnss::Emergency::HorizontalVelocity *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned int *v5;
  unsigned int *v6;
  char *v7;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v9;
  unint64_t v10;
  char *v11;
  char *v12;
  _BYTE *v13;
  unsigned __int8 *v14;
  uint64_t result;

  v5 = (unsigned int *)((char *)this + 8);
  v6 = (unsigned int *)((char *)this + 12);
  while (1)
  {
    while (1)
    {
      v7 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v7 >= *((_QWORD *)a2 + 2) || *v7 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
        *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
        *((_QWORD *)a2 + 1) = v7 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v9 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_16;
      v12 = (char *)*((_QWORD *)a2 + 1);
      v10 = *((_QWORD *)a2 + 2);
      if ((unint64_t)v12 >= v10 || *v12 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
        if (!(_DWORD)result)
          return result;
        v13 = (_BYTE *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
      }
      else
      {
        *v5 = *v12;
        v13 = v12 + 1;
        *((_QWORD *)a2 + 1) = v13;
      }
      *((_DWORD *)this + 5) |= 1u;
      if ((unint64_t)v13 < v10 && *v13 == 16)
      {
        v11 = v13 + 1;
        *((_QWORD *)a2 + 1) = v11;
LABEL_24:
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!(_DWORD)result)
            return result;
          v14 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v6 = *v11;
          v14 = (unsigned __int8 *)(v11 + 1);
          *((_QWORD *)a2 + 1) = v14;
        }
        *((_DWORD *)this + 5) |= 2u;
        if (v14 == (unsigned __int8 *)v10 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      v9 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v11 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        goto LABEL_24;
      }
    }
    else
    {
      v9 = TagFallback & 7;
    }
LABEL_16:
    if (v9 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t proto::gnss::Emergency::HorizontalVelocity::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v4;
  uint64_t v5;
  int v6;

  v4 = a2;
  v5 = this;
  v6 = *(_DWORD *)(this + 20);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(this + 8), a2, a4);
    v6 = *(_DWORD *)(v5 + 20);
  }
  if ((v6 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), v4, a4);
  return this;
}

uint64_t proto::gnss::Emergency::HorizontalVelocity::ByteSize(proto::gnss::Emergency::HorizontalVelocity *this, unsigned int a2)
{
  char v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;

  v3 = *((_BYTE *)this + 20);
  if (v3)
  {
    if ((*((_BYTE *)this + 20) & 1) != 0)
    {
      v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
      if (v5 >= 0x80)
      {
        v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2)
           + 1;
        if ((*((_DWORD *)this + 5) & 2) == 0)
          goto LABEL_14;
      }
      else
      {
        v4 = 2;
        if ((v3 & 2) == 0)
          goto LABEL_14;
      }
    }
    else
    {
      v4 = 0;
      if ((*((_BYTE *)this + 20) & 2) == 0)
        goto LABEL_14;
    }
    v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
    if (v6 >= 0x80)
      v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    else
      v7 = 2;
    v4 = (v7 + v4);
  }
  else
  {
    v4 = 0;
  }
LABEL_14:
  *((_DWORD *)this + 4) = v4;
  return v4;
}

void proto::gnss::Emergency::HorizontalVelocity::CheckTypeAndMergeFrom(proto::gnss::Emergency::HorizontalVelocity *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  sub_1000711A4(this, (uint64_t)lpsrc);
}

uint64_t proto::gnss::Emergency::HorizontalVelocity::IsInitialized(proto::gnss::Emergency::HorizontalVelocity *this)
{
  return 1;
}

_QWORD *proto::gnss::Emergency::HorizontalVelocity::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.HorizontalVelocity");
}

void sub_1000715F0(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  char v10;
  _BYTE v11[48];

  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 15610);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      v7 = *(_DWORD *)(a2 + 8);
      a1[7] |= 1u;
      a1[2] = v7;
      v5 = *(_DWORD *)(a2 + 28);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          goto LABEL_7;
        goto LABEL_12;
      }
    }
    else if ((*(_BYTE *)(a2 + 28) & 2) == 0)
    {
      goto LABEL_6;
    }
    v8 = *(_DWORD *)(a2 + 12);
    a1[7] |= 2u;
    a1[3] = v8;
    v5 = *(_DWORD *)(a2 + 28);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0)
        return;
      goto LABEL_8;
    }
LABEL_12:
    v9 = *(_DWORD *)(a2 + 16);
    a1[7] |= 4u;
    a1[4] = v9;
    if ((*(_DWORD *)(a2 + 28) & 8) == 0)
      return;
LABEL_8:
    v6 = *(_DWORD *)(a2 + 20);
    a1[7] |= 8u;
    a1[5] = v6;
  }
}

void sub_1000716E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void proto::gnss::Emergency::HorizWithVertVelocity::~HorizWithVertVelocity(proto::gnss::Emergency::HorizWithVertVelocity *this)
{
  *(_QWORD *)this = off_1000F5780;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = off_1000F5780;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

void proto::gnss::Emergency::HorizWithVertVelocity::New(proto::gnss::Emergency::HorizWithVertVelocity *this)
{
  operator new();
}

uint64_t proto::gnss::Emergency::HorizWithVertVelocity::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 28))
  {
    *(_QWORD *)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
  }
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t proto::gnss::Emergency::HorizWithVertVelocity::MergePartialFromCodedStream(proto::gnss::Emergency::HorizWithVertVelocity *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  char *v9;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v11;
  unint64_t v12;
  char *v13;
  _BYTE *v14;
  char *v15;
  char *v16;
  char *v17;
  _BYTE *v18;
  _BYTE *v19;
  unsigned __int8 *v20;
  uint64_t result;

  v5 = (unsigned int *)((char *)this + 8);
  v6 = (unsigned int *)((char *)this + 12);
  v7 = (unsigned int *)((char *)this + 16);
  v8 = (unsigned int *)((char *)this + 20);
  while (2)
  {
    v9 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v9 >= *((_QWORD *)a2 + 2) || *v9 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v9;
      *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      *((_QWORD *)a2 + 1) = v9 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v13 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v13 < v12 && (*v13 & 0x80000000) == 0)
        {
          *v5 = *v13;
          v14 = v13 + 1;
          *((_QWORD *)a2 + 1) = v14;
LABEL_24:
          *((_DWORD *)this + 7) |= 1u;
          if ((unint64_t)v14 < v12 && *v14 == 16)
          {
            v15 = v14 + 1;
            *((_QWORD *)a2 + 1) = v15;
            goto LABEL_27;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
        if ((_DWORD)result)
        {
          v14 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
          goto LABEL_24;
        }
        break;
      case 2u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v15 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
LABEL_27:
        if ((unint64_t)v15 >= v12 || *v15 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!(_DWORD)result)
            return result;
          v18 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v6 = *v15;
          v18 = v15 + 1;
          *((_QWORD *)a2 + 1) = v18;
        }
        *((_DWORD *)this + 7) |= 2u;
        if ((unint64_t)v18 >= v12 || *v18 != 24)
          continue;
        v16 = v18 + 1;
        *((_QWORD *)a2 + 1) = v16;
LABEL_35:
        if ((unint64_t)v16 >= v12 || *v16 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!(_DWORD)result)
            return result;
          v19 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v7 = *v16;
          v19 = v16 + 1;
          *((_QWORD *)a2 + 1) = v19;
        }
        *((_DWORD *)this + 7) |= 4u;
        if ((unint64_t)v19 >= v12 || *v19 != 32)
          continue;
        v17 = v19 + 1;
        *((_QWORD *)a2 + 1) = v17;
LABEL_43:
        if ((unint64_t)v17 >= v12 || *v17 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v8);
          if (!(_DWORD)result)
            return result;
          v20 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v8 = *v17;
          v20 = (unsigned __int8 *)(v17 + 1);
          *((_QWORD *)a2 + 1) = v20;
        }
        *((_DWORD *)this + 7) |= 8u;
        if (v20 != (unsigned __int8 *)v12 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
          continue;
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      case 3u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v16 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        goto LABEL_35;
      case 4u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v17 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        goto LABEL_43;
      default:
        v11 = TagFallback & 7;
LABEL_18:
        if (v11 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

int *proto::gnss::Emergency::HorizWithVertVelocity::SerializeWithCachedSizes(int *this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v4;
  int *v5;
  int v6;

  v4 = a2;
  v5 = this;
  v6 = this[7];
  if ((v6 & 1) != 0)
  {
    this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, this[2], a2, a4);
    v6 = v5[7];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v5[3], v4, a4);
  v6 = v5[7];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      return this;
    return (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v5[5], v4, a4);
  }
LABEL_8:
  this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[4], v4, a4);
  if ((v5[7] & 8) != 0)
    return (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v5[5], v4, a4);
  return this;
}

uint64_t proto::gnss::Emergency::HorizWithVertVelocity::ByteSize(proto::gnss::Emergency::HorizWithVertVelocity *this, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;

  LOBYTE(v3) = *((_BYTE *)this + 28);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_25;
  }
  if ((*((_BYTE *)this + 28) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
    if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *((_DWORD *)this + 7);
      if ((v3 & 2) == 0)
        goto LABEL_14;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_14;
    }
  }
  else
  {
    v4 = 0;
    if ((*((_BYTE *)this + 28) & 2) == 0)
      goto LABEL_14;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
  if (v6 >= 0x80)
  {
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    v3 = *((_DWORD *)this + 7);
  }
  else
  {
    v7 = 2;
  }
  v4 = (v7 + v4);
LABEL_14:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0)
      goto LABEL_25;
    goto LABEL_21;
  }
  v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
  if (v8 >= 0x80)
  {
    v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2) + 1;
    v3 = *((_DWORD *)this + 7);
  }
  else
  {
    v9 = 2;
  }
  v4 = (v9 + v4);
  if ((v3 & 8) != 0)
  {
LABEL_21:
    v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
    if (v10 >= 0x80)
      v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2) + 1;
    else
      v11 = 2;
    v4 = (v11 + v4);
  }
LABEL_25:
  *((_DWORD *)this + 6) = v4;
  return v4;
}

void proto::gnss::Emergency::HorizWithVertVelocity::CheckTypeAndMergeFrom(proto::gnss::Emergency::HorizWithVertVelocity *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  sub_1000715F0(this, (uint64_t)lpsrc);
}

uint64_t proto::gnss::Emergency::HorizWithVertVelocity::IsInitialized(proto::gnss::Emergency::HorizWithVertVelocity *this)
{
  return 1;
}

_QWORD *proto::gnss::Emergency::HorizWithVertVelocity::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.HorizWithVertVelocity");
}

void sub_100071C28(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  char v9;
  _BYTE v10[48];

  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v10, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 15851);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 24);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      v7 = *(_DWORD *)(a2 + 8);
      a1[6] |= 1u;
      a1[2] = v7;
      v5 = *(_DWORD *)(a2 + 24);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          return;
        goto LABEL_7;
      }
    }
    else if ((*(_BYTE *)(a2 + 24) & 2) == 0)
    {
      goto LABEL_6;
    }
    v8 = *(_DWORD *)(a2 + 12);
    a1[6] |= 2u;
    a1[3] = v8;
    if ((*(_DWORD *)(a2 + 24) & 4) == 0)
      return;
LABEL_7:
    v6 = *(_DWORD *)(a2 + 16);
    a1[6] |= 4u;
    a1[4] = v6;
  }
}

void sub_100071CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void proto::gnss::Emergency::HorizWithUncertaintyVelocity::~HorizWithUncertaintyVelocity(proto::gnss::Emergency::HorizWithUncertaintyVelocity *this)
{
  *(_QWORD *)this = off_1000F57F8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = off_1000F57F8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

void proto::gnss::Emergency::HorizWithUncertaintyVelocity::New(proto::gnss::Emergency::HorizWithUncertaintyVelocity *this)
{
  operator new();
}

uint64_t proto::gnss::Emergency::HorizWithUncertaintyVelocity::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 24))
  {
    *(_QWORD *)(this + 8) = 0;
    *(_DWORD *)(this + 16) = 0;
  }
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t proto::gnss::Emergency::HorizWithUncertaintyVelocity::MergePartialFromCodedStream(proto::gnss::Emergency::HorizWithUncertaintyVelocity *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  char *v8;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v10;
  int v11;
  unint64_t v12;
  char *v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  _BYTE *v17;
  unsigned __int8 *v18;
  uint64_t result;

  v5 = (unsigned int *)((char *)this + 8);
  v6 = (unsigned int *)((char *)this + 12);
  v7 = (unsigned int *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v8 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v8;
          *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
          *((_QWORD *)a2 + 1) = v8 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v10 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v14 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v14 >= v12 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v15 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v5 = *v14;
          v15 = v14 + 1;
          *((_QWORD *)a2 + 1) = v15;
        }
        *((_DWORD *)this + 6) |= 1u;
        if ((unint64_t)v15 < v12 && *v15 == 16)
        {
          v16 = v15 + 1;
          *((_QWORD *)a2 + 1) = v16;
          goto LABEL_27;
        }
      }
      if (v10 != 2)
        break;
      v11 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_19;
      v16 = (char *)*((_QWORD *)a2 + 1);
      v12 = *((_QWORD *)a2 + 2);
LABEL_27:
      if ((unint64_t)v16 >= v12 || *v16 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
        if (!(_DWORD)result)
          return result;
        v17 = (_BYTE *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
      }
      else
      {
        *v6 = *v16;
        v17 = v16 + 1;
        *((_QWORD *)a2 + 1) = v17;
      }
      *((_DWORD *)this + 6) |= 2u;
      if ((unint64_t)v17 < v12 && *v17 == 24)
      {
        v13 = v17 + 1;
        *((_QWORD *)a2 + 1) = v13;
LABEL_35:
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!(_DWORD)result)
            return result;
          v18 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v7 = *v13;
          v18 = (unsigned __int8 *)(v13 + 1);
          *((_QWORD *)a2 + 1) = v18;
        }
        *((_DWORD *)this + 6) |= 4u;
        if (v18 == (unsigned __int8 *)v12 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
      }
    }
    if (v10 == 3)
    {
      v11 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v13 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        goto LABEL_35;
      }
    }
    else
    {
      v11 = TagFallback & 7;
    }
LABEL_19:
    if (v11 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

int *proto::gnss::Emergency::HorizWithUncertaintyVelocity::SerializeWithCachedSizes(int *this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v4;
  int *v5;
  int v6;

  v4 = a2;
  v5 = this;
  v6 = this[6];
  if ((v6 & 1) != 0)
  {
    this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, this[2], a2, a4);
    v6 = v5[6];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        return this;
      return (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[4], v4, a4);
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v5[3], v4, a4);
  if ((v5[6] & 4) != 0)
    return (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[4], v4, a4);
  return this;
}

uint64_t proto::gnss::Emergency::HorizWithUncertaintyVelocity::ByteSize(proto::gnss::Emergency::HorizWithUncertaintyVelocity *this, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;

  LOBYTE(v3) = *((_BYTE *)this + 24);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_19;
  }
  if ((*((_BYTE *)this + 24) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
    if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *((_DWORD *)this + 6);
      if ((v3 & 2) == 0)
        goto LABEL_14;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_14;
    }
  }
  else
  {
    v4 = 0;
    if ((*((_BYTE *)this + 24) & 2) == 0)
      goto LABEL_14;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
  if (v6 >= 0x80)
  {
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    v3 = *((_DWORD *)this + 6);
  }
  else
  {
    v7 = 2;
  }
  v4 = (v7 + v4);
LABEL_14:
  if ((v3 & 4) != 0)
  {
    v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
    if (v8 >= 0x80)
      v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2) + 1;
    else
      v9 = 2;
    v4 = (v9 + v4);
  }
LABEL_19:
  *((_DWORD *)this + 5) = v4;
  return v4;
}

void proto::gnss::Emergency::HorizWithUncertaintyVelocity::CheckTypeAndMergeFrom(proto::gnss::Emergency::HorizWithUncertaintyVelocity *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  sub_100071C28(this, (uint64_t)lpsrc);
}

uint64_t proto::gnss::Emergency::HorizWithUncertaintyVelocity::IsInitialized(proto::gnss::Emergency::HorizWithUncertaintyVelocity *this)
{
  return 1;
}

_QWORD *proto::gnss::Emergency::HorizWithUncertaintyVelocity::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.HorizWithUncertaintyVelocity");
}

void sub_100072170(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  char v12;
  _BYTE v13[48];

  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v13, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 16181);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v12, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 36);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) != 0)
    {
      v7 = *(_DWORD *)(a2 + 8);
      a1[9] |= 1u;
      a1[2] = v7;
      v5 = *(_DWORD *)(a2 + 36);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          goto LABEL_7;
        goto LABEL_14;
      }
    }
    else if ((*(_BYTE *)(a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    v8 = *(_DWORD *)(a2 + 12);
    a1[9] |= 2u;
    a1[3] = v8;
    v5 = *(_DWORD *)(a2 + 36);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0)
        goto LABEL_8;
      goto LABEL_15;
    }
LABEL_14:
    v9 = *(_DWORD *)(a2 + 16);
    a1[9] |= 4u;
    a1[4] = v9;
    v5 = *(_DWORD *)(a2 + 36);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_16;
    }
LABEL_15:
    v10 = *(_DWORD *)(a2 + 20);
    a1[9] |= 8u;
    a1[5] = v10;
    v5 = *(_DWORD *)(a2 + 36);
    if ((v5 & 0x10) == 0)
    {
LABEL_9:
      if ((v5 & 0x20) == 0)
        return;
      goto LABEL_10;
    }
LABEL_16:
    v11 = *(_DWORD *)(a2 + 24);
    a1[9] |= 0x10u;
    a1[6] = v11;
    if ((*(_DWORD *)(a2 + 36) & 0x20) == 0)
      return;
LABEL_10:
    v6 = *(_DWORD *)(a2 + 28);
    a1[9] |= 0x20u;
    a1[7] = v6;
  }
}

void sub_1000722A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void proto::gnss::Emergency::HorizWithVertUncertaintyVelocity::~HorizWithVertUncertaintyVelocity(proto::gnss::Emergency::HorizWithVertUncertaintyVelocity *this)
{
  *(_QWORD *)this = off_1000F5870;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = off_1000F5870;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

void proto::gnss::Emergency::HorizWithVertUncertaintyVelocity::New(proto::gnss::Emergency::HorizWithVertUncertaintyVelocity *this)
{
  operator new();
}

uint64_t proto::gnss::Emergency::HorizWithVertUncertaintyVelocity::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 36))
  {
    *(_QWORD *)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
    *(_QWORD *)(this + 24) = 0;
  }
  *(_DWORD *)(this + 36) = 0;
  return this;
}

uint64_t proto::gnss::Emergency::HorizWithVertUncertaintyVelocity::MergePartialFromCodedStream(proto::gnss::Emergency::HorizWithVertUncertaintyVelocity *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  char *v11;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v13;
  unint64_t v14;
  char *v15;
  _BYTE *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  _BYTE *v25;
  unsigned __int8 *v26;
  uint64_t result;

  v5 = (unsigned int *)((char *)this + 8);
  v6 = (unsigned int *)((char *)this + 12);
  v7 = (unsigned int *)((char *)this + 16);
  v8 = (unsigned int *)((char *)this + 20);
  v9 = (unsigned int *)((char *)this + 24);
  v10 = (unsigned int *)((char *)this + 28);
  while (2)
  {
    v11 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v11 >= *((_QWORD *)a2 + 2) || *v11 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v11;
      *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      *((_QWORD *)a2 + 1) = v11 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v15 = (char *)*((_QWORD *)a2 + 1);
        v14 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v15 < v14 && (*v15 & 0x80000000) == 0)
        {
          *v5 = *v15;
          v16 = v15 + 1;
          *((_QWORD *)a2 + 1) = v16;
LABEL_28:
          *((_DWORD *)this + 9) |= 1u;
          if ((unint64_t)v16 < v14 && *v16 == 16)
          {
            v17 = v16 + 1;
            *((_QWORD *)a2 + 1) = v17;
            goto LABEL_31;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
        if ((_DWORD)result)
        {
          v16 = (_BYTE *)*((_QWORD *)a2 + 1);
          v14 = *((_QWORD *)a2 + 2);
          goto LABEL_28;
        }
        break;
      case 2u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v17 = (char *)*((_QWORD *)a2 + 1);
        v14 = *((_QWORD *)a2 + 2);
LABEL_31:
        if ((unint64_t)v17 >= v14 || *v17 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!(_DWORD)result)
            return result;
          v22 = (_BYTE *)*((_QWORD *)a2 + 1);
          v14 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v6 = *v17;
          v22 = v17 + 1;
          *((_QWORD *)a2 + 1) = v22;
        }
        *((_DWORD *)this + 9) |= 2u;
        if ((unint64_t)v22 >= v14 || *v22 != 24)
          continue;
        v18 = v22 + 1;
        *((_QWORD *)a2 + 1) = v18;
LABEL_39:
        if ((unint64_t)v18 >= v14 || *v18 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!(_DWORD)result)
            return result;
          v23 = (_BYTE *)*((_QWORD *)a2 + 1);
          v14 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v7 = *v18;
          v23 = v18 + 1;
          *((_QWORD *)a2 + 1) = v23;
        }
        *((_DWORD *)this + 9) |= 4u;
        if ((unint64_t)v23 >= v14 || *v23 != 32)
          continue;
        v19 = v23 + 1;
        *((_QWORD *)a2 + 1) = v19;
LABEL_47:
        if ((unint64_t)v19 >= v14 || *v19 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v8);
          if (!(_DWORD)result)
            return result;
          v24 = (_BYTE *)*((_QWORD *)a2 + 1);
          v14 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v8 = *v19;
          v24 = v19 + 1;
          *((_QWORD *)a2 + 1) = v24;
        }
        *((_DWORD *)this + 9) |= 8u;
        if ((unint64_t)v24 >= v14 || *v24 != 40)
          continue;
        v20 = v24 + 1;
        *((_QWORD *)a2 + 1) = v20;
LABEL_55:
        if ((unint64_t)v20 >= v14 || *v20 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v9);
          if (!(_DWORD)result)
            return result;
          v25 = (_BYTE *)*((_QWORD *)a2 + 1);
          v14 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v9 = *v20;
          v25 = v20 + 1;
          *((_QWORD *)a2 + 1) = v25;
        }
        *((_DWORD *)this + 9) |= 0x10u;
        if ((unint64_t)v25 >= v14 || *v25 != 48)
          continue;
        v21 = v25 + 1;
        *((_QWORD *)a2 + 1) = v21;
LABEL_63:
        if ((unint64_t)v21 >= v14 || *v21 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v10);
          if (!(_DWORD)result)
            return result;
          v26 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v14 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v10 = *v21;
          v26 = (unsigned __int8 *)(v21 + 1);
          *((_QWORD *)a2 + 1) = v26;
        }
        *((_DWORD *)this + 9) |= 0x20u;
        if (v26 != (unsigned __int8 *)v14 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
          continue;
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      case 3u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v18 = (char *)*((_QWORD *)a2 + 1);
        v14 = *((_QWORD *)a2 + 2);
        goto LABEL_39;
      case 4u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v19 = (char *)*((_QWORD *)a2 + 1);
        v14 = *((_QWORD *)a2 + 2);
        goto LABEL_47;
      case 5u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v20 = (char *)*((_QWORD *)a2 + 1);
        v14 = *((_QWORD *)a2 + 2);
        goto LABEL_55;
      case 6u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v21 = (char *)*((_QWORD *)a2 + 1);
        v14 = *((_QWORD *)a2 + 2);
        goto LABEL_63;
      default:
        v13 = TagFallback & 7;
LABEL_22:
        if (v13 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

int *proto::gnss::Emergency::HorizWithVertUncertaintyVelocity::SerializeWithCachedSizes(int *this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v4;
  int *v5;
  int v6;

  v4 = a2;
  v5 = this;
  v6 = this[9];
  if ((v6 & 1) != 0)
  {
    this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, this[2], a2, a4);
    v6 = v5[9];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v5[3], v4, a4);
  v6 = v5[9];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[4], v4, a4);
  v6 = v5[9];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v5[5], v4, a4);
  v6 = v5[9];
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      return this;
    return (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v5[7], v4, a4);
  }
LABEL_12:
  this = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v5[6], v4, a4);
  if ((v5[9] & 0x20) != 0)
    return (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v5[7], v4, a4);
  return this;
}

uint64_t proto::gnss::Emergency::HorizWithVertUncertaintyVelocity::ByteSize(proto::gnss::Emergency::HorizWithVertUncertaintyVelocity *this, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v12;
  int v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;

  LOBYTE(v3) = *((_BYTE *)this + 36);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_35;
  }
  if ((*((_BYTE *)this + 36) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
    if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *((_DWORD *)this + 9);
      if ((v3 & 2) == 0)
        goto LABEL_14;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_14;
    }
  }
  else
  {
    v4 = 0;
    if ((*((_BYTE *)this + 36) & 2) == 0)
      goto LABEL_14;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
  if (v6 >= 0x80)
  {
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    v3 = *((_DWORD *)this + 9);
  }
  else
  {
    v7 = 2;
  }
  v4 = (v7 + v4);
LABEL_14:
  if ((v3 & 4) != 0)
  {
    v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
    if (v8 >= 0x80)
    {
      v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2) + 1;
      v3 = *((_DWORD *)this + 9);
    }
    else
    {
      v9 = 2;
    }
    v4 = (v9 + v4);
    if ((v3 & 8) == 0)
    {
LABEL_16:
      if ((v3 & 0x10) == 0)
        goto LABEL_17;
      goto LABEL_27;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_16;
  }
  v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
  if (v10 >= 0x80)
  {
    v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2) + 1;
    v3 = *((_DWORD *)this + 9);
  }
  else
  {
    v11 = 2;
  }
  v4 = (v11 + v4);
  if ((v3 & 0x10) == 0)
  {
LABEL_17:
    if ((v3 & 0x20) == 0)
      goto LABEL_35;
    goto LABEL_31;
  }
LABEL_27:
  v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
  if (v12 >= 0x80)
  {
    v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, a2) + 1;
    v3 = *((_DWORD *)this + 9);
  }
  else
  {
    v13 = 2;
  }
  v4 = (v13 + v4);
  if ((v3 & 0x20) != 0)
  {
LABEL_31:
    v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 7);
    if (v14 >= 0x80)
      v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2) + 1;
    else
      v15 = 2;
    v4 = (v15 + v4);
  }
LABEL_35:
  *((_DWORD *)this + 8) = v4;
  return v4;
}

void proto::gnss::Emergency::HorizWithVertUncertaintyVelocity::CheckTypeAndMergeFrom(proto::gnss::Emergency::HorizWithVertUncertaintyVelocity *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  sub_100072170(this, (uint64_t)lpsrc);
}

uint64_t proto::gnss::Emergency::HorizWithVertUncertaintyVelocity::IsInitialized(proto::gnss::Emergency::HorizWithVertUncertaintyVelocity *this)
{
  return 1;
}

_QWORD *proto::gnss::Emergency::HorizWithVertUncertaintyVelocity::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.HorizWithVertUncertaintyVelocity");
}

void sub_100072974(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  char v14;
  _BYTE v15[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v15, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 16493);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v14, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v15);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 44);
  if (!(_BYTE)v5)
    return;
  if ((*(_BYTE *)(a2 + 44) & 1) == 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 2) == 0)
      goto LABEL_6;
LABEL_14:
    *(_DWORD *)(a1 + 44) |= 2u;
    v8 = *(_DWORD **)(a1 + 16);
    if (!v8)
      operator new();
    v9 = *(_QWORD *)(a2 + 16);
    if (!v9)
      v9 = *(_QWORD *)(proto::gnss::Emergency::VelocityInfo::default_instance_ + 16);
    sub_1000715F0(v8, v9);
    v5 = *(_DWORD *)(a2 + 44);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0)
        return;
      goto LABEL_24;
    }
    goto LABEL_19;
  }
  *(_DWORD *)(a1 + 44) |= 1u;
  v6 = *(_DWORD **)(a1 + 8);
  if (!v6)
    operator new();
  v7 = *(_QWORD *)(a2 + 8);
  if (!v7)
    v7 = *(_QWORD *)(proto::gnss::Emergency::VelocityInfo::default_instance_ + 8);
  sub_1000711A4(v6, v7);
  v5 = *(_DWORD *)(a2 + 44);
  if ((v5 & 2) != 0)
    goto LABEL_14;
LABEL_6:
  if ((v5 & 4) == 0)
    goto LABEL_7;
LABEL_19:
  *(_DWORD *)(a1 + 44) |= 4u;
  v10 = *(_DWORD **)(a1 + 24);
  if (!v10)
    operator new();
  v11 = *(_QWORD *)(a2 + 24);
  if (!v11)
    v11 = *(_QWORD *)(proto::gnss::Emergency::VelocityInfo::default_instance_ + 24);
  sub_100071C28(v10, v11);
  if ((*(_DWORD *)(a2 + 44) & 8) != 0)
  {
LABEL_24:
    *(_DWORD *)(a1 + 44) |= 8u;
    v12 = *(_DWORD **)(a1 + 32);
    if (!v12)
      operator new();
    v13 = *(_QWORD *)(a2 + 32);
    if (!v13)
      v13 = *(_QWORD *)(proto::gnss::Emergency::VelocityInfo::default_instance_ + 32);
    sub_100072170(v12, v13);
  }
}

void sub_100072B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100072B98(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((_QWORD *)proto::gnss::Emergency::VelocityInfo::default_instance_ != result)
  {
    v1 = result;
    v2 = result[1];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = v1[2];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = v1[3];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    result = (_QWORD *)v1[4];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void proto::gnss::Emergency::VelocityInfo::~VelocityInfo(proto::gnss::Emergency::VelocityInfo *this)
{
  *(_QWORD *)this = off_1000F58E8;
  sub_100072B98(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = off_1000F58E8;
  sub_100072B98(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete();
}

void proto::gnss::Emergency::VelocityInfo::New(proto::gnss::Emergency::VelocityInfo *this)
{
  operator new();
}

uint64_t proto::gnss::Emergency::VelocityInfo::Clear(uint64_t this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  LOBYTE(v1) = *(_BYTE *)(this + 44);
  if ((_BYTE)v1)
  {
    if ((*(_BYTE *)(this + 44) & 1) != 0)
    {
      v2 = *(_QWORD *)(this + 8);
      if (v2)
      {
        if (*(_BYTE *)(v2 + 20))
          *(_QWORD *)(v2 + 8) = 0;
        *(_DWORD *)(v2 + 20) = 0;
        v1 = *(_DWORD *)(this + 44);
      }
    }
    if ((v1 & 2) != 0)
    {
      v3 = *(_QWORD *)(this + 16);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 28))
        {
          *(_QWORD *)(v3 + 8) = 0;
          *(_QWORD *)(v3 + 16) = 0;
        }
        *(_DWORD *)(v3 + 28) = 0;
        v1 = *(_DWORD *)(this + 44);
      }
    }
    if ((v1 & 4) != 0)
    {
      v4 = *(_QWORD *)(this + 24);
      if (v4)
      {
        if (*(_BYTE *)(v4 + 24))
        {
          *(_QWORD *)(v4 + 8) = 0;
          *(_DWORD *)(v4 + 16) = 0;
        }
        *(_DWORD *)(v4 + 24) = 0;
        v1 = *(_DWORD *)(this + 44);
      }
    }
    if ((v1 & 8) != 0)
    {
      v5 = *(_QWORD *)(this + 32);
      if (v5)
      {
        if (*(_BYTE *)(v5 + 36))
        {
          *(_QWORD *)(v5 + 8) = 0;
          *(_QWORD *)(v5 + 16) = 0;
          *(_QWORD *)(v5 + 24) = 0;
        }
        *(_DWORD *)(v5 + 36) = 0;
      }
    }
  }
  *(_DWORD *)(this + 44) = 0;
  return this;
}

uint64_t proto::gnss::Emergency::VelocityInfo::MergePartialFromCodedStream(proto::gnss::Emergency::VelocityInfo *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  proto::gnss::Emergency::HorizontalVelocity *v8;
  char *v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  BOOL v15;
  int v16;
  _BYTE *v17;
  proto::gnss::Emergency::HorizWithVertVelocity *v18;
  char *v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  _BYTE *v26;
  proto::gnss::Emergency::HorizWithUncertaintyVelocity *v27;
  char *v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  _BYTE *v35;
  proto::gnss::Emergency::HorizWithVertUncertaintyVelocity *v36;
  char *v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  int v42;
  int v43;
  uint64_t result;
  unsigned int v45;

  while (1)
  {
    v5 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v5 < *((_QWORD *)a2 + 2) && (*v5 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
      *((_QWORD *)a2 + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
      goto LABEL_6;
    }
    TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
    *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
    if (!(_DWORD)TagFallback)
      return 1;
LABEL_6:
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_19;
        *((_DWORD *)this + 11) |= 1u;
        v8 = (proto::gnss::Emergency::HorizontalVelocity *)*((_QWORD *)this + 1);
        if (!v8)
          operator new();
        v45 = 0;
        v9 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v9 >= *((_QWORD *)a2 + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v45))return 0;
        }
        else
        {
          v45 = *v9;
          *((_QWORD *)a2 + 1) = v9 + 1;
        }
        v10 = *((_DWORD *)a2 + 14);
        v11 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v10 + 1;
        if (v10 >= v11)
          return 0;
        v12 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v45);
        if (!proto::gnss::Emergency::HorizontalVelocity::MergePartialFromCodedStream(v8, a2, v13)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v12);
        v14 = *((_DWORD *)a2 + 14);
        v15 = __OFSUB__(v14, 1);
        v16 = v14 - 1;
        if (v16 < 0 == v15)
          *((_DWORD *)a2 + 14) = v16;
        v17 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v17 >= *((_QWORD *)a2 + 2) || *v17 != 18)
          continue;
        *((_QWORD *)a2 + 1) = v17 + 1;
        goto LABEL_31;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_19;
LABEL_31:
        *((_DWORD *)this + 11) |= 2u;
        v18 = (proto::gnss::Emergency::HorizWithVertVelocity *)*((_QWORD *)this + 2);
        if (!v18)
          operator new();
        v45 = 0;
        v19 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v19 >= *((_QWORD *)a2 + 2) || *v19 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v45))return 0;
        }
        else
        {
          v45 = *v19;
          *((_QWORD *)a2 + 1) = v19 + 1;
        }
        v20 = *((_DWORD *)a2 + 14);
        v21 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v20 + 1;
        if (v20 >= v21)
          return 0;
        v22 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v45);
        if (!proto::gnss::Emergency::HorizWithVertVelocity::MergePartialFromCodedStream(v18, a2, v23)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v22);
        v24 = *((_DWORD *)a2 + 14);
        v15 = __OFSUB__(v24, 1);
        v25 = v24 - 1;
        if (v25 < 0 == v15)
          *((_DWORD *)a2 + 14) = v25;
        v26 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v26 >= *((_QWORD *)a2 + 2) || *v26 != 26)
          continue;
        *((_QWORD *)a2 + 1) = v26 + 1;
LABEL_45:
        *((_DWORD *)this + 11) |= 4u;
        v27 = (proto::gnss::Emergency::HorizWithUncertaintyVelocity *)*((_QWORD *)this + 3);
        if (!v27)
          operator new();
        v45 = 0;
        v28 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v28 >= *((_QWORD *)a2 + 2) || *v28 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v45))return 0;
        }
        else
        {
          v45 = *v28;
          *((_QWORD *)a2 + 1) = v28 + 1;
        }
        v29 = *((_DWORD *)a2 + 14);
        v30 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v29 + 1;
        if (v29 >= v30)
          return 0;
        v31 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v45);
        if (!proto::gnss::Emergency::HorizWithUncertaintyVelocity::MergePartialFromCodedStream(v27, a2, v32)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v31);
        v33 = *((_DWORD *)a2 + 14);
        v15 = __OFSUB__(v33, 1);
        v34 = v33 - 1;
        if (v34 < 0 == v15)
          *((_DWORD *)a2 + 14) = v34;
        v35 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v35 >= *((_QWORD *)a2 + 2) || *v35 != 34)
          continue;
        *((_QWORD *)a2 + 1) = v35 + 1;
LABEL_59:
        *((_DWORD *)this + 11) |= 8u;
        v36 = (proto::gnss::Emergency::HorizWithVertUncertaintyVelocity *)*((_QWORD *)this + 4);
        if (!v36)
          operator new();
        v45 = 0;
        v37 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v37 >= *((_QWORD *)a2 + 2) || *v37 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v45))return 0;
        }
        else
        {
          v45 = *v37;
          *((_QWORD *)a2 + 1) = v37 + 1;
        }
        v38 = *((_DWORD *)a2 + 14);
        v39 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v38 + 1;
        if (v38 >= v39)
          return 0;
        v40 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v45);
        if (!proto::gnss::Emergency::HorizWithVertUncertaintyVelocity::MergePartialFromCodedStream(v36, a2, v41)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v40);
        v42 = *((_DWORD *)a2 + 14);
        v15 = __OFSUB__(v42, 1);
        v43 = v42 - 1;
        if (v43 < 0 == v15)
          *((_DWORD *)a2 + 14) = v43;
        if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
          && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
        break;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_45;
        goto LABEL_19;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_19;
        goto LABEL_59;
      default:
        v7 = TagFallback & 7;
LABEL_19:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t proto::gnss::Emergency::VelocityInfo::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = this;
  v6 = *(_DWORD *)(this + 44);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(this + 8);
    if (!v7)
      v7 = *(_QWORD *)(proto::gnss::Emergency::VelocityInfo::default_instance_ + 8);
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    v6 = *(_DWORD *)(v5 + 44);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v8 = *(_QWORD *)(v5 + 16);
  if (!v8)
    v8 = *(_QWORD *)(proto::gnss::Emergency::VelocityInfo::default_instance_ + 16);
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      return this;
    goto LABEL_15;
  }
LABEL_12:
  v9 = *(_QWORD *)(v5 + 24);
  if (!v9)
    v9 = *(_QWORD *)(proto::gnss::Emergency::VelocityInfo::default_instance_ + 24);
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v9, a2, a4);
  if ((*(_DWORD *)(v5 + 44) & 8) != 0)
  {
LABEL_15:
    v10 = *(_QWORD *)(v5 + 32);
    if (!v10)
      v10 = *(_QWORD *)(proto::gnss::Emergency::VelocityInfo::default_instance_ + 32);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v10, a2, a4);
  }
  return this;
}

uint64_t proto::gnss::Emergency::VelocityInfo::ByteSize(proto::gnss::Emergency::VelocityInfo *this, unsigned int a2)
{
  int v3;
  uint64_t v4;
  proto::gnss::Emergency::HorizontalVelocity *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  int v8;
  proto::gnss::Emergency::HorizWithVertVelocity *v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  int v12;
  proto::gnss::Emergency::HorizWithUncertaintyVelocity *v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;
  int v16;
  proto::gnss::Emergency::HorizWithVertUncertaintyVelocity *v17;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v18;
  unsigned int v19;
  int v20;
  int v21;

  LOBYTE(v3) = *((_BYTE *)this + 44);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_33;
  }
  if ((*((_BYTE *)this + 44) & 1) == 0)
  {
    v4 = 0;
    if ((*((_BYTE *)this + 44) & 2) == 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  v5 = (proto::gnss::Emergency::HorizontalVelocity *)*((_QWORD *)this + 1);
  if (!v5)
    v5 = *(proto::gnss::Emergency::HorizontalVelocity **)(proto::gnss::Emergency::VelocityInfo::default_instance_ + 8);
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::HorizontalVelocity::ByteSize(v5, a2);
  v7 = (int)v6;
  if (v6 >= 0x80)
    v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2);
  else
    v8 = 1;
  v4 = (v7 + v8 + 1);
  v3 = *((_DWORD *)this + 11);
  if ((v3 & 2) != 0)
  {
LABEL_12:
    v9 = (proto::gnss::Emergency::HorizWithVertVelocity *)*((_QWORD *)this + 2);
    if (!v9)
      v9 = *(proto::gnss::Emergency::HorizWithVertVelocity **)(proto::gnss::Emergency::VelocityInfo::default_instance_
                                                             + 16);
    v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::HorizWithVertVelocity::ByteSize(v9, a2);
    v11 = (int)v10;
    if (v10 >= 0x80)
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2);
    else
      v12 = 1;
    v4 = (v4 + v11 + v12 + 1);
    v3 = *((_DWORD *)this + 11);
  }
LABEL_18:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0)
      goto LABEL_33;
    goto LABEL_27;
  }
  v13 = (proto::gnss::Emergency::HorizWithUncertaintyVelocity *)*((_QWORD *)this + 3);
  if (!v13)
    v13 = *(proto::gnss::Emergency::HorizWithUncertaintyVelocity **)(proto::gnss::Emergency::VelocityInfo::default_instance_
                                                                   + 24);
  v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::HorizWithUncertaintyVelocity::ByteSize(v13, a2);
  v15 = (int)v14;
  if (v14 >= 0x80)
    v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2);
  else
    v16 = 1;
  v4 = (v4 + v15 + v16 + 1);
  if ((*((_DWORD *)this + 11) & 8) != 0)
  {
LABEL_27:
    v17 = (proto::gnss::Emergency::HorizWithVertUncertaintyVelocity *)*((_QWORD *)this + 4);
    if (!v17)
      v17 = *(proto::gnss::Emergency::HorizWithVertUncertaintyVelocity **)(proto::gnss::Emergency::VelocityInfo::default_instance_
                                                                         + 32);
    v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::HorizWithVertUncertaintyVelocity::ByteSize(v17, a2);
    v20 = (int)v18;
    if (v18 >= 0x80)
      v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18, v19);
    else
      v21 = 1;
    v4 = (v4 + v20 + v21 + 1);
  }
LABEL_33:
  *((_DWORD *)this + 10) = v4;
  return v4;
}

void proto::gnss::Emergency::VelocityInfo::CheckTypeAndMergeFrom(proto::gnss::Emergency::VelocityInfo *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  sub_100072974((uint64_t)this, (uint64_t)lpsrc);
}

uint64_t proto::gnss::Emergency::VelocityInfo::IsInitialized(proto::gnss::Emergency::VelocityInfo *this)
{
  return 1;
}

_QWORD *proto::gnss::Emergency::VelocityInfo::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.VelocityInfo");
}

void sub_100073538(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _BYTE v10[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v10, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 16714);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 24);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 16);
      if (v6 >= 6)
        __assert_rtn("set_velocity_type", "GnssEmergencyTypes.pb.h", 19743, "::proto::gnss::Emergency::VelocityType_IsValid(value)");
      *(_DWORD *)(a1 + 24) |= 1u;
      *(_DWORD *)(a1 + 16) = v6;
      v5 = *(_DWORD *)(a2 + 24);
    }
    if ((v5 & 2) != 0)
    {
      *(_DWORD *)(a1 + 24) |= 2u;
      v7 = *(_QWORD *)(a1 + 8);
      if (!v7)
        operator new();
      v8 = *(_QWORD *)(a2 + 8);
      if (!v8)
        v8 = *(_QWORD *)(proto::gnss::Emergency::VelocityEstimate::default_instance_ + 8);
      sub_100072974(v7, v8);
    }
  }
}

void sub_100073658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void proto::gnss::Emergency::VelocityEstimate::~VelocityEstimate(proto::gnss::Emergency::VelocityEstimate *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1000F5960;
  if ((proto::gnss::Emergency::VelocityEstimate *)proto::gnss::Emergency::VelocityEstimate::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  proto::gnss::Emergency::VelocityEstimate::~VelocityEstimate(this);
  operator delete();
}

void proto::gnss::Emergency::VelocityEstimate::New(proto::gnss::Emergency::VelocityEstimate *this)
{
  operator new();
}

uint64_t proto::gnss::Emergency::VelocityEstimate::Clear(uint64_t this)
{
  uint64_t v1;
  char v2;

  v1 = this;
  v2 = *(_BYTE *)(this + 24);
  if (v2)
  {
    *(_DWORD *)(this + 16) = 0;
    if ((v2 & 2) != 0)
    {
      this = *(_QWORD *)(this + 8);
      if (this)
        this = proto::gnss::Emergency::VelocityInfo::Clear(this);
    }
  }
  *(_DWORD *)(v1 + 24) = 0;
  return this;
}

uint64_t proto::gnss::Emergency::VelocityEstimate::MergePartialFromCodedStream(proto::gnss::Emergency::VelocityEstimate *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  uint64_t result;
  _BYTE *v11;
  proto::gnss::Emergency::VelocityInfo *v12;
  char *v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  int v20;
  unsigned int v21;
  unsigned int v22;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)a2 + 8) = (_DWORD)TagFallback;
          *((_QWORD *)a2 + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        if (TagFallback >> 3 != 1)
          break;
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_15;
        v21 = 0;
        v8 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v21);
          if (!(_DWORD)result)
            return result;
          v9 = v21;
        }
        else
        {
          v9 = *v8;
          *((_QWORD *)a2 + 1) = v8 + 1;
        }
        if (v9 <= 5)
        {
          *((_DWORD *)this + 6) |= 1u;
          *((_DWORD *)this + 4) = v9;
        }
        v11 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v11 < *((_QWORD *)a2 + 2) && *v11 == 18)
        {
          *((_QWORD *)a2 + 1) = v11 + 1;
          goto LABEL_25;
        }
      }
      if (TagFallback >> 3 != 2)
      {
        v7 = TagFallback & 7;
        goto LABEL_15;
      }
      v7 = TagFallback & 7;
      if (v7 == 2)
        break;
LABEL_15:
      if (v7 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, TagFallback, a3) & 1) == 0)
        return 0;
    }
LABEL_25:
    *((_DWORD *)this + 6) |= 2u;
    v12 = (proto::gnss::Emergency::VelocityInfo *)*((_QWORD *)this + 1);
    if (!v12)
      operator new();
    v22 = 0;
    v13 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v13 >= *((_QWORD *)a2 + 2) || *v13 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v22))
        return 0;
    }
    else
    {
      v22 = *v13;
      *((_QWORD *)a2 + 1) = v13 + 1;
    }
    v14 = *((_DWORD *)a2 + 14);
    v15 = *((_DWORD *)a2 + 15);
    *((_DWORD *)a2 + 14) = v14 + 1;
    if (v14 >= v15)
      return 0;
    v16 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2, v22);
    if (!proto::gnss::Emergency::VelocityInfo::MergePartialFromCodedStream(v12, a2, v17)
      || !*((_BYTE *)a2 + 36))
    {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2, v16);
    v18 = *((_DWORD *)a2 + 14);
    v19 = __OFSUB__(v18, 1);
    v20 = v18 - 1;
    if (v20 < 0 == v19)
      *((_DWORD *)a2 + 14) = v20;
    if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
      && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
    {
      *((_DWORD *)a2 + 8) = 0;
      result = 1;
      *((_BYTE *)a2 + 36) = 1;
      return result;
    }
  }
}

uint64_t proto::gnss::Emergency::VelocityEstimate::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = this;
  v6 = *(_DWORD *)(this + 24);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(this + 16), (int)a2, a4);
    if ((*(_DWORD *)(v5 + 24) & 2) == 0)
      return this;
  }
  else if ((v6 & 2) == 0)
  {
    return this;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if (!v7)
    v7 = *(_QWORD *)(proto::gnss::Emergency::VelocityEstimate::default_instance_ + 8);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
}

uint64_t proto::gnss::Emergency::VelocityEstimate::ByteSize(proto::gnss::Emergency::VelocityEstimate *this, unsigned int a2)
{
  char v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  proto::gnss::Emergency::VelocityInfo *v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  unsigned int v8;
  int v9;
  int v10;

  v3 = *((_BYTE *)this + 24);
  if (v3)
  {
    if ((*((_BYTE *)this + 24) & 1) != 0)
    {
      v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
      if ((v5 & 0x80000000) != 0)
      {
        v4 = 11;
        if ((v3 & 2) == 0)
          goto LABEL_19;
      }
      else if (v5 >= 0x80)
      {
        v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2)
           + 1;
        if ((*((_DWORD *)this + 6) & 2) == 0)
          goto LABEL_19;
      }
      else
      {
        v4 = 2;
        if ((v3 & 2) == 0)
          goto LABEL_19;
      }
    }
    else
    {
      v4 = 0;
      if ((*((_BYTE *)this + 24) & 2) == 0)
        goto LABEL_19;
    }
    v6 = (proto::gnss::Emergency::VelocityInfo *)*((_QWORD *)this + 1);
    if (!v6)
      v6 = *(proto::gnss::Emergency::VelocityInfo **)(proto::gnss::Emergency::VelocityEstimate::default_instance_ + 8);
    v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)proto::gnss::Emergency::VelocityInfo::ByteSize(v6, a2);
    v9 = (int)v7;
    if (v7 >= 0x80)
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, v8);
    else
      v10 = 1;
    v4 = (v4 + v9 + v10 + 1);
  }
  else
  {
    v4 = 0;
  }
LABEL_19:
  *((_DWORD *)this + 5) = v4;
  return v4;
}

void proto::gnss::Emergency::VelocityEstimate::CheckTypeAndMergeFrom(proto::gnss::Emergency::VelocityEstimate *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  sub_100073538((uint64_t)this, (uint64_t)lpsrc);
}

uint64_t proto::gnss::Emergency::VelocityEstimate::IsInitialized(proto::gnss::Emergency::VelocityEstimate *this)
{
  return 1;
}

_QWORD *proto::gnss::Emergency::VelocityEstimate::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_100025B58(a1, "proto.gnss.Emergency.VelocityEstimate");
}

void proto::gnss::Emergency::PositionReport::MergeFrom(proto::gnss::Emergency::PositionReport *this, const proto::gnss::Emergency::PositionReport *a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _BYTE v20[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v20, 3, "Sources/Protobuf/Generated/GnssEmergencyTypes.pb.cc", 17145);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v20, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v19, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v20);
  }
  LOBYTE(v5) = *((_BYTE *)a2 + 64);
  if (!(_BYTE)v5)
    return;
  if ((*((_BYTE *)a2 + 64) & 1) != 0)
  {
    v6 = *((_DWORD *)a2 + 2);
    if (v6 >= 9)
      __assert_rtn("set_result", "GnssEmergencyTypes.pb.h", 19812, "::proto::gnss::Emergency::ErrorCodes_IsValid(value)");
    *((_DWORD *)this + 16) |= 1u;
    *((_DWORD *)this + 2) = v6;
    v5 = *((_DWORD *)a2 + 16);
  }
  if ((v5 & 2) != 0)
  {
    v8 = *((_DWORD *)a2 + 3);
    *((_DWORD *)this + 16) |= 2u;
    *((_DWORD *)this + 3) = v8;
    v5 = *((_DWORD *)a2 + 16);
    if ((v5 & 4) == 0)
    {
LABEL_9:
      if ((v5 & 8) == 0)
        goto LABEL_10;
      goto LABEL_22;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_9;
  }
  *((_DWORD *)this + 16) |= 4u;
  v9 = (_DWORD *)*((_QWORD *)this + 2);
  if (!v9)
    operator new();
  v10 = *((_QWORD *)a2 + 2);
  if (!v10)
    v10 = *(_QWORD *)(proto::gnss::Emergency::PositionReport::default_instance_ + 16);
  sub_10006412C(v9, v10);
  v5 = *((_DWORD *)a2 + 16);
  if ((v5 & 8) == 0)
  {
LABEL_10:
    if ((v5 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_22:
  *((_DWORD *)this + 16) |= 8u;
  v11 = *((_QWORD *)this + 3);
  if (!v11)
    operator new();
  v12 = *((_QWORD *)a2 + 3);
  if (!v12)
    v12 = *(_QWORD *)(proto::gnss::Emergency::PositionReport::default_instance_ + 24);
  sub_100067E58(v11, v12);
  v5 = *((_DWORD *)a2 + 16);
  if ((v5 & 0x10) == 0)
  {
LABEL_11:
    if ((v5 & 0x20) == 0)
      goto LABEL_12;
LABEL_32:
    *((_DWORD *)this + 16) |= 0x20u;
    v15 = *((_QWORD *)this + 5);
    if (!v15)
      operator new();
    v16 = *((_QWORD *)a2 + 5);
    if (!v16)
      v16 = *(_QWORD *)(proto::gnss::Emergency::PositionReport::default_instance_ + 40);
    sub_100070B64(v15, v16);
    v5 = *((_DWORD *)a2 + 16);
    if ((v5 & 0x40) == 0)
    {
LABEL_13:
      if ((v5 & 0x80) == 0)
        return;
      goto LABEL_14;
    }
    goto LABEL_37;
  }
LABEL_27:
  *((_DWORD *)this + 16) |= 0x10u;
  v13 = (_DWORD *)*((_QWORD *)this + 4);
  if (!v13)
    operator new();
  v14 = *((_QWORD *)a2 + 4);
  if (!v14)
    v14 = *(_QWORD *)(proto::gnss::Emergency::PositionReport::default_instance_ + 32);
  sub_10006BC70(v13, v14);
  v5 = *((_DWORD *)a2 + 16);
  if ((v5 & 0x20) != 0)
    goto LABEL_32;
LABEL_12:
  if ((v5 & 0x40) == 0)
    goto LABEL_13;
LABEL_37:
  *((_DWORD *)this + 16) |= 0x40u;
  v17 = *((_QWORD *)this + 6);
  if (!v17)
    operator new();
  v18 = *((_QWORD *)a2 + 6);
  if (!v18)
    v18 = *(_QWORD *)(proto::gnss::Emergency::PositionReport::default_instance_ + 48);
  sub_100073538(v17, v18);
  if ((*((_DWORD *)a2 + 16) & 0x80) != 0)
  {
LABEL_14:
    v7 = *((_DWORD *)a2 + 14);
    *((_DWORD *)this + 16) |= 0x80u;
    *((_DWORD *)this + 14) = v7;
  }
}

