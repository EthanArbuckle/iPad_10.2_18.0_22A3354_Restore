uint64_t sub_100101D58(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036E860, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch, (uint64_t)&unk_1002D6380);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100101D98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036E860, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch, (uint64_t)&unk_1002D6380);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_100101DE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100384170);
  sub_10000E6A4(v0, (uint64_t)qword_100384170);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40D0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 0;
  *(_QWORD *)v9 = "BranchType_PROTOBUF_DEFAULT";
  *(_QWORD *)(v9 + 8) = 27;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 1;
  *(_QWORD *)v13 = "BranchType_UNKNOWN";
  *(_QWORD *)(v13 + 8) = 18;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 2;
  *(_QWORD *)v15 = "BranchType_LEAFY";
  *((_QWORD *)v15 + 1) = 16;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 3;
  *(_QWORD *)v17 = "BranchType_NON_LEAFY";
  *((_QWORD *)v17 + 1) = 20;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100101FA4()
{
  return sub_100008BD0(&qword_100394580, (uint64_t)qword_100384170, (uint64_t)sub_100101DE8);
}

uint64_t sub_100101FC0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394580, (uint64_t)qword_100384170, (uint64_t)sub_100101DE8, a1);
}

uint64_t sub_100101FDC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394580, (uint64_t)qword_100384170, (uint64_t)sub_100101DE8, a1);
}

void *sub_100101FF8()
{
  return &unk_1003535C8;
}

unint64_t sub_100102004()
{
  return 0xD000000000000040;
}

uint64_t sub_100102020()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100384188);
  sub_10000E6A4(v0, (uint64_t)qword_100384188);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3100;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "north_latitude_deg";
  *(_QWORD *)(v9 + 8) = 18;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "west_longitude_deg";
  *(_QWORD *)(v13 + 8) = 18;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "south_latitude_deg";
  *((_QWORD *)v15 + 1) = 18;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "east_longitude_deg";
  *((_QWORD *)v17 + 1) = 18;
  v17[16] = 2;
  v12();
  v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + 4 * v4) = 5;
  *(_QWORD *)v18 = "vertex";
  *(_QWORD *)(v18 + 8) = 6;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100102228()
{
  return sub_100008BD0(&qword_100394588, (uint64_t)qword_100384188, (uint64_t)sub_100102020);
}

uint64_t sub_100102244@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394588, (uint64_t)qword_100384188, (uint64_t)sub_100102020, a1);
}

uint64_t sub_100102260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0)
                      + 24);
          goto LABEL_5;
        case 2:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0)
                      + 28);
          goto LABEL_5;
        case 3:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0)
                      + 32);
          goto LABEL_5;
        case 4:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0)
                      + 36);
LABEL_5:
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + v9, a2, a3);
          break;
        case 5:
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
          v11 = sub_10000FD38(&qword_10036E820, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, (uint64_t)&unk_1002D5DE0);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v3, v10, v11, a2, a3);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_1001023B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t result;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  v9 = (int *)result;
  v10 = (uint64_t)v3 + *(int *)(result + 24);
  if ((*(_BYTE *)(v10 + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(1, a2, a3, *(double *)v10);
  if (!v4)
  {
    v11 = (uint64_t)v3 + v9[7];
    if ((*(_BYTE *)(v11 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2, a2, a3, *(double *)v11);
    v12 = (uint64_t)v3 + v9[8];
    if ((*(_BYTE *)(v12 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(3, a2, a3, *(double *)v12);
    v13 = (uint64_t)v3 + v9[9];
    if ((*(_BYTE *)(v13 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(4, a2, a3, *(double *)v13);
    v14 = *v3;
    if (*(_QWORD *)(*v3 + 16))
    {
      v15 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
      v16 = sub_10000FD38(&qword_10036E820, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, (uint64_t)&unk_1002D5DE0);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v14, 5, v15, v16, a2, a3);
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_100102568()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, &qword_10036E858, (uint64_t)&unk_1002D6610);
}

uint64_t sub_100102584@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;

  *a2 = &_swiftEmptyArrayStorage;
  result = UnknownStorage.init()();
  v5 = a1[7];
  v6 = (char *)a2 + a1[6];
  *(_QWORD *)v6 = 0;
  v6[8] = 1;
  v7 = (char *)a2 + v5;
  *(_QWORD *)v7 = 0;
  v7[8] = 1;
  v8 = a1[9];
  v9 = (char *)a2 + a1[8];
  *(_QWORD *)v9 = 0;
  v9[8] = 1;
  v10 = (char *)a2 + v8;
  *(_QWORD *)v10 = 0;
  v10[8] = 1;
  return result;
}

uint64_t sub_1001025F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100102260(a1, a2, a3);
}

uint64_t sub_10010260C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001023B4(a1, a2, a3);
}

uint64_t sub_100102620(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100374EF0, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, (uint64_t)&unk_1002D6588);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100102670@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394588, (uint64_t)qword_100384188, (uint64_t)sub_100102020, a1);
}

uint64_t sub_10010268C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F888, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, (uint64_t)&unk_1002D6510);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1001026CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F888, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, (uint64_t)&unk_1002D6510);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100102720()
{
  return &unk_1003535D8;
}

unint64_t sub_10010272C()
{
  return 0xD000000000000035;
}

uint64_t sub_100102748()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003841A0);
  sub_10000E6A4(v0, (uint64_t)qword_1003841A0);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 - v4 + 8 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3140;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "bounding_box";
  *(_QWORD *)(v9 + 8) = 12;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "branches";
  *(_QWORD *)(v13 + 8) = 8;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "tree_id";
  *((_QWORD *)v15 + 1) = 7;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "tree_type";
  *((_QWORD *)v17 + 1) = 9;
  v17[16] = 2;
  v12();
  v18 = (_QWORD *)(v8 + 4 * v4);
  v19 = (char *)v18 + *(int *)(v2 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "reliability_score_DEPRECATED";
  *((_QWORD *)v19 + 1) = 28;
  v19[16] = 2;
  v12();
  v20 = (_QWORD *)(v8 + 5 * v4);
  v21 = (char *)v20 + *(int *)(v2 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "tree_features";
  *((_QWORD *)v21 + 1) = 13;
  v21[16] = 2;
  v12();
  v22 = (_QWORD *)(v8 + 6 * v4);
  v23 = (char *)v22 + *(int *)(v2 + 48);
  *v22 = 7;
  *(_QWORD *)v23 = "branch_count";
  *((_QWORD *)v23 + 1) = 12;
  v23[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1001029BC()
{
  return sub_100008BD0(&qword_100394590, (uint64_t)qword_1003841A0, (uint64_t)sub_100102748);
}

uint64_t sub_1001029D8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394590, (uint64_t)qword_1003841A0, (uint64_t)sub_100102748, a1);
}

uint64_t sub_1001029F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t (*v12)(uint64_t);
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0) + 24);
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
          v11 = &qword_10036F888;
          v12 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox;
          v13 = &unk_1002D6510;
          goto LABEL_11;
        case 2:
          v14 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0);
          v15 = sub_10000FD38(&qword_10036E860, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch, (uint64_t)&unk_1002D6380);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v3, v14, v15, a2, a3);
          break;
        case 3:
          v16 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0) + 28);
          goto LABEL_13;
        case 4:
          v17 = v3
              + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0) + 32);
          v18 = sub_100149C74();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v17, &type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType, v18, a2, a3);
          break;
        case 5:
          v19 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v3 + *(int *)(v19 + 36), a2, a3);
          break;
        case 6:
          v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0) + 40);
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
          v11 = (unint64_t *)&unk_10036F8B0;
          v12 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures;
          v13 = &unk_1002D6808;
LABEL_11:
          v20 = sub_10000FD38(v11, v12, (uint64_t)v13);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v9, v10, v20, a2, a3);
          break;
        case 7:
          v16 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0) + 44);
LABEL_13:
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)(v3 + v16, a2, a3);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_100102C28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  char v16;

  result = sub_100102E10(v3, a1, a2, a3);
  if (!v4)
  {
    v9 = *(_QWORD *)v3;
    if (*(_QWORD *)(*(_QWORD *)v3 + 16))
    {
      v10 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0);
      v11 = sub_10000FD38(&qword_10036E860, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch, (uint64_t)&unk_1002D6380);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v9, 2, v10, v11, a2, a3);
    }
    v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
    v13 = v3 + v12[7];
    if ((*(_BYTE *)(v13 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*(_QWORD *)v13, 3, a2, a3);
    if (*(_BYTE *)(v3 + v12[8]) != 4)
    {
      v16 = *(_BYTE *)(v3 + v12[8]);
      v14 = sub_100149C74();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v16, 4, &type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType, v14, a2, a3);
    }
    v15 = (unsigned int *)(v3 + v12[9]);
    if ((v15[1] & 1) == 0)
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v15, 5, a2, a3);
    sub_100102F84(v3, a1, a2, a3);
    sub_1001030F8(v3, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_100102E10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036E570);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
  sub_10000E660(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_10036E570);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E570);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
  v15 = sub_10000FD38(&qword_10036F888, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, (uint64_t)&unk_1002D6510);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t sub_100102F84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036E578);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
  sub_10000E660(a1 + *(int *)(v13 + 40), (uint64_t)v8, &qword_10036E578);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E578);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
  v15 = sub_10000FD38(&qword_10036F8B0, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures, (uint64_t)&unk_1002D6808);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 6, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t sub_1001030F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
  v8 = a1 + *(int *)(result + 44);
  if ((*(_BYTE *)(v8 + 8) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*(_QWORD *)v8, 7, a3, a4);
  return result;
}

Swift::Int sub_100103170()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, &qword_10036E868, (uint64_t)&unk_1002D6778);
}

uint64_t sub_10010318C@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  char *v13;

  *a2 = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  v4 = (char *)a2 + a1[6];
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a1[8];
  v7 = (char *)a2 + a1[7];
  *(_QWORD *)v7 = 0;
  v7[8] = 1;
  *((_BYTE *)a2 + v6) = 4;
  v8 = a1[10];
  v9 = (char *)a2 + a1[9];
  *(_DWORD *)v9 = 0;
  v9[4] = 1;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v13 = (char *)a2 + a1[11];
  *(_QWORD *)v13 = 0;
  v13[8] = 1;
  return result;
}

uint64_t sub_10010325C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001029F4(a1, a2, a3);
}

uint64_t sub_100103270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100102C28(a1, a2, a3);
}

uint64_t sub_100103284(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100374EE8, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, (uint64_t)&unk_1002D66F0);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1001032D4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394590, (uint64_t)qword_1003841A0, (uint64_t)sub_100102748, a1);
}

uint64_t sub_1001032F0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036E878, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, (uint64_t)&unk_1002D6678);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100103330(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036E878, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, (uint64_t)&unk_1002D6678);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_100103384()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003841B8);
  sub_10000E6A4(v0, (uint64_t)qword_1003841B8);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40D0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 0;
  *(_QWORD *)v9 = "TreeType_PROTOBUF_DEFAULT";
  *(_QWORD *)(v9 + 8) = 25;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 1;
  *(_QWORD *)v13 = "TreeType_UNKNOWN";
  *(_QWORD *)(v13 + 8) = 16;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 2;
  *(_QWORD *)v15 = "TreeType_STANDARD_ACACIA";
  *((_QWORD *)v15 + 1) = 24;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 3;
  *(_QWORD *)v17 = "TreeType_NONSTANDARD_ACACIA";
  *((_QWORD *)v17 + 1) = 27;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100103540()
{
  return sub_100008BD0(&qword_100394598, (uint64_t)qword_1003841B8, (uint64_t)sub_100103384);
}

uint64_t sub_10010355C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394598, (uint64_t)qword_1003841B8, (uint64_t)sub_100103384, a1);
}

uint64_t sub_100103578@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394598, (uint64_t)qword_1003841B8, (uint64_t)sub_100103384, a1);
}

void sub_100103594()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x616546656572542ELL;
  v0._object = (void *)0xED00007365727574;
  String.append(_:)(v0);
  qword_1003841D0 = 0xD000000000000035;
  *(_QWORD *)algn_1003841D8 = 0x80000001002F51E0;
}

uint64_t *sub_100103608()
{
  if (qword_1003945A0 != -1)
    swift_once(&qword_1003945A0, sub_100103594);
  return &qword_1003841D0;
}

uint64_t sub_100103648()
{
  return sub_100103668(&qword_1003945A0, &qword_1003841D0, algn_1003841D8, (uint64_t)sub_100103594);
}

uint64_t sub_100103668(_QWORD *a1, uint64_t *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v6;

  if (*a1 != -1)
    swift_once(a1, a4);
  v6 = *a2;
  swift_bridgeObjectRetain(*a3);
  return v6;
}

uint64_t sub_1001036B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003841E0);
  sub_10000E6A4(v0, (uint64_t)qword_1003841E0);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3150;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "has_branch_widths";
  *(_QWORD *)(v9 + 8) = 17;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "has_branch_lengths";
  *((_QWORD *)v13 + 1) = 18;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100103808()
{
  return sub_100008BD0(&qword_1003945A8, (uint64_t)qword_1003841E0, (uint64_t)sub_1001036B8);
}

uint64_t sub_100103824@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003945A8, (uint64_t)qword_1003841E0, (uint64_t)sub_1001036B8, a1);
}

uint64_t sub_100103840(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t result;
  char v11;

  v7 = a2;
  for (i = a3; ; i = a3)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()(v7, i);
    if (v4 || (v11 & 1) != 0)
      break;
    if (result == 2)
    {
      v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0)
                  + 24);
LABEL_3:
      dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + v9, a2, a3);
      goto LABEL_4;
    }
    if (result == 1)
    {
      v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0)
                  + 20);
      goto LABEL_3;
    }
LABEL_4:
    v4 = 0;
    v7 = a2;
  }
  return result;
}

uint64_t sub_1001038EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  v10 = result;
  v11 = *(unsigned __int8 *)(v5 + *(int *)(result + 20));
  if (v11 != 2)
    result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v11 & 1, 1, a2, a3);
  if (!v4)
  {
    v12 = *(unsigned __int8 *)(v5 + *(int *)(v10 + 24));
    if (v12 != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v12 & 1, 2, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_1001039B8()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures, &qword_10036E870, (uint64_t)&unk_1002D6908);
}

uint64_t sub_1001039D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001046DC(a1, 2, 2, a2);
}

uint64_t sub_1001039E0(uint64_t a1, uint64_t a2)
{
  return sub_100103A00(a1, a2, &qword_1003945A0, &qword_1003841D0, algn_1003841D8, (uint64_t)sub_100103594);
}

uint64_t sub_100103A00(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, _QWORD *a5, uint64_t a6)
{
  uint64_t v8;

  if (*a3 != -1)
    swift_once(a3, a6);
  v8 = *a4;
  swift_bridgeObjectRetain(*a5);
  return v8;
}

uint64_t sub_100103A54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100103840(a1, a2, a3);
}

uint64_t sub_100103A68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001038EC(a1, a2, a3);
}

uint64_t sub_100103A7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100374EE0, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures, (uint64_t)&unk_1002D6880);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100103ACC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003945A8, (uint64_t)qword_1003841E0, (uint64_t)sub_1001036B8, a1);
}

uint64_t sub_100103AE8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F8B0, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures, (uint64_t)&unk_1002D6808);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100103B28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F8B0, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures, (uint64_t)&unk_1002D6808);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100103B78()
{
  return &unk_1003535E8;
}

unint64_t sub_100103B84()
{
  return 0xD000000000000032;
}

uint64_t sub_100103BA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003841F8);
  sub_10000E6A4(v0, (uint64_t)qword_1003841F8);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3120;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "receipt_time";
  *(_QWORD *)(v9 + 8) = 12;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "trees";
  *((_QWORD *)v13 + 1) = 5;
  v13[16] = 2;
  v12();
  v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + 2 * v4) = 3;
  *(_QWORD *)v14 = "contains_branch_geometry";
  *(_QWORD *)(v14 + 8) = 24;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100103D3C()
{
  return sub_100008BD0(&qword_1003945B0, (uint64_t)qword_1003841F8, (uint64_t)sub_100103BA0);
}

uint64_t sub_100103D58@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003945B0, (uint64_t)qword_1003841F8, (uint64_t)sub_100103BA0, a1);
}

uint64_t sub_100103D74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  v9 = v4;
  if (!v4)
  {
    while (1)
    {
      if ((v8 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        v15 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
        v16 = sub_10000FD38(&qword_10036E878, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, (uint64_t)&unk_1002D6678);
        v11 = v9;
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v3, v15, v16, a2, a3);
        goto LABEL_5;
      }
      if (result == 1)
      {
        v12 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0) + 24);
        v13 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
        v14 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
        v11 = v9;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v12, v13, v14, a2, a3);
        goto LABEL_5;
      }
LABEL_6:
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0);
    v11 = v9;
    dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + *(int *)(v10 + 28), a2, a3);
LABEL_5:
    v9 = v11;
    goto LABEL_6;
  }
  return result;
}

uint64_t sub_100103EDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  result = sub_100103FFC(v3, a1, a2, a3);
  if (!v4)
  {
    v9 = *(_QWORD *)v3;
    if (*(_QWORD *)(*(_QWORD *)v3 + 16))
    {
      v10 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
      v11 = sub_10000FD38(&qword_10036E878, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, (uint64_t)&unk_1002D6678);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v9, 2, v10, v11, a2, a3);
    }
    v12 = *(unsigned __int8 *)(v3
                             + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0)
                                      + 28));
    if (v12 != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v12 & 1, 3, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_100103FFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0);
  sub_10000E660(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_10036E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E458);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v15 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Int sub_100104174()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, &qword_10036E880, (uint64_t)&unk_1002D6A70);
}

uint64_t sub_100104190@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  uint64_t result;

  *a2 = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  v4 = (char *)a2 + *(int *)(a1 + 24);
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  *((_BYTE *)a2 + *(int *)(a1 + 28)) = 2;
  return result;
}

uint64_t sub_100104208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100103D74(a1, a2, a3);
}

uint64_t sub_10010421C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100103EDC(a1, a2, a3);
}

uint64_t sub_100104230(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100374ED8, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, (uint64_t)&unk_1002D69E8);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100104280@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003945B0, (uint64_t)qword_1003841F8, (uint64_t)sub_100103BA0, a1);
}

uint64_t sub_10010429C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F8C8, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, (uint64_t)&unk_1002D6970);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1001042DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F8C8, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, (uint64_t)&unk_1002D6970);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10010432C()
{
  return &unk_1003535F8;
}

unint64_t sub_100104338()
{
  return 0xD000000000000029;
}

uint64_t sub_100104354()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100384210);
  sub_10000E6A4(v0, (uint64_t)qword_100384210);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3150;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "wrist_orientation";
  *(_QWORD *)(v9 + 8) = 17;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "crown_orientation";
  *((_QWORD *)v13 + 1) = 17;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1001044A8()
{
  return sub_100008BD0(&qword_1003945B8, (uint64_t)qword_100384210, (uint64_t)sub_100104354);
}

uint64_t sub_1001044C4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003945B8, (uint64_t)qword_100384210, (uint64_t)sub_100104354, a1);
}

uint64_t sub_1001044E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while (1)
    {
      if ((v8 & 1) != 0)
        return result;
      if (result == 2)
        break;
      if (result == 1)
      {
        v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0) + 20);
        goto LABEL_5;
      }
LABEL_6:
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
    v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0) + 24);
LABEL_5:
    v10 = v3 + v9;
    v11 = sub_100149C30();
    dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v10, &type metadata for CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType, v11, a2, a3);
    goto LABEL_6;
  }
  return result;
}

uint64_t sub_1001045B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v14;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  v10 = result;
  if (*(_BYTE *)(v5 + *(int *)(result + 20)) != 4)
  {
    v13 = *(_BYTE *)(v5 + *(int *)(result + 20));
    v11 = sub_100149C30();
    result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v13, 1, &type metadata for CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType, v11, a2, a3);
  }
  if (!v4)
  {
    if (*(_BYTE *)(v5 + *(int *)(v10 + 24)) != 4)
    {
      v14 = *(_BYTE *)(v5 + *(int *)(v10 + 24));
      v12 = sub_100149C30();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v14, 2, &type metadata for CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType, v12, a2, a3);
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_1001046B4()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation, &qword_10036E888, (uint64_t)&unk_1002D6BD8);
}

uint64_t sub_1001046D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001046DC(a1, 4, 4, a2);
}

uint64_t sub_1001046DC@<X0>(uint64_t a1@<X0>, char a2@<W2>, char a3@<W3>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v9;

  result = UnknownStorage.init()();
  v9 = *(int *)(a1 + 24);
  *(_BYTE *)(a4 + *(int *)(a1 + 20)) = a2;
  *(_BYTE *)(a4 + v9) = a3;
  return result;
}

uint64_t sub_10010471C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001044E0(a1, a2, a3);
}

uint64_t sub_100104730(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001045B8(a1, a2, a3);
}

uint64_t sub_100104744(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100374ED0, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation, (uint64_t)&unk_1002D6B50);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100104794@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003945B8, (uint64_t)qword_100384210, (uint64_t)sub_100104354, a1);
}

uint64_t sub_1001047B0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F8E0, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation, (uint64_t)&unk_1002D6AD8);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1001047F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F8E0, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation, (uint64_t)&unk_1002D6AD8);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_100104844()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100384228);
  sub_10000E6A4(v0, (uint64_t)qword_100384228);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40D0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 0;
  *(_QWORD *)v9 = "WatchOrientationType_PROTOBUF_DEFAULT";
  *(_QWORD *)(v9 + 8) = 37;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 1;
  *(_QWORD *)v13 = "WatchOrientationType_Unknown";
  *(_QWORD *)(v13 + 8) = 28;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 2;
  *(_QWORD *)v15 = "WatchOrientationType_Left";
  *((_QWORD *)v15 + 1) = 25;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 3;
  *(_QWORD *)v17 = "WatchOrientationType_Right";
  *((_QWORD *)v17 + 1) = 26;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100104A00()
{
  return sub_100008BD0(&qword_1003945C0, (uint64_t)qword_100384228, (uint64_t)sub_100104844);
}

uint64_t sub_100104A1C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003945C0, (uint64_t)qword_100384228, (uint64_t)sub_100104844, a1);
}

uint64_t sub_100104A38@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003945C0, (uint64_t)qword_100384228, (uint64_t)sub_100104844, a1);
}

void *sub_100104A54()
{
  return &unk_100353608;
}

unint64_t sub_100104A60()
{
  return 0xD000000000000023;
}

uint64_t sub_100104A7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100384240);
  sub_10000E6A4(v0, (uint64_t)qword_100384240);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 - v4 + 8 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3140;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "applicable_time";
  *(_QWORD *)(v9 + 8) = 15;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "on_wrist";
  *(_QWORD *)(v13 + 8) = 8;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "on_wrist_sensor";
  *((_QWORD *)v15 + 1) = 15;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "on_wrist_confidence";
  *((_QWORD *)v17 + 1) = 19;
  v17[16] = 2;
  v12();
  v18 = (_QWORD *)(v8 + 4 * v4);
  v19 = (char *)v18 + *(int *)(v2 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "is_on_charger";
  *((_QWORD *)v19 + 1) = 13;
  v19[16] = 2;
  v12();
  v20 = (_QWORD *)(v8 + 5 * v4);
  v21 = (char *)v20 + *(int *)(v2 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "is_forced_on_wrist_enabled";
  *((_QWORD *)v21 + 1) = 26;
  v21[16] = 2;
  v12();
  v22 = (_QWORD *)(v8 + 6 * v4);
  v23 = (char *)v22 + *(int *)(v2 + 48);
  *v22 = 7;
  *(_QWORD *)v23 = "is_wrist_detection_enabled";
  *((_QWORD *)v23 + 1) = 26;
  v23[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100104CE4()
{
  return sub_100008BD0(&qword_1003945C8, (uint64_t)qword_100384240, (uint64_t)sub_100104A7C);
}

uint64_t sub_100104D00@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003945C8, (uint64_t)qword_100384240, (uint64_t)sub_100104A7C, a1);
}

uint64_t sub_100104D1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  ValueMetadata *v16;
  uint64_t v17;
  uint64_t v18;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 20);
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          v11 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v9, v10, v11, a2, a3);
          break;
        case 2:
          v12 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 24);
          goto LABEL_8;
        case 3:
          v12 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 28);
LABEL_8:
          v13 = v3 + v12;
          v14 = sub_100149BEC();
          v15 = v13;
          v16 = &type metadata for CLP_LogEntry_PrivateData_WristState.WristStateType;
          goto LABEL_10;
        case 4:
          v17 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 32);
          v14 = sub_100149BA8();
          v15 = v17;
          v16 = &type metadata for CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType;
LABEL_10:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v15, v16, v14, a2, a3);
          break;
        case 5:
          v18 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 36);
          goto LABEL_14;
        case 6:
          v18 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 40);
          goto LABEL_14;
        case 7:
          v18 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 44);
LABEL_14:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + v18, a2, a3);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_100104EE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v16;
  char v17;

  v5 = v3;
  result = sub_100105B68(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
  if (!v4)
  {
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
    v11 = v10;
    if (*(_BYTE *)(v5 + *(int *)(v10 + 24)) != 4)
    {
      v15 = *(_BYTE *)(v5 + *(int *)(v10 + 24));
      v12 = sub_100149BEC();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v15, 2, &type metadata for CLP_LogEntry_PrivateData_WristState.WristStateType, v12, a2, a3);
    }
    if (*(_BYTE *)(v5 + *(int *)(v11 + 28)) != 4)
    {
      v16 = *(_BYTE *)(v5 + *(int *)(v11 + 28));
      v13 = sub_100149BEC();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v16, 3, &type metadata for CLP_LogEntry_PrivateData_WristState.WristStateType, v13, a2, a3);
    }
    if (*(_BYTE *)(v5 + *(int *)(v11 + 32)) != 4)
    {
      v17 = *(_BYTE *)(v5 + *(int *)(v11 + 32));
      v14 = sub_100149BA8();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v17, 4, &type metadata for CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType, v14, a2, a3);
    }
    sub_1000EA258(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
    sub_1000EEF58(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
    sub_1000E4E8C(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_1001050C0()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_WristState, &qword_10036E890, (uint64_t)&unk_1002D6D68);
}

uint64_t sub_1001050DC@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  UnknownStorage.init()();
  v4 = a2 + a1[5];
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v7 = a1[7];
  *(_BYTE *)(a2 + a1[6]) = 4;
  *(_BYTE *)(a2 + v7) = 4;
  v8 = a1[9];
  *(_BYTE *)(a2 + a1[8]) = 4;
  *(_BYTE *)(a2 + v8) = 2;
  v9 = a1[11];
  *(_BYTE *)(a2 + a1[10]) = 2;
  *(_BYTE *)(a2 + v9) = 2;
  return result;
}

uint64_t sub_100105160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100104D1C(a1, a2, a3);
}

uint64_t sub_100105174(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100104EE4(a1, a2, a3);
}

uint64_t sub_100105188(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100374EC8, type metadata accessor for CLP_LogEntry_PrivateData_WristState, (uint64_t)&unk_1002D6CE0);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1001051D8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003945C8, (uint64_t)qword_100384240, (uint64_t)sub_100104A7C, a1);
}

uint64_t sub_1001051F4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F8F8, type metadata accessor for CLP_LogEntry_PrivateData_WristState, (uint64_t)&unk_1002D6C68);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100105234(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F8F8, type metadata accessor for CLP_LogEntry_PrivateData_WristState, (uint64_t)&unk_1002D6C68);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_100105284()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100384258);
  sub_10000E6A4(v0, (uint64_t)qword_100384258);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40D0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 0;
  *(_QWORD *)v9 = "WristStateType_PROTOBUF_DEFAULT";
  *(_QWORD *)(v9 + 8) = 31;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 1;
  *(_QWORD *)v13 = "WristStateType_Unknown";
  *(_QWORD *)(v13 + 8) = 22;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 2;
  *(_QWORD *)v15 = "WristStateType_On";
  *((_QWORD *)v15 + 1) = 17;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 3;
  *(_QWORD *)v17 = "WristStateType_Off";
  *((_QWORD *)v17 + 1) = 18;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100105440()
{
  return sub_100008BD0(&qword_1003945D0, (uint64_t)qword_100384258, (uint64_t)sub_100105284);
}

uint64_t sub_10010545C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003945D0, (uint64_t)qword_100384258, (uint64_t)sub_100105284, a1);
}

uint64_t sub_100105478@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003945D0, (uint64_t)qword_100384258, (uint64_t)sub_100105284, a1);
}

uint64_t sub_100105494()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100384270);
  sub_10000E6A4(v0, (uint64_t)qword_100384270);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40D0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 0;
  *(_QWORD *)v9 = "WristStateConfidenceType_PROTOBUF_DEFAULT";
  *(_QWORD *)(v9 + 8) = 41;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 1;
  *(_QWORD *)v13 = "WristStateConfidenceType_None";
  *(_QWORD *)(v13 + 8) = 29;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 2;
  *(_QWORD *)v15 = "WristStateConfidenceType_Low";
  *((_QWORD *)v15 + 1) = 28;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 3;
  *(_QWORD *)v17 = "WristStateConfidenceType_High";
  *((_QWORD *)v17 + 1) = 29;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100105654()
{
  return sub_100008BD0(&qword_1003945D8, (uint64_t)qword_100384270, (uint64_t)sub_100105494);
}

uint64_t sub_100105670@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003945D8, (uint64_t)qword_100384270, (uint64_t)sub_100105494, a1);
}

uint64_t sub_10010568C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003945D8, (uint64_t)qword_100384270, (uint64_t)sub_100105494, a1);
}

void *sub_1001056A8()
{
  return &unk_100353618;
}

unint64_t sub_1001056B4()
{
  return 0xD000000000000023;
}

uint64_t sub_1001056D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100384288);
  sub_10000E6A4(v0, (uint64_t)qword_100384288);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40D0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "event_receipt_time";
  *(_QWORD *)(v9 + 8) = 18;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "client";
  *(_QWORD *)(v13 + 8) = 6;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "watch_orientation";
  *((_QWORD *)v15 + 1) = 17;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "wrist_state";
  *((_QWORD *)v17 + 1) = 11;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100105898()
{
  return sub_100008BD0(&qword_1003945E0, (uint64_t)qword_100384288, (uint64_t)sub_1001056D0);
}

uint64_t sub_1001058B4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003945E0, (uint64_t)qword_100384288, (uint64_t)sub_1001056D0, a1);
}

uint64_t sub_1001058D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t (*v12)(uint64_t);
  void *v13;
  uint64_t v14;
  uint64_t v15;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0) + 20);
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          v11 = (unint64_t *)&qword_10036E1E0;
          v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
          v13 = &unk_1002CF5A8;
          goto LABEL_5;
        case 2:
          v15 = type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0);
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v3 + *(int *)(v15 + 24), a2, a3);
          break;
        case 3:
          v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0) + 28);
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
          v11 = &qword_10036F8E0;
          v12 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation;
          v13 = &unk_1002D6AD8;
          goto LABEL_5;
        case 4:
          v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0) + 32);
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
          v11 = &qword_10036F8F8;
          v12 = type metadata accessor for CLP_LogEntry_PrivateData_WristState;
          v13 = &unk_1002D6C68;
LABEL_5:
          v14 = sub_10000FD38(v11, v12, (uint64_t)v13);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v9, v10, v14, a2, a3);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_100105A74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  unsigned int *v10;

  v5 = v3;
  result = sub_100105B68(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WatchState);
  if (!v4)
  {
    v10 = (unsigned int *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0) + 24));
    if ((v10[1] & 1) == 0)
      dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v10, 2, a2, a3);
    sub_100105CE4(v5, a1, a2, a3);
    sub_100105E58(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_100105B68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = a4;
  v18 = a3;
  v7 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v7);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a5(0);
  sub_10000E660(a1 + *(int *)(v14 + 20), (uint64_t)v9, &qword_10036E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    return sub_100015704((uint64_t)v9, &qword_10036E458);
  sub_100003E08((uint64_t)v9, (uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v16 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v13, 1, v10, v16, v18, v19);
  return sub_100004030((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_100105CE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036E580);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0);
  sub_10000E660(a1 + *(int *)(v13 + 28), (uint64_t)v8, &qword_10036E580);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E580);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
  v15 = sub_10000FD38(&qword_10036F8E0, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation, (uint64_t)&unk_1002D6AD8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
}

uint64_t sub_100105E58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036E588);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0);
  sub_10000E660(a1 + *(int *)(v13 + 32), (uint64_t)v8, &qword_10036E588);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E588);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
  v15 = sub_10000FD38(&qword_10036F8F8, type metadata accessor for CLP_LogEntry_PrivateData_WristState, (uint64_t)&unk_1002D6C68);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 4, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

Swift::Int sub_100105FD0()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_WatchState, &qword_10036E898, (uint64_t)&unk_1002D6F20);
}

uint64_t sub_100105FEC@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  UnknownStorage.init()();
  v4 = a2 + a1[5];
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a1[7];
  v7 = a2 + a1[6];
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  v8 = a2 + v6;
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = a2 + a1[8];
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
}

uint64_t sub_1001060A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001058D0(a1, a2, a3);
}

uint64_t sub_1001060BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100105A74(a1, a2, a3);
}

uint64_t sub_1001060D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100374EC0, type metadata accessor for CLP_LogEntry_PrivateData_WatchState, (uint64_t)&unk_1002D6E98);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100106120@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003945E0, (uint64_t)qword_100384288, (uint64_t)sub_1001056D0, a1);
}

uint64_t sub_10010613C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F910, type metadata accessor for CLP_LogEntry_PrivateData_WatchState, (uint64_t)&unk_1002D6E20);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10010617C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F910, type metadata accessor for CLP_LogEntry_PrivateData_WatchState, (uint64_t)&unk_1002D6E20);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1001061CC()
{
  return &unk_100353628;
}

unint64_t sub_1001061D8()
{
  return 0xD000000000000027;
}

uint64_t sub_1001061F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003842A0);
  sub_10000E6A4(v0, (uint64_t)qword_1003842A0);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40D0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "user_specific_place_type";
  *(_QWORD *)(v9 + 8) = 24;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "place_type";
  *(_QWORD *)(v13 + 8) = 10;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "preferred_name";
  *((_QWORD *)v15 + 1) = 14;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "loi_uuid_identifier";
  *((_QWORD *)v17 + 1) = 19;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1001063B4()
{
  return sub_100008BD0(&qword_1003945E8, (uint64_t)qword_1003842A0, (uint64_t)sub_1001061F4);
}

uint64_t sub_1001063D0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003945E8, (uint64_t)qword_1003842A0, (uint64_t)sub_1001061F4, a1);
}

uint64_t sub_1001063EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  ValueMetadata *v12;
  uint64_t v13;
  uint64_t v14;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 20);
          v10 = sub_100149B64();
          v11 = v9;
          v12 = &type metadata for CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType;
          goto LABEL_5;
        case 2:
          v13 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 24);
          v10 = sub_100149B20();
          v11 = v13;
          v12 = &type metadata for CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType;
LABEL_5:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v11, v12, v10, a2, a3);
          break;
        case 3:
          v14 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 28);
          goto LABEL_11;
        case 4:
          v14 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 32);
LABEL_11:
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v3 + v14, a2, a3);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_10010653C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char v17;
  char v18;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  v10 = (int *)result;
  if (*(_BYTE *)(v5 + *(int *)(result + 20)) != 5)
  {
    v17 = *(_BYTE *)(v5 + *(int *)(result + 20));
    v11 = sub_100149B64();
    result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v17, 1, &type metadata for CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType, v11, a2, a3);
  }
  if (!v4)
  {
    if (*(_BYTE *)(v5 + v10[6]) != 3)
    {
      v18 = *(_BYTE *)(v5 + v10[6]);
      v12 = sub_100149B20();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v18, 2, &type metadata for CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType, v12, a2, a3);
    }
    v13 = (_QWORD *)(v5 + v10[7]);
    v14 = v13[1];
    if (v14)
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(*v13, v14, 3, a2, a3);
    v15 = (_QWORD *)(v5 + v10[8]);
    v16 = v15[1];
    if (v16)
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(*v15, v16, 4, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_10010669C()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference, &qword_10036E8A0, (uint64_t)&unk_1002D7088);
}

uint64_t sub_1001066B8@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  result = UnknownStorage.init()();
  v5 = a1[6];
  *(_BYTE *)(a2 + a1[5]) = 5;
  *(_BYTE *)(a2 + v5) = 3;
  v6 = a1[8];
  v7 = (_QWORD *)(a2 + a1[7]);
  *v7 = 0;
  v7[1] = 0;
  v8 = (_QWORD *)(a2 + v6);
  *v8 = 0;
  v8[1] = 0;
  return result;
}

uint64_t sub_100106704(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001063EC(a1, a2, a3);
}

uint64_t sub_100106718(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10010653C(a1, a2, a3);
}

uint64_t sub_10010672C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100374EB8, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference, (uint64_t)&unk_1002D7000);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10010677C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003945E8, (uint64_t)qword_1003842A0, (uint64_t)sub_1001061F4, a1);
}

uint64_t sub_100106798(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F928, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference, (uint64_t)&unk_1002D6F88);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1001067D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F928, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference, (uint64_t)&unk_1002D6F88);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_10010682C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003842B8);
  sub_10000E6A4(v0, (uint64_t)qword_1003842B8);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3100;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 0;
  *(_QWORD *)v9 = "USPT_UNKNOWN";
  *(_QWORD *)(v9 + 8) = 12;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 1;
  *(_QWORD *)v13 = "USPT_HOME";
  *(_QWORD *)(v13 + 8) = 9;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 2;
  *(_QWORD *)v15 = "USPT_WORK";
  *((_QWORD *)v15 + 1) = 9;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 3;
  *(_QWORD *)v17 = "USPT_SCHOOL";
  *((_QWORD *)v17 + 1) = 11;
  v17[16] = 2;
  v12();
  v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + 4 * v4) = 4;
  *(_QWORD *)v18 = "USPT_GYM";
  *(_QWORD *)(v18 + 8) = 8;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100106A30()
{
  return sub_100008BD0(&qword_1003945F0, (uint64_t)qword_1003842B8, (uint64_t)sub_10010682C);
}

uint64_t sub_100106A4C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003945F0, (uint64_t)qword_1003842B8, (uint64_t)sub_10010682C, a1);
}

uint64_t sub_100106A68@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003945F0, (uint64_t)qword_1003842B8, (uint64_t)sub_10010682C, a1);
}

uint64_t sub_100106A84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003842D0);
  sub_10000E6A4(v0, (uint64_t)qword_1003842D0);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3120;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 0;
  *(_QWORD *)v9 = "PIPT_AREA_OF_INTEREST";
  *(_QWORD *)(v9 + 8) = 21;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 1;
  *(_QWORD *)v13 = "PIPT_POINT_OF_INTEREST";
  *((_QWORD *)v13 + 1) = 22;
  v13[16] = 2;
  v12();
  v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + 2 * v4) = 2;
  *(_QWORD *)v14 = "PIPT_ADDRESS";
  *(_QWORD *)(v14 + 8) = 12;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100106C14()
{
  return sub_100008BD0(&qword_1003945F8, (uint64_t)qword_1003842D0, (uint64_t)sub_100106A84);
}

uint64_t sub_100106C30@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003945F8, (uint64_t)qword_1003842D0, (uint64_t)sub_100106A84, a1);
}

uint64_t sub_100106C4C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003945F8, (uint64_t)qword_1003842D0, (uint64_t)sub_100106A84, a1);
}

void *sub_100106C68()
{
  return &unk_100353638;
}

unint64_t sub_100106C74()
{
  return 0xD000000000000025;
}

uint64_t sub_100106C90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003842E8);
  sub_10000E6A4(v0, (uint64_t)qword_1003842E8);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 - v4 + 8 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3140;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "receipt_time";
  *(_QWORD *)(v9 + 8) = 12;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "arrival_time";
  *(_QWORD *)(v13 + 8) = 12;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "departure_time";
  *((_QWORD *)v15 + 1) = 14;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "detection_time";
  *((_QWORD *)v17 + 1) = 14;
  v17[16] = 2;
  v12();
  v18 = (_QWORD *)(v8 + 4 * v4);
  v19 = (char *)v18 + *(int *)(v2 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "place_inference";
  *((_QWORD *)v19 + 1) = 15;
  v19[16] = 2;
  v12();
  v20 = (_QWORD *)(v8 + 5 * v4);
  v21 = (char *)v20 + *(int *)(v2 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "coordinate";
  *((_QWORD *)v21 + 1) = 10;
  v21[16] = 2;
  v12();
  v22 = (_QWORD *)(v8 + 6 * v4);
  v23 = (char *)v22 + *(int *)(v2 + 48);
  *v22 = 7;
  *(_QWORD *)v23 = "horizontal_accuracy_m";
  *((_QWORD *)v23 + 1) = 21;
  v23[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100106F00()
{
  return sub_100008BD0(&qword_100394600, (uint64_t)qword_1003842E8, (uint64_t)sub_100106C90);
}

uint64_t sub_100106F1C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394600, (uint64_t)qword_1003842E8, (uint64_t)sub_100106C90, a1);
}

uint64_t sub_100106F38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v0 = type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v2 = v1
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime;
  v3 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56);
  v4(v2, 1, 1, v3);
  v4(v1+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime, 1, 1, v3);
  v4(v1+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime, 1, 1, v3);
  v4(v1+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime, 1, 1, v3);
  v5 = v1
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = v1
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM[0];
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  qword_100394610 = v1;
  return result;
}

uint64_t sub_100107080()
{
  uint64_t v0;

  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime, &qword_10036E458);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime, &qword_10036E458);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime, &qword_10036E458);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime, &qword_10036E458);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference, &qword_10036E590);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate, &qword_10036E460);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100107130(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  uint64_t (*v23)(uint64_t);
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[24];

  v5 = v4;
  v6 = v3;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v3 + v9)) & 1) == 0)
  {
    v10 = *(_QWORD *)(v3 + v9);
    v11 = type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    v13 = swift_retain(v10);
    sub_10010FF18(v13);
    swift_release(v10);
    v14 = *(_QWORD *)(v6 + v9);
    *(_QWORD *)(v6 + v9) = v12;
    swift_release(v14);
  }
  v15 = *(_QWORD *)(v6 + v9);
  swift_retain(v15);
  v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v17 & 1) == 0)
    {
      switch(v16)
      {
        case 1:
          v19 = OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime;
          goto LABEL_11;
        case 2:
          v19 = OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime;
          goto LABEL_11;
        case 3:
          v19 = OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime;
          goto LABEL_11;
        case 4:
          v19 = OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime;
LABEL_11:
          v20 = v15 + v19;
          swift_beginAccess(v15 + v19, v28, 33, 0);
          v21 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          v22 = (unint64_t *)&qword_10036E1E0;
          v23 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
          v24 = &unk_1002CF5A8;
          goto LABEL_14;
        case 5:
          v20 = v15
              + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference, v28, 33, 0);
          v21 = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
          v22 = &qword_10036F928;
          v23 = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference;
          v24 = &unk_1002D6F88;
          goto LABEL_14;
        case 6:
          v20 = v15
              + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate, v28, 33, 0);
          v21 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
          v22 = &qword_10036F280;
          v23 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate;
          v24 = &unk_1002CFF80;
LABEL_14:
          v25 = sub_10000FD38(v22, v23, (uint64_t)v24);
          v26 = v5;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v20, v21, v25, a2, a3);
          goto LABEL_15;
        case 7:
          v27 = v15
              + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM[0];
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM[0], v28, 33, 0);
          v26 = v5;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v27, a2, a3);
LABEL_15:
          v5 = v26;
          swift_endAccess(v28);
          break;
        default:
          break;
      }
      v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return swift_release(v15);
}

uint64_t sub_1001073C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE v13[24];

  v5 = v3;
  v9 = *(_QWORD *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20));
  v10 = swift_retain(v9);
  sub_10010755C(v10, a1, a2, a3);
  if (v4)
    return swift_release(v9);
  sub_1001076E8(v9, a1, a2, a3);
  sub_100107874(v9, a1, a2, a3);
  sub_100107A00(v9, a1, a2, a3);
  sub_100107B8C(v9, a1, a2, a3);
  sub_100107D18(v9, a1, a2, a3);
  v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM[0];
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM[0], v13, 0, 0);
  if ((*(_BYTE *)(v12 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(7, a2, a3, *(double *)v12);
  swift_release(v9);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_10010755C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E458);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v15 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1001076E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E458);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v15 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_100107874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E458);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v15 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_100107A00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E458);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v15 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 4, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_100107B8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E590);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E590);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E590);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
  v15 = sub_10000FD38(&qword_10036F928, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference, (uint64_t)&unk_1002D6F88);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 5, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
}

uint64_t sub_100107D18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E460);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E460);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E460);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  v15 = sub_10000FD38(&qword_10036F280, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, (uint64_t)&unk_1002CFF80);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 6, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_100107EA4(uint64_t a1, uint64_t a2)
{
  return sub_100065A60(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, (uint64_t (*)(uint64_t, uint64_t))sub_100107ECC) & 1;
}

BOOL sub_100107ECC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int (*v97)(uint64_t, uint64_t, uint64_t);
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int (*v108)(uint64_t, uint64_t, uint64_t);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t (*v122)(uint64_t, uint64_t, uint64_t);
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  double v131;
  char v132;
  uint64_t v133;
  double v134;
  int v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int (*v163)(uint64_t, uint64_t, uint64_t);
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char v174[24];
  char v175[24];
  char v176[24];
  char v177[24];
  char v178[24];
  char v179[32];

  v164 = a2;
  v3 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  v142 = *(_QWORD *)(v3 - 8);
  v143 = v3;
  __chkstk_darwin(v3);
  v138 = (uint64_t)&v137 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = sub_1000039AC(&qword_100375328);
  __chkstk_darwin(v141);
  v144 = (uint64_t)&v137 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000039AC(&qword_10036E460);
  v7 = __chkstk_darwin(v6);
  v139 = (uint64_t)&v137 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v146 = (uint64_t)&v137 - v9;
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  v148 = *(_QWORD *)(v10 - 8);
  v149 = v10;
  __chkstk_darwin(v10);
  v140 = (uint64_t)&v137 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v147 = sub_1000039AC(&qword_100375330);
  __chkstk_darwin(v147);
  v150 = (uint64_t)&v137 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000039AC(&qword_10036E590);
  v14 = __chkstk_darwin(v13);
  v145 = (uint64_t)&v137 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v152 = (uint64_t)&v137 - v16;
  v165 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v163 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v165 - 8);
  __chkstk_darwin(v165);
  v162 = (uint64_t)&v137 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1000039AC(&qword_100375338);
  v19 = __chkstk_darwin(v18);
  v153 = (uint64_t)&v137 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v155 = (uint64_t)&v137 - v22;
  v23 = __chkstk_darwin(v21);
  v160 = (uint64_t)&v137 - v24;
  __chkstk_darwin(v23);
  v26 = (char *)&v137 - v25;
  v27 = sub_1000039AC(&qword_10036E458);
  v28 = __chkstk_darwin(v27);
  v151 = (uint64_t)&v137 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v28);
  v156 = (uint64_t)&v137 - v31;
  v32 = __chkstk_darwin(v30);
  v154 = (uint64_t)&v137 - v33;
  v34 = __chkstk_darwin(v32);
  v158 = (uint64_t)&v137 - v35;
  v36 = __chkstk_darwin(v34);
  v157 = (uint64_t)&v137 - v37;
  v38 = __chkstk_darwin(v36);
  v159 = (uint64_t)&v137 - v39;
  v40 = __chkstk_darwin(v38);
  v42 = (char *)&v137 - v41;
  __chkstk_darwin(v40);
  v44 = (char *)&v137 - v43;
  v45 = a1;
  v46 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime, v179, 0, 0);
  sub_10000E660(v46, (uint64_t)v44, &qword_10036E458);
  v47 = v164;
  v48 = v164
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime;
  swift_beginAccess(v164+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime, v178, 0, 0);
  v161 = v18;
  v49 = (uint64_t)&v26[*(int *)(v18 + 48)];
  sub_10000E660((uint64_t)v44, (uint64_t)v26, &qword_10036E458);
  sub_10000E660(v48, v49, &qword_10036E458);
  v50 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v163 + 6);
  v51 = v165;
  if (v50((uint64_t)v26, 1, v165) == 1)
  {
    swift_retain(v45);
    swift_retain(v47);
    sub_100015704((uint64_t)v44, &qword_10036E458);
    v52 = v47;
    v53 = v45;
    if (v50(v49, 1, v51) == 1)
    {
      v54 = v51;
      sub_100015704((uint64_t)v26, &qword_10036E458);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  v53 = v45;
  sub_10000E660((uint64_t)v26, (uint64_t)v42, &qword_10036E458);
  if (v50(v49, 1, v51) == 1)
  {
    swift_retain(v45);
    swift_retain(v47);
    sub_100015704((uint64_t)v44, &qword_10036E458);
    v55 = (uint64_t)v42;
    v52 = v47;
    sub_100004030(v55, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    sub_100015704((uint64_t)v26, &qword_100375338);
LABEL_11:
    v66 = v53;
LABEL_38:
    swift_release(v66);
    swift_release(v52);
    return 0;
  }
  v56 = v49;
  v57 = v162;
  sub_100003E08(v56, v162, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  swift_retain(v45);
  swift_retain(v47);
  v58 = sub_1000656F0((uint64_t)v42, v57, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004030(v57, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v44, &qword_10036E458);
  v59 = (uint64_t)v42;
  v52 = v47;
  v54 = v165;
  sub_100004030(v59, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v26, &qword_10036E458);
  if ((v58 & 1) == 0)
    goto LABEL_11;
LABEL_8:
  v164 = v53;
  v60 = v53
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime;
  swift_beginAccess(v60, v177, 0, 0);
  v61 = v159;
  sub_10000E660(v60, v159, &qword_10036E458);
  v62 = v52
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime;
  swift_beginAccess(v52+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime, v176, 0, 0);
  v63 = v160;
  v64 = v161;
  v65 = v160 + *(int *)(v161 + 48);
  sub_10000E660(v61, v160, &qword_10036E458);
  sub_10000E660(v62, v65, &qword_10036E458);
  if (v50(v63, 1, v54) == 1)
  {
    sub_100015704(v61, &qword_10036E458);
    if (v50(v65, 1, v54) == 1)
    {
      sub_100015704(v63, &qword_10036E458);
      goto LABEL_16;
    }
LABEL_14:
    v68 = &qword_100375338;
    v69 = v63;
LABEL_36:
    sub_100015704(v69, v68);
    goto LABEL_37;
  }
  v67 = v157;
  sub_10000E660(v63, v157, &qword_10036E458);
  if (v50(v65, 1, v54) == 1)
  {
    sub_100015704(v61, &qword_10036E458);
    sub_100004030(v67, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_14;
  }
  v70 = v65;
  v71 = v64;
  v72 = v52;
  v73 = v61;
  v74 = v162;
  sub_100003E08(v70, v162, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  LODWORD(v163) = sub_1000656F0(v67, v74, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004030(v74, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v75 = v73;
  v52 = v72;
  v64 = v71;
  sub_100015704(v75, &qword_10036E458);
  sub_100004030(v67, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704(v63, &qword_10036E458);
  if ((v163 & 1) == 0)
    goto LABEL_37;
LABEL_16:
  v76 = v164
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime;
  swift_beginAccess(v164+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime, v175, 0, 0);
  v77 = v158;
  sub_10000E660(v76, v158, &qword_10036E458);
  v78 = v52
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime;
  swift_beginAccess(v52+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime, v174, 0, 0);
  v79 = v155;
  v80 = v155 + *(int *)(v64 + 48);
  sub_10000E660(v77, v155, &qword_10036E458);
  sub_10000E660(v78, v80, &qword_10036E458);
  if (v50(v79, 1, v54) == 1)
  {
    sub_100015704(v77, &qword_10036E458);
    v81 = v50(v80, 1, v54);
    v82 = v156;
    if (v81 == 1)
    {
      v163 = v50;
      sub_100015704(v79, &qword_10036E458);
      goto LABEL_23;
    }
    goto LABEL_21;
  }
  v83 = v154;
  sub_10000E660(v79, v154, &qword_10036E458);
  v84 = v50(v80, 1, v54);
  v82 = v156;
  if (v84 == 1)
  {
    sub_100015704(v158, &qword_10036E458);
    sub_100004030(v83, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_21:
    v68 = &qword_100375338;
    v69 = v79;
    goto LABEL_36;
  }
  v163 = v50;
  v85 = v83;
  v86 = v162;
  sub_100003E08(v80, v162, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v87 = sub_1000656F0(v85, v86, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004030(v86, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704(v158, &qword_10036E458);
  sub_100004030(v85, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704(v79, &qword_10036E458);
  if ((v87 & 1) == 0)
    goto LABEL_37;
LABEL_23:
  v88 = v164
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime;
  swift_beginAccess(v164+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime, &v173, 0, 0);
  sub_10000E660(v88, v82, &qword_10036E458);
  v89 = v52
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime;
  swift_beginAccess(v52+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime, &v172, 0, 0);
  v90 = *(int *)(v64 + 48);
  v91 = v82;
  v92 = v54;
  v93 = v153;
  v94 = v153 + v90;
  sub_10000E660(v91, v153, &qword_10036E458);
  v95 = v89;
  v96 = v92;
  sub_10000E660(v95, v94, &qword_10036E458);
  v97 = v163;
  if (v163(v93, 1, v92) == 1)
  {
    sub_100015704(v91, &qword_10036E458);
    if (v97(v94, 1, v92) == 1)
    {
      sub_100015704(v93, &qword_10036E458);
      goto LABEL_30;
    }
    goto LABEL_28;
  }
  v98 = v151;
  sub_10000E660(v93, v151, &qword_10036E458);
  if (v97(v94, 1, v96) == 1)
  {
    sub_100015704(v156, &qword_10036E458);
    sub_100004030(v98, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_28:
    v68 = &qword_100375338;
    v69 = v93;
    goto LABEL_36;
  }
  v99 = v162;
  sub_100003E08(v94, v162, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v100 = sub_1000656F0(v98, v99, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004030(v99, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704(v156, &qword_10036E458);
  sub_100004030(v98, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704(v93, &qword_10036E458);
  if ((v100 & 1) == 0)
  {
LABEL_37:
    v66 = v164;
    goto LABEL_38;
  }
LABEL_30:
  v101 = v164
       + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  swift_beginAccess(v164+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference, &v171, 0, 0);
  v102 = v152;
  sub_10000E660(v101, v152, &qword_10036E590);
  v103 = v52
       + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  swift_beginAccess(v52+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference, &v170, 0, 0);
  v104 = v150;
  v105 = v150 + *(int *)(v147 + 48);
  sub_10000E660(v102, v150, &qword_10036E590);
  v106 = v103;
  v107 = v104;
  sub_10000E660(v106, v105, &qword_10036E590);
  v108 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v148 + 48);
  v109 = v104;
  v110 = v149;
  if (v108(v109, 1, v149) == 1)
  {
    sub_100015704(v102, &qword_10036E590);
    if (v108(v105, 1, v110) == 1)
    {
      sub_100015704(v107, &qword_10036E590);
      goto LABEL_41;
    }
    goto LABEL_35;
  }
  v111 = v145;
  sub_10000E660(v107, v145, &qword_10036E590);
  if (v108(v105, 1, v110) == 1)
  {
    sub_100015704(v152, &qword_10036E590);
    sub_100004030(v111, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
LABEL_35:
    v68 = &qword_100375330;
    v69 = v107;
    goto LABEL_36;
  }
  v113 = v140;
  sub_100003E08(v105, v140, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
  v114 = sub_100117534(v111, v113);
  sub_100004030(v113, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
  sub_100015704(v152, &qword_10036E590);
  sub_100004030(v111, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
  sub_100015704(v107, &qword_10036E590);
  if ((v114 & 1) == 0)
    goto LABEL_37;
LABEL_41:
  v115 = v164
       + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess(v164+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate, &v169, 0, 0);
  v116 = v146;
  sub_10000E660(v115, v146, &qword_10036E460);
  v117 = v52
       + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess(v52+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate, &v168, 0, 0);
  v118 = v144;
  v119 = v144 + *(int *)(v141 + 48);
  sub_10000E660(v116, v144, &qword_10036E460);
  v120 = v117;
  v121 = v118;
  sub_10000E660(v120, v119, &qword_10036E460);
  v122 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v142 + 48);
  v123 = v118;
  v124 = v143;
  if (v122(v123, 1, v143) == 1)
  {
    sub_100015704(v116, &qword_10036E460);
    v125 = v122(v119, 1, v124);
    v126 = v164;
    if (v125 == 1)
    {
      sub_100015704(v121, &qword_10036E460);
      goto LABEL_48;
    }
    goto LABEL_46;
  }
  v127 = v139;
  sub_10000E660(v121, v139, &qword_10036E460);
  if (v122(v119, 1, v124) == 1)
  {
    sub_100015704(v146, &qword_10036E460);
    sub_100004030(v127, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
    v126 = v164;
LABEL_46:
    sub_100015704(v121, &qword_100375328);
    v66 = v126;
    goto LABEL_38;
  }
  v128 = v138;
  sub_100003E08(v119, v138, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  v129 = sub_10011F460(v127, v128, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  sub_100004030(v128, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  sub_100015704(v146, &qword_10036E460);
  sub_100004030(v127, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  sub_100015704(v121, &qword_10036E460);
  v126 = v164;
  if ((v129 & 1) == 0)
  {
    v66 = v164;
    goto LABEL_38;
  }
LABEL_48:
  v130 = v126
       + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM[0];
  swift_beginAccess(v126+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM[0], &v167, 0, 0);
  v131 = *(double *)v130;
  v132 = *(_BYTE *)(v130 + 8);
  swift_release(v126);
  v133 = v52
       + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM[0];
  swift_beginAccess(v52+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM[0], &v166, 0, 0);
  v134 = *(double *)v133;
  v135 = *(unsigned __int8 *)(v133 + 8);
  swift_release(v52);
  if ((v132 & 1) == 0)
  {
    if (v131 == v134)
      v136 = v135;
    else
      v136 = 1;
    return (v136 & 1) == 0;
  }
  return v135 != 0;
}

Swift::Int sub_100108E28()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &qword_10036E8A8, (uint64_t)&unk_1002D7240);
}

uint64_t sub_100108E44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005DD1C(a1, &qword_100394608, &qword_100394610, (uint64_t)sub_100106F38, a2);
}

uint64_t sub_100108E60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100107130(a1, a2, a3);
}

uint64_t sub_100108E74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001073C0(a1, a2, a3);
}

uint64_t sub_100108E88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100374EB0, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, (uint64_t)&unk_1002D71B8);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100108ED8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394600, (uint64_t)qword_1003842E8, (uint64_t)sub_100106C90, a1);
}

uint64_t sub_100108EF4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F940, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, (uint64_t)&unk_1002D7140);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100108F34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F940, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, (uint64_t)&unk_1002D7140);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100108F84()
{
  return &unk_100353648;
}

unint64_t sub_100108F90()
{
  return 0xD000000000000026;
}

uint64_t sub_100108FAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v26;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100384300);
  sub_10000E6A4(v0, (uint64_t)qword_100384300);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v26 = swift_allocObject(v1, v6 + 8 * v4, v5 | 7);
  *(_OWORD *)(v26 + 16) = xmmword_1002C40B0;
  v7 = v26 + v6;
  v8 = v26 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v26 + v6) = 1;
  *(_QWORD *)v8 = "start_time_cfat_sec";
  *(_QWORD *)(v8 + 8) = 19;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = enum case for _NameMap.NameDescription.standard(_:);
  v10 = type metadata accessor for _NameMap.NameDescription(0);
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v7 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v4) = 2;
  *(_QWORD *)v12 = "mct_timestamp_sec";
  *(_QWORD *)(v12 + 8) = 17;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v7 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "type";
  *((_QWORD *)v14 + 1) = 4;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v7 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "confidence";
  *((_QWORD *)v16 + 1) = 10;
  v16[16] = 2;
  v11();
  v17 = (_QWORD *)(v7 + 4 * v4);
  v18 = (char *)v17 + *(int *)(v2 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "estimated_state_probability_outdoor";
  *((_QWORD *)v18 + 1) = 35;
  v18[16] = 2;
  v11();
  v19 = (_QWORD *)(v7 + 5 * v4);
  v20 = (char *)v19 + *(int *)(v2 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "daylight_confidence";
  *((_QWORD *)v20 + 1) = 19;
  v20[16] = 2;
  v11();
  v21 = (_QWORD *)(v7 + 6 * v4);
  v22 = (char *)v21 + *(int *)(v2 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "is_astronomical_daytime";
  *((_QWORD *)v22 + 1) = 23;
  v22[16] = 2;
  v11();
  v23 = (_QWORD *)(v7 + 7 * v4);
  v24 = (char *)v23 + *(int *)(v2 + 48);
  *v23 = 8;
  *(_QWORD *)v24 = "current_lux";
  *((_QWORD *)v24 + 1) = 11;
  v24[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v26);
}

uint64_t sub_100109260()
{
  return sub_100008BD0(&qword_100394618, (uint64_t)qword_100384300, (uint64_t)sub_100108FAC);
}

uint64_t sub_10010927C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394618, (uint64_t)qword_100384300, (uint64_t)sub_100108FAC, a1);
}

uint64_t sub_100109298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  ValueMetadata *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 20);
          goto LABEL_10;
        case 2:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 24);
          goto LABEL_10;
        case 3:
          v10 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 28);
          v11 = sub_10014A4B0();
          v12 = v10;
          v13 = &type metadata for CLP_LogEntry_PrivateData_IndoorOutdoorType;
          goto LABEL_13;
        case 4:
          v14 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 32);
          goto LABEL_12;
        case 5:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 36);
LABEL_10:
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + v9, a2, a3);
          break;
        case 6:
          v14 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 40);
LABEL_12:
          v15 = v3 + v14;
          v11 = sub_10014A46C();
          v12 = v15;
          v13 = &type metadata for CLP_LogEntry_PrivateData_IndoorOutdoorConfidence;
LABEL_13:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v12, v13, v11, a2, a3);
          break;
        case 7:
          v16 = type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0);
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + *(int *)(v16 + 44), a2, a3);
          break;
        case 8:
          v17 = type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0);
          dispatch thunk of Decoder.decodeSingularFloatField(value:)(v3 + *(int *)(v17 + 48), a2, a3);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_10010945C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v16;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0);
  v10 = (int *)result;
  v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(1, a2, a3, *(double *)v11);
  if (!v4)
  {
    v12 = v5 + v10[6];
    if ((*(_BYTE *)(v12 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2, a2, a3, *(double *)v12);
    if (*(_BYTE *)(v5 + v10[7]) != 3)
    {
      v15 = *(_BYTE *)(v5 + v10[7]);
      v13 = sub_10014A4B0();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v15, 3, &type metadata for CLP_LogEntry_PrivateData_IndoorOutdoorType, v13, a2, a3);
    }
    if (*(_BYTE *)(v5 + v10[8]) != 4)
    {
      v16 = *(_BYTE *)(v5 + v10[8]);
      v14 = sub_10014A46C();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v16, 4, &type metadata for CLP_LogEntry_PrivateData_IndoorOutdoorConfidence, v14, a2, a3);
    }
    sub_1000FAE14(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
    sub_100109650(v5, a1, a2, a3);
    sub_1000E4E8C(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
    sub_1000F9F70(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_100109650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v8;
  char v9;

  result = type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0);
  if (*(_BYTE *)(a1 + *(int *)(result + 40)) != 4)
  {
    v9 = *(_BYTE *)(a1 + *(int *)(result + 40));
    v8 = sub_10014A46C();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v9, 6, &type metadata for CLP_LogEntry_PrivateData_IndoorOutdoorConfidence, v8, a3, a4);
  }
  return result;
}

Swift::Int sub_1001096DC()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate, &qword_10036E8B0, (uint64_t)&unk_1002D73A8);
}

uint64_t sub_1001096F8@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = UnknownStorage.init()();
  v5 = a1[6];
  v6 = a2 + a1[5];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a2 + v5;
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  v8 = a1[8];
  *(_BYTE *)(a2 + a1[7]) = 3;
  *(_BYTE *)(a2 + v8) = 4;
  v9 = a1[10];
  v10 = a2 + a1[9];
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  *(_BYTE *)(a2 + v9) = 4;
  v11 = a1[12];
  *(_BYTE *)(a2 + a1[11]) = 2;
  v12 = a2 + v11;
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  return result;
}

uint64_t sub_10010977C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100109298(a1, a2, a3);
}

uint64_t sub_100109790(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10010945C(a1, a2, a3);
}

uint64_t sub_1001097A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100374EA8, type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate, (uint64_t)&unk_1002D7320);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1001097F4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394618, (uint64_t)qword_100384300, (uint64_t)sub_100108FAC, a1);
}

uint64_t sub_100109810(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F958, type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate, (uint64_t)&unk_1002D72A8);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100109850(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F958, type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate, (uint64_t)&unk_1002D72A8);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1001098A0()
{
  return &unk_100353658;
}

unint64_t sub_1001098AC()
{
  return 0xD00000000000002FLL;
}

uint64_t sub_1001098C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  uint64_t v42;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100384318);
  sub_10000E6A4(v0, (uint64_t)qword_100384318);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v42 = swift_allocObject(v1, v6 + 17 * v4, v5 | 7);
  *(_OWORD *)(v42 + 16) = xmmword_1002CAB80;
  v7 = v42 + v6;
  v8 = v42 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v42 + v6) = 1;
  *(_QWORD *)v8 = "cf_absolute_timestamp_sec";
  *(_QWORD *)(v8 + 8) = 25;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = enum case for _NameMap.NameDescription.standard(_:);
  v10 = type metadata accessor for _NameMap.NameDescription(0);
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v7 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v4) = 2;
  *(_QWORD *)v12 = "mach_continuous_timestamp_sec";
  *(_QWORD *)(v12 + 8) = 29;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v7 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "sample_interval_sec";
  *((_QWORD *)v14 + 1) = 19;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v7 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "d_pos_x_m";
  *((_QWORD *)v16 + 1) = 9;
  v16[16] = 2;
  v11();
  v17 = (_QWORD *)(v7 + 4 * v4);
  v18 = (char *)v17 + *(int *)(v2 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "d_pos_Y_m";
  *((_QWORD *)v18 + 1) = 9;
  v18[16] = 2;
  v11();
  v19 = (_QWORD *)(v7 + 5 * v4);
  v20 = (char *)v19 + *(int *)(v2 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "d_pos_z_m";
  *((_QWORD *)v20 + 1) = 9;
  v20[16] = 2;
  v11();
  v21 = (_QWORD *)(v7 + 6 * v4);
  v22 = (char *)v21 + *(int *)(v2 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "d_vel_x_mps";
  *((_QWORD *)v22 + 1) = 11;
  v22[16] = 2;
  v11();
  v23 = (_QWORD *)(v7 + 7 * v4);
  v24 = (char *)v23 + *(int *)(v2 + 48);
  *v23 = 8;
  *(_QWORD *)v24 = "d_vel_y_mps";
  *((_QWORD *)v24 + 1) = 11;
  v24[16] = 2;
  v11();
  v25 = v7 + 8 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + 8 * v4) = 9;
  *(_QWORD *)v25 = "d_vel_z_mps";
  *(_QWORD *)(v25 + 8) = 11;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  v26 = (_QWORD *)(v7 + 9 * v4);
  v27 = (char *)v26 + *(int *)(v2 + 48);
  *v26 = 10;
  *(_QWORD *)v27 = "q_x";
  *((_QWORD *)v27 + 1) = 3;
  v27[16] = 2;
  v11();
  v28 = (_QWORD *)(v7 + 10 * v4);
  v29 = (char *)v28 + *(int *)(v2 + 48);
  *v28 = 11;
  *(_QWORD *)v29 = "q_y";
  *((_QWORD *)v29 + 1) = 3;
  v29[16] = 2;
  v11();
  v30 = (_QWORD *)(v7 + 11 * v4);
  v31 = (char *)v30 + *(int *)(v2 + 48);
  *v30 = 12;
  *(_QWORD *)v31 = "q_z";
  *((_QWORD *)v31 + 1) = 3;
  v31[16] = 2;
  v11();
  v32 = (_QWORD *)(v7 + 12 * v4);
  v33 = (char *)v32 + *(int *)(v2 + 48);
  *v32 = 13;
  *(_QWORD *)v33 = "q_w";
  *((_QWORD *)v33 + 1) = 3;
  v33[16] = 2;
  v11();
  v34 = (_QWORD *)(v7 + 13 * v4);
  v35 = (char *)v34 + *(int *)(v2 + 48);
  *v34 = 14;
  *(_QWORD *)v35 = "reference_frame";
  *((_QWORD *)v35 + 1) = 15;
  v35[16] = 2;
  v11();
  v36 = (_QWORD *)(v7 + 14 * v4);
  v37 = (char *)v36 + *(int *)(v2 + 48);
  *v36 = 15;
  *(_QWORD *)v37 = "is_delta_position_valid";
  *((_QWORD *)v37 + 1) = 23;
  v37[16] = 2;
  v11();
  v38 = (_QWORD *)(v7 + 15 * v4);
  v39 = (char *)v38 + *(int *)(v2 + 48);
  *v38 = 16;
  *(_QWORD *)v39 = "is_delta_velocity_valid";
  *((_QWORD *)v39 + 1) = 23;
  v39[16] = 2;
  v11();
  v40 = v7 + 16 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + 16 * v4) = 17;
  *(_QWORD *)v40 = "is_attitude_valid";
  *(_QWORD *)(v40 + 8) = 17;
  *(_BYTE *)(v40 + 16) = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v42);
}

uint64_t sub_100109D2C()
{
  return sub_100008BD0(&qword_100394620, (uint64_t)qword_100384318, (uint64_t)sub_1001098C8);
}

uint64_t sub_100109D48@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394620, (uint64_t)qword_100384318, (uint64_t)sub_1001098C8, a1);
}

double sub_100109D64()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v0 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
  v1 = swift_allocObject(v0, 133, 7);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 1;
  *(_QWORD *)(v1 + 32) = 0;
  *(_BYTE *)(v1 + 40) = 1;
  *(_DWORD *)(v1 + 44) = 0;
  *(_BYTE *)(v1 + 48) = 1;
  *(_DWORD *)(v1 + 52) = 0;
  *(_BYTE *)(v1 + 56) = 1;
  *(_DWORD *)(v1 + 60) = 0;
  *(_BYTE *)(v1 + 64) = 1;
  *(_DWORD *)(v1 + 68) = 0;
  *(_BYTE *)(v1 + 72) = 1;
  *(_DWORD *)(v1 + 76) = 0;
  *(_BYTE *)(v1 + 80) = 1;
  *(_DWORD *)(v1 + 84) = 0;
  *(_BYTE *)(v1 + 88) = 1;
  *(_DWORD *)(v1 + 92) = 0;
  *(_BYTE *)(v1 + 96) = 1;
  *(_DWORD *)(v1 + 100) = 0;
  *(_BYTE *)(v1 + 104) = 1;
  *(_DWORD *)(v1 + 108) = 0;
  *(_BYTE *)(v1 + 112) = 1;
  *(_DWORD *)(v1 + 116) = 0;
  *(_BYTE *)(v1 + 120) = 1;
  *(_DWORD *)(v1 + 124) = 0;
  *(_BYTE *)(v1 + 128) = 1;
  *(_QWORD *)&result = 33686019;
  *(_DWORD *)(v1 + 129) = 33686019;
  qword_100394630 = v1;
  return result;
}

uint64_t sub_100109E04()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 133, 7);
}

uint64_t sub_100109E14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[24];
  uint64_t v25;

  v5 = v4;
  v6 = v3;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v3 + v9)) & 1) == 0)
  {
    v10 = *(_QWORD *)(v3 + v9);
    v11 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v12 = swift_allocObject(v11, 133, 7);
    sub_10011041C(v10);
    v13 = *(_QWORD *)(v6 + v9);
    *(_QWORD *)(v6 + v9) = v12;
    swift_release(v13);
  }
  v14 = *(_QWORD *)(v6 + v9);
  swift_retain(v14);
  v15 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    v25 = v14 + 132;
    v23 = v14 + 129;
    while ((v16 & 1) == 0)
    {
      switch(v15)
      {
        case 1:
          swift_beginAccess(v14 + 16, v24, 33, 0);
          v18 = v14 + 16;
          goto LABEL_10;
        case 2:
          swift_beginAccess(v14 + 32, v24, 33, 0);
          v18 = v14 + 32;
LABEL_10:
          v19 = v5;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v18, a2, a3);
          goto LABEL_28;
        case 3:
          v20 = v14 + 44;
          goto LABEL_22;
        case 4:
          v20 = v14 + 52;
          goto LABEL_22;
        case 5:
          v20 = v14 + 60;
          goto LABEL_22;
        case 6:
          v20 = v14 + 68;
          goto LABEL_22;
        case 7:
          v20 = v14 + 76;
          goto LABEL_22;
        case 8:
          v20 = v14 + 84;
          goto LABEL_22;
        case 9:
          v20 = v14 + 92;
          goto LABEL_22;
        case 10:
          v20 = v14 + 100;
          goto LABEL_22;
        case 11:
          v20 = v14 + 108;
          goto LABEL_22;
        case 12:
          v20 = v14 + 116;
          goto LABEL_22;
        case 13:
          v20 = v14 + 124;
LABEL_22:
          swift_beginAccess(v20, v24, 33, 0);
          v19 = v5;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)(v20, a2, a3);
          goto LABEL_28;
        case 14:
          swift_beginAccess(v23, v24, 33, 0);
          v21 = sub_100149ADC();
          v19 = v5;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v23, &type metadata for CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame, v21, a2, a3);
          goto LABEL_28;
        case 15:
          v22 = v14 + 130;
          goto LABEL_27;
        case 16:
          v22 = v14 + 131;
          goto LABEL_27;
        case 17:
          v22 = v25;
LABEL_27:
          swift_beginAccess(v22, v24, 33, 0);
          v19 = v5;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v22, a2, a3);
LABEL_28:
          v5 = v19;
          swift_endAccess(v24);
          break;
        default:
          break;
      }
      v15 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return swift_release(v14);
}

uint64_t sub_10010A124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  _BYTE v15[24];
  _BYTE v16[24];
  _BYTE v17[24];
  _BYTE v18[24];
  _BYTE v19[24];
  _BYTE v20[24];
  _BYTE v21[24];
  _BYTE v22[24];
  _BYTE v23[24];
  _BYTE v24[24];
  _BYTE v25[24];
  _BYTE v26[24];
  _BYTE v27[24];
  _BYTE v28[24];
  _BYTE v29[24];
  _BYTE v30[24];
  _BYTE v31[24];

  v5 = v3;
  v9 = *(_QWORD *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_retain(v9);
  swift_beginAccess(v9 + 16, v15, 0, 0);
  if ((*(_BYTE *)(v9 + 24) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(1, a2, a3, *(double *)(v9 + 16));
  if (v4)
    return swift_release(v9);
  swift_beginAccess(v9 + 32, v16, 0, 0);
  if ((*(_BYTE *)(v9 + 40) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2, a2, a3, *(double *)(v9 + 32));
  swift_beginAccess(v9 + 44, v17, 0, 0);
  if ((*(_BYTE *)(v9 + 48) & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(3, a2, a3, *(float *)(v9 + 44));
  swift_beginAccess(v9 + 52, v18, 0, 0);
  if ((*(_BYTE *)(v9 + 56) & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(4, a2, a3, *(float *)(v9 + 52));
  swift_beginAccess(v9 + 60, v31, 0, 0);
  if ((*(_BYTE *)(v9 + 64) & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(5, a2, a3, *(float *)(v9 + 60));
  swift_beginAccess(v9 + 68, v30, 0, 0);
  if ((*(_BYTE *)(v9 + 72) & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(6, a2, a3, *(float *)(v9 + 68));
  swift_beginAccess(v9 + 76, v29, 0, 0);
  if ((*(_BYTE *)(v9 + 80) & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(7, a2, a3, *(float *)(v9 + 76));
  swift_beginAccess(v9 + 84, v28, 0, 0);
  if ((*(_BYTE *)(v9 + 88) & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(8, a2, a3, *(float *)(v9 + 84));
  swift_beginAccess(v9 + 92, v27, 0, 0);
  if ((*(_BYTE *)(v9 + 96) & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(9, a2, a3, *(float *)(v9 + 92));
  swift_beginAccess(v9 + 100, v26, 0, 0);
  if ((*(_BYTE *)(v9 + 104) & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(10, a2, a3, *(float *)(v9 + 100));
  swift_beginAccess(v9 + 108, v25, 0, 0);
  if ((*(_BYTE *)(v9 + 112) & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(11, a2, a3, *(float *)(v9 + 108));
  swift_beginAccess(v9 + 116, v24, 0, 0);
  if ((*(_BYTE *)(v9 + 120) & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(12, a2, a3, *(float *)(v9 + 116));
  swift_beginAccess(v9 + 124, v23, 0, 0);
  if ((*(_BYTE *)(v9 + 128) & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(13, a2, a3, *(float *)(v9 + 124));
  swift_beginAccess(v9 + 129, v22, 0, 0);
  if (*(_BYTE *)(v9 + 129) != 3)
  {
    v21[0] = *(_BYTE *)(v9 + 129);
    v11 = sub_100149ADC();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(v21, 14, &type metadata for CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame, v11, a2, a3);
  }
  swift_beginAccess(v9 + 130, v21, 0, 0);
  v12 = *(unsigned __int8 *)(v9 + 130);
  if (v12 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v12 & 1, 15, a2, a3);
  swift_beginAccess(v9 + 131, v20, 0, 0);
  v13 = *(unsigned __int8 *)(v9 + 131);
  if (v13 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v13 & 1, 16, a2, a3);
  swift_beginAccess(v9 + 132, v19, 0, 0);
  v14 = *(unsigned __int8 *)(v9 + 132);
  if (v14 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v14 & 1, 17, a2, a3);
  swift_release(v9);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

Swift::Int sub_10010A614()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample, &qword_10036E8B8, (uint64_t)&unk_1002D7510);
}

uint64_t sub_10010A630@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005DD1C(a1, &qword_100394628, &qword_100394630, (uint64_t)sub_100109D64, a2);
}

uint64_t sub_10010A64C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100109E14(a1, a2, a3);
}

uint64_t sub_10010A660(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10010A124(a1, a2, a3);
}

uint64_t sub_10010A674(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100374EA0, type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample, (uint64_t)&unk_1002D7488);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10010A6C4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394620, (uint64_t)qword_100384318, (uint64_t)sub_1001098C8, a1);
}

uint64_t sub_10010A6E0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F970, type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample, (uint64_t)&unk_1002D7410);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10010A720(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F970, type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample, (uint64_t)&unk_1002D7410);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_10010A770()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100384330);
  sub_10000E6A4(v0, (uint64_t)qword_100384330);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3120;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 0;
  *(_QWORD *)v9 = "RF_UNKNOWN";
  *(_QWORD *)(v9 + 8) = 10;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 1;
  *(_QWORD *)v13 = "RF_X_ARBITRARY_Z_VERTICAL";
  *((_QWORD *)v13 + 1) = 25;
  v13[16] = 2;
  v12();
  v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + 2 * v4) = 2;
  *(_QWORD *)v14 = "RF_X_TRUE_NORTH_Z_VERTICAL";
  *(_QWORD *)(v14 + 8) = 26;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10010A900()
{
  return sub_100008BD0(&qword_100394638, (uint64_t)qword_100384330, (uint64_t)sub_10010A770);
}

uint64_t sub_10010A91C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394638, (uint64_t)qword_100384330, (uint64_t)sub_10010A770, a1);
}

uint64_t sub_10010A938@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394638, (uint64_t)qword_100384330, (uint64_t)sub_10010A770, a1);
}

uint64_t sub_10010A954(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  char v17;
  double *v18;
  int v19;
  uint64_t v20;
  double *v21;
  char v22;
  double *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  BOOL v29;
  uint64_t v31;

  v4 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v10 = (char *)&v31 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (v11 && a1 != a2)
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v13 = *(_QWORD *)(v8 + 72);
      v14 = v11 - 1;
      while (1)
      {
        sub_100003FEC(a1 + v12, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
        sub_100003FEC(a2 + v12, (uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
        v15 = *(int *)(v4 + 20);
        v16 = (double *)&v10[v15];
        v17 = v10[v15 + 8];
        v18 = (double *)&v7[v15];
        v19 = v7[v15 + 8];
        if ((v17 & 1) != 0)
        {
          if (!v19)
            goto LABEL_24;
        }
        else
        {
          if (*v16 != *v18)
            LOBYTE(v19) = 1;
          if ((v19 & 1) != 0)
          {
LABEL_24:
            sub_100004030((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
            sub_100004030((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
            goto LABEL_25;
          }
        }
        v20 = *(int *)(v4 + 24);
        v21 = (double *)&v10[v20];
        v22 = v10[v20 + 8];
        v23 = (double *)&v7[v20];
        v24 = v7[v20 + 8];
        if ((v22 & 1) != 0)
        {
          if (!v24)
            goto LABEL_24;
        }
        else
        {
          if (*v21 != *v23)
            LOBYTE(v24) = 1;
          if ((v24 & 1) != 0)
            goto LABEL_24;
        }
        v25 = type metadata accessor for UnknownStorage(0);
        v26 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
        v27 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v7, v25, v26);
        sub_100004030((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
        sub_100004030((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
        v29 = v14-- != 0;
        if ((v27 & 1) != 0)
        {
          v12 += v13;
          if (v29)
            continue;
        }
        return v27 & 1;
      }
    }
    v27 = 1;
  }
  else
  {
LABEL_25:
    v27 = 0;
  }
  return v27 & 1;
}

uint64_t sub_10010AB4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  double *v28;
  char v29;
  double *v30;
  int v31;
  uint64_t v32;
  double *v33;
  char v34;
  double *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v43;
  _DWORD *v44;
  char v45;
  _DWORD *v46;
  int v47;
  uint64_t v48;
  _DWORD *v49;
  char v50;
  _DWORD *v51;
  int v52;
  uint64_t v53;
  _DWORD *v54;
  char v55;
  _DWORD *v56;
  int v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int *v74;

  v4 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v65 - v9;
  v74 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0);
  v11 = __chkstk_darwin(v74);
  v13 = (uint64_t *)((char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  v16 = (uint64_t *)((char *)&v65 - v15);
  v17 = *(_QWORD *)(a1 + 16);
  if (v17 == *(_QWORD *)(a2 + 16))
  {
    if (v17 && a1 != a2)
    {
      v66 = v5;
      v18 = 0;
      v19 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
      v20 = a1 + v19;
      v21 = a2 + v19;
      v22 = *(_QWORD *)(v14 + 72);
      v69 = v20;
      v70 = v17;
      v67 = v22;
      v68 = v21;
      while (1)
      {
        v71 = v18;
        v23 = v22 * v18;
        sub_100003FEC(v20 + v22 * v18, (uint64_t)v16, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
        sub_100003FEC(v21 + v23, (uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
        v24 = *v13;
        v73 = *v16;
        v25 = *(_QWORD *)(v73 + 16);
        if (v25 != *(_QWORD *)(v24 + 16))
          goto LABEL_54;
        if (v25 && v73 != v24)
        {
          v26 = (*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80);
          v72 = *(_QWORD *)(v66 + 72);
          do
          {
            sub_100003FEC(v73 + v26, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
            sub_100003FEC(v24 + v26, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
            v27 = *(int *)(v4 + 20);
            v28 = (double *)&v10[v27];
            v29 = v10[v27 + 8];
            v30 = (double *)&v8[v27];
            v31 = v8[v27 + 8];
            if ((v29 & 1) != 0)
            {
              if (!v31)
                goto LABEL_53;
            }
            else
            {
              if (*v28 != *v30)
                LOBYTE(v31) = 1;
              if ((v31 & 1) != 0)
              {
LABEL_53:
                sub_100004030((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
                sub_100004030((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
                goto LABEL_54;
              }
            }
            v32 = *(int *)(v4 + 24);
            v33 = (double *)&v10[v32];
            v34 = v10[v32 + 8];
            v35 = (double *)&v8[v32];
            v36 = v8[v32 + 8];
            if ((v34 & 1) != 0)
            {
              if (!v36)
                goto LABEL_53;
            }
            else
            {
              if (*v33 != *v35)
                LOBYTE(v36) = 1;
              if ((v36 & 1) != 0)
                goto LABEL_53;
            }
            v37 = type metadata accessor for UnknownStorage(0);
            v38 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
            LOBYTE(v37) = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v37, v38);
            sub_100004030((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
            sub_100004030((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
            if ((v37 & 1) == 0)
              goto LABEL_54;
            v26 += v72;
            --v25;
          }
          while (v25);
        }
        v39 = v74[6];
        v40 = *((unsigned __int8 *)v16 + v39);
        v41 = *((unsigned __int8 *)v13 + v39);
        if (v40 == 4)
        {
          if (v41 != 4)
            goto LABEL_54;
        }
        else if (v41 == 4 || v40 != v41)
        {
          goto LABEL_54;
        }
        v43 = v74[7];
        v44 = (_DWORD *)((char *)v16 + v43);
        v45 = *((_BYTE *)v16 + v43 + 4);
        v46 = (_DWORD *)((char *)v13 + v43);
        v47 = *((unsigned __int8 *)v13 + v43 + 4);
        if ((v45 & 1) != 0)
        {
          if (!v47)
            goto LABEL_54;
        }
        else
        {
          if (*v44 != *v46)
            LOBYTE(v47) = 1;
          if ((v47 & 1) != 0)
          {
LABEL_54:
            sub_100004030((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
            sub_100004030((uint64_t)v16, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
            goto LABEL_55;
          }
        }
        v48 = v74[8];
        v49 = (_DWORD *)((char *)v16 + v48);
        v50 = *((_BYTE *)v16 + v48 + 4);
        v51 = (_DWORD *)((char *)v13 + v48);
        v52 = *((unsigned __int8 *)v13 + v48 + 4);
        if ((v50 & 1) != 0)
        {
          if (!v52)
            goto LABEL_54;
        }
        else
        {
          if (*v49 != *v51)
            LOBYTE(v52) = 1;
          if ((v52 & 1) != 0)
            goto LABEL_54;
        }
        v53 = v74[9];
        v54 = (_DWORD *)((char *)v16 + v53);
        v55 = *((_BYTE *)v16 + v53 + 4);
        v56 = (_DWORD *)((char *)v13 + v53);
        v57 = *((unsigned __int8 *)v13 + v53 + 4);
        if ((v55 & 1) != 0)
        {
          if (!v57)
            goto LABEL_54;
        }
        else
        {
          if (*v54 != *v56)
            LOBYTE(v57) = 1;
          if ((v57 & 1) != 0)
            goto LABEL_54;
        }
        v58 = v74[5];
        v59 = (char *)v16 + v58;
        v60 = (char *)v13 + v58;
        v61 = type metadata accessor for UnknownStorage(0);
        v62 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
        v63 = dispatch thunk of static Equatable.== infix(_:_:)(v59, v60, v61, v62);
        sub_100004030((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
        sub_100004030((uint64_t)v16, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
        if ((v63 & 1) != 0)
        {
          v18 = v71 + 1;
          v21 = v68;
          v20 = v69;
          v22 = v67;
          if (v71 + 1 != v70)
            continue;
        }
        return v63 & 1;
      }
    }
    v63 = 1;
  }
  else
  {
LABEL_55:
    v63 = 0;
  }
  return v63 & 1;
}

uint64_t sub_10010AFCC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t v25;

  v24 = a4;
  v25 = a3(0);
  v7 = __chkstk_darwin(v25);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v12 = (char *)&v22 - v11;
  v13 = *(_QWORD *)(a1 + 16);
  if (v13 == *(_QWORD *)(a2 + 16))
  {
    if (!v13 || a1 == a2)
      return 1;
    v14 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v23 = *(_QWORD *)(v10 + 72);
    while (1)
    {
      sub_100003FEC(a1 + v14, (uint64_t)v12, a3);
      sub_100003FEC(a2 + v14, (uint64_t)v9, a3);
      v15 = *(int *)(v25 + 20);
      v16 = *(_QWORD *)&v12[v15];
      v17 = *(_QWORD *)&v9[v15];
      if (v16 != v17)
      {
        swift_retain(*(_QWORD *)&v12[v15]);
        swift_retain(v17);
        v18 = v24(v16, v17);
        swift_release(v17);
        swift_release(v16);
        if ((v18 & 1) == 0)
          break;
      }
      v19 = type metadata accessor for UnknownStorage(0);
      v20 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
      if ((dispatch thunk of static Equatable.== infix(_:_:)(v12, v9, v19, v20) & 1) == 0)
        break;
      sub_100004030((uint64_t)v9, a3);
      sub_100004030((uint64_t)v12, a3);
      v14 += v23;
      if (!--v13)
        return 1;
    }
    sub_100004030((uint64_t)v9, a3);
    sub_100004030((uint64_t)v12, a3);
  }
  return 0;
}

uint64_t sub_10010B19C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  BOOL v19;
  uint64_t v21;

  v6 = a3(0);
  v7 = __chkstk_darwin(v6);
  v9 = (uint64_t (*)(_QWORD))((char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  v12 = (char *)&v21 - v11;
  v13 = *(_QWORD *)(a1 + 16);
  if (v13 == *(_QWORD *)(a2 + 16))
  {
    if (!v13 || a1 == a2)
    {
      v17 = 1;
    }
    else
    {
      v14 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
      v15 = *(_QWORD *)(v10 + 72);
      v16 = v13 - 1;
      do
      {
        sub_100003FEC(a1 + v14, (uint64_t)v12, a3);
        sub_100003FEC(a2 + v14, (uint64_t)v9, a3);
        v17 = sub_10011C9CC((uint64_t)v12, v9, a3);
        sub_100004030((uint64_t)v9, a3);
        sub_100004030((uint64_t)v12, a3);
        v19 = v16-- != 0;
        if ((v17 & 1) == 0)
          break;
        v14 += v15;
      }
      while (v19);
    }
  }
  else
  {
    v17 = 0;
  }
  return v17 & 1;
}

uint64_t sub_10010B2D8(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(char *, char *))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  BOOL v21;
  uint64_t v23;

  v8 = a3(0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v14 = (char *)&v23 - v13;
  v15 = *(_QWORD *)(a1 + 16);
  if (v15 == *(_QWORD *)(a2 + 16))
  {
    if (!v15 || a1 == a2)
    {
      v19 = 1;
    }
    else
    {
      v16 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
      v17 = *(_QWORD *)(v12 + 72);
      v18 = v15 - 1;
      do
      {
        sub_100003FEC(a1 + v16, (uint64_t)v14, a3);
        sub_100003FEC(a2 + v16, (uint64_t)v11, a3);
        v19 = a4(v14, v11);
        sub_100004030((uint64_t)v11, a3);
        sub_100004030((uint64_t)v14, a3);
        v21 = v18-- != 0;
        if ((v19 & 1) == 0)
          break;
        v16 += v17;
      }
      while (v21);
    }
  }
  else
  {
    v19 = 0;
  }
  return v19 & 1;
}

uint64_t sub_10010B414(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t result;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  double *v48;
  char v49;
  double *v50;
  int v51;
  uint64_t v52;
  double *v53;
  char v54;
  double *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double *v60;
  char v61;
  double *v62;
  int v63;
  uint64_t v64;
  double *v65;
  char v66;
  double *v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  double *v73;
  char v74;
  double *v75;
  int v76;
  uint64_t v77;
  double *v78;
  char v79;
  double *v80;
  int v81;
  uint64_t v82;
  double *v83;
  char v84;
  double *v85;
  int v86;
  uint64_t v87;
  double *v88;
  char v89;
  double *v90;
  int v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char v99;
  char *v100;
  int v101;
  uint64_t v102;
  char *v103;
  char v104;
  char *v105;
  int v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  char *v128;
  int *v129;
  uint64_t v130;
  uint64_t v131;
  int *v132;

  v131 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
  v4 = *(_QWORD *)(v131 - 8);
  v5 = __chkstk_darwin(v131);
  v7 = (char *)&v114 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v114 - v8;
  v132 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0);
  v10 = *((_QWORD *)v132 - 1);
  v11 = __chkstk_darwin(v132);
  v13 = (char *)&v114 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v114 - v14;
  v16 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v114 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v17);
  v23 = (char *)&v114 - v22;
  v24 = *(_QWORD *)(a1 + 16);
  if (v24 != *(_QWORD *)(a2 + 16))
  {
LABEL_90:
    v113 = 0;
    return v113 & 1;
  }
  if (!v24 || a1 == a2)
  {
    v113 = 1;
    return v113 & 1;
  }
  v128 = (char *)&v114 - v22;
  v129 = (int *)v20;
  v114 = v4;
  v25 = 0;
  v26 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  v27 = a1 + v26;
  v28 = a2 + v26;
  v29 = *(_QWORD *)(v21 + 72);
  v121 = v28;
  v122 = v27;
  v123 = v24;
  v120 = v29;
  while (1)
  {
    v127 = v25;
    v30 = v29 * v25;
    sub_100003FEC(v27 + v29 * v25, (uint64_t)v23, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
    sub_100003FEC(v28 + v30, (uint64_t)v19, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
    v31 = *(_QWORD *)v23;
    v32 = *(_QWORD *)v19;
    v33 = *(_QWORD *)(*(_QWORD *)v23 + 16);
    v34 = v129;
    if (v33 != *(_QWORD *)(*(_QWORD *)v19 + 16))
    {
LABEL_89:
      sub_100004030((uint64_t)v19, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
      sub_100004030((uint64_t)v23, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
      goto LABEL_90;
    }
    if (v33 && v31 != v32)
      break;
LABEL_71:
    v97 = v34[6];
    v98 = &v23[v97];
    v99 = v23[v97 + 8];
    v100 = &v19[v97];
    v101 = v19[v97 + 8];
    if ((v99 & 1) != 0)
    {
      if (!v101)
        goto LABEL_89;
    }
    else
    {
      if (*(_QWORD *)v98 != *(_QWORD *)v100)
        LOBYTE(v101) = 1;
      if ((v101 & 1) != 0)
        goto LABEL_89;
    }
    v102 = v34[7];
    v103 = &v23[v102];
    v104 = v23[v102 + 8];
    v105 = &v19[v102];
    v106 = v19[v102 + 8];
    if ((v104 & 1) != 0)
    {
      if (!v106)
        goto LABEL_89;
    }
    else
    {
      if (*(_QWORD *)v103 != *(_QWORD *)v105)
        LOBYTE(v106) = 1;
      if ((v106 & 1) != 0)
        goto LABEL_89;
    }
    v107 = v34[5];
    v108 = &v23[v107];
    v109 = &v19[v107];
    v110 = type metadata accessor for UnknownStorage(0);
    v111 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v112 = v109;
    v23 = v128;
    v113 = dispatch thunk of static Equatable.== infix(_:_:)(v108, v112, v110, v111);
    sub_100004030((uint64_t)v19, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
    sub_100004030((uint64_t)v23, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
    if ((v113 & 1) != 0)
    {
      v25 = v127 + 1;
      v27 = v122;
      v29 = v120;
      v28 = v121;
      if (v127 + 1 != v123)
        continue;
    }
    return v113 & 1;
  }
  v35 = 0;
  v36 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v37 = v31 + v36;
  v124 = v19;
  v125 = v32 + v36;
  v38 = *(_QWORD *)(v10 + 72);
  v118 = v32;
  v119 = v10;
  v116 = v37;
  v117 = v33;
  v115 = v38;
  while (1)
  {
    v39 = v35;
    v40 = v38 * v35;
    result = sub_100003FEC(v37 + v38 * v35, (uint64_t)v15, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
    v42 = *(_QWORD *)(v32 + 16);
    v126 = v39;
    if (v39 >= v42)
      break;
    sub_100003FEC(v125 + v40, (uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
    v43 = *(_QWORD *)v15;
    v44 = *(_QWORD *)v13;
    v45 = *(_QWORD *)(*(_QWORD *)v15 + 16);
    if (v45 != *(_QWORD *)(*(_QWORD *)v13 + 16))
      goto LABEL_88;
    if (v45 && v43 != v44)
    {
      v46 = (*(unsigned __int8 *)(v114 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v114 + 80);
      v130 = *(_QWORD *)(v114 + 72);
      do
      {
        sub_100003FEC(v43 + v46, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
        sub_100003FEC(v44 + v46, (uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
        v47 = *(int *)(v131 + 20);
        v48 = (double *)&v9[v47];
        v49 = v9[v47 + 8];
        v50 = (double *)&v7[v47];
        v51 = v7[v47 + 8];
        if ((v49 & 1) != 0)
        {
          if (!v51)
            goto LABEL_87;
        }
        else
        {
          if (*v48 != *v50)
            LOBYTE(v51) = 1;
          if ((v51 & 1) != 0)
          {
LABEL_87:
            sub_100004030((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
            sub_100004030((uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
            goto LABEL_88;
          }
        }
        v52 = *(int *)(v131 + 24);
        v53 = (double *)&v9[v52];
        v54 = v9[v52 + 8];
        v55 = (double *)&v7[v52];
        v56 = v7[v52 + 8];
        if ((v54 & 1) != 0)
        {
          if (!v56)
            goto LABEL_87;
        }
        else
        {
          if (*v53 != *v55)
            LOBYTE(v56) = 1;
          if ((v56 & 1) != 0)
            goto LABEL_87;
        }
        v57 = type metadata accessor for UnknownStorage(0);
        v58 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
        LOBYTE(v57) = dispatch thunk of static Equatable.== infix(_:_:)(v9, v7, v57, v58);
        sub_100004030((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
        sub_100004030((uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
        if ((v57 & 1) == 0)
          goto LABEL_88;
        v46 += v130;
        --v45;
      }
      while (v45);
    }
    v59 = v132[6];
    v60 = (double *)&v15[v59];
    v61 = v15[v59 + 8];
    v62 = (double *)&v13[v59];
    v63 = v13[v59 + 8];
    if ((v61 & 1) != 0)
    {
      if (!v63)
        goto LABEL_88;
    }
    else
    {
      if (*v60 != *v62)
        LOBYTE(v63) = 1;
      if ((v63 & 1) != 0)
      {
LABEL_88:
        sub_100004030((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
        sub_100004030((uint64_t)v15, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
        v19 = v124;
        v23 = v128;
        goto LABEL_89;
      }
    }
    v64 = v132[7];
    v65 = (double *)&v15[v64];
    v66 = v15[v64 + 8];
    v67 = (double *)&v13[v64];
    v68 = v13[v64 + 8];
    if ((v66 & 1) != 0)
    {
      if (!v68)
        goto LABEL_88;
    }
    else
    {
      if (*v65 != *v67)
        LOBYTE(v68) = 1;
      if ((v68 & 1) != 0)
        goto LABEL_88;
    }
    v69 = v132[8];
    v70 = v15[v69];
    v71 = v13[v69];
    if (v70 == 2)
    {
      if (v71 != 2)
        goto LABEL_88;
    }
    else if (v71 == 2 || ((((v71 & 1) == 0) ^ v70) & 1) == 0)
    {
      goto LABEL_88;
    }
    v72 = v132[9];
    v73 = (double *)&v15[v72];
    v74 = v15[v72 + 8];
    v75 = (double *)&v13[v72];
    v76 = v13[v72 + 8];
    if ((v74 & 1) != 0)
    {
      if (!v76)
        goto LABEL_88;
    }
    else
    {
      if (*v73 != *v75)
        LOBYTE(v76) = 1;
      if ((v76 & 1) != 0)
        goto LABEL_88;
    }
    v77 = v132[10];
    v78 = (double *)&v15[v77];
    v79 = v15[v77 + 8];
    v80 = (double *)&v13[v77];
    v81 = v13[v77 + 8];
    if ((v79 & 1) != 0)
    {
      if (!v81)
        goto LABEL_88;
    }
    else
    {
      if (*v78 != *v80)
        LOBYTE(v81) = 1;
      if ((v81 & 1) != 0)
        goto LABEL_88;
    }
    v82 = v132[11];
    v83 = (double *)&v15[v82];
    v84 = v15[v82 + 8];
    v85 = (double *)&v13[v82];
    v86 = v13[v82 + 8];
    if ((v84 & 1) != 0)
    {
      if (!v86)
        goto LABEL_88;
    }
    else
    {
      if (*v83 != *v85)
        LOBYTE(v86) = 1;
      if ((v86 & 1) != 0)
        goto LABEL_88;
    }
    v87 = v132[12];
    v88 = (double *)&v15[v87];
    v89 = v15[v87 + 8];
    v90 = (double *)&v13[v87];
    v91 = v13[v87 + 8];
    if ((v89 & 1) != 0)
    {
      if (!v91)
        goto LABEL_88;
    }
    else
    {
      if (*v88 != *v90)
        LOBYTE(v91) = 1;
      if ((v91 & 1) != 0)
        goto LABEL_88;
    }
    v92 = v132[5];
    v93 = &v15[v92];
    v94 = &v13[v92];
    v95 = type metadata accessor for UnknownStorage(0);
    v96 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    LOBYTE(v95) = dispatch thunk of static Equatable.== infix(_:_:)(v93, v94, v95, v96);
    sub_100004030((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
    sub_100004030((uint64_t)v15, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
    v32 = v118;
    v10 = v119;
    v19 = v124;
    v23 = v128;
    v34 = v129;
    if ((v95 & 1) == 0)
      goto LABEL_89;
    v35 = v126 + 1;
    v38 = v115;
    v37 = v116;
    if (v126 + 1 == v117)
      goto LABEL_71;
  }
  __break(1u);
  return result;
}

BOOL sub_10010BB64(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v12;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (a1[4] != a2[4])
    return 0;
  if (v2 == 1)
    return 1;
  v4 = v2 - 2;
  v5 = a1 + 5;
  v6 = a2 + 5;
  do
  {
    v8 = *v5++;
    v7 = v8;
    v10 = *v6++;
    v9 = v10;
    v12 = v4-- != 0;
    result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

unint64_t sub_10010BBD8(unint64_t result)
{
  if (result >= 0xE)
    return 14;
  return result;
}

uint64_t sub_10010BBE8(uint64_t a1)
{
  uint64_t result;

  if (a1 <= 11804)
  {
    if (a1 <= 2009)
    {
      result = 0;
      switch(a1)
      {
        case 0:
          return result;
        case 1:
          result = 1;
          break;
        case 2:
          result = 2;
          break;
        case 3:
          result = 3;
          break;
        case 4:
          result = 4;
          break;
        case 5:
          result = 5;
          break;
        case 6:
          result = 6;
          break;
        case 7:
          result = 7;
          break;
        case 8:
          result = 8;
          break;
        case 9:
          result = 9;
          break;
        case 10:
          result = 10;
          break;
        case 11:
          result = 11;
          break;
        case 41:
          result = 12;
          break;
        case 52:
          result = 13;
          break;
        case 56:
          result = 14;
          break;
        case 61:
          result = 15;
          break;
        case 62:
          result = 16;
          break;
        case 63:
          result = 39;
          break;
        case 64:
          result = 46;
          break;
        case 65:
          result = 47;
          break;
        case 66:
          result = 60;
          break;
        case 100:
          result = 17;
          break;
        default:
          return 72;
      }
      return result;
    }
    if (a1 <= 2149)
    {
      switch(a1)
      {
        case 2010:
          result = 18;
          break;
        case 2020:
          result = 19;
          break;
        case 2022:
          result = 35;
          break;
        case 2024:
          result = 37;
          break;
        case 2048:
          result = 20;
          break;
        case 2061:
          result = 21;
          break;
        case 2065:
          result = 22;
          break;
        case 2068:
          result = 69;
          break;
        case 2071:
          result = 23;
          break;
        case 2101:
          result = 36;
          break;
        case 2105:
          result = 24;
          break;
        default:
          return 72;
      }
      return result;
    }
    switch(a1)
    {
      case 2150:
        return 25;
      case 3015:
        return 26;
      case 3016:
        return 71;
    }
    return 72;
  }
  if (a1 <= 15651)
  {
    if (a1 > 15254)
    {
      if (a1 <= 15459)
      {
        if (a1 > 15349)
        {
          if (a1 == 15350)
            return 55;
          if (a1 == 15360)
            return 54;
        }
        else
        {
          if (a1 == 15255)
            return 29;
          if (a1 == 15330)
            return 63;
        }
      }
      else if (a1 <= 15591)
      {
        if (a1 == 15460)
          return 51;
        if (a1 == 15562)
          return 50;
      }
      else
      {
        switch(a1)
        {
          case 15592:
            return 52;
          case 15610:
            return 45;
          case 15620:
            return 65;
        }
      }
    }
    else if (a1 <= 15099)
    {
      if (a1 > 15029)
      {
        if (a1 == 15030)
          return 58;
        if (a1 == 15055)
          return 56;
      }
      else
      {
        if (a1 == 11805)
          return 27;
        if (a1 == 12150)
          return 28;
      }
    }
    else if (a1 <= 15149)
    {
      if (a1 == 15100)
        return 70;
      if (a1 == 15110)
        return 40;
    }
    else
    {
      switch(a1)
      {
        case 15150:
          return 67;
        case 15230:
          return 48;
        case 15240:
          return 49;
      }
    }
    return 72;
  }
  if (a1 > 18224)
  {
    if (a1 <= 19149)
    {
      if (a1 > 19029)
      {
        if (a1 == 19030)
          return 53;
        if (a1 == 19090)
          return 42;
      }
      else
      {
        if (a1 == 18225)
          return 44;
        if (a1 == 18240)
          return 32;
      }
    }
    else if (a1 <= 90602)
    {
      if (a1 == 19150)
        return 34;
      if (a1 == 19160)
        return 43;
    }
    else
    {
      switch(a1)
      {
        case 90603:
          return 33;
        case 515621:
          return 66;
        case 515652:
          return 59;
      }
    }
    return 72;
  }
  if (a1 > 15732)
  {
    if (a1 > 18069)
    {
      if (a1 == 18070)
        return 41;
      if (a1 == 18200)
        return 31;
    }
    else
    {
      if (a1 == 15733)
        return 64;
      if (a1 == 17150)
        return 30;
    }
    return 72;
  }
  switch(a1)
  {
    case 15652:
      result = 62;
      break;
    case 15653:
    case 15654:
    case 15655:
    case 15656:
    case 15657:
    case 15658:
    case 15659:
    case 15661:
    case 15662:
    case 15663:
    case 15664:
    case 15665:
    case 15666:
    case 15667:
    case 15668:
    case 15669:
    case 15671:
    case 15672:
    case 15673:
    case 15674:
      return 72;
    case 15660:
      result = 68;
      break;
    case 15670:
      result = 38;
      break;
    case 15675:
      result = 57;
      break;
    default:
      if (a1 != 15710)
        return 72;
      result = 61;
      break;
  }
  return result;
}

uint64_t sub_10010C108(uint64_t a1)
{
  uint64_t result;

  result = 0;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = 1;
      break;
    case 2:
      result = 2;
      break;
    case 3:
      result = 3;
      break;
    default:
      if (a1 == 1001)
        result = 4;
      else
        result = 5;
      break;
  }
  return result;
}

unint64_t sub_10010C15C(unint64_t result)
{
  if (result >= 0xF)
    return 15;
  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B01D0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_AccelSample(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B01E0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Accel(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B01F0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_Accel);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GyroSample(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0200, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GyroSample);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Gyro(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0210, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_Gyro);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0220, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_BaroSample);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Baro(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0230, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_Baro);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0240, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0250, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_DaemonLocation);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0740, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass);
}

uint64_t sub_10010C234(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  _BYTE *v62;
  _BYTE *v63;
  _BYTE *v64;
  _BYTE *v65;
  _BYTE *v66;
  _BYTE *v67;
  _BYTE *v68;
  uint64_t *v69;
  uint64_t v70;
  _BYTE *v71;
  _BYTE *v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  _BYTE *v89;
  _BYTE *v90;
  _BYTE *v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _BYTE v108[24];
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _BYTE v128[24];
  _BYTE v129[24];
  _BYTE v130[24];
  _BYTE v131[24];
  _BYTE v132[24];
  _BYTE v133[24];
  _BYTE v134[32];

  v3 = sub_1000039AC(&qword_10036E460);
  __chkstk_darwin(v3);
  v76 = (uint64_t)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)(v1 + 16) = 4;
  v5 = v1
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  v75 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  v7 = *(void (**)(void))(*(_QWORD *)(v6 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v7)(v5, 1, 1, v6);
  v8 = v1
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy;
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude;
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy;
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed;
  v77 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed;
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy;
  v78 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy;
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  v13 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course;
  v79 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course;
  *(_QWORD *)v13 = 0;
  *(_BYTE *)(v13 + 8) = 1;
  v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy;
  v80 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy;
  *(_QWORD *)v14 = 0;
  *(_BYTE *)(v14 + 8) = 1;
  v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  v81 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  *(_QWORD *)v15 = 0;
  *(_BYTE *)(v15 + 8) = 1;
  v16 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence;
  v82 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence;
  *(_DWORD *)v16 = 0;
  *(_BYTE *)(v16 + 4) = 1;
  v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan;
  v83 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan;
  *(_QWORD *)v17 = 0;
  *(_BYTE *)(v17 + 8) = 1;
  v18 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  *v18 = 14;
  v84 = v18;
  v85 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate;
  v7();
  v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse;
  v86 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse;
  *(_QWORD *)v19 = 0;
  *(_BYTE *)(v19 + 8) = 1;
  v20 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor;
  v87 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor;
  *(_DWORD *)v20 = 0;
  *(_BYTE *)(v20 + 4) = 1;
  v88 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity) = 5;
  v89 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame) = 3;
  v90 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame) = 3;
  v92 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType) = 8;
  v21 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude;
  *(_QWORD *)v21 = 0;
  *(_BYTE *)(v21 + 8) = 1;
  v91 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController) = 2;
  swift_beginAccess(a1 + 16, v134, 0, 0);
  v22 = *(_BYTE *)(a1 + 16);
  swift_beginAccess(v1 + 16, v133, 1, 0);
  *(_BYTE *)(v1 + 16) = v22;
  v23 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate, v132, 0, 0);
  v24 = v76;
  sub_10000E660(v23, v76, &qword_10036E460);
  v25 = v75;
  swift_beginAccess(v75, v131, 33, 0);
  sub_10000E574(v24, v25, &qword_10036E460);
  swift_endAccess(v131);
  v26 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy, v131, 0, 0);
  v27 = *v26;
  LOBYTE(v26) = *((_BYTE *)v26 + 8);
  swift_beginAccess(v8, v130, 1, 0);
  *(_QWORD *)v8 = v27;
  *(_BYTE *)(v8 + 8) = (_BYTE)v26;
  v28 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude, v129, 0, 0);
  v29 = *v28;
  LOBYTE(v28) = *((_BYTE *)v28 + 8);
  swift_beginAccess(v9, v128, 1, 0);
  *(_QWORD *)v9 = v29;
  *(_BYTE *)(v9 + 8) = (_BYTE)v28;
  v30 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy, &v127, 0, 0);
  v31 = *v30;
  LOBYTE(v30) = *((_BYTE *)v30 + 8);
  swift_beginAccess(v10, &v126, 1, 0);
  *(_QWORD *)v10 = v31;
  *(_BYTE *)(v10 + 8) = (_BYTE)v30;
  v32 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed, &v125, 0, 0);
  v33 = *v32;
  LOBYTE(v32) = *((_BYTE *)v32 + 8);
  v34 = v77;
  swift_beginAccess(v77, &v124, 1, 0);
  *(_QWORD *)v34 = v33;
  *(_BYTE *)(v34 + 8) = (_BYTE)v32;
  v35 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy, &v123, 0, 0);
  v36 = *v35;
  LOBYTE(v35) = *((_BYTE *)v35 + 8);
  v37 = v78;
  swift_beginAccess(v78, &v122, 1, 0);
  *(_QWORD *)v37 = v36;
  *(_BYTE *)(v37 + 8) = (_BYTE)v35;
  v38 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course, &v121, 0, 0);
  v39 = *v38;
  LOBYTE(v38) = *((_BYTE *)v38 + 8);
  v40 = v79;
  swift_beginAccess(v79, &v120, 1, 0);
  *(_QWORD *)v40 = v39;
  *(_BYTE *)(v40 + 8) = (_BYTE)v38;
  v41 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy, &v119, 0, 0);
  v42 = *v41;
  LOBYTE(v41) = *((_BYTE *)v41 + 8);
  v43 = v80;
  swift_beginAccess(v80, &v118, 1, 0);
  *(_QWORD *)v43 = v42;
  *(_BYTE *)(v43 + 8) = (_BYTE)v41;
  v44 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp, &v117, 0, 0);
  v45 = *v44;
  LOBYTE(v44) = *((_BYTE *)v44 + 8);
  v46 = v81;
  swift_beginAccess(v81, &v116, 1, 0);
  *(_QWORD *)v46 = v45;
  *(_BYTE *)(v46 + 8) = (_BYTE)v44;
  v47 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence, &v115, 0, 0);
  LODWORD(v45) = *(_DWORD *)v47;
  LOBYTE(v47) = *(_BYTE *)(v47 + 4);
  v48 = v82;
  swift_beginAccess(v82, &v114, 1, 0);
  *(_DWORD *)v48 = v45;
  *(_BYTE *)(v48 + 4) = v47;
  v49 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan, &v113, 0, 0);
  v50 = *v49;
  LOBYTE(v49) = *((_BYTE *)v49 + 8);
  v51 = v83;
  swift_beginAccess(v83, &v112, 1, 0);
  *(_QWORD *)v51 = v50;
  *(_BYTE *)(v51 + 8) = (_BYTE)v49;
  v52 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type, &v111, 0, 0);
  LOBYTE(v52) = *v52;
  v53 = v84;
  swift_beginAccess(v84, &v110, 1, 0);
  *v53 = (_BYTE)v52;
  v54 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate, &v109, 0, 0);
  sub_10000E660(v54, v24, &qword_10036E460);
  v55 = v85;
  swift_beginAccess(v85, v108, 33, 0);
  sub_10000E574(v24, v55, &qword_10036E460);
  swift_endAccess(v108);
  v56 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse, v108, 0, 0);
  v57 = *v56;
  LOBYTE(v56) = *((_BYTE *)v56 + 8);
  v58 = v86;
  swift_beginAccess(v86, &v107, 1, 0);
  *(_QWORD *)v58 = v57;
  *(_BYTE *)(v58 + 8) = (_BYTE)v56;
  v59 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor, &v106, 0, 0);
  LODWORD(v57) = *(_DWORD *)v59;
  LOBYTE(v59) = *(_BYTE *)(v59 + 4);
  v60 = v87;
  swift_beginAccess(v87, &v105, 1, 0);
  *(_DWORD *)v60 = v57;
  *(_BYTE *)(v60 + 4) = v59;
  v61 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity, &v104, 0, 0);
  LOBYTE(v61) = *v61;
  v62 = v88;
  swift_beginAccess(v88, &v103, 1, 0);
  *v62 = (_BYTE)v61;
  v63 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame, &v102, 0, 0);
  LOBYTE(v63) = *v63;
  v64 = v89;
  swift_beginAccess(v89, &v101, 1, 0);
  *v64 = (_BYTE)v63;
  v65 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame, &v100, 0, 0);
  LOBYTE(v65) = *v65;
  v66 = v90;
  swift_beginAccess(v90, &v99, 1, 0);
  *v66 = (_BYTE)v65;
  v67 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType, &v98, 0, 0);
  LOBYTE(v67) = *v67;
  v68 = v92;
  swift_beginAccess(v92, &v97, 1, 0);
  *v68 = (_BYTE)v67;
  v69 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude, &v96, 0, 0);
  v70 = *v69;
  LOBYTE(v69) = *((_BYTE *)v69 + 8);
  swift_beginAccess(v21, &v95, 1, 0);
  *(_QWORD *)v21 = v70;
  *(_BYTE *)(v21 + 8) = (_BYTE)v69;
  v71 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
  swift_beginAccess(v71, &v94, 0, 0);
  LOBYTE(v71) = *v71;
  v72 = v91;
  swift_beginAccess(v91, &v93, 1, 0);
  *v72 = (_BYTE)v71;
  return v1;
}

uint64_t sub_10010CAF0(uint64_t result)
{
  if (result <= 1)
  {
    if ((unint64_t)result <= 1)
      return result;
    return 4;
  }
  if (result != 2)
  {
    if (result == 0xFFFF)
      return 3;
    return 4;
  }
  return result;
}

uint64_t sub_10010CB2C(uint64_t a1)
{
  if (a1 <= 24)
  {
    if (a1 == -1)
      return 0;
    if (!a1)
      return 1;
  }
  else
  {
    switch(a1)
    {
      case 25:
        return 2;
      case 50:
        return 3;
      case 75:
        return 4;
    }
  }
  return 5;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0260, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0270, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0280, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0290, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0750, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass);
}

uint64_t sub_10010CBEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  _QWORD *v50;
  uint64_t v51;
  char v52;
  _QWORD *v53;
  uint64_t v54;
  char v55;
  _QWORD *v56;
  uint64_t v57;
  char v58;
  _QWORD *v59;
  char v60;
  _DWORD *v61;
  char v62;
  _DWORD *v63;
  char v64;
  _DWORD *v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE *v94;
  _BYTE *v95;
  _BYTE *v96;
  _BYTE *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  _BYTE *v119;
  _BYTE *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  _BYTE *v127;
  _BYTE *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  _BYTE *v134;
  _BYTE *v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  _BYTE *v151;
  _BYTE *v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  _BYTE *v163;
  _BYTE *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _BYTE *v168;
  _BYTE *v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  _BYTE *v176;
  _BYTE *v177;
  _BYTE *v178;
  _BYTE *v179;
  _BYTE *v180;
  _BYTE *v181;
  _BYTE *v182;
  _BYTE *v183;
  _QWORD *v185;
  _QWORD *v186;
  _QWORD *v187;
  _QWORD *v188;
  _DWORD *v189;
  _DWORD *v190;
  _DWORD *v191;
  _BYTE *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _BYTE *v199;
  uint64_t v200;
  _BYTE *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  _BYTE *v207;
  _BYTE *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  _BYTE *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _BYTE *v220;
  uint64_t v221;
  uint64_t v222;
  _BYTE *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  _BYTE *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t *v232;
  _BYTE *v233;
  uint64_t v234;
  _BYTE *v235;
  uint64_t v236;
  uint64_t v237;
  _BYTE *v238;
  _BYTE *v239;
  _BYTE *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  _BYTE v257[24];
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  _BYTE v282[24];
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  _BYTE v303[24];
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  _BYTE v312[24];
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  _BYTE v317[24];
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  _BYTE v326[24];
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  _BYTE v341[24];
  _BYTE v342[24];
  _BYTE v343[24];
  _BYTE v344[24];
  _BYTE v345[24];
  _BYTE v346[24];
  _BYTE v347[32];

  v3 = sub_1000039AC(&qword_10036E478);
  __chkstk_darwin(v3);
  v241 = (uint64_t)&v185 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000039AC(&qword_10036E470);
  __chkstk_darwin(v5);
  v219 = (uint64_t)&v185 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000039AC(&qword_10036E468);
  __chkstk_darwin(v7);
  v205 = (uint64_t)&v185 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000039AC(&qword_10036E460);
  __chkstk_darwin(v9);
  v196 = (uint64_t)&v185 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 1;
  *(_QWORD *)(v1 + 32) = 0;
  v185 = (_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 48) = 0;
  v186 = (_QWORD *)(v1 + 48);
  *(_BYTE *)(v1 + 40) = 1;
  *(_BYTE *)(v1 + 56) = 1;
  *(_QWORD *)(v1 + 64) = 0;
  v187 = (_QWORD *)(v1 + 64);
  *(_BYTE *)(v1 + 72) = 1;
  *(_QWORD *)(v1 + 80) = 0;
  v188 = (_QWORD *)(v1 + 80);
  *(_DWORD *)(v1 + 92) = 0;
  v189 = (_DWORD *)(v1 + 92);
  *(_BYTE *)(v1 + 88) = 1;
  *(_BYTE *)(v1 + 96) = 1;
  *(_DWORD *)(v1 + 100) = 0;
  v190 = (_DWORD *)(v1 + 100);
  *(_DWORD *)(v1 + 108) = 0;
  v191 = (_DWORD *)(v1 + 108);
  *(_WORD *)(v1 + 113) = 1026;
  *(_BYTE *)(v1 + 104) = 1;
  v192 = (_BYTE *)(v1 + 113);
  v193 = v1 + 114;
  v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate;
  v194 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate;
  *(_BYTE *)(v1 + 112) = 1;
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  v13 = *(void (**)(void))(*(_QWORD *)(v12 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v13)(v11, 1, 1, v12);
  v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse;
  v195 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse;
  *(_QWORD *)v14 = 0;
  *(_BYTE *)(v14 + 8) = 1;
  v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay;
  v197 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay;
  *(_DWORD *)v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  v16 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass;
  v198 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass;
  *(_DWORD *)v16 = 0;
  *(_BYTE *)(v16 + 4) = 1;
  v199 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted) = 2;
  v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
  v200 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
  v18 = type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  v201 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel) = 4;
  v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation;
  v202 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation;
  *(_DWORD *)v19 = 0;
  *(_BYTE *)(v19 + 4) = 1;
  v203 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate;
  v13();
  v20 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy;
  v204 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy;
  *(_QWORD *)v20 = 0;
  *(_BYTE *)(v20 + 8) = 1;
  v21 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime;
  v206 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime;
  *(_QWORD *)v21 = 0;
  *(_BYTE *)(v21 + 8) = 1;
  v207 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice) = 3;
  v208 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates) = 2;
  v22 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
  v209 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
  v23 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 1, 1, v23);
  v24 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope;
  v210 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope;
  *(_QWORD *)v24 = 0;
  *(_BYTE *)(v24 + 8) = 1;
  v25 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope;
  v211 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope;
  *(_QWORD *)v25 = 0;
  *(_BYTE *)(v25 + 8) = 1;
  v26 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude;
  v212 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude;
  *(_QWORD *)v26 = 0;
  *(_BYTE *)(v26 + 8) = 1;
  v27 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty;
  v213 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty;
  *(_QWORD *)v27 = 0;
  *(_BYTE *)(v27 + 8) = 1;
  v28 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude;
  v214 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude;
  *(_QWORD *)v28 = 0;
  *(_BYTE *)(v28 + 8) = 1;
  v29 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty;
  v215 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty;
  *(_QWORD *)v29 = 0;
  *(_BYTE *)(v29 + 8) = 1;
  v216 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed) = 2;
  v30 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy;
  v217 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy;
  *(_QWORD *)v30 = 0;
  *(_BYTE *)(v30 + 8) = 1;
  v31 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy;
  v218 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy;
  *(_QWORD *)v31 = 0;
  *(_BYTE *)(v31 + 8) = 1;
  v220 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused) = 2;
  v221 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate;
  v13();
  v32 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy;
  v222 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy;
  *(_QWORD *)v32 = 0;
  *(_BYTE *)(v32 + 8) = 1;
  v223 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame) = 3;
  v33 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse;
  v224 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse;
  *(_QWORD *)v33 = 0;
  *(_BYTE *)(v33 + 8) = 1;
  v34 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy;
  v225 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy;
  *(_QWORD *)v34 = 0;
  *(_BYTE *)(v34 + 8) = 1;
  v35 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError;
  v226 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError;
  *(_QWORD *)v35 = 0;
  *(_BYTE *)(v35 + 8) = 1;
  v36 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude;
  v227 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude;
  *(_QWORD *)v36 = 0;
  *(_BYTE *)(v36 + 8) = 1;
  v37 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy;
  v228 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy;
  *(_QWORD *)v37 = 0;
  *(_BYTE *)(v37 + 8) = 1;
  v229 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl) = 2;
  v38 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude;
  v230 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude;
  *(_QWORD *)v38 = 0;
  *(_BYTE *)(v38 + 8) = 1;
  v39 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy;
  v231 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy;
  *(_QWORD *)v39 = 0;
  *(_BYTE *)(v39 + 8) = 1;
  v232 = (uint64_t *)(v1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport) = &_swiftEmptyArrayStorage;
  v233 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent) = 3;
  v40 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
  v234 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
  v41 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v40, 1, 1, v41);
  v235 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState) = 3;
  v42 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor;
  v236 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor;
  *(_QWORD *)v42 = 0;
  *(_BYTE *)(v42 + 8) = 1;
  v43 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor;
  v237 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor;
  *(_QWORD *)v43 = 0;
  *(_BYTE *)(v43 + 8) = 1;
  v238 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType) = 4;
  v239 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching) = 2;
  v240 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy) = 3;
  v44 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType) = 5;
  v45 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp) = 2;
  swift_beginAccess(a1 + 16, v347, 0, 0);
  v46 = *(_QWORD *)(a1 + 16);
  v47 = *(_BYTE *)(a1 + 24);
  swift_beginAccess(v1 + 16, v346, 1, 0);
  *(_QWORD *)(v1 + 16) = v46;
  *(_BYTE *)(v1 + 24) = v47;
  swift_beginAccess(a1 + 32, v345, 0, 0);
  v48 = *(_QWORD *)(a1 + 32);
  v49 = *(_BYTE *)(a1 + 40);
  v50 = v185;
  swift_beginAccess(v185, v344, 1, 0);
  *v50 = v48;
  *(_BYTE *)(v1 + 40) = v49;
  swift_beginAccess(a1 + 48, v343, 0, 0);
  v51 = *(_QWORD *)(a1 + 48);
  v52 = *(_BYTE *)(a1 + 56);
  v53 = v186;
  swift_beginAccess(v186, v342, 1, 0);
  *v53 = v51;
  *(_BYTE *)(v1 + 56) = v52;
  swift_beginAccess(a1 + 64, v341, 0, 0);
  v54 = *(_QWORD *)(a1 + 64);
  v55 = *(_BYTE *)(a1 + 72);
  v56 = v187;
  swift_beginAccess(v187, &v340, 1, 0);
  *v56 = v54;
  *(_BYTE *)(v1 + 72) = v55;
  swift_beginAccess(a1 + 80, &v339, 0, 0);
  v57 = *(_QWORD *)(a1 + 80);
  v58 = *(_BYTE *)(a1 + 88);
  v59 = v188;
  swift_beginAccess(v188, &v338, 1, 0);
  *v59 = v57;
  *(_BYTE *)(v1 + 88) = v58;
  swift_beginAccess(a1 + 92, &v337, 0, 0);
  LODWORD(v57) = *(_DWORD *)(a1 + 92);
  v60 = *(_BYTE *)(a1 + 96);
  v61 = v189;
  swift_beginAccess(v189, &v336, 1, 0);
  *v61 = v57;
  *(_BYTE *)(v1 + 96) = v60;
  swift_beginAccess(a1 + 100, &v335, 0, 0);
  LODWORD(v57) = *(_DWORD *)(a1 + 100);
  v62 = *(_BYTE *)(a1 + 104);
  v63 = v190;
  swift_beginAccess(v190, &v334, 1, 0);
  *v63 = v57;
  *(_BYTE *)(v1 + 104) = v62;
  swift_beginAccess(a1 + 108, &v333, 0, 0);
  LODWORD(v57) = *(_DWORD *)(a1 + 108);
  v64 = *(_BYTE *)(a1 + 112);
  v65 = v191;
  swift_beginAccess(v191, &v332, 1, 0);
  *v65 = v57;
  *(_BYTE *)(v1 + 112) = v64;
  swift_beginAccess(a1 + 113, &v331, 0, 0);
  LOBYTE(v57) = *(_BYTE *)(a1 + 113);
  v66 = v192;
  swift_beginAccess(v192, &v330, 1, 0);
  *v66 = v57;
  swift_beginAccess(a1 + 114, &v329, 0, 0);
  LOBYTE(v57) = *(_BYTE *)(a1 + 114);
  swift_beginAccess(v193, &v328, 1, 0);
  *(_BYTE *)(v1 + 114) = v57;
  v67 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate, &v327, 0, 0);
  v68 = v196;
  sub_10000E660(v67, v196, &qword_10036E460);
  v69 = v194;
  swift_beginAccess(v194, v326, 33, 0);
  sub_10000E574(v68, v69, &qword_10036E460);
  swift_endAccess(v326);
  v70 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse, v326, 0, 0);
  v71 = *v70;
  LOBYTE(v70) = *((_BYTE *)v70 + 8);
  v72 = v195;
  swift_beginAccess(v195, &v325, 1, 0);
  *(_QWORD *)v72 = v71;
  *(_BYTE *)(v72 + 8) = (_BYTE)v70;
  v73 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay, &v324, 0, 0);
  LODWORD(v71) = *(_DWORD *)v73;
  LOBYTE(v73) = *(_BYTE *)(v73 + 4);
  v74 = v197;
  swift_beginAccess(v197, &v323, 1, 0);
  *(_DWORD *)v74 = v71;
  *(_BYTE *)(v74 + 4) = v73;
  v75 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass, &v322, 0, 0);
  LODWORD(v71) = *(_DWORD *)v75;
  LOBYTE(v75) = *(_BYTE *)(v75 + 4);
  v76 = v198;
  swift_beginAccess(v198, &v321, 1, 0);
  *(_DWORD *)v76 = v71;
  *(_BYTE *)(v76 + 4) = v75;
  v77 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted, &v320, 0, 0);
  LOBYTE(v77) = *v77;
  v78 = v199;
  swift_beginAccess(v199, &v319, 1, 0);
  *v78 = (_BYTE)v77;
  v79 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure, &v318, 0, 0);
  v80 = v205;
  sub_10000E660(v79, v205, &qword_10036E468);
  v81 = v200;
  swift_beginAccess(v200, v317, 33, 0);
  sub_10000E574(v80, v81, &qword_10036E468);
  swift_endAccess(v317);
  v82 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel, v317, 0, 0);
  LOBYTE(v82) = *v82;
  v83 = v201;
  swift_beginAccess(v201, &v316, 1, 0);
  *v83 = (_BYTE)v82;
  v84 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation, &v315, 0, 0);
  LODWORD(v83) = *(_DWORD *)v84;
  LOBYTE(v84) = *(_BYTE *)(v84 + 4);
  v85 = v202;
  swift_beginAccess(v202, &v314, 1, 0);
  *(_DWORD *)v85 = (_DWORD)v83;
  *(_BYTE *)(v85 + 4) = v84;
  v86 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate, &v313, 0, 0);
  sub_10000E660(v86, v68, &qword_10036E460);
  v87 = v203;
  swift_beginAccess(v203, v312, 33, 0);
  sub_10000E574(v68, v87, &qword_10036E460);
  swift_endAccess(v312);
  v88 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy, v312, 0, 0);
  v89 = *v88;
  LOBYTE(v88) = *((_BYTE *)v88 + 8);
  v90 = v204;
  swift_beginAccess(v204, &v311, 1, 0);
  *(_QWORD *)v90 = v89;
  *(_BYTE *)(v90 + 8) = (_BYTE)v88;
  v91 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime, &v310, 0, 0);
  v92 = *v91;
  LOBYTE(v91) = *((_BYTE *)v91 + 8);
  v93 = v206;
  swift_beginAccess(v206, &v309, 1, 0);
  *(_QWORD *)v93 = v92;
  *(_BYTE *)(v93 + 8) = (_BYTE)v91;
  v94 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice, &v308, 0, 0);
  LOBYTE(v94) = *v94;
  v95 = v207;
  swift_beginAccess(v207, &v307, 1, 0);
  *v95 = (_BYTE)v94;
  v96 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates, &v306, 0, 0);
  LOBYTE(v96) = *v96;
  v97 = v208;
  swift_beginAccess(v208, &v305, 1, 0);
  *v97 = (_BYTE)v96;
  v98 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData, &v304, 0, 0);
  v99 = v219;
  sub_10000E660(v98, v219, &qword_10036E470);
  v100 = v209;
  swift_beginAccess(v209, v303, 33, 0);
  sub_10000E574(v99, v100, &qword_10036E470);
  swift_endAccess(v303);
  v101 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope, v303, 0, 0);
  v102 = *v101;
  LOBYTE(v101) = *((_BYTE *)v101 + 8);
  v103 = v210;
  swift_beginAccess(v210, &v302, 1, 0);
  *(_QWORD *)v103 = v102;
  *(_BYTE *)(v103 + 8) = (_BYTE)v101;
  v104 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope, &v301, 0, 0);
  v105 = *v104;
  LOBYTE(v104) = *((_BYTE *)v104 + 8);
  v106 = v211;
  swift_beginAccess(v211, &v300, 1, 0);
  *(_QWORD *)v106 = v105;
  *(_BYTE *)(v106 + 8) = (_BYTE)v104;
  v107 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude, &v299, 0, 0);
  v108 = *v107;
  LOBYTE(v107) = *((_BYTE *)v107 + 8);
  v109 = v212;
  swift_beginAccess(v212, &v298, 1, 0);
  *(_QWORD *)v109 = v108;
  *(_BYTE *)(v109 + 8) = (_BYTE)v107;
  v110 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty, &v297, 0, 0);
  v111 = *v110;
  LOBYTE(v110) = *((_BYTE *)v110 + 8);
  v112 = v213;
  swift_beginAccess(v213, &v296, 1, 0);
  *(_QWORD *)v112 = v111;
  *(_BYTE *)(v112 + 8) = (_BYTE)v110;
  v113 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude, &v295, 0, 0);
  v114 = *v113;
  LOBYTE(v113) = *((_BYTE *)v113 + 8);
  v115 = v214;
  swift_beginAccess(v214, &v294, 1, 0);
  *(_QWORD *)v115 = v114;
  *(_BYTE *)(v115 + 8) = (_BYTE)v113;
  v116 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty, &v293, 0, 0);
  v117 = *v116;
  LOBYTE(v116) = *((_BYTE *)v116 + 8);
  v118 = v215;
  swift_beginAccess(v215, &v292, 1, 0);
  *(_QWORD *)v118 = v117;
  *(_BYTE *)(v118 + 8) = (_BYTE)v116;
  v119 = (_BYTE *)(a1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed, &v291, 0, 0);
  LOBYTE(v119) = *v119;
  v120 = v216;
  swift_beginAccess(v216, &v290, 1, 0);
  *v120 = (_BYTE)v119;
  v121 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy, &v289, 0, 0);
  v122 = *v121;
  LOBYTE(v121) = *((_BYTE *)v121 + 8);
  v123 = v217;
  swift_beginAccess(v217, &v288, 1, 0);
  *(_QWORD *)v123 = v122;
  *(_BYTE *)(v123 + 8) = (_BYTE)v121;
  v124 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy, &v287, 0, 0);
  v125 = *v124;
  LOBYTE(v124) = *((_BYTE *)v124 + 8);
  v126 = v218;
  swift_beginAccess(v218, &v286, 1, 0);
  *(_QWORD *)v126 = v125;
  *(_BYTE *)(v126 + 8) = (_BYTE)v124;
  v127 = (_BYTE *)(a1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused, &v285, 0, 0);
  LOBYTE(v127) = *v127;
  v128 = v220;
  swift_beginAccess(v220, &v284, 1, 0);
  *v128 = (_BYTE)v127;
  v129 = a1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate, &v283, 0, 0);
  sub_10000E660(v129, v68, &qword_10036E460);
  v130 = v221;
  swift_beginAccess(v221, v282, 33, 0);
  sub_10000E574(v68, v130, &qword_10036E460);
  swift_endAccess(v282);
  v131 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy, v282, 0, 0);
  v132 = *v131;
  LOBYTE(v131) = *((_BYTE *)v131 + 8);
  v133 = v222;
  swift_beginAccess(v222, &v281, 1, 0);
  *(_QWORD *)v133 = v132;
  *(_BYTE *)(v133 + 8) = (_BYTE)v131;
  v134 = (_BYTE *)(a1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame, &v280, 0, 0);
  LOBYTE(v134) = *v134;
  v135 = v223;
  swift_beginAccess(v223, &v279, 1, 0);
  *v135 = (_BYTE)v134;
  v136 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse, &v278, 0, 0);
  v137 = *v136;
  LOBYTE(v136) = *((_BYTE *)v136 + 8);
  v138 = v224;
  swift_beginAccess(v224, &v277, 1, 0);
  *(_QWORD *)v138 = v137;
  *(_BYTE *)(v138 + 8) = (_BYTE)v136;
  v139 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy, &v276, 0, 0);
  v140 = *v139;
  LOBYTE(v139) = *((_BYTE *)v139 + 8);
  v141 = v225;
  swift_beginAccess(v225, &v275, 1, 0);
  *(_QWORD *)v141 = v140;
  *(_BYTE *)(v141 + 8) = (_BYTE)v139;
  v142 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError, &v274, 0, 0);
  v143 = *v142;
  LOBYTE(v142) = *((_BYTE *)v142 + 8);
  v144 = v226;
  swift_beginAccess(v226, &v273, 1, 0);
  *(_QWORD *)v144 = v143;
  *(_BYTE *)(v144 + 8) = (_BYTE)v142;
  v145 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude, &v272, 0, 0);
  v146 = *v145;
  LOBYTE(v145) = *((_BYTE *)v145 + 8);
  v147 = v227;
  swift_beginAccess(v227, &v271, 1, 0);
  *(_QWORD *)v147 = v146;
  *(_BYTE *)(v147 + 8) = (_BYTE)v145;
  v148 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy, &v270, 0, 0);
  v149 = *v148;
  LOBYTE(v148) = *((_BYTE *)v148 + 8);
  v150 = v228;
  swift_beginAccess(v228, &v269, 1, 0);
  *(_QWORD *)v150 = v149;
  *(_BYTE *)(v150 + 8) = (_BYTE)v148;
  v151 = (_BYTE *)(a1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl, &v268, 0, 0);
  LOBYTE(v151) = *v151;
  v152 = v229;
  swift_beginAccess(v229, &v267, 1, 0);
  *v152 = (_BYTE)v151;
  v153 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude, &v266, 0, 0);
  v154 = *v153;
  LOBYTE(v153) = *((_BYTE *)v153 + 8);
  v155 = v230;
  swift_beginAccess(v230, &v265, 1, 0);
  *(_QWORD *)v155 = v154;
  *(_BYTE *)(v155 + 8) = (_BYTE)v153;
  v156 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy, &v264, 0, 0);
  v157 = *v156;
  LOBYTE(v156) = *((_BYTE *)v156 + 8);
  v158 = v231;
  swift_beginAccess(v231, &v263, 1, 0);
  *(_QWORD *)v158 = v157;
  *(_BYTE *)(v158 + 8) = (_BYTE)v156;
  v159 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport, &v262, 0, 0);
  v160 = *v159;
  v161 = v232;
  swift_beginAccess(v232, &v261, 1, 0);
  v162 = *v161;
  *v161 = v160;
  swift_bridgeObjectRetain(v160);
  swift_bridgeObjectRelease(v162);
  v163 = (_BYTE *)(a1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent, &v260, 0, 0);
  LOBYTE(v163) = *v163;
  v164 = v233;
  swift_beginAccess(v233, &v259, 1, 0);
  *v164 = (_BYTE)v163;
  v165 = a1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude, &v258, 0, 0);
  v166 = v241;
  sub_10000E660(v165, v241, &qword_10036E478);
  v167 = v234;
  swift_beginAccess(v234, v257, 33, 0);
  sub_10000E574(v166, v167, &qword_10036E478);
  swift_endAccess(v257);
  v168 = (_BYTE *)(a1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState, v257, 0, 0);
  LOBYTE(v168) = *v168;
  v169 = v235;
  swift_beginAccess(v235, &v256, 1, 0);
  *v169 = (_BYTE)v168;
  v170 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor, &v255, 0, 0);
  v171 = *v170;
  LOBYTE(v170) = *((_BYTE *)v170 + 8);
  v172 = v236;
  swift_beginAccess(v236, &v254, 1, 0);
  *(_QWORD *)v172 = v171;
  *(_BYTE *)(v172 + 8) = (_BYTE)v170;
  v173 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor, &v253, 0, 0);
  v174 = *v173;
  LOBYTE(v173) = *((_BYTE *)v173 + 8);
  v175 = v237;
  swift_beginAccess(v237, &v252, 1, 0);
  *(_QWORD *)v175 = v174;
  *(_BYTE *)(v175 + 8) = (_BYTE)v173;
  v176 = (_BYTE *)(a1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType, &v251, 0, 0);
  LOBYTE(v176) = *v176;
  v177 = v238;
  swift_beginAccess(v238, &v250, 1, 0);
  *v177 = (_BYTE)v176;
  v178 = (_BYTE *)(a1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching, &v249, 0, 0);
  LOBYTE(v178) = *v178;
  v179 = v239;
  swift_beginAccess(v239, &v248, 1, 0);
  *v179 = (_BYTE)v178;
  v180 = (_BYTE *)(a1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy, &v247, 0, 0);
  LOBYTE(v180) = *v180;
  v181 = v240;
  swift_beginAccess(v240, &v246, 1, 0);
  *v181 = (_BYTE)v180;
  v182 = (_BYTE *)(a1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType, &v245, 0, 0);
  LOBYTE(v182) = *v182;
  swift_beginAccess(v44, &v244, 1, 0);
  *v44 = (_BYTE)v182;
  v183 = (_BYTE *)(a1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp);
  swift_beginAccess(v183, &v243, 0, 0);
  LOBYTE(v183) = *v183;
  swift_beginAccess(v45, &v242, 1, 0);
  *v45 = (_BYTE)v183;
  return v1;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B02A0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t sub_10010E1F4(uint64_t a1)
{
  if ((unint64_t)(a1 + 1) < 4)
    return a1 + 1;
  else
    return 4;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B02B0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_TechnologyStatus);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B02C0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B02D0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B02E0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B02F0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Location(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0300, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_Location);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0760, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_Location._StorageClass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0310, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_BatchedLocations);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0320, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0330, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_RhythmicStreamingControl);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0340, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MotionActivity);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0770, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionState(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0350, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MotionState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0360, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0370, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MotionStateObserver);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0380, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_WorkoutSettings);
}

unint64_t sub_10010E348(unint64_t result)
{
  if (result >= 0x43)
    return 67;
  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0390, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_WorkoutEvent);
}

unint64_t sub_10010E36C(unint64_t result)
{
  if (result >= 0x13)
    return 19;
  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B03A0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MotionStateMediator);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0780, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B03B0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_BodyMetrics);
}

unint64_t sub_10010E3B8(unint64_t result)
{
  if (result >= 8)
    return 8;
  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B03C0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_Natalimetry);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Timer(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B03D0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_Timer);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B03E0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B03F0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MapVector(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0400, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MapVector);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0790, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MapVector._StorageClass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0410, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0420, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_TunnelBridgeNotification);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0430, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B07A0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass);
}

uint64_t sub_10010E490(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  _BYTE *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  _BYTE *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _BYTE v92[24];
  _BYTE v93[24];
  _BYTE v94[24];
  _BYTE v95[24];
  _BYTE v96[24];
  _BYTE v97[24];
  _BYTE v98[32];

  v3 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v3);
  v5 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v1
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime;
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = v1
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg;
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg;
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM;
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM;
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM;
  v60 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM;
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  v13 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  *v13 = 3;
  v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg;
  v61 = v13;
  v62 = v14;
  *(_QWORD *)v14 = 0;
  *(_BYTE *)(v14 + 8) = 1;
  v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg;
  v63 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg;
  *(_QWORD *)v15 = 0;
  *(_BYTE *)(v15 + 8) = 1;
  v16 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM;
  v64 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM;
  *(_QWORD *)v16 = 0;
  *(_BYTE *)(v16 + 8) = 1;
  v17 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
  *v17 = 2;
  v18 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg;
  v65 = v17;
  v66 = v18;
  *(_QWORD *)v18 = 0;
  *(_BYTE *)(v18 + 8) = 1;
  v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg;
  v67 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg;
  *(_QWORD *)v19 = 0;
  *(_BYTE *)(v19 + 8) = 1;
  v20 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM;
  v68 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM;
  *(_QWORD *)v20 = 0;
  *(_BYTE *)(v20 + 8) = 1;
  v21 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM;
  v69 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM;
  *(_BYTE *)(v21 + 8) = 1;
  *(_QWORD *)v21 = 0;
  v22 = a1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime, v98, 0, 0);
  sub_10000E660(v22, (uint64_t)v5, &qword_10036E458);
  swift_beginAccess(v6, v97, 33, 0);
  sub_10000E574((uint64_t)v5, v6, &qword_10036E458);
  swift_endAccess(v97);
  v23 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg, v97, 0, 0);
  v24 = *v23;
  LOBYTE(v23) = *((_BYTE *)v23 + 8);
  swift_beginAccess(v8, v96, 1, 0);
  *(_QWORD *)v8 = v24;
  *(_BYTE *)(v8 + 8) = (_BYTE)v23;
  v25 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg, v95, 0, 0);
  v26 = *v25;
  LOBYTE(v25) = *((_BYTE *)v25 + 8);
  swift_beginAccess(v9, v94, 1, 0);
  *(_QWORD *)v9 = v26;
  *(_BYTE *)(v9 + 8) = (_BYTE)v25;
  v27 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM, v93, 0, 0);
  v28 = *v27;
  LOBYTE(v27) = *((_BYTE *)v27 + 8);
  swift_beginAccess(v10, v92, 1, 0);
  *(_QWORD *)v10 = v28;
  *(_BYTE *)(v10 + 8) = (_BYTE)v27;
  v29 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM, &v91, 0, 0);
  v30 = *v29;
  LOBYTE(v29) = *((_BYTE *)v29 + 8);
  swift_beginAccess(v11, &v90, 1, 0);
  *(_QWORD *)v11 = v30;
  *(_BYTE *)(v11 + 8) = (_BYTE)v29;
  v31 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM, &v89, 0, 0);
  v32 = *v31;
  LOBYTE(v31) = *((_BYTE *)v31 + 8);
  v33 = v60;
  swift_beginAccess(v60, &v88, 1, 0);
  *(_QWORD *)v33 = v32;
  *(_BYTE *)(v33 + 8) = (_BYTE)v31;
  v34 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame, &v87, 0, 0);
  LOBYTE(v34) = *v34;
  v35 = v61;
  swift_beginAccess(v61, &v86, 1, 0);
  *v35 = (_BYTE)v34;
  v36 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg, &v85, 0, 0);
  v37 = *v36;
  LOBYTE(v36) = *((_BYTE *)v36 + 8);
  v38 = v62;
  swift_beginAccess(v62, &v84, 1, 0);
  *(_QWORD *)v38 = v37;
  *(_BYTE *)(v38 + 8) = (_BYTE)v36;
  v39 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg, &v83, 0, 0);
  v40 = *v39;
  LOBYTE(v39) = *((_BYTE *)v39 + 8);
  v41 = v63;
  swift_beginAccess(v63, &v82, 1, 0);
  *(_QWORD *)v41 = v40;
  *(_BYTE *)(v41 + 8) = (_BYTE)v39;
  v42 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM, &v81, 0, 0);
  v43 = *v42;
  LOBYTE(v42) = *((_BYTE *)v42 + 8);
  v44 = v64;
  swift_beginAccess(v64, &v80, 1, 0);
  *(_QWORD *)v44 = v43;
  *(_BYTE *)(v44 + 8) = (_BYTE)v42;
  v45 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved, &v79, 0, 0);
  LOBYTE(v45) = *v45;
  v46 = v65;
  swift_beginAccess(v65, &v78, 1, 0);
  *v46 = (_BYTE)v45;
  v47 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg, &v77, 0, 0);
  v48 = *v47;
  LOBYTE(v47) = *((_BYTE *)v47 + 8);
  v49 = v66;
  swift_beginAccess(v66, &v76, 1, 0);
  *(_QWORD *)v49 = v48;
  *(_BYTE *)(v49 + 8) = (_BYTE)v47;
  v50 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg, &v75, 0, 0);
  v51 = *v50;
  LOBYTE(v50) = *((_BYTE *)v50 + 8);
  v52 = v67;
  swift_beginAccess(v67, &v74, 1, 0);
  *(_QWORD *)v52 = v51;
  *(_BYTE *)(v52 + 8) = (_BYTE)v50;
  v53 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM, &v73, 0, 0);
  v54 = *v53;
  LOBYTE(v53) = *((_BYTE *)v53 + 8);
  v55 = v68;
  swift_beginAccess(v68, &v72, 1, 0);
  *(_QWORD *)v55 = v54;
  *(_BYTE *)(v55 + 8) = (_BYTE)v53;
  v56 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM);
  swift_beginAccess(v56, &v71, 0, 0);
  v57 = *v56;
  LOBYTE(v56) = *((_BYTE *)v56 + 8);
  v58 = v69;
  swift_beginAccess(v69, &v70, 1, 0);
  *(_QWORD *)v58 = v57;
  *(_BYTE *)(v58 + 8) = (_BYTE)v56;
  return v1;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0440, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_TunnelEndPoint);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0450, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0460, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MapMatchingRouteHint);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0470, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0480, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_ReachabilityState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Battery(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0490, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B04A0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_DeviceStatus);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B07B0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass);
}

uint64_t sub_10010EB54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  _BYTE *v30;
  _BYTE *v31;
  _BYTE *v32;
  _BYTE *v33;
  _BYTE *v34;
  _BYTE *v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  uint64_t v44;
  _BYTE *v45;
  _BYTE *v46;
  uint64_t v47;
  _BYTE *v48;
  _BYTE *v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE v69[24];
  _BYTE v70[24];
  _BYTE v71[24];
  _BYTE v72[24];
  _BYTE v73[24];
  _BYTE v74[24];
  _BYTE v75[24];
  _BYTE v76[32];

  v3 = sub_1000039AC(&qword_10036E500);
  __chkstk_darwin(v3);
  v51 = (uint64_t)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000039AC(&qword_10036E4F8);
  __chkstk_darwin(v5);
  v47 = (uint64_t)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v7);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  v13 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData) = 20;
  v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability;
  v15 = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  v16 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  v44 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  v45 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode) = 2;
  v46 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn) = 2;
  v48 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen) = 2;
  v49 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled) = 2;
  v50 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected) = 2;
  v18 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients;
  *(_DWORD *)v18 = 0;
  *(_BYTE *)(v18 + 4) = 1;
  v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel;
  v52 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel;
  *(_DWORD *)v19 = 0;
  *(_BYTE *)(v19 + 4) = 1;
  v53 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode) = 2;
  v20 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, v76, 0, 0);
  sub_10000E660(v20, (uint64_t)v9, &qword_10036E458);
  swift_beginAccess(v10, v75, 33, 0);
  sub_10000E574((uint64_t)v9, v10, &qword_10036E458);
  swift_endAccess(v75);
  v21 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client, v75, 0, 0);
  LODWORD(v9) = *(_DWORD *)v21;
  LOBYTE(v21) = *(_BYTE *)(v21 + 4);
  swift_beginAccess(v12, v74, 1, 0);
  *(_DWORD *)v12 = (_DWORD)v9;
  *(_BYTE *)(v12 + 4) = v21;
  v22 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData, v73, 0, 0);
  LOBYTE(v22) = *v22;
  swift_beginAccess(v13, v72, 1, 0);
  *v13 = (_BYTE)v22;
  v23 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability, v71, 0, 0);
  v24 = v47;
  sub_10000E660(v23, v47, &qword_10036E4F8);
  swift_beginAccess(v14, v70, 33, 0);
  sub_10000E574(v24, v14, &qword_10036E4F8);
  swift_endAccess(v70);
  v25 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery, v70, 0, 0);
  v26 = v51;
  sub_10000E660(v25, v51, &qword_10036E500);
  v27 = v44;
  swift_beginAccess(v44, v69, 33, 0);
  sub_10000E574(v26, v27, &qword_10036E500);
  swift_endAccess(v69);
  v28 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode, v69, 0, 0);
  LOBYTE(v28) = *v28;
  v29 = v45;
  swift_beginAccess(v45, &v68, 1, 0);
  *v29 = (_BYTE)v28;
  v30 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn, &v67, 0, 0);
  LOBYTE(v30) = *v30;
  v31 = v46;
  swift_beginAccess(v46, &v66, 1, 0);
  *v31 = (_BYTE)v30;
  v32 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen, &v65, 0, 0);
  LOBYTE(v32) = *v32;
  v33 = v48;
  swift_beginAccess(v48, &v64, 1, 0);
  *v33 = (_BYTE)v32;
  v34 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled, &v63, 0, 0);
  LOBYTE(v34) = *v34;
  v35 = v49;
  swift_beginAccess(v49, &v62, 1, 0);
  *v35 = (_BYTE)v34;
  v36 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected, &v61, 0, 0);
  LOBYTE(v36) = *v36;
  v37 = v50;
  swift_beginAccess(v50, &v60, 1, 0);
  *v37 = (_BYTE)v36;
  v38 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients, &v59, 0, 0);
  LODWORD(v37) = *(_DWORD *)v38;
  LOBYTE(v38) = *(_BYTE *)(v38 + 4);
  swift_beginAccess(v18, &v58, 1, 0);
  *(_DWORD *)v18 = (_DWORD)v37;
  *(_BYTE *)(v18 + 4) = v38;
  v39 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel, &v57, 0, 0);
  LODWORD(v37) = *(_DWORD *)v39;
  LOBYTE(v39) = *(_BYTE *)(v39 + 4);
  v40 = v52;
  swift_beginAccess(v52, &v56, 1, 0);
  *(_DWORD *)v40 = (_DWORD)v37;
  *(_BYTE *)(v40 + 4) = v39;
  v41 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
  swift_beginAccess(v41, &v55, 0, 0);
  LOBYTE(v41) = *v41;
  v42 = v53;
  swift_beginAccess(v53, &v54, 1, 0);
  *v42 = (_BYTE)v41;
  return v1;
}

unint64_t sub_10010F17C(unint64_t result)
{
  if (result >= 0x14)
    return 20;
  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B04B0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_SignalEnvironment);
}

uint64_t sub_10010F1A0(uint64_t a1)
{
  if ((unint64_t)(a1 + 1) < 8)
    return a1 + 1;
  else
    return 8;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B04C0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MagSample(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B04D0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B04E0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_Magnetometer);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Reset(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B04F0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_Reset);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0500, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0510, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0520, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_StepCountEntry);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B07C0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_StepCount(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0530, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_StepCount);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0540, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0550, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0560, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MotionTypeCompass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B07D0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0570, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Compass(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0580, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_Compass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0590, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B07E0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass);
}

uint64_t sub_10010F308(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  _BYTE *v25;
  _BYTE *v26;
  _BYTE *v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  _BYTE *v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[24];
  _BYTE v46[24];
  _BYTE v47[24];
  _BYTE v48[24];
  _BYTE v49[32];

  v3 = sub_1000039AC(&qword_10036E520);
  __chkstk_darwin(v3);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000039AC(&qword_10036E528);
  __chkstk_darwin(v6);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration;
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  v13 = *(void (**)(void))(*(_QWORD *)(v12 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v13)(v11, 1, 1, v12);
  v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v13)(v1+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate, 1, 1, v12);
  v31 = v1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  v13();
  v32 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel) = 8;
  v33 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection) = 2;
  v34 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation) = 2;
  v35 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p) = 2;
  v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading;
  *(_DWORD *)v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  v16 = a1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion, v49, 0, 0);
  sub_10000E660(v16, (uint64_t)v8, &qword_10036E528);
  swift_beginAccess(v9, v48, 33, 0);
  sub_10000E574((uint64_t)v8, v9, &qword_10036E528);
  swift_endAccess(v48);
  v17 = a1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration, v48, 0, 0);
  sub_10000E660(v17, (uint64_t)v5, &qword_10036E520);
  swift_beginAccess(v11, v47, 33, 0);
  sub_10000E574((uint64_t)v5, v11, &qword_10036E520);
  swift_endAccess(v47);
  v18 = a1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate, v47, 0, 0);
  sub_10000E660(v18, (uint64_t)v5, &qword_10036E520);
  swift_beginAccess(v14, v46, 33, 0);
  sub_10000E574((uint64_t)v5, v14, &qword_10036E520);
  swift_endAccess(v46);
  v19 = a1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField, v46, 0, 0);
  sub_10000E660(v19, (uint64_t)v5, &qword_10036E520);
  v20 = v31;
  swift_beginAccess(v31, v45, 33, 0);
  sub_10000E574((uint64_t)v5, v20, &qword_10036E520);
  swift_endAccess(v45);
  v21 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel, v45, 0, 0);
  LOBYTE(v21) = *v21;
  v22 = v32;
  swift_beginAccess(v32, &v44, 1, 0);
  *v22 = (_BYTE)v21;
  v23 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection, &v43, 0, 0);
  LOBYTE(v23) = *v23;
  v24 = v33;
  swift_beginAccess(v33, &v42, 1, 0);
  *v24 = (_BYTE)v23;
  v25 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation, &v41, 0, 0);
  LOBYTE(v25) = *v25;
  v26 = v34;
  swift_beginAccess(v34, &v40, 1, 0);
  *v26 = (_BYTE)v25;
  v27 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p, &v39, 0, 0);
  LOBYTE(v27) = *v27;
  v28 = v35;
  swift_beginAccess(v35, &v38, 1, 0);
  *v28 = (_BYTE)v27;
  v29 = a1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading;
  swift_beginAccess(v29, &v37, 0, 0);
  LODWORD(v27) = *(_DWORD *)v29;
  LOBYTE(v29) = *(_BYTE *)(v29 + 4);
  swift_beginAccess(v15, &v36, 1, 0);
  *(_DWORD *)v15 = (_DWORD)v27;
  *(_BYTE *)(v15 + 4) = v29;
  return v1;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B05A0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_SensorFusionStatus);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B05B0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B05C0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_DeviceMotion);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B05D0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B05E0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GeomagneticModelData);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B05F0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0600, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_WifiAssociationState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0610, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_WifiScanResult);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0620, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_WifiNotification);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B07F0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass);
}

uint64_t sub_10010F86C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  _BYTE *v33;
  _BYTE *v34;
  _BYTE *v35;
  _BYTE *v36;
  _BYTE *v37;
  _BYTE *v38;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;
  _BYTE *v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE v57[24];
  _BYTE v58[24];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE v62[24];
  _BYTE v63[24];
  _BYTE v64[24];
  _BYTE v65[24];
  _BYTE v66[24];
  _BYTE v67[24];
  _BYTE v68[32];

  v3 = sub_1000039AC(&qword_10036E560);
  __chkstk_darwin(v3);
  v49 = (uint64_t)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000039AC(&qword_10036E558);
  __chkstk_darwin(v5);
  v46 = (uint64_t)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v7);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  v13 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type) = 15;
  v14 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType) = 15;
  v41 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power) = 2;
  v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  v42 = v1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  v16 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  v43 = v1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  v18 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  v44 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated) = 2;
  v45 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available) = 2;
  v47 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown) = 2;
  v48 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake) = 2;
  v19 = a1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, v68, 0, 0);
  sub_10000E660(v19, (uint64_t)v9, &qword_10036E458);
  swift_beginAccess(v10, v67, 33, 0);
  sub_10000E574((uint64_t)v9, v10, &qword_10036E458);
  swift_endAccess(v67);
  v20 = a1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client, v67, 0, 0);
  LODWORD(v19) = *(_DWORD *)v20;
  LOBYTE(v20) = *(_BYTE *)(v20 + 4);
  swift_beginAccess(v12, v66, 1, 0);
  *(_DWORD *)v12 = v19;
  *(_BYTE *)(v12 + 4) = v20;
  v21 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type, v65, 0, 0);
  LOBYTE(v21) = *v21;
  swift_beginAccess(v13, v64, 1, 0);
  *v13 = (_BYTE)v21;
  v22 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType, v63, 0, 0);
  LOBYTE(v22) = *v22;
  swift_beginAccess(v14, v62, 1, 0);
  *v14 = (_BYTE)v22;
  v23 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power, &v61, 0, 0);
  LOBYTE(v23) = *v23;
  v24 = v41;
  swift_beginAccess(v41, &v60, 1, 0);
  *v24 = (_BYTE)v23;
  v25 = a1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState, &v59, 0, 0);
  v26 = v46;
  sub_10000E660(v25, v46, &qword_10036E558);
  v27 = v42;
  swift_beginAccess(v42, v58, 33, 0);
  sub_10000E574(v26, v27, &qword_10036E558);
  swift_endAccess(v58);
  v28 = a1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan, v58, 0, 0);
  v29 = v49;
  sub_10000E660(v28, v49, &qword_10036E560);
  v30 = v43;
  swift_beginAccess(v43, v57, 33, 0);
  sub_10000E574(v29, v30, &qword_10036E560);
  swift_endAccess(v57);
  v31 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated, v57, 0, 0);
  LOBYTE(v31) = *v31;
  v32 = v44;
  swift_beginAccess(v44, &v56, 1, 0);
  *v32 = (_BYTE)v31;
  v33 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available, &v55, 0, 0);
  LOBYTE(v33) = *v33;
  v34 = v45;
  swift_beginAccess(v45, &v54, 1, 0);
  *v34 = (_BYTE)v33;
  v35 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown, &v53, 0, 0);
  LOBYTE(v35) = *v35;
  v36 = v47;
  swift_beginAccess(v47, &v52, 1, 0);
  *v36 = (_BYTE)v35;
  v37 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
  swift_beginAccess(v37, &v51, 0, 0);
  LOBYTE(v37) = *v37;
  v38 = v48;
  swift_beginAccess(v48, &v50, 1, 0);
  *v38 = (_BYTE)v37;
  return v1;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0630, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0640, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0650, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0660, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0670, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GEOMapBuildingData);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0680, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0690, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B06A0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B06B0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B06C0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B06D0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_WatchOrientation);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_WristState(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B06E0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_WatchState(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B06F0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_WatchState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0700, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_PlaceInference);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0710, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_RoutineVisit);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0800, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass);
}

uint64_t sub_10010FF18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[24];
  _BYTE v40[24];
  _BYTE v41[24];
  _BYTE v42[24];
  _BYTE v43[24];
  _BYTE v44[24];
  _BYTE v45[24];
  _BYTE v46[32];

  v3 = sub_1000039AC(&qword_10036E460);
  __chkstk_darwin(v3);
  v38 = (uint64_t)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000039AC(&qword_10036E590);
  __chkstk_darwin(v5);
  v37 = (uint64_t)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v7);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime;
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
  v12(v10, 1, 1, v11);
  v13 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime;
  v12(v1+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime, 1, 1, v11);
  v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime;
  v12(v1+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime, 1, 1, v11);
  v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime;
  v12(v1+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime, 1, 1, v11);
  v16 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  v35 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  v18 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  v36 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  v19 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  v20 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM;
  *(_QWORD *)v20 = 0;
  *(_BYTE *)(v20 + 8) = 1;
  v21 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime, v46, 0, 0);
  sub_10000E660(v21, (uint64_t)v9, &qword_10036E458);
  swift_beginAccess(v10, v45, 33, 0);
  sub_10000E574((uint64_t)v9, v10, &qword_10036E458);
  swift_endAccess(v45);
  v22 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime, v45, 0, 0);
  sub_10000E660(v22, (uint64_t)v9, &qword_10036E458);
  swift_beginAccess(v13, v44, 33, 0);
  sub_10000E574((uint64_t)v9, v13, &qword_10036E458);
  swift_endAccess(v44);
  v23 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime, v44, 0, 0);
  sub_10000E660(v23, (uint64_t)v9, &qword_10036E458);
  swift_beginAccess(v14, v43, 33, 0);
  sub_10000E574((uint64_t)v9, v14, &qword_10036E458);
  swift_endAccess(v43);
  v24 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime, v43, 0, 0);
  sub_10000E660(v24, (uint64_t)v9, &qword_10036E458);
  swift_beginAccess(v15, v42, 33, 0);
  sub_10000E574((uint64_t)v9, v15, &qword_10036E458);
  swift_endAccess(v42);
  v25 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference, v42, 0, 0);
  v26 = v37;
  sub_10000E660(v25, v37, &qword_10036E590);
  v27 = v35;
  swift_beginAccess(v35, v41, 33, 0);
  sub_10000E574(v26, v27, &qword_10036E590);
  swift_endAccess(v41);
  v28 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate, v41, 0, 0);
  v29 = v38;
  sub_10000E660(v28, v38, &qword_10036E460);
  v30 = v36;
  swift_beginAccess(v36, v40, 33, 0);
  sub_10000E574(v29, v30, &qword_10036E460);
  swift_endAccess(v40);
  v31 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM);
  swift_beginAccess(v31, v40, 0, 0);
  v32 = *v31;
  LOBYTE(v31) = *((_BYTE *)v31 + 8);
  swift_beginAccess(v20, v39, 1, 0);
  *(_QWORD *)v20 = v32;
  *(_BYTE *)(v20 + 8) = (_BYTE)v31;
  return v1;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0720, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003B0730, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass()
{
  return objc_opt_self(_TtCV10ALProtobuf47CLP_LogEntry_PrivateData_InertialOdometrySampleP33_993346AF53650622B255AB1E3C41340D13_StorageClass);
}

uint64_t sub_10011041C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  _BYTE v7[24];
  _BYTE v8[24];
  _BYTE v9[24];
  _BYTE v10[24];
  _BYTE v11[24];
  _BYTE v12[24];
  _BYTE v13[24];
  _BYTE v14[24];
  _BYTE v15[24];
  _BYTE v16[24];
  _BYTE v17[24];
  _BYTE v18[24];
  _BYTE v19[24];
  _BYTE v20[24];
  _BYTE v21[24];
  _BYTE v22[24];
  _BYTE v23[24];
  _BYTE v24[24];
  _BYTE v25[24];
  _BYTE v26[24];
  _BYTE v27[24];
  _BYTE v28[24];
  _BYTE v29[24];
  _BYTE v30[24];
  _BYTE v31[24];
  _BYTE v32[24];
  _BYTE v33[24];
  _BYTE v34[24];
  _BYTE v35[24];
  _BYTE v36[24];
  _BYTE v37[24];
  _BYTE v38[24];
  _BYTE v39[24];
  _BYTE v40[32];

  v2 = a1;
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 1;
  *(_QWORD *)(v1 + 32) = 0;
  *(_BYTE *)(v1 + 40) = 1;
  *(_DWORD *)(v1 + 44) = 0;
  *(_DWORD *)(v1 + 52) = 0;
  *(_BYTE *)(v1 + 48) = 1;
  *(_BYTE *)(v1 + 56) = 1;
  *(_DWORD *)(v1 + 60) = 0;
  *(_BYTE *)(v1 + 64) = 1;
  *(_DWORD *)(v1 + 68) = 0;
  *(_DWORD *)(v1 + 76) = 0;
  *(_BYTE *)(v1 + 72) = 1;
  *(_BYTE *)(v1 + 80) = 1;
  *(_DWORD *)(v1 + 84) = 0;
  *(_BYTE *)(v1 + 88) = 1;
  *(_DWORD *)(v1 + 92) = 0;
  *(_DWORD *)(v1 + 100) = 0;
  *(_BYTE *)(v1 + 96) = 1;
  *(_BYTE *)(v1 + 104) = 1;
  *(_DWORD *)(v1 + 108) = 0;
  *(_BYTE *)(v1 + 112) = 1;
  *(_DWORD *)(v1 + 116) = 0;
  *(_BYTE *)(v1 + 120) = 1;
  *(_BYTE *)(v1 + 128) = 1;
  *(_DWORD *)(v1 + 129) = 33686019;
  *(_DWORD *)(v1 + 124) = 0;
  swift_beginAccess(a1 + 16, v40, 0, 0);
  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_BYTE *)(v2 + 24);
  swift_beginAccess(v1 + 16, v39, 1, 0);
  *(_QWORD *)(v1 + 16) = v3;
  *(_BYTE *)(v1 + 24) = v4;
  swift_beginAccess(v2 + 32, v38, 0, 0);
  v5 = *(_QWORD *)(v2 + 32);
  LOBYTE(v3) = *(_BYTE *)(v2 + 40);
  swift_beginAccess(v1 + 32, v37, 1, 0);
  *(_QWORD *)(v1 + 32) = v5;
  *(_BYTE *)(v1 + 40) = v3;
  swift_beginAccess(v2 + 44, v36, 0, 0);
  LODWORD(v5) = *(_DWORD *)(v2 + 44);
  LOBYTE(v3) = *(_BYTE *)(v2 + 48);
  swift_beginAccess(v1 + 44, v35, 1, 0);
  *(_DWORD *)(v1 + 44) = v5;
  *(_BYTE *)(v1 + 48) = v3;
  swift_beginAccess(v2 + 52, v34, 0, 0);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  LOBYTE(v3) = *(_BYTE *)(v2 + 56);
  swift_beginAccess(v1 + 52, v33, 1, 0);
  *(_DWORD *)(v1 + 52) = v5;
  *(_BYTE *)(v1 + 56) = v3;
  swift_beginAccess(v2 + 60, v32, 0, 0);
  LODWORD(v5) = *(_DWORD *)(v2 + 60);
  LOBYTE(v3) = *(_BYTE *)(v2 + 64);
  swift_beginAccess(v1 + 60, v31, 1, 0);
  *(_DWORD *)(v1 + 60) = v5;
  *(_BYTE *)(v1 + 64) = v3;
  swift_beginAccess(v2 + 68, v30, 0, 0);
  LODWORD(v5) = *(_DWORD *)(v2 + 68);
  LOBYTE(v3) = *(_BYTE *)(v2 + 72);
  swift_beginAccess(v1 + 68, v29, 1, 0);
  *(_DWORD *)(v1 + 68) = v5;
  *(_BYTE *)(v1 + 72) = v3;
  swift_beginAccess(v2 + 76, v28, 0, 0);
  LODWORD(v5) = *(_DWORD *)(v2 + 76);
  LOBYTE(v3) = *(_BYTE *)(v2 + 80);
  swift_beginAccess(v1 + 76, v27, 1, 0);
  *(_DWORD *)(v1 + 76) = v5;
  *(_BYTE *)(v1 + 80) = v3;
  swift_beginAccess(v2 + 84, v26, 0, 0);
  LODWORD(v5) = *(_DWORD *)(v2 + 84);
  LOBYTE(v3) = *(_BYTE *)(v2 + 88);
  swift_beginAccess(v1 + 84, v25, 1, 0);
  *(_DWORD *)(v1 + 84) = v5;
  *(_BYTE *)(v1 + 88) = v3;
  swift_beginAccess(v2 + 92, v24, 0, 0);
  LODWORD(v5) = *(_DWORD *)(v2 + 92);
  LOBYTE(v3) = *(_BYTE *)(v2 + 96);
  swift_beginAccess(v1 + 92, v23, 1, 0);
  *(_DWORD *)(v1 + 92) = v5;
  *(_BYTE *)(v1 + 96) = v3;
  swift_beginAccess(v2 + 100, v22, 0, 0);
  LODWORD(v5) = *(_DWORD *)(v2 + 100);
  LOBYTE(v3) = *(_BYTE *)(v2 + 104);
  swift_beginAccess(v1 + 100, v21, 1, 0);
  *(_DWORD *)(v1 + 100) = v5;
  *(_BYTE *)(v1 + 104) = v3;
  swift_beginAccess(v2 + 108, v20, 0, 0);
  LODWORD(v5) = *(_DWORD *)(v2 + 108);
  LOBYTE(v3) = *(_BYTE *)(v2 + 112);
  swift_beginAccess(v1 + 108, v19, 1, 0);
  *(_DWORD *)(v1 + 108) = v5;
  *(_BYTE *)(v1 + 112) = v3;
  swift_beginAccess(v2 + 116, v18, 0, 0);
  LODWORD(v5) = *(_DWORD *)(v2 + 116);
  LOBYTE(v3) = *(_BYTE *)(v2 + 120);
  swift_beginAccess(v1 + 116, v17, 1, 0);
  *(_DWORD *)(v1 + 116) = v5;
  *(_BYTE *)(v1 + 120) = v3;
  swift_beginAccess(v2 + 124, v16, 0, 0);
  LODWORD(v5) = *(_DWORD *)(v2 + 124);
  LOBYTE(v3) = *(_BYTE *)(v2 + 128);
  swift_beginAccess(v1 + 124, v15, 1, 0);
  *(_DWORD *)(v1 + 124) = v5;
  *(_BYTE *)(v1 + 128) = v3;
  swift_beginAccess(v2 + 129, v14, 0, 0);
  LOBYTE(v5) = *(_BYTE *)(v2 + 129);
  swift_beginAccess(v1 + 129, v13, 1, 0);
  *(_BYTE *)(v1 + 129) = v5;
  swift_beginAccess(v2 + 130, v12, 0, 0);
  LOBYTE(v5) = *(_BYTE *)(v2 + 130);
  swift_beginAccess(v1 + 130, v11, 1, 0);
  *(_BYTE *)(v1 + 130) = v5;
  swift_beginAccess(v2 + 131, v10, 0, 0);
  LOBYTE(v5) = *(_BYTE *)(v2 + 131);
  swift_beginAccess(v1 + 131, v9, 1, 0);
  *(_BYTE *)(v1 + 131) = v5;
  swift_beginAccess(v2 + 132, v8, 0, 0);
  LOBYTE(v2) = *(_BYTE *)(v2 + 132);
  swift_beginAccess(v1 + 132, v7, 1, 0);
  *(_BYTE *)(v1 + 132) = v2;
  return v1;
}

uint64_t sub_100110900(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  int *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v17;
  _DWORD *v18;
  char v19;
  _DWORD *v20;
  int v21;
  uint64_t v22;
  _DWORD *v23;
  char v24;
  _DWORD *v25;
  int v26;
  uint64_t v27;
  _DWORD *v28;
  char v29;
  _DWORD *v30;
  int v31;
  char v32;
  char *v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v38 - v9;
  if ((sub_10010A954(*a1, *a2) & 1) == 0)
    goto LABEL_24;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0);
  v12 = v11;
  v13 = v11[6];
  v14 = *((unsigned __int8 *)a1 + v13);
  v15 = *((unsigned __int8 *)a2 + v13);
  if (v14 == 4)
  {
    if (v15 != 4)
      goto LABEL_24;
  }
  else if (v15 == 4 || v14 != v15)
  {
    goto LABEL_24;
  }
  v17 = v11[7];
  v18 = (_DWORD *)((char *)a1 + v17);
  v19 = *((_BYTE *)a1 + v17 + 4);
  v20 = (_DWORD *)((char *)a2 + v17);
  v21 = *((unsigned __int8 *)a2 + v17 + 4);
  if ((v19 & 1) != 0)
  {
    if (!v21)
      goto LABEL_24;
  }
  else
  {
    if (*v18 != *v20)
      LOBYTE(v21) = 1;
    if ((v21 & 1) != 0)
      goto LABEL_24;
  }
  v22 = v11[8];
  v23 = (_DWORD *)((char *)a1 + v22);
  v24 = *((_BYTE *)a1 + v22 + 4);
  v25 = (_DWORD *)((char *)a2 + v22);
  v26 = *((unsigned __int8 *)a2 + v22 + 4);
  if ((v24 & 1) == 0)
  {
    if (*v23 != *v25)
      LOBYTE(v26) = 1;
    if ((v26 & 1) != 0)
      goto LABEL_24;
LABEL_22:
    v27 = v11[9];
    v28 = (_DWORD *)((char *)a1 + v27);
    v29 = *((_BYTE *)a1 + v27 + 4);
    v30 = (_DWORD *)((char *)a2 + v27);
    v31 = *((unsigned __int8 *)a2 + v27 + 4);
    if ((v29 & 1) != 0)
    {
      if (!v31)
        goto LABEL_24;
    }
    else
    {
      if (*v28 != *v30)
        LOBYTE(v31) = 1;
      if ((v31 & 1) != 0)
        goto LABEL_24;
    }
    v34 = (char *)a1 + v11[5];
    v35 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v35(v10, v34, v4);
    v35(v8, (char *)a2 + v12[5], v4);
    v36 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v32 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v36);
    v37 = *(void (**)(char *, uint64_t))(v5 + 8);
    v37(v8, v4);
    v37(v10, v4);
    return v32 & 1;
  }
  if (v26)
    goto LABEL_22;
LABEL_24:
  v32 = 0;
  return v32 & 1;
}

uint64_t sub_100110AF8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t *v41;
  _BYTE *v42;
  uint64_t *v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;
  _BYTE *v47;
  char v48;
  _BYTE *v50;
  char v51;
  uint64_t v52;
  _DWORD *v53;
  char v54;
  _DWORD *v55;
  int v56;
  int *v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  _DWORD *v62;
  char v63;
  _DWORD *v64;
  int v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(_BYTE *, char *, uint64_t);
  _BYTE *v76;
  _BYTE *v77;
  uint64_t v78;
  void (*v79)(_BYTE *, uint64_t);
  _BYTE v80[4];
  int v81;
  _BYTE *v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE *v86;
  _BYTE *v87;
  _BYTE *v88;
  _BYTE *v89;
  uint64_t *v90;
  uint64_t *v91;
  _BYTE *v92;

  v4 = type metadata accessor for UnknownStorage(0);
  v84 = *(_QWORD *)(v4 - 8);
  v85 = v4;
  v5 = __chkstk_darwin(v4);
  v83 = &v80[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v82 = &v80[-v7];
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v87 = &v80[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = sub_1000039AC(&qword_100375338);
  v12 = __chkstk_darwin(v11);
  v89 = &v80[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  v15 = &v80[-v14];
  v16 = sub_1000039AC(&qword_10036E458);
  v17 = __chkstk_darwin(v16);
  v86 = &v80[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = __chkstk_darwin(v17);
  v92 = &v80[-v20];
  v21 = __chkstk_darwin(v19);
  v88 = &v80[-v22];
  v23 = __chkstk_darwin(v21);
  v25 = &v80[-v24];
  v26 = __chkstk_darwin(v23);
  v28 = &v80[-v27];
  __chkstk_darwin(v26);
  v30 = &v80[-v29];
  v31 = type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
  v32 = *(int *)(v31 + 28);
  v90 = a1;
  v33 = (uint64_t)a1 + v32;
  v34 = (int *)v31;
  sub_10000E660(v33, (uint64_t)v30, &qword_10036E458);
  v35 = v34[7];
  v91 = a2;
  sub_10000E660((uint64_t)a2 + v35, (uint64_t)v28, &qword_10036E458);
  v36 = (uint64_t)&v15[*(int *)(v11 + 48)];
  sub_10000E660((uint64_t)v30, (uint64_t)v15, &qword_10036E458);
  sub_10000E660((uint64_t)v28, v36, &qword_10036E458);
  v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v37((uint64_t)v15, 1, v8) == 1)
  {
    sub_100015704((uint64_t)v28, &qword_10036E458);
    sub_100015704((uint64_t)v30, &qword_10036E458);
    if (v37(v36, 1, v8) == 1)
    {
      sub_100015704((uint64_t)v15, &qword_10036E458);
      goto LABEL_8;
    }
LABEL_6:
    v38 = (uint64_t)v15;
LABEL_14:
    sub_100015704(v38, &qword_100375338);
    goto LABEL_15;
  }
  sub_10000E660((uint64_t)v15, (uint64_t)v25, &qword_10036E458);
  if (v37(v36, 1, v8) == 1)
  {
    sub_100015704((uint64_t)v28, &qword_10036E458);
    sub_100015704((uint64_t)v30, &qword_10036E458);
    sub_100004030((uint64_t)v25, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  v39 = v36;
  v40 = v87;
  sub_100003E08(v39, (uint64_t)v87, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v81 = sub_1000656F0((uint64_t)v25, (uint64_t)v40, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004030((uint64_t)v40, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v28, &qword_10036E458);
  sub_100015704((uint64_t)v30, &qword_10036E458);
  sub_100004030((uint64_t)v25, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v15, &qword_10036E458);
  if ((v81 & 1) == 0)
    goto LABEL_15;
LABEL_8:
  v41 = v90;
  v42 = v88;
  sub_10000E660((uint64_t)v90 + v34[8], (uint64_t)v88, &qword_10036E458);
  v43 = v91;
  v44 = v92;
  sub_10000E660((uint64_t)v91 + v34[8], (uint64_t)v92, &qword_10036E458);
  v45 = v89;
  v46 = (uint64_t)&v89[*(int *)(v11 + 48)];
  sub_10000E660((uint64_t)v42, (uint64_t)v89, &qword_10036E458);
  sub_10000E660((uint64_t)v44, v46, &qword_10036E458);
  if (v37((uint64_t)v45, 1, v8) == 1)
  {
    sub_100015704((uint64_t)v44, &qword_10036E458);
    sub_100015704((uint64_t)v42, &qword_10036E458);
    if (v37(v46, 1, v8) == 1)
    {
      sub_100015704((uint64_t)v45, &qword_10036E458);
      goto LABEL_18;
    }
    goto LABEL_13;
  }
  v47 = v86;
  sub_10000E660((uint64_t)v45, (uint64_t)v86, &qword_10036E458);
  if (v37(v46, 1, v8) == 1)
  {
    sub_100015704((uint64_t)v92, &qword_10036E458);
    sub_100015704((uint64_t)v42, &qword_10036E458);
    sub_100004030((uint64_t)v47, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_13:
    v38 = (uint64_t)v45;
    goto LABEL_14;
  }
  v50 = v87;
  sub_100003E08(v46, (uint64_t)v87, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v51 = sub_1000656F0((uint64_t)v47, (uint64_t)v50, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004030((uint64_t)v50, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v92, &qword_10036E458);
  sub_100015704((uint64_t)v42, &qword_10036E458);
  sub_100004030((uint64_t)v47, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v45, &qword_10036E458);
  if ((v51 & 1) == 0)
    goto LABEL_15;
LABEL_18:
  v52 = v34[9];
  v53 = (_DWORD *)((char *)v41 + v52);
  v54 = *((_BYTE *)v41 + v52 + 4);
  v55 = (_DWORD *)((char *)v43 + v52);
  v56 = *((unsigned __int8 *)v43 + v52 + 4);
  if ((v54 & 1) != 0)
  {
    if (!v56)
      goto LABEL_15;
  }
  else
  {
    if (*v53 != *v55)
      LOBYTE(v56) = 1;
    if ((v56 & 1) != 0)
      goto LABEL_15;
  }
  v57 = v34;
  v58 = v34[10];
  v59 = *((unsigned __int8 *)v41 + v58);
  v60 = *((unsigned __int8 *)v43 + v58);
  if (v59 == 5)
  {
    if (v60 != 5)
      goto LABEL_15;
  }
  else
  {
    v48 = 0;
    if (v60 == 5 || v59 != v60)
      return v48 & 1;
  }
  v61 = v57[11];
  v62 = (_DWORD *)((char *)v41 + v61);
  v63 = *((_BYTE *)v41 + v61 + 4);
  v64 = (_DWORD *)((char *)v43 + v61);
  v65 = *((unsigned __int8 *)v43 + v61 + 4);
  if ((v63 & 1) != 0)
  {
    if (!v65)
      goto LABEL_15;
  }
  else
  {
    if (*v62 != *v64)
      LOBYTE(v65) = 1;
    if ((v65 & 1) != 0)
      goto LABEL_15;
  }
  if (!sub_10005DEA8(*v41, *v43) || !sub_10005DEA8(v41[1], v43[1]))
    goto LABEL_15;
  v66 = v57[12];
  v67 = *((unsigned __int8 *)v41 + v66);
  v68 = *((unsigned __int8 *)v43 + v66);
  if (v67 != 2)
  {
    if (v68 != 2 && ((((v68 & 1) == 0) ^ v67) & 1) != 0)
      goto LABEL_42;
LABEL_15:
    v48 = 0;
    return v48 & 1;
  }
  if (v68 != 2)
    goto LABEL_15;
LABEL_42:
  v69 = v57[13];
  v70 = *((unsigned __int8 *)v41 + v69);
  v71 = *((unsigned __int8 *)v43 + v69);
  if (v70 == 2)
  {
    if (v71 == 2)
    {
LABEL_47:
      v72 = (char *)v41 + v57[6];
      v74 = v84;
      v73 = v85;
      v75 = *(void (**)(_BYTE *, char *, uint64_t))(v84 + 16);
      v76 = v82;
      v75(v82, v72, v85);
      v77 = v83;
      v75(v83, (char *)v43 + v57[6], v73);
      v78 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
      v48 = dispatch thunk of static Equatable.== infix(_:_:)(v76, v77, v73, v78);
      v79 = *(void (**)(_BYTE *, uint64_t))(v74 + 8);
      v79(v77, v73);
      v79(v76, v73);
      return v48 & 1;
    }
    goto LABEL_15;
  }
  v48 = 0;
  if (v71 != 2 && ((v71 ^ v70) & 1) == 0)
    goto LABEL_47;
  return v48 & 1;
}

uint64_t sub_100111238(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  char v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v23 - v9;
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  v12 = *(int *)(v11 + 20);
  v13 = *(unsigned __int8 *)(a1 + v12);
  v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 2)
  {
    if (v14 != 2)
      goto LABEL_12;
  }
  else if (v14 == 2 || ((((v14 & 1) == 0) ^ v13) & 1) == 0)
  {
    goto LABEL_12;
  }
  v15 = *(int *)(v11 + 24);
  v16 = *(unsigned __int8 *)(a1 + v15);
  v17 = *(unsigned __int8 *)(a2 + v15);
  if (v16 == 2)
  {
    if (v17 != 2)
    {
LABEL_12:
      v20 = 0;
      return v20 & 1;
    }
  }
  else if (v17 == 2 || ((((v17 & 1) == 0) ^ v16) & 1) == 0)
  {
    goto LABEL_12;
  }
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v18(v10, a1, v4);
  v18(v8, a2, v4);
  v19 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v20 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v19);
  v21 = *(void (**)(char *, uint64_t))(v5 + 8);
  v21(v8, v4);
  v21(v10, v4);
  return v20 & 1;
}

uint64_t sub_1001113C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  char v36;
  uint64_t v37;
  double *v38;
  char v39;
  double *v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *);
  char *v49;
  char *v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v4 = type metadata accessor for UnknownStorage(0);
  v56 = *(_QWORD *)(v4 - 8);
  v57 = v4;
  v5 = __chkstk_darwin(v4);
  v55 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v54 = (char *)&v53 - v7;
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v58 = (uint64_t)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000039AC(&qword_100375338);
  __chkstk_darwin(v11);
  v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000039AC(&qword_10036E458);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v53 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v53 - v21;
  v23 = type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0);
  v24 = *(int *)(v23 + 20);
  v59 = a1;
  v25 = a1 + v24;
  v26 = (int *)v23;
  sub_10000E660(v25, (uint64_t)v22, &qword_10036E458);
  v27 = v26[5];
  v60 = a2;
  sub_10000E660(a2 + v27, (uint64_t)v20, &qword_10036E458);
  v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_10000E660((uint64_t)v22, (uint64_t)v13, &qword_10036E458);
  sub_10000E660((uint64_t)v20, v28, &qword_10036E458);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29((uint64_t)v13, 1, v8) == 1)
  {
    sub_100015704((uint64_t)v20, &qword_10036E458);
    sub_100015704((uint64_t)v22, &qword_10036E458);
    if (v29(v28, 1, v8) == 1)
    {
      sub_100015704((uint64_t)v13, &qword_10036E458);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  sub_10000E660((uint64_t)v13, (uint64_t)v17, &qword_10036E458);
  if (v29(v28, 1, v8) == 1)
  {
    sub_100015704((uint64_t)v20, &qword_10036E458);
    sub_100015704((uint64_t)v22, &qword_10036E458);
    sub_100004030((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    sub_100015704((uint64_t)v13, &qword_100375338);
LABEL_21:
    v36 = 0;
    return v36 & 1;
  }
  v30 = v58;
  sub_100003E08(v28, v58, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v31 = sub_1000656F0((uint64_t)v17, v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004030(v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v20, &qword_10036E458);
  sub_100015704((uint64_t)v22, &qword_10036E458);
  sub_100004030((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v13, &qword_10036E458);
  if ((v31 & 1) == 0)
    goto LABEL_21;
LABEL_8:
  v32 = v26[6];
  v33 = v60;
  v34 = *(unsigned __int8 *)(v59 + v32);
  v35 = *(unsigned __int8 *)(v60 + v32);
  if (v34 == 4)
  {
    if (v35 != 4)
      goto LABEL_21;
  }
  else
  {
    v36 = 0;
    if (v35 == 4 || v34 != v35)
      return v36 & 1;
  }
  v37 = v26[7];
  v38 = (double *)(v59 + v37);
  v39 = *(_BYTE *)(v59 + v37 + 8);
  v40 = (double *)(v60 + v37);
  v41 = *(unsigned __int8 *)(v60 + v37 + 8);
  if ((v39 & 1) != 0)
  {
    if (!v41)
      goto LABEL_21;
  }
  else
  {
    if (*v38 != *v40)
      LOBYTE(v41) = 1;
    if ((v41 & 1) != 0)
      goto LABEL_21;
  }
  v42 = v26[8];
  v43 = *(unsigned __int8 *)(v59 + v42);
  v44 = *(unsigned __int8 *)(v60 + v42);
  if (v43 == 4)
  {
    if (v44 != 4)
      goto LABEL_21;
LABEL_25:
    v47 = v56;
    v46 = v57;
    v48 = *(void (**)(char *))(v56 + 16);
    v49 = v54;
    v48(v54);
    v50 = v55;
    ((void (*)(char *, uint64_t, uint64_t))v48)(v55, v33, v46);
    v51 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v36 = dispatch thunk of static Equatable.== infix(_:_:)(v49, v50, v46, v51);
    v52 = *(void (**)(char *, uint64_t))(v47 + 8);
    v52(v50, v46);
    v52(v49, v46);
    return v36 & 1;
  }
  v36 = 0;
  if (v44 != 4 && v43 == v44)
    goto LABEL_25;
  return v36 & 1;
}

uint64_t sub_100111828(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  int *v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t *v33;
  uint64_t v34;
  char v35;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  char v42;
  _DWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t, uint64_t);
  char *v57;
  char *v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v73 = a1;
  v74 = a2;
  v2 = type metadata accessor for UnknownStorage(0);
  v64 = *(_QWORD *)(v2 - 8);
  v65 = v2;
  v3 = __chkstk_darwin(v2);
  v63 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v62 = (char *)&v61 - v5;
  v71 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
  v68 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v61 = (uint64_t)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_1000039AC(&qword_1003753E0);
  __chkstk_darwin(v67);
  v72 = (uint64_t)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000039AC(&qword_10036E4E8);
  v9 = __chkstk_darwin(v8);
  v66 = (uint64_t)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v69 = (uint64_t)&v61 - v12;
  __chkstk_darwin(v11);
  v70 = (uint64_t)&v61 - v13;
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1000039AC(&qword_100375338);
  __chkstk_darwin(v18);
  v20 = (char *)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1000039AC(&qword_10036E458);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v61 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v22);
  v27 = (char *)&v61 - v26;
  __chkstk_darwin(v25);
  v29 = (char *)&v61 - v28;
  v30 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification(0);
  sub_10000E660(v73 + v30[5], (uint64_t)v29, &qword_10036E458);
  sub_10000E660(v74 + v30[5], (uint64_t)v27, &qword_10036E458);
  v31 = (uint64_t)&v20[*(int *)(v18 + 48)];
  sub_10000E660((uint64_t)v29, (uint64_t)v20, &qword_10036E458);
  sub_10000E660((uint64_t)v27, v31, &qword_10036E458);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v32((uint64_t)v20, 1, v14) == 1)
  {
    sub_100015704((uint64_t)v27, &qword_10036E458);
    sub_100015704((uint64_t)v29, &qword_10036E458);
    if (v32(v31, 1, v14) == 1)
    {
      sub_100015704((uint64_t)v20, &qword_10036E458);
      goto LABEL_11;
    }
LABEL_6:
    v33 = &qword_100375338;
    v34 = (uint64_t)v20;
LABEL_7:
    sub_100015704(v34, v33);
    goto LABEL_8;
  }
  sub_10000E660((uint64_t)v20, (uint64_t)v24, &qword_10036E458);
  if (v32(v31, 1, v14) == 1)
  {
    sub_100015704((uint64_t)v27, &qword_10036E458);
    sub_100015704((uint64_t)v29, &qword_10036E458);
    sub_100004030((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  sub_100003E08(v31, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v37 = sub_1000656F0((uint64_t)v24, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004030((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v27, &qword_10036E458);
  sub_100015704((uint64_t)v29, &qword_10036E458);
  sub_100004030((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v20, &qword_10036E458);
  if ((v37 & 1) == 0)
    goto LABEL_8;
LABEL_11:
  v38 = v30[6];
  v39 = v73;
  v40 = v74;
  v41 = (_DWORD *)(v73 + v38);
  v42 = *(_BYTE *)(v73 + v38 + 4);
  v43 = (_DWORD *)(v74 + v38);
  v44 = *(unsigned __int8 *)(v74 + v38 + 4);
  if ((v42 & 1) != 0)
  {
    if (!v44)
      goto LABEL_8;
  }
  else
  {
    if (*v41 != *v43)
      LOBYTE(v44) = 1;
    if ((v44 & 1) != 0)
      goto LABEL_8;
  }
  v45 = v70;
  sub_10000E660(v73 + v30[7], v70, &qword_10036E4E8);
  v46 = v69;
  sub_10000E660(v40 + v30[7], v69, &qword_10036E4E8);
  v47 = v72;
  v48 = v72 + *(int *)(v67 + 48);
  sub_10000E660(v45, v72, &qword_10036E4E8);
  sub_10000E660(v46, v48, &qword_10036E4E8);
  v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48);
  v50 = v71;
  if (v49(v47, 1, v71) == 1)
  {
    sub_100015704(v46, &qword_10036E4E8);
    sub_100015704(v45, &qword_10036E4E8);
    if (v49(v48, 1, v50) == 1)
    {
      sub_100015704(v47, &qword_10036E4E8);
LABEL_24:
      v55 = v64;
      v54 = v65;
      v56 = *(void (**)(char *, uint64_t, uint64_t))(v64 + 16);
      v57 = v62;
      v56(v62, v39, v65);
      v58 = v63;
      v56(v63, v40, v54);
      v59 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
      v35 = dispatch thunk of static Equatable.== infix(_:_:)(v57, v58, v54, v59);
      v60 = *(void (**)(char *, uint64_t))(v55 + 8);
      v60(v58, v54);
      v60(v57, v54);
      return v35 & 1;
    }
    goto LABEL_22;
  }
  v51 = v66;
  sub_10000E660(v47, v66, &qword_10036E4E8);
  if (v49(v48, 1, v50) == 1)
  {
    sub_100015704(v46, &qword_10036E4E8);
    sub_100015704(v45, &qword_10036E4E8);
    sub_100004030(v51, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
LABEL_22:
    v33 = &qword_1003753E0;
    v34 = v47;
    goto LABEL_7;
  }
  v52 = v61;
  sub_100003E08(v48, v61, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
  v53 = sub_100112238(v51, v52);
  sub_100004030(v52, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
  sub_100015704(v46, &qword_10036E4E8);
  sub_100015704(v45, &qword_10036E4E8);
  sub_100004030(v51, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
  sub_100015704(v47, &qword_10036E4E8);
  if ((v53 & 1) != 0)
    goto LABEL_24;
LABEL_8:
  v35 = 0;
  return v35 & 1;
}

uint64_t sub_100111ED4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  int v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v19 - v9;
  v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl(0) + 20);
  v12 = *(unsigned __int8 *)(a1 + v11);
  v13 = *(unsigned __int8 *)(a2 + v11);
  if (v12 == 2)
  {
    if (v13 != 2)
    {
LABEL_7:
      v16 = 0;
      return v16 & 1;
    }
  }
  else if (v13 == 2 || ((((v13 & 1) == 0) ^ v12) & 1) == 0)
  {
    goto LABEL_7;
  }
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v14(v10, a1, v4);
  v14(v8, a2, v4);
  v15 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v16 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v15);
  v17 = *(void (**)(char *, uint64_t))(v5 + 8);
  v17(v8, v4);
  v17(v10, v4);
  return v16 & 1;
}

uint64_t sub_100112024(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v23;
  _DWORD *v24;
  char v25;
  _DWORD *v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  char v33;
  void (*v34)(char *, uint64_t);
  uint64_t v36;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v36 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0);
  v12 = v11[5];
  v13 = *(unsigned __int8 *)(a1 + v12);
  v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 3)
  {
    if (v14 != 3)
      goto LABEL_34;
  }
  else if (v14 == 3 || v13 != v14)
  {
    goto LABEL_34;
  }
  v16 = v11[6];
  v17 = *(unsigned __int8 *)(a1 + v16);
  v18 = *(unsigned __int8 *)(a2 + v16);
  if (v17 == 2)
  {
    if (v18 != 2)
      goto LABEL_34;
  }
  else if (v18 == 2 || ((((v18 & 1) == 0) ^ v17) & 1) == 0)
  {
    goto LABEL_34;
  }
  v19 = v11[7];
  v20 = *(unsigned __int8 *)(a1 + v19);
  v21 = *(unsigned __int8 *)(a2 + v19);
  if (v20 == 5)
  {
    if (v21 != 5)
      goto LABEL_34;
  }
  else if (v21 == 5 || v20 != v21)
  {
    goto LABEL_34;
  }
  v23 = v11[8];
  v24 = (_DWORD *)(a1 + v23);
  v25 = *(_BYTE *)(a1 + v23 + 4);
  v26 = (_DWORD *)(a2 + v23);
  v27 = *(unsigned __int8 *)(a2 + v23 + 4);
  if ((v25 & 1) != 0)
  {
    if (!v27)
      goto LABEL_34;
  }
  else
  {
    if (*v24 != *v26)
      LOBYTE(v27) = 1;
    if ((v27 & 1) != 0)
      goto LABEL_34;
  }
  v28 = v11[9];
  v29 = *(unsigned __int8 *)(a1 + v28);
  v30 = *(unsigned __int8 *)(a2 + v28);
  if (v29 == 2)
  {
    if (v30 == 2)
      goto LABEL_33;
LABEL_34:
    v33 = 0;
    return v33 & 1;
  }
  if (v30 == 2 || ((((v30 & 1) == 0) ^ v29) & 1) == 0)
    goto LABEL_34;
LABEL_33:
  v31 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v31(v10, a1, v4);
  v31(v8, a2, v4);
  v32 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v33 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v32);
  v34 = *(void (**)(char *, uint64_t))(v5 + 8);
  v34(v8, v4);
  v34(v10, v4);
  return v33 & 1;
}

uint64_t sub_100112238(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  char v30;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  double *v36;
  char v37;
  double *v38;
  int v39;
  uint64_t v40;
  double *v41;
  char v42;
  double *v43;
  int v44;
  uint64_t v45;
  double *v46;
  char v47;
  double *v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *);
  char *v65;
  char *v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t);
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v4 = type metadata accessor for UnknownStorage(0);
  v72 = *(_QWORD *)(v4 - 8);
  v73 = v4;
  v5 = __chkstk_darwin(v4);
  v71 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v70 = (char *)&v69 - v7;
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v74 = (uint64_t)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000039AC(&qword_100375338);
  __chkstk_darwin(v11);
  v13 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000039AC(&qword_10036E458);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v69 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v69 - v21;
  v23 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
  v24 = *(int *)(v23 + 20);
  v75 = a1;
  v25 = a1 + v24;
  v26 = (int *)v23;
  sub_10000E660(v25, (uint64_t)v22, &qword_10036E458);
  v27 = v26[5];
  v76 = a2;
  sub_10000E660(a2 + v27, (uint64_t)v20, &qword_10036E458);
  v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_10000E660((uint64_t)v22, (uint64_t)v13, &qword_10036E458);
  sub_10000E660((uint64_t)v20, v28, &qword_10036E458);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29((uint64_t)v13, 1, v8) != 1)
  {
    sub_10000E660((uint64_t)v13, (uint64_t)v17, &qword_10036E458);
    if (v29(v28, 1, v8) != 1)
    {
      v32 = v74;
      sub_100003E08(v28, v74, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      v33 = sub_1000656F0((uint64_t)v17, v32, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      sub_100004030(v32, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      sub_100015704((uint64_t)v20, &qword_10036E458);
      sub_100015704((uint64_t)v22, &qword_10036E458);
      sub_100004030((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      sub_100015704((uint64_t)v13, &qword_10036E458);
      if ((v33 & 1) == 0)
        goto LABEL_7;
      goto LABEL_10;
    }
    sub_100015704((uint64_t)v20, &qword_10036E458);
    sub_100015704((uint64_t)v22, &qword_10036E458);
    sub_100004030((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    sub_100015704((uint64_t)v13, &qword_100375338);
    goto LABEL_7;
  }
  sub_100015704((uint64_t)v20, &qword_10036E458);
  sub_100015704((uint64_t)v22, &qword_10036E458);
  if (v29(v28, 1, v8) != 1)
    goto LABEL_6;
  sub_100015704((uint64_t)v13, &qword_10036E458);
LABEL_10:
  v34 = v26[6];
  v35 = v76;
  v36 = (double *)(v75 + v34);
  v37 = *(_BYTE *)(v75 + v34 + 8);
  v38 = (double *)(v76 + v34);
  v39 = *(unsigned __int8 *)(v76 + v34 + 8);
  if ((v37 & 1) != 0)
  {
    if (!v39)
      goto LABEL_7;
  }
  else
  {
    if (*v36 != *v38)
      LOBYTE(v39) = 1;
    if ((v39 & 1) != 0)
      goto LABEL_7;
  }
  v40 = v26[7];
  v41 = (double *)(v75 + v40);
  v42 = *(_BYTE *)(v75 + v40 + 8);
  v43 = (double *)(v76 + v40);
  v44 = *(unsigned __int8 *)(v76 + v40 + 8);
  if ((v42 & 1) != 0)
  {
    if (!v44)
      goto LABEL_7;
  }
  else
  {
    if (*v41 != *v43)
      LOBYTE(v44) = 1;
    if ((v44 & 1) != 0)
      goto LABEL_7;
  }
  v45 = v26[8];
  v46 = (double *)(v75 + v45);
  v47 = *(_BYTE *)(v75 + v45 + 8);
  v48 = (double *)(v76 + v45);
  v49 = *(unsigned __int8 *)(v76 + v45 + 8);
  if ((v47 & 1) != 0)
  {
    if (!v49)
      goto LABEL_7;
  }
  else
  {
    if (*v46 != *v48)
      LOBYTE(v49) = 1;
    if ((v49 & 1) != 0)
      goto LABEL_7;
  }
  v50 = v26[9];
  v51 = *(unsigned __int8 *)(v75 + v50);
  v52 = *(unsigned __int8 *)(v76 + v50);
  if (v51 == 2)
  {
    if (v52 != 2)
      goto LABEL_7;
  }
  else if (v52 == 2 || ((((v52 & 1) == 0) ^ v51) & 1) == 0)
  {
    goto LABEL_7;
  }
  v53 = v26[10];
  v54 = *(unsigned __int8 *)(v75 + v53);
  v55 = *(unsigned __int8 *)(v76 + v53);
  if (v54 == 2)
  {
    if (v55 != 2)
      goto LABEL_7;
  }
  else if (v55 == 2 || ((((v55 & 1) == 0) ^ v54) & 1) == 0)
  {
    goto LABEL_7;
  }
  v56 = v26[11];
  v57 = *(unsigned __int8 *)(v75 + v56);
  v58 = *(unsigned __int8 *)(v76 + v56);
  if (v57 == 2)
  {
    if (v58 != 2)
      goto LABEL_7;
  }
  else if (v58 == 2 || ((((v58 & 1) == 0) ^ v57) & 1) == 0)
  {
    goto LABEL_7;
  }
  v59 = v26[12];
  v60 = *(unsigned __int8 *)(v75 + v59);
  v61 = *(unsigned __int8 *)(v76 + v59);
  if (v60 == 2)
  {
    if (v61 == 2)
    {
LABEL_48:
      v63 = v72;
      v62 = v73;
      v64 = *(void (**)(char *))(v72 + 16);
      v65 = v70;
      v64(v70);
      v66 = v71;
      ((void (*)(char *, uint64_t, uint64_t))v64)(v71, v35, v62);
      v67 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
      v30 = dispatch thunk of static Equatable.== infix(_:_:)(v65, v66, v62, v67);
      v68 = *(void (**)(char *, uint64_t))(v63 + 8);
      v68(v66, v62);
      v68(v65, v62);
      return v30 & 1;
    }
  }
  else if (v61 != 2 && ((((v61 & 1) == 0) ^ v60) & 1) != 0)
  {
    goto LABEL_48;
  }
LABEL_7:
  v30 = 0;
  return v30 & 1;
}

uint64_t sub_100112780(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  char v15;
  char v16;
  double v17;
  char v18;
  char v19;
  float v20;
  char v21;
  char v22;
  float v23;
  char v24;
  char v25;
  float v26;
  char v27;
  char v28;
  float v29;
  char v30;
  char v31;
  float v32;
  char v33;
  char v34;
  float v35;
  char v36;
  char v37;
  float v38;
  char v39;
  char v40;
  float v41;
  char v42;
  char v43;
  float v44;
  char v45;
  char v46;
  float v47;
  char v48;
  char v49;
  float v50;
  char v51;
  char v52;
  int v53;
  int v54;
  char v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  char v62;
  void (*v63)(char *, uint64_t, uint64_t);
  uint64_t v64;
  void (*v65)(char *, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE v96[24];
  _BYTE v97[24];
  _BYTE v98[24];
  _BYTE v99[24];
  _BYTE v100[24];
  _BYTE v101[32];

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v67 - v9;
  v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  v12 = *(_QWORD *)(a1 + v11);
  v13 = *(_QWORD *)(a2 + v11);
  if (v12 == v13)
    goto LABEL_100;
  v67 = a2;
  swift_beginAccess(v12 + 16, v101, 0, 0);
  v14 = *(double *)(v12 + 16);
  v15 = *(_BYTE *)(v12 + 24);
  swift_beginAccess(v13 + 16, v100, 0, 0);
  v16 = *(_BYTE *)(v13 + 24);
  if ((v15 & 1) != 0)
  {
    if (!*(_BYTE *)(v13 + 24))
      goto LABEL_101;
  }
  else
  {
    if (v14 != *(double *)(v13 + 16))
      v16 = 1;
    if ((v16 & 1) != 0)
      goto LABEL_101;
  }
  swift_beginAccess(v12 + 32, v99, 0, 0);
  v17 = *(double *)(v12 + 32);
  v18 = *(_BYTE *)(v12 + 40);
  swift_beginAccess(v13 + 32, v98, 0, 0);
  v19 = *(_BYTE *)(v13 + 40);
  if ((v18 & 1) != 0)
  {
    if (!*(_BYTE *)(v13 + 40))
      goto LABEL_101;
  }
  else
  {
    if (v17 != *(double *)(v13 + 32))
      v19 = 1;
    if ((v19 & 1) != 0)
      goto LABEL_101;
  }
  swift_beginAccess(v12 + 44, v97, 0, 0);
  v20 = *(float *)(v12 + 44);
  v21 = *(_BYTE *)(v12 + 48);
  swift_beginAccess(v13 + 44, v96, 0, 0);
  v22 = *(_BYTE *)(v13 + 48);
  if ((v21 & 1) != 0)
  {
    if (!*(_BYTE *)(v13 + 48))
      goto LABEL_101;
  }
  else
  {
    if (v20 != *(float *)(v13 + 44))
      v22 = 1;
    if ((v22 & 1) != 0)
      goto LABEL_101;
  }
  swift_beginAccess(v12 + 52, &v95, 0, 0);
  v23 = *(float *)(v12 + 52);
  v24 = *(_BYTE *)(v12 + 56);
  swift_beginAccess(v13 + 52, &v94, 0, 0);
  v25 = *(_BYTE *)(v13 + 56);
  if ((v24 & 1) != 0)
  {
    if (!*(_BYTE *)(v13 + 56))
      goto LABEL_101;
  }
  else
  {
    if (v23 != *(float *)(v13 + 52))
      v25 = 1;
    if ((v25 & 1) != 0)
      goto LABEL_101;
  }
  swift_beginAccess(v12 + 60, &v93, 0, 0);
  v26 = *(float *)(v12 + 60);
  v27 = *(_BYTE *)(v12 + 64);
  swift_beginAccess(v13 + 60, &v92, 0, 0);
  v28 = *(_BYTE *)(v13 + 64);
  if ((v27 & 1) != 0)
  {
    if (!*(_BYTE *)(v13 + 64))
      goto LABEL_101;
  }
  else
  {
    if (v26 != *(float *)(v13 + 60))
      v28 = 1;
    if ((v28 & 1) != 0)
      goto LABEL_101;
  }
  swift_beginAccess(v12 + 68, &v91, 0, 0);
  v29 = *(float *)(v12 + 68);
  v30 = *(_BYTE *)(v12 + 72);
  swift_beginAccess(v13 + 68, &v90, 0, 0);
  v31 = *(_BYTE *)(v13 + 72);
  if ((v30 & 1) != 0)
  {
    if (!*(_BYTE *)(v13 + 72))
      goto LABEL_101;
  }
  else
  {
    if (v29 != *(float *)(v13 + 68))
      v31 = 1;
    if ((v31 & 1) != 0)
      goto LABEL_101;
  }
  swift_beginAccess(v12 + 76, &v89, 0, 0);
  v32 = *(float *)(v12 + 76);
  v33 = *(_BYTE *)(v12 + 80);
  swift_beginAccess(v13 + 76, &v88, 0, 0);
  v34 = *(_BYTE *)(v13 + 80);
  if ((v33 & 1) != 0)
  {
    if (!*(_BYTE *)(v13 + 80))
      goto LABEL_101;
  }
  else
  {
    if (v32 != *(float *)(v13 + 76))
      v34 = 1;
    if ((v34 & 1) != 0)
      goto LABEL_101;
  }
  swift_beginAccess(v12 + 84, &v87, 0, 0);
  v35 = *(float *)(v12 + 84);
  v36 = *(_BYTE *)(v12 + 88);
  swift_beginAccess(v13 + 84, &v86, 0, 0);
  v37 = *(_BYTE *)(v13 + 88);
  if ((v36 & 1) != 0)
  {
    if (!*(_BYTE *)(v13 + 88))
      goto LABEL_101;
  }
  else
  {
    if (v35 != *(float *)(v13 + 84))
      v37 = 1;
    if ((v37 & 1) != 0)
      goto LABEL_101;
  }
  swift_beginAccess(v12 + 92, &v85, 0, 0);
  v38 = *(float *)(v12 + 92);
  v39 = *(_BYTE *)(v12 + 96);
  swift_beginAccess(v13 + 92, &v84, 0, 0);
  v40 = *(_BYTE *)(v13 + 96);
  if ((v39 & 1) != 0)
  {
    if (!*(_BYTE *)(v13 + 96))
      goto LABEL_101;
  }
  else
  {
    if (v38 != *(float *)(v13 + 92))
      v40 = 1;
    if ((v40 & 1) != 0)
      goto LABEL_101;
  }
  swift_beginAccess(v12 + 100, &v83, 0, 0);
  v41 = *(float *)(v12 + 100);
  v42 = *(_BYTE *)(v12 + 104);
  swift_beginAccess(v13 + 100, &v82, 0, 0);
  v43 = *(_BYTE *)(v13 + 104);
  if ((v42 & 1) != 0)
  {
    if (!*(_BYTE *)(v13 + 104))
      goto LABEL_101;
  }
  else
  {
    if (v41 != *(float *)(v13 + 100))
      v43 = 1;
    if ((v43 & 1) != 0)
      goto LABEL_101;
  }
  swift_beginAccess(v12 + 108, &v81, 0, 0);
  v44 = *(float *)(v12 + 108);
  v45 = *(_BYTE *)(v12 + 112);
  swift_beginAccess(v13 + 108, &v80, 0, 0);
  v46 = *(_BYTE *)(v13 + 112);
  if ((v45 & 1) != 0)
  {
    if (!*(_BYTE *)(v13 + 112))
      goto LABEL_101;
  }
  else
  {
    if (v44 != *(float *)(v13 + 108))
      v46 = 1;
    if ((v46 & 1) != 0)
      goto LABEL_101;
  }
  swift_beginAccess(v12 + 116, &v79, 0, 0);
  v47 = *(float *)(v12 + 116);
  v48 = *(_BYTE *)(v12 + 120);
  swift_beginAccess(v13 + 116, &v78, 0, 0);
  v49 = *(_BYTE *)(v13 + 120);
  if ((v48 & 1) != 0)
  {
    if (!*(_BYTE *)(v13 + 120))
      goto LABEL_101;
  }
  else
  {
    if (v47 != *(float *)(v13 + 116))
      v49 = 1;
    if ((v49 & 1) != 0)
      goto LABEL_101;
  }
  swift_beginAccess(v12 + 124, &v77, 0, 0);
  v50 = *(float *)(v12 + 124);
  v51 = *(_BYTE *)(v12 + 128);
  swift_beginAccess(v13 + 124, &v76, 0, 0);
  v52 = *(_BYTE *)(v13 + 128);
  if ((v51 & 1) != 0)
  {
    if (!*(_BYTE *)(v13 + 128))
      goto LABEL_101;
  }
  else
  {
    if (v50 != *(float *)(v13 + 124))
      v52 = 1;
    if ((v52 & 1) != 0)
      goto LABEL_101;
  }
  swift_beginAccess(v12 + 129, &v75, 0, 0);
  v53 = *(unsigned __int8 *)(v12 + 129);
  swift_beginAccess(v13 + 129, &v74, 0, 0);
  v54 = *(unsigned __int8 *)(v13 + 129);
  if (v53 == 3)
  {
    if (v54 != 3)
      goto LABEL_101;
    goto LABEL_85;
  }
  v55 = 0;
  if (v54 != 3 && v53 == v54)
  {
LABEL_85:
    swift_beginAccess(v12 + 130, &v73, 0, 0);
    v56 = *(unsigned __int8 *)(v12 + 130);
    swift_beginAccess(v13 + 130, &v72, 0, 0);
    v57 = *(unsigned __int8 *)(v13 + 130);
    if (v56 == 2)
    {
      if (v57 != 2)
        goto LABEL_101;
    }
    else if (v57 == 2 || ((v56 ^ ((v57 & 1) == 0)) & 1) == 0)
    {
      goto LABEL_101;
    }
    swift_beginAccess(v12 + 131, &v71, 0, 0);
    v58 = *(unsigned __int8 *)(v12 + 131);
    swift_beginAccess(v13 + 131, &v70, 0, 0);
    v59 = *(unsigned __int8 *)(v13 + 131);
    if (v58 == 2)
    {
      if (v59 != 2)
        goto LABEL_101;
    }
    else if (v59 == 2 || ((v58 ^ ((v59 & 1) == 0)) & 1) == 0)
    {
      goto LABEL_101;
    }
    swift_beginAccess(v12 + 132, &v69, 0, 0);
    v60 = *(unsigned __int8 *)(v12 + 132);
    swift_beginAccess(v13 + 132, &v68, 0, 0);
    v61 = *(unsigned __int8 *)(v13 + 132);
    if (v60 == 2)
    {
      a2 = v67;
      if (v61 == 2)
      {
LABEL_100:
        v63 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
        v63(v10, a1, v4);
        v63(v8, a2, v4);
        v64 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
        v55 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v64);
        v65 = *(void (**)(char *, uint64_t))(v5 + 8);
        v65(v8, v4);
        v65(v10, v4);
        return v55 & 1;
      }
    }
    else if (v61 != 2)
    {
      v62 = v60 ^ ((v61 & 1) == 0);
      a2 = v67;
      if ((v62 & 1) != 0)
        goto LABEL_100;
    }
LABEL_101:
    v55 = 0;
  }
  return v55 & 1;
}

uint64_t sub_100112E80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  void (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  char v38;
  void (*v39)(char *, uint64_t);
  uint64_t v41;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v41 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  v12 = v11[5];
  v13 = *(unsigned __int8 *)(a1 + v12);
  v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 2)
  {
    if (v14 != 2)
      goto LABEL_42;
  }
  else if (v14 == 2 || ((((v14 & 1) == 0) ^ v13) & 1) == 0)
  {
    goto LABEL_42;
  }
  v15 = v11[6];
  v16 = *(unsigned __int8 *)(a1 + v15);
  v17 = *(unsigned __int8 *)(a2 + v15);
  if (v16 == 2)
  {
    if (v17 != 2)
      goto LABEL_42;
  }
  else if (v17 == 2 || ((((v17 & 1) == 0) ^ v16) & 1) == 0)
  {
    goto LABEL_42;
  }
  v18 = v11[7];
  v19 = *(unsigned __int8 *)(a1 + v18);
  v20 = *(unsigned __int8 *)(a2 + v18);
  if (v19 == 2)
  {
    if (v20 != 2)
      goto LABEL_42;
  }
  else if (v20 == 2 || ((((v20 & 1) == 0) ^ v19) & 1) == 0)
  {
    goto LABEL_42;
  }
  v21 = v11[8];
  v22 = *(unsigned __int8 *)(a1 + v21);
  v23 = *(unsigned __int8 *)(a2 + v21);
  if (v22 == 2)
  {
    if (v23 != 2)
      goto LABEL_42;
  }
  else if (v23 == 2 || ((((v23 & 1) == 0) ^ v22) & 1) == 0)
  {
    goto LABEL_42;
  }
  v24 = v11[9];
  v25 = *(unsigned __int8 *)(a1 + v24);
  v26 = *(unsigned __int8 *)(a2 + v24);
  if (v25 == 2)
  {
    if (v26 != 2)
      goto LABEL_42;
  }
  else if (v26 == 2 || ((((v26 & 1) == 0) ^ v25) & 1) == 0)
  {
    goto LABEL_42;
  }
  v27 = v11[10];
  v28 = *(unsigned __int8 *)(a1 + v27);
  v29 = *(unsigned __int8 *)(a2 + v27);
  if (v28 == 2)
  {
    if (v29 != 2)
      goto LABEL_42;
  }
  else if (v29 == 2 || ((((v29 & 1) == 0) ^ v28) & 1) == 0)
  {
    goto LABEL_42;
  }
  v30 = v11[11];
  v31 = *(unsigned __int8 *)(a1 + v30);
  v32 = *(unsigned __int8 *)(a2 + v30);
  if (v31 == 2)
  {
    if (v32 != 2)
      goto LABEL_42;
  }
  else if (v32 == 2 || ((((v32 & 1) == 0) ^ v31) & 1) == 0)
  {
    goto LABEL_42;
  }
  v33 = v11[12];
  v34 = *(unsigned __int8 *)(a1 + v33);
  v35 = *(unsigned __int8 *)(a2 + v33);
  if (v34 == 2)
  {
    if (v35 == 2)
      goto LABEL_41;
LABEL_42:
    v38 = 0;
    return v38 & 1;
  }
  if (v35 == 2 || ((((v35 & 1) == 0) ^ v34) & 1) == 0)
    goto LABEL_42;
LABEL_41:
  v36 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v36(v10, a1, v4);
  v36(v8, a2, v4);
  v37 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v38 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v37);
  v39 = *(void (**)(char *, uint64_t))(v5 + 8);
  v39(v8, v4);
  v39(v10, v4);
  return v38 & 1;
}

uint64_t sub_100113158(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  int v17;
  int v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v25;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v25 - v9;
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0);
  v12 = *(int *)(v11 + 20);
  v13 = *(unsigned __int8 *)(a1 + v12);
  v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 8)
  {
    if (v14 != 8)
      goto LABEL_16;
  }
  else if (v14 == 8 || v13 != v14)
  {
    goto LABEL_16;
  }
  v16 = *(int *)(v11 + 24);
  v17 = *(unsigned __int8 *)(a1 + v16);
  v18 = *(unsigned __int8 *)(a2 + v16);
  if (v17 != 4)
  {
    if (v18 != 4 && v17 == v18)
      goto LABEL_11;
LABEL_16:
    v21 = 0;
    return v21 & 1;
  }
  if (v18 != 4)
    goto LABEL_16;
LABEL_11:
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v19(v10, a1, v4);
  v19(v8, a2, v4);
  v20 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v21 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v20);
  v22 = *(void (**)(char *, uint64_t))(v5 + 8);
  v22(v8, v4);
  v22(v10, v4);
  return v21 & 1;
}

uint64_t sub_1001132C4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  int *v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  char v20;
  _QWORD *v21;
  int v22;
  char v23;
  char *v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v29 - v9;
  if ((sub_10010B2D8(*a1, *a2, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, (uint64_t (*)(char *, char *))sub_10011EB24) & 1) == 0)goto LABEL_10;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0);
  v12 = v11;
  v13 = v11[6];
  v14 = (uint64_t *)((char *)a1 + v13);
  v15 = *((_BYTE *)a1 + v13 + 8);
  v16 = (uint64_t *)((char *)a2 + v13);
  v17 = *((unsigned __int8 *)a2 + v13 + 8);
  if ((v15 & 1) != 0)
  {
    if (!v17)
      goto LABEL_10;
  }
  else
  {
    if (*v14 != *v16)
      LOBYTE(v17) = 1;
    if ((v17 & 1) != 0)
      goto LABEL_10;
  }
  v18 = v11[7];
  v19 = (uint64_t *)((char *)a1 + v18);
  v20 = *((_BYTE *)a1 + v18 + 8);
  v21 = (uint64_t *)((char *)a2 + v18);
  v22 = *((unsigned __int8 *)a2 + v18 + 8);
  if ((v20 & 1) == 0)
  {
    if (*v19 != *v21)
      LOBYTE(v22) = 1;
    if ((v22 & 1) != 0)
      goto LABEL_10;
LABEL_15:
    v25 = (char *)a1 + v11[5];
    v26 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v26(v10, v25, v4);
    v26(v8, (char *)a2 + v12[5], v4);
    v27 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v23 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v27);
    v28 = *(void (**)(char *, uint64_t))(v5 + 8);
    v28(v8, v4);
    v28(v10, v4);
    return v23 & 1;
  }
  if (v22)
    goto LABEL_15;
LABEL_10:
  v23 = 0;
  return v23 & 1;
}

uint64_t sub_10011346C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  char v30;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  double *v36;
  char v37;
  double *v38;
  int v39;
  uint64_t v40;
  double *v41;
  char v42;
  double *v43;
  int v44;
  uint64_t v45;
  float *v46;
  char v47;
  float *v48;
  int v49;
  uint64_t v50;
  float *v51;
  char v52;
  float *v53;
  int v54;
  uint64_t v55;
  float *v56;
  char v57;
  float *v58;
  int v59;
  uint64_t v60;
  _DWORD *v61;
  char v62;
  _DWORD *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(char *);
  char *v68;
  char *v69;
  uint64_t v70;
  void (*v71)(char *, uint64_t);
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v4 = type metadata accessor for UnknownStorage(0);
  v75 = *(_QWORD *)(v4 - 8);
  v76 = v4;
  v5 = __chkstk_darwin(v4);
  v74 = (char *)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v73 = (char *)&v72 - v7;
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v77 = (uint64_t)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000039AC(&qword_100375338);
  __chkstk_darwin(v11);
  v13 = (char *)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000039AC(&qword_10036E458);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v72 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v72 - v21;
  v23 = type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0);
  v24 = *(int *)(v23 + 20);
  v78 = a1;
  v25 = a1 + v24;
  v26 = (int *)v23;
  sub_10000E660(v25, (uint64_t)v22, &qword_10036E458);
  v27 = v26[5];
  v79 = a2;
  sub_10000E660(a2 + v27, (uint64_t)v20, &qword_10036E458);
  v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_10000E660((uint64_t)v22, (uint64_t)v13, &qword_10036E458);
  sub_10000E660((uint64_t)v20, v28, &qword_10036E458);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29((uint64_t)v13, 1, v8) != 1)
  {
    sub_10000E660((uint64_t)v13, (uint64_t)v17, &qword_10036E458);
    if (v29(v28, 1, v8) != 1)
    {
      v32 = v77;
      sub_100003E08(v28, v77, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      v33 = sub_1000656F0((uint64_t)v17, v32, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      sub_100004030(v32, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      sub_100015704((uint64_t)v20, &qword_10036E458);
      sub_100015704((uint64_t)v22, &qword_10036E458);
      sub_100004030((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      sub_100015704((uint64_t)v13, &qword_10036E458);
      if ((v33 & 1) == 0)
        goto LABEL_7;
      goto LABEL_10;
    }
    sub_100015704((uint64_t)v20, &qword_10036E458);
    sub_100015704((uint64_t)v22, &qword_10036E458);
    sub_100004030((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    sub_100015704((uint64_t)v13, &qword_100375338);
    goto LABEL_7;
  }
  sub_100015704((uint64_t)v20, &qword_10036E458);
  sub_100015704((uint64_t)v22, &qword_10036E458);
  if (v29(v28, 1, v8) != 1)
    goto LABEL_6;
  sub_100015704((uint64_t)v13, &qword_10036E458);
LABEL_10:
  v34 = v26[6];
  v35 = v79;
  v36 = (double *)(v78 + v34);
  v37 = *(_BYTE *)(v78 + v34 + 8);
  v38 = (double *)(v79 + v34);
  v39 = *(unsigned __int8 *)(v79 + v34 + 8);
  if ((v37 & 1) != 0)
  {
    if (!v39)
      goto LABEL_7;
  }
  else
  {
    if (*v36 != *v38)
      LOBYTE(v39) = 1;
    if ((v39 & 1) != 0)
      goto LABEL_7;
  }
  v40 = v26[7];
  v41 = (double *)(v78 + v40);
  v42 = *(_BYTE *)(v78 + v40 + 8);
  v43 = (double *)(v79 + v40);
  v44 = *(unsigned __int8 *)(v79 + v40 + 8);
  if ((v42 & 1) != 0)
  {
    if (!v44)
      goto LABEL_7;
  }
  else
  {
    if (*v41 != *v43)
      LOBYTE(v44) = 1;
    if ((v44 & 1) != 0)
      goto LABEL_7;
  }
  v45 = v26[8];
  v46 = (float *)(v78 + v45);
  v47 = *(_BYTE *)(v78 + v45 + 4);
  v48 = (float *)(v79 + v45);
  v49 = *(unsigned __int8 *)(v79 + v45 + 4);
  if ((v47 & 1) != 0)
  {
    if (!v49)
      goto LABEL_7;
  }
  else
  {
    if (*v46 != *v48)
      LOBYTE(v49) = 1;
    if ((v49 & 1) != 0)
      goto LABEL_7;
  }
  v50 = v26[9];
  v51 = (float *)(v78 + v50);
  v52 = *(_BYTE *)(v78 + v50 + 4);
  v53 = (float *)(v79 + v50);
  v54 = *(unsigned __int8 *)(v79 + v50 + 4);
  if ((v52 & 1) != 0)
  {
    if (!v54)
      goto LABEL_7;
  }
  else
  {
    if (*v51 != *v53)
      LOBYTE(v54) = 1;
    if ((v54 & 1) != 0)
      goto LABEL_7;
  }
  v55 = v26[10];
  v56 = (float *)(v78 + v55);
  v57 = *(_BYTE *)(v78 + v55 + 4);
  v58 = (float *)(v79 + v55);
  v59 = *(unsigned __int8 *)(v79 + v55 + 4);
  if ((v57 & 1) != 0)
  {
    if (!v59)
      goto LABEL_7;
  }
  else
  {
    if (*v56 != *v58)
      LOBYTE(v59) = 1;
    if ((v59 & 1) != 0)
      goto LABEL_7;
  }
  v60 = v26[11];
  v61 = (_DWORD *)(v78 + v60);
  v62 = *(_BYTE *)(v78 + v60 + 4);
  v63 = (_DWORD *)(v79 + v60);
  v64 = *(unsigned __int8 *)(v79 + v60 + 4);
  if ((v62 & 1) != 0)
  {
    if (v64)
    {
LABEL_46:
      v66 = v75;
      v65 = v76;
      v67 = *(void (**)(char *))(v75 + 16);
      v68 = v73;
      v67(v73);
      v69 = v74;
      ((void (*)(char *, uint64_t, uint64_t))v67)(v74, v35, v65);
      v70 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
      v30 = dispatch thunk of static Equatable.== infix(_:_:)(v68, v69, v65, v70);
      v71 = *(void (**)(char *, uint64_t))(v66 + 8);
      v71(v69, v65);
      v71(v68, v65);
      return v30 & 1;
    }
  }
  else
  {
    if (*v61 != *v63)
      LOBYTE(v64) = 1;
    if ((v64 & 1) == 0)
      goto LABEL_46;
  }
LABEL_7:
  v30 = 0;
  return v30 & 1;
}

uint64_t sub_100113970(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  int *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v51;
  char v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, char *, uint64_t);
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  void (*v67)(char *, uint64_t);
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t *v79;

  v79 = a2;
  v3 = type metadata accessor for UnknownStorage(0);
  v70 = *(_QWORD *)(v3 - 8);
  v71 = v3;
  v4 = __chkstk_darwin(v3);
  v69 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v68 = (char *)&v68 - v6;
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v73 = (uint64_t)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000039AC(&qword_100375338);
  v11 = __chkstk_darwin(v10);
  v76 = (uint64_t)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v68 - v13;
  v15 = sub_1000039AC(&qword_10036E458);
  v16 = __chkstk_darwin(v15);
  v72 = (uint64_t)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v75 = (uint64_t)&v68 - v19;
  v20 = __chkstk_darwin(v18);
  v78 = (uint64_t)&v68 - v21;
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v68 - v23;
  v25 = __chkstk_darwin(v22);
  v27 = (char *)&v68 - v26;
  __chkstk_darwin(v25);
  v29 = (char *)&v68 - v28;
  v30 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0);
  v31 = *(int *)(v30 + 24);
  v77 = a1;
  sub_10000E660((uint64_t)a1 + v31, (uint64_t)v29, &qword_10036E458);
  v32 = (int *)v30;
  sub_10000E660((uint64_t)v79 + *(int *)(v30 + 24), (uint64_t)v27, &qword_10036E458);
  v74 = v10;
  v33 = *(int *)(v10 + 48);
  v34 = v7;
  v35 = (uint64_t)&v14[v33];
  sub_10000E660((uint64_t)v29, (uint64_t)v14, &qword_10036E458);
  sub_10000E660((uint64_t)v27, v35, &qword_10036E458);
  v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v36((uint64_t)v14, 1, v34) == 1)
  {
    sub_100015704((uint64_t)v27, &qword_10036E458);
    sub_100015704((uint64_t)v29, &qword_10036E458);
    if (v36(v35, 1, v34) == 1)
    {
      sub_100015704((uint64_t)v14, &qword_10036E458);
      goto LABEL_8;
    }
LABEL_6:
    v37 = (uint64_t)v14;
LABEL_14:
    sub_100015704(v37, &qword_100375338);
    goto LABEL_15;
  }
  sub_10000E660((uint64_t)v14, (uint64_t)v24, &qword_10036E458);
  if (v36(v35, 1, v34) == 1)
  {
    sub_100015704((uint64_t)v27, &qword_10036E458);
    sub_100015704((uint64_t)v29, &qword_10036E458);
    sub_100004030((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  v38 = v35;
  v39 = v73;
  sub_100003E08(v38, v73, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v40 = sub_1000656F0((uint64_t)v24, v39, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004030(v39, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v27, &qword_10036E458);
  sub_100015704((uint64_t)v29, &qword_10036E458);
  sub_100004030((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v14, &qword_10036E458);
  if ((v40 & 1) == 0)
    goto LABEL_15;
LABEL_8:
  v41 = v32;
  v42 = v77;
  v43 = v78;
  sub_10000E660((uint64_t)v77 + v32[7], v78, &qword_10036E458);
  v44 = v79;
  v45 = v75;
  sub_10000E660((uint64_t)v79 + v32[7], v75, &qword_10036E458);
  v46 = v76;
  v47 = v76 + *(int *)(v74 + 48);
  sub_10000E660(v43, v76, &qword_10036E458);
  sub_10000E660(v45, v47, &qword_10036E458);
  if (v36(v46, 1, v34) == 1)
  {
    sub_100015704(v45, &qword_10036E458);
    sub_100015704(v43, &qword_10036E458);
    if (v36(v47, 1, v34) == 1)
    {
      sub_100015704(v46, &qword_10036E458);
      goto LABEL_18;
    }
    goto LABEL_13;
  }
  v48 = v72;
  sub_10000E660(v46, v72, &qword_10036E458);
  if (v36(v47, 1, v34) == 1)
  {
    sub_100015704(v45, &qword_10036E458);
    sub_100015704(v78, &qword_10036E458);
    sub_100004030(v48, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_13:
    v37 = v46;
    goto LABEL_14;
  }
  v51 = v73;
  sub_100003E08(v47, v73, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v52 = sub_1000656F0(v48, v51, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004030(v51, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704(v45, &qword_10036E458);
  sub_100015704(v78, &qword_10036E458);
  sub_100004030(v48, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704(v46, &qword_10036E458);
  if ((v52 & 1) == 0)
    goto LABEL_15;
LABEL_18:
  v53 = v41[8];
  v54 = *((unsigned __int8 *)v42 + v53);
  v55 = *((unsigned __int8 *)v44 + v53);
  if (v54 == 7)
  {
    if (v55 != 7)
      goto LABEL_15;
  }
  else
  {
    v49 = 0;
    if (v55 == 7 || v54 != v55)
      return v49 & 1;
  }
  v56 = v41[9];
  v57 = *((unsigned __int8 *)v42 + v56);
  v58 = *((unsigned __int8 *)v44 + v56);
  if (v57 == 7)
  {
    if (v58 == 7)
      goto LABEL_28;
LABEL_15:
    v49 = 0;
    return v49 & 1;
  }
  v49 = 0;
  if (v58 != 7 && v57 == v58)
  {
LABEL_28:
    if ((sub_10010B2D8(*v42, *v44, type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData, (uint64_t (*)(char *, char *))sub_10011F7BC) & 1) != 0)
    {
      v59 = (char *)v42 + v41[5];
      v61 = v70;
      v60 = v71;
      v62 = *(void (**)(char *, char *, uint64_t))(v70 + 16);
      v63 = v68;
      v62(v68, v59, v71);
      v64 = (char *)v44 + v41[5];
      v65 = v69;
      v62(v69, v64, v60);
      v66 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
      v49 = dispatch thunk of static Equatable.== infix(_:_:)(v63, v65, v60, v66);
      v67 = *(void (**)(char *, uint64_t))(v61 + 8);
      v67(v65, v60);
      v67(v63, v60);
      return v49 & 1;
    }
    goto LABEL_15;
  }
  return v49 & 1;
}

uint64_t sub_100114014(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  int *v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t *v33;
  uint64_t v34;
  char v35;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  char v42;
  _DWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t, uint64_t);
  char *v57;
  char *v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v73 = a1;
  v74 = a2;
  v2 = type metadata accessor for UnknownStorage(0);
  v64 = *(_QWORD *)(v2 - 8);
  v65 = v2;
  v3 = __chkstk_darwin(v2);
  v63 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v62 = (char *)&v61 - v5;
  v71 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  v68 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v61 = (uint64_t)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_1000039AC(&qword_100375408);
  __chkstk_darwin(v67);
  v72 = (uint64_t)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000039AC(&qword_10036E4C0);
  v9 = __chkstk_darwin(v8);
  v66 = (uint64_t)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v69 = (uint64_t)&v61 - v12;
  __chkstk_darwin(v11);
  v70 = (uint64_t)&v61 - v13;
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1000039AC(&qword_100375338);
  __chkstk_darwin(v18);
  v20 = (char *)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1000039AC(&qword_10036E458);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v61 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v22);
  v27 = (char *)&v61 - v26;
  __chkstk_darwin(v25);
  v29 = (char *)&v61 - v28;
  v30 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver(0);
  sub_10000E660(v73 + v30[5], (uint64_t)v29, &qword_10036E458);
  sub_10000E660(v74 + v30[5], (uint64_t)v27, &qword_10036E458);
  v31 = (uint64_t)&v20[*(int *)(v18 + 48)];
  sub_10000E660((uint64_t)v29, (uint64_t)v20, &qword_10036E458);
  sub_10000E660((uint64_t)v27, v31, &qword_10036E458);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v32((uint64_t)v20, 1, v14) == 1)
  {
    sub_100015704((uint64_t)v27, &qword_10036E458);
    sub_100015704((uint64_t)v29, &qword_10036E458);
    if (v32(v31, 1, v14) == 1)
    {
      sub_100015704((uint64_t)v20, &qword_10036E458);
      goto LABEL_11;
    }
LABEL_6:
    v33 = &qword_100375338;
    v34 = (uint64_t)v20;
LABEL_7:
    sub_100015704(v34, v33);
    goto LABEL_8;
  }
  sub_10000E660((uint64_t)v20, (uint64_t)v24, &qword_10036E458);
  if (v32(v31, 1, v14) == 1)
  {
    sub_100015704((uint64_t)v27, &qword_10036E458);
    sub_100015704((uint64_t)v29, &qword_10036E458);
    sub_100004030((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  sub_100003E08(v31, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v37 = sub_1000656F0((uint64_t)v24, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004030((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v27, &qword_10036E458);
  sub_100015704((uint64_t)v29, &qword_10036E458);
  sub_100004030((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v20, &qword_10036E458);
  if ((v37 & 1) == 0)
    goto LABEL_8;
LABEL_11:
  v38 = v30[6];
  v39 = v73;
  v40 = v74;
  v41 = (_DWORD *)(v73 + v38);
  v42 = *(_BYTE *)(v73 + v38 + 4);
  v43 = (_DWORD *)(v74 + v38);
  v44 = *(unsigned __int8 *)(v74 + v38 + 4);
  if ((v42 & 1) != 0)
  {
    if (!v44)
      goto LABEL_8;
  }
  else
  {
    if (*v41 != *v43)
      LOBYTE(v44) = 1;
    if ((v44 & 1) != 0)
      goto LABEL_8;
  }
  v45 = v70;
  sub_10000E660(v73 + v30[7], v70, &qword_10036E4C0);
  v46 = v69;
  sub_10000E660(v40 + v30[7], v69, &qword_10036E4C0);
  v47 = v72;
  v48 = v72 + *(int *)(v67 + 48);
  sub_10000E660(v45, v72, &qword_10036E4C0);
  sub_10000E660(v46, v48, &qword_10036E4C0);
  v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48);
  v50 = v71;
  if (v49(v47, 1, v71) == 1)
  {
    sub_100015704(v46, &qword_10036E4C0);
    sub_100015704(v45, &qword_10036E4C0);
    if (v49(v48, 1, v50) == 1)
    {
      sub_100015704(v47, &qword_10036E4C0);
LABEL_24:
      v55 = v64;
      v54 = v65;
      v56 = *(void (**)(char *, uint64_t, uint64_t))(v64 + 16);
      v57 = v62;
      v56(v62, v39, v65);
      v58 = v63;
      v56(v63, v40, v54);
      v59 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
      v35 = dispatch thunk of static Equatable.== infix(_:_:)(v57, v58, v54, v59);
      v60 = *(void (**)(char *, uint64_t))(v55 + 8);
      v60(v58, v54);
      v60(v57, v54);
      return v35 & 1;
    }
    goto LABEL_22;
  }
  v51 = v66;
  sub_10000E660(v47, v66, &qword_10036E4C0);
  if (v49(v48, 1, v50) == 1)
  {
    sub_100015704(v46, &qword_10036E4C0);
    sub_100015704(v45, &qword_10036E4C0);
    sub_100004030(v51, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
LABEL_22:
    v33 = &qword_100375408;
    v34 = v47;
    goto LABEL_7;
  }
  v52 = v61;
  sub_100003E08(v48, v61, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
  v53 = sub_10011605C(v51, v52);
  sub_100004030(v52, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
  sub_100015704(v46, &qword_10036E4C0);
  sub_100015704(v45, &qword_10036E4C0);
  sub_100004030(v51, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
  sub_100015704(v47, &qword_10036E4C0);
  if ((v53 & 1) != 0)
    goto LABEL_24;
LABEL_8:
  v35 = 0;
  return v35 & 1;
}

uint64_t sub_1001146C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  _DWORD *v17;
  char v18;
  _DWORD *v19;
  int v20;
  uint64_t v21;
  float *v22;
  char v23;
  float *v24;
  int v25;
  uint64_t v26;
  float *v27;
  char v28;
  float *v29;
  int v30;
  uint64_t v31;
  float *v32;
  char v33;
  float *v34;
  int v35;
  uint64_t v36;
  float *v37;
  char v38;
  float *v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  void (*v47)(char *, uint64_t, uint64_t);
  uint64_t v48;
  char v49;
  void (*v50)(char *, uint64_t);
  uint64_t v52;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v52 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0);
  v12 = v11[5];
  v13 = *(unsigned __int8 *)(a1 + v12);
  v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 7)
  {
    if (v14 != 7)
      goto LABEL_50;
  }
  else if (v14 == 7 || v13 != v14)
  {
    goto LABEL_50;
  }
  v16 = v11[6];
  v17 = (_DWORD *)(a1 + v16);
  v18 = *(_BYTE *)(a1 + v16 + 4);
  v19 = (_DWORD *)(a2 + v16);
  v20 = *(unsigned __int8 *)(a2 + v16 + 4);
  if ((v18 & 1) != 0)
  {
    if (!v20)
      goto LABEL_50;
  }
  else
  {
    if (*v17 != *v19)
      LOBYTE(v20) = 1;
    if ((v20 & 1) != 0)
      goto LABEL_50;
  }
  v21 = v11[7];
  v22 = (float *)(a1 + v21);
  v23 = *(_BYTE *)(a1 + v21 + 4);
  v24 = (float *)(a2 + v21);
  v25 = *(unsigned __int8 *)(a2 + v21 + 4);
  if ((v23 & 1) != 0)
  {
    if (!v25)
      goto LABEL_50;
  }
  else
  {
    if (*v22 != *v24)
      LOBYTE(v25) = 1;
    if ((v25 & 1) != 0)
      goto LABEL_50;
  }
  v26 = v11[8];
  v27 = (float *)(a1 + v26);
  v28 = *(_BYTE *)(a1 + v26 + 4);
  v29 = (float *)(a2 + v26);
  v30 = *(unsigned __int8 *)(a2 + v26 + 4);
  if ((v28 & 1) != 0)
  {
    if (!v30)
      goto LABEL_50;
  }
  else
  {
    if (*v27 != *v29)
      LOBYTE(v30) = 1;
    if ((v30 & 1) != 0)
      goto LABEL_50;
  }
  v31 = v11[9];
  v32 = (float *)(a1 + v31);
  v33 = *(_BYTE *)(a1 + v31 + 4);
  v34 = (float *)(a2 + v31);
  v35 = *(unsigned __int8 *)(a2 + v31 + 4);
  if ((v33 & 1) != 0)
  {
    if (!v35)
      goto LABEL_50;
  }
  else
  {
    if (*v32 != *v34)
      LOBYTE(v35) = 1;
    if ((v35 & 1) != 0)
      goto LABEL_50;
  }
  v36 = v11[10];
  v37 = (float *)(a1 + v36);
  v38 = *(_BYTE *)(a1 + v36 + 4);
  v39 = (float *)(a2 + v36);
  v40 = *(unsigned __int8 *)(a2 + v36 + 4);
  if ((v38 & 1) != 0)
  {
    if (!v40)
      goto LABEL_50;
  }
  else
  {
    if (*v37 != *v39)
      LOBYTE(v40) = 1;
    if ((v40 & 1) != 0)
      goto LABEL_50;
  }
  v41 = v11[11];
  v42 = *(unsigned __int8 *)(a1 + v41);
  v43 = *(unsigned __int8 *)(a2 + v41);
  if (v42 == 2)
  {
    if (v43 != 2)
      goto LABEL_50;
  }
  else if (v43 == 2 || ((((v43 & 1) == 0) ^ v42) & 1) == 0)
  {
    goto LABEL_50;
  }
  v44 = v11[12];
  v45 = *(unsigned __int8 *)(a1 + v44);
  v46 = *(unsigned __int8 *)(a2 + v44);
  if (v45 == 2)
  {
    if (v46 == 2)
      goto LABEL_49;
LABEL_50:
    v49 = 0;
    return v49 & 1;
  }
  if (v46 == 2 || ((((v46 & 1) == 0) ^ v45) & 1) == 0)
    goto LABEL_50;
LABEL_49:
  v47 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v47(v10, a1, v4);
  v47(v8, a2, v4);
  v48 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v49 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v48);
  v50 = *(void (**)(char *, uint64_t))(v5 + 8);
  v50(v8, v4);
  v50(v10, v4);
  return v49 & 1;
}

uint64_t sub_100114978(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  char v14;
  double *v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v28;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v28 - v9;
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
  v12 = *(int *)(v11 + 20);
  v13 = (double *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 8);
  v15 = (double *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16)
      goto LABEL_16;
  }
  else
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_16;
  }
  v17 = *(int *)(v11 + 24);
  v18 = (_QWORD *)(a1 + v17);
  v19 = *(_QWORD *)(a1 + v17 + 8);
  v20 = (_QWORD *)(a2 + v17);
  v21 = v20[1];
  if (!v19)
  {
    if (!v21)
    {
LABEL_17:
      v24 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v24(v10, a1, v4);
      v24(v8, a2, v4);
      v25 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
      v23 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v25);
      v26 = *(void (**)(char *, uint64_t))(v5 + 8);
      v26(v8, v4);
      v26(v10, v4);
      return v23 & 1;
    }
LABEL_16:
    v23 = 0;
    return v23 & 1;
  }
  if (!v21)
    goto LABEL_16;
  if (*v18 == *v20 && v19 == v21)
    goto LABEL_17;
  v23 = 0;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    goto LABEL_17;
  return v23 & 1;
}

uint64_t sub_100114B0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  char v31;
  char v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  _DWORD *v42;
  char v43;
  _DWORD *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *);
  char *v49;
  char *v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;

  v4 = type metadata accessor for UnknownStorage(0);
  v56 = *(_QWORD *)(v4 - 8);
  v57 = v4;
  v5 = __chkstk_darwin(v4);
  v55 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v54 = (char *)&v53 - v7;
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v60 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000039AC(&qword_100375338);
  __chkstk_darwin(v11);
  v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000039AC(&qword_10036E458);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v53 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v53 - v21;
  v23 = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0);
  v24 = *(int *)(v23 + 20);
  v58 = a1;
  v25 = a1 + v24;
  v26 = (int *)v23;
  sub_10000E660(v25, (uint64_t)v22, &qword_10036E458);
  v27 = v26[5];
  v59 = a2;
  sub_10000E660(a2 + v27, (uint64_t)v20, &qword_10036E458);
  v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_10000E660((uint64_t)v22, (uint64_t)v13, &qword_10036E458);
  sub_10000E660((uint64_t)v20, v28, &qword_10036E458);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29((uint64_t)v13, 1, v8) == 1)
  {
    sub_100015704((uint64_t)v20, &qword_10036E458);
    sub_100015704((uint64_t)v22, &qword_10036E458);
    if (v29(v28, 1, v8) == 1)
    {
      sub_100015704((uint64_t)v13, &qword_10036E458);
      goto LABEL_10;
    }
LABEL_6:
    sub_100015704((uint64_t)v13, &qword_100375338);
    goto LABEL_7;
  }
  v30 = (uint64_t)v60;
  sub_10000E660((uint64_t)v13, (uint64_t)v17, &qword_10036E458);
  if (v29(v28, 1, v8) == 1)
  {
    sub_100015704((uint64_t)v20, &qword_10036E458);
    sub_100015704((uint64_t)v22, &qword_10036E458);
    sub_100004030((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  sub_100003E08(v28, v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v33 = sub_1000656F0((uint64_t)v17, v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004030(v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v20, &qword_10036E458);
  sub_100015704((uint64_t)v22, &qword_10036E458);
  sub_100004030((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v13, &qword_10036E458);
  if ((v33 & 1) == 0)
    goto LABEL_7;
LABEL_10:
  v34 = v26[6];
  v35 = v59;
  v36 = *(unsigned __int8 *)(v58 + v34);
  v37 = *(unsigned __int8 *)(v59 + v34);
  if (v36 == 8)
  {
    if (v37 != 8)
      goto LABEL_7;
  }
  else
  {
    v31 = 0;
    if (v37 == 8 || v36 != v37)
      return v31 & 1;
  }
  v38 = v26[7];
  v39 = *(unsigned __int8 *)(v58 + v38);
  v40 = *(unsigned __int8 *)(v59 + v38);
  if (v39 == 8)
  {
    if (v40 == 8)
      goto LABEL_20;
LABEL_7:
    v31 = 0;
    return v31 & 1;
  }
  v31 = 0;
  if (v40 != 8 && v39 == v40)
  {
LABEL_20:
    v41 = v26[8];
    v42 = (_DWORD *)(v58 + v41);
    v43 = *(_BYTE *)(v58 + v41 + 4);
    v44 = (_DWORD *)(v59 + v41);
    v45 = *(unsigned __int8 *)(v59 + v41 + 4);
    if ((v43 & 1) != 0)
    {
      if (v45)
      {
LABEL_26:
        v47 = v56;
        v46 = v57;
        v48 = *(void (**)(char *))(v56 + 16);
        v49 = v54;
        v48(v54);
        v50 = v55;
        ((void (*)(char *, uint64_t, uint64_t))v48)(v55, v35, v46);
        v51 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
        v31 = dispatch thunk of static Equatable.== infix(_:_:)(v49, v50, v46, v51);
        v52 = *(void (**)(char *, uint64_t))(v47 + 8);
        v52(v50, v46);
        v52(v49, v46);
        return v31 & 1;
      }
    }
    else
    {
      if (*v42 != *v44)
        LOBYTE(v45) = 1;
      if ((v45 & 1) == 0)
        goto LABEL_26;
    }
    goto LABEL_7;
  }
  return v31 & 1;
}

uint64_t sub_100114F78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t);
  int v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v35;
  char v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t);
  char *v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v4 = type metadata accessor for UnknownStorage(0);
  v48 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v47 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v46 = (char *)&v43 - v7;
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v45 = (uint64_t)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000039AC(&qword_100375378);
  __chkstk_darwin(v11);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000039AC(&qword_10036E550);
  v15 = __chkstk_darwin(v14);
  v49 = (uint64_t)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v43 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v43 - v20;
  v22 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  v23 = v22;
  v24 = *(int *)(v22 + 20);
  v25 = *(unsigned __int8 *)(a1 + v24);
  v50 = a2;
  v26 = *(unsigned __int8 *)(a2 + v24);
  if (v25 == 2)
  {
    if (v26 != 2)
      goto LABEL_12;
  }
  else if (v26 == 2 || ((((v26 & 1) == 0) ^ v25) & 1) == 0)
  {
    goto LABEL_12;
  }
  v44 = v4;
  v27 = a1;
  sub_10000E660(a1 + *(int *)(v22 + 24), (uint64_t)v21, &qword_10036E550);
  sub_10000E660(v50 + *(int *)(v23 + 24), (uint64_t)v19, &qword_10036E550);
  v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_10000E660((uint64_t)v21, (uint64_t)v13, &qword_10036E550);
  sub_10000E660((uint64_t)v19, v28, &qword_10036E550);
  v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29((uint64_t)v13, 1, v8) == 1)
  {
    sub_100015704((uint64_t)v19, &qword_10036E550);
    sub_100015704((uint64_t)v21, &qword_10036E550);
    v30 = v29(v28, 1, v8);
    v31 = v44;
    if (v30 == 1)
    {
      sub_100015704((uint64_t)v13, &qword_10036E550);
LABEL_15:
      v37 = v48;
      v38 = *(void (**)(char *, uint64_t, uint64_t))(v48 + 16);
      v39 = v46;
      v38(v46, v27, v31);
      v40 = v47;
      v38(v47, v50, v31);
      v41 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
      v33 = dispatch thunk of static Equatable.== infix(_:_:)(v39, v40, v31, v41);
      v42 = *(void (**)(char *, uint64_t))(v37 + 8);
      v42(v40, v31);
      v42(v39, v31);
      return v33 & 1;
    }
    goto LABEL_11;
  }
  v32 = v49;
  sub_10000E660((uint64_t)v13, v49, &qword_10036E550);
  if (v29(v28, 1, v8) == 1)
  {
    sub_100015704((uint64_t)v19, &qword_10036E550);
    sub_100015704((uint64_t)v21, &qword_10036E550);
    sub_100004030(v32, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
LABEL_11:
    sub_100015704((uint64_t)v13, &qword_100375378);
    goto LABEL_12;
  }
  v35 = v45;
  sub_100003E08(v28, v45, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  v36 = sub_100115678(v32, v35);
  sub_100004030(v35, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  sub_100015704((uint64_t)v19, &qword_10036E550);
  sub_100015704((uint64_t)v21, &qword_10036E550);
  sub_100004030(v32, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  sub_100015704((uint64_t)v13, &qword_10036E550);
  v31 = v44;
  if ((v36 & 1) != 0)
    goto LABEL_15;
LABEL_12:
  v33 = 0;
  return v33 & 1;
}

uint64_t sub_100115398(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  int v17;
  int v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v24;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v24 - v9;
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
  v12 = *(int *)(v11 + 20);
  v13 = *(unsigned __int8 *)(a1 + v12);
  v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 14)
  {
    if (v14 != 14)
      goto LABEL_15;
  }
  else if (v14 == 14 || v13 != v14)
  {
    goto LABEL_15;
  }
  v16 = *(int *)(v11 + 24);
  v17 = *(unsigned __int8 *)(a1 + v16);
  v18 = *(unsigned __int8 *)(a2 + v16);
  if (v17 == 2)
  {
    if (v18 != 2)
    {
LABEL_15:
      v21 = 0;
      return v21 & 1;
    }
  }
  else if (v18 == 2 || ((((v18 & 1) == 0) ^ v17) & 1) == 0)
  {
    goto LABEL_15;
  }
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v19(v10, a1, v4);
  v19(v8, a2, v4);
  v20 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v21 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v20);
  v22 = *(void (**)(char *, uint64_t))(v5 + 8);
  v22(v8, v4);
  v22(v10, v4);
  return v21 & 1;
}

uint64_t sub_100115514(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v18 - v9;
  if ((sub_10010AFCC(*a1, *a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, sub_1000C9CE8) & 1) != 0
    && (sub_10010AFCC(a1[1], a2[1], type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, sub_1000CF62C) & 1) != 0)
  {
    v11 = type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations(0);
    v12 = (char *)a1 + *(int *)(v11 + 24);
    v13 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v13(v10, v12, v4);
    v13(v8, (char *)a2 + *(int *)(v11 + 24), v4);
    v14 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v15 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v14);
    v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    v16(v10, v4);
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_100115678(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char v24;
  uint64_t v25;
  _DWORD *v26;
  char v27;
  _DWORD *v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v34;
  _DWORD *v35;
  char v36;
  _DWORD *v37;
  int v38;
  uint64_t v39;
  float *v40;
  char v41;
  float *v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  _DWORD *v54;
  char v55;
  _DWORD *v56;
  int v57;
  void (*v59)(char *, uint64_t, uint64_t);
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  uint64_t v62;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v62 - v9;
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  v12 = (int *)v11;
  v13 = *(int *)(v11 + 20);
  v14 = (_QWORD *)(a1 + v13);
  v15 = *(_BYTE *)(a1 + v13 + 8);
  v16 = (_QWORD *)(a2 + v13);
  v17 = *(unsigned __int8 *)(a2 + v13 + 8);
  if ((v15 & 1) != 0)
  {
    if (!v17)
      goto LABEL_59;
  }
  else
  {
    if (*v14 != *v16)
      LOBYTE(v17) = 1;
    if ((v17 & 1) != 0)
      goto LABEL_59;
  }
  v18 = *(int *)(v11 + 24);
  v19 = (_QWORD *)(a1 + v18);
  v20 = *(_QWORD *)(a1 + v18 + 8);
  v21 = (_QWORD *)(a2 + v18);
  v22 = v21[1];
  if (!v20)
  {
    if (v22)
      goto LABEL_59;
LABEL_16:
    v25 = v12[7];
    v26 = (_DWORD *)(a1 + v25);
    v27 = *(_BYTE *)(a1 + v25 + 4);
    v28 = (_DWORD *)(a2 + v25);
    v29 = *(unsigned __int8 *)(a2 + v25 + 4);
    if ((v27 & 1) != 0)
    {
      if (!v29)
        goto LABEL_59;
    }
    else
    {
      if (*v26 != *v28)
        LOBYTE(v29) = 1;
      if ((v29 & 1) != 0)
        goto LABEL_59;
    }
    v30 = v12[8];
    v31 = *(unsigned __int8 *)(a1 + v30);
    v32 = *(unsigned __int8 *)(a2 + v30);
    if (v31 == 4)
    {
      if (v32 != 4)
        goto LABEL_59;
    }
    else if (v32 == 4 || v31 != v32)
    {
      goto LABEL_59;
    }
    v34 = v12[9];
    v35 = (_DWORD *)(a1 + v34);
    v36 = *(_BYTE *)(a1 + v34 + 4);
    v37 = (_DWORD *)(a2 + v34);
    v38 = *(unsigned __int8 *)(a2 + v34 + 4);
    if ((v36 & 1) != 0)
    {
      if (!v38)
        goto LABEL_59;
    }
    else
    {
      if (*v35 != *v37)
        LOBYTE(v38) = 1;
      if ((v38 & 1) != 0)
        goto LABEL_59;
    }
    v39 = v12[10];
    v40 = (float *)(a1 + v39);
    v41 = *(_BYTE *)(a1 + v39 + 4);
    v42 = (float *)(a2 + v39);
    v43 = *(unsigned __int8 *)(a2 + v39 + 4);
    if ((v41 & 1) != 0)
    {
      if (!v43)
        goto LABEL_59;
    }
    else
    {
      if (*v40 != *v42)
        LOBYTE(v43) = 1;
      if ((v43 & 1) != 0)
        goto LABEL_59;
    }
    v44 = v12[11];
    v45 = *(unsigned __int8 *)(a1 + v44);
    v46 = *(unsigned __int8 *)(a2 + v44);
    if (v45 == 2)
    {
      if (v46 != 2)
        goto LABEL_59;
    }
    else if (v46 == 2 || ((((v46 & 1) == 0) ^ v45) & 1) == 0)
    {
      goto LABEL_59;
    }
    v47 = v12[12];
    v48 = *(unsigned __int8 *)(a1 + v47);
    v49 = *(unsigned __int8 *)(a2 + v47);
    if (v48 == 2)
    {
      if (v49 != 2)
        goto LABEL_59;
    }
    else if (v49 == 2 || ((((v49 & 1) == 0) ^ v48) & 1) == 0)
    {
      goto LABEL_59;
    }
    v50 = v12[13];
    v51 = *(unsigned __int8 *)(a1 + v50);
    v52 = *(unsigned __int8 *)(a2 + v50);
    if (v51 != 4)
    {
      v24 = 0;
      if (v52 == 4 || v51 != v52)
        return v24 & 1;
LABEL_57:
      v53 = v12[14];
      v54 = (_DWORD *)(a1 + v53);
      v55 = *(_BYTE *)(a1 + v53 + 4);
      v56 = (_DWORD *)(a2 + v53);
      v57 = *(unsigned __int8 *)(a2 + v53 + 4);
      if ((v55 & 1) != 0)
      {
        if (!v57)
          goto LABEL_59;
      }
      else
      {
        if (*v54 != *v56)
          LOBYTE(v57) = 1;
        if ((v57 & 1) != 0)
          goto LABEL_59;
      }
      v59 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v59(v10, a1, v4);
      v59(v8, a2, v4);
      v60 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v60);
      v61 = *(void (**)(char *, uint64_t))(v5 + 8);
      v61(v8, v4);
      v61(v10, v4);
      return v24 & 1;
    }
    if (v52 == 4)
      goto LABEL_57;
LABEL_59:
    v24 = 0;
    return v24 & 1;
  }
  if (!v22)
    goto LABEL_59;
  if (*v19 == *v21 && v20 == v22)
    goto LABEL_16;
  v24 = 0;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20) & 1) != 0)
    goto LABEL_16;
  return v24 & 1;
}

uint64_t sub_1001159AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  int *v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t *v33;
  uint64_t v34;
  char v35;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  char v42;
  _DWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t, uint64_t);
  char *v57;
  char *v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v73 = a1;
  v74 = a2;
  v2 = type metadata accessor for UnknownStorage(0);
  v64 = *(_QWORD *)(v2 - 8);
  v65 = v2;
  v3 = __chkstk_darwin(v2);
  v63 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v62 = (char *)&v61 - v5;
  v71 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0);
  v68 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v61 = (uint64_t)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_1000039AC(&qword_1003753D8);
  __chkstk_darwin(v67);
  v72 = (uint64_t)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000039AC(&qword_10036E4F0);
  v9 = __chkstk_darwin(v8);
  v66 = (uint64_t)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v69 = (uint64_t)&v61 - v12;
  __chkstk_darwin(v11);
  v70 = (uint64_t)&v61 - v13;
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1000039AC(&qword_100375338);
  __chkstk_darwin(v18);
  v20 = (char *)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1000039AC(&qword_10036E458);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v61 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v22);
  v27 = (char *)&v61 - v26;
  __chkstk_darwin(v25);
  v29 = (char *)&v61 - v28;
  v30 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint(0);
  sub_10000E660(v73 + v30[5], (uint64_t)v29, &qword_10036E458);
  sub_10000E660(v74 + v30[5], (uint64_t)v27, &qword_10036E458);
  v31 = (uint64_t)&v20[*(int *)(v18 + 48)];
  sub_10000E660((uint64_t)v29, (uint64_t)v20, &qword_10036E458);
  sub_10000E660((uint64_t)v27, v31, &qword_10036E458);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v32((uint64_t)v20, 1, v14) == 1)
  {
    sub_100015704((uint64_t)v27, &qword_10036E458);
    sub_100015704((uint64_t)v29, &qword_10036E458);
    if (v32(v31, 1, v14) == 1)
    {
      sub_100015704((uint64_t)v20, &qword_10036E458);
      goto LABEL_11;
    }
LABEL_6:
    v33 = &qword_100375338;
    v34 = (uint64_t)v20;
LABEL_7:
    sub_100015704(v34, v33);
    goto LABEL_8;
  }
  sub_10000E660((uint64_t)v20, (uint64_t)v24, &qword_10036E458);
  if (v32(v31, 1, v14) == 1)
  {
    sub_100015704((uint64_t)v27, &qword_10036E458);
    sub_100015704((uint64_t)v29, &qword_10036E458);
    sub_100004030((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  sub_100003E08(v31, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v37 = sub_1000656F0((uint64_t)v24, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004030((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v27, &qword_10036E458);
  sub_100015704((uint64_t)v29, &qword_10036E458);
  sub_100004030((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v20, &qword_10036E458);
  if ((v37 & 1) == 0)
    goto LABEL_8;
LABEL_11:
  v38 = v30[6];
  v39 = v73;
  v40 = v74;
  v41 = (_DWORD *)(v73 + v38);
  v42 = *(_BYTE *)(v73 + v38 + 4);
  v43 = (_DWORD *)(v74 + v38);
  v44 = *(unsigned __int8 *)(v74 + v38 + 4);
  if ((v42 & 1) != 0)
  {
    if (!v44)
      goto LABEL_8;
  }
  else
  {
    if (*v41 != *v43)
      LOBYTE(v44) = 1;
    if ((v44 & 1) != 0)
      goto LABEL_8;
  }
  v45 = v70;
  sub_10000E660(v73 + v30[7], v70, &qword_10036E4F0);
  v46 = v69;
  sub_10000E660(v40 + v30[7], v69, &qword_10036E4F0);
  v47 = v72;
  v48 = v72 + *(int *)(v67 + 48);
  sub_10000E660(v45, v72, &qword_10036E4F0);
  sub_10000E660(v46, v48, &qword_10036E4F0);
  v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48);
  v50 = v71;
  if (v49(v47, 1, v71) == 1)
  {
    sub_100015704(v46, &qword_10036E4F0);
    sub_100015704(v45, &qword_10036E4F0);
    if (v49(v48, 1, v50) == 1)
    {
      sub_100015704(v47, &qword_10036E4F0);
LABEL_24:
      v55 = v64;
      v54 = v65;
      v56 = *(void (**)(char *, uint64_t, uint64_t))(v64 + 16);
      v57 = v62;
      v56(v62, v39, v65);
      v58 = v63;
      v56(v63, v40, v54);
      v59 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
      v35 = dispatch thunk of static Equatable.== infix(_:_:)(v57, v58, v54, v59);
      v60 = *(void (**)(char *, uint64_t))(v55 + 8);
      v60(v58, v54);
      v60(v57, v54);
      return v35 & 1;
    }
    goto LABEL_22;
  }
  v51 = v66;
  sub_10000E660(v47, v66, &qword_10036E4F0);
  if (v49(v48, 1, v50) == 1)
  {
    sub_100015704(v46, &qword_10036E4F0);
    sub_100015704(v45, &qword_10036E4F0);
    sub_100004030(v51, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
LABEL_22:
    v33 = &qword_1003753D8;
    v34 = v47;
    goto LABEL_7;
  }
  v52 = v61;
  sub_100003E08(v48, v61, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
  v53 = sub_100065A60(v51, v52, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, sub_1000E6464);
  sub_100004030(v52, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
  sub_100015704(v46, &qword_10036E4F0);
  sub_100015704(v45, &qword_10036E4F0);
  sub_100004030(v51, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
  sub_100015704(v47, &qword_10036E4F0);
  if ((v53 & 1) != 0)
    goto LABEL_24;
LABEL_8:
  v35 = 0;
  return v35 & 1;
}

uint64_t sub_10011605C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  int *v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double *v30;
  char v31;
  double *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  char v37;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v4 = type metadata accessor for UnknownStorage(0);
  v54 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v53 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v52 = (char *)&v51 - v7;
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v55 = (uint64_t)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000039AC(&qword_100375338);
  __chkstk_darwin(v11);
  v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000039AC(&qword_10036E458);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v51 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v51 - v21;
  v23 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  v24 = a1;
  v25 = v23;
  v26 = v23[5];
  v27 = *(char *)(v24 + v26);
  v56 = a2;
  v28 = *(char *)(a2 + v26);
  if (v27 == 72)
  {
    if ((_DWORD)v28 != 72)
      goto LABEL_18;
  }
  else if ((_DWORD)v28 == 72 || qword_1002D91C0[v27] != qword_1002D91C0[v28])
  {
    goto LABEL_18;
  }
  v29 = v23[6];
  v30 = (double *)(v24 + v29);
  v31 = *(_BYTE *)(v24 + v29 + 8);
  v32 = (double *)(v56 + v29);
  v33 = *(unsigned __int8 *)(v56 + v29 + 8);
  if ((v31 & 1) != 0)
  {
    if (!v33)
      goto LABEL_18;
  }
  else
  {
    if (*v30 != *v32)
      LOBYTE(v33) = 1;
    if ((v33 & 1) != 0)
      goto LABEL_18;
  }
  v51 = v4;
  v34 = v24;
  sub_10000E660(v24 + v23[7], (uint64_t)v22, &qword_10036E458);
  sub_10000E660(v56 + v25[7], (uint64_t)v20, &qword_10036E458);
  v35 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_10000E660((uint64_t)v22, (uint64_t)v13, &qword_10036E458);
  sub_10000E660((uint64_t)v20, v35, &qword_10036E458);
  v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v36((uint64_t)v13, 1, v8) != 1)
  {
    sub_10000E660((uint64_t)v13, (uint64_t)v17, &qword_10036E458);
    if (v36(v35, 1, v8) != 1)
    {
      v39 = v55;
      sub_100003E08(v35, v55, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      v40 = sub_1000656F0((uint64_t)v17, v39, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      sub_100004030(v39, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      sub_100015704((uint64_t)v20, &qword_10036E458);
      sub_100015704((uint64_t)v22, &qword_10036E458);
      sub_100004030((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      sub_100015704((uint64_t)v13, &qword_10036E458);
      if ((v40 & 1) == 0)
        goto LABEL_18;
      goto LABEL_21;
    }
    sub_100015704((uint64_t)v20, &qword_10036E458);
    sub_100015704((uint64_t)v22, &qword_10036E458);
    sub_100004030((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_17:
    sub_100015704((uint64_t)v13, &qword_100375338);
    goto LABEL_18;
  }
  sub_100015704((uint64_t)v20, &qword_10036E458);
  sub_100015704((uint64_t)v22, &qword_10036E458);
  if (v36(v35, 1, v8) != 1)
    goto LABEL_17;
  sub_100015704((uint64_t)v13, &qword_10036E458);
LABEL_21:
  v41 = v25[8];
  v42 = *(char *)(v34 + v41);
  v43 = *(char *)(v56 + v41);
  if (v42 != 72)
  {
    if ((_DWORD)v43 == 72 || qword_1002D91C0[v42] != qword_1002D91C0[v43])
      goto LABEL_18;
LABEL_26:
    v44 = v54;
    v45 = *(void (**)(char *, uint64_t, uint64_t))(v54 + 16);
    v46 = v51;
    v47 = v52;
    v45(v52, v34, v51);
    v48 = v53;
    v45(v53, v56, v46);
    v49 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v37 = dispatch thunk of static Equatable.== infix(_:_:)(v47, v48, v46, v49);
    v50 = *(void (**)(char *, uint64_t))(v44 + 8);
    v50(v48, v46);
    v50(v47, v46);
    return v37 & 1;
  }
  if ((_DWORD)v43 == 72)
    goto LABEL_26;
LABEL_18:
  v37 = 0;
  return v37 & 1;
}

uint64_t sub_1001164F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  double *v13;
  char v14;
  double *v15;
  int v16;
  uint64_t v17;
  double *v18;
  char v19;
  double *v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v30;
  double *v31;
  char v32;
  double *v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  char v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  float *v43;
  char v44;
  float *v45;
  int v46;
  void (*v48)(char *, uint64_t, uint64_t);
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v51 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0);
  v12 = v11[5];
  v13 = (double *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 8);
  v15 = (double *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16)
      goto LABEL_47;
  }
  else
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_47;
  }
  v17 = v11[6];
  v18 = (double *)(a1 + v17);
  v19 = *(_BYTE *)(a1 + v17 + 8);
  v20 = (double *)(a2 + v17);
  v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if ((v19 & 1) != 0)
  {
    if (!v21)
      goto LABEL_47;
  }
  else
  {
    if (*v18 != *v20)
      LOBYTE(v21) = 1;
    if ((v21 & 1) != 0)
      goto LABEL_47;
  }
  v22 = v11[7];
  v23 = *(unsigned __int8 *)(a1 + v22);
  v24 = *(unsigned __int8 *)(a2 + v22);
  if (v23 == 3)
  {
    if (v24 != 3)
      goto LABEL_47;
  }
  else if (v24 == 3 || v23 != v24)
  {
    goto LABEL_47;
  }
  v26 = v11[8];
  v27 = *(unsigned __int8 *)(a1 + v26);
  v28 = *(unsigned __int8 *)(a2 + v26);
  if (v27 == 4)
  {
    if (v28 != 4)
      goto LABEL_47;
  }
  else if (v28 == 4 || v27 != v28)
  {
    goto LABEL_47;
  }
  v30 = v11[9];
  v31 = (double *)(a1 + v30);
  v32 = *(_BYTE *)(a1 + v30 + 8);
  v33 = (double *)(a2 + v30);
  v34 = *(unsigned __int8 *)(a2 + v30 + 8);
  if ((v32 & 1) != 0)
  {
    if (!v34)
      goto LABEL_47;
  }
  else
  {
    if (*v31 != *v33)
      LOBYTE(v34) = 1;
    if ((v34 & 1) != 0)
      goto LABEL_47;
  }
  v35 = v11[10];
  v36 = *(unsigned __int8 *)(a1 + v35);
  v37 = *(unsigned __int8 *)(a2 + v35);
  if (v36 == 4)
  {
    if (v37 != 4)
      goto LABEL_47;
    goto LABEL_40;
  }
  v38 = 0;
  if (v37 != 4 && v36 == v37)
  {
LABEL_40:
    v39 = v11[11];
    v40 = *(unsigned __int8 *)(a1 + v39);
    v41 = *(unsigned __int8 *)(a2 + v39);
    if (v40 != 2)
    {
      if (v41 == 2 || ((((v41 & 1) == 0) ^ v40) & 1) == 0)
        goto LABEL_47;
LABEL_45:
      v42 = v11[12];
      v43 = (float *)(a1 + v42);
      v44 = *(_BYTE *)(a1 + v42 + 4);
      v45 = (float *)(a2 + v42);
      v46 = *(unsigned __int8 *)(a2 + v42 + 4);
      if ((v44 & 1) != 0)
      {
        if (!v46)
          goto LABEL_47;
      }
      else
      {
        if (*v43 != *v45)
          LOBYTE(v46) = 1;
        if ((v46 & 1) != 0)
          goto LABEL_47;
      }
      v48 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v48(v10, a1, v4);
      v48(v8, a2, v4);
      v49 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
      v38 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v49);
      v50 = *(void (**)(char *, uint64_t))(v5 + 8);
      v50(v8, v4);
      v50(v10, v4);
      return v38 & 1;
    }
    if (v41 == 2)
      goto LABEL_45;
LABEL_47:
    v38 = 0;
  }
  return v38 & 1;
}

uint64_t sub_10011679C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v33;
  int v34;
  int v35;
  void (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v40 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  v12 = v11[5];
  v13 = (_QWORD *)(a1 + v12);
  v14 = *(_QWORD *)(a1 + v12 + 8);
  v15 = (_QWORD *)(a2 + v12);
  v16 = v15[1];
  if (!v14)
  {
    if (v16)
      goto LABEL_37;
    goto LABEL_10;
  }
  if (!v16)
    goto LABEL_37;
  v17 = *v13 == *v15 && v14 == v16;
  if (v17 || (v18 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
LABEL_10:
    v19 = v11[6];
    v20 = (_QWORD *)(a1 + v19);
    v21 = *(_QWORD *)(a1 + v19 + 8);
    v22 = (_QWORD *)(a2 + v19);
    v23 = v22[1];
    if (v21)
    {
      if (v23)
      {
        if (*v20 != *v22 || v21 != v23)
        {
          v18 = 0;
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            return v18 & 1;
        }
LABEL_19:
        v25 = v11[7];
        v26 = *(unsigned __int8 *)(a1 + v25);
        v27 = *(unsigned __int8 *)(a2 + v25);
        if (v26 == 67)
        {
          if (v27 != 67)
            goto LABEL_37;
        }
        else if (v27 == 67 || v26 != v27)
        {
          goto LABEL_37;
        }
        v29 = v11[8];
        v30 = *(unsigned __int8 *)(a1 + v29);
        v31 = *(unsigned __int8 *)(a2 + v29);
        if (v30 == 5)
        {
          if (v31 != 5)
            goto LABEL_37;
        }
        else if (v31 == 5 || v30 != v31)
        {
          goto LABEL_37;
        }
        v33 = v11[9];
        v34 = *(unsigned __int8 *)(a1 + v33);
        v35 = *(unsigned __int8 *)(a2 + v33);
        if (v34 == 3)
        {
          if (v35 != 3)
            goto LABEL_37;
        }
        else
        {
          v18 = 0;
          if (v35 == 3 || v34 != v35)
            return v18 & 1;
        }
        v37 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
        v37(v10, a1, v4);
        v37(v8, a2, v4);
        v38 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
        v18 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v38);
        v39 = *(void (**)(char *, uint64_t))(v5 + 8);
        v39(v8, v4);
        v39(v10, v4);
        return v18 & 1;
      }
    }
    else if (!v23)
    {
      goto LABEL_19;
    }
LABEL_37:
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t sub_1001169D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  int v70;
  int v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int (*v87)(uint64_t, uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(char *, uint64_t, uint64_t);
  char *v95;
  char *v96;
  uint64_t v97;
  void (*v98)(char *, uint64_t);
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;

  v123 = a2;
  v3 = type metadata accessor for UnknownStorage(0);
  v103 = *(_QWORD *)(v3 - 8);
  v104 = v3;
  v4 = __chkstk_darwin(v3);
  v102 = (char *)&v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v101 = (char *)&v99 - v6;
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  v107 = *(_QWORD *)(v7 - 8);
  v108 = v7;
  __chkstk_darwin(v7);
  v100 = (uint64_t)&v99 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = sub_1000039AC(&qword_100375400);
  __chkstk_darwin(v106);
  v109 = (uint64_t)&v99 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000039AC(&qword_10036E4C8);
  v11 = __chkstk_darwin(v10);
  v105 = (uint64_t)&v99 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v111 = (char *)&v99 - v14;
  __chkstk_darwin(v13);
  v112 = (char *)&v99 - v15;
  v16 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v116 = (uint64_t)&v99 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1000039AC(&qword_100375338);
  v20 = __chkstk_darwin(v19);
  v113 = (uint64_t)&v99 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v117 = (uint64_t)&v99 - v23;
  __chkstk_darwin(v22);
  v25 = (char *)&v99 - v24;
  v26 = sub_1000039AC(&qword_10036E458);
  v27 = __chkstk_darwin(v26);
  v110 = (uint64_t)&v99 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v27);
  v119 = (uint64_t)&v99 - v30;
  v31 = __chkstk_darwin(v29);
  v114 = (uint64_t)&v99 - v32;
  v33 = __chkstk_darwin(v31);
  v115 = (uint64_t)&v99 - v34;
  v35 = __chkstk_darwin(v33);
  v121 = (uint64_t)&v99 - v36;
  v37 = __chkstk_darwin(v35);
  v122 = (uint64_t)&v99 - v38;
  v39 = __chkstk_darwin(v37);
  v41 = (char *)&v99 - v40;
  v42 = __chkstk_darwin(v39);
  v44 = (char *)&v99 - v43;
  __chkstk_darwin(v42);
  v46 = (char *)&v99 - v45;
  v47 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  v48 = *(int *)(v47 + 20);
  v120 = a1;
  sub_10000E660(a1 + v48, (uint64_t)v46, &qword_10036E458);
  v118 = (int *)v47;
  sub_10000E660(v123 + *(int *)(v47 + 20), (uint64_t)v44, &qword_10036E458);
  v49 = v19;
  v50 = (uint64_t)&v25[*(int *)(v19 + 48)];
  sub_10000E660((uint64_t)v46, (uint64_t)v25, &qword_10036E458);
  sub_10000E660((uint64_t)v44, v50, &qword_10036E458);
  v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  v52 = v16;
  if (v51((uint64_t)v25, 1, v16) == 1)
  {
    sub_100015704((uint64_t)v44, &qword_10036E458);
    sub_100015704((uint64_t)v46, &qword_10036E458);
    if (v51(v50, 1, v16) == 1)
    {
      sub_100015704((uint64_t)v25, &qword_10036E458);
      goto LABEL_8;
    }
LABEL_6:
    v53 = &qword_100375338;
    v54 = (uint64_t)v25;
LABEL_34:
    sub_100015704(v54, v53);
    goto LABEL_35;
  }
  sub_10000E660((uint64_t)v25, (uint64_t)v41, &qword_10036E458);
  if (v51(v50, 1, v16) == 1)
  {
    sub_100015704((uint64_t)v44, &qword_10036E458);
    sub_100015704((uint64_t)v46, &qword_10036E458);
    sub_100004030((uint64_t)v41, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  v55 = v116;
  sub_100003E08(v50, v116, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v56 = sub_1000656F0((uint64_t)v41, v55, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004030(v55, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v44, &qword_10036E458);
  sub_100015704((uint64_t)v46, &qword_10036E458);
  sub_100004030((uint64_t)v41, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v25, &qword_10036E458);
  if ((v56 & 1) == 0)
    goto LABEL_35;
LABEL_8:
  v57 = v118;
  v58 = v120;
  v59 = v122;
  sub_10000E660(v120 + v118[6], v122, &qword_10036E458);
  v60 = v121;
  sub_10000E660(v123 + v57[6], v121, &qword_10036E458);
  v61 = v117;
  v62 = v117 + *(int *)(v49 + 48);
  sub_10000E660(v59, v117, &qword_10036E458);
  sub_10000E660(v60, v62, &qword_10036E458);
  if (v51(v61, 1, v52) == 1)
  {
    sub_100015704(v60, &qword_10036E458);
    sub_100015704(v59, &qword_10036E458);
    v63 = v51(v62, 1, v52);
    v64 = v119;
    if (v63 == 1)
    {
      v99 = v52;
      sub_100015704(v61, &qword_10036E458);
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  v65 = v115;
  sub_10000E660(v61, v115, &qword_10036E458);
  v66 = v51(v62, 1, v52);
  v64 = v119;
  if (v66 == 1)
  {
    sub_100015704(v121, &qword_10036E458);
    sub_100015704(v122, &qword_10036E458);
    sub_100004030(v65, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_13:
    v53 = &qword_100375338;
    v54 = v61;
    goto LABEL_34;
  }
  v99 = v52;
  v67 = v116;
  sub_100003E08(v62, v116, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v68 = sub_1000656F0(v65, v67, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004030(v67, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704(v121, &qword_10036E458);
  sub_100015704(v122, &qword_10036E458);
  sub_100004030(v65, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704(v61, &qword_10036E458);
  if ((v68 & 1) == 0)
    goto LABEL_35;
LABEL_15:
  v69 = v57[7];
  v70 = *(unsigned __int8 *)(v58 + v69);
  v71 = *(unsigned __int8 *)(v123 + v69);
  if (v70 == 19)
  {
    if (v71 != 19)
      goto LABEL_35;
LABEL_20:
    v73 = v58 + v57[8];
    v74 = v114;
    sub_10000E660(v73, v114, &qword_10036E458);
    sub_10000E660(v123 + v57[8], v64, &qword_10036E458);
    v75 = v113;
    v76 = v113 + *(int *)(v49 + 48);
    sub_10000E660(v74, v113, &qword_10036E458);
    sub_10000E660(v64, v76, &qword_10036E458);
    v77 = v99;
    if (v51(v75, 1, v99) == 1)
    {
      sub_100015704(v64, &qword_10036E458);
      sub_100015704(v74, &qword_10036E458);
      v78 = v51(v76, 1, v77);
      v80 = (uint64_t)v111;
      v79 = (uint64_t)v112;
      if (v78 == 1)
      {
        sub_100015704(v75, &qword_10036E458);
LABEL_27:
        sub_10000E660(v120 + v57[9], v79, &qword_10036E4C8);
        sub_10000E660(v123 + v57[9], v80, &qword_10036E4C8);
        v75 = v109;
        v85 = v109 + *(int *)(v106 + 48);
        sub_10000E660(v79, v109, &qword_10036E4C8);
        sub_10000E660(v80, v85, &qword_10036E4C8);
        v86 = v108;
        v87 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v107 + 48);
        if (v87(v75, 1, v108) == 1)
        {
          sub_100015704(v80, &qword_10036E4C8);
          sub_100015704(v79, &qword_10036E4C8);
          if (v87(v85, 1, v86) == 1)
          {
            sub_100015704(v75, &qword_10036E4C8);
LABEL_38:
            v93 = v103;
            v92 = v104;
            v94 = *(void (**)(char *, uint64_t, uint64_t))(v103 + 16);
            v95 = v101;
            v94(v101, v120, v104);
            v96 = v102;
            v94(v102, v123, v92);
            v97 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
            v72 = dispatch thunk of static Equatable.== infix(_:_:)(v95, v96, v92, v97);
            v98 = *(void (**)(char *, uint64_t))(v93 + 8);
            v98(v96, v92);
            v98(v95, v92);
            return v72 & 1;
          }
          goto LABEL_32;
        }
        v88 = v105;
        sub_10000E660(v75, v105, &qword_10036E4C8);
        if (v87(v85, 1, v86) == 1)
        {
          sub_100015704(v80, &qword_10036E4C8);
          sub_100015704(v79, &qword_10036E4C8);
          sub_100004030(v88, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
LABEL_32:
          v53 = &qword_100375400;
          goto LABEL_33;
        }
        v90 = v100;
        sub_100003E08(v85, v100, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
        v91 = sub_10011679C(v88, v90);
        sub_100004030(v90, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
        sub_100015704(v80, &qword_10036E4C8);
        sub_100015704(v79, &qword_10036E4C8);
        sub_100004030(v88, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
        sub_100015704(v75, &qword_10036E4C8);
        if ((v91 & 1) != 0)
          goto LABEL_38;
LABEL_35:
        v72 = 0;
        return v72 & 1;
      }
    }
    else
    {
      v81 = v110;
      sub_10000E660(v75, v110, &qword_10036E458);
      v82 = v51(v76, 1, v77);
      v80 = (uint64_t)v111;
      v79 = (uint64_t)v112;
      if (v82 != 1)
      {
        v83 = v116;
        sub_100003E08(v76, v116, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        v84 = sub_1000656F0(v81, v83, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        sub_100004030(v83, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        sub_100015704(v119, &qword_10036E458);
        sub_100015704(v114, &qword_10036E458);
        sub_100004030(v81, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        sub_100015704(v75, &qword_10036E458);
        if ((v84 & 1) == 0)
          goto LABEL_35;
        goto LABEL_27;
      }
      sub_100015704(v119, &qword_10036E458);
      sub_100015704(v114, &qword_10036E458);
      sub_100004030(v81, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    }
    v53 = &qword_100375338;
LABEL_33:
    v54 = v75;
    goto LABEL_34;
  }
  v72 = 0;
  if (v71 != 19 && v70 == v71)
    goto LABEL_20;
  return v72 & 1;
}

uint64_t sub_100117534(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  int *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v38 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  v12 = v11;
  v13 = v11[5];
  v14 = *(unsigned __int8 *)(a1 + v13);
  v15 = *(unsigned __int8 *)(a2 + v13);
  if (v14 == 5)
  {
    if (v15 != 5)
      goto LABEL_35;
  }
  else if (v15 == 5 || v14 != v15)
  {
    goto LABEL_35;
  }
  v17 = v11[6];
  v18 = *(unsigned __int8 *)(a1 + v17);
  v19 = *(unsigned __int8 *)(a2 + v17);
  if (v18 == 3)
  {
    if (v19 != 3)
      goto LABEL_35;
  }
  else if (v19 == 3 || v18 != v19)
  {
    goto LABEL_35;
  }
  v21 = v11[7];
  v22 = (_QWORD *)(a1 + v21);
  v23 = *(_QWORD *)(a1 + v21 + 8);
  v24 = (_QWORD *)(a2 + v21);
  v25 = v24[1];
  if (!v23)
  {
    if (v25)
      goto LABEL_35;
LABEL_26:
    v28 = v12[8];
    v29 = (_QWORD *)(a1 + v28);
    v30 = *(_QWORD *)(a1 + v28 + 8);
    v31 = (_QWORD *)(a2 + v28);
    v32 = v31[1];
    if (v30)
    {
      if (v32)
      {
        if (*v29 != *v31 || v30 != v32)
        {
          v27 = 0;
          if ((_stringCompareWithSmolCheck(_:_:expecting:)(*v29, v30) & 1) == 0)
            return v27 & 1;
        }
LABEL_37:
        v35 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
        v35(v10, a1, v4);
        v35(v8, a2, v4);
        v36 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
        v27 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v36);
        v37 = *(void (**)(char *, uint64_t))(v5 + 8);
        v37(v8, v4);
        v37(v10, v4);
        return v27 & 1;
      }
    }
    else if (!v32)
    {
      goto LABEL_37;
    }
LABEL_35:
    v27 = 0;
    return v27 & 1;
  }
  if (!v25)
    goto LABEL_35;
  if (*v22 == *v24 && v23 == v25)
    goto LABEL_26;
  v27 = 0;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(*v22, v23) & 1) != 0)
    goto LABEL_26;
  return v27 & 1;
}

uint64_t sub_100117738(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  char v33;
  uint64_t *v34;
  uint64_t *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  char *v40;
  char *v41;
  uint64_t v42;
  char v43;
  void (*v44)(char *, uint64_t);
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(_QWORD);
  uint64_t *v52;
  uint64_t *v53;

  v51 = a4;
  v53 = a3;
  v6 = type metadata accessor for UnknownStorage(0);
  v48 = *(_QWORD *)(v6 - 8);
  v49 = v6;
  v7 = __chkstk_darwin(v6);
  v47 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v46 = (char *)&v46 - v9;
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v50 = (uint64_t)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000039AC(&qword_100375338);
  __chkstk_darwin(v13);
  v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000039AC(&qword_10036E458);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v46 - v21;
  __chkstk_darwin(v20);
  v24 = (char *)&v46 - v23;
  v25 = ((uint64_t (*)(_QWORD))v53)(0);
  v26 = *(int *)(v25 + 24);
  v52 = a1;
  v27 = (uint64_t)a1 + v26;
  v28 = v25;
  sub_10000E660(v27, (uint64_t)v24, &qword_10036E458);
  v29 = *(int *)(v28 + 24);
  v53 = a2;
  sub_10000E660((uint64_t)a2 + v29, (uint64_t)v22, &qword_10036E458);
  v30 = (uint64_t)&v15[*(int *)(v13 + 48)];
  sub_10000E660((uint64_t)v24, (uint64_t)v15, &qword_10036E458);
  sub_10000E660((uint64_t)v22, v30, &qword_10036E458);
  v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v31((uint64_t)v15, 1, v10) == 1)
  {
    sub_100015704((uint64_t)v22, &qword_10036E458);
    sub_100015704((uint64_t)v24, &qword_10036E458);
    if (v31(v30, 1, v10) == 1)
    {
      sub_100015704((uint64_t)v15, &qword_10036E458);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  sub_10000E660((uint64_t)v15, (uint64_t)v19, &qword_10036E458);
  if (v31(v30, 1, v10) == 1)
  {
    sub_100015704((uint64_t)v22, &qword_10036E458);
    sub_100015704((uint64_t)v24, &qword_10036E458);
    sub_100004030((uint64_t)v19, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    sub_100015704((uint64_t)v15, &qword_100375338);
LABEL_10:
    v43 = 0;
    return v43 & 1;
  }
  v32 = v50;
  sub_100003E08(v30, v50, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v33 = sub_1000656F0((uint64_t)v19, v32, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004030(v32, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v22, &qword_10036E458);
  sub_100015704((uint64_t)v24, &qword_10036E458);
  sub_100004030((uint64_t)v19, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v15, &qword_10036E458);
  if ((v33 & 1) == 0)
    goto LABEL_10;
LABEL_8:
  v34 = v52;
  v35 = v53;
  if ((sub_10010B19C(*v52, *v53, v51) & 1) == 0)
    goto LABEL_10;
  v36 = (char *)v34 + *(int *)(v28 + 20);
  v38 = v48;
  v37 = v49;
  v39 = *(void (**)(char *, char *, uint64_t))(v48 + 16);
  v40 = v46;
  v39(v46, v36, v49);
  v41 = v47;
  v39(v47, (char *)v35 + *(int *)(v28 + 20), v37);
  v42 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v43 = dispatch thunk of static Equatable.== infix(_:_:)(v40, v41, v37, v42);
  v44 = *(void (**)(char *, uint64_t))(v38 + 8);
  v44(v41, v37);
  v44(v40, v37);
  return v43 & 1;
}

uint64_t sub_100117B34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  char v26;
  void (*v27)(char *, uint64_t);
  uint64_t v29;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v29 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  v12 = v11[5];
  v13 = *(char *)(a1 + v12);
  v14 = *(char *)(a2 + v12);
  if (v13 == 5)
  {
    if ((_DWORD)v14 != 5)
      goto LABEL_22;
  }
  else if ((_DWORD)v14 == 5 || qword_1002D9400[v13] != qword_1002D9400[v14])
  {
    goto LABEL_22;
  }
  v15 = v11[6];
  v16 = *(char *)(a1 + v15);
  v17 = *(char *)(a2 + v15);
  if (v16 == 5)
  {
    if ((_DWORD)v17 != 5)
      goto LABEL_22;
  }
  else if ((_DWORD)v17 == 5 || qword_1002D9400[v16] != qword_1002D9400[v17])
  {
    goto LABEL_22;
  }
  v18 = v11[7];
  v19 = *(unsigned __int8 *)(a1 + v18);
  v20 = *(unsigned __int8 *)(a2 + v18);
  if (v19 == 2)
  {
    if (v20 != 2)
      goto LABEL_22;
  }
  else if (v20 == 2 || ((((v20 & 1) == 0) ^ v19) & 1) == 0)
  {
    goto LABEL_22;
  }
  v21 = v11[8];
  v22 = *(unsigned __int8 *)(a1 + v21);
  v23 = *(unsigned __int8 *)(a2 + v21);
  if (v22 == 2)
  {
    if (v23 == 2)
      goto LABEL_21;
LABEL_22:
    v26 = 0;
    return v26 & 1;
  }
  if (v23 == 2 || ((((v23 & 1) == 0) ^ v22) & 1) == 0)
    goto LABEL_22;
LABEL_21:
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v24(v10, a1, v4);
  v24(v8, a2, v4);
  v25 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v26 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v25);
  v27 = *(void (**)(char *, uint64_t))(v5 + 8);
  v27(v8, v4);
  v27(v10, v4);
  return v26 & 1;
}

uint64_t sub_100117D3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _DWORD *v12;
  char v13;
  _DWORD *v14;
  int v15;
  char v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v21 - v9;
  v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0) + 20);
  v12 = (_DWORD *)(a1 + v11);
  v13 = *(_BYTE *)(a1 + v11 + 4);
  v14 = (_DWORD *)(a2 + v11);
  v15 = *(unsigned __int8 *)(a2 + v11 + 4);
  if ((v13 & 1) == 0)
  {
    if (*v12 != *v14)
      LOBYTE(v15) = 1;
    if ((v15 & 1) != 0)
      goto LABEL_3;
LABEL_7:
    v17 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v17(v10, a1, v4);
    v17(v8, a2, v4);
    v18 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v18);
    v19 = *(void (**)(char *, uint64_t))(v5 + 8);
    v19(v8, v4);
    v19(v10, v4);
    return v16 & 1;
  }
  if (v15)
    goto LABEL_7;
LABEL_3:
  v16 = 0;
  return v16 & 1;
}

uint64_t sub_100117E84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t *v42;
  uint64_t v43;
  char v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t, uint64_t, uint64_t);
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  char v59;
  uint64_t v61;
  char v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  _DWORD *v68;
  char v69;
  _DWORD *v70;
  int v71;
  uint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int (*v79)(uint64_t, uint64_t, uint64_t);
  uint64_t v80;
  char v81;
  uint64_t v82;
  float *v83;
  char v84;
  float *v85;
  int v86;
  uint64_t v87;
  float *v88;
  char v89;
  float *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(char *, uint64_t, uint64_t);
  char *v95;
  char *v96;
  uint64_t v97;
  void (*v98)(char *, uint64_t);
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;

  v120 = a1;
  v121 = a2;
  v2 = type metadata accessor for UnknownStorage(0);
  v101 = *(_QWORD *)(v2 - 8);
  v102 = v2;
  v3 = __chkstk_darwin(v2);
  v100 = (char *)&v99 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v99 = (char *)&v99 - v5;
  v112 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  v105 = *(_QWORD *)(v112 - 8);
  __chkstk_darwin(v112);
  v103 = (uint64_t)&v99 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = sub_1000039AC(&qword_100375388);
  __chkstk_darwin(v104);
  v106 = (uint64_t)&v99 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000039AC(&qword_10036E540);
  v9 = __chkstk_darwin(v8);
  v111 = (char *)&v99 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v109 = (uint64_t)&v99 - v12;
  __chkstk_darwin(v11);
  v107 = (uint64_t)&v99 - v13;
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0);
  v114 = *(_QWORD *)(v14 - 8);
  v115 = v14;
  __chkstk_darwin(v14);
  v108 = (uint64_t)&v99 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = sub_1000039AC(&qword_100375390);
  __chkstk_darwin(v113);
  v116 = (uint64_t)&v99 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000039AC(&qword_10036E538);
  v18 = __chkstk_darwin(v17);
  v110 = (uint64_t)&v99 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v118 = (uint64_t)&v99 - v21;
  __chkstk_darwin(v20);
  v119 = (uint64_t)&v99 - v22;
  v23 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (char *)&v99 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_1000039AC(&qword_100375338);
  __chkstk_darwin(v27);
  v29 = (char *)&v99 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_1000039AC(&qword_10036E458);
  v31 = __chkstk_darwin(v30);
  v33 = (char *)&v99 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __chkstk_darwin(v31);
  v36 = (char *)&v99 - v35;
  __chkstk_darwin(v34);
  v38 = (char *)&v99 - v37;
  v39 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
  sub_10000E660(v120 + *(int *)(v39 + 20), (uint64_t)v38, &qword_10036E458);
  v117 = (int *)v39;
  sub_10000E660(v121 + *(int *)(v39 + 20), (uint64_t)v36, &qword_10036E458);
  v40 = (uint64_t)&v29[*(int *)(v27 + 48)];
  sub_10000E660((uint64_t)v38, (uint64_t)v29, &qword_10036E458);
  sub_10000E660((uint64_t)v36, v40, &qword_10036E458);
  v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  if (v41((uint64_t)v29, 1, v23) == 1)
  {
    sub_100015704((uint64_t)v36, &qword_10036E458);
    sub_100015704((uint64_t)v38, &qword_10036E458);
    if (v41(v40, 1, v23) == 1)
    {
      sub_100015704((uint64_t)v29, &qword_10036E458);
      goto LABEL_8;
    }
LABEL_6:
    v42 = &qword_100375338;
    v43 = (uint64_t)v29;
    goto LABEL_14;
  }
  sub_10000E660((uint64_t)v29, (uint64_t)v33, &qword_10036E458);
  if (v41(v40, 1, v23) == 1)
  {
    sub_100015704((uint64_t)v36, &qword_10036E458);
    sub_100015704((uint64_t)v38, &qword_10036E458);
    sub_100004030((uint64_t)v33, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  sub_100003E08(v40, (uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v44 = sub_1000656F0((uint64_t)v33, (uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004030((uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v36, &qword_10036E458);
  sub_100015704((uint64_t)v38, &qword_10036E458);
  sub_100004030((uint64_t)v33, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v29, &qword_10036E458);
  if ((v44 & 1) == 0)
    goto LABEL_15;
LABEL_8:
  v45 = v117;
  v47 = v119;
  v46 = v120;
  sub_10000E660(v120 + v117[6], v119, &qword_10036E538);
  v48 = v121;
  v49 = v118;
  sub_10000E660(v121 + v45[6], v118, &qword_10036E538);
  v50 = v116;
  v51 = v116 + *(int *)(v113 + 48);
  sub_10000E660(v47, v116, &qword_10036E538);
  sub_10000E660(v49, v51, &qword_10036E538);
  v52 = v115;
  v53 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v114 + 48);
  if (v53(v50, 1, v115) == 1)
  {
    sub_100015704(v49, &qword_10036E538);
    sub_100015704(v47, &qword_10036E538);
    v54 = v53(v51, 1, v52);
    v56 = (uint64_t)v111;
    v55 = v112;
    if (v54 == 1)
    {
      sub_100015704(v50, &qword_10036E538);
      goto LABEL_18;
    }
LABEL_13:
    v42 = &qword_100375390;
    v43 = v50;
    goto LABEL_14;
  }
  v57 = v110;
  sub_10000E660(v50, v110, &qword_10036E538);
  v58 = v53(v51, 1, v52);
  v56 = (uint64_t)v111;
  v55 = v112;
  if (v58 == 1)
  {
    sub_100015704(v118, &qword_10036E538);
    sub_100015704(v119, &qword_10036E538);
    sub_100004030(v57, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
    goto LABEL_13;
  }
  v61 = v108;
  sub_100003E08(v51, v108, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
  v62 = sub_100065A60(v57, v61, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, sub_1000F83F8);
  sub_100004030(v61, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
  sub_100015704(v118, &qword_10036E538);
  sub_100015704(v119, &qword_10036E538);
  sub_100004030(v57, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
  sub_100015704(v50, &qword_10036E538);
  if ((v62 & 1) == 0)
    goto LABEL_15;
LABEL_18:
  v63 = v45[7];
  v64 = *(unsigned __int8 *)(v46 + v63);
  v65 = *(unsigned __int8 *)(v48 + v63);
  if (v64 == 2)
  {
    v66 = v109;
    if (v65 != 2)
      goto LABEL_15;
  }
  else
  {
    v66 = v109;
    if (v65 == 2 || ((((v65 & 1) == 0) ^ v64) & 1) == 0)
      goto LABEL_15;
  }
  v67 = v45[8];
  v68 = (_DWORD *)(v46 + v67);
  v69 = *(_BYTE *)(v46 + v67 + 4);
  v70 = (_DWORD *)(v48 + v67);
  v71 = *(unsigned __int8 *)(v48 + v67 + 4);
  if ((v69 & 1) != 0)
  {
    if (!v71)
      goto LABEL_15;
  }
  else
  {
    if (*v68 != *v70)
      LOBYTE(v71) = 1;
    if ((v71 & 1) != 0)
      goto LABEL_15;
  }
  v72 = v45[9];
  v73 = *(unsigned __int8 *)(v46 + v72);
  v74 = *(unsigned __int8 *)(v48 + v72);
  if (v73 == 5)
  {
    v75 = v107;
    if (v74 != 5)
      goto LABEL_15;
    goto LABEL_34;
  }
  v59 = 0;
  v75 = v107;
  if (v74 != 5 && v73 == v74)
  {
LABEL_34:
    sub_10000E660(v46 + v45[10], v75, &qword_10036E540);
    sub_10000E660(v48 + v45[10], v66, &qword_10036E540);
    v76 = v106;
    v77 = v106 + *(int *)(v104 + 48);
    sub_10000E660(v75, v106, &qword_10036E540);
    v78 = v76;
    sub_10000E660(v66, v77, &qword_10036E540);
    v79 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v105 + 48);
    if (v79(v78, 1, v55) == 1)
    {
      sub_100015704(v66, &qword_10036E540);
      v78 = v106;
      sub_100015704(v75, &qword_10036E540);
      if (v79(v77, 1, v55) == 1)
      {
        sub_100015704(v78, &qword_10036E540);
LABEL_41:
        v82 = v45[11];
        v83 = (float *)(v46 + v82);
        v84 = *(_BYTE *)(v46 + v82 + 4);
        v85 = (float *)(v48 + v82);
        v86 = *(unsigned __int8 *)(v48 + v82 + 4);
        if ((v84 & 1) != 0)
        {
          if (v86)
            goto LABEL_47;
        }
        else
        {
          if (*v83 != *v85)
            LOBYTE(v86) = 1;
          if ((v86 & 1) == 0)
          {
LABEL_47:
            v87 = v45[12];
            v88 = (float *)(v46 + v87);
            v89 = *(_BYTE *)(v46 + v87 + 4);
            v90 = (float *)(v48 + v87);
            v91 = *(unsigned __int8 *)(v48 + v87 + 4);
            if ((v89 & 1) != 0)
            {
              if (v91)
              {
LABEL_53:
                v93 = v101;
                v92 = v102;
                v94 = *(void (**)(char *, uint64_t, uint64_t))(v101 + 16);
                v95 = v99;
                v94(v99, v46, v102);
                v96 = v100;
                v94(v100, v48, v92);
                v97 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
                v59 = dispatch thunk of static Equatable.== infix(_:_:)(v95, v96, v92, v97);
                v98 = *(void (**)(char *, uint64_t))(v93 + 8);
                v98(v96, v92);
                v98(v95, v92);
                return v59 & 1;
              }
            }
            else
            {
              if (*v88 != *v90)
                LOBYTE(v91) = 1;
              if ((v91 & 1) == 0)
                goto LABEL_53;
            }
          }
        }
LABEL_15:
        v59 = 0;
        return v59 & 1;
      }
    }
    else
    {
      sub_10000E660(v78, v56, &qword_10036E540);
      if (v79(v77, 1, v55) != 1)
      {
        v80 = v103;
        sub_100003E08(v77, v103, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
        v81 = sub_100117D3C(v56, v80);
        sub_100004030(v80, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
        sub_100015704(v109, &qword_10036E540);
        sub_100015704(v107, &qword_10036E540);
        sub_100004030(v56, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
        sub_100015704(v78, &qword_10036E540);
        if ((v81 & 1) == 0)
          goto LABEL_15;
        goto LABEL_41;
      }
      sub_100015704(v109, &qword_10036E540);
      sub_100015704(v107, &qword_10036E540);
      sub_100004030(v56, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
    }
    v42 = &qword_100375388;
    v43 = v78;
LABEL_14:
    sub_100015704(v43, v42);
    goto LABEL_15;
  }
  return v59 & 1;
}

uint64_t sub_1001188DC(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(_QWORD), uint64_t (*a5)(char *, char *))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  char v34;
  uint64_t *v35;
  uint64_t *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  char *v41;
  char *v42;
  uint64_t v43;
  char v44;
  void (*v45)(char *, uint64_t);
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(_QWORD);
  uint64_t (*v54)(char *, char *);
  uint64_t *v55;
  uint64_t *v56;

  v53 = a4;
  v54 = a5;
  v56 = a3;
  v7 = type metadata accessor for UnknownStorage(0);
  v50 = *(_QWORD *)(v7 - 8);
  v51 = v7;
  v8 = __chkstk_darwin(v7);
  v49 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v48 = (char *)&v47 - v10;
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v52 = (uint64_t)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000039AC(&qword_100375338);
  __chkstk_darwin(v14);
  v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000039AC(&qword_10036E458);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v47 - v22;
  __chkstk_darwin(v21);
  v25 = (char *)&v47 - v24;
  v26 = ((uint64_t (*)(_QWORD))v56)(0);
  v27 = *(int *)(v26 + 24);
  v55 = a1;
  v28 = (uint64_t)a1 + v27;
  v29 = v26;
  sub_10000E660(v28, (uint64_t)v25, &qword_10036E458);
  v30 = *(int *)(v29 + 24);
  v56 = a2;
  sub_10000E660((uint64_t)a2 + v30, (uint64_t)v23, &qword_10036E458);
  v31 = (uint64_t)&v16[*(int *)(v14 + 48)];
  sub_10000E660((uint64_t)v25, (uint64_t)v16, &qword_10036E458);
  sub_10000E660((uint64_t)v23, v31, &qword_10036E458);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (v32((uint64_t)v16, 1, v11) == 1)
  {
    sub_100015704((uint64_t)v23, &qword_10036E458);
    sub_100015704((uint64_t)v25, &qword_10036E458);
    if (v32(v31, 1, v11) == 1)
    {
      sub_100015704((uint64_t)v16, &qword_10036E458);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  sub_10000E660((uint64_t)v16, (uint64_t)v20, &qword_10036E458);
  if (v32(v31, 1, v11) == 1)
  {
    sub_100015704((uint64_t)v23, &qword_10036E458);
    sub_100015704((uint64_t)v25, &qword_10036E458);
    sub_100004030((uint64_t)v20, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    sub_100015704((uint64_t)v16, &qword_100375338);
LABEL_10:
    v44 = 0;
    return v44 & 1;
  }
  v33 = v52;
  sub_100003E08(v31, v52, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v34 = sub_1000656F0((uint64_t)v20, v33, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004030(v33, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v23, &qword_10036E458);
  sub_100015704((uint64_t)v25, &qword_10036E458);
  sub_100004030((uint64_t)v20, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v16, &qword_10036E458);
  if ((v34 & 1) == 0)
    goto LABEL_10;
LABEL_8:
  v35 = v55;
  v36 = v56;
  if ((sub_10010B2D8(*v55, *v56, v53, v54) & 1) == 0)
    goto LABEL_10;
  v37 = (char *)v35 + *(int *)(v29 + 20);
  v39 = v50;
  v38 = v51;
  v40 = *(void (**)(char *, char *, uint64_t))(v50 + 16);
  v41 = v48;
  v40(v48, v37, v51);
  v42 = v49;
  v40(v49, (char *)v36 + *(int *)(v29 + 20), v38);
  v43 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v44 = dispatch thunk of static Equatable.== infix(_:_:)(v41, v42, v38, v43);
  v45 = *(void (**)(char *, uint64_t))(v39 + 8);
  v45(v42, v38);
  v45(v41, v38);
  return v44 & 1;
}

uint64_t sub_100118CD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  int *v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t *v33;
  uint64_t v34;
  char v35;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  char v42;
  _DWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t, uint64_t);
  char *v57;
  char *v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v73 = a1;
  v74 = a2;
  v2 = type metadata accessor for UnknownStorage(0);
  v64 = *(_QWORD *)(v2 - 8);
  v65 = v2;
  v3 = __chkstk_darwin(v2);
  v63 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v62 = (char *)&v61 - v5;
  v71 = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  v68 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v61 = (uint64_t)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_1000039AC(&qword_1003753F0);
  __chkstk_darwin(v67);
  v72 = (uint64_t)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000039AC(&qword_10036E4D8);
  v9 = __chkstk_darwin(v8);
  v66 = (uint64_t)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v69 = (uint64_t)&v61 - v12;
  __chkstk_darwin(v11);
  v70 = (uint64_t)&v61 - v13;
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1000039AC(&qword_100375338);
  __chkstk_darwin(v18);
  v20 = (char *)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1000039AC(&qword_10036E458);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v61 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v22);
  v27 = (char *)&v61 - v26;
  __chkstk_darwin(v25);
  v29 = (char *)&v61 - v28;
  v30 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry(0);
  sub_10000E660(v73 + v30[5], (uint64_t)v29, &qword_10036E458);
  sub_10000E660(v74 + v30[5], (uint64_t)v27, &qword_10036E458);
  v31 = (uint64_t)&v20[*(int *)(v18 + 48)];
  sub_10000E660((uint64_t)v29, (uint64_t)v20, &qword_10036E458);
  sub_10000E660((uint64_t)v27, v31, &qword_10036E458);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v32((uint64_t)v20, 1, v14) == 1)
  {
    sub_100015704((uint64_t)v27, &qword_10036E458);
    sub_100015704((uint64_t)v29, &qword_10036E458);
    if (v32(v31, 1, v14) == 1)
    {
      sub_100015704((uint64_t)v20, &qword_10036E458);
      goto LABEL_11;
    }
LABEL_6:
    v33 = &qword_100375338;
    v34 = (uint64_t)v20;
LABEL_7:
    sub_100015704(v34, v33);
    goto LABEL_8;
  }
  sub_10000E660((uint64_t)v20, (uint64_t)v24, &qword_10036E458);
  if (v32(v31, 1, v14) == 1)
  {
    sub_100015704((uint64_t)v27, &qword_10036E458);
    sub_100015704((uint64_t)v29, &qword_10036E458);
    sub_100004030((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  sub_100003E08(v31, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v37 = sub_1000656F0((uint64_t)v24, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004030((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v27, &qword_10036E458);
  sub_100015704((uint64_t)v29, &qword_10036E458);
  sub_100004030((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v20, &qword_10036E458);
  if ((v37 & 1) == 0)
    goto LABEL_8;
LABEL_11:
  v38 = v30[6];
  v39 = v73;
  v40 = v74;
  v41 = (_DWORD *)(v73 + v38);
  v42 = *(_BYTE *)(v73 + v38 + 4);
  v43 = (_DWORD *)(v74 + v38);
  v44 = *(unsigned __int8 *)(v74 + v38 + 4);
  if ((v42 & 1) != 0)
  {
    if (!v44)
      goto LABEL_8;
  }
  else
  {
    if (*v41 != *v43)
      LOBYTE(v44) = 1;
    if ((v44 & 1) != 0)
      goto LABEL_8;
  }
  v45 = v70;
  sub_10000E660(v73 + v30[7], v70, &qword_10036E4D8);
  v46 = v69;
  sub_10000E660(v40 + v30[7], v69, &qword_10036E4D8);
  v47 = v72;
  v48 = v72 + *(int *)(v67 + 48);
  sub_10000E660(v45, v72, &qword_10036E4D8);
  sub_10000E660(v46, v48, &qword_10036E4D8);
  v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48);
  v50 = v71;
  if (v49(v47, 1, v71) == 1)
  {
    sub_100015704(v46, &qword_10036E4D8);
    sub_100015704(v45, &qword_10036E4D8);
    if (v49(v48, 1, v50) == 1)
    {
      sub_100015704(v47, &qword_10036E4D8);
LABEL_24:
      v55 = v64;
      v54 = v65;
      v56 = *(void (**)(char *, uint64_t, uint64_t))(v64 + 16);
      v57 = v62;
      v56(v62, v39, v65);
      v58 = v63;
      v56(v63, v40, v54);
      v59 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
      v35 = dispatch thunk of static Equatable.== infix(_:_:)(v57, v58, v54, v59);
      v60 = *(void (**)(char *, uint64_t))(v55 + 8);
      v60(v58, v54);
      v60(v57, v54);
      return v35 & 1;
    }
    goto LABEL_22;
  }
  v51 = v66;
  sub_10000E660(v47, v66, &qword_10036E4D8);
  if (v49(v48, 1, v50) == 1)
  {
    sub_100015704(v46, &qword_10036E4D8);
    sub_100015704(v45, &qword_10036E4D8);
    sub_100004030(v51, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
LABEL_22:
    v33 = &qword_1003753F0;
    v34 = v47;
    goto LABEL_7;
  }
  v52 = v61;
  sub_100003E08(v48, v61, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
  v53 = sub_100119A34(v51, v52);
  sub_100004030(v52, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
  sub_100015704(v46, &qword_10036E4D8);
  sub_100015704(v45, &qword_10036E4D8);
  sub_100004030(v51, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
  sub_100015704(v47, &qword_10036E4D8);
  if ((v53 & 1) != 0)
    goto LABEL_24;
LABEL_8:
  v35 = 0;
  return v35 & 1;
}

uint64_t sub_100119384(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  int *v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t *v33;
  uint64_t v34;
  char v35;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  char v42;
  _DWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t, uint64_t);
  char *v57;
  char *v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v73 = a1;
  v74 = a2;
  v2 = type metadata accessor for UnknownStorage(0);
  v64 = *(_QWORD *)(v2 - 8);
  v65 = v2;
  v3 = __chkstk_darwin(v2);
  v63 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v62 = (char *)&v61 - v5;
  v71 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0);
  v68 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v61 = (uint64_t)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_1000039AC(&qword_100375410);
  __chkstk_darwin(v67);
  v72 = (uint64_t)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000039AC(&qword_10036E4B8);
  v9 = __chkstk_darwin(v8);
  v66 = (uint64_t)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v69 = (uint64_t)&v61 - v12;
  __chkstk_darwin(v11);
  v70 = (uint64_t)&v61 - v13;
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1000039AC(&qword_100375338);
  __chkstk_darwin(v18);
  v20 = (char *)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1000039AC(&qword_10036E458);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v61 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v22);
  v27 = (char *)&v61 - v26;
  __chkstk_darwin(v25);
  v29 = (char *)&v61 - v28;
  v30 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionState(0);
  sub_10000E660(v73 + v30[5], (uint64_t)v29, &qword_10036E458);
  sub_10000E660(v74 + v30[5], (uint64_t)v27, &qword_10036E458);
  v31 = (uint64_t)&v20[*(int *)(v18 + 48)];
  sub_10000E660((uint64_t)v29, (uint64_t)v20, &qword_10036E458);
  sub_10000E660((uint64_t)v27, v31, &qword_10036E458);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v32((uint64_t)v20, 1, v14) == 1)
  {
    sub_100015704((uint64_t)v27, &qword_10036E458);
    sub_100015704((uint64_t)v29, &qword_10036E458);
    if (v32(v31, 1, v14) == 1)
    {
      sub_100015704((uint64_t)v20, &qword_10036E458);
      goto LABEL_11;
    }
LABEL_6:
    v33 = &qword_100375338;
    v34 = (uint64_t)v20;
LABEL_7:
    sub_100015704(v34, v33);
    goto LABEL_8;
  }
  sub_10000E660((uint64_t)v20, (uint64_t)v24, &qword_10036E458);
  if (v32(v31, 1, v14) == 1)
  {
    sub_100015704((uint64_t)v27, &qword_10036E458);
    sub_100015704((uint64_t)v29, &qword_10036E458);
    sub_100004030((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  sub_100003E08(v31, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v37 = sub_1000656F0((uint64_t)v24, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004030((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v27, &qword_10036E458);
  sub_100015704((uint64_t)v29, &qword_10036E458);
  sub_100004030((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v20, &qword_10036E458);
  if ((v37 & 1) == 0)
    goto LABEL_8;
LABEL_11:
  v38 = v30[6];
  v39 = v73;
  v40 = v74;
  v41 = (_DWORD *)(v73 + v38);
  v42 = *(_BYTE *)(v73 + v38 + 4);
  v43 = (_DWORD *)(v74 + v38);
  v44 = *(unsigned __int8 *)(v74 + v38 + 4);
  if ((v42 & 1) != 0)
  {
    if (!v44)
      goto LABEL_8;
  }
  else
  {
    if (*v41 != *v43)
      LOBYTE(v44) = 1;
    if ((v44 & 1) != 0)
      goto LABEL_8;
  }
  v45 = v70;
  sub_10000E660(v73 + v30[7], v70, &qword_10036E4B8);
  v46 = v69;
  sub_10000E660(v40 + v30[7], v69, &qword_10036E4B8);
  v47 = v72;
  v48 = v72 + *(int *)(v67 + 48);
  sub_10000E660(v45, v72, &qword_10036E4B8);
  sub_10000E660(v46, v48, &qword_10036E4B8);
  v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48);
  v50 = v71;
  if (v49(v47, 1, v71) == 1)
  {
    sub_100015704(v46, &qword_10036E4B8);
    sub_100015704(v45, &qword_10036E4B8);
    if (v49(v48, 1, v50) == 1)
    {
      sub_100015704(v47, &qword_10036E4B8);
LABEL_24:
      v55 = v64;
      v54 = v65;
      v56 = *(void (**)(char *, uint64_t, uint64_t))(v64 + 16);
      v57 = v62;
      v56(v62, v39, v65);
      v58 = v63;
      v56(v63, v40, v54);
      v59 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
      v35 = dispatch thunk of static Equatable.== infix(_:_:)(v57, v58, v54, v59);
      v60 = *(void (**)(char *, uint64_t))(v55 + 8);
      v60(v58, v54);
      v60(v57, v54);
      return v35 & 1;
    }
    goto LABEL_22;
  }
  v51 = v66;
  sub_10000E660(v47, v66, &qword_10036E4B8);
  if (v49(v48, 1, v50) == 1)
  {
    sub_100015704(v46, &qword_10036E4B8);
    sub_100015704(v45, &qword_10036E4B8);
    sub_100004030(v51, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
LABEL_22:
    v33 = &qword_100375410;
    v34 = v47;
    goto LABEL_7;
  }
  v52 = v61;
  sub_100003E08(v48, v61, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
  v53 = sub_100065A60(v51, v52, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, (uint64_t (*)(uint64_t, uint64_t))sub_1000DAC88);
  sub_100004030(v52, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
  sub_100015704(v46, &qword_10036E4B8);
  sub_100015704(v45, &qword_10036E4B8);
  sub_100004030(v51, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
  sub_100015704(v47, &qword_10036E4B8);
  if ((v53 & 1) != 0)
    goto LABEL_24;
LABEL_8:
  v35 = 0;
  return v35 & 1;
}

uint64_t sub_100119A34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  float *v17;
  char v18;
  float *v19;
  int v20;
  uint64_t v21;
  float *v22;
  char v23;
  float *v24;
  int v25;
  uint64_t v26;
  float *v27;
  char v28;
  float *v29;
  int v30;
  uint64_t v31;
  float *v32;
  char v33;
  float *v34;
  int v35;
  uint64_t v36;
  float *v37;
  char v38;
  float *v39;
  int v40;
  uint64_t v41;
  float *v42;
  char v43;
  float *v44;
  int v45;
  uint64_t v46;
  float *v47;
  char v48;
  float *v49;
  int v50;
  uint64_t v51;
  float *v52;
  char v53;
  float *v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  char v59;
  uint64_t v60;
  float *v61;
  char v62;
  float *v63;
  int v64;
  void (*v66)(char *, uint64_t, uint64_t);
  uint64_t v67;
  void (*v68)(char *, uint64_t);
  uint64_t v69;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v69 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  v12 = v11[5];
  v13 = *(unsigned __int8 *)(a1 + v12);
  v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 3)
  {
    if (v14 != 3)
      goto LABEL_64;
  }
  else if (v14 == 3 || v13 != v14)
  {
    goto LABEL_64;
  }
  v16 = v11[6];
  v17 = (float *)(a1 + v16);
  v18 = *(_BYTE *)(a1 + v16 + 4);
  v19 = (float *)(a2 + v16);
  v20 = *(unsigned __int8 *)(a2 + v16 + 4);
  if ((v18 & 1) != 0)
  {
    if (!v20)
      goto LABEL_64;
  }
  else
  {
    if (*v17 != *v19)
      LOBYTE(v20) = 1;
    if ((v20 & 1) != 0)
      goto LABEL_64;
  }
  v21 = v11[7];
  v22 = (float *)(a1 + v21);
  v23 = *(_BYTE *)(a1 + v21 + 4);
  v24 = (float *)(a2 + v21);
  v25 = *(unsigned __int8 *)(a2 + v21 + 4);
  if ((v23 & 1) != 0)
  {
    if (!v25)
      goto LABEL_64;
  }
  else
  {
    if (*v22 != *v24)
      LOBYTE(v25) = 1;
    if ((v25 & 1) != 0)
      goto LABEL_64;
  }
  v26 = v11[8];
  v27 = (float *)(a1 + v26);
  v28 = *(_BYTE *)(a1 + v26 + 4);
  v29 = (float *)(a2 + v26);
  v30 = *(unsigned __int8 *)(a2 + v26 + 4);
  if ((v28 & 1) != 0)
  {
    if (!v30)
      goto LABEL_64;
  }
  else
  {
    if (*v27 != *v29)
      LOBYTE(v30) = 1;
    if ((v30 & 1) != 0)
      goto LABEL_64;
  }
  v31 = v11[9];
  v32 = (float *)(a1 + v31);
  v33 = *(_BYTE *)(a1 + v31 + 4);
  v34 = (float *)(a2 + v31);
  v35 = *(unsigned __int8 *)(a2 + v31 + 4);
  if ((v33 & 1) != 0)
  {
    if (!v35)
      goto LABEL_64;
  }
  else
  {
    if (*v32 != *v34)
      LOBYTE(v35) = 1;
    if ((v35 & 1) != 0)
      goto LABEL_64;
  }
  v36 = v11[10];
  v37 = (float *)(a1 + v36);
  v38 = *(_BYTE *)(a1 + v36 + 4);
  v39 = (float *)(a2 + v36);
  v40 = *(unsigned __int8 *)(a2 + v36 + 4);
  if ((v38 & 1) != 0)
  {
    if (!v40)
      goto LABEL_64;
  }
  else
  {
    if (*v37 != *v39)
      LOBYTE(v40) = 1;
    if ((v40 & 1) != 0)
      goto LABEL_64;
  }
  v41 = v11[11];
  v42 = (float *)(a1 + v41);
  v43 = *(_BYTE *)(a1 + v41 + 4);
  v44 = (float *)(a2 + v41);
  v45 = *(unsigned __int8 *)(a2 + v41 + 4);
  if ((v43 & 1) != 0)
  {
    if (!v45)
      goto LABEL_64;
  }
  else
  {
    if (*v42 != *v44)
      LOBYTE(v45) = 1;
    if ((v45 & 1) != 0)
      goto LABEL_64;
  }
  v46 = v11[12];
  v47 = (float *)(a1 + v46);
  v48 = *(_BYTE *)(a1 + v46 + 4);
  v49 = (float *)(a2 + v46);
  v50 = *(unsigned __int8 *)(a2 + v46 + 4);
  if ((v48 & 1) != 0)
  {
    if (!v50)
      goto LABEL_64;
  }
  else
  {
    if (*v47 != *v49)
      LOBYTE(v50) = 1;
    if ((v50 & 1) != 0)
      goto LABEL_64;
  }
  v51 = v11[13];
  v52 = (float *)(a1 + v51);
  v53 = *(_BYTE *)(a1 + v51 + 4);
  v54 = (float *)(a2 + v51);
  v55 = *(unsigned __int8 *)(a2 + v51 + 4);
  if ((v53 & 1) != 0)
  {
    if (!v55)
      goto LABEL_64;
  }
  else
  {
    if (*v52 != *v54)
      LOBYTE(v55) = 1;
    if ((v55 & 1) != 0)
      goto LABEL_64;
  }
  v56 = v11[14];
  v57 = *(unsigned __int8 *)(a1 + v56);
  v58 = *(unsigned __int8 *)(a2 + v56);
  if (v57 == 8)
  {
    if (v58 == 8)
      goto LABEL_62;
LABEL_64:
    v59 = 0;
    return v59 & 1;
  }
  v59 = 0;
  if (v58 != 8 && v57 == v58)
  {
LABEL_62:
    v60 = v11[15];
    v61 = (float *)(a1 + v60);
    v62 = *(_BYTE *)(a1 + v60 + 4);
    v63 = (float *)(a2 + v60);
    v64 = *(unsigned __int8 *)(a2 + v60 + 4);
    if ((v62 & 1) != 0)
    {
      if (!v64)
        goto LABEL_64;
    }
    else
    {
      if (*v61 != *v63)
        LOBYTE(v64) = 1;
      if ((v64 & 1) != 0)
        goto LABEL_64;
    }
    v66 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v66(v10, a1, v4);
    v66(v8, a2, v4);
    v67 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v59 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v67);
    v68 = *(void (**)(char *, uint64_t))(v5 + 8);
    v68(v8, v4);
    v68(v10, v4);
  }
  return v59 & 1;
}

uint64_t sub_100119D7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  char v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *);
  char *v55;
  char *v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t);
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;

  v4 = type metadata accessor for UnknownStorage(0);
  v63 = *(_QWORD *)(v4 - 8);
  v64 = v4;
  v5 = __chkstk_darwin(v4);
  v62 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v61 = (char *)&v60 - v7;
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v67 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000039AC(&qword_100375338);
  __chkstk_darwin(v11);
  v13 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000039AC(&qword_10036E458);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v60 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v60 - v21;
  v23 = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  v24 = *(int *)(v23 + 20);
  v65 = a1;
  v25 = a1 + v24;
  v26 = (int *)v23;
  sub_10000E660(v25, (uint64_t)v22, &qword_10036E458);
  v27 = v26[5];
  v66 = a2;
  sub_10000E660(a2 + v27, (uint64_t)v20, &qword_10036E458);
  v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_10000E660((uint64_t)v22, (uint64_t)v13, &qword_10036E458);
  sub_10000E660((uint64_t)v20, v28, &qword_10036E458);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29((uint64_t)v13, 1, v8) == 1)
  {
    sub_100015704((uint64_t)v20, &qword_10036E458);
    sub_100015704((uint64_t)v22, &qword_10036E458);
    if (v29(v28, 1, v8) == 1)
    {
      sub_100015704((uint64_t)v13, &qword_10036E458);
      goto LABEL_8;
    }
LABEL_6:
    sub_100015704((uint64_t)v13, &qword_100375338);
    goto LABEL_39;
  }
  v30 = (uint64_t)v67;
  sub_10000E660((uint64_t)v13, (uint64_t)v17, &qword_10036E458);
  if (v29(v28, 1, v8) == 1)
  {
    sub_100015704((uint64_t)v20, &qword_10036E458);
    sub_100015704((uint64_t)v22, &qword_10036E458);
    sub_100004030((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  sub_100003E08(v28, v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v31 = sub_1000656F0((uint64_t)v17, v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004030(v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v20, &qword_10036E458);
  sub_100015704((uint64_t)v22, &qword_10036E458);
  sub_100004030((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v13, &qword_10036E458);
  if ((v31 & 1) == 0)
    goto LABEL_39;
LABEL_8:
  v32 = v26[6];
  v33 = v66;
  v34 = *(unsigned __int8 *)(v65 + v32);
  v35 = *(unsigned __int8 *)(v66 + v32);
  if (v34 == 4)
  {
    if (v35 != 4)
      goto LABEL_39;
  }
  else
  {
    v36 = 0;
    if (v35 == 4 || v34 != v35)
      return v36 & 1;
  }
  v37 = v26[7];
  v38 = *(unsigned __int8 *)(v65 + v37);
  v39 = *(unsigned __int8 *)(v66 + v37);
  if (v38 == 4)
  {
    if (v39 != 4)
      goto LABEL_39;
  }
  else
  {
    v36 = 0;
    if (v39 == 4 || v38 != v39)
      return v36 & 1;
  }
  v40 = v26[8];
  v41 = *(unsigned __int8 *)(v65 + v40);
  v42 = *(unsigned __int8 *)(v66 + v40);
  if (v41 == 4)
  {
    if (v42 != 4)
      goto LABEL_39;
    goto LABEL_23;
  }
  v36 = 0;
  if (v42 != 4 && v41 == v42)
  {
LABEL_23:
    v43 = v26[9];
    v44 = *(unsigned __int8 *)(v65 + v43);
    v45 = *(unsigned __int8 *)(v66 + v43);
    if (v44 == 2)
    {
      if (v45 != 2)
        goto LABEL_39;
    }
    else if (v45 == 2 || ((((v45 & 1) == 0) ^ v44) & 1) == 0)
    {
      goto LABEL_39;
    }
    v46 = v26[10];
    v47 = *(unsigned __int8 *)(v65 + v46);
    v48 = *(unsigned __int8 *)(v66 + v46);
    if (v47 == 2)
    {
      if (v48 != 2)
        goto LABEL_39;
    }
    else if (v48 == 2 || ((((v48 & 1) == 0) ^ v47) & 1) == 0)
    {
      goto LABEL_39;
    }
    v49 = v26[11];
    v50 = *(unsigned __int8 *)(v65 + v49);
    v51 = *(unsigned __int8 *)(v66 + v49);
    if (v50 != 2)
    {
      if (v51 == 2 || ((((v51 & 1) == 0) ^ v50) & 1) == 0)
        goto LABEL_39;
      goto LABEL_38;
    }
    if (v51 == 2)
    {
LABEL_38:
      v53 = v63;
      v52 = v64;
      v54 = *(void (**)(char *))(v63 + 16);
      v55 = v61;
      v54(v61);
      v56 = v62;
      ((void (*)(char *, uint64_t, uint64_t))v54)(v62, v33, v52);
      v57 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
      v36 = dispatch thunk of static Equatable.== infix(_:_:)(v55, v56, v52, v57);
      v58 = *(void (**)(char *, uint64_t))(v53 + 8);
      v58(v56, v52);
      v58(v55, v52);
      return v36 & 1;
    }
LABEL_39:
    v36 = 0;
  }
  return v36 & 1;
}

uint64_t sub_10011A294(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  int v17;
  int v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v25;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v25 - v9;
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  v12 = *(int *)(v11 + 20);
  v13 = *(unsigned __int8 *)(a1 + v12);
  v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 4)
  {
    if (v14 != 4)
      goto LABEL_16;
  }
  else if (v14 == 4 || v13 != v14)
  {
    goto LABEL_16;
  }
  v16 = *(int *)(v11 + 24);
  v17 = *(unsigned __int8 *)(a1 + v16);
  v18 = *(unsigned __int8 *)(a2 + v16);
  if (v17 != 4)
  {
    if (v18 != 4 && v17 == v18)
      goto LABEL_11;
LABEL_16:
    v21 = 0;
    return v21 & 1;
  }
  if (v18 != 4)
    goto LABEL_16;
LABEL_11:
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v19(v10, a1, v4);
  v19(v8, a2, v4);
  v20 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v21 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v20);
  v22 = *(void (**)(char *, uint64_t))(v5 + 8);
  v22(v8, v4);
  v22(v10, v4);
  return v21 & 1;
}

uint64_t sub_10011A400(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t *v42;
  uint64_t v43;
  char v44;
  char v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  char v50;
  uint64_t v51;
  _DWORD *v52;
  int v53;
  int *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int (*v72)(uint64_t, uint64_t, uint64_t);
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(char *, uint64_t, uint64_t);
  char *v78;
  char *v79;
  uint64_t v80;
  void (*v81)(char *, uint64_t);
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int *v102;
  uint64_t v103;
  uint64_t v104;

  v103 = a1;
  v104 = a2;
  v2 = type metadata accessor for UnknownStorage(0);
  v85 = *(_QWORD *)(v2 - 8);
  v86 = v2;
  v3 = __chkstk_darwin(v2);
  v84 = (char *)&v82 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v83 = (char *)&v82 - v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  v89 = *(_QWORD *)(v6 - 8);
  v90 = v6;
  __chkstk_darwin(v6);
  v82 = (uint64_t)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_1000039AC(&qword_100375340);
  __chkstk_darwin(v88);
  v95 = (char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000039AC(&qword_10036E588);
  v10 = __chkstk_darwin(v9);
  v92 = (char *)&v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v93 = (char *)&v82 - v13;
  __chkstk_darwin(v12);
  v94 = (char *)&v82 - v14;
  v99 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  v97 = *(_QWORD *)(v99 - 8);
  __chkstk_darwin(v99);
  v87 = (uint64_t)&v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = sub_1000039AC(&qword_100375348);
  __chkstk_darwin(v96);
  v100 = (uint64_t)&v82 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000039AC(&qword_10036E580);
  v18 = __chkstk_darwin(v17);
  v91 = (uint64_t)&v82 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v101 = (uint64_t)&v82 - v21;
  __chkstk_darwin(v20);
  v98 = (uint64_t)&v82 - v22;
  v23 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (char *)&v82 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_1000039AC(&qword_100375338);
  __chkstk_darwin(v27);
  v29 = (char *)&v82 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_1000039AC(&qword_10036E458);
  v31 = __chkstk_darwin(v30);
  v33 = (char *)&v82 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __chkstk_darwin(v31);
  v36 = (char *)&v82 - v35;
  __chkstk_darwin(v34);
  v38 = (char *)&v82 - v37;
  v39 = type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0);
  sub_10000E660(v103 + *(int *)(v39 + 20), (uint64_t)v38, &qword_10036E458);
  v102 = (int *)v39;
  sub_10000E660(v104 + *(int *)(v39 + 20), (uint64_t)v36, &qword_10036E458);
  v40 = (uint64_t)&v29[*(int *)(v27 + 48)];
  sub_10000E660((uint64_t)v38, (uint64_t)v29, &qword_10036E458);
  sub_10000E660((uint64_t)v36, v40, &qword_10036E458);
  v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  if (v41((uint64_t)v29, 1, v23) == 1)
  {
    sub_100015704((uint64_t)v36, &qword_10036E458);
    sub_100015704((uint64_t)v38, &qword_10036E458);
    if (v41(v40, 1, v23) == 1)
    {
      sub_100015704((uint64_t)v29, &qword_10036E458);
      goto LABEL_11;
    }
LABEL_6:
    v42 = &qword_100375338;
    v43 = (uint64_t)v29;
LABEL_7:
    sub_100015704(v43, v42);
    goto LABEL_8;
  }
  sub_10000E660((uint64_t)v29, (uint64_t)v33, &qword_10036E458);
  if (v41(v40, 1, v23) == 1)
  {
    sub_100015704((uint64_t)v36, &qword_10036E458);
    sub_100015704((uint64_t)v38, &qword_10036E458);
    sub_100004030((uint64_t)v33, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  sub_100003E08(v40, (uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v46 = sub_1000656F0((uint64_t)v33, (uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004030((uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v36, &qword_10036E458);
  sub_100015704((uint64_t)v38, &qword_10036E458);
  sub_100004030((uint64_t)v33, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v29, &qword_10036E458);
  if ((v46 & 1) == 0)
    goto LABEL_8;
LABEL_11:
  v47 = v103;
  v48 = v102[6];
  v49 = (_DWORD *)(v103 + v48);
  v50 = *(_BYTE *)(v103 + v48 + 4);
  v51 = v104;
  v52 = (_DWORD *)(v104 + v48);
  v53 = *(unsigned __int8 *)(v104 + v48 + 4);
  if ((v50 & 1) != 0)
  {
    if (!v53)
      goto LABEL_8;
  }
  else
  {
    if (*v49 != *v52)
      LOBYTE(v53) = 1;
    if ((v53 & 1) != 0)
      goto LABEL_8;
  }
  v54 = v102;
  v55 = v98;
  sub_10000E660(v103 + v102[7], v98, &qword_10036E580);
  v56 = v101;
  sub_10000E660(v51 + v54[7], v101, &qword_10036E580);
  v57 = v100;
  v58 = v100 + *(int *)(v96 + 48);
  sub_10000E660(v55, v100, &qword_10036E580);
  sub_10000E660(v56, v58, &qword_10036E580);
  v59 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v97 + 48);
  v60 = v99;
  if (v59(v57, 1, v99) == 1)
  {
    sub_100015704(v56, &qword_10036E580);
    sub_100015704(v55, &qword_10036E580);
    v61 = v59(v58, 1, v60);
    v63 = (uint64_t)v94;
    v62 = (uint64_t)v95;
    v64 = (uint64_t)v92;
    v65 = (uint64_t)v93;
    if (v61 == 1)
    {
      sub_100015704(v57, &qword_10036E580);
      goto LABEL_24;
    }
    goto LABEL_22;
  }
  v66 = v91;
  sub_10000E660(v57, v91, &qword_10036E580);
  v67 = v59(v58, 1, v60);
  v63 = (uint64_t)v94;
  v62 = (uint64_t)v95;
  v65 = (uint64_t)v93;
  if (v67 == 1)
  {
    sub_100015704(v101, &qword_10036E580);
    sub_100015704(v55, &qword_10036E580);
    sub_100004030(v66, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
LABEL_22:
    v42 = &qword_100375348;
    v43 = v57;
    goto LABEL_7;
  }
  v68 = v87;
  sub_100003E08(v58, v87, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
  LODWORD(v99) = sub_10011A294(v66, v68);
  sub_100004030(v68, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
  sub_100015704(v101, &qword_10036E580);
  sub_100015704(v55, &qword_10036E580);
  sub_100004030(v66, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
  sub_100015704(v57, &qword_10036E580);
  v64 = (uint64_t)v92;
  if ((v99 & 1) == 0)
    goto LABEL_8;
LABEL_24:
  v69 = v102;
  sub_10000E660(v47 + v102[8], v63, &qword_10036E588);
  sub_10000E660(v51 + v69[8], v65, &qword_10036E588);
  v70 = v62 + *(int *)(v88 + 48);
  sub_10000E660(v63, v62, &qword_10036E588);
  sub_10000E660(v65, v70, &qword_10036E588);
  v71 = v90;
  v72 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v89 + 48);
  if (v72(v62, 1, v90) == 1)
  {
    sub_100015704(v65, &qword_10036E588);
    sub_100015704(v63, &qword_10036E588);
    if (v72(v70, 1, v71) == 1)
    {
      sub_100015704(v62, &qword_10036E588);
LABEL_31:
      v76 = v85;
      v75 = v86;
      v77 = *(void (**)(char *, uint64_t, uint64_t))(v85 + 16);
      v78 = v83;
      v77(v83, v47, v86);
      v79 = v84;
      v77(v84, v51, v75);
      v80 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
      v44 = dispatch thunk of static Equatable.== infix(_:_:)(v78, v79, v75, v80);
      v81 = *(void (**)(char *, uint64_t))(v76 + 8);
      v81(v79, v75);
      v81(v78, v75);
      return v44 & 1;
    }
    goto LABEL_29;
  }
  sub_10000E660(v62, v64, &qword_10036E588);
  if (v72(v70, 1, v71) == 1)
  {
    sub_100015704(v65, &qword_10036E588);
    sub_100015704(v63, &qword_10036E588);
    sub_100004030(v64, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
LABEL_29:
    v42 = &qword_100375340;
    v43 = v62;
    goto LABEL_7;
  }
  v73 = v82;
  sub_100003E08(v70, v82, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
  v74 = sub_100119D7C(v64, v73);
  sub_100004030(v73, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
  sub_100015704(v65, &qword_10036E588);
  sub_100015704(v63, &qword_10036E588);
  sub_100004030(v64, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
  sub_100015704(v62, &qword_10036E588);
  if ((v74 & 1) != 0)
    goto LABEL_31;
LABEL_8:
  v44 = 0;
  return v44 & 1;
}

uint64_t sub_10011AD88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  int *v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t *v33;
  uint64_t v34;
  char v35;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  char v42;
  _DWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t, uint64_t);
  char *v57;
  char *v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v73 = a1;
  v74 = a2;
  v2 = type metadata accessor for UnknownStorage(0);
  v64 = *(_QWORD *)(v2 - 8);
  v65 = v2;
  v3 = __chkstk_darwin(v2);
  v63 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v62 = (char *)&v61 - v5;
  v71 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0);
  v68 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v61 = (uint64_t)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_1000039AC(&qword_1003753B0);
  __chkstk_darwin(v67);
  v72 = (uint64_t)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000039AC(&qword_10036E518);
  v9 = __chkstk_darwin(v8);
  v66 = (uint64_t)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v69 = (uint64_t)&v61 - v12;
  __chkstk_darwin(v11);
  v70 = (uint64_t)&v61 - v13;
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1000039AC(&qword_100375338);
  __chkstk_darwin(v18);
  v20 = (char *)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1000039AC(&qword_10036E458);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v61 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v22);
  v27 = (char *)&v61 - v26;
  __chkstk_darwin(v25);
  v29 = (char *)&v61 - v28;
  v30 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_StepCount(0);
  sub_10000E660(v73 + v30[5], (uint64_t)v29, &qword_10036E458);
  sub_10000E660(v74 + v30[5], (uint64_t)v27, &qword_10036E458);
  v31 = (uint64_t)&v20[*(int *)(v18 + 48)];
  sub_10000E660((uint64_t)v29, (uint64_t)v20, &qword_10036E458);
  sub_10000E660((uint64_t)v27, v31, &qword_10036E458);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v32((uint64_t)v20, 1, v14) == 1)
  {
    sub_100015704((uint64_t)v27, &qword_10036E458);
    sub_100015704((uint64_t)v29, &qword_10036E458);
    if (v32(v31, 1, v14) == 1)
    {
      sub_100015704((uint64_t)v20, &qword_10036E458);
      goto LABEL_11;
    }
LABEL_6:
    v33 = &qword_100375338;
    v34 = (uint64_t)v20;
LABEL_7:
    sub_100015704(v34, v33);
    goto LABEL_8;
  }
  sub_10000E660((uint64_t)v20, (uint64_t)v24, &qword_10036E458);
  if (v32(v31, 1, v14) == 1)
  {
    sub_100015704((uint64_t)v27, &qword_10036E458);
    sub_100015704((uint64_t)v29, &qword_10036E458);
    sub_100004030((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  sub_100003E08(v31, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v37 = sub_1000656F0((uint64_t)v24, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004030((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v27, &qword_10036E458);
  sub_100015704((uint64_t)v29, &qword_10036E458);
  sub_100004030((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v20, &qword_10036E458);
  if ((v37 & 1) == 0)
    goto LABEL_8;
LABEL_11:
  v38 = v30[6];
  v39 = v73;
  v40 = v74;
  v41 = (_DWORD *)(v73 + v38);
  v42 = *(_BYTE *)(v73 + v38 + 4);
  v43 = (_DWORD *)(v74 + v38);
  v44 = *(unsigned __int8 *)(v74 + v38 + 4);
  if ((v42 & 1) != 0)
  {
    if (!v44)
      goto LABEL_8;
  }
  else
  {
    if (*v41 != *v43)
      LOBYTE(v44) = 1;
    if ((v44 & 1) != 0)
      goto LABEL_8;
  }
  v45 = v70;
  sub_10000E660(v73 + v30[7], v70, &qword_10036E518);
  v46 = v69;
  sub_10000E660(v40 + v30[7], v69, &qword_10036E518);
  v47 = v72;
  v48 = v72 + *(int *)(v67 + 48);
  sub_10000E660(v45, v72, &qword_10036E518);
  sub_10000E660(v46, v48, &qword_10036E518);
  v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48);
  v50 = v71;
  if (v49(v47, 1, v71) == 1)
  {
    sub_100015704(v46, &qword_10036E518);
    sub_100015704(v45, &qword_10036E518);
    if (v49(v48, 1, v50) == 1)
    {
      sub_100015704(v47, &qword_10036E518);
LABEL_24:
      v55 = v64;
      v54 = v65;
      v56 = *(void (**)(char *, uint64_t, uint64_t))(v64 + 16);
      v57 = v62;
      v56(v62, v39, v65);
      v58 = v63;
      v56(v63, v40, v54);
      v59 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
      v35 = dispatch thunk of static Equatable.== infix(_:_:)(v57, v58, v54, v59);
      v60 = *(void (**)(char *, uint64_t))(v55 + 8);
      v60(v58, v54);
      v60(v57, v54);
      return v35 & 1;
    }
    goto LABEL_22;
  }
  v51 = v66;
  sub_10000E660(v47, v66, &qword_10036E518);
  if (v49(v48, 1, v50) == 1)
  {
    sub_100015704(v46, &qword_10036E518);
    sub_100015704(v45, &qword_10036E518);
    sub_100004030(v51, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
LABEL_22:
    v33 = &qword_1003753B0;
    v34 = v47;
    goto LABEL_7;
  }
  v52 = v61;
  sub_100003E08(v48, v61, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
  v53 = sub_100065A60(v51, v52, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (uint64_t (*)(uint64_t, uint64_t))sub_1000F18BC);
  sub_100004030(v52, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
  sub_100015704(v46, &qword_10036E518);
  sub_100015704(v45, &qword_10036E518);
  sub_100004030(v51, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
  sub_100015704(v47, &qword_10036E518);
  if ((v53 & 1) != 0)
    goto LABEL_24;
LABEL_8:
  v35 = 0;
  return v35 & 1;
}

uint64_t sub_10011B438(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  char v31;
  uint64_t v32;
  double *v33;
  char v34;
  double *v35;
  int v36;
  uint64_t v37;
  double *v38;
  char v39;
  double *v40;
  int v41;
  uint64_t v42;
  double *v43;
  char v44;
  double *v45;
  int v46;
  uint64_t v47;
  double *v48;
  char v49;
  double *v50;
  int v51;
  uint64_t v52;
  double *v53;
  char v54;
  double *v55;
  int v56;
  uint64_t v57;
  double *v58;
  char v59;
  double *v60;
  int v61;
  uint64_t v62;
  double *v63;
  char v64;
  double *v65;
  int v66;
  uint64_t v67;
  double *v68;
  char v69;
  double *v70;
  int v71;
  uint64_t v72;
  double *v73;
  char v74;
  double *v75;
  int v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  int v81;
  int v82;
  uint64_t v83;
  int v84;
  int v85;
  uint64_t v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(char *, uint64_t, uint64_t);
  char *v92;
  char *v93;
  uint64_t v94;
  char v95;
  void (*v96)(char *, uint64_t);
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;

  v4 = type metadata accessor for UnknownStorage(0);
  v101 = *(_QWORD *)(v4 - 8);
  v102 = v4;
  v5 = __chkstk_darwin(v4);
  v100 = (char *)&v98 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v99 = (char *)&v98 - v7;
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v103 = (uint64_t)&v98 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000039AC(&qword_100375338);
  __chkstk_darwin(v11);
  v13 = (char *)&v98 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000039AC(&qword_10036E458);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v98 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v98 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v98 - v21;
  v23 = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  v24 = *(int *)(v23 + 20);
  v104 = a1;
  v25 = a1 + v24;
  v26 = (int *)v23;
  sub_10000E660(v25, (uint64_t)v22, &qword_10036E458);
  v27 = v26[5];
  v105 = a2;
  sub_10000E660(a2 + v27, (uint64_t)v20, &qword_10036E458);
  v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_10000E660((uint64_t)v22, (uint64_t)v13, &qword_10036E458);
  sub_10000E660((uint64_t)v20, v28, &qword_10036E458);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29((uint64_t)v13, 1, v8) == 1)
  {
    sub_100015704((uint64_t)v20, &qword_10036E458);
    sub_100015704((uint64_t)v22, &qword_10036E458);
    if (v29(v28, 1, v8) == 1)
    {
      sub_100015704((uint64_t)v13, &qword_10036E458);
      goto LABEL_8;
    }
LABEL_6:
    sub_100015704((uint64_t)v13, &qword_100375338);
    goto LABEL_83;
  }
  sub_10000E660((uint64_t)v13, (uint64_t)v17, &qword_10036E458);
  if (v29(v28, 1, v8) == 1)
  {
    sub_100015704((uint64_t)v20, &qword_10036E458);
    sub_100015704((uint64_t)v22, &qword_10036E458);
    sub_100004030((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  v30 = v103;
  sub_100003E08(v28, v103, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v31 = sub_1000656F0((uint64_t)v17, v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004030(v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v20, &qword_10036E458);
  sub_100015704((uint64_t)v22, &qword_10036E458);
  sub_100004030((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v13, &qword_10036E458);
  if ((v31 & 1) == 0)
    goto LABEL_83;
LABEL_8:
  v32 = v26[6];
  v33 = (double *)(v104 + v32);
  v34 = *(_BYTE *)(v104 + v32 + 8);
  v35 = (double *)(v105 + v32);
  v36 = *(unsigned __int8 *)(v105 + v32 + 8);
  if ((v34 & 1) != 0)
  {
    if (!v36)
      goto LABEL_83;
  }
  else
  {
    if (*v33 != *v35)
      LOBYTE(v36) = 1;
    if ((v36 & 1) != 0)
      goto LABEL_83;
  }
  v37 = v26[7];
  v38 = (double *)(v104 + v37);
  v39 = *(_BYTE *)(v104 + v37 + 8);
  v40 = (double *)(v105 + v37);
  v41 = *(unsigned __int8 *)(v105 + v37 + 8);
  if ((v39 & 1) != 0)
  {
    if (!v41)
      goto LABEL_83;
  }
  else
  {
    if (*v38 != *v40)
      LOBYTE(v41) = 1;
    if ((v41 & 1) != 0)
      goto LABEL_83;
  }
  v42 = v26[8];
  v43 = (double *)(v104 + v42);
  v44 = *(_BYTE *)(v104 + v42 + 8);
  v45 = (double *)(v105 + v42);
  v46 = *(unsigned __int8 *)(v105 + v42 + 8);
  if ((v44 & 1) != 0)
  {
    if (!v46)
      goto LABEL_83;
  }
  else
  {
    if (*v43 != *v45)
      LOBYTE(v46) = 1;
    if ((v46 & 1) != 0)
      goto LABEL_83;
  }
  v47 = v26[9];
  v48 = (double *)(v104 + v47);
  v49 = *(_BYTE *)(v104 + v47 + 8);
  v50 = (double *)(v105 + v47);
  v51 = *(unsigned __int8 *)(v105 + v47 + 8);
  if ((v49 & 1) != 0)
  {
    if (!v51)
      goto LABEL_83;
  }
  else
  {
    if (*v48 != *v50)
      LOBYTE(v51) = 1;
    if ((v51 & 1) != 0)
      goto LABEL_83;
  }
  v52 = v26[10];
  v53 = (double *)(v104 + v52);
  v54 = *(_BYTE *)(v104 + v52 + 8);
  v55 = (double *)(v105 + v52);
  v56 = *(unsigned __int8 *)(v105 + v52 + 8);
  if ((v54 & 1) != 0)
  {
    if (!v56)
      goto LABEL_83;
  }
  else
  {
    if (*v53 != *v55)
      LOBYTE(v56) = 1;
    if ((v56 & 1) != 0)
      goto LABEL_83;
  }
  v57 = v26[11];
  v58 = (double *)(v104 + v57);
  v59 = *(_BYTE *)(v104 + v57 + 8);
  v60 = (double *)(v105 + v57);
  v61 = *(unsigned __int8 *)(v105 + v57 + 8);
  if ((v59 & 1) != 0)
  {
    if (!v61)
      goto LABEL_83;
  }
  else
  {
    if (*v58 != *v60)
      LOBYTE(v61) = 1;
    if ((v61 & 1) != 0)
      goto LABEL_83;
  }
  v62 = v26[12];
  v63 = (double *)(v104 + v62);
  v64 = *(_BYTE *)(v104 + v62 + 8);
  v65 = (double *)(v105 + v62);
  v66 = *(unsigned __int8 *)(v105 + v62 + 8);
  if ((v64 & 1) != 0)
  {
    if (!v66)
      goto LABEL_83;
  }
  else
  {
    if (*v63 != *v65)
      LOBYTE(v66) = 1;
    if ((v66 & 1) != 0)
      goto LABEL_83;
  }
  v67 = v26[13];
  v68 = (double *)(v104 + v67);
  v69 = *(_BYTE *)(v104 + v67 + 8);
  v70 = (double *)(v105 + v67);
  v71 = *(unsigned __int8 *)(v105 + v67 + 8);
  if ((v69 & 1) != 0)
  {
    if (!v71)
      goto LABEL_83;
  }
  else
  {
    if (*v68 != *v70)
      LOBYTE(v71) = 1;
    if ((v71 & 1) != 0)
      goto LABEL_83;
  }
  v72 = v26[14];
  v73 = (double *)(v104 + v72);
  v74 = *(_BYTE *)(v104 + v72 + 8);
  v75 = (double *)(v105 + v72);
  v76 = *(unsigned __int8 *)(v105 + v72 + 8);
  if ((v74 & 1) != 0)
  {
    if (!v76)
      goto LABEL_83;
  }
  else
  {
    if (*v73 != *v75)
      LOBYTE(v76) = 1;
    if ((v76 & 1) != 0)
      goto LABEL_83;
  }
  v77 = v26[15];
  v78 = *(unsigned __int8 *)(v104 + v77);
  v79 = *(unsigned __int8 *)(v105 + v77);
  if (v78 == 2)
  {
    if (v79 != 2)
      goto LABEL_83;
  }
  else if (v79 == 2 || ((((v79 & 1) == 0) ^ v78) & 1) == 0)
  {
    goto LABEL_83;
  }
  v80 = v26[16];
  v81 = *(unsigned __int8 *)(v104 + v80);
  v82 = *(unsigned __int8 *)(v105 + v80);
  if (v81 == 2)
  {
    if (v82 != 2)
      goto LABEL_83;
  }
  else if (v82 == 2 || ((((v82 & 1) == 0) ^ v81) & 1) == 0)
  {
    goto LABEL_83;
  }
  v83 = v26[17];
  v84 = *(unsigned __int8 *)(v104 + v83);
  v85 = *(unsigned __int8 *)(v105 + v83);
  if (v84 == 2)
  {
    if (v85 != 2)
      goto LABEL_83;
  }
  else if (v85 == 2 || ((((v85 & 1) == 0) ^ v84) & 1) == 0)
  {
    goto LABEL_83;
  }
  v86 = v26[18];
  v87 = *(unsigned __int8 *)(v104 + v86);
  v88 = *(unsigned __int8 *)(v105 + v86);
  if (v87 != 2)
  {
    if (v88 != 2 && ((((v88 & 1) == 0) ^ v87) & 1) != 0)
      goto LABEL_82;
LABEL_83:
    v95 = 0;
    return v95 & 1;
  }
  if (v88 != 2)
    goto LABEL_83;
LABEL_82:
  v90 = v101;
  v89 = v102;
  v91 = *(void (**)(char *, uint64_t, uint64_t))(v101 + 16);
  v92 = v99;
  v91(v99, v104, v102);
  v93 = v100;
  v91(v100, v105, v89);
  v94 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v95 = dispatch thunk of static Equatable.== infix(_:_:)(v92, v93, v89, v94);
  v96 = *(void (**)(char *, uint64_t))(v90 + 8);
  v96(v93, v89);
  v96(v92, v89);
  return v95 & 1;
}

uint64_t sub_10011BAC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  float *v13;
  char v14;
  float *v15;
  int v16;
  uint64_t v17;
  float *v18;
  char v19;
  float *v20;
  int v21;
  uint64_t v22;
  float *v23;
  char v24;
  float *v25;
  int v26;
  char v27;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v32 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  v12 = v11[5];
  v13 = (float *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 4);
  v15 = (float *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 4);
  if ((v14 & 1) != 0)
  {
    if (!v16)
      goto LABEL_15;
  }
  else
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_15;
  }
  v17 = v11[6];
  v18 = (float *)(a1 + v17);
  v19 = *(_BYTE *)(a1 + v17 + 4);
  v20 = (float *)(a2 + v17);
  v21 = *(unsigned __int8 *)(a2 + v17 + 4);
  if ((v19 & 1) == 0)
  {
    if (*v18 != *v20)
      LOBYTE(v21) = 1;
    if ((v21 & 1) != 0)
      goto LABEL_15;
LABEL_13:
    v22 = v11[7];
    v23 = (float *)(a1 + v22);
    v24 = *(_BYTE *)(a1 + v22 + 4);
    v25 = (float *)(a2 + v22);
    v26 = *(unsigned __int8 *)(a2 + v22 + 4);
    if ((v24 & 1) != 0)
    {
      if (!v26)
        goto LABEL_15;
    }
    else
    {
      if (*v23 != *v25)
        LOBYTE(v26) = 1;
      if ((v26 & 1) != 0)
        goto LABEL_15;
    }
    v29 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v29(v10, a1, v4);
    v29(v8, a2, v4);
    v30 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v27 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v30);
    v31 = *(void (**)(char *, uint64_t))(v5 + 8);
    v31(v8, v4);
    v31(v10, v4);
    return v27 & 1;
  }
  if (v21)
    goto LABEL_13;
LABEL_15:
  v27 = 0;
  return v27 & 1;
}

uint64_t sub_10011BC78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v48;
  char v49;
  uint64_t v50;
  float *v51;
  char v52;
  float *v53;
  int v54;
  uint64_t v55;
  float *v56;
  char v57;
  float *v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t, uint64_t);
  char *v66;
  char *v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t);
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v84 = a1;
  v85 = a2;
  v2 = type metadata accessor for UnknownStorage(0);
  v73 = *(_QWORD *)(v2 - 8);
  v74 = v2;
  v3 = __chkstk_darwin(v2);
  v72 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v71 = (char *)&v70 - v5;
  v81 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0);
  v78 = *(_QWORD *)(v81 - 8);
  __chkstk_darwin(v81);
  v75 = (uint64_t)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_1000039AC(&qword_1003753A8);
  __chkstk_darwin(v77);
  v82 = (uint64_t)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000039AC(&qword_10036E530);
  v9 = __chkstk_darwin(v8);
  v76 = (uint64_t)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v83 = (uint64_t)&v70 - v12;
  __chkstk_darwin(v11);
  v80 = (uint64_t)&v70 - v13;
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1000039AC(&qword_100375338);
  __chkstk_darwin(v18);
  v20 = (char *)&v70 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1000039AC(&qword_10036E458);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v70 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v22);
  v27 = (char *)&v70 - v26;
  __chkstk_darwin(v25);
  v29 = (char *)&v70 - v28;
  v30 = type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0);
  sub_10000E660(v84 + *(int *)(v30 + 20), (uint64_t)v29, &qword_10036E458);
  v79 = (int *)v30;
  sub_10000E660(v85 + *(int *)(v30 + 20), (uint64_t)v27, &qword_10036E458);
  v31 = (uint64_t)&v20[*(int *)(v18 + 48)];
  sub_10000E660((uint64_t)v29, (uint64_t)v20, &qword_10036E458);
  sub_10000E660((uint64_t)v27, v31, &qword_10036E458);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v32((uint64_t)v20, 1, v14) == 1)
  {
    sub_100015704((uint64_t)v27, &qword_10036E458);
    sub_100015704((uint64_t)v29, &qword_10036E458);
    if (v32(v31, 1, v14) == 1)
    {
      sub_100015704((uint64_t)v20, &qword_10036E458);
      goto LABEL_8;
    }
LABEL_6:
    v33 = &qword_100375338;
    v34 = (uint64_t)v20;
LABEL_14:
    sub_100015704(v34, v33);
    goto LABEL_15;
  }
  sub_10000E660((uint64_t)v20, (uint64_t)v24, &qword_10036E458);
  if (v32(v31, 1, v14) == 1)
  {
    sub_100015704((uint64_t)v27, &qword_10036E458);
    sub_100015704((uint64_t)v29, &qword_10036E458);
    sub_100004030((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  sub_100003E08(v31, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v35 = sub_1000656F0((uint64_t)v24, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004030((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v27, &qword_10036E458);
  sub_100015704((uint64_t)v29, &qword_10036E458);
  sub_100004030((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v20, &qword_10036E458);
  if ((v35 & 1) == 0)
    goto LABEL_15;
LABEL_8:
  v37 = v79;
  v36 = v80;
  v38 = v84;
  sub_10000E660(v84 + v79[6], v80, &qword_10036E530);
  v39 = v85;
  v40 = v83;
  sub_10000E660(v85 + v37[6], v83, &qword_10036E530);
  v41 = v82;
  v42 = v82 + *(int *)(v77 + 48);
  sub_10000E660(v36, v82, &qword_10036E530);
  sub_10000E660(v40, v42, &qword_10036E530);
  v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48);
  v44 = v81;
  if (v43(v41, 1, v81) != 1)
  {
    v45 = v76;
    sub_10000E660(v41, v76, &qword_10036E530);
    if (v43(v42, 1, v44) != 1)
    {
      v48 = v75;
      sub_100003E08(v42, v75, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
      v49 = sub_100065A60(v45, v48, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, (uint64_t (*)(uint64_t, uint64_t))sub_1000F584C);
      sub_100004030(v48, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
      sub_100015704(v83, &qword_10036E530);
      sub_100015704(v36, &qword_10036E530);
      sub_100004030(v45, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
      sub_100015704(v41, &qword_10036E530);
      if ((v49 & 1) == 0)
        goto LABEL_15;
      goto LABEL_18;
    }
    sub_100015704(v83, &qword_10036E530);
    sub_100015704(v36, &qword_10036E530);
    sub_100004030(v45, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
    goto LABEL_13;
  }
  sub_100015704(v40, &qword_10036E530);
  sub_100015704(v36, &qword_10036E530);
  if (v43(v42, 1, v44) != 1)
  {
LABEL_13:
    v33 = &qword_1003753A8;
    v34 = v41;
    goto LABEL_14;
  }
  sub_100015704(v41, &qword_10036E530);
LABEL_18:
  v50 = v37[7];
  v51 = (float *)(v38 + v50);
  v52 = *(_BYTE *)(v38 + v50 + 4);
  v53 = (float *)(v39 + v50);
  v54 = *(unsigned __int8 *)(v39 + v50 + 4);
  if ((v52 & 1) != 0)
  {
    if (!v54)
      goto LABEL_15;
  }
  else
  {
    if (*v51 != *v53)
      LOBYTE(v54) = 1;
    if ((v54 & 1) != 0)
      goto LABEL_15;
  }
  v55 = v37[8];
  v56 = (float *)(v38 + v55);
  v57 = *(_BYTE *)(v38 + v55 + 4);
  v58 = (float *)(v39 + v55);
  v59 = *(unsigned __int8 *)(v39 + v55 + 4);
  if ((v57 & 1) != 0)
  {
    if (!v59)
      goto LABEL_15;
  }
  else
  {
    if (*v56 != *v58)
      LOBYTE(v59) = 1;
    if ((v59 & 1) != 0)
      goto LABEL_15;
  }
  v60 = v37[9];
  v61 = *(unsigned __int8 *)(v38 + v60);
  v62 = *(unsigned __int8 *)(v39 + v60);
  if (v61 == 2)
  {
    if (v62 == 2)
    {
LABEL_35:
      v64 = v73;
      v63 = v74;
      v65 = *(void (**)(char *, uint64_t, uint64_t))(v73 + 16);
      v66 = v71;
      v65(v71, v38, v74);
      v67 = v72;
      v65(v72, v39, v63);
      v68 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
      v46 = dispatch thunk of static Equatable.== infix(_:_:)(v66, v67, v63, v68);
      v69 = *(void (**)(char *, uint64_t))(v64 + 8);
      v69(v67, v63);
      v69(v66, v63);
      return v46 & 1;
    }
  }
  else if (v62 != 2 && ((((v62 & 1) == 0) ^ v61) & 1) != 0)
  {
    goto LABEL_35;
  }
LABEL_15:
  v46 = 0;
  return v46 & 1;
}

uint64_t sub_10011C3A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  double *v13;
  char v14;
  double *v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  _DWORD *v31;
  char v32;
  _DWORD *v33;
  int v34;
  char v35;
  void (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v40 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  v12 = v11[5];
  v13 = (double *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 8);
  v15 = (double *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16)
      goto LABEL_32;
  }
  else
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_32;
  }
  v17 = v11[6];
  v18 = *(unsigned __int8 *)(a1 + v17);
  v19 = *(unsigned __int8 *)(a2 + v17);
  if (v18 == 2)
  {
    if (v19 != 2)
      goto LABEL_32;
  }
  else if (v19 == 2 || ((((v19 & 1) == 0) ^ v18) & 1) == 0)
  {
    goto LABEL_32;
  }
  v20 = v11[7];
  v21 = *(unsigned __int8 *)(a1 + v20);
  v22 = *(unsigned __int8 *)(a2 + v20);
  if (v21 == 2)
  {
    if (v22 != 2)
      goto LABEL_32;
  }
  else if (v22 == 2 || ((((v22 & 1) == 0) ^ v21) & 1) == 0)
  {
    goto LABEL_32;
  }
  v23 = v11[8];
  v24 = *(unsigned __int8 *)(a1 + v23);
  v25 = *(unsigned __int8 *)(a2 + v23);
  if (v24 == 5)
  {
    if (v25 != 5)
      goto LABEL_32;
  }
  else if (v25 == 5 || v24 != v25)
  {
    goto LABEL_32;
  }
  v27 = v11[9];
  v28 = *(unsigned __int8 *)(a1 + v27);
  v29 = *(unsigned __int8 *)(a2 + v27);
  if (v28 != 2)
  {
    if (v29 == 2 || ((((v29 & 1) == 0) ^ v28) & 1) == 0)
      goto LABEL_32;
LABEL_30:
    v30 = v11[10];
    v31 = (_DWORD *)(a1 + v30);
    v32 = *(_BYTE *)(a1 + v30 + 4);
    v33 = (_DWORD *)(a2 + v30);
    v34 = *(unsigned __int8 *)(a2 + v30 + 4);
    if ((v32 & 1) != 0)
    {
      if (!v34)
        goto LABEL_32;
    }
    else
    {
      if (*v31 != *v33)
        LOBYTE(v34) = 1;
      if ((v34 & 1) != 0)
        goto LABEL_32;
    }
    v37 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v37(v10, a1, v4);
    v37(v8, a2, v4);
    v38 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v35 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v38);
    v39 = *(void (**)(char *, uint64_t))(v5 + 8);
    v39(v8, v4);
    v39(v10, v4);
    return v35 & 1;
  }
  if (v29 == 2)
    goto LABEL_30;
LABEL_32:
  v35 = 0;
  return v35 & 1;
}

uint64_t sub_10011C5F4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  char *v35;
  char *v36;
  uint64_t v37;
  char v38;
  void (*v39)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v6 = type metadata accessor for UnknownStorage(0);
  v46 = *(_QWORD *)(v6 - 8);
  v47 = v6;
  v7 = __chkstk_darwin(v6);
  v45 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v44 = (char *)&v41 - v9;
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v41 = (uint64_t)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000039AC(&qword_100375338);
  __chkstk_darwin(v13);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000039AC(&qword_10036E458);
  v17 = __chkstk_darwin(v16);
  v48 = (uint64_t)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v41 - v20;
  __chkstk_darwin(v19);
  v23 = (char *)&v41 - v22;
  v24 = a3(0);
  v25 = *(int *)(v24 + 20);
  v42 = a1;
  sub_10000E660(a1 + v25, (uint64_t)v23, &qword_10036E458);
  v26 = *(int *)(v24 + 20);
  v43 = a2;
  sub_10000E660(a2 + v26, (uint64_t)v21, &qword_10036E458);
  v27 = (uint64_t)&v15[*(int *)(v13 + 48)];
  sub_10000E660((uint64_t)v23, (uint64_t)v15, &qword_10036E458);
  sub_10000E660((uint64_t)v21, v27, &qword_10036E458);
  v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v28((uint64_t)v15, 1, v10) != 1)
  {
    v29 = v48;
    sub_10000E660((uint64_t)v15, v48, &qword_10036E458);
    if (v28(v27, 1, v10) != 1)
    {
      v30 = v41;
      sub_100003E08(v27, v41, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      v31 = sub_1000656F0(v29, v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      sub_100004030(v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      sub_100015704((uint64_t)v21, &qword_10036E458);
      sub_100015704((uint64_t)v23, &qword_10036E458);
      sub_100004030(v29, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      sub_100015704((uint64_t)v15, &qword_10036E458);
      if ((v31 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      v38 = 0;
      return v38 & 1;
    }
    sub_100015704((uint64_t)v21, &qword_10036E458);
    sub_100015704((uint64_t)v23, &qword_10036E458);
    sub_100004030(v29, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    sub_100015704((uint64_t)v15, &qword_100375338);
    goto LABEL_9;
  }
  sub_100015704((uint64_t)v21, &qword_10036E458);
  sub_100015704((uint64_t)v23, &qword_10036E458);
  if (v28(v27, 1, v10) != 1)
    goto LABEL_6;
  sub_100015704((uint64_t)v15, &qword_10036E458);
LABEL_8:
  v33 = v46;
  v32 = v47;
  v34 = *(void (**)(char *, uint64_t, uint64_t))(v46 + 16);
  v35 = v44;
  v34(v44, v42, v47);
  v36 = v45;
  v34(v45, v43, v32);
  v37 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v38 = dispatch thunk of static Equatable.== infix(_:_:)(v35, v36, v32, v37);
  v39 = *(void (**)(char *, uint64_t))(v33 + 8);
  v39(v36, v32);
  v39(v35, v32);
  return v38 & 1;
}

uint64_t sub_10011C9CC(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  char v32;
  char v34;
  uint64_t v35;
  float *v36;
  char v37;
  uint64_t (*v38)(_QWORD);
  float *v39;
  int v40;
  uint64_t v41;
  float *v42;
  char v43;
  float *v44;
  int v45;
  uint64_t v46;
  float *v47;
  char v48;
  float *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *);
  char *v54;
  char *v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t (*v65)(_QWORD);

  v65 = a3;
  v5 = type metadata accessor for UnknownStorage(0);
  v61 = *(_QWORD *)(v5 - 8);
  v62 = v5;
  v6 = __chkstk_darwin(v5);
  v60 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v59 = (char *)&v58 - v8;
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v64 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000039AC(&qword_100375338);
  __chkstk_darwin(v12);
  v14 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000039AC(&qword_10036E458);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v58 - v20;
  __chkstk_darwin(v19);
  v23 = (char *)&v58 - v22;
  v24 = v65(0);
  v25 = *(int *)(v24 + 20);
  v63 = a1;
  v26 = a1 + v25;
  v27 = (int *)v24;
  sub_10000E660(v26, (uint64_t)v23, &qword_10036E458);
  v28 = v27[5];
  v65 = a2;
  sub_10000E660((uint64_t)a2 + v28, (uint64_t)v21, &qword_10036E458);
  v29 = (uint64_t)&v14[*(int *)(v12 + 48)];
  sub_10000E660((uint64_t)v23, (uint64_t)v14, &qword_10036E458);
  sub_10000E660((uint64_t)v21, v29, &qword_10036E458);
  v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (v30((uint64_t)v14, 1, v9) != 1)
  {
    v31 = (uint64_t)v64;
    sub_10000E660((uint64_t)v14, (uint64_t)v18, &qword_10036E458);
    if (v30(v29, 1, v9) != 1)
    {
      sub_100003E08(v29, v31, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      v34 = sub_1000656F0((uint64_t)v18, v31, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      sub_100004030(v31, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      sub_100015704((uint64_t)v21, &qword_10036E458);
      sub_100015704((uint64_t)v23, &qword_10036E458);
      sub_100004030((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      sub_100015704((uint64_t)v14, &qword_10036E458);
      if ((v34 & 1) == 0)
        goto LABEL_7;
      goto LABEL_10;
    }
    sub_100015704((uint64_t)v21, &qword_10036E458);
    sub_100015704((uint64_t)v23, &qword_10036E458);
    sub_100004030((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    sub_100015704((uint64_t)v14, &qword_100375338);
    goto LABEL_7;
  }
  sub_100015704((uint64_t)v21, &qword_10036E458);
  sub_100015704((uint64_t)v23, &qword_10036E458);
  if (v30(v29, 1, v9) != 1)
    goto LABEL_6;
  sub_100015704((uint64_t)v14, &qword_10036E458);
LABEL_10:
  v35 = v27[6];
  v36 = (float *)(v63 + v35);
  v37 = *(_BYTE *)(v63 + v35 + 4);
  v38 = v65;
  v39 = (float *)((char *)v65 + v35);
  v40 = *((unsigned __int8 *)v65 + v35 + 4);
  if ((v37 & 1) != 0)
  {
    if (!v40)
      goto LABEL_7;
  }
  else
  {
    if (*v36 != *v39)
      LOBYTE(v40) = 1;
    if ((v40 & 1) != 0)
      goto LABEL_7;
  }
  v41 = v27[7];
  v42 = (float *)(v63 + v41);
  v43 = *(_BYTE *)(v63 + v41 + 4);
  v44 = (float *)((char *)v65 + v41);
  v45 = *((unsigned __int8 *)v65 + v41 + 4);
  if ((v43 & 1) != 0)
  {
    if (!v45)
      goto LABEL_7;
  }
  else
  {
    if (*v42 != *v44)
      LOBYTE(v45) = 1;
    if ((v45 & 1) != 0)
      goto LABEL_7;
  }
  v46 = v27[8];
  v47 = (float *)(v63 + v46);
  v48 = *(_BYTE *)(v63 + v46 + 4);
  v49 = (float *)((char *)v65 + v46);
  v50 = *((unsigned __int8 *)v65 + v46 + 4);
  if ((v48 & 1) != 0)
  {
    if (v50)
    {
LABEL_28:
      v52 = v61;
      v51 = v62;
      v53 = *(void (**)(char *))(v61 + 16);
      v54 = v59;
      v53(v59);
      v55 = v60;
      ((void (*)(char *, uint64_t (*)(_QWORD), uint64_t))v53)(v60, v38, v51);
      v56 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
      v32 = dispatch thunk of static Equatable.== infix(_:_:)(v54, v55, v51, v56);
      v57 = *(void (**)(char *, uint64_t))(v52 + 8);
      v57(v55, v51);
      v57(v54, v51);
      return v32 & 1;
    }
  }
  else
  {
    if (*v47 != *v49)
      LOBYTE(v50) = 1;
    if ((v50 & 1) == 0)
      goto LABEL_28;
  }
LABEL_7:
  v32 = 0;
  return v32 & 1;
}

uint64_t sub_10011CE44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  char v30;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  float *v36;
  char v37;
  float *v38;
  int v39;
  uint64_t v40;
  float *v41;
  char v42;
  float *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *);
  char *v48;
  char *v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v4 = type metadata accessor for UnknownStorage(0);
  v55 = *(_QWORD *)(v4 - 8);
  v56 = v4;
  v5 = __chkstk_darwin(v4);
  v54 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v53 = (char *)&v52 - v7;
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v57 = (uint64_t)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000039AC(&qword_100375338);
  __chkstk_darwin(v11);
  v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000039AC(&qword_10036E458);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v52 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v52 - v21;
  v23 = type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(0);
  v24 = *(int *)(v23 + 20);
  v58 = a1;
  v25 = a1 + v24;
  v26 = (int *)v23;
  sub_10000E660(v25, (uint64_t)v22, &qword_10036E458);
  v27 = v26[5];
  v59 = a2;
  sub_10000E660(a2 + v27, (uint64_t)v20, &qword_10036E458);
  v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_10000E660((uint64_t)v22, (uint64_t)v13, &qword_10036E458);
  sub_10000E660((uint64_t)v20, v28, &qword_10036E458);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29((uint64_t)v13, 1, v8) != 1)
  {
    sub_10000E660((uint64_t)v13, (uint64_t)v17, &qword_10036E458);
    if (v29(v28, 1, v8) != 1)
    {
      v32 = v57;
      sub_100003E08(v28, v57, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      v33 = sub_1000656F0((uint64_t)v17, v32, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      sub_100004030(v32, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      sub_100015704((uint64_t)v20, &qword_10036E458);
      sub_100015704((uint64_t)v22, &qword_10036E458);
      sub_100004030((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      sub_100015704((uint64_t)v13, &qword_10036E458);
      if ((v33 & 1) == 0)
        goto LABEL_7;
      goto LABEL_10;
    }
    sub_100015704((uint64_t)v20, &qword_10036E458);
    sub_100015704((uint64_t)v22, &qword_10036E458);
    sub_100004030((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    sub_100015704((uint64_t)v13, &qword_100375338);
    goto LABEL_7;
  }
  sub_100015704((uint64_t)v20, &qword_10036E458);
  sub_100015704((uint64_t)v22, &qword_10036E458);
  if (v29(v28, 1, v8) != 1)
    goto LABEL_6;
  sub_100015704((uint64_t)v13, &qword_10036E458);
LABEL_10:
  v34 = v26[6];
  v35 = v59;
  v36 = (float *)(v58 + v34);
  v37 = *(_BYTE *)(v58 + v34 + 4);
  v38 = (float *)(v59 + v34);
  v39 = *(unsigned __int8 *)(v59 + v34 + 4);
  if ((v37 & 1) != 0)
  {
    if (!v39)
      goto LABEL_7;
  }
  else
  {
    if (*v36 != *v38)
      LOBYTE(v39) = 1;
    if ((v39 & 1) != 0)
      goto LABEL_7;
  }
  v40 = v26[7];
  v41 = (float *)(v58 + v40);
  v42 = *(_BYTE *)(v58 + v40 + 4);
  v43 = (float *)(v59 + v40);
  v44 = *(unsigned __int8 *)(v59 + v40 + 4);
  if ((v42 & 1) != 0)
  {
    if (v44)
    {
LABEL_22:
      v46 = v55;
      v45 = v56;
      v47 = *(void (**)(char *))(v55 + 16);
      v48 = v53;
      v47(v53);
      v49 = v54;
      ((void (*)(char *, uint64_t, uint64_t))v47)(v54, v35, v45);
      v50 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
      v30 = dispatch thunk of static Equatable.== infix(_:_:)(v48, v49, v45, v50);
      v51 = *(void (**)(char *, uint64_t))(v46 + 8);
      v51(v49, v45);
      v51(v48, v45);
      return v30 & 1;
    }
  }
  else
  {
    if (*v41 != *v43)
      LOBYTE(v44) = 1;
    if ((v44 & 1) == 0)
      goto LABEL_22;
  }
LABEL_7:
  v30 = 0;
  return v30 & 1;
}

uint64_t sub_10011D278(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  int *v12;
  uint64_t v13;
  double *v14;
  char v15;
  double *v16;
  int v17;
  uint64_t v18;
  double *v19;
  char v20;
  double *v21;
  int v22;
  uint64_t v23;
  double *v24;
  char v25;
  double *v26;
  int v27;
  uint64_t v28;
  double *v29;
  char v30;
  double *v31;
  int v32;
  char *v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  char v36;
  void (*v37)(char *, uint64_t);
  uint64_t v39;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v39 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  v12 = v11;
  v13 = v11[6];
  v14 = (double *)((char *)a1 + v13);
  v15 = *((_BYTE *)a1 + v13 + 8);
  v16 = (double *)((char *)a2 + v13);
  v17 = *((unsigned __int8 *)a2 + v13 + 8);
  if ((v15 & 1) != 0)
  {
    if (!v17)
      goto LABEL_27;
  }
  else
  {
    if (*v14 != *v16)
      LOBYTE(v17) = 1;
    if ((v17 & 1) != 0)
      goto LABEL_27;
  }
  v18 = v11[7];
  v19 = (double *)((char *)a1 + v18);
  v20 = *((_BYTE *)a1 + v18 + 8);
  v21 = (double *)((char *)a2 + v18);
  v22 = *((unsigned __int8 *)a2 + v18 + 8);
  if ((v20 & 1) != 0)
  {
    if (!v22)
      goto LABEL_27;
  }
  else
  {
    if (*v19 != *v21)
      LOBYTE(v22) = 1;
    if ((v22 & 1) != 0)
      goto LABEL_27;
  }
  v23 = v11[8];
  v24 = (double *)((char *)a1 + v23);
  v25 = *((_BYTE *)a1 + v23 + 8);
  v26 = (double *)((char *)a2 + v23);
  v27 = *((unsigned __int8 *)a2 + v23 + 8);
  if ((v25 & 1) != 0)
  {
    if (!v27)
      goto LABEL_27;
  }
  else
  {
    if (*v24 != *v26)
      LOBYTE(v27) = 1;
    if ((v27 & 1) != 0)
      goto LABEL_27;
  }
  v28 = v11[9];
  v29 = (double *)((char *)a1 + v28);
  v30 = *((_BYTE *)a1 + v28 + 8);
  v31 = (double *)((char *)a2 + v28);
  v32 = *((unsigned __int8 *)a2 + v28 + 8);
  if ((v30 & 1) != 0)
  {
    if (v32)
      goto LABEL_25;
LABEL_27:
    v36 = 0;
    return v36 & 1;
  }
  if (*v29 != *v31)
    LOBYTE(v32) = 1;
  if ((v32 & 1) != 0)
    goto LABEL_27;
LABEL_25:
  if ((sub_10010A954(*a1, *a2) & 1) == 0)
    goto LABEL_27;
  v33 = (char *)a1 + v12[5];
  v34 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v34(v10, v33, v4);
  v34(v8, (char *)a2 + v12[5], v4);
  v35 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v36 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v35);
  v37 = *(void (**)(char *, uint64_t))(v5 + 8);
  v37(v8, v4);
  v37(v10, v4);
  return v36 & 1;
}

uint64_t sub_10011D47C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t *v33;
  uint64_t v34;
  char v35;
  uint64_t *v36;
  uint64_t *v37;
  int *v38;
  uint64_t v39;
  _QWORD *v40;
  char v41;
  _QWORD *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  char v51;
  uint64_t v52;
  _DWORD *v53;
  char v54;
  _DWORD *v55;
  int v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int (*v61)(uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  char v63;
  uint64_t v64;
  _QWORD *v65;
  char v66;
  _QWORD *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, char *, uint64_t);
  char *v72;
  char *v73;
  uint64_t v74;
  void (*v75)(char *, uint64_t);
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int *v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t *v91;

  v90 = a1;
  v91 = a2;
  v2 = type metadata accessor for UnknownStorage(0);
  v79 = *(_QWORD *)(v2 - 8);
  v80 = v2;
  v3 = __chkstk_darwin(v2);
  v78 = (char *)&v76 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v77 = (char *)&v76 - v5;
  v89 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  v83 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v81 = (uint64_t)&v76 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_1000039AC(&qword_100375350);
  __chkstk_darwin(v82);
  v84 = (uint64_t)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000039AC(&qword_10036E578);
  v9 = __chkstk_darwin(v8);
  v88 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v86 = (char *)&v76 - v12;
  __chkstk_darwin(v11);
  v87 = (char *)&v76 - v13;
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (uint64_t *)((char *)&v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = sub_1000039AC(&qword_100375358);
  __chkstk_darwin(v18);
  v20 = (char *)&v76 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1000039AC(&qword_10036E570);
  v22 = __chkstk_darwin(v21);
  v24 = (uint64_t *)((char *)&v76 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = __chkstk_darwin(v22);
  v27 = (char *)&v76 - v26;
  __chkstk_darwin(v25);
  v29 = (char *)&v76 - v28;
  v30 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
  sub_10000E660((uint64_t)v90 + *(int *)(v30 + 24), (uint64_t)v29, &qword_10036E570);
  v85 = (int *)v30;
  sub_10000E660((uint64_t)v91 + *(int *)(v30 + 24), (uint64_t)v27, &qword_10036E570);
  v31 = (uint64_t)&v20[*(int *)(v18 + 48)];
  sub_10000E660((uint64_t)v29, (uint64_t)v20, &qword_10036E570);
  sub_10000E660((uint64_t)v27, v31, &qword_10036E570);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v32((uint64_t)v20, 1, v14) == 1)
  {
    sub_100015704((uint64_t)v27, &qword_10036E570);
    sub_100015704((uint64_t)v29, &qword_10036E570);
    if (v32(v31, 1, v14) == 1)
    {
      sub_100015704((uint64_t)v20, &qword_10036E570);
      goto LABEL_9;
    }
LABEL_6:
    v33 = &qword_100375358;
    v34 = (uint64_t)v20;
    goto LABEL_7;
  }
  sub_10000E660((uint64_t)v20, (uint64_t)v24, &qword_10036E570);
  if (v32(v31, 1, v14) == 1)
  {
    sub_100015704((uint64_t)v27, &qword_10036E570);
    sub_100015704((uint64_t)v29, &qword_10036E570);
    sub_100004030((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
    goto LABEL_6;
  }
  sub_100003E08(v31, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
  v35 = sub_10011D278(v24, v17);
  sub_100004030((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
  sub_100015704((uint64_t)v27, &qword_10036E570);
  sub_100015704((uint64_t)v29, &qword_10036E570);
  sub_100004030((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
  sub_100015704((uint64_t)v20, &qword_10036E570);
  if ((v35 & 1) == 0)
    goto LABEL_27;
LABEL_9:
  v37 = v90;
  v36 = v91;
  if ((sub_10010AB4C(*v90, *v91) & 1) == 0)
    goto LABEL_27;
  v38 = v85;
  v39 = v85[7];
  v40 = (uint64_t *)((char *)v37 + v39);
  v41 = *((_BYTE *)v37 + v39 + 8);
  v42 = (uint64_t *)((char *)v36 + v39);
  v43 = *((unsigned __int8 *)v36 + v39 + 8);
  if ((v41 & 1) != 0)
  {
    v45 = (uint64_t)v88;
    v44 = v89;
    v47 = (uint64_t)v86;
    v46 = (uint64_t)v87;
    if (!v43)
      goto LABEL_27;
  }
  else
  {
    if (*v40 != *v42)
      LOBYTE(v43) = 1;
    v45 = (uint64_t)v88;
    v44 = v89;
    v47 = (uint64_t)v86;
    v46 = (uint64_t)v87;
    if ((v43 & 1) != 0)
      goto LABEL_27;
  }
  v48 = v85[8];
  v49 = *((unsigned __int8 *)v37 + v48);
  v50 = *((unsigned __int8 *)v36 + v48);
  if (v49 == 4)
  {
    if (v50 != 4)
      goto LABEL_27;
    goto LABEL_21;
  }
  v51 = 0;
  if (v50 != 4 && v49 == v50)
  {
LABEL_21:
    v52 = v85[9];
    v53 = (_DWORD *)((char *)v37 + v52);
    v54 = *((_BYTE *)v37 + v52 + 4);
    v55 = (_DWORD *)((char *)v36 + v52);
    v56 = *((unsigned __int8 *)v36 + v52 + 4);
    if ((v54 & 1) != 0)
    {
      if (!v56)
        goto LABEL_27;
    }
    else
    {
      if (*v53 != *v55)
        LOBYTE(v56) = 1;
      if ((v56 & 1) != 0)
        goto LABEL_27;
    }
    sub_10000E660((uint64_t)v37 + v85[10], v46, &qword_10036E578);
    sub_10000E660((uint64_t)v36 + v38[10], v47, &qword_10036E578);
    v58 = v84;
    v59 = v84 + *(int *)(v82 + 48);
    sub_10000E660(v46, v84, &qword_10036E578);
    v60 = v58;
    sub_10000E660(v47, v59, &qword_10036E578);
    v61 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v83 + 48);
    if (v61(v60, 1, v44) == 1)
    {
      sub_100015704(v47, &qword_10036E578);
      v60 = v84;
      sub_100015704(v46, &qword_10036E578);
      if (v61(v59, 1, v44) == 1)
      {
        sub_100015704(v60, &qword_10036E578);
        goto LABEL_36;
      }
    }
    else
    {
      sub_10000E660(v60, v45, &qword_10036E578);
      if (v61(v59, 1, v44) != 1)
      {
        v62 = v81;
        sub_100003E08(v59, v81, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
        v63 = sub_100111238(v45, v62);
        sub_100004030(v62, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
        sub_100015704(v47, &qword_10036E578);
        sub_100015704(v46, &qword_10036E578);
        sub_100004030(v45, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
        sub_100015704(v60, &qword_10036E578);
        if ((v63 & 1) != 0)
        {
LABEL_36:
          v64 = v38[11];
          v65 = (uint64_t *)((char *)v37 + v64);
          v66 = *((_BYTE *)v37 + v64 + 8);
          v67 = (uint64_t *)((char *)v36 + v64);
          v68 = *((unsigned __int8 *)v36 + v64 + 8);
          if ((v66 & 1) != 0)
          {
            if (v68)
            {
LABEL_42:
              v70 = v79;
              v69 = v80;
              v71 = *(void (**)(char *, char *, uint64_t))(v79 + 16);
              v72 = v77;
              v71(v77, (char *)v37 + v38[5], v80);
              v73 = v78;
              v71(v78, (char *)v36 + v38[5], v69);
              v74 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
              v51 = dispatch thunk of static Equatable.== infix(_:_:)(v72, v73, v69, v74);
              v75 = *(void (**)(char *, uint64_t))(v70 + 8);
              v75(v73, v69);
              v75(v72, v69);
              return v51 & 1;
            }
          }
          else
          {
            if (*v65 != *v67)
              LOBYTE(v68) = 1;
            if ((v68 & 1) == 0)
              goto LABEL_42;
          }
        }
LABEL_27:
        v51 = 0;
        return v51 & 1;
      }
      sub_100015704(v47, &qword_10036E578);
      sub_100015704(v46, &qword_10036E578);
      sub_100004030(v45, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
    }
    v33 = &qword_100375350;
    v34 = v60;
LABEL_7:
    sub_100015704(v34, v33);
    goto LABEL_27;
  }
  return v51 & 1;
}

uint64_t sub_10011DBF0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  char v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  int v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  char *v41;
  char *v42;
  uint64_t v43;
  char v44;
  void (*v45)(char *, uint64_t);
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  char *v54;

  v4 = type metadata accessor for UnknownStorage(0);
  v50 = *(_QWORD *)(v4 - 8);
  v51 = v4;
  v5 = __chkstk_darwin(v4);
  v49 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v48 = (char *)&v47 - v7;
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v54 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000039AC(&qword_100375338);
  __chkstk_darwin(v11);
  v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000039AC(&qword_10036E458);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v47 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v47 - v21;
  v23 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0);
  v24 = *(int *)(v23 + 24);
  v52 = a1;
  v25 = (uint64_t)a1 + v24;
  v26 = (int *)v23;
  sub_10000E660(v25, (uint64_t)v22, &qword_10036E458);
  v27 = v26[6];
  v53 = a2;
  sub_10000E660((uint64_t)a2 + v27, (uint64_t)v20, &qword_10036E458);
  v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_10000E660((uint64_t)v22, (uint64_t)v13, &qword_10036E458);
  sub_10000E660((uint64_t)v20, v28, &qword_10036E458);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29((uint64_t)v13, 1, v8) == 1)
  {
    sub_100015704((uint64_t)v20, &qword_10036E458);
    sub_100015704((uint64_t)v22, &qword_10036E458);
    if (v29(v28, 1, v8) == 1)
    {
      sub_100015704((uint64_t)v13, &qword_10036E458);
      goto LABEL_8;
    }
LABEL_6:
    sub_100015704((uint64_t)v13, &qword_100375338);
    goto LABEL_15;
  }
  v30 = (uint64_t)v54;
  sub_10000E660((uint64_t)v13, (uint64_t)v17, &qword_10036E458);
  if (v29(v28, 1, v8) == 1)
  {
    sub_100015704((uint64_t)v20, &qword_10036E458);
    sub_100015704((uint64_t)v22, &qword_10036E458);
    sub_100004030((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  sub_100003E08(v28, v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v31 = sub_1000656F0((uint64_t)v17, v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004030(v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v20, &qword_10036E458);
  sub_100015704((uint64_t)v22, &qword_10036E458);
  sub_100004030((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v13, &qword_10036E458);
  if ((v31 & 1) == 0)
    goto LABEL_15;
LABEL_8:
  v32 = v52;
  v33 = v53;
  if ((sub_10010B2D8(*v52, *v53, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, (uint64_t (*)(char *, char *))sub_10011D47C) & 1) == 0)goto LABEL_15;
  v34 = v26[7];
  v35 = *((unsigned __int8 *)v32 + v34);
  v36 = *((unsigned __int8 *)v33 + v34);
  if (v35 != 2)
  {
    if (v36 != 2 && ((((v36 & 1) == 0) ^ v35) & 1) != 0)
      goto LABEL_14;
LABEL_15:
    v44 = 0;
    return v44 & 1;
  }
  if (v36 != 2)
    goto LABEL_15;
LABEL_14:
  v37 = (char *)v32 + v26[5];
  v39 = v50;
  v38 = v51;
  v40 = *(void (**)(char *, char *, uint64_t))(v50 + 16);
  v41 = v48;
  v40(v48, v37, v51);
  v42 = v49;
  v40(v49, (char *)v33 + v26[5], v38);
  v43 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v44 = dispatch thunk of static Equatable.== infix(_:_:)(v41, v42, v38, v43);
  v45 = *(void (**)(char *, uint64_t))(v39 + 8);
  v45(v42, v38);
  v45(v41, v38);
  return v44 & 1;
}

uint64_t sub_10011E028(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  double *v15;
  char v16;
  double *v17;
  int v18;
  uint64_t v19;
  double *v20;
  char v21;
  double *v22;
  int v23;
  uint64_t v24;
  double *v25;
  char v26;
  double *v27;
  int v28;
  uint64_t v29;
  double *v30;
  char v31;
  double *v32;
  int v33;
  char v34;
  void (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v39 - v11;
  v13 = (int *)a3(0);
  v14 = v13[5];
  v15 = (double *)(a1 + v14);
  v16 = *(_BYTE *)(a1 + v14 + 8);
  v17 = (double *)(a2 + v14);
  v18 = *(unsigned __int8 *)(a2 + v14 + 8);
  if ((v16 & 1) != 0)
  {
    if (!v18)
      goto LABEL_21;
  }
  else
  {
    if (*v15 != *v17)
      LOBYTE(v18) = 1;
    if ((v18 & 1) != 0)
      goto LABEL_21;
  }
  v19 = v13[6];
  v20 = (double *)(a1 + v19);
  v21 = *(_BYTE *)(a1 + v19 + 8);
  v22 = (double *)(a2 + v19);
  v23 = *(unsigned __int8 *)(a2 + v19 + 8);
  if ((v21 & 1) != 0)
  {
    if (!v23)
      goto LABEL_21;
  }
  else
  {
    if (*v20 != *v22)
      LOBYTE(v23) = 1;
    if ((v23 & 1) != 0)
      goto LABEL_21;
  }
  v24 = v13[7];
  v25 = (double *)(a1 + v24);
  v26 = *(_BYTE *)(a1 + v24 + 8);
  v27 = (double *)(a2 + v24);
  v28 = *(unsigned __int8 *)(a2 + v24 + 8);
  if ((v26 & 1) == 0)
  {
    if (*v25 != *v27)
      LOBYTE(v28) = 1;
    if ((v28 & 1) != 0)
      goto LABEL_21;
LABEL_19:
    v29 = v13[8];
    v30 = (double *)(a1 + v29);
    v31 = *(_BYTE *)(a1 + v29 + 8);
    v32 = (double *)(a2 + v29);
    v33 = *(unsigned __int8 *)(a2 + v29 + 8);
    if ((v31 & 1) != 0)
    {
      if (!v33)
        goto LABEL_21;
    }
    else
    {
      if (*v30 != *v32)
        LOBYTE(v33) = 1;
      if ((v33 & 1) != 0)
        goto LABEL_21;
    }
    v36 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v36(v12, a1, v6);
    v36(v10, a2, v6);
    v37 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v34 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v10, v6, v37);
    v38 = *(void (**)(char *, uint64_t))(v7 + 8);
    v38(v10, v6);
    v38(v12, v6);
    return v34 & 1;
  }
  if (v28)
    goto LABEL_19;
LABEL_21:
  v34 = 0;
  return v34 & 1;
}

uint64_t sub_10011E210(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  int *v23;
  int *v24;
  uint64_t v25;
  double *v26;
  char v27;
  double *v28;
  int v29;
  uint64_t v30;
  double *v31;
  char v32;
  double *v33;
  int v34;
  uint64_t v35;
  double *v36;
  char v37;
  double *v38;
  int v39;
  uint64_t v40;
  double *v41;
  char v42;
  double *v43;
  int v44;
  uint64_t v45;
  double *v46;
  char v47;
  double *v48;
  int v49;
  uint64_t v50;
  double *v51;
  char v52;
  double *v53;
  int v54;
  uint64_t v55;
  double *v56;
  char v57;
  double *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int (*v63)(uint64_t, uint64_t, uint64_t);
  char v64;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t, uint64_t);
  char *v71;
  char *v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t);
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v4 = type metadata accessor for UnknownStorage(0);
  v78 = *(_QWORD *)(v4 - 8);
  v79 = v4;
  v5 = __chkstk_darwin(v4);
  v77 = (char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v76 = (char *)&v75 - v7;
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000039AC(&qword_100375338);
  __chkstk_darwin(v12);
  v80 = (uint64_t)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000039AC(&qword_10036E458);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v75 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v75 - v21;
  v23 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  v24 = v23;
  v25 = v23[5];
  v26 = (double *)(a1 + v25);
  v27 = *(_BYTE *)(a1 + v25 + 8);
  v28 = (double *)(a2 + v25);
  v29 = *(unsigned __int8 *)(a2 + v25 + 8);
  if ((v27 & 1) != 0)
  {
    if (!v29)
      goto LABEL_49;
  }
  else
  {
    if (*v26 != *v28)
      LOBYTE(v29) = 1;
    if ((v29 & 1) != 0)
      goto LABEL_49;
  }
  v30 = v23[6];
  v31 = (double *)(a1 + v30);
  v32 = *(_BYTE *)(a1 + v30 + 8);
  v33 = (double *)(a2 + v30);
  v34 = *(unsigned __int8 *)(a2 + v30 + 8);
  if ((v32 & 1) != 0)
  {
    if (!v34)
      goto LABEL_49;
  }
  else
  {
    if (*v31 != *v33)
      LOBYTE(v34) = 1;
    if ((v34 & 1) != 0)
      goto LABEL_49;
  }
  v35 = v23[7];
  v36 = (double *)(a1 + v35);
  v37 = *(_BYTE *)(a1 + v35 + 8);
  v38 = (double *)(a2 + v35);
  v39 = *(unsigned __int8 *)(a2 + v35 + 8);
  if ((v37 & 1) != 0)
  {
    if (!v39)
      goto LABEL_49;
  }
  else
  {
    if (*v36 != *v38)
      LOBYTE(v39) = 1;
    if ((v39 & 1) != 0)
      goto LABEL_49;
  }
  v40 = v23[8];
  v41 = (double *)(a1 + v40);
  v42 = *(_BYTE *)(a1 + v40 + 8);
  v43 = (double *)(a2 + v40);
  v44 = *(unsigned __int8 *)(a2 + v40 + 8);
  if ((v42 & 1) != 0)
  {
    if (!v44)
      goto LABEL_49;
  }
  else
  {
    if (*v41 != *v43)
      LOBYTE(v44) = 1;
    if ((v44 & 1) != 0)
      goto LABEL_49;
  }
  v45 = v23[9];
  v46 = (double *)(a1 + v45);
  v47 = *(_BYTE *)(a1 + v45 + 8);
  v48 = (double *)(a2 + v45);
  v49 = *(unsigned __int8 *)(a2 + v45 + 8);
  if ((v47 & 1) != 0)
  {
    if (!v49)
      goto LABEL_49;
  }
  else
  {
    if (*v46 != *v48)
      LOBYTE(v49) = 1;
    if ((v49 & 1) != 0)
      goto LABEL_49;
  }
  v50 = v23[10];
  v51 = (double *)(a1 + v50);
  v52 = *(_BYTE *)(a1 + v50 + 8);
  v53 = (double *)(a2 + v50);
  v54 = *(unsigned __int8 *)(a2 + v50 + 8);
  if ((v52 & 1) != 0)
  {
    if (!v54)
      goto LABEL_49;
  }
  else
  {
    if (*v51 != *v53)
      LOBYTE(v54) = 1;
    if ((v54 & 1) != 0)
      goto LABEL_49;
  }
  v55 = v23[11];
  v56 = (double *)(a1 + v55);
  v57 = *(_BYTE *)(a1 + v55 + 8);
  v58 = (double *)(a2 + v55);
  v59 = *(unsigned __int8 *)(a2 + v55 + 8);
  if ((v57 & 1) != 0)
  {
    if (!v59)
      goto LABEL_49;
  }
  else
  {
    if (*v56 != *v58)
      LOBYTE(v59) = 1;
    if ((v59 & 1) != 0)
      goto LABEL_49;
  }
  sub_10000E660(a1 + v23[12], (uint64_t)v22, &qword_10036E458);
  sub_10000E660(a2 + v24[12], (uint64_t)v20, &qword_10036E458);
  v60 = *(int *)(v12 + 48);
  v61 = v80;
  v62 = v80 + v60;
  sub_10000E660((uint64_t)v22, v80, &qword_10036E458);
  v75 = v62;
  sub_10000E660((uint64_t)v20, v62, &qword_10036E458);
  v63 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v63(v61, 1, v8) == 1)
  {
    sub_100015704((uint64_t)v20, &qword_10036E458);
    v61 = v80;
    sub_100015704((uint64_t)v22, &qword_10036E458);
    if (v63(v75, 1, v8) == 1)
    {
      sub_100015704(v61, &qword_10036E458);
LABEL_52:
      v69 = v78;
      v68 = v79;
      v70 = *(void (**)(char *, uint64_t, uint64_t))(v78 + 16);
      v71 = v76;
      v70(v76, a1, v79);
      v72 = v77;
      v70(v77, a2, v68);
      v73 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
      v64 = dispatch thunk of static Equatable.== infix(_:_:)(v71, v72, v68, v73);
      v74 = *(void (**)(char *, uint64_t))(v69 + 8);
      v74(v72, v68);
      v74(v71, v68);
      return v64 & 1;
    }
    goto LABEL_48;
  }
  sub_10000E660(v61, (uint64_t)v17, &qword_10036E458);
  if (v63(v75, 1, v8) == 1)
  {
    sub_100015704((uint64_t)v20, &qword_10036E458);
    sub_100015704((uint64_t)v22, &qword_10036E458);
    sub_100004030((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_48:
    sub_100015704(v61, &qword_100375338);
    goto LABEL_49;
  }
  v66 = v61;
  sub_100003E08(v75, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v67 = sub_1000656F0((uint64_t)v17, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004030((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v20, &qword_10036E458);
  sub_100015704((uint64_t)v22, &qword_10036E458);
  sub_100004030((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704(v66, &qword_10036E458);
  if ((v67 & 1) != 0)
    goto LABEL_52;
LABEL_49:
  v64 = 0;
  return v64 & 1;
}

uint64_t sub_10011E75C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  char *v33;
  char *v34;
  uint64_t v35;
  char v36;
  void (*v37)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v4 = type metadata accessor for UnknownStorage(0);
  v44 = *(_QWORD *)(v4 - 8);
  v45 = v4;
  v5 = __chkstk_darwin(v4);
  v43 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v42 = (char *)&v39 - v7;
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v39 = (uint64_t)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000039AC(&qword_100375380);
  __chkstk_darwin(v11);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000039AC(&qword_10036E548);
  v15 = __chkstk_darwin(v14);
  v46 = (uint64_t)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v39 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v39 - v20;
  v22 = type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData(0);
  v23 = *(int *)(v22 + 20);
  v40 = a1;
  sub_10000E660(a1 + v23, (uint64_t)v21, &qword_10036E548);
  v24 = *(int *)(v22 + 20);
  v41 = a2;
  sub_10000E660(a2 + v24, (uint64_t)v19, &qword_10036E548);
  v25 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_10000E660((uint64_t)v21, (uint64_t)v13, &qword_10036E548);
  sub_10000E660((uint64_t)v19, v25, &qword_10036E548);
  v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v26((uint64_t)v13, 1, v8) != 1)
  {
    v27 = v46;
    sub_10000E660((uint64_t)v13, v46, &qword_10036E548);
    if (v26(v25, 1, v8) != 1)
    {
      v28 = v39;
      sub_100003E08(v25, v39, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
      v29 = sub_10011E210(v27, v28);
      sub_100004030(v28, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
      sub_100015704((uint64_t)v19, &qword_10036E548);
      sub_100015704((uint64_t)v21, &qword_10036E548);
      sub_100004030(v27, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
      sub_100015704((uint64_t)v13, &qword_10036E548);
      if ((v29 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      v36 = 0;
      return v36 & 1;
    }
    sub_100015704((uint64_t)v19, &qword_10036E548);
    sub_100015704((uint64_t)v21, &qword_10036E548);
    sub_100004030(v27, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
LABEL_6:
    sub_100015704((uint64_t)v13, &qword_100375380);
    goto LABEL_9;
  }
  sub_100015704((uint64_t)v19, &qword_10036E548);
  sub_100015704((uint64_t)v21, &qword_10036E548);
  if (v26(v25, 1, v8) != 1)
    goto LABEL_6;
  sub_100015704((uint64_t)v13, &qword_10036E548);
LABEL_8:
  v31 = v44;
  v30 = v45;
  v32 = *(void (**)(char *, uint64_t, uint64_t))(v44 + 16);
  v33 = v42;
  v32(v42, v40, v45);
  v34 = v43;
  v32(v43, v41, v30);
  v35 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v36 = dispatch thunk of static Equatable.== infix(_:_:)(v33, v34, v30, v35);
  v37 = *(void (**)(char *, uint64_t))(v31 + 8);
  v37(v34, v30);
  v37(v33, v30);
  return v36 & 1;
}

uint64_t sub_10011EB24(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  int *v12;
  uint64_t v13;
  double *v14;
  char v15;
  double *v16;
  int v17;
  uint64_t v18;
  double *v19;
  char v20;
  double *v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  double *v27;
  char v28;
  double *v29;
  int v30;
  uint64_t v31;
  double *v32;
  char v33;
  double *v34;
  int v35;
  uint64_t v36;
  double *v37;
  char v38;
  double *v39;
  int v40;
  uint64_t v41;
  double *v42;
  char v43;
  double *v44;
  int v45;
  char v46;
  char *v48;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v52 - v9;
  if ((sub_10010A954(*a1, *a2) & 1) == 0)
    goto LABEL_39;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0);
  v12 = v11;
  v13 = v11[6];
  v14 = (double *)((char *)a1 + v13);
  v15 = *((_BYTE *)a1 + v13 + 8);
  v16 = (double *)((char *)a2 + v13);
  v17 = *((unsigned __int8 *)a2 + v13 + 8);
  if ((v15 & 1) != 0)
  {
    if (!v17)
      goto LABEL_39;
  }
  else
  {
    if (*v14 != *v16)
      LOBYTE(v17) = 1;
    if ((v17 & 1) != 0)
      goto LABEL_39;
  }
  v18 = v11[7];
  v19 = (double *)((char *)a1 + v18);
  v20 = *((_BYTE *)a1 + v18 + 8);
  v21 = (double *)((char *)a2 + v18);
  v22 = *((unsigned __int8 *)a2 + v18 + 8);
  if ((v20 & 1) != 0)
  {
    if (!v22)
      goto LABEL_39;
  }
  else
  {
    if (*v19 != *v21)
      LOBYTE(v22) = 1;
    if ((v22 & 1) != 0)
      goto LABEL_39;
  }
  v23 = v11[8];
  v24 = *((unsigned __int8 *)a1 + v23);
  v25 = *((unsigned __int8 *)a2 + v23);
  if (v24 == 2)
  {
    if (v25 != 2)
      goto LABEL_39;
  }
  else if (v25 == 2 || ((((v25 & 1) == 0) ^ v24) & 1) == 0)
  {
    goto LABEL_39;
  }
  v26 = v11[9];
  v27 = (double *)((char *)a1 + v26);
  v28 = *((_BYTE *)a1 + v26 + 8);
  v29 = (double *)((char *)a2 + v26);
  v30 = *((unsigned __int8 *)a2 + v26 + 8);
  if ((v28 & 1) != 0)
  {
    if (!v30)
      goto LABEL_39;
  }
  else
  {
    if (*v27 != *v29)
      LOBYTE(v30) = 1;
    if ((v30 & 1) != 0)
      goto LABEL_39;
  }
  v31 = v11[10];
  v32 = (double *)((char *)a1 + v31);
  v33 = *((_BYTE *)a1 + v31 + 8);
  v34 = (double *)((char *)a2 + v31);
  v35 = *((unsigned __int8 *)a2 + v31 + 8);
  if ((v33 & 1) != 0)
  {
    if (!v35)
      goto LABEL_39;
  }
  else
  {
    if (*v32 != *v34)
      LOBYTE(v35) = 1;
    if ((v35 & 1) != 0)
      goto LABEL_39;
  }
  v36 = v11[11];
  v37 = (double *)((char *)a1 + v36);
  v38 = *((_BYTE *)a1 + v36 + 8);
  v39 = (double *)((char *)a2 + v36);
  v40 = *((unsigned __int8 *)a2 + v36 + 8);
  if ((v38 & 1) == 0)
  {
    if (*v37 != *v39)
      LOBYTE(v40) = 1;
    if ((v40 & 1) != 0)
      goto LABEL_39;
LABEL_37:
    v41 = v11[12];
    v42 = (double *)((char *)a1 + v41);
    v43 = *((_BYTE *)a1 + v41 + 8);
    v44 = (double *)((char *)a2 + v41);
    v45 = *((unsigned __int8 *)a2 + v41 + 8);
    if ((v43 & 1) != 0)
    {
      if (!v45)
        goto LABEL_39;
    }
    else
    {
      if (*v42 != *v44)
        LOBYTE(v45) = 1;
      if ((v45 & 1) != 0)
        goto LABEL_39;
    }
    v48 = (char *)a1 + v11[5];
    v49 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v49(v10, v48, v4);
    v49(v8, (char *)a2 + v12[5], v4);
    v50 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v46 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v50);
    v51 = *(void (**)(char *, uint64_t))(v5 + 8);
    v51(v8, v4);
    v51(v10, v4);
    return v46 & 1;
  }
  if (v40)
    goto LABEL_37;
LABEL_39:
  v46 = 0;
  return v46 & 1;
}

uint64_t sub_10011EDC4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t *v33;
  uint64_t v34;
  char v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char v57;
  void (*v58)(char *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;

  v74 = a1;
  v75 = a2;
  v2 = type metadata accessor for UnknownStorage(0);
  v64 = *(_QWORD *)(v2 - 8);
  v65 = v2;
  v3 = __chkstk_darwin(v2);
  v63 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v62 = (char *)&v60 - v5;
  v71 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
  v68 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v61 = (uint64_t)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_1000039AC(&qword_100375360);
  __chkstk_darwin(v67);
  v72 = (uint64_t)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000039AC(&qword_10036E568);
  v9 = __chkstk_darwin(v8);
  v66 = (uint64_t)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v69 = (uint64_t)&v60 - v12;
  __chkstk_darwin(v11);
  v70 = (uint64_t)&v60 - v13;
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1000039AC(&qword_100375338);
  __chkstk_darwin(v18);
  v20 = (char *)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1000039AC(&qword_10036E458);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v60 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v22);
  v27 = (char *)&v60 - v26;
  __chkstk_darwin(v25);
  v29 = (char *)&v60 - v28;
  v30 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0);
  sub_10000E660((uint64_t)v74 + *(int *)(v30 + 28), (uint64_t)v29, &qword_10036E458);
  v73 = v30;
  sub_10000E660((uint64_t)v75 + *(int *)(v30 + 28), (uint64_t)v27, &qword_10036E458);
  v31 = (uint64_t)&v20[*(int *)(v18 + 48)];
  sub_10000E660((uint64_t)v29, (uint64_t)v20, &qword_10036E458);
  sub_10000E660((uint64_t)v27, v31, &qword_10036E458);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v32((uint64_t)v20, 1, v14) == 1)
  {
    sub_100015704((uint64_t)v27, &qword_10036E458);
    sub_100015704((uint64_t)v29, &qword_10036E458);
    if (v32(v31, 1, v14) == 1)
    {
      sub_100015704((uint64_t)v20, &qword_10036E458);
      goto LABEL_9;
    }
LABEL_6:
    v33 = &qword_100375338;
    v34 = (uint64_t)v20;
LABEL_7:
    sub_100015704(v34, v33);
    goto LABEL_19;
  }
  sub_10000E660((uint64_t)v20, (uint64_t)v24, &qword_10036E458);
  if (v32(v31, 1, v14) == 1)
  {
    sub_100015704((uint64_t)v27, &qword_10036E458);
    sub_100015704((uint64_t)v29, &qword_10036E458);
    sub_100004030((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  sub_100003E08(v31, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v35 = sub_1000656F0((uint64_t)v24, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004030((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v27, &qword_10036E458);
  sub_100015704((uint64_t)v29, &qword_10036E458);
  sub_100004030((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v20, &qword_10036E458);
  if ((v35 & 1) == 0)
    goto LABEL_19;
LABEL_9:
  v37 = v74;
  v36 = v75;
  if ((sub_10010B414(*v74, *v75) & 1) == 0 || !sub_10010BB64((_QWORD *)v37[1], (_QWORD *)v36[1]))
    goto LABEL_19;
  v38 = v73;
  v39 = v70;
  sub_10000E660((uint64_t)v37 + *(int *)(v73 + 32), v70, &qword_10036E568);
  v40 = v69;
  sub_10000E660((uint64_t)v36 + *(int *)(v38 + 32), v69, &qword_10036E568);
  v41 = v72;
  v42 = v72 + *(int *)(v67 + 48);
  sub_10000E660(v39, v72, &qword_10036E568);
  sub_10000E660(v40, v42, &qword_10036E568);
  v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48);
  v44 = v71;
  if (v43(v41, 1, v71) != 1)
  {
    v45 = v66;
    sub_10000E660(v41, v66, &qword_10036E568);
    if (v43(v42, 1, v44) != 1)
    {
      v46 = v61;
      sub_100003E08(v42, v61, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
      v47 = sub_10011F460(v45, v46, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
      sub_100004030(v46, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
      sub_100015704(v40, &qword_10036E568);
      sub_100015704(v39, &qword_10036E568);
      sub_100004030(v45, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
      sub_100015704(v41, &qword_10036E568);
      if ((v47 & 1) != 0)
        goto LABEL_18;
LABEL_19:
      v57 = 0;
      return v57 & 1;
    }
    sub_100015704(v40, &qword_10036E568);
    sub_100015704(v39, &qword_10036E568);
    sub_100004030(v45, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
    goto LABEL_16;
  }
  sub_100015704(v40, &qword_10036E568);
  sub_100015704(v39, &qword_10036E568);
  if (v43(v42, 1, v44) != 1)
  {
LABEL_16:
    v33 = &qword_100375360;
    v34 = v41;
    goto LABEL_7;
  }
  sub_100015704(v41, &qword_10036E568);
LABEL_18:
  v48 = v73;
  v49 = (char *)v37 + *(int *)(v73 + 24);
  v51 = v64;
  v50 = v65;
  v52 = *(void (**)(char *, char *, uint64_t))(v64 + 16);
  v53 = v62;
  v52(v62, v49, v65);
  v54 = (char *)v36 + *(int *)(v48 + 24);
  v55 = v63;
  v52(v63, v54, v50);
  v56 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v57 = dispatch thunk of static Equatable.== infix(_:_:)(v53, v55, v50, v56);
  v58 = *(void (**)(char *, uint64_t))(v51 + 8);
  v58(v55, v50);
  v58(v53, v50);
  return v57 & 1;
}

uint64_t sub_10011F460(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  char v16;
  double *v17;
  int v18;
  uint64_t v19;
  double *v20;
  char v21;
  double *v22;
  int v23;
  char v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v29;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v29 - v11;
  v13 = a3(0);
  v14 = *(int *)(v13 + 20);
  v15 = (double *)(a1 + v14);
  v16 = *(_BYTE *)(a1 + v14 + 8);
  v17 = (double *)(a2 + v14);
  v18 = *(unsigned __int8 *)(a2 + v14 + 8);
  if ((v16 & 1) == 0)
  {
    if (*v15 != *v17)
      LOBYTE(v18) = 1;
    if ((v18 & 1) != 0)
      goto LABEL_9;
LABEL_7:
    v19 = *(int *)(v13 + 24);
    v20 = (double *)(a1 + v19);
    v21 = *(_BYTE *)(a1 + v19 + 8);
    v22 = (double *)(a2 + v19);
    v23 = *(unsigned __int8 *)(a2 + v19 + 8);
    if ((v21 & 1) != 0)
    {
      if (!v23)
        goto LABEL_9;
    }
    else
    {
      if (*v20 != *v22)
        LOBYTE(v23) = 1;
      if ((v23 & 1) != 0)
        goto LABEL_9;
    }
    v25 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v25(v12, a1, v6);
    v25(v10, a2, v6);
    v26 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v24 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v10, v6, v26);
    v27 = *(void (**)(char *, uint64_t))(v7 + 8);
    v27(v10, v6);
    v27(v12, v6);
    return v24 & 1;
  }
  if (v18)
    goto LABEL_7;
LABEL_9:
  v24 = 0;
  return v24 & 1;
}

uint64_t sub_10011F5E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  double *v13;
  char v14;
  double *v15;
  int v16;
  uint64_t v17;
  double *v18;
  char v19;
  double *v20;
  int v21;
  uint64_t v22;
  double *v23;
  char v24;
  double *v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  char v32;
  void (*v33)(char *, uint64_t);
  uint64_t v36;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v36 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
  v12 = v11[5];
  v13 = (double *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 8);
  v15 = (double *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16)
      goto LABEL_26;
  }
  else
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_26;
  }
  v17 = v11[6];
  v18 = (double *)(a1 + v17);
  v19 = *(_BYTE *)(a1 + v17 + 8);
  v20 = (double *)(a2 + v17);
  v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if ((v19 & 1) != 0)
  {
    if (!v21)
      goto LABEL_26;
  }
  else
  {
    if (*v18 != *v20)
      LOBYTE(v21) = 1;
    if ((v21 & 1) != 0)
      goto LABEL_26;
  }
  v22 = v11[7];
  v23 = (double *)(a1 + v22);
  v24 = *(_BYTE *)(a1 + v22 + 8);
  v25 = (double *)(a2 + v22);
  v26 = *(unsigned __int8 *)(a2 + v22 + 8);
  if ((v24 & 1) != 0)
  {
    if (!v26)
      goto LABEL_26;
  }
  else
  {
    if (*v23 != *v25)
      LOBYTE(v26) = 1;
    if ((v26 & 1) != 0)
      goto LABEL_26;
  }
  v27 = v11[8];
  v28 = *(unsigned __int8 *)(a1 + v27);
  v29 = *(unsigned __int8 *)(a2 + v27);
  if (v28 != 4)
  {
    if (v29 != 4 && v28 == v29)
      goto LABEL_21;
LABEL_26:
    v32 = 0;
    return v32 & 1;
  }
  if (v29 != 4)
    goto LABEL_26;
LABEL_21:
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v30(v10, a1, v4);
  v30(v8, a2, v4);
  v31 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v32 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v31);
  v33 = *(void (**)(char *, uint64_t))(v5 + 8);
  v33(v8, v4);
  v33(v10, v4);
  return v32 & 1;
}

uint64_t sub_10011F7BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  double *v18;
  char v19;
  double *v20;
  int v21;
  uint64_t v22;
  double *v23;
  char v24;
  double *v25;
  int v26;
  uint64_t v27;
  double *v28;
  char v29;
  double *v30;
  int v31;
  uint64_t v32;
  double *v33;
  char v34;
  double *v35;
  int v36;
  char v37;
  void (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v42 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0);
  v12 = v11[5];
  v13 = (_QWORD *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 8);
  v15 = (_QWORD *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16)
      goto LABEL_27;
  }
  else
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_27;
  }
  v17 = v11[6];
  v18 = (double *)(a1 + v17);
  v19 = *(_BYTE *)(a1 + v17 + 8);
  v20 = (double *)(a2 + v17);
  v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if ((v19 & 1) != 0)
  {
    if (!v21)
      goto LABEL_27;
  }
  else
  {
    if (*v18 != *v20)
      LOBYTE(v21) = 1;
    if ((v21 & 1) != 0)
      goto LABEL_27;
  }
  v22 = v11[7];
  v23 = (double *)(a1 + v22);
  v24 = *(_BYTE *)(a1 + v22 + 8);
  v25 = (double *)(a2 + v22);
  v26 = *(unsigned __int8 *)(a2 + v22 + 8);
  if ((v24 & 1) != 0)
  {
    if (!v26)
      goto LABEL_27;
  }
  else
  {
    if (*v23 != *v25)
      LOBYTE(v26) = 1;
    if ((v26 & 1) != 0)
      goto LABEL_27;
  }
  v27 = v11[8];
  v28 = (double *)(a1 + v27);
  v29 = *(_BYTE *)(a1 + v27 + 8);
  v30 = (double *)(a2 + v27);
  v31 = *(unsigned __int8 *)(a2 + v27 + 8);
  if ((v29 & 1) == 0)
  {
    if (*v28 != *v30)
      LOBYTE(v31) = 1;
    if ((v31 & 1) != 0)
      goto LABEL_27;
LABEL_25:
    v32 = v11[9];
    v33 = (double *)(a1 + v32);
    v34 = *(_BYTE *)(a1 + v32 + 8);
    v35 = (double *)(a2 + v32);
    v36 = *(unsigned __int8 *)(a2 + v32 + 8);
    if ((v34 & 1) != 0)
    {
      if (!v36)
        goto LABEL_27;
    }
    else
    {
      if (*v33 != *v35)
        LOBYTE(v36) = 1;
      if ((v36 & 1) != 0)
        goto LABEL_27;
    }
    v39 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v39(v10, a1, v4);
    v39(v8, a2, v4);
    v40 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v37 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v40);
    v41 = *(void (**)(char *, uint64_t))(v5 + 8);
    v41(v8, v4);
    v41(v10, v4);
    return v37 & 1;
  }
  if (v31)
    goto LABEL_25;
LABEL_27:
  v37 = 0;
  return v37 & 1;
}

uint64_t sub_10011F9D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  double *v13;
  char v14;
  double *v15;
  int v16;
  uint64_t v17;
  double *v18;
  char v19;
  double *v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  char v30;
  void (*v31)(char *, uint64_t);
  uint64_t v33;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v33 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
  v12 = v11[5];
  v13 = (double *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 8);
  v15 = (double *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16)
      goto LABEL_24;
  }
  else
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_24;
  }
  v17 = v11[6];
  v18 = (double *)(a1 + v17);
  v19 = *(_BYTE *)(a1 + v17 + 8);
  v20 = (double *)(a2 + v17);
  v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if ((v19 & 1) != 0)
  {
    if (!v21)
      goto LABEL_24;
  }
  else
  {
    if (*v18 != *v20)
      LOBYTE(v21) = 1;
    if ((v21 & 1) != 0)
      goto LABEL_24;
  }
  v22 = v11[7];
  v23 = *(unsigned __int8 *)(a1 + v22);
  v24 = *(unsigned __int8 *)(a2 + v22);
  if (v23 == 2)
  {
    if (v24 != 2)
      goto LABEL_24;
  }
  else if (v24 == 2 || ((((v24 & 1) == 0) ^ v23) & 1) == 0)
  {
    goto LABEL_24;
  }
  v25 = v11[8];
  v26 = *(unsigned __int8 *)(a1 + v25);
  v27 = *(unsigned __int8 *)(a2 + v25);
  if (v26 == 2)
  {
    if (v27 == 2)
      goto LABEL_23;
LABEL_24:
    v30 = 0;
    return v30 & 1;
  }
  if (v27 == 2 || ((((v27 & 1) == 0) ^ v26) & 1) == 0)
    goto LABEL_24;
LABEL_23:
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v28(v10, a1, v4);
  v28(v8, a2, v4);
  v29 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v30 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v29);
  v31 = *(void (**)(char *, uint64_t))(v5 + 8);
  v31(v8, v4);
  v31(v10, v4);
  return v30 & 1;
}

unint64_t sub_10011FBC8()
{
  unint64_t result;

  result = qword_10036E8C0;
  if (!qword_10036E8C0)
  {
    result = swift_getWitnessTable(&unk_1002CAFB0, &type metadata for CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType);
    atomic_store(result, (unint64_t *)&qword_10036E8C0);
  }
  return result;
}

unint64_t sub_10011FC10()
{
  unint64_t result;

  result = qword_10036E8C8;
  if (!qword_10036E8C8)
  {
    result = swift_getWitnessTable(&unk_1002CAFD8, &type metadata for CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType);
    atomic_store(result, (unint64_t *)&qword_10036E8C8);
  }
  return result;
}

unint64_t sub_10011FC58()
{
  unint64_t result;

  result = qword_10036E8D0;
  if (!qword_10036E8D0)
  {
    result = swift_getWitnessTable(&unk_1002CB060, &type metadata for CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType);
    atomic_store(result, (unint64_t *)&qword_10036E8D0);
  }
  return result;
}

uint64_t sub_10011FC9C()
{
  return sub_10000FFB4(&qword_10036E8D8, &qword_10036E8E0);
}

unint64_t sub_10011FCC4()
{
  unint64_t result;

  result = qword_10036E8E8;
  if (!qword_10036E8E8)
  {
    result = swift_getWitnessTable(&unk_1002CB0D0, &type metadata for CLP_LogEntry_PrivateData_LocationType);
    atomic_store(result, (unint64_t *)&qword_10036E8E8);
  }
  return result;
}

unint64_t sub_10011FD0C()
{
  unint64_t result;

  result = qword_10036E8F0;
  if (!qword_10036E8F0)
  {
    result = swift_getWitnessTable(&unk_1002CB0F8, &type metadata for CLP_LogEntry_PrivateData_LocationType);
    atomic_store(result, (unint64_t *)&qword_10036E8F0);
  }
  return result;
}

unint64_t sub_10011FD54()
{
  unint64_t result;

  result = qword_10036E8F8;
  if (!qword_10036E8F8)
  {
    result = swift_getWitnessTable(&unk_1002CB180, &type metadata for CLP_LogEntry_PrivateData_LocationType);
    atomic_store(result, (unint64_t *)&qword_10036E8F8);
  }
  return result;
}

uint64_t sub_10011FD98()
{
  return sub_10000FFB4(&qword_10036E900, &qword_10036E908);
}

unint64_t sub_10011FDC0()
{
  unint64_t result;

  result = qword_10036E910;
  if (!qword_10036E910)
  {
    result = swift_getWitnessTable(&unk_1002CB1F0, &type metadata for CLP_LogEntry_PrivateData_ClientSatelliteConstellation);
    atomic_store(result, (unint64_t *)&qword_10036E910);
  }
  return result;
}

unint64_t sub_10011FE08()
{
  unint64_t result;

  result = qword_10036E918;
  if (!qword_10036E918)
  {
    result = swift_getWitnessTable(&unk_1002CB218, &type metadata for CLP_LogEntry_PrivateData_ClientSatelliteConstellation);
    atomic_store(result, (unint64_t *)&qword_10036E918);
  }
  return result;
}

unint64_t sub_10011FE50()
{
  unint64_t result;

  result = qword_10036E920;
  if (!qword_10036E920)
  {
    result = swift_getWitnessTable(&unk_1002CB2A0, &type metadata for CLP_LogEntry_PrivateData_ClientSatelliteConstellation);
    atomic_store(result, (unint64_t *)&qword_10036E920);
  }
  return result;
}

uint64_t sub_10011FE94()
{
  return sub_10000FFB4(&qword_10036E928, &qword_10036E930);
}

unint64_t sub_10011FEBC()
{
  unint64_t result;

  result = qword_10036E938;
  if (!qword_10036E938)
  {
    result = swift_getWitnessTable(&unk_1002CB310, &type metadata for CLP_LogEntry_PrivateData_BatchedLocationFixType);
    atomic_store(result, (unint64_t *)&qword_10036E938);
  }
  return result;
}

unint64_t sub_10011FF04()
{
  unint64_t result;

  result = qword_10036E940;
  if (!qword_10036E940)
  {
    result = swift_getWitnessTable(&unk_1002CB338, &type metadata for CLP_LogEntry_PrivateData_BatchedLocationFixType);
    atomic_store(result, (unint64_t *)&qword_10036E940);
  }
  return result;
}

unint64_t sub_10011FF4C()
{
  unint64_t result;

  result = qword_10036E948;
  if (!qword_10036E948)
  {
    result = swift_getWitnessTable(&unk_1002CB3C0, &type metadata for CLP_LogEntry_PrivateData_BatchedLocationFixType);
    atomic_store(result, (unint64_t *)&qword_10036E948);
  }
  return result;
}

uint64_t sub_10011FF90()
{
  return sub_10000FFB4(&qword_10036E950, &qword_10036E958);
}

unint64_t sub_10011FFB8()
{
  unint64_t result;

  result = qword_10036E960;
  if (!qword_10036E960)
  {
    result = swift_getWitnessTable(&unk_1002CB430, &type metadata for CLP_LogEntry_PrivateData_GnssModeOfOperation);
    atomic_store(result, (unint64_t *)&qword_10036E960);
  }
  return result;
}

unint64_t sub_100120000()
{
  unint64_t result;

  result = qword_10036E968;
  if (!qword_10036E968)
  {
    result = swift_getWitnessTable(&unk_1002CB458, &type metadata for CLP_LogEntry_PrivateData_GnssModeOfOperation);
    atomic_store(result, (unint64_t *)&qword_10036E968);
  }
  return result;
}

unint64_t sub_100120048()
{
  unint64_t result;

  result = qword_10036E970;
  if (!qword_10036E970)
  {
    result = swift_getWitnessTable(&unk_1002CB4E0, &type metadata for CLP_LogEntry_PrivateData_GnssModeOfOperation);
    atomic_store(result, (unint64_t *)&qword_10036E970);
  }
  return result;
}

uint64_t sub_10012008C()
{
  return sub_10000FFB4(&qword_10036E978, &qword_10036E980);
}

unint64_t sub_1001200B4()
{
  unint64_t result;

  result = qword_10036E988;
  if (!qword_10036E988)
  {
    result = swift_getWitnessTable(&unk_1002CB550, &type metadata for CLP_LogEntry_PrivateData_RhythmicGnssWakeMode);
    atomic_store(result, (unint64_t *)&qword_10036E988);
  }
  return result;
}

unint64_t sub_1001200FC()
{
  unint64_t result;

  result = qword_10036E990;
  if (!qword_10036E990)
  {
    result = swift_getWitnessTable(&unk_1002CB578, &type metadata for CLP_LogEntry_PrivateData_RhythmicGnssWakeMode);
    atomic_store(result, (unint64_t *)&qword_10036E990);
  }
  return result;
}

unint64_t sub_100120144()
{
  unint64_t result;

  result = qword_10036E998;
  if (!qword_10036E998)
  {
    result = swift_getWitnessTable(&unk_1002CB600, &type metadata for CLP_LogEntry_PrivateData_RhythmicGnssWakeMode);
    atomic_store(result, (unint64_t *)&qword_10036E998);
  }
  return result;
}

uint64_t sub_100120188()
{
  return sub_10000FFB4(&qword_10036E9A0, &qword_10036E9A8);
}

unint64_t sub_1001201B0()
{
  unint64_t result;

  result = qword_10036E9B0;
  if (!qword_10036E9B0)
  {
    result = swift_getWitnessTable(&unk_1002CB670, &type metadata for CLP_LogEntry_PrivateData_BatchMode);
    atomic_store(result, (unint64_t *)&qword_10036E9B0);
  }
  return result;
}

unint64_t sub_1001201F8()
{
  unint64_t result;

  result = qword_10036E9B8;
  if (!qword_10036E9B8)
  {
    result = swift_getWitnessTable(&unk_1002CB698, &type metadata for CLP_LogEntry_PrivateData_BatchMode);
    atomic_store(result, (unint64_t *)&qword_10036E9B8);
  }
  return result;
}

unint64_t sub_100120240()
{
  unint64_t result;

  result = qword_10036E9C0;
  if (!qword_10036E9C0)
  {
    result = swift_getWitnessTable(&unk_1002CB720, &type metadata for CLP_LogEntry_PrivateData_BatchMode);
    atomic_store(result, (unint64_t *)&qword_10036E9C0);
  }
  return result;
}

uint64_t sub_100120284()
{
  return sub_10000FFB4(&qword_10036E9C8, &qword_10036E9D0);
}

unint64_t sub_1001202AC()
{
  unint64_t result;

  result = qword_10036E9D8;
  if (!qword_10036E9D8)
  {
    result = swift_getWitnessTable(&unk_1002CB790, &type metadata for CLP_LogEntry_PrivateData_OperatingMode);
    atomic_store(result, (unint64_t *)&qword_10036E9D8);
  }
  return result;
}

unint64_t sub_1001202F4()
{
  unint64_t result;

  result = qword_10036E9E0;
  if (!qword_10036E9E0)
  {
    result = swift_getWitnessTable(&unk_1002CB7B8, &type metadata for CLP_LogEntry_PrivateData_OperatingMode);
    atomic_store(result, (unint64_t *)&qword_10036E9E0);
  }
  return result;
}

unint64_t sub_10012033C()
{
  unint64_t result;

  result = qword_10036E9E8;
  if (!qword_10036E9E8)
  {
    result = swift_getWitnessTable(&unk_1002CB840, &type metadata for CLP_LogEntry_PrivateData_OperatingMode);
    atomic_store(result, (unint64_t *)&qword_10036E9E8);
  }
  return result;
}

uint64_t sub_100120380()
{
  return sub_10000FFB4(&qword_10036E9F0, &qword_10036E9F8);
}

unint64_t sub_1001203A8()
{
  unint64_t result;

  result = qword_10036EA00;
  if (!qword_10036EA00)
  {
    result = swift_getWitnessTable(&unk_1002CB8B0, &type metadata for CLP_LogEntry_PrivateData_PipelineOperatingMode);
    atomic_store(result, (unint64_t *)&qword_10036EA00);
  }
  return result;
}

unint64_t sub_1001203F0()
{
  unint64_t result;

  result = qword_10036EA08;
  if (!qword_10036EA08)
  {
    result = swift_getWitnessTable(&unk_1002CB8D8, &type metadata for CLP_LogEntry_PrivateData_PipelineOperatingMode);
    atomic_store(result, (unint64_t *)&qword_10036EA08);
  }
  return result;
}

unint64_t sub_100120438()
{
  unint64_t result;

  result = qword_10036EA10;
  if (!qword_10036EA10)
  {
    result = swift_getWitnessTable(&unk_1002CB960, &type metadata for CLP_LogEntry_PrivateData_PipelineOperatingMode);
    atomic_store(result, (unint64_t *)&qword_10036EA10);
  }
  return result;
}

uint64_t sub_10012047C()
{
  return sub_10000FFB4(&qword_10036EA18, &qword_10036EA20);
}

unint64_t sub_1001204A4()
{
  unint64_t result;

  result = qword_10036EA28;
  if (!qword_10036EA28)
  {
    result = swift_getWitnessTable(&unk_1002CB9D0, &type metadata for CLP_LogEntry_PrivateData_DominantMotionModeType);
    atomic_store(result, (unint64_t *)&qword_10036EA28);
  }
  return result;
}

unint64_t sub_1001204EC()
{
  unint64_t result;

  result = qword_10036EA30;
  if (!qword_10036EA30)
  {
    result = swift_getWitnessTable(&unk_1002CB9F8, &type metadata for CLP_LogEntry_PrivateData_DominantMotionModeType);
    atomic_store(result, (unint64_t *)&qword_10036EA30);
  }
  return result;
}

unint64_t sub_100120534()
{
  unint64_t result;

  result = qword_10036EA38;
  if (!qword_10036EA38)
  {
    result = swift_getWitnessTable(&unk_1002CBA80, &type metadata for CLP_LogEntry_PrivateData_DominantMotionModeType);
    atomic_store(result, (unint64_t *)&qword_10036EA38);
  }
  return result;
}

uint64_t sub_100120578()
{
  return sub_10000FFB4(&qword_10036EA40, &qword_10036EA48);
}

unint64_t sub_1001205A0()
{
  unint64_t result;

  result = qword_10036EA50;
  if (!qword_10036EA50)
  {
    result = swift_getWitnessTable(&unk_1002CBAF0, &type metadata for CLP_LogEntry_PrivateData_ReachabilityType);
    atomic_store(result, (unint64_t *)&qword_10036EA50);
  }
  return result;
}

unint64_t sub_1001205E8()
{
  unint64_t result;

  result = qword_10036EA58;
  if (!qword_10036EA58)
  {
    result = swift_getWitnessTable(&unk_1002CBB18, &type metadata for CLP_LogEntry_PrivateData_ReachabilityType);
    atomic_store(result, (unint64_t *)&qword_10036EA58);
  }
  return result;
}

unint64_t sub_100120630()
{
  unint64_t result;

  result = qword_10036EA60;
  if (!qword_10036EA60)
  {
    result = swift_getWitnessTable(&unk_1002CBBA0, &type metadata for CLP_LogEntry_PrivateData_ReachabilityType);
    atomic_store(result, (unint64_t *)&qword_10036EA60);
  }
  return result;
}

uint64_t sub_100120674()
{
  return sub_10000FFB4(&qword_10036EA68, &qword_10036EA70);
}

unint64_t sub_10012069C()
{
  unint64_t result;

  result = qword_10036EA78;
  if (!qword_10036EA78)
  {
    result = swift_getWitnessTable(&unk_1002CBC10, &type metadata for CLP_LogEntry_PrivateData_BatteryChargerType);
    atomic_store(result, (unint64_t *)&qword_10036EA78);
  }
  return result;
}

unint64_t sub_1001206E4()
{
  unint64_t result;

  result = qword_10036EA80;
  if (!qword_10036EA80)
  {
    result = swift_getWitnessTable(&unk_1002CBC38, &type metadata for CLP_LogEntry_PrivateData_BatteryChargerType);
    atomic_store(result, (unint64_t *)&qword_10036EA80);
  }
  return result;
}

unint64_t sub_10012072C()
{
  unint64_t result;

  result = qword_10036EA88;
  if (!qword_10036EA88)
  {
    result = swift_getWitnessTable(&unk_1002CBCC0, &type metadata for CLP_LogEntry_PrivateData_BatteryChargerType);
    atomic_store(result, (unint64_t *)&qword_10036EA88);
  }
  return result;
}

uint64_t sub_100120770()
{
  return sub_10000FFB4(&qword_10036EA90, &qword_10036EA98);
}

unint64_t sub_100120798()
{
  unint64_t result;

  result = qword_10036EAA0;
  if (!qword_10036EAA0)
  {
    result = swift_getWitnessTable(&unk_1002CBD30, &type metadata for CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel);
    atomic_store(result, (unint64_t *)&qword_10036EAA0);
  }
  return result;
}

unint64_t sub_1001207E0()
{
  unint64_t result;

  result = qword_10036EAA8;
  if (!qword_10036EAA8)
  {
    result = swift_getWitnessTable(&unk_1002CBD58, &type metadata for CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel);
    atomic_store(result, (unint64_t *)&qword_10036EAA8);
  }
  return result;
}

unint64_t sub_100120828()
{
  unint64_t result;

  result = qword_10036EAB0;
  if (!qword_10036EAB0)
  {
    result = swift_getWitnessTable(&unk_1002CBDE0, &type metadata for CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel);
    atomic_store(result, (unint64_t *)&qword_10036EAB0);
  }
  return result;
}

uint64_t sub_10012086C()
{
  return sub_10000FFB4(&qword_10036EAB8, &qword_10036EAC0);
}

unint64_t sub_100120894()
{
  unint64_t result;

  result = qword_10036EAC8;
  if (!qword_10036EAC8)
  {
    result = swift_getWitnessTable(&unk_1002CBE50, &type metadata for CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel);
    atomic_store(result, (unint64_t *)&qword_10036EAC8);
  }
  return result;
}

unint64_t sub_1001208DC()
{
  unint64_t result;

  result = qword_10036EAD0;
  if (!qword_10036EAD0)
  {
    result = swift_getWitnessTable(&unk_1002CBE78, &type metadata for CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel);
    atomic_store(result, (unint64_t *)&qword_10036EAD0);
  }
  return result;
}

unint64_t sub_100120924()
{
  unint64_t result;

  result = qword_10036EAD8;
  if (!qword_10036EAD8)
  {
    result = swift_getWitnessTable(&unk_1002CBF00, &type metadata for CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel);
    atomic_store(result, (unint64_t *)&qword_10036EAD8);
  }
  return result;
}

uint64_t sub_100120968()
{
  return sub_10000FFB4(&qword_10036EAE0, &qword_10036EAE8);
}

unint64_t sub_100120990()
{
  unint64_t result;

  result = qword_10036EAF0;
  if (!qword_10036EAF0)
  {
    result = swift_getWitnessTable(&unk_1002CBF70, &type metadata for CLP_LogEntry_PrivateData_SensorFusionMode);
    atomic_store(result, (unint64_t *)&qword_10036EAF0);
  }
  return result;
}

unint64_t sub_1001209D8()
{
  unint64_t result;

  result = qword_10036EAF8;
  if (!qword_10036EAF8)
  {
    result = swift_getWitnessTable(&unk_1002CBF98, &type metadata for CLP_LogEntry_PrivateData_SensorFusionMode);
    atomic_store(result, (unint64_t *)&qword_10036EAF8);
  }
  return result;
}

unint64_t sub_100120A20()
{
  unint64_t result;

  result = qword_10036EB00;
  if (!qword_10036EB00)
  {
    result = swift_getWitnessTable(&unk_1002CC020, &type metadata for CLP_LogEntry_PrivateData_SensorFusionMode);
    atomic_store(result, (unint64_t *)&qword_10036EB00);
  }
  return result;
}

uint64_t sub_100120A64()
{
  return sub_10000FFB4(&qword_10036EB08, &qword_10036EB10);
}

unint64_t sub_100120A8C()
{
  unint64_t result;

  result = qword_10036EB18;
  if (!qword_10036EB18)
  {
    result = swift_getWitnessTable(&unk_1002CC090, &type metadata for CLP_LogEntry_PrivateData_WifiAccessPointMode);
    atomic_store(result, (unint64_t *)&qword_10036EB18);
  }
  return result;
}

unint64_t sub_100120AD4()
{
  unint64_t result;

  result = qword_10036EB20;
  if (!qword_10036EB20)
  {
    result = swift_getWitnessTable(&unk_1002CC0B8, &type metadata for CLP_LogEntry_PrivateData_WifiAccessPointMode);
    atomic_store(result, (unint64_t *)&qword_10036EB20);
  }
  return result;
}

unint64_t sub_100120B1C()
{
  unint64_t result;

  result = qword_10036EB28;
  if (!qword_10036EB28)
  {
    result = swift_getWitnessTable(&unk_1002CC140, &type metadata for CLP_LogEntry_PrivateData_WifiAccessPointMode);
    atomic_store(result, (unint64_t *)&qword_10036EB28);
  }
  return result;
}

uint64_t sub_100120B60()
{
  return sub_10000FFB4(&qword_10036EB30, &qword_10036EB38);
}

unint64_t sub_100120B8C()
{
  unint64_t result;

  result = qword_10036EB40;
  if (!qword_10036EB40)
  {
    result = swift_getWitnessTable(&unk_1002CC1D8, &type metadata for CLP_LogEntry_PrivateData_WifiRfBand);
    atomic_store(result, (unint64_t *)&qword_10036EB40);
  }
  return result;
}

unint64_t sub_100120BD4()
{
  unint64_t result;

  result = qword_10036EB48;
  if (!qword_10036EB48)
  {
    result = swift_getWitnessTable(&unk_1002CC260, &type metadata for CLP_LogEntry_PrivateData_WifiRfBand);
    atomic_store(result, (unint64_t *)&qword_10036EB48);
  }
  return result;
}

uint64_t sub_100120C18()
{
  return sub_10000FFB4(&qword_10036EB50, &qword_10036EB58);
}

unint64_t sub_100120C40()
{
  unint64_t result;

  result = qword_10036EB60;
  if (!qword_10036EB60)
  {
    result = swift_getWitnessTable(&unk_1002CC2D0, &type metadata for CLP_LogEntry_PrivateData_WifiScanType);
    atomic_store(result, (unint64_t *)&qword_10036EB60);
  }
  return result;
}

unint64_t sub_100120C88()
{
  unint64_t result;

  result = qword_10036EB68;
  if (!qword_10036EB68)
  {
    result = swift_getWitnessTable(&unk_1002CC2F8, &type metadata for CLP_LogEntry_PrivateData_WifiScanType);
    atomic_store(result, (unint64_t *)&qword_10036EB68);
  }
  return result;
}

unint64_t sub_100120CD0()
{
  unint64_t result;

  result = qword_10036EB70;
  if (!qword_10036EB70)
  {
    result = swift_getWitnessTable(&unk_1002CC380, &type metadata for CLP_LogEntry_PrivateData_WifiScanType);
    atomic_store(result, (unint64_t *)&qword_10036EB70);
  }
  return result;
}

uint64_t sub_100120D14()
{
  return sub_10000FFB4(&qword_10036EB78, &qword_10036EB80);
}

unint64_t sub_100120D3C()
{
  unint64_t result;

  result = qword_10036EB88;
  if (!qword_10036EB88)
  {
    result = swift_getWitnessTable(&unk_1002CC3F0, &type metadata for CLP_LogEntry_PrivateData_WifiNotificationType);
    atomic_store(result, (unint64_t *)&qword_10036EB88);
  }
  return result;
}

unint64_t sub_100120D84()
{
  unint64_t result;

  result = qword_10036EB90;
  if (!qword_10036EB90)
  {
    result = swift_getWitnessTable(&unk_1002CC418, &type metadata for CLP_LogEntry_PrivateData_WifiNotificationType);
    atomic_store(result, (unint64_t *)&qword_10036EB90);
  }
  return result;
}

unint64_t sub_100120DCC()
{
  unint64_t result;

  result = qword_10036EB98;
  if (!qword_10036EB98)
  {
    result = swift_getWitnessTable(&unk_1002CC4A0, &type metadata for CLP_LogEntry_PrivateData_WifiNotificationType);
    atomic_store(result, (unint64_t *)&qword_10036EB98);
  }
  return result;
}

uint64_t sub_100120E10()
{
  return sub_10000FFB4(&qword_10036EBA0, &qword_10036EBA8);
}

unint64_t sub_100120E38()
{
  unint64_t result;

  result = qword_10036EBB0;
  if (!qword_10036EBB0)
  {
    result = swift_getWitnessTable(&unk_1002CC510, &type metadata for CLP_LogEntry_PrivateData_LocationServicesEnabled);
    atomic_store(result, (unint64_t *)&qword_10036EBB0);
  }
  return result;
}

unint64_t sub_100120E80()
{
  unint64_t result;

  result = qword_10036EBB8;
  if (!qword_10036EBB8)
  {
    result = swift_getWitnessTable(&unk_1002CC538, &type metadata for CLP_LogEntry_PrivateData_LocationServicesEnabled);
    atomic_store(result, (unint64_t *)&qword_10036EBB8);
  }
  return result;
}

unint64_t sub_100120EC8()
{
  unint64_t result;

  result = qword_10036EBC0;
  if (!qword_10036EBC0)
  {
    result = swift_getWitnessTable(&unk_1002CC5C0, &type metadata for CLP_LogEntry_PrivateData_LocationServicesEnabled);
    atomic_store(result, (unint64_t *)&qword_10036EBC0);
  }
  return result;
}

uint64_t sub_100120F0C()
{
  return sub_10000FFB4(&qword_10036EBC8, &qword_10036EBD0);
}

unint64_t sub_100120F34()
{
  unint64_t result;

  result = qword_10036EBD8;
  if (!qword_10036EBD8)
  {
    result = swift_getWitnessTable(&unk_1002CC630, &type metadata for CLP_LogEntry_PrivateData_DataAvailability);
    atomic_store(result, (unint64_t *)&qword_10036EBD8);
  }
  return result;
}

unint64_t sub_100120F7C()
{
  unint64_t result;

  result = qword_10036EBE0;
  if (!qword_10036EBE0)
  {
    result = swift_getWitnessTable(&unk_1002CC658, &type metadata for CLP_LogEntry_PrivateData_DataAvailability);
    atomic_store(result, (unint64_t *)&qword_10036EBE0);
  }
  return result;
}

unint64_t sub_100120FC4()
{
  unint64_t result;

  result = qword_10036EBE8;
  if (!qword_10036EBE8)
  {
    result = swift_getWitnessTable(&unk_1002CC6E0, &type metadata for CLP_LogEntry_PrivateData_DataAvailability);
    atomic_store(result, (unint64_t *)&qword_10036EBE8);
  }
  return result;
}

uint64_t sub_100121008()
{
  return sub_10000FFB4(&qword_10036EBF0, &qword_10036EBF8);
}

unint64_t sub_100121030()
{
  unint64_t result;

  result = qword_10036EC00;
  if (!qword_10036EC00)
  {
    result = swift_getWitnessTable(&unk_1002CC750, &type metadata for CLP_LogEntry_PrivateData_IndoorOutdoorType);
    atomic_store(result, (unint64_t *)&qword_10036EC00);
  }
  return result;
}

unint64_t sub_100121078()
{
  unint64_t result;

  result = qword_10036EC08;
  if (!qword_10036EC08)
  {
    result = swift_getWitnessTable(&unk_1002CC778, &type metadata for CLP_LogEntry_PrivateData_IndoorOutdoorType);
    atomic_store(result, (unint64_t *)&qword_10036EC08);
  }
  return result;
}

unint64_t sub_1001210C0()
{
  unint64_t result;

  result = qword_10036EC10;
  if (!qword_10036EC10)
  {
    result = swift_getWitnessTable(&unk_1002CC800, &type metadata for CLP_LogEntry_PrivateData_IndoorOutdoorType);
    atomic_store(result, (unint64_t *)&qword_10036EC10);
  }
  return result;
}

uint64_t sub_100121104()
{
  return sub_10000FFB4(&qword_10036EC18, &qword_10036EC20);
}

unint64_t sub_10012112C()
{
  unint64_t result;

  result = qword_10036EC28;
  if (!qword_10036EC28)
  {
    result = swift_getWitnessTable(&unk_1002CC870, &type metadata for CLP_LogEntry_PrivateData_IndoorOutdoorConfidence);
    atomic_store(result, (unint64_t *)&qword_10036EC28);
  }
  return result;
}

unint64_t sub_100121174()
{
  unint64_t result;

  result = qword_10036EC30;
  if (!qword_10036EC30)
  {
    result = swift_getWitnessTable(&unk_1002CC898, &type metadata for CLP_LogEntry_PrivateData_IndoorOutdoorConfidence);
    atomic_store(result, (unint64_t *)&qword_10036EC30);
  }
  return result;
}

unint64_t sub_1001211BC()
{
  unint64_t result;

  result = qword_10036EC38;
  if (!qword_10036EC38)
  {
    result = swift_getWitnessTable(&unk_1002CC920, &type metadata for CLP_LogEntry_PrivateData_IndoorOutdoorConfidence);
    atomic_store(result, (unint64_t *)&qword_10036EC38);
  }
  return result;
}

uint64_t sub_100121200()
{
  return sub_10000FFB4(&qword_10036EC40, &qword_10036EC48);
}

unint64_t sub_100121228()
{
  unint64_t result;

  result = qword_10036EC50;
  if (!qword_10036EC50)
  {
    result = swift_getWitnessTable(&unk_1002CC990, &type metadata for CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType);
    atomic_store(result, (unint64_t *)&qword_10036EC50);
  }
  return result;
}

unint64_t sub_100121270()
{
  unint64_t result;

  result = qword_10036EC58;
  if (!qword_10036EC58)
  {
    result = swift_getWitnessTable(&unk_1002CC9B8, &type metadata for CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType);
    atomic_store(result, (unint64_t *)&qword_10036EC58);
  }
  return result;
}

unint64_t sub_1001212B8()
{
  unint64_t result;

  result = qword_10036EC60;
  if (!qword_10036EC60)
  {
    result = swift_getWitnessTable(&unk_1002CCA40, &type metadata for CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType);
    atomic_store(result, (unint64_t *)&qword_10036EC60);
  }
  return result;
}

unint64_t sub_100121300()
{
  unint64_t result;

  result = qword_10036EC68;
  if (!qword_10036EC68)
  {
    result = swift_getWitnessTable(&unk_1002CCA78, &type metadata for CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType);
    atomic_store(result, (unint64_t *)&qword_10036EC68);
  }
  return result;
}

unint64_t sub_100121348()
{
  unint64_t result;

  result = qword_10036EC70;
  if (!qword_10036EC70)
  {
    result = swift_getWitnessTable(&unk_1002CCAA0, &type metadata for CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType);
    atomic_store(result, (unint64_t *)&qword_10036EC70);
  }
  return result;
}

unint64_t sub_100121390()
{
  unint64_t result;

  result = qword_10036EC78;
  if (!qword_10036EC78)
  {
    result = swift_getWitnessTable(&unk_1002CCB28, &type metadata for CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType);
    atomic_store(result, (unint64_t *)&qword_10036EC78);
  }
  return result;
}

uint64_t sub_1001213D4()
{
  return sub_10000FFB4(&qword_10036EC80, &qword_10036EC88);
}

uint64_t sub_1001213F8()
{
  return sub_10000FFB4(&qword_10036EC90, &qword_10036EC98);
}

unint64_t sub_100121420()
{
  unint64_t result;

  result = qword_10036ECA0;
  if (!qword_10036ECA0)
  {
    result = swift_getWitnessTable(&unk_1002CCBD0, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType);
    atomic_store(result, (unint64_t *)&qword_10036ECA0);
  }
  return result;
}

unint64_t sub_100121468()
{
  unint64_t result;

  result = qword_10036ECA8;
  if (!qword_10036ECA8)
  {
    result = swift_getWitnessTable(&unk_1002CCBF8, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType);
    atomic_store(result, (unint64_t *)&qword_10036ECA8);
  }
  return result;
}

unint64_t sub_1001214B0()
{
  unint64_t result;

  result = qword_10036ECB0;
  if (!qword_10036ECB0)
  {
    result = swift_getWitnessTable(&unk_1002CCC80, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType);
    atomic_store(result, (unint64_t *)&qword_10036ECB0);
  }
  return result;
}

unint64_t sub_1001214F8()
{
  unint64_t result;

  result = qword_10036ECB8;
  if (!qword_10036ECB8)
  {
    result = swift_getWitnessTable(&unk_1002CCCB8, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType);
    atomic_store(result, (unint64_t *)&qword_10036ECB8);
  }
  return result;
}

unint64_t sub_100121540()
{
  unint64_t result;

  result = qword_10036ECC0;
  if (!qword_10036ECC0)
  {
    result = swift_getWitnessTable(&unk_1002CCCE0, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType);
    atomic_store(result, (unint64_t *)&qword_10036ECC0);
  }
  return result;
}

unint64_t sub_100121588()
{
  unint64_t result;

  result = qword_10036ECC8;
  if (!qword_10036ECC8)
  {
    result = swift_getWitnessTable(&unk_1002CCD68, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType);
    atomic_store(result, (unint64_t *)&qword_10036ECC8);
  }
  return result;
}

unint64_t sub_1001215D0()
{
  unint64_t result;

  result = qword_10036ECD0;
  if (!qword_10036ECD0)
  {
    result = swift_getWitnessTable(&unk_1002CCDA0, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType);
    atomic_store(result, (unint64_t *)&qword_10036ECD0);
  }
  return result;
}

unint64_t sub_100121618()
{
  unint64_t result;

  result = qword_10036ECD8;
  if (!qword_10036ECD8)
  {
    result = swift_getWitnessTable(&unk_1002CCDC8, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType);
    atomic_store(result, (unint64_t *)&qword_10036ECD8);
  }
  return result;
}

unint64_t sub_100121660()
{
  unint64_t result;

  result = qword_10036ECE0;
  if (!qword_10036ECE0)
  {
    result = swift_getWitnessTable(&unk_1002CCE50, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType);
    atomic_store(result, (unint64_t *)&qword_10036ECE0);
  }
  return result;
}

unint64_t sub_1001216A8()
{
  unint64_t result;

  result = qword_10036ECE8;
  if (!qword_10036ECE8)
  {
    result = swift_getWitnessTable(&unk_1002CCE88, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent);
    atomic_store(result, (unint64_t *)&qword_10036ECE8);
  }
  return result;
}

unint64_t sub_1001216F0()
{
  unint64_t result;

  result = qword_10036ECF0;
  if (!qword_10036ECF0)
  {
    result = swift_getWitnessTable(&unk_1002CCEB0, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent);
    atomic_store(result, (unint64_t *)&qword_10036ECF0);
  }
  return result;
}

unint64_t sub_100121738()
{
  unint64_t result;

  result = qword_10036ECF8;
  if (!qword_10036ECF8)
  {
    result = swift_getWitnessTable(&unk_1002CCF38, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent);
    atomic_store(result, (unint64_t *)&qword_10036ECF8);
  }
  return result;
}

unint64_t sub_100121780()
{
  unint64_t result;

  result = qword_10036ED00;
  if (!qword_10036ED00)
  {
    result = swift_getWitnessTable(&unk_1002CCF70, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType);
    atomic_store(result, (unint64_t *)&qword_10036ED00);
  }
  return result;
}

unint64_t sub_1001217C8()
{
  unint64_t result;

  result = qword_10036ED08;
  if (!qword_10036ED08)
  {
    result = swift_getWitnessTable(&unk_1002CCF98, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType);
    atomic_store(result, (unint64_t *)&qword_10036ED08);
  }
  return result;
}

unint64_t sub_100121810()
{
  unint64_t result;

  result = qword_10036ED10;
  if (!qword_10036ED10)
  {
    result = swift_getWitnessTable(&unk_1002CD020, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType);
    atomic_store(result, (unint64_t *)&qword_10036ED10);
  }
  return result;
}

unint64_t sub_100121858()
{
  unint64_t result;

  result = qword_10036ED18;
  if (!qword_10036ED18)
  {
    result = swift_getWitnessTable(&unk_1002CD058, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType);
    atomic_store(result, (unint64_t *)&qword_10036ED18);
  }
  return result;
}

unint64_t sub_1001218A0()
{
  unint64_t result;

  result = qword_10036ED20;
  if (!qword_10036ED20)
  {
    result = swift_getWitnessTable(&unk_1002CD080, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType);
    atomic_store(result, (unint64_t *)&qword_10036ED20);
  }
  return result;
}

unint64_t sub_1001218E8()
{
  unint64_t result;

  result = qword_10036ED28;
  if (!qword_10036ED28)
  {
    result = swift_getWitnessTable(&unk_1002CD108, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType);
    atomic_store(result, (unint64_t *)&qword_10036ED28);
  }
  return result;
}

unint64_t sub_100121930()
{
  unint64_t result;

  result = qword_10036ED30;
  if (!qword_10036ED30)
  {
    result = swift_getWitnessTable(&unk_1002CD140, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy);
    atomic_store(result, (unint64_t *)&qword_10036ED30);
  }
  return result;
}

unint64_t sub_100121978()
{
  unint64_t result;

  result = qword_10036ED38;
  if (!qword_10036ED38)
  {
    result = swift_getWitnessTable(&unk_1002CD168, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy);
    atomic_store(result, (unint64_t *)&qword_10036ED38);
  }
  return result;
}

unint64_t sub_1001219C0()
{
  unint64_t result;

  result = qword_10036ED40;
  if (!qword_10036ED40)
  {
    result = swift_getWitnessTable(&unk_1002CD1F0, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy);
    atomic_store(result, (unint64_t *)&qword_10036ED40);
  }
  return result;
}

uint64_t sub_100121A04()
{
  return sub_10000FFB4(&qword_10036ED48, &qword_10036ED50);
}

uint64_t sub_100121A28()
{
  return sub_10000FFB4(&qword_10036ED58, &qword_10036ED60);
}

uint64_t sub_100121A4C()
{
  return sub_10000FFB4(&qword_10036ED68, &qword_10036ED70);
}

uint64_t sub_100121A70()
{
  return sub_10000FFB4(&qword_10036ED78, &qword_10036ED80);
}

uint64_t sub_100121A94()
{
  return sub_10000FFB4(&qword_10036ED88, &qword_10036ED90);
}

uint64_t sub_100121AB8()
{
  return sub_10000FFB4(&qword_10036ED98, &qword_10036EDA0);
}

uint64_t sub_100121ADC()
{
  return sub_10000FFB4(&qword_10036EDA8, &qword_10036EDB0);
}

unint64_t sub_100121B04()
{
  unint64_t result;

  result = qword_10036EDB8;
  if (!qword_10036EDB8)
  {
    result = swift_getWitnessTable(&unk_1002CD3B0, &type metadata for CLP_LogEntry_PrivateData_Location.SignalQualityType);
    atomic_store(result, (unint64_t *)&qword_10036EDB8);
  }
  return result;
}

unint64_t sub_100121B4C()
{
  unint64_t result;

  result = qword_10036EDC0;
  if (!qword_10036EDC0)
  {
    result = swift_getWitnessTable(&unk_1002CD3D8, &type metadata for CLP_LogEntry_PrivateData_Location.SignalQualityType);
    atomic_store(result, (unint64_t *)&qword_10036EDC0);
  }
  return result;
}

unint64_t sub_100121B94()
{
  unint64_t result;

  result = qword_10036EDC8;
  if (!qword_10036EDC8)
  {
    result = swift_getWitnessTable(&unk_1002CD460, &type metadata for CLP_LogEntry_PrivateData_Location.SignalQualityType);
    atomic_store(result, (unint64_t *)&qword_10036EDC8);
  }
  return result;
}

unint64_t sub_100121BDC()
{
  unint64_t result;

  result = qword_10036EDD0;
  if (!qword_10036EDD0)
  {
    result = swift_getWitnessTable(&unk_1002CD498, &type metadata for CLP_LogEntry_PrivateData_Location.MotionDetectedType);
    atomic_store(result, (unint64_t *)&qword_10036EDD0);
  }
  return result;
}

unint64_t sub_100121C24()
{
  unint64_t result;

  result = qword_10036EDD8;
  if (!qword_10036EDD8)
  {
    result = swift_getWitnessTable(&unk_1002CD4C0, &type metadata for CLP_LogEntry_PrivateData_Location.MotionDetectedType);
    atomic_store(result, (unint64_t *)&qword_10036EDD8);
  }
  return result;
}

unint64_t sub_100121C6C()
{
  unint64_t result;

  result = qword_10036EDE0;
  if (!qword_10036EDE0)
  {
    result = swift_getWitnessTable(&unk_1002CD548, &type metadata for CLP_LogEntry_PrivateData_Location.MotionDetectedType);
    atomic_store(result, (unint64_t *)&qword_10036EDE0);
  }
  return result;
}

uint64_t sub_100121CB0()
{
  return sub_10000FFB4(&qword_10036EDE8, &qword_10036EDF0);
}

uint64_t sub_100121CD4()
{
  return sub_10000FFB4(&qword_10036EDF8, &qword_10036EE00);
}

unint64_t sub_100121CFC()
{
  unint64_t result;

  result = qword_10036EE08;
  if (!qword_10036EE08)
  {
    result = swift_getWitnessTable(&unk_1002CD5F0, &type metadata for CLP_LogEntry_PrivateData_MotionActivity.MountedStateType);
    atomic_store(result, (unint64_t *)&qword_10036EE08);
  }
  return result;
}

unint64_t sub_100121D44()
{
  unint64_t result;

  result = qword_10036EE10;
  if (!qword_10036EE10)
  {
    result = swift_getWitnessTable(&unk_1002CD618, &type metadata for CLP_LogEntry_PrivateData_MotionActivity.MountedStateType);
    atomic_store(result, (unint64_t *)&qword_10036EE10);
  }
  return result;
}

unint64_t sub_100121D8C()
{
  unint64_t result;

  result = qword_10036EE18;
  if (!qword_10036EE18)
  {
    result = swift_getWitnessTable(&unk_1002CD6A0, &type metadata for CLP_LogEntry_PrivateData_MotionActivity.MountedStateType);
    atomic_store(result, (unint64_t *)&qword_10036EE18);
  }
  return result;
}

unint64_t sub_100121DD4()
{
  unint64_t result;

  result = qword_10036EE20;
  if (!qword_10036EE20)
  {
    result = swift_getWitnessTable(&unk_1002CD6D8, &type metadata for CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType);
    atomic_store(result, (unint64_t *)&qword_10036EE20);
  }
  return result;
}

unint64_t sub_100121E1C()
{
  unint64_t result;

  result = qword_10036EE28;
  if (!qword_10036EE28)
  {
    result = swift_getWitnessTable(&unk_1002CD700, &type metadata for CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType);
    atomic_store(result, (unint64_t *)&qword_10036EE28);
  }
  return result;
}

unint64_t sub_100121E64()
{
  unint64_t result;

  result = qword_10036EE30;
  if (!qword_10036EE30)
  {
    result = swift_getWitnessTable(&unk_1002CD788, &type metadata for CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType);
    atomic_store(result, (unint64_t *)&qword_10036EE30);
  }
  return result;
}

unint64_t sub_100121EAC()
{
  unint64_t result;

  result = qword_10036EE38;
  if (!qword_10036EE38)
  {
    result = swift_getWitnessTable(&unk_1002CD7C0, &type metadata for CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType);
    atomic_store(result, (unint64_t *)&qword_10036EE38);
  }
  return result;
}

unint64_t sub_100121EF4()
{
  unint64_t result;

  result = qword_10036EE40;
  if (!qword_10036EE40)
  {
    result = swift_getWitnessTable(&unk_1002CD7E8, &type metadata for CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType);
    atomic_store(result, (unint64_t *)&qword_10036EE40);
  }
  return result;
}

unint64_t sub_100121F3C()
{
  unint64_t result;

  result = qword_10036EE48;
  if (!qword_10036EE48)
  {
    result = swift_getWitnessTable(&unk_1002CD870, &type metadata for CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType);
    atomic_store(result, (unint64_t *)&qword_10036EE48);
  }
  return result;
}

uint64_t sub_100121F80()
{
  return sub_10000FFB4(&qword_10036EE50, &qword_10036EE58);
}

uint64_t sub_100121FA4()
{
  return sub_10000FFB4(&qword_10036EE60, &qword_10036EE68);
}

uint64_t sub_100121FC8()
{
  return sub_10000FFB4(&qword_10036EE70, &qword_10036EE78);
}

unint64_t sub_100121FF0()
{
  unint64_t result;

  result = qword_10036EE80;
  if (!qword_10036EE80)
  {
    result = swift_getWitnessTable(&unk_1002CD950, &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType);
    atomic_store(result, (unint64_t *)&qword_10036EE80);
  }
  return result;
}

unint64_t sub_100122038()
{
  unint64_t result;

  result = qword_10036EE88;
  if (!qword_10036EE88)
  {
    result = swift_getWitnessTable(&unk_1002CD978, &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType);
    atomic_store(result, (unint64_t *)&qword_10036EE88);
  }
  return result;
}

unint64_t sub_100122080()
{
  unint64_t result;

  result = qword_10036EE90;
  if (!qword_10036EE90)
  {
    result = swift_getWitnessTable(&unk_1002CDA00, &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType);
    atomic_store(result, (unint64_t *)&qword_10036EE90);
  }
  return result;
}

unint64_t sub_1001220C8()
{
  unint64_t result;

  result = qword_10036EE98;
  if (!qword_10036EE98)
  {
    result = swift_getWitnessTable(&unk_1002CDA38, &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType);
    atomic_store(result, (unint64_t *)&qword_10036EE98);
  }
  return result;
}

unint64_t sub_100122110()
{
  unint64_t result;

  result = qword_10036EEA0;
  if (!qword_10036EEA0)
  {
    result = swift_getWitnessTable(&unk_1002CDA60, &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType);
    atomic_store(result, (unint64_t *)&qword_10036EEA0);
  }
  return result;
}

unint64_t sub_100122158()
{
  unint64_t result;

  result = qword_10036EEA8;
  if (!qword_10036EEA8)
  {
    result = swift_getWitnessTable(&unk_1002CDAE8, &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType);
    atomic_store(result, (unint64_t *)&qword_10036EEA8);
  }
  return result;
}

unint64_t sub_1001221A0()
{
  unint64_t result;

  result = qword_10036EEB0;
  if (!qword_10036EEB0)
  {
    result = swift_getWitnessTable(&unk_1002CDB20, &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode);
    atomic_store(result, (unint64_t *)&qword_10036EEB0);
  }
  return result;
}

unint64_t sub_1001221E8()
{
  unint64_t result;

  result = qword_10036EEB8;
  if (!qword_10036EEB8)
  {
    result = swift_getWitnessTable(&unk_1002CDB48, &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode);
    atomic_store(result, (unint64_t *)&qword_10036EEB8);
  }
  return result;
}

unint64_t sub_100122230()
{
  unint64_t result;

  result = qword_10036EEC0;
  if (!qword_10036EEC0)
  {
    result = swift_getWitnessTable(&unk_1002CDBD0, &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode);
    atomic_store(result, (unint64_t *)&qword_10036EEC0);
  }
  return result;
}

uint64_t sub_100122274()
{
  return sub_10000FFB4(&qword_10036EEC8, &qword_10036EED0);
}

uint64_t sub_100122298()
{
  return sub_10000FFB4(&qword_10036EED8, &qword_10036EEE0);
}

uint64_t sub_1001222BC()
{
  return sub_10000FFB4(&qword_10036EEE8, &qword_10036EEF0);
}

unint64_t sub_1001222E4()
{
  unint64_t result;

  result = qword_10036EEF8;
  if (!qword_10036EEF8)
  {
    result = swift_getWitnessTable(&unk_1002CDCB0, &type metadata for CLP_LogEntry_PrivateData_WorkoutEvent.EventType);
    atomic_store(result, (unint64_t *)&qword_10036EEF8);
  }
  return result;
}

unint64_t sub_10012232C()
{
  unint64_t result;

  result = qword_10036EF00;
  if (!qword_10036EF00)
  {
    result = swift_getWitnessTable(&unk_1002CDCD8, &type metadata for CLP_LogEntry_PrivateData_WorkoutEvent.EventType);
    atomic_store(result, (unint64_t *)&qword_10036EF00);
  }
  return result;
}

unint64_t sub_100122374()
{
  unint64_t result;

  result = qword_10036EF08;
  if (!qword_10036EF08)
  {
    result = swift_getWitnessTable(&unk_1002CDD60, &type metadata for CLP_LogEntry_PrivateData_WorkoutEvent.EventType);
    atomic_store(result, (unint64_t *)&qword_10036EF08);
  }
  return result;
}

uint64_t sub_1001223B8()
{
  return sub_10000FFB4(&qword_10036EF10, &qword_10036EF18);
}

unint64_t sub_1001223E0()
{
  unint64_t result;

  result = qword_10036EF20;
  if (!qword_10036EF20)
  {
    result = swift_getWitnessTable(&unk_1002CDDD0, &type metadata for CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType);
    atomic_store(result, (unint64_t *)&qword_10036EF20);
  }
  return result;
}

unint64_t sub_100122428()
{
  unint64_t result;

  result = qword_10036EF28;
  if (!qword_10036EF28)
  {
    result = swift_getWitnessTable(&unk_1002CDDF8, &type metadata for CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType);
    atomic_store(result, (unint64_t *)&qword_10036EF28);
  }
  return result;
}

unint64_t sub_100122470()
{
  unint64_t result;

  result = qword_10036EF30;
  if (!qword_10036EF30)
  {
    result = swift_getWitnessTable(&unk_1002CDE80, &type metadata for CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType);
    atomic_store(result, (unint64_t *)&qword_10036EF30);
  }
  return result;
}

unint64_t sub_1001224B8()
{
  unint64_t result;

  result = qword_10036EF38;
  if (!qword_10036EF38)
  {
    result = swift_getWitnessTable(&unk_1002CDEB8, &type metadata for CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType);
    atomic_store(result, (unint64_t *)&qword_10036EF38);
  }
  return result;
}

unint64_t sub_100122500()
{
  unint64_t result;

  result = qword_10036EF40;
  if (!qword_10036EF40)
  {
    result = swift_getWitnessTable(&unk_1002CDEE0, &type metadata for CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType);
    atomic_store(result, (unint64_t *)&qword_10036EF40);
  }
  return result;
}

unint64_t sub_100122548()
{
  unint64_t result;

  result = qword_10036EF48;
  if (!qword_10036EF48)
  {
    result = swift_getWitnessTable(&unk_1002CDF68, &type metadata for CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType);
    atomic_store(result, (unint64_t *)&qword_10036EF48);
  }
  return result;
}

uint64_t sub_10012258C()
{
  return sub_10000FFB4(&qword_10036EF50, &qword_10036EF58);
}

uint64_t sub_1001225B0()
{
  return sub_10000FFB4(&qword_10036EF60, &qword_10036EF68);
}

unint64_t sub_1001225D8()
{
  unint64_t result;

  result = qword_10036EF70;
  if (!qword_10036EF70)
  {
    result = swift_getWitnessTable(&unk_1002CE010, &type metadata for CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType);
    atomic_store(result, (unint64_t *)&qword_10036EF70);
  }
  return result;
}

unint64_t sub_100122620()
{
  unint64_t result;

  result = qword_10036EF78;
  if (!qword_10036EF78)
  {
    result = swift_getWitnessTable(&unk_1002CE038, &type metadata for CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType);
    atomic_store(result, (unint64_t *)&qword_10036EF78);
  }
  return result;
}

unint64_t sub_100122668()
{
  unint64_t result;

  result = qword_10036EF80;
  if (!qword_10036EF80)
  {
    result = swift_getWitnessTable(&unk_1002CE0C0, &type metadata for CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType);
    atomic_store(result, (unint64_t *)&qword_10036EF80);
  }
  return result;
}

uint64_t sub_1001226AC()
{
  return sub_10000FFB4(&qword_10036EF88, &qword_10036EF90);
}

unint64_t sub_1001226D4()
{
  unint64_t result;

  result = qword_10036EF98;
  if (!qword_10036EF98)
  {
    result = swift_getWitnessTable(&unk_1002CE130, &type metadata for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType);
    atomic_store(result, (unint64_t *)&qword_10036EF98);
  }
  return result;
}

unint64_t sub_10012271C()
{
  unint64_t result;

  result = qword_10036EFA0;
  if (!qword_10036EFA0)
  {
    result = swift_getWitnessTable(&unk_1002CE158, &type metadata for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType);
    atomic_store(result, (unint64_t *)&qword_10036EFA0);
  }
  return result;
}

unint64_t sub_100122764()
{
  unint64_t result;

  result = qword_10036EFA8;
  if (!qword_10036EFA8)
  {
    result = swift_getWitnessTable(&unk_1002CE1E0, &type metadata for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType);
    atomic_store(result, (unint64_t *)&qword_10036EFA8);
  }
  return result;
}

unint64_t sub_1001227AC()
{
  unint64_t result;

  result = qword_10036EFB0;
  if (!qword_10036EFB0)
  {
    result = swift_getWitnessTable(&unk_1002CE218, &type metadata for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType);
    atomic_store(result, (unint64_t *)&qword_10036EFB0);
  }
  return result;
}

unint64_t sub_1001227F4()
{
  unint64_t result;

  result = qword_10036EFB8;
  if (!qword_10036EFB8)
  {
    result = swift_getWitnessTable(&unk_1002CE240, &type metadata for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType);
    atomic_store(result, (unint64_t *)&qword_10036EFB8);
  }
  return result;
}

unint64_t sub_10012283C()
{
  unint64_t result;

  result = qword_10036EFC0;
  if (!qword_10036EFC0)
  {
    result = swift_getWitnessTable(&unk_1002CE2C8, &type metadata for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType);
    atomic_store(result, (unint64_t *)&qword_10036EFC0);
  }
  return result;
}

uint64_t sub_100122880()
{
  return sub_10000FFB4(&qword_10036EFC8, &qword_10036EFD0);
}

uint64_t sub_1001228A4()
{
  return sub_10000FFB4(&qword_10036EFD8, &qword_10036EFE0);
}

unint64_t sub_1001228CC()
{
  unint64_t result;

  result = qword_10036EFE8;
  if (!qword_10036EFE8)
  {
    result = swift_getWitnessTable(&unk_1002CE370, &type metadata for CLP_LogEntry_PrivateData_DeviceStatus.NotificationType);
    atomic_store(result, (unint64_t *)&qword_10036EFE8);
  }
  return result;
}

unint64_t sub_100122914()
{
  unint64_t result;

  result = qword_10036EFF0;
  if (!qword_10036EFF0)
  {
    result = swift_getWitnessTable(&unk_1002CE398, &type metadata for CLP_LogEntry_PrivateData_DeviceStatus.NotificationType);
    atomic_store(result, (unint64_t *)&qword_10036EFF0);
  }
  return result;
}

unint64_t sub_10012295C()
{
  unint64_t result;

  result = qword_10036EFF8;
  if (!qword_10036EFF8)
  {
    result = swift_getWitnessTable(&unk_1002CE420, &type metadata for CLP_LogEntry_PrivateData_DeviceStatus.NotificationType);
    atomic_store(result, (unint64_t *)&qword_10036EFF8);
  }
  return result;
}

uint64_t sub_1001229A0()
{
  return sub_10000FFB4(&qword_10036F000, &qword_10036F008);
}

unint64_t sub_1001229C8()
{
  unint64_t result;

  result = qword_10036F010;
  if (!qword_10036F010)
  {
    result = swift_getWitnessTable(&unk_1002CE490, &type metadata for CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType);
    atomic_store(result, (unint64_t *)&qword_10036F010);
  }
  return result;
}

unint64_t sub_100122A10()
{
  unint64_t result;

  result = qword_10036F018;
  if (!qword_10036F018)
  {
    result = swift_getWitnessTable(&unk_1002CE4B8, &type metadata for CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType);
    atomic_store(result, (unint64_t *)&qword_10036F018);
  }
  return result;
}

unint64_t sub_100122A58()
{
  unint64_t result;

  result = qword_10036F020;
  if (!qword_10036F020)
  {
    result = swift_getWitnessTable(&unk_1002CE540, &type metadata for CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType);
    atomic_store(result, (unint64_t *)&qword_10036F020);
  }
  return result;
}

uint64_t sub_100122A9C()
{
  return sub_10000FFB4(&qword_10036F028, &qword_10036F030);
}

unint64_t sub_100122AC4()
{
  unint64_t result;

  result = qword_10036F038;
  if (!qword_10036F038)
  {
    result = swift_getWitnessTable(&unk_1002CE5B0, &type metadata for CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType);
    atomic_store(result, (unint64_t *)&qword_10036F038);
  }
  return result;
}

unint64_t sub_100122B0C()
{
  unint64_t result;

  result = qword_10036F040;
  if (!qword_10036F040)
  {
    result = swift_getWitnessTable(&unk_1002CE5D8, &type metadata for CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType);
    atomic_store(result, (unint64_t *)&qword_10036F040);
  }
  return result;
}

unint64_t sub_100122B54()
{
  unint64_t result;

  result = qword_10036F048;
  if (!qword_10036F048)
  {
    result = swift_getWitnessTable(&unk_1002CE660, &type metadata for CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType);
    atomic_store(result, (unint64_t *)&qword_10036F048);
  }
  return result;
}

uint64_t sub_100122B98()
{
  return sub_10000FFB4(&qword_10036F050, &qword_10036F058);
}

unint64_t sub_100122BC0()
{
  unint64_t result;

  result = qword_10036F060;
  if (!qword_10036F060)
  {
    result = swift_getWitnessTable(&unk_1002CE6D0, &type metadata for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability);
    atomic_store(result, (unint64_t *)&qword_10036F060);
  }
  return result;
}

unint64_t sub_100122C08()
{
  unint64_t result;

  result = qword_10036F068;
  if (!qword_10036F068)
  {
    result = swift_getWitnessTable(&unk_1002CE6F8, &type metadata for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability);
    atomic_store(result, (unint64_t *)&qword_10036F068);
  }
  return result;
}

unint64_t sub_100122C50()
{
  unint64_t result;

  result = qword_10036F070;
  if (!qword_10036F070)
  {
    result = swift_getWitnessTable(&unk_1002CE780, &type metadata for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability);
    atomic_store(result, (unint64_t *)&qword_10036F070);
  }
  return result;
}

unint64_t sub_100122C98()
{
  unint64_t result;

  result = qword_10036F078;
  if (!qword_10036F078)
  {
    result = swift_getWitnessTable(&unk_1002CE7B8, &type metadata for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource);
    atomic_store(result, (unint64_t *)&qword_10036F078);
  }
  return result;
}

unint64_t sub_100122CE0()
{
  unint64_t result;

  result = qword_10036F080;
  if (!qword_10036F080)
  {
    result = swift_getWitnessTable(&unk_1002CE7E0, &type metadata for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource);
    atomic_store(result, (unint64_t *)&qword_10036F080);
  }
  return result;
}

unint64_t sub_100122D28()
{
  unint64_t result;

  result = qword_10036F088;
  if (!qword_10036F088)
  {
    result = swift_getWitnessTable(&unk_1002CE868, &type metadata for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource);
    atomic_store(result, (unint64_t *)&qword_10036F088);
  }
  return result;
}

uint64_t sub_100122D6C()
{
  return sub_10000FFB4(&qword_10036F090, &qword_10036F098);
}

uint64_t sub_100122D90()
{
  return sub_10000FFB4(&qword_10036F0A0, &qword_10036F0A8);
}

unint64_t sub_100122DB8()
{
  unint64_t result;

  result = qword_10036F0B0;
  if (!qword_10036F0B0)
  {
    result = swift_getWitnessTable(&unk_1002CE910, &type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType);
    atomic_store(result, (unint64_t *)&qword_10036F0B0);
  }
  return result;
}

unint64_t sub_100122E00()
{
  unint64_t result;

  result = qword_10036F0B8;
  if (!qword_10036F0B8)
  {
    result = swift_getWitnessTable(&unk_1002CE938, &type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType);
    atomic_store(result, (unint64_t *)&qword_10036F0B8);
  }
  return result;
}

unint64_t sub_100122E48()
{
  unint64_t result;

  result = qword_10036F0C0;
  if (!qword_10036F0C0)
  {
    result = swift_getWitnessTable(&unk_1002CE9C0, &type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType);
    atomic_store(result, (unint64_t *)&qword_10036F0C0);
  }
  return result;
}

uint64_t sub_100122E8C()
{
  return sub_10000FFB4(&qword_10036F0C8, &qword_10036F0D0);
}

unint64_t sub_100122EB4()
{
  unint64_t result;

  result = qword_10036F0D8;
  if (!qword_10036F0D8)
  {
    result = swift_getWitnessTable(&unk_1002CEA30, &type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType);
    atomic_store(result, (unint64_t *)&qword_10036F0D8);
  }
  return result;
}

unint64_t sub_100122EFC()
{
  unint64_t result;

  result = qword_10036F0E0;
  if (!qword_10036F0E0)
  {
    result = swift_getWitnessTable(&unk_1002CEA58, &type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType);
    atomic_store(result, (unint64_t *)&qword_10036F0E0);
  }
  return result;
}

unint64_t sub_100122F44()
{
  unint64_t result;

  result = qword_10036F0E8;
  if (!qword_10036F0E8)
  {
    result = swift_getWitnessTable(&unk_1002CEAE0, &type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType);
    atomic_store(result, (unint64_t *)&qword_10036F0E8);
  }
  return result;
}

uint64_t sub_100122F88()
{
  return sub_10000FFB4(&qword_10036F0F0, &qword_10036F0F8);
}

unint64_t sub_100122FB0()
{
  unint64_t result;

  result = qword_10036F100;
  if (!qword_10036F100)
  {
    result = swift_getWitnessTable(&unk_1002CEB50, &type metadata for CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType);
    atomic_store(result, (unint64_t *)&qword_10036F100);
  }
  return result;
}

unint64_t sub_100122FF8()
{
  unint64_t result;

  result = qword_10036F108;
  if (!qword_10036F108)
  {
    result = swift_getWitnessTable(&unk_1002CEB78, &type metadata for CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType);
    atomic_store(result, (unint64_t *)&qword_10036F108);
  }
  return result;
}

unint64_t sub_100123040()
{
  unint64_t result;

  result = qword_10036F110;
  if (!qword_10036F110)
  {
    result = swift_getWitnessTable(&unk_1002CEC00, &type metadata for CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType);
    atomic_store(result, (unint64_t *)&qword_10036F110);
  }
  return result;
}

uint64_t sub_100123084()
{
  return sub_10000FFB4(&qword_10036F118, &qword_10036F120);
}

unint64_t sub_1001230AC()
{
  unint64_t result;

  result = qword_10036F128;
  if (!qword_10036F128)
  {
    result = swift_getWitnessTable(&unk_1002CEC70, &type metadata for CLP_LogEntry_PrivateData_WristState.WristStateType);
    atomic_store(result, (unint64_t *)&qword_10036F128);
  }
  return result;
}

unint64_t sub_1001230F4()
{
  unint64_t result;

  result = qword_10036F130;
  if (!qword_10036F130)
  {
    result = swift_getWitnessTable(&unk_1002CEC98, &type metadata for CLP_LogEntry_PrivateData_WristState.WristStateType);
    atomic_store(result, (unint64_t *)&qword_10036F130);
  }
  return result;
}

unint64_t sub_10012313C()
{
  unint64_t result;

  result = qword_10036F138;
  if (!qword_10036F138)
  {
    result = swift_getWitnessTable(&unk_1002CED20, &type metadata for CLP_LogEntry_PrivateData_WristState.WristStateType);
    atomic_store(result, (unint64_t *)&qword_10036F138);
  }
  return result;
}

unint64_t sub_100123184()
{
  unint64_t result;

  result = qword_10036F140;
  if (!qword_10036F140)
  {
    result = swift_getWitnessTable(&unk_1002CED58, &type metadata for CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType);
    atomic_store(result, (unint64_t *)&qword_10036F140);
  }
  return result;
}

unint64_t sub_1001231CC()
{
  unint64_t result;

  result = qword_10036F148;
  if (!qword_10036F148)
  {
    result = swift_getWitnessTable(&unk_1002CED80, &type metadata for CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType);
    atomic_store(result, (unint64_t *)&qword_10036F148);
  }
  return result;
}

unint64_t sub_100123214()
{
  unint64_t result;

  result = qword_10036F150;
  if (!qword_10036F150)
  {
    result = swift_getWitnessTable(&unk_1002CEE08, &type metadata for CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType);
    atomic_store(result, (unint64_t *)&qword_10036F150);
  }
  return result;
}

uint64_t sub_100123258()
{
  return sub_10000FFB4(&qword_10036F158, &qword_10036F160);
}

uint64_t sub_10012327C()
{
  return sub_10000FFB4(&qword_10036F168, &qword_10036F170);
}

unint64_t sub_1001232A4()
{
  unint64_t result;

  result = qword_10036F178;
  if (!qword_10036F178)
  {
    result = swift_getWitnessTable(&unk_1002CEEB0, &type metadata for CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType);
    atomic_store(result, (unint64_t *)&qword_10036F178);
  }
  return result;
}

unint64_t sub_1001232EC()
{
  unint64_t result;

  result = qword_10036F180;
  if (!qword_10036F180)
  {
    result = swift_getWitnessTable(&unk_1002CEED8, &type metadata for CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType);
    atomic_store(result, (unint64_t *)&qword_10036F180);
  }
  return result;
}

unint64_t sub_100123334()
{
  unint64_t result;

  result = qword_10036F188;
  if (!qword_10036F188)
  {
    result = swift_getWitnessTable(&unk_1002CEF60, &type metadata for CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType);
    atomic_store(result, (unint64_t *)&qword_10036F188);
  }
  return result;
}

unint64_t sub_10012337C()
{
  unint64_t result;

  result = qword_10036F190;
  if (!qword_10036F190)
  {
    result = swift_getWitnessTable(&unk_1002CEF98, &type metadata for CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType);
    atomic_store(result, (unint64_t *)&qword_10036F190);
  }
  return result;
}

unint64_t sub_1001233C4()
{
  unint64_t result;

  result = qword_10036F198;
  if (!qword_10036F198)
  {
    result = swift_getWitnessTable(&unk_1002CEFC0, &type metadata for CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType);
    atomic_store(result, (unint64_t *)&qword_10036F198);
  }
  return result;
}

unint64_t sub_10012340C()
{
  unint64_t result;

  result = qword_10036F1A0;
  if (!qword_10036F1A0)
  {
    result = swift_getWitnessTable(&unk_1002CF048, &type metadata for CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType);
    atomic_store(result, (unint64_t *)&qword_10036F1A0);
  }
  return result;
}

uint64_t sub_100123450()
{
  return sub_10000FFB4(&qword_10036F1A8, &qword_10036F1B0);
}

uint64_t sub_100123474()
{
  return sub_10000FFB4(&qword_10036F1B8, &qword_10036F1C0);
}

unint64_t sub_10012349C()
{
  unint64_t result;

  result = qword_10036F1C8;
  if (!qword_10036F1C8)
  {
    result = swift_getWitnessTable(&unk_1002CF0F0, &type metadata for CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame);
    atomic_store(result, (unint64_t *)&qword_10036F1C8);
  }
  return result;
}

unint64_t sub_1001234E4()
{
  unint64_t result;

  result = qword_10036F1D0;
  if (!qword_10036F1D0)
  {
    result = swift_getWitnessTable(&unk_1002CF118, &type metadata for CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame);
    atomic_store(result, (unint64_t *)&qword_10036F1D0);
  }
  return result;
}

unint64_t sub_10012352C()
{
  unint64_t result;

  result = qword_10036F1D8;
  if (!qword_10036F1D8)
  {
    result = swift_getWitnessTable(&unk_1002CF1A0, &type metadata for CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame);
    atomic_store(result, (unint64_t *)&qword_10036F1D8);
  }
  return result;
}

uint64_t sub_100123570()
{
  return sub_10000FFB4(&qword_10036F1E0, &qword_10036F1E8);
}

uint64_t sub_100123594()
{
  return sub_10000FD38(&qword_10036F1F0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF680);
}

uint64_t sub_1001235C0()
{
  return sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
}

uint64_t sub_1001235EC()
{
  return sub_10000FD38(&qword_10036E598, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF6A8);
}

uint64_t sub_100123618()
{
  return sub_10000FD38(&qword_10036F1F8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF6E8);
}

uint64_t sub_100123644()
{
  return sub_10000FD38(&qword_10036F200, type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, (uint64_t)&unk_1002CF7E8);
}

uint64_t sub_100123670()
{
  return sub_10000FD38(&qword_10036E5A8, type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, (uint64_t)&unk_1002CF710);
}

uint64_t sub_10012369C()
{
  return sub_10000FD38(&qword_10036E5A0, type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, (uint64_t)&unk_1002CF810);
}

uint64_t sub_1001236C8()
{
  return sub_10000FD38(&qword_10036F208, type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, (uint64_t)&unk_1002CF850);
}

uint64_t sub_1001236F4()
{
  return sub_10000FD38(&qword_10036F210, type metadata accessor for CLP_LogEntry_PrivateData_Accel, (uint64_t)&unk_1002CF950);
}

uint64_t sub_100123720()
{
  return sub_10000FD38(&qword_10036F218, type metadata accessor for CLP_LogEntry_PrivateData_Accel, (uint64_t)&unk_1002CF878);
}

uint64_t sub_10012374C()
{
  return sub_10000FD38(&qword_10036E5B0, type metadata accessor for CLP_LogEntry_PrivateData_Accel, (uint64_t)&unk_1002CF978);
}

uint64_t sub_100123778()
{
  return sub_10000FD38(&qword_10036F220, type metadata accessor for CLP_LogEntry_PrivateData_Accel, (uint64_t)&unk_1002CF9B8);
}

uint64_t sub_1001237A4()
{
  return sub_10000FD38(&qword_10036F228, type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, (uint64_t)&unk_1002CFAB8);
}

uint64_t sub_1001237D0()
{
  return sub_10000FD38(&qword_10036E5C0, type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, (uint64_t)&unk_1002CF9E0);
}

uint64_t sub_1001237FC()
{
  return sub_10000FD38(&qword_10036E5B8, type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, (uint64_t)&unk_1002CFAE0);
}

uint64_t sub_100123828()
{
  return sub_10000FD38(&qword_10036F230, type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, (uint64_t)&unk_1002CFB20);
}

uint64_t sub_100123854()
{
  return sub_10000FD38(&qword_10036F238, type metadata accessor for CLP_LogEntry_PrivateData_Gyro, (uint64_t)&unk_1002CFC20);
}

uint64_t sub_100123880()
{
  return sub_10000FD38(&qword_10036F240, type metadata accessor for CLP_LogEntry_PrivateData_Gyro, (uint64_t)&unk_1002CFB48);
}

uint64_t sub_1001238AC()
{
  return sub_10000FD38(&qword_10036E5C8, type metadata accessor for CLP_LogEntry_PrivateData_Gyro, (uint64_t)&unk_1002CFC48);
}

uint64_t sub_1001238D8()
{
  return sub_10000FD38(&qword_10036F248, type metadata accessor for CLP_LogEntry_PrivateData_Gyro, (uint64_t)&unk_1002CFC88);
}

uint64_t sub_100123904()
{
  return sub_10000FD38(&qword_10036F250, type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, (uint64_t)&unk_1002CFD88);
}

uint64_t sub_100123930()
{
  return sub_10000FD38(&qword_10036E5D8, type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, (uint64_t)&unk_1002CFCB0);
}

uint64_t sub_10012395C()
{
  return sub_10000FD38(&qword_10036E5D0, type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, (uint64_t)&unk_1002CFDB0);
}

uint64_t sub_100123988()
{
  return sub_10000FD38(&qword_10036F258, type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, (uint64_t)&unk_1002CFDF0);
}

uint64_t sub_1001239B4()
{
  return sub_10000FD38(&qword_10036F260, type metadata accessor for CLP_LogEntry_PrivateData_Baro, (uint64_t)&unk_1002CFEF0);
}

uint64_t sub_1001239E0()
{
  return sub_10000FD38(&qword_10036F268, type metadata accessor for CLP_LogEntry_PrivateData_Baro, (uint64_t)&unk_1002CFE18);
}

uint64_t sub_100123A0C()
{
  return sub_10000FD38(&qword_10036E5E0, type metadata accessor for CLP_LogEntry_PrivateData_Baro, (uint64_t)&unk_1002CFF18);
}

uint64_t sub_100123A38()
{
  return sub_10000FD38(&qword_10036F270, type metadata accessor for CLP_LogEntry_PrivateData_Baro, (uint64_t)&unk_1002CFF58);
}

uint64_t sub_100123A64()
{
  return sub_10000FD38(&qword_10036F278, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, (uint64_t)&unk_1002D0058);
}

uint64_t sub_100123A90()
{
  return sub_10000FD38(&qword_10036F280, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, (uint64_t)&unk_1002CFF80);
}

uint64_t sub_100123ABC()
{
  return sub_10000FD38(&qword_10036E5E8, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, (uint64_t)&unk_1002D0080);
}

uint64_t sub_100123AE8()
{
  return sub_10000FD38(&qword_10036F288, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, (uint64_t)&unk_1002D00C0);
}

uint64_t sub_100123B14()
{
  return sub_10000FD38(&qword_10036F290, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (uint64_t)&unk_1002D01C0);
}

uint64_t sub_100123B40()
{
  return sub_10000FD38(&qword_10036E650, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (uint64_t)&unk_1002D00E8);
}

uint64_t sub_100123B6C()
{
  return sub_10000FD38(&qword_10036E5F0, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (uint64_t)&unk_1002D01E8);
}

uint64_t sub_100123B98()
{
  return sub_10000FD38(&qword_10036F298, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (uint64_t)&unk_1002D0228);
}

uint64_t sub_100123BC4()
{
  return sub_10000FD38(&qword_10036F2A0, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData, (uint64_t)&unk_1002D0378);
}

uint64_t sub_100123BF0()
{
  return sub_10000FD38(&qword_10036F2A8, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData, (uint64_t)&unk_1002D02A0);
}

uint64_t sub_100123C1C()
{
  return sub_10000FD38(&qword_10036E5F8, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData, (uint64_t)&unk_1002D03A0);
}

uint64_t sub_100123C48()
{
  return sub_10000FD38(&qword_10036F2B0, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData, (uint64_t)&unk_1002D03E0);
}

uint64_t sub_100123C74()
{
  return sub_10000FD38(&qword_10036F2B8, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample, (uint64_t)&unk_1002D04E0);
}

uint64_t sub_100123CA0()
{
  return sub_10000FD38(&qword_10036F2C0, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample, (uint64_t)&unk_1002D0408);
}

uint64_t sub_100123CCC()
{
  return sub_10000FD38(&qword_10036E600, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample, (uint64_t)&unk_1002D0508);
}

uint64_t sub_100123CF8()
{
  return sub_10000FD38(&qword_10036F2C8, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample, (uint64_t)&unk_1002D0548);
}

uint64_t sub_100123D24()
{
  return sub_10000FD38(&qword_10036F2D0, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo, (uint64_t)&unk_1002D0648);
}

uint64_t sub_100123D50()
{
  return sub_10000FD38(&qword_10036F2D8, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo, (uint64_t)&unk_1002D0570);
}

uint64_t sub_100123D7C()
{
  return sub_10000FD38(&qword_10036E608, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo, (uint64_t)&unk_1002D0670);
}

uint64_t sub_100123DA8()
{
  return sub_10000FD38(&qword_10036F2E0, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo, (uint64_t)&unk_1002D06B0);
}

uint64_t sub_100123DD4()
{
  return sub_10000FD38(&qword_10036F2E8, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (uint64_t)&unk_1002D07B0);
}

uint64_t sub_100123E00()
{
  return sub_10000FD38(&qword_10036E658, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (uint64_t)&unk_1002D06D8);
}

uint64_t sub_100123E2C()
{
  return sub_10000FD38(&qword_10036E610, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (uint64_t)&unk_1002D07D8);
}

uint64_t sub_100123E58()
{
  return sub_10000FD38(&qword_10036F2F0, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (uint64_t)&unk_1002D0818);
}

uint64_t sub_100123E84()
{
  return sub_10000FD38(&qword_10036F2F8, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, (uint64_t)&unk_1002D0A30);
}

uint64_t sub_100123EB0()
{
  return sub_10000FD38(&qword_10036F300, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, (uint64_t)&unk_1002D0958);
}

uint64_t sub_100123EDC()
{
  return sub_10000FD38(&qword_10036E618, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, (uint64_t)&unk_1002D0A58);
}

uint64_t sub_100123F08()
{
  return sub_10000FD38(&qword_10036F308, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, (uint64_t)&unk_1002D0A98);
}

uint64_t sub_100123F34()
{
  return sub_10000FD38(&qword_10036F310, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus, (uint64_t)&unk_1002D0B98);
}

uint64_t sub_100123F60()
{
  return sub_10000FD38(&qword_10036F318, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus, (uint64_t)&unk_1002D0AC0);
}

uint64_t sub_100123F8C()
{
  return sub_10000FD38(&qword_10036E620, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus, (uint64_t)&unk_1002D0BC0);
}

uint64_t sub_100123FB8()
{
  return sub_10000FD38(&qword_10036F320, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus, (uint64_t)&unk_1002D0C00);
}

uint64_t sub_100123FE4()
{
  return sub_10000FD38(&qword_10036F328, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed, (uint64_t)&unk_1002D0D00);
}

uint64_t sub_100124010()
{
  return sub_10000FD38(&qword_10036F330, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed, (uint64_t)&unk_1002D0C28);
}

uint64_t sub_10012403C()
{
  return sub_10000FD38(&qword_10036E628, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed, (uint64_t)&unk_1002D0D28);
}

uint64_t sub_100124068()
{
  return sub_10000FD38(&qword_10036F338, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed, (uint64_t)&unk_1002D0D68);
}

uint64_t sub_100124094()
{
  return sub_10000FD38(&qword_10036F340, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading, (uint64_t)&unk_1002D0E68);
}

uint64_t sub_1001240C0()
{
  return sub_10000FD38(&qword_10036F348, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading, (uint64_t)&unk_1002D0D90);
}

uint64_t sub_1001240EC()
{
  return sub_10000FD38(&qword_10036E630, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading, (uint64_t)&unk_1002D0E90);
}

uint64_t sub_100124118()
{
  return sub_10000FD38(&qword_10036F350, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading, (uint64_t)&unk_1002D0ED0);
}

uint64_t sub_100124144()
{
  return sub_10000FD38(&qword_10036F358, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable, (uint64_t)&unk_1002D0FD0);
}

uint64_t sub_100124170()
{
  return sub_10000FD38(&qword_10036F360, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable, (uint64_t)&unk_1002D0EF8);
}

uint64_t sub_10012419C()
{
  return sub_10000FD38(&qword_10036E638, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable, (uint64_t)&unk_1002D0FF8);
}

uint64_t sub_1001241C8()
{
  return sub_10000FD38(&qword_10036F368, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable, (uint64_t)&unk_1002D1038);
}

uint64_t sub_1001241F4()
{
  return sub_10000FD38(&qword_10036F370, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed, (uint64_t)&unk_1002D1138);
}

uint64_t sub_100124220()
{
  return sub_10000FD38(&qword_10036F378, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed, (uint64_t)&unk_1002D1060);
}

uint64_t sub_10012424C()
{
  return sub_10000FD38(&qword_10036E640, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed, (uint64_t)&unk_1002D1160);
}

uint64_t sub_100124278()
{
  return sub_10000FD38(&qword_10036F380, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed, (uint64_t)&unk_1002D11A0);
}

uint64_t sub_1001242A4()
{
  return sub_10000FD38(&qword_10036F388, type metadata accessor for CLP_LogEntry_PrivateData_Location, (uint64_t)&unk_1002D12A0);
}

uint64_t sub_1001242D0()
{
  return sub_10000FD38(&qword_10036F390, type metadata accessor for CLP_LogEntry_PrivateData_Location, (uint64_t)&unk_1002D11C8);
}

uint64_t sub_1001242FC()
{
  return sub_10000FD38(&qword_10036E648, type metadata accessor for CLP_LogEntry_PrivateData_Location, (uint64_t)&unk_1002D12C8);
}

uint64_t sub_100124328()
{
  return sub_10000FD38(&qword_10036F398, type metadata accessor for CLP_LogEntry_PrivateData_Location, (uint64_t)&unk_1002D1308);
}

uint64_t sub_100124354()
{
  return sub_10000FD38(&qword_10036F3A0, type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations, (uint64_t)&unk_1002D1458);
}

uint64_t sub_100124380()
{
  return sub_10000FD38(&qword_10036F3A8, type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations, (uint64_t)&unk_1002D1380);
}

uint64_t sub_1001243AC()
{
  return sub_10000FD38(&qword_10036E660, type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations, (uint64_t)&unk_1002D1480);
}

uint64_t sub_1001243D8()
{
  return sub_10000FD38(&qword_10036F3B0, type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations, (uint64_t)&unk_1002D14C0);
}

uint64_t sub_100124404()
{
  return sub_10000FD38(&qword_10036F3B8, type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate, (uint64_t)&unk_1002D15C0);
}

uint64_t sub_100124430()
{
  return sub_10000FD38(&qword_10036F3C0, type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate, (uint64_t)&unk_1002D14E8);
}

uint64_t sub_10012445C()
{
  return sub_10000FD38(&qword_10036E668, type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate, (uint64_t)&unk_1002D15E8);
}

uint64_t sub_100124488()
{
  return sub_10000FD38(&qword_10036F3C8, type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate, (uint64_t)&unk_1002D1628);
}

uint64_t sub_1001244B4()
{
  return sub_10000FD38(&qword_10036F3D0, type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl, (uint64_t)&unk_1002D1728);
}

uint64_t sub_1001244E0()
{
  return sub_10000FD38(&qword_10036F3D8, type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl, (uint64_t)&unk_1002D1650);
}

uint64_t sub_10012450C()
{
  return sub_10000FD38(&qword_10036E670, type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl, (uint64_t)&unk_1002D1750);
}

uint64_t sub_100124538()
{
  return sub_10000FD38(&qword_10036F3E0, type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl, (uint64_t)&unk_1002D1790);
}

uint64_t sub_100124564()
{
  return sub_10000FD38(&qword_10036F3E8, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, (uint64_t)&unk_1002D1890);
}

uint64_t sub_100124590()
{
  return sub_10000FD38(&qword_10036F3F0, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, (uint64_t)&unk_1002D17B8);
}

uint64_t sub_1001245BC()
{
  return sub_10000FD38(&qword_10036E678, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, (uint64_t)&unk_1002D18B8);
}

uint64_t sub_1001245E8()
{
  return sub_10000FD38(&qword_10036F3F8, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, (uint64_t)&unk_1002D18F8);
}

uint64_t sub_100124614()
{
  return sub_10000FD38(&qword_10036F400, type metadata accessor for CLP_LogEntry_PrivateData_MotionState, (uint64_t)&unk_1002D1A70);
}

uint64_t sub_100124640()
{
  return sub_10000FD38(&qword_10036F408, type metadata accessor for CLP_LogEntry_PrivateData_MotionState, (uint64_t)&unk_1002D1998);
}

uint64_t sub_10012466C()
{
  return sub_10000FD38(&qword_10036E680, type metadata accessor for CLP_LogEntry_PrivateData_MotionState, (uint64_t)&unk_1002D1A98);
}

uint64_t sub_100124698()
{
  return sub_10000FD38(&qword_10036F410, type metadata accessor for CLP_LogEntry_PrivateData_MotionState, (uint64_t)&unk_1002D1AD8);
}

uint64_t sub_1001246C4()
{
  return sub_10000FD38(&qword_10036F418, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, (uint64_t)&unk_1002D1BD8);
}

uint64_t sub_1001246F0()
{
  return sub_10000FD38(&qword_10036F420, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, (uint64_t)&unk_1002D1B00);
}

uint64_t sub_10012471C()
{
  return sub_10000FD38(&qword_10036E688, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, (uint64_t)&unk_1002D1C00);
}

uint64_t sub_100124748()
{
  return sub_10000FD38(&qword_10036F428, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, (uint64_t)&unk_1002D1C40);
}

uint64_t sub_100124774()
{
  return sub_10000FD38(&qword_10036F430, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, (uint64_t)&unk_1002D1D40);
}

uint64_t sub_1001247A0()
{
  return sub_10000FD38(&qword_10036F438, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, (uint64_t)&unk_1002D1C68);
}

uint64_t sub_1001247CC()
{
  return sub_10000FD38(&qword_10036E690, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, (uint64_t)&unk_1002D1D68);
}

uint64_t sub_1001247F8()
{
  return sub_10000FD38(&qword_10036F440, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, (uint64_t)&unk_1002D1DA8);
}

uint64_t sub_100124824()
{
  return sub_10000FD38(&qword_10036F448, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings, (uint64_t)&unk_1002D1EA8);
}

uint64_t sub_100124850()
{
  return sub_10000FD38(&qword_10036F450, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings, (uint64_t)&unk_1002D1DD0);
}

uint64_t sub_10012487C()
{
  return sub_10000FD38(&qword_10036E698, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings, (uint64_t)&unk_1002D1ED0);
}

uint64_t sub_1001248A8()
{
  return sub_10000FD38(&qword_10036F458, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings, (uint64_t)&unk_1002D1F10);
}

uint64_t sub_1001248D4()
{
  return sub_10000FD38(&qword_10036F460, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, (uint64_t)&unk_1002D2088);
}

uint64_t sub_100124900()
{
  return sub_10000FD38(&qword_10036F468, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, (uint64_t)&unk_1002D1FB0);
}

uint64_t sub_10012492C()
{
  return sub_10000FD38(&qword_10036E6A0, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, (uint64_t)&unk_1002D20B0);
}

uint64_t sub_100124958()
{
  return sub_10000FD38(&qword_10036F470, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, (uint64_t)&unk_1002D20F0);
}

uint64_t sub_100124984()
{
  return sub_10000FD38(&qword_10036F478, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, (uint64_t)&unk_1002D2218);
}

uint64_t sub_1001249B0()
{
  return sub_10000FD38(&qword_10036F480, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, (uint64_t)&unk_1002D2140);
}

uint64_t sub_1001249DC()
{
  return sub_10000FD38(&qword_10036E6A8, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, (uint64_t)&unk_1002D2240);
}

uint64_t sub_100124A08()
{
  return sub_10000FD38(&qword_10036F488, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, (uint64_t)&unk_1002D2280);
}

uint64_t sub_100124A34()
{
  return sub_10000FD38(&qword_10036F490, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, (uint64_t)&unk_1002D2380);
}

uint64_t sub_100124A60()
{
  return sub_10000FD38(&qword_10036F498, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, (uint64_t)&unk_1002D22A8);
}

uint64_t sub_100124A8C()
{
  return sub_10000FD38(&qword_10036E6B0, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, (uint64_t)&unk_1002D23A8);
}

uint64_t sub_100124AB8()
{
  return sub_10000FD38(&qword_10036F4A0, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, (uint64_t)&unk_1002D23E8);
}

uint64_t sub_100124AE4()
{
  return sub_10000FD38(&qword_10036F4A8, type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, (uint64_t)&unk_1002D2538);
}

uint64_t sub_100124B10()
{
  return sub_10000FD38(&qword_10036F4B0, type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, (uint64_t)&unk_1002D2460);
}

uint64_t sub_100124B3C()
{
  return sub_10000FD38(&qword_10036E6B8, type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, (uint64_t)&unk_1002D2560);
}

uint64_t sub_100124B68()
{
  return sub_10000FD38(&qword_10036F4B8, type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, (uint64_t)&unk_1002D25A0);
}

uint64_t sub_100124B94()
{
  return sub_10000FD38(&qword_10036F4C0, type metadata accessor for CLP_LogEntry_PrivateData_Timer, (uint64_t)&unk_1002D26A0);
}

uint64_t sub_100124BC0()
{
  return sub_10000FD38(&qword_10036F4C8, type metadata accessor for CLP_LogEntry_PrivateData_Timer, (uint64_t)&unk_1002D25C8);
}

uint64_t sub_100124BEC()
{
  return sub_10000FD38(&qword_10036E6C0, type metadata accessor for CLP_LogEntry_PrivateData_Timer, (uint64_t)&unk_1002D26C8);
}

uint64_t sub_100124C18()
{
  return sub_10000FD38(&qword_10036F4D0, type metadata accessor for CLP_LogEntry_PrivateData_Timer, (uint64_t)&unk_1002D2708);
}

uint64_t sub_100124C44()
{
  return sub_10000FD38(&qword_10036F4D8, type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, (uint64_t)&unk_1002D2808);
}

uint64_t sub_100124C70()
{
  return sub_10000FD38(&qword_10036F4E0, type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, (uint64_t)&unk_1002D2730);
}

uint64_t sub_100124C9C()
{
  return sub_10000FD38(&qword_10036E6C8, type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, (uint64_t)&unk_1002D2830);
}

uint64_t sub_100124CC8()
{
  return sub_10000FD38(&qword_10036F4E8, type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, (uint64_t)&unk_1002D2870);
}

uint64_t sub_100124CF4()
{
  return sub_10000FD38(&qword_10036F4F0, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, (uint64_t)&unk_1002D2970);
}

uint64_t sub_100124D20()
{
  return sub_10000FD38(&qword_10036F4F8, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, (uint64_t)&unk_1002D2898);
}

uint64_t sub_100124D4C()
{
  return sub_10000FD38(&qword_10036E6D0, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, (uint64_t)&unk_1002D2998);
}

uint64_t sub_100124D78()
{
  return sub_10000FD38(&qword_10036F500, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, (uint64_t)&unk_1002D29D8);
}

uint64_t sub_100124DA4()
{
  return sub_10000FD38(&qword_10036F508, type metadata accessor for CLP_LogEntry_PrivateData_MapVector, (uint64_t)&unk_1002D2AD8);
}

uint64_t sub_100124DD0()
{
  return sub_10000FD38(&qword_10036F510, type metadata accessor for CLP_LogEntry_PrivateData_MapVector, (uint64_t)&unk_1002D2A00);
}

uint64_t sub_100124DFC()
{
  return sub_10000FD38(&qword_10036E6D8, type metadata accessor for CLP_LogEntry_PrivateData_MapVector, (uint64_t)&unk_1002D2B00);
}

uint64_t sub_100124E28()
{
  return sub_10000FD38(&qword_10036F518, type metadata accessor for CLP_LogEntry_PrivateData_MapVector, (uint64_t)&unk_1002D2B40);
}

uint64_t sub_100124E54()
{
  return sub_10000FD38(&qword_10036F520, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, (uint64_t)&unk_1002D2C40);
}

uint64_t sub_100124E80()
{
  return sub_10000FD38(&qword_10036F528, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, (uint64_t)&unk_1002D2B68);
}

uint64_t sub_100124EAC()
{
  return sub_10000FD38(&qword_10036E6E0, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, (uint64_t)&unk_1002D2C68);
}

uint64_t sub_100124ED8()
{
  return sub_10000FD38(&qword_10036F530, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, (uint64_t)&unk_1002D2CA8);
}

uint64_t sub_100124F04()
{
  return sub_10000FD38(&qword_10036F538, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, (uint64_t)&unk_1002D2DA8);
}

uint64_t sub_100124F30()
{
  return sub_10000FD38(&qword_10036F540, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, (uint64_t)&unk_1002D2CD0);
}

uint64_t sub_100124F5C()
{
  return sub_10000FD38(&qword_10036E6E8, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, (uint64_t)&unk_1002D2DD0);
}

uint64_t sub_100124F88()
{
  return sub_10000FD38(&qword_10036F548, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, (uint64_t)&unk_1002D2E10);
}

uint64_t sub_100124FB4()
{
  return sub_10000FD38(&qword_10036F550, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (uint64_t)&unk_1002D2F10);
}

uint64_t sub_100124FE0()
{
  return sub_10000FD38(&qword_10036F558, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (uint64_t)&unk_1002D2E38);
}

uint64_t sub_10012500C()
{
  return sub_10000FD38(&qword_10036E6F0, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (uint64_t)&unk_1002D2F38);
}

uint64_t sub_100125038()
{
  return sub_10000FD38(&qword_10036F560, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (uint64_t)&unk_1002D2F78);
}

uint64_t sub_100125064()
{
  return sub_10000FD38(&qword_10036F568, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, (uint64_t)&unk_1002D3078);
}

uint64_t sub_100125090()
{
  return sub_10000FD38(&qword_10036F570, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, (uint64_t)&unk_1002D2FA0);
}

uint64_t sub_1001250BC()
{
  return sub_10000FD38(&qword_10036E6F8, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, (uint64_t)&unk_1002D30A0);
}

uint64_t sub_1001250E8()
{
  return sub_10000FD38(&qword_10036F578, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, (uint64_t)&unk_1002D30E0);
}

uint64_t sub_100125114()
{
  return sub_10000FD38(&qword_10036F580, type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData, (uint64_t)&unk_1002D31E0);
}

uint64_t sub_100125140()
{
  return sub_10000FD38(&qword_10036E708, type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData, (uint64_t)&unk_1002D3108);
}

uint64_t sub_10012516C()
{
  return sub_10000FD38(&qword_10036E700, type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData, (uint64_t)&unk_1002D3208);
}

uint64_t sub_100125198()
{
  return sub_10000FD38(&qword_10036F588, type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData, (uint64_t)&unk_1002D3248);
}

uint64_t sub_1001251C4()
{
  return sub_10000FD38(&qword_10036F590, type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, (uint64_t)&unk_1002D3348);
}

uint64_t sub_1001251F0()
{
  return sub_10000FD38(&qword_10036F598, type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, (uint64_t)&unk_1002D3270);
}

uint64_t sub_10012521C()
{
  return sub_10000FD38(&qword_10036E710, type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, (uint64_t)&unk_1002D3370);
}

uint64_t sub_100125248()
{
  return sub_10000FD38(&qword_10036F5A0, type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, (uint64_t)&unk_1002D33B0);
}

uint64_t sub_100125274()
{
  return sub_10000FD38(&qword_10036F5A8, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, (uint64_t)&unk_1002D34D8);
}

uint64_t sub_1001252A0()
{
  return sub_10000FD38(&qword_10036F5B0, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, (uint64_t)&unk_1002D3400);
}

uint64_t sub_1001252CC()
{
  return sub_10000FD38(&qword_10036E718, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, (uint64_t)&unk_1002D3500);
}

uint64_t sub_1001252F8()
{
  return sub_10000FD38(&qword_10036F5B8, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, (uint64_t)&unk_1002D3540);
}

uint64_t sub_100125324()
{
  return sub_10000FD38(&qword_10036F5C0, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState, (uint64_t)&unk_1002D3690);
}

uint64_t sub_100125350()
{
  return sub_10000FD38(&qword_10036F5C8, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState, (uint64_t)&unk_1002D35B8);
}

uint64_t sub_10012537C()
{
  return sub_10000FD38(&qword_10036E720, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState, (uint64_t)&unk_1002D36B8);
}

uint64_t sub_1001253A8()
{
  return sub_10000FD38(&qword_10036F5D0, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState, (uint64_t)&unk_1002D36F8);
}

uint64_t sub_1001253D4()
{
  return sub_10000FD38(&qword_10036F5D8, type metadata accessor for CLP_LogEntry_PrivateData_Battery, (uint64_t)&unk_1002D37F8);
}

uint64_t sub_100125400()
{
  return sub_10000FD38(&qword_10036F5E0, type metadata accessor for CLP_LogEntry_PrivateData_Battery, (uint64_t)&unk_1002D3720);
}

uint64_t sub_10012542C()
{
  return sub_10000FD38(&qword_10036E728, type metadata accessor for CLP_LogEntry_PrivateData_Battery, (uint64_t)&unk_1002D3820);
}

uint64_t sub_100125458()
{
  return sub_10000FD38(&qword_10036F5E8, type metadata accessor for CLP_LogEntry_PrivateData_Battery, (uint64_t)&unk_1002D3860);
}

uint64_t sub_100125484()
{
  return sub_10000FD38(&qword_10036F5F0, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (uint64_t)&unk_1002D3960);
}

uint64_t sub_1001254B0()
{
  return sub_10000FD38(&qword_10036F5F8, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (uint64_t)&unk_1002D3888);
}

uint64_t sub_1001254DC()
{
  return sub_10000FD38(&qword_10036E730, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (uint64_t)&unk_1002D3988);
}

uint64_t sub_100125508()
{
  return sub_10000FD38(&qword_10036F600, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (uint64_t)&unk_1002D39C8);
}

uint64_t sub_100125534()
{
  return sub_10000FD38(&qword_10036F608, type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment, (uint64_t)&unk_1002D3AF0);
}

uint64_t sub_100125560()
{
  return sub_10000FD38(&qword_10036F610, type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment, (uint64_t)&unk_1002D3A18);
}

uint64_t sub_10012558C()
{
  return sub_10000FD38(&qword_10036E738, type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment, (uint64_t)&unk_1002D3B18);
}

uint64_t sub_1001255B8()
{
  return sub_10000FD38(&qword_10036F618, type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment, (uint64_t)&unk_1002D3B58);
}

uint64_t sub_1001255E4()
{
  return sub_10000FD38(&qword_10036F620, type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo, (uint64_t)&unk_1002D3C80);
}

uint64_t sub_100125610()
{
  return sub_10000FD38(&qword_10036F628, type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo, (uint64_t)&unk_1002D3BA8);
}

uint64_t sub_10012563C()
{
  return sub_10000FD38(&qword_10036E740, type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo, (uint64_t)&unk_1002D3CA8);
}

uint64_t sub_100125668()
{
  return sub_10000FD38(&qword_10036F630, type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo, (uint64_t)&unk_1002D3CE8);
}

uint64_t sub_100125694()
{
  return sub_10000FD38(&qword_10036F638, type metadata accessor for CLP_LogEntry_PrivateData_MagSample, (uint64_t)&unk_1002D3DE8);
}

uint64_t sub_1001256C0()
{
  return sub_10000FD38(&qword_10036E750, type metadata accessor for CLP_LogEntry_PrivateData_MagSample, (uint64_t)&unk_1002D3D10);
}

uint64_t sub_1001256EC()
{
  return sub_10000FD38(&qword_10036E748, type metadata accessor for CLP_LogEntry_PrivateData_MagSample, (uint64_t)&unk_1002D3E10);
}

uint64_t sub_100125718()
{
  return sub_10000FD38(&qword_10036F640, type metadata accessor for CLP_LogEntry_PrivateData_MagSample, (uint64_t)&unk_1002D3E50);
}

uint64_t sub_100125744()
{
  return sub_10000FD38(&qword_10036F648, type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer, (uint64_t)&unk_1002D3F50);
}

uint64_t sub_100125770()
{
  return sub_10000FD38(&qword_10036F650, type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer, (uint64_t)&unk_1002D3E78);
}

uint64_t sub_10012579C()
{
  return sub_10000FD38(&qword_10036E758, type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer, (uint64_t)&unk_1002D3F78);
}

uint64_t sub_1001257C8()
{
  return sub_10000FD38(&qword_10036F658, type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer, (uint64_t)&unk_1002D3FB8);
}

uint64_t sub_1001257F4()
{
  return sub_10000FD38(&qword_10036F660, type metadata accessor for CLP_LogEntry_PrivateData_Reset, (uint64_t)&unk_1002D40B8);
}

uint64_t sub_100125820()
{
  return sub_10000FD38(&qword_10036F668, type metadata accessor for CLP_LogEntry_PrivateData_Reset, (uint64_t)&unk_1002D3FE0);
}

uint64_t sub_10012584C()
{
  return sub_10000FD38(&qword_10036E760, type metadata accessor for CLP_LogEntry_PrivateData_Reset, (uint64_t)&unk_1002D40E0);
}

uint64_t sub_100125878()
{
  return sub_10000FD38(&qword_10036F670, type metadata accessor for CLP_LogEntry_PrivateData_Reset, (uint64_t)&unk_1002D4120);
}

uint64_t sub_1001258A4()
{
  return sub_10000FD38(&qword_10036F678, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace, (uint64_t)&unk_1002D4220);
}

uint64_t sub_1001258D0()
{
  return sub_10000FD38(&qword_10036F680, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace, (uint64_t)&unk_1002D4148);
}

uint64_t sub_1001258FC()
{
  return sub_10000FD38(&qword_10036E768, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace, (uint64_t)&unk_1002D4248);
}

uint64_t sub_100125928()
{
  return sub_10000FD38(&qword_10036F688, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace, (uint64_t)&unk_1002D4288);
}

uint64_t sub_100125954()
{
  return sub_10000FD38(&qword_10036F690, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState, (uint64_t)&unk_1002D4388);
}

uint64_t sub_100125980()
{
  return sub_10000FD38(&qword_10036F698, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState, (uint64_t)&unk_1002D42B0);
}

uint64_t sub_1001259AC()
{
  return sub_10000FD38(&qword_10036E770, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState, (uint64_t)&unk_1002D43B0);
}

uint64_t sub_1001259D8()
{
  return sub_10000FD38(&qword_10036F6A0, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState, (uint64_t)&unk_1002D43F0);
}

uint64_t sub_100125A04()
{
  return sub_10000FD38(&qword_10036F6A8, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (uint64_t)&unk_1002D44F0);
}

uint64_t sub_100125A30()
{
  return sub_10000FD38(&qword_10036F6B0, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (uint64_t)&unk_1002D4418);
}

uint64_t sub_100125A5C()
{
  return sub_10000FD38(&qword_10036E778, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (uint64_t)&unk_1002D4518);
}

uint64_t sub_100125A88()
{
  return sub_10000FD38(&qword_10036F6B8, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (uint64_t)&unk_1002D4558);
}

uint64_t sub_100125AB4()
{
  return sub_10000FD38(&qword_10036F6C0, type metadata accessor for CLP_LogEntry_PrivateData_StepCount, (uint64_t)&unk_1002D4680);
}

uint64_t sub_100125AE0()
{
  return sub_10000FD38(&qword_10036F6C8, type metadata accessor for CLP_LogEntry_PrivateData_StepCount, (uint64_t)&unk_1002D45A8);
}

uint64_t sub_100125B0C()
{
  return sub_10000FD38(&qword_10036E780, type metadata accessor for CLP_LogEntry_PrivateData_StepCount, (uint64_t)&unk_1002D46A8);
}

uint64_t sub_100125B38()
{
  return sub_10000FD38(&qword_10036F6D0, type metadata accessor for CLP_LogEntry_PrivateData_StepCount, (uint64_t)&unk_1002D46E8);
}

uint64_t sub_100125B64()
{
  return sub_10000FD38(&qword_10036F6D8, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3, (uint64_t)&unk_1002D47E8);
}

uint64_t sub_100125B90()
{
  return sub_10000FD38(&qword_10036F6E0, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3, (uint64_t)&unk_1002D4710);
}

uint64_t sub_100125BBC()
{
  return sub_10000FD38(&qword_10036E788, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3, (uint64_t)&unk_1002D4810);
}

uint64_t sub_100125BE8()
{
  return sub_10000FD38(&qword_10036F6E8, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3, (uint64_t)&unk_1002D4850);
}

uint64_t sub_100125C14()
{
  return sub_10000FD38(&qword_10036F6F0, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, (uint64_t)&unk_1002D4950);
}

uint64_t sub_100125C40()
{
  return sub_10000FD38(&qword_10036F6F8, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, (uint64_t)&unk_1002D4878);
}

uint64_t sub_100125C6C()
{
  return sub_10000FD38(&qword_10036E790, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, (uint64_t)&unk_1002D4978);
}

uint64_t sub_100125C98()
{
  return sub_10000FD38(&qword_10036F700, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, (uint64_t)&unk_1002D49B8);
}

uint64_t sub_100125CC4()
{
  return sub_10000FD38(&qword_10036F708, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, (uint64_t)&unk_1002D4AB8);
}

uint64_t sub_100125CF0()
{
  return sub_10000FD38(&qword_10036F710, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, (uint64_t)&unk_1002D49E0);
}

uint64_t sub_100125D1C()
{
  return sub_10000FD38(&qword_10036E798, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, (uint64_t)&unk_1002D4AE0);
}

uint64_t sub_100125D48()
{
  return sub_10000FD38(&qword_10036F718, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, (uint64_t)&unk_1002D4B20);
}

uint64_t sub_100125D74()
{
  return sub_10000FD38(&qword_10036F720, type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, (uint64_t)&unk_1002D4C20);
}

uint64_t sub_100125DA0()
{
  return sub_10000FD38(&qword_10036E7A8, type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, (uint64_t)&unk_1002D4B48);
}

uint64_t sub_100125DCC()
{
  return sub_10000FD38(&qword_10036E7A0, type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, (uint64_t)&unk_1002D4C48);
}

uint64_t sub_100125DF8()
{
  return sub_10000FD38(&qword_10036F728, type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, (uint64_t)&unk_1002D4C88);
}

uint64_t sub_100125E24()
{
  return sub_10000FD38(&qword_10036F730, type metadata accessor for CLP_LogEntry_PrivateData_Compass, (uint64_t)&unk_1002D4D88);
}

uint64_t sub_100125E50()
{
  return sub_10000FD38(&qword_10036F738, type metadata accessor for CLP_LogEntry_PrivateData_Compass, (uint64_t)&unk_1002D4CB0);
}

uint64_t sub_100125E7C()
{
  return sub_10000FD38(&qword_10036E7B0, type metadata accessor for CLP_LogEntry_PrivateData_Compass, (uint64_t)&unk_1002D4DB0);
}

uint64_t sub_100125EA8()
{
  return sub_10000FD38(&qword_10036F740, type metadata accessor for CLP_LogEntry_PrivateData_Compass, (uint64_t)&unk_1002D4DF0);
}

uint64_t sub_100125ED4()
{
  return sub_10000FD38(&qword_10036F748, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, (uint64_t)&unk_1002D4EF0);
}

uint64_t sub_100125F00()
{
  return sub_10000FD38(&qword_10036F750, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, (uint64_t)&unk_1002D4E18);
}

uint64_t sub_100125F2C()
{
  return sub_10000FD38(&qword_10036E7B8, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, (uint64_t)&unk_1002D4F18);
}

uint64_t sub_100125F58()
{
  return sub_10000FD38(&qword_10036F758, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, (uint64_t)&unk_1002D4F58);
}

uint64_t sub_100125F84()
{
  return sub_10000FD38(&qword_10036F760, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus, (uint64_t)&unk_1002D5058);
}

uint64_t sub_100125FB0()
{
  return sub_10000FD38(&qword_10036F768, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus, (uint64_t)&unk_1002D4F80);
}

uint64_t sub_100125FDC()
{
  return sub_10000FD38(&qword_10036E7C0, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus, (uint64_t)&unk_1002D5080);
}

uint64_t sub_100126008()
{
  return sub_10000FD38(&qword_10036F770, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus, (uint64_t)&unk_1002D50C0);
}

uint64_t sub_100126034()
{
  return sub_10000FD38(&qword_10036F778, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, (uint64_t)&unk_1002D51C0);
}

uint64_t sub_100126060()
{
  return sub_10000FD38(&qword_10036E7D0, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, (uint64_t)&unk_1002D50E8);
}

uint64_t sub_10012608C()
{
  return sub_10000FD38(&qword_10036E7C8, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, (uint64_t)&unk_1002D51E8);
}

uint64_t sub_1001260B8()
{
  return sub_10000FD38(&qword_10036F780, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, (uint64_t)&unk_1002D5228);
}

uint64_t sub_1001260E4()
{
  return sub_10000FD38(&qword_10036F788, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion, (uint64_t)&unk_1002D5328);
}

uint64_t sub_100126110()
{
  return sub_10000FD38(&qword_10036F790, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion, (uint64_t)&unk_1002D5250);
}

uint64_t sub_10012613C()
{
  return sub_10000FD38(&qword_10036E7D8, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion, (uint64_t)&unk_1002D5350);
}

uint64_t sub_100126168()
{
  return sub_10000FD38(&qword_10036F798, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion, (uint64_t)&unk_1002D5390);
}

uint64_t sub_100126194()
{
  return sub_10000FD38(&qword_10036F7A0, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, (uint64_t)&unk_1002D5490);
}

uint64_t sub_1001261C0()
{
  return sub_10000FD38(&qword_10036F7A8, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, (uint64_t)&unk_1002D53B8);
}

uint64_t sub_1001261EC()
{
  return sub_10000FD38(&qword_10036E7E0, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, (uint64_t)&unk_1002D54B8);
}

uint64_t sub_100126218()
{
  return sub_10000FD38(&qword_10036F7B0, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, (uint64_t)&unk_1002D54F8);
}

uint64_t sub_100126244()
{
  return sub_10000FD38(&qword_10036F7B8, type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData, (uint64_t)&unk_1002D55F8);
}

uint64_t sub_100126270()
{
  return sub_10000FD38(&qword_10036F7C0, type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData, (uint64_t)&unk_1002D5520);
}

uint64_t sub_10012629C()
{
  return sub_10000FD38(&qword_10036E7E8, type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData, (uint64_t)&unk_1002D5620);
}

uint64_t sub_1001262C8()
{
  return sub_10000FD38(&qword_10036F7C8, type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData, (uint64_t)&unk_1002D5660);
}

uint64_t sub_1001262F4()
{
  return sub_10000FD38(&qword_10036F7D0, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, (uint64_t)&unk_1002D5760);
}

uint64_t sub_100126320()
{
  return sub_10000FD38(&qword_10036E1B0, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, (uint64_t)&unk_1002D5688);
}

uint64_t sub_10012634C()
{
  return sub_10000FD38(&qword_10036E7F0, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, (uint64_t)&unk_1002D5788);
}

uint64_t sub_100126378()
{
  return sub_10000FD38(&qword_10036F7D8, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, (uint64_t)&unk_1002D57C8);
}

uint64_t sub_1001263A4()
{
  return sub_10000FD38(&qword_10036F7E0, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState, (uint64_t)&unk_1002D58C8);
}

uint64_t sub_1001263D0()
{
  return sub_10000FD38(&qword_10036F7E8, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState, (uint64_t)&unk_1002D57F0);
}

uint64_t sub_1001263FC()
{
  return sub_10000FD38(&qword_10036E7F8, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState, (uint64_t)&unk_1002D58F0);
}

uint64_t sub_100126428()
{
  return sub_10000FD38(&qword_10036F7F0, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState, (uint64_t)&unk_1002D5930);
}

uint64_t sub_100126454()
{
  return sub_10000FD38(&qword_10036F7F8, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, (uint64_t)&unk_1002D5A30);
}

uint64_t sub_100126480()
{
  return sub_10000FD38(&qword_10036E1B8, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, (uint64_t)&unk_1002D5958);
}

uint64_t sub_1001264AC()
{
  return sub_10000FD38(&qword_10036E800, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, (uint64_t)&unk_1002D5A58);
}

uint64_t sub_1001264D8()
{
  return sub_10000FD38(&qword_10036F800, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, (uint64_t)&unk_1002D5A98);
}

uint64_t sub_100126504()
{
  return sub_10000FD38(&qword_10036F808, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, (uint64_t)&unk_1002D5B98);
}

uint64_t sub_100126530()
{
  return sub_10000FD38(&qword_100369EA8, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, (uint64_t)&unk_1002D5AC0);
}

uint64_t sub_10012655C()
{
  return sub_10000FD38(&qword_10036E808, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, (uint64_t)&unk_1002D5BC0);
}

uint64_t sub_100126588()
{
  return sub_10000FD38(&qword_10036A678, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, (uint64_t)&unk_1002D5C00);
}

uint64_t sub_1001265B4()
{
  return sub_10000FD38(&qword_10036F810, type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, (uint64_t)&unk_1002D5D00);
}

uint64_t sub_1001265E0()
{
  return sub_10000FD38(&qword_10036F818, type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, (uint64_t)&unk_1002D5C28);
}

uint64_t sub_10012660C()
{
  return sub_10000FD38(&qword_10036E810, type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, (uint64_t)&unk_1002D5D28);
}

uint64_t sub_100126638()
{
  return sub_10000FD38(&qword_10036F820, type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, (uint64_t)&unk_1002D5D68);
}

uint64_t sub_100126664()
{
  return sub_10000FD38(&qword_10036F828, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, (uint64_t)&unk_1002D5EB8);
}

uint64_t sub_100126690()
{
  return sub_10000FD38(&qword_10036E820, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, (uint64_t)&unk_1002D5DE0);
}

uint64_t sub_1001266BC()
{
  return sub_10000FD38(&qword_10036E818, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, (uint64_t)&unk_1002D5EE0);
}

uint64_t sub_1001266E8()
{
  return sub_10000FD38(&qword_10036F830, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, (uint64_t)&unk_1002D5F20);
}

uint64_t sub_100126714()
{
  return sub_10000FD38(&qword_10036F838, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, (uint64_t)&unk_1002D6020);
}

uint64_t sub_100126740()
{
  return sub_10000FD38(&qword_10036E830, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, (uint64_t)&unk_1002D5F48);
}

uint64_t sub_10012676C()
{
  return sub_10000FD38(&qword_10036E828, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, (uint64_t)&unk_1002D6048);
}

uint64_t sub_100126798()
{
  return sub_10000FD38(&qword_10036F840, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, (uint64_t)&unk_1002D6088);
}

uint64_t sub_1001267C4()
{
  return sub_10000FD38(&qword_10036F848, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding, (uint64_t)&unk_1002D6188);
}

uint64_t sub_1001267F0()
{
  return sub_10000FD38(&qword_10036E840, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding, (uint64_t)&unk_1002D60B0);
}

uint64_t sub_10012681C()
{
  return sub_10000FD38(&qword_10036E838, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding, (uint64_t)&unk_1002D61B0);
}

uint64_t sub_100126848()
{
  return sub_10000FD38(&qword_10036F850, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding, (uint64_t)&unk_1002D61F0);
}

uint64_t sub_100126874()
{
  return sub_10000FD38(&qword_10036F858, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, (uint64_t)&unk_1002D62F0);
}

uint64_t sub_1001268A0()
{
  return sub_10000FD38(&qword_10036F860, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, (uint64_t)&unk_1002D6218);
}

uint64_t sub_1001268CC()
{
  return sub_10000FD38(&qword_10036E848, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, (uint64_t)&unk_1002D6318);
}

uint64_t sub_1001268F8()
{
  return sub_10000FD38(&qword_10036F868, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, (uint64_t)&unk_1002D6358);
}

uint64_t sub_100126924()
{
  return sub_10000FD38(&qword_10036F870, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch, (uint64_t)&unk_1002D6458);
}

uint64_t sub_100126950()
{
  return sub_10000FD38(&qword_10036E860, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch, (uint64_t)&unk_1002D6380);
}

uint64_t sub_10012697C()
{
  return sub_10000FD38(&qword_10036E850, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch, (uint64_t)&unk_1002D6480);
}

uint64_t sub_1001269A8()
{
  return sub_10000FD38(&qword_10036F878, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch, (uint64_t)&unk_1002D64C0);
}

uint64_t sub_1001269D4()
{
  return sub_10000FD38(&qword_10036F880, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, (uint64_t)&unk_1002D65E8);
}

uint64_t sub_100126A00()
{
  return sub_10000FD38(&qword_10036F888, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, (uint64_t)&unk_1002D6510);
}

uint64_t sub_100126A2C()
{
  return sub_10000FD38(&qword_10036E858, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, (uint64_t)&unk_1002D6610);
}

uint64_t sub_100126A58()
{
  return sub_10000FD38(&qword_10036F890, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, (uint64_t)&unk_1002D6650);
}

uint64_t sub_100126A84()
{
  return sub_10000FD38(&qword_10036F898, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, (uint64_t)&unk_1002D6750);
}

uint64_t sub_100126AB0()
{
  return sub_10000FD38(&qword_10036E878, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, (uint64_t)&unk_1002D6678);
}

uint64_t sub_100126ADC()
{
  return sub_10000FD38(&qword_10036E868, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, (uint64_t)&unk_1002D6778);
}

uint64_t sub_100126B08()
{
  return sub_10000FD38(&qword_10036F8A0, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, (uint64_t)&unk_1002D67B8);
}

uint64_t sub_100126B34()
{
  return sub_10000FD38(&qword_10036F8A8, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures, (uint64_t)&unk_1002D68E0);
}

uint64_t sub_100126B60()
{
  return sub_10000FD38(&qword_10036F8B0, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures, (uint64_t)&unk_1002D6808);
}

uint64_t sub_100126B8C()
{
  return sub_10000FD38(&qword_10036E870, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures, (uint64_t)&unk_1002D6908);
}

uint64_t sub_100126BB8()
{
  return sub_10000FD38(&qword_10036F8B8, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures, (uint64_t)&unk_1002D6948);
}

uint64_t sub_100126BE4()
{
  return sub_10000FD38(&qword_10036F8C0, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, (uint64_t)&unk_1002D6A48);
}

uint64_t sub_100126C10()
{
  return sub_10000FD38(&qword_10036F8C8, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, (uint64_t)&unk_1002D6970);
}

uint64_t sub_100126C3C()
{
  return sub_10000FD38(&qword_10036E880, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, (uint64_t)&unk_1002D6A70);
}

uint64_t sub_100126C68()
{
  return sub_10000FD38(&qword_10036F8D0, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, (uint64_t)&unk_1002D6AB0);
}

uint64_t sub_100126C94()
{
  return sub_10000FD38(&qword_10036F8D8, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation, (uint64_t)&unk_1002D6BB0);
}

uint64_t sub_100126CC0()
{
  return sub_10000FD38(&qword_10036F8E0, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation, (uint64_t)&unk_1002D6AD8);
}

uint64_t sub_100126CEC()
{
  return sub_10000FD38(&qword_10036E888, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation, (uint64_t)&unk_1002D6BD8);
}

uint64_t sub_100126D18()
{
  return sub_10000FD38(&qword_10036F8E8, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation, (uint64_t)&unk_1002D6C18);
}

uint64_t sub_100126D44()
{
  return sub_10000FD38(&qword_10036F8F0, type metadata accessor for CLP_LogEntry_PrivateData_WristState, (uint64_t)&unk_1002D6D40);
}

uint64_t sub_100126D70()
{
  return sub_10000FD38(&qword_10036F8F8, type metadata accessor for CLP_LogEntry_PrivateData_WristState, (uint64_t)&unk_1002D6C68);
}

uint64_t sub_100126D9C()
{
  return sub_10000FD38(&qword_10036E890, type metadata accessor for CLP_LogEntry_PrivateData_WristState, (uint64_t)&unk_1002D6D68);
}

uint64_t sub_100126DC8()
{
  return sub_10000FD38(&qword_10036F900, type metadata accessor for CLP_LogEntry_PrivateData_WristState, (uint64_t)&unk_1002D6DA8);
}

uint64_t sub_100126DF4()
{
  return sub_10000FD38(&qword_10036F908, type metadata accessor for CLP_LogEntry_PrivateData_WatchState, (uint64_t)&unk_1002D6EF8);
}

uint64_t sub_100126E20()
{
  return sub_10000FD38(&qword_10036F910, type metadata accessor for CLP_LogEntry_PrivateData_WatchState, (uint64_t)&unk_1002D6E20);
}

uint64_t sub_100126E4C()
{
  return sub_10000FD38(&qword_10036E898, type metadata accessor for CLP_LogEntry_PrivateData_WatchState, (uint64_t)&unk_1002D6F20);
}

uint64_t sub_100126E78()
{
  return sub_10000FD38(&qword_10036F918, type metadata accessor for CLP_LogEntry_PrivateData_WatchState, (uint64_t)&unk_1002D6F60);
}

uint64_t sub_100126EA4()
{
  return sub_10000FD38(&qword_10036F920, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference, (uint64_t)&unk_1002D7060);
}

uint64_t sub_100126ED0()
{
  return sub_10000FD38(&qword_10036F928, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference, (uint64_t)&unk_1002D6F88);
}

uint64_t sub_100126EFC()
{
  return sub_10000FD38(&qword_10036E8A0, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference, (uint64_t)&unk_1002D7088);
}

uint64_t sub_100126F28()
{
  return sub_10000FD38(&qword_10036F930, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference, (uint64_t)&unk_1002D70C8);
}

uint64_t sub_100126F54()
{
  return sub_10000FD38(&qword_10036F938, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, (uint64_t)&unk_1002D7218);
}

uint64_t sub_100126F80()
{
  return sub_10000FD38(&qword_10036F940, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, (uint64_t)&unk_1002D7140);
}

uint64_t sub_100126FAC()
{
  return sub_10000FD38(&qword_10036E8A8, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, (uint64_t)&unk_1002D7240);
}

uint64_t sub_100126FD8()
{
  return sub_10000FD38(&qword_10036F948, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, (uint64_t)&unk_1002D7280);
}

uint64_t sub_100127004()
{
  return sub_10000FD38(&qword_10036F950, type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate, (uint64_t)&unk_1002D7380);
}

uint64_t sub_100127030()
{
  return sub_10000FD38(&qword_10036F958, type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate, (uint64_t)&unk_1002D72A8);
}

uint64_t sub_10012705C()
{
  return sub_10000FD38(&qword_10036E8B0, type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate, (uint64_t)&unk_1002D73A8);
}

uint64_t sub_100127088()
{
  return sub_10000FD38(&qword_10036F960, type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate, (uint64_t)&unk_1002D73E8);
}

uint64_t sub_1001270B4()
{
  return sub_10000FD38(&qword_10036F968, type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample, (uint64_t)&unk_1002D74E8);
}

uint64_t sub_1001270E0()
{
  return sub_10000FD38(&qword_10036F970, type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample, (uint64_t)&unk_1002D7410);
}

uint64_t sub_10012710C()
{
  return sub_10000FD38(&qword_10036E8B8, type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample, (uint64_t)&unk_1002D7510);
}

uint64_t sub_100127138()
{
  return sub_10000FD38(&qword_10036F978, type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample, (uint64_t)&unk_1002D7550);
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType()
{
  return &type metadata for CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_LocationType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF3)
    goto LABEL_17;
  if (a2 + 13 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 13) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 13;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 13;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 13;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xE;
  v8 = v6 - 14;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_LocationType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 13 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 13) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF3)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF2)
    return ((uint64_t (*)(void))((char *)&loc_100127258 + 4 * byte_1002CAF33[v4]))();
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_10012728C + 4 * byte_1002CAF2E[v4]))();
}

uint64_t sub_10012728C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100127294(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10012729CLL);
  return result;
}

uint64_t sub_1001272A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001272B0);
  *(_BYTE *)result = a2 + 13;
  return result;
}

uint64_t sub_1001272B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001272BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_LocationType()
{
  return &type metadata for CLP_LogEntry_PrivateData_LocationType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteConstellation()
{
  return &type metadata for CLP_LogEntry_PrivateData_ClientSatelliteConstellation;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocationFixType()
{
  return &type metadata for CLP_LogEntry_PrivateData_BatchedLocationFixType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_GnssModeOfOperation()
{
  return &type metadata for CLP_LogEntry_PrivateData_GnssModeOfOperation;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssWakeMode()
{
  return &type metadata for CLP_LogEntry_PrivateData_RhythmicGnssWakeMode;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_BatchMode()
{
  return &type metadata for CLP_LogEntry_PrivateData_BatchMode;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_OperatingMode()
{
  return &type metadata for CLP_LogEntry_PrivateData_OperatingMode;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_PipelineOperatingMode()
{
  return &type metadata for CLP_LogEntry_PrivateData_PipelineOperatingMode;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_DominantMotionModeType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xB9)
    goto LABEL_17;
  if (a2 + 71 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 71) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 71;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 71;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 71;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x48;
  v8 = v6 - 72;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_DominantMotionModeType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 71 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 71) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xB9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xB8)
    return ((uint64_t (*)(void))((char *)&loc_100127434 + 4 * byte_1002CAF3D[v4]))();
  *a1 = a2 + 71;
  return ((uint64_t (*)(void))((char *)sub_100127468 + 4 * byte_1002CAF38[v4]))();
}

uint64_t sub_100127468(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100127470(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100127478);
  return result;
}

uint64_t sub_100127484(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10012748CLL);
  *(_BYTE *)result = a2 + 71;
  return result;
}

uint64_t sub_100127490(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100127498(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_DominantMotionModeType()
{
  return &type metadata for CLP_LogEntry_PrivateData_DominantMotionModeType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityType()
{
  return &type metadata for CLP_LogEntry_PrivateData_ReachabilityType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_BatteryChargerType()
{
  return &type metadata for CLP_LogEntry_PrivateData_BatteryChargerType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel()
{
  return &type metadata for CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel()
{
  return &type metadata for CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionMode()
{
  return &type metadata for CLP_LogEntry_PrivateData_SensorFusionMode;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPointMode()
{
  return &type metadata for CLP_LogEntry_PrivateData_WifiAccessPointMode;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_WifiRfBand()
{
  return &type metadata for CLP_LogEntry_PrivateData_WifiRfBand;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_WifiScanType()
{
  return &type metadata for CLP_LogEntry_PrivateData_WifiScanType;
}

uint64_t _s10ALProtobuf45CLP_LogEntry_PrivateData_WifiNotificationTypeOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF2)
    goto LABEL_17;
  if (a2 + 14 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 14) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 14;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 14;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 14;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xF;
  v8 = v6 - 15;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s10ALProtobuf45CLP_LogEntry_PrivateData_WifiNotificationTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 14 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 14) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF2)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF1)
    return ((uint64_t (*)(void))((char *)&loc_100127620 + 4 * byte_1002CAF47[v4]))();
  *a1 = a2 + 14;
  return ((uint64_t (*)(void))((char *)sub_100127654 + 4 * byte_1002CAF42[v4]))();
}

uint64_t sub_100127654(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10012765C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100127664);
  return result;
}

uint64_t sub_100127670(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100127678);
  *(_BYTE *)result = a2 + 14;
  return result;
}

uint64_t sub_10012767C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100127684(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_WifiNotificationType()
{
  return &type metadata for CLP_LogEntry_PrivateData_WifiNotificationType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_LocationServicesEnabled()
{
  return &type metadata for CLP_LogEntry_PrivateData_LocationServicesEnabled;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_DataAvailability()
{
  return &type metadata for CLP_LogEntry_PrivateData_DataAvailability;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_IndoorOutdoorType()
{
  return &type metadata for CLP_LogEntry_PrivateData_IndoorOutdoorType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_IndoorOutdoorConfidence()
{
  return &type metadata for CLP_LogEntry_PrivateData_IndoorOutdoorConfidence;
}

uint64_t sub_1001276E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001276EC);
}

uint64_t sub_1001276F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001276FC);
}

uint64_t sub_100127700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013A090(a1, a2, a3, (uint64_t)"\t");
}

uint64_t sub_100127724(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100127730);
}

uint64_t sub_100127730(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013E9C4(a1, a2, a3, &qword_10036E458);
}

uint64_t sub_10012773C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100127748);
}

uint64_t sub_100127748(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_10013EA54(a1, a2, a3, a4, &qword_10036E458);
}

void sub_100127754(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100141050(a1, a2, a3, (uint64_t)&unk_1002D7AC8, (uint64_t)&unk_1002D7AC8, (uint64_t)&unk_1002D7AC8);
}

uint64_t sub_100127780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10012778C);
}

uint64_t sub_100127790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10012779C);
}

uint64_t *sub_1001277A4(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v13 = *((_QWORD *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      v14 = sub_1000039AC(&qword_10036E458);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      v16 = v12[5];
      v17 = &v10[v16];
      v18 = &v11[v16];
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v17[8] = v18[8];
      v19 = v12[6];
      v20 = &v10[v19];
      v21 = &v11[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v12[7];
      v23 = &v10[v22];
      v24 = &v11[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    v25 = a3[6];
    v26 = a3[7];
    v27 = (char *)a1 + v25;
    v28 = (char *)a2 + v25;
    *(_DWORD *)v27 = *(_DWORD *)v28;
    v27[4] = v28[4];
    v29 = (char *)a1 + v26;
    v30 = (char *)a2 + v26;
    *(_DWORD *)v29 = *(_DWORD *)v30;
    v29[4] = v30[4];
    v31 = a3[8];
    v32 = (char *)a1 + v31;
    v33 = (char *)a2 + v31;
    *(_DWORD *)v32 = *(_DWORD *)v33;
    v32[4] = v33[4];
  }
  return a1;
}

uint64_t sub_100127960(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  void (*v8)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v8(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v5, v4);
  return result;
}

uint64_t sub_100127A00(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_1000039AC(&qword_10036E458);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[6];
  v24 = a3[7];
  v25 = a1 + v23;
  v26 = a2 + v23;
  *(_DWORD *)v25 = *(_DWORD *)v26;
  *(_BYTE *)(v25 + 4) = *(_BYTE *)(v26 + 4);
  v27 = a1 + v24;
  v28 = a2 + v24;
  *(_DWORD *)v27 = *(_DWORD *)v28;
  *(_BYTE *)(v27 + 4) = *(_BYTE *)(v28 + 4);
  v29 = a3[8];
  v30 = a1 + v29;
  v31 = a2 + v29;
  *(_DWORD *)v30 = *(_DWORD *)v31;
  *(_BYTE *)(v30 + 4) = *(_BYTE *)(v31 + 4);
  return a1;
}

uint64_t sub_100127B90(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_1000039AC(&qword_10036E458);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[6];
  v24 = a3[7];
  v25 = a1 + v23;
  v26 = a2 + v23;
  *(_DWORD *)v25 = *(_DWORD *)v26;
  *(_BYTE *)(v25 + 4) = *(_BYTE *)(v26 + 4);
  v27 = a1 + v24;
  v28 = a2 + v24;
  *(_DWORD *)v27 = *(_DWORD *)v28;
  *(_BYTE *)(v27 + 4) = *(_BYTE *)(v28 + 4);
  v29 = a3[8];
  v30 = a1 + v29;
  v31 = a2 + v29;
  *(_DWORD *)v30 = *(_DWORD *)v31;
  *(_BYTE *)(v30 + 4) = *(_BYTE *)(v31 + 4);
  return a1;
}

uint64_t sub_100127D20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100127D2C);
}

uint64_t sub_100127D2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013E9C4(a1, a2, a3, &qword_10036E458);
}

uint64_t sub_100127D38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100127D44);
}

uint64_t sub_100127D44(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_10013EA54(a1, a2, a3, a4, &qword_10036E458);
}

uint64_t *sub_100127D50(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain(v4);
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 24);
    v14 = (char *)v7 + v13;
    v15 = (char *)a2 + v13;
    v16 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v17 = *((_QWORD *)v16 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v17 + 48))(v15, 1, v16))
    {
      v18 = sub_1000039AC(&qword_10036E458);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v12(v14, v15, v11);
      v19 = v16[5];
      v20 = &v14[v19];
      v21 = &v15[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v16[6];
      v23 = &v14[v22];
      v24 = &v15[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      v25 = v16[7];
      v26 = &v14[v25];
      v27 = &v15[v25];
      *(_QWORD *)v26 = *(_QWORD *)v27;
      v26[8] = v27[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
    }
  }
  return v7;
}

uint64_t sub_100127ECC(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  void (*v9)(char *, uint64_t);

  swift_bridgeObjectRelease(*a1);
  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage(0);
  v9 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = (char *)a1 + *(int *)(a2 + 24);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
    return ((uint64_t (*)(char *, uint64_t))v9)(v6, v5);
  return result;
}

uint64_t *sub_100127F7C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;

  v6 = *a2;
  *a1 = *a2;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v16 = *((_QWORD *)v15 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
  {
    v17 = sub_1000039AC(&qword_10036E458);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v11(v13, v14, v10);
    v18 = v15[5];
    v19 = &v13[v18];
    v20 = &v14[v18];
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[8] = v20[8];
    v21 = v15[6];
    v22 = &v13[v21];
    v23 = &v14[v21];
    *(_QWORD *)v22 = *(_QWORD *)v23;
    v22[8] = v23[8];
    v24 = v15[7];
    v25 = &v13[v24];
    v26 = &v14[v24];
    *(_QWORD *)v25 = *(_QWORD *)v26;
    v25[8] = v26[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

_QWORD *sub_1001280D0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v15 = *((_QWORD *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_1000039AC(&qword_10036E458);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v10(v12, v13, v9);
    v17 = v14[5];
    v18 = &v12[v17];
    v19 = &v13[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v14[6];
    v21 = &v12[v20];
    v22 = &v13[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    v23 = v14[7];
    v24 = &v12[v23];
    v25 = &v13[v23];
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v24[8] = v25[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t sub_10012821C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100128228);
}

uint64_t sub_10012822C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100128238);
}

uint64_t *sub_10012823C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v13 = *((_QWORD *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      v14 = sub_1000039AC(&qword_10036E458);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      v16 = v12[5];
      v17 = &v10[v16];
      v18 = &v11[v16];
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v17[8] = v18[8];
      v19 = v12[6];
      v20 = &v10[v19];
      v21 = &v11[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v12[7];
      v23 = &v10[v22];
      v24 = &v11[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    v25 = a3[6];
    v26 = a3[7];
    v27 = (char *)a1 + v25;
    v28 = (char *)a2 + v25;
    *(_DWORD *)v27 = *(_DWORD *)v28;
    v27[4] = v28[4];
    v29 = (char *)a1 + v26;
    v30 = (char *)a2 + v26;
    *(_DWORD *)v29 = *(_DWORD *)v30;
    v29[4] = v30[4];
  }
  return a1;
}

uint64_t sub_1001283DC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_1000039AC(&qword_10036E458);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[6];
  v24 = a3[7];
  v25 = a1 + v23;
  v26 = a2 + v23;
  *(_DWORD *)v25 = *(_DWORD *)v26;
  *(_BYTE *)(v25 + 4) = *(_BYTE *)(v26 + 4);
  v27 = a1 + v24;
  v28 = a2 + v24;
  *(_DWORD *)v27 = *(_DWORD *)v28;
  *(_BYTE *)(v27 + 4) = *(_BYTE *)(v28 + 4);
  return a1;
}

uint64_t sub_100128550(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, int *);
  int v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  int v37;
  uint64_t v39;
  char *v40;
  char *v41;
  char v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char v50;
  uint64_t v51;
  uint64_t v52;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v51 = a3;
  v52 = a2;
  v9 = *(int *)(a3 + 20);
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v13 = *((_QWORD *)v12 - 1);
  v14 = *(uint64_t (**)(char *, uint64_t, int *))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      v39 = v12[5];
      v40 = &v10[v39];
      v41 = &v11[v39];
      v42 = v41[8];
      *(_QWORD *)v40 = *(_QWORD *)v41;
      v40[8] = v42;
      v43 = v12[6];
      v44 = &v10[v43];
      v45 = &v11[v43];
      v46 = v45[8];
      *(_QWORD *)v44 = *(_QWORD *)v45;
      v44[8] = v46;
      v47 = v12[7];
      v48 = &v10[v47];
      v49 = &v11[v47];
      v50 = v49[8];
      *(_QWORD *)v48 = *(_QWORD *)v49;
      v48[8] = v50;
      goto LABEL_7;
    }
    sub_100004030((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v29 = sub_1000039AC(&qword_10036E458);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v11, v6);
  v17 = v12[5];
  v18 = &v10[v17];
  v19 = &v11[v17];
  v20 = v19[8];
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v18[8] = v20;
  v21 = v12[6];
  v22 = &v10[v21];
  v23 = &v11[v21];
  v24 = v23[8];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v24;
  v25 = v12[7];
  v26 = &v10[v25];
  v27 = &v11[v25];
  v28 = v27[8];
  *(_QWORD *)v26 = *(_QWORD *)v27;
  v26[8] = v28;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
LABEL_7:
  v30 = *(int *)(v51 + 24);
  v31 = a1 + v30;
  v32 = (int *)(v52 + v30);
  v33 = *v32;
  *(_BYTE *)(v31 + 4) = *((_BYTE *)v32 + 4);
  *(_DWORD *)v31 = v33;
  v34 = *(int *)(v51 + 28);
  v35 = a1 + v34;
  v36 = (int *)(v52 + v34);
  v37 = *v36;
  *(_BYTE *)(v35 + 4) = *((_BYTE *)v36 + 4);
  *(_DWORD *)v35 = v37;
  return a1;
}

uint64_t sub_100128770(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_1000039AC(&qword_10036E458);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[6];
  v24 = a3[7];
  v25 = a1 + v23;
  v26 = a2 + v23;
  *(_DWORD *)v25 = *(_DWORD *)v26;
  *(_BYTE *)(v25 + 4) = *(_BYTE *)(v26 + 4);
  v27 = a1 + v24;
  v28 = a2 + v24;
  *(_DWORD *)v27 = *(_DWORD *)v28;
  *(_BYTE *)(v27 + 4) = *(_BYTE *)(v28 + 4);
  return a1;
}

uint64_t sub_1001288E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, int *);
  int v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v43 = a3;
  v44 = a2;
  v9 = *(int *)(a3 + 20);
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v13 = *((_QWORD *)v12 - 1);
  v14 = *(uint64_t (**)(char *, uint64_t, int *))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      v34 = v12[5];
      v35 = &v10[v34];
      v36 = &v11[v34];
      *(_QWORD *)v35 = *(_QWORD *)v36;
      v35[8] = v36[8];
      v37 = v12[6];
      v38 = &v10[v37];
      v39 = &v11[v37];
      *(_QWORD *)v38 = *(_QWORD *)v39;
      v38[8] = v39[8];
      v40 = v12[7];
      v41 = &v10[v40];
      v42 = &v11[v40];
      *(_QWORD *)v41 = *(_QWORD *)v42;
      v41[8] = v42[8];
      goto LABEL_7;
    }
    sub_100004030((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v26 = sub_1000039AC(&qword_10036E458);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v11, v6);
  v17 = v12[5];
  v18 = &v10[v17];
  v19 = &v11[v17];
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v18[8] = v19[8];
  v20 = v12[6];
  v21 = &v10[v20];
  v22 = &v11[v20];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v22[8];
  v23 = v12[7];
  v24 = &v10[v23];
  v25 = &v11[v23];
  *(_QWORD *)v24 = *(_QWORD *)v25;
  v24[8] = v25[8];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
LABEL_7:
  v27 = *(int *)(v43 + 24);
  v28 = *(int *)(v43 + 28);
  v29 = a1 + v27;
  v30 = v44 + v27;
  *(_DWORD *)v29 = *(_DWORD *)v30;
  *(_BYTE *)(v29 + 4) = *(_BYTE *)(v30 + 4);
  v31 = a1 + v28;
  v32 = v44 + v28;
  *(_DWORD *)v31 = *(_DWORD *)v32;
  *(_BYTE *)(v31 + 4) = *(_BYTE *)(v32 + 4);
  return a1;
}

uint64_t sub_100128B00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100128B0C);
}

uint64_t sub_100128B0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013E9C4(a1, a2, a3, &qword_10036E458);
}

uint64_t sub_100128B18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100128B24);
}

uint64_t sub_100128B24(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_10013EA54(a1, a2, a3, a4, &qword_10036E458);
}

void sub_100128B30(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  v2 = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001198C(319, (unint64_t *)&unk_10036FA60, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = &unk_1002D7AC8;
      v6[3] = &unk_1002D7AC8;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

uint64_t sub_100128BD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100128BDC);
}

uint64_t sub_100128BE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100128BEC);
}

uint64_t sub_100128C04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100128C10);
}

uint64_t sub_100128C14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100128C20);
}

uint64_t sub_100128C24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000780DC(a1, a2, a3, (uint64_t)"\t", (uint64_t)"\t");
}

uint64_t sub_100128C34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100128C40);
}

uint64_t sub_100128C44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100128C50);
}

uint64_t sub_100128C54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100148CFC(a1, a2, a3, (uint64_t)&value witness table for Builtin.NativeObject + 64);
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType()
{
  return &type metadata for CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType()
{
  return &type metadata for CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType;
}

uint64_t sub_100128C84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100128C90);
}

uint64_t sub_100128C94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100128CA0);
}

uint64_t sub_100128CA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001484E4(a1, a2, a3, (uint64_t)"\t", (uint64_t)"\t", (uint64_t)&unk_1002D7C78, (uint64_t)&unk_1002D7C78);
}

uint64_t sub_100128CC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100128CCC);
}

uint64_t sub_100128CD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100128CDC);
}

_QWORD *sub_100128CE0(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v24);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v9[4] = v10[4];
    *(_DWORD *)v9 = *(_DWORD *)v10;
    v11 = a3[7];
    v12 = a3[8];
    v13 = (char *)a1 + v11;
    v14 = (char *)a2 + v11;
    v13[4] = v14[4];
    *(_DWORD *)v13 = *(_DWORD *)v14;
    v15 = (char *)a1 + v12;
    v16 = (char *)a2 + v12;
    *(_DWORD *)v15 = *(_DWORD *)v16;
    v15[4] = v16[4];
    v17 = a3[9];
    v18 = a3[10];
    v19 = (char *)a1 + v17;
    v20 = (char *)a2 + v17;
    *(_DWORD *)v19 = *(_DWORD *)v20;
    v19[4] = v20[4];
    v21 = (char *)a1 + v18;
    v22 = (char *)a2 + v18;
    LODWORD(v19) = *(_DWORD *)v22;
    v21[4] = v22[4];
    *(_DWORD *)v21 = (_DWORD)v19;
    v23 = a3[12];
    *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    *((_BYTE *)a1 + v23) = *((_BYTE *)a2 + v23);
  }
  return a1;
}

uint64_t sub_100128DFC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)(v8 + 4) = *(_BYTE *)(v9 + 4);
  *(_DWORD *)v8 = *(_DWORD *)v9;
  v10 = a3[7];
  v11 = a3[8];
  v12 = a1 + v10;
  v13 = a2 + v10;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  v14 = a1 + v11;
  v15 = a2 + v11;
  *(_DWORD *)v14 = *(_DWORD *)v15;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  v16 = a3[9];
  v17 = a3[10];
  v18 = a1 + v16;
  v19 = a2 + v16;
  *(_DWORD *)v18 = *(_DWORD *)v19;
  *(_BYTE *)(v18 + 4) = *(_BYTE *)(v19 + 4);
  v20 = a1 + v17;
  v21 = a2 + v17;
  LODWORD(v18) = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = *(_BYTE *)(v21 + 4);
  *(_DWORD *)v20 = v18;
  v22 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v22) = *(_BYTE *)(a2 + v22);
  return a1;
}

uint64_t sub_100128EEC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v7 = a3[6];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 4);
  *(_DWORD *)v8 = *(_DWORD *)v9;
  *(_BYTE *)(v8 + 4) = v10;
  v11 = a3[7];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = v14;
  v15 = a3[8];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = *(_BYTE *)(v17 + 4);
  *(_DWORD *)v16 = *(_DWORD *)v17;
  *(_BYTE *)(v16 + 4) = v18;
  v19 = a3[9];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = *(_BYTE *)(v21 + 4);
  *(_DWORD *)v20 = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = v22;
  v23 = a3[10];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = *(_BYTE *)(v25 + 4);
  *(_DWORD *)v24 = *(_DWORD *)v25;
  *(_BYTE *)(v24 + 4) = v26;
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_100128FEC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)(v8 + 4) = *(_BYTE *)(v9 + 4);
  *(_DWORD *)v8 = *(_DWORD *)v9;
  v10 = a3[7];
  v11 = a3[8];
  v12 = a1 + v10;
  v13 = a2 + v10;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  v14 = a1 + v11;
  v15 = a2 + v11;
  *(_DWORD *)v14 = *(_DWORD *)v15;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  v16 = a3[9];
  v17 = a3[10];
  v18 = a1 + v16;
  v19 = a2 + v16;
  *(_DWORD *)v18 = *(_DWORD *)v19;
  *(_BYTE *)(v18 + 4) = *(_BYTE *)(v19 + 4);
  v20 = a1 + v17;
  v21 = a2 + v17;
  LODWORD(v18) = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = *(_BYTE *)(v21 + 4);
  *(_DWORD *)v20 = v18;
  v22 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v22) = *(_BYTE *)(a2 + v22);
  return a1;
}

uint64_t sub_1001290DC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)(v8 + 4) = *(_BYTE *)(v9 + 4);
  *(_DWORD *)v8 = *(_DWORD *)v9;
  v10 = a3[7];
  v11 = a3[8];
  v12 = a1 + v10;
  v13 = a2 + v10;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  v14 = a1 + v11;
  v15 = a2 + v11;
  *(_DWORD *)v14 = *(_DWORD *)v15;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  v16 = a3[9];
  v17 = a3[10];
  v18 = a1 + v16;
  v19 = a2 + v16;
  *(_DWORD *)v18 = *(_DWORD *)v19;
  *(_BYTE *)(v18 + 4) = *(_BYTE *)(v19 + 4);
  v20 = a1 + v17;
  v21 = a2 + v17;
  LODWORD(v18) = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = *(_BYTE *)(v21 + 4);
  *(_DWORD *)v20 = v18;
  v22 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v22) = *(_BYTE *)(a2 + v22);
  return a1;
}

uint64_t sub_1001291CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001291D8);
}

uint64_t sub_1001291DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001291E8);
}

uint64_t sub_1001291EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013961C(a1, a2, a3, (uint64_t)&unk_1002D7CF0, (uint64_t)&unk_1002D7AC8);
}

uint64_t sub_100129200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10012920C);
}

uint64_t sub_100129210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10012921C);
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType()
{
  return &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType()
{
  return &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType()
{
  return &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent()
{
  return &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType()
{
  return &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType()
{
  return &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy()
{
  return &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy;
}

_QWORD *sub_100129290(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v18);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v10[8] = v11[8];
    v12 = (char *)a1 + v9;
    v13 = (char *)a2 + v9;
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[8] = v13[8];
    v14 = a3[7];
    v15 = a3[8];
    v16 = (char *)a1 + v14;
    v17 = (char *)a2 + v14;
    *(_QWORD *)v16 = *(_QWORD *)v17;
    v16[8] = v17[8];
    *((_BYTE *)a1 + v15) = *((_BYTE *)a2 + v15);
  }
  return a1;
}

uint64_t sub_100129364(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  *(_BYTE *)(a1 + v14) = *(_BYTE *)(a2 + v14);
  return a1;
}

uint64_t sub_10012940C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  *(_BYTE *)(v8 + 8) = *((_BYTE *)v9 + 8);
  *(_QWORD *)v8 = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  LOBYTE(v10) = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = v10;
  v14 = a3[7];
  v15 = a1 + v14;
  v16 = a2 + v14;
  LOBYTE(v10) = *(_BYTE *)(v16 + 8);
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = v10;
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_1001294BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  *(_BYTE *)(a1 + v14) = *(_BYTE *)(a2 + v14);
  return a1;
}

uint64_t sub_100129564(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  *(_BYTE *)(a1 + v14) = *(_BYTE *)(a2 + v14);
  return a1;
}

uint64_t sub_10012960C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100129618);
}

uint64_t sub_100129618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 32)) <= 4u)
    v9 = 4;
  else
    v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 32));
  v10 = v9 - 4;
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 32)) >= 4u)
    return v10;
  else
    return 0;
}

uint64_t sub_10012969C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001296A8);
}

uint64_t sub_1001296A8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 32)) = a2 + 4;
  return result;
}

uint64_t sub_100129720(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001484E4(a1, a2, a3, (uint64_t)"\t", (uint64_t)"\t", (uint64_t)"\t", (uint64_t)&unk_1002D7E08);
}

uint64_t sub_100129750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10012975C);
}

uint64_t sub_100129760(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10012976C);
}

uint64_t sub_100129770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000780DC(a1, a2, a3, (uint64_t)&unk_1002D7E50, (uint64_t)&unk_1002D7C78);
}

uint64_t sub_100129798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001297A4);
}

uint64_t sub_1001297A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001297B4);
}

uint64_t sub_1001297B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001484E4(a1, a2, a3, (uint64_t)"\t", (uint64_t)"\t", (uint64_t)"\t", (uint64_t)"\t");
}

uint64_t sub_1001297D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001297DC);
}

uint64_t sub_1001297E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001297EC);
}

uint64_t *sub_1001297F0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v10[8] = v11[8];
    v12 = (uint64_t *)((char *)a1 + v9);
    v13 = (uint64_t *)((char *)a2 + v9);
    v14 = v13[1];
    *v12 = *v13;
    v12[1] = v14;
    swift_bridgeObjectRetain(v14);
  }
  return a1;
}

uint64_t sub_1001298A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = (_QWORD *)(a1 + v8);
  v12 = (_QWORD *)(a2 + v8);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  swift_bridgeObjectRetain(v13);
  return a1;
}

uint64_t sub_100129920(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = v10;
  v11 = *(int *)(a3 + 24);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  *v12 = *v13;
  v14 = v13[1];
  v15 = v12[1];
  v12[1] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  return a1;
}

uint64_t sub_1001299B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  return a1;
}

uint64_t sub_100129A2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = (_QWORD *)(a1 + v8);
  v12 = (uint64_t *)(a2 + v8);
  v14 = *v12;
  v13 = v12[1];
  v15 = v11[1];
  *v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease(v15);
  return a1;
}

uint64_t sub_100129AB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100129ABC);
}

uint64_t sub_100129AC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100129ACC);
}

uint64_t sub_100129AD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000780DC(a1, a2, a3, (uint64_t)"\t", (uint64_t)&unk_1002D7F00);
}

uint64_t sub_100129AE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100129AF0);
}

uint64_t sub_100129AF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100129B00);
}

uint64_t sub_100129B04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100129B10);
}

uint64_t sub_100129B14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100129B20);
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_Location.SignalQualityType()
{
  return &type metadata for CLP_LogEntry_PrivateData_Location.SignalQualityType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_Location.MotionDetectedType()
{
  return &type metadata for CLP_LogEntry_PrivateData_Location.MotionDetectedType;
}

uint64_t *sub_100129B44(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain(v4);
  }
  else
  {
    v5 = a1;
    v6 = a2[1];
    a1[1] = v6;
    v7 = *(int *)(a3 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UnknownStorage(0);
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v6);
    v11(v8, v9, v10);
  }
  return v5;
}

uint64_t sub_100129BF4(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  v4 = (char *)a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *sub_100129C44(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v4 = *a2;
  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  v10(v7, v8, v9);
  return a1;
}

uint64_t *sub_100129CC4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[1];
  v9 = a1[1];
  a1[1] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_OWORD *sub_100129D50(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *sub_100129DAC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_100129E28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100129E34);
}

uint64_t sub_100129E34(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t sub_100129EB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100129EBC);
}

char *sub_100129EBC(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_100129F30(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

_QWORD *sub_100129FA8(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
    v9 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v10[4] = v11[4];
    *(_DWORD *)v10 = *(_DWORD *)v11;
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  }
  return a1;
}

uint64_t sub_10012A068(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10012A0FC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v7 = a3[8];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 4);
  *(_DWORD *)v8 = *(_DWORD *)v9;
  *(_BYTE *)(v8 + 4) = v10;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10012A198(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10012A22C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10012A2C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10012A2CC);
}

uint64_t sub_10012A2D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10012A2DC);
}

uint64_t sub_10012A2E0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  result = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1002D8028;
    v4[2] = &unk_1002D7C78;
    v4[3] = &unk_1002D8040;
    v4[4] = &unk_1002D7AC8;
    v4[5] = &unk_1002D7C78;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

_QWORD *sub_10012A370(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v8);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t sub_10012A3F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10012A454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10012A4B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10012A50C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10012A568(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10012A574);
}

uint64_t sub_10012A578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10012A584);
}

uint64_t sub_10012A588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100148CFC(a1, a2, a3, (uint64_t)&unk_1002D7C78);
}

uint64_t sub_10012A594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10012A5A0);
}

uint64_t sub_10012A5A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10012A5B0);
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity.MountedStateType()
{
  return &type metadata for CLP_LogEntry_PrivateData_MotionActivity.MountedStateType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType()
{
  return &type metadata for CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType()
{
  return &type metadata for CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType;
}

uint64_t *sub_10012A5E4(uint64_t *a1, uint64_t *a2, int *a3)
{
  return sub_1001346C4(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, &qword_10036E4B8);
}

uint64_t sub_10012A5F8(uint64_t a1, uint64_t a2)
{
  return sub_1001348F0(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

uint64_t sub_10012A604(uint64_t a1, uint64_t a2, int *a3)
{
  return sub_1001349E8(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, &qword_10036E4B8);
}

uint64_t sub_10012A618(uint64_t a1, uint64_t a2, int *a3)
{
  return sub_1001397E0(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, &qword_10036E4B8);
}

uint64_t sub_10012A62C(uint64_t a1, uint64_t a2, int *a3)
{
  return sub_100134C04(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, &qword_10036E4B8);
}

uint64_t sub_10012A640(uint64_t a1, uint64_t a2, int *a3)
{
  return sub_100139B0C(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, &qword_10036E4B8);
}

uint64_t sub_10012A654(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10012A660);
}

uint64_t sub_10012A660(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100139E18(a1, a2, a3, &qword_10036E4B8);
}

uint64_t sub_10012A66C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10012A678);
}

uint64_t sub_10012A678(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_100139ED0(a1, a2, a3, a4, &qword_10036E4B8);
}

void sub_10012A684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100139F94(a1, a2, a3, (unint64_t *)&unk_1003706C0, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

char *sub_10012A698(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v18);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[6];
    a1[a3[5]] = a2[a3[5]];
    v10 = &a1[v9];
    v11 = &a2[v9];
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v10[8] = v11[8];
    v12 = a3[7];
    v13 = &a1[v12];
    v14 = &a2[v12];
    v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v16 = *((_QWORD *)v15 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
    {
      v17 = sub_1000039AC(&qword_10036E458);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v8(v13, v14, v7);
      v19 = v15[5];
      v20 = &v13[v19];
      v21 = &v14[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v15[6];
      v23 = &v13[v22];
      v24 = &v14[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      v25 = v15[7];
      v26 = &v13[v25];
      v27 = &v14[v25];
      *(_QWORD *)v26 = *(_QWORD *)v27;
      v26[8] = v27[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
    }
    a1[a3[8]] = a2[a3[8]];
  }
  return a1;
}

uint64_t sub_10012A834(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  void (*v8)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v8(a1, v4);
  v5 = a1 + *(int *)(a2 + 28);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v5, v4);
  return result;
}

uint64_t sub_10012A8D4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a3[7];
  v12 = (char *)(a1 + v11);
  v13 = (char *)(a2 + v11);
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v15 = *((_QWORD *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_1000039AC(&qword_10036E458);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    v17 = v14[5];
    v18 = &v12[v17];
    v19 = &v13[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v14[6];
    v21 = &v12[v20];
    v22 = &v13[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    v23 = v14[7];
    v24 = &v12[v23];
    v25 = &v13[v23];
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v24[8] = v25[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_10012AA44(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, int *);
  int v18;
  int v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char v31;
  uint64_t v32;
  uint64_t v34;
  char *v35;
  char *v36;
  char v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char v45;
  uint64_t v46;
  int *v47;

  v6 = type metadata accessor for UnknownStorage(0);
  v46 = *(_QWORD *)(v6 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 24);
  v7(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = *(_BYTE *)(v10 + 8);
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = v11;
  v47 = a3;
  v12 = a3[7];
  v13 = (char *)(a1 + v12);
  v14 = (char *)(a2 + v12);
  v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v16 = *((_QWORD *)v15 - 1);
  v17 = *(uint64_t (**)(char *, uint64_t, int *))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      v7((uint64_t)v13, (uint64_t)v14, v6);
      v34 = v15[5];
      v35 = &v13[v34];
      v36 = &v14[v34];
      v37 = v36[8];
      *(_QWORD *)v35 = *(_QWORD *)v36;
      v35[8] = v37;
      v38 = v15[6];
      v39 = &v13[v38];
      v40 = &v14[v38];
      v41 = v40[8];
      *(_QWORD *)v39 = *(_QWORD *)v40;
      v39[8] = v41;
      v42 = v15[7];
      v43 = &v13[v42];
      v44 = &v14[v42];
      v45 = v44[8];
      *(_QWORD *)v43 = *(_QWORD *)v44;
      v43[8] = v45;
      goto LABEL_7;
    }
    sub_100004030((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v32 = sub_1000039AC(&qword_10036E458);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v13, v14, v6);
  v20 = v15[5];
  v21 = &v13[v20];
  v22 = &v14[v20];
  v23 = v22[8];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v23;
  v24 = v15[6];
  v25 = &v13[v24];
  v26 = &v14[v24];
  v27 = v26[8];
  *(_QWORD *)v25 = *(_QWORD *)v26;
  v25[8] = v27;
  v28 = v15[7];
  v29 = &v13[v28];
  v30 = &v14[v28];
  v31 = v30[8];
  *(_QWORD *)v29 = *(_QWORD *)v30;
  v29[8] = v31;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
LABEL_7:
  *(_BYTE *)(a1 + v47[8]) = *(_BYTE *)(a2 + v47[8]);
  return a1;
}

uint64_t sub_10012AC68(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a3[7];
  v12 = (char *)(a1 + v11);
  v13 = (char *)(a2 + v11);
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v15 = *((_QWORD *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_1000039AC(&qword_10036E458);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    v17 = v14[5];
    v18 = &v12[v17];
    v19 = &v13[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v14[6];
    v21 = &v12[v20];
    v22 = &v13[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    v23 = v14[7];
    v24 = &v12[v23];
    v25 = &v13[v23];
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v24[8] = v25[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_10012ADD8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, int *);
  int v17;
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  int *v40;

  v6 = type metadata accessor for UnknownStorage(0);
  v39 = *(_QWORD *)(v6 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 40);
  v7(a1, a2, v6);
  v8 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v40 = a3;
  v11 = a3[7];
  v12 = (char *)(a1 + v11);
  v13 = (char *)(a2 + v11);
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v15 = *((_QWORD *)v14 - 1);
  v16 = *(uint64_t (**)(char *, uint64_t, int *))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      v7((uint64_t)v12, (uint64_t)v13, v6);
      v30 = v14[5];
      v31 = &v12[v30];
      v32 = &v13[v30];
      *(_QWORD *)v31 = *(_QWORD *)v32;
      v31[8] = v32[8];
      v33 = v14[6];
      v34 = &v12[v33];
      v35 = &v13[v33];
      *(_QWORD *)v34 = *(_QWORD *)v35;
      v34[8] = v35[8];
      v36 = v14[7];
      v37 = &v12[v36];
      v38 = &v13[v36];
      *(_QWORD *)v37 = *(_QWORD *)v38;
      v37[8] = v38[8];
      goto LABEL_7;
    }
    sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v28 = sub_1000039AC(&qword_10036E458);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v12, v13, v6);
  v19 = v14[5];
  v20 = &v12[v19];
  v21 = &v13[v19];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v20[8] = v21[8];
  v22 = v14[6];
  v23 = &v12[v22];
  v24 = &v13[v22];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v23[8] = v24[8];
  v25 = v14[7];
  v26 = &v12[v25];
  v27 = &v13[v25];
  *(_QWORD *)v26 = *(_QWORD *)v27;
  v26[8] = v27[8];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
LABEL_7:
  *(_BYTE *)(a1 + v40[8]) = *(_BYTE *)(a2 + v40[8]);
  return a1;
}

uint64_t sub_10012AFF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10012B004);
}

uint64_t sub_10012B004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  uint64_t v11;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 183)
  {
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) <= 0x48u)
      v9 = 72;
    else
      v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    v10 = v9 - 72;
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) >= 0x48u)
      return v10;
    else
      return 0;
  }
  else
  {
    v11 = sub_1000039AC(&qword_10036E458);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v11);
  }
}

uint64_t sub_10012B0B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10012B0C0);
}

uint64_t sub_10012B0C0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 183)
    {
      *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 72;
      return result;
    }
    v10 = sub_1000039AC(&qword_10036E458);
    v12 = a1 + *(int *)(a4 + 28);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_10012B164(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  v2 = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = &unk_1002D8168;
    v6[2] = "\t";
    sub_10001198C(319, (unint64_t *)&unk_10036FA60, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      v6[4] = &unk_1002D8168;
      swift_initStructMetadata(a1, 256, 5, v6, a1 + 16);
    }
  }
}

uint64_t *sub_10012B20C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v51;
  unsigned int (*v52)(char *, uint64_t, int *);

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v13 = *((_QWORD *)v12 - 1);
    v52 = *(unsigned int (**)(char *, uint64_t, int *))(v13 + 48);
    if (v52(v11, 1, v12))
    {
      v14 = sub_1000039AC(&qword_10036E458);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      v16 = v12[5];
      v17 = &v10[v16];
      v18 = &v11[v16];
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v17[8] = v18[8];
      v19 = v12[6];
      v20 = &v10[v19];
      v21 = &v11[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v12[7];
      v23 = &v10[v22];
      v24 = &v11[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    v25 = a3[6];
    v26 = a3[7];
    v27 = (char *)a1 + v25;
    v28 = (char *)a2 + v25;
    *(_DWORD *)v27 = *(_DWORD *)v28;
    v27[4] = v28[4];
    v29 = (char *)a1 + v26;
    v30 = (char *)a2 + v26;
    v31 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
    v32 = *((_QWORD *)v31 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v32 + 48))(v30, 1, v31))
    {
      v33 = sub_1000039AC(&qword_10036E4C0);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      v51 = v13;
      v8((uint64_t *)v29, (uint64_t *)v30, v7);
      v29[v31[5]] = v30[v31[5]];
      v34 = v31[6];
      v35 = &v29[v34];
      v36 = &v30[v34];
      v35[8] = v36[8];
      *(_QWORD *)v35 = *(_QWORD *)v36;
      v37 = v31[7];
      v38 = &v29[v37];
      v39 = &v30[v37];
      if (v52(&v30[v37], 1, v12))
      {
        v40 = sub_1000039AC(&qword_10036E458);
        memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
      }
      else
      {
        v8((uint64_t *)v38, (uint64_t *)v39, v7);
        v41 = v12[5];
        v42 = &v38[v41];
        v43 = &v39[v41];
        *(_QWORD *)v42 = *(_QWORD *)v43;
        v42[8] = v43[8];
        v44 = v12[6];
        v45 = &v38[v44];
        v46 = &v39[v44];
        *(_QWORD *)v45 = *(_QWORD *)v46;
        v45[8] = v46[8];
        v47 = v12[7];
        v48 = &v38[v47];
        v49 = &v39[v47];
        *(_QWORD *)v48 = *(_QWORD *)v49;
        v48[8] = v49[8];
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v51 + 56))(v38, 0, 1, v12);
      }
      v29[v31[8]] = v30[v31[8]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v32 + 56))(v29, 0, 1, v31);
    }
  }
  return a1;
}

uint64_t sub_10012B51C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage(0);
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v12(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48);
  if (!v7(v5, 1, v6))
    v12(v5, v4);
  v8 = a1 + *(int *)(a2 + 28);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
  if (!(_DWORD)result)
  {
    v12(v8, v4);
    v11 = v8 + *(int *)(v9 + 28);
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v7)(v11, 1, v6);
    if (!(_DWORD)result)
      return ((uint64_t (*)(uint64_t, uint64_t))v12)(v11, v4);
  }
  return result;
}

uint64_t sub_10012B638(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v49;
  unsigned int (*v50)(char *, uint64_t, int *);

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  v50 = *(unsigned int (**)(char *, uint64_t, int *))(v12 + 48);
  if (v50(v10, 1, v11))
  {
    v13 = sub_1000039AC(&qword_10036E458);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[6];
  v24 = a3[7];
  v25 = a1 + v23;
  v26 = a2 + v23;
  *(_DWORD *)v25 = *(_DWORD *)v26;
  *(_BYTE *)(v25 + 4) = *(_BYTE *)(v26 + 4);
  v27 = (char *)(a1 + v24);
  v28 = (char *)(a2 + v24);
  v29 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  v30 = *((_QWORD *)v29 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v30 + 48))(v28, 1, v29))
  {
    v31 = sub_1000039AC(&qword_10036E4C0);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v49 = v12;
    v7((uint64_t)v27, (uint64_t)v28, v6);
    v27[v29[5]] = v28[v29[5]];
    v32 = v29[6];
    v33 = &v27[v32];
    v34 = &v28[v32];
    v33[8] = v34[8];
    *(_QWORD *)v33 = *(_QWORD *)v34;
    v35 = v29[7];
    v36 = &v27[v35];
    v37 = &v28[v35];
    if (v50(&v28[v35], 1, v11))
    {
      v38 = sub_1000039AC(&qword_10036E458);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    }
    else
    {
      v7((uint64_t)v36, (uint64_t)v37, v6);
      v39 = v11[5];
      v40 = &v36[v39];
      v41 = &v37[v39];
      *(_QWORD *)v40 = *(_QWORD *)v41;
      v40[8] = v41[8];
      v42 = v11[6];
      v43 = &v36[v42];
      v44 = &v37[v42];
      *(_QWORD *)v43 = *(_QWORD *)v44;
      v43[8] = v44[8];
      v45 = v11[7];
      v46 = &v36[v45];
      v47 = &v37[v45];
      *(_QWORD *)v46 = *(_QWORD *)v47;
      v46[8] = v47[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v49 + 56))(v36, 0, 1, v11);
    }
    v27[v29[8]] = v28[v29[8]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v30 + 56))(v27, 0, 1, v29);
  }
  return a1;
}

uint64_t sub_10012B91C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  int v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  int *v35;
  uint64_t v36;
  uint64_t (*v37)(_BYTE *, uint64_t, int *);
  int v38;
  int v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char v64;
  uint64_t v65;
  char *v66;
  int v67;
  int v68;
  size_t v69;
  void *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char v106;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(uint64_t, uint64_t, uint64_t);
  uint64_t v111;
  void (*v112)(char *, char *, uint64_t);

  v6 = type metadata accessor for UnknownStorage(0);
  v111 = *(_QWORD *)(v6 - 8);
  v110 = *(void (**)(uint64_t, uint64_t, uint64_t))(v111 + 24);
  v110(a1, a2, v6);
  v7 = a3[5];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(void))(v11 + 48);
  v13 = ((uint64_t (*)(char *, uint64_t, int *))v12)(v8, 1, v10);
  v14 = ((uint64_t (*)(char *, uint64_t, int *))v12)(v9, 1, v10);
  v109 = v11;
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v111 + 16))(v8, v9, v6);
      v15 = v10[5];
      v16 = &v8[v15];
      v17 = &v9[v15];
      v18 = v17[8];
      *(_QWORD *)v16 = *(_QWORD *)v17;
      v16[8] = v18;
      v19 = v10[6];
      v20 = &v8[v19];
      v21 = &v9[v19];
      v22 = v21[8];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v22;
      v23 = v10[7];
      v24 = &v8[v23];
      v25 = &v9[v23];
      v26 = v25[8];
      *(_QWORD *)v24 = *(_QWORD *)v25;
      v24[8] = v26;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    sub_100004030((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    v27 = sub_1000039AC(&qword_10036E458);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  v110((uint64_t)v8, (uint64_t)v9, v6);
  v49 = v10[5];
  v50 = &v8[v49];
  v51 = &v9[v49];
  v52 = v51[8];
  *(_QWORD *)v50 = *(_QWORD *)v51;
  v50[8] = v52;
  v53 = v10[6];
  v54 = &v8[v53];
  v55 = &v9[v53];
  v56 = v55[8];
  *(_QWORD *)v54 = *(_QWORD *)v55;
  v54[8] = v56;
  v57 = v10[7];
  v58 = &v8[v57];
  v59 = &v9[v57];
  v60 = v59[8];
  *(_QWORD *)v58 = *(_QWORD *)v59;
  v58[8] = v60;
LABEL_7:
  v28 = a3[6];
  v29 = a1 + v28;
  v30 = (int *)(a2 + v28);
  v31 = *v30;
  *(_BYTE *)(v29 + 4) = *((_BYTE *)v30 + 4);
  *(_DWORD *)v29 = v31;
  v32 = a3[7];
  v33 = (_BYTE *)(a1 + v32);
  v34 = (_BYTE *)(a2 + v32);
  v35 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  v36 = *((_QWORD *)v35 - 1);
  v37 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v36 + 48);
  v38 = v37(v33, 1, v35);
  v39 = v37(v34, 1, v35);
  if (!v38)
  {
    if (v39)
    {
      sub_100004030((uint64_t)v33, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
      goto LABEL_13;
    }
    v110((uint64_t)v33, (uint64_t)v34, v6);
    v33[v35[5]] = v34[v35[5]];
    v61 = v35[6];
    v62 = &v33[v61];
    v63 = &v34[v61];
    v64 = v63[8];
    *(_QWORD *)v62 = *(_QWORD *)v63;
    v62[8] = v64;
    v65 = v35[7];
    v66 = &v34[v65];
    v108 = (uint64_t)&v33[v65];
    v67 = v12();
    v68 = ((uint64_t (*)(char *, uint64_t, int *))v12)(v66, 1, v10);
    if (v67)
    {
      if (!v68)
      {
        (*(void (**)(uint64_t, char *, uint64_t))(v111 + 16))(v108, v66, v6);
        v83 = v10[5];
        v84 = v108 + v83;
        v85 = &v66[v83];
        v86 = v85[8];
        *(_QWORD *)v84 = *(_QWORD *)v85;
        *(_BYTE *)(v84 + 8) = v86;
        v87 = v10[6];
        v88 = v108 + v87;
        v89 = &v66[v87];
        v90 = v89[8];
        *(_QWORD *)v88 = *(_QWORD *)v89;
        *(_BYTE *)(v88 + 8) = v90;
        v91 = v10[7];
        v92 = v108 + v91;
        v93 = &v66[v91];
        v94 = v93[8];
        *(_QWORD *)v92 = *(_QWORD *)v93;
        *(_BYTE *)(v92 + 8) = v94;
        (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v109 + 56))(v108, 0, 1, v10);
        goto LABEL_25;
      }
      v69 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036E458) - 8) + 64);
      v70 = (void *)v108;
    }
    else
    {
      if (!v68)
      {
        v110(v108, (uint64_t)v66, v6);
        v95 = v10[5];
        v96 = v108 + v95;
        v97 = &v66[v95];
        v98 = v97[8];
        *(_QWORD *)v96 = *(_QWORD *)v97;
        *(_BYTE *)(v96 + 8) = v98;
        v99 = v10[6];
        v100 = v108 + v99;
        v101 = &v66[v99];
        v102 = v101[8];
        *(_QWORD *)v100 = *(_QWORD *)v101;
        *(_BYTE *)(v100 + 8) = v102;
        v103 = v10[7];
        v104 = v108 + v103;
        v105 = &v66[v103];
        v106 = v105[8];
        *(_QWORD *)v104 = *(_QWORD *)v105;
        *(_BYTE *)(v104 + 8) = v106;
        goto LABEL_25;
      }
      sub_100004030(v108, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      v69 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036E458) - 8) + 64);
      v70 = (void *)v108;
    }
    memcpy(v70, v66, v69);
LABEL_25:
    v33[v35[8]] = v34[v35[8]];
    return a1;
  }
  if (v39)
  {
LABEL_13:
    v48 = sub_1000039AC(&qword_10036E4C0);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    return a1;
  }
  v112 = *(void (**)(char *, char *, uint64_t))(v111 + 16);
  v112(v33, v34, v6);
  v33[v35[5]] = v34[v35[5]];
  v40 = v35[6];
  v41 = &v33[v40];
  v42 = &v34[v40];
  v43 = v42[8];
  *(_QWORD *)v41 = *(_QWORD *)v42;
  v41[8] = v43;
  v44 = v35[7];
  v45 = &v33[v44];
  v46 = &v34[v44];
  if (((unsigned int (*)(_BYTE *, uint64_t, int *))v12)(&v34[v44], 1, v10))
  {
    v47 = sub_1000039AC(&qword_10036E458);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  else
  {
    v112(v45, v46, v6);
    v71 = v10[5];
    v72 = &v45[v71];
    v73 = &v46[v71];
    v74 = v73[8];
    *(_QWORD *)v72 = *(_QWORD *)v73;
    v72[8] = v74;
    v75 = v10[6];
    v76 = &v45[v75];
    v77 = &v46[v75];
    v78 = v77[8];
    *(_QWORD *)v76 = *(_QWORD *)v77;
    v76[8] = v78;
    v79 = v10[7];
    v80 = &v45[v79];
    v81 = &v46[v79];
    v82 = v81[8];
    *(_QWORD *)v80 = *(_QWORD *)v81;
    v80[8] = v82;
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v109 + 56))(v45, 0, 1, v10);
  }
  v33[v35[8]] = v34[v35[8]];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v36 + 56))(v33, 0, 1, v35);
  return a1;
}

uint64_t sub_10012BEB8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v49;
  unsigned int (*v50)(char *, uint64_t, int *);

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  v50 = *(unsigned int (**)(char *, uint64_t, int *))(v12 + 48);
  if (v50(v10, 1, v11))
  {
    v13 = sub_1000039AC(&qword_10036E458);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[6];
  v24 = a3[7];
  v25 = a1 + v23;
  v26 = a2 + v23;
  *(_DWORD *)v25 = *(_DWORD *)v26;
  *(_BYTE *)(v25 + 4) = *(_BYTE *)(v26 + 4);
  v27 = (char *)(a1 + v24);
  v28 = (char *)(a2 + v24);
  v29 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  v30 = *((_QWORD *)v29 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v30 + 48))(v28, 1, v29))
  {
    v31 = sub_1000039AC(&qword_10036E4C0);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v49 = v12;
    v7((uint64_t)v27, (uint64_t)v28, v6);
    v27[v29[5]] = v28[v29[5]];
    v32 = v29[6];
    v33 = &v27[v32];
    v34 = &v28[v32];
    v33[8] = v34[8];
    *(_QWORD *)v33 = *(_QWORD *)v34;
    v35 = v29[7];
    v36 = &v27[v35];
    v37 = &v28[v35];
    if (v50(&v28[v35], 1, v11))
    {
      v38 = sub_1000039AC(&qword_10036E458);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    }
    else
    {
      v7((uint64_t)v36, (uint64_t)v37, v6);
      v39 = v11[5];
      v40 = &v36[v39];
      v41 = &v37[v39];
      *(_QWORD *)v40 = *(_QWORD *)v41;
      v40[8] = v41[8];
      v42 = v11[6];
      v43 = &v36[v42];
      v44 = &v37[v42];
      *(_QWORD *)v43 = *(_QWORD *)v44;
      v43[8] = v44[8];
      v45 = v11[7];
      v46 = &v36[v45];
      v47 = &v37[v45];
      *(_QWORD *)v46 = *(_QWORD *)v47;
      v46[8] = v47[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v49 + 56))(v36, 0, 1, v11);
    }
    v27[v29[8]] = v28[v29[8]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v30 + 56))(v27, 0, 1, v29);
  }
  return a1;
}

uint64_t sub_10012C19C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  int *v31;
  uint64_t v32;
  uint64_t (*v33)(_BYTE *, uint64_t, int *);
  int v34;
  int v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  int v58;
  int v59;
  size_t v60;
  void *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(uint64_t, uint64_t, uint64_t);
  uint64_t v93;
  void (*v94)(char *, char *, uint64_t);

  v6 = type metadata accessor for UnknownStorage(0);
  v93 = *(_QWORD *)(v6 - 8);
  v92 = *(void (**)(uint64_t, uint64_t, uint64_t))(v93 + 40);
  v92(a1, a2, v6);
  v7 = a3[5];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(void))(v11 + 48);
  v13 = ((uint64_t (*)(char *, uint64_t, int *))v12)(v8, 1, v10);
  v14 = ((uint64_t (*)(char *, uint64_t, int *))v12)(v9, 1, v10);
  v91 = v11;
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v93 + 32))(v8, v9, v6);
      v15 = v10[5];
      v16 = &v8[v15];
      v17 = &v9[v15];
      *(_QWORD *)v16 = *(_QWORD *)v17;
      v16[8] = v17[8];
      v18 = v10[6];
      v19 = &v8[v18];
      v20 = &v9[v18];
      *(_QWORD *)v19 = *(_QWORD *)v20;
      v19[8] = v20[8];
      v21 = v10[7];
      v22 = &v8[v21];
      v23 = &v9[v21];
      *(_QWORD *)v22 = *(_QWORD *)v23;
      v22[8] = v23[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    sub_100004030((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    v24 = sub_1000039AC(&qword_10036E458);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  v92((uint64_t)v8, (uint64_t)v9, v6);
  v44 = v10[5];
  v45 = &v8[v44];
  v46 = &v9[v44];
  *(_QWORD *)v45 = *(_QWORD *)v46;
  v45[8] = v46[8];
  v47 = v10[6];
  v48 = &v8[v47];
  v49 = &v9[v47];
  *(_QWORD *)v48 = *(_QWORD *)v49;
  v48[8] = v49[8];
  v50 = v10[7];
  v51 = &v8[v50];
  v52 = &v9[v50];
  *(_QWORD *)v51 = *(_QWORD *)v52;
  v51[8] = v52[8];
LABEL_7:
  v25 = a3[6];
  v26 = a3[7];
  v27 = a1 + v25;
  v28 = a2 + v25;
  *(_DWORD *)v27 = *(_DWORD *)v28;
  *(_BYTE *)(v27 + 4) = *(_BYTE *)(v28 + 4);
  v29 = (_BYTE *)(a1 + v26);
  v30 = (_BYTE *)(a2 + v26);
  v31 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  v32 = *((_QWORD *)v31 - 1);
  v33 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v32 + 48);
  v34 = v33(v29, 1, v31);
  v35 = v33(v30, 1, v31);
  if (!v34)
  {
    if (v35)
    {
      sub_100004030((uint64_t)v29, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
      goto LABEL_13;
    }
    v92((uint64_t)v29, (uint64_t)v30, v6);
    v29[v31[5]] = v30[v31[5]];
    v53 = v31[6];
    v54 = &v29[v53];
    v55 = &v30[v53];
    v54[8] = v55[8];
    *(_QWORD *)v54 = *(_QWORD *)v55;
    v56 = v31[7];
    v57 = &v30[v56];
    v90 = (uint64_t)&v29[v56];
    v58 = v12();
    v59 = ((uint64_t (*)(char *, uint64_t, int *))v12)(v57, 1, v10);
    if (v58)
    {
      if (!v59)
      {
        (*(void (**)(uint64_t, char *, uint64_t))(v93 + 32))(v90, v57, v6);
        v71 = v10[5];
        v72 = v90 + v71;
        v73 = &v57[v71];
        *(_QWORD *)v72 = *(_QWORD *)v73;
        *(_BYTE *)(v72 + 8) = v73[8];
        v74 = v10[6];
        v75 = v90 + v74;
        v76 = &v57[v74];
        *(_QWORD *)v75 = *(_QWORD *)v76;
        *(_BYTE *)(v75 + 8) = v76[8];
        v77 = v10[7];
        v78 = v90 + v77;
        v79 = &v57[v77];
        *(_QWORD *)v78 = *(_QWORD *)v79;
        *(_BYTE *)(v78 + 8) = v79[8];
        (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v91 + 56))(v90, 0, 1, v10);
        goto LABEL_25;
      }
      v60 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036E458) - 8) + 64);
      v61 = (void *)v90;
    }
    else
    {
      if (!v59)
      {
        v92(v90, (uint64_t)v57, v6);
        v80 = v10[5];
        v81 = v90 + v80;
        v82 = &v57[v80];
        *(_QWORD *)v81 = *(_QWORD *)v82;
        *(_BYTE *)(v81 + 8) = v82[8];
        v83 = v10[6];
        v84 = v90 + v83;
        v85 = &v57[v83];
        *(_QWORD *)v84 = *(_QWORD *)v85;
        *(_BYTE *)(v84 + 8) = v85[8];
        v86 = v10[7];
        v87 = v90 + v86;
        v88 = &v57[v86];
        *(_QWORD *)v87 = *(_QWORD *)v88;
        *(_BYTE *)(v87 + 8) = v88[8];
        goto LABEL_25;
      }
      sub_100004030(v90, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      v60 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036E458) - 8) + 64);
      v61 = (void *)v90;
    }
    memcpy(v61, v57, v60);
LABEL_25:
    v29[v31[8]] = v30[v31[8]];
    return a1;
  }
  if (v35)
  {
LABEL_13:
    v43 = sub_1000039AC(&qword_10036E4C0);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    return a1;
  }
  v94 = *(void (**)(char *, char *, uint64_t))(v93 + 32);
  v94(v29, v30, v6);
  v29[v31[5]] = v30[v31[5]];
  v36 = v31[6];
  v37 = &v29[v36];
  v38 = &v30[v36];
  v37[8] = v38[8];
  *(_QWORD *)v37 = *(_QWORD *)v38;
  v39 = v31[7];
  v40 = &v29[v39];
  v41 = &v30[v39];
  if (((unsigned int (*)(_BYTE *, uint64_t, int *))v12)(&v30[v39], 1, v10))
  {
    v42 = sub_1000039AC(&qword_10036E458);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    v94(v40, v41, v6);
    v62 = v10[5];
    v63 = &v40[v62];
    v64 = &v41[v62];
    *(_QWORD *)v63 = *(_QWORD *)v64;
    v63[8] = v64[8];
    v65 = v10[6];
    v66 = &v40[v65];
    v67 = &v41[v65];
    *(_QWORD *)v66 = *(_QWORD *)v67;
    v66[8] = v67[8];
    v68 = v10[7];
    v69 = &v40[v68];
    v70 = &v41[v68];
    *(_QWORD *)v69 = *(_QWORD *)v70;
    v69[8] = v70[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v91 + 56))(v40, 0, 1, v10);
  }
  v29[v31[8]] = v30[v31[8]];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v32 + 56))(v29, 0, 1, v31);
  return a1;
}

uint64_t sub_10012C734(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10012C740);
}

uint64_t sub_10012C740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100139E18(a1, a2, a3, &qword_10036E4C0);
}

uint64_t sub_10012C74C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10012C758);
}

uint64_t sub_10012C758(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_100139ED0(a1, a2, a3, a4, &qword_10036E4C0);
}

void sub_10012C764(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100139F94(a1, a2, a3, (unint64_t *)&unk_1003707E0, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

_QWORD *sub_10012C778(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (_QWORD *)((char *)a1 + v8);
    v11 = (_QWORD *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (_QWORD *)((char *)a1 + v9);
    v14 = (_QWORD *)((char *)a2 + v9);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)a1 + v16) = *((_BYTE *)a2 + v16);
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v15);
  }
  return a1;
}

uint64_t sub_10012C844(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 24) + 8));
}

uint64_t sub_10012C89C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_QWORD *)(a1 + v8);
  v13 = (_QWORD *)(a2 + v8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v14);
  return a1;
}

uint64_t sub_10012C93C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a3[6];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  *v13 = *v14;
  v15 = v14[1];
  v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10012CA08(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10012CA8C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  v13 = a3[6];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  v18 = v14[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease(v18);
  v19 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v19) = *(_BYTE *)(a2 + v19);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10012CB34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10012CB40);
}

uint64_t sub_10012CB40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_10012CBCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10012CBD8);
}

uint64_t sub_10012CBD8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  return result;
}

uint64_t sub_10012CC54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10012CC78(a1, a2, a3, (uint64_t)&unk_1002D7F00, (uint64_t)&unk_1002D81E0, (uint64_t)&unk_1002D8040, (uint64_t)&unk_1002D8028);
}

uint64_t sub_10012CC78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  unint64_t v13;
  _QWORD v14[6];

  result = type metadata accessor for UnknownStorage(319);
  if (v13 <= 0x3F)
  {
    v14[0] = *(_QWORD *)(result - 8) + 64;
    v14[1] = a4;
    v14[2] = a4;
    v14[3] = a5;
    v14[4] = a6;
    v14[5] = a7;
    swift_initStructMetadata(a1, 256, 6, v14, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xBE)
    goto LABEL_17;
  if (a2 + 66 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 66) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 66;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 66;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 66;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x43;
  v8 = v6 - 67;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 66 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 66) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xBE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xBD)
    return ((uint64_t (*)(void))((char *)&loc_10012CDE4 + 4 * byte_1002CAF51[v4]))();
  *a1 = a2 + 66;
  return ((uint64_t (*)(void))((char *)sub_10012CE18 + 4 * byte_1002CAF4C[v4]))();
}

uint64_t sub_10012CE18(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10012CE20(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10012CE28);
  return result;
}

uint64_t sub_10012CE34(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10012CE3CLL);
  *(_BYTE *)result = a2 + 66;
  return result;
}

uint64_t sub_10012CE40(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10012CE48(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType()
{
  return &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType()
{
  return &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode()
{
  return &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode;
}

char *sub_10012CE84(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, int *);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  void (*v66)(char *, _QWORD, uint64_t, int *);

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v13 = *((_QWORD *)v12 - 1);
    v14 = *(unsigned int (**)(char *, uint64_t, int *))(v13 + 48);
    if (v14(v11, 1, v12))
    {
      v15 = sub_1000039AC(&qword_10036E458);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      v8(v10, v11, v7);
      v17 = v12[5];
      v18 = &v10[v17];
      v19 = &v11[v17];
      *(_QWORD *)v18 = *(_QWORD *)v19;
      v18[8] = v19[8];
      v20 = v12[6];
      v21 = &v10[v20];
      v22 = &v11[v20];
      *(_QWORD *)v21 = *(_QWORD *)v22;
      v21[8] = v22[8];
      v23 = v12[7];
      v24 = &v10[v23];
      v25 = &v11[v23];
      *(_QWORD *)v24 = *(_QWORD *)v25;
      v24[8] = v25[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    v26 = a3[6];
    v27 = &a1[v26];
    v28 = &a2[v26];
    if (v14(&a2[v26], 1, v12))
    {
      v29 = sub_1000039AC(&qword_10036E458);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      v8(v27, v28, v7);
      v30 = v12[5];
      v31 = &v27[v30];
      v32 = &v28[v30];
      *(_QWORD *)v31 = *(_QWORD *)v32;
      v31[8] = v32[8];
      v33 = v12[6];
      v34 = &v27[v33];
      v35 = &v28[v33];
      *(_QWORD *)v34 = *(_QWORD *)v35;
      v34[8] = v35[8];
      v36 = v12[7];
      v37 = &v27[v36];
      v38 = &v28[v36];
      *(_QWORD *)v37 = *(_QWORD *)v38;
      v37[8] = v38[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v27, 0, 1, v12);
    }
    v39 = a3[8];
    a1[a3[7]] = a2[a3[7]];
    v40 = &a1[v39];
    v41 = &a2[v39];
    if (v14(&a2[v39], 1, v12))
    {
      v42 = sub_1000039AC(&qword_10036E458);
      memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    }
    else
    {
      v8(v40, v41, v7);
      v43 = v12[5];
      v44 = &v40[v43];
      v45 = &v41[v43];
      *(_QWORD *)v44 = *(_QWORD *)v45;
      v44[8] = v45[8];
      v46 = v12[6];
      v47 = &v40[v46];
      v48 = &v41[v46];
      *(_QWORD *)v47 = *(_QWORD *)v48;
      v47[8] = v48[8];
      v49 = v12[7];
      v50 = &v40[v49];
      v51 = &v41[v49];
      *(_QWORD *)v50 = *(_QWORD *)v51;
      v50[8] = v51[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v40, 0, 1, v12);
    }
    v52 = a3[9];
    v53 = &a1[v52];
    v54 = &a2[v52];
    v55 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
    v56 = *((_QWORD *)v55 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v56 + 48))(v54, 1, v55))
    {
      v57 = sub_1000039AC(&qword_10036E4C8);
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    }
    else
    {
      v8(v53, v54, v7);
      v58 = v55[5];
      v59 = &v53[v58];
      v60 = &v54[v58];
      v61 = *((_QWORD *)v60 + 1);
      *(_QWORD *)v59 = *(_QWORD *)v60;
      *((_QWORD *)v59 + 1) = v61;
      v62 = v55[6];
      v63 = &v53[v62];
      v64 = &v54[v62];
      v65 = *((_QWORD *)v64 + 1);
      *(_QWORD *)v63 = *(_QWORD *)v64;
      *((_QWORD *)v63 + 1) = v65;
      v53[v55[7]] = v54[v55[7]];
      v53[v55[8]] = v54[v55[8]];
      v53[v55[9]] = v54[v55[9]];
      v66 = *(void (**)(char *, _QWORD, uint64_t, int *))(v56 + 56);
      swift_bridgeObjectRetain(v61);
      swift_bridgeObjectRetain(v65);
      v66(v53, 0, 1, v55);
    }
  }
  return a1;
}

uint64_t sub_10012D250(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = a1 + a2[5];
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48);
  if (!v8(v6, 1, v7))
    v5(v6, v4);
  v9 = a1 + a2[6];
  if (!v8(v9, 1, v7))
    v5(v9, v4);
  v10 = a1 + a2[8];
  if (!v8(v10, 1, v7))
    v5(v10, v4);
  v11 = a1 + a2[9];
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12);
  if (!(_DWORD)result)
  {
    v5(v11, v4);
    swift_bridgeObjectRelease(*(_QWORD *)(v11 + *(int *)(v12 + 20) + 8));
    return swift_bridgeObjectRelease(*(_QWORD *)(v11 + *(int *)(v12 + 24) + 8));
  }
  return result;
}

uint64_t sub_10012D3A4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, int *);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  void (*v64)(char *, _QWORD, uint64_t, int *);

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  v13 = *(unsigned int (**)(char *, uint64_t, int *))(v12 + 48);
  if (v13(v10, 1, v11))
  {
    v14 = sub_1000039AC(&qword_10036E458);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v15 = v11[5];
    v16 = &v9[v15];
    v17 = &v10[v15];
    *(_QWORD *)v16 = *(_QWORD *)v17;
    v16[8] = v17[8];
    v18 = v11[6];
    v19 = &v9[v18];
    v20 = &v10[v18];
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[8] = v20[8];
    v21 = v11[7];
    v22 = &v9[v21];
    v23 = &v10[v21];
    *(_QWORD *)v22 = *(_QWORD *)v23;
    v22[8] = v23[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v24 = a3[6];
  v25 = (char *)(a1 + v24);
  v26 = (char *)(a2 + v24);
  if (v13((char *)(a2 + v24), 1, v11))
  {
    v27 = sub_1000039AC(&qword_10036E458);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v25, (uint64_t)v26, v6);
    v28 = v11[5];
    v29 = &v25[v28];
    v30 = &v26[v28];
    *(_QWORD *)v29 = *(_QWORD *)v30;
    v29[8] = v30[8];
    v31 = v11[6];
    v32 = &v25[v31];
    v33 = &v26[v31];
    *(_QWORD *)v32 = *(_QWORD *)v33;
    v32[8] = v33[8];
    v34 = v11[7];
    v35 = &v25[v34];
    v36 = &v26[v34];
    *(_QWORD *)v35 = *(_QWORD *)v36;
    v35[8] = v36[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v25, 0, 1, v11);
  }
  v37 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v38 = (char *)(a1 + v37);
  v39 = (char *)(a2 + v37);
  if (v13((char *)(a2 + v37), 1, v11))
  {
    v40 = sub_1000039AC(&qword_10036E458);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v38, (uint64_t)v39, v6);
    v41 = v11[5];
    v42 = &v38[v41];
    v43 = &v39[v41];
    *(_QWORD *)v42 = *(_QWORD *)v43;
    v42[8] = v43[8];
    v44 = v11[6];
    v45 = &v38[v44];
    v46 = &v39[v44];
    *(_QWORD *)v45 = *(_QWORD *)v46;
    v45[8] = v46[8];
    v47 = v11[7];
    v48 = &v38[v47];
    v49 = &v39[v47];
    *(_QWORD *)v48 = *(_QWORD *)v49;
    v48[8] = v49[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v38, 0, 1, v11);
  }
  v50 = a3[9];
  v51 = (char *)(a1 + v50);
  v52 = (char *)(a2 + v50);
  v53 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  v54 = *((_QWORD *)v53 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v54 + 48))(v52, 1, v53))
  {
    v55 = sub_1000039AC(&qword_10036E4C8);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v51, (uint64_t)v52, v6);
    v56 = v53[5];
    v57 = &v51[v56];
    v58 = &v52[v56];
    v59 = *((_QWORD *)v58 + 1);
    *(_QWORD *)v57 = *(_QWORD *)v58;
    *((_QWORD *)v57 + 1) = v59;
    v60 = v53[6];
    v61 = &v51[v60];
    v62 = &v52[v60];
    v63 = *((_QWORD *)v62 + 1);
    *(_QWORD *)v61 = *(_QWORD *)v62;
    *((_QWORD *)v61 + 1) = v63;
    v51[v53[7]] = v52[v53[7]];
    v51[v53[8]] = v52[v53[8]];
    v51[v53[9]] = v52[v53[9]];
    v64 = *(void (**)(char *, _QWORD, uint64_t, int *))(v54 + 56);
    swift_bridgeObjectRetain(v59);
    swift_bridgeObjectRetain(v63);
    v64(v51, 0, 1, v53);
  }
  return a1;
}

uint64_t sub_10012D744(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, int *);
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  int v31;
  int v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  int v49;
  int v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  _BYTE *v66;
  int *v67;
  uint64_t v68;
  uint64_t (*v69)(_BYTE *, uint64_t, int *);
  int v70;
  int v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  void (*v80)(_BYTE *, _QWORD, uint64_t, int *);
  uint64_t v81;
  uint64_t v83;
  char *v84;
  char *v85;
  char v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char v90;
  uint64_t v91;
  char *v92;
  char *v93;
  char v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char v98;
  uint64_t v99;
  char *v100;
  char *v101;
  char v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char v106;
  uint64_t v107;
  char *v108;
  char *v109;
  char v110;
  uint64_t v111;
  char *v112;
  char *v113;
  char v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char v118;
  uint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  void (*v129)(uint64_t, uint64_t, uint64_t);
  uint64_t v130;

  v6 = type metadata accessor for UnknownStorage(0);
  v130 = *(_QWORD *)(v6 - 8);
  v129 = *(void (**)(uint64_t, uint64_t, uint64_t))(v130 + 24);
  v129(a1, a2, v6);
  v7 = a3[5];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(char *, uint64_t, int *))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v130 + 16))(v8, v9, v6);
      v15 = v10[5];
      v16 = &v8[v15];
      v17 = &v9[v15];
      v18 = v17[8];
      *(_QWORD *)v16 = *(_QWORD *)v17;
      v16[8] = v18;
      v19 = v10[6];
      v20 = &v8[v19];
      v21 = &v9[v19];
      v22 = v21[8];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v22;
      v23 = v10[7];
      v24 = &v8[v23];
      v25 = &v9[v23];
      v26 = v25[8];
      *(_QWORD *)v24 = *(_QWORD *)v25;
      v24[8] = v26;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    sub_100004030((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    v27 = sub_1000039AC(&qword_10036E458);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  v129((uint64_t)v8, (uint64_t)v9, v6);
  v83 = v10[5];
  v84 = &v8[v83];
  v85 = &v9[v83];
  v86 = v85[8];
  *(_QWORD *)v84 = *(_QWORD *)v85;
  v84[8] = v86;
  v87 = v10[6];
  v88 = &v8[v87];
  v89 = &v9[v87];
  v90 = v89[8];
  *(_QWORD *)v88 = *(_QWORD *)v89;
  v88[8] = v90;
  v91 = v10[7];
  v92 = &v8[v91];
  v93 = &v9[v91];
  v94 = v93[8];
  *(_QWORD *)v92 = *(_QWORD *)v93;
  v92[8] = v94;
LABEL_7:
  v28 = a3[6];
  v29 = (char *)(a1 + v28);
  v30 = (char *)(a2 + v28);
  v31 = v12((char *)(a1 + v28), 1, v10);
  v32 = v12(v30, 1, v10);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(v130 + 16))(v29, v30, v6);
      v33 = v10[5];
      v34 = &v29[v33];
      v35 = &v30[v33];
      v36 = v35[8];
      *(_QWORD *)v34 = *(_QWORD *)v35;
      v34[8] = v36;
      v37 = v10[6];
      v38 = &v29[v37];
      v39 = &v30[v37];
      v40 = v39[8];
      *(_QWORD *)v38 = *(_QWORD *)v39;
      v38[8] = v40;
      v41 = v10[7];
      v42 = &v29[v41];
      v43 = &v30[v41];
      v44 = v43[8];
      *(_QWORD *)v42 = *(_QWORD *)v43;
      v42[8] = v44;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v11 + 56))(v29, 0, 1, v10);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v32)
  {
    sub_100004030((uint64_t)v29, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_12:
    v45 = sub_1000039AC(&qword_10036E458);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    goto LABEL_13;
  }
  v129((uint64_t)v29, (uint64_t)v30, v6);
  v95 = v10[5];
  v96 = &v29[v95];
  v97 = &v30[v95];
  v98 = v97[8];
  *(_QWORD *)v96 = *(_QWORD *)v97;
  v96[8] = v98;
  v99 = v10[6];
  v100 = &v29[v99];
  v101 = &v30[v99];
  v102 = v101[8];
  *(_QWORD *)v100 = *(_QWORD *)v101;
  v100[8] = v102;
  v103 = v10[7];
  v104 = &v29[v103];
  v105 = &v30[v103];
  v106 = v105[8];
  *(_QWORD *)v104 = *(_QWORD *)v105;
  v104[8] = v106;
LABEL_13:
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v46 = a3[8];
  v47 = (char *)(a1 + v46);
  v48 = (char *)(a2 + v46);
  v49 = v12((char *)(a1 + v46), 1, v10);
  v50 = v12(v48, 1, v10);
  if (v49)
  {
    if (!v50)
    {
      (*(void (**)(char *, char *, uint64_t))(v130 + 16))(v47, v48, v6);
      v51 = v10[5];
      v52 = &v47[v51];
      v53 = &v48[v51];
      v54 = v53[8];
      *(_QWORD *)v52 = *(_QWORD *)v53;
      v52[8] = v54;
      v55 = v10[6];
      v56 = &v47[v55];
      v57 = &v48[v55];
      v58 = v57[8];
      *(_QWORD *)v56 = *(_QWORD *)v57;
      v56[8] = v58;
      v59 = v10[7];
      v60 = &v47[v59];
      v61 = &v48[v59];
      v62 = v61[8];
      *(_QWORD *)v60 = *(_QWORD *)v61;
      v60[8] = v62;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v11 + 56))(v47, 0, 1, v10);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v50)
  {
    sub_100004030((uint64_t)v47, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_18:
    v63 = sub_1000039AC(&qword_10036E458);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    goto LABEL_19;
  }
  v129((uint64_t)v47, (uint64_t)v48, v6);
  v107 = v10[5];
  v108 = &v47[v107];
  v109 = &v48[v107];
  v110 = v109[8];
  *(_QWORD *)v108 = *(_QWORD *)v109;
  v108[8] = v110;
  v111 = v10[6];
  v112 = &v47[v111];
  v113 = &v48[v111];
  v114 = v113[8];
  *(_QWORD *)v112 = *(_QWORD *)v113;
  v112[8] = v114;
  v115 = v10[7];
  v116 = &v47[v115];
  v117 = &v48[v115];
  v118 = v117[8];
  *(_QWORD *)v116 = *(_QWORD *)v117;
  v116[8] = v118;
LABEL_19:
  v64 = a3[9];
  v65 = (_BYTE *)(a1 + v64);
  v66 = (_BYTE *)(a2 + v64);
  v67 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  v68 = *((_QWORD *)v67 - 1);
  v69 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v68 + 48);
  v70 = v69(v65, 1, v67);
  v71 = v69(v66, 1, v67);
  if (!v70)
  {
    if (!v71)
    {
      v129((uint64_t)v65, (uint64_t)v66, v6);
      v119 = v67[5];
      v120 = &v65[v119];
      v121 = &v66[v119];
      *v120 = *v121;
      v122 = v121[1];
      v123 = v120[1];
      v120[1] = v122;
      swift_bridgeObjectRetain(v122);
      swift_bridgeObjectRelease(v123);
      v124 = v67[6];
      v125 = &v65[v124];
      v126 = &v66[v124];
      *v125 = *v126;
      v127 = v126[1];
      v128 = v125[1];
      v125[1] = v127;
      swift_bridgeObjectRetain(v127);
      swift_bridgeObjectRelease(v128);
      v65[v67[7]] = v66[v67[7]];
      v65[v67[8]] = v66[v67[8]];
      v65[v67[9]] = v66[v67[9]];
      return a1;
    }
    sub_100004030((uint64_t)v65, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
    goto LABEL_24;
  }
  if (v71)
  {
LABEL_24:
    v81 = sub_1000039AC(&qword_10036E4C8);
    memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
    return a1;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v130 + 16))(v65, v66, v6);
  v72 = v67[5];
  v73 = &v65[v72];
  v74 = &v66[v72];
  *v73 = *v74;
  v75 = v74[1];
  v73[1] = v75;
  v76 = v67[6];
  v77 = &v65[v76];
  v78 = &v66[v76];
  *v77 = *v78;
  v79 = v78[1];
  v77[1] = v79;
  v65[v67[7]] = v66[v67[7]];
  v65[v67[8]] = v66[v67[8]];
  v65[v67[9]] = v66[v67[9]];
  v80 = *(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v68 + 56);
  swift_bridgeObjectRetain(v75);
  swift_bridgeObjectRetain(v79);
  v80(v65, 0, 1, v67);
  return a1;
}

uint64_t sub_10012DDB0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, int *);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  v13 = *(unsigned int (**)(char *, uint64_t, int *))(v12 + 48);
  if (v13(v10, 1, v11))
  {
    v14 = sub_1000039AC(&qword_10036E458);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v15 = v11[5];
    v16 = &v9[v15];
    v17 = &v10[v15];
    *(_QWORD *)v16 = *(_QWORD *)v17;
    v16[8] = v17[8];
    v18 = v11[6];
    v19 = &v9[v18];
    v20 = &v10[v18];
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[8] = v20[8];
    v21 = v11[7];
    v22 = &v9[v21];
    v23 = &v10[v21];
    *(_QWORD *)v22 = *(_QWORD *)v23;
    v22[8] = v23[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v24 = a3[6];
  v25 = (char *)(a1 + v24);
  v26 = (char *)(a2 + v24);
  if (v13((char *)(a2 + v24), 1, v11))
  {
    v27 = sub_1000039AC(&qword_10036E458);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v25, (uint64_t)v26, v6);
    v28 = v11[5];
    v29 = &v25[v28];
    v30 = &v26[v28];
    *(_QWORD *)v29 = *(_QWORD *)v30;
    v29[8] = v30[8];
    v31 = v11[6];
    v32 = &v25[v31];
    v33 = &v26[v31];
    *(_QWORD *)v32 = *(_QWORD *)v33;
    v32[8] = v33[8];
    v34 = v11[7];
    v35 = &v25[v34];
    v36 = &v26[v34];
    *(_QWORD *)v35 = *(_QWORD *)v36;
    v35[8] = v36[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v25, 0, 1, v11);
  }
  v37 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v38 = (char *)(a1 + v37);
  v39 = (char *)(a2 + v37);
  if (v13((char *)(a2 + v37), 1, v11))
  {
    v40 = sub_1000039AC(&qword_10036E458);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v38, (uint64_t)v39, v6);
    v41 = v11[5];
    v42 = &v38[v41];
    v43 = &v39[v41];
    *(_QWORD *)v42 = *(_QWORD *)v43;
    v42[8] = v43[8];
    v44 = v11[6];
    v45 = &v38[v44];
    v46 = &v39[v44];
    *(_QWORD *)v45 = *(_QWORD *)v46;
    v45[8] = v46[8];
    v47 = v11[7];
    v48 = &v38[v47];
    v49 = &v39[v47];
    *(_QWORD *)v48 = *(_QWORD *)v49;
    v48[8] = v49[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v38, 0, 1, v11);
  }
  v50 = a3[9];
  v51 = (char *)(a1 + v50);
  v52 = (char *)(a2 + v50);
  v53 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  v54 = *((_QWORD *)v53 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v54 + 48))(v52, 1, v53))
  {
    v55 = sub_1000039AC(&qword_10036E4C8);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v51, (uint64_t)v52, v6);
    *(_OWORD *)&v51[v53[5]] = *(_OWORD *)&v52[v53[5]];
    *(_OWORD *)&v51[v53[6]] = *(_OWORD *)&v52[v53[6]];
    v51[v53[7]] = v52[v53[7]];
    v51[v53[8]] = v52[v53[8]];
    v51[v53[9]] = v52[v53[9]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v54 + 56))(v51, 0, 1, v53);
  }
  return a1;
}

uint64_t sub_10012E134(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, int *);
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  int v28;
  int v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  int v43;
  int v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  _BYTE *v57;
  int *v58;
  uint64_t v59;
  uint64_t (*v60)(_BYTE *, uint64_t, int *);
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(uint64_t, uint64_t, uint64_t);
  uint64_t v105;

  v6 = type metadata accessor for UnknownStorage(0);
  v105 = *(_QWORD *)(v6 - 8);
  v104 = *(void (**)(uint64_t, uint64_t, uint64_t))(v105 + 40);
  v104(a1, a2, v6);
  v7 = a3[5];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(char *, uint64_t, int *))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v105 + 32))(v8, v9, v6);
      v15 = v10[5];
      v16 = &v8[v15];
      v17 = &v9[v15];
      *(_QWORD *)v16 = *(_QWORD *)v17;
      v16[8] = v17[8];
      v18 = v10[6];
      v19 = &v8[v18];
      v20 = &v9[v18];
      *(_QWORD *)v19 = *(_QWORD *)v20;
      v19[8] = v20[8];
      v21 = v10[7];
      v22 = &v8[v21];
      v23 = &v9[v21];
      *(_QWORD *)v22 = *(_QWORD *)v23;
      v22[8] = v23[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    sub_100004030((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    v24 = sub_1000039AC(&qword_10036E458);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  v104((uint64_t)v8, (uint64_t)v9, v6);
  v65 = v10[5];
  v66 = &v8[v65];
  v67 = &v9[v65];
  *(_QWORD *)v66 = *(_QWORD *)v67;
  v66[8] = v67[8];
  v68 = v10[6];
  v69 = &v8[v68];
  v70 = &v9[v68];
  *(_QWORD *)v69 = *(_QWORD *)v70;
  v69[8] = v70[8];
  v71 = v10[7];
  v72 = &v8[v71];
  v73 = &v9[v71];
  *(_QWORD *)v72 = *(_QWORD *)v73;
  v72[8] = v73[8];
LABEL_7:
  v25 = a3[6];
  v26 = (char *)(a1 + v25);
  v27 = (char *)(a2 + v25);
  v28 = v12((char *)(a1 + v25), 1, v10);
  v29 = v12(v27, 1, v10);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v105 + 32))(v26, v27, v6);
      v30 = v10[5];
      v31 = &v26[v30];
      v32 = &v27[v30];
      *(_QWORD *)v31 = *(_QWORD *)v32;
      v31[8] = v32[8];
      v33 = v10[6];
      v34 = &v26[v33];
      v35 = &v27[v33];
      *(_QWORD *)v34 = *(_QWORD *)v35;
      v34[8] = v35[8];
      v36 = v10[7];
      v37 = &v26[v36];
      v38 = &v27[v36];
      *(_QWORD *)v37 = *(_QWORD *)v38;
      v37[8] = v38[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v11 + 56))(v26, 0, 1, v10);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v29)
  {
    sub_100004030((uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_12:
    v39 = sub_1000039AC(&qword_10036E458);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    goto LABEL_13;
  }
  v104((uint64_t)v26, (uint64_t)v27, v6);
  v74 = v10[5];
  v75 = &v26[v74];
  v76 = &v27[v74];
  *(_QWORD *)v75 = *(_QWORD *)v76;
  v75[8] = v76[8];
  v77 = v10[6];
  v78 = &v26[v77];
  v79 = &v27[v77];
  *(_QWORD *)v78 = *(_QWORD *)v79;
  v78[8] = v79[8];
  v80 = v10[7];
  v81 = &v26[v80];
  v82 = &v27[v80];
  *(_QWORD *)v81 = *(_QWORD *)v82;
  v81[8] = v82[8];
LABEL_13:
  v40 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v41 = (char *)(a1 + v40);
  v42 = (char *)(a2 + v40);
  v43 = v12((char *)(a1 + v40), 1, v10);
  v44 = v12(v42, 1, v10);
  if (v43)
  {
    if (!v44)
    {
      (*(void (**)(char *, char *, uint64_t))(v105 + 32))(v41, v42, v6);
      v45 = v10[5];
      v46 = &v41[v45];
      v47 = &v42[v45];
      *(_QWORD *)v46 = *(_QWORD *)v47;
      v46[8] = v47[8];
      v48 = v10[6];
      v49 = &v41[v48];
      v50 = &v42[v48];
      *(_QWORD *)v49 = *(_QWORD *)v50;
      v49[8] = v50[8];
      v51 = v10[7];
      v52 = &v41[v51];
      v53 = &v42[v51];
      *(_QWORD *)v52 = *(_QWORD *)v53;
      v52[8] = v53[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v11 + 56))(v41, 0, 1, v10);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v44)
  {
    sub_100004030((uint64_t)v41, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_18:
    v54 = sub_1000039AC(&qword_10036E458);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    goto LABEL_19;
  }
  v104((uint64_t)v41, (uint64_t)v42, v6);
  v83 = v10[5];
  v84 = &v41[v83];
  v85 = &v42[v83];
  *(_QWORD *)v84 = *(_QWORD *)v85;
  v84[8] = v85[8];
  v86 = v10[6];
  v87 = &v41[v86];
  v88 = &v42[v86];
  *(_QWORD *)v87 = *(_QWORD *)v88;
  v87[8] = v88[8];
  v89 = v10[7];
  v90 = &v41[v89];
  v91 = &v42[v89];
  *(_QWORD *)v90 = *(_QWORD *)v91;
  v90[8] = v91[8];
LABEL_19:
  v55 = a3[9];
  v56 = (_BYTE *)(a1 + v55);
  v57 = (_BYTE *)(a2 + v55);
  v58 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  v59 = *((_QWORD *)v58 - 1);
  v60 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v59 + 48);
  v61 = v60(v56, 1, v58);
  v62 = v60(v57, 1, v58);
  if (!v61)
  {
    if (!v62)
    {
      v104((uint64_t)v56, (uint64_t)v57, v6);
      v92 = v58[5];
      v93 = &v56[v92];
      v94 = (uint64_t *)&v57[v92];
      v96 = *v94;
      v95 = v94[1];
      v97 = v93[1];
      *v93 = v96;
      v93[1] = v95;
      swift_bridgeObjectRelease(v97);
      v98 = v58[6];
      v99 = &v56[v98];
      v100 = (uint64_t *)&v57[v98];
      v102 = *v100;
      v101 = v100[1];
      v103 = v99[1];
      *v99 = v102;
      v99[1] = v101;
      swift_bridgeObjectRelease(v103);
      v56[v58[7]] = v57[v58[7]];
      v56[v58[8]] = v57[v58[8]];
      v56[v58[9]] = v57[v58[9]];
      return a1;
    }
    sub_100004030((uint64_t)v56, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
    goto LABEL_24;
  }
  if (v62)
  {
LABEL_24:
    v63 = sub_1000039AC(&qword_10036E4C8);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    return a1;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v105 + 32))(v56, v57, v6);
  *(_OWORD *)&v56[v58[5]] = *(_OWORD *)&v57[v58[5]];
  *(_OWORD *)&v56[v58[6]] = *(_OWORD *)&v57[v58[6]];
  v56[v58[7]] = v57[v58[7]];
  v56[v58[8]] = v57[v58[8]];
  v56[v58[9]] = v57[v58[9]];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v59 + 56))(v56, 0, 1, v58);
  return a1;
}

uint64_t sub_10012E750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10012E75C);
}

uint64_t sub_10012E75C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = sub_1000039AC(&qword_10036E458);
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    v11 = v9;
    v12 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  if ((_DWORD)a2 != 236)
  {
    v11 = sub_1000039AC(&qword_10036E4C8);
    v10 = *(_QWORD *)(v11 - 8);
    v12 = a3[9];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  if (*(unsigned __int8 *)(a1 + a3[7]) <= 0x13u)
    v13 = 19;
  else
    v13 = *(unsigned __int8 *)(a1 + a3[7]);
  v14 = v13 - 19;
  if (*(unsigned __int8 *)(a1 + a3[7]) >= 0x13u)
    return v14;
  else
    return 0;
}

uint64_t sub_10012E834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10012E840);
}

uint64_t sub_10012E840(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v8 = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = sub_1000039AC(&qword_10036E458);
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[5];
    }
    else
    {
      if (a3 == 236)
      {
        *(_BYTE *)(a1 + a4[7]) = a2 + 19;
        return result;
      }
      v10 = sub_1000039AC(&qword_10036E4C8);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[9];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_10012E90C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v8 = *(_QWORD *)(v2 - 8) + 64;
    sub_10001198C(319, (unint64_t *)&unk_10036FA60, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v5 <= 0x3F)
    {
      v9 = *(_QWORD *)(v4 - 8) + 64;
      v10 = v9;
      v11 = &unk_1002D8258;
      v12 = v9;
      sub_10001198C(319, (unint64_t *)&unk_100370900, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
      if (v7 <= 0x3F)
      {
        v13 = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 6, &v8, a1 + 16);
      }
    }
  }
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_WorkoutEvent.EventType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEE)
    goto LABEL_17;
  if (a2 + 18 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 18) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 18;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 18;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 18;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x13;
  v8 = v6 - 19;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_WorkoutEvent.EventType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 18 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 18) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xED)
    return ((uint64_t (*)(void))((char *)&loc_10012EAB4 + 4 * byte_1002CAF5B[v4]))();
  *a1 = a2 + 18;
  return ((uint64_t (*)(void))((char *)sub_10012EAE8 + 4 * byte_1002CAF56[v4]))();
}

uint64_t sub_10012EAE8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10012EAF0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10012EAF8);
  return result;
}

uint64_t sub_10012EB04(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10012EB0CLL);
  *(_BYTE *)result = a2 + 18;
  return result;
}

uint64_t sub_10012EB10(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10012EB18(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent.EventType()
{
  return &type metadata for CLP_LogEntry_PrivateData_WorkoutEvent.EventType;
}

uint64_t sub_10012EB34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10012EB40);
}

uint64_t sub_10012EB44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10012EB50);
}

_QWORD *sub_10012EB54(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v36 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v36 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v36);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v9[4] = v10[4];
    *(_DWORD *)v9 = *(_DWORD *)v10;
    v11 = a3[7];
    v12 = a3[8];
    v13 = (char *)a1 + v11;
    v14 = (char *)a2 + v11;
    v13[4] = v14[4];
    *(_DWORD *)v13 = *(_DWORD *)v14;
    v15 = (char *)a1 + v12;
    v16 = (char *)a2 + v12;
    *(_DWORD *)v15 = *(_DWORD *)v16;
    v15[4] = v16[4];
    v17 = a3[9];
    v18 = a3[10];
    v19 = (char *)a1 + v17;
    v20 = (char *)a2 + v17;
    *(_DWORD *)v19 = *(_DWORD *)v20;
    v19[4] = v20[4];
    v21 = (char *)a1 + v18;
    v22 = (char *)a2 + v18;
    LODWORD(v19) = *(_DWORD *)v22;
    v21[4] = v22[4];
    *(_DWORD *)v21 = (_DWORD)v19;
    v23 = a3[11];
    v24 = a3[12];
    v25 = (char *)a1 + v23;
    v26 = (char *)a2 + v23;
    *(_DWORD *)v25 = *(_DWORD *)v26;
    v25[4] = v26[4];
    v27 = (char *)a1 + v24;
    v28 = (char *)a2 + v24;
    *(_DWORD *)v27 = *(_DWORD *)v28;
    v27[4] = v28[4];
    v29 = a3[13];
    v30 = a3[14];
    v31 = (char *)a1 + v29;
    v32 = (char *)a2 + v29;
    *(_DWORD *)v31 = *(_DWORD *)v32;
    v31[4] = v32[4];
    *((_BYTE *)a1 + v30) = *((_BYTE *)a2 + v30);
    v33 = a3[15];
    v34 = (char *)a1 + v33;
    v35 = (char *)a2 + v33;
    *(_DWORD *)v34 = *(_DWORD *)v35;
    v34[4] = v35[4];
  }
  return a1;
}

uint64_t sub_10012ECD0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)(v8 + 4) = *(_BYTE *)(v9 + 4);
  *(_DWORD *)v8 = *(_DWORD *)v9;
  v10 = a3[7];
  v11 = a3[8];
  v12 = a1 + v10;
  v13 = a2 + v10;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  v14 = a1 + v11;
  v15 = a2 + v11;
  *(_DWORD *)v14 = *(_DWORD *)v15;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  v16 = a3[9];
  v17 = a3[10];
  v18 = a1 + v16;
  v19 = a2 + v16;
  *(_DWORD *)v18 = *(_DWORD *)v19;
  *(_BYTE *)(v18 + 4) = *(_BYTE *)(v19 + 4);
  v20 = a1 + v17;
  v21 = a2 + v17;
  LODWORD(v18) = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = *(_BYTE *)(v21 + 4);
  *(_DWORD *)v20 = v18;
  v22 = a3[11];
  v23 = a3[12];
  v24 = a1 + v22;
  v25 = a2 + v22;
  *(_DWORD *)v24 = *(_DWORD *)v25;
  *(_BYTE *)(v24 + 4) = *(_BYTE *)(v25 + 4);
  v26 = a1 + v23;
  v27 = a2 + v23;
  *(_DWORD *)v26 = *(_DWORD *)v27;
  *(_BYTE *)(v26 + 4) = *(_BYTE *)(v27 + 4);
  v28 = a3[13];
  v29 = a3[14];
  v30 = a1 + v28;
  v31 = a2 + v28;
  *(_DWORD *)v30 = *(_DWORD *)v31;
  *(_BYTE *)(v30 + 4) = *(_BYTE *)(v31 + 4);
  *(_BYTE *)(a1 + v29) = *(_BYTE *)(a2 + v29);
  v32 = a3[15];
  v33 = a1 + v32;
  v34 = a2 + v32;
  *(_DWORD *)v33 = *(_DWORD *)v34;
  *(_BYTE *)(v33 + 4) = *(_BYTE *)(v34 + 4);
  return a1;
}

uint64_t sub_10012EE20(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v7 = a3[6];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 4);
  *(_DWORD *)v8 = *(_DWORD *)v9;
  *(_BYTE *)(v8 + 4) = v10;
  v11 = a3[7];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = v14;
  v15 = a3[8];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = *(_BYTE *)(v17 + 4);
  *(_DWORD *)v16 = *(_DWORD *)v17;
  *(_BYTE *)(v16 + 4) = v18;
  v19 = a3[9];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = *(_BYTE *)(v21 + 4);
  *(_DWORD *)v20 = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = v22;
  v23 = a3[10];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = *(_BYTE *)(v25 + 4);
  *(_DWORD *)v24 = *(_DWORD *)v25;
  *(_BYTE *)(v24 + 4) = v26;
  v27 = a3[11];
  v28 = a1 + v27;
  v29 = (int *)(a2 + v27);
  v30 = *v29;
  *(_BYTE *)(v28 + 4) = *((_BYTE *)v29 + 4);
  *(_DWORD *)v28 = v30;
  v31 = a3[12];
  v32 = a1 + v31;
  v33 = (int *)(a2 + v31);
  v34 = *v33;
  *(_BYTE *)(v32 + 4) = *((_BYTE *)v33 + 4);
  *(_DWORD *)v32 = v34;
  v35 = a3[13];
  v36 = a1 + v35;
  v37 = (int *)(a2 + v35);
  v38 = *v37;
  *(_BYTE *)(v36 + 4) = *((_BYTE *)v37 + 4);
  *(_DWORD *)v36 = v38;
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  v39 = a3[15];
  v40 = a1 + v39;
  v41 = a2 + v39;
  LOBYTE(v38) = *(_BYTE *)(v41 + 4);
  *(_DWORD *)v40 = *(_DWORD *)v41;
  *(_BYTE *)(v40 + 4) = v38;
  return a1;
}

uint64_t sub_10012EF84(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)(v8 + 4) = *(_BYTE *)(v9 + 4);
  *(_DWORD *)v8 = *(_DWORD *)v9;
  v10 = a3[7];
  v11 = a3[8];
  v12 = a1 + v10;
  v13 = a2 + v10;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  v14 = a1 + v11;
  v15 = a2 + v11;
  *(_DWORD *)v14 = *(_DWORD *)v15;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  v16 = a3[9];
  v17 = a3[10];
  v18 = a1 + v16;
  v19 = a2 + v16;
  *(_DWORD *)v18 = *(_DWORD *)v19;
  *(_BYTE *)(v18 + 4) = *(_BYTE *)(v19 + 4);
  v20 = a1 + v17;
  v21 = a2 + v17;
  LODWORD(v18) = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = *(_BYTE *)(v21 + 4);
  *(_DWORD *)v20 = v18;
  v22 = a3[11];
  v23 = a3[12];
  v24 = a1 + v22;
  v25 = a2 + v22;
  *(_DWORD *)v24 = *(_DWORD *)v25;
  *(_BYTE *)(v24 + 4) = *(_BYTE *)(v25 + 4);
  v26 = a1 + v23;
  v27 = a2 + v23;
  *(_DWORD *)v26 = *(_DWORD *)v27;
  *(_BYTE *)(v26 + 4) = *(_BYTE *)(v27 + 4);
  v28 = a3[13];
  v29 = a3[14];
  v30 = a1 + v28;
  v31 = a2 + v28;
  *(_DWORD *)v30 = *(_DWORD *)v31;
  *(_BYTE *)(v30 + 4) = *(_BYTE *)(v31 + 4);
  *(_BYTE *)(a1 + v29) = *(_BYTE *)(a2 + v29);
  v32 = a3[15];
  v33 = a1 + v32;
  v34 = a2 + v32;
  *(_DWORD *)v33 = *(_DWORD *)v34;
  *(_BYTE *)(v33 + 4) = *(_BYTE *)(v34 + 4);
  return a1;
}

uint64_t sub_10012F0D4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)(v8 + 4) = *(_BYTE *)(v9 + 4);
  *(_DWORD *)v8 = *(_DWORD *)v9;
  v10 = a3[7];
  v11 = a3[8];
  v12 = a1 + v10;
  v13 = a2 + v10;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  v14 = a1 + v11;
  v15 = a2 + v11;
  *(_DWORD *)v14 = *(_DWORD *)v15;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  v16 = a3[9];
  v17 = a3[10];
  v18 = a1 + v16;
  v19 = a2 + v16;
  *(_DWORD *)v18 = *(_DWORD *)v19;
  *(_BYTE *)(v18 + 4) = *(_BYTE *)(v19 + 4);
  v20 = a1 + v17;
  v21 = a2 + v17;
  LODWORD(v18) = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = *(_BYTE *)(v21 + 4);
  *(_DWORD *)v20 = v18;
  v22 = a3[11];
  v23 = a3[12];
  v24 = a1 + v22;
  v25 = a2 + v22;
  *(_DWORD *)v24 = *(_DWORD *)v25;
  *(_BYTE *)(v24 + 4) = *(_BYTE *)(v25 + 4);
  v26 = a1 + v23;
  v27 = a2 + v23;
  *(_DWORD *)v26 = *(_DWORD *)v27;
  *(_BYTE *)(v26 + 4) = *(_BYTE *)(v27 + 4);
  v28 = a3[13];
  v29 = a3[14];
  v30 = a1 + v28;
  v31 = a2 + v28;
  *(_DWORD *)v30 = *(_DWORD *)v31;
  *(_BYTE *)(v30 + 4) = *(_BYTE *)(v31 + 4);
  *(_BYTE *)(a1 + v29) = *(_BYTE *)(a2 + v29);
  v32 = a3[15];
  v33 = a1 + v32;
  v34 = a2 + v32;
  *(_DWORD *)v33 = *(_DWORD *)v34;
  *(_BYTE *)(v33 + 4) = *(_BYTE *)(v34 + 4);
  return a1;
}

uint64_t sub_10012F224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10012F230);
}

uint64_t sub_10012F230(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) <= 3u)
    v9 = 3;
  else
    v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  v10 = v9 - 3;
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) >= 3u)
    return v10;
  else
    return 0;
}

uint64_t sub_10012F2B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10012F2C0);
}

uint64_t sub_10012F2C0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 3;
  return result;
}

uint64_t sub_10012F338(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[12];

  result = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1002D8028;
    v4[2] = &unk_1002D7AC8;
    v4[3] = &unk_1002D7AC8;
    v4[4] = &unk_1002D7AC8;
    v4[5] = &unk_1002D7AC8;
    v4[6] = &unk_1002D7AC8;
    v4[7] = &unk_1002D7AC8;
    v4[8] = &unk_1002D7AC8;
    v4[9] = &unk_1002D7AC8;
    v4[10] = &unk_1002D82D8;
    v4[11] = &unk_1002D7AC8;
    swift_initStructMetadata(a1, 256, 12, v4, a1 + 16);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType()
{
  return &type metadata for CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType()
{
  return &type metadata for CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType;
}

uint64_t *sub_10012F3EC(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v13 = *((_QWORD *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      v14 = sub_1000039AC(&qword_10036E458);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      v16 = v12[5];
      v17 = &v10[v16];
      v18 = &v11[v16];
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v17[8] = v18[8];
      v19 = v12[6];
      v20 = &v10[v19];
      v21 = &v11[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v12[7];
      v23 = &v10[v22];
      v24 = &v11[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    v25 = a3[6];
    v26 = a3[7];
    v27 = (char *)a1 + v25;
    v28 = (char *)a2 + v25;
    *(_DWORD *)v27 = *(_DWORD *)v28;
    v27[4] = v28[4];
    v29 = (char *)a1 + v26;
    v30 = (char *)a2 + v26;
    v31 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
    v32 = *((_QWORD *)v31 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v32 + 48))(v30, 1, v31))
    {
      v33 = sub_1000039AC(&qword_10036E4D8);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v29, (uint64_t *)v30, v7);
      v29[v31[5]] = v30[v31[5]];
      v34 = v31[6];
      v35 = &v29[v34];
      v36 = &v30[v34];
      v35[4] = v36[4];
      *(_DWORD *)v35 = *(_DWORD *)v36;
      v37 = v31[7];
      v38 = &v29[v37];
      v39 = &v30[v37];
      v38[4] = v39[4];
      *(_DWORD *)v38 = *(_DWORD *)v39;
      v40 = v31[8];
      v41 = &v29[v40];
      v42 = &v30[v40];
      v41[4] = v42[4];
      *(_DWORD *)v41 = *(_DWORD *)v42;
      v43 = v31[9];
      v44 = &v29[v43];
      v45 = &v30[v43];
      v44[4] = v45[4];
      *(_DWORD *)v44 = *(_DWORD *)v45;
      v46 = v31[10];
      v47 = &v29[v46];
      v48 = &v30[v46];
      v47[4] = v48[4];
      *(_DWORD *)v47 = *(_DWORD *)v48;
      v49 = v31[11];
      v50 = &v29[v49];
      v51 = &v30[v49];
      *(_DWORD *)v50 = *(_DWORD *)v51;
      v50[4] = v51[4];
      v52 = v31[12];
      v53 = &v29[v52];
      v54 = &v30[v52];
      *(_DWORD *)v53 = *(_DWORD *)v54;
      v53[4] = v54[4];
      v55 = v31[13];
      v56 = &v29[v55];
      v57 = &v30[v55];
      *(_DWORD *)v56 = *(_DWORD *)v57;
      v56[4] = v57[4];
      v29[v31[14]] = v30[v31[14]];
      v58 = v31[15];
      v59 = &v29[v58];
      v60 = &v30[v58];
      *(_DWORD *)v59 = *(_DWORD *)v60;
      v59[4] = v60[4];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v32 + 56))(v29, 0, 1, v31);
    }
  }
  return a1;
}

uint64_t sub_10012F704(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void (*v10)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v10(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
    v10(v5, v4);
  v7 = a1 + *(int *)(a2 + 28);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v7, v4);
  return result;
}

uint64_t sub_10012F7E0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_1000039AC(&qword_10036E458);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[6];
  v24 = a3[7];
  v25 = a1 + v23;
  v26 = a2 + v23;
  *(_DWORD *)v25 = *(_DWORD *)v26;
  *(_BYTE *)(v25 + 4) = *(_BYTE *)(v26 + 4);
  v27 = (char *)(a1 + v24);
  v28 = (char *)(a2 + v24);
  v29 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  v30 = *((_QWORD *)v29 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v30 + 48))(v28, 1, v29))
  {
    v31 = sub_1000039AC(&qword_10036E4D8);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v27, (uint64_t)v28, v6);
    v27[v29[5]] = v28[v29[5]];
    v32 = v29[6];
    v33 = &v27[v32];
    v34 = &v28[v32];
    v33[4] = v34[4];
    *(_DWORD *)v33 = *(_DWORD *)v34;
    v35 = v29[7];
    v36 = &v27[v35];
    v37 = &v28[v35];
    v36[4] = v37[4];
    *(_DWORD *)v36 = *(_DWORD *)v37;
    v38 = v29[8];
    v39 = &v27[v38];
    v40 = &v28[v38];
    v39[4] = v40[4];
    *(_DWORD *)v39 = *(_DWORD *)v40;
    v41 = v29[9];
    v42 = &v27[v41];
    v43 = &v28[v41];
    v42[4] = v43[4];
    *(_DWORD *)v42 = *(_DWORD *)v43;
    v44 = v29[10];
    v45 = &v27[v44];
    v46 = &v28[v44];
    v45[4] = v46[4];
    *(_DWORD *)v45 = *(_DWORD *)v46;
    v47 = v29[11];
    v48 = &v27[v47];
    v49 = &v28[v47];
    *(_DWORD *)v48 = *(_DWORD *)v49;
    v48[4] = v49[4];
    v50 = v29[12];
    v51 = &v27[v50];
    v52 = &v28[v50];
    *(_DWORD *)v51 = *(_DWORD *)v52;
    v51[4] = v52[4];
    v53 = v29[13];
    v54 = &v27[v53];
    v55 = &v28[v53];
    *(_DWORD *)v54 = *(_DWORD *)v55;
    v54[4] = v55[4];
    v27[v29[14]] = v28[v29[14]];
    v56 = v29[15];
    v57 = &v27[v56];
    v58 = &v28[v56];
    *(_DWORD *)v57 = *(_DWORD *)v58;
    v57[4] = v58[4];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v30 + 56))(v27, 0, 1, v29);
  }
  return a1;
}

uint64_t sub_10012FACC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, int *);
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  int v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  int *v35;
  uint64_t v36;
  uint64_t (*v37)(_BYTE *, uint64_t, int *);
  int v38;
  int v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char v59;
  uint64_t v60;
  char *v61;
  char *v62;
  int v63;
  uint64_t v64;
  char *v65;
  char *v66;
  int v67;
  uint64_t v68;
  char *v69;
  char *v70;
  int v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v77;
  char *v78;
  char *v79;
  char v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char v96;
  uint64_t v97;
  char *v98;
  char *v99;
  char v100;
  uint64_t v101;
  char *v102;
  char *v103;
  char v104;
  uint64_t v105;
  char *v106;
  char *v107;
  char v108;
  uint64_t v109;
  char *v110;
  char *v111;
  int v112;
  uint64_t v113;
  char *v114;
  char *v115;
  int v116;
  uint64_t v117;
  char *v118;
  char *v119;
  int v120;
  uint64_t v121;
  char *v122;
  char *v123;
  void (*v124)(uint64_t, uint64_t, uint64_t);
  uint64_t v125;

  v6 = type metadata accessor for UnknownStorage(0);
  v125 = *(_QWORD *)(v6 - 8);
  v124 = *(void (**)(uint64_t, uint64_t, uint64_t))(v125 + 24);
  v124(a1, a2, v6);
  v7 = a3[5];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(char *, uint64_t, int *))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v125 + 16))(v8, v9, v6);
      v15 = v10[5];
      v16 = &v8[v15];
      v17 = &v9[v15];
      v18 = v17[8];
      *(_QWORD *)v16 = *(_QWORD *)v17;
      v16[8] = v18;
      v19 = v10[6];
      v20 = &v8[v19];
      v21 = &v9[v19];
      v22 = v21[8];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v22;
      v23 = v10[7];
      v24 = &v8[v23];
      v25 = &v9[v23];
      v26 = v25[8];
      *(_QWORD *)v24 = *(_QWORD *)v25;
      v24[8] = v26;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    sub_100004030((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    v27 = sub_1000039AC(&qword_10036E458);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  v124((uint64_t)v8, (uint64_t)v9, v6);
  v77 = v10[5];
  v78 = &v8[v77];
  v79 = &v9[v77];
  v80 = v79[8];
  *(_QWORD *)v78 = *(_QWORD *)v79;
  v78[8] = v80;
  v81 = v10[6];
  v82 = &v8[v81];
  v83 = &v9[v81];
  v84 = v83[8];
  *(_QWORD *)v82 = *(_QWORD *)v83;
  v82[8] = v84;
  v85 = v10[7];
  v86 = &v8[v85];
  v87 = &v9[v85];
  v88 = v87[8];
  *(_QWORD *)v86 = *(_QWORD *)v87;
  v86[8] = v88;
LABEL_7:
  v28 = a3[6];
  v29 = a1 + v28;
  v30 = (int *)(a2 + v28);
  v31 = *v30;
  *(_BYTE *)(v29 + 4) = *((_BYTE *)v30 + 4);
  *(_DWORD *)v29 = v31;
  v32 = a3[7];
  v33 = (_BYTE *)(a1 + v32);
  v34 = (_BYTE *)(a2 + v32);
  v35 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  v36 = *((_QWORD *)v35 - 1);
  v37 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v36 + 48);
  v38 = v37(v33, 1, v35);
  v39 = v37(v34, 1, v35);
  if (!v38)
  {
    if (!v39)
    {
      v124((uint64_t)v33, (uint64_t)v34, v6);
      v33[v35[5]] = v34[v35[5]];
      v89 = v35[6];
      v90 = &v33[v89];
      v91 = &v34[v89];
      v92 = v91[4];
      *(_DWORD *)v90 = *(_DWORD *)v91;
      v90[4] = v92;
      v93 = v35[7];
      v94 = &v33[v93];
      v95 = &v34[v93];
      v96 = v95[4];
      *(_DWORD *)v94 = *(_DWORD *)v95;
      v94[4] = v96;
      v97 = v35[8];
      v98 = &v33[v97];
      v99 = &v34[v97];
      v100 = v99[4];
      *(_DWORD *)v98 = *(_DWORD *)v99;
      v98[4] = v100;
      v101 = v35[9];
      v102 = &v33[v101];
      v103 = &v34[v101];
      v104 = v103[4];
      *(_DWORD *)v102 = *(_DWORD *)v103;
      v102[4] = v104;
      v105 = v35[10];
      v106 = &v33[v105];
      v107 = &v34[v105];
      v108 = v107[4];
      *(_DWORD *)v106 = *(_DWORD *)v107;
      v106[4] = v108;
      v109 = v35[11];
      v110 = &v33[v109];
      v111 = &v34[v109];
      v112 = *(_DWORD *)v111;
      v110[4] = v111[4];
      *(_DWORD *)v110 = v112;
      v113 = v35[12];
      v114 = &v33[v113];
      v115 = &v34[v113];
      v116 = *(_DWORD *)v115;
      v114[4] = v115[4];
      *(_DWORD *)v114 = v116;
      v117 = v35[13];
      v118 = &v33[v117];
      v119 = &v34[v117];
      v120 = *(_DWORD *)v119;
      v118[4] = v119[4];
      *(_DWORD *)v118 = v120;
      v33[v35[14]] = v34[v35[14]];
      v121 = v35[15];
      v122 = &v33[v121];
      v123 = &v34[v121];
      LOBYTE(v120) = v123[4];
      *(_DWORD *)v122 = *(_DWORD *)v123;
      v122[4] = v120;
      return a1;
    }
    sub_100004030((uint64_t)v33, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
    goto LABEL_12;
  }
  if (v39)
  {
LABEL_12:
    v75 = sub_1000039AC(&qword_10036E4D8);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
    return a1;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v125 + 16))(v33, v34, v6);
  v33[v35[5]] = v34[v35[5]];
  v40 = v35[6];
  v41 = &v33[v40];
  v42 = &v34[v40];
  v43 = v42[4];
  *(_DWORD *)v41 = *(_DWORD *)v42;
  v41[4] = v43;
  v44 = v35[7];
  v45 = &v33[v44];
  v46 = &v34[v44];
  v47 = v46[4];
  *(_DWORD *)v45 = *(_DWORD *)v46;
  v45[4] = v47;
  v48 = v35[8];
  v49 = &v33[v48];
  v50 = &v34[v48];
  v51 = v50[4];
  *(_DWORD *)v49 = *(_DWORD *)v50;
  v49[4] = v51;
  v52 = v35[9];
  v53 = &v33[v52];
  v54 = &v34[v52];
  v55 = v54[4];
  *(_DWORD *)v53 = *(_DWORD *)v54;
  v53[4] = v55;
  v56 = v35[10];
  v57 = &v33[v56];
  v58 = &v34[v56];
  v59 = v58[4];
  *(_DWORD *)v57 = *(_DWORD *)v58;
  v57[4] = v59;
  v60 = v35[11];
  v61 = &v33[v60];
  v62 = &v34[v60];
  v63 = *(_DWORD *)v62;
  v61[4] = v62[4];
  *(_DWORD *)v61 = v63;
  v64 = v35[12];
  v65 = &v33[v64];
  v66 = &v34[v64];
  v67 = *(_DWORD *)v66;
  v65[4] = v66[4];
  *(_DWORD *)v65 = v67;
  v68 = v35[13];
  v69 = &v33[v68];
  v70 = &v34[v68];
  v71 = *(_DWORD *)v70;
  v69[4] = v70[4];
  *(_DWORD *)v69 = v71;
  v33[v35[14]] = v34[v35[14]];
  v72 = v35[15];
  v73 = &v33[v72];
  v74 = &v34[v72];
  LOBYTE(v71) = v74[4];
  *(_DWORD *)v73 = *(_DWORD *)v74;
  v73[4] = v71;
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v36 + 56))(v33, 0, 1, v35);
  return a1;
}

uint64_t sub_10012FFCC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_1000039AC(&qword_10036E458);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[6];
  v24 = a3[7];
  v25 = a1 + v23;
  v26 = a2 + v23;
  *(_DWORD *)v25 = *(_DWORD *)v26;
  *(_BYTE *)(v25 + 4) = *(_BYTE *)(v26 + 4);
  v27 = (char *)(a1 + v24);
  v28 = (char *)(a2 + v24);
  v29 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  v30 = *((_QWORD *)v29 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v30 + 48))(v28, 1, v29))
  {
    v31 = sub_1000039AC(&qword_10036E4D8);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v27, (uint64_t)v28, v6);
    v27[v29[5]] = v28[v29[5]];
    v32 = v29[6];
    v33 = &v27[v32];
    v34 = &v28[v32];
    v33[4] = v34[4];
    *(_DWORD *)v33 = *(_DWORD *)v34;
    v35 = v29[7];
    v36 = &v27[v35];
    v37 = &v28[v35];
    v36[4] = v37[4];
    *(_DWORD *)v36 = *(_DWORD *)v37;
    v38 = v29[8];
    v39 = &v27[v38];
    v40 = &v28[v38];
    v39[4] = v40[4];
    *(_DWORD *)v39 = *(_DWORD *)v40;
    v41 = v29[9];
    v42 = &v27[v41];
    v43 = &v28[v41];
    v42[4] = v43[4];
    *(_DWORD *)v42 = *(_DWORD *)v43;
    v44 = v29[10];
    v45 = &v27[v44];
    v46 = &v28[v44];
    v45[4] = v46[4];
    *(_DWORD *)v45 = *(_DWORD *)v46;
    v47 = v29[11];
    v48 = &v27[v47];
    v49 = &v28[v47];
    *(_DWORD *)v48 = *(_DWORD *)v49;
    v48[4] = v49[4];
    v50 = v29[12];
    v51 = &v27[v50];
    v52 = &v28[v50];
    *(_DWORD *)v51 = *(_DWORD *)v52;
    v51[4] = v52[4];
    v53 = v29[13];
    v54 = &v27[v53];
    v55 = &v28[v53];
    *(_DWORD *)v54 = *(_DWORD *)v55;
    v54[4] = v55[4];
    v27[v29[14]] = v28[v29[14]];
    v56 = v29[15];
    v57 = &v27[v56];
    v58 = &v28[v56];
    *(_DWORD *)v57 = *(_DWORD *)v58;
    v57[4] = v58[4];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v30 + 56))(v27, 0, 1, v29);
  }
  return a1;
}

uint64_t sub_1001302B8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, int *);
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  int *v31;
  uint64_t v32;
  uint64_t (*v33)(_BYTE *, uint64_t, int *);
  int v34;
  int v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  void (*v101)(uint64_t, uint64_t, uint64_t);
  uint64_t v102;

  v6 = type metadata accessor for UnknownStorage(0);
  v102 = *(_QWORD *)(v6 - 8);
  v101 = *(void (**)(uint64_t, uint64_t, uint64_t))(v102 + 40);
  v101(a1, a2, v6);
  v7 = a3[5];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(char *, uint64_t, int *))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v102 + 32))(v8, v9, v6);
      v15 = v10[5];
      v16 = &v8[v15];
      v17 = &v9[v15];
      *(_QWORD *)v16 = *(_QWORD *)v17;
      v16[8] = v17[8];
      v18 = v10[6];
      v19 = &v8[v18];
      v20 = &v9[v18];
      *(_QWORD *)v19 = *(_QWORD *)v20;
      v19[8] = v20[8];
      v21 = v10[7];
      v22 = &v8[v21];
      v23 = &v9[v21];
      *(_QWORD *)v22 = *(_QWORD *)v23;
      v22[8] = v23[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    sub_100004030((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    v24 = sub_1000039AC(&qword_10036E458);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  v101((uint64_t)v8, (uint64_t)v9, v6);
  v65 = v10[5];
  v66 = &v8[v65];
  v67 = &v9[v65];
  *(_QWORD *)v66 = *(_QWORD *)v67;
  v66[8] = v67[8];
  v68 = v10[6];
  v69 = &v8[v68];
  v70 = &v9[v68];
  *(_QWORD *)v69 = *(_QWORD *)v70;
  v69[8] = v70[8];
  v71 = v10[7];
  v72 = &v8[v71];
  v73 = &v9[v71];
  *(_QWORD *)v72 = *(_QWORD *)v73;
  v72[8] = v73[8];
LABEL_7:
  v25 = a3[6];
  v26 = a3[7];
  v27 = a1 + v25;
  v28 = a2 + v25;
  *(_DWORD *)v27 = *(_DWORD *)v28;
  *(_BYTE *)(v27 + 4) = *(_BYTE *)(v28 + 4);
  v29 = (_BYTE *)(a1 + v26);
  v30 = (_BYTE *)(a2 + v26);
  v31 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  v32 = *((_QWORD *)v31 - 1);
  v33 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v32 + 48);
  v34 = v33(v29, 1, v31);
  v35 = v33(v30, 1, v31);
  if (!v34)
  {
    if (!v35)
    {
      v101((uint64_t)v29, (uint64_t)v30, v6);
      v29[v31[5]] = v30[v31[5]];
      v74 = v31[6];
      v75 = &v29[v74];
      v76 = &v30[v74];
      v75[4] = v76[4];
      *(_DWORD *)v75 = *(_DWORD *)v76;
      v77 = v31[7];
      v78 = &v29[v77];
      v79 = &v30[v77];
      v78[4] = v79[4];
      *(_DWORD *)v78 = *(_DWORD *)v79;
      v80 = v31[8];
      v81 = &v29[v80];
      v82 = &v30[v80];
      v81[4] = v82[4];
      *(_DWORD *)v81 = *(_DWORD *)v82;
      v83 = v31[9];
      v84 = &v29[v83];
      v85 = &v30[v83];
      v84[4] = v85[4];
      *(_DWORD *)v84 = *(_DWORD *)v85;
      v86 = v31[10];
      v87 = &v29[v86];
      v88 = &v30[v86];
      v87[4] = v88[4];
      *(_DWORD *)v87 = *(_DWORD *)v88;
      v89 = v31[11];
      v90 = &v29[v89];
      v91 = &v30[v89];
      *(_DWORD *)v90 = *(_DWORD *)v91;
      v90[4] = v91[4];
      v92 = v31[12];
      v93 = &v29[v92];
      v94 = &v30[v92];
      *(_DWORD *)v93 = *(_DWORD *)v94;
      v93[4] = v94[4];
      v95 = v31[13];
      v96 = &v29[v95];
      v97 = &v30[v95];
      *(_DWORD *)v96 = *(_DWORD *)v97;
      v96[4] = v97[4];
      v29[v31[14]] = v30[v31[14]];
      v98 = v31[15];
      v99 = &v29[v98];
      v100 = &v30[v98];
      *(_DWORD *)v99 = *(_DWORD *)v100;
      v99[4] = v100[4];
      return a1;
    }
    sub_100004030((uint64_t)v29, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
    goto LABEL_12;
  }
  if (v35)
  {
LABEL_12:
    v63 = sub_1000039AC(&qword_10036E4D8);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    return a1;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v102 + 32))(v29, v30, v6);
  v29[v31[5]] = v30[v31[5]];
  v36 = v31[6];
  v37 = &v29[v36];
  v38 = &v30[v36];
  v37[4] = v38[4];
  *(_DWORD *)v37 = *(_DWORD *)v38;
  v39 = v31[7];
  v40 = &v29[v39];
  v41 = &v30[v39];
  v40[4] = v41[4];
  *(_DWORD *)v40 = *(_DWORD *)v41;
  v42 = v31[8];
  v43 = &v29[v42];
  v44 = &v30[v42];
  v43[4] = v44[4];
  *(_DWORD *)v43 = *(_DWORD *)v44;
  v45 = v31[9];
  v46 = &v29[v45];
  v47 = &v30[v45];
  v46[4] = v47[4];
  *(_DWORD *)v46 = *(_DWORD *)v47;
  v48 = v31[10];
  v49 = &v29[v48];
  v50 = &v30[v48];
  v49[4] = v50[4];
  *(_DWORD *)v49 = *(_DWORD *)v50;
  v51 = v31[11];
  v52 = &v29[v51];
  v53 = &v30[v51];
  *(_DWORD *)v52 = *(_DWORD *)v53;
  v52[4] = v53[4];
  v54 = v31[12];
  v55 = &v29[v54];
  v56 = &v30[v54];
  *(_DWORD *)v55 = *(_DWORD *)v56;
  v55[4] = v56[4];
  v57 = v31[13];
  v58 = &v29[v57];
  v59 = &v30[v57];
  *(_DWORD *)v58 = *(_DWORD *)v59;
  v58[4] = v59[4];
  v29[v31[14]] = v30[v31[14]];
  v60 = v31[15];
  v61 = &v29[v60];
  v62 = &v30[v60];
  *(_DWORD *)v61 = *(_DWORD *)v62;
  v61[4] = v62[4];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v32 + 56))(v29, 0, 1, v31);
  return a1;
}

uint64_t sub_1001307B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001307C0);
}

uint64_t sub_1001307C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100139E18(a1, a2, a3, &qword_10036E4D8);
}

uint64_t sub_1001307CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001307D8);
}

uint64_t sub_1001307D8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_100139ED0(a1, a2, a3, a4, &qword_10036E4D8);
}

void sub_1001307E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100139F94(a1, a2, a3, (unint64_t *)&unk_100370AC0, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_10013080C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100130818);
}

uint64_t sub_100130818(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013E9C4(a1, a2, a3, &qword_10036E458);
}

uint64_t sub_100130824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100130830);
}

uint64_t sub_100130830(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_10013EA54(a1, a2, a3, a4, &qword_10036E458);
}

void sub_10013083C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10013EAF0(a1, a2, a3, (unint64_t *)&unk_10036FA60, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t *sub_100130850(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  int v41;
  char *v42;
  char *v43;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v13 = *((_QWORD *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      v14 = sub_1000039AC(&qword_10036E458);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      v16 = v12[5];
      v17 = &v10[v16];
      v18 = &v11[v16];
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v17[8] = v18[8];
      v19 = v12[6];
      v20 = &v10[v19];
      v21 = &v11[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v12[7];
      v23 = &v10[v22];
      v24 = &v11[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    v25 = a3[6];
    v26 = a3[7];
    v27 = (char *)a1 + v25;
    v28 = (char *)a2 + v25;
    *(_QWORD *)v27 = *(_QWORD *)v28;
    v27[8] = v28[8];
    v29 = (char *)a1 + v26;
    v30 = (char *)a2 + v26;
    *(_QWORD *)v29 = *(_QWORD *)v30;
    v29[8] = v30[8];
    v31 = a3[8];
    v32 = a3[9];
    v33 = (char *)a1 + v31;
    v34 = (char *)a2 + v31;
    *(_DWORD *)v33 = *(_DWORD *)v34;
    v33[4] = v34[4];
    v35 = (char *)a1 + v32;
    v36 = (char *)a2 + v32;
    *(_DWORD *)v35 = *(_DWORD *)v36;
    v35[4] = v36[4];
    v37 = a3[10];
    v38 = a3[11];
    v39 = (char *)a1 + v37;
    v40 = (char *)a2 + v37;
    v41 = *(_DWORD *)v40;
    v39[4] = v40[4];
    *(_DWORD *)v39 = v41;
    v42 = (char *)a1 + v38;
    v43 = (char *)a2 + v38;
    v42[4] = v43[4];
    *(_DWORD *)v42 = *(_DWORD *)v43;
  }
  return a1;
}

uint64_t sub_100130A58(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_1000039AC(&qword_10036E458);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[6];
  v24 = a3[7];
  v25 = a1 + v23;
  v26 = a2 + v23;
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
  v27 = a1 + v24;
  v28 = a2 + v24;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  v29 = a3[8];
  v30 = a3[9];
  v31 = a1 + v29;
  v32 = a2 + v29;
  *(_DWORD *)v31 = *(_DWORD *)v32;
  *(_BYTE *)(v31 + 4) = *(_BYTE *)(v32 + 4);
  v33 = a1 + v30;
  v34 = a2 + v30;
  *(_DWORD *)v33 = *(_DWORD *)v34;
  *(_BYTE *)(v33 + 4) = *(_BYTE *)(v34 + 4);
  v35 = a3[10];
  v36 = a3[11];
  v37 = a1 + v35;
  v38 = (int *)(a2 + v35);
  v39 = *v38;
  *(_BYTE *)(v37 + 4) = *((_BYTE *)v38 + 4);
  *(_DWORD *)v37 = v39;
  v40 = a1 + v36;
  v41 = a2 + v36;
  *(_BYTE *)(v40 + 4) = *(_BYTE *)(v41 + 4);
  *(_DWORD *)v40 = *(_DWORD *)v41;
  return a1;
}

uint64_t sub_100130C34(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t (*v13)(uint64_t, uint64_t, int *);
  int v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = a1 + v9;
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v62 = *((_QWORD *)v12 - 1);
  v63 = v10;
  v13 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v62 + 48);
  LODWORD(v10) = v13(v10, 1, v12);
  v14 = v13((uint64_t)v11, 1, v12);
  if ((_DWORD)v10)
  {
    if (!v14)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v7 + 16))(v63, v11, v6);
      v17 = v12[5];
      v18 = v63 + v17;
      v19 = &v11[v17];
      v20 = v19[8];
      *(_QWORD *)v18 = *(_QWORD *)v19;
      *(_BYTE *)(v18 + 8) = v20;
      v21 = v12[6];
      v22 = v63 + v21;
      v23 = &v11[v21];
      v24 = v23[8];
      *(_QWORD *)v22 = *(_QWORD *)v23;
      *(_BYTE *)(v22 + 8) = v24;
      v25 = v12[7];
      v26 = v63 + v25;
      v27 = &v11[v25];
      v28 = v27[8];
      *(_QWORD *)v26 = *(_QWORD *)v27;
      *(_BYTE *)(v26 + 8) = v28;
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v62 + 56))(v63, 0, 1, v12);
      goto LABEL_9;
    }
    v15 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036E458) - 8) + 64);
    v16 = (void *)v63;
  }
  else
  {
    if (!v14)
    {
      v8(v63, (uint64_t)v11, v6);
      v29 = v12[5];
      v30 = v63 + v29;
      v31 = &v11[v29];
      v32 = v31[8];
      *(_QWORD *)v30 = *(_QWORD *)v31;
      *(_BYTE *)(v30 + 8) = v32;
      v33 = v12[6];
      v34 = v63 + v33;
      v35 = &v11[v33];
      v36 = v35[8];
      *(_QWORD *)v34 = *(_QWORD *)v35;
      *(_BYTE *)(v34 + 8) = v36;
      v37 = v12[7];
      v38 = v63 + v37;
      v39 = &v11[v37];
      v40 = v39[8];
      *(_QWORD *)v38 = *(_QWORD *)v39;
      *(_BYTE *)(v38 + 8) = v40;
      goto LABEL_9;
    }
    sub_100004030(v63, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    v15 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036E458) - 8) + 64);
    v16 = (void *)v63;
  }
  memcpy(v16, v11, v15);
LABEL_9:
  v41 = a3[6];
  v42 = a1 + v41;
  v43 = (uint64_t *)(a2 + v41);
  v44 = *v43;
  *(_BYTE *)(v42 + 8) = *((_BYTE *)v43 + 8);
  *(_QWORD *)v42 = v44;
  v45 = a3[7];
  v46 = a1 + v45;
  v47 = (uint64_t *)(a2 + v45);
  v48 = *v47;
  *(_BYTE *)(v46 + 8) = *((_BYTE *)v47 + 8);
  *(_QWORD *)v46 = v48;
  v49 = a3[8];
  v50 = a1 + v49;
  v51 = a2 + v49;
  LODWORD(v48) = *(_DWORD *)v51;
  *(_BYTE *)(v50 + 4) = *(_BYTE *)(v51 + 4);
  *(_DWORD *)v50 = v48;
  v52 = a3[9];
  v53 = a1 + v52;
  v54 = a2 + v52;
  LODWORD(v48) = *(_DWORD *)v54;
  *(_BYTE *)(v53 + 4) = *(_BYTE *)(v54 + 4);
  *(_DWORD *)v53 = v48;
  v55 = a3[10];
  v56 = a1 + v55;
  v57 = a2 + v55;
  LODWORD(v48) = *(_DWORD *)v57;
  *(_BYTE *)(v56 + 4) = *(_BYTE *)(v57 + 4);
  *(_DWORD *)v56 = v48;
  v58 = a3[11];
  v59 = a1 + v58;
  v60 = a2 + v58;
  LODWORD(v48) = *(_DWORD *)v60;
  *(_BYTE *)(v59 + 4) = *(_BYTE *)(v60 + 4);
  *(_DWORD *)v59 = v48;
  return a1;
}

uint64_t sub_100130EF0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_1000039AC(&qword_10036E458);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[6];
  v24 = a3[7];
  v25 = a1 + v23;
  v26 = a2 + v23;
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
  v27 = a1 + v24;
  v28 = a2 + v24;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  v29 = a3[8];
  v30 = a3[9];
  v31 = a1 + v29;
  v32 = a2 + v29;
  *(_DWORD *)v31 = *(_DWORD *)v32;
  *(_BYTE *)(v31 + 4) = *(_BYTE *)(v32 + 4);
  v33 = a1 + v30;
  v34 = a2 + v30;
  *(_DWORD *)v33 = *(_DWORD *)v34;
  *(_BYTE *)(v33 + 4) = *(_BYTE *)(v34 + 4);
  v35 = a3[10];
  v36 = a3[11];
  v37 = a1 + v35;
  v38 = (int *)(a2 + v35);
  v39 = *v38;
  *(_BYTE *)(v37 + 4) = *((_BYTE *)v38 + 4);
  *(_DWORD *)v37 = v39;
  v40 = a1 + v36;
  v41 = a2 + v36;
  *(_BYTE *)(v40 + 4) = *(_BYTE *)(v41 + 4);
  *(_DWORD *)v40 = *(_DWORD *)v41;
  return a1;
}

uint64_t sub_1001310CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t (*v13)(uint64_t, uint64_t, int *);
  int v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = a1 + v9;
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v55 = *((_QWORD *)v12 - 1);
  v56 = v10;
  v13 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v55 + 48);
  LODWORD(v10) = v13(v10, 1, v12);
  v14 = v13((uint64_t)v11, 1, v12);
  if ((_DWORD)v10)
  {
    if (!v14)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v56, v11, v6);
      v17 = v12[5];
      v18 = v56 + v17;
      v19 = &v11[v17];
      *(_QWORD *)v18 = *(_QWORD *)v19;
      *(_BYTE *)(v18 + 8) = v19[8];
      v20 = v12[6];
      v21 = v56 + v20;
      v22 = &v11[v20];
      *(_QWORD *)v21 = *(_QWORD *)v22;
      *(_BYTE *)(v21 + 8) = v22[8];
      v23 = v12[7];
      v24 = v56 + v23;
      v25 = &v11[v23];
      *(_QWORD *)v24 = *(_QWORD *)v25;
      *(_BYTE *)(v24 + 8) = v25[8];
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v55 + 56))(v56, 0, 1, v12);
      goto LABEL_9;
    }
    v15 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036E458) - 8) + 64);
    v16 = (void *)v56;
  }
  else
  {
    if (!v14)
    {
      v8(v56, (uint64_t)v11, v6);
      v26 = v12[5];
      v27 = v56 + v26;
      v28 = &v11[v26];
      *(_QWORD *)v27 = *(_QWORD *)v28;
      *(_BYTE *)(v27 + 8) = v28[8];
      v29 = v12[6];
      v30 = v56 + v29;
      v31 = &v11[v29];
      *(_QWORD *)v30 = *(_QWORD *)v31;
      *(_BYTE *)(v30 + 8) = v31[8];
      v32 = v12[7];
      v33 = v56 + v32;
      v34 = &v11[v32];
      *(_QWORD *)v33 = *(_QWORD *)v34;
      *(_BYTE *)(v33 + 8) = v34[8];
      goto LABEL_9;
    }
    sub_100004030(v56, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    v15 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036E458) - 8) + 64);
    v16 = (void *)v56;
  }
  memcpy(v16, v11, v15);
LABEL_9:
  v35 = a3[6];
  v36 = a3[7];
  v37 = a1 + v35;
  v38 = a2 + v35;
  *(_QWORD *)v37 = *(_QWORD *)v38;
  *(_BYTE *)(v37 + 8) = *(_BYTE *)(v38 + 8);
  v39 = a1 + v36;
  v40 = a2 + v36;
  *(_QWORD *)v39 = *(_QWORD *)v40;
  *(_BYTE *)(v39 + 8) = *(_BYTE *)(v40 + 8);
  v41 = a3[8];
  v42 = a3[9];
  v43 = a1 + v41;
  v44 = a2 + v41;
  *(_DWORD *)v43 = *(_DWORD *)v44;
  *(_BYTE *)(v43 + 4) = *(_BYTE *)(v44 + 4);
  v45 = a1 + v42;
  v46 = a2 + v42;
  *(_DWORD *)v45 = *(_DWORD *)v46;
  *(_BYTE *)(v45 + 4) = *(_BYTE *)(v46 + 4);
  v47 = a3[10];
  v48 = a3[11];
  v49 = a1 + v47;
  v50 = (int *)(a2 + v47);
  v51 = *v50;
  *(_BYTE *)(v49 + 4) = *((_BYTE *)v50 + 4);
  *(_DWORD *)v49 = v51;
  v52 = a1 + v48;
  v53 = a2 + v48;
  *(_BYTE *)(v52 + 4) = *(_BYTE *)(v53 + 4);
  *(_DWORD *)v52 = *(_DWORD *)v53;
  return a1;
}

uint64_t sub_10013137C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100131388);
}

uint64_t sub_100131388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013E9C4(a1, a2, a3, &qword_10036E458);
}

uint64_t sub_100131394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001313A0);
}

uint64_t sub_1001313A0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_10013EA54(a1, a2, a3, a4, &qword_10036E458);
}

void sub_1001313AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100146280(a1, a2, a3, (uint64_t)"\t", (uint64_t)&unk_1002D7AC8, (uint64_t)&unk_1002D7AC8);
}

char *sub_1001313C4(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v13 = *((_QWORD *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      v14 = sub_1000039AC(&qword_10036E458);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v8(v10, v11, v7);
      v16 = v12[5];
      v17 = &v10[v16];
      v18 = &v11[v16];
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v17[8] = v18[8];
      v19 = v12[6];
      v20 = &v10[v19];
      v21 = &v11[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v12[7];
      v23 = &v10[v22];
      v24 = &v11[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    v25 = a3[6];
    v26 = a3[7];
    v27 = &a1[v25];
    v28 = &a2[v25];
    *(_QWORD *)v27 = *(_QWORD *)v28;
    v27[8] = v28[8];
    v29 = &a1[v26];
    v30 = &a2[v26];
    *(_QWORD *)v29 = *(_QWORD *)v30;
    v29[8] = v30[8];
    v31 = a3[8];
    v32 = a3[9];
    v33 = &a1[v31];
    v34 = &a2[v31];
    *(_QWORD *)v33 = *(_QWORD *)v34;
    v33[8] = v34[8];
    v35 = &a1[v32];
    v36 = &a2[v32];
    v35[8] = v36[8];
    *(_QWORD *)v35 = *(_QWORD *)v36;
    v37 = a3[10];
    v38 = a3[11];
    v39 = &a1[v37];
    v40 = &a2[v37];
    *(_QWORD *)v39 = *(_QWORD *)v40;
    v39[8] = v40[8];
    v41 = &a1[v38];
    v42 = &a2[v38];
    *(_QWORD *)v41 = *(_QWORD *)v42;
    v41[8] = v42[8];
    v43 = a3[12];
    v44 = a3[13];
    v45 = &a1[v43];
    v46 = &a2[v43];
    *(_QWORD *)v45 = *(_QWORD *)v46;
    v45[8] = v46[8];
    v47 = &a1[v44];
    v48 = &a2[v44];
    *(_QWORD *)v47 = *(_QWORD *)v48;
    v47[8] = v48[8];
    v49 = a3[14];
    v50 = a3[15];
    v51 = &a1[v49];
    v52 = &a2[v49];
    *(_QWORD *)v51 = *(_QWORD *)v52;
    v51[8] = v52[8];
    a1[v50] = a2[v50];
    v53 = a3[17];
    a1[a3[16]] = a2[a3[16]];
    a1[v53] = a2[v53];
    a1[a3[18]] = a2[a3[18]];
  }
  return a1;
}

uint64_t sub_100131644(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_1000039AC(&qword_10036E458);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[6];
  v24 = a3[7];
  v25 = a1 + v23;
  v26 = a2 + v23;
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
  v27 = a1 + v24;
  v28 = a2 + v24;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  v29 = a3[8];
  v30 = a3[9];
  v31 = a1 + v29;
  v32 = a2 + v29;
  *(_QWORD *)v31 = *(_QWORD *)v32;
  *(_BYTE *)(v31 + 8) = *(_BYTE *)(v32 + 8);
  v33 = a1 + v30;
  v34 = a2 + v30;
  *(_BYTE *)(v33 + 8) = *(_BYTE *)(v34 + 8);
  *(_QWORD *)v33 = *(_QWORD *)v34;
  v35 = a3[10];
  v36 = a3[11];
  v37 = a1 + v35;
  v38 = a2 + v35;
  *(_QWORD *)v37 = *(_QWORD *)v38;
  *(_BYTE *)(v37 + 8) = *(_BYTE *)(v38 + 8);
  v39 = a1 + v36;
  v40 = a2 + v36;
  *(_QWORD *)v39 = *(_QWORD *)v40;
  *(_BYTE *)(v39 + 8) = *(_BYTE *)(v40 + 8);
  v41 = a3[12];
  v42 = a3[13];
  v43 = a1 + v41;
  v44 = a2 + v41;
  *(_QWORD *)v43 = *(_QWORD *)v44;
  *(_BYTE *)(v43 + 8) = *(_BYTE *)(v44 + 8);
  v45 = a1 + v42;
  v46 = a2 + v42;
  *(_QWORD *)v45 = *(_QWORD *)v46;
  *(_BYTE *)(v45 + 8) = *(_BYTE *)(v46 + 8);
  v47 = a3[14];
  v48 = a3[15];
  v49 = a1 + v47;
  v50 = a2 + v47;
  *(_QWORD *)v49 = *(_QWORD *)v50;
  *(_BYTE *)(v49 + 8) = *(_BYTE *)(v50 + 8);
  *(_BYTE *)(a1 + v48) = *(_BYTE *)(a2 + v48);
  v51 = a3[17];
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  *(_BYTE *)(a1 + v51) = *(_BYTE *)(a2 + v51);
  *(_BYTE *)(a1 + a3[18]) = *(_BYTE *)(a2 + a3[18]);
  return a1;
}

uint64_t sub_100131898(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t (*v13)(uint64_t, uint64_t, int *);
  int v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = a1 + v9;
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v78 = *((_QWORD *)v12 - 1);
  v79 = v10;
  v13 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v78 + 48);
  LODWORD(v10) = v13(v10, 1, v12);
  v14 = v13((uint64_t)v11, 1, v12);
  if ((_DWORD)v10)
  {
    if (!v14)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v7 + 16))(v79, v11, v6);
      v17 = v12[5];
      v18 = v79 + v17;
      v19 = &v11[v17];
      v20 = v19[8];
      *(_QWORD *)v18 = *(_QWORD *)v19;
      *(_BYTE *)(v18 + 8) = v20;
      v21 = v12[6];
      v22 = v79 + v21;
      v23 = &v11[v21];
      v24 = v23[8];
      *(_QWORD *)v22 = *(_QWORD *)v23;
      *(_BYTE *)(v22 + 8) = v24;
      v25 = v12[7];
      v26 = v79 + v25;
      v27 = &v11[v25];
      v28 = v27[8];
      *(_QWORD *)v26 = *(_QWORD *)v27;
      *(_BYTE *)(v26 + 8) = v28;
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v78 + 56))(v79, 0, 1, v12);
      goto LABEL_9;
    }
    v15 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036E458) - 8) + 64);
    v16 = (void *)v79;
  }
  else
  {
    if (!v14)
    {
      v8(v79, (uint64_t)v11, v6);
      v29 = v12[5];
      v30 = v79 + v29;
      v31 = &v11[v29];
      v32 = v31[8];
      *(_QWORD *)v30 = *(_QWORD *)v31;
      *(_BYTE *)(v30 + 8) = v32;
      v33 = v12[6];
      v34 = v79 + v33;
      v35 = &v11[v33];
      v36 = v35[8];
      *(_QWORD *)v34 = *(_QWORD *)v35;
      *(_BYTE *)(v34 + 8) = v36;
      v37 = v12[7];
      v38 = v79 + v37;
      v39 = &v11[v37];
      v40 = v39[8];
      *(_QWORD *)v38 = *(_QWORD *)v39;
      *(_BYTE *)(v38 + 8) = v40;
      goto LABEL_9;
    }
    sub_100004030(v79, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    v15 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036E458) - 8) + 64);
    v16 = (void *)v79;
  }
  memcpy(v16, v11, v15);
LABEL_9:
  v41 = a3[6];
  v42 = a1 + v41;
  v43 = (uint64_t *)(a2 + v41);
  v44 = *v43;
  *(_BYTE *)(v42 + 8) = *((_BYTE *)v43 + 8);
  *(_QWORD *)v42 = v44;
  v45 = a3[7];
  v46 = a1 + v45;
  v47 = (uint64_t *)(a2 + v45);
  v48 = *v47;
  *(_BYTE *)(v46 + 8) = *((_BYTE *)v47 + 8);
  *(_QWORD *)v46 = v48;
  v49 = a3[8];
  v50 = a1 + v49;
  v51 = (uint64_t *)(a2 + v49);
  v52 = *v51;
  *(_BYTE *)(v50 + 8) = *((_BYTE *)v51 + 8);
  *(_QWORD *)v50 = v52;
  v53 = a3[9];
  v54 = a1 + v53;
  v55 = (uint64_t *)(a2 + v53);
  v56 = *v55;
  *(_BYTE *)(v54 + 8) = *((_BYTE *)v55 + 8);
  *(_QWORD *)v54 = v56;
  v57 = a3[10];
  v58 = a1 + v57;
  v59 = (uint64_t *)(a2 + v57);
  v60 = *v59;
  *(_BYTE *)(v58 + 8) = *((_BYTE *)v59 + 8);
  *(_QWORD *)v58 = v60;
  v61 = a3[11];
  v62 = a1 + v61;
  v63 = (uint64_t *)(a2 + v61);
  v64 = *v63;
  *(_BYTE *)(v62 + 8) = *((_BYTE *)v63 + 8);
  *(_QWORD *)v62 = v64;
  v65 = a3[12];
  v66 = a1 + v65;
  v67 = (uint64_t *)(a2 + v65);
  v68 = *v67;
  *(_BYTE *)(v66 + 8) = *((_BYTE *)v67 + 8);
  *(_QWORD *)v66 = v68;
  v69 = a3[13];
  v70 = a1 + v69;
  v71 = (uint64_t *)(a2 + v69);
  v72 = *v71;
  *(_BYTE *)(v70 + 8) = *((_BYTE *)v71 + 8);
  *(_QWORD *)v70 = v72;
  v73 = a3[14];
  v74 = a1 + v73;
  v75 = (uint64_t *)(a2 + v73);
  v76 = *v75;
  *(_BYTE *)(v74 + 8) = *((_BYTE *)v75 + 8);
  *(_QWORD *)v74 = v76;
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  *(_BYTE *)(a1 + a3[17]) = *(_BYTE *)(a2 + a3[17]);
  *(_BYTE *)(a1 + a3[18]) = *(_BYTE *)(a2 + a3[18]);
  return a1;
}

uint64_t sub_100131BD8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_1000039AC(&qword_10036E458);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[6];
  v24 = a3[7];
  v25 = a1 + v23;
  v26 = a2 + v23;
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
  v27 = a1 + v24;
  v28 = a2 + v24;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  v29 = a3[8];
  v30 = a3[9];
  v31 = a1 + v29;
  v32 = a2 + v29;
  *(_QWORD *)v31 = *(_QWORD *)v32;
  *(_BYTE *)(v31 + 8) = *(_BYTE *)(v32 + 8);
  v33 = a1 + v30;
  v34 = a2 + v30;
  *(_BYTE *)(v33 + 8) = *(_BYTE *)(v34 + 8);
  *(_QWORD *)v33 = *(_QWORD *)v34;
  v35 = a3[10];
  v36 = a3[11];
  v37 = a1 + v35;
  v38 = a2 + v35;
  *(_QWORD *)v37 = *(_QWORD *)v38;
  *(_BYTE *)(v37 + 8) = *(_BYTE *)(v38 + 8);
  v39 = a1 + v36;
  v40 = a2 + v36;
  *(_QWORD *)v39 = *(_QWORD *)v40;
  *(_BYTE *)(v39 + 8) = *(_BYTE *)(v40 + 8);
  v41 = a3[12];
  v42 = a3[13];
  v43 = a1 + v41;
  v44 = a2 + v41;
  *(_QWORD *)v43 = *(_QWORD *)v44;
  *(_BYTE *)(v43 + 8) = *(_BYTE *)(v44 + 8);
  v45 = a1 + v42;
  v46 = a2 + v42;
  *(_QWORD *)v45 = *(_QWORD *)v46;
  *(_BYTE *)(v45 + 8) = *(_BYTE *)(v46 + 8);
  v47 = a3[14];
  v48 = a3[15];
  v49 = a1 + v47;
  v50 = a2 + v47;
  *(_QWORD *)v49 = *(_QWORD *)v50;
  *(_BYTE *)(v49 + 8) = *(_BYTE *)(v50 + 8);
  *(_BYTE *)(a1 + v48) = *(_BYTE *)(a2 + v48);
  v51 = a3[17];
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  *(_BYTE *)(a1 + v51) = *(_BYTE *)(a2 + v51);
  *(_BYTE *)(a1 + a3[18]) = *(_BYTE *)(a2 + a3[18]);
  return a1;
}

uint64_t sub_100131E2C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t (*v13)(uint64_t, uint64_t, int *);
  int v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = a1 + v9;
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v65 = *((_QWORD *)v12 - 1);
  v66 = v10;
  v13 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v65 + 48);
  LODWORD(v10) = v13(v10, 1, v12);
  v14 = v13((uint64_t)v11, 1, v12);
  if ((_DWORD)v10)
  {
    if (!v14)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v66, v11, v6);
      v17 = v12[5];
      v18 = v66 + v17;
      v19 = &v11[v17];
      *(_QWORD *)v18 = *(_QWORD *)v19;
      *(_BYTE *)(v18 + 8) = v19[8];
      v20 = v12[6];
      v21 = v66 + v20;
      v22 = &v11[v20];
      *(_QWORD *)v21 = *(_QWORD *)v22;
      *(_BYTE *)(v21 + 8) = v22[8];
      v23 = v12[7];
      v24 = v66 + v23;
      v25 = &v11[v23];
      *(_QWORD *)v24 = *(_QWORD *)v25;
      *(_BYTE *)(v24 + 8) = v25[8];
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v65 + 56))(v66, 0, 1, v12);
      goto LABEL_9;
    }
    v15 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036E458) - 8) + 64);
    v16 = (void *)v66;
  }
  else
  {
    if (!v14)
    {
      v8(v66, (uint64_t)v11, v6);
      v26 = v12[5];
      v27 = v66 + v26;
      v28 = &v11[v26];
      *(_QWORD *)v27 = *(_QWORD *)v28;
      *(_BYTE *)(v27 + 8) = v28[8];
      v29 = v12[6];
      v30 = v66 + v29;
      v31 = &v11[v29];
      *(_QWORD *)v30 = *(_QWORD *)v31;
      *(_BYTE *)(v30 + 8) = v31[8];
      v32 = v12[7];
      v33 = v66 + v32;
      v34 = &v11[v32];
      *(_QWORD *)v33 = *(_QWORD *)v34;
      *(_BYTE *)(v33 + 8) = v34[8];
      goto LABEL_9;
    }
    sub_100004030(v66, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    v15 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036E458) - 8) + 64);
    v16 = (void *)v66;
  }
  memcpy(v16, v11, v15);
LABEL_9:
  v35 = a3[6];
  v36 = a3[7];
  v37 = a1 + v35;
  v38 = a2 + v35;
  *(_QWORD *)v37 = *(_QWORD *)v38;
  *(_BYTE *)(v37 + 8) = *(_BYTE *)(v38 + 8);
  v39 = a1 + v36;
  v40 = a2 + v36;
  *(_QWORD *)v39 = *(_QWORD *)v40;
  *(_BYTE *)(v39 + 8) = *(_BYTE *)(v40 + 8);
  v41 = a3[8];
  v42 = a3[9];
  v43 = a1 + v41;
  v44 = a2 + v41;
  *(_QWORD *)v43 = *(_QWORD *)v44;
  *(_BYTE *)(v43 + 8) = *(_BYTE *)(v44 + 8);
  v45 = a1 + v42;
  v46 = a2 + v42;
  *(_BYTE *)(v45 + 8) = *(_BYTE *)(v46 + 8);
  *(_QWORD *)v45 = *(_QWORD *)v46;
  v47 = a3[10];
  v48 = a3[11];
  v49 = a1 + v47;
  v50 = a2 + v47;
  *(_QWORD *)v49 = *(_QWORD *)v50;
  *(_BYTE *)(v49 + 8) = *(_BYTE *)(v50 + 8);
  v51 = a1 + v48;
  v52 = a2 + v48;
  *(_QWORD *)v51 = *(_QWORD *)v52;
  *(_BYTE *)(v51 + 8) = *(_BYTE *)(v52 + 8);
  v53 = a3[12];
  v54 = a3[13];
  v55 = a1 + v53;
  v56 = a2 + v53;
  *(_QWORD *)v55 = *(_QWORD *)v56;
  *(_BYTE *)(v55 + 8) = *(_BYTE *)(v56 + 8);
  v57 = a1 + v54;
  v58 = a2 + v54;
  *(_QWORD *)v57 = *(_QWORD *)v58;
  *(_BYTE *)(v57 + 8) = *(_BYTE *)(v58 + 8);
  v59 = a3[14];
  v60 = a3[15];
  v61 = a1 + v59;
  v62 = a2 + v59;
  *(_QWORD *)v61 = *(_QWORD *)v62;
  *(_BYTE *)(v61 + 8) = *(_BYTE *)(v62 + 8);
  *(_BYTE *)(a1 + v60) = *(_BYTE *)(a2 + v60);
  v63 = a3[17];
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  *(_BYTE *)(a1 + v63) = *(_BYTE *)(a2 + v63);
  *(_BYTE *)(a1 + a3[18]) = *(_BYTE *)(a2 + a3[18]);
  return a1;
}

uint64_t sub_100132154(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100132160);
}

uint64_t sub_100132160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  int v15;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_1000039AC(&qword_10036E458);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 60));
  if (v14 >= 2)
    v15 = ((v14 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v15 = -2;
  if (v15 < 0)
    v15 = -1;
  return (v15 + 1);
}

uint64_t sub_100132228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100132234);
}

uint64_t sub_100132234(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = sub_1000039AC(&qword_10036E458);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 60)) = a2 + 2;
  return result;
}

void sub_1001322DC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[15];

  v2 = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001198C(319, (unint64_t *)&unk_10036FA60, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = "\t";
      v6[3] = "\t";
      v6[4] = "\t";
      v6[5] = "\t";
      v6[6] = "\t";
      v6[7] = "\t";
      v6[8] = "\t";
      v6[9] = "\t";
      v6[10] = "\t";
      v6[11] = &unk_1002D7C78;
      v6[12] = &unk_1002D7C78;
      v6[13] = &unk_1002D7C78;
      v6[14] = &unk_1002D7C78;
      swift_initStructMetadata(a1, 256, 15, v6, a1 + 16);
    }
  }
}

uint64_t sub_100132398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001323A4);
}

uint64_t sub_1001323A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001323B4);
}

char *sub_1001323B8(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v13 = *((_QWORD *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      v14 = sub_1000039AC(&qword_10036E458);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v8(v10, v11, v7);
      v16 = v12[5];
      v17 = &v10[v16];
      v18 = &v11[v16];
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v17[8] = v18[8];
      v19 = v12[6];
      v20 = &v10[v19];
      v21 = &v11[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v12[7];
      v23 = &v10[v22];
      v24 = &v11[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    v25 = a3[6];
    v26 = a3[7];
    v27 = &a1[v25];
    v28 = &a2[v25];
    *(_QWORD *)v27 = *(_QWORD *)v28;
    v27[8] = v28[8];
    v29 = &a1[v26];
    v30 = &a2[v26];
    *(_QWORD *)v29 = *(_QWORD *)v30;
    v29[8] = v30[8];
    v31 = a3[8];
    v32 = a3[9];
    v33 = &a1[v31];
    v34 = &a2[v31];
    *(_QWORD *)v33 = *(_QWORD *)v34;
    v33[8] = v34[8];
    a1[v32] = a2[v32];
    v35 = a3[11];
    a1[a3[10]] = a2[a3[10]];
    a1[v35] = a2[v35];
    a1[a3[12]] = a2[a3[12]];
  }
  return a1;
}

uint64_t sub_10013259C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_1000039AC(&qword_10036E458);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[6];
  v24 = a3[7];
  v25 = a1 + v23;
  v26 = a2 + v23;
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
  v27 = a1 + v24;
  v28 = a2 + v24;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  v29 = a3[8];
  v30 = a3[9];
  v31 = a1 + v29;
  v32 = a2 + v29;
  *(_QWORD *)v31 = *(_QWORD *)v32;
  *(_BYTE *)(v31 + 8) = *(_BYTE *)(v32 + 8);
  *(_BYTE *)(a1 + v30) = *(_BYTE *)(a2 + v30);
  v33 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v33) = *(_BYTE *)(a2 + v33);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_100132754(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t (*v13)(uint64_t, uint64_t, int *);
  int v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = a1 + v9;
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v54 = *((_QWORD *)v12 - 1);
  v55 = v10;
  v13 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v54 + 48);
  LODWORD(v10) = v13(v10, 1, v12);
  v14 = v13((uint64_t)v11, 1, v12);
  if ((_DWORD)v10)
  {
    if (!v14)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v7 + 16))(v55, v11, v6);
      v17 = v12[5];
      v18 = v55 + v17;
      v19 = &v11[v17];
      v20 = v19[8];
      *(_QWORD *)v18 = *(_QWORD *)v19;
      *(_BYTE *)(v18 + 8) = v20;
      v21 = v12[6];
      v22 = v55 + v21;
      v23 = &v11[v21];
      v24 = v23[8];
      *(_QWORD *)v22 = *(_QWORD *)v23;
      *(_BYTE *)(v22 + 8) = v24;
      v25 = v12[7];
      v26 = v55 + v25;
      v27 = &v11[v25];
      v28 = v27[8];
      *(_QWORD *)v26 = *(_QWORD *)v27;
      *(_BYTE *)(v26 + 8) = v28;
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v54 + 56))(v55, 0, 1, v12);
      goto LABEL_9;
    }
    v15 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036E458) - 8) + 64);
    v16 = (void *)v55;
  }
  else
  {
    if (!v14)
    {
      v8(v55, (uint64_t)v11, v6);
      v29 = v12[5];
      v30 = v55 + v29;
      v31 = &v11[v29];
      v32 = v31[8];
      *(_QWORD *)v30 = *(_QWORD *)v31;
      *(_BYTE *)(v30 + 8) = v32;
      v33 = v12[6];
      v34 = v55 + v33;
      v35 = &v11[v33];
      v36 = v35[8];
      *(_QWORD *)v34 = *(_QWORD *)v35;
      *(_BYTE *)(v34 + 8) = v36;
      v37 = v12[7];
      v38 = v55 + v37;
      v39 = &v11[v37];
      v40 = v39[8];
      *(_QWORD *)v38 = *(_QWORD *)v39;
      *(_BYTE *)(v38 + 8) = v40;
      goto LABEL_9;
    }
    sub_100004030(v55, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    v15 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036E458) - 8) + 64);
    v16 = (void *)v55;
  }
  memcpy(v16, v11, v15);
LABEL_9:
  v41 = a3[6];
  v42 = a1 + v41;
  v43 = (uint64_t *)(a2 + v41);
  v44 = *v43;
  *(_BYTE *)(v42 + 8) = *((_BYTE *)v43 + 8);
  *(_QWORD *)v42 = v44;
  v45 = a3[7];
  v46 = a1 + v45;
  v47 = (uint64_t *)(a2 + v45);
  v48 = *v47;
  *(_BYTE *)(v46 + 8) = *((_BYTE *)v47 + 8);
  *(_QWORD *)v46 = v48;
  v49 = a3[8];
  v50 = a1 + v49;
  v51 = (uint64_t *)(a2 + v49);
  v52 = *v51;
  *(_BYTE *)(v50 + 8) = *((_BYTE *)v51 + 8);
  *(_QWORD *)v50 = v52;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_1001329EC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_1000039AC(&qword_10036E458);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[6];
  v24 = a3[7];
  v25 = a1 + v23;
  v26 = a2 + v23;
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
  v27 = a1 + v24;
  v28 = a2 + v24;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  v29 = a3[8];
  v30 = a3[9];
  v31 = a1 + v29;
  v32 = a2 + v29;
  *(_QWORD *)v31 = *(_QWORD *)v32;
  *(_BYTE *)(v31 + 8) = *(_BYTE *)(v32 + 8);
  *(_BYTE *)(a1 + v30) = *(_BYTE *)(a2 + v30);
  v33 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v33) = *(_BYTE *)(a2 + v33);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_100132BA4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t (*v13)(uint64_t, uint64_t, int *);
  int v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = a1 + v9;
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v47 = *((_QWORD *)v12 - 1);
  v48 = v10;
  v13 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v47 + 48);
  LODWORD(v10) = v13(v10, 1, v12);
  v14 = v13((uint64_t)v11, 1, v12);
  if ((_DWORD)v10)
  {
    if (!v14)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v48, v11, v6);
      v17 = v12[5];
      v18 = v48 + v17;
      v19 = &v11[v17];
      *(_QWORD *)v18 = *(_QWORD *)v19;
      *(_BYTE *)(v18 + 8) = v19[8];
      v20 = v12[6];
      v21 = v48 + v20;
      v22 = &v11[v20];
      *(_QWORD *)v21 = *(_QWORD *)v22;
      *(_BYTE *)(v21 + 8) = v22[8];
      v23 = v12[7];
      v24 = v48 + v23;
      v25 = &v11[v23];
      *(_QWORD *)v24 = *(_QWORD *)v25;
      *(_BYTE *)(v24 + 8) = v25[8];
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v47 + 56))(v48, 0, 1, v12);
      goto LABEL_9;
    }
    v15 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036E458) - 8) + 64);
    v16 = (void *)v48;
  }
  else
  {
    if (!v14)
    {
      v8(v48, (uint64_t)v11, v6);
      v26 = v12[5];
      v27 = v48 + v26;
      v28 = &v11[v26];
      *(_QWORD *)v27 = *(_QWORD *)v28;
      *(_BYTE *)(v27 + 8) = v28[8];
      v29 = v12[6];
      v30 = v48 + v29;
      v31 = &v11[v29];
      *(_QWORD *)v30 = *(_QWORD *)v31;
      *(_BYTE *)(v30 + 8) = v31[8];
      v32 = v12[7];
      v33 = v48 + v32;
      v34 = &v11[v32];
      *(_QWORD *)v33 = *(_QWORD *)v34;
      *(_BYTE *)(v33 + 8) = v34[8];
      goto LABEL_9;
    }
    sub_100004030(v48, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    v15 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036E458) - 8) + 64);
    v16 = (void *)v48;
  }
  memcpy(v16, v11, v15);
LABEL_9:
  v35 = a3[6];
  v36 = a3[7];
  v37 = a1 + v35;
  v38 = a2 + v35;
  *(_QWORD *)v37 = *(_QWORD *)v38;
  *(_BYTE *)(v37 + 8) = *(_BYTE *)(v38 + 8);
  v39 = a1 + v36;
  v40 = a2 + v36;
  *(_QWORD *)v39 = *(_QWORD *)v40;
  *(_BYTE *)(v39 + 8) = *(_BYTE *)(v40 + 8);
  v41 = a3[8];
  v42 = a3[9];
  v43 = a1 + v41;
  v44 = a2 + v41;
  *(_QWORD *)v43 = *(_QWORD *)v44;
  *(_BYTE *)(v43 + 8) = *(_BYTE *)(v44 + 8);
  *(_BYTE *)(a1 + v42) = *(_BYTE *)(a2 + v42);
  v45 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v45) = *(_BYTE *)(a2 + v45);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_100132E30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100132E3C);
}

uint64_t sub_100132E40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100132E4C);
}

void sub_100132E50(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[9];

  v2 = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001198C(319, (unint64_t *)&unk_10036FA60, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = "\t";
      v6[3] = "\t";
      v6[4] = "\t";
      v6[5] = &unk_1002D7C78;
      v6[6] = &unk_1002D7C78;
      v6[7] = &unk_1002D7C78;
      v6[8] = &unk_1002D7C78;
      swift_initStructMetadata(a1, 256, 9, v6, a1 + 16);
    }
  }
}

uint64_t *sub_100132F00(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, int *);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v58;
  uint64_t v59;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v13 = *((_QWORD *)v12 - 1);
    v14 = *(unsigned int (**)(char *, uint64_t, int *))(v13 + 48);
    if (v14(v11, 1, v12))
    {
      v15 = sub_1000039AC(&qword_10036E458);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      v17 = v12[5];
      v18 = &v10[v17];
      v19 = &v11[v17];
      *(_QWORD *)v18 = *(_QWORD *)v19;
      v18[8] = v19[8];
      v20 = v12[6];
      v21 = &v10[v20];
      v22 = &v11[v20];
      *(_QWORD *)v21 = *(_QWORD *)v22;
      v21[8] = v22[8];
      v23 = v12[7];
      v24 = &v10[v23];
      v25 = &v11[v23];
      *(_QWORD *)v24 = *(_QWORD *)v25;
      v24[8] = v25[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    v26 = a3[6];
    v27 = a3[7];
    v28 = (char *)a1 + v26;
    v29 = (char *)a2 + v26;
    *(_DWORD *)v28 = *(_DWORD *)v29;
    v28[4] = v29[4];
    v30 = (char *)a1 + v27;
    v31 = (char *)a2 + v27;
    v32 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
    v33 = *((_QWORD *)v32 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v33 + 48))(v31, 1, v32))
    {
      v34 = sub_1000039AC(&qword_10036E4E8);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      v58 = v13;
      v59 = v33;
      v8((uint64_t *)v30, (uint64_t *)v31, v7);
      v35 = v32[5];
      v36 = &v30[v35];
      v37 = &v31[v35];
      if (v14(&v31[v35], 1, v12))
      {
        v38 = sub_1000039AC(&qword_10036E458);
        memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        v8((uint64_t *)v36, (uint64_t *)v37, v7);
        v39 = v12[5];
        v40 = &v36[v39];
        v41 = &v37[v39];
        *(_QWORD *)v40 = *(_QWORD *)v41;
        v40[8] = v41[8];
        v42 = v12[6];
        v43 = &v36[v42];
        v44 = &v37[v42];
        *(_QWORD *)v43 = *(_QWORD *)v44;
        v43[8] = v44[8];
        v45 = v12[7];
        v46 = &v36[v45];
        v47 = &v37[v45];
        *(_QWORD *)v46 = *(_QWORD *)v47;
        v46[8] = v47[8];
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v58 + 56))(v36, 0, 1, v12);
      }
      v48 = v32[6];
      v49 = &v30[v48];
      v50 = &v31[v48];
      *(_QWORD *)v49 = *(_QWORD *)v50;
      v49[8] = v50[8];
      v51 = v32[7];
      v52 = &v30[v51];
      v53 = &v31[v51];
      v52[8] = v53[8];
      *(_QWORD *)v52 = *(_QWORD *)v53;
      v54 = v32[8];
      v55 = &v30[v54];
      v56 = &v31[v54];
      *(_QWORD *)v55 = *(_QWORD *)v56;
      v55[8] = v56[8];
      v30[v32[9]] = v31[v32[9]];
      v30[v32[10]] = v31[v32[10]];
      v30[v32[11]] = v31[v32[11]];
      v30[v32[12]] = v31[v32[12]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v59 + 56))(v30, 0, 1, v32);
    }
  }
  return a1;
}

uint64_t sub_10013325C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage(0);
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v12(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48);
  if (!v7(v5, 1, v6))
    v12(v5, v4);
  v8 = a1 + *(int *)(a2 + 28);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
  if (!(_DWORD)result)
  {
    v12(v8, v4);
    v11 = v8 + *(int *)(v9 + 20);
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v7)(v11, 1, v6);
    if (!(_DWORD)result)
      return ((uint64_t (*)(uint64_t, uint64_t))v12)(v11, v4);
  }
  return result;
}

uint64_t sub_100133378(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, int *);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v56;
  uint64_t v57;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  v13 = *(unsigned int (**)(char *, uint64_t, int *))(v12 + 48);
  if (v13(v10, 1, v11))
  {
    v14 = sub_1000039AC(&qword_10036E458);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v15 = v11[5];
    v16 = &v9[v15];
    v17 = &v10[v15];
    *(_QWORD *)v16 = *(_QWORD *)v17;
    v16[8] = v17[8];
    v18 = v11[6];
    v19 = &v9[v18];
    v20 = &v10[v18];
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[8] = v20[8];
    v21 = v11[7];
    v22 = &v9[v21];
    v23 = &v10[v21];
    *(_QWORD *)v22 = *(_QWORD *)v23;
    v22[8] = v23[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v24 = a3[6];
  v25 = a3[7];
  v26 = a1 + v24;
  v27 = a2 + v24;
  *(_DWORD *)v26 = *(_DWORD *)v27;
  *(_BYTE *)(v26 + 4) = *(_BYTE *)(v27 + 4);
  v28 = (char *)(a1 + v25);
  v29 = (char *)(a2 + v25);
  v30 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
  v31 = *((_QWORD *)v30 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v31 + 48))(v29, 1, v30))
  {
    v32 = sub_1000039AC(&qword_10036E4E8);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    v56 = v12;
    v57 = v31;
    v7((uint64_t)v28, (uint64_t)v29, v6);
    v33 = v30[5];
    v34 = &v28[v33];
    v35 = &v29[v33];
    if (v13(&v29[v33], 1, v11))
    {
      v36 = sub_1000039AC(&qword_10036E458);
      memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      v7((uint64_t)v34, (uint64_t)v35, v6);
      v37 = v11[5];
      v38 = &v34[v37];
      v39 = &v35[v37];
      *(_QWORD *)v38 = *(_QWORD *)v39;
      v38[8] = v39[8];
      v40 = v11[6];
      v41 = &v34[v40];
      v42 = &v35[v40];
      *(_QWORD *)v41 = *(_QWORD *)v42;
      v41[8] = v42[8];
      v43 = v11[7];
      v44 = &v34[v43];
      v45 = &v35[v43];
      *(_QWORD *)v44 = *(_QWORD *)v45;
      v44[8] = v45[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v56 + 56))(v34, 0, 1, v11);
    }
    v46 = v30[6];
    v47 = &v28[v46];
    v48 = &v29[v46];
    *(_QWORD *)v47 = *(_QWORD *)v48;
    v47[8] = v48[8];
    v49 = v30[7];
    v50 = &v28[v49];
    v51 = &v29[v49];
    v50[8] = v51[8];
    *(_QWORD *)v50 = *(_QWORD *)v51;
    v52 = v30[8];
    v53 = &v28[v52];
    v54 = &v29[v52];
    *(_QWORD *)v53 = *(_QWORD *)v54;
    v53[8] = v54[8];
    v28[v30[9]] = v29[v30[9]];
    v28[v30[10]] = v29[v30[10]];
    v28[v30[11]] = v29[v30[11]];
    v28[v30[12]] = v29[v30[12]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v57 + 56))(v28, 0, 1, v30);
  }
  return a1;
}

uint64_t sub_1001336A8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  int v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  int *v35;
  uint64_t v36;
  uint64_t (*v37)(_BYTE *, uint64_t, int *);
  int v38;
  int v39;
  void (*v40)(char *, char *, uint64_t);
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char v56;
  uint64_t v57;
  char *v58;
  int v59;
  int v60;
  size_t v61;
  void *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v124;
  uint64_t v125;
  void (*v126)(uint64_t, uint64_t, uint64_t);
  _QWORD *__dst;
  char *__dsta;

  v6 = type metadata accessor for UnknownStorage(0);
  __dst = *(_QWORD **)(v6 - 8);
  v126 = (void (*)(uint64_t, uint64_t, uint64_t))__dst[3];
  v126(a1, a2, v6);
  v7 = a3[5];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(void))(v11 + 48);
  v13 = ((uint64_t (*)(char *, uint64_t, int *))v12)(v8, 1, v10);
  v14 = ((uint64_t (*)(char *, uint64_t, int *))v12)(v9, 1, v10);
  v125 = v11;
  if (v13)
  {
    if (!v14)
    {
      ((void (*)(char *, char *, uint64_t))__dst[2])(v8, v9, v6);
      v15 = v10[5];
      v16 = &v8[v15];
      v17 = &v9[v15];
      v18 = v17[8];
      *(_QWORD *)v16 = *(_QWORD *)v17;
      v16[8] = v18;
      v19 = v10[6];
      v20 = &v8[v19];
      v21 = &v9[v19];
      v22 = v21[8];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v22;
      v23 = v10[7];
      v24 = &v8[v23];
      v25 = &v9[v23];
      v26 = v25[8];
      *(_QWORD *)v24 = *(_QWORD *)v25;
      v24[8] = v26;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    sub_100004030((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    v27 = sub_1000039AC(&qword_10036E458);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  v126((uint64_t)v8, (uint64_t)v9, v6);
  v45 = v10[5];
  v46 = &v8[v45];
  v47 = &v9[v45];
  v48 = v47[8];
  *(_QWORD *)v46 = *(_QWORD *)v47;
  v46[8] = v48;
  v49 = v10[6];
  v50 = &v8[v49];
  v51 = &v9[v49];
  v52 = v51[8];
  *(_QWORD *)v50 = *(_QWORD *)v51;
  v50[8] = v52;
  v53 = v10[7];
  v54 = &v8[v53];
  v55 = &v9[v53];
  v56 = v55[8];
  *(_QWORD *)v54 = *(_QWORD *)v55;
  v54[8] = v56;
LABEL_7:
  v28 = a3[6];
  v29 = a1 + v28;
  v30 = (int *)(a2 + v28);
  v31 = *v30;
  *(_BYTE *)(v29 + 4) = *((_BYTE *)v30 + 4);
  *(_DWORD *)v29 = v31;
  v32 = a3[7];
  v33 = (_BYTE *)(a1 + v32);
  v34 = (_BYTE *)(a2 + v32);
  v35 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
  v36 = *((_QWORD *)v35 - 1);
  v37 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v36 + 48);
  v38 = v37(v33, 1, v35);
  v39 = v37(v34, 1, v35);
  if (!v38)
  {
    if (v39)
    {
      sub_100004030((uint64_t)v33, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
      goto LABEL_13;
    }
    v126((uint64_t)v33, (uint64_t)v34, v6);
    v57 = v35[5];
    v58 = &v34[v57];
    v124 = (uint64_t)&v33[v57];
    v59 = v12();
    v60 = ((uint64_t (*)(char *, uint64_t, int *))v12)(v58, 1, v10);
    if (v59)
    {
      if (!v60)
      {
        ((void (*)(uint64_t, char *, uint64_t))__dst[2])(v124, v58, v6);
        v87 = v10[5];
        v88 = v124 + v87;
        v89 = &v58[v87];
        v90 = v89[8];
        *(_QWORD *)v88 = *(_QWORD *)v89;
        *(_BYTE *)(v88 + 8) = v90;
        v91 = v10[6];
        v92 = v124 + v91;
        v93 = &v58[v91];
        v94 = v93[8];
        *(_QWORD *)v92 = *(_QWORD *)v93;
        *(_BYTE *)(v92 + 8) = v94;
        v95 = v10[7];
        v96 = v124 + v95;
        v97 = &v58[v95];
        v98 = v97[8];
        *(_QWORD *)v96 = *(_QWORD *)v97;
        *(_BYTE *)(v96 + 8) = v98;
        (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v125 + 56))(v124, 0, 1, v10);
        goto LABEL_25;
      }
      v61 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036E458) - 8) + 64);
      v62 = (void *)v124;
    }
    else
    {
      if (!v60)
      {
        v126(v124, (uint64_t)v58, v6);
        v99 = v10[5];
        v100 = v124 + v99;
        v101 = &v58[v99];
        v102 = v101[8];
        *(_QWORD *)v100 = *(_QWORD *)v101;
        *(_BYTE *)(v100 + 8) = v102;
        v103 = v10[6];
        v104 = v124 + v103;
        v105 = &v58[v103];
        v106 = v105[8];
        *(_QWORD *)v104 = *(_QWORD *)v105;
        *(_BYTE *)(v104 + 8) = v106;
        v107 = v10[7];
        v108 = v124 + v107;
        v109 = &v58[v107];
        v110 = v109[8];
        *(_QWORD *)v108 = *(_QWORD *)v109;
        *(_BYTE *)(v108 + 8) = v110;
        goto LABEL_25;
      }
      sub_100004030(v124, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      v61 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036E458) - 8) + 64);
      v62 = (void *)v124;
    }
    memcpy(v62, v58, v61);
LABEL_25:
    v111 = v35[6];
    v112 = &v33[v111];
    v113 = &v34[v111];
    v114 = *(_QWORD *)v113;
    v112[8] = v113[8];
    *(_QWORD *)v112 = v114;
    v115 = v35[7];
    v116 = &v33[v115];
    v117 = &v34[v115];
    v118 = *(_QWORD *)v117;
    v116[8] = v117[8];
    *(_QWORD *)v116 = v118;
    v119 = v35[8];
    v120 = &v33[v119];
    v121 = &v34[v119];
    v122 = *(_QWORD *)v121;
    v120[8] = v121[8];
    *(_QWORD *)v120 = v122;
    v33[v35[9]] = v34[v35[9]];
    v33[v35[10]] = v34[v35[10]];
    v33[v35[11]] = v34[v35[11]];
    v33[v35[12]] = v34[v35[12]];
    return a1;
  }
  if (v39)
  {
LABEL_13:
    v44 = sub_1000039AC(&qword_10036E4E8);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    return a1;
  }
  v40 = (void (*)(char *, char *, uint64_t))__dst[2];
  v40(v33, v34, v6);
  v41 = v35[5];
  __dsta = &v33[v41];
  v42 = &v34[v41];
  if (((unsigned int (*)(_BYTE *, uint64_t, int *))v12)(&v34[v41], 1, v10))
  {
    v43 = sub_1000039AC(&qword_10036E458);
    memcpy(__dsta, v42, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
  }
  else
  {
    v40(__dsta, v42, v6);
    v63 = v10[5];
    v64 = &__dsta[v63];
    v65 = &v42[v63];
    v66 = v65[8];
    *(_QWORD *)v64 = *(_QWORD *)v65;
    v64[8] = v66;
    v67 = v10[6];
    v68 = &__dsta[v67];
    v69 = &v42[v67];
    v70 = v69[8];
    *(_QWORD *)v68 = *(_QWORD *)v69;
    v68[8] = v70;
    v71 = v10[7];
    v72 = &__dsta[v71];
    v73 = &v42[v71];
    v74 = v73[8];
    *(_QWORD *)v72 = *(_QWORD *)v73;
    v72[8] = v74;
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v125 + 56))(__dsta, 0, 1, v10);
  }
  v75 = v35[6];
  v76 = &v33[v75];
  v77 = &v34[v75];
  v78 = *(_QWORD *)v77;
  v76[8] = v77[8];
  *(_QWORD *)v76 = v78;
  v79 = v35[7];
  v80 = &v33[v79];
  v81 = &v34[v79];
  v82 = *(_QWORD *)v81;
  v80[8] = v81[8];
  *(_QWORD *)v80 = v82;
  v83 = v35[8];
  v84 = &v33[v83];
  v85 = &v34[v83];
  v86 = *(_QWORD *)v85;
  v84[8] = v85[8];
  *(_QWORD *)v84 = v86;
  v33[v35[9]] = v34[v35[9]];
  v33[v35[10]] = v34[v35[10]];
  v33[v35[11]] = v34[v35[11]];
  v33[v35[12]] = v34[v35[12]];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v36 + 56))(v33, 0, 1, v35);
  return a1;
}

uint64_t sub_100133CE4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, int *);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v56;
  uint64_t v57;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  v13 = *(unsigned int (**)(char *, uint64_t, int *))(v12 + 48);
  if (v13(v10, 1, v11))
  {
    v14 = sub_1000039AC(&qword_10036E458);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v15 = v11[5];
    v16 = &v9[v15];
    v17 = &v10[v15];
    *(_QWORD *)v16 = *(_QWORD *)v17;
    v16[8] = v17[8];
    v18 = v11[6];
    v19 = &v9[v18];
    v20 = &v10[v18];
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[8] = v20[8];
    v21 = v11[7];
    v22 = &v9[v21];
    v23 = &v10[v21];
    *(_QWORD *)v22 = *(_QWORD *)v23;
    v22[8] = v23[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v24 = a3[6];
  v25 = a3[7];
  v26 = a1 + v24;
  v27 = a2 + v24;
  *(_DWORD *)v26 = *(_DWORD *)v27;
  *(_BYTE *)(v26 + 4) = *(_BYTE *)(v27 + 4);
  v28 = (char *)(a1 + v25);
  v29 = (char *)(a2 + v25);
  v30 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
  v31 = *((_QWORD *)v30 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v31 + 48))(v29, 1, v30))
  {
    v32 = sub_1000039AC(&qword_10036E4E8);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    v56 = v12;
    v57 = v31;
    v7((uint64_t)v28, (uint64_t)v29, v6);
    v33 = v30[5];
    v34 = &v28[v33];
    v35 = &v29[v33];
    if (v13(&v29[v33], 1, v11))
    {
      v36 = sub_1000039AC(&qword_10036E458);
      memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      v7((uint64_t)v34, (uint64_t)v35, v6);
      v37 = v11[5];
      v38 = &v34[v37];
      v39 = &v35[v37];
      *(_QWORD *)v38 = *(_QWORD *)v39;
      v38[8] = v39[8];
      v40 = v11[6];
      v41 = &v34[v40];
      v42 = &v35[v40];
      *(_QWORD *)v41 = *(_QWORD *)v42;
      v41[8] = v42[8];
      v43 = v11[7];
      v44 = &v34[v43];
      v45 = &v35[v43];
      *(_QWORD *)v44 = *(_QWORD *)v45;
      v44[8] = v45[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v56 + 56))(v34, 0, 1, v11);
    }
    v46 = v30[6];
    v47 = &v28[v46];
    v48 = &v29[v46];
    *(_QWORD *)v47 = *(_QWORD *)v48;
    v47[8] = v48[8];
    v49 = v30[7];
    v50 = &v28[v49];
    v51 = &v29[v49];
    v50[8] = v51[8];
    *(_QWORD *)v50 = *(_QWORD *)v51;
    v52 = v30[8];
    v53 = &v28[v52];
    v54 = &v29[v52];
    *(_QWORD *)v53 = *(_QWORD *)v54;
    v53[8] = v54[8];
    v28[v30[9]] = v29[v30[9]];
    v28[v30[10]] = v29[v30[10]];
    v28[v30[11]] = v29[v30[11]];
    v28[v30[12]] = v29[v30[12]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v57 + 56))(v28, 0, 1, v30);
  }
  return a1;
}

uint64_t sub_100134014(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  int *v31;
  uint64_t v32;
  uint64_t (*v33)(_BYTE *, uint64_t, int *);
  int v34;
  int v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  int v52;
  int v53;
  size_t v54;
  void *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(uint64_t, uint64_t, uint64_t);
  _QWORD *__dst;
  char *__dsta;

  v6 = type metadata accessor for UnknownStorage(0);
  __dst = *(_QWORD **)(v6 - 8);
  v104 = (void (*)(uint64_t, uint64_t, uint64_t))__dst[5];
  v104(a1, a2, v6);
  v7 = a3[5];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(void))(v11 + 48);
  v13 = ((uint64_t (*)(char *, uint64_t, int *))v12)(v8, 1, v10);
  v14 = ((uint64_t (*)(char *, uint64_t, int *))v12)(v9, 1, v10);
  v103 = v11;
  if (v13)
  {
    if (!v14)
    {
      ((void (*)(char *, char *, uint64_t))__dst[4])(v8, v9, v6);
      v15 = v10[5];
      v16 = &v8[v15];
      v17 = &v9[v15];
      *(_QWORD *)v16 = *(_QWORD *)v17;
      v16[8] = v17[8];
      v18 = v10[6];
      v19 = &v8[v18];
      v20 = &v9[v18];
      *(_QWORD *)v19 = *(_QWORD *)v20;
      v19[8] = v20[8];
      v21 = v10[7];
      v22 = &v8[v21];
      v23 = &v9[v21];
      *(_QWORD *)v22 = *(_QWORD *)v23;
      v22[8] = v23[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    sub_100004030((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    v24 = sub_1000039AC(&qword_10036E458);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  v104((uint64_t)v8, (uint64_t)v9, v6);
  v41 = v10[5];
  v42 = &v8[v41];
  v43 = &v9[v41];
  *(_QWORD *)v42 = *(_QWORD *)v43;
  v42[8] = v43[8];
  v44 = v10[6];
  v45 = &v8[v44];
  v46 = &v9[v44];
  *(_QWORD *)v45 = *(_QWORD *)v46;
  v45[8] = v46[8];
  v47 = v10[7];
  v48 = &v8[v47];
  v49 = &v9[v47];
  *(_QWORD *)v48 = *(_QWORD *)v49;
  v48[8] = v49[8];
LABEL_7:
  v25 = a3[6];
  v26 = a3[7];
  v27 = a1 + v25;
  v28 = a2 + v25;
  *(_DWORD *)v27 = *(_DWORD *)v28;
  *(_BYTE *)(v27 + 4) = *(_BYTE *)(v28 + 4);
  v29 = (_BYTE *)(a1 + v26);
  v30 = (_BYTE *)(a2 + v26);
  v31 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
  v32 = *((_QWORD *)v31 - 1);
  v33 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v32 + 48);
  v34 = v33(v29, 1, v31);
  v35 = v33(v30, 1, v31);
  if (!v34)
  {
    if (v35)
    {
      sub_100004030((uint64_t)v29, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
      goto LABEL_13;
    }
    v104((uint64_t)v29, (uint64_t)v30, v6);
    v50 = v31[5];
    v51 = &v30[v50];
    v102 = (uint64_t)&v29[v50];
    v52 = v12();
    v53 = ((uint64_t (*)(char *, uint64_t, int *))v12)(v51, 1, v10);
    if (v52)
    {
      if (!v53)
      {
        ((void (*)(uint64_t, char *, uint64_t))__dst[4])(v102, v51, v6);
        v74 = v10[5];
        v75 = v102 + v74;
        v76 = &v51[v74];
        *(_QWORD *)v75 = *(_QWORD *)v76;
        *(_BYTE *)(v75 + 8) = v76[8];
        v77 = v10[6];
        v78 = v102 + v77;
        v79 = &v51[v77];
        *(_QWORD *)v78 = *(_QWORD *)v79;
        *(_BYTE *)(v78 + 8) = v79[8];
        v80 = v10[7];
        v81 = v102 + v80;
        v82 = &v51[v80];
        *(_QWORD *)v81 = *(_QWORD *)v82;
        *(_BYTE *)(v81 + 8) = v82[8];
        (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v103 + 56))(v102, 0, 1, v10);
        goto LABEL_25;
      }
      v54 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036E458) - 8) + 64);
      v55 = (void *)v102;
    }
    else
    {
      if (!v53)
      {
        v104(v102, (uint64_t)v51, v6);
        v83 = v10[5];
        v84 = v102 + v83;
        v85 = &v51[v83];
        *(_QWORD *)v84 = *(_QWORD *)v85;
        *(_BYTE *)(v84 + 8) = v85[8];
        v86 = v10[6];
        v87 = v102 + v86;
        v88 = &v51[v86];
        *(_QWORD *)v87 = *(_QWORD *)v88;
        *(_BYTE *)(v87 + 8) = v88[8];
        v89 = v10[7];
        v90 = v102 + v89;
        v91 = &v51[v89];
        *(_QWORD *)v90 = *(_QWORD *)v91;
        *(_BYTE *)(v90 + 8) = v91[8];
        goto LABEL_25;
      }
      sub_100004030(v102, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      v54 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036E458) - 8) + 64);
      v55 = (void *)v102;
    }
    memcpy(v55, v51, v54);
LABEL_25:
    v92 = v31[6];
    v93 = &v29[v92];
    v94 = &v30[v92];
    *(_QWORD *)v93 = *(_QWORD *)v94;
    v93[8] = v94[8];
    v95 = v31[7];
    v96 = &v29[v95];
    v97 = &v30[v95];
    v96[8] = v97[8];
    *(_QWORD *)v96 = *(_QWORD *)v97;
    v98 = v31[8];
    v99 = &v29[v98];
    v100 = &v30[v98];
    *(_QWORD *)v99 = *(_QWORD *)v100;
    v99[8] = v100[8];
    v29[v31[9]] = v30[v31[9]];
    v29[v31[10]] = v30[v31[10]];
    v29[v31[11]] = v30[v31[11]];
    v29[v31[12]] = v30[v31[12]];
    return a1;
  }
  if (v35)
  {
LABEL_13:
    v40 = sub_1000039AC(&qword_10036E4E8);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    return a1;
  }
  v36 = (void (*)(char *, char *, uint64_t))__dst[4];
  v36(v29, v30, v6);
  v37 = v31[5];
  __dsta = &v29[v37];
  v38 = &v30[v37];
  if (((unsigned int (*)(_BYTE *, uint64_t, int *))v12)(&v30[v37], 1, v10))
  {
    v39 = sub_1000039AC(&qword_10036E458);
    memcpy(__dsta, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
  }
  else
  {
    v36(__dsta, v38, v6);
    v56 = v10[5];
    v57 = &__dsta[v56];
    v58 = &v38[v56];
    *(_QWORD *)v57 = *(_QWORD *)v58;
    v57[8] = v58[8];
    v59 = v10[6];
    v60 = &__dsta[v59];
    v61 = &v38[v59];
    *(_QWORD *)v60 = *(_QWORD *)v61;
    v60[8] = v61[8];
    v62 = v10[7];
    v63 = &__dsta[v62];
    v64 = &v38[v62];
    *(_QWORD *)v63 = *(_QWORD *)v64;
    v63[8] = v64[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v103 + 56))(__dsta, 0, 1, v10);
  }
  v65 = v31[6];
  v66 = &v29[v65];
  v67 = &v30[v65];
  *(_QWORD *)v66 = *(_QWORD *)v67;
  v66[8] = v67[8];
  v68 = v31[7];
  v69 = &v29[v68];
  v70 = &v30[v68];
  v69[8] = v70[8];
  *(_QWORD *)v69 = *(_QWORD *)v70;
  v71 = v31[8];
  v72 = &v29[v71];
  v73 = &v30[v71];
  *(_QWORD *)v72 = *(_QWORD *)v73;
  v72[8] = v73[8];
  v29[v31[9]] = v30[v31[9]];
  v29[v31[10]] = v30[v31[10]];
  v29[v31[11]] = v30[v31[11]];
  v29[v31[12]] = v30[v31[12]];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v32 + 56))(v29, 0, 1, v31);
  return a1;
}

uint64_t sub_10013464C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100134658);
}

uint64_t sub_100134658(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100139E18(a1, a2, a3, &qword_10036E4E8);
}

uint64_t sub_100134664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100134670);
}

uint64_t sub_100134670(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_100139ED0(a1, a2, a3, a4, &qword_10036E4E8);
}

void sub_10013467C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100139F94(a1, a2, a3, (unint64_t *)&unk_100370E40, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t sub_100134690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013469C);
}

uint64_t sub_1001346A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001346AC);
}

uint64_t *sub_1001346B0(uint64_t *a1, uint64_t *a2, int *a3)
{
  return sub_1001346C4(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &qword_10036E4F0);
}

uint64_t *sub_1001346C4(uint64_t *a1, uint64_t *a2, int *a3, uint64_t (*a4)(_QWORD), uint64_t *a5)
{
  int v7;
  uint64_t v10;
  void (*v11)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, _QWORD, uint64_t, uint64_t);

  v7 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v7 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v7 + 16) & ~(unint64_t)v7));
    swift_retain(v18);
  }
  else
  {
    v10 = type metadata accessor for UnknownStorage(0);
    v11 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(a1, a2, v10);
    v12 = a3[5];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v16 = *((_QWORD *)v15 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
    {
      v17 = sub_1000039AC(&qword_10036E458);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v11((uint64_t *)v13, (uint64_t *)v14, v10);
      v19 = v15[5];
      v20 = &v13[v19];
      v21 = &v14[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v15[6];
      v23 = &v13[v22];
      v24 = &v14[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      v25 = v15[7];
      v26 = &v13[v25];
      v27 = &v14[v25];
      *(_QWORD *)v26 = *(_QWORD *)v27;
      v26[8] = v27[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
    }
    v28 = a3[6];
    v29 = a3[7];
    v30 = (char *)a1 + v28;
    v31 = (char *)a2 + v28;
    *(_DWORD *)v30 = *(_DWORD *)v31;
    v30[4] = v31[4];
    v32 = (char *)a1 + v29;
    v33 = (char *)a2 + v29;
    v34 = a4(0);
    v35 = *(_QWORD *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
    {
      v36 = sub_1000039AC(a5);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      v11((uint64_t *)v32, (uint64_t *)v33, v10);
      v37 = *(int *)(v34 + 20);
      v38 = *(_QWORD *)&v33[v37];
      *(_QWORD *)&v32[v37] = v38;
      v39 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56);
      swift_retain(v38);
      v39(v32, 0, 1, v34);
    }
  }
  return a1;
}

uint64_t sub_1001348E4(uint64_t a1, uint64_t a2)
{
  return sub_1001348F0(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
}

uint64_t sub_1001348F0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  v7(a1, v6);
  v8 = a1 + *(int *)(a2 + 20);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
    v7(v8, v6);
  v10 = a1 + *(int *)(a2 + 28);
  v11 = a3(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11);
  if (!(_DWORD)result)
  {
    v7(v10, v6);
    return swift_release(*(_QWORD *)(v10 + *(int *)(v11 + 20)));
  }
  return result;
}

uint64_t sub_1001349D4(uint64_t a1, uint64_t a2, int *a3)
{
  return sub_1001349E8(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &qword_10036E4F0);
}

uint64_t sub_1001349E8(uint64_t a1, uint64_t a2, int *a3, uint64_t (*a4)(_QWORD), uint64_t *a5)
{
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, _QWORD, uint64_t, uint64_t);

  v9 = type metadata accessor for UnknownStorage(0);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v10(a1, a2, v9);
  v11 = a3[5];
  v12 = (char *)(a1 + v11);
  v13 = (char *)(a2 + v11);
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v15 = *((_QWORD *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_1000039AC(&qword_10036E458);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v10((uint64_t)v12, (uint64_t)v13, v9);
    v17 = v14[5];
    v18 = &v12[v17];
    v19 = &v13[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v14[6];
    v21 = &v12[v20];
    v22 = &v13[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    v23 = v14[7];
    v24 = &v12[v23];
    v25 = &v13[v23];
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v24[8] = v25[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  v26 = a3[6];
  v27 = a3[7];
  v28 = a1 + v26;
  v29 = a2 + v26;
  *(_DWORD *)v28 = *(_DWORD *)v29;
  *(_BYTE *)(v28 + 4) = *(_BYTE *)(v29 + 4);
  v30 = (char *)(a1 + v27);
  v31 = (char *)(a2 + v27);
  v32 = a4(0);
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
  {
    v34 = sub_1000039AC(a5);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    v10((uint64_t)v30, (uint64_t)v31, v9);
    v35 = *(int *)(v32 + 20);
    v36 = *(_QWORD *)&v31[v35];
    *(_QWORD *)&v30[v35] = v36;
    v37 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56);
    swift_retain(v36);
    v37(v30, 0, 1, v32);
  }
  return a1;
}

uint64_t sub_100134BDC(uint64_t a1, uint64_t a2, int *a3)
{
  return sub_1001397E0(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &qword_10036E4F0);
}

uint64_t sub_100134BF0(uint64_t a1, uint64_t a2, int *a3)
{
  return sub_100134C04(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &qword_10036E4F0);
}

uint64_t sub_100134C04(uint64_t a1, uint64_t a2, int *a3, uint64_t (*a4)(_QWORD), uint64_t *a5)
{
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v9 = type metadata accessor for UnknownStorage(0);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(a1, a2, v9);
  v11 = a3[5];
  v12 = (char *)(a1 + v11);
  v13 = (char *)(a2 + v11);
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v15 = *((_QWORD *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_1000039AC(&qword_10036E458);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v10((uint64_t)v12, (uint64_t)v13, v9);
    v17 = v14[5];
    v18 = &v12[v17];
    v19 = &v13[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v14[6];
    v21 = &v12[v20];
    v22 = &v13[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    v23 = v14[7];
    v24 = &v12[v23];
    v25 = &v13[v23];
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v24[8] = v25[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  v26 = a3[6];
  v27 = a3[7];
  v28 = a1 + v26;
  v29 = a2 + v26;
  *(_DWORD *)v28 = *(_DWORD *)v29;
  *(_BYTE *)(v28 + 4) = *(_BYTE *)(v29 + 4);
  v30 = (char *)(a1 + v27);
  v31 = (char *)(a2 + v27);
  v32 = a4(0);
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
  {
    v34 = sub_1000039AC(a5);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    v10((uint64_t)v30, (uint64_t)v31, v9);
    *(_QWORD *)&v30[*(int *)(v32 + 20)] = *(_QWORD *)&v31[*(int *)(v32 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
  }
  return a1;
}

uint64_t sub_100134DF4(uint64_t a1, uint64_t a2, int *a3)
{
  return sub_100139B0C(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &qword_10036E4F0);
}

uint64_t sub_100134E08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100134E14);
}

uint64_t sub_100134E14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100139E18(a1, a2, a3, &qword_10036E4F0);
}

uint64_t sub_100134E20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100134E2C);
}

uint64_t sub_100134E2C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_100139ED0(a1, a2, a3, a4, &qword_10036E4F0);
}

void sub_100134E38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100139F94(a1, a2, a3, (unint64_t *)&unk_100370F50, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
}

uint64_t sub_100134E4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100134E58);
}

uint64_t sub_100134E5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100134E68);
}

uint64_t sub_100134E6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10012CC78(a1, a2, a3, (uint64_t)"\t", (uint64_t)"\t", (uint64_t)"\t", (uint64_t)"\t");
}

_QWORD *sub_100134E84(_QWORD *a1, char *a2, int *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, int *);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *(_QWORD *)a2;
  *a1 = *(_QWORD *)a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = &a2[v8];
    v11 = type metadata accessor for UnknownStorage(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain(v4);
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = (char *)v7 + v13;
    v15 = &a2[v13];
    v16 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v17 = *((_QWORD *)v16 - 1);
    v18 = *(unsigned int (**)(char *, uint64_t, int *))(v17 + 48);
    if (v18(v15, 1, v16))
    {
      v19 = sub_1000039AC(&qword_10036E458);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      v12(v14, v15, v11);
      v20 = v16[5];
      v21 = &v14[v20];
      v22 = &v15[v20];
      *(_QWORD *)v21 = *(_QWORD *)v22;
      v21[8] = v22[8];
      v23 = v16[6];
      v24 = &v14[v23];
      v25 = &v15[v23];
      *(_QWORD *)v24 = *(_QWORD *)v25;
      v24[8] = v25[8];
      v26 = v16[7];
      v27 = &v14[v26];
      v28 = &v15[v26];
      *(_QWORD *)v27 = *(_QWORD *)v28;
      v27[8] = v28[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
    }
    v29 = a3[7];
    v30 = (char *)v7 + v29;
    v31 = &a2[v29];
    if (v18(&a2[v29], 1, v16))
    {
      v32 = sub_1000039AC(&qword_10036E458);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      v12(v30, v31, v11);
      v33 = v16[5];
      v34 = &v30[v33];
      v35 = &v31[v33];
      *(_QWORD *)v34 = *(_QWORD *)v35;
      v34[8] = v35[8];
      v36 = v16[6];
      v37 = &v30[v36];
      v38 = &v31[v36];
      *(_QWORD *)v37 = *(_QWORD *)v38;
      v37[8] = v38[8];
      v39 = v16[7];
      v40 = &v30[v39];
      v41 = &v31[v39];
      *(_QWORD *)v40 = *(_QWORD *)v41;
      v40[8] = v41[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v17 + 56))(v30, 0, 1, v16);
    }
    v42 = a3[9];
    *((_BYTE *)v7 + a3[8]) = a2[a3[8]];
    *((_BYTE *)v7 + v42) = a2[v42];
  }
  return v7;
}

uint64_t sub_1001350DC(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  char *v9;
  uint64_t result;
  void (*v11)(char *, uint64_t);

  swift_bridgeObjectRelease(*a1);
  v4 = (char *)a1 + a2[5];
  v5 = type metadata accessor for UnknownStorage(0);
  v11 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v11(v4, v5);
  v6 = (char *)a1 + a2[6];
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48);
  if (!v8(v6, 1, v7))
    v11(v6, v5);
  v9 = (char *)a1 + a2[7];
  result = ((uint64_t (*)(char *, uint64_t, uint64_t))v8)(v9, 1, v7);
  if (!(_DWORD)result)
    return ((uint64_t (*)(char *, uint64_t))v11)(v9, v5);
  return result;
}

_QWORD *sub_1001351C8(_QWORD *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, int *);
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;

  v6 = *(_QWORD *)a2;
  *a1 = *(_QWORD *)a2;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = &a2[v7];
  v10 = type metadata accessor for UnknownStorage(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = &a2[v12];
  v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v16 = *((_QWORD *)v15 - 1);
  v17 = *(unsigned int (**)(char *, uint64_t, int *))(v16 + 48);
  if (v17(v14, 1, v15))
  {
    v18 = sub_1000039AC(&qword_10036E458);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v11(v13, v14, v10);
    v19 = v15[5];
    v20 = &v13[v19];
    v21 = &v14[v19];
    *(_QWORD *)v20 = *(_QWORD *)v21;
    v20[8] = v21[8];
    v22 = v15[6];
    v23 = &v13[v22];
    v24 = &v14[v22];
    *(_QWORD *)v23 = *(_QWORD *)v24;
    v23[8] = v24[8];
    v25 = v15[7];
    v26 = &v13[v25];
    v27 = &v14[v25];
    *(_QWORD *)v26 = *(_QWORD *)v27;
    v26[8] = v27[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  }
  v28 = a3[7];
  v29 = (char *)a1 + v28;
  v30 = &a2[v28];
  if (v17(&a2[v28], 1, v15))
  {
    v31 = sub_1000039AC(&qword_10036E458);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v11(v29, v30, v10);
    v32 = v15[5];
    v33 = &v29[v32];
    v34 = &v30[v32];
    *(_QWORD *)v33 = *(_QWORD *)v34;
    v33[8] = v34[8];
    v35 = v15[6];
    v36 = &v29[v35];
    v37 = &v30[v35];
    *(_QWORD *)v36 = *(_QWORD *)v37;
    v36[8] = v37[8];
    v38 = v15[7];
    v39 = &v29[v38];
    v40 = &v30[v38];
    *(_QWORD *)v39 = *(_QWORD *)v40;
    v39[8] = v40[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v16 + 56))(v29, 0, 1, v15);
  }
  v41 = a3[9];
  *((_BYTE *)a1 + a3[8]) = a2[a3[8]];
  *((_BYTE *)a1 + v41) = a2[v41];
  return a1;
}

char *sub_1001353F8(char *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  uint64_t (*v17)(char *, uint64_t, int *);
  int v18;
  int v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  int v36;
  int v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char v49;
  uint64_t v50;
  uint64_t v52;
  char *v53;
  char *v54;
  char v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char v75;
  void (*v76)(char *, char *, uint64_t);
  uint64_t v77;

  v6 = *a2;
  v7 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage(0);
  v12 = *(_QWORD *)(v11 - 8);
  v76 = *(void (**)(char *, char *, uint64_t))(v12 + 24);
  v76(v9, v10, v11);
  v13 = a3[6];
  v14 = &a1[v13];
  v15 = (char *)a2 + v13;
  v16 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v77 = *((_QWORD *)v16 - 1);
  v17 = *(uint64_t (**)(char *, uint64_t, int *))(v77 + 48);
  v18 = v17(v14, 1, v16);
  v19 = v17(v15, 1, v16);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, v15, v11);
      v20 = v16[5];
      v21 = &v14[v20];
      v22 = &v15[v20];
      v23 = v22[8];
      *(_QWORD *)v21 = *(_QWORD *)v22;
      v21[8] = v23;
      v24 = v16[6];
      v25 = &v14[v24];
      v26 = &v15[v24];
      v27 = v26[8];
      *(_QWORD *)v25 = *(_QWORD *)v26;
      v25[8] = v27;
      v28 = v16[7];
      v29 = &v14[v28];
      v30 = &v15[v28];
      v31 = v30[8];
      *(_QWORD *)v29 = *(_QWORD *)v30;
      v29[8] = v31;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v77 + 56))(v14, 0, 1, v16);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    sub_100004030((uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    v32 = sub_1000039AC(&qword_10036E458);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_7;
  }
  v76(v14, v15, v11);
  v52 = v16[5];
  v53 = &v14[v52];
  v54 = &v15[v52];
  v55 = v54[8];
  *(_QWORD *)v53 = *(_QWORD *)v54;
  v53[8] = v55;
  v56 = v16[6];
  v57 = &v14[v56];
  v58 = &v15[v56];
  v59 = v58[8];
  *(_QWORD *)v57 = *(_QWORD *)v58;
  v57[8] = v59;
  v60 = v16[7];
  v61 = &v14[v60];
  v62 = &v15[v60];
  v63 = v62[8];
  *(_QWORD *)v61 = *(_QWORD *)v62;
  v61[8] = v63;
LABEL_7:
  v33 = a3[7];
  v34 = &a1[v33];
  v35 = (char *)a2 + v33;
  v36 = v17(&a1[v33], 1, v16);
  v37 = v17(v35, 1, v16);
  if (!v36)
  {
    if (!v37)
    {
      v76(v34, v35, v11);
      v64 = v16[5];
      v65 = &v34[v64];
      v66 = &v35[v64];
      v67 = v66[8];
      *(_QWORD *)v65 = *(_QWORD *)v66;
      v65[8] = v67;
      v68 = v16[6];
      v69 = &v34[v68];
      v70 = &v35[v68];
      v71 = v70[8];
      *(_QWORD *)v69 = *(_QWORD *)v70;
      v69[8] = v71;
      v72 = v16[7];
      v73 = &v34[v72];
      v74 = &v35[v72];
      v75 = v74[8];
      *(_QWORD *)v73 = *(_QWORD *)v74;
      v73[8] = v75;
      goto LABEL_13;
    }
    sub_100004030((uint64_t)v34, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_12;
  }
  if (v37)
  {
LABEL_12:
    v50 = sub_1000039AC(&qword_10036E458);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v34, v35, v11);
  v38 = v16[5];
  v39 = &v34[v38];
  v40 = &v35[v38];
  v41 = v40[8];
  *(_QWORD *)v39 = *(_QWORD *)v40;
  v39[8] = v41;
  v42 = v16[6];
  v43 = &v34[v42];
  v44 = &v35[v42];
  v45 = v44[8];
  *(_QWORD *)v43 = *(_QWORD *)v44;
  v43[8] = v45;
  v46 = v16[7];
  v47 = &v34[v46];
  v48 = &v35[v46];
  v49 = v48[8];
  *(_QWORD *)v47 = *(_QWORD *)v48;
  v47[8] = v49;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v77 + 56))(v34, 0, 1, v16);
LABEL_13:
  a1[a3[8]] = *((_BYTE *)a2 + a3[8]);
  a1[a3[9]] = *((_BYTE *)a2 + a3[9]);
  return a1;
}

_QWORD *sub_100135784(_QWORD *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  unsigned int (*v16)(char *, uint64_t, int *);
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;

  *a1 = *(_QWORD *)a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = &a2[v6];
  v9 = type metadata accessor for UnknownStorage(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = (char *)a1 + v11;
  v13 = &a2[v11];
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v15 = *((_QWORD *)v14 - 1);
  v16 = *(unsigned int (**)(char *, uint64_t, int *))(v15 + 48);
  if (v16(v13, 1, v14))
  {
    v17 = sub_1000039AC(&qword_10036E458);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v10(v12, v13, v9);
    v18 = v14[5];
    v19 = &v12[v18];
    v20 = &v13[v18];
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[8] = v20[8];
    v21 = v14[6];
    v22 = &v12[v21];
    v23 = &v13[v21];
    *(_QWORD *)v22 = *(_QWORD *)v23;
    v22[8] = v23[8];
    v24 = v14[7];
    v25 = &v12[v24];
    v26 = &v13[v24];
    *(_QWORD *)v25 = *(_QWORD *)v26;
    v25[8] = v26[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  v27 = a3[7];
  v28 = (char *)a1 + v27;
  v29 = &a2[v27];
  if (v16(&a2[v27], 1, v14))
  {
    v30 = sub_1000039AC(&qword_10036E458);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    v10(v28, v29, v9);
    v31 = v14[5];
    v32 = &v28[v31];
    v33 = &v29[v31];
    *(_QWORD *)v32 = *(_QWORD *)v33;
    v32[8] = v33[8];
    v34 = v14[6];
    v35 = &v28[v34];
    v36 = &v29[v34];
    *(_QWORD *)v35 = *(_QWORD *)v36;
    v35[8] = v36[8];
    v37 = v14[7];
    v38 = &v28[v37];
    v39 = &v29[v37];
    *(_QWORD *)v38 = *(_QWORD *)v39;
    v38[8] = v39[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v28, 0, 1, v14);
  }
  v40 = a3[9];
  *((_BYTE *)a1 + a3[8]) = a2[a3[8]];
  *((_BYTE *)a1 + v40) = a2[v40];
  return a1;
}

char *sub_1001359AC(char *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t (*v16)(char *, uint64_t, int *);
  int v17;
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int v32;
  int v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  void (*v64)(char *, char *, uint64_t);
  uint64_t v65;

  v6 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = a3[5];
  v8 = &a1[v7];
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage(0);
  v11 = *(_QWORD *)(v10 - 8);
  v64 = *(void (**)(char *, char *, uint64_t))(v11 + 40);
  v64(v8, v9, v10);
  v12 = a3[6];
  v13 = &a1[v12];
  v14 = (char *)a2 + v12;
  v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v65 = *((_QWORD *)v15 - 1);
  v16 = *(uint64_t (**)(char *, uint64_t, int *))(v65 + 48);
  v17 = v16(v13, 1, v15);
  v18 = v16(v14, 1, v15);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v14, v10);
      v19 = v15[5];
      v20 = &v13[v19];
      v21 = &v14[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v15[6];
      v23 = &v13[v22];
      v24 = &v14[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      v25 = v15[7];
      v26 = &v13[v25];
      v27 = &v14[v25];
      *(_QWORD *)v26 = *(_QWORD *)v27;
      v26[8] = v27[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v65 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    sub_100004030((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    v28 = sub_1000039AC(&qword_10036E458);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  v64(v13, v14, v10);
  v46 = v15[5];
  v47 = &v13[v46];
  v48 = &v14[v46];
  *(_QWORD *)v47 = *(_QWORD *)v48;
  v47[8] = v48[8];
  v49 = v15[6];
  v50 = &v13[v49];
  v51 = &v14[v49];
  *(_QWORD *)v50 = *(_QWORD *)v51;
  v50[8] = v51[8];
  v52 = v15[7];
  v53 = &v13[v52];
  v54 = &v14[v52];
  *(_QWORD *)v53 = *(_QWORD *)v54;
  v53[8] = v54[8];
LABEL_7:
  v29 = a3[7];
  v30 = &a1[v29];
  v31 = (char *)a2 + v29;
  v32 = v16(&a1[v29], 1, v15);
  v33 = v16(v31, 1, v15);
  if (!v32)
  {
    if (!v33)
    {
      v64(v30, v31, v10);
      v55 = v15[5];
      v56 = &v30[v55];
      v57 = &v31[v55];
      *(_QWORD *)v56 = *(_QWORD *)v57;
      v56[8] = v57[8];
      v58 = v15[6];
      v59 = &v30[v58];
      v60 = &v31[v58];
      *(_QWORD *)v59 = *(_QWORD *)v60;
      v59[8] = v60[8];
      v61 = v15[7];
      v62 = &v30[v61];
      v63 = &v31[v61];
      *(_QWORD *)v62 = *(_QWORD *)v63;
      v62[8] = v63[8];
      goto LABEL_13;
    }
    sub_100004030((uint64_t)v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_12;
  }
  if (v33)
  {
LABEL_12:
    v43 = sub_1000039AC(&qword_10036E458);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v30, v31, v10);
  v34 = v15[5];
  v35 = &v30[v34];
  v36 = &v31[v34];
  *(_QWORD *)v35 = *(_QWORD *)v36;
  v35[8] = v36[8];
  v37 = v15[6];
  v38 = &v30[v37];
  v39 = &v31[v37];
  *(_QWORD *)v38 = *(_QWORD *)v39;
  v38[8] = v39[8];
  v40 = v15[7];
  v41 = &v30[v40];
  v42 = &v31[v40];
  *(_QWORD *)v41 = *(_QWORD *)v42;
  v41[8] = v42[8];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v65 + 56))(v30, 0, 1, v15);
LABEL_13:
  v44 = a3[9];
  a1[a3[8]] = *((_BYTE *)a2 + a3[8]);
  a1[v44] = *((_BYTE *)a2 + v44);
  return a1;
}

uint64_t sub_100135D2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100135D38);
}

uint64_t sub_100135D3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100135D48);
}

void sub_100135D4C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v6[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2 = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001198C(319, (unint64_t *)&unk_10036FA60, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v5 <= 0x3F)
    {
      v7 = *(_QWORD *)(v4 - 8) + 64;
      v8 = v7;
      v9 = &unk_1002D7CF0;
      v10 = &unk_1002D7CF0;
      swift_initStructMetadata(a1, 256, 6, v6, a1 + 16);
    }
  }
}

uint64_t _s10ALProtobuf53CLP_LogEntry_PrivateData_ClientSatelliteConstellationOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_100135E48 + 4 * byte_1002CAF65[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_100135E7C + 4 * byte_1002CAF60[v4]))();
}

uint64_t sub_100135E7C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100135E84(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100135E8CLL);
  return result;
}

uint64_t sub_100135E98(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100135EA0);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_100135EA4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100135EAC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType()
{
  return &type metadata for CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType;
}

_QWORD *sub_100135EC8(_QWORD *a1, char *a2, int *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, int *);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *(_QWORD *)a2;
  *a1 = *(_QWORD *)a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    v8 = *((_QWORD *)a2 + 1);
    a1[1] = v8;
    v9 = a3[6];
    v10 = (char *)a1 + v9;
    v11 = &a2[v9];
    v12 = type metadata accessor for UnknownStorage(0);
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v8);
    v13(v10, v11, v12);
    v14 = a3[7];
    v15 = (char *)v7 + v14;
    v16 = &a2[v14];
    v17 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v18 = *((_QWORD *)v17 - 1);
    v19 = *(unsigned int (**)(char *, uint64_t, int *))(v18 + 48);
    if (v19(v16, 1, v17))
    {
      v20 = sub_1000039AC(&qword_10036E458);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      v13(v15, v16, v12);
      v21 = v17[5];
      v22 = &v15[v21];
      v23 = &v16[v21];
      *(_QWORD *)v22 = *(_QWORD *)v23;
      v22[8] = v23[8];
      v24 = v17[6];
      v25 = &v15[v24];
      v26 = &v16[v24];
      *(_QWORD *)v25 = *(_QWORD *)v26;
      v25[8] = v26[8];
      v27 = v17[7];
      v28 = &v15[v27];
      v29 = &v16[v27];
      *(_QWORD *)v28 = *(_QWORD *)v29;
      v28[8] = v29[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v18 + 56))(v15, 0, 1, v17);
    }
    v30 = a3[8];
    v31 = (char *)v7 + v30;
    v32 = &a2[v30];
    if (v19(&a2[v30], 1, v17))
    {
      v33 = sub_1000039AC(&qword_10036E458);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      v13(v31, v32, v12);
      v34 = v17[5];
      v35 = &v31[v34];
      v36 = &v32[v34];
      *(_QWORD *)v35 = *(_QWORD *)v36;
      v35[8] = v36[8];
      v37 = v17[6];
      v38 = &v31[v37];
      v39 = &v32[v37];
      *(_QWORD *)v38 = *(_QWORD *)v39;
      v38[8] = v39[8];
      v40 = v17[7];
      v41 = &v31[v40];
      v42 = &v32[v40];
      *(_QWORD *)v41 = *(_QWORD *)v42;
      v41[8] = v42[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v18 + 56))(v31, 0, 1, v17);
    }
    v43 = a3[9];
    v44 = a3[10];
    v45 = (char *)v7 + v43;
    v46 = &a2[v43];
    *(_DWORD *)v45 = *(_DWORD *)v46;
    v45[4] = v46[4];
    *((_BYTE *)v7 + v44) = a2[v44];
    v47 = a3[11];
    v48 = a3[12];
    v49 = (char *)v7 + v47;
    v50 = &a2[v47];
    *(_DWORD *)v49 = *(_DWORD *)v50;
    v49[4] = v50[4];
    *((_BYTE *)v7 + v48) = a2[v48];
    *((_BYTE *)v7 + a3[13]) = a2[a3[13]];
  }
  return v7;
}

uint64_t sub_100136170(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  char *v9;
  uint64_t result;
  void (*v11)(char *, uint64_t);

  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  v4 = (char *)a1 + a2[6];
  v5 = type metadata accessor for UnknownStorage(0);
  v11 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v11(v4, v5);
  v6 = (char *)a1 + a2[7];
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48);
  if (!v8(v6, 1, v7))
    v11(v6, v5);
  v9 = (char *)a1 + a2[8];
  result = ((uint64_t (*)(char *, uint64_t, uint64_t))v8)(v9, 1, v7);
  if (!(_DWORD)result)
    return ((uint64_t (*)(char *, uint64_t))v11)(v9, v5);
  return result;
}

_QWORD *sub_100136264(_QWORD *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, int *);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;

  v6 = *(_QWORD *)a2;
  v7 = *((_QWORD *)a2 + 1);
  *a1 = *(_QWORD *)a2;
  a1[1] = v7;
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = &a2[v8];
  v11 = type metadata accessor for UnknownStorage(0);
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v12(v9, v10, v11);
  v13 = a3[7];
  v14 = (char *)a1 + v13;
  v15 = &a2[v13];
  v16 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v17 = *((_QWORD *)v16 - 1);
  v18 = *(unsigned int (**)(char *, uint64_t, int *))(v17 + 48);
  if (v18(v15, 1, v16))
  {
    v19 = sub_1000039AC(&qword_10036E458);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v12(v14, v15, v11);
    v20 = v16[5];
    v21 = &v14[v20];
    v22 = &v15[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    v23 = v16[6];
    v24 = &v14[v23];
    v25 = &v15[v23];
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v24[8] = v25[8];
    v26 = v16[7];
    v27 = &v14[v26];
    v28 = &v15[v26];
    *(_QWORD *)v27 = *(_QWORD *)v28;
    v27[8] = v28[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
  }
  v29 = a3[8];
  v30 = (char *)a1 + v29;
  v31 = &a2[v29];
  if (v18(&a2[v29], 1, v16))
  {
    v32 = sub_1000039AC(&qword_10036E458);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    v12(v30, v31, v11);
    v33 = v16[5];
    v34 = &v30[v33];
    v35 = &v31[v33];
    *(_QWORD *)v34 = *(_QWORD *)v35;
    v34[8] = v35[8];
    v36 = v16[6];
    v37 = &v30[v36];
    v38 = &v31[v36];
    *(_QWORD *)v37 = *(_QWORD *)v38;
    v37[8] = v38[8];
    v39 = v16[7];
    v40 = &v30[v39];
    v41 = &v31[v39];
    *(_QWORD *)v40 = *(_QWORD *)v41;
    v40[8] = v41[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v17 + 56))(v30, 0, 1, v16);
  }
  v42 = a3[9];
  v43 = a3[10];
  v44 = (char *)a1 + v42;
  v45 = &a2[v42];
  *(_DWORD *)v44 = *(_DWORD *)v45;
  v44[4] = v45[4];
  *((_BYTE *)a1 + v43) = a2[v43];
  v46 = a3[11];
  v47 = a3[12];
  v48 = (char *)a1 + v46;
  v49 = &a2[v46];
  *(_DWORD *)v48 = *(_DWORD *)v49;
  v48[4] = v49[4];
  *((_BYTE *)a1 + v47) = a2[v47];
  *((_BYTE *)a1 + a3[13]) = a2[a3[13]];
  return a1;
}

char *sub_1001364DC(char *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int *v18;
  uint64_t (*v19)(char *, uint64_t, int *);
  int v20;
  int v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  int v38;
  int v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  int v56;
  uint64_t v57;
  char *v58;
  char *v59;
  int v60;
  uint64_t v62;
  char *v63;
  char *v64;
  char v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char v85;
  void (*v86)(char *, char *, uint64_t);
  uint64_t v87;

  v6 = *a2;
  v7 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[1];
  v9 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a3[6];
  v11 = &a1[v10];
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UnknownStorage(0);
  v14 = *(_QWORD *)(v13 - 8);
  v86 = *(void (**)(char *, char *, uint64_t))(v14 + 24);
  v86(v11, v12, v13);
  v15 = a3[7];
  v16 = &a1[v15];
  v17 = (char *)a2 + v15;
  v18 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v87 = *((_QWORD *)v18 - 1);
  v19 = *(uint64_t (**)(char *, uint64_t, int *))(v87 + 48);
  v20 = v19(v16, 1, v18);
  v21 = v19(v17, 1, v18);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v16, v17, v13);
      v22 = v18[5];
      v23 = &v16[v22];
      v24 = &v17[v22];
      v25 = v24[8];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v25;
      v26 = v18[6];
      v27 = &v16[v26];
      v28 = &v17[v26];
      v29 = v28[8];
      *(_QWORD *)v27 = *(_QWORD *)v28;
      v27[8] = v29;
      v30 = v18[7];
      v31 = &v16[v30];
      v32 = &v17[v30];
      v33 = v32[8];
      *(_QWORD *)v31 = *(_QWORD *)v32;
      v31[8] = v33;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v87 + 56))(v16, 0, 1, v18);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    sub_100004030((uint64_t)v16, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    v34 = sub_1000039AC(&qword_10036E458);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_7;
  }
  v86(v16, v17, v13);
  v62 = v18[5];
  v63 = &v16[v62];
  v64 = &v17[v62];
  v65 = v64[8];
  *(_QWORD *)v63 = *(_QWORD *)v64;
  v63[8] = v65;
  v66 = v18[6];
  v67 = &v16[v66];
  v68 = &v17[v66];
  v69 = v68[8];
  *(_QWORD *)v67 = *(_QWORD *)v68;
  v67[8] = v69;
  v70 = v18[7];
  v71 = &v16[v70];
  v72 = &v17[v70];
  v73 = v72[8];
  *(_QWORD *)v71 = *(_QWORD *)v72;
  v71[8] = v73;
LABEL_7:
  v35 = a3[8];
  v36 = &a1[v35];
  v37 = (char *)a2 + v35;
  v38 = v19(&a1[v35], 1, v18);
  v39 = v19(v37, 1, v18);
  if (!v38)
  {
    if (!v39)
    {
      v86(v36, v37, v13);
      v74 = v18[5];
      v75 = &v36[v74];
      v76 = &v37[v74];
      v77 = v76[8];
      *(_QWORD *)v75 = *(_QWORD *)v76;
      v75[8] = v77;
      v78 = v18[6];
      v79 = &v36[v78];
      v80 = &v37[v78];
      v81 = v80[8];
      *(_QWORD *)v79 = *(_QWORD *)v80;
      v79[8] = v81;
      v82 = v18[7];
      v83 = &v36[v82];
      v84 = &v37[v82];
      v85 = v84[8];
      *(_QWORD *)v83 = *(_QWORD *)v84;
      v83[8] = v85;
      goto LABEL_13;
    }
    sub_100004030((uint64_t)v36, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_12;
  }
  if (v39)
  {
LABEL_12:
    v52 = sub_1000039AC(&qword_10036E458);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v36, v37, v13);
  v40 = v18[5];
  v41 = &v36[v40];
  v42 = &v37[v40];
  v43 = v42[8];
  *(_QWORD *)v41 = *(_QWORD *)v42;
  v41[8] = v43;
  v44 = v18[6];
  v45 = &v36[v44];
  v46 = &v37[v44];
  v47 = v46[8];
  *(_QWORD *)v45 = *(_QWORD *)v46;
  v45[8] = v47;
  v48 = v18[7];
  v49 = &v36[v48];
  v50 = &v37[v48];
  v51 = v50[8];
  *(_QWORD *)v49 = *(_QWORD *)v50;
  v49[8] = v51;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v87 + 56))(v36, 0, 1, v18);
LABEL_13:
  v53 = a3[9];
  v54 = &a1[v53];
  v55 = (char *)a2 + v53;
  v56 = *(_DWORD *)v55;
  v54[4] = v55[4];
  *(_DWORD *)v54 = v56;
  a1[a3[10]] = *((_BYTE *)a2 + a3[10]);
  v57 = a3[11];
  v58 = &a1[v57];
  v59 = (char *)a2 + v57;
  v60 = *(_DWORD *)v59;
  v58[4] = v59[4];
  *(_DWORD *)v58 = v60;
  a1[a3[12]] = *((_BYTE *)a2 + a3[12]);
  a1[a3[13]] = *((_BYTE *)a2 + a3[13]);
  return a1;
}

_OWORD *sub_1001368C4(_OWORD *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  unsigned int (*v16)(char *, uint64_t, int *);
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;

  *a1 = *(_OWORD *)a2;
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = &a2[v6];
  v9 = type metadata accessor for UnknownStorage(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[7];
  v12 = (char *)a1 + v11;
  v13 = &a2[v11];
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v15 = *((_QWORD *)v14 - 1);
  v16 = *(unsigned int (**)(char *, uint64_t, int *))(v15 + 48);
  if (v16(v13, 1, v14))
  {
    v17 = sub_1000039AC(&qword_10036E458);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v10(v12, v13, v9);
    v18 = v14[5];
    v19 = &v12[v18];
    v20 = &v13[v18];
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[8] = v20[8];
    v21 = v14[6];
    v22 = &v12[v21];
    v23 = &v13[v21];
    *(_QWORD *)v22 = *(_QWORD *)v23;
    v22[8] = v23[8];
    v24 = v14[7];
    v25 = &v12[v24];
    v26 = &v13[v24];
    *(_QWORD *)v25 = *(_QWORD *)v26;
    v25[8] = v26[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  v27 = a3[8];
  v28 = (char *)a1 + v27;
  v29 = &a2[v27];
  if (v16(&a2[v27], 1, v14))
  {
    v30 = sub_1000039AC(&qword_10036E458);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    v10(v28, v29, v9);
    v31 = v14[5];
    v32 = &v28[v31];
    v33 = &v29[v31];
    *(_QWORD *)v32 = *(_QWORD *)v33;
    v32[8] = v33[8];
    v34 = v14[6];
    v35 = &v28[v34];
    v36 = &v29[v34];
    *(_QWORD *)v35 = *(_QWORD *)v36;
    v35[8] = v36[8];
    v37 = v14[7];
    v38 = &v28[v37];
    v39 = &v29[v37];
    *(_QWORD *)v38 = *(_QWORD *)v39;
    v38[8] = v39[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v28, 0, 1, v14);
  }
  v40 = a3[9];
  v41 = a3[10];
  v42 = (char *)a1 + v40;
  v43 = &a2[v40];
  *(_DWORD *)v42 = *(_DWORD *)v43;
  v42[4] = v43[4];
  *((_BYTE *)a1 + v41) = a2[v41];
  v44 = a3[11];
  v45 = a3[12];
  v46 = (char *)a1 + v44;
  v47 = &a2[v44];
  *(_DWORD *)v46 = *(_DWORD *)v47;
  v46[4] = v47[4];
  *((_BYTE *)a1 + v45) = a2[v45];
  *((_BYTE *)a1 + a3[13]) = a2[a3[13]];
  return a1;
}

char *sub_100136B2C(char *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  uint64_t (*v17)(char *, uint64_t, int *);
  int v18;
  int v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int v33;
  int v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  void (*v72)(char *, char *, uint64_t);
  uint64_t v73;

  v6 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = a2[1];
  swift_bridgeObjectRelease(v7);
  v8 = a3[6];
  v9 = &a1[v8];
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage(0);
  v12 = *(_QWORD *)(v11 - 8);
  v72 = *(void (**)(char *, char *, uint64_t))(v12 + 40);
  v72(v9, v10, v11);
  v13 = a3[7];
  v14 = &a1[v13];
  v15 = (char *)a2 + v13;
  v16 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v73 = *((_QWORD *)v16 - 1);
  v17 = *(uint64_t (**)(char *, uint64_t, int *))(v73 + 48);
  v18 = v17(v14, 1, v16);
  v19 = v17(v15, 1, v16);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v15, v11);
      v20 = v16[5];
      v21 = &v14[v20];
      v22 = &v15[v20];
      *(_QWORD *)v21 = *(_QWORD *)v22;
      v21[8] = v22[8];
      v23 = v16[6];
      v24 = &v14[v23];
      v25 = &v15[v23];
      *(_QWORD *)v24 = *(_QWORD *)v25;
      v24[8] = v25[8];
      v26 = v16[7];
      v27 = &v14[v26];
      v28 = &v15[v26];
      *(_QWORD *)v27 = *(_QWORD *)v28;
      v27[8] = v28[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v73 + 56))(v14, 0, 1, v16);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    sub_100004030((uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    v29 = sub_1000039AC(&qword_10036E458);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_7;
  }
  v72(v14, v15, v11);
  v54 = v16[5];
  v55 = &v14[v54];
  v56 = &v15[v54];
  *(_QWORD *)v55 = *(_QWORD *)v56;
  v55[8] = v56[8];
  v57 = v16[6];
  v58 = &v14[v57];
  v59 = &v15[v57];
  *(_QWORD *)v58 = *(_QWORD *)v59;
  v58[8] = v59[8];
  v60 = v16[7];
  v61 = &v14[v60];
  v62 = &v15[v60];
  *(_QWORD *)v61 = *(_QWORD *)v62;
  v61[8] = v62[8];
LABEL_7:
  v30 = a3[8];
  v31 = &a1[v30];
  v32 = (char *)a2 + v30;
  v33 = v17(&a1[v30], 1, v16);
  v34 = v17(v32, 1, v16);
  if (!v33)
  {
    if (!v34)
    {
      v72(v31, v32, v11);
      v63 = v16[5];
      v64 = &v31[v63];
      v65 = &v32[v63];
      *(_QWORD *)v64 = *(_QWORD *)v65;
      v64[8] = v65[8];
      v66 = v16[6];
      v67 = &v31[v66];
      v68 = &v32[v66];
      *(_QWORD *)v67 = *(_QWORD *)v68;
      v67[8] = v68[8];
      v69 = v16[7];
      v70 = &v31[v69];
      v71 = &v32[v69];
      *(_QWORD *)v70 = *(_QWORD *)v71;
      v70[8] = v71[8];
      goto LABEL_13;
    }
    sub_100004030((uint64_t)v31, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_12;
  }
  if (v34)
  {
LABEL_12:
    v44 = sub_1000039AC(&qword_10036E458);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v31, v32, v11);
  v35 = v16[5];
  v36 = &v31[v35];
  v37 = &v32[v35];
  *(_QWORD *)v36 = *(_QWORD *)v37;
  v36[8] = v37[8];
  v38 = v16[6];
  v39 = &v31[v38];
  v40 = &v32[v38];
  *(_QWORD *)v39 = *(_QWORD *)v40;
  v39[8] = v40[8];
  v41 = v16[7];
  v42 = &v31[v41];
  v43 = &v32[v41];
  *(_QWORD *)v42 = *(_QWORD *)v43;
  v42[8] = v43[8];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v73 + 56))(v31, 0, 1, v16);
LABEL_13:
  v45 = a3[9];
  v46 = a3[10];
  v47 = &a1[v45];
  v48 = (char *)a2 + v45;
  *(_DWORD *)v47 = *(_DWORD *)v48;
  v47[4] = v48[4];
  a1[v46] = *((_BYTE *)a2 + v46);
  v49 = a3[11];
  v50 = a3[12];
  v51 = &a1[v49];
  v52 = (char *)a2 + v49;
  *(_DWORD *)v51 = *(_DWORD *)v52;
  v51[4] = v52[4];
  a1[v50] = *((_BYTE *)a2 + v50);
  a1[a3[13]] = *((_BYTE *)a2 + a3[13]);
  return a1;
}

uint64_t sub_100136EFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100136F08);
}

uint64_t sub_100136F08(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = sub_1000039AC(&qword_10036E458);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t sub_100136FAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100136FB8);
}

char *sub_100136FB8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = sub_1000039AC(&qword_10036E458);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void sub_100137058(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v6[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v6[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2 = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001198C(319, (unint64_t *)&unk_10036FA60, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v5 <= 0x3F)
    {
      v7 = *(_QWORD *)(v4 - 8) + 64;
      v8 = v7;
      v9 = &unk_1002D7AC8;
      v10 = &unk_1002D8040;
      v11 = &unk_1002D7AC8;
      v12 = &unk_1002D7C78;
      v13 = &unk_1002D7C78;
      swift_initStructMetadata(a1, 256, 10, v6, a1 + 16);
    }
  }
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType()
{
  return &type metadata for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10013720C + 4 * byte_1002CAF6F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100137240 + 4 * byte_1002CAF6A[v4]))();
}

uint64_t sub_100137240(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100137248(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100137250);
  return result;
}

uint64_t sub_10013725C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100137264);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100137268(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100137270(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_10013727C(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType()
{
  return &type metadata for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType;
}

uint64_t sub_100137298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001372A4);
}

uint64_t sub_1001372A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001372B4);
}

uint64_t sub_1001372B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001484E4(a1, a2, a3, (uint64_t)&unk_1002D8040, (uint64_t)&unk_1002D8040, (uint64_t)&unk_1002D7C78, (uint64_t)&unk_1002D7C78);
}

_QWORD *sub_1001372D4(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v10[8] = v11[8];
    *((_BYTE *)a1 + v9) = *((_BYTE *)a2 + v9);
    v12 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)a1 + v12) = *((_BYTE *)a2 + v12);
    v13 = a3[10];
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v14[4] = v15[4];
    *(_DWORD *)v14 = *(_DWORD *)v15;
  }
  return a1;
}

uint64_t sub_1001373AC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  v11 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  v12 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v13 = a1 + v12;
  v14 = a2 + v12;
  *(_BYTE *)(v13 + 4) = *(_BYTE *)(v14 + 4);
  *(_DWORD *)v13 = *(_DWORD *)v14;
  return a1;
}

uint64_t sub_100137458(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  *(_BYTE *)(v8 + 8) = *((_BYTE *)v9 + 8);
  *(_QWORD *)v8 = v10;
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v11 = a3[10];
  v12 = a1 + v11;
  v13 = a2 + v11;
  LOBYTE(v10) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = v10;
  return a1;
}

uint64_t sub_100137510(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  v11 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  v12 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v13 = a1 + v12;
  v14 = a2 + v12;
  *(_BYTE *)(v13 + 4) = *(_BYTE *)(v14 + 4);
  *(_DWORD *)v13 = *(_DWORD *)v14;
  return a1;
}

uint64_t sub_1001375BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  v11 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  v12 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v13 = a1 + v12;
  v14 = a2 + v12;
  *(_BYTE *)(v13 + 4) = *(_BYTE *)(v14 + 4);
  *(_DWORD *)v13 = *(_DWORD *)v14;
  return a1;
}

uint64_t sub_100137668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100137674);
}

uint64_t sub_100137678(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  int v10;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 2)
    v10 = ((v9 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v10 = -2;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_100137710(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013771C);
}

uint64_t sub_100137720(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 2;
  return result;
}

uint64_t sub_100137798(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  result = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "\t";
    v4[2] = &unk_1002D7C78;
    v4[3] = &unk_1002D7C78;
    v4[4] = &unk_1002D8040;
    v4[5] = &unk_1002D7C78;
    v4[6] = &unk_1002D7AC8;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10013782C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100137838);
}

uint64_t sub_10013783C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100137848);
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_DeviceStatus.NotificationType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xED)
    goto LABEL_17;
  if (a2 + 19 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 19) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 19;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 19;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 19;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x14;
  v8 = v6 - 20;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_DeviceStatus.NotificationType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 19 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 19) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xED)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEC)
    return ((uint64_t (*)(void))((char *)&loc_100137928 + 4 * byte_1002CAF79[v4]))();
  *a1 = a2 + 19;
  return ((uint64_t (*)(void))((char *)sub_10013795C + 4 * byte_1002CAF74[v4]))();
}

uint64_t sub_10013795C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100137964(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10013796CLL);
  return result;
}

uint64_t sub_100137978(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100137980);
  *(_BYTE *)result = a2 + 19;
  return result;
}

uint64_t sub_100137984(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10013798C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus.NotificationType()
{
  return &type metadata for CLP_LogEntry_PrivateData_DeviceStatus.NotificationType;
}

char *sub_1001379A8(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v13 = *((_QWORD *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      v14 = sub_1000039AC(&qword_10036E458);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v8(v10, v11, v7);
      v16 = v12[5];
      v17 = &v10[v16];
      v18 = &v11[v16];
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v17[8] = v18[8];
      v19 = v12[6];
      v20 = &v10[v19];
      v21 = &v11[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v12[7];
      v23 = &v10[v22];
      v24 = &v11[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    v25 = a3[7];
    a1[a3[6]] = a2[a3[6]];
    a1[v25] = a2[v25];
    v26 = a3[8];
    v27 = &a1[v26];
    v28 = &a2[v26];
    *(_DWORD *)v27 = *(_DWORD *)v28;
    v27[4] = v28[4];
  }
  return a1;
}

uint64_t sub_100137B44(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_1000039AC(&qword_10036E458);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v23) = *(_BYTE *)(a2 + v23);
  v24 = a3[8];
  v25 = a1 + v24;
  v26 = a2 + v24;
  *(_DWORD *)v25 = *(_DWORD *)v26;
  *(_BYTE *)(v25 + 4) = *(_BYTE *)(v26 + 4);
  return a1;
}

uint64_t sub_100137CB4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t (*v13)(char *, uint64_t, int *);
  int v14;
  int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  int v32;
  uint64_t v34;
  char *v35;
  char *v36;
  char v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char v45;
  uint64_t v46;
  int *v47;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v47 = a3;
  v9 = a3[5];
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v46 = *((_QWORD *)v12 - 1);
  v13 = *(uint64_t (**)(char *, uint64_t, int *))(v46 + 48);
  v14 = v13(v10, 1, v12);
  v15 = v13(v11, 1, v12);
  if (!v14)
  {
    if (!v15)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      v34 = v12[5];
      v35 = &v10[v34];
      v36 = &v11[v34];
      v37 = v36[8];
      *(_QWORD *)v35 = *(_QWORD *)v36;
      v35[8] = v37;
      v38 = v12[6];
      v39 = &v10[v38];
      v40 = &v11[v38];
      v41 = v40[8];
      *(_QWORD *)v39 = *(_QWORD *)v40;
      v39[8] = v41;
      v42 = v12[7];
      v43 = &v10[v42];
      v44 = &v11[v42];
      v45 = v44[8];
      *(_QWORD *)v43 = *(_QWORD *)v44;
      v43[8] = v45;
      goto LABEL_7;
    }
    sub_100004030((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v28 = sub_1000039AC(&qword_10036E458);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v11, v6);
  v16 = v12[5];
  v17 = &v10[v16];
  v18 = &v11[v16];
  v19 = v18[8];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v19;
  v20 = v12[6];
  v21 = &v10[v20];
  v22 = &v11[v20];
  v23 = v22[8];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v23;
  v24 = v12[7];
  v25 = &v10[v24];
  v26 = &v11[v24];
  v27 = v26[8];
  *(_QWORD *)v25 = *(_QWORD *)v26;
  v25[8] = v27;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v46 + 56))(v10, 0, 1, v12);
LABEL_7:
  *(_BYTE *)(a1 + v47[6]) = *(_BYTE *)(a2 + v47[6]);
  *(_BYTE *)(a1 + v47[7]) = *(_BYTE *)(a2 + v47[7]);
  v29 = v47[8];
  v30 = a1 + v29;
  v31 = (int *)(a2 + v29);
  v32 = *v31;
  *(_BYTE *)(v30 + 4) = *((_BYTE *)v31 + 4);
  *(_DWORD *)v30 = v32;
  return a1;
}

uint64_t sub_100137ED8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_1000039AC(&qword_10036E458);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v23) = *(_BYTE *)(a2 + v23);
  v24 = a3[8];
  v25 = a1 + v24;
  v26 = a2 + v24;
  *(_DWORD *)v25 = *(_DWORD *)v26;
  *(_BYTE *)(v25 + 4) = *(_BYTE *)(v26 + 4);
  return a1;
}

uint64_t sub_100138048(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t (*v13)(char *, uint64_t, int *);
  int v14;
  int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  int *v41;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v41 = a3;
  v9 = a3[5];
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v40 = *((_QWORD *)v12 - 1);
  v13 = *(uint64_t (**)(char *, uint64_t, int *))(v40 + 48);
  v14 = v13(v10, 1, v12);
  v15 = v13(v11, 1, v12);
  if (!v14)
  {
    if (!v15)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      v31 = v12[5];
      v32 = &v10[v31];
      v33 = &v11[v31];
      *(_QWORD *)v32 = *(_QWORD *)v33;
      v32[8] = v33[8];
      v34 = v12[6];
      v35 = &v10[v34];
      v36 = &v11[v34];
      *(_QWORD *)v35 = *(_QWORD *)v36;
      v35[8] = v36[8];
      v37 = v12[7];
      v38 = &v10[v37];
      v39 = &v11[v37];
      *(_QWORD *)v38 = *(_QWORD *)v39;
      v38[8] = v39[8];
      goto LABEL_7;
    }
    sub_100004030((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v25 = sub_1000039AC(&qword_10036E458);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v11, v6);
  v16 = v12[5];
  v17 = &v10[v16];
  v18 = &v11[v16];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  v19 = v12[6];
  v20 = &v10[v19];
  v21 = &v11[v19];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v20[8] = v21[8];
  v22 = v12[7];
  v23 = &v10[v22];
  v24 = &v11[v22];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v23[8] = v24[8];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v40 + 56))(v10, 0, 1, v12);
LABEL_7:
  v26 = v41[7];
  *(_BYTE *)(a1 + v41[6]) = *(_BYTE *)(a2 + v41[6]);
  *(_BYTE *)(a1 + v26) = *(_BYTE *)(a2 + v26);
  v27 = v41[8];
  v28 = a1 + v27;
  v29 = a2 + v27;
  *(_DWORD *)v28 = *(_DWORD *)v29;
  *(_BYTE *)(v28 + 4) = *(_BYTE *)(v29 + 4);
  return a1;
}

uint64_t sub_100138268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100138274);
}

uint64_t sub_100138274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  unsigned int v15;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_1000039AC(&qword_10036E458);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 24)) <= 8u)
    v14 = 8;
  else
    v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  v15 = v14 - 8;
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 24)) >= 8u)
    return v15;
  else
    return 0;
}

uint64_t sub_100138328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100138334);
}

uint64_t sub_100138334(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = sub_1000039AC(&qword_10036E458);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 8;
  return result;
}

void sub_1001383DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100141050(a1, a2, a3, (uint64_t)&unk_1002D82D8, (uint64_t)&unk_1002D82D8, (uint64_t)&unk_1002D7AC8);
}

uint64_t _s10ALProtobuf58CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevelOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_100138440 + 4 * byte_1002CAF83[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_100138474 + 4 * byte_1002CAF7E[v4]))();
}

uint64_t sub_100138474(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10013847C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100138484);
  return result;
}

uint64_t sub_100138490(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100138498);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_10013849C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001384A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType()
{
  return &type metadata for CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType;
}

uint64_t sub_1001384C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001384CC);
}

uint64_t sub_1001384CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 24)) <= 4u)
    v9 = 4;
  else
    v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  v10 = v9 - 4;
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 24)) >= 4u)
    return v10;
  else
    return 0;
}

uint64_t sub_100138550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013855C);
}

uint64_t sub_10013855C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 4;
  return result;
}

uint64_t sub_1001385D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000780DC(a1, a2, a3, (uint64_t)&unk_1002D82D8, (uint64_t)&unk_1002D7E08);
}

uint64_t sub_1001385E8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t (*v13)(char *, uint64_t, int *);
  int v14;
  int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  int v40;
  uint64_t v42;
  char *v43;
  char *v44;
  char v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char v53;
  uint64_t v54;
  int *v55;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v55 = a3;
  v9 = a3[5];
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v54 = *((_QWORD *)v12 - 1);
  v13 = *(uint64_t (**)(char *, uint64_t, int *))(v54 + 48);
  v14 = v13(v10, 1, v12);
  v15 = v13(v11, 1, v12);
  if (!v14)
  {
    if (!v15)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      v42 = v12[5];
      v43 = &v10[v42];
      v44 = &v11[v42];
      v45 = v44[8];
      *(_QWORD *)v43 = *(_QWORD *)v44;
      v43[8] = v45;
      v46 = v12[6];
      v47 = &v10[v46];
      v48 = &v11[v46];
      v49 = v48[8];
      *(_QWORD *)v47 = *(_QWORD *)v48;
      v47[8] = v49;
      v50 = v12[7];
      v51 = &v10[v50];
      v52 = &v11[v50];
      v53 = v52[8];
      *(_QWORD *)v51 = *(_QWORD *)v52;
      v51[8] = v53;
      goto LABEL_7;
    }
    sub_100004030((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v28 = sub_1000039AC(&qword_10036E458);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v11, v6);
  v16 = v12[5];
  v17 = &v10[v16];
  v18 = &v11[v16];
  v19 = v18[8];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v19;
  v20 = v12[6];
  v21 = &v10[v20];
  v22 = &v11[v20];
  v23 = v22[8];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v23;
  v24 = v12[7];
  v25 = &v10[v24];
  v26 = &v11[v24];
  v27 = v26[8];
  *(_QWORD *)v25 = *(_QWORD *)v26;
  v25[8] = v27;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v54 + 56))(v10, 0, 1, v12);
LABEL_7:
  v29 = v55[6];
  v30 = a1 + v29;
  v31 = (int *)(a2 + v29);
  v32 = *v31;
  *(_BYTE *)(v30 + 4) = *((_BYTE *)v31 + 4);
  *(_DWORD *)v30 = v32;
  v33 = v55[7];
  v34 = a1 + v33;
  v35 = (int *)(a2 + v33);
  v36 = *v35;
  *(_BYTE *)(v34 + 4) = *((_BYTE *)v35 + 4);
  *(_DWORD *)v34 = v36;
  v37 = v55[8];
  v38 = a1 + v37;
  v39 = (int *)(a2 + v37);
  v40 = *v39;
  *(_BYTE *)(v38 + 4) = *((_BYTE *)v39 + 4);
  *(_DWORD *)v38 = v40;
  return a1;
}

uint64_t sub_10013882C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t (*v13)(char *, uint64_t, int *);
  int v14;
  int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  int *v46;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v46 = a3;
  v9 = a3[5];
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v45 = *((_QWORD *)v12 - 1);
  v13 = *(uint64_t (**)(char *, uint64_t, int *))(v45 + 48);
  v14 = v13(v10, 1, v12);
  v15 = v13(v11, 1, v12);
  if (!v14)
  {
    if (!v15)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      v36 = v12[5];
      v37 = &v10[v36];
      v38 = &v11[v36];
      *(_QWORD *)v37 = *(_QWORD *)v38;
      v37[8] = v38[8];
      v39 = v12[6];
      v40 = &v10[v39];
      v41 = &v11[v39];
      *(_QWORD *)v40 = *(_QWORD *)v41;
      v40[8] = v41[8];
      v42 = v12[7];
      v43 = &v10[v42];
      v44 = &v11[v42];
      *(_QWORD *)v43 = *(_QWORD *)v44;
      v43[8] = v44[8];
      goto LABEL_7;
    }
    sub_100004030((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v25 = sub_1000039AC(&qword_10036E458);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v11, v6);
  v16 = v12[5];
  v17 = &v10[v16];
  v18 = &v11[v16];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  v19 = v12[6];
  v20 = &v10[v19];
  v21 = &v11[v19];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v20[8] = v21[8];
  v22 = v12[7];
  v23 = &v10[v22];
  v24 = &v11[v22];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v23[8] = v24[8];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v45 + 56))(v10, 0, 1, v12);
LABEL_7:
  v26 = v46[6];
  v27 = v46[7];
  v28 = a1 + v26;
  v29 = a2 + v26;
  *(_DWORD *)v28 = *(_DWORD *)v29;
  *(_BYTE *)(v28 + 4) = *(_BYTE *)(v29 + 4);
  v30 = a1 + v27;
  v31 = a2 + v27;
  *(_DWORD *)v30 = *(_DWORD *)v31;
  *(_BYTE *)(v30 + 4) = *(_BYTE *)(v31 + 4);
  v32 = v46[8];
  v33 = a1 + v32;
  v34 = a2 + v32;
  *(_DWORD *)v33 = *(_DWORD *)v34;
  *(_BYTE *)(v33 + 4) = *(_BYTE *)(v34 + 4);
  return a1;
}

uint64_t sub_100138A6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100138A78);
}

uint64_t sub_100138A78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013E9C4(a1, a2, a3, &qword_10036E458);
}

uint64_t sub_100138A84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100138A90);
}

uint64_t sub_100138A90(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_10013EA54(a1, a2, a3, a4, &qword_10036E458);
}

uint64_t sub_100138A9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100138AA8);
}

uint64_t sub_100138AAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100138AB8);
}

uint64_t *sub_100138ABC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = *(int *)(a3 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v13 = *((_QWORD *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      v14 = sub_1000039AC(&qword_10036E458);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      v16 = v12[5];
      v17 = &v10[v16];
      v18 = &v11[v16];
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v17[8] = v18[8];
      v19 = v12[6];
      v20 = &v10[v19];
      v21 = &v11[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v12[7];
      v23 = &v10[v22];
      v24 = &v11[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
  }
  return a1;
}

uint64_t sub_100138C20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_1000039AC(&qword_10036E458);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t sub_100138D58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, int *);
  int v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char v28;
  uint64_t v29;
  uint64_t v31;
  char *v32;
  char *v33;
  char v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char v42;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v13 = *((_QWORD *)v12 - 1);
  v14 = *(uint64_t (**)(char *, uint64_t, int *))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      v31 = v12[5];
      v32 = &v10[v31];
      v33 = &v11[v31];
      v34 = v33[8];
      *(_QWORD *)v32 = *(_QWORD *)v33;
      v32[8] = v34;
      v35 = v12[6];
      v36 = &v10[v35];
      v37 = &v11[v35];
      v38 = v37[8];
      *(_QWORD *)v36 = *(_QWORD *)v37;
      v36[8] = v38;
      v39 = v12[7];
      v40 = &v10[v39];
      v41 = &v11[v39];
      v42 = v41[8];
      *(_QWORD *)v40 = *(_QWORD *)v41;
      v40[8] = v42;
      return a1;
    }
    sub_100004030((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v29 = sub_1000039AC(&qword_10036E458);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v11, v6);
  v17 = v12[5];
  v18 = &v10[v17];
  v19 = &v11[v17];
  v20 = v19[8];
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v18[8] = v20;
  v21 = v12[6];
  v22 = &v10[v21];
  v23 = &v11[v21];
  v24 = v23[8];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v24;
  v25 = v12[7];
  v26 = &v10[v25];
  v27 = &v11[v25];
  v28 = v27[8];
  *(_QWORD *)v26 = *(_QWORD *)v27;
  v26[8] = v28;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
  return a1;
}

uint64_t sub_100138F30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_1000039AC(&qword_10036E458);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t sub_100139068(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, int *);
  int v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v13 = *((_QWORD *)v12 - 1);
  v14 = *(uint64_t (**)(char *, uint64_t, int *))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      v28 = v12[5];
      v29 = &v10[v28];
      v30 = &v11[v28];
      *(_QWORD *)v29 = *(_QWORD *)v30;
      v29[8] = v30[8];
      v31 = v12[6];
      v32 = &v10[v31];
      v33 = &v11[v31];
      *(_QWORD *)v32 = *(_QWORD *)v33;
      v32[8] = v33[8];
      v34 = v12[7];
      v35 = &v10[v34];
      v36 = &v11[v34];
      *(_QWORD *)v35 = *(_QWORD *)v36;
      v35[8] = v36[8];
      return a1;
    }
    sub_100004030((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v26 = sub_1000039AC(&qword_10036E458);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v11, v6);
  v17 = v12[5];
  v18 = &v10[v17];
  v19 = &v11[v17];
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v18[8] = v19[8];
  v20 = v12[6];
  v21 = &v10[v20];
  v22 = &v11[v20];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v22[8];
  v23 = v12[7];
  v24 = &v10[v23];
  v25 = &v11[v23];
  *(_QWORD *)v24 = *(_QWORD *)v25;
  v24[8] = v25[8];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
  return a1;
}

uint64_t sub_100139240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013924C);
}

uint64_t sub_10013924C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013E9C4(a1, a2, a3, &qword_10036E458);
}

uint64_t sub_100139258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100139264);
}

uint64_t sub_100139264(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_10013EA54(a1, a2, a3, a4, &qword_10036E458);
}

uint64_t sub_100139270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013927C);
}

uint64_t sub_100139280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013928C);
}

_QWORD *sub_100139290(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
    v9 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)a1 + v9) = *((_BYTE *)a2 + v9);
    v10 = a3[10];
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    *((_BYTE *)a1 + v10) = *((_BYTE *)a2 + v10);
    v11 = a3[12];
    *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    *((_BYTE *)a1 + v11) = *((_BYTE *)a2 + v11);
  }
  return a1;
}

uint64_t sub_10013935C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  v9 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v9) = *(_BYTE *)(a2 + v9);
  v10 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  return a1;
}

uint64_t sub_1001393FC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_1001394AC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  v9 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v9) = *(_BYTE *)(a2 + v9);
  v10 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  return a1;
}

uint64_t sub_10013954C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  v9 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v9) = *(_BYTE *)(a2 + v9);
  v10 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  return a1;
}

uint64_t sub_1001395EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001395F8);
}

uint64_t sub_1001395FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100139608);
}

uint64_t sub_10013960C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013961C(a1, a2, a3, (uint64_t)&unk_1002D7C78, (uint64_t)&unk_1002D7C78);
}

uint64_t sub_10013961C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  unint64_t v9;
  _QWORD v10[9];

  result = type metadata accessor for UnknownStorage(319);
  if (v9 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(result - 8) + 64;
    v10[1] = a4;
    v10[2] = a5;
    v10[3] = a5;
    v10[4] = a5;
    v10[5] = a5;
    v10[6] = a5;
    v10[7] = &unk_1002D7C78;
    v10[8] = &unk_1002D7C78;
    swift_initStructMetadata(a1, 256, 9, v10, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1001396AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001396B8);
}

uint64_t sub_1001396BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001396C8);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_100139718 + 4 * byte_1002CAF8D[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10013974C + 4 * byte_1002CAF88[v4]))();
}

uint64_t sub_10013974C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100139754(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10013975CLL);
  return result;
}

uint64_t sub_100139768(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100139770);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_100139774(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10013977C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType()
{
  return &type metadata for CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType;
}

uint64_t *sub_100139798(uint64_t *a1, uint64_t *a2, int *a3)
{
  return sub_1001346C4(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &qword_10036E518);
}

uint64_t sub_1001397AC(uint64_t a1, uint64_t a2)
{
  return sub_1001348F0(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
}

uint64_t sub_1001397B8(uint64_t a1, uint64_t a2, int *a3)
{
  return sub_1001349E8(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &qword_10036E518);
}

uint64_t sub_1001397CC(uint64_t a1, uint64_t a2, int *a3)
{
  return sub_1001397E0(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &qword_10036E518);
}

uint64_t sub_1001397E0(uint64_t a1, uint64_t a2, int *a3, uint64_t (*a4)(_QWORD), uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, int *);
  int v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  int v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(char *, uint64_t, uint64_t);
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v47;
  char *v48;
  char *v49;
  char v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;

  v8 = type metadata accessor for UnknownStorage(0);
  v63 = *(_QWORD *)(v8 - 8);
  v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 24);
  v62(a1, a2, v8);
  v9 = a3[5];
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v13 = *((_QWORD *)v12 - 1);
  v14 = *(uint64_t (**)(char *, uint64_t, int *))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v10, v11, v8);
      v17 = v12[5];
      v18 = &v10[v17];
      v19 = &v11[v17];
      v20 = v19[8];
      *(_QWORD *)v18 = *(_QWORD *)v19;
      v18[8] = v20;
      v21 = v12[6];
      v22 = &v10[v21];
      v23 = &v11[v21];
      v24 = v23[8];
      *(_QWORD *)v22 = *(_QWORD *)v23;
      v22[8] = v24;
      v25 = v12[7];
      v26 = &v10[v25];
      v27 = &v11[v25];
      v28 = v27[8];
      *(_QWORD *)v26 = *(_QWORD *)v27;
      v26[8] = v28;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    sub_100004030((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    v29 = sub_1000039AC(&qword_10036E458);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_7;
  }
  v62((uint64_t)v10, (uint64_t)v11, v8);
  v47 = v12[5];
  v48 = &v10[v47];
  v49 = &v11[v47];
  v50 = v49[8];
  *(_QWORD *)v48 = *(_QWORD *)v49;
  v48[8] = v50;
  v51 = v12[6];
  v52 = &v10[v51];
  v53 = &v11[v51];
  v54 = v53[8];
  *(_QWORD *)v52 = *(_QWORD *)v53;
  v52[8] = v54;
  v55 = v12[7];
  v56 = &v10[v55];
  v57 = &v11[v55];
  v58 = v57[8];
  *(_QWORD *)v56 = *(_QWORD *)v57;
  v56[8] = v58;
LABEL_7:
  v30 = a3[6];
  v31 = a1 + v30;
  v32 = (int *)(a2 + v30);
  v33 = *v32;
  *(_BYTE *)(v31 + 4) = *((_BYTE *)v32 + 4);
  *(_DWORD *)v31 = v33;
  v34 = a3[7];
  v35 = (char *)(a1 + v34);
  v36 = (char *)(a2 + v34);
  v37 = a4(0);
  v38 = *(_QWORD *)(v37 - 8);
  v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 48);
  v40 = v39(v35, 1, v37);
  v41 = v39(v36, 1, v37);
  if (!v40)
  {
    if (!v41)
    {
      v62((uint64_t)v35, (uint64_t)v36, v8);
      v59 = *(int *)(v37 + 20);
      v60 = *(_QWORD *)&v36[v59];
      v61 = *(_QWORD *)&v35[v59];
      *(_QWORD *)&v35[v59] = v60;
      swift_retain(v60);
      swift_release(v61);
      return a1;
    }
    sub_100004030((uint64_t)v35, a4);
    goto LABEL_12;
  }
  if (v41)
  {
LABEL_12:
    v45 = sub_1000039AC(a5);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v35, v36, v8);
  v42 = *(int *)(v37 + 20);
  v43 = *(_QWORD *)&v36[v42];
  *(_QWORD *)&v35[v42] = v43;
  v44 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56);
  swift_retain(v43);
  v44(v35, 0, 1, v37);
  return a1;
}

uint64_t sub_100139AE4(uint64_t a1, uint64_t a2, int *a3)
{
  return sub_100134C04(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &qword_10036E518);
}

uint64_t sub_100139AF8(uint64_t a1, uint64_t a2, int *a3)
{
  return sub_100139B0C(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &qword_10036E518);
}

uint64_t sub_100139B0C(uint64_t a1, uint64_t a2, int *a3, uint64_t (*a4)(_QWORD), uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, int *);
  int v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;

  v8 = type metadata accessor for UnknownStorage(0);
  v52 = *(_QWORD *)(v8 - 8);
  v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 40);
  v51(a1, a2, v8);
  v9 = a3[5];
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v13 = *((_QWORD *)v12 - 1);
  v14 = *(uint64_t (**)(char *, uint64_t, int *))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v10, v11, v8);
      v17 = v12[5];
      v18 = &v10[v17];
      v19 = &v11[v17];
      *(_QWORD *)v18 = *(_QWORD *)v19;
      v18[8] = v19[8];
      v20 = v12[6];
      v21 = &v10[v20];
      v22 = &v11[v20];
      *(_QWORD *)v21 = *(_QWORD *)v22;
      v21[8] = v22[8];
      v23 = v12[7];
      v24 = &v10[v23];
      v25 = &v11[v23];
      *(_QWORD *)v24 = *(_QWORD *)v25;
      v24[8] = v25[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    sub_100004030((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    v26 = sub_1000039AC(&qword_10036E458);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  v51((uint64_t)v10, (uint64_t)v11, v8);
  v40 = v12[5];
  v41 = &v10[v40];
  v42 = &v11[v40];
  *(_QWORD *)v41 = *(_QWORD *)v42;
  v41[8] = v42[8];
  v43 = v12[6];
  v44 = &v10[v43];
  v45 = &v11[v43];
  *(_QWORD *)v44 = *(_QWORD *)v45;
  v44[8] = v45[8];
  v46 = v12[7];
  v47 = &v10[v46];
  v48 = &v11[v46];
  *(_QWORD *)v47 = *(_QWORD *)v48;
  v47[8] = v48[8];
LABEL_7:
  v27 = a3[6];
  v28 = a3[7];
  v29 = a1 + v27;
  v30 = a2 + v27;
  *(_DWORD *)v29 = *(_DWORD *)v30;
  *(_BYTE *)(v29 + 4) = *(_BYTE *)(v30 + 4);
  v31 = (char *)(a1 + v28);
  v32 = (char *)(a2 + v28);
  v33 = a4(0);
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
  v36 = v35(v31, 1, v33);
  v37 = v35(v32, 1, v33);
  if (!v36)
  {
    if (!v37)
    {
      v51((uint64_t)v31, (uint64_t)v32, v8);
      v49 = *(int *)(v33 + 20);
      v50 = *(_QWORD *)&v31[v49];
      *(_QWORD *)&v31[v49] = *(_QWORD *)&v32[v49];
      swift_release(v50);
      return a1;
    }
    sub_100004030((uint64_t)v31, a4);
    goto LABEL_12;
  }
  if (v37)
  {
LABEL_12:
    v38 = sub_1000039AC(a5);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v31, v32, v8);
  *(_QWORD *)&v31[*(int *)(v33 + 20)] = *(_QWORD *)&v32[*(int *)(v33 + 20)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  return a1;
}

uint64_t sub_100139E00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100139E0C);
}

uint64_t sub_100139E0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100139E18(a1, a2, a3, &qword_10036E518);
}

uint64_t sub_100139E18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    v12 = a1;
  }
  else
  {
    v13 = sub_1000039AC(&qword_10036E458);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
    {
      v10 = v13;
      v15 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = sub_1000039AC(a4);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a3 + 28);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  }
  return v11(v12, a2, v10);
}

uint64_t sub_100139EB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100139EC4);
}

uint64_t sub_100139EC4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_100139ED0(a1, a2, a3, a4, &qword_10036E518);
}

uint64_t sub_100139ED0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v10 = type metadata accessor for UnknownStorage(0);
  v11 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v11 + 84) == a3)
  {
    v12 = v10;
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v14 = a1;
  }
  else
  {
    v15 = sub_1000039AC(&qword_10036E458);
    v16 = *(_QWORD *)(v15 - 8);
    if (*(_DWORD *)(v16 + 84) == a3)
    {
      v12 = v15;
      v17 = *(int *)(a4 + 20);
    }
    else
    {
      v12 = sub_1000039AC(a5);
      v16 = *(_QWORD *)(v12 - 8);
      v17 = *(int *)(a4 + 28);
    }
    v14 = a1 + v17;
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
  }
  return v13(v14, a2, a2, v12);
}

void sub_100139F80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100139F94(a1, a2, a3, (unint64_t *)&unk_1003717A0, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
}

void sub_100139F94(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[4];

  v8 = type metadata accessor for UnknownStorage(319);
  if (v9 <= 0x3F)
  {
    v14[0] = *(_QWORD *)(v8 - 8) + 64;
    sub_10001198C(319, (unint64_t *)&unk_10036FA60, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v11 <= 0x3F)
    {
      v14[1] = *(_QWORD *)(v10 - 8) + 64;
      v14[2] = &unk_1002D7AC8;
      sub_10001198C(319, a4, a5);
      if (v13 <= 0x3F)
      {
        v14[3] = *(_QWORD *)(v12 - 8) + 64;
        swift_initStructMetadata(a1, 256, 4, v14, a1 + 16);
      }
    }
  }
}

uint64_t sub_10013A064(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013A070);
}

uint64_t sub_10013A074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013A080);
}

uint64_t sub_10013A084(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013A090(a1, a2, a3, (uint64_t)&unk_1002D7AC8);
}

uint64_t sub_10013A090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v7;
  _QWORD v8[4];

  result = type metadata accessor for UnknownStorage(319);
  if (v7 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(result - 8) + 64;
    v8[1] = a4;
    v8[2] = a4;
    v8[3] = a4;
    swift_initStructMetadata(a1, 256, 4, v8, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10013A100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013A10C);
}

uint64_t sub_10013A110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013A11C);
}

uint64_t sub_10013A120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013A12C);
}

uint64_t sub_10013A130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013A13C);
}

char *sub_10013A140(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v13 = *((_QWORD *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      v14 = sub_1000039AC(&qword_10036E458);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v8(v10, v11, v7);
      v16 = v12[5];
      v17 = &v10[v16];
      v18 = &v11[v16];
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v17[8] = v18[8];
      v19 = v12[6];
      v20 = &v10[v19];
      v21 = &v11[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v12[7];
      v23 = &v10[v22];
      v24 = &v11[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    v25 = a3[6];
    v26 = &a1[v25];
    v27 = &a2[v25];
    v28 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0);
    v29 = *(_QWORD *)(v28 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      v30 = sub_1000039AC(&qword_10036E530);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      v8(v26, v27, v7);
      v31 = *(int *)(v28 + 20);
      v32 = *(_QWORD *)&v27[v31];
      *(_QWORD *)&v26[v31] = v32;
      v33 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56);
      swift_retain(v32);
      v33(v26, 0, 1, v28);
    }
    v34 = a3[7];
    v35 = a3[8];
    v36 = &a1[v34];
    v37 = &a2[v34];
    *(_DWORD *)v36 = *(_DWORD *)v37;
    v36[4] = v37[4];
    v38 = &a1[v35];
    v39 = &a2[v35];
    *(_DWORD *)v38 = *(_DWORD *)v39;
    v38[4] = v39[4];
    a1[a3[9]] = a2[a3[9]];
  }
  return a1;
}

uint64_t sub_10013A37C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = a1 + *(int *)(a2 + 20);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
    v5(v6, v4);
  v8 = a1 + *(int *)(a2 + 24);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
  if (!(_DWORD)result)
  {
    v5(v8, v4);
    return swift_release(*(_QWORD *)(v8 + *(int *)(v9 + 20)));
  }
  return result;
}

uint64_t sub_10013A45C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_1000039AC(&qword_10036E458);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[6];
  v24 = (char *)(a1 + v23);
  v25 = (char *)(a2 + v23);
  v26 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0);
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    v28 = sub_1000039AC(&qword_10036E530);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v24, (uint64_t)v25, v6);
    v29 = *(int *)(v26 + 20);
    v30 = *(_QWORD *)&v25[v29];
    *(_QWORD *)&v24[v29] = v30;
    v31 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56);
    swift_retain(v30);
    v31(v24, 0, 1, v26);
  }
  v32 = a3[7];
  v33 = a3[8];
  v34 = a1 + v32;
  v35 = a2 + v32;
  *(_DWORD *)v34 = *(_DWORD *)v35;
  *(_BYTE *)(v34 + 4) = *(_BYTE *)(v35 + 4);
  v36 = a1 + v33;
  v37 = a2 + v33;
  *(_DWORD *)v36 = *(_DWORD *)v37;
  *(_BYTE *)(v36 + 4) = *(_BYTE *)(v37 + 4);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10013A66C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, int *);
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t, uint64_t);
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  int v47;
  uint64_t v49;
  char *v50;
  char *v51;
  char v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t v65;

  v6 = type metadata accessor for UnknownStorage(0);
  v65 = *(_QWORD *)(v6 - 8);
  v64 = *(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 24);
  v64(a1, a2, v6);
  v7 = a3[5];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(char *, uint64_t, int *))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v8, v9, v6);
      v15 = v10[5];
      v16 = &v8[v15];
      v17 = &v9[v15];
      v18 = v17[8];
      *(_QWORD *)v16 = *(_QWORD *)v17;
      v16[8] = v18;
      v19 = v10[6];
      v20 = &v8[v19];
      v21 = &v9[v19];
      v22 = v21[8];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v22;
      v23 = v10[7];
      v24 = &v8[v23];
      v25 = &v9[v23];
      v26 = v25[8];
      *(_QWORD *)v24 = *(_QWORD *)v25;
      v24[8] = v26;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    sub_100004030((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    v27 = sub_1000039AC(&qword_10036E458);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  v64((uint64_t)v8, (uint64_t)v9, v6);
  v49 = v10[5];
  v50 = &v8[v49];
  v51 = &v9[v49];
  v52 = v51[8];
  *(_QWORD *)v50 = *(_QWORD *)v51;
  v50[8] = v52;
  v53 = v10[6];
  v54 = &v8[v53];
  v55 = &v9[v53];
  v56 = v55[8];
  *(_QWORD *)v54 = *(_QWORD *)v55;
  v54[8] = v56;
  v57 = v10[7];
  v58 = &v8[v57];
  v59 = &v9[v57];
  v60 = v59[8];
  *(_QWORD *)v58 = *(_QWORD *)v59;
  v58[8] = v60;
LABEL_7:
  v28 = a3[6];
  v29 = (char *)(a1 + v28);
  v30 = (char *)(a2 + v28);
  v31 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48);
  v34 = v33(v29, 1, v31);
  v35 = v33(v30, 1, v31);
  if (!v34)
  {
    if (!v35)
    {
      v64((uint64_t)v29, (uint64_t)v30, v6);
      v61 = *(int *)(v31 + 20);
      v62 = *(_QWORD *)&v30[v61];
      v63 = *(_QWORD *)&v29[v61];
      *(_QWORD *)&v29[v61] = v62;
      swift_retain(v62);
      swift_release(v63);
      goto LABEL_13;
    }
    sub_100004030((uint64_t)v29, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
    goto LABEL_12;
  }
  if (v35)
  {
LABEL_12:
    v39 = sub_1000039AC(&qword_10036E530);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v29, v30, v6);
  v36 = *(int *)(v31 + 20);
  v37 = *(_QWORD *)&v30[v36];
  *(_QWORD *)&v29[v36] = v37;
  v38 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56);
  swift_retain(v37);
  v38(v29, 0, 1, v31);
LABEL_13:
  v40 = a3[7];
  v41 = a1 + v40;
  v42 = (int *)(a2 + v40);
  v43 = *v42;
  *(_BYTE *)(v41 + 4) = *((_BYTE *)v42 + 4);
  *(_DWORD *)v41 = v43;
  v44 = a3[8];
  v45 = a1 + v44;
  v46 = (int *)(a2 + v44);
  v47 = *v46;
  *(_BYTE *)(v45 + 4) = *((_BYTE *)v46 + 4);
  *(_DWORD *)v45 = v47;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10013A998(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_1000039AC(&qword_10036E458);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[6];
  v24 = (char *)(a1 + v23);
  v25 = (char *)(a2 + v23);
  v26 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0);
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    v28 = sub_1000039AC(&qword_10036E530);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v24, (uint64_t)v25, v6);
    *(_QWORD *)&v24[*(int *)(v26 + 20)] = *(_QWORD *)&v25[*(int *)(v26 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  v29 = a3[7];
  v30 = a3[8];
  v31 = a1 + v29;
  v32 = a2 + v29;
  *(_DWORD *)v31 = *(_DWORD *)v32;
  *(_BYTE *)(v31 + 4) = *(_BYTE *)(v32 + 4);
  v33 = a1 + v30;
  v34 = a2 + v30;
  *(_DWORD *)v33 = *(_DWORD *)v34;
  *(_BYTE *)(v33 + 4) = *(_BYTE *)(v34 + 4);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10013ABA4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, int *);
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t, uint64_t);
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, uint64_t);
  uint64_t v53;

  v6 = type metadata accessor for UnknownStorage(0);
  v53 = *(_QWORD *)(v6 - 8);
  v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 40);
  v52(a1, a2, v6);
  v7 = a3[5];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(char *, uint64_t, int *))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v8, v9, v6);
      v15 = v10[5];
      v16 = &v8[v15];
      v17 = &v9[v15];
      *(_QWORD *)v16 = *(_QWORD *)v17;
      v16[8] = v17[8];
      v18 = v10[6];
      v19 = &v8[v18];
      v20 = &v9[v18];
      *(_QWORD *)v19 = *(_QWORD *)v20;
      v19[8] = v20[8];
      v21 = v10[7];
      v22 = &v8[v21];
      v23 = &v9[v21];
      *(_QWORD *)v22 = *(_QWORD *)v23;
      v22[8] = v23[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    sub_100004030((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    v24 = sub_1000039AC(&qword_10036E458);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  v52((uint64_t)v8, (uint64_t)v9, v6);
  v41 = v10[5];
  v42 = &v8[v41];
  v43 = &v9[v41];
  *(_QWORD *)v42 = *(_QWORD *)v43;
  v42[8] = v43[8];
  v44 = v10[6];
  v45 = &v8[v44];
  v46 = &v9[v44];
  *(_QWORD *)v45 = *(_QWORD *)v46;
  v45[8] = v46[8];
  v47 = v10[7];
  v48 = &v8[v47];
  v49 = &v9[v47];
  *(_QWORD *)v48 = *(_QWORD *)v49;
  v48[8] = v49[8];
LABEL_7:
  v25 = a3[6];
  v26 = (char *)(a1 + v25);
  v27 = (char *)(a2 + v25);
  v28 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48);
  v31 = v30(v26, 1, v28);
  v32 = v30(v27, 1, v28);
  if (!v31)
  {
    if (!v32)
    {
      v52((uint64_t)v26, (uint64_t)v27, v6);
      v50 = *(int *)(v28 + 20);
      v51 = *(_QWORD *)&v26[v50];
      *(_QWORD *)&v26[v50] = *(_QWORD *)&v27[v50];
      swift_release(v51);
      goto LABEL_13;
    }
    sub_100004030((uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
    goto LABEL_12;
  }
  if (v32)
  {
LABEL_12:
    v33 = sub_1000039AC(&qword_10036E530);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v26, v27, v6);
  *(_QWORD *)&v26[*(int *)(v28 + 20)] = *(_QWORD *)&v27[*(int *)(v28 + 20)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
LABEL_13:
  v34 = a3[7];
  v35 = a3[8];
  v36 = a1 + v34;
  v37 = a2 + v34;
  *(_DWORD *)v36 = *(_DWORD *)v37;
  *(_BYTE *)(v36 + 4) = *(_BYTE *)(v37 + 4);
  v38 = a1 + v35;
  v39 = a2 + v35;
  *(_DWORD *)v38 = *(_DWORD *)v39;
  *(_BYTE *)(v38 + 4) = *(_BYTE *)(v39 + 4);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10013AEC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013AECC);
}

uint64_t sub_10013AECC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v16;
  int v17;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_1000039AC(&qword_10036E458);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_7:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = sub_1000039AC(&qword_10036E530);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[6];
    goto LABEL_7;
  }
  v16 = *(unsigned __int8 *)(a1 + a3[9]);
  if (v16 >= 2)
    v17 = ((v16 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v17 = -2;
  if (v17 < 0)
    v17 = -1;
  return (v17 + 1);
}

uint64_t sub_10013AFBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013AFC8);
}

uint64_t sub_10013AFC8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v8 = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = sub_1000039AC(&qword_10036E458);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[5];
LABEL_7:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  result = sub_1000039AC(&qword_10036E530);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[6];
    goto LABEL_7;
  }
  *(_BYTE *)(a1 + a4[9]) = a2 + 2;
  return result;
}

void sub_10013B098(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[6];

  v2 = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001198C(319, (unint64_t *)&unk_10036FA60, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_10001198C(319, (unint64_t *)&unk_1003719C8, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        v8[3] = &unk_1002D7AC8;
        v8[4] = &unk_1002D7AC8;
        v8[5] = &unk_1002D7C78;
        swift_initStructMetadata(a1, 256, 6, v8, a1 + 16);
      }
    }
  }
}

uint64_t sub_10013B16C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013B178);
}

uint64_t sub_10013B17C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013B188);
}

uint64_t sub_10013B18C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013B198);
}

uint64_t sub_10013B19C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013B1A8);
}

uint64_t *sub_10013B1AC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    *(_DWORD *)v9 = *(_DWORD *)v10;
    v9[4] = v10[4];
  }
  return a1;
}

uint64_t sub_10013B244(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_DWORD *)v8 = *(_DWORD *)v9;
  *(_BYTE *)(v8 + 4) = *(_BYTE *)(v9 + 4);
  return a1;
}

uint64_t sub_10013B2B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 4);
  *(_DWORD *)v8 = *(_DWORD *)v9;
  *(_BYTE *)(v8 + 4) = v10;
  return a1;
}

uint64_t sub_10013B31C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_DWORD *)v8 = *(_DWORD *)v9;
  *(_BYTE *)(v8 + 4) = *(_BYTE *)(v9 + 4);
  return a1;
}

uint64_t sub_10013B388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_DWORD *)v8 = *(_DWORD *)v9;
  *(_BYTE *)(v8 + 4) = *(_BYTE *)(v9 + 4);
  return a1;
}

uint64_t sub_10013B3F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013B400);
}

uint64_t sub_10013B404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013B410);
}

uint64_t sub_10013B414(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100148CFC(a1, a2, a3, (uint64_t)&unk_1002D7AC8);
}

char *sub_10013B420(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v13 = *((_QWORD *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      v14 = sub_1000039AC(&qword_10036E458);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v8(v10, v11, v7);
      v16 = v12[5];
      v17 = &v10[v16];
      v18 = &v11[v16];
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v17[8] = v18[8];
      v19 = v12[6];
      v20 = &v10[v19];
      v21 = &v11[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v12[7];
      v23 = &v10[v22];
      v24 = &v11[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    v25 = a3[6];
    v26 = &a1[v25];
    v27 = &a2[v25];
    v28 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0);
    v29 = *(_QWORD *)(v28 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      v30 = sub_1000039AC(&qword_10036E538);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      v8(v26, v27, v7);
      v31 = *(int *)(v28 + 20);
      v32 = *(_QWORD *)&v27[v31];
      *(_QWORD *)&v26[v31] = v32;
      v33 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56);
      swift_retain(v32);
      v33(v26, 0, 1, v28);
    }
    v34 = a3[8];
    a1[a3[7]] = a2[a3[7]];
    v35 = &a1[v34];
    v36 = &a2[v34];
    *(_DWORD *)v35 = *(_DWORD *)v36;
    v35[4] = v36[4];
    v37 = a3[10];
    a1[a3[9]] = a2[a3[9]];
    v38 = &a1[v37];
    v39 = &a2[v37];
    v40 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
    v41 = *(_QWORD *)(v40 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
    {
      v42 = sub_1000039AC(&qword_10036E540);
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    }
    else
    {
      v8(v38, v39, v7);
      v43 = *(int *)(v40 + 20);
      v44 = &v38[v43];
      v45 = &v39[v43];
      *(_DWORD *)v44 = *(_DWORD *)v45;
      v44[4] = v45[4];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
    }
    v46 = a3[11];
    v47 = a3[12];
    v48 = &a1[v46];
    v49 = &a2[v46];
    *(_DWORD *)v48 = *(_DWORD *)v49;
    v48[4] = v49[4];
    v50 = &a1[v47];
    v51 = &a2[v47];
    *(_DWORD *)v50 = *(_DWORD *)v51;
    v50[4] = v51[4];
  }
  return a1;
}

uint64_t sub_10013B718(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  void (*v12)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage(0);
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v12(a1, v4);
  v5 = a1 + a2[5];
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
    v12(v5, v4);
  v7 = a1 + a2[6];
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
  {
    v12(v7, v4);
    swift_release(*(_QWORD *)(v7 + *(int *)(v8 + 20)));
  }
  v9 = a1 + a2[10];
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v12)(v9, v4);
  return result;
}

uint64_t sub_10013B84C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_1000039AC(&qword_10036E458);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[6];
  v24 = (char *)(a1 + v23);
  v25 = (char *)(a2 + v23);
  v26 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0);
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    v28 = sub_1000039AC(&qword_10036E538);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v24, (uint64_t)v25, v6);
    v29 = *(int *)(v26 + 20);
    v30 = *(_QWORD *)&v25[v29];
    *(_QWORD *)&v24[v29] = v30;
    v31 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56);
    swift_retain(v30);
    v31(v24, 0, 1, v26);
  }
  v32 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v33 = a1 + v32;
  v34 = a2 + v32;
  *(_DWORD *)v33 = *(_DWORD *)v34;
  *(_BYTE *)(v33 + 4) = *(_BYTE *)(v34 + 4);
  v35 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v36 = (char *)(a1 + v35);
  v37 = (char *)(a2 + v35);
  v38 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  v39 = *(_QWORD *)(v38 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
  {
    v40 = sub_1000039AC(&qword_10036E540);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v36, (uint64_t)v37, v6);
    v41 = *(int *)(v38 + 20);
    v42 = &v36[v41];
    v43 = &v37[v41];
    *(_DWORD *)v42 = *(_DWORD *)v43;
    v42[4] = v43[4];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
  }
  v44 = a3[11];
  v45 = a3[12];
  v46 = a1 + v44;
  v47 = a2 + v44;
  *(_DWORD *)v46 = *(_DWORD *)v47;
  *(_BYTE *)(v46 + 4) = *(_BYTE *)(v47 + 4);
  v48 = a1 + v45;
  v49 = a2 + v45;
  *(_DWORD *)v48 = *(_DWORD *)v49;
  *(_BYTE *)(v48 + 4) = *(_BYTE *)(v49 + 4);
  return a1;
}

uint64_t sub_10013BB18(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, int *);
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t, uint64_t);
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  int v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(char *, uint64_t, uint64_t);
  int v50;
  int v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  int v64;
  uint64_t v66;
  char *v67;
  char *v68;
  char v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char v84;
  void (*v85)(uint64_t, uint64_t, uint64_t);
  uint64_t v86;

  v6 = type metadata accessor for UnknownStorage(0);
  v86 = *(_QWORD *)(v6 - 8);
  v85 = *(void (**)(uint64_t, uint64_t, uint64_t))(v86 + 24);
  v85(a1, a2, v6);
  v7 = a3[5];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(char *, uint64_t, int *))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v8, v9, v6);
      v15 = v10[5];
      v16 = &v8[v15];
      v17 = &v9[v15];
      v18 = v17[8];
      *(_QWORD *)v16 = *(_QWORD *)v17;
      v16[8] = v18;
      v19 = v10[6];
      v20 = &v8[v19];
      v21 = &v9[v19];
      v22 = v21[8];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v22;
      v23 = v10[7];
      v24 = &v8[v23];
      v25 = &v9[v23];
      v26 = v25[8];
      *(_QWORD *)v24 = *(_QWORD *)v25;
      v24[8] = v26;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    sub_100004030((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    v27 = sub_1000039AC(&qword_10036E458);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  v85((uint64_t)v8, (uint64_t)v9, v6);
  v66 = v10[5];
  v67 = &v8[v66];
  v68 = &v9[v66];
  v69 = v68[8];
  *(_QWORD *)v67 = *(_QWORD *)v68;
  v67[8] = v69;
  v70 = v10[6];
  v71 = &v8[v70];
  v72 = &v9[v70];
  v73 = v72[8];
  *(_QWORD *)v71 = *(_QWORD *)v72;
  v71[8] = v73;
  v74 = v10[7];
  v75 = &v8[v74];
  v76 = &v9[v74];
  v77 = v76[8];
  *(_QWORD *)v75 = *(_QWORD *)v76;
  v75[8] = v77;
LABEL_7:
  v28 = a3[6];
  v29 = (char *)(a1 + v28);
  v30 = (char *)(a2 + v28);
  v31 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48);
  v34 = v33(v29, 1, v31);
  v35 = v33(v30, 1, v31);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v29, v30, v6);
      v36 = *(int *)(v31 + 20);
      v37 = *(_QWORD *)&v30[v36];
      *(_QWORD *)&v29[v36] = v37;
      v38 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56);
      swift_retain(v37);
      v38(v29, 0, 1, v31);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v35)
  {
    sub_100004030((uint64_t)v29, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
LABEL_12:
    v39 = sub_1000039AC(&qword_10036E538);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    goto LABEL_13;
  }
  v85((uint64_t)v29, (uint64_t)v30, v6);
  v78 = *(int *)(v31 + 20);
  v79 = *(_QWORD *)&v30[v78];
  v80 = *(_QWORD *)&v29[v78];
  *(_QWORD *)&v29[v78] = v79;
  swift_retain(v79);
  swift_release(v80);
LABEL_13:
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v40 = a3[8];
  v41 = a1 + v40;
  v42 = (int *)(a2 + v40);
  v43 = *v42;
  *(_BYTE *)(v41 + 4) = *((_BYTE *)v42 + 4);
  *(_DWORD *)v41 = v43;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v44 = a3[10];
  v45 = (char *)(a1 + v44);
  v46 = (char *)(a2 + v44);
  v47 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  v48 = *(_QWORD *)(v47 - 8);
  v49 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 48);
  v50 = v49(v45, 1, v47);
  v51 = v49(v46, 1, v47);
  if (!v50)
  {
    if (!v51)
    {
      v85((uint64_t)v45, (uint64_t)v46, v6);
      v81 = *(int *)(v47 + 20);
      v82 = &v45[v81];
      v83 = &v46[v81];
      v84 = v83[4];
      *(_DWORD *)v82 = *(_DWORD *)v83;
      v82[4] = v84;
      goto LABEL_19;
    }
    sub_100004030((uint64_t)v45, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
    goto LABEL_18;
  }
  if (v51)
  {
LABEL_18:
    v56 = sub_1000039AC(&qword_10036E540);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v45, v46, v6);
  v52 = *(int *)(v47 + 20);
  v53 = &v45[v52];
  v54 = &v46[v52];
  v55 = v54[4];
  *(_DWORD *)v53 = *(_DWORD *)v54;
  v53[4] = v55;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
LABEL_19:
  v57 = a3[11];
  v58 = a1 + v57;
  v59 = (int *)(a2 + v57);
  v60 = *v59;
  *(_BYTE *)(v58 + 4) = *((_BYTE *)v59 + 4);
  *(_DWORD *)v58 = v60;
  v61 = a3[12];
  v62 = a1 + v61;
  v63 = (int *)(a2 + v61);
  v64 = *v63;
  *(_BYTE *)(v62 + 4) = *((_BYTE *)v63 + 4);
  *(_DWORD *)v62 = v64;
  return a1;
}

uint64_t sub_10013BF70(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_1000039AC(&qword_10036E458);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[6];
  v24 = (char *)(a1 + v23);
  v25 = (char *)(a2 + v23);
  v26 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0);
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    v28 = sub_1000039AC(&qword_10036E538);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v24, (uint64_t)v25, v6);
    *(_QWORD *)&v24[*(int *)(v26 + 20)] = *(_QWORD *)&v25[*(int *)(v26 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  v29 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v30 = a1 + v29;
  v31 = a2 + v29;
  *(_DWORD *)v30 = *(_DWORD *)v31;
  *(_BYTE *)(v30 + 4) = *(_BYTE *)(v31 + 4);
  v32 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v33 = (char *)(a1 + v32);
  v34 = (char *)(a2 + v32);
  v35 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  v36 = *(_QWORD *)(v35 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
  {
    v37 = sub_1000039AC(&qword_10036E540);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v33, (uint64_t)v34, v6);
    v38 = *(int *)(v35 + 20);
    v39 = &v33[v38];
    v40 = &v34[v38];
    *(_DWORD *)v39 = *(_DWORD *)v40;
    v39[4] = v40[4];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
  }
  v41 = a3[11];
  v42 = a3[12];
  v43 = a1 + v41;
  v44 = a2 + v41;
  *(_DWORD *)v43 = *(_DWORD *)v44;
  *(_BYTE *)(v43 + 4) = *(_BYTE *)(v44 + 4);
  v45 = a1 + v42;
  v46 = a2 + v42;
  *(_DWORD *)v45 = *(_DWORD *)v46;
  *(_BYTE *)(v45 + 4) = *(_BYTE *)(v46 + 4);
  return a1;
}

uint64_t sub_10013C238(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, int *);
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t, uint64_t);
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(char *, uint64_t, uint64_t);
  int v43;
  int v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  void (*v70)(uint64_t, uint64_t, uint64_t);
  uint64_t v71;

  v6 = type metadata accessor for UnknownStorage(0);
  v71 = *(_QWORD *)(v6 - 8);
  v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 40);
  v70(a1, a2, v6);
  v7 = a3[5];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(char *, uint64_t, int *))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v71 + 32))(v8, v9, v6);
      v15 = v10[5];
      v16 = &v8[v15];
      v17 = &v9[v15];
      *(_QWORD *)v16 = *(_QWORD *)v17;
      v16[8] = v17[8];
      v18 = v10[6];
      v19 = &v8[v18];
      v20 = &v9[v18];
      *(_QWORD *)v19 = *(_QWORD *)v20;
      v19[8] = v20[8];
      v21 = v10[7];
      v22 = &v8[v21];
      v23 = &v9[v21];
      *(_QWORD *)v22 = *(_QWORD *)v23;
      v22[8] = v23[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    sub_100004030((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    v24 = sub_1000039AC(&qword_10036E458);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  v70((uint64_t)v8, (uint64_t)v9, v6);
  v56 = v10[5];
  v57 = &v8[v56];
  v58 = &v9[v56];
  *(_QWORD *)v57 = *(_QWORD *)v58;
  v57[8] = v58[8];
  v59 = v10[6];
  v60 = &v8[v59];
  v61 = &v9[v59];
  *(_QWORD *)v60 = *(_QWORD *)v61;
  v60[8] = v61[8];
  v62 = v10[7];
  v63 = &v8[v62];
  v64 = &v9[v62];
  *(_QWORD *)v63 = *(_QWORD *)v64;
  v63[8] = v64[8];
LABEL_7:
  v25 = a3[6];
  v26 = (char *)(a1 + v25);
  v27 = (char *)(a2 + v25);
  v28 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48);
  v31 = v30(v26, 1, v28);
  v32 = v30(v27, 1, v28);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(v71 + 32))(v26, v27, v6);
      *(_QWORD *)&v26[*(int *)(v28 + 20)] = *(_QWORD *)&v27[*(int *)(v28 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v32)
  {
    sub_100004030((uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
LABEL_12:
    v33 = sub_1000039AC(&qword_10036E538);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  v70((uint64_t)v26, (uint64_t)v27, v6);
  v65 = *(int *)(v28 + 20);
  v66 = *(_QWORD *)&v26[v65];
  *(_QWORD *)&v26[v65] = *(_QWORD *)&v27[v65];
  swift_release(v66);
LABEL_13:
  v34 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v35 = a1 + v34;
  v36 = a2 + v34;
  *(_DWORD *)v35 = *(_DWORD *)v36;
  *(_BYTE *)(v35 + 4) = *(_BYTE *)(v36 + 4);
  v37 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v38 = (char *)(a1 + v37);
  v39 = (char *)(a2 + v37);
  v40 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  v41 = *(_QWORD *)(v40 - 8);
  v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v41 + 48);
  v43 = v42(v38, 1, v40);
  v44 = v42(v39, 1, v40);
  if (!v43)
  {
    if (!v44)
    {
      v70((uint64_t)v38, (uint64_t)v39, v6);
      v67 = *(int *)(v40 + 20);
      v68 = &v38[v67];
      v69 = &v39[v67];
      *(_DWORD *)v68 = *(_DWORD *)v69;
      v68[4] = v69[4];
      goto LABEL_19;
    }
    sub_100004030((uint64_t)v38, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
    goto LABEL_18;
  }
  if (v44)
  {
LABEL_18:
    v48 = sub_1000039AC(&qword_10036E540);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v71 + 32))(v38, v39, v6);
  v45 = *(int *)(v40 + 20);
  v46 = &v38[v45];
  v47 = &v39[v45];
  *(_DWORD *)v46 = *(_DWORD *)v47;
  v46[4] = v47[4];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
LABEL_19:
  v49 = a3[11];
  v50 = a3[12];
  v51 = a1 + v49;
  v52 = a2 + v49;
  *(_DWORD *)v51 = *(_DWORD *)v52;
  *(_BYTE *)(v51 + 4) = *(_BYTE *)(v52 + 4);
  v53 = a1 + v50;
  v54 = a2 + v50;
  *(_DWORD *)v53 = *(_DWORD *)v54;
  *(_BYTE *)(v53 + 4) = *(_BYTE *)(v54 + 4);
  return a1;
}

uint64_t sub_10013C678(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013C684);
}

uint64_t sub_10013C684(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_1000039AC(&qword_10036E458);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_11:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = sub_1000039AC(&qword_10036E538);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[6];
    goto LABEL_11;
  }
  if ((_DWORD)a2 != 253)
  {
    v8 = sub_1000039AC(&qword_10036E540);
    v12 = *(_QWORD *)(v8 - 8);
    v13 = a3[10];
    goto LABEL_11;
  }
  v15 = *(unsigned __int8 *)(a1 + a3[7]);
  if (v15 >= 2)
    v16 = ((v15 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v16 = -2;
  if (v16 < 0)
    v16 = -1;
  return (v16 + 1);
}

uint64_t sub_10013C798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013C7A4);
}

uint64_t sub_10013C7A4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v8 = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_1000039AC(&qword_10036E458);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      result = sub_1000039AC(&qword_10036E538);
      v14 = *(_QWORD *)(result - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = result;
        v15 = a4[6];
      }
      else
      {
        if (a3 == 253)
        {
          *(_BYTE *)(a1 + a4[7]) = a2 + 2;
          return result;
        }
        v10 = sub_1000039AC(&qword_10036E540);
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[10];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_10013C898(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[9];

  v2 = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001198C(319, (unint64_t *)&unk_10036FA60, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_10001198C(319, &qword_100371BE8, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
      if (v7 <= 0x3F)
      {
        v10[2] = *(_QWORD *)(v6 - 8) + 64;
        v10[3] = &unk_1002D7C78;
        v10[4] = &unk_1002D7AC8;
        v10[5] = &unk_1002D8040;
        sub_10001198C(319, (unint64_t *)&unk_100371BF0, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
        if (v9 <= 0x3F)
        {
          v10[6] = *(_QWORD *)(v8 - 8) + 64;
          v10[7] = &unk_1002D7AC8;
          v10[8] = &unk_1002D7AC8;
          swift_initStructMetadata(a1, 256, 9, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t sub_10013C9A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013C9B0);
}

uint64_t sub_10013C9B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013C9C0);
}

uint64_t *sub_10013C9C4(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v36 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v36 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v36);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = a3[6];
    v11 = (char *)a1 + v9;
    v12 = (char *)a2 + v9;
    *(_QWORD *)v11 = *(_QWORD *)v12;
    v11[8] = v12[8];
    v13 = (char *)a1 + v10;
    v14 = (char *)a2 + v10;
    *(_QWORD *)v13 = *(_QWORD *)v14;
    v13[8] = v14[8];
    v15 = a3[7];
    v16 = a3[8];
    v17 = (char *)a1 + v15;
    v18 = (char *)a2 + v15;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    v17[8] = v18[8];
    v19 = (char *)a1 + v16;
    v20 = (char *)a2 + v16;
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[8] = v20[8];
    v21 = a3[9];
    v22 = a3[10];
    v23 = (char *)a1 + v21;
    v24 = (char *)a2 + v21;
    v23[8] = v24[8];
    *(_QWORD *)v23 = *(_QWORD *)v24;
    v25 = (char *)a1 + v22;
    v26 = (char *)a2 + v22;
    v25[8] = v26[8];
    *(_QWORD *)v25 = *(_QWORD *)v26;
    v27 = a3[11];
    v28 = a3[12];
    v29 = (char *)a1 + v27;
    v30 = (char *)a2 + v27;
    v29[8] = v30[8];
    v31 = (char *)a1 + v28;
    v32 = (char *)a2 + v28;
    *(_QWORD *)v29 = *(_QWORD *)v30;
    v33 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v34 = *((_QWORD *)v33 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v34 + 48))(v32, 1, v33))
    {
      v35 = sub_1000039AC(&qword_10036E458);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v31, (uint64_t *)v32, v7);
      v37 = v33[5];
      v38 = &v31[v37];
      v39 = &v32[v37];
      *(_QWORD *)v38 = *(_QWORD *)v39;
      v38[8] = v39[8];
      v40 = v33[6];
      v41 = &v31[v40];
      v42 = &v32[v40];
      *(_QWORD *)v41 = *(_QWORD *)v42;
      v41[8] = v42[8];
      v43 = v33[7];
      v44 = &v31[v43];
      v45 = &v32[v43];
      *(_QWORD *)v44 = *(_QWORD *)v45;
      v44[8] = v45[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v34 + 56))(v31, 0, 1, v33);
    }
  }
  return a1;
}

uint64_t sub_10013CBDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  void (*v8)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v8(a1, v4);
  v5 = a1 + *(int *)(a2 + 48);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v5, v4);
  return result;
}

uint64_t sub_10013CC7C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  v12 = a1 + v9;
  v13 = a2 + v9;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  v14 = a3[7];
  v15 = a3[8];
  v16 = a1 + v14;
  v17 = a2 + v14;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  v18 = a1 + v15;
  v19 = a2 + v15;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  v20 = a3[9];
  v21 = a3[10];
  v22 = a1 + v20;
  v23 = a2 + v20;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v24 = a1 + v21;
  v25 = a2 + v21;
  *(_BYTE *)(v24 + 8) = *(_BYTE *)(v25 + 8);
  *(_QWORD *)v24 = *(_QWORD *)v25;
  v26 = a3[11];
  v27 = a3[12];
  v28 = a1 + v26;
  v29 = a2 + v26;
  *(_BYTE *)(v28 + 8) = *(_BYTE *)(v29 + 8);
  v30 = (char *)(a1 + v27);
  v31 = (char *)(a2 + v27);
  *(_QWORD *)v28 = *(_QWORD *)v29;
  v32 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v33 = *((_QWORD *)v32 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v33 + 48))(v31, 1, v32))
  {
    v34 = sub_1000039AC(&qword_10036E458);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v30, (uint64_t)v31, v6);
    v35 = v32[5];
    v36 = &v30[v35];
    v37 = &v31[v35];
    *(_QWORD *)v36 = *(_QWORD *)v37;
    v36[8] = v37[8];
    v38 = v32[6];
    v39 = &v30[v38];
    v40 = &v31[v38];
    *(_QWORD *)v39 = *(_QWORD *)v40;
    v39[8] = v40[8];
    v41 = v32[7];
    v42 = &v30[v41];
    v43 = &v31[v41];
    *(_QWORD *)v42 = *(_QWORD *)v43;
    v42[8] = v43[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v33 + 56))(v30, 0, 1, v32);
  }
  return a1;
}

uint64_t sub_10013CE68(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char *v38;
  char *v39;
  int *v40;
  uint64_t v41;
  uint64_t (*v42)(char *, uint64_t, int *);
  int v43;
  int v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char v56;
  uint64_t v57;
  uint64_t v59;
  char *v60;
  char *v61;
  char v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char v70;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = *(_BYTE *)(v11 + 8);
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_BYTE *)(v10 + 8) = v12;
  v13 = a3[6];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = *(_BYTE *)(v15 + 8);
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = v16;
  v17 = a3[7];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = *(_BYTE *)(v19 + 8);
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = v20;
  v21 = a3[8];
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = *(_BYTE *)(v23 + 8);
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = v24;
  v25 = a3[9];
  v26 = a1 + v25;
  v27 = a2 + v25;
  v28 = *(_BYTE *)(v27 + 8);
  *(_QWORD *)v26 = *(_QWORD *)v27;
  *(_BYTE *)(v26 + 8) = v28;
  v29 = a3[10];
  v30 = a1 + v29;
  v31 = a2 + v29;
  v32 = *(_BYTE *)(v31 + 8);
  *(_QWORD *)v30 = *(_QWORD *)v31;
  *(_BYTE *)(v30 + 8) = v32;
  v33 = a3[11];
  v34 = a1 + v33;
  v35 = a2 + v33;
  v36 = *(_BYTE *)(v35 + 8);
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *(_BYTE *)(v34 + 8) = v36;
  v37 = a3[12];
  v38 = (char *)(a1 + v37);
  v39 = (char *)(a2 + v37);
  v40 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v41 = *((_QWORD *)v40 - 1);
  v42 = *(uint64_t (**)(char *, uint64_t, int *))(v41 + 48);
  v43 = v42(v38, 1, v40);
  v44 = v42(v39, 1, v40);
  if (!v43)
  {
    if (!v44)
    {
      v8((uint64_t)v38, (uint64_t)v39, v6);
      v59 = v40[5];
      v60 = &v38[v59];
      v61 = &v39[v59];
      v62 = v61[8];
      *(_QWORD *)v60 = *(_QWORD *)v61;
      v60[8] = v62;
      v63 = v40[6];
      v64 = &v38[v63];
      v65 = &v39[v63];
      v66 = v65[8];
      *(_QWORD *)v64 = *(_QWORD *)v65;
      v64[8] = v66;
      v67 = v40[7];
      v68 = &v38[v67];
      v69 = &v39[v67];
      v70 = v69[8];
      *(_QWORD *)v68 = *(_QWORD *)v69;
      v68[8] = v70;
      return a1;
    }
    sub_100004030((uint64_t)v38, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  if (v44)
  {
LABEL_6:
    v57 = sub_1000039AC(&qword_10036E458);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v38, v39, v6);
  v45 = v40[5];
  v46 = &v38[v45];
  v47 = &v39[v45];
  v48 = v47[8];
  *(_QWORD *)v46 = *(_QWORD *)v47;
  v46[8] = v48;
  v49 = v40[6];
  v50 = &v38[v49];
  v51 = &v39[v49];
  v52 = v51[8];
  *(_QWORD *)v50 = *(_QWORD *)v51;
  v50[8] = v52;
  v53 = v40[7];
  v54 = &v38[v53];
  v55 = &v39[v53];
  v56 = v55[8];
  *(_QWORD *)v54 = *(_QWORD *)v55;
  v54[8] = v56;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v41 + 56))(v38, 0, 1, v40);
  return a1;
}

uint64_t sub_10013D104(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  v12 = a1 + v9;
  v13 = a2 + v9;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  v14 = a3[7];
  v15 = a3[8];
  v16 = a1 + v14;
  v17 = a2 + v14;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  v18 = a1 + v15;
  v19 = a2 + v15;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  v20 = a3[9];
  v21 = a3[10];
  v22 = a1 + v20;
  v23 = a2 + v20;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v24 = a1 + v21;
  v25 = a2 + v21;
  *(_BYTE *)(v24 + 8) = *(_BYTE *)(v25 + 8);
  *(_QWORD *)v24 = *(_QWORD *)v25;
  v26 = a3[11];
  v27 = a3[12];
  v28 = a1 + v26;
  v29 = a2 + v26;
  *(_BYTE *)(v28 + 8) = *(_BYTE *)(v29 + 8);
  v30 = (char *)(a1 + v27);
  v31 = (char *)(a2 + v27);
  *(_QWORD *)v28 = *(_QWORD *)v29;
  v32 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v33 = *((_QWORD *)v32 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v33 + 48))(v31, 1, v32))
  {
    v34 = sub_1000039AC(&qword_10036E458);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v30, (uint64_t)v31, v6);
    v35 = v32[5];
    v36 = &v30[v35];
    v37 = &v31[v35];
    *(_QWORD *)v36 = *(_QWORD *)v37;
    v36[8] = v37[8];
    v38 = v32[6];
    v39 = &v30[v38];
    v40 = &v31[v38];
    *(_QWORD *)v39 = *(_QWORD *)v40;
    v39[8] = v40[8];
    v41 = v32[7];
    v42 = &v30[v41];
    v43 = &v31[v41];
    *(_QWORD *)v42 = *(_QWORD *)v43;
    v42[8] = v43[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v33 + 56))(v30, 0, 1, v32);
  }
  return a1;
}

uint64_t sub_10013D2F0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int *v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, int *);
  int v36;
  int v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = a3[6];
  v11 = a1 + v9;
  v12 = a2 + v9;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a1 + v10;
  v14 = a2 + v10;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  v15 = a3[7];
  v16 = a3[8];
  v17 = a1 + v15;
  v18 = a2 + v15;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  v19 = a1 + v16;
  v20 = a2 + v16;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  v21 = a3[9];
  v22 = a3[10];
  v23 = a1 + v21;
  v24 = a2 + v21;
  *(_BYTE *)(v23 + 8) = *(_BYTE *)(v24 + 8);
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v25 = a1 + v22;
  v26 = a2 + v22;
  *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
  *(_QWORD *)v25 = *(_QWORD *)v26;
  v27 = a3[11];
  v28 = a3[12];
  v29 = a1 + v27;
  v30 = a2 + v27;
  *(_BYTE *)(v29 + 8) = *(_BYTE *)(v30 + 8);
  v31 = (char *)(a1 + v28);
  v32 = (char *)(a2 + v28);
  *(_QWORD *)v29 = *(_QWORD *)v30;
  v33 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v34 = *((_QWORD *)v33 - 1);
  v35 = *(uint64_t (**)(char *, uint64_t, int *))(v34 + 48);
  v36 = v35(v31, 1, v33);
  v37 = v35(v32, 1, v33);
  if (!v36)
  {
    if (!v37)
    {
      v8((uint64_t)v31, (uint64_t)v32, v6);
      v49 = v33[5];
      v50 = &v31[v49];
      v51 = &v32[v49];
      *(_QWORD *)v50 = *(_QWORD *)v51;
      v50[8] = v51[8];
      v52 = v33[6];
      v53 = &v31[v52];
      v54 = &v32[v52];
      *(_QWORD *)v53 = *(_QWORD *)v54;
      v53[8] = v54[8];
      v55 = v33[7];
      v56 = &v31[v55];
      v57 = &v32[v55];
      *(_QWORD *)v56 = *(_QWORD *)v57;
      v56[8] = v57[8];
      return a1;
    }
    sub_100004030((uint64_t)v31, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  if (v37)
  {
LABEL_6:
    v47 = sub_1000039AC(&qword_10036E458);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v31, v32, v6);
  v38 = v33[5];
  v39 = &v31[v38];
  v40 = &v32[v38];
  *(_QWORD *)v39 = *(_QWORD *)v40;
  v39[8] = v40[8];
  v41 = v33[6];
  v42 = &v31[v41];
  v43 = &v32[v41];
  *(_QWORD *)v42 = *(_QWORD *)v43;
  v42[8] = v43[8];
  v44 = v33[7];
  v45 = &v31[v44];
  v46 = &v32[v44];
  *(_QWORD *)v45 = *(_QWORD *)v46;
  v45[8] = v46[8];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v34 + 56))(v31, 0, 1, v33);
  return a1;
}

uint64_t sub_10013D57C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013D588);
}

uint64_t sub_10013D588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_1000039AC(&qword_10036E458);
    v10 = a1 + *(int *)(a3 + 48);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_10013D600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013D60C);
}

uint64_t sub_10013D60C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_1000039AC(&qword_10036E458);
    v12 = a1 + *(int *)(a4 + 48);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_10013D68C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[9];

  v2 = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = "\t";
    v6[2] = "\t";
    v6[3] = "\t";
    v6[4] = "\t";
    v6[5] = "\t";
    v6[6] = "\t";
    v6[7] = "\t";
    sub_10001198C(319, (unint64_t *)&unk_10036FA60, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v5 <= 0x3F)
    {
      v6[8] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 9, v6, a1 + 16);
    }
  }
}

uint64_t *sub_10013D734(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = *(int *)(a3 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
    v13 = *((_QWORD *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      v14 = sub_1000039AC(&qword_10036E548);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      v16 = v12[5];
      v17 = &v10[v16];
      v18 = &v11[v16];
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v17[8] = v18[8];
      v19 = v12[6];
      v20 = &v10[v19];
      v21 = &v11[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v12[7];
      v23 = &v10[v22];
      v24 = &v11[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      v25 = v12[8];
      v26 = &v10[v25];
      v27 = &v11[v25];
      *(_QWORD *)v26 = *(_QWORD *)v27;
      v26[8] = v27[8];
      v28 = v12[9];
      v29 = &v10[v28];
      v30 = &v11[v28];
      *(_QWORD *)v29 = *(_QWORD *)v30;
      v29[8] = v30[8];
      v31 = v12[10];
      v32 = &v10[v31];
      v33 = &v11[v31];
      *(_QWORD *)v32 = *(_QWORD *)v33;
      v32[8] = v33[8];
      v34 = v12[11];
      v35 = &v10[v34];
      v36 = &v11[v34];
      *(_QWORD *)v35 = *(_QWORD *)v36;
      v35[8] = v36[8];
      v37 = v12[12];
      v38 = &v10[v37];
      v39 = &v11[v37];
      v40 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
      v41 = *((_QWORD *)v40 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v41 + 48))(v39, 1, v40))
      {
        v42 = sub_1000039AC(&qword_10036E458);
        memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
      }
      else
      {
        v8((uint64_t *)v38, (uint64_t *)v39, v7);
        v43 = v40[5];
        v44 = &v38[v43];
        v45 = &v39[v43];
        *(_QWORD *)v44 = *(_QWORD *)v45;
        v44[8] = v45[8];
        v46 = v40[6];
        v47 = &v38[v46];
        v48 = &v39[v46];
        *(_QWORD *)v47 = *(_QWORD *)v48;
        v47[8] = v48[8];
        v49 = v40[7];
        v50 = &v38[v49];
        v51 = &v39[v49];
        *(_QWORD *)v50 = *(_QWORD *)v51;
        v50[8] = v51[8];
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v41 + 56))(v38, 0, 1, v40);
      }
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
  }
  return a1;
}

uint64_t sub_10013D9E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v10(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6);
  if (!(_DWORD)result)
  {
    v10(v5, v4);
    v8 = v5 + *(int *)(v6 + 48);
    v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
    if (!(_DWORD)result)
      return ((uint64_t (*)(uint64_t, uint64_t))v10)(v8, v4);
  }
  return result;
}

uint64_t sub_10013DAC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_1000039AC(&qword_10036E548);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    v23 = v11[8];
    v24 = &v9[v23];
    v25 = &v10[v23];
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v24[8] = v25[8];
    v26 = v11[9];
    v27 = &v9[v26];
    v28 = &v10[v26];
    *(_QWORD *)v27 = *(_QWORD *)v28;
    v27[8] = v28[8];
    v29 = v11[10];
    v30 = &v9[v29];
    v31 = &v10[v29];
    *(_QWORD *)v30 = *(_QWORD *)v31;
    v30[8] = v31[8];
    v32 = v11[11];
    v33 = &v9[v32];
    v34 = &v10[v32];
    *(_QWORD *)v33 = *(_QWORD *)v34;
    v33[8] = v34[8];
    v35 = v11[12];
    v36 = &v9[v35];
    v37 = &v10[v35];
    v38 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v39 = *((_QWORD *)v38 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v39 + 48))(v37, 1, v38))
    {
      v40 = sub_1000039AC(&qword_10036E458);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
    else
    {
      v7((uint64_t)v36, (uint64_t)v37, v6);
      v41 = v38[5];
      v42 = &v36[v41];
      v43 = &v37[v41];
      *(_QWORD *)v42 = *(_QWORD *)v43;
      v42[8] = v43[8];
      v44 = v38[6];
      v45 = &v36[v44];
      v46 = &v37[v44];
      *(_QWORD *)v45 = *(_QWORD *)v46;
      v45[8] = v46[8];
      v47 = v38[7];
      v48 = &v36[v47];
      v49 = &v37[v47];
      *(_QWORD *)v48 = *(_QWORD *)v49;
      v48[8] = v49[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v39 + 56))(v36, 0, 1, v38);
    }
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t sub_10013DD48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, int *);
  int v15;
  int v16;
  void (*v17)(uint64_t, char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char v45;
  uint64_t v46;
  char *v47;
  char *v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  size_t v52;
  void *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  int *v86;
  uint64_t v87;
  uint64_t (*v88)(uint64_t, uint64_t, int *);
  int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char v106;
  uint64_t v107;
  char *v108;
  char *v109;
  char v110;
  uint64_t v111;
  char *v112;
  char *v113;
  char v114;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char v127;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = a1 + v9;
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  v13 = *((_QWORD *)v12 - 1);
  v14 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14((uint64_t)v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      v8(v10, (uint64_t)v11, v6);
      v55 = v12[5];
      v56 = v10 + v55;
      v57 = &v11[v55];
      v58 = v57[8];
      *(_QWORD *)v56 = *(_QWORD *)v57;
      *(_BYTE *)(v56 + 8) = v58;
      v59 = v12[6];
      v60 = v10 + v59;
      v61 = &v11[v59];
      v62 = v61[8];
      *(_QWORD *)v60 = *(_QWORD *)v61;
      *(_BYTE *)(v60 + 8) = v62;
      v63 = v12[7];
      v64 = v10 + v63;
      v65 = &v11[v63];
      v66 = v65[8];
      *(_QWORD *)v64 = *(_QWORD *)v65;
      *(_BYTE *)(v64 + 8) = v66;
      v67 = v12[8];
      v68 = v10 + v67;
      v69 = &v11[v67];
      v70 = v69[8];
      *(_QWORD *)v68 = *(_QWORD *)v69;
      *(_BYTE *)(v68 + 8) = v70;
      v71 = v12[9];
      v72 = v10 + v71;
      v73 = &v11[v71];
      v74 = v73[8];
      *(_QWORD *)v72 = *(_QWORD *)v73;
      *(_BYTE *)(v72 + 8) = v74;
      v75 = v12[10];
      v76 = v10 + v75;
      v77 = &v11[v75];
      v78 = v77[8];
      *(_QWORD *)v76 = *(_QWORD *)v77;
      *(_BYTE *)(v76 + 8) = v78;
      v79 = v12[11];
      v80 = v10 + v79;
      v81 = &v11[v79];
      v82 = v81[8];
      *(_QWORD *)v80 = *(_QWORD *)v81;
      *(_BYTE *)(v80 + 8) = v82;
      v83 = v12[12];
      v84 = v10 + v83;
      v85 = &v11[v83];
      v86 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
      v87 = *((_QWORD *)v86 - 1);
      v88 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v87 + 48);
      v89 = v88(v84, 1, v86);
      v90 = v88((uint64_t)v85, 1, v86);
      if (v89)
      {
        if (!v90)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v7 + 16))(v84, v85, v6);
          v91 = v86[5];
          v92 = v84 + v91;
          v93 = &v85[v91];
          v94 = v93[8];
          *(_QWORD *)v92 = *(_QWORD *)v93;
          *(_BYTE *)(v92 + 8) = v94;
          v95 = v86[6];
          v96 = v84 + v95;
          v97 = &v85[v95];
          v98 = v97[8];
          *(_QWORD *)v96 = *(_QWORD *)v97;
          *(_BYTE *)(v96 + 8) = v98;
          v99 = v86[7];
          v100 = v84 + v99;
          v101 = &v85[v99];
          v102 = v101[8];
          *(_QWORD *)v100 = *(_QWORD *)v101;
          *(_BYTE *)(v100 + 8) = v102;
          (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v87 + 56))(v84, 0, 1, v86);
          return a1;
        }
      }
      else
      {
        if (!v90)
        {
          v8(v84, (uint64_t)v85, v6);
          v116 = v86[5];
          v117 = v84 + v116;
          v118 = &v85[v116];
          v119 = v118[8];
          *(_QWORD *)v117 = *(_QWORD *)v118;
          *(_BYTE *)(v117 + 8) = v119;
          v120 = v86[6];
          v121 = v84 + v120;
          v122 = &v85[v120];
          v123 = v122[8];
          *(_QWORD *)v121 = *(_QWORD *)v122;
          *(_BYTE *)(v121 + 8) = v123;
          v124 = v86[7];
          v125 = v84 + v124;
          v126 = &v85[v124];
          v127 = v126[8];
          *(_QWORD *)v125 = *(_QWORD *)v126;
          *(_BYTE *)(v125 + 8) = v127;
          return a1;
        }
        sub_100004030(v84, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      }
      v52 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036E458) - 8) + 64);
      v53 = (void *)v84;
      v54 = v85;
      goto LABEL_8;
    }
    sub_100004030(v10, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
LABEL_7:
    v52 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036E548) - 8) + 64);
    v53 = (void *)v10;
    v54 = v11;
LABEL_8:
    memcpy(v53, v54, v52);
    return a1;
  }
  if (v16)
    goto LABEL_7;
  v17 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 16);
  v17(v10, v11, v6);
  v18 = v12[5];
  v19 = v10 + v18;
  v20 = &v11[v18];
  v21 = v20[8];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = v21;
  v22 = v12[6];
  v23 = v10 + v22;
  v24 = &v11[v22];
  v25 = v24[8];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *(_BYTE *)(v23 + 8) = v25;
  v26 = v12[7];
  v27 = v10 + v26;
  v28 = &v11[v26];
  v29 = v28[8];
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *(_BYTE *)(v27 + 8) = v29;
  v30 = v12[8];
  v31 = v10 + v30;
  v32 = &v11[v30];
  v33 = v32[8];
  *(_QWORD *)v31 = *(_QWORD *)v32;
  *(_BYTE *)(v31 + 8) = v33;
  v34 = v12[9];
  v35 = v10 + v34;
  v36 = &v11[v34];
  v37 = v36[8];
  *(_QWORD *)v35 = *(_QWORD *)v36;
  *(_BYTE *)(v35 + 8) = v37;
  v38 = v12[10];
  v39 = v10 + v38;
  v40 = &v11[v38];
  v41 = v40[8];
  *(_QWORD *)v39 = *(_QWORD *)v40;
  *(_BYTE *)(v39 + 8) = v41;
  v42 = v12[11];
  v43 = v10 + v42;
  v44 = &v11[v42];
  v45 = v44[8];
  *(_QWORD *)v43 = *(_QWORD *)v44;
  *(_BYTE *)(v43 + 8) = v45;
  v46 = v12[12];
  v47 = (char *)(v10 + v46);
  v48 = &v11[v46];
  v49 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v50 = *((_QWORD *)v49 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v50 + 48))(v48, 1, v49))
  {
    v51 = sub_1000039AC(&qword_10036E458);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
  }
  else
  {
    v17((uint64_t)v47, v48, v6);
    v103 = v49[5];
    v104 = &v47[v103];
    v105 = &v48[v103];
    v106 = v105[8];
    *(_QWORD *)v104 = *(_QWORD *)v105;
    v104[8] = v106;
    v107 = v49[6];
    v108 = &v47[v107];
    v109 = &v48[v107];
    v110 = v109[8];
    *(_QWORD *)v108 = *(_QWORD *)v109;
    v108[8] = v110;
    v111 = v49[7];
    v112 = &v47[v111];
    v113 = &v48[v111];
    v114 = v113[8];
    *(_QWORD *)v112 = *(_QWORD *)v113;
    v112[8] = v114;
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v50 + 56))(v47, 0, 1, v49);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
  return a1;
}

uint64_t sub_10013E238(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_1000039AC(&qword_10036E548);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    v23 = v11[8];
    v24 = &v9[v23];
    v25 = &v10[v23];
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v24[8] = v25[8];
    v26 = v11[9];
    v27 = &v9[v26];
    v28 = &v10[v26];
    *(_QWORD *)v27 = *(_QWORD *)v28;
    v27[8] = v28[8];
    v29 = v11[10];
    v30 = &v9[v29];
    v31 = &v10[v29];
    *(_QWORD *)v30 = *(_QWORD *)v31;
    v30[8] = v31[8];
    v32 = v11[11];
    v33 = &v9[v32];
    v34 = &v10[v32];
    *(_QWORD *)v33 = *(_QWORD *)v34;
    v33[8] = v34[8];
    v35 = v11[12];
    v36 = &v9[v35];
    v37 = &v10[v35];
    v38 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v39 = *((_QWORD *)v38 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v39 + 48))(v37, 1, v38))
    {
      v40 = sub_1000039AC(&qword_10036E458);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
    else
    {
      v7((uint64_t)v36, (uint64_t)v37, v6);
      v41 = v38[5];
      v42 = &v36[v41];
      v43 = &v37[v41];
      *(_QWORD *)v42 = *(_QWORD *)v43;
      v42[8] = v43[8];
      v44 = v38[6];
      v45 = &v36[v44];
      v46 = &v37[v44];
      *(_QWORD *)v45 = *(_QWORD *)v46;
      v45[8] = v46[8];
      v47 = v38[7];
      v48 = &v36[v47];
      v49 = &v37[v47];
      *(_QWORD *)v48 = *(_QWORD *)v49;
      v48[8] = v49[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v39 + 56))(v36, 0, 1, v38);
    }
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t sub_10013E4BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, int *);
  int v15;
  int v16;
  void (*v17)(uint64_t, char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  size_t v45;
  void *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int *v72;
  uint64_t v73;
  uint64_t (*v74)(uint64_t, uint64_t, int *);
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = a1 + v9;
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  v13 = *((_QWORD *)v12 - 1);
  v14 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14((uint64_t)v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      v8(v10, (uint64_t)v11, v6);
      v48 = v12[5];
      v49 = v10 + v48;
      v50 = &v11[v48];
      *(_QWORD *)v49 = *(_QWORD *)v50;
      *(_BYTE *)(v49 + 8) = v50[8];
      v51 = v12[6];
      v52 = v10 + v51;
      v53 = &v11[v51];
      *(_QWORD *)v52 = *(_QWORD *)v53;
      *(_BYTE *)(v52 + 8) = v53[8];
      v54 = v12[7];
      v55 = v10 + v54;
      v56 = &v11[v54];
      *(_QWORD *)v55 = *(_QWORD *)v56;
      *(_BYTE *)(v55 + 8) = v56[8];
      v57 = v12[8];
      v58 = v10 + v57;
      v59 = &v11[v57];
      *(_QWORD *)v58 = *(_QWORD *)v59;
      *(_BYTE *)(v58 + 8) = v59[8];
      v60 = v12[9];
      v61 = v10 + v60;
      v62 = &v11[v60];
      *(_QWORD *)v61 = *(_QWORD *)v62;
      *(_BYTE *)(v61 + 8) = v62[8];
      v63 = v12[10];
      v64 = v10 + v63;
      v65 = &v11[v63];
      *(_QWORD *)v64 = *(_QWORD *)v65;
      *(_BYTE *)(v64 + 8) = v65[8];
      v66 = v12[11];
      v67 = v10 + v66;
      v68 = &v11[v66];
      *(_QWORD *)v67 = *(_QWORD *)v68;
      *(_BYTE *)(v67 + 8) = v68[8];
      v69 = v12[12];
      v70 = v10 + v69;
      v71 = &v11[v69];
      v72 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
      v73 = *((_QWORD *)v72 - 1);
      v74 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v73 + 48);
      v75 = v74(v70, 1, v72);
      v76 = v74((uint64_t)v71, 1, v72);
      if (v75)
      {
        if (!v76)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v70, v71, v6);
          v77 = v72[5];
          v78 = v70 + v77;
          v79 = &v71[v77];
          *(_QWORD *)v78 = *(_QWORD *)v79;
          *(_BYTE *)(v78 + 8) = v79[8];
          v80 = v72[6];
          v81 = v70 + v80;
          v82 = &v71[v80];
          *(_QWORD *)v81 = *(_QWORD *)v82;
          *(_BYTE *)(v81 + 8) = v82[8];
          v83 = v72[7];
          v84 = v70 + v83;
          v85 = &v71[v83];
          *(_QWORD *)v84 = *(_QWORD *)v85;
          *(_BYTE *)(v84 + 8) = v85[8];
          (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v73 + 56))(v70, 0, 1, v72);
          return a1;
        }
      }
      else
      {
        if (!v76)
        {
          v8(v70, (uint64_t)v71, v6);
          v96 = v72[5];
          v97 = v70 + v96;
          v98 = &v71[v96];
          *(_QWORD *)v97 = *(_QWORD *)v98;
          *(_BYTE *)(v97 + 8) = v98[8];
          v99 = v72[6];
          v100 = v70 + v99;
          v101 = &v71[v99];
          *(_QWORD *)v100 = *(_QWORD *)v101;
          *(_BYTE *)(v100 + 8) = v101[8];
          v102 = v72[7];
          v103 = v70 + v102;
          v104 = &v71[v102];
          *(_QWORD *)v103 = *(_QWORD *)v104;
          *(_BYTE *)(v103 + 8) = v104[8];
          return a1;
        }
        sub_100004030(v70, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      }
      v45 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036E458) - 8) + 64);
      v46 = (void *)v70;
      v47 = v71;
      goto LABEL_8;
    }
    sub_100004030(v10, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
LABEL_7:
    v45 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036E548) - 8) + 64);
    v46 = (void *)v10;
    v47 = v11;
LABEL_8:
    memcpy(v46, v47, v45);
    return a1;
  }
  if (v16)
    goto LABEL_7;
  v17 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 32);
  v17(v10, v11, v6);
  v18 = v12[5];
  v19 = v10 + v18;
  v20 = &v11[v18];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = v20[8];
  v21 = v12[6];
  v22 = v10 + v21;
  v23 = &v11[v21];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = v23[8];
  v24 = v12[7];
  v25 = v10 + v24;
  v26 = &v11[v24];
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_BYTE *)(v25 + 8) = v26[8];
  v27 = v12[8];
  v28 = v10 + v27;
  v29 = &v11[v27];
  *(_QWORD *)v28 = *(_QWORD *)v29;
  *(_BYTE *)(v28 + 8) = v29[8];
  v30 = v12[9];
  v31 = v10 + v30;
  v32 = &v11[v30];
  *(_QWORD *)v31 = *(_QWORD *)v32;
  *(_BYTE *)(v31 + 8) = v32[8];
  v33 = v12[10];
  v34 = v10 + v33;
  v35 = &v11[v33];
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *(_BYTE *)(v34 + 8) = v35[8];
  v36 = v12[11];
  v37 = v10 + v36;
  v38 = &v11[v36];
  *(_QWORD *)v37 = *(_QWORD *)v38;
  *(_BYTE *)(v37 + 8) = v38[8];
  v39 = v12[12];
  v40 = (char *)(v10 + v39);
  v41 = &v11[v39];
  v42 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v43 = *((_QWORD *)v42 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v43 + 48))(v41, 1, v42))
  {
    v44 = sub_1000039AC(&qword_10036E458);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
  }
  else
  {
    v17((uint64_t)v40, v41, v6);
    v86 = v42[5];
    v87 = &v40[v86];
    v88 = &v41[v86];
    *(_QWORD *)v87 = *(_QWORD *)v88;
    v87[8] = v88[8];
    v89 = v42[6];
    v90 = &v40[v89];
    v91 = &v41[v89];
    *(_QWORD *)v90 = *(_QWORD *)v91;
    v90[8] = v91[8];
    v92 = v42[7];
    v93 = &v40[v92];
    v94 = &v41[v92];
    *(_QWORD *)v93 = *(_QWORD *)v94;
    v93[8] = v94[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v43 + 56))(v40, 0, 1, v42);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
  return a1;
}

uint64_t sub_10013E9AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013E9B8);
}

uint64_t sub_10013E9B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013E9C4(a1, a2, a3, &qword_10036E548);
}

uint64_t sub_10013E9C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    v12 = a1;
  }
  else
  {
    v10 = sub_1000039AC(a4);
    v12 = a1 + *(int *)(a3 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48);
  }
  return v11(v12, a2, v10);
}

uint64_t sub_10013EA3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013EA48);
}

uint64_t sub_10013EA48(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_10013EA54(a1, a2, a3, a4, &qword_10036E548);
}

uint64_t sub_10013EA54(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;

  v10 = type metadata accessor for UnknownStorage(0);
  v11 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v11 + 84) == a3)
  {
    v12 = v10;
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v14 = a1;
  }
  else
  {
    v12 = sub_1000039AC(a5);
    v14 = a1 + *(int *)(a4 + 20);
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
  }
  return v13(v14, a2, a2, v12);
}

void sub_10013EADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10013EAF0(a1, a2, a3, (unint64_t *)&unk_100371DC0, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

void sub_10013EAF0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[2];

  v8 = type metadata accessor for UnknownStorage(319);
  if (v9 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(v8 - 8) + 64;
    sub_10001198C(319, a4, a5);
    if (v11 <= 0x3F)
    {
      v12[1] = *(_QWORD *)(v10 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v12, a1 + 16);
    }
  }
}

_QWORD *sub_10013EB8C(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v29 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v29 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v29);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v10[8] = v11[8];
    v12 = (_QWORD *)((char *)a1 + v9);
    v13 = (_QWORD *)((char *)a2 + v9);
    v14 = v13[1];
    *v12 = *v13;
    v12[1] = v14;
    v15 = a3[7];
    v16 = a3[8];
    v17 = (char *)a1 + v15;
    v18 = (char *)a2 + v15;
    *(_DWORD *)v17 = *(_DWORD *)v18;
    v17[4] = v18[4];
    *((_BYTE *)a1 + v16) = *((_BYTE *)a2 + v16);
    v19 = a3[9];
    v20 = a3[10];
    v21 = (char *)a1 + v19;
    v22 = (char *)a2 + v19;
    *(_DWORD *)v21 = *(_DWORD *)v22;
    v21[4] = v22[4];
    v23 = (char *)a1 + v20;
    v24 = (char *)a2 + v20;
    *(_DWORD *)v23 = *(_DWORD *)v24;
    v23[4] = v24[4];
    v25 = a3[12];
    *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    *((_BYTE *)a1 + v25) = *((_BYTE *)a2 + v25);
    v26 = a3[14];
    *((_BYTE *)a1 + a3[13]) = *((_BYTE *)a2 + a3[13]);
    v27 = (char *)a1 + v26;
    v28 = (char *)a2 + v26;
    *(_DWORD *)v27 = *(_DWORD *)v28;
    v27[4] = v28[4];
    swift_bridgeObjectRetain(v14);
  }
  return a1;
}

uint64_t sub_10013ECC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 24) + 8));
}

uint64_t sub_10013ED10(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = (_QWORD *)(a1 + v8);
  v12 = (_QWORD *)(a2 + v8);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  v14 = a3[7];
  v15 = a3[8];
  v16 = a1 + v14;
  v17 = a2 + v14;
  *(_DWORD *)v16 = *(_DWORD *)v17;
  *(_BYTE *)(v16 + 4) = *(_BYTE *)(v17 + 4);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  v18 = a3[9];
  v19 = a3[10];
  v20 = a1 + v18;
  v21 = a2 + v18;
  *(_DWORD *)v20 = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = *(_BYTE *)(v21 + 4);
  v22 = a1 + v19;
  v23 = a2 + v19;
  *(_DWORD *)v22 = *(_DWORD *)v23;
  *(_BYTE *)(v22 + 4) = *(_BYTE *)(v23 + 4);
  v24 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v24) = *(_BYTE *)(a2 + v24);
  v25 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  v26 = a1 + v25;
  v27 = a2 + v25;
  *(_DWORD *)v26 = *(_DWORD *)v27;
  *(_BYTE *)(v26 + 4) = *(_BYTE *)(v27 + 4);
  swift_bridgeObjectRetain(v13);
  return a1;
}

uint64_t sub_10013EE20(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  int v31;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  *(_BYTE *)(v8 + 8) = *((_BYTE *)v9 + 8);
  *(_QWORD *)v8 = v10;
  v11 = a3[6];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  *v12 = *v13;
  v14 = v13[1];
  v15 = v12[1];
  v12[1] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = a3[7];
  v17 = a1 + v16;
  v18 = (int *)(a2 + v16);
  v19 = *v18;
  *(_BYTE *)(v17 + 4) = *((_BYTE *)v18 + 4);
  *(_DWORD *)v17 = v19;
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  v20 = a3[9];
  v21 = a1 + v20;
  v22 = (int *)(a2 + v20);
  v23 = *v22;
  *(_BYTE *)(v21 + 4) = *((_BYTE *)v22 + 4);
  *(_DWORD *)v21 = v23;
  v24 = a3[10];
  v25 = a1 + v24;
  v26 = (int *)(a2 + v24);
  v27 = *v26;
  *(_BYTE *)(v25 + 4) = *((_BYTE *)v26 + 4);
  *(_DWORD *)v25 = v27;
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  v28 = a3[14];
  v29 = a1 + v28;
  v30 = (int *)(a2 + v28);
  v31 = *v30;
  *(_BYTE *)(v29 + 4) = *((_BYTE *)v30 + 4);
  *(_DWORD *)v29 = v31;
  return a1;
}

uint64_t sub_10013EF58(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  v11 = a3[7];
  v12 = a3[8];
  v13 = a1 + v11;
  v14 = a2 + v11;
  *(_BYTE *)(v13 + 4) = *(_BYTE *)(v14 + 4);
  *(_DWORD *)v13 = *(_DWORD *)v14;
  *(_BYTE *)(a1 + v12) = *(_BYTE *)(a2 + v12);
  v15 = a3[9];
  v16 = a3[10];
  v17 = a1 + v15;
  v18 = a2 + v15;
  *(_DWORD *)v17 = *(_DWORD *)v18;
  *(_BYTE *)(v17 + 4) = *(_BYTE *)(v18 + 4);
  v19 = a1 + v16;
  v20 = a2 + v16;
  *(_DWORD *)v19 = *(_DWORD *)v20;
  *(_BYTE *)(v19 + 4) = *(_BYTE *)(v20 + 4);
  v21 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v21) = *(_BYTE *)(a2 + v21);
  v22 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  v23 = a1 + v22;
  v24 = a2 + v22;
  *(_DWORD *)v23 = *(_DWORD *)v24;
  *(_BYTE *)(v23 + 4) = *(_BYTE *)(v24 + 4);
  return a1;
}

uint64_t sub_10013F05C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = (_QWORD *)(a1 + v8);
  v12 = (uint64_t *)(a2 + v8);
  v14 = *v12;
  v13 = v12[1];
  v15 = v11[1];
  *v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease(v15);
  v16 = a3[7];
  v17 = a3[8];
  v18 = a1 + v16;
  v19 = a2 + v16;
  *(_DWORD *)v18 = *(_DWORD *)v19;
  *(_BYTE *)(v18 + 4) = *(_BYTE *)(v19 + 4);
  *(_BYTE *)(a1 + v17) = *(_BYTE *)(a2 + v17);
  v20 = a3[9];
  v21 = a3[10];
  v22 = a1 + v20;
  v23 = a2 + v20;
  *(_DWORD *)v22 = *(_DWORD *)v23;
  *(_BYTE *)(v22 + 4) = *(_BYTE *)(v23 + 4);
  v24 = a1 + v21;
  v25 = a2 + v21;
  *(_DWORD *)v24 = *(_DWORD *)v25;
  *(_BYTE *)(v24 + 4) = *(_BYTE *)(v25 + 4);
  v26 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v26) = *(_BYTE *)(a2 + v26);
  v27 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  v28 = a1 + v27;
  v29 = a2 + v27;
  *(_DWORD *)v28 = *(_DWORD *)v29;
  *(_BYTE *)(v28 + 4) = *(_BYTE *)(v29 + 4);
  return a1;
}

uint64_t sub_10013F170(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013F17C);
}

uint64_t sub_10013F180(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_10013F20C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013F218);
}

uint64_t sub_10013F21C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = a2;
  return result;
}

uint64_t sub_10013F298(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[11];

  result = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "\t";
    v4[2] = &unk_1002D7F00;
    v4[3] = &unk_1002D7AC8;
    v4[4] = &unk_1002D7E08;
    v4[5] = &unk_1002D7AC8;
    v4[6] = &unk_1002D7AC8;
    v4[7] = &unk_1002D7C78;
    v4[8] = &unk_1002D7C78;
    v4[9] = &unk_1002D7E08;
    v4[10] = &unk_1002D7AC8;
    swift_initStructMetadata(a1, 256, 11, v4, a1 + 16);
    return 0;
  }
  return result;
}

char *sub_10013F33C(char *a1, char *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  void (*v35)(char *, _QWORD, uint64_t, int *);

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = *(int *)(a3 + 24);
    a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
    v13 = *((_QWORD *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      v14 = sub_1000039AC(&qword_10036E550);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v8(v10, v11, v7);
      v16 = v12[5];
      v17 = &v10[v16];
      v18 = &v11[v16];
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v17[8] = v18[8];
      v19 = v12[6];
      v20 = &v10[v19];
      v21 = &v11[v19];
      v22 = *((_QWORD *)v21 + 1);
      *(_QWORD *)v20 = *(_QWORD *)v21;
      *((_QWORD *)v20 + 1) = v22;
      v23 = v12[7];
      v24 = &v10[v23];
      v25 = &v11[v23];
      *(_DWORD *)v24 = *(_DWORD *)v25;
      v24[4] = v25[4];
      v10[v12[8]] = v11[v12[8]];
      v26 = v12[9];
      v27 = &v10[v26];
      v28 = &v11[v26];
      v27[4] = v28[4];
      *(_DWORD *)v27 = *(_DWORD *)v28;
      v29 = v12[10];
      v30 = &v10[v29];
      v31 = &v11[v29];
      *(_DWORD *)v30 = *(_DWORD *)v31;
      v30[4] = v31[4];
      v10[v12[11]] = v11[v12[11]];
      v10[v12[12]] = v11[v12[12]];
      v10[v12[13]] = v11[v12[13]];
      v32 = v12[14];
      v33 = &v10[v32];
      v34 = &v11[v32];
      *(_DWORD *)v33 = *(_DWORD *)v34;
      v33[4] = v34[4];
      v35 = *(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56);
      swift_bridgeObjectRetain(v22);
      v35(v10, 0, 1, v12);
    }
  }
  return a1;
}

uint64_t sub_10013F528(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = a1 + *(int *)(a2 + 24);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    v5(v6, v4);
    return swift_bridgeObjectRelease(*(_QWORD *)(v6 + *(int *)(v7 + 24) + 8));
  }
  return result;
}

uint64_t sub_10013F5C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  void (*v33)(char *, _QWORD, uint64_t, int *);

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_1000039AC(&qword_10036E550);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    v20 = *((_QWORD *)v19 + 1);
    *(_QWORD *)v18 = *(_QWORD *)v19;
    *((_QWORD *)v18 + 1) = v20;
    v21 = v11[7];
    v22 = &v9[v21];
    v23 = &v10[v21];
    *(_DWORD *)v22 = *(_DWORD *)v23;
    v22[4] = v23[4];
    v9[v11[8]] = v10[v11[8]];
    v24 = v11[9];
    v25 = &v9[v24];
    v26 = &v10[v24];
    v25[4] = v26[4];
    *(_DWORD *)v25 = *(_DWORD *)v26;
    v27 = v11[10];
    v28 = &v9[v27];
    v29 = &v10[v27];
    *(_DWORD *)v28 = *(_DWORD *)v29;
    v28[4] = v29[4];
    v9[v11[11]] = v10[v11[11]];
    v9[v11[12]] = v10[v11[12]];
    v9[v11[13]] = v10[v11[13]];
    v30 = v11[14];
    v31 = &v9[v30];
    v32 = &v10[v30];
    *(_DWORD *)v31 = *(_DWORD *)v32;
    v31[4] = v32[4];
    v33 = *(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56);
    swift_bridgeObjectRetain(v20);
    v33(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t sub_10013F788(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  int *v12;
  uint64_t v13;
  uint64_t (*v14)(_BYTE *, uint64_t, int *);
  int v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  void (*v37)(_BYTE *, _QWORD, uint64_t, int *);
  uint64_t v38;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  int v52;
  uint64_t v53;
  char *v54;
  char *v55;
  int v56;
  uint64_t v57;
  char *v58;
  char *v59;
  int v60;
  uint64_t v61;
  char *v62;
  char *v63;
  int v64;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  v9 = *(int *)(a3 + 24);
  v10 = (_BYTE *)(a1 + v9);
  v11 = (_BYTE *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  v13 = *((_QWORD *)v12 - 1);
  v14 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      v40 = v12[5];
      v41 = &v10[v40];
      v42 = &v11[v40];
      v43 = *(_QWORD *)v42;
      v41[8] = v42[8];
      *(_QWORD *)v41 = v43;
      v44 = v12[6];
      v45 = &v10[v44];
      v46 = &v11[v44];
      *v45 = *v46;
      v47 = v46[1];
      v48 = v45[1];
      v45[1] = v47;
      swift_bridgeObjectRetain(v47);
      swift_bridgeObjectRelease(v48);
      v49 = v12[7];
      v50 = &v10[v49];
      v51 = &v11[v49];
      v52 = *(_DWORD *)v51;
      v50[4] = v51[4];
      *(_DWORD *)v50 = v52;
      v10[v12[8]] = v11[v12[8]];
      v53 = v12[9];
      v54 = &v10[v53];
      v55 = &v11[v53];
      v56 = *(_DWORD *)v55;
      v54[4] = v55[4];
      *(_DWORD *)v54 = v56;
      v57 = v12[10];
      v58 = &v10[v57];
      v59 = &v11[v57];
      v60 = *(_DWORD *)v59;
      v58[4] = v59[4];
      *(_DWORD *)v58 = v60;
      v10[v12[11]] = v11[v12[11]];
      v10[v12[12]] = v11[v12[12]];
      v10[v12[13]] = v11[v12[13]];
      v61 = v12[14];
      v62 = &v10[v61];
      v63 = &v11[v61];
      v64 = *(_DWORD *)v63;
      v62[4] = v63[4];
      *(_DWORD *)v62 = v64;
      return a1;
    }
    sub_100004030((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v38 = sub_1000039AC(&qword_10036E550);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    return a1;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 16))(v10, v11, v6);
  v17 = v12[5];
  v18 = &v10[v17];
  v19 = &v11[v17];
  v20 = *(_QWORD *)v19;
  v18[8] = v19[8];
  *(_QWORD *)v18 = v20;
  v21 = v12[6];
  v22 = &v10[v21];
  v23 = &v11[v21];
  *v22 = *v23;
  v24 = v23[1];
  v22[1] = v24;
  v25 = v12[7];
  v26 = &v10[v25];
  v27 = &v11[v25];
  LOBYTE(v20) = v27[4];
  *(_DWORD *)v26 = *(_DWORD *)v27;
  v26[4] = v20;
  v10[v12[8]] = v11[v12[8]];
  v28 = v12[9];
  v29 = &v10[v28];
  v30 = &v11[v28];
  LODWORD(v20) = *(_DWORD *)v30;
  v29[4] = v30[4];
  *(_DWORD *)v29 = v20;
  v31 = v12[10];
  v32 = &v10[v31];
  v33 = &v11[v31];
  LOBYTE(v20) = v33[4];
  *(_DWORD *)v32 = *(_DWORD *)v33;
  v32[4] = v20;
  v10[v12[11]] = v11[v12[11]];
  v10[v12[12]] = v11[v12[12]];
  v10[v12[13]] = v11[v12[13]];
  v34 = v12[14];
  v35 = &v10[v34];
  v36 = &v11[v34];
  LODWORD(v20) = *(_DWORD *)v36;
  v35[4] = v36[4];
  *(_DWORD *)v35 = v20;
  v37 = *(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v13 + 56);
  swift_bridgeObjectRetain(v24);
  v37(v10, 0, 1, v12);
  return a1;
}

uint64_t sub_10013FA88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_1000039AC(&qword_10036E550);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    *(_OWORD *)&v9[v11[6]] = *(_OWORD *)&v10[v11[6]];
    v17 = v11[7];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v9[v11[8]] = v10[v11[8]];
    v20 = v11[9];
    v21 = &v9[v20];
    v22 = &v10[v20];
    v21[4] = v22[4];
    *(_DWORD *)v21 = *(_DWORD *)v22;
    v23 = v11[10];
    v24 = &v9[v23];
    v25 = &v10[v23];
    *(_DWORD *)v24 = *(_DWORD *)v25;
    v24[4] = v25[4];
    v9[v11[11]] = v10[v11[11]];
    v9[v11[12]] = v10[v11[12]];
    v9[v11[13]] = v10[v11[13]];
    v26 = v11[14];
    v27 = &v9[v26];
    v28 = &v10[v26];
    *(_DWORD *)v27 = *(_DWORD *)v28;
    v27[4] = v28[4];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t sub_10013FC3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  int *v12;
  uint64_t v13;
  uint64_t (*v14)(_BYTE *, uint64_t, int *);
  int v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  v10 = (_BYTE *)(a1 + v9);
  v11 = (_BYTE *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  v13 = *((_QWORD *)v12 - 1);
  v14 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      v34 = v12[5];
      v35 = &v10[v34];
      v36 = &v11[v34];
      *(_QWORD *)v35 = *(_QWORD *)v36;
      v35[8] = v36[8];
      v37 = v12[6];
      v38 = &v10[v37];
      v39 = (uint64_t *)&v11[v37];
      v41 = *v39;
      v40 = v39[1];
      v42 = v38[1];
      *v38 = v41;
      v38[1] = v40;
      swift_bridgeObjectRelease(v42);
      v43 = v12[7];
      v44 = &v10[v43];
      v45 = &v11[v43];
      *(_DWORD *)v44 = *(_DWORD *)v45;
      v44[4] = v45[4];
      v10[v12[8]] = v11[v12[8]];
      v46 = v12[9];
      v47 = &v10[v46];
      v48 = &v11[v46];
      *(_DWORD *)v47 = *(_DWORD *)v48;
      v47[4] = v48[4];
      v49 = v12[10];
      v50 = &v10[v49];
      v51 = &v11[v49];
      *(_DWORD *)v50 = *(_DWORD *)v51;
      v50[4] = v51[4];
      v10[v12[11]] = v11[v12[11]];
      v10[v12[12]] = v11[v12[12]];
      v10[v12[13]] = v11[v12[13]];
      v52 = v12[14];
      v53 = &v10[v52];
      v54 = &v11[v52];
      v53[4] = v54[4];
      *(_DWORD *)v53 = *(_DWORD *)v54;
      return a1;
    }
    sub_100004030((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v32 = sub_1000039AC(&qword_10036E550);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    return a1;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32))(v10, v11, v6);
  v17 = v12[5];
  v18 = &v10[v17];
  v19 = &v11[v17];
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v18[8] = v19[8];
  *(_OWORD *)&v10[v12[6]] = *(_OWORD *)&v11[v12[6]];
  v20 = v12[7];
  v21 = &v10[v20];
  v22 = &v11[v20];
  *(_DWORD *)v21 = *(_DWORD *)v22;
  v21[4] = v22[4];
  v10[v12[8]] = v11[v12[8]];
  v23 = v12[9];
  v24 = &v10[v23];
  v25 = &v11[v23];
  v24[4] = v25[4];
  *(_DWORD *)v24 = *(_DWORD *)v25;
  v26 = v12[10];
  v27 = &v10[v26];
  v28 = &v11[v26];
  *(_DWORD *)v27 = *(_DWORD *)v28;
  v27[4] = v28[4];
  v10[v12[11]] = v11[v12[11]];
  v10[v12[12]] = v11[v12[12]];
  v10[v12[13]] = v11[v12[13]];
  v29 = v12[14];
  v30 = &v10[v29];
  v31 = &v11[v29];
  *(_DWORD *)v30 = *(_DWORD *)v31;
  v30[4] = v31[4];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
  return a1;
}

uint64_t sub_10013FF14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013FF20);
}

uint64_t sub_10013FF20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unsigned int v11;
  int v12;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 253)
  {
    v8 = sub_1000039AC(&qword_10036E550);
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v11 >= 2)
    v12 = ((v11 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v12 = -2;
  if (v12 < 0)
    v12 = -1;
  return (v12 + 1);
}

uint64_t sub_10013FFE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013FFF0);
}

uint64_t sub_10013FFF0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 253)
    {
      *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 2;
      return result;
    }
    v10 = sub_1000039AC(&qword_10036E550);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_100140094(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  v2 = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = &unk_1002D7C78;
    sub_10001198C(319, (unint64_t *)&unk_100371EF0, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v6, a1 + 16);
    }
  }
}

uint64_t *sub_100140130(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, int *);
  int v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char v32;
  uint64_t v33;
  uint64_t v35;
  char *v36;
  char *v37;
  char v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char v46;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(char *, char *, uint64_t))(v12 + 24);
  v13(v9, v10, v11);
  v14 = *(int *)(a3 + 24);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v18 = *((_QWORD *)v17 - 1);
  v19 = *(uint64_t (**)(char *, uint64_t, int *))(v18 + 48);
  LODWORD(v10) = v19(v15, 1, v17);
  v20 = v19(v16, 1, v17);
  if (!(_DWORD)v10)
  {
    if (!v20)
    {
      v13(v15, v16, v11);
      v35 = v17[5];
      v36 = &v15[v35];
      v37 = &v16[v35];
      v38 = v37[8];
      *(_QWORD *)v36 = *(_QWORD *)v37;
      v36[8] = v38;
      v39 = v17[6];
      v40 = &v15[v39];
      v41 = &v16[v39];
      v42 = v41[8];
      *(_QWORD *)v40 = *(_QWORD *)v41;
      v40[8] = v42;
      v43 = v17[7];
      v44 = &v15[v43];
      v45 = &v16[v43];
      v46 = v45[8];
      *(_QWORD *)v44 = *(_QWORD *)v45;
      v44[8] = v46;
      return a1;
    }
    sub_100004030((uint64_t)v15, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  if (v20)
  {
LABEL_6:
    v33 = sub_1000039AC(&qword_10036E458);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v16, v11);
  v21 = v17[5];
  v22 = &v15[v21];
  v23 = &v16[v21];
  v24 = v23[8];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v24;
  v25 = v17[6];
  v26 = &v15[v25];
  v27 = &v16[v25];
  v28 = v27[8];
  *(_QWORD *)v26 = *(_QWORD *)v27;
  v26[8] = v28;
  v29 = v17[7];
  v30 = &v15[v29];
  v31 = &v16[v29];
  v32 = v31[8];
  *(_QWORD *)v30 = *(_QWORD *)v31;
  v30[8] = v32;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v18 + 56))(v15, 0, 1, v17);
  return a1;
}

uint64_t *sub_10014032C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t (*v18)(char *, uint64_t, int *);
  int v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(char *, char *, uint64_t))(v11 + 40);
  v12(v8, v9, v10);
  v13 = *(int *)(a3 + 24);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v17 = *((_QWORD *)v16 - 1);
  v18 = *(uint64_t (**)(char *, uint64_t, int *))(v17 + 48);
  LODWORD(v9) = v18(v14, 1, v16);
  v19 = v18(v15, 1, v16);
  if (!(_DWORD)v9)
  {
    if (!v19)
    {
      v12(v14, v15, v10);
      v31 = v16[5];
      v32 = &v14[v31];
      v33 = &v15[v31];
      *(_QWORD *)v32 = *(_QWORD *)v33;
      v32[8] = v33[8];
      v34 = v16[6];
      v35 = &v14[v34];
      v36 = &v15[v34];
      *(_QWORD *)v35 = *(_QWORD *)v36;
      v35[8] = v36[8];
      v37 = v16[7];
      v38 = &v14[v37];
      v39 = &v15[v37];
      *(_QWORD *)v38 = *(_QWORD *)v39;
      v38[8] = v39[8];
      return a1;
    }
    sub_100004030((uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v29 = sub_1000039AC(&qword_10036E458);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v15, v10);
  v20 = v16[5];
  v21 = &v14[v20];
  v22 = &v15[v20];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v22[8];
  v23 = v16[6];
  v24 = &v14[v23];
  v25 = &v15[v23];
  *(_QWORD *)v24 = *(_QWORD *)v25;
  v24[8] = v25[8];
  v26 = v16[7];
  v27 = &v14[v26];
  v28 = &v15[v26];
  *(_QWORD *)v27 = *(_QWORD *)v28;
  v27[8] = v28[8];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
  return a1;
}

uint64_t sub_100140520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10014052C);
}

uint64_t sub_100140530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10014053C);
}

void sub_100140540(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  v6[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2 = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001198C(319, (unint64_t *)&unk_10036FA60, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v6, a1 + 16);
    }
  }
}

uint64_t sub_1001405E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001405F0);
}

uint64_t sub_1001405F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100140600);
}

char *sub_100140604(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v13 = *((_QWORD *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      v14 = sub_1000039AC(&qword_10036E458);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v8(v10, v11, v7);
      v16 = v12[5];
      v17 = &v10[v16];
      v18 = &v11[v16];
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v17[8] = v18[8];
      v19 = v12[6];
      v20 = &v10[v19];
      v21 = &v11[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v12[7];
      v23 = &v10[v22];
      v24 = &v11[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    v25 = a3[7];
    a1[a3[6]] = a2[a3[6]];
    v26 = &a1[v25];
    v27 = &a2[v25];
    *(_QWORD *)v26 = *(_QWORD *)v27;
    v26[8] = v27[8];
    a1[a3[8]] = a2[a3[8]];
  }
  return a1;
}

uint64_t sub_1001407A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_1000039AC(&qword_10036E458);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  v24 = a1 + v23;
  v25 = a2 + v23;
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *(_BYTE *)(v24 + 8) = *(_BYTE *)(v25 + 8);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_100140910(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t (*v13)(char *, uint64_t, int *);
  int v14;
  int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v34;
  char *v35;
  char *v36;
  char v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char v45;
  uint64_t v46;
  int *v47;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v47 = a3;
  v9 = a3[5];
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v46 = *((_QWORD *)v12 - 1);
  v13 = *(uint64_t (**)(char *, uint64_t, int *))(v46 + 48);
  v14 = v13(v10, 1, v12);
  v15 = v13(v11, 1, v12);
  if (!v14)
  {
    if (!v15)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      v34 = v12[5];
      v35 = &v10[v34];
      v36 = &v11[v34];
      v37 = v36[8];
      *(_QWORD *)v35 = *(_QWORD *)v36;
      v35[8] = v37;
      v38 = v12[6];
      v39 = &v10[v38];
      v40 = &v11[v38];
      v41 = v40[8];
      *(_QWORD *)v39 = *(_QWORD *)v40;
      v39[8] = v41;
      v42 = v12[7];
      v43 = &v10[v42];
      v44 = &v11[v42];
      v45 = v44[8];
      *(_QWORD *)v43 = *(_QWORD *)v44;
      v43[8] = v45;
      goto LABEL_7;
    }
    sub_100004030((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v28 = sub_1000039AC(&qword_10036E458);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v11, v6);
  v16 = v12[5];
  v17 = &v10[v16];
  v18 = &v11[v16];
  v19 = v18[8];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v19;
  v20 = v12[6];
  v21 = &v10[v20];
  v22 = &v11[v20];
  v23 = v22[8];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v23;
  v24 = v12[7];
  v25 = &v10[v24];
  v26 = &v11[v24];
  v27 = v26[8];
  *(_QWORD *)v25 = *(_QWORD *)v26;
  v25[8] = v27;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v46 + 56))(v10, 0, 1, v12);
LABEL_7:
  *(_BYTE *)(a1 + v47[6]) = *(_BYTE *)(a2 + v47[6]);
  v29 = v47[7];
  v30 = a1 + v29;
  v31 = (uint64_t *)(a2 + v29);
  v32 = *v31;
  *(_BYTE *)(v30 + 8) = *((_BYTE *)v31 + 8);
  *(_QWORD *)v30 = v32;
  *(_BYTE *)(a1 + v47[8]) = *(_BYTE *)(a2 + v47[8]);
  return a1;
}

uint64_t sub_100140B34(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_1000039AC(&qword_10036E458);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  v24 = a1 + v23;
  v25 = a2 + v23;
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *(_BYTE *)(v24 + 8) = *(_BYTE *)(v25 + 8);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_100140CA4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t (*v13)(char *, uint64_t, int *);
  int v14;
  int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  int *v40;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v40 = a3;
  v9 = a3[5];
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v39 = *((_QWORD *)v12 - 1);
  v13 = *(uint64_t (**)(char *, uint64_t, int *))(v39 + 48);
  v14 = v13(v10, 1, v12);
  v15 = v13(v11, 1, v12);
  if (!v14)
  {
    if (!v15)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      v30 = v12[5];
      v31 = &v10[v30];
      v32 = &v11[v30];
      *(_QWORD *)v31 = *(_QWORD *)v32;
      v31[8] = v32[8];
      v33 = v12[6];
      v34 = &v10[v33];
      v35 = &v11[v33];
      *(_QWORD *)v34 = *(_QWORD *)v35;
      v34[8] = v35[8];
      v36 = v12[7];
      v37 = &v10[v36];
      v38 = &v11[v36];
      *(_QWORD *)v37 = *(_QWORD *)v38;
      v37[8] = v38[8];
      goto LABEL_7;
    }
    sub_100004030((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v25 = sub_1000039AC(&qword_10036E458);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v11, v6);
  v16 = v12[5];
  v17 = &v10[v16];
  v18 = &v11[v16];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  v19 = v12[6];
  v20 = &v10[v19];
  v21 = &v11[v19];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v20[8] = v21[8];
  v22 = v12[7];
  v23 = &v10[v22];
  v24 = &v11[v22];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v23[8] = v24[8];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v39 + 56))(v10, 0, 1, v12);
LABEL_7:
  v26 = v40[7];
  *(_BYTE *)(a1 + v40[6]) = *(_BYTE *)(a2 + v40[6]);
  v27 = a1 + v26;
  v28 = a2 + v26;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  *(_BYTE *)(a1 + v40[8]) = *(_BYTE *)(a2 + v40[8]);
  return a1;
}

uint64_t sub_100140EC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100140ED0);
}

uint64_t sub_100140ED0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  unsigned int v15;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_1000039AC(&qword_10036E458);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 24)) <= 4u)
    v14 = 4;
  else
    v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  v15 = v14 - 4;
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 24)) >= 4u)
    return v15;
  else
    return 0;
}

uint64_t sub_100140F84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100140F90);
}

uint64_t sub_100140F90(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = sub_1000039AC(&qword_10036E458);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 4;
  return result;
}

void sub_100141038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100141050(a1, a2, a3, (uint64_t)&unk_1002D7E08, (uint64_t)"\t", (uint64_t)&unk_1002D7E08);
}

void sub_100141050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[5];

  v10 = type metadata accessor for UnknownStorage(319);
  if (v11 <= 0x3F)
  {
    v14[0] = *(_QWORD *)(v10 - 8) + 64;
    sub_10001198C(319, (unint64_t *)&unk_10036FA60, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v13 <= 0x3F)
    {
      v14[1] = *(_QWORD *)(v12 - 8) + 64;
      v14[2] = a4;
      v14[3] = a5;
      v14[4] = a6;
      swift_initStructMetadata(a1, 256, 5, v14, a1 + 16);
    }
  }
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability()
{
  return &type metadata for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource()
{
  return &type metadata for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource;
}

uint64_t sub_10014111C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100141128);
}

uint64_t sub_10014112C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100141138);
}

_QWORD *sub_10014113C(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain(v4);
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = a3[7];
    v15 = (char *)v7 + v13;
    v16 = (char *)a2 + v13;
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = (char *)v7 + v14;
    v18 = (char *)a2 + v14;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    v19 = a3[8];
    v20 = a3[9];
    v21 = *((_BYTE *)a2 + v19);
    v17[8] = v18[8];
    *((_BYTE *)v7 + v19) = v21;
    v22 = (char *)v7 + v20;
    *(_QWORD *)v22 = *(_QWORD *)((char *)a2 + v20);
    v22[8] = *((_BYTE *)a2 + v20 + 8);
    v23 = a3[10];
    v24 = a3[11];
    v25 = (char *)v7 + v23;
    v26 = (char *)a2 + v23;
    *(_QWORD *)v25 = *(_QWORD *)v26;
    v25[8] = v26[8];
    v27 = (char *)v7 + v24;
    v28 = (char *)a2 + v24;
    *(_QWORD *)v27 = *(_QWORD *)v28;
    v27[8] = v28[8];
    v29 = a3[12];
    v30 = (char *)v7 + v29;
    v31 = (char *)a2 + v29;
    *(_QWORD *)v30 = *(_QWORD *)v31;
    v30[8] = v31[8];
  }
  return v7;
}

_QWORD *sub_10014128C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;

  v6 = *a2;
  *a1 = *a2;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  v12 = a3[6];
  v13 = a3[7];
  v14 = (char *)a1 + v12;
  v15 = (char *)a2 + v12;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  v16 = (char *)a1 + v13;
  v17 = (char *)a2 + v13;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v16[8] = v17[8];
  v18 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v19[8] = v20[8];
  v21 = a3[10];
  v22 = a3[11];
  v23 = (char *)a1 + v21;
  v24 = (char *)a2 + v21;
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v23[8] = v24[8];
  v25 = (char *)a1 + v22;
  v26 = (char *)a2 + v22;
  *(_QWORD *)v25 = *(_QWORD *)v26;
  v25[8] = v26[8];
  v27 = a3[12];
  v28 = (char *)a1 + v27;
  v29 = (char *)a2 + v27;
  *(_QWORD *)v28 = *(_QWORD *)v29;
  v28[8] = v29[8];
  return a1;
}

_QWORD *sub_1001413B4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(_QWORD *)v14;
  v13[8] = v14[8];
  *(_QWORD *)v13 = v15;
  v16 = a3[7];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  LOBYTE(v15) = v18[8];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v15;
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v19 = a3[9];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = *(_QWORD *)v21;
  v20[8] = v21[8];
  *(_QWORD *)v20 = v22;
  v23 = a3[10];
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  LOBYTE(v22) = v25[8];
  *(_QWORD *)v24 = *(_QWORD *)v25;
  v24[8] = v22;
  v26 = a3[11];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  LOBYTE(v22) = v28[8];
  *(_QWORD *)v27 = *(_QWORD *)v28;
  v27[8] = v22;
  v29 = a3[12];
  v30 = (char *)a1 + v29;
  v31 = (char *)a2 + v29;
  LOBYTE(v22) = v31[8];
  *(_QWORD *)v30 = *(_QWORD *)v31;
  v30[8] = v22;
  return a1;
}

_QWORD *sub_1001414E4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[6];
  v11 = a3[7];
  v12 = (char *)a1 + v10;
  v13 = (char *)a2 + v10;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  v12[8] = v13[8];
  v14 = (char *)a1 + v11;
  v15 = (char *)a2 + v11;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  v16 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  v19 = a3[10];
  v20 = a3[11];
  v21 = (char *)a1 + v19;
  v22 = (char *)a2 + v19;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v22[8];
  v23 = (char *)a1 + v20;
  v24 = (char *)a2 + v20;
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v23[8] = v24[8];
  v25 = a3[12];
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  *(_QWORD *)v26 = *(_QWORD *)v27;
  v26[8] = v27[8];
  return a1;
}

_QWORD *sub_1001415F8(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a3[7];
  v13 = (char *)a1 + v11;
  v14 = (char *)a2 + v11;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  v15 = (char *)a1 + v12;
  v16 = (char *)a2 + v12;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v16[8];
  v17 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v18[8] = v19[8];
  v20 = a3[10];
  v21 = a3[11];
  v22 = (char *)a1 + v20;
  v23 = (char *)a2 + v20;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v23[8];
  v24 = (char *)a1 + v21;
  v25 = (char *)a2 + v21;
  *(_QWORD *)v24 = *(_QWORD *)v25;
  v24[8] = v25[8];
  v26 = a3[12];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  v27[8] = v28[8];
  return a1;
}

uint64_t sub_100141714(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100141720);
}

uint64_t sub_100141724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100141730);
}

uint64_t sub_100141734(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[9];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = "\t";
    v4[3] = "\t";
    v4[4] = &unk_1002D7C78;
    v4[5] = "\t";
    v4[6] = "\t";
    v4[7] = "\t";
    v4[8] = "\t";
    swift_initStructMetadata(a1, 256, 9, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_1001417C8(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain(v4);
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = a3[7];
    v15 = (char *)v7 + v13;
    v16 = (char *)a2 + v13;
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = (char *)v7 + v14;
    v18 = (char *)a2 + v14;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    v17[8] = v18[8];
  }
  return v7;
}

uint64_t *sub_1001418A4(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;

  v6 = *a2;
  *a1 = *a2;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  v12 = a3[6];
  v13 = a3[7];
  v14 = (char *)a1 + v12;
  v15 = (char *)a2 + v12;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  v16 = (char *)a1 + v13;
  v17 = (char *)a2 + v13;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v16[8] = v17[8];
  return a1;
}

uint64_t *sub_100141958(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char v19;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = v14[8];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v15;
  v16 = a3[7];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = v18[8];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v19;
  return a1;
}

_QWORD *sub_100141A0C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[6];
  v11 = a3[7];
  v12 = (char *)a1 + v10;
  v13 = (char *)a2 + v10;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  v12[8] = v13[8];
  v14 = (char *)a1 + v11;
  v15 = (char *)a2 + v11;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  return a1;
}

uint64_t *sub_100141AAC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a3[7];
  v13 = (char *)a1 + v11;
  v14 = (char *)a2 + v11;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  v15 = (char *)a1 + v12;
  v16 = (char *)a2 + v12;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v16[8];
  return a1;
}

uint64_t sub_100141B54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100141B60);
}

uint64_t sub_100141B64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100141B70);
}

uint64_t sub_100141B74(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = "\t";
    v4[3] = "\t";
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_100141BF8(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    v8 = a2[1];
    a1[1] = v8;
    v9 = a3[6];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UnknownStorage(0);
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v8);
    v13(v10, v11, v12);
    v14 = a3[7];
    v15 = (char *)v7 + v14;
    v16 = (char *)a2 + v14;
    v17 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v18 = *((_QWORD *)v17 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v18 + 48))(v16, 1, v17))
    {
      v19 = sub_1000039AC(&qword_10036E458);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      v13(v15, v16, v12);
      v20 = v17[5];
      v21 = &v15[v20];
      v22 = &v16[v20];
      *(_QWORD *)v21 = *(_QWORD *)v22;
      v21[8] = v22[8];
      v23 = v17[6];
      v24 = &v15[v23];
      v25 = &v16[v23];
      *(_QWORD *)v24 = *(_QWORD *)v25;
      v24[8] = v25[8];
      v26 = v17[7];
      v27 = &v15[v26];
      v28 = &v16[v26];
      *(_QWORD *)v27 = *(_QWORD *)v28;
      v27[8] = v28[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v18 + 56))(v15, 0, 1, v17);
    }
    v29 = a3[8];
    v30 = (char *)v7 + v29;
    v31 = (char *)a2 + v29;
    v32 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
    v33 = *(_QWORD *)(v32 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
    {
      v34 = sub_1000039AC(&qword_10036E568);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      v13(v30, v31, v12);
      v35 = *(int *)(v32 + 20);
      v36 = &v30[v35];
      v37 = &v31[v35];
      *(_QWORD *)v36 = *(_QWORD *)v37;
      v36[8] = v37[8];
      v38 = *(int *)(v32 + 24);
      v39 = &v30[v38];
      v40 = &v31[v38];
      *(_QWORD *)v39 = *(_QWORD *)v40;
      v39[8] = v40[8];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
    }
  }
  return v7;
}

uint64_t sub_100141E44(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  void (*v11)(char *, uint64_t);

  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  v4 = (char *)a1 + a2[6];
  v5 = type metadata accessor for UnknownStorage(0);
  v11 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v11(v4, v5);
  v6 = (char *)a1 + a2[7];
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
    v11(v6, v5);
  v8 = (char *)a1 + a2[8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
  if (!(_DWORD)result)
    return ((uint64_t (*)(char *, uint64_t))v11)(v8, v5);
  return result;
}

uint64_t *sub_100141F38(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;

  v6 = *a2;
  v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage(0);
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v12(v9, v10, v11);
  v13 = a3[7];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v17 = *((_QWORD *)v16 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v17 + 48))(v15, 1, v16))
  {
    v18 = sub_1000039AC(&qword_10036E458);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v12(v14, v15, v11);
    v19 = v16[5];
    v20 = &v14[v19];
    v21 = &v15[v19];
    *(_QWORD *)v20 = *(_QWORD *)v21;
    v20[8] = v21[8];
    v22 = v16[6];
    v23 = &v14[v22];
    v24 = &v15[v22];
    *(_QWORD *)v23 = *(_QWORD *)v24;
    v23[8] = v24[8];
    v25 = v16[7];
    v26 = &v14[v25];
    v27 = &v15[v25];
    *(_QWORD *)v26 = *(_QWORD *)v27;
    v26[8] = v27[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
  }
  v28 = a3[8];
  v29 = (char *)a1 + v28;
  v30 = (char *)a2 + v28;
  v31 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
  v32 = *(_QWORD *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
  {
    v33 = sub_1000039AC(&qword_10036E568);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    v12(v29, v30, v11);
    v34 = *(int *)(v31 + 20);
    v35 = &v29[v34];
    v36 = &v30[v34];
    *(_QWORD *)v35 = *(_QWORD *)v36;
    v35[8] = v36[8];
    v37 = *(int *)(v31 + 24);
    v38 = &v29[v37];
    v39 = &v30[v37];
    *(_QWORD *)v38 = *(_QWORD *)v39;
    v38[8] = v39[8];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  }
  return a1;
}

uint64_t *sub_100142154(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, int *);
  int v20;
  int v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(char *, uint64_t, uint64_t);
  int v41;
  int v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char v50;
  uint64_t v51;
  uint64_t v53;
  char *v54;
  char *v55;
  char v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char v72;
  void (*v73)(char *, char *, uint64_t);
  uint64_t v74;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[1];
  v9 = a1[1];
  a1[1] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UnknownStorage(0);
  v74 = *(_QWORD *)(v13 - 8);
  v73 = *(void (**)(char *, char *, uint64_t))(v74 + 24);
  v73(v11, v12, v13);
  v14 = a3[7];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v18 = *((_QWORD *)v17 - 1);
  v19 = *(uint64_t (**)(char *, uint64_t, int *))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v15, v16, v13);
      v22 = v17[5];
      v23 = &v15[v22];
      v24 = &v16[v22];
      v25 = v24[8];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v25;
      v26 = v17[6];
      v27 = &v15[v26];
      v28 = &v16[v26];
      v29 = v28[8];
      *(_QWORD *)v27 = *(_QWORD *)v28;
      v27[8] = v29;
      v30 = v17[7];
      v31 = &v15[v30];
      v32 = &v16[v30];
      v33 = v32[8];
      *(_QWORD *)v31 = *(_QWORD *)v32;
      v31[8] = v33;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    sub_100004030((uint64_t)v15, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    v34 = sub_1000039AC(&qword_10036E458);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_7;
  }
  v73(v15, v16, v13);
  v53 = v17[5];
  v54 = &v15[v53];
  v55 = &v16[v53];
  v56 = v55[8];
  *(_QWORD *)v54 = *(_QWORD *)v55;
  v54[8] = v56;
  v57 = v17[6];
  v58 = &v15[v57];
  v59 = &v16[v57];
  v60 = v59[8];
  *(_QWORD *)v58 = *(_QWORD *)v59;
  v58[8] = v60;
  v61 = v17[7];
  v62 = &v15[v61];
  v63 = &v16[v61];
  v64 = v63[8];
  *(_QWORD *)v62 = *(_QWORD *)v63;
  v62[8] = v64;
LABEL_7:
  v35 = a3[8];
  v36 = (char *)a1 + v35;
  v37 = (char *)a2 + v35;
  v38 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
  v39 = *(_QWORD *)(v38 - 8);
  v40 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v39 + 48);
  v41 = v40(v36, 1, v38);
  v42 = v40(v37, 1, v38);
  if (!v41)
  {
    if (!v42)
    {
      v73(v36, v37, v13);
      v65 = *(int *)(v38 + 20);
      v66 = &v36[v65];
      v67 = &v37[v65];
      v68 = v67[8];
      *(_QWORD *)v66 = *(_QWORD *)v67;
      v66[8] = v68;
      v69 = *(int *)(v38 + 24);
      v70 = &v36[v69];
      v71 = &v37[v69];
      v72 = v71[8];
      *(_QWORD *)v70 = *(_QWORD *)v71;
      v70[8] = v72;
      return a1;
    }
    sub_100004030((uint64_t)v36, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
    goto LABEL_12;
  }
  if (v42)
  {
LABEL_12:
    v51 = sub_1000039AC(&qword_10036E568);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v36, v37, v13);
  v43 = *(int *)(v38 + 20);
  v44 = &v36[v43];
  v45 = &v37[v43];
  v46 = v45[8];
  *(_QWORD *)v44 = *(_QWORD *)v45;
  v44[8] = v46;
  v47 = *(int *)(v38 + 24);
  v48 = &v36[v47];
  v49 = &v37[v47];
  v50 = v49[8];
  *(_QWORD *)v48 = *(_QWORD *)v49;
  v48[8] = v50;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
  return a1;
}

_OWORD *sub_1001424BC(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;

  *a1 = *a2;
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[7];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v15 = *((_QWORD *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_1000039AC(&qword_10036E458);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v10(v12, v13, v9);
    v17 = v14[5];
    v18 = &v12[v17];
    v19 = &v13[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v14[6];
    v21 = &v12[v20];
    v22 = &v13[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    v23 = v14[7];
    v24 = &v12[v23];
    v25 = &v13[v23];
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v24[8] = v25[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  v26 = a3[8];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
  v30 = *(_QWORD *)(v29 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
  {
    v31 = sub_1000039AC(&qword_10036E568);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v10(v27, v28, v9);
    v32 = *(int *)(v29 + 20);
    v33 = &v27[v32];
    v34 = &v28[v32];
    *(_QWORD *)v33 = *(_QWORD *)v34;
    v33[8] = v34[8];
    v35 = *(int *)(v29 + 24);
    v36 = &v27[v35];
    v37 = &v28[v35];
    *(_QWORD *)v36 = *(_QWORD *)v37;
    v36[8] = v37[8];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  }
  return a1;
}

uint64_t *sub_1001426C8(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, int *);
  int v18;
  int v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  int v36;
  int v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  void (*v61)(char *, char *, uint64_t);
  uint64_t v62;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRelease(v7);
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage(0);
  v62 = *(_QWORD *)(v11 - 8);
  v61 = *(void (**)(char *, char *, uint64_t))(v62 + 40);
  v61(v9, v10, v11);
  v12 = a3[7];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v16 = *((_QWORD *)v15 - 1);
  v17 = *(uint64_t (**)(char *, uint64_t, int *))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v13, v14, v11);
      v20 = v15[5];
      v21 = &v13[v20];
      v22 = &v14[v20];
      *(_QWORD *)v21 = *(_QWORD *)v22;
      v21[8] = v22[8];
      v23 = v15[6];
      v24 = &v13[v23];
      v25 = &v14[v23];
      *(_QWORD *)v24 = *(_QWORD *)v25;
      v24[8] = v25[8];
      v26 = v15[7];
      v27 = &v13[v26];
      v28 = &v14[v26];
      *(_QWORD *)v27 = *(_QWORD *)v28;
      v27[8] = v28[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    sub_100004030((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    v29 = sub_1000039AC(&qword_10036E458);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_7;
  }
  v61(v13, v14, v11);
  v46 = v15[5];
  v47 = &v13[v46];
  v48 = &v14[v46];
  *(_QWORD *)v47 = *(_QWORD *)v48;
  v47[8] = v48[8];
  v49 = v15[6];
  v50 = &v13[v49];
  v51 = &v14[v49];
  *(_QWORD *)v50 = *(_QWORD *)v51;
  v50[8] = v51[8];
  v52 = v15[7];
  v53 = &v13[v52];
  v54 = &v14[v52];
  *(_QWORD *)v53 = *(_QWORD *)v54;
  v53[8] = v54[8];
LABEL_7:
  v30 = a3[8];
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  v33 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
  v36 = v35(v31, 1, v33);
  v37 = v35(v32, 1, v33);
  if (!v36)
  {
    if (!v37)
    {
      v61(v31, v32, v11);
      v55 = *(int *)(v33 + 20);
      v56 = &v31[v55];
      v57 = &v32[v55];
      *(_QWORD *)v56 = *(_QWORD *)v57;
      v56[8] = v57[8];
      v58 = *(int *)(v33 + 24);
      v59 = &v31[v58];
      v60 = &v32[v58];
      *(_QWORD *)v59 = *(_QWORD *)v60;
      v59[8] = v60[8];
      return a1;
    }
    sub_100004030((uint64_t)v31, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
    goto LABEL_12;
  }
  if (v37)
  {
LABEL_12:
    v44 = sub_1000039AC(&qword_10036E568);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v31, v32, v11);
  v38 = *(int *)(v33 + 20);
  v39 = &v31[v38];
  v40 = &v32[v38];
  *(_QWORD *)v39 = *(_QWORD *)v40;
  v39[8] = v40[8];
  v41 = *(int *)(v33 + 24);
  v42 = &v31[v41];
  v43 = &v32[v41];
  *(_QWORD *)v42 = *(_QWORD *)v43;
  v42[8] = v43[8];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  return a1;
}

uint64_t sub_100142A20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100142A2C);
}

uint64_t sub_100142A2C(char *a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[6];
    }
    else
    {
      v12 = sub_1000039AC(&qword_10036E458);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[7];
      }
      else
      {
        v10 = sub_1000039AC(&qword_10036E568);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[8];
      }
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t sub_100142AF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100142B04);
}

char *sub_100142B04(char *result, uint64_t a2, int a3, int *a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[6];
    }
    else
    {
      v12 = sub_1000039AC(&qword_10036E458);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[7];
      }
      else
      {
        v10 = sub_1000039AC(&qword_10036E568);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[8];
      }
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void sub_100142BCC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[5];

  v8[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v8[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2 = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v8[2] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001198C(319, (unint64_t *)&unk_10036FA60, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v5 <= 0x3F)
    {
      v8[3] = *(_QWORD *)(v4 - 8) + 64;
      sub_10001198C(319, (unint64_t *)&unk_1003722C8, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
      if (v7 <= 0x3F)
      {
        v8[4] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 5, v8, a1 + 16);
      }
    }
  }
}

_QWORD *sub_100142C9C(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain(v4);
    v12(v9, v10, v11);
    v13 = a3[7];
    *((_BYTE *)v7 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    v14 = (char *)v7 + v13;
    v15 = (char *)a2 + v13;
    v14[4] = v15[4];
    *(_DWORD *)v14 = *(_DWORD *)v15;
    v16 = a3[8];
    v17 = a3[9];
    v18 = (char *)v7 + v16;
    v19 = (char *)a2 + v16;
    v18[4] = v19[4];
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v20 = (char *)v7 + v17;
    v21 = (char *)a2 + v17;
    v20[4] = v21[4];
    *(_DWORD *)v20 = *(_DWORD *)v21;
  }
  return v7;
}

_QWORD *sub_100142D9C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;

  v6 = *a2;
  *a1 = *a2;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  v12 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v13[4] = v14[4];
  *(_DWORD *)v13 = *(_DWORD *)v14;
  v15 = a3[8];
  v16 = a3[9];
  v17 = (char *)a1 + v15;
  v18 = (char *)a2 + v15;
  v17[4] = v18[4];
  *(_DWORD *)v17 = *(_DWORD *)v18;
  v19 = (char *)a1 + v16;
  v20 = (char *)a2 + v16;
  v19[4] = v20[4];
  *(_DWORD *)v19 = *(_DWORD *)v20;
  return a1;
}

_QWORD *sub_100142E74(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char v23;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v12 = a3[7];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = v14[4];
  *(_DWORD *)v13 = *(_DWORD *)v14;
  v13[4] = v15;
  v16 = a3[8];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = v18[4];
  *(_DWORD *)v17 = *(_DWORD *)v18;
  v17[4] = v19;
  v20 = a3[9];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = v22[4];
  *(_DWORD *)v21 = *(_DWORD *)v22;
  v21[4] = v23;
  return a1;
}

_QWORD *sub_100142F50(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v11[4] = v12[4];
  *(_DWORD *)v11 = *(_DWORD *)v12;
  v13 = a3[8];
  v14 = a3[9];
  v15 = (char *)a1 + v13;
  v16 = (char *)a2 + v13;
  v15[4] = v16[4];
  *(_DWORD *)v15 = *(_DWORD *)v16;
  v17 = (char *)a1 + v14;
  v18 = (char *)a2 + v14;
  v17[4] = v18[4];
  *(_DWORD *)v17 = *(_DWORD *)v18;
  return a1;
}

_QWORD *sub_100143014(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v12[4] = v13[4];
  *(_DWORD *)v12 = *(_DWORD *)v13;
  v14 = a3[8];
  v15 = a3[9];
  v16 = (char *)a1 + v14;
  v17 = (char *)a2 + v14;
  v16[4] = v17[4];
  *(_DWORD *)v16 = *(_DWORD *)v17;
  v18 = (char *)a1 + v15;
  v19 = (char *)a2 + v15;
  v18[4] = v19[4];
  *(_DWORD *)v18 = *(_DWORD *)v19;
  return a1;
}

uint64_t sub_1001430E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001430EC);
}

uint64_t sub_1001430F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001430FC);
}

uint64_t sub_100143100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001435E8(a1, a2, a3, (uint64_t)&unk_1002D7E08, (uint64_t)&unk_1002D7AC8);
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType()
{
  return &type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType;
}

uint64_t *sub_100143124(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain(v4);
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = a3[7];
    v15 = (char *)v7 + v13;
    v16 = (char *)a2 + v13;
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = (char *)v7 + v14;
    v18 = (char *)a2 + v14;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    v17[8] = v18[8];
    v19 = a3[8];
    v20 = a3[9];
    v21 = (char *)v7 + v19;
    v22 = (char *)a2 + v19;
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    v23 = (char *)v7 + v20;
    v24 = (char *)a2 + v20;
    *(_QWORD *)v23 = *(_QWORD *)v24;
    v23[8] = v24[8];
  }
  return v7;
}

uint64_t *sub_100143234(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;

  v6 = *a2;
  *a1 = *a2;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  v12 = a3[6];
  v13 = a3[7];
  v14 = (char *)a1 + v12;
  v15 = (char *)a2 + v12;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  v16 = (char *)a1 + v13;
  v17 = (char *)a2 + v13;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v16[8] = v17[8];
  v18 = a3[8];
  v19 = a3[9];
  v20 = (char *)a1 + v18;
  v21 = (char *)a2 + v18;
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v20[8] = v21[8];
  v22 = (char *)a1 + v19;
  v23 = (char *)a2 + v19;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v23[8];
  return a1;
}

uint64_t *sub_10014331C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char v27;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = v14[8];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v15;
  v16 = a3[7];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = v18[8];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v19;
  v20 = a3[8];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = v22[8];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v23;
  v24 = a3[9];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = v26[8];
  *(_QWORD *)v25 = *(_QWORD *)v26;
  v25[8] = v27;
  return a1;
}

_QWORD *sub_100143408(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[6];
  v11 = a3[7];
  v12 = (char *)a1 + v10;
  v13 = (char *)a2 + v10;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  v12[8] = v13[8];
  v14 = (char *)a1 + v11;
  v15 = (char *)a2 + v11;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  v16 = a3[8];
  v17 = a3[9];
  v18 = (char *)a1 + v16;
  v19 = (char *)a2 + v16;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v18[8] = v19[8];
  v20 = (char *)a1 + v17;
  v21 = (char *)a2 + v17;
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v20[8] = v21[8];
  return a1;
}

uint64_t *sub_1001434DC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a3[7];
  v13 = (char *)a1 + v11;
  v14 = (char *)a2 + v11;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  v15 = (char *)a1 + v12;
  v16 = (char *)a2 + v12;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v16[8];
  v17 = a3[8];
  v18 = a3[9];
  v19 = (char *)a1 + v17;
  v20 = (char *)a2 + v17;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v19[8] = v20[8];
  v21 = (char *)a1 + v18;
  v22 = (char *)a2 + v18;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v22[8];
  return a1;
}

uint64_t sub_1001435B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001435C4);
}

uint64_t sub_1001435C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001435D4);
}

uint64_t sub_1001435D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001435E8(a1, a2, a3, (uint64_t)"\t", (uint64_t)"\t");
}

uint64_t sub_1001435E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  unint64_t v9;
  _QWORD v10[6];

  v10[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for UnknownStorage(319);
  if (v9 <= 0x3F)
  {
    v10[1] = *(_QWORD *)(result - 8) + 64;
    v10[2] = a4;
    v10[3] = a5;
    v10[4] = a5;
    v10[5] = a5;
    swift_initStructMetadata(a1, 256, 6, v10, a1 + 16);
    return 0;
  }
  return result;
}

_QWORD *sub_100143678(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void (*v22)(char *, char *, uint64_t);
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v54;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain(v4);
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = (_QWORD *)((char *)v7 + v13);
    v15 = (_QWORD *)((char *)a2 + v13);
    v16 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
    v17 = *((_QWORD *)v16 - 1);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v17 + 48))(v15, 1, v16))
    {
      v18 = sub_1000039AC(&qword_10036E570);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v19 = *v15;
      *v14 = *v15;
      v20 = v16[5];
      v21 = (char *)v14 + v20;
      v54 = v11;
      v22 = v12;
      v23 = (char *)v15 + v20;
      swift_bridgeObjectRetain(v19);
      v24 = v23;
      v12 = v22;
      v11 = v54;
      v12(v21, v24, v54);
      v25 = v16[6];
      v26 = (char *)v14 + v25;
      v27 = (char *)v15 + v25;
      *(_QWORD *)v26 = *(_QWORD *)v27;
      v26[8] = v27[8];
      v28 = v16[7];
      v29 = (char *)v14 + v28;
      v30 = (char *)v15 + v28;
      *(_QWORD *)v29 = *(_QWORD *)v30;
      v29[8] = v30[8];
      v31 = v16[8];
      v32 = (char *)v14 + v31;
      v33 = (char *)v15 + v31;
      *(_QWORD *)v32 = *(_QWORD *)v33;
      v32[8] = v33[8];
      v34 = v16[9];
      v35 = (char *)v14 + v34;
      v36 = (char *)v15 + v34;
      *(_QWORD *)v35 = *(_QWORD *)v36;
      v35[8] = v36[8];
      (*(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
    }
    v37 = a3[7];
    v38 = a3[8];
    v39 = (char *)v7 + v37;
    v40 = (char *)a2 + v37;
    *(_QWORD *)v39 = *(_QWORD *)v40;
    v39[8] = v40[8];
    *((_BYTE *)v7 + v38) = *((_BYTE *)a2 + v38);
    v41 = a3[9];
    v42 = a3[10];
    v43 = (char *)v7 + v41;
    v44 = (char *)a2 + v41;
    *(_DWORD *)v43 = *(_DWORD *)v44;
    v43[4] = v44[4];
    v45 = (char *)v7 + v42;
    v46 = (char *)a2 + v42;
    v47 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
    v48 = *(_QWORD *)(v47 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
    {
      v49 = sub_1000039AC(&qword_10036E578);
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    }
    else
    {
      v12(v45, v46, v11);
      v45[*(int *)(v47 + 20)] = v46[*(int *)(v47 + 20)];
      v45[*(int *)(v47 + 24)] = v46[*(int *)(v47 + 24)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
    }
    v50 = a3[11];
    v51 = (char *)v7 + v50;
    v52 = (char *)a2 + v50;
    *(_QWORD *)v51 = *(_QWORD *)v52;
    v51[8] = v52[8];
  }
  return v7;
}

uint64_t sub_100143938(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  void (*v11)(char *, uint64_t);

  swift_bridgeObjectRelease(*a1);
  v4 = (char *)a1 + a2[5];
  v5 = type metadata accessor for UnknownStorage(0);
  v11 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v11(v4, v5);
  v6 = (char *)a1 + a2[6];
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease(*(_QWORD *)v6);
    v11(&v6[*(int *)(v7 + 20)], v5);
  }
  v8 = (char *)a1 + a2[10];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
  if (!(_DWORD)result)
    return ((uint64_t (*)(char *, uint64_t))v11)(v8, v5);
  return result;
}

_QWORD *sub_100143A40(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, char *, uint64_t);
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v53;

  v6 = *a2;
  *a1 = *a2;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  v12 = a3[6];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  v16 = *((_QWORD *)v15 - 1);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
  {
    v17 = sub_1000039AC(&qword_10036E570);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v18 = *v14;
    *v13 = *v14;
    v19 = v15[5];
    v20 = (char *)v13 + v19;
    v53 = v10;
    v21 = v11;
    v22 = (char *)v14 + v19;
    swift_bridgeObjectRetain(v18);
    v23 = v22;
    v11 = v21;
    v10 = v53;
    v11(v20, v23, v53);
    v24 = v15[6];
    v25 = (char *)v13 + v24;
    v26 = (char *)v14 + v24;
    *(_QWORD *)v25 = *(_QWORD *)v26;
    v25[8] = v26[8];
    v27 = v15[7];
    v28 = (char *)v13 + v27;
    v29 = (char *)v14 + v27;
    *(_QWORD *)v28 = *(_QWORD *)v29;
    v28[8] = v29[8];
    v30 = v15[8];
    v31 = (char *)v13 + v30;
    v32 = (char *)v14 + v30;
    *(_QWORD *)v31 = *(_QWORD *)v32;
    v31[8] = v32[8];
    v33 = v15[9];
    v34 = (char *)v13 + v33;
    v35 = (char *)v14 + v33;
    *(_QWORD *)v34 = *(_QWORD *)v35;
    v34[8] = v35[8];
    (*(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  }
  v36 = a3[7];
  v37 = a3[8];
  v38 = (char *)a1 + v36;
  v39 = (char *)a2 + v36;
  *(_QWORD *)v38 = *(_QWORD *)v39;
  v38[8] = v39[8];
  *((_BYTE *)a1 + v37) = *((_BYTE *)a2 + v37);
  v40 = a3[9];
  v41 = a3[10];
  v42 = (char *)a1 + v40;
  v43 = (char *)a2 + v40;
  *(_DWORD *)v42 = *(_DWORD *)v43;
  v42[4] = v43[4];
  v44 = (char *)a1 + v41;
  v45 = (char *)a2 + v41;
  v46 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  v47 = *(_QWORD *)(v46 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
  {
    v48 = sub_1000039AC(&qword_10036E578);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    v11(v44, v45, v10);
    v44[*(int *)(v46 + 20)] = v45[*(int *)(v46 + 20)];
    v44[*(int *)(v46 + 24)] = v45[*(int *)(v46 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
  }
  v49 = a3[11];
  v50 = (char *)a1 + v49;
  v51 = (char *)a2 + v49;
  *(_QWORD *)v50 = *(_QWORD *)v51;
  v50[8] = v51[8];
  return a1;
}

_QWORD *sub_100143CD8(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *);
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  int *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t *, uint64_t, int *);
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  char *v27;
  char *v28;
  char v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  _BYTE *v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(_BYTE *, uint64_t, uint64_t);
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char v81;
  void (*v82)(char *, char *);
  uint64_t v83;
  uint64_t v84;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage(0);
  v83 = *(_QWORD *)(v11 - 8);
  v84 = v11;
  v12 = *(void (**)(char *, char *))(v83 + 24);
  v12(v9, v10);
  v13 = a3[6];
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (_QWORD *)((char *)a2 + v13);
  v16 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  v17 = *((_QWORD *)v16 - 1);
  v18 = *(uint64_t (**)(uint64_t *, uint64_t, int *))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  v82 = v12;
  if (v19)
  {
    if (!v20)
    {
      v21 = *v15;
      *v14 = *v15;
      v22 = v16[5];
      v23 = (char *)v14 + v22;
      v24 = (char *)v15 + v22;
      v25 = *(void (**)(char *, char *, uint64_t))(v83 + 16);
      swift_bridgeObjectRetain(v21);
      v25(v23, v24, v84);
      v26 = v16[6];
      v27 = (char *)v14 + v26;
      v28 = (char *)v15 + v26;
      v29 = v28[8];
      *(_QWORD *)v27 = *(_QWORD *)v28;
      v27[8] = v29;
      v30 = v16[7];
      v31 = (char *)v14 + v30;
      v32 = (char *)v15 + v30;
      v33 = v32[8];
      *(_QWORD *)v31 = *(_QWORD *)v32;
      v31[8] = v33;
      v34 = v16[8];
      v35 = (char *)v14 + v34;
      v36 = (char *)v15 + v34;
      v37 = v36[8];
      *(_QWORD *)v35 = *(_QWORD *)v36;
      v35[8] = v37;
      v38 = v16[9];
      v39 = (char *)v14 + v38;
      v40 = (char *)v15 + v38;
      v41 = v40[8];
      *(_QWORD *)v39 = *(_QWORD *)v40;
      v39[8] = v41;
      (*(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v20)
  {
    sub_100004030((uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
LABEL_6:
    v42 = sub_1000039AC(&qword_10036E570);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    goto LABEL_7;
  }
  v64 = *v15;
  v65 = *v14;
  *v14 = *v15;
  swift_bridgeObjectRetain(v64);
  swift_bridgeObjectRelease(v65);
  ((void (*)(char *, char *, uint64_t))v12)((char *)v14 + v16[5], (char *)v15 + v16[5], v84);
  v66 = v16[6];
  v67 = (char *)v14 + v66;
  v68 = (char *)v15 + v66;
  v69 = v68[8];
  *(_QWORD *)v67 = *(_QWORD *)v68;
  v67[8] = v69;
  v70 = v16[7];
  v71 = (char *)v14 + v70;
  v72 = (char *)v15 + v70;
  v73 = v72[8];
  *(_QWORD *)v71 = *(_QWORD *)v72;
  v71[8] = v73;
  v74 = v16[8];
  v75 = (char *)v14 + v74;
  v76 = (char *)v15 + v74;
  v77 = v76[8];
  *(_QWORD *)v75 = *(_QWORD *)v76;
  v75[8] = v77;
  v78 = v16[9];
  v79 = (char *)v14 + v78;
  v80 = (char *)v15 + v78;
  v81 = v80[8];
  *(_QWORD *)v79 = *(_QWORD *)v80;
  v79[8] = v81;
LABEL_7:
  v43 = a3[7];
  v44 = (char *)a1 + v43;
  v45 = (char *)a2 + v43;
  v46 = *(_QWORD *)v45;
  v44[8] = v45[8];
  *(_QWORD *)v44 = v46;
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v47 = a3[9];
  v48 = (char *)a1 + v47;
  v49 = (char *)a2 + v47;
  LODWORD(v46) = *(_DWORD *)v49;
  v48[4] = v49[4];
  *(_DWORD *)v48 = v46;
  v50 = a3[10];
  v51 = (char *)a1 + v50;
  v52 = (char *)a2 + v50;
  v53 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  v54 = *(_QWORD *)(v53 - 8);
  v55 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v54 + 48);
  v56 = v55(v51, 1, v53);
  v57 = v55(v52, 1, v53);
  if (!v56)
  {
    if (!v57)
    {
      ((void (*)(_BYTE *, _BYTE *, uint64_t))v82)(v51, v52, v84);
      v51[*(int *)(v53 + 20)] = v52[*(int *)(v53 + 20)];
      v51[*(int *)(v53 + 24)] = v52[*(int *)(v53 + 24)];
      goto LABEL_13;
    }
    sub_100004030((uint64_t)v51, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
    goto LABEL_12;
  }
  if (v57)
  {
LABEL_12:
    v58 = sub_1000039AC(&qword_10036E578);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v83 + 16))(v51, v52, v84);
  v51[*(int *)(v53 + 20)] = v52[*(int *)(v53 + 20)];
  v51[*(int *)(v53 + 24)] = v52[*(int *)(v53 + 24)];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
LABEL_13:
  v59 = a3[11];
  v60 = (char *)a1 + v59;
  v61 = (char *)a2 + v59;
  v62 = *(_QWORD *)v61;
  v60[8] = v61[8];
  *(_QWORD *)v60 = v62;
  return a1;
}

_QWORD *sub_1001440A8(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  v15 = *((_QWORD *)v14 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_1000039AC(&qword_10036E570);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    v10((char *)v12 + v14[5], (char *)v13 + v14[5], v9);
    v17 = v14[6];
    v18 = (char *)v12 + v17;
    v19 = (char *)v13 + v17;
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v14[7];
    v21 = (char *)v12 + v20;
    v22 = (char *)v13 + v20;
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    v23 = v14[8];
    v24 = (char *)v12 + v23;
    v25 = (char *)v13 + v23;
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v24[8] = v25[8];
    v26 = v14[9];
    v27 = (char *)v12 + v26;
    v28 = (char *)v13 + v26;
    *(_QWORD *)v27 = *(_QWORD *)v28;
    v27[8] = v28[8];
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  v29 = a3[7];
  v30 = a3[8];
  v31 = (char *)a1 + v29;
  v32 = (char *)a2 + v29;
  *(_QWORD *)v31 = *(_QWORD *)v32;
  v31[8] = v32[8];
  *((_BYTE *)a1 + v30) = *((_BYTE *)a2 + v30);
  v33 = a3[9];
  v34 = a3[10];
  v35 = (char *)a1 + v33;
  v36 = (char *)a2 + v33;
  *(_DWORD *)v35 = *(_DWORD *)v36;
  v35[4] = v36[4];
  v37 = (char *)a1 + v34;
  v38 = (char *)a2 + v34;
  v39 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  v40 = *(_QWORD *)(v39 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
  {
    v41 = sub_1000039AC(&qword_10036E578);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    v10(v37, v38, v9);
    v37[*(int *)(v39 + 20)] = v38[*(int *)(v39 + 20)];
    v37[*(int *)(v39 + 24)] = v38[*(int *)(v39 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
  }
  v42 = a3[11];
  v43 = (char *)a1 + v42;
  v44 = (char *)a2 + v42;
  *(_QWORD *)v43 = *(_QWORD *)v44;
  v43[8] = v44[8];
  return a1;
}

_QWORD *sub_100144314(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, int *);
  int v17;
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(char *, uint64_t, uint64_t);
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  void (*v65)(char *, char *, uint64_t);
  uint64_t v66;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage(0);
  v66 = *(_QWORD *)(v10 - 8);
  v65 = *(void (**)(char *, char *, uint64_t))(v66 + 40);
  v65(v8, v9, v10);
  v11 = a3[6];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  v15 = *((_QWORD *)v14 - 1);
  v16 = *(uint64_t (**)(char *, uint64_t, int *))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      *(_QWORD *)v12 = *(_QWORD *)v13;
      (*(void (**)(char *, char *, uint64_t))(v66 + 32))(&v12[v14[5]], &v13[v14[5]], v10);
      v19 = v14[6];
      v20 = &v12[v19];
      v21 = &v13[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v14[7];
      v23 = &v12[v22];
      v24 = &v13[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      v25 = v14[8];
      v26 = &v12[v25];
      v27 = &v13[v25];
      *(_QWORD *)v26 = *(_QWORD *)v27;
      v26[8] = v27[8];
      v28 = v14[9];
      v29 = &v12[v28];
      v30 = &v13[v28];
      *(_QWORD *)v29 = *(_QWORD *)v30;
      v29[8] = v30[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
LABEL_6:
    v31 = sub_1000039AC(&qword_10036E570);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    goto LABEL_7;
  }
  v52 = *(_QWORD *)v12;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  swift_bridgeObjectRelease(v52);
  v65(&v12[v14[5]], &v13[v14[5]], v10);
  v53 = v14[6];
  v54 = &v12[v53];
  v55 = &v13[v53];
  *(_QWORD *)v54 = *(_QWORD *)v55;
  v54[8] = v55[8];
  v56 = v14[7];
  v57 = &v12[v56];
  v58 = &v13[v56];
  *(_QWORD *)v57 = *(_QWORD *)v58;
  v57[8] = v58[8];
  v59 = v14[8];
  v60 = &v12[v59];
  v61 = &v13[v59];
  *(_QWORD *)v60 = *(_QWORD *)v61;
  v60[8] = v61[8];
  v62 = v14[9];
  v63 = &v12[v62];
  v64 = &v13[v62];
  *(_QWORD *)v63 = *(_QWORD *)v64;
  v63[8] = v64[8];
LABEL_7:
  v32 = a3[7];
  v33 = a3[8];
  v34 = (char *)a1 + v32;
  v35 = (char *)a2 + v32;
  *(_QWORD *)v34 = *(_QWORD *)v35;
  v34[8] = v35[8];
  *((_BYTE *)a1 + v33) = *((_BYTE *)a2 + v33);
  v36 = a3[9];
  v37 = a3[10];
  v38 = (char *)a1 + v36;
  v39 = (char *)a2 + v36;
  *(_DWORD *)v38 = *(_DWORD *)v39;
  v38[4] = v39[4];
  v40 = (char *)a1 + v37;
  v41 = (char *)a2 + v37;
  v42 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  v43 = *(_QWORD *)(v42 - 8);
  v44 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v43 + 48);
  v45 = v44(v40, 1, v42);
  v46 = v44(v41, 1, v42);
  if (!v45)
  {
    if (!v46)
    {
      v65(v40, v41, v10);
      v40[*(int *)(v42 + 20)] = v41[*(int *)(v42 + 20)];
      v40[*(int *)(v42 + 24)] = v41[*(int *)(v42 + 24)];
      goto LABEL_13;
    }
    sub_100004030((uint64_t)v40, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
    goto LABEL_12;
  }
  if (v46)
  {
LABEL_12:
    v47 = sub_1000039AC(&qword_10036E578);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v66 + 32))(v40, v41, v10);
  v40[*(int *)(v42 + 20)] = v41[*(int *)(v42 + 20)];
  v40[*(int *)(v42 + 24)] = v41[*(int *)(v42 + 24)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
LABEL_13:
  v48 = a3[11];
  v49 = (char *)a1 + v48;
  v50 = (char *)a2 + v48;
  *(_QWORD *)v49 = *(_QWORD *)v50;
  v49[8] = v50[8];
  return a1;
}

uint64_t sub_1001446CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001446D8);
}

uint64_t sub_1001446D8(char *a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[5];
    }
    else
    {
      v12 = sub_1000039AC(&qword_10036E570);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[6];
      }
      else
      {
        v10 = sub_1000039AC(&qword_10036E578);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[10];
      }
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t sub_1001447A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001447B0);
}

char *sub_1001447B0(char *result, uint64_t a2, int a3, int *a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[5];
    }
    else
    {
      v12 = sub_1000039AC(&qword_10036E570);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[6];
      }
      else
      {
        v10 = sub_1000039AC(&qword_10036E578);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[10];
      }
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void sub_100144878(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[8];

  v8[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2 = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v8[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001198C(319, &qword_100372480, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
    if (v5 <= 0x3F)
    {
      v8[2] = *(_QWORD *)(v4 - 8) + 64;
      v8[3] = "\t";
      v8[4] = &unk_1002D7E08;
      v8[5] = &unk_1002D7AC8;
      sub_10001198C(319, (unint64_t *)&unk_100372488, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
      if (v7 <= 0x3F)
      {
        v8[6] = *(_QWORD *)(v6 - 8) + 64;
        v8[7] = "\t";
        swift_initStructMetadata(a1, 256, 8, v8, a1 + 16);
      }
    }
  }
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType()
{
  return &type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType;
}

uint64_t sub_100144974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100144980);
}

uint64_t sub_100144984(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100144990);
}

uint64_t sub_100144994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000780DC(a1, a2, a3, (uint64_t)&unk_1002D7C78, (uint64_t)&unk_1002D7C78);
}

_QWORD *sub_1001449A4(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain(v4);
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = (char *)v7 + v13;
    v15 = (char *)a2 + v13;
    v16 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v17 = *((_QWORD *)v16 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v17 + 48))(v15, 1, v16))
    {
      v18 = sub_1000039AC(&qword_10036E458);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v12(v14, v15, v11);
      v19 = v16[5];
      v20 = &v14[v19];
      v21 = &v15[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v16[6];
      v23 = &v14[v22];
      v24 = &v15[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      v25 = v16[7];
      v26 = &v14[v25];
      v27 = &v15[v25];
      *(_QWORD *)v26 = *(_QWORD *)v27;
      v26[8] = v27[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
    }
    *((_BYTE *)v7 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  }
  return v7;
}

_QWORD *sub_100144B34(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;

  v6 = *a2;
  *a1 = *a2;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v16 = *((_QWORD *)v15 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
  {
    v17 = sub_1000039AC(&qword_10036E458);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v11(v13, v14, v10);
    v18 = v15[5];
    v19 = &v13[v18];
    v20 = &v14[v18];
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[8] = v20[8];
    v21 = v15[6];
    v22 = &v13[v21];
    v23 = &v14[v21];
    *(_QWORD *)v22 = *(_QWORD *)v23;
    v22[8] = v23[8];
    v24 = v15[7];
    v25 = &v13[v24];
    v26 = &v14[v24];
    *(_QWORD *)v25 = *(_QWORD *)v26;
    v25[8] = v26[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  }
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  return a1;
}

_QWORD *sub_100144C9C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, int *);
  int v20;
  int v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char v33;
  uint64_t v34;
  uint64_t v36;
  char *v37;
  char *v38;
  char v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char v47;
  uint64_t v48;
  _QWORD *v49;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(char *, char *, uint64_t))(v12 + 24);
  v13(v9, v10, v11);
  v48 = a3;
  v49 = a2;
  v14 = *(int *)(a3 + 24);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v18 = *((_QWORD *)v17 - 1);
  v19 = *(uint64_t (**)(char *, uint64_t, int *))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (!v20)
  {
    if (!v21)
    {
      v13(v15, v16, v11);
      v36 = v17[5];
      v37 = &v15[v36];
      v38 = &v16[v36];
      v39 = v38[8];
      *(_QWORD *)v37 = *(_QWORD *)v38;
      v37[8] = v39;
      v40 = v17[6];
      v41 = &v15[v40];
      v42 = &v16[v40];
      v43 = v42[8];
      *(_QWORD *)v41 = *(_QWORD *)v42;
      v41[8] = v43;
      v44 = v17[7];
      v45 = &v15[v44];
      v46 = &v16[v44];
      v47 = v46[8];
      *(_QWORD *)v45 = *(_QWORD *)v46;
      v45[8] = v47;
      goto LABEL_7;
    }
    sub_100004030((uint64_t)v15, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    v34 = sub_1000039AC(&qword_10036E458);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v16, v11);
  v22 = v17[5];
  v23 = &v15[v22];
  v24 = &v16[v22];
  v25 = v24[8];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v23[8] = v25;
  v26 = v17[6];
  v27 = &v15[v26];
  v28 = &v16[v26];
  v29 = v28[8];
  *(_QWORD *)v27 = *(_QWORD *)v28;
  v27[8] = v29;
  v30 = v17[7];
  v31 = &v15[v30];
  v32 = &v16[v30];
  v33 = v32[8];
  *(_QWORD *)v31 = *(_QWORD *)v32;
  v31[8] = v33;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v18 + 56))(v15, 0, 1, v17);
LABEL_7:
  *((_BYTE *)a1 + *(int *)(v48 + 28)) = *((_BYTE *)v49 + *(int *)(v48 + 28));
  return a1;
}

_QWORD *sub_100144EB4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v15 = *((_QWORD *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_1000039AC(&qword_10036E458);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v10(v12, v13, v9);
    v17 = v14[5];
    v18 = &v12[v17];
    v19 = &v13[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v14[6];
    v21 = &v12[v20];
    v22 = &v13[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    v23 = v14[7];
    v24 = &v12[v23];
    v25 = &v13[v23];
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v24[8] = v25[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  return a1;
}

_QWORD *sub_100145014(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t (*v18)(char *, uint64_t, int *);
  int v19;
  int v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(char *, char *, uint64_t))(v11 + 40);
  v12(v8, v9, v10);
  v41 = a3;
  v42 = a2;
  v13 = *(int *)(a3 + 24);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v17 = *((_QWORD *)v16 - 1);
  v18 = *(uint64_t (**)(char *, uint64_t, int *))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (!v19)
  {
    if (!v20)
    {
      v12(v14, v15, v10);
      v32 = v16[5];
      v33 = &v14[v32];
      v34 = &v15[v32];
      *(_QWORD *)v33 = *(_QWORD *)v34;
      v33[8] = v34[8];
      v35 = v16[6];
      v36 = &v14[v35];
      v37 = &v15[v35];
      *(_QWORD *)v36 = *(_QWORD *)v37;
      v36[8] = v37[8];
      v38 = v16[7];
      v39 = &v14[v38];
      v40 = &v15[v38];
      *(_QWORD *)v39 = *(_QWORD *)v40;
      v39[8] = v40[8];
      goto LABEL_7;
    }
    sub_100004030((uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  if (v20)
  {
LABEL_6:
    v30 = sub_1000039AC(&qword_10036E458);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v15, v10);
  v21 = v16[5];
  v22 = &v14[v21];
  v23 = &v15[v21];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v23[8];
  v24 = v16[6];
  v25 = &v14[v24];
  v26 = &v15[v24];
  *(_QWORD *)v25 = *(_QWORD *)v26;
  v25[8] = v26[8];
  v27 = v16[7];
  v28 = &v14[v27];
  v29 = &v15[v27];
  *(_QWORD *)v28 = *(_QWORD *)v29;
  v28[8] = v29[8];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
LABEL_7:
  *((_BYTE *)a1 + *(int *)(v41 + 28)) = *((_BYTE *)v42 + *(int *)(v41 + 28));
  return a1;
}

uint64_t sub_100145224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100145230);
}

uint64_t sub_100145234(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = sub_1000039AC(&qword_10036E458);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t sub_1001452D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001452E4);
}

char *sub_1001452E8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_1000039AC(&qword_10036E458);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void sub_100145388(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  v6[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2 = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001198C(319, (unint64_t *)&unk_10036FA60, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      v6[3] = &unk_1002D7C78;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

_QWORD *sub_100145434(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v9);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 24);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
    *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
  }
  return a1;
}

uint64_t sub_1001454C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  return a1;
}

uint64_t sub_100145528(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_100145590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  return a1;
}

uint64_t sub_1001455F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  return a1;
}

uint64_t sub_100145658(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100145664);
}

uint64_t sub_100145664(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) <= 4u)
    v9 = 4;
  else
    v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  v10 = v9 - 4;
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) >= 4u)
    return v10;
  else
    return 0;
}

uint64_t sub_1001456E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001456F4);
}

uint64_t sub_1001456F4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 4;
  return result;
}

uint64_t sub_10014576C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000780DC(a1, a2, a3, (uint64_t)&unk_1002D7E08, (uint64_t)&unk_1002D7E08);
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType()
{
  return &type metadata for CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType;
}

char *sub_10014578C(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v13 = *((_QWORD *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      v14 = sub_1000039AC(&qword_10036E458);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v8(v10, v11, v7);
      v16 = v12[5];
      v17 = &v10[v16];
      v18 = &v11[v16];
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v17[8] = v18[8];
      v19 = v12[6];
      v20 = &v10[v19];
      v21 = &v11[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v12[7];
      v23 = &v10[v22];
      v24 = &v11[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    v25 = a3[7];
    a1[a3[6]] = a2[a3[6]];
    a1[v25] = a2[v25];
    v26 = a3[9];
    a1[a3[8]] = a2[a3[8]];
    a1[v26] = a2[v26];
    v27 = a3[11];
    a1[a3[10]] = a2[a3[10]];
    a1[v27] = a2[v27];
  }
  return a1;
}

uint64_t sub_100145934(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_1000039AC(&qword_10036E458);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v23) = *(_BYTE *)(a2 + v23);
  v24 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v24) = *(_BYTE *)(a2 + v24);
  v25 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v25) = *(_BYTE *)(a2 + v25);
  return a1;
}

uint64_t sub_100145AB0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t (*v13)(uint64_t, uint64_t, int *);
  int v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char v40;
  uint64_t v42;
  uint64_t v43;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = a1 + v9;
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v42 = *((_QWORD *)v12 - 1);
  v43 = v10;
  v13 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v42 + 48);
  LODWORD(v10) = v13(v10, 1, v12);
  v14 = v13((uint64_t)v11, 1, v12);
  if ((_DWORD)v10)
  {
    if (!v14)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v7 + 16))(v43, v11, v6);
      v17 = v12[5];
      v18 = v43 + v17;
      v19 = &v11[v17];
      v20 = v19[8];
      *(_QWORD *)v18 = *(_QWORD *)v19;
      *(_BYTE *)(v18 + 8) = v20;
      v21 = v12[6];
      v22 = v43 + v21;
      v23 = &v11[v21];
      v24 = v23[8];
      *(_QWORD *)v22 = *(_QWORD *)v23;
      *(_BYTE *)(v22 + 8) = v24;
      v25 = v12[7];
      v26 = v43 + v25;
      v27 = &v11[v25];
      v28 = v27[8];
      *(_QWORD *)v26 = *(_QWORD *)v27;
      *(_BYTE *)(v26 + 8) = v28;
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v42 + 56))(v43, 0, 1, v12);
      goto LABEL_9;
    }
    v15 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036E458) - 8) + 64);
    v16 = (void *)v43;
  }
  else
  {
    if (!v14)
    {
      v8(v43, (uint64_t)v11, v6);
      v29 = v12[5];
      v30 = v43 + v29;
      v31 = &v11[v29];
      v32 = v31[8];
      *(_QWORD *)v30 = *(_QWORD *)v31;
      *(_BYTE *)(v30 + 8) = v32;
      v33 = v12[6];
      v34 = v43 + v33;
      v35 = &v11[v33];
      v36 = v35[8];
      *(_QWORD *)v34 = *(_QWORD *)v35;
      *(_BYTE *)(v34 + 8) = v36;
      v37 = v12[7];
      v38 = v43 + v37;
      v39 = &v11[v37];
      v40 = v39[8];
      *(_QWORD *)v38 = *(_QWORD *)v39;
      *(_BYTE *)(v38 + 8) = v40;
      goto LABEL_9;
    }
    sub_100004030(v43, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    v15 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036E458) - 8) + 64);
    v16 = (void *)v43;
  }
  memcpy(v16, v11, v15);
LABEL_9:
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  return a1;
}

uint64_t sub_100145D0C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_1000039AC(&qword_10036E458);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v23) = *(_BYTE *)(a2 + v23);
  v24 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v24) = *(_BYTE *)(a2 + v24);
  v25 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v25) = *(_BYTE *)(a2 + v25);
  return a1;
}

uint64_t sub_100145E88(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t (*v13)(uint64_t, uint64_t, int *);
  int v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = a1 + v9;
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v39 = *((_QWORD *)v12 - 1);
  v40 = v10;
  v13 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v39 + 48);
  LODWORD(v10) = v13(v10, 1, v12);
  v14 = v13((uint64_t)v11, 1, v12);
  if ((_DWORD)v10)
  {
    if (!v14)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v40, v11, v6);
      v17 = v12[5];
      v18 = v40 + v17;
      v19 = &v11[v17];
      *(_QWORD *)v18 = *(_QWORD *)v19;
      *(_BYTE *)(v18 + 8) = v19[8];
      v20 = v12[6];
      v21 = v40 + v20;
      v22 = &v11[v20];
      *(_QWORD *)v21 = *(_QWORD *)v22;
      *(_BYTE *)(v21 + 8) = v22[8];
      v23 = v12[7];
      v24 = v40 + v23;
      v25 = &v11[v23];
      *(_QWORD *)v24 = *(_QWORD *)v25;
      *(_BYTE *)(v24 + 8) = v25[8];
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v39 + 56))(v40, 0, 1, v12);
      goto LABEL_9;
    }
    v15 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036E458) - 8) + 64);
    v16 = (void *)v40;
  }
  else
  {
    if (!v14)
    {
      v8(v40, (uint64_t)v11, v6);
      v26 = v12[5];
      v27 = v40 + v26;
      v28 = &v11[v26];
      *(_QWORD *)v27 = *(_QWORD *)v28;
      *(_BYTE *)(v27 + 8) = v28[8];
      v29 = v12[6];
      v30 = v40 + v29;
      v31 = &v11[v29];
      *(_QWORD *)v30 = *(_QWORD *)v31;
      *(_BYTE *)(v30 + 8) = v31[8];
      v32 = v12[7];
      v33 = v40 + v32;
      v34 = &v11[v32];
      *(_QWORD *)v33 = *(_QWORD *)v34;
      *(_BYTE *)(v33 + 8) = v34[8];
      goto LABEL_9;
    }
    sub_100004030(v40, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    v15 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036E458) - 8) + 64);
    v16 = (void *)v40;
  }
  memcpy(v16, v11, v15);
LABEL_9:
  v35 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v35) = *(_BYTE *)(a2 + v35);
  v36 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v36) = *(_BYTE *)(a2 + v36);
  v37 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v37) = *(_BYTE *)(a2 + v37);
  return a1;
}

uint64_t sub_1001460D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001460E4);
}

uint64_t sub_1001460E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  int v15;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_1000039AC(&qword_10036E458);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 36));
  if (v14 >= 2)
    v15 = ((v14 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v15 = -2;
  if (v15 < 0)
    v15 = -1;
  return (v15 + 1);
}

uint64_t sub_1001461B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001461BC);
}

uint64_t sub_1001461C0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = sub_1000039AC(&qword_10036E458);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 36)) = a2 + 2;
  return result;
}

void sub_100146268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100146280(a1, a2, a3, (uint64_t)&unk_1002D7E08, (uint64_t)&unk_1002D7E08, (uint64_t)&unk_1002D7C78);
}

void sub_100146280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[8];

  v10 = type metadata accessor for UnknownStorage(319);
  if (v11 <= 0x3F)
  {
    v14[0] = *(_QWORD *)(v10 - 8) + 64;
    sub_10001198C(319, (unint64_t *)&unk_10036FA60, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v13 <= 0x3F)
    {
      v14[1] = *(_QWORD *)(v12 - 8) + 64;
      v14[2] = a4;
      v14[3] = a4;
      v14[4] = a5;
      v14[5] = a6;
      v14[6] = a6;
      v14[7] = a6;
      swift_initStructMetadata(a1, 256, 8, v14, a1 + 16);
    }
  }
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_WristState.WristStateType()
{
  return &type metadata for CLP_LogEntry_PrivateData_WristState.WristStateType;
}

uint64_t _s10ALProtobuf35CLP_LogEntry_PrivateData_WifiRfBandOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100146390 + 4 * byte_1002CAF97[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1001463C4 + 4 * byte_1002CAF92[v4]))();
}

uint64_t sub_1001463C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001463CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001463D4);
  return result;
}

uint64_t sub_1001463E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001463E8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1001463EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001463F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType()
{
  return &type metadata for CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType;
}

uint64_t *sub_100146410(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v54;
  unsigned int (*v55)(char *, uint64_t, int *);

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v13 = *((_QWORD *)v12 - 1);
    v55 = *(unsigned int (**)(char *, uint64_t, int *))(v13 + 48);
    v54 = v13;
    if (v55(v11, 1, v12))
    {
      v14 = sub_1000039AC(&qword_10036E458);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      v16 = v12[5];
      v17 = &v10[v16];
      v18 = &v11[v16];
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v17[8] = v18[8];
      v19 = v12[6];
      v20 = &v10[v19];
      v21 = &v11[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v12[7];
      v23 = &v10[v22];
      v24 = &v11[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    v25 = a3[6];
    v26 = a3[7];
    v27 = (char *)a1 + v25;
    v28 = (char *)a2 + v25;
    *(_DWORD *)v27 = *(_DWORD *)v28;
    v27[4] = v28[4];
    v29 = (char *)a1 + v26;
    v30 = (char *)a2 + v26;
    v31 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
    v32 = *(_QWORD *)(v31 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
    {
      v33 = sub_1000039AC(&qword_10036E580);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v29, (uint64_t *)v30, v7);
      v29[*(int *)(v31 + 20)] = v30[*(int *)(v31 + 20)];
      v29[*(int *)(v31 + 24)] = v30[*(int *)(v31 + 24)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
    }
    v34 = a3[8];
    v35 = (char *)a1 + v34;
    v36 = (char *)a2 + v34;
    v37 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
    v38 = *((_QWORD *)v37 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v38 + 48))(v36, 1, v37))
    {
      v39 = sub_1000039AC(&qword_10036E588);
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v35, (uint64_t *)v36, v7);
      v40 = v37[5];
      v41 = &v35[v40];
      v42 = &v36[v40];
      if (v55(&v36[v40], 1, v12))
      {
        v43 = sub_1000039AC(&qword_10036E458);
        memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
      }
      else
      {
        v8((uint64_t *)v41, (uint64_t *)v42, v7);
        v44 = v12[5];
        v45 = &v41[v44];
        v46 = &v42[v44];
        *(_QWORD *)v45 = *(_QWORD *)v46;
        v45[8] = v46[8];
        v47 = v12[6];
        v48 = &v41[v47];
        v49 = &v42[v47];
        *(_QWORD *)v48 = *(_QWORD *)v49;
        v48[8] = v49[8];
        v50 = v12[7];
        v51 = &v41[v50];
        v52 = &v42[v50];
        *(_QWORD *)v51 = *(_QWORD *)v52;
        v51[8] = v52[8];
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v54 + 56))(v41, 0, 1, v12);
      }
      v35[v37[6]] = v36[v37[6]];
      v35[v37[7]] = v36[v37[7]];
      v35[v37[8]] = v36[v37[8]];
      v35[v37[9]] = v36[v37[9]];
      v35[v37[10]] = v36[v37[10]];
      v35[v37[11]] = v36[v37[11]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v38 + 56))(v35, 0, 1, v37);
    }
  }
  return a1;
}

uint64_t sub_1001467CC(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage(0);
  v14 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v14(a1, v4);
  v5 = a1 + a2[5];
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48);
  if (!v7(v5, 1, v6))
    v14(v5, v4);
  v8 = a1 + a2[7];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
    v14(v8, v4);
  v10 = a1 + a2[8];
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11);
  if (!(_DWORD)result)
  {
    v14(v10, v4);
    v13 = v10 + *(int *)(v11 + 20);
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v7)(v13, 1, v6);
    if (!(_DWORD)result)
      return ((uint64_t (*)(uint64_t, uint64_t))v14)(v13, v4);
  }
  return result;
}

uint64_t sub_100146924(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v52;
  unsigned int (*v53)(char *, uint64_t, int *);

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  v53 = *(unsigned int (**)(char *, uint64_t, int *))(v12 + 48);
  v52 = v12;
  if (v53(v10, 1, v11))
  {
    v13 = sub_1000039AC(&qword_10036E458);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[6];
  v24 = a3[7];
  v25 = a1 + v23;
  v26 = a2 + v23;
  *(_DWORD *)v25 = *(_DWORD *)v26;
  *(_BYTE *)(v25 + 4) = *(_BYTE *)(v26 + 4);
  v27 = (void *)(a1 + v24);
  v28 = (const void *)(a2 + v24);
  v29 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  v30 = *(_QWORD *)(v29 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
  {
    v31 = sub_1000039AC(&qword_10036E580);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v27, (uint64_t)v28, v6);
    *((_BYTE *)v27 + *(int *)(v29 + 20)) = *((_BYTE *)v28 + *(int *)(v29 + 20));
    *((_BYTE *)v27 + *(int *)(v29 + 24)) = *((_BYTE *)v28 + *(int *)(v29 + 24));
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  }
  v32 = a3[8];
  v33 = (char *)(a1 + v32);
  v34 = (char *)(a2 + v32);
  v35 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  v36 = *((_QWORD *)v35 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v36 + 48))(v34, 1, v35))
  {
    v37 = sub_1000039AC(&qword_10036E588);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v33, (uint64_t)v34, v6);
    v38 = v35[5];
    v39 = &v33[v38];
    v40 = &v34[v38];
    if (v53(&v34[v38], 1, v11))
    {
      v41 = sub_1000039AC(&qword_10036E458);
      memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    }
    else
    {
      v7((uint64_t)v39, (uint64_t)v40, v6);
      v42 = v11[5];
      v43 = &v39[v42];
      v44 = &v40[v42];
      *(_QWORD *)v43 = *(_QWORD *)v44;
      v43[8] = v44[8];
      v45 = v11[6];
      v46 = &v39[v45];
      v47 = &v40[v45];
      *(_QWORD *)v46 = *(_QWORD *)v47;
      v46[8] = v47[8];
      v48 = v11[7];
      v49 = &v39[v48];
      v50 = &v40[v48];
      *(_QWORD *)v49 = *(_QWORD *)v50;
      v49[8] = v50[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v52 + 56))(v39, 0, 1, v11);
    }
    v33[v35[6]] = v34[v35[6]];
    v33[v35[7]] = v34[v35[7]];
    v33[v35[8]] = v34[v35[8]];
    v33[v35[9]] = v34[v35[9]];
    v33[v35[10]] = v34[v35[10]];
    v33[v35[11]] = v34[v35[11]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v36 + 56))(v33, 0, 1, v35);
  }
  return a1;
}

uint64_t sub_100146CB4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, int *);
  int v14;
  int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  int v33;
  uint64_t v34;
  _BYTE *v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(_BYTE *, uint64_t, uint64_t);
  int v40;
  int v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  _BYTE *v45;
  _BYTE *v46;
  int *v47;
  uint64_t v48;
  uint64_t (*v49)(_BYTE *, uint64_t, int *);
  int v50;
  int v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char v69;
  uint64_t v70;
  char *v71;
  char *v72;
  int v73;
  int v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char v90;
  uint64_t v91;
  char *v92;
  char *v93;
  char v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char v98;
  uint64_t v99;
  uint64_t v101;
  char *v102;
  char *v103;
  char v104;
  uint64_t v105;
  char *v106;
  char *v107;
  char v108;
  uint64_t v109;
  char *v110;
  char *v111;
  char v112;
  uint64_t v113;
  uint64_t (*v114)(char *, uint64_t, int *);
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void (*v118)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v118 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v118(a1, a2, v6);
  v8 = a3[5];
  v117 = a1;
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  v13 = *(uint64_t (**)(char *, uint64_t, int *))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v114 = v13;
  v15 = v13(v10, 1, v11);
  v113 = v12;
  v115 = v7;
  v116 = v6;
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v10, v6);
      v16 = v11[5];
      v17 = &v9[v16];
      v18 = &v10[v16];
      v19 = v18[8];
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v17[8] = v19;
      v20 = v11[6];
      v21 = &v9[v20];
      v22 = &v10[v20];
      v23 = v22[8];
      *(_QWORD *)v21 = *(_QWORD *)v22;
      v21[8] = v23;
      v24 = v11[7];
      v25 = &v9[v24];
      v26 = &v10[v24];
      v27 = v26[8];
      *(_QWORD *)v25 = *(_QWORD *)v26;
      v25[8] = v27;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    sub_100004030((uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    v28 = sub_1000039AC(&qword_10036E458);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  v118((uint64_t)v9, (uint64_t)v10, v6);
  v58 = v11[5];
  v59 = &v9[v58];
  v60 = &v10[v58];
  v61 = v60[8];
  *(_QWORD *)v59 = *(_QWORD *)v60;
  v59[8] = v61;
  v62 = v11[6];
  v63 = &v9[v62];
  v64 = &v10[v62];
  v65 = v64[8];
  *(_QWORD *)v63 = *(_QWORD *)v64;
  v63[8] = v65;
  v66 = v11[7];
  v67 = &v9[v66];
  v68 = &v10[v66];
  v69 = v68[8];
  *(_QWORD *)v67 = *(_QWORD *)v68;
  v67[8] = v69;
LABEL_7:
  v29 = v117;
  v30 = a3[6];
  v31 = v117 + v30;
  v32 = (int *)(a2 + v30);
  v33 = *v32;
  *(_BYTE *)(v31 + 4) = *((_BYTE *)v32 + 4);
  *(_DWORD *)v31 = v33;
  v34 = a3[7];
  v35 = (_BYTE *)(v117 + v34);
  v36 = (_BYTE *)(a2 + v34);
  v37 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  v38 = *(_QWORD *)(v37 - 8);
  v39 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v38 + 48);
  v40 = v39(v35, 1, v37);
  v41 = v39(v36, 1, v37);
  if (v40)
  {
    if (!v41)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v115 + 16))(v35, v36, v116);
      v35[*(int *)(v37 + 20)] = v36[*(int *)(v37 + 20)];
      v35[*(int *)(v37 + 24)] = v36[*(int *)(v37 + 24)];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
LABEL_13:
      v43 = v118;
      goto LABEL_14;
    }
LABEL_12:
    v42 = sub_1000039AC(&qword_10036E580);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    goto LABEL_13;
  }
  if (v41)
  {
    sub_100004030((uint64_t)v35, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
    goto LABEL_12;
  }
  v43 = v118;
  v118((uint64_t)v35, (uint64_t)v36, v116);
  v35[*(int *)(v37 + 20)] = v36[*(int *)(v37 + 20)];
  v35[*(int *)(v37 + 24)] = v36[*(int *)(v37 + 24)];
LABEL_14:
  v44 = a3[8];
  v45 = (_BYTE *)(v117 + v44);
  v46 = (_BYTE *)(a2 + v44);
  v47 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  v48 = *((_QWORD *)v47 - 1);
  v49 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v48 + 48);
  v50 = v49(v45, 1, v47);
  v51 = v49(v46, 1, v47);
  if (!v50)
  {
    if (v51)
    {
      sub_100004030((uint64_t)v45, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
      goto LABEL_20;
    }
    v43((uint64_t)v45, (uint64_t)v46, v116);
    v70 = v47[5];
    v71 = &v45[v70];
    v72 = &v46[v70];
    v73 = v114(&v45[v70], 1, v11);
    v74 = v114(v72, 1, v11);
    if (v73)
    {
      if (!v74)
      {
        (*(void (**)(char *, char *, uint64_t))(v115 + 16))(v71, v72, v116);
        v75 = v11[5];
        v76 = &v71[v75];
        v77 = &v72[v75];
        v78 = v77[8];
        *(_QWORD *)v76 = *(_QWORD *)v77;
        v76[8] = v78;
        v79 = v11[6];
        v80 = &v71[v79];
        v81 = &v72[v79];
        v82 = v81[8];
        *(_QWORD *)v80 = *(_QWORD *)v81;
        v80[8] = v82;
        v83 = v11[7];
        v84 = &v71[v83];
        v85 = &v72[v83];
        v86 = v85[8];
        *(_QWORD *)v84 = *(_QWORD *)v85;
        v84[8] = v86;
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v113 + 56))(v71, 0, 1, v11);
LABEL_31:
        v29 = v117;
        v45[v47[6]] = v46[v47[6]];
        v45[v47[7]] = v46[v47[7]];
        v45[v47[8]] = v46[v47[8]];
        v45[v47[9]] = v46[v47[9]];
        v45[v47[10]] = v46[v47[10]];
        v45[v47[11]] = v46[v47[11]];
        return v29;
      }
    }
    else
    {
      if (!v74)
      {
        v43((uint64_t)v71, (uint64_t)v72, v116);
        v101 = v11[5];
        v102 = &v71[v101];
        v103 = &v72[v101];
        v104 = v103[8];
        *(_QWORD *)v102 = *(_QWORD *)v103;
        v102[8] = v104;
        v105 = v11[6];
        v106 = &v71[v105];
        v107 = &v72[v105];
        v108 = v107[8];
        *(_QWORD *)v106 = *(_QWORD *)v107;
        v106[8] = v108;
        v109 = v11[7];
        v110 = &v71[v109];
        v111 = &v72[v109];
        v112 = v111[8];
        *(_QWORD *)v110 = *(_QWORD *)v111;
        v110[8] = v112;
        goto LABEL_31;
      }
      sub_100004030((uint64_t)v71, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    }
    v99 = sub_1000039AC(&qword_10036E458);
    memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
    goto LABEL_31;
  }
  if (v51)
  {
LABEL_20:
    v57 = sub_1000039AC(&qword_10036E588);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    return v29;
  }
  v52 = *(void (**)(char *, char *, uint64_t))(v115 + 16);
  v52(v45, v46, v116);
  v53 = v47[5];
  v54 = &v45[v53];
  v55 = &v46[v53];
  if (v114(&v46[v53], 1, v11))
  {
    v56 = sub_1000039AC(&qword_10036E458);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
  }
  else
  {
    v52(v54, v55, v116);
    v87 = v11[5];
    v88 = &v54[v87];
    v89 = &v55[v87];
    v90 = v89[8];
    *(_QWORD *)v88 = *(_QWORD *)v89;
    v88[8] = v90;
    v91 = v11[6];
    v92 = &v54[v91];
    v93 = &v55[v91];
    v94 = v93[8];
    *(_QWORD *)v92 = *(_QWORD *)v93;
    v92[8] = v94;
    v95 = v11[7];
    v96 = &v54[v95];
    v97 = &v55[v95];
    v98 = v97[8];
    *(_QWORD *)v96 = *(_QWORD *)v97;
    v96[8] = v98;
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v113 + 56))(v54, 0, 1, v11);
  }
  v45[v47[6]] = v46[v47[6]];
  v45[v47[7]] = v46[v47[7]];
  v45[v47[8]] = v46[v47[8]];
  v45[v47[9]] = v46[v47[9]];
  v45[v47[10]] = v46[v47[10]];
  v45[v47[11]] = v46[v47[11]];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v48 + 56))(v45, 0, 1, v47);
  return v29;
}

uint64_t sub_100147354(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v52;
  unsigned int (*v53)(char *, uint64_t, int *);

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  v53 = *(unsigned int (**)(char *, uint64_t, int *))(v12 + 48);
  v52 = v12;
  if (v53(v10, 1, v11))
  {
    v13 = sub_1000039AC(&qword_10036E458);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[6];
  v24 = a3[7];
  v25 = a1 + v23;
  v26 = a2 + v23;
  *(_DWORD *)v25 = *(_DWORD *)v26;
  *(_BYTE *)(v25 + 4) = *(_BYTE *)(v26 + 4);
  v27 = (void *)(a1 + v24);
  v28 = (const void *)(a2 + v24);
  v29 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  v30 = *(_QWORD *)(v29 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
  {
    v31 = sub_1000039AC(&qword_10036E580);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v27, (uint64_t)v28, v6);
    *((_BYTE *)v27 + *(int *)(v29 + 20)) = *((_BYTE *)v28 + *(int *)(v29 + 20));
    *((_BYTE *)v27 + *(int *)(v29 + 24)) = *((_BYTE *)v28 + *(int *)(v29 + 24));
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  }
  v32 = a3[8];
  v33 = (char *)(a1 + v32);
  v34 = (char *)(a2 + v32);
  v35 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  v36 = *((_QWORD *)v35 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v36 + 48))(v34, 1, v35))
  {
    v37 = sub_1000039AC(&qword_10036E588);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v33, (uint64_t)v34, v6);
    v38 = v35[5];
    v39 = &v33[v38];
    v40 = &v34[v38];
    if (v53(&v34[v38], 1, v11))
    {
      v41 = sub_1000039AC(&qword_10036E458);
      memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    }
    else
    {
      v7((uint64_t)v39, (uint64_t)v40, v6);
      v42 = v11[5];
      v43 = &v39[v42];
      v44 = &v40[v42];
      *(_QWORD *)v43 = *(_QWORD *)v44;
      v43[8] = v44[8];
      v45 = v11[6];
      v46 = &v39[v45];
      v47 = &v40[v45];
      *(_QWORD *)v46 = *(_QWORD *)v47;
      v46[8] = v47[8];
      v48 = v11[7];
      v49 = &v39[v48];
      v50 = &v40[v48];
      *(_QWORD *)v49 = *(_QWORD *)v50;
      v49[8] = v50[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v52 + 56))(v39, 0, 1, v11);
    }
    v33[v35[6]] = v34[v35[6]];
    v33[v35[7]] = v34[v35[7]];
    v33[v35[8]] = v34[v35[8]];
    v33[v35[9]] = v34[v35[9]];
    v33[v35[10]] = v34[v35[10]];
    v33[v35[11]] = v34[v35[11]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v36 + 56))(v33, 0, 1, v35);
  }
  return a1;
}

uint64_t sub_1001476E4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, int *);
  int v14;
  int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(_BYTE *, uint64_t, uint64_t);
  int v36;
  int v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  int *v43;
  uint64_t v44;
  uint64_t (*v45)(_BYTE *, uint64_t, int *);
  int v46;
  int v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  int v66;
  int v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t (*v98)(char *, uint64_t, int *);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v102 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v102(a1, a2, v6);
  v8 = a3[5];
  v101 = a1;
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  v13 = *(uint64_t (**)(char *, uint64_t, int *))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v98 = v13;
  v15 = v13(v10, 1, v11);
  v97 = v12;
  v99 = v7;
  v100 = v6;
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v10, v6);
      v16 = v11[5];
      v17 = &v9[v16];
      v18 = &v10[v16];
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v17[8] = v18[8];
      v19 = v11[6];
      v20 = &v9[v19];
      v21 = &v10[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v11[7];
      v23 = &v9[v22];
      v24 = &v10[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    sub_100004030((uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    v25 = sub_1000039AC(&qword_10036E458);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  v102((uint64_t)v9, (uint64_t)v10, v6);
  v54 = v11[5];
  v55 = &v9[v54];
  v56 = &v10[v54];
  *(_QWORD *)v55 = *(_QWORD *)v56;
  v55[8] = v56[8];
  v57 = v11[6];
  v58 = &v9[v57];
  v59 = &v10[v57];
  *(_QWORD *)v58 = *(_QWORD *)v59;
  v58[8] = v59[8];
  v60 = v11[7];
  v61 = &v9[v60];
  v62 = &v10[v60];
  *(_QWORD *)v61 = *(_QWORD *)v62;
  v61[8] = v62[8];
LABEL_7:
  v26 = v101;
  v27 = a3[6];
  v28 = a3[7];
  v29 = v101 + v27;
  v30 = a2 + v27;
  *(_DWORD *)v29 = *(_DWORD *)v30;
  *(_BYTE *)(v29 + 4) = *(_BYTE *)(v30 + 4);
  v31 = (_BYTE *)(v101 + v28);
  v32 = (_BYTE *)(a2 + v28);
  v33 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v34 + 48);
  v36 = v35(v31, 1, v33);
  v37 = v35(v32, 1, v33);
  if (v36)
  {
    if (!v37)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v99 + 32))(v31, v32, v100);
      v31[*(int *)(v33 + 20)] = v32[*(int *)(v33 + 20)];
      v31[*(int *)(v33 + 24)] = v32[*(int *)(v33 + 24)];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
LABEL_13:
      v39 = v102;
      goto LABEL_14;
    }
LABEL_12:
    v38 = sub_1000039AC(&qword_10036E580);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    goto LABEL_13;
  }
  if (v37)
  {
    sub_100004030((uint64_t)v31, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
    goto LABEL_12;
  }
  v39 = v102;
  v102((uint64_t)v31, (uint64_t)v32, v100);
  v31[*(int *)(v33 + 20)] = v32[*(int *)(v33 + 20)];
  v31[*(int *)(v33 + 24)] = v32[*(int *)(v33 + 24)];
LABEL_14:
  v40 = a3[8];
  v41 = (_BYTE *)(v101 + v40);
  v42 = (_BYTE *)(a2 + v40);
  v43 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  v44 = *((_QWORD *)v43 - 1);
  v45 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v44 + 48);
  v46 = v45(v41, 1, v43);
  v47 = v45(v42, 1, v43);
  if (!v46)
  {
    if (v47)
    {
      sub_100004030((uint64_t)v41, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
      goto LABEL_20;
    }
    v39((uint64_t)v41, (uint64_t)v42, v100);
    v63 = v43[5];
    v64 = &v41[v63];
    v65 = &v42[v63];
    v66 = v98(&v41[v63], 1, v11);
    v67 = v98(v65, 1, v11);
    if (v66)
    {
      if (!v67)
      {
        (*(void (**)(char *, char *, uint64_t))(v99 + 32))(v64, v65, v100);
        v68 = v11[5];
        v69 = &v64[v68];
        v70 = &v65[v68];
        *(_QWORD *)v69 = *(_QWORD *)v70;
        v69[8] = v70[8];
        v71 = v11[6];
        v72 = &v64[v71];
        v73 = &v65[v71];
        *(_QWORD *)v72 = *(_QWORD *)v73;
        v72[8] = v73[8];
        v74 = v11[7];
        v75 = &v64[v74];
        v76 = &v65[v74];
        *(_QWORD *)v75 = *(_QWORD *)v76;
        v75[8] = v76[8];
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v97 + 56))(v64, 0, 1, v11);
LABEL_31:
        v26 = v101;
        v41[v43[6]] = v42[v43[6]];
        v41[v43[7]] = v42[v43[7]];
        v41[v43[8]] = v42[v43[8]];
        v41[v43[9]] = v42[v43[9]];
        v41[v43[10]] = v42[v43[10]];
        v41[v43[11]] = v42[v43[11]];
        return v26;
      }
    }
    else
    {
      if (!v67)
      {
        v39((uint64_t)v64, (uint64_t)v65, v100);
        v88 = v11[5];
        v89 = &v64[v88];
        v90 = &v65[v88];
        *(_QWORD *)v89 = *(_QWORD *)v90;
        v89[8] = v90[8];
        v91 = v11[6];
        v92 = &v64[v91];
        v93 = &v65[v91];
        *(_QWORD *)v92 = *(_QWORD *)v93;
        v92[8] = v93[8];
        v94 = v11[7];
        v95 = &v64[v94];
        v96 = &v65[v94];
        *(_QWORD *)v95 = *(_QWORD *)v96;
        v95[8] = v96[8];
        goto LABEL_31;
      }
      sub_100004030((uint64_t)v64, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    }
    v86 = sub_1000039AC(&qword_10036E458);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
    goto LABEL_31;
  }
  if (v47)
  {
LABEL_20:
    v53 = sub_1000039AC(&qword_10036E588);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    return v26;
  }
  v48 = *(void (**)(char *, char *, uint64_t))(v99 + 32);
  v48(v41, v42, v100);
  v49 = v43[5];
  v50 = &v41[v49];
  v51 = &v42[v49];
  if (v98(&v42[v49], 1, v11))
  {
    v52 = sub_1000039AC(&qword_10036E458);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
  }
  else
  {
    v48(v50, v51, v100);
    v77 = v11[5];
    v78 = &v50[v77];
    v79 = &v51[v77];
    *(_QWORD *)v78 = *(_QWORD *)v79;
    v78[8] = v79[8];
    v80 = v11[6];
    v81 = &v50[v80];
    v82 = &v51[v80];
    *(_QWORD *)v81 = *(_QWORD *)v82;
    v81[8] = v82[8];
    v83 = v11[7];
    v84 = &v50[v83];
    v85 = &v51[v83];
    *(_QWORD *)v84 = *(_QWORD *)v85;
    v84[8] = v85[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v97 + 56))(v50, 0, 1, v11);
  }
  v41[v43[6]] = v42[v43[6]];
  v41[v43[7]] = v42[v43[7]];
  v41[v43[8]] = v42[v43[8]];
  v41[v43[9]] = v42[v43[9]];
  v41[v43[10]] = v42[v43[10]];
  v41[v43[11]] = v42[v43[11]];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v44 + 56))(v41, 0, 1, v43);
  return v26;
}

uint64_t sub_100147D80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100147D8C);
}

uint64_t sub_100147D8C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_1000039AC(&qword_10036E458);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_1000039AC(&qword_10036E580);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[7];
      }
      else
      {
        v8 = sub_1000039AC(&qword_10036E588);
        v12 = *(_QWORD *)(v8 - 8);
        v13 = a3[8];
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_100147E54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100147E60);
}

uint64_t sub_100147E60(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_1000039AC(&qword_10036E458);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_1000039AC(&qword_10036E580);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[7];
      }
      else
      {
        v10 = sub_1000039AC(&qword_10036E588);
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[8];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_100147F30(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[5];

  v2 = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001198C(319, (unint64_t *)&unk_10036FA60, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      v10[2] = &unk_1002D7AC8;
      sub_10001198C(319, &qword_100372758, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
      if (v7 <= 0x3F)
      {
        v10[3] = *(_QWORD *)(v6 - 8) + 64;
        sub_10001198C(319, (unint64_t *)&unk_100372760, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
        if (v9 <= 0x3F)
        {
          v10[4] = *(_QWORD *)(v8 - 8) + 64;
          swift_initStructMetadata(a1, 256, 5, v10, a1 + 16);
        }
      }
    }
  }
}

_QWORD *sub_100148024(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
    v9 = a3[7];
    v10 = a3[8];
    v11 = (_QWORD *)((char *)a1 + v9);
    v12 = (_QWORD *)((char *)a2 + v9);
    v13 = v12[1];
    *v11 = *v12;
    v11[1] = v13;
    v14 = (_QWORD *)((char *)a1 + v10);
    v15 = (_QWORD *)((char *)a2 + v10);
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v16);
  }
  return a1;
}

uint64_t sub_1001480E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 28) + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 32) + 8));
}

uint64_t sub_10014813C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[7];
  v9 = a3[8];
  v10 = (_QWORD *)(a1 + v8);
  v11 = (_QWORD *)(a2 + v8);
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  v13 = (_QWORD *)(a1 + v9);
  v14 = (_QWORD *)(a2 + v9);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v15);
  return a1;
}

uint64_t sub_1001481D0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  v7 = a3[7];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a3[8];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  *v13 = *v14;
  v15 = v14[1];
  v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  return a1;
}

uint64_t sub_100148290(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  return a1;
}

uint64_t sub_100148308(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[7];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v12 = *v10;
  v11 = v10[1];
  v13 = v9[1];
  *v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease(v13);
  v14 = a3[8];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (uint64_t *)(a2 + v14);
  v18 = *v16;
  v17 = v16[1];
  v19 = v15[1];
  *v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease(v19);
  return a1;
}

uint64_t sub_1001483A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001483B0);
}

uint64_t sub_1001483B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 28) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_10014843C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100148448);
}

uint64_t sub_100148448(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 28) + 8) = a2;
  return result;
}

uint64_t sub_1001484C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001484E4(a1, a2, a3, (uint64_t)&unk_1002D8040, (uint64_t)&unk_1002D8028, (uint64_t)&unk_1002D7F00, (uint64_t)&unk_1002D7F00);
}

uint64_t sub_1001484E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  unint64_t v13;
  _QWORD v14[5];

  result = type metadata accessor for UnknownStorage(319);
  if (v13 <= 0x3F)
  {
    v14[0] = *(_QWORD *)(result - 8) + 64;
    v14[1] = a4;
    v14[2] = a5;
    v14[3] = a6;
    v14[4] = a7;
    swift_initStructMetadata(a1, 256, 5, v14, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t _s10ALProtobuf47CLP_LogEntry_PrivateData_BatchedLocationFixTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1001485C0 + 4 * byte_1002CAFA1[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1001485F4 + 4 * byte_1002CAF9C[v4]))();
}

uint64_t sub_1001485F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001485FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100148604);
  return result;
}

uint64_t sub_100148610(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100148618);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10014861C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100148624(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType()
{
  return &type metadata for CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType()
{
  return &type metadata for CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType;
}

uint64_t sub_100148650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10014865C);
}

uint64_t sub_100148660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10014866C);
}

_QWORD *sub_100148670(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v22);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v10[8] = v11[8];
    v12 = (char *)a1 + v9;
    v13 = (char *)a2 + v9;
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[8] = v13[8];
    v14 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)a1 + v14) = *((_BYTE *)a2 + v14);
    v15 = a3[9];
    v16 = a3[10];
    v17 = (char *)a1 + v15;
    v18 = (char *)a2 + v15;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    v17[8] = v18[8];
    *((_BYTE *)a1 + v16) = *((_BYTE *)a2 + v16);
    v19 = a3[12];
    *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    *(_DWORD *)v20 = *(_DWORD *)v21;
    v20[4] = v21[4];
  }
  return a1;
}

uint64_t sub_10014877C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  v14 = a3[9];
  v15 = a3[10];
  v16 = a1 + v14;
  v17 = a2 + v14;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  v18 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  v19 = a1 + v18;
  v20 = a2 + v18;
  *(_DWORD *)v19 = *(_DWORD *)v20;
  *(_BYTE *)(v19 + 4) = *(_BYTE *)(v20 + 4);
  return a1;
}

uint64_t sub_10014885C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  *(_BYTE *)(v8 + 8) = *((_BYTE *)v9 + 8);
  *(_QWORD *)v8 = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  LOBYTE(v10) = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = v10;
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  v14 = a3[9];
  v15 = a1 + v14;
  v16 = (uint64_t *)(a2 + v14);
  v17 = *v16;
  *(_BYTE *)(v15 + 8) = *((_BYTE *)v16 + 8);
  *(_QWORD *)v15 = v17;
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  v18 = a3[12];
  v19 = a1 + v18;
  v20 = a2 + v18;
  LODWORD(v17) = *(_DWORD *)v20;
  *(_BYTE *)(v19 + 4) = *(_BYTE *)(v20 + 4);
  *(_DWORD *)v19 = v17;
  return a1;
}

uint64_t sub_10014894C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  v14 = a3[9];
  v15 = a3[10];
  v16 = a1 + v14;
  v17 = a2 + v14;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  v18 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  v19 = a1 + v18;
  v20 = a2 + v18;
  *(_DWORD *)v19 = *(_DWORD *)v20;
  *(_BYTE *)(v19 + 4) = *(_BYTE *)(v20 + 4);
  return a1;
}

uint64_t sub_100148A2C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  v14 = a3[9];
  v15 = a3[10];
  v16 = a1 + v14;
  v17 = a2 + v14;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  v18 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  v19 = a1 + v18;
  v20 = a2 + v18;
  *(_DWORD *)v19 = *(_DWORD *)v20;
  *(_BYTE *)(v19 + 4) = *(_BYTE *)(v20 + 4);
  return a1;
}

uint64_t sub_100148B0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100148B18);
}

uint64_t sub_100148B1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  int v10;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 44));
  if (v9 >= 2)
    v10 = ((v9 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v10 = -2;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_100148BB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100148BC0);
}

uint64_t sub_100148BC4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 44)) = a2 + 2;
  return result;
}

uint64_t sub_100148C3C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[9];

  result = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "\t";
    v4[2] = "\t";
    v4[3] = &unk_1002D8028;
    v4[4] = &unk_1002D7E08;
    v4[5] = "\t";
    v4[6] = &unk_1002D7E08;
    v4[7] = &unk_1002D7C78;
    v4[8] = &unk_1002D7AC8;
    swift_initStructMetadata(a1, 256, 9, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100148CDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100148CE8);
}

uint64_t sub_100148CEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100148CF8);
}

uint64_t sub_100148CFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v7;
  _QWORD v8[2];

  result = type metadata accessor for UnknownStorage(319);
  if (v7 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(result - 8) + 64;
    v8[1] = a4;
    swift_initStructMetadata(a1, 256, 2, v8, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t _s10ALProtobuf57CLP_LogEntry_PrivateData_ClientLocationReferenceFrameTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100148DB4 + 4 * byte_1002CAFAB[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100148DE8 + 4 * byte_1002CAFA6[v4]))();
}

uint64_t sub_100148DE8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100148DF0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100148DF8);
  return result;
}

uint64_t sub_100148E04(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100148E0CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100148E10(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100148E18(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame()
{
  return &type metadata for CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame;
}

uint64_t sub_100148E34()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
}

void sub_100148E3C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  void *v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  const char *v8;
  const char *v9;
  const char *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  void *v14;
  const char *v15;
  void *v16;
  uint64_t v17;
  const char *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  const char *v24;
  void *v25;

  v4 = &unk_1002D7E08;
  sub_10001198C(319, (unint64_t *)&unk_1003729F8, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(v2 - 8) + 64;
    v6 = "\t";
    v7 = "\t";
    v8 = "\t";
    v9 = "\t";
    v10 = "\t";
    v11 = "\t";
    v12 = "\t";
    v13 = "\t";
    v14 = &unk_1002D7AC8;
    v15 = "\t";
    v16 = &unk_1002D7E50;
    v17 = v5;
    v18 = "\t";
    v19 = &unk_1002D7AC8;
    v20 = &unk_1002D8040;
    v21 = &unk_1002D8028;
    v22 = &unk_1002D8028;
    v23 = &unk_1002D82D8;
    v24 = "\t";
    v25 = &unk_1002D7C78;
    swift_updateClassMetadata2(a1, 256, 22, &v4, a1 + 80);
  }
}

uint64_t sub_100148F20()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
}

void sub_100148F28(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD v11[56];

  v11[2] = "\t";
  v11[3] = "\t";
  v11[4] = "\t";
  v11[5] = &unk_1002D7AC8;
  v11[6] = &unk_1002D7AC8;
  v11[7] = &unk_1002D7AC8;
  v11[8] = &unk_1002D7C78;
  v11[9] = &unk_1002D7E08;
  sub_10001198C(319, (unint64_t *)&unk_1003729F8, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    v11[10] = v4;
    v11[11] = "\t";
    v11[12] = &unk_1002D7AC8;
    v11[13] = &unk_1002D7AC8;
    v11[14] = &unk_1002D7C78;
    sub_10001198C(319, &qword_100372D60, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
    if (v6 <= 0x3F)
    {
      v11[15] = *(_QWORD *)(v5 - 8) + 64;
      v11[16] = &unk_1002D7E08;
      v11[17] = &unk_1002D7AC8;
      v11[18] = v4;
      v11[19] = "\t";
      v11[20] = "\t";
      v11[21] = &unk_1002D8028;
      v11[22] = &unk_1002D7C78;
      sub_10001198C(319, &qword_100372D68, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
      if (v8 <= 0x3F)
      {
        v11[23] = *(_QWORD *)(v7 - 8) + 64;
        v11[24] = "\t";
        v11[25] = "\t";
        v11[26] = "\t";
        v11[27] = "\t";
        v11[28] = "\t";
        v11[29] = "\t";
        v11[30] = &unk_1002D7C78;
        v11[31] = "\t";
        v11[32] = "\t";
        v11[33] = &unk_1002D7C78;
        v11[34] = v4;
        v11[35] = "\t";
        v11[36] = &unk_1002D8028;
        v11[37] = "\t";
        v11[38] = "\t";
        v11[39] = "\t";
        v11[40] = "\t";
        v11[41] = "\t";
        v11[42] = &unk_1002D7C78;
        v11[43] = "\t";
        v11[44] = "\t";
        v11[45] = (char *)&value witness table for Builtin.BridgeObject + 64;
        v11[46] = &unk_1002D8028;
        sub_10001198C(319, (unint64_t *)&unk_100372D70, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
        if (v10 <= 0x3F)
        {
          v11[47] = *(_QWORD *)(v9 - 8) + 64;
          v11[48] = &unk_1002D8028;
          v11[49] = "\t";
          v11[50] = "\t";
          v11[51] = &unk_1002D7E08;
          v11[52] = &unk_1002D7C78;
          v11[53] = &unk_1002D8028;
          v11[54] = &unk_1002D8040;
          v11[55] = &unk_1002D7C78;
          swift_updateClassMetadata2(a1, 256, 56, v11, a1 + 80);
        }
      }
    }
  }
}

uint64_t sub_1001490D8()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
}

void sub_1001490E0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD v18[13];

  sub_10001198C(319, (unint64_t *)&unk_10036FA60, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  if (v3 <= 0x3F)
  {
    v18[0] = *(_QWORD *)(v2 - 8) + 64;
    v18[1] = &unk_1002D7AC8;
    sub_10001198C(319, &qword_100373518, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
    if (v5 <= 0x3F)
    {
      v18[2] = *(_QWORD *)(v4 - 8) + 64;
      sub_10001198C(319, &qword_100373520, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
      if (v7 <= 0x3F)
      {
        v18[3] = *(_QWORD *)(v6 - 8) + 64;
        sub_10001198C(319, &qword_100373528, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
        if (v9 <= 0x3F)
        {
          v18[4] = *(_QWORD *)(v8 - 8) + 64;
          v18[5] = &unk_1002D7C78;
          v18[6] = "\t";
          v18[7] = &unk_1002D8028;
          sub_10001198C(319, &qword_100373530, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
          if (v11 <= 0x3F)
          {
            v18[8] = *(_QWORD *)(v10 - 8) + 64;
            sub_10001198C(319, &qword_100373538, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
            if (v13 <= 0x3F)
            {
              v18[9] = *(_QWORD *)(v12 - 8) + 64;
              sub_10001198C(319, &qword_100373540, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
              if (v15 <= 0x3F)
              {
                v18[10] = *(_QWORD *)(v14 - 8) + 64;
                v18[11] = &unk_1002D8028;
                sub_10001198C(319, (unint64_t *)&unk_100373548, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
                if (v17 <= 0x3F)
                {
                  v18[12] = *(_QWORD *)(v16 - 8) + 64;
                  swift_updateClassMetadata2(a1, 256, 13, v18, a1 + 80);
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_1001492B0()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
}

void sub_1001492B8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[13];
  uint64_t v5;
  uint64_t v6;

  v4[0] = &unk_1002D8168;
  v4[1] = &unk_1002D7E08;
  v4[2] = &unk_1002D8028;
  v4[3] = &unk_1002D7E08;
  v4[4] = &unk_1002D7C78;
  v4[5] = &unk_1002D7AC8;
  v4[6] = "\t";
  v4[7] = &unk_1002D7C78;
  v4[8] = &unk_1002D7E08;
  v4[9] = "\t";
  v4[10] = "\t";
  v4[11] = &unk_1002D8168;
  v4[12] = &unk_1002D7E08;
  sub_10001198C(319, (unint64_t *)&unk_10036FA60, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(v2 - 8) + 64;
    v6 = v5;
    swift_updateClassMetadata2(a1, 256, 15, v4, a1 + 80);
  }
}

uint64_t sub_100149380()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass(0);
}

void sub_100149388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1001493B8(a1, a2, a3, (unint64_t *)&unk_100373A10, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
}

uint64_t sub_10014939C()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass(0);
}

void sub_1001493A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1001493B8(a1, a2, a3, (unint64_t *)&unk_100373B18, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

void sub_1001493B8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[3];

  sub_10001198C(319, (unint64_t *)&unk_10036FA60, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  if (v9 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(v8 - 8) + 64;
    v12[1] = &unk_1002D7AC8;
    sub_10001198C(319, a4, a5);
    if (v11 <= 0x3F)
    {
      v12[2] = *(_QWORD *)(v10 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 3, v12, a1 + 80);
    }
  }
}

uint64_t sub_100149470()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass(0);
}

void sub_100149478(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[15];

  sub_10001198C(319, (unint64_t *)&unk_10036FA60, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = "\t";
    v4[2] = "\t";
    v4[3] = "\t";
    v4[4] = "\t";
    v4[5] = "\t";
    v4[6] = &unk_1002D8028;
    v4[7] = "\t";
    v4[8] = "\t";
    v4[9] = "\t";
    v4[10] = &unk_1002D7C78;
    v4[11] = "\t";
    v4[12] = "\t";
    v4[13] = "\t";
    v4[14] = "\t";
    swift_updateClassMetadata2(a1, 256, 15, v4, a1 + 80);
  }
}

uint64_t sub_100149528()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
}

void sub_100149530(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[13];

  sub_10001198C(319, (unint64_t *)&unk_10036FA60, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v8[1] = &unk_1002D7AC8;
    v8[2] = &unk_1002D90A0;
    sub_10001198C(319, &qword_100373EA0, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
    if (v5 <= 0x3F)
    {
      v8[3] = *(_QWORD *)(v4 - 8) + 64;
      sub_10001198C(319, (unint64_t *)&unk_100373EA8, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
      if (v7 <= 0x3F)
      {
        v8[4] = *(_QWORD *)(v6 - 8) + 64;
        v8[5] = &unk_1002D7C78;
        v8[6] = &unk_1002D7C78;
        v8[7] = &unk_1002D7C78;
        v8[8] = &unk_1002D7C78;
        v8[9] = &unk_1002D7C78;
        v8[10] = &unk_1002D7AC8;
        v8[11] = &unk_1002D7AC8;
        v8[12] = &unk_1002D7C78;
        swift_updateClassMetadata2(a1, 256, 13, v8, a1 + 80);
      }
    }
  }
}

uint64_t sub_10014962C()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
}

void sub_100149634(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[24];

  sub_10001198C(319, (unint64_t *)&unk_10036FA60, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v8[1] = v8[0];
    v8[2] = v8[0];
    v8[3] = &unk_1002D7AC8;
    v8[4] = "\t";
    v8[5] = "\t";
    v8[6] = &unk_1002D7AC8;
    v8[7] = &unk_1002D7AC8;
    v8[8] = "\t";
    v8[9] = "\t";
    v8[10] = "\t";
    v8[11] = &unk_1002D7AC8;
    v8[12] = &unk_1002D7F00;
    v8[13] = &unk_1002D7C78;
    v8[14] = &unk_1002D7C78;
    sub_10001198C(319, &qword_1003740F0, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
    if (v5 <= 0x3F)
    {
      v8[15] = *(_QWORD *)(v4 - 8) + 64;
      v8[16] = &unk_1002D7AC8;
      v8[17] = &unk_1002D7AC8;
      v8[18] = &unk_1002D7AC8;
      v8[19] = &unk_1002D7AC8;
      v8[20] = &unk_1002D7AC8;
      v8[21] = &unk_1002D7AC8;
      v8[22] = &unk_1002D90B8;
      sub_10001198C(319, (unint64_t *)&unk_1003740F8, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
      if (v7 <= 0x3F)
      {
        v8[23] = *(_QWORD *)(v6 - 8) + 64;
        swift_updateClassMetadata2(a1, 256, 24, v8, a1 + 80);
      }
    }
  }
}

uint64_t sub_100149754()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
}

void sub_10014975C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[11];

  sub_10001198C(319, &qword_1003744A0, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = v6[0];
    v6[2] = &unk_1002D7AC8;
    v6[3] = &unk_1002D7AC8;
    v6[4] = &unk_1002D7AC8;
    v6[5] = &unk_1002D82D8;
    v6[6] = &unk_1002D7C78;
    v6[7] = &unk_1002D7AC8;
    v6[8] = &unk_1002D7AC8;
    v6[9] = &unk_1002D7AC8;
    sub_10001198C(319, (unint64_t *)&unk_1003744A8, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
    if (v5 <= 0x3F)
    {
      v6[10] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 11, v6, a1 + 80);
    }
  }
}

uint64_t sub_100149828()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
}

void sub_100149830(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  sub_10001198C(319, (unint64_t *)&unk_1003744A8, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  if (v3 <= 0x3F)
  {
    v6 = *(_QWORD *)(v2 - 8) + 64;
    sub_10001198C(319, &qword_1003744A0, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
    if (v5 <= 0x3F)
    {
      v7 = *(_QWORD *)(v4 - 8) + 64;
      v8 = v7;
      v9 = v7;
      v10 = &unk_1002D82D8;
      v11 = &unk_1002D7C78;
      v12 = &unk_1002D7C78;
      v13 = &unk_1002D7C78;
      v14 = &unk_1002D7AC8;
      swift_updateClassMetadata2(a1, 256, 9, &v6, a1 + 80);
    }
  }
}

uint64_t sub_1001498F8()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
}

void sub_100149900(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[11];

  sub_10001198C(319, (unint64_t *)&unk_10036FA60, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v8[1] = &unk_1002D7AC8;
    v8[2] = &unk_1002D90D0;
    v8[3] = &unk_1002D90D0;
    v8[4] = &unk_1002D7C78;
    sub_10001198C(319, &qword_100374870, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
    if (v5 <= 0x3F)
    {
      v8[5] = *(_QWORD *)(v4 - 8) + 64;
      sub_10001198C(319, (unint64_t *)&unk_100374878, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
      if (v7 <= 0x3F)
      {
        v8[6] = *(_QWORD *)(v6 - 8) + 64;
        v8[7] = &unk_1002D7C78;
        v8[8] = &unk_1002D7C78;
        v8[9] = &unk_1002D7C78;
        v8[10] = &unk_1002D7C78;
        swift_updateClassMetadata2(a1, 256, 11, v8, a1 + 80);
      }
    }
  }
}

uint64_t sub_1001499F8()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
}

void sub_100149A00(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[7];

  sub_10001198C(319, (unint64_t *)&unk_10036FA60, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v8[1] = v8[0];
    v8[2] = v8[0];
    v8[3] = v8[0];
    sub_10001198C(319, (unint64_t *)&unk_100374A80, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
    if (v5 <= 0x3F)
    {
      v8[4] = *(_QWORD *)(v4 - 8) + 64;
      sub_10001198C(319, (unint64_t *)&unk_1003729F8, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
      if (v7 <= 0x3F)
      {
        v8[5] = *(_QWORD *)(v6 - 8) + 64;
        v8[6] = "\t";
        swift_updateClassMetadata2(a1, 256, 7, v8, a1 + 80);
      }
    }
  }
}

unint64_t sub_100149ADC()
{
  unint64_t result;

  result = qword_100375158;
  if (!qword_100375158)
  {
    result = swift_getWitnessTable(&unk_1002CF158, &type metadata for CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame);
    atomic_store(result, (unint64_t *)&qword_100375158);
  }
  return result;
}

unint64_t sub_100149B20()
{
  unint64_t result;

  result = qword_100375160;
  if (!qword_100375160)
  {
    result = swift_getWitnessTable(&unk_1002CF000, &type metadata for CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType);
    atomic_store(result, (unint64_t *)&qword_100375160);
  }
  return result;
}

unint64_t sub_100149B64()
{
  unint64_t result;

  result = qword_100375168;
  if (!qword_100375168)
  {
    result = swift_getWitnessTable(&unk_1002CEF18, &type metadata for CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType);
    atomic_store(result, (unint64_t *)&qword_100375168);
  }
  return result;
}

unint64_t sub_100149BA8()
{
  unint64_t result;

  result = qword_100375170;
  if (!qword_100375170)
  {
    result = swift_getWitnessTable(&unk_1002CEDC0, &type metadata for CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType);
    atomic_store(result, (unint64_t *)&qword_100375170);
  }
  return result;
}

unint64_t sub_100149BEC()
{
  unint64_t result;

  result = qword_100375178;
  if (!qword_100375178)
  {
    result = swift_getWitnessTable(&unk_1002CECD8, &type metadata for CLP_LogEntry_PrivateData_WristState.WristStateType);
    atomic_store(result, (unint64_t *)&qword_100375178);
  }
  return result;
}

unint64_t sub_100149C30()
{
  unint64_t result;

  result = qword_100375180;
  if (!qword_100375180)
  {
    result = swift_getWitnessTable(&unk_1002CEBB8, &type metadata for CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType);
    atomic_store(result, (unint64_t *)&qword_100375180);
  }
  return result;
}

unint64_t sub_100149C74()
{
  unint64_t result;

  result = qword_100375188;
  if (!qword_100375188)
  {
    result = swift_getWitnessTable(&unk_1002CEA98, &type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType);
    atomic_store(result, (unint64_t *)&qword_100375188);
  }
  return result;
}

unint64_t sub_100149CB8()
{
  unint64_t result;

  result = qword_100375190;
  if (!qword_100375190)
  {
    result = swift_getWitnessTable(&unk_1002CE978, &type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType);
    atomic_store(result, (unint64_t *)&qword_100375190);
  }
  return result;
}

unint64_t sub_100149CFC()
{
  unint64_t result;

  result = qword_100375198;
  if (!qword_100375198)
  {
    result = swift_getWitnessTable(&unk_1002CE820, &type metadata for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource);
    atomic_store(result, (unint64_t *)&qword_100375198);
  }
  return result;
}

unint64_t sub_100149D40()
{
  unint64_t result;

  result = qword_1003751A0;
  if (!qword_1003751A0)
  {
    result = swift_getWitnessTable(&unk_1002CE738, &type metadata for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability);
    atomic_store(result, (unint64_t *)&qword_1003751A0);
  }
  return result;
}

unint64_t sub_100149D84()
{
  unint64_t result;

  result = qword_1003751A8;
  if (!qword_1003751A8)
  {
    result = swift_getWitnessTable(&unk_1002CE618, &type metadata for CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType);
    atomic_store(result, (unint64_t *)&qword_1003751A8);
  }
  return result;
}

unint64_t sub_100149DC8()
{
  unint64_t result;

  result = qword_1003751B0;
  if (!qword_1003751B0)
  {
    result = swift_getWitnessTable(&unk_1002CE4F8, &type metadata for CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType);
    atomic_store(result, (unint64_t *)&qword_1003751B0);
  }
  return result;
}

unint64_t sub_100149E0C()
{
  unint64_t result;

  result = qword_1003751B8;
  if (!qword_1003751B8)
  {
    result = swift_getWitnessTable(&unk_1002CE3D8, &type metadata for CLP_LogEntry_PrivateData_DeviceStatus.NotificationType);
    atomic_store(result, (unint64_t *)&qword_1003751B8);
  }
  return result;
}

unint64_t sub_100149E50()
{
  unint64_t result;

  result = qword_1003751C0;
  if (!qword_1003751C0)
  {
    result = swift_getWitnessTable(&unk_1002CE280, &type metadata for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType);
    atomic_store(result, (unint64_t *)&qword_1003751C0);
  }
  return result;
}

unint64_t sub_100149E94()
{
  unint64_t result;

  result = qword_1003751C8;
  if (!qword_1003751C8)
  {
    result = swift_getWitnessTable(&unk_1002CE198, &type metadata for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType);
    atomic_store(result, (unint64_t *)&qword_1003751C8);
  }
  return result;
}

unint64_t sub_100149ED8()
{
  unint64_t result;

  result = qword_1003751D0;
  if (!qword_1003751D0)
  {
    result = swift_getWitnessTable(&unk_1002CE078, &type metadata for CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType);
    atomic_store(result, (unint64_t *)&qword_1003751D0);
  }
  return result;
}

unint64_t sub_100149F1C()
{
  unint64_t result;

  result = qword_1003751D8;
  if (!qword_1003751D8)
  {
    result = swift_getWitnessTable(&unk_1002CDF20, &type metadata for CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType);
    atomic_store(result, (unint64_t *)&qword_1003751D8);
  }
  return result;
}

unint64_t sub_100149F60()
{
  unint64_t result;

  result = qword_1003751E0;
  if (!qword_1003751E0)
  {
    result = swift_getWitnessTable(&unk_1002CDE38, &type metadata for CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType);
    atomic_store(result, (unint64_t *)&qword_1003751E0);
  }
  return result;
}

unint64_t sub_100149FA4()
{
  unint64_t result;

  result = qword_1003751E8;
  if (!qword_1003751E8)
  {
    result = swift_getWitnessTable(&unk_1002CDD18, &type metadata for CLP_LogEntry_PrivateData_WorkoutEvent.EventType);
    atomic_store(result, (unint64_t *)&qword_1003751E8);
  }
  return result;
}

unint64_t sub_100149FE8()
{
  unint64_t result;

  result = qword_1003751F0;
  if (!qword_1003751F0)
  {
    result = swift_getWitnessTable(&unk_1002CDB88, &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode);
    atomic_store(result, (unint64_t *)&qword_1003751F0);
  }
  return result;
}

unint64_t sub_10014A02C()
{
  unint64_t result;

  result = qword_1003751F8;
  if (!qword_1003751F8)
  {
    result = swift_getWitnessTable(&unk_1002CDAA0, &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType);
    atomic_store(result, (unint64_t *)&qword_1003751F8);
  }
  return result;
}

unint64_t sub_10014A070()
{
  unint64_t result;

  result = qword_100375200;
  if (!qword_100375200)
  {
    result = swift_getWitnessTable(&unk_1002CD9B8, &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType);
    atomic_store(result, (unint64_t *)&qword_100375200);
  }
  return result;
}

unint64_t sub_10014A0B4()
{
  unint64_t result;

  result = qword_100375208;
  if (!qword_100375208)
  {
    result = swift_getWitnessTable(&unk_1002CD828, &type metadata for CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType);
    atomic_store(result, (unint64_t *)&qword_100375208);
  }
  return result;
}

unint64_t sub_10014A0F8()
{
  unint64_t result;

  result = qword_100375210;
  if (!qword_100375210)
  {
    result = swift_getWitnessTable(&unk_1002CD740, &type metadata for CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType);
    atomic_store(result, (unint64_t *)&qword_100375210);
  }
  return result;
}

unint64_t sub_10014A13C()
{
  unint64_t result;

  result = qword_100375218;
  if (!qword_100375218)
  {
    result = swift_getWitnessTable(&unk_1002CD658, &type metadata for CLP_LogEntry_PrivateData_MotionActivity.MountedStateType);
    atomic_store(result, (unint64_t *)&qword_100375218);
  }
  return result;
}

unint64_t sub_10014A180()
{
  unint64_t result;

  result = qword_100375220;
  if (!qword_100375220)
  {
    result = swift_getWitnessTable(&unk_1002CD500, &type metadata for CLP_LogEntry_PrivateData_Location.MotionDetectedType);
    atomic_store(result, (unint64_t *)&qword_100375220);
  }
  return result;
}

unint64_t sub_10014A1C4()
{
  unint64_t result;

  result = qword_100375228;
  if (!qword_100375228)
  {
    result = swift_getWitnessTable(&unk_1002CD418, &type metadata for CLP_LogEntry_PrivateData_Location.SignalQualityType);
    atomic_store(result, (unint64_t *)&qword_100375228);
  }
  return result;
}

unint64_t sub_10014A208()
{
  unint64_t result;

  result = qword_100375230;
  if (!qword_100375230)
  {
    result = swift_getWitnessTable(&unk_1002CD1A8, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy);
    atomic_store(result, (unint64_t *)&qword_100375230);
  }
  return result;
}

unint64_t sub_10014A24C()
{
  unint64_t result;

  result = qword_100375238;
  if (!qword_100375238)
  {
    result = swift_getWitnessTable(&unk_1002CD0C0, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType);
    atomic_store(result, (unint64_t *)&qword_100375238);
  }
  return result;
}

unint64_t sub_10014A290()
{
  unint64_t result;

  result = qword_100375240;
  if (!qword_100375240)
  {
    result = swift_getWitnessTable(&unk_1002CCFD8, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType);
    atomic_store(result, (unint64_t *)&qword_100375240);
  }
  return result;
}

unint64_t sub_10014A2D4()
{
  unint64_t result;

  result = qword_100375248;
  if (!qword_100375248)
  {
    result = swift_getWitnessTable(&unk_1002CCEF0, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent);
    atomic_store(result, (unint64_t *)&qword_100375248);
  }
  return result;
}

unint64_t sub_10014A318()
{
  unint64_t result;

  result = qword_100375250;
  if (!qword_100375250)
  {
    result = swift_getWitnessTable(&unk_1002CCE08, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType);
    atomic_store(result, (unint64_t *)&qword_100375250);
  }
  return result;
}

unint64_t sub_10014A35C()
{
  unint64_t result;

  result = qword_100375258;
  if (!qword_100375258)
  {
    result = swift_getWitnessTable(&unk_1002CCD20, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType);
    atomic_store(result, (unint64_t *)&qword_100375258);
  }
  return result;
}

unint64_t sub_10014A3A0()
{
  unint64_t result;

  result = qword_100375260;
  if (!qword_100375260)
  {
    result = swift_getWitnessTable(&unk_1002CCC38, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType);
    atomic_store(result, (unint64_t *)&qword_100375260);
  }
  return result;
}

unint64_t sub_10014A3E4()
{
  unint64_t result;

  result = qword_100375268;
  if (!qword_100375268)
  {
    result = swift_getWitnessTable(&unk_1002CCAE0, &type metadata for CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType);
    atomic_store(result, (unint64_t *)&qword_100375268);
  }
  return result;
}

unint64_t sub_10014A428()
{
  unint64_t result;

  result = qword_100375270;
  if (!qword_100375270)
  {
    result = swift_getWitnessTable(&unk_1002CC9F8, &type metadata for CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType);
    atomic_store(result, (unint64_t *)&qword_100375270);
  }
  return result;
}

unint64_t sub_10014A46C()
{
  unint64_t result;

  result = qword_100375278;
  if (!qword_100375278)
  {
    result = swift_getWitnessTable(&unk_1002CC8D8, &type metadata for CLP_LogEntry_PrivateData_IndoorOutdoorConfidence);
    atomic_store(result, (unint64_t *)&qword_100375278);
  }
  return result;
}

unint64_t sub_10014A4B0()
{
  unint64_t result;

  result = qword_100375280;
  if (!qword_100375280)
  {
    result = swift_getWitnessTable(&unk_1002CC7B8, &type metadata for CLP_LogEntry_PrivateData_IndoorOutdoorType);
    atomic_store(result, (unint64_t *)&qword_100375280);
  }
  return result;
}

unint64_t sub_10014A4F4()
{
  unint64_t result;

  result = qword_100375288;
  if (!qword_100375288)
  {
    result = swift_getWitnessTable(&unk_1002CC698, &type metadata for CLP_LogEntry_PrivateData_DataAvailability);
    atomic_store(result, (unint64_t *)&qword_100375288);
  }
  return result;
}

unint64_t sub_10014A538()
{
  unint64_t result;

  result = qword_100375290;
  if (!qword_100375290)
  {
    result = swift_getWitnessTable(&unk_1002CC578, &type metadata for CLP_LogEntry_PrivateData_LocationServicesEnabled);
    atomic_store(result, (unint64_t *)&qword_100375290);
  }
  return result;
}

unint64_t sub_10014A57C()
{
  unint64_t result;

  result = qword_100375298;
  if (!qword_100375298)
  {
    result = swift_getWitnessTable(&unk_1002CC458, &type metadata for CLP_LogEntry_PrivateData_WifiNotificationType);
    atomic_store(result, (unint64_t *)&qword_100375298);
  }
  return result;
}

unint64_t sub_10014A5C0()
{
  unint64_t result;

  result = qword_1003752A0;
  if (!qword_1003752A0)
  {
    result = swift_getWitnessTable(&unk_1002CC338, &type metadata for CLP_LogEntry_PrivateData_WifiScanType);
    atomic_store(result, (unint64_t *)&qword_1003752A0);
  }
  return result;
}

unint64_t sub_10014A604()
{
  unint64_t result;

  result = qword_1003752A8;
  if (!qword_1003752A8)
  {
    result = swift_getWitnessTable(&unk_1002CC0F8, &type metadata for CLP_LogEntry_PrivateData_WifiAccessPointMode);
    atomic_store(result, (unint64_t *)&qword_1003752A8);
  }
  return result;
}

unint64_t sub_10014A648()
{
  unint64_t result;

  result = qword_1003752B0;
  if (!qword_1003752B0)
  {
    result = swift_getWitnessTable(&unk_1002CBFD8, &type metadata for CLP_LogEntry_PrivateData_SensorFusionMode);
    atomic_store(result, (unint64_t *)&qword_1003752B0);
  }
  return result;
}

unint64_t sub_10014A68C()
{
  unint64_t result;

  result = qword_1003752B8;
  if (!qword_1003752B8)
  {
    result = swift_getWitnessTable(&unk_1002CBEB8, &type metadata for CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel);
    atomic_store(result, (unint64_t *)&qword_1003752B8);
  }
  return result;
}

unint64_t sub_10014A6D0()
{
  unint64_t result;

  result = qword_1003752C0;
  if (!qword_1003752C0)
  {
    result = swift_getWitnessTable(&unk_1002CBD98, &type metadata for CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel);
    atomic_store(result, (unint64_t *)&qword_1003752C0);
  }
  return result;
}

unint64_t sub_10014A714()
{
  unint64_t result;

  result = qword_1003752C8;
  if (!qword_1003752C8)
  {
    result = swift_getWitnessTable(&unk_1002CBC78, &type metadata for CLP_LogEntry_PrivateData_BatteryChargerType);
    atomic_store(result, (unint64_t *)&qword_1003752C8);
  }
  return result;
}

unint64_t sub_10014A758()
{
  unint64_t result;

  result = qword_1003752D0;
  if (!qword_1003752D0)
  {
    result = swift_getWitnessTable(&unk_1002CBB58, &type metadata for CLP_LogEntry_PrivateData_ReachabilityType);
    atomic_store(result, (unint64_t *)&qword_1003752D0);
  }
  return result;
}

unint64_t sub_10014A79C()
{
  unint64_t result;

  result = qword_1003752D8;
  if (!qword_1003752D8)
  {
    result = swift_getWitnessTable(&unk_1002CBA38, &type metadata for CLP_LogEntry_PrivateData_DominantMotionModeType);
    atomic_store(result, (unint64_t *)&qword_1003752D8);
  }
  return result;
}

unint64_t sub_10014A7E0()
{
  unint64_t result;

  result = qword_1003752E0;
  if (!qword_1003752E0)
  {
    result = swift_getWitnessTable(&unk_1002CB918, &type metadata for CLP_LogEntry_PrivateData_PipelineOperatingMode);
    atomic_store(result, (unint64_t *)&qword_1003752E0);
  }
  return result;
}

unint64_t sub_10014A824()
{
  unint64_t result;

  result = qword_1003752E8;
  if (!qword_1003752E8)
  {
    result = swift_getWitnessTable(&unk_1002CB7F8, &type metadata for CLP_LogEntry_PrivateData_OperatingMode);
    atomic_store(result, (unint64_t *)&qword_1003752E8);
  }
  return result;
}

unint64_t sub_10014A868()
{
  unint64_t result;

  result = qword_1003752F0;
  if (!qword_1003752F0)
  {
    result = swift_getWitnessTable(&unk_1002CB6D8, &type metadata for CLP_LogEntry_PrivateData_BatchMode);
    atomic_store(result, (unint64_t *)&qword_1003752F0);
  }
  return result;
}

unint64_t sub_10014A8AC()
{
  unint64_t result;

  result = qword_1003752F8;
  if (!qword_1003752F8)
  {
    result = swift_getWitnessTable(&unk_1002CB5B8, &type metadata for CLP_LogEntry_PrivateData_RhythmicGnssWakeMode);
    atomic_store(result, (unint64_t *)&qword_1003752F8);
  }
  return result;
}

unint64_t sub_10014A8F0()
{
  unint64_t result;

  result = qword_100375300;
  if (!qword_100375300)
  {
    result = swift_getWitnessTable(&unk_1002CB498, &type metadata for CLP_LogEntry_PrivateData_GnssModeOfOperation);
    atomic_store(result, (unint64_t *)&qword_100375300);
  }
  return result;
}

unint64_t sub_10014A934()
{
  unint64_t result;

  result = qword_100375308;
  if (!qword_100375308)
  {
    result = swift_getWitnessTable(&unk_1002CB378, &type metadata for CLP_LogEntry_PrivateData_BatchedLocationFixType);
    atomic_store(result, (unint64_t *)&qword_100375308);
  }
  return result;
}

unint64_t sub_10014A978()
{
  unint64_t result;

  result = qword_100375310;
  if (!qword_100375310)
  {
    result = swift_getWitnessTable(&unk_1002CB258, &type metadata for CLP_LogEntry_PrivateData_ClientSatelliteConstellation);
    atomic_store(result, (unint64_t *)&qword_100375310);
  }
  return result;
}

unint64_t sub_10014A9BC()
{
  unint64_t result;

  result = qword_100375318;
  if (!qword_100375318)
  {
    result = swift_getWitnessTable(&unk_1002CB138, &type metadata for CLP_LogEntry_PrivateData_LocationType);
    atomic_store(result, (unint64_t *)&qword_100375318);
  }
  return result;
}

unint64_t sub_10014AA00()
{
  unint64_t result;

  result = qword_100375320;
  if (!qword_100375320)
  {
    result = swift_getWitnessTable(&unk_1002CB018, &type metadata for CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType);
    atomic_store(result, (unint64_t *)&qword_100375320);
  }
  return result;
}

uint64_t sub_10014AA7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[24];
  _BYTE v9[24];

  v1 = v0;
  v2 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  __chkstk_darwin(v2);
  v4 = &v8[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  result = swift_beginAccess(&dword_100384348, v9, 1, 0);
  if (dword_100384348 == -1)
  {
    __break(1u);
  }
  else
  {
    ++dword_100384348;
    sub_100004BB4((uint64_t)v4);
    v6 = v0 + OBJC_IVAR____TtC10ALProtobuf14ALProtoRequest__pb;
    sub_10014AFDC((uint64_t)v4, v1 + OBJC_IVAR____TtC10ALProtobuf14ALProtoRequest__pb);
    swift_beginAccess(v6, v8, 33, 0);
    sub_1000034AC(0);
    sub_1000035BC(dword_100384348);
    swift_endAccess(v8);
    v7 = mach_continuous_time();
    swift_beginAccess(v6, v8, 33, 0);
    sub_100003398(v7);
    swift_endAccess(v8);
    return v1;
  }
  return result;
}

int *sub_10014AB8C()
{
  return &dword_100384348;
}

uint64_t ALProtoRequest.__allocating_init(wifiResultOptions:)(uint64_t a1)
{
  return sub_10014ABE4(a1, 3);
}

uint64_t type metadata accessor for ALProtoRequest(uint64_t a1)
{
  uint64_t result;

  result = qword_1003B0810;
  if (!qword_1003B0810)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ALProtoRequest);
  return result;
}

uint64_t ALProtoRequest.__allocating_init(btResultOptions:)(uint64_t a1)
{
  return sub_10014ABE4(a1, 4);
}

uint64_t sub_10014ABE4(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v13[24];

  v4 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = type metadata accessor for ALProtoRequest(0);
  v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  sub_10014AA7C();
  v9 = v8 + OBJC_IVAR____TtC10ALProtobuf14ALProtoRequest__pb;
  swift_beginAccess(v8 + OBJC_IVAR____TtC10ALProtobuf14ALProtoRequest__pb, v13, 33, 0);
  swift_retain(v8);
  sub_1000036C0(a2);
  swift_endAccess(v13);
  sub_100083704(v6);
  swift_beginAccess(v9, v13, 33, 0);
  sub_100003A00((uint64_t)v6);
  swift_endAccess(v13);
  swift_release(v8);
  v10 = type metadata accessor for ALResultOptions(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a1, v10);
  return v8;
}

uint64_t ALProtoRequest.__allocating_init(data:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  _OWORD v16[2];
  uint64_t v17;

  v4 = v2;
  v7 = type metadata accessor for BinaryDecodingOptions(0);
  __chkstk_darwin(v7);
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  __chkstk_darwin(v10);
  v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  BinaryDecodingOptions.init()(v13);
  v14 = sub_10014AF94();
  Message.init(serializedData:extensions:partial:options:)(a1, a2, v16, 0, v9, v10, v14);
  if (v3)
    swift_deallocPartialClassInstance(v13, v4, *(unsigned int *)(*(_QWORD *)v13 + 48), *(unsigned __int16 *)(*(_QWORD *)v13 + 52));
  else
    sub_10014AFDC((uint64_t)v12, v13 + OBJC_IVAR____TtC10ALProtobuf14ALProtoRequest__pb);
  return v13;
}

uint64_t ALProtoRequest.init(data:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD v17[2];
  uint64_t v18;

  v4 = v2;
  v7 = type metadata accessor for BinaryDecodingOptions(0);
  __chkstk_darwin(v7);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  BinaryDecodingOptions.init()(v11);
  v14 = sub_10014AF94();
  Message.init(serializedData:extensions:partial:options:)(a1, a2, v17, 0, v9, v10, v14);
  if (v3)
  {
    v15 = type metadata accessor for ALProtoRequest(0);
    swift_deallocPartialClassInstance(v4, v15, *(unsigned int *)(*(_QWORD *)v4 + 48), *(unsigned __int16 *)(*(_QWORD *)v4 + 52));
  }
  else
  {
    sub_10014AFDC((uint64_t)v13, v4 + OBJC_IVAR____TtC10ALProtobuf14ALProtoRequest__pb);
  }
  return v4;
}

unint64_t sub_10014AF94()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100369F30;
  if (!qword_100369F30)
  {
    v1 = type metadata accessor for CLP_LogEntry_AONLoc_Request(255);
    result = swift_getWitnessTable(&unk_1002C342C, v1);
    atomic_store(result, (unint64_t *)&qword_100369F30);
  }
  return result;
}

uint64_t sub_10014AFDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10014B020()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 128))(v2);
  v5 = sub_10014AF94();
  v6 = Message.serializedData(partial:)(0, v1, v5);
  sub_10014B0CC((uint64_t)v4);
  return v6;
}

uint64_t sub_10014B0CC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

BOOL sub_10014B108()
{
  return sub_10014B118(3);
}

BOOL sub_10014B110()
{
  return sub_10014B118(4);
}

BOOL sub_10014B118(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void (*v10)(uint64_t);
  BOOL v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v3 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v16 - v8;
  v10 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 128);
  v10(v7);
  v11 = sub_10000374C();
  v12 = sub_10014B0CC((uint64_t)v9);
  if (!v11)
    return 0;
  v10(v12);
  v13 = sub_100003698();
  sub_10014B0CC((uint64_t)v6);
  v20 = v13;
  v19 = a1;
  v14 = sub_10000FE0C();
  dispatch thunk of RawRepresentable.rawValue.getter(&v18, &type metadata for CLP_LogEntry_AONLoc_Request.TypeEnum, v14);
  dispatch thunk of RawRepresentable.rawValue.getter(&v17, &type metadata for CLP_LogEntry_AONLoc_Request.TypeEnum, v14);
  return v18 == v17;
}

uint64_t sub_10014B23C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtC10ALProtobuf14ALProtoRequest__pb;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_10014B28C(v3, a1);
}

uint64_t sub_10014B28C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10014B2D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtC10ALProtobuf14ALProtoRequest__pb;
  swift_beginAccess(v3, v5, 33, 0);
  sub_10014B328(a1, v3);
  return swift_endAccess(v5);
}

uint64_t sub_10014B328(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void *sub_10014B36C(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC10ALProtobuf14ALProtoRequest__pb, a1, 33, 0);
  return &j_j__swift_endAccess;
}

uint64_t sub_10014B3B0()
{
  _BYTE v1[24];

  swift_beginAccess(&dword_100384348, v1, 0, 0);
  return dword_100384348;
}

uint64_t sub_10014B3F0(int a1)
{
  uint64_t result;
  _BYTE v3[24];

  result = swift_beginAccess(&dword_100384348, v3, 1, 0);
  dword_100384348 = a1;
  return result;
}

void *sub_10014B434(uint64_t a1)
{
  swift_beginAccess(&dword_100384348, a1, 33, 0);
  return &j__swift_endAccess;
}

uint64_t ALProtoRequest.deinit()
{
  uint64_t v0;

  sub_10014B0CC(v0 + OBJC_IVAR____TtC10ALProtobuf14ALProtoRequest__pb);
  return v0;
}

uint64_t ALProtoRequest.__deallocating_deinit()
{
  uint64_t v0;

  sub_10014B0CC(v0 + OBJC_IVAR____TtC10ALProtobuf14ALProtoRequest__pb);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10014B4C8()
{
  return type metadata accessor for ALProtoRequest(0);
}

uint64_t sub_10014B4D0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Request(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 1, &v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for ALProtoRequest(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ALProtoRequest);
}

uint64_t dispatch thunk of ALProtoRequest.__allocating_init(data:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of ALProtoRequest.serializedData()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of ALRPCTest.getSamplesQueueSize()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of ALRPCTest.printBufferUsageStatistics()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t sub_10014B598(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10020C90C();
  return Enum.hash(into:)(a1, a2, v4);
}

unint64_t sub_10014B5D0@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1001C2324(a1);
  *a2 = result;
  return result;
}

unint64_t sub_10014B5F4@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1001C2324(*a1);
  *a2 = result;
  return result;
}

_UNKNOWN **sub_10014B61C()
{
  return &off_100356FF0;
}

void sub_10014B628(_QWORD *a1@<X8>)
{
  *a1 = &off_100356FF0;
}

uint64_t sub_10014B638(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10020C8C8();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014B670()
{
  return &off_100357028;
}

void sub_10014B67C(_QWORD *a1@<X8>)
{
  *a1 = &off_100357028;
}

uint64_t sub_10014B68C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10020C884();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014B6C4()
{
  return &off_100357050;
}

void sub_10014B6D0(_QWORD *a1@<X8>)
{
  *a1 = &off_100357078;
}

uint64_t sub_10014B6E0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10020C840();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014B718()
{
  return &off_1003570A0;
}

void sub_10014B724(_QWORD *a1@<X8>)
{
  *a1 = &off_1003570A0;
}

uint64_t sub_10014B738(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10020C7FC();
  return Enum.hash(into:)(a1, a2, v4);
}

unint64_t sub_10014B770@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1001C2334(a1);
  *a2 = result;
  return result;
}

unint64_t sub_10014B794@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1001C2334(*a1);
  *a2 = result;
  return result;
}

_UNKNOWN **sub_10014B7BC()
{
  return &off_1003570C8;
}

void sub_10014B7C8(_QWORD *a1@<X8>)
{
  *a1 = &off_1003570C8;
}

uint64_t sub_10014B7D8(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10020C7B8();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014B810()
{
  return &off_100357100;
}

void sub_10014B81C(_QWORD *a1@<X8>)
{
  *a1 = &off_100357128;
}

uint64_t sub_10014B830(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10020C774();
  return Enum.hash(into:)(a1, a2, v4);
}

unint64_t sub_10014B868@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1001C2344(a1);
  *a2 = result;
  return result;
}

unint64_t sub_10014B88C@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1001C2344(*a1);
  *a2 = result;
  return result;
}

_UNKNOWN **sub_10014B8B4()
{
  return &off_100357150;
}

void sub_10014B8C0(_QWORD *a1@<X8>)
{
  *a1 = &off_100357150;
}

uint64_t sub_10014B8D4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10020C730();
  return Enum.hash(into:)(a1, a2, v4);
}

unint64_t sub_10014B90C@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1001C2354(a1);
  *a2 = result;
  return result;
}

unint64_t sub_10014B930@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1001C2354(*a1);
  *a2 = result;
  return result;
}

_UNKNOWN **sub_10014B958()
{
  return &off_100357198;
}

void sub_10014B964(_QWORD *a1@<X8>)
{
  *a1 = &off_100357198;
}

uint64_t sub_10014B974(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10020C6EC();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014B9AC()
{
  return &off_1003571D0;
}

void sub_10014B9B8(_QWORD *a1@<X8>)
{
  *a1 = &off_1003571D0;
}

uint64_t sub_10014B9C8(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10020C6A8();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014BA00()
{
  return &off_1003571F8;
}

void sub_10014BA0C(_QWORD *a1@<X8>)
{
  *a1 = &off_1003571F8;
}

uint64_t sub_10014BA1C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10020C664();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014BA54()
{
  return &off_100357220;
}

void sub_10014BA60(_QWORD *a1@<X8>)
{
  *a1 = &off_100357248;
}

uint64_t sub_10014BA70(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10020C620();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014BAA8()
{
  return &off_100357270;
}

void sub_10014BAB4(_QWORD *a1@<X8>)
{
  *a1 = &off_100357298;
}

uint64_t sub_10014BAC8(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10020C5DC();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014BB00()
{
  return &off_1003572C0;
}

void sub_10014BB0C(_QWORD *a1@<X8>)
{
  *a1 = &off_1003572C0;
}

uint64_t sub_10014BB1C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10020C598();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014BB54()
{
  return &off_1003572F0;
}

void sub_10014BB60(_QWORD *a1@<X8>)
{
  *a1 = &off_100357318;
}

uint64_t sub_10014BB70(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10020C554();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014BBA8()
{
  return &off_100357340;
}

void sub_10014BBB4(_QWORD *a1@<X8>)
{
  *a1 = &off_100357340;
}

uint64_t sub_10014BBC4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10020C510();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014BBFC()
{
  return &off_100357368;
}

void sub_10014BC08(_QWORD *a1@<X8>)
{
  *a1 = &off_100357368;
}

uint64_t sub_10014BC18(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10020C4CC();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014BC50()
{
  return &off_100357390;
}

void sub_10014BC5C(_QWORD *a1@<X8>)
{
  *a1 = &off_1003573B8;
}

uint64_t sub_10014BC6C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10020C488();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014BCA4()
{
  return &off_1003573E0;
}

void sub_10014BCB0(_QWORD *a1@<X8>)
{
  *a1 = &off_100357408;
}

uint64_t sub_10014BCC0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10020C444();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014BCF8()
{
  return &off_100357430;
}

void sub_10014BD04(_QWORD *a1@<X8>)
{
  *a1 = &off_100357458;
}

uint64_t sub_10014BD18(char a1)
{
  return qword_1002E6D28[a1];
}

BOOL sub_10014BD2C(char *a1, char *a2)
{
  return qword_1002E6D28[*a1] == qword_1002E6D28[*a2];
}

uint64_t sub_10014BD50(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10020C400();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_10014BD88@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1001C2364(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10014BDAC()
{
  char *v0;

  return qword_1002E6D28[*v0];
}

uint64_t sub_10014BDC0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1001C2364(*a1);
  *a2 = result;
  return result;
}

void sub_10014BDE8(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_1002E6D28[*v1];
}

_UNKNOWN **sub_10014BE00()
{
  return &off_100357480;
}

void sub_10014BE0C(_QWORD *a1@<X8>)
{
  *a1 = &off_100357480;
}

uint64_t sub_10014BE20(char a1)
{
  return qword_1002E6D60[a1];
}

BOOL sub_10014BE34(char *a1, char *a2)
{
  return qword_1002E6D60[*a1] == qword_1002E6D60[*a2];
}

uint64_t sub_10014BE58(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10020C3BC();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_10014BE90@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1001C23C4(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10014BEB4()
{
  char *v0;

  return qword_1002E6D60[*v0];
}

uint64_t sub_10014BEC8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1001C23C4(*a1);
  *a2 = result;
  return result;
}

void sub_10014BEF0(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_1002E6D60[*v1];
}

_UNKNOWN **sub_10014BF08()
{
  return &off_1003574A8;
}

void sub_10014BF14(_QWORD *a1@<X8>)
{
  *a1 = &off_1003574A8;
}

uint64_t sub_10014BF24(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10020C378();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014BF5C()
{
  return &off_1003574D0;
}

void sub_10014BF68(_QWORD *a1@<X8>)
{
  *a1 = &off_1003574F8;
}

uint64_t sub_10014BF78(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10020C334();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014BFB0()
{
  return &off_100357520;
}

void sub_10014BFBC(_QWORD *a1@<X8>)
{
  *a1 = &off_100357520;
}

uint64_t sub_10014BFCC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10020C2F0();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014C004()
{
  return &off_100357548;
}

void sub_10014C010(_QWORD *a1@<X8>)
{
  *a1 = &off_100357548;
}

uint64_t sub_10014C020(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10020C2AC();
  return Enum.hash(into:)(a1, a2, v4);
}

unint64_t sub_10014C058@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1001C242C(a1);
  *a2 = result;
  return result;
}

unint64_t sub_10014C07C@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1001C242C(*a1);
  *a2 = result;
  return result;
}

_UNKNOWN **sub_10014C0A4()
{
  return &off_100357570;
}

void sub_10014C0B0(_QWORD *a1@<X8>)
{
  *a1 = &off_100357570;
}

uint64_t sub_10014C0C0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10020C268();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014C0F8()
{
  return &off_1003575A0;
}

void sub_10014C104(_QWORD *a1@<X8>)
{
  *a1 = &off_1003575A0;
}

uint64_t sub_10014C114(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10020C224();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014C14C()
{
  return &off_1003575C8;
}

void sub_10014C158(_QWORD *a1@<X8>)
{
  *a1 = &off_1003575C8;
}

uint64_t sub_10014C168(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10020C1E0();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014C1A0()
{
  return &off_1003575F0;
}

void sub_10014C1AC(_QWORD *a1@<X8>)
{
  *a1 = &off_1003575F0;
}

uint64_t sub_10014C1C0(char a1)
{
  return qword_1002E6DF0[a1];
}

BOOL sub_10014C1D4(char *a1, char *a2)
{
  return qword_1002E6DF0[*a1] == qword_1002E6DF0[*a2];
}

uint64_t sub_10014C1F8(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10020C19C();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_10014C230()
{
  char *v0;

  return qword_1002E6DF0[*v0];
}

void sub_10014C244(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_1002E6DF0[*v1];
}

_UNKNOWN **sub_10014C25C()
{
  return &off_100357618;
}

void sub_10014C268(_QWORD *a1@<X8>)
{
  *a1 = &off_100357640;
}

uint64_t sub_10014C278(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_1001D57EC();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014C2B0()
{
  return &off_100357668;
}

void sub_10014C2BC(_QWORD *a1@<X8>)
{
  *a1 = &off_100357668;
}

uint64_t sub_10014C2CC(uint64_t a1)
{
  return sub_1001C243C(a1);
}

uint64_t sub_10014C2E0(char a1)
{
  return qword_1002E6DA0[a1];
}

BOOL sub_10014C2F4(char *a1, char *a2)
{
  return qword_1002E6DA0[*a1] == qword_1002E6DA0[*a2];
}

uint64_t sub_10014C318(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10020C158();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_10014C350@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1001C243C(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10014C374()
{
  char *v0;

  return qword_1002E6DA0[*v0];
}

uint64_t sub_10014C388@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1001C243C(*a1);
  *a2 = result;
  return result;
}

void sub_10014C3B0(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_1002E6DA0[*v1];
}

_UNKNOWN **sub_10014C3C8()
{
  return &off_100357690;
}

void sub_10014C3D4(_QWORD *a1@<X8>)
{
  *a1 = &off_100357690;
}

uint64_t sub_10014C3E4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10020C114();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014C41C()
{
  return &off_1003576C0;
}

void sub_10014C428(_QWORD *a1@<X8>)
{
  *a1 = &off_1003576E8;
}

uint64_t sub_10014C438(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10020C0D0();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014C470()
{
  return &off_100357710;
}

void sub_10014C47C(_QWORD *a1@<X8>)
{
  *a1 = &off_100357710;
}

uint64_t sub_10014C48C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10020C08C();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_10014C4C4@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1001C24C4(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10014C4E8@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1001C24C4(*a1);
  *a2 = result;
  return result;
}

_UNKNOWN **sub_10014C510()
{
  return &off_100357740;
}

void sub_10014C51C(_QWORD *a1@<X8>)
{
  *a1 = &off_100357768;
}

uint64_t sub_10014C52C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10020C048();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014C564()
{
  return &off_100357790;
}

void sub_10014C570(_QWORD *a1@<X8>)
{
  *a1 = &off_1003577B8;
}

uint64_t sub_10014C580(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10020C004();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014C5B8()
{
  return &off_1003577E0;
}

void sub_10014C5C4(_QWORD *a1@<X8>)
{
  *a1 = &off_100357808;
}

uint64_t sub_10014C5D4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10020BFC0();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014C60C()
{
  return &off_100357830;
}

void sub_10014C618(_QWORD *a1@<X8>)
{
  *a1 = &off_100357830;
}

uint64_t sub_10014C628(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10020BF7C();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014C660()
{
  return &off_100357858;
}

void sub_10014C66C(_QWORD *a1@<X8>)
{
  *a1 = &off_100357880;
}

uint64_t sub_10014C67C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10020BF38();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014C6B4()
{
  return &off_1003578A8;
}

void sub_10014C6C0(_QWORD *a1@<X8>)
{
  *a1 = &off_1003578D0;
}

uint64_t sub_10014C6D0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10020BEF4();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10014C708()
{
  return &off_1003578F8;
}

void sub_10014C714(_QWORD *a1@<X8>)
{
  *a1 = &off_1003578F8;
}

uint64_t sub_10014C724()
{
  return sub_10001A638(type metadata accessor for Proto_Gnss_Emergency_Configuration);
}

uint64_t sub_10014C730(char a1)
{
  return sub_10001A66C(a1, type metadata accessor for Proto_Gnss_Emergency_Configuration);
}

uint64_t (*sub_10014C73C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Configuration(0) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10014C784()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Configuration(0) + 20)) != 2;
}

uint64_t sub_10014C7AC()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_Configuration(0);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_10014C7D0()
{
  return sub_10001A738(type metadata accessor for Proto_Gnss_Emergency_Configuration);
}

uint64_t sub_10014C7DC(char a1)
{
  return sub_10001A76C(a1, type metadata accessor for Proto_Gnss_Emergency_Configuration);
}

uint64_t (*sub_10014C7E8(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Configuration(0) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10014C830()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Configuration(0) + 24)) != 2;
}

uint64_t sub_10014C858()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_Configuration(0);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

double sub_10014C87C()
{
  return sub_100027B84(type metadata accessor for Proto_Gnss_Emergency_Configuration);
}

uint64_t sub_10014C888(double a1)
{
  return sub_100027BC8(type metadata accessor for Proto_Gnss_Emergency_Configuration, a1);
}

uint64_t (*sub_10014C894(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Configuration(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_10014C8EC()
{
  return sub_100027C64(type metadata accessor for Proto_Gnss_Emergency_Configuration);
}

uint64_t sub_10014C8F8()
{
  return sub_100027CA0(type metadata accessor for Proto_Gnss_Emergency_Configuration);
}

int *sub_10014C904@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for Proto_Gnss_Emergency_Configuration(0);
  *(_BYTE *)(a1 + result[5]) = 2;
  *(_BYTE *)(a1 + result[6]) = 2;
  v3 = a1 + result[7];
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  return result;
}

double sub_10014C954()
{
  uint64_t v0;
  uint64_t v1;
  double result;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess(v1 + 16, v3, 0, 0);
  result = *(double *)(v1 + 16);
  if (*(_BYTE *)(v1 + 24))
    return 0.0;
  return result;
}

uint64_t sub_10014C9AC(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v7 = swift_allocObject(v6, 185, 7);
    sub_1001C2530(v5);
    v8 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v8);
  }
  v9 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v9 + 16, v11, 1, 0);
  *(double *)(v9 + 16) = a1;
  *(_BYTE *)(v9 + 24) = 0;
  return result;
}

void (*sub_10014CA4C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 16, v3, 0, 0);
  v6 = *(double *)(v5 + 16);
  if (*(_BYTE *)(v5 + 24))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_10014CAD0;
}

void sub_10014CAD0(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 88);
    v8 = *(_QWORD *)(v3 + 80);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v11 = swift_allocObject(v10, 185, 7);
    sub_1001C2530(v9);
    v12 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v12);
  }
LABEL_4:
  v13 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v13 + 16, v6, 1, 0);
  *(_QWORD *)(v13 + 16) = v4;
  *(_BYTE *)(v13 + 24) = 0;
  free((void *)v3);
}

BOOL sub_10014CB9C()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess(v1 + 16, v3, 0, 0);
  return (*(_BYTE *)(v1 + 24) & 1) == 0;
}

uint64_t sub_10014CBEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v5 = swift_allocObject(v4, 185, 7);
    sub_1001C2530(v3);
    v6 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v6);
  }
  v7 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v7 + 16, v9, 1, 0);
  *(_QWORD *)(v7 + 16) = 0;
  *(_BYTE *)(v7 + 24) = 1;
  return result;
}

double sub_10014CC84()
{
  uint64_t v0;
  uint64_t v1;
  double result;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess(v1 + 32, v3, 0, 0);
  result = *(double *)(v1 + 32);
  if (*(_BYTE *)(v1 + 40))
    return 0.0;
  return result;
}

uint64_t sub_10014CCDC(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v7 = swift_allocObject(v6, 185, 7);
    sub_1001C2530(v5);
    v8 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v8);
  }
  v9 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v9 + 32, v11, 1, 0);
  *(double *)(v9 + 32) = a1;
  *(_BYTE *)(v9 + 40) = 0;
  return result;
}

void (*sub_10014CD7C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 32, v3, 0, 0);
  v6 = *(double *)(v5 + 32);
  if (*(_BYTE *)(v5 + 40))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_10014CE00;
}

void sub_10014CE00(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 88);
    v8 = *(_QWORD *)(v3 + 80);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v11 = swift_allocObject(v10, 185, 7);
    sub_1001C2530(v9);
    v12 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v12);
  }
LABEL_4:
  v13 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v13 + 32, v6, 1, 0);
  *(_QWORD *)(v13 + 32) = v4;
  *(_BYTE *)(v13 + 40) = 0;
  free((void *)v3);
}

BOOL sub_10014CECC()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess(v1 + 32, v3, 0, 0);
  return (*(_BYTE *)(v1 + 40) & 1) == 0;
}

uint64_t sub_10014CF1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v5 = swift_allocObject(v4, 185, 7);
    sub_1001C2530(v3);
    v6 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v6);
  }
  v7 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v7 + 32, v9, 1, 0);
  *(_QWORD *)(v7 + 32) = 0;
  *(_BYTE *)(v7 + 40) = 1;
  return result;
}

double sub_10014CFB4()
{
  uint64_t v0;
  uint64_t v1;
  double result;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess(v1 + 48, v3, 0, 0);
  result = *(double *)(v1 + 48);
  if (*(_BYTE *)(v1 + 56))
    return 0.0;
  return result;
}

uint64_t sub_10014D00C(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v7 = swift_allocObject(v6, 185, 7);
    sub_1001C2530(v5);
    v8 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v8);
  }
  v9 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v9 + 48, v11, 1, 0);
  *(double *)(v9 + 48) = a1;
  *(_BYTE *)(v9 + 56) = 0;
  return result;
}

void (*sub_10014D0AC(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 48, v3, 0, 0);
  v6 = *(double *)(v5 + 48);
  if (*(_BYTE *)(v5 + 56))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_10014D130;
}

void sub_10014D130(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 88);
    v8 = *(_QWORD *)(v3 + 80);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v11 = swift_allocObject(v10, 185, 7);
    sub_1001C2530(v9);
    v12 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v12);
  }
LABEL_4:
  v13 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v13 + 48, v6, 1, 0);
  *(_QWORD *)(v13 + 48) = v4;
  *(_BYTE *)(v13 + 56) = 0;
  free((void *)v3);
}

BOOL sub_10014D1FC()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess(v1 + 48, v3, 0, 0);
  return (*(_BYTE *)(v1 + 56) & 1) == 0;
}

uint64_t sub_10014D24C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v5 = swift_allocObject(v4, 185, 7);
    sub_1001C2530(v3);
    v6 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v6);
  }
  v7 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v7 + 48, v9, 1, 0);
  *(_QWORD *)(v7 + 48) = 0;
  *(_BYTE *)(v7 + 56) = 1;
  return result;
}

double sub_10014D2E4()
{
  uint64_t v0;
  uint64_t v1;
  double result;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess(v1 + 64, v3, 0, 0);
  result = *(double *)(v1 + 64);
  if (*(_BYTE *)(v1 + 72))
    return 0.0;
  return result;
}

uint64_t sub_10014D33C(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v7 = swift_allocObject(v6, 185, 7);
    sub_1001C2530(v5);
    v8 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v8);
  }
  v9 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v9 + 64, v11, 1, 0);
  *(double *)(v9 + 64) = a1;
  *(_BYTE *)(v9 + 72) = 0;
  return result;
}

void (*sub_10014D3DC(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 64, v3, 0, 0);
  v6 = *(double *)(v5 + 64);
  if (*(_BYTE *)(v5 + 72))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_10014D460;
}

void sub_10014D460(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 88);
    v8 = *(_QWORD *)(v3 + 80);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v11 = swift_allocObject(v10, 185, 7);
    sub_1001C2530(v9);
    v12 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v12);
  }
LABEL_4:
  v13 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v13 + 64, v6, 1, 0);
  *(_QWORD *)(v13 + 64) = v4;
  *(_BYTE *)(v13 + 72) = 0;
  free((void *)v3);
}

BOOL sub_10014D52C()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess(v1 + 64, v3, 0, 0);
  return (*(_BYTE *)(v1 + 72) & 1) == 0;
}

uint64_t sub_10014D57C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v5 = swift_allocObject(v4, 185, 7);
    sub_1001C2530(v3);
    v6 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v6);
  }
  v7 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v7 + 64, v9, 1, 0);
  *(_QWORD *)(v7 + 64) = 0;
  *(_BYTE *)(v7 + 72) = 1;
  return result;
}

double sub_10014D614()
{
  uint64_t v0;
  uint64_t v1;
  double result;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess(v1 + 80, v3, 0, 0);
  result = *(double *)(v1 + 80);
  if (*(_BYTE *)(v1 + 88))
    return 0.0;
  return result;
}

uint64_t sub_10014D66C(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v7 = swift_allocObject(v6, 185, 7);
    sub_1001C2530(v5);
    v8 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v8);
  }
  v9 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v9 + 80, v11, 1, 0);
  *(double *)(v9 + 80) = a1;
  *(_BYTE *)(v9 + 88) = 0;
  return result;
}

void (*sub_10014D70C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 80, v3, 0, 0);
  v6 = *(double *)(v5 + 80);
  if (*(_BYTE *)(v5 + 88))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_10014D790;
}

void sub_10014D790(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 88);
    v8 = *(_QWORD *)(v3 + 80);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v11 = swift_allocObject(v10, 185, 7);
    sub_1001C2530(v9);
    v12 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v12);
  }
LABEL_4:
  v13 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v13 + 80, v6, 1, 0);
  *(_QWORD *)(v13 + 80) = v4;
  *(_BYTE *)(v13 + 88) = 0;
  free((void *)v3);
}

BOOL sub_10014D85C()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess(v1 + 80, v3, 0, 0);
  return (*(_BYTE *)(v1 + 88) & 1) == 0;
}

uint64_t sub_10014D8AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v5 = swift_allocObject(v4, 185, 7);
    sub_1001C2530(v3);
    v6 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v6);
  }
  v7 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v7 + 80, v9, 1, 0);
  *(_QWORD *)(v7 + 80) = 0;
  *(_BYTE *)(v7 + 88) = 1;
  return result;
}

double sub_10014D944()
{
  uint64_t v0;
  uint64_t v1;
  double result;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess(v1 + 96, v3, 0, 0);
  result = *(double *)(v1 + 96);
  if (*(_BYTE *)(v1 + 104))
    return 0.0;
  return result;
}

uint64_t sub_10014D99C(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v7 = swift_allocObject(v6, 185, 7);
    sub_1001C2530(v5);
    v8 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v8);
  }
  v9 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v9 + 96, v11, 1, 0);
  *(double *)(v9 + 96) = a1;
  *(_BYTE *)(v9 + 104) = 0;
  return result;
}

void (*sub_10014DA3C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 96, v3, 0, 0);
  v6 = *(double *)(v5 + 96);
  if (*(_BYTE *)(v5 + 104))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_10014DAC0;
}

void sub_10014DAC0(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 88);
    v8 = *(_QWORD *)(v3 + 80);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v11 = swift_allocObject(v10, 185, 7);
    sub_1001C2530(v9);
    v12 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v12);
  }
LABEL_4:
  v13 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v13 + 96, v6, 1, 0);
  *(_QWORD *)(v13 + 96) = v4;
  *(_BYTE *)(v13 + 104) = 0;
  free((void *)v3);
}

BOOL sub_10014DB8C()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess(v1 + 96, v3, 0, 0);
  return (*(_BYTE *)(v1 + 104) & 1) == 0;
}

uint64_t sub_10014DBDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v5 = swift_allocObject(v4, 185, 7);
    sub_1001C2530(v3);
    v6 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v6);
  }
  v7 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v7 + 96, v9, 1, 0);
  *(_QWORD *)(v7 + 96) = 0;
  *(_BYTE *)(v7 + 104) = 1;
  return result;
}

uint64_t sub_10014DC74()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess(v1 + 108, v3, 0, 0);
  if (*(_BYTE *)(v1 + 112))
    return 0;
  else
    return *(unsigned int *)(v1 + 108);
}

uint64_t sub_10014DCC8(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v7 = swift_allocObject(v6, 185, 7);
    sub_1001C2530(v5);
    v8 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v8);
  }
  v9 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v9 + 108, v11, 1, 0);
  *(_DWORD *)(v9 + 108) = a1;
  *(_BYTE *)(v9 + 112) = 0;
  return result;
}

void (*sub_10014DD68(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 108, v3, 0, 0);
  v6 = *(_DWORD *)(v5 + 108);
  if (*(_BYTE *)(v5 + 112))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_10014DDE8;
}

void sub_10014DDE8(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 84);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v11 = swift_allocObject(v10, 185, 7);
    sub_1001C2530(v9);
    v12 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v12);
  }
LABEL_4:
  v13 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v13 + 108, v6, 1, 0);
  *(_DWORD *)(v13 + 108) = v4;
  *(_BYTE *)(v13 + 112) = 0;
  free((void *)v3);
}

BOOL sub_10014DEB4()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess(v1 + 108, v3, 0, 0);
  return (*(_BYTE *)(v1 + 112) & 1) == 0;
}

uint64_t sub_10014DF04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v5 = swift_allocObject(v4, 185, 7);
    sub_1001C2530(v3);
    v6 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v6);
  }
  v7 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v7 + 108, v9, 1, 0);
  *(_DWORD *)(v7 + 108) = 0;
  *(_BYTE *)(v7 + 112) = 1;
  return result;
}

uint64_t sub_10014DF9C()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess(v1 + 113, v3, 0, 0);
  if (*(_BYTE *)(v1 + 113) == 18)
    return 0;
  else
    return *(unsigned __int8 *)(v1 + 113);
}

uint64_t sub_10014DFEC(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v7 = swift_allocObject(v6, 185, 7);
    sub_1001C2530(v5);
    v8 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v8);
  }
  v9 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v9 + 113, v11, 1, 0);
  *(_BYTE *)(v9 + 113) = a1;
  return result;
}

void (*sub_10014E088(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 113, v3, 0, 0);
  v6 = *(unsigned __int8 *)(v5 + 113);
  if (v6 == 18)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_10014E104;
}

void sub_10014E104(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 80);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v11 = swift_allocObject(v10, 185, 7);
    sub_1001C2530(v9);
    v12 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v12);
  }
LABEL_4:
  v13 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80)) + 113);
  swift_beginAccess(v13, v6, 1, 0);
  *v13 = v4;
  free((void *)v3);
}

BOOL sub_10014E1D0()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess(v1 + 113, v3, 0, 0);
  return *(_BYTE *)(v1 + 113) != 18;
}

uint64_t sub_10014E220()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v5 = swift_allocObject(v4, 185, 7);
    sub_1001C2530(v3);
    v6 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v6);
  }
  v7 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v7 + 113, v9, 1, 0);
  *(_BYTE *)(v7 + 113) = 18;
  return result;
}

uint64_t sub_10014E2B4()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess(v1 + 114, v3, 0, 0);
  if (*(_BYTE *)(v1 + 114) == 4)
    return 0;
  else
    return *(unsigned __int8 *)(v1 + 114);
}

uint64_t sub_10014E304(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v7 = swift_allocObject(v6, 185, 7);
    sub_1001C2530(v5);
    v8 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v8);
  }
  v9 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v9 + 114, v11, 1, 0);
  *(_BYTE *)(v9 + 114) = a1;
  return result;
}

void (*sub_10014E3A0(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 114, v3, 0, 0);
  v6 = *(unsigned __int8 *)(v5 + 114);
  if (v6 == 4)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_10014E41C;
}

void sub_10014E41C(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 80);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v11 = swift_allocObject(v10, 185, 7);
    sub_1001C2530(v9);
    v12 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v12);
  }
LABEL_4:
  v13 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80)) + 114);
  swift_beginAccess(v13, v6, 1, 0);
  *v13 = v4;
  free((void *)v3);
}

BOOL sub_10014E4E8()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess(v1 + 114, v3, 0, 0);
  return *(_BYTE *)(v1 + 114) != 4;
}

uint64_t sub_10014E538()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v5 = swift_allocObject(v4, 185, 7);
    sub_1001C2530(v3);
    v6 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v6);
  }
  v7 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v7 + 114, v9, 1, 0);
  *(_BYTE *)(v7 + 114) = 4;
  return result;
}

uint64_t sub_10014E5CC()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess(v1 + 115, v3, 0, 0);
  if (*(_BYTE *)(v1 + 115) == 7)
    return 0;
  else
    return *(unsigned __int8 *)(v1 + 115);
}

uint64_t sub_10014E61C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v7 = swift_allocObject(v6, 185, 7);
    sub_1001C2530(v5);
    v8 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v8);
  }
  v9 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v9 + 115, v11, 1, 0);
  *(_BYTE *)(v9 + 115) = a1;
  return result;
}

void (*sub_10014E6B8(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 115, v3, 0, 0);
  v6 = *(unsigned __int8 *)(v5 + 115);
  if (v6 == 7)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_10014E734;
}

void sub_10014E734(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 80);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v11 = swift_allocObject(v10, 185, 7);
    sub_1001C2530(v9);
    v12 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v12);
  }
LABEL_4:
  v13 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80)) + 115);
  swift_beginAccess(v13, v6, 1, 0);
  *v13 = v4;
  free((void *)v3);
}

BOOL sub_10014E800()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess(v1 + 115, v3, 0, 0);
  return *(_BYTE *)(v1 + 115) != 7;
}

uint64_t sub_10014E850()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v5 = swift_allocObject(v4, 185, 7);
    sub_1001C2530(v3);
    v6 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v6);
  }
  v7 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v7 + 115, v9, 1, 0);
  *(_BYTE *)(v7 + 115) = 7;
  return result;
}

double sub_10014E8E4()
{
  return sub_100156DA8(type metadata accessor for Proto_Gnss_Emergency_SummaryReport);
}

uint64_t sub_10014E8F0(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v7 = swift_allocObject(v6, 185, 7);
    sub_1001C2530(v5);
    v8 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v8);
  }
  v9 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v9 + 120, v11, 1, 0);
  *(double *)(v9 + 120) = a1;
  *(_BYTE *)(v9 + 128) = 0;
  return result;
}

void (*sub_10014E990(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 120, v3, 0, 0);
  v6 = *(double *)(v5 + 120);
  if (*(_BYTE *)(v5 + 128))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_10014EA14;
}

void sub_10014EA14(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 88);
    v8 = *(_QWORD *)(v3 + 80);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v11 = swift_allocObject(v10, 185, 7);
    sub_1001C2530(v9);
    v12 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v12);
  }
LABEL_4:
  v13 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v13 + 120, v6, 1, 0);
  *(_QWORD *)(v13 + 120) = v4;
  *(_BYTE *)(v13 + 128) = 0;
  free((void *)v3);
}

BOOL sub_10014EAE0()
{
  return sub_100157010(type metadata accessor for Proto_Gnss_Emergency_SummaryReport);
}

uint64_t sub_10014EAEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v5 = swift_allocObject(v4, 185, 7);
    sub_1001C2530(v3);
    v6 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v6);
  }
  v7 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v7 + 120, v9, 1, 0);
  *(_QWORD *)(v7 + 120) = 0;
  *(_BYTE *)(v7 + 128) = 1;
  return result;
}

double sub_10014EB84()
{
  uint64_t v0;
  uint64_t v1;
  double result;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess(v1 + 136, v3, 0, 0);
  result = *(double *)(v1 + 136);
  if (*(_BYTE *)(v1 + 144))
    return 0.0;
  return result;
}

uint64_t sub_10014EBDC(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v7 = swift_allocObject(v6, 185, 7);
    sub_1001C2530(v5);
    v8 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v8);
  }
  v9 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v9 + 136, v11, 1, 0);
  *(double *)(v9 + 136) = a1;
  *(_BYTE *)(v9 + 144) = 0;
  return result;
}

void (*sub_10014EC7C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 136, v3, 0, 0);
  v6 = *(double *)(v5 + 136);
  if (*(_BYTE *)(v5 + 144))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_10014ED00;
}

void sub_10014ED00(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 88);
    v8 = *(_QWORD *)(v3 + 80);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v11 = swift_allocObject(v10, 185, 7);
    sub_1001C2530(v9);
    v12 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v12);
  }
LABEL_4:
  v13 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v13 + 136, v6, 1, 0);
  *(_QWORD *)(v13 + 136) = v4;
  *(_BYTE *)(v13 + 144) = 0;
  free((void *)v3);
}

BOOL sub_10014EDCC()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess(v1 + 136, v3, 0, 0);
  return (*(_BYTE *)(v1 + 144) & 1) == 0;
}

uint64_t sub_10014EE1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v5 = swift_allocObject(v4, 185, 7);
    sub_1001C2530(v3);
    v6 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v6);
  }
  v7 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v7 + 136, v9, 1, 0);
  *(_QWORD *)(v7 + 136) = 0;
  *(_BYTE *)(v7 + 144) = 1;
  return result;
}

double sub_10014EEB4()
{
  uint64_t v0;
  uint64_t v1;
  double result;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess(v1 + 152, v3, 0, 0);
  result = *(double *)(v1 + 152);
  if (*(_BYTE *)(v1 + 160))
    return 0.0;
  return result;
}

uint64_t sub_10014EF0C(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v7 = swift_allocObject(v6, 185, 7);
    sub_1001C2530(v5);
    v8 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v8);
  }
  v9 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v9 + 152, v11, 1, 0);
  *(double *)(v9 + 152) = a1;
  *(_BYTE *)(v9 + 160) = 0;
  return result;
}

void (*sub_10014EFAC(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 152, v3, 0, 0);
  v6 = *(double *)(v5 + 152);
  if (*(_BYTE *)(v5 + 160))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_10014F030;
}

void sub_10014F030(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 88);
    v8 = *(_QWORD *)(v3 + 80);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v11 = swift_allocObject(v10, 185, 7);
    sub_1001C2530(v9);
    v12 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v12);
  }
LABEL_4:
  v13 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v13 + 152, v6, 1, 0);
  *(_QWORD *)(v13 + 152) = v4;
  *(_BYTE *)(v13 + 160) = 0;
  free((void *)v3);
}

BOOL sub_10014F0FC()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess(v1 + 152, v3, 0, 0);
  return (*(_BYTE *)(v1 + 160) & 1) == 0;
}

uint64_t sub_10014F14C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v5 = swift_allocObject(v4, 185, 7);
    sub_1001C2530(v3);
    v6 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v6);
  }
  v7 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v7 + 152, v9, 1, 0);
  *(_QWORD *)(v7 + 152) = 0;
  *(_BYTE *)(v7 + 160) = 1;
  return result;
}

uint64_t sub_10014F1E4()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess(v1 + 161, v3, 0, 0);
  if (*(_BYTE *)(v1 + 161) == 8)
    return 0;
  else
    return *(unsigned __int8 *)(v1 + 161);
}

uint64_t sub_10014F234(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v7 = swift_allocObject(v6, 185, 7);
    sub_1001C2530(v5);
    v8 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v8);
  }
  v9 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v9 + 161, v11, 1, 0);
  *(_BYTE *)(v9 + 161) = a1;
  return result;
}

void (*sub_10014F2D0(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 161, v3, 0, 0);
  v6 = *(unsigned __int8 *)(v5 + 161);
  if (v6 == 8)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_10014F34C;
}

void sub_10014F34C(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 80);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v11 = swift_allocObject(v10, 185, 7);
    sub_1001C2530(v9);
    v12 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v12);
  }
LABEL_4:
  v13 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80)) + 161);
  swift_beginAccess(v13, v6, 1, 0);
  *v13 = v4;
  free((void *)v3);
}

BOOL sub_10014F418()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess(v1 + 161, v3, 0, 0);
  return *(_BYTE *)(v1 + 161) != 8;
}

uint64_t sub_10014F468()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v5 = swift_allocObject(v4, 185, 7);
    sub_1001C2530(v3);
    v6 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v6);
  }
  v7 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v7 + 161, v9, 1, 0);
  *(_BYTE *)(v7 + 161) = 8;
  return result;
}

uint64_t sub_10014F4FC()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess(v1 + 162, v3, 0, 0);
  if (*(_BYTE *)(v1 + 162) == 17)
    return 0;
  else
    return *(unsigned __int8 *)(v1 + 162);
}

uint64_t sub_10014F54C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v7 = swift_allocObject(v6, 185, 7);
    sub_1001C2530(v5);
    v8 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v8);
  }
  v9 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v9 + 162, v11, 1, 0);
  *(_BYTE *)(v9 + 162) = a1;
  return result;
}

void (*sub_10014F5E8(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 162, v3, 0, 0);
  v6 = *(unsigned __int8 *)(v5 + 162);
  if (v6 == 17)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_10014F664;
}

void sub_10014F664(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 80);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v11 = swift_allocObject(v10, 185, 7);
    sub_1001C2530(v9);
    v12 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v12);
  }
LABEL_4:
  v13 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80)) + 162);
  swift_beginAccess(v13, v6, 1, 0);
  *v13 = v4;
  free((void *)v3);
}

BOOL sub_10014F730()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess(v1 + 162, v3, 0, 0);
  return *(_BYTE *)(v1 + 162) != 17;
}

uint64_t sub_10014F780()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v5 = swift_allocObject(v4, 185, 7);
    sub_1001C2530(v3);
    v6 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v6);
  }
  v7 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v7 + 162, v9, 1, 0);
  *(_BYTE *)(v7 + 162) = 17;
  return result;
}

uint64_t sub_10014F814()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess(v1 + 163, v3, 0, 0);
  return *(_BYTE *)(v1 + 163) & 1;
}

uint64_t sub_10014F860(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v7 = swift_allocObject(v6, 185, 7);
    sub_1001C2530(v5);
    v8 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v8);
  }
  v9 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v9 + 163, v11, 1, 0);
  *(_BYTE *)(v9 + 163) = a1 & 1;
  return result;
}

void (*sub_10014F900(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 163, v3, 0, 0);
  *((_BYTE *)v3 + 84) = *(_BYTE *)(v5 + 163) & 1;
  return sub_10014F978;
}

void sub_10014F978(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 80);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v11 = swift_allocObject(v10, 185, 7);
    sub_1001C2530(v9);
    v12 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v12);
  }
LABEL_4:
  v13 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess(v13 + 163, v6, 1, 0);
  *(_BYTE *)(v13 + 163) = v4;
  free((void *)v3);
}

BOOL sub_10014FA3C()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess(v1 + 163, v3, 0, 0);
  return *(_BYTE *)(v1 + 163) != 2;
}

uint64_t sub_10014FA8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v5 = swift_allocObject(v4, 185, 7);
    sub_1001C2530(v3);
    v6 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v6);
  }
  v7 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v7 + 163, v9, 1, 0);
  *(_BYTE *)(v7 + 163) = 2;
  return result;
}

uint64_t sub_10014FB20()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess(v1 + 164, v3, 0, 0);
  return *(_BYTE *)(v1 + 164) & 1;
}

uint64_t sub_10014FB6C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v7 = swift_allocObject(v6, 185, 7);
    sub_1001C2530(v5);
    v8 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v8);
  }
  v9 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v9 + 164, v11, 1, 0);
  *(_BYTE *)(v9 + 164) = a1 & 1;
  return result;
}

void (*sub_10014FC0C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 164, v3, 0, 0);
  *((_BYTE *)v3 + 84) = *(_BYTE *)(v5 + 164) & 1;
  return sub_10014FC84;
}

void sub_10014FC84(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 80);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v11 = swift_allocObject(v10, 185, 7);
    sub_1001C2530(v9);
    v12 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v12);
  }
LABEL_4:
  v13 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess(v13 + 164, v6, 1, 0);
  *(_BYTE *)(v13 + 164) = v4;
  free((void *)v3);
}

BOOL sub_10014FD48()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess(v1 + 164, v3, 0, 0);
  return *(_BYTE *)(v1 + 164) != 2;
}

uint64_t sub_10014FD98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v5 = swift_allocObject(v4, 185, 7);
    sub_1001C2530(v3);
    v6 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v6);
  }
  v7 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v7 + 164, v9, 1, 0);
  *(_BYTE *)(v7 + 164) = 2;
  return result;
}

uint64_t sub_10014FE2C()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess(v1 + 168, v3, 0, 0);
  if (*(_BYTE *)(v1 + 176))
    return 0;
  else
    return *(_QWORD *)(v1 + 168);
}

uint64_t sub_10014FE80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v7 = swift_allocObject(v6, 185, 7);
    sub_1001C2530(v5);
    v8 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v8);
  }
  v9 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v9 + 168, v11, 1, 0);
  *(_QWORD *)(v9 + 168) = a1;
  *(_BYTE *)(v9 + 176) = 0;
  return result;
}

void (*sub_10014FF20(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 168, v3, 0, 0);
  v6 = *(_QWORD *)(v5 + 168);
  if (*(_BYTE *)(v5 + 176))
    v6 = 0;
  v3[9] = v6;
  return sub_10014FFA0;
}

void sub_10014FFA0(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 88);
    v8 = *(_QWORD *)(v3 + 80);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v11 = swift_allocObject(v10, 185, 7);
    sub_1001C2530(v9);
    v12 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v12);
  }
LABEL_4:
  v13 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v13 + 168, v6, 1, 0);
  *(_QWORD *)(v13 + 168) = v4;
  *(_BYTE *)(v13 + 176) = 0;
  free((void *)v3);
}

BOOL sub_10015006C()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess(v1 + 168, v3, 0, 0);
  return (*(_BYTE *)(v1 + 176) & 1) == 0;
}

uint64_t sub_1001500BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v5 = swift_allocObject(v4, 185, 7);
    sub_1001C2530(v3);
    v6 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v6);
  }
  v7 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v7 + 168, v9, 1, 0);
  *(_QWORD *)(v7 + 168) = 0;
  *(_BYTE *)(v7 + 176) = 1;
  return result;
}

uint64_t sub_100150154()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess(v1 + 180, v3, 0, 0);
  if (*(_BYTE *)(v1 + 184))
    return 0;
  else
    return *(unsigned int *)(v1 + 180);
}

uint64_t sub_1001501A8(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v7 = swift_allocObject(v6, 185, 7);
    sub_1001C2530(v5);
    v8 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v8);
  }
  v9 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v9 + 180, v11, 1, 0);
  *(_DWORD *)(v9 + 180) = a1;
  *(_BYTE *)(v9 + 184) = 0;
  return result;
}

void (*sub_100150248(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 180, v3, 0, 0);
  v6 = *(_DWORD *)(v5 + 180);
  if (*(_BYTE *)(v5 + 184))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_1001502C8;
}

void sub_1001502C8(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 84);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v11 = swift_allocObject(v10, 185, 7);
    sub_1001C2530(v9);
    v12 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v12);
  }
LABEL_4:
  v13 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v13 + 180, v6, 1, 0);
  *(_DWORD *)(v13 + 180) = v4;
  *(_BYTE *)(v13 + 184) = 0;
  free((void *)v3);
}

BOOL sub_100150394()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess(v1 + 180, v3, 0, 0);
  return (*(_BYTE *)(v1 + 184) & 1) == 0;
}

uint64_t sub_1001503E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v5 = swift_allocObject(v4, 185, 7);
    sub_1001C2530(v3);
    v6 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v6);
  }
  v7 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v7 + 180, v9, 1, 0);
  *(_DWORD *)(v7 + 180) = 0;
  *(_BYTE *)(v7 + 184) = 1;
  return result;
}

uint64_t sub_10015047C@<X0>(uint64_t a1@<X8>)
{
  return sub_100023FF4(type metadata accessor for Proto_Gnss_Emergency_SummaryReport, &qword_1003B0970, &qword_1003B0978, (uint64_t)sub_1001883EC, a1);
}

uint64_t sub_1001504A0()
{
  return sub_100036594(&qword_1003B0970, &qword_1003B0978, (uint64_t)sub_1001883EC);
}

uint64_t sub_1001504BC()
{
  return sub_100019188(type metadata accessor for Proto_Gnss_Emergency_SuplConfig);
}

uint64_t sub_1001504C8(int a1)
{
  return sub_1000191C8(a1, type metadata accessor for Proto_Gnss_Emergency_SuplConfig);
}

uint64_t (*sub_1001504D4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100150524()
{
  return sub_100019258(type metadata accessor for Proto_Gnss_Emergency_SuplConfig);
}

uint64_t sub_100150530()
{
  return sub_100019294(type metadata accessor for Proto_Gnss_Emergency_SuplConfig);
}

uint64_t sub_10015053C()
{
  return sub_10009E7A8(type metadata accessor for Proto_Gnss_Emergency_SuplConfig);
}

uint64_t sub_100150548(uint64_t a1, uint64_t a2)
{
  return sub_10009E808(a1, a2, type metadata accessor for Proto_Gnss_Emergency_SuplConfig);
}

uint64_t (*sub_100150554(uint64_t a1))(uint64_t *, char)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0) + 24);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain(v5);
  return sub_100096B34;
}

BOOL sub_1001505BC()
{
  return sub_10009E8C0(type metadata accessor for Proto_Gnss_Emergency_SuplConfig);
}

uint64_t sub_1001505C8()
{
  return sub_10009E8FC(type metadata accessor for Proto_Gnss_Emergency_SuplConfig);
}

uint64_t sub_1001505D4()
{
  return sub_10001A838(type metadata accessor for Proto_Gnss_Emergency_SuplConfig);
}

uint64_t sub_1001505E0(char a1)
{
  return sub_1000052EC(a1, type metadata accessor for Proto_Gnss_Emergency_SuplConfig);
}

uint64_t (*sub_1001505EC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_100150634()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0) + 28)) != 2;
}

uint64_t sub_10015065C()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_100150680()
{
  return sub_10001A90C(type metadata accessor for Proto_Gnss_Emergency_SuplConfig);
}

uint64_t sub_10015068C(char a1)
{
  return sub_10001A940(a1, type metadata accessor for Proto_Gnss_Emergency_SuplConfig);
}

uint64_t (*sub_100150698(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0) + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1001506E0()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0) + 32)) != 2;
}

uint64_t sub_100150708()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 2;
  return result;
}

uint64_t sub_10015072C()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0) + 36)) & 1;
}

uint64_t sub_100150750(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0);
  *(_BYTE *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*sub_10015077C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0) + 36);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1001507C4()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0) + 36)) != 2;
}

uint64_t sub_1001507EC()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0);
  *(_BYTE *)(v0 + *(int *)(result + 36)) = 2;
  return result;
}

uint64_t sub_100150810()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0) + 40)) & 1;
}

uint64_t sub_100150834(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0);
  *(_BYTE *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*sub_100150860(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0) + 40);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1001508A8()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0) + 40)) != 2;
}

uint64_t sub_1001508D0()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0);
  *(_BYTE *)(v0 + *(int *)(result + 40)) = 2;
  return result;
}

int *sub_1001508F4@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  _QWORD *v4;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0);
  v3 = a1 + result[5];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = (_QWORD *)(a1 + result[6]);
  *v4 = 0;
  v4[1] = 0;
  *(_BYTE *)(a1 + result[7]) = 2;
  *(_BYTE *)(a1 + result[8]) = 2;
  *(_BYTE *)(a1 + result[9]) = 2;
  *(_BYTE *)(a1 + result[10]) = 2;
  return result;
}

uint64_t sub_100150960()
{
  return sub_10001A638(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_10015096C(char a1)
{
  return sub_10001A66C(a1, type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t (*sub_100150978(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1001509C0()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0) + 20)) != 2;
}

uint64_t sub_1001509E8()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_100150A0C()
{
  return sub_10002DF3C(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150A18(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t (*sub_100150A24(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100150A74()
{
  return sub_100027768(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150A80()
{
  return sub_1000277A4(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150A8C()
{
  return sub_1000B8DB4(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150A98(int a1)
{
  return sub_1000B8DF4(a1, type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t (*sub_100150AA4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100150AF4()
{
  return sub_100020B70(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150B00()
{
  return sub_100020BAC(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150B0C()
{
  return sub_1000A9E40(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150B18(int a1)
{
  return sub_1000A9E80(a1, type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t (*sub_100150B24(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0) + 32);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100150B74()
{
  return sub_1000278D8(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150B80()
{
  return sub_100027914(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150B8C()
{
  return sub_1000B4FE0(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150B98(int a1)
{
  return sub_1000B5020(a1, type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t (*sub_100150BA4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0) + 36);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100150BF4()
{
  return sub_10002822C(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150C00()
{
  return sub_100028268(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150C0C()
{
  return sub_1001514C4(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150C18(int a1)
{
  return sub_100151504(a1, type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t (*sub_100150C24(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0) + 40);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100150C74()
{
  return sub_1000336EC(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150C80()
{
  return sub_100033728(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150C8C()
{
  return sub_1000A6D84(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150C98(int a1)
{
  return sub_1000A6DC4(a1, type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t (*sub_100150CA4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0) + 44);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100150CF4()
{
  return sub_100033824(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150D00()
{
  return sub_100033860(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150D0C()
{
  return sub_100151698(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150D18(int a1)
{
  return sub_1001516D8(a1, type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t (*sub_100150D24(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0) + 48);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100150D74()
{
  return sub_1000B3C00(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150D80()
{
  return sub_1000B3C3C(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150D8C()
{
  return sub_10015DA70(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150D98(int a1)
{
  return sub_10015DAB0(a1, type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t (*sub_100150DA4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0) + 52);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100150DF4()
{
  return sub_10015DB40(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150E00()
{
  return sub_10015DB7C(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150E0C()
{
  return sub_10015DBB8(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150E18(int a1)
{
  return sub_10015DBF8(a1, type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t (*sub_100150E24(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0) + 56);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100150E74()
{
  return sub_10015DC88(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t sub_100150E80()
{
  return sub_10015DCC4(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

int *sub_100150E8C@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0);
  *(_BYTE *)(a1 + result[5]) = 2;
  v3 = a1 + result[6];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = a1 + result[7];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = a1 + result[8];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = a1 + result[9];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a1 + result[10];
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  v8 = a1 + result[11];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + result[12];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + result[13];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1 + result[14];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  return result;
}

uint64_t sub_100150F54()
{
  return sub_10001A638(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t sub_100150F60(char a1)
{
  return sub_10001A66C(a1, type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t (*sub_100150F6C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo(0) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_100150FB4()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo(0) + 20)) != 2;
}

uint64_t sub_100150FDC()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo(0);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_100151000()
{
  return sub_10002DF3C(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t sub_10015100C(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t (*sub_100151018(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100151068()
{
  return sub_100027768(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t sub_100151074()
{
  return sub_1000277A4(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t sub_100151080()
{
  return sub_1000B8DB4(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t sub_10015108C(int a1)
{
  return sub_1000B8DF4(a1, type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t (*sub_100151098(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1001510E8()
{
  return sub_100020B70(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t sub_1001510F4()
{
  return sub_100020BAC(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t sub_100151100()
{
  return sub_1000A9E40(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t sub_10015110C(int a1)
{
  return sub_1000A9E80(a1, type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t (*sub_100151118(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo(0) + 32);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100151168()
{
  return sub_1000278D8(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t sub_100151174()
{
  return sub_100027914(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t sub_100151180()
{
  return sub_1000B4FE0(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t sub_10015118C(int a1)
{
  return sub_1000B5020(a1, type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t (*sub_100151198(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo(0) + 36);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1001511E8()
{
  return sub_10002822C(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t sub_1001511F4()
{
  return sub_100028268(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

int *sub_100151200@<X0>(uint64_t a1@<X8>)
{
  return sub_100152430(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo, a1);
}

uint64_t sub_10015120C()
{
  return sub_10001A638(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t sub_100151218(char a1)
{
  return sub_10001A66C(a1, type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t (*sub_100151224(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10015126C()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0) + 20)) != 2;
}

uint64_t sub_100151294()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_1001512B8()
{
  return sub_10002DF3C(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t sub_1001512C4(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t (*sub_1001512D0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100151320()
{
  return sub_100027768(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t sub_10015132C()
{
  return sub_1000277A4(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t sub_100151338()
{
  return sub_1000B8DB4(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t sub_100151344(int a1)
{
  return sub_1000B8DF4(a1, type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t (*sub_100151350(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1001513A0()
{
  return sub_100020B70(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t sub_1001513AC()
{
  return sub_100020BAC(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t sub_1001513B8()
{
  return sub_1000A9E40(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t sub_1001513C4(int a1)
{
  return sub_1000A9E80(a1, type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t (*sub_1001513D0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0) + 32);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100151420()
{
  return sub_1000278D8(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t sub_10015142C()
{
  return sub_100027914(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t sub_100151438()
{
  return sub_1000B4FE0(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t sub_100151444(int a1)
{
  return sub_1000B5020(a1, type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t (*sub_100151450(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0) + 36);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1001514A0()
{
  return sub_10002822C(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t sub_1001514AC()
{
  return sub_100028268(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t sub_1001514B8()
{
  return sub_1001514C4(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t sub_1001514C4(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  _BYTE *v2;

  v2 = (_BYTE *)(v1 + *(int *)(a1(0) + 40));
  if (v2[4])
    return 0;
  else
    return *(unsigned int *)v2;
}

uint64_t sub_1001514F8(int a1)
{
  return sub_100151504(a1, type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t sub_100151504(int a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a2(0);
  v5 = v2 + *(int *)(result + 40);
  *(_DWORD *)v5 = a1;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_100151538(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0) + 40);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100151588()
{
  return sub_1000336EC(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t sub_100151594()
{
  return sub_100033728(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t sub_1001515A0()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0) + 44));
  if (v1 == 4)
    return 0;
  else
    return v1;
}

uint64_t sub_1001515C8(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0);
  *(_BYTE *)(v1 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*sub_1001515F4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0) + 44);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_100151640()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0) + 44)) != 4;
}

uint64_t sub_100151668()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0);
  *(_BYTE *)(v0 + *(int *)(result + 44)) = 4;
  return result;
}

uint64_t sub_10015168C()
{
  return sub_100151698(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t sub_100151698(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  _BYTE *v2;

  v2 = (_BYTE *)(v1 + *(int *)(a1(0) + 48));
  if (v2[4])
    return 0;
  else
    return *(unsigned int *)v2;
}

uint64_t sub_1001516CC(int a1)
{
  return sub_1001516D8(a1, type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t sub_1001516D8(int a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a2(0);
  v5 = v2 + *(int *)(result + 48);
  *(_DWORD *)v5 = a1;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_10015170C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0) + 48);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10015175C()
{
  return sub_1000B3C00(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t sub_100151768()
{
  return sub_1000B3C3C(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

int *sub_100151774@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0);
  *(_BYTE *)(a1 + result[5]) = 2;
  v3 = a1 + result[6];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = a1 + result[7];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = a1 + result[8];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = a1 + result[9];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a1 + result[10];
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  *(_BYTE *)(a1 + result[11]) = 4;
  v8 = a1 + result[12];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  return result;
}

uint64_t sub_100151818()
{
  return sub_10017A604(type metadata accessor for Proto_Gnss_Emergency_LocationId);
}

uint64_t sub_100151824(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_LocationId(0);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_100151850(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocationId(0) + 32);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 7)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10015189C()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocationId(0) + 32)) != 7;
}

uint64_t sub_1001518C4()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_LocationId(0);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 7;
  return result;
}

uint64_t sub_1001518E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocationId(0) + 28);
  v4 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_100151930(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocationId(0) + 28);
  v4 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*sub_100151978())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for Proto_Gnss_Emergency_LocationId(0);
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1001519A0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  *a1 = &_swiftEmptyArrayStorage;
  a1[1] = &_swiftEmptyArrayStorage;
  a1[2] = &_swiftEmptyArrayStorage;
  v2 = type metadata accessor for Proto_Gnss_Emergency_LocationId(0);
  result = UnknownStorage.init()();
  *((_BYTE *)a1 + *(int *)(v2 + 32)) = 7;
  return result;
}

uint64_t sub_1001519F0()
{
  return sub_100019188(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementRequest);
}

uint64_t sub_1001519FC(int a1)
{
  return sub_1000191C8(a1, type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementRequest);
}

uint64_t (*sub_100151A08(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementRequest(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100151A58()
{
  return sub_100019258(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementRequest);
}

uint64_t sub_100151A64()
{
  return sub_100019294(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementRequest);
}

uint64_t sub_100151A70()
{
  return sub_10001A738(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementRequest);
}

uint64_t sub_100151A7C(char a1)
{
  return sub_10001A76C(a1, type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementRequest);
}

uint64_t (*sub_100151A88(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementRequest(0) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_100151AD0()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementRequest(0) + 24)) != 2;
}

uint64_t sub_100151AF8()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementRequest(0);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_100151B1C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  UnknownStorage.init()();
  result = type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementRequest(0);
  v3 = a1 + *(int *)(result + 20);
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  *(_BYTE *)(a1 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_100151B64()
{
  uint64_t v0;
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0) + 20));
  v2 = v1[1];
  if (v2 >> 60 == 15)
    v3 = 0;
  else
    v3 = *v1;
  sub_10005F298(*v1, v2);
  return v3;
}

uint64_t sub_100151BB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = v2 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0) + 20);
  result = sub_10005F2AC(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
  *(_QWORD *)v5 = a1;
  *(_QWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t (*sub_100151BF4(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0) + 20);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = *v4;
  v6 = v4[1];
  if (v6 >> 60 == 15)
    v7 = 0;
  else
    v7 = *v4;
  v8 = 0xC000000000000000;
  if (v6 >> 60 != 15)
    v8 = v6;
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v8;
  sub_10005F298(v5, v6);
  return sub_100151C54;
}

uint64_t sub_100151C54(uint64_t a1, char a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) + *(int *)(a1 + 24);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)v3;
  v6 = *(_QWORD *)(v3 + 8);
  if ((a2 & 1) != 0)
  {
    sub_100017EF8(*(_QWORD *)a1, v2);
    sub_10005F2AC(v5, v6);
    *(_QWORD *)v3 = v4;
    *(_QWORD *)(v3 + 8) = v2;
    return sub_100017F3C(v4, v2);
  }
  else
  {
    result = sub_10005F2AC(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    *(_QWORD *)v3 = v4;
    *(_QWORD *)(v3 + 8) = v2;
  }
  return result;
}

BOOL sub_100151CDC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0) + 20) + 8) >> 60 != 15;
}

double sub_100151D0C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0) + 20);
  sub_10005F2AC(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  result = 0.0;
  *(_OWORD *)v1 = xmmword_1002C40A0;
  return result;
}

uint64_t sub_100151D48()
{
  return sub_10001A738(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement);
}

uint64_t sub_100151D54(char a1)
{
  return sub_10001A76C(a1, type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement);
}

uint64_t (*sub_100151D60(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_100151DA8()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0) + 24)) != 2;
}

uint64_t sub_100151DD0()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_100151DF4()
{
  return sub_10001A838(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement);
}

uint64_t sub_100151E00(char a1)
{
  return sub_1000052EC(a1, type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement);
}

uint64_t (*sub_100151E0C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_100151E54()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0) + 28)) != 2;
}

uint64_t sub_100151E7C()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_100151EA0()
{
  return sub_1000A9E40(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement);
}

uint64_t sub_100151EAC(int a1)
{
  return sub_1000A9E80(a1, type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement);
}

uint64_t (*sub_100151EB8(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0) + 32);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100151F08()
{
  return sub_1000278D8(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement);
}

uint64_t sub_100151F14()
{
  return sub_100027914(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement);
}

uint64_t sub_100151F20()
{
  return sub_1000B4FE0(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement);
}

uint64_t sub_100151F2C(int a1)
{
  return sub_1000B5020(a1, type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement);
}

uint64_t (*sub_100151F38(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0) + 36);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100151F88()
{
  return sub_10002822C(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement);
}

uint64_t sub_100151F94()
{
  return sub_100028268(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement);
}

double sub_100151FA0@<D0>(uint64_t a1@<X8>)
{
  int *v2;
  double result;
  uint64_t v4;
  uint64_t v5;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0);
  result = 0.0;
  *(_OWORD *)(a1 + v2[5]) = xmmword_1002C40A0;
  *(_BYTE *)(a1 + v2[6]) = 2;
  *(_BYTE *)(a1 + v2[7]) = 2;
  v4 = a1 + v2[8];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = a1 + v2[9];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  return result;
}

uint64_t sub_100152010()
{
  return 0;
}

uint64_t sub_10015201C()
{
  return sub_10017C85C(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementList);
}

uint64_t sub_100152028(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementList(0);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_100152054(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementList(0) + 24);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 6)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1001520A0()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementList(0) + 24)) != 6;
}

uint64_t sub_1001520C8()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementList(0);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 6;
  return result;
}

uint64_t sub_1001520EC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000053C4(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementList, a1);
}

uint64_t sub_1001520F8(uint64_t a1)
{
  return sub_10000541C(a1, type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementList);
}

uint64_t (*sub_100152104())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementList(0);
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_10015212C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  *a1 = &_swiftEmptyArrayStorage;
  v2 = type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementList(0);
  result = UnknownStorage.init()();
  *((_BYTE *)a1 + *(int *)(v2 + 24)) = 6;
  return result;
}

uint64_t sub_100152178()
{
  return sub_10001A638(type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t sub_100152184(char a1)
{
  return sub_10001A66C(a1, type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t (*sub_100152190(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_QoP(0) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1001521D8()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_QoP(0) + 20)) != 2;
}

uint64_t sub_100152200()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_QoP(0);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_100152224()
{
  return sub_10002DF3C(type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t sub_100152230(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t (*sub_10015223C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_QoP(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10015228C()
{
  return sub_100027768(type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t sub_100152298()
{
  return sub_1000277A4(type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t sub_1001522A4()
{
  return sub_1000B8DB4(type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t sub_1001522B0(int a1)
{
  return sub_1000B8DF4(a1, type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t (*sub_1001522BC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_QoP(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10015230C()
{
  return sub_100020B70(type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t sub_100152318()
{
  return sub_100020BAC(type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t sub_100152324()
{
  return sub_1000A9E40(type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t sub_100152330(int a1)
{
  return sub_1000A9E80(a1, type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t (*sub_10015233C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_QoP(0) + 32);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10015238C()
{
  return sub_1000278D8(type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t sub_100152398()
{
  return sub_100027914(type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t sub_1001523A4()
{
  return sub_1000B4FE0(type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t sub_1001523B0(int a1)
{
  return sub_1000B5020(a1, type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t (*sub_1001523BC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_QoP(0) + 36);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10015240C()
{
  return sub_10002822C(type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t sub_100152418()
{
  return sub_100028268(type metadata accessor for Proto_Gnss_Emergency_QoP);
}

int *sub_100152424@<X0>(uint64_t a1@<X8>)
{
  return sub_100152430(type metadata accessor for Proto_Gnss_Emergency_QoP, a1);
}

int *sub_100152430@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  int *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  UnknownStorage.init()();
  result = (int *)a1(0);
  *(_BYTE *)(a2 + result[5]) = 2;
  v5 = a2 + result[6];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = a2 + result[7];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a2 + result[8];
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  v8 = a2 + result[9];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  return result;
}

uint64_t sub_1001524AC()
{
  return sub_10001A738(type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
}

uint64_t sub_1001524B8(char a1)
{
  return sub_10001A76C(a1, type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
}

uint64_t (*sub_1001524C4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10015250C()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0) + 24)) != 2;
}

uint64_t sub_100152534()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_100152558()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0) + 28));
  if (v1 == 5)
    return 0;
  else
    return v1;
}

uint64_t sub_100152580(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_1001525AC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0) + 28);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1001525F8()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0) + 28)) != 5;
}

uint64_t sub_100152620()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 5;
  return result;
}

uint64_t sub_100152644()
{
  return sub_1001546DC(type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
}

uint64_t sub_100152650(uint64_t a1, uint64_t a2)
{
  return sub_10015473C(a1, a2, type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
}

uint64_t (*sub_10015265C(uint64_t a1))(uint64_t *, char)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0) + 32);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain(v5);
  return sub_100096B34;
}

BOOL sub_1001526C4()
{
  return sub_1001547F4(type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
}

uint64_t sub_1001526D0()
{
  return sub_100154830(type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
}

uint64_t sub_1001526DC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000053C4(type metadata accessor for Proto_Gnss_Emergency_SLPAddress, a1);
}

uint64_t sub_1001526E8(uint64_t a1)
{
  return sub_10000541C(a1, type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
}

uint64_t (*sub_1001526F4())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0);
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_10015271C@<X0>(_QWORD *a1@<X8>)
{
  int *v2;
  uint64_t result;
  _QWORD *v4;

  *a1 = &_swiftEmptyArrayStorage;
  v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0);
  result = UnknownStorage.init()();
  *((_BYTE *)a1 + v2[6]) = 2;
  *((_BYTE *)a1 + v2[7]) = 5;
  v4 = (_QWORD *)((char *)a1 + v2[8]);
  *v4 = 0;
  v4[1] = 0;
  return result;
}

uint64_t sub_100152780()
{
  return sub_10001A638(type metadata accessor for Proto_Gnss_Emergency_Notification);
}

uint64_t sub_10015278C(char a1)
{
  return sub_10001A66C(a1, type metadata accessor for Proto_Gnss_Emergency_Notification);
}

uint64_t (*sub_100152798(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Notification(0) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1001527E0()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Notification(0) + 20)) != 2;
}

uint64_t sub_100152808()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_Notification(0);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_10015282C()
{
  return sub_10001A738(type metadata accessor for Proto_Gnss_Emergency_Notification);
}

uint64_t sub_100152838(char a1)
{
  return sub_10001A76C(a1, type metadata accessor for Proto_Gnss_Emergency_Notification);
}

uint64_t (*sub_100152844(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Notification(0) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10015288C()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Notification(0) + 24)) != 2;
}

uint64_t sub_1001528B4()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_Notification(0);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_1001528D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  UnknownStorage.init()();
  result = type metadata accessor for Proto_Gnss_Emergency_Notification(0);
  *(_BYTE *)(a1 + *(int *)(result + 20)) = 2;
  *(_BYTE *)(a1 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_100152914@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t inited;
  int *v7;
  _QWORD *v8;
  uint64_t v10;

  v3 = sub_1000039AC(&qword_100375540);
  __chkstk_darwin(v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  inited = type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0);
  sub_10000E660(v1 + *(int *)(inited + 20), (uint64_t)v5, &qword_100375540);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, (uint64_t)a1, type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
  *a1 = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  *((_BYTE *)a1 + v7[6]) = 2;
  *((_BYTE *)a1 + v7[7]) = 5;
  v8 = (_QWORD *)((char *)a1 + v7[8]);
  *v8 = 0;
  v8[1] = 0;
  return sub_100015704((uint64_t)v5, &qword_100375540);
}

uint64_t sub_100152A24(uint64_t a1)
{
  return sub_100033E58(a1, type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension, &qword_100375540, type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
}

void (*sub_100152A40(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_100375540);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_100375540);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = &_swiftEmptyArrayStorage;
    UnknownStorage.init()();
    *((_BYTE *)v9 + v6[6]) = 2;
    *((_BYTE *)v9 + v6[7]) = 5;
    v11 = (_QWORD *)((char *)v9 + v6[8]);
    *v11 = 0;
    v11[1] = 0;
    sub_100015704((uint64_t)v5, &qword_100375540);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
  }
  return sub_100152B90;
}

void sub_100152B90(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_100375540, type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
}

BOOL sub_100152BA4()
{
  return sub_100031310(&qword_100375540, type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension, type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
}

uint64_t sub_100152BC0()
{
  return sub_1000313E8(type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension, &qword_100375540, type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
}

uint64_t sub_100152BDC()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0) + 24));
  if (v1 == 4)
    return 0;
  else
    return v1;
}

uint64_t sub_100152C04(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_100152C30(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0) + 24);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_100152C7C()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0) + 24)) != 4;
}

uint64_t sub_100152CA4()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 4;
  return result;
}

uint64_t sub_100152CC8@<X0>(uint64_t a1@<X8>)
{
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  UnknownStorage.init()();
  inited = type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0);
  v3 = a1 + *(int *)(inited + 20);
  v4 = type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(_BYTE *)(a1 + *(int *)(inited + 24)) = 4;
  return result;
}

uint64_t sub_100152D34@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for Proto_Gnss_Emergency_SLPAddress, a1);
}

uint64_t sub_100152D40()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20));
  swift_beginAccess(v1 + 16, v3, 0, 0);
  if (*(_BYTE *)(v1 + 16) == 18)
    return 0;
  else
    return *(unsigned __int8 *)(v1 + 16);
}

uint64_t sub_100152D90(char a1)
{
  return sub_10016D4D4(a1, type metadata accessor for Proto_Gnss_Emergency_Init, type metadata accessor for Proto_Gnss_Emergency_Init._StorageClass, (void (*)(uint64_t))sub_10018E2E4);
}

void (*sub_100152DAC(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 16, v3, 0, 0);
  v6 = *(unsigned __int8 *)(v5 + 16);
  if (v6 == 18)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_100152E28;
}

void sub_100152E28(uint64_t *a1, char a2)
{
  sub_10016D610(a1, a2, type metadata accessor for Proto_Gnss_Emergency_Init._StorageClass, (void (*)(uint64_t))sub_10018E2E4);
}

BOOL sub_100152E3C()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20));
  swift_beginAccess(v1 + 16, v3, 0, 0);
  return *(_BYTE *)(v1 + 16) != 18;
}

uint64_t sub_100152E8C()
{
  return sub_10016D758(type metadata accessor for Proto_Gnss_Emergency_Init, type metadata accessor for Proto_Gnss_Emergency_Init._StorageClass, (void (*)(uint64_t))sub_10018E2E4, 18);
}

uint64_t sub_100152EAC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v14[24];

  v3 = sub_1000039AC(&qword_100375548);
  __chkstk_darwin(v3);
  v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__qop;
  swift_beginAccess(v6, v14, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_100375548);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_QoP(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_QoP);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + v7[5]) = 2;
  v8 = a1 + v7[6];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v7[7];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v7[8];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1 + v7[9];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  return sub_100015704((uint64_t)v5, &qword_100375548);
}

uint64_t sub_100153000(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_100375548);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for Proto_Gnss_Emergency_Init._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10018E2E4(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_QoP);
  v17 = type metadata accessor for Proto_Gnss_Emergency_QoP(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_100375548);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__qop;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__qop, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_100375548);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100153180(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_100375548);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_QoP(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__qop;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_100375548);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v11 = &v9[v6[6]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[7]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[8]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    v14 = &v9[v6[9]];
    *(_DWORD *)v14 = 0;
    v14[4] = 1;
    sub_100015704((uint64_t)v5, &qword_100375548);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_QoP);
  }
  return sub_100153304;
}

void sub_100153304(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_100153000, type metadata accessor for Proto_Gnss_Emergency_QoP);
}

BOOL sub_100153318()
{
  return sub_10001CFF4(&qword_100375548, type metadata accessor for Proto_Gnss_Emergency_Init, &OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__qop, type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t sub_10015333C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_100375548);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for Proto_Gnss_Emergency_Init._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10018E2E4(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for Proto_Gnss_Emergency_QoP(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__qop;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__qop, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_100375548);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10015346C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  _QWORD *v8;
  _BYTE v11[24];

  v3 = sub_1000039AC(&qword_100375540);
  __chkstk_darwin(v3);
  v5 = &v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__slpAddress;
  swift_beginAccess(v6, v11, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_100375540);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, (uint64_t)a1, type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
  *a1 = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  *((_BYTE *)a1 + v7[6]) = 2;
  *((_BYTE *)a1 + v7[7]) = 5;
  v8 = (_QWORD *)((char *)a1 + v7[8]);
  *v8 = 0;
  v8[1] = 0;
  return sub_100015704((uint64_t)v5, &qword_100375540);
}

uint64_t sub_1001535A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_100375540);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for Proto_Gnss_Emergency_Init._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10018E2E4(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
  v17 = type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_100375540);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__slpAddress;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__slpAddress, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_100375540);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100153724(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_100375540);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__slpAddress;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_100375540);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = &_swiftEmptyArrayStorage;
    UnknownStorage.init()();
    *((_BYTE *)v9 + v6[6]) = 2;
    *((_BYTE *)v9 + v6[7]) = 5;
    v11 = (_QWORD *)((char *)v9 + v6[8]);
    *v11 = 0;
    v11[1] = 0;
    sub_100015704((uint64_t)v5, &qword_100375540);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
  }
  return sub_10015388C;
}

void sub_10015388C(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_1001535A4, type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
}

BOOL sub_1001538A0()
{
  return sub_10001CFF4(&qword_100375540, type metadata accessor for Proto_Gnss_Emergency_Init, &OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__slpAddress, type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
}

uint64_t sub_1001538C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_100375540);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for Proto_Gnss_Emergency_Init._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10018E2E4(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__slpAddress;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__slpAddress, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_100375540);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1001539F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v10[24];

  v3 = sub_1000039AC(&qword_100375550);
  __chkstk_darwin(v3);
  v5 = &v10[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__notification;
  swift_beginAccess(v6, v10, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_100375550);
  v7 = type metadata accessor for Proto_Gnss_Emergency_Notification(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_Notification);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + *(int *)(v7 + 20)) = 2;
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = 2;
  return sub_100015704((uint64_t)v5, &qword_100375550);
}

uint64_t sub_100153B0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_100375550);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for Proto_Gnss_Emergency_Init._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10018E2E4(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_Notification);
  v17 = type metadata accessor for Proto_Gnss_Emergency_Notification(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_100375550);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__notification;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__notification, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_100375550);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100153C8C(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_100375550);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for Proto_Gnss_Emergency_Notification(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__notification;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_100375550);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[*(int *)(v6 + 20)] = 2;
    v9[*(int *)(v6 + 24)] = 2;
    sub_100015704((uint64_t)v5, &qword_100375550);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_Notification);
  }
  return sub_100153DD4;
}

void sub_100153DD4(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_100153B0C, type metadata accessor for Proto_Gnss_Emergency_Notification);
}

BOOL sub_100153DE8()
{
  return sub_10001CFF4(&qword_100375550, type metadata accessor for Proto_Gnss_Emergency_Init, &OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__notification, type metadata accessor for Proto_Gnss_Emergency_Notification);
}

uint64_t sub_100153E0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_100375550);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for Proto_Gnss_Emergency_Init._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10018E2E4(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for Proto_Gnss_Emergency_Notification(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__notification;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__notification, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_100375550);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100153F3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  _BYTE v12[24];

  v3 = sub_1000039AC(&qword_100375558);
  __chkstk_darwin(v3);
  v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__suplInitv2Extension;
  swift_beginAccess(v6, v12, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_100375558);
  inited = type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(inited - 8) + 48))(v5, 1, inited) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension);
  UnknownStorage.init()();
  v8 = a1 + *(int *)(inited + 20);
  v9 = type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *(_BYTE *)(a1 + *(int *)(inited + 24)) = 4;
  return sub_100015704((uint64_t)v5, &qword_100375558);
}

uint64_t sub_100154078(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t inited;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_100375558);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for Proto_Gnss_Emergency_Init._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10018E2E4(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension);
  inited = type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(inited - 8) + 56))(v9, 0, 1, inited);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_100375558);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__suplInitv2Extension;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__suplInitv2Extension, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_100375558);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1001541F8(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t inited;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_100375558);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  inited = type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0);
  v7 = *(_QWORD *)(inited - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__suplInitv2Extension;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_100375558);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, inited) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(inited + 20)];
    v12 = type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    v9[*(int *)(inited + 24)] = 4;
    sub_100015704((uint64_t)v5, &qword_100375558);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension);
  }
  return sub_100154364;
}

void sub_100154364(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_100154078, type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension);
}

BOOL sub_100154378()
{
  return sub_10001CFF4(&qword_100375558, type metadata accessor for Proto_Gnss_Emergency_Init, &OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__suplInitv2Extension, type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension);
}

uint64_t sub_10015439C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t inited;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_100375558);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for Proto_Gnss_Emergency_Init._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10018E2E4(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  inited = type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(inited - 8) + 56))(v4, 1, 1, inited);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__suplInitv2Extension;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__suplInitv2Extension, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_100375558);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1001544CC@<X0>(uint64_t a1@<X8>)
{
  return sub_100023FF4(type metadata accessor for Proto_Gnss_Emergency_Init, &qword_1003B09E8, &qword_1003B09F0, (uint64_t)sub_10018E1E4, a1);
}

uint64_t sub_1001544F0()
{
  return sub_100036594(&qword_1003B09E8, &qword_1003B09F0, (uint64_t)sub_10018E1E4);
}

uint64_t sub_10015450C()
{
  return sub_100019188(type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t sub_100154518(int a1)
{
  return sub_1000191C8(a1, type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t (*sub_100154524(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100154574()
{
  return sub_100019258(type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t sub_100154580()
{
  return sub_100019294(type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t sub_10015458C()
{
  return sub_10009E7A8(type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t sub_100154598(uint64_t a1, uint64_t a2)
{
  return sub_10009E808(a1, a2, type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t (*sub_1001545A4(uint64_t a1))(uint64_t *, char)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 24);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain(v5);
  return sub_100096B34;
}

BOOL sub_10015460C()
{
  return sub_10009E8C0(type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t sub_100154618()
{
  return sub_10009E8FC(type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t sub_100154624()
{
  return sub_10001A838(type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t sub_100154630(char a1)
{
  return sub_1000052EC(a1, type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t (*sub_10015463C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_100154684()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 28)) != 2;
}

uint64_t sub_1001546AC()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_SuplContext(0);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_1001546D0()
{
  return sub_1001546DC(type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t sub_1001546DC(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (uint64_t *)(v1 + *(int *)(a1(0) + 32));
  v3 = v2[1];
  if (v3)
    v4 = *v2;
  else
    v4 = 0;
  swift_bridgeObjectRetain(v3);
  return v4;
}

uint64_t sub_100154730(uint64_t a1, uint64_t a2)
{
  return sub_10015473C(a1, a2, type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t sub_10015473C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t result;

  v6 = (_QWORD *)(v3 + *(int *)(a3(0) + 32));
  result = swift_bridgeObjectRelease(v6[1]);
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*sub_100154780(uint64_t a1))(uint64_t *, char)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 32);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain(v5);
  return sub_100096B34;
}

BOOL sub_1001547E8()
{
  return sub_1001547F4(type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

BOOL sub_1001547F4(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1(0) + 32) + 8) != 0;
}

uint64_t sub_100154824()
{
  return sub_100154830(type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t sub_100154830(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;

  v2 = (_QWORD *)(v1 + *(int *)(a1(0) + 32));
  result = swift_bridgeObjectRelease(v2[1]);
  *v2 = 0;
  v2[1] = 0;
  return result;
}

uint64_t sub_100154868@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v10;

  v3 = sub_1000039AC(&qword_100375560);
  __chkstk_darwin(v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Proto_Gnss_Emergency_SuplContext(0);
  sub_10000E660(v1 + *(int *)(v6 + 36), (uint64_t)v5, &qword_100375560);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_Configuration(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_Configuration);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + v7[5]) = 2;
  *(_BYTE *)(a1 + v7[6]) = 2;
  v8 = a1 + v7[7];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  return sub_100015704((uint64_t)v5, &qword_100375560);
}

uint64_t sub_10015496C(uint64_t a1)
{
  return sub_10015D5C0(a1, type metadata accessor for Proto_Gnss_Emergency_SuplContext, &qword_100375560, type metadata accessor for Proto_Gnss_Emergency_Configuration);
}

void (*sub_100154988(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_100375560);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_Configuration(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 36);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_100375560);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v11 = &v9[v6[7]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    sub_100015704((uint64_t)v5, &qword_100375560);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_Configuration);
  }
  return sub_100154ACC;
}

void sub_100154ACC(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_100375560, type metadata accessor for Proto_Gnss_Emergency_Configuration);
}

BOOL sub_100154AE0()
{
  return sub_10015D7A4(&qword_100375560, type metadata accessor for Proto_Gnss_Emergency_SuplContext, type metadata accessor for Proto_Gnss_Emergency_Configuration);
}

uint64_t sub_100154AFC()
{
  return sub_10015D87C(type metadata accessor for Proto_Gnss_Emergency_SuplContext, &qword_100375560, type metadata accessor for Proto_Gnss_Emergency_Configuration);
}

uint64_t sub_100154B18()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 40));
  v2 = v1[1];
  if (v2)
    v3 = *v1;
  else
    v3 = 0;
  swift_bridgeObjectRetain(v2);
  return v3;
}

uint64_t sub_100154B68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 40));
  result = swift_bridgeObjectRelease(v5[1]);
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*sub_100154BAC(uint64_t a1))(uint64_t *, char)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 40);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain(v5);
  return sub_100096B34;
}

BOOL sub_100154C14()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 40) + 8) != 0;
}

uint64_t sub_100154C40()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t result;

  v1 = (_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 40));
  result = swift_bridgeObjectRelease(v1[1]);
  *v1 = 0;
  v1[1] = 0;
  return result;
}

uint64_t sub_100154C74()
{
  return sub_1000A3B24(type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t sub_100154C80(char a1)
{
  return sub_1000A3B58(a1, type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t (*sub_100154C8C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 44);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_100154CD4()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 44)) != 2;
}

uint64_t sub_100154CFC()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_SuplContext(0);
  *(_BYTE *)(v0 + *(int *)(result + 44)) = 2;
  return result;
}

uint64_t sub_100154D20()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 48)) & 1;
}

uint64_t sub_100154D44(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_SuplContext(0);
  *(_BYTE *)(v1 + *(int *)(result + 48)) = a1;
  return result;
}

uint64_t (*sub_100154D70(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 48);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_100154DB8()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 48)) != 2;
}

uint64_t sub_100154DE0()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_SuplContext(0);
  *(_BYTE *)(v0 + *(int *)(result + 48)) = 2;
  return result;
}

uint64_t sub_100154E04()
{
  return sub_10017E00C(type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t sub_100154E10(char a1)
{
  return sub_10017E040(a1, type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t (*sub_100154E1C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 52);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_100154E64()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 52)) != 2;
}

uint64_t sub_100154E8C()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_SuplContext(0);
  *(_BYTE *)(v0 + *(int *)(result + 52)) = 2;
  return result;
}

uint64_t sub_100154EB0@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD *v9;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_SuplContext(0);
  v3 = a1 + v2[5];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = (_QWORD *)(a1 + v2[6]);
  *v4 = 0;
  v4[1] = 0;
  *(_BYTE *)(a1 + v2[7]) = 2;
  v5 = (_QWORD *)(a1 + v2[8]);
  *v5 = 0;
  v5[1] = 0;
  v6 = a1 + v2[9];
  v7 = type metadata accessor for Proto_Gnss_Emergency_Configuration(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v9 = (_QWORD *)(a1 + v2[10]);
  *v9 = 0;
  v9[1] = 0;
  *(_BYTE *)(a1 + v2[11]) = 2;
  *(_BYTE *)(a1 + v2[12]) = 2;
  *(_BYTE *)(a1 + v2[13]) = 2;
  return result;
}

uint64_t sub_100154F6C@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for Proto_Gnss_Emergency_Configuration, a1);
}

uint64_t sub_100154F78()
{
  return sub_100159148(type metadata accessor for Proto_Gnss_Emergency_SessionStatus);
}

uint64_t sub_100154F84(int a1)
{
  return sub_100168EDC(a1, type metadata accessor for Proto_Gnss_Emergency_SessionStatus, type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass, (void (*)(uint64_t))sub_100191010);
}

void (*sub_100154FA0(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 16, v3, 0, 0);
  v6 = *(_DWORD *)(v5 + 16);
  if (*(_BYTE *)(v5 + 20))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_100155020;
}

void sub_100155020(uint64_t *a1, char a2)
{
  sub_100169020(a1, a2, type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass, (void (*)(uint64_t))sub_100191010);
}

BOOL sub_100155034()
{
  return sub_10002EDC0(type metadata accessor for Proto_Gnss_Emergency_SessionStatus);
}

uint64_t sub_100155040()
{
  return sub_10002EE30(type metadata accessor for Proto_Gnss_Emergency_SessionStatus, type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass, (void (*)(uint64_t))sub_100191010);
}

uint64_t sub_10015505C()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess(v1 + 21, v3, 0, 0);
  if (*(_BYTE *)(v1 + 21) == 18)
    return 0;
  else
    return *(unsigned __int8 *)(v1 + 21);
}

uint64_t sub_1001550AC(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_100191010(v8);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v10 + 21, v12, 1, 0);
  *(_BYTE *)(v10 + 21) = a1;
  return result;
}

void (*sub_100155150(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 21, v3, 0, 0);
  v6 = *(unsigned __int8 *)(v5 + 21);
  if (v6 == 18)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_1001551CC;
}

void sub_1001551CC(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 80);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_100191010(v12);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80)) + 21);
  swift_beginAccess(v14, v6, 1, 0);
  *v14 = v4;
  free((void *)v3);
}

BOOL sub_1001552A0()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess(v1 + 21, v3, 0, 0);
  return *(_BYTE *)(v1 + 21) != 18;
}

uint64_t sub_1001552F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_100191010(v6);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v8 + 21, v10, 1, 0);
  *(_BYTE *)(v8 + 21) = 18;
  return result;
}

uint64_t sub_10015538C()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess(v1 + 22, v3, 0, 0);
  if (*(_BYTE *)(v1 + 22) == 33)
    return 0;
  else
    return *(unsigned __int8 *)(v1 + 22);
}

uint64_t sub_1001553DC(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_100191010(v8);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v10 + 22, v12, 1, 0);
  *(_BYTE *)(v10 + 22) = a1;
  return result;
}

void (*sub_100155480(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 22, v3, 0, 0);
  v6 = *(unsigned __int8 *)(v5 + 22);
  if (v6 == 33)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_1001554FC;
}

void sub_1001554FC(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 80);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_100191010(v12);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80)) + 22);
  swift_beginAccess(v14, v6, 1, 0);
  *v14 = v4;
  free((void *)v3);
}

BOOL sub_1001555D0()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess(v1 + 22, v3, 0, 0);
  return *(_BYTE *)(v1 + 22) != 33;
}

uint64_t sub_100155620()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_100191010(v6);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v8 + 22, v10, 1, 0);
  *(_BYTE *)(v8 + 22) = 33;
  return result;
}

uint64_t sub_1001556BC()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess(v1 + 23, v3, 0, 0);
  if (*(_BYTE *)(v1 + 23) == 24)
    return 0;
  else
    return *(unsigned __int8 *)(v1 + 23);
}

uint64_t sub_10015570C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_100191010(v8);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v10 + 23, v12, 1, 0);
  *(_BYTE *)(v10 + 23) = a1;
  return result;
}

void (*sub_1001557B0(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 23, v3, 0, 0);
  v6 = *(unsigned __int8 *)(v5 + 23);
  if (v6 == 24)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_10015582C;
}

void sub_10015582C(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 80);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_100191010(v12);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80)) + 23);
  swift_beginAccess(v14, v6, 1, 0);
  *v14 = v4;
  free((void *)v3);
}

BOOL sub_100155900()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess(v1 + 23, v3, 0, 0);
  return *(_BYTE *)(v1 + 23) != 24;
}

uint64_t sub_100155950()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_100191010(v6);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v8 + 23, v10, 1, 0);
  *(_BYTE *)(v8 + 23) = 24;
  return result;
}

double sub_1001559EC()
{
  uint64_t v0;
  uint64_t v1;
  double result;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess(v1 + 24, v3, 0, 0);
  result = *(double *)(v1 + 24);
  if (*(_BYTE *)(v1 + 32))
    return 0.0;
  return result;
}

uint64_t sub_100155A44(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_100191010(v8);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v10 + 24, v12, 1, 0);
  *(double *)(v10 + 24) = a1;
  *(_BYTE *)(v10 + 32) = 0;
  return result;
}

void (*sub_100155AEC(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 24, v3, 0, 0);
  v6 = *(double *)(v5 + 24);
  if (*(_BYTE *)(v5 + 32))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_100155B70;
}

void sub_100155B70(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 88);
    v8 = *(_QWORD *)(v3 + 80);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_100191010(v12);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v14 + 24, v6, 1, 0);
  *(_QWORD *)(v14 + 24) = v4;
  *(_BYTE *)(v14 + 32) = 0;
  free((void *)v3);
}

BOOL sub_100155C44()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess(v1 + 24, v3, 0, 0);
  return (*(_BYTE *)(v1 + 32) & 1) == 0;
}

uint64_t sub_100155C94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_100191010(v6);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v8 + 24, v10, 1, 0);
  *(_QWORD *)(v8 + 24) = 0;
  *(_BYTE *)(v8 + 32) = 1;
  return result;
}

double sub_100155D34()
{
  uint64_t v0;
  uint64_t v1;
  double result;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess(v1 + 40, v3, 0, 0);
  result = *(double *)(v1 + 40);
  if (*(_BYTE *)(v1 + 48))
    return 0.0;
  return result;
}

uint64_t sub_100155D8C(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_100191010(v8);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v10 + 40, v12, 1, 0);
  *(double *)(v10 + 40) = a1;
  *(_BYTE *)(v10 + 48) = 0;
  return result;
}

void (*sub_100155E34(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 40, v3, 0, 0);
  v6 = *(double *)(v5 + 40);
  if (*(_BYTE *)(v5 + 48))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_100155EB8;
}

void sub_100155EB8(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 88);
    v8 = *(_QWORD *)(v3 + 80);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_100191010(v12);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v14 + 40, v6, 1, 0);
  *(_QWORD *)(v14 + 40) = v4;
  *(_BYTE *)(v14 + 48) = 0;
  free((void *)v3);
}

BOOL sub_100155F8C()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess(v1 + 40, v3, 0, 0);
  return (*(_BYTE *)(v1 + 48) & 1) == 0;
}

uint64_t sub_100155FDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_100191010(v6);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v8 + 40, v10, 1, 0);
  *(_QWORD *)(v8 + 40) = 0;
  *(_BYTE *)(v8 + 48) = 1;
  return result;
}

double sub_10015607C()
{
  uint64_t v0;
  uint64_t v1;
  double result;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess(v1 + 56, v3, 0, 0);
  result = *(double *)(v1 + 56);
  if (*(_BYTE *)(v1 + 64))
    return 0.0;
  return result;
}

uint64_t sub_1001560D4(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_100191010(v8);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v10 + 56, v12, 1, 0);
  *(double *)(v10 + 56) = a1;
  *(_BYTE *)(v10 + 64) = 0;
  return result;
}

void (*sub_10015617C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 56, v3, 0, 0);
  v6 = *(double *)(v5 + 56);
  if (*(_BYTE *)(v5 + 64))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_100156200;
}

void sub_100156200(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 88);
    v8 = *(_QWORD *)(v3 + 80);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_100191010(v12);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v14 + 56, v6, 1, 0);
  *(_QWORD *)(v14 + 56) = v4;
  *(_BYTE *)(v14 + 64) = 0;
  free((void *)v3);
}

BOOL sub_1001562D4()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess(v1 + 56, v3, 0, 0);
  return (*(_BYTE *)(v1 + 64) & 1) == 0;
}

uint64_t sub_100156324()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_100191010(v6);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v8 + 56, v10, 1, 0);
  *(_QWORD *)(v8 + 56) = 0;
  *(_BYTE *)(v8 + 64) = 1;
  return result;
}

double sub_1001563C4()
{
  uint64_t v0;
  uint64_t v1;
  double result;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess(v1 + 72, v3, 0, 0);
  result = *(double *)(v1 + 72);
  if (*(_BYTE *)(v1 + 80))
    return 0.0;
  return result;
}

uint64_t sub_10015641C(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_100191010(v8);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v10 + 72, v12, 1, 0);
  *(double *)(v10 + 72) = a1;
  *(_BYTE *)(v10 + 80) = 0;
  return result;
}

void (*sub_1001564C4(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 72, v3, 0, 0);
  v6 = *(double *)(v5 + 72);
  if (*(_BYTE *)(v5 + 80))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_100156548;
}

void sub_100156548(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 88);
    v8 = *(_QWORD *)(v3 + 80);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_100191010(v12);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v14 + 72, v6, 1, 0);
  *(_QWORD *)(v14 + 72) = v4;
  *(_BYTE *)(v14 + 80) = 0;
  free((void *)v3);
}

BOOL sub_10015661C()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess(v1 + 72, v3, 0, 0);
  return (*(_BYTE *)(v1 + 80) & 1) == 0;
}

uint64_t sub_10015666C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_100191010(v6);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v8 + 72, v10, 1, 0);
  *(_QWORD *)(v8 + 72) = 0;
  *(_BYTE *)(v8 + 80) = 1;
  return result;
}

double sub_10015670C()
{
  uint64_t v0;
  uint64_t v1;
  double result;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess(v1 + 88, v3, 0, 0);
  result = *(double *)(v1 + 88);
  if (*(_BYTE *)(v1 + 96))
    return 0.0;
  return result;
}

uint64_t sub_100156764(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_100191010(v8);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v10 + 88, v12, 1, 0);
  *(double *)(v10 + 88) = a1;
  *(_BYTE *)(v10 + 96) = 0;
  return result;
}

void (*sub_10015680C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 88, v3, 0, 0);
  v6 = *(double *)(v5 + 88);
  if (*(_BYTE *)(v5 + 96))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_100156890;
}

void sub_100156890(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 88);
    v8 = *(_QWORD *)(v3 + 80);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_100191010(v12);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v14 + 88, v6, 1, 0);
  *(_QWORD *)(v14 + 88) = v4;
  *(_BYTE *)(v14 + 96) = 0;
  free((void *)v3);
}

BOOL sub_100156964()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess(v1 + 88, v3, 0, 0);
  return (*(_BYTE *)(v1 + 96) & 1) == 0;
}

uint64_t sub_1001569B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_100191010(v6);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v8 + 88, v10, 1, 0);
  *(_QWORD *)(v8 + 88) = 0;
  *(_BYTE *)(v8 + 96) = 1;
  return result;
}

double sub_100156A54()
{
  uint64_t v0;
  uint64_t v1;
  double result;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess(v1 + 104, v3, 0, 0);
  result = *(double *)(v1 + 104);
  if (*(_BYTE *)(v1 + 112))
    return 0.0;
  return result;
}

uint64_t sub_100156AAC(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_100191010(v8);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v10 + 104, v12, 1, 0);
  *(double *)(v10 + 104) = a1;
  *(_BYTE *)(v10 + 112) = 0;
  return result;
}

void (*sub_100156B54(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 104, v3, 0, 0);
  v6 = *(double *)(v5 + 104);
  if (*(_BYTE *)(v5 + 112))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_100156BD8;
}

void sub_100156BD8(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 88);
    v8 = *(_QWORD *)(v3 + 80);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_100191010(v12);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v14 + 104, v6, 1, 0);
  *(_QWORD *)(v14 + 104) = v4;
  *(_BYTE *)(v14 + 112) = 0;
  free((void *)v3);
}

BOOL sub_100156CAC()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess(v1 + 104, v3, 0, 0);
  return (*(_BYTE *)(v1 + 112) & 1) == 0;
}

uint64_t sub_100156CFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_100191010(v6);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v8 + 104, v10, 1, 0);
  *(_QWORD *)(v8 + 104) = 0;
  *(_BYTE *)(v8 + 112) = 1;
  return result;
}

double sub_100156D9C()
{
  return sub_100156DA8(type metadata accessor for Proto_Gnss_Emergency_SessionStatus);
}

double sub_100156DA8(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  double result;
  _BYTE v4[24];

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess(v2 + 120, v4, 0, 0);
  result = *(double *)(v2 + 120);
  if (*(_BYTE *)(v2 + 128))
    return 0.0;
  return result;
}

uint64_t sub_100156E04(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_100191010(v8);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v10 + 120, v12, 1, 0);
  *(double *)(v10 + 120) = a1;
  *(_BYTE *)(v10 + 128) = 0;
  return result;
}

void (*sub_100156EAC(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 120, v3, 0, 0);
  v6 = *(double *)(v5 + 120);
  if (*(_BYTE *)(v5 + 128))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_100156F30;
}

void sub_100156F30(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 88);
    v8 = *(_QWORD *)(v3 + 80);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_100191010(v12);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v14 + 120, v6, 1, 0);
  *(_QWORD *)(v14 + 120) = v4;
  *(_BYTE *)(v14 + 128) = 0;
  free((void *)v3);
}

BOOL sub_100157004()
{
  return sub_100157010(type metadata accessor for Proto_Gnss_Emergency_SessionStatus);
}

BOOL sub_100157010(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[24];

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess(v2 + 120, v4, 0, 0);
  return (*(_BYTE *)(v2 + 128) & 1) == 0;
}

uint64_t sub_100157064()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_100191010(v6);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v8 + 120, v10, 1, 0);
  *(_QWORD *)(v8 + 120) = 0;
  *(_BYTE *)(v8 + 128) = 1;
  return result;
}

uint64_t sub_100157104()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess(v1 + 129, v3, 0, 0);
  return *(_BYTE *)(v1 + 129) & 1;
}

uint64_t sub_100157150(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_100191010(v8);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v10 + 129, v12, 1, 0);
  *(_BYTE *)(v10 + 129) = a1 & 1;
  return result;
}

void (*sub_1001571F8(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 129, v3, 0, 0);
  *((_BYTE *)v3 + 84) = *(_BYTE *)(v5 + 129) & 1;
  return sub_100157270;
}

void sub_100157270(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 80);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_100191010(v12);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess(v14 + 129, v6, 1, 0);
  *(_BYTE *)(v14 + 129) = v4;
  free((void *)v3);
}

BOOL sub_10015733C()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess(v1 + 129, v3, 0, 0);
  return *(_BYTE *)(v1 + 129) != 2;
}

uint64_t sub_10015738C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_100191010(v6);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v8 + 129, v10, 1, 0);
  *(_BYTE *)(v8 + 129) = 2;
  return result;
}

uint64_t sub_100157428()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess(v1 + 130, v3, 0, 0);
  return *(_BYTE *)(v1 + 130) & 1;
}

uint64_t sub_100157474(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_100191010(v8);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v10 + 130, v12, 1, 0);
  *(_BYTE *)(v10 + 130) = a1 & 1;
  return result;
}

void (*sub_10015751C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 130, v3, 0, 0);
  *((_BYTE *)v3 + 84) = *(_BYTE *)(v5 + 130) & 1;
  return sub_100157594;
}

void sub_100157594(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 80);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_100191010(v12);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess(v14 + 130, v6, 1, 0);
  *(_BYTE *)(v14 + 130) = v4;
  free((void *)v3);
}

BOOL sub_100157660()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess(v1 + 130, v3, 0, 0);
  return *(_BYTE *)(v1 + 130) != 2;
}

uint64_t sub_1001576B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_100191010(v6);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v8 + 130, v10, 1, 0);
  *(_BYTE *)(v8 + 130) = 2;
  return result;
}

uint64_t sub_10015774C()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess(v1 + 131, v3, 0, 0);
  return *(_BYTE *)(v1 + 131) & 1;
}

uint64_t sub_100157798(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_100191010(v8);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v10 + 131, v12, 1, 0);
  *(_BYTE *)(v10 + 131) = a1 & 1;
  return result;
}

void (*sub_100157840(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 131, v3, 0, 0);
  *((_BYTE *)v3 + 84) = *(_BYTE *)(v5 + 131) & 1;
  return sub_1001578B8;
}

void sub_1001578B8(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 80);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_100191010(v12);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess(v14 + 131, v6, 1, 0);
  *(_BYTE *)(v14 + 131) = v4;
  free((void *)v3);
}

BOOL sub_100157984()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess(v1 + 131, v3, 0, 0);
  return *(_BYTE *)(v1 + 131) != 2;
}

uint64_t sub_1001579D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_100191010(v6);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v8 + 131, v10, 1, 0);
  *(_BYTE *)(v8 + 131) = 2;
  return result;
}

uint64_t sub_100157A70@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v17[24];

  v3 = sub_1000039AC(&qword_100375568);
  __chkstk_darwin(v3);
  v5 = &v17[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf34Proto_Gnss_Emergency_SessionStatusP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__nwRefLocation;
  swift_beginAccess(v6, v17, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_100375568);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceLocation(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceLocation);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v7[6];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = a1 + v7[7];
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = a1 + v7[8];
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  v12 = a1 + v7[9];
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  v13 = a1 + v7[10];
  *(_DWORD *)v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  v14 = a1 + v7[11];
  *(_DWORD *)v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  return sub_100015704((uint64_t)v5, &qword_100375568);
}

int *sub_100157BE8@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceLocation(0);
  v3 = a1 + result[5];
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = a1 + result[6];
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 1;
  v5 = a1 + result[7];
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = a1 + result[8];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a1 + result[9];
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  v8 = a1 + result[10];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + result[11];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  return result;
}

uint64_t sub_100157C84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_100375568);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_100191010(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceLocation);
  v17 = type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceLocation(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_100375568);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf34Proto_Gnss_Emergency_SessionStatusP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__nwRefLocation;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf34Proto_Gnss_Emergency_SessionStatusP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__nwRefLocation, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_100375568);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100157E04(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_100375568);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceLocation(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34Proto_Gnss_Emergency_SessionStatusP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__nwRefLocation;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_100375568);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    v14 = &v9[v6[8]];
    *(_QWORD *)v14 = 0;
    v14[8] = 1;
    v15 = &v9[v6[9]];
    *(_QWORD *)v15 = 0;
    v15[8] = 1;
    v16 = &v9[v6[10]];
    *(_DWORD *)v16 = 0;
    v16[4] = 1;
    v17 = &v9[v6[11]];
    *(_DWORD *)v17 = 0;
    v17[4] = 1;
    sub_100015704((uint64_t)v5, &qword_100375568);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceLocation);
  }
  return sub_100157FAC;
}

void sub_100157FAC(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_100157C84, type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceLocation);
}

BOOL sub_100157FC0()
{
  return sub_10001CFF4(&qword_100375568, type metadata accessor for Proto_Gnss_Emergency_SessionStatus, &OBJC_IVAR____TtCV10ALProtobuf34Proto_Gnss_Emergency_SessionStatusP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__nwRefLocation, type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceLocation);
}

uint64_t sub_100157FE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_100375568);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_100191010(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceLocation(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf34Proto_Gnss_Emergency_SessionStatusP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__nwRefLocation;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf34Proto_Gnss_Emergency_SessionStatusP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__nwRefLocation, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_100375568);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100158114@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v13[24];

  v3 = sub_1000039AC(&qword_100375570);
  __chkstk_darwin(v3);
  v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf34Proto_Gnss_Emergency_SessionStatusP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__nwRefTime;
  swift_beginAccess(v6, v13, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_100375570);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceTime(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceTime);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v7[6];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v7[7];
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  return sub_100015704((uint64_t)v5, &qword_100375570);
}

int *sub_10015824C@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceTime(0);
  v3 = a1 + result[5];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = a1 + result[6];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = a1 + result[7];
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  return result;
}

uint64_t sub_1001582A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_100375570);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_100191010(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceTime);
  v17 = type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceTime(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_100375570);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf34Proto_Gnss_Emergency_SessionStatusP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__nwRefTime;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf34Proto_Gnss_Emergency_SessionStatusP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__nwRefTime, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_100375570);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100158428(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_100375570);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceTime(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34Proto_Gnss_Emergency_SessionStatusP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__nwRefTime;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_100375570);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_100375570);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceTime);
  }
  return sub_100158590;
}

void sub_100158590(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_1001582A8, type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceTime);
}

BOOL sub_1001585A4()
{
  return sub_10001CFF4(&qword_100375570, type metadata accessor for Proto_Gnss_Emergency_SessionStatus, &OBJC_IVAR____TtCV10ALProtobuf34Proto_Gnss_Emergency_SessionStatusP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__nwRefTime, type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceTime);
}

uint64_t sub_1001585C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_100375570);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_100191010(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceTime(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf34Proto_Gnss_Emergency_SessionStatusP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__nwRefTime;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf34Proto_Gnss_Emergency_SessionStatusP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__nwRefTime, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_100375570);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1001586F8@<X0>(uint64_t a1@<X8>)
{
  return sub_100023FF4(type metadata accessor for Proto_Gnss_Emergency_SessionStatus, &qword_1003B0A08, &qword_1003B0A10, (uint64_t)sub_100190F14, a1);
}

uint64_t sub_10015871C()
{
  return sub_100036594(&qword_1003B0A08, &qword_1003B0A10, (uint64_t)sub_100190F14);
}

uint64_t sub_100158738()
{
  return sub_100019188(type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

uint64_t sub_100158744(int a1)
{
  return sub_1000191C8(a1, type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

uint64_t (*sub_100158750(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1001587A0()
{
  return sub_100019258(type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

uint64_t sub_1001587AC()
{
  return sub_100019294(type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

uint64_t sub_1001587B8()
{
  return sub_10002DF3C(type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

uint64_t sub_1001587C4(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

uint64_t (*sub_1001587D0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100158820()
{
  return sub_100027768(type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

uint64_t sub_10015882C()
{
  return sub_1000277A4(type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

uint64_t sub_100158838@<X0>(uint64_t a1@<X8>)
{
  return sub_10015AC38(type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime, a1);
}

uint64_t sub_100158844@<X0>(uint64_t a1@<X8>)
{
  return sub_100170F20(&qword_100375578, type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime, type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime, a1);
}

uint64_t sub_100158860(uint64_t a1)
{
  return sub_100033E58(a1, type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime, &qword_100375578, type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

void (*sub_10015887C(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_100375578);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_100375578);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    sub_100015704((uint64_t)v5, &qword_100375578);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
  }
  return sub_1001589BC;
}

void sub_1001589BC(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_100375578, type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

BOOL sub_1001589D0()
{
  return sub_100031310(&qword_100375578, type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime, type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

uint64_t sub_1001589EC()
{
  return sub_1000313E8(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime, &qword_100375578, type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

uint64_t sub_100158A08()
{
  return sub_10002DF3C(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

uint64_t sub_100158A14(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

uint64_t (*sub_100158A20(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100158A70()
{
  return sub_100027768(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

uint64_t sub_100158A7C()
{
  return sub_1000277A4(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

uint64_t sub_100158A88()
{
  return sub_1000B8DB4(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

uint64_t sub_100158A94(int a1)
{
  return sub_1000B8DF4(a1, type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

uint64_t (*sub_100158AA0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100158AF0()
{
  return sub_100020B70(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

uint64_t sub_100158AFC()
{
  return sub_100020BAC(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

uint64_t sub_100158B08()
{
  return sub_1000A9E40(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

uint64_t sub_100158B14(int a1)
{
  return sub_1000A9E80(a1, type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

uint64_t (*sub_100158B20(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime(0) + 32);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100158B70()
{
  return sub_1000278D8(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

uint64_t sub_100158B7C()
{
  return sub_100027914(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

uint64_t sub_100158B88()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime(0) + 36));
  if (v1 == 5)
    return 0;
  else
    return v1;
}

uint64_t sub_100158BB0(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime(0);
  *(_BYTE *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*sub_100158BDC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime(0) + 36);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_100158C28()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime(0) + 36)) != 5;
}

uint64_t sub_100158C50()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime(0);
  *(_BYTE *)(v0 + *(int *)(result + 36)) = 5;
  return result;
}

uint64_t sub_100158C74@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime(0);
  v3 = a1 + v2[5];
  v4 = type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v6 = a1 + v2[6];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a1 + v2[7];
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  v8 = a1 + v2[8];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  *(_BYTE *)(a1 + v2[9]) = 5;
  return result;
}

uint64_t sub_100158D14@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime, a1);
}

uint64_t sub_100158D20()
{
  return sub_100019188(type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

uint64_t sub_100158D2C(int a1)
{
  return sub_1000191C8(a1, type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

uint64_t (*sub_100158D38(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Plmn(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100158D88()
{
  return sub_100019258(type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

uint64_t sub_100158D94()
{
  return sub_100019294(type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

uint64_t sub_100158DA0()
{
  return sub_10002DF3C(type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

uint64_t sub_100158DAC(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

uint64_t (*sub_100158DB8(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Plmn(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100158E08()
{
  return sub_100027768(type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

uint64_t sub_100158E14()
{
  return sub_1000277A4(type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

uint64_t sub_100158E20()
{
  return sub_1000B8DB4(type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

uint64_t sub_100158E2C(int a1)
{
  return sub_1000B8DF4(a1, type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

uint64_t (*sub_100158E38(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Plmn(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100158E88()
{
  return sub_100020B70(type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

uint64_t sub_100158E94()
{
  return sub_100020BAC(type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

int *sub_100158EA0@<X0>(uint64_t a1@<X8>)
{
  return sub_10015BCFC(type metadata accessor for Proto_Gnss_Emergency_Plmn, a1);
}

uint64_t sub_100158EAC()
{
  return sub_10015B6F4(type metadata accessor for Proto_Gnss_Emergency_SessionInfo);
}

uint64_t sub_100158EB8(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_100158EE4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0) + 20);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 6)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_100158F30()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0) + 20)) != 6;
}

uint64_t sub_100158F58()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 6;
  return result;
}

uint64_t sub_100158F7C()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0) + 24));
  if (v1 == 7)
    return 0;
  else
    return v1;
}

uint64_t sub_100158FA4(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_100158FD0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0) + 24);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 7)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10015901C()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0) + 24)) != 7;
}

uint64_t sub_100159044()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 7;
  return result;
}

uint64_t sub_100159068()
{
  return sub_1000B8DB4(type metadata accessor for Proto_Gnss_Emergency_SessionInfo);
}

uint64_t sub_100159074(int a1)
{
  return sub_1000B8DF4(a1, type metadata accessor for Proto_Gnss_Emergency_SessionInfo);
}

uint64_t (*sub_100159080(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1001590D0()
{
  return sub_100020B70(type metadata accessor for Proto_Gnss_Emergency_SessionInfo);
}

uint64_t sub_1001590DC()
{
  return sub_100020BAC(type metadata accessor for Proto_Gnss_Emergency_SessionInfo);
}

int *sub_1001590E8@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0);
  *(_BYTE *)(a1 + result[5]) = 6;
  *(_BYTE *)(a1 + result[6]) = 7;
  v3 = a1 + result[7];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  return result;
}

uint64_t sub_10015913C()
{
  return sub_100159148(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_100159148(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[24];

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess(v2 + 16, v4, 0, 0);
  if (*(_BYTE *)(v2 + 20))
    return 0;
  else
    return *(unsigned int *)(v2 + 16);
}

uint64_t sub_1001591A0(int a1)
{
  return sub_10017311C(a1, type metadata accessor for Proto_Gnss_Emergency_PositionRequest, type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))sub_1001C2C84);
}

void (*sub_1001591C0(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 16, v3, 0, 0);
  v6 = *(_DWORD *)(v5 + 16);
  if (*(_BYTE *)(v5 + 20))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_100159240;
}

void sub_100159240(uint64_t *a1, char a2)
{
  sub_100173268(a1, a2, type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))sub_1001C2C84);
}

BOOL sub_100159258()
{
  return sub_10002EDC0(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_100159264()
{
  return sub_100173370(type metadata accessor for Proto_Gnss_Emergency_PositionRequest, type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))sub_1001C2C84);
}

uint64_t sub_100159284()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20));
  swift_beginAccess(v1 + 21, v3, 0, 0);
  if (*(_BYTE *)(v1 + 21) == 5)
    return 0;
  else
    return *(unsigned __int8 *)(v1 + 21);
}

uint64_t sub_1001592D4(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass();
    v7 = swift_allocObject(v6, 133, 7);
    sub_1001C2C84(v5);
    v8 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v8);
  }
  v9 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v9 + 21, v11, 1, 0);
  *(_BYTE *)(v9 + 21) = a1;
  return result;
}

void (*sub_100159370(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 21, v3, 0, 0);
  v6 = *(unsigned __int8 *)(v5 + 21);
  if (v6 == 5)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_1001593EC;
}

void sub_1001593EC(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 80);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass();
    v11 = swift_allocObject(v10, 133, 7);
    sub_1001C2C84(v9);
    v12 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v12);
  }
LABEL_4:
  v13 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80)) + 21);
  swift_beginAccess(v13, v6, 1, 0);
  *v13 = v4;
  free((void *)v3);
}

BOOL sub_1001594B8()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20));
  swift_beginAccess(v1 + 21, v3, 0, 0);
  return *(_BYTE *)(v1 + 21) != 5;
}

uint64_t sub_100159508()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass();
    v5 = swift_allocObject(v4, 133, 7);
    sub_1001C2C84(v3);
    v6 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v6);
  }
  v7 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v7 + 21, v9, 1, 0);
  *(_BYTE *)(v7 + 21) = 5;
  return result;
}

uint64_t sub_10015959C()
{
  return sub_10016912C(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_1001595A8(int a1)
{
  return sub_10017344C(a1, type metadata accessor for Proto_Gnss_Emergency_PositionRequest, type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))sub_1001C2C84);
}

void (*sub_1001595C8(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 24, v3, 0, 0);
  v6 = *(_DWORD *)(v5 + 24);
  if (*(_BYTE *)(v5 + 28))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_100159648;
}

void sub_100159648(uint64_t *a1, char a2)
{
  sub_100173598(a1, a2, type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))sub_1001C2C84);
}

BOOL sub_100159660()
{
  return sub_10016938C(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_10015966C()
{
  return sub_1001736A0(type metadata accessor for Proto_Gnss_Emergency_PositionRequest, type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))sub_1001C2C84);
}

uint64_t sub_10015968C()
{
  return sub_10016948C(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_100159698(int a1)
{
  return sub_10017377C(a1, type metadata accessor for Proto_Gnss_Emergency_PositionRequest, type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))sub_1001C2C84);
}

void (*sub_1001596B8(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 32, v3, 0, 0);
  v6 = *(_DWORD *)(v5 + 32);
  if (*(_BYTE *)(v5 + 36))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_100159738;
}

void sub_100159738(uint64_t *a1, char a2)
{
  sub_1001738C8(a1, a2, type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))sub_1001C2C84);
}

BOOL sub_100159750()
{
  return sub_1001696EC(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_10015975C()
{
  return sub_1001739D0(type metadata accessor for Proto_Gnss_Emergency_PositionRequest, type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))sub_1001C2C84);
}

uint64_t sub_10015977C()
{
  return sub_1001697EC(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_100159788(int a1)
{
  return sub_100173AAC(a1, type metadata accessor for Proto_Gnss_Emergency_PositionRequest, type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))sub_1001C2C84);
}

void (*sub_1001597A8(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 40, v3, 0, 0);
  v6 = *(_DWORD *)(v5 + 40);
  if (*(_BYTE *)(v5 + 44))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_100159828;
}

void sub_100159828(uint64_t *a1, char a2)
{
  sub_100173BF8(a1, a2, type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))sub_1001C2C84);
}

BOOL sub_100159840()
{
  return sub_100169A4C(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_10015984C()
{
  return sub_100173D00(type metadata accessor for Proto_Gnss_Emergency_PositionRequest, type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))sub_1001C2C84);
}

uint64_t sub_10015986C()
{
  return sub_100173DBC(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_100159878(int a1)
{
  return sub_100173E34(a1, type metadata accessor for Proto_Gnss_Emergency_PositionRequest, type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))sub_1001C2C84);
}

void (*sub_100159898(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 48, v3, 0, 0);
  v6 = *(_DWORD *)(v5 + 48);
  if (*(_BYTE *)(v5 + 52))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_100159918;
}

void sub_100159918(uint64_t *a1, char a2)
{
  sub_100173F80(a1, a2, type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))sub_1001C2C84);
}

BOOL sub_100159930()
{
  return sub_100174068(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_10015993C()
{
  return sub_1001740DC(type metadata accessor for Proto_Gnss_Emergency_PositionRequest, type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))sub_1001C2C84);
}

uint64_t sub_10015995C()
{
  return sub_100174198(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_100159968(int a1)
{
  return sub_100174210(a1, type metadata accessor for Proto_Gnss_Emergency_PositionRequest, type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))sub_1001C2C84);
}

void (*sub_100159988(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 56, v3, 0, 0);
  v6 = *(_DWORD *)(v5 + 56);
  if (*(_BYTE *)(v5 + 60))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_100159A08;
}

void sub_100159A08(uint64_t *a1, char a2)
{
  sub_10017435C(a1, a2, type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))sub_1001C2C84);
}

BOOL sub_100159A20()
{
  return sub_100174444(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_100159A2C()
{
  return sub_1001744B8(type metadata accessor for Proto_Gnss_Emergency_PositionRequest, type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))sub_1001C2C84);
}

uint64_t sub_100159A4C()
{
  return sub_100174574(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_100159A58(int a1)
{
  return sub_1001745EC(a1, type metadata accessor for Proto_Gnss_Emergency_PositionRequest, type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))sub_1001C2C84);
}

void (*sub_100159A78(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 64, v3, 0, 0);
  v6 = *(_DWORD *)(v5 + 64);
  if (*(_BYTE *)(v5 + 68))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_100159AF8;
}

void sub_100159AF8(uint64_t *a1, char a2)
{
  sub_100174738(a1, a2, type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))sub_1001C2C84);
}

BOOL sub_100159B10()
{
  return sub_100174820(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_100159B1C()
{
  return sub_100174894(type metadata accessor for Proto_Gnss_Emergency_PositionRequest, type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))sub_1001C2C84);
}

uint64_t sub_100159B3C()
{
  return sub_100174950(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_100159B48(int a1)
{
  return sub_1001749C8(a1, type metadata accessor for Proto_Gnss_Emergency_PositionRequest, type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))sub_1001C2C84);
}

void (*sub_100159B68(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 72, v3, 0, 0);
  v6 = *(_DWORD *)(v5 + 72);
  if (*(_BYTE *)(v5 + 76))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_100159BE8;
}

void sub_100159BE8(uint64_t *a1, char a2)
{
  sub_100174B14(a1, a2, type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))sub_1001C2C84);
}

BOOL sub_100159C00()
{
  return sub_100174BFC(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_100159C0C()
{
  return sub_100174C70(type metadata accessor for Proto_Gnss_Emergency_PositionRequest, type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))sub_1001C2C84);
}

uint64_t sub_100159C2C()
{
  return sub_100174D2C(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_100159C38(int a1)
{
  return sub_100174DA4(a1, type metadata accessor for Proto_Gnss_Emergency_PositionRequest, type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))sub_1001C2C84);
}

void (*sub_100159C58(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 80, v3, 0, 0);
  v6 = *(_DWORD *)(v5 + 80);
  if (*(_BYTE *)(v5 + 84))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_100159CD8;
}

void sub_100159CD8(uint64_t *a1, char a2)
{
  sub_100174EF0(a1, a2, type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))sub_1001C2C84);
}

BOOL sub_100159CF0()
{
  return sub_100174FD8(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_100159CFC()
{
  return sub_10017504C(type metadata accessor for Proto_Gnss_Emergency_PositionRequest, type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))sub_1001C2C84);
}

uint64_t sub_100159D1C()
{
  return sub_100175108(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_100159D28(int a1)
{
  return sub_100175180(a1, type metadata accessor for Proto_Gnss_Emergency_PositionRequest, type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))sub_1001C2C84);
}

void (*sub_100159D48(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 88, v3, 0, 0);
  v6 = *(_DWORD *)(v5 + 88);
  if (*(_BYTE *)(v5 + 92))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_100159DC8;
}

void sub_100159DC8(uint64_t *a1, char a2)
{
  sub_1001752CC(a1, a2, type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))sub_1001C2C84);
}

BOOL sub_100159DE0()
{
  return sub_1001753B4(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_100159DEC()
{
  return sub_100175428(type metadata accessor for Proto_Gnss_Emergency_PositionRequest, type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))sub_1001C2C84);
}

uint64_t sub_100159E0C()
{
  return sub_1001754E4(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_100159E18(int a1)
{
  return sub_10017555C(a1, type metadata accessor for Proto_Gnss_Emergency_PositionRequest, type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))sub_1001C2C84);
}

void (*sub_100159E38(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 96, v3, 0, 0);
  v6 = *(_DWORD *)(v5 + 96);
  if (*(_BYTE *)(v5 + 100))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_100159EB8;
}

void sub_100159EB8(uint64_t *a1, char a2)
{
  sub_1001756A8(a1, a2, type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))sub_1001C2C84);
}

BOOL sub_100159ED0()
{
  return sub_100175790(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_100159EDC()
{
  return sub_100175804(type metadata accessor for Proto_Gnss_Emergency_PositionRequest, type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))sub_1001C2C84);
}

uint64_t sub_100159EFC()
{
  return sub_1001758C0(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_100159F08(int a1)
{
  return sub_100175938(a1, type metadata accessor for Proto_Gnss_Emergency_PositionRequest, type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))sub_1001C2C84);
}

void (*sub_100159F28(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 104, v3, 0, 0);
  v6 = *(_DWORD *)(v5 + 104);
  if (*(_BYTE *)(v5 + 108))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_100159FA8;
}

void sub_100159FA8(uint64_t *a1, char a2)
{
  sub_100175A84(a1, a2, type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))sub_1001C2C84);
}

BOOL sub_100159FC0()
{
  return sub_100175B6C(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_100159FCC()
{
  return sub_100175BE0(type metadata accessor for Proto_Gnss_Emergency_PositionRequest, type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))sub_1001C2C84);
}

uint64_t sub_100159FEC()
{
  return sub_100175C9C(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_100159FF8(int a1)
{
  return sub_100175D14(a1, type metadata accessor for Proto_Gnss_Emergency_PositionRequest, type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))sub_1001C2C84);
}

void (*sub_10015A018(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 112, v3, 0, 0);
  v6 = *(_DWORD *)(v5 + 112);
  if (*(_BYTE *)(v5 + 116))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_10015A098;
}

void sub_10015A098(uint64_t *a1, char a2)
{
  sub_100175E60(a1, a2, type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))sub_1001C2C84);
}

BOOL sub_10015A0B0()
{
  return sub_100175F48(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_10015A0BC()
{
  return sub_100175FBC(type metadata accessor for Proto_Gnss_Emergency_PositionRequest, type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))sub_1001C2C84);
}

uint64_t sub_10015A0DC()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20));
  swift_beginAccess(v1 + 117, v3, 0, 0);
  if (*(_BYTE *)(v1 + 117) == 7)
    return 0;
  else
    return *(unsigned __int8 *)(v1 + 117);
}

uint64_t sub_10015A12C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass();
    v7 = swift_allocObject(v6, 133, 7);
    sub_1001C2C84(v5);
    v8 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v8);
  }
  v9 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v9 + 117, v11, 1, 0);
  *(_BYTE *)(v9 + 117) = a1;
  return result;
}

void (*sub_10015A1C8(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 117, v3, 0, 0);
  v6 = *(unsigned __int8 *)(v5 + 117);
  if (v6 == 7)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_10015A244;
}

void sub_10015A244(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 80);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass();
    v11 = swift_allocObject(v10, 133, 7);
    sub_1001C2C84(v9);
    v12 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v12);
  }
LABEL_4:
  v13 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80)) + 117);
  swift_beginAccess(v13, v6, 1, 0);
  *v13 = v4;
  free((void *)v3);
}

BOOL sub_10015A310()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20));
  swift_beginAccess(v1 + 117, v3, 0, 0);
  return *(_BYTE *)(v1 + 117) != 7;
}

uint64_t sub_10015A360()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass();
    v5 = swift_allocObject(v4, 133, 7);
    sub_1001C2C84(v3);
    v6 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v6);
  }
  v7 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v7 + 117, v9, 1, 0);
  *(_BYTE *)(v7 + 117) = 7;
  return result;
}

uint64_t sub_10015A3F4()
{
  return sub_100176078(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_10015A400(int a1)
{
  return sub_1001760F0(a1, type metadata accessor for Proto_Gnss_Emergency_PositionRequest, type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))sub_1001C2C84);
}

void (*sub_10015A420(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 120, v3, 0, 0);
  v6 = *(_DWORD *)(v5 + 120);
  if (*(_BYTE *)(v5 + 124))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_10015A4A0;
}

void sub_10015A4A0(uint64_t *a1, char a2)
{
  sub_10017623C(a1, a2, type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))sub_1001C2C84);
}

BOOL sub_10015A4B8()
{
  return sub_100176324(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_10015A4C4()
{
  return sub_100176398(type metadata accessor for Proto_Gnss_Emergency_PositionRequest, type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))sub_1001C2C84);
}

uint64_t sub_10015A4E4()
{
  return sub_100176454(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_10015A4F0(int a1)
{
  return sub_1001764CC(a1, type metadata accessor for Proto_Gnss_Emergency_PositionRequest, type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))sub_1001C2C84);
}

void (*sub_10015A510(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 128, v3, 0, 0);
  v6 = *(_DWORD *)(v5 + 128);
  if (*(_BYTE *)(v5 + 132))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_10015A590;
}

void sub_10015A590(uint64_t *a1, char a2)
{
  sub_100176618(a1, a2, type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))sub_1001C2C84);
}

BOOL sub_10015A5A8()
{
  return sub_100176700(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t sub_10015A5B4()
{
  return sub_100176774(type metadata accessor for Proto_Gnss_Emergency_PositionRequest, type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))sub_1001C2C84);
}

uint64_t sub_10015A5D4@<X0>(uint64_t a1@<X8>)
{
  return sub_100023FF4(type metadata accessor for Proto_Gnss_Emergency_PositionRequest, &qword_1003B0A40, &qword_1003B0A48, (uint64_t)sub_100194798, a1);
}

uint64_t sub_10015A5F8()
{
  return sub_100036594(&qword_1003B0A40, &qword_1003B0A48, (uint64_t)sub_100194798);
}

uint64_t sub_10015A614@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = sub_1000039AC(&qword_100375580);
  __chkstk_darwin(v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured(0);
  sub_10000E660(v1 + *(int *)(v6 + 20), (uint64_t)v5, &qword_100375580);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  v9 = type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = a1 + v7[6];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1 + v7[7];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  v12 = a1 + v7[8];
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  *(_BYTE *)(a1 + v7[9]) = 5;
  return sub_100015704((uint64_t)v5, &qword_100375580);
}

uint64_t sub_10015A764(uint64_t a1)
{
  return sub_100033E58(a1, type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured, &qword_100375580, type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

void (*sub_10015A780(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_100375580);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_100375580);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    v12 = type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    v13 = &v9[v6[6]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    v14 = &v9[v6[7]];
    *(_DWORD *)v14 = 0;
    v14[4] = 1;
    v15 = &v9[v6[8]];
    *(_DWORD *)v15 = 0;
    v15[4] = 1;
    v9[v6[9]] = 5;
    sub_100015704((uint64_t)v5, &qword_100375580);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
  }
  return sub_10015A908;
}

void sub_10015A908(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_100375580, type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

BOOL sub_10015A91C()
{
  return sub_100031310(&qword_100375580, type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured, type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

uint64_t sub_10015A938()
{
  return sub_1000313E8(type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured, &qword_100375580, type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

uint64_t sub_10015A954@<X0>(uint64_t a1@<X8>)
{
  return sub_10015B0C0(&qword_100375578, type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured, type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime, a1);
}

uint64_t sub_10015A970(uint64_t a1)
{
  return sub_100030888(a1, type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured, &qword_100375578, type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

void (*sub_10015A98C(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_100375578);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_100375578);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    sub_100015704((uint64_t)v5, &qword_100375578);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
  }
  return sub_1001589BC;
}

BOOL sub_10015AACC()
{
  return sub_1000198C8(&qword_100375578, type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured, type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

uint64_t sub_10015AAE8()
{
  return sub_1000199A0(type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured, &qword_100375578, type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

uint64_t sub_10015AB04@<X0>(uint64_t a1@<X8>)
{
  return sub_100171944(type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured, type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime, type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime, a1);
}

uint64_t sub_10015AB20@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime, a1);
}

uint64_t sub_10015AB2C()
{
  return sub_100019188(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased);
}

uint64_t sub_10015AB38(int a1)
{
  return sub_1000191C8(a1, type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased);
}

uint64_t (*sub_10015AB44(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10015AB94()
{
  return sub_100019258(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased);
}

uint64_t sub_10015ABA0()
{
  return sub_100019294(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased);
}

uint64_t sub_10015ABAC()
{
  return sub_10002DF3C(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased);
}

uint64_t sub_10015ABB8(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased);
}

uint64_t (*sub_10015ABC4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10015AC14()
{
  return sub_100027768(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased);
}

uint64_t sub_10015AC20()
{
  return sub_1000277A4(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased);
}

uint64_t sub_10015AC2C@<X0>(uint64_t a1@<X8>)
{
  return sub_10015AC38(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased, a1);
}

uint64_t sub_10015AC38@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  UnknownStorage.init()();
  result = a1(0);
  v5 = a2 + *(int *)(result + 20);
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = a2 + *(int *)(result + 24);
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  return result;
}

uint64_t sub_10015AC88()
{
  return sub_100019188(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted);
}

uint64_t sub_10015AC94(int a1)
{
  return sub_1000191C8(a1, type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted);
}

uint64_t (*sub_10015ACA0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10015ACF0()
{
  return sub_100019258(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted);
}

uint64_t sub_10015ACFC()
{
  return sub_100019294(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted);
}

uint64_t sub_10015AD08()
{
  return sub_10002DF3C(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted);
}

uint64_t sub_10015AD14(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted);
}

uint64_t (*sub_10015AD20(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10015AD70()
{
  return sub_100027768(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted);
}

uint64_t sub_10015AD7C()
{
  return sub_1000277A4(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted);
}

uint64_t sub_10015AD88@<X0>(uint64_t a1@<X8>)
{
  return sub_10015AC38(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted, a1);
}

uint64_t sub_10015AD94@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = sub_1000039AC(&qword_100375588);
  __chkstk_darwin(v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured(0);
  sub_10000E660(v1 + *(int *)(v6 + 20), (uint64_t)v5, &qword_100375588);
  v7 = type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured);
  UnknownStorage.init()();
  v8 = a1 + *(int *)(v7 + 20);
  v9 = type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = a1 + *(int *)(v7 + 24);
  v11 = type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  return sub_100015704((uint64_t)v5, &qword_100375588);
}

uint64_t sub_10015AEC8(uint64_t a1)
{
  return sub_100033E58(a1, type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured, &qword_100375588, type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured);
}

void (*sub_10015AEE4(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_100375588);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_100375588);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    v12 = type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    v13 = &v9[*(int *)(v6 + 24)];
    v14 = type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
    sub_100015704((uint64_t)v5, &qword_100375588);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured);
  }
  return sub_10015B058;
}

void sub_10015B058(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_100375588, type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured);
}

BOOL sub_10015B06C()
{
  return sub_100031310(&qword_100375588, type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured, type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured);
}

uint64_t sub_10015B088()
{
  return sub_1000313E8(type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured, &qword_100375588, type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured);
}

uint64_t sub_10015B0A4@<X0>(uint64_t a1@<X8>)
{
  return sub_10015B0C0(&qword_100375590, type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured, type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased, a1);
}

uint64_t sub_10015B0C0@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t (*a3)(_QWORD)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v9 = sub_1000039AC(a1);
  __chkstk_darwin(v9);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a2(0);
  sub_10000E660(v4 + *(int *)(v12 + 24), (uint64_t)v11, a1);
  v13 = a3(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v11, 1, v13) != 1)
    return sub_100003E08((uint64_t)v11, a4, a3);
  UnknownStorage.init()();
  v14 = a4 + *(int *)(v13 + 20);
  *(_DWORD *)v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  v15 = a4 + *(int *)(v13 + 24);
  *(_DWORD *)v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  return sub_100015704((uint64_t)v11, a1);
}

uint64_t sub_10015B1C0(uint64_t a1)
{
  return sub_100030888(a1, type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured, &qword_100375590, type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased);
}

void (*sub_10015B1DC(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_100375590);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_100375590);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    sub_100015704((uint64_t)v5, &qword_100375590);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased);
  }
  return sub_10015B31C;
}

void sub_10015B31C(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_100375590, type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased);
}

BOOL sub_10015B330()
{
  return sub_1000198C8(&qword_100375590, type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured, type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased);
}

uint64_t sub_10015B34C()
{
  return sub_1000199A0(type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured, &qword_100375590, type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased);
}

uint64_t sub_10015B368@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = sub_1000039AC(&qword_100375598);
  __chkstk_darwin(v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured(0);
  sub_10000E660(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_100375598);
  v7 = type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted);
  UnknownStorage.init()();
  v8 = a1 + *(int *)(v7 + 20);
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + *(int *)(v7 + 24);
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  return sub_100015704((uint64_t)v5, &qword_100375598);
}

uint64_t sub_10015B468(uint64_t a1)
{
  return sub_100030BCC(a1, type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured, &qword_100375598, type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted);
}

void (*sub_10015B484(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_100375598);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_100375598);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    sub_100015704((uint64_t)v5, &qword_100375598);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted);
  }
  return sub_10015B5C4;
}

void sub_10015B5C4(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_100375598, type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted);
}

BOOL sub_10015B5D8()
{
  return sub_10002D31C(&qword_100375598, type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured, type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted);
}

uint64_t sub_10015B5F4()
{
  return sub_10002D3F4(type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured, &qword_100375598, type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted);
}

uint64_t sub_10015B610@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured(0);
  v3 = a1 + v2[5];
  v4 = type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = a1 + v2[6];
  v6 = type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = a1 + v2[7];
  v8 = type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
}

uint64_t sub_10015B6C4@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured, a1);
}

uint64_t sub_10015B6D0@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased, a1);
}

uint64_t sub_10015B6DC@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted, a1);
}

uint64_t sub_10015B6E8()
{
  return sub_10015B6F4(type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams);
}

uint64_t sub_10015B6F4(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  unsigned int v2;

  v2 = *(unsigned __int8 *)(v1 + *(int *)(a1(0) + 20));
  if (v2 == 6)
    return 0;
  else
    return v2;
}

uint64_t sub_10015B720(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_10015B74C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams(0) + 20);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 6)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10015B798()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams(0) + 20)) != 6;
}

uint64_t sub_10015B7C0()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams(0);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 6;
  return result;
}

uint64_t sub_10015B7E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v3 = sub_1000039AC(&qword_1003755A0);
  __chkstk_darwin(v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams(0);
  sub_10000E660(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_1003755A0);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  v9 = type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = a1 + v7[6];
  v11 = type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = a1 + v7[7];
  v13 = type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  return sub_100015704((uint64_t)v5, &qword_1003755A0);
}

uint64_t sub_10015B944(uint64_t a1)
{
  return sub_100030888(a1, type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams, &qword_1003755A0, type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured);
}

void (*sub_10015B960(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_1003755A0);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_1003755A0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    v12 = type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    v13 = &v9[v6[6]];
    v14 = type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
    v15 = &v9[v6[7]];
    v16 = type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
    sub_100015704((uint64_t)v5, &qword_1003755A0);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured);
  }
  return sub_10015BB00;
}

void sub_10015BB00(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_1003755A0, type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured);
}

BOOL sub_10015BB14()
{
  return sub_1000198C8(&qword_1003755A0, type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams, type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured);
}

uint64_t sub_10015BB30()
{
  return sub_1000199A0(type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams, &qword_1003755A0, type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured);
}

uint64_t sub_10015BB4C@<X0>(uint64_t a1@<X8>)
{
  return sub_10015F4E0(type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams, 6, type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured, a1);
}

uint64_t sub_10015BB64@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured, a1);
}

uint64_t sub_10015BB70()
{
  return sub_100019188(type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

uint64_t sub_10015BB7C(int a1)
{
  return sub_1000191C8(a1, type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

uint64_t (*sub_10015BB88(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsTOD(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10015BBD8()
{
  return sub_100019258(type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

uint64_t sub_10015BBE4()
{
  return sub_100019294(type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

uint64_t sub_10015BBF0()
{
  return sub_10002DF3C(type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

uint64_t sub_10015BBFC(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

uint64_t (*sub_10015BC08(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsTOD(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10015BC58()
{
  return sub_100027768(type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

uint64_t sub_10015BC64()
{
  return sub_1000277A4(type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

uint64_t sub_10015BC70()
{
  return sub_1000B8DB4(type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

uint64_t sub_10015BC7C(int a1)
{
  return sub_1000B8DF4(a1, type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

uint64_t (*sub_10015BC88(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsTOD(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10015BCD8()
{
  return sub_100020B70(type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

uint64_t sub_10015BCE4()
{
  return sub_100020BAC(type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

int *sub_10015BCF0@<X0>(uint64_t a1@<X8>)
{
  return sub_10015BCFC(type metadata accessor for Proto_Gnss_Emergency_GpsTOD, a1);
}

int *sub_10015BCFC@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  int *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  UnknownStorage.init()();
  result = (int *)a1(0);
  v5 = a2 + result[5];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = a2 + result[6];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a2 + result[7];
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  return result;
}

uint64_t sub_10015BD5C()
{
  return sub_100019188(type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

uint64_t sub_10015BD68(int a1)
{
  return sub_1000191C8(a1, type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

uint64_t (*sub_10015BD74(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10015BDC4()
{
  return sub_100019258(type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

uint64_t sub_10015BDD0()
{
  return sub_100019294(type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

uint64_t sub_10015BDDC()
{
  return sub_10002DF3C(type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

uint64_t sub_10015BDE8(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

uint64_t (*sub_10015BDF4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10015BE44()
{
  return sub_100027768(type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

uint64_t sub_10015BE50()
{
  return sub_1000277A4(type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

uint64_t sub_10015BE5C()
{
  return sub_1000B8DB4(type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

uint64_t sub_10015BE68(int a1)
{
  return sub_1000B8DF4(a1, type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

uint64_t (*sub_10015BE74(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10015BEC4()
{
  return sub_100020B70(type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

uint64_t sub_10015BED0()
{
  return sub_100020BAC(type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

uint64_t sub_10015BEDC()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0) + 32));
  if (v1 == 4)
    return 0;
  else
    return v1;
}

uint64_t sub_10015BF04(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_10015BF30(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0) + 32);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10015BF7C()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0) + 32)) != 4;
}

uint64_t sub_10015BFA4()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 4;
  return result;
}

uint64_t sub_10015BFC8()
{
  return sub_1000B4FE0(type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

uint64_t sub_10015BFD4(int a1)
{
  return sub_1000B5020(a1, type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

uint64_t (*sub_10015BFE0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0) + 36);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10015C030()
{
  return sub_10002822C(type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

uint64_t sub_10015C03C()
{
  return sub_100028268(type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

uint64_t sub_10015C048@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = sub_1000039AC(&qword_1003755A8);
  __chkstk_darwin(v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0);
  sub_10000E660(v1 + *(int *)(v6 + 40), (uint64_t)v5, &qword_1003755A8);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_GpsTOD(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v7[6];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v7[7];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  return sub_100015704((uint64_t)v5, &qword_1003755A8);
}

uint64_t sub_10015C158(uint64_t a1)
{
  return sub_1000B99EC(a1, type metadata accessor for Proto_Gnss_Emergency_LocationInfo, &qword_1003755A8, type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

void (*sub_10015C174(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_1003755A8);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_GpsTOD(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0) + 40);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_1003755A8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    sub_100015704((uint64_t)v5, &qword_1003755A8);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
  }
  return sub_10015C2C4;
}

void sub_10015C2C4(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_1003755A8, type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

BOOL sub_10015C2D8()
{
  return sub_1000B9BC4(&qword_1003755A8, type metadata accessor for Proto_Gnss_Emergency_LocationInfo, type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

uint64_t sub_10015C2F4()
{
  return sub_1000B9C9C(type metadata accessor for Proto_Gnss_Emergency_LocationInfo, &qword_1003755A8, type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

uint64_t sub_10015C310@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0);
  v3 = a1 + v2[5];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = a1 + v2[6];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = a1 + v2[7];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  *(_BYTE *)(a1 + v2[8]) = 4;
  v6 = a1 + v2[9];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a1 + v2[10];
  v8 = type metadata accessor for Proto_Gnss_Emergency_GpsTOD(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
}

uint64_t sub_10015C3B0@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for Proto_Gnss_Emergency_GpsTOD, a1);
}

uint64_t sub_10015C3BC()
{
  return sub_100019188(type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

uint64_t sub_10015C3C8(int a1)
{
  return sub_1000191C8(a1, type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

uint64_t (*sub_10015C3D4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_CellInfo(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10015C424()
{
  return sub_100019258(type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

uint64_t sub_10015C430()
{
  return sub_100019294(type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

uint64_t sub_10015C43C()
{
  return sub_10002DF3C(type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

uint64_t sub_10015C448(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

uint64_t (*sub_10015C454(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_CellInfo(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10015C4A4()
{
  return sub_100027768(type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

uint64_t sub_10015C4B0()
{
  return sub_1000277A4(type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

uint64_t sub_10015C4BC()
{
  return sub_1000B8DB4(type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

uint64_t sub_10015C4C8(int a1)
{
  return sub_1000B8DF4(a1, type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

uint64_t (*sub_10015C4D4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_CellInfo(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10015C524()
{
  return sub_100020B70(type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

uint64_t sub_10015C530()
{
  return sub_100020BAC(type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

uint64_t sub_10015C53C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = sub_1000039AC(&qword_1003755B0);
  __chkstk_darwin(v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Proto_Gnss_Emergency_CellInfo(0);
  sub_10000E660(v1 + *(int *)(v6 + 32), (uint64_t)v5, &qword_1003755B0);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_Plmn(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_Plmn);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v7[6];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v7[7];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  return sub_100015704((uint64_t)v5, &qword_1003755B0);
}

uint64_t sub_10015C64C(uint64_t a1)
{
  return sub_100034398(a1, type metadata accessor for Proto_Gnss_Emergency_CellInfo, &qword_1003755B0, type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

void (*sub_10015C668(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_1003755B0);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_Plmn(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_CellInfo(0) + 32);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_1003755B0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    sub_100015704((uint64_t)v5, &qword_1003755B0);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_Plmn);
  }
  return sub_10015C7B8;
}

void sub_10015C7B8(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_1003755B0, type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

BOOL sub_10015C7CC()
{
  return sub_10002E3A0(&qword_1003755B0, type metadata accessor for Proto_Gnss_Emergency_CellInfo, type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

uint64_t sub_10015C7E8()
{
  return sub_10002E478(type metadata accessor for Proto_Gnss_Emergency_CellInfo, &qword_1003755B0, type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

uint64_t sub_10015C804@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_CellInfo(0);
  v3 = a1 + v2[5];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = a1 + v2[6];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = a1 + v2[7];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = a1 + v2[8];
  v7 = type metadata accessor for Proto_Gnss_Emergency_Plmn(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t sub_10015C888@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for Proto_Gnss_Emergency_Plmn, a1);
}

uint64_t sub_10015C894()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured(0) + 20));
  if (v1[8])
    return 0;
  else
    return *(_QWORD *)v1;
}

uint64_t sub_10015C8C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured(0);
  v4 = v1 + *(int *)(result + 20);
  *(_QWORD *)v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*sub_10015C8F8(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return sub_100004A78;
}

BOOL sub_10015C94C()
{
  return sub_10001FCA0(type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured);
}

uint64_t sub_10015C958()
{
  return sub_10001FCDC(type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured);
}

uint64_t sub_10015C964()
{
  return sub_10002DF3C(type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured);
}

uint64_t sub_10015C970(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured);
}

uint64_t (*sub_10015C97C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10015C9CC()
{
  return sub_100027768(type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured);
}

uint64_t sub_10015C9D8()
{
  return sub_1000277A4(type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured);
}

uint64_t sub_10015C9E4()
{
  return sub_1000B8DB4(type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured);
}

uint64_t sub_10015C9F0(int a1)
{
  return sub_1000B8DF4(a1, type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured);
}

uint64_t (*sub_10015C9FC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10015CA4C()
{
  return sub_100020B70(type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured);
}

uint64_t sub_10015CA58()
{
  return sub_100020BAC(type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured);
}

uint64_t sub_10015CA64@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = sub_1000039AC(&qword_1003755B8);
  __chkstk_darwin(v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured(0);
  sub_10000E660(v1 + *(int *)(v6 + 32), (uint64_t)v5, &qword_1003755B8);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_CellInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_CellInfo);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v7[6];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v7[7];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1 + v7[8];
  v12 = type metadata accessor for Proto_Gnss_Emergency_Plmn(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  return sub_100015704((uint64_t)v5, &qword_1003755B8);
}

uint64_t sub_10015CBA0(uint64_t a1)
{
  return sub_100034398(a1, type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured, &qword_1003755B8, type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

void (*sub_10015CBBC(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_1003755B8);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_CellInfo(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured(0) + 32);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_1003755B8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    v14 = &v9[v6[8]];
    v15 = type metadata accessor for Proto_Gnss_Emergency_Plmn(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
    sub_100015704((uint64_t)v5, &qword_1003755B8);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_CellInfo);
  }
  return sub_10015CD38;
}

void sub_10015CD38(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_1003755B8, type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

BOOL sub_10015CD4C()
{
  return sub_10002E3A0(&qword_1003755B8, type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured, type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

uint64_t sub_10015CD68()
{
  return sub_10002E478(type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured, &qword_1003755B8, type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

uint64_t sub_10015CD84@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured(0);
  v3 = a1 + v2[5];
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = a1 + v2[6];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = a1 + v2[7];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = a1 + v2[8];
  v7 = type metadata accessor for Proto_Gnss_Emergency_CellInfo(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t sub_10015CE08@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for Proto_Gnss_Emergency_CellInfo, a1);
}

uint64_t sub_10015CE14()
{
  return sub_100019188(type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured);
}

uint64_t sub_10015CE20(int a1)
{
  return sub_1000191C8(a1, type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured);
}

uint64_t (*sub_10015CE2C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10015CE7C()
{
  return sub_100019258(type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured);
}

uint64_t sub_10015CE88()
{
  return sub_100019294(type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured);
}

uint64_t sub_10015CE94()
{
  return sub_10002DF3C(type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured);
}

uint64_t sub_10015CEA0(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured);
}

uint64_t (*sub_10015CEAC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10015CEFC()
{
  return sub_100027768(type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured);
}

uint64_t sub_10015CF08()
{
  return sub_1000277A4(type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured);
}

uint64_t sub_10015CF14@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = sub_1000039AC(&qword_1003755B8);
  __chkstk_darwin(v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured(0);
  sub_10000E660(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_1003755B8);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_CellInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_CellInfo);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v7[6];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v7[7];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1 + v7[8];
  v12 = type metadata accessor for Proto_Gnss_Emergency_Plmn(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  return sub_100015704((uint64_t)v5, &qword_1003755B8);
}

uint64_t sub_10015D050(uint64_t a1)
{
  return sub_100030BCC(a1, type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured, &qword_1003755B8, type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

void (*sub_10015D06C(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_1003755B8);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_CellInfo(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_1003755B8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    v14 = &v9[v6[8]];
    v15 = type metadata accessor for Proto_Gnss_Emergency_Plmn(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
    sub_100015704((uint64_t)v5, &qword_1003755B8);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_CellInfo);
  }
  return sub_10015CD38;
}

BOOL sub_10015D1E8()
{
  return sub_10002D31C(&qword_1003755B8, type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured, type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

uint64_t sub_10015D204()
{
  return sub_10002D3F4(type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured, &qword_1003755B8, type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

uint64_t sub_10015D220@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured(0);
  v3 = a1 + v2[5];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = a1 + v2[6];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = a1 + v2[7];
  v6 = type metadata accessor for Proto_Gnss_Emergency_CellInfo(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
}

uint64_t sub_10015D294()
{
  return sub_100019188(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015D2A0(int a1)
{
  return sub_1000191C8(a1, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t (*sub_10015D2AC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10015D2FC()
{
  return sub_100019258(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015D308()
{
  return sub_100019294(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015D314()
{
  return sub_10002DF3C(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015D320(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t (*sub_10015D32C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10015D37C()
{
  return sub_100027768(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015D388()
{
  return sub_1000277A4(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015D394()
{
  return sub_1000B8DB4(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015D3A0(int a1)
{
  return sub_1000B8DF4(a1, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t (*sub_10015D3AC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10015D3FC()
{
  return sub_100020B70(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015D408()
{
  return sub_100020BAC(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015D414()
{
  return sub_1000A9E40(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015D420(int a1)
{
  return sub_1000A9E80(a1, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t (*sub_10015D42C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0) + 32);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10015D47C()
{
  return sub_1000278D8(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015D488()
{
  return sub_100027914(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015D494@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = sub_1000039AC(&qword_1003755B0);
  __chkstk_darwin(v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0);
  sub_10000E660(v1 + *(int *)(v6 + 36), (uint64_t)v5, &qword_1003755B0);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_Plmn(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_Plmn);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v7[6];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v7[7];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  return sub_100015704((uint64_t)v5, &qword_1003755B0);
}

uint64_t sub_10015D5A4(uint64_t a1)
{
  return sub_10015D5C0(a1, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell, &qword_1003755B0, type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

uint64_t sub_10015D5C0(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = v4 + *(int *)(a2(0) + 36);
  sub_100015704(v8, a3);
  sub_100003E08(a1, v8, a4);
  v9 = a4(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 0, 1, v9);
}

void (*sub_10015D638(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_1003755B0);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_Plmn(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0) + 36);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_1003755B0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    sub_100015704((uint64_t)v5, &qword_1003755B0);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_Plmn);
  }
  return sub_10015C7B8;
}

BOOL sub_10015D788()
{
  return sub_10015D7A4(&qword_1003755B0, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell, type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

BOOL sub_10015D7A4(uint64_t *a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v14;

  v7 = sub_1000039AC(a1);
  __chkstk_darwin(v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a2(0);
  sub_10000E660(v3 + *(int *)(v10 + 36), (uint64_t)v9, a1);
  v11 = a3(0);
  v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  sub_100015704((uint64_t)v9, a1);
  return v12;
}

uint64_t sub_10015D860()
{
  return sub_10015D87C(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell, &qword_1003755B0, type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

uint64_t sub_10015D87C(uint64_t (*a1)(_QWORD), uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = v3 + *(int *)(a1(0) + 36);
  sub_100015704(v6, a2);
  v7 = a3(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t sub_10015D8E4()
{
  return sub_1001514C4(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015D8F0(int a1)
{
  return sub_100151504(a1, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t (*sub_10015D8FC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0) + 40);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10015D94C()
{
  return sub_1000336EC(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015D958()
{
  return sub_100033728(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015D964()
{
  return sub_1000A6D84(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015D970(int a1)
{
  return sub_1000A6DC4(a1, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t (*sub_10015D97C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0) + 44);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10015D9CC()
{
  return sub_100033824(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015D9D8()
{
  return sub_100033860(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015D9E4()
{
  return sub_100151698(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015D9F0(int a1)
{
  return sub_1001516D8(a1, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t (*sub_10015D9FC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0) + 48);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10015DA4C()
{
  return sub_1000B3C00(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015DA58()
{
  return sub_1000B3C3C(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015DA64()
{
  return sub_10015DA70(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015DA70(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  _BYTE *v2;

  v2 = (_BYTE *)(v1 + *(int *)(a1(0) + 52));
  if (v2[4])
    return 0;
  else
    return *(unsigned int *)v2;
}

uint64_t sub_10015DAA4(int a1)
{
  return sub_10015DAB0(a1, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015DAB0(int a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a2(0);
  v5 = v2 + *(int *)(result + 52);
  *(_DWORD *)v5 = a1;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_10015DAE4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0) + 52);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10015DB34()
{
  return sub_10015DB40(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

BOOL sub_10015DB40(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return (*(_BYTE *)(v1 + *(int *)(a1(0) + 52) + 4) & 1) == 0;
}

uint64_t sub_10015DB70()
{
  return sub_10015DB7C(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015DB7C(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = a1(0);
  v3 = v1 + *(int *)(result + 52);
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  return result;
}

uint64_t sub_10015DBAC()
{
  return sub_10015DBB8(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015DBB8(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  _BYTE *v2;

  v2 = (_BYTE *)(v1 + *(int *)(a1(0) + 56));
  if (v2[4])
    return 0;
  else
    return *(unsigned int *)v2;
}

uint64_t sub_10015DBEC(int a1)
{
  return sub_10015DBF8(a1, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015DBF8(int a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a2(0);
  v5 = v2 + *(int *)(result + 56);
  *(_DWORD *)v5 = a1;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_10015DC2C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0) + 56);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10015DC7C()
{
  return sub_10015DC88(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

BOOL sub_10015DC88(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return (*(_BYTE *)(v1 + *(int *)(a1(0) + 56) + 4) & 1) == 0;
}

uint64_t sub_10015DCB8()
{
  return sub_10015DCC4(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015DCC4(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = a1(0);
  v3 = v1 + *(int *)(result + 56);
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  return result;
}

uint64_t sub_10015DCF4()
{
  return sub_100172BE8(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015DD00(int a1)
{
  return sub_100172C28(a1, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t (*sub_10015DD0C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0) + 60);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10015DD5C()
{
  return sub_100172CB8(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015DD68()
{
  return sub_100172CF4(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015DD74@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0);
  v3 = a1 + v2[5];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = a1 + v2[6];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = a1 + v2[7];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = a1 + v2[8];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a1 + v2[9];
  v8 = type metadata accessor for Proto_Gnss_Emergency_Plmn(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v10 = a1 + v2[10];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1 + v2[11];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  v12 = a1 + v2[12];
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  v13 = a1 + v2[13];
  *(_DWORD *)v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  v14 = a1 + v2[14];
  *(_DWORD *)v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  v15 = a1 + v2[15];
  *(_DWORD *)v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  return result;
}

uint64_t sub_10015DE78@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v15[24];

  v3 = sub_1000039AC(&qword_1003755C0);
  __chkstk_darwin(v3);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__utranTime;
  swift_beginAccess(v6, v15, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_1003755C0);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v7[6];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v7[7];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1 + v7[8];
  v12 = type metadata accessor for Proto_Gnss_Emergency_CellInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  return sub_100015704((uint64_t)v5, &qword_1003755C0);
}

uint64_t sub_10015DFDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_1003755C0);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10019A41C(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured);
  v17 = type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_1003755C0);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__utranTime;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__utranTime, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_1003755C0);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10015E15C(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_1003755C0);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__utranTime;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_1003755C0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    v14 = &v9[v6[8]];
    v15 = type metadata accessor for Proto_Gnss_Emergency_CellInfo(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
    sub_100015704((uint64_t)v5, &qword_1003755C0);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured);
  }
  return sub_10015E2F0;
}

void sub_10015E2F0(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_10015DFDC, type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured);
}

BOOL sub_10015E304()
{
  return sub_10001CFF4(&qword_1003755C0, type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured, &OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__utranTime, type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured);
}

uint64_t sub_10015E328()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_1003755C0);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10019A41C(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__utranTime;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__utranTime, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_1003755C0);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10015E458@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v14[24];

  v3 = sub_1000039AC(&qword_1003755C8);
  __chkstk_darwin(v3);
  v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__geranTime;
  swift_beginAccess(v6, v14, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_1003755C8);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v7[6];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v7[7];
  v11 = type metadata accessor for Proto_Gnss_Emergency_CellInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  return sub_100015704((uint64_t)v5, &qword_1003755C8);
}

uint64_t sub_10015E5AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_1003755C8);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10019A41C(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured);
  v17 = type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_1003755C8);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__geranTime;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__geranTime, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_1003755C8);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10015E72C(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_1003755C8);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__geranTime;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_1003755C8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    v14 = type metadata accessor for Proto_Gnss_Emergency_CellInfo(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
    sub_100015704((uint64_t)v5, &qword_1003755C8);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured);
  }
  return sub_10015E8B0;
}

void sub_10015E8B0(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_10015E5AC, type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured);
}

BOOL sub_10015E8C4()
{
  return sub_10001CFF4(&qword_1003755C8, type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured, &OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__geranTime, type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured);
}

uint64_t sub_10015E8E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_1003755C8);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10019A41C(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__geranTime;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__geranTime, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_1003755C8);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10015EA18@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v22[24];

  v3 = sub_1000039AC(&qword_1003755D0);
  __chkstk_darwin(v3);
  v5 = &v22[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__eutranTime;
  swift_beginAccess(v6, v22, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_1003755D0);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v7[6];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v7[7];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1 + v7[8];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  v12 = a1 + v7[9];
  v13 = type metadata accessor for Proto_Gnss_Emergency_Plmn(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v14 = a1 + v7[10];
  *(_DWORD *)v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  v15 = a1 + v7[11];
  *(_DWORD *)v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  v16 = a1 + v7[12];
  *(_DWORD *)v16 = 0;
  *(_BYTE *)(v16 + 4) = 1;
  v17 = a1 + v7[13];
  *(_DWORD *)v17 = 0;
  *(_BYTE *)(v17 + 4) = 1;
  v18 = a1 + v7[14];
  *(_DWORD *)v18 = 0;
  *(_BYTE *)(v18 + 4) = 1;
  v19 = a1 + v7[15];
  *(_DWORD *)v19 = 0;
  *(_BYTE *)(v19 + 4) = 1;
  return sub_100015704((uint64_t)v5, &qword_1003755D0);
}

uint64_t sub_10015EBF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_1003755D0);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10019A41C(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
  v17 = type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_1003755D0);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__eutranTime;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__eutranTime, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_1003755D0);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10015ED74(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_1003755D0);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__eutranTime;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_1003755D0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    v14 = &v9[v6[8]];
    *(_DWORD *)v14 = 0;
    v14[4] = 1;
    v15 = &v9[v6[9]];
    v16 = type metadata accessor for Proto_Gnss_Emergency_Plmn(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
    v17 = &v9[v6[10]];
    *(_DWORD *)v17 = 0;
    v17[4] = 1;
    v18 = &v9[v6[11]];
    *(_DWORD *)v18 = 0;
    v18[4] = 1;
    v19 = &v9[v6[12]];
    *(_DWORD *)v19 = 0;
    v19[4] = 1;
    v20 = &v9[v6[13]];
    *(_DWORD *)v20 = 0;
    v20[4] = 1;
    v21 = &v9[v6[14]];
    *(_DWORD *)v21 = 0;
    v21[4] = 1;
    v22 = &v9[v6[15]];
    *(_DWORD *)v22 = 0;
    v22[4] = 1;
    sub_100015704((uint64_t)v5, &qword_1003755D0);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
  }
  return sub_10015EF78;
}

void sub_10015EF78(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_10015EBF4, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

BOOL sub_10015EF8C()
{
  return sub_10001CFF4(&qword_1003755D0, type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured, &OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__eutranTime, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t sub_10015EFB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_1003755D0);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10019A41C(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__eutranTime;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__eutranTime, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_1003755D0);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10015F0E0@<X0>(uint64_t a1@<X8>)
{
  return sub_100023FF4(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured, &qword_1003B0AB0, &qword_1003B0AB8, (uint64_t)sub_10019A354, a1);
}

uint64_t sub_10015F104()
{
  return sub_100036594(&qword_1003B0AB0, &qword_1003B0AB8, (uint64_t)sub_10019A354);
}

uint64_t sub_10015F120()
{
  return sub_10015B6F4(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams);
}

uint64_t sub_10015F12C(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_10015F158(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams(0) + 20);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 6)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10015F1A4()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams(0) + 20)) != 6;
}

uint64_t sub_10015F1CC()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams(0);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 6;
  return result;
}

uint64_t sub_10015F1F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = sub_1000039AC(&qword_1003755D8);
  __chkstk_darwin(v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams(0);
  sub_10000E660(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_1003755D8);
  v7 = type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured);
  UnknownStorage.init()();
  v8 = *(int *)(v7 + 20);
  if (qword_1003B0AB0 != -1)
    swift_once(&qword_1003B0AB0, sub_10019A354);
  v9 = qword_1003B0AB8;
  *(_QWORD *)(a1 + v8) = qword_1003B0AB8;
  swift_retain(v9);
  return sub_100015704((uint64_t)v5, &qword_1003755D8);
}

uint64_t sub_10015F308(uint64_t a1)
{
  return sub_100030888(a1, type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams, &qword_1003755D8, type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured);
}

void (*sub_10015F324(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_1003755D8);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_1003755D8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = *(int *)(v6 + 20);
    if (qword_1003B0AB0 != -1)
      swift_once(&qword_1003B0AB0, sub_10019A354);
    v12 = qword_1003B0AB8;
    *(_QWORD *)&v9[v11] = qword_1003B0AB8;
    swift_retain(v12);
    sub_100015704((uint64_t)v5, &qword_1003755D8);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured);
  }
  return sub_10015F47C;
}

void sub_10015F47C(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_1003755D8, type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured);
}

BOOL sub_10015F490()
{
  return sub_1000198C8(&qword_1003755D8, type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams, type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured);
}

uint64_t sub_10015F4AC()
{
  return sub_1000199A0(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams, &qword_1003755D8, type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured);
}

uint64_t sub_10015F4C8@<X0>(uint64_t a1@<X8>)
{
  return sub_10015F4E0(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams, 6, type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured, a1);
}

uint64_t sub_10015F4E0@<X0>(uint64_t (*a1)(_QWORD)@<X0>, char a2@<W1>, uint64_t (*a3)(_QWORD)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  UnknownStorage.init()();
  v8 = a1(0);
  *(_BYTE *)(a4 + *(int *)(v8 + 20)) = a2;
  v9 = a4 + *(int *)(v8 + 24);
  v10 = a3(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
}

uint64_t sub_10015F54C@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured, a1);
}

uint64_t sub_10015F558()
{
  return sub_10015B6F4(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

uint64_t sub_10015F564(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_10015F590(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0) + 20);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 6)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10015F5DC()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0) + 20)) != 6;
}

uint64_t sub_10015F604()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 6;
  return result;
}

uint64_t sub_10015F628()
{
  return sub_10002DF3C(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

uint64_t sub_10015F634(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

uint64_t (*sub_10015F640(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10015F690()
{
  return sub_100027768(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

uint64_t sub_10015F69C()
{
  return sub_1000277A4(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

uint64_t sub_10015F6A8()
{
  return sub_1000B8DB4(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

uint64_t sub_10015F6B4(int a1)
{
  return sub_1000B8DF4(a1, type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

uint64_t (*sub_10015F6C0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10015F710()
{
  return sub_100020B70(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

uint64_t sub_10015F71C()
{
  return sub_100020BAC(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

uint64_t sub_10015F728()
{
  return sub_1000A9E40(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

uint64_t sub_10015F734(int a1)
{
  return sub_1000A9E80(a1, type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

uint64_t (*sub_10015F740(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0) + 32);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10015F790()
{
  return sub_1000278D8(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

uint64_t sub_10015F79C()
{
  return sub_100027914(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

uint64_t sub_10015F7A8()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0) + 36));
  if (v1 == 4)
    return 0;
  else
    return v1;
}

uint64_t sub_10015F7D0(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0);
  *(_BYTE *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*sub_10015F7FC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0) + 36);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10015F848()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0) + 36)) != 4;
}

uint64_t sub_10015F870()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0);
  *(_BYTE *)(v0 + *(int *)(result + 36)) = 4;
  return result;
}

uint64_t sub_10015F894()
{
  return sub_1001514C4(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

uint64_t sub_10015F8A0(int a1)
{
  return sub_100151504(a1, type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

uint64_t (*sub_10015F8AC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0) + 40);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10015F8FC()
{
  return sub_1000336EC(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

uint64_t sub_10015F908()
{
  return sub_100033728(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

int *sub_10015F914@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0);
  *(_BYTE *)(a1 + result[5]) = 6;
  v3 = a1 + result[6];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = a1 + result[7];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = a1 + result[8];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  *(_BYTE *)(a1 + result[9]) = 4;
  v6 = a1 + result[10];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  return result;
}

uint64_t sub_10015F998()
{
  return sub_100019188(type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t sub_10015F9A4(int a1)
{
  return sub_1000191C8(a1, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t (*sub_10015F9B0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10015FA00()
{
  return sub_100019258(type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t sub_10015FA0C()
{
  return sub_100019294(type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t sub_10015FA18()
{
  return sub_10002DF3C(type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t sub_10015FA24(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t (*sub_10015FA30(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10015FA80()
{
  return sub_100027768(type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t sub_10015FA8C()
{
  return sub_1000277A4(type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t sub_10015FA98@<X0>(uint64_t a1@<X8>)
{
  return sub_10015AC38(type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint, a1);
}

uint64_t sub_10015FAA4@<X0>(uint64_t a1@<X8>)
{
  return sub_100170F20(&qword_1003755E0, type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint, a1);
}

uint64_t sub_10015FAC0(uint64_t a1)
{
  return sub_100033E58(a1, type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle, &qword_1003755E0, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

void (*sub_10015FADC(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_1003755E0);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_1003755E0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    sub_100015704((uint64_t)v5, &qword_1003755E0);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
  }
  return sub_10015FC1C;
}

void sub_10015FC1C(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_1003755E0, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

BOOL sub_10015FC30()
{
  return sub_100031310(&qword_1003755E0, type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t sub_10015FC4C()
{
  return sub_1000313E8(type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle, &qword_1003755E0, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t sub_10015FC68()
{
  return sub_10002DF3C(type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle);
}

uint64_t sub_10015FC74(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle);
}

uint64_t (*sub_10015FC80(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10015FCD0()
{
  return sub_100027768(type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle);
}

uint64_t sub_10015FCDC()
{
  return sub_1000277A4(type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle);
}

uint64_t sub_10015FCE8@<X0>(uint64_t a1@<X8>)
{
  return sub_100160DE8(type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle, a1);
}

uint64_t sub_10015FCF4@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint, a1);
}

uint64_t sub_10015FD00@<X0>(uint64_t a1@<X8>)
{
  return sub_100170F20(&qword_1003755E0, type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint, a1);
}

uint64_t sub_10015FD1C(uint64_t a1)
{
  return sub_100033E58(a1, type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse, &qword_1003755E0, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

void (*sub_10015FD38(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_1003755E0);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_1003755E0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    sub_100015704((uint64_t)v5, &qword_1003755E0);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
  }
  return sub_10015FC1C;
}

BOOL sub_10015FE78()
{
  return sub_100031310(&qword_1003755E0, type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t sub_10015FE94()
{
  return sub_1000313E8(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse, &qword_1003755E0, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t sub_10015FEB0()
{
  return sub_10002DF3C(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

uint64_t sub_10015FEBC(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

uint64_t (*sub_10015FEC8(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10015FF18()
{
  return sub_100027768(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

uint64_t sub_10015FF24()
{
  return sub_1000277A4(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

uint64_t sub_10015FF30()
{
  return sub_1000B8DB4(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

uint64_t sub_10015FF3C(int a1)
{
  return sub_1000B8DF4(a1, type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

uint64_t (*sub_10015FF48(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10015FF98()
{
  return sub_100020B70(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

uint64_t sub_10015FFA4()
{
  return sub_100020BAC(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

uint64_t sub_10015FFB0()
{
  return sub_1000A9E40(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

uint64_t sub_10015FFBC(int a1)
{
  return sub_1000A9E80(a1, type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

uint64_t (*sub_10015FFC8(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse(0) + 32);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100160018()
{
  return sub_1000278D8(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

uint64_t sub_100160024()
{
  return sub_100027914(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

uint64_t sub_100160030()
{
  return sub_1000B4FE0(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

uint64_t sub_10016003C(int a1)
{
  return sub_1000B5020(a1, type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

uint64_t (*sub_100160048(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse(0) + 36);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100160098()
{
  return sub_10002822C(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

uint64_t sub_1001600A4()
{
  return sub_100028268(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

uint64_t sub_1001600B0@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse(0);
  v3 = a1 + v2[5];
  v4 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v6 = a1 + v2[6];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a1 + v2[7];
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  v8 = a1 + v2[8];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v2[9];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  return result;
}

uint64_t sub_100160154@<X0>(uint64_t a1@<X8>)
{
  return sub_100170F20(&qword_1003755E0, type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint, a1);
}

uint64_t sub_100160170(uint64_t a1)
{
  return sub_100033E58(a1, type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid, &qword_1003755E0, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

void (*sub_10016018C(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_1003755E0);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_1003755E0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    sub_100015704((uint64_t)v5, &qword_1003755E0);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
  }
  return sub_10015FC1C;
}

BOOL sub_1001602CC()
{
  return sub_100031310(&qword_1003755E0, type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t sub_1001602E8()
{
  return sub_1000313E8(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid, &qword_1003755E0, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t sub_100160304()
{
  return sub_10002DF3C(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t sub_100160310(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t (*sub_10016031C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10016036C()
{
  return sub_100027768(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t sub_100160378()
{
  return sub_1000277A4(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t sub_100160384()
{
  return sub_1000B8DB4(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t sub_100160390(int a1)
{
  return sub_1000B8DF4(a1, type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t (*sub_10016039C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1001603EC()
{
  return sub_100020B70(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t sub_1001603F8()
{
  return sub_100020BAC(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t sub_100160404()
{
  return sub_1000A9E40(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t sub_100160410(int a1)
{
  return sub_1000A9E80(a1, type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t (*sub_10016041C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid(0) + 32);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10016046C()
{
  return sub_1000278D8(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t sub_100160478()
{
  return sub_100027914(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t sub_100160484()
{
  return sub_1000B4FE0(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t sub_100160490(int a1)
{
  return sub_1000B5020(a1, type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t (*sub_10016049C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid(0) + 36);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1001604EC()
{
  return sub_10002822C(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t sub_1001604F8()
{
  return sub_100028268(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t sub_100160504()
{
  return sub_1001514C4(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t sub_100160510(int a1)
{
  return sub_100151504(a1, type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t (*sub_10016051C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid(0) + 40);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10016056C()
{
  return sub_1000336EC(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t sub_100160578()
{
  return sub_100033728(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t sub_100160584()
{
  return sub_1000A6D84(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t sub_100160590(int a1)
{
  return sub_1000A6DC4(a1, type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t (*sub_10016059C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid(0) + 44);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1001605EC()
{
  return sub_100033824(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t sub_1001605F8()
{
  return sub_100033860(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t sub_100160604@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid(0);
  v3 = a1 + v2[5];
  v4 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v6 = a1 + v2[6];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a1 + v2[7];
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  v8 = a1 + v2[8];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v2[9];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v2[10];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1 + v2[11];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  return result;
}

uint64_t sub_1001606C8@<X0>(uint64_t a1@<X8>)
{
  return sub_100170F20(&qword_1003755E0, type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint, a1);
}

uint64_t sub_1001606E4(uint64_t a1)
{
  return sub_100033E58(a1, type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc, &qword_1003755E0, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

void (*sub_100160700(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_1003755E0);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_1003755E0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    sub_100015704((uint64_t)v5, &qword_1003755E0);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
  }
  return sub_10015FC1C;
}

BOOL sub_100160840()
{
  return sub_100031310(&qword_1003755E0, type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t sub_10016085C()
{
  return sub_1000313E8(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc, &qword_1003755E0, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t sub_100160878()
{
  return sub_10002DF3C(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t sub_100160884(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t (*sub_100160890(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1001608E0()
{
  return sub_100027768(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t sub_1001608EC()
{
  return sub_1000277A4(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t sub_1001608F8()
{
  return sub_1000B8DB4(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t sub_100160904(int a1)
{
  return sub_1000B8DF4(a1, type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t (*sub_100160910(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100160960()
{
  return sub_100020B70(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t sub_10016096C()
{
  return sub_100020BAC(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t sub_100160978()
{
  return sub_1000A9E40(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t sub_100160984(int a1)
{
  return sub_1000A9E80(a1, type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t (*sub_100160990(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc(0) + 32);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1001609E0()
{
  return sub_1000278D8(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t sub_1001609EC()
{
  return sub_100027914(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t sub_1001609F8()
{
  return sub_1000B4FE0(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t sub_100160A04(int a1)
{
  return sub_1000B5020(a1, type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t (*sub_100160A10(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc(0) + 36);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100160A60()
{
  return sub_10002822C(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t sub_100160A6C()
{
  return sub_100028268(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t sub_100160A78()
{
  return sub_1001514C4(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t sub_100160A84(int a1)
{
  return sub_100151504(a1, type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t (*sub_100160A90(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc(0) + 40);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100160AE0()
{
  return sub_1000336EC(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t sub_100160AEC()
{
  return sub_100033728(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t sub_100160AF8@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc(0);
  v3 = a1 + v2[5];
  v4 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v6 = a1 + v2[6];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a1 + v2[7];
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  v8 = a1 + v2[8];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v2[9];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v2[10];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  return result;
}

uint64_t sub_100160BAC@<X0>(uint64_t a1@<X8>)
{
  return sub_100170F20(&qword_1003755E0, type metadata accessor for Proto_Gnss_Emergency_PointAltitude, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint, a1);
}

uint64_t sub_100160BC8(uint64_t a1)
{
  return sub_100033E58(a1, type metadata accessor for Proto_Gnss_Emergency_PointAltitude, &qword_1003755E0, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

void (*sub_100160BE4(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_1003755E0);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PointAltitude(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_1003755E0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    sub_100015704((uint64_t)v5, &qword_1003755E0);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
  }
  return sub_10015FC1C;
}

BOOL sub_100160D24()
{
  return sub_100031310(&qword_1003755E0, type metadata accessor for Proto_Gnss_Emergency_PointAltitude, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t sub_100160D40()
{
  return sub_1000313E8(type metadata accessor for Proto_Gnss_Emergency_PointAltitude, &qword_1003755E0, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t sub_100160D5C()
{
  return sub_10002DF3C(type metadata accessor for Proto_Gnss_Emergency_PointAltitude);
}

uint64_t sub_100160D68(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for Proto_Gnss_Emergency_PointAltitude);
}

uint64_t (*sub_100160D74(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PointAltitude(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100160DC4()
{
  return sub_100027768(type metadata accessor for Proto_Gnss_Emergency_PointAltitude);
}

uint64_t sub_100160DD0()
{
  return sub_1000277A4(type metadata accessor for Proto_Gnss_Emergency_PointAltitude);
}

uint64_t sub_100160DDC@<X0>(uint64_t a1@<X8>)
{
  return sub_100160DE8(type metadata accessor for Proto_Gnss_Emergency_PointAltitude, a1);
}

uint64_t sub_100160DE8@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  UnknownStorage.init()();
  v4 = a1(0);
  v5 = a2 + *(int *)(v4 + 20);
  v6 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v8 = a2 + *(int *)(v4 + 24);
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  return result;
}

uint64_t sub_100160E60()
{
  return sub_10002DF3C(type metadata accessor for Proto_Gnss_Emergency_Polygon);
}

uint64_t sub_100160E6C(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for Proto_Gnss_Emergency_Polygon);
}

uint64_t (*sub_100160E78(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Polygon(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100160EC8()
{
  return sub_100027768(type metadata accessor for Proto_Gnss_Emergency_Polygon);
}

uint64_t sub_100160ED4()
{
  return sub_1000277A4(type metadata accessor for Proto_Gnss_Emergency_Polygon);
}

uint64_t sub_100160EE0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000053C4(type metadata accessor for Proto_Gnss_Emergency_Polygon, a1);
}

uint64_t sub_100160EEC(uint64_t a1)
{
  return sub_10000541C(a1, type metadata accessor for Proto_Gnss_Emergency_Polygon);
}

uint64_t (*sub_100160EF8())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for Proto_Gnss_Emergency_Polygon(0);
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_100160F20@<X0>(_QWORD *a1@<X8>)
{
  return sub_1001707F8(type metadata accessor for Proto_Gnss_Emergency_Polygon, a1);
}

uint64_t sub_100160F2C@<X0>(uint64_t a1@<X8>)
{
  return sub_100162BC8(&qword_1003755E8, &OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointUncertainCircle, type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle, a1);
}

uint64_t sub_100160F48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_1003755E8);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_1001C3364(v14);
    swift_release(v11);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle);
  v17 = type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_1003755E8);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointUncertainCircle;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointUncertainCircle, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_1003755E8);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1001610CC(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_1003755E8);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointUncertainCircle;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_1003755E8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    v12 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    v13 = &v9[*(int *)(v6 + 24)];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    sub_100015704((uint64_t)v5, &qword_1003755E8);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle);
  }
  return sub_100161240;
}

void sub_100161240(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_100160F48, type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle);
}

BOOL sub_100161254()
{
  return sub_10001CFF4(&qword_1003755E8, type metadata accessor for Proto_Gnss_Emergency_ShapeInfo, &OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointUncertainCircle, type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle);
}

uint64_t sub_100161278()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_1003755E8);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_1001C3364(v9);
    swift_release(v6);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointUncertainCircle;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointUncertainCircle, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_1003755E8);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1001613AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v3 = sub_1000039AC(&qword_1003755F0);
  __chkstk_darwin(v3);
  v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointUncertainEllipse;
  swift_beginAccess(v6, v16, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_1003755F0);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  v9 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = a1 + v7[6];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1 + v7[7];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  v12 = a1 + v7[8];
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  v13 = a1 + v7[9];
  *(_DWORD *)v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  return sub_100015704((uint64_t)v5, &qword_1003755F0);
}

uint64_t sub_100161528(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_1003755F0);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_1001C3364(v14);
    swift_release(v11);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
  v17 = type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_1003755F0);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointUncertainEllipse;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointUncertainEllipse, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_1003755F0);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1001616AC(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_1003755F0);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointUncertainEllipse;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_1003755F0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    v12 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    v13 = &v9[v6[6]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    v14 = &v9[v6[7]];
    *(_DWORD *)v14 = 0;
    v14[4] = 1;
    v15 = &v9[v6[8]];
    *(_DWORD *)v15 = 0;
    v15[4] = 1;
    v16 = &v9[v6[9]];
    *(_DWORD *)v16 = 0;
    v16[4] = 1;
    sub_100015704((uint64_t)v5, &qword_1003755F0);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
  }
  return sub_100161850;
}

void sub_100161850(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_100161528, type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

BOOL sub_100161864()
{
  return sub_10001CFF4(&qword_1003755F0, type metadata accessor for Proto_Gnss_Emergency_ShapeInfo, &OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointUncertainEllipse, type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

uint64_t sub_100161888()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_1003755F0);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_1001C3364(v9);
    swift_release(v6);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointUncertainEllipse;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointUncertainEllipse, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_1003755F0);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1001619BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v18[24];

  v3 = sub_1000039AC(&qword_1003755F8);
  __chkstk_darwin(v3);
  v5 = &v18[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointAltitudeUncertainEllipsoid;
  swift_beginAccess(v6, v18, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_1003755F8);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  v9 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = a1 + v7[6];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1 + v7[7];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  v12 = a1 + v7[8];
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  v13 = a1 + v7[9];
  *(_DWORD *)v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  v14 = a1 + v7[10];
  *(_DWORD *)v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  v15 = a1 + v7[11];
  *(_DWORD *)v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  return sub_100015704((uint64_t)v5, &qword_1003755F8);
}

uint64_t sub_100161B58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_1003755F8);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_1001C3364(v14);
    swift_release(v11);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
  v17 = type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_1003755F8);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointAltitudeUncertainEllipsoid;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointAltitudeUncertainEllipsoid, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_1003755F8);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100161CDC(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_1003755F8);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointAltitudeUncertainEllipsoid;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_1003755F8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    v12 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    v13 = &v9[v6[6]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    v14 = &v9[v6[7]];
    *(_DWORD *)v14 = 0;
    v14[4] = 1;
    v15 = &v9[v6[8]];
    *(_DWORD *)v15 = 0;
    v15[4] = 1;
    v16 = &v9[v6[9]];
    *(_DWORD *)v16 = 0;
    v16[4] = 1;
    v17 = &v9[v6[10]];
    *(_DWORD *)v17 = 0;
    v17[4] = 1;
    v18 = &v9[v6[11]];
    *(_DWORD *)v18 = 0;
    v18[4] = 1;
    sub_100015704((uint64_t)v5, &qword_1003755F8);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
  }
  return sub_100161EA0;
}

void sub_100161EA0(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_100161B58, type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

BOOL sub_100161EB4()
{
  return sub_10001CFF4(&qword_1003755F8, type metadata accessor for Proto_Gnss_Emergency_ShapeInfo, &OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointAltitudeUncertainEllipsoid, type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t sub_100161ED8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_1003755F8);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_1001C3364(v9);
    swift_release(v6);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointAltitudeUncertainEllipsoid;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointAltitudeUncertainEllipsoid, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_1003755F8);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10016200C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v17[24];

  v3 = sub_1000039AC(&qword_100375600);
  __chkstk_darwin(v3);
  v5 = &v17[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ellipsoidArc;
  swift_beginAccess(v6, v17, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_100375600);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  v9 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = a1 + v7[6];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1 + v7[7];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  v12 = a1 + v7[8];
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  v13 = a1 + v7[9];
  *(_DWORD *)v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  v14 = a1 + v7[10];
  *(_DWORD *)v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  return sub_100015704((uint64_t)v5, &qword_100375600);
}

uint64_t sub_100162198(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_100375600);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_1001C3364(v14);
    swift_release(v11);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
  v17 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_100375600);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ellipsoidArc;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ellipsoidArc, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_100375600);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10016231C(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_100375600);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ellipsoidArc;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_100375600);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    v12 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    v13 = &v9[v6[6]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    v14 = &v9[v6[7]];
    *(_DWORD *)v14 = 0;
    v14[4] = 1;
    v15 = &v9[v6[8]];
    *(_DWORD *)v15 = 0;
    v15[4] = 1;
    v16 = &v9[v6[9]];
    *(_DWORD *)v16 = 0;
    v16[4] = 1;
    v17 = &v9[v6[10]];
    *(_DWORD *)v17 = 0;
    v17[4] = 1;
    sub_100015704((uint64_t)v5, &qword_100375600);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
  }
  return sub_1001624D0;
}

void sub_1001624D0(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_100162198, type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

BOOL sub_1001624E4()
{
  return sub_10001CFF4(&qword_100375600, type metadata accessor for Proto_Gnss_Emergency_ShapeInfo, &OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ellipsoidArc, type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t sub_100162508()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_100375600);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_1001C3364(v9);
    swift_release(v6);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ellipsoidArc;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ellipsoidArc, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_100375600);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10016263C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v12[24];

  v3 = sub_1000039AC(&qword_1003755E0);
  __chkstk_darwin(v3);
  v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ellipsoidPoint;
  swift_beginAccess(v6, v12, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_1003755E0);
  v7 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
  UnknownStorage.init()();
  v8 = a1 + *(int *)(v7 + 20);
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + *(int *)(v7 + 24);
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  return sub_100015704((uint64_t)v5, &qword_1003755E0);
}

uint64_t sub_100162764(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_1003755E0);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_1001C3364(v14);
    swift_release(v11);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
  v17 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_1003755E0);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ellipsoidPoint;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ellipsoidPoint, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_1003755E0);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1001628E8(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_1003755E0);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ellipsoidPoint;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_1003755E0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    sub_100015704((uint64_t)v5, &qword_1003755E0);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
  }
  return sub_100162A40;
}

void sub_100162A40(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_100162764, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

BOOL sub_100162A54()
{
  return sub_10001CFF4(&qword_1003755E0, type metadata accessor for Proto_Gnss_Emergency_ShapeInfo, &OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ellipsoidPoint, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t sub_100162A78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_1003755E0);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_1001C3364(v9);
    swift_release(v6);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ellipsoidPoint;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ellipsoidPoint, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_1003755E0);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100162BAC@<X0>(uint64_t a1@<X8>)
{
  return sub_100162BC8(&qword_100375608, &OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointAltitude, type metadata accessor for Proto_Gnss_Emergency_PointAltitude, a1);
}

uint64_t sub_100162BC8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t (*a3)(_QWORD)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v19[24];

  v9 = sub_1000039AC(a1);
  __chkstk_darwin(v9);
  v11 = &v19[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v12 = *(_QWORD *)(v4 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20)) + *a2;
  swift_beginAccess(v12, v19, 0, 0);
  sub_10000E660(v12, (uint64_t)v11, a1);
  v13 = a3(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v11, 1, v13) != 1)
    return sub_100003E08((uint64_t)v11, a4, a3);
  UnknownStorage.init()();
  v14 = a4 + *(int *)(v13 + 20);
  v15 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  v16 = a4 + *(int *)(v13 + 24);
  *(_DWORD *)v16 = 0;
  *(_BYTE *)(v16 + 4) = 1;
  return sub_100015704((uint64_t)v11, a1);
}

uint64_t sub_100162D10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_100375608);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_1001C3364(v14);
    swift_release(v11);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_PointAltitude);
  v17 = type metadata accessor for Proto_Gnss_Emergency_PointAltitude(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_100375608);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointAltitude;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointAltitude, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_100375608);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100162E94(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_100375608);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for Proto_Gnss_Emergency_PointAltitude(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointAltitude;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_100375608);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    v12 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    v13 = &v9[*(int *)(v6 + 24)];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    sub_100015704((uint64_t)v5, &qword_100375608);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_PointAltitude);
  }
  return sub_100163008;
}

void sub_100163008(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_100162D10, type metadata accessor for Proto_Gnss_Emergency_PointAltitude);
}

BOOL sub_10016301C()
{
  return sub_10001CFF4(&qword_100375608, type metadata accessor for Proto_Gnss_Emergency_ShapeInfo, &OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointAltitude, type metadata accessor for Proto_Gnss_Emergency_PointAltitude);
}

uint64_t sub_100163040()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_100375608);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_1001C3364(v9);
    swift_release(v6);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for Proto_Gnss_Emergency_PointAltitude(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointAltitude;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointAltitude, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_100375608);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100163174@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _BYTE v11[24];

  v3 = sub_1000039AC(&qword_100375610);
  __chkstk_darwin(v3);
  v5 = &v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__polygon;
  swift_beginAccess(v6, v11, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_100375610);
  v7 = type metadata accessor for Proto_Gnss_Emergency_Polygon(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, (uint64_t)a1, type metadata accessor for Proto_Gnss_Emergency_Polygon);
  *a1 = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  v8 = (char *)a1 + *(int *)(v7 + 24);
  *(_DWORD *)v8 = 0;
  v8[4] = 1;
  return sub_100015704((uint64_t)v5, &qword_100375610);
}

uint64_t sub_10016329C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_100375610);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_1001C3364(v14);
    swift_release(v11);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_Polygon);
  v17 = type metadata accessor for Proto_Gnss_Emergency_Polygon(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_100375610);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__polygon;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__polygon, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_100375610);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100163420(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_100375610);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for Proto_Gnss_Emergency_Polygon(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__polygon;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_100375610);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = &_swiftEmptyArrayStorage;
    UnknownStorage.init()();
    v11 = (char *)v9 + *(int *)(v6 + 24);
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    sub_100015704((uint64_t)v5, &qword_100375610);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_Polygon);
  }
  return sub_100163578;
}

void sub_100163578(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_10016329C, type metadata accessor for Proto_Gnss_Emergency_Polygon);
}

BOOL sub_10016358C()
{
  return sub_10001CFF4(&qword_100375610, type metadata accessor for Proto_Gnss_Emergency_ShapeInfo, &OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__polygon, type metadata accessor for Proto_Gnss_Emergency_Polygon);
}

uint64_t sub_1001635B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_100375610);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_1001C3364(v9);
    swift_release(v6);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for Proto_Gnss_Emergency_Polygon(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__polygon;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__polygon, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_100375610);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1001636E4()
{
  return sub_10008D104(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo, &OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__noLocation);
}

uint64_t sub_1001636F8(int a1)
{
  return sub_10008D18C(a1, type metadata accessor for Proto_Gnss_Emergency_ShapeInfo, type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass, (void (*)(uint64_t))sub_1001C3364, &OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__noLocation);
}

void (*sub_10016371C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__noLocation;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_1001637A8;
}

void sub_1001637A8(uint64_t *a1, char a2)
{
  sub_10008D2FC(a1, a2, type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass, (void (*)(uint64_t))sub_1001C3364, &OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__noLocation);
}

BOOL sub_1001637C4()
{
  return sub_100022E2C(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo, &OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__noLocation);
}

uint64_t sub_1001637D8()
{
  return sub_10008D428(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo, type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass, (void (*)(uint64_t))sub_1001C3364, &OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__noLocation);
}

uint64_t sub_1001637FC@<X0>(uint64_t a1@<X8>)
{
  return sub_100023FF4(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo, &qword_1003B0B10, &qword_1003B0B18, (uint64_t)sub_10019F5C0, a1);
}

uint64_t sub_100163820()
{
  return sub_100036594(&qword_1003B0B10, &qword_1003B0B18, (uint64_t)sub_10019F5C0);
}

uint64_t sub_10016383C()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocEstimate(0) + 20));
  if (v1 == 9)
    return 0;
  else
    return v1;
}

uint64_t sub_100163864(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_LocEstimate(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_100163890(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocEstimate(0) + 20);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 9)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1001638DC()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocEstimate(0) + 20)) != 9;
}

uint64_t sub_100163904()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_LocEstimate(0);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 9;
  return result;
}

uint64_t sub_100163928@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = sub_1000039AC(&qword_100375618);
  __chkstk_darwin(v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Proto_Gnss_Emergency_LocEstimate(0);
  sub_10000E660(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_100375618);
  v7 = type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_ShapeInfo);
  UnknownStorage.init()();
  v8 = *(int *)(v7 + 20);
  if (qword_1003B0B10 != -1)
    swift_once(&qword_1003B0B10, sub_10019F5C0);
  v9 = qword_1003B0B18;
  *(_QWORD *)(a1 + v8) = qword_1003B0B18;
  swift_retain(v9);
  return sub_100015704((uint64_t)v5, &qword_100375618);
}

uint64_t sub_100163A40(uint64_t a1)
{
  return sub_100030888(a1, type metadata accessor for Proto_Gnss_Emergency_LocEstimate, &qword_100375618, type metadata accessor for Proto_Gnss_Emergency_ShapeInfo);
}

void (*sub_100163A5C(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_100375618);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocEstimate(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_100375618);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = *(int *)(v6 + 20);
    if (qword_1003B0B10 != -1)
      swift_once(&qword_1003B0B10, sub_10019F5C0);
    v12 = qword_1003B0B18;
    *(_QWORD *)&v9[v11] = qword_1003B0B18;
    swift_retain(v12);
    sub_100015704((uint64_t)v5, &qword_100375618);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_ShapeInfo);
  }
  return sub_100163BB4;
}

void sub_100163BB4(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_100375618, type metadata accessor for Proto_Gnss_Emergency_ShapeInfo);
}

BOOL sub_100163BC8()
{
  return sub_1000198C8(&qword_100375618, type metadata accessor for Proto_Gnss_Emergency_LocEstimate, type metadata accessor for Proto_Gnss_Emergency_ShapeInfo);
}

uint64_t sub_100163BE4()
{
  return sub_1000199A0(type metadata accessor for Proto_Gnss_Emergency_LocEstimate, &qword_100375618, type metadata accessor for Proto_Gnss_Emergency_ShapeInfo);
}

uint64_t sub_100163C00@<X0>(uint64_t a1@<X8>)
{
  return sub_10015F4E0(type metadata accessor for Proto_Gnss_Emergency_LocEstimate, 9, type metadata accessor for Proto_Gnss_Emergency_ShapeInfo, a1);
}

uint64_t sub_100163C18()
{
  return 9;
}

uint64_t sub_100163C20@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo, a1);
}

uint64_t sub_100163C2C()
{
  return sub_100019188(type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity);
}

uint64_t sub_100163C38(int a1)
{
  return sub_1000191C8(a1, type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity);
}

uint64_t (*sub_100163C44(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100163C94()
{
  return sub_100019258(type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity);
}

uint64_t sub_100163CA0()
{
  return sub_100019294(type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity);
}

uint64_t sub_100163CAC()
{
  return sub_10002DF3C(type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity);
}

uint64_t sub_100163CB8(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity);
}

uint64_t (*sub_100163CC4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100163D14()
{
  return sub_100027768(type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity);
}

uint64_t sub_100163D20()
{
  return sub_1000277A4(type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity);
}

uint64_t sub_100163D2C@<X0>(uint64_t a1@<X8>)
{
  return sub_10015AC38(type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity, a1);
}

uint64_t sub_100163D38()
{
  return sub_100019188(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

uint64_t sub_100163D44(int a1)
{
  return sub_1000191C8(a1, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

uint64_t (*sub_100163D50(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100163DA0()
{
  return sub_100019258(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

uint64_t sub_100163DAC()
{
  return sub_100019294(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

uint64_t sub_100163DB8()
{
  return sub_10002DF3C(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

uint64_t sub_100163DC4(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

uint64_t (*sub_100163DD0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100163E20()
{
  return sub_100027768(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

uint64_t sub_100163E2C()
{
  return sub_1000277A4(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

uint64_t sub_100163E38()
{
  return sub_1000B8DB4(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

uint64_t sub_100163E44(int a1)
{
  return sub_1000B8DF4(a1, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

uint64_t (*sub_100163E50(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100163EA0()
{
  return sub_100020B70(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

uint64_t sub_100163EAC()
{
  return sub_100020BAC(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

uint64_t sub_100163EB8()
{
  return sub_1000A9E40(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

uint64_t sub_100163EC4(int a1)
{
  return sub_1000A9E80(a1, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

uint64_t (*sub_100163ED0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity(0) + 32);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100163F20()
{
  return sub_1000278D8(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

uint64_t sub_100163F2C()
{
  return sub_100027914(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

int *sub_100163F38@<X0>(uint64_t a1@<X8>)
{
  return sub_10016D3F8(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity, a1);
}

uint64_t sub_100163F44()
{
  return sub_100019188(type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
}

uint64_t sub_100163F50(int a1)
{
  return sub_1000191C8(a1, type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
}

uint64_t (*sub_100163F5C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100163FAC()
{
  return sub_100019258(type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
}

uint64_t sub_100163FB8()
{
  return sub_100019294(type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
}

uint64_t sub_100163FC4()
{
  return sub_10002DF3C(type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
}

uint64_t sub_100163FD0(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
}

uint64_t (*sub_100163FDC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10016402C()
{
  return sub_100027768(type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
}

uint64_t sub_100164038()
{
  return sub_1000277A4(type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
}

uint64_t sub_100164044()
{
  return sub_1000B8DB4(type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
}

uint64_t sub_100164050(int a1)
{
  return sub_1000B8DF4(a1, type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
}

uint64_t (*sub_10016405C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1001640AC()
{
  return sub_100020B70(type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
}

uint64_t sub_1001640B8()
{
  return sub_100020BAC(type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
}

int *sub_1001640C4@<X0>(uint64_t a1@<X8>)
{
  return sub_10015BCFC(type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity, a1);
}

uint64_t sub_1001640D0()
{
  return sub_100019188(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t sub_1001640DC(int a1)
{
  return sub_1000191C8(a1, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t (*sub_1001640E8(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100164138()
{
  return sub_100019258(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t sub_100164144()
{
  return sub_100019294(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t sub_100164150()
{
  return sub_10002DF3C(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t sub_10016415C(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t (*sub_100164168(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1001641B8()
{
  return sub_100027768(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t sub_1001641C4()
{
  return sub_1000277A4(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t sub_1001641D0()
{
  return sub_1000B8DB4(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t sub_1001641DC(int a1)
{
  return sub_1000B8DF4(a1, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t (*sub_1001641E8(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100164238()
{
  return sub_100020B70(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t sub_100164244()
{
  return sub_100020BAC(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t sub_100164250()
{
  return sub_1000A9E40(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t sub_10016425C(int a1)
{
  return sub_1000A9E80(a1, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t (*sub_100164268(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity(0) + 32);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1001642B8()
{
  return sub_1000278D8(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t sub_1001642C4()
{
  return sub_100027914(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t sub_1001642D0()
{
  return sub_1000B4FE0(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t sub_1001642DC(int a1)
{
  return sub_1000B5020(a1, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t (*sub_1001642E8(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity(0) + 36);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100164338()
{
  return sub_10002822C(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t sub_100164344()
{
  return sub_100028268(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t sub_100164350()
{
  return sub_1001514C4(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t sub_10016435C(int a1)
{
  return sub_100151504(a1, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t (*sub_100164368(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity(0) + 40);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1001643B8()
{
  return sub_1000336EC(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t sub_1001643C4()
{
  return sub_100033728(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

int *sub_1001643D0@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity(0);
  v3 = a1 + result[5];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = a1 + result[6];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = a1 + result[7];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = a1 + result[8];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a1 + result[9];
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  v8 = a1 + result[10];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  return result;
}

uint64_t sub_10016445C@<X0>(uint64_t a1@<X8>)
{
  return sub_100170F20(&qword_100375620, type metadata accessor for Proto_Gnss_Emergency_VelocityInfo, type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity, a1);
}

uint64_t sub_100164478(uint64_t a1)
{
  return sub_100033E58(a1, type metadata accessor for Proto_Gnss_Emergency_VelocityInfo, &qword_100375620, type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity);
}

void (*sub_100164494(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_100375620);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_VelocityInfo(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_100375620);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    sub_100015704((uint64_t)v5, &qword_100375620);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity);
  }
  return sub_1001645D4;
}

void sub_1001645D4(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_100375620, type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity);
}

BOOL sub_1001645E8()
{
  return sub_100031310(&qword_100375620, type metadata accessor for Proto_Gnss_Emergency_VelocityInfo, type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity);
}

uint64_t sub_100164604()
{
  return sub_1000313E8(type metadata accessor for Proto_Gnss_Emergency_VelocityInfo, &qword_100375620, type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity);
}

uint64_t sub_100164620@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = sub_1000039AC(&qword_100375628);
  __chkstk_darwin(v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Proto_Gnss_Emergency_VelocityInfo(0);
  sub_10000E660(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_100375628);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v7[6];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v7[7];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1 + v7[8];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  return sub_100015704((uint64_t)v5, &qword_100375628);
}

uint64_t sub_100164740(uint64_t a1)
{
  return sub_100030888(a1, type metadata accessor for Proto_Gnss_Emergency_VelocityInfo, &qword_100375628, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

void (*sub_10016475C(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_100375628);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_VelocityInfo(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_100375628);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    v14 = &v9[v6[8]];
    *(_DWORD *)v14 = 0;
    v14[4] = 1;
    sub_100015704((uint64_t)v5, &qword_100375628);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
  }
  return sub_1001648BC;
}

void sub_1001648BC(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_100375628, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

BOOL sub_1001648D0()
{
  return sub_1000198C8(&qword_100375628, type metadata accessor for Proto_Gnss_Emergency_VelocityInfo, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

uint64_t sub_1001648EC()
{
  return sub_1000199A0(type metadata accessor for Proto_Gnss_Emergency_VelocityInfo, &qword_100375628, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

uint64_t sub_100164908@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = sub_1000039AC(&qword_100375630);
  __chkstk_darwin(v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Proto_Gnss_Emergency_VelocityInfo(0);
  sub_10000E660(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_100375630);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v7[6];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v7[7];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  return sub_100015704((uint64_t)v5, &qword_100375630);
}

uint64_t sub_100164A18(uint64_t a1)
{
  return sub_100030BCC(a1, type metadata accessor for Proto_Gnss_Emergency_VelocityInfo, &qword_100375630, type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
}

void (*sub_100164A34(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_100375630);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_VelocityInfo(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_100375630);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    sub_100015704((uint64_t)v5, &qword_100375630);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
  }
  return sub_100164B84;
}

void sub_100164B84(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_100375630, type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
}

BOOL sub_100164B98()
{
  return sub_10002D31C(&qword_100375630, type metadata accessor for Proto_Gnss_Emergency_VelocityInfo, type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
}

uint64_t sub_100164BB4()
{
  return sub_10002D3F4(type metadata accessor for Proto_Gnss_Emergency_VelocityInfo, &qword_100375630, type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
}

uint64_t sub_100164BD0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v3 = sub_1000039AC(&qword_100375638);
  __chkstk_darwin(v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Proto_Gnss_Emergency_VelocityInfo(0);
  sub_10000E660(v1 + *(int *)(v6 + 32), (uint64_t)v5, &qword_100375638);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v7[6];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v7[7];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1 + v7[8];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  v12 = a1 + v7[9];
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  v13 = a1 + v7[10];
  *(_DWORD *)v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  return sub_100015704((uint64_t)v5, &qword_100375638);
}

uint64_t sub_100164D10(uint64_t a1)
{
  return sub_100034398(a1, type metadata accessor for Proto_Gnss_Emergency_VelocityInfo, &qword_100375638, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

void (*sub_100164D2C(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_100375638);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_VelocityInfo(0) + 32);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_100375638);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    v14 = &v9[v6[8]];
    *(_DWORD *)v14 = 0;
    v14[4] = 1;
    v15 = &v9[v6[9]];
    *(_DWORD *)v15 = 0;
    v15[4] = 1;
    v16 = &v9[v6[10]];
    *(_DWORD *)v16 = 0;
    v16[4] = 1;
    sub_100015704((uint64_t)v5, &qword_100375638);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
  }
  return sub_100164EAC;
}

void sub_100164EAC(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_100375638, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

BOOL sub_100164EC0()
{
  return sub_10002E3A0(&qword_100375638, type metadata accessor for Proto_Gnss_Emergency_VelocityInfo, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t sub_100164EDC()
{
  return sub_10002E478(type metadata accessor for Proto_Gnss_Emergency_VelocityInfo, &qword_100375638, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t sub_100164EF8@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_VelocityInfo(0);
  v3 = a1 + v2[5];
  v4 = type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = a1 + v2[6];
  v6 = type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = a1 + v2[7];
  v8 = type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = a1 + v2[8];
  v10 = type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
}

uint64_t sub_100164FD8@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity, a1);
}

uint64_t sub_100164FE4@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity, a1);
}

uint64_t sub_100164FF0@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity, a1);
}

uint64_t sub_100164FFC@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity, a1);
}

uint64_t sub_100165008()
{
  return sub_10015B6F4(type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate);
}

uint64_t sub_100165014(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_100165040(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate(0) + 20);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 6)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10016508C()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate(0) + 20)) != 6;
}

uint64_t sub_1001650B4()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate(0);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 6;
  return result;
}

uint64_t sub_1001650D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v3 = sub_1000039AC(&qword_100375640);
  __chkstk_darwin(v3);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate(0);
  sub_10000E660(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_100375640);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_VelocityInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_VelocityInfo);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  v9 = type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = a1 + v7[6];
  v11 = type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = a1 + v7[7];
  v13 = type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v14 = a1 + v7[8];
  v15 = type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  return sub_100015704((uint64_t)v5, &qword_100375640);
}

uint64_t sub_100165264(uint64_t a1)
{
  return sub_100030888(a1, type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate, &qword_100375640, type metadata accessor for Proto_Gnss_Emergency_VelocityInfo);
}

void (*sub_100165280(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_100375640);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_VelocityInfo(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_100375640);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    v12 = type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    v13 = &v9[v6[6]];
    v14 = type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
    v15 = &v9[v6[7]];
    v16 = type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
    v17 = &v9[v6[8]];
    v18 = type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
    sub_100015704((uint64_t)v5, &qword_100375640);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_VelocityInfo);
  }
  return sub_10016544C;
}

void sub_10016544C(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_100375640, type metadata accessor for Proto_Gnss_Emergency_VelocityInfo);
}

BOOL sub_100165460()
{
  return sub_1000198C8(&qword_100375640, type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate, type metadata accessor for Proto_Gnss_Emergency_VelocityInfo);
}

uint64_t sub_10016547C()
{
  return sub_1000199A0(type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate, &qword_100375640, type metadata accessor for Proto_Gnss_Emergency_VelocityInfo);
}

uint64_t sub_100165498@<X0>(uint64_t a1@<X8>)
{
  return sub_10015F4E0(type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate, 6, type metadata accessor for Proto_Gnss_Emergency_VelocityInfo, a1);
}

uint64_t sub_1001654B0@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for Proto_Gnss_Emergency_VelocityInfo, a1);
}

uint64_t sub_1001654BC()
{
  return sub_10016AD64(type metadata accessor for Proto_Gnss_Emergency_PositionReport);
}

uint64_t sub_1001654C8(char a1)
{
  return sub_10016ADD4(a1, type metadata accessor for Proto_Gnss_Emergency_PositionReport, type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass, (void (*)(uint64_t))sub_1001C3ACC);
}

void (*sub_1001654E4(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionReport(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 16, v3, 0, 0);
  v6 = *(unsigned __int8 *)(v5 + 16);
  if (v6 == 9)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_100165560;
}

void sub_100165560(uint64_t *a1, char a2)
{
  sub_10016AF1C(a1, a2, type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass, (void (*)(uint64_t))sub_1001C3ACC);
}

BOOL sub_100165574()
{
  return sub_10016B008(type metadata accessor for Proto_Gnss_Emergency_PositionReport);
}

uint64_t sub_100165580()
{
  return sub_10016B078(type metadata accessor for Proto_Gnss_Emergency_PositionReport, type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass, (void (*)(uint64_t))sub_1001C3ACC);
}

uint64_t sub_10016559C()
{
  return sub_10016B138(type metadata accessor for Proto_Gnss_Emergency_PositionReport);
}

uint64_t sub_1001655A8(int a1)
{
  return sub_10016B1AC(a1, type metadata accessor for Proto_Gnss_Emergency_PositionReport, type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass, (void (*)(uint64_t))sub_1001C3ACC);
}

void (*sub_1001655C4(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionReport(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 20, v3, 0, 0);
  v6 = *(_DWORD *)(v5 + 20);
  if (*(_BYTE *)(v5 + 24))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_100165644;
}

void sub_100165644(uint64_t *a1, char a2)
{
  sub_10016B2FC(a1, a2, type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass, (void (*)(uint64_t))sub_1001C3ACC);
}

BOOL sub_100165658()
{
  return sub_10016B3E8(type metadata accessor for Proto_Gnss_Emergency_PositionReport);
}

uint64_t sub_100165664()
{
  return sub_10016B458(type metadata accessor for Proto_Gnss_Emergency_PositionReport, type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass, (void (*)(uint64_t))sub_1001C3ACC);
}

uint64_t sub_100165680@<X0>(uint64_t a1@<X8>)
{
  return sub_10017ECB0(type metadata accessor for Proto_Gnss_Emergency_PositionReport, &OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__sessionInfo, a1);
}

uint64_t sub_100165694(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_100375648);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_1001C3ACC(v14);
    swift_release(v11);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_SessionInfo);
  v17 = type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_100375648);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__sessionInfo;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__sessionInfo, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_100375648);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100165818(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_100375648);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionReport(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__sessionInfo;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_100375648);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 6;
    v9[v6[6]] = 7;
    v11 = &v9[v6[7]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    sub_100015704((uint64_t)v5, &qword_100375648);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_SessionInfo);
  }
  return sub_100165978;
}

void sub_100165978(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_100165694, type metadata accessor for Proto_Gnss_Emergency_SessionInfo);
}

BOOL sub_10016598C()
{
  return sub_10001CFF4(&qword_100375648, type metadata accessor for Proto_Gnss_Emergency_PositionReport, &OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__sessionInfo, type metadata accessor for Proto_Gnss_Emergency_SessionInfo);
}

uint64_t sub_1001659B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_100375648);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_1001C3ACC(v9);
    swift_release(v6);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__sessionInfo;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__sessionInfo, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_100375648);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100165AE4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v3 = sub_1000039AC(&qword_100375650);
  __chkstk_darwin(v3);
  v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionReport(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__locationInfo;
  swift_beginAccess(v6, v16, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_100375650);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v7[6];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v7[7];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  *(_BYTE *)(a1 + v7[8]) = 4;
  v11 = a1 + v7[9];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  v12 = a1 + v7[10];
  v13 = type metadata accessor for Proto_Gnss_Emergency_GpsTOD(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  return sub_100015704((uint64_t)v5, &qword_100375650);
}

uint64_t sub_100165C64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_100375650);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_1001C3ACC(v14);
    swift_release(v11);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
  v17 = type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_100375650);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__locationInfo;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__locationInfo, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_100375650);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100165DE8(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_100375650);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionReport(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__locationInfo;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_100375650);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    v9[v6[8]] = 4;
    v14 = &v9[v6[9]];
    *(_DWORD *)v14 = 0;
    v14[4] = 1;
    v15 = &v9[v6[10]];
    v16 = type metadata accessor for Proto_Gnss_Emergency_GpsTOD(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
    sub_100015704((uint64_t)v5, &qword_100375650);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
  }
  return sub_100165F98;
}

void sub_100165F98(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_100165C64, type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

BOOL sub_100165FAC()
{
  return sub_10001CFF4(&qword_100375650, type metadata accessor for Proto_Gnss_Emergency_PositionReport, &OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__locationInfo, type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

uint64_t sub_100165FD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_100375650);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_1001C3ACC(v9);
    swift_release(v6);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__locationInfo;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__locationInfo, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_100375650);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100166104@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v14[24];

  v3 = sub_1000039AC(&qword_100375658);
  __chkstk_darwin(v3);
  v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionReport(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssLocationInfo;
  swift_beginAccess(v6, v14, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_100375658);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + v7[5]) = 6;
  v8 = a1 + v7[6];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v7[7];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v7[8];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  *(_BYTE *)(a1 + v7[9]) = 4;
  v11 = a1 + v7[10];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  return sub_100015704((uint64_t)v5, &qword_100375658);
}

uint64_t sub_100166264(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_100375658);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_1001C3ACC(v14);
    swift_release(v11);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
  v17 = type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_100375658);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssLocationInfo;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssLocationInfo, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_100375658);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1001663E8(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_100375658);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionReport(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssLocationInfo;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_100375658);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 6;
    v11 = &v9[v6[6]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[7]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[8]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    v9[v6[9]] = 4;
    v14 = &v9[v6[10]];
    *(_DWORD *)v14 = 0;
    v14[4] = 1;
    sub_100015704((uint64_t)v5, &qword_100375658);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
  }
  return sub_100166578;
}

void sub_100166578(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_100166264, type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

BOOL sub_10016658C()
{
  return sub_10001CFF4(&qword_100375658, type metadata accessor for Proto_Gnss_Emergency_PositionReport, &OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssLocationInfo, type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

uint64_t sub_1001665B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_100375658);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_1001C3ACC(v9);
    swift_release(v6);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssLocationInfo;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssLocationInfo, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_100375658);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1001666E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v12[24];

  v3 = sub_1000039AC(&qword_100375660);
  __chkstk_darwin(v3);
  v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionReport(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__locEstimate;
  swift_beginAccess(v6, v12, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_100375660);
  v7 = type metadata accessor for Proto_Gnss_Emergency_LocEstimate(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_LocEstimate);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + *(int *)(v7 + 20)) = 9;
  v8 = a1 + *(int *)(v7 + 24);
  v9 = type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  return sub_100015704((uint64_t)v5, &qword_100375660);
}

uint64_t sub_100166820(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_100375660);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_1001C3ACC(v14);
    swift_release(v11);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_LocEstimate);
  v17 = type metadata accessor for Proto_Gnss_Emergency_LocEstimate(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_100375660);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__locEstimate;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__locEstimate, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_100375660);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1001669A4(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_100375660);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for Proto_Gnss_Emergency_LocEstimate(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionReport(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__locEstimate;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_100375660);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[*(int *)(v6 + 20)] = 9;
    v11 = &v9[*(int *)(v6 + 24)];
    v12 = type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    sub_100015704((uint64_t)v5, &qword_100375660);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_LocEstimate);
  }
  return sub_100166B10;
}

void sub_100166B10(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_100166820, type metadata accessor for Proto_Gnss_Emergency_LocEstimate);
}

BOOL sub_100166B24()
{
  return sub_10001CFF4(&qword_100375660, type metadata accessor for Proto_Gnss_Emergency_PositionReport, &OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__locEstimate, type metadata accessor for Proto_Gnss_Emergency_LocEstimate);
}

uint64_t sub_100166B48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_100375660);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_1001C3ACC(v9);
    swift_release(v6);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for Proto_Gnss_Emergency_LocEstimate(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__locEstimate;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__locEstimate, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_100375660);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100166C7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v12[24];

  v3 = sub_1000039AC(&qword_100375668);
  __chkstk_darwin(v3);
  v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionReport(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__velocityEstimate;
  swift_beginAccess(v6, v12, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_100375668);
  v7 = type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + *(int *)(v7 + 20)) = 6;
  v8 = a1 + *(int *)(v7 + 24);
  v9 = type metadata accessor for Proto_Gnss_Emergency_VelocityInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  return sub_100015704((uint64_t)v5, &qword_100375668);
}

uint64_t sub_100166DB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_100375668);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_1001C3ACC(v14);
    swift_release(v11);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate);
  v17 = type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_100375668);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__velocityEstimate;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__velocityEstimate, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_100375668);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100166F3C(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_100375668);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionReport(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__velocityEstimate;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_100375668);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[*(int *)(v6 + 20)] = 6;
    v11 = &v9[*(int *)(v6 + 24)];
    v12 = type metadata accessor for Proto_Gnss_Emergency_VelocityInfo(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    sub_100015704((uint64_t)v5, &qword_100375668);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate);
  }
  return sub_1001670A8;
}

void sub_1001670A8(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_100166DB8, type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate);
}

BOOL sub_1001670BC()
{
  return sub_10001CFF4(&qword_100375668, type metadata accessor for Proto_Gnss_Emergency_PositionReport, &OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__velocityEstimate, type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate);
}

uint64_t sub_1001670E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_100375668);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_1001C3ACC(v9);
    swift_release(v6);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__velocityEstimate;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__velocityEstimate, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_100375668);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100167214()
{
  return sub_10008D104(type metadata accessor for Proto_Gnss_Emergency_PositionReport, &OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__technologySource);
}

uint64_t sub_100167228(int a1)
{
  return sub_10008D18C(a1, type metadata accessor for Proto_Gnss_Emergency_PositionReport, type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass, (void (*)(uint64_t))sub_1001C3ACC, &OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__technologySource);
}

void (*sub_10016724C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionReport(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__technologySource;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_1001672D8;
}

void sub_1001672D8(uint64_t *a1, char a2)
{
  sub_10008D2FC(a1, a2, type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass, (void (*)(uint64_t))sub_1001C3ACC, &OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__technologySource);
}

BOOL sub_1001672F4()
{
  return sub_100022E2C(type metadata accessor for Proto_Gnss_Emergency_PositionReport, &OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__technologySource);
}

uint64_t sub_100167308()
{
  return sub_10008D428(type metadata accessor for Proto_Gnss_Emergency_PositionReport, type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass, (void (*)(uint64_t))sub_1001C3ACC, &OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__technologySource);
}

uint64_t sub_10016732C@<X0>(uint64_t a1@<X8>)
{
  return sub_100023FF4(type metadata accessor for Proto_Gnss_Emergency_PositionReport, &qword_1003B0B60, &qword_1003B0B68, (uint64_t)sub_1001A49F4, a1);
}

uint64_t sub_100167350()
{
  return sub_100036594(&qword_1003B0B60, &qword_1003B0B68, (uint64_t)sub_1001A49F4);
}

uint64_t sub_10016736C()
{
  return sub_100019188(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t sub_100167378(int a1)
{
  return sub_1000191C8(a1, type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t (*sub_100167384(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1001673D4()
{
  return sub_100019258(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t sub_1001673E0()
{
  return sub_100019294(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t sub_1001673EC()
{
  return sub_10002DF3C(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t sub_1001673F8(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t (*sub_100167404(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100167454()
{
  return sub_100027768(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t sub_100167460()
{
  return sub_1000277A4(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t sub_10016746C()
{
  return sub_1000B8DB4(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t sub_100167478(int a1)
{
  return sub_1000B8DF4(a1, type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t (*sub_100167484(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1001674D4()
{
  return sub_100020B70(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t sub_1001674E0()
{
  return sub_100020BAC(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t sub_1001674EC()
{
  return sub_1000A9E40(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t sub_1001674F8(int a1)
{
  return sub_1000A9E80(a1, type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t (*sub_100167504(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement(0) + 32);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100167554()
{
  return sub_1000278D8(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t sub_100167560()
{
  return sub_100027914(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t sub_10016756C()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement(0) + 36));
  if (v1 == 6)
    return 0;
  else
    return v1;
}

uint64_t sub_100167594(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement(0);
  *(_BYTE *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*sub_1001675C0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement(0) + 36);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 6)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10016760C()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement(0) + 36)) != 6;
}

uint64_t sub_100167634()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement(0);
  *(_BYTE *)(v0 + *(int *)(result + 36)) = 6;
  return result;
}

uint64_t sub_100167658()
{
  return sub_1001514C4(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t sub_100167664(int a1)
{
  return sub_100151504(a1, type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t (*sub_100167670(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement(0) + 40);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1001676C0()
{
  return sub_1000336EC(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t sub_1001676CC()
{
  return sub_100033728(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t sub_1001676D8()
{
  return sub_1000A6D84(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t sub_1001676E4(int a1)
{
  return sub_1000A6DC4(a1, type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t (*sub_1001676F0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement(0) + 44);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100167740()
{
  return sub_100033824(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t sub_10016774C()
{
  return sub_100033860(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t sub_100167758()
{
  return sub_100151698(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t sub_100167764(int a1)
{
  return sub_1001516D8(a1, type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t (*sub_100167770(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement(0) + 48);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1001677C0()
{
  return sub_1000B3C00(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t sub_1001677CC()
{
  return sub_1000B3C3C(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t sub_1001677D8()
{
  return sub_10015DA70(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t sub_1001677E4(int a1)
{
  return sub_10015DAB0(a1, type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t (*sub_1001677F0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement(0) + 52);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100167840()
{
  return sub_10015DB40(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

uint64_t sub_10016784C()
{
  return sub_10015DB7C(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement);
}

int *sub_100167858@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementElement(0);
  v3 = a1 + result[5];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = a1 + result[6];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = a1 + result[7];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = a1 + result[8];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  *(_BYTE *)(a1 + result[9]) = 6;
  v7 = a1 + result[10];
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  v8 = a1 + result[11];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + result[12];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + result[13];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  return result;
}

uint64_t sub_100167910()
{
  return sub_10002DF3C(type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo);
}

uint64_t sub_10016791C(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo);
}

uint64_t (*sub_100167928(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100167978()
{
  return sub_100027768(type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo);
}

uint64_t sub_100167984()
{
  return sub_1000277A4(type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo);
}

uint64_t sub_100167990()
{
  return sub_1000B8DB4(type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo);
}

uint64_t sub_10016799C(int a1)
{
  return sub_1000B8DF4(a1, type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo);
}

uint64_t (*sub_1001679A8(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1001679F8()
{
  return sub_100020B70(type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo);
}

uint64_t sub_100167A04()
{
  return sub_100020BAC(type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo);
}

uint64_t sub_100167A10()
{
  return sub_1000A9E40(type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo);
}

uint64_t sub_100167A1C(int a1)
{
  return sub_1000A9E80(a1, type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo);
}

uint64_t (*sub_100167A28(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo(0) + 32);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100167A78()
{
  return sub_1000278D8(type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo);
}

uint64_t sub_100167A84()
{
  return sub_100027914(type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo);
}

uint64_t sub_100167A90@<X0>(uint64_t a1@<X8>)
{
  return sub_1000053C4(type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo, a1);
}

uint64_t sub_100167A9C(uint64_t a1)
{
  return sub_10000541C(a1, type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo);
}

uint64_t (*sub_100167AA8())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo(0);
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_100167AD0@<X0>(_QWORD *a1@<X8>)
{
  int *v2;
  uint64_t result;
  char *v4;
  char *v5;
  char *v6;

  *a1 = &_swiftEmptyArrayStorage;
  v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo(0);
  result = UnknownStorage.init()();
  v4 = (char *)a1 + v2[6];
  *(_DWORD *)v4 = 0;
  v4[4] = 1;
  v5 = (char *)a1 + v2[7];
  *(_DWORD *)v5 = 0;
  v5[4] = 1;
  v6 = (char *)a1 + v2[8];
  *(_DWORD *)v6 = 0;
  v6[4] = 1;
  return result;
}

uint64_t sub_100167B44()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementsForSingleGanss(0)
                                   + 20));
  if (v1 == 7)
    return 0;
  else
    return v1;
}

uint64_t sub_100167B6C(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementsForSingleGanss(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_100167B98(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementsForSingleGanss(0) + 20);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 7)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100003738;
}

BOOL sub_100167BE4()
{
  uint64_t v0;

  return *(_BYTE *)(v0
                  + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementsForSingleGanss(0) + 20)) != 7;
}

uint64_t sub_100167C0C()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementsForSingleGanss(0);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 7;
  return result;
}

uint64_t sub_100167C30@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v12;

  v3 = sub_1000039AC(&qword_100375670);
  __chkstk_darwin(v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementsForSingleGanss(0);
  sub_10000E660(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_100375670);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, (uint64_t)a1, type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo);
  *a1 = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  v8 = (char *)a1 + v7[6];
  *(_DWORD *)v8 = 0;
  v8[4] = 1;
  v9 = (char *)a1 + v7[7];
  *(_DWORD *)v9 = 0;
  v9[4] = 1;
  v10 = (char *)a1 + v7[8];
  *(_DWORD *)v10 = 0;
  v10[4] = 1;
  return sub_100015704((uint64_t)v5, &qword_100375670);
}

uint64_t sub_100167D50(uint64_t a1)
{
  return sub_100030888(a1, type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementsForSingleGanss, &qword_100375670, type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo);
}

void (*sub_100167D6C(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_100375670);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementsForSingleGanss(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_100375670);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = &_swiftEmptyArrayStorage;
    UnknownStorage.init()();
    v11 = (char *)v9 + v6[6];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = (char *)v9 + v6[7];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = (char *)v9 + v6[8];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    sub_100015704((uint64_t)v5, &qword_100375670);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo);
  }
  return sub_100167ECC;
}

void sub_100167ECC(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_100375670, type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo);
}

BOOL sub_100167EE0()
{
  return sub_1000198C8(&qword_100375670, type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementsForSingleGanss, type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo);
}

uint64_t sub_100167EFC()
{
  return sub_1000199A0(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementsForSingleGanss, &qword_100375670, type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo);
}

uint64_t sub_100167F18@<X0>(uint64_t a1@<X8>)
{
  return sub_10015F4E0(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementsForSingleGanss, 7, type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo, a1);
}

uint64_t sub_100167F30@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo, a1);
}

uint64_t sub_100167F3C()
{
  return sub_10015B6F4(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements);
}

uint64_t sub_100167F48(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_100167F74(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements(0) + 20);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 6)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_100167FC0()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements(0) + 20)) != 6;
}

uint64_t sub_100167FE8()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements(0);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 6;
  return result;
}

uint64_t sub_10016800C()
{
  return sub_10002DF3C(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements);
}

uint64_t sub_100168018(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements);
}

uint64_t (*sub_100168024(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100168074()
{
  return sub_100027768(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements);
}

uint64_t sub_100168080()
{
  return sub_1000277A4(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements);
}

uint64_t sub_10016808C()
{
  return sub_1000B8DB4(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements);
}

uint64_t sub_100168098(int a1)
{
  return sub_1000B8DF4(a1, type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements);
}

uint64_t (*sub_1001680A4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1001680F4()
{
  return sub_100020B70(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements);
}

uint64_t sub_100168100()
{
  return sub_100020BAC(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements);
}

uint64_t sub_10016810C()
{
  return sub_1000A9E40(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements);
}

uint64_t sub_100168118(int a1)
{
  return sub_1000A9E80(a1, type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements);
}

uint64_t (*sub_100168124(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements(0) + 32);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100168174()
{
  return sub_1000278D8(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements);
}

uint64_t sub_100168180()
{
  return sub_100027914(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements);
}

uint64_t sub_10016818C()
{
  return sub_1000B4FE0(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements);
}

uint64_t sub_100168198(int a1)
{
  return sub_1000B5020(a1, type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements);
}

uint64_t (*sub_1001681A4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements(0) + 36);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1001681F4()
{
  return sub_10002822C(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements);
}

uint64_t sub_100168200()
{
  return sub_100028268(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements);
}

uint64_t sub_10016820C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = sub_1000039AC(&qword_100375678);
  __chkstk_darwin(v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements(0);
  sub_10000E660(v1 + *(int *)(v6 + 40), (uint64_t)v5, &qword_100375678);
  v7 = type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + *(int *)(v7 + 20)) = 6;
  v8 = a1 + *(int *)(v7 + 24);
  v9 = type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  return sub_100015704((uint64_t)v5, &qword_100375678);
}

uint64_t sub_100168320(uint64_t a1)
{
  return sub_1000B99EC(a1, type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements, &qword_100375678, type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams);
}

void (*sub_10016833C(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_100375678);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements(0) + 40);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_100375678);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[*(int *)(v6 + 20)] = 6;
    v11 = &v9[*(int *)(v6 + 24)];
    v12 = type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    sub_100015704((uint64_t)v5, &qword_100375678);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams);
  }
  return sub_100168490;
}

void sub_100168490(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_100375678, type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams);
}

BOOL sub_1001684A4()
{
  return sub_1000B9BC4(&qword_100375678, type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements, type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams);
}

uint64_t sub_1001684C0()
{
  return sub_1000B9C9C(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements, &qword_100375678, type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams);
}

uint64_t sub_1001684DC()
{
  return sub_1000A6D84(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements);
}

uint64_t sub_1001684E8(int a1)
{
  return sub_1000A6DC4(a1, type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements);
}

uint64_t (*sub_1001684F4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements(0) + 44);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100168544()
{
  return sub_100033824(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements);
}

uint64_t sub_100168550()
{
  return sub_100033860(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements);
}

uint64_t sub_10016855C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = sub_1000039AC(&qword_100375680);
  __chkstk_darwin(v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements(0);
  sub_10000E660(v1 + *(int *)(v6 + 48), (uint64_t)v5, &qword_100375680);
  v7 = type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementsForSingleGanss(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementsForSingleGanss);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + *(int *)(v7 + 20)) = 7;
  v8 = a1 + *(int *)(v7 + 24);
  v9 = type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  return sub_100015704((uint64_t)v5, &qword_100375680);
}

uint64_t sub_100168670(uint64_t a1)
{
  return sub_10017DCC8(a1, type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements, &qword_100375680, type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementsForSingleGanss);
}

void (*sub_10016868C(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_100375680);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementsForSingleGanss(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements(0) + 48);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_100375680);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[*(int *)(v6 + 20)] = 7;
    v11 = &v9[*(int *)(v6 + 24)];
    v12 = type metadata accessor for Proto_Gnss_Emergency_GanssSignalMeasurementInfo(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    sub_100015704((uint64_t)v5, &qword_100375680);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementsForSingleGanss);
  }
  return sub_1001687E0;
}

void sub_1001687E0(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_100375680, type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementsForSingleGanss);
}

BOOL sub_1001687F4()
{
  return sub_10017DEC0(&qword_100375680, type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements, type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementsForSingleGanss);
}

uint64_t sub_100168810()
{
  return sub_10017DF98(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements, &qword_100375680, type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementsForSingleGanss);
}

uint64_t sub_10016882C@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements(0);
  *(_BYTE *)(a1 + v2[5]) = 6;
  v3 = a1 + v2[6];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = a1 + v2[7];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = a1 + v2[8];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = a1 + v2[9];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a1 + v2[10];
  v8 = type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = a1 + v2[11];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v2[12];
  v11 = type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementsForSingleGanss(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
}

uint64_t sub_100168914@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams, a1);
}

uint64_t sub_100168920@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementsForSingleGanss, a1);
}

uint64_t sub_10016892C()
{
  return sub_100019188(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t sub_100168938(int a1)
{
  return sub_1000191C8(a1, type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t (*sub_100168944(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100168994()
{
  return sub_100019258(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t sub_1001689A0()
{
  return sub_100019294(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t sub_1001689AC()
{
  return sub_10002DF3C(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t sub_1001689B8(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t (*sub_1001689C4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100168A14()
{
  return sub_100027768(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t sub_100168A20()
{
  return sub_1000277A4(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t sub_100168A2C()
{
  return sub_1000B8DB4(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t sub_100168A38(int a1)
{
  return sub_1000B8DF4(a1, type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t (*sub_100168A44(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100168A94()
{
  return sub_100020B70(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t sub_100168AA0()
{
  return sub_100020BAC(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t sub_100168AAC()
{
  return sub_1000A9E40(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t sub_100168AB8(int a1)
{
  return sub_1000A9E80(a1, type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t (*sub_100168AC4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement(0) + 32);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100168B14()
{
  return sub_1000278D8(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t sub_100168B20()
{
  return sub_100027914(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t sub_100168B2C()
{
  return sub_1000B4FE0(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t sub_100168B38(int a1)
{
  return sub_1000B5020(a1, type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t (*sub_100168B44(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement(0) + 36);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100168B94()
{
  return sub_10002822C(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t sub_100168BA0()
{
  return sub_100028268(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t sub_100168BAC()
{
  return sub_1001514C4(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t sub_100168BB8(int a1)
{
  return sub_100151504(a1, type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t (*sub_100168BC4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement(0) + 40);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100168C14()
{
  return sub_1000336EC(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t sub_100168C20()
{
  return sub_100033728(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t sub_100168C2C()
{
  return sub_100172384(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t sub_100168C38(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement(0);
  *(_BYTE *)(v1 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*sub_100168C64(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement(0) + 44);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 6)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_100168CB0()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement(0) + 44)) != 6;
}

uint64_t sub_100168CD8()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement(0);
  *(_BYTE *)(v0 + *(int *)(result + 44)) = 6;
  return result;
}

uint64_t sub_100168CFC()
{
  return sub_100151698(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t sub_100168D08(int a1)
{
  return sub_1001516D8(a1, type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t (*sub_100168D14(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement(0) + 48);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100168D64()
{
  return sub_1000B3C00(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t sub_100168D70()
{
  return sub_1000B3C3C(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t sub_100168D7C()
{
  return sub_10015DA70(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t sub_100168D88(int a1)
{
  return sub_10015DAB0(a1, type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t (*sub_100168D94(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement(0) + 52);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100168DE4()
{
  return sub_10015DB40(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

uint64_t sub_100168DF0()
{
  return sub_10015DB7C(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement);
}

int *sub_100168DFC@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for Proto_Gnss_Emergency_GpsMeasurementElement(0);
  v3 = a1 + result[5];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = a1 + result[6];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = a1 + result[7];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = a1 + result[8];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a1 + result[9];
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  v8 = a1 + result[10];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  *(_BYTE *)(a1 + result[11]) = 6;
  v9 = a1 + result[12];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + result[13];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  return result;
}

uint64_t sub_100168EB4()
{
  return sub_100159148(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements);
}

uint64_t sub_100168EC0(int a1)
{
  return sub_100168EDC(a1, type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements, type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements._StorageClass, (void (*)(uint64_t))sub_1001A9844);
}

uint64_t sub_100168EDC(int a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD), void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _BYTE v17[24];

  v7 = v4;
  v9 = *(int *)(a2(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v4 + v9)) & 1) == 0)
  {
    v10 = *(_QWORD *)(v4 + v9);
    v11 = a3(0);
    v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    v13 = swift_retain(v10);
    a4(v13);
    v14 = *(_QWORD *)(v7 + v9);
    *(_QWORD *)(v7 + v9) = v12;
    swift_release(v14);
  }
  v15 = *(_QWORD *)(v7 + v9);
  result = swift_beginAccess(v15 + 16, v17, 1, 0);
  *(_DWORD *)(v15 + 16) = a1;
  *(_BYTE *)(v15 + 20) = 0;
  return result;
}

void (*sub_100168F8C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 16, v3, 0, 0);
  v6 = *(_DWORD *)(v5 + 16);
  if (*(_BYTE *)(v5 + 20))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_10016900C;
}

void sub_10016900C(uint64_t *a1, char a2)
{
  sub_100169020(a1, a2, type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements._StorageClass, (void (*)(uint64_t))sub_1001A9844);
}

void sub_100169020(uint64_t *a1, char a2, uint64_t (*a3)(_QWORD), void (*a4)(uint64_t))
{
  uint64_t v7;
  int v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v7 = *a1;
  v8 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    v10 = v7 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v10 = v7 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v11 = *(int *)(v7 + 84);
    v12 = *(_QWORD *)(v7 + 72);
    v13 = *(_QWORD *)(v12 + v11);
    v14 = a3(0);
    v15 = swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    v16 = swift_retain(v13);
    a4(v16);
    v17 = *(_QWORD *)(v12 + v11);
    *(_QWORD *)(v12 + v11) = v15;
    swift_release(v17);
  }
LABEL_4:
  v18 = *(_QWORD *)(*(_QWORD *)(v7 + 72) + *(int *)(v7 + 84));
  swift_beginAccess(v18 + 16, v10, 1, 0);
  *(_DWORD *)(v18 + 16) = v8;
  *(_BYTE *)(v18 + 20) = 0;
  free((void *)v7);
}

BOOL sub_1001690F8()
{
  return sub_10002EDC0(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements);
}

uint64_t sub_100169104()
{
  return sub_10002EE30(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements, type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements._StorageClass, (void (*)(uint64_t))sub_1001A9844);
}

uint64_t sub_100169120()
{
  return sub_10016912C(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements);
}

uint64_t sub_10016912C(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[24];

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess(v2 + 24, v4, 0, 0);
  if (*(_BYTE *)(v2 + 28))
    return 0;
  else
    return *(unsigned int *)(v2 + 24);
}

uint64_t sub_100169184(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_1001A9844(v8);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v10 + 24, v12, 1, 0);
  *(_DWORD *)(v10 + 24) = a1;
  *(_BYTE *)(v10 + 28) = 0;
  return result;
}

void (*sub_10016922C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 24, v3, 0, 0);
  v6 = *(_DWORD *)(v5 + 24);
  if (*(_BYTE *)(v5 + 28))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_1001692AC;
}

void sub_1001692AC(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 84);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_1001A9844(v12);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v14 + 24, v6, 1, 0);
  *(_DWORD *)(v14 + 24) = v4;
  *(_BYTE *)(v14 + 28) = 0;
  free((void *)v3);
}

BOOL sub_100169380()
{
  return sub_10016938C(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements);
}

BOOL sub_10016938C(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[24];

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess(v2 + 24, v4, 0, 0);
  return (*(_BYTE *)(v2 + 28) & 1) == 0;
}

uint64_t sub_1001693E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_1001A9844(v6);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v8 + 24, v10, 1, 0);
  *(_DWORD *)(v8 + 24) = 0;
  *(_BYTE *)(v8 + 28) = 1;
  return result;
}

uint64_t sub_100169480()
{
  return sub_10016948C(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements);
}

uint64_t sub_10016948C(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[24];

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess(v2 + 32, v4, 0, 0);
  if (*(_BYTE *)(v2 + 36))
    return 0;
  else
    return *(unsigned int *)(v2 + 32);
}

uint64_t sub_1001694E4(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_1001A9844(v8);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v10 + 32, v12, 1, 0);
  *(_DWORD *)(v10 + 32) = a1;
  *(_BYTE *)(v10 + 36) = 0;
  return result;
}

void (*sub_10016958C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 32, v3, 0, 0);
  v6 = *(_DWORD *)(v5 + 32);
  if (*(_BYTE *)(v5 + 36))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_10016960C;
}

void sub_10016960C(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 84);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_1001A9844(v12);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v14 + 32, v6, 1, 0);
  *(_DWORD *)(v14 + 32) = v4;
  *(_BYTE *)(v14 + 36) = 0;
  free((void *)v3);
}

BOOL sub_1001696E0()
{
  return sub_1001696EC(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements);
}

BOOL sub_1001696EC(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[24];

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess(v2 + 32, v4, 0, 0);
  return (*(_BYTE *)(v2 + 36) & 1) == 0;
}

uint64_t sub_100169740()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_1001A9844(v6);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v8 + 32, v10, 1, 0);
  *(_DWORD *)(v8 + 32) = 0;
  *(_BYTE *)(v8 + 36) = 1;
  return result;
}

uint64_t sub_1001697E0()
{
  return sub_1001697EC(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements);
}

uint64_t sub_1001697EC(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[24];

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess(v2 + 40, v4, 0, 0);
  if (*(_BYTE *)(v2 + 44))
    return 0;
  else
    return *(unsigned int *)(v2 + 40);
}

uint64_t sub_100169844(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_1001A9844(v8);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v10 + 40, v12, 1, 0);
  *(_DWORD *)(v10 + 40) = a1;
  *(_BYTE *)(v10 + 44) = 0;
  return result;
}

void (*sub_1001698EC(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 40, v3, 0, 0);
  v6 = *(_DWORD *)(v5 + 40);
  if (*(_BYTE *)(v5 + 44))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_10016996C;
}

void sub_10016996C(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 84);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_1001A9844(v12);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v14 + 40, v6, 1, 0);
  *(_DWORD *)(v14 + 40) = v4;
  *(_BYTE *)(v14 + 44) = 0;
  free((void *)v3);
}

BOOL sub_100169A40()
{
  return sub_100169A4C(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements);
}

BOOL sub_100169A4C(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[24];

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess(v2 + 40, v4, 0, 0);
  return (*(_BYTE *)(v2 + 44) & 1) == 0;
}

uint64_t sub_100169AA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_1001A9844(v6);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v8 + 40, v10, 1, 0);
  *(_DWORD *)(v8 + 40) = 0;
  *(_BYTE *)(v8 + 44) = 1;
  return result;
}

uint64_t sub_100169B40()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0) + 20));
  swift_beginAccess(v1 + 48, v3, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v1 + 48));
}

uint64_t sub_100169B8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_1001A9844(v8);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  swift_beginAccess(v10 + 48, v13, 1, 0);
  v11 = *(_QWORD *)(v10 + 48);
  *(_QWORD *)(v10 + 48) = a1;
  return swift_bridgeObjectRelease(v11);
}

void (*sub_100169C38(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 48, v3, 0, 0);
  v6 = *(_QWORD *)(v5 + 48);
  v3[9] = v6;
  swift_bridgeObjectRetain(v6);
  return sub_100169CB4;
}

void sub_100169CB4(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(int *)(*a1 + 88);
  v5 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(*a1 + 72));
    if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v5 + v4)) & 1) == 0)
    {
      v6 = *(int *)(v2 + 88);
      v7 = *(_QWORD *)(v2 + 80);
      v8 = *(_QWORD *)(v7 + v6);
      v9 = type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements._StorageClass(0);
      v10 = swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
      v11 = swift_retain(v8);
      sub_1001A9844(v11);
      v12 = *(_QWORD *)(v7 + v6);
      *(_QWORD *)(v7 + v6) = v10;
      swift_release(v12);
    }
    v13 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess(v13 + 48, v2 + 24, 1, 0);
    v14 = *(_QWORD *)(v13 + 48);
    *(_QWORD *)(v13 + 48) = v3;
    swift_bridgeObjectRelease(v14);
    v15 = *(_QWORD *)(v2 + 72);
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v5 + v4)) & 1) == 0)
    {
      v16 = *(int *)(v2 + 88);
      v17 = *(_QWORD *)(v2 + 80);
      v18 = *(_QWORD *)(v17 + v16);
      v19 = type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements._StorageClass(0);
      v20 = swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
      v21 = swift_retain(v18);
      sub_1001A9844(v21);
      v22 = *(_QWORD *)(v17 + v16);
      *(_QWORD *)(v17 + v16) = v20;
      swift_release(v22);
    }
    v23 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess(v23 + 48, v2 + 48, 1, 0);
    v15 = *(_QWORD *)(v23 + 48);
    *(_QWORD *)(v23 + 48) = v3;
  }
  swift_bridgeObjectRelease(v15);
  free((void *)v2);
}

uint64_t sub_100169E08@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v12[24];

  v3 = sub_1000039AC(&qword_100375688);
  __chkstk_darwin(v3);
  v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__measuredTimeParams;
  swift_beginAccess(v6, v12, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_100375688);
  v7 = type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + *(int *)(v7 + 20)) = 6;
  v8 = a1 + *(int *)(v7 + 24);
  v9 = type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  return sub_100015704((uint64_t)v5, &qword_100375688);
}

uint64_t sub_100169F44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_100375688);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_1001A9844(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams);
  v17 = type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_100375688);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__measuredTimeParams;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__measuredTimeParams, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_100375688);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10016A0C4(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_100375688);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__measuredTimeParams;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_100375688);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[*(int *)(v6 + 20)] = 6;
    v11 = &v9[*(int *)(v6 + 24)];
    v12 = type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    sub_100015704((uint64_t)v5, &qword_100375688);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams);
  }
  return sub_10016A230;
}

void sub_10016A230(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_100169F44, type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams);
}

BOOL sub_10016A244()
{
  return sub_10001CFF4(&qword_100375688, type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements, &OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__measuredTimeParams, type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams);
}

uint64_t sub_10016A268()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_100375688);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_1001A9844(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__measuredTimeParams;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__measuredTimeParams, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_100375688);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10016A398()
{
  return sub_10008D104(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements, &OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__codePhaseAmbiguity);
}

uint64_t sub_10016A3AC(int a1)
{
  return sub_10016A490(a1, &OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__codePhaseAmbiguity);
}

void (*sub_10016A3B8(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__codePhaseAmbiguity;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_10016A444;
}

void sub_10016A444(uint64_t *a1, char a2)
{
  sub_10016A5DC(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__codePhaseAmbiguity);
}

BOOL sub_10016A450()
{
  return sub_100022E2C(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements, &OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__codePhaseAmbiguity);
}

uint64_t sub_10016A464()
{
  return sub_10016A6DC(&OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__codePhaseAmbiguity);
}

uint64_t sub_10016A470()
{
  return sub_10008D104(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements, &OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__gpsTodpresent);
}

uint64_t sub_10016A484(int a1)
{
  return sub_10016A490(a1, &OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__gpsTodpresent);
}

uint64_t sub_10016A490(int a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  _BYTE v14[24];

  v4 = v2;
  v6 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v2 + v6)) & 1) == 0)
  {
    v7 = *(_QWORD *)(v2 + v6);
    v8 = type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements._StorageClass(0);
    v9 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    v10 = swift_retain(v7);
    sub_1001A9844(v10);
    v11 = *(_QWORD *)(v4 + v6);
    *(_QWORD *)(v4 + v6) = v9;
    swift_release(v11);
  }
  v12 = *(_QWORD *)(v4 + v6) + *a2;
  result = swift_beginAccess(v12, v14, 1, 0);
  *(_DWORD *)v12 = a1;
  *(_BYTE *)(v12 + 4) = 0;
  return result;
}

void (*sub_10016A544(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__gpsTodpresent;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_10016A5D0;
}

void sub_10016A5D0(uint64_t *a1, char a2)
{
  sub_10016A5DC(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__gpsTodpresent);
}

void sub_10016A5DC(uint64_t *a1, char a2, _QWORD *a3)
{
  uint64_t v5;
  int v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *a1;
  v6 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    v8 = v5 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v8 = v5 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v9 = *(int *)(v5 + 84);
    v10 = *(_QWORD *)(v5 + 72);
    v11 = *(_QWORD *)(v10 + v9);
    v12 = type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_1001A9844(v14);
    v15 = *(_QWORD *)(v10 + v9);
    *(_QWORD *)(v10 + v9) = v13;
    swift_release(v15);
  }
LABEL_4:
  v16 = *(_QWORD *)(*(_QWORD *)(v5 + 72) + *(int *)(v5 + 84)) + *a3;
  swift_beginAccess(v16, v8, 1, 0);
  *(_DWORD *)v16 = v6;
  *(_BYTE *)(v16 + 4) = 0;
  free((void *)v5);
}

BOOL sub_10016A6BC()
{
  return sub_100022E2C(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements, &OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__gpsTodpresent);
}

uint64_t sub_10016A6D0()
{
  return sub_10016A6DC(&OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__gpsTodpresent);
}

uint64_t sub_10016A6DC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v3 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_1001A9844(v8);
    v9 = *(_QWORD *)(v3 + v4);
    *(_QWORD *)(v3 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v3 + v4) + *a1;
  result = swift_beginAccess(v10, v12, 1, 0);
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  return result;
}

uint64_t sub_10016A790@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v13[24];

  v3 = sub_1000039AC(&qword_1003755A8);
  __chkstk_darwin(v3);
  v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__gpsTod;
  swift_beginAccess(v6, v13, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_1003755A8);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_GpsTOD(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v7[6];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v7[7];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  return sub_100015704((uint64_t)v5, &qword_1003755A8);
}

uint64_t sub_10016A8C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_1003755A8);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_1001A9844(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
  v17 = type metadata accessor for Proto_Gnss_Emergency_GpsTOD(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_1003755A8);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__gpsTod;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__gpsTod, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_1003755A8);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10016AA48(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_1003755A8);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_GpsTOD(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__gpsTod;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_1003755A8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    sub_100015704((uint64_t)v5, &qword_1003755A8);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
  }
  return sub_10016ABB0;
}

void sub_10016ABB0(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_10016A8C8, type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

BOOL sub_10016ABC4()
{
  return sub_10001CFF4(&qword_1003755A8, type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements, &OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__gpsTod, type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

uint64_t sub_10016ABE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_1003755A8);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_1001A9844(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for Proto_Gnss_Emergency_GpsTOD(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__gpsTod;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__gpsTod, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_1003755A8);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10016AD18@<X0>(uint64_t a1@<X8>)
{
  return sub_100023FF4(type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements, &qword_1003B0BA0, &qword_1003B0BA8, (uint64_t)sub_1001A974C, a1);
}

uint64_t sub_10016AD3C()
{
  return sub_100036594(&qword_1003B0BA0, &qword_1003B0BA8, (uint64_t)sub_1001A974C);
}

uint64_t sub_10016AD58()
{
  return sub_10016AD64(type metadata accessor for Proto_Gnss_Emergency_MeasurementReport);
}

uint64_t sub_10016AD64(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[24];

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess(v2 + 16, v4, 0, 0);
  if (*(_BYTE *)(v2 + 16) == 9)
    return 0;
  else
    return *(unsigned __int8 *)(v2 + 16);
}

uint64_t sub_10016ADB8(char a1)
{
  return sub_10016ADD4(a1, type metadata accessor for Proto_Gnss_Emergency_MeasurementReport, type metadata accessor for Proto_Gnss_Emergency_MeasurementReport._StorageClass, (void (*)(uint64_t))sub_1001C40E0);
}

uint64_t sub_10016ADD4(char a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD), void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _BYTE v17[24];

  v7 = v4;
  v9 = *(int *)(a2(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v4 + v9)) & 1) == 0)
  {
    v10 = *(_QWORD *)(v4 + v9);
    v11 = a3(0);
    v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    v13 = swift_retain(v10);
    a4(v13);
    swift_release(v10);
    v14 = *(_QWORD *)(v7 + v9);
    *(_QWORD *)(v7 + v9) = v12;
    swift_release(v14);
  }
  v15 = *(_QWORD *)(v7 + v9);
  result = swift_beginAccess(v15 + 16, v17, 1, 0);
  *(_BYTE *)(v15 + 16) = a1;
  return result;
}

void (*sub_10016AE8C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_MeasurementReport(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 16, v3, 0, 0);
  v6 = *(unsigned __int8 *)(v5 + 16);
  if (v6 == 9)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_10016AF08;
}

void sub_10016AF08(uint64_t *a1, char a2)
{
  sub_10016AF1C(a1, a2, type metadata accessor for Proto_Gnss_Emergency_MeasurementReport._StorageClass, (void (*)(uint64_t))sub_1001C40E0);
}

void sub_10016AF1C(uint64_t *a1, char a2, uint64_t (*a3)(_QWORD), void (*a4)(uint64_t))
{
  uint64_t v7;
  char v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;

  v7 = *a1;
  v8 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    v10 = v7 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v10 = v7 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v11 = *(int *)(v7 + 80);
    v12 = *(_QWORD *)(v7 + 72);
    v13 = *(_QWORD *)(v12 + v11);
    v14 = a3(0);
    v15 = swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    v16 = swift_retain(v13);
    a4(v16);
    swift_release(v13);
    v17 = *(_QWORD *)(v12 + v11);
    *(_QWORD *)(v12 + v11) = v15;
    swift_release(v17);
  }
LABEL_4:
  v18 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 72) + *(int *)(v7 + 80)) + 16);
  swift_beginAccess(v18, v10, 1, 0);
  *v18 = v8;
  free((void *)v7);
}

BOOL sub_10016AFFC()
{
  return sub_10016B008(type metadata accessor for Proto_Gnss_Emergency_MeasurementReport);
}

BOOL sub_10016B008(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[24];

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess(v2 + 16, v4, 0, 0);
  return *(_BYTE *)(v2 + 16) != 9;
}

uint64_t sub_10016B05C()
{
  return sub_10016B078(type metadata accessor for Proto_Gnss_Emergency_MeasurementReport, type metadata accessor for Proto_Gnss_Emergency_MeasurementReport._StorageClass, (void (*)(uint64_t))sub_1001C40E0);
}

uint64_t sub_10016B078(uint64_t (*a1)(_QWORD), uint64_t (*a2)(_QWORD), void (*a3)(uint64_t))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _BYTE v15[24];

  v6 = v3;
  v7 = *(int *)(a1(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v3 + v7)) & 1) == 0)
  {
    v8 = *(_QWORD *)(v3 + v7);
    v9 = a2(0);
    v10 = swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
    v11 = swift_retain(v8);
    a3(v11);
    swift_release(v8);
    v12 = *(_QWORD *)(v6 + v7);
    *(_QWORD *)(v6 + v7) = v10;
    swift_release(v12);
  }
  v13 = *(_QWORD *)(v6 + v7);
  result = swift_beginAccess(v13 + 16, v15, 1, 0);
  *(_BYTE *)(v13 + 16) = 9;
  return result;
}

uint64_t sub_10016B12C()
{
  return sub_10016B138(type metadata accessor for Proto_Gnss_Emergency_MeasurementReport);
}

uint64_t sub_10016B138(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[24];

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess(v2 + 20, v4, 0, 0);
  if (*(_BYTE *)(v2 + 24))
    return 0;
  else
    return *(unsigned int *)(v2 + 20);
}

uint64_t sub_10016B190(int a1)
{
  return sub_10016B1AC(a1, type metadata accessor for Proto_Gnss_Emergency_MeasurementReport, type metadata accessor for Proto_Gnss_Emergency_MeasurementReport._StorageClass, (void (*)(uint64_t))sub_1001C40E0);
}

uint64_t sub_10016B1AC(int a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD), void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _BYTE v17[24];

  v7 = v4;
  v9 = *(int *)(a2(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v4 + v9)) & 1) == 0)
  {
    v10 = *(_QWORD *)(v4 + v9);
    v11 = a3(0);
    v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    v13 = swift_retain(v10);
    a4(v13);
    swift_release(v10);
    v14 = *(_QWORD *)(v7 + v9);
    *(_QWORD *)(v7 + v9) = v12;
    swift_release(v14);
  }
  v15 = *(_QWORD *)(v7 + v9);
  result = swift_beginAccess(v15 + 20, v17, 1, 0);
  *(_DWORD *)(v15 + 20) = a1;
  *(_BYTE *)(v15 + 24) = 0;
  return result;
}

void (*sub_10016B268(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_MeasurementReport(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 20, v3, 0, 0);
  v6 = *(_DWORD *)(v5 + 20);
  if (*(_BYTE *)(v5 + 24))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_10016B2E8;
}

void sub_10016B2E8(uint64_t *a1, char a2)
{
  sub_10016B2FC(a1, a2, type metadata accessor for Proto_Gnss_Emergency_MeasurementReport._StorageClass, (void (*)(uint64_t))sub_1001C40E0);
}

void sub_10016B2FC(uint64_t *a1, char a2, uint64_t (*a3)(_QWORD), void (*a4)(uint64_t))
{
  uint64_t v7;
  int v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v7 = *a1;
  v8 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    v10 = v7 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v10 = v7 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v11 = *(int *)(v7 + 84);
    v12 = *(_QWORD *)(v7 + 72);
    v13 = *(_QWORD *)(v12 + v11);
    v14 = a3(0);
    v15 = swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    v16 = swift_retain(v13);
    a4(v16);
    swift_release(v13);
    v17 = *(_QWORD *)(v12 + v11);
    *(_QWORD *)(v12 + v11) = v15;
    swift_release(v17);
  }
LABEL_4:
  v18 = *(_QWORD *)(*(_QWORD *)(v7 + 72) + *(int *)(v7 + 84));
  swift_beginAccess(v18 + 20, v10, 1, 0);
  *(_DWORD *)(v18 + 20) = v8;
  *(_BYTE *)(v18 + 24) = 0;
  free((void *)v7);
}

BOOL sub_10016B3DC()
{
  return sub_10016B3E8(type metadata accessor for Proto_Gnss_Emergency_MeasurementReport);
}

BOOL sub_10016B3E8(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[24];

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess(v2 + 20, v4, 0, 0);
  return (*(_BYTE *)(v2 + 24) & 1) == 0;
}

uint64_t sub_10016B43C()
{
  return sub_10016B458(type metadata accessor for Proto_Gnss_Emergency_MeasurementReport, type metadata accessor for Proto_Gnss_Emergency_MeasurementReport._StorageClass, (void (*)(uint64_t))sub_1001C40E0);
}

uint64_t sub_10016B458(uint64_t (*a1)(_QWORD), uint64_t (*a2)(_QWORD), void (*a3)(uint64_t))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _BYTE v15[24];

  v6 = v3;
  v7 = *(int *)(a1(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v3 + v7)) & 1) == 0)
  {
    v8 = *(_QWORD *)(v3 + v7);
    v9 = a2(0);
    v10 = swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
    v11 = swift_retain(v8);
    a3(v11);
    swift_release(v8);
    v12 = *(_QWORD *)(v6 + v7);
    *(_QWORD *)(v6 + v7) = v10;
    swift_release(v12);
  }
  v13 = *(_QWORD *)(v6 + v7);
  result = swift_beginAccess(v13 + 20, v15, 1, 0);
  *(_DWORD *)(v13 + 20) = 0;
  *(_BYTE *)(v13 + 24) = 1;
  return result;
}

uint64_t sub_10016B510@<X0>(uint64_t a1@<X8>)
{
  return sub_10017ECB0(type metadata accessor for Proto_Gnss_Emergency_MeasurementReport, &OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_MeasurementReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__sessionInfo, a1);
}

uint64_t sub_10016B524(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_100375648);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_MeasurementReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for Proto_Gnss_Emergency_MeasurementReport._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_1001C40E0(v14);
    swift_release(v11);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_SessionInfo);
  v17 = type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_100375648);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_MeasurementReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__sessionInfo;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_MeasurementReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__sessionInfo, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_100375648);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10016B6A8(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_100375648);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_MeasurementReport(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_MeasurementReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__sessionInfo;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_100375648);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 6;
    v9[v6[6]] = 7;
    v11 = &v9[v6[7]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    sub_100015704((uint64_t)v5, &qword_100375648);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_SessionInfo);
  }
  return sub_10016B808;
}

void sub_10016B808(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_10016B524, type metadata accessor for Proto_Gnss_Emergency_SessionInfo);
}

BOOL sub_10016B81C()
{
  return sub_10001CFF4(&qword_100375648, type metadata accessor for Proto_Gnss_Emergency_MeasurementReport, &OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_MeasurementReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__sessionInfo, type metadata accessor for Proto_Gnss_Emergency_SessionInfo);
}

uint64_t sub_10016B840()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_100375648);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_MeasurementReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for Proto_Gnss_Emergency_MeasurementReport._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_1001C40E0(v9);
    swift_release(v6);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_MeasurementReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__sessionInfo;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_MeasurementReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__sessionInfo, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_100375648);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10016B974@<X0>(uint64_t a1@<X8>)
{
  return sub_10017F250(type metadata accessor for Proto_Gnss_Emergency_MeasurementReport, &OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_MeasurementReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__gpsMeasurements, a1);
}

uint64_t sub_10016B988(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_100375690);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_MeasurementReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for Proto_Gnss_Emergency_MeasurementReport._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_1001C40E0(v14);
    swift_release(v11);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements);
  v17 = type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_100375690);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_MeasurementReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__gpsMeasurements;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_MeasurementReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__gpsMeasurements, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_100375690);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10016BB0C(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_100375690);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_MeasurementReport(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_MeasurementReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__gpsMeasurements;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_100375690);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = *(int *)(v6 + 20);
    if (qword_1003B0BA0 != -1)
      swift_once(&qword_1003B0BA0, sub_1001A974C);
    v12 = qword_1003B0BA8;
    *(_QWORD *)&v9[v11] = qword_1003B0BA8;
    swift_retain(v12);
    sub_100015704((uint64_t)v5, &qword_100375690);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements);
  }
  return sub_10016BC7C;
}

void sub_10016BC7C(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_10016B988, type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements);
}

BOOL sub_10016BC90()
{
  return sub_10001CFF4(&qword_100375690, type metadata accessor for Proto_Gnss_Emergency_MeasurementReport, &OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_MeasurementReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__gpsMeasurements, type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements);
}

uint64_t sub_10016BCB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_100375690);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_MeasurementReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for Proto_Gnss_Emergency_MeasurementReport._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_1001C40E0(v9);
    swift_release(v6);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_MeasurementReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__gpsMeasurements;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_MeasurementReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__gpsMeasurements, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_100375690);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10016BDE8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v19[24];

  v3 = sub_1000039AC(&qword_100375698);
  __chkstk_darwin(v3);
  v5 = &v19[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_MeasurementReport(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_MeasurementReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssMeasurements;
  swift_beginAccess(v6, v19, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_100375698);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + v7[5]) = 6;
  v8 = a1 + v7[6];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v7[7];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v7[8];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1 + v7[9];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  v12 = a1 + v7[10];
  v13 = type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v14 = a1 + v7[11];
  *(_DWORD *)v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  v15 = a1 + v7[12];
  v16 = type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementsForSingleGanss(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  return sub_100015704((uint64_t)v5, &qword_100375698);
}

uint64_t sub_10016BFAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_100375698);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_MeasurementReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for Proto_Gnss_Emergency_MeasurementReport._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_1001C40E0(v14);
    swift_release(v11);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements);
  v17 = type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_100375698);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_MeasurementReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssMeasurements;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_MeasurementReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssMeasurements, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_100375698);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10016C130(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_100375698);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_MeasurementReport(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_MeasurementReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssMeasurements;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_100375698);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 6;
    v11 = &v9[v6[6]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[7]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[8]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    v14 = &v9[v6[9]];
    *(_DWORD *)v14 = 0;
    v14[4] = 1;
    v15 = &v9[v6[10]];
    v16 = type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
    v17 = &v9[v6[11]];
    *(_DWORD *)v17 = 0;
    v17[4] = 1;
    v18 = &v9[v6[12]];
    v19 = type metadata accessor for Proto_Gnss_Emergency_GanssMeasurementsForSingleGanss(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
    sub_100015704((uint64_t)v5, &qword_100375698);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements);
  }
  return sub_10016C31C;
}

void sub_10016C31C(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_10016BFAC, type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements);
}

BOOL sub_10016C330()
{
  return sub_10001CFF4(&qword_100375698, type metadata accessor for Proto_Gnss_Emergency_MeasurementReport, &OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_MeasurementReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssMeasurements, type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements);
}

uint64_t sub_10016C354()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_100375698);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_MeasurementReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for Proto_Gnss_Emergency_MeasurementReport._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_1001C40E0(v9);
    swift_release(v6);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_MeasurementReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssMeasurements;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_MeasurementReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssMeasurements, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_100375698);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10016C488()
{
  return sub_10008D104(type metadata accessor for Proto_Gnss_Emergency_MeasurementReport, &OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_MeasurementReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__moreGanssMeasurements);
}

uint64_t sub_10016C49C(int a1)
{
  return sub_10008D18C(a1, type metadata accessor for Proto_Gnss_Emergency_MeasurementReport, type metadata accessor for Proto_Gnss_Emergency_MeasurementReport._StorageClass, (void (*)(uint64_t))sub_1001C40E0, &OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_MeasurementReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__moreGanssMeasurements);
}

void (*sub_10016C4C0(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_MeasurementReport(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_MeasurementReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__moreGanssMeasurements;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_10016C54C;
}

void sub_10016C54C(uint64_t *a1, char a2)
{
  sub_10008D2FC(a1, a2, type metadata accessor for Proto_Gnss_Emergency_MeasurementReport._StorageClass, (void (*)(uint64_t))sub_1001C40E0, &OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_MeasurementReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__moreGanssMeasurements);
}

BOOL sub_10016C568()
{
  return sub_100022E2C(type metadata accessor for Proto_Gnss_Emergency_MeasurementReport, &OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_MeasurementReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__moreGanssMeasurements);
}

uint64_t sub_10016C57C()
{
  return sub_10008D428(type metadata accessor for Proto_Gnss_Emergency_MeasurementReport, type metadata accessor for Proto_Gnss_Emergency_MeasurementReport._StorageClass, (void (*)(uint64_t))sub_1001C40E0, &OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_MeasurementReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__moreGanssMeasurements);
}

uint64_t sub_10016C5A0()
{
  return sub_100091180(type metadata accessor for Proto_Gnss_Emergency_MeasurementReport, &OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_MeasurementReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__isMeasInCdmaTime);
}

uint64_t sub_10016C5B4(char a1)
{
  return sub_100091200(a1, type metadata accessor for Proto_Gnss_Emergency_MeasurementReport, type metadata accessor for Proto_Gnss_Emergency_MeasurementReport._StorageClass, (void (*)(uint64_t))sub_1001C40E0, &OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_MeasurementReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__isMeasInCdmaTime);
}

void (*sub_10016C5D8(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_MeasurementReport(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_MeasurementReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__isMeasInCdmaTime);
  swift_beginAccess(v5, v3, 0, 0);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_10016C65C;
}

void sub_10016C65C(uint64_t *a1, char a2)
{
  sub_100091368(a1, a2, type metadata accessor for Proto_Gnss_Emergency_MeasurementReport._StorageClass, (void (*)(uint64_t))sub_1001C40E0, &OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_MeasurementReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__isMeasInCdmaTime);
}

BOOL sub_10016C678()
{
  return sub_100091468(type metadata accessor for Proto_Gnss_Emergency_MeasurementReport, &OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_MeasurementReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__isMeasInCdmaTime);
}

uint64_t sub_10016C68C()
{
  return sub_1001803BC(type metadata accessor for Proto_Gnss_Emergency_MeasurementReport, type metadata accessor for Proto_Gnss_Emergency_MeasurementReport._StorageClass, (void (*)(uint64_t))sub_1001C40E0, &OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_MeasurementReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__isMeasInCdmaTime);
}

uint64_t sub_10016C6B0@<X0>(uint64_t a1@<X8>)
{
  return sub_100023FF4(type metadata accessor for Proto_Gnss_Emergency_MeasurementReport, &qword_1003B0BB8, &qword_1003B0BC0, (uint64_t)sub_1001AB24C, a1);
}

uint64_t sub_10016C6D4()
{
  return sub_100036594(&qword_1003B0BB8, &qword_1003B0BC0, (uint64_t)sub_1001AB24C);
}

uint64_t sub_10016C6F0()
{
  return sub_1000B8DB4(type metadata accessor for Proto_Gnss_Emergency_GpsAssistanceRequest);
}

uint64_t sub_10016C6FC(int a1)
{
  return sub_1000B8DF4(a1, type metadata accessor for Proto_Gnss_Emergency_GpsAssistanceRequest);
}

uint64_t (*sub_10016C708(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsAssistanceRequest(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10016C758()
{
  return sub_100020B70(type metadata accessor for Proto_Gnss_Emergency_GpsAssistanceRequest);
}

uint64_t sub_10016C764()
{
  return sub_100020BAC(type metadata accessor for Proto_Gnss_Emergency_GpsAssistanceRequest);
}

uint64_t sub_10016C770()
{
  return sub_1000A9E40(type metadata accessor for Proto_Gnss_Emergency_GpsAssistanceRequest);
}

uint64_t sub_10016C77C(int a1)
{
  return sub_1000A9E80(a1, type metadata accessor for Proto_Gnss_Emergency_GpsAssistanceRequest);
}

uint64_t (*sub_10016C788(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsAssistanceRequest(0) + 32);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10016C7D8()
{
  return sub_1000278D8(type metadata accessor for Proto_Gnss_Emergency_GpsAssistanceRequest);
}

uint64_t sub_10016C7E4()
{
  return sub_100027914(type metadata accessor for Proto_Gnss_Emergency_GpsAssistanceRequest);
}

uint64_t sub_10016C7F0()
{
  return sub_1000B4FE0(type metadata accessor for Proto_Gnss_Emergency_GpsAssistanceRequest);
}

uint64_t sub_10016C7FC(int a1)
{
  return sub_1000B5020(a1, type metadata accessor for Proto_Gnss_Emergency_GpsAssistanceRequest);
}

uint64_t (*sub_10016C808(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsAssistanceRequest(0) + 36);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10016C858()
{
  return sub_10002822C(type metadata accessor for Proto_Gnss_Emergency_GpsAssistanceRequest);
}

uint64_t sub_10016C864()
{
  return sub_100028268(type metadata accessor for Proto_Gnss_Emergency_GpsAssistanceRequest);
}

uint64_t sub_10016C870()
{
  return sub_1001514C4(type metadata accessor for Proto_Gnss_Emergency_GpsAssistanceRequest);
}

uint64_t sub_10016C87C(int a1)
{
  return sub_100151504(a1, type metadata accessor for Proto_Gnss_Emergency_GpsAssistanceRequest);
}

uint64_t (*sub_10016C888(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsAssistanceRequest(0) + 40);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10016C8D8()
{
  return sub_1000336EC(type metadata accessor for Proto_Gnss_Emergency_GpsAssistanceRequest);
}

uint64_t sub_10016C8E4()
{
  return sub_100033728(type metadata accessor for Proto_Gnss_Emergency_GpsAssistanceRequest);
}

uint64_t sub_10016C8F0()
{
  return sub_1000A6D84(type metadata accessor for Proto_Gnss_Emergency_GpsAssistanceRequest);
}

uint64_t sub_10016C8FC(int a1)
{
  return sub_1000A6DC4(a1, type metadata accessor for Proto_Gnss_Emergency_GpsAssistanceRequest);
}

uint64_t (*sub_10016C908(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsAssistanceRequest(0) + 44);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10016C958()
{
  return sub_100033824(type metadata accessor for Proto_Gnss_Emergency_GpsAssistanceRequest);
}

uint64_t sub_10016C964()
{
  return sub_100033860(type metadata accessor for Proto_Gnss_Emergency_GpsAssistanceRequest);
}

uint64_t sub_10016C970@<X0>(uint64_t a1@<X8>)
{
  return sub_1000A6FFC(type metadata accessor for Proto_Gnss_Emergency_GpsAssistanceRequest, a1);
}

uint64_t sub_10016C97C(uint64_t a1)
{
  return sub_1000A7054(a1, type metadata accessor for Proto_Gnss_Emergency_GpsAssistanceRequest);
}

uint64_t (*sub_10016C988())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for Proto_Gnss_Emergency_GpsAssistanceRequest(0);
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_10016C9B0@<X0>(_QWORD *a1@<X8>)
{
  return sub_10016F358(type metadata accessor for Proto_Gnss_Emergency_GpsAssistanceRequest, a1);
}

uint64_t sub_10016C9BC()
{
  return sub_100019188(type metadata accessor for Proto_Gnss_Emergency_GanssTimeModelElem);
}

uint64_t sub_10016C9C8(int a1)
{
  return sub_1000191C8(a1, type metadata accessor for Proto_Gnss_Emergency_GanssTimeModelElem);
}

uint64_t (*sub_10016C9D4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssTimeModelElem(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10016CA24()
{
  return sub_100019258(type metadata accessor for Proto_Gnss_Emergency_GanssTimeModelElem);
}

uint64_t sub_10016CA30()
{
  return sub_100019294(type metadata accessor for Proto_Gnss_Emergency_GanssTimeModelElem);
}

uint64_t sub_10016CA3C()
{
  return sub_10002DF3C(type metadata accessor for Proto_Gnss_Emergency_GanssTimeModelElem);
}

uint64_t sub_10016CA48(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for Proto_Gnss_Emergency_GanssTimeModelElem);
}

uint64_t (*sub_10016CA54(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssTimeModelElem(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10016CAA4()
{
  return sub_100027768(type metadata accessor for Proto_Gnss_Emergency_GanssTimeModelElem);
}

uint64_t sub_10016CAB0()
{
  return sub_1000277A4(type metadata accessor for Proto_Gnss_Emergency_GanssTimeModelElem);
}

uint64_t sub_10016CABC@<X0>(uint64_t a1@<X8>)
{
  return sub_10015AC38(type metadata accessor for Proto_Gnss_Emergency_GanssTimeModelElem, a1);
}

uint64_t sub_10016CAC8()
{
  return sub_10002DF3C(type metadata accessor for Proto_Gnss_Emergency_GanssDataBitAssist);
}

uint64_t sub_10016CAD4(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for Proto_Gnss_Emergency_GanssDataBitAssist);
}

uint64_t (*sub_10016CAE0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssDataBitAssist(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10016CB30()
{
  return sub_100027768(type metadata accessor for Proto_Gnss_Emergency_GanssDataBitAssist);
}

uint64_t sub_10016CB3C()
{
  return sub_1000277A4(type metadata accessor for Proto_Gnss_Emergency_GanssDataBitAssist);
}

uint64_t sub_10016CB48()
{
  return sub_1000B8DB4(type metadata accessor for Proto_Gnss_Emergency_GanssDataBitAssist);
}

uint64_t sub_10016CB54(int a1)
{
  return sub_1000B8DF4(a1, type metadata accessor for Proto_Gnss_Emergency_GanssDataBitAssist);
}

uint64_t (*sub_10016CB60(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssDataBitAssist(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10016CBB0()
{
  return sub_100020B70(type metadata accessor for Proto_Gnss_Emergency_GanssDataBitAssist);
}

uint64_t sub_10016CBBC()
{
  return sub_100020BAC(type metadata accessor for Proto_Gnss_Emergency_GanssDataBitAssist);
}

uint64_t sub_10016CBC8()
{
  return sub_1000A9E40(type metadata accessor for Proto_Gnss_Emergency_GanssDataBitAssist);
}

uint64_t sub_10016CBD4(int a1)
{
  return sub_1000A9E80(a1, type metadata accessor for Proto_Gnss_Emergency_GanssDataBitAssist);
}

uint64_t (*sub_10016CBE0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssDataBitAssist(0) + 32);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10016CC30()
{
  return sub_1000278D8(type metadata accessor for Proto_Gnss_Emergency_GanssDataBitAssist);
}

uint64_t sub_10016CC3C()
{
  return sub_100027914(type metadata accessor for Proto_Gnss_Emergency_GanssDataBitAssist);
}

uint64_t sub_10016CC48()
{
  return sub_1000B4FE0(type metadata accessor for Proto_Gnss_Emergency_GanssDataBitAssist);
}

uint64_t sub_10016CC54(int a1)
{
  return sub_1000B5020(a1, type metadata accessor for Proto_Gnss_Emergency_GanssDataBitAssist);
}

uint64_t (*sub_10016CC60(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssDataBitAssist(0) + 36);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10016CCB0()
{
  return sub_10002822C(type metadata accessor for Proto_Gnss_Emergency_GanssDataBitAssist);
}

uint64_t sub_10016CCBC()
{
  return sub_100028268(type metadata accessor for Proto_Gnss_Emergency_GanssDataBitAssist);
}

uint64_t sub_10016CCC8()
{
  return sub_1001514C4(type metadata accessor for Proto_Gnss_Emergency_GanssDataBitAssist);
}

uint64_t sub_10016CCD4(int a1)
{
  return sub_100151504(a1, type metadata accessor for Proto_Gnss_Emergency_GanssDataBitAssist);
}

uint64_t (*sub_10016CCE0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssDataBitAssist(0) + 40);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10016CD30()
{
  return sub_1000336EC(type metadata accessor for Proto_Gnss_Emergency_GanssDataBitAssist);
}

uint64_t sub_10016CD3C()
{
  return sub_100033728(type metadata accessor for Proto_Gnss_Emergency_GanssDataBitAssist);
}

uint64_t sub_10016CD48@<X0>(uint64_t a1@<X8>)
{
  return sub_1000053C4(type metadata accessor for Proto_Gnss_Emergency_GanssDataBitAssist, a1);
}

uint64_t sub_10016CD54(uint64_t a1)
{
  return sub_10000541C(a1, type metadata accessor for Proto_Gnss_Emergency_GanssDataBitAssist);
}

uint64_t (*sub_10016CD60())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for Proto_Gnss_Emergency_GanssDataBitAssist(0);
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_10016CD88@<X0>(_QWORD *a1@<X8>)
{
  int *v2;
  uint64_t result;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;

  *a1 = &_swiftEmptyArrayStorage;
  v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_GanssDataBitAssist(0);
  result = UnknownStorage.init()();
  v4 = (char *)a1 + v2[6];
  *(_DWORD *)v4 = 0;
  v4[4] = 1;
  v5 = (char *)a1 + v2[7];
  *(_DWORD *)v5 = 0;
  v5[4] = 1;
  v6 = (char *)a1 + v2[8];
  *(_DWORD *)v6 = 0;
  v6[4] = 1;
  v7 = (char *)a1 + v2[9];
  *(_DWORD *)v7 = 0;
  v7[4] = 1;
  v8 = (char *)a1 + v2[10];
  *(_DWORD *)v8 = 0;
  v8[4] = 1;
  return result;
}

uint64_t sub_10016CE1C()
{
  return sub_100019188(type metadata accessor for Proto_Gnss_Emergency_GanssStoredSatDataElem);
}

uint64_t sub_10016CE28(int a1)
{
  return sub_1000191C8(a1, type metadata accessor for Proto_Gnss_Emergency_GanssStoredSatDataElem);
}

uint64_t (*sub_10016CE34(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssStoredSatDataElem(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10016CE84()
{
  return sub_100019258(type metadata accessor for Proto_Gnss_Emergency_GanssStoredSatDataElem);
}

uint64_t sub_10016CE90()
{
  return sub_100019294(type metadata accessor for Proto_Gnss_Emergency_GanssStoredSatDataElem);
}

uint64_t sub_10016CE9C()
{
  return sub_10002DF3C(type metadata accessor for Proto_Gnss_Emergency_GanssStoredSatDataElem);
}

uint64_t sub_10016CEA8(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for Proto_Gnss_Emergency_GanssStoredSatDataElem);
}

uint64_t (*sub_10016CEB4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssStoredSatDataElem(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10016CF04()
{
  return sub_100027768(type metadata accessor for Proto_Gnss_Emergency_GanssStoredSatDataElem);
}

uint64_t sub_10016CF10()
{
  return sub_1000277A4(type metadata accessor for Proto_Gnss_Emergency_GanssStoredSatDataElem);
}

uint64_t sub_10016CF1C@<X0>(uint64_t a1@<X8>)
{
  return sub_10015AC38(type metadata accessor for Proto_Gnss_Emergency_GanssStoredSatDataElem, a1);
}

uint64_t sub_10016CF28()
{
  return sub_10002DF3C(type metadata accessor for Proto_Gnss_Emergency_GanssNavModelAddData);
}

uint64_t sub_10016CF34(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for Proto_Gnss_Emergency_GanssNavModelAddData);
}

uint64_t (*sub_10016CF40(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssNavModelAddData(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10016CF90()
{
  return sub_100027768(type metadata accessor for Proto_Gnss_Emergency_GanssNavModelAddData);
}

uint64_t sub_10016CF9C()
{
  return sub_1000277A4(type metadata accessor for Proto_Gnss_Emergency_GanssNavModelAddData);
}

uint64_t sub_10016CFA8()
{
  return sub_1000B8DB4(type metadata accessor for Proto_Gnss_Emergency_GanssNavModelAddData);
}

uint64_t sub_10016CFB4(int a1)
{
  return sub_1000B8DF4(a1, type metadata accessor for Proto_Gnss_Emergency_GanssNavModelAddData);
}

uint64_t (*sub_10016CFC0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssNavModelAddData(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10016D010()
{
  return sub_100020B70(type metadata accessor for Proto_Gnss_Emergency_GanssNavModelAddData);
}

uint64_t sub_10016D01C()
{
  return sub_100020BAC(type metadata accessor for Proto_Gnss_Emergency_GanssNavModelAddData);
}

uint64_t sub_10016D028()
{
  return sub_1000A9E40(type metadata accessor for Proto_Gnss_Emergency_GanssNavModelAddData);
}

uint64_t sub_10016D034(int a1)
{
  return sub_1000A9E80(a1, type metadata accessor for Proto_Gnss_Emergency_GanssNavModelAddData);
}

uint64_t (*sub_10016D040(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssNavModelAddData(0) + 32);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10016D090()
{
  return sub_1000278D8(type metadata accessor for Proto_Gnss_Emergency_GanssNavModelAddData);
}

uint64_t sub_10016D09C()
{
  return sub_100027914(type metadata accessor for Proto_Gnss_Emergency_GanssNavModelAddData);
}

uint64_t sub_10016D0A8()
{
  return sub_1000B4FE0(type metadata accessor for Proto_Gnss_Emergency_GanssNavModelAddData);
}

uint64_t sub_10016D0B4(int a1)
{
  return sub_1000B5020(a1, type metadata accessor for Proto_Gnss_Emergency_GanssNavModelAddData);
}

uint64_t (*sub_10016D0C0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssNavModelAddData(0) + 36);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10016D110()
{
  return sub_10002822C(type metadata accessor for Proto_Gnss_Emergency_GanssNavModelAddData);
}

uint64_t sub_10016D11C()
{
  return sub_100028268(type metadata accessor for Proto_Gnss_Emergency_GanssNavModelAddData);
}

uint64_t sub_10016D128@<X0>(uint64_t a1@<X8>)
{
  return sub_1000053C4(type metadata accessor for Proto_Gnss_Emergency_GanssNavModelAddData, a1);
}

uint64_t sub_10016D134(uint64_t a1)
{
  return sub_10000541C(a1, type metadata accessor for Proto_Gnss_Emergency_GanssNavModelAddData);
}

uint64_t (*sub_10016D140())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for Proto_Gnss_Emergency_GanssNavModelAddData(0);
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_10016D168@<X0>(_QWORD *a1@<X8>)
{
  int *v2;
  uint64_t result;
  char *v4;
  char *v5;
  char *v6;
  char *v7;

  *a1 = &_swiftEmptyArrayStorage;
  v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_GanssNavModelAddData(0);
  result = UnknownStorage.init()();
  v4 = (char *)a1 + v2[6];
  *(_DWORD *)v4 = 0;
  v4[4] = 1;
  v5 = (char *)a1 + v2[7];
  *(_DWORD *)v5 = 0;
  v5[4] = 1;
  v6 = (char *)a1 + v2[8];
  *(_DWORD *)v6 = 0;
  v6[4] = 1;
  v7 = (char *)a1 + v2[9];
  *(_DWORD *)v7 = 0;
  v7[4] = 1;
  return result;
}

uint64_t sub_10016D1EC()
{
  return sub_100019188(type metadata accessor for Proto_Gnss_Emergency_GanssAddAssistDataChoices);
}

uint64_t sub_10016D1F8(int a1)
{
  return sub_1000191C8(a1, type metadata accessor for Proto_Gnss_Emergency_GanssAddAssistDataChoices);
}

uint64_t (*sub_10016D204(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssAddAssistDataChoices(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10016D254()
{
  return sub_100019258(type metadata accessor for Proto_Gnss_Emergency_GanssAddAssistDataChoices);
}

uint64_t sub_10016D260()
{
  return sub_100019294(type metadata accessor for Proto_Gnss_Emergency_GanssAddAssistDataChoices);
}

uint64_t sub_10016D26C()
{
  return sub_10002DF3C(type metadata accessor for Proto_Gnss_Emergency_GanssAddAssistDataChoices);
}

uint64_t sub_10016D278(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for Proto_Gnss_Emergency_GanssAddAssistDataChoices);
}

uint64_t (*sub_10016D284(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssAddAssistDataChoices(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10016D2D4()
{
  return sub_100027768(type metadata accessor for Proto_Gnss_Emergency_GanssAddAssistDataChoices);
}

uint64_t sub_10016D2E0()
{
  return sub_1000277A4(type metadata accessor for Proto_Gnss_Emergency_GanssAddAssistDataChoices);
}

uint64_t sub_10016D2EC()
{
  return sub_1000B8DB4(type metadata accessor for Proto_Gnss_Emergency_GanssAddAssistDataChoices);
}

uint64_t sub_10016D2F8(int a1)
{
  return sub_1000B8DF4(a1, type metadata accessor for Proto_Gnss_Emergency_GanssAddAssistDataChoices);
}

uint64_t (*sub_10016D304(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssAddAssistDataChoices(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10016D354()
{
  return sub_100020B70(type metadata accessor for Proto_Gnss_Emergency_GanssAddAssistDataChoices);
}

uint64_t sub_10016D360()
{
  return sub_100020BAC(type metadata accessor for Proto_Gnss_Emergency_GanssAddAssistDataChoices);
}

uint64_t sub_10016D36C()
{
  return sub_1000A9E40(type metadata accessor for Proto_Gnss_Emergency_GanssAddAssistDataChoices);
}

uint64_t sub_10016D378(int a1)
{
  return sub_1000A9E80(a1, type metadata accessor for Proto_Gnss_Emergency_GanssAddAssistDataChoices);
}

uint64_t (*sub_10016D384(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssAddAssistDataChoices(0) + 32);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10016D3D4()
{
  return sub_1000278D8(type metadata accessor for Proto_Gnss_Emergency_GanssAddAssistDataChoices);
}

uint64_t sub_10016D3E0()
{
  return sub_100027914(type metadata accessor for Proto_Gnss_Emergency_GanssAddAssistDataChoices);
}

int *sub_10016D3EC@<X0>(uint64_t a1@<X8>)
{
  return sub_10016D3F8(type metadata accessor for Proto_Gnss_Emergency_GanssAddAssistDataChoices, a1);
}

int *sub_10016D3F8@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  int *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  UnknownStorage.init()();
  result = (int *)a1(0);
  v5 = a2 + result[5];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = a2 + result[6];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a2 + result[7];
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  v8 = a2 + result[8];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  return result;
}

uint64_t sub_10016D468()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss(0) + 20));
  swift_beginAccess(v1 + 16, v3, 0, 0);
  if (*(_BYTE *)(v1 + 16) == 7)
    return 0;
  else
    return *(unsigned __int8 *)(v1 + 16);
}

uint64_t sub_10016D4B8(char a1)
{
  return sub_10016D4D4(a1, type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss, type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss._StorageClass, (void (*)(uint64_t))sub_1001AEE64);
}

uint64_t sub_10016D4D4(char a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD), void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _BYTE v17[24];

  v7 = v4;
  v9 = *(int *)(a2(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v4 + v9)) & 1) == 0)
  {
    v10 = *(_QWORD *)(v4 + v9);
    v11 = a3(0);
    v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    v13 = swift_retain(v10);
    a4(v13);
    v14 = *(_QWORD *)(v7 + v9);
    *(_QWORD *)(v7 + v9) = v12;
    swift_release(v14);
  }
  v15 = *(_QWORD *)(v7 + v9);
  result = swift_beginAccess(v15 + 16, v17, 1, 0);
  *(_BYTE *)(v15 + 16) = a1;
  return result;
}

void (*sub_10016D580(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 16, v3, 0, 0);
  v6 = *(unsigned __int8 *)(v5 + 16);
  if (v6 == 7)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_10016D5FC;
}

void sub_10016D5FC(uint64_t *a1, char a2)
{
  sub_10016D610(a1, a2, type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss._StorageClass, (void (*)(uint64_t))sub_1001AEE64);
}

void sub_10016D610(uint64_t *a1, char a2, uint64_t (*a3)(_QWORD), void (*a4)(uint64_t))
{
  uint64_t v7;
  char v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;

  v7 = *a1;
  v8 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    v10 = v7 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v10 = v7 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v11 = *(int *)(v7 + 80);
    v12 = *(_QWORD *)(v7 + 72);
    v13 = *(_QWORD *)(v12 + v11);
    v14 = a3(0);
    v15 = swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    v16 = swift_retain(v13);
    a4(v16);
    v17 = *(_QWORD *)(v12 + v11);
    *(_QWORD *)(v12 + v11) = v15;
    swift_release(v17);
  }
LABEL_4:
  v18 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 72) + *(int *)(v7 + 80)) + 16);
  swift_beginAccess(v18, v10, 1, 0);
  *v18 = v8;
  free((void *)v7);
}

BOOL sub_10016D6E8()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss(0) + 20));
  swift_beginAccess(v1 + 16, v3, 0, 0);
  return *(_BYTE *)(v1 + 16) != 7;
}

uint64_t sub_10016D738()
{
  return sub_10016D758(type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss, type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss._StorageClass, (void (*)(uint64_t))sub_1001AEE64, 7);
}

uint64_t sub_10016D758(uint64_t (*a1)(_QWORD), uint64_t (*a2)(_QWORD), void (*a3)(uint64_t), char a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _BYTE v17[24];

  v8 = v4;
  v9 = *(int *)(a1(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v4 + v9)) & 1) == 0)
  {
    v10 = *(_QWORD *)(v4 + v9);
    v11 = a2(0);
    v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    v13 = swift_retain(v10);
    a3(v13);
    v14 = *(_QWORD *)(v8 + v9);
    *(_QWORD *)(v8 + v9) = v12;
    swift_release(v14);
  }
  v15 = *(_QWORD *)(v8 + v9);
  result = swift_beginAccess(v15 + 16, v17, 1, 0);
  *(_BYTE *)(v15 + 16) = a4;
  return result;
}

uint64_t sub_10016D808()
{
  return sub_10016B138(type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss);
}

uint64_t sub_10016D814(int a1)
{
  return sub_10016F4FC(a1, type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss, type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss._StorageClass, (void (*)(uint64_t))sub_1001AEE64);
}

void (*sub_10016D830(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 20, v3, 0, 0);
  v6 = *(_DWORD *)(v5 + 20);
  if (*(_BYTE *)(v5 + 24))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_10016D8B0;
}

void sub_10016D8B0(uint64_t *a1, char a2)
{
  sub_10016F640(a1, a2, type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss._StorageClass, (void (*)(uint64_t))sub_1001AEE64);
}

BOOL sub_10016D8C4()
{
  return sub_10016B3E8(type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss);
}

uint64_t sub_10016D8D0()
{
  return sub_10016F740(type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss, type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss._StorageClass, (void (*)(uint64_t))sub_1001AEE64);
}

uint64_t sub_10016D8EC()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss(0) + 20));
  swift_beginAccess(v1 + 28, v3, 0, 0);
  if (*(_BYTE *)(v1 + 32))
    return 0;
  else
    return *(unsigned int *)(v1 + 28);
}

uint64_t sub_10016D940(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_1001AEE64(v8);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v10 + 28, v12, 1, 0);
  *(_DWORD *)(v10 + 28) = a1;
  *(_BYTE *)(v10 + 32) = 0;
  return result;
}

void (*sub_10016D9E8(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 28, v3, 0, 0);
  v6 = *(_DWORD *)(v5 + 28);
  if (*(_BYTE *)(v5 + 32))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_10016DA68;
}

void sub_10016DA68(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 84);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_1001AEE64(v12);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v14 + 28, v6, 1, 0);
  *(_DWORD *)(v14 + 28) = v4;
  *(_BYTE *)(v14 + 32) = 0;
  free((void *)v3);
}

BOOL sub_10016DB3C()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss(0) + 20));
  swift_beginAccess(v1 + 28, v3, 0, 0);
  return (*(_BYTE *)(v1 + 32) & 1) == 0;
}

uint64_t sub_10016DB8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_1001AEE64(v6);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v8 + 28, v10, 1, 0);
  *(_DWORD *)(v8 + 28) = 0;
  *(_BYTE *)(v8 + 32) = 1;
  return result;
}

uint64_t sub_10016DC2C()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss(0) + 20));
  swift_beginAccess(v1 + 40, v3, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v1 + 40));
}

uint64_t sub_10016DC78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_1001AEE64(v8);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  swift_beginAccess(v10 + 40, v13, 1, 0);
  v11 = *(_QWORD *)(v10 + 40);
  *(_QWORD *)(v10 + 40) = a1;
  return swift_bridgeObjectRelease(v11);
}

void (*sub_10016DD24(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 40, v3, 0, 0);
  v6 = *(_QWORD *)(v5 + 40);
  v3[9] = v6;
  swift_bridgeObjectRetain(v6);
  return sub_10016DDA0;
}

void sub_10016DDA0(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(int *)(*a1 + 88);
  v5 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(*a1 + 72));
    if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v5 + v4)) & 1) == 0)
    {
      v6 = *(int *)(v2 + 88);
      v7 = *(_QWORD *)(v2 + 80);
      v8 = *(_QWORD *)(v7 + v6);
      v9 = type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss._StorageClass(0);
      v10 = swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
      v11 = swift_retain(v8);
      sub_1001AEE64(v11);
      v12 = *(_QWORD *)(v7 + v6);
      *(_QWORD *)(v7 + v6) = v10;
      swift_release(v12);
    }
    v13 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess(v13 + 40, v2 + 24, 1, 0);
    v14 = *(_QWORD *)(v13 + 40);
    *(_QWORD *)(v13 + 40) = v3;
    swift_bridgeObjectRelease(v14);
    v15 = *(_QWORD *)(v2 + 72);
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v5 + v4)) & 1) == 0)
    {
      v16 = *(int *)(v2 + 88);
      v17 = *(_QWORD *)(v2 + 80);
      v18 = *(_QWORD *)(v17 + v16);
      v19 = type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss._StorageClass(0);
      v20 = swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
      v21 = swift_retain(v18);
      sub_1001AEE64(v21);
      v22 = *(_QWORD *)(v17 + v16);
      *(_QWORD *)(v17 + v16) = v20;
      swift_release(v22);
    }
    v23 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess(v23 + 40, v2 + 48, 1, 0);
    v15 = *(_QWORD *)(v23 + 40);
    *(_QWORD *)(v23 + 40) = v3;
  }
  swift_bridgeObjectRelease(v15);
  free((void *)v2);
}

uint64_t sub_10016DEF4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  _BYTE v15[24];

  v3 = sub_1000039AC(&qword_1003756A0);
  __chkstk_darwin(v3);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf44Proto_Gnss_Emergency_GanssAidRequestPerGanssP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssDataBitAssist;
  swift_beginAccess(v6, v15, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_1003756A0);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_GanssDataBitAssist(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, (uint64_t)a1, type metadata accessor for Proto_Gnss_Emergency_GanssDataBitAssist);
  *a1 = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  v8 = (char *)a1 + v7[6];
  *(_DWORD *)v8 = 0;
  v8[4] = 1;
  v9 = (char *)a1 + v7[7];
  *(_DWORD *)v9 = 0;
  v9[4] = 1;
  v10 = (char *)a1 + v7[8];
  *(_DWORD *)v10 = 0;
  v10[4] = 1;
  v11 = (char *)a1 + v7[9];
  *(_DWORD *)v11 = 0;
  v11[4] = 1;
  v12 = (char *)a1 + v7[10];
  *(_DWORD *)v12 = 0;
  v12[4] = 1;
  return sub_100015704((uint64_t)v5, &qword_1003756A0);
}

uint64_t sub_10016E05C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_1003756A0);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_1001AEE64(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GanssDataBitAssist);
  v17 = type metadata accessor for Proto_Gnss_Emergency_GanssDataBitAssist(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_1003756A0);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf44Proto_Gnss_Emergency_GanssAidRequestPerGanssP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssDataBitAssist;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf44Proto_Gnss_Emergency_GanssAidRequestPerGanssP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssDataBitAssist, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_1003756A0);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10016E1DC(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_1003756A0);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_GanssDataBitAssist(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf44Proto_Gnss_Emergency_GanssAidRequestPerGanssP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssDataBitAssist;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_1003756A0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = &_swiftEmptyArrayStorage;
    UnknownStorage.init()();
    v11 = (char *)v9 + v6[6];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = (char *)v9 + v6[7];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = (char *)v9 + v6[8];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    v14 = (char *)v9 + v6[9];
    *(_DWORD *)v14 = 0;
    v14[4] = 1;
    v15 = (char *)v9 + v6[10];
    *(_DWORD *)v15 = 0;
    v15[4] = 1;
    sub_100015704((uint64_t)v5, &qword_1003756A0);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GanssDataBitAssist);
  }
  return sub_10016E374;
}

void sub_10016E374(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_10016E05C, type metadata accessor for Proto_Gnss_Emergency_GanssDataBitAssist);
}

BOOL sub_10016E388()
{
  return sub_10001CFF4(&qword_1003756A0, type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss, &OBJC_IVAR____TtCV10ALProtobuf44Proto_Gnss_Emergency_GanssAidRequestPerGanssP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssDataBitAssist, type metadata accessor for Proto_Gnss_Emergency_GanssDataBitAssist);
}

uint64_t sub_10016E3AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_1003756A0);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_1001AEE64(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for Proto_Gnss_Emergency_GanssDataBitAssist(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf44Proto_Gnss_Emergency_GanssAidRequestPerGanssP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssDataBitAssist;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf44Proto_Gnss_Emergency_GanssAidRequestPerGanssP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssDataBitAssist, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_1003756A0);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10016E4DC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  _BYTE v14[24];

  v3 = sub_1000039AC(&qword_1003756A8);
  __chkstk_darwin(v3);
  v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf44Proto_Gnss_Emergency_GanssAidRequestPerGanssP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssNavModelAddData;
  swift_beginAccess(v6, v14, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_1003756A8);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_GanssNavModelAddData(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, (uint64_t)a1, type metadata accessor for Proto_Gnss_Emergency_GanssNavModelAddData);
  *a1 = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  v8 = (char *)a1 + v7[6];
  *(_DWORD *)v8 = 0;
  v8[4] = 1;
  v9 = (char *)a1 + v7[7];
  *(_DWORD *)v9 = 0;
  v9[4] = 1;
  v10 = (char *)a1 + v7[8];
  *(_DWORD *)v10 = 0;
  v10[4] = 1;
  v11 = (char *)a1 + v7[9];
  *(_DWORD *)v11 = 0;
  v11[4] = 1;
  return sub_100015704((uint64_t)v5, &qword_1003756A8);
}

uint64_t sub_10016E634(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_1003756A8);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_1001AEE64(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GanssNavModelAddData);
  v17 = type metadata accessor for Proto_Gnss_Emergency_GanssNavModelAddData(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_1003756A8);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf44Proto_Gnss_Emergency_GanssAidRequestPerGanssP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssNavModelAddData;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf44Proto_Gnss_Emergency_GanssAidRequestPerGanssP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssNavModelAddData, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_1003756A8);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10016E7B4(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_1003756A8);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_GanssNavModelAddData(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf44Proto_Gnss_Emergency_GanssAidRequestPerGanssP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssNavModelAddData;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_1003756A8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = &_swiftEmptyArrayStorage;
    UnknownStorage.init()();
    v11 = (char *)v9 + v6[6];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = (char *)v9 + v6[7];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = (char *)v9 + v6[8];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    v14 = (char *)v9 + v6[9];
    *(_DWORD *)v14 = 0;
    v14[4] = 1;
    sub_100015704((uint64_t)v5, &qword_1003756A8);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GanssNavModelAddData);
  }
  return sub_10016E93C;
}

void sub_10016E93C(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_10016E634, type metadata accessor for Proto_Gnss_Emergency_GanssNavModelAddData);
}

BOOL sub_10016E950()
{
  return sub_10001CFF4(&qword_1003756A8, type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss, &OBJC_IVAR____TtCV10ALProtobuf44Proto_Gnss_Emergency_GanssAidRequestPerGanssP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssNavModelAddData, type metadata accessor for Proto_Gnss_Emergency_GanssNavModelAddData);
}

uint64_t sub_10016E974()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_1003756A8);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_1001AEE64(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for Proto_Gnss_Emergency_GanssNavModelAddData(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf44Proto_Gnss_Emergency_GanssAidRequestPerGanssP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssNavModelAddData;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf44Proto_Gnss_Emergency_GanssAidRequestPerGanssP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssNavModelAddData, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_1003756A8);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10016EAA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v14[24];

  v3 = sub_1000039AC(&qword_1003756B0);
  __chkstk_darwin(v3);
  v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf44Proto_Gnss_Emergency_GanssAidRequestPerGanssP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssAddAssistDataChoices;
  swift_beginAccess(v6, v14, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_1003756B0);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_GanssAddAssistDataChoices(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_GanssAddAssistDataChoices);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v7[6];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v7[7];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1 + v7[8];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  return sub_100015704((uint64_t)v5, &qword_1003756B0);
}

uint64_t sub_10016EBEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_1003756B0);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_1001AEE64(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GanssAddAssistDataChoices);
  v17 = type metadata accessor for Proto_Gnss_Emergency_GanssAddAssistDataChoices(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_1003756B0);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf44Proto_Gnss_Emergency_GanssAidRequestPerGanssP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssAddAssistDataChoices;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf44Proto_Gnss_Emergency_GanssAidRequestPerGanssP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssAddAssistDataChoices, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_1003756B0);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10016ED6C(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_1003756B0);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_GanssAddAssistDataChoices(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf44Proto_Gnss_Emergency_GanssAidRequestPerGanssP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssAddAssistDataChoices;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_1003756B0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    v14 = &v9[v6[8]];
    *(_DWORD *)v14 = 0;
    v14[4] = 1;
    sub_100015704((uint64_t)v5, &qword_1003756B0);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GanssAddAssistDataChoices);
  }
  return sub_10016EEE4;
}

void sub_10016EEE4(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_10016EBEC, type metadata accessor for Proto_Gnss_Emergency_GanssAddAssistDataChoices);
}

BOOL sub_10016EEF8()
{
  return sub_10001CFF4(&qword_1003756B0, type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss, &OBJC_IVAR____TtCV10ALProtobuf44Proto_Gnss_Emergency_GanssAidRequestPerGanssP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssAddAssistDataChoices, type metadata accessor for Proto_Gnss_Emergency_GanssAddAssistDataChoices);
}

uint64_t sub_10016EF1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_1003756B0);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_1001AEE64(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for Proto_Gnss_Emergency_GanssAddAssistDataChoices(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf44Proto_Gnss_Emergency_GanssAidRequestPerGanssP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssAddAssistDataChoices;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf44Proto_Gnss_Emergency_GanssAidRequestPerGanssP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssAddAssistDataChoices, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_1003756B0);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10016F04C@<X0>(uint64_t a1@<X8>)
{
  return sub_100023FF4(type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss, &qword_1003B0C00, &qword_1003B0C08, (uint64_t)sub_1001AED74, a1);
}

uint64_t sub_10016F070()
{
  return sub_100036594(&qword_1003B0C00, &qword_1003B0C08, (uint64_t)sub_1001AED74);
}

uint64_t sub_10016F08C()
{
  return sub_1000B8DB4(type metadata accessor for Proto_Gnss_Emergency_GanssAssistanceRequest);
}

uint64_t sub_10016F098(int a1)
{
  return sub_1000B8DF4(a1, type metadata accessor for Proto_Gnss_Emergency_GanssAssistanceRequest);
}

uint64_t (*sub_10016F0A4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssAssistanceRequest(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10016F0F4()
{
  return sub_100020B70(type metadata accessor for Proto_Gnss_Emergency_GanssAssistanceRequest);
}

uint64_t sub_10016F100()
{
  return sub_100020BAC(type metadata accessor for Proto_Gnss_Emergency_GanssAssistanceRequest);
}

uint64_t sub_10016F10C()
{
  return sub_1000A9E40(type metadata accessor for Proto_Gnss_Emergency_GanssAssistanceRequest);
}

uint64_t sub_10016F118(int a1)
{
  return sub_1000A9E80(a1, type metadata accessor for Proto_Gnss_Emergency_GanssAssistanceRequest);
}

uint64_t (*sub_10016F124(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssAssistanceRequest(0) + 32);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10016F174()
{
  return sub_1000278D8(type metadata accessor for Proto_Gnss_Emergency_GanssAssistanceRequest);
}

uint64_t sub_10016F180()
{
  return sub_100027914(type metadata accessor for Proto_Gnss_Emergency_GanssAssistanceRequest);
}

uint64_t sub_10016F18C()
{
  return sub_1000B4FE0(type metadata accessor for Proto_Gnss_Emergency_GanssAssistanceRequest);
}

uint64_t sub_10016F198(int a1)
{
  return sub_1000B5020(a1, type metadata accessor for Proto_Gnss_Emergency_GanssAssistanceRequest);
}

uint64_t (*sub_10016F1A4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssAssistanceRequest(0) + 36);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10016F1F4()
{
  return sub_10002822C(type metadata accessor for Proto_Gnss_Emergency_GanssAssistanceRequest);
}

uint64_t sub_10016F200()
{
  return sub_100028268(type metadata accessor for Proto_Gnss_Emergency_GanssAssistanceRequest);
}

uint64_t sub_10016F20C()
{
  return sub_1001514C4(type metadata accessor for Proto_Gnss_Emergency_GanssAssistanceRequest);
}

uint64_t sub_10016F218(int a1)
{
  return sub_100151504(a1, type metadata accessor for Proto_Gnss_Emergency_GanssAssistanceRequest);
}

uint64_t (*sub_10016F224(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssAssistanceRequest(0) + 40);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10016F274()
{
  return sub_1000336EC(type metadata accessor for Proto_Gnss_Emergency_GanssAssistanceRequest);
}

uint64_t sub_10016F280()
{
  return sub_100033728(type metadata accessor for Proto_Gnss_Emergency_GanssAssistanceRequest);
}

uint64_t sub_10016F28C()
{
  return sub_1000A6D84(type metadata accessor for Proto_Gnss_Emergency_GanssAssistanceRequest);
}

uint64_t sub_10016F298(int a1)
{
  return sub_1000A6DC4(a1, type metadata accessor for Proto_Gnss_Emergency_GanssAssistanceRequest);
}

uint64_t (*sub_10016F2A4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssAssistanceRequest(0) + 44);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10016F2F4()
{
  return sub_100033824(type metadata accessor for Proto_Gnss_Emergency_GanssAssistanceRequest);
}

uint64_t sub_10016F300()
{
  return sub_100033860(type metadata accessor for Proto_Gnss_Emergency_GanssAssistanceRequest);
}

uint64_t sub_10016F30C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000A6FFC(type metadata accessor for Proto_Gnss_Emergency_GanssAssistanceRequest, a1);
}

uint64_t sub_10016F318(uint64_t a1)
{
  return sub_1000A7054(a1, type metadata accessor for Proto_Gnss_Emergency_GanssAssistanceRequest);
}

uint64_t (*sub_10016F324())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for Proto_Gnss_Emergency_GanssAssistanceRequest(0);
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_10016F34C@<X0>(_QWORD *a1@<X8>)
{
  return sub_10016F358(type metadata accessor for Proto_Gnss_Emergency_GanssAssistanceRequest, a1);
}

uint64_t sub_10016F358@<X0>(uint64_t (*a1)(_QWORD)@<X0>, _QWORD *a2@<X8>)
{
  int *v3;
  uint64_t result;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;

  *a2 = &_swiftEmptyArrayStorage;
  a2[1] = &_swiftEmptyArrayStorage;
  v3 = (int *)a1(0);
  result = UnknownStorage.init()();
  v5 = (char *)a2 + v3[7];
  *(_DWORD *)v5 = 0;
  v5[4] = 1;
  v6 = (char *)a2 + v3[8];
  *(_DWORD *)v6 = 0;
  v6[4] = 1;
  v7 = (char *)a2 + v3[9];
  *(_DWORD *)v7 = 0;
  v7[4] = 1;
  v8 = (char *)a2 + v3[10];
  *(_DWORD *)v8 = 0;
  v8[4] = 1;
  v9 = (char *)a2 + v3[11];
  *(_DWORD *)v9 = 0;
  v9[4] = 1;
  return result;
}

uint64_t sub_10016F3F0()
{
  return sub_10016AD64(type metadata accessor for Proto_Gnss_Emergency_AssistanceNeededReport);
}

uint64_t sub_10016F3FC(char a1)
{
  return sub_10016D4D4(a1, type metadata accessor for Proto_Gnss_Emergency_AssistanceNeededReport, type metadata accessor for Proto_Gnss_Emergency_AssistanceNeededReport._StorageClass, (void (*)(uint64_t))sub_1001B13E0);
}

void (*sub_10016F418(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_AssistanceNeededReport(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 16, v3, 0, 0);
  v6 = *(unsigned __int8 *)(v5 + 16);
  if (v6 == 9)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_10016F494;
}

void sub_10016F494(uint64_t *a1, char a2)
{
  sub_10016D610(a1, a2, type metadata accessor for Proto_Gnss_Emergency_AssistanceNeededReport._StorageClass, (void (*)(uint64_t))sub_1001B13E0);
}

BOOL sub_10016F4A8()
{
  return sub_10016B008(type metadata accessor for Proto_Gnss_Emergency_AssistanceNeededReport);
}

uint64_t sub_10016F4B4()
{
  return sub_10016D758(type metadata accessor for Proto_Gnss_Emergency_AssistanceNeededReport, type metadata accessor for Proto_Gnss_Emergency_AssistanceNeededReport._StorageClass, (void (*)(uint64_t))sub_1001B13E0, 9);
}

uint64_t sub_10016F4D4()
{
  return sub_10016B138(type metadata accessor for Proto_Gnss_Emergency_AssistanceNeededReport);
}

uint64_t sub_10016F4E0(int a1)
{
  return sub_10016F4FC(a1, type metadata accessor for Proto_Gnss_Emergency_AssistanceNeededReport, type metadata accessor for Proto_Gnss_Emergency_AssistanceNeededReport._StorageClass, (void (*)(uint64_t))sub_1001B13E0);
}

uint64_t sub_10016F4FC(int a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD), void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _BYTE v17[24];

  v7 = v4;
  v9 = *(int *)(a2(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v4 + v9)) & 1) == 0)
  {
    v10 = *(_QWORD *)(v4 + v9);
    v11 = a3(0);
    v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    v13 = swift_retain(v10);
    a4(v13);
    v14 = *(_QWORD *)(v7 + v9);
    *(_QWORD *)(v7 + v9) = v12;
    swift_release(v14);
  }
  v15 = *(_QWORD *)(v7 + v9);
  result = swift_beginAccess(v15 + 20, v17, 1, 0);
  *(_DWORD *)(v15 + 20) = a1;
  *(_BYTE *)(v15 + 24) = 0;
  return result;
}

void (*sub_10016F5AC(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_AssistanceNeededReport(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 20, v3, 0, 0);
  v6 = *(_DWORD *)(v5 + 20);
  if (*(_BYTE *)(v5 + 24))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_10016F62C;
}

void sub_10016F62C(uint64_t *a1, char a2)
{
  sub_10016F640(a1, a2, type metadata accessor for Proto_Gnss_Emergency_AssistanceNeededReport._StorageClass, (void (*)(uint64_t))sub_1001B13E0);
}

void sub_10016F640(uint64_t *a1, char a2, uint64_t (*a3)(_QWORD), void (*a4)(uint64_t))
{
  uint64_t v7;
  int v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v7 = *a1;
  v8 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    v10 = v7 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v10 = v7 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v11 = *(int *)(v7 + 84);
    v12 = *(_QWORD *)(v7 + 72);
    v13 = *(_QWORD *)(v12 + v11);
    v14 = a3(0);
    v15 = swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    v16 = swift_retain(v13);
    a4(v16);
    v17 = *(_QWORD *)(v12 + v11);
    *(_QWORD *)(v12 + v11) = v15;
    swift_release(v17);
  }
LABEL_4:
  v18 = *(_QWORD *)(*(_QWORD *)(v7 + 72) + *(int *)(v7 + 84));
  swift_beginAccess(v18 + 20, v10, 1, 0);
  *(_DWORD *)(v18 + 20) = v8;
  *(_BYTE *)(v18 + 24) = 0;
  free((void *)v7);
}

BOOL sub_10016F718()
{
  return sub_10016B3E8(type metadata accessor for Proto_Gnss_Emergency_AssistanceNeededReport);
}

uint64_t sub_10016F724()
{
  return sub_10016F740(type metadata accessor for Proto_Gnss_Emergency_AssistanceNeededReport, type metadata accessor for Proto_Gnss_Emergency_AssistanceNeededReport._StorageClass, (void (*)(uint64_t))sub_1001B13E0);
}

uint64_t sub_10016F740(uint64_t (*a1)(_QWORD), uint64_t (*a2)(_QWORD), void (*a3)(uint64_t))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _BYTE v15[24];

  v6 = v3;
  v7 = *(int *)(a1(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v3 + v7)) & 1) == 0)
  {
    v8 = *(_QWORD *)(v3 + v7);
    v9 = a2(0);
    v10 = swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
    v11 = swift_retain(v8);
    a3(v11);
    v12 = *(_QWORD *)(v6 + v7);
    *(_QWORD *)(v6 + v7) = v10;
    swift_release(v12);
  }
  v13 = *(_QWORD *)(v6 + v7);
  result = swift_beginAccess(v13 + 20, v15, 1, 0);
  *(_DWORD *)(v13 + 20) = 0;
  *(_BYTE *)(v13 + 24) = 1;
  return result;
}

uint64_t sub_10016F7F4@<X0>(uint64_t a1@<X8>)
{
  return sub_10017ECB0(type metadata accessor for Proto_Gnss_Emergency_AssistanceNeededReport, &OBJC_IVAR____TtCV10ALProtobuf43Proto_Gnss_Emergency_AssistanceNeededReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__sessionInfo, a1);
}

uint64_t sub_10016F808(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_100375648);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_AssistanceNeededReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for Proto_Gnss_Emergency_AssistanceNeededReport._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_1001B13E0(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_SessionInfo);
  v17 = type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_100375648);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf43Proto_Gnss_Emergency_AssistanceNeededReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__sessionInfo;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf43Proto_Gnss_Emergency_AssistanceNeededReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__sessionInfo, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_100375648);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10016F988(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_100375648);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_AssistanceNeededReport(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf43Proto_Gnss_Emergency_AssistanceNeededReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__sessionInfo;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_100375648);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 6;
    v9[v6[6]] = 7;
    v11 = &v9[v6[7]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    sub_100015704((uint64_t)v5, &qword_100375648);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_SessionInfo);
  }
  return sub_10016FAE8;
}

void sub_10016FAE8(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_10016F808, type metadata accessor for Proto_Gnss_Emergency_SessionInfo);
}

BOOL sub_10016FAFC()
{
  return sub_10001CFF4(&qword_100375648, type metadata accessor for Proto_Gnss_Emergency_AssistanceNeededReport, &OBJC_IVAR____TtCV10ALProtobuf43Proto_Gnss_Emergency_AssistanceNeededReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__sessionInfo, type metadata accessor for Proto_Gnss_Emergency_SessionInfo);
}

uint64_t sub_10016FB20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_100375648);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_AssistanceNeededReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for Proto_Gnss_Emergency_AssistanceNeededReport._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_1001B13E0(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf43Proto_Gnss_Emergency_AssistanceNeededReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__sessionInfo;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf43Proto_Gnss_Emergency_AssistanceNeededReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__sessionInfo, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_100375648);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10016FC50@<X0>(_QWORD *a1@<X8>)
{
  return sub_100170108(&qword_1003756B8, &OBJC_IVAR____TtCV10ALProtobuf43Proto_Gnss_Emergency_AssistanceNeededReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__assistanceRequest, type metadata accessor for Proto_Gnss_Emergency_GpsAssistanceRequest, a1);
}

uint64_t sub_10016FC6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_1003756B8);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_AssistanceNeededReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for Proto_Gnss_Emergency_AssistanceNeededReport._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_1001B13E0(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GpsAssistanceRequest);
  v17 = type metadata accessor for Proto_Gnss_Emergency_GpsAssistanceRequest(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_1003756B8);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf43Proto_Gnss_Emergency_AssistanceNeededReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__assistanceRequest;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf43Proto_Gnss_Emergency_AssistanceNeededReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__assistanceRequest, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_1003756B8);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10016FDEC(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_1003756B8);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_GpsAssistanceRequest(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_AssistanceNeededReport(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf43Proto_Gnss_Emergency_AssistanceNeededReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__assistanceRequest;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_1003756B8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = &_swiftEmptyArrayStorage;
    v9[1] = &_swiftEmptyArrayStorage;
    UnknownStorage.init()();
    v11 = (char *)v9 + v6[7];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = (char *)v9 + v6[8];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = (char *)v9 + v6[9];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    v14 = (char *)v9 + v6[10];
    *(_DWORD *)v14 = 0;
    v14[4] = 1;
    v15 = (char *)v9 + v6[11];
    *(_DWORD *)v15 = 0;
    v15[4] = 1;
    sub_100015704((uint64_t)v5, &qword_1003756B8);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GpsAssistanceRequest);
  }
  return sub_10016FF84;
}

void sub_10016FF84(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_10016FC6C, type metadata accessor for Proto_Gnss_Emergency_GpsAssistanceRequest);
}

BOOL sub_10016FF98()
{
  return sub_10001CFF4(&qword_1003756B8, type metadata accessor for Proto_Gnss_Emergency_AssistanceNeededReport, &OBJC_IVAR____TtCV10ALProtobuf43Proto_Gnss_Emergency_AssistanceNeededReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__assistanceRequest, type metadata accessor for Proto_Gnss_Emergency_GpsAssistanceRequest);
}

uint64_t sub_10016FFBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_1003756B8);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_AssistanceNeededReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for Proto_Gnss_Emergency_AssistanceNeededReport._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_1001B13E0(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for Proto_Gnss_Emergency_GpsAssistanceRequest(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf43Proto_Gnss_Emergency_AssistanceNeededReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__assistanceRequest;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf43Proto_Gnss_Emergency_AssistanceNeededReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__assistanceRequest, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_1003756B8);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1001700EC@<X0>(_QWORD *a1@<X8>)
{
  return sub_100170108(&qword_1003756C0, &OBJC_IVAR____TtCV10ALProtobuf43Proto_Gnss_Emergency_AssistanceNeededReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssAssistanceRequest, type metadata accessor for Proto_Gnss_Emergency_GanssAssistanceRequest, a1);
}

uint64_t sub_100170108@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t (*a3)(_QWORD)@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  _BYTE v21[24];

  v9 = sub_1000039AC(a1);
  __chkstk_darwin(v9);
  v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v12 = *(_QWORD *)(v4 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_AssistanceNeededReport(0) + 20))
      + *a2;
  swift_beginAccess(v12, v21, 0, 0);
  sub_10000E660(v12, (uint64_t)v11, a1);
  v13 = (int *)a3(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v13 - 1) + 48))(v11, 1, v13) != 1)
    return sub_100003E08((uint64_t)v11, (uint64_t)a4, a3);
  *a4 = &_swiftEmptyArrayStorage;
  a4[1] = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  v14 = (char *)a4 + v13[7];
  *(_DWORD *)v14 = 0;
  v14[4] = 1;
  v15 = (char *)a4 + v13[8];
  *(_DWORD *)v15 = 0;
  v15[4] = 1;
  v16 = (char *)a4 + v13[9];
  *(_DWORD *)v16 = 0;
  v16[4] = 1;
  v17 = (char *)a4 + v13[10];
  *(_DWORD *)v17 = 0;
  v17[4] = 1;
  v18 = (char *)a4 + v13[11];
  *(_DWORD *)v18 = 0;
  v18[4] = 1;
  return sub_100015704((uint64_t)v11, a1);
}

uint64_t sub_10017026C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_1003756C0);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_AssistanceNeededReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for Proto_Gnss_Emergency_AssistanceNeededReport._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_1001B13E0(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GanssAssistanceRequest);
  v17 = type metadata accessor for Proto_Gnss_Emergency_GanssAssistanceRequest(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_1003756C0);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf43Proto_Gnss_Emergency_AssistanceNeededReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssAssistanceRequest;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf43Proto_Gnss_Emergency_AssistanceNeededReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssAssistanceRequest, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_1003756C0);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1001703EC(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_1003756C0);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_GanssAssistanceRequest(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_AssistanceNeededReport(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf43Proto_Gnss_Emergency_AssistanceNeededReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssAssistanceRequest;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_1003756C0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = &_swiftEmptyArrayStorage;
    v9[1] = &_swiftEmptyArrayStorage;
    UnknownStorage.init()();
    v11 = (char *)v9 + v6[7];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = (char *)v9 + v6[8];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = (char *)v9 + v6[9];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    v14 = (char *)v9 + v6[10];
    *(_DWORD *)v14 = 0;
    v14[4] = 1;
    v15 = (char *)v9 + v6[11];
    *(_DWORD *)v15 = 0;
    v15[4] = 1;
    sub_100015704((uint64_t)v5, &qword_1003756C0);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GanssAssistanceRequest);
  }
  return sub_100170584;
}

void sub_100170584(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_10017026C, type metadata accessor for Proto_Gnss_Emergency_GanssAssistanceRequest);
}

BOOL sub_100170598()
{
  return sub_10001CFF4(&qword_1003756C0, type metadata accessor for Proto_Gnss_Emergency_AssistanceNeededReport, &OBJC_IVAR____TtCV10ALProtobuf43Proto_Gnss_Emergency_AssistanceNeededReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssAssistanceRequest, type metadata accessor for Proto_Gnss_Emergency_GanssAssistanceRequest);
}

uint64_t sub_1001705BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_1003756C0);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_AssistanceNeededReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for Proto_Gnss_Emergency_AssistanceNeededReport._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_1001B13E0(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for Proto_Gnss_Emergency_GanssAssistanceRequest(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf43Proto_Gnss_Emergency_AssistanceNeededReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssAssistanceRequest;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf43Proto_Gnss_Emergency_AssistanceNeededReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssAssistanceRequest, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_1003756C0);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1001706EC@<X0>(uint64_t a1@<X8>)
{
  return sub_100023FF4(type metadata accessor for Proto_Gnss_Emergency_AssistanceNeededReport, &qword_1003B0C20, &qword_1003B0C28, (uint64_t)sub_1001B1304, a1);
}

uint64_t sub_100170710()
{
  return sub_100036594(&qword_1003B0C20, &qword_1003B0C28, (uint64_t)sub_1001B1304);
}

uint64_t sub_10017072C()
{
  return sub_10002DF3C(type metadata accessor for Proto_Gnss_Emergency_EutranCellTime);
}

uint64_t sub_100170738(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for Proto_Gnss_Emergency_EutranCellTime);
}

uint64_t (*sub_100170744(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_EutranCellTime(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100170794()
{
  return sub_100027768(type metadata accessor for Proto_Gnss_Emergency_EutranCellTime);
}

uint64_t sub_1001707A0()
{
  return sub_1000277A4(type metadata accessor for Proto_Gnss_Emergency_EutranCellTime);
}

uint64_t sub_1001707AC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000053C4(type metadata accessor for Proto_Gnss_Emergency_EutranCellTime, a1);
}

uint64_t sub_1001707B8(uint64_t a1)
{
  return sub_10000541C(a1, type metadata accessor for Proto_Gnss_Emergency_EutranCellTime);
}

uint64_t (*sub_1001707C4())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for Proto_Gnss_Emergency_EutranCellTime(0);
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1001707EC@<X0>(_QWORD *a1@<X8>)
{
  return sub_1001707F8(type metadata accessor for Proto_Gnss_Emergency_EutranCellTime, a1);
}

uint64_t sub_1001707F8@<X0>(uint64_t (*a1)(_QWORD)@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  char *v5;

  *a2 = &_swiftEmptyArrayStorage;
  v3 = a1(0);
  result = UnknownStorage.init()();
  v5 = (char *)a2 + *(int *)(v3 + 24);
  *(_DWORD *)v5 = 0;
  v5[4] = 1;
  return result;
}

uint64_t sub_100170850()
{
  return sub_100019188(type metadata accessor for Proto_Gnss_Emergency_ClsGeranCellTime);
}

uint64_t sub_10017085C(int a1)
{
  return sub_1000191C8(a1, type metadata accessor for Proto_Gnss_Emergency_ClsGeranCellTime);
}

uint64_t (*sub_100170868(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsGeranCellTime(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1001708B8()
{
  return sub_100019258(type metadata accessor for Proto_Gnss_Emergency_ClsGeranCellTime);
}

uint64_t sub_1001708C4()
{
  return sub_100019294(type metadata accessor for Proto_Gnss_Emergency_ClsGeranCellTime);
}

uint64_t sub_1001708D0()
{
  return sub_10002DF3C(type metadata accessor for Proto_Gnss_Emergency_ClsGeranCellTime);
}

uint64_t sub_1001708DC(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for Proto_Gnss_Emergency_ClsGeranCellTime);
}

uint64_t (*sub_1001708E8(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsGeranCellTime(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100170938()
{
  return sub_100027768(type metadata accessor for Proto_Gnss_Emergency_ClsGeranCellTime);
}

uint64_t sub_100170944()
{
  return sub_1000277A4(type metadata accessor for Proto_Gnss_Emergency_ClsGeranCellTime);
}

uint64_t sub_100170950()
{
  return sub_1000B8DB4(type metadata accessor for Proto_Gnss_Emergency_ClsGeranCellTime);
}

uint64_t sub_10017095C(int a1)
{
  return sub_1000B8DF4(a1, type metadata accessor for Proto_Gnss_Emergency_ClsGeranCellTime);
}

uint64_t (*sub_100170968(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsGeranCellTime(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1001709B8()
{
  return sub_100020B70(type metadata accessor for Proto_Gnss_Emergency_ClsGeranCellTime);
}

uint64_t sub_1001709C4()
{
  return sub_100020BAC(type metadata accessor for Proto_Gnss_Emergency_ClsGeranCellTime);
}

uint64_t sub_1001709D0()
{
  return sub_1000A9E40(type metadata accessor for Proto_Gnss_Emergency_ClsGeranCellTime);
}

uint64_t sub_1001709DC(int a1)
{
  return sub_1000A9E80(a1, type metadata accessor for Proto_Gnss_Emergency_ClsGeranCellTime);
}

uint64_t (*sub_1001709E8(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsGeranCellTime(0) + 32);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100170A38()
{
  return sub_1000278D8(type metadata accessor for Proto_Gnss_Emergency_ClsGeranCellTime);
}

uint64_t sub_100170A44()
{
  return sub_100027914(type metadata accessor for Proto_Gnss_Emergency_ClsGeranCellTime);
}

uint64_t sub_100170A50()
{
  return sub_1000B4FE0(type metadata accessor for Proto_Gnss_Emergency_ClsGeranCellTime);
}

uint64_t sub_100170A5C(int a1)
{
  return sub_1000B5020(a1, type metadata accessor for Proto_Gnss_Emergency_ClsGeranCellTime);
}

uint64_t (*sub_100170A68(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsGeranCellTime(0) + 36);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100170AB8()
{
  return sub_10002822C(type metadata accessor for Proto_Gnss_Emergency_ClsGeranCellTime);
}

uint64_t sub_100170AC4()
{
  return sub_100028268(type metadata accessor for Proto_Gnss_Emergency_ClsGeranCellTime);
}

uint64_t sub_100170AD0()
{
  return sub_1001514C4(type metadata accessor for Proto_Gnss_Emergency_ClsGeranCellTime);
}

uint64_t sub_100170ADC(int a1)
{
  return sub_100151504(a1, type metadata accessor for Proto_Gnss_Emergency_ClsGeranCellTime);
}

uint64_t (*sub_100170AE8(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsGeranCellTime(0) + 40);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100170B38()
{
  return sub_1000336EC(type metadata accessor for Proto_Gnss_Emergency_ClsGeranCellTime);
}

uint64_t sub_100170B44()
{
  return sub_100033728(type metadata accessor for Proto_Gnss_Emergency_ClsGeranCellTime);
}

uint64_t sub_100170B50()
{
  return sub_1000A6D84(type metadata accessor for Proto_Gnss_Emergency_ClsGeranCellTime);
}

uint64_t sub_100170B5C(int a1)
{
  return sub_1000A6DC4(a1, type metadata accessor for Proto_Gnss_Emergency_ClsGeranCellTime);
}

uint64_t (*sub_100170B68(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsGeranCellTime(0) + 44);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100170BB8()
{
  return sub_100033824(type metadata accessor for Proto_Gnss_Emergency_ClsGeranCellTime);
}

uint64_t sub_100170BC4()
{
  return sub_100033860(type metadata accessor for Proto_Gnss_Emergency_ClsGeranCellTime);
}

int *sub_100170BD0@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for Proto_Gnss_Emergency_ClsGeranCellTime(0);
  v3 = a1 + result[5];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = a1 + result[6];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = a1 + result[7];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = a1 + result[8];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a1 + result[9];
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  v8 = a1 + result[10];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + result[11];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  return result;
}

uint64_t sub_100170C6C()
{
  return sub_100019188(type metadata accessor for Proto_Gnss_Emergency_GpsTowCdmaCellTime);
}

uint64_t sub_100170C78(int a1)
{
  return sub_1000191C8(a1, type metadata accessor for Proto_Gnss_Emergency_GpsTowCdmaCellTime);
}

uint64_t (*sub_100170C84(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsTowCdmaCellTime(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100170CD4()
{
  return sub_100019258(type metadata accessor for Proto_Gnss_Emergency_GpsTowCdmaCellTime);
}

uint64_t sub_100170CE0()
{
  return sub_100019294(type metadata accessor for Proto_Gnss_Emergency_GpsTowCdmaCellTime);
}

uint64_t sub_100170CEC()
{
  return sub_10002DF3C(type metadata accessor for Proto_Gnss_Emergency_GpsTowCdmaCellTime);
}

uint64_t sub_100170CF8(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for Proto_Gnss_Emergency_GpsTowCdmaCellTime);
}

uint64_t (*sub_100170D04(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsTowCdmaCellTime(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100170D54()
{
  return sub_100027768(type metadata accessor for Proto_Gnss_Emergency_GpsTowCdmaCellTime);
}

uint64_t sub_100170D60()
{
  return sub_1000277A4(type metadata accessor for Proto_Gnss_Emergency_GpsTowCdmaCellTime);
}

